
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e764  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 LIBJPEG_R     00000028  0040e764  0040e764  00016764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  0040e78c  0040e78c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .relocate     000008c0  20400000  0040e794  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .bss          0000bb84  204008c0  0040f054  000188c0  2**2
                  ALLOC
  5 .stack        00002004  2040c444  0041abd8  000188c0  2**0
                  ALLOC
  6 .heap         00000200  2040e448  0041cbdc  000188c0  2**0
                  ALLOC
  7 .ARM.attributes 00000037  00000000  00000000  000188c0  2**0
                  CONTENTS, READONLY
  8 .comment      00000543  00000000  00000000  000188f7  2**0
                  CONTENTS, READONLY
  9 .iar.rtmodel  00000096  00000000  00000000  00018e3a  2**0
                  CONTENTS, READONLY
 10 .iar_vfe_header 00000008  00000000  00000000  00018ed0  2**2
                  CONTENTS, READONLY
 11 .iar.debug_line 000000a8  00000000  00000000  00018ed8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222f6  00000000  00000000  00018f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f7f  00000000  00000000  0003b276  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e35e  00000000  00000000  0003f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001038  00000000  00000000  0004d553  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001140  00000000  00000000  0004e58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000228b1  00000000  00000000  0004f6cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018851  00000000  00000000  00071f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00085f73  00000000  00000000  0008a7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004bb8  00000000  00000000  00110740  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubnames 000005e0  00000000  00000000  001152f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo 00000110  00000000  00000000  001158d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e448 	.word	0x2040e448
  400004:	0040313d 	.word	0x0040313d
  400008:	00403139 	.word	0x00403139
  40000c:	00403139 	.word	0x00403139
  400010:	00403139 	.word	0x00403139
  400014:	00403139 	.word	0x00403139
  400018:	00403139 	.word	0x00403139
	...
  40002c:	0040099d 	.word	0x0040099d
  400030:	00403139 	.word	0x00403139
  400034:	00000000 	.word	0x00000000
  400038:	00400a39 	.word	0x00400a39
  40003c:	00400a9d 	.word	0x00400a9d
  400040:	00403139 	.word	0x00403139
  400044:	00403139 	.word	0x00403139
  400048:	00403139 	.word	0x00403139
  40004c:	00403139 	.word	0x00403139
  400050:	00403139 	.word	0x00403139
  400054:	00403139 	.word	0x00403139
  400058:	00403139 	.word	0x00403139
  40005c:	00403139 	.word	0x00403139
  400060:	00403139 	.word	0x00403139
  400064:	00000000 	.word	0x00000000
  400068:	004005b1 	.word	0x004005b1
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005d9 	.word	0x004005d9
  400074:	00403139 	.word	0x00403139
  400078:	00403139 	.word	0x00403139
  40007c:	00403139 	.word	0x00403139
  400080:	004005ed 	.word	0x004005ed
  400084:	00400601 	.word	0x00400601
  400088:	00403139 	.word	0x00403139
  40008c:	00403139 	.word	0x00403139
  400090:	00403139 	.word	0x00403139
  400094:	00403139 	.word	0x00403139
  400098:	00403139 	.word	0x00403139
  40009c:	00403139 	.word	0x00403139
  4000a0:	00403139 	.word	0x00403139
  4000a4:	00403139 	.word	0x00403139
  4000a8:	00403139 	.word	0x00403139
  4000ac:	00403139 	.word	0x00403139
  4000b0:	00403139 	.word	0x00403139
  4000b4:	00400365 	.word	0x00400365
  4000b8:	00403139 	.word	0x00403139
  4000bc:	00403139 	.word	0x00403139
  4000c0:	00403139 	.word	0x00403139
  4000c4:	00403139 	.word	0x00403139
  4000c8:	00403139 	.word	0x00403139
	...
  4000e0:	00400379 	.word	0x00400379
  4000e4:	00403139 	.word	0x00403139
  4000e8:	00403139 	.word	0x00403139
  4000ec:	00403139 	.word	0x00403139
  4000f0:	00403139 	.word	0x00403139
  4000f4:	00403139 	.word	0x00403139
  4000f8:	00404b21 	.word	0x00404b21
  4000fc:	00403139 	.word	0x00403139
  400100:	00403139 	.word	0x00403139
  400104:	00403139 	.word	0x00403139
  400108:	00403139 	.word	0x00403139
  40010c:	00403139 	.word	0x00403139
  400110:	00403139 	.word	0x00403139
	...
  400120:	00403139 	.word	0x00403139
  400124:	00403139 	.word	0x00403139
  400128:	00403139 	.word	0x00403139
  40012c:	00404b09 	.word	0x00404b09
  400130:	00403139 	.word	0x00403139
  400134:	00000000 	.word	0x00000000
  400138:	00403139 	.word	0x00403139
  40013c:	00403139 	.word	0x00403139

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008c0 	.word	0x204008c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040e794 	.word	0x0040e794

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040e794 	.word	0x0040e794
  400190:	204008c4 	.word	0x204008c4
  400194:	0040e794 	.word	0x0040e794
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402a09 	.word	0x00402a09
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040841d 	.word	0x0040841d
  4001e0:	00402a15 	.word	0x00402a15

004001e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
  4001e6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001ec:	4013      	ands	r3, r2
  4001ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4001f2:	4e1a      	ldr	r6, [pc, #104]	; (40025c <afec_process_callback+0x78>)
  4001f4:	4d1a      	ldr	r5, [pc, #104]	; (400260 <afec_process_callback+0x7c>)
  4001f6:	42a8      	cmp	r0, r5
  4001f8:	bf14      	ite	ne
  4001fa:	2000      	movne	r0, #0
  4001fc:	2001      	moveq	r0, #1
  4001fe:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400200:	2c0b      	cmp	r4, #11
  400202:	d80a      	bhi.n	40021a <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400204:	9a01      	ldr	r2, [sp, #4]
  400206:	2301      	movs	r3, #1
  400208:	40a3      	lsls	r3, r4
  40020a:	4213      	tst	r3, r2
  40020c:	d020      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40020e:	192b      	adds	r3, r5, r4
  400210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400214:	b1e3      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400216:	4798      	blx	r3
  400218:	e01a      	b.n	400250 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40021a:	2c0e      	cmp	r4, #14
  40021c:	d80c      	bhi.n	400238 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40021e:	9a01      	ldr	r2, [sp, #4]
  400220:	f104 010c 	add.w	r1, r4, #12
  400224:	2301      	movs	r3, #1
  400226:	408b      	lsls	r3, r1
  400228:	4213      	tst	r3, r2
  40022a:	d011      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	b16b      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400234:	4798      	blx	r3
  400236:	e00b      	b.n	400250 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400238:	9a01      	ldr	r2, [sp, #4]
  40023a:	f104 010f 	add.w	r1, r4, #15
  40023e:	2301      	movs	r3, #1
  400240:	408b      	lsls	r3, r1
  400242:	4213      	tst	r3, r2
  400244:	d004      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400246:	192b      	adds	r3, r5, r4
  400248:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40024c:	b103      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40024e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400250:	3401      	adds	r4, #1
  400252:	2c10      	cmp	r4, #16
  400254:	d1d4      	bne.n	400200 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400256:	b002      	add	sp, #8
  400258:	bd70      	pop	{r4, r5, r6, pc}
  40025a:	bf00      	nop
  40025c:	2040c2e0 	.word	0x2040c2e0
  400260:	40064000 	.word	0x40064000

00400264 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400296:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40029a:	d14d      	bne.n	400338 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40029c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40029e:	2201      	movs	r2, #1
  4002a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002a2:	7cca      	ldrb	r2, [r1, #19]
  4002a4:	2a00      	cmp	r2, #0
  4002a6:	bf18      	it	ne
  4002a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4002ac:	68ca      	ldr	r2, [r1, #12]
  4002ae:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002b2:	684a      	ldr	r2, [r1, #4]
  4002b4:	688d      	ldr	r5, [r1, #8]
  4002b6:	fbb2 f2f5 	udiv	r2, r2, r5
  4002ba:	3a01      	subs	r2, #1
  4002bc:	0212      	lsls	r2, r2, #8
  4002be:	b292      	uxth	r2, r2
  4002c0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002c2:	7c0c      	ldrb	r4, [r1, #16]
  4002c4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4002c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4002ca:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4002cc:	7c4c      	ldrb	r4, [r1, #17]
  4002ce:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4002d4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4002d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002da:	7d0b      	ldrb	r3, [r1, #20]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf14      	ite	ne
  4002e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4002e4:	2200      	moveq	r2, #0
  4002e6:	680b      	ldr	r3, [r1, #0]
  4002e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4002ea:	7d4b      	ldrb	r3, [r1, #21]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4002f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4002f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4002fa:	7d8b      	ldrb	r3, [r1, #22]
  4002fc:	021b      	lsls	r3, r3, #8
  4002fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400302:	f043 030c 	orr.w	r3, r3, #12
  400306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40030a:	4b12      	ldr	r3, [pc, #72]	; (400354 <afec_init+0xc0>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d106      	bne.n	40031e <afec_init+0x8a>
  400310:	e017      	b.n	400342 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400312:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400316:	428b      	cmp	r3, r1
  400318:	d1fb      	bne.n	400312 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40031a:	2000      	movs	r0, #0
  40031c:	e016      	b.n	40034c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <afec_init+0xc4>)
  400320:	4298      	cmp	r0, r3
  400322:	d10c      	bne.n	40033e <afec_init+0xaa>
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <afec_init+0xc8>)
  400326:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40032a:	2200      	movs	r2, #0
  40032c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400330:	428b      	cmp	r3, r1
  400332:	d1fb      	bne.n	40032c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e009      	b.n	40034c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400338:	2019      	movs	r0, #25
  40033a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40033c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e004      	b.n	40034c <afec_init+0xb8>
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <afec_init+0xcc>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	e7e2      	b.n	400312 <afec_init+0x7e>
  40034c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40034e:	bc30      	pop	{r4, r5}
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	4003c000 	.word	0x4003c000
  400358:	40064000 	.word	0x40064000
  40035c:	2040c31c 	.word	0x2040c31c
  400360:	2040c2dc 	.word	0x2040c2dc

00400364 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400364:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400366:	4802      	ldr	r0, [pc, #8]	; (400370 <AFEC0_Handler+0xc>)
  400368:	4b02      	ldr	r3, [pc, #8]	; (400374 <AFEC0_Handler+0x10>)
  40036a:	4798      	blx	r3
  40036c:	bd08      	pop	{r3, pc}
  40036e:	bf00      	nop
  400370:	4003c000 	.word	0x4003c000
  400374:	004001e5 	.word	0x004001e5

00400378 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400378:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40037a:	4802      	ldr	r0, [pc, #8]	; (400384 <AFEC1_Handler+0xc>)
  40037c:	4b02      	ldr	r3, [pc, #8]	; (400388 <AFEC1_Handler+0x10>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	40064000 	.word	0x40064000
  400388:	004001e5 	.word	0x004001e5

0040038c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40038c:	b508      	push	{r3, lr}
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <afec_enable+0x44>)
  400390:	4298      	cmp	r0, r3
  400392:	bf0c      	ite	eq
  400394:	2028      	moveq	r0, #40	; 0x28
  400396:	201d      	movne	r0, #29
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <afec_enable+0x48>)
  40039a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40039c:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <afec_enable+0x4c>)
  40039e:	789b      	ldrb	r3, [r3, #2]
  4003a0:	2bff      	cmp	r3, #255	; 0xff
  4003a2:	d100      	bne.n	4003a6 <afec_enable+0x1a>
  4003a4:	e7fe      	b.n	4003a4 <afec_enable+0x18>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003b0:	2100      	movs	r1, #0
  4003b2:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <afec_enable+0x50>)
  4003b4:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003b6:	4908      	ldr	r1, [pc, #32]	; (4003d8 <afec_enable+0x4c>)
  4003b8:	788a      	ldrb	r2, [r1, #2]
  4003ba:	3201      	adds	r2, #1
  4003bc:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003be:	b92b      	cbnz	r3, 4003cc <afec_enable+0x40>
		cpu_irq_enable();
  4003c0:	2201      	movs	r2, #1
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <afec_enable+0x50>)
  4003c4:	701a      	strb	r2, [r3, #0]
  4003c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003ca:	b662      	cpsie	i
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	40064000 	.word	0x40064000
  4003d4:	00402781 	.word	0x00402781
  4003d8:	2040c2d8 	.word	0x2040c2d8
  4003dc:	20400010 	.word	0x20400010

004003e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4003e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4003e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	bf0c      	ite	eq
  4003e8:	2400      	moveq	r4, #0
  4003ea:	2404      	movne	r4, #4
	}
	if(isi_cfg->vpol) {
  4003ec:	784b      	ldrb	r3, [r1, #1]
  4003ee:	b10b      	cbz	r3, 4003f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4003f0:	f044 0408 	orr.w	r4, r4, #8
	}
	if(isi_cfg->pck_plo) {
  4003f4:	788b      	ldrb	r3, [r1, #2]
  4003f6:	b10b      	cbz	r3, 4003fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4003f8:	f044 0410 	orr.w	r4, r4, #16
	}
	if(isi_cfg->emb_sync) {
  4003fc:	78cb      	ldrb	r3, [r1, #3]
  4003fe:	b10b      	cbz	r3, 400404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  400400:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  400404:	790b      	ldrb	r3, [r1, #4]
  400406:	b10b      	cbz	r3, 40040c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  400408:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40040c:	794a      	ldrb	r2, [r1, #5]
  40040e:	0352      	lsls	r2, r2, #13
  400410:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
  400414:	798b      	ldrb	r3, [r1, #6]
  400416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40041a:	79cb      	ldrb	r3, [r1, #7]
  40041c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
		reg |= ISI_CFG1_EMB_SYNC;
	}
	if(isi_cfg->crc_sync) {
		reg |= ISI_CFG1_CRC_SYNC;
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  400420:	4323      	orrs	r3, r4
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;
  400422:	6003      	str	r3, [r0, #0]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400424:	4b18      	ldr	r3, [pc, #96]	; (400488 <isi_init+0xa8>)
  400426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400428:	685b      	ldr	r3, [r3, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40042a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  400430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  400434:	7a0a      	ldrb	r2, [r1, #8]
  400436:	2a04      	cmp	r2, #4
  400438:	d816      	bhi.n	400468 <isi_init+0x88>
  40043a:	e8df f002 	tbb	[pc, r2]
  40043e:	0603      	.short	0x0603
  400440:	0e09      	.short	0x0e09
  400442:	11          	.byte	0x11
  400443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  400444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
  400448:	e00e      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB565:
			reg |= ISI_CFG2_COL_SPACE;
			reg |= ISI_CFG2_RGB_MODE;
  40044a:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40044e:	e00b      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB888:
			reg |= ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_RGB_MODE;
  400450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  400458:	e006      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_12BIT:
			reg |= ISI_CFG2_GRAYSCALE;
  40045a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40045e:	e003      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_8BIT:
			reg &= ~ISI_CFG2_GRAYSCALE;
			reg &= ~ISI_CFG2_RGB_SWAP;
			reg &= ~ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  400460:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  400464:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  400468:	68ca      	ldr	r2, [r1, #12]
  40046a:	3a01      	subs	r2, #1
  40046c:	4c07      	ldr	r4, [pc, #28]	; (40048c <isi_init+0xac>)
  40046e:	ea04 4402 	and.w	r4, r4, r2, lsl #16
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  400472:	690a      	ldr	r2, [r1, #16]
  400474:	3a01      	subs	r2, #1
  400476:	f3c2 020a 	ubfx	r2, r2, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40047a:	4322      	orrs	r2, r4
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40047c:	4313      	orrs	r3, r2
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
	p_isi->ISI_CFG2 = reg;
  40047e:	6043      	str	r3, [r0, #4]
}
  400480:	f85d 4b04 	ldr.w	r4, [sp], #4
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	4004c000 	.word	0x4004c000
  40048c:	07ff0000 	.word	0x07ff0000

00400490 <isi_size_configure>:
 * \param preview_hsize  Horizontal Preview size  (640 max only in RGB mode).
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
  400490:	b470      	push	{r4, r5, r6}
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400492:	4c23      	ldr	r4, [pc, #140]	; (400520 <isi_size_configure+0x90>)
  400494:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400496:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400498:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40049a:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
  40049e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
  4004a2:	4e20      	ldr	r6, [pc, #128]	; (400524 <isi_size_configure+0x94>)
  4004a4:	402e      	ands	r6, r5
  4004a6:	6046      	str	r6, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004a8:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004aa:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ac:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004ae:	b2ad      	uxth	r5, r5
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
  4004b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
  4004b4:	6045      	str	r5, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004b6:	6865      	ldr	r5, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004b8:	6864      	ldr	r4, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ba:	0eed      	lsrs	r5, r5, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004bc:	f024 4478 	bic.w	r4, r4, #4160749568	; 0xf8000000
  4004c0:	ea44 7505 	orr.w	r5, r4, r5, lsl #28
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround() | ISI_CFG2_IM_VSIZE(image_vsize - 1) | ISI_CFG2_IM_HSIZE(image_hsize - 1);
  4004c4:	3a01      	subs	r2, #1
  4004c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4004ca:	4315      	orrs	r5, r2
  4004cc:	1e4a      	subs	r2, r1, #1
  4004ce:	4c16      	ldr	r4, [pc, #88]	; (400528 <isi_size_configure+0x98>)
  4004d0:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004d4:	ea45 0204 	orr.w	r2, r5, r4
  4004d8:	6042      	str	r2, [r0, #4]

	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_VSIZE_Msk);
  4004da:	6884      	ldr	r4, [r0, #8]
  4004dc:	4a13      	ldr	r2, [pc, #76]	; (40052c <isi_size_configure+0x9c>)
  4004de:	4022      	ands	r2, r4
  4004e0:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_HSIZE_Msk);
  4004e2:	6884      	ldr	r4, [r0, #8]
  4004e4:	4a12      	ldr	r2, [pc, #72]	; (400530 <isi_size_configure+0xa0>)
  4004e6:	4022      	ands	r2, r4
  4004e8:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE |= ISI_PSIZE_PREV_VSIZE(preview_hsize - 1) | ISI_PSIZE_PREV_HSIZE(preview_vsize - 1);
  4004ea:	6885      	ldr	r5, [r0, #8]
  4004ec:	1e5a      	subs	r2, r3, #1
  4004ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
  4004f2:	9a03      	ldr	r2, [sp, #12]
  4004f4:	3a01      	subs	r2, #1
  4004f6:	4c0f      	ldr	r4, [pc, #60]	; (400534 <isi_size_configure+0xa4>)
  4004f8:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004fc:	ea46 0204 	orr.w	r2, r6, r4
  400500:	432a      	orrs	r2, r5
  400502:	6082      	str	r2, [r0, #8]

	uint32_t hRatio;
	hRatio = 1600 * image_hsize / preview_hsize;
  400504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  400508:	fb02 f101 	mul.w	r1, r2, r1
  40050c:	fbb1 f3f3 	udiv	r3, r1, r3
	p_isi->ISI_PDECF = (hRatio / 100);
  400510:	4909      	ldr	r1, [pc, #36]	; (400538 <isi_size_configure+0xa8>)
  400512:	fba1 2303 	umull	r2, r3, r1, r3
  400516:	095b      	lsrs	r3, r3, #5
  400518:	60c3      	str	r3, [r0, #12]
}
  40051a:	bc70      	pop	{r4, r5, r6}
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	4004c000 	.word	0x4004c000
  400524:	f7fff800 	.word	0xf7fff800
  400528:	07ff0000 	.word	0x07ff0000
  40052c:	fffffc00 	.word	0xfffffc00
  400530:	fc00ffff 	.word	0xfc00ffff
  400534:	03ff0000 	.word	0x03ff0000
  400538:	51eb851f 	.word	0x51eb851f

0040053c <isi_set_dma_preview_path>:
 * \param dma_ctrl  DMA preview control.
 * \param frame_buf_start_addr  DMA preview base address.
 */
void isi_set_dma_preview_path(Isi *p_isi, uint8_t frate,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
  40053c:	b410      	push	{r4}
	if(frate > 7) {
		frate = 7;
	}
	p_isi->ISI_CFG1 |= ISI_CFG1_FRATE(frate);
  40053e:	6804      	ldr	r4, [r0, #0]
  400540:	2907      	cmp	r1, #7
  400542:	bf28      	it	cs
  400544:	2107      	movcs	r1, #7
  400546:	0209      	lsls	r1, r1, #8
  400548:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  40054c:	4321      	orrs	r1, r4
  40054e:	6001      	str	r1, [r0, #0]

	p_isi->ISI_DMA_P_DSCR = base_buf_desc;
  400550:	64c2      	str	r2, [r0, #76]	; 0x4c
	p_isi->ISI_DMA_P_CTRL = dma_ctrl;
  400552:	6483      	str	r3, [r0, #72]	; 0x48
	p_isi->ISI_DMA_P_ADDR = frame_buf_start_addr;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	6443      	str	r3, [r0, #68]	; 0x44

}
  400558:	f85d 4b04 	ldr.w	r4, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400564:	4604      	mov	r4, r0
  400566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <pio_handler_process+0x44>)
  40056a:	4798      	blx	r3
  40056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40056e:	4620      	mov	r0, r4
  400570:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <pio_handler_process+0x48>)
  400572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400574:	4005      	ands	r5, r0
  400576:	d013      	beq.n	4005a0 <pio_handler_process+0x40>
  400578:	4c0c      	ldr	r4, [pc, #48]	; (4005ac <pio_handler_process+0x4c>)
  40057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	4543      	cmp	r3, r8
  400582:	d108      	bne.n	400596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400584:	6861      	ldr	r1, [r4, #4]
  400586:	4229      	tst	r1, r5
  400588:	d005      	beq.n	400596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40058a:	68e3      	ldr	r3, [r4, #12]
  40058c:	4640      	mov	r0, r8
  40058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400590:	6863      	ldr	r3, [r4, #4]
  400592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400596:	42b4      	cmp	r4, r6
  400598:	d002      	beq.n	4005a0 <pio_handler_process+0x40>
  40059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40059c:	2d00      	cmp	r5, #0
  40059e:	d1ee      	bne.n	40057e <pio_handler_process+0x1e>
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	00402655 	.word	0x00402655
  4005a8:	00402659 	.word	0x00402659
  4005ac:	204008dc 	.word	0x204008dc

004005b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005b2:	4802      	ldr	r0, [pc, #8]	; (4005bc <PIOA_Handler+0xc>)
  4005b4:	210a      	movs	r1, #10
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOA_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e0e00 	.word	0x400e0e00
  4005c0:	00400561 	.word	0x00400561

004005c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOB_Handler+0xc>)
  4005c8:	210b      	movs	r1, #11
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOB_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1000 	.word	0x400e1000
  4005d4:	00400561 	.word	0x00400561

004005d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005da:	4802      	ldr	r0, [pc, #8]	; (4005e4 <PIOC_Handler+0xc>)
  4005dc:	210c      	movs	r1, #12
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <PIOC_Handler+0x10>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	400e1200 	.word	0x400e1200
  4005e8:	00400561 	.word	0x00400561

004005ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOD_Handler+0xc>)
  4005f0:	2110      	movs	r1, #16
  4005f2:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOD_Handler+0x10>)
  4005f4:	4798      	blx	r3
  4005f6:	bd08      	pop	{r3, pc}
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00400561 	.word	0x00400561

00400600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400602:	4802      	ldr	r0, [pc, #8]	; (40060c <PIOE_Handler+0xc>)
  400604:	2111      	movs	r1, #17
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOE_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e1600 	.word	0x400e1600
  400610:	00400561 	.word	0x00400561

00400614 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400614:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  400616:	b930      	cbnz	r0, 400626 <qspi_initialize+0x12>
  400618:	4859      	ldr	r0, [pc, #356]	; (400780 <qspi_initialize+0x16c>)
  40061a:	f240 1117 	movw	r1, #279	; 0x117
  40061e:	4a59      	ldr	r2, [pc, #356]	; (400784 <qspi_initialize+0x170>)
  400620:	4b59      	ldr	r3, [pc, #356]	; (400788 <qspi_initialize+0x174>)
  400622:	4c5a      	ldr	r4, [pc, #360]	; (40078c <qspi_initialize+0x178>)
  400624:	47a0      	blx	r4
  400626:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  400628:	2202      	movs	r2, #2
  40062a:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  40062c:	691a      	ldr	r2, [r3, #16]
  40062e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400632:	d1fb      	bne.n	40062c <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  400634:	2280      	movs	r2, #128	; 0x80
  400636:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  400638:	780a      	ldrb	r2, [r1, #0]
  40063a:	2a01      	cmp	r2, #1
  40063c:	d104      	bne.n	400648 <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  40063e:	685a      	ldr	r2, [r3, #4]
  400640:	f042 0201 	orr.w	r2, r2, #1
  400644:	605a      	str	r2, [r3, #4]
  400646:	e001      	b.n	40064c <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  400648:	685a      	ldr	r2, [r3, #4]
  40064a:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  40064c:	784a      	ldrb	r2, [r1, #1]
  40064e:	b122      	cbz	r2, 40065a <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  400650:	685a      	ldr	r2, [r3, #4]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	605a      	str	r2, [r3, #4]
  400658:	e003      	b.n	400662 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  40065a:	685a      	ldr	r2, [r3, #4]
  40065c:	f022 0202 	bic.w	r2, r2, #2
  400660:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  400662:	788a      	ldrb	r2, [r1, #2]
  400664:	b122      	cbz	r2, 400670 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  400666:	685a      	ldr	r2, [r3, #4]
  400668:	f042 0204 	orr.w	r2, r2, #4
  40066c:	605a      	str	r2, [r3, #4]
  40066e:	e03c      	b.n	4006ea <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	f022 0204 	bic.w	r2, r2, #4
  400676:	605a      	str	r2, [r3, #4]
  400678:	e037      	b.n	4006ea <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  40067a:	6a1a      	ldr	r2, [r3, #32]
  40067c:	f042 0201 	orr.w	r2, r2, #1
  400680:	621a      	str	r2, [r3, #32]
  400682:	e053      	b.n	40072c <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400684:	6a1a      	ldr	r2, [r3, #32]
  400686:	f022 0201 	bic.w	r2, r2, #1
  40068a:	621a      	str	r2, [r3, #32]
  40068c:	e04e      	b.n	40072c <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  40068e:	6a1a      	ldr	r2, [r3, #32]
  400690:	f042 0202 	orr.w	r2, r2, #2
  400694:	621a      	str	r2, [r3, #32]
  400696:	e04d      	b.n	400734 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  400698:	6a1a      	ldr	r2, [r3, #32]
  40069a:	f022 0202 	bic.w	r2, r2, #2
  40069e:	621a      	str	r2, [r3, #32]
  4006a0:	e048      	b.n	400734 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a2:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006a4:	0212      	lsls	r2, r2, #8
  4006a6:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006ac:	4302      	orrs	r2, r0
  4006ae:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e047      	b.n	400744 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  4006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006b6:	f042 0201 	orr.w	r2, r2, #1
  4006ba:	641a      	str	r2, [r3, #64]	; 0x40
  4006bc:	e003      	b.n	4006c6 <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  4006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006c0:	f022 0201 	bic.w	r2, r2, #1
  4006c4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  4006c6:	b124      	cbz	r4, 4006d2 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  4006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006ca:	f042 0202 	orr.w	r2, r2, #2
  4006ce:	641a      	str	r2, [r3, #64]	; 0x40
  4006d0:	e04a      	b.n	400768 <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  4006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006d4:	f022 0202 	bic.w	r2, r2, #2
  4006d8:	641a      	str	r2, [r3, #64]	; 0x40
  4006da:	e045      	b.n	400768 <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  4006dc:	6459      	str	r1, [r3, #68]	; 0x44
  4006de:	e049      	b.n	400774 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4006e0:	691a      	ldr	r2, [r3, #16]
  4006e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4006e6:	d0fb      	beq.n	4006e0 <qspi_initialize+0xcc>
  4006e8:	e047      	b.n	40077a <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006ea:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  4006ec:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006ee:	0100      	lsls	r0, r0, #4
  4006f0:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006f8:	4302      	orrs	r2, r0
  4006fa:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  4006fc:	685a      	ldr	r2, [r3, #4]
  4006fe:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400702:	684a      	ldr	r2, [r1, #4]
  400704:	4302      	orrs	r2, r0
  400706:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  400708:	685a      	ldr	r2, [r3, #4]
  40070a:	7a08      	ldrb	r0, [r1, #8]
  40070c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400710:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400714:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  400716:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  400718:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40071a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40071e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  400722:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  400724:	690a      	ldr	r2, [r1, #16]
  400726:	2a00      	cmp	r2, #0
  400728:	d0ac      	beq.n	400684 <qspi_initialize+0x70>
  40072a:	e7a6      	b.n	40067a <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  40072c:	694a      	ldr	r2, [r1, #20]
  40072e:	2a00      	cmp	r2, #0
  400730:	d0b2      	beq.n	400698 <qspi_initialize+0x84>
  400732:	e7ac      	b.n	40068e <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  400734:	6988      	ldr	r0, [r1, #24]
  400736:	4a16      	ldr	r2, [pc, #88]	; (400790 <qspi_initialize+0x17c>)
  400738:	fbb2 f2f0 	udiv	r2, r2, r0
  40073c:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  40073e:	2aff      	cmp	r2, #255	; 0xff
  400740:	d9af      	bls.n	4006a2 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  400742:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  400744:	6a1a      	ldr	r2, [r3, #32]
  400746:	7f0c      	ldrb	r4, [r1, #28]
  400748:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  40074c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400750:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  400752:	f891 5020 	ldrb.w	r5, [r1, #32]
  400756:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  40075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40075c:	f022 0203 	bic.w	r2, r2, #3
  400760:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  400762:	2d00      	cmp	r5, #0
  400764:	d1a6      	bne.n	4006b4 <qspi_initialize+0xa0>
  400766:	e7aa      	b.n	4006be <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  400768:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  40076a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40076e:	f012 0f01 	tst.w	r2, #1
  400772:	d0b3      	beq.n	4006dc <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  400774:	2201      	movs	r2, #1
  400776:	601a      	str	r2, [r3, #0]
  400778:	e7b2      	b.n	4006e0 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  40077a:	b240      	sxtb	r0, r0
}
  40077c:	bd38      	pop	{r3, r4, r5, pc}
  40077e:	bf00      	nop
  400780:	0040da04 	.word	0x0040da04
  400784:	0040d9f4 	.word	0x0040d9f4
  400788:	0040da28 	.word	0x0040da28
  40078c:	00407a6d 	.word	0x00407a6d
  400790:	08f0d180 	.word	0x08f0d180

00400794 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400794:	4b48      	ldr	r3, [pc, #288]	; (4008b8 <sdramc_init+0x124>)
  400796:	781b      	ldrb	r3, [r3, #0]
  400798:	2bff      	cmp	r3, #255	; 0xff
  40079a:	d100      	bne.n	40079e <sdramc_init+0xa>
  40079c:	e7fe      	b.n	40079c <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40079e:	b470      	push	{r4, r5, r6}
  4007a0:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007a2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4007a6:	b672      	cpsid	i
  4007a8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4007ac:	2400      	movs	r4, #0
  4007ae:	4a43      	ldr	r2, [pc, #268]	; (4008bc <sdramc_init+0x128>)
  4007b0:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007b2:	4c41      	ldr	r4, [pc, #260]	; (4008b8 <sdramc_init+0x124>)
  4007b4:	7822      	ldrb	r2, [r4, #0]
  4007b6:	3201      	adds	r2, #1
  4007b8:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007ba:	b92b      	cbnz	r3, 4007c8 <sdramc_init+0x34>
		cpu_irq_enable();
  4007bc:	2201      	movs	r2, #1
  4007be:	4b3f      	ldr	r3, [pc, #252]	; (4008bc <sdramc_init+0x128>)
  4007c0:	701a      	strb	r2, [r3, #0]
  4007c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4007c6:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  4007c8:	6883      	ldr	r3, [r0, #8]
  4007ca:	4a3d      	ldr	r2, [pc, #244]	; (4008c0 <sdramc_init+0x12c>)
  4007cc:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  4007ce:	2300      	movs	r3, #0
  4007d0:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  4007d2:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  4007d4:	9301      	str	r3, [sp, #4]
  4007d6:	4b3b      	ldr	r3, [pc, #236]	; (4008c4 <sdramc_init+0x130>)
  4007d8:	fba3 2301 	umull	r2, r3, r3, r1
  4007dc:	0c9a      	lsrs	r2, r3, #18
  4007de:	23c8      	movs	r3, #200	; 0xc8
  4007e0:	fb03 f302 	mul.w	r3, r3, r2
  4007e4:	4a38      	ldr	r2, [pc, #224]	; (4008c8 <sdramc_init+0x134>)
  4007e6:	fba2 2303 	umull	r2, r3, r2, r3
  4007ea:	089b      	lsrs	r3, r3, #2
  4007ec:	9a01      	ldr	r2, [sp, #4]
  4007ee:	4293      	cmp	r3, r2
  4007f0:	d905      	bls.n	4007fe <sdramc_init+0x6a>
  4007f2:	9a01      	ldr	r2, [sp, #4]
  4007f4:	3201      	adds	r2, #1
  4007f6:	9201      	str	r2, [sp, #4]
  4007f8:	9a01      	ldr	r2, [sp, #4]
  4007fa:	429a      	cmp	r2, r3
  4007fc:	d3f9      	bcc.n	4007f2 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  4007fe:	4d30      	ldr	r5, [pc, #192]	; (4008c0 <sdramc_init+0x12c>)
  400800:	2201      	movs	r2, #1
  400802:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  400804:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  400808:	2200      	movs	r2, #0
  40080a:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  40080c:	2602      	movs	r6, #2
  40080e:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  400810:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400812:	9201      	str	r2, [sp, #4]
  400814:	9a01      	ldr	r2, [sp, #4]
  400816:	429a      	cmp	r2, r3
  400818:	d205      	bcs.n	400826 <sdramc_init+0x92>
  40081a:	9a01      	ldr	r2, [sp, #4]
  40081c:	3201      	adds	r2, #1
  40081e:	9201      	str	r2, [sp, #4]
  400820:	9a01      	ldr	r2, [sp, #4]
  400822:	429a      	cmp	r2, r3
  400824:	d3f9      	bcc.n	40081a <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400826:	4b26      	ldr	r3, [pc, #152]	; (4008c0 <sdramc_init+0x12c>)
  400828:	2404      	movs	r4, #4
  40082a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  40082c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  400830:	2501      	movs	r5, #1
  400832:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400834:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  400836:	2502      	movs	r5, #2
  400838:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40083a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  40083c:	2503      	movs	r5, #3
  40083e:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400840:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  400842:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400844:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  400846:	2605      	movs	r6, #5
  400848:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40084a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  40084c:	2606      	movs	r6, #6
  40084e:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400850:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  400852:	2607      	movs	r6, #7
  400854:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400856:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  400858:	2408      	movs	r4, #8
  40085a:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  40085c:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  40085e:	6844      	ldr	r4, [r0, #4]
  400860:	0064      	lsls	r4, r4, #1
  400862:	4414      	add	r4, r2
  400864:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  400868:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  40086a:	6844      	ldr	r4, [r0, #4]
  40086c:	0064      	lsls	r4, r4, #1
  40086e:	4414      	add	r4, r2
  400870:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400872:	6844      	ldr	r4, [r0, #4]
  400874:	0064      	lsls	r4, r4, #1
  400876:	4414      	add	r4, r2
  400878:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  40087a:	6840      	ldr	r0, [r0, #4]
  40087c:	0040      	lsls	r0, r0, #1
  40087e:	4410      	add	r0, r2
  400880:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  400882:	2000      	movs	r0, #0
  400884:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  400886:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  400888:	4a10      	ldr	r2, [pc, #64]	; (4008cc <sdramc_init+0x138>)
  40088a:	fba2 1201 	umull	r1, r2, r2, r1
  40088e:	0992      	lsrs	r2, r2, #6
  400890:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  400892:	9901      	ldr	r1, [sp, #4]
  400894:	f641 6278 	movw	r2, #7800	; 0x1e78
  400898:	fb02 f201 	mul.w	r2, r2, r1
  40089c:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  40089e:	9a01      	ldr	r2, [sp, #4]
  4008a0:	4908      	ldr	r1, [pc, #32]	; (4008c4 <sdramc_init+0x130>)
  4008a2:	fba1 1202 	umull	r1, r2, r1, r2
  4008a6:	0c92      	lsrs	r2, r2, #18
  4008a8:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  4008aa:	9a01      	ldr	r2, [sp, #4]
  4008ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
  4008b0:	605a      	str	r2, [r3, #4]
}
  4008b2:	b003      	add	sp, #12
  4008b4:	bc70      	pop	{r4, r5, r6}
  4008b6:	4770      	bx	lr
  4008b8:	2040c2d8 	.word	0x2040c2d8
  4008bc:	20400010 	.word	0x20400010
  4008c0:	40084000 	.word	0x40084000
  4008c4:	431bde83 	.word	0x431bde83
  4008c8:	aaaaaaab 	.word	0xaaaaaaab
  4008cc:	10624dd3 	.word	0x10624dd3

004008d0 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4008d0:	2901      	cmp	r1, #1
  4008d2:	d104      	bne.n	4008de <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  4008d4:	6882      	ldr	r2, [r0, #8]
  4008d6:	4b06      	ldr	r3, [pc, #24]	; (4008f0 <supc_switch_sclk_to_32kxtal+0x20>)
  4008d8:	4313      	orrs	r3, r2
  4008da:	6083      	str	r3, [r0, #8]
  4008dc:	e003      	b.n	4008e6 <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  4008de:	6882      	ldr	r2, [r0, #8]
  4008e0:	4b04      	ldr	r3, [pc, #16]	; (4008f4 <supc_switch_sclk_to_32kxtal+0x24>)
  4008e2:	4013      	ands	r3, r2
  4008e4:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4008e6:	6802      	ldr	r2, [r0, #0]
  4008e8:	4b03      	ldr	r3, [pc, #12]	; (4008f8 <supc_switch_sclk_to_32kxtal+0x28>)
  4008ea:	4313      	orrs	r3, r2
  4008ec:	6003      	str	r3, [r0, #0]
  4008ee:	4770      	bx	lr
  4008f0:	a5100000 	.word	0xa5100000
  4008f4:	5aefffff 	.word	0x5aefffff
  4008f8:	a5000008 	.word	0xa5000008

004008fc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400900:	6043      	str	r3, [r0, #4]
  400902:	4770      	bx	lr

00400904 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400904:	4b0d      	ldr	r3, [pc, #52]	; (40093c <prvTaskExitError+0x38>)
  400906:	681b      	ldr	r3, [r3, #0]
  400908:	f1b3 3fff 	cmp.w	r3, #4294967295
  40090c:	d00a      	beq.n	400924 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40090e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400912:	b672      	cpsid	i
  400914:	f383 8811 	msr	BASEPRI, r3
  400918:	f3bf 8f6f 	isb	sy
  40091c:	f3bf 8f4f 	dsb	sy
  400920:	b662      	cpsie	i
  400922:	e7fe      	b.n	400922 <prvTaskExitError+0x1e>
  400924:	f04f 0380 	mov.w	r3, #128	; 0x80
  400928:	b672      	cpsid	i
  40092a:	f383 8811 	msr	BASEPRI, r3
  40092e:	f3bf 8f6f 	isb	sy
  400932:	f3bf 8f4f 	dsb	sy
  400936:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400938:	e7fe      	b.n	400938 <prvTaskExitError+0x34>
  40093a:	bf00      	nop
  40093c:	2040000c 	.word	0x2040000c

00400940 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400940:	4806      	ldr	r0, [pc, #24]	; (40095c <prvPortStartFirstTask+0x1c>)
  400942:	6800      	ldr	r0, [r0, #0]
  400944:	6800      	ldr	r0, [r0, #0]
  400946:	f380 8808 	msr	MSP, r0
  40094a:	b662      	cpsie	i
  40094c:	b661      	cpsie	f
  40094e:	f3bf 8f4f 	dsb	sy
  400952:	f3bf 8f6f 	isb	sy
  400956:	df00      	svc	0
  400958:	bf00      	nop
  40095a:	0000      	.short	0x0000
  40095c:	e000ed08 	.word	0xe000ed08

00400960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400970 <vPortEnableVFP+0x10>
  400964:	6801      	ldr	r1, [r0, #0]
  400966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40096a:	6001      	str	r1, [r0, #0]
  40096c:	4770      	bx	lr
  40096e:	0000      	.short	0x0000
  400970:	e000ed88 	.word	0xe000ed88

00400974 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400978:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40097c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400980:	4b05      	ldr	r3, [pc, #20]	; (400998 <pxPortInitialiseStack+0x24>)
  400982:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400986:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40098a:	f06f 0302 	mvn.w	r3, #2
  40098e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400992:	3844      	subs	r0, #68	; 0x44
  400994:	4770      	bx	lr
  400996:	bf00      	nop
  400998:	00400905 	.word	0x00400905

0040099c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  40099c:	4b06      	ldr	r3, [pc, #24]	; (4009b8 <pxCurrentTCBConst2>)
  40099e:	6819      	ldr	r1, [r3, #0]
  4009a0:	6808      	ldr	r0, [r1, #0]
  4009a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009a6:	f380 8809 	msr	PSP, r0
  4009aa:	f3bf 8f6f 	isb	sy
  4009ae:	f04f 0000 	mov.w	r0, #0
  4009b2:	f380 8811 	msr	BASEPRI, r0
  4009b6:	4770      	bx	lr

004009b8 <pxCurrentTCBConst2>:
  4009b8:	2040c200 	.word	0x2040c200

004009bc <vPortEnterCritical>:
  4009bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009c0:	b672      	cpsid	i
  4009c2:	f383 8811 	msr	BASEPRI, r3
  4009c6:	f3bf 8f6f 	isb	sy
  4009ca:	f3bf 8f4f 	dsb	sy
  4009ce:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  4009d0:	4a0b      	ldr	r2, [pc, #44]	; (400a00 <vPortEnterCritical+0x44>)
  4009d2:	6813      	ldr	r3, [r2, #0]
  4009d4:	3301      	adds	r3, #1
  4009d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  4009d8:	2b01      	cmp	r3, #1
  4009da:	d10f      	bne.n	4009fc <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4009dc:	4b09      	ldr	r3, [pc, #36]	; (400a04 <vPortEnterCritical+0x48>)
  4009de:	681b      	ldr	r3, [r3, #0]
  4009e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4009e4:	d00a      	beq.n	4009fc <vPortEnterCritical+0x40>
  4009e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4009ea:	b672      	cpsid	i
  4009ec:	f383 8811 	msr	BASEPRI, r3
  4009f0:	f3bf 8f6f 	isb	sy
  4009f4:	f3bf 8f4f 	dsb	sy
  4009f8:	b662      	cpsie	i
  4009fa:	e7fe      	b.n	4009fa <vPortEnterCritical+0x3e>
  4009fc:	4770      	bx	lr
  4009fe:	bf00      	nop
  400a00:	2040000c 	.word	0x2040000c
  400a04:	e000ed04 	.word	0xe000ed04

00400a08 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400a08:	4b0a      	ldr	r3, [pc, #40]	; (400a34 <vPortExitCritical+0x2c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	b953      	cbnz	r3, 400a24 <vPortExitCritical+0x1c>
  400a0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a12:	b672      	cpsid	i
  400a14:	f383 8811 	msr	BASEPRI, r3
  400a18:	f3bf 8f6f 	isb	sy
  400a1c:	f3bf 8f4f 	dsb	sy
  400a20:	b662      	cpsie	i
  400a22:	e7fe      	b.n	400a22 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400a24:	3b01      	subs	r3, #1
  400a26:	4a03      	ldr	r2, [pc, #12]	; (400a34 <vPortExitCritical+0x2c>)
  400a28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400a2a:	b90b      	cbnz	r3, 400a30 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400a2c:	f383 8811 	msr	BASEPRI, r3
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	2040000c 	.word	0x2040000c

00400a38 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400a38:	f3ef 8009 	mrs	r0, PSP
  400a3c:	f3bf 8f6f 	isb	sy
  400a40:	4b15      	ldr	r3, [pc, #84]	; (400a98 <pxCurrentTCBConst>)
  400a42:	681a      	ldr	r2, [r3, #0]
  400a44:	f01e 0f10 	tst.w	lr, #16
  400a48:	bf08      	it	eq
  400a4a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400a4e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a52:	6010      	str	r0, [r2, #0]
  400a54:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400a58:	f04f 0080 	mov.w	r0, #128	; 0x80
  400a5c:	b672      	cpsid	i
  400a5e:	f380 8811 	msr	BASEPRI, r0
  400a62:	f3bf 8f4f 	dsb	sy
  400a66:	f3bf 8f6f 	isb	sy
  400a6a:	b662      	cpsie	i
  400a6c:	f001 f8bc 	bl	401be8 <vTaskSwitchContext>
  400a70:	f04f 0000 	mov.w	r0, #0
  400a74:	f380 8811 	msr	BASEPRI, r0
  400a78:	bc08      	pop	{r3}
  400a7a:	6819      	ldr	r1, [r3, #0]
  400a7c:	6808      	ldr	r0, [r1, #0]
  400a7e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a82:	f01e 0f10 	tst.w	lr, #16
  400a86:	bf08      	it	eq
  400a88:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400a8c:	f380 8809 	msr	PSP, r0
  400a90:	f3bf 8f6f 	isb	sy
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop

00400a98 <pxCurrentTCBConst>:
  400a98:	2040c200 	.word	0x2040c200

00400a9c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400a9c:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400a9e:	f3ef 8311 	mrs	r3, BASEPRI
  400aa2:	f04f 0280 	mov.w	r2, #128	; 0x80
  400aa6:	b672      	cpsid	i
  400aa8:	f382 8811 	msr	BASEPRI, r2
  400aac:	f3bf 8f6f 	isb	sy
  400ab0:	f3bf 8f4f 	dsb	sy
  400ab4:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400ab6:	4b05      	ldr	r3, [pc, #20]	; (400acc <SysTick_Handler+0x30>)
  400ab8:	4798      	blx	r3
  400aba:	b118      	cbz	r0, 400ac4 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ac0:	4b03      	ldr	r3, [pc, #12]	; (400ad0 <SysTick_Handler+0x34>)
  400ac2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400ac4:	2300      	movs	r3, #0
  400ac6:	f383 8811 	msr	BASEPRI, r3
  400aca:	bd08      	pop	{r3, pc}
  400acc:	0040187d 	.word	0x0040187d
  400ad0:	e000ed04 	.word	0xe000ed04

00400ad4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400ad4:	4a03      	ldr	r2, [pc, #12]	; (400ae4 <vPortSetupTimerInterrupt+0x10>)
  400ad6:	4b04      	ldr	r3, [pc, #16]	; (400ae8 <vPortSetupTimerInterrupt+0x14>)
  400ad8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400ada:	2207      	movs	r2, #7
  400adc:	3b04      	subs	r3, #4
  400ade:	601a      	str	r2, [r3, #0]
  400ae0:	4770      	bx	lr
  400ae2:	bf00      	nop
  400ae4:	000493df 	.word	0x000493df
  400ae8:	e000e014 	.word	0xe000e014

00400aec <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400aec:	b500      	push	{lr}
  400aee:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400af0:	4b25      	ldr	r3, [pc, #148]	; (400b88 <xPortStartScheduler+0x9c>)
  400af2:	781a      	ldrb	r2, [r3, #0]
  400af4:	b2d2      	uxtb	r2, r2
  400af6:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400af8:	22ff      	movs	r2, #255	; 0xff
  400afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400afc:	781b      	ldrb	r3, [r3, #0]
  400afe:	b2db      	uxtb	r3, r3
  400b00:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400b04:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400b0c:	4a1f      	ldr	r2, [pc, #124]	; (400b8c <xPortStartScheduler+0xa0>)
  400b0e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400b10:	2207      	movs	r2, #7
  400b12:	4b1f      	ldr	r3, [pc, #124]	; (400b90 <xPortStartScheduler+0xa4>)
  400b14:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400b16:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b1a:	f013 0f80 	tst.w	r3, #128	; 0x80
  400b1e:	d010      	beq.n	400b42 <xPortStartScheduler+0x56>
  400b20:	2206      	movs	r2, #6
  400b22:	e000      	b.n	400b26 <xPortStartScheduler+0x3a>
  400b24:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400b26:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b2a:	005b      	lsls	r3, r3, #1
  400b2c:	b2db      	uxtb	r3, r3
  400b2e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b36:	1e51      	subs	r1, r2, #1
  400b38:	f013 0f80 	tst.w	r3, #128	; 0x80
  400b3c:	d1f2      	bne.n	400b24 <xPortStartScheduler+0x38>
  400b3e:	4b14      	ldr	r3, [pc, #80]	; (400b90 <xPortStartScheduler+0xa4>)
  400b40:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400b42:	4a13      	ldr	r2, [pc, #76]	; (400b90 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400b44:	6813      	ldr	r3, [r2, #0]
  400b46:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400b4e:	9b01      	ldr	r3, [sp, #4]
  400b50:	b2db      	uxtb	r3, r3
  400b52:	4a0d      	ldr	r2, [pc, #52]	; (400b88 <xPortStartScheduler+0x9c>)
  400b54:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400b56:	4b0f      	ldr	r3, [pc, #60]	; (400b94 <xPortStartScheduler+0xa8>)
  400b58:	681a      	ldr	r2, [r3, #0]
  400b5a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400b5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400b60:	681a      	ldr	r2, [r3, #0]
  400b62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400b66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400b68:	4b0b      	ldr	r3, [pc, #44]	; (400b98 <xPortStartScheduler+0xac>)
  400b6a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400b6c:	2200      	movs	r2, #0
  400b6e:	4b0b      	ldr	r3, [pc, #44]	; (400b9c <xPortStartScheduler+0xb0>)
  400b70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400b72:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <xPortStartScheduler+0xb4>)
  400b74:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400b76:	4a0b      	ldr	r2, [pc, #44]	; (400ba4 <xPortStartScheduler+0xb8>)
  400b78:	6813      	ldr	r3, [r2, #0]
  400b7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400b7e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400b80:	4b09      	ldr	r3, [pc, #36]	; (400ba8 <xPortStartScheduler+0xbc>)
  400b82:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400b84:	4b09      	ldr	r3, [pc, #36]	; (400bac <xPortStartScheduler+0xc0>)
  400b86:	4798      	blx	r3
  400b88:	e000e400 	.word	0xe000e400
  400b8c:	2040094c 	.word	0x2040094c
  400b90:	20400950 	.word	0x20400950
  400b94:	e000ed20 	.word	0xe000ed20
  400b98:	00400ad5 	.word	0x00400ad5
  400b9c:	2040000c 	.word	0x2040000c
  400ba0:	00400961 	.word	0x00400961
  400ba4:	e000ef34 	.word	0xe000ef34
  400ba8:	00400941 	.word	0x00400941
  400bac:	00400905 	.word	0x00400905

00400bb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400bb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400bb4:	2b0f      	cmp	r3, #15
  400bb6:	d911      	bls.n	400bdc <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400bb8:	4a12      	ldr	r2, [pc, #72]	; (400c04 <vPortValidateInterruptPriority+0x54>)
  400bba:	5c9b      	ldrb	r3, [r3, r2]
  400bbc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400bbe:	4a12      	ldr	r2, [pc, #72]	; (400c08 <vPortValidateInterruptPriority+0x58>)
  400bc0:	7812      	ldrb	r2, [r2, #0]
  400bc2:	429a      	cmp	r2, r3
  400bc4:	d90a      	bls.n	400bdc <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bca:	b672      	cpsid	i
  400bcc:	f383 8811 	msr	BASEPRI, r3
  400bd0:	f3bf 8f6f 	isb	sy
  400bd4:	f3bf 8f4f 	dsb	sy
  400bd8:	b662      	cpsie	i
  400bda:	e7fe      	b.n	400bda <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400bdc:	4b0b      	ldr	r3, [pc, #44]	; (400c0c <vPortValidateInterruptPriority+0x5c>)
  400bde:	681b      	ldr	r3, [r3, #0]
  400be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400be4:	4a0a      	ldr	r2, [pc, #40]	; (400c10 <vPortValidateInterruptPriority+0x60>)
  400be6:	6812      	ldr	r2, [r2, #0]
  400be8:	4293      	cmp	r3, r2
  400bea:	d90a      	bls.n	400c02 <vPortValidateInterruptPriority+0x52>
  400bec:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bf0:	b672      	cpsid	i
  400bf2:	f383 8811 	msr	BASEPRI, r3
  400bf6:	f3bf 8f6f 	isb	sy
  400bfa:	f3bf 8f4f 	dsb	sy
  400bfe:	b662      	cpsie	i
  400c00:	e7fe      	b.n	400c00 <vPortValidateInterruptPriority+0x50>
  400c02:	4770      	bx	lr
  400c04:	e000e3f0 	.word	0xe000e3f0
  400c08:	2040094c 	.word	0x2040094c
  400c0c:	e000ed0c 	.word	0xe000ed0c
  400c10:	20400950 	.word	0x20400950

00400c14 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400c14:	b538      	push	{r3, r4, r5, lr}
  400c16:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400c18:	f010 0f07 	tst.w	r0, #7
  400c1c:	d002      	beq.n	400c24 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400c1e:	f020 0407 	bic.w	r4, r0, #7
  400c22:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400c24:	4b0e      	ldr	r3, [pc, #56]	; (400c60 <pvPortMalloc+0x4c>)
  400c26:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400c28:	4b0e      	ldr	r3, [pc, #56]	; (400c64 <pvPortMalloc+0x50>)
  400c2a:	681b      	ldr	r3, [r3, #0]
  400c2c:	b923      	cbnz	r3, 400c38 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400c2e:	4b0e      	ldr	r3, [pc, #56]	; (400c68 <pvPortMalloc+0x54>)
  400c30:	f023 0307 	bic.w	r3, r3, #7
  400c34:	4a0b      	ldr	r2, [pc, #44]	; (400c64 <pvPortMalloc+0x50>)
  400c36:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400c38:	4b0c      	ldr	r3, [pc, #48]	; (400c6c <pvPortMalloc+0x58>)
  400c3a:	681b      	ldr	r3, [r3, #0]
  400c3c:	441c      	add	r4, r3
  400c3e:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400c42:	4294      	cmp	r4, r2
  400c44:	d807      	bhi.n	400c56 <pvPortMalloc+0x42>
  400c46:	42a3      	cmp	r3, r4
  400c48:	d205      	bcs.n	400c56 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400c4a:	4a06      	ldr	r2, [pc, #24]	; (400c64 <pvPortMalloc+0x50>)
  400c4c:	6815      	ldr	r5, [r2, #0]
  400c4e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400c50:	4b06      	ldr	r3, [pc, #24]	; (400c6c <pvPortMalloc+0x58>)
  400c52:	601c      	str	r4, [r3, #0]
  400c54:	e000      	b.n	400c58 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400c56:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400c58:	4b05      	ldr	r3, [pc, #20]	; (400c70 <pvPortMalloc+0x5c>)
  400c5a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400c5c:	4628      	mov	r0, r5
  400c5e:	bd38      	pop	{r3, r4, r5, pc}
  400c60:	00401861 	.word	0x00401861
  400c64:	2040c158 	.word	0x2040c158
  400c68:	20400960 	.word	0x20400960
  400c6c:	20400954 	.word	0x20400954
  400c70:	004019b1 	.word	0x004019b1

00400c74 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400c74:	b150      	cbz	r0, 400c8c <vPortFree+0x18>
  400c76:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c7a:	b672      	cpsid	i
  400c7c:	f383 8811 	msr	BASEPRI, r3
  400c80:	f3bf 8f6f 	isb	sy
  400c84:	f3bf 8f4f 	dsb	sy
  400c88:	b662      	cpsie	i
  400c8a:	e7fe      	b.n	400c8a <vPortFree+0x16>
  400c8c:	4770      	bx	lr
  400c8e:	bf00      	nop

00400c90 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c90:	f100 0308 	add.w	r3, r0, #8
  400c94:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400c96:	f04f 32ff 	mov.w	r2, #4294967295
  400c9a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c9c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400c9e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400ca0:	2300      	movs	r3, #0
  400ca2:	6003      	str	r3, [r0, #0]
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop

00400ca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400ca8:	2300      	movs	r3, #0
  400caa:	6103      	str	r3, [r0, #16]
  400cac:	4770      	bx	lr
  400cae:	bf00      	nop

00400cb0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400cb0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400cb2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400cb4:	689a      	ldr	r2, [r3, #8]
  400cb6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400cb8:	689a      	ldr	r2, [r3, #8]
  400cba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400cbc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400cbe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400cc0:	6803      	ldr	r3, [r0, #0]
  400cc2:	3301      	adds	r3, #1
  400cc4:	6003      	str	r3, [r0, #0]
  400cc6:	4770      	bx	lr

00400cc8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400cc8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400cca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400ccc:	f1b5 3fff 	cmp.w	r5, #4294967295
  400cd0:	d101      	bne.n	400cd6 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400cd2:	6902      	ldr	r2, [r0, #16]
  400cd4:	e007      	b.n	400ce6 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400cd6:	f100 0208 	add.w	r2, r0, #8
  400cda:	e000      	b.n	400cde <vListInsert+0x16>
  400cdc:	461a      	mov	r2, r3
  400cde:	6853      	ldr	r3, [r2, #4]
  400ce0:	681c      	ldr	r4, [r3, #0]
  400ce2:	42a5      	cmp	r5, r4
  400ce4:	d2fa      	bcs.n	400cdc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400ce6:	6853      	ldr	r3, [r2, #4]
  400ce8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400cea:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400cec:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400cee:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400cf0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400cf2:	6803      	ldr	r3, [r0, #0]
  400cf4:	3301      	adds	r3, #1
  400cf6:	6003      	str	r3, [r0, #0]
}
  400cf8:	bc30      	pop	{r4, r5}
  400cfa:	4770      	bx	lr

00400cfc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400cfc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400cfe:	6842      	ldr	r2, [r0, #4]
  400d00:	6881      	ldr	r1, [r0, #8]
  400d02:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400d04:	6882      	ldr	r2, [r0, #8]
  400d06:	6841      	ldr	r1, [r0, #4]
  400d08:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400d0a:	685a      	ldr	r2, [r3, #4]
  400d0c:	4282      	cmp	r2, r0
  400d0e:	d101      	bne.n	400d14 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400d10:	6892      	ldr	r2, [r2, #8]
  400d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400d14:	2200      	movs	r2, #0
  400d16:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400d18:	6818      	ldr	r0, [r3, #0]
  400d1a:	3801      	subs	r0, #1
  400d1c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400d1e:	4770      	bx	lr

00400d20 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400d20:	b538      	push	{r3, r4, r5, lr}
  400d22:	4604      	mov	r4, r0
  400d24:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400d26:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d28:	b942      	cbnz	r2, 400d3c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d2a:	6803      	ldr	r3, [r0, #0]
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d12b      	bne.n	400d88 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400d30:	6840      	ldr	r0, [r0, #4]
  400d32:	4b1b      	ldr	r3, [pc, #108]	; (400da0 <prvCopyDataToQueue+0x80>)
  400d34:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400d36:	2300      	movs	r3, #0
  400d38:	6063      	str	r3, [r4, #4]
  400d3a:	e02c      	b.n	400d96 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400d3c:	b96d      	cbnz	r5, 400d5a <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400d3e:	6880      	ldr	r0, [r0, #8]
  400d40:	4b18      	ldr	r3, [pc, #96]	; (400da4 <prvCopyDataToQueue+0x84>)
  400d42:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400d44:	68a2      	ldr	r2, [r4, #8]
  400d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d48:	4413      	add	r3, r2
  400d4a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400d4c:	6862      	ldr	r2, [r4, #4]
  400d4e:	4293      	cmp	r3, r2
  400d50:	d31c      	bcc.n	400d8c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400d52:	6823      	ldr	r3, [r4, #0]
  400d54:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400d56:	2000      	movs	r0, #0
  400d58:	e01d      	b.n	400d96 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400d5a:	68c0      	ldr	r0, [r0, #12]
  400d5c:	4b11      	ldr	r3, [pc, #68]	; (400da4 <prvCopyDataToQueue+0x84>)
  400d5e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d62:	425b      	negs	r3, r3
  400d64:	68e2      	ldr	r2, [r4, #12]
  400d66:	441a      	add	r2, r3
  400d68:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400d6a:	6821      	ldr	r1, [r4, #0]
  400d6c:	428a      	cmp	r2, r1
  400d6e:	d202      	bcs.n	400d76 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400d70:	6862      	ldr	r2, [r4, #4]
  400d72:	4413      	add	r3, r2
  400d74:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400d76:	2d02      	cmp	r5, #2
  400d78:	d10a      	bne.n	400d90 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d7c:	b153      	cbz	r3, 400d94 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d80:	3b01      	subs	r3, #1
  400d82:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400d84:	2000      	movs	r0, #0
  400d86:	e006      	b.n	400d96 <prvCopyDataToQueue+0x76>
  400d88:	2000      	movs	r0, #0
  400d8a:	e004      	b.n	400d96 <prvCopyDataToQueue+0x76>
  400d8c:	2000      	movs	r0, #0
  400d8e:	e002      	b.n	400d96 <prvCopyDataToQueue+0x76>
  400d90:	2000      	movs	r0, #0
  400d92:	e000      	b.n	400d96 <prvCopyDataToQueue+0x76>
  400d94:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d98:	3301      	adds	r3, #1
  400d9a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400d9c:	bd38      	pop	{r3, r4, r5, pc}
  400d9e:	bf00      	nop
  400da0:	00401fb5 	.word	0x00401fb5
  400da4:	0040e77d 	.word	0x0040e77d

00400da8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400da8:	b530      	push	{r4, r5, lr}
  400daa:	b083      	sub	sp, #12
  400dac:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400dae:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400db0:	b954      	cbnz	r4, 400dc8 <prvNotifyQueueSetContainer+0x20>
  400db2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400db6:	b672      	cpsid	i
  400db8:	f383 8811 	msr	BASEPRI, r3
  400dbc:	f3bf 8f6f 	isb	sy
  400dc0:	f3bf 8f4f 	dsb	sy
  400dc4:	b662      	cpsie	i
  400dc6:	e7fe      	b.n	400dc6 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400dc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400dcc:	429a      	cmp	r2, r3
  400dce:	d30a      	bcc.n	400de6 <prvNotifyQueueSetContainer+0x3e>
  400dd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dd4:	b672      	cpsid	i
  400dd6:	f383 8811 	msr	BASEPRI, r3
  400dda:	f3bf 8f6f 	isb	sy
  400dde:	f3bf 8f4f 	dsb	sy
  400de2:	b662      	cpsie	i
  400de4:	e7fe      	b.n	400de4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400de6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400de8:	4293      	cmp	r3, r2
  400dea:	d917      	bls.n	400e1c <prvNotifyQueueSetContainer+0x74>
  400dec:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400dee:	4620      	mov	r0, r4
  400df0:	a901      	add	r1, sp, #4
  400df2:	4b0c      	ldr	r3, [pc, #48]	; (400e24 <prvNotifyQueueSetContainer+0x7c>)
  400df4:	4798      	blx	r3
  400df6:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400df8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dfe:	d109      	bne.n	400e14 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e02:	b163      	cbz	r3, 400e1e <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400e04:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e08:	4b07      	ldr	r3, [pc, #28]	; (400e28 <prvNotifyQueueSetContainer+0x80>)
  400e0a:	4798      	blx	r3
  400e0c:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400e0e:	bf18      	it	ne
  400e10:	2501      	movne	r5, #1
  400e12:	e004      	b.n	400e1e <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400e14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e16:	3301      	adds	r3, #1
  400e18:	64a3      	str	r3, [r4, #72]	; 0x48
  400e1a:	e000      	b.n	400e1e <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400e1c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400e1e:	4628      	mov	r0, r5
  400e20:	b003      	add	sp, #12
  400e22:	bd30      	pop	{r4, r5, pc}
  400e24:	00400d21 	.word	0x00400d21
  400e28:	00401d85 	.word	0x00401d85

00400e2c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400e2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e2e:	b172      	cbz	r2, 400e4e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400e30:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400e32:	68c3      	ldr	r3, [r0, #12]
  400e34:	4413      	add	r3, r2
  400e36:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400e38:	6844      	ldr	r4, [r0, #4]
  400e3a:	42a3      	cmp	r3, r4
  400e3c:	d301      	bcc.n	400e42 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400e3e:	6803      	ldr	r3, [r0, #0]
  400e40:	60c3      	str	r3, [r0, #12]
  400e42:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400e44:	4608      	mov	r0, r1
  400e46:	68d9      	ldr	r1, [r3, #12]
  400e48:	4b01      	ldr	r3, [pc, #4]	; (400e50 <prvCopyDataFromQueue+0x24>)
  400e4a:	4798      	blx	r3
  400e4c:	bd10      	pop	{r4, pc}
  400e4e:	4770      	bx	lr
  400e50:	0040e77d 	.word	0x0040e77d

00400e54 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e56:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400e58:	4b20      	ldr	r3, [pc, #128]	; (400edc <prvUnlockQueue+0x88>)
  400e5a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400e5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e5e:	2b00      	cmp	r3, #0
  400e60:	dd18      	ble.n	400e94 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400e62:	4d1f      	ldr	r5, [pc, #124]	; (400ee0 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400e64:	4f1f      	ldr	r7, [pc, #124]	; (400ee4 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e66:	4e20      	ldr	r6, [pc, #128]	; (400ee8 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e6a:	b133      	cbz	r3, 400e7a <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400e6c:	4620      	mov	r0, r4
  400e6e:	2100      	movs	r1, #0
  400e70:	47a8      	blx	r5
  400e72:	2801      	cmp	r0, #1
  400e74:	d108      	bne.n	400e88 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400e76:	47b8      	blx	r7
  400e78:	e006      	b.n	400e88 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e7c:	b153      	cbz	r3, 400e94 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e82:	47b0      	blx	r6
  400e84:	b100      	cbz	r0, 400e88 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400e86:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400e88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e8a:	3b01      	subs	r3, #1
  400e8c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400e8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e90:	2b00      	cmp	r3, #0
  400e92:	dce9      	bgt.n	400e68 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400e94:	f04f 33ff 	mov.w	r3, #4294967295
  400e98:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400e9a:	4b14      	ldr	r3, [pc, #80]	; (400eec <prvUnlockQueue+0x98>)
  400e9c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400e9e:	4b0f      	ldr	r3, [pc, #60]	; (400edc <prvUnlockQueue+0x88>)
  400ea0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	dd13      	ble.n	400ed0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ea8:	6923      	ldr	r3, [r4, #16]
  400eaa:	b91b      	cbnz	r3, 400eb4 <prvUnlockQueue+0x60>
  400eac:	e010      	b.n	400ed0 <prvUnlockQueue+0x7c>
  400eae:	6923      	ldr	r3, [r4, #16]
  400eb0:	b923      	cbnz	r3, 400ebc <prvUnlockQueue+0x68>
  400eb2:	e00d      	b.n	400ed0 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400eb4:	f104 0610 	add.w	r6, r4, #16
  400eb8:	4d0b      	ldr	r5, [pc, #44]	; (400ee8 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400eba:	4f0a      	ldr	r7, [pc, #40]	; (400ee4 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ebc:	4630      	mov	r0, r6
  400ebe:	47a8      	blx	r5
  400ec0:	b100      	cbz	r0, 400ec4 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400ec2:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400ec4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ec6:	3b01      	subs	r3, #1
  400ec8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400eca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ecc:	2b00      	cmp	r3, #0
  400ece:	dcee      	bgt.n	400eae <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400ed0:	f04f 33ff 	mov.w	r3, #4294967295
  400ed4:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400ed6:	4b05      	ldr	r3, [pc, #20]	; (400eec <prvUnlockQueue+0x98>)
  400ed8:	4798      	blx	r3
  400eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400edc:	004009bd 	.word	0x004009bd
  400ee0:	00400da9 	.word	0x00400da9
  400ee4:	00401ee1 	.word	0x00401ee1
  400ee8:	00401d85 	.word	0x00401d85
  400eec:	00400a09 	.word	0x00400a09

00400ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400ef0:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400ef2:	b950      	cbnz	r0, 400f0a <xQueueGenericReset+0x1a>
  400ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef8:	b672      	cpsid	i
  400efa:	f383 8811 	msr	BASEPRI, r3
  400efe:	f3bf 8f6f 	isb	sy
  400f02:	f3bf 8f4f 	dsb	sy
  400f06:	b662      	cpsie	i
  400f08:	e7fe      	b.n	400f08 <xQueueGenericReset+0x18>
  400f0a:	4604      	mov	r4, r0
  400f0c:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400f0e:	4b18      	ldr	r3, [pc, #96]	; (400f70 <xQueueGenericReset+0x80>)
  400f10:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400f12:	6822      	ldr	r2, [r4, #0]
  400f14:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f18:	fb03 f301 	mul.w	r3, r3, r1
  400f1c:	18d0      	adds	r0, r2, r3
  400f1e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400f20:	2000      	movs	r0, #0
  400f22:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400f24:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400f26:	1a5b      	subs	r3, r3, r1
  400f28:	4413      	add	r3, r2
  400f2a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400f2c:	f04f 33ff 	mov.w	r3, #4294967295
  400f30:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400f32:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400f34:	b985      	cbnz	r5, 400f58 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400f36:	6923      	ldr	r3, [r4, #16]
  400f38:	b1ab      	cbz	r3, 400f66 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400f3a:	f104 0010 	add.w	r0, r4, #16
  400f3e:	4b0d      	ldr	r3, [pc, #52]	; (400f74 <xQueueGenericReset+0x84>)
  400f40:	4798      	blx	r3
  400f42:	2801      	cmp	r0, #1
  400f44:	d10f      	bne.n	400f66 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f4a:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <xQueueGenericReset+0x88>)
  400f4c:	601a      	str	r2, [r3, #0]
  400f4e:	f3bf 8f4f 	dsb	sy
  400f52:	f3bf 8f6f 	isb	sy
  400f56:	e006      	b.n	400f66 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400f58:	f104 0010 	add.w	r0, r4, #16
  400f5c:	4d07      	ldr	r5, [pc, #28]	; (400f7c <xQueueGenericReset+0x8c>)
  400f5e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f64:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400f66:	4b06      	ldr	r3, [pc, #24]	; (400f80 <xQueueGenericReset+0x90>)
  400f68:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400f6a:	2001      	movs	r0, #1
  400f6c:	bd38      	pop	{r3, r4, r5, pc}
  400f6e:	bf00      	nop
  400f70:	004009bd 	.word	0x004009bd
  400f74:	00401d85 	.word	0x00401d85
  400f78:	e000ed04 	.word	0xe000ed04
  400f7c:	00400c91 	.word	0x00400c91
  400f80:	00400a09 	.word	0x00400a09

00400f84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400f86:	b950      	cbnz	r0, 400f9e <xQueueGenericCreate+0x1a>
  400f88:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8c:	b672      	cpsid	i
  400f8e:	f383 8811 	msr	BASEPRI, r3
  400f92:	f3bf 8f6f 	isb	sy
  400f96:	f3bf 8f4f 	dsb	sy
  400f9a:	b662      	cpsie	i
  400f9c:	e7fe      	b.n	400f9c <xQueueGenericCreate+0x18>
  400f9e:	460d      	mov	r5, r1
  400fa0:	4617      	mov	r7, r2
  400fa2:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  400fa4:	b1c1      	cbz	r1, 400fd8 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400fa6:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400faa:	3059      	adds	r0, #89	; 0x59
  400fac:	4b14      	ldr	r3, [pc, #80]	; (401000 <xQueueGenericCreate+0x7c>)
  400fae:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400fb0:	4604      	mov	r4, r0
  400fb2:	b910      	cbnz	r0, 400fba <xQueueGenericCreate+0x36>
  400fb4:	e005      	b.n	400fc2 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400fb6:	6024      	str	r4, [r4, #0]
  400fb8:	e015      	b.n	400fe6 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400fba:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400fbe:	6003      	str	r3, [r0, #0]
  400fc0:	e011      	b.n	400fe6 <xQueueGenericCreate+0x62>
  400fc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fc6:	b672      	cpsid	i
  400fc8:	f383 8811 	msr	BASEPRI, r3
  400fcc:	f3bf 8f6f 	isb	sy
  400fd0:	f3bf 8f4f 	dsb	sy
  400fd4:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  400fd6:	e7fe      	b.n	400fd6 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400fd8:	2058      	movs	r0, #88	; 0x58
  400fda:	4b09      	ldr	r3, [pc, #36]	; (401000 <xQueueGenericCreate+0x7c>)
  400fdc:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400fde:	4604      	mov	r4, r0
  400fe0:	2800      	cmp	r0, #0
  400fe2:	d1e8      	bne.n	400fb6 <xQueueGenericCreate+0x32>
  400fe4:	e7ed      	b.n	400fc2 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400fe6:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400fe8:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400fea:	4620      	mov	r0, r4
  400fec:	2101      	movs	r1, #1
  400fee:	4b05      	ldr	r3, [pc, #20]	; (401004 <xQueueGenericCreate+0x80>)
  400ff0:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400ff2:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400ff6:	2300      	movs	r3, #0
  400ff8:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400ffa:	4620      	mov	r0, r4
  400ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ffe:	bf00      	nop
  401000:	00400c15 	.word	0x00400c15
  401004:	00400ef1 	.word	0x00400ef1

00401008 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  401008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40100c:	b085      	sub	sp, #20
  40100e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401010:	b950      	cbnz	r0, 401028 <xQueueGenericSend+0x20>
  401012:	f04f 0380 	mov.w	r3, #128	; 0x80
  401016:	b672      	cpsid	i
  401018:	f383 8811 	msr	BASEPRI, r3
  40101c:	f3bf 8f6f 	isb	sy
  401020:	f3bf 8f4f 	dsb	sy
  401024:	b662      	cpsie	i
  401026:	e7fe      	b.n	401026 <xQueueGenericSend+0x1e>
  401028:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40102a:	b961      	cbnz	r1, 401046 <xQueueGenericSend+0x3e>
  40102c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40102e:	b152      	cbz	r2, 401046 <xQueueGenericSend+0x3e>
  401030:	f04f 0380 	mov.w	r3, #128	; 0x80
  401034:	b672      	cpsid	i
  401036:	f383 8811 	msr	BASEPRI, r3
  40103a:	f3bf 8f6f 	isb	sy
  40103e:	f3bf 8f4f 	dsb	sy
  401042:	b662      	cpsie	i
  401044:	e7fe      	b.n	401044 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401046:	2b02      	cmp	r3, #2
  401048:	d10d      	bne.n	401066 <xQueueGenericSend+0x5e>
  40104a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40104c:	2a01      	cmp	r2, #1
  40104e:	d00a      	beq.n	401066 <xQueueGenericSend+0x5e>
  401050:	f04f 0380 	mov.w	r3, #128	; 0x80
  401054:	b672      	cpsid	i
  401056:	f383 8811 	msr	BASEPRI, r3
  40105a:	f3bf 8f6f 	isb	sy
  40105e:	f3bf 8f4f 	dsb	sy
  401062:	b662      	cpsie	i
  401064:	e7fe      	b.n	401064 <xQueueGenericSend+0x5c>
  401066:	461d      	mov	r5, r3
  401068:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40106a:	4b51      	ldr	r3, [pc, #324]	; (4011b0 <xQueueGenericSend+0x1a8>)
  40106c:	4798      	blx	r3
  40106e:	b960      	cbnz	r0, 40108a <xQueueGenericSend+0x82>
  401070:	9b01      	ldr	r3, [sp, #4]
  401072:	b163      	cbz	r3, 40108e <xQueueGenericSend+0x86>
  401074:	f04f 0380 	mov.w	r3, #128	; 0x80
  401078:	b672      	cpsid	i
  40107a:	f383 8811 	msr	BASEPRI, r3
  40107e:	f3bf 8f6f 	isb	sy
  401082:	f3bf 8f4f 	dsb	sy
  401086:	b662      	cpsie	i
  401088:	e7fe      	b.n	401088 <xQueueGenericSend+0x80>
  40108a:	2700      	movs	r7, #0
  40108c:	e000      	b.n	401090 <xQueueGenericSend+0x88>
  40108e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401090:	4e48      	ldr	r6, [pc, #288]	; (4011b4 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401092:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4011e0 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401096:	f8df 8128 	ldr.w	r8, [pc, #296]	; 4011c0 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40109a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40109c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40109e:	2d02      	cmp	r5, #2
  4010a0:	d002      	beq.n	4010a8 <xQueueGenericSend+0xa0>
  4010a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010a4:	429a      	cmp	r2, r3
  4010a6:	d233      	bcs.n	401110 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4010a8:	4620      	mov	r0, r4
  4010aa:	9900      	ldr	r1, [sp, #0]
  4010ac:	462a      	mov	r2, r5
  4010ae:	4b42      	ldr	r3, [pc, #264]	; (4011b8 <xQueueGenericSend+0x1b0>)
  4010b0:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4010b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4010b4:	b173      	cbz	r3, 4010d4 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4010b6:	4620      	mov	r0, r4
  4010b8:	4629      	mov	r1, r5
  4010ba:	4b40      	ldr	r3, [pc, #256]	; (4011bc <xQueueGenericSend+0x1b4>)
  4010bc:	4798      	blx	r3
  4010be:	2801      	cmp	r0, #1
  4010c0:	d122      	bne.n	401108 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  4010c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010c6:	4b3e      	ldr	r3, [pc, #248]	; (4011c0 <xQueueGenericSend+0x1b8>)
  4010c8:	601a      	str	r2, [r3, #0]
  4010ca:	f3bf 8f4f 	dsb	sy
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	e019      	b.n	401108 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010d6:	b173      	cbz	r3, 4010f6 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4010d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010dc:	4b39      	ldr	r3, [pc, #228]	; (4011c4 <xQueueGenericSend+0x1bc>)
  4010de:	4798      	blx	r3
  4010e0:	2801      	cmp	r0, #1
  4010e2:	d111      	bne.n	401108 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  4010e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010e8:	4b35      	ldr	r3, [pc, #212]	; (4011c0 <xQueueGenericSend+0x1b8>)
  4010ea:	601a      	str	r2, [r3, #0]
  4010ec:	f3bf 8f4f 	dsb	sy
  4010f0:	f3bf 8f6f 	isb	sy
  4010f4:	e008      	b.n	401108 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  4010f6:	b138      	cbz	r0, 401108 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  4010f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010fc:	4b30      	ldr	r3, [pc, #192]	; (4011c0 <xQueueGenericSend+0x1b8>)
  4010fe:	601a      	str	r2, [r3, #0]
  401100:	f3bf 8f4f 	dsb	sy
  401104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  401108:	4b2f      	ldr	r3, [pc, #188]	; (4011c8 <xQueueGenericSend+0x1c0>)
  40110a:	4798      	blx	r3
				return pdPASS;
  40110c:	2001      	movs	r0, #1
  40110e:	e04b      	b.n	4011a8 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401110:	9b01      	ldr	r3, [sp, #4]
  401112:	b91b      	cbnz	r3, 40111c <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401114:	4b2c      	ldr	r3, [pc, #176]	; (4011c8 <xQueueGenericSend+0x1c0>)
  401116:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  401118:	2000      	movs	r0, #0
  40111a:	e045      	b.n	4011a8 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  40111c:	b917      	cbnz	r7, 401124 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40111e:	a802      	add	r0, sp, #8
  401120:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  401122:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401124:	4b28      	ldr	r3, [pc, #160]	; (4011c8 <xQueueGenericSend+0x1c0>)
  401126:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401128:	4b28      	ldr	r3, [pc, #160]	; (4011cc <xQueueGenericSend+0x1c4>)
  40112a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40112c:	47b0      	blx	r6
  40112e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401130:	f1b3 3fff 	cmp.w	r3, #4294967295
  401134:	d101      	bne.n	40113a <xQueueGenericSend+0x132>
  401136:	2300      	movs	r3, #0
  401138:	6463      	str	r3, [r4, #68]	; 0x44
  40113a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40113c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401140:	d101      	bne.n	401146 <xQueueGenericSend+0x13e>
  401142:	2300      	movs	r3, #0
  401144:	64a3      	str	r3, [r4, #72]	; 0x48
  401146:	4b20      	ldr	r3, [pc, #128]	; (4011c8 <xQueueGenericSend+0x1c0>)
  401148:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40114a:	a802      	add	r0, sp, #8
  40114c:	a901      	add	r1, sp, #4
  40114e:	4b20      	ldr	r3, [pc, #128]	; (4011d0 <xQueueGenericSend+0x1c8>)
  401150:	4798      	blx	r3
  401152:	bb18      	cbnz	r0, 40119c <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401154:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401156:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  40115a:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40115e:	4b1a      	ldr	r3, [pc, #104]	; (4011c8 <xQueueGenericSend+0x1c0>)
  401160:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401162:	45d3      	cmp	fp, sl
  401164:	d114      	bne.n	401190 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401166:	f104 0010 	add.w	r0, r4, #16
  40116a:	9901      	ldr	r1, [sp, #4]
  40116c:	4b19      	ldr	r3, [pc, #100]	; (4011d4 <xQueueGenericSend+0x1cc>)
  40116e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401170:	4620      	mov	r0, r4
  401172:	4b19      	ldr	r3, [pc, #100]	; (4011d8 <xQueueGenericSend+0x1d0>)
  401174:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401176:	4b19      	ldr	r3, [pc, #100]	; (4011dc <xQueueGenericSend+0x1d4>)
  401178:	4798      	blx	r3
  40117a:	2800      	cmp	r0, #0
  40117c:	d18d      	bne.n	40109a <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  40117e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401182:	f8c8 3000 	str.w	r3, [r8]
  401186:	f3bf 8f4f 	dsb	sy
  40118a:	f3bf 8f6f 	isb	sy
  40118e:	e784      	b.n	40109a <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401190:	4620      	mov	r0, r4
  401192:	4b11      	ldr	r3, [pc, #68]	; (4011d8 <xQueueGenericSend+0x1d0>)
  401194:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401196:	4b11      	ldr	r3, [pc, #68]	; (4011dc <xQueueGenericSend+0x1d4>)
  401198:	4798      	blx	r3
  40119a:	e77e      	b.n	40109a <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40119c:	4620      	mov	r0, r4
  40119e:	4b0e      	ldr	r3, [pc, #56]	; (4011d8 <xQueueGenericSend+0x1d0>)
  4011a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4011a2:	4b0e      	ldr	r3, [pc, #56]	; (4011dc <xQueueGenericSend+0x1d4>)
  4011a4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  4011a6:	2000      	movs	r0, #0
		}
	}
}
  4011a8:	b005      	add	sp, #20
  4011aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011ae:	bf00      	nop
  4011b0:	00401eed 	.word	0x00401eed
  4011b4:	004009bd 	.word	0x004009bd
  4011b8:	00400d21 	.word	0x00400d21
  4011bc:	00400da9 	.word	0x00400da9
  4011c0:	e000ed04 	.word	0xe000ed04
  4011c4:	00401d85 	.word	0x00401d85
  4011c8:	00400a09 	.word	0x00400a09
  4011cc:	00401861 	.word	0x00401861
  4011d0:	00401e4d 	.word	0x00401e4d
  4011d4:	00401c81 	.word	0x00401c81
  4011d8:	00400e55 	.word	0x00400e55
  4011dc:	004019b1 	.word	0x004019b1
  4011e0:	00401e1d 	.word	0x00401e1d

004011e4 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011e4:	b950      	cbnz	r0, 4011fc <xQueueGenericSendFromISR+0x18>
  4011e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011ea:	b672      	cpsid	i
  4011ec:	f383 8811 	msr	BASEPRI, r3
  4011f0:	f3bf 8f6f 	isb	sy
  4011f4:	f3bf 8f4f 	dsb	sy
  4011f8:	b662      	cpsie	i
  4011fa:	e7fe      	b.n	4011fa <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  4011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401200:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401202:	b961      	cbnz	r1, 40121e <xQueueGenericSendFromISR+0x3a>
  401204:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401206:	b150      	cbz	r0, 40121e <xQueueGenericSendFromISR+0x3a>
  401208:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120c:	b672      	cpsid	i
  40120e:	f383 8811 	msr	BASEPRI, r3
  401212:	f3bf 8f6f 	isb	sy
  401216:	f3bf 8f4f 	dsb	sy
  40121a:	b662      	cpsie	i
  40121c:	e7fe      	b.n	40121c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40121e:	2b02      	cmp	r3, #2
  401220:	d10d      	bne.n	40123e <xQueueGenericSendFromISR+0x5a>
  401222:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401224:	2801      	cmp	r0, #1
  401226:	d00a      	beq.n	40123e <xQueueGenericSendFromISR+0x5a>
  401228:	f04f 0380 	mov.w	r3, #128	; 0x80
  40122c:	b672      	cpsid	i
  40122e:	f383 8811 	msr	BASEPRI, r3
  401232:	f3bf 8f6f 	isb	sy
  401236:	f3bf 8f4f 	dsb	sy
  40123a:	b662      	cpsie	i
  40123c:	e7fe      	b.n	40123c <xQueueGenericSendFromISR+0x58>
  40123e:	461e      	mov	r6, r3
  401240:	4615      	mov	r5, r2
  401242:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401244:	4b21      	ldr	r3, [pc, #132]	; (4012cc <xQueueGenericSendFromISR+0xe8>)
  401246:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401248:	f3ef 8711 	mrs	r7, BASEPRI
  40124c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401250:	b672      	cpsid	i
  401252:	f383 8811 	msr	BASEPRI, r3
  401256:	f3bf 8f6f 	isb	sy
  40125a:	f3bf 8f4f 	dsb	sy
  40125e:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401260:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401262:	2e02      	cmp	r6, #2
  401264:	d002      	beq.n	40126c <xQueueGenericSendFromISR+0x88>
  401266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401268:	429a      	cmp	r2, r3
  40126a:	d223      	bcs.n	4012b4 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40126c:	4620      	mov	r0, r4
  40126e:	4641      	mov	r1, r8
  401270:	4632      	mov	r2, r6
  401272:	4b17      	ldr	r3, [pc, #92]	; (4012d0 <xQueueGenericSendFromISR+0xec>)
  401274:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401276:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401278:	f1b3 3fff 	cmp.w	r3, #4294967295
  40127c:	d115      	bne.n	4012aa <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40127e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401280:	b143      	cbz	r3, 401294 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401282:	4620      	mov	r0, r4
  401284:	4631      	mov	r1, r6
  401286:	4b13      	ldr	r3, [pc, #76]	; (4012d4 <xQueueGenericSendFromISR+0xf0>)
  401288:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40128a:	2801      	cmp	r0, #1
  40128c:	d114      	bne.n	4012b8 <xQueueGenericSendFromISR+0xd4>
  40128e:	b19d      	cbz	r5, 4012b8 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401290:	6028      	str	r0, [r5, #0]
  401292:	e016      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401294:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401296:	b18b      	cbz	r3, 4012bc <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401298:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40129c:	4b0e      	ldr	r3, [pc, #56]	; (4012d8 <xQueueGenericSendFromISR+0xf4>)
  40129e:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  4012a0:	b170      	cbz	r0, 4012c0 <xQueueGenericSendFromISR+0xdc>
  4012a2:	b16d      	cbz	r5, 4012c0 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  4012a4:	2001      	movs	r0, #1
  4012a6:	6028      	str	r0, [r5, #0]
  4012a8:	e00b      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4012aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012ac:	3301      	adds	r3, #1
  4012ae:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  4012b0:	2001      	movs	r0, #1
  4012b2:	e006      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  4012b4:	2000      	movs	r0, #0
  4012b6:	e004      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  4012b8:	2001      	movs	r0, #1
  4012ba:	e002      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
  4012bc:	2001      	movs	r0, #1
  4012be:	e000      	b.n	4012c2 <xQueueGenericSendFromISR+0xde>
  4012c0:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4012c2:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  4012c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012ca:	bf00      	nop
  4012cc:	00400bb1 	.word	0x00400bb1
  4012d0:	00400d21 	.word	0x00400d21
  4012d4:	00400da9 	.word	0x00400da9
  4012d8:	00401d85 	.word	0x00401d85

004012dc <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  4012dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012e0:	b085      	sub	sp, #20
  4012e2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4012e4:	b950      	cbnz	r0, 4012fc <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4012e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ea:	b672      	cpsid	i
  4012ec:	f383 8811 	msr	BASEPRI, r3
  4012f0:	f3bf 8f6f 	isb	sy
  4012f4:	f3bf 8f4f 	dsb	sy
  4012f8:	b662      	cpsie	i
  4012fa:	e7fe      	b.n	4012fa <xQueueGenericReceive+0x1e>
  4012fc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4012fe:	b961      	cbnz	r1, 40131a <xQueueGenericReceive+0x3e>
  401300:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401302:	b152      	cbz	r2, 40131a <xQueueGenericReceive+0x3e>
  401304:	f04f 0380 	mov.w	r3, #128	; 0x80
  401308:	b672      	cpsid	i
  40130a:	f383 8811 	msr	BASEPRI, r3
  40130e:	f3bf 8f6f 	isb	sy
  401312:	f3bf 8f4f 	dsb	sy
  401316:	b662      	cpsie	i
  401318:	e7fe      	b.n	401318 <xQueueGenericReceive+0x3c>
  40131a:	4698      	mov	r8, r3
  40131c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40131e:	4b52      	ldr	r3, [pc, #328]	; (401468 <xQueueGenericReceive+0x18c>)
  401320:	4798      	blx	r3
  401322:	b960      	cbnz	r0, 40133e <xQueueGenericReceive+0x62>
  401324:	9b01      	ldr	r3, [sp, #4]
  401326:	b163      	cbz	r3, 401342 <xQueueGenericReceive+0x66>
  401328:	f04f 0380 	mov.w	r3, #128	; 0x80
  40132c:	b672      	cpsid	i
  40132e:	f383 8811 	msr	BASEPRI, r3
  401332:	f3bf 8f6f 	isb	sy
  401336:	f3bf 8f4f 	dsb	sy
  40133a:	b662      	cpsie	i
  40133c:	e7fe      	b.n	40133c <xQueueGenericReceive+0x60>
  40133e:	2600      	movs	r6, #0
  401340:	e000      	b.n	401344 <xQueueGenericReceive+0x68>
  401342:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401344:	4d49      	ldr	r5, [pc, #292]	; (40146c <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401346:	f8df a154 	ldr.w	sl, [pc, #340]	; 40149c <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40134a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 40147c <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40134e:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401352:	2b00      	cmp	r3, #0
  401354:	d034      	beq.n	4013c0 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401356:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401358:	4620      	mov	r0, r4
  40135a:	4659      	mov	r1, fp
  40135c:	4b44      	ldr	r3, [pc, #272]	; (401470 <xQueueGenericReceive+0x194>)
  40135e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401360:	f1b8 0f00 	cmp.w	r8, #0
  401364:	d118      	bne.n	401398 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401368:	3b01      	subs	r3, #1
  40136a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40136c:	6823      	ldr	r3, [r4, #0]
  40136e:	b913      	cbnz	r3, 401376 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401370:	4b40      	ldr	r3, [pc, #256]	; (401474 <xQueueGenericReceive+0x198>)
  401372:	4798      	blx	r3
  401374:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401376:	6923      	ldr	r3, [r4, #16]
  401378:	b1f3      	cbz	r3, 4013b8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40137a:	f104 0010 	add.w	r0, r4, #16
  40137e:	4b3e      	ldr	r3, [pc, #248]	; (401478 <xQueueGenericReceive+0x19c>)
  401380:	4798      	blx	r3
  401382:	2801      	cmp	r0, #1
  401384:	d118      	bne.n	4013b8 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40138a:	4b3c      	ldr	r3, [pc, #240]	; (40147c <xQueueGenericReceive+0x1a0>)
  40138c:	601a      	str	r2, [r3, #0]
  40138e:	f3bf 8f4f 	dsb	sy
  401392:	f3bf 8f6f 	isb	sy
  401396:	e00f      	b.n	4013b8 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401398:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40139a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40139c:	b163      	cbz	r3, 4013b8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40139e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4013a2:	4b35      	ldr	r3, [pc, #212]	; (401478 <xQueueGenericReceive+0x19c>)
  4013a4:	4798      	blx	r3
  4013a6:	b138      	cbz	r0, 4013b8 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4013a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013ac:	4b33      	ldr	r3, [pc, #204]	; (40147c <xQueueGenericReceive+0x1a0>)
  4013ae:	601a      	str	r2, [r3, #0]
  4013b0:	f3bf 8f4f 	dsb	sy
  4013b4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  4013b8:	4b31      	ldr	r3, [pc, #196]	; (401480 <xQueueGenericReceive+0x1a4>)
  4013ba:	4798      	blx	r3
				return pdPASS;
  4013bc:	2001      	movs	r0, #1
  4013be:	e04f      	b.n	401460 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4013c0:	9b01      	ldr	r3, [sp, #4]
  4013c2:	b91b      	cbnz	r3, 4013cc <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4013c4:	4b2e      	ldr	r3, [pc, #184]	; (401480 <xQueueGenericReceive+0x1a4>)
  4013c6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4013c8:	2000      	movs	r0, #0
  4013ca:	e049      	b.n	401460 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  4013cc:	b916      	cbnz	r6, 4013d4 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4013ce:	a802      	add	r0, sp, #8
  4013d0:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4013d2:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4013d4:	4b2a      	ldr	r3, [pc, #168]	; (401480 <xQueueGenericReceive+0x1a4>)
  4013d6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4013d8:	4b2a      	ldr	r3, [pc, #168]	; (401484 <xQueueGenericReceive+0x1a8>)
  4013da:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4013dc:	47a8      	blx	r5
  4013de:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013e4:	d101      	bne.n	4013ea <xQueueGenericReceive+0x10e>
  4013e6:	2300      	movs	r3, #0
  4013e8:	6463      	str	r3, [r4, #68]	; 0x44
  4013ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4013f0:	d101      	bne.n	4013f6 <xQueueGenericReceive+0x11a>
  4013f2:	2300      	movs	r3, #0
  4013f4:	64a3      	str	r3, [r4, #72]	; 0x48
  4013f6:	4b22      	ldr	r3, [pc, #136]	; (401480 <xQueueGenericReceive+0x1a4>)
  4013f8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4013fa:	a802      	add	r0, sp, #8
  4013fc:	a901      	add	r1, sp, #4
  4013fe:	4b22      	ldr	r3, [pc, #136]	; (401488 <xQueueGenericReceive+0x1ac>)
  401400:	4798      	blx	r3
  401402:	bb38      	cbnz	r0, 401454 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401404:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401406:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401408:	4b1d      	ldr	r3, [pc, #116]	; (401480 <xQueueGenericReceive+0x1a4>)
  40140a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40140c:	b9e7      	cbnz	r7, 401448 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40140e:	6823      	ldr	r3, [r4, #0]
  401410:	b92b      	cbnz	r3, 40141e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401412:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401414:	6860      	ldr	r0, [r4, #4]
  401416:	4b1d      	ldr	r3, [pc, #116]	; (40148c <xQueueGenericReceive+0x1b0>)
  401418:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40141a:	4b19      	ldr	r3, [pc, #100]	; (401480 <xQueueGenericReceive+0x1a4>)
  40141c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40141e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401422:	9901      	ldr	r1, [sp, #4]
  401424:	4b1a      	ldr	r3, [pc, #104]	; (401490 <xQueueGenericReceive+0x1b4>)
  401426:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401428:	4620      	mov	r0, r4
  40142a:	4b1a      	ldr	r3, [pc, #104]	; (401494 <xQueueGenericReceive+0x1b8>)
  40142c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40142e:	4b1a      	ldr	r3, [pc, #104]	; (401498 <xQueueGenericReceive+0x1bc>)
  401430:	4798      	blx	r3
  401432:	2800      	cmp	r0, #0
  401434:	d18b      	bne.n	40134e <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401436:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40143a:	f8c9 3000 	str.w	r3, [r9]
  40143e:	f3bf 8f4f 	dsb	sy
  401442:	f3bf 8f6f 	isb	sy
  401446:	e782      	b.n	40134e <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401448:	4620      	mov	r0, r4
  40144a:	4b12      	ldr	r3, [pc, #72]	; (401494 <xQueueGenericReceive+0x1b8>)
  40144c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40144e:	4b12      	ldr	r3, [pc, #72]	; (401498 <xQueueGenericReceive+0x1bc>)
  401450:	4798      	blx	r3
  401452:	e77c      	b.n	40134e <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401454:	4620      	mov	r0, r4
  401456:	4b0f      	ldr	r3, [pc, #60]	; (401494 <xQueueGenericReceive+0x1b8>)
  401458:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40145a:	4b0f      	ldr	r3, [pc, #60]	; (401498 <xQueueGenericReceive+0x1bc>)
  40145c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40145e:	2000      	movs	r0, #0
		}
	}
}
  401460:	b005      	add	sp, #20
  401462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401466:	bf00      	nop
  401468:	00401eed 	.word	0x00401eed
  40146c:	004009bd 	.word	0x004009bd
  401470:	00400e2d 	.word	0x00400e2d
  401474:	00402075 	.word	0x00402075
  401478:	00401d85 	.word	0x00401d85
  40147c:	e000ed04 	.word	0xe000ed04
  401480:	00400a09 	.word	0x00400a09
  401484:	00401861 	.word	0x00401861
  401488:	00401e4d 	.word	0x00401e4d
  40148c:	00401f0d 	.word	0x00401f0d
  401490:	00401c81 	.word	0x00401c81
  401494:	00400e55 	.word	0x00400e55
  401498:	004019b1 	.word	0x004019b1
  40149c:	00401e1d 	.word	0x00401e1d

004014a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4014a0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4014a2:	4b0b      	ldr	r3, [pc, #44]	; (4014d0 <vQueueAddToRegistry+0x30>)
  4014a4:	681b      	ldr	r3, [r3, #0]
  4014a6:	b12b      	cbz	r3, 4014b4 <vQueueAddToRegistry+0x14>
  4014a8:	2301      	movs	r3, #1
  4014aa:	4c09      	ldr	r4, [pc, #36]	; (4014d0 <vQueueAddToRegistry+0x30>)
  4014ac:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4014b0:	b942      	cbnz	r2, 4014c4 <vQueueAddToRegistry+0x24>
  4014b2:	e000      	b.n	4014b6 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4014b4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4014b6:	4a06      	ldr	r2, [pc, #24]	; (4014d0 <vQueueAddToRegistry+0x30>)
  4014b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4014bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4014c0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4014c2:	e002      	b.n	4014ca <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4014c4:	3301      	adds	r3, #1
  4014c6:	2b08      	cmp	r3, #8
  4014c8:	d1f0      	bne.n	4014ac <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  4014ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ce:	4770      	bx	lr
  4014d0:	2040c360 	.word	0x2040c360

004014d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  4014d4:	b570      	push	{r4, r5, r6, lr}
  4014d6:	4604      	mov	r4, r0
  4014d8:	460e      	mov	r6, r1
  4014da:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4014dc:	4b0d      	ldr	r3, [pc, #52]	; (401514 <vQueueWaitForMessageRestricted+0x40>)
  4014de:	4798      	blx	r3
  4014e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014e6:	d101      	bne.n	4014ec <vQueueWaitForMessageRestricted+0x18>
  4014e8:	2300      	movs	r3, #0
  4014ea:	6463      	str	r3, [r4, #68]	; 0x44
  4014ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014f2:	d101      	bne.n	4014f8 <vQueueWaitForMessageRestricted+0x24>
  4014f4:	2300      	movs	r3, #0
  4014f6:	64a3      	str	r3, [r4, #72]	; 0x48
  4014f8:	4b07      	ldr	r3, [pc, #28]	; (401518 <vQueueWaitForMessageRestricted+0x44>)
  4014fa:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4014fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014fe:	b92b      	cbnz	r3, 40150c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401500:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401504:	4631      	mov	r1, r6
  401506:	462a      	mov	r2, r5
  401508:	4b04      	ldr	r3, [pc, #16]	; (40151c <vQueueWaitForMessageRestricted+0x48>)
  40150a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40150c:	4620      	mov	r0, r4
  40150e:	4b04      	ldr	r3, [pc, #16]	; (401520 <vQueueWaitForMessageRestricted+0x4c>)
  401510:	4798      	blx	r3
  401512:	bd70      	pop	{r4, r5, r6, pc}
  401514:	004009bd 	.word	0x004009bd
  401518:	00400a09 	.word	0x00400a09
  40151c:	00401d05 	.word	0x00401d05
  401520:	00400e55 	.word	0x00400e55

00401524 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401524:	4b08      	ldr	r3, [pc, #32]	; (401548 <prvResetNextTaskUnblockTime+0x24>)
  401526:	681b      	ldr	r3, [r3, #0]
  401528:	681b      	ldr	r3, [r3, #0]
  40152a:	b923      	cbnz	r3, 401536 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  40152c:	f04f 32ff 	mov.w	r2, #4294967295
  401530:	4b06      	ldr	r3, [pc, #24]	; (40154c <prvResetNextTaskUnblockTime+0x28>)
  401532:	601a      	str	r2, [r3, #0]
  401534:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401536:	4b04      	ldr	r3, [pc, #16]	; (401548 <prvResetNextTaskUnblockTime+0x24>)
  401538:	681b      	ldr	r3, [r3, #0]
  40153a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40153c:	68db      	ldr	r3, [r3, #12]
  40153e:	685a      	ldr	r2, [r3, #4]
  401540:	4b02      	ldr	r3, [pc, #8]	; (40154c <prvResetNextTaskUnblockTime+0x28>)
  401542:	601a      	str	r2, [r3, #0]
  401544:	4770      	bx	lr
  401546:	bf00      	nop
  401548:	2040c160 	.word	0x2040c160
  40154c:	2040c220 	.word	0x2040c220

00401550 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  401550:	b510      	push	{r4, lr}
  401552:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401554:	4b0e      	ldr	r3, [pc, #56]	; (401590 <prvAddCurrentTaskToDelayedList+0x40>)
  401556:	681b      	ldr	r3, [r3, #0]
  401558:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  40155a:	4b0e      	ldr	r3, [pc, #56]	; (401594 <prvAddCurrentTaskToDelayedList+0x44>)
  40155c:	681b      	ldr	r3, [r3, #0]
  40155e:	4298      	cmp	r0, r3
  401560:	d207      	bcs.n	401572 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401562:	4b0d      	ldr	r3, [pc, #52]	; (401598 <prvAddCurrentTaskToDelayedList+0x48>)
  401564:	6818      	ldr	r0, [r3, #0]
  401566:	4b0a      	ldr	r3, [pc, #40]	; (401590 <prvAddCurrentTaskToDelayedList+0x40>)
  401568:	6819      	ldr	r1, [r3, #0]
  40156a:	3104      	adds	r1, #4
  40156c:	4b0b      	ldr	r3, [pc, #44]	; (40159c <prvAddCurrentTaskToDelayedList+0x4c>)
  40156e:	4798      	blx	r3
  401570:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401572:	4b0b      	ldr	r3, [pc, #44]	; (4015a0 <prvAddCurrentTaskToDelayedList+0x50>)
  401574:	6818      	ldr	r0, [r3, #0]
  401576:	4b06      	ldr	r3, [pc, #24]	; (401590 <prvAddCurrentTaskToDelayedList+0x40>)
  401578:	6819      	ldr	r1, [r3, #0]
  40157a:	3104      	adds	r1, #4
  40157c:	4b07      	ldr	r3, [pc, #28]	; (40159c <prvAddCurrentTaskToDelayedList+0x4c>)
  40157e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401580:	4b08      	ldr	r3, [pc, #32]	; (4015a4 <prvAddCurrentTaskToDelayedList+0x54>)
  401582:	681b      	ldr	r3, [r3, #0]
  401584:	429c      	cmp	r4, r3
  401586:	d201      	bcs.n	40158c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401588:	4b06      	ldr	r3, [pc, #24]	; (4015a4 <prvAddCurrentTaskToDelayedList+0x54>)
  40158a:	601c      	str	r4, [r3, #0]
  40158c:	bd10      	pop	{r4, pc}
  40158e:	bf00      	nop
  401590:	2040c200 	.word	0x2040c200
  401594:	2040c21c 	.word	0x2040c21c
  401598:	2040c180 	.word	0x2040c180
  40159c:	00400cc9 	.word	0x00400cc9
  4015a0:	2040c160 	.word	0x2040c160
  4015a4:	2040c220 	.word	0x2040c220

004015a8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015ac:	b083      	sub	sp, #12
  4015ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4015b0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4015b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  4015b6:	b950      	cbnz	r0, 4015ce <xTaskGenericCreate+0x26>
  4015b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015bc:	b672      	cpsid	i
  4015be:	f383 8811 	msr	BASEPRI, r3
  4015c2:	f3bf 8f6f 	isb	sy
  4015c6:	f3bf 8f4f 	dsb	sy
  4015ca:	b662      	cpsie	i
  4015cc:	e7fe      	b.n	4015cc <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4015ce:	2f04      	cmp	r7, #4
  4015d0:	d90a      	bls.n	4015e8 <xTaskGenericCreate+0x40>
  4015d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015d6:	b672      	cpsid	i
  4015d8:	f383 8811 	msr	BASEPRI, r3
  4015dc:	f3bf 8f6f 	isb	sy
  4015e0:	f3bf 8f4f 	dsb	sy
  4015e4:	b662      	cpsie	i
  4015e6:	e7fe      	b.n	4015e6 <xTaskGenericCreate+0x3e>
  4015e8:	9001      	str	r0, [sp, #4]
  4015ea:	9300      	str	r3, [sp, #0]
  4015ec:	4690      	mov	r8, r2
  4015ee:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015f0:	b935      	cbnz	r5, 401600 <xTaskGenericCreate+0x58>
  4015f2:	0090      	lsls	r0, r2, #2
  4015f4:	4b5f      	ldr	r3, [pc, #380]	; (401774 <xTaskGenericCreate+0x1cc>)
  4015f6:	4798      	blx	r3

		if( pxStack != NULL )
  4015f8:	4605      	mov	r5, r0
  4015fa:	2800      	cmp	r0, #0
  4015fc:	f000 80b4 	beq.w	401768 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401600:	2058      	movs	r0, #88	; 0x58
  401602:	4b5c      	ldr	r3, [pc, #368]	; (401774 <xTaskGenericCreate+0x1cc>)
  401604:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401606:	4604      	mov	r4, r0
  401608:	b1a0      	cbz	r0, 401634 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40160a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40160c:	4628      	mov	r0, r5
  40160e:	21a5      	movs	r1, #165	; 0xa5
  401610:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401614:	4b58      	ldr	r3, [pc, #352]	; (401778 <xTaskGenericCreate+0x1d0>)
  401616:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401618:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40161c:	4445      	add	r5, r8
  40161e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401620:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401624:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401628:	7833      	ldrb	r3, [r6, #0]
  40162a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40162e:	7833      	ldrb	r3, [r6, #0]
  401630:	b923      	cbnz	r3, 40163c <xTaskGenericCreate+0x94>
  401632:	e00f      	b.n	401654 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401634:	4628      	mov	r0, r5
  401636:	4b51      	ldr	r3, [pc, #324]	; (40177c <xTaskGenericCreate+0x1d4>)
  401638:	4798      	blx	r3
  40163a:	e095      	b.n	401768 <xTaskGenericCreate+0x1c0>
  40163c:	4633      	mov	r3, r6
  40163e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401642:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401644:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401648:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40164c:	7819      	ldrb	r1, [r3, #0]
  40164e:	b109      	cbz	r1, 401654 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401650:	42b3      	cmp	r3, r6
  401652:	d1f7      	bne.n	401644 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401654:	f04f 0800 	mov.w	r8, #0
  401658:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  40165c:	463e      	mov	r6, r7
  40165e:	2f04      	cmp	r7, #4
  401660:	bf28      	it	cs
  401662:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401664:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401666:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401668:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40166c:	f104 0904 	add.w	r9, r4, #4
  401670:	4648      	mov	r0, r9
  401672:	f8df b154 	ldr.w	fp, [pc, #340]	; 4017c8 <xTaskGenericCreate+0x220>
  401676:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401678:	f104 0018 	add.w	r0, r4, #24
  40167c:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40167e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401680:	f1c6 0605 	rsb	r6, r6, #5
  401684:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401686:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401688:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40168c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401690:	4628      	mov	r0, r5
  401692:	9901      	ldr	r1, [sp, #4]
  401694:	9a00      	ldr	r2, [sp, #0]
  401696:	4b3a      	ldr	r3, [pc, #232]	; (401780 <xTaskGenericCreate+0x1d8>)
  401698:	4798      	blx	r3
  40169a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40169c:	f1ba 0f00 	cmp.w	sl, #0
  4016a0:	d001      	beq.n	4016a6 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4016a2:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4016a6:	4b37      	ldr	r3, [pc, #220]	; (401784 <xTaskGenericCreate+0x1dc>)
  4016a8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4016aa:	4a37      	ldr	r2, [pc, #220]	; (401788 <xTaskGenericCreate+0x1e0>)
  4016ac:	6813      	ldr	r3, [r2, #0]
  4016ae:	3301      	adds	r3, #1
  4016b0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4016b2:	4b36      	ldr	r3, [pc, #216]	; (40178c <xTaskGenericCreate+0x1e4>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	bb0b      	cbnz	r3, 4016fc <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4016b8:	4b34      	ldr	r3, [pc, #208]	; (40178c <xTaskGenericCreate+0x1e4>)
  4016ba:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4016bc:	6813      	ldr	r3, [r2, #0]
  4016be:	2b01      	cmp	r3, #1
  4016c0:	d126      	bne.n	401710 <xTaskGenericCreate+0x168>
  4016c2:	4d33      	ldr	r5, [pc, #204]	; (401790 <xTaskGenericCreate+0x1e8>)
  4016c4:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4016c8:	4e32      	ldr	r6, [pc, #200]	; (401794 <xTaskGenericCreate+0x1ec>)
  4016ca:	4628      	mov	r0, r5
  4016cc:	47b0      	blx	r6
  4016ce:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4016d0:	4545      	cmp	r5, r8
  4016d2:	d1fa      	bne.n	4016ca <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  4016d4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4017cc <xTaskGenericCreate+0x224>
  4016d8:	4640      	mov	r0, r8
  4016da:	4d2e      	ldr	r5, [pc, #184]	; (401794 <xTaskGenericCreate+0x1ec>)
  4016dc:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4016de:	4e2e      	ldr	r6, [pc, #184]	; (401798 <xTaskGenericCreate+0x1f0>)
  4016e0:	4630      	mov	r0, r6
  4016e2:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4016e4:	482d      	ldr	r0, [pc, #180]	; (40179c <xTaskGenericCreate+0x1f4>)
  4016e6:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  4016e8:	482d      	ldr	r0, [pc, #180]	; (4017a0 <xTaskGenericCreate+0x1f8>)
  4016ea:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4016ec:	482d      	ldr	r0, [pc, #180]	; (4017a4 <xTaskGenericCreate+0x1fc>)
  4016ee:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4016f0:	4b2d      	ldr	r3, [pc, #180]	; (4017a8 <xTaskGenericCreate+0x200>)
  4016f2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4016f6:	4b2d      	ldr	r3, [pc, #180]	; (4017ac <xTaskGenericCreate+0x204>)
  4016f8:	601e      	str	r6, [r3, #0]
  4016fa:	e009      	b.n	401710 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4016fc:	4b2c      	ldr	r3, [pc, #176]	; (4017b0 <xTaskGenericCreate+0x208>)
  4016fe:	681b      	ldr	r3, [r3, #0]
  401700:	b933      	cbnz	r3, 401710 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401702:	4b22      	ldr	r3, [pc, #136]	; (40178c <xTaskGenericCreate+0x1e4>)
  401704:	681b      	ldr	r3, [r3, #0]
  401706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401708:	429f      	cmp	r7, r3
  40170a:	d301      	bcc.n	401710 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40170c:	4b1f      	ldr	r3, [pc, #124]	; (40178c <xTaskGenericCreate+0x1e4>)
  40170e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401710:	4a28      	ldr	r2, [pc, #160]	; (4017b4 <xTaskGenericCreate+0x20c>)
  401712:	6813      	ldr	r3, [r2, #0]
  401714:	3301      	adds	r3, #1
  401716:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401718:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40171a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40171c:	4926      	ldr	r1, [pc, #152]	; (4017b8 <xTaskGenericCreate+0x210>)
  40171e:	680b      	ldr	r3, [r1, #0]
  401720:	2201      	movs	r2, #1
  401722:	4082      	lsls	r2, r0
  401724:	4313      	orrs	r3, r2
  401726:	600b      	str	r3, [r1, #0]
  401728:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40172c:	4b18      	ldr	r3, [pc, #96]	; (401790 <xTaskGenericCreate+0x1e8>)
  40172e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401732:	4649      	mov	r1, r9
  401734:	4b21      	ldr	r3, [pc, #132]	; (4017bc <xTaskGenericCreate+0x214>)
  401736:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401738:	4b21      	ldr	r3, [pc, #132]	; (4017c0 <xTaskGenericCreate+0x218>)
  40173a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40173c:	4b1c      	ldr	r3, [pc, #112]	; (4017b0 <xTaskGenericCreate+0x208>)
  40173e:	681b      	ldr	r3, [r3, #0]
  401740:	b173      	cbz	r3, 401760 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401742:	4b12      	ldr	r3, [pc, #72]	; (40178c <xTaskGenericCreate+0x1e4>)
  401744:	681b      	ldr	r3, [r3, #0]
  401746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401748:	429f      	cmp	r7, r3
  40174a:	d90b      	bls.n	401764 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40174c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401750:	4b1c      	ldr	r3, [pc, #112]	; (4017c4 <xTaskGenericCreate+0x21c>)
  401752:	601a      	str	r2, [r3, #0]
  401754:	f3bf 8f4f 	dsb	sy
  401758:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40175c:	2001      	movs	r0, #1
  40175e:	e005      	b.n	40176c <xTaskGenericCreate+0x1c4>
  401760:	2001      	movs	r0, #1
  401762:	e003      	b.n	40176c <xTaskGenericCreate+0x1c4>
  401764:	2001      	movs	r0, #1
  401766:	e001      	b.n	40176c <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401768:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40176c:	b003      	add	sp, #12
  40176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401772:	bf00      	nop
  401774:	00400c15 	.word	0x00400c15
  401778:	0040e765 	.word	0x0040e765
  40177c:	00400c75 	.word	0x00400c75
  401780:	00400975 	.word	0x00400975
  401784:	004009bd 	.word	0x004009bd
  401788:	2040c228 	.word	0x2040c228
  40178c:	2040c200 	.word	0x2040c200
  401790:	2040c188 	.word	0x2040c188
  401794:	00400c91 	.word	0x00400c91
  401798:	2040c22c 	.word	0x2040c22c
  40179c:	2040c204 	.word	0x2040c204
  4017a0:	2040c1ec 	.word	0x2040c1ec
  4017a4:	2040c240 	.word	0x2040c240
  4017a8:	2040c160 	.word	0x2040c160
  4017ac:	2040c180 	.word	0x2040c180
  4017b0:	2040c164 	.word	0x2040c164
  4017b4:	2040c224 	.word	0x2040c224
  4017b8:	2040c254 	.word	0x2040c254
  4017bc:	00400cb1 	.word	0x00400cb1
  4017c0:	00400a09 	.word	0x00400a09
  4017c4:	e000ed04 	.word	0xe000ed04
  4017c8:	00400ca9 	.word	0x00400ca9
  4017cc:	2040c16c 	.word	0x2040c16c

004017d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  4017d0:	b510      	push	{r4, lr}
  4017d2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4017d4:	2300      	movs	r3, #0
  4017d6:	9300      	str	r3, [sp, #0]
  4017d8:	9301      	str	r3, [sp, #4]
  4017da:	9302      	str	r3, [sp, #8]
  4017dc:	9303      	str	r3, [sp, #12]
  4017de:	4818      	ldr	r0, [pc, #96]	; (401840 <vTaskStartScheduler+0x70>)
  4017e0:	4918      	ldr	r1, [pc, #96]	; (401844 <vTaskStartScheduler+0x74>)
  4017e2:	2282      	movs	r2, #130	; 0x82
  4017e4:	4c18      	ldr	r4, [pc, #96]	; (401848 <vTaskStartScheduler+0x78>)
  4017e6:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4017e8:	2801      	cmp	r0, #1
  4017ea:	d11a      	bne.n	401822 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  4017ec:	4b17      	ldr	r3, [pc, #92]	; (40184c <vTaskStartScheduler+0x7c>)
  4017ee:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  4017f0:	2801      	cmp	r0, #1
  4017f2:	d116      	bne.n	401822 <vTaskStartScheduler+0x52>
  4017f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017f8:	b672      	cpsid	i
  4017fa:	f383 8811 	msr	BASEPRI, r3
  4017fe:	f3bf 8f6f 	isb	sy
  401802:	f3bf 8f4f 	dsb	sy
  401806:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401808:	f04f 32ff 	mov.w	r2, #4294967295
  40180c:	4b10      	ldr	r3, [pc, #64]	; (401850 <vTaskStartScheduler+0x80>)
  40180e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401810:	2201      	movs	r2, #1
  401812:	4b10      	ldr	r3, [pc, #64]	; (401854 <vTaskStartScheduler+0x84>)
  401814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401816:	2200      	movs	r2, #0
  401818:	4b0f      	ldr	r3, [pc, #60]	; (401858 <vTaskStartScheduler+0x88>)
  40181a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40181c:	4b0f      	ldr	r3, [pc, #60]	; (40185c <vTaskStartScheduler+0x8c>)
  40181e:	4798      	blx	r3
  401820:	e00b      	b.n	40183a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401822:	b950      	cbnz	r0, 40183a <vTaskStartScheduler+0x6a>
  401824:	f04f 0380 	mov.w	r3, #128	; 0x80
  401828:	b672      	cpsid	i
  40182a:	f383 8811 	msr	BASEPRI, r3
  40182e:	f3bf 8f6f 	isb	sy
  401832:	f3bf 8f4f 	dsb	sy
  401836:	b662      	cpsie	i
  401838:	e7fe      	b.n	401838 <vTaskStartScheduler+0x68>
	}
}
  40183a:	b004      	add	sp, #16
  40183c:	bd10      	pop	{r4, pc}
  40183e:	bf00      	nop
  401840:	00401b59 	.word	0x00401b59
  401844:	0040dad0 	.word	0x0040dad0
  401848:	004015a9 	.word	0x004015a9
  40184c:	0040215d 	.word	0x0040215d
  401850:	2040c220 	.word	0x2040c220
  401854:	2040c164 	.word	0x2040c164
  401858:	2040c21c 	.word	0x2040c21c
  40185c:	00400aed 	.word	0x00400aed

00401860 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401860:	4a02      	ldr	r2, [pc, #8]	; (40186c <vTaskSuspendAll+0xc>)
  401862:	6813      	ldr	r3, [r2, #0]
  401864:	3301      	adds	r3, #1
  401866:	6013      	str	r3, [r2, #0]
  401868:	4770      	bx	lr
  40186a:	bf00      	nop
  40186c:	2040c218 	.word	0x2040c218

00401870 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401870:	4b01      	ldr	r3, [pc, #4]	; (401878 <xTaskGetTickCount+0x8>)
  401872:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401874:	4770      	bx	lr
  401876:	bf00      	nop
  401878:	2040c21c 	.word	0x2040c21c

0040187c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  40187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401880:	4b3d      	ldr	r3, [pc, #244]	; (401978 <xTaskIncrementTick+0xfc>)
  401882:	681b      	ldr	r3, [r3, #0]
  401884:	2b00      	cmp	r3, #0
  401886:	d16a      	bne.n	40195e <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401888:	4b3c      	ldr	r3, [pc, #240]	; (40197c <xTaskIncrementTick+0x100>)
  40188a:	681a      	ldr	r2, [r3, #0]
  40188c:	3201      	adds	r2, #1
  40188e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401890:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401892:	b9d6      	cbnz	r6, 4018ca <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401894:	4b3a      	ldr	r3, [pc, #232]	; (401980 <xTaskIncrementTick+0x104>)
  401896:	681b      	ldr	r3, [r3, #0]
  401898:	681b      	ldr	r3, [r3, #0]
  40189a:	b153      	cbz	r3, 4018b2 <xTaskIncrementTick+0x36>
  40189c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018a0:	b672      	cpsid	i
  4018a2:	f383 8811 	msr	BASEPRI, r3
  4018a6:	f3bf 8f6f 	isb	sy
  4018aa:	f3bf 8f4f 	dsb	sy
  4018ae:	b662      	cpsie	i
  4018b0:	e7fe      	b.n	4018b0 <xTaskIncrementTick+0x34>
  4018b2:	4a33      	ldr	r2, [pc, #204]	; (401980 <xTaskIncrementTick+0x104>)
  4018b4:	6811      	ldr	r1, [r2, #0]
  4018b6:	4b33      	ldr	r3, [pc, #204]	; (401984 <xTaskIncrementTick+0x108>)
  4018b8:	6818      	ldr	r0, [r3, #0]
  4018ba:	6010      	str	r0, [r2, #0]
  4018bc:	6019      	str	r1, [r3, #0]
  4018be:	4a32      	ldr	r2, [pc, #200]	; (401988 <xTaskIncrementTick+0x10c>)
  4018c0:	6813      	ldr	r3, [r2, #0]
  4018c2:	3301      	adds	r3, #1
  4018c4:	6013      	str	r3, [r2, #0]
  4018c6:	4b31      	ldr	r3, [pc, #196]	; (40198c <xTaskIncrementTick+0x110>)
  4018c8:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  4018ca:	4b31      	ldr	r3, [pc, #196]	; (401990 <xTaskIncrementTick+0x114>)
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	429e      	cmp	r6, r3
  4018d0:	d201      	bcs.n	4018d6 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4018d2:	2400      	movs	r4, #0
  4018d4:	e037      	b.n	401946 <xTaskIncrementTick+0xca>
  4018d6:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4018d8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401980 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4018dc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4019ac <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  4018e0:	4f2c      	ldr	r7, [pc, #176]	; (401994 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4018e2:	f8d9 3000 	ldr.w	r3, [r9]
  4018e6:	681b      	ldr	r3, [r3, #0]
  4018e8:	b923      	cbnz	r3, 4018f4 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  4018ea:	f04f 32ff 	mov.w	r2, #4294967295
  4018ee:	4b28      	ldr	r3, [pc, #160]	; (401990 <xTaskIncrementTick+0x114>)
  4018f0:	601a      	str	r2, [r3, #0]
						break;
  4018f2:	e028      	b.n	401946 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4018f4:	f8d9 3000 	ldr.w	r3, [r9]
  4018f8:	68db      	ldr	r3, [r3, #12]
  4018fa:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4018fc:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  4018fe:	429e      	cmp	r6, r3
  401900:	d202      	bcs.n	401908 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401902:	4a23      	ldr	r2, [pc, #140]	; (401990 <xTaskIncrementTick+0x114>)
  401904:	6013      	str	r3, [r2, #0]
							break;
  401906:	e01e      	b.n	401946 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401908:	f105 0a04 	add.w	sl, r5, #4
  40190c:	4650      	mov	r0, sl
  40190e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401910:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401912:	b113      	cbz	r3, 40191a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401914:	f105 0018 	add.w	r0, r5, #24
  401918:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40191a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40191c:	683b      	ldr	r3, [r7, #0]
  40191e:	2201      	movs	r2, #1
  401920:	4082      	lsls	r2, r0
  401922:	4313      	orrs	r3, r2
  401924:	603b      	str	r3, [r7, #0]
  401926:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40192a:	4b1b      	ldr	r3, [pc, #108]	; (401998 <xTaskIncrementTick+0x11c>)
  40192c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401930:	4651      	mov	r1, sl
  401932:	4b1a      	ldr	r3, [pc, #104]	; (40199c <xTaskIncrementTick+0x120>)
  401934:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401936:	4b1a      	ldr	r3, [pc, #104]	; (4019a0 <xTaskIncrementTick+0x124>)
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  40193e:	429a      	cmp	r2, r3
  401940:	bf28      	it	cs
  401942:	2401      	movcs	r4, #1
  401944:	e7cd      	b.n	4018e2 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401946:	4b16      	ldr	r3, [pc, #88]	; (4019a0 <xTaskIncrementTick+0x124>)
  401948:	681b      	ldr	r3, [r3, #0]
  40194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40194c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401950:	4a11      	ldr	r2, [pc, #68]	; (401998 <xTaskIncrementTick+0x11c>)
  401952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401956:	2b02      	cmp	r3, #2
  401958:	bf28      	it	cs
  40195a:	2401      	movcs	r4, #1
  40195c:	e004      	b.n	401968 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  40195e:	4a11      	ldr	r2, [pc, #68]	; (4019a4 <xTaskIncrementTick+0x128>)
  401960:	6813      	ldr	r3, [r2, #0]
  401962:	3301      	adds	r3, #1
  401964:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401966:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401968:	4b0f      	ldr	r3, [pc, #60]	; (4019a8 <xTaskIncrementTick+0x12c>)
  40196a:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  40196c:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  40196e:	bf0c      	ite	eq
  401970:	4620      	moveq	r0, r4
  401972:	2001      	movne	r0, #1
  401974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401978:	2040c218 	.word	0x2040c218
  40197c:	2040c21c 	.word	0x2040c21c
  401980:	2040c160 	.word	0x2040c160
  401984:	2040c180 	.word	0x2040c180
  401988:	2040c15c 	.word	0x2040c15c
  40198c:	00401525 	.word	0x00401525
  401990:	2040c220 	.word	0x2040c220
  401994:	2040c254 	.word	0x2040c254
  401998:	2040c188 	.word	0x2040c188
  40199c:	00400cb1 	.word	0x00400cb1
  4019a0:	2040c200 	.word	0x2040c200
  4019a4:	2040c184 	.word	0x2040c184
  4019a8:	2040c258 	.word	0x2040c258
  4019ac:	00400cfd 	.word	0x00400cfd

004019b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  4019b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4019b4:	4b36      	ldr	r3, [pc, #216]	; (401a90 <xTaskResumeAll+0xe0>)
  4019b6:	681b      	ldr	r3, [r3, #0]
  4019b8:	b953      	cbnz	r3, 4019d0 <xTaskResumeAll+0x20>
  4019ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019be:	b672      	cpsid	i
  4019c0:	f383 8811 	msr	BASEPRI, r3
  4019c4:	f3bf 8f6f 	isb	sy
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	b662      	cpsie	i
  4019ce:	e7fe      	b.n	4019ce <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4019d0:	4b30      	ldr	r3, [pc, #192]	; (401a94 <xTaskResumeAll+0xe4>)
  4019d2:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4019d4:	4b2e      	ldr	r3, [pc, #184]	; (401a90 <xTaskResumeAll+0xe0>)
  4019d6:	681a      	ldr	r2, [r3, #0]
  4019d8:	3a01      	subs	r2, #1
  4019da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4019dc:	681b      	ldr	r3, [r3, #0]
  4019de:	2b00      	cmp	r3, #0
  4019e0:	d14d      	bne.n	401a7e <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4019e2:	4b2d      	ldr	r3, [pc, #180]	; (401a98 <xTaskResumeAll+0xe8>)
  4019e4:	681b      	ldr	r3, [r3, #0]
  4019e6:	bb0b      	cbnz	r3, 401a2c <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4019e8:	2400      	movs	r4, #0
  4019ea:	e04b      	b.n	401a84 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4019ec:	68fb      	ldr	r3, [r7, #12]
  4019ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4019f0:	f104 0018 	add.w	r0, r4, #24
  4019f4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4019f6:	f104 0804 	add.w	r8, r4, #4
  4019fa:	4640      	mov	r0, r8
  4019fc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4019fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a00:	682b      	ldr	r3, [r5, #0]
  401a02:	2201      	movs	r2, #1
  401a04:	4082      	lsls	r2, r0
  401a06:	4313      	orrs	r3, r2
  401a08:	602b      	str	r3, [r5, #0]
  401a0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a0e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401a12:	4641      	mov	r1, r8
  401a14:	4b21      	ldr	r3, [pc, #132]	; (401a9c <xTaskResumeAll+0xec>)
  401a16:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401a18:	4b21      	ldr	r3, [pc, #132]	; (401aa0 <xTaskResumeAll+0xf0>)
  401a1a:	681b      	ldr	r3, [r3, #0]
  401a1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a20:	429a      	cmp	r2, r3
  401a22:	d308      	bcc.n	401a36 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401a24:	2201      	movs	r2, #1
  401a26:	4b1f      	ldr	r3, [pc, #124]	; (401aa4 <xTaskResumeAll+0xf4>)
  401a28:	601a      	str	r2, [r3, #0]
  401a2a:	e004      	b.n	401a36 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401a2c:	4f1e      	ldr	r7, [pc, #120]	; (401aa8 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401a2e:	4e1f      	ldr	r6, [pc, #124]	; (401aac <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401a30:	4d1f      	ldr	r5, [pc, #124]	; (401ab0 <xTaskResumeAll+0x100>)
  401a32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401ac4 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401a36:	683b      	ldr	r3, [r7, #0]
  401a38:	2b00      	cmp	r3, #0
  401a3a:	d1d7      	bne.n	4019ec <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401a3c:	4b1d      	ldr	r3, [pc, #116]	; (401ab4 <xTaskResumeAll+0x104>)
  401a3e:	681b      	ldr	r3, [r3, #0]
  401a40:	b17b      	cbz	r3, 401a62 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401a42:	4b1c      	ldr	r3, [pc, #112]	; (401ab4 <xTaskResumeAll+0x104>)
  401a44:	681b      	ldr	r3, [r3, #0]
  401a46:	b163      	cbz	r3, 401a62 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401a48:	4e1b      	ldr	r6, [pc, #108]	; (401ab8 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401a4a:	4d16      	ldr	r5, [pc, #88]	; (401aa4 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401a4c:	4c19      	ldr	r4, [pc, #100]	; (401ab4 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401a4e:	47b0      	blx	r6
  401a50:	b108      	cbz	r0, 401a56 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401a52:	2301      	movs	r3, #1
  401a54:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401a56:	6823      	ldr	r3, [r4, #0]
  401a58:	3b01      	subs	r3, #1
  401a5a:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401a5c:	6823      	ldr	r3, [r4, #0]
  401a5e:	2b00      	cmp	r3, #0
  401a60:	d1f5      	bne.n	401a4e <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401a62:	4b10      	ldr	r3, [pc, #64]	; (401aa4 <xTaskResumeAll+0xf4>)
  401a64:	681b      	ldr	r3, [r3, #0]
  401a66:	2b01      	cmp	r3, #1
  401a68:	d10b      	bne.n	401a82 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a6e:	4b13      	ldr	r3, [pc, #76]	; (401abc <xTaskResumeAll+0x10c>)
  401a70:	601a      	str	r2, [r3, #0]
  401a72:	f3bf 8f4f 	dsb	sy
  401a76:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401a7a:	2401      	movs	r4, #1
  401a7c:	e002      	b.n	401a84 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401a7e:	2400      	movs	r4, #0
  401a80:	e000      	b.n	401a84 <xTaskResumeAll+0xd4>
  401a82:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401a84:	4b0e      	ldr	r3, [pc, #56]	; (401ac0 <xTaskResumeAll+0x110>)
  401a86:	4798      	blx	r3

	return xAlreadyYielded;
}
  401a88:	4620      	mov	r0, r4
  401a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a8e:	bf00      	nop
  401a90:	2040c218 	.word	0x2040c218
  401a94:	004009bd 	.word	0x004009bd
  401a98:	2040c228 	.word	0x2040c228
  401a9c:	00400cb1 	.word	0x00400cb1
  401aa0:	2040c200 	.word	0x2040c200
  401aa4:	2040c258 	.word	0x2040c258
  401aa8:	2040c204 	.word	0x2040c204
  401aac:	00400cfd 	.word	0x00400cfd
  401ab0:	2040c254 	.word	0x2040c254
  401ab4:	2040c184 	.word	0x2040c184
  401ab8:	0040187d 	.word	0x0040187d
  401abc:	e000ed04 	.word	0xe000ed04
  401ac0:	00400a09 	.word	0x00400a09
  401ac4:	2040c188 	.word	0x2040c188

00401ac8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401ac8:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401aca:	2800      	cmp	r0, #0
  401acc:	d029      	beq.n	401b22 <vTaskDelay+0x5a>
  401ace:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401ad0:	4b18      	ldr	r3, [pc, #96]	; (401b34 <vTaskDelay+0x6c>)
  401ad2:	681b      	ldr	r3, [r3, #0]
  401ad4:	b153      	cbz	r3, 401aec <vTaskDelay+0x24>
  401ad6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ada:	b672      	cpsid	i
  401adc:	f383 8811 	msr	BASEPRI, r3
  401ae0:	f3bf 8f6f 	isb	sy
  401ae4:	f3bf 8f4f 	dsb	sy
  401ae8:	b662      	cpsie	i
  401aea:	e7fe      	b.n	401aea <vTaskDelay+0x22>
			vTaskSuspendAll();
  401aec:	4b12      	ldr	r3, [pc, #72]	; (401b38 <vTaskDelay+0x70>)
  401aee:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401af0:	4b12      	ldr	r3, [pc, #72]	; (401b3c <vTaskDelay+0x74>)
  401af2:	681b      	ldr	r3, [r3, #0]
  401af4:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401af6:	4b12      	ldr	r3, [pc, #72]	; (401b40 <vTaskDelay+0x78>)
  401af8:	6818      	ldr	r0, [r3, #0]
  401afa:	3004      	adds	r0, #4
  401afc:	4b11      	ldr	r3, [pc, #68]	; (401b44 <vTaskDelay+0x7c>)
  401afe:	4798      	blx	r3
  401b00:	b948      	cbnz	r0, 401b16 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401b02:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <vTaskDelay+0x78>)
  401b04:	681a      	ldr	r2, [r3, #0]
  401b06:	4910      	ldr	r1, [pc, #64]	; (401b48 <vTaskDelay+0x80>)
  401b08:	680b      	ldr	r3, [r1, #0]
  401b0a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401b0c:	2201      	movs	r2, #1
  401b0e:	4082      	lsls	r2, r0
  401b10:	ea23 0302 	bic.w	r3, r3, r2
  401b14:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b16:	4620      	mov	r0, r4
  401b18:	4b0c      	ldr	r3, [pc, #48]	; (401b4c <vTaskDelay+0x84>)
  401b1a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401b1c:	4b0c      	ldr	r3, [pc, #48]	; (401b50 <vTaskDelay+0x88>)
  401b1e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401b20:	b938      	cbnz	r0, 401b32 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b26:	4b0b      	ldr	r3, [pc, #44]	; (401b54 <vTaskDelay+0x8c>)
  401b28:	601a      	str	r2, [r3, #0]
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	f3bf 8f6f 	isb	sy
  401b32:	bd10      	pop	{r4, pc}
  401b34:	2040c218 	.word	0x2040c218
  401b38:	00401861 	.word	0x00401861
  401b3c:	2040c21c 	.word	0x2040c21c
  401b40:	2040c200 	.word	0x2040c200
  401b44:	00400cfd 	.word	0x00400cfd
  401b48:	2040c254 	.word	0x2040c254
  401b4c:	00401551 	.word	0x00401551
  401b50:	004019b1 	.word	0x004019b1
  401b54:	e000ed04 	.word	0xe000ed04

00401b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401b58:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401b5a:	4d18      	ldr	r5, [pc, #96]	; (401bbc <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401b5c:	4e18      	ldr	r6, [pc, #96]	; (401bc0 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401b5e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401be0 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401b62:	4f18      	ldr	r7, [pc, #96]	; (401bc4 <prvIdleTask+0x6c>)
  401b64:	e019      	b.n	401b9a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401b66:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401b68:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401b6a:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401b6c:	b1ac      	cbz	r4, 401b9a <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401b6e:	4b16      	ldr	r3, [pc, #88]	; (401bc8 <prvIdleTask+0x70>)
  401b70:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401b72:	68f3      	ldr	r3, [r6, #12]
  401b74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b76:	1d20      	adds	r0, r4, #4
  401b78:	4b14      	ldr	r3, [pc, #80]	; (401bcc <prvIdleTask+0x74>)
  401b7a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401b7c:	4a14      	ldr	r2, [pc, #80]	; (401bd0 <prvIdleTask+0x78>)
  401b7e:	6813      	ldr	r3, [r2, #0]
  401b80:	3b01      	subs	r3, #1
  401b82:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401b84:	682b      	ldr	r3, [r5, #0]
  401b86:	3b01      	subs	r3, #1
  401b88:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401b8a:	4b12      	ldr	r3, [pc, #72]	; (401bd4 <prvIdleTask+0x7c>)
  401b8c:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401b8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401b90:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401be4 <prvIdleTask+0x8c>
  401b94:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401b96:	4620      	mov	r0, r4
  401b98:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401b9a:	682b      	ldr	r3, [r5, #0]
  401b9c:	2b00      	cmp	r3, #0
  401b9e:	d1e2      	bne.n	401b66 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401ba0:	4b0d      	ldr	r3, [pc, #52]	; (401bd8 <prvIdleTask+0x80>)
  401ba2:	681b      	ldr	r3, [r3, #0]
  401ba4:	2b01      	cmp	r3, #1
  401ba6:	d9f8      	bls.n	401b9a <prvIdleTask+0x42>
			{
				taskYIELD();
  401ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bac:	4b0b      	ldr	r3, [pc, #44]	; (401bdc <prvIdleTask+0x84>)
  401bae:	601a      	str	r2, [r3, #0]
  401bb0:	f3bf 8f4f 	dsb	sy
  401bb4:	f3bf 8f6f 	isb	sy
  401bb8:	e7d1      	b.n	401b5e <prvIdleTask+0x6>
  401bba:	bf00      	nop
  401bbc:	2040c168 	.word	0x2040c168
  401bc0:	2040c1ec 	.word	0x2040c1ec
  401bc4:	004019b1 	.word	0x004019b1
  401bc8:	004009bd 	.word	0x004009bd
  401bcc:	00400cfd 	.word	0x00400cfd
  401bd0:	2040c228 	.word	0x2040c228
  401bd4:	00400a09 	.word	0x00400a09
  401bd8:	2040c188 	.word	0x2040c188
  401bdc:	e000ed04 	.word	0xe000ed04
  401be0:	00401861 	.word	0x00401861
  401be4:	00400c75 	.word	0x00400c75

00401be8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401be8:	4b20      	ldr	r3, [pc, #128]	; (401c6c <vTaskSwitchContext+0x84>)
  401bea:	681b      	ldr	r3, [r3, #0]
  401bec:	b11b      	cbz	r3, 401bf6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401bee:	2201      	movs	r2, #1
  401bf0:	4b1f      	ldr	r3, [pc, #124]	; (401c70 <vTaskSwitchContext+0x88>)
  401bf2:	601a      	str	r2, [r3, #0]
  401bf4:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401bf6:	2200      	movs	r2, #0
  401bf8:	4b1d      	ldr	r3, [pc, #116]	; (401c70 <vTaskSwitchContext+0x88>)
  401bfa:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401bfc:	4b1d      	ldr	r3, [pc, #116]	; (401c74 <vTaskSwitchContext+0x8c>)
  401bfe:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401c00:	fab3 f383 	clz	r3, r3
  401c04:	b2db      	uxtb	r3, r3
  401c06:	f1c3 031f 	rsb	r3, r3, #31
  401c0a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c0e:	4a1a      	ldr	r2, [pc, #104]	; (401c78 <vTaskSwitchContext+0x90>)
  401c10:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401c14:	b952      	cbnz	r2, 401c2c <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401c16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c1a:	b672      	cpsid	i
  401c1c:	f383 8811 	msr	BASEPRI, r3
  401c20:	f3bf 8f6f 	isb	sy
  401c24:	f3bf 8f4f 	dsb	sy
  401c28:	b662      	cpsie	i
  401c2a:	e7fe      	b.n	401c2a <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401c2c:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401c2e:	4a12      	ldr	r2, [pc, #72]	; (401c78 <vTaskSwitchContext+0x90>)
  401c30:	0099      	lsls	r1, r3, #2
  401c32:	18c8      	adds	r0, r1, r3
  401c34:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401c38:	6844      	ldr	r4, [r0, #4]
  401c3a:	6864      	ldr	r4, [r4, #4]
  401c3c:	6044      	str	r4, [r0, #4]
  401c3e:	4602      	mov	r2, r0
  401c40:	3208      	adds	r2, #8
  401c42:	4294      	cmp	r4, r2
  401c44:	d106      	bne.n	401c54 <vTaskSwitchContext+0x6c>
  401c46:	6860      	ldr	r0, [r4, #4]
  401c48:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c4c:	4a0a      	ldr	r2, [pc, #40]	; (401c78 <vTaskSwitchContext+0x90>)
  401c4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401c52:	6050      	str	r0, [r2, #4]
  401c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401c58:	4a07      	ldr	r2, [pc, #28]	; (401c78 <vTaskSwitchContext+0x90>)
  401c5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401c5e:	685b      	ldr	r3, [r3, #4]
  401c60:	68da      	ldr	r2, [r3, #12]
  401c62:	4b06      	ldr	r3, [pc, #24]	; (401c7c <vTaskSwitchContext+0x94>)
  401c64:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401c66:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c6a:	4770      	bx	lr
  401c6c:	2040c218 	.word	0x2040c218
  401c70:	2040c258 	.word	0x2040c258
  401c74:	2040c254 	.word	0x2040c254
  401c78:	2040c188 	.word	0x2040c188
  401c7c:	2040c200 	.word	0x2040c200

00401c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401c80:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401c82:	b950      	cbnz	r0, 401c9a <vTaskPlaceOnEventList+0x1a>
  401c84:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c88:	b672      	cpsid	i
  401c8a:	f383 8811 	msr	BASEPRI, r3
  401c8e:	f3bf 8f6f 	isb	sy
  401c92:	f3bf 8f4f 	dsb	sy
  401c96:	b662      	cpsie	i
  401c98:	e7fe      	b.n	401c98 <vTaskPlaceOnEventList+0x18>
  401c9a:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401c9c:	4d11      	ldr	r5, [pc, #68]	; (401ce4 <vTaskPlaceOnEventList+0x64>)
  401c9e:	6829      	ldr	r1, [r5, #0]
  401ca0:	3118      	adds	r1, #24
  401ca2:	4b11      	ldr	r3, [pc, #68]	; (401ce8 <vTaskPlaceOnEventList+0x68>)
  401ca4:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ca6:	6828      	ldr	r0, [r5, #0]
  401ca8:	3004      	adds	r0, #4
  401caa:	4b10      	ldr	r3, [pc, #64]	; (401cec <vTaskPlaceOnEventList+0x6c>)
  401cac:	4798      	blx	r3
  401cae:	b940      	cbnz	r0, 401cc2 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401cb0:	682a      	ldr	r2, [r5, #0]
  401cb2:	490f      	ldr	r1, [pc, #60]	; (401cf0 <vTaskPlaceOnEventList+0x70>)
  401cb4:	680b      	ldr	r3, [r1, #0]
  401cb6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401cb8:	2201      	movs	r2, #1
  401cba:	4082      	lsls	r2, r0
  401cbc:	ea23 0302 	bic.w	r3, r3, r2
  401cc0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401cc2:	f1b4 3fff 	cmp.w	r4, #4294967295
  401cc6:	d106      	bne.n	401cd6 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401cc8:	4b06      	ldr	r3, [pc, #24]	; (401ce4 <vTaskPlaceOnEventList+0x64>)
  401cca:	6819      	ldr	r1, [r3, #0]
  401ccc:	4809      	ldr	r0, [pc, #36]	; (401cf4 <vTaskPlaceOnEventList+0x74>)
  401cce:	3104      	adds	r1, #4
  401cd0:	4b09      	ldr	r3, [pc, #36]	; (401cf8 <vTaskPlaceOnEventList+0x78>)
  401cd2:	4798      	blx	r3
  401cd4:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401cd6:	4b09      	ldr	r3, [pc, #36]	; (401cfc <vTaskPlaceOnEventList+0x7c>)
  401cd8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401cda:	4420      	add	r0, r4
  401cdc:	4b08      	ldr	r3, [pc, #32]	; (401d00 <vTaskPlaceOnEventList+0x80>)
  401cde:	4798      	blx	r3
  401ce0:	bd38      	pop	{r3, r4, r5, pc}
  401ce2:	bf00      	nop
  401ce4:	2040c200 	.word	0x2040c200
  401ce8:	00400cc9 	.word	0x00400cc9
  401cec:	00400cfd 	.word	0x00400cfd
  401cf0:	2040c254 	.word	0x2040c254
  401cf4:	2040c240 	.word	0x2040c240
  401cf8:	00400cb1 	.word	0x00400cb1
  401cfc:	2040c21c 	.word	0x2040c21c
  401d00:	00401551 	.word	0x00401551

00401d04 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401d04:	b950      	cbnz	r0, 401d1c <vTaskPlaceOnEventListRestricted+0x18>
  401d06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d0a:	b672      	cpsid	i
  401d0c:	f383 8811 	msr	BASEPRI, r3
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	f3bf 8f4f 	dsb	sy
  401d18:	b662      	cpsie	i
  401d1a:	e7fe      	b.n	401d1a <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401d1c:	b570      	push	{r4, r5, r6, lr}
  401d1e:	4615      	mov	r5, r2
  401d20:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401d22:	4e11      	ldr	r6, [pc, #68]	; (401d68 <vTaskPlaceOnEventListRestricted+0x64>)
  401d24:	6831      	ldr	r1, [r6, #0]
  401d26:	3118      	adds	r1, #24
  401d28:	4b10      	ldr	r3, [pc, #64]	; (401d6c <vTaskPlaceOnEventListRestricted+0x68>)
  401d2a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d2c:	6830      	ldr	r0, [r6, #0]
  401d2e:	3004      	adds	r0, #4
  401d30:	4b0f      	ldr	r3, [pc, #60]	; (401d70 <vTaskPlaceOnEventListRestricted+0x6c>)
  401d32:	4798      	blx	r3
  401d34:	b940      	cbnz	r0, 401d48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d36:	6832      	ldr	r2, [r6, #0]
  401d38:	490e      	ldr	r1, [pc, #56]	; (401d74 <vTaskPlaceOnEventListRestricted+0x70>)
  401d3a:	680b      	ldr	r3, [r1, #0]
  401d3c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d3e:	2201      	movs	r2, #1
  401d40:	4082      	lsls	r2, r0
  401d42:	ea23 0302 	bic.w	r3, r3, r2
  401d46:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401d48:	2d01      	cmp	r5, #1
  401d4a:	d106      	bne.n	401d5a <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d4c:	4b06      	ldr	r3, [pc, #24]	; (401d68 <vTaskPlaceOnEventListRestricted+0x64>)
  401d4e:	6819      	ldr	r1, [r3, #0]
  401d50:	4809      	ldr	r0, [pc, #36]	; (401d78 <vTaskPlaceOnEventListRestricted+0x74>)
  401d52:	3104      	adds	r1, #4
  401d54:	4b05      	ldr	r3, [pc, #20]	; (401d6c <vTaskPlaceOnEventListRestricted+0x68>)
  401d56:	4798      	blx	r3
  401d58:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401d5a:	4b08      	ldr	r3, [pc, #32]	; (401d7c <vTaskPlaceOnEventListRestricted+0x78>)
  401d5c:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d5e:	4420      	add	r0, r4
  401d60:	4b07      	ldr	r3, [pc, #28]	; (401d80 <vTaskPlaceOnEventListRestricted+0x7c>)
  401d62:	4798      	blx	r3
  401d64:	bd70      	pop	{r4, r5, r6, pc}
  401d66:	bf00      	nop
  401d68:	2040c200 	.word	0x2040c200
  401d6c:	00400cb1 	.word	0x00400cb1
  401d70:	00400cfd 	.word	0x00400cfd
  401d74:	2040c254 	.word	0x2040c254
  401d78:	2040c240 	.word	0x2040c240
  401d7c:	2040c21c 	.word	0x2040c21c
  401d80:	00401551 	.word	0x00401551

00401d84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401d84:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401d86:	68c3      	ldr	r3, [r0, #12]
  401d88:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401d8a:	b954      	cbnz	r4, 401da2 <xTaskRemoveFromEventList+0x1e>
  401d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d90:	b672      	cpsid	i
  401d92:	f383 8811 	msr	BASEPRI, r3
  401d96:	f3bf 8f6f 	isb	sy
  401d9a:	f3bf 8f4f 	dsb	sy
  401d9e:	b662      	cpsie	i
  401da0:	e7fe      	b.n	401da0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401da2:	f104 0518 	add.w	r5, r4, #24
  401da6:	4628      	mov	r0, r5
  401da8:	4b14      	ldr	r3, [pc, #80]	; (401dfc <xTaskRemoveFromEventList+0x78>)
  401daa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401dac:	4b14      	ldr	r3, [pc, #80]	; (401e00 <xTaskRemoveFromEventList+0x7c>)
  401dae:	681b      	ldr	r3, [r3, #0]
  401db0:	b99b      	cbnz	r3, 401dda <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401db2:	1d25      	adds	r5, r4, #4
  401db4:	4628      	mov	r0, r5
  401db6:	4b11      	ldr	r3, [pc, #68]	; (401dfc <xTaskRemoveFromEventList+0x78>)
  401db8:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401dba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401dbc:	4911      	ldr	r1, [pc, #68]	; (401e04 <xTaskRemoveFromEventList+0x80>)
  401dbe:	680b      	ldr	r3, [r1, #0]
  401dc0:	2201      	movs	r2, #1
  401dc2:	4082      	lsls	r2, r0
  401dc4:	4313      	orrs	r3, r2
  401dc6:	600b      	str	r3, [r1, #0]
  401dc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401dcc:	4b0e      	ldr	r3, [pc, #56]	; (401e08 <xTaskRemoveFromEventList+0x84>)
  401dce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401dd2:	4629      	mov	r1, r5
  401dd4:	4b0d      	ldr	r3, [pc, #52]	; (401e0c <xTaskRemoveFromEventList+0x88>)
  401dd6:	4798      	blx	r3
  401dd8:	e003      	b.n	401de2 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401dda:	480d      	ldr	r0, [pc, #52]	; (401e10 <xTaskRemoveFromEventList+0x8c>)
  401ddc:	4629      	mov	r1, r5
  401dde:	4b0b      	ldr	r3, [pc, #44]	; (401e0c <xTaskRemoveFromEventList+0x88>)
  401de0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401de2:	4b0c      	ldr	r3, [pc, #48]	; (401e14 <xTaskRemoveFromEventList+0x90>)
  401de4:	681b      	ldr	r3, [r3, #0]
  401de6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401dea:	429a      	cmp	r2, r3
  401dec:	d903      	bls.n	401df6 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401dee:	2001      	movs	r0, #1
  401df0:	4b09      	ldr	r3, [pc, #36]	; (401e18 <xTaskRemoveFromEventList+0x94>)
  401df2:	6018      	str	r0, [r3, #0]
  401df4:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401df6:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401df8:	bd38      	pop	{r3, r4, r5, pc}
  401dfa:	bf00      	nop
  401dfc:	00400cfd 	.word	0x00400cfd
  401e00:	2040c218 	.word	0x2040c218
  401e04:	2040c254 	.word	0x2040c254
  401e08:	2040c188 	.word	0x2040c188
  401e0c:	00400cb1 	.word	0x00400cb1
  401e10:	2040c204 	.word	0x2040c204
  401e14:	2040c200 	.word	0x2040c200
  401e18:	2040c258 	.word	0x2040c258

00401e1c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401e1c:	b950      	cbnz	r0, 401e34 <vTaskSetTimeOutState+0x18>
  401e1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e22:	b672      	cpsid	i
  401e24:	f383 8811 	msr	BASEPRI, r3
  401e28:	f3bf 8f6f 	isb	sy
  401e2c:	f3bf 8f4f 	dsb	sy
  401e30:	b662      	cpsie	i
  401e32:	e7fe      	b.n	401e32 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401e34:	4a03      	ldr	r2, [pc, #12]	; (401e44 <vTaskSetTimeOutState+0x28>)
  401e36:	6812      	ldr	r2, [r2, #0]
  401e38:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401e3a:	4a03      	ldr	r2, [pc, #12]	; (401e48 <vTaskSetTimeOutState+0x2c>)
  401e3c:	6812      	ldr	r2, [r2, #0]
  401e3e:	6042      	str	r2, [r0, #4]
  401e40:	4770      	bx	lr
  401e42:	bf00      	nop
  401e44:	2040c15c 	.word	0x2040c15c
  401e48:	2040c21c 	.word	0x2040c21c

00401e4c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401e4c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401e4e:	b950      	cbnz	r0, 401e66 <xTaskCheckForTimeOut+0x1a>
  401e50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e54:	b672      	cpsid	i
  401e56:	f383 8811 	msr	BASEPRI, r3
  401e5a:	f3bf 8f6f 	isb	sy
  401e5e:	f3bf 8f4f 	dsb	sy
  401e62:	b662      	cpsie	i
  401e64:	e7fe      	b.n	401e64 <xTaskCheckForTimeOut+0x18>
  401e66:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401e68:	b951      	cbnz	r1, 401e80 <xTaskCheckForTimeOut+0x34>
  401e6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6e:	b672      	cpsid	i
  401e70:	f383 8811 	msr	BASEPRI, r3
  401e74:	f3bf 8f6f 	isb	sy
  401e78:	f3bf 8f4f 	dsb	sy
  401e7c:	b662      	cpsie	i
  401e7e:	e7fe      	b.n	401e7e <xTaskCheckForTimeOut+0x32>
  401e80:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401e82:	4b12      	ldr	r3, [pc, #72]	; (401ecc <xTaskCheckForTimeOut+0x80>)
  401e84:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401e86:	4b12      	ldr	r3, [pc, #72]	; (401ed0 <xTaskCheckForTimeOut+0x84>)
  401e88:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401e8a:	682b      	ldr	r3, [r5, #0]
  401e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e90:	d013      	beq.n	401eba <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401e92:	4a10      	ldr	r2, [pc, #64]	; (401ed4 <xTaskCheckForTimeOut+0x88>)
  401e94:	6812      	ldr	r2, [r2, #0]
  401e96:	6820      	ldr	r0, [r4, #0]
  401e98:	4290      	cmp	r0, r2
  401e9a:	d002      	beq.n	401ea2 <xTaskCheckForTimeOut+0x56>
  401e9c:	6862      	ldr	r2, [r4, #4]
  401e9e:	4291      	cmp	r1, r2
  401ea0:	d20d      	bcs.n	401ebe <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401ea2:	6862      	ldr	r2, [r4, #4]
  401ea4:	1a88      	subs	r0, r1, r2
  401ea6:	4283      	cmp	r3, r0
  401ea8:	d90b      	bls.n	401ec2 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401eaa:	1a52      	subs	r2, r2, r1
  401eac:	4413      	add	r3, r2
  401eae:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401eb0:	4620      	mov	r0, r4
  401eb2:	4b09      	ldr	r3, [pc, #36]	; (401ed8 <xTaskCheckForTimeOut+0x8c>)
  401eb4:	4798      	blx	r3
			xReturn = pdFALSE;
  401eb6:	2400      	movs	r4, #0
  401eb8:	e004      	b.n	401ec4 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401eba:	2400      	movs	r4, #0
  401ebc:	e002      	b.n	401ec4 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401ebe:	2401      	movs	r4, #1
  401ec0:	e000      	b.n	401ec4 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401ec2:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401ec4:	4b05      	ldr	r3, [pc, #20]	; (401edc <xTaskCheckForTimeOut+0x90>)
  401ec6:	4798      	blx	r3

	return xReturn;
}
  401ec8:	4620      	mov	r0, r4
  401eca:	bd38      	pop	{r3, r4, r5, pc}
  401ecc:	004009bd 	.word	0x004009bd
  401ed0:	2040c21c 	.word	0x2040c21c
  401ed4:	2040c15c 	.word	0x2040c15c
  401ed8:	00401e1d 	.word	0x00401e1d
  401edc:	00400a09 	.word	0x00400a09

00401ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401ee0:	2201      	movs	r2, #1
  401ee2:	4b01      	ldr	r3, [pc, #4]	; (401ee8 <vTaskMissedYield+0x8>)
  401ee4:	601a      	str	r2, [r3, #0]
  401ee6:	4770      	bx	lr
  401ee8:	2040c258 	.word	0x2040c258

00401eec <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401eec:	4b05      	ldr	r3, [pc, #20]	; (401f04 <xTaskGetSchedulerState+0x18>)
  401eee:	681b      	ldr	r3, [r3, #0]
  401ef0:	b133      	cbz	r3, 401f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ef2:	4b05      	ldr	r3, [pc, #20]	; (401f08 <xTaskGetSchedulerState+0x1c>)
  401ef4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401ef6:	2b00      	cmp	r3, #0
  401ef8:	bf0c      	ite	eq
  401efa:	2002      	moveq	r0, #2
  401efc:	2000      	movne	r0, #0
  401efe:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401f00:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401f02:	4770      	bx	lr
  401f04:	2040c164 	.word	0x2040c164
  401f08:	2040c218 	.word	0x2040c218

00401f0c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401f0c:	2800      	cmp	r0, #0
  401f0e:	d045      	beq.n	401f9c <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401f10:	b538      	push	{r3, r4, r5, lr}
  401f12:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401f14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401f16:	4922      	ldr	r1, [pc, #136]	; (401fa0 <vTaskPriorityInherit+0x94>)
  401f18:	6809      	ldr	r1, [r1, #0]
  401f1a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401f1c:	428a      	cmp	r2, r1
  401f1e:	d23c      	bcs.n	401f9a <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401f20:	6981      	ldr	r1, [r0, #24]
  401f22:	2900      	cmp	r1, #0
  401f24:	db05      	blt.n	401f32 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401f26:	491e      	ldr	r1, [pc, #120]	; (401fa0 <vTaskPriorityInherit+0x94>)
  401f28:	6809      	ldr	r1, [r1, #0]
  401f2a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401f2c:	f1c1 0105 	rsb	r1, r1, #5
  401f30:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401f32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401f36:	491b      	ldr	r1, [pc, #108]	; (401fa4 <vTaskPriorityInherit+0x98>)
  401f38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401f3c:	6959      	ldr	r1, [r3, #20]
  401f3e:	4291      	cmp	r1, r2
  401f40:	d127      	bne.n	401f92 <vTaskPriorityInherit+0x86>
  401f42:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f44:	1d1d      	adds	r5, r3, #4
  401f46:	4628      	mov	r0, r5
  401f48:	4b17      	ldr	r3, [pc, #92]	; (401fa8 <vTaskPriorityInherit+0x9c>)
  401f4a:	4798      	blx	r3
  401f4c:	b970      	cbnz	r0, 401f6c <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401f4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f50:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401f54:	4a13      	ldr	r2, [pc, #76]	; (401fa4 <vTaskPriorityInherit+0x98>)
  401f56:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401f5a:	b93a      	cbnz	r2, 401f6c <vTaskPriorityInherit+0x60>
  401f5c:	4813      	ldr	r0, [pc, #76]	; (401fac <vTaskPriorityInherit+0xa0>)
  401f5e:	6802      	ldr	r2, [r0, #0]
  401f60:	2101      	movs	r1, #1
  401f62:	fa01 f303 	lsl.w	r3, r1, r3
  401f66:	ea22 0303 	bic.w	r3, r2, r3
  401f6a:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401f6c:	4b0c      	ldr	r3, [pc, #48]	; (401fa0 <vTaskPriorityInherit+0x94>)
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401f72:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401f74:	490d      	ldr	r1, [pc, #52]	; (401fac <vTaskPriorityInherit+0xa0>)
  401f76:	680a      	ldr	r2, [r1, #0]
  401f78:	2301      	movs	r3, #1
  401f7a:	4083      	lsls	r3, r0
  401f7c:	4313      	orrs	r3, r2
  401f7e:	600b      	str	r3, [r1, #0]
  401f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f84:	4b07      	ldr	r3, [pc, #28]	; (401fa4 <vTaskPriorityInherit+0x98>)
  401f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f8a:	4629      	mov	r1, r5
  401f8c:	4b08      	ldr	r3, [pc, #32]	; (401fb0 <vTaskPriorityInherit+0xa4>)
  401f8e:	4798      	blx	r3
  401f90:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401f92:	4a03      	ldr	r2, [pc, #12]	; (401fa0 <vTaskPriorityInherit+0x94>)
  401f94:	6812      	ldr	r2, [r2, #0]
  401f96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401f98:	62da      	str	r2, [r3, #44]	; 0x2c
  401f9a:	bd38      	pop	{r3, r4, r5, pc}
  401f9c:	4770      	bx	lr
  401f9e:	bf00      	nop
  401fa0:	2040c200 	.word	0x2040c200
  401fa4:	2040c188 	.word	0x2040c188
  401fa8:	00400cfd 	.word	0x00400cfd
  401fac:	2040c254 	.word	0x2040c254
  401fb0:	00400cb1 	.word	0x00400cb1

00401fb4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401fb4:	2800      	cmp	r0, #0
  401fb6:	d04e      	beq.n	402056 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401fb8:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401fba:	4a29      	ldr	r2, [pc, #164]	; (402060 <xTaskPriorityDisinherit+0xac>)
  401fbc:	6812      	ldr	r2, [r2, #0]
  401fbe:	4290      	cmp	r0, r2
  401fc0:	d00a      	beq.n	401fd8 <xTaskPriorityDisinherit+0x24>
  401fc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fc6:	b672      	cpsid	i
  401fc8:	f383 8811 	msr	BASEPRI, r3
  401fcc:	f3bf 8f6f 	isb	sy
  401fd0:	f3bf 8f4f 	dsb	sy
  401fd4:	b662      	cpsie	i
  401fd6:	e7fe      	b.n	401fd6 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  401fd8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401fda:	b952      	cbnz	r2, 401ff2 <xTaskPriorityDisinherit+0x3e>
  401fdc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe0:	b672      	cpsid	i
  401fe2:	f383 8811 	msr	BASEPRI, r3
  401fe6:	f3bf 8f6f 	isb	sy
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	b662      	cpsie	i
  401ff0:	e7fe      	b.n	401ff0 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  401ff2:	3a01      	subs	r2, #1
  401ff4:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401ff6:	2a00      	cmp	r2, #0
  401ff8:	d12f      	bne.n	40205a <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401ffa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401ffc:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401ffe:	4291      	cmp	r1, r2
  402000:	d02b      	beq.n	40205a <xTaskPriorityDisinherit+0xa6>
  402002:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402004:	1d05      	adds	r5, r0, #4
  402006:	4628      	mov	r0, r5
  402008:	4b16      	ldr	r3, [pc, #88]	; (402064 <xTaskPriorityDisinherit+0xb0>)
  40200a:	4798      	blx	r3
  40200c:	b968      	cbnz	r0, 40202a <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40200e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402010:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402014:	4b14      	ldr	r3, [pc, #80]	; (402068 <xTaskPriorityDisinherit+0xb4>)
  402016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40201a:	b933      	cbnz	r3, 40202a <xTaskPriorityDisinherit+0x76>
  40201c:	4813      	ldr	r0, [pc, #76]	; (40206c <xTaskPriorityDisinherit+0xb8>)
  40201e:	6803      	ldr	r3, [r0, #0]
  402020:	2201      	movs	r2, #1
  402022:	408a      	lsls	r2, r1
  402024:	ea23 0302 	bic.w	r3, r3, r2
  402028:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40202a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40202c:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40202e:	f1c0 0305 	rsb	r3, r0, #5
  402032:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402034:	4a0d      	ldr	r2, [pc, #52]	; (40206c <xTaskPriorityDisinherit+0xb8>)
  402036:	6813      	ldr	r3, [r2, #0]
  402038:	2401      	movs	r4, #1
  40203a:	fa04 f100 	lsl.w	r1, r4, r0
  40203e:	430b      	orrs	r3, r1
  402040:	6013      	str	r3, [r2, #0]
  402042:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402046:	4b08      	ldr	r3, [pc, #32]	; (402068 <xTaskPriorityDisinherit+0xb4>)
  402048:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40204c:	4629      	mov	r1, r5
  40204e:	4b08      	ldr	r3, [pc, #32]	; (402070 <xTaskPriorityDisinherit+0xbc>)
  402050:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402052:	4620      	mov	r0, r4
  402054:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  402056:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402058:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  40205a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40205c:	bd38      	pop	{r3, r4, r5, pc}
  40205e:	bf00      	nop
  402060:	2040c200 	.word	0x2040c200
  402064:	00400cfd 	.word	0x00400cfd
  402068:	2040c188 	.word	0x2040c188
  40206c:	2040c254 	.word	0x2040c254
  402070:	00400cb1 	.word	0x00400cb1

00402074 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402074:	4b05      	ldr	r3, [pc, #20]	; (40208c <pvTaskIncrementMutexHeldCount+0x18>)
  402076:	681b      	ldr	r3, [r3, #0]
  402078:	b123      	cbz	r3, 402084 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40207a:	4b04      	ldr	r3, [pc, #16]	; (40208c <pvTaskIncrementMutexHeldCount+0x18>)
  40207c:	681a      	ldr	r2, [r3, #0]
  40207e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402080:	3301      	adds	r3, #1
  402082:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402084:	4b01      	ldr	r3, [pc, #4]	; (40208c <pvTaskIncrementMutexHeldCount+0x18>)
  402086:	6818      	ldr	r0, [r3, #0]
	}
  402088:	4770      	bx	lr
  40208a:	bf00      	nop
  40208c:	2040c200 	.word	0x2040c200

00402090 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402090:	b510      	push	{r4, lr}
  402092:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402094:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402096:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402098:	4291      	cmp	r1, r2
  40209a:	d80a      	bhi.n	4020b2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40209c:	1ad2      	subs	r2, r2, r3
  40209e:	6983      	ldr	r3, [r0, #24]
  4020a0:	429a      	cmp	r2, r3
  4020a2:	d211      	bcs.n	4020c8 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4020a4:	4b0a      	ldr	r3, [pc, #40]	; (4020d0 <prvInsertTimerInActiveList+0x40>)
  4020a6:	6818      	ldr	r0, [r3, #0]
  4020a8:	1d21      	adds	r1, r4, #4
  4020aa:	4b0a      	ldr	r3, [pc, #40]	; (4020d4 <prvInsertTimerInActiveList+0x44>)
  4020ac:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  4020ae:	2000      	movs	r0, #0
  4020b0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4020b2:	4299      	cmp	r1, r3
  4020b4:	d301      	bcc.n	4020ba <prvInsertTimerInActiveList+0x2a>
  4020b6:	429a      	cmp	r2, r3
  4020b8:	d308      	bcc.n	4020cc <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4020ba:	4b07      	ldr	r3, [pc, #28]	; (4020d8 <prvInsertTimerInActiveList+0x48>)
  4020bc:	6818      	ldr	r0, [r3, #0]
  4020be:	1d21      	adds	r1, r4, #4
  4020c0:	4b04      	ldr	r3, [pc, #16]	; (4020d4 <prvInsertTimerInActiveList+0x44>)
  4020c2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  4020c4:	2000      	movs	r0, #0
  4020c6:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4020c8:	2001      	movs	r0, #1
  4020ca:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4020cc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4020ce:	bd10      	pop	{r4, pc}
  4020d0:	2040c290 	.word	0x2040c290
  4020d4:	00400cc9 	.word	0x00400cc9
  4020d8:	2040c25c 	.word	0x2040c25c

004020dc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4020dc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4020de:	4b14      	ldr	r3, [pc, #80]	; (402130 <prvCheckForValidListAndQueue+0x54>)
  4020e0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4020e2:	4b14      	ldr	r3, [pc, #80]	; (402134 <prvCheckForValidListAndQueue+0x58>)
  4020e4:	681b      	ldr	r3, [r3, #0]
  4020e6:	bb03      	cbnz	r3, 40212a <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  4020e8:	4d13      	ldr	r5, [pc, #76]	; (402138 <prvCheckForValidListAndQueue+0x5c>)
  4020ea:	4628      	mov	r0, r5
  4020ec:	4e13      	ldr	r6, [pc, #76]	; (40213c <prvCheckForValidListAndQueue+0x60>)
  4020ee:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4020f0:	4c13      	ldr	r4, [pc, #76]	; (402140 <prvCheckForValidListAndQueue+0x64>)
  4020f2:	4620      	mov	r0, r4
  4020f4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4020f6:	4b13      	ldr	r3, [pc, #76]	; (402144 <prvCheckForValidListAndQueue+0x68>)
  4020f8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4020fa:	4b13      	ldr	r3, [pc, #76]	; (402148 <prvCheckForValidListAndQueue+0x6c>)
  4020fc:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4020fe:	2005      	movs	r0, #5
  402100:	2110      	movs	r1, #16
  402102:	2200      	movs	r2, #0
  402104:	4b11      	ldr	r3, [pc, #68]	; (40214c <prvCheckForValidListAndQueue+0x70>)
  402106:	4798      	blx	r3
  402108:	4b0a      	ldr	r3, [pc, #40]	; (402134 <prvCheckForValidListAndQueue+0x58>)
  40210a:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40210c:	b950      	cbnz	r0, 402124 <prvCheckForValidListAndQueue+0x48>
  40210e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402112:	b672      	cpsid	i
  402114:	f383 8811 	msr	BASEPRI, r3
  402118:	f3bf 8f6f 	isb	sy
  40211c:	f3bf 8f4f 	dsb	sy
  402120:	b662      	cpsie	i
  402122:	e7fe      	b.n	402122 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402124:	490a      	ldr	r1, [pc, #40]	; (402150 <prvCheckForValidListAndQueue+0x74>)
  402126:	4b0b      	ldr	r3, [pc, #44]	; (402154 <prvCheckForValidListAndQueue+0x78>)
  402128:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40212a:	4b0b      	ldr	r3, [pc, #44]	; (402158 <prvCheckForValidListAndQueue+0x7c>)
  40212c:	4798      	blx	r3
  40212e:	bd70      	pop	{r4, r5, r6, pc}
  402130:	004009bd 	.word	0x004009bd
  402134:	2040c28c 	.word	0x2040c28c
  402138:	2040c260 	.word	0x2040c260
  40213c:	00400c91 	.word	0x00400c91
  402140:	2040c274 	.word	0x2040c274
  402144:	2040c25c 	.word	0x2040c25c
  402148:	2040c290 	.word	0x2040c290
  40214c:	00400f85 	.word	0x00400f85
  402150:	0040dae8 	.word	0x0040dae8
  402154:	004014a1 	.word	0x004014a1
  402158:	00400a09 	.word	0x00400a09

0040215c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  40215c:	b510      	push	{r4, lr}
  40215e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  402160:	4b0f      	ldr	r3, [pc, #60]	; (4021a0 <xTimerCreateTimerTask+0x44>)
  402162:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402164:	4b0f      	ldr	r3, [pc, #60]	; (4021a4 <xTimerCreateTimerTask+0x48>)
  402166:	681b      	ldr	r3, [r3, #0]
  402168:	b163      	cbz	r3, 402184 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40216a:	2304      	movs	r3, #4
  40216c:	9300      	str	r3, [sp, #0]
  40216e:	2300      	movs	r3, #0
  402170:	9301      	str	r3, [sp, #4]
  402172:	9302      	str	r3, [sp, #8]
  402174:	9303      	str	r3, [sp, #12]
  402176:	480c      	ldr	r0, [pc, #48]	; (4021a8 <xTimerCreateTimerTask+0x4c>)
  402178:	490c      	ldr	r1, [pc, #48]	; (4021ac <xTimerCreateTimerTask+0x50>)
  40217a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40217e:	4c0c      	ldr	r4, [pc, #48]	; (4021b0 <xTimerCreateTimerTask+0x54>)
  402180:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402182:	b950      	cbnz	r0, 40219a <xTimerCreateTimerTask+0x3e>
  402184:	f04f 0380 	mov.w	r3, #128	; 0x80
  402188:	b672      	cpsid	i
  40218a:	f383 8811 	msr	BASEPRI, r3
  40218e:	f3bf 8f6f 	isb	sy
  402192:	f3bf 8f4f 	dsb	sy
  402196:	b662      	cpsie	i
  402198:	e7fe      	b.n	402198 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40219a:	b004      	add	sp, #16
  40219c:	bd10      	pop	{r4, pc}
  40219e:	bf00      	nop
  4021a0:	004020dd 	.word	0x004020dd
  4021a4:	2040c28c 	.word	0x2040c28c
  4021a8:	004022ed 	.word	0x004022ed
  4021ac:	0040daf0 	.word	0x0040daf0
  4021b0:	004015a9 	.word	0x004015a9

004021b4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  4021b4:	b950      	cbnz	r0, 4021cc <xTimerGenericCommand+0x18>
  4021b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ba:	b672      	cpsid	i
  4021bc:	f383 8811 	msr	BASEPRI, r3
  4021c0:	f3bf 8f6f 	isb	sy
  4021c4:	f3bf 8f4f 	dsb	sy
  4021c8:	b662      	cpsie	i
  4021ca:	e7fe      	b.n	4021ca <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  4021cc:	b530      	push	{r4, r5, lr}
  4021ce:	b085      	sub	sp, #20
  4021d0:	4615      	mov	r5, r2
  4021d2:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4021d4:	4a12      	ldr	r2, [pc, #72]	; (402220 <xTimerGenericCommand+0x6c>)
  4021d6:	6810      	ldr	r0, [r2, #0]
  4021d8:	b1f0      	cbz	r0, 402218 <xTimerGenericCommand+0x64>
  4021da:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  4021dc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4021de:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4021e0:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4021e2:	2905      	cmp	r1, #5
  4021e4:	dc13      	bgt.n	40220e <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4021e6:	4b0f      	ldr	r3, [pc, #60]	; (402224 <xTimerGenericCommand+0x70>)
  4021e8:	4798      	blx	r3
  4021ea:	2802      	cmp	r0, #2
  4021ec:	d107      	bne.n	4021fe <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4021ee:	4b0c      	ldr	r3, [pc, #48]	; (402220 <xTimerGenericCommand+0x6c>)
  4021f0:	6818      	ldr	r0, [r3, #0]
  4021f2:	4669      	mov	r1, sp
  4021f4:	9a08      	ldr	r2, [sp, #32]
  4021f6:	2300      	movs	r3, #0
  4021f8:	4c0b      	ldr	r4, [pc, #44]	; (402228 <xTimerGenericCommand+0x74>)
  4021fa:	47a0      	blx	r4
  4021fc:	e00d      	b.n	40221a <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4021fe:	4b08      	ldr	r3, [pc, #32]	; (402220 <xTimerGenericCommand+0x6c>)
  402200:	6818      	ldr	r0, [r3, #0]
  402202:	4669      	mov	r1, sp
  402204:	2200      	movs	r2, #0
  402206:	4613      	mov	r3, r2
  402208:	4c07      	ldr	r4, [pc, #28]	; (402228 <xTimerGenericCommand+0x74>)
  40220a:	47a0      	blx	r4
  40220c:	e005      	b.n	40221a <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40220e:	4669      	mov	r1, sp
  402210:	2300      	movs	r3, #0
  402212:	4c06      	ldr	r4, [pc, #24]	; (40222c <xTimerGenericCommand+0x78>)
  402214:	47a0      	blx	r4
  402216:	e000      	b.n	40221a <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402218:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40221a:	b005      	add	sp, #20
  40221c:	bd30      	pop	{r4, r5, pc}
  40221e:	bf00      	nop
  402220:	2040c28c 	.word	0x2040c28c
  402224:	00401eed 	.word	0x00401eed
  402228:	00401009 	.word	0x00401009
  40222c:	004011e5 	.word	0x004011e5

00402230 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  402230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402234:	b082      	sub	sp, #8
  402236:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  402238:	4b25      	ldr	r3, [pc, #148]	; (4022d0 <prvSampleTimeNow+0xa0>)
  40223a:	4798      	blx	r3
  40223c:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  40223e:	4b25      	ldr	r3, [pc, #148]	; (4022d4 <prvSampleTimeNow+0xa4>)
  402240:	681b      	ldr	r3, [r3, #0]
  402242:	4298      	cmp	r0, r3
  402244:	d23b      	bcs.n	4022be <prvSampleTimeNow+0x8e>
  402246:	e02b      	b.n	4022a0 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402248:	68db      	ldr	r3, [r3, #12]
  40224a:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40224e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402250:	f104 0904 	add.w	r9, r4, #4
  402254:	4648      	mov	r0, r9
  402256:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402258:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40225a:	4620      	mov	r0, r4
  40225c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40225e:	69e3      	ldr	r3, [r4, #28]
  402260:	2b01      	cmp	r3, #1
  402262:	d11f      	bne.n	4022a4 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402264:	69a3      	ldr	r3, [r4, #24]
  402266:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402268:	4553      	cmp	r3, sl
  40226a:	d906      	bls.n	40227a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40226c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40226e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402270:	6828      	ldr	r0, [r5, #0]
  402272:	4649      	mov	r1, r9
  402274:	4b18      	ldr	r3, [pc, #96]	; (4022d8 <prvSampleTimeNow+0xa8>)
  402276:	4798      	blx	r3
  402278:	e014      	b.n	4022a4 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40227a:	2300      	movs	r3, #0
  40227c:	9300      	str	r3, [sp, #0]
  40227e:	4620      	mov	r0, r4
  402280:	4619      	mov	r1, r3
  402282:	4652      	mov	r2, sl
  402284:	4c15      	ldr	r4, [pc, #84]	; (4022dc <prvSampleTimeNow+0xac>)
  402286:	47a0      	blx	r4
				configASSERT( xResult );
  402288:	b960      	cbnz	r0, 4022a4 <prvSampleTimeNow+0x74>
  40228a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228e:	b672      	cpsid	i
  402290:	f383 8811 	msr	BASEPRI, r3
  402294:	f3bf 8f6f 	isb	sy
  402298:	f3bf 8f4f 	dsb	sy
  40229c:	b662      	cpsie	i
  40229e:	e7fe      	b.n	40229e <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4022a0:	4d0f      	ldr	r5, [pc, #60]	; (4022e0 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4022a2:	4e10      	ldr	r6, [pc, #64]	; (4022e4 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4022a4:	682b      	ldr	r3, [r5, #0]
  4022a6:	681a      	ldr	r2, [r3, #0]
  4022a8:	2a00      	cmp	r2, #0
  4022aa:	d1cd      	bne.n	402248 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  4022ac:	4a0e      	ldr	r2, [pc, #56]	; (4022e8 <prvSampleTimeNow+0xb8>)
  4022ae:	6810      	ldr	r0, [r2, #0]
  4022b0:	490b      	ldr	r1, [pc, #44]	; (4022e0 <prvSampleTimeNow+0xb0>)
  4022b2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4022b4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  4022b6:	2301      	movs	r3, #1
  4022b8:	f8c8 3000 	str.w	r3, [r8]
  4022bc:	e002      	b.n	4022c4 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  4022be:	2300      	movs	r3, #0
  4022c0:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  4022c4:	4b03      	ldr	r3, [pc, #12]	; (4022d4 <prvSampleTimeNow+0xa4>)
  4022c6:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  4022c8:	4638      	mov	r0, r7
  4022ca:	b002      	add	sp, #8
  4022cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4022d0:	00401871 	.word	0x00401871
  4022d4:	2040c288 	.word	0x2040c288
  4022d8:	00400cc9 	.word	0x00400cc9
  4022dc:	004021b5 	.word	0x004021b5
  4022e0:	2040c25c 	.word	0x2040c25c
  4022e4:	00400cfd 	.word	0x00400cfd
  4022e8:	2040c290 	.word	0x2040c290

004022ec <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4022ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4022f0:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4022f2:	4c69      	ldr	r4, [pc, #420]	; (402498 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4022f4:	4f69      	ldr	r7, [pc, #420]	; (40249c <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4022f6:	4d6a      	ldr	r5, [pc, #424]	; (4024a0 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4022f8:	4b6a      	ldr	r3, [pc, #424]	; (4024a4 <prvTimerTask+0x1b8>)
  4022fa:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4022fc:	681a      	ldr	r2, [r3, #0]
  4022fe:	2a00      	cmp	r2, #0
  402300:	f000 80bf 	beq.w	402482 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402304:	68db      	ldr	r3, [r3, #12]
  402306:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402308:	4b67      	ldr	r3, [pc, #412]	; (4024a8 <prvTimerTask+0x1bc>)
  40230a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40230c:	a804      	add	r0, sp, #16
  40230e:	4b67      	ldr	r3, [pc, #412]	; (4024ac <prvTimerTask+0x1c0>)
  402310:	4798      	blx	r3
  402312:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402314:	9b04      	ldr	r3, [sp, #16]
  402316:	2b00      	cmp	r3, #0
  402318:	d14d      	bne.n	4023b6 <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40231a:	42b0      	cmp	r0, r6
  40231c:	d339      	bcc.n	402392 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  40231e:	4b64      	ldr	r3, [pc, #400]	; (4024b0 <prvTimerTask+0x1c4>)
  402320:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402322:	4b60      	ldr	r3, [pc, #384]	; (4024a4 <prvTimerTask+0x1b8>)
  402324:	681b      	ldr	r3, [r3, #0]
  402326:	68db      	ldr	r3, [r3, #12]
  402328:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40232c:	f109 0004 	add.w	r0, r9, #4
  402330:	4b60      	ldr	r3, [pc, #384]	; (4024b4 <prvTimerTask+0x1c8>)
  402332:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402334:	f8d9 301c 	ldr.w	r3, [r9, #28]
  402338:	2b01      	cmp	r3, #1
  40233a:	d11d      	bne.n	402378 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40233c:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402340:	4648      	mov	r0, r9
  402342:	4431      	add	r1, r6
  402344:	4642      	mov	r2, r8
  402346:	4633      	mov	r3, r6
  402348:	f8df c178 	ldr.w	ip, [pc, #376]	; 4024c4 <prvTimerTask+0x1d8>
  40234c:	47e0      	blx	ip
  40234e:	2801      	cmp	r0, #1
  402350:	d112      	bne.n	402378 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402352:	2300      	movs	r3, #0
  402354:	9300      	str	r3, [sp, #0]
  402356:	4648      	mov	r0, r9
  402358:	4619      	mov	r1, r3
  40235a:	4632      	mov	r2, r6
  40235c:	4e56      	ldr	r6, [pc, #344]	; (4024b8 <prvTimerTask+0x1cc>)
  40235e:	47b0      	blx	r6
			configASSERT( xResult );
  402360:	b950      	cbnz	r0, 402378 <prvTimerTask+0x8c>
  402362:	f04f 0380 	mov.w	r3, #128	; 0x80
  402366:	b672      	cpsid	i
  402368:	f383 8811 	msr	BASEPRI, r3
  40236c:	f3bf 8f6f 	isb	sy
  402370:	f3bf 8f4f 	dsb	sy
  402374:	b662      	cpsie	i
  402376:	e7fe      	b.n	402376 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402378:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40237c:	4648      	mov	r0, r9
  40237e:	4798      	blx	r3
  402380:	e077      	b.n	402472 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402382:	4b4e      	ldr	r3, [pc, #312]	; (4024bc <prvTimerTask+0x1d0>)
  402384:	681b      	ldr	r3, [r3, #0]
  402386:	681a      	ldr	r2, [r3, #0]
  402388:	fab2 f282 	clz	r2, r2
  40238c:	0952      	lsrs	r2, r2, #5
  40238e:	2600      	movs	r6, #0
  402390:	e000      	b.n	402394 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402392:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402394:	6820      	ldr	r0, [r4, #0]
  402396:	ebc8 0106 	rsb	r1, r8, r6
  40239a:	4b49      	ldr	r3, [pc, #292]	; (4024c0 <prvTimerTask+0x1d4>)
  40239c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40239e:	4b44      	ldr	r3, [pc, #272]	; (4024b0 <prvTimerTask+0x1c4>)
  4023a0:	4798      	blx	r3
  4023a2:	2800      	cmp	r0, #0
  4023a4:	d165      	bne.n	402472 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4023a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4023aa:	603b      	str	r3, [r7, #0]
  4023ac:	f3bf 8f4f 	dsb	sy
  4023b0:	f3bf 8f6f 	isb	sy
  4023b4:	e05d      	b.n	402472 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  4023b6:	4b3e      	ldr	r3, [pc, #248]	; (4024b0 <prvTimerTask+0x1c4>)
  4023b8:	4798      	blx	r3
  4023ba:	e05a      	b.n	402472 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4023bc:	9b04      	ldr	r3, [sp, #16]
  4023be:	2b00      	cmp	r3, #0
  4023c0:	da06      	bge.n	4023d0 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4023c2:	9806      	ldr	r0, [sp, #24]
  4023c4:	9907      	ldr	r1, [sp, #28]
  4023c6:	9b05      	ldr	r3, [sp, #20]
  4023c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4023ca:	9b04      	ldr	r3, [sp, #16]
  4023cc:	2b00      	cmp	r3, #0
  4023ce:	db50      	blt.n	402472 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4023d0:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4023d2:	6973      	ldr	r3, [r6, #20]
  4023d4:	b113      	cbz	r3, 4023dc <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4023d6:	1d30      	adds	r0, r6, #4
  4023d8:	4b36      	ldr	r3, [pc, #216]	; (4024b4 <prvTimerTask+0x1c8>)
  4023da:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4023dc:	a803      	add	r0, sp, #12
  4023de:	4b33      	ldr	r3, [pc, #204]	; (4024ac <prvTimerTask+0x1c0>)
  4023e0:	4798      	blx	r3
  4023e2:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  4023e4:	9a04      	ldr	r2, [sp, #16]
  4023e6:	2a09      	cmp	r2, #9
  4023e8:	d843      	bhi.n	402472 <prvTimerTask+0x186>
  4023ea:	e8df f002 	tbb	[pc, r2]
  4023ee:	0505      	.short	0x0505
  4023f0:	3f2a4205 	.word	0x3f2a4205
  4023f4:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4023f8:	9b05      	ldr	r3, [sp, #20]
  4023fa:	69b1      	ldr	r1, [r6, #24]
  4023fc:	4630      	mov	r0, r6
  4023fe:	4419      	add	r1, r3
  402400:	4672      	mov	r2, lr
  402402:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 4024c4 <prvTimerTask+0x1d8>
  402406:	47e0      	blx	ip
  402408:	2801      	cmp	r0, #1
  40240a:	d132      	bne.n	402472 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40240c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40240e:	4630      	mov	r0, r6
  402410:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402412:	69f3      	ldr	r3, [r6, #28]
  402414:	2b01      	cmp	r3, #1
  402416:	d12c      	bne.n	402472 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402418:	69b2      	ldr	r2, [r6, #24]
  40241a:	2300      	movs	r3, #0
  40241c:	9300      	str	r3, [sp, #0]
  40241e:	4630      	mov	r0, r6
  402420:	4619      	mov	r1, r3
  402422:	9e05      	ldr	r6, [sp, #20]
  402424:	4432      	add	r2, r6
  402426:	4e24      	ldr	r6, [pc, #144]	; (4024b8 <prvTimerTask+0x1cc>)
  402428:	47b0      	blx	r6
							configASSERT( xResult );
  40242a:	bb10      	cbnz	r0, 402472 <prvTimerTask+0x186>
  40242c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402430:	b672      	cpsid	i
  402432:	f383 8811 	msr	BASEPRI, r3
  402436:	f3bf 8f6f 	isb	sy
  40243a:	f3bf 8f4f 	dsb	sy
  40243e:	b662      	cpsie	i
  402440:	e7fe      	b.n	402440 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402442:	9905      	ldr	r1, [sp, #20]
  402444:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402446:	b951      	cbnz	r1, 40245e <prvTimerTask+0x172>
  402448:	f04f 0380 	mov.w	r3, #128	; 0x80
  40244c:	b672      	cpsid	i
  40244e:	f383 8811 	msr	BASEPRI, r3
  402452:	f3bf 8f6f 	isb	sy
  402456:	f3bf 8f4f 	dsb	sy
  40245a:	b662      	cpsie	i
  40245c:	e7fe      	b.n	40245c <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40245e:	4630      	mov	r0, r6
  402460:	4471      	add	r1, lr
  402462:	4672      	mov	r2, lr
  402464:	4673      	mov	r3, lr
  402466:	4e17      	ldr	r6, [pc, #92]	; (4024c4 <prvTimerTask+0x1d8>)
  402468:	47b0      	blx	r6
  40246a:	e002      	b.n	402472 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  40246c:	4630      	mov	r0, r6
  40246e:	4b16      	ldr	r3, [pc, #88]	; (4024c8 <prvTimerTask+0x1dc>)
  402470:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402472:	6820      	ldr	r0, [r4, #0]
  402474:	a904      	add	r1, sp, #16
  402476:	2200      	movs	r2, #0
  402478:	4613      	mov	r3, r2
  40247a:	47a8      	blx	r5
  40247c:	2800      	cmp	r0, #0
  40247e:	d19d      	bne.n	4023bc <prvTimerTask+0xd0>
  402480:	e73a      	b.n	4022f8 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402482:	4b09      	ldr	r3, [pc, #36]	; (4024a8 <prvTimerTask+0x1bc>)
  402484:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402486:	a804      	add	r0, sp, #16
  402488:	4b08      	ldr	r3, [pc, #32]	; (4024ac <prvTimerTask+0x1c0>)
  40248a:	4798      	blx	r3
  40248c:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40248e:	9b04      	ldr	r3, [sp, #16]
  402490:	2b00      	cmp	r3, #0
  402492:	f43f af76 	beq.w	402382 <prvTimerTask+0x96>
  402496:	e78e      	b.n	4023b6 <prvTimerTask+0xca>
  402498:	2040c28c 	.word	0x2040c28c
  40249c:	e000ed04 	.word	0xe000ed04
  4024a0:	004012dd 	.word	0x004012dd
  4024a4:	2040c25c 	.word	0x2040c25c
  4024a8:	00401861 	.word	0x00401861
  4024ac:	00402231 	.word	0x00402231
  4024b0:	004019b1 	.word	0x004019b1
  4024b4:	00400cfd 	.word	0x00400cfd
  4024b8:	004021b5 	.word	0x004021b5
  4024bc:	2040c290 	.word	0x2040c290
  4024c0:	004014d5 	.word	0x004014d5
  4024c4:	00402091 	.word	0x00402091
  4024c8:	00400c75 	.word	0x00400c75

004024cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4024cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4024ce:	4810      	ldr	r0, [pc, #64]	; (402510 <sysclk_init+0x44>)
  4024d0:	4b10      	ldr	r3, [pc, #64]	; (402514 <sysclk_init+0x48>)
  4024d2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4024d4:	2000      	movs	r0, #0
  4024d6:	213e      	movs	r1, #62	; 0x3e
  4024d8:	4b0f      	ldr	r3, [pc, #60]	; (402518 <sysclk_init+0x4c>)
  4024da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4024dc:	4c0f      	ldr	r4, [pc, #60]	; (40251c <sysclk_init+0x50>)
  4024de:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4024e0:	2800      	cmp	r0, #0
  4024e2:	d0fc      	beq.n	4024de <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4024e4:	4b0e      	ldr	r3, [pc, #56]	; (402520 <sysclk_init+0x54>)
  4024e6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4024e8:	4a0e      	ldr	r2, [pc, #56]	; (402524 <sysclk_init+0x58>)
  4024ea:	4b0f      	ldr	r3, [pc, #60]	; (402528 <sysclk_init+0x5c>)
  4024ec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4024ee:	4c0f      	ldr	r4, [pc, #60]	; (40252c <sysclk_init+0x60>)
  4024f0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4024f2:	2800      	cmp	r0, #0
  4024f4:	d0fc      	beq.n	4024f0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4024f6:	2002      	movs	r0, #2
  4024f8:	4b0d      	ldr	r3, [pc, #52]	; (402530 <sysclk_init+0x64>)
  4024fa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4024fc:	2000      	movs	r0, #0
  4024fe:	4b0d      	ldr	r3, [pc, #52]	; (402534 <sysclk_init+0x68>)
  402500:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402502:	4b0d      	ldr	r3, [pc, #52]	; (402538 <sysclk_init+0x6c>)
  402504:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402506:	4802      	ldr	r0, [pc, #8]	; (402510 <sysclk_init+0x44>)
  402508:	4b02      	ldr	r3, [pc, #8]	; (402514 <sysclk_init+0x48>)
  40250a:	4798      	blx	r3
  40250c:	bd10      	pop	{r4, pc}
  40250e:	bf00      	nop
  402510:	11e1a300 	.word	0x11e1a300
  402514:	004032e9 	.word	0x004032e9
  402518:	004026fd 	.word	0x004026fd
  40251c:	00402751 	.word	0x00402751
  402520:	00402761 	.word	0x00402761
  402524:	20183f01 	.word	0x20183f01
  402528:	400e0600 	.word	0x400e0600
  40252c:	00402771 	.word	0x00402771
  402530:	0040265d 	.word	0x0040265d
  402534:	00402695 	.word	0x00402695
  402538:	004031d5 	.word	0x004031d5

0040253c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40253c:	b10a      	cbz	r2, 402542 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  40253e:	6641      	str	r1, [r0, #100]	; 0x64
  402540:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402542:	6601      	str	r1, [r0, #96]	; 0x60
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402548:	6301      	str	r1, [r0, #48]	; 0x30
  40254a:	4770      	bx	lr

0040254c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40254c:	6341      	str	r1, [r0, #52]	; 0x34
  40254e:	4770      	bx	lr

00402550 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402550:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402552:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402556:	d02f      	beq.n	4025b8 <pio_set_peripheral+0x68>
  402558:	d807      	bhi.n	40256a <pio_set_peripheral+0x1a>
  40255a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40255e:	d014      	beq.n	40258a <pio_set_peripheral+0x3a>
  402560:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402564:	d01e      	beq.n	4025a4 <pio_set_peripheral+0x54>
  402566:	b939      	cbnz	r1, 402578 <pio_set_peripheral+0x28>
  402568:	4770      	bx	lr
  40256a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40256e:	d037      	beq.n	4025e0 <pio_set_peripheral+0x90>
  402570:	d804      	bhi.n	40257c <pio_set_peripheral+0x2c>
  402572:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402576:	d029      	beq.n	4025cc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402578:	6042      	str	r2, [r0, #4]
  40257a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40257c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402580:	d02e      	beq.n	4025e0 <pio_set_peripheral+0x90>
  402582:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402586:	d02b      	beq.n	4025e0 <pio_set_peripheral+0x90>
  402588:	e7f6      	b.n	402578 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40258a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40258c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40258e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402590:	43d3      	mvns	r3, r2
  402592:	4021      	ands	r1, r4
  402594:	4019      	ands	r1, r3
  402596:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402598:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40259a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  40259c:	4021      	ands	r1, r4
  40259e:	400b      	ands	r3, r1
  4025a0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4025a2:	e01a      	b.n	4025da <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4025a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4025a6:	4313      	orrs	r3, r2
  4025a8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4025aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4025ac:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4025ae:	400b      	ands	r3, r1
  4025b0:	ea23 0302 	bic.w	r3, r3, r2
  4025b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4025b6:	e7df      	b.n	402578 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4025b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4025ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4025bc:	400b      	ands	r3, r1
  4025be:	ea23 0302 	bic.w	r3, r3, r2
  4025c2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4025c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4025c6:	4313      	orrs	r3, r2
  4025c8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4025ca:	e7d5      	b.n	402578 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4025cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4025ce:	4313      	orrs	r3, r2
  4025d0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4025d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4025d4:	4313      	orrs	r3, r2
  4025d6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4025d8:	e7ce      	b.n	402578 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4025da:	6042      	str	r2, [r0, #4]
}
  4025dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4025e0:	4770      	bx	lr
  4025e2:	bf00      	nop

004025e4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4025e4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025e6:	f012 0f01 	tst.w	r2, #1
  4025ea:	d001      	beq.n	4025f0 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  4025ec:	6641      	str	r1, [r0, #100]	; 0x64
  4025ee:	e000      	b.n	4025f2 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4025f0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4025f2:	f012 0f0a 	tst.w	r2, #10
  4025f6:	d001      	beq.n	4025fc <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  4025f8:	6201      	str	r1, [r0, #32]
  4025fa:	e000      	b.n	4025fe <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4025fc:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4025fe:	f012 0f02 	tst.w	r2, #2
  402602:	d002      	beq.n	40260a <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402604:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402608:	e004      	b.n	402614 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40260a:	f012 0f08 	tst.w	r2, #8
  40260e:	d001      	beq.n	402614 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402610:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402614:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402616:	6001      	str	r1, [r0, #0]
  402618:	4770      	bx	lr
  40261a:	bf00      	nop

0040261c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40261c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40261e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402620:	9c01      	ldr	r4, [sp, #4]
  402622:	b10c      	cbz	r4, 402628 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402624:	6641      	str	r1, [r0, #100]	; 0x64
  402626:	e000      	b.n	40262a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402628:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40262a:	b10b      	cbz	r3, 402630 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40262c:	6501      	str	r1, [r0, #80]	; 0x50
  40262e:	e000      	b.n	402632 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402630:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402632:	b10a      	cbz	r2, 402638 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402634:	6301      	str	r1, [r0, #48]	; 0x30
  402636:	e000      	b.n	40263a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402638:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40263a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40263c:	6001      	str	r1, [r0, #0]
}
  40263e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402642:	4770      	bx	lr

00402644 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  402644:	b112      	cbz	r2, 40264c <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  402646:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  40264a:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  40264c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  402650:	4770      	bx	lr
  402652:	bf00      	nop

00402654 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402654:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402656:	4770      	bx	lr

00402658 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402658:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40265a:	4770      	bx	lr

0040265c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40265c:	2803      	cmp	r0, #3
  40265e:	d007      	beq.n	402670 <pmc_mck_set_division+0x14>
  402660:	2804      	cmp	r0, #4
  402662:	d008      	beq.n	402676 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402664:	2802      	cmp	r0, #2
  402666:	bf0c      	ite	eq
  402668:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40266c:	2100      	movne	r1, #0
  40266e:	e004      	b.n	40267a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402670:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402674:	e001      	b.n	40267a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402676:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40267a:	4a05      	ldr	r2, [pc, #20]	; (402690 <pmc_mck_set_division+0x34>)
  40267c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402682:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402684:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402686:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402688:	f013 0f08 	tst.w	r3, #8
  40268c:	d0fb      	beq.n	402686 <pmc_mck_set_division+0x2a>
}
  40268e:	4770      	bx	lr
  402690:	400e0600 	.word	0x400e0600

00402694 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402694:	4a18      	ldr	r2, [pc, #96]	; (4026f8 <pmc_switch_mck_to_pllack+0x64>)
  402696:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40269c:	4318      	orrs	r0, r3
  40269e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4026a2:	f013 0f08 	tst.w	r3, #8
  4026a6:	d003      	beq.n	4026b0 <pmc_switch_mck_to_pllack+0x1c>
  4026a8:	e009      	b.n	4026be <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026aa:	3b01      	subs	r3, #1
  4026ac:	d103      	bne.n	4026b6 <pmc_switch_mck_to_pllack+0x22>
  4026ae:	e01e      	b.n	4026ee <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026b4:	4910      	ldr	r1, [pc, #64]	; (4026f8 <pmc_switch_mck_to_pllack+0x64>)
  4026b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4026b8:	f012 0f08 	tst.w	r2, #8
  4026bc:	d0f5      	beq.n	4026aa <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4026be:	4a0e      	ldr	r2, [pc, #56]	; (4026f8 <pmc_switch_mck_to_pllack+0x64>)
  4026c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026c2:	f023 0303 	bic.w	r3, r3, #3
  4026c6:	f043 0302 	orr.w	r3, r3, #2
  4026ca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026cc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4026ce:	f010 0008 	ands.w	r0, r0, #8
  4026d2:	d004      	beq.n	4026de <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4026d4:	2000      	movs	r0, #0
  4026d6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026d8:	3b01      	subs	r3, #1
  4026da:	d103      	bne.n	4026e4 <pmc_switch_mck_to_pllack+0x50>
  4026dc:	e009      	b.n	4026f2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026de:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026e2:	4905      	ldr	r1, [pc, #20]	; (4026f8 <pmc_switch_mck_to_pllack+0x64>)
  4026e4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4026e6:	f012 0f08 	tst.w	r2, #8
  4026ea:	d0f5      	beq.n	4026d8 <pmc_switch_mck_to_pllack+0x44>
  4026ec:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026ee:	2001      	movs	r0, #1
  4026f0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4026f4:	4770      	bx	lr
  4026f6:	bf00      	nop
  4026f8:	400e0600 	.word	0x400e0600

004026fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4026fc:	b138      	cbz	r0, 40270e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026fe:	490e      	ldr	r1, [pc, #56]	; (402738 <pmc_switch_mainck_to_xtal+0x3c>)
  402700:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402702:	4a0e      	ldr	r2, [pc, #56]	; (40273c <pmc_switch_mainck_to_xtal+0x40>)
  402704:	401a      	ands	r2, r3
  402706:	4b0e      	ldr	r3, [pc, #56]	; (402740 <pmc_switch_mainck_to_xtal+0x44>)
  402708:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40270a:	620b      	str	r3, [r1, #32]
  40270c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40270e:	480a      	ldr	r0, [pc, #40]	; (402738 <pmc_switch_mainck_to_xtal+0x3c>)
  402710:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402712:	4a0c      	ldr	r2, [pc, #48]	; (402744 <pmc_switch_mainck_to_xtal+0x48>)
  402714:	401a      	ands	r2, r3
  402716:	4b0c      	ldr	r3, [pc, #48]	; (402748 <pmc_switch_mainck_to_xtal+0x4c>)
  402718:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40271a:	0209      	lsls	r1, r1, #8
  40271c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40271e:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402720:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402722:	4602      	mov	r2, r0
  402724:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402726:	f013 0f01 	tst.w	r3, #1
  40272a:	d0fb      	beq.n	402724 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40272c:	4a02      	ldr	r2, [pc, #8]	; (402738 <pmc_switch_mainck_to_xtal+0x3c>)
  40272e:	6a11      	ldr	r1, [r2, #32]
  402730:	4b06      	ldr	r3, [pc, #24]	; (40274c <pmc_switch_mainck_to_xtal+0x50>)
  402732:	430b      	orrs	r3, r1
  402734:	6213      	str	r3, [r2, #32]
  402736:	4770      	bx	lr
  402738:	400e0600 	.word	0x400e0600
  40273c:	fec8fffc 	.word	0xfec8fffc
  402740:	01370002 	.word	0x01370002
  402744:	ffc8fffc 	.word	0xffc8fffc
  402748:	00370001 	.word	0x00370001
  40274c:	01370000 	.word	0x01370000

00402750 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402750:	4b02      	ldr	r3, [pc, #8]	; (40275c <pmc_osc_is_ready_mainck+0xc>)
  402752:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402754:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402758:	4770      	bx	lr
  40275a:	bf00      	nop
  40275c:	400e0600 	.word	0x400e0600

00402760 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402764:	4b01      	ldr	r3, [pc, #4]	; (40276c <pmc_disable_pllack+0xc>)
  402766:	629a      	str	r2, [r3, #40]	; 0x28
  402768:	4770      	bx	lr
  40276a:	bf00      	nop
  40276c:	400e0600 	.word	0x400e0600

00402770 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402770:	4b02      	ldr	r3, [pc, #8]	; (40277c <pmc_is_locked_pllack+0xc>)
  402772:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402774:	f000 0002 	and.w	r0, r0, #2
  402778:	4770      	bx	lr
  40277a:	bf00      	nop
  40277c:	400e0600 	.word	0x400e0600

00402780 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402780:	283f      	cmp	r0, #63	; 0x3f
  402782:	d81e      	bhi.n	4027c2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402784:	281f      	cmp	r0, #31
  402786:	d80c      	bhi.n	4027a2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402788:	4b11      	ldr	r3, [pc, #68]	; (4027d0 <pmc_enable_periph_clk+0x50>)
  40278a:	699a      	ldr	r2, [r3, #24]
  40278c:	2301      	movs	r3, #1
  40278e:	4083      	lsls	r3, r0
  402790:	401a      	ands	r2, r3
  402792:	4293      	cmp	r3, r2
  402794:	d017      	beq.n	4027c6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402796:	2301      	movs	r3, #1
  402798:	4083      	lsls	r3, r0
  40279a:	4a0d      	ldr	r2, [pc, #52]	; (4027d0 <pmc_enable_periph_clk+0x50>)
  40279c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40279e:	2000      	movs	r0, #0
  4027a0:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4027a2:	4b0b      	ldr	r3, [pc, #44]	; (4027d0 <pmc_enable_periph_clk+0x50>)
  4027a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4027a8:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4027aa:	2301      	movs	r3, #1
  4027ac:	4083      	lsls	r3, r0
  4027ae:	401a      	ands	r2, r3
  4027b0:	4293      	cmp	r3, r2
  4027b2:	d00a      	beq.n	4027ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4027b4:	2301      	movs	r3, #1
  4027b6:	4083      	lsls	r3, r0
  4027b8:	4a05      	ldr	r2, [pc, #20]	; (4027d0 <pmc_enable_periph_clk+0x50>)
  4027ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4027be:	2000      	movs	r0, #0
  4027c0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4027c2:	2001      	movs	r0, #1
  4027c4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4027c6:	2000      	movs	r0, #0
  4027c8:	4770      	bx	lr
  4027ca:	2000      	movs	r0, #0
}
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	400e0600 	.word	0x400e0600

004027d4 <twihs_enable_master_mode>:
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4027d4:	2308      	movs	r3, #8
  4027d6:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4027d8:	2320      	movs	r3, #32
  4027da:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4027dc:	2304      	movs	r3, #4
  4027de:	6003      	str	r3, [r0, #0]
  4027e0:	4770      	bx	lr
  4027e2:	bf00      	nop

004027e4 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4027e4:	4b0f      	ldr	r3, [pc, #60]	; (402824 <twihs_set_speed+0x40>)
  4027e6:	4299      	cmp	r1, r3
  4027e8:	d819      	bhi.n	40281e <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4027ea:	0049      	lsls	r1, r1, #1
  4027ec:	fbb2 f2f1 	udiv	r2, r2, r1
  4027f0:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4027f2:	2aff      	cmp	r2, #255	; 0xff
  4027f4:	d907      	bls.n	402806 <twihs_set_speed+0x22>
  4027f6:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  4027f8:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  4027fa:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4027fc:	2b06      	cmp	r3, #6
  4027fe:	d803      	bhi.n	402808 <twihs_set_speed+0x24>
  402800:	2aff      	cmp	r2, #255	; 0xff
  402802:	d8f9      	bhi.n	4027f8 <twihs_set_speed+0x14>
  402804:	e000      	b.n	402808 <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402806:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402808:	0211      	lsls	r1, r2, #8
  40280a:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  40280c:	041b      	lsls	r3, r3, #16
  40280e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402812:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402814:	b2d2      	uxtb	r2, r2
  402816:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  402818:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  40281a:	2000      	movs	r0, #0
  40281c:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  40281e:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	00061a80 	.word	0x00061a80

00402828 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402828:	b508      	push	{r3, lr}
  40282a:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  40282c:	f04f 31ff 	mov.w	r1, #4294967295
  402830:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  402832:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402834:	2180      	movs	r1, #128	; 0x80
  402836:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  402838:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40283a:	2108      	movs	r1, #8
  40283c:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40283e:	2120      	movs	r1, #32
  402840:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402842:	2104      	movs	r1, #4
  402844:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402846:	6851      	ldr	r1, [r2, #4]
  402848:	6812      	ldr	r2, [r2, #0]
  40284a:	4b03      	ldr	r3, [pc, #12]	; (402858 <twihs_master_init+0x30>)
  40284c:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  40284e:	2801      	cmp	r0, #1
  402850:	bf14      	ite	ne
  402852:	2000      	movne	r0, #0
  402854:	2001      	moveq	r0, #1
  402856:	bd08      	pop	{r3, pc}
  402858:	004027e5 	.word	0x004027e5

0040285c <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  40285c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  40285e:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402860:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  402862:	2a00      	cmp	r2, #0
  402864:	d047      	beq.n	4028f6 <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402866:	2600      	movs	r6, #0
  402868:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40286a:	684b      	ldr	r3, [r1, #4]
  40286c:	021b      	lsls	r3, r3, #8
  40286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402872:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402876:	7c0b      	ldrb	r3, [r1, #16]
  402878:	041b      	lsls	r3, r3, #16
  40287a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40287e:	432b      	orrs	r3, r5
  402880:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402882:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402884:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402886:	b15d      	cbz	r5, 4028a0 <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  402888:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40288a:	2d01      	cmp	r5, #1
  40288c:	dd02      	ble.n	402894 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  40288e:	784e      	ldrb	r6, [r1, #1]
  402890:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402894:	2d02      	cmp	r5, #2
  402896:	dd04      	ble.n	4028a2 <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  402898:	7889      	ldrb	r1, [r1, #2]
  40289a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  40289e:	e000      	b.n	4028a2 <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4028a0:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4028a2:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4028a4:	2301      	movs	r3, #1
  4028a6:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  4028a8:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4028ac:	2702      	movs	r7, #2
  4028ae:	e014      	b.n	4028da <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  4028b0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4028b2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4028b6:	d120      	bne.n	4028fa <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  4028b8:	3901      	subs	r1, #1
  4028ba:	d020      	beq.n	4028fe <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  4028bc:	2a01      	cmp	r2, #1
  4028be:	d104      	bne.n	4028ca <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4028c0:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  4028c2:	f013 0f02 	tst.w	r3, #2
  4028c6:	d0f3      	beq.n	4028b0 <twihs_master_read+0x54>
  4028c8:	e01d      	b.n	402906 <twihs_master_read+0xaa>
  4028ca:	f013 0f02 	tst.w	r3, #2
  4028ce:	d00a      	beq.n	4028e6 <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  4028d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4028d2:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4028d6:	3a01      	subs	r2, #1
  4028d8:	d007      	beq.n	4028ea <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  4028da:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4028dc:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  4028e0:	d10f      	bne.n	402902 <twihs_master_read+0xa6>
  4028e2:	4631      	mov	r1, r6
  4028e4:	e7ea      	b.n	4028bc <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  4028e6:	2a00      	cmp	r2, #0
  4028e8:	d1e2      	bne.n	4028b0 <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4028ea:	6a03      	ldr	r3, [r0, #32]
  4028ec:	f013 0f01 	tst.w	r3, #1
  4028f0:	d0fb      	beq.n	4028ea <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  4028f2:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  4028f4:	e00a      	b.n	40290c <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  4028f6:	2501      	movs	r5, #1
  4028f8:	e008      	b.n	40290c <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  4028fa:	2505      	movs	r5, #5
  4028fc:	e006      	b.n	40290c <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  4028fe:	2509      	movs	r5, #9
  402900:	e004      	b.n	40290c <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402902:	2505      	movs	r5, #5
  402904:	e002      	b.n	40290c <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402906:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402908:	7023      	strb	r3, [r4, #0]
  40290a:	e7ee      	b.n	4028ea <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  40290c:	4628      	mov	r0, r5
  40290e:	bcf0      	pop	{r4, r5, r6, r7}
  402910:	4770      	bx	lr
  402912:	bf00      	nop

00402914 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402914:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  402916:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402918:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  40291a:	2a00      	cmp	r2, #0
  40291c:	d040      	beq.n	4029a0 <twihs_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  40291e:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402920:	2600      	movs	r6, #0
  402922:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402924:	7c0c      	ldrb	r4, [r1, #16]
  402926:	0424      	lsls	r4, r4, #16
  402928:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40292c:	684c      	ldr	r4, [r1, #4]
  40292e:	0224      	lsls	r4, r4, #8
  402930:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402934:	432c      	orrs	r4, r5
  402936:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402938:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40293a:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  40293c:	b15d      	cbz	r5, 402956 <twihs_master_write+0x42>
		return 0;

	val = addr[0];
  40293e:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  402940:	2d01      	cmp	r5, #1
  402942:	dd02      	ble.n	40294a <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  402944:	784e      	ldrb	r6, [r1, #1]
  402946:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  40294a:	2d02      	cmp	r5, #2
  40294c:	dd04      	ble.n	402958 <twihs_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  40294e:	7889      	ldrb	r1, [r1, #2]
  402950:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  402954:	e000      	b.n	402958 <twihs_master_write+0x44>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402956:	2400      	movs	r4, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402958:	60dc      	str	r4, [r3, #12]
  40295a:	e00b      	b.n	402974 <twihs_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  40295c:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  40295e:	f411 7f80 	tst.w	r1, #256	; 0x100
  402962:	d11f      	bne.n	4029a4 <twihs_master_write+0x90>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  402964:	f011 0f04 	tst.w	r1, #4
  402968:	d0f8      	beq.n	40295c <twihs_master_write+0x48>
			continue;
		}
		p_twihs->TWIHS_THR = *buffer++;
  40296a:	f810 1b01 	ldrb.w	r1, [r0], #1
  40296e:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  402970:	3a01      	subs	r2, #1
  402972:	d007      	beq.n	402984 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  402974:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  402976:	f411 7f80 	tst.w	r1, #256	; 0x100
  40297a:	d115      	bne.n	4029a8 <twihs_master_write+0x94>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  40297c:	f011 0f04 	tst.w	r1, #4
  402980:	d0ec      	beq.n	40295c <twihs_master_write+0x48>
  402982:	e7f2      	b.n	40296a <twihs_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  402984:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  402986:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  40298a:	d10f      	bne.n	4029ac <twihs_master_write+0x98>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  40298c:	f012 0f04 	tst.w	r2, #4
  402990:	d0f8      	beq.n	402984 <twihs_master_write+0x70>
			break;
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402992:	2202      	movs	r2, #2
  402994:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402996:	6a1a      	ldr	r2, [r3, #32]
  402998:	f012 0f01 	tst.w	r2, #1
  40299c:	d0fb      	beq.n	402996 <twihs_master_write+0x82>
  40299e:	e006      	b.n	4029ae <twihs_master_write+0x9a>
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  4029a0:	2001      	movs	r0, #1

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  4029a2:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  4029a4:	2005      	movs	r0, #5
  4029a6:	e002      	b.n	4029ae <twihs_master_write+0x9a>
  4029a8:	2005      	movs	r0, #5
  4029aa:	e000      	b.n	4029ae <twihs_master_write+0x9a>
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  4029ac:	2005      	movs	r0, #5

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  4029ae:	bc70      	pop	{r4, r5, r6}
  4029b0:	4770      	bx	lr
  4029b2:	bf00      	nop

004029b4 <twihs_reset>:
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4029b4:	2380      	movs	r3, #128	; 0x80
  4029b6:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_RHR;
  4029b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4029ba:	4770      	bx	lr

004029bc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4029bc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4029be:	23ac      	movs	r3, #172	; 0xac
  4029c0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4029c2:	680b      	ldr	r3, [r1, #0]
  4029c4:	684a      	ldr	r2, [r1, #4]
  4029c6:	fbb3 f3f2 	udiv	r3, r3, r2
  4029ca:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4029cc:	1e5c      	subs	r4, r3, #1
  4029ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4029d2:	4294      	cmp	r4, r2
  4029d4:	d806      	bhi.n	4029e4 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  4029d6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4029d8:	688b      	ldr	r3, [r1, #8]
  4029da:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4029dc:	2350      	movs	r3, #80	; 0x50
  4029de:	6003      	str	r3, [r0, #0]

	return 0;
  4029e0:	2000      	movs	r0, #0
  4029e2:	e000      	b.n	4029e6 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4029e4:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4029e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4029ea:	4770      	bx	lr

004029ec <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4029ec:	2340      	movs	r3, #64	; 0x40
  4029ee:	6003      	str	r3, [r0, #0]
  4029f0:	4770      	bx	lr
  4029f2:	bf00      	nop

004029f4 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  4029f4:	2310      	movs	r3, #16
  4029f6:	6003      	str	r3, [r0, #0]
  4029f8:	4770      	bx	lr
  4029fa:	bf00      	nop

004029fc <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4029fc:	2350      	movs	r3, #80	; 0x50
  4029fe:	6003      	str	r3, [r0, #0]
  402a00:	4770      	bx	lr
  402a02:	bf00      	nop

00402a04 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402a04:	6081      	str	r1, [r0, #8]
  402a06:	4770      	bx	lr

00402a08 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402a08:	6940      	ldr	r0, [r0, #20]
}
  402a0a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402a0e:	4770      	bx	lr

00402a10 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402a10:	6201      	str	r1, [r0, #32]
  402a12:	4770      	bx	lr

00402a14 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402a14:	6943      	ldr	r3, [r0, #20]
  402a16:	f013 0f02 	tst.w	r3, #2
  402a1a:	d002      	beq.n	402a22 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402a1c:	61c1      	str	r1, [r0, #28]
	return 0;
  402a1e:	2000      	movs	r0, #0
  402a20:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402a22:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402a24:	4770      	bx	lr
  402a26:	bf00      	nop

00402a28 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402a28:	6943      	ldr	r3, [r0, #20]
  402a2a:	f013 0f01 	tst.w	r3, #1
  402a2e:	d003      	beq.n	402a38 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402a30:	6983      	ldr	r3, [r0, #24]
  402a32:	700b      	strb	r3, [r1, #0]
	return 0;
  402a34:	2000      	movs	r0, #0
  402a36:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402a38:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402a3a:	4770      	bx	lr

00402a3c <board_init>:




void board_init(void)
{
  402a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a40:	b0a1      	sub	sp, #132	; 0x84
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402a42:	48a5      	ldr	r0, [pc, #660]	; (402cd8 <board_init+0x29c>)
  402a44:	2100      	movs	r1, #0
  402a46:	4ba5      	ldr	r3, [pc, #660]	; (402cdc <board_init+0x2a0>)
  402a48:	4798      	blx	r3
	sysclk_init();
  402a4a:	4ba5      	ldr	r3, [pc, #660]	; (402ce0 <board_init+0x2a4>)
  402a4c:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402a4e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 402da0 <board_init+0x364>
  402a52:	ad1d      	add	r5, sp, #116	; 0x74
  402a54:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402a58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402a5c:	202e      	movs	r0, #46	; 0x2e
  402a5e:	f8df 8344 	ldr.w	r8, [pc, #836]	; 402da4 <board_init+0x368>
  402a62:	47c0      	blx	r8
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  402a64:	202e      	movs	r0, #46	; 0x2e
  402a66:	47c0      	blx	r8
	uart_init(USART_SERIAL, &usart_console_settings);
  402a68:	4c9e      	ldr	r4, [pc, #632]	; (402ce4 <board_init+0x2a8>)
  402a6a:	4620      	mov	r0, r4
  402a6c:	4629      	mov	r1, r5
  402a6e:	4b9e      	ldr	r3, [pc, #632]	; (402ce8 <board_init+0x2ac>)
  402a70:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  402a72:	4620      	mov	r0, r4
  402a74:	4b9d      	ldr	r3, [pc, #628]	; (402cec <board_init+0x2b0>)
  402a76:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  402a78:	4620      	mov	r0, r4
  402a7a:	4b9d      	ldr	r3, [pc, #628]	; (402cf0 <board_init+0x2b4>)
  402a7c:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  402a7e:	4620      	mov	r0, r4
  402a80:	4b9c      	ldr	r3, [pc, #624]	; (402cf4 <board_init+0x2b8>)
  402a82:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(83/GLOBAL_SLOWDOWN));
  402a84:	4620      	mov	r0, r4
  402a86:	2153      	movs	r1, #83	; 0x53
  402a88:	4b9b      	ldr	r3, [pc, #620]	; (402cf8 <board_init+0x2bc>)
  402a8a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  402a8c:	2010      	movs	r0, #16
  402a8e:	47c0      	blx	r8
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  402a90:	489a      	ldr	r0, [pc, #616]	; (402cfc <board_init+0x2c0>)
  402a92:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402a96:	4a9a      	ldr	r2, [pc, #616]	; (402d00 <board_init+0x2c4>)
  402a98:	4e9a      	ldr	r6, [pc, #616]	; (402d04 <board_init+0x2c8>)
  402a9a:	47b0      	blx	r6
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  402a9c:	489a      	ldr	r0, [pc, #616]	; (402d08 <board_init+0x2cc>)
  402a9e:	4d9b      	ldr	r5, [pc, #620]	; (402d0c <board_init+0x2d0>)
  402aa0:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	sendDebugString("LED INITIALIZATION - STARTED\n");
  402aa2:	489b      	ldr	r0, [pc, #620]	; (402d10 <board_init+0x2d4>)
  402aa4:	47a8      	blx	r5
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  402aa6:	489b      	ldr	r0, [pc, #620]	; (402d14 <board_init+0x2d8>)
  402aa8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402ab0:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
  402ab2:	200a      	movs	r0, #10
  402ab4:	47c0      	blx	r8
		pmc_enable_periph_clk(ID_PIOB);
  402ab6:	200b      	movs	r0, #11
  402ab8:	47c0      	blx	r8
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  402aba:	2400      	movs	r4, #0
  402abc:	9400      	str	r4, [sp, #0]
  402abe:	4896      	ldr	r0, [pc, #600]	; (402d18 <board_init+0x2dc>)
  402ac0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402ac4:	4622      	mov	r2, r4
  402ac6:	4623      	mov	r3, r4
  402ac8:	4f94      	ldr	r7, [pc, #592]	; (402d1c <board_init+0x2e0>)
  402aca:	47b8      	blx	r7
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402acc:	9400      	str	r4, [sp, #0]
  402ace:	4892      	ldr	r0, [pc, #584]	; (402d18 <board_init+0x2dc>)
  402ad0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402ad4:	4622      	mov	r2, r4
  402ad6:	4623      	mov	r3, r4
  402ad8:	47b8      	blx	r7
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  402ada:	9400      	str	r4, [sp, #0]
  402adc:	488e      	ldr	r0, [pc, #568]	; (402d18 <board_init+0x2dc>)
  402ade:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402ae2:	4622      	mov	r2, r4
  402ae4:	4623      	mov	r3, r4
  402ae6:	47b8      	blx	r7
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  402ae8:	9400      	str	r4, [sp, #0]
  402aea:	488b      	ldr	r0, [pc, #556]	; (402d18 <board_init+0x2dc>)
  402aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402af0:	4622      	mov	r2, r4
  402af2:	4623      	mov	r3, r4
  402af4:	47b8      	blx	r7
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402af6:	9400      	str	r4, [sp, #0]
  402af8:	4886      	ldr	r0, [pc, #536]	; (402d14 <board_init+0x2d8>)
  402afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402afe:	4622      	mov	r2, r4
  402b00:	4623      	mov	r3, r4
  402b02:	47b8      	blx	r7
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402b04:	9400      	str	r4, [sp, #0]
  402b06:	4884      	ldr	r0, [pc, #528]	; (402d18 <board_init+0x2dc>)
  402b08:	2104      	movs	r1, #4
  402b0a:	4622      	mov	r2, r4
  402b0c:	4623      	mov	r3, r4
  402b0e:	47b8      	blx	r7
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402b10:	9400      	str	r4, [sp, #0]
  402b12:	4881      	ldr	r0, [pc, #516]	; (402d18 <board_init+0x2dc>)
  402b14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b18:	4622      	mov	r2, r4
  402b1a:	4623      	mov	r3, r4
  402b1c:	47b8      	blx	r7
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402b1e:	9400      	str	r4, [sp, #0]
  402b20:	487d      	ldr	r0, [pc, #500]	; (402d18 <board_init+0x2dc>)
  402b22:	2140      	movs	r1, #64	; 0x40
  402b24:	4622      	mov	r2, r4
  402b26:	4623      	mov	r3, r4
  402b28:	47b8      	blx	r7
		
		sendDebugString("LED INITIALIZATION - FINISHED\n");
  402b2a:	487d      	ldr	r0, [pc, #500]	; (402d20 <board_init+0x2e4>)
  402b2c:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402b2e:	487d      	ldr	r0, [pc, #500]	; (402d24 <board_init+0x2e8>)
  402b30:	47a8      	blx	r5
		wdt_disable(WDT);
  402b32:	487d      	ldr	r0, [pc, #500]	; (402d28 <board_init+0x2ec>)
  402b34:	4b7d      	ldr	r3, [pc, #500]	; (402d2c <board_init+0x2f0>)
  402b36:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402b38:	487d      	ldr	r0, [pc, #500]	; (402d30 <board_init+0x2f4>)
  402b3a:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402b3c:	487d      	ldr	r0, [pc, #500]	; (402d34 <board_init+0x2f8>)
  402b3e:	47a8      	blx	r5
		cpu_irq_enable();
  402b40:	4b7d      	ldr	r3, [pc, #500]	; (402d38 <board_init+0x2fc>)
  402b42:	f04f 0201 	mov.w	r2, #1
  402b46:	701a      	strb	r2, [r3, #0]
  402b48:	f3bf 8f5f 	dmb	sy
  402b4c:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402b4e:	487b      	ldr	r0, [pc, #492]	; (402d3c <board_init+0x300>)
  402b50:	47a8      	blx	r5
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("SDRAM INITIALIZATION - STARTED\n");
  402b52:	487b      	ldr	r0, [pc, #492]	; (402d40 <board_init+0x304>)
  402b54:	47a8      	blx	r5
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  402b56:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  402b5a:	f109 090c 	add.w	r9, r9, #12
  402b5e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402b62:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(9)		|
			SDRAMC_CR_TXSR(10)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  402b66:	203e      	movs	r0, #62	; 0x3e
  402b68:	47c0      	blx	r8
	
	pmc_enable_periph_clk(ID_PIOC);
  402b6a:	200c      	movs	r0, #12
  402b6c:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOD);
  402b6e:	2010      	movs	r0, #16
  402b70:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOE);
  402b72:	2011      	movs	r0, #17
  402b74:	47c0      	blx	r8
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  402b76:	f8df 9230 	ldr.w	r9, [pc, #560]	; 402da8 <board_init+0x36c>
  402b7a:	4872      	ldr	r0, [pc, #456]	; (402d44 <board_init+0x308>)
  402b7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b80:	464a      	mov	r2, r9
  402b82:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  402b84:	486f      	ldr	r0, [pc, #444]	; (402d44 <board_init+0x308>)
  402b86:	4649      	mov	r1, r9
  402b88:	2201      	movs	r2, #1
  402b8a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 402dac <board_init+0x370>
  402b8e:	47c8      	blx	r9
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  402b90:	486c      	ldr	r0, [pc, #432]	; (402d44 <board_init+0x308>)
  402b92:	496d      	ldr	r1, [pc, #436]	; (402d48 <board_init+0x30c>)
  402b94:	4622      	mov	r2, r4
  402b96:	f8df a218 	ldr.w	sl, [pc, #536]	; 402db0 <board_init+0x374>
  402b9a:	47d0      	blx	sl
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402b9c:	485e      	ldr	r0, [pc, #376]	; (402d18 <board_init+0x2dc>)
  402b9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ba2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402ba6:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  402ba8:	485b      	ldr	r0, [pc, #364]	; (402d18 <board_init+0x2dc>)
  402baa:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402bae:	4622      	mov	r2, r4
  402bb0:	47c8      	blx	r9
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  402bb2:	4859      	ldr	r0, [pc, #356]	; (402d18 <board_init+0x2dc>)
  402bb4:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402bb8:	2201      	movs	r2, #1
  402bba:	47d0      	blx	sl
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  402bbc:	4856      	ldr	r0, [pc, #344]	; (402d18 <board_init+0x2dc>)
  402bbe:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402bc2:	4a62      	ldr	r2, [pc, #392]	; (402d4c <board_init+0x310>)
  402bc4:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402bc6:	4854      	ldr	r0, [pc, #336]	; (402d18 <board_init+0x2dc>)
  402bc8:	4960      	ldr	r1, [pc, #384]	; (402d4c <board_init+0x310>)
  402bca:	2201      	movs	r2, #1
  402bcc:	47c8      	blx	r9
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402bce:	4852      	ldr	r0, [pc, #328]	; (402d18 <board_init+0x2dc>)
  402bd0:	495e      	ldr	r1, [pc, #376]	; (402d4c <board_init+0x310>)
  402bd2:	4622      	mov	r2, r4
  402bd4:	47d0      	blx	sl
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402bd6:	4849      	ldr	r0, [pc, #292]	; (402cfc <board_init+0x2c0>)
  402bd8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402bdc:	4a5c      	ldr	r2, [pc, #368]	; (402d50 <board_init+0x314>)
  402bde:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402be0:	4846      	ldr	r0, [pc, #280]	; (402cfc <board_init+0x2c0>)
  402be2:	495b      	ldr	r1, [pc, #364]	; (402d50 <board_init+0x314>)
  402be4:	2201      	movs	r2, #1
  402be6:	47c8      	blx	r9
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402be8:	4844      	ldr	r0, [pc, #272]	; (402cfc <board_init+0x2c0>)
  402bea:	4959      	ldr	r1, [pc, #356]	; (402d50 <board_init+0x314>)
  402bec:	4622      	mov	r2, r4
  402bee:	47d0      	blx	sl
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402bf0:	4858      	ldr	r0, [pc, #352]	; (402d54 <board_init+0x318>)
  402bf2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bf6:	223f      	movs	r2, #63	; 0x3f
  402bf8:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402bfa:	4856      	ldr	r0, [pc, #344]	; (402d54 <board_init+0x318>)
  402bfc:	213f      	movs	r1, #63	; 0x3f
  402bfe:	2201      	movs	r2, #1
  402c00:	47c8      	blx	r9
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402c02:	4854      	ldr	r0, [pc, #336]	; (402d54 <board_init+0x318>)
  402c04:	213f      	movs	r1, #63	; 0x3f
  402c06:	4622      	mov	r2, r4
  402c08:	47d0      	blx	sl
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402c0a:	4a53      	ldr	r2, [pc, #332]	; (402d58 <board_init+0x31c>)
  402c0c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402c10:	f043 0310 	orr.w	r3, r3, #16
  402c14:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402c18:	484a      	ldr	r0, [pc, #296]	; (402d44 <board_init+0x308>)
  402c1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402c22:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402c24:	4658      	mov	r0, fp
  402c26:	494d      	ldr	r1, [pc, #308]	; (402d5c <board_init+0x320>)
  402c28:	4b4d      	ldr	r3, [pc, #308]	; (402d60 <board_init+0x324>)
  402c2a:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402c2c:	484d      	ldr	r0, [pc, #308]	; (402d64 <board_init+0x328>)
  402c2e:	47a8      	blx	r5
	//checkSDRAM
	//SdramCheck();
	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402c30:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  402c34:	4621      	mov	r1, r4
  402c36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402c3a:	4b4b      	ldr	r3, [pc, #300]	; (402d68 <board_init+0x32c>)
  402c3c:	4798      	blx	r3
	sendDebugString("SDRAM INITIALIZATION - FINISHED\n");
  402c3e:	484b      	ldr	r0, [pc, #300]	; (402d6c <board_init+0x330>)
  402c40:	47a8      	blx	r5
	/* ######################################
	   ######################################
					 Setup i2c
	   ######################################
	   ###################################### */
	sendDebugString("TWIHS INITIALIZATION - STARTED\n");
  402c42:	484b      	ldr	r0, [pc, #300]	; (402d70 <board_init+0x334>)
  402c44:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402c46:	9400      	str	r4, [sp, #0]
  402c48:	482c      	ldr	r0, [pc, #176]	; (402cfc <board_init+0x2c0>)
  402c4a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c4e:	4622      	mov	r2, r4
  402c50:	4623      	mov	r3, r4
  402c52:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402c54:	4829      	ldr	r0, [pc, #164]	; (402cfc <board_init+0x2c0>)
  402c56:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c5a:	f8df b158 	ldr.w	fp, [pc, #344]	; 402db4 <board_init+0x378>
  402c5e:	47d8      	blx	fp
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402c60:	9400      	str	r4, [sp, #0]
  402c62:	482d      	ldr	r0, [pc, #180]	; (402d18 <board_init+0x2dc>)
  402c64:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c68:	4622      	mov	r2, r4
  402c6a:	4623      	mov	r3, r4
  402c6c:	47b8      	blx	r7
	pio_clear(PIOA,PIO_PA26);
  402c6e:	482a      	ldr	r0, [pc, #168]	; (402d18 <board_init+0x2dc>)
  402c70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c74:	4b3f      	ldr	r3, [pc, #252]	; (402d74 <board_init+0x338>)
  402c76:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TWIHS0);
  402c78:	2013      	movs	r0, #19
  402c7a:	47c0      	blx	r8
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402c7c:	4826      	ldr	r0, [pc, #152]	; (402d18 <board_init+0x2dc>)
  402c7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c82:	2218      	movs	r2, #24
  402c84:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402c86:	9400      	str	r4, [sp, #0]
  402c88:	481c      	ldr	r0, [pc, #112]	; (402cfc <board_init+0x2c0>)
  402c8a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c8e:	4622      	mov	r2, r4
  402c90:	4623      	mov	r3, r4
  402c92:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402c94:	4819      	ldr	r0, [pc, #100]	; (402cfc <board_init+0x2c0>)
  402c96:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c9a:	47d8      	blx	fp
	
	twihs_reset(TWIHS0);
  402c9c:	4836      	ldr	r0, [pc, #216]	; (402d78 <board_init+0x33c>)
  402c9e:	4b37      	ldr	r3, [pc, #220]	; (402d7c <board_init+0x340>)
  402ca0:	4798      	blx	r3
	twihs_enable_master_mode(TWIHS0);
  402ca2:	4835      	ldr	r0, [pc, #212]	; (402d78 <board_init+0x33c>)
  402ca4:	4b36      	ldr	r3, [pc, #216]	; (402d80 <board_init+0x344>)
  402ca6:	4798      	blx	r3
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402ca8:	4b2c      	ldr	r3, [pc, #176]	; (402d5c <board_init+0x320>)
  402caa:	9317      	str	r3, [sp, #92]	; 0x5c
	twihs_opts.speed = 400000;
  402cac:	4b35      	ldr	r3, [pc, #212]	; (402d84 <board_init+0x348>)
  402cae:	9318      	str	r3, [sp, #96]	; 0x60
	twihs_master_init(TWIHS0,&twihs_opts);
  402cb0:	4831      	ldr	r0, [pc, #196]	; (402d78 <board_init+0x33c>)
  402cb2:	a917      	add	r1, sp, #92	; 0x5c
  402cb4:	4b34      	ldr	r3, [pc, #208]	; (402d88 <board_init+0x34c>)
  402cb6:	4798      	blx	r3
	sendDebugString("TWIHS INITIALIZATION - FINISHED\n");
  402cb8:	4834      	ldr	r0, [pc, #208]	; (402d8c <board_init+0x350>)
  402cba:	47a8      	blx	r5
	/* ######################################
	   ######################################
				 Setup Servo Driver
	   ######################################
	   ###################################### */
	sendDebugString("SERVO DRIVER INITIALIZATION - STARTED\n");
  402cbc:	4834      	ldr	r0, [pc, #208]	; (402d90 <board_init+0x354>)
  402cbe:	47a8      	blx	r5
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  402cc0:	2040      	movs	r0, #64	; 0x40
  402cc2:	4b34      	ldr	r3, [pc, #208]	; (402d94 <board_init+0x358>)
  402cc4:	4798      	blx	r3
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  402cc6:	2041      	movs	r0, #65	; 0x41
  402cc8:	4b32      	ldr	r3, [pc, #200]	; (402d94 <board_init+0x358>)
  402cca:	4798      	blx	r3
	sendDebugString("SERVO DRIVER INITIALIZATION - FINISHED\n");
  402ccc:	4832      	ldr	r0, [pc, #200]	; (402d98 <board_init+0x35c>)
  402cce:	47a8      	blx	r5
	   ######################################
			 		Setup Camera
	   ######################################
	   ###################################### */

	sendDebugString("CAMERA INITIALIZATION - STARTED\n");
  402cd0:	4832      	ldr	r0, [pc, #200]	; (402d9c <board_init+0x360>)
  402cd2:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  402cd4:	9400      	str	r4, [sp, #0]
  402cd6:	e06f      	b.n	402db8 <board_init+0x37c>
  402cd8:	400e1810 	.word	0x400e1810
  402cdc:	004008d1 	.word	0x004008d1
  402ce0:	004024cd 	.word	0x004024cd
  402ce4:	400e1e00 	.word	0x400e1e00
  402ce8:	004029bd 	.word	0x004029bd
  402cec:	004029fd 	.word	0x004029fd
  402cf0:	004029ed 	.word	0x004029ed
  402cf4:	004029f5 	.word	0x004029f5
  402cf8:	00402a11 	.word	0x00402a11
  402cfc:	400e1400 	.word	0x400e1400
  402d00:	00040008 	.word	0x00040008
  402d04:	00402551 	.word	0x00402551
  402d08:	0040db10 	.word	0x0040db10
  402d0c:	0040019d 	.word	0x0040019d
  402d10:	0040db74 	.word	0x0040db74
  402d14:	400e1000 	.word	0x400e1000
  402d18:	400e0e00 	.word	0x400e0e00
  402d1c:	0040261d 	.word	0x0040261d
  402d20:	0040db94 	.word	0x0040db94
  402d24:	0040dbb4 	.word	0x0040dbb4
  402d28:	400e1850 	.word	0x400e1850
  402d2c:	004008fd 	.word	0x004008fd
  402d30:	0040dbd8 	.word	0x0040dbd8
  402d34:	0040dbfc 	.word	0x0040dbfc
  402d38:	20400010 	.word	0x20400010
  402d3c:	0040dc24 	.word	0x0040dc24
  402d40:	0040dc4c 	.word	0x0040dc4c
  402d44:	400e1200 	.word	0x400e1200
  402d48:	fffc80ff 	.word	0xfffc80ff
  402d4c:	001c0001 	.word	0x001c0001
  402d50:	2083e000 	.word	0x2083e000
  402d54:	400e1600 	.word	0x400e1600
  402d58:	40088000 	.word	0x40088000
  402d5c:	11e1a300 	.word	0x11e1a300
  402d60:	00400795 	.word	0x00400795
  402d64:	0040dc6c 	.word	0x0040dc6c
  402d68:	0040e765 	.word	0x0040e765
  402d6c:	0040dc88 	.word	0x0040dc88
  402d70:	0040dcac 	.word	0x0040dcac
  402d74:	0040254d 	.word	0x0040254d
  402d78:	40018000 	.word	0x40018000
  402d7c:	004029b5 	.word	0x004029b5
  402d80:	004027d5 	.word	0x004027d5
  402d84:	00061a80 	.word	0x00061a80
  402d88:	00402829 	.word	0x00402829
  402d8c:	0040dccc 	.word	0x0040dccc
  402d90:	0040dcf0 	.word	0x0040dcf0
  402d94:	00403465 	.word	0x00403465
  402d98:	0040dd18 	.word	0x0040dd18
  402d9c:	0040dd40 	.word	0x0040dd40
  402da0:	0040daf8 	.word	0x0040daf8
  402da4:	00402781 	.word	0x00402781
  402da8:	fffc00ff 	.word	0xfffc00ff
  402dac:	00402645 	.word	0x00402645
  402db0:	0040253d 	.word	0x0040253d
  402db4:	00402549 	.word	0x00402549
  402db8:	48ab      	ldr	r0, [pc, #684]	; (403068 <board_init+0x62c>)
  402dba:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402dbe:	4622      	mov	r2, r4
  402dc0:	4623      	mov	r3, r4
  402dc2:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD10);
  402dc4:	48a8      	ldr	r0, [pc, #672]	; (403068 <board_init+0x62c>)
  402dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402dca:	47d8      	blx	fp
	delay_ms(10);
  402dcc:	48a7      	ldr	r0, [pc, #668]	; (40306c <board_init+0x630>)
  402dce:	4ba8      	ldr	r3, [pc, #672]	; (403070 <board_init+0x634>)
  402dd0:	4798      	blx	r3
	pio_clear(PIOD,PIO_PD10);
  402dd2:	48a5      	ldr	r0, [pc, #660]	; (403068 <board_init+0x62c>)
  402dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402dd8:	4ba6      	ldr	r3, [pc, #664]	; (403074 <board_init+0x638>)
  402dda:	4798      	blx	r3
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  402ddc:	4da6      	ldr	r5, [pc, #664]	; (403078 <board_init+0x63c>)
  402dde:	48a2      	ldr	r0, [pc, #648]	; (403068 <board_init+0x62c>)
  402de0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402de4:	462a      	mov	r2, r5
  402de6:	47b0      	blx	r6
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	
	pio_pull_up(PIOD,
  402de8:	489f      	ldr	r0, [pc, #636]	; (403068 <board_init+0x62c>)
  402dea:	4629      	mov	r1, r5
  402dec:	4622      	mov	r2, r4
  402dee:	47d0      	blx	sl
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_pull_down(PIOD,
  402df0:	489d      	ldr	r0, [pc, #628]	; (403068 <board_init+0x62c>)
  402df2:	4629      	mov	r1, r5
  402df4:	2201      	movs	r2, #1
  402df6:	47c8      	blx	r9
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,1);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  402df8:	48a0      	ldr	r0, [pc, #640]	; (40307c <board_init+0x640>)
  402dfa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402dfe:	2208      	movs	r2, #8
  402e00:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  402e02:	489e      	ldr	r0, [pc, #632]	; (40307c <board_init+0x640>)
  402e04:	2108      	movs	r1, #8
  402e06:	4622      	mov	r2, r4
  402e08:	47d0      	blx	sl
	pio_pull_down(PIOB,1<<3,1);
  402e0a:	489c      	ldr	r0, [pc, #624]	; (40307c <board_init+0x640>)
  402e0c:	2108      	movs	r1, #8
  402e0e:	2201      	movs	r2, #1
  402e10:	47c8      	blx	r9
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  402e12:	489b      	ldr	r0, [pc, #620]	; (403080 <board_init+0x644>)
  402e14:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e18:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  402e1c:	47b0      	blx	r6
	1<<27	|
	1<<24	);
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_B,
  402e1e:	4898      	ldr	r0, [pc, #608]	; (403080 <board_init+0x644>)
  402e20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e24:	f44f 7208 	mov.w	r2, #544	; 0x220
  402e28:	47b0      	blx	r6
		1<<9	|
		1<<5	);
	
	pio_pull_up(PIOA,
  402e2a:	4d96      	ldr	r5, [pc, #600]	; (403084 <board_init+0x648>)
  402e2c:	4894      	ldr	r0, [pc, #592]	; (403080 <board_init+0x644>)
  402e2e:	4629      	mov	r1, r5
  402e30:	4622      	mov	r2, r4
  402e32:	47d0      	blx	sl
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pio_pull_down(PIOA,
  402e34:	4892      	ldr	r0, [pc, #584]	; (403080 <board_init+0x644>)
  402e36:	4629      	mov	r1, r5
  402e38:	2201      	movs	r2, #1
  402e3a:	47c8      	blx	r9
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,1);
	
	pmc_enable_periph_clk(ID_ISI);
  402e3c:	203b      	movs	r0, #59	; 0x3b
  402e3e:	47c0      	blx	r8
	
	//set camera to 640x480
	SetupCameraYUVVGA();
  402e40:	4b91      	ldr	r3, [pc, #580]	; (403088 <board_init+0x64c>)
  402e42:	4798      	blx	r3
 */
static inline void isi_reset(Isi *p_isi)
{
	/* Resets the image sensor interface.
	   Finish capturing the current frame and then shut down the module. */
	p_isi->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  402e44:	2206      	movs	r2, #6
  402e46:	4b91      	ldr	r3, [pc, #580]	; (40308c <board_init+0x650>)
  402e48:	625a      	str	r2, [r3, #36]	; 0x24
	/* wait Software reset has completed successfully. */
	while((p_isi->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST);
  402e4a:	461a      	mov	r2, r3
  402e4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402e4e:	f013 0f04 	tst.w	r3, #4
  402e52:	d0fb      	beq.n	402e4c <board_init+0x410>
	//Optional Test Mode
	//write_SCCB(0x8D,1<<4);
	isi_reset(ISI);
	
	struct isi_config_t isiConf;
	isiConf.hpol = 1;
  402e54:	2601      	movs	r6, #1
  402e56:	f88d 6048 	strb.w	r6, [sp, #72]	; 0x48
	isiConf.vpol = 1;
  402e5a:	f88d 6049 	strb.w	r6, [sp, #73]	; 0x49
	isiConf.pck_plo = 0;
  402e5e:	2500      	movs	r5, #0
  402e60:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
	isiConf.emb_sync = 0;
  402e64:	f88d 504b 	strb.w	r5, [sp, #75]	; 0x4b
	isiConf.crc_sync = 0;
  402e68:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
	isiConf.sld = 1;
  402e6c:	f88d 604e 	strb.w	r6, [sp, #78]	; 0x4e
	isiConf.sfd =0;
  402e70:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	isiConf.image_fmt = ISI_INPUT_YUV;
  402e74:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	isiConf.image_hsize = 640;
  402e78:	f44f 7820 	mov.w	r8, #640	; 0x280
  402e7c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
	isiConf.image_vsize = 480;
  402e80:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
  402e84:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
	isiConf.thmask = 2;
  402e88:	2302      	movs	r3, #2
  402e8a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	

	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402e8e:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  402e92:	4620      	mov	r0, r4
  402e94:	4629      	mov	r1, r5
  402e96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402e9a:	4b7d      	ldr	r3, [pc, #500]	; (403090 <board_init+0x654>)
  402e9c:	4798      	blx	r3
	struct isi_frame_buffer_descriptors* isiFBD0 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  402e9e:	200c      	movs	r0, #12
  402ea0:	f8df a25c 	ldr.w	sl, [pc, #604]	; 403100 <board_init+0x6c4>
  402ea4:	47d0      	blx	sl
  402ea6:	4607      	mov	r7, r0
	struct isi_frame_buffer_descriptors* isiFBD1 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  402ea8:	200c      	movs	r0, #12
  402eaa:	47d0      	blx	sl
	
	isiFBD0->next = isiFBD1;
  402eac:	60b8      	str	r0, [r7, #8]
	isiFBD0->current =CAM_FRAME0_ADDR;
  402eae:	603c      	str	r4, [r7, #0]
	isiFBD0->control =0x1;
  402eb0:	607e      	str	r6, [r7, #4]
	
	isiFBD1->next = isiFBD0;
  402eb2:	6087      	str	r7, [r0, #8]
	isiFBD1->current =CAM_FRAME1_ADDR;
  402eb4:	4b77      	ldr	r3, [pc, #476]	; (403094 <board_init+0x658>)
  402eb6:	6003      	str	r3, [r0, #0]
	isiFBD1->control =0x1;
  402eb8:	6046      	str	r6, [r0, #4]
	
	isi_init(ISI,&isiConf);
  402eba:	4c74      	ldr	r4, [pc, #464]	; (40308c <board_init+0x650>)
  402ebc:	4620      	mov	r0, r4
  402ebe:	a912      	add	r1, sp, #72	; 0x48
  402ec0:	4b75      	ldr	r3, [pc, #468]	; (403098 <board_init+0x65c>)
  402ec2:	4798      	blx	r3
	//isi_set_dma_codec_path(ISI,0,1,0,0,0);
	//ISI->ISI_PDECF = 2*16;
	isi_set_dma_preview_path(ISI,0,isiFBD0,0x01,isiFBD0->current);
  402ec4:	683b      	ldr	r3, [r7, #0]
  402ec6:	9300      	str	r3, [sp, #0]
  402ec8:	4620      	mov	r0, r4
  402eca:	4629      	mov	r1, r5
  402ecc:	463a      	mov	r2, r7
  402ece:	4633      	mov	r3, r6
  402ed0:	4d72      	ldr	r5, [pc, #456]	; (40309c <board_init+0x660>)
  402ed2:	47a8      	blx	r5
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  402ed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402ed6:	4333      	orrs	r3, r6
  402ed8:	63a3      	str	r3, [r4, #56]	; 0x38
	isi_dma_channel_enable(ISI,1);
	
	isi_size_configure(ISI,480,640,320,320);
  402eda:	f44f 73a0 	mov.w	r3, #320	; 0x140
  402ede:	9300      	str	r3, [sp, #0]
  402ee0:	4620      	mov	r0, r4
  402ee2:	4649      	mov	r1, r9
  402ee4:	4642      	mov	r2, r8
  402ee6:	4d6e      	ldr	r5, [pc, #440]	; (4030a0 <board_init+0x664>)
  402ee8:	47a8      	blx	r5
 *
 * \param p_isi  Pointer to a ISI instance.
 */
static inline void isi_enable(Isi *p_isi)
{
	p_isi->ISI_CR |= ISI_CR_ISI_EN;
  402eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402eec:	4333      	orrs	r3, r6
  402eee:	6263      	str	r3, [r4, #36]	; 0x24
	while((p_isi->ISI_SR & ISI_CR_ISI_EN) != ISI_CR_ISI_EN);
  402ef0:	4622      	mov	r2, r4
  402ef2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402ef4:	f013 0f01 	tst.w	r3, #1
  402ef8:	d0fb      	beq.n	402ef2 <board_init+0x4b6>
	//ISI->ISI_PDECF = 32;
	isi_enable(ISI);
	sendDebugString("CAMERA INITIALIZATION - FINISHED\n");
  402efa:	486a      	ldr	r0, [pc, #424]	; (4030a4 <board_init+0x668>)
  402efc:	4c6a      	ldr	r4, [pc, #424]	; (4030a8 <board_init+0x66c>)
  402efe:	47a0      	blx	r4
	   ######################################
			 	Setup Wireless Module
	   ######################################
	   ###################################### */
	
		sendDebugString("WIRELESS MODULE INITIALIZATION - STARTED\n");
  402f00:	486a      	ldr	r0, [pc, #424]	; (4030ac <board_init+0x670>)
  402f02:	47a0      	blx	r4
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  402f04:	2300      	movs	r3, #0
  402f06:	f88d 3020 	strb.w	r3, [sp, #32]
	    qspiConf.loopback_en = 0;
  402f0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	    qspiConf.wait_data_for_transfer = 0;
  402f0e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	    qspiConf.csmode = 0;
  402f12:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  402f16:	9309      	str	r3, [sp, #36]	; 0x24
	    qspiConf.baudrate = 20000000;
  402f18:	4a65      	ldr	r2, [pc, #404]	; (4030b0 <board_init+0x674>)
  402f1a:	920e      	str	r2, [sp, #56]	; 0x38
		qspiConf.min_delay_qcs = 4;
  402f1c:	2204      	movs	r2, #4
  402f1e:	920a      	str	r2, [sp, #40]	; 0x28
		qspiConf.delay_between_ct = 0;
  402f20:	930b      	str	r3, [sp, #44]	; 0x2c
		qspiConf.clock_polarity = 0;
  402f22:	930c      	str	r3, [sp, #48]	; 0x30
		qspiConf.clock_phase = 0;
  402f24:	930d      	str	r3, [sp, #52]	; 0x34
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402f26:	4d56      	ldr	r5, [pc, #344]	; (403080 <board_init+0x644>)
  402f28:	4628      	mov	r0, r5
  402f2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f2e:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  402f32:	4c60      	ldr	r4, [pc, #384]	; (4030b4 <board_init+0x678>)
  402f34:	47a0      	blx	r4
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  402f36:	4628      	mov	r0, r5
  402f38:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  402f3c:	2201      	movs	r2, #1
  402f3e:	4b5e      	ldr	r3, [pc, #376]	; (4030b8 <board_init+0x67c>)
  402f40:	4798      	blx	r3
		1<<13	|
		1<<14	|
		1<<11,1);
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  402f42:	4849      	ldr	r0, [pc, #292]	; (403068 <board_init+0x62c>)
  402f44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402f4c:	47a0      	blx	r4
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  402f4e:	202b      	movs	r0, #43	; 0x2b
  402f50:	4b5a      	ldr	r3, [pc, #360]	; (4030bc <board_init+0x680>)
  402f52:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  402f54:	2202      	movs	r2, #2
  402f56:	4b5a      	ldr	r3, [pc, #360]	; (4030c0 <board_init+0x684>)
  402f58:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  402f5a:	461a      	mov	r2, r3
  402f5c:	6913      	ldr	r3, [r2, #16]
  402f5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402f62:	d1fb      	bne.n	402f5c <board_init+0x520>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  402f64:	4c56      	ldr	r4, [pc, #344]	; (4030c0 <board_init+0x684>)
  402f66:	2380      	movs	r3, #128	; 0x80
  402f68:	6023      	str	r3, [r4, #0]

		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  402f6a:	4620      	mov	r0, r4
  402f6c:	a908      	add	r1, sp, #32
  402f6e:	4b55      	ldr	r3, [pc, #340]	; (4030c4 <board_init+0x688>)
  402f70:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  402f72:	2301      	movs	r3, #1
  402f74:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  402f76:	4622      	mov	r2, r4
  402f78:	6913      	ldr	r3, [r2, #16]
  402f7a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402f7e:	d0fb      	beq.n	402f78 <board_init+0x53c>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  402f80:	2202      	movs	r2, #2
  402f82:	4b4f      	ldr	r3, [pc, #316]	; (4030c0 <board_init+0x684>)
  402f84:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  402f86:	461a      	mov	r2, r3
  402f88:	6913      	ldr	r3, [r2, #16]
  402f8a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402f8e:	d1fb      	bne.n	402f88 <board_init+0x54c>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  402f90:	4c4b      	ldr	r4, [pc, #300]	; (4030c0 <board_init+0x684>)
  402f92:	2380      	movs	r3, #128	; 0x80
  402f94:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  402f96:	4620      	mov	r0, r4
  402f98:	a908      	add	r1, sp, #32
  402f9a:	4b4a      	ldr	r3, [pc, #296]	; (4030c4 <board_init+0x688>)
  402f9c:	4798      	blx	r3
		delay_ms(100);
  402f9e:	484a      	ldr	r0, [pc, #296]	; (4030c8 <board_init+0x68c>)
  402fa0:	4b33      	ldr	r3, [pc, #204]	; (403070 <board_init+0x634>)
  402fa2:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  402fa4:	2301      	movs	r3, #1
  402fa6:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  402fa8:	4622      	mov	r2, r4
  402faa:	6913      	ldr	r3, [r2, #16]
  402fac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402fb0:	d0fb      	beq.n	402faa <board_init+0x56e>
		qspi_enable(QSPI);
		delay_ms(100);
  402fb2:	4845      	ldr	r0, [pc, #276]	; (4030c8 <board_init+0x68c>)
  402fb4:	4b2e      	ldr	r3, [pc, #184]	; (403070 <board_init+0x634>)
  402fb6:	4798      	blx	r3
		//DW1000_initialise();
		sendDebugString("WIRELESS MODULE INITIALIZATION - FINISHED\n");
  402fb8:	4844      	ldr	r0, [pc, #272]	; (4030cc <board_init+0x690>)
  402fba:	4c3b      	ldr	r4, [pc, #236]	; (4030a8 <board_init+0x66c>)
  402fbc:	47a0      	blx	r4
	/* ######################################
	   ######################################
			 		Setup ADC
	   ######################################
	   ###################################### */
		sendDebugString("ADC INITIALIZATION - STARTED\n");
  402fbe:	4844      	ldr	r0, [pc, #272]	; (4030d0 <board_init+0x694>)
  402fc0:	47a0      	blx	r4
		struct afec_config confDefaults;
		pmc_enable_periph_clk(AFEC0);
  402fc2:	4d44      	ldr	r5, [pc, #272]	; (4030d4 <board_init+0x698>)
  402fc4:	4628      	mov	r0, r5
  402fc6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4030bc <board_init+0x680>
  402fca:	47c8      	blx	r9
		
		afec_enable(AFEC0);
  402fcc:	4628      	mov	r0, r5
  402fce:	f8df 8134 	ldr.w	r8, [pc, #308]	; 403104 <board_init+0x6c8>
  402fd2:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  402fd4:	a802      	add	r0, sp, #8
  402fd6:	4f40      	ldr	r7, [pc, #256]	; (4030d8 <board_init+0x69c>)
  402fd8:	47b8      	blx	r7
		afec_init(AFEC0,&confDefaults);
  402fda:	4628      	mov	r0, r5
  402fdc:	a902      	add	r1, sp, #8
  402fde:	4e3f      	ldr	r6, [pc, #252]	; (4030dc <board_init+0x6a0>)
  402fe0:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  402fe2:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402fe4:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  402fe8:	606b      	str	r3, [r5, #4]
		afec_set_trigger(AFEC0,AFEC_TRIG_SW);
		
		pmc_enable_periph_clk(AFEC1);
  402fea:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  402fee:	4628      	mov	r0, r5
  402ff0:	47c8      	blx	r9
		
		afec_enable(AFEC1);
  402ff2:	4628      	mov	r0, r5
  402ff4:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  402ff6:	a802      	add	r0, sp, #8
  402ff8:	47b8      	blx	r7
		afec_init(AFEC1,&confDefaults);
  402ffa:	4628      	mov	r0, r5
  402ffc:	a902      	add	r1, sp, #8
  402ffe:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  403000:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403002:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403006:	606b      	str	r3, [r5, #4]
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403008:	2601      	movs	r6, #1
  40300a:	616e      	str	r6, [r5, #20]
		afec_set_trigger(AFEC1,AFEC_TRIG_SW);
		
		afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
		
		pio_pull_up(PIOB,1<<1,0);
  40300c:	f505 25fa 	add.w	r5, r5, #512000	; 0x7d000
  403010:	4628      	mov	r0, r5
  403012:	2102      	movs	r1, #2
  403014:	2200      	movs	r2, #0
  403016:	4b28      	ldr	r3, [pc, #160]	; (4030b8 <board_init+0x67c>)
  403018:	4798      	blx	r3
		pio_pull_down(PIOB,1<<1,0);
  40301a:	4628      	mov	r0, r5
  40301c:	2102      	movs	r1, #2
  40301e:	2200      	movs	r2, #0
  403020:	4b2f      	ldr	r3, [pc, #188]	; (4030e0 <board_init+0x6a4>)
  403022:	4798      	blx	r3
		sendDebugString("ADC INITIALIZATION - FINISHED\n");
  403024:	482f      	ldr	r0, [pc, #188]	; (4030e4 <board_init+0x6a8>)
  403026:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup SWITCHES
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  403028:	482f      	ldr	r0, [pc, #188]	; (4030e8 <board_init+0x6ac>)
  40302a:	47a0      	blx	r4
		pio_set_input(PIOC,1<<12,PIO_PULLUP | PIO_DEBOUNCE);
  40302c:	4f2f      	ldr	r7, [pc, #188]	; (4030ec <board_init+0x6b0>)
  40302e:	4638      	mov	r0, r7
  403030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403034:	2209      	movs	r2, #9
  403036:	4d2e      	ldr	r5, [pc, #184]	; (4030f0 <board_init+0x6b4>)
  403038:	47a8      	blx	r5
		pio_set_input(PIOC,1<<11,PIO_PULLUP | PIO_DEBOUNCE);
  40303a:	4638      	mov	r0, r7
  40303c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403040:	2209      	movs	r2, #9
  403042:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  403044:	482b      	ldr	r0, [pc, #172]	; (4030f4 <board_init+0x6b8>)
  403046:	47a0      	blx	r4
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIFERAL IRQ INITIALIZATION - STARTED\n");
  403048:	482b      	ldr	r0, [pc, #172]	; (4030f8 <board_init+0x6bc>)
  40304a:	47a0      	blx	r4
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  40304c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  403050:	4b0e      	ldr	r3, [pc, #56]	; (40308c <board_init+0x650>)
  403052:	62da      	str	r2, [r3, #44]	; 0x2c

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403054:	4d29      	ldr	r5, [pc, #164]	; (4030fc <board_init+0x6c0>)
  403056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40305a:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40305e:	22e0      	movs	r2, #224	; 0xe0
  403060:	f885 233b 	strb.w	r2, [r5, #827]	; 0x33b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403064:	606b      	str	r3, [r5, #4]
  403066:	e04f      	b.n	403108 <board_init+0x6cc>
  403068:	400e1400 	.word	0x400e1400
  40306c:	0007b784 	.word	0x0007b784
  403070:	20400001 	.word	0x20400001
  403074:	0040254d 	.word	0x0040254d
  403078:	1b601800 	.word	0x1b601800
  40307c:	400e1000 	.word	0x400e1000
  403080:	400e0e00 	.word	0x400e0e00
  403084:	09000220 	.word	0x09000220
  403088:	004035e9 	.word	0x004035e9
  40308c:	4004c000 	.word	0x4004c000
  403090:	0040e765 	.word	0x0040e765
  403094:	70258000 	.word	0x70258000
  403098:	004003e1 	.word	0x004003e1
  40309c:	0040053d 	.word	0x0040053d
  4030a0:	00400491 	.word	0x00400491
  4030a4:	0040dd64 	.word	0x0040dd64
  4030a8:	0040019d 	.word	0x0040019d
  4030ac:	0040dd88 	.word	0x0040dd88
  4030b0:	01312d00 	.word	0x01312d00
  4030b4:	00402551 	.word	0x00402551
  4030b8:	0040253d 	.word	0x0040253d
  4030bc:	00402781 	.word	0x00402781
  4030c0:	4007c000 	.word	0x4007c000
  4030c4:	00400615 	.word	0x00400615
  4030c8:	004d2b25 	.word	0x004d2b25
  4030cc:	0040ddb4 	.word	0x0040ddb4
  4030d0:	0040dde0 	.word	0x0040dde0
  4030d4:	4003c000 	.word	0x4003c000
  4030d8:	00400265 	.word	0x00400265
  4030dc:	00400295 	.word	0x00400295
  4030e0:	00402645 	.word	0x00402645
  4030e4:	0040de00 	.word	0x0040de00
  4030e8:	0040de20 	.word	0x0040de20
  4030ec:	400e1200 	.word	0x400e1200
  4030f0:	004025e5 	.word	0x004025e5
  4030f4:	0040de44 	.word	0x0040de44
  4030f8:	0040de68 	.word	0x0040de68
  4030fc:	e000e100 	.word	0xe000e100
  403100:	00407b5d 	.word	0x00407b5d
  403104:	0040038d 	.word	0x0040038d
		NVIC_ClearPendingIRQ(ISI_IRQn);
		NVIC_SetPriority(ISI_IRQn,7);
		NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART4,UART_IER_RXRDY);
  403108:	4808      	ldr	r0, [pc, #32]	; (40312c <board_init+0x6f0>)
  40310a:	4631      	mov	r1, r6
  40310c:	4b08      	ldr	r3, [pc, #32]	; (403130 <board_init+0x6f4>)
  40310e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  403114:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403118:	22c0      	movs	r2, #192	; 0xc0
  40311a:	f885 232e 	strb.w	r2, [r5, #814]	; 0x32e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40311e:	606b      	str	r3, [r5, #4]
		NVIC_ClearPendingIRQ(UART4_IRQn);
		NVIC_SetPriority(UART4_IRQn,6);
		NVIC_EnableIRQ(UART4_IRQn);
		sendDebugString("PERIFERAL IRQ INITIALIZATION - FINISHED\n");
  403120:	4804      	ldr	r0, [pc, #16]	; (403134 <board_init+0x6f8>)
  403122:	47a0      	blx	r4
}
  403124:	b021      	add	sp, #132	; 0x84
  403126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40312a:	bf00      	nop
  40312c:	400e1e00 	.word	0x400e1e00
  403130:	00402a05 	.word	0x00402a05
  403134:	0040de90 	.word	0x0040de90

00403138 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  403138:	e7fe      	b.n	403138 <Dummy_Handler>
  40313a:	bf00      	nop

0040313c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40313c:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40313e:	4b19      	ldr	r3, [pc, #100]	; (4031a4 <Reset_Handler+0x68>)
  403140:	4a19      	ldr	r2, [pc, #100]	; (4031a8 <Reset_Handler+0x6c>)
  403142:	429a      	cmp	r2, r3
  403144:	d003      	beq.n	40314e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  403146:	4b19      	ldr	r3, [pc, #100]	; (4031ac <Reset_Handler+0x70>)
  403148:	4a16      	ldr	r2, [pc, #88]	; (4031a4 <Reset_Handler+0x68>)
  40314a:	429a      	cmp	r2, r3
  40314c:	d304      	bcc.n	403158 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40314e:	4b18      	ldr	r3, [pc, #96]	; (4031b0 <Reset_Handler+0x74>)
  403150:	4a18      	ldr	r2, [pc, #96]	; (4031b4 <Reset_Handler+0x78>)
  403152:	429a      	cmp	r2, r3
  403154:	d310      	bcc.n	403178 <Reset_Handler+0x3c>
  403156:	e01b      	b.n	403190 <Reset_Handler+0x54>
  403158:	4912      	ldr	r1, [pc, #72]	; (4031a4 <Reset_Handler+0x68>)
  40315a:	1d0a      	adds	r2, r1, #4
  40315c:	4b16      	ldr	r3, [pc, #88]	; (4031b8 <Reset_Handler+0x7c>)
  40315e:	1a9b      	subs	r3, r3, r2
  403160:	f023 0303 	bic.w	r3, r3, #3
  403164:	3304      	adds	r3, #4
  403166:	4a10      	ldr	r2, [pc, #64]	; (4031a8 <Reset_Handler+0x6c>)
  403168:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40316a:	f852 0b04 	ldr.w	r0, [r2], #4
  40316e:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  403172:	429a      	cmp	r2, r3
  403174:	d1f9      	bne.n	40316a <Reset_Handler+0x2e>
  403176:	e7ea      	b.n	40314e <Reset_Handler+0x12>
  403178:	4b10      	ldr	r3, [pc, #64]	; (4031bc <Reset_Handler+0x80>)
  40317a:	4a11      	ldr	r2, [pc, #68]	; (4031c0 <Reset_Handler+0x84>)
  40317c:	1ad2      	subs	r2, r2, r3
  40317e:	f022 0203 	bic.w	r2, r2, #3
  403182:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403184:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403186:	2100      	movs	r1, #0
  403188:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40318c:	4293      	cmp	r3, r2
  40318e:	d1fb      	bne.n	403188 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403190:	4a0c      	ldr	r2, [pc, #48]	; (4031c4 <Reset_Handler+0x88>)
  403192:	4b0d      	ldr	r3, [pc, #52]	; (4031c8 <Reset_Handler+0x8c>)
  403194:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403198:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40319a:	4b0c      	ldr	r3, [pc, #48]	; (4031cc <Reset_Handler+0x90>)
  40319c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40319e:	4b0c      	ldr	r3, [pc, #48]	; (4031d0 <Reset_Handler+0x94>)
  4031a0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4031a2:	e7fe      	b.n	4031a2 <Reset_Handler+0x66>
  4031a4:	20400000 	.word	0x20400000
  4031a8:	0040e794 	.word	0x0040e794
  4031ac:	204008c0 	.word	0x204008c0
  4031b0:	2040c444 	.word	0x2040c444
  4031b4:	204008c0 	.word	0x204008c0
  4031b8:	204008c3 	.word	0x204008c3
  4031bc:	204008c4 	.word	0x204008c4
  4031c0:	2040c447 	.word	0x2040c447
  4031c4:	e000ed00 	.word	0xe000ed00
  4031c8:	00400000 	.word	0x00400000
  4031cc:	00407ae5 	.word	0x00407ae5
  4031d0:	00404a5d 	.word	0x00404a5d

004031d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4031d4:	4b3d      	ldr	r3, [pc, #244]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  4031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031d8:	f003 0303 	and.w	r3, r3, #3
  4031dc:	2b01      	cmp	r3, #1
  4031de:	d012      	beq.n	403206 <SystemCoreClockUpdate+0x32>
  4031e0:	b113      	cbz	r3, 4031e8 <SystemCoreClockUpdate+0x14>
  4031e2:	2b02      	cmp	r3, #2
  4031e4:	d02c      	beq.n	403240 <SystemCoreClockUpdate+0x6c>
  4031e6:	e05a      	b.n	40329e <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4031e8:	4b39      	ldr	r3, [pc, #228]	; (4032d0 <SystemCoreClockUpdate+0xfc>)
  4031ea:	695b      	ldr	r3, [r3, #20]
  4031ec:	f013 0f80 	tst.w	r3, #128	; 0x80
  4031f0:	d004      	beq.n	4031fc <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4031f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4031f6:	4b37      	ldr	r3, [pc, #220]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  4031f8:	601a      	str	r2, [r3, #0]
  4031fa:	e050      	b.n	40329e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4031fc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  403200:	4b34      	ldr	r3, [pc, #208]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  403202:	601a      	str	r2, [r3, #0]
  403204:	e04b      	b.n	40329e <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403206:	4b31      	ldr	r3, [pc, #196]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  403208:	6a1b      	ldr	r3, [r3, #32]
  40320a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40320e:	d003      	beq.n	403218 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403210:	4a31      	ldr	r2, [pc, #196]	; (4032d8 <SystemCoreClockUpdate+0x104>)
  403212:	4b30      	ldr	r3, [pc, #192]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  403214:	601a      	str	r2, [r3, #0]
  403216:	e042      	b.n	40329e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403218:	4a30      	ldr	r2, [pc, #192]	; (4032dc <SystemCoreClockUpdate+0x108>)
  40321a:	4b2e      	ldr	r3, [pc, #184]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  40321c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40321e:	4b2b      	ldr	r3, [pc, #172]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  403220:	6a1b      	ldr	r3, [r3, #32]
  403222:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403226:	2b10      	cmp	r3, #16
  403228:	d002      	beq.n	403230 <SystemCoreClockUpdate+0x5c>
  40322a:	2b20      	cmp	r3, #32
  40322c:	d004      	beq.n	403238 <SystemCoreClockUpdate+0x64>
  40322e:	e036      	b.n	40329e <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403230:	4a2b      	ldr	r2, [pc, #172]	; (4032e0 <SystemCoreClockUpdate+0x10c>)
  403232:	4b28      	ldr	r3, [pc, #160]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  403234:	601a      	str	r2, [r3, #0]
          break;
  403236:	e032      	b.n	40329e <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403238:	4a27      	ldr	r2, [pc, #156]	; (4032d8 <SystemCoreClockUpdate+0x104>)
  40323a:	4b26      	ldr	r3, [pc, #152]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  40323c:	601a      	str	r2, [r3, #0]
          break;
  40323e:	e02e      	b.n	40329e <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403240:	4b22      	ldr	r3, [pc, #136]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  403242:	6a1b      	ldr	r3, [r3, #32]
  403244:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403248:	d003      	beq.n	403252 <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40324a:	4a23      	ldr	r2, [pc, #140]	; (4032d8 <SystemCoreClockUpdate+0x104>)
  40324c:	4b21      	ldr	r3, [pc, #132]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  40324e:	601a      	str	r2, [r3, #0]
  403250:	e012      	b.n	403278 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403252:	4a22      	ldr	r2, [pc, #136]	; (4032dc <SystemCoreClockUpdate+0x108>)
  403254:	4b1f      	ldr	r3, [pc, #124]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  403256:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403258:	4b1c      	ldr	r3, [pc, #112]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  40325a:	6a1b      	ldr	r3, [r3, #32]
  40325c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403260:	2b10      	cmp	r3, #16
  403262:	d002      	beq.n	40326a <SystemCoreClockUpdate+0x96>
  403264:	2b20      	cmp	r3, #32
  403266:	d004      	beq.n	403272 <SystemCoreClockUpdate+0x9e>
  403268:	e006      	b.n	403278 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40326a:	4a1d      	ldr	r2, [pc, #116]	; (4032e0 <SystemCoreClockUpdate+0x10c>)
  40326c:	4b19      	ldr	r3, [pc, #100]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  40326e:	601a      	str	r2, [r3, #0]
          break;
  403270:	e002      	b.n	403278 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403272:	4a19      	ldr	r2, [pc, #100]	; (4032d8 <SystemCoreClockUpdate+0x104>)
  403274:	4b17      	ldr	r3, [pc, #92]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  403276:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403278:	4b14      	ldr	r3, [pc, #80]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  40327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40327c:	f003 0303 	and.w	r3, r3, #3
  403280:	2b02      	cmp	r3, #2
  403282:	d10c      	bne.n	40329e <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403284:	4a11      	ldr	r2, [pc, #68]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  403286:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403288:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40328a:	4812      	ldr	r0, [pc, #72]	; (4032d4 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40328c:	f3c3 410a 	ubfx	r1, r3, #16, #11
  403290:	6803      	ldr	r3, [r0, #0]
  403292:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403296:	b2d2      	uxtb	r2, r2
  403298:	fbb3 f3f2 	udiv	r3, r3, r2
  40329c:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40329e:	4b0b      	ldr	r3, [pc, #44]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  4032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4032a6:	2b70      	cmp	r3, #112	; 0x70
  4032a8:	d107      	bne.n	4032ba <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  4032aa:	4a0a      	ldr	r2, [pc, #40]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  4032ac:	6813      	ldr	r3, [r2, #0]
  4032ae:	490d      	ldr	r1, [pc, #52]	; (4032e4 <SystemCoreClockUpdate+0x110>)
  4032b0:	fba1 1303 	umull	r1, r3, r1, r3
  4032b4:	085b      	lsrs	r3, r3, #1
  4032b6:	6013      	str	r3, [r2, #0]
  4032b8:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4032ba:	4b04      	ldr	r3, [pc, #16]	; (4032cc <SystemCoreClockUpdate+0xf8>)
  4032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4032be:	4905      	ldr	r1, [pc, #20]	; (4032d4 <SystemCoreClockUpdate+0x100>)
  4032c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4032c4:	680b      	ldr	r3, [r1, #0]
  4032c6:	40d3      	lsrs	r3, r2
  4032c8:	600b      	str	r3, [r1, #0]
  4032ca:	4770      	bx	lr
  4032cc:	400e0600 	.word	0x400e0600
  4032d0:	400e1810 	.word	0x400e1810
  4032d4:	20400014 	.word	0x20400014
  4032d8:	00b71b00 	.word	0x00b71b00
  4032dc:	003d0900 	.word	0x003d0900
  4032e0:	007a1200 	.word	0x007a1200
  4032e4:	aaaaaaab 	.word	0xaaaaaaab

004032e8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4032e8:	4b14      	ldr	r3, [pc, #80]	; (40333c <system_init_flash+0x54>)
  4032ea:	4298      	cmp	r0, r3
  4032ec:	d804      	bhi.n	4032f8 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4032ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4032f2:	4b13      	ldr	r3, [pc, #76]	; (403340 <system_init_flash+0x58>)
  4032f4:	601a      	str	r2, [r3, #0]
  4032f6:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4032f8:	4b12      	ldr	r3, [pc, #72]	; (403344 <system_init_flash+0x5c>)
  4032fa:	4298      	cmp	r0, r3
  4032fc:	d803      	bhi.n	403306 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4032fe:	4a12      	ldr	r2, [pc, #72]	; (403348 <system_init_flash+0x60>)
  403300:	4b0f      	ldr	r3, [pc, #60]	; (403340 <system_init_flash+0x58>)
  403302:	601a      	str	r2, [r3, #0]
  403304:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403306:	4b11      	ldr	r3, [pc, #68]	; (40334c <system_init_flash+0x64>)
  403308:	4298      	cmp	r0, r3
  40330a:	d803      	bhi.n	403314 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40330c:	4a10      	ldr	r2, [pc, #64]	; (403350 <system_init_flash+0x68>)
  40330e:	4b0c      	ldr	r3, [pc, #48]	; (403340 <system_init_flash+0x58>)
  403310:	601a      	str	r2, [r3, #0]
  403312:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403314:	4b0f      	ldr	r3, [pc, #60]	; (403354 <system_init_flash+0x6c>)
  403316:	4298      	cmp	r0, r3
  403318:	d803      	bhi.n	403322 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40331a:	4a0f      	ldr	r2, [pc, #60]	; (403358 <system_init_flash+0x70>)
  40331c:	4b08      	ldr	r3, [pc, #32]	; (403340 <system_init_flash+0x58>)
  40331e:	601a      	str	r2, [r3, #0]
  403320:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403322:	4b0e      	ldr	r3, [pc, #56]	; (40335c <system_init_flash+0x74>)
  403324:	4298      	cmp	r0, r3
  403326:	d804      	bhi.n	403332 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403328:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40332c:	4b04      	ldr	r3, [pc, #16]	; (403340 <system_init_flash+0x58>)
  40332e:	601a      	str	r2, [r3, #0]
  403330:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403332:	4a0b      	ldr	r2, [pc, #44]	; (403360 <system_init_flash+0x78>)
  403334:	4b02      	ldr	r3, [pc, #8]	; (403340 <system_init_flash+0x58>)
  403336:	601a      	str	r2, [r3, #0]
  403338:	4770      	bx	lr
  40333a:	bf00      	nop
  40333c:	01312cff 	.word	0x01312cff
  403340:	400e0c00 	.word	0x400e0c00
  403344:	026259ff 	.word	0x026259ff
  403348:	04000100 	.word	0x04000100
  40334c:	039386ff 	.word	0x039386ff
  403350:	04000200 	.word	0x04000200
  403354:	04c4b3ff 	.word	0x04c4b3ff
  403358:	04000300 	.word	0x04000300
  40335c:	05f5e0ff 	.word	0x05f5e0ff
  403360:	04000500 	.word	0x04000500

00403364 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403364:	4b09      	ldr	r3, [pc, #36]	; (40338c <_sbrk+0x28>)
  403366:	681b      	ldr	r3, [r3, #0]
  403368:	b913      	cbnz	r3, 403370 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40336a:	4a09      	ldr	r2, [pc, #36]	; (403390 <_sbrk+0x2c>)
  40336c:	4b07      	ldr	r3, [pc, #28]	; (40338c <_sbrk+0x28>)
  40336e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403370:	4b06      	ldr	r3, [pc, #24]	; (40338c <_sbrk+0x28>)
  403372:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403374:	181a      	adds	r2, r3, r0
  403376:	4907      	ldr	r1, [pc, #28]	; (403394 <_sbrk+0x30>)
  403378:	4291      	cmp	r1, r2
  40337a:	db04      	blt.n	403386 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40337c:	4610      	mov	r0, r2
  40337e:	4a03      	ldr	r2, [pc, #12]	; (40338c <_sbrk+0x28>)
  403380:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403382:	4618      	mov	r0, r3
  403384:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403386:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40338a:	4770      	bx	lr
  40338c:	2040c294 	.word	0x2040c294
  403390:	2040e648 	.word	0x2040e648
  403394:	2045fffc 	.word	0x2045fffc

00403398 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403398:	f04f 30ff 	mov.w	r0, #4294967295
  40339c:	4770      	bx	lr
  40339e:	bf00      	nop

004033a0 <_write>:

extern int _write(int file)
{
	return -1;
}
  4033a0:	f04f 30ff 	mov.w	r0, #4294967295
  4033a4:	4770      	bx	lr
  4033a6:	bf00      	nop

004033a8 <_read>:

extern int _read(int file)
{
	return -1;
}
  4033a8:	f04f 30ff 	mov.w	r0, #4294967295
  4033ac:	4770      	bx	lr
  4033ae:	bf00      	nop

004033b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4033b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4033b4:	604b      	str	r3, [r1, #4]

	return 0;
}
  4033b6:	2000      	movs	r0, #0
  4033b8:	4770      	bx	lr
  4033ba:	bf00      	nop

004033bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4033bc:	2001      	movs	r0, #1
  4033be:	4770      	bx	lr

004033c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4033c0:	2000      	movs	r0, #0
  4033c2:	4770      	bx	lr

004033c4 <_exit>:

extern void _exit(int status)
{
  4033c4:	b508      	push	{r3, lr}
  4033c6:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  4033c8:	4801      	ldr	r0, [pc, #4]	; (4033d0 <_exit+0xc>)
  4033ca:	4b02      	ldr	r3, [pc, #8]	; (4033d4 <_exit+0x10>)
  4033cc:	4798      	blx	r3

	for (;;);
  4033ce:	e7fe      	b.n	4033ce <_exit+0xa>
  4033d0:	0040debc 	.word	0x0040debc
  4033d4:	00407b35 	.word	0x00407b35

004033d8 <_kill>:
}

extern void _kill(int pid, int sig)
{
  4033d8:	4770      	bx	lr
  4033da:	bf00      	nop

004033dc <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  4033dc:	f04f 30ff 	mov.w	r0, #4294967295
  4033e0:	4770      	bx	lr
  4033e2:	bf00      	nop

004033e4 <i2cWriteReg>:
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
}

void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  4033e4:	b500      	push	{lr}
  4033e6:	b089      	sub	sp, #36	; 0x24
  4033e8:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  4033ec:	2300      	movs	r3, #0
  4033ee:	9303      	str	r3, [sp, #12]
  4033f0:	9307      	str	r3, [sp, #28]
  4033f2:	f88d 100c 	strb.w	r1, [sp, #12]
  4033f6:	2301      	movs	r3, #1
  4033f8:	9304      	str	r3, [sp, #16]
  4033fa:	f10d 0207 	add.w	r2, sp, #7
  4033fe:	9205      	str	r2, [sp, #20]
  403400:	9306      	str	r3, [sp, #24]
  403402:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  403406:	4805      	ldr	r0, [pc, #20]	; (40341c <i2cWriteReg+0x38>)
  403408:	a903      	add	r1, sp, #12
  40340a:	4b05      	ldr	r3, [pc, #20]	; (403420 <i2cWriteReg+0x3c>)
  40340c:	4798      	blx	r3
  40340e:	b110      	cbz	r0, 403416 <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  403410:	4804      	ldr	r0, [pc, #16]	; (403424 <i2cWriteReg+0x40>)
  403412:	4b05      	ldr	r3, [pc, #20]	; (403428 <i2cWriteReg+0x44>)
  403414:	4798      	blx	r3
	}
}
  403416:	b009      	add	sp, #36	; 0x24
  403418:	f85d fb04 	ldr.w	pc, [sp], #4
  40341c:	40018000 	.word	0x40018000
  403420:	00402915 	.word	0x00402915
  403424:	0040df08 	.word	0x0040df08
  403428:	0040019d 	.word	0x0040019d

0040342c <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  40342c:	b500      	push	{lr}
  40342e:	b087      	sub	sp, #28
	int retVal = 0;
  403430:	2300      	movs	r3, #0
  403432:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  403434:	9300      	str	r3, [sp, #0]
  403436:	9304      	str	r3, [sp, #16]
  403438:	f88d 1000 	strb.w	r1, [sp]
  40343c:	2301      	movs	r3, #1
  40343e:	9301      	str	r3, [sp, #4]
  403440:	aa05      	add	r2, sp, #20
  403442:	9202      	str	r2, [sp, #8]
  403444:	9303      	str	r3, [sp, #12]
  403446:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  40344a:	4804      	ldr	r0, [pc, #16]	; (40345c <i2cReadReg+0x30>)
  40344c:	4669      	mov	r1, sp
  40344e:	4b04      	ldr	r3, [pc, #16]	; (403460 <i2cReadReg+0x34>)
  403450:	4798      	blx	r3
	return retVal;
}
  403452:	9805      	ldr	r0, [sp, #20]
  403454:	b007      	add	sp, #28
  403456:	f85d fb04 	ldr.w	pc, [sp], #4
  40345a:	bf00      	nop
  40345c:	40018000 	.word	0x40018000
  403460:	0040285d 	.word	0x0040285d

00403464 <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  403464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403468:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  40346a:	b2c4      	uxtb	r4, r0
  40346c:	4620      	mov	r0, r4
  40346e:	2100      	movs	r1, #0
  403470:	4f2a      	ldr	r7, [pc, #168]	; (40351c <ServoDriverInit+0xb8>)
  403472:	47b8      	blx	r7
  403474:	4602      	mov	r2, r0
  403476:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403534 <ServoDriverInit+0xd0>
  40347a:	a801      	add	r0, sp, #4
  40347c:	4641      	mov	r1, r8
  40347e:	4d28      	ldr	r5, [pc, #160]	; (403520 <ServoDriverInit+0xbc>)
  403480:	47a8      	blx	r5
	sendDebugString(buf);
  403482:	a801      	add	r0, sp, #4
  403484:	4e27      	ldr	r6, [pc, #156]	; (403524 <ServoDriverInit+0xc0>)
  403486:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  403488:	4620      	mov	r0, r4
  40348a:	2101      	movs	r1, #1
  40348c:	47b8      	blx	r7
  40348e:	4602      	mov	r2, r0
  403490:	a801      	add	r0, sp, #4
  403492:	4641      	mov	r1, r8
  403494:	47a8      	blx	r5
	sendDebugString(buf);
  403496:	a801      	add	r0, sp, #4
  403498:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  40349a:	4620      	mov	r0, r4
  40349c:	211e      	movs	r1, #30
  40349e:	47b8      	blx	r7
  4034a0:	4602      	mov	r2, r0
  4034a2:	a801      	add	r0, sp, #4
  4034a4:	4641      	mov	r1, r8
  4034a6:	47a8      	blx	r5
	sendDebugString(buf);
  4034a8:	a801      	add	r0, sp, #4
  4034aa:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  4034ac:	4620      	mov	r0, r4
  4034ae:	21fe      	movs	r1, #254	; 0xfe
  4034b0:	47b8      	blx	r7
  4034b2:	4602      	mov	r2, r0
  4034b4:	a801      	add	r0, sp, #4
  4034b6:	4641      	mov	r1, r8
  4034b8:	47a8      	blx	r5
	sendDebugString(buf);
  4034ba:	a801      	add	r0, sp, #4
  4034bc:	47b0      	blx	r6
	
	delay_ms(1);
  4034be:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4034c2:	4f19      	ldr	r7, [pc, #100]	; (403528 <ServoDriverInit+0xc4>)
  4034c4:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  4034c6:	4620      	mov	r0, r4
  4034c8:	2100      	movs	r1, #0
  4034ca:	2210      	movs	r2, #16
  4034cc:	4d17      	ldr	r5, [pc, #92]	; (40352c <ServoDriverInit+0xc8>)
  4034ce:	47a8      	blx	r5
	delay_ms(2);
  4034d0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403538 <ServoDriverInit+0xd4>
  4034d4:	4640      	mov	r0, r8
  4034d6:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0xFE,0x80);
  4034d8:	4620      	mov	r0, r4
  4034da:	21fe      	movs	r1, #254	; 0xfe
  4034dc:	2280      	movs	r2, #128	; 0x80
  4034de:	47a8      	blx	r5
	delay_ms(2);
  4034e0:	4640      	mov	r0, r8
  4034e2:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  4034e4:	4620      	mov	r0, r4
  4034e6:	2100      	movs	r1, #0
  4034e8:	460a      	mov	r2, r1
  4034ea:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  4034ec:	4620      	mov	r0, r4
  4034ee:	2100      	movs	r1, #0
  4034f0:	2210      	movs	r2, #16
  4034f2:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  4034f4:	4620      	mov	r0, r4
  4034f6:	2101      	movs	r1, #1
  4034f8:	2204      	movs	r2, #4
  4034fa:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  4034fc:	4620      	mov	r0, r4
  4034fe:	2100      	movs	r1, #0
  403500:	460a      	mov	r2, r1
  403502:	47a8      	blx	r5
	delay_ms(2);
  403504:	4640      	mov	r0, r8
  403506:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  403508:	4620      	mov	r0, r4
  40350a:	2100      	movs	r1, #0
  40350c:	2280      	movs	r2, #128	; 0x80
  40350e:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  403510:	4807      	ldr	r0, [pc, #28]	; (403530 <ServoDriverInit+0xcc>)
  403512:	47b0      	blx	r6
}
  403514:	b006      	add	sp, #24
  403516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40351a:	bf00      	nop
  40351c:	0040342d 	.word	0x0040342d
  403520:	004080f1 	.word	0x004080f1
  403524:	0040019d 	.word	0x0040019d
  403528:	20400001 	.word	0x20400001
  40352c:	004033e5 	.word	0x004033e5
  403530:	0040df1c 	.word	0x0040df1c
  403534:	0040df14 	.word	0x0040df14
  403538:	00018b1b 	.word	0x00018b1b
  40353c:	00000000 	.word	0x00000000

00403540 <WriteServo>:

void WriteServo(int i2cAddr,int baseReg,float angle) 
{
  403540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403542:	4605      	mov	r5, r0
  403544:	460c      	mov	r4, r1
	 //uint16_t stop = (int)((1.00+((angle)/180.00))*(4095.00/(20.00)));
	uint16_t stop = (int)lroundf( (4095.00/(20.00)) * ((0.56) + (2.4-0.56)*(angle/180.00))  );	
  403546:	4610      	mov	r0, r2
  403548:	4b1f      	ldr	r3, [pc, #124]	; (4035c8 <WriteServo+0x88>)
  40354a:	4798      	blx	r3
  40354c:	2200      	movs	r2, #0
  40354e:	4b1f      	ldr	r3, [pc, #124]	; (4035cc <WriteServo+0x8c>)
  403550:	4e1f      	ldr	r6, [pc, #124]	; (4035d0 <WriteServo+0x90>)
  403552:	47b0      	blx	r6
  403554:	4e1f      	ldr	r6, [pc, #124]	; (4035d4 <WriteServo+0x94>)
  403556:	a316      	add	r3, pc, #88	; (adr r3, 4035b0 <WriteServo+0x70>)
  403558:	e9d3 2300 	ldrd	r2, r3, [r3]
  40355c:	47b0      	blx	r6
  40355e:	a316      	add	r3, pc, #88	; (adr r3, 4035b8 <WriteServo+0x78>)
  403560:	e9d3 2300 	ldrd	r2, r3, [r3]
  403564:	4f1c      	ldr	r7, [pc, #112]	; (4035d8 <WriteServo+0x98>)
  403566:	47b8      	blx	r7
  403568:	a315      	add	r3, pc, #84	; (adr r3, 4035c0 <WriteServo+0x80>)
  40356a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40356e:	47b0      	blx	r6
  403570:	4b1a      	ldr	r3, [pc, #104]	; (4035dc <WriteServo+0x9c>)
  403572:	4798      	blx	r3
  403574:	4b1a      	ldr	r3, [pc, #104]	; (4035e0 <WriteServo+0xa0>)
  403576:	4798      	blx	r3
  403578:	4607      	mov	r7, r0
		
	i2cWriteReg(i2cAddr,baseReg,0x01);
  40357a:	b2ed      	uxtb	r5, r5
  40357c:	b2e4      	uxtb	r4, r4
  40357e:	4628      	mov	r0, r5
  403580:	4621      	mov	r1, r4
  403582:	2201      	movs	r2, #1
  403584:	4e17      	ldr	r6, [pc, #92]	; (4035e4 <WriteServo+0xa4>)
  403586:	47b0      	blx	r6
	i2cWriteReg(i2cAddr,baseReg+1,0x00);
  403588:	1c61      	adds	r1, r4, #1
  40358a:	4628      	mov	r0, r5
  40358c:	b2c9      	uxtb	r1, r1
  40358e:	2200      	movs	r2, #0
  403590:	47b0      	blx	r6
	i2cWriteReg(i2cAddr,baseReg+2,stop);
  403592:	1ca1      	adds	r1, r4, #2
  403594:	4628      	mov	r0, r5
  403596:	b2c9      	uxtb	r1, r1
  403598:	b2fa      	uxtb	r2, r7
  40359a:	47b0      	blx	r6
	i2cWriteReg(i2cAddr,baseReg+3,stop >> 8);
  40359c:	1ce1      	adds	r1, r4, #3
  40359e:	4628      	mov	r0, r5
  4035a0:	b2c9      	uxtb	r1, r1
  4035a2:	f3c7 2207 	ubfx	r2, r7, #8, #8
  4035a6:	47b0      	blx	r6
  4035a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4035aa:	bf00      	nop
  4035ac:	f3af 8000 	nop.w
  4035b0:	d70a3d70 	.word	0xd70a3d70
  4035b4:	3ffd70a3 	.word	0x3ffd70a3
  4035b8:	1eb851ec 	.word	0x1eb851ec
  4035bc:	3fe1eb85 	.word	0x3fe1eb85
  4035c0:	00000000 	.word	0x00000000
  4035c4:	40699800 	.word	0x40699800
  4035c8:	00407345 	.word	0x00407345
  4035cc:	40668000 	.word	0x40668000
  4035d0:	00407641 	.word	0x00407641
  4035d4:	004073ed 	.word	0x004073ed
  4035d8:	00407089 	.word	0x00407089
  4035dc:	00407971 	.word	0x00407971
  4035e0:	00404c79 	.word	0x00404c79
  4035e4:	004033e5 	.word	0x004033e5

004035e8 <SetupCameraYUVVGA>:
	write_SCCB(0x41,00);
	write_SCCB(0x42,00);
	
}

void SetupCameraYUVVGA() {
  4035e8:	b510      	push	{r4, lr}
write_SCCB(0x12, 0x80);
  4035ea:	2030      	movs	r0, #48	; 0x30
  4035ec:	2112      	movs	r1, #18
  4035ee:	2280      	movs	r2, #128	; 0x80
  4035f0:	4cca      	ldr	r4, [pc, #808]	; (40391c <SetupCameraYUVVGA+0x334>)
  4035f2:	47a0      	blx	r4
write_SCCB(0x11, 0x00);
  4035f4:	2030      	movs	r0, #48	; 0x30
  4035f6:	2111      	movs	r1, #17
  4035f8:	2200      	movs	r2, #0
  4035fa:	47a0      	blx	r4
write_SCCB(0x6b, 0x0a);
  4035fc:	2030      	movs	r0, #48	; 0x30
  4035fe:	216b      	movs	r1, #107	; 0x6b
  403600:	220a      	movs	r2, #10
  403602:	47a0      	blx	r4
write_SCCB(0x6a, 0x3e);
  403604:	2030      	movs	r0, #48	; 0x30
  403606:	216a      	movs	r1, #106	; 0x6a
  403608:	223e      	movs	r2, #62	; 0x3e
  40360a:	47a0      	blx	r4
write_SCCB(0x3b, 0x09);
  40360c:	2030      	movs	r0, #48	; 0x30
  40360e:	213b      	movs	r1, #59	; 0x3b
  403610:	2209      	movs	r2, #9
  403612:	47a0      	blx	r4
write_SCCB(0x13, 0xe0);
  403614:	2030      	movs	r0, #48	; 0x30
  403616:	2113      	movs	r1, #19
  403618:	22e0      	movs	r2, #224	; 0xe0
  40361a:	47a0      	blx	r4
write_SCCB(0x01, 0x80);
  40361c:	2030      	movs	r0, #48	; 0x30
  40361e:	2101      	movs	r1, #1
  403620:	2280      	movs	r2, #128	; 0x80
  403622:	47a0      	blx	r4
write_SCCB(0x02, 0x80);
  403624:	2030      	movs	r0, #48	; 0x30
  403626:	2102      	movs	r1, #2
  403628:	2280      	movs	r2, #128	; 0x80
  40362a:	47a0      	blx	r4
write_SCCB(0x00, 0x00);
  40362c:	2030      	movs	r0, #48	; 0x30
  40362e:	2100      	movs	r1, #0
  403630:	460a      	mov	r2, r1
  403632:	47a0      	blx	r4
write_SCCB(0x10, 0x00);
  403634:	2030      	movs	r0, #48	; 0x30
  403636:	2110      	movs	r1, #16
  403638:	2200      	movs	r2, #0
  40363a:	47a0      	blx	r4
write_SCCB(0x13, 0xe5);
  40363c:	2030      	movs	r0, #48	; 0x30
  40363e:	2113      	movs	r1, #19
  403640:	22e5      	movs	r2, #229	; 0xe5
  403642:	47a0      	blx	r4
//
write_SCCB(0x39, 0x43); //50 for 30fps
  403644:	2030      	movs	r0, #48	; 0x30
  403646:	2139      	movs	r1, #57	; 0x39
  403648:	2243      	movs	r2, #67	; 0x43
  40364a:	47a0      	blx	r4
write_SCCB(0x38, 0x12); //92 for 30fps
  40364c:	2030      	movs	r0, #48	; 0x30
  40364e:	2138      	movs	r1, #56	; 0x38
  403650:	2212      	movs	r2, #18
  403652:	47a0      	blx	r4
write_SCCB(0x37, 0x00);
  403654:	2030      	movs	r0, #48	; 0x30
  403656:	2137      	movs	r1, #55	; 0x37
  403658:	2200      	movs	r2, #0
  40365a:	47a0      	blx	r4
write_SCCB(0x35, 0x91); //81 for 30fps
  40365c:	2030      	movs	r0, #48	; 0x30
  40365e:	2135      	movs	r1, #53	; 0x35
  403660:	2291      	movs	r2, #145	; 0x91
  403662:	47a0      	blx	r4
write_SCCB(0x0e, 0x20);
  403664:	2030      	movs	r0, #48	; 0x30
  403666:	210e      	movs	r1, #14
  403668:	2220      	movs	r2, #32
  40366a:	47a0      	blx	r4
write_SCCB(0x1e, 0x34);
  40366c:	2030      	movs	r0, #48	; 0x30
  40366e:	211e      	movs	r1, #30
  403670:	2234      	movs	r2, #52	; 0x34
  403672:	47a0      	blx	r4
//
write_SCCB(0xa8, 0x80);
  403674:	2030      	movs	r0, #48	; 0x30
  403676:	21a8      	movs	r1, #168	; 0xa8
  403678:	2280      	movs	r2, #128	; 0x80
  40367a:	47a0      	blx	r4
write_SCCB(0x12, 0x40);
  40367c:	2030      	movs	r0, #48	; 0x30
  40367e:	2112      	movs	r1, #18
  403680:	2240      	movs	r2, #64	; 0x40
  403682:	47a0      	blx	r4
write_SCCB(0x04, 0x00);
  403684:	2030      	movs	r0, #48	; 0x30
  403686:	2104      	movs	r1, #4
  403688:	2200      	movs	r2, #0
  40368a:	47a0      	blx	r4
write_SCCB(0x0c, 0x04);
  40368c:	2030      	movs	r0, #48	; 0x30
  40368e:	210c      	movs	r1, #12
  403690:	2204      	movs	r2, #4
  403692:	47a0      	blx	r4
write_SCCB(0x0d, 0x80);
  403694:	2030      	movs	r0, #48	; 0x30
  403696:	210d      	movs	r1, #13
  403698:	2280      	movs	r2, #128	; 0x80
  40369a:	47a0      	blx	r4
write_SCCB(0x18, 0xc6);
  40369c:	2030      	movs	r0, #48	; 0x30
  40369e:	2118      	movs	r1, #24
  4036a0:	22c6      	movs	r2, #198	; 0xc6
  4036a2:	47a0      	blx	r4
write_SCCB(0x17, 0x26);
  4036a4:	2030      	movs	r0, #48	; 0x30
  4036a6:	2117      	movs	r1, #23
  4036a8:	2226      	movs	r2, #38	; 0x26
  4036aa:	47a0      	blx	r4
write_SCCB(0x32, 0xad);
  4036ac:	2030      	movs	r0, #48	; 0x30
  4036ae:	2132      	movs	r1, #50	; 0x32
  4036b0:	22ad      	movs	r2, #173	; 0xad
  4036b2:	47a0      	blx	r4
write_SCCB(0x03, 0x00);
  4036b4:	2030      	movs	r0, #48	; 0x30
  4036b6:	2103      	movs	r1, #3
  4036b8:	2200      	movs	r2, #0
  4036ba:	47a0      	blx	r4
write_SCCB(0x1a, 0x81);
  4036bc:	2030      	movs	r0, #48	; 0x30
  4036be:	211a      	movs	r1, #26
  4036c0:	2281      	movs	r2, #129	; 0x81
  4036c2:	47a0      	blx	r4
write_SCCB(0x19, 0x01);
  4036c4:	2030      	movs	r0, #48	; 0x30
  4036c6:	2119      	movs	r1, #25
  4036c8:	2201      	movs	r2, #1
  4036ca:	47a0      	blx	r4
write_SCCB(0x3f, 0xa6);
  4036cc:	2030      	movs	r0, #48	; 0x30
  4036ce:	213f      	movs	r1, #63	; 0x3f
  4036d0:	22a6      	movs	r2, #166	; 0xa6
  4036d2:	47a0      	blx	r4
write_SCCB(0x14, 0x2e);
  4036d4:	2030      	movs	r0, #48	; 0x30
  4036d6:	2114      	movs	r1, #20
  4036d8:	222e      	movs	r2, #46	; 0x2e
  4036da:	47a0      	blx	r4
write_SCCB(0x15, 0x03|1<<3);
  4036dc:	2030      	movs	r0, #48	; 0x30
  4036de:	2115      	movs	r1, #21
  4036e0:	220b      	movs	r2, #11
  4036e2:	47a0      	blx	r4
write_SCCB(0x41, 0x02);
  4036e4:	2030      	movs	r0, #48	; 0x30
  4036e6:	2141      	movs	r1, #65	; 0x41
  4036e8:	2202      	movs	r2, #2
  4036ea:	47a0      	blx	r4
write_SCCB(0x42, 0x08);
  4036ec:	2030      	movs	r0, #48	; 0x30
  4036ee:	2142      	movs	r1, #66	; 0x42
  4036f0:	2208      	movs	r2, #8
  4036f2:	47a0      	blx	r4
//
write_SCCB(0x1b, 0x00);
  4036f4:	2030      	movs	r0, #48	; 0x30
  4036f6:	211b      	movs	r1, #27
  4036f8:	2200      	movs	r2, #0
  4036fa:	47a0      	blx	r4
write_SCCB(0x16, 0x06);
  4036fc:	2030      	movs	r0, #48	; 0x30
  4036fe:	2116      	movs	r1, #22
  403700:	2206      	movs	r2, #6
  403702:	47a0      	blx	r4
write_SCCB(0x33, 0xe2); //c0 for internal regulator
  403704:	2030      	movs	r0, #48	; 0x30
  403706:	2133      	movs	r1, #51	; 0x33
  403708:	22e2      	movs	r2, #226	; 0xe2
  40370a:	47a0      	blx	r4
write_SCCB(0x34, 0xbf);
  40370c:	2030      	movs	r0, #48	; 0x30
  40370e:	2134      	movs	r1, #52	; 0x34
  403710:	22bf      	movs	r2, #191	; 0xbf
  403712:	47a0      	blx	r4
write_SCCB(0x96, 0x04);
  403714:	2030      	movs	r0, #48	; 0x30
  403716:	2196      	movs	r1, #150	; 0x96
  403718:	2204      	movs	r2, #4
  40371a:	47a0      	blx	r4
write_SCCB(0x3a, 0x00);
  40371c:	2030      	movs	r0, #48	; 0x30
  40371e:	213a      	movs	r1, #58	; 0x3a
  403720:	2200      	movs	r2, #0
  403722:	47a0      	blx	r4
write_SCCB(0x8e, 0x00);
  403724:	2030      	movs	r0, #48	; 0x30
  403726:	218e      	movs	r1, #142	; 0x8e
  403728:	2200      	movs	r2, #0
  40372a:	47a0      	blx	r4
//
write_SCCB(0x3c, 0x77);
  40372c:	2030      	movs	r0, #48	; 0x30
  40372e:	213c      	movs	r1, #60	; 0x3c
  403730:	2277      	movs	r2, #119	; 0x77
  403732:	47a0      	blx	r4
write_SCCB(0x8b, 0x06);
  403734:	2030      	movs	r0, #48	; 0x30
  403736:	218b      	movs	r1, #139	; 0x8b
  403738:	2206      	movs	r2, #6
  40373a:	47a0      	blx	r4
write_SCCB(0x94, 0x88);
  40373c:	2030      	movs	r0, #48	; 0x30
  40373e:	2194      	movs	r1, #148	; 0x94
  403740:	2288      	movs	r2, #136	; 0x88
  403742:	47a0      	blx	r4
write_SCCB(0x95, 0x88);
  403744:	2030      	movs	r0, #48	; 0x30
  403746:	2195      	movs	r1, #149	; 0x95
  403748:	2288      	movs	r2, #136	; 0x88
  40374a:	47a0      	blx	r4
write_SCCB(0x40, 0xc1);
  40374c:	2030      	movs	r0, #48	; 0x30
  40374e:	2140      	movs	r1, #64	; 0x40
  403750:	22c1      	movs	r2, #193	; 0xc1
  403752:	47a0      	blx	r4
write_SCCB(0x29, 0x3f); //2f for internal regulator
  403754:	2030      	movs	r0, #48	; 0x30
  403756:	2129      	movs	r1, #41	; 0x29
  403758:	223f      	movs	r2, #63	; 0x3f
  40375a:	47a0      	blx	r4
write_SCCB(0x0f, 0x42);
  40375c:	2030      	movs	r0, #48	; 0x30
  40375e:	210f      	movs	r1, #15
  403760:	2242      	movs	r2, #66	; 0x42
  403762:	47a0      	blx	r4
//
write_SCCB(0x3d, 0x92);
  403764:	2030      	movs	r0, #48	; 0x30
  403766:	213d      	movs	r1, #61	; 0x3d
  403768:	2292      	movs	r2, #146	; 0x92
  40376a:	47a0      	blx	r4
write_SCCB(0x69, 0x40);
  40376c:	2030      	movs	r0, #48	; 0x30
  40376e:	2169      	movs	r1, #105	; 0x69
  403770:	2240      	movs	r2, #64	; 0x40
  403772:	47a0      	blx	r4
write_SCCB(0x5c, 0xb9);
  403774:	2030      	movs	r0, #48	; 0x30
  403776:	215c      	movs	r1, #92	; 0x5c
  403778:	22b9      	movs	r2, #185	; 0xb9
  40377a:	47a0      	blx	r4
write_SCCB(0x5d, 0x96);
  40377c:	2030      	movs	r0, #48	; 0x30
  40377e:	215d      	movs	r1, #93	; 0x5d
  403780:	2296      	movs	r2, #150	; 0x96
  403782:	47a0      	blx	r4
write_SCCB(0x5e, 0x10);
  403784:	2030      	movs	r0, #48	; 0x30
  403786:	215e      	movs	r1, #94	; 0x5e
  403788:	2210      	movs	r2, #16
  40378a:	47a0      	blx	r4
write_SCCB(0x59, 0xc0);
  40378c:	2030      	movs	r0, #48	; 0x30
  40378e:	2159      	movs	r1, #89	; 0x59
  403790:	22c0      	movs	r2, #192	; 0xc0
  403792:	47a0      	blx	r4
write_SCCB(0x5a, 0xaf);
  403794:	2030      	movs	r0, #48	; 0x30
  403796:	215a      	movs	r1, #90	; 0x5a
  403798:	22af      	movs	r2, #175	; 0xaf
  40379a:	47a0      	blx	r4
write_SCCB(0x5b, 0x55);
  40379c:	2030      	movs	r0, #48	; 0x30
  40379e:	215b      	movs	r1, #91	; 0x5b
  4037a0:	2255      	movs	r2, #85	; 0x55
  4037a2:	47a0      	blx	r4
write_SCCB(0x43, 0xf0);
  4037a4:	2030      	movs	r0, #48	; 0x30
  4037a6:	2143      	movs	r1, #67	; 0x43
  4037a8:	22f0      	movs	r2, #240	; 0xf0
  4037aa:	47a0      	blx	r4
write_SCCB(0x44, 0x10);
  4037ac:	2030      	movs	r0, #48	; 0x30
  4037ae:	2144      	movs	r1, #68	; 0x44
  4037b0:	2210      	movs	r2, #16
  4037b2:	47a0      	blx	r4
write_SCCB(0x45, 0x68);
  4037b4:	2030      	movs	r0, #48	; 0x30
  4037b6:	2145      	movs	r1, #69	; 0x45
  4037b8:	2268      	movs	r2, #104	; 0x68
  4037ba:	47a0      	blx	r4
write_SCCB(0x46, 0x96);
  4037bc:	2030      	movs	r0, #48	; 0x30
  4037be:	2146      	movs	r1, #70	; 0x46
  4037c0:	2296      	movs	r2, #150	; 0x96
  4037c2:	47a0      	blx	r4
write_SCCB(0x47, 0x60);
  4037c4:	2030      	movs	r0, #48	; 0x30
  4037c6:	2147      	movs	r1, #71	; 0x47
  4037c8:	2260      	movs	r2, #96	; 0x60
  4037ca:	47a0      	blx	r4
write_SCCB(0x48, 0x80);
  4037cc:	2030      	movs	r0, #48	; 0x30
  4037ce:	2148      	movs	r1, #72	; 0x48
  4037d0:	2280      	movs	r2, #128	; 0x80
  4037d2:	47a0      	blx	r4
write_SCCB(0x5f, 0xe0);
  4037d4:	2030      	movs	r0, #48	; 0x30
  4037d6:	215f      	movs	r1, #95	; 0x5f
  4037d8:	22e0      	movs	r2, #224	; 0xe0
  4037da:	47a0      	blx	r4
write_SCCB(0x60, 0x8c); //0c for advanced AWB (related to lens)
  4037dc:	2030      	movs	r0, #48	; 0x30
  4037de:	2160      	movs	r1, #96	; 0x60
  4037e0:	228c      	movs	r2, #140	; 0x8c
  4037e2:	47a0      	blx	r4
write_SCCB(0x61, 0x20);
  4037e4:	2030      	movs	r0, #48	; 0x30
  4037e6:	2161      	movs	r1, #97	; 0x61
  4037e8:	2220      	movs	r2, #32
  4037ea:	47a0      	blx	r4
write_SCCB(0xa5, 0xd9);
  4037ec:	2030      	movs	r0, #48	; 0x30
  4037ee:	21a5      	movs	r1, #165	; 0xa5
  4037f0:	22d9      	movs	r2, #217	; 0xd9
  4037f2:	47a0      	blx	r4
write_SCCB(0xa4, 0x74);
  4037f4:	2030      	movs	r0, #48	; 0x30
  4037f6:	21a4      	movs	r1, #164	; 0xa4
  4037f8:	2274      	movs	r2, #116	; 0x74
  4037fa:	47a0      	blx	r4
write_SCCB(0x8d, 0x02);
  4037fc:	2030      	movs	r0, #48	; 0x30
  4037fe:	218d      	movs	r1, #141	; 0x8d
  403800:	2202      	movs	r2, #2
  403802:	47a0      	blx	r4
write_SCCB(0x13, 0xe7);
  403804:	2030      	movs	r0, #48	; 0x30
  403806:	2113      	movs	r1, #19
  403808:	22e7      	movs	r2, #231	; 0xe7
  40380a:	47a0      	blx	r4
//
write_SCCB(0x4f, 0x3a);
  40380c:	2030      	movs	r0, #48	; 0x30
  40380e:	214f      	movs	r1, #79	; 0x4f
  403810:	223a      	movs	r2, #58	; 0x3a
  403812:	47a0      	blx	r4
write_SCCB(0x50, 0x3d);
  403814:	2030      	movs	r0, #48	; 0x30
  403816:	2150      	movs	r1, #80	; 0x50
  403818:	223d      	movs	r2, #61	; 0x3d
  40381a:	47a0      	blx	r4
write_SCCB(0x51, 0x03);
  40381c:	2030      	movs	r0, #48	; 0x30
  40381e:	2151      	movs	r1, #81	; 0x51
  403820:	2203      	movs	r2, #3
  403822:	47a0      	blx	r4
write_SCCB(0x52, 0x12);
  403824:	2030      	movs	r0, #48	; 0x30
  403826:	2152      	movs	r1, #82	; 0x52
  403828:	2212      	movs	r2, #18
  40382a:	47a0      	blx	r4
write_SCCB(0x53, 0x26);
  40382c:	2030      	movs	r0, #48	; 0x30
  40382e:	2153      	movs	r1, #83	; 0x53
  403830:	2226      	movs	r2, #38	; 0x26
  403832:	47a0      	blx	r4
write_SCCB(0x54, 0x38);
  403834:	2030      	movs	r0, #48	; 0x30
  403836:	2154      	movs	r1, #84	; 0x54
  403838:	2238      	movs	r2, #56	; 0x38
  40383a:	47a0      	blx	r4
write_SCCB(0x55, 0x40);
  40383c:	2030      	movs	r0, #48	; 0x30
  40383e:	2155      	movs	r1, #85	; 0x55
  403840:	2240      	movs	r2, #64	; 0x40
  403842:	47a0      	blx	r4
write_SCCB(0x56, 0x40);
  403844:	2030      	movs	r0, #48	; 0x30
  403846:	2156      	movs	r1, #86	; 0x56
  403848:	2240      	movs	r2, #64	; 0x40
  40384a:	47a0      	blx	r4
write_SCCB(0x57, 0x40);
  40384c:	2030      	movs	r0, #48	; 0x30
  40384e:	2157      	movs	r1, #87	; 0x57
  403850:	2240      	movs	r2, #64	; 0x40
  403852:	47a0      	blx	r4
write_SCCB(0x58, 0x0d);
  403854:	2030      	movs	r0, #48	; 0x30
  403856:	2158      	movs	r1, #88	; 0x58
  403858:	220d      	movs	r2, #13
  40385a:	47a0      	blx	r4
//
write_SCCB(0x8c, 0x23);
  40385c:	2030      	movs	r0, #48	; 0x30
  40385e:	218c      	movs	r1, #140	; 0x8c
  403860:	2223      	movs	r2, #35	; 0x23
  403862:	47a0      	blx	r4
write_SCCB(0x3e, 0x02);
  403864:	2030      	movs	r0, #48	; 0x30
  403866:	213e      	movs	r1, #62	; 0x3e
  403868:	2202      	movs	r2, #2
  40386a:	47a0      	blx	r4
write_SCCB(0xa9, 0xb8);
  40386c:	2030      	movs	r0, #48	; 0x30
  40386e:	21a9      	movs	r1, #169	; 0xa9
  403870:	22b8      	movs	r2, #184	; 0xb8
  403872:	47a0      	blx	r4
write_SCCB(0xaa, 0x92);
  403874:	2030      	movs	r0, #48	; 0x30
  403876:	21aa      	movs	r1, #170	; 0xaa
  403878:	2292      	movs	r2, #146	; 0x92
  40387a:	47a0      	blx	r4
write_SCCB(0xab, 0x0a);
  40387c:	2030      	movs	r0, #48	; 0x30
  40387e:	21ab      	movs	r1, #171	; 0xab
  403880:	220a      	movs	r2, #10
  403882:	47a0      	blx	r4
//
write_SCCB(0x8f, 0xdf);
  403884:	2030      	movs	r0, #48	; 0x30
  403886:	218f      	movs	r1, #143	; 0x8f
  403888:	22df      	movs	r2, #223	; 0xdf
  40388a:	47a0      	blx	r4
write_SCCB(0x90, 0x00);
  40388c:	2030      	movs	r0, #48	; 0x30
  40388e:	2190      	movs	r1, #144	; 0x90
  403890:	2200      	movs	r2, #0
  403892:	47a0      	blx	r4
write_SCCB(0x91, 0x00);
  403894:	2030      	movs	r0, #48	; 0x30
  403896:	2191      	movs	r1, #145	; 0x91
  403898:	2200      	movs	r2, #0
  40389a:	47a0      	blx	r4
write_SCCB(0x9f, 0x00);
  40389c:	2030      	movs	r0, #48	; 0x30
  40389e:	219f      	movs	r1, #159	; 0x9f
  4038a0:	2200      	movs	r2, #0
  4038a2:	47a0      	blx	r4
write_SCCB(0xa0, 0x00);
  4038a4:	2030      	movs	r0, #48	; 0x30
  4038a6:	21a0      	movs	r1, #160	; 0xa0
  4038a8:	2200      	movs	r2, #0
  4038aa:	47a0      	blx	r4
write_SCCB(0x3a, 0x01);
  4038ac:	2030      	movs	r0, #48	; 0x30
  4038ae:	213a      	movs	r1, #58	; 0x3a
  4038b0:	2201      	movs	r2, #1
  4038b2:	47a0      	blx	r4
//
write_SCCB(0x24, 0x70);
  4038b4:	2030      	movs	r0, #48	; 0x30
  4038b6:	2124      	movs	r1, #36	; 0x24
  4038b8:	2270      	movs	r2, #112	; 0x70
  4038ba:	47a0      	blx	r4
write_SCCB(0x25, 0x64);
  4038bc:	2030      	movs	r0, #48	; 0x30
  4038be:	2125      	movs	r1, #37	; 0x25
  4038c0:	2264      	movs	r2, #100	; 0x64
  4038c2:	47a0      	blx	r4
write_SCCB(0x26, 0xc3);
  4038c4:	2030      	movs	r0, #48	; 0x30
  4038c6:	2126      	movs	r1, #38	; 0x26
  4038c8:	22c3      	movs	r2, #195	; 0xc3
  4038ca:	47a0      	blx	r4
//
write_SCCB(0x2a, 0x00); //10 for 50Hz
  4038cc:	2030      	movs	r0, #48	; 0x30
  4038ce:	212a      	movs	r1, #42	; 0x2a
  4038d0:	2200      	movs	r2, #0
  4038d2:	47a0      	blx	r4
write_SCCB(0x2b, 0x00); //40 for 50Hz
  4038d4:	2030      	movs	r0, #48	; 0x30
  4038d6:	212b      	movs	r1, #43	; 0x2b
  4038d8:	2200      	movs	r2, #0
  4038da:	47a0      	blx	r4
//
//gamma
write_SCCB(0x6c, 0x40);
  4038dc:	2030      	movs	r0, #48	; 0x30
  4038de:	216c      	movs	r1, #108	; 0x6c
  4038e0:	2240      	movs	r2, #64	; 0x40
  4038e2:	47a0      	blx	r4
write_SCCB(0x6d, 0x30);
  4038e4:	2030      	movs	r0, #48	; 0x30
  4038e6:	216d      	movs	r1, #109	; 0x6d
  4038e8:	4602      	mov	r2, r0
  4038ea:	47a0      	blx	r4
write_SCCB(0x6e, 0x4b);
  4038ec:	2030      	movs	r0, #48	; 0x30
  4038ee:	216e      	movs	r1, #110	; 0x6e
  4038f0:	224b      	movs	r2, #75	; 0x4b
  4038f2:	47a0      	blx	r4
write_SCCB(0x6f, 0x60);
  4038f4:	2030      	movs	r0, #48	; 0x30
  4038f6:	216f      	movs	r1, #111	; 0x6f
  4038f8:	2260      	movs	r2, #96	; 0x60
  4038fa:	47a0      	blx	r4
write_SCCB(0x70, 0x70);
  4038fc:	2030      	movs	r0, #48	; 0x30
  4038fe:	2170      	movs	r1, #112	; 0x70
  403900:	460a      	mov	r2, r1
  403902:	47a0      	blx	r4
write_SCCB(0x71, 0x70);
  403904:	2030      	movs	r0, #48	; 0x30
  403906:	2171      	movs	r1, #113	; 0x71
  403908:	2270      	movs	r2, #112	; 0x70
  40390a:	47a0      	blx	r4
write_SCCB(0x72, 0x70);
  40390c:	2030      	movs	r0, #48	; 0x30
  40390e:	2172      	movs	r1, #114	; 0x72
  403910:	2270      	movs	r2, #112	; 0x70
  403912:	47a0      	blx	r4
write_SCCB(0x73, 0x70);
  403914:	2030      	movs	r0, #48	; 0x30
  403916:	2173      	movs	r1, #115	; 0x73
  403918:	2270      	movs	r2, #112	; 0x70
  40391a:	e001      	b.n	403920 <SetupCameraYUVVGA+0x338>
  40391c:	004033e5 	.word	0x004033e5
  403920:	47a0      	blx	r4
write_SCCB(0x74, 0x60);
  403922:	2030      	movs	r0, #48	; 0x30
  403924:	2174      	movs	r1, #116	; 0x74
  403926:	2260      	movs	r2, #96	; 0x60
  403928:	47a0      	blx	r4
write_SCCB(0x75, 0x60);
  40392a:	2030      	movs	r0, #48	; 0x30
  40392c:	2175      	movs	r1, #117	; 0x75
  40392e:	2260      	movs	r2, #96	; 0x60
  403930:	47a0      	blx	r4
write_SCCB(0x76, 0x50);
  403932:	2030      	movs	r0, #48	; 0x30
  403934:	2176      	movs	r1, #118	; 0x76
  403936:	2250      	movs	r2, #80	; 0x50
  403938:	47a0      	blx	r4
write_SCCB(0x77, 0x48);
  40393a:	2030      	movs	r0, #48	; 0x30
  40393c:	2177      	movs	r1, #119	; 0x77
  40393e:	2248      	movs	r2, #72	; 0x48
  403940:	47a0      	blx	r4
write_SCCB(0x78, 0x3a);
  403942:	2030      	movs	r0, #48	; 0x30
  403944:	2178      	movs	r1, #120	; 0x78
  403946:	223a      	movs	r2, #58	; 0x3a
  403948:	47a0      	blx	r4
write_SCCB(0x79, 0x2e);
  40394a:	2030      	movs	r0, #48	; 0x30
  40394c:	2179      	movs	r1, #121	; 0x79
  40394e:	222e      	movs	r2, #46	; 0x2e
  403950:	47a0      	blx	r4
write_SCCB(0x7a, 0x28);
  403952:	2030      	movs	r0, #48	; 0x30
  403954:	217a      	movs	r1, #122	; 0x7a
  403956:	2228      	movs	r2, #40	; 0x28
  403958:	47a0      	blx	r4
write_SCCB(0x7b, 0x22);
  40395a:	2030      	movs	r0, #48	; 0x30
  40395c:	217b      	movs	r1, #123	; 0x7b
  40395e:	2222      	movs	r2, #34	; 0x22
  403960:	47a0      	blx	r4
write_SCCB(0x7c, 0x04);
  403962:	2030      	movs	r0, #48	; 0x30
  403964:	217c      	movs	r1, #124	; 0x7c
  403966:	2204      	movs	r2, #4
  403968:	47a0      	blx	r4
write_SCCB(0x7d, 0x07);
  40396a:	2030      	movs	r0, #48	; 0x30
  40396c:	217d      	movs	r1, #125	; 0x7d
  40396e:	2207      	movs	r2, #7
  403970:	47a0      	blx	r4
write_SCCB(0x7e, 0x10);
  403972:	2030      	movs	r0, #48	; 0x30
  403974:	217e      	movs	r1, #126	; 0x7e
  403976:	2210      	movs	r2, #16
  403978:	47a0      	blx	r4
write_SCCB(0x7f, 0x28);
  40397a:	2030      	movs	r0, #48	; 0x30
  40397c:	217f      	movs	r1, #127	; 0x7f
  40397e:	2228      	movs	r2, #40	; 0x28
  403980:	47a0      	blx	r4
write_SCCB(0x80, 0x36);
  403982:	2030      	movs	r0, #48	; 0x30
  403984:	2180      	movs	r1, #128	; 0x80
  403986:	2236      	movs	r2, #54	; 0x36
  403988:	47a0      	blx	r4
write_SCCB(0x81, 0x44);
  40398a:	2030      	movs	r0, #48	; 0x30
  40398c:	2181      	movs	r1, #129	; 0x81
  40398e:	2244      	movs	r2, #68	; 0x44
  403990:	47a0      	blx	r4
write_SCCB(0x82, 0x52);
  403992:	2030      	movs	r0, #48	; 0x30
  403994:	2182      	movs	r1, #130	; 0x82
  403996:	2252      	movs	r2, #82	; 0x52
  403998:	47a0      	blx	r4
write_SCCB(0x83, 0x60);
  40399a:	2030      	movs	r0, #48	; 0x30
  40399c:	2183      	movs	r1, #131	; 0x83
  40399e:	2260      	movs	r2, #96	; 0x60
  4039a0:	47a0      	blx	r4
write_SCCB(0x84, 0x6c);
  4039a2:	2030      	movs	r0, #48	; 0x30
  4039a4:	2184      	movs	r1, #132	; 0x84
  4039a6:	226c      	movs	r2, #108	; 0x6c
  4039a8:	47a0      	blx	r4
write_SCCB(0x85, 0x78);
  4039aa:	2030      	movs	r0, #48	; 0x30
  4039ac:	2185      	movs	r1, #133	; 0x85
  4039ae:	2278      	movs	r2, #120	; 0x78
  4039b0:	47a0      	blx	r4
write_SCCB(0x86, 0x8c);
  4039b2:	2030      	movs	r0, #48	; 0x30
  4039b4:	2186      	movs	r1, #134	; 0x86
  4039b6:	228c      	movs	r2, #140	; 0x8c
  4039b8:	47a0      	blx	r4
write_SCCB(0x87, 0x9e);
  4039ba:	2030      	movs	r0, #48	; 0x30
  4039bc:	2187      	movs	r1, #135	; 0x87
  4039be:	229e      	movs	r2, #158	; 0x9e
  4039c0:	47a0      	blx	r4
write_SCCB(0x88, 0xbb);
  4039c2:	2030      	movs	r0, #48	; 0x30
  4039c4:	2188      	movs	r1, #136	; 0x88
  4039c6:	22bb      	movs	r2, #187	; 0xbb
  4039c8:	47a0      	blx	r4
write_SCCB(0x89, 0xd2);
  4039ca:	2030      	movs	r0, #48	; 0x30
  4039cc:	2189      	movs	r1, #137	; 0x89
  4039ce:	22d2      	movs	r2, #210	; 0xd2
  4039d0:	47a0      	blx	r4
write_SCCB(0x8a, 0xe6);
  4039d2:	2030      	movs	r0, #48	; 0x30
  4039d4:	218a      	movs	r1, #138	; 0x8a
  4039d6:	22e6      	movs	r2, #230	; 0xe6
  4039d8:	47a0      	blx	r4
  4039da:	bd10      	pop	{r4, pc}
  4039dc:	0000      	movs	r0, r0
	...

004039e0 <getBatVoltage>:
	for(int i = 0; ov_format[i] != 0xff;i++ ) write_SCCB(ov_format[i],ov_vga[1]);
	
}


float getBatVoltage() {
  4039e0:	b538      	push	{r3, r4, r5, lr}
  4039e2:	4b19      	ldr	r3, [pc, #100]	; (403a48 <getBatVoltage+0x68>)
  4039e4:	2201      	movs	r2, #1
  4039e6:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  4039e8:	2202      	movs	r2, #2
  4039ea:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4039ec:	461a      	mov	r2, r3
  4039ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
	afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
	afec_start_software_conversion(AFEC1);
					
	while(!(afec_get_interrupt_status(AFEC1) & (1<<AFEC_CHANNEL_0)));
  4039f0:	f013 0f01 	tst.w	r3, #1
  4039f4:	d0fb      	beq.n	4039ee <getBatVoltage+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4039f6:	4b14      	ldr	r3, [pc, #80]	; (403a48 <getBatVoltage+0x68>)
  4039f8:	2200      	movs	r2, #0
  4039fa:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4039fc:	6e98      	ldr	r0, [r3, #104]	; 0x68

	uint16_t convRes = afec_channel_get_value(AFEC1,AFEC_CHANNEL_0) - 0x7f0;
  4039fe:	f5a0 60fe 	sub.w	r0, r0, #2032	; 0x7f0
	return (3.3*convRes/4095.00)*((140.00+960.00)/105.00);
  403a02:	b280      	uxth	r0, r0
  403a04:	4b11      	ldr	r3, [pc, #68]	; (403a4c <getBatVoltage+0x6c>)
  403a06:	4798      	blx	r3
  403a08:	4c11      	ldr	r4, [pc, #68]	; (403a50 <getBatVoltage+0x70>)
  403a0a:	a309      	add	r3, pc, #36	; (adr r3, 403a30 <getBatVoltage+0x50>)
  403a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a10:	47a0      	blx	r4
  403a12:	a309      	add	r3, pc, #36	; (adr r3, 403a38 <getBatVoltage+0x58>)
  403a14:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a18:	4d0e      	ldr	r5, [pc, #56]	; (403a54 <getBatVoltage+0x74>)
  403a1a:	47a8      	blx	r5
  403a1c:	a308      	add	r3, pc, #32	; (adr r3, 403a40 <getBatVoltage+0x60>)
  403a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a22:	47a0      	blx	r4
  403a24:	4b0c      	ldr	r3, [pc, #48]	; (403a58 <getBatVoltage+0x78>)
  403a26:	4798      	blx	r3
}
  403a28:	bd38      	pop	{r3, r4, r5, pc}
  403a2a:	bf00      	nop
  403a2c:	f3af 8000 	nop.w
  403a30:	66666666 	.word	0x66666666
  403a34:	400a6666 	.word	0x400a6666
  403a38:	00000000 	.word	0x00000000
  403a3c:	40affe00 	.word	0x40affe00
  403a40:	3cf3cf3d 	.word	0x3cf3cf3d
  403a44:	4024f3cf 	.word	0x4024f3cf
  403a48:	40064000 	.word	0x40064000
  403a4c:	00407321 	.word	0x00407321
  403a50:	004073ed 	.word	0x004073ed
  403a54:	00407641 	.word	0x00407641
  403a58:	00407971 	.word	0x00407971

00403a5c <dumpFrame>:

void dumpFrame() {
  403a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  403a60:	4a14      	ldr	r2, [pc, #80]	; (403ab4 <dumpFrame+0x58>)
  403a62:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  403a64:	f043 0301 	orr.w	r3, r3, #1
  403a68:	63d3      	str	r3, [r2, #60]	; 0x3c
		isi_dma_channel_disable(ISI,1);
		sendDebugString("IMG:");
  403a6a:	4813      	ldr	r0, [pc, #76]	; (403ab8 <dumpFrame+0x5c>)
  403a6c:	4b13      	ldr	r3, [pc, #76]	; (403abc <dumpFrame+0x60>)
  403a6e:	4798      	blx	r3
  403a70:	4e13      	ldr	r6, [pc, #76]	; (403ac0 <dumpFrame+0x64>)
		volatile uint8_t* imgData = (uint8_t*)(BOARD_SDRAM_ADDR+320*240*2*16);
		for(int i=0;i<320*240*2;i++){
			while(!uart_is_tx_ready(UART4));
  403a72:	4d14      	ldr	r5, [pc, #80]	; (403ac4 <dumpFrame+0x68>)
  403a74:	4c14      	ldr	r4, [pc, #80]	; (403ac8 <dumpFrame+0x6c>)
			uart_write(UART4,imgData[i]);
  403a76:	f8df 8060 	ldr.w	r8, [pc, #96]	; 403ad8 <dumpFrame+0x7c>

void dumpFrame() {
		isi_dma_channel_disable(ISI,1);
		sendDebugString("IMG:");
		volatile uint8_t* imgData = (uint8_t*)(BOARD_SDRAM_ADDR+320*240*2*16);
		for(int i=0;i<320*240*2;i++){
  403a7a:	4f14      	ldr	r7, [pc, #80]	; (403acc <dumpFrame+0x70>)
			while(!uart_is_tx_ready(UART4));
  403a7c:	4620      	mov	r0, r4
  403a7e:	47a8      	blx	r5
  403a80:	2800      	cmp	r0, #0
  403a82:	d0fb      	beq.n	403a7c <dumpFrame+0x20>
			uart_write(UART4,imgData[i]);
  403a84:	f816 1b01 	ldrb.w	r1, [r6], #1
  403a88:	4620      	mov	r0, r4
  403a8a:	47c0      	blx	r8

void dumpFrame() {
		isi_dma_channel_disable(ISI,1);
		sendDebugString("IMG:");
		volatile uint8_t* imgData = (uint8_t*)(BOARD_SDRAM_ADDR+320*240*2*16);
		for(int i=0;i<320*240*2;i++){
  403a8c:	42be      	cmp	r6, r7
  403a8e:	d1f5      	bne.n	403a7c <dumpFrame+0x20>
			while(!uart_is_tx_ready(UART4));
			uart_write(UART4,imgData[i]);
		}
		sendDebugString(":ENDIMG\n");
  403a90:	480f      	ldr	r0, [pc, #60]	; (403ad0 <dumpFrame+0x74>)
  403a92:	4b0a      	ldr	r3, [pc, #40]	; (403abc <dumpFrame+0x60>)
  403a94:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  403a96:	4a07      	ldr	r2, [pc, #28]	; (403ab4 <dumpFrame+0x58>)
  403a98:	6b93      	ldr	r3, [r2, #56]	; 0x38
  403a9a:	f043 0301 	orr.w	r3, r3, #1
  403a9e:	6393      	str	r3, [r2, #56]	; 0x38
		isi_dma_channel_enable(ISI,1);
		memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);	
  403aa0:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  403aa4:	2100      	movs	r1, #0
  403aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403aaa:	4b0a      	ldr	r3, [pc, #40]	; (403ad4 <dumpFrame+0x78>)
  403aac:	4798      	blx	r3
  403aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ab2:	bf00      	nop
  403ab4:	4004c000 	.word	0x4004c000
  403ab8:	0040df3c 	.word	0x0040df3c
  403abc:	0040019d 	.word	0x0040019d
  403ac0:	70258000 	.word	0x70258000
  403ac4:	00402a09 	.word	0x00402a09
  403ac8:	400e1e00 	.word	0x400e1e00
  403acc:	7027d800 	.word	0x7027d800
  403ad0:	0040df44 	.word	0x0040df44
  403ad4:	0040e765 	.word	0x0040e765
  403ad8:	00402a15 	.word	0x00402a15

00403adc <calcRotation>:
}

XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
  403adc:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  403ae0:	ed2d 8b06 	vpush	{d8-d10}
  403ae4:	b08a      	sub	sp, #40	; 0x28
  403ae6:	4604      	mov	r4, r0
  403ae8:	ee09 3a10 	vmov	s18, r3
  403aec:	eddd 9a18 	vldr	s19, [sp, #96]	; 0x60
  403af0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  403af4:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
	inX = inX - cenX;
	inZ = inZ - cenZ;
  403af8:	ee07 2a90 	vmov	s15, r2
  403afc:	ee37 8ae9 	vsub.f32	s16, s15, s19
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  403b00:	ee07 1a90 	vmov	s15, r1
  403b04:	ee77 7ac9 	vsub.f32	s15, s15, s18
  403b08:	ee17 0a90 	vmov	r0, s15
  403b0c:	4b72      	ldr	r3, [pc, #456]	; (403cd8 <calcRotation+0x1fc>)
  403b0e:	4798      	blx	r3
  403b10:	e9cd 0100 	strd	r0, r1, [sp]
  403b14:	f1b8 0f01 	cmp.w	r8, #1
  403b18:	f040 808a 	bne.w	403c30 <calcRotation+0x154>
  403b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b1e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
  403b22:	4d6d      	ldr	r5, [pc, #436]	; (403cd8 <calcRotation+0x1fc>)
  403b24:	4658      	mov	r0, fp
  403b26:	47a8      	blx	r5
  403b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403b2c:	4e6b      	ldr	r6, [pc, #428]	; (403cdc <calcRotation+0x200>)
  403b2e:	47b0      	blx	r6
  403b30:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403b34:	ee18 0a10 	vmov	r0, s16
  403b38:	47a8      	blx	r5
  403b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b42:	4f67      	ldr	r7, [pc, #412]	; (403ce0 <calcRotation+0x204>)
  403b44:	47b8      	blx	r7
  403b46:	e9cd 0104 	strd	r0, r1, [sp, #16]
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  403b4a:	4658      	mov	r0, fp
  403b4c:	47a8      	blx	r5
  403b4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  403b52:	47b8      	blx	r7
  403b54:	4682      	mov	sl, r0
  403b56:	468b      	mov	fp, r1
  403b58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403b5c:	47b0      	blx	r6
  403b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  403b62:	4d60      	ldr	r5, [pc, #384]	; (403ce4 <calcRotation+0x208>)
  403b64:	e9dd 0100 	ldrd	r0, r1, [sp]
  403b68:	4652      	mov	r2, sl
  403b6a:	465b      	mov	r3, fp
  403b6c:	47a8      	blx	r5
  403b6e:	4606      	mov	r6, r0
  403b70:	460f      	mov	r7, r1
  403b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403b7a:	47a8      	blx	r5
  403b7c:	4602      	mov	r2, r0
  403b7e:	460b      	mov	r3, r1
  403b80:	4630      	mov	r0, r6
  403b82:	4639      	mov	r1, r7
  403b84:	4e58      	ldr	r6, [pc, #352]	; (403ce8 <calcRotation+0x20c>)
  403b86:	47b0      	blx	r6
  403b88:	4e58      	ldr	r6, [pc, #352]	; (403cec <calcRotation+0x210>)
  403b8a:	47b0      	blx	r6
  403b8c:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  403b90:	e9dd 0100 	ldrd	r0, r1, [sp]
  403b94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  403b98:	47a8      	blx	r5
  403b9a:	4682      	mov	sl, r0
  403b9c:	468b      	mov	fp, r1
  403b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403ba6:	47a8      	blx	r5
  403ba8:	4602      	mov	r2, r0
  403baa:	460b      	mov	r3, r1
  403bac:	4650      	mov	r0, sl
  403bae:	4659      	mov	r1, fp
  403bb0:	4d4f      	ldr	r5, [pc, #316]	; (403cf0 <calcRotation+0x214>)
  403bb2:	47a8      	blx	r5
  403bb4:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  403bb6:	ee07 0a90 	vmov	s15, r0
  403bba:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  403bbe:	f1b8 0f01 	cmp.w	r8, #1
  403bc2:	d17f      	bne.n	403cc4 <calcRotation+0x1e8>
  403bc4:	eeb5 aa40 	vcmp.f32	s20, #0.0
  403bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403bcc:	d118      	bne.n	403c00 <calcRotation+0x124>
  403bce:	e079      	b.n	403cc4 <calcRotation+0x1e8>
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  403bd0:	eefd 7aca 	vcvt.s32.f32	s15, s20
  403bd4:	ee17 3a90 	vmov	r3, s15
  403bd8:	2b00      	cmp	r3, #0
  403bda:	bfb8      	it	lt
  403bdc:	425b      	neglt	r3, r3
  403bde:	f1c3 0301 	rsb	r3, r3, #1
  403be2:	ee07 3a90 	vmov	s15, r3
  403be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403bea:	ee68 8aa7 	vmul.f32	s17, s17, s15
  403bee:	ee78 7a29 	vadd.f32	s15, s16, s19
  403bf2:	ee27 8a8a 	vmul.f32	s16, s15, s20
  403bf6:	ee38 8a88 	vadd.f32	s16, s17, s16
  403bfa:	ee78 8a29 	vadd.f32	s17, s16, s19
  403bfe:	e061      	b.n	403cc4 <calcRotation+0x1e8>
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  403c00:	eefd 7aca 	vcvt.s32.f32	s15, s20
  403c04:	ee17 3a90 	vmov	r3, s15
  403c08:	2b00      	cmp	r3, #0
  403c0a:	bfb8      	it	lt
  403c0c:	425b      	neglt	r3, r3
  403c0e:	f1c3 0301 	rsb	r3, r3, #1
  403c12:	ee07 3a90 	vmov	s15, r3
  403c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403c1a:	ee67 7aa8 	vmul.f32	s15, s15, s17
  403c1e:	ee38 8a29 	vadd.f32	s16, s16, s19
  403c22:	ee28 8a0a 	vmul.f32	s16, s16, s20
  403c26:	ee37 8ac8 	vsub.f32	s16, s15, s16
  403c2a:	ee78 8a29 	vadd.f32	s17, s16, s19
  403c2e:	e049      	b.n	403cc4 <calcRotation+0x1e8>
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  403c30:	4d29      	ldr	r5, [pc, #164]	; (403cd8 <calcRotation+0x1fc>)
  403c32:	9819      	ldr	r0, [sp, #100]	; 0x64
  403c34:	47a8      	blx	r5
  403c36:	4606      	mov	r6, r0
  403c38:	460f      	mov	r7, r1
  403c3a:	4b28      	ldr	r3, [pc, #160]	; (403cdc <calcRotation+0x200>)
  403c3c:	4798      	blx	r3
  403c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403c42:	ee18 0a10 	vmov	r0, s16
  403c46:	47a8      	blx	r5
  403c48:	4682      	mov	sl, r0
  403c4a:	468b      	mov	fp, r1
  403c4c:	4630      	mov	r0, r6
  403c4e:	4639      	mov	r1, r7
  403c50:	4b23      	ldr	r3, [pc, #140]	; (403ce0 <calcRotation+0x204>)
  403c52:	4798      	blx	r3
  403c54:	4602      	mov	r2, r0
  403c56:	460b      	mov	r3, r1
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  403c58:	4d22      	ldr	r5, [pc, #136]	; (403ce4 <calcRotation+0x208>)
  403c5a:	e9dd 0100 	ldrd	r0, r1, [sp]
  403c5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403c62:	47a8      	blx	r5
  403c64:	4606      	mov	r6, r0
  403c66:	460f      	mov	r7, r1
  403c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403c6c:	4652      	mov	r2, sl
  403c6e:	465b      	mov	r3, fp
  403c70:	47a8      	blx	r5
  403c72:	4602      	mov	r2, r0
  403c74:	460b      	mov	r3, r1
  403c76:	4630      	mov	r0, r6
  403c78:	4639      	mov	r1, r7
  403c7a:	4e1b      	ldr	r6, [pc, #108]	; (403ce8 <calcRotation+0x20c>)
  403c7c:	47b0      	blx	r6
  403c7e:	4e1b      	ldr	r6, [pc, #108]	; (403cec <calcRotation+0x210>)
  403c80:	47b0      	blx	r6
  403c82:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  403c86:	e9dd 0100 	ldrd	r0, r1, [sp]
  403c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c8e:	47a8      	blx	r5
  403c90:	e9cd 0100 	strd	r0, r1, [sp]
  403c94:	4650      	mov	r0, sl
  403c96:	4659      	mov	r1, fp
  403c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403c9c:	47a8      	blx	r5
  403c9e:	4602      	mov	r2, r0
  403ca0:	460b      	mov	r3, r1
  403ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
  403ca6:	4d12      	ldr	r5, [pc, #72]	; (403cf0 <calcRotation+0x214>)
  403ca8:	47a8      	blx	r5
  403caa:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  403cac:	ee07 0a90 	vmov	s15, r0
  403cb0:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  403cb4:	f1b8 0f00 	cmp.w	r8, #0
  403cb8:	d104      	bne.n	403cc4 <calcRotation+0x1e8>
  403cba:	eeb5 aa40 	vcmp.f32	s20, #0.0
  403cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cc2:	d185      	bne.n	403bd0 <calcRotation+0xf4>
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
	return out;
  403cc4:	ed84 9a00 	vstr	s18, [r4]
  403cc8:	edc4 8a01 	vstr	s17, [r4, #4]
}
  403ccc:	4620      	mov	r0, r4
  403cce:	b00a      	add	sp, #40	; 0x28
  403cd0:	ecbd 8b06 	vpop	{d8-d10}
  403cd4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  403cd8:	00407345 	.word	0x00407345
  403cdc:	00404b5d 	.word	0x00404b5d
  403ce0:	00404be5 	.word	0x00404be5
  403ce4:	004073ed 	.word	0x004073ed
  403ce8:	00407089 	.word	0x00407089
  403cec:	00407971 	.word	0x00407971
  403cf0:	00407085 	.word	0x00407085
  403cf4:	00000000 	.word	0x00000000

00403cf8 <legAngCalc>:
int sign(float in) {
	if(in<0) return -1;
	else return 1;
}

angles legAngCalc(float x, float y, float z) {
  403cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cfc:	ed2d 8b06 	vpush	{d8-d10}
  403d00:	b085      	sub	sp, #20
  403d02:	4605      	mov	r5, r0
  403d04:	ee09 1a10 	vmov	s18, r1
  403d08:	ee0a 2a10 	vmov	s20, r2
  403d0c:	ee08 3a90 	vmov	s17, r3
	float G = sqrt(x*x + z*z);
  403d10:	ee69 7a09 	vmul.f32	s15, s18, s18
  403d14:	ee28 8aa8 	vmul.f32	s16, s17, s17
  403d18:	ee37 8a88 	vadd.f32	s16, s15, s16
  403d1c:	4c56      	ldr	r4, [pc, #344]	; (403e78 <legAngCalc+0x180>)
  403d1e:	ee18 0a10 	vmov	r0, s16
  403d22:	47a0      	blx	r4
  403d24:	4e55      	ldr	r6, [pc, #340]	; (403e7c <legAngCalc+0x184>)
  403d26:	47b0      	blx	r6
  403d28:	4f55      	ldr	r7, [pc, #340]	; (403e80 <legAngCalc+0x188>)
  403d2a:	47b8      	blx	r7
  403d2c:	ee09 0a90 	vmov	s19, r0
	float H = sqrt(y*y+G*G);
  403d30:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  403d34:	ee29 8aa9 	vmul.f32	s16, s19, s19
  403d38:	ee37 8a88 	vadd.f32	s16, s15, s16
  403d3c:	ee18 0a10 	vmov	r0, s16
  403d40:	47a0      	blx	r4
  403d42:	47b0      	blx	r6
  403d44:	47b8      	blx	r7
  403d46:	ee08 0a10 	vmov	s16, r0
	float b = acos((A*A + H*H - B*B)/(2*A*H));
  403d4a:	ee68 aa08 	vmul.f32	s21, s16, s16
  403d4e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 403e84 <legAngCalc+0x18c>
  403d52:	ee7a 7aa7 	vadd.f32	s15, s21, s15
  403d56:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 403e88 <legAngCalc+0x190>
  403d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403d5e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 403e8c <legAngCalc+0x194>
  403d62:	ee28 7a07 	vmul.f32	s14, s16, s14
  403d66:	eec7 7a87 	vdiv.f32	s15, s15, s14
  403d6a:	ee17 0a90 	vmov	r0, s15
  403d6e:	47a0      	blx	r4
  403d70:	4b47      	ldr	r3, [pc, #284]	; (403e90 <legAngCalc+0x198>)
  403d72:	4798      	blx	r3
  403d74:	47b8      	blx	r7
	
	float h = asin(H*(sin(b))/B);
  403d76:	47a0      	blx	r4
  403d78:	4682      	mov	sl, r0
  403d7a:	468b      	mov	fp, r1
  403d7c:	4b45      	ldr	r3, [pc, #276]	; (403e94 <legAngCalc+0x19c>)
  403d7e:	4798      	blx	r3
  403d80:	4680      	mov	r8, r0
  403d82:	4689      	mov	r9, r1
  403d84:	ee18 0a10 	vmov	r0, s16
  403d88:	47a0      	blx	r4
  403d8a:	4642      	mov	r2, r8
  403d8c:	464b      	mov	r3, r9
  403d8e:	4c42      	ldr	r4, [pc, #264]	; (403e98 <legAngCalc+0x1a0>)
  403d90:	47a0      	blx	r4
  403d92:	a335      	add	r3, pc, #212	; (adr r3, 403e68 <legAngCalc+0x170>)
  403d94:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d98:	4c40      	ldr	r4, [pc, #256]	; (403e9c <legAngCalc+0x1a4>)
  403d9a:	47a0      	blx	r4
  403d9c:	4b40      	ldr	r3, [pc, #256]	; (403ea0 <legAngCalc+0x1a8>)
  403d9e:	4798      	blx	r3
  403da0:	47b8      	blx	r7
  403da2:	4680      	mov	r8, r0
	
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
  403da4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 403ea4 <legAngCalc+0x1ac>
  403da8:	eef4 aae7 	vcmpe.f32	s21, s15
  403dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403db0:	da0a      	bge.n	403dc8 <legAngCalc+0xd0>
	else Ang.S3 = (M_PI)-h;
  403db2:	4b31      	ldr	r3, [pc, #196]	; (403e78 <legAngCalc+0x180>)
  403db4:	4798      	blx	r3
  403db6:	4602      	mov	r2, r0
  403db8:	460b      	mov	r3, r1
  403dba:	a12d      	add	r1, pc, #180	; (adr r1, 403e70 <legAngCalc+0x178>)
  403dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
  403dc0:	4c39      	ldr	r4, [pc, #228]	; (403ea8 <legAngCalc+0x1b0>)
  403dc2:	47a0      	blx	r4
  403dc4:	47b8      	blx	r7
  403dc6:	4680      	mov	r8, r0
	Ang.S2 = (atan2(y,G))+b;
  403dc8:	4c2b      	ldr	r4, [pc, #172]	; (403e78 <legAngCalc+0x180>)
  403dca:	ee1a 0a10 	vmov	r0, s20
  403dce:	47a0      	blx	r4
  403dd0:	4606      	mov	r6, r0
  403dd2:	460f      	mov	r7, r1
  403dd4:	ee19 0a90 	vmov	r0, s19
  403dd8:	47a0      	blx	r4
  403dda:	4602      	mov	r2, r0
  403ddc:	460b      	mov	r3, r1
  403dde:	4630      	mov	r0, r6
  403de0:	4639      	mov	r1, r7
  403de2:	4e32      	ldr	r6, [pc, #200]	; (403eac <legAngCalc+0x1b4>)
  403de4:	47b0      	blx	r6
  403de6:	e9cd 0100 	strd	r0, r1, [sp]
	Ang.S1 = atan2(x,z);
  403dea:	ee19 0a10 	vmov	r0, s18
  403dee:	47a0      	blx	r4
  403df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403df4:	ee18 0a90 	vmov	r0, s17
  403df8:	47a0      	blx	r4
  403dfa:	4602      	mov	r2, r0
  403dfc:	460b      	mov	r3, r1
  403dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e02:	47b0      	blx	r6
  403e04:	4e1e      	ldr	r6, [pc, #120]	; (403e80 <legAngCalc+0x188>)
  403e06:	47b0      	blx	r6
	
	Ang.S1 = Ang.S1*180.00/M_PI;
  403e08:	47a0      	blx	r4
  403e0a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 403e98 <legAngCalc+0x1a0>
  403e0e:	2200      	movs	r2, #0
  403e10:	4b27      	ldr	r3, [pc, #156]	; (403eb0 <legAngCalc+0x1b8>)
  403e12:	47c8      	blx	r9
  403e14:	4f21      	ldr	r7, [pc, #132]	; (403e9c <legAngCalc+0x1a4>)
  403e16:	a316      	add	r3, pc, #88	; (adr r3, 403e70 <legAngCalc+0x178>)
  403e18:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e1c:	47b8      	blx	r7
  403e1e:	47b0      	blx	r6
  403e20:	6028      	str	r0, [r5, #0]
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
	else Ang.S3 = (M_PI)-h;
	Ang.S2 = (atan2(y,G))+b;
  403e22:	4650      	mov	r0, sl
  403e24:	4659      	mov	r1, fp
  403e26:	e9dd 2300 	ldrd	r2, r3, [sp]
  403e2a:	f8df c088 	ldr.w	ip, [pc, #136]	; 403eb4 <legAngCalc+0x1bc>
  403e2e:	47e0      	blx	ip
  403e30:	47b0      	blx	r6
	Ang.S1 = atan2(x,z);
	
	Ang.S1 = Ang.S1*180.00/M_PI;
	Ang.S2 = Ang.S2*180.00/M_PI;
  403e32:	47a0      	blx	r4
  403e34:	2200      	movs	r2, #0
  403e36:	4b1e      	ldr	r3, [pc, #120]	; (403eb0 <legAngCalc+0x1b8>)
  403e38:	47c8      	blx	r9
  403e3a:	a30d      	add	r3, pc, #52	; (adr r3, 403e70 <legAngCalc+0x178>)
  403e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e40:	47b8      	blx	r7
  403e42:	47b0      	blx	r6
  403e44:	6068      	str	r0, [r5, #4]
	Ang.S3 = Ang.S3*180.00/M_PI;
  403e46:	4640      	mov	r0, r8
  403e48:	47a0      	blx	r4
  403e4a:	2200      	movs	r2, #0
  403e4c:	4b18      	ldr	r3, [pc, #96]	; (403eb0 <legAngCalc+0x1b8>)
  403e4e:	47c8      	blx	r9
  403e50:	a307      	add	r3, pc, #28	; (adr r3, 403e70 <legAngCalc+0x178>)
  403e52:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e56:	47b8      	blx	r7
  403e58:	47b0      	blx	r6
  403e5a:	60a8      	str	r0, [r5, #8]
	
	
	return Ang;
}
  403e5c:	4628      	mov	r0, r5
  403e5e:	b005      	add	sp, #20
  403e60:	ecbd 8b06 	vpop	{d8-d10}
  403e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e68:	00000000 	.word	0x00000000
  403e6c:	4062c000 	.word	0x4062c000
  403e70:	54442d18 	.word	0x54442d18
  403e74:	400921fb 	.word	0x400921fb
  403e78:	00407345 	.word	0x00407345
  403e7c:	00404e25 	.word	0x00404e25
  403e80:	00407971 	.word	0x00407971
  403e84:	461c4000 	.word	0x461c4000
  403e88:	46afc800 	.word	0x46afc800
  403e8c:	43480000 	.word	0x43480000
  403e90:	00404cd1 	.word	0x00404cd1
  403e94:	00404be5 	.word	0x00404be5
  403e98:	004073ed 	.word	0x004073ed
  403e9c:	00407641 	.word	0x00407641
  403ea0:	00404d79 	.word	0x00404d79
  403ea4:	46fde800 	.word	0x46fde800
  403ea8:	00407085 	.word	0x00407085
  403eac:	00404e21 	.word	0x00404e21
  403eb0:	40668000 	.word	0x40668000
  403eb4:	00407089 	.word	0x00407089

00403eb8 <writeLegOut>:

void writeLegOut(int leg, float S0, float S1, float S2) {
  403eb8:	b570      	push	{r4, r5, r6, lr}
  403eba:	460e      	mov	r6, r1
  403ebc:	4615      	mov	r5, r2
  403ebe:	461c      	mov	r4, r3
	
	switch (leg) {
  403ec0:	2805      	cmp	r0, #5
  403ec2:	d857      	bhi.n	403f74 <writeLegOut+0xbc>
  403ec4:	e8df f000 	tbb	[pc, r0]
  403ec8:	2d1f1103 	.word	0x2d1f1103
  403ecc:	493b      	.short	0x493b
	
	case 0:
		WriteServo(L0_S0,S0);
  403ece:	2040      	movs	r0, #64	; 0x40
  403ed0:	211e      	movs	r1, #30
  403ed2:	4632      	mov	r2, r6
  403ed4:	4e28      	ldr	r6, [pc, #160]	; (403f78 <writeLegOut+0xc0>)
  403ed6:	47b0      	blx	r6
		WriteServo(L0_S1,S1);
  403ed8:	2040      	movs	r0, #64	; 0x40
  403eda:	2122      	movs	r1, #34	; 0x22
  403edc:	462a      	mov	r2, r5
  403ede:	47b0      	blx	r6
		WriteServo(L0_S2,S2);
  403ee0:	2040      	movs	r0, #64	; 0x40
  403ee2:	2126      	movs	r1, #38	; 0x26
  403ee4:	4622      	mov	r2, r4
  403ee6:	47b0      	blx	r6
	break;
  403ee8:	bd70      	pop	{r4, r5, r6, pc}
	
	case 1:
		WriteServo(L1_S0,S0);
  403eea:	2041      	movs	r0, #65	; 0x41
  403eec:	2106      	movs	r1, #6
  403eee:	4632      	mov	r2, r6
  403ef0:	4e21      	ldr	r6, [pc, #132]	; (403f78 <writeLegOut+0xc0>)
  403ef2:	47b0      	blx	r6
		WriteServo(L1_S1,S1);
  403ef4:	2041      	movs	r0, #65	; 0x41
  403ef6:	210a      	movs	r1, #10
  403ef8:	462a      	mov	r2, r5
  403efa:	47b0      	blx	r6
		WriteServo(L1_S2,S2);
  403efc:	2041      	movs	r0, #65	; 0x41
  403efe:	210e      	movs	r1, #14
  403f00:	4622      	mov	r2, r4
  403f02:	47b0      	blx	r6
	break;
  403f04:	bd70      	pop	{r4, r5, r6, pc}

	case 2:
		WriteServo(L2_S0,S0);
  403f06:	2040      	movs	r0, #64	; 0x40
  403f08:	2112      	movs	r1, #18
  403f0a:	4632      	mov	r2, r6
  403f0c:	4e1a      	ldr	r6, [pc, #104]	; (403f78 <writeLegOut+0xc0>)
  403f0e:	47b0      	blx	r6
		WriteServo(L2_S1,S1);
  403f10:	2040      	movs	r0, #64	; 0x40
  403f12:	2116      	movs	r1, #22
  403f14:	462a      	mov	r2, r5
  403f16:	47b0      	blx	r6
		WriteServo(L2_S2,S2);
  403f18:	2040      	movs	r0, #64	; 0x40
  403f1a:	211a      	movs	r1, #26
  403f1c:	4622      	mov	r2, r4
  403f1e:	47b0      	blx	r6
	break;
  403f20:	bd70      	pop	{r4, r5, r6, pc}

	case 3:
		WriteServo(L3_S0,S0);
  403f22:	2041      	movs	r0, #65	; 0x41
  403f24:	2112      	movs	r1, #18
  403f26:	4632      	mov	r2, r6
  403f28:	4e13      	ldr	r6, [pc, #76]	; (403f78 <writeLegOut+0xc0>)
  403f2a:	47b0      	blx	r6
		WriteServo(L3_S1,S1);
  403f2c:	2041      	movs	r0, #65	; 0x41
  403f2e:	2116      	movs	r1, #22
  403f30:	462a      	mov	r2, r5
  403f32:	47b0      	blx	r6
		WriteServo(L3_S2,S2);
  403f34:	2041      	movs	r0, #65	; 0x41
  403f36:	211a      	movs	r1, #26
  403f38:	4622      	mov	r2, r4
  403f3a:	47b0      	blx	r6
	break;
  403f3c:	bd70      	pop	{r4, r5, r6, pc}

	case 4:
		WriteServo(L4_S0,S0);
  403f3e:	2040      	movs	r0, #64	; 0x40
  403f40:	2106      	movs	r1, #6
  403f42:	4632      	mov	r2, r6
  403f44:	4e0c      	ldr	r6, [pc, #48]	; (403f78 <writeLegOut+0xc0>)
  403f46:	47b0      	blx	r6
		WriteServo(L4_S1,S1);
  403f48:	2040      	movs	r0, #64	; 0x40
  403f4a:	210a      	movs	r1, #10
  403f4c:	462a      	mov	r2, r5
  403f4e:	47b0      	blx	r6
		WriteServo(L4_S2,S2);
  403f50:	2040      	movs	r0, #64	; 0x40
  403f52:	210e      	movs	r1, #14
  403f54:	4622      	mov	r2, r4
  403f56:	47b0      	blx	r6
	break;
  403f58:	bd70      	pop	{r4, r5, r6, pc}

	case 5:
		WriteServo(L5_S0,S0);
  403f5a:	2041      	movs	r0, #65	; 0x41
  403f5c:	211e      	movs	r1, #30
  403f5e:	4632      	mov	r2, r6
  403f60:	4e05      	ldr	r6, [pc, #20]	; (403f78 <writeLegOut+0xc0>)
  403f62:	47b0      	blx	r6
		WriteServo(L5_S1,S1);
  403f64:	2041      	movs	r0, #65	; 0x41
  403f66:	2122      	movs	r1, #34	; 0x22
  403f68:	462a      	mov	r2, r5
  403f6a:	47b0      	blx	r6
		WriteServo(L5_S2,S2);
  403f6c:	2041      	movs	r0, #65	; 0x41
  403f6e:	2126      	movs	r1, #38	; 0x26
  403f70:	4622      	mov	r2, r4
  403f72:	47b0      	blx	r6
  403f74:	bd70      	pop	{r4, r5, r6, pc}
  403f76:	bf00      	nop
  403f78:	00403541 	.word	0x00403541

00403f7c <cmdLED>:
 *  Author: to300
 */ 
#include <Hexabot/Hexabot_Cmd.h>
#include <Hexabot/Hexabot.h>

void cmdLED(int L, int onOff) {
  403f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f7e:	b09b      	sub	sp, #108	; 0x6c
  403f80:	4604      	mov	r4, r0
  403f82:	460d      	mov	r5, r1
	extern int VerboseMode;
	char buf[100];
	
	switch(L) {
  403f84:	2809      	cmp	r0, #9
  403f86:	f200 80ad 	bhi.w	4040e4 <cmdLED+0x168>
  403f8a:	e8df f000 	tbb	[pc, r0]
  403f8e:	1205      	.short	0x1205
  403f90:	46392c1f 	.word	0x46392c1f
  403f94:	69ab5e51 	.word	0x69ab5e51
		case 0:
			if(onOff) pio_set(LED0);
  403f98:	b129      	cbz	r1, 403fa6 <cmdLED+0x2a>
  403f9a:	4859      	ldr	r0, [pc, #356]	; (404100 <cmdLED+0x184>)
  403f9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403fa0:	4b58      	ldr	r3, [pc, #352]	; (404104 <cmdLED+0x188>)
  403fa2:	4798      	blx	r3
  403fa4:	e09e      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED0);
  403fa6:	4856      	ldr	r0, [pc, #344]	; (404100 <cmdLED+0x184>)
  403fa8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403fac:	4b56      	ldr	r3, [pc, #344]	; (404108 <cmdLED+0x18c>)
  403fae:	4798      	blx	r3
  403fb0:	e098      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 1:
			if(onOff) pio_set(LED1);
  403fb2:	b129      	cbz	r1, 403fc0 <cmdLED+0x44>
  403fb4:	4852      	ldr	r0, [pc, #328]	; (404100 <cmdLED+0x184>)
  403fb6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403fba:	4b52      	ldr	r3, [pc, #328]	; (404104 <cmdLED+0x188>)
  403fbc:	4798      	blx	r3
  403fbe:	e091      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED1);
  403fc0:	484f      	ldr	r0, [pc, #316]	; (404100 <cmdLED+0x184>)
  403fc2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403fc6:	4b50      	ldr	r3, [pc, #320]	; (404108 <cmdLED+0x18c>)
  403fc8:	4798      	blx	r3
  403fca:	e08b      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 2:
			if(onOff) pio_set(LED2);
  403fcc:	b129      	cbz	r1, 403fda <cmdLED+0x5e>
  403fce:	484c      	ldr	r0, [pc, #304]	; (404100 <cmdLED+0x184>)
  403fd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403fd4:	4b4b      	ldr	r3, [pc, #300]	; (404104 <cmdLED+0x188>)
  403fd6:	4798      	blx	r3
  403fd8:	e084      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED2);
  403fda:	4849      	ldr	r0, [pc, #292]	; (404100 <cmdLED+0x184>)
  403fdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403fe0:	4b49      	ldr	r3, [pc, #292]	; (404108 <cmdLED+0x18c>)
  403fe2:	4798      	blx	r3
  403fe4:	e07e      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 3:
			if(onOff) pio_set(LED3);
  403fe6:	b129      	cbz	r1, 403ff4 <cmdLED+0x78>
  403fe8:	4845      	ldr	r0, [pc, #276]	; (404100 <cmdLED+0x184>)
  403fea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403fee:	4b45      	ldr	r3, [pc, #276]	; (404104 <cmdLED+0x188>)
  403ff0:	4798      	blx	r3
  403ff2:	e077      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED3);
  403ff4:	4842      	ldr	r0, [pc, #264]	; (404100 <cmdLED+0x184>)
  403ff6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403ffa:	4b43      	ldr	r3, [pc, #268]	; (404108 <cmdLED+0x18c>)
  403ffc:	4798      	blx	r3
  403ffe:	e071      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 4:
			if(onOff) pio_set(LED4);
  404000:	b129      	cbz	r1, 40400e <cmdLED+0x92>
  404002:	4842      	ldr	r0, [pc, #264]	; (40410c <cmdLED+0x190>)
  404004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  404008:	4b3e      	ldr	r3, [pc, #248]	; (404104 <cmdLED+0x188>)
  40400a:	4798      	blx	r3
  40400c:	e06a      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED4);
  40400e:	483f      	ldr	r0, [pc, #252]	; (40410c <cmdLED+0x190>)
  404010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  404014:	4b3c      	ldr	r3, [pc, #240]	; (404108 <cmdLED+0x18c>)
  404016:	4798      	blx	r3
  404018:	e064      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 5:
			if(onOff) pio_set(LED5);
  40401a:	b121      	cbz	r1, 404026 <cmdLED+0xaa>
  40401c:	4838      	ldr	r0, [pc, #224]	; (404100 <cmdLED+0x184>)
  40401e:	2104      	movs	r1, #4
  404020:	4b38      	ldr	r3, [pc, #224]	; (404104 <cmdLED+0x188>)
  404022:	4798      	blx	r3
  404024:	e05e      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED5);
  404026:	4836      	ldr	r0, [pc, #216]	; (404100 <cmdLED+0x184>)
  404028:	2104      	movs	r1, #4
  40402a:	4b37      	ldr	r3, [pc, #220]	; (404108 <cmdLED+0x18c>)
  40402c:	4798      	blx	r3
  40402e:	e059      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 6:
			if(onOff) pio_set(LED6);
  404030:	b129      	cbz	r1, 40403e <cmdLED+0xc2>
  404032:	4833      	ldr	r0, [pc, #204]	; (404100 <cmdLED+0x184>)
  404034:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404038:	4b32      	ldr	r3, [pc, #200]	; (404104 <cmdLED+0x188>)
  40403a:	4798      	blx	r3
  40403c:	e052      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED6);
  40403e:	4830      	ldr	r0, [pc, #192]	; (404100 <cmdLED+0x184>)
  404040:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404044:	4b30      	ldr	r3, [pc, #192]	; (404108 <cmdLED+0x18c>)
  404046:	4798      	blx	r3
  404048:	e04c      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 7:
			if(onOff) pio_set(LED7);
  40404a:	b121      	cbz	r1, 404056 <cmdLED+0xda>
  40404c:	482c      	ldr	r0, [pc, #176]	; (404100 <cmdLED+0x184>)
  40404e:	2140      	movs	r1, #64	; 0x40
  404050:	4b2c      	ldr	r3, [pc, #176]	; (404104 <cmdLED+0x188>)
  404052:	4798      	blx	r3
  404054:	e046      	b.n	4040e4 <cmdLED+0x168>
			else pio_clear(LED7);
  404056:	482a      	ldr	r0, [pc, #168]	; (404100 <cmdLED+0x184>)
  404058:	2140      	movs	r1, #64	; 0x40
  40405a:	4b2b      	ldr	r3, [pc, #172]	; (404108 <cmdLED+0x18c>)
  40405c:	4798      	blx	r3
  40405e:	e041      	b.n	4040e4 <cmdLED+0x168>
		break;
		
		case 9:
			if(onOff) {
  404060:	b301      	cbz	r1, 4040a4 <cmdLED+0x128>
				pio_set(LED0);
  404062:	4f27      	ldr	r7, [pc, #156]	; (404100 <cmdLED+0x184>)
  404064:	4638      	mov	r0, r7
  404066:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40406a:	4e26      	ldr	r6, [pc, #152]	; (404104 <cmdLED+0x188>)
  40406c:	47b0      	blx	r6
				pio_set(LED1);
  40406e:	4638      	mov	r0, r7
  404070:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404074:	47b0      	blx	r6
				pio_set(LED2);
  404076:	4638      	mov	r0, r7
  404078:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40407c:	47b0      	blx	r6
				pio_set(LED3);
  40407e:	4638      	mov	r0, r7
  404080:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  404084:	47b0      	blx	r6
				pio_set(LED4);
  404086:	4821      	ldr	r0, [pc, #132]	; (40410c <cmdLED+0x190>)
  404088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40408c:	47b0      	blx	r6
				pio_set(LED5);
  40408e:	4638      	mov	r0, r7
  404090:	2104      	movs	r1, #4
  404092:	47b0      	blx	r6
				pio_set(LED6);
  404094:	4638      	mov	r0, r7
  404096:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40409a:	47b0      	blx	r6
				pio_set(LED7);
  40409c:	4638      	mov	r0, r7
  40409e:	2140      	movs	r1, #64	; 0x40
  4040a0:	47b0      	blx	r6
  4040a2:	e01f      	b.n	4040e4 <cmdLED+0x168>
			}
			else
			{
				 pio_clear(LED0);
  4040a4:	4f16      	ldr	r7, [pc, #88]	; (404100 <cmdLED+0x184>)
  4040a6:	4638      	mov	r0, r7
  4040a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4040ac:	4e16      	ldr	r6, [pc, #88]	; (404108 <cmdLED+0x18c>)
  4040ae:	47b0      	blx	r6
				 pio_clear(LED1);
  4040b0:	4638      	mov	r0, r7
  4040b2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4040b6:	47b0      	blx	r6
				 pio_clear(LED2);
  4040b8:	4638      	mov	r0, r7
  4040ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4040be:	47b0      	blx	r6
				 pio_clear(LED3);
  4040c0:	4638      	mov	r0, r7
  4040c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4040c6:	47b0      	blx	r6
				 pio_clear(LED4);
  4040c8:	4810      	ldr	r0, [pc, #64]	; (40410c <cmdLED+0x190>)
  4040ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4040ce:	47b0      	blx	r6
				 pio_clear(LED5);
  4040d0:	4638      	mov	r0, r7
  4040d2:	2104      	movs	r1, #4
  4040d4:	47b0      	blx	r6
				 pio_clear(LED6);
  4040d6:	4638      	mov	r0, r7
  4040d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4040dc:	47b0      	blx	r6
				 pio_clear(LED7); 
  4040de:	4638      	mov	r0, r7
  4040e0:	2140      	movs	r1, #64	; 0x40
  4040e2:	47b0      	blx	r6
			}
		break;
		
	}
		if(VerboseMode) {
  4040e4:	4b0a      	ldr	r3, [pc, #40]	; (404110 <cmdLED+0x194>)
  4040e6:	681b      	ldr	r3, [r3, #0]
  4040e8:	b143      	cbz	r3, 4040fc <cmdLED+0x180>
		sprintf(buf,"LED%d SET TO %d\n",L,onOff);
  4040ea:	a801      	add	r0, sp, #4
  4040ec:	4909      	ldr	r1, [pc, #36]	; (404114 <cmdLED+0x198>)
  4040ee:	4622      	mov	r2, r4
  4040f0:	462b      	mov	r3, r5
  4040f2:	4c09      	ldr	r4, [pc, #36]	; (404118 <cmdLED+0x19c>)
  4040f4:	47a0      	blx	r4
		sendDebugString(buf);
  4040f6:	a801      	add	r0, sp, #4
  4040f8:	4b08      	ldr	r3, [pc, #32]	; (40411c <cmdLED+0x1a0>)
  4040fa:	4798      	blx	r3
	}

}
  4040fc:	b01b      	add	sp, #108	; 0x6c
  4040fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404100:	400e0e00 	.word	0x400e0e00
  404104:	00402549 	.word	0x00402549
  404108:	0040254d 	.word	0x0040254d
  40410c:	400e1000 	.word	0x400e1000
  404110:	2040c298 	.word	0x2040c298
  404114:	0040df50 	.word	0x0040df50
  404118:	004080f1 	.word	0x004080f1
  40411c:	0040019d 	.word	0x0040019d

00404120 <cmdServoMan>:

void cmdServoMan(int L,int S ,int angle) {
  404120:	b570      	push	{r4, r5, r6, lr}
  404122:	b09c      	sub	sp, #112	; 0x70
  404124:	4604      	mov	r4, r0
  404126:	460d      	mov	r5, r1
  404128:	4616      	mov	r6, r2
	extern int VerboseMode;
	char buf[100];
	
	switch (L) {
  40412a:	2805      	cmp	r0, #5
  40412c:	d84b      	bhi.n	4041c6 <cmdServoMan+0xa6>
  40412e:	e8df f000 	tbb	[pc, r0]
  404132:	0f03      	.short	0x0f03
  404134:	3f33271b 	.word	0x3f33271b
		
	case 0:
	WriteServo(L0_S0+0x04*S,angle);
  404138:	0089      	lsls	r1, r1, #2
  40413a:	2040      	movs	r0, #64	; 0x40
  40413c:	311e      	adds	r1, #30
  40413e:	ee07 2a90 	vmov	s15, r2
  404142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404146:	ee17 2a90 	vmov	r2, s15
  40414a:	4b26      	ldr	r3, [pc, #152]	; (4041e4 <cmdServoMan+0xc4>)
  40414c:	4798      	blx	r3
	break;
  40414e:	e03a      	b.n	4041c6 <cmdServoMan+0xa6>
	
	case 1:
	WriteServo(L1_S0+0x04*S,angle);
  404150:	0089      	lsls	r1, r1, #2
  404152:	2041      	movs	r0, #65	; 0x41
  404154:	3106      	adds	r1, #6
  404156:	ee07 2a90 	vmov	s15, r2
  40415a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40415e:	ee17 2a90 	vmov	r2, s15
  404162:	4b20      	ldr	r3, [pc, #128]	; (4041e4 <cmdServoMan+0xc4>)
  404164:	4798      	blx	r3
	break;
  404166:	e02e      	b.n	4041c6 <cmdServoMan+0xa6>
	
	case 2:
	WriteServo(L2_S0+0x04*S,angle);
  404168:	0089      	lsls	r1, r1, #2
  40416a:	2040      	movs	r0, #64	; 0x40
  40416c:	3112      	adds	r1, #18
  40416e:	ee07 2a90 	vmov	s15, r2
  404172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404176:	ee17 2a90 	vmov	r2, s15
  40417a:	4b1a      	ldr	r3, [pc, #104]	; (4041e4 <cmdServoMan+0xc4>)
  40417c:	4798      	blx	r3
	break;
  40417e:	e022      	b.n	4041c6 <cmdServoMan+0xa6>
	
	case 3:
	WriteServo(L3_S0+0x04*S,angle);
  404180:	0089      	lsls	r1, r1, #2
  404182:	2041      	movs	r0, #65	; 0x41
  404184:	3112      	adds	r1, #18
  404186:	ee07 2a90 	vmov	s15, r2
  40418a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40418e:	ee17 2a90 	vmov	r2, s15
  404192:	4b14      	ldr	r3, [pc, #80]	; (4041e4 <cmdServoMan+0xc4>)
  404194:	4798      	blx	r3
	break;
  404196:	e016      	b.n	4041c6 <cmdServoMan+0xa6>
	
	case 4:
	WriteServo(L4_S0+0x04*S,angle);
  404198:	0089      	lsls	r1, r1, #2
  40419a:	2040      	movs	r0, #64	; 0x40
  40419c:	3106      	adds	r1, #6
  40419e:	ee07 2a90 	vmov	s15, r2
  4041a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041a6:	ee17 2a90 	vmov	r2, s15
  4041aa:	4b0e      	ldr	r3, [pc, #56]	; (4041e4 <cmdServoMan+0xc4>)
  4041ac:	4798      	blx	r3
	break;
  4041ae:	e00a      	b.n	4041c6 <cmdServoMan+0xa6>
	
	case 5:
	WriteServo(L5_S0+0x04*S,angle);
  4041b0:	0089      	lsls	r1, r1, #2
  4041b2:	2041      	movs	r0, #65	; 0x41
  4041b4:	311e      	adds	r1, #30
  4041b6:	ee07 2a90 	vmov	s15, r2
  4041ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041be:	ee17 2a90 	vmov	r2, s15
  4041c2:	4b08      	ldr	r3, [pc, #32]	; (4041e4 <cmdServoMan+0xc4>)
  4041c4:	4798      	blx	r3
	break;
	}
	
	if(VerboseMode) {
  4041c6:	4b08      	ldr	r3, [pc, #32]	; (4041e8 <cmdServoMan+0xc8>)
  4041c8:	681b      	ldr	r3, [r3, #0]
  4041ca:	b14b      	cbz	r3, 4041e0 <cmdServoMan+0xc0>
		sprintf(buf,"SERVO LEG:%d,SERVO:%d MOVED TO %d\n",L,S,angle);
  4041cc:	9600      	str	r6, [sp, #0]
  4041ce:	a803      	add	r0, sp, #12
  4041d0:	4906      	ldr	r1, [pc, #24]	; (4041ec <cmdServoMan+0xcc>)
  4041d2:	4622      	mov	r2, r4
  4041d4:	462b      	mov	r3, r5
  4041d6:	4c06      	ldr	r4, [pc, #24]	; (4041f0 <cmdServoMan+0xd0>)
  4041d8:	47a0      	blx	r4
		sendDebugString(buf);
  4041da:	a803      	add	r0, sp, #12
  4041dc:	4b05      	ldr	r3, [pc, #20]	; (4041f4 <cmdServoMan+0xd4>)
  4041de:	4798      	blx	r3
	}
	
}
  4041e0:	b01c      	add	sp, #112	; 0x70
  4041e2:	bd70      	pop	{r4, r5, r6, pc}
  4041e4:	00403541 	.word	0x00403541
  4041e8:	2040c298 	.word	0x2040c298
  4041ec:	0040df64 	.word	0x0040df64
  4041f0:	004080f1 	.word	0x004080f1
  4041f4:	0040019d 	.word	0x0040019d

004041f8 <cmdBatVolt>:

void cmdBatVolt() {
  4041f8:	b510      	push	{r4, lr}
  4041fa:	b09a      	sub	sp, #104	; 0x68
	char buf[100];
	sprintf(buf,"Battery Voltage:%f\n",getBatVoltage());
  4041fc:	4b07      	ldr	r3, [pc, #28]	; (40421c <cmdBatVolt+0x24>)
  4041fe:	4798      	blx	r3
  404200:	4b07      	ldr	r3, [pc, #28]	; (404220 <cmdBatVolt+0x28>)
  404202:	4798      	blx	r3
  404204:	4602      	mov	r2, r0
  404206:	460b      	mov	r3, r1
  404208:	a801      	add	r0, sp, #4
  40420a:	4906      	ldr	r1, [pc, #24]	; (404224 <cmdBatVolt+0x2c>)
  40420c:	4c06      	ldr	r4, [pc, #24]	; (404228 <cmdBatVolt+0x30>)
  40420e:	47a0      	blx	r4
	sendDebugString(buf);
  404210:	a801      	add	r0, sp, #4
  404212:	4b06      	ldr	r3, [pc, #24]	; (40422c <cmdBatVolt+0x34>)
  404214:	4798      	blx	r3
}
  404216:	b01a      	add	sp, #104	; 0x68
  404218:	bd10      	pop	{r4, pc}
  40421a:	bf00      	nop
  40421c:	004039e1 	.word	0x004039e1
  404220:	00407345 	.word	0x00407345
  404224:	0040df88 	.word	0x0040df88
  404228:	004080f1 	.word	0x004080f1
  40422c:	0040019d 	.word	0x0040019d

00404230 <cmdWalk>:
	dumpFrame();
}

void cmdWalk(int maxi) {
	extern walk_data hexabot_walk;
	hexabot_walk.i = 0;
  404230:	4b03      	ldr	r3, [pc, #12]	; (404240 <cmdWalk+0x10>)
  404232:	2200      	movs	r2, #0
  404234:	625a      	str	r2, [r3, #36]	; 0x24
	hexabot_walk.max_i = maxi;
  404236:	6218      	str	r0, [r3, #32]
	hexabot_walk.Walk_EN = 1;
  404238:	2201      	movs	r2, #1
  40423a:	61da      	str	r2, [r3, #28]
  40423c:	4770      	bx	lr
  40423e:	bf00      	nop
  404240:	2040c3a0 	.word	0x2040c3a0

00404244 <vTask1>:
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  404244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
  404246:	4810      	ldr	r0, [pc, #64]	; (404288 <vTask1+0x44>)
  404248:	4c10      	ldr	r4, [pc, #64]	; (40428c <vTask1+0x48>)
  40424a:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
  40424c:	4b10      	ldr	r3, [pc, #64]	; (404290 <vTask1+0x4c>)
  40424e:	4798      	blx	r3
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  404250:	4810      	ldr	r0, [pc, #64]	; (404294 <vTask1+0x50>)
  404252:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404256:	4b10      	ldr	r3, [pc, #64]	; (404298 <vTask1+0x54>)
  404258:	4798      	blx	r3
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  40425a:	4810      	ldr	r0, [pc, #64]	; (40429c <vTask1+0x58>)
  40425c:	47a0      	blx	r4
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  40425e:	2401      	movs	r4, #1
				if(tg) {
					pio_set(LED0);
					tg = !tg;
				}
				else {
					pio_clear(LED0);	
  404260:	4d0c      	ldr	r5, [pc, #48]	; (404294 <vTask1+0x50>)
  404262:	4f0f      	ldr	r7, [pc, #60]	; (4042a0 <vTask1+0x5c>)
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
				if(tg) {
					pio_set(LED0);
  404264:	4e0c      	ldr	r6, [pc, #48]	; (404298 <vTask1+0x54>)
	pio_set(LED0);
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
				if(tg) {
  404266:	b12c      	cbz	r4, 404274 <vTask1+0x30>
					pio_set(LED0);
  404268:	4628      	mov	r0, r5
  40426a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40426e:	47b0      	blx	r6
					tg = !tg;
  404270:	2400      	movs	r4, #0
  404272:	e004      	b.n	40427e <vTask1+0x3a>
				}
				else {
					pio_clear(LED0);	
  404274:	4628      	mov	r0, r5
  404276:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40427a:	47b8      	blx	r7
					tg = !tg;
  40427c:	2401      	movs	r4, #1
				}	
				vTaskDelay(1000);
  40427e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404282:	4b08      	ldr	r3, [pc, #32]	; (4042a4 <vTask1+0x60>)
  404284:	4798      	blx	r3
	}
  404286:	e7ee      	b.n	404266 <vTask1+0x22>
  404288:	0040df9c 	.word	0x0040df9c
  40428c:	0040019d 	.word	0x0040019d
  404290:	00401871 	.word	0x00401871
  404294:	400e0e00 	.word	0x400e0e00
  404298:	00402549 	.word	0x00402549
  40429c:	0040dfbc 	.word	0x0040dfbc
  4042a0:	0040254d 	.word	0x0040254d
  4042a4:	00401ac9 	.word	0x00401ac9

004042a8 <LegControlTask>:
}

void LegControlTask (void* pvParameters) {
  4042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042ac:	ed2d 8b06 	vpush	{d8-d10}
  4042b0:	b0b1      	sub	sp, #196	; 0xc4
	sendDebugString("LEG CONTROL TASK INITIALIZATION - STARTED\n");
  4042b2:	48ab      	ldr	r0, [pc, #684]	; (404560 <LegControlTask+0x2b8>)
  4042b4:	4cab      	ldr	r4, [pc, #684]	; (404564 <LegControlTask+0x2bc>)
  4042b6:	47a0      	blx	r4
	angles	Ang2;
	angles	Ang3;
	angles	Ang4;
	angles	Ang5;
	
	hexabot_walk.movTurn = 0;
  4042b8:	4bab      	ldr	r3, [pc, #684]	; (404568 <LegControlTask+0x2c0>)
  4042ba:	2200      	movs	r2, #0
  4042bc:	601a      	str	r2, [r3, #0]
	hexabot_walk.movDir = 0;
  4042be:	605a      	str	r2, [r3, #4]
	hexabot_walk.stance = 120;
  4042c0:	2278      	movs	r2, #120	; 0x78
  4042c2:	609a      	str	r2, [r3, #8]
	hexabot_walk.hgt = 100;
  4042c4:	2264      	movs	r2, #100	; 0x64
  4042c6:	60da      	str	r2, [r3, #12]
	hexabot_walk.pup = 50;
  4042c8:	2232      	movs	r2, #50	; 0x32
  4042ca:	611a      	str	r2, [r3, #16]
	hexabot_walk.stride = 250;
  4042cc:	22fa      	movs	r2, #250	; 0xfa
  4042ce:	615a      	str	r2, [r3, #20]
	hexabot_walk.Walk_EN = 0;
  4042d0:	2200      	movs	r2, #0
  4042d2:	61da      	str	r2, [r3, #28]
	hexabot_walk.Hexabot_leg_cycle_t = 20;
  4042d4:	2214      	movs	r2, #20
  4042d6:	619a      	str	r2, [r3, #24]
	
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  4042d8:	48a4      	ldr	r0, [pc, #656]	; (40456c <LegControlTask+0x2c4>)
  4042da:	47a0      	blx	r4
	
	for(;;) {
		pio_set(LED7);
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  4042dc:	ed9f 9aa4 	vldr	s18, [pc, #656]	; 404570 <LegControlTask+0x2c8>
	hexabot_walk.Hexabot_leg_cycle_t = 20;
	
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
  4042e0:	48a4      	ldr	r0, [pc, #656]	; (404574 <LegControlTask+0x2cc>)
  4042e2:	2140      	movs	r1, #64	; 0x40
  4042e4:	4ba4      	ldr	r3, [pc, #656]	; (404578 <LegControlTask+0x2d0>)
  4042e6:	4798      	blx	r3
		if(hexabot_walk.Walk_EN) {
  4042e8:	4b9f      	ldr	r3, [pc, #636]	; (404568 <LegControlTask+0x2c0>)
  4042ea:	69db      	ldr	r3, [r3, #28]
  4042ec:	2b00      	cmp	r3, #0
  4042ee:	f000 82cb 	beq.w	404888 <LegControlTask+0x5e0>
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  4042f2:	4c9d      	ldr	r4, [pc, #628]	; (404568 <LegControlTask+0x2c0>)
  4042f4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4042f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  4042fc:	69a3      	ldr	r3, [r4, #24]
  4042fe:	ee07 3a90 	vmov	s15, r3
  404302:	eef8 9ae7 	vcvt.f32.s32	s19, s15
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404306:	4a9d      	ldr	r2, [pc, #628]	; (40457c <LegControlTask+0x2d4>)
  404308:	fb82 1203 	smull	r1, r2, r2, r3
  40430c:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
  404310:	9304      	str	r3, [sp, #16]
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404312:	ee78 7a09 	vadd.f32	s15, s16, s18
  404316:	4f9a      	ldr	r7, [pc, #616]	; (404580 <LegControlTask+0x2d8>)
  404318:	eec7 7aa9 	vdiv.f32	s15, s15, s19
  40431c:	ee17 0a90 	vmov	r0, s15
  404320:	47b8      	blx	r7
  404322:	f8df b268 	ldr.w	fp, [pc, #616]	; 40458c <LegControlTask+0x2e4>
  404326:	4602      	mov	r2, r0
  404328:	460b      	mov	r3, r1
  40432a:	47d8      	blx	fp
  40432c:	4e95      	ldr	r6, [pc, #596]	; (404584 <LegControlTask+0x2dc>)
  40432e:	a38a      	add	r3, pc, #552	; (adr r3, 404558 <LegControlTask+0x2b0>)
  404330:	e9d3 2300 	ldrd	r2, r3, [r3]
  404334:	47b0      	blx	r6
  404336:	4d94      	ldr	r5, [pc, #592]	; (404588 <LegControlTask+0x2e0>)
  404338:	47a8      	blx	r5
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  40433a:	47b8      	blx	r7
  40433c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404340:	f8df a24c 	ldr.w	sl, [pc, #588]	; 404590 <LegControlTask+0x2e8>
  404344:	47d0      	blx	sl
  404346:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40434a:	edd4 7a02 	vldr	s15, [r4, #8]
  40434e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404352:	f8df 9240 	ldr.w	r9, [pc, #576]	; 404594 <LegControlTask+0x2ec>
  404356:	6960      	ldr	r0, [r4, #20]
  404358:	47c8      	blx	r9
  40435a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40435e:	47b0      	blx	r6
  404360:	47a8      	blx	r5
  404362:	4602      	mov	r2, r0
  404364:	ed8d 9a00 	vstr	s18, [sp]
  404368:	6863      	ldr	r3, [r4, #4]
  40436a:	9301      	str	r3, [sp, #4]
  40436c:	2101      	movs	r1, #1
  40436e:	9102      	str	r1, [sp, #8]
  404370:	6823      	ldr	r3, [r4, #0]
  404372:	9303      	str	r3, [sp, #12]
  404374:	a82e      	add	r0, sp, #184	; 0xb8
  404376:	ee18 1a90 	vmov	r1, s17
  40437a:	ee18 3a90 	vmov	r3, s17
  40437e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 404598 <LegControlTask+0x2f0>
  404382:	47c0      	blx	r8
	
	for(;;) {
		pio_set(LED7);
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404384:	eddd 7a04 	vldr	s15, [sp, #16]
  404388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40438c:	ee78 7a27 	vadd.f32	s15, s16, s15
  404390:	eec7 7aa9 	vdiv.f32	s15, s15, s19
  404394:	ee17 0a90 	vmov	r0, s15
  404398:	47b8      	blx	r7
  40439a:	4602      	mov	r2, r0
  40439c:	460b      	mov	r3, r1
  40439e:	47d8      	blx	fp
  4043a0:	a36d      	add	r3, pc, #436	; (adr r3, 404558 <LegControlTask+0x2b0>)
  4043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043a6:	47b0      	blx	r6
  4043a8:	47a8      	blx	r5
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  4043aa:	47b8      	blx	r7
  4043ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4043b0:	47d0      	blx	sl
  4043b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4043b6:	edd4 7a02 	vldr	s15, [r4, #8]
  4043ba:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4043be:	6960      	ldr	r0, [r4, #20]
  4043c0:	47c8      	blx	r9
  4043c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043c6:	47b0      	blx	r6
  4043c8:	47a8      	blx	r5
  4043ca:	4602      	mov	r2, r0
  4043cc:	ed8d 9a00 	vstr	s18, [sp]
  4043d0:	6863      	ldr	r3, [r4, #4]
  4043d2:	9301      	str	r3, [sp, #4]
  4043d4:	2300      	movs	r3, #0
  4043d6:	9302      	str	r3, [sp, #8]
  4043d8:	6823      	ldr	r3, [r4, #0]
  4043da:	9303      	str	r3, [sp, #12]
  4043dc:	a82c      	add	r0, sp, #176	; 0xb0
  4043de:	ee18 1a90 	vmov	r1, s17
  4043e2:	ee18 3a90 	vmov	r3, s17
  4043e6:	47c0      	blx	r8
	for(;;) {
		pio_set(LED7);
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  4043e8:	9b04      	ldr	r3, [sp, #16]
  4043ea:	005a      	lsls	r2, r3, #1
  4043ec:	ee08 2a90 	vmov	s17, r2
  4043f0:	eef8 7ae8 	vcvt.f32.s32	s15, s17
  4043f4:	ee78 7a27 	vadd.f32	s15, s16, s15
  4043f8:	eec7 7aa9 	vdiv.f32	s15, s15, s19
  4043fc:	ee17 0a90 	vmov	r0, s15
  404400:	47b8      	blx	r7
  404402:	4602      	mov	r2, r0
  404404:	460b      	mov	r3, r1
  404406:	47d8      	blx	fp
  404408:	a353      	add	r3, pc, #332	; (adr r3, 404558 <LegControlTask+0x2b0>)
  40440a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40440e:	47b0      	blx	r6
  404410:	47a8      	blx	r5
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS2 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst2), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  404412:	47b8      	blx	r7
  404414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404418:	47d0      	blx	sl
  40441a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40441e:	edd4 7a02 	vldr	s15, [r4, #8]
  404422:	eeb8 aae7 	vcvt.f32.s32	s20, s15
  404426:	6960      	ldr	r0, [r4, #20]
  404428:	47c8      	blx	r9
  40442a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40442e:	47b0      	blx	r6
  404430:	47a8      	blx	r5
  404432:	4602      	mov	r2, r0
  404434:	ed8d 9a00 	vstr	s18, [sp]
  404438:	6863      	ldr	r3, [r4, #4]
  40443a:	9301      	str	r3, [sp, #4]
  40443c:	2101      	movs	r1, #1
  40443e:	9102      	str	r1, [sp, #8]
  404440:	6823      	ldr	r3, [r4, #0]
  404442:	9303      	str	r3, [sp, #12]
  404444:	a82a      	add	r0, sp, #168	; 0xa8
  404446:	ee1a 1a10 	vmov	r1, s20
  40444a:	ee1a 3a10 	vmov	r3, s20
  40444e:	47c0      	blx	r8
		pio_set(LED7);
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404450:	ee18 2a90 	vmov	r2, s17
  404454:	9b04      	ldr	r3, [sp, #16]
  404456:	441a      	add	r2, r3
  404458:	ee08 2a90 	vmov	s17, r2
  40445c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  404460:	ee78 8a28 	vadd.f32	s17, s16, s17
  404464:	eec8 7aa9 	vdiv.f32	s15, s17, s19
  404468:	ee17 0a90 	vmov	r0, s15
  40446c:	47b8      	blx	r7
  40446e:	4602      	mov	r2, r0
  404470:	460b      	mov	r3, r1
  404472:	47d8      	blx	fp
  404474:	a338      	add	r3, pc, #224	; (adr r3, 404558 <LegControlTask+0x2b0>)
  404476:	e9d3 2300 	ldrd	r2, r3, [r3]
  40447a:	47b0      	blx	r6
  40447c:	47a8      	blx	r5
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS2 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst2), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS3 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst3), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  40447e:	47b8      	blx	r7
  404480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404484:	47d0      	blx	sl
  404486:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40448a:	edd4 7a02 	vldr	s15, [r4, #8]
  40448e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404492:	6960      	ldr	r0, [r4, #20]
  404494:	47c8      	blx	r9
  404496:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40449a:	47b0      	blx	r6
  40449c:	47a8      	blx	r5
  40449e:	4602      	mov	r2, r0
  4044a0:	ed8d 9a00 	vstr	s18, [sp]
  4044a4:	6863      	ldr	r3, [r4, #4]
  4044a6:	9301      	str	r3, [sp, #4]
  4044a8:	2100      	movs	r1, #0
  4044aa:	9102      	str	r1, [sp, #8]
  4044ac:	6823      	ldr	r3, [r4, #0]
  4044ae:	9303      	str	r3, [sp, #12]
  4044b0:	a828      	add	r0, sp, #160	; 0xa0
  4044b2:	ee18 1a90 	vmov	r1, s17
  4044b6:	ee18 3a90 	vmov	r3, s17
  4044ba:	47c0      	blx	r8
		if(hexabot_walk.Walk_EN) {
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  4044bc:	9b04      	ldr	r3, [sp, #16]
  4044be:	009a      	lsls	r2, r3, #2
  4044c0:	ee08 2a90 	vmov	s17, r2
  4044c4:	eef8 7ae8 	vcvt.f32.s32	s15, s17
  4044c8:	ee78 7a27 	vadd.f32	s15, s16, s15
  4044cc:	eec7 7aa9 	vdiv.f32	s15, s15, s19
  4044d0:	ee17 0a90 	vmov	r0, s15
  4044d4:	47b8      	blx	r7
  4044d6:	4602      	mov	r2, r0
  4044d8:	460b      	mov	r3, r1
  4044da:	47d8      	blx	fp
  4044dc:	a31e      	add	r3, pc, #120	; (adr r3, 404558 <LegControlTask+0x2b0>)
  4044de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044e2:	47b0      	blx	r6
  4044e4:	47a8      	blx	r5
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS2 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst2), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS3 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst3), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS4 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst4), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  4044e6:	47b8      	blx	r7
  4044e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4044ec:	47d0      	blx	sl
  4044ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4044f2:	edd4 7a02 	vldr	s15, [r4, #8]
  4044f6:	eeb8 aae7 	vcvt.f32.s32	s20, s15
  4044fa:	6960      	ldr	r0, [r4, #20]
  4044fc:	47c8      	blx	r9
  4044fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404502:	47b0      	blx	r6
  404504:	47a8      	blx	r5
  404506:	4602      	mov	r2, r0
  404508:	ed8d 9a00 	vstr	s18, [sp]
  40450c:	6863      	ldr	r3, [r4, #4]
  40450e:	9301      	str	r3, [sp, #4]
  404510:	2101      	movs	r1, #1
  404512:	9102      	str	r1, [sp, #8]
  404514:	6823      	ldr	r3, [r4, #0]
  404516:	9303      	str	r3, [sp, #12]
  404518:	a826      	add	r0, sp, #152	; 0x98
  40451a:	ee1a 1a10 	vmov	r1, s20
  40451e:	ee1a 3a10 	vmov	r3, s20
  404522:	47c0      	blx	r8
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404524:	ee18 2a90 	vmov	r2, s17
  404528:	9b04      	ldr	r3, [sp, #16]
  40452a:	18d3      	adds	r3, r2, r3
  40452c:	ee08 3a90 	vmov	s17, r3
  404530:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  404534:	ee38 8a28 	vadd.f32	s16, s16, s17
  404538:	eec8 7a29 	vdiv.f32	s15, s16, s19
  40453c:	ee17 0a90 	vmov	r0, s15
  404540:	47b8      	blx	r7
  404542:	4602      	mov	r2, r0
  404544:	460b      	mov	r3, r1
  404546:	47d8      	blx	fp
  404548:	a303      	add	r3, pc, #12	; (adr r3, 404558 <LegControlTask+0x2b0>)
  40454a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40454e:	47b0      	blx	r6
  404550:	47a8      	blx	r5
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS2 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst2), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS3 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst3), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
		  xzS4 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst4), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
		  xzS5 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst5), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  404552:	47b8      	blx	r7
  404554:	e022      	b.n	40459c <LegControlTask+0x2f4>
  404556:	bf00      	nop
  404558:	54442d18 	.word	0x54442d18
  40455c:	400921fb 	.word	0x400921fb
  404560:	0040dff8 	.word	0x0040dff8
  404564:	0040019d 	.word	0x0040019d
  404568:	2040c3a0 	.word	0x2040c3a0
  40456c:	0040e024 	.word	0x0040e024
  404570:	00000000 	.word	0x00000000
  404574:	400e0e00 	.word	0x400e0e00
  404578:	00402549 	.word	0x00402549
  40457c:	2aaaaaab 	.word	0x2aaaaaab
  404580:	00407345 	.word	0x00407345
  404584:	004073ed 	.word	0x004073ed
  404588:	00407971 	.word	0x00407971
  40458c:	00407089 	.word	0x00407089
  404590:	00404b5d 	.word	0x00404b5d
  404594:	00407321 	.word	0x00407321
  404598:	00403add 	.word	0x00403add
  40459c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4045a0:	47d0      	blx	sl
  4045a2:	4682      	mov	sl, r0
  4045a4:	468b      	mov	fp, r1
  4045a6:	edd4 7a02 	vldr	s15, [r4, #8]
  4045aa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  4045ae:	6960      	ldr	r0, [r4, #20]
  4045b0:	47c8      	blx	r9
  4045b2:	4652      	mov	r2, sl
  4045b4:	465b      	mov	r3, fp
  4045b6:	47b0      	blx	r6
  4045b8:	47a8      	blx	r5
  4045ba:	4602      	mov	r2, r0
  4045bc:	ed8d 9a00 	vstr	s18, [sp]
  4045c0:	6863      	ldr	r3, [r4, #4]
  4045c2:	9301      	str	r3, [sp, #4]
  4045c4:	2300      	movs	r3, #0
  4045c6:	9302      	str	r3, [sp, #8]
  4045c8:	6823      	ldr	r3, [r4, #0]
  4045ca:	9303      	str	r3, [sp, #12]
  4045cc:	a824      	add	r0, sp, #144	; 0x90
  4045ce:	ee18 1a10 	vmov	r1, s16
  4045d2:	ee18 3a10 	vmov	r3, s16
  4045d6:	47c0      	blx	r8

		  Ang0 = legAngCalc(xzS0.X,  (sin(ofst0) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst0)-hexabot_walk.hgt)  ,xzS0.Z);
  4045d8:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
  4045dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4045e0:	4b7c      	ldr	r3, [pc, #496]	; (4047d4 <LegControlTask+0x52c>)
  4045e2:	4798      	blx	r3
  4045e4:	4606      	mov	r6, r0
  4045e6:	460f      	mov	r7, r1
  4045e8:	2200      	movs	r2, #0
  4045ea:	2300      	movs	r3, #0
  4045ec:	4c7a      	ldr	r4, [pc, #488]	; (4047d8 <LegControlTask+0x530>)
  4045ee:	47a0      	blx	r4
  4045f0:	b120      	cbz	r0, 4045fc <LegControlTask+0x354>
  4045f2:	4b7a      	ldr	r3, [pc, #488]	; (4047dc <LegControlTask+0x534>)
  4045f4:	68d8      	ldr	r0, [r3, #12]
  4045f6:	4240      	negs	r0, r0
  4045f8:	47c8      	blx	r9
  4045fa:	e013      	b.n	404624 <LegControlTask+0x37c>
  4045fc:	4d77      	ldr	r5, [pc, #476]	; (4047dc <LegControlTask+0x534>)
  4045fe:	4c78      	ldr	r4, [pc, #480]	; (4047e0 <LegControlTask+0x538>)
  404600:	6928      	ldr	r0, [r5, #16]
  404602:	47a0      	blx	r4
  404604:	4602      	mov	r2, r0
  404606:	460b      	mov	r3, r1
  404608:	4630      	mov	r0, r6
  40460a:	4639      	mov	r1, r7
  40460c:	4e75      	ldr	r6, [pc, #468]	; (4047e4 <LegControlTask+0x53c>)
  40460e:	47b0      	blx	r6
  404610:	4606      	mov	r6, r0
  404612:	460f      	mov	r7, r1
  404614:	68e8      	ldr	r0, [r5, #12]
  404616:	47a0      	blx	r4
  404618:	4602      	mov	r2, r0
  40461a:	460b      	mov	r3, r1
  40461c:	4630      	mov	r0, r6
  40461e:	4639      	mov	r1, r7
  404620:	4c71      	ldr	r4, [pc, #452]	; (4047e8 <LegControlTask+0x540>)
  404622:	47a0      	blx	r4
  404624:	4b71      	ldr	r3, [pc, #452]	; (4047ec <LegControlTask+0x544>)
  404626:	4798      	blx	r3
  404628:	4602      	mov	r2, r0
  40462a:	a821      	add	r0, sp, #132	; 0x84
  40462c:	4641      	mov	r1, r8
  40462e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  404630:	4c6f      	ldr	r4, [pc, #444]	; (4047f0 <LegControlTask+0x548>)
  404632:	47a0      	blx	r4
		  Ang1 = legAngCalc(xzS1.X,  (sin(ofst1) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst1)-hexabot_walk.hgt)  ,xzS1.Z);
  404634:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
  404638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40463c:	4b65      	ldr	r3, [pc, #404]	; (4047d4 <LegControlTask+0x52c>)
  40463e:	4798      	blx	r3
  404640:	4606      	mov	r6, r0
  404642:	460f      	mov	r7, r1
  404644:	2200      	movs	r2, #0
  404646:	2300      	movs	r3, #0
  404648:	4c63      	ldr	r4, [pc, #396]	; (4047d8 <LegControlTask+0x530>)
  40464a:	47a0      	blx	r4
  40464c:	b128      	cbz	r0, 40465a <LegControlTask+0x3b2>
  40464e:	4b63      	ldr	r3, [pc, #396]	; (4047dc <LegControlTask+0x534>)
  404650:	68d8      	ldr	r0, [r3, #12]
  404652:	4240      	negs	r0, r0
  404654:	4b62      	ldr	r3, [pc, #392]	; (4047e0 <LegControlTask+0x538>)
  404656:	4798      	blx	r3
  404658:	e013      	b.n	404682 <LegControlTask+0x3da>
  40465a:	4d60      	ldr	r5, [pc, #384]	; (4047dc <LegControlTask+0x534>)
  40465c:	4c60      	ldr	r4, [pc, #384]	; (4047e0 <LegControlTask+0x538>)
  40465e:	6928      	ldr	r0, [r5, #16]
  404660:	47a0      	blx	r4
  404662:	4602      	mov	r2, r0
  404664:	460b      	mov	r3, r1
  404666:	4630      	mov	r0, r6
  404668:	4639      	mov	r1, r7
  40466a:	4e5e      	ldr	r6, [pc, #376]	; (4047e4 <LegControlTask+0x53c>)
  40466c:	47b0      	blx	r6
  40466e:	4606      	mov	r6, r0
  404670:	460f      	mov	r7, r1
  404672:	68e8      	ldr	r0, [r5, #12]
  404674:	47a0      	blx	r4
  404676:	4602      	mov	r2, r0
  404678:	460b      	mov	r3, r1
  40467a:	4630      	mov	r0, r6
  40467c:	4639      	mov	r1, r7
  40467e:	4c5a      	ldr	r4, [pc, #360]	; (4047e8 <LegControlTask+0x540>)
  404680:	47a0      	blx	r4
  404682:	4b5a      	ldr	r3, [pc, #360]	; (4047ec <LegControlTask+0x544>)
  404684:	4798      	blx	r3
  404686:	4602      	mov	r2, r0
  404688:	a81e      	add	r0, sp, #120	; 0x78
  40468a:	4641      	mov	r1, r8
  40468c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40468e:	4c58      	ldr	r4, [pc, #352]	; (4047f0 <LegControlTask+0x548>)
  404690:	47a0      	blx	r4
		  Ang2 = legAngCalc(xzS2.X,  (sin(ofst2) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst2)-hexabot_walk.hgt)  ,xzS2.Z);
  404692:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
  404696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40469a:	4b4e      	ldr	r3, [pc, #312]	; (4047d4 <LegControlTask+0x52c>)
  40469c:	4798      	blx	r3
  40469e:	4606      	mov	r6, r0
  4046a0:	460f      	mov	r7, r1
  4046a2:	2200      	movs	r2, #0
  4046a4:	2300      	movs	r3, #0
  4046a6:	4c4c      	ldr	r4, [pc, #304]	; (4047d8 <LegControlTask+0x530>)
  4046a8:	47a0      	blx	r4
  4046aa:	b128      	cbz	r0, 4046b8 <LegControlTask+0x410>
  4046ac:	4b4b      	ldr	r3, [pc, #300]	; (4047dc <LegControlTask+0x534>)
  4046ae:	68d8      	ldr	r0, [r3, #12]
  4046b0:	4240      	negs	r0, r0
  4046b2:	4b4b      	ldr	r3, [pc, #300]	; (4047e0 <LegControlTask+0x538>)
  4046b4:	4798      	blx	r3
  4046b6:	e013      	b.n	4046e0 <LegControlTask+0x438>
  4046b8:	4d48      	ldr	r5, [pc, #288]	; (4047dc <LegControlTask+0x534>)
  4046ba:	4c49      	ldr	r4, [pc, #292]	; (4047e0 <LegControlTask+0x538>)
  4046bc:	6928      	ldr	r0, [r5, #16]
  4046be:	47a0      	blx	r4
  4046c0:	4602      	mov	r2, r0
  4046c2:	460b      	mov	r3, r1
  4046c4:	4630      	mov	r0, r6
  4046c6:	4639      	mov	r1, r7
  4046c8:	4e46      	ldr	r6, [pc, #280]	; (4047e4 <LegControlTask+0x53c>)
  4046ca:	47b0      	blx	r6
  4046cc:	4606      	mov	r6, r0
  4046ce:	460f      	mov	r7, r1
  4046d0:	68e8      	ldr	r0, [r5, #12]
  4046d2:	47a0      	blx	r4
  4046d4:	4602      	mov	r2, r0
  4046d6:	460b      	mov	r3, r1
  4046d8:	4630      	mov	r0, r6
  4046da:	4639      	mov	r1, r7
  4046dc:	4c42      	ldr	r4, [pc, #264]	; (4047e8 <LegControlTask+0x540>)
  4046de:	47a0      	blx	r4
  4046e0:	4b42      	ldr	r3, [pc, #264]	; (4047ec <LegControlTask+0x544>)
  4046e2:	4798      	blx	r3
  4046e4:	4602      	mov	r2, r0
  4046e6:	a81b      	add	r0, sp, #108	; 0x6c
  4046e8:	4641      	mov	r1, r8
  4046ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4046ec:	4c40      	ldr	r4, [pc, #256]	; (4047f0 <LegControlTask+0x548>)
  4046ee:	47a0      	blx	r4
		  Ang3 = legAngCalc(xzS3.X,  (sin(ofst3) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst3)-hexabot_walk.hgt)  ,xzS3.Z);
  4046f0:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
  4046f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4046f8:	4b36      	ldr	r3, [pc, #216]	; (4047d4 <LegControlTask+0x52c>)
  4046fa:	4798      	blx	r3
  4046fc:	4606      	mov	r6, r0
  4046fe:	460f      	mov	r7, r1
  404700:	2200      	movs	r2, #0
  404702:	2300      	movs	r3, #0
  404704:	4c34      	ldr	r4, [pc, #208]	; (4047d8 <LegControlTask+0x530>)
  404706:	47a0      	blx	r4
  404708:	b128      	cbz	r0, 404716 <LegControlTask+0x46e>
  40470a:	4b34      	ldr	r3, [pc, #208]	; (4047dc <LegControlTask+0x534>)
  40470c:	68d8      	ldr	r0, [r3, #12]
  40470e:	4240      	negs	r0, r0
  404710:	4b33      	ldr	r3, [pc, #204]	; (4047e0 <LegControlTask+0x538>)
  404712:	4798      	blx	r3
  404714:	e013      	b.n	40473e <LegControlTask+0x496>
  404716:	4d31      	ldr	r5, [pc, #196]	; (4047dc <LegControlTask+0x534>)
  404718:	4c31      	ldr	r4, [pc, #196]	; (4047e0 <LegControlTask+0x538>)
  40471a:	6928      	ldr	r0, [r5, #16]
  40471c:	47a0      	blx	r4
  40471e:	4602      	mov	r2, r0
  404720:	460b      	mov	r3, r1
  404722:	4630      	mov	r0, r6
  404724:	4639      	mov	r1, r7
  404726:	4e2f      	ldr	r6, [pc, #188]	; (4047e4 <LegControlTask+0x53c>)
  404728:	47b0      	blx	r6
  40472a:	4606      	mov	r6, r0
  40472c:	460f      	mov	r7, r1
  40472e:	68e8      	ldr	r0, [r5, #12]
  404730:	47a0      	blx	r4
  404732:	4602      	mov	r2, r0
  404734:	460b      	mov	r3, r1
  404736:	4630      	mov	r0, r6
  404738:	4639      	mov	r1, r7
  40473a:	4c2b      	ldr	r4, [pc, #172]	; (4047e8 <LegControlTask+0x540>)
  40473c:	47a0      	blx	r4
  40473e:	4b2b      	ldr	r3, [pc, #172]	; (4047ec <LegControlTask+0x544>)
  404740:	4798      	blx	r3
  404742:	4602      	mov	r2, r0
  404744:	a818      	add	r0, sp, #96	; 0x60
  404746:	4641      	mov	r1, r8
  404748:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40474a:	4c29      	ldr	r4, [pc, #164]	; (4047f0 <LegControlTask+0x548>)
  40474c:	47a0      	blx	r4
		  Ang4 = legAngCalc(xzS4.X,  (sin(ofst4) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst4)-hexabot_walk.hgt)  ,xzS4.Z);
  40474e:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
  404752:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404756:	4b1f      	ldr	r3, [pc, #124]	; (4047d4 <LegControlTask+0x52c>)
  404758:	4798      	blx	r3
  40475a:	4606      	mov	r6, r0
  40475c:	460f      	mov	r7, r1
  40475e:	2200      	movs	r2, #0
  404760:	2300      	movs	r3, #0
  404762:	4c1d      	ldr	r4, [pc, #116]	; (4047d8 <LegControlTask+0x530>)
  404764:	47a0      	blx	r4
  404766:	b128      	cbz	r0, 404774 <LegControlTask+0x4cc>
  404768:	4b1c      	ldr	r3, [pc, #112]	; (4047dc <LegControlTask+0x534>)
  40476a:	68d8      	ldr	r0, [r3, #12]
  40476c:	4240      	negs	r0, r0
  40476e:	4b1c      	ldr	r3, [pc, #112]	; (4047e0 <LegControlTask+0x538>)
  404770:	4798      	blx	r3
  404772:	e013      	b.n	40479c <LegControlTask+0x4f4>
  404774:	4d19      	ldr	r5, [pc, #100]	; (4047dc <LegControlTask+0x534>)
  404776:	4c1a      	ldr	r4, [pc, #104]	; (4047e0 <LegControlTask+0x538>)
  404778:	6928      	ldr	r0, [r5, #16]
  40477a:	47a0      	blx	r4
  40477c:	4602      	mov	r2, r0
  40477e:	460b      	mov	r3, r1
  404780:	4630      	mov	r0, r6
  404782:	4639      	mov	r1, r7
  404784:	4e17      	ldr	r6, [pc, #92]	; (4047e4 <LegControlTask+0x53c>)
  404786:	47b0      	blx	r6
  404788:	4606      	mov	r6, r0
  40478a:	460f      	mov	r7, r1
  40478c:	68e8      	ldr	r0, [r5, #12]
  40478e:	47a0      	blx	r4
  404790:	4602      	mov	r2, r0
  404792:	460b      	mov	r3, r1
  404794:	4630      	mov	r0, r6
  404796:	4639      	mov	r1, r7
  404798:	4c13      	ldr	r4, [pc, #76]	; (4047e8 <LegControlTask+0x540>)
  40479a:	47a0      	blx	r4
  40479c:	4b13      	ldr	r3, [pc, #76]	; (4047ec <LegControlTask+0x544>)
  40479e:	4798      	blx	r3
  4047a0:	4602      	mov	r2, r0
  4047a2:	a815      	add	r0, sp, #84	; 0x54
  4047a4:	4641      	mov	r1, r8
  4047a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4047a8:	4c11      	ldr	r4, [pc, #68]	; (4047f0 <LegControlTask+0x548>)
  4047aa:	47a0      	blx	r4
		  Ang5 = legAngCalc(xzS5.X,  (sin(ofst5) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst5)-hexabot_walk.hgt)  ,xzS5.Z);
  4047ac:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
  4047b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4047b4:	4b07      	ldr	r3, [pc, #28]	; (4047d4 <LegControlTask+0x52c>)
  4047b6:	4798      	blx	r3
  4047b8:	4606      	mov	r6, r0
  4047ba:	460f      	mov	r7, r1
  4047bc:	2200      	movs	r2, #0
  4047be:	2300      	movs	r3, #0
  4047c0:	4c05      	ldr	r4, [pc, #20]	; (4047d8 <LegControlTask+0x530>)
  4047c2:	47a0      	blx	r4
  4047c4:	b1b0      	cbz	r0, 4047f4 <LegControlTask+0x54c>
  4047c6:	4b05      	ldr	r3, [pc, #20]	; (4047dc <LegControlTask+0x534>)
  4047c8:	68d8      	ldr	r0, [r3, #12]
  4047ca:	4240      	negs	r0, r0
  4047cc:	4b04      	ldr	r3, [pc, #16]	; (4047e0 <LegControlTask+0x538>)
  4047ce:	4798      	blx	r3
  4047d0:	e024      	b.n	40481c <LegControlTask+0x574>
  4047d2:	bf00      	nop
  4047d4:	00404be5 	.word	0x00404be5
  4047d8:	004078d1 	.word	0x004078d1
  4047dc:	2040c3a0 	.word	0x2040c3a0
  4047e0:	00407321 	.word	0x00407321
  4047e4:	004073ed 	.word	0x004073ed
  4047e8:	00407085 	.word	0x00407085
  4047ec:	00407971 	.word	0x00407971
  4047f0:	00403cf9 	.word	0x00403cf9
  4047f4:	4d28      	ldr	r5, [pc, #160]	; (404898 <LegControlTask+0x5f0>)
  4047f6:	4c29      	ldr	r4, [pc, #164]	; (40489c <LegControlTask+0x5f4>)
  4047f8:	6928      	ldr	r0, [r5, #16]
  4047fa:	47a0      	blx	r4
  4047fc:	4602      	mov	r2, r0
  4047fe:	460b      	mov	r3, r1
  404800:	4630      	mov	r0, r6
  404802:	4639      	mov	r1, r7
  404804:	4e26      	ldr	r6, [pc, #152]	; (4048a0 <LegControlTask+0x5f8>)
  404806:	47b0      	blx	r6
  404808:	4606      	mov	r6, r0
  40480a:	460f      	mov	r7, r1
  40480c:	68e8      	ldr	r0, [r5, #12]
  40480e:	47a0      	blx	r4
  404810:	4602      	mov	r2, r0
  404812:	460b      	mov	r3, r1
  404814:	4630      	mov	r0, r6
  404816:	4639      	mov	r1, r7
  404818:	4c22      	ldr	r4, [pc, #136]	; (4048a4 <LegControlTask+0x5fc>)
  40481a:	47a0      	blx	r4
  40481c:	4b22      	ldr	r3, [pc, #136]	; (4048a8 <LegControlTask+0x600>)
  40481e:	4798      	blx	r3
  404820:	4602      	mov	r2, r0
  404822:	a812      	add	r0, sp, #72	; 0x48
  404824:	4641      	mov	r1, r8
  404826:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404828:	4c20      	ldr	r4, [pc, #128]	; (4048ac <LegControlTask+0x604>)
  40482a:	47a0      	blx	r4
		  
		  writeLegOut(0,Ang0.S1,Ang0.S2,Ang0.S3);
  40482c:	2000      	movs	r0, #0
  40482e:	9921      	ldr	r1, [sp, #132]	; 0x84
  404830:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404834:	4c1e      	ldr	r4, [pc, #120]	; (4048b0 <LegControlTask+0x608>)
  404836:	47a0      	blx	r4
		  writeLegOut(1,Ang1.S1,Ang1.S2,Ang1.S3);
  404838:	2001      	movs	r0, #1
  40483a:	991e      	ldr	r1, [sp, #120]	; 0x78
  40483c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40483e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  404840:	47a0      	blx	r4
		  writeLegOut(2,Ang2.S1,Ang2.S2,Ang2.S3);
  404842:	2002      	movs	r0, #2
  404844:	991b      	ldr	r1, [sp, #108]	; 0x6c
  404846:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  404848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40484a:	47a0      	blx	r4
		  writeLegOut(3,Ang3.S1,Ang3.S2,Ang3.S3);
  40484c:	2003      	movs	r0, #3
  40484e:	9918      	ldr	r1, [sp, #96]	; 0x60
  404850:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404852:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404854:	47a0      	blx	r4
		  writeLegOut(4,Ang4.S1,Ang4.S2,Ang4.S3);
  404856:	2004      	movs	r0, #4
  404858:	9915      	ldr	r1, [sp, #84]	; 0x54
  40485a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40485c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40485e:	47a0      	blx	r4
		  writeLegOut(5,Ang5.S1,Ang5.S2,Ang5.S3);
  404860:	2005      	movs	r0, #5
  404862:	9912      	ldr	r1, [sp, #72]	; 0x48
  404864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404866:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404868:	47a0      	blx	r4
		  hexabot_walk.i++;
  40486a:	4a0b      	ldr	r2, [pc, #44]	; (404898 <LegControlTask+0x5f0>)
  40486c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40486e:	3301      	adds	r3, #1
  404870:	6253      	str	r3, [r2, #36]	; 0x24
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
  404872:	6a12      	ldr	r2, [r2, #32]
  404874:	4293      	cmp	r3, r2
  404876:	dd02      	ble.n	40487e <LegControlTask+0x5d6>
  404878:	2200      	movs	r2, #0
  40487a:	4b07      	ldr	r3, [pc, #28]	; (404898 <LegControlTask+0x5f0>)
  40487c:	61da      	str	r2, [r3, #28]
		  pio_clear(LED7);
  40487e:	480d      	ldr	r0, [pc, #52]	; (4048b4 <LegControlTask+0x60c>)
  404880:	2140      	movs	r1, #64	; 0x40
  404882:	4b0d      	ldr	r3, [pc, #52]	; (4048b8 <LegControlTask+0x610>)
  404884:	4798      	blx	r3
  404886:	e002      	b.n	40488e <LegControlTask+0x5e6>
		}
		else hexabot_walk.i = 0;
  404888:	2200      	movs	r2, #0
  40488a:	4b03      	ldr	r3, [pc, #12]	; (404898 <LegControlTask+0x5f0>)
  40488c:	625a      	str	r2, [r3, #36]	; 0x24
		  vTaskDelay(20);
  40488e:	2014      	movs	r0, #20
  404890:	4b0a      	ldr	r3, [pc, #40]	; (4048bc <LegControlTask+0x614>)
  404892:	4798      	blx	r3
	}
  404894:	e524      	b.n	4042e0 <LegControlTask+0x38>
  404896:	bf00      	nop
  404898:	2040c3a0 	.word	0x2040c3a0
  40489c:	00407321 	.word	0x00407321
  4048a0:	004073ed 	.word	0x004073ed
  4048a4:	00407085 	.word	0x00407085
  4048a8:	00407971 	.word	0x00407971
  4048ac:	00403cf9 	.word	0x00403cf9
  4048b0:	00403eb9 	.word	0x00403eb9
  4048b4:	400e0e00 	.word	0x400e0e00
  4048b8:	0040254d 	.word	0x0040254d
  4048bc:	00401ac9 	.word	0x00401ac9

004048c0 <CLItask>:
}

void CLItask(void* pvParameters) {
  4048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sendDebugString("CLI TASK INITIALIZATION - STARTED\n");
  4048c4:	4849      	ldr	r0, [pc, #292]	; (4049ec <CLItask+0x12c>)
  4048c6:	4c4a      	ldr	r4, [pc, #296]	; (4049f0 <CLItask+0x130>)
  4048c8:	47a0      	blx	r4
	memset(CLIbuf,0,100);
  4048ca:	484a      	ldr	r0, [pc, #296]	; (4049f4 <CLItask+0x134>)
  4048cc:	2100      	movs	r1, #0
  4048ce:	2264      	movs	r2, #100	; 0x64
  4048d0:	4b49      	ldr	r3, [pc, #292]	; (4049f8 <CLItask+0x138>)
  4048d2:	4798      	blx	r3
	char* BaseCmd;
	sendDebugString("CLI TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  4048d4:	4849      	ldr	r0, [pc, #292]	; (4049fc <CLItask+0x13c>)
  4048d6:	47a0      	blx	r4
	sendDebugString("COMMAND LINE STARTED\n");
  4048d8:	4849      	ldr	r0, [pc, #292]	; (404a00 <CLItask+0x140>)
  4048da:	47a0      	blx	r4
	sendDebugString("\n");
  4048dc:	4d49      	ldr	r5, [pc, #292]	; (404a04 <CLItask+0x144>)
  4048de:	4628      	mov	r0, r5
  4048e0:	47a0      	blx	r4
	sendDebugString("\n");
  4048e2:	4628      	mov	r0, r5
  4048e4:	47a0      	blx	r4
	
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4048e6:	4848      	ldr	r0, [pc, #288]	; (404a08 <CLItask+0x148>)
  4048e8:	47a0      	blx	r4
	for(;;) {
			
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  4048ea:	4c42      	ldr	r4, [pc, #264]	; (4049f4 <CLItask+0x134>)
  4048ec:	4d47      	ldr	r5, [pc, #284]	; (404a0c <CLItask+0x14c>)
			CLIbufIndex=0;
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  4048ee:	4f48      	ldr	r7, [pc, #288]	; (404a10 <CLItask+0x150>)
	
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
	for(;;) {
			
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  4048f0:	682b      	ldr	r3, [r5, #0]
  4048f2:	4423      	add	r3, r4
  4048f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4048f8:	2b0a      	cmp	r3, #10
  4048fa:	d173      	bne.n	4049e4 <CLItask+0x124>
			CLIbufIndex=0;
  4048fc:	2300      	movs	r3, #0
  4048fe:	602b      	str	r3, [r5, #0]
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  404900:	4620      	mov	r0, r4
  404902:	4639      	mov	r1, r7
  404904:	4b43      	ldr	r3, [pc, #268]	; (404a14 <CLItask+0x154>)
  404906:	4798      	blx	r3
  404908:	4606      	mov	r6, r0
			
			if(!strcmp(BaseCmd,"led")) cmdLED( atoi(strtok(NULL," "))  , atoi(strtok(NULL," ")) );
  40490a:	4943      	ldr	r1, [pc, #268]	; (404a18 <CLItask+0x158>)
  40490c:	4b43      	ldr	r3, [pc, #268]	; (404a1c <CLItask+0x15c>)
  40490e:	4798      	blx	r3
  404910:	b978      	cbnz	r0, 404932 <CLItask+0x72>
  404912:	4639      	mov	r1, r7
  404914:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 404a14 <CLItask+0x154>
  404918:	47c0      	blx	r8
  40491a:	4e41      	ldr	r6, [pc, #260]	; (404a20 <CLItask+0x160>)
  40491c:	47b0      	blx	r6
  40491e:	4681      	mov	r9, r0
  404920:	2000      	movs	r0, #0
  404922:	4639      	mov	r1, r7
  404924:	47c0      	blx	r8
  404926:	47b0      	blx	r6
  404928:	4601      	mov	r1, r0
  40492a:	4648      	mov	r0, r9
  40492c:	4b3d      	ldr	r3, [pc, #244]	; (404a24 <CLItask+0x164>)
  40492e:	4798      	blx	r3
  404930:	e050      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"manusvo"))  cmdServoMan(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  404932:	4630      	mov	r0, r6
  404934:	493c      	ldr	r1, [pc, #240]	; (404a28 <CLItask+0x168>)
  404936:	4b39      	ldr	r3, [pc, #228]	; (404a1c <CLItask+0x15c>)
  404938:	4798      	blx	r3
  40493a:	b9a8      	cbnz	r0, 404968 <CLItask+0xa8>
  40493c:	4639      	mov	r1, r7
  40493e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 404a14 <CLItask+0x154>
  404942:	47c0      	blx	r8
  404944:	4e36      	ldr	r6, [pc, #216]	; (404a20 <CLItask+0x160>)
  404946:	47b0      	blx	r6
  404948:	4682      	mov	sl, r0
  40494a:	2000      	movs	r0, #0
  40494c:	4639      	mov	r1, r7
  40494e:	47c0      	blx	r8
  404950:	47b0      	blx	r6
  404952:	4681      	mov	r9, r0
  404954:	2000      	movs	r0, #0
  404956:	4639      	mov	r1, r7
  404958:	47c0      	blx	r8
  40495a:	47b0      	blx	r6
  40495c:	4602      	mov	r2, r0
  40495e:	4650      	mov	r0, sl
  404960:	4649      	mov	r1, r9
  404962:	4b32      	ldr	r3, [pc, #200]	; (404a2c <CLItask+0x16c>)
  404964:	4798      	blx	r3
  404966:	e035      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"batvolt\n")) cmdBatVolt();
  404968:	4630      	mov	r0, r6
  40496a:	4931      	ldr	r1, [pc, #196]	; (404a30 <CLItask+0x170>)
  40496c:	4b2b      	ldr	r3, [pc, #172]	; (404a1c <CLItask+0x15c>)
  40496e:	4798      	blx	r3
  404970:	b910      	cbnz	r0, 404978 <CLItask+0xb8>
  404972:	4b30      	ldr	r3, [pc, #192]	; (404a34 <CLItask+0x174>)
  404974:	4798      	blx	r3
  404976:	e02d      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"dumpimg\n")) dumpFrame();
  404978:	4630      	mov	r0, r6
  40497a:	492f      	ldr	r1, [pc, #188]	; (404a38 <CLItask+0x178>)
  40497c:	4b27      	ldr	r3, [pc, #156]	; (404a1c <CLItask+0x15c>)
  40497e:	4798      	blx	r3
  404980:	b910      	cbnz	r0, 404988 <CLItask+0xc8>
  404982:	4b2e      	ldr	r3, [pc, #184]	; (404a3c <CLItask+0x17c>)
  404984:	4798      	blx	r3
  404986:	e025      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"walk")) cmdWalk(atoi(strtok(NULL," ")));
  404988:	4630      	mov	r0, r6
  40498a:	492d      	ldr	r1, [pc, #180]	; (404a40 <CLItask+0x180>)
  40498c:	4b23      	ldr	r3, [pc, #140]	; (404a1c <CLItask+0x15c>)
  40498e:	4798      	blx	r3
  404990:	b938      	cbnz	r0, 4049a2 <CLItask+0xe2>
  404992:	4639      	mov	r1, r7
  404994:	4b1f      	ldr	r3, [pc, #124]	; (404a14 <CLItask+0x154>)
  404996:	4798      	blx	r3
  404998:	4b21      	ldr	r3, [pc, #132]	; (404a20 <CLItask+0x160>)
  40499a:	4798      	blx	r3
  40499c:	4b29      	ldr	r3, [pc, #164]	; (404a44 <CLItask+0x184>)
  40499e:	4798      	blx	r3
  4049a0:	e018      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"walkcytime")) hexabot_walk.Hexabot_leg_cycle_t = atoi(strtok(NULL," "));
  4049a2:	4630      	mov	r0, r6
  4049a4:	4928      	ldr	r1, [pc, #160]	; (404a48 <CLItask+0x188>)
  4049a6:	4b1d      	ldr	r3, [pc, #116]	; (404a1c <CLItask+0x15c>)
  4049a8:	4798      	blx	r3
  4049aa:	b938      	cbnz	r0, 4049bc <CLItask+0xfc>
  4049ac:	4639      	mov	r1, r7
  4049ae:	4b19      	ldr	r3, [pc, #100]	; (404a14 <CLItask+0x154>)
  4049b0:	4798      	blx	r3
  4049b2:	4b1b      	ldr	r3, [pc, #108]	; (404a20 <CLItask+0x160>)
  4049b4:	4798      	blx	r3
  4049b6:	4b25      	ldr	r3, [pc, #148]	; (404a4c <CLItask+0x18c>)
  4049b8:	6198      	str	r0, [r3, #24]
  4049ba:	e00b      	b.n	4049d4 <CLItask+0x114>
			
			else if(!strcmp(BaseCmd,"verbose")) VerboseMode = atoi(strtok(NULL," "));
  4049bc:	4630      	mov	r0, r6
  4049be:	4924      	ldr	r1, [pc, #144]	; (404a50 <CLItask+0x190>)
  4049c0:	4b16      	ldr	r3, [pc, #88]	; (404a1c <CLItask+0x15c>)
  4049c2:	4798      	blx	r3
  4049c4:	b930      	cbnz	r0, 4049d4 <CLItask+0x114>
  4049c6:	4639      	mov	r1, r7
  4049c8:	4b12      	ldr	r3, [pc, #72]	; (404a14 <CLItask+0x154>)
  4049ca:	4798      	blx	r3
  4049cc:	4b14      	ldr	r3, [pc, #80]	; (404a20 <CLItask+0x160>)
  4049ce:	4798      	blx	r3
  4049d0:	4b20      	ldr	r3, [pc, #128]	; (404a54 <CLItask+0x194>)
  4049d2:	6018      	str	r0, [r3, #0]
			
			sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4049d4:	480c      	ldr	r0, [pc, #48]	; (404a08 <CLItask+0x148>)
  4049d6:	4b06      	ldr	r3, [pc, #24]	; (4049f0 <CLItask+0x130>)
  4049d8:	4798      	blx	r3
			memset(CLIbuf,0,100);
  4049da:	4620      	mov	r0, r4
  4049dc:	2100      	movs	r1, #0
  4049de:	2264      	movs	r2, #100	; 0x64
  4049e0:	4b05      	ldr	r3, [pc, #20]	; (4049f8 <CLItask+0x138>)
  4049e2:	4798      	blx	r3
			//Figure out function, then commit;
		}
		
		vTaskDelay(1);
  4049e4:	2001      	movs	r0, #1
  4049e6:	4b1c      	ldr	r3, [pc, #112]	; (404a58 <CLItask+0x198>)
  4049e8:	4798      	blx	r3
	}
  4049ea:	e781      	b.n	4048f0 <CLItask+0x30>
  4049ec:	0040e06c 	.word	0x0040e06c
  4049f0:	0040019d 	.word	0x0040019d
  4049f4:	2040c3c8 	.word	0x2040c3c8
  4049f8:	0040e765 	.word	0x0040e765
  4049fc:	0040e090 	.word	0x0040e090
  404a00:	0040e0d0 	.word	0x0040e0d0
  404a04:	0040db70 	.word	0x0040db70
  404a08:	0040e0e8 	.word	0x0040e0e8
  404a0c:	2040c29c 	.word	0x2040c29c
  404a10:	0040e10c 	.word	0x0040e10c
  404a14:	00408479 	.word	0x00408479
  404a18:	0040e110 	.word	0x0040e110
  404a1c:	00408149 	.word	0x00408149
  404a20:	00407aa9 	.word	0x00407aa9
  404a24:	00403f7d 	.word	0x00403f7d
  404a28:	0040e114 	.word	0x0040e114
  404a2c:	00404121 	.word	0x00404121
  404a30:	0040e11c 	.word	0x0040e11c
  404a34:	004041f9 	.word	0x004041f9
  404a38:	0040e128 	.word	0x0040e128
  404a3c:	00403a5d 	.word	0x00403a5d
  404a40:	0040e134 	.word	0x0040e134
  404a44:	00404231 	.word	0x00404231
  404a48:	0040e13c 	.word	0x0040e13c
  404a4c:	2040c3a0 	.word	0x2040c3a0
  404a50:	0040e148 	.word	0x0040e148
  404a54:	2040c298 	.word	0x2040c298
  404a58:	00401ac9 	.word	0x00401ac9

00404a5c <main>:
int CLIbufIndex = 0;
walk_data hexabot_walk;
int VerboseMode = 0;

int main (void)
{
  404a5c:	b570      	push	{r4, r5, r6, lr}
  404a5e:	b084      	sub	sp, #16
		
	
	board_init();
  404a60:	4b1a      	ldr	r3, [pc, #104]	; (404acc <main+0x70>)
  404a62:	4798      	blx	r3
	sendDebugString("BOARD INITIALIZATION - FINISHED\n");
  404a64:	481a      	ldr	r0, [pc, #104]	; (404ad0 <main+0x74>)
  404a66:	4d1b      	ldr	r5, [pc, #108]	; (404ad4 <main+0x78>)
  404a68:	47a8      	blx	r5
	sendDebugString("RTOS TASK INITIALIZATION - STARTED\n");
  404a6a:	481b      	ldr	r0, [pc, #108]	; (404ad8 <main+0x7c>)
  404a6c:	47a8      	blx	r5
	
	xTaskCreate(vTask1,"TASK1",400,NULL,4,NULL);
  404a6e:	2304      	movs	r3, #4
  404a70:	9300      	str	r3, [sp, #0]
  404a72:	2400      	movs	r4, #0
  404a74:	9401      	str	r4, [sp, #4]
  404a76:	9402      	str	r4, [sp, #8]
  404a78:	9403      	str	r4, [sp, #12]
  404a7a:	4818      	ldr	r0, [pc, #96]	; (404adc <main+0x80>)
  404a7c:	4918      	ldr	r1, [pc, #96]	; (404ae0 <main+0x84>)
  404a7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
  404a82:	4623      	mov	r3, r4
  404a84:	4e17      	ldr	r6, [pc, #92]	; (404ae4 <main+0x88>)
  404a86:	47b0      	blx	r6
	xTaskCreate(LegControlTask,"LEGCTRLTASK",1600,NULL,3,NULL);
  404a88:	2303      	movs	r3, #3
  404a8a:	9300      	str	r3, [sp, #0]
  404a8c:	9401      	str	r4, [sp, #4]
  404a8e:	9402      	str	r4, [sp, #8]
  404a90:	9403      	str	r4, [sp, #12]
  404a92:	4815      	ldr	r0, [pc, #84]	; (404ae8 <main+0x8c>)
  404a94:	4915      	ldr	r1, [pc, #84]	; (404aec <main+0x90>)
  404a96:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  404a9a:	4623      	mov	r3, r4
  404a9c:	47b0      	blx	r6
	xTaskCreate(CLItask,"CLITASK",1600,NULL,2,NULL);
  404a9e:	2302      	movs	r3, #2
  404aa0:	9300      	str	r3, [sp, #0]
  404aa2:	9401      	str	r4, [sp, #4]
  404aa4:	9402      	str	r4, [sp, #8]
  404aa6:	9403      	str	r4, [sp, #12]
  404aa8:	4811      	ldr	r0, [pc, #68]	; (404af0 <main+0x94>)
  404aaa:	4912      	ldr	r1, [pc, #72]	; (404af4 <main+0x98>)
  404aac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  404ab0:	4623      	mov	r3, r4
  404ab2:	47b0      	blx	r6
	sendDebugString("TASK1 DEFINITION - FINISHED\n");
  404ab4:	4810      	ldr	r0, [pc, #64]	; (404af8 <main+0x9c>)
  404ab6:	47a8      	blx	r5
	
	sendDebugString("STARTING RTOS\n");
  404ab8:	4810      	ldr	r0, [pc, #64]	; (404afc <main+0xa0>)
  404aba:	47a8      	blx	r5
	vTaskStartScheduler();
  404abc:	4b10      	ldr	r3, [pc, #64]	; (404b00 <main+0xa4>)
  404abe:	4798      	blx	r3
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
  404ac0:	4810      	ldr	r0, [pc, #64]	; (404b04 <main+0xa8>)
  404ac2:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  404ac4:	4620      	mov	r0, r4
  404ac6:	b004      	add	sp, #16
  404ac8:	bd70      	pop	{r4, r5, r6, pc}
  404aca:	bf00      	nop
  404acc:	00402a3d 	.word	0x00402a3d
  404ad0:	0040e150 	.word	0x0040e150
  404ad4:	0040019d 	.word	0x0040019d
  404ad8:	0040e174 	.word	0x0040e174
  404adc:	00404245 	.word	0x00404245
  404ae0:	0040e198 	.word	0x0040e198
  404ae4:	004015a9 	.word	0x004015a9
  404ae8:	004042a9 	.word	0x004042a9
  404aec:	0040e1a0 	.word	0x0040e1a0
  404af0:	004048c1 	.word	0x004048c1
  404af4:	0040e1ac 	.word	0x0040e1ac
  404af8:	0040e1b4 	.word	0x0040e1b4
  404afc:	0040e1d4 	.word	0x0040e1d4
  404b00:	004017d1 	.word	0x004017d1
  404b04:	0040e1e4 	.word	0x0040e1e4

00404b08 <ISI_Handler>:
	   ######################################
	   ###################################### */
	
void ISI_Handler(void) {
	uint32_t status,imr;
	status = ISI->ISI_SR;
  404b08:	4b03      	ldr	r3, [pc, #12]	; (404b18 <ISI_Handler+0x10>)
  404b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  404b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	//pio_set(LED3);
	isi_frames_done++;
  404b0e:	4a03      	ldr	r2, [pc, #12]	; (404b1c <ISI_Handler+0x14>)
  404b10:	6813      	ldr	r3, [r2, #0]
  404b12:	3301      	adds	r3, #1
  404b14:	6013      	str	r3, [r2, #0]
  404b16:	4770      	bx	lr
  404b18:	4004c000 	.word	0x4004c000
  404b1c:	2040c2a0 	.word	0x2040c2a0

00404b20 <UART4_Handler>:
}

void UART4_Handler(void) {
  404b20:	b500      	push	{lr}
  404b22:	b083      	sub	sp, #12
	uint32_t imr = ISI->ISI_IMR;
  404b24:	4b08      	ldr	r3, [pc, #32]	; (404b48 <UART4_Handler+0x28>)
  404b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	char temp;
	uart_read(UART4,&temp);
  404b28:	4808      	ldr	r0, [pc, #32]	; (404b4c <UART4_Handler+0x2c>)
  404b2a:	f10d 0107 	add.w	r1, sp, #7
  404b2e:	4b08      	ldr	r3, [pc, #32]	; (404b50 <UART4_Handler+0x30>)
  404b30:	4798      	blx	r3
	CLIbuf[CLIbufIndex] = temp;
  404b32:	4a08      	ldr	r2, [pc, #32]	; (404b54 <UART4_Handler+0x34>)
  404b34:	6813      	ldr	r3, [r2, #0]
  404b36:	f89d 0007 	ldrb.w	r0, [sp, #7]
  404b3a:	4907      	ldr	r1, [pc, #28]	; (404b58 <UART4_Handler+0x38>)
  404b3c:	54c8      	strb	r0, [r1, r3]
	CLIbufIndex++;
  404b3e:	3301      	adds	r3, #1
  404b40:	6013      	str	r3, [r2, #0]
	
}
  404b42:	b003      	add	sp, #12
  404b44:	f85d fb04 	ldr.w	pc, [sp], #4
  404b48:	4004c000 	.word	0x4004c000
  404b4c:	400e1e00 	.word	0x400e1e00
  404b50:	00402a29 	.word	0x00402a29
  404b54:	2040c29c 	.word	0x2040c29c
  404b58:	2040c3c8 	.word	0x2040c3c8

00404b5c <cos>:
  404b5c:	4a1f      	ldr	r2, [pc, #124]	; (404bdc <cos+0x80>)
  404b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404b62:	4293      	cmp	r3, r2
  404b64:	b530      	push	{r4, r5, lr}
  404b66:	b087      	sub	sp, #28
  404b68:	dd1b      	ble.n	404ba2 <cos+0x46>
  404b6a:	4a1d      	ldr	r2, [pc, #116]	; (404be0 <cos+0x84>)
  404b6c:	4293      	cmp	r3, r2
  404b6e:	dd05      	ble.n	404b7c <cos+0x20>
  404b70:	4602      	mov	r2, r0
  404b72:	460b      	mov	r3, r1
  404b74:	f002 fa86 	bl	407084 <__aeabi_dsub>
  404b78:	b007      	add	sp, #28
  404b7a:	bd30      	pop	{r4, r5, pc}
  404b7c:	aa02      	add	r2, sp, #8
  404b7e:	f000 ff0f 	bl	4059a0 <__ieee754_rem_pio2>
  404b82:	f000 0303 	and.w	r3, r0, #3
  404b86:	2b01      	cmp	r3, #1
  404b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404b8c:	d016      	beq.n	404bbc <cos+0x60>
  404b8e:	2b02      	cmp	r3, #2
  404b90:	d00d      	beq.n	404bae <cos+0x52>
  404b92:	b1eb      	cbz	r3, 404bd0 <cos+0x74>
  404b94:	2401      	movs	r4, #1
  404b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404b9a:	9400      	str	r4, [sp, #0]
  404b9c:	f001 fef0 	bl	406980 <__kernel_sin>
  404ba0:	e7ea      	b.n	404b78 <cos+0x1c>
  404ba2:	2200      	movs	r2, #0
  404ba4:	2300      	movs	r3, #0
  404ba6:	f001 f9c7 	bl	405f38 <__kernel_cos>
  404baa:	b007      	add	sp, #28
  404bac:	bd30      	pop	{r4, r5, pc}
  404bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404bb2:	f001 f9c1 	bl	405f38 <__kernel_cos>
  404bb6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404bba:	e7dd      	b.n	404b78 <cos+0x1c>
  404bbc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404bc0:	9300      	str	r3, [sp, #0]
  404bc2:	4622      	mov	r2, r4
  404bc4:	462b      	mov	r3, r5
  404bc6:	f001 fedb 	bl	406980 <__kernel_sin>
  404bca:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404bce:	e7d3      	b.n	404b78 <cos+0x1c>
  404bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404bd4:	f001 f9b0 	bl	405f38 <__kernel_cos>
  404bd8:	e7ce      	b.n	404b78 <cos+0x1c>
  404bda:	bf00      	nop
  404bdc:	3fe921fb 	.word	0x3fe921fb
  404be0:	7fefffff 	.word	0x7fefffff

00404be4 <sin>:
  404be4:	4a22      	ldr	r2, [pc, #136]	; (404c70 <sin+0x8c>)
  404be6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404bea:	4293      	cmp	r3, r2
  404bec:	b530      	push	{r4, r5, lr}
  404bee:	b087      	sub	sp, #28
  404bf0:	dd1b      	ble.n	404c2a <sin+0x46>
  404bf2:	4a20      	ldr	r2, [pc, #128]	; (404c74 <sin+0x90>)
  404bf4:	4293      	cmp	r3, r2
  404bf6:	dd05      	ble.n	404c04 <sin+0x20>
  404bf8:	4602      	mov	r2, r0
  404bfa:	460b      	mov	r3, r1
  404bfc:	f002 fa42 	bl	407084 <__aeabi_dsub>
  404c00:	b007      	add	sp, #28
  404c02:	bd30      	pop	{r4, r5, pc}
  404c04:	aa02      	add	r2, sp, #8
  404c06:	f000 fecb 	bl	4059a0 <__ieee754_rem_pio2>
  404c0a:	f000 0003 	and.w	r0, r0, #3
  404c0e:	2801      	cmp	r0, #1
  404c10:	d01e      	beq.n	404c50 <sin+0x6c>
  404c12:	2802      	cmp	r0, #2
  404c14:	d011      	beq.n	404c3a <sin+0x56>
  404c16:	b310      	cbz	r0, 404c5e <sin+0x7a>
  404c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c20:	f001 f98a 	bl	405f38 <__kernel_cos>
  404c24:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404c28:	e7ea      	b.n	404c00 <sin+0x1c>
  404c2a:	2400      	movs	r4, #0
  404c2c:	2200      	movs	r2, #0
  404c2e:	2300      	movs	r3, #0
  404c30:	9400      	str	r4, [sp, #0]
  404c32:	f001 fea5 	bl	406980 <__kernel_sin>
  404c36:	b007      	add	sp, #28
  404c38:	bd30      	pop	{r4, r5, pc}
  404c3a:	2401      	movs	r4, #1
  404c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c44:	9400      	str	r4, [sp, #0]
  404c46:	f001 fe9b 	bl	406980 <__kernel_sin>
  404c4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404c4e:	e7d7      	b.n	404c00 <sin+0x1c>
  404c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c58:	f001 f96e 	bl	405f38 <__kernel_cos>
  404c5c:	e7d0      	b.n	404c00 <sin+0x1c>
  404c5e:	2401      	movs	r4, #1
  404c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c68:	9400      	str	r4, [sp, #0]
  404c6a:	f001 fe89 	bl	406980 <__kernel_sin>
  404c6e:	e7c7      	b.n	404c00 <sin+0x1c>
  404c70:	3fe921fb 	.word	0x3fe921fb
  404c74:	7fefffff 	.word	0x7fefffff

00404c78 <lroundf>:
  404c78:	b510      	push	{r4, lr}
  404c7a:	f3c0 54c7 	ubfx	r4, r0, #23, #8
  404c7e:	2800      	cmp	r0, #0
  404c80:	f1a4 027f 	sub.w	r2, r4, #127	; 0x7f
  404c84:	bfb4      	ite	lt
  404c86:	f04f 31ff 	movlt.w	r1, #4294967295
  404c8a:	2101      	movge	r1, #1
  404c8c:	2a1e      	cmp	r2, #30
  404c8e:	dc0c      	bgt.n	404caa <lroundf+0x32>
  404c90:	2a00      	cmp	r2, #0
  404c92:	db17      	blt.n	404cc4 <lroundf+0x4c>
  404c94:	f3c0 0316 	ubfx	r3, r0, #0, #23
  404c98:	2a16      	cmp	r2, #22
  404c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404c9e:	dd07      	ble.n	404cb0 <lroundf+0x38>
  404ca0:	3c96      	subs	r4, #150	; 0x96
  404ca2:	40a3      	lsls	r3, r4
  404ca4:	fb01 f003 	mul.w	r0, r1, r3
  404ca8:	bd10      	pop	{r4, pc}
  404caa:	f002 feb1 	bl	407a10 <__aeabi_f2iz>
  404cae:	bd10      	pop	{r4, pc}
  404cb0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  404cb4:	f1c2 0417 	rsb	r4, r2, #23
  404cb8:	4110      	asrs	r0, r2
  404cba:	4403      	add	r3, r0
  404cbc:	40e3      	lsrs	r3, r4
  404cbe:	fb01 f003 	mul.w	r0, r1, r3
  404cc2:	bd10      	pop	{r4, pc}
  404cc4:	3201      	adds	r2, #1
  404cc6:	bf0c      	ite	eq
  404cc8:	4608      	moveq	r0, r1
  404cca:	2000      	movne	r0, #0
  404ccc:	bd10      	pop	{r4, pc}
  404cce:	bf00      	nop

00404cd0 <acos>:
  404cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404cd4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 404d74 <acos+0xa4>
  404cd8:	b08a      	sub	sp, #40	; 0x28
  404cda:	4606      	mov	r6, r0
  404cdc:	460f      	mov	r7, r1
  404cde:	f000 f8fb 	bl	404ed8 <__ieee754_acos>
  404ce2:	f998 3000 	ldrsb.w	r3, [r8]
  404ce6:	4604      	mov	r4, r0
  404ce8:	460d      	mov	r5, r1
  404cea:	3301      	adds	r3, #1
  404cec:	d004      	beq.n	404cf8 <acos+0x28>
  404cee:	4630      	mov	r0, r6
  404cf0:	4639      	mov	r1, r7
  404cf2:	f002 f90d 	bl	406f10 <__fpclassifyd>
  404cf6:	b920      	cbnz	r0, 404d02 <acos+0x32>
  404cf8:	4620      	mov	r0, r4
  404cfa:	4629      	mov	r1, r5
  404cfc:	b00a      	add	sp, #40	; 0x28
  404cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d02:	4630      	mov	r0, r6
  404d04:	4639      	mov	r1, r7
  404d06:	f002 f875 	bl	406df4 <fabs>
  404d0a:	2200      	movs	r2, #0
  404d0c:	4b16      	ldr	r3, [pc, #88]	; (404d68 <acos+0x98>)
  404d0e:	f002 fdfd 	bl	40790c <__aeabi_dcmpgt>
  404d12:	2800      	cmp	r0, #0
  404d14:	d0f0      	beq.n	404cf8 <acos+0x28>
  404d16:	2300      	movs	r3, #0
  404d18:	2101      	movs	r1, #1
  404d1a:	4a14      	ldr	r2, [pc, #80]	; (404d6c <acos+0x9c>)
  404d1c:	4814      	ldr	r0, [pc, #80]	; (404d70 <acos+0xa0>)
  404d1e:	9308      	str	r3, [sp, #32]
  404d20:	e88d 0006 	stmia.w	sp, {r1, r2}
  404d24:	e9cd 6704 	strd	r6, r7, [sp, #16]
  404d28:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404d2c:	f002 f914 	bl	406f58 <nan>
  404d30:	f998 3000 	ldrsb.w	r3, [r8]
  404d34:	2b02      	cmp	r3, #2
  404d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404d3a:	d00a      	beq.n	404d52 <acos+0x82>
  404d3c:	4668      	mov	r0, sp
  404d3e:	f002 f909 	bl	406f54 <matherr>
  404d42:	b130      	cbz	r0, 404d52 <acos+0x82>
  404d44:	9b08      	ldr	r3, [sp, #32]
  404d46:	b94b      	cbnz	r3, 404d5c <acos+0x8c>
  404d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404d4c:	b00a      	add	sp, #40	; 0x28
  404d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404d52:	f002 fead 	bl	407ab0 <__errno>
  404d56:	2321      	movs	r3, #33	; 0x21
  404d58:	6003      	str	r3, [r0, #0]
  404d5a:	e7f3      	b.n	404d44 <acos+0x74>
  404d5c:	f002 fea8 	bl	407ab0 <__errno>
  404d60:	9b08      	ldr	r3, [sp, #32]
  404d62:	6003      	str	r3, [r0, #0]
  404d64:	e7f0      	b.n	404d48 <acos+0x78>
  404d66:	bf00      	nop
  404d68:	3ff00000 	.word	0x3ff00000
  404d6c:	0040e220 	.word	0x0040e220
  404d70:	0040ded4 	.word	0x0040ded4
  404d74:	20400018 	.word	0x20400018

00404d78 <asin>:
  404d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d7c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 404e1c <asin+0xa4>
  404d80:	b08a      	sub	sp, #40	; 0x28
  404d82:	4606      	mov	r6, r0
  404d84:	460f      	mov	r7, r1
  404d86:	f000 fb03 	bl	405390 <__ieee754_asin>
  404d8a:	f998 3000 	ldrsb.w	r3, [r8]
  404d8e:	4604      	mov	r4, r0
  404d90:	460d      	mov	r5, r1
  404d92:	3301      	adds	r3, #1
  404d94:	d004      	beq.n	404da0 <asin+0x28>
  404d96:	4630      	mov	r0, r6
  404d98:	4639      	mov	r1, r7
  404d9a:	f002 f8b9 	bl	406f10 <__fpclassifyd>
  404d9e:	b920      	cbnz	r0, 404daa <asin+0x32>
  404da0:	4620      	mov	r0, r4
  404da2:	4629      	mov	r1, r5
  404da4:	b00a      	add	sp, #40	; 0x28
  404da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404daa:	4630      	mov	r0, r6
  404dac:	4639      	mov	r1, r7
  404dae:	f002 f821 	bl	406df4 <fabs>
  404db2:	2200      	movs	r2, #0
  404db4:	4b16      	ldr	r3, [pc, #88]	; (404e10 <asin+0x98>)
  404db6:	f002 fda9 	bl	40790c <__aeabi_dcmpgt>
  404dba:	2800      	cmp	r0, #0
  404dbc:	d0f0      	beq.n	404da0 <asin+0x28>
  404dbe:	2300      	movs	r3, #0
  404dc0:	2101      	movs	r1, #1
  404dc2:	4a14      	ldr	r2, [pc, #80]	; (404e14 <asin+0x9c>)
  404dc4:	4814      	ldr	r0, [pc, #80]	; (404e18 <asin+0xa0>)
  404dc6:	9308      	str	r3, [sp, #32]
  404dc8:	e88d 0006 	stmia.w	sp, {r1, r2}
  404dcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  404dd0:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404dd4:	f002 f8c0 	bl	406f58 <nan>
  404dd8:	f998 3000 	ldrsb.w	r3, [r8]
  404ddc:	2b02      	cmp	r3, #2
  404dde:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404de2:	d00a      	beq.n	404dfa <asin+0x82>
  404de4:	4668      	mov	r0, sp
  404de6:	f002 f8b5 	bl	406f54 <matherr>
  404dea:	b130      	cbz	r0, 404dfa <asin+0x82>
  404dec:	9b08      	ldr	r3, [sp, #32]
  404dee:	b94b      	cbnz	r3, 404e04 <asin+0x8c>
  404df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404df4:	b00a      	add	sp, #40	; 0x28
  404df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404dfa:	f002 fe59 	bl	407ab0 <__errno>
  404dfe:	2321      	movs	r3, #33	; 0x21
  404e00:	6003      	str	r3, [r0, #0]
  404e02:	e7f3      	b.n	404dec <asin+0x74>
  404e04:	f002 fe54 	bl	407ab0 <__errno>
  404e08:	9b08      	ldr	r3, [sp, #32]
  404e0a:	6003      	str	r3, [r0, #0]
  404e0c:	e7f0      	b.n	404df0 <asin+0x78>
  404e0e:	bf00      	nop
  404e10:	3ff00000 	.word	0x3ff00000
  404e14:	0040e228 	.word	0x0040e228
  404e18:	0040ded4 	.word	0x0040ded4
  404e1c:	20400018 	.word	0x20400018

00404e20 <atan2>:
  404e20:	f000 bce6 	b.w	4057f0 <__ieee754_atan2>

00404e24 <sqrt>:
  404e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e28:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 404ed4 <sqrt+0xb0>
  404e2c:	b08a      	sub	sp, #40	; 0x28
  404e2e:	4606      	mov	r6, r0
  404e30:	460f      	mov	r7, r1
  404e32:	f000 ffd3 	bl	405ddc <__ieee754_sqrt>
  404e36:	f998 3000 	ldrsb.w	r3, [r8]
  404e3a:	4604      	mov	r4, r0
  404e3c:	460d      	mov	r5, r1
  404e3e:	3301      	adds	r3, #1
  404e40:	d02d      	beq.n	404e9e <sqrt+0x7a>
  404e42:	4630      	mov	r0, r6
  404e44:	4639      	mov	r1, r7
  404e46:	f002 f863 	bl	406f10 <__fpclassifyd>
  404e4a:	b340      	cbz	r0, 404e9e <sqrt+0x7a>
  404e4c:	2300      	movs	r3, #0
  404e4e:	4630      	mov	r0, r6
  404e50:	4639      	mov	r1, r7
  404e52:	2200      	movs	r2, #0
  404e54:	f002 fd3c 	bl	4078d0 <__aeabi_dcmplt>
  404e58:	f04f 0301 	mov.w	r3, #1
  404e5c:	b900      	cbnz	r0, 404e60 <sqrt+0x3c>
  404e5e:	4603      	mov	r3, r0
  404e60:	f013 0fff 	tst.w	r3, #255	; 0xff
  404e64:	d01b      	beq.n	404e9e <sqrt+0x7a>
  404e66:	2101      	movs	r1, #1
  404e68:	4a19      	ldr	r2, [pc, #100]	; (404ed0 <sqrt+0xac>)
  404e6a:	2300      	movs	r3, #0
  404e6c:	f898 4000 	ldrb.w	r4, [r8]
  404e70:	e88d 0006 	stmia.w	sp, {r1, r2}
  404e74:	9308      	str	r3, [sp, #32]
  404e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
  404e7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404e7e:	b99c      	cbnz	r4, 404ea8 <sqrt+0x84>
  404e80:	2200      	movs	r2, #0
  404e82:	2300      	movs	r3, #0
  404e84:	e9cd 2306 	strd	r2, r3, [sp, #24]
  404e88:	4668      	mov	r0, sp
  404e8a:	f002 f863 	bl	406f54 <matherr>
  404e8e:	b1a8      	cbz	r0, 404ebc <sqrt+0x98>
  404e90:	9b08      	ldr	r3, [sp, #32]
  404e92:	b9c3      	cbnz	r3, 404ec6 <sqrt+0xa2>
  404e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404e98:	b00a      	add	sp, #40	; 0x28
  404e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e9e:	4620      	mov	r0, r4
  404ea0:	4629      	mov	r1, r5
  404ea2:	b00a      	add	sp, #40	; 0x28
  404ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ea8:	2000      	movs	r0, #0
  404eaa:	2100      	movs	r1, #0
  404eac:	4602      	mov	r2, r0
  404eae:	460b      	mov	r3, r1
  404eb0:	f002 fbc6 	bl	407640 <__aeabi_ddiv>
  404eb4:	2c02      	cmp	r4, #2
  404eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404eba:	d1e5      	bne.n	404e88 <sqrt+0x64>
  404ebc:	f002 fdf8 	bl	407ab0 <__errno>
  404ec0:	2321      	movs	r3, #33	; 0x21
  404ec2:	6003      	str	r3, [r0, #0]
  404ec4:	e7e4      	b.n	404e90 <sqrt+0x6c>
  404ec6:	f002 fdf3 	bl	407ab0 <__errno>
  404eca:	9b08      	ldr	r3, [sp, #32]
  404ecc:	6003      	str	r3, [r0, #0]
  404ece:	e7e1      	b.n	404e94 <sqrt+0x70>
  404ed0:	0040e230 	.word	0x0040e230
  404ed4:	20400018 	.word	0x20400018

00404ed8 <__ieee754_acos>:
  404ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404edc:	4ec6      	ldr	r6, [pc, #792]	; (4051f8 <__ieee754_acos+0x320>)
  404ede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404ee2:	460c      	mov	r4, r1
  404ee4:	4605      	mov	r5, r0
  404ee6:	42b3      	cmp	r3, r6
  404ee8:	dd0c      	ble.n	404f04 <__ieee754_acos+0x2c>
  404eea:	4fc4      	ldr	r7, [pc, #784]	; (4051fc <__ieee754_acos+0x324>)
  404eec:	441f      	add	r7, r3
  404eee:	4603      	mov	r3, r0
  404ef0:	433b      	orrs	r3, r7
  404ef2:	f040 80bb 	bne.w	40506c <__ieee754_acos+0x194>
  404ef6:	2900      	cmp	r1, #0
  404ef8:	f340 8144 	ble.w	405184 <__ieee754_acos+0x2ac>
  404efc:	2000      	movs	r0, #0
  404efe:	2100      	movs	r1, #0
  404f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f04:	4ebe      	ldr	r6, [pc, #760]	; (405200 <__ieee754_acos+0x328>)
  404f06:	42b3      	cmp	r3, r6
  404f08:	f340 80a8 	ble.w	40505c <__ieee754_acos+0x184>
  404f0c:	2900      	cmp	r1, #0
  404f0e:	f2c0 817f 	blt.w	405210 <__ieee754_acos+0x338>
  404f12:	4602      	mov	r2, r0
  404f14:	4623      	mov	r3, r4
  404f16:	2000      	movs	r0, #0
  404f18:	49ba      	ldr	r1, [pc, #744]	; (405204 <__ieee754_acos+0x32c>)
  404f1a:	f002 f8b3 	bl	407084 <__aeabi_dsub>
  404f1e:	2200      	movs	r2, #0
  404f20:	4bb9      	ldr	r3, [pc, #740]	; (405208 <__ieee754_acos+0x330>)
  404f22:	2600      	movs	r6, #0
  404f24:	f002 fa62 	bl	4073ec <__aeabi_dmul>
  404f28:	4604      	mov	r4, r0
  404f2a:	460d      	mov	r5, r1
  404f2c:	f000 ff56 	bl	405ddc <__ieee754_sqrt>
  404f30:	4689      	mov	r9, r1
  404f32:	4680      	mov	r8, r0
  404f34:	4629      	mov	r1, r5
  404f36:	4620      	mov	r0, r4
  404f38:	a395      	add	r3, pc, #596	; (adr r3, 405190 <__ieee754_acos+0x2b8>)
  404f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f3e:	f002 fa55 	bl	4073ec <__aeabi_dmul>
  404f42:	a395      	add	r3, pc, #596	; (adr r3, 405198 <__ieee754_acos+0x2c0>)
  404f44:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f48:	f002 f89e 	bl	407088 <__adddf3>
  404f4c:	4622      	mov	r2, r4
  404f4e:	462b      	mov	r3, r5
  404f50:	f002 fa4c 	bl	4073ec <__aeabi_dmul>
  404f54:	a392      	add	r3, pc, #584	; (adr r3, 4051a0 <__ieee754_acos+0x2c8>)
  404f56:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f5a:	f002 f893 	bl	407084 <__aeabi_dsub>
  404f5e:	4622      	mov	r2, r4
  404f60:	462b      	mov	r3, r5
  404f62:	f002 fa43 	bl	4073ec <__aeabi_dmul>
  404f66:	a390      	add	r3, pc, #576	; (adr r3, 4051a8 <__ieee754_acos+0x2d0>)
  404f68:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f6c:	f002 f88c 	bl	407088 <__adddf3>
  404f70:	4622      	mov	r2, r4
  404f72:	462b      	mov	r3, r5
  404f74:	f002 fa3a 	bl	4073ec <__aeabi_dmul>
  404f78:	a38d      	add	r3, pc, #564	; (adr r3, 4051b0 <__ieee754_acos+0x2d8>)
  404f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f7e:	f002 f881 	bl	407084 <__aeabi_dsub>
  404f82:	4622      	mov	r2, r4
  404f84:	462b      	mov	r3, r5
  404f86:	f002 fa31 	bl	4073ec <__aeabi_dmul>
  404f8a:	a38b      	add	r3, pc, #556	; (adr r3, 4051b8 <__ieee754_acos+0x2e0>)
  404f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f90:	f002 f87a 	bl	407088 <__adddf3>
  404f94:	4622      	mov	r2, r4
  404f96:	462b      	mov	r3, r5
  404f98:	f002 fa28 	bl	4073ec <__aeabi_dmul>
  404f9c:	4682      	mov	sl, r0
  404f9e:	468b      	mov	fp, r1
  404fa0:	4620      	mov	r0, r4
  404fa2:	4629      	mov	r1, r5
  404fa4:	a386      	add	r3, pc, #536	; (adr r3, 4051c0 <__ieee754_acos+0x2e8>)
  404fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404faa:	f002 fa1f 	bl	4073ec <__aeabi_dmul>
  404fae:	a386      	add	r3, pc, #536	; (adr r3, 4051c8 <__ieee754_acos+0x2f0>)
  404fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fb4:	f002 f866 	bl	407084 <__aeabi_dsub>
  404fb8:	4622      	mov	r2, r4
  404fba:	462b      	mov	r3, r5
  404fbc:	f002 fa16 	bl	4073ec <__aeabi_dmul>
  404fc0:	a383      	add	r3, pc, #524	; (adr r3, 4051d0 <__ieee754_acos+0x2f8>)
  404fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fc6:	f002 f85f 	bl	407088 <__adddf3>
  404fca:	4622      	mov	r2, r4
  404fcc:	462b      	mov	r3, r5
  404fce:	f002 fa0d 	bl	4073ec <__aeabi_dmul>
  404fd2:	a381      	add	r3, pc, #516	; (adr r3, 4051d8 <__ieee754_acos+0x300>)
  404fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fd8:	f002 f854 	bl	407084 <__aeabi_dsub>
  404fdc:	4622      	mov	r2, r4
  404fde:	462b      	mov	r3, r5
  404fe0:	f002 fa04 	bl	4073ec <__aeabi_dmul>
  404fe4:	2200      	movs	r2, #0
  404fe6:	4b87      	ldr	r3, [pc, #540]	; (405204 <__ieee754_acos+0x32c>)
  404fe8:	f002 f84e 	bl	407088 <__adddf3>
  404fec:	4602      	mov	r2, r0
  404fee:	460b      	mov	r3, r1
  404ff0:	4650      	mov	r0, sl
  404ff2:	4659      	mov	r1, fp
  404ff4:	f002 fb24 	bl	407640 <__aeabi_ddiv>
  404ff8:	4642      	mov	r2, r8
  404ffa:	464b      	mov	r3, r9
  404ffc:	f002 f9f6 	bl	4073ec <__aeabi_dmul>
  405000:	4632      	mov	r2, r6
  405002:	4682      	mov	sl, r0
  405004:	468b      	mov	fp, r1
  405006:	464b      	mov	r3, r9
  405008:	4630      	mov	r0, r6
  40500a:	4649      	mov	r1, r9
  40500c:	f002 f9ee 	bl	4073ec <__aeabi_dmul>
  405010:	4602      	mov	r2, r0
  405012:	460b      	mov	r3, r1
  405014:	4620      	mov	r0, r4
  405016:	4629      	mov	r1, r5
  405018:	f002 f834 	bl	407084 <__aeabi_dsub>
  40501c:	4604      	mov	r4, r0
  40501e:	460d      	mov	r5, r1
  405020:	4632      	mov	r2, r6
  405022:	464b      	mov	r3, r9
  405024:	4640      	mov	r0, r8
  405026:	4649      	mov	r1, r9
  405028:	f002 f82e 	bl	407088 <__adddf3>
  40502c:	4602      	mov	r2, r0
  40502e:	460b      	mov	r3, r1
  405030:	4620      	mov	r0, r4
  405032:	4629      	mov	r1, r5
  405034:	f002 fb04 	bl	407640 <__aeabi_ddiv>
  405038:	4602      	mov	r2, r0
  40503a:	460b      	mov	r3, r1
  40503c:	4650      	mov	r0, sl
  40503e:	4659      	mov	r1, fp
  405040:	f002 f822 	bl	407088 <__adddf3>
  405044:	4602      	mov	r2, r0
  405046:	460b      	mov	r3, r1
  405048:	4630      	mov	r0, r6
  40504a:	4649      	mov	r1, r9
  40504c:	f002 f81c 	bl	407088 <__adddf3>
  405050:	4602      	mov	r2, r0
  405052:	460b      	mov	r3, r1
  405054:	f002 f818 	bl	407088 <__adddf3>
  405058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40505c:	4a6b      	ldr	r2, [pc, #428]	; (40520c <__ieee754_acos+0x334>)
  40505e:	4293      	cmp	r3, r2
  405060:	dc0e      	bgt.n	405080 <__ieee754_acos+0x1a8>
  405062:	a15f      	add	r1, pc, #380	; (adr r1, 4051e0 <__ieee754_acos+0x308>)
  405064:	e9d1 0100 	ldrd	r0, r1, [r1]
  405068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40506c:	4602      	mov	r2, r0
  40506e:	460b      	mov	r3, r1
  405070:	f002 f808 	bl	407084 <__aeabi_dsub>
  405074:	4602      	mov	r2, r0
  405076:	460b      	mov	r3, r1
  405078:	f002 fae2 	bl	407640 <__aeabi_ddiv>
  40507c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405080:	4602      	mov	r2, r0
  405082:	460b      	mov	r3, r1
  405084:	f002 f9b2 	bl	4073ec <__aeabi_dmul>
  405088:	4606      	mov	r6, r0
  40508a:	460f      	mov	r7, r1
  40508c:	a340      	add	r3, pc, #256	; (adr r3, 405190 <__ieee754_acos+0x2b8>)
  40508e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405092:	f002 f9ab 	bl	4073ec <__aeabi_dmul>
  405096:	a340      	add	r3, pc, #256	; (adr r3, 405198 <__ieee754_acos+0x2c0>)
  405098:	e9d3 2300 	ldrd	r2, r3, [r3]
  40509c:	f001 fff4 	bl	407088 <__adddf3>
  4050a0:	4632      	mov	r2, r6
  4050a2:	463b      	mov	r3, r7
  4050a4:	f002 f9a2 	bl	4073ec <__aeabi_dmul>
  4050a8:	a33d      	add	r3, pc, #244	; (adr r3, 4051a0 <__ieee754_acos+0x2c8>)
  4050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050ae:	f001 ffe9 	bl	407084 <__aeabi_dsub>
  4050b2:	4632      	mov	r2, r6
  4050b4:	463b      	mov	r3, r7
  4050b6:	f002 f999 	bl	4073ec <__aeabi_dmul>
  4050ba:	a33b      	add	r3, pc, #236	; (adr r3, 4051a8 <__ieee754_acos+0x2d0>)
  4050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050c0:	f001 ffe2 	bl	407088 <__adddf3>
  4050c4:	4632      	mov	r2, r6
  4050c6:	463b      	mov	r3, r7
  4050c8:	f002 f990 	bl	4073ec <__aeabi_dmul>
  4050cc:	a338      	add	r3, pc, #224	; (adr r3, 4051b0 <__ieee754_acos+0x2d8>)
  4050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050d2:	f001 ffd7 	bl	407084 <__aeabi_dsub>
  4050d6:	4632      	mov	r2, r6
  4050d8:	463b      	mov	r3, r7
  4050da:	f002 f987 	bl	4073ec <__aeabi_dmul>
  4050de:	a336      	add	r3, pc, #216	; (adr r3, 4051b8 <__ieee754_acos+0x2e0>)
  4050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050e4:	f001 ffd0 	bl	407088 <__adddf3>
  4050e8:	4632      	mov	r2, r6
  4050ea:	463b      	mov	r3, r7
  4050ec:	f002 f97e 	bl	4073ec <__aeabi_dmul>
  4050f0:	4680      	mov	r8, r0
  4050f2:	4689      	mov	r9, r1
  4050f4:	4630      	mov	r0, r6
  4050f6:	4639      	mov	r1, r7
  4050f8:	a331      	add	r3, pc, #196	; (adr r3, 4051c0 <__ieee754_acos+0x2e8>)
  4050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050fe:	f002 f975 	bl	4073ec <__aeabi_dmul>
  405102:	a331      	add	r3, pc, #196	; (adr r3, 4051c8 <__ieee754_acos+0x2f0>)
  405104:	e9d3 2300 	ldrd	r2, r3, [r3]
  405108:	f001 ffbc 	bl	407084 <__aeabi_dsub>
  40510c:	4632      	mov	r2, r6
  40510e:	463b      	mov	r3, r7
  405110:	f002 f96c 	bl	4073ec <__aeabi_dmul>
  405114:	a32e      	add	r3, pc, #184	; (adr r3, 4051d0 <__ieee754_acos+0x2f8>)
  405116:	e9d3 2300 	ldrd	r2, r3, [r3]
  40511a:	f001 ffb5 	bl	407088 <__adddf3>
  40511e:	4632      	mov	r2, r6
  405120:	463b      	mov	r3, r7
  405122:	f002 f963 	bl	4073ec <__aeabi_dmul>
  405126:	a32c      	add	r3, pc, #176	; (adr r3, 4051d8 <__ieee754_acos+0x300>)
  405128:	e9d3 2300 	ldrd	r2, r3, [r3]
  40512c:	f001 ffaa 	bl	407084 <__aeabi_dsub>
  405130:	4632      	mov	r2, r6
  405132:	463b      	mov	r3, r7
  405134:	f002 f95a 	bl	4073ec <__aeabi_dmul>
  405138:	2200      	movs	r2, #0
  40513a:	4b32      	ldr	r3, [pc, #200]	; (405204 <__ieee754_acos+0x32c>)
  40513c:	f001 ffa4 	bl	407088 <__adddf3>
  405140:	4602      	mov	r2, r0
  405142:	460b      	mov	r3, r1
  405144:	4640      	mov	r0, r8
  405146:	4649      	mov	r1, r9
  405148:	f002 fa7a 	bl	407640 <__aeabi_ddiv>
  40514c:	4602      	mov	r2, r0
  40514e:	460b      	mov	r3, r1
  405150:	4628      	mov	r0, r5
  405152:	4621      	mov	r1, r4
  405154:	f002 f94a 	bl	4073ec <__aeabi_dmul>
  405158:	4602      	mov	r2, r0
  40515a:	460b      	mov	r3, r1
  40515c:	a122      	add	r1, pc, #136	; (adr r1, 4051e8 <__ieee754_acos+0x310>)
  40515e:	e9d1 0100 	ldrd	r0, r1, [r1]
  405162:	f001 ff8f 	bl	407084 <__aeabi_dsub>
  405166:	4602      	mov	r2, r0
  405168:	460b      	mov	r3, r1
  40516a:	4628      	mov	r0, r5
  40516c:	4621      	mov	r1, r4
  40516e:	f001 ff89 	bl	407084 <__aeabi_dsub>
  405172:	4602      	mov	r2, r0
  405174:	460b      	mov	r3, r1
  405176:	a11a      	add	r1, pc, #104	; (adr r1, 4051e0 <__ieee754_acos+0x308>)
  405178:	e9d1 0100 	ldrd	r0, r1, [r1]
  40517c:	f001 ff82 	bl	407084 <__aeabi_dsub>
  405180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405184:	a11a      	add	r1, pc, #104	; (adr r1, 4051f0 <__ieee754_acos+0x318>)
  405186:	e9d1 0100 	ldrd	r0, r1, [r1]
  40518a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40518e:	bf00      	nop
  405190:	0dfdf709 	.word	0x0dfdf709
  405194:	3f023de1 	.word	0x3f023de1
  405198:	7501b288 	.word	0x7501b288
  40519c:	3f49efe0 	.word	0x3f49efe0
  4051a0:	b5688f3b 	.word	0xb5688f3b
  4051a4:	3fa48228 	.word	0x3fa48228
  4051a8:	0e884455 	.word	0x0e884455
  4051ac:	3fc9c155 	.word	0x3fc9c155
  4051b0:	03eb6f7d 	.word	0x03eb6f7d
  4051b4:	3fd4d612 	.word	0x3fd4d612
  4051b8:	55555555 	.word	0x55555555
  4051bc:	3fc55555 	.word	0x3fc55555
  4051c0:	b12e9282 	.word	0xb12e9282
  4051c4:	3fb3b8c5 	.word	0x3fb3b8c5
  4051c8:	1b8d0159 	.word	0x1b8d0159
  4051cc:	3fe6066c 	.word	0x3fe6066c
  4051d0:	9c598ac8 	.word	0x9c598ac8
  4051d4:	40002ae5 	.word	0x40002ae5
  4051d8:	1c8a2d4b 	.word	0x1c8a2d4b
  4051dc:	40033a27 	.word	0x40033a27
  4051e0:	54442d18 	.word	0x54442d18
  4051e4:	3ff921fb 	.word	0x3ff921fb
  4051e8:	33145c07 	.word	0x33145c07
  4051ec:	3c91a626 	.word	0x3c91a626
  4051f0:	54442d18 	.word	0x54442d18
  4051f4:	400921fb 	.word	0x400921fb
  4051f8:	3fefffff 	.word	0x3fefffff
  4051fc:	c0100000 	.word	0xc0100000
  405200:	3fdfffff 	.word	0x3fdfffff
  405204:	3ff00000 	.word	0x3ff00000
  405208:	3fe00000 	.word	0x3fe00000
  40520c:	3c600000 	.word	0x3c600000
  405210:	2200      	movs	r2, #0
  405212:	4b5d      	ldr	r3, [pc, #372]	; (405388 <__ieee754_acos+0x4b0>)
  405214:	f001 ff38 	bl	407088 <__adddf3>
  405218:	2200      	movs	r2, #0
  40521a:	4b5c      	ldr	r3, [pc, #368]	; (40538c <__ieee754_acos+0x4b4>)
  40521c:	f002 f8e6 	bl	4073ec <__aeabi_dmul>
  405220:	4604      	mov	r4, r0
  405222:	460d      	mov	r5, r1
  405224:	a340      	add	r3, pc, #256	; (adr r3, 405328 <__ieee754_acos+0x450>)
  405226:	e9d3 2300 	ldrd	r2, r3, [r3]
  40522a:	f002 f8df 	bl	4073ec <__aeabi_dmul>
  40522e:	a340      	add	r3, pc, #256	; (adr r3, 405330 <__ieee754_acos+0x458>)
  405230:	e9d3 2300 	ldrd	r2, r3, [r3]
  405234:	f001 ff28 	bl	407088 <__adddf3>
  405238:	4622      	mov	r2, r4
  40523a:	462b      	mov	r3, r5
  40523c:	f002 f8d6 	bl	4073ec <__aeabi_dmul>
  405240:	a33d      	add	r3, pc, #244	; (adr r3, 405338 <__ieee754_acos+0x460>)
  405242:	e9d3 2300 	ldrd	r2, r3, [r3]
  405246:	f001 ff1d 	bl	407084 <__aeabi_dsub>
  40524a:	4622      	mov	r2, r4
  40524c:	462b      	mov	r3, r5
  40524e:	f002 f8cd 	bl	4073ec <__aeabi_dmul>
  405252:	a33b      	add	r3, pc, #236	; (adr r3, 405340 <__ieee754_acos+0x468>)
  405254:	e9d3 2300 	ldrd	r2, r3, [r3]
  405258:	f001 ff16 	bl	407088 <__adddf3>
  40525c:	4622      	mov	r2, r4
  40525e:	462b      	mov	r3, r5
  405260:	f002 f8c4 	bl	4073ec <__aeabi_dmul>
  405264:	a338      	add	r3, pc, #224	; (adr r3, 405348 <__ieee754_acos+0x470>)
  405266:	e9d3 2300 	ldrd	r2, r3, [r3]
  40526a:	f001 ff0b 	bl	407084 <__aeabi_dsub>
  40526e:	4622      	mov	r2, r4
  405270:	462b      	mov	r3, r5
  405272:	f002 f8bb 	bl	4073ec <__aeabi_dmul>
  405276:	a336      	add	r3, pc, #216	; (adr r3, 405350 <__ieee754_acos+0x478>)
  405278:	e9d3 2300 	ldrd	r2, r3, [r3]
  40527c:	f001 ff04 	bl	407088 <__adddf3>
  405280:	4622      	mov	r2, r4
  405282:	462b      	mov	r3, r5
  405284:	f002 f8b2 	bl	4073ec <__aeabi_dmul>
  405288:	4680      	mov	r8, r0
  40528a:	4689      	mov	r9, r1
  40528c:	4620      	mov	r0, r4
  40528e:	4629      	mov	r1, r5
  405290:	f000 fda4 	bl	405ddc <__ieee754_sqrt>
  405294:	4606      	mov	r6, r0
  405296:	460f      	mov	r7, r1
  405298:	4620      	mov	r0, r4
  40529a:	4629      	mov	r1, r5
  40529c:	a32e      	add	r3, pc, #184	; (adr r3, 405358 <__ieee754_acos+0x480>)
  40529e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052a2:	f002 f8a3 	bl	4073ec <__aeabi_dmul>
  4052a6:	a32e      	add	r3, pc, #184	; (adr r3, 405360 <__ieee754_acos+0x488>)
  4052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052ac:	f001 feea 	bl	407084 <__aeabi_dsub>
  4052b0:	4622      	mov	r2, r4
  4052b2:	462b      	mov	r3, r5
  4052b4:	f002 f89a 	bl	4073ec <__aeabi_dmul>
  4052b8:	a32b      	add	r3, pc, #172	; (adr r3, 405368 <__ieee754_acos+0x490>)
  4052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052be:	f001 fee3 	bl	407088 <__adddf3>
  4052c2:	4622      	mov	r2, r4
  4052c4:	462b      	mov	r3, r5
  4052c6:	f002 f891 	bl	4073ec <__aeabi_dmul>
  4052ca:	a329      	add	r3, pc, #164	; (adr r3, 405370 <__ieee754_acos+0x498>)
  4052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052d0:	f001 fed8 	bl	407084 <__aeabi_dsub>
  4052d4:	4622      	mov	r2, r4
  4052d6:	462b      	mov	r3, r5
  4052d8:	f002 f888 	bl	4073ec <__aeabi_dmul>
  4052dc:	2200      	movs	r2, #0
  4052de:	4b2a      	ldr	r3, [pc, #168]	; (405388 <__ieee754_acos+0x4b0>)
  4052e0:	f001 fed2 	bl	407088 <__adddf3>
  4052e4:	4602      	mov	r2, r0
  4052e6:	460b      	mov	r3, r1
  4052e8:	4640      	mov	r0, r8
  4052ea:	4649      	mov	r1, r9
  4052ec:	f002 f9a8 	bl	407640 <__aeabi_ddiv>
  4052f0:	4632      	mov	r2, r6
  4052f2:	463b      	mov	r3, r7
  4052f4:	f002 f87a 	bl	4073ec <__aeabi_dmul>
  4052f8:	a31f      	add	r3, pc, #124	; (adr r3, 405378 <__ieee754_acos+0x4a0>)
  4052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052fe:	f001 fec1 	bl	407084 <__aeabi_dsub>
  405302:	4602      	mov	r2, r0
  405304:	460b      	mov	r3, r1
  405306:	4630      	mov	r0, r6
  405308:	4639      	mov	r1, r7
  40530a:	f001 febd 	bl	407088 <__adddf3>
  40530e:	4602      	mov	r2, r0
  405310:	460b      	mov	r3, r1
  405312:	f001 feb9 	bl	407088 <__adddf3>
  405316:	4602      	mov	r2, r0
  405318:	460b      	mov	r3, r1
  40531a:	a119      	add	r1, pc, #100	; (adr r1, 405380 <__ieee754_acos+0x4a8>)
  40531c:	e9d1 0100 	ldrd	r0, r1, [r1]
  405320:	f001 feb0 	bl	407084 <__aeabi_dsub>
  405324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405328:	0dfdf709 	.word	0x0dfdf709
  40532c:	3f023de1 	.word	0x3f023de1
  405330:	7501b288 	.word	0x7501b288
  405334:	3f49efe0 	.word	0x3f49efe0
  405338:	b5688f3b 	.word	0xb5688f3b
  40533c:	3fa48228 	.word	0x3fa48228
  405340:	0e884455 	.word	0x0e884455
  405344:	3fc9c155 	.word	0x3fc9c155
  405348:	03eb6f7d 	.word	0x03eb6f7d
  40534c:	3fd4d612 	.word	0x3fd4d612
  405350:	55555555 	.word	0x55555555
  405354:	3fc55555 	.word	0x3fc55555
  405358:	b12e9282 	.word	0xb12e9282
  40535c:	3fb3b8c5 	.word	0x3fb3b8c5
  405360:	1b8d0159 	.word	0x1b8d0159
  405364:	3fe6066c 	.word	0x3fe6066c
  405368:	9c598ac8 	.word	0x9c598ac8
  40536c:	40002ae5 	.word	0x40002ae5
  405370:	1c8a2d4b 	.word	0x1c8a2d4b
  405374:	40033a27 	.word	0x40033a27
  405378:	33145c07 	.word	0x33145c07
  40537c:	3c91a626 	.word	0x3c91a626
  405380:	54442d18 	.word	0x54442d18
  405384:	400921fb 	.word	0x400921fb
  405388:	3ff00000 	.word	0x3ff00000
  40538c:	3fe00000 	.word	0x3fe00000

00405390 <__ieee754_asin>:
  405390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405394:	4bbe      	ldr	r3, [pc, #760]	; (405690 <__ieee754_asin+0x300>)
  405396:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40539a:	b086      	sub	sp, #24
  40539c:	460d      	mov	r5, r1
  40539e:	429e      	cmp	r6, r3
  4053a0:	4604      	mov	r4, r0
  4053a2:	468a      	mov	sl, r1
  4053a4:	dd11      	ble.n	4053ca <__ieee754_asin+0x3a>
  4053a6:	4abb      	ldr	r2, [pc, #748]	; (405694 <__ieee754_asin+0x304>)
  4053a8:	4603      	mov	r3, r0
  4053aa:	4432      	add	r2, r6
  4053ac:	4313      	orrs	r3, r2
  4053ae:	d022      	beq.n	4053f6 <__ieee754_asin+0x66>
  4053b0:	4602      	mov	r2, r0
  4053b2:	460b      	mov	r3, r1
  4053b4:	f001 fe66 	bl	407084 <__aeabi_dsub>
  4053b8:	4602      	mov	r2, r0
  4053ba:	460b      	mov	r3, r1
  4053bc:	f002 f940 	bl	407640 <__aeabi_ddiv>
  4053c0:	4604      	mov	r4, r0
  4053c2:	4620      	mov	r0, r4
  4053c4:	b006      	add	sp, #24
  4053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053ca:	4bb3      	ldr	r3, [pc, #716]	; (405698 <__ieee754_asin+0x308>)
  4053cc:	429e      	cmp	r6, r3
  4053ce:	dc2b      	bgt.n	405428 <__ieee754_asin+0x98>
  4053d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4053d4:	f280 8168 	bge.w	4056a8 <__ieee754_asin+0x318>
  4053d8:	a391      	add	r3, pc, #580	; (adr r3, 405620 <__ieee754_asin+0x290>)
  4053da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053de:	f001 fe53 	bl	407088 <__adddf3>
  4053e2:	2200      	movs	r2, #0
  4053e4:	4bad      	ldr	r3, [pc, #692]	; (40569c <__ieee754_asin+0x30c>)
  4053e6:	f002 fa91 	bl	40790c <__aeabi_dcmpgt>
  4053ea:	b1e8      	cbz	r0, 405428 <__ieee754_asin+0x98>
  4053ec:	4629      	mov	r1, r5
  4053ee:	4620      	mov	r0, r4
  4053f0:	b006      	add	sp, #24
  4053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053f6:	a38c      	add	r3, pc, #560	; (adr r3, 405628 <__ieee754_asin+0x298>)
  4053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4053fc:	f001 fff6 	bl	4073ec <__aeabi_dmul>
  405400:	4606      	mov	r6, r0
  405402:	460f      	mov	r7, r1
  405404:	4620      	mov	r0, r4
  405406:	4629      	mov	r1, r5
  405408:	a389      	add	r3, pc, #548	; (adr r3, 405630 <__ieee754_asin+0x2a0>)
  40540a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40540e:	f001 ffed 	bl	4073ec <__aeabi_dmul>
  405412:	4602      	mov	r2, r0
  405414:	460b      	mov	r3, r1
  405416:	4630      	mov	r0, r6
  405418:	4639      	mov	r1, r7
  40541a:	f001 fe35 	bl	407088 <__adddf3>
  40541e:	4604      	mov	r4, r0
  405420:	4620      	mov	r0, r4
  405422:	b006      	add	sp, #24
  405424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405428:	4620      	mov	r0, r4
  40542a:	4629      	mov	r1, r5
  40542c:	f001 fce2 	bl	406df4 <fabs>
  405430:	4602      	mov	r2, r0
  405432:	460b      	mov	r3, r1
  405434:	2000      	movs	r0, #0
  405436:	4999      	ldr	r1, [pc, #612]	; (40569c <__ieee754_asin+0x30c>)
  405438:	f001 fe24 	bl	407084 <__aeabi_dsub>
  40543c:	2200      	movs	r2, #0
  40543e:	4b98      	ldr	r3, [pc, #608]	; (4056a0 <__ieee754_asin+0x310>)
  405440:	f001 ffd4 	bl	4073ec <__aeabi_dmul>
  405444:	4604      	mov	r4, r0
  405446:	460d      	mov	r5, r1
  405448:	a37b      	add	r3, pc, #492	; (adr r3, 405638 <__ieee754_asin+0x2a8>)
  40544a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40544e:	f001 ffcd 	bl	4073ec <__aeabi_dmul>
  405452:	a37b      	add	r3, pc, #492	; (adr r3, 405640 <__ieee754_asin+0x2b0>)
  405454:	e9d3 2300 	ldrd	r2, r3, [r3]
  405458:	f001 fe16 	bl	407088 <__adddf3>
  40545c:	4622      	mov	r2, r4
  40545e:	462b      	mov	r3, r5
  405460:	f001 ffc4 	bl	4073ec <__aeabi_dmul>
  405464:	a378      	add	r3, pc, #480	; (adr r3, 405648 <__ieee754_asin+0x2b8>)
  405466:	e9d3 2300 	ldrd	r2, r3, [r3]
  40546a:	f001 fe0b 	bl	407084 <__aeabi_dsub>
  40546e:	4622      	mov	r2, r4
  405470:	462b      	mov	r3, r5
  405472:	f001 ffbb 	bl	4073ec <__aeabi_dmul>
  405476:	a376      	add	r3, pc, #472	; (adr r3, 405650 <__ieee754_asin+0x2c0>)
  405478:	e9d3 2300 	ldrd	r2, r3, [r3]
  40547c:	f001 fe04 	bl	407088 <__adddf3>
  405480:	4622      	mov	r2, r4
  405482:	462b      	mov	r3, r5
  405484:	f001 ffb2 	bl	4073ec <__aeabi_dmul>
  405488:	a373      	add	r3, pc, #460	; (adr r3, 405658 <__ieee754_asin+0x2c8>)
  40548a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40548e:	f001 fdf9 	bl	407084 <__aeabi_dsub>
  405492:	4622      	mov	r2, r4
  405494:	462b      	mov	r3, r5
  405496:	f001 ffa9 	bl	4073ec <__aeabi_dmul>
  40549a:	a371      	add	r3, pc, #452	; (adr r3, 405660 <__ieee754_asin+0x2d0>)
  40549c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054a0:	f001 fdf2 	bl	407088 <__adddf3>
  4054a4:	4622      	mov	r2, r4
  4054a6:	462b      	mov	r3, r5
  4054a8:	f001 ffa0 	bl	4073ec <__aeabi_dmul>
  4054ac:	a36e      	add	r3, pc, #440	; (adr r3, 405668 <__ieee754_asin+0x2d8>)
  4054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054b2:	e9cd 0100 	strd	r0, r1, [sp]
  4054b6:	4620      	mov	r0, r4
  4054b8:	4629      	mov	r1, r5
  4054ba:	f001 ff97 	bl	4073ec <__aeabi_dmul>
  4054be:	a36c      	add	r3, pc, #432	; (adr r3, 405670 <__ieee754_asin+0x2e0>)
  4054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054c4:	f001 fdde 	bl	407084 <__aeabi_dsub>
  4054c8:	4622      	mov	r2, r4
  4054ca:	462b      	mov	r3, r5
  4054cc:	f001 ff8e 	bl	4073ec <__aeabi_dmul>
  4054d0:	a369      	add	r3, pc, #420	; (adr r3, 405678 <__ieee754_asin+0x2e8>)
  4054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054d6:	f001 fdd7 	bl	407088 <__adddf3>
  4054da:	4622      	mov	r2, r4
  4054dc:	462b      	mov	r3, r5
  4054de:	f001 ff85 	bl	4073ec <__aeabi_dmul>
  4054e2:	a367      	add	r3, pc, #412	; (adr r3, 405680 <__ieee754_asin+0x2f0>)
  4054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4054e8:	f001 fdcc 	bl	407084 <__aeabi_dsub>
  4054ec:	4622      	mov	r2, r4
  4054ee:	462b      	mov	r3, r5
  4054f0:	f001 ff7c 	bl	4073ec <__aeabi_dmul>
  4054f4:	4b69      	ldr	r3, [pc, #420]	; (40569c <__ieee754_asin+0x30c>)
  4054f6:	2200      	movs	r2, #0
  4054f8:	f001 fdc6 	bl	407088 <__adddf3>
  4054fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405500:	4620      	mov	r0, r4
  405502:	4629      	mov	r1, r5
  405504:	f000 fc6a 	bl	405ddc <__ieee754_sqrt>
  405508:	4b66      	ldr	r3, [pc, #408]	; (4056a4 <__ieee754_asin+0x314>)
  40550a:	4680      	mov	r8, r0
  40550c:	4689      	mov	r9, r1
  40550e:	429e      	cmp	r6, r3
  405510:	dc64      	bgt.n	4055dc <__ieee754_asin+0x24c>
  405512:	4602      	mov	r2, r0
  405514:	460b      	mov	r3, r1
  405516:	2600      	movs	r6, #0
  405518:	460f      	mov	r7, r1
  40551a:	f001 fdb5 	bl	407088 <__adddf3>
  40551e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405522:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405526:	e9dd 0100 	ldrd	r0, r1, [sp]
  40552a:	f002 f889 	bl	407640 <__aeabi_ddiv>
  40552e:	4602      	mov	r2, r0
  405530:	460b      	mov	r3, r1
  405532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405536:	f001 ff59 	bl	4073ec <__aeabi_dmul>
  40553a:	4632      	mov	r2, r6
  40553c:	464b      	mov	r3, r9
  40553e:	e9cd 0100 	strd	r0, r1, [sp]
  405542:	4630      	mov	r0, r6
  405544:	4649      	mov	r1, r9
  405546:	f001 ff51 	bl	4073ec <__aeabi_dmul>
  40554a:	4602      	mov	r2, r0
  40554c:	460b      	mov	r3, r1
  40554e:	4620      	mov	r0, r4
  405550:	4629      	mov	r1, r5
  405552:	f001 fd97 	bl	407084 <__aeabi_dsub>
  405556:	4604      	mov	r4, r0
  405558:	460d      	mov	r5, r1
  40555a:	4632      	mov	r2, r6
  40555c:	464b      	mov	r3, r9
  40555e:	4640      	mov	r0, r8
  405560:	4649      	mov	r1, r9
  405562:	f001 fd91 	bl	407088 <__adddf3>
  405566:	4602      	mov	r2, r0
  405568:	460b      	mov	r3, r1
  40556a:	4620      	mov	r0, r4
  40556c:	4629      	mov	r1, r5
  40556e:	f002 f867 	bl	407640 <__aeabi_ddiv>
  405572:	4602      	mov	r2, r0
  405574:	460b      	mov	r3, r1
  405576:	f001 fd87 	bl	407088 <__adddf3>
  40557a:	4602      	mov	r2, r0
  40557c:	460b      	mov	r3, r1
  40557e:	a12c      	add	r1, pc, #176	; (adr r1, 405630 <__ieee754_asin+0x2a0>)
  405580:	e9d1 0100 	ldrd	r0, r1, [r1]
  405584:	f001 fd7e 	bl	407084 <__aeabi_dsub>
  405588:	4602      	mov	r2, r0
  40558a:	460b      	mov	r3, r1
  40558c:	e9dd 0100 	ldrd	r0, r1, [sp]
  405590:	f001 fd78 	bl	407084 <__aeabi_dsub>
  405594:	4632      	mov	r2, r6
  405596:	4604      	mov	r4, r0
  405598:	460d      	mov	r5, r1
  40559a:	463b      	mov	r3, r7
  40559c:	4630      	mov	r0, r6
  40559e:	4649      	mov	r1, r9
  4055a0:	f001 fd72 	bl	407088 <__adddf3>
  4055a4:	4602      	mov	r2, r0
  4055a6:	460b      	mov	r3, r1
  4055a8:	a137      	add	r1, pc, #220	; (adr r1, 405688 <__ieee754_asin+0x2f8>)
  4055aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4055ae:	f001 fd69 	bl	407084 <__aeabi_dsub>
  4055b2:	4602      	mov	r2, r0
  4055b4:	460b      	mov	r3, r1
  4055b6:	4620      	mov	r0, r4
  4055b8:	4629      	mov	r1, r5
  4055ba:	f001 fd63 	bl	407084 <__aeabi_dsub>
  4055be:	4602      	mov	r2, r0
  4055c0:	460b      	mov	r3, r1
  4055c2:	a131      	add	r1, pc, #196	; (adr r1, 405688 <__ieee754_asin+0x2f8>)
  4055c4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4055c8:	f001 fd5c 	bl	407084 <__aeabi_dsub>
  4055cc:	4604      	mov	r4, r0
  4055ce:	f1ba 0f00 	cmp.w	sl, #0
  4055d2:	f73f aef6 	bgt.w	4053c2 <__ieee754_asin+0x32>
  4055d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4055da:	e6f2      	b.n	4053c2 <__ieee754_asin+0x32>
  4055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4055e0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4055e4:	f002 f82c 	bl	407640 <__aeabi_ddiv>
  4055e8:	4602      	mov	r2, r0
  4055ea:	460b      	mov	r3, r1
  4055ec:	4640      	mov	r0, r8
  4055ee:	4649      	mov	r1, r9
  4055f0:	f001 fefc 	bl	4073ec <__aeabi_dmul>
  4055f4:	4642      	mov	r2, r8
  4055f6:	464b      	mov	r3, r9
  4055f8:	f001 fd46 	bl	407088 <__adddf3>
  4055fc:	4602      	mov	r2, r0
  4055fe:	460b      	mov	r3, r1
  405600:	f001 fd42 	bl	407088 <__adddf3>
  405604:	a30a      	add	r3, pc, #40	; (adr r3, 405630 <__ieee754_asin+0x2a0>)
  405606:	e9d3 2300 	ldrd	r2, r3, [r3]
  40560a:	f001 fd3b 	bl	407084 <__aeabi_dsub>
  40560e:	4602      	mov	r2, r0
  405610:	460b      	mov	r3, r1
  405612:	a105      	add	r1, pc, #20	; (adr r1, 405628 <__ieee754_asin+0x298>)
  405614:	e9d1 0100 	ldrd	r0, r1, [r1]
  405618:	f001 fd34 	bl	407084 <__aeabi_dsub>
  40561c:	4604      	mov	r4, r0
  40561e:	e7d6      	b.n	4055ce <__ieee754_asin+0x23e>
  405620:	8800759c 	.word	0x8800759c
  405624:	7e37e43c 	.word	0x7e37e43c
  405628:	54442d18 	.word	0x54442d18
  40562c:	3ff921fb 	.word	0x3ff921fb
  405630:	33145c07 	.word	0x33145c07
  405634:	3c91a626 	.word	0x3c91a626
  405638:	0dfdf709 	.word	0x0dfdf709
  40563c:	3f023de1 	.word	0x3f023de1
  405640:	7501b288 	.word	0x7501b288
  405644:	3f49efe0 	.word	0x3f49efe0
  405648:	b5688f3b 	.word	0xb5688f3b
  40564c:	3fa48228 	.word	0x3fa48228
  405650:	0e884455 	.word	0x0e884455
  405654:	3fc9c155 	.word	0x3fc9c155
  405658:	03eb6f7d 	.word	0x03eb6f7d
  40565c:	3fd4d612 	.word	0x3fd4d612
  405660:	55555555 	.word	0x55555555
  405664:	3fc55555 	.word	0x3fc55555
  405668:	b12e9282 	.word	0xb12e9282
  40566c:	3fb3b8c5 	.word	0x3fb3b8c5
  405670:	1b8d0159 	.word	0x1b8d0159
  405674:	3fe6066c 	.word	0x3fe6066c
  405678:	9c598ac8 	.word	0x9c598ac8
  40567c:	40002ae5 	.word	0x40002ae5
  405680:	1c8a2d4b 	.word	0x1c8a2d4b
  405684:	40033a27 	.word	0x40033a27
  405688:	54442d18 	.word	0x54442d18
  40568c:	3fe921fb 	.word	0x3fe921fb
  405690:	3fefffff 	.word	0x3fefffff
  405694:	c0100000 	.word	0xc0100000
  405698:	3fdfffff 	.word	0x3fdfffff
  40569c:	3ff00000 	.word	0x3ff00000
  4056a0:	3fe00000 	.word	0x3fe00000
  4056a4:	3fef3332 	.word	0x3fef3332
  4056a8:	4602      	mov	r2, r0
  4056aa:	460b      	mov	r3, r1
  4056ac:	f001 fe9e 	bl	4073ec <__aeabi_dmul>
  4056b0:	4606      	mov	r6, r0
  4056b2:	460f      	mov	r7, r1
  4056b4:	a338      	add	r3, pc, #224	; (adr r3, 405798 <__ieee754_asin+0x408>)
  4056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056ba:	f001 fe97 	bl	4073ec <__aeabi_dmul>
  4056be:	a338      	add	r3, pc, #224	; (adr r3, 4057a0 <__ieee754_asin+0x410>)
  4056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056c4:	f001 fce0 	bl	407088 <__adddf3>
  4056c8:	4632      	mov	r2, r6
  4056ca:	463b      	mov	r3, r7
  4056cc:	f001 fe8e 	bl	4073ec <__aeabi_dmul>
  4056d0:	a335      	add	r3, pc, #212	; (adr r3, 4057a8 <__ieee754_asin+0x418>)
  4056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056d6:	f001 fcd5 	bl	407084 <__aeabi_dsub>
  4056da:	4632      	mov	r2, r6
  4056dc:	463b      	mov	r3, r7
  4056de:	f001 fe85 	bl	4073ec <__aeabi_dmul>
  4056e2:	a333      	add	r3, pc, #204	; (adr r3, 4057b0 <__ieee754_asin+0x420>)
  4056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056e8:	f001 fcce 	bl	407088 <__adddf3>
  4056ec:	4632      	mov	r2, r6
  4056ee:	463b      	mov	r3, r7
  4056f0:	f001 fe7c 	bl	4073ec <__aeabi_dmul>
  4056f4:	a330      	add	r3, pc, #192	; (adr r3, 4057b8 <__ieee754_asin+0x428>)
  4056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4056fa:	f001 fcc3 	bl	407084 <__aeabi_dsub>
  4056fe:	4632      	mov	r2, r6
  405700:	463b      	mov	r3, r7
  405702:	f001 fe73 	bl	4073ec <__aeabi_dmul>
  405706:	a32e      	add	r3, pc, #184	; (adr r3, 4057c0 <__ieee754_asin+0x430>)
  405708:	e9d3 2300 	ldrd	r2, r3, [r3]
  40570c:	f001 fcbc 	bl	407088 <__adddf3>
  405710:	4632      	mov	r2, r6
  405712:	463b      	mov	r3, r7
  405714:	f001 fe6a 	bl	4073ec <__aeabi_dmul>
  405718:	4680      	mov	r8, r0
  40571a:	4689      	mov	r9, r1
  40571c:	4630      	mov	r0, r6
  40571e:	4639      	mov	r1, r7
  405720:	a329      	add	r3, pc, #164	; (adr r3, 4057c8 <__ieee754_asin+0x438>)
  405722:	e9d3 2300 	ldrd	r2, r3, [r3]
  405726:	f001 fe61 	bl	4073ec <__aeabi_dmul>
  40572a:	a329      	add	r3, pc, #164	; (adr r3, 4057d0 <__ieee754_asin+0x440>)
  40572c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405730:	f001 fca8 	bl	407084 <__aeabi_dsub>
  405734:	4632      	mov	r2, r6
  405736:	463b      	mov	r3, r7
  405738:	f001 fe58 	bl	4073ec <__aeabi_dmul>
  40573c:	a326      	add	r3, pc, #152	; (adr r3, 4057d8 <__ieee754_asin+0x448>)
  40573e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405742:	f001 fca1 	bl	407088 <__adddf3>
  405746:	4632      	mov	r2, r6
  405748:	463b      	mov	r3, r7
  40574a:	f001 fe4f 	bl	4073ec <__aeabi_dmul>
  40574e:	a324      	add	r3, pc, #144	; (adr r3, 4057e0 <__ieee754_asin+0x450>)
  405750:	e9d3 2300 	ldrd	r2, r3, [r3]
  405754:	f001 fc96 	bl	407084 <__aeabi_dsub>
  405758:	4632      	mov	r2, r6
  40575a:	463b      	mov	r3, r7
  40575c:	f001 fe46 	bl	4073ec <__aeabi_dmul>
  405760:	2200      	movs	r2, #0
  405762:	4b21      	ldr	r3, [pc, #132]	; (4057e8 <__ieee754_asin+0x458>)
  405764:	f001 fc90 	bl	407088 <__adddf3>
  405768:	4602      	mov	r2, r0
  40576a:	460b      	mov	r3, r1
  40576c:	4640      	mov	r0, r8
  40576e:	4649      	mov	r1, r9
  405770:	f001 ff66 	bl	407640 <__aeabi_ddiv>
  405774:	4602      	mov	r2, r0
  405776:	460b      	mov	r3, r1
  405778:	4620      	mov	r0, r4
  40577a:	4629      	mov	r1, r5
  40577c:	f001 fe36 	bl	4073ec <__aeabi_dmul>
  405780:	4622      	mov	r2, r4
  405782:	462b      	mov	r3, r5
  405784:	f001 fc80 	bl	407088 <__adddf3>
  405788:	4604      	mov	r4, r0
  40578a:	4620      	mov	r0, r4
  40578c:	b006      	add	sp, #24
  40578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405792:	bf00      	nop
  405794:	f3af 8000 	nop.w
  405798:	0dfdf709 	.word	0x0dfdf709
  40579c:	3f023de1 	.word	0x3f023de1
  4057a0:	7501b288 	.word	0x7501b288
  4057a4:	3f49efe0 	.word	0x3f49efe0
  4057a8:	b5688f3b 	.word	0xb5688f3b
  4057ac:	3fa48228 	.word	0x3fa48228
  4057b0:	0e884455 	.word	0x0e884455
  4057b4:	3fc9c155 	.word	0x3fc9c155
  4057b8:	03eb6f7d 	.word	0x03eb6f7d
  4057bc:	3fd4d612 	.word	0x3fd4d612
  4057c0:	55555555 	.word	0x55555555
  4057c4:	3fc55555 	.word	0x3fc55555
  4057c8:	b12e9282 	.word	0xb12e9282
  4057cc:	3fb3b8c5 	.word	0x3fb3b8c5
  4057d0:	1b8d0159 	.word	0x1b8d0159
  4057d4:	3fe6066c 	.word	0x3fe6066c
  4057d8:	9c598ac8 	.word	0x9c598ac8
  4057dc:	40002ae5 	.word	0x40002ae5
  4057e0:	1c8a2d4b 	.word	0x1c8a2d4b
  4057e4:	40033a27 	.word	0x40033a27
  4057e8:	3ff00000 	.word	0x3ff00000
  4057ec:	00000000 	.word	0x00000000

004057f0 <__ieee754_atan2>:
  4057f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057f4:	4254      	negs	r4, r2
  4057f6:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
  4057fa:	f8df a178 	ldr.w	sl, [pc, #376]	; 405974 <__ieee754_atan2+0x184>
  4057fe:	4606      	mov	r6, r0
  405800:	4314      	orrs	r4, r2
  405802:	460d      	mov	r5, r1
  405804:	4617      	mov	r7, r2
  405806:	469e      	mov	lr, r3
  405808:	ea48 74d4 	orr.w	r4, r8, r4, lsr #31
  40580c:	4554      	cmp	r4, sl
  40580e:	d83c      	bhi.n	40588a <__ieee754_atan2+0x9a>
  405810:	4244      	negs	r4, r0
  405812:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  405816:	4689      	mov	r9, r1
  405818:	4304      	orrs	r4, r0
  40581a:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  40581e:	4554      	cmp	r4, sl
  405820:	d833      	bhi.n	40588a <__ieee754_atan2+0x9a>
  405822:	4c53      	ldr	r4, [pc, #332]	; (405970 <__ieee754_atan2+0x180>)
  405824:	441c      	add	r4, r3
  405826:	4314      	orrs	r4, r2
  405828:	d046      	beq.n	4058b8 <__ieee754_atan2+0xc8>
  40582a:	179c      	asrs	r4, r3, #30
  40582c:	f004 0402 	and.w	r4, r4, #2
  405830:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  405834:	ea5b 0100 	orrs.w	r1, fp, r0
  405838:	d02f      	beq.n	40589a <__ieee754_atan2+0xaa>
  40583a:	ea58 0107 	orrs.w	r1, r8, r7
  40583e:	d035      	beq.n	4058ac <__ieee754_atan2+0xbc>
  405840:	494c      	ldr	r1, [pc, #304]	; (405974 <__ieee754_atan2+0x184>)
  405842:	4588      	cmp	r8, r1
  405844:	d045      	beq.n	4058d2 <__ieee754_atan2+0xe2>
  405846:	494b      	ldr	r1, [pc, #300]	; (405974 <__ieee754_atan2+0x184>)
  405848:	458b      	cmp	fp, r1
  40584a:	d02f      	beq.n	4058ac <__ieee754_atan2+0xbc>
  40584c:	ebc8 080b 	rsb	r8, r8, fp
  405850:	ea4f 5828 	mov.w	r8, r8, asr #20
  405854:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
  405858:	dc37      	bgt.n	4058ca <__ieee754_atan2+0xda>
  40585a:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
  40585e:	da60      	bge.n	405922 <__ieee754_atan2+0x132>
  405860:	f1be 0f00 	cmp.w	lr, #0
  405864:	da5d      	bge.n	405922 <__ieee754_atan2+0x132>
  405866:	2000      	movs	r0, #0
  405868:	2100      	movs	r1, #0
  40586a:	2c01      	cmp	r4, #1
  40586c:	d056      	beq.n	40591c <__ieee754_atan2+0x12c>
  40586e:	2c02      	cmp	r4, #2
  405870:	d047      	beq.n	405902 <__ieee754_atan2+0x112>
  405872:	b184      	cbz	r4, 405896 <__ieee754_atan2+0xa6>
  405874:	a338      	add	r3, pc, #224	; (adr r3, 405958 <__ieee754_atan2+0x168>)
  405876:	e9d3 2300 	ldrd	r2, r3, [r3]
  40587a:	f001 fc03 	bl	407084 <__aeabi_dsub>
  40587e:	a338      	add	r3, pc, #224	; (adr r3, 405960 <__ieee754_atan2+0x170>)
  405880:	e9d3 2300 	ldrd	r2, r3, [r3]
  405884:	f001 fbfe 	bl	407084 <__aeabi_dsub>
  405888:	e005      	b.n	405896 <__ieee754_atan2+0xa6>
  40588a:	4610      	mov	r0, r2
  40588c:	4619      	mov	r1, r3
  40588e:	4632      	mov	r2, r6
  405890:	462b      	mov	r3, r5
  405892:	f001 fbf9 	bl	407088 <__adddf3>
  405896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40589a:	2c03      	cmp	r4, #3
  40589c:	d8cd      	bhi.n	40583a <__ieee754_atan2+0x4a>
  40589e:	e8df f004 	tbb	[pc, r4]
  4058a2:	1212      	.short	0x1212
  4058a4:	0f02      	.short	0x0f02
  4058a6:	4834      	ldr	r0, [pc, #208]	; (405978 <__ieee754_atan2+0x188>)
  4058a8:	4934      	ldr	r1, [pc, #208]	; (40597c <__ieee754_atan2+0x18c>)
  4058aa:	e7f4      	b.n	405896 <__ieee754_atan2+0xa6>
  4058ac:	f1b9 0f00 	cmp.w	r9, #0
  4058b0:	4831      	ldr	r0, [pc, #196]	; (405978 <__ieee754_atan2+0x188>)
  4058b2:	db24      	blt.n	4058fe <__ieee754_atan2+0x10e>
  4058b4:	4932      	ldr	r1, [pc, #200]	; (405980 <__ieee754_atan2+0x190>)
  4058b6:	e7ee      	b.n	405896 <__ieee754_atan2+0xa6>
  4058b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058bc:	f001 b918 	b.w	406af0 <atan>
  4058c0:	482d      	ldr	r0, [pc, #180]	; (405978 <__ieee754_atan2+0x188>)
  4058c2:	4930      	ldr	r1, [pc, #192]	; (405984 <__ieee754_atan2+0x194>)
  4058c4:	e7e7      	b.n	405896 <__ieee754_atan2+0xa6>
  4058c6:	4629      	mov	r1, r5
  4058c8:	e7e5      	b.n	405896 <__ieee754_atan2+0xa6>
  4058ca:	a127      	add	r1, pc, #156	; (adr r1, 405968 <__ieee754_atan2+0x178>)
  4058cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4058d0:	e7cb      	b.n	40586a <__ieee754_atan2+0x7a>
  4058d2:	45c3      	cmp	fp, r8
  4058d4:	d02e      	beq.n	405934 <__ieee754_atan2+0x144>
  4058d6:	2c03      	cmp	r4, #3
  4058d8:	d8b5      	bhi.n	405846 <__ieee754_atan2+0x56>
  4058da:	a101      	add	r1, pc, #4	; (adr r1, 4058e0 <__ieee754_atan2+0xf0>)
  4058dc:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  4058e0:	004058f1 	.word	0x004058f1
  4058e4:	004058f7 	.word	0x004058f7
  4058e8:	004058a7 	.word	0x004058a7
  4058ec:	004058c1 	.word	0x004058c1
  4058f0:	2000      	movs	r0, #0
  4058f2:	4601      	mov	r1, r0
  4058f4:	e7cf      	b.n	405896 <__ieee754_atan2+0xa6>
  4058f6:	2000      	movs	r0, #0
  4058f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4058fc:	e7cb      	b.n	405896 <__ieee754_atan2+0xa6>
  4058fe:	4922      	ldr	r1, [pc, #136]	; (405988 <__ieee754_atan2+0x198>)
  405900:	e7c9      	b.n	405896 <__ieee754_atan2+0xa6>
  405902:	a315      	add	r3, pc, #84	; (adr r3, 405958 <__ieee754_atan2+0x168>)
  405904:	e9d3 2300 	ldrd	r2, r3, [r3]
  405908:	f001 fbbc 	bl	407084 <__aeabi_dsub>
  40590c:	4602      	mov	r2, r0
  40590e:	460b      	mov	r3, r1
  405910:	a113      	add	r1, pc, #76	; (adr r1, 405960 <__ieee754_atan2+0x170>)
  405912:	e9d1 0100 	ldrd	r0, r1, [r1]
  405916:	f001 fbb5 	bl	407084 <__aeabi_dsub>
  40591a:	e7bc      	b.n	405896 <__ieee754_atan2+0xa6>
  40591c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405920:	e7b9      	b.n	405896 <__ieee754_atan2+0xa6>
  405922:	4630      	mov	r0, r6
  405924:	4629      	mov	r1, r5
  405926:	f001 fe8b 	bl	407640 <__aeabi_ddiv>
  40592a:	f001 fa63 	bl	406df4 <fabs>
  40592e:	f001 f8df 	bl	406af0 <atan>
  405932:	e79a      	b.n	40586a <__ieee754_atan2+0x7a>
  405934:	2c03      	cmp	r4, #3
  405936:	d8b9      	bhi.n	4058ac <__ieee754_atan2+0xbc>
  405938:	e8df f004 	tbb	[pc, r4]
  40593c:	05080b02 	.word	0x05080b02
  405940:	480d      	ldr	r0, [pc, #52]	; (405978 <__ieee754_atan2+0x188>)
  405942:	4912      	ldr	r1, [pc, #72]	; (40598c <__ieee754_atan2+0x19c>)
  405944:	e7a7      	b.n	405896 <__ieee754_atan2+0xa6>
  405946:	4812      	ldr	r0, [pc, #72]	; (405990 <__ieee754_atan2+0x1a0>)
  405948:	4912      	ldr	r1, [pc, #72]	; (405994 <__ieee754_atan2+0x1a4>)
  40594a:	e7a4      	b.n	405896 <__ieee754_atan2+0xa6>
  40594c:	4810      	ldr	r0, [pc, #64]	; (405990 <__ieee754_atan2+0x1a0>)
  40594e:	4912      	ldr	r1, [pc, #72]	; (405998 <__ieee754_atan2+0x1a8>)
  405950:	e7a1      	b.n	405896 <__ieee754_atan2+0xa6>
  405952:	4809      	ldr	r0, [pc, #36]	; (405978 <__ieee754_atan2+0x188>)
  405954:	4911      	ldr	r1, [pc, #68]	; (40599c <__ieee754_atan2+0x1ac>)
  405956:	e79e      	b.n	405896 <__ieee754_atan2+0xa6>
  405958:	33145c07 	.word	0x33145c07
  40595c:	3ca1a626 	.word	0x3ca1a626
  405960:	54442d18 	.word	0x54442d18
  405964:	400921fb 	.word	0x400921fb
  405968:	54442d18 	.word	0x54442d18
  40596c:	3ff921fb 	.word	0x3ff921fb
  405970:	c0100000 	.word	0xc0100000
  405974:	7ff00000 	.word	0x7ff00000
  405978:	54442d18 	.word	0x54442d18
  40597c:	400921fb 	.word	0x400921fb
  405980:	3ff921fb 	.word	0x3ff921fb
  405984:	c00921fb 	.word	0xc00921fb
  405988:	bff921fb 	.word	0xbff921fb
  40598c:	3fe921fb 	.word	0x3fe921fb
  405990:	7f3321d2 	.word	0x7f3321d2
  405994:	c002d97c 	.word	0xc002d97c
  405998:	4002d97c 	.word	0x4002d97c
  40599c:	bfe921fb 	.word	0xbfe921fb

004059a0 <__ieee754_rem_pio2>:
  4059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059a4:	4c96      	ldr	r4, [pc, #600]	; (405c00 <__ieee754_rem_pio2+0x260>)
  4059a6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4059aa:	b08f      	sub	sp, #60	; 0x3c
  4059ac:	460b      	mov	r3, r1
  4059ae:	42a7      	cmp	r7, r4
  4059b0:	460e      	mov	r6, r1
  4059b2:	f340 8082 	ble.w	405aba <__ieee754_rem_pio2+0x11a>
  4059b6:	4614      	mov	r4, r2
  4059b8:	4a92      	ldr	r2, [pc, #584]	; (405c04 <__ieee754_rem_pio2+0x264>)
  4059ba:	4297      	cmp	r7, r2
  4059bc:	dc28      	bgt.n	405a10 <__ieee754_rem_pio2+0x70>
  4059be:	2900      	cmp	r1, #0
  4059c0:	a385      	add	r3, pc, #532	; (adr r3, 405bd8 <__ieee754_rem_pio2+0x238>)
  4059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059c6:	f340 81a3 	ble.w	405d10 <__ieee754_rem_pio2+0x370>
  4059ca:	f001 fb5b 	bl	407084 <__aeabi_dsub>
  4059ce:	4b8e      	ldr	r3, [pc, #568]	; (405c08 <__ieee754_rem_pio2+0x268>)
  4059d0:	4680      	mov	r8, r0
  4059d2:	4689      	mov	r9, r1
  4059d4:	429f      	cmp	r7, r3
  4059d6:	f000 8087 	beq.w	405ae8 <__ieee754_rem_pio2+0x148>
  4059da:	2501      	movs	r5, #1
  4059dc:	a380      	add	r3, pc, #512	; (adr r3, 405be0 <__ieee754_rem_pio2+0x240>)
  4059de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4059e2:	f001 fb4f 	bl	407084 <__aeabi_dsub>
  4059e6:	4606      	mov	r6, r0
  4059e8:	460f      	mov	r7, r1
  4059ea:	4640      	mov	r0, r8
  4059ec:	4632      	mov	r2, r6
  4059ee:	4649      	mov	r1, r9
  4059f0:	463b      	mov	r3, r7
  4059f2:	e9c4 6700 	strd	r6, r7, [r4]
  4059f6:	f001 fb45 	bl	407084 <__aeabi_dsub>
  4059fa:	a379      	add	r3, pc, #484	; (adr r3, 405be0 <__ieee754_rem_pio2+0x240>)
  4059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a00:	f001 fb40 	bl	407084 <__aeabi_dsub>
  405a04:	e9c4 0102 	strd	r0, r1, [r4, #8]
  405a08:	4628      	mov	r0, r5
  405a0a:	b00f      	add	sp, #60	; 0x3c
  405a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a10:	4a7e      	ldr	r2, [pc, #504]	; (405c0c <__ieee754_rem_pio2+0x26c>)
  405a12:	4297      	cmp	r7, r2
  405a14:	f340 8087 	ble.w	405b26 <__ieee754_rem_pio2+0x186>
  405a18:	4a7d      	ldr	r2, [pc, #500]	; (405c10 <__ieee754_rem_pio2+0x270>)
  405a1a:	4297      	cmp	r7, r2
  405a1c:	dc5a      	bgt.n	405ad4 <__ieee754_rem_pio2+0x134>
  405a1e:	153a      	asrs	r2, r7, #20
  405a20:	4682      	mov	sl, r0
  405a22:	f2a2 4516 	subw	r5, r2, #1046	; 0x416
  405a26:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
  405a2a:	468b      	mov	fp, r1
  405a2c:	f001 ff78 	bl	407920 <__aeabi_d2iz>
  405a30:	f001 fc76 	bl	407320 <__aeabi_i2d>
  405a34:	4680      	mov	r8, r0
  405a36:	4689      	mov	r9, r1
  405a38:	4650      	mov	r0, sl
  405a3a:	4642      	mov	r2, r8
  405a3c:	4659      	mov	r1, fp
  405a3e:	464b      	mov	r3, r9
  405a40:	e9cd 8908 	strd	r8, r9, [sp, #32]
  405a44:	f001 fb1e 	bl	407084 <__aeabi_dsub>
  405a48:	2200      	movs	r2, #0
  405a4a:	4b72      	ldr	r3, [pc, #456]	; (405c14 <__ieee754_rem_pio2+0x274>)
  405a4c:	f001 fcce 	bl	4073ec <__aeabi_dmul>
  405a50:	468b      	mov	fp, r1
  405a52:	4682      	mov	sl, r0
  405a54:	f001 ff64 	bl	407920 <__aeabi_d2iz>
  405a58:	f001 fc62 	bl	407320 <__aeabi_i2d>
  405a5c:	4680      	mov	r8, r0
  405a5e:	4689      	mov	r9, r1
  405a60:	4650      	mov	r0, sl
  405a62:	4642      	mov	r2, r8
  405a64:	4659      	mov	r1, fp
  405a66:	464b      	mov	r3, r9
  405a68:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  405a6c:	f001 fb0a 	bl	407084 <__aeabi_dsub>
  405a70:	2200      	movs	r2, #0
  405a72:	4b68      	ldr	r3, [pc, #416]	; (405c14 <__ieee754_rem_pio2+0x274>)
  405a74:	f001 fcba 	bl	4073ec <__aeabi_dmul>
  405a78:	2200      	movs	r2, #0
  405a7a:	2300      	movs	r3, #0
  405a7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  405a80:	f001 ff1c 	bl	4078bc <__aeabi_dcmpeq>
  405a84:	2800      	cmp	r0, #0
  405a86:	f000 816d 	beq.w	405d64 <__ieee754_rem_pio2+0x3c4>
  405a8a:	2300      	movs	r3, #0
  405a8c:	4640      	mov	r0, r8
  405a8e:	4649      	mov	r1, r9
  405a90:	2200      	movs	r2, #0
  405a92:	f001 ff13 	bl	4078bc <__aeabi_dcmpeq>
  405a96:	2800      	cmp	r0, #0
  405a98:	bf14      	ite	ne
  405a9a:	2301      	movne	r3, #1
  405a9c:	2302      	moveq	r3, #2
  405a9e:	2002      	movs	r0, #2
  405aa0:	495d      	ldr	r1, [pc, #372]	; (405c18 <__ieee754_rem_pio2+0x278>)
  405aa2:	462a      	mov	r2, r5
  405aa4:	9000      	str	r0, [sp, #0]
  405aa6:	a808      	add	r0, sp, #32
  405aa8:	9101      	str	r1, [sp, #4]
  405aaa:	4621      	mov	r1, r4
  405aac:	f000 fb68 	bl	406180 <__kernel_rem_pio2>
  405ab0:	2e00      	cmp	r6, #0
  405ab2:	f2c0 814d 	blt.w	405d50 <__ieee754_rem_pio2+0x3b0>
  405ab6:	4605      	mov	r5, r0
  405ab8:	e008      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405aba:	4606      	mov	r6, r0
  405abc:	2100      	movs	r1, #0
  405abe:	2000      	movs	r0, #0
  405ac0:	461f      	mov	r7, r3
  405ac2:	2500      	movs	r5, #0
  405ac4:	e9c2 0102 	strd	r0, r1, [r2, #8]
  405ac8:	e9c2 6700 	strd	r6, r7, [r2]
  405acc:	4628      	mov	r0, r5
  405ace:	b00f      	add	sp, #60	; 0x3c
  405ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ad4:	4602      	mov	r2, r0
  405ad6:	460b      	mov	r3, r1
  405ad8:	f001 fad4 	bl	407084 <__aeabi_dsub>
  405adc:	2500      	movs	r5, #0
  405ade:	e9c4 0102 	strd	r0, r1, [r4, #8]
  405ae2:	e9c4 0100 	strd	r0, r1, [r4]
  405ae6:	e7f1      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405ae8:	a33f      	add	r3, pc, #252	; (adr r3, 405be8 <__ieee754_rem_pio2+0x248>)
  405aea:	e9d3 2300 	ldrd	r2, r3, [r3]
  405aee:	f001 fac9 	bl	407084 <__aeabi_dsub>
  405af2:	4680      	mov	r8, r0
  405af4:	4689      	mov	r9, r1
  405af6:	2501      	movs	r5, #1
  405af8:	a33d      	add	r3, pc, #244	; (adr r3, 405bf0 <__ieee754_rem_pio2+0x250>)
  405afa:	e9d3 2300 	ldrd	r2, r3, [r3]
  405afe:	f001 fac1 	bl	407084 <__aeabi_dsub>
  405b02:	4606      	mov	r6, r0
  405b04:	460f      	mov	r7, r1
  405b06:	4640      	mov	r0, r8
  405b08:	4632      	mov	r2, r6
  405b0a:	4649      	mov	r1, r9
  405b0c:	463b      	mov	r3, r7
  405b0e:	e9c4 6700 	strd	r6, r7, [r4]
  405b12:	f001 fab7 	bl	407084 <__aeabi_dsub>
  405b16:	a336      	add	r3, pc, #216	; (adr r3, 405bf0 <__ieee754_rem_pio2+0x250>)
  405b18:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b1c:	f001 fab2 	bl	407084 <__aeabi_dsub>
  405b20:	e9c4 0102 	strd	r0, r1, [r4, #8]
  405b24:	e7d2      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405b26:	f001 f965 	bl	406df4 <fabs>
  405b2a:	4680      	mov	r8, r0
  405b2c:	4689      	mov	r9, r1
  405b2e:	a332      	add	r3, pc, #200	; (adr r3, 405bf8 <__ieee754_rem_pio2+0x258>)
  405b30:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b34:	f001 fc5a 	bl	4073ec <__aeabi_dmul>
  405b38:	2200      	movs	r2, #0
  405b3a:	4b38      	ldr	r3, [pc, #224]	; (405c1c <__ieee754_rem_pio2+0x27c>)
  405b3c:	f001 faa4 	bl	407088 <__adddf3>
  405b40:	f001 feee 	bl	407920 <__aeabi_d2iz>
  405b44:	4605      	mov	r5, r0
  405b46:	f001 fbeb 	bl	407320 <__aeabi_i2d>
  405b4a:	a323      	add	r3, pc, #140	; (adr r3, 405bd8 <__ieee754_rem_pio2+0x238>)
  405b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405b54:	f001 fc4a 	bl	4073ec <__aeabi_dmul>
  405b58:	4602      	mov	r2, r0
  405b5a:	460b      	mov	r3, r1
  405b5c:	4640      	mov	r0, r8
  405b5e:	4649      	mov	r1, r9
  405b60:	f001 fa90 	bl	407084 <__aeabi_dsub>
  405b64:	4682      	mov	sl, r0
  405b66:	468b      	mov	fp, r1
  405b68:	a31d      	add	r3, pc, #116	; (adr r3, 405be0 <__ieee754_rem_pio2+0x240>)
  405b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405b72:	f001 fc3b 	bl	4073ec <__aeabi_dmul>
  405b76:	2d1f      	cmp	r5, #31
  405b78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405b7c:	4650      	mov	r0, sl
  405b7e:	4659      	mov	r1, fp
  405b80:	dc50      	bgt.n	405c24 <__ieee754_rem_pio2+0x284>
  405b82:	4b27      	ldr	r3, [pc, #156]	; (405c20 <__ieee754_rem_pio2+0x280>)
  405b84:	1e6a      	subs	r2, r5, #1
  405b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405b8a:	42bb      	cmp	r3, r7
  405b8c:	d04a      	beq.n	405c24 <__ieee754_rem_pio2+0x284>
  405b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405b92:	f001 fa77 	bl	407084 <__aeabi_dsub>
  405b96:	4602      	mov	r2, r0
  405b98:	460b      	mov	r3, r1
  405b9a:	4681      	mov	r9, r0
  405b9c:	4688      	mov	r8, r1
  405b9e:	e9c4 2300 	strd	r2, r3, [r4]
  405ba2:	464a      	mov	r2, r9
  405ba4:	4643      	mov	r3, r8
  405ba6:	4650      	mov	r0, sl
  405ba8:	4659      	mov	r1, fp
  405baa:	f001 fa6b 	bl	407084 <__aeabi_dsub>
  405bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405bb2:	f001 fa67 	bl	407084 <__aeabi_dsub>
  405bb6:	2e00      	cmp	r6, #0
  405bb8:	4602      	mov	r2, r0
  405bba:	460b      	mov	r3, r1
  405bbc:	e9c4 2302 	strd	r2, r3, [r4, #8]
  405bc0:	da84      	bge.n	405acc <__ieee754_rem_pio2+0x12c>
  405bc2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
  405bc6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405bca:	60a0      	str	r0, [r4, #8]
  405bcc:	426d      	negs	r5, r5
  405bce:	f8c4 9000 	str.w	r9, [r4]
  405bd2:	6063      	str	r3, [r4, #4]
  405bd4:	60e1      	str	r1, [r4, #12]
  405bd6:	e779      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405bd8:	54400000 	.word	0x54400000
  405bdc:	3ff921fb 	.word	0x3ff921fb
  405be0:	1a626331 	.word	0x1a626331
  405be4:	3dd0b461 	.word	0x3dd0b461
  405be8:	1a600000 	.word	0x1a600000
  405bec:	3dd0b461 	.word	0x3dd0b461
  405bf0:	2e037073 	.word	0x2e037073
  405bf4:	3ba3198a 	.word	0x3ba3198a
  405bf8:	6dc9c883 	.word	0x6dc9c883
  405bfc:	3fe45f30 	.word	0x3fe45f30
  405c00:	3fe921fb 	.word	0x3fe921fb
  405c04:	4002d97b 	.word	0x4002d97b
  405c08:	3ff921fb 	.word	0x3ff921fb
  405c0c:	413921fb 	.word	0x413921fb
  405c10:	7fefffff 	.word	0x7fefffff
  405c14:	41700000 	.word	0x41700000
  405c18:	0040e2b8 	.word	0x0040e2b8
  405c1c:	3fe00000 	.word	0x3fe00000
  405c20:	0040e238 	.word	0x0040e238
  405c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405c28:	f001 fa2c 	bl	407084 <__aeabi_dsub>
  405c2c:	4688      	mov	r8, r1
  405c2e:	153f      	asrs	r7, r7, #20
  405c30:	4681      	mov	r9, r0
  405c32:	f3c8 530a 	ubfx	r3, r8, #20, #11
  405c36:	1afb      	subs	r3, r7, r3
  405c38:	2b10      	cmp	r3, #16
  405c3a:	e9c4 0100 	strd	r0, r1, [r4]
  405c3e:	ddb0      	ble.n	405ba2 <__ieee754_rem_pio2+0x202>
  405c40:	a35b      	add	r3, pc, #364	; (adr r3, 405db0 <__ieee754_rem_pio2+0x410>)
  405c42:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c4a:	f001 fbcf 	bl	4073ec <__aeabi_dmul>
  405c4e:	4680      	mov	r8, r0
  405c50:	4689      	mov	r9, r1
  405c52:	4650      	mov	r0, sl
  405c54:	4642      	mov	r2, r8
  405c56:	4659      	mov	r1, fp
  405c58:	464b      	mov	r3, r9
  405c5a:	f001 fa13 	bl	407084 <__aeabi_dsub>
  405c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405c62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  405c66:	4650      	mov	r0, sl
  405c68:	4659      	mov	r1, fp
  405c6a:	f001 fa0b 	bl	407084 <__aeabi_dsub>
  405c6e:	4642      	mov	r2, r8
  405c70:	464b      	mov	r3, r9
  405c72:	f001 fa07 	bl	407084 <__aeabi_dsub>
  405c76:	4680      	mov	r8, r0
  405c78:	4689      	mov	r9, r1
  405c7a:	a34f      	add	r3, pc, #316	; (adr r3, 405db8 <__ieee754_rem_pio2+0x418>)
  405c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c84:	f001 fbb2 	bl	4073ec <__aeabi_dmul>
  405c88:	4642      	mov	r2, r8
  405c8a:	464b      	mov	r3, r9
  405c8c:	f001 f9fa 	bl	407084 <__aeabi_dsub>
  405c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  405c9c:	f001 f9f2 	bl	407084 <__aeabi_dsub>
  405ca0:	4688      	mov	r8, r1
  405ca2:	f3c1 510a 	ubfx	r1, r1, #20, #11
  405ca6:	4602      	mov	r2, r0
  405ca8:	4643      	mov	r3, r8
  405caa:	4681      	mov	r9, r0
  405cac:	1a7f      	subs	r7, r7, r1
  405cae:	2f31      	cmp	r7, #49	; 0x31
  405cb0:	e9c4 2300 	strd	r2, r3, [r4]
  405cb4:	dd78      	ble.n	405da8 <__ieee754_rem_pio2+0x408>
  405cb6:	a342      	add	r3, pc, #264	; (adr r3, 405dc0 <__ieee754_rem_pio2+0x420>)
  405cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405cc0:	f001 fb94 	bl	4073ec <__aeabi_dmul>
  405cc4:	4680      	mov	r8, r0
  405cc6:	4689      	mov	r9, r1
  405cc8:	4642      	mov	r2, r8
  405cca:	464b      	mov	r3, r9
  405ccc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  405cd0:	f001 f9d8 	bl	407084 <__aeabi_dsub>
  405cd4:	4682      	mov	sl, r0
  405cd6:	468b      	mov	fp, r1
  405cd8:	4652      	mov	r2, sl
  405cda:	465b      	mov	r3, fp
  405cdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  405ce0:	f001 f9d0 	bl	407084 <__aeabi_dsub>
  405ce4:	4642      	mov	r2, r8
  405ce6:	464b      	mov	r3, r9
  405ce8:	f001 f9cc 	bl	407084 <__aeabi_dsub>
  405cec:	4680      	mov	r8, r0
  405cee:	4689      	mov	r9, r1
  405cf0:	a335      	add	r3, pc, #212	; (adr r3, 405dc8 <__ieee754_rem_pio2+0x428>)
  405cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405cfa:	f001 fb77 	bl	4073ec <__aeabi_dmul>
  405cfe:	4642      	mov	r2, r8
  405d00:	464b      	mov	r3, r9
  405d02:	f001 f9bf 	bl	407084 <__aeabi_dsub>
  405d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405d0a:	4650      	mov	r0, sl
  405d0c:	4659      	mov	r1, fp
  405d0e:	e73e      	b.n	405b8e <__ieee754_rem_pio2+0x1ee>
  405d10:	f001 f9ba 	bl	407088 <__adddf3>
  405d14:	4b30      	ldr	r3, [pc, #192]	; (405dd8 <__ieee754_rem_pio2+0x438>)
  405d16:	4680      	mov	r8, r0
  405d18:	4689      	mov	r9, r1
  405d1a:	429f      	cmp	r7, r3
  405d1c:	d024      	beq.n	405d68 <__ieee754_rem_pio2+0x3c8>
  405d1e:	f04f 35ff 	mov.w	r5, #4294967295
  405d22:	a32b      	add	r3, pc, #172	; (adr r3, 405dd0 <__ieee754_rem_pio2+0x430>)
  405d24:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d28:	f001 f9ae 	bl	407088 <__adddf3>
  405d2c:	4606      	mov	r6, r0
  405d2e:	460f      	mov	r7, r1
  405d30:	4640      	mov	r0, r8
  405d32:	4632      	mov	r2, r6
  405d34:	4649      	mov	r1, r9
  405d36:	463b      	mov	r3, r7
  405d38:	e9c4 6700 	strd	r6, r7, [r4]
  405d3c:	f001 f9a2 	bl	407084 <__aeabi_dsub>
  405d40:	a323      	add	r3, pc, #140	; (adr r3, 405dd0 <__ieee754_rem_pio2+0x430>)
  405d42:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d46:	f001 f99f 	bl	407088 <__adddf3>
  405d4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  405d4e:	e6bd      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405d50:	6862      	ldr	r2, [r4, #4]
  405d52:	4245      	negs	r5, r0
  405d54:	68e3      	ldr	r3, [r4, #12]
  405d56:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  405d5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405d5e:	6062      	str	r2, [r4, #4]
  405d60:	60e3      	str	r3, [r4, #12]
  405d62:	e6b3      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405d64:	2303      	movs	r3, #3
  405d66:	e69a      	b.n	405a9e <__ieee754_rem_pio2+0xfe>
  405d68:	a311      	add	r3, pc, #68	; (adr r3, 405db0 <__ieee754_rem_pio2+0x410>)
  405d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d6e:	f001 f98b 	bl	407088 <__adddf3>
  405d72:	4680      	mov	r8, r0
  405d74:	4689      	mov	r9, r1
  405d76:	f04f 35ff 	mov.w	r5, #4294967295
  405d7a:	a30f      	add	r3, pc, #60	; (adr r3, 405db8 <__ieee754_rem_pio2+0x418>)
  405d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d80:	f001 f982 	bl	407088 <__adddf3>
  405d84:	4606      	mov	r6, r0
  405d86:	460f      	mov	r7, r1
  405d88:	4640      	mov	r0, r8
  405d8a:	4632      	mov	r2, r6
  405d8c:	4649      	mov	r1, r9
  405d8e:	463b      	mov	r3, r7
  405d90:	e9c4 6700 	strd	r6, r7, [r4]
  405d94:	f001 f976 	bl	407084 <__aeabi_dsub>
  405d98:	a307      	add	r3, pc, #28	; (adr r3, 405db8 <__ieee754_rem_pio2+0x418>)
  405d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d9e:	f001 f973 	bl	407088 <__adddf3>
  405da2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  405da6:	e691      	b.n	405acc <__ieee754_rem_pio2+0x12c>
  405da8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  405dac:	e6f9      	b.n	405ba2 <__ieee754_rem_pio2+0x202>
  405dae:	bf00      	nop
  405db0:	1a600000 	.word	0x1a600000
  405db4:	3dd0b461 	.word	0x3dd0b461
  405db8:	2e037073 	.word	0x2e037073
  405dbc:	3ba3198a 	.word	0x3ba3198a
  405dc0:	2e000000 	.word	0x2e000000
  405dc4:	3ba3198a 	.word	0x3ba3198a
  405dc8:	252049c1 	.word	0x252049c1
  405dcc:	397b839a 	.word	0x397b839a
  405dd0:	1a626331 	.word	0x1a626331
  405dd4:	3dd0b461 	.word	0x3dd0b461
  405dd8:	3ff921fb 	.word	0x3ff921fb

00405ddc <__ieee754_sqrt>:
  405ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405de0:	4e53      	ldr	r6, [pc, #332]	; (405f30 <__ieee754_sqrt+0x154>)
  405de2:	460c      	mov	r4, r1
  405de4:	4605      	mov	r5, r0
  405de6:	460b      	mov	r3, r1
  405de8:	46b6      	mov	lr, r6
  405dea:	400e      	ands	r6, r1
  405dec:	4576      	cmp	r6, lr
  405dee:	f000 8085 	beq.w	405efc <__ieee754_sqrt+0x120>
  405df2:	2900      	cmp	r1, #0
  405df4:	4602      	mov	r2, r0
  405df6:	dd65      	ble.n	405ec4 <__ieee754_sqrt+0xe8>
  405df8:	150f      	asrs	r7, r1, #20
  405dfa:	d070      	beq.n	405ede <__ieee754_sqrt+0x102>
  405dfc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  405e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405e04:	07f9      	lsls	r1, r7, #31
  405e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405e0a:	d453      	bmi.n	405eb4 <__ieee754_sqrt+0xd8>
  405e0c:	0fd1      	lsrs	r1, r2, #31
  405e0e:	2600      	movs	r6, #0
  405e10:	107f      	asrs	r7, r7, #1
  405e12:	2016      	movs	r0, #22
  405e14:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  405e18:	46b6      	mov	lr, r6
  405e1a:	0052      	lsls	r2, r2, #1
  405e1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  405e20:	eb0e 0401 	add.w	r4, lr, r1
  405e24:	0fd5      	lsrs	r5, r2, #31
  405e26:	0052      	lsls	r2, r2, #1
  405e28:	429c      	cmp	r4, r3
  405e2a:	dc03      	bgt.n	405e34 <__ieee754_sqrt+0x58>
  405e2c:	1b1b      	subs	r3, r3, r4
  405e2e:	eb04 0e01 	add.w	lr, r4, r1
  405e32:	440e      	add	r6, r1
  405e34:	3801      	subs	r0, #1
  405e36:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  405e3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  405e3e:	d1ef      	bne.n	405e20 <__ieee754_sqrt+0x44>
  405e40:	2520      	movs	r5, #32
  405e42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  405e46:	4684      	mov	ip, r0
  405e48:	4573      	cmp	r3, lr
  405e4a:	eb01 040c 	add.w	r4, r1, ip
  405e4e:	dc03      	bgt.n	405e58 <__ieee754_sqrt+0x7c>
  405e50:	4294      	cmp	r4, r2
  405e52:	d80e      	bhi.n	405e72 <__ieee754_sqrt+0x96>
  405e54:	4573      	cmp	r3, lr
  405e56:	d10c      	bne.n	405e72 <__ieee754_sqrt+0x96>
  405e58:	2c00      	cmp	r4, #0
  405e5a:	eb04 0c01 	add.w	ip, r4, r1
  405e5e:	db23      	blt.n	405ea8 <__ieee754_sqrt+0xcc>
  405e60:	46f0      	mov	r8, lr
  405e62:	4294      	cmp	r4, r2
  405e64:	ebce 0303 	rsb	r3, lr, r3
  405e68:	d900      	bls.n	405e6c <__ieee754_sqrt+0x90>
  405e6a:	3b01      	subs	r3, #1
  405e6c:	1b12      	subs	r2, r2, r4
  405e6e:	4408      	add	r0, r1
  405e70:	46c6      	mov	lr, r8
  405e72:	0fd4      	lsrs	r4, r2, #31
  405e74:	3d01      	subs	r5, #1
  405e76:	ea4f 0151 	mov.w	r1, r1, lsr #1
  405e7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  405e7e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  405e82:	d1e1      	bne.n	405e48 <__ieee754_sqrt+0x6c>
  405e84:	4313      	orrs	r3, r2
  405e86:	d004      	beq.n	405e92 <__ieee754_sqrt+0xb6>
  405e88:	1c42      	adds	r2, r0, #1
  405e8a:	d041      	beq.n	405f10 <__ieee754_sqrt+0x134>
  405e8c:	f000 0301 	and.w	r3, r0, #1
  405e90:	4418      	add	r0, r3
  405e92:	0840      	lsrs	r0, r0, #1
  405e94:	1073      	asrs	r3, r6, #1
  405e96:	4927      	ldr	r1, [pc, #156]	; (405f34 <__ieee754_sqrt+0x158>)
  405e98:	4419      	add	r1, r3
  405e9a:	07f3      	lsls	r3, r6, #31
  405e9c:	d40f      	bmi.n	405ebe <__ieee754_sqrt+0xe2>
  405e9e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  405ea2:	4619      	mov	r1, r3
  405ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405ea8:	f1bc 0f00 	cmp.w	ip, #0
  405eac:	dbd8      	blt.n	405e60 <__ieee754_sqrt+0x84>
  405eae:	f10e 0801 	add.w	r8, lr, #1
  405eb2:	e7d6      	b.n	405e62 <__ieee754_sqrt+0x86>
  405eb4:	0fd1      	lsrs	r1, r2, #31
  405eb6:	0052      	lsls	r2, r2, #1
  405eb8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  405ebc:	e7a6      	b.n	405e0c <__ieee754_sqrt+0x30>
  405ebe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  405ec2:	e7ec      	b.n	405e9e <__ieee754_sqrt+0xc2>
  405ec4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405ec8:	4306      	orrs	r6, r0
  405eca:	d0eb      	beq.n	405ea4 <__ieee754_sqrt+0xc8>
  405ecc:	bb39      	cbnz	r1, 405f1e <__ieee754_sqrt+0x142>
  405ece:	460f      	mov	r7, r1
  405ed0:	0ad3      	lsrs	r3, r2, #11
  405ed2:	3f15      	subs	r7, #21
  405ed4:	0552      	lsls	r2, r2, #21
  405ed6:	2b00      	cmp	r3, #0
  405ed8:	d0fa      	beq.n	405ed0 <__ieee754_sqrt+0xf4>
  405eda:	02dc      	lsls	r4, r3, #11
  405edc:	d41b      	bmi.n	405f16 <__ieee754_sqrt+0x13a>
  405ede:	2100      	movs	r1, #0
  405ee0:	005b      	lsls	r3, r3, #1
  405ee2:	3101      	adds	r1, #1
  405ee4:	02d8      	lsls	r0, r3, #11
  405ee6:	d5fb      	bpl.n	405ee0 <__ieee754_sqrt+0x104>
  405ee8:	f1c1 0401 	rsb	r4, r1, #1
  405eec:	f1c1 0020 	rsb	r0, r1, #32
  405ef0:	fa22 f000 	lsr.w	r0, r2, r0
  405ef4:	4427      	add	r7, r4
  405ef6:	408a      	lsls	r2, r1
  405ef8:	4303      	orrs	r3, r0
  405efa:	e77f      	b.n	405dfc <__ieee754_sqrt+0x20>
  405efc:	4602      	mov	r2, r0
  405efe:	460b      	mov	r3, r1
  405f00:	f001 fa74 	bl	4073ec <__aeabi_dmul>
  405f04:	462a      	mov	r2, r5
  405f06:	4623      	mov	r3, r4
  405f08:	f001 f8be 	bl	407088 <__adddf3>
  405f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f10:	3601      	adds	r6, #1
  405f12:	4628      	mov	r0, r5
  405f14:	e7be      	b.n	405e94 <__ieee754_sqrt+0xb8>
  405f16:	2020      	movs	r0, #32
  405f18:	2401      	movs	r4, #1
  405f1a:	2100      	movs	r1, #0
  405f1c:	e7e8      	b.n	405ef0 <__ieee754_sqrt+0x114>
  405f1e:	4602      	mov	r2, r0
  405f20:	460b      	mov	r3, r1
  405f22:	f001 f8af 	bl	407084 <__aeabi_dsub>
  405f26:	4602      	mov	r2, r0
  405f28:	460b      	mov	r3, r1
  405f2a:	f001 fb89 	bl	407640 <__aeabi_ddiv>
  405f2e:	e7b9      	b.n	405ea4 <__ieee754_sqrt+0xc8>
  405f30:	7ff00000 	.word	0x7ff00000
  405f34:	3fe00000 	.word	0x3fe00000

00405f38 <__kernel_cos>:
  405f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f3c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  405f40:	b085      	sub	sp, #20
  405f42:	460c      	mov	r4, r1
  405f44:	4692      	mov	sl, r2
  405f46:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
  405f4a:	469b      	mov	fp, r3
  405f4c:	4605      	mov	r5, r0
  405f4e:	da6b      	bge.n	406028 <__kernel_cos+0xf0>
  405f50:	f001 fce6 	bl	407920 <__aeabi_d2iz>
  405f54:	2800      	cmp	r0, #0
  405f56:	f000 80e7 	beq.w	406128 <__kernel_cos+0x1f0>
  405f5a:	462a      	mov	r2, r5
  405f5c:	4623      	mov	r3, r4
  405f5e:	4628      	mov	r0, r5
  405f60:	4621      	mov	r1, r4
  405f62:	f001 fa43 	bl	4073ec <__aeabi_dmul>
  405f66:	4680      	mov	r8, r0
  405f68:	4689      	mov	r9, r1
  405f6a:	a373      	add	r3, pc, #460	; (adr r3, 406138 <__kernel_cos+0x200>)
  405f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f70:	f001 fa3c 	bl	4073ec <__aeabi_dmul>
  405f74:	a372      	add	r3, pc, #456	; (adr r3, 406140 <__kernel_cos+0x208>)
  405f76:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f7a:	f001 f885 	bl	407088 <__adddf3>
  405f7e:	4642      	mov	r2, r8
  405f80:	464b      	mov	r3, r9
  405f82:	f001 fa33 	bl	4073ec <__aeabi_dmul>
  405f86:	a370      	add	r3, pc, #448	; (adr r3, 406148 <__kernel_cos+0x210>)
  405f88:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f8c:	f001 f87a 	bl	407084 <__aeabi_dsub>
  405f90:	4642      	mov	r2, r8
  405f92:	464b      	mov	r3, r9
  405f94:	f001 fa2a 	bl	4073ec <__aeabi_dmul>
  405f98:	a36d      	add	r3, pc, #436	; (adr r3, 406150 <__kernel_cos+0x218>)
  405f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f9e:	f001 f873 	bl	407088 <__adddf3>
  405fa2:	4642      	mov	r2, r8
  405fa4:	464b      	mov	r3, r9
  405fa6:	f001 fa21 	bl	4073ec <__aeabi_dmul>
  405faa:	a36b      	add	r3, pc, #428	; (adr r3, 406158 <__kernel_cos+0x220>)
  405fac:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fb0:	f001 f868 	bl	407084 <__aeabi_dsub>
  405fb4:	4642      	mov	r2, r8
  405fb6:	464b      	mov	r3, r9
  405fb8:	f001 fa18 	bl	4073ec <__aeabi_dmul>
  405fbc:	a368      	add	r3, pc, #416	; (adr r3, 406160 <__kernel_cos+0x228>)
  405fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fc2:	f001 f861 	bl	407088 <__adddf3>
  405fc6:	4642      	mov	r2, r8
  405fc8:	464b      	mov	r3, r9
  405fca:	f001 fa0f 	bl	4073ec <__aeabi_dmul>
  405fce:	e9cd 0100 	strd	r0, r1, [sp]
  405fd2:	4640      	mov	r0, r8
  405fd4:	4649      	mov	r1, r9
  405fd6:	2200      	movs	r2, #0
  405fd8:	4b63      	ldr	r3, [pc, #396]	; (406168 <__kernel_cos+0x230>)
  405fda:	f001 fa07 	bl	4073ec <__aeabi_dmul>
  405fde:	4606      	mov	r6, r0
  405fe0:	460f      	mov	r7, r1
  405fe2:	4640      	mov	r0, r8
  405fe4:	4649      	mov	r1, r9
  405fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
  405fea:	f001 f9ff 	bl	4073ec <__aeabi_dmul>
  405fee:	4680      	mov	r8, r0
  405ff0:	4689      	mov	r9, r1
  405ff2:	4652      	mov	r2, sl
  405ff4:	465b      	mov	r3, fp
  405ff6:	4628      	mov	r0, r5
  405ff8:	4621      	mov	r1, r4
  405ffa:	f001 f9f7 	bl	4073ec <__aeabi_dmul>
  405ffe:	4602      	mov	r2, r0
  406000:	460b      	mov	r3, r1
  406002:	4640      	mov	r0, r8
  406004:	4649      	mov	r1, r9
  406006:	f001 f83d 	bl	407084 <__aeabi_dsub>
  40600a:	4602      	mov	r2, r0
  40600c:	460b      	mov	r3, r1
  40600e:	4630      	mov	r0, r6
  406010:	4639      	mov	r1, r7
  406012:	f001 f837 	bl	407084 <__aeabi_dsub>
  406016:	4602      	mov	r2, r0
  406018:	460b      	mov	r3, r1
  40601a:	2000      	movs	r0, #0
  40601c:	4953      	ldr	r1, [pc, #332]	; (40616c <__kernel_cos+0x234>)
  40601e:	f001 f831 	bl	407084 <__aeabi_dsub>
  406022:	b005      	add	sp, #20
  406024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406028:	4602      	mov	r2, r0
  40602a:	460b      	mov	r3, r1
  40602c:	f001 f9de 	bl	4073ec <__aeabi_dmul>
  406030:	4680      	mov	r8, r0
  406032:	4689      	mov	r9, r1
  406034:	a340      	add	r3, pc, #256	; (adr r3, 406138 <__kernel_cos+0x200>)
  406036:	e9d3 2300 	ldrd	r2, r3, [r3]
  40603a:	f001 f9d7 	bl	4073ec <__aeabi_dmul>
  40603e:	a340      	add	r3, pc, #256	; (adr r3, 406140 <__kernel_cos+0x208>)
  406040:	e9d3 2300 	ldrd	r2, r3, [r3]
  406044:	f001 f820 	bl	407088 <__adddf3>
  406048:	4642      	mov	r2, r8
  40604a:	464b      	mov	r3, r9
  40604c:	f001 f9ce 	bl	4073ec <__aeabi_dmul>
  406050:	a33d      	add	r3, pc, #244	; (adr r3, 406148 <__kernel_cos+0x210>)
  406052:	e9d3 2300 	ldrd	r2, r3, [r3]
  406056:	f001 f815 	bl	407084 <__aeabi_dsub>
  40605a:	4642      	mov	r2, r8
  40605c:	464b      	mov	r3, r9
  40605e:	f001 f9c5 	bl	4073ec <__aeabi_dmul>
  406062:	a33b      	add	r3, pc, #236	; (adr r3, 406150 <__kernel_cos+0x218>)
  406064:	e9d3 2300 	ldrd	r2, r3, [r3]
  406068:	f001 f80e 	bl	407088 <__adddf3>
  40606c:	4642      	mov	r2, r8
  40606e:	464b      	mov	r3, r9
  406070:	f001 f9bc 	bl	4073ec <__aeabi_dmul>
  406074:	a338      	add	r3, pc, #224	; (adr r3, 406158 <__kernel_cos+0x220>)
  406076:	e9d3 2300 	ldrd	r2, r3, [r3]
  40607a:	f001 f803 	bl	407084 <__aeabi_dsub>
  40607e:	4642      	mov	r2, r8
  406080:	464b      	mov	r3, r9
  406082:	f001 f9b3 	bl	4073ec <__aeabi_dmul>
  406086:	a336      	add	r3, pc, #216	; (adr r3, 406160 <__kernel_cos+0x228>)
  406088:	e9d3 2300 	ldrd	r2, r3, [r3]
  40608c:	f000 fffc 	bl	407088 <__adddf3>
  406090:	464b      	mov	r3, r9
  406092:	4642      	mov	r2, r8
  406094:	f001 f9aa 	bl	4073ec <__aeabi_dmul>
  406098:	4b35      	ldr	r3, [pc, #212]	; (406170 <__kernel_cos+0x238>)
  40609a:	429f      	cmp	r7, r3
  40609c:	e9cd 0100 	strd	r0, r1, [sp]
  4060a0:	dd97      	ble.n	405fd2 <__kernel_cos+0x9a>
  4060a2:	4b34      	ldr	r3, [pc, #208]	; (406174 <__kernel_cos+0x23c>)
  4060a4:	2200      	movs	r2, #0
  4060a6:	429f      	cmp	r7, r3
  4060a8:	dc38      	bgt.n	40611c <__kernel_cos+0x1e4>
  4060aa:	f5a7 1300 	sub.w	r3, r7, #2097152	; 0x200000
  4060ae:	2000      	movs	r0, #0
  4060b0:	492e      	ldr	r1, [pc, #184]	; (40616c <__kernel_cos+0x234>)
  4060b2:	4616      	mov	r6, r2
  4060b4:	461f      	mov	r7, r3
  4060b6:	f000 ffe5 	bl	407084 <__aeabi_dsub>
  4060ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4060be:	4640      	mov	r0, r8
  4060c0:	4649      	mov	r1, r9
  4060c2:	2200      	movs	r2, #0
  4060c4:	4b28      	ldr	r3, [pc, #160]	; (406168 <__kernel_cos+0x230>)
  4060c6:	f001 f991 	bl	4073ec <__aeabi_dmul>
  4060ca:	4632      	mov	r2, r6
  4060cc:	463b      	mov	r3, r7
  4060ce:	f000 ffd9 	bl	407084 <__aeabi_dsub>
  4060d2:	4606      	mov	r6, r0
  4060d4:	460f      	mov	r7, r1
  4060d6:	4640      	mov	r0, r8
  4060d8:	4649      	mov	r1, r9
  4060da:	e9dd 2300 	ldrd	r2, r3, [sp]
  4060de:	f001 f985 	bl	4073ec <__aeabi_dmul>
  4060e2:	4680      	mov	r8, r0
  4060e4:	4689      	mov	r9, r1
  4060e6:	4652      	mov	r2, sl
  4060e8:	465b      	mov	r3, fp
  4060ea:	4628      	mov	r0, r5
  4060ec:	4621      	mov	r1, r4
  4060ee:	f001 f97d 	bl	4073ec <__aeabi_dmul>
  4060f2:	4602      	mov	r2, r0
  4060f4:	460b      	mov	r3, r1
  4060f6:	4640      	mov	r0, r8
  4060f8:	4649      	mov	r1, r9
  4060fa:	f000 ffc3 	bl	407084 <__aeabi_dsub>
  4060fe:	4602      	mov	r2, r0
  406100:	460b      	mov	r3, r1
  406102:	4630      	mov	r0, r6
  406104:	4639      	mov	r1, r7
  406106:	f000 ffbd 	bl	407084 <__aeabi_dsub>
  40610a:	4602      	mov	r2, r0
  40610c:	460b      	mov	r3, r1
  40610e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406112:	f000 ffb7 	bl	407084 <__aeabi_dsub>
  406116:	b005      	add	sp, #20
  406118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40611c:	4b16      	ldr	r3, [pc, #88]	; (406178 <__kernel_cos+0x240>)
  40611e:	2600      	movs	r6, #0
  406120:	4f16      	ldr	r7, [pc, #88]	; (40617c <__kernel_cos+0x244>)
  406122:	e9cd 2302 	strd	r2, r3, [sp, #8]
  406126:	e7ca      	b.n	4060be <__kernel_cos+0x186>
  406128:	2000      	movs	r0, #0
  40612a:	4910      	ldr	r1, [pc, #64]	; (40616c <__kernel_cos+0x234>)
  40612c:	b005      	add	sp, #20
  40612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406132:	bf00      	nop
  406134:	f3af 8000 	nop.w
  406138:	be8838d4 	.word	0xbe8838d4
  40613c:	bda8fae9 	.word	0xbda8fae9
  406140:	bdb4b1c4 	.word	0xbdb4b1c4
  406144:	3e21ee9e 	.word	0x3e21ee9e
  406148:	809c52ad 	.word	0x809c52ad
  40614c:	3e927e4f 	.word	0x3e927e4f
  406150:	19cb1590 	.word	0x19cb1590
  406154:	3efa01a0 	.word	0x3efa01a0
  406158:	16c15177 	.word	0x16c15177
  40615c:	3f56c16c 	.word	0x3f56c16c
  406160:	5555554c 	.word	0x5555554c
  406164:	3fa55555 	.word	0x3fa55555
  406168:	3fe00000 	.word	0x3fe00000
  40616c:	3ff00000 	.word	0x3ff00000
  406170:	3fd33332 	.word	0x3fd33332
  406174:	3fe90000 	.word	0x3fe90000
  406178:	3fe70000 	.word	0x3fe70000
  40617c:	3fd20000 	.word	0x3fd20000

00406180 <__kernel_rem_pio2>:
  406180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406184:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  406188:	461e      	mov	r6, r3
  40618a:	4c84      	ldr	r4, [pc, #528]	; (40639c <__kernel_rem_pio2+0x21c>)
  40618c:	930c      	str	r3, [sp, #48]	; 0x30
  40618e:	1ed3      	subs	r3, r2, #3
  406190:	9004      	str	r0, [sp, #16]
  406192:	3e01      	subs	r6, #1
  406194:	fb84 0403 	smull	r0, r4, r4, r3
  406198:	17db      	asrs	r3, r3, #31
  40619a:	4d81      	ldr	r5, [pc, #516]	; (4063a0 <__kernel_rem_pio2+0x220>)
  40619c:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  4061a0:	98a6      	ldr	r0, [sp, #664]	; 0x298
  4061a2:	910a      	str	r1, [sp, #40]	; 0x28
  4061a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4061a8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  4061ac:	9603      	str	r6, [sp, #12]
  4061ae:	4619      	mov	r1, r3
  4061b0:	930d      	str	r3, [sp, #52]	; 0x34
  4061b2:	43db      	mvns	r3, r3
  4061b4:	1834      	adds	r4, r6, r0
  4061b6:	9009      	str	r0, [sp, #36]	; 0x24
  4061b8:	eba1 0506 	sub.w	r5, r1, r6
  4061bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4061c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4061c4:	9308      	str	r3, [sp, #32]
  4061c6:	d416      	bmi.n	4061f6 <__kernel_rem_pio2+0x76>
  4061c8:	442c      	add	r4, r5
  4061ca:	ae22      	add	r6, sp, #136	; 0x88
  4061cc:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  4061ce:	3401      	adds	r4, #1
  4061d0:	e008      	b.n	4061e4 <__kernel_rem_pio2+0x64>
  4061d2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  4061d6:	3501      	adds	r5, #1
  4061d8:	f001 f8a2 	bl	407320 <__aeabi_i2d>
  4061dc:	42a5      	cmp	r5, r4
  4061de:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  4061e2:	d008      	beq.n	4061f6 <__kernel_rem_pio2+0x76>
  4061e4:	2d00      	cmp	r5, #0
  4061e6:	daf4      	bge.n	4061d2 <__kernel_rem_pio2+0x52>
  4061e8:	3501      	adds	r5, #1
  4061ea:	2000      	movs	r0, #0
  4061ec:	2100      	movs	r1, #0
  4061ee:	42a5      	cmp	r5, r4
  4061f0:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  4061f4:	d1f6      	bne.n	4061e4 <__kernel_rem_pio2+0x64>
  4061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061f8:	2b00      	cmp	r3, #0
  4061fa:	db31      	blt.n	406260 <__kernel_rem_pio2+0xe0>
  4061fc:	a974      	add	r1, sp, #464	; 0x1d0
  4061fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406202:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
  406206:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  40620a:	a924      	add	r1, sp, #144	; 0x90
  40620c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  406210:	9a03      	ldr	r2, [sp, #12]
  406212:	00db      	lsls	r3, r3, #3
  406214:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
  406218:	9300      	str	r3, [sp, #0]
  40621a:	9b03      	ldr	r3, [sp, #12]
  40621c:	2b00      	cmp	r3, #0
  40621e:	f2c0 8195 	blt.w	40654c <__kernel_rem_pio2+0x3cc>
  406222:	9b04      	ldr	r3, [sp, #16]
  406224:	4644      	mov	r4, r8
  406226:	2600      	movs	r6, #0
  406228:	2700      	movs	r7, #0
  40622a:	f1a3 0a08 	sub.w	sl, r3, #8
  40622e:	9b00      	ldr	r3, [sp, #0]
  406230:	eb08 0503 	add.w	r5, r8, r3
  406234:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  406238:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40623c:	f001 f8d6 	bl	4073ec <__aeabi_dmul>
  406240:	4602      	mov	r2, r0
  406242:	460b      	mov	r3, r1
  406244:	4630      	mov	r0, r6
  406246:	4639      	mov	r1, r7
  406248:	f000 ff1e 	bl	407088 <__adddf3>
  40624c:	42ac      	cmp	r4, r5
  40624e:	4606      	mov	r6, r0
  406250:	460f      	mov	r7, r1
  406252:	d1ef      	bne.n	406234 <__kernel_rem_pio2+0xb4>
  406254:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  406258:	45d9      	cmp	r9, fp
  40625a:	f108 0808 	add.w	r8, r8, #8
  40625e:	d1dc      	bne.n	40621a <__kernel_rem_pio2+0x9a>
  406260:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406262:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  406266:	a910      	add	r1, sp, #64	; 0x40
  406268:	4413      	add	r3, r2
  40626a:	4693      	mov	fp, r2
  40626c:	009b      	lsls	r3, r3, #2
  40626e:	1d1a      	adds	r2, r3, #4
  406270:	440b      	add	r3, r1
  406272:	930e      	str	r3, [sp, #56]	; 0x38
  406274:	460b      	mov	r3, r1
  406276:	4413      	add	r3, r2
  406278:	930f      	str	r3, [sp, #60]	; 0x3c
  40627a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  40627e:	a99c      	add	r1, sp, #624	; 0x270
  406280:	f1bb 0f00 	cmp.w	fp, #0
  406284:	461a      	mov	r2, r3
  406286:	9306      	str	r3, [sp, #24]
  406288:	440b      	add	r3, r1
  40628a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  40628e:	dd28      	ble.n	4062e2 <__kernel_rem_pio2+0x162>
  406290:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
  406294:	af0f      	add	r7, sp, #60	; 0x3c
  406296:	eb0a 0602 	add.w	r6, sl, r2
  40629a:	2200      	movs	r2, #0
  40629c:	4b41      	ldr	r3, [pc, #260]	; (4063a4 <__kernel_rem_pio2+0x224>)
  40629e:	4620      	mov	r0, r4
  4062a0:	4629      	mov	r1, r5
  4062a2:	f001 f8a3 	bl	4073ec <__aeabi_dmul>
  4062a6:	f001 fb3b 	bl	407920 <__aeabi_d2iz>
  4062aa:	f001 f839 	bl	407320 <__aeabi_i2d>
  4062ae:	2200      	movs	r2, #0
  4062b0:	4b3d      	ldr	r3, [pc, #244]	; (4063a8 <__kernel_rem_pio2+0x228>)
  4062b2:	4680      	mov	r8, r0
  4062b4:	4689      	mov	r9, r1
  4062b6:	f001 f899 	bl	4073ec <__aeabi_dmul>
  4062ba:	4602      	mov	r2, r0
  4062bc:	460b      	mov	r3, r1
  4062be:	4620      	mov	r0, r4
  4062c0:	4629      	mov	r1, r5
  4062c2:	f000 fedf 	bl	407084 <__aeabi_dsub>
  4062c6:	f001 fb2b 	bl	407920 <__aeabi_d2iz>
  4062ca:	4649      	mov	r1, r9
  4062cc:	f847 0f04 	str.w	r0, [r7, #4]!
  4062d0:	4640      	mov	r0, r8
  4062d2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
  4062d6:	f000 fed7 	bl	407088 <__adddf3>
  4062da:	4604      	mov	r4, r0
  4062dc:	4556      	cmp	r6, sl
  4062de:	460d      	mov	r5, r1
  4062e0:	d1db      	bne.n	40629a <__kernel_rem_pio2+0x11a>
  4062e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  4062e6:	4620      	mov	r0, r4
  4062e8:	4629      	mov	r1, r5
  4062ea:	464a      	mov	r2, r9
  4062ec:	f000 fe3c 	bl	406f68 <scalbn>
  4062f0:	2200      	movs	r2, #0
  4062f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4062f6:	4604      	mov	r4, r0
  4062f8:	460d      	mov	r5, r1
  4062fa:	f001 f877 	bl	4073ec <__aeabi_dmul>
  4062fe:	f000 fd7f 	bl	406e00 <floor>
  406302:	2200      	movs	r2, #0
  406304:	4b29      	ldr	r3, [pc, #164]	; (4063ac <__kernel_rem_pio2+0x22c>)
  406306:	f001 f871 	bl	4073ec <__aeabi_dmul>
  40630a:	4602      	mov	r2, r0
  40630c:	460b      	mov	r3, r1
  40630e:	4620      	mov	r0, r4
  406310:	4629      	mov	r1, r5
  406312:	f000 feb7 	bl	407084 <__aeabi_dsub>
  406316:	460d      	mov	r5, r1
  406318:	4604      	mov	r4, r0
  40631a:	f001 fb01 	bl	407920 <__aeabi_d2iz>
  40631e:	4680      	mov	r8, r0
  406320:	f000 fffe 	bl	407320 <__aeabi_i2d>
  406324:	460b      	mov	r3, r1
  406326:	4602      	mov	r2, r0
  406328:	4629      	mov	r1, r5
  40632a:	4620      	mov	r0, r4
  40632c:	f000 feaa 	bl	407084 <__aeabi_dsub>
  406330:	464b      	mov	r3, r9
  406332:	4606      	mov	r6, r0
  406334:	460f      	mov	r7, r1
  406336:	2b00      	cmp	r3, #0
  406338:	f340 80f4 	ble.w	406524 <__kernel_rem_pio2+0x3a4>
  40633c:	f10b 30ff 	add.w	r0, fp, #4294967295
  406340:	ab10      	add	r3, sp, #64	; 0x40
  406342:	f1c9 0218 	rsb	r2, r9, #24
  406346:	f1c9 0117 	rsb	r1, r9, #23
  40634a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  40634e:	fa43 f402 	asr.w	r4, r3, r2
  406352:	fa04 f502 	lsl.w	r5, r4, r2
  406356:	44a0      	add	r8, r4
  406358:	1b5d      	subs	r5, r3, r5
  40635a:	ab10      	add	r3, sp, #64	; 0x40
  40635c:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  406360:	410d      	asrs	r5, r1
  406362:	2d00      	cmp	r5, #0
  406364:	dd2c      	ble.n	4063c0 <__kernel_rem_pio2+0x240>
  406366:	f1bb 0f00 	cmp.w	fp, #0
  40636a:	f108 0801 	add.w	r8, r8, #1
  40636e:	f340 80ab 	ble.w	4064c8 <__kernel_rem_pio2+0x348>
  406372:	2300      	movs	r3, #0
  406374:	aa0f      	add	r2, sp, #60	; 0x3c
  406376:	461c      	mov	r4, r3
  406378:	e008      	b.n	40638c <__kernel_rem_pio2+0x20c>
  40637a:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  40637e:	b108      	cbz	r0, 406384 <__kernel_rem_pio2+0x204>
  406380:	2401      	movs	r4, #1
  406382:	6011      	str	r1, [r2, #0]
  406384:	3301      	adds	r3, #1
  406386:	459b      	cmp	fp, r3
  406388:	f340 809f 	ble.w	4064ca <__kernel_rem_pio2+0x34a>
  40638c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  406390:	f852 0f04 	ldr.w	r0, [r2, #4]!
  406394:	2c00      	cmp	r4, #0
  406396:	d0f0      	beq.n	40637a <__kernel_rem_pio2+0x1fa>
  406398:	1a09      	subs	r1, r1, r0
  40639a:	e7f1      	b.n	406380 <__kernel_rem_pio2+0x200>
  40639c:	2aaaaaab 	.word	0x2aaaaaab
  4063a0:	0040e3c0 	.word	0x0040e3c0
  4063a4:	3e700000 	.word	0x3e700000
  4063a8:	41700000 	.word	0x41700000
  4063ac:	40200000 	.word	0x40200000
  4063b0:	2200      	movs	r2, #0
  4063b2:	4bb2      	ldr	r3, [pc, #712]	; (40667c <__kernel_rem_pio2+0x4fc>)
  4063b4:	f001 faa0 	bl	4078f8 <__aeabi_dcmpge>
  4063b8:	2800      	cmp	r0, #0
  4063ba:	f040 80d1 	bne.w	406560 <__kernel_rem_pio2+0x3e0>
  4063be:	4605      	mov	r5, r0
  4063c0:	4630      	mov	r0, r6
  4063c2:	4639      	mov	r1, r7
  4063c4:	2200      	movs	r2, #0
  4063c6:	2300      	movs	r3, #0
  4063c8:	f001 fa78 	bl	4078bc <__aeabi_dcmpeq>
  4063cc:	2800      	cmp	r0, #0
  4063ce:	f000 80d9 	beq.w	406584 <__kernel_rem_pio2+0x404>
  4063d2:	f10b 3aff 	add.w	sl, fp, #4294967295
  4063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4063d8:	4553      	cmp	r3, sl
  4063da:	dc0d      	bgt.n	4063f8 <__kernel_rem_pio2+0x278>
  4063dc:	ab10      	add	r3, sp, #64	; 0x40
  4063de:	2200      	movs	r2, #0
  4063e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4063e2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  4063e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4063ea:	4283      	cmp	r3, r0
  4063ec:	ea42 0201 	orr.w	r2, r2, r1
  4063f0:	d1f9      	bne.n	4063e6 <__kernel_rem_pio2+0x266>
  4063f2:	2a00      	cmp	r2, #0
  4063f4:	f040 8229 	bne.w	40684a <__kernel_rem_pio2+0x6ca>
  4063f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4063fa:	aa10      	add	r2, sp, #64	; 0x40
  4063fc:	3b01      	subs	r3, #1
  4063fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406402:	2b00      	cmp	r3, #0
  406404:	f040 8239 	bne.w	40687a <__kernel_rem_pio2+0x6fa>
  406408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40640a:	2301      	movs	r3, #1
  40640c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  406410:	3301      	adds	r3, #1
  406412:	2900      	cmp	r1, #0
  406414:	d0fa      	beq.n	40640c <__kernel_rem_pio2+0x28c>
  406416:	445b      	add	r3, fp
  406418:	461a      	mov	r2, r3
  40641a:	930b      	str	r3, [sp, #44]	; 0x2c
  40641c:	f10b 0301 	add.w	r3, fp, #1
  406420:	4293      	cmp	r3, r2
  406422:	dc4b      	bgt.n	4064bc <__kernel_rem_pio2+0x33c>
  406424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406426:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  40642a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40642c:	f04f 0800 	mov.w	r8, #0
  406430:	4413      	add	r3, r2
  406432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406434:	445a      	add	r2, fp
  406436:	4499      	add	r9, r3
  406438:	ebcb 0b01 	rsb	fp, fp, r1
  40643c:	00d3      	lsls	r3, r2, #3
  40643e:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
  406440:	eb02 0289 	add.w	r2, r2, r9, lsl #2
  406444:	9307      	str	r3, [sp, #28]
  406446:	9200      	str	r2, [sp, #0]
  406448:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  40644c:	9205      	str	r2, [sp, #20]
  40644e:	aa24      	add	r2, sp, #144	; 0x90
  406450:	eb02 0b03 	add.w	fp, r2, r3
  406454:	aa74      	add	r2, sp, #464	; 0x1d0
  406456:	9b06      	ldr	r3, [sp, #24]
  406458:	eb02 0a03 	add.w	sl, r2, r3
  40645c:	9b00      	ldr	r3, [sp, #0]
  40645e:	f853 0f04 	ldr.w	r0, [r3, #4]!
  406462:	9300      	str	r3, [sp, #0]
  406464:	f000 ff5c 	bl	407320 <__aeabi_i2d>
  406468:	9b03      	ldr	r3, [sp, #12]
  40646a:	2b00      	cmp	r3, #0
  40646c:	e8eb 0102 	strd	r0, r1, [fp], #8
  406470:	db27      	blt.n	4064c2 <__kernel_rem_pio2+0x342>
  406472:	9b07      	ldr	r3, [sp, #28]
  406474:	2600      	movs	r6, #0
  406476:	2700      	movs	r7, #0
  406478:	eb03 0408 	add.w	r4, r3, r8
  40647c:	9b06      	ldr	r3, [sp, #24]
  40647e:	eb08 0503 	add.w	r5, r8, r3
  406482:	9b04      	ldr	r3, [sp, #16]
  406484:	f1a3 0908 	sub.w	r9, r3, #8
  406488:	ab24      	add	r3, sp, #144	; 0x90
  40648a:	441c      	add	r4, r3
  40648c:	441d      	add	r5, r3
  40648e:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  406492:	e874 0102 	ldrd	r0, r1, [r4], #-8
  406496:	f000 ffa9 	bl	4073ec <__aeabi_dmul>
  40649a:	4602      	mov	r2, r0
  40649c:	460b      	mov	r3, r1
  40649e:	4630      	mov	r0, r6
  4064a0:	4639      	mov	r1, r7
  4064a2:	f000 fdf1 	bl	407088 <__adddf3>
  4064a6:	42ac      	cmp	r4, r5
  4064a8:	4606      	mov	r6, r0
  4064aa:	460f      	mov	r7, r1
  4064ac:	d1ef      	bne.n	40648e <__kernel_rem_pio2+0x30e>
  4064ae:	f108 0808 	add.w	r8, r8, #8
  4064b2:	9b05      	ldr	r3, [sp, #20]
  4064b4:	4598      	cmp	r8, r3
  4064b6:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  4064ba:	d1cf      	bne.n	40645c <__kernel_rem_pio2+0x2dc>
  4064bc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4064c0:	e6db      	b.n	40627a <__kernel_rem_pio2+0xfa>
  4064c2:	2600      	movs	r6, #0
  4064c4:	2700      	movs	r7, #0
  4064c6:	e7f2      	b.n	4064ae <__kernel_rem_pio2+0x32e>
  4064c8:	2400      	movs	r4, #0
  4064ca:	9b08      	ldr	r3, [sp, #32]
  4064cc:	2b00      	cmp	r3, #0
  4064ce:	dd0d      	ble.n	4064ec <__kernel_rem_pio2+0x36c>
  4064d0:	2b01      	cmp	r3, #1
  4064d2:	d030      	beq.n	406536 <__kernel_rem_pio2+0x3b6>
  4064d4:	2b02      	cmp	r3, #2
  4064d6:	d109      	bne.n	4064ec <__kernel_rem_pio2+0x36c>
  4064d8:	f10b 32ff 	add.w	r2, fp, #4294967295
  4064dc:	ab10      	add	r3, sp, #64	; 0x40
  4064de:	a910      	add	r1, sp, #64	; 0x40
  4064e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4064e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
  4064e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4064ec:	2d02      	cmp	r5, #2
  4064ee:	f47f af67 	bne.w	4063c0 <__kernel_rem_pio2+0x240>
  4064f2:	4632      	mov	r2, r6
  4064f4:	463b      	mov	r3, r7
  4064f6:	2000      	movs	r0, #0
  4064f8:	4961      	ldr	r1, [pc, #388]	; (406680 <__kernel_rem_pio2+0x500>)
  4064fa:	f000 fdc3 	bl	407084 <__aeabi_dsub>
  4064fe:	4606      	mov	r6, r0
  406500:	460f      	mov	r7, r1
  406502:	2c00      	cmp	r4, #0
  406504:	f43f af5c 	beq.w	4063c0 <__kernel_rem_pio2+0x240>
  406508:	9a08      	ldr	r2, [sp, #32]
  40650a:	2000      	movs	r0, #0
  40650c:	495c      	ldr	r1, [pc, #368]	; (406680 <__kernel_rem_pio2+0x500>)
  40650e:	f000 fd2b 	bl	406f68 <scalbn>
  406512:	4602      	mov	r2, r0
  406514:	460b      	mov	r3, r1
  406516:	4630      	mov	r0, r6
  406518:	4639      	mov	r1, r7
  40651a:	f000 fdb3 	bl	407084 <__aeabi_dsub>
  40651e:	4606      	mov	r6, r0
  406520:	460f      	mov	r7, r1
  406522:	e74d      	b.n	4063c0 <__kernel_rem_pio2+0x240>
  406524:	f47f af44 	bne.w	4063b0 <__kernel_rem_pio2+0x230>
  406528:	f10b 33ff 	add.w	r3, fp, #4294967295
  40652c:	aa10      	add	r2, sp, #64	; 0x40
  40652e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  406532:	15ed      	asrs	r5, r5, #23
  406534:	e715      	b.n	406362 <__kernel_rem_pio2+0x1e2>
  406536:	f10b 32ff 	add.w	r2, fp, #4294967295
  40653a:	ab10      	add	r3, sp, #64	; 0x40
  40653c:	a910      	add	r1, sp, #64	; 0x40
  40653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406542:	f3c3 0316 	ubfx	r3, r3, #0, #23
  406546:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40654a:	e7cf      	b.n	4064ec <__kernel_rem_pio2+0x36c>
  40654c:	2600      	movs	r6, #0
  40654e:	2700      	movs	r7, #0
  406550:	f108 0808 	add.w	r8, r8, #8
  406554:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  406558:	45d9      	cmp	r9, fp
  40655a:	f47f ae5e 	bne.w	40621a <__kernel_rem_pio2+0x9a>
  40655e:	e67f      	b.n	406260 <__kernel_rem_pio2+0xe0>
  406560:	f1bb 0f00 	cmp.w	fp, #0
  406564:	f108 0801 	add.w	r8, r8, #1
  406568:	bfc8      	it	gt
  40656a:	2502      	movgt	r5, #2
  40656c:	f73f af01 	bgt.w	406372 <__kernel_rem_pio2+0x1f2>
  406570:	4632      	mov	r2, r6
  406572:	463b      	mov	r3, r7
  406574:	2000      	movs	r0, #0
  406576:	4942      	ldr	r1, [pc, #264]	; (406680 <__kernel_rem_pio2+0x500>)
  406578:	f000 fd84 	bl	407084 <__aeabi_dsub>
  40657c:	2502      	movs	r5, #2
  40657e:	4606      	mov	r6, r0
  406580:	460f      	mov	r7, r1
  406582:	e71d      	b.n	4063c0 <__kernel_rem_pio2+0x240>
  406584:	9b08      	ldr	r3, [sp, #32]
  406586:	4630      	mov	r0, r6
  406588:	4639      	mov	r1, r7
  40658a:	9503      	str	r5, [sp, #12]
  40658c:	425a      	negs	r2, r3
  40658e:	f8cd 8014 	str.w	r8, [sp, #20]
  406592:	f000 fce9 	bl	406f68 <scalbn>
  406596:	2200      	movs	r2, #0
  406598:	4b3a      	ldr	r3, [pc, #232]	; (406684 <__kernel_rem_pio2+0x504>)
  40659a:	4604      	mov	r4, r0
  40659c:	460d      	mov	r5, r1
  40659e:	f001 f9ab 	bl	4078f8 <__aeabi_dcmpge>
  4065a2:	2800      	cmp	r0, #0
  4065a4:	f000 81e2 	beq.w	40696c <__kernel_rem_pio2+0x7ec>
  4065a8:	2200      	movs	r2, #0
  4065aa:	4b37      	ldr	r3, [pc, #220]	; (406688 <__kernel_rem_pio2+0x508>)
  4065ac:	4620      	mov	r0, r4
  4065ae:	4629      	mov	r1, r5
  4065b0:	f000 ff1c 	bl	4073ec <__aeabi_dmul>
  4065b4:	9b08      	ldr	r3, [sp, #32]
  4065b6:	f10b 0a01 	add.w	sl, fp, #1
  4065ba:	3318      	adds	r3, #24
  4065bc:	9308      	str	r3, [sp, #32]
  4065be:	f001 f9af 	bl	407920 <__aeabi_d2iz>
  4065c2:	4606      	mov	r6, r0
  4065c4:	f000 feac 	bl	407320 <__aeabi_i2d>
  4065c8:	2200      	movs	r2, #0
  4065ca:	4b2e      	ldr	r3, [pc, #184]	; (406684 <__kernel_rem_pio2+0x504>)
  4065cc:	f000 ff0e 	bl	4073ec <__aeabi_dmul>
  4065d0:	460b      	mov	r3, r1
  4065d2:	4602      	mov	r2, r0
  4065d4:	4629      	mov	r1, r5
  4065d6:	4620      	mov	r0, r4
  4065d8:	f000 fd54 	bl	407084 <__aeabi_dsub>
  4065dc:	f001 f9a0 	bl	407920 <__aeabi_d2iz>
  4065e0:	ab10      	add	r3, sp, #64	; 0x40
  4065e2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  4065e6:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
  4065ea:	9a08      	ldr	r2, [sp, #32]
  4065ec:	2000      	movs	r0, #0
  4065ee:	4924      	ldr	r1, [pc, #144]	; (406680 <__kernel_rem_pio2+0x500>)
  4065f0:	f000 fcba 	bl	406f68 <scalbn>
  4065f4:	f1ba 0f00 	cmp.w	sl, #0
  4065f8:	4604      	mov	r4, r0
  4065fa:	460d      	mov	r5, r1
  4065fc:	f2c0 80d8 	blt.w	4067b0 <__kernel_rem_pio2+0x630>
  406600:	f10a 0301 	add.w	r3, sl, #1
  406604:	af74      	add	r7, sp, #464	; 0x1d0
  406606:	aa10      	add	r2, sp, #64	; 0x40
  406608:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40660c:	9300      	str	r3, [sp, #0]
  40660e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  406612:	eb07 0608 	add.w	r6, r7, r8
  406616:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  40661a:	f000 fe81 	bl	407320 <__aeabi_i2d>
  40661e:	4622      	mov	r2, r4
  406620:	462b      	mov	r3, r5
  406622:	f000 fee3 	bl	4073ec <__aeabi_dmul>
  406626:	2200      	movs	r2, #0
  406628:	4b17      	ldr	r3, [pc, #92]	; (406688 <__kernel_rem_pio2+0x508>)
  40662a:	e966 0102 	strd	r0, r1, [r6, #-8]!
  40662e:	4620      	mov	r0, r4
  406630:	4629      	mov	r1, r5
  406632:	f000 fedb 	bl	4073ec <__aeabi_dmul>
  406636:	42be      	cmp	r6, r7
  406638:	4604      	mov	r4, r0
  40663a:	460d      	mov	r5, r1
  40663c:	d1eb      	bne.n	406616 <__kernel_rem_pio2+0x496>
  40663e:	f1a8 0b08 	sub.w	fp, r8, #8
  406642:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  406646:	f8cd a018 	str.w	sl, [sp, #24]
  40664a:	f04f 0800 	mov.w	r8, #0
  40664e:	eb06 030b 	add.w	r3, r6, fp
  406652:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  406656:	f8cd 9010 	str.w	r9, [sp, #16]
  40665a:	469b      	mov	fp, r3
  40665c:	f1ba 0f00 	cmp.w	sl, #0
  406660:	f2c0 80a3 	blt.w	4067aa <__kernel_rem_pio2+0x62a>
  406664:	f1b8 0f00 	cmp.w	r8, #0
  406668:	f2c0 809f 	blt.w	4067aa <__kernel_rem_pio2+0x62a>
  40666c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 40668c <__kernel_rem_pio2+0x50c>
  406670:	465d      	mov	r5, fp
  406672:	2600      	movs	r6, #0
  406674:	2700      	movs	r7, #0
  406676:	2400      	movs	r4, #0
  406678:	e00c      	b.n	406694 <__kernel_rem_pio2+0x514>
  40667a:	bf00      	nop
  40667c:	3fe00000 	.word	0x3fe00000
  406680:	3ff00000 	.word	0x3ff00000
  406684:	41700000 	.word	0x41700000
  406688:	3e700000 	.word	0x3e700000
  40668c:	0040e3c8 	.word	0x0040e3c8
  406690:	4544      	cmp	r4, r8
  406692:	dc10      	bgt.n	4066b6 <__kernel_rem_pio2+0x536>
  406694:	3401      	adds	r4, #1
  406696:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  40669a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  40669e:	f000 fea5 	bl	4073ec <__aeabi_dmul>
  4066a2:	4602      	mov	r2, r0
  4066a4:	460b      	mov	r3, r1
  4066a6:	4630      	mov	r0, r6
  4066a8:	4639      	mov	r1, r7
  4066aa:	f000 fced 	bl	407088 <__adddf3>
  4066ae:	45a2      	cmp	sl, r4
  4066b0:	4606      	mov	r6, r0
  4066b2:	460f      	mov	r7, r1
  4066b4:	daec      	bge.n	406690 <__kernel_rem_pio2+0x510>
  4066b6:	9b04      	ldr	r3, [sp, #16]
  4066b8:	f1ab 0b08 	sub.w	fp, fp, #8
  4066bc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4066c0:	f108 0801 	add.w	r8, r8, #1
  4066c4:	e9c3 6700 	strd	r6, r7, [r3]
  4066c8:	9b00      	ldr	r3, [sp, #0]
  4066ca:	4598      	cmp	r8, r3
  4066cc:	d1c6      	bne.n	40665c <__kernel_rem_pio2+0x4dc>
  4066ce:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4066d0:	f8dd a018 	ldr.w	sl, [sp, #24]
  4066d4:	f8dd 9010 	ldr.w	r9, [sp, #16]
  4066d8:	2b03      	cmp	r3, #3
  4066da:	d83d      	bhi.n	406758 <__kernel_rem_pio2+0x5d8>
  4066dc:	e8df f013 	tbh	[pc, r3, lsl #1]
  4066e0:	00040043 	.word	0x00040043
  4066e4:	00cf0004 	.word	0x00cf0004
  4066e8:	2400      	movs	r4, #0
  4066ea:	9b00      	ldr	r3, [sp, #0]
  4066ec:	4626      	mov	r6, r4
  4066ee:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
  4066f2:	4620      	mov	r0, r4
  4066f4:	4631      	mov	r1, r6
  4066f6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4066fa:	f000 fcc5 	bl	407088 <__adddf3>
  4066fe:	4604      	mov	r4, r0
  406700:	454d      	cmp	r5, r9
  406702:	460e      	mov	r6, r1
  406704:	d1f5      	bne.n	4066f2 <__kernel_rem_pio2+0x572>
  406706:	9b03      	ldr	r3, [sp, #12]
  406708:	2b00      	cmp	r3, #0
  40670a:	f000 8084 	beq.w	406816 <__kernel_rem_pio2+0x696>
  40670e:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  406712:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406714:	4622      	mov	r2, r4
  406716:	4633      	mov	r3, r6
  406718:	6069      	str	r1, [r5, #4]
  40671a:	602c      	str	r4, [r5, #0]
  40671c:	e9d9 0100 	ldrd	r0, r1, [r9]
  406720:	f000 fcb0 	bl	407084 <__aeabi_dsub>
  406724:	f1ba 0f00 	cmp.w	sl, #0
  406728:	4602      	mov	r2, r0
  40672a:	460b      	mov	r3, r1
  40672c:	dd0d      	ble.n	40674a <__kernel_rem_pio2+0x5ca>
  40672e:	2401      	movs	r4, #1
  406730:	3401      	adds	r4, #1
  406732:	4610      	mov	r0, r2
  406734:	4619      	mov	r1, r3
  406736:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  40673a:	f000 fca5 	bl	407088 <__adddf3>
  40673e:	45a2      	cmp	sl, r4
  406740:	4602      	mov	r2, r0
  406742:	460b      	mov	r3, r1
  406744:	daf4      	bge.n	406730 <__kernel_rem_pio2+0x5b0>
  406746:	9903      	ldr	r1, [sp, #12]
  406748:	b109      	cbz	r1, 40674e <__kernel_rem_pio2+0x5ce>
  40674a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40674e:	4619      	mov	r1, r3
  406750:	4610      	mov	r0, r2
  406752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406754:	e9c3 0102 	strd	r0, r1, [r3, #8]
  406758:	9b05      	ldr	r3, [sp, #20]
  40675a:	f003 0007 	and.w	r0, r3, #7
  40675e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  406762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406766:	9b00      	ldr	r3, [sp, #0]
  406768:	2200      	movs	r2, #0
  40676a:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  40676e:	4613      	mov	r3, r2
  406770:	f10a 3aff 	add.w	sl, sl, #4294967295
  406774:	4610      	mov	r0, r2
  406776:	4619      	mov	r1, r3
  406778:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  40677c:	f000 fc84 	bl	407088 <__adddf3>
  406780:	f1ba 3fff 	cmp.w	sl, #4294967295
  406784:	4602      	mov	r2, r0
  406786:	460b      	mov	r3, r1
  406788:	d1f2      	bne.n	406770 <__kernel_rem_pio2+0x5f0>
  40678a:	9903      	ldr	r1, [sp, #12]
  40678c:	b109      	cbz	r1, 406792 <__kernel_rem_pio2+0x612>
  40678e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  406792:	4610      	mov	r0, r2
  406794:	4619      	mov	r1, r3
  406796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406798:	e9c3 0100 	strd	r0, r1, [r3]
  40679c:	9b05      	ldr	r3, [sp, #20]
  40679e:	f003 0007 	and.w	r0, r3, #7
  4067a2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4067a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067aa:	2600      	movs	r6, #0
  4067ac:	2700      	movs	r7, #0
  4067ae:	e782      	b.n	4066b6 <__kernel_rem_pio2+0x536>
  4067b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4067b2:	2b03      	cmp	r3, #3
  4067b4:	d8d0      	bhi.n	406758 <__kernel_rem_pio2+0x5d8>
  4067b6:	e8df f003 	tbb	[pc, r3]
  4067ba:	2645      	.short	0x2645
  4067bc:	0226      	.short	0x0226
  4067be:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  4067c2:	2300      	movs	r3, #0
  4067c4:	9903      	ldr	r1, [sp, #12]
  4067c6:	461a      	mov	r2, r3
  4067c8:	2900      	cmp	r1, #0
  4067ca:	f000 80b9 	beq.w	406940 <__kernel_rem_pio2+0x7c0>
  4067ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4067d0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4067d4:	f8d9 0004 	ldr.w	r0, [r9, #4]
  4067d8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  4067dc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4067e0:	613b      	str	r3, [r7, #16]
  4067e2:	9b05      	ldr	r3, [sp, #20]
  4067e4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4067e8:	f8d9 4000 	ldr.w	r4, [r9]
  4067ec:	f8d9 5008 	ldr.w	r5, [r9, #8]
  4067f0:	6078      	str	r0, [r7, #4]
  4067f2:	f003 0007 	and.w	r0, r3, #7
  4067f6:	617a      	str	r2, [r7, #20]
  4067f8:	60f9      	str	r1, [r7, #12]
  4067fa:	603c      	str	r4, [r7, #0]
  4067fc:	60bd      	str	r5, [r7, #8]
  4067fe:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  406802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406806:	2400      	movs	r4, #0
  406808:	9b03      	ldr	r3, [sp, #12]
  40680a:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  40680e:	4626      	mov	r6, r4
  406810:	2b00      	cmp	r3, #0
  406812:	f47f af7c 	bne.w	40670e <__kernel_rem_pio2+0x58e>
  406816:	4620      	mov	r0, r4
  406818:	4622      	mov	r2, r4
  40681a:	4631      	mov	r1, r6
  40681c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40681e:	4633      	mov	r3, r6
  406820:	e9c4 0100 	strd	r0, r1, [r4]
  406824:	e9d9 0100 	ldrd	r0, r1, [r9]
  406828:	f000 fc2c 	bl	407084 <__aeabi_dsub>
  40682c:	f1ba 0f00 	cmp.w	sl, #0
  406830:	4602      	mov	r2, r0
  406832:	460b      	mov	r3, r1
  406834:	f73f af7b 	bgt.w	40672e <__kernel_rem_pio2+0x5ae>
  406838:	4619      	mov	r1, r3
  40683a:	4610      	mov	r0, r2
  40683c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40683e:	e9c3 0102 	strd	r0, r1, [r3, #8]
  406842:	e789      	b.n	406758 <__kernel_rem_pio2+0x5d8>
  406844:	2200      	movs	r2, #0
  406846:	4613      	mov	r3, r2
  406848:	e79f      	b.n	40678a <__kernel_rem_pio2+0x60a>
  40684a:	9a08      	ldr	r2, [sp, #32]
  40684c:	ab10      	add	r3, sp, #64	; 0x40
  40684e:	9503      	str	r5, [sp, #12]
  406850:	3a18      	subs	r2, #24
  406852:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  406856:	f8cd 8014 	str.w	r8, [sp, #20]
  40685a:	9208      	str	r2, [sp, #32]
  40685c:	2b00      	cmp	r3, #0
  40685e:	f47f aec4 	bne.w	4065ea <__kernel_rem_pio2+0x46a>
  406862:	ab10      	add	r3, sp, #64	; 0x40
  406864:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  406868:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40686c:	f10a 3aff 	add.w	sl, sl, #4294967295
  406870:	3a18      	subs	r2, #24
  406872:	2900      	cmp	r1, #0
  406874:	d0f8      	beq.n	406868 <__kernel_rem_pio2+0x6e8>
  406876:	9208      	str	r2, [sp, #32]
  406878:	e6b7      	b.n	4065ea <__kernel_rem_pio2+0x46a>
  40687a:	2301      	movs	r3, #1
  40687c:	e5cb      	b.n	406416 <__kernel_rem_pio2+0x296>
  40687e:	f1ba 0f00 	cmp.w	sl, #0
  406882:	dd9e      	ble.n	4067c2 <__kernel_rem_pio2+0x642>
  406884:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  406888:	eb09 0b08 	add.w	fp, r9, r8
  40688c:	e9db 6700 	ldrd	r6, r7, [fp]
  406890:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
  406894:	4630      	mov	r0, r6
  406896:	4639      	mov	r1, r7
  406898:	e9cd 2300 	strd	r2, r3, [sp]
  40689c:	f000 fbf4 	bl	407088 <__adddf3>
  4068a0:	4604      	mov	r4, r0
  4068a2:	460d      	mov	r5, r1
  4068a4:	4622      	mov	r2, r4
  4068a6:	462b      	mov	r3, r5
  4068a8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4068ac:	f000 fbea 	bl	407084 <__aeabi_dsub>
  4068b0:	4602      	mov	r2, r0
  4068b2:	460b      	mov	r3, r1
  4068b4:	4630      	mov	r0, r6
  4068b6:	4639      	mov	r1, r7
  4068b8:	4626      	mov	r6, r4
  4068ba:	f000 fbe5 	bl	407088 <__adddf3>
  4068be:	45cb      	cmp	fp, r9
  4068c0:	462f      	mov	r7, r5
  4068c2:	e9cb 0102 	strd	r0, r1, [fp, #8]
  4068c6:	e9cb 4500 	strd	r4, r5, [fp]
  4068ca:	d1e1      	bne.n	406890 <__kernel_rem_pio2+0x710>
  4068cc:	f1ba 0f01 	cmp.w	sl, #1
  4068d0:	f77f af77 	ble.w	4067c2 <__kernel_rem_pio2+0x642>
  4068d4:	eb09 0a08 	add.w	sl, r9, r8
  4068d8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  4068dc:	e9da 6700 	ldrd	r6, r7, [sl]
  4068e0:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  4068e4:	4632      	mov	r2, r6
  4068e6:	463b      	mov	r3, r7
  4068e8:	e9cd 0100 	strd	r0, r1, [sp]
  4068ec:	f000 fbcc 	bl	407088 <__adddf3>
  4068f0:	4604      	mov	r4, r0
  4068f2:	460d      	mov	r5, r1
  4068f4:	4622      	mov	r2, r4
  4068f6:	462b      	mov	r3, r5
  4068f8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4068fc:	f000 fbc2 	bl	407084 <__aeabi_dsub>
  406900:	4632      	mov	r2, r6
  406902:	463b      	mov	r3, r7
  406904:	4626      	mov	r6, r4
  406906:	f000 fbbf 	bl	407088 <__adddf3>
  40690a:	45da      	cmp	sl, fp
  40690c:	462f      	mov	r7, r5
  40690e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  406912:	e9ca 4500 	strd	r4, r5, [sl]
  406916:	d1e3      	bne.n	4068e0 <__kernel_rem_pio2+0x760>
  406918:	f108 0408 	add.w	r4, r8, #8
  40691c:	2300      	movs	r3, #0
  40691e:	ad50      	add	r5, sp, #320	; 0x140
  406920:	444c      	add	r4, r9
  406922:	461a      	mov	r2, r3
  406924:	4618      	mov	r0, r3
  406926:	4611      	mov	r1, r2
  406928:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40692c:	f000 fbac 	bl	407088 <__adddf3>
  406930:	4603      	mov	r3, r0
  406932:	42ac      	cmp	r4, r5
  406934:	460a      	mov	r2, r1
  406936:	d1f5      	bne.n	406924 <__kernel_rem_pio2+0x7a4>
  406938:	9903      	ldr	r1, [sp, #12]
  40693a:	2900      	cmp	r1, #0
  40693c:	f47f af47 	bne.w	4067ce <__kernel_rem_pio2+0x64e>
  406940:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406942:	4618      	mov	r0, r3
  406944:	4611      	mov	r1, r2
  406946:	4604      	mov	r4, r0
  406948:	460d      	mov	r5, r1
  40694a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40694e:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
  406952:	e9c7 2300 	strd	r2, r3, [r7]
  406956:	9b05      	ldr	r3, [sp, #20]
  406958:	e9c7 0102 	strd	r0, r1, [r7, #8]
  40695c:	f003 0007 	and.w	r0, r3, #7
  406960:	e9c7 4504 	strd	r4, r5, [r7, #16]
  406964:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  406968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40696c:	4620      	mov	r0, r4
  40696e:	4629      	mov	r1, r5
  406970:	f000 ffd6 	bl	407920 <__aeabi_d2iz>
  406974:	ab10      	add	r3, sp, #64	; 0x40
  406976:	46da      	mov	sl, fp
  406978:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  40697c:	e635      	b.n	4065ea <__kernel_rem_pio2+0x46a>
  40697e:	bf00      	nop

00406980 <__kernel_sin>:
  406980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406984:	4699      	mov	r9, r3
  406986:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40698a:	b085      	sub	sp, #20
  40698c:	460c      	mov	r4, r1
  40698e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  406992:	4690      	mov	r8, r2
  406994:	4605      	mov	r5, r0
  406996:	da04      	bge.n	4069a2 <__kernel_sin+0x22>
  406998:	f000 ffc2 	bl	407920 <__aeabi_d2iz>
  40699c:	2800      	cmp	r0, #0
  40699e:	f000 8083 	beq.w	406aa8 <__kernel_sin+0x128>
  4069a2:	462a      	mov	r2, r5
  4069a4:	4623      	mov	r3, r4
  4069a6:	4628      	mov	r0, r5
  4069a8:	4621      	mov	r1, r4
  4069aa:	f000 fd1f 	bl	4073ec <__aeabi_dmul>
  4069ae:	4606      	mov	r6, r0
  4069b0:	460f      	mov	r7, r1
  4069b2:	462a      	mov	r2, r5
  4069b4:	4623      	mov	r3, r4
  4069b6:	f000 fd19 	bl	4073ec <__aeabi_dmul>
  4069ba:	4682      	mov	sl, r0
  4069bc:	468b      	mov	fp, r1
  4069be:	4630      	mov	r0, r6
  4069c0:	4639      	mov	r1, r7
  4069c2:	a33d      	add	r3, pc, #244	; (adr r3, 406ab8 <__kernel_sin+0x138>)
  4069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069c8:	f000 fd10 	bl	4073ec <__aeabi_dmul>
  4069cc:	a33c      	add	r3, pc, #240	; (adr r3, 406ac0 <__kernel_sin+0x140>)
  4069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069d2:	f000 fb57 	bl	407084 <__aeabi_dsub>
  4069d6:	4632      	mov	r2, r6
  4069d8:	463b      	mov	r3, r7
  4069da:	f000 fd07 	bl	4073ec <__aeabi_dmul>
  4069de:	a33a      	add	r3, pc, #232	; (adr r3, 406ac8 <__kernel_sin+0x148>)
  4069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069e4:	f000 fb50 	bl	407088 <__adddf3>
  4069e8:	4632      	mov	r2, r6
  4069ea:	463b      	mov	r3, r7
  4069ec:	f000 fcfe 	bl	4073ec <__aeabi_dmul>
  4069f0:	a337      	add	r3, pc, #220	; (adr r3, 406ad0 <__kernel_sin+0x150>)
  4069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069f6:	f000 fb45 	bl	407084 <__aeabi_dsub>
  4069fa:	4632      	mov	r2, r6
  4069fc:	463b      	mov	r3, r7
  4069fe:	f000 fcf5 	bl	4073ec <__aeabi_dmul>
  406a02:	a335      	add	r3, pc, #212	; (adr r3, 406ad8 <__kernel_sin+0x158>)
  406a04:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a08:	f000 fb3e 	bl	407088 <__adddf3>
  406a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406a0e:	e9cd 0100 	strd	r0, r1, [sp]
  406a12:	b39b      	cbz	r3, 406a7c <__kernel_sin+0xfc>
  406a14:	4640      	mov	r0, r8
  406a16:	4649      	mov	r1, r9
  406a18:	2200      	movs	r2, #0
  406a1a:	4b33      	ldr	r3, [pc, #204]	; (406ae8 <__kernel_sin+0x168>)
  406a1c:	f000 fce6 	bl	4073ec <__aeabi_dmul>
  406a20:	e9dd 2300 	ldrd	r2, r3, [sp]
  406a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406a28:	4650      	mov	r0, sl
  406a2a:	4659      	mov	r1, fp
  406a2c:	f000 fcde 	bl	4073ec <__aeabi_dmul>
  406a30:	4602      	mov	r2, r0
  406a32:	460b      	mov	r3, r1
  406a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a38:	f000 fb24 	bl	407084 <__aeabi_dsub>
  406a3c:	4632      	mov	r2, r6
  406a3e:	463b      	mov	r3, r7
  406a40:	f000 fcd4 	bl	4073ec <__aeabi_dmul>
  406a44:	4642      	mov	r2, r8
  406a46:	464b      	mov	r3, r9
  406a48:	f000 fb1c 	bl	407084 <__aeabi_dsub>
  406a4c:	4606      	mov	r6, r0
  406a4e:	460f      	mov	r7, r1
  406a50:	4650      	mov	r0, sl
  406a52:	4659      	mov	r1, fp
  406a54:	a322      	add	r3, pc, #136	; (adr r3, 406ae0 <__kernel_sin+0x160>)
  406a56:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a5a:	f000 fcc7 	bl	4073ec <__aeabi_dmul>
  406a5e:	4602      	mov	r2, r0
  406a60:	460b      	mov	r3, r1
  406a62:	4630      	mov	r0, r6
  406a64:	4639      	mov	r1, r7
  406a66:	f000 fb0f 	bl	407088 <__adddf3>
  406a6a:	4602      	mov	r2, r0
  406a6c:	460b      	mov	r3, r1
  406a6e:	4628      	mov	r0, r5
  406a70:	4621      	mov	r1, r4
  406a72:	f000 fb07 	bl	407084 <__aeabi_dsub>
  406a76:	b005      	add	sp, #20
  406a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
  406a80:	4630      	mov	r0, r6
  406a82:	4639      	mov	r1, r7
  406a84:	f000 fcb2 	bl	4073ec <__aeabi_dmul>
  406a88:	a315      	add	r3, pc, #84	; (adr r3, 406ae0 <__kernel_sin+0x160>)
  406a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a8e:	f000 faf9 	bl	407084 <__aeabi_dsub>
  406a92:	4652      	mov	r2, sl
  406a94:	465b      	mov	r3, fp
  406a96:	f000 fca9 	bl	4073ec <__aeabi_dmul>
  406a9a:	462a      	mov	r2, r5
  406a9c:	4623      	mov	r3, r4
  406a9e:	f000 faf3 	bl	407088 <__adddf3>
  406aa2:	b005      	add	sp, #20
  406aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406aa8:	4628      	mov	r0, r5
  406aaa:	4621      	mov	r1, r4
  406aac:	b005      	add	sp, #20
  406aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ab2:	bf00      	nop
  406ab4:	f3af 8000 	nop.w
  406ab8:	5acfd57c 	.word	0x5acfd57c
  406abc:	3de5d93a 	.word	0x3de5d93a
  406ac0:	8a2b9ceb 	.word	0x8a2b9ceb
  406ac4:	3e5ae5e6 	.word	0x3e5ae5e6
  406ac8:	57b1fe7d 	.word	0x57b1fe7d
  406acc:	3ec71de3 	.word	0x3ec71de3
  406ad0:	19c161d5 	.word	0x19c161d5
  406ad4:	3f2a01a0 	.word	0x3f2a01a0
  406ad8:	1110f8a6 	.word	0x1110f8a6
  406adc:	3f811111 	.word	0x3f811111
  406ae0:	55555549 	.word	0x55555549
  406ae4:	3fc55555 	.word	0x3fc55555
  406ae8:	3fe00000 	.word	0x3fe00000
  406aec:	00000000 	.word	0x00000000

00406af0 <atan>:
  406af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406af4:	4bb2      	ldr	r3, [pc, #712]	; (406dc0 <atan+0x2d0>)
  406af6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  406afa:	460d      	mov	r5, r1
  406afc:	4604      	mov	r4, r0
  406afe:	4598      	cmp	r8, r3
  406b00:	468b      	mov	fp, r1
  406b02:	dd11      	ble.n	406b28 <atan+0x38>
  406b04:	4baf      	ldr	r3, [pc, #700]	; (406dc4 <atan+0x2d4>)
  406b06:	4598      	cmp	r8, r3
  406b08:	dc04      	bgt.n	406b14 <atan+0x24>
  406b0a:	f040 80db 	bne.w	406cc4 <atan+0x1d4>
  406b0e:	2800      	cmp	r0, #0
  406b10:	f000 80d8 	beq.w	406cc4 <atan+0x1d4>
  406b14:	4620      	mov	r0, r4
  406b16:	4622      	mov	r2, r4
  406b18:	4629      	mov	r1, r5
  406b1a:	462b      	mov	r3, r5
  406b1c:	f000 fab4 	bl	407088 <__adddf3>
  406b20:	4604      	mov	r4, r0
  406b22:	4620      	mov	r0, r4
  406b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b28:	4ba7      	ldr	r3, [pc, #668]	; (406dc8 <atan+0x2d8>)
  406b2a:	4598      	cmp	r8, r3
  406b2c:	f300 80ad 	bgt.w	406c8a <atan+0x19a>
  406b30:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  406b34:	4598      	cmp	r8, r3
  406b36:	f340 8098 	ble.w	406c6a <atan+0x17a>
  406b3a:	f04f 3aff 	mov.w	sl, #4294967295
  406b3e:	4622      	mov	r2, r4
  406b40:	462b      	mov	r3, r5
  406b42:	4620      	mov	r0, r4
  406b44:	4629      	mov	r1, r5
  406b46:	f000 fc51 	bl	4073ec <__aeabi_dmul>
  406b4a:	4602      	mov	r2, r0
  406b4c:	460b      	mov	r3, r1
  406b4e:	4680      	mov	r8, r0
  406b50:	4689      	mov	r9, r1
  406b52:	f000 fc4b 	bl	4073ec <__aeabi_dmul>
  406b56:	4606      	mov	r6, r0
  406b58:	460f      	mov	r7, r1
  406b5a:	a381      	add	r3, pc, #516	; (adr r3, 406d60 <atan+0x270>)
  406b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b60:	f000 fc44 	bl	4073ec <__aeabi_dmul>
  406b64:	a380      	add	r3, pc, #512	; (adr r3, 406d68 <atan+0x278>)
  406b66:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b6a:	f000 fa8d 	bl	407088 <__adddf3>
  406b6e:	4632      	mov	r2, r6
  406b70:	463b      	mov	r3, r7
  406b72:	f000 fc3b 	bl	4073ec <__aeabi_dmul>
  406b76:	a37e      	add	r3, pc, #504	; (adr r3, 406d70 <atan+0x280>)
  406b78:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b7c:	f000 fa84 	bl	407088 <__adddf3>
  406b80:	4632      	mov	r2, r6
  406b82:	463b      	mov	r3, r7
  406b84:	f000 fc32 	bl	4073ec <__aeabi_dmul>
  406b88:	a37b      	add	r3, pc, #492	; (adr r3, 406d78 <atan+0x288>)
  406b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b8e:	f000 fa7b 	bl	407088 <__adddf3>
  406b92:	4632      	mov	r2, r6
  406b94:	463b      	mov	r3, r7
  406b96:	f000 fc29 	bl	4073ec <__aeabi_dmul>
  406b9a:	a379      	add	r3, pc, #484	; (adr r3, 406d80 <atan+0x290>)
  406b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ba0:	f000 fa72 	bl	407088 <__adddf3>
  406ba4:	4632      	mov	r2, r6
  406ba6:	463b      	mov	r3, r7
  406ba8:	f000 fc20 	bl	4073ec <__aeabi_dmul>
  406bac:	a376      	add	r3, pc, #472	; (adr r3, 406d88 <atan+0x298>)
  406bae:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bb2:	f000 fa69 	bl	407088 <__adddf3>
  406bb6:	4642      	mov	r2, r8
  406bb8:	464b      	mov	r3, r9
  406bba:	f000 fc17 	bl	4073ec <__aeabi_dmul>
  406bbe:	4680      	mov	r8, r0
  406bc0:	4689      	mov	r9, r1
  406bc2:	4630      	mov	r0, r6
  406bc4:	4639      	mov	r1, r7
  406bc6:	a372      	add	r3, pc, #456	; (adr r3, 406d90 <atan+0x2a0>)
  406bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bcc:	f000 fc0e 	bl	4073ec <__aeabi_dmul>
  406bd0:	a371      	add	r3, pc, #452	; (adr r3, 406d98 <atan+0x2a8>)
  406bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bd6:	f000 fa55 	bl	407084 <__aeabi_dsub>
  406bda:	4632      	mov	r2, r6
  406bdc:	463b      	mov	r3, r7
  406bde:	f000 fc05 	bl	4073ec <__aeabi_dmul>
  406be2:	a36f      	add	r3, pc, #444	; (adr r3, 406da0 <atan+0x2b0>)
  406be4:	e9d3 2300 	ldrd	r2, r3, [r3]
  406be8:	f000 fa4c 	bl	407084 <__aeabi_dsub>
  406bec:	4632      	mov	r2, r6
  406bee:	463b      	mov	r3, r7
  406bf0:	f000 fbfc 	bl	4073ec <__aeabi_dmul>
  406bf4:	a36c      	add	r3, pc, #432	; (adr r3, 406da8 <atan+0x2b8>)
  406bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bfa:	f000 fa43 	bl	407084 <__aeabi_dsub>
  406bfe:	4632      	mov	r2, r6
  406c00:	463b      	mov	r3, r7
  406c02:	f000 fbf3 	bl	4073ec <__aeabi_dmul>
  406c06:	a36a      	add	r3, pc, #424	; (adr r3, 406db0 <atan+0x2c0>)
  406c08:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c0c:	f000 fa3a 	bl	407084 <__aeabi_dsub>
  406c10:	4632      	mov	r2, r6
  406c12:	463b      	mov	r3, r7
  406c14:	f000 fbea 	bl	4073ec <__aeabi_dmul>
  406c18:	f1ba 3fff 	cmp.w	sl, #4294967295
  406c1c:	4602      	mov	r2, r0
  406c1e:	460b      	mov	r3, r1
  406c20:	d05a      	beq.n	406cd8 <atan+0x1e8>
  406c22:	4640      	mov	r0, r8
  406c24:	4649      	mov	r1, r9
  406c26:	f000 fa2f 	bl	407088 <__adddf3>
  406c2a:	4622      	mov	r2, r4
  406c2c:	462b      	mov	r3, r5
  406c2e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
  406c32:	f000 fbdb 	bl	4073ec <__aeabi_dmul>
  406c36:	4e65      	ldr	r6, [pc, #404]	; (406dcc <atan+0x2dc>)
  406c38:	4b65      	ldr	r3, [pc, #404]	; (406dd0 <atan+0x2e0>)
  406c3a:	4456      	add	r6, sl
  406c3c:	449a      	add	sl, r3
  406c3e:	e9da 2300 	ldrd	r2, r3, [sl]
  406c42:	f000 fa1f 	bl	407084 <__aeabi_dsub>
  406c46:	4622      	mov	r2, r4
  406c48:	462b      	mov	r3, r5
  406c4a:	f000 fa1b 	bl	407084 <__aeabi_dsub>
  406c4e:	4602      	mov	r2, r0
  406c50:	460b      	mov	r3, r1
  406c52:	e9d6 0100 	ldrd	r0, r1, [r6]
  406c56:	f000 fa15 	bl	407084 <__aeabi_dsub>
  406c5a:	f1bb 0f00 	cmp.w	fp, #0
  406c5e:	4604      	mov	r4, r0
  406c60:	f6bf af5f 	bge.w	406b22 <atan+0x32>
  406c64:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  406c68:	e75b      	b.n	406b22 <atan+0x32>
  406c6a:	a353      	add	r3, pc, #332	; (adr r3, 406db8 <atan+0x2c8>)
  406c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c70:	f000 fa0a 	bl	407088 <__adddf3>
  406c74:	2200      	movs	r2, #0
  406c76:	4b57      	ldr	r3, [pc, #348]	; (406dd4 <atan+0x2e4>)
  406c78:	f000 fe48 	bl	40790c <__aeabi_dcmpgt>
  406c7c:	2800      	cmp	r0, #0
  406c7e:	f43f af5c 	beq.w	406b3a <atan+0x4a>
  406c82:	4629      	mov	r1, r5
  406c84:	4620      	mov	r0, r4
  406c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c8a:	f000 f8b3 	bl	406df4 <fabs>
  406c8e:	4b52      	ldr	r3, [pc, #328]	; (406dd8 <atan+0x2e8>)
  406c90:	4606      	mov	r6, r0
  406c92:	460f      	mov	r7, r1
  406c94:	4598      	cmp	r8, r3
  406c96:	dc2f      	bgt.n	406cf8 <atan+0x208>
  406c98:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  406c9c:	4598      	cmp	r8, r3
  406c9e:	dc54      	bgt.n	406d4a <atan+0x25a>
  406ca0:	4602      	mov	r2, r0
  406ca2:	460b      	mov	r3, r1
  406ca4:	f000 f9f0 	bl	407088 <__adddf3>
  406ca8:	2200      	movs	r2, #0
  406caa:	4b4a      	ldr	r3, [pc, #296]	; (406dd4 <atan+0x2e4>)
  406cac:	f04f 0a00 	mov.w	sl, #0
  406cb0:	f000 f9e8 	bl	407084 <__aeabi_dsub>
  406cb4:	2200      	movs	r2, #0
  406cb6:	4604      	mov	r4, r0
  406cb8:	460d      	mov	r5, r1
  406cba:	4630      	mov	r0, r6
  406cbc:	4639      	mov	r1, r7
  406cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406cc2:	e02c      	b.n	406d1e <atan+0x22e>
  406cc4:	4b45      	ldr	r3, [pc, #276]	; (406ddc <atan+0x2ec>)
  406cc6:	4c46      	ldr	r4, [pc, #280]	; (406de0 <atan+0x2f0>)
  406cc8:	4946      	ldr	r1, [pc, #280]	; (406de4 <atan+0x2f4>)
  406cca:	4620      	mov	r0, r4
  406ccc:	f1bb 0f00 	cmp.w	fp, #0
  406cd0:	bfc8      	it	gt
  406cd2:	4619      	movgt	r1, r3
  406cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cd8:	4640      	mov	r0, r8
  406cda:	4649      	mov	r1, r9
  406cdc:	f000 f9d4 	bl	407088 <__adddf3>
  406ce0:	4622      	mov	r2, r4
  406ce2:	462b      	mov	r3, r5
  406ce4:	f000 fb82 	bl	4073ec <__aeabi_dmul>
  406ce8:	4602      	mov	r2, r0
  406cea:	460b      	mov	r3, r1
  406cec:	4620      	mov	r0, r4
  406cee:	4629      	mov	r1, r5
  406cf0:	f000 f9c8 	bl	407084 <__aeabi_dsub>
  406cf4:	4604      	mov	r4, r0
  406cf6:	e714      	b.n	406b22 <atan+0x32>
  406cf8:	4b3b      	ldr	r3, [pc, #236]	; (406de8 <atan+0x2f8>)
  406cfa:	4598      	cmp	r8, r3
  406cfc:	dc1a      	bgt.n	406d34 <atan+0x244>
  406cfe:	2200      	movs	r2, #0
  406d00:	4b3a      	ldr	r3, [pc, #232]	; (406dec <atan+0x2fc>)
  406d02:	f000 f9bf 	bl	407084 <__aeabi_dsub>
  406d06:	2200      	movs	r2, #0
  406d08:	4604      	mov	r4, r0
  406d0a:	460d      	mov	r5, r1
  406d0c:	4630      	mov	r0, r6
  406d0e:	4639      	mov	r1, r7
  406d10:	4b36      	ldr	r3, [pc, #216]	; (406dec <atan+0x2fc>)
  406d12:	f04f 0a02 	mov.w	sl, #2
  406d16:	f000 fb69 	bl	4073ec <__aeabi_dmul>
  406d1a:	2200      	movs	r2, #0
  406d1c:	4b2d      	ldr	r3, [pc, #180]	; (406dd4 <atan+0x2e4>)
  406d1e:	f000 f9b3 	bl	407088 <__adddf3>
  406d22:	4602      	mov	r2, r0
  406d24:	460b      	mov	r3, r1
  406d26:	4620      	mov	r0, r4
  406d28:	4629      	mov	r1, r5
  406d2a:	f000 fc89 	bl	407640 <__aeabi_ddiv>
  406d2e:	4604      	mov	r4, r0
  406d30:	460d      	mov	r5, r1
  406d32:	e704      	b.n	406b3e <atan+0x4e>
  406d34:	4602      	mov	r2, r0
  406d36:	460b      	mov	r3, r1
  406d38:	2000      	movs	r0, #0
  406d3a:	492d      	ldr	r1, [pc, #180]	; (406df0 <atan+0x300>)
  406d3c:	f000 fc80 	bl	407640 <__aeabi_ddiv>
  406d40:	f04f 0a03 	mov.w	sl, #3
  406d44:	4604      	mov	r4, r0
  406d46:	460d      	mov	r5, r1
  406d48:	e6f9      	b.n	406b3e <atan+0x4e>
  406d4a:	2200      	movs	r2, #0
  406d4c:	4b21      	ldr	r3, [pc, #132]	; (406dd4 <atan+0x2e4>)
  406d4e:	f000 f999 	bl	407084 <__aeabi_dsub>
  406d52:	f04f 0a01 	mov.w	sl, #1
  406d56:	4604      	mov	r4, r0
  406d58:	460d      	mov	r5, r1
  406d5a:	4630      	mov	r0, r6
  406d5c:	4639      	mov	r1, r7
  406d5e:	e7dc      	b.n	406d1a <atan+0x22a>
  406d60:	e322da11 	.word	0xe322da11
  406d64:	3f90ad3a 	.word	0x3f90ad3a
  406d68:	24760deb 	.word	0x24760deb
  406d6c:	3fa97b4b 	.word	0x3fa97b4b
  406d70:	a0d03d51 	.word	0xa0d03d51
  406d74:	3fb10d66 	.word	0x3fb10d66
  406d78:	c54c206e 	.word	0xc54c206e
  406d7c:	3fb745cd 	.word	0x3fb745cd
  406d80:	920083ff 	.word	0x920083ff
  406d84:	3fc24924 	.word	0x3fc24924
  406d88:	5555550d 	.word	0x5555550d
  406d8c:	3fd55555 	.word	0x3fd55555
  406d90:	2c6a6c2f 	.word	0x2c6a6c2f
  406d94:	bfa2b444 	.word	0xbfa2b444
  406d98:	52defd9a 	.word	0x52defd9a
  406d9c:	3fadde2d 	.word	0x3fadde2d
  406da0:	af749a6d 	.word	0xaf749a6d
  406da4:	3fb3b0f2 	.word	0x3fb3b0f2
  406da8:	fe231671 	.word	0xfe231671
  406dac:	3fbc71c6 	.word	0x3fbc71c6
  406db0:	9998ebc4 	.word	0x9998ebc4
  406db4:	3fc99999 	.word	0x3fc99999
  406db8:	8800759c 	.word	0x8800759c
  406dbc:	7e37e43c 	.word	0x7e37e43c
  406dc0:	440fffff 	.word	0x440fffff
  406dc4:	7ff00000 	.word	0x7ff00000
  406dc8:	3fdbffff 	.word	0x3fdbffff
  406dcc:	0040e430 	.word	0x0040e430
  406dd0:	0040e410 	.word	0x0040e410
  406dd4:	3ff00000 	.word	0x3ff00000
  406dd8:	3ff2ffff 	.word	0x3ff2ffff
  406ddc:	3ff921fb 	.word	0x3ff921fb
  406de0:	54442d18 	.word	0x54442d18
  406de4:	bff921fb 	.word	0xbff921fb
  406de8:	40037fff 	.word	0x40037fff
  406dec:	3ff80000 	.word	0x3ff80000
  406df0:	bff00000 	.word	0xbff00000

00406df4 <fabs>:
  406df4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406df8:	4770      	bx	lr
  406dfa:	bf00      	nop
  406dfc:	0000      	movs	r0, r0
	...

00406e00 <floor>:
  406e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406e04:	f3c1 580a 	ubfx	r8, r1, #20, #11
  406e08:	460b      	mov	r3, r1
  406e0a:	4604      	mov	r4, r0
  406e0c:	460d      	mov	r5, r1
  406e0e:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
  406e12:	4602      	mov	r2, r0
  406e14:	4689      	mov	r9, r1
  406e16:	4607      	mov	r7, r0
  406e18:	2e13      	cmp	r6, #19
  406e1a:	dc1d      	bgt.n	406e58 <floor+0x58>
  406e1c:	2e00      	cmp	r6, #0
  406e1e:	db40      	blt.n	406ea2 <floor+0xa2>
  406e20:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 406f0c <floor+0x10c>
  406e24:	fa48 f806 	asr.w	r8, r8, r6
  406e28:	ea08 0e01 	and.w	lr, r8, r1
  406e2c:	ea5e 0202 	orrs.w	r2, lr, r2
  406e30:	d017      	beq.n	406e62 <floor+0x62>
  406e32:	a333      	add	r3, pc, #204	; (adr r3, 406f00 <floor+0x100>)
  406e34:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e38:	f000 f926 	bl	407088 <__adddf3>
  406e3c:	2200      	movs	r2, #0
  406e3e:	2300      	movs	r3, #0
  406e40:	f000 fd64 	bl	40790c <__aeabi_dcmpgt>
  406e44:	b120      	cbz	r0, 406e50 <floor+0x50>
  406e46:	2d00      	cmp	r5, #0
  406e48:	db40      	blt.n	406ecc <floor+0xcc>
  406e4a:	ea29 0508 	bic.w	r5, r9, r8
  406e4e:	2700      	movs	r7, #0
  406e50:	4638      	mov	r0, r7
  406e52:	4629      	mov	r1, r5
  406e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e58:	2e33      	cmp	r6, #51	; 0x33
  406e5a:	dd06      	ble.n	406e6a <floor+0x6a>
  406e5c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  406e60:	d02f      	beq.n	406ec2 <floor+0xc2>
  406e62:	4620      	mov	r0, r4
  406e64:	4619      	mov	r1, r3
  406e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e6a:	f2a8 4213 	subw	r2, r8, #1043	; 0x413
  406e6e:	f04f 3aff 	mov.w	sl, #4294967295
  406e72:	fa2a fa02 	lsr.w	sl, sl, r2
  406e76:	ea1a 0f00 	tst.w	sl, r0
  406e7a:	d0f2      	beq.n	406e62 <floor+0x62>
  406e7c:	a320      	add	r3, pc, #128	; (adr r3, 406f00 <floor+0x100>)
  406e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e82:	f000 f901 	bl	407088 <__adddf3>
  406e86:	2200      	movs	r2, #0
  406e88:	2300      	movs	r3, #0
  406e8a:	f000 fd3f 	bl	40790c <__aeabi_dcmpgt>
  406e8e:	2800      	cmp	r0, #0
  406e90:	d0de      	beq.n	406e50 <floor+0x50>
  406e92:	2d00      	cmp	r5, #0
  406e94:	db1f      	blt.n	406ed6 <floor+0xd6>
  406e96:	464d      	mov	r5, r9
  406e98:	ea27 070a 	bic.w	r7, r7, sl
  406e9c:	4629      	mov	r1, r5
  406e9e:	4638      	mov	r0, r7
  406ea0:	e7d8      	b.n	406e54 <floor+0x54>
  406ea2:	a317      	add	r3, pc, #92	; (adr r3, 406f00 <floor+0x100>)
  406ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ea8:	f000 f8ee 	bl	407088 <__adddf3>
  406eac:	2200      	movs	r2, #0
  406eae:	2300      	movs	r3, #0
  406eb0:	f000 fd2c 	bl	40790c <__aeabi_dcmpgt>
  406eb4:	2800      	cmp	r0, #0
  406eb6:	d0cb      	beq.n	406e50 <floor+0x50>
  406eb8:	2d00      	cmp	r5, #0
  406eba:	db19      	blt.n	406ef0 <floor+0xf0>
  406ebc:	2700      	movs	r7, #0
  406ebe:	463d      	mov	r5, r7
  406ec0:	e7c6      	b.n	406e50 <floor+0x50>
  406ec2:	4602      	mov	r2, r0
  406ec4:	460b      	mov	r3, r1
  406ec6:	f000 f8df 	bl	407088 <__adddf3>
  406eca:	e7cc      	b.n	406e66 <floor+0x66>
  406ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  406ed0:	4133      	asrs	r3, r6
  406ed2:	4499      	add	r9, r3
  406ed4:	e7b9      	b.n	406e4a <floor+0x4a>
  406ed6:	2e14      	cmp	r6, #20
  406ed8:	d007      	beq.n	406eea <floor+0xea>
  406eda:	f240 4233 	movw	r2, #1075	; 0x433
  406ede:	2301      	movs	r3, #1
  406ee0:	ebc8 0202 	rsb	r2, r8, r2
  406ee4:	4093      	lsls	r3, r2
  406ee6:	191f      	adds	r7, r3, r4
  406ee8:	d3d5      	bcc.n	406e96 <floor+0x96>
  406eea:	f109 0901 	add.w	r9, r9, #1
  406eee:	e7d2      	b.n	406e96 <floor+0x96>
  406ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  406ef4:	ea53 0704 	orrs.w	r7, r3, r4
  406ef8:	d0aa      	beq.n	406e50 <floor+0x50>
  406efa:	2700      	movs	r7, #0
  406efc:	4d02      	ldr	r5, [pc, #8]	; (406f08 <floor+0x108>)
  406efe:	e7a7      	b.n	406e50 <floor+0x50>
  406f00:	8800759c 	.word	0x8800759c
  406f04:	7e37e43c 	.word	0x7e37e43c
  406f08:	bff00000 	.word	0xbff00000
  406f0c:	000fffff 	.word	0x000fffff

00406f10 <__fpclassifyd>:
  406f10:	fab0 f080 	clz	r0, r0
  406f14:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  406f18:	ea4f 1050 	mov.w	r0, r0, lsr #5
  406f1c:	d102      	bne.n	406f24 <__fpclassifyd+0x14>
  406f1e:	b108      	cbz	r0, 406f24 <__fpclassifyd+0x14>
  406f20:	2002      	movs	r0, #2
  406f22:	4770      	bx	lr
  406f24:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  406f28:	4b08      	ldr	r3, [pc, #32]	; (406f4c <__fpclassifyd+0x3c>)
  406f2a:	429a      	cmp	r2, r3
  406f2c:	d801      	bhi.n	406f32 <__fpclassifyd+0x22>
  406f2e:	2004      	movs	r0, #4
  406f30:	4770      	bx	lr
  406f32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406f36:	d201      	bcs.n	406f3c <__fpclassifyd+0x2c>
  406f38:	2003      	movs	r0, #3
  406f3a:	4770      	bx	lr
  406f3c:	4b04      	ldr	r3, [pc, #16]	; (406f50 <__fpclassifyd+0x40>)
  406f3e:	4299      	cmp	r1, r3
  406f40:	bf14      	ite	ne
  406f42:	2000      	movne	r0, #0
  406f44:	f000 0001 	andeq.w	r0, r0, #1
  406f48:	4770      	bx	lr
  406f4a:	bf00      	nop
  406f4c:	7fdfffff 	.word	0x7fdfffff
  406f50:	7ff00000 	.word	0x7ff00000

00406f54 <matherr>:
  406f54:	2000      	movs	r0, #0
  406f56:	4770      	bx	lr

00406f58 <nan>:
  406f58:	2000      	movs	r0, #0
  406f5a:	4901      	ldr	r1, [pc, #4]	; (406f60 <nan+0x8>)
  406f5c:	4770      	bx	lr
  406f5e:	bf00      	nop
  406f60:	7ff80000 	.word	0x7ff80000
  406f64:	00000000 	.word	0x00000000

00406f68 <scalbn>:
  406f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f6a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  406f6e:	4604      	mov	r4, r0
  406f70:	460d      	mov	r5, r1
  406f72:	4617      	mov	r7, r2
  406f74:	460e      	mov	r6, r1
  406f76:	bb1b      	cbnz	r3, 406fc0 <scalbn+0x58>
  406f78:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  406f7c:	ea56 0300 	orrs.w	r3, r6, r0
  406f80:	d030      	beq.n	406fe4 <scalbn+0x7c>
  406f82:	4b35      	ldr	r3, [pc, #212]	; (407058 <scalbn+0xf0>)
  406f84:	2200      	movs	r2, #0
  406f86:	f000 fa31 	bl	4073ec <__aeabi_dmul>
  406f8a:	4b34      	ldr	r3, [pc, #208]	; (40705c <scalbn+0xf4>)
  406f8c:	4604      	mov	r4, r0
  406f8e:	460d      	mov	r5, r1
  406f90:	429f      	cmp	r7, r3
  406f92:	460e      	mov	r6, r1
  406f94:	db35      	blt.n	407002 <scalbn+0x9a>
  406f96:	f3c1 530a 	ubfx	r3, r1, #20, #11
  406f9a:	f240 72fe 	movw	r2, #2046	; 0x7fe
  406f9e:	3b36      	subs	r3, #54	; 0x36
  406fa0:	443b      	add	r3, r7
  406fa2:	4293      	cmp	r3, r2
  406fa4:	dd15      	ble.n	406fd2 <scalbn+0x6a>
  406fa6:	4622      	mov	r2, r4
  406fa8:	462b      	mov	r3, r5
  406faa:	a127      	add	r1, pc, #156	; (adr r1, 407048 <scalbn+0xe0>)
  406fac:	e9d1 0100 	ldrd	r0, r1, [r1]
  406fb0:	f000 f85a 	bl	407068 <copysign>
  406fb4:	a324      	add	r3, pc, #144	; (adr r3, 407048 <scalbn+0xe0>)
  406fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  406fba:	f000 fa17 	bl	4073ec <__aeabi_dmul>
  406fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
  406fc4:	4293      	cmp	r3, r2
  406fc6:	d022      	beq.n	40700e <scalbn+0xa6>
  406fc8:	443b      	add	r3, r7
  406fca:	f240 72fe 	movw	r2, #2046	; 0x7fe
  406fce:	4293      	cmp	r3, r2
  406fd0:	dce9      	bgt.n	406fa6 <scalbn+0x3e>
  406fd2:	2b00      	cmp	r3, #0
  406fd4:	dd07      	ble.n	406fe6 <scalbn+0x7e>
  406fd6:	4a22      	ldr	r2, [pc, #136]	; (407060 <scalbn+0xf8>)
  406fd8:	4620      	mov	r0, r4
  406fda:	4032      	ands	r2, r6
  406fdc:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
  406fe0:	4629      	mov	r1, r5
  406fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fe6:	f113 0f35 	cmn.w	r3, #53	; 0x35
  406fea:	da15      	bge.n	407018 <scalbn+0xb0>
  406fec:	f24c 3350 	movw	r3, #50000	; 0xc350
  406ff0:	4622      	mov	r2, r4
  406ff2:	429f      	cmp	r7, r3
  406ff4:	462b      	mov	r3, r5
  406ff6:	dc1c      	bgt.n	407032 <scalbn+0xca>
  406ff8:	a115      	add	r1, pc, #84	; (adr r1, 407050 <scalbn+0xe8>)
  406ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
  406ffe:	f000 f833 	bl	407068 <copysign>
  407002:	a313      	add	r3, pc, #76	; (adr r3, 407050 <scalbn+0xe8>)
  407004:	e9d3 2300 	ldrd	r2, r3, [r3]
  407008:	f000 f9f0 	bl	4073ec <__aeabi_dmul>
  40700c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40700e:	4602      	mov	r2, r0
  407010:	460b      	mov	r3, r1
  407012:	f000 f839 	bl	407088 <__adddf3>
  407016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407018:	4811      	ldr	r0, [pc, #68]	; (407060 <scalbn+0xf8>)
  40701a:	f103 0136 	add.w	r1, r3, #54	; 0x36
  40701e:	2200      	movs	r2, #0
  407020:	4b10      	ldr	r3, [pc, #64]	; (407064 <scalbn+0xfc>)
  407022:	4030      	ands	r0, r6
  407024:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
  407028:	4620      	mov	r0, r4
  40702a:	4629      	mov	r1, r5
  40702c:	f000 f9de 	bl	4073ec <__aeabi_dmul>
  407030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407032:	a105      	add	r1, pc, #20	; (adr r1, 407048 <scalbn+0xe0>)
  407034:	e9d1 0100 	ldrd	r0, r1, [r1]
  407038:	f000 f816 	bl	407068 <copysign>
  40703c:	a302      	add	r3, pc, #8	; (adr r3, 407048 <scalbn+0xe0>)
  40703e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407042:	f000 f9d3 	bl	4073ec <__aeabi_dmul>
  407046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407048:	8800759c 	.word	0x8800759c
  40704c:	7e37e43c 	.word	0x7e37e43c
  407050:	c2f8f359 	.word	0xc2f8f359
  407054:	01a56e1f 	.word	0x01a56e1f
  407058:	43500000 	.word	0x43500000
  40705c:	ffff3cb0 	.word	0xffff3cb0
  407060:	800fffff 	.word	0x800fffff
  407064:	3c900000 	.word	0x3c900000

00407068 <copysign>:
  407068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  40706c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  407070:	ea43 0102 	orr.w	r1, r3, r2
  407074:	4770      	bx	lr
  407076:	bf00      	nop

00407078 <__aeabi_idiv0>:
  407078:	4770      	bx	lr
  40707a:	bf00      	nop

0040707c <__aeabi_drsub>:
  40707c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407080:	e002      	b.n	407088 <__adddf3>
  407082:	bf00      	nop

00407084 <__aeabi_dsub>:
  407084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407088 <__adddf3>:
  407088:	b530      	push	{r4, r5, lr}
  40708a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40708e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407092:	ea94 0f05 	teq	r4, r5
  407096:	bf08      	it	eq
  407098:	ea90 0f02 	teqeq	r0, r2
  40709c:	bf1f      	itttt	ne
  40709e:	ea54 0c00 	orrsne.w	ip, r4, r0
  4070a2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4070a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4070aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4070ae:	f000 80e2 	beq.w	407276 <__adddf3+0x1ee>
  4070b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4070b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4070ba:	bfb8      	it	lt
  4070bc:	426d      	neglt	r5, r5
  4070be:	dd0c      	ble.n	4070da <__adddf3+0x52>
  4070c0:	442c      	add	r4, r5
  4070c2:	ea80 0202 	eor.w	r2, r0, r2
  4070c6:	ea81 0303 	eor.w	r3, r1, r3
  4070ca:	ea82 0000 	eor.w	r0, r2, r0
  4070ce:	ea83 0101 	eor.w	r1, r3, r1
  4070d2:	ea80 0202 	eor.w	r2, r0, r2
  4070d6:	ea81 0303 	eor.w	r3, r1, r3
  4070da:	2d36      	cmp	r5, #54	; 0x36
  4070dc:	bf88      	it	hi
  4070de:	bd30      	pophi	{r4, r5, pc}
  4070e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4070e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4070e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4070ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4070f0:	d002      	beq.n	4070f8 <__adddf3+0x70>
  4070f2:	4240      	negs	r0, r0
  4070f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4070f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4070fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407100:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407104:	d002      	beq.n	40710c <__adddf3+0x84>
  407106:	4252      	negs	r2, r2
  407108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40710c:	ea94 0f05 	teq	r4, r5
  407110:	f000 80a7 	beq.w	407262 <__adddf3+0x1da>
  407114:	f1a4 0401 	sub.w	r4, r4, #1
  407118:	f1d5 0e20 	rsbs	lr, r5, #32
  40711c:	db0d      	blt.n	40713a <__adddf3+0xb2>
  40711e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407122:	fa22 f205 	lsr.w	r2, r2, r5
  407126:	1880      	adds	r0, r0, r2
  407128:	f141 0100 	adc.w	r1, r1, #0
  40712c:	fa03 f20e 	lsl.w	r2, r3, lr
  407130:	1880      	adds	r0, r0, r2
  407132:	fa43 f305 	asr.w	r3, r3, r5
  407136:	4159      	adcs	r1, r3
  407138:	e00e      	b.n	407158 <__adddf3+0xd0>
  40713a:	f1a5 0520 	sub.w	r5, r5, #32
  40713e:	f10e 0e20 	add.w	lr, lr, #32
  407142:	2a01      	cmp	r2, #1
  407144:	fa03 fc0e 	lsl.w	ip, r3, lr
  407148:	bf28      	it	cs
  40714a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40714e:	fa43 f305 	asr.w	r3, r3, r5
  407152:	18c0      	adds	r0, r0, r3
  407154:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40715c:	d507      	bpl.n	40716e <__adddf3+0xe6>
  40715e:	f04f 0e00 	mov.w	lr, #0
  407162:	f1dc 0c00 	rsbs	ip, ip, #0
  407166:	eb7e 0000 	sbcs.w	r0, lr, r0
  40716a:	eb6e 0101 	sbc.w	r1, lr, r1
  40716e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407172:	d31b      	bcc.n	4071ac <__adddf3+0x124>
  407174:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407178:	d30c      	bcc.n	407194 <__adddf3+0x10c>
  40717a:	0849      	lsrs	r1, r1, #1
  40717c:	ea5f 0030 	movs.w	r0, r0, rrx
  407180:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407184:	f104 0401 	add.w	r4, r4, #1
  407188:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40718c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407190:	f080 809a 	bcs.w	4072c8 <__adddf3+0x240>
  407194:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407198:	bf08      	it	eq
  40719a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40719e:	f150 0000 	adcs.w	r0, r0, #0
  4071a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4071a6:	ea41 0105 	orr.w	r1, r1, r5
  4071aa:	bd30      	pop	{r4, r5, pc}
  4071ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4071b0:	4140      	adcs	r0, r0
  4071b2:	eb41 0101 	adc.w	r1, r1, r1
  4071b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4071ba:	f1a4 0401 	sub.w	r4, r4, #1
  4071be:	d1e9      	bne.n	407194 <__adddf3+0x10c>
  4071c0:	f091 0f00 	teq	r1, #0
  4071c4:	bf04      	itt	eq
  4071c6:	4601      	moveq	r1, r0
  4071c8:	2000      	moveq	r0, #0
  4071ca:	fab1 f381 	clz	r3, r1
  4071ce:	bf08      	it	eq
  4071d0:	3320      	addeq	r3, #32
  4071d2:	f1a3 030b 	sub.w	r3, r3, #11
  4071d6:	f1b3 0220 	subs.w	r2, r3, #32
  4071da:	da0c      	bge.n	4071f6 <__adddf3+0x16e>
  4071dc:	320c      	adds	r2, #12
  4071de:	dd08      	ble.n	4071f2 <__adddf3+0x16a>
  4071e0:	f102 0c14 	add.w	ip, r2, #20
  4071e4:	f1c2 020c 	rsb	r2, r2, #12
  4071e8:	fa01 f00c 	lsl.w	r0, r1, ip
  4071ec:	fa21 f102 	lsr.w	r1, r1, r2
  4071f0:	e00c      	b.n	40720c <__adddf3+0x184>
  4071f2:	f102 0214 	add.w	r2, r2, #20
  4071f6:	bfd8      	it	le
  4071f8:	f1c2 0c20 	rsble	ip, r2, #32
  4071fc:	fa01 f102 	lsl.w	r1, r1, r2
  407200:	fa20 fc0c 	lsr.w	ip, r0, ip
  407204:	bfdc      	itt	le
  407206:	ea41 010c 	orrle.w	r1, r1, ip
  40720a:	4090      	lslle	r0, r2
  40720c:	1ae4      	subs	r4, r4, r3
  40720e:	bfa2      	ittt	ge
  407210:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407214:	4329      	orrge	r1, r5
  407216:	bd30      	popge	{r4, r5, pc}
  407218:	ea6f 0404 	mvn.w	r4, r4
  40721c:	3c1f      	subs	r4, #31
  40721e:	da1c      	bge.n	40725a <__adddf3+0x1d2>
  407220:	340c      	adds	r4, #12
  407222:	dc0e      	bgt.n	407242 <__adddf3+0x1ba>
  407224:	f104 0414 	add.w	r4, r4, #20
  407228:	f1c4 0220 	rsb	r2, r4, #32
  40722c:	fa20 f004 	lsr.w	r0, r0, r4
  407230:	fa01 f302 	lsl.w	r3, r1, r2
  407234:	ea40 0003 	orr.w	r0, r0, r3
  407238:	fa21 f304 	lsr.w	r3, r1, r4
  40723c:	ea45 0103 	orr.w	r1, r5, r3
  407240:	bd30      	pop	{r4, r5, pc}
  407242:	f1c4 040c 	rsb	r4, r4, #12
  407246:	f1c4 0220 	rsb	r2, r4, #32
  40724a:	fa20 f002 	lsr.w	r0, r0, r2
  40724e:	fa01 f304 	lsl.w	r3, r1, r4
  407252:	ea40 0003 	orr.w	r0, r0, r3
  407256:	4629      	mov	r1, r5
  407258:	bd30      	pop	{r4, r5, pc}
  40725a:	fa21 f004 	lsr.w	r0, r1, r4
  40725e:	4629      	mov	r1, r5
  407260:	bd30      	pop	{r4, r5, pc}
  407262:	f094 0f00 	teq	r4, #0
  407266:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40726a:	bf06      	itte	eq
  40726c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407270:	3401      	addeq	r4, #1
  407272:	3d01      	subne	r5, #1
  407274:	e74e      	b.n	407114 <__adddf3+0x8c>
  407276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40727a:	bf18      	it	ne
  40727c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407280:	d029      	beq.n	4072d6 <__adddf3+0x24e>
  407282:	ea94 0f05 	teq	r4, r5
  407286:	bf08      	it	eq
  407288:	ea90 0f02 	teqeq	r0, r2
  40728c:	d005      	beq.n	40729a <__adddf3+0x212>
  40728e:	ea54 0c00 	orrs.w	ip, r4, r0
  407292:	bf04      	itt	eq
  407294:	4619      	moveq	r1, r3
  407296:	4610      	moveq	r0, r2
  407298:	bd30      	pop	{r4, r5, pc}
  40729a:	ea91 0f03 	teq	r1, r3
  40729e:	bf1e      	ittt	ne
  4072a0:	2100      	movne	r1, #0
  4072a2:	2000      	movne	r0, #0
  4072a4:	bd30      	popne	{r4, r5, pc}
  4072a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4072aa:	d105      	bne.n	4072b8 <__adddf3+0x230>
  4072ac:	0040      	lsls	r0, r0, #1
  4072ae:	4149      	adcs	r1, r1
  4072b0:	bf28      	it	cs
  4072b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4072b6:	bd30      	pop	{r4, r5, pc}
  4072b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4072bc:	bf3c      	itt	cc
  4072be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4072c2:	bd30      	popcc	{r4, r5, pc}
  4072c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4072c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4072cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4072d0:	f04f 0000 	mov.w	r0, #0
  4072d4:	bd30      	pop	{r4, r5, pc}
  4072d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4072da:	bf1a      	itte	ne
  4072dc:	4619      	movne	r1, r3
  4072de:	4610      	movne	r0, r2
  4072e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4072e4:	bf1c      	itt	ne
  4072e6:	460b      	movne	r3, r1
  4072e8:	4602      	movne	r2, r0
  4072ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4072ee:	bf06      	itte	eq
  4072f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4072f4:	ea91 0f03 	teqeq	r1, r3
  4072f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4072fc:	bd30      	pop	{r4, r5, pc}
  4072fe:	bf00      	nop

00407300 <__aeabi_ui2d>:
  407300:	f090 0f00 	teq	r0, #0
  407304:	bf04      	itt	eq
  407306:	2100      	moveq	r1, #0
  407308:	4770      	bxeq	lr
  40730a:	b530      	push	{r4, r5, lr}
  40730c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407310:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407314:	f04f 0500 	mov.w	r5, #0
  407318:	f04f 0100 	mov.w	r1, #0
  40731c:	e750      	b.n	4071c0 <__adddf3+0x138>
  40731e:	bf00      	nop

00407320 <__aeabi_i2d>:
  407320:	f090 0f00 	teq	r0, #0
  407324:	bf04      	itt	eq
  407326:	2100      	moveq	r1, #0
  407328:	4770      	bxeq	lr
  40732a:	b530      	push	{r4, r5, lr}
  40732c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407330:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407334:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407338:	bf48      	it	mi
  40733a:	4240      	negmi	r0, r0
  40733c:	f04f 0100 	mov.w	r1, #0
  407340:	e73e      	b.n	4071c0 <__adddf3+0x138>
  407342:	bf00      	nop

00407344 <__aeabi_f2d>:
  407344:	0042      	lsls	r2, r0, #1
  407346:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40734a:	ea4f 0131 	mov.w	r1, r1, rrx
  40734e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407352:	bf1f      	itttt	ne
  407354:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407358:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40735c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407360:	4770      	bxne	lr
  407362:	f092 0f00 	teq	r2, #0
  407366:	bf14      	ite	ne
  407368:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40736c:	4770      	bxeq	lr
  40736e:	b530      	push	{r4, r5, lr}
  407370:	f44f 7460 	mov.w	r4, #896	; 0x380
  407374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40737c:	e720      	b.n	4071c0 <__adddf3+0x138>
  40737e:	bf00      	nop

00407380 <__aeabi_ul2d>:
  407380:	ea50 0201 	orrs.w	r2, r0, r1
  407384:	bf08      	it	eq
  407386:	4770      	bxeq	lr
  407388:	b530      	push	{r4, r5, lr}
  40738a:	f04f 0500 	mov.w	r5, #0
  40738e:	e00a      	b.n	4073a6 <__aeabi_l2d+0x16>

00407390 <__aeabi_l2d>:
  407390:	ea50 0201 	orrs.w	r2, r0, r1
  407394:	bf08      	it	eq
  407396:	4770      	bxeq	lr
  407398:	b530      	push	{r4, r5, lr}
  40739a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40739e:	d502      	bpl.n	4073a6 <__aeabi_l2d+0x16>
  4073a0:	4240      	negs	r0, r0
  4073a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4073a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4073b2:	f43f aedc 	beq.w	40716e <__adddf3+0xe6>
  4073b6:	f04f 0203 	mov.w	r2, #3
  4073ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4073be:	bf18      	it	ne
  4073c0:	3203      	addne	r2, #3
  4073c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4073c6:	bf18      	it	ne
  4073c8:	3203      	addne	r2, #3
  4073ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4073ce:	f1c2 0320 	rsb	r3, r2, #32
  4073d2:	fa00 fc03 	lsl.w	ip, r0, r3
  4073d6:	fa20 f002 	lsr.w	r0, r0, r2
  4073da:	fa01 fe03 	lsl.w	lr, r1, r3
  4073de:	ea40 000e 	orr.w	r0, r0, lr
  4073e2:	fa21 f102 	lsr.w	r1, r1, r2
  4073e6:	4414      	add	r4, r2
  4073e8:	e6c1      	b.n	40716e <__adddf3+0xe6>
  4073ea:	bf00      	nop

004073ec <__aeabi_dmul>:
  4073ec:	b570      	push	{r4, r5, r6, lr}
  4073ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4073f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4073f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4073fa:	bf1d      	ittte	ne
  4073fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407400:	ea94 0f0c 	teqne	r4, ip
  407404:	ea95 0f0c 	teqne	r5, ip
  407408:	f000 f8de 	bleq	4075c8 <__aeabi_dmul+0x1dc>
  40740c:	442c      	add	r4, r5
  40740e:	ea81 0603 	eor.w	r6, r1, r3
  407412:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407416:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40741a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40741e:	bf18      	it	ne
  407420:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40742c:	d038      	beq.n	4074a0 <__aeabi_dmul+0xb4>
  40742e:	fba0 ce02 	umull	ip, lr, r0, r2
  407432:	f04f 0500 	mov.w	r5, #0
  407436:	fbe1 e502 	umlal	lr, r5, r1, r2
  40743a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40743e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407442:	f04f 0600 	mov.w	r6, #0
  407446:	fbe1 5603 	umlal	r5, r6, r1, r3
  40744a:	f09c 0f00 	teq	ip, #0
  40744e:	bf18      	it	ne
  407450:	f04e 0e01 	orrne.w	lr, lr, #1
  407454:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407458:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40745c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407460:	d204      	bcs.n	40746c <__aeabi_dmul+0x80>
  407462:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407466:	416d      	adcs	r5, r5
  407468:	eb46 0606 	adc.w	r6, r6, r6
  40746c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407470:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407474:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407478:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40747c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407480:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407484:	bf88      	it	hi
  407486:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40748a:	d81e      	bhi.n	4074ca <__aeabi_dmul+0xde>
  40748c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407490:	bf08      	it	eq
  407492:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407496:	f150 0000 	adcs.w	r0, r0, #0
  40749a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40749e:	bd70      	pop	{r4, r5, r6, pc}
  4074a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4074a4:	ea46 0101 	orr.w	r1, r6, r1
  4074a8:	ea40 0002 	orr.w	r0, r0, r2
  4074ac:	ea81 0103 	eor.w	r1, r1, r3
  4074b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4074b4:	bfc2      	ittt	gt
  4074b6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4074ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4074be:	bd70      	popgt	{r4, r5, r6, pc}
  4074c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074c4:	f04f 0e00 	mov.w	lr, #0
  4074c8:	3c01      	subs	r4, #1
  4074ca:	f300 80ab 	bgt.w	407624 <__aeabi_dmul+0x238>
  4074ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4074d2:	bfde      	ittt	le
  4074d4:	2000      	movle	r0, #0
  4074d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4074da:	bd70      	pople	{r4, r5, r6, pc}
  4074dc:	f1c4 0400 	rsb	r4, r4, #0
  4074e0:	3c20      	subs	r4, #32
  4074e2:	da35      	bge.n	407550 <__aeabi_dmul+0x164>
  4074e4:	340c      	adds	r4, #12
  4074e6:	dc1b      	bgt.n	407520 <__aeabi_dmul+0x134>
  4074e8:	f104 0414 	add.w	r4, r4, #20
  4074ec:	f1c4 0520 	rsb	r5, r4, #32
  4074f0:	fa00 f305 	lsl.w	r3, r0, r5
  4074f4:	fa20 f004 	lsr.w	r0, r0, r4
  4074f8:	fa01 f205 	lsl.w	r2, r1, r5
  4074fc:	ea40 0002 	orr.w	r0, r0, r2
  407500:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40750c:	fa21 f604 	lsr.w	r6, r1, r4
  407510:	eb42 0106 	adc.w	r1, r2, r6
  407514:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407518:	bf08      	it	eq
  40751a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40751e:	bd70      	pop	{r4, r5, r6, pc}
  407520:	f1c4 040c 	rsb	r4, r4, #12
  407524:	f1c4 0520 	rsb	r5, r4, #32
  407528:	fa00 f304 	lsl.w	r3, r0, r4
  40752c:	fa20 f005 	lsr.w	r0, r0, r5
  407530:	fa01 f204 	lsl.w	r2, r1, r4
  407534:	ea40 0002 	orr.w	r0, r0, r2
  407538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40753c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407540:	f141 0100 	adc.w	r1, r1, #0
  407544:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407548:	bf08      	it	eq
  40754a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40754e:	bd70      	pop	{r4, r5, r6, pc}
  407550:	f1c4 0520 	rsb	r5, r4, #32
  407554:	fa00 f205 	lsl.w	r2, r0, r5
  407558:	ea4e 0e02 	orr.w	lr, lr, r2
  40755c:	fa20 f304 	lsr.w	r3, r0, r4
  407560:	fa01 f205 	lsl.w	r2, r1, r5
  407564:	ea43 0302 	orr.w	r3, r3, r2
  407568:	fa21 f004 	lsr.w	r0, r1, r4
  40756c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407570:	fa21 f204 	lsr.w	r2, r1, r4
  407574:	ea20 0002 	bic.w	r0, r0, r2
  407578:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40757c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407580:	bf08      	it	eq
  407582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407586:	bd70      	pop	{r4, r5, r6, pc}
  407588:	f094 0f00 	teq	r4, #0
  40758c:	d10f      	bne.n	4075ae <__aeabi_dmul+0x1c2>
  40758e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407592:	0040      	lsls	r0, r0, #1
  407594:	eb41 0101 	adc.w	r1, r1, r1
  407598:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40759c:	bf08      	it	eq
  40759e:	3c01      	subeq	r4, #1
  4075a0:	d0f7      	beq.n	407592 <__aeabi_dmul+0x1a6>
  4075a2:	ea41 0106 	orr.w	r1, r1, r6
  4075a6:	f095 0f00 	teq	r5, #0
  4075aa:	bf18      	it	ne
  4075ac:	4770      	bxne	lr
  4075ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4075b2:	0052      	lsls	r2, r2, #1
  4075b4:	eb43 0303 	adc.w	r3, r3, r3
  4075b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4075bc:	bf08      	it	eq
  4075be:	3d01      	subeq	r5, #1
  4075c0:	d0f7      	beq.n	4075b2 <__aeabi_dmul+0x1c6>
  4075c2:	ea43 0306 	orr.w	r3, r3, r6
  4075c6:	4770      	bx	lr
  4075c8:	ea94 0f0c 	teq	r4, ip
  4075cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4075d0:	bf18      	it	ne
  4075d2:	ea95 0f0c 	teqne	r5, ip
  4075d6:	d00c      	beq.n	4075f2 <__aeabi_dmul+0x206>
  4075d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4075dc:	bf18      	it	ne
  4075de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4075e2:	d1d1      	bne.n	407588 <__aeabi_dmul+0x19c>
  4075e4:	ea81 0103 	eor.w	r1, r1, r3
  4075e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4075ec:	f04f 0000 	mov.w	r0, #0
  4075f0:	bd70      	pop	{r4, r5, r6, pc}
  4075f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4075f6:	bf06      	itte	eq
  4075f8:	4610      	moveq	r0, r2
  4075fa:	4619      	moveq	r1, r3
  4075fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407600:	d019      	beq.n	407636 <__aeabi_dmul+0x24a>
  407602:	ea94 0f0c 	teq	r4, ip
  407606:	d102      	bne.n	40760e <__aeabi_dmul+0x222>
  407608:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40760c:	d113      	bne.n	407636 <__aeabi_dmul+0x24a>
  40760e:	ea95 0f0c 	teq	r5, ip
  407612:	d105      	bne.n	407620 <__aeabi_dmul+0x234>
  407614:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407618:	bf1c      	itt	ne
  40761a:	4610      	movne	r0, r2
  40761c:	4619      	movne	r1, r3
  40761e:	d10a      	bne.n	407636 <__aeabi_dmul+0x24a>
  407620:	ea81 0103 	eor.w	r1, r1, r3
  407624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407628:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40762c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407630:	f04f 0000 	mov.w	r0, #0
  407634:	bd70      	pop	{r4, r5, r6, pc}
  407636:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40763a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40763e:	bd70      	pop	{r4, r5, r6, pc}

00407640 <__aeabi_ddiv>:
  407640:	b570      	push	{r4, r5, r6, lr}
  407642:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40764a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40764e:	bf1d      	ittte	ne
  407650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407654:	ea94 0f0c 	teqne	r4, ip
  407658:	ea95 0f0c 	teqne	r5, ip
  40765c:	f000 f8a7 	bleq	4077ae <__aeabi_ddiv+0x16e>
  407660:	eba4 0405 	sub.w	r4, r4, r5
  407664:	ea81 0e03 	eor.w	lr, r1, r3
  407668:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40766c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407670:	f000 8088 	beq.w	407784 <__aeabi_ddiv+0x144>
  407674:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407678:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40767c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407680:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407684:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407688:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40768c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407690:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407694:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407698:	429d      	cmp	r5, r3
  40769a:	bf08      	it	eq
  40769c:	4296      	cmpeq	r6, r2
  40769e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4076a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4076a6:	d202      	bcs.n	4076ae <__aeabi_ddiv+0x6e>
  4076a8:	085b      	lsrs	r3, r3, #1
  4076aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4076ae:	1ab6      	subs	r6, r6, r2
  4076b0:	eb65 0503 	sbc.w	r5, r5, r3
  4076b4:	085b      	lsrs	r3, r3, #1
  4076b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4076ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4076be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4076c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4076c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4076ca:	bf22      	ittt	cs
  4076cc:	1ab6      	subcs	r6, r6, r2
  4076ce:	4675      	movcs	r5, lr
  4076d0:	ea40 000c 	orrcs.w	r0, r0, ip
  4076d4:	085b      	lsrs	r3, r3, #1
  4076d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4076da:	ebb6 0e02 	subs.w	lr, r6, r2
  4076de:	eb75 0e03 	sbcs.w	lr, r5, r3
  4076e2:	bf22      	ittt	cs
  4076e4:	1ab6      	subcs	r6, r6, r2
  4076e6:	4675      	movcs	r5, lr
  4076e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4076ec:	085b      	lsrs	r3, r3, #1
  4076ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4076f2:	ebb6 0e02 	subs.w	lr, r6, r2
  4076f6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4076fa:	bf22      	ittt	cs
  4076fc:	1ab6      	subcs	r6, r6, r2
  4076fe:	4675      	movcs	r5, lr
  407700:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407704:	085b      	lsrs	r3, r3, #1
  407706:	ea4f 0232 	mov.w	r2, r2, rrx
  40770a:	ebb6 0e02 	subs.w	lr, r6, r2
  40770e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407712:	bf22      	ittt	cs
  407714:	1ab6      	subcs	r6, r6, r2
  407716:	4675      	movcs	r5, lr
  407718:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40771c:	ea55 0e06 	orrs.w	lr, r5, r6
  407720:	d018      	beq.n	407754 <__aeabi_ddiv+0x114>
  407722:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407726:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40772a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40772e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407732:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407736:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40773a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40773e:	d1c0      	bne.n	4076c2 <__aeabi_ddiv+0x82>
  407740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407744:	d10b      	bne.n	40775e <__aeabi_ddiv+0x11e>
  407746:	ea41 0100 	orr.w	r1, r1, r0
  40774a:	f04f 0000 	mov.w	r0, #0
  40774e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407752:	e7b6      	b.n	4076c2 <__aeabi_ddiv+0x82>
  407754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407758:	bf04      	itt	eq
  40775a:	4301      	orreq	r1, r0
  40775c:	2000      	moveq	r0, #0
  40775e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407762:	bf88      	it	hi
  407764:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407768:	f63f aeaf 	bhi.w	4074ca <__aeabi_dmul+0xde>
  40776c:	ebb5 0c03 	subs.w	ip, r5, r3
  407770:	bf04      	itt	eq
  407772:	ebb6 0c02 	subseq.w	ip, r6, r2
  407776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40777a:	f150 0000 	adcs.w	r0, r0, #0
  40777e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407782:	bd70      	pop	{r4, r5, r6, pc}
  407784:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407788:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40778c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407790:	bfc2      	ittt	gt
  407792:	ebd4 050c 	rsbsgt	r5, r4, ip
  407796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40779a:	bd70      	popgt	{r4, r5, r6, pc}
  40779c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4077a0:	f04f 0e00 	mov.w	lr, #0
  4077a4:	3c01      	subs	r4, #1
  4077a6:	e690      	b.n	4074ca <__aeabi_dmul+0xde>
  4077a8:	ea45 0e06 	orr.w	lr, r5, r6
  4077ac:	e68d      	b.n	4074ca <__aeabi_dmul+0xde>
  4077ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4077b2:	ea94 0f0c 	teq	r4, ip
  4077b6:	bf08      	it	eq
  4077b8:	ea95 0f0c 	teqeq	r5, ip
  4077bc:	f43f af3b 	beq.w	407636 <__aeabi_dmul+0x24a>
  4077c0:	ea94 0f0c 	teq	r4, ip
  4077c4:	d10a      	bne.n	4077dc <__aeabi_ddiv+0x19c>
  4077c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4077ca:	f47f af34 	bne.w	407636 <__aeabi_dmul+0x24a>
  4077ce:	ea95 0f0c 	teq	r5, ip
  4077d2:	f47f af25 	bne.w	407620 <__aeabi_dmul+0x234>
  4077d6:	4610      	mov	r0, r2
  4077d8:	4619      	mov	r1, r3
  4077da:	e72c      	b.n	407636 <__aeabi_dmul+0x24a>
  4077dc:	ea95 0f0c 	teq	r5, ip
  4077e0:	d106      	bne.n	4077f0 <__aeabi_ddiv+0x1b0>
  4077e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4077e6:	f43f aefd 	beq.w	4075e4 <__aeabi_dmul+0x1f8>
  4077ea:	4610      	mov	r0, r2
  4077ec:	4619      	mov	r1, r3
  4077ee:	e722      	b.n	407636 <__aeabi_dmul+0x24a>
  4077f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4077f4:	bf18      	it	ne
  4077f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4077fa:	f47f aec5 	bne.w	407588 <__aeabi_dmul+0x19c>
  4077fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407802:	f47f af0d 	bne.w	407620 <__aeabi_dmul+0x234>
  407806:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40780a:	f47f aeeb 	bne.w	4075e4 <__aeabi_dmul+0x1f8>
  40780e:	e712      	b.n	407636 <__aeabi_dmul+0x24a>

00407810 <__gedf2>:
  407810:	f04f 3cff 	mov.w	ip, #4294967295
  407814:	e006      	b.n	407824 <__cmpdf2+0x4>
  407816:	bf00      	nop

00407818 <__ledf2>:
  407818:	f04f 0c01 	mov.w	ip, #1
  40781c:	e002      	b.n	407824 <__cmpdf2+0x4>
  40781e:	bf00      	nop

00407820 <__cmpdf2>:
  407820:	f04f 0c01 	mov.w	ip, #1
  407824:	f84d cd04 	str.w	ip, [sp, #-4]!
  407828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40782c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407834:	bf18      	it	ne
  407836:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40783a:	d01b      	beq.n	407874 <__cmpdf2+0x54>
  40783c:	b001      	add	sp, #4
  40783e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407842:	bf0c      	ite	eq
  407844:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407848:	ea91 0f03 	teqne	r1, r3
  40784c:	bf02      	ittt	eq
  40784e:	ea90 0f02 	teqeq	r0, r2
  407852:	2000      	moveq	r0, #0
  407854:	4770      	bxeq	lr
  407856:	f110 0f00 	cmn.w	r0, #0
  40785a:	ea91 0f03 	teq	r1, r3
  40785e:	bf58      	it	pl
  407860:	4299      	cmppl	r1, r3
  407862:	bf08      	it	eq
  407864:	4290      	cmpeq	r0, r2
  407866:	bf2c      	ite	cs
  407868:	17d8      	asrcs	r0, r3, #31
  40786a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40786e:	f040 0001 	orr.w	r0, r0, #1
  407872:	4770      	bx	lr
  407874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40787c:	d102      	bne.n	407884 <__cmpdf2+0x64>
  40787e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407882:	d107      	bne.n	407894 <__cmpdf2+0x74>
  407884:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40788c:	d1d6      	bne.n	40783c <__cmpdf2+0x1c>
  40788e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407892:	d0d3      	beq.n	40783c <__cmpdf2+0x1c>
  407894:	f85d 0b04 	ldr.w	r0, [sp], #4
  407898:	4770      	bx	lr
  40789a:	bf00      	nop

0040789c <__aeabi_cdrcmple>:
  40789c:	4684      	mov	ip, r0
  40789e:	4610      	mov	r0, r2
  4078a0:	4662      	mov	r2, ip
  4078a2:	468c      	mov	ip, r1
  4078a4:	4619      	mov	r1, r3
  4078a6:	4663      	mov	r3, ip
  4078a8:	e000      	b.n	4078ac <__aeabi_cdcmpeq>
  4078aa:	bf00      	nop

004078ac <__aeabi_cdcmpeq>:
  4078ac:	b501      	push	{r0, lr}
  4078ae:	f7ff ffb7 	bl	407820 <__cmpdf2>
  4078b2:	2800      	cmp	r0, #0
  4078b4:	bf48      	it	mi
  4078b6:	f110 0f00 	cmnmi.w	r0, #0
  4078ba:	bd01      	pop	{r0, pc}

004078bc <__aeabi_dcmpeq>:
  4078bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078c0:	f7ff fff4 	bl	4078ac <__aeabi_cdcmpeq>
  4078c4:	bf0c      	ite	eq
  4078c6:	2001      	moveq	r0, #1
  4078c8:	2000      	movne	r0, #0
  4078ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4078ce:	bf00      	nop

004078d0 <__aeabi_dcmplt>:
  4078d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078d4:	f7ff ffea 	bl	4078ac <__aeabi_cdcmpeq>
  4078d8:	bf34      	ite	cc
  4078da:	2001      	movcc	r0, #1
  4078dc:	2000      	movcs	r0, #0
  4078de:	f85d fb08 	ldr.w	pc, [sp], #8
  4078e2:	bf00      	nop

004078e4 <__aeabi_dcmple>:
  4078e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078e8:	f7ff ffe0 	bl	4078ac <__aeabi_cdcmpeq>
  4078ec:	bf94      	ite	ls
  4078ee:	2001      	movls	r0, #1
  4078f0:	2000      	movhi	r0, #0
  4078f2:	f85d fb08 	ldr.w	pc, [sp], #8
  4078f6:	bf00      	nop

004078f8 <__aeabi_dcmpge>:
  4078f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4078fc:	f7ff ffce 	bl	40789c <__aeabi_cdrcmple>
  407900:	bf94      	ite	ls
  407902:	2001      	movls	r0, #1
  407904:	2000      	movhi	r0, #0
  407906:	f85d fb08 	ldr.w	pc, [sp], #8
  40790a:	bf00      	nop

0040790c <__aeabi_dcmpgt>:
  40790c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407910:	f7ff ffc4 	bl	40789c <__aeabi_cdrcmple>
  407914:	bf34      	ite	cc
  407916:	2001      	movcc	r0, #1
  407918:	2000      	movcs	r0, #0
  40791a:	f85d fb08 	ldr.w	pc, [sp], #8
  40791e:	bf00      	nop

00407920 <__aeabi_d2iz>:
  407920:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407924:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407928:	d215      	bcs.n	407956 <__aeabi_d2iz+0x36>
  40792a:	d511      	bpl.n	407950 <__aeabi_d2iz+0x30>
  40792c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407930:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407934:	d912      	bls.n	40795c <__aeabi_d2iz+0x3c>
  407936:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40793a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40793e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407942:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407946:	fa23 f002 	lsr.w	r0, r3, r2
  40794a:	bf18      	it	ne
  40794c:	4240      	negne	r0, r0
  40794e:	4770      	bx	lr
  407950:	f04f 0000 	mov.w	r0, #0
  407954:	4770      	bx	lr
  407956:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40795a:	d105      	bne.n	407968 <__aeabi_d2iz+0x48>
  40795c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407960:	bf08      	it	eq
  407962:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407966:	4770      	bx	lr
  407968:	f04f 0000 	mov.w	r0, #0
  40796c:	4770      	bx	lr
  40796e:	bf00      	nop

00407970 <__aeabi_d2f>:
  407970:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407978:	bf24      	itt	cs
  40797a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40797e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  407982:	d90d      	bls.n	4079a0 <__aeabi_d2f+0x30>
  407984:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40798c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  407990:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  407994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  407998:	bf08      	it	eq
  40799a:	f020 0001 	biceq.w	r0, r0, #1
  40799e:	4770      	bx	lr
  4079a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4079a4:	d121      	bne.n	4079ea <__aeabi_d2f+0x7a>
  4079a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4079aa:	bfbc      	itt	lt
  4079ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4079b0:	4770      	bxlt	lr
  4079b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4079b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4079ba:	f1c2 0218 	rsb	r2, r2, #24
  4079be:	f1c2 0c20 	rsb	ip, r2, #32
  4079c2:	fa10 f30c 	lsls.w	r3, r0, ip
  4079c6:	fa20 f002 	lsr.w	r0, r0, r2
  4079ca:	bf18      	it	ne
  4079cc:	f040 0001 	orrne.w	r0, r0, #1
  4079d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4079d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4079d8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4079dc:	ea40 000c 	orr.w	r0, r0, ip
  4079e0:	fa23 f302 	lsr.w	r3, r3, r2
  4079e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4079e8:	e7cc      	b.n	407984 <__aeabi_d2f+0x14>
  4079ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4079ee:	d107      	bne.n	407a00 <__aeabi_d2f+0x90>
  4079f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4079f4:	bf1e      	ittt	ne
  4079f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4079fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4079fe:	4770      	bxne	lr
  407a00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407a04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407a08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407a0c:	4770      	bx	lr
  407a0e:	bf00      	nop

00407a10 <__aeabi_f2iz>:
  407a10:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407a14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407a18:	d30f      	bcc.n	407a3a <__aeabi_f2iz+0x2a>
  407a1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407a1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407a22:	d90d      	bls.n	407a40 <__aeabi_f2iz+0x30>
  407a24:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407a2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407a30:	fa23 f002 	lsr.w	r0, r3, r2
  407a34:	bf18      	it	ne
  407a36:	4240      	negne	r0, r0
  407a38:	4770      	bx	lr
  407a3a:	f04f 0000 	mov.w	r0, #0
  407a3e:	4770      	bx	lr
  407a40:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407a44:	d101      	bne.n	407a4a <__aeabi_f2iz+0x3a>
  407a46:	0242      	lsls	r2, r0, #9
  407a48:	d105      	bne.n	407a56 <__aeabi_f2iz+0x46>
  407a4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407a4e:	bf08      	it	eq
  407a50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a54:	4770      	bx	lr
  407a56:	f04f 0000 	mov.w	r0, #0
  407a5a:	4770      	bx	lr

00407a5c <__aeabi_memcpy>:
  407a5c:	f006 be8e 	b.w	40e77c <memcpy>

00407a60 <__aeabi_memset>:
  407a60:	460b      	mov	r3, r1
  407a62:	4611      	mov	r1, r2
  407a64:	461a      	mov	r2, r3
  407a66:	f006 be7d 	b.w	40e764 <__fini_array_end>
  407a6a:	bf00      	nop

00407a6c <__assert_func>:
  407a6c:	4c0a      	ldr	r4, [pc, #40]	; (407a98 <__assert_func+0x2c>)
  407a6e:	4605      	mov	r5, r0
  407a70:	6820      	ldr	r0, [r4, #0]
  407a72:	b500      	push	{lr}
  407a74:	68c0      	ldr	r0, [r0, #12]
  407a76:	b085      	sub	sp, #20
  407a78:	b15a      	cbz	r2, 407a92 <__assert_func+0x26>
  407a7a:	4614      	mov	r4, r2
  407a7c:	4a07      	ldr	r2, [pc, #28]	; (407a9c <__assert_func+0x30>)
  407a7e:	9402      	str	r4, [sp, #8]
  407a80:	e88d 0006 	stmia.w	sp, {r1, r2}
  407a84:	461a      	mov	r2, r3
  407a86:	4906      	ldr	r1, [pc, #24]	; (407aa0 <__assert_func+0x34>)
  407a88:	462b      	mov	r3, r5
  407a8a:	f000 f817 	bl	407abc <fiprintf>
  407a8e:	f002 ff31 	bl	40a8f4 <abort>
  407a92:	4a04      	ldr	r2, [pc, #16]	; (407aa4 <__assert_func+0x38>)
  407a94:	4614      	mov	r4, r2
  407a96:	e7f2      	b.n	407a7e <__assert_func+0x12>
  407a98:	20400448 	.word	0x20400448
  407a9c:	0040e450 	.word	0x0040e450
  407aa0:	0040e460 	.word	0x0040e460
  407aa4:	0040ded4 	.word	0x0040ded4

00407aa8 <atoi>:
  407aa8:	2100      	movs	r1, #0
  407aaa:	220a      	movs	r2, #10
  407aac:	f000 bdac 	b.w	408608 <strtol>

00407ab0 <__errno>:
  407ab0:	4b01      	ldr	r3, [pc, #4]	; (407ab8 <__errno+0x8>)
  407ab2:	6818      	ldr	r0, [r3, #0]
  407ab4:	4770      	bx	lr
  407ab6:	bf00      	nop
  407ab8:	20400448 	.word	0x20400448

00407abc <fiprintf>:
  407abc:	b40e      	push	{r1, r2, r3}
  407abe:	b510      	push	{r4, lr}
  407ac0:	b083      	sub	sp, #12
  407ac2:	4b07      	ldr	r3, [pc, #28]	; (407ae0 <fiprintf+0x24>)
  407ac4:	4601      	mov	r1, r0
  407ac6:	ac05      	add	r4, sp, #20
  407ac8:	6818      	ldr	r0, [r3, #0]
  407aca:	f854 2b04 	ldr.w	r2, [r4], #4
  407ace:	4623      	mov	r3, r4
  407ad0:	9401      	str	r4, [sp, #4]
  407ad2:	f002 f869 	bl	409ba8 <_vfiprintf_r>
  407ad6:	b003      	add	sp, #12
  407ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407adc:	b003      	add	sp, #12
  407ade:	4770      	bx	lr
  407ae0:	20400448 	.word	0x20400448

00407ae4 <__libc_init_array>:
  407ae4:	b570      	push	{r4, r5, r6, lr}
  407ae6:	4e0f      	ldr	r6, [pc, #60]	; (407b24 <__libc_init_array+0x40>)
  407ae8:	4d0f      	ldr	r5, [pc, #60]	; (407b28 <__libc_init_array+0x44>)
  407aea:	1b76      	subs	r6, r6, r5
  407aec:	10b6      	asrs	r6, r6, #2
  407aee:	bf18      	it	ne
  407af0:	2400      	movne	r4, #0
  407af2:	d005      	beq.n	407b00 <__libc_init_array+0x1c>
  407af4:	3401      	adds	r4, #1
  407af6:	f855 3b04 	ldr.w	r3, [r5], #4
  407afa:	4798      	blx	r3
  407afc:	42a6      	cmp	r6, r4
  407afe:	d1f9      	bne.n	407af4 <__libc_init_array+0x10>
  407b00:	4e0a      	ldr	r6, [pc, #40]	; (407b2c <__libc_init_array+0x48>)
  407b02:	f006 fe1d 	bl	40e740 <_init>
  407b06:	4d0a      	ldr	r5, [pc, #40]	; (407b30 <__libc_init_array+0x4c>)
  407b08:	1b76      	subs	r6, r6, r5
  407b0a:	10b6      	asrs	r6, r6, #2
  407b0c:	bf18      	it	ne
  407b0e:	2400      	movne	r4, #0
  407b10:	d006      	beq.n	407b20 <__libc_init_array+0x3c>
  407b12:	3401      	adds	r4, #1
  407b14:	f855 3b04 	ldr.w	r3, [r5], #4
  407b18:	4798      	blx	r3
  407b1a:	42a6      	cmp	r6, r4
  407b1c:	d1f9      	bne.n	407b12 <__libc_init_array+0x2e>
  407b1e:	bd70      	pop	{r4, r5, r6, pc}
  407b20:	bd70      	pop	{r4, r5, r6, pc}
  407b22:	bf00      	nop
  407b24:	0040e74c 	.word	0x0040e74c
  407b28:	0040e74c 	.word	0x0040e74c
  407b2c:	0040e754 	.word	0x0040e754
  407b30:	0040e74c 	.word	0x0040e74c

00407b34 <iprintf>:
  407b34:	b40f      	push	{r0, r1, r2, r3}
  407b36:	b510      	push	{r4, lr}
  407b38:	b082      	sub	sp, #8
  407b3a:	4b07      	ldr	r3, [pc, #28]	; (407b58 <iprintf+0x24>)
  407b3c:	ac04      	add	r4, sp, #16
  407b3e:	6818      	ldr	r0, [r3, #0]
  407b40:	f854 2b04 	ldr.w	r2, [r4], #4
  407b44:	6881      	ldr	r1, [r0, #8]
  407b46:	4623      	mov	r3, r4
  407b48:	9401      	str	r4, [sp, #4]
  407b4a:	f002 f82d 	bl	409ba8 <_vfiprintf_r>
  407b4e:	b002      	add	sp, #8
  407b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407b54:	b004      	add	sp, #16
  407b56:	4770      	bx	lr
  407b58:	20400448 	.word	0x20400448

00407b5c <malloc>:
  407b5c:	4b02      	ldr	r3, [pc, #8]	; (407b68 <malloc+0xc>)
  407b5e:	4601      	mov	r1, r0
  407b60:	6818      	ldr	r0, [r3, #0]
  407b62:	f000 b803 	b.w	407b6c <_malloc_r>
  407b66:	bf00      	nop
  407b68:	20400448 	.word	0x20400448

00407b6c <_malloc_r>:
  407b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b70:	f101 040b 	add.w	r4, r1, #11
  407b74:	b083      	sub	sp, #12
  407b76:	4605      	mov	r5, r0
  407b78:	2c16      	cmp	r4, #22
  407b7a:	d927      	bls.n	407bcc <_malloc_r+0x60>
  407b7c:	f034 0407 	bics.w	r4, r4, #7
  407b80:	d42a      	bmi.n	407bd8 <_malloc_r+0x6c>
  407b82:	42a1      	cmp	r1, r4
  407b84:	d828      	bhi.n	407bd8 <_malloc_r+0x6c>
  407b86:	f000 fa9d 	bl	4080c4 <__malloc_lock>
  407b8a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  407b8e:	d22b      	bcs.n	407be8 <_malloc_r+0x7c>
  407b90:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  407b94:	4ec0      	ldr	r6, [pc, #768]	; (407e98 <_malloc_r+0x32c>)
  407b96:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  407b9a:	68d3      	ldr	r3, [r2, #12]
  407b9c:	4293      	cmp	r3, r2
  407b9e:	f000 8171 	beq.w	407e84 <_malloc_r+0x318>
  407ba2:	685a      	ldr	r2, [r3, #4]
  407ba4:	f103 0808 	add.w	r8, r3, #8
  407ba8:	68d9      	ldr	r1, [r3, #12]
  407baa:	4628      	mov	r0, r5
  407bac:	f022 0203 	bic.w	r2, r2, #3
  407bb0:	689c      	ldr	r4, [r3, #8]
  407bb2:	4413      	add	r3, r2
  407bb4:	60e1      	str	r1, [r4, #12]
  407bb6:	608c      	str	r4, [r1, #8]
  407bb8:	685a      	ldr	r2, [r3, #4]
  407bba:	f042 0201 	orr.w	r2, r2, #1
  407bbe:	605a      	str	r2, [r3, #4]
  407bc0:	f000 fa82 	bl	4080c8 <__malloc_unlock>
  407bc4:	4640      	mov	r0, r8
  407bc6:	b003      	add	sp, #12
  407bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bcc:	2910      	cmp	r1, #16
  407bce:	d803      	bhi.n	407bd8 <_malloc_r+0x6c>
  407bd0:	f000 fa78 	bl	4080c4 <__malloc_lock>
  407bd4:	2410      	movs	r4, #16
  407bd6:	e7db      	b.n	407b90 <_malloc_r+0x24>
  407bd8:	f04f 0800 	mov.w	r8, #0
  407bdc:	230c      	movs	r3, #12
  407bde:	4640      	mov	r0, r8
  407be0:	602b      	str	r3, [r5, #0]
  407be2:	b003      	add	sp, #12
  407be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be8:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  407bec:	f000 8089 	beq.w	407d02 <_malloc_r+0x196>
  407bf0:	f1bc 0f04 	cmp.w	ip, #4
  407bf4:	f200 80c4 	bhi.w	407d80 <_malloc_r+0x214>
  407bf8:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  407bfc:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  407c00:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407c04:	4ea4      	ldr	r6, [pc, #656]	; (407e98 <_malloc_r+0x32c>)
  407c06:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  407c0a:	68c3      	ldr	r3, [r0, #12]
  407c0c:	4298      	cmp	r0, r3
  407c0e:	d105      	bne.n	407c1c <_malloc_r+0xb0>
  407c10:	e00c      	b.n	407c2c <_malloc_r+0xc0>
  407c12:	2900      	cmp	r1, #0
  407c14:	da79      	bge.n	407d0a <_malloc_r+0x19e>
  407c16:	68db      	ldr	r3, [r3, #12]
  407c18:	4298      	cmp	r0, r3
  407c1a:	d007      	beq.n	407c2c <_malloc_r+0xc0>
  407c1c:	685a      	ldr	r2, [r3, #4]
  407c1e:	f022 0203 	bic.w	r2, r2, #3
  407c22:	1b11      	subs	r1, r2, r4
  407c24:	290f      	cmp	r1, #15
  407c26:	ddf4      	ble.n	407c12 <_malloc_r+0xa6>
  407c28:	f10c 3cff 	add.w	ip, ip, #4294967295
  407c2c:	f10c 0c01 	add.w	ip, ip, #1
  407c30:	4f99      	ldr	r7, [pc, #612]	; (407e98 <_malloc_r+0x32c>)
  407c32:	6933      	ldr	r3, [r6, #16]
  407c34:	f107 0e08 	add.w	lr, r7, #8
  407c38:	4573      	cmp	r3, lr
  407c3a:	f000 8119 	beq.w	407e70 <_malloc_r+0x304>
  407c3e:	685a      	ldr	r2, [r3, #4]
  407c40:	f022 0203 	bic.w	r2, r2, #3
  407c44:	1b11      	subs	r1, r2, r4
  407c46:	290f      	cmp	r1, #15
  407c48:	f300 80ca 	bgt.w	407de0 <_malloc_r+0x274>
  407c4c:	2900      	cmp	r1, #0
  407c4e:	f8c7 e014 	str.w	lr, [r7, #20]
  407c52:	f8c7 e010 	str.w	lr, [r7, #16]
  407c56:	da6a      	bge.n	407d2e <_malloc_r+0x1c2>
  407c58:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407c5c:	f080 809f 	bcs.w	407d9e <_malloc_r+0x232>
  407c60:	08d2      	lsrs	r2, r2, #3
  407c62:	2001      	movs	r0, #1
  407c64:	6879      	ldr	r1, [r7, #4]
  407c66:	ea4f 08a2 	mov.w	r8, r2, asr #2
  407c6a:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  407c6e:	fa00 f008 	lsl.w	r0, r0, r8
  407c72:	f8d2 8008 	ldr.w	r8, [r2, #8]
  407c76:	4308      	orrs	r0, r1
  407c78:	60da      	str	r2, [r3, #12]
  407c7a:	f8c3 8008 	str.w	r8, [r3, #8]
  407c7e:	6078      	str	r0, [r7, #4]
  407c80:	6093      	str	r3, [r2, #8]
  407c82:	f8c8 300c 	str.w	r3, [r8, #12]
  407c86:	ea4f 03ac 	mov.w	r3, ip, asr #2
  407c8a:	2101      	movs	r1, #1
  407c8c:	4099      	lsls	r1, r3
  407c8e:	4281      	cmp	r1, r0
  407c90:	d85b      	bhi.n	407d4a <_malloc_r+0x1de>
  407c92:	4208      	tst	r0, r1
  407c94:	d106      	bne.n	407ca4 <_malloc_r+0x138>
  407c96:	f02c 0c03 	bic.w	ip, ip, #3
  407c9a:	0049      	lsls	r1, r1, #1
  407c9c:	f10c 0c04 	add.w	ip, ip, #4
  407ca0:	4208      	tst	r0, r1
  407ca2:	d0fa      	beq.n	407c9a <_malloc_r+0x12e>
  407ca4:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  407ca8:	46e1      	mov	r9, ip
  407caa:	4640      	mov	r0, r8
  407cac:	68c7      	ldr	r7, [r0, #12]
  407cae:	42b8      	cmp	r0, r7
  407cb0:	d107      	bne.n	407cc2 <_malloc_r+0x156>
  407cb2:	e0df      	b.n	407e74 <_malloc_r+0x308>
  407cb4:	2a00      	cmp	r2, #0
  407cb6:	f280 80f7 	bge.w	407ea8 <_malloc_r+0x33c>
  407cba:	68ff      	ldr	r7, [r7, #12]
  407cbc:	42b8      	cmp	r0, r7
  407cbe:	f000 80d9 	beq.w	407e74 <_malloc_r+0x308>
  407cc2:	687b      	ldr	r3, [r7, #4]
  407cc4:	f023 0303 	bic.w	r3, r3, #3
  407cc8:	1b1a      	subs	r2, r3, r4
  407cca:	2a0f      	cmp	r2, #15
  407ccc:	ddf2      	ble.n	407cb4 <_malloc_r+0x148>
  407cce:	46b8      	mov	r8, r7
  407cd0:	68fb      	ldr	r3, [r7, #12]
  407cd2:	f044 0901 	orr.w	r9, r4, #1
  407cd6:	f042 0c01 	orr.w	ip, r2, #1
  407cda:	f858 1f08 	ldr.w	r1, [r8, #8]!
  407cde:	443c      	add	r4, r7
  407ce0:	f8c7 9004 	str.w	r9, [r7, #4]
  407ce4:	4628      	mov	r0, r5
  407ce6:	60cb      	str	r3, [r1, #12]
  407ce8:	6099      	str	r1, [r3, #8]
  407cea:	6174      	str	r4, [r6, #20]
  407cec:	6134      	str	r4, [r6, #16]
  407cee:	f8c4 e00c 	str.w	lr, [r4, #12]
  407cf2:	f8c4 e008 	str.w	lr, [r4, #8]
  407cf6:	f8c4 c004 	str.w	ip, [r4, #4]
  407cfa:	50a2      	str	r2, [r4, r2]
  407cfc:	f000 f9e4 	bl	4080c8 <__malloc_unlock>
  407d00:	e760      	b.n	407bc4 <_malloc_r+0x58>
  407d02:	207e      	movs	r0, #126	; 0x7e
  407d04:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  407d08:	e77c      	b.n	407c04 <_malloc_r+0x98>
  407d0a:	441a      	add	r2, r3
  407d0c:	68dc      	ldr	r4, [r3, #12]
  407d0e:	689e      	ldr	r6, [r3, #8]
  407d10:	f103 0808 	add.w	r8, r3, #8
  407d14:	6851      	ldr	r1, [r2, #4]
  407d16:	4628      	mov	r0, r5
  407d18:	60f4      	str	r4, [r6, #12]
  407d1a:	f041 0301 	orr.w	r3, r1, #1
  407d1e:	60a6      	str	r6, [r4, #8]
  407d20:	6053      	str	r3, [r2, #4]
  407d22:	f000 f9d1 	bl	4080c8 <__malloc_unlock>
  407d26:	4640      	mov	r0, r8
  407d28:	b003      	add	sp, #12
  407d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d2e:	441a      	add	r2, r3
  407d30:	f103 0808 	add.w	r8, r3, #8
  407d34:	4628      	mov	r0, r5
  407d36:	6853      	ldr	r3, [r2, #4]
  407d38:	f043 0301 	orr.w	r3, r3, #1
  407d3c:	6053      	str	r3, [r2, #4]
  407d3e:	f000 f9c3 	bl	4080c8 <__malloc_unlock>
  407d42:	4640      	mov	r0, r8
  407d44:	b003      	add	sp, #12
  407d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d4a:	68b7      	ldr	r7, [r6, #8]
  407d4c:	687a      	ldr	r2, [r7, #4]
  407d4e:	f022 0803 	bic.w	r8, r2, #3
  407d52:	ebc4 0208 	rsb	r2, r4, r8
  407d56:	2a0f      	cmp	r2, #15
  407d58:	dd56      	ble.n	407e08 <_malloc_r+0x29c>
  407d5a:	45a0      	cmp	r8, r4
  407d5c:	d354      	bcc.n	407e08 <_malloc_r+0x29c>
  407d5e:	f044 0301 	orr.w	r3, r4, #1
  407d62:	f042 0201 	orr.w	r2, r2, #1
  407d66:	443c      	add	r4, r7
  407d68:	f107 0808 	add.w	r8, r7, #8
  407d6c:	607b      	str	r3, [r7, #4]
  407d6e:	4628      	mov	r0, r5
  407d70:	60b4      	str	r4, [r6, #8]
  407d72:	6062      	str	r2, [r4, #4]
  407d74:	f000 f9a8 	bl	4080c8 <__malloc_unlock>
  407d78:	4640      	mov	r0, r8
  407d7a:	b003      	add	sp, #12
  407d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d80:	f1bc 0f14 	cmp.w	ip, #20
  407d84:	f240 809f 	bls.w	407ec6 <_malloc_r+0x35a>
  407d88:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  407d8c:	f200 8127 	bhi.w	407fde <_malloc_r+0x472>
  407d90:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  407d94:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  407d98:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407d9c:	e732      	b.n	407c04 <_malloc_r+0x98>
  407d9e:	0a51      	lsrs	r1, r2, #9
  407da0:	2904      	cmp	r1, #4
  407da2:	f240 8095 	bls.w	407ed0 <_malloc_r+0x364>
  407da6:	2914      	cmp	r1, #20
  407da8:	f200 8142 	bhi.w	408030 <_malloc_r+0x4c4>
  407dac:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  407db0:	0078      	lsls	r0, r7, #1
  407db2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  407db6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 407e98 <_malloc_r+0x32c>
  407dba:	6881      	ldr	r1, [r0, #8]
  407dbc:	4281      	cmp	r1, r0
  407dbe:	f000 811b 	beq.w	407ff8 <_malloc_r+0x48c>
  407dc2:	684f      	ldr	r7, [r1, #4]
  407dc4:	f027 0703 	bic.w	r7, r7, #3
  407dc8:	42ba      	cmp	r2, r7
  407dca:	d202      	bcs.n	407dd2 <_malloc_r+0x266>
  407dcc:	6889      	ldr	r1, [r1, #8]
  407dce:	4288      	cmp	r0, r1
  407dd0:	d1f7      	bne.n	407dc2 <_malloc_r+0x256>
  407dd2:	68ca      	ldr	r2, [r1, #12]
  407dd4:	6870      	ldr	r0, [r6, #4]
  407dd6:	60da      	str	r2, [r3, #12]
  407dd8:	6099      	str	r1, [r3, #8]
  407dda:	6093      	str	r3, [r2, #8]
  407ddc:	60cb      	str	r3, [r1, #12]
  407dde:	e752      	b.n	407c86 <_malloc_r+0x11a>
  407de0:	f044 0601 	orr.w	r6, r4, #1
  407de4:	f041 0201 	orr.w	r2, r1, #1
  407de8:	441c      	add	r4, r3
  407dea:	4628      	mov	r0, r5
  407dec:	605e      	str	r6, [r3, #4]
  407dee:	f103 0808 	add.w	r8, r3, #8
  407df2:	617c      	str	r4, [r7, #20]
  407df4:	613c      	str	r4, [r7, #16]
  407df6:	f8c4 e00c 	str.w	lr, [r4, #12]
  407dfa:	f8c4 e008 	str.w	lr, [r4, #8]
  407dfe:	6062      	str	r2, [r4, #4]
  407e00:	5061      	str	r1, [r4, r1]
  407e02:	f000 f961 	bl	4080c8 <__malloc_unlock>
  407e06:	e6dd      	b.n	407bc4 <_malloc_r+0x58>
  407e08:	4a24      	ldr	r2, [pc, #144]	; (407e9c <_malloc_r+0x330>)
  407e0a:	4b25      	ldr	r3, [pc, #148]	; (407ea0 <_malloc_r+0x334>)
  407e0c:	6811      	ldr	r1, [r2, #0]
  407e0e:	681b      	ldr	r3, [r3, #0]
  407e10:	3101      	adds	r1, #1
  407e12:	4423      	add	r3, r4
  407e14:	f000 8109 	beq.w	40802a <_malloc_r+0x4be>
  407e18:	f241 010f 	movw	r1, #4111	; 0x100f
  407e1c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 407ea4 <_malloc_r+0x338>
  407e20:	4419      	add	r1, r3
  407e22:	ea01 0909 	and.w	r9, r1, r9
  407e26:	4628      	mov	r0, r5
  407e28:	4649      	mov	r1, r9
  407e2a:	9201      	str	r2, [sp, #4]
  407e2c:	f000 f94e 	bl	4080cc <_sbrk_r>
  407e30:	f1b0 3fff 	cmp.w	r0, #4294967295
  407e34:	4682      	mov	sl, r0
  407e36:	9a01      	ldr	r2, [sp, #4]
  407e38:	f000 8101 	beq.w	40803e <_malloc_r+0x4d2>
  407e3c:	1bbb      	subs	r3, r7, r6
  407e3e:	eb07 0108 	add.w	r1, r7, r8
  407e42:	4815      	ldr	r0, [pc, #84]	; (407e98 <_malloc_r+0x32c>)
  407e44:	bf18      	it	ne
  407e46:	2301      	movne	r3, #1
  407e48:	4551      	cmp	r1, sl
  407e4a:	d967      	bls.n	407f1c <_malloc_r+0x3b0>
  407e4c:	2b00      	cmp	r3, #0
  407e4e:	d065      	beq.n	407f1c <_malloc_r+0x3b0>
  407e50:	6887      	ldr	r7, [r0, #8]
  407e52:	687b      	ldr	r3, [r7, #4]
  407e54:	f023 0303 	bic.w	r3, r3, #3
  407e58:	1b1a      	subs	r2, r3, r4
  407e5a:	2a0f      	cmp	r2, #15
  407e5c:	dd02      	ble.n	407e64 <_malloc_r+0x2f8>
  407e5e:	429c      	cmp	r4, r3
  407e60:	f67f af7d 	bls.w	407d5e <_malloc_r+0x1f2>
  407e64:	4628      	mov	r0, r5
  407e66:	f04f 0800 	mov.w	r8, #0
  407e6a:	f000 f92d 	bl	4080c8 <__malloc_unlock>
  407e6e:	e6a9      	b.n	407bc4 <_malloc_r+0x58>
  407e70:	6878      	ldr	r0, [r7, #4]
  407e72:	e708      	b.n	407c86 <_malloc_r+0x11a>
  407e74:	f109 0901 	add.w	r9, r9, #1
  407e78:	3008      	adds	r0, #8
  407e7a:	f019 0f03 	tst.w	r9, #3
  407e7e:	f47f af15 	bne.w	407cac <_malloc_r+0x140>
  407e82:	e02f      	b.n	407ee4 <_malloc_r+0x378>
  407e84:	f103 0208 	add.w	r2, r3, #8
  407e88:	695b      	ldr	r3, [r3, #20]
  407e8a:	429a      	cmp	r2, r3
  407e8c:	bf08      	it	eq
  407e8e:	f10c 0c02 	addeq.w	ip, ip, #2
  407e92:	f43f aecd 	beq.w	407c30 <_malloc_r+0xc4>
  407e96:	e684      	b.n	407ba2 <_malloc_r+0x36>
  407e98:	2040044c 	.word	0x2040044c
  407e9c:	20400858 	.word	0x20400858
  407ea0:	2040c2ac 	.word	0x2040c2ac
  407ea4:	fffff000 	.word	0xfffff000
  407ea8:	18fa      	adds	r2, r7, r3
  407eaa:	46b8      	mov	r8, r7
  407eac:	68f9      	ldr	r1, [r7, #12]
  407eae:	4628      	mov	r0, r5
  407eb0:	6853      	ldr	r3, [r2, #4]
  407eb2:	f858 4f08 	ldr.w	r4, [r8, #8]!
  407eb6:	f043 0301 	orr.w	r3, r3, #1
  407eba:	6053      	str	r3, [r2, #4]
  407ebc:	60e1      	str	r1, [r4, #12]
  407ebe:	608c      	str	r4, [r1, #8]
  407ec0:	f000 f902 	bl	4080c8 <__malloc_unlock>
  407ec4:	e67e      	b.n	407bc4 <_malloc_r+0x58>
  407ec6:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  407eca:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407ece:	e699      	b.n	407c04 <_malloc_r+0x98>
  407ed0:	0991      	lsrs	r1, r2, #6
  407ed2:	f101 0738 	add.w	r7, r1, #56	; 0x38
  407ed6:	0078      	lsls	r0, r7, #1
  407ed8:	e76b      	b.n	407db2 <_malloc_r+0x246>
  407eda:	f8d8 8000 	ldr.w	r8, [r8]
  407ede:	4598      	cmp	r8, r3
  407ee0:	f040 80e6 	bne.w	4080b0 <_malloc_r+0x544>
  407ee4:	f01c 0f03 	tst.w	ip, #3
  407ee8:	f1a8 0308 	sub.w	r3, r8, #8
  407eec:	f10c 3cff 	add.w	ip, ip, #4294967295
  407ef0:	d1f3      	bne.n	407eda <_malloc_r+0x36e>
  407ef2:	6873      	ldr	r3, [r6, #4]
  407ef4:	ea23 0301 	bic.w	r3, r3, r1
  407ef8:	6073      	str	r3, [r6, #4]
  407efa:	0049      	lsls	r1, r1, #1
  407efc:	4299      	cmp	r1, r3
  407efe:	f63f af24 	bhi.w	407d4a <_malloc_r+0x1de>
  407f02:	2900      	cmp	r1, #0
  407f04:	f43f af21 	beq.w	407d4a <_malloc_r+0x1de>
  407f08:	420b      	tst	r3, r1
  407f0a:	46cc      	mov	ip, r9
  407f0c:	f47f aeca 	bne.w	407ca4 <_malloc_r+0x138>
  407f10:	0049      	lsls	r1, r1, #1
  407f12:	f10c 0c04 	add.w	ip, ip, #4
  407f16:	420b      	tst	r3, r1
  407f18:	d0fa      	beq.n	407f10 <_malloc_r+0x3a4>
  407f1a:	e6c3      	b.n	407ca4 <_malloc_r+0x138>
  407f1c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4080bc <_malloc_r+0x550>
  407f20:	4551      	cmp	r1, sl
  407f22:	f8db 0000 	ldr.w	r0, [fp]
  407f26:	4448      	add	r0, r9
  407f28:	f8cb 0000 	str.w	r0, [fp]
  407f2c:	f000 808c 	beq.w	408048 <_malloc_r+0x4dc>
  407f30:	6812      	ldr	r2, [r2, #0]
  407f32:	f8df e18c 	ldr.w	lr, [pc, #396]	; 4080c0 <_malloc_r+0x554>
  407f36:	3201      	adds	r2, #1
  407f38:	f000 80a3 	beq.w	408082 <_malloc_r+0x516>
  407f3c:	ebc1 010a 	rsb	r1, r1, sl
  407f40:	4408      	add	r0, r1
  407f42:	f8cb 0000 	str.w	r0, [fp]
  407f46:	f01a 0107 	ands.w	r1, sl, #7
  407f4a:	d052      	beq.n	407ff2 <_malloc_r+0x486>
  407f4c:	f1c1 0008 	rsb	r0, r1, #8
  407f50:	f241 0208 	movw	r2, #4104	; 0x1008
  407f54:	4482      	add	sl, r0
  407f56:	1a52      	subs	r2, r2, r1
  407f58:	eb0a 0109 	add.w	r1, sl, r9
  407f5c:	4628      	mov	r0, r5
  407f5e:	9301      	str	r3, [sp, #4]
  407f60:	f3c1 010b 	ubfx	r1, r1, #0, #12
  407f64:	ebc1 0902 	rsb	r9, r1, r2
  407f68:	4649      	mov	r1, r9
  407f6a:	f000 f8af 	bl	4080cc <_sbrk_r>
  407f6e:	1c43      	adds	r3, r0, #1
  407f70:	9b01      	ldr	r3, [sp, #4]
  407f72:	d07a      	beq.n	40806a <_malloc_r+0x4fe>
  407f74:	ebca 0200 	rsb	r2, sl, r0
  407f78:	444a      	add	r2, r9
  407f7a:	f042 0201 	orr.w	r2, r2, #1
  407f7e:	f8db 0000 	ldr.w	r0, [fp]
  407f82:	f8c6 a008 	str.w	sl, [r6, #8]
  407f86:	4448      	add	r0, r9
  407f88:	f8ca 2004 	str.w	r2, [sl, #4]
  407f8c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4080bc <_malloc_r+0x550>
  407f90:	f8cb 0000 	str.w	r0, [fp]
  407f94:	b1a3      	cbz	r3, 407fc0 <_malloc_r+0x454>
  407f96:	f1b8 0f0f 	cmp.w	r8, #15
  407f9a:	d937      	bls.n	40800c <_malloc_r+0x4a0>
  407f9c:	687b      	ldr	r3, [r7, #4]
  407f9e:	f1a8 020c 	sub.w	r2, r8, #12
  407fa2:	f04f 0e05 	mov.w	lr, #5
  407fa6:	f022 0207 	bic.w	r2, r2, #7
  407faa:	f003 0301 	and.w	r3, r3, #1
  407fae:	18b9      	adds	r1, r7, r2
  407fb0:	4313      	orrs	r3, r2
  407fb2:	2a0f      	cmp	r2, #15
  407fb4:	607b      	str	r3, [r7, #4]
  407fb6:	f8c1 e004 	str.w	lr, [r1, #4]
  407fba:	f8c1 e008 	str.w	lr, [r1, #8]
  407fbe:	d858      	bhi.n	408072 <_malloc_r+0x506>
  407fc0:	4b3c      	ldr	r3, [pc, #240]	; (4080b4 <_malloc_r+0x548>)
  407fc2:	681a      	ldr	r2, [r3, #0]
  407fc4:	4290      	cmp	r0, r2
  407fc6:	d900      	bls.n	407fca <_malloc_r+0x45e>
  407fc8:	6018      	str	r0, [r3, #0]
  407fca:	4b3b      	ldr	r3, [pc, #236]	; (4080b8 <_malloc_r+0x54c>)
  407fcc:	68b7      	ldr	r7, [r6, #8]
  407fce:	681a      	ldr	r2, [r3, #0]
  407fd0:	4290      	cmp	r0, r2
  407fd2:	d900      	bls.n	407fd6 <_malloc_r+0x46a>
  407fd4:	6018      	str	r0, [r3, #0]
  407fd6:	687b      	ldr	r3, [r7, #4]
  407fd8:	f023 0303 	bic.w	r3, r3, #3
  407fdc:	e73c      	b.n	407e58 <_malloc_r+0x2ec>
  407fde:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  407fe2:	d817      	bhi.n	408014 <_malloc_r+0x4a8>
  407fe4:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  407fe8:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  407fec:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407ff0:	e608      	b.n	407c04 <_malloc_r+0x98>
  407ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  407ff6:	e7af      	b.n	407f58 <_malloc_r+0x3ec>
  407ff8:	10bf      	asrs	r7, r7, #2
  407ffa:	2001      	movs	r0, #1
  407ffc:	460a      	mov	r2, r1
  407ffe:	40b8      	lsls	r0, r7
  408000:	f8d9 7004 	ldr.w	r7, [r9, #4]
  408004:	4338      	orrs	r0, r7
  408006:	f8c9 0004 	str.w	r0, [r9, #4]
  40800a:	e6e4      	b.n	407dd6 <_malloc_r+0x26a>
  40800c:	2301      	movs	r3, #1
  40800e:	f8ca 3004 	str.w	r3, [sl, #4]
  408012:	e727      	b.n	407e64 <_malloc_r+0x2f8>
  408014:	f240 5354 	movw	r3, #1364	; 0x554
  408018:	459c      	cmp	ip, r3
  40801a:	d822      	bhi.n	408062 <_malloc_r+0x4f6>
  40801c:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  408020:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  408024:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408028:	e5ec      	b.n	407c04 <_malloc_r+0x98>
  40802a:	f103 0910 	add.w	r9, r3, #16
  40802e:	e6fa      	b.n	407e26 <_malloc_r+0x2ba>
  408030:	2954      	cmp	r1, #84	; 0x54
  408032:	d829      	bhi.n	408088 <_malloc_r+0x51c>
  408034:	0b11      	lsrs	r1, r2, #12
  408036:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40803a:	0078      	lsls	r0, r7, #1
  40803c:	e6b9      	b.n	407db2 <_malloc_r+0x246>
  40803e:	68b7      	ldr	r7, [r6, #8]
  408040:	687b      	ldr	r3, [r7, #4]
  408042:	f023 0303 	bic.w	r3, r3, #3
  408046:	e707      	b.n	407e58 <_malloc_r+0x2ec>
  408048:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40804c:	f1be 0f00 	cmp.w	lr, #0
  408050:	f47f af6e 	bne.w	407f30 <_malloc_r+0x3c4>
  408054:	eb09 0308 	add.w	r3, r9, r8
  408058:	68b2      	ldr	r2, [r6, #8]
  40805a:	f043 0301 	orr.w	r3, r3, #1
  40805e:	6053      	str	r3, [r2, #4]
  408060:	e7ae      	b.n	407fc0 <_malloc_r+0x454>
  408062:	20fc      	movs	r0, #252	; 0xfc
  408064:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  408068:	e5cc      	b.n	407c04 <_malloc_r+0x98>
  40806a:	2201      	movs	r2, #1
  40806c:	f04f 0900 	mov.w	r9, #0
  408070:	e785      	b.n	407f7e <_malloc_r+0x412>
  408072:	4628      	mov	r0, r5
  408074:	f107 0108 	add.w	r1, r7, #8
  408078:	f003 fe74 	bl	40bd64 <_free_r>
  40807c:	f8d9 0000 	ldr.w	r0, [r9]
  408080:	e79e      	b.n	407fc0 <_malloc_r+0x454>
  408082:	f8ce a000 	str.w	sl, [lr]
  408086:	e75e      	b.n	407f46 <_malloc_r+0x3da>
  408088:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40808c:	d804      	bhi.n	408098 <_malloc_r+0x52c>
  40808e:	0bd1      	lsrs	r1, r2, #15
  408090:	f101 0777 	add.w	r7, r1, #119	; 0x77
  408094:	0078      	lsls	r0, r7, #1
  408096:	e68c      	b.n	407db2 <_malloc_r+0x246>
  408098:	f240 5054 	movw	r0, #1364	; 0x554
  40809c:	4281      	cmp	r1, r0
  40809e:	d804      	bhi.n	4080aa <_malloc_r+0x53e>
  4080a0:	0c91      	lsrs	r1, r2, #18
  4080a2:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  4080a6:	0078      	lsls	r0, r7, #1
  4080a8:	e683      	b.n	407db2 <_malloc_r+0x246>
  4080aa:	20fc      	movs	r0, #252	; 0xfc
  4080ac:	277e      	movs	r7, #126	; 0x7e
  4080ae:	e680      	b.n	407db2 <_malloc_r+0x246>
  4080b0:	6873      	ldr	r3, [r6, #4]
  4080b2:	e722      	b.n	407efa <_malloc_r+0x38e>
  4080b4:	2040c2a8 	.word	0x2040c2a8
  4080b8:	2040c2a4 	.word	0x2040c2a4
  4080bc:	2040c2b0 	.word	0x2040c2b0
  4080c0:	20400858 	.word	0x20400858

004080c4 <__malloc_lock>:
  4080c4:	4770      	bx	lr
  4080c6:	bf00      	nop

004080c8 <__malloc_unlock>:
  4080c8:	4770      	bx	lr
  4080ca:	bf00      	nop

004080cc <_sbrk_r>:
  4080cc:	b538      	push	{r3, r4, r5, lr}
  4080ce:	2300      	movs	r3, #0
  4080d0:	4c06      	ldr	r4, [pc, #24]	; (4080ec <_sbrk_r+0x20>)
  4080d2:	4605      	mov	r5, r0
  4080d4:	4608      	mov	r0, r1
  4080d6:	6023      	str	r3, [r4, #0]
  4080d8:	f7fb f944 	bl	403364 <_sbrk>
  4080dc:	1c43      	adds	r3, r0, #1
  4080de:	d000      	beq.n	4080e2 <_sbrk_r+0x16>
  4080e0:	bd38      	pop	{r3, r4, r5, pc}
  4080e2:	6823      	ldr	r3, [r4, #0]
  4080e4:	2b00      	cmp	r3, #0
  4080e6:	d0fb      	beq.n	4080e0 <_sbrk_r+0x14>
  4080e8:	602b      	str	r3, [r5, #0]
  4080ea:	bd38      	pop	{r3, r4, r5, pc}
  4080ec:	2040c440 	.word	0x2040c440

004080f0 <sprintf>:
  4080f0:	b40e      	push	{r1, r2, r3}
  4080f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080f4:	b09c      	sub	sp, #112	; 0x70
  4080f6:	4b10      	ldr	r3, [pc, #64]	; (408138 <sprintf+0x48>)
  4080f8:	4606      	mov	r6, r0
  4080fa:	f44f 7e02 	mov.w	lr, #520	; 0x208
  4080fe:	ac21      	add	r4, sp, #132	; 0x84
  408100:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  408104:	f64f 77ff 	movw	r7, #65535	; 0xffff
  408108:	6818      	ldr	r0, [r3, #0]
  40810a:	f854 2b04 	ldr.w	r2, [r4], #4
  40810e:	a902      	add	r1, sp, #8
  408110:	9602      	str	r6, [sp, #8]
  408112:	4623      	mov	r3, r4
  408114:	9606      	str	r6, [sp, #24]
  408116:	9401      	str	r4, [sp, #4]
  408118:	f8ad e014 	strh.w	lr, [sp, #20]
  40811c:	9504      	str	r5, [sp, #16]
  40811e:	9507      	str	r5, [sp, #28]
  408120:	f8ad 7016 	strh.w	r7, [sp, #22]
  408124:	f000 fa7c 	bl	408620 <_svfprintf_r>
  408128:	9b02      	ldr	r3, [sp, #8]
  40812a:	2200      	movs	r2, #0
  40812c:	701a      	strb	r2, [r3, #0]
  40812e:	b01c      	add	sp, #112	; 0x70
  408130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408134:	b003      	add	sp, #12
  408136:	4770      	bx	lr
  408138:	20400448 	.word	0x20400448
  40813c:	00000000 	.word	0x00000000
  408140:	eba2 0003 	sub.w	r0, r2, r3
  408144:	4770      	bx	lr
  408146:	bf00      	nop

00408148 <strcmp>:
  408148:	7802      	ldrb	r2, [r0, #0]
  40814a:	780b      	ldrb	r3, [r1, #0]
  40814c:	2a01      	cmp	r2, #1
  40814e:	bf28      	it	cs
  408150:	429a      	cmpcs	r2, r3
  408152:	d1f5      	bne.n	408140 <sprintf+0x50>
  408154:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  408158:	ea40 0401 	orr.w	r4, r0, r1
  40815c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  408160:	f06f 0c00 	mvn.w	ip, #0
  408164:	ea4f 7244 	mov.w	r2, r4, lsl #29
  408168:	b312      	cbz	r2, 4081b0 <strcmp+0x68>
  40816a:	ea80 0401 	eor.w	r4, r0, r1
  40816e:	f014 0f07 	tst.w	r4, #7
  408172:	d16a      	bne.n	40824a <strcmp+0x102>
  408174:	f000 0407 	and.w	r4, r0, #7
  408178:	f020 0007 	bic.w	r0, r0, #7
  40817c:	f004 0503 	and.w	r5, r4, #3
  408180:	f021 0107 	bic.w	r1, r1, #7
  408184:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  408188:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40818c:	f014 0f04 	tst.w	r4, #4
  408190:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  408194:	fa0c f405 	lsl.w	r4, ip, r5
  408198:	ea62 0204 	orn	r2, r2, r4
  40819c:	ea66 0604 	orn	r6, r6, r4
  4081a0:	d00a      	beq.n	4081b8 <strcmp+0x70>
  4081a2:	ea63 0304 	orn	r3, r3, r4
  4081a6:	4662      	mov	r2, ip
  4081a8:	ea67 0704 	orn	r7, r7, r4
  4081ac:	4666      	mov	r6, ip
  4081ae:	e003      	b.n	4081b8 <strcmp+0x70>
  4081b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  4081b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  4081b8:	fa82 f54c 	uadd8	r5, r2, ip
  4081bc:	ea82 0406 	eor.w	r4, r2, r6
  4081c0:	faa4 f48c 	sel	r4, r4, ip
  4081c4:	bb6c      	cbnz	r4, 408222 <strcmp+0xda>
  4081c6:	fa83 f54c 	uadd8	r5, r3, ip
  4081ca:	ea83 0507 	eor.w	r5, r3, r7
  4081ce:	faa5 f58c 	sel	r5, r5, ip
  4081d2:	b995      	cbnz	r5, 4081fa <strcmp+0xb2>
  4081d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4081d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4081dc:	fa82 f54c 	uadd8	r5, r2, ip
  4081e0:	ea82 0406 	eor.w	r4, r2, r6
  4081e4:	faa4 f48c 	sel	r4, r4, ip
  4081e8:	fa83 f54c 	uadd8	r5, r3, ip
  4081ec:	ea83 0507 	eor.w	r5, r3, r7
  4081f0:	faa5 f58c 	sel	r5, r5, ip
  4081f4:	4325      	orrs	r5, r4
  4081f6:	d0db      	beq.n	4081b0 <strcmp+0x68>
  4081f8:	b99c      	cbnz	r4, 408222 <strcmp+0xda>
  4081fa:	ba2d      	rev	r5, r5
  4081fc:	fab5 f485 	clz	r4, r5
  408200:	f024 0407 	bic.w	r4, r4, #7
  408204:	fa27 f104 	lsr.w	r1, r7, r4
  408208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40820c:	fa23 f304 	lsr.w	r3, r3, r4
  408210:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  408214:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408218:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40821c:	eba0 0001 	sub.w	r0, r0, r1
  408220:	4770      	bx	lr
  408222:	ba24      	rev	r4, r4
  408224:	fab4 f484 	clz	r4, r4
  408228:	f024 0407 	bic.w	r4, r4, #7
  40822c:	fa26 f104 	lsr.w	r1, r6, r4
  408230:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  408234:	fa22 f204 	lsr.w	r2, r2, r4
  408238:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40823c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408240:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  408244:	eba0 0001 	sub.w	r0, r0, r1
  408248:	4770      	bx	lr
  40824a:	f014 0f03 	tst.w	r4, #3
  40824e:	d13c      	bne.n	4082ca <strcmp+0x182>
  408250:	f010 0403 	ands.w	r4, r0, #3
  408254:	d128      	bne.n	4082a8 <strcmp+0x160>
  408256:	f850 2b08 	ldr.w	r2, [r0], #8
  40825a:	f851 3b08 	ldr.w	r3, [r1], #8
  40825e:	fa82 f54c 	uadd8	r5, r2, ip
  408262:	ea82 0503 	eor.w	r5, r2, r3
  408266:	faa5 f58c 	sel	r5, r5, ip
  40826a:	b95d      	cbnz	r5, 408284 <strcmp+0x13c>
  40826c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408270:	f851 3c04 	ldr.w	r3, [r1, #-4]
  408274:	fa82 f54c 	uadd8	r5, r2, ip
  408278:	ea82 0503 	eor.w	r5, r2, r3
  40827c:	faa5 f58c 	sel	r5, r5, ip
  408280:	2d00      	cmp	r5, #0
  408282:	d0e8      	beq.n	408256 <strcmp+0x10e>
  408284:	ba2d      	rev	r5, r5
  408286:	fab5 f485 	clz	r4, r5
  40828a:	f024 0407 	bic.w	r4, r4, #7
  40828e:	fa23 f104 	lsr.w	r1, r3, r4
  408292:	fa22 f204 	lsr.w	r2, r2, r4
  408296:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40829a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40829e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4082a2:	eba0 0001 	sub.w	r0, r0, r1
  4082a6:	4770      	bx	lr
  4082a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  4082ac:	f020 0003 	bic.w	r0, r0, #3
  4082b0:	f850 2b08 	ldr.w	r2, [r0], #8
  4082b4:	f021 0103 	bic.w	r1, r1, #3
  4082b8:	f851 3b08 	ldr.w	r3, [r1], #8
  4082bc:	fa0c f404 	lsl.w	r4, ip, r4
  4082c0:	ea62 0204 	orn	r2, r2, r4
  4082c4:	ea63 0304 	orn	r3, r3, r4
  4082c8:	e7c9      	b.n	40825e <strcmp+0x116>
  4082ca:	f010 0403 	ands.w	r4, r0, #3
  4082ce:	d01a      	beq.n	408306 <strcmp+0x1be>
  4082d0:	eba1 0104 	sub.w	r1, r1, r4
  4082d4:	f020 0003 	bic.w	r0, r0, #3
  4082d8:	07e4      	lsls	r4, r4, #31
  4082da:	f850 2b04 	ldr.w	r2, [r0], #4
  4082de:	d006      	beq.n	4082ee <strcmp+0x1a6>
  4082e0:	d20f      	bcs.n	408302 <strcmp+0x1ba>
  4082e2:	788b      	ldrb	r3, [r1, #2]
  4082e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4082e8:	1ae4      	subs	r4, r4, r3
  4082ea:	d106      	bne.n	4082fa <strcmp+0x1b2>
  4082ec:	b12b      	cbz	r3, 4082fa <strcmp+0x1b2>
  4082ee:	78cb      	ldrb	r3, [r1, #3]
  4082f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4082f4:	1ae4      	subs	r4, r4, r3
  4082f6:	d100      	bne.n	4082fa <strcmp+0x1b2>
  4082f8:	b91b      	cbnz	r3, 408302 <strcmp+0x1ba>
  4082fa:	4620      	mov	r0, r4
  4082fc:	f85d 4b10 	ldr.w	r4, [sp], #16
  408300:	4770      	bx	lr
  408302:	f101 0104 	add.w	r1, r1, #4
  408306:	f850 2b04 	ldr.w	r2, [r0], #4
  40830a:	07cc      	lsls	r4, r1, #31
  40830c:	f021 0103 	bic.w	r1, r1, #3
  408310:	f851 3b04 	ldr.w	r3, [r1], #4
  408314:	d848      	bhi.n	4083a8 <strcmp+0x260>
  408316:	d224      	bcs.n	408362 <strcmp+0x21a>
  408318:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40831c:	fa82 f54c 	uadd8	r5, r2, ip
  408320:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  408324:	faa5 f58c 	sel	r5, r5, ip
  408328:	d10a      	bne.n	408340 <strcmp+0x1f8>
  40832a:	b965      	cbnz	r5, 408346 <strcmp+0x1fe>
  40832c:	f851 3b04 	ldr.w	r3, [r1], #4
  408330:	ea84 0402 	eor.w	r4, r4, r2
  408334:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  408338:	d10e      	bne.n	408358 <strcmp+0x210>
  40833a:	f850 2b04 	ldr.w	r2, [r0], #4
  40833e:	e7eb      	b.n	408318 <strcmp+0x1d0>
  408340:	ea4f 2313 	mov.w	r3, r3, lsr #8
  408344:	e055      	b.n	4083f2 <strcmp+0x2aa>
  408346:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40834a:	d14d      	bne.n	4083e8 <strcmp+0x2a0>
  40834c:	7808      	ldrb	r0, [r1, #0]
  40834e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  408352:	f1c0 0000 	rsb	r0, r0, #0
  408356:	4770      	bx	lr
  408358:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40835c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  408360:	e047      	b.n	4083f2 <strcmp+0x2aa>
  408362:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  408366:	fa82 f54c 	uadd8	r5, r2, ip
  40836a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40836e:	faa5 f58c 	sel	r5, r5, ip
  408372:	d10a      	bne.n	40838a <strcmp+0x242>
  408374:	b965      	cbnz	r5, 408390 <strcmp+0x248>
  408376:	f851 3b04 	ldr.w	r3, [r1], #4
  40837a:	ea84 0402 	eor.w	r4, r4, r2
  40837e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  408382:	d10c      	bne.n	40839e <strcmp+0x256>
  408384:	f850 2b04 	ldr.w	r2, [r0], #4
  408388:	e7eb      	b.n	408362 <strcmp+0x21a>
  40838a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40838e:	e030      	b.n	4083f2 <strcmp+0x2aa>
  408390:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  408394:	d128      	bne.n	4083e8 <strcmp+0x2a0>
  408396:	880b      	ldrh	r3, [r1, #0]
  408398:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40839c:	e029      	b.n	4083f2 <strcmp+0x2aa>
  40839e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4083a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  4083a6:	e024      	b.n	4083f2 <strcmp+0x2aa>
  4083a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  4083ac:	fa82 f54c 	uadd8	r5, r2, ip
  4083b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  4083b4:	faa5 f58c 	sel	r5, r5, ip
  4083b8:	d10a      	bne.n	4083d0 <strcmp+0x288>
  4083ba:	b965      	cbnz	r5, 4083d6 <strcmp+0x28e>
  4083bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4083c0:	ea84 0402 	eor.w	r4, r4, r2
  4083c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4083c8:	d109      	bne.n	4083de <strcmp+0x296>
  4083ca:	f850 2b04 	ldr.w	r2, [r0], #4
  4083ce:	e7eb      	b.n	4083a8 <strcmp+0x260>
  4083d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4083d4:	e00d      	b.n	4083f2 <strcmp+0x2aa>
  4083d6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4083da:	d105      	bne.n	4083e8 <strcmp+0x2a0>
  4083dc:	680b      	ldr	r3, [r1, #0]
  4083de:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4083e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4083e6:	e004      	b.n	4083f2 <strcmp+0x2aa>
  4083e8:	f04f 0000 	mov.w	r0, #0
  4083ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4083f0:	4770      	bx	lr
  4083f2:	ba12      	rev	r2, r2
  4083f4:	ba1b      	rev	r3, r3
  4083f6:	fa82 f44c 	uadd8	r4, r2, ip
  4083fa:	ea82 0403 	eor.w	r4, r2, r3
  4083fe:	faa4 f58c 	sel	r5, r4, ip
  408402:	fab5 f485 	clz	r4, r5
  408406:	fa02 f204 	lsl.w	r2, r2, r4
  40840a:	fa03 f304 	lsl.w	r3, r3, r4
  40840e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  408412:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  408416:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40841a:	4770      	bx	lr

0040841c <strlen>:
  40841c:	f020 0103 	bic.w	r1, r0, #3
  408420:	f010 0003 	ands.w	r0, r0, #3
  408424:	f1c0 0000 	rsb	r0, r0, #0
  408428:	f851 3b04 	ldr.w	r3, [r1], #4
  40842c:	f100 0c04 	add.w	ip, r0, #4
  408430:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  408434:	f06f 0200 	mvn.w	r2, #0
  408438:	bf1c      	itt	ne
  40843a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40843e:	4313      	orrne	r3, r2
  408440:	f04f 0c01 	mov.w	ip, #1
  408444:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  408448:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40844c:	eba3 020c 	sub.w	r2, r3, ip
  408450:	ea22 0203 	bic.w	r2, r2, r3
  408454:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  408458:	bf04      	itt	eq
  40845a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40845e:	3004      	addeq	r0, #4
  408460:	d0f4      	beq.n	40844c <strlen+0x30>
  408462:	f1c2 0100 	rsb	r1, r2, #0
  408466:	ea02 0201 	and.w	r2, r2, r1
  40846a:	fab2 f282 	clz	r2, r2
  40846e:	f1c2 021f 	rsb	r2, r2, #31
  408472:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  408476:	4770      	bx	lr

00408478 <strtok>:
  408478:	4a02      	ldr	r2, [pc, #8]	; (408484 <strtok+0xc>)
  40847a:	2301      	movs	r3, #1
  40847c:	6812      	ldr	r2, [r2, #0]
  40847e:	325c      	adds	r2, #92	; 0x5c
  408480:	f000 b802 	b.w	408488 <__strtok_r>
  408484:	20400448 	.word	0x20400448

00408488 <__strtok_r>:
  408488:	b4f0      	push	{r4, r5, r6, r7}
  40848a:	b320      	cbz	r0, 4084d6 <__strtok_r+0x4e>
  40848c:	4607      	mov	r7, r0
  40848e:	460d      	mov	r5, r1
  408490:	f817 6b01 	ldrb.w	r6, [r7], #1
  408494:	e001      	b.n	40849a <__strtok_r+0x12>
  408496:	42a6      	cmp	r6, r4
  408498:	d016      	beq.n	4084c8 <__strtok_r+0x40>
  40849a:	f815 4b01 	ldrb.w	r4, [r5], #1
  40849e:	2c00      	cmp	r4, #0
  4084a0:	d1f9      	bne.n	408496 <__strtok_r+0xe>
  4084a2:	b1ee      	cbz	r6, 4084e0 <__strtok_r+0x58>
  4084a4:	463e      	mov	r6, r7
  4084a6:	460c      	mov	r4, r1
  4084a8:	f816 5b01 	ldrb.w	r5, [r6], #1
  4084ac:	e000      	b.n	4084b0 <__strtok_r+0x28>
  4084ae:	b173      	cbz	r3, 4084ce <__strtok_r+0x46>
  4084b0:	f814 3b01 	ldrb.w	r3, [r4], #1
  4084b4:	42ab      	cmp	r3, r5
  4084b6:	d1fa      	bne.n	4084ae <__strtok_r+0x26>
  4084b8:	b15d      	cbz	r5, 4084d2 <__strtok_r+0x4a>
  4084ba:	2300      	movs	r3, #0
  4084bc:	703b      	strb	r3, [r7, #0]
  4084be:	6016      	str	r6, [r2, #0]
  4084c0:	4606      	mov	r6, r0
  4084c2:	4630      	mov	r0, r6
  4084c4:	bcf0      	pop	{r4, r5, r6, r7}
  4084c6:	4770      	bx	lr
  4084c8:	b163      	cbz	r3, 4084e4 <__strtok_r+0x5c>
  4084ca:	4638      	mov	r0, r7
  4084cc:	e7de      	b.n	40848c <__strtok_r+0x4>
  4084ce:	4637      	mov	r7, r6
  4084d0:	e7e8      	b.n	4084a4 <__strtok_r+0x1c>
  4084d2:	462e      	mov	r6, r5
  4084d4:	e7f3      	b.n	4084be <__strtok_r+0x36>
  4084d6:	6810      	ldr	r0, [r2, #0]
  4084d8:	2800      	cmp	r0, #0
  4084da:	d1d7      	bne.n	40848c <__strtok_r+0x4>
  4084dc:	4606      	mov	r6, r0
  4084de:	e7f0      	b.n	4084c2 <__strtok_r+0x3a>
  4084e0:	6016      	str	r6, [r2, #0]
  4084e2:	e7ee      	b.n	4084c2 <__strtok_r+0x3a>
  4084e4:	6017      	str	r7, [r2, #0]
  4084e6:	4606      	mov	r6, r0
  4084e8:	7003      	strb	r3, [r0, #0]
  4084ea:	e7ea      	b.n	4084c2 <__strtok_r+0x3a>

004084ec <_strtol_r>:
  4084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4084f0:	4c44      	ldr	r4, [pc, #272]	; (408604 <_strtol_r+0x118>)
  4084f2:	4683      	mov	fp, r0
  4084f4:	460e      	mov	r6, r1
  4084f6:	f8d4 e000 	ldr.w	lr, [r4]
  4084fa:	e000      	b.n	4084fe <_strtol_r+0x12>
  4084fc:	4626      	mov	r6, r4
  4084fe:	4634      	mov	r4, r6
  408500:	f814 5b01 	ldrb.w	r5, [r4], #1
  408504:	eb0e 0005 	add.w	r0, lr, r5
  408508:	7840      	ldrb	r0, [r0, #1]
  40850a:	f000 0008 	and.w	r0, r0, #8
  40850e:	f000 09ff 	and.w	r9, r0, #255	; 0xff
  408512:	2800      	cmp	r0, #0
  408514:	d1f2      	bne.n	4084fc <_strtol_r+0x10>
  408516:	2d2d      	cmp	r5, #45	; 0x2d
  408518:	d052      	beq.n	4085c0 <_strtol_r+0xd4>
  40851a:	2d2b      	cmp	r5, #43	; 0x2b
  40851c:	d064      	beq.n	4085e8 <_strtol_r+0xfc>
  40851e:	f033 0010 	bics.w	r0, r3, #16
  408522:	d10b      	bne.n	40853c <_strtol_r+0x50>
  408524:	fab3 f083 	clz	r0, r3
  408528:	2d30      	cmp	r5, #48	; 0x30
  40852a:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40852e:	d05e      	beq.n	4085ee <_strtol_r+0x102>
  408530:	b120      	cbz	r0, 40853c <_strtol_r+0x50>
  408532:	230a      	movs	r3, #10
  408534:	4618      	mov	r0, r3
  408536:	e002      	b.n	40853e <_strtol_r+0x52>
  408538:	b100      	cbz	r0, 40853c <_strtol_r+0x50>
  40853a:	2308      	movs	r3, #8
  40853c:	4618      	mov	r0, r3
  40853e:	f1b9 0f00 	cmp.w	r9, #0
  408542:	f04f 0700 	mov.w	r7, #0
  408546:	bf14      	ite	ne
  408548:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40854c:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  408550:	46bc      	mov	ip, r7
  408552:	fbba f8f0 	udiv	r8, sl, r0
  408556:	fb00 aa18 	mls	sl, r0, r8, sl
  40855a:	e00e      	b.n	40857a <_strtol_r+0x8e>
  40855c:	3d30      	subs	r5, #48	; 0x30
  40855e:	42ab      	cmp	r3, r5
  408560:	dd1b      	ble.n	40859a <_strtol_r+0xae>
  408562:	2f00      	cmp	r7, #0
  408564:	db05      	blt.n	408572 <_strtol_r+0x86>
  408566:	45c4      	cmp	ip, r8
  408568:	d803      	bhi.n	408572 <_strtol_r+0x86>
  40856a:	4555      	cmp	r5, sl
  40856c:	dd22      	ble.n	4085b4 <_strtol_r+0xc8>
  40856e:	45c4      	cmp	ip, r8
  408570:	d120      	bne.n	4085b4 <_strtol_r+0xc8>
  408572:	f04f 37ff 	mov.w	r7, #4294967295
  408576:	f814 5b01 	ldrb.w	r5, [r4], #1
  40857a:	eb0e 0605 	add.w	r6, lr, r5
  40857e:	7876      	ldrb	r6, [r6, #1]
  408580:	f016 0f04 	tst.w	r6, #4
  408584:	d1ea      	bne.n	40855c <_strtol_r+0x70>
  408586:	f016 0603 	ands.w	r6, r6, #3
  40858a:	d006      	beq.n	40859a <_strtol_r+0xae>
  40858c:	2e01      	cmp	r6, #1
  40858e:	bf0c      	ite	eq
  408590:	2637      	moveq	r6, #55	; 0x37
  408592:	2657      	movne	r6, #87	; 0x57
  408594:	1bad      	subs	r5, r5, r6
  408596:	42ab      	cmp	r3, r5
  408598:	dce3      	bgt.n	408562 <_strtol_r+0x76>
  40859a:	1c7b      	adds	r3, r7, #1
  40859c:	d015      	beq.n	4085ca <_strtol_r+0xde>
  40859e:	f1c9 0000 	rsb	r0, r9, #0
  4085a2:	ea8c 0000 	eor.w	r0, ip, r0
  4085a6:	4448      	add	r0, r9
  4085a8:	b142      	cbz	r2, 4085bc <_strtol_r+0xd0>
  4085aa:	b107      	cbz	r7, 4085ae <_strtol_r+0xc2>
  4085ac:	1e61      	subs	r1, r4, #1
  4085ae:	6011      	str	r1, [r2, #0]
  4085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085b4:	fb00 5c0c 	mla	ip, r0, ip, r5
  4085b8:	2701      	movs	r7, #1
  4085ba:	e7dc      	b.n	408576 <_strtol_r+0x8a>
  4085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085c0:	1cb4      	adds	r4, r6, #2
  4085c2:	7875      	ldrb	r5, [r6, #1]
  4085c4:	f04f 0901 	mov.w	r9, #1
  4085c8:	e7a9      	b.n	40851e <_strtol_r+0x32>
  4085ca:	f1b9 0f00 	cmp.w	r9, #0
  4085ce:	f04f 0322 	mov.w	r3, #34	; 0x22
  4085d2:	bf14      	ite	ne
  4085d4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4085d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4085dc:	f8cb 3000 	str.w	r3, [fp]
  4085e0:	2a00      	cmp	r2, #0
  4085e2:	d1e3      	bne.n	4085ac <_strtol_r+0xc0>
  4085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085e8:	1cb4      	adds	r4, r6, #2
  4085ea:	7875      	ldrb	r5, [r6, #1]
  4085ec:	e797      	b.n	40851e <_strtol_r+0x32>
  4085ee:	7826      	ldrb	r6, [r4, #0]
  4085f0:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  4085f4:	2e58      	cmp	r6, #88	; 0x58
  4085f6:	d19f      	bne.n	408538 <_strtol_r+0x4c>
  4085f8:	2310      	movs	r3, #16
  4085fa:	7865      	ldrb	r5, [r4, #1]
  4085fc:	3402      	adds	r4, #2
  4085fe:	4618      	mov	r0, r3
  408600:	e79d      	b.n	40853e <_strtol_r+0x52>
  408602:	bf00      	nop
  408604:	2040085c 	.word	0x2040085c

00408608 <strtol>:
  408608:	b430      	push	{r4, r5}
  40860a:	460d      	mov	r5, r1
  40860c:	4c03      	ldr	r4, [pc, #12]	; (40861c <strtol+0x14>)
  40860e:	4613      	mov	r3, r2
  408610:	4601      	mov	r1, r0
  408612:	462a      	mov	r2, r5
  408614:	6820      	ldr	r0, [r4, #0]
  408616:	bc30      	pop	{r4, r5}
  408618:	f7ff bf68 	b.w	4084ec <_strtol_r>
  40861c:	20400448 	.word	0x20400448

00408620 <_svfprintf_r>:
  408620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408624:	b0c1      	sub	sp, #260	; 0x104
  408626:	4689      	mov	r9, r1
  408628:	9208      	str	r2, [sp, #32]
  40862a:	930c      	str	r3, [sp, #48]	; 0x30
  40862c:	9009      	str	r0, [sp, #36]	; 0x24
  40862e:	f003 fe35 	bl	40c29c <_localeconv_r>
  408632:	6803      	ldr	r3, [r0, #0]
  408634:	4618      	mov	r0, r3
  408636:	9316      	str	r3, [sp, #88]	; 0x58
  408638:	f7ff fef0 	bl	40841c <strlen>
  40863c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  408640:	9017      	str	r0, [sp, #92]	; 0x5c
  408642:	061d      	lsls	r5, r3, #24
  408644:	d504      	bpl.n	408650 <_svfprintf_r+0x30>
  408646:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40864a:	2b00      	cmp	r3, #0
  40864c:	f001 8080 	beq.w	409750 <_svfprintf_r+0x1130>
  408650:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  408654:	2300      	movs	r3, #0
  408656:	46c3      	mov	fp, r8
  408658:	9313      	str	r3, [sp, #76]	; 0x4c
  40865a:	9314      	str	r3, [sp, #80]	; 0x50
  40865c:	9312      	str	r3, [sp, #72]	; 0x48
  40865e:	9315      	str	r3, [sp, #84]	; 0x54
  408660:	9319      	str	r3, [sp, #100]	; 0x64
  408662:	930a      	str	r3, [sp, #40]	; 0x28
  408664:	9325      	str	r3, [sp, #148]	; 0x94
  408666:	9324      	str	r3, [sp, #144]	; 0x90
  408668:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  40866c:	9a08      	ldr	r2, [sp, #32]
  40866e:	7813      	ldrb	r3, [r2, #0]
  408670:	2b25      	cmp	r3, #37	; 0x25
  408672:	f000 80a6 	beq.w	4087c2 <_svfprintf_r+0x1a2>
  408676:	b90b      	cbnz	r3, 40867c <_svfprintf_r+0x5c>
  408678:	e0a3      	b.n	4087c2 <_svfprintf_r+0x1a2>
  40867a:	b11b      	cbz	r3, 408684 <_svfprintf_r+0x64>
  40867c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  408680:	2b25      	cmp	r3, #37	; 0x25
  408682:	d1fa      	bne.n	40867a <_svfprintf_r+0x5a>
  408684:	9908      	ldr	r1, [sp, #32]
  408686:	4614      	mov	r4, r2
  408688:	1a55      	subs	r5, r2, r1
  40868a:	d010      	beq.n	4086ae <_svfprintf_r+0x8e>
  40868c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40868e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408690:	3301      	adds	r3, #1
  408692:	f8cb 1000 	str.w	r1, [fp]
  408696:	442a      	add	r2, r5
  408698:	f8cb 5004 	str.w	r5, [fp, #4]
  40869c:	2b07      	cmp	r3, #7
  40869e:	9324      	str	r3, [sp, #144]	; 0x90
  4086a0:	9225      	str	r2, [sp, #148]	; 0x94
  4086a2:	dc73      	bgt.n	40878c <_svfprintf_r+0x16c>
  4086a4:	f10b 0b08 	add.w	fp, fp, #8
  4086a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086aa:	442b      	add	r3, r5
  4086ac:	930a      	str	r3, [sp, #40]	; 0x28
  4086ae:	7823      	ldrb	r3, [r4, #0]
  4086b0:	2b00      	cmp	r3, #0
  4086b2:	d073      	beq.n	40879c <_svfprintf_r+0x17c>
  4086b4:	2300      	movs	r3, #0
  4086b6:	f04f 3cff 	mov.w	ip, #4294967295
  4086ba:	1c61      	adds	r1, r4, #1
  4086bc:	7866      	ldrb	r6, [r4, #1]
  4086be:	461a      	mov	r2, r3
  4086c0:	4664      	mov	r4, ip
  4086c2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4086c6:	930b      	str	r3, [sp, #44]	; 0x2c
  4086c8:	9306      	str	r3, [sp, #24]
  4086ca:	1c4b      	adds	r3, r1, #1
  4086cc:	f1a6 0120 	sub.w	r1, r6, #32
  4086d0:	2958      	cmp	r1, #88	; 0x58
  4086d2:	f200 83b2 	bhi.w	408e3a <_svfprintf_r+0x81a>
  4086d6:	e8df f011 	tbh	[pc, r1, lsl #1]
  4086da:	0319      	.short	0x0319
  4086dc:	03b003b0 	.word	0x03b003b0
  4086e0:	03b00320 	.word	0x03b00320
  4086e4:	03b003b0 	.word	0x03b003b0
  4086e8:	03b003b0 	.word	0x03b003b0
  4086ec:	024003b0 	.word	0x024003b0
  4086f0:	03b001fb 	.word	0x03b001fb
  4086f4:	01ff01e2 	.word	0x01ff01e2
  4086f8:	032703b0 	.word	0x032703b0
  4086fc:	032e032e 	.word	0x032e032e
  408700:	032e032e 	.word	0x032e032e
  408704:	032e032e 	.word	0x032e032e
  408708:	032e032e 	.word	0x032e032e
  40870c:	03b0032e 	.word	0x03b0032e
  408710:	03b003b0 	.word	0x03b003b0
  408714:	03b003b0 	.word	0x03b003b0
  408718:	03b003b0 	.word	0x03b003b0
  40871c:	03b003b0 	.word	0x03b003b0
  408720:	033d03b0 	.word	0x033d03b0
  408724:	03b00365 	.word	0x03b00365
  408728:	03b00365 	.word	0x03b00365
  40872c:	03b003b0 	.word	0x03b003b0
  408730:	02fe03b0 	.word	0x02fe03b0
  408734:	03b003b0 	.word	0x03b003b0
  408738:	03b00293 	.word	0x03b00293
  40873c:	03b003b0 	.word	0x03b003b0
  408740:	03b003b0 	.word	0x03b003b0
  408744:	03b002b0 	.word	0x03b002b0
  408748:	02c603b0 	.word	0x02c603b0
  40874c:	03b003b0 	.word	0x03b003b0
  408750:	03b003b0 	.word	0x03b003b0
  408754:	03b003b0 	.word	0x03b003b0
  408758:	03b003b0 	.word	0x03b003b0
  40875c:	03b003b0 	.word	0x03b003b0
  408760:	021802eb 	.word	0x021802eb
  408764:	03650365 	.word	0x03650365
  408768:	024e0365 	.word	0x024e0365
  40876c:	03b00218 	.word	0x03b00218
  408770:	023603b0 	.word	0x023603b0
  408774:	026003b0 	.word	0x026003b0
  408778:	039901e9 	.word	0x039901e9
  40877c:	03b00259 	.word	0x03b00259
  408780:	03b00272 	.word	0x03b00272
  408784:	03b00076 	.word	0x03b00076
  408788:	030503b0 	.word	0x030503b0
  40878c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40878e:	4649      	mov	r1, r9
  408790:	aa23      	add	r2, sp, #140	; 0x8c
  408792:	f004 fc35 	bl	40d000 <__ssprint_r>
  408796:	b940      	cbnz	r0, 4087aa <_svfprintf_r+0x18a>
  408798:	46c3      	mov	fp, r8
  40879a:	e785      	b.n	4086a8 <_svfprintf_r+0x88>
  40879c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40879e:	b123      	cbz	r3, 4087aa <_svfprintf_r+0x18a>
  4087a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4087a2:	4649      	mov	r1, r9
  4087a4:	aa23      	add	r2, sp, #140	; 0x8c
  4087a6:	f004 fc2b 	bl	40d000 <__ssprint_r>
  4087aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4087ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  4087b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087b4:	bf18      	it	ne
  4087b6:	f04f 33ff 	movne.w	r3, #4294967295
  4087ba:	4618      	mov	r0, r3
  4087bc:	b041      	add	sp, #260	; 0x104
  4087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087c2:	9c08      	ldr	r4, [sp, #32]
  4087c4:	e773      	b.n	4086ae <_svfprintf_r+0x8e>
  4087c6:	9308      	str	r3, [sp, #32]
  4087c8:	46a4      	mov	ip, r4
  4087ca:	9b06      	ldr	r3, [sp, #24]
  4087cc:	0698      	lsls	r0, r3, #26
  4087ce:	f140 823e 	bpl.w	408c4e <_svfprintf_r+0x62e>
  4087d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4087d4:	2301      	movs	r3, #1
  4087d6:	3707      	adds	r7, #7
  4087d8:	f027 0207 	bic.w	r2, r7, #7
  4087dc:	f102 0108 	add.w	r1, r2, #8
  4087e0:	e9d2 4500 	ldrd	r4, r5, [r2]
  4087e4:	910c      	str	r1, [sp, #48]	; 0x30
  4087e6:	2200      	movs	r2, #0
  4087e8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4087ec:	4617      	mov	r7, r2
  4087ee:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4087f2:	f1bc 0f00 	cmp.w	ip, #0
  4087f6:	db03      	blt.n	408800 <_svfprintf_r+0x1e0>
  4087f8:	9a06      	ldr	r2, [sp, #24]
  4087fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4087fe:	9206      	str	r2, [sp, #24]
  408800:	f1bc 0f00 	cmp.w	ip, #0
  408804:	f040 83ac 	bne.w	408f60 <_svfprintf_r+0x940>
  408808:	ea54 0205 	orrs.w	r2, r4, r5
  40880c:	bf14      	ite	ne
  40880e:	2201      	movne	r2, #1
  408810:	2200      	moveq	r2, #0
  408812:	2a00      	cmp	r2, #0
  408814:	f040 83a4 	bne.w	408f60 <_svfprintf_r+0x940>
  408818:	2b00      	cmp	r3, #0
  40881a:	f040 8460 	bne.w	4090de <_svfprintf_r+0xabe>
  40881e:	9a06      	ldr	r2, [sp, #24]
  408820:	07d2      	lsls	r2, r2, #31
  408822:	f140 84fd 	bpl.w	409220 <_svfprintf_r+0xc00>
  408826:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40882a:	2330      	movs	r3, #48	; 0x30
  40882c:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  408830:	ebca 0408 	rsb	r4, sl, r8
  408834:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  408838:	45a4      	cmp	ip, r4
  40883a:	4663      	mov	r3, ip
  40883c:	bfb8      	it	lt
  40883e:	4623      	movlt	r3, r4
  408840:	9307      	str	r3, [sp, #28]
  408842:	2300      	movs	r3, #0
  408844:	9311      	str	r3, [sp, #68]	; 0x44
  408846:	b117      	cbz	r7, 40884e <_svfprintf_r+0x22e>
  408848:	9b07      	ldr	r3, [sp, #28]
  40884a:	3301      	adds	r3, #1
  40884c:	9307      	str	r3, [sp, #28]
  40884e:	9b06      	ldr	r3, [sp, #24]
  408850:	f013 0302 	ands.w	r3, r3, #2
  408854:	930d      	str	r3, [sp, #52]	; 0x34
  408856:	d002      	beq.n	40885e <_svfprintf_r+0x23e>
  408858:	9b07      	ldr	r3, [sp, #28]
  40885a:	3302      	adds	r3, #2
  40885c:	9307      	str	r3, [sp, #28]
  40885e:	9b06      	ldr	r3, [sp, #24]
  408860:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408864:	930e      	str	r3, [sp, #56]	; 0x38
  408866:	f040 8307 	bne.w	408e78 <_svfprintf_r+0x858>
  40886a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40886c:	9a07      	ldr	r2, [sp, #28]
  40886e:	ebc2 0a03 	rsb	sl, r2, r3
  408872:	f1ba 0f00 	cmp.w	sl, #0
  408876:	f340 82ff 	ble.w	408e78 <_svfprintf_r+0x858>
  40887a:	f1ba 0f10 	cmp.w	sl, #16
  40887e:	9925      	ldr	r1, [sp, #148]	; 0x94
  408880:	f340 87dd 	ble.w	40983e <_svfprintf_r+0x121e>
  408884:	4fbf      	ldr	r7, [pc, #764]	; (408b84 <_svfprintf_r+0x564>)
  408886:	2510      	movs	r5, #16
  408888:	9618      	str	r6, [sp, #96]	; 0x60
  40888a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40888c:	463e      	mov	r6, r7
  40888e:	4627      	mov	r7, r4
  408890:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408892:	e004      	b.n	40889e <_svfprintf_r+0x27e>
  408894:	f1aa 0a10 	sub.w	sl, sl, #16
  408898:	f1ba 0f10 	cmp.w	sl, #16
  40889c:	dd1b      	ble.n	4088d6 <_svfprintf_r+0x2b6>
  40889e:	3201      	adds	r2, #1
  4088a0:	3110      	adds	r1, #16
  4088a2:	f8cb 6000 	str.w	r6, [fp]
  4088a6:	f10b 0b08 	add.w	fp, fp, #8
  4088aa:	2a07      	cmp	r2, #7
  4088ac:	f84b 5c04 	str.w	r5, [fp, #-4]
  4088b0:	9125      	str	r1, [sp, #148]	; 0x94
  4088b2:	9224      	str	r2, [sp, #144]	; 0x90
  4088b4:	ddee      	ble.n	408894 <_svfprintf_r+0x274>
  4088b6:	4620      	mov	r0, r4
  4088b8:	4649      	mov	r1, r9
  4088ba:	aa23      	add	r2, sp, #140	; 0x8c
  4088bc:	46c3      	mov	fp, r8
  4088be:	f004 fb9f 	bl	40d000 <__ssprint_r>
  4088c2:	2800      	cmp	r0, #0
  4088c4:	f47f af71 	bne.w	4087aa <_svfprintf_r+0x18a>
  4088c8:	f1aa 0a10 	sub.w	sl, sl, #16
  4088cc:	9925      	ldr	r1, [sp, #148]	; 0x94
  4088ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4088d0:	f1ba 0f10 	cmp.w	sl, #16
  4088d4:	dce3      	bgt.n	40889e <_svfprintf_r+0x27e>
  4088d6:	463c      	mov	r4, r7
  4088d8:	4637      	mov	r7, r6
  4088da:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4088dc:	3201      	adds	r2, #1
  4088de:	eb0a 0c01 	add.w	ip, sl, r1
  4088e2:	f8cb 7000 	str.w	r7, [fp]
  4088e6:	2a07      	cmp	r2, #7
  4088e8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4088ec:	9224      	str	r2, [sp, #144]	; 0x90
  4088ee:	f8cb a004 	str.w	sl, [fp, #4]
  4088f2:	f300 82b6 	bgt.w	408e62 <_svfprintf_r+0x842>
  4088f6:	f10b 0b08 	add.w	fp, fp, #8
  4088fa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4088fe:	b197      	cbz	r7, 408926 <_svfprintf_r+0x306>
  408900:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408902:	2201      	movs	r2, #1
  408904:	f10c 0c01 	add.w	ip, ip, #1
  408908:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40890c:	4413      	add	r3, r2
  40890e:	f8cb 2004 	str.w	r2, [fp, #4]
  408912:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408916:	2b07      	cmp	r3, #7
  408918:	f8cb 1000 	str.w	r1, [fp]
  40891c:	9324      	str	r3, [sp, #144]	; 0x90
  40891e:	f300 83fb 	bgt.w	409118 <_svfprintf_r+0xaf8>
  408922:	f10b 0b08 	add.w	fp, fp, #8
  408926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408928:	b18b      	cbz	r3, 40894e <_svfprintf_r+0x32e>
  40892a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40892c:	f10c 0c02 	add.w	ip, ip, #2
  408930:	a91c      	add	r1, sp, #112	; 0x70
  408932:	2202      	movs	r2, #2
  408934:	3301      	adds	r3, #1
  408936:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40893a:	f8cb 1000 	str.w	r1, [fp]
  40893e:	2b07      	cmp	r3, #7
  408940:	9324      	str	r3, [sp, #144]	; 0x90
  408942:	f8cb 2004 	str.w	r2, [fp, #4]
  408946:	f300 83db 	bgt.w	409100 <_svfprintf_r+0xae0>
  40894a:	f10b 0b08 	add.w	fp, fp, #8
  40894e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408950:	2b80      	cmp	r3, #128	; 0x80
  408952:	f000 8321 	beq.w	408f98 <_svfprintf_r+0x978>
  408956:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408958:	1b1f      	subs	r7, r3, r4
  40895a:	2f00      	cmp	r7, #0
  40895c:	dd37      	ble.n	4089ce <_svfprintf_r+0x3ae>
  40895e:	2f10      	cmp	r7, #16
  408960:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408962:	f340 85ec 	ble.w	40953e <_svfprintf_r+0xf1e>
  408966:	940d      	str	r4, [sp, #52]	; 0x34
  408968:	f04f 0a10 	mov.w	sl, #16
  40896c:	4d86      	ldr	r5, [pc, #536]	; (408b88 <_svfprintf_r+0x568>)
  40896e:	4662      	mov	r2, ip
  408970:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408972:	e002      	b.n	40897a <_svfprintf_r+0x35a>
  408974:	3f10      	subs	r7, #16
  408976:	2f10      	cmp	r7, #16
  408978:	dd19      	ble.n	4089ae <_svfprintf_r+0x38e>
  40897a:	3301      	adds	r3, #1
  40897c:	3210      	adds	r2, #16
  40897e:	f8cb 5000 	str.w	r5, [fp]
  408982:	f10b 0b08 	add.w	fp, fp, #8
  408986:	2b07      	cmp	r3, #7
  408988:	f84b ac04 	str.w	sl, [fp, #-4]
  40898c:	9225      	str	r2, [sp, #148]	; 0x94
  40898e:	9324      	str	r3, [sp, #144]	; 0x90
  408990:	ddf0      	ble.n	408974 <_svfprintf_r+0x354>
  408992:	4620      	mov	r0, r4
  408994:	4649      	mov	r1, r9
  408996:	aa23      	add	r2, sp, #140	; 0x8c
  408998:	46c3      	mov	fp, r8
  40899a:	f004 fb31 	bl	40d000 <__ssprint_r>
  40899e:	2800      	cmp	r0, #0
  4089a0:	f47f af03 	bne.w	4087aa <_svfprintf_r+0x18a>
  4089a4:	3f10      	subs	r7, #16
  4089a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4089a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089aa:	2f10      	cmp	r7, #16
  4089ac:	dce5      	bgt.n	40897a <_svfprintf_r+0x35a>
  4089ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4089b0:	4694      	mov	ip, r2
  4089b2:	3301      	adds	r3, #1
  4089b4:	44bc      	add	ip, r7
  4089b6:	f8cb 5000 	str.w	r5, [fp]
  4089ba:	2b07      	cmp	r3, #7
  4089bc:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4089c0:	9324      	str	r3, [sp, #144]	; 0x90
  4089c2:	f8cb 7004 	str.w	r7, [fp, #4]
  4089c6:	f300 838f 	bgt.w	4090e8 <_svfprintf_r+0xac8>
  4089ca:	f10b 0b08 	add.w	fp, fp, #8
  4089ce:	9b06      	ldr	r3, [sp, #24]
  4089d0:	05df      	lsls	r7, r3, #23
  4089d2:	f100 8254 	bmi.w	408e7e <_svfprintf_r+0x85e>
  4089d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4089d8:	44a4      	add	ip, r4
  4089da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4089dc:	3301      	adds	r3, #1
  4089de:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4089e2:	f8cb 2000 	str.w	r2, [fp]
  4089e6:	2b07      	cmp	r3, #7
  4089e8:	f8cb 4004 	str.w	r4, [fp, #4]
  4089ec:	9324      	str	r3, [sp, #144]	; 0x90
  4089ee:	f300 8360 	bgt.w	4090b2 <_svfprintf_r+0xa92>
  4089f2:	f10b 0b08 	add.w	fp, fp, #8
  4089f6:	9b06      	ldr	r3, [sp, #24]
  4089f8:	075a      	lsls	r2, r3, #29
  4089fa:	d540      	bpl.n	408a7e <_svfprintf_r+0x45e>
  4089fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4089fe:	9a07      	ldr	r2, [sp, #28]
  408a00:	1a9c      	subs	r4, r3, r2
  408a02:	2c00      	cmp	r4, #0
  408a04:	dd3b      	ble.n	408a7e <_svfprintf_r+0x45e>
  408a06:	2c10      	cmp	r4, #16
  408a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a0a:	f340 876b 	ble.w	4098e4 <_svfprintf_r+0x12c4>
  408a0e:	2510      	movs	r5, #16
  408a10:	4f5c      	ldr	r7, [pc, #368]	; (408b84 <_svfprintf_r+0x564>)
  408a12:	4662      	mov	r2, ip
  408a14:	9e09      	ldr	r6, [sp, #36]	; 0x24
  408a16:	e002      	b.n	408a1e <_svfprintf_r+0x3fe>
  408a18:	3c10      	subs	r4, #16
  408a1a:	2c10      	cmp	r4, #16
  408a1c:	dd19      	ble.n	408a52 <_svfprintf_r+0x432>
  408a1e:	3301      	adds	r3, #1
  408a20:	3210      	adds	r2, #16
  408a22:	f8cb 7000 	str.w	r7, [fp]
  408a26:	f10b 0b08 	add.w	fp, fp, #8
  408a2a:	2b07      	cmp	r3, #7
  408a2c:	f84b 5c04 	str.w	r5, [fp, #-4]
  408a30:	9225      	str	r2, [sp, #148]	; 0x94
  408a32:	9324      	str	r3, [sp, #144]	; 0x90
  408a34:	ddf0      	ble.n	408a18 <_svfprintf_r+0x3f8>
  408a36:	4630      	mov	r0, r6
  408a38:	4649      	mov	r1, r9
  408a3a:	aa23      	add	r2, sp, #140	; 0x8c
  408a3c:	46c3      	mov	fp, r8
  408a3e:	f004 fadf 	bl	40d000 <__ssprint_r>
  408a42:	2800      	cmp	r0, #0
  408a44:	f47f aeb1 	bne.w	4087aa <_svfprintf_r+0x18a>
  408a48:	3c10      	subs	r4, #16
  408a4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408a4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a4e:	2c10      	cmp	r4, #16
  408a50:	dce5      	bgt.n	408a1e <_svfprintf_r+0x3fe>
  408a52:	4694      	mov	ip, r2
  408a54:	3301      	adds	r3, #1
  408a56:	44a4      	add	ip, r4
  408a58:	f8cb 7000 	str.w	r7, [fp]
  408a5c:	2b07      	cmp	r3, #7
  408a5e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408a62:	9324      	str	r3, [sp, #144]	; 0x90
  408a64:	f8cb 4004 	str.w	r4, [fp, #4]
  408a68:	dd09      	ble.n	408a7e <_svfprintf_r+0x45e>
  408a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
  408a6c:	4649      	mov	r1, r9
  408a6e:	aa23      	add	r2, sp, #140	; 0x8c
  408a70:	f004 fac6 	bl	40d000 <__ssprint_r>
  408a74:	2800      	cmp	r0, #0
  408a76:	f47f ae98 	bne.w	4087aa <_svfprintf_r+0x18a>
  408a7a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408a80:	9a07      	ldr	r2, [sp, #28]
  408a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a84:	428a      	cmp	r2, r1
  408a86:	bfac      	ite	ge
  408a88:	189b      	addge	r3, r3, r2
  408a8a:	185b      	addlt	r3, r3, r1
  408a8c:	930a      	str	r3, [sp, #40]	; 0x28
  408a8e:	f1bc 0f00 	cmp.w	ip, #0
  408a92:	f040 831a 	bne.w	4090ca <_svfprintf_r+0xaaa>
  408a96:	2300      	movs	r3, #0
  408a98:	46c3      	mov	fp, r8
  408a9a:	9324      	str	r3, [sp, #144]	; 0x90
  408a9c:	e5e6      	b.n	40866c <_svfprintf_r+0x4c>
  408a9e:	4619      	mov	r1, r3
  408aa0:	9806      	ldr	r0, [sp, #24]
  408aa2:	781e      	ldrb	r6, [r3, #0]
  408aa4:	f040 0004 	orr.w	r0, r0, #4
  408aa8:	9006      	str	r0, [sp, #24]
  408aaa:	e60e      	b.n	4086ca <_svfprintf_r+0xaa>
  408aac:	9308      	str	r3, [sp, #32]
  408aae:	46a4      	mov	ip, r4
  408ab0:	9b06      	ldr	r3, [sp, #24]
  408ab2:	f013 0320 	ands.w	r3, r3, #32
  408ab6:	f000 80ae 	beq.w	408c16 <_svfprintf_r+0x5f6>
  408aba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408abc:	2300      	movs	r3, #0
  408abe:	3707      	adds	r7, #7
  408ac0:	f027 0207 	bic.w	r2, r7, #7
  408ac4:	f102 0108 	add.w	r1, r2, #8
  408ac8:	e9d2 4500 	ldrd	r4, r5, [r2]
  408acc:	910c      	str	r1, [sp, #48]	; 0x30
  408ace:	e68a      	b.n	4087e6 <_svfprintf_r+0x1c6>
  408ad0:	781e      	ldrb	r6, [r3, #0]
  408ad2:	4619      	mov	r1, r3
  408ad4:	222b      	movs	r2, #43	; 0x2b
  408ad6:	e5f8      	b.n	4086ca <_svfprintf_r+0xaa>
  408ad8:	781e      	ldrb	r6, [r3, #0]
  408ada:	1c59      	adds	r1, r3, #1
  408adc:	2e2a      	cmp	r6, #42	; 0x2a
  408ade:	f001 8006 	beq.w	409aee <_svfprintf_r+0x14ce>
  408ae2:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  408ae6:	460b      	mov	r3, r1
  408ae8:	2400      	movs	r4, #0
  408aea:	2809      	cmp	r0, #9
  408aec:	f63f adee 	bhi.w	4086cc <_svfprintf_r+0xac>
  408af0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408af4:	f813 6b01 	ldrb.w	r6, [r3], #1
  408af8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  408afc:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  408b00:	2809      	cmp	r0, #9
  408b02:	d9f5      	bls.n	408af0 <_svfprintf_r+0x4d0>
  408b04:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408b08:	e5e0      	b.n	4086cc <_svfprintf_r+0xac>
  408b0a:	9308      	str	r3, [sp, #32]
  408b0c:	46a4      	mov	ip, r4
  408b0e:	9b06      	ldr	r3, [sp, #24]
  408b10:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408b14:	069c      	lsls	r4, r3, #26
  408b16:	f140 8129 	bpl.w	408d6c <_svfprintf_r+0x74c>
  408b1a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408b1c:	3707      	adds	r7, #7
  408b1e:	f027 0707 	bic.w	r7, r7, #7
  408b22:	e9d7 2300 	ldrd	r2, r3, [r7]
  408b26:	f107 0108 	add.w	r1, r7, #8
  408b2a:	4614      	mov	r4, r2
  408b2c:	461d      	mov	r5, r3
  408b2e:	910c      	str	r1, [sp, #48]	; 0x30
  408b30:	2a00      	cmp	r2, #0
  408b32:	f173 0300 	sbcs.w	r3, r3, #0
  408b36:	f2c0 812a 	blt.w	408d8e <_svfprintf_r+0x76e>
  408b3a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408b3e:	2301      	movs	r3, #1
  408b40:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408b44:	e655      	b.n	4087f2 <_svfprintf_r+0x1d2>
  408b46:	781e      	ldrb	r6, [r3, #0]
  408b48:	9906      	ldr	r1, [sp, #24]
  408b4a:	2e6c      	cmp	r6, #108	; 0x6c
  408b4c:	f000 8557 	beq.w	4095fe <_svfprintf_r+0xfde>
  408b50:	f041 0110 	orr.w	r1, r1, #16
  408b54:	9106      	str	r1, [sp, #24]
  408b56:	4619      	mov	r1, r3
  408b58:	e5b7      	b.n	4086ca <_svfprintf_r+0xaa>
  408b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  408b5c:	6829      	ldr	r1, [r5, #0]
  408b5e:	4608      	mov	r0, r1
  408b60:	910b      	str	r1, [sp, #44]	; 0x2c
  408b62:	4629      	mov	r1, r5
  408b64:	2800      	cmp	r0, #0
  408b66:	f101 0104 	add.w	r1, r1, #4
  408b6a:	f2c0 854f 	blt.w	40960c <_svfprintf_r+0xfec>
  408b6e:	910c      	str	r1, [sp, #48]	; 0x30
  408b70:	4619      	mov	r1, r3
  408b72:	781e      	ldrb	r6, [r3, #0]
  408b74:	e5a9      	b.n	4086ca <_svfprintf_r+0xaa>
  408b76:	9906      	ldr	r1, [sp, #24]
  408b78:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  408b7c:	9106      	str	r1, [sp, #24]
  408b7e:	4619      	mov	r1, r3
  408b80:	781e      	ldrb	r6, [r3, #0]
  408b82:	e5a2      	b.n	4086ca <_svfprintf_r+0xaa>
  408b84:	0040e4a8 	.word	0x0040e4a8
  408b88:	0040e498 	.word	0x0040e498
  408b8c:	9906      	ldr	r1, [sp, #24]
  408b8e:	f041 0120 	orr.w	r1, r1, #32
  408b92:	9106      	str	r1, [sp, #24]
  408b94:	4619      	mov	r1, r3
  408b96:	781e      	ldrb	r6, [r3, #0]
  408b98:	e597      	b.n	4086ca <_svfprintf_r+0xaa>
  408b9a:	9308      	str	r3, [sp, #32]
  408b9c:	9b06      	ldr	r3, [sp, #24]
  408b9e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408ba2:	069e      	lsls	r6, r3, #26
  408ba4:	f140 84a4 	bpl.w	4094f0 <_svfprintf_r+0xed0>
  408ba8:	990a      	ldr	r1, [sp, #40]	; 0x28
  408baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408bac:	17cd      	asrs	r5, r1, #31
  408bae:	4608      	mov	r0, r1
  408bb0:	6813      	ldr	r3, [r2, #0]
  408bb2:	3204      	adds	r2, #4
  408bb4:	4629      	mov	r1, r5
  408bb6:	920c      	str	r2, [sp, #48]	; 0x30
  408bb8:	e9c3 0100 	strd	r0, r1, [r3]
  408bbc:	e556      	b.n	40866c <_svfprintf_r+0x4c>
  408bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408bc0:	2500      	movs	r5, #0
  408bc2:	9308      	str	r3, [sp, #32]
  408bc4:	6813      	ldr	r3, [r2, #0]
  408bc6:	1d17      	adds	r7, r2, #4
  408bc8:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  408bcc:	930f      	str	r3, [sp, #60]	; 0x3c
  408bce:	2b00      	cmp	r3, #0
  408bd0:	f000 867a 	beq.w	4098c8 <_svfprintf_r+0x12a8>
  408bd4:	2c00      	cmp	r4, #0
  408bd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
  408bd8:	f2c0 8624 	blt.w	409824 <_svfprintf_r+0x1204>
  408bdc:	4629      	mov	r1, r5
  408bde:	4622      	mov	r2, r4
  408be0:	f003 fbd2 	bl	40c388 <memchr>
  408be4:	2800      	cmp	r0, #0
  408be6:	f000 86df 	beq.w	4099a8 <_svfprintf_r+0x1388>
  408bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408bec:	970c      	str	r7, [sp, #48]	; 0x30
  408bee:	1ac4      	subs	r4, r0, r3
  408bf0:	9510      	str	r5, [sp, #64]	; 0x40
  408bf2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408bf6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  408bfa:	9511      	str	r5, [sp, #68]	; 0x44
  408bfc:	9307      	str	r3, [sp, #28]
  408bfe:	e622      	b.n	408846 <_svfprintf_r+0x226>
  408c00:	9308      	str	r3, [sp, #32]
  408c02:	46a4      	mov	ip, r4
  408c04:	9b06      	ldr	r3, [sp, #24]
  408c06:	f043 0310 	orr.w	r3, r3, #16
  408c0a:	9306      	str	r3, [sp, #24]
  408c0c:	9b06      	ldr	r3, [sp, #24]
  408c0e:	f013 0320 	ands.w	r3, r3, #32
  408c12:	f47f af52 	bne.w	408aba <_svfprintf_r+0x49a>
  408c16:	9a06      	ldr	r2, [sp, #24]
  408c18:	f012 0210 	ands.w	r2, r2, #16
  408c1c:	f040 8352 	bne.w	4092c4 <_svfprintf_r+0xca4>
  408c20:	9b06      	ldr	r3, [sp, #24]
  408c22:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  408c26:	f000 834d 	beq.w	4092c4 <_svfprintf_r+0xca4>
  408c2a:	990c      	ldr	r1, [sp, #48]	; 0x30
  408c2c:	4613      	mov	r3, r2
  408c2e:	2500      	movs	r5, #0
  408c30:	460a      	mov	r2, r1
  408c32:	880c      	ldrh	r4, [r1, #0]
  408c34:	3204      	adds	r2, #4
  408c36:	920c      	str	r2, [sp, #48]	; 0x30
  408c38:	e5d5      	b.n	4087e6 <_svfprintf_r+0x1c6>
  408c3a:	9308      	str	r3, [sp, #32]
  408c3c:	46a4      	mov	ip, r4
  408c3e:	9b06      	ldr	r3, [sp, #24]
  408c40:	f043 0310 	orr.w	r3, r3, #16
  408c44:	9306      	str	r3, [sp, #24]
  408c46:	9b06      	ldr	r3, [sp, #24]
  408c48:	0698      	lsls	r0, r3, #26
  408c4a:	f53f adc2 	bmi.w	4087d2 <_svfprintf_r+0x1b2>
  408c4e:	9b06      	ldr	r3, [sp, #24]
  408c50:	06d9      	lsls	r1, r3, #27
  408c52:	f140 8432 	bpl.w	4094ba <_svfprintf_r+0xe9a>
  408c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408c58:	4613      	mov	r3, r2
  408c5a:	3204      	adds	r2, #4
  408c5c:	681c      	ldr	r4, [r3, #0]
  408c5e:	2500      	movs	r5, #0
  408c60:	2301      	movs	r3, #1
  408c62:	920c      	str	r2, [sp, #48]	; 0x30
  408c64:	e5bf      	b.n	4087e6 <_svfprintf_r+0x1c6>
  408c66:	9308      	str	r3, [sp, #32]
  408c68:	46a4      	mov	ip, r4
  408c6a:	4bb7      	ldr	r3, [pc, #732]	; (408f48 <_svfprintf_r+0x928>)
  408c6c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408c70:	9315      	str	r3, [sp, #84]	; 0x54
  408c72:	9b06      	ldr	r3, [sp, #24]
  408c74:	069a      	lsls	r2, r3, #26
  408c76:	d53e      	bpl.n	408cf6 <_svfprintf_r+0x6d6>
  408c78:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408c7a:	3707      	adds	r7, #7
  408c7c:	f027 0307 	bic.w	r3, r7, #7
  408c80:	f103 0208 	add.w	r2, r3, #8
  408c84:	e9d3 4500 	ldrd	r4, r5, [r3]
  408c88:	920c      	str	r2, [sp, #48]	; 0x30
  408c8a:	9b06      	ldr	r3, [sp, #24]
  408c8c:	07df      	lsls	r7, r3, #31
  408c8e:	f140 8268 	bpl.w	409162 <_svfprintf_r+0xb42>
  408c92:	ea54 0305 	orrs.w	r3, r4, r5
  408c96:	f000 8264 	beq.w	409162 <_svfprintf_r+0xb42>
  408c9a:	9b06      	ldr	r3, [sp, #24]
  408c9c:	2230      	movs	r2, #48	; 0x30
  408c9e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  408ca2:	f043 0302 	orr.w	r3, r3, #2
  408ca6:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  408caa:	9306      	str	r3, [sp, #24]
  408cac:	2302      	movs	r3, #2
  408cae:	e59a      	b.n	4087e6 <_svfprintf_r+0x1c6>
  408cb0:	990c      	ldr	r1, [sp, #48]	; 0x30
  408cb2:	2001      	movs	r0, #1
  408cb4:	9308      	str	r3, [sp, #32]
  408cb6:	2300      	movs	r3, #0
  408cb8:	680a      	ldr	r2, [r1, #0]
  408cba:	3104      	adds	r1, #4
  408cbc:	461f      	mov	r7, r3
  408cbe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408cc2:	9310      	str	r3, [sp, #64]	; 0x40
  408cc4:	4604      	mov	r4, r0
  408cc6:	9311      	str	r3, [sp, #68]	; 0x44
  408cc8:	ab26      	add	r3, sp, #152	; 0x98
  408cca:	9007      	str	r0, [sp, #28]
  408ccc:	910c      	str	r1, [sp, #48]	; 0x30
  408cce:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  408cd2:	930f      	str	r3, [sp, #60]	; 0x3c
  408cd4:	e5bb      	b.n	40884e <_svfprintf_r+0x22e>
  408cd6:	9906      	ldr	r1, [sp, #24]
  408cd8:	f041 0108 	orr.w	r1, r1, #8
  408cdc:	9106      	str	r1, [sp, #24]
  408cde:	4619      	mov	r1, r3
  408ce0:	781e      	ldrb	r6, [r3, #0]
  408ce2:	e4f2      	b.n	4086ca <_svfprintf_r+0xaa>
  408ce4:	9308      	str	r3, [sp, #32]
  408ce6:	46a4      	mov	ip, r4
  408ce8:	4b98      	ldr	r3, [pc, #608]	; (408f4c <_svfprintf_r+0x92c>)
  408cea:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408cee:	9315      	str	r3, [sp, #84]	; 0x54
  408cf0:	9b06      	ldr	r3, [sp, #24]
  408cf2:	069a      	lsls	r2, r3, #26
  408cf4:	d4c0      	bmi.n	408c78 <_svfprintf_r+0x658>
  408cf6:	9b06      	ldr	r3, [sp, #24]
  408cf8:	06db      	lsls	r3, r3, #27
  408cfa:	f140 83ec 	bpl.w	4094d6 <_svfprintf_r+0xeb6>
  408cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408d00:	2500      	movs	r5, #0
  408d02:	4613      	mov	r3, r2
  408d04:	6814      	ldr	r4, [r2, #0]
  408d06:	3304      	adds	r3, #4
  408d08:	930c      	str	r3, [sp, #48]	; 0x30
  408d0a:	e7be      	b.n	408c8a <_svfprintf_r+0x66a>
  408d0c:	781e      	ldrb	r6, [r3, #0]
  408d0e:	4619      	mov	r1, r3
  408d10:	2a00      	cmp	r2, #0
  408d12:	f47f acda 	bne.w	4086ca <_svfprintf_r+0xaa>
  408d16:	2220      	movs	r2, #32
  408d18:	e4d7      	b.n	4086ca <_svfprintf_r+0xaa>
  408d1a:	9906      	ldr	r1, [sp, #24]
  408d1c:	f041 0101 	orr.w	r1, r1, #1
  408d20:	9106      	str	r1, [sp, #24]
  408d22:	4619      	mov	r1, r3
  408d24:	781e      	ldrb	r6, [r3, #0]
  408d26:	e4d0      	b.n	4086ca <_svfprintf_r+0xaa>
  408d28:	9906      	ldr	r1, [sp, #24]
  408d2a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  408d2e:	9106      	str	r1, [sp, #24]
  408d30:	4619      	mov	r1, r3
  408d32:	781e      	ldrb	r6, [r3, #0]
  408d34:	e4c9      	b.n	4086ca <_svfprintf_r+0xaa>
  408d36:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  408d3a:	2100      	movs	r1, #0
  408d3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  408d40:	f813 6b01 	ldrb.w	r6, [r3], #1
  408d44:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  408d48:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  408d4c:	2809      	cmp	r0, #9
  408d4e:	d9f5      	bls.n	408d3c <_svfprintf_r+0x71c>
  408d50:	910b      	str	r1, [sp, #44]	; 0x2c
  408d52:	e4bb      	b.n	4086cc <_svfprintf_r+0xac>
  408d54:	9308      	str	r3, [sp, #32]
  408d56:	46a4      	mov	ip, r4
  408d58:	9b06      	ldr	r3, [sp, #24]
  408d5a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408d5e:	f043 0310 	orr.w	r3, r3, #16
  408d62:	9306      	str	r3, [sp, #24]
  408d64:	9b06      	ldr	r3, [sp, #24]
  408d66:	069c      	lsls	r4, r3, #26
  408d68:	f53f aed7 	bmi.w	408b1a <_svfprintf_r+0x4fa>
  408d6c:	9b06      	ldr	r3, [sp, #24]
  408d6e:	06d8      	lsls	r0, r3, #27
  408d70:	f140 83d5 	bpl.w	40951e <_svfprintf_r+0xefe>
  408d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408d76:	4613      	mov	r3, r2
  408d78:	681c      	ldr	r4, [r3, #0]
  408d7a:	3304      	adds	r3, #4
  408d7c:	17e5      	asrs	r5, r4, #31
  408d7e:	4622      	mov	r2, r4
  408d80:	930c      	str	r3, [sp, #48]	; 0x30
  408d82:	2a00      	cmp	r2, #0
  408d84:	462b      	mov	r3, r5
  408d86:	f173 0300 	sbcs.w	r3, r3, #0
  408d8a:	f6bf aed6 	bge.w	408b3a <_svfprintf_r+0x51a>
  408d8e:	272d      	movs	r7, #45	; 0x2d
  408d90:	4264      	negs	r4, r4
  408d92:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408d96:	f04f 0301 	mov.w	r3, #1
  408d9a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408d9e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  408da2:	e526      	b.n	4087f2 <_svfprintf_r+0x1d2>
  408da4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408da6:	9308      	str	r3, [sp, #32]
  408da8:	3707      	adds	r7, #7
  408daa:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408dae:	f027 0307 	bic.w	r3, r7, #7
  408db2:	f103 0208 	add.w	r2, r3, #8
  408db6:	920c      	str	r2, [sp, #48]	; 0x30
  408db8:	681a      	ldr	r2, [r3, #0]
  408dba:	9213      	str	r2, [sp, #76]	; 0x4c
  408dbc:	685b      	ldr	r3, [r3, #4]
  408dbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408dc0:	9314      	str	r3, [sp, #80]	; 0x50
  408dc2:	9914      	ldr	r1, [sp, #80]	; 0x50
  408dc4:	9407      	str	r4, [sp, #28]
  408dc6:	f7fe f8a3 	bl	406f10 <__fpclassifyd>
  408dca:	2801      	cmp	r0, #1
  408dcc:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408dd0:	f040 8355 	bne.w	40947e <_svfprintf_r+0xe5e>
  408dd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408dd6:	2200      	movs	r2, #0
  408dd8:	2300      	movs	r3, #0
  408dda:	9914      	ldr	r1, [sp, #80]	; 0x50
  408ddc:	f7fe fd78 	bl	4078d0 <__aeabi_dcmplt>
  408de0:	2800      	cmp	r0, #0
  408de2:	f040 8582 	bne.w	4098ea <_svfprintf_r+0x12ca>
  408de6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408dea:	2303      	movs	r3, #3
  408dec:	9806      	ldr	r0, [sp, #24]
  408dee:	4a58      	ldr	r2, [pc, #352]	; (408f50 <_svfprintf_r+0x930>)
  408df0:	2100      	movs	r1, #0
  408df2:	461c      	mov	r4, r3
  408df4:	9307      	str	r3, [sp, #28]
  408df6:	4b57      	ldr	r3, [pc, #348]	; (408f54 <_svfprintf_r+0x934>)
  408df8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  408dfc:	9110      	str	r1, [sp, #64]	; 0x40
  408dfe:	2e47      	cmp	r6, #71	; 0x47
  408e00:	bfd8      	it	le
  408e02:	461a      	movle	r2, r3
  408e04:	9006      	str	r0, [sp, #24]
  408e06:	9111      	str	r1, [sp, #68]	; 0x44
  408e08:	920f      	str	r2, [sp, #60]	; 0x3c
  408e0a:	e51c      	b.n	408846 <_svfprintf_r+0x226>
  408e0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  408e0e:	2230      	movs	r2, #48	; 0x30
  408e10:	9806      	ldr	r0, [sp, #24]
  408e12:	46a4      	mov	ip, r4
  408e14:	4629      	mov	r1, r5
  408e16:	9308      	str	r3, [sp, #32]
  408e18:	2378      	movs	r3, #120	; 0x78
  408e1a:	f040 0002 	orr.w	r0, r0, #2
  408e1e:	3104      	adds	r1, #4
  408e20:	682c      	ldr	r4, [r5, #0]
  408e22:	461e      	mov	r6, r3
  408e24:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  408e28:	4b48      	ldr	r3, [pc, #288]	; (408f4c <_svfprintf_r+0x92c>)
  408e2a:	2500      	movs	r5, #0
  408e2c:	9006      	str	r0, [sp, #24]
  408e2e:	9315      	str	r3, [sp, #84]	; 0x54
  408e30:	2302      	movs	r3, #2
  408e32:	910c      	str	r1, [sp, #48]	; 0x30
  408e34:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  408e38:	e4d5      	b.n	4087e6 <_svfprintf_r+0x1c6>
  408e3a:	9308      	str	r3, [sp, #32]
  408e3c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  408e40:	2e00      	cmp	r6, #0
  408e42:	f43f acab 	beq.w	40879c <_svfprintf_r+0x17c>
  408e46:	2300      	movs	r3, #0
  408e48:	2201      	movs	r2, #1
  408e4a:	a926      	add	r1, sp, #152	; 0x98
  408e4c:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  408e50:	9207      	str	r2, [sp, #28]
  408e52:	461f      	mov	r7, r3
  408e54:	910f      	str	r1, [sp, #60]	; 0x3c
  408e56:	4614      	mov	r4, r2
  408e58:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408e5c:	9310      	str	r3, [sp, #64]	; 0x40
  408e5e:	9311      	str	r3, [sp, #68]	; 0x44
  408e60:	e4f5      	b.n	40884e <_svfprintf_r+0x22e>
  408e62:	9809      	ldr	r0, [sp, #36]	; 0x24
  408e64:	4649      	mov	r1, r9
  408e66:	aa23      	add	r2, sp, #140	; 0x8c
  408e68:	f004 f8ca 	bl	40d000 <__ssprint_r>
  408e6c:	2800      	cmp	r0, #0
  408e6e:	f47f ac9c 	bne.w	4087aa <_svfprintf_r+0x18a>
  408e72:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  408e76:	46c3      	mov	fp, r8
  408e78:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  408e7c:	e53f      	b.n	4088fe <_svfprintf_r+0x2de>
  408e7e:	2e65      	cmp	r6, #101	; 0x65
  408e80:	f340 80c9 	ble.w	409016 <_svfprintf_r+0x9f6>
  408e84:	9813      	ldr	r0, [sp, #76]	; 0x4c
  408e86:	2200      	movs	r2, #0
  408e88:	2300      	movs	r3, #0
  408e8a:	9914      	ldr	r1, [sp, #80]	; 0x50
  408e8c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  408e90:	f7fe fd14 	bl	4078bc <__aeabi_dcmpeq>
  408e94:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  408e98:	2800      	cmp	r0, #0
  408e9a:	f000 8165 	beq.w	409168 <_svfprintf_r+0xb48>
  408e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ea0:	2201      	movs	r2, #1
  408ea2:	f10c 0c01 	add.w	ip, ip, #1
  408ea6:	492c      	ldr	r1, [pc, #176]	; (408f58 <_svfprintf_r+0x938>)
  408ea8:	4413      	add	r3, r2
  408eaa:	f8cb 2004 	str.w	r2, [fp, #4]
  408eae:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408eb2:	2b07      	cmp	r3, #7
  408eb4:	f8cb 1000 	str.w	r1, [fp]
  408eb8:	9324      	str	r3, [sp, #144]	; 0x90
  408eba:	f300 8343 	bgt.w	409544 <_svfprintf_r+0xf24>
  408ebe:	f10b 0b08 	add.w	fp, fp, #8
  408ec2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  408ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408ec6:	4293      	cmp	r3, r2
  408ec8:	db03      	blt.n	408ed2 <_svfprintf_r+0x8b2>
  408eca:	9b06      	ldr	r3, [sp, #24]
  408ecc:	07de      	lsls	r6, r3, #31
  408ece:	f57f ad92 	bpl.w	4089f6 <_svfprintf_r+0x3d6>
  408ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ed4:	9917      	ldr	r1, [sp, #92]	; 0x5c
  408ed6:	3301      	adds	r3, #1
  408ed8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408eda:	448c      	add	ip, r1
  408edc:	f8cb 1004 	str.w	r1, [fp, #4]
  408ee0:	2b07      	cmp	r3, #7
  408ee2:	f8cb 2000 	str.w	r2, [fp]
  408ee6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  408eea:	9324      	str	r3, [sp, #144]	; 0x90
  408eec:	f300 841d 	bgt.w	40972a <_svfprintf_r+0x110a>
  408ef0:	f10b 0b08 	add.w	fp, fp, #8
  408ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408ef6:	1e5c      	subs	r4, r3, #1
  408ef8:	2c00      	cmp	r4, #0
  408efa:	f77f ad7c 	ble.w	4089f6 <_svfprintf_r+0x3d6>
  408efe:	2c10      	cmp	r4, #16
  408f00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f02:	f340 85bc 	ble.w	409a7e <_svfprintf_r+0x145e>
  408f06:	2610      	movs	r6, #16
  408f08:	4d14      	ldr	r5, [pc, #80]	; (408f5c <_svfprintf_r+0x93c>)
  408f0a:	4662      	mov	r2, ip
  408f0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  408f0e:	e003      	b.n	408f18 <_svfprintf_r+0x8f8>
  408f10:	3c10      	subs	r4, #16
  408f12:	2c10      	cmp	r4, #16
  408f14:	f340 81c8 	ble.w	4092a8 <_svfprintf_r+0xc88>
  408f18:	3301      	adds	r3, #1
  408f1a:	3210      	adds	r2, #16
  408f1c:	f8cb 5000 	str.w	r5, [fp]
  408f20:	f10b 0b08 	add.w	fp, fp, #8
  408f24:	2b07      	cmp	r3, #7
  408f26:	f84b 6c04 	str.w	r6, [fp, #-4]
  408f2a:	9225      	str	r2, [sp, #148]	; 0x94
  408f2c:	9324      	str	r3, [sp, #144]	; 0x90
  408f2e:	ddef      	ble.n	408f10 <_svfprintf_r+0x8f0>
  408f30:	4638      	mov	r0, r7
  408f32:	4649      	mov	r1, r9
  408f34:	aa23      	add	r2, sp, #140	; 0x8c
  408f36:	46c3      	mov	fp, r8
  408f38:	f004 f862 	bl	40d000 <__ssprint_r>
  408f3c:	2800      	cmp	r0, #0
  408f3e:	f47f ac34 	bne.w	4087aa <_svfprintf_r+0x18a>
  408f42:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f46:	e7e3      	b.n	408f10 <_svfprintf_r+0x8f0>
  408f48:	0040e4c8 	.word	0x0040e4c8
  408f4c:	0040e4dc 	.word	0x0040e4dc
  408f50:	0040e4bc 	.word	0x0040e4bc
  408f54:	0040e4b8 	.word	0x0040e4b8
  408f58:	0040e4f8 	.word	0x0040e4f8
  408f5c:	0040e498 	.word	0x0040e498
  408f60:	2b01      	cmp	r3, #1
  408f62:	f000 814d 	beq.w	409200 <_svfprintf_r+0xbe0>
  408f66:	2b02      	cmp	r3, #2
  408f68:	f040 80e3 	bne.w	409132 <_svfprintf_r+0xb12>
  408f6c:	46c2      	mov	sl, r8
  408f6e:	9815      	ldr	r0, [sp, #84]	; 0x54
  408f70:	0923      	lsrs	r3, r4, #4
  408f72:	f004 010f 	and.w	r1, r4, #15
  408f76:	092a      	lsrs	r2, r5, #4
  408f78:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408f7c:	4615      	mov	r5, r2
  408f7e:	461c      	mov	r4, r3
  408f80:	5c43      	ldrb	r3, [r0, r1]
  408f82:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  408f86:	ea54 0305 	orrs.w	r3, r4, r5
  408f8a:	d1f1      	bne.n	408f70 <_svfprintf_r+0x950>
  408f8c:	4653      	mov	r3, sl
  408f8e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  408f92:	ebc3 0408 	rsb	r4, r3, r8
  408f96:	e44f      	b.n	408838 <_svfprintf_r+0x218>
  408f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408f9a:	9a07      	ldr	r2, [sp, #28]
  408f9c:	1a9f      	subs	r7, r3, r2
  408f9e:	2f00      	cmp	r7, #0
  408fa0:	f77f acd9 	ble.w	408956 <_svfprintf_r+0x336>
  408fa4:	2f10      	cmp	r7, #16
  408fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fa8:	f340 84f9 	ble.w	40999e <_svfprintf_r+0x137e>
  408fac:	940d      	str	r4, [sp, #52]	; 0x34
  408fae:	f04f 0a10 	mov.w	sl, #16
  408fb2:	4dc8      	ldr	r5, [pc, #800]	; (4092d4 <_svfprintf_r+0xcb4>)
  408fb4:	4662      	mov	r2, ip
  408fb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408fb8:	e002      	b.n	408fc0 <_svfprintf_r+0x9a0>
  408fba:	3f10      	subs	r7, #16
  408fbc:	2f10      	cmp	r7, #16
  408fbe:	dd19      	ble.n	408ff4 <_svfprintf_r+0x9d4>
  408fc0:	3301      	adds	r3, #1
  408fc2:	3210      	adds	r2, #16
  408fc4:	f8cb 5000 	str.w	r5, [fp]
  408fc8:	f10b 0b08 	add.w	fp, fp, #8
  408fcc:	2b07      	cmp	r3, #7
  408fce:	f84b ac04 	str.w	sl, [fp, #-4]
  408fd2:	9225      	str	r2, [sp, #148]	; 0x94
  408fd4:	9324      	str	r3, [sp, #144]	; 0x90
  408fd6:	ddf0      	ble.n	408fba <_svfprintf_r+0x99a>
  408fd8:	4620      	mov	r0, r4
  408fda:	4649      	mov	r1, r9
  408fdc:	aa23      	add	r2, sp, #140	; 0x8c
  408fde:	46c3      	mov	fp, r8
  408fe0:	f004 f80e 	bl	40d000 <__ssprint_r>
  408fe4:	2800      	cmp	r0, #0
  408fe6:	f47f abe0 	bne.w	4087aa <_svfprintf_r+0x18a>
  408fea:	3f10      	subs	r7, #16
  408fec:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408fee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ff0:	2f10      	cmp	r7, #16
  408ff2:	dce5      	bgt.n	408fc0 <_svfprintf_r+0x9a0>
  408ff4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408ff6:	4694      	mov	ip, r2
  408ff8:	3301      	adds	r3, #1
  408ffa:	44bc      	add	ip, r7
  408ffc:	f8cb 5000 	str.w	r5, [fp]
  409000:	2b07      	cmp	r3, #7
  409002:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409006:	9324      	str	r3, [sp, #144]	; 0x90
  409008:	f8cb 7004 	str.w	r7, [fp, #4]
  40900c:	f300 81fc 	bgt.w	409408 <_svfprintf_r+0xde8>
  409010:	f10b 0b08 	add.w	fp, fp, #8
  409014:	e49f      	b.n	408956 <_svfprintf_r+0x336>
  409016:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409018:	f10c 0601 	add.w	r6, ip, #1
  40901c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40901e:	2b01      	cmp	r3, #1
  409020:	f340 81c9 	ble.w	4093b6 <_svfprintf_r+0xd96>
  409024:	2301      	movs	r3, #1
  409026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409028:	9625      	str	r6, [sp, #148]	; 0x94
  40902a:	441c      	add	r4, r3
  40902c:	f8cb 2000 	str.w	r2, [fp]
  409030:	f8cb 3004 	str.w	r3, [fp, #4]
  409034:	2c07      	cmp	r4, #7
  409036:	9424      	str	r4, [sp, #144]	; 0x90
  409038:	f300 81da 	bgt.w	4093f0 <_svfprintf_r+0xdd0>
  40903c:	f10b 0b08 	add.w	fp, fp, #8
  409040:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  409042:	3401      	adds	r4, #1
  409044:	9b16      	ldr	r3, [sp, #88]	; 0x58
  409046:	4416      	add	r6, r2
  409048:	2c07      	cmp	r4, #7
  40904a:	f8cb 3000 	str.w	r3, [fp]
  40904e:	9625      	str	r6, [sp, #148]	; 0x94
  409050:	9424      	str	r4, [sp, #144]	; 0x90
  409052:	f8cb 2004 	str.w	r2, [fp, #4]
  409056:	f300 81bf 	bgt.w	4093d8 <_svfprintf_r+0xdb8>
  40905a:	f10b 0b08 	add.w	fp, fp, #8
  40905e:	2300      	movs	r3, #0
  409060:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409062:	2200      	movs	r2, #0
  409064:	9914      	ldr	r1, [sp, #80]	; 0x50
  409066:	f7fe fc29 	bl	4078bc <__aeabi_dcmpeq>
  40906a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40906c:	2800      	cmp	r0, #0
  40906e:	f040 80dc 	bne.w	40922a <_svfprintf_r+0xc0a>
  409072:	3b01      	subs	r3, #1
  409074:	3401      	adds	r4, #1
  409076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409078:	441e      	add	r6, r3
  40907a:	2c07      	cmp	r4, #7
  40907c:	f102 0201 	add.w	r2, r2, #1
  409080:	9424      	str	r4, [sp, #144]	; 0x90
  409082:	9625      	str	r6, [sp, #148]	; 0x94
  409084:	f8cb 2000 	str.w	r2, [fp]
  409088:	f8cb 3004 	str.w	r3, [fp, #4]
  40908c:	f300 8100 	bgt.w	409290 <_svfprintf_r+0xc70>
  409090:	f10b 0b08 	add.w	fp, fp, #8
  409094:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409096:	3401      	adds	r4, #1
  409098:	ab1f      	add	r3, sp, #124	; 0x7c
  40909a:	eb06 0c02 	add.w	ip, r6, r2
  40909e:	2c07      	cmp	r4, #7
  4090a0:	f8cb 2004 	str.w	r2, [fp, #4]
  4090a4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4090a8:	9424      	str	r4, [sp, #144]	; 0x90
  4090aa:	f8cb 3000 	str.w	r3, [fp]
  4090ae:	f77f aca0 	ble.w	4089f2 <_svfprintf_r+0x3d2>
  4090b2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4090b4:	4649      	mov	r1, r9
  4090b6:	aa23      	add	r2, sp, #140	; 0x8c
  4090b8:	f003 ffa2 	bl	40d000 <__ssprint_r>
  4090bc:	2800      	cmp	r0, #0
  4090be:	f47f ab74 	bne.w	4087aa <_svfprintf_r+0x18a>
  4090c2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4090c6:	46c3      	mov	fp, r8
  4090c8:	e495      	b.n	4089f6 <_svfprintf_r+0x3d6>
  4090ca:	9809      	ldr	r0, [sp, #36]	; 0x24
  4090cc:	4649      	mov	r1, r9
  4090ce:	aa23      	add	r2, sp, #140	; 0x8c
  4090d0:	f003 ff96 	bl	40d000 <__ssprint_r>
  4090d4:	2800      	cmp	r0, #0
  4090d6:	f43f acde 	beq.w	408a96 <_svfprintf_r+0x476>
  4090da:	f7ff bb66 	b.w	4087aa <_svfprintf_r+0x18a>
  4090de:	4614      	mov	r4, r2
  4090e0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4090e4:	f7ff bba8 	b.w	408838 <_svfprintf_r+0x218>
  4090e8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4090ea:	4649      	mov	r1, r9
  4090ec:	aa23      	add	r2, sp, #140	; 0x8c
  4090ee:	f003 ff87 	bl	40d000 <__ssprint_r>
  4090f2:	2800      	cmp	r0, #0
  4090f4:	f47f ab59 	bne.w	4087aa <_svfprintf_r+0x18a>
  4090f8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4090fc:	46c3      	mov	fp, r8
  4090fe:	e466      	b.n	4089ce <_svfprintf_r+0x3ae>
  409100:	9809      	ldr	r0, [sp, #36]	; 0x24
  409102:	4649      	mov	r1, r9
  409104:	aa23      	add	r2, sp, #140	; 0x8c
  409106:	f003 ff7b 	bl	40d000 <__ssprint_r>
  40910a:	2800      	cmp	r0, #0
  40910c:	f47f ab4d 	bne.w	4087aa <_svfprintf_r+0x18a>
  409110:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  409114:	46c3      	mov	fp, r8
  409116:	e41a      	b.n	40894e <_svfprintf_r+0x32e>
  409118:	9809      	ldr	r0, [sp, #36]	; 0x24
  40911a:	4649      	mov	r1, r9
  40911c:	aa23      	add	r2, sp, #140	; 0x8c
  40911e:	f003 ff6f 	bl	40d000 <__ssprint_r>
  409122:	2800      	cmp	r0, #0
  409124:	f47f ab41 	bne.w	4087aa <_svfprintf_r+0x18a>
  409128:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40912c:	46c3      	mov	fp, r8
  40912e:	f7ff bbfa 	b.w	408926 <_svfprintf_r+0x306>
  409132:	4641      	mov	r1, r8
  409134:	08e2      	lsrs	r2, r4, #3
  409136:	f004 0307 	and.w	r3, r4, #7
  40913a:	08e8      	lsrs	r0, r5, #3
  40913c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  409140:	3330      	adds	r3, #48	; 0x30
  409142:	4605      	mov	r5, r0
  409144:	4614      	mov	r4, r2
  409146:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40914a:	ea54 0205 	orrs.w	r2, r4, r5
  40914e:	d1f1      	bne.n	409134 <_svfprintf_r+0xb14>
  409150:	9a06      	ldr	r2, [sp, #24]
  409152:	910f      	str	r1, [sp, #60]	; 0x3c
  409154:	07d0      	lsls	r0, r2, #31
  409156:	f100 8164 	bmi.w	409422 <_svfprintf_r+0xe02>
  40915a:	ebc1 0408 	rsb	r4, r1, r8
  40915e:	f7ff bb6b 	b.w	408838 <_svfprintf_r+0x218>
  409162:	2302      	movs	r3, #2
  409164:	f7ff bb3f 	b.w	4087e6 <_svfprintf_r+0x1c6>
  409168:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40916a:	2c00      	cmp	r4, #0
  40916c:	f340 81f6 	ble.w	40955c <_svfprintf_r+0xf3c>
  409170:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409172:	9911      	ldr	r1, [sp, #68]	; 0x44
  409174:	4613      	mov	r3, r2
  409176:	428a      	cmp	r2, r1
  409178:	bfa8      	it	ge
  40917a:	460b      	movge	r3, r1
  40917c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40917e:	461c      	mov	r4, r3
  409180:	188f      	adds	r7, r1, r2
  409182:	2c00      	cmp	r4, #0
  409184:	dd0e      	ble.n	4091a4 <_svfprintf_r+0xb84>
  409186:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409188:	44a4      	add	ip, r4
  40918a:	f8cb 1000 	str.w	r1, [fp]
  40918e:	3301      	adds	r3, #1
  409190:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409194:	f8cb 4004 	str.w	r4, [fp, #4]
  409198:	2b07      	cmp	r3, #7
  40919a:	9324      	str	r3, [sp, #144]	; 0x90
  40919c:	f300 8353 	bgt.w	409846 <_svfprintf_r+0x1226>
  4091a0:	f10b 0b08 	add.w	fp, fp, #8
  4091a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4091a6:	2c00      	cmp	r4, #0
  4091a8:	bfa8      	it	ge
  4091aa:	1b1b      	subge	r3, r3, r4
  4091ac:	2b00      	cmp	r3, #0
  4091ae:	461c      	mov	r4, r3
  4091b0:	f340 80a1 	ble.w	4092f6 <_svfprintf_r+0xcd6>
  4091b4:	2c10      	cmp	r4, #16
  4091b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4091b8:	f340 846c 	ble.w	409a94 <_svfprintf_r+0x1474>
  4091bc:	2610      	movs	r6, #16
  4091be:	4d45      	ldr	r5, [pc, #276]	; (4092d4 <_svfprintf_r+0xcb4>)
  4091c0:	4662      	mov	r2, ip
  4091c2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4091c6:	e003      	b.n	4091d0 <_svfprintf_r+0xbb0>
  4091c8:	3c10      	subs	r4, #16
  4091ca:	2c10      	cmp	r4, #16
  4091cc:	f340 8084 	ble.w	4092d8 <_svfprintf_r+0xcb8>
  4091d0:	3301      	adds	r3, #1
  4091d2:	3210      	adds	r2, #16
  4091d4:	f8cb 5000 	str.w	r5, [fp]
  4091d8:	f10b 0b08 	add.w	fp, fp, #8
  4091dc:	2b07      	cmp	r3, #7
  4091de:	f84b 6c04 	str.w	r6, [fp, #-4]
  4091e2:	9225      	str	r2, [sp, #148]	; 0x94
  4091e4:	9324      	str	r3, [sp, #144]	; 0x90
  4091e6:	ddef      	ble.n	4091c8 <_svfprintf_r+0xba8>
  4091e8:	4650      	mov	r0, sl
  4091ea:	4649      	mov	r1, r9
  4091ec:	aa23      	add	r2, sp, #140	; 0x8c
  4091ee:	46c3      	mov	fp, r8
  4091f0:	f003 ff06 	bl	40d000 <__ssprint_r>
  4091f4:	2800      	cmp	r0, #0
  4091f6:	f47f aad8 	bne.w	4087aa <_svfprintf_r+0x18a>
  4091fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4091fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4091fe:	e7e3      	b.n	4091c8 <_svfprintf_r+0xba8>
  409200:	2d00      	cmp	r5, #0
  409202:	bf08      	it	eq
  409204:	2c0a      	cmpeq	r4, #10
  409206:	f080 811a 	bcs.w	40943e <_svfprintf_r+0xe1e>
  40920a:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40920e:	3430      	adds	r4, #48	; 0x30
  409210:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  409214:	ebca 0408 	rsb	r4, sl, r8
  409218:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40921c:	f7ff bb0c 	b.w	408838 <_svfprintf_r+0x218>
  409220:	461c      	mov	r4, r3
  409222:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  409226:	f7ff bb07 	b.w	408838 <_svfprintf_r+0x218>
  40922a:	1e5f      	subs	r7, r3, #1
  40922c:	2f00      	cmp	r7, #0
  40922e:	f77f af31 	ble.w	409094 <_svfprintf_r+0xa74>
  409232:	2f10      	cmp	r7, #16
  409234:	4d27      	ldr	r5, [pc, #156]	; (4092d4 <_svfprintf_r+0xcb4>)
  409236:	bfc8      	it	gt
  409238:	f04f 0a10 	movgt.w	sl, #16
  40923c:	dc03      	bgt.n	409246 <_svfprintf_r+0xc26>
  40923e:	e01c      	b.n	40927a <_svfprintf_r+0xc5a>
  409240:	3f10      	subs	r7, #16
  409242:	2f10      	cmp	r7, #16
  409244:	dd19      	ble.n	40927a <_svfprintf_r+0xc5a>
  409246:	3401      	adds	r4, #1
  409248:	3610      	adds	r6, #16
  40924a:	f8cb 5000 	str.w	r5, [fp]
  40924e:	f10b 0b08 	add.w	fp, fp, #8
  409252:	2c07      	cmp	r4, #7
  409254:	f84b ac04 	str.w	sl, [fp, #-4]
  409258:	9625      	str	r6, [sp, #148]	; 0x94
  40925a:	9424      	str	r4, [sp, #144]	; 0x90
  40925c:	ddf0      	ble.n	409240 <_svfprintf_r+0xc20>
  40925e:	9809      	ldr	r0, [sp, #36]	; 0x24
  409260:	4649      	mov	r1, r9
  409262:	aa23      	add	r2, sp, #140	; 0x8c
  409264:	46c3      	mov	fp, r8
  409266:	f003 fecb 	bl	40d000 <__ssprint_r>
  40926a:	2800      	cmp	r0, #0
  40926c:	f47f aa9d 	bne.w	4087aa <_svfprintf_r+0x18a>
  409270:	3f10      	subs	r7, #16
  409272:	9e25      	ldr	r6, [sp, #148]	; 0x94
  409274:	9c24      	ldr	r4, [sp, #144]	; 0x90
  409276:	2f10      	cmp	r7, #16
  409278:	dce5      	bgt.n	409246 <_svfprintf_r+0xc26>
  40927a:	3401      	adds	r4, #1
  40927c:	443e      	add	r6, r7
  40927e:	f8cb 5000 	str.w	r5, [fp]
  409282:	2c07      	cmp	r4, #7
  409284:	9625      	str	r6, [sp, #148]	; 0x94
  409286:	9424      	str	r4, [sp, #144]	; 0x90
  409288:	f8cb 7004 	str.w	r7, [fp, #4]
  40928c:	f77f af00 	ble.w	409090 <_svfprintf_r+0xa70>
  409290:	9809      	ldr	r0, [sp, #36]	; 0x24
  409292:	4649      	mov	r1, r9
  409294:	aa23      	add	r2, sp, #140	; 0x8c
  409296:	f003 feb3 	bl	40d000 <__ssprint_r>
  40929a:	2800      	cmp	r0, #0
  40929c:	f47f aa85 	bne.w	4087aa <_svfprintf_r+0x18a>
  4092a0:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4092a2:	46c3      	mov	fp, r8
  4092a4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4092a6:	e6f5      	b.n	409094 <_svfprintf_r+0xa74>
  4092a8:	4694      	mov	ip, r2
  4092aa:	3301      	adds	r3, #1
  4092ac:	44a4      	add	ip, r4
  4092ae:	f8cb 5000 	str.w	r5, [fp]
  4092b2:	2b07      	cmp	r3, #7
  4092b4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4092b8:	9324      	str	r3, [sp, #144]	; 0x90
  4092ba:	f8cb 4004 	str.w	r4, [fp, #4]
  4092be:	f77f ab98 	ble.w	4089f2 <_svfprintf_r+0x3d2>
  4092c2:	e6f6      	b.n	4090b2 <_svfprintf_r+0xa92>
  4092c4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4092c6:	2500      	movs	r5, #0
  4092c8:	460a      	mov	r2, r1
  4092ca:	680c      	ldr	r4, [r1, #0]
  4092cc:	3204      	adds	r2, #4
  4092ce:	920c      	str	r2, [sp, #48]	; 0x30
  4092d0:	f7ff ba89 	b.w	4087e6 <_svfprintf_r+0x1c6>
  4092d4:	0040e498 	.word	0x0040e498
  4092d8:	4694      	mov	ip, r2
  4092da:	3301      	adds	r3, #1
  4092dc:	44a4      	add	ip, r4
  4092de:	f8cb 5000 	str.w	r5, [fp]
  4092e2:	2b07      	cmp	r3, #7
  4092e4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4092e8:	9324      	str	r3, [sp, #144]	; 0x90
  4092ea:	f8cb 4004 	str.w	r4, [fp, #4]
  4092ee:	f300 82df 	bgt.w	4098b0 <_svfprintf_r+0x1290>
  4092f2:	f10b 0b08 	add.w	fp, fp, #8
  4092f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4092f8:	9911      	ldr	r1, [sp, #68]	; 0x44
  4092fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4092fc:	440a      	add	r2, r1
  4092fe:	4616      	mov	r6, r2
  409300:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409302:	4293      	cmp	r3, r2
  409304:	db45      	blt.n	409392 <_svfprintf_r+0xd72>
  409306:	9a06      	ldr	r2, [sp, #24]
  409308:	07d0      	lsls	r0, r2, #31
  40930a:	d442      	bmi.n	409392 <_svfprintf_r+0xd72>
  40930c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40930e:	1bbc      	subs	r4, r7, r6
  409310:	1ad3      	subs	r3, r2, r3
  409312:	429c      	cmp	r4, r3
  409314:	bfa8      	it	ge
  409316:	461c      	movge	r4, r3
  409318:	2c00      	cmp	r4, #0
  40931a:	4625      	mov	r5, r4
  40931c:	dd0e      	ble.n	40933c <_svfprintf_r+0xd1c>
  40931e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409320:	44a4      	add	ip, r4
  409322:	f8cb 6000 	str.w	r6, [fp]
  409326:	3201      	adds	r2, #1
  409328:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40932c:	f8cb 4004 	str.w	r4, [fp, #4]
  409330:	2a07      	cmp	r2, #7
  409332:	9224      	str	r2, [sp, #144]	; 0x90
  409334:	f300 82a0 	bgt.w	409878 <_svfprintf_r+0x1258>
  409338:	f10b 0b08 	add.w	fp, fp, #8
  40933c:	2d00      	cmp	r5, #0
  40933e:	bfac      	ite	ge
  409340:	1b5c      	subge	r4, r3, r5
  409342:	461c      	movlt	r4, r3
  409344:	2c00      	cmp	r4, #0
  409346:	f77f ab56 	ble.w	4089f6 <_svfprintf_r+0x3d6>
  40934a:	2c10      	cmp	r4, #16
  40934c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40934e:	f340 8396 	ble.w	409a7e <_svfprintf_r+0x145e>
  409352:	2610      	movs	r6, #16
  409354:	4db1      	ldr	r5, [pc, #708]	; (40961c <_svfprintf_r+0xffc>)
  409356:	4662      	mov	r2, ip
  409358:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40935a:	e002      	b.n	409362 <_svfprintf_r+0xd42>
  40935c:	3c10      	subs	r4, #16
  40935e:	2c10      	cmp	r4, #16
  409360:	dda2      	ble.n	4092a8 <_svfprintf_r+0xc88>
  409362:	3301      	adds	r3, #1
  409364:	3210      	adds	r2, #16
  409366:	f8cb 5000 	str.w	r5, [fp]
  40936a:	f10b 0b08 	add.w	fp, fp, #8
  40936e:	2b07      	cmp	r3, #7
  409370:	f84b 6c04 	str.w	r6, [fp, #-4]
  409374:	9225      	str	r2, [sp, #148]	; 0x94
  409376:	9324      	str	r3, [sp, #144]	; 0x90
  409378:	ddf0      	ble.n	40935c <_svfprintf_r+0xd3c>
  40937a:	4638      	mov	r0, r7
  40937c:	4649      	mov	r1, r9
  40937e:	aa23      	add	r2, sp, #140	; 0x8c
  409380:	46c3      	mov	fp, r8
  409382:	f003 fe3d 	bl	40d000 <__ssprint_r>
  409386:	2800      	cmp	r0, #0
  409388:	f47f aa0f 	bne.w	4087aa <_svfprintf_r+0x18a>
  40938c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40938e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409390:	e7e4      	b.n	40935c <_svfprintf_r+0xd3c>
  409392:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409394:	9817      	ldr	r0, [sp, #92]	; 0x5c
  409396:	3201      	adds	r2, #1
  409398:	9916      	ldr	r1, [sp, #88]	; 0x58
  40939a:	4484      	add	ip, r0
  40939c:	f8cb 0004 	str.w	r0, [fp, #4]
  4093a0:	2a07      	cmp	r2, #7
  4093a2:	f8cb 1000 	str.w	r1, [fp]
  4093a6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4093aa:	9224      	str	r2, [sp, #144]	; 0x90
  4093ac:	f300 8273 	bgt.w	409896 <_svfprintf_r+0x1276>
  4093b0:	f10b 0b08 	add.w	fp, fp, #8
  4093b4:	e7aa      	b.n	40930c <_svfprintf_r+0xcec>
  4093b6:	9b06      	ldr	r3, [sp, #24]
  4093b8:	07d9      	lsls	r1, r3, #31
  4093ba:	f53f ae33 	bmi.w	409024 <_svfprintf_r+0xa04>
  4093be:	2301      	movs	r3, #1
  4093c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4093c2:	9625      	str	r6, [sp, #148]	; 0x94
  4093c4:	441c      	add	r4, r3
  4093c6:	f8cb 2000 	str.w	r2, [fp]
  4093ca:	f8cb 3004 	str.w	r3, [fp, #4]
  4093ce:	2c07      	cmp	r4, #7
  4093d0:	9424      	str	r4, [sp, #144]	; 0x90
  4093d2:	f77f ae5d 	ble.w	409090 <_svfprintf_r+0xa70>
  4093d6:	e75b      	b.n	409290 <_svfprintf_r+0xc70>
  4093d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4093da:	4649      	mov	r1, r9
  4093dc:	aa23      	add	r2, sp, #140	; 0x8c
  4093de:	f003 fe0f 	bl	40d000 <__ssprint_r>
  4093e2:	2800      	cmp	r0, #0
  4093e4:	f47f a9e1 	bne.w	4087aa <_svfprintf_r+0x18a>
  4093e8:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4093ea:	46c3      	mov	fp, r8
  4093ec:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4093ee:	e636      	b.n	40905e <_svfprintf_r+0xa3e>
  4093f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4093f2:	4649      	mov	r1, r9
  4093f4:	aa23      	add	r2, sp, #140	; 0x8c
  4093f6:	f003 fe03 	bl	40d000 <__ssprint_r>
  4093fa:	2800      	cmp	r0, #0
  4093fc:	f47f a9d5 	bne.w	4087aa <_svfprintf_r+0x18a>
  409400:	9e25      	ldr	r6, [sp, #148]	; 0x94
  409402:	46c3      	mov	fp, r8
  409404:	9c24      	ldr	r4, [sp, #144]	; 0x90
  409406:	e61b      	b.n	409040 <_svfprintf_r+0xa20>
  409408:	9809      	ldr	r0, [sp, #36]	; 0x24
  40940a:	4649      	mov	r1, r9
  40940c:	aa23      	add	r2, sp, #140	; 0x8c
  40940e:	f003 fdf7 	bl	40d000 <__ssprint_r>
  409412:	2800      	cmp	r0, #0
  409414:	f47f a9c9 	bne.w	4087aa <_svfprintf_r+0x18a>
  409418:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40941c:	46c3      	mov	fp, r8
  40941e:	f7ff ba9a 	b.w	408956 <_svfprintf_r+0x336>
  409422:	2b30      	cmp	r3, #48	; 0x30
  409424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409426:	f43f adb4 	beq.w	408f92 <_svfprintf_r+0x972>
  40942a:	3b01      	subs	r3, #1
  40942c:	461a      	mov	r2, r3
  40942e:	930f      	str	r3, [sp, #60]	; 0x3c
  409430:	2330      	movs	r3, #48	; 0x30
  409432:	ebc2 0408 	rsb	r4, r2, r8
  409436:	f801 3c01 	strb.w	r3, [r1, #-1]
  40943a:	f7ff b9fd 	b.w	408838 <_svfprintf_r+0x218>
  40943e:	46c2      	mov	sl, r8
  409440:	f8cd c01c 	str.w	ip, [sp, #28]
  409444:	4620      	mov	r0, r4
  409446:	4629      	mov	r1, r5
  409448:	220a      	movs	r2, #10
  40944a:	2300      	movs	r3, #0
  40944c:	f004 f824 	bl	40d498 <__aeabi_uldivmod>
  409450:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  409454:	4620      	mov	r0, r4
  409456:	4629      	mov	r1, r5
  409458:	2300      	movs	r3, #0
  40945a:	220a      	movs	r2, #10
  40945c:	f80a ed01 	strb.w	lr, [sl, #-1]!
  409460:	f004 f81a 	bl	40d498 <__aeabi_uldivmod>
  409464:	4604      	mov	r4, r0
  409466:	460d      	mov	r5, r1
  409468:	ea54 0305 	orrs.w	r3, r4, r5
  40946c:	d1ea      	bne.n	409444 <_svfprintf_r+0xe24>
  40946e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  409472:	ebca 0408 	rsb	r4, sl, r8
  409476:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40947a:	f7ff b9dd 	b.w	408838 <_svfprintf_r+0x218>
  40947e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409480:	9914      	ldr	r1, [sp, #80]	; 0x50
  409482:	f8cd c01c 	str.w	ip, [sp, #28]
  409486:	f7fd fd43 	bl	406f10 <__fpclassifyd>
  40948a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40948e:	2800      	cmp	r0, #0
  409490:	f040 80cc 	bne.w	40962c <_svfprintf_r+0x100c>
  409494:	9c06      	ldr	r4, [sp, #24]
  409496:	2103      	movs	r1, #3
  409498:	4a61      	ldr	r2, [pc, #388]	; (409620 <_svfprintf_r+0x1000>)
  40949a:	4b62      	ldr	r3, [pc, #392]	; (409624 <_svfprintf_r+0x1004>)
  40949c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  4094a0:	9010      	str	r0, [sp, #64]	; 0x40
  4094a2:	2e47      	cmp	r6, #71	; 0x47
  4094a4:	bfd8      	it	le
  4094a6:	461a      	movle	r2, r3
  4094a8:	9406      	str	r4, [sp, #24]
  4094aa:	9107      	str	r1, [sp, #28]
  4094ac:	460c      	mov	r4, r1
  4094ae:	9011      	str	r0, [sp, #68]	; 0x44
  4094b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4094b2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4094b6:	f7ff b9c6 	b.w	408846 <_svfprintf_r+0x226>
  4094ba:	9b06      	ldr	r3, [sp, #24]
  4094bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4094be:	f013 0f40 	tst.w	r3, #64	; 0x40
  4094c2:	4613      	mov	r3, r2
  4094c4:	f43f abc9 	beq.w	408c5a <_svfprintf_r+0x63a>
  4094c8:	8814      	ldrh	r4, [r2, #0]
  4094ca:	3204      	adds	r2, #4
  4094cc:	2500      	movs	r5, #0
  4094ce:	2301      	movs	r3, #1
  4094d0:	920c      	str	r2, [sp, #48]	; 0x30
  4094d2:	f7ff b988 	b.w	4087e6 <_svfprintf_r+0x1c6>
  4094d6:	9b06      	ldr	r3, [sp, #24]
  4094d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4094da:	f013 0f40 	tst.w	r3, #64	; 0x40
  4094de:	4613      	mov	r3, r2
  4094e0:	f000 8130 	beq.w	409744 <_svfprintf_r+0x1124>
  4094e4:	3304      	adds	r3, #4
  4094e6:	8814      	ldrh	r4, [r2, #0]
  4094e8:	2500      	movs	r5, #0
  4094ea:	930c      	str	r3, [sp, #48]	; 0x30
  4094ec:	f7ff bbcd 	b.w	408c8a <_svfprintf_r+0x66a>
  4094f0:	9b06      	ldr	r3, [sp, #24]
  4094f2:	06dd      	lsls	r5, r3, #27
  4094f4:	d40b      	bmi.n	40950e <_svfprintf_r+0xeee>
  4094f6:	9b06      	ldr	r3, [sp, #24]
  4094f8:	065c      	lsls	r4, r3, #25
  4094fa:	d508      	bpl.n	40950e <_svfprintf_r+0xeee>
  4094fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4094fe:	6813      	ldr	r3, [r2, #0]
  409500:	3204      	adds	r2, #4
  409502:	920c      	str	r2, [sp, #48]	; 0x30
  409504:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  409508:	801a      	strh	r2, [r3, #0]
  40950a:	f7ff b8af 	b.w	40866c <_svfprintf_r+0x4c>
  40950e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409510:	6813      	ldr	r3, [r2, #0]
  409512:	3204      	adds	r2, #4
  409514:	920c      	str	r2, [sp, #48]	; 0x30
  409516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409518:	601a      	str	r2, [r3, #0]
  40951a:	f7ff b8a7 	b.w	40866c <_svfprintf_r+0x4c>
  40951e:	9b06      	ldr	r3, [sp, #24]
  409520:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409522:	f013 0f40 	tst.w	r3, #64	; 0x40
  409526:	4613      	mov	r3, r2
  409528:	f43f ac26 	beq.w	408d78 <_svfprintf_r+0x758>
  40952c:	f9b2 4000 	ldrsh.w	r4, [r2]
  409530:	3304      	adds	r3, #4
  409532:	17e5      	asrs	r5, r4, #31
  409534:	930c      	str	r3, [sp, #48]	; 0x30
  409536:	4622      	mov	r2, r4
  409538:	462b      	mov	r3, r5
  40953a:	f7ff baf9 	b.w	408b30 <_svfprintf_r+0x510>
  40953e:	4d37      	ldr	r5, [pc, #220]	; (40961c <_svfprintf_r+0xffc>)
  409540:	f7ff ba37 	b.w	4089b2 <_svfprintf_r+0x392>
  409544:	9809      	ldr	r0, [sp, #36]	; 0x24
  409546:	4649      	mov	r1, r9
  409548:	aa23      	add	r2, sp, #140	; 0x8c
  40954a:	f003 fd59 	bl	40d000 <__ssprint_r>
  40954e:	2800      	cmp	r0, #0
  409550:	f47f a92b 	bne.w	4087aa <_svfprintf_r+0x18a>
  409554:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  409558:	46c3      	mov	fp, r8
  40955a:	e4b2      	b.n	408ec2 <_svfprintf_r+0x8a2>
  40955c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40955e:	2201      	movs	r2, #1
  409560:	f10c 0c01 	add.w	ip, ip, #1
  409564:	4930      	ldr	r1, [pc, #192]	; (409628 <_svfprintf_r+0x1008>)
  409566:	4413      	add	r3, r2
  409568:	f8cb 2004 	str.w	r2, [fp, #4]
  40956c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409570:	2b07      	cmp	r3, #7
  409572:	f8cb 1000 	str.w	r1, [fp]
  409576:	9324      	str	r3, [sp, #144]	; 0x90
  409578:	f300 80fa 	bgt.w	409770 <_svfprintf_r+0x1150>
  40957c:	f10b 0b08 	add.w	fp, fp, #8
  409580:	b92c      	cbnz	r4, 40958e <_svfprintf_r+0xf6e>
  409582:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409584:	b91b      	cbnz	r3, 40958e <_svfprintf_r+0xf6e>
  409586:	9b06      	ldr	r3, [sp, #24]
  409588:	07dd      	lsls	r5, r3, #31
  40958a:	f57f aa34 	bpl.w	4089f6 <_svfprintf_r+0x3d6>
  40958e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409590:	9917      	ldr	r1, [sp, #92]	; 0x5c
  409592:	3301      	adds	r3, #1
  409594:	9816      	ldr	r0, [sp, #88]	; 0x58
  409596:	eb0c 0201 	add.w	r2, ip, r1
  40959a:	f8cb 1004 	str.w	r1, [fp, #4]
  40959e:	2b07      	cmp	r3, #7
  4095a0:	f8cb 0000 	str.w	r0, [fp]
  4095a4:	9225      	str	r2, [sp, #148]	; 0x94
  4095a6:	9324      	str	r3, [sp, #144]	; 0x90
  4095a8:	f300 824c 	bgt.w	409a44 <_svfprintf_r+0x1424>
  4095ac:	f10b 0b08 	add.w	fp, fp, #8
  4095b0:	4264      	negs	r4, r4
  4095b2:	2c00      	cmp	r4, #0
  4095b4:	f340 8126 	ble.w	409804 <_svfprintf_r+0x11e4>
  4095b8:	2c10      	cmp	r4, #16
  4095ba:	4d18      	ldr	r5, [pc, #96]	; (40961c <_svfprintf_r+0xffc>)
  4095bc:	f340 814f 	ble.w	40985e <_svfprintf_r+0x123e>
  4095c0:	2610      	movs	r6, #16
  4095c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4095c4:	e003      	b.n	4095ce <_svfprintf_r+0xfae>
  4095c6:	3c10      	subs	r4, #16
  4095c8:	2c10      	cmp	r4, #16
  4095ca:	f340 8148 	ble.w	40985e <_svfprintf_r+0x123e>
  4095ce:	3301      	adds	r3, #1
  4095d0:	3210      	adds	r2, #16
  4095d2:	f8cb 5000 	str.w	r5, [fp]
  4095d6:	f10b 0b08 	add.w	fp, fp, #8
  4095da:	2b07      	cmp	r3, #7
  4095dc:	f84b 6c04 	str.w	r6, [fp, #-4]
  4095e0:	9225      	str	r2, [sp, #148]	; 0x94
  4095e2:	9324      	str	r3, [sp, #144]	; 0x90
  4095e4:	ddef      	ble.n	4095c6 <_svfprintf_r+0xfa6>
  4095e6:	4638      	mov	r0, r7
  4095e8:	4649      	mov	r1, r9
  4095ea:	aa23      	add	r2, sp, #140	; 0x8c
  4095ec:	46c3      	mov	fp, r8
  4095ee:	f003 fd07 	bl	40d000 <__ssprint_r>
  4095f2:	2800      	cmp	r0, #0
  4095f4:	f47f a8d9 	bne.w	4087aa <_svfprintf_r+0x18a>
  4095f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4095fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4095fc:	e7e3      	b.n	4095c6 <_svfprintf_r+0xfa6>
  4095fe:	f041 0120 	orr.w	r1, r1, #32
  409602:	785e      	ldrb	r6, [r3, #1]
  409604:	9106      	str	r1, [sp, #24]
  409606:	1c59      	adds	r1, r3, #1
  409608:	f7ff b85f 	b.w	4086ca <_svfprintf_r+0xaa>
  40960c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40960e:	910c      	str	r1, [sp, #48]	; 0x30
  409610:	4619      	mov	r1, r3
  409612:	4240      	negs	r0, r0
  409614:	900b      	str	r0, [sp, #44]	; 0x2c
  409616:	f7ff ba43 	b.w	408aa0 <_svfprintf_r+0x480>
  40961a:	bf00      	nop
  40961c:	0040e498 	.word	0x0040e498
  409620:	0040e4c4 	.word	0x0040e4c4
  409624:	0040e4c0 	.word	0x0040e4c0
  409628:	0040e4f8 	.word	0x0040e4f8
  40962c:	f1bc 3fff 	cmp.w	ip, #4294967295
  409630:	f026 0a20 	bic.w	sl, r6, #32
  409634:	f000 80a9 	beq.w	40978a <_svfprintf_r+0x116a>
  409638:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40963c:	f040 80a7 	bne.w	40978e <_svfprintf_r+0x116e>
  409640:	f1bc 0f00 	cmp.w	ip, #0
  409644:	f040 80a3 	bne.w	40978e <_svfprintf_r+0x116e>
  409648:	9b06      	ldr	r3, [sp, #24]
  40964a:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40964e:	f04f 0c01 	mov.w	ip, #1
  409652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  409656:	930e      	str	r3, [sp, #56]	; 0x38
  409658:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40965a:	2b00      	cmp	r3, #0
  40965c:	f2c0 81ff 	blt.w	409a5e <_svfprintf_r+0x143e>
  409660:	461d      	mov	r5, r3
  409662:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  409664:	2300      	movs	r3, #0
  409666:	930d      	str	r3, [sp, #52]	; 0x34
  409668:	2002      	movs	r0, #2
  40966a:	a91d      	add	r1, sp, #116	; 0x74
  40966c:	f8cd c004 	str.w	ip, [sp, #4]
  409670:	463a      	mov	r2, r7
  409672:	9000      	str	r0, [sp, #0]
  409674:	a81e      	add	r0, sp, #120	; 0x78
  409676:	9102      	str	r1, [sp, #8]
  409678:	a921      	add	r1, sp, #132	; 0x84
  40967a:	9003      	str	r0, [sp, #12]
  40967c:	462b      	mov	r3, r5
  40967e:	9809      	ldr	r0, [sp, #36]	; 0x24
  409680:	9104      	str	r1, [sp, #16]
  409682:	f8cd c01c 	str.w	ip, [sp, #28]
  409686:	f001 f9e3 	bl	40aa50 <_dtoa_r>
  40968a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40968e:	900f      	str	r0, [sp, #60]	; 0x3c
  409690:	f8dd c01c 	ldr.w	ip, [sp, #28]
  409694:	f040 8242 	bne.w	409b1c <_svfprintf_r+0x14fc>
  409698:	9b06      	ldr	r3, [sp, #24]
  40969a:	07db      	lsls	r3, r3, #31
  40969c:	f140 81f3 	bpl.w	409a86 <_svfprintf_r+0x1466>
  4096a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4096a2:	eb03 040c 	add.w	r4, r3, ip
  4096a6:	4638      	mov	r0, r7
  4096a8:	2200      	movs	r2, #0
  4096aa:	2300      	movs	r3, #0
  4096ac:	4629      	mov	r1, r5
  4096ae:	f8cd c01c 	str.w	ip, [sp, #28]
  4096b2:	f7fe f903 	bl	4078bc <__aeabi_dcmpeq>
  4096b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4096ba:	2800      	cmp	r0, #0
  4096bc:	f040 8172 	bne.w	4099a4 <_svfprintf_r+0x1384>
  4096c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4096c2:	429c      	cmp	r4, r3
  4096c4:	d906      	bls.n	4096d4 <_svfprintf_r+0x10b4>
  4096c6:	2130      	movs	r1, #48	; 0x30
  4096c8:	1c5a      	adds	r2, r3, #1
  4096ca:	9221      	str	r2, [sp, #132]	; 0x84
  4096cc:	7019      	strb	r1, [r3, #0]
  4096ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4096d0:	429c      	cmp	r4, r3
  4096d2:	d8f9      	bhi.n	4096c8 <_svfprintf_r+0x10a8>
  4096d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4096d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4096da:	eba3 0302 	sub.w	r3, r3, r2
  4096de:	9312      	str	r3, [sp, #72]	; 0x48
  4096e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4096e2:	f040 8113 	bne.w	40990c <_svfprintf_r+0x12ec>
  4096e6:	459c      	cmp	ip, r3
  4096e8:	f2c0 8168 	blt.w	4099bc <_svfprintf_r+0x139c>
  4096ec:	1cd9      	adds	r1, r3, #3
  4096ee:	f2c0 8165 	blt.w	4099bc <_svfprintf_r+0x139c>
  4096f2:	2667      	movs	r6, #103	; 0x67
  4096f4:	9311      	str	r3, [sp, #68]	; 0x44
  4096f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4096f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4096fa:	4293      	cmp	r3, r2
  4096fc:	f300 81b6 	bgt.w	409a6c <_svfprintf_r+0x144c>
  409700:	9b06      	ldr	r3, [sp, #24]
  409702:	07df      	lsls	r7, r3, #31
  409704:	f100 81c1 	bmi.w	409a8a <_svfprintf_r+0x146a>
  409708:	4614      	mov	r4, r2
  40970a:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  40970e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409710:	2b00      	cmp	r3, #0
  409712:	f040 80f0 	bne.w	4098f6 <_svfprintf_r+0x12d6>
  409716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409718:	f8cd c01c 	str.w	ip, [sp, #28]
  40971c:	9306      	str	r3, [sp, #24]
  40971e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409720:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409724:	9310      	str	r3, [sp, #64]	; 0x40
  409726:	f7ff b88e 	b.w	408846 <_svfprintf_r+0x226>
  40972a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40972c:	4649      	mov	r1, r9
  40972e:	aa23      	add	r2, sp, #140	; 0x8c
  409730:	f003 fc66 	bl	40d000 <__ssprint_r>
  409734:	2800      	cmp	r0, #0
  409736:	f47f a838 	bne.w	4087aa <_svfprintf_r+0x18a>
  40973a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40973e:	46c3      	mov	fp, r8
  409740:	f7ff bbd8 	b.w	408ef4 <_svfprintf_r+0x8d4>
  409744:	3304      	adds	r3, #4
  409746:	6814      	ldr	r4, [r2, #0]
  409748:	2500      	movs	r5, #0
  40974a:	930c      	str	r3, [sp, #48]	; 0x30
  40974c:	f7ff ba9d 	b.w	408c8a <_svfprintf_r+0x66a>
  409750:	9809      	ldr	r0, [sp, #36]	; 0x24
  409752:	2140      	movs	r1, #64	; 0x40
  409754:	f7fe fa0a 	bl	407b6c <_malloc_r>
  409758:	f8c9 0000 	str.w	r0, [r9]
  40975c:	f8c9 0010 	str.w	r0, [r9, #16]
  409760:	2800      	cmp	r0, #0
  409762:	f000 81d4 	beq.w	409b0e <_svfprintf_r+0x14ee>
  409766:	2340      	movs	r3, #64	; 0x40
  409768:	f8c9 3014 	str.w	r3, [r9, #20]
  40976c:	f7fe bf70 	b.w	408650 <_svfprintf_r+0x30>
  409770:	9809      	ldr	r0, [sp, #36]	; 0x24
  409772:	4649      	mov	r1, r9
  409774:	aa23      	add	r2, sp, #140	; 0x8c
  409776:	f003 fc43 	bl	40d000 <__ssprint_r>
  40977a:	2800      	cmp	r0, #0
  40977c:	f47f a815 	bne.w	4087aa <_svfprintf_r+0x18a>
  409780:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  409782:	46c3      	mov	fp, r8
  409784:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  409788:	e6fa      	b.n	409580 <_svfprintf_r+0xf60>
  40978a:	f04f 0c06 	mov.w	ip, #6
  40978e:	9b06      	ldr	r3, [sp, #24]
  409790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  409794:	930e      	str	r3, [sp, #56]	; 0x38
  409796:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409798:	2b00      	cmp	r3, #0
  40979a:	f2c0 8160 	blt.w	409a5e <_svfprintf_r+0x143e>
  40979e:	461d      	mov	r5, r3
  4097a0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4097a2:	2300      	movs	r3, #0
  4097a4:	930d      	str	r3, [sp, #52]	; 0x34
  4097a6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  4097aa:	f000 80c4 	beq.w	409936 <_svfprintf_r+0x1316>
  4097ae:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4097b2:	f47f af59 	bne.w	409668 <_svfprintf_r+0x1048>
  4097b6:	f10c 0401 	add.w	r4, ip, #1
  4097ba:	f8cd c01c 	str.w	ip, [sp, #28]
  4097be:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  4097c2:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  4097c6:	a81e      	add	r0, sp, #120	; 0x78
  4097c8:	2102      	movs	r1, #2
  4097ca:	f8cd c010 	str.w	ip, [sp, #16]
  4097ce:	463a      	mov	r2, r7
  4097d0:	9003      	str	r0, [sp, #12]
  4097d2:	462b      	mov	r3, r5
  4097d4:	9401      	str	r4, [sp, #4]
  4097d6:	9100      	str	r1, [sp, #0]
  4097d8:	f8cd e008 	str.w	lr, [sp, #8]
  4097dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4097de:	f001 f937 	bl	40aa50 <_dtoa_r>
  4097e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4097e6:	900f      	str	r0, [sp, #60]	; 0x3c
  4097e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4097ea:	441c      	add	r4, r3
  4097ec:	e75b      	b.n	4096a6 <_svfprintf_r+0x1086>
  4097ee:	9809      	ldr	r0, [sp, #36]	; 0x24
  4097f0:	4649      	mov	r1, r9
  4097f2:	aa23      	add	r2, sp, #140	; 0x8c
  4097f4:	f003 fc04 	bl	40d000 <__ssprint_r>
  4097f8:	2800      	cmp	r0, #0
  4097fa:	f47e afd6 	bne.w	4087aa <_svfprintf_r+0x18a>
  4097fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409800:	46c3      	mov	fp, r8
  409802:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409804:	9812      	ldr	r0, [sp, #72]	; 0x48
  409806:	3301      	adds	r3, #1
  409808:	eb02 0c00 	add.w	ip, r2, r0
  40980c:	2b07      	cmp	r3, #7
  40980e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409810:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409814:	f8cb 2000 	str.w	r2, [fp]
  409818:	9324      	str	r3, [sp, #144]	; 0x90
  40981a:	f8cb 0004 	str.w	r0, [fp, #4]
  40981e:	f77f a8e8 	ble.w	4089f2 <_svfprintf_r+0x3d2>
  409822:	e446      	b.n	4090b2 <_svfprintf_r+0xa92>
  409824:	9510      	str	r5, [sp, #64]	; 0x40
  409826:	f7fe fdf9 	bl	40841c <strlen>
  40982a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40982e:	970c      	str	r7, [sp, #48]	; 0x30
  409830:	4604      	mov	r4, r0
  409832:	9511      	str	r5, [sp, #68]	; 0x44
  409834:	9307      	str	r3, [sp, #28]
  409836:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40983a:	f7ff b804 	b.w	408846 <_svfprintf_r+0x226>
  40983e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409840:	4fb7      	ldr	r7, [pc, #732]	; (409b20 <_svfprintf_r+0x1500>)
  409842:	f7ff b84b 	b.w	4088dc <_svfprintf_r+0x2bc>
  409846:	9809      	ldr	r0, [sp, #36]	; 0x24
  409848:	4649      	mov	r1, r9
  40984a:	aa23      	add	r2, sp, #140	; 0x8c
  40984c:	f003 fbd8 	bl	40d000 <__ssprint_r>
  409850:	2800      	cmp	r0, #0
  409852:	f47e afaa 	bne.w	4087aa <_svfprintf_r+0x18a>
  409856:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40985a:	46c3      	mov	fp, r8
  40985c:	e4a2      	b.n	4091a4 <_svfprintf_r+0xb84>
  40985e:	3301      	adds	r3, #1
  409860:	4422      	add	r2, r4
  409862:	f8cb 5000 	str.w	r5, [fp]
  409866:	2b07      	cmp	r3, #7
  409868:	9225      	str	r2, [sp, #148]	; 0x94
  40986a:	9324      	str	r3, [sp, #144]	; 0x90
  40986c:	f8cb 4004 	str.w	r4, [fp, #4]
  409870:	dcbd      	bgt.n	4097ee <_svfprintf_r+0x11ce>
  409872:	f10b 0b08 	add.w	fp, fp, #8
  409876:	e7c5      	b.n	409804 <_svfprintf_r+0x11e4>
  409878:	9809      	ldr	r0, [sp, #36]	; 0x24
  40987a:	4649      	mov	r1, r9
  40987c:	aa23      	add	r2, sp, #140	; 0x8c
  40987e:	f003 fbbf 	bl	40d000 <__ssprint_r>
  409882:	2800      	cmp	r0, #0
  409884:	f47e af91 	bne.w	4087aa <_svfprintf_r+0x18a>
  409888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40988a:	46c3      	mov	fp, r8
  40988c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40988e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  409892:	1ad3      	subs	r3, r2, r3
  409894:	e552      	b.n	40933c <_svfprintf_r+0xd1c>
  409896:	9809      	ldr	r0, [sp, #36]	; 0x24
  409898:	4649      	mov	r1, r9
  40989a:	aa23      	add	r2, sp, #140	; 0x8c
  40989c:	f003 fbb0 	bl	40d000 <__ssprint_r>
  4098a0:	2800      	cmp	r0, #0
  4098a2:	f47e af82 	bne.w	4087aa <_svfprintf_r+0x18a>
  4098a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4098a8:	46c3      	mov	fp, r8
  4098aa:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4098ae:	e52d      	b.n	40930c <_svfprintf_r+0xcec>
  4098b0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4098b2:	4649      	mov	r1, r9
  4098b4:	aa23      	add	r2, sp, #140	; 0x8c
  4098b6:	f003 fba3 	bl	40d000 <__ssprint_r>
  4098ba:	2800      	cmp	r0, #0
  4098bc:	f47e af75 	bne.w	4087aa <_svfprintf_r+0x18a>
  4098c0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4098c4:	46c3      	mov	fp, r8
  4098c6:	e516      	b.n	4092f6 <_svfprintf_r+0xcd6>
  4098c8:	2c06      	cmp	r4, #6
  4098ca:	970c      	str	r7, [sp, #48]	; 0x30
  4098cc:	9310      	str	r3, [sp, #64]	; 0x40
  4098ce:	461f      	mov	r7, r3
  4098d0:	bf28      	it	cs
  4098d2:	2406      	movcs	r4, #6
  4098d4:	9711      	str	r7, [sp, #68]	; 0x44
  4098d6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4098da:	9307      	str	r3, [sp, #28]
  4098dc:	4b91      	ldr	r3, [pc, #580]	; (409b24 <_svfprintf_r+0x1504>)
  4098de:	930f      	str	r3, [sp, #60]	; 0x3c
  4098e0:	f7fe bfb1 	b.w	408846 <_svfprintf_r+0x226>
  4098e4:	4f8e      	ldr	r7, [pc, #568]	; (409b20 <_svfprintf_r+0x1500>)
  4098e6:	f7ff b8b5 	b.w	408a54 <_svfprintf_r+0x434>
  4098ea:	232d      	movs	r3, #45	; 0x2d
  4098ec:	461f      	mov	r7, r3
  4098ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4098f2:	f7ff ba7a 	b.w	408dea <_svfprintf_r+0x7ca>
  4098f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4098f8:	272d      	movs	r7, #45	; 0x2d
  4098fa:	f8cd c01c 	str.w	ip, [sp, #28]
  4098fe:	9306      	str	r3, [sp, #24]
  409900:	2300      	movs	r3, #0
  409902:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409906:	9310      	str	r3, [sp, #64]	; 0x40
  409908:	f7fe bf9e 	b.w	408848 <_svfprintf_r+0x228>
  40990c:	2e65      	cmp	r6, #101	; 0x65
  40990e:	dd56      	ble.n	4099be <_svfprintf_r+0x139e>
  409910:	2e66      	cmp	r6, #102	; 0x66
  409912:	9311      	str	r3, [sp, #68]	; 0x44
  409914:	f47f aeef 	bne.w	4096f6 <_svfprintf_r+0x10d6>
  409918:	2b00      	cmp	r3, #0
  40991a:	f340 80d6 	ble.w	409aca <_svfprintf_r+0x14aa>
  40991e:	f1bc 0f00 	cmp.w	ip, #0
  409922:	f040 80c1 	bne.w	409aa8 <_svfprintf_r+0x1488>
  409926:	9b06      	ldr	r3, [sp, #24]
  409928:	07da      	lsls	r2, r3, #31
  40992a:	f100 80bd 	bmi.w	409aa8 <_svfprintf_r+0x1488>
  40992e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409930:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409934:	e6eb      	b.n	40970e <_svfprintf_r+0x10ee>
  409936:	2003      	movs	r0, #3
  409938:	a91d      	add	r1, sp, #116	; 0x74
  40993a:	463a      	mov	r2, r7
  40993c:	f8cd c004 	str.w	ip, [sp, #4]
  409940:	9000      	str	r0, [sp, #0]
  409942:	a81e      	add	r0, sp, #120	; 0x78
  409944:	9102      	str	r1, [sp, #8]
  409946:	a921      	add	r1, sp, #132	; 0x84
  409948:	462b      	mov	r3, r5
  40994a:	9003      	str	r0, [sp, #12]
  40994c:	9104      	str	r1, [sp, #16]
  40994e:	9809      	ldr	r0, [sp, #36]	; 0x24
  409950:	f8cd c01c 	str.w	ip, [sp, #28]
  409954:	f001 f87c 	bl	40aa50 <_dtoa_r>
  409958:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40995c:	4602      	mov	r2, r0
  40995e:	7803      	ldrb	r3, [r0, #0]
  409960:	4462      	add	r2, ip
  409962:	900f      	str	r0, [sp, #60]	; 0x3c
  409964:	2b30      	cmp	r3, #48	; 0x30
  409966:	9207      	str	r2, [sp, #28]
  409968:	f040 808b 	bne.w	409a82 <_svfprintf_r+0x1462>
  40996c:	4638      	mov	r0, r7
  40996e:	2200      	movs	r2, #0
  409970:	2300      	movs	r3, #0
  409972:	4629      	mov	r1, r5
  409974:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  409978:	f04f 0401 	mov.w	r4, #1
  40997c:	f7fd ff9e 	bl	4078bc <__aeabi_dcmpeq>
  409980:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  409984:	b108      	cbz	r0, 40998a <_svfprintf_r+0x136a>
  409986:	f04f 0400 	mov.w	r4, #0
  40998a:	f014 0fff 	tst.w	r4, #255	; 0xff
  40998e:	d078      	beq.n	409a82 <_svfprintf_r+0x1462>
  409990:	f1cc 0401 	rsb	r4, ip, #1
  409994:	941d      	str	r4, [sp, #116]	; 0x74
  409996:	9b07      	ldr	r3, [sp, #28]
  409998:	4423      	add	r3, r4
  40999a:	461c      	mov	r4, r3
  40999c:	e683      	b.n	4096a6 <_svfprintf_r+0x1086>
  40999e:	4d62      	ldr	r5, [pc, #392]	; (409b28 <_svfprintf_r+0x1508>)
  4099a0:	f7ff bb2a 	b.w	408ff8 <_svfprintf_r+0x9d8>
  4099a4:	4623      	mov	r3, r4
  4099a6:	e695      	b.n	4096d4 <_svfprintf_r+0x10b4>
  4099a8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4099ac:	970c      	str	r7, [sp, #48]	; 0x30
  4099ae:	9010      	str	r0, [sp, #64]	; 0x40
  4099b0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4099b4:	9307      	str	r3, [sp, #28]
  4099b6:	9011      	str	r0, [sp, #68]	; 0x44
  4099b8:	f7fe bf45 	b.w	408846 <_svfprintf_r+0x226>
  4099bc:	3e02      	subs	r6, #2
  4099be:	3b01      	subs	r3, #1
  4099c0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  4099c4:	2b00      	cmp	r3, #0
  4099c6:	931d      	str	r3, [sp, #116]	; 0x74
  4099c8:	db75      	blt.n	409ab6 <_svfprintf_r+0x1496>
  4099ca:	222b      	movs	r2, #43	; 0x2b
  4099cc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  4099d0:	2b09      	cmp	r3, #9
  4099d2:	dd61      	ble.n	409a98 <_svfprintf_r+0x1478>
  4099d4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  4099d8:	4601      	mov	r1, r0
  4099da:	4a54      	ldr	r2, [pc, #336]	; (409b2c <_svfprintf_r+0x150c>)
  4099dc:	fb82 2403 	smull	r2, r4, r2, r3
  4099e0:	17da      	asrs	r2, r3, #31
  4099e2:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  4099e6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4099ea:	2c09      	cmp	r4, #9
  4099ec:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4099f0:	4623      	mov	r3, r4
  4099f2:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4099f6:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4099fa:	dcee      	bgt.n	4099da <_svfprintf_r+0x13ba>
  4099fc:	3330      	adds	r3, #48	; 0x30
  4099fe:	460a      	mov	r2, r1
  409a00:	b2db      	uxtb	r3, r3
  409a02:	f802 3d01 	strb.w	r3, [r2, #-1]!
  409a06:	4290      	cmp	r0, r2
  409a08:	d97e      	bls.n	409b08 <_svfprintf_r+0x14e8>
  409a0a:	460a      	mov	r2, r1
  409a0c:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  409a10:	e001      	b.n	409a16 <_svfprintf_r+0x13f6>
  409a12:	f812 3b01 	ldrb.w	r3, [r2], #1
  409a16:	4282      	cmp	r2, r0
  409a18:	f804 3b01 	strb.w	r3, [r4], #1
  409a1c:	d1f9      	bne.n	409a12 <_svfprintf_r+0x13f2>
  409a1e:	ab23      	add	r3, sp, #140	; 0x8c
  409a20:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409a24:	1a5b      	subs	r3, r3, r1
  409a26:	4413      	add	r3, r2
  409a28:	aa1f      	add	r2, sp, #124	; 0x7c
  409a2a:	1a9b      	subs	r3, r3, r2
  409a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409a2e:	2a01      	cmp	r2, #1
  409a30:	9319      	str	r3, [sp, #100]	; 0x64
  409a32:	eb02 0403 	add.w	r4, r2, r3
  409a36:	dd43      	ble.n	409ac0 <_svfprintf_r+0x14a0>
  409a38:	3401      	adds	r4, #1
  409a3a:	2300      	movs	r3, #0
  409a3c:	9311      	str	r3, [sp, #68]	; 0x44
  409a3e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409a42:	e664      	b.n	40970e <_svfprintf_r+0x10ee>
  409a44:	9809      	ldr	r0, [sp, #36]	; 0x24
  409a46:	4649      	mov	r1, r9
  409a48:	aa23      	add	r2, sp, #140	; 0x8c
  409a4a:	f003 fad9 	bl	40d000 <__ssprint_r>
  409a4e:	2800      	cmp	r0, #0
  409a50:	f47e aeab 	bne.w	4087aa <_svfprintf_r+0x18a>
  409a54:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  409a56:	46c3      	mov	fp, r8
  409a58:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409a5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a5c:	e5a8      	b.n	4095b0 <_svfprintf_r+0xf90>
  409a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409a60:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  409a62:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  409a66:	232d      	movs	r3, #45	; 0x2d
  409a68:	930d      	str	r3, [sp, #52]	; 0x34
  409a6a:	e69c      	b.n	4097a6 <_svfprintf_r+0x1186>
  409a6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409a6e:	2b00      	cmp	r3, #0
  409a70:	dd35      	ble.n	409ade <_svfprintf_r+0x14be>
  409a72:	2401      	movs	r4, #1
  409a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409a76:	441c      	add	r4, r3
  409a78:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409a7c:	e647      	b.n	40970e <_svfprintf_r+0x10ee>
  409a7e:	4d2a      	ldr	r5, [pc, #168]	; (409b28 <_svfprintf_r+0x1508>)
  409a80:	e413      	b.n	4092aa <_svfprintf_r+0xc8a>
  409a82:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  409a84:	e787      	b.n	409996 <_svfprintf_r+0x1376>
  409a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409a88:	e624      	b.n	4096d4 <_svfprintf_r+0x10b4>
  409a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409a8c:	1c5c      	adds	r4, r3, #1
  409a8e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409a92:	e63c      	b.n	40970e <_svfprintf_r+0x10ee>
  409a94:	4d24      	ldr	r5, [pc, #144]	; (409b28 <_svfprintf_r+0x1508>)
  409a96:	e420      	b.n	4092da <_svfprintf_r+0xcba>
  409a98:	3330      	adds	r3, #48	; 0x30
  409a9a:	2230      	movs	r2, #48	; 0x30
  409a9c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  409aa0:	ab20      	add	r3, sp, #128	; 0x80
  409aa2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  409aa6:	e7bf      	b.n	409a28 <_svfprintf_r+0x1408>
  409aa8:	f10c 0401 	add.w	r4, ip, #1
  409aac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409aae:	441c      	add	r4, r3
  409ab0:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409ab4:	e62b      	b.n	40970e <_svfprintf_r+0x10ee>
  409ab6:	222d      	movs	r2, #45	; 0x2d
  409ab8:	425b      	negs	r3, r3
  409aba:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  409abe:	e787      	b.n	4099d0 <_svfprintf_r+0x13b0>
  409ac0:	9b06      	ldr	r3, [sp, #24]
  409ac2:	f013 0301 	ands.w	r3, r3, #1
  409ac6:	d0b9      	beq.n	409a3c <_svfprintf_r+0x141c>
  409ac8:	e7b6      	b.n	409a38 <_svfprintf_r+0x1418>
  409aca:	f1bc 0f00 	cmp.w	ip, #0
  409ace:	d109      	bne.n	409ae4 <_svfprintf_r+0x14c4>
  409ad0:	9b06      	ldr	r3, [sp, #24]
  409ad2:	07db      	lsls	r3, r3, #31
  409ad4:	d406      	bmi.n	409ae4 <_svfprintf_r+0x14c4>
  409ad6:	f04f 0c01 	mov.w	ip, #1
  409ada:	4664      	mov	r4, ip
  409adc:	e617      	b.n	40970e <_svfprintf_r+0x10ee>
  409ade:	f1c3 0402 	rsb	r4, r3, #2
  409ae2:	e7c7      	b.n	409a74 <_svfprintf_r+0x1454>
  409ae4:	f10c 0402 	add.w	r4, ip, #2
  409ae8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409aec:	e60f      	b.n	40970e <_svfprintf_r+0x10ee>
  409aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  409af0:	785e      	ldrb	r6, [r3, #1]
  409af2:	4628      	mov	r0, r5
  409af4:	682c      	ldr	r4, [r5, #0]
  409af6:	3004      	adds	r0, #4
  409af8:	2c00      	cmp	r4, #0
  409afa:	900c      	str	r0, [sp, #48]	; 0x30
  409afc:	f6be ade5 	bge.w	4086ca <_svfprintf_r+0xaa>
  409b00:	f04f 34ff 	mov.w	r4, #4294967295
  409b04:	f7fe bde1 	b.w	4086ca <_svfprintf_r+0xaa>
  409b08:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  409b0c:	e78c      	b.n	409a28 <_svfprintf_r+0x1408>
  409b0e:	230c      	movs	r3, #12
  409b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409b12:	f04f 30ff 	mov.w	r0, #4294967295
  409b16:	6013      	str	r3, [r2, #0]
  409b18:	f7fe be50 	b.w	4087bc <_svfprintf_r+0x19c>
  409b1c:	4664      	mov	r4, ip
  409b1e:	e663      	b.n	4097e8 <_svfprintf_r+0x11c8>
  409b20:	0040e4a8 	.word	0x0040e4a8
  409b24:	0040e4f0 	.word	0x0040e4f0
  409b28:	0040e498 	.word	0x0040e498
  409b2c:	66666667 	.word	0x66666667

00409b30 <__sprint_r.part.0>:
  409b30:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  409b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409b36:	049c      	lsls	r4, r3, #18
  409b38:	460f      	mov	r7, r1
  409b3a:	4692      	mov	sl, r2
  409b3c:	d52a      	bpl.n	409b94 <__sprint_r.part.0+0x64>
  409b3e:	6893      	ldr	r3, [r2, #8]
  409b40:	6812      	ldr	r2, [r2, #0]
  409b42:	b32b      	cbz	r3, 409b90 <__sprint_r.part.0+0x60>
  409b44:	4680      	mov	r8, r0
  409b46:	f102 0908 	add.w	r9, r2, #8
  409b4a:	e919 0060 	ldmdb	r9, {r5, r6}
  409b4e:	08b6      	lsrs	r6, r6, #2
  409b50:	d016      	beq.n	409b80 <__sprint_r.part.0+0x50>
  409b52:	3d04      	subs	r5, #4
  409b54:	2400      	movs	r4, #0
  409b56:	e001      	b.n	409b5c <__sprint_r.part.0+0x2c>
  409b58:	42a6      	cmp	r6, r4
  409b5a:	d00f      	beq.n	409b7c <__sprint_r.part.0+0x4c>
  409b5c:	4640      	mov	r0, r8
  409b5e:	f855 1f04 	ldr.w	r1, [r5, #4]!
  409b62:	463a      	mov	r2, r7
  409b64:	3401      	adds	r4, #1
  409b66:	f002 f89d 	bl	40bca4 <_fputwc_r>
  409b6a:	1c43      	adds	r3, r0, #1
  409b6c:	d1f4      	bne.n	409b58 <__sprint_r.part.0+0x28>
  409b6e:	2300      	movs	r3, #0
  409b70:	f8ca 3008 	str.w	r3, [sl, #8]
  409b74:	f8ca 3004 	str.w	r3, [sl, #4]
  409b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409b7c:	f8da 3008 	ldr.w	r3, [sl, #8]
  409b80:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  409b84:	f109 0908 	add.w	r9, r9, #8
  409b88:	f8ca 3008 	str.w	r3, [sl, #8]
  409b8c:	2b00      	cmp	r3, #0
  409b8e:	d1dc      	bne.n	409b4a <__sprint_r.part.0+0x1a>
  409b90:	2000      	movs	r0, #0
  409b92:	e7ec      	b.n	409b6e <__sprint_r.part.0+0x3e>
  409b94:	f002 f9be 	bl	40bf14 <__sfvwrite_r>
  409b98:	2300      	movs	r3, #0
  409b9a:	f8ca 3008 	str.w	r3, [sl, #8]
  409b9e:	f8ca 3004 	str.w	r3, [sl, #4]
  409ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ba6:	bf00      	nop

00409ba8 <_vfiprintf_r>:
  409ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409bac:	461c      	mov	r4, r3
  409bae:	b0ad      	sub	sp, #180	; 0xb4
  409bb0:	4692      	mov	sl, r2
  409bb2:	9101      	str	r1, [sp, #4]
  409bb4:	9002      	str	r0, [sp, #8]
  409bb6:	9406      	str	r4, [sp, #24]
  409bb8:	b118      	cbz	r0, 409bc2 <_vfiprintf_r+0x1a>
  409bba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409bbc:	2b00      	cmp	r3, #0
  409bbe:	f000 80de 	beq.w	409d7e <_vfiprintf_r+0x1d6>
  409bc2:	9b01      	ldr	r3, [sp, #4]
  409bc4:	8999      	ldrh	r1, [r3, #12]
  409bc6:	b28a      	uxth	r2, r1
  409bc8:	0490      	lsls	r0, r2, #18
  409bca:	d408      	bmi.n	409bde <_vfiprintf_r+0x36>
  409bcc:	461d      	mov	r5, r3
  409bce:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  409bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  409bd4:	b28a      	uxth	r2, r1
  409bd6:	81a9      	strh	r1, [r5, #12]
  409bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409bdc:	666b      	str	r3, [r5, #100]	; 0x64
  409bde:	0711      	lsls	r1, r2, #28
  409be0:	f140 80ad 	bpl.w	409d3e <_vfiprintf_r+0x196>
  409be4:	9b01      	ldr	r3, [sp, #4]
  409be6:	691b      	ldr	r3, [r3, #16]
  409be8:	2b00      	cmp	r3, #0
  409bea:	f000 80a8 	beq.w	409d3e <_vfiprintf_r+0x196>
  409bee:	f002 021a 	and.w	r2, r2, #26
  409bf2:	2a0a      	cmp	r2, #10
  409bf4:	f000 80af 	beq.w	409d56 <_vfiprintf_r+0x1ae>
  409bf8:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  409bfc:	2300      	movs	r3, #0
  409bfe:	465c      	mov	r4, fp
  409c00:	930a      	str	r3, [sp, #40]	; 0x28
  409c02:	9311      	str	r3, [sp, #68]	; 0x44
  409c04:	9303      	str	r3, [sp, #12]
  409c06:	9310      	str	r3, [sp, #64]	; 0x40
  409c08:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  409c0c:	f89a 3000 	ldrb.w	r3, [sl]
  409c10:	4655      	mov	r5, sl
  409c12:	2b25      	cmp	r3, #37	; 0x25
  409c14:	d01c      	beq.n	409c50 <_vfiprintf_r+0xa8>
  409c16:	b90b      	cbnz	r3, 409c1c <_vfiprintf_r+0x74>
  409c18:	e01a      	b.n	409c50 <_vfiprintf_r+0xa8>
  409c1a:	b11b      	cbz	r3, 409c24 <_vfiprintf_r+0x7c>
  409c1c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  409c20:	2b25      	cmp	r3, #37	; 0x25
  409c22:	d1fa      	bne.n	409c1a <_vfiprintf_r+0x72>
  409c24:	ebb5 060a 	subs.w	r6, r5, sl
  409c28:	d012      	beq.n	409c50 <_vfiprintf_r+0xa8>
  409c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409c2e:	3301      	adds	r3, #1
  409c30:	f8c4 a000 	str.w	sl, [r4]
  409c34:	4432      	add	r2, r6
  409c36:	6066      	str	r6, [r4, #4]
  409c38:	2b07      	cmp	r3, #7
  409c3a:	9310      	str	r3, [sp, #64]	; 0x40
  409c3c:	9211      	str	r2, [sp, #68]	; 0x44
  409c3e:	dd79      	ble.n	409d34 <_vfiprintf_r+0x18c>
  409c40:	2a00      	cmp	r2, #0
  409c42:	f040 84a5 	bne.w	40a590 <_vfiprintf_r+0x9e8>
  409c46:	9b03      	ldr	r3, [sp, #12]
  409c48:	465c      	mov	r4, fp
  409c4a:	9210      	str	r2, [sp, #64]	; 0x40
  409c4c:	4433      	add	r3, r6
  409c4e:	9303      	str	r3, [sp, #12]
  409c50:	782b      	ldrb	r3, [r5, #0]
  409c52:	2b00      	cmp	r3, #0
  409c54:	f000 833a 	beq.w	40a2cc <_vfiprintf_r+0x724>
  409c58:	2100      	movs	r1, #0
  409c5a:	f04f 0300 	mov.w	r3, #0
  409c5e:	f04f 38ff 	mov.w	r8, #4294967295
  409c62:	1c68      	adds	r0, r5, #1
  409c64:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  409c68:	4689      	mov	r9, r1
  409c6a:	786b      	ldrb	r3, [r5, #1]
  409c6c:	4646      	mov	r6, r8
  409c6e:	460d      	mov	r5, r1
  409c70:	f100 0a01 	add.w	sl, r0, #1
  409c74:	f1a3 0220 	sub.w	r2, r3, #32
  409c78:	2a58      	cmp	r2, #88	; 0x58
  409c7a:	f200 8301 	bhi.w	40a280 <_vfiprintf_r+0x6d8>
  409c7e:	e8df f012 	tbh	[pc, r2, lsl #1]
  409c82:	0247      	.short	0x0247
  409c84:	02ff02ff 	.word	0x02ff02ff
  409c88:	02ff0255 	.word	0x02ff0255
  409c8c:	02ff02ff 	.word	0x02ff02ff
  409c90:	02ff02ff 	.word	0x02ff02ff
  409c94:	025b02ff 	.word	0x025b02ff
  409c98:	02ff0268 	.word	0x02ff0268
  409c9c:	01ba0181 	.word	0x01ba0181
  409ca0:	028702ff 	.word	0x028702ff
  409ca4:	028d028d 	.word	0x028d028d
  409ca8:	028d028d 	.word	0x028d028d
  409cac:	028d028d 	.word	0x028d028d
  409cb0:	028d028d 	.word	0x028d028d
  409cb4:	02ff028d 	.word	0x02ff028d
  409cb8:	02ff02ff 	.word	0x02ff02ff
  409cbc:	02ff02ff 	.word	0x02ff02ff
  409cc0:	02ff02ff 	.word	0x02ff02ff
  409cc4:	02ff02ff 	.word	0x02ff02ff
  409cc8:	029b02ff 	.word	0x029b02ff
  409ccc:	02ff02ff 	.word	0x02ff02ff
  409cd0:	02ff02ff 	.word	0x02ff02ff
  409cd4:	02ff02ff 	.word	0x02ff02ff
  409cd8:	02ff02ff 	.word	0x02ff02ff
  409cdc:	02ff02ff 	.word	0x02ff02ff
  409ce0:	02ff02b6 	.word	0x02ff02b6
  409ce4:	02ff02ff 	.word	0x02ff02ff
  409ce8:	02ff02ff 	.word	0x02ff02ff
  409cec:	02ff02ce 	.word	0x02ff02ce
  409cf0:	02e602ff 	.word	0x02e602ff
  409cf4:	02ff02ff 	.word	0x02ff02ff
  409cf8:	02ff02ff 	.word	0x02ff02ff
  409cfc:	02ff02ff 	.word	0x02ff02ff
  409d00:	02ff02ff 	.word	0x02ff02ff
  409d04:	02ff02ff 	.word	0x02ff02ff
  409d08:	022b0219 	.word	0x022b0219
  409d0c:	02ff02ff 	.word	0x02ff02ff
  409d10:	021302ff 	.word	0x021302ff
  409d14:	02ff022b 	.word	0x02ff022b
  409d18:	01f902ff 	.word	0x01f902ff
  409d1c:	020202ff 	.word	0x020202ff
  409d20:	026d0187 	.word	0x026d0187
  409d24:	02ff0281 	.word	0x02ff0281
  409d28:	02ff0198 	.word	0x02ff0198
  409d2c:	02ff0081 	.word	0x02ff0081
  409d30:	01d502ff 	.word	0x01d502ff
  409d34:	3408      	adds	r4, #8
  409d36:	9b03      	ldr	r3, [sp, #12]
  409d38:	4433      	add	r3, r6
  409d3a:	9303      	str	r3, [sp, #12]
  409d3c:	e788      	b.n	409c50 <_vfiprintf_r+0xa8>
  409d3e:	9802      	ldr	r0, [sp, #8]
  409d40:	9901      	ldr	r1, [sp, #4]
  409d42:	f000 fd6b 	bl	40a81c <__swsetup_r>
  409d46:	b9a8      	cbnz	r0, 409d74 <_vfiprintf_r+0x1cc>
  409d48:	9b01      	ldr	r3, [sp, #4]
  409d4a:	899a      	ldrh	r2, [r3, #12]
  409d4c:	f002 021a 	and.w	r2, r2, #26
  409d50:	2a0a      	cmp	r2, #10
  409d52:	f47f af51 	bne.w	409bf8 <_vfiprintf_r+0x50>
  409d56:	9b01      	ldr	r3, [sp, #4]
  409d58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  409d5c:	2b00      	cmp	r3, #0
  409d5e:	f6ff af4b 	blt.w	409bf8 <_vfiprintf_r+0x50>
  409d62:	9901      	ldr	r1, [sp, #4]
  409d64:	4652      	mov	r2, sl
  409d66:	4623      	mov	r3, r4
  409d68:	9802      	ldr	r0, [sp, #8]
  409d6a:	f000 fd17 	bl	40a79c <__sbprintf>
  409d6e:	b02d      	add	sp, #180	; 0xb4
  409d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d74:	f04f 30ff 	mov.w	r0, #4294967295
  409d78:	b02d      	add	sp, #180	; 0xb4
  409d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d7e:	f001 ff19 	bl	40bbb4 <__sinit>
  409d82:	e71e      	b.n	409bc2 <_vfiprintf_r+0x1a>
  409d84:	f019 0f20 	tst.w	r9, #32
  409d88:	9505      	str	r5, [sp, #20]
  409d8a:	46b0      	mov	r8, r6
  409d8c:	9a06      	ldr	r2, [sp, #24]
  409d8e:	f000 824f 	beq.w	40a230 <_vfiprintf_r+0x688>
  409d92:	3207      	adds	r2, #7
  409d94:	2301      	movs	r3, #1
  409d96:	f022 0207 	bic.w	r2, r2, #7
  409d9a:	f102 0108 	add.w	r1, r2, #8
  409d9e:	e9d2 6700 	ldrd	r6, r7, [r2]
  409da2:	9106      	str	r1, [sp, #24]
  409da4:	f04f 0200 	mov.w	r2, #0
  409da8:	2500      	movs	r5, #0
  409daa:	f8cd 8010 	str.w	r8, [sp, #16]
  409dae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  409db2:	f1b8 0f00 	cmp.w	r8, #0
  409db6:	db01      	blt.n	409dbc <_vfiprintf_r+0x214>
  409db8:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  409dbc:	f1b8 0f00 	cmp.w	r8, #0
  409dc0:	f040 8294 	bne.w	40a2ec <_vfiprintf_r+0x744>
  409dc4:	ea56 0207 	orrs.w	r2, r6, r7
  409dc8:	bf14      	ite	ne
  409dca:	2201      	movne	r2, #1
  409dcc:	2200      	moveq	r2, #0
  409dce:	2a00      	cmp	r2, #0
  409dd0:	f040 828c 	bne.w	40a2ec <_vfiprintf_r+0x744>
  409dd4:	2b00      	cmp	r3, #0
  409dd6:	f040 8372 	bne.w	40a4be <_vfiprintf_r+0x916>
  409dda:	f019 0f01 	tst.w	r9, #1
  409dde:	f000 83a3 	beq.w	40a528 <_vfiprintf_r+0x980>
  409de2:	ab2c      	add	r3, sp, #176	; 0xb0
  409de4:	2230      	movs	r2, #48	; 0x30
  409de6:	f803 2d41 	strb.w	r2, [r3, #-65]!
  409dea:	ebc3 080b 	rsb	r8, r3, fp
  409dee:	9308      	str	r3, [sp, #32]
  409df0:	9b04      	ldr	r3, [sp, #16]
  409df2:	4543      	cmp	r3, r8
  409df4:	bfb8      	it	lt
  409df6:	4643      	movlt	r3, r8
  409df8:	461f      	mov	r7, r3
  409dfa:	b105      	cbz	r5, 409dfe <_vfiprintf_r+0x256>
  409dfc:	3701      	adds	r7, #1
  409dfe:	f019 0c02 	ands.w	ip, r9, #2
  409e02:	d000      	beq.n	409e06 <_vfiprintf_r+0x25e>
  409e04:	3702      	adds	r7, #2
  409e06:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  409e0a:	9307      	str	r3, [sp, #28]
  409e0c:	f040 8247 	bne.w	40a29e <_vfiprintf_r+0x6f6>
  409e10:	9b05      	ldr	r3, [sp, #20]
  409e12:	1bdd      	subs	r5, r3, r7
  409e14:	2d00      	cmp	r5, #0
  409e16:	f340 8242 	ble.w	40a29e <_vfiprintf_r+0x6f6>
  409e1a:	2d10      	cmp	r5, #16
  409e1c:	f340 848b 	ble.w	40a736 <_vfiprintf_r+0xb8e>
  409e20:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  409e24:	2310      	movs	r3, #16
  409e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409e28:	4ebd      	ldr	r6, [pc, #756]	; (40a120 <_vfiprintf_r+0x578>)
  409e2a:	4671      	mov	r1, lr
  409e2c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  409e30:	e006      	b.n	409e40 <_vfiprintf_r+0x298>
  409e32:	4611      	mov	r1, r2
  409e34:	f04f 0e01 	mov.w	lr, #1
  409e38:	465c      	mov	r4, fp
  409e3a:	3d10      	subs	r5, #16
  409e3c:	2d10      	cmp	r5, #16
  409e3e:	dd20      	ble.n	409e82 <_vfiprintf_r+0x2da>
  409e40:	1c48      	adds	r0, r1, #1
  409e42:	3210      	adds	r2, #16
  409e44:	6026      	str	r6, [r4, #0]
  409e46:	f101 0e02 	add.w	lr, r1, #2
  409e4a:	2807      	cmp	r0, #7
  409e4c:	6063      	str	r3, [r4, #4]
  409e4e:	9211      	str	r2, [sp, #68]	; 0x44
  409e50:	4601      	mov	r1, r0
  409e52:	f104 0408 	add.w	r4, r4, #8
  409e56:	9010      	str	r0, [sp, #64]	; 0x40
  409e58:	ddef      	ble.n	409e3a <_vfiprintf_r+0x292>
  409e5a:	2a00      	cmp	r2, #0
  409e5c:	d0e9      	beq.n	409e32 <_vfiprintf_r+0x28a>
  409e5e:	9802      	ldr	r0, [sp, #8]
  409e60:	aa0f      	add	r2, sp, #60	; 0x3c
  409e62:	9901      	ldr	r1, [sp, #4]
  409e64:	465c      	mov	r4, fp
  409e66:	9309      	str	r3, [sp, #36]	; 0x24
  409e68:	f7ff fe62 	bl	409b30 <__sprint_r.part.0>
  409e6c:	2800      	cmp	r0, #0
  409e6e:	f040 8234 	bne.w	40a2da <_vfiprintf_r+0x732>
  409e72:	3d10      	subs	r5, #16
  409e74:	9910      	ldr	r1, [sp, #64]	; 0x40
  409e76:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409e78:	2d10      	cmp	r5, #16
  409e7a:	f101 0e01 	add.w	lr, r1, #1
  409e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409e80:	dcde      	bgt.n	409e40 <_vfiprintf_r+0x298>
  409e82:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  409e86:	4671      	mov	r1, lr
  409e88:	442a      	add	r2, r5
  409e8a:	2907      	cmp	r1, #7
  409e8c:	6026      	str	r6, [r4, #0]
  409e8e:	6065      	str	r5, [r4, #4]
  409e90:	9211      	str	r2, [sp, #68]	; 0x44
  409e92:	9110      	str	r1, [sp, #64]	; 0x40
  409e94:	f300 8330 	bgt.w	40a4f8 <_vfiprintf_r+0x950>
  409e98:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  409e9c:	3408      	adds	r4, #8
  409e9e:	1c48      	adds	r0, r1, #1
  409ea0:	2b00      	cmp	r3, #0
  409ea2:	f040 8204 	bne.w	40a2ae <_vfiprintf_r+0x706>
  409ea6:	f1bc 0f00 	cmp.w	ip, #0
  409eaa:	d00c      	beq.n	409ec6 <_vfiprintf_r+0x31e>
  409eac:	3202      	adds	r2, #2
  409eae:	a90e      	add	r1, sp, #56	; 0x38
  409eb0:	2302      	movs	r3, #2
  409eb2:	2807      	cmp	r0, #7
  409eb4:	9010      	str	r0, [sp, #64]	; 0x40
  409eb6:	9211      	str	r2, [sp, #68]	; 0x44
  409eb8:	e884 000a 	stmia.w	r4, {r1, r3}
  409ebc:	f300 82f8 	bgt.w	40a4b0 <_vfiprintf_r+0x908>
  409ec0:	4601      	mov	r1, r0
  409ec2:	3408      	adds	r4, #8
  409ec4:	3001      	adds	r0, #1
  409ec6:	9b07      	ldr	r3, [sp, #28]
  409ec8:	2b80      	cmp	r3, #128	; 0x80
  409eca:	f000 8298 	beq.w	40a3fe <_vfiprintf_r+0x856>
  409ece:	9b04      	ldr	r3, [sp, #16]
  409ed0:	ebc8 0503 	rsb	r5, r8, r3
  409ed4:	2d00      	cmp	r5, #0
  409ed6:	dd38      	ble.n	409f4a <_vfiprintf_r+0x3a2>
  409ed8:	2d10      	cmp	r5, #16
  409eda:	4e92      	ldr	r6, [pc, #584]	; (40a124 <_vfiprintf_r+0x57c>)
  409edc:	bfc8      	it	gt
  409ede:	2310      	movgt	r3, #16
  409ee0:	dc07      	bgt.n	409ef2 <_vfiprintf_r+0x34a>
  409ee2:	e028      	b.n	409f36 <_vfiprintf_r+0x38e>
  409ee4:	f04f 0e01 	mov.w	lr, #1
  409ee8:	4611      	mov	r1, r2
  409eea:	465c      	mov	r4, fp
  409eec:	3d10      	subs	r5, #16
  409eee:	2d10      	cmp	r5, #16
  409ef0:	dd20      	ble.n	409f34 <_vfiprintf_r+0x38c>
  409ef2:	1c48      	adds	r0, r1, #1
  409ef4:	3210      	adds	r2, #16
  409ef6:	6026      	str	r6, [r4, #0]
  409ef8:	f101 0e02 	add.w	lr, r1, #2
  409efc:	2807      	cmp	r0, #7
  409efe:	6063      	str	r3, [r4, #4]
  409f00:	9211      	str	r2, [sp, #68]	; 0x44
  409f02:	4601      	mov	r1, r0
  409f04:	f104 0408 	add.w	r4, r4, #8
  409f08:	9010      	str	r0, [sp, #64]	; 0x40
  409f0a:	ddef      	ble.n	409eec <_vfiprintf_r+0x344>
  409f0c:	2a00      	cmp	r2, #0
  409f0e:	d0e9      	beq.n	409ee4 <_vfiprintf_r+0x33c>
  409f10:	9802      	ldr	r0, [sp, #8]
  409f12:	aa0f      	add	r2, sp, #60	; 0x3c
  409f14:	9901      	ldr	r1, [sp, #4]
  409f16:	465c      	mov	r4, fp
  409f18:	9304      	str	r3, [sp, #16]
  409f1a:	f7ff fe09 	bl	409b30 <__sprint_r.part.0>
  409f1e:	2800      	cmp	r0, #0
  409f20:	f040 81db 	bne.w	40a2da <_vfiprintf_r+0x732>
  409f24:	3d10      	subs	r5, #16
  409f26:	9910      	ldr	r1, [sp, #64]	; 0x40
  409f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409f2a:	2d10      	cmp	r5, #16
  409f2c:	f101 0e01 	add.w	lr, r1, #1
  409f30:	9b04      	ldr	r3, [sp, #16]
  409f32:	dcde      	bgt.n	409ef2 <_vfiprintf_r+0x34a>
  409f34:	4670      	mov	r0, lr
  409f36:	442a      	add	r2, r5
  409f38:	2807      	cmp	r0, #7
  409f3a:	6026      	str	r6, [r4, #0]
  409f3c:	6065      	str	r5, [r4, #4]
  409f3e:	9211      	str	r2, [sp, #68]	; 0x44
  409f40:	9010      	str	r0, [sp, #64]	; 0x40
  409f42:	f300 81ef 	bgt.w	40a324 <_vfiprintf_r+0x77c>
  409f46:	3408      	adds	r4, #8
  409f48:	3001      	adds	r0, #1
  409f4a:	eb02 0308 	add.w	r3, r2, r8
  409f4e:	2807      	cmp	r0, #7
  409f50:	9a08      	ldr	r2, [sp, #32]
  409f52:	9311      	str	r3, [sp, #68]	; 0x44
  409f54:	9010      	str	r0, [sp, #64]	; 0x40
  409f56:	e884 0104 	stmia.w	r4, {r2, r8}
  409f5a:	f340 81f0 	ble.w	40a33e <_vfiprintf_r+0x796>
  409f5e:	2b00      	cmp	r3, #0
  409f60:	f040 82f2 	bne.w	40a548 <_vfiprintf_r+0x9a0>
  409f64:	f019 0f04 	tst.w	r9, #4
  409f68:	9310      	str	r3, [sp, #64]	; 0x40
  409f6a:	f040 82d6 	bne.w	40a51a <_vfiprintf_r+0x972>
  409f6e:	9b03      	ldr	r3, [sp, #12]
  409f70:	9a05      	ldr	r2, [sp, #20]
  409f72:	4297      	cmp	r7, r2
  409f74:	bfac      	ite	ge
  409f76:	19db      	addge	r3, r3, r7
  409f78:	189b      	addlt	r3, r3, r2
  409f7a:	9303      	str	r3, [sp, #12]
  409f7c:	2300      	movs	r3, #0
  409f7e:	465c      	mov	r4, fp
  409f80:	9310      	str	r3, [sp, #64]	; 0x40
  409f82:	e643      	b.n	409c0c <_vfiprintf_r+0x64>
  409f84:	4650      	mov	r0, sl
  409f86:	f049 0904 	orr.w	r9, r9, #4
  409f8a:	f89a 3000 	ldrb.w	r3, [sl]
  409f8e:	e66f      	b.n	409c70 <_vfiprintf_r+0xc8>
  409f90:	f019 0320 	ands.w	r3, r9, #32
  409f94:	9505      	str	r5, [sp, #20]
  409f96:	46b0      	mov	r8, r6
  409f98:	f000 8131 	beq.w	40a1fe <_vfiprintf_r+0x656>
  409f9c:	9a06      	ldr	r2, [sp, #24]
  409f9e:	2300      	movs	r3, #0
  409fa0:	3207      	adds	r2, #7
  409fa2:	f022 0207 	bic.w	r2, r2, #7
  409fa6:	f102 0108 	add.w	r1, r2, #8
  409faa:	e9d2 6700 	ldrd	r6, r7, [r2]
  409fae:	9106      	str	r1, [sp, #24]
  409fb0:	e6f8      	b.n	409da4 <_vfiprintf_r+0x1fc>
  409fb2:	9a06      	ldr	r2, [sp, #24]
  409fb4:	46b0      	mov	r8, r6
  409fb6:	9505      	str	r5, [sp, #20]
  409fb8:	6813      	ldr	r3, [r2, #0]
  409fba:	1d16      	adds	r6, r2, #4
  409fbc:	f04f 0200 	mov.w	r2, #0
  409fc0:	9308      	str	r3, [sp, #32]
  409fc2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  409fc6:	2b00      	cmp	r3, #0
  409fc8:	f000 83bb 	beq.w	40a742 <_vfiprintf_r+0xb9a>
  409fcc:	f1b8 0f00 	cmp.w	r8, #0
  409fd0:	f2c0 8398 	blt.w	40a704 <_vfiprintf_r+0xb5c>
  409fd4:	9d08      	ldr	r5, [sp, #32]
  409fd6:	2100      	movs	r1, #0
  409fd8:	4642      	mov	r2, r8
  409fda:	4628      	mov	r0, r5
  409fdc:	f002 f9d4 	bl	40c388 <memchr>
  409fe0:	2800      	cmp	r0, #0
  409fe2:	f000 83be 	beq.w	40a762 <_vfiprintf_r+0xbba>
  409fe6:	2300      	movs	r3, #0
  409fe8:	ebc5 0800 	rsb	r8, r5, r0
  409fec:	9606      	str	r6, [sp, #24]
  409fee:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409ff2:	9304      	str	r3, [sp, #16]
  409ff4:	e6fc      	b.n	409df0 <_vfiprintf_r+0x248>
  409ff6:	f89a 3000 	ldrb.w	r3, [sl]
  409ffa:	f10a 0001 	add.w	r0, sl, #1
  409ffe:	2b2a      	cmp	r3, #42	; 0x2a
  40a000:	f000 83b8 	beq.w	40a774 <_vfiprintf_r+0xbcc>
  40a004:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a008:	4682      	mov	sl, r0
  40a00a:	2600      	movs	r6, #0
  40a00c:	2a09      	cmp	r2, #9
  40a00e:	f63f ae31 	bhi.w	409c74 <_vfiprintf_r+0xcc>
  40a012:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40a016:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40a01a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40a01e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a022:	2a09      	cmp	r2, #9
  40a024:	d9f5      	bls.n	40a012 <_vfiprintf_r+0x46a>
  40a026:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40a02a:	e623      	b.n	409c74 <_vfiprintf_r+0xcc>
  40a02c:	4a3e      	ldr	r2, [pc, #248]	; (40a128 <_vfiprintf_r+0x580>)
  40a02e:	f019 0f20 	tst.w	r9, #32
  40a032:	9505      	str	r5, [sp, #20]
  40a034:	46b0      	mov	r8, r6
  40a036:	920a      	str	r2, [sp, #40]	; 0x28
  40a038:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a03c:	f000 8111 	beq.w	40a262 <_vfiprintf_r+0x6ba>
  40a040:	9a06      	ldr	r2, [sp, #24]
  40a042:	3207      	adds	r2, #7
  40a044:	f022 0207 	bic.w	r2, r2, #7
  40a048:	f102 0108 	add.w	r1, r2, #8
  40a04c:	e9d2 6700 	ldrd	r6, r7, [r2]
  40a050:	9106      	str	r1, [sp, #24]
  40a052:	f019 0f01 	tst.w	r9, #1
  40a056:	f000 824d 	beq.w	40a4f4 <_vfiprintf_r+0x94c>
  40a05a:	ea56 0207 	orrs.w	r2, r6, r7
  40a05e:	f000 8249 	beq.w	40a4f4 <_vfiprintf_r+0x94c>
  40a062:	2230      	movs	r2, #48	; 0x30
  40a064:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40a068:	f049 0902 	orr.w	r9, r9, #2
  40a06c:	2302      	movs	r3, #2
  40a06e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  40a072:	e697      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a074:	f89a 3000 	ldrb.w	r3, [sl]
  40a078:	2b6c      	cmp	r3, #108	; 0x6c
  40a07a:	f000 8337 	beq.w	40a6ec <_vfiprintf_r+0xb44>
  40a07e:	f049 0910 	orr.w	r9, r9, #16
  40a082:	4650      	mov	r0, sl
  40a084:	e5f4      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a086:	f019 0f20 	tst.w	r9, #32
  40a08a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a08e:	f000 8305 	beq.w	40a69c <_vfiprintf_r+0xaf4>
  40a092:	9903      	ldr	r1, [sp, #12]
  40a094:	9a06      	ldr	r2, [sp, #24]
  40a096:	17cf      	asrs	r7, r1, #31
  40a098:	4608      	mov	r0, r1
  40a09a:	6813      	ldr	r3, [r2, #0]
  40a09c:	3204      	adds	r2, #4
  40a09e:	4639      	mov	r1, r7
  40a0a0:	9206      	str	r2, [sp, #24]
  40a0a2:	e9c3 0100 	strd	r0, r1, [r3]
  40a0a6:	e5b1      	b.n	409c0c <_vfiprintf_r+0x64>
  40a0a8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  40a0ac:	f89a 3000 	ldrb.w	r3, [sl]
  40a0b0:	4650      	mov	r0, sl
  40a0b2:	e5dd      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a0b4:	9a06      	ldr	r2, [sp, #24]
  40a0b6:	2701      	movs	r7, #1
  40a0b8:	f04f 0100 	mov.w	r1, #0
  40a0bc:	9505      	str	r5, [sp, #20]
  40a0be:	6813      	ldr	r3, [r2, #0]
  40a0c0:	3204      	adds	r2, #4
  40a0c2:	46b8      	mov	r8, r7
  40a0c4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a0c8:	9206      	str	r2, [sp, #24]
  40a0ca:	aa12      	add	r2, sp, #72	; 0x48
  40a0cc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40a0d0:	9208      	str	r2, [sp, #32]
  40a0d2:	2300      	movs	r3, #0
  40a0d4:	9304      	str	r3, [sp, #16]
  40a0d6:	e692      	b.n	409dfe <_vfiprintf_r+0x256>
  40a0d8:	f019 0f20 	tst.w	r9, #32
  40a0dc:	9505      	str	r5, [sp, #20]
  40a0de:	46b0      	mov	r8, r6
  40a0e0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a0e4:	d071      	beq.n	40a1ca <_vfiprintf_r+0x622>
  40a0e6:	9906      	ldr	r1, [sp, #24]
  40a0e8:	3107      	adds	r1, #7
  40a0ea:	f021 0107 	bic.w	r1, r1, #7
  40a0ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a0f2:	3108      	adds	r1, #8
  40a0f4:	4616      	mov	r6, r2
  40a0f6:	461f      	mov	r7, r3
  40a0f8:	9106      	str	r1, [sp, #24]
  40a0fa:	2a00      	cmp	r2, #0
  40a0fc:	f173 0300 	sbcs.w	r3, r3, #0
  40a100:	f2c0 82b1 	blt.w	40a666 <_vfiprintf_r+0xabe>
  40a104:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a108:	2301      	movs	r3, #1
  40a10a:	f8cd 8010 	str.w	r8, [sp, #16]
  40a10e:	e650      	b.n	409db2 <_vfiprintf_r+0x20a>
  40a110:	f89a 3000 	ldrb.w	r3, [sl]
  40a114:	4650      	mov	r0, sl
  40a116:	2900      	cmp	r1, #0
  40a118:	f47f adaa 	bne.w	409c70 <_vfiprintf_r+0xc8>
  40a11c:	2120      	movs	r1, #32
  40a11e:	e5a7      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a120:	0040e50c 	.word	0x0040e50c
  40a124:	0040e4fc 	.word	0x0040e4fc
  40a128:	0040e4dc 	.word	0x0040e4dc
  40a12c:	f049 0901 	orr.w	r9, r9, #1
  40a130:	f89a 3000 	ldrb.w	r3, [sl]
  40a134:	4650      	mov	r0, sl
  40a136:	e59b      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a138:	9a06      	ldr	r2, [sp, #24]
  40a13a:	6815      	ldr	r5, [r2, #0]
  40a13c:	4613      	mov	r3, r2
  40a13e:	2d00      	cmp	r5, #0
  40a140:	f103 0304 	add.w	r3, r3, #4
  40a144:	f2c0 82da 	blt.w	40a6fc <_vfiprintf_r+0xb54>
  40a148:	9306      	str	r3, [sp, #24]
  40a14a:	4650      	mov	r0, sl
  40a14c:	f89a 3000 	ldrb.w	r3, [sl]
  40a150:	e58e      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a152:	f89a 3000 	ldrb.w	r3, [sl]
  40a156:	4650      	mov	r0, sl
  40a158:	212b      	movs	r1, #43	; 0x2b
  40a15a:	e589      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a15c:	9806      	ldr	r0, [sp, #24]
  40a15e:	2278      	movs	r2, #120	; 0x78
  40a160:	2330      	movs	r3, #48	; 0x30
  40a162:	46b0      	mov	r8, r6
  40a164:	4601      	mov	r1, r0
  40a166:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40a16a:	4aaa      	ldr	r2, [pc, #680]	; (40a414 <_vfiprintf_r+0x86c>)
  40a16c:	f049 0902 	orr.w	r9, r9, #2
  40a170:	3104      	adds	r1, #4
  40a172:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  40a176:	9505      	str	r5, [sp, #20]
  40a178:	2302      	movs	r3, #2
  40a17a:	6806      	ldr	r6, [r0, #0]
  40a17c:	2700      	movs	r7, #0
  40a17e:	9106      	str	r1, [sp, #24]
  40a180:	920a      	str	r2, [sp, #40]	; 0x28
  40a182:	e60f      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a184:	f049 0920 	orr.w	r9, r9, #32
  40a188:	f89a 3000 	ldrb.w	r3, [sl]
  40a18c:	4650      	mov	r0, sl
  40a18e:	e56f      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a190:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  40a194:	f89a 3000 	ldrb.w	r3, [sl]
  40a198:	4650      	mov	r0, sl
  40a19a:	e569      	b.n	409c70 <_vfiprintf_r+0xc8>
  40a19c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a1a0:	2500      	movs	r5, #0
  40a1a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40a1a6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40a1aa:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40a1ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40a1b2:	2a09      	cmp	r2, #9
  40a1b4:	d9f5      	bls.n	40a1a2 <_vfiprintf_r+0x5fa>
  40a1b6:	e55d      	b.n	409c74 <_vfiprintf_r+0xcc>
  40a1b8:	f049 0910 	orr.w	r9, r9, #16
  40a1bc:	9505      	str	r5, [sp, #20]
  40a1be:	46b0      	mov	r8, r6
  40a1c0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a1c4:	f019 0f20 	tst.w	r9, #32
  40a1c8:	d18d      	bne.n	40a0e6 <_vfiprintf_r+0x53e>
  40a1ca:	9a06      	ldr	r2, [sp, #24]
  40a1cc:	f019 0f10 	tst.w	r9, #16
  40a1d0:	4613      	mov	r3, r2
  40a1d2:	f040 81c4 	bne.w	40a55e <_vfiprintf_r+0x9b6>
  40a1d6:	f019 0f40 	tst.w	r9, #64	; 0x40
  40a1da:	f000 81c0 	beq.w	40a55e <_vfiprintf_r+0x9b6>
  40a1de:	f9b2 6000 	ldrsh.w	r6, [r2]
  40a1e2:	3304      	adds	r3, #4
  40a1e4:	17f7      	asrs	r7, r6, #31
  40a1e6:	9306      	str	r3, [sp, #24]
  40a1e8:	4632      	mov	r2, r6
  40a1ea:	463b      	mov	r3, r7
  40a1ec:	e785      	b.n	40a0fa <_vfiprintf_r+0x552>
  40a1ee:	f049 0910 	orr.w	r9, r9, #16
  40a1f2:	9505      	str	r5, [sp, #20]
  40a1f4:	46b0      	mov	r8, r6
  40a1f6:	f019 0320 	ands.w	r3, r9, #32
  40a1fa:	f47f aecf 	bne.w	409f9c <_vfiprintf_r+0x3f4>
  40a1fe:	f019 0210 	ands.w	r2, r9, #16
  40a202:	f040 81b3 	bne.w	40a56c <_vfiprintf_r+0x9c4>
  40a206:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  40a20a:	f000 81af 	beq.w	40a56c <_vfiprintf_r+0x9c4>
  40a20e:	9906      	ldr	r1, [sp, #24]
  40a210:	4613      	mov	r3, r2
  40a212:	2700      	movs	r7, #0
  40a214:	460a      	mov	r2, r1
  40a216:	880e      	ldrh	r6, [r1, #0]
  40a218:	3204      	adds	r2, #4
  40a21a:	9206      	str	r2, [sp, #24]
  40a21c:	e5c2      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a21e:	f049 0910 	orr.w	r9, r9, #16
  40a222:	9505      	str	r5, [sp, #20]
  40a224:	46b0      	mov	r8, r6
  40a226:	9a06      	ldr	r2, [sp, #24]
  40a228:	f019 0f20 	tst.w	r9, #32
  40a22c:	f47f adb1 	bne.w	409d92 <_vfiprintf_r+0x1ea>
  40a230:	f019 0f10 	tst.w	r9, #16
  40a234:	4613      	mov	r3, r2
  40a236:	f040 81a5 	bne.w	40a584 <_vfiprintf_r+0x9dc>
  40a23a:	f019 0f40 	tst.w	r9, #64	; 0x40
  40a23e:	f000 81a1 	beq.w	40a584 <_vfiprintf_r+0x9dc>
  40a242:	8816      	ldrh	r6, [r2, #0]
  40a244:	3204      	adds	r2, #4
  40a246:	2700      	movs	r7, #0
  40a248:	2301      	movs	r3, #1
  40a24a:	9206      	str	r2, [sp, #24]
  40a24c:	e5aa      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a24e:	4a72      	ldr	r2, [pc, #456]	; (40a418 <_vfiprintf_r+0x870>)
  40a250:	f019 0f20 	tst.w	r9, #32
  40a254:	9505      	str	r5, [sp, #20]
  40a256:	46b0      	mov	r8, r6
  40a258:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a25c:	920a      	str	r2, [sp, #40]	; 0x28
  40a25e:	f47f aeef 	bne.w	40a040 <_vfiprintf_r+0x498>
  40a262:	9906      	ldr	r1, [sp, #24]
  40a264:	f019 0f10 	tst.w	r9, #16
  40a268:	460a      	mov	r2, r1
  40a26a:	f040 8186 	bne.w	40a57a <_vfiprintf_r+0x9d2>
  40a26e:	f019 0f40 	tst.w	r9, #64	; 0x40
  40a272:	f000 8182 	beq.w	40a57a <_vfiprintf_r+0x9d2>
  40a276:	3204      	adds	r2, #4
  40a278:	880e      	ldrh	r6, [r1, #0]
  40a27a:	2700      	movs	r7, #0
  40a27c:	9206      	str	r2, [sp, #24]
  40a27e:	e6e8      	b.n	40a052 <_vfiprintf_r+0x4aa>
  40a280:	9505      	str	r5, [sp, #20]
  40a282:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40a286:	b30b      	cbz	r3, 40a2cc <_vfiprintf_r+0x724>
  40a288:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40a28c:	f04f 0300 	mov.w	r3, #0
  40a290:	2701      	movs	r7, #1
  40a292:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40a296:	ab12      	add	r3, sp, #72	; 0x48
  40a298:	46b8      	mov	r8, r7
  40a29a:	9308      	str	r3, [sp, #32]
  40a29c:	e719      	b.n	40a0d2 <_vfiprintf_r+0x52a>
  40a29e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a2a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a2a2:	1c48      	adds	r0, r1, #1
  40a2a4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40a2a8:	2b00      	cmp	r3, #0
  40a2aa:	f43f adfc 	beq.w	409ea6 <_vfiprintf_r+0x2fe>
  40a2ae:	3201      	adds	r2, #1
  40a2b0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40a2b4:	2301      	movs	r3, #1
  40a2b6:	2807      	cmp	r0, #7
  40a2b8:	9010      	str	r0, [sp, #64]	; 0x40
  40a2ba:	9211      	str	r2, [sp, #68]	; 0x44
  40a2bc:	e884 000a 	stmia.w	r4, {r1, r3}
  40a2c0:	f300 80e7 	bgt.w	40a492 <_vfiprintf_r+0x8ea>
  40a2c4:	4601      	mov	r1, r0
  40a2c6:	3408      	adds	r4, #8
  40a2c8:	3001      	adds	r0, #1
  40a2ca:	e5ec      	b.n	409ea6 <_vfiprintf_r+0x2fe>
  40a2cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a2ce:	b123      	cbz	r3, 40a2da <_vfiprintf_r+0x732>
  40a2d0:	9802      	ldr	r0, [sp, #8]
  40a2d2:	aa0f      	add	r2, sp, #60	; 0x3c
  40a2d4:	9901      	ldr	r1, [sp, #4]
  40a2d6:	f7ff fc2b 	bl	409b30 <__sprint_r.part.0>
  40a2da:	9b01      	ldr	r3, [sp, #4]
  40a2dc:	899b      	ldrh	r3, [r3, #12]
  40a2de:	065b      	lsls	r3, r3, #25
  40a2e0:	f53f ad48 	bmi.w	409d74 <_vfiprintf_r+0x1cc>
  40a2e4:	9803      	ldr	r0, [sp, #12]
  40a2e6:	b02d      	add	sp, #180	; 0xb4
  40a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2ec:	2b01      	cmp	r3, #1
  40a2ee:	f000 811f 	beq.w	40a530 <_vfiprintf_r+0x988>
  40a2f2:	2b02      	cmp	r3, #2
  40a2f4:	f040 80e7 	bne.w	40a4c6 <_vfiprintf_r+0x91e>
  40a2f8:	465a      	mov	r2, fp
  40a2fa:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  40a2fe:	0933      	lsrs	r3, r6, #4
  40a300:	f006 000f 	and.w	r0, r6, #15
  40a304:	0939      	lsrs	r1, r7, #4
  40a306:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40a30a:	460f      	mov	r7, r1
  40a30c:	461e      	mov	r6, r3
  40a30e:	f81e 3000 	ldrb.w	r3, [lr, r0]
  40a312:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40a316:	ea56 0307 	orrs.w	r3, r6, r7
  40a31a:	d1f0      	bne.n	40a2fe <_vfiprintf_r+0x756>
  40a31c:	9208      	str	r2, [sp, #32]
  40a31e:	ebc2 080b 	rsb	r8, r2, fp
  40a322:	e565      	b.n	409df0 <_vfiprintf_r+0x248>
  40a324:	2a00      	cmp	r2, #0
  40a326:	f040 8167 	bne.w	40a5f8 <_vfiprintf_r+0xa50>
  40a32a:	2201      	movs	r2, #1
  40a32c:	9908      	ldr	r1, [sp, #32]
  40a32e:	4643      	mov	r3, r8
  40a330:	465c      	mov	r4, fp
  40a332:	911c      	str	r1, [sp, #112]	; 0x70
  40a334:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  40a338:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40a33c:	9210      	str	r2, [sp, #64]	; 0x40
  40a33e:	f104 0208 	add.w	r2, r4, #8
  40a342:	f019 0f04 	tst.w	r9, #4
  40a346:	d047      	beq.n	40a3d8 <_vfiprintf_r+0x830>
  40a348:	9905      	ldr	r1, [sp, #20]
  40a34a:	1bcd      	subs	r5, r1, r7
  40a34c:	2d00      	cmp	r5, #0
  40a34e:	dd43      	ble.n	40a3d8 <_vfiprintf_r+0x830>
  40a350:	2d10      	cmp	r5, #16
  40a352:	f340 8201 	ble.w	40a758 <_vfiprintf_r+0xbb0>
  40a356:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a358:	2410      	movs	r4, #16
  40a35a:	4e30      	ldr	r6, [pc, #192]	; (40a41c <_vfiprintf_r+0x874>)
  40a35c:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40a360:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40a364:	e006      	b.n	40a374 <_vfiprintf_r+0x7cc>
  40a366:	f04f 0e01 	mov.w	lr, #1
  40a36a:	4618      	mov	r0, r3
  40a36c:	465a      	mov	r2, fp
  40a36e:	3d10      	subs	r5, #16
  40a370:	2d10      	cmp	r5, #16
  40a372:	dd1d      	ble.n	40a3b0 <_vfiprintf_r+0x808>
  40a374:	1c41      	adds	r1, r0, #1
  40a376:	3310      	adds	r3, #16
  40a378:	6016      	str	r6, [r2, #0]
  40a37a:	f100 0e02 	add.w	lr, r0, #2
  40a37e:	2907      	cmp	r1, #7
  40a380:	6054      	str	r4, [r2, #4]
  40a382:	9311      	str	r3, [sp, #68]	; 0x44
  40a384:	4608      	mov	r0, r1
  40a386:	f102 0208 	add.w	r2, r2, #8
  40a38a:	9110      	str	r1, [sp, #64]	; 0x40
  40a38c:	ddef      	ble.n	40a36e <_vfiprintf_r+0x7c6>
  40a38e:	2b00      	cmp	r3, #0
  40a390:	d0e9      	beq.n	40a366 <_vfiprintf_r+0x7be>
  40a392:	aa0f      	add	r2, sp, #60	; 0x3c
  40a394:	4640      	mov	r0, r8
  40a396:	4649      	mov	r1, r9
  40a398:	f7ff fbca 	bl	409b30 <__sprint_r.part.0>
  40a39c:	465a      	mov	r2, fp
  40a39e:	2800      	cmp	r0, #0
  40a3a0:	d19b      	bne.n	40a2da <_vfiprintf_r+0x732>
  40a3a2:	3d10      	subs	r5, #16
  40a3a4:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a3a8:	2d10      	cmp	r5, #16
  40a3aa:	f100 0e01 	add.w	lr, r0, #1
  40a3ae:	dce1      	bgt.n	40a374 <_vfiprintf_r+0x7cc>
  40a3b0:	442b      	add	r3, r5
  40a3b2:	f1be 0f07 	cmp.w	lr, #7
  40a3b6:	6016      	str	r6, [r2, #0]
  40a3b8:	6055      	str	r5, [r2, #4]
  40a3ba:	9311      	str	r3, [sp, #68]	; 0x44
  40a3bc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40a3c0:	dd0a      	ble.n	40a3d8 <_vfiprintf_r+0x830>
  40a3c2:	2b00      	cmp	r3, #0
  40a3c4:	f43f add3 	beq.w	409f6e <_vfiprintf_r+0x3c6>
  40a3c8:	9802      	ldr	r0, [sp, #8]
  40a3ca:	aa0f      	add	r2, sp, #60	; 0x3c
  40a3cc:	9901      	ldr	r1, [sp, #4]
  40a3ce:	f7ff fbaf 	bl	409b30 <__sprint_r.part.0>
  40a3d2:	2800      	cmp	r0, #0
  40a3d4:	d181      	bne.n	40a2da <_vfiprintf_r+0x732>
  40a3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a3d8:	9a03      	ldr	r2, [sp, #12]
  40a3da:	9905      	ldr	r1, [sp, #20]
  40a3dc:	428f      	cmp	r7, r1
  40a3de:	bfac      	ite	ge
  40a3e0:	19d2      	addge	r2, r2, r7
  40a3e2:	1852      	addlt	r2, r2, r1
  40a3e4:	9203      	str	r2, [sp, #12]
  40a3e6:	2b00      	cmp	r3, #0
  40a3e8:	f43f adc8 	beq.w	409f7c <_vfiprintf_r+0x3d4>
  40a3ec:	9802      	ldr	r0, [sp, #8]
  40a3ee:	aa0f      	add	r2, sp, #60	; 0x3c
  40a3f0:	9901      	ldr	r1, [sp, #4]
  40a3f2:	f7ff fb9d 	bl	409b30 <__sprint_r.part.0>
  40a3f6:	2800      	cmp	r0, #0
  40a3f8:	f43f adc0 	beq.w	409f7c <_vfiprintf_r+0x3d4>
  40a3fc:	e76d      	b.n	40a2da <_vfiprintf_r+0x732>
  40a3fe:	9b05      	ldr	r3, [sp, #20]
  40a400:	1bdd      	subs	r5, r3, r7
  40a402:	2d00      	cmp	r5, #0
  40a404:	f77f ad63 	ble.w	409ece <_vfiprintf_r+0x326>
  40a408:	2d10      	cmp	r5, #16
  40a40a:	f340 81b0 	ble.w	40a76e <_vfiprintf_r+0xbc6>
  40a40e:	4e04      	ldr	r6, [pc, #16]	; (40a420 <_vfiprintf_r+0x878>)
  40a410:	2310      	movs	r3, #16
  40a412:	e00e      	b.n	40a432 <_vfiprintf_r+0x88a>
  40a414:	0040e4dc 	.word	0x0040e4dc
  40a418:	0040e4c8 	.word	0x0040e4c8
  40a41c:	0040e50c 	.word	0x0040e50c
  40a420:	0040e4fc 	.word	0x0040e4fc
  40a424:	f04f 0e01 	mov.w	lr, #1
  40a428:	4611      	mov	r1, r2
  40a42a:	465c      	mov	r4, fp
  40a42c:	3d10      	subs	r5, #16
  40a42e:	2d10      	cmp	r5, #16
  40a430:	dd20      	ble.n	40a474 <_vfiprintf_r+0x8cc>
  40a432:	1c48      	adds	r0, r1, #1
  40a434:	3210      	adds	r2, #16
  40a436:	6026      	str	r6, [r4, #0]
  40a438:	f101 0e02 	add.w	lr, r1, #2
  40a43c:	2807      	cmp	r0, #7
  40a43e:	6063      	str	r3, [r4, #4]
  40a440:	9211      	str	r2, [sp, #68]	; 0x44
  40a442:	4601      	mov	r1, r0
  40a444:	f104 0408 	add.w	r4, r4, #8
  40a448:	9010      	str	r0, [sp, #64]	; 0x40
  40a44a:	ddef      	ble.n	40a42c <_vfiprintf_r+0x884>
  40a44c:	2a00      	cmp	r2, #0
  40a44e:	d0e9      	beq.n	40a424 <_vfiprintf_r+0x87c>
  40a450:	9802      	ldr	r0, [sp, #8]
  40a452:	aa0f      	add	r2, sp, #60	; 0x3c
  40a454:	9901      	ldr	r1, [sp, #4]
  40a456:	465c      	mov	r4, fp
  40a458:	9307      	str	r3, [sp, #28]
  40a45a:	f7ff fb69 	bl	409b30 <__sprint_r.part.0>
  40a45e:	2800      	cmp	r0, #0
  40a460:	f47f af3b 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a464:	3d10      	subs	r5, #16
  40a466:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a468:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a46a:	2d10      	cmp	r5, #16
  40a46c:	f101 0e01 	add.w	lr, r1, #1
  40a470:	9b07      	ldr	r3, [sp, #28]
  40a472:	dcde      	bgt.n	40a432 <_vfiprintf_r+0x88a>
  40a474:	442a      	add	r2, r5
  40a476:	f1be 0f07 	cmp.w	lr, #7
  40a47a:	6026      	str	r6, [r4, #0]
  40a47c:	6065      	str	r5, [r4, #4]
  40a47e:	9211      	str	r2, [sp, #68]	; 0x44
  40a480:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40a484:	f300 80b1 	bgt.w	40a5ea <_vfiprintf_r+0xa42>
  40a488:	3408      	adds	r4, #8
  40a48a:	f10e 0001 	add.w	r0, lr, #1
  40a48e:	4671      	mov	r1, lr
  40a490:	e51d      	b.n	409ece <_vfiprintf_r+0x326>
  40a492:	2a00      	cmp	r2, #0
  40a494:	f040 808b 	bne.w	40a5ae <_vfiprintf_r+0xa06>
  40a498:	f1bc 0f00 	cmp.w	ip, #0
  40a49c:	f000 8083 	beq.w	40a5a6 <_vfiprintf_r+0x9fe>
  40a4a0:	aa0e      	add	r2, sp, #56	; 0x38
  40a4a2:	2102      	movs	r1, #2
  40a4a4:	4618      	mov	r0, r3
  40a4a6:	465c      	mov	r4, fp
  40a4a8:	921c      	str	r2, [sp, #112]	; 0x70
  40a4aa:	460a      	mov	r2, r1
  40a4ac:	911d      	str	r1, [sp, #116]	; 0x74
  40a4ae:	e507      	b.n	409ec0 <_vfiprintf_r+0x318>
  40a4b0:	2a00      	cmp	r2, #0
  40a4b2:	f040 808d 	bne.w	40a5d0 <_vfiprintf_r+0xa28>
  40a4b6:	2001      	movs	r0, #1
  40a4b8:	4611      	mov	r1, r2
  40a4ba:	465c      	mov	r4, fp
  40a4bc:	e503      	b.n	409ec6 <_vfiprintf_r+0x31e>
  40a4be:	4690      	mov	r8, r2
  40a4c0:	f8cd b020 	str.w	fp, [sp, #32]
  40a4c4:	e494      	b.n	409df0 <_vfiprintf_r+0x248>
  40a4c6:	4659      	mov	r1, fp
  40a4c8:	08f2      	lsrs	r2, r6, #3
  40a4ca:	f006 0307 	and.w	r3, r6, #7
  40a4ce:	08f8      	lsrs	r0, r7, #3
  40a4d0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40a4d4:	3330      	adds	r3, #48	; 0x30
  40a4d6:	4607      	mov	r7, r0
  40a4d8:	4616      	mov	r6, r2
  40a4da:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40a4de:	ea56 0207 	orrs.w	r2, r6, r7
  40a4e2:	d1f1      	bne.n	40a4c8 <_vfiprintf_r+0x920>
  40a4e4:	f019 0f01 	tst.w	r9, #1
  40a4e8:	9108      	str	r1, [sp, #32]
  40a4ea:	f040 8092 	bne.w	40a612 <_vfiprintf_r+0xa6a>
  40a4ee:	ebc1 080b 	rsb	r8, r1, fp
  40a4f2:	e47d      	b.n	409df0 <_vfiprintf_r+0x248>
  40a4f4:	2302      	movs	r3, #2
  40a4f6:	e455      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a4f8:	2a00      	cmp	r2, #0
  40a4fa:	f040 80e6 	bne.w	40a6ca <_vfiprintf_r+0xb22>
  40a4fe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40a502:	2b00      	cmp	r3, #0
  40a504:	f000 80bb 	beq.w	40a67e <_vfiprintf_r+0xad6>
  40a508:	2301      	movs	r3, #1
  40a50a:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  40a50e:	465c      	mov	r4, fp
  40a510:	921c      	str	r2, [sp, #112]	; 0x70
  40a512:	4618      	mov	r0, r3
  40a514:	931d      	str	r3, [sp, #116]	; 0x74
  40a516:	461a      	mov	r2, r3
  40a518:	e6d4      	b.n	40a2c4 <_vfiprintf_r+0x71c>
  40a51a:	9a05      	ldr	r2, [sp, #20]
  40a51c:	1bd5      	subs	r5, r2, r7
  40a51e:	465a      	mov	r2, fp
  40a520:	2d00      	cmp	r5, #0
  40a522:	f73f af15 	bgt.w	40a350 <_vfiprintf_r+0x7a8>
  40a526:	e522      	b.n	409f6e <_vfiprintf_r+0x3c6>
  40a528:	4698      	mov	r8, r3
  40a52a:	f8cd b020 	str.w	fp, [sp, #32]
  40a52e:	e45f      	b.n	409df0 <_vfiprintf_r+0x248>
  40a530:	2f00      	cmp	r7, #0
  40a532:	bf08      	it	eq
  40a534:	2e0a      	cmpeq	r6, #10
  40a536:	d279      	bcs.n	40a62c <_vfiprintf_r+0xa84>
  40a538:	ab2c      	add	r3, sp, #176	; 0xb0
  40a53a:	3630      	adds	r6, #48	; 0x30
  40a53c:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40a540:	ebc3 080b 	rsb	r8, r3, fp
  40a544:	9308      	str	r3, [sp, #32]
  40a546:	e453      	b.n	409df0 <_vfiprintf_r+0x248>
  40a548:	9802      	ldr	r0, [sp, #8]
  40a54a:	aa0f      	add	r2, sp, #60	; 0x3c
  40a54c:	9901      	ldr	r1, [sp, #4]
  40a54e:	f7ff faef 	bl	409b30 <__sprint_r.part.0>
  40a552:	2800      	cmp	r0, #0
  40a554:	f47f aec1 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a558:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a55a:	465a      	mov	r2, fp
  40a55c:	e6f1      	b.n	40a342 <_vfiprintf_r+0x79a>
  40a55e:	681e      	ldr	r6, [r3, #0]
  40a560:	3304      	adds	r3, #4
  40a562:	17f7      	asrs	r7, r6, #31
  40a564:	9306      	str	r3, [sp, #24]
  40a566:	4632      	mov	r2, r6
  40a568:	463b      	mov	r3, r7
  40a56a:	e5c6      	b.n	40a0fa <_vfiprintf_r+0x552>
  40a56c:	9906      	ldr	r1, [sp, #24]
  40a56e:	2700      	movs	r7, #0
  40a570:	460a      	mov	r2, r1
  40a572:	680e      	ldr	r6, [r1, #0]
  40a574:	3204      	adds	r2, #4
  40a576:	9206      	str	r2, [sp, #24]
  40a578:	e414      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a57a:	6816      	ldr	r6, [r2, #0]
  40a57c:	3204      	adds	r2, #4
  40a57e:	2700      	movs	r7, #0
  40a580:	9206      	str	r2, [sp, #24]
  40a582:	e566      	b.n	40a052 <_vfiprintf_r+0x4aa>
  40a584:	3204      	adds	r2, #4
  40a586:	681e      	ldr	r6, [r3, #0]
  40a588:	2700      	movs	r7, #0
  40a58a:	2301      	movs	r3, #1
  40a58c:	9206      	str	r2, [sp, #24]
  40a58e:	e409      	b.n	409da4 <_vfiprintf_r+0x1fc>
  40a590:	9802      	ldr	r0, [sp, #8]
  40a592:	aa0f      	add	r2, sp, #60	; 0x3c
  40a594:	9901      	ldr	r1, [sp, #4]
  40a596:	f7ff facb 	bl	409b30 <__sprint_r.part.0>
  40a59a:	2800      	cmp	r0, #0
  40a59c:	f47f ae9d 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a5a0:	465c      	mov	r4, fp
  40a5a2:	f7ff bbc8 	b.w	409d36 <_vfiprintf_r+0x18e>
  40a5a6:	4618      	mov	r0, r3
  40a5a8:	4611      	mov	r1, r2
  40a5aa:	465c      	mov	r4, fp
  40a5ac:	e48b      	b.n	409ec6 <_vfiprintf_r+0x31e>
  40a5ae:	9802      	ldr	r0, [sp, #8]
  40a5b0:	aa0f      	add	r2, sp, #60	; 0x3c
  40a5b2:	9901      	ldr	r1, [sp, #4]
  40a5b4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a5b8:	f7ff faba 	bl	409b30 <__sprint_r.part.0>
  40a5bc:	2800      	cmp	r0, #0
  40a5be:	f47f ae8c 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a5c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a5c4:	465c      	mov	r4, fp
  40a5c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a5c8:	1c48      	adds	r0, r1, #1
  40a5ca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a5ce:	e46a      	b.n	409ea6 <_vfiprintf_r+0x2fe>
  40a5d0:	9802      	ldr	r0, [sp, #8]
  40a5d2:	aa0f      	add	r2, sp, #60	; 0x3c
  40a5d4:	9901      	ldr	r1, [sp, #4]
  40a5d6:	f7ff faab 	bl	409b30 <__sprint_r.part.0>
  40a5da:	2800      	cmp	r0, #0
  40a5dc:	f47f ae7d 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a5e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a5e2:	465c      	mov	r4, fp
  40a5e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a5e6:	1c48      	adds	r0, r1, #1
  40a5e8:	e46d      	b.n	409ec6 <_vfiprintf_r+0x31e>
  40a5ea:	2a00      	cmp	r2, #0
  40a5ec:	f040 8095 	bne.w	40a71a <_vfiprintf_r+0xb72>
  40a5f0:	2001      	movs	r0, #1
  40a5f2:	4611      	mov	r1, r2
  40a5f4:	465c      	mov	r4, fp
  40a5f6:	e46a      	b.n	409ece <_vfiprintf_r+0x326>
  40a5f8:	9802      	ldr	r0, [sp, #8]
  40a5fa:	aa0f      	add	r2, sp, #60	; 0x3c
  40a5fc:	9901      	ldr	r1, [sp, #4]
  40a5fe:	f7ff fa97 	bl	409b30 <__sprint_r.part.0>
  40a602:	2800      	cmp	r0, #0
  40a604:	f47f ae69 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a608:	9810      	ldr	r0, [sp, #64]	; 0x40
  40a60a:	465c      	mov	r4, fp
  40a60c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a60e:	3001      	adds	r0, #1
  40a610:	e49b      	b.n	409f4a <_vfiprintf_r+0x3a2>
  40a612:	2b30      	cmp	r3, #48	; 0x30
  40a614:	9b08      	ldr	r3, [sp, #32]
  40a616:	d022      	beq.n	40a65e <_vfiprintf_r+0xab6>
  40a618:	3b01      	subs	r3, #1
  40a61a:	461a      	mov	r2, r3
  40a61c:	9308      	str	r3, [sp, #32]
  40a61e:	2330      	movs	r3, #48	; 0x30
  40a620:	ebc2 080b 	rsb	r8, r2, fp
  40a624:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a628:	f7ff bbe2 	b.w	409df0 <_vfiprintf_r+0x248>
  40a62c:	46d8      	mov	r8, fp
  40a62e:	4630      	mov	r0, r6
  40a630:	4639      	mov	r1, r7
  40a632:	220a      	movs	r2, #10
  40a634:	2300      	movs	r3, #0
  40a636:	f002 ff2f 	bl	40d498 <__aeabi_uldivmod>
  40a63a:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40a63e:	4630      	mov	r0, r6
  40a640:	4639      	mov	r1, r7
  40a642:	2300      	movs	r3, #0
  40a644:	220a      	movs	r2, #10
  40a646:	f808 ed01 	strb.w	lr, [r8, #-1]!
  40a64a:	f002 ff25 	bl	40d498 <__aeabi_uldivmod>
  40a64e:	4606      	mov	r6, r0
  40a650:	460f      	mov	r7, r1
  40a652:	ea56 0307 	orrs.w	r3, r6, r7
  40a656:	d1ea      	bne.n	40a62e <_vfiprintf_r+0xa86>
  40a658:	4643      	mov	r3, r8
  40a65a:	f8cd 8020 	str.w	r8, [sp, #32]
  40a65e:	ebc3 080b 	rsb	r8, r3, fp
  40a662:	f7ff bbc5 	b.w	409df0 <_vfiprintf_r+0x248>
  40a666:	252d      	movs	r5, #45	; 0x2d
  40a668:	4276      	negs	r6, r6
  40a66a:	f8cd 8010 	str.w	r8, [sp, #16]
  40a66e:	f04f 0301 	mov.w	r3, #1
  40a672:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40a676:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40a67a:	f7ff bb9a 	b.w	409db2 <_vfiprintf_r+0x20a>
  40a67e:	4611      	mov	r1, r2
  40a680:	2001      	movs	r0, #1
  40a682:	465c      	mov	r4, fp
  40a684:	f1bc 0f00 	cmp.w	ip, #0
  40a688:	f43f ac21 	beq.w	409ece <_vfiprintf_r+0x326>
  40a68c:	aa0e      	add	r2, sp, #56	; 0x38
  40a68e:	2302      	movs	r3, #2
  40a690:	f8cb 2000 	str.w	r2, [fp]
  40a694:	461a      	mov	r2, r3
  40a696:	f8cb 3004 	str.w	r3, [fp, #4]
  40a69a:	e411      	b.n	409ec0 <_vfiprintf_r+0x318>
  40a69c:	f019 0f10 	tst.w	r9, #16
  40a6a0:	d10b      	bne.n	40a6ba <_vfiprintf_r+0xb12>
  40a6a2:	f019 0f40 	tst.w	r9, #64	; 0x40
  40a6a6:	d008      	beq.n	40a6ba <_vfiprintf_r+0xb12>
  40a6a8:	9a06      	ldr	r2, [sp, #24]
  40a6aa:	6813      	ldr	r3, [r2, #0]
  40a6ac:	3204      	adds	r2, #4
  40a6ae:	9206      	str	r2, [sp, #24]
  40a6b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40a6b4:	801a      	strh	r2, [r3, #0]
  40a6b6:	f7ff baa9 	b.w	409c0c <_vfiprintf_r+0x64>
  40a6ba:	9a06      	ldr	r2, [sp, #24]
  40a6bc:	6813      	ldr	r3, [r2, #0]
  40a6be:	3204      	adds	r2, #4
  40a6c0:	9206      	str	r2, [sp, #24]
  40a6c2:	9a03      	ldr	r2, [sp, #12]
  40a6c4:	601a      	str	r2, [r3, #0]
  40a6c6:	f7ff baa1 	b.w	409c0c <_vfiprintf_r+0x64>
  40a6ca:	9802      	ldr	r0, [sp, #8]
  40a6cc:	aa0f      	add	r2, sp, #60	; 0x3c
  40a6ce:	9901      	ldr	r1, [sp, #4]
  40a6d0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40a6d4:	f7ff fa2c 	bl	409b30 <__sprint_r.part.0>
  40a6d8:	2800      	cmp	r0, #0
  40a6da:	f47f adfe 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a6de:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a6e0:	465c      	mov	r4, fp
  40a6e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a6e4:	1c48      	adds	r0, r1, #1
  40a6e6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40a6ea:	e5db      	b.n	40a2a4 <_vfiprintf_r+0x6fc>
  40a6ec:	f049 0920 	orr.w	r9, r9, #32
  40a6f0:	f10a 0001 	add.w	r0, sl, #1
  40a6f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40a6f8:	f7ff baba 	b.w	409c70 <_vfiprintf_r+0xc8>
  40a6fc:	426d      	negs	r5, r5
  40a6fe:	9306      	str	r3, [sp, #24]
  40a700:	4650      	mov	r0, sl
  40a702:	e440      	b.n	409f86 <_vfiprintf_r+0x3de>
  40a704:	9808      	ldr	r0, [sp, #32]
  40a706:	9606      	str	r6, [sp, #24]
  40a708:	f7fd fe88 	bl	40841c <strlen>
  40a70c:	2300      	movs	r3, #0
  40a70e:	4680      	mov	r8, r0
  40a710:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a714:	9304      	str	r3, [sp, #16]
  40a716:	f7ff bb6b 	b.w	409df0 <_vfiprintf_r+0x248>
  40a71a:	9802      	ldr	r0, [sp, #8]
  40a71c:	aa0f      	add	r2, sp, #60	; 0x3c
  40a71e:	9901      	ldr	r1, [sp, #4]
  40a720:	f7ff fa06 	bl	409b30 <__sprint_r.part.0>
  40a724:	2800      	cmp	r0, #0
  40a726:	f47f add8 	bne.w	40a2da <_vfiprintf_r+0x732>
  40a72a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a72c:	465c      	mov	r4, fp
  40a72e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a730:	1c48      	adds	r0, r1, #1
  40a732:	f7ff bbcc 	b.w	409ece <_vfiprintf_r+0x326>
  40a736:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a73a:	3101      	adds	r1, #1
  40a73c:	4e14      	ldr	r6, [pc, #80]	; (40a790 <_vfiprintf_r+0xbe8>)
  40a73e:	f7ff bba3 	b.w	409e88 <_vfiprintf_r+0x2e0>
  40a742:	f1b8 0f06 	cmp.w	r8, #6
  40a746:	4b13      	ldr	r3, [pc, #76]	; (40a794 <_vfiprintf_r+0xbec>)
  40a748:	9606      	str	r6, [sp, #24]
  40a74a:	bf28      	it	cs
  40a74c:	f04f 0806 	movcs.w	r8, #6
  40a750:	9308      	str	r3, [sp, #32]
  40a752:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  40a756:	e4bc      	b.n	40a0d2 <_vfiprintf_r+0x52a>
  40a758:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a75a:	4e0d      	ldr	r6, [pc, #52]	; (40a790 <_vfiprintf_r+0xbe8>)
  40a75c:	f101 0e01 	add.w	lr, r1, #1
  40a760:	e626      	b.n	40a3b0 <_vfiprintf_r+0x808>
  40a762:	9606      	str	r6, [sp, #24]
  40a764:	9004      	str	r0, [sp, #16]
  40a766:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40a76a:	f7ff bb41 	b.w	409df0 <_vfiprintf_r+0x248>
  40a76e:	4686      	mov	lr, r0
  40a770:	4e09      	ldr	r6, [pc, #36]	; (40a798 <_vfiprintf_r+0xbf0>)
  40a772:	e67f      	b.n	40a474 <_vfiprintf_r+0x8cc>
  40a774:	9a06      	ldr	r2, [sp, #24]
  40a776:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40a77a:	6816      	ldr	r6, [r2, #0]
  40a77c:	3204      	adds	r2, #4
  40a77e:	2e00      	cmp	r6, #0
  40a780:	9206      	str	r2, [sp, #24]
  40a782:	f6bf aa75 	bge.w	409c70 <_vfiprintf_r+0xc8>
  40a786:	f04f 36ff 	mov.w	r6, #4294967295
  40a78a:	f7ff ba71 	b.w	409c70 <_vfiprintf_r+0xc8>
  40a78e:	bf00      	nop
  40a790:	0040e50c 	.word	0x0040e50c
  40a794:	0040e4f0 	.word	0x0040e4f0
  40a798:	0040e4fc 	.word	0x0040e4fc

0040a79c <__sbprintf>:
  40a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a7a0:	898d      	ldrh	r5, [r1, #12]
  40a7a2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40a7a6:	4688      	mov	r8, r1
  40a7a8:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40a7ac:	f025 0502 	bic.w	r5, r5, #2
  40a7b0:	ac1c      	add	r4, sp, #112	; 0x70
  40a7b2:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40a7b6:	2700      	movs	r7, #0
  40a7b8:	f8ad 5014 	strh.w	r5, [sp, #20]
  40a7bc:	a902      	add	r1, sp, #8
  40a7be:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40a7c2:	4681      	mov	r9, r0
  40a7c4:	9402      	str	r4, [sp, #8]
  40a7c6:	9501      	str	r5, [sp, #4]
  40a7c8:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  40a7cc:	9406      	str	r4, [sp, #24]
  40a7ce:	951b      	str	r5, [sp, #108]	; 0x6c
  40a7d0:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40a7d4:	f8ad a016 	strh.w	sl, [sp, #22]
  40a7d8:	9509      	str	r5, [sp, #36]	; 0x24
  40a7da:	9d01      	ldr	r5, [sp, #4]
  40a7dc:	9708      	str	r7, [sp, #32]
  40a7de:	950b      	str	r5, [sp, #44]	; 0x2c
  40a7e0:	9604      	str	r6, [sp, #16]
  40a7e2:	9607      	str	r6, [sp, #28]
  40a7e4:	f7ff f9e0 	bl	409ba8 <_vfiprintf_r>
  40a7e8:	1e04      	subs	r4, r0, #0
  40a7ea:	db07      	blt.n	40a7fc <__sbprintf+0x60>
  40a7ec:	4648      	mov	r0, r9
  40a7ee:	a902      	add	r1, sp, #8
  40a7f0:	f001 f946 	bl	40ba80 <_fflush_r>
  40a7f4:	42b8      	cmp	r0, r7
  40a7f6:	bf18      	it	ne
  40a7f8:	f04f 34ff 	movne.w	r4, #4294967295
  40a7fc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40a800:	065b      	lsls	r3, r3, #25
  40a802:	d505      	bpl.n	40a810 <__sbprintf+0x74>
  40a804:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40a808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a80c:	f8a8 300c 	strh.w	r3, [r8, #12]
  40a810:	4620      	mov	r0, r4
  40a812:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a81a:	bf00      	nop

0040a81c <__swsetup_r>:
  40a81c:	b538      	push	{r3, r4, r5, lr}
  40a81e:	4b2f      	ldr	r3, [pc, #188]	; (40a8dc <__swsetup_r+0xc0>)
  40a820:	4605      	mov	r5, r0
  40a822:	460c      	mov	r4, r1
  40a824:	6818      	ldr	r0, [r3, #0]
  40a826:	b110      	cbz	r0, 40a82e <__swsetup_r+0x12>
  40a828:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a82a:	2b00      	cmp	r3, #0
  40a82c:	d036      	beq.n	40a89c <__swsetup_r+0x80>
  40a82e:	89a2      	ldrh	r2, [r4, #12]
  40a830:	b293      	uxth	r3, r2
  40a832:	0718      	lsls	r0, r3, #28
  40a834:	d50b      	bpl.n	40a84e <__swsetup_r+0x32>
  40a836:	6920      	ldr	r0, [r4, #16]
  40a838:	b1a0      	cbz	r0, 40a864 <__swsetup_r+0x48>
  40a83a:	f013 0201 	ands.w	r2, r3, #1
  40a83e:	d11d      	bne.n	40a87c <__swsetup_r+0x60>
  40a840:	0799      	lsls	r1, r3, #30
  40a842:	d400      	bmi.n	40a846 <__swsetup_r+0x2a>
  40a844:	6962      	ldr	r2, [r4, #20]
  40a846:	60a2      	str	r2, [r4, #8]
  40a848:	b1f8      	cbz	r0, 40a88a <__swsetup_r+0x6e>
  40a84a:	2000      	movs	r0, #0
  40a84c:	bd38      	pop	{r3, r4, r5, pc}
  40a84e:	06d9      	lsls	r1, r3, #27
  40a850:	d53b      	bpl.n	40a8ca <__swsetup_r+0xae>
  40a852:	0758      	lsls	r0, r3, #29
  40a854:	d425      	bmi.n	40a8a2 <__swsetup_r+0x86>
  40a856:	6920      	ldr	r0, [r4, #16]
  40a858:	f042 0208 	orr.w	r2, r2, #8
  40a85c:	b293      	uxth	r3, r2
  40a85e:	81a2      	strh	r2, [r4, #12]
  40a860:	2800      	cmp	r0, #0
  40a862:	d1ea      	bne.n	40a83a <__swsetup_r+0x1e>
  40a864:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40a868:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40a86c:	d0e5      	beq.n	40a83a <__swsetup_r+0x1e>
  40a86e:	4628      	mov	r0, r5
  40a870:	4621      	mov	r1, r4
  40a872:	f001 fd17 	bl	40c2a4 <__smakebuf_r>
  40a876:	89a3      	ldrh	r3, [r4, #12]
  40a878:	6920      	ldr	r0, [r4, #16]
  40a87a:	e7de      	b.n	40a83a <__swsetup_r+0x1e>
  40a87c:	6963      	ldr	r3, [r4, #20]
  40a87e:	2200      	movs	r2, #0
  40a880:	425b      	negs	r3, r3
  40a882:	60a2      	str	r2, [r4, #8]
  40a884:	61a3      	str	r3, [r4, #24]
  40a886:	2800      	cmp	r0, #0
  40a888:	d1df      	bne.n	40a84a <__swsetup_r+0x2e>
  40a88a:	89a3      	ldrh	r3, [r4, #12]
  40a88c:	061a      	lsls	r2, r3, #24
  40a88e:	d5dd      	bpl.n	40a84c <__swsetup_r+0x30>
  40a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a894:	f04f 30ff 	mov.w	r0, #4294967295
  40a898:	81a3      	strh	r3, [r4, #12]
  40a89a:	bd38      	pop	{r3, r4, r5, pc}
  40a89c:	f001 f98a 	bl	40bbb4 <__sinit>
  40a8a0:	e7c5      	b.n	40a82e <__swsetup_r+0x12>
  40a8a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40a8a4:	b149      	cbz	r1, 40a8ba <__swsetup_r+0x9e>
  40a8a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40a8aa:	4299      	cmp	r1, r3
  40a8ac:	d003      	beq.n	40a8b6 <__swsetup_r+0x9a>
  40a8ae:	4628      	mov	r0, r5
  40a8b0:	f001 fa58 	bl	40bd64 <_free_r>
  40a8b4:	89a2      	ldrh	r2, [r4, #12]
  40a8b6:	2300      	movs	r3, #0
  40a8b8:	6323      	str	r3, [r4, #48]	; 0x30
  40a8ba:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40a8be:	2300      	movs	r3, #0
  40a8c0:	6920      	ldr	r0, [r4, #16]
  40a8c2:	b292      	uxth	r2, r2
  40a8c4:	e884 0009 	stmia.w	r4, {r0, r3}
  40a8c8:	e7c6      	b.n	40a858 <__swsetup_r+0x3c>
  40a8ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a8ce:	2309      	movs	r3, #9
  40a8d0:	f04f 30ff 	mov.w	r0, #4294967295
  40a8d4:	602b      	str	r3, [r5, #0]
  40a8d6:	81a2      	strh	r2, [r4, #12]
  40a8d8:	bd38      	pop	{r3, r4, r5, pc}
  40a8da:	bf00      	nop
  40a8dc:	20400448 	.word	0x20400448

0040a8e0 <register_fini>:
  40a8e0:	4b02      	ldr	r3, [pc, #8]	; (40a8ec <register_fini+0xc>)
  40a8e2:	b113      	cbz	r3, 40a8ea <register_fini+0xa>
  40a8e4:	4802      	ldr	r0, [pc, #8]	; (40a8f0 <register_fini+0x10>)
  40a8e6:	f000 b80d 	b.w	40a904 <atexit>
  40a8ea:	4770      	bx	lr
  40a8ec:	00000000 	.word	0x00000000
  40a8f0:	0040bbc9 	.word	0x0040bbc9

0040a8f4 <abort>:
  40a8f4:	b508      	push	{r3, lr}
  40a8f6:	2006      	movs	r0, #6
  40a8f8:	f002 fb20 	bl	40cf3c <raise>
  40a8fc:	2001      	movs	r0, #1
  40a8fe:	f7f8 fd61 	bl	4033c4 <_exit>
  40a902:	bf00      	nop

0040a904 <atexit>:
  40a904:	4601      	mov	r1, r0
  40a906:	2000      	movs	r0, #0
  40a908:	4602      	mov	r2, r0
  40a90a:	4603      	mov	r3, r0
  40a90c:	f002 bc9e 	b.w	40d24c <__register_exitproc>

0040a910 <quorem>:
  40a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a914:	6903      	ldr	r3, [r0, #16]
  40a916:	b083      	sub	sp, #12
  40a918:	690f      	ldr	r7, [r1, #16]
  40a91a:	429f      	cmp	r7, r3
  40a91c:	f300 8093 	bgt.w	40aa46 <quorem+0x136>
  40a920:	3f01      	subs	r7, #1
  40a922:	f101 0614 	add.w	r6, r1, #20
  40a926:	f100 0a14 	add.w	sl, r0, #20
  40a92a:	00bb      	lsls	r3, r7, #2
  40a92c:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  40a930:	461d      	mov	r5, r3
  40a932:	9300      	str	r3, [sp, #0]
  40a934:	3201      	adds	r2, #1
  40a936:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40a93a:	eb0a 0405 	add.w	r4, sl, r5
  40a93e:	eb06 0905 	add.w	r9, r6, r5
  40a942:	fbb3 f8f2 	udiv	r8, r3, r2
  40a946:	9401      	str	r4, [sp, #4]
  40a948:	f1b8 0f00 	cmp.w	r8, #0
  40a94c:	d040      	beq.n	40a9d0 <quorem+0xc0>
  40a94e:	2500      	movs	r5, #0
  40a950:	46b4      	mov	ip, r6
  40a952:	46d6      	mov	lr, sl
  40a954:	462b      	mov	r3, r5
  40a956:	f85c bb04 	ldr.w	fp, [ip], #4
  40a95a:	f8de 2000 	ldr.w	r2, [lr]
  40a95e:	fa1f f48b 	uxth.w	r4, fp
  40a962:	45e1      	cmp	r9, ip
  40a964:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  40a968:	fb04 5508 	mla	r5, r4, r8, r5
  40a96c:	fb0b fb08 	mul.w	fp, fp, r8
  40a970:	b2ac      	uxth	r4, r5
  40a972:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  40a976:	eba3 0304 	sub.w	r3, r3, r4
  40a97a:	fa1f fb85 	uxth.w	fp, r5
  40a97e:	fa13 f482 	uxtah	r4, r3, r2
  40a982:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40a986:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40a98a:	fa1f fb84 	uxth.w	fp, r4
  40a98e:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40a992:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40a996:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a99a:	f84e 2b04 	str.w	r2, [lr], #4
  40a99e:	d2da      	bcs.n	40a956 <quorem+0x46>
  40a9a0:	9b00      	ldr	r3, [sp, #0]
  40a9a2:	f85a 3003 	ldr.w	r3, [sl, r3]
  40a9a6:	b99b      	cbnz	r3, 40a9d0 <quorem+0xc0>
  40a9a8:	9c01      	ldr	r4, [sp, #4]
  40a9aa:	1f23      	subs	r3, r4, #4
  40a9ac:	459a      	cmp	sl, r3
  40a9ae:	d20e      	bcs.n	40a9ce <quorem+0xbe>
  40a9b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a9b4:	b95b      	cbnz	r3, 40a9ce <quorem+0xbe>
  40a9b6:	f1a4 0308 	sub.w	r3, r4, #8
  40a9ba:	e001      	b.n	40a9c0 <quorem+0xb0>
  40a9bc:	6812      	ldr	r2, [r2, #0]
  40a9be:	b932      	cbnz	r2, 40a9ce <quorem+0xbe>
  40a9c0:	459a      	cmp	sl, r3
  40a9c2:	461a      	mov	r2, r3
  40a9c4:	f107 37ff 	add.w	r7, r7, #4294967295
  40a9c8:	f1a3 0304 	sub.w	r3, r3, #4
  40a9cc:	d3f6      	bcc.n	40a9bc <quorem+0xac>
  40a9ce:	6107      	str	r7, [r0, #16]
  40a9d0:	4604      	mov	r4, r0
  40a9d2:	f001 ffa1 	bl	40c918 <__mcmp>
  40a9d6:	2800      	cmp	r0, #0
  40a9d8:	db31      	blt.n	40aa3e <quorem+0x12e>
  40a9da:	f108 0801 	add.w	r8, r8, #1
  40a9de:	4655      	mov	r5, sl
  40a9e0:	2000      	movs	r0, #0
  40a9e2:	f856 1b04 	ldr.w	r1, [r6], #4
  40a9e6:	682a      	ldr	r2, [r5, #0]
  40a9e8:	b28b      	uxth	r3, r1
  40a9ea:	45b1      	cmp	r9, r6
  40a9ec:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40a9f0:	eba0 0303 	sub.w	r3, r0, r3
  40a9f4:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  40a9f8:	fa13 f382 	uxtah	r3, r3, r2
  40a9fc:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40aa00:	b29b      	uxth	r3, r3
  40aa02:	ea4f 4022 	mov.w	r0, r2, asr #16
  40aa06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40aa0a:	f845 3b04 	str.w	r3, [r5], #4
  40aa0e:	d2e8      	bcs.n	40a9e2 <quorem+0xd2>
  40aa10:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40aa14:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40aa18:	b98a      	cbnz	r2, 40aa3e <quorem+0x12e>
  40aa1a:	1f1a      	subs	r2, r3, #4
  40aa1c:	4592      	cmp	sl, r2
  40aa1e:	d20d      	bcs.n	40aa3c <quorem+0x12c>
  40aa20:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40aa24:	b952      	cbnz	r2, 40aa3c <quorem+0x12c>
  40aa26:	3b08      	subs	r3, #8
  40aa28:	e001      	b.n	40aa2e <quorem+0x11e>
  40aa2a:	6812      	ldr	r2, [r2, #0]
  40aa2c:	b932      	cbnz	r2, 40aa3c <quorem+0x12c>
  40aa2e:	459a      	cmp	sl, r3
  40aa30:	461a      	mov	r2, r3
  40aa32:	f107 37ff 	add.w	r7, r7, #4294967295
  40aa36:	f1a3 0304 	sub.w	r3, r3, #4
  40aa3a:	d3f6      	bcc.n	40aa2a <quorem+0x11a>
  40aa3c:	6127      	str	r7, [r4, #16]
  40aa3e:	4640      	mov	r0, r8
  40aa40:	b003      	add	sp, #12
  40aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa46:	2000      	movs	r0, #0
  40aa48:	b003      	add	sp, #12
  40aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa4e:	bf00      	nop

0040aa50 <_dtoa_r>:
  40aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aa54:	469b      	mov	fp, r3
  40aa56:	b099      	sub	sp, #100	; 0x64
  40aa58:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40aa5a:	4604      	mov	r4, r0
  40aa5c:	4692      	mov	sl, r2
  40aa5e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40aa60:	b14b      	cbz	r3, 40aa76 <_dtoa_r+0x26>
  40aa62:	6c46      	ldr	r6, [r0, #68]	; 0x44
  40aa64:	2201      	movs	r2, #1
  40aa66:	4619      	mov	r1, r3
  40aa68:	40b2      	lsls	r2, r6
  40aa6a:	605e      	str	r6, [r3, #4]
  40aa6c:	609a      	str	r2, [r3, #8]
  40aa6e:	f001 fd5d 	bl	40c52c <_Bfree>
  40aa72:	2300      	movs	r3, #0
  40aa74:	6423      	str	r3, [r4, #64]	; 0x40
  40aa76:	f1bb 0f00 	cmp.w	fp, #0
  40aa7a:	46d9      	mov	r9, fp
  40aa7c:	db33      	blt.n	40aae6 <_dtoa_r+0x96>
  40aa7e:	2300      	movs	r3, #0
  40aa80:	602b      	str	r3, [r5, #0]
  40aa82:	4b99      	ldr	r3, [pc, #612]	; (40ace8 <_dtoa_r+0x298>)
  40aa84:	461a      	mov	r2, r3
  40aa86:	ea09 0303 	and.w	r3, r9, r3
  40aa8a:	4293      	cmp	r3, r2
  40aa8c:	d014      	beq.n	40aab8 <_dtoa_r+0x68>
  40aa8e:	2200      	movs	r2, #0
  40aa90:	2300      	movs	r3, #0
  40aa92:	4650      	mov	r0, sl
  40aa94:	4659      	mov	r1, fp
  40aa96:	f7fc ff11 	bl	4078bc <__aeabi_dcmpeq>
  40aa9a:	4680      	mov	r8, r0
  40aa9c:	b348      	cbz	r0, 40aaf2 <_dtoa_r+0xa2>
  40aa9e:	2301      	movs	r3, #1
  40aaa0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40aaa2:	6013      	str	r3, [r2, #0]
  40aaa4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aaa6:	2b00      	cmp	r3, #0
  40aaa8:	f000 80cb 	beq.w	40ac42 <_dtoa_r+0x1f2>
  40aaac:	488f      	ldr	r0, [pc, #572]	; (40acec <_dtoa_r+0x29c>)
  40aaae:	6018      	str	r0, [r3, #0]
  40aab0:	3801      	subs	r0, #1
  40aab2:	b019      	add	sp, #100	; 0x64
  40aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aab8:	f242 730f 	movw	r3, #9999	; 0x270f
  40aabc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40aabe:	6013      	str	r3, [r2, #0]
  40aac0:	f1ba 0f00 	cmp.w	sl, #0
  40aac4:	f000 80a6 	beq.w	40ac14 <_dtoa_r+0x1c4>
  40aac8:	4889      	ldr	r0, [pc, #548]	; (40acf0 <_dtoa_r+0x2a0>)
  40aaca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aacc:	2b00      	cmp	r3, #0
  40aace:	d0f0      	beq.n	40aab2 <_dtoa_r+0x62>
  40aad0:	78c3      	ldrb	r3, [r0, #3]
  40aad2:	2b00      	cmp	r3, #0
  40aad4:	f000 80b7 	beq.w	40ac46 <_dtoa_r+0x1f6>
  40aad8:	f100 0308 	add.w	r3, r0, #8
  40aadc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40aade:	6013      	str	r3, [r2, #0]
  40aae0:	b019      	add	sp, #100	; 0x64
  40aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aae6:	2301      	movs	r3, #1
  40aae8:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40aaec:	602b      	str	r3, [r5, #0]
  40aaee:	46cb      	mov	fp, r9
  40aaf0:	e7c7      	b.n	40aa82 <_dtoa_r+0x32>
  40aaf2:	ad17      	add	r5, sp, #92	; 0x5c
  40aaf4:	a916      	add	r1, sp, #88	; 0x58
  40aaf6:	4620      	mov	r0, r4
  40aaf8:	4652      	mov	r2, sl
  40aafa:	9500      	str	r5, [sp, #0]
  40aafc:	465b      	mov	r3, fp
  40aafe:	9101      	str	r1, [sp, #4]
  40ab00:	f001 ffa0 	bl	40ca44 <__d2b>
  40ab04:	9006      	str	r0, [sp, #24]
  40ab06:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40ab0a:	f040 808c 	bne.w	40ac26 <_dtoa_r+0x1d6>
  40ab0e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40ab12:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40ab16:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40ab18:	4445      	add	r5, r8
  40ab1a:	429d      	cmp	r5, r3
  40ab1c:	f2c0 81cc 	blt.w	40aeb8 <_dtoa_r+0x468>
  40ab20:	331f      	adds	r3, #31
  40ab22:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40ab26:	1b5b      	subs	r3, r3, r5
  40ab28:	fa2a f002 	lsr.w	r0, sl, r2
  40ab2c:	fa09 f903 	lsl.w	r9, r9, r3
  40ab30:	ea49 0000 	orr.w	r0, r9, r0
  40ab34:	f7fc fbe4 	bl	407300 <__aeabi_ui2d>
  40ab38:	3d01      	subs	r5, #1
  40ab3a:	2301      	movs	r3, #1
  40ab3c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40ab40:	9311      	str	r3, [sp, #68]	; 0x44
  40ab42:	2200      	movs	r2, #0
  40ab44:	4b6b      	ldr	r3, [pc, #428]	; (40acf4 <_dtoa_r+0x2a4>)
  40ab46:	f7fc fa9d 	bl	407084 <__aeabi_dsub>
  40ab4a:	a361      	add	r3, pc, #388	; (adr r3, 40acd0 <_dtoa_r+0x280>)
  40ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ab50:	f7fc fc4c 	bl	4073ec <__aeabi_dmul>
  40ab54:	a360      	add	r3, pc, #384	; (adr r3, 40acd8 <_dtoa_r+0x288>)
  40ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ab5a:	f7fc fa95 	bl	407088 <__adddf3>
  40ab5e:	4606      	mov	r6, r0
  40ab60:	460f      	mov	r7, r1
  40ab62:	4628      	mov	r0, r5
  40ab64:	f7fc fbdc 	bl	407320 <__aeabi_i2d>
  40ab68:	a35d      	add	r3, pc, #372	; (adr r3, 40ace0 <_dtoa_r+0x290>)
  40ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ab6e:	f7fc fc3d 	bl	4073ec <__aeabi_dmul>
  40ab72:	4602      	mov	r2, r0
  40ab74:	460b      	mov	r3, r1
  40ab76:	4630      	mov	r0, r6
  40ab78:	4639      	mov	r1, r7
  40ab7a:	f7fc fa85 	bl	407088 <__adddf3>
  40ab7e:	4606      	mov	r6, r0
  40ab80:	460f      	mov	r7, r1
  40ab82:	f7fc fecd 	bl	407920 <__aeabi_d2iz>
  40ab86:	2200      	movs	r2, #0
  40ab88:	9002      	str	r0, [sp, #8]
  40ab8a:	4639      	mov	r1, r7
  40ab8c:	4630      	mov	r0, r6
  40ab8e:	2300      	movs	r3, #0
  40ab90:	f7fc fe9e 	bl	4078d0 <__aeabi_dcmplt>
  40ab94:	2800      	cmp	r0, #0
  40ab96:	f040 8171 	bne.w	40ae7c <_dtoa_r+0x42c>
  40ab9a:	9b02      	ldr	r3, [sp, #8]
  40ab9c:	2b16      	cmp	r3, #22
  40ab9e:	f200 8091 	bhi.w	40acc4 <_dtoa_r+0x274>
  40aba2:	9802      	ldr	r0, [sp, #8]
  40aba4:	4652      	mov	r2, sl
  40aba6:	4954      	ldr	r1, [pc, #336]	; (40acf8 <_dtoa_r+0x2a8>)
  40aba8:	465b      	mov	r3, fp
  40abaa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40abae:	e9d1 0100 	ldrd	r0, r1, [r1]
  40abb2:	f7fc feab 	bl	40790c <__aeabi_dcmpgt>
  40abb6:	2800      	cmp	r0, #0
  40abb8:	f000 817c 	beq.w	40aeb4 <_dtoa_r+0x464>
  40abbc:	9b02      	ldr	r3, [sp, #8]
  40abbe:	3b01      	subs	r3, #1
  40abc0:	9302      	str	r3, [sp, #8]
  40abc2:	2300      	movs	r3, #0
  40abc4:	930d      	str	r3, [sp, #52]	; 0x34
  40abc6:	ebc5 0508 	rsb	r5, r5, r8
  40abca:	1e6b      	subs	r3, r5, #1
  40abcc:	9303      	str	r3, [sp, #12]
  40abce:	f100 816c 	bmi.w	40aeaa <_dtoa_r+0x45a>
  40abd2:	2300      	movs	r3, #0
  40abd4:	9307      	str	r3, [sp, #28]
  40abd6:	9b02      	ldr	r3, [sp, #8]
  40abd8:	2b00      	cmp	r3, #0
  40abda:	f2c0 815d 	blt.w	40ae98 <_dtoa_r+0x448>
  40abde:	9a03      	ldr	r2, [sp, #12]
  40abe0:	930c      	str	r3, [sp, #48]	; 0x30
  40abe2:	4611      	mov	r1, r2
  40abe4:	4419      	add	r1, r3
  40abe6:	2300      	movs	r3, #0
  40abe8:	9103      	str	r1, [sp, #12]
  40abea:	930a      	str	r3, [sp, #40]	; 0x28
  40abec:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40abee:	2b09      	cmp	r3, #9
  40abf0:	d82b      	bhi.n	40ac4a <_dtoa_r+0x1fa>
  40abf2:	2b05      	cmp	r3, #5
  40abf4:	f340 867e 	ble.w	40b8f4 <_dtoa_r+0xea4>
  40abf8:	3b04      	subs	r3, #4
  40abfa:	2500      	movs	r5, #0
  40abfc:	9322      	str	r3, [sp, #136]	; 0x88
  40abfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ac00:	3b02      	subs	r3, #2
  40ac02:	2b03      	cmp	r3, #3
  40ac04:	f200 8679 	bhi.w	40b8fa <_dtoa_r+0xeaa>
  40ac08:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ac0c:	0289029b 	.word	0x0289029b
  40ac10:	068d0180 	.word	0x068d0180
  40ac14:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40ac18:	4b35      	ldr	r3, [pc, #212]	; (40acf0 <_dtoa_r+0x2a0>)
  40ac1a:	4a38      	ldr	r2, [pc, #224]	; (40acfc <_dtoa_r+0x2ac>)
  40ac1c:	2800      	cmp	r0, #0
  40ac1e:	bf14      	ite	ne
  40ac20:	4618      	movne	r0, r3
  40ac22:	4610      	moveq	r0, r2
  40ac24:	e751      	b.n	40aaca <_dtoa_r+0x7a>
  40ac26:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40ac2a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40ac2e:	4650      	mov	r0, sl
  40ac30:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40ac34:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40ac38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40ac3c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40ac40:	e77f      	b.n	40ab42 <_dtoa_r+0xf2>
  40ac42:	482f      	ldr	r0, [pc, #188]	; (40ad00 <_dtoa_r+0x2b0>)
  40ac44:	e735      	b.n	40aab2 <_dtoa_r+0x62>
  40ac46:	1cc3      	adds	r3, r0, #3
  40ac48:	e748      	b.n	40aadc <_dtoa_r+0x8c>
  40ac4a:	f04f 33ff 	mov.w	r3, #4294967295
  40ac4e:	2100      	movs	r1, #0
  40ac50:	4620      	mov	r0, r4
  40ac52:	461d      	mov	r5, r3
  40ac54:	9310      	str	r3, [sp, #64]	; 0x40
  40ac56:	2301      	movs	r3, #1
  40ac58:	6461      	str	r1, [r4, #68]	; 0x44
  40ac5a:	9123      	str	r1, [sp, #140]	; 0x8c
  40ac5c:	930b      	str	r3, [sp, #44]	; 0x2c
  40ac5e:	f001 fc3d 	bl	40c4dc <_Balloc>
  40ac62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ac64:	9005      	str	r0, [sp, #20]
  40ac66:	9322      	str	r3, [sp, #136]	; 0x88
  40ac68:	9504      	str	r5, [sp, #16]
  40ac6a:	6420      	str	r0, [r4, #64]	; 0x40
  40ac6c:	9a02      	ldr	r2, [sp, #8]
  40ac6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ac70:	2a0e      	cmp	r2, #14
  40ac72:	dc49      	bgt.n	40ad08 <_dtoa_r+0x2b8>
  40ac74:	2b00      	cmp	r3, #0
  40ac76:	db47      	blt.n	40ad08 <_dtoa_r+0x2b8>
  40ac78:	4b1f      	ldr	r3, [pc, #124]	; (40acf8 <_dtoa_r+0x2a8>)
  40ac7a:	9a02      	ldr	r2, [sp, #8]
  40ac7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ac80:	e9d3 8900 	ldrd	r8, r9, [r3]
  40ac84:	9b04      	ldr	r3, [sp, #16]
  40ac86:	2b00      	cmp	r3, #0
  40ac88:	f300 825e 	bgt.w	40b148 <_dtoa_r+0x6f8>
  40ac8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ac8e:	2b00      	cmp	r3, #0
  40ac90:	f280 825a 	bge.w	40b148 <_dtoa_r+0x6f8>
  40ac94:	9b04      	ldr	r3, [sp, #16]
  40ac96:	2b00      	cmp	r3, #0
  40ac98:	f040 85bf 	bne.w	40b81a <_dtoa_r+0xdca>
  40ac9c:	2200      	movs	r2, #0
  40ac9e:	4b19      	ldr	r3, [pc, #100]	; (40ad04 <_dtoa_r+0x2b4>)
  40aca0:	4640      	mov	r0, r8
  40aca2:	4649      	mov	r1, r9
  40aca4:	f7fc fba2 	bl	4073ec <__aeabi_dmul>
  40aca8:	4652      	mov	r2, sl
  40acaa:	465b      	mov	r3, fp
  40acac:	f7fc fe24 	bl	4078f8 <__aeabi_dcmpge>
  40acb0:	9f04      	ldr	r7, [sp, #16]
  40acb2:	9708      	str	r7, [sp, #32]
  40acb4:	2800      	cmp	r0, #0
  40acb6:	f000 80bd 	beq.w	40ae34 <_dtoa_r+0x3e4>
  40acba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40acbc:	9d05      	ldr	r5, [sp, #20]
  40acbe:	43db      	mvns	r3, r3
  40acc0:	9302      	str	r3, [sp, #8]
  40acc2:	e0be      	b.n	40ae42 <_dtoa_r+0x3f2>
  40acc4:	2301      	movs	r3, #1
  40acc6:	930d      	str	r3, [sp, #52]	; 0x34
  40acc8:	e77d      	b.n	40abc6 <_dtoa_r+0x176>
  40acca:	bf00      	nop
  40accc:	f3af 8000 	nop.w
  40acd0:	636f4361 	.word	0x636f4361
  40acd4:	3fd287a7 	.word	0x3fd287a7
  40acd8:	8b60c8b3 	.word	0x8b60c8b3
  40acdc:	3fc68a28 	.word	0x3fc68a28
  40ace0:	509f79fb 	.word	0x509f79fb
  40ace4:	3fd34413 	.word	0x3fd34413
  40ace8:	7ff00000 	.word	0x7ff00000
  40acec:	0040e4f9 	.word	0x0040e4f9
  40acf0:	0040e62c 	.word	0x0040e62c
  40acf4:	3ff80000 	.word	0x3ff80000
  40acf8:	0040e640 	.word	0x0040e640
  40acfc:	0040e620 	.word	0x0040e620
  40ad00:	0040e4f8 	.word	0x0040e4f8
  40ad04:	40140000 	.word	0x40140000
  40ad08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ad0a:	2a00      	cmp	r2, #0
  40ad0c:	f040 80e1 	bne.w	40aed2 <_dtoa_r+0x482>
  40ad10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ad12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40ad14:	9d07      	ldr	r5, [sp, #28]
  40ad16:	9308      	str	r3, [sp, #32]
  40ad18:	9903      	ldr	r1, [sp, #12]
  40ad1a:	2900      	cmp	r1, #0
  40ad1c:	460b      	mov	r3, r1
  40ad1e:	dd0a      	ble.n	40ad36 <_dtoa_r+0x2e6>
  40ad20:	2d00      	cmp	r5, #0
  40ad22:	dd08      	ble.n	40ad36 <_dtoa_r+0x2e6>
  40ad24:	42a9      	cmp	r1, r5
  40ad26:	9a07      	ldr	r2, [sp, #28]
  40ad28:	bfa8      	it	ge
  40ad2a:	462b      	movge	r3, r5
  40ad2c:	1ad2      	subs	r2, r2, r3
  40ad2e:	1aed      	subs	r5, r5, r3
  40ad30:	1acb      	subs	r3, r1, r3
  40ad32:	9207      	str	r2, [sp, #28]
  40ad34:	9303      	str	r3, [sp, #12]
  40ad36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ad38:	2b00      	cmp	r3, #0
  40ad3a:	dd1b      	ble.n	40ad74 <_dtoa_r+0x324>
  40ad3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ad3e:	2b00      	cmp	r3, #0
  40ad40:	f000 84ce 	beq.w	40b6e0 <_dtoa_r+0xc90>
  40ad44:	2e00      	cmp	r6, #0
  40ad46:	dd11      	ble.n	40ad6c <_dtoa_r+0x31c>
  40ad48:	9908      	ldr	r1, [sp, #32]
  40ad4a:	4632      	mov	r2, r6
  40ad4c:	4620      	mov	r0, r4
  40ad4e:	f001 fd39 	bl	40c7c4 <__pow5mult>
  40ad52:	9f06      	ldr	r7, [sp, #24]
  40ad54:	4601      	mov	r1, r0
  40ad56:	9008      	str	r0, [sp, #32]
  40ad58:	463a      	mov	r2, r7
  40ad5a:	4620      	mov	r0, r4
  40ad5c:	f001 fc90 	bl	40c680 <__multiply>
  40ad60:	4603      	mov	r3, r0
  40ad62:	4639      	mov	r1, r7
  40ad64:	4620      	mov	r0, r4
  40ad66:	9306      	str	r3, [sp, #24]
  40ad68:	f001 fbe0 	bl	40c52c <_Bfree>
  40ad6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ad6e:	1b9a      	subs	r2, r3, r6
  40ad70:	f040 84ff 	bne.w	40b772 <_dtoa_r+0xd22>
  40ad74:	4620      	mov	r0, r4
  40ad76:	2101      	movs	r1, #1
  40ad78:	f001 fc78 	bl	40c66c <__i2b>
  40ad7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ad7e:	4607      	mov	r7, r0
  40ad80:	2b00      	cmp	r3, #0
  40ad82:	f340 8282 	ble.w	40b28a <_dtoa_r+0x83a>
  40ad86:	4601      	mov	r1, r0
  40ad88:	461a      	mov	r2, r3
  40ad8a:	4620      	mov	r0, r4
  40ad8c:	f001 fd1a 	bl	40c7c4 <__pow5mult>
  40ad90:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ad92:	4607      	mov	r7, r0
  40ad94:	2b01      	cmp	r3, #1
  40ad96:	f340 84f3 	ble.w	40b780 <_dtoa_r+0xd30>
  40ad9a:	f04f 0800 	mov.w	r8, #0
  40ad9e:	693b      	ldr	r3, [r7, #16]
  40ada0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40ada4:	6918      	ldr	r0, [r3, #16]
  40ada6:	f001 fc0d 	bl	40c5c4 <__hi0bits>
  40adaa:	f1c0 0020 	rsb	r0, r0, #32
  40adae:	9b03      	ldr	r3, [sp, #12]
  40adb0:	4418      	add	r0, r3
  40adb2:	f010 001f 	ands.w	r0, r0, #31
  40adb6:	f000 82a0 	beq.w	40b2fa <_dtoa_r+0x8aa>
  40adba:	f1c0 0320 	rsb	r3, r0, #32
  40adbe:	2b04      	cmp	r3, #4
  40adc0:	f340 8592 	ble.w	40b8e8 <_dtoa_r+0xe98>
  40adc4:	f1c0 001c 	rsb	r0, r0, #28
  40adc8:	9b07      	ldr	r3, [sp, #28]
  40adca:	4405      	add	r5, r0
  40adcc:	4403      	add	r3, r0
  40adce:	9307      	str	r3, [sp, #28]
  40add0:	9b03      	ldr	r3, [sp, #12]
  40add2:	4403      	add	r3, r0
  40add4:	9303      	str	r3, [sp, #12]
  40add6:	9b07      	ldr	r3, [sp, #28]
  40add8:	2b00      	cmp	r3, #0
  40adda:	dd05      	ble.n	40ade8 <_dtoa_r+0x398>
  40addc:	9906      	ldr	r1, [sp, #24]
  40adde:	461a      	mov	r2, r3
  40ade0:	4620      	mov	r0, r4
  40ade2:	f001 fd3f 	bl	40c864 <__lshift>
  40ade6:	9006      	str	r0, [sp, #24]
  40ade8:	9b03      	ldr	r3, [sp, #12]
  40adea:	2b00      	cmp	r3, #0
  40adec:	dd05      	ble.n	40adfa <_dtoa_r+0x3aa>
  40adee:	4639      	mov	r1, r7
  40adf0:	461a      	mov	r2, r3
  40adf2:	4620      	mov	r0, r4
  40adf4:	f001 fd36 	bl	40c864 <__lshift>
  40adf8:	4607      	mov	r7, r0
  40adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40adfc:	2b00      	cmp	r3, #0
  40adfe:	f040 838b 	bne.w	40b518 <_dtoa_r+0xac8>
  40ae02:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ae04:	2b02      	cmp	r3, #2
  40ae06:	f340 827a 	ble.w	40b2fe <_dtoa_r+0x8ae>
  40ae0a:	9b04      	ldr	r3, [sp, #16]
  40ae0c:	2b00      	cmp	r3, #0
  40ae0e:	f300 8276 	bgt.w	40b2fe <_dtoa_r+0x8ae>
  40ae12:	9b04      	ldr	r3, [sp, #16]
  40ae14:	2b00      	cmp	r3, #0
  40ae16:	f47f af50 	bne.w	40acba <_dtoa_r+0x26a>
  40ae1a:	4639      	mov	r1, r7
  40ae1c:	2205      	movs	r2, #5
  40ae1e:	4620      	mov	r0, r4
  40ae20:	f001 fb8e 	bl	40c540 <__multadd>
  40ae24:	4607      	mov	r7, r0
  40ae26:	9806      	ldr	r0, [sp, #24]
  40ae28:	4639      	mov	r1, r7
  40ae2a:	f001 fd75 	bl	40c918 <__mcmp>
  40ae2e:	2800      	cmp	r0, #0
  40ae30:	f77f af43 	ble.w	40acba <_dtoa_r+0x26a>
  40ae34:	9a02      	ldr	r2, [sp, #8]
  40ae36:	2331      	movs	r3, #49	; 0x31
  40ae38:	3201      	adds	r2, #1
  40ae3a:	9202      	str	r2, [sp, #8]
  40ae3c:	9a05      	ldr	r2, [sp, #20]
  40ae3e:	1c55      	adds	r5, r2, #1
  40ae40:	7013      	strb	r3, [r2, #0]
  40ae42:	4639      	mov	r1, r7
  40ae44:	4620      	mov	r0, r4
  40ae46:	f001 fb71 	bl	40c52c <_Bfree>
  40ae4a:	9b08      	ldr	r3, [sp, #32]
  40ae4c:	b11b      	cbz	r3, 40ae56 <_dtoa_r+0x406>
  40ae4e:	9908      	ldr	r1, [sp, #32]
  40ae50:	4620      	mov	r0, r4
  40ae52:	f001 fb6b 	bl	40c52c <_Bfree>
  40ae56:	4620      	mov	r0, r4
  40ae58:	9906      	ldr	r1, [sp, #24]
  40ae5a:	f001 fb67 	bl	40c52c <_Bfree>
  40ae5e:	2200      	movs	r2, #0
  40ae60:	9b02      	ldr	r3, [sp, #8]
  40ae62:	702a      	strb	r2, [r5, #0]
  40ae64:	3301      	adds	r3, #1
  40ae66:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40ae68:	6013      	str	r3, [r2, #0]
  40ae6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae6c:	2b00      	cmp	r3, #0
  40ae6e:	f000 82a3 	beq.w	40b3b8 <_dtoa_r+0x968>
  40ae72:	9805      	ldr	r0, [sp, #20]
  40ae74:	601d      	str	r5, [r3, #0]
  40ae76:	b019      	add	sp, #100	; 0x64
  40ae78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae7c:	9802      	ldr	r0, [sp, #8]
  40ae7e:	f7fc fa4f 	bl	407320 <__aeabi_i2d>
  40ae82:	4632      	mov	r2, r6
  40ae84:	463b      	mov	r3, r7
  40ae86:	f7fc fd19 	bl	4078bc <__aeabi_dcmpeq>
  40ae8a:	2800      	cmp	r0, #0
  40ae8c:	f47f ae85 	bne.w	40ab9a <_dtoa_r+0x14a>
  40ae90:	9b02      	ldr	r3, [sp, #8]
  40ae92:	3b01      	subs	r3, #1
  40ae94:	9302      	str	r3, [sp, #8]
  40ae96:	e680      	b.n	40ab9a <_dtoa_r+0x14a>
  40ae98:	9a07      	ldr	r2, [sp, #28]
  40ae9a:	9b02      	ldr	r3, [sp, #8]
  40ae9c:	1ad2      	subs	r2, r2, r3
  40ae9e:	425b      	negs	r3, r3
  40aea0:	930a      	str	r3, [sp, #40]	; 0x28
  40aea2:	2300      	movs	r3, #0
  40aea4:	9207      	str	r2, [sp, #28]
  40aea6:	930c      	str	r3, [sp, #48]	; 0x30
  40aea8:	e6a0      	b.n	40abec <_dtoa_r+0x19c>
  40aeaa:	425b      	negs	r3, r3
  40aeac:	9307      	str	r3, [sp, #28]
  40aeae:	2300      	movs	r3, #0
  40aeb0:	9303      	str	r3, [sp, #12]
  40aeb2:	e690      	b.n	40abd6 <_dtoa_r+0x186>
  40aeb4:	900d      	str	r0, [sp, #52]	; 0x34
  40aeb6:	e686      	b.n	40abc6 <_dtoa_r+0x176>
  40aeb8:	4bbd      	ldr	r3, [pc, #756]	; (40b1b0 <_dtoa_r+0x760>)
  40aeba:	1b5b      	subs	r3, r3, r5
  40aebc:	fa0a f003 	lsl.w	r0, sl, r3
  40aec0:	e638      	b.n	40ab34 <_dtoa_r+0xe4>
  40aec2:	2100      	movs	r1, #0
  40aec4:	f04f 32ff 	mov.w	r2, #4294967295
  40aec8:	9123      	str	r1, [sp, #140]	; 0x8c
  40aeca:	2101      	movs	r1, #1
  40aecc:	9204      	str	r2, [sp, #16]
  40aece:	910b      	str	r1, [sp, #44]	; 0x2c
  40aed0:	9210      	str	r2, [sp, #64]	; 0x40
  40aed2:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40aed4:	2a01      	cmp	r2, #1
  40aed6:	f340 8460 	ble.w	40b79a <_dtoa_r+0xd4a>
  40aeda:	9b04      	ldr	r3, [sp, #16]
  40aedc:	1e5e      	subs	r6, r3, #1
  40aede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40aee0:	42b3      	cmp	r3, r6
  40aee2:	f2c0 8405 	blt.w	40b6f0 <_dtoa_r+0xca0>
  40aee6:	1b9e      	subs	r6, r3, r6
  40aee8:	9b04      	ldr	r3, [sp, #16]
  40aeea:	2b00      	cmp	r3, #0
  40aeec:	f2c0 8461 	blt.w	40b7b2 <_dtoa_r+0xd62>
  40aef0:	9d07      	ldr	r5, [sp, #28]
  40aef2:	9b04      	ldr	r3, [sp, #16]
  40aef4:	9a07      	ldr	r2, [sp, #28]
  40aef6:	4620      	mov	r0, r4
  40aef8:	2101      	movs	r1, #1
  40aefa:	441a      	add	r2, r3
  40aefc:	9207      	str	r2, [sp, #28]
  40aefe:	9a03      	ldr	r2, [sp, #12]
  40af00:	441a      	add	r2, r3
  40af02:	9203      	str	r2, [sp, #12]
  40af04:	f001 fbb2 	bl	40c66c <__i2b>
  40af08:	9008      	str	r0, [sp, #32]
  40af0a:	e705      	b.n	40ad18 <_dtoa_r+0x2c8>
  40af0c:	2301      	movs	r3, #1
  40af0e:	930b      	str	r3, [sp, #44]	; 0x2c
  40af10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40af12:	2b00      	cmp	r3, #0
  40af14:	f340 83df 	ble.w	40b6d6 <_dtoa_r+0xc86>
  40af18:	2b0e      	cmp	r3, #14
  40af1a:	bf8c      	ite	hi
  40af1c:	2500      	movhi	r5, #0
  40af1e:	f005 0501 	andls.w	r5, r5, #1
  40af22:	461e      	mov	r6, r3
  40af24:	9310      	str	r3, [sp, #64]	; 0x40
  40af26:	9304      	str	r3, [sp, #16]
  40af28:	2100      	movs	r1, #0
  40af2a:	2e17      	cmp	r6, #23
  40af2c:	6461      	str	r1, [r4, #68]	; 0x44
  40af2e:	d909      	bls.n	40af44 <_dtoa_r+0x4f4>
  40af30:	2201      	movs	r2, #1
  40af32:	2304      	movs	r3, #4
  40af34:	005b      	lsls	r3, r3, #1
  40af36:	4611      	mov	r1, r2
  40af38:	3201      	adds	r2, #1
  40af3a:	f103 0014 	add.w	r0, r3, #20
  40af3e:	42b0      	cmp	r0, r6
  40af40:	d9f8      	bls.n	40af34 <_dtoa_r+0x4e4>
  40af42:	6461      	str	r1, [r4, #68]	; 0x44
  40af44:	4620      	mov	r0, r4
  40af46:	f001 fac9 	bl	40c4dc <_Balloc>
  40af4a:	9005      	str	r0, [sp, #20]
  40af4c:	6420      	str	r0, [r4, #64]	; 0x40
  40af4e:	2d00      	cmp	r5, #0
  40af50:	f43f ae8c 	beq.w	40ac6c <_dtoa_r+0x21c>
  40af54:	9802      	ldr	r0, [sp, #8]
  40af56:	2800      	cmp	r0, #0
  40af58:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  40af5c:	f340 8233 	ble.w	40b3c6 <_dtoa_r+0x976>
  40af60:	4a94      	ldr	r2, [pc, #592]	; (40b1b4 <_dtoa_r+0x764>)
  40af62:	f000 030f 	and.w	r3, r0, #15
  40af66:	1105      	asrs	r5, r0, #4
  40af68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40af6c:	06ea      	lsls	r2, r5, #27
  40af6e:	e9d3 6700 	ldrd	r6, r7, [r3]
  40af72:	f140 821c 	bpl.w	40b3ae <_dtoa_r+0x95e>
  40af76:	4b90      	ldr	r3, [pc, #576]	; (40b1b8 <_dtoa_r+0x768>)
  40af78:	4650      	mov	r0, sl
  40af7a:	4659      	mov	r1, fp
  40af7c:	f005 050f 	and.w	r5, r5, #15
  40af80:	f04f 0803 	mov.w	r8, #3
  40af84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40af88:	f7fc fb5a 	bl	407640 <__aeabi_ddiv>
  40af8c:	4682      	mov	sl, r0
  40af8e:	468b      	mov	fp, r1
  40af90:	b18d      	cbz	r5, 40afb6 <_dtoa_r+0x566>
  40af92:	f8df 9224 	ldr.w	r9, [pc, #548]	; 40b1b8 <_dtoa_r+0x768>
  40af96:	07eb      	lsls	r3, r5, #31
  40af98:	4630      	mov	r0, r6
  40af9a:	4639      	mov	r1, r7
  40af9c:	d507      	bpl.n	40afae <_dtoa_r+0x55e>
  40af9e:	f108 0801 	add.w	r8, r8, #1
  40afa2:	e9d9 2300 	ldrd	r2, r3, [r9]
  40afa6:	f7fc fa21 	bl	4073ec <__aeabi_dmul>
  40afaa:	4606      	mov	r6, r0
  40afac:	460f      	mov	r7, r1
  40afae:	106d      	asrs	r5, r5, #1
  40afb0:	f109 0908 	add.w	r9, r9, #8
  40afb4:	d1ef      	bne.n	40af96 <_dtoa_r+0x546>
  40afb6:	4650      	mov	r0, sl
  40afb8:	4659      	mov	r1, fp
  40afba:	4632      	mov	r2, r6
  40afbc:	463b      	mov	r3, r7
  40afbe:	f7fc fb3f 	bl	407640 <__aeabi_ddiv>
  40afc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40afc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40afc8:	b143      	cbz	r3, 40afdc <_dtoa_r+0x58c>
  40afca:	2200      	movs	r2, #0
  40afcc:	4b7b      	ldr	r3, [pc, #492]	; (40b1bc <_dtoa_r+0x76c>)
  40afce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40afd2:	f7fc fc7d 	bl	4078d0 <__aeabi_dcmplt>
  40afd6:	2800      	cmp	r0, #0
  40afd8:	f040 8393 	bne.w	40b702 <_dtoa_r+0xcb2>
  40afdc:	4640      	mov	r0, r8
  40afde:	f7fc f99f 	bl	407320 <__aeabi_i2d>
  40afe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40afe6:	f7fc fa01 	bl	4073ec <__aeabi_dmul>
  40afea:	4b75      	ldr	r3, [pc, #468]	; (40b1c0 <_dtoa_r+0x770>)
  40afec:	2200      	movs	r2, #0
  40afee:	f7fc f84b 	bl	407088 <__adddf3>
  40aff2:	9b04      	ldr	r3, [sp, #16]
  40aff4:	4606      	mov	r6, r0
  40aff6:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40affa:	2b00      	cmp	r3, #0
  40affc:	f000 8161 	beq.w	40b2c2 <_dtoa_r+0x872>
  40b000:	9b02      	ldr	r3, [sp, #8]
  40b002:	f8dd c010 	ldr.w	ip, [sp, #16]
  40b006:	9314      	str	r3, [sp, #80]	; 0x50
  40b008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b00a:	2b00      	cmp	r3, #0
  40b00c:	f000 820b 	beq.w	40b426 <_dtoa_r+0x9d6>
  40b010:	4b68      	ldr	r3, [pc, #416]	; (40b1b4 <_dtoa_r+0x764>)
  40b012:	2000      	movs	r0, #0
  40b014:	9a05      	ldr	r2, [sp, #20]
  40b016:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40b01a:	496a      	ldr	r1, [pc, #424]	; (40b1c4 <_dtoa_r+0x774>)
  40b01c:	1c55      	adds	r5, r2, #1
  40b01e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40b022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40b026:	f7fc fb0b 	bl	407640 <__aeabi_ddiv>
  40b02a:	4632      	mov	r2, r6
  40b02c:	463b      	mov	r3, r7
  40b02e:	f7fc f829 	bl	407084 <__aeabi_dsub>
  40b032:	4682      	mov	sl, r0
  40b034:	468b      	mov	fp, r1
  40b036:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40b03a:	4649      	mov	r1, r9
  40b03c:	4640      	mov	r0, r8
  40b03e:	f7fc fc6f 	bl	407920 <__aeabi_d2iz>
  40b042:	4606      	mov	r6, r0
  40b044:	f7fc f96c 	bl	407320 <__aeabi_i2d>
  40b048:	4602      	mov	r2, r0
  40b04a:	3630      	adds	r6, #48	; 0x30
  40b04c:	460b      	mov	r3, r1
  40b04e:	4640      	mov	r0, r8
  40b050:	4649      	mov	r1, r9
  40b052:	f7fc f817 	bl	407084 <__aeabi_dsub>
  40b056:	9f05      	ldr	r7, [sp, #20]
  40b058:	4680      	mov	r8, r0
  40b05a:	4689      	mov	r9, r1
  40b05c:	b2f6      	uxtb	r6, r6
  40b05e:	4650      	mov	r0, sl
  40b060:	4659      	mov	r1, fp
  40b062:	4642      	mov	r2, r8
  40b064:	464b      	mov	r3, r9
  40b066:	703e      	strb	r6, [r7, #0]
  40b068:	f7fc fc50 	bl	40790c <__aeabi_dcmpgt>
  40b06c:	2800      	cmp	r0, #0
  40b06e:	f040 8243 	bne.w	40b4f8 <_dtoa_r+0xaa8>
  40b072:	4642      	mov	r2, r8
  40b074:	464b      	mov	r3, r9
  40b076:	2000      	movs	r0, #0
  40b078:	4950      	ldr	r1, [pc, #320]	; (40b1bc <_dtoa_r+0x76c>)
  40b07a:	f7fc f803 	bl	407084 <__aeabi_dsub>
  40b07e:	4602      	mov	r2, r0
  40b080:	460b      	mov	r3, r1
  40b082:	4650      	mov	r0, sl
  40b084:	4659      	mov	r1, fp
  40b086:	f7fc fc41 	bl	40790c <__aeabi_dcmpgt>
  40b08a:	2800      	cmp	r0, #0
  40b08c:	f040 80eb 	bne.w	40b266 <_dtoa_r+0x816>
  40b090:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40b094:	f1bc 0f01 	cmp.w	ip, #1
  40b098:	f340 8192 	ble.w	40b3c0 <_dtoa_r+0x970>
  40b09c:	9f05      	ldr	r7, [sp, #20]
  40b09e:	9412      	str	r4, [sp, #72]	; 0x48
  40b0a0:	4467      	add	r7, ip
  40b0a2:	9708      	str	r7, [sp, #32]
  40b0a4:	e00e      	b.n	40b0c4 <_dtoa_r+0x674>
  40b0a6:	2000      	movs	r0, #0
  40b0a8:	4944      	ldr	r1, [pc, #272]	; (40b1bc <_dtoa_r+0x76c>)
  40b0aa:	f7fb ffeb 	bl	407084 <__aeabi_dsub>
  40b0ae:	4652      	mov	r2, sl
  40b0b0:	465b      	mov	r3, fp
  40b0b2:	f7fc fc0d 	bl	4078d0 <__aeabi_dcmplt>
  40b0b6:	2800      	cmp	r0, #0
  40b0b8:	f040 83a1 	bne.w	40b7fe <_dtoa_r+0xdae>
  40b0bc:	9b08      	ldr	r3, [sp, #32]
  40b0be:	429d      	cmp	r5, r3
  40b0c0:	f000 817d 	beq.w	40b3be <_dtoa_r+0x96e>
  40b0c4:	4650      	mov	r0, sl
  40b0c6:	4659      	mov	r1, fp
  40b0c8:	2200      	movs	r2, #0
  40b0ca:	4b3f      	ldr	r3, [pc, #252]	; (40b1c8 <_dtoa_r+0x778>)
  40b0cc:	f7fc f98e 	bl	4073ec <__aeabi_dmul>
  40b0d0:	2200      	movs	r2, #0
  40b0d2:	4b3d      	ldr	r3, [pc, #244]	; (40b1c8 <_dtoa_r+0x778>)
  40b0d4:	4682      	mov	sl, r0
  40b0d6:	468b      	mov	fp, r1
  40b0d8:	4640      	mov	r0, r8
  40b0da:	4649      	mov	r1, r9
  40b0dc:	f7fc f986 	bl	4073ec <__aeabi_dmul>
  40b0e0:	4606      	mov	r6, r0
  40b0e2:	460f      	mov	r7, r1
  40b0e4:	f7fc fc1c 	bl	407920 <__aeabi_d2iz>
  40b0e8:	4604      	mov	r4, r0
  40b0ea:	f7fc f919 	bl	407320 <__aeabi_i2d>
  40b0ee:	4602      	mov	r2, r0
  40b0f0:	460b      	mov	r3, r1
  40b0f2:	3430      	adds	r4, #48	; 0x30
  40b0f4:	4630      	mov	r0, r6
  40b0f6:	4639      	mov	r1, r7
  40b0f8:	b2e6      	uxtb	r6, r4
  40b0fa:	f7fb ffc3 	bl	407084 <__aeabi_dsub>
  40b0fe:	4680      	mov	r8, r0
  40b100:	4689      	mov	r9, r1
  40b102:	4652      	mov	r2, sl
  40b104:	465b      	mov	r3, fp
  40b106:	f805 6b01 	strb.w	r6, [r5], #1
  40b10a:	f7fc fbe1 	bl	4078d0 <__aeabi_dcmplt>
  40b10e:	4642      	mov	r2, r8
  40b110:	464b      	mov	r3, r9
  40b112:	2800      	cmp	r0, #0
  40b114:	d0c7      	beq.n	40b0a6 <_dtoa_r+0x656>
  40b116:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b118:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40b11a:	9302      	str	r3, [sp, #8]
  40b11c:	e69b      	b.n	40ae56 <_dtoa_r+0x406>
  40b11e:	2300      	movs	r3, #0
  40b120:	930b      	str	r3, [sp, #44]	; 0x2c
  40b122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b124:	9a02      	ldr	r2, [sp, #8]
  40b126:	4413      	add	r3, r2
  40b128:	9310      	str	r3, [sp, #64]	; 0x40
  40b12a:	3301      	adds	r3, #1
  40b12c:	2b00      	cmp	r3, #0
  40b12e:	9304      	str	r3, [sp, #16]
  40b130:	f340 82c9 	ble.w	40b6c6 <_dtoa_r+0xc76>
  40b134:	9e04      	ldr	r6, [sp, #16]
  40b136:	2e0e      	cmp	r6, #14
  40b138:	bf8c      	ite	hi
  40b13a:	2500      	movhi	r5, #0
  40b13c:	f005 0501 	andls.w	r5, r5, #1
  40b140:	e6f2      	b.n	40af28 <_dtoa_r+0x4d8>
  40b142:	2300      	movs	r3, #0
  40b144:	930b      	str	r3, [sp, #44]	; 0x2c
  40b146:	e6e3      	b.n	40af10 <_dtoa_r+0x4c0>
  40b148:	9905      	ldr	r1, [sp, #20]
  40b14a:	4642      	mov	r2, r8
  40b14c:	464b      	mov	r3, r9
  40b14e:	4650      	mov	r0, sl
  40b150:	1c4d      	adds	r5, r1, #1
  40b152:	4659      	mov	r1, fp
  40b154:	f7fc fa74 	bl	407640 <__aeabi_ddiv>
  40b158:	4656      	mov	r6, sl
  40b15a:	f7fc fbe1 	bl	407920 <__aeabi_d2iz>
  40b15e:	4682      	mov	sl, r0
  40b160:	f7fc f8de 	bl	407320 <__aeabi_i2d>
  40b164:	4642      	mov	r2, r8
  40b166:	464b      	mov	r3, r9
  40b168:	f7fc f940 	bl	4073ec <__aeabi_dmul>
  40b16c:	4602      	mov	r2, r0
  40b16e:	460b      	mov	r3, r1
  40b170:	4630      	mov	r0, r6
  40b172:	4659      	mov	r1, fp
  40b174:	f7fb ff86 	bl	407084 <__aeabi_dsub>
  40b178:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40b17c:	9a05      	ldr	r2, [sp, #20]
  40b17e:	4606      	mov	r6, r0
  40b180:	460f      	mov	r7, r1
  40b182:	7013      	strb	r3, [r2, #0]
  40b184:	9b04      	ldr	r3, [sp, #16]
  40b186:	2b01      	cmp	r3, #1
  40b188:	d04d      	beq.n	40b226 <_dtoa_r+0x7d6>
  40b18a:	2200      	movs	r2, #0
  40b18c:	4b0e      	ldr	r3, [pc, #56]	; (40b1c8 <_dtoa_r+0x778>)
  40b18e:	f7fc f92d 	bl	4073ec <__aeabi_dmul>
  40b192:	2200      	movs	r2, #0
  40b194:	2300      	movs	r3, #0
  40b196:	4606      	mov	r6, r0
  40b198:	460f      	mov	r7, r1
  40b19a:	f7fc fb8f 	bl	4078bc <__aeabi_dcmpeq>
  40b19e:	2800      	cmp	r0, #0
  40b1a0:	f47f ae59 	bne.w	40ae56 <_dtoa_r+0x406>
  40b1a4:	9403      	str	r4, [sp, #12]
  40b1a6:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b1aa:	9c04      	ldr	r4, [sp, #16]
  40b1ac:	e019      	b.n	40b1e2 <_dtoa_r+0x792>
  40b1ae:	bf00      	nop
  40b1b0:	fffffbee 	.word	0xfffffbee
  40b1b4:	0040e640 	.word	0x0040e640
  40b1b8:	0040e718 	.word	0x0040e718
  40b1bc:	3ff00000 	.word	0x3ff00000
  40b1c0:	401c0000 	.word	0x401c0000
  40b1c4:	3fe00000 	.word	0x3fe00000
  40b1c8:	40240000 	.word	0x40240000
  40b1cc:	f7fc f90e 	bl	4073ec <__aeabi_dmul>
  40b1d0:	2200      	movs	r2, #0
  40b1d2:	2300      	movs	r3, #0
  40b1d4:	4606      	mov	r6, r0
  40b1d6:	460f      	mov	r7, r1
  40b1d8:	f7fc fb70 	bl	4078bc <__aeabi_dcmpeq>
  40b1dc:	2800      	cmp	r0, #0
  40b1de:	f040 82e5 	bne.w	40b7ac <_dtoa_r+0xd5c>
  40b1e2:	4642      	mov	r2, r8
  40b1e4:	464b      	mov	r3, r9
  40b1e6:	4630      	mov	r0, r6
  40b1e8:	4639      	mov	r1, r7
  40b1ea:	f7fc fa29 	bl	407640 <__aeabi_ddiv>
  40b1ee:	f7fc fb97 	bl	407920 <__aeabi_d2iz>
  40b1f2:	4682      	mov	sl, r0
  40b1f4:	f7fc f894 	bl	407320 <__aeabi_i2d>
  40b1f8:	4642      	mov	r2, r8
  40b1fa:	464b      	mov	r3, r9
  40b1fc:	f7fc f8f6 	bl	4073ec <__aeabi_dmul>
  40b200:	4602      	mov	r2, r0
  40b202:	460b      	mov	r3, r1
  40b204:	4630      	mov	r0, r6
  40b206:	4639      	mov	r1, r7
  40b208:	f7fb ff3c 	bl	407084 <__aeabi_dsub>
  40b20c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40b210:	4606      	mov	r6, r0
  40b212:	460f      	mov	r7, r1
  40b214:	f805 eb01 	strb.w	lr, [r5], #1
  40b218:	ebcb 0e05 	rsb	lr, fp, r5
  40b21c:	2200      	movs	r2, #0
  40b21e:	4bb8      	ldr	r3, [pc, #736]	; (40b500 <_dtoa_r+0xab0>)
  40b220:	4574      	cmp	r4, lr
  40b222:	d1d3      	bne.n	40b1cc <_dtoa_r+0x77c>
  40b224:	9c03      	ldr	r4, [sp, #12]
  40b226:	4632      	mov	r2, r6
  40b228:	463b      	mov	r3, r7
  40b22a:	4630      	mov	r0, r6
  40b22c:	4639      	mov	r1, r7
  40b22e:	f7fb ff2b 	bl	407088 <__adddf3>
  40b232:	4606      	mov	r6, r0
  40b234:	460f      	mov	r7, r1
  40b236:	4640      	mov	r0, r8
  40b238:	4649      	mov	r1, r9
  40b23a:	4632      	mov	r2, r6
  40b23c:	463b      	mov	r3, r7
  40b23e:	f7fc fb47 	bl	4078d0 <__aeabi_dcmplt>
  40b242:	b960      	cbnz	r0, 40b25e <_dtoa_r+0x80e>
  40b244:	4640      	mov	r0, r8
  40b246:	4649      	mov	r1, r9
  40b248:	4632      	mov	r2, r6
  40b24a:	463b      	mov	r3, r7
  40b24c:	f7fc fb36 	bl	4078bc <__aeabi_dcmpeq>
  40b250:	2800      	cmp	r0, #0
  40b252:	f43f ae00 	beq.w	40ae56 <_dtoa_r+0x406>
  40b256:	f01a 0f01 	tst.w	sl, #1
  40b25a:	f43f adfc 	beq.w	40ae56 <_dtoa_r+0x406>
  40b25e:	9b02      	ldr	r3, [sp, #8]
  40b260:	9314      	str	r3, [sp, #80]	; 0x50
  40b262:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40b266:	1e6a      	subs	r2, r5, #1
  40b268:	9b05      	ldr	r3, [sp, #20]
  40b26a:	e004      	b.n	40b276 <_dtoa_r+0x826>
  40b26c:	429a      	cmp	r2, r3
  40b26e:	f000 8277 	beq.w	40b760 <_dtoa_r+0xd10>
  40b272:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40b276:	2e39      	cmp	r6, #57	; 0x39
  40b278:	f102 0501 	add.w	r5, r2, #1
  40b27c:	d0f6      	beq.n	40b26c <_dtoa_r+0x81c>
  40b27e:	1c73      	adds	r3, r6, #1
  40b280:	9914      	ldr	r1, [sp, #80]	; 0x50
  40b282:	b2db      	uxtb	r3, r3
  40b284:	9102      	str	r1, [sp, #8]
  40b286:	7013      	strb	r3, [r2, #0]
  40b288:	e5e5      	b.n	40ae56 <_dtoa_r+0x406>
  40b28a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40b28c:	2b01      	cmp	r3, #1
  40b28e:	f340 8161 	ble.w	40b554 <_dtoa_r+0xb04>
  40b292:	f04f 0800 	mov.w	r8, #0
  40b296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b298:	2b00      	cmp	r3, #0
  40b29a:	f47f ad80 	bne.w	40ad9e <_dtoa_r+0x34e>
  40b29e:	2001      	movs	r0, #1
  40b2a0:	e585      	b.n	40adae <_dtoa_r+0x35e>
  40b2a2:	4640      	mov	r0, r8
  40b2a4:	f7fc f83c 	bl	407320 <__aeabi_i2d>
  40b2a8:	4602      	mov	r2, r0
  40b2aa:	460b      	mov	r3, r1
  40b2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b2b0:	f7fc f89c 	bl	4073ec <__aeabi_dmul>
  40b2b4:	2200      	movs	r2, #0
  40b2b6:	4b93      	ldr	r3, [pc, #588]	; (40b504 <_dtoa_r+0xab4>)
  40b2b8:	f7fb fee6 	bl	407088 <__adddf3>
  40b2bc:	4606      	mov	r6, r0
  40b2be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40b2c2:	2200      	movs	r2, #0
  40b2c4:	4b90      	ldr	r3, [pc, #576]	; (40b508 <_dtoa_r+0xab8>)
  40b2c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b2ca:	f7fb fedb 	bl	407084 <__aeabi_dsub>
  40b2ce:	4632      	mov	r2, r6
  40b2d0:	463b      	mov	r3, r7
  40b2d2:	4680      	mov	r8, r0
  40b2d4:	4689      	mov	r9, r1
  40b2d6:	f7fc fb19 	bl	40790c <__aeabi_dcmpgt>
  40b2da:	4605      	mov	r5, r0
  40b2dc:	2800      	cmp	r0, #0
  40b2de:	f040 809f 	bne.w	40b420 <_dtoa_r+0x9d0>
  40b2e2:	4632      	mov	r2, r6
  40b2e4:	4640      	mov	r0, r8
  40b2e6:	4649      	mov	r1, r9
  40b2e8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40b2ec:	f7fc faf0 	bl	4078d0 <__aeabi_dcmplt>
  40b2f0:	2800      	cmp	r0, #0
  40b2f2:	d065      	beq.n	40b3c0 <_dtoa_r+0x970>
  40b2f4:	462f      	mov	r7, r5
  40b2f6:	9508      	str	r5, [sp, #32]
  40b2f8:	e4df      	b.n	40acba <_dtoa_r+0x26a>
  40b2fa:	201c      	movs	r0, #28
  40b2fc:	e564      	b.n	40adc8 <_dtoa_r+0x378>
  40b2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b300:	2b00      	cmp	r3, #0
  40b302:	f040 814f 	bne.w	40b5a4 <_dtoa_r+0xb54>
  40b306:	f8dd a014 	ldr.w	sl, [sp, #20]
  40b30a:	9e06      	ldr	r6, [sp, #24]
  40b30c:	4655      	mov	r5, sl
  40b30e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40b312:	e002      	b.n	40b31a <_dtoa_r+0x8ca>
  40b314:	f001 f914 	bl	40c540 <__multadd>
  40b318:	4606      	mov	r6, r0
  40b31a:	4639      	mov	r1, r7
  40b31c:	4630      	mov	r0, r6
  40b31e:	f7ff faf7 	bl	40a910 <quorem>
  40b322:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40b326:	4631      	mov	r1, r6
  40b328:	4620      	mov	r0, r4
  40b32a:	f805 9b01 	strb.w	r9, [r5], #1
  40b32e:	ebca 0e05 	rsb	lr, sl, r5
  40b332:	220a      	movs	r2, #10
  40b334:	2300      	movs	r3, #0
  40b336:	45c6      	cmp	lr, r8
  40b338:	dbec      	blt.n	40b314 <_dtoa_r+0x8c4>
  40b33a:	9b05      	ldr	r3, [sp, #20]
  40b33c:	f04f 0a00 	mov.w	sl, #0
  40b340:	9a04      	ldr	r2, [sp, #16]
  40b342:	9606      	str	r6, [sp, #24]
  40b344:	2a01      	cmp	r2, #1
  40b346:	bfac      	ite	ge
  40b348:	189b      	addge	r3, r3, r2
  40b34a:	3301      	addlt	r3, #1
  40b34c:	461d      	mov	r5, r3
  40b34e:	9906      	ldr	r1, [sp, #24]
  40b350:	2201      	movs	r2, #1
  40b352:	4620      	mov	r0, r4
  40b354:	f001 fa86 	bl	40c864 <__lshift>
  40b358:	4639      	mov	r1, r7
  40b35a:	9006      	str	r0, [sp, #24]
  40b35c:	f001 fadc 	bl	40c918 <__mcmp>
  40b360:	2800      	cmp	r0, #0
  40b362:	f340 824e 	ble.w	40b802 <_dtoa_r+0xdb2>
  40b366:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40b36a:	1e6b      	subs	r3, r5, #1
  40b36c:	9905      	ldr	r1, [sp, #20]
  40b36e:	e004      	b.n	40b37a <_dtoa_r+0x92a>
  40b370:	428b      	cmp	r3, r1
  40b372:	f000 820b 	beq.w	40b78c <_dtoa_r+0xd3c>
  40b376:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40b37a:	2a39      	cmp	r2, #57	; 0x39
  40b37c:	f103 0501 	add.w	r5, r3, #1
  40b380:	d0f6      	beq.n	40b370 <_dtoa_r+0x920>
  40b382:	3201      	adds	r2, #1
  40b384:	701a      	strb	r2, [r3, #0]
  40b386:	4639      	mov	r1, r7
  40b388:	4620      	mov	r0, r4
  40b38a:	f001 f8cf 	bl	40c52c <_Bfree>
  40b38e:	9b08      	ldr	r3, [sp, #32]
  40b390:	2b00      	cmp	r3, #0
  40b392:	f43f ad60 	beq.w	40ae56 <_dtoa_r+0x406>
  40b396:	459a      	cmp	sl, r3
  40b398:	f43f ad59 	beq.w	40ae4e <_dtoa_r+0x3fe>
  40b39c:	f1ba 0f00 	cmp.w	sl, #0
  40b3a0:	f43f ad55 	beq.w	40ae4e <_dtoa_r+0x3fe>
  40b3a4:	4651      	mov	r1, sl
  40b3a6:	4620      	mov	r0, r4
  40b3a8:	f001 f8c0 	bl	40c52c <_Bfree>
  40b3ac:	e54f      	b.n	40ae4e <_dtoa_r+0x3fe>
  40b3ae:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b3b2:	f04f 0802 	mov.w	r8, #2
  40b3b6:	e5eb      	b.n	40af90 <_dtoa_r+0x540>
  40b3b8:	9805      	ldr	r0, [sp, #20]
  40b3ba:	f7ff bb7a 	b.w	40aab2 <_dtoa_r+0x62>
  40b3be:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40b3c0:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40b3c4:	e452      	b.n	40ac6c <_dtoa_r+0x21c>
  40b3c6:	9b02      	ldr	r3, [sp, #8]
  40b3c8:	425d      	negs	r5, r3
  40b3ca:	2d00      	cmp	r5, #0
  40b3cc:	f000 81c1 	beq.w	40b752 <_dtoa_r+0xd02>
  40b3d0:	f005 020f 	and.w	r2, r5, #15
  40b3d4:	4b4d      	ldr	r3, [pc, #308]	; (40b50c <_dtoa_r+0xabc>)
  40b3d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b3da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b3e2:	f7fc f803 	bl	4073ec <__aeabi_dmul>
  40b3e6:	112d      	asrs	r5, r5, #4
  40b3e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40b3ec:	f000 8275 	beq.w	40b8da <_dtoa_r+0xe8a>
  40b3f0:	4e47      	ldr	r6, [pc, #284]	; (40b510 <_dtoa_r+0xac0>)
  40b3f2:	f04f 0802 	mov.w	r8, #2
  40b3f6:	4602      	mov	r2, r0
  40b3f8:	460b      	mov	r3, r1
  40b3fa:	07ef      	lsls	r7, r5, #31
  40b3fc:	4610      	mov	r0, r2
  40b3fe:	4619      	mov	r1, r3
  40b400:	d507      	bpl.n	40b412 <_dtoa_r+0x9c2>
  40b402:	f108 0801 	add.w	r8, r8, #1
  40b406:	e9d6 2300 	ldrd	r2, r3, [r6]
  40b40a:	f7fb ffef 	bl	4073ec <__aeabi_dmul>
  40b40e:	4602      	mov	r2, r0
  40b410:	460b      	mov	r3, r1
  40b412:	106d      	asrs	r5, r5, #1
  40b414:	f106 0608 	add.w	r6, r6, #8
  40b418:	d1ef      	bne.n	40b3fa <_dtoa_r+0x9aa>
  40b41a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40b41e:	e5d2      	b.n	40afc6 <_dtoa_r+0x576>
  40b420:	2700      	movs	r7, #0
  40b422:	9708      	str	r7, [sp, #32]
  40b424:	e506      	b.n	40ae34 <_dtoa_r+0x3e4>
  40b426:	f10c 3bff 	add.w	fp, ip, #4294967295
  40b42a:	4938      	ldr	r1, [pc, #224]	; (40b50c <_dtoa_r+0xabc>)
  40b42c:	4632      	mov	r2, r6
  40b42e:	463b      	mov	r3, r7
  40b430:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40b434:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  40b438:	9f05      	ldr	r7, [sp, #20]
  40b43a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40b43e:	f7fb ffd5 	bl	4073ec <__aeabi_dmul>
  40b442:	1c7d      	adds	r5, r7, #1
  40b444:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40b448:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b44c:	4649      	mov	r1, r9
  40b44e:	4640      	mov	r0, r8
  40b450:	f7fc fa66 	bl	407920 <__aeabi_d2iz>
  40b454:	4606      	mov	r6, r0
  40b456:	f7fb ff63 	bl	407320 <__aeabi_i2d>
  40b45a:	4602      	mov	r2, r0
  40b45c:	460b      	mov	r3, r1
  40b45e:	4640      	mov	r0, r8
  40b460:	4649      	mov	r1, r9
  40b462:	3630      	adds	r6, #48	; 0x30
  40b464:	f7fb fe0e 	bl	407084 <__aeabi_dsub>
  40b468:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  40b46c:	4680      	mov	r8, r0
  40b46e:	4689      	mov	r9, r1
  40b470:	f1bc 0f01 	cmp.w	ip, #1
  40b474:	703e      	strb	r6, [r7, #0]
  40b476:	d020      	beq.n	40b4ba <_dtoa_r+0xa6a>
  40b478:	9b05      	ldr	r3, [sp, #20]
  40b47a:	4640      	mov	r0, r8
  40b47c:	46aa      	mov	sl, r5
  40b47e:	46a8      	mov	r8, r5
  40b480:	eb03 070c 	add.w	r7, r3, ip
  40b484:	46b9      	mov	r9, r7
  40b486:	2200      	movs	r2, #0
  40b488:	4b1d      	ldr	r3, [pc, #116]	; (40b500 <_dtoa_r+0xab0>)
  40b48a:	f7fb ffaf 	bl	4073ec <__aeabi_dmul>
  40b48e:	460f      	mov	r7, r1
  40b490:	4606      	mov	r6, r0
  40b492:	f7fc fa45 	bl	407920 <__aeabi_d2iz>
  40b496:	4605      	mov	r5, r0
  40b498:	f7fb ff42 	bl	407320 <__aeabi_i2d>
  40b49c:	4602      	mov	r2, r0
  40b49e:	460b      	mov	r3, r1
  40b4a0:	3530      	adds	r5, #48	; 0x30
  40b4a2:	4630      	mov	r0, r6
  40b4a4:	4639      	mov	r1, r7
  40b4a6:	f7fb fded 	bl	407084 <__aeabi_dsub>
  40b4aa:	f80a 5b01 	strb.w	r5, [sl], #1
  40b4ae:	45ca      	cmp	sl, r9
  40b4b0:	d1e9      	bne.n	40b486 <_dtoa_r+0xa36>
  40b4b2:	4645      	mov	r5, r8
  40b4b4:	4689      	mov	r9, r1
  40b4b6:	4680      	mov	r8, r0
  40b4b8:	445d      	add	r5, fp
  40b4ba:	2200      	movs	r2, #0
  40b4bc:	4b15      	ldr	r3, [pc, #84]	; (40b514 <_dtoa_r+0xac4>)
  40b4be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b4c2:	f7fb fde1 	bl	407088 <__adddf3>
  40b4c6:	4642      	mov	r2, r8
  40b4c8:	464b      	mov	r3, r9
  40b4ca:	f7fc fa01 	bl	4078d0 <__aeabi_dcmplt>
  40b4ce:	2800      	cmp	r0, #0
  40b4d0:	f47f aec7 	bne.w	40b262 <_dtoa_r+0x812>
  40b4d4:	2000      	movs	r0, #0
  40b4d6:	490f      	ldr	r1, [pc, #60]	; (40b514 <_dtoa_r+0xac4>)
  40b4d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40b4dc:	f7fb fdd2 	bl	407084 <__aeabi_dsub>
  40b4e0:	4642      	mov	r2, r8
  40b4e2:	464b      	mov	r3, r9
  40b4e4:	f7fc fa12 	bl	40790c <__aeabi_dcmpgt>
  40b4e8:	b908      	cbnz	r0, 40b4ee <_dtoa_r+0xa9e>
  40b4ea:	e769      	b.n	40b3c0 <_dtoa_r+0x970>
  40b4ec:	4615      	mov	r5, r2
  40b4ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b4f2:	1e6a      	subs	r2, r5, #1
  40b4f4:	2b30      	cmp	r3, #48	; 0x30
  40b4f6:	d0f9      	beq.n	40b4ec <_dtoa_r+0xa9c>
  40b4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b4fa:	9302      	str	r3, [sp, #8]
  40b4fc:	e4ab      	b.n	40ae56 <_dtoa_r+0x406>
  40b4fe:	bf00      	nop
  40b500:	40240000 	.word	0x40240000
  40b504:	401c0000 	.word	0x401c0000
  40b508:	40140000 	.word	0x40140000
  40b50c:	0040e640 	.word	0x0040e640
  40b510:	0040e718 	.word	0x0040e718
  40b514:	3fe00000 	.word	0x3fe00000
  40b518:	9806      	ldr	r0, [sp, #24]
  40b51a:	4639      	mov	r1, r7
  40b51c:	f001 f9fc 	bl	40c918 <__mcmp>
  40b520:	2800      	cmp	r0, #0
  40b522:	f6bf ac6e 	bge.w	40ae02 <_dtoa_r+0x3b2>
  40b526:	9e02      	ldr	r6, [sp, #8]
  40b528:	2300      	movs	r3, #0
  40b52a:	9906      	ldr	r1, [sp, #24]
  40b52c:	4620      	mov	r0, r4
  40b52e:	3e01      	subs	r6, #1
  40b530:	220a      	movs	r2, #10
  40b532:	9602      	str	r6, [sp, #8]
  40b534:	f001 f804 	bl	40c540 <__multadd>
  40b538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b53a:	9006      	str	r0, [sp, #24]
  40b53c:	bb1b      	cbnz	r3, 40b586 <_dtoa_r+0xb36>
  40b53e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40b540:	2b02      	cmp	r3, #2
  40b542:	f340 81ce 	ble.w	40b8e2 <_dtoa_r+0xe92>
  40b546:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b548:	2b00      	cmp	r3, #0
  40b54a:	f300 81ca 	bgt.w	40b8e2 <_dtoa_r+0xe92>
  40b54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b550:	9304      	str	r3, [sp, #16]
  40b552:	e45e      	b.n	40ae12 <_dtoa_r+0x3c2>
  40b554:	f1ba 0f00 	cmp.w	sl, #0
  40b558:	f47f ae9b 	bne.w	40b292 <_dtoa_r+0x842>
  40b55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40b560:	2b00      	cmp	r3, #0
  40b562:	f47f ae96 	bne.w	40b292 <_dtoa_r+0x842>
  40b566:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40b56a:	0d36      	lsrs	r6, r6, #20
  40b56c:	0536      	lsls	r6, r6, #20
  40b56e:	2e00      	cmp	r6, #0
  40b570:	f000 818a 	beq.w	40b888 <_dtoa_r+0xe38>
  40b574:	9b07      	ldr	r3, [sp, #28]
  40b576:	f04f 0801 	mov.w	r8, #1
  40b57a:	3301      	adds	r3, #1
  40b57c:	9307      	str	r3, [sp, #28]
  40b57e:	9b03      	ldr	r3, [sp, #12]
  40b580:	3301      	adds	r3, #1
  40b582:	9303      	str	r3, [sp, #12]
  40b584:	e687      	b.n	40b296 <_dtoa_r+0x846>
  40b586:	2300      	movs	r3, #0
  40b588:	9908      	ldr	r1, [sp, #32]
  40b58a:	4620      	mov	r0, r4
  40b58c:	220a      	movs	r2, #10
  40b58e:	f000 ffd7 	bl	40c540 <__multadd>
  40b592:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40b594:	9008      	str	r0, [sp, #32]
  40b596:	2b02      	cmp	r3, #2
  40b598:	dd02      	ble.n	40b5a0 <_dtoa_r+0xb50>
  40b59a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b59c:	2b00      	cmp	r3, #0
  40b59e:	ddd6      	ble.n	40b54e <_dtoa_r+0xafe>
  40b5a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b5a2:	9304      	str	r3, [sp, #16]
  40b5a4:	2d00      	cmp	r5, #0
  40b5a6:	dd05      	ble.n	40b5b4 <_dtoa_r+0xb64>
  40b5a8:	9908      	ldr	r1, [sp, #32]
  40b5aa:	462a      	mov	r2, r5
  40b5ac:	4620      	mov	r0, r4
  40b5ae:	f001 f959 	bl	40c864 <__lshift>
  40b5b2:	9008      	str	r0, [sp, #32]
  40b5b4:	f1b8 0f00 	cmp.w	r8, #0
  40b5b8:	f040 8133 	bne.w	40b822 <_dtoa_r+0xdd2>
  40b5bc:	9e08      	ldr	r6, [sp, #32]
  40b5be:	f00a 0101 	and.w	r1, sl, #1
  40b5c2:	9b04      	ldr	r3, [sp, #16]
  40b5c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40b5c6:	3b01      	subs	r3, #1
  40b5c8:	910b      	str	r1, [sp, #44]	; 0x2c
  40b5ca:	9905      	ldr	r1, [sp, #20]
  40b5cc:	fab2 f282 	clz	r2, r2
  40b5d0:	970a      	str	r7, [sp, #40]	; 0x28
  40b5d2:	18cb      	adds	r3, r1, r3
  40b5d4:	4688      	mov	r8, r1
  40b5d6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40b5da:	930c      	str	r3, [sp, #48]	; 0x30
  40b5dc:	0953      	lsrs	r3, r2, #5
  40b5de:	9f06      	ldr	r7, [sp, #24]
  40b5e0:	9303      	str	r3, [sp, #12]
  40b5e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b5e4:	4638      	mov	r0, r7
  40b5e6:	4629      	mov	r1, r5
  40b5e8:	f7ff f992 	bl	40a910 <quorem>
  40b5ec:	4659      	mov	r1, fp
  40b5ee:	4681      	mov	r9, r0
  40b5f0:	4638      	mov	r0, r7
  40b5f2:	f001 f991 	bl	40c918 <__mcmp>
  40b5f6:	4629      	mov	r1, r5
  40b5f8:	4632      	mov	r2, r6
  40b5fa:	4682      	mov	sl, r0
  40b5fc:	4620      	mov	r0, r4
  40b5fe:	f001 f9af 	bl	40c960 <__mdiff>
  40b602:	68c2      	ldr	r2, [r0, #12]
  40b604:	4605      	mov	r5, r0
  40b606:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  40b60a:	9207      	str	r2, [sp, #28]
  40b60c:	2a00      	cmp	r2, #0
  40b60e:	d150      	bne.n	40b6b2 <_dtoa_r+0xc62>
  40b610:	4629      	mov	r1, r5
  40b612:	4638      	mov	r0, r7
  40b614:	f8cd c018 	str.w	ip, [sp, #24]
  40b618:	f001 f97e 	bl	40c918 <__mcmp>
  40b61c:	4629      	mov	r1, r5
  40b61e:	9004      	str	r0, [sp, #16]
  40b620:	4620      	mov	r0, r4
  40b622:	f000 ff83 	bl	40c52c <_Bfree>
  40b626:	9a03      	ldr	r2, [sp, #12]
  40b628:	9b04      	ldr	r3, [sp, #16]
  40b62a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40b62e:	b132      	cbz	r2, 40b63e <_dtoa_r+0xbee>
  40b630:	b92b      	cbnz	r3, 40b63e <_dtoa_r+0xbee>
  40b632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b634:	9a07      	ldr	r2, [sp, #28]
  40b636:	2b00      	cmp	r3, #0
  40b638:	f000 8128 	beq.w	40b88c <_dtoa_r+0xe3c>
  40b63c:	4613      	mov	r3, r2
  40b63e:	f1ba 0f00 	cmp.w	sl, #0
  40b642:	f2c0 80bc 	blt.w	40b7be <_dtoa_r+0xd6e>
  40b646:	9a03      	ldr	r2, [sp, #12]
  40b648:	b132      	cbz	r2, 40b658 <_dtoa_r+0xc08>
  40b64a:	f1ba 0f00 	cmp.w	sl, #0
  40b64e:	d103      	bne.n	40b658 <_dtoa_r+0xc08>
  40b650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b652:	2a00      	cmp	r2, #0
  40b654:	f000 80b3 	beq.w	40b7be <_dtoa_r+0xd6e>
  40b658:	2b00      	cmp	r3, #0
  40b65a:	f300 80fe 	bgt.w	40b85a <_dtoa_r+0xe0a>
  40b65e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b660:	f108 0901 	add.w	r9, r8, #1
  40b664:	f888 c000 	strb.w	ip, [r8]
  40b668:	4598      	cmp	r8, r3
  40b66a:	464d      	mov	r5, r9
  40b66c:	f000 8106 	beq.w	40b87c <_dtoa_r+0xe2c>
  40b670:	4639      	mov	r1, r7
  40b672:	220a      	movs	r2, #10
  40b674:	2300      	movs	r3, #0
  40b676:	4620      	mov	r0, r4
  40b678:	f000 ff62 	bl	40c540 <__multadd>
  40b67c:	45b3      	cmp	fp, r6
  40b67e:	4607      	mov	r7, r0
  40b680:	4659      	mov	r1, fp
  40b682:	4620      	mov	r0, r4
  40b684:	f04f 020a 	mov.w	r2, #10
  40b688:	f04f 0300 	mov.w	r3, #0
  40b68c:	d00b      	beq.n	40b6a6 <_dtoa_r+0xc56>
  40b68e:	f000 ff57 	bl	40c540 <__multadd>
  40b692:	4631      	mov	r1, r6
  40b694:	4683      	mov	fp, r0
  40b696:	220a      	movs	r2, #10
  40b698:	4620      	mov	r0, r4
  40b69a:	2300      	movs	r3, #0
  40b69c:	f000 ff50 	bl	40c540 <__multadd>
  40b6a0:	46c8      	mov	r8, r9
  40b6a2:	4606      	mov	r6, r0
  40b6a4:	e79d      	b.n	40b5e2 <_dtoa_r+0xb92>
  40b6a6:	f000 ff4b 	bl	40c540 <__multadd>
  40b6aa:	46c8      	mov	r8, r9
  40b6ac:	4683      	mov	fp, r0
  40b6ae:	4606      	mov	r6, r0
  40b6b0:	e797      	b.n	40b5e2 <_dtoa_r+0xb92>
  40b6b2:	4601      	mov	r1, r0
  40b6b4:	4620      	mov	r0, r4
  40b6b6:	f8cd c010 	str.w	ip, [sp, #16]
  40b6ba:	f000 ff37 	bl	40c52c <_Bfree>
  40b6be:	2301      	movs	r3, #1
  40b6c0:	f8dd c010 	ldr.w	ip, [sp, #16]
  40b6c4:	e7bb      	b.n	40b63e <_dtoa_r+0xbee>
  40b6c6:	2b0e      	cmp	r3, #14
  40b6c8:	bf8c      	ite	hi
  40b6ca:	2300      	movhi	r3, #0
  40b6cc:	2301      	movls	r3, #1
  40b6ce:	2100      	movs	r1, #0
  40b6d0:	401d      	ands	r5, r3
  40b6d2:	6461      	str	r1, [r4, #68]	; 0x44
  40b6d4:	e436      	b.n	40af44 <_dtoa_r+0x4f4>
  40b6d6:	2301      	movs	r3, #1
  40b6d8:	9323      	str	r3, [sp, #140]	; 0x8c
  40b6da:	9310      	str	r3, [sp, #64]	; 0x40
  40b6dc:	9304      	str	r3, [sp, #16]
  40b6de:	e7f6      	b.n	40b6ce <_dtoa_r+0xc7e>
  40b6e0:	9906      	ldr	r1, [sp, #24]
  40b6e2:	4620      	mov	r0, r4
  40b6e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b6e6:	f001 f86d 	bl	40c7c4 <__pow5mult>
  40b6ea:	9006      	str	r0, [sp, #24]
  40b6ec:	f7ff bb42 	b.w	40ad74 <_dtoa_r+0x324>
  40b6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b6f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b6f4:	1af3      	subs	r3, r6, r3
  40b6f6:	960a      	str	r6, [sp, #40]	; 0x28
  40b6f8:	2600      	movs	r6, #0
  40b6fa:	441a      	add	r2, r3
  40b6fc:	920c      	str	r2, [sp, #48]	; 0x30
  40b6fe:	f7ff bbf3 	b.w	40aee8 <_dtoa_r+0x498>
  40b702:	9b04      	ldr	r3, [sp, #16]
  40b704:	2b00      	cmp	r3, #0
  40b706:	f43f adcc 	beq.w	40b2a2 <_dtoa_r+0x852>
  40b70a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40b70c:	2d00      	cmp	r5, #0
  40b70e:	f77f ae57 	ble.w	40b3c0 <_dtoa_r+0x970>
  40b712:	2200      	movs	r2, #0
  40b714:	4b86      	ldr	r3, [pc, #536]	; (40b930 <_dtoa_r+0xee0>)
  40b716:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b71a:	f7fb fe67 	bl	4073ec <__aeabi_dmul>
  40b71e:	9b02      	ldr	r3, [sp, #8]
  40b720:	4606      	mov	r6, r0
  40b722:	460f      	mov	r7, r1
  40b724:	3b01      	subs	r3, #1
  40b726:	f108 0001 	add.w	r0, r8, #1
  40b72a:	e9cd 6708 	strd	r6, r7, [sp, #32]
  40b72e:	9314      	str	r3, [sp, #80]	; 0x50
  40b730:	f7fb fdf6 	bl	407320 <__aeabi_i2d>
  40b734:	4602      	mov	r2, r0
  40b736:	460b      	mov	r3, r1
  40b738:	4630      	mov	r0, r6
  40b73a:	4639      	mov	r1, r7
  40b73c:	f7fb fe56 	bl	4073ec <__aeabi_dmul>
  40b740:	2200      	movs	r2, #0
  40b742:	4b7c      	ldr	r3, [pc, #496]	; (40b934 <_dtoa_r+0xee4>)
  40b744:	f7fb fca0 	bl	407088 <__adddf3>
  40b748:	46ac      	mov	ip, r5
  40b74a:	4606      	mov	r6, r0
  40b74c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40b750:	e45a      	b.n	40b008 <_dtoa_r+0x5b8>
  40b752:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40b756:	f04f 0802 	mov.w	r8, #2
  40b75a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40b75e:	e432      	b.n	40afc6 <_dtoa_r+0x576>
  40b760:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b762:	2130      	movs	r1, #48	; 0x30
  40b764:	3301      	adds	r3, #1
  40b766:	7011      	strb	r1, [r2, #0]
  40b768:	9302      	str	r3, [sp, #8]
  40b76a:	2331      	movs	r3, #49	; 0x31
  40b76c:	7013      	strb	r3, [r2, #0]
  40b76e:	f7ff bb72 	b.w	40ae56 <_dtoa_r+0x406>
  40b772:	9906      	ldr	r1, [sp, #24]
  40b774:	4620      	mov	r0, r4
  40b776:	f001 f825 	bl	40c7c4 <__pow5mult>
  40b77a:	9006      	str	r0, [sp, #24]
  40b77c:	f7ff bafa 	b.w	40ad74 <_dtoa_r+0x324>
  40b780:	f1ba 0f00 	cmp.w	sl, #0
  40b784:	f43f aeea 	beq.w	40b55c <_dtoa_r+0xb0c>
  40b788:	f7ff bb07 	b.w	40ad9a <_dtoa_r+0x34a>
  40b78c:	9a02      	ldr	r2, [sp, #8]
  40b78e:	2331      	movs	r3, #49	; 0x31
  40b790:	3201      	adds	r2, #1
  40b792:	9202      	str	r2, [sp, #8]
  40b794:	9a05      	ldr	r2, [sp, #20]
  40b796:	7013      	strb	r3, [r2, #0]
  40b798:	e5f5      	b.n	40b386 <_dtoa_r+0x936>
  40b79a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b79c:	2a00      	cmp	r2, #0
  40b79e:	d055      	beq.n	40b84c <_dtoa_r+0xdfc>
  40b7a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40b7a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b7a6:	9d07      	ldr	r5, [sp, #28]
  40b7a8:	f7ff bba4 	b.w	40aef4 <_dtoa_r+0x4a4>
  40b7ac:	9c03      	ldr	r4, [sp, #12]
  40b7ae:	f7ff bb52 	b.w	40ae56 <_dtoa_r+0x406>
  40b7b2:	9b07      	ldr	r3, [sp, #28]
  40b7b4:	9a04      	ldr	r2, [sp, #16]
  40b7b6:	1a9d      	subs	r5, r3, r2
  40b7b8:	2300      	movs	r3, #0
  40b7ba:	f7ff bb9b 	b.w	40aef4 <_dtoa_r+0x4a4>
  40b7be:	2b00      	cmp	r3, #0
  40b7c0:	9706      	str	r7, [sp, #24]
  40b7c2:	46e1      	mov	r9, ip
  40b7c4:	f8cd b020 	str.w	fp, [sp, #32]
  40b7c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b7ca:	4665      	mov	r5, ip
  40b7cc:	dd0f      	ble.n	40b7ee <_dtoa_r+0xd9e>
  40b7ce:	9906      	ldr	r1, [sp, #24]
  40b7d0:	2201      	movs	r2, #1
  40b7d2:	4620      	mov	r0, r4
  40b7d4:	f001 f846 	bl	40c864 <__lshift>
  40b7d8:	4639      	mov	r1, r7
  40b7da:	9006      	str	r0, [sp, #24]
  40b7dc:	f001 f89c 	bl	40c918 <__mcmp>
  40b7e0:	2800      	cmp	r0, #0
  40b7e2:	dd75      	ble.n	40b8d0 <_dtoa_r+0xe80>
  40b7e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40b7e8:	d066      	beq.n	40b8b8 <_dtoa_r+0xe68>
  40b7ea:	f109 0501 	add.w	r5, r9, #1
  40b7ee:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b7f2:	f888 5000 	strb.w	r5, [r8]
  40b7f6:	f108 0501 	add.w	r5, r8, #1
  40b7fa:	9608      	str	r6, [sp, #32]
  40b7fc:	e5c3      	b.n	40b386 <_dtoa_r+0x936>
  40b7fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40b800:	e531      	b.n	40b266 <_dtoa_r+0x816>
  40b802:	d104      	bne.n	40b80e <_dtoa_r+0xdbe>
  40b804:	f019 0f01 	tst.w	r9, #1
  40b808:	d001      	beq.n	40b80e <_dtoa_r+0xdbe>
  40b80a:	e5ac      	b.n	40b366 <_dtoa_r+0x916>
  40b80c:	4615      	mov	r5, r2
  40b80e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b812:	1e6a      	subs	r2, r5, #1
  40b814:	2b30      	cmp	r3, #48	; 0x30
  40b816:	d0f9      	beq.n	40b80c <_dtoa_r+0xdbc>
  40b818:	e5b5      	b.n	40b386 <_dtoa_r+0x936>
  40b81a:	2700      	movs	r7, #0
  40b81c:	9708      	str	r7, [sp, #32]
  40b81e:	f7ff ba4c 	b.w	40acba <_dtoa_r+0x26a>
  40b822:	9e08      	ldr	r6, [sp, #32]
  40b824:	4620      	mov	r0, r4
  40b826:	6871      	ldr	r1, [r6, #4]
  40b828:	f000 fe58 	bl	40c4dc <_Balloc>
  40b82c:	6933      	ldr	r3, [r6, #16]
  40b82e:	4605      	mov	r5, r0
  40b830:	f106 010c 	add.w	r1, r6, #12
  40b834:	1c9a      	adds	r2, r3, #2
  40b836:	300c      	adds	r0, #12
  40b838:	0092      	lsls	r2, r2, #2
  40b83a:	f002 ff9f 	bl	40e77c <memcpy>
  40b83e:	4620      	mov	r0, r4
  40b840:	4629      	mov	r1, r5
  40b842:	2201      	movs	r2, #1
  40b844:	f001 f80e 	bl	40c864 <__lshift>
  40b848:	4606      	mov	r6, r0
  40b84a:	e6b8      	b.n	40b5be <_dtoa_r+0xb6e>
  40b84c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40b84e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b850:	9d07      	ldr	r5, [sp, #28]
  40b852:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b856:	f7ff bb4d 	b.w	40aef4 <_dtoa_r+0x4a4>
  40b85a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40b85e:	9706      	str	r7, [sp, #24]
  40b860:	f8cd b020 	str.w	fp, [sp, #32]
  40b864:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b866:	d030      	beq.n	40b8ca <_dtoa_r+0xe7a>
  40b868:	f10c 0901 	add.w	r9, ip, #1
  40b86c:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b870:	f108 0501 	add.w	r5, r8, #1
  40b874:	9608      	str	r6, [sp, #32]
  40b876:	f888 9000 	strb.w	r9, [r8]
  40b87a:	e584      	b.n	40b386 <_dtoa_r+0x936>
  40b87c:	9706      	str	r7, [sp, #24]
  40b87e:	46e1      	mov	r9, ip
  40b880:	46da      	mov	sl, fp
  40b882:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b884:	9608      	str	r6, [sp, #32]
  40b886:	e562      	b.n	40b34e <_dtoa_r+0x8fe>
  40b888:	46b0      	mov	r8, r6
  40b88a:	e504      	b.n	40b296 <_dtoa_r+0x846>
  40b88c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40b890:	9706      	str	r7, [sp, #24]
  40b892:	f8cd b020 	str.w	fp, [sp, #32]
  40b896:	4655      	mov	r5, sl
  40b898:	46cb      	mov	fp, r9
  40b89a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b89c:	46e1      	mov	r9, ip
  40b89e:	d00b      	beq.n	40b8b8 <_dtoa_r+0xe68>
  40b8a0:	2d00      	cmp	r5, #0
  40b8a2:	dd01      	ble.n	40b8a8 <_dtoa_r+0xe58>
  40b8a4:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  40b8a8:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b8ac:	f108 0501 	add.w	r5, r8, #1
  40b8b0:	f888 9000 	strb.w	r9, [r8]
  40b8b4:	9608      	str	r6, [sp, #32]
  40b8b6:	e566      	b.n	40b386 <_dtoa_r+0x936>
  40b8b8:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b8bc:	9608      	str	r6, [sp, #32]
  40b8be:	2239      	movs	r2, #57	; 0x39
  40b8c0:	f108 0501 	add.w	r5, r8, #1
  40b8c4:	f888 2000 	strb.w	r2, [r8]
  40b8c8:	e54f      	b.n	40b36a <_dtoa_r+0x91a>
  40b8ca:	46da      	mov	sl, fp
  40b8cc:	9608      	str	r6, [sp, #32]
  40b8ce:	e7f6      	b.n	40b8be <_dtoa_r+0xe6e>
  40b8d0:	d18d      	bne.n	40b7ee <_dtoa_r+0xd9e>
  40b8d2:	f019 0f01 	tst.w	r9, #1
  40b8d6:	d08a      	beq.n	40b7ee <_dtoa_r+0xd9e>
  40b8d8:	e784      	b.n	40b7e4 <_dtoa_r+0xd94>
  40b8da:	f04f 0802 	mov.w	r8, #2
  40b8de:	f7ff bb72 	b.w	40afc6 <_dtoa_r+0x576>
  40b8e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b8e4:	9304      	str	r3, [sp, #16]
  40b8e6:	e50e      	b.n	40b306 <_dtoa_r+0x8b6>
  40b8e8:	f43f aa75 	beq.w	40add6 <_dtoa_r+0x386>
  40b8ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b8f0:	f7ff ba6a 	b.w	40adc8 <_dtoa_r+0x378>
  40b8f4:	2501      	movs	r5, #1
  40b8f6:	f7ff b982 	b.w	40abfe <_dtoa_r+0x1ae>
  40b8fa:	2500      	movs	r5, #0
  40b8fc:	4620      	mov	r0, r4
  40b8fe:	6465      	str	r5, [r4, #68]	; 0x44
  40b900:	4629      	mov	r1, r5
  40b902:	f000 fdeb 	bl	40c4dc <_Balloc>
  40b906:	9a02      	ldr	r2, [sp, #8]
  40b908:	9005      	str	r0, [sp, #20]
  40b90a:	2a0e      	cmp	r2, #14
  40b90c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b90e:	6420      	str	r0, [r4, #64]	; 0x40
  40b910:	f73f aad7 	bgt.w	40aec2 <_dtoa_r+0x472>
  40b914:	42ab      	cmp	r3, r5
  40b916:	f6ff aad4 	blt.w	40aec2 <_dtoa_r+0x472>
  40b91a:	f04f 33ff 	mov.w	r3, #4294967295
  40b91e:	9523      	str	r5, [sp, #140]	; 0x8c
  40b920:	9304      	str	r3, [sp, #16]
  40b922:	f7ff b9a9 	b.w	40ac78 <_dtoa_r+0x228>
  40b926:	2301      	movs	r3, #1
  40b928:	930b      	str	r3, [sp, #44]	; 0x2c
  40b92a:	f7ff bbfa 	b.w	40b122 <_dtoa_r+0x6d2>
  40b92e:	bf00      	nop
  40b930:	40240000 	.word	0x40240000
  40b934:	401c0000 	.word	0x401c0000

0040b938 <__sflush_r>:
  40b938:	898b      	ldrh	r3, [r1, #12]
  40b93a:	b29a      	uxth	r2, r3
  40b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b940:	460d      	mov	r5, r1
  40b942:	0711      	lsls	r1, r2, #28
  40b944:	4680      	mov	r8, r0
  40b946:	d43c      	bmi.n	40b9c2 <__sflush_r+0x8a>
  40b948:	686a      	ldr	r2, [r5, #4]
  40b94a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40b94e:	2a00      	cmp	r2, #0
  40b950:	81ab      	strh	r3, [r5, #12]
  40b952:	dd76      	ble.n	40ba42 <__sflush_r+0x10a>
  40b954:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40b956:	2e00      	cmp	r6, #0
  40b958:	d04b      	beq.n	40b9f2 <__sflush_r+0xba>
  40b95a:	b29b      	uxth	r3, r3
  40b95c:	2100      	movs	r1, #0
  40b95e:	f8d8 4000 	ldr.w	r4, [r8]
  40b962:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40b966:	f8c8 1000 	str.w	r1, [r8]
  40b96a:	b292      	uxth	r2, r2
  40b96c:	2a00      	cmp	r2, #0
  40b96e:	d06c      	beq.n	40ba4a <__sflush_r+0x112>
  40b970:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40b972:	075f      	lsls	r7, r3, #29
  40b974:	d505      	bpl.n	40b982 <__sflush_r+0x4a>
  40b976:	6869      	ldr	r1, [r5, #4]
  40b978:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40b97a:	1a52      	subs	r2, r2, r1
  40b97c:	b10b      	cbz	r3, 40b982 <__sflush_r+0x4a>
  40b97e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40b980:	1ad2      	subs	r2, r2, r3
  40b982:	4640      	mov	r0, r8
  40b984:	69e9      	ldr	r1, [r5, #28]
  40b986:	2300      	movs	r3, #0
  40b988:	47b0      	blx	r6
  40b98a:	1c46      	adds	r6, r0, #1
  40b98c:	d03e      	beq.n	40ba0c <__sflush_r+0xd4>
  40b98e:	89ab      	ldrh	r3, [r5, #12]
  40b990:	2100      	movs	r1, #0
  40b992:	692a      	ldr	r2, [r5, #16]
  40b994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40b998:	6069      	str	r1, [r5, #4]
  40b99a:	602a      	str	r2, [r5, #0]
  40b99c:	b29b      	uxth	r3, r3
  40b99e:	04da      	lsls	r2, r3, #19
  40b9a0:	81ab      	strh	r3, [r5, #12]
  40b9a2:	d44c      	bmi.n	40ba3e <__sflush_r+0x106>
  40b9a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40b9a6:	f8c8 4000 	str.w	r4, [r8]
  40b9aa:	b311      	cbz	r1, 40b9f2 <__sflush_r+0xba>
  40b9ac:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40b9b0:	4299      	cmp	r1, r3
  40b9b2:	d002      	beq.n	40b9ba <__sflush_r+0x82>
  40b9b4:	4640      	mov	r0, r8
  40b9b6:	f000 f9d5 	bl	40bd64 <_free_r>
  40b9ba:	2000      	movs	r0, #0
  40b9bc:	6328      	str	r0, [r5, #48]	; 0x30
  40b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b9c2:	692e      	ldr	r6, [r5, #16]
  40b9c4:	b1ae      	cbz	r6, 40b9f2 <__sflush_r+0xba>
  40b9c6:	682c      	ldr	r4, [r5, #0]
  40b9c8:	0791      	lsls	r1, r2, #30
  40b9ca:	602e      	str	r6, [r5, #0]
  40b9cc:	eba4 0406 	sub.w	r4, r4, r6
  40b9d0:	d11a      	bne.n	40ba08 <__sflush_r+0xd0>
  40b9d2:	696b      	ldr	r3, [r5, #20]
  40b9d4:	60ab      	str	r3, [r5, #8]
  40b9d6:	e00a      	b.n	40b9ee <__sflush_r+0xb6>
  40b9d8:	4632      	mov	r2, r6
  40b9da:	4623      	mov	r3, r4
  40b9dc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40b9de:	4640      	mov	r0, r8
  40b9e0:	69e9      	ldr	r1, [r5, #28]
  40b9e2:	47b8      	blx	r7
  40b9e4:	2800      	cmp	r0, #0
  40b9e6:	eba4 0400 	sub.w	r4, r4, r0
  40b9ea:	4406      	add	r6, r0
  40b9ec:	dd04      	ble.n	40b9f8 <__sflush_r+0xc0>
  40b9ee:	2c00      	cmp	r4, #0
  40b9f0:	dcf2      	bgt.n	40b9d8 <__sflush_r+0xa0>
  40b9f2:	2000      	movs	r0, #0
  40b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b9f8:	89ab      	ldrh	r3, [r5, #12]
  40b9fa:	f04f 30ff 	mov.w	r0, #4294967295
  40b9fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba02:	81ab      	strh	r3, [r5, #12]
  40ba04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ba08:	2300      	movs	r3, #0
  40ba0a:	e7e3      	b.n	40b9d4 <__sflush_r+0x9c>
  40ba0c:	f8d8 3000 	ldr.w	r3, [r8]
  40ba10:	fab3 f283 	clz	r2, r3
  40ba14:	2b00      	cmp	r3, #0
  40ba16:	bf18      	it	ne
  40ba18:	2b1d      	cmpne	r3, #29
  40ba1a:	ea4f 1252 	mov.w	r2, r2, lsr #5
  40ba1e:	d001      	beq.n	40ba24 <__sflush_r+0xec>
  40ba20:	2b16      	cmp	r3, #22
  40ba22:	d127      	bne.n	40ba74 <__sflush_r+0x13c>
  40ba24:	89ab      	ldrh	r3, [r5, #12]
  40ba26:	2600      	movs	r6, #0
  40ba28:	6929      	ldr	r1, [r5, #16]
  40ba2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40ba2e:	b29b      	uxth	r3, r3
  40ba30:	81ab      	strh	r3, [r5, #12]
  40ba32:	04db      	lsls	r3, r3, #19
  40ba34:	e885 0042 	stmia.w	r5, {r1, r6}
  40ba38:	d5b4      	bpl.n	40b9a4 <__sflush_r+0x6c>
  40ba3a:	2a00      	cmp	r2, #0
  40ba3c:	d0b2      	beq.n	40b9a4 <__sflush_r+0x6c>
  40ba3e:	6528      	str	r0, [r5, #80]	; 0x50
  40ba40:	e7b0      	b.n	40b9a4 <__sflush_r+0x6c>
  40ba42:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40ba44:	2a00      	cmp	r2, #0
  40ba46:	dc85      	bgt.n	40b954 <__sflush_r+0x1c>
  40ba48:	e7d3      	b.n	40b9f2 <__sflush_r+0xba>
  40ba4a:	2301      	movs	r3, #1
  40ba4c:	4640      	mov	r0, r8
  40ba4e:	69e9      	ldr	r1, [r5, #28]
  40ba50:	47b0      	blx	r6
  40ba52:	1c43      	adds	r3, r0, #1
  40ba54:	4602      	mov	r2, r0
  40ba56:	d002      	beq.n	40ba5e <__sflush_r+0x126>
  40ba58:	89ab      	ldrh	r3, [r5, #12]
  40ba5a:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40ba5c:	e789      	b.n	40b972 <__sflush_r+0x3a>
  40ba5e:	f8d8 3000 	ldr.w	r3, [r8]
  40ba62:	2b00      	cmp	r3, #0
  40ba64:	d0f8      	beq.n	40ba58 <__sflush_r+0x120>
  40ba66:	2b16      	cmp	r3, #22
  40ba68:	d001      	beq.n	40ba6e <__sflush_r+0x136>
  40ba6a:	2b1d      	cmp	r3, #29
  40ba6c:	d1c4      	bne.n	40b9f8 <__sflush_r+0xc0>
  40ba6e:	f8c8 4000 	str.w	r4, [r8]
  40ba72:	e7be      	b.n	40b9f2 <__sflush_r+0xba>
  40ba74:	89ab      	ldrh	r3, [r5, #12]
  40ba76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba7a:	81ab      	strh	r3, [r5, #12]
  40ba7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040ba80 <_fflush_r>:
  40ba80:	b510      	push	{r4, lr}
  40ba82:	4604      	mov	r4, r0
  40ba84:	b082      	sub	sp, #8
  40ba86:	b108      	cbz	r0, 40ba8c <_fflush_r+0xc>
  40ba88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba8a:	b153      	cbz	r3, 40baa2 <_fflush_r+0x22>
  40ba8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40ba90:	b908      	cbnz	r0, 40ba96 <_fflush_r+0x16>
  40ba92:	b002      	add	sp, #8
  40ba94:	bd10      	pop	{r4, pc}
  40ba96:	4620      	mov	r0, r4
  40ba98:	b002      	add	sp, #8
  40ba9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ba9e:	f7ff bf4b 	b.w	40b938 <__sflush_r>
  40baa2:	9101      	str	r1, [sp, #4]
  40baa4:	f000 f886 	bl	40bbb4 <__sinit>
  40baa8:	9901      	ldr	r1, [sp, #4]
  40baaa:	e7ef      	b.n	40ba8c <_fflush_r+0xc>

0040baac <_cleanup_r>:
  40baac:	4901      	ldr	r1, [pc, #4]	; (40bab4 <_cleanup_r+0x8>)
  40baae:	f000 bbc3 	b.w	40c238 <_fwalk_reent>
  40bab2:	bf00      	nop
  40bab4:	0040d379 	.word	0x0040d379

0040bab8 <__sinit.part.1>:
  40bab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40babc:	4682      	mov	sl, r0
  40babe:	2400      	movs	r4, #0
  40bac0:	4837      	ldr	r0, [pc, #220]	; (40bba0 <__sinit.part.1+0xe8>)
  40bac2:	2103      	movs	r1, #3
  40bac4:	f8da 5004 	ldr.w	r5, [sl, #4]
  40bac8:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40bacc:	2604      	movs	r6, #4
  40bace:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40bad2:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40bad6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bada:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  40bade:	4621      	mov	r1, r4
  40bae0:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40bae4:	2208      	movs	r2, #8
  40bae6:	81ae      	strh	r6, [r5, #12]
  40bae8:	602c      	str	r4, [r5, #0]
  40baea:	606c      	str	r4, [r5, #4]
  40baec:	60ac      	str	r4, [r5, #8]
  40baee:	666c      	str	r4, [r5, #100]	; 0x64
  40baf0:	81ec      	strh	r4, [r5, #14]
  40baf2:	612c      	str	r4, [r5, #16]
  40baf4:	616c      	str	r4, [r5, #20]
  40baf6:	61ac      	str	r4, [r5, #24]
  40baf8:	f002 fe34 	bl	40e764 <__fini_array_end>
  40bafc:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40bba8 <__sinit.part.1+0xf0>
  40bb00:	f8da 6008 	ldr.w	r6, [sl, #8]
  40bb04:	f04f 0301 	mov.w	r3, #1
  40bb08:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40bbac <__sinit.part.1+0xf4>
  40bb0c:	f04f 0e09 	mov.w	lr, #9
  40bb10:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40bbb0 <__sinit.part.1+0xf8>
  40bb14:	4621      	mov	r1, r4
  40bb16:	4f23      	ldr	r7, [pc, #140]	; (40bba4 <__sinit.part.1+0xec>)
  40bb18:	2208      	movs	r2, #8
  40bb1a:	61ed      	str	r5, [r5, #28]
  40bb1c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40bb20:	f8c5 b020 	str.w	fp, [r5, #32]
  40bb24:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40bb28:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40bb2c:	62ef      	str	r7, [r5, #44]	; 0x2c
  40bb2e:	81f3      	strh	r3, [r6, #14]
  40bb30:	f8a6 e00c 	strh.w	lr, [r6, #12]
  40bb34:	6034      	str	r4, [r6, #0]
  40bb36:	6074      	str	r4, [r6, #4]
  40bb38:	60b4      	str	r4, [r6, #8]
  40bb3a:	6674      	str	r4, [r6, #100]	; 0x64
  40bb3c:	6134      	str	r4, [r6, #16]
  40bb3e:	6174      	str	r4, [r6, #20]
  40bb40:	61b4      	str	r4, [r6, #24]
  40bb42:	f002 fe0f 	bl	40e764 <__fini_array_end>
  40bb46:	f8da 500c 	ldr.w	r5, [sl, #12]
  40bb4a:	f04f 0c12 	mov.w	ip, #18
  40bb4e:	f04f 0e02 	mov.w	lr, #2
  40bb52:	61f6      	str	r6, [r6, #28]
  40bb54:	4621      	mov	r1, r4
  40bb56:	f8c6 b020 	str.w	fp, [r6, #32]
  40bb5a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40bb5e:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  40bb62:	2208      	movs	r2, #8
  40bb64:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  40bb68:	62f7      	str	r7, [r6, #44]	; 0x2c
  40bb6a:	602c      	str	r4, [r5, #0]
  40bb6c:	606c      	str	r4, [r5, #4]
  40bb6e:	60ac      	str	r4, [r5, #8]
  40bb70:	666c      	str	r4, [r5, #100]	; 0x64
  40bb72:	612c      	str	r4, [r5, #16]
  40bb74:	616c      	str	r4, [r5, #20]
  40bb76:	61ac      	str	r4, [r5, #24]
  40bb78:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40bb7c:	f8a5 e00e 	strh.w	lr, [r5, #14]
  40bb80:	f002 fdf0 	bl	40e764 <__fini_array_end>
  40bb84:	2301      	movs	r3, #1
  40bb86:	61ed      	str	r5, [r5, #28]
  40bb88:	f8c5 b020 	str.w	fp, [r5, #32]
  40bb8c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40bb90:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40bb94:	62ef      	str	r7, [r5, #44]	; 0x2c
  40bb96:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40bb9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb9e:	bf00      	nop
  40bba0:	0040baad 	.word	0x0040baad
  40bba4:	0040cff9 	.word	0x0040cff9
  40bba8:	0040cf79 	.word	0x0040cf79
  40bbac:	0040cf9d 	.word	0x0040cf9d
  40bbb0:	0040cfd5 	.word	0x0040cfd5

0040bbb4 <__sinit>:
  40bbb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bbb6:	b103      	cbz	r3, 40bbba <__sinit+0x6>
  40bbb8:	4770      	bx	lr
  40bbba:	f7ff bf7d 	b.w	40bab8 <__sinit.part.1>
  40bbbe:	bf00      	nop

0040bbc0 <__sfp_lock_acquire>:
  40bbc0:	4770      	bx	lr
  40bbc2:	bf00      	nop

0040bbc4 <__sfp_lock_release>:
  40bbc4:	4770      	bx	lr
  40bbc6:	bf00      	nop

0040bbc8 <__libc_fini_array>:
  40bbc8:	b538      	push	{r3, r4, r5, lr}
  40bbca:	4b08      	ldr	r3, [pc, #32]	; (40bbec <__libc_fini_array+0x24>)
  40bbcc:	4d08      	ldr	r5, [pc, #32]	; (40bbf0 <__libc_fini_array+0x28>)
  40bbce:	1aed      	subs	r5, r5, r3
  40bbd0:	10ac      	asrs	r4, r5, #2
  40bbd2:	bf18      	it	ne
  40bbd4:	18ed      	addne	r5, r5, r3
  40bbd6:	d005      	beq.n	40bbe4 <__libc_fini_array+0x1c>
  40bbd8:	3c01      	subs	r4, #1
  40bbda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40bbde:	4798      	blx	r3
  40bbe0:	2c00      	cmp	r4, #0
  40bbe2:	d1f9      	bne.n	40bbd8 <__libc_fini_array+0x10>
  40bbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40bbe8:	f002 bdb4 	b.w	40e754 <_fini>
  40bbec:	0040e760 	.word	0x0040e760
  40bbf0:	0040e764 	.word	0x0040e764

0040bbf4 <__fputwc>:
  40bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bbf8:	b082      	sub	sp, #8
  40bbfa:	4607      	mov	r7, r0
  40bbfc:	460e      	mov	r6, r1
  40bbfe:	4614      	mov	r4, r2
  40bc00:	f000 fb46 	bl	40c290 <__locale_mb_cur_max>
  40bc04:	2801      	cmp	r0, #1
  40bc06:	d040      	beq.n	40bc8a <__fputwc+0x96>
  40bc08:	4638      	mov	r0, r7
  40bc0a:	a901      	add	r1, sp, #4
  40bc0c:	4632      	mov	r2, r6
  40bc0e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40bc12:	f001 fad1 	bl	40d1b8 <_wcrtomb_r>
  40bc16:	f1b0 3fff 	cmp.w	r0, #4294967295
  40bc1a:	4680      	mov	r8, r0
  40bc1c:	d02e      	beq.n	40bc7c <__fputwc+0x88>
  40bc1e:	2800      	cmp	r0, #0
  40bc20:	d03b      	beq.n	40bc9a <__fputwc+0xa6>
  40bc22:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40bc26:	2500      	movs	r5, #0
  40bc28:	e009      	b.n	40bc3e <__fputwc+0x4a>
  40bc2a:	6823      	ldr	r3, [r4, #0]
  40bc2c:	7019      	strb	r1, [r3, #0]
  40bc2e:	6823      	ldr	r3, [r4, #0]
  40bc30:	3301      	adds	r3, #1
  40bc32:	6023      	str	r3, [r4, #0]
  40bc34:	3501      	adds	r5, #1
  40bc36:	45a8      	cmp	r8, r5
  40bc38:	d92f      	bls.n	40bc9a <__fputwc+0xa6>
  40bc3a:	ab01      	add	r3, sp, #4
  40bc3c:	5d59      	ldrb	r1, [r3, r5]
  40bc3e:	68a3      	ldr	r3, [r4, #8]
  40bc40:	3b01      	subs	r3, #1
  40bc42:	2b00      	cmp	r3, #0
  40bc44:	60a3      	str	r3, [r4, #8]
  40bc46:	daf0      	bge.n	40bc2a <__fputwc+0x36>
  40bc48:	69a2      	ldr	r2, [r4, #24]
  40bc4a:	4293      	cmp	r3, r2
  40bc4c:	db06      	blt.n	40bc5c <__fputwc+0x68>
  40bc4e:	6823      	ldr	r3, [r4, #0]
  40bc50:	7019      	strb	r1, [r3, #0]
  40bc52:	6823      	ldr	r3, [r4, #0]
  40bc54:	7819      	ldrb	r1, [r3, #0]
  40bc56:	3301      	adds	r3, #1
  40bc58:	290a      	cmp	r1, #10
  40bc5a:	d1ea      	bne.n	40bc32 <__fputwc+0x3e>
  40bc5c:	4638      	mov	r0, r7
  40bc5e:	4622      	mov	r2, r4
  40bc60:	f001 fa56 	bl	40d110 <__swbuf_r>
  40bc64:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40bc68:	fab0 f080 	clz	r0, r0
  40bc6c:	0940      	lsrs	r0, r0, #5
  40bc6e:	2800      	cmp	r0, #0
  40bc70:	d0e0      	beq.n	40bc34 <__fputwc+0x40>
  40bc72:	f04f 30ff 	mov.w	r0, #4294967295
  40bc76:	b002      	add	sp, #8
  40bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bc7c:	89a3      	ldrh	r3, [r4, #12]
  40bc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bc82:	81a3      	strh	r3, [r4, #12]
  40bc84:	b002      	add	sp, #8
  40bc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bc8a:	1e73      	subs	r3, r6, #1
  40bc8c:	2bfe      	cmp	r3, #254	; 0xfe
  40bc8e:	d8bb      	bhi.n	40bc08 <__fputwc+0x14>
  40bc90:	b2f1      	uxtb	r1, r6
  40bc92:	4680      	mov	r8, r0
  40bc94:	f88d 1004 	strb.w	r1, [sp, #4]
  40bc98:	e7c5      	b.n	40bc26 <__fputwc+0x32>
  40bc9a:	4630      	mov	r0, r6
  40bc9c:	b002      	add	sp, #8
  40bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bca2:	bf00      	nop

0040bca4 <_fputwc_r>:
  40bca4:	8993      	ldrh	r3, [r2, #12]
  40bca6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40bcaa:	d10b      	bne.n	40bcc4 <_fputwc_r+0x20>
  40bcac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40bcb0:	b410      	push	{r4}
  40bcb2:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40bcb4:	8193      	strh	r3, [r2, #12]
  40bcb6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40bcba:	6654      	str	r4, [r2, #100]	; 0x64
  40bcbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  40bcc0:	f7ff bf98 	b.w	40bbf4 <__fputwc>
  40bcc4:	f7ff bf96 	b.w	40bbf4 <__fputwc>

0040bcc8 <_malloc_trim_r>:
  40bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bcca:	4f22      	ldr	r7, [pc, #136]	; (40bd54 <_malloc_trim_r+0x8c>)
  40bccc:	460c      	mov	r4, r1
  40bcce:	4606      	mov	r6, r0
  40bcd0:	f7fc f9f8 	bl	4080c4 <__malloc_lock>
  40bcd4:	68ba      	ldr	r2, [r7, #8]
  40bcd6:	4b20      	ldr	r3, [pc, #128]	; (40bd58 <_malloc_trim_r+0x90>)
  40bcd8:	6855      	ldr	r5, [r2, #4]
  40bcda:	f025 0503 	bic.w	r5, r5, #3
  40bcde:	1b2c      	subs	r4, r5, r4
  40bce0:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40bce4:	4023      	ands	r3, r4
  40bce6:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40bcea:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40bcee:	db07      	blt.n	40bd00 <_malloc_trim_r+0x38>
  40bcf0:	4630      	mov	r0, r6
  40bcf2:	2100      	movs	r1, #0
  40bcf4:	f7fc f9ea 	bl	4080cc <_sbrk_r>
  40bcf8:	68bb      	ldr	r3, [r7, #8]
  40bcfa:	442b      	add	r3, r5
  40bcfc:	4298      	cmp	r0, r3
  40bcfe:	d004      	beq.n	40bd0a <_malloc_trim_r+0x42>
  40bd00:	4630      	mov	r0, r6
  40bd02:	f7fc f9e1 	bl	4080c8 <__malloc_unlock>
  40bd06:	2000      	movs	r0, #0
  40bd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bd0a:	4630      	mov	r0, r6
  40bd0c:	4261      	negs	r1, r4
  40bd0e:	f7fc f9dd 	bl	4080cc <_sbrk_r>
  40bd12:	3001      	adds	r0, #1
  40bd14:	d00d      	beq.n	40bd32 <_malloc_trim_r+0x6a>
  40bd16:	4a11      	ldr	r2, [pc, #68]	; (40bd5c <_malloc_trim_r+0x94>)
  40bd18:	1b2d      	subs	r5, r5, r4
  40bd1a:	68b9      	ldr	r1, [r7, #8]
  40bd1c:	4630      	mov	r0, r6
  40bd1e:	6813      	ldr	r3, [r2, #0]
  40bd20:	f045 0501 	orr.w	r5, r5, #1
  40bd24:	1b1b      	subs	r3, r3, r4
  40bd26:	604d      	str	r5, [r1, #4]
  40bd28:	6013      	str	r3, [r2, #0]
  40bd2a:	f7fc f9cd 	bl	4080c8 <__malloc_unlock>
  40bd2e:	2001      	movs	r0, #1
  40bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bd32:	4630      	mov	r0, r6
  40bd34:	2100      	movs	r1, #0
  40bd36:	f7fc f9c9 	bl	4080cc <_sbrk_r>
  40bd3a:	68ba      	ldr	r2, [r7, #8]
  40bd3c:	1a83      	subs	r3, r0, r2
  40bd3e:	2b0f      	cmp	r3, #15
  40bd40:	ddde      	ble.n	40bd00 <_malloc_trim_r+0x38>
  40bd42:	4c07      	ldr	r4, [pc, #28]	; (40bd60 <_malloc_trim_r+0x98>)
  40bd44:	f043 0301 	orr.w	r3, r3, #1
  40bd48:	4904      	ldr	r1, [pc, #16]	; (40bd5c <_malloc_trim_r+0x94>)
  40bd4a:	6824      	ldr	r4, [r4, #0]
  40bd4c:	6053      	str	r3, [r2, #4]
  40bd4e:	1b00      	subs	r0, r0, r4
  40bd50:	6008      	str	r0, [r1, #0]
  40bd52:	e7d5      	b.n	40bd00 <_malloc_trim_r+0x38>
  40bd54:	2040044c 	.word	0x2040044c
  40bd58:	fffff000 	.word	0xfffff000
  40bd5c:	2040c2b0 	.word	0x2040c2b0
  40bd60:	20400858 	.word	0x20400858

0040bd64 <_free_r>:
  40bd64:	2900      	cmp	r1, #0
  40bd66:	d04d      	beq.n	40be04 <_free_r+0xa0>
  40bd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bd6c:	460c      	mov	r4, r1
  40bd6e:	4680      	mov	r8, r0
  40bd70:	f7fc f9a8 	bl	4080c4 <__malloc_lock>
  40bd74:	4963      	ldr	r1, [pc, #396]	; (40bf04 <_free_r+0x1a0>)
  40bd76:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40bd7a:	f1a4 0508 	sub.w	r5, r4, #8
  40bd7e:	688e      	ldr	r6, [r1, #8]
  40bd80:	f027 0301 	bic.w	r3, r7, #1
  40bd84:	18ea      	adds	r2, r5, r3
  40bd86:	6850      	ldr	r0, [r2, #4]
  40bd88:	4296      	cmp	r6, r2
  40bd8a:	f020 0003 	bic.w	r0, r0, #3
  40bd8e:	d059      	beq.n	40be44 <_free_r+0xe0>
  40bd90:	07fe      	lsls	r6, r7, #31
  40bd92:	6050      	str	r0, [r2, #4]
  40bd94:	d40b      	bmi.n	40bdae <_free_r+0x4a>
  40bd96:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40bd9a:	f101 0708 	add.w	r7, r1, #8
  40bd9e:	1b2d      	subs	r5, r5, r4
  40bda0:	4423      	add	r3, r4
  40bda2:	68ac      	ldr	r4, [r5, #8]
  40bda4:	42bc      	cmp	r4, r7
  40bda6:	d066      	beq.n	40be76 <_free_r+0x112>
  40bda8:	68ef      	ldr	r7, [r5, #12]
  40bdaa:	60e7      	str	r7, [r4, #12]
  40bdac:	60bc      	str	r4, [r7, #8]
  40bdae:	1814      	adds	r4, r2, r0
  40bdb0:	6864      	ldr	r4, [r4, #4]
  40bdb2:	07e4      	lsls	r4, r4, #31
  40bdb4:	d40c      	bmi.n	40bdd0 <_free_r+0x6c>
  40bdb6:	4c54      	ldr	r4, [pc, #336]	; (40bf08 <_free_r+0x1a4>)
  40bdb8:	4403      	add	r3, r0
  40bdba:	6890      	ldr	r0, [r2, #8]
  40bdbc:	42a0      	cmp	r0, r4
  40bdbe:	d07c      	beq.n	40beba <_free_r+0x156>
  40bdc0:	68d4      	ldr	r4, [r2, #12]
  40bdc2:	f043 0201 	orr.w	r2, r3, #1
  40bdc6:	60c4      	str	r4, [r0, #12]
  40bdc8:	60a0      	str	r0, [r4, #8]
  40bdca:	606a      	str	r2, [r5, #4]
  40bdcc:	50eb      	str	r3, [r5, r3]
  40bdce:	e003      	b.n	40bdd8 <_free_r+0x74>
  40bdd0:	f043 0201 	orr.w	r2, r3, #1
  40bdd4:	606a      	str	r2, [r5, #4]
  40bdd6:	50eb      	str	r3, [r5, r3]
  40bdd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bddc:	d213      	bcs.n	40be06 <_free_r+0xa2>
  40bdde:	08db      	lsrs	r3, r3, #3
  40bde0:	2001      	movs	r0, #1
  40bde2:	684a      	ldr	r2, [r1, #4]
  40bde4:	109c      	asrs	r4, r3, #2
  40bde6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40bdea:	40a0      	lsls	r0, r4
  40bdec:	689c      	ldr	r4, [r3, #8]
  40bdee:	4302      	orrs	r2, r0
  40bdf0:	60eb      	str	r3, [r5, #12]
  40bdf2:	60ac      	str	r4, [r5, #8]
  40bdf4:	604a      	str	r2, [r1, #4]
  40bdf6:	609d      	str	r5, [r3, #8]
  40bdf8:	60e5      	str	r5, [r4, #12]
  40bdfa:	4640      	mov	r0, r8
  40bdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40be00:	f7fc b962 	b.w	4080c8 <__malloc_unlock>
  40be04:	4770      	bx	lr
  40be06:	0a5a      	lsrs	r2, r3, #9
  40be08:	2a04      	cmp	r2, #4
  40be0a:	d847      	bhi.n	40be9c <_free_r+0x138>
  40be0c:	099a      	lsrs	r2, r3, #6
  40be0e:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40be12:	0060      	lsls	r0, r4, #1
  40be14:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40be18:	493a      	ldr	r1, [pc, #232]	; (40bf04 <_free_r+0x1a0>)
  40be1a:	6882      	ldr	r2, [r0, #8]
  40be1c:	4282      	cmp	r2, r0
  40be1e:	d043      	beq.n	40bea8 <_free_r+0x144>
  40be20:	6851      	ldr	r1, [r2, #4]
  40be22:	f021 0103 	bic.w	r1, r1, #3
  40be26:	4299      	cmp	r1, r3
  40be28:	d902      	bls.n	40be30 <_free_r+0xcc>
  40be2a:	6892      	ldr	r2, [r2, #8]
  40be2c:	4290      	cmp	r0, r2
  40be2e:	d1f7      	bne.n	40be20 <_free_r+0xbc>
  40be30:	68d3      	ldr	r3, [r2, #12]
  40be32:	60eb      	str	r3, [r5, #12]
  40be34:	4640      	mov	r0, r8
  40be36:	60aa      	str	r2, [r5, #8]
  40be38:	609d      	str	r5, [r3, #8]
  40be3a:	60d5      	str	r5, [r2, #12]
  40be3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40be40:	f7fc b942 	b.w	4080c8 <__malloc_unlock>
  40be44:	07ff      	lsls	r7, r7, #31
  40be46:	4403      	add	r3, r0
  40be48:	d407      	bmi.n	40be5a <_free_r+0xf6>
  40be4a:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40be4e:	1aad      	subs	r5, r5, r2
  40be50:	4413      	add	r3, r2
  40be52:	68a8      	ldr	r0, [r5, #8]
  40be54:	68ea      	ldr	r2, [r5, #12]
  40be56:	60c2      	str	r2, [r0, #12]
  40be58:	6090      	str	r0, [r2, #8]
  40be5a:	4a2c      	ldr	r2, [pc, #176]	; (40bf0c <_free_r+0x1a8>)
  40be5c:	f043 0001 	orr.w	r0, r3, #1
  40be60:	6812      	ldr	r2, [r2, #0]
  40be62:	6068      	str	r0, [r5, #4]
  40be64:	4293      	cmp	r3, r2
  40be66:	608d      	str	r5, [r1, #8]
  40be68:	d3c7      	bcc.n	40bdfa <_free_r+0x96>
  40be6a:	4b29      	ldr	r3, [pc, #164]	; (40bf10 <_free_r+0x1ac>)
  40be6c:	4640      	mov	r0, r8
  40be6e:	6819      	ldr	r1, [r3, #0]
  40be70:	f7ff ff2a 	bl	40bcc8 <_malloc_trim_r>
  40be74:	e7c1      	b.n	40bdfa <_free_r+0x96>
  40be76:	1811      	adds	r1, r2, r0
  40be78:	6849      	ldr	r1, [r1, #4]
  40be7a:	07c9      	lsls	r1, r1, #31
  40be7c:	d409      	bmi.n	40be92 <_free_r+0x12e>
  40be7e:	4403      	add	r3, r0
  40be80:	68d1      	ldr	r1, [r2, #12]
  40be82:	6892      	ldr	r2, [r2, #8]
  40be84:	f043 0001 	orr.w	r0, r3, #1
  40be88:	60d1      	str	r1, [r2, #12]
  40be8a:	608a      	str	r2, [r1, #8]
  40be8c:	6068      	str	r0, [r5, #4]
  40be8e:	50eb      	str	r3, [r5, r3]
  40be90:	e7b3      	b.n	40bdfa <_free_r+0x96>
  40be92:	f043 0201 	orr.w	r2, r3, #1
  40be96:	606a      	str	r2, [r5, #4]
  40be98:	50eb      	str	r3, [r5, r3]
  40be9a:	e7ae      	b.n	40bdfa <_free_r+0x96>
  40be9c:	2a14      	cmp	r2, #20
  40be9e:	d815      	bhi.n	40becc <_free_r+0x168>
  40bea0:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  40bea4:	0060      	lsls	r0, r4, #1
  40bea6:	e7b5      	b.n	40be14 <_free_r+0xb0>
  40bea8:	10a4      	asrs	r4, r4, #2
  40beaa:	2701      	movs	r7, #1
  40beac:	6848      	ldr	r0, [r1, #4]
  40beae:	4613      	mov	r3, r2
  40beb0:	fa07 f404 	lsl.w	r4, r7, r4
  40beb4:	4320      	orrs	r0, r4
  40beb6:	6048      	str	r0, [r1, #4]
  40beb8:	e7bb      	b.n	40be32 <_free_r+0xce>
  40beba:	f043 0201 	orr.w	r2, r3, #1
  40bebe:	614d      	str	r5, [r1, #20]
  40bec0:	610d      	str	r5, [r1, #16]
  40bec2:	60e8      	str	r0, [r5, #12]
  40bec4:	60a8      	str	r0, [r5, #8]
  40bec6:	606a      	str	r2, [r5, #4]
  40bec8:	50eb      	str	r3, [r5, r3]
  40beca:	e796      	b.n	40bdfa <_free_r+0x96>
  40becc:	2a54      	cmp	r2, #84	; 0x54
  40bece:	d804      	bhi.n	40beda <_free_r+0x176>
  40bed0:	0b1a      	lsrs	r2, r3, #12
  40bed2:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40bed6:	0060      	lsls	r0, r4, #1
  40bed8:	e79c      	b.n	40be14 <_free_r+0xb0>
  40beda:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40bede:	d804      	bhi.n	40beea <_free_r+0x186>
  40bee0:	0bda      	lsrs	r2, r3, #15
  40bee2:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40bee6:	0060      	lsls	r0, r4, #1
  40bee8:	e794      	b.n	40be14 <_free_r+0xb0>
  40beea:	f240 5054 	movw	r0, #1364	; 0x554
  40beee:	4282      	cmp	r2, r0
  40bef0:	d804      	bhi.n	40befc <_free_r+0x198>
  40bef2:	0c9a      	lsrs	r2, r3, #18
  40bef4:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  40bef8:	0060      	lsls	r0, r4, #1
  40befa:	e78b      	b.n	40be14 <_free_r+0xb0>
  40befc:	20fc      	movs	r0, #252	; 0xfc
  40befe:	247e      	movs	r4, #126	; 0x7e
  40bf00:	e788      	b.n	40be14 <_free_r+0xb0>
  40bf02:	bf00      	nop
  40bf04:	2040044c 	.word	0x2040044c
  40bf08:	20400454 	.word	0x20400454
  40bf0c:	20400854 	.word	0x20400854
  40bf10:	2040c2ac 	.word	0x2040c2ac

0040bf14 <__sfvwrite_r>:
  40bf14:	6893      	ldr	r3, [r2, #8]
  40bf16:	2b00      	cmp	r3, #0
  40bf18:	d07a      	beq.n	40c010 <__sfvwrite_r+0xfc>
  40bf1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bf1e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40bf22:	b083      	sub	sp, #12
  40bf24:	460c      	mov	r4, r1
  40bf26:	4681      	mov	r9, r0
  40bf28:	f01e 0f08 	tst.w	lr, #8
  40bf2c:	4616      	mov	r6, r2
  40bf2e:	d026      	beq.n	40bf7e <__sfvwrite_r+0x6a>
  40bf30:	690b      	ldr	r3, [r1, #16]
  40bf32:	b323      	cbz	r3, 40bf7e <__sfvwrite_r+0x6a>
  40bf34:	f00e 0802 	and.w	r8, lr, #2
  40bf38:	6835      	ldr	r5, [r6, #0]
  40bf3a:	fa1f f088 	uxth.w	r0, r8
  40bf3e:	b370      	cbz	r0, 40bf9e <__sfvwrite_r+0x8a>
  40bf40:	f04f 0a00 	mov.w	sl, #0
  40bf44:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 40c234 <__sfvwrite_r+0x320>
  40bf48:	46d0      	mov	r8, sl
  40bf4a:	45d8      	cmp	r8, fp
  40bf4c:	4643      	mov	r3, r8
  40bf4e:	4652      	mov	r2, sl
  40bf50:	4648      	mov	r0, r9
  40bf52:	bf28      	it	cs
  40bf54:	465b      	movcs	r3, fp
  40bf56:	f1b8 0f00 	cmp.w	r8, #0
  40bf5a:	d053      	beq.n	40c004 <__sfvwrite_r+0xf0>
  40bf5c:	69e1      	ldr	r1, [r4, #28]
  40bf5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40bf60:	47b8      	blx	r7
  40bf62:	2800      	cmp	r0, #0
  40bf64:	dd73      	ble.n	40c04e <__sfvwrite_r+0x13a>
  40bf66:	68b3      	ldr	r3, [r6, #8]
  40bf68:	4482      	add	sl, r0
  40bf6a:	ebc0 0808 	rsb	r8, r0, r8
  40bf6e:	1a18      	subs	r0, r3, r0
  40bf70:	60b0      	str	r0, [r6, #8]
  40bf72:	2800      	cmp	r0, #0
  40bf74:	d1e9      	bne.n	40bf4a <__sfvwrite_r+0x36>
  40bf76:	2000      	movs	r0, #0
  40bf78:	b003      	add	sp, #12
  40bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf7e:	4648      	mov	r0, r9
  40bf80:	4621      	mov	r1, r4
  40bf82:	f7fe fc4b 	bl	40a81c <__swsetup_r>
  40bf86:	2800      	cmp	r0, #0
  40bf88:	f040 814c 	bne.w	40c224 <__sfvwrite_r+0x310>
  40bf8c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40bf90:	6835      	ldr	r5, [r6, #0]
  40bf92:	f00e 0802 	and.w	r8, lr, #2
  40bf96:	fa1f f088 	uxth.w	r0, r8
  40bf9a:	2800      	cmp	r0, #0
  40bf9c:	d1d0      	bne.n	40bf40 <__sfvwrite_r+0x2c>
  40bf9e:	f01e 0b01 	ands.w	fp, lr, #1
  40bfa2:	d15d      	bne.n	40c060 <__sfvwrite_r+0x14c>
  40bfa4:	46d8      	mov	r8, fp
  40bfa6:	f1b8 0f00 	cmp.w	r8, #0
  40bfaa:	d025      	beq.n	40bff8 <__sfvwrite_r+0xe4>
  40bfac:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40bfb0:	68a7      	ldr	r7, [r4, #8]
  40bfb2:	d02f      	beq.n	40c014 <__sfvwrite_r+0x100>
  40bfb4:	45b8      	cmp	r8, r7
  40bfb6:	46ba      	mov	sl, r7
  40bfb8:	f0c0 80a8 	bcc.w	40c10c <__sfvwrite_r+0x1f8>
  40bfbc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40bfc0:	f040 80b5 	bne.w	40c12e <__sfvwrite_r+0x21a>
  40bfc4:	6820      	ldr	r0, [r4, #0]
  40bfc6:	4659      	mov	r1, fp
  40bfc8:	4652      	mov	r2, sl
  40bfca:	f000 fa25 	bl	40c418 <memmove>
  40bfce:	68a2      	ldr	r2, [r4, #8]
  40bfd0:	6821      	ldr	r1, [r4, #0]
  40bfd2:	4640      	mov	r0, r8
  40bfd4:	1bd7      	subs	r7, r2, r7
  40bfd6:	eb01 030a 	add.w	r3, r1, sl
  40bfda:	60a7      	str	r7, [r4, #8]
  40bfdc:	6023      	str	r3, [r4, #0]
  40bfde:	68b3      	ldr	r3, [r6, #8]
  40bfe0:	4483      	add	fp, r0
  40bfe2:	ebc0 0808 	rsb	r8, r0, r8
  40bfe6:	1a18      	subs	r0, r3, r0
  40bfe8:	60b0      	str	r0, [r6, #8]
  40bfea:	2800      	cmp	r0, #0
  40bfec:	d0c3      	beq.n	40bf76 <__sfvwrite_r+0x62>
  40bfee:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40bff2:	f1b8 0f00 	cmp.w	r8, #0
  40bff6:	d1d9      	bne.n	40bfac <__sfvwrite_r+0x98>
  40bff8:	f8d5 b000 	ldr.w	fp, [r5]
  40bffc:	3508      	adds	r5, #8
  40bffe:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40c002:	e7d0      	b.n	40bfa6 <__sfvwrite_r+0x92>
  40c004:	f8d5 a000 	ldr.w	sl, [r5]
  40c008:	3508      	adds	r5, #8
  40c00a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40c00e:	e79c      	b.n	40bf4a <__sfvwrite_r+0x36>
  40c010:	2000      	movs	r0, #0
  40c012:	4770      	bx	lr
  40c014:	6820      	ldr	r0, [r4, #0]
  40c016:	6923      	ldr	r3, [r4, #16]
  40c018:	4298      	cmp	r0, r3
  40c01a:	d803      	bhi.n	40c024 <__sfvwrite_r+0x110>
  40c01c:	6963      	ldr	r3, [r4, #20]
  40c01e:	4598      	cmp	r8, r3
  40c020:	f080 80bf 	bcs.w	40c1a2 <__sfvwrite_r+0x28e>
  40c024:	4547      	cmp	r7, r8
  40c026:	4659      	mov	r1, fp
  40c028:	bf28      	it	cs
  40c02a:	4647      	movcs	r7, r8
  40c02c:	463a      	mov	r2, r7
  40c02e:	f000 f9f3 	bl	40c418 <memmove>
  40c032:	68a3      	ldr	r3, [r4, #8]
  40c034:	6822      	ldr	r2, [r4, #0]
  40c036:	1bdb      	subs	r3, r3, r7
  40c038:	443a      	add	r2, r7
  40c03a:	60a3      	str	r3, [r4, #8]
  40c03c:	6022      	str	r2, [r4, #0]
  40c03e:	2b00      	cmp	r3, #0
  40c040:	d149      	bne.n	40c0d6 <__sfvwrite_r+0x1c2>
  40c042:	4648      	mov	r0, r9
  40c044:	4621      	mov	r1, r4
  40c046:	f7ff fd1b 	bl	40ba80 <_fflush_r>
  40c04a:	2800      	cmp	r0, #0
  40c04c:	d043      	beq.n	40c0d6 <__sfvwrite_r+0x1c2>
  40c04e:	89a3      	ldrh	r3, [r4, #12]
  40c050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c054:	f04f 30ff 	mov.w	r0, #4294967295
  40c058:	81a3      	strh	r3, [r4, #12]
  40c05a:	b003      	add	sp, #12
  40c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c060:	4680      	mov	r8, r0
  40c062:	4683      	mov	fp, r0
  40c064:	4682      	mov	sl, r0
  40c066:	9000      	str	r0, [sp, #0]
  40c068:	f1ba 0f00 	cmp.w	sl, #0
  40c06c:	d02b      	beq.n	40c0c6 <__sfvwrite_r+0x1b2>
  40c06e:	9b00      	ldr	r3, [sp, #0]
  40c070:	2b00      	cmp	r3, #0
  40c072:	d04f      	beq.n	40c114 <__sfvwrite_r+0x200>
  40c074:	45d0      	cmp	r8, sl
  40c076:	6962      	ldr	r2, [r4, #20]
  40c078:	68a1      	ldr	r1, [r4, #8]
  40c07a:	4643      	mov	r3, r8
  40c07c:	bf28      	it	cs
  40c07e:	4653      	movcs	r3, sl
  40c080:	6820      	ldr	r0, [r4, #0]
  40c082:	eb02 0c01 	add.w	ip, r2, r1
  40c086:	461f      	mov	r7, r3
  40c088:	4563      	cmp	r3, ip
  40c08a:	dd03      	ble.n	40c094 <__sfvwrite_r+0x180>
  40c08c:	6921      	ldr	r1, [r4, #16]
  40c08e:	4288      	cmp	r0, r1
  40c090:	f200 8099 	bhi.w	40c1c6 <__sfvwrite_r+0x2b2>
  40c094:	4293      	cmp	r3, r2
  40c096:	db20      	blt.n	40c0da <__sfvwrite_r+0x1c6>
  40c098:	4613      	mov	r3, r2
  40c09a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c09c:	4648      	mov	r0, r9
  40c09e:	69e1      	ldr	r1, [r4, #28]
  40c0a0:	465a      	mov	r2, fp
  40c0a2:	47b8      	blx	r7
  40c0a4:	1e07      	subs	r7, r0, #0
  40c0a6:	ddd2      	ble.n	40c04e <__sfvwrite_r+0x13a>
  40c0a8:	ebb8 0807 	subs.w	r8, r8, r7
  40c0ac:	d025      	beq.n	40c0fa <__sfvwrite_r+0x1e6>
  40c0ae:	68b3      	ldr	r3, [r6, #8]
  40c0b0:	44bb      	add	fp, r7
  40c0b2:	ebc7 0a0a 	rsb	sl, r7, sl
  40c0b6:	1bdf      	subs	r7, r3, r7
  40c0b8:	60b7      	str	r7, [r6, #8]
  40c0ba:	2f00      	cmp	r7, #0
  40c0bc:	f43f af5b 	beq.w	40bf76 <__sfvwrite_r+0x62>
  40c0c0:	f1ba 0f00 	cmp.w	sl, #0
  40c0c4:	d1d3      	bne.n	40c06e <__sfvwrite_r+0x15a>
  40c0c6:	2300      	movs	r3, #0
  40c0c8:	f8d5 b000 	ldr.w	fp, [r5]
  40c0cc:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40c0d0:	3508      	adds	r5, #8
  40c0d2:	9300      	str	r3, [sp, #0]
  40c0d4:	e7c8      	b.n	40c068 <__sfvwrite_r+0x154>
  40c0d6:	4638      	mov	r0, r7
  40c0d8:	e781      	b.n	40bfde <__sfvwrite_r+0xca>
  40c0da:	461a      	mov	r2, r3
  40c0dc:	4659      	mov	r1, fp
  40c0de:	9301      	str	r3, [sp, #4]
  40c0e0:	f000 f99a 	bl	40c418 <memmove>
  40c0e4:	68a2      	ldr	r2, [r4, #8]
  40c0e6:	ebb8 0807 	subs.w	r8, r8, r7
  40c0ea:	6821      	ldr	r1, [r4, #0]
  40c0ec:	9b01      	ldr	r3, [sp, #4]
  40c0ee:	eba2 0203 	sub.w	r2, r2, r3
  40c0f2:	440b      	add	r3, r1
  40c0f4:	60a2      	str	r2, [r4, #8]
  40c0f6:	6023      	str	r3, [r4, #0]
  40c0f8:	d1d9      	bne.n	40c0ae <__sfvwrite_r+0x19a>
  40c0fa:	4648      	mov	r0, r9
  40c0fc:	4621      	mov	r1, r4
  40c0fe:	f7ff fcbf 	bl	40ba80 <_fflush_r>
  40c102:	2800      	cmp	r0, #0
  40c104:	d1a3      	bne.n	40c04e <__sfvwrite_r+0x13a>
  40c106:	f8cd 8000 	str.w	r8, [sp]
  40c10a:	e7d0      	b.n	40c0ae <__sfvwrite_r+0x19a>
  40c10c:	4647      	mov	r7, r8
  40c10e:	6820      	ldr	r0, [r4, #0]
  40c110:	46c2      	mov	sl, r8
  40c112:	e758      	b.n	40bfc6 <__sfvwrite_r+0xb2>
  40c114:	4658      	mov	r0, fp
  40c116:	210a      	movs	r1, #10
  40c118:	4652      	mov	r2, sl
  40c11a:	f000 f935 	bl	40c388 <memchr>
  40c11e:	2800      	cmp	r0, #0
  40c120:	d07b      	beq.n	40c21a <__sfvwrite_r+0x306>
  40c122:	3001      	adds	r0, #1
  40c124:	2301      	movs	r3, #1
  40c126:	ebcb 0800 	rsb	r8, fp, r0
  40c12a:	9300      	str	r3, [sp, #0]
  40c12c:	e7a2      	b.n	40c074 <__sfvwrite_r+0x160>
  40c12e:	6963      	ldr	r3, [r4, #20]
  40c130:	6921      	ldr	r1, [r4, #16]
  40c132:	6827      	ldr	r7, [r4, #0]
  40c134:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  40c138:	1a7f      	subs	r7, r7, r1
  40c13a:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40c13e:	1c7b      	adds	r3, r7, #1
  40c140:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40c144:	4443      	add	r3, r8
  40c146:	4662      	mov	r2, ip
  40c148:	459c      	cmp	ip, r3
  40c14a:	d201      	bcs.n	40c150 <__sfvwrite_r+0x23c>
  40c14c:	469c      	mov	ip, r3
  40c14e:	461a      	mov	r2, r3
  40c150:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40c154:	f8cd c000 	str.w	ip, [sp]
  40c158:	d04b      	beq.n	40c1f2 <__sfvwrite_r+0x2de>
  40c15a:	4611      	mov	r1, r2
  40c15c:	4648      	mov	r0, r9
  40c15e:	f7fb fd05 	bl	407b6c <_malloc_r>
  40c162:	f8dd c000 	ldr.w	ip, [sp]
  40c166:	4682      	mov	sl, r0
  40c168:	2800      	cmp	r0, #0
  40c16a:	d05e      	beq.n	40c22a <__sfvwrite_r+0x316>
  40c16c:	463a      	mov	r2, r7
  40c16e:	6921      	ldr	r1, [r4, #16]
  40c170:	f8cd c000 	str.w	ip, [sp]
  40c174:	f002 fb02 	bl	40e77c <memcpy>
  40c178:	89a2      	ldrh	r2, [r4, #12]
  40c17a:	f8dd c000 	ldr.w	ip, [sp]
  40c17e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40c182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40c186:	81a2      	strh	r2, [r4, #12]
  40c188:	eb0a 0007 	add.w	r0, sl, r7
  40c18c:	ebc7 020c 	rsb	r2, r7, ip
  40c190:	f8c4 a010 	str.w	sl, [r4, #16]
  40c194:	4647      	mov	r7, r8
  40c196:	6020      	str	r0, [r4, #0]
  40c198:	46c2      	mov	sl, r8
  40c19a:	60a2      	str	r2, [r4, #8]
  40c19c:	f8c4 c014 	str.w	ip, [r4, #20]
  40c1a0:	e711      	b.n	40bfc6 <__sfvwrite_r+0xb2>
  40c1a2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40c1a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c1a8:	4648      	mov	r0, r9
  40c1aa:	69e1      	ldr	r1, [r4, #28]
  40c1ac:	45c6      	cmp	lr, r8
  40c1ae:	465a      	mov	r2, fp
  40c1b0:	bf28      	it	cs
  40c1b2:	46c6      	movcs	lr, r8
  40c1b4:	fb9e fef3 	sdiv	lr, lr, r3
  40c1b8:	fb0e f303 	mul.w	r3, lr, r3
  40c1bc:	47b8      	blx	r7
  40c1be:	2800      	cmp	r0, #0
  40c1c0:	f73f af0d 	bgt.w	40bfde <__sfvwrite_r+0xca>
  40c1c4:	e743      	b.n	40c04e <__sfvwrite_r+0x13a>
  40c1c6:	4662      	mov	r2, ip
  40c1c8:	4659      	mov	r1, fp
  40c1ca:	f8cd c004 	str.w	ip, [sp, #4]
  40c1ce:	f000 f923 	bl	40c418 <memmove>
  40c1d2:	6823      	ldr	r3, [r4, #0]
  40c1d4:	4648      	mov	r0, r9
  40c1d6:	f8dd c004 	ldr.w	ip, [sp, #4]
  40c1da:	4621      	mov	r1, r4
  40c1dc:	4463      	add	r3, ip
  40c1de:	6023      	str	r3, [r4, #0]
  40c1e0:	f7ff fc4e 	bl	40ba80 <_fflush_r>
  40c1e4:	f8dd c004 	ldr.w	ip, [sp, #4]
  40c1e8:	2800      	cmp	r0, #0
  40c1ea:	f47f af30 	bne.w	40c04e <__sfvwrite_r+0x13a>
  40c1ee:	4667      	mov	r7, ip
  40c1f0:	e75a      	b.n	40c0a8 <__sfvwrite_r+0x194>
  40c1f2:	4648      	mov	r0, r9
  40c1f4:	f000 fc7e 	bl	40caf4 <_realloc_r>
  40c1f8:	f8dd c000 	ldr.w	ip, [sp]
  40c1fc:	4682      	mov	sl, r0
  40c1fe:	2800      	cmp	r0, #0
  40c200:	d1c2      	bne.n	40c188 <__sfvwrite_r+0x274>
  40c202:	4648      	mov	r0, r9
  40c204:	6921      	ldr	r1, [r4, #16]
  40c206:	f7ff fdad 	bl	40bd64 <_free_r>
  40c20a:	89a3      	ldrh	r3, [r4, #12]
  40c20c:	220c      	movs	r2, #12
  40c20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c212:	f8c9 2000 	str.w	r2, [r9]
  40c216:	b29b      	uxth	r3, r3
  40c218:	e71a      	b.n	40c050 <__sfvwrite_r+0x13c>
  40c21a:	2301      	movs	r3, #1
  40c21c:	f10a 0801 	add.w	r8, sl, #1
  40c220:	9300      	str	r3, [sp, #0]
  40c222:	e727      	b.n	40c074 <__sfvwrite_r+0x160>
  40c224:	f04f 30ff 	mov.w	r0, #4294967295
  40c228:	e6a6      	b.n	40bf78 <__sfvwrite_r+0x64>
  40c22a:	220c      	movs	r2, #12
  40c22c:	89a3      	ldrh	r3, [r4, #12]
  40c22e:	f8c9 2000 	str.w	r2, [r9]
  40c232:	e70d      	b.n	40c050 <__sfvwrite_r+0x13c>
  40c234:	7ffffc00 	.word	0x7ffffc00

0040c238 <_fwalk_reent>:
  40c238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c23c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40c240:	d01e      	beq.n	40c280 <_fwalk_reent+0x48>
  40c242:	4688      	mov	r8, r1
  40c244:	4606      	mov	r6, r0
  40c246:	f04f 0900 	mov.w	r9, #0
  40c24a:	687d      	ldr	r5, [r7, #4]
  40c24c:	68bc      	ldr	r4, [r7, #8]
  40c24e:	3d01      	subs	r5, #1
  40c250:	d410      	bmi.n	40c274 <_fwalk_reent+0x3c>
  40c252:	89a3      	ldrh	r3, [r4, #12]
  40c254:	3d01      	subs	r5, #1
  40c256:	2b01      	cmp	r3, #1
  40c258:	d908      	bls.n	40c26c <_fwalk_reent+0x34>
  40c25a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40c25e:	4621      	mov	r1, r4
  40c260:	4630      	mov	r0, r6
  40c262:	3301      	adds	r3, #1
  40c264:	d002      	beq.n	40c26c <_fwalk_reent+0x34>
  40c266:	47c0      	blx	r8
  40c268:	ea49 0900 	orr.w	r9, r9, r0
  40c26c:	1c6b      	adds	r3, r5, #1
  40c26e:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40c272:	d1ee      	bne.n	40c252 <_fwalk_reent+0x1a>
  40c274:	683f      	ldr	r7, [r7, #0]
  40c276:	2f00      	cmp	r7, #0
  40c278:	d1e7      	bne.n	40c24a <_fwalk_reent+0x12>
  40c27a:	4648      	mov	r0, r9
  40c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c280:	46b9      	mov	r9, r7
  40c282:	4648      	mov	r0, r9
  40c284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040c288 <__locale_charset>:
  40c288:	4800      	ldr	r0, [pc, #0]	; (40c28c <__locale_charset+0x4>)
  40c28a:	4770      	bx	lr
  40c28c:	20400898 	.word	0x20400898

0040c290 <__locale_mb_cur_max>:
  40c290:	4b01      	ldr	r3, [pc, #4]	; (40c298 <__locale_mb_cur_max+0x8>)
  40c292:	6818      	ldr	r0, [r3, #0]
  40c294:	4770      	bx	lr
  40c296:	bf00      	nop
  40c298:	204008b8 	.word	0x204008b8

0040c29c <_localeconv_r>:
  40c29c:	4800      	ldr	r0, [pc, #0]	; (40c2a0 <_localeconv_r+0x4>)
  40c29e:	4770      	bx	lr
  40c2a0:	20400860 	.word	0x20400860

0040c2a4 <__smakebuf_r>:
  40c2a4:	898b      	ldrh	r3, [r1, #12]
  40c2a6:	b29a      	uxth	r2, r3
  40c2a8:	f012 0f02 	tst.w	r2, #2
  40c2ac:	d13d      	bne.n	40c32a <__smakebuf_r+0x86>
  40c2ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c2b0:	460c      	mov	r4, r1
  40c2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c2b6:	b091      	sub	sp, #68	; 0x44
  40c2b8:	4605      	mov	r5, r0
  40c2ba:	2900      	cmp	r1, #0
  40c2bc:	db19      	blt.n	40c2f2 <__smakebuf_r+0x4e>
  40c2be:	aa01      	add	r2, sp, #4
  40c2c0:	f001 f89c 	bl	40d3fc <_fstat_r>
  40c2c4:	2800      	cmp	r0, #0
  40c2c6:	db12      	blt.n	40c2ee <__smakebuf_r+0x4a>
  40c2c8:	9b02      	ldr	r3, [sp, #8]
  40c2ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40c2ce:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40c2d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40c2d6:	fab7 f787 	clz	r7, r7
  40c2da:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40c2de:	d02b      	beq.n	40c338 <__smakebuf_r+0x94>
  40c2e0:	89a3      	ldrh	r3, [r4, #12]
  40c2e2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40c2e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c2ea:	81a3      	strh	r3, [r4, #12]
  40c2ec:	e00c      	b.n	40c308 <__smakebuf_r+0x64>
  40c2ee:	89a3      	ldrh	r3, [r4, #12]
  40c2f0:	b29a      	uxth	r2, r3
  40c2f2:	f012 0f80 	tst.w	r2, #128	; 0x80
  40c2f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c2fa:	f04f 0700 	mov.w	r7, #0
  40c2fe:	bf0c      	ite	eq
  40c300:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40c304:	2640      	movne	r6, #64	; 0x40
  40c306:	81a3      	strh	r3, [r4, #12]
  40c308:	4628      	mov	r0, r5
  40c30a:	4631      	mov	r1, r6
  40c30c:	f7fb fc2e 	bl	407b6c <_malloc_r>
  40c310:	89a3      	ldrh	r3, [r4, #12]
  40c312:	b340      	cbz	r0, 40c366 <__smakebuf_r+0xc2>
  40c314:	4a1a      	ldr	r2, [pc, #104]	; (40c380 <__smakebuf_r+0xdc>)
  40c316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c31a:	63ea      	str	r2, [r5, #60]	; 0x3c
  40c31c:	81a3      	strh	r3, [r4, #12]
  40c31e:	6020      	str	r0, [r4, #0]
  40c320:	6120      	str	r0, [r4, #16]
  40c322:	6166      	str	r6, [r4, #20]
  40c324:	b99f      	cbnz	r7, 40c34e <__smakebuf_r+0xaa>
  40c326:	b011      	add	sp, #68	; 0x44
  40c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c32a:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40c32e:	2201      	movs	r2, #1
  40c330:	600b      	str	r3, [r1, #0]
  40c332:	610b      	str	r3, [r1, #16]
  40c334:	614a      	str	r2, [r1, #20]
  40c336:	4770      	bx	lr
  40c338:	4b12      	ldr	r3, [pc, #72]	; (40c384 <__smakebuf_r+0xe0>)
  40c33a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40c33c:	429a      	cmp	r2, r3
  40c33e:	d1cf      	bne.n	40c2e0 <__smakebuf_r+0x3c>
  40c340:	89a3      	ldrh	r3, [r4, #12]
  40c342:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40c346:	4333      	orrs	r3, r6
  40c348:	64e6      	str	r6, [r4, #76]	; 0x4c
  40c34a:	81a3      	strh	r3, [r4, #12]
  40c34c:	e7dc      	b.n	40c308 <__smakebuf_r+0x64>
  40c34e:	4628      	mov	r0, r5
  40c350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c354:	f001 f866 	bl	40d424 <_isatty_r>
  40c358:	2800      	cmp	r0, #0
  40c35a:	d0e4      	beq.n	40c326 <__smakebuf_r+0x82>
  40c35c:	89a3      	ldrh	r3, [r4, #12]
  40c35e:	f043 0301 	orr.w	r3, r3, #1
  40c362:	81a3      	strh	r3, [r4, #12]
  40c364:	e7df      	b.n	40c326 <__smakebuf_r+0x82>
  40c366:	059a      	lsls	r2, r3, #22
  40c368:	d4dd      	bmi.n	40c326 <__smakebuf_r+0x82>
  40c36a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40c36e:	f043 0302 	orr.w	r3, r3, #2
  40c372:	2101      	movs	r1, #1
  40c374:	81a3      	strh	r3, [r4, #12]
  40c376:	6022      	str	r2, [r4, #0]
  40c378:	6122      	str	r2, [r4, #16]
  40c37a:	6161      	str	r1, [r4, #20]
  40c37c:	e7d3      	b.n	40c326 <__smakebuf_r+0x82>
  40c37e:	bf00      	nop
  40c380:	0040baad 	.word	0x0040baad
  40c384:	0040cfd5 	.word	0x0040cfd5

0040c388 <memchr>:
  40c388:	0783      	lsls	r3, r0, #30
  40c38a:	b2c9      	uxtb	r1, r1
  40c38c:	b470      	push	{r4, r5, r6}
  40c38e:	d03f      	beq.n	40c410 <memchr+0x88>
  40c390:	1e54      	subs	r4, r2, #1
  40c392:	2a00      	cmp	r2, #0
  40c394:	d03e      	beq.n	40c414 <memchr+0x8c>
  40c396:	7803      	ldrb	r3, [r0, #0]
  40c398:	428b      	cmp	r3, r1
  40c39a:	bf18      	it	ne
  40c39c:	1c43      	addne	r3, r0, #1
  40c39e:	d105      	bne.n	40c3ac <memchr+0x24>
  40c3a0:	e01c      	b.n	40c3dc <memchr+0x54>
  40c3a2:	b1ec      	cbz	r4, 40c3e0 <memchr+0x58>
  40c3a4:	7802      	ldrb	r2, [r0, #0]
  40c3a6:	3c01      	subs	r4, #1
  40c3a8:	428a      	cmp	r2, r1
  40c3aa:	d017      	beq.n	40c3dc <memchr+0x54>
  40c3ac:	f013 0f03 	tst.w	r3, #3
  40c3b0:	4618      	mov	r0, r3
  40c3b2:	f103 0301 	add.w	r3, r3, #1
  40c3b6:	d1f4      	bne.n	40c3a2 <memchr+0x1a>
  40c3b8:	2c03      	cmp	r4, #3
  40c3ba:	d814      	bhi.n	40c3e6 <memchr+0x5e>
  40c3bc:	b184      	cbz	r4, 40c3e0 <memchr+0x58>
  40c3be:	7803      	ldrb	r3, [r0, #0]
  40c3c0:	428b      	cmp	r3, r1
  40c3c2:	d00b      	beq.n	40c3dc <memchr+0x54>
  40c3c4:	1905      	adds	r5, r0, r4
  40c3c6:	1c43      	adds	r3, r0, #1
  40c3c8:	e002      	b.n	40c3d0 <memchr+0x48>
  40c3ca:	7802      	ldrb	r2, [r0, #0]
  40c3cc:	428a      	cmp	r2, r1
  40c3ce:	d005      	beq.n	40c3dc <memchr+0x54>
  40c3d0:	42ab      	cmp	r3, r5
  40c3d2:	4618      	mov	r0, r3
  40c3d4:	f103 0301 	add.w	r3, r3, #1
  40c3d8:	d1f7      	bne.n	40c3ca <memchr+0x42>
  40c3da:	2000      	movs	r0, #0
  40c3dc:	bc70      	pop	{r4, r5, r6}
  40c3de:	4770      	bx	lr
  40c3e0:	4620      	mov	r0, r4
  40c3e2:	bc70      	pop	{r4, r5, r6}
  40c3e4:	4770      	bx	lr
  40c3e6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40c3ea:	4602      	mov	r2, r0
  40c3ec:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40c3f0:	4610      	mov	r0, r2
  40c3f2:	3204      	adds	r2, #4
  40c3f4:	6803      	ldr	r3, [r0, #0]
  40c3f6:	4073      	eors	r3, r6
  40c3f8:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40c3fc:	ea25 0303 	bic.w	r3, r5, r3
  40c400:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40c404:	d1da      	bne.n	40c3bc <memchr+0x34>
  40c406:	3c04      	subs	r4, #4
  40c408:	4610      	mov	r0, r2
  40c40a:	2c03      	cmp	r4, #3
  40c40c:	d8f0      	bhi.n	40c3f0 <memchr+0x68>
  40c40e:	e7d5      	b.n	40c3bc <memchr+0x34>
  40c410:	4614      	mov	r4, r2
  40c412:	e7d1      	b.n	40c3b8 <memchr+0x30>
  40c414:	4610      	mov	r0, r2
  40c416:	e7e1      	b.n	40c3dc <memchr+0x54>

0040c418 <memmove>:
  40c418:	4288      	cmp	r0, r1
  40c41a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c41c:	d90d      	bls.n	40c43a <memmove+0x22>
  40c41e:	188b      	adds	r3, r1, r2
  40c420:	4298      	cmp	r0, r3
  40c422:	d20a      	bcs.n	40c43a <memmove+0x22>
  40c424:	1881      	adds	r1, r0, r2
  40c426:	2a00      	cmp	r2, #0
  40c428:	d053      	beq.n	40c4d2 <memmove+0xba>
  40c42a:	1a9a      	subs	r2, r3, r2
  40c42c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c430:	4293      	cmp	r3, r2
  40c432:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40c436:	d1f9      	bne.n	40c42c <memmove+0x14>
  40c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c43a:	2a0f      	cmp	r2, #15
  40c43c:	d947      	bls.n	40c4ce <memmove+0xb6>
  40c43e:	ea40 0301 	orr.w	r3, r0, r1
  40c442:	079b      	lsls	r3, r3, #30
  40c444:	d146      	bne.n	40c4d4 <memmove+0xbc>
  40c446:	f100 0410 	add.w	r4, r0, #16
  40c44a:	f101 0310 	add.w	r3, r1, #16
  40c44e:	4615      	mov	r5, r2
  40c450:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c454:	3d10      	subs	r5, #16
  40c456:	3310      	adds	r3, #16
  40c458:	3410      	adds	r4, #16
  40c45a:	f844 6c20 	str.w	r6, [r4, #-32]
  40c45e:	2d0f      	cmp	r5, #15
  40c460:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  40c464:	f844 6c1c 	str.w	r6, [r4, #-28]
  40c468:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40c46c:	f844 6c18 	str.w	r6, [r4, #-24]
  40c470:	f853 6c14 	ldr.w	r6, [r3, #-20]
  40c474:	f844 6c14 	str.w	r6, [r4, #-20]
  40c478:	d8ea      	bhi.n	40c450 <memmove+0x38>
  40c47a:	f1a2 0310 	sub.w	r3, r2, #16
  40c47e:	f002 0e0f 	and.w	lr, r2, #15
  40c482:	f023 030f 	bic.w	r3, r3, #15
  40c486:	f1be 0f03 	cmp.w	lr, #3
  40c48a:	f103 0310 	add.w	r3, r3, #16
  40c48e:	4419      	add	r1, r3
  40c490:	4403      	add	r3, r0
  40c492:	d921      	bls.n	40c4d8 <memmove+0xc0>
  40c494:	1f1e      	subs	r6, r3, #4
  40c496:	460d      	mov	r5, r1
  40c498:	4674      	mov	r4, lr
  40c49a:	3c04      	subs	r4, #4
  40c49c:	f855 7b04 	ldr.w	r7, [r5], #4
  40c4a0:	2c03      	cmp	r4, #3
  40c4a2:	f846 7f04 	str.w	r7, [r6, #4]!
  40c4a6:	d8f8      	bhi.n	40c49a <memmove+0x82>
  40c4a8:	f1ae 0404 	sub.w	r4, lr, #4
  40c4ac:	f002 0203 	and.w	r2, r2, #3
  40c4b0:	f024 0403 	bic.w	r4, r4, #3
  40c4b4:	3404      	adds	r4, #4
  40c4b6:	4423      	add	r3, r4
  40c4b8:	4421      	add	r1, r4
  40c4ba:	b152      	cbz	r2, 40c4d2 <memmove+0xba>
  40c4bc:	3b01      	subs	r3, #1
  40c4be:	440a      	add	r2, r1
  40c4c0:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c4c4:	4291      	cmp	r1, r2
  40c4c6:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c4ca:	d1f9      	bne.n	40c4c0 <memmove+0xa8>
  40c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c4ce:	4603      	mov	r3, r0
  40c4d0:	e7f3      	b.n	40c4ba <memmove+0xa2>
  40c4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c4d4:	4603      	mov	r3, r0
  40c4d6:	e7f1      	b.n	40c4bc <memmove+0xa4>
  40c4d8:	4672      	mov	r2, lr
  40c4da:	e7ee      	b.n	40c4ba <memmove+0xa2>

0040c4dc <_Balloc>:
  40c4dc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40c4de:	b538      	push	{r3, r4, r5, lr}
  40c4e0:	4605      	mov	r5, r0
  40c4e2:	460c      	mov	r4, r1
  40c4e4:	b152      	cbz	r2, 40c4fc <_Balloc+0x20>
  40c4e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40c4ea:	b18b      	cbz	r3, 40c510 <_Balloc+0x34>
  40c4ec:	6819      	ldr	r1, [r3, #0]
  40c4ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40c4f2:	2200      	movs	r2, #0
  40c4f4:	4618      	mov	r0, r3
  40c4f6:	611a      	str	r2, [r3, #16]
  40c4f8:	60da      	str	r2, [r3, #12]
  40c4fa:	bd38      	pop	{r3, r4, r5, pc}
  40c4fc:	2221      	movs	r2, #33	; 0x21
  40c4fe:	2104      	movs	r1, #4
  40c500:	f000 fef8 	bl	40d2f4 <_calloc_r>
  40c504:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c506:	4602      	mov	r2, r0
  40c508:	2800      	cmp	r0, #0
  40c50a:	d1ec      	bne.n	40c4e6 <_Balloc+0xa>
  40c50c:	2000      	movs	r0, #0
  40c50e:	bd38      	pop	{r3, r4, r5, pc}
  40c510:	2101      	movs	r1, #1
  40c512:	4628      	mov	r0, r5
  40c514:	fa01 f504 	lsl.w	r5, r1, r4
  40c518:	1d6a      	adds	r2, r5, #5
  40c51a:	0092      	lsls	r2, r2, #2
  40c51c:	f000 feea 	bl	40d2f4 <_calloc_r>
  40c520:	4603      	mov	r3, r0
  40c522:	2800      	cmp	r0, #0
  40c524:	d0f2      	beq.n	40c50c <_Balloc+0x30>
  40c526:	6044      	str	r4, [r0, #4]
  40c528:	6085      	str	r5, [r0, #8]
  40c52a:	e7e2      	b.n	40c4f2 <_Balloc+0x16>

0040c52c <_Bfree>:
  40c52c:	b131      	cbz	r1, 40c53c <_Bfree+0x10>
  40c52e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c530:	684a      	ldr	r2, [r1, #4]
  40c532:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c536:	6008      	str	r0, [r1, #0]
  40c538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c53c:	4770      	bx	lr
  40c53e:	bf00      	nop

0040c540 <__multadd>:
  40c540:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c542:	460c      	mov	r4, r1
  40c544:	b083      	sub	sp, #12
  40c546:	4605      	mov	r5, r0
  40c548:	690e      	ldr	r6, [r1, #16]
  40c54a:	f101 0e14 	add.w	lr, r1, #20
  40c54e:	2700      	movs	r7, #0
  40c550:	f8de 1000 	ldr.w	r1, [lr]
  40c554:	3701      	adds	r7, #1
  40c556:	b288      	uxth	r0, r1
  40c558:	42be      	cmp	r6, r7
  40c55a:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40c55e:	fb02 3300 	mla	r3, r2, r0, r3
  40c562:	fb02 f101 	mul.w	r1, r2, r1
  40c566:	b298      	uxth	r0, r3
  40c568:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  40c56c:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  40c570:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40c574:	f84e 1b04 	str.w	r1, [lr], #4
  40c578:	dcea      	bgt.n	40c550 <__multadd+0x10>
  40c57a:	b13b      	cbz	r3, 40c58c <__multadd+0x4c>
  40c57c:	68a2      	ldr	r2, [r4, #8]
  40c57e:	4296      	cmp	r6, r2
  40c580:	da07      	bge.n	40c592 <__multadd+0x52>
  40c582:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40c586:	3601      	adds	r6, #1
  40c588:	6153      	str	r3, [r2, #20]
  40c58a:	6126      	str	r6, [r4, #16]
  40c58c:	4620      	mov	r0, r4
  40c58e:	b003      	add	sp, #12
  40c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c592:	6861      	ldr	r1, [r4, #4]
  40c594:	4628      	mov	r0, r5
  40c596:	9301      	str	r3, [sp, #4]
  40c598:	3101      	adds	r1, #1
  40c59a:	f7ff ff9f 	bl	40c4dc <_Balloc>
  40c59e:	6922      	ldr	r2, [r4, #16]
  40c5a0:	f104 010c 	add.w	r1, r4, #12
  40c5a4:	4607      	mov	r7, r0
  40c5a6:	3202      	adds	r2, #2
  40c5a8:	300c      	adds	r0, #12
  40c5aa:	0092      	lsls	r2, r2, #2
  40c5ac:	f002 f8e6 	bl	40e77c <memcpy>
  40c5b0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40c5b2:	6861      	ldr	r1, [r4, #4]
  40c5b4:	9b01      	ldr	r3, [sp, #4]
  40c5b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c5ba:	6020      	str	r0, [r4, #0]
  40c5bc:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40c5c0:	463c      	mov	r4, r7
  40c5c2:	e7de      	b.n	40c582 <__multadd+0x42>

0040c5c4 <__hi0bits>:
  40c5c4:	4b0f      	ldr	r3, [pc, #60]	; (40c604 <__hi0bits+0x40>)
  40c5c6:	4003      	ands	r3, r0
  40c5c8:	b9b3      	cbnz	r3, 40c5f8 <__hi0bits+0x34>
  40c5ca:	0400      	lsls	r0, r0, #16
  40c5cc:	2310      	movs	r3, #16
  40c5ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40c5d2:	d101      	bne.n	40c5d8 <__hi0bits+0x14>
  40c5d4:	3308      	adds	r3, #8
  40c5d6:	0200      	lsls	r0, r0, #8
  40c5d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40c5dc:	d101      	bne.n	40c5e2 <__hi0bits+0x1e>
  40c5de:	3304      	adds	r3, #4
  40c5e0:	0100      	lsls	r0, r0, #4
  40c5e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40c5e6:	d101      	bne.n	40c5ec <__hi0bits+0x28>
  40c5e8:	3302      	adds	r3, #2
  40c5ea:	0080      	lsls	r0, r0, #2
  40c5ec:	2800      	cmp	r0, #0
  40c5ee:	db07      	blt.n	40c600 <__hi0bits+0x3c>
  40c5f0:	0042      	lsls	r2, r0, #1
  40c5f2:	d403      	bmi.n	40c5fc <__hi0bits+0x38>
  40c5f4:	2020      	movs	r0, #32
  40c5f6:	4770      	bx	lr
  40c5f8:	2300      	movs	r3, #0
  40c5fa:	e7e8      	b.n	40c5ce <__hi0bits+0xa>
  40c5fc:	1c58      	adds	r0, r3, #1
  40c5fe:	4770      	bx	lr
  40c600:	4618      	mov	r0, r3
  40c602:	4770      	bx	lr
  40c604:	ffff0000 	.word	0xffff0000

0040c608 <__lo0bits>:
  40c608:	6803      	ldr	r3, [r0, #0]
  40c60a:	f013 0207 	ands.w	r2, r3, #7
  40c60e:	d008      	beq.n	40c622 <__lo0bits+0x1a>
  40c610:	07d9      	lsls	r1, r3, #31
  40c612:	d422      	bmi.n	40c65a <__lo0bits+0x52>
  40c614:	079a      	lsls	r2, r3, #30
  40c616:	d423      	bmi.n	40c660 <__lo0bits+0x58>
  40c618:	089b      	lsrs	r3, r3, #2
  40c61a:	2202      	movs	r2, #2
  40c61c:	6003      	str	r3, [r0, #0]
  40c61e:	4610      	mov	r0, r2
  40c620:	4770      	bx	lr
  40c622:	b299      	uxth	r1, r3
  40c624:	b909      	cbnz	r1, 40c62a <__lo0bits+0x22>
  40c626:	0c1b      	lsrs	r3, r3, #16
  40c628:	2210      	movs	r2, #16
  40c62a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c62e:	d101      	bne.n	40c634 <__lo0bits+0x2c>
  40c630:	3208      	adds	r2, #8
  40c632:	0a1b      	lsrs	r3, r3, #8
  40c634:	0719      	lsls	r1, r3, #28
  40c636:	d101      	bne.n	40c63c <__lo0bits+0x34>
  40c638:	3204      	adds	r2, #4
  40c63a:	091b      	lsrs	r3, r3, #4
  40c63c:	0799      	lsls	r1, r3, #30
  40c63e:	d101      	bne.n	40c644 <__lo0bits+0x3c>
  40c640:	3202      	adds	r2, #2
  40c642:	089b      	lsrs	r3, r3, #2
  40c644:	07d9      	lsls	r1, r3, #31
  40c646:	d405      	bmi.n	40c654 <__lo0bits+0x4c>
  40c648:	085b      	lsrs	r3, r3, #1
  40c64a:	d102      	bne.n	40c652 <__lo0bits+0x4a>
  40c64c:	2220      	movs	r2, #32
  40c64e:	4610      	mov	r0, r2
  40c650:	4770      	bx	lr
  40c652:	3201      	adds	r2, #1
  40c654:	6003      	str	r3, [r0, #0]
  40c656:	4610      	mov	r0, r2
  40c658:	4770      	bx	lr
  40c65a:	2200      	movs	r2, #0
  40c65c:	4610      	mov	r0, r2
  40c65e:	4770      	bx	lr
  40c660:	085b      	lsrs	r3, r3, #1
  40c662:	2201      	movs	r2, #1
  40c664:	6003      	str	r3, [r0, #0]
  40c666:	4610      	mov	r0, r2
  40c668:	4770      	bx	lr
  40c66a:	bf00      	nop

0040c66c <__i2b>:
  40c66c:	b510      	push	{r4, lr}
  40c66e:	460c      	mov	r4, r1
  40c670:	2101      	movs	r1, #1
  40c672:	f7ff ff33 	bl	40c4dc <_Balloc>
  40c676:	2201      	movs	r2, #1
  40c678:	6144      	str	r4, [r0, #20]
  40c67a:	6102      	str	r2, [r0, #16]
  40c67c:	bd10      	pop	{r4, pc}
  40c67e:	bf00      	nop

0040c680 <__multiply>:
  40c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c684:	690e      	ldr	r6, [r1, #16]
  40c686:	b085      	sub	sp, #20
  40c688:	6915      	ldr	r5, [r2, #16]
  40c68a:	460c      	mov	r4, r1
  40c68c:	4691      	mov	r9, r2
  40c68e:	42ae      	cmp	r6, r5
  40c690:	f2c0 8094 	blt.w	40c7bc <__multiply+0x13c>
  40c694:	462b      	mov	r3, r5
  40c696:	4635      	mov	r5, r6
  40c698:	461e      	mov	r6, r3
  40c69a:	eb05 0806 	add.w	r8, r5, r6
  40c69e:	68a3      	ldr	r3, [r4, #8]
  40c6a0:	6861      	ldr	r1, [r4, #4]
  40c6a2:	4598      	cmp	r8, r3
  40c6a4:	dd00      	ble.n	40c6a8 <__multiply+0x28>
  40c6a6:	3101      	adds	r1, #1
  40c6a8:	f7ff ff18 	bl	40c4dc <_Balloc>
  40c6ac:	f100 0a14 	add.w	sl, r0, #20
  40c6b0:	9001      	str	r0, [sp, #4]
  40c6b2:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40c6b6:	45da      	cmp	sl, fp
  40c6b8:	d205      	bcs.n	40c6c6 <__multiply+0x46>
  40c6ba:	4653      	mov	r3, sl
  40c6bc:	2100      	movs	r1, #0
  40c6be:	f843 1b04 	str.w	r1, [r3], #4
  40c6c2:	459b      	cmp	fp, r3
  40c6c4:	d8fb      	bhi.n	40c6be <__multiply+0x3e>
  40c6c6:	f109 0914 	add.w	r9, r9, #20
  40c6ca:	f104 0314 	add.w	r3, r4, #20
  40c6ce:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40c6d2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40c6d6:	4591      	cmp	r9, r2
  40c6d8:	d25b      	bcs.n	40c792 <__multiply+0x112>
  40c6da:	f8cd b008 	str.w	fp, [sp, #8]
  40c6de:	4693      	mov	fp, r2
  40c6e0:	f8cd 800c 	str.w	r8, [sp, #12]
  40c6e4:	4698      	mov	r8, r3
  40c6e6:	f859 6b04 	ldr.w	r6, [r9], #4
  40c6ea:	fa1f fe86 	uxth.w	lr, r6
  40c6ee:	f1be 0f00 	cmp.w	lr, #0
  40c6f2:	d021      	beq.n	40c738 <__multiply+0xb8>
  40c6f4:	4647      	mov	r7, r8
  40c6f6:	4656      	mov	r6, sl
  40c6f8:	2100      	movs	r1, #0
  40c6fa:	e000      	b.n	40c6fe <__multiply+0x7e>
  40c6fc:	4626      	mov	r6, r4
  40c6fe:	f857 2b04 	ldr.w	r2, [r7], #4
  40c702:	4634      	mov	r4, r6
  40c704:	6835      	ldr	r5, [r6, #0]
  40c706:	b290      	uxth	r0, r2
  40c708:	45bc      	cmp	ip, r7
  40c70a:	b2ab      	uxth	r3, r5
  40c70c:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40c710:	fb0e 3000 	mla	r0, lr, r0, r3
  40c714:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40c718:	4401      	add	r1, r0
  40c71a:	fb0e 3302 	mla	r3, lr, r2, r3
  40c71e:	b28a      	uxth	r2, r1
  40c720:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40c724:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40c728:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40c72c:	f844 3b04 	str.w	r3, [r4], #4
  40c730:	d8e4      	bhi.n	40c6fc <__multiply+0x7c>
  40c732:	6071      	str	r1, [r6, #4]
  40c734:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40c738:	0c36      	lsrs	r6, r6, #16
  40c73a:	d022      	beq.n	40c782 <__multiply+0x102>
  40c73c:	f8da 3000 	ldr.w	r3, [sl]
  40c740:	2700      	movs	r7, #0
  40c742:	4655      	mov	r5, sl
  40c744:	4640      	mov	r0, r8
  40c746:	461a      	mov	r2, r3
  40c748:	46be      	mov	lr, r7
  40c74a:	e000      	b.n	40c74e <__multiply+0xce>
  40c74c:	4625      	mov	r5, r4
  40c74e:	8807      	ldrh	r7, [r0, #0]
  40c750:	0c12      	lsrs	r2, r2, #16
  40c752:	b299      	uxth	r1, r3
  40c754:	462c      	mov	r4, r5
  40c756:	fb06 2207 	mla	r2, r6, r7, r2
  40c75a:	eb02 070e 	add.w	r7, r2, lr
  40c75e:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40c762:	f844 3b04 	str.w	r3, [r4], #4
  40c766:	f850 1b04 	ldr.w	r1, [r0], #4
  40c76a:	686a      	ldr	r2, [r5, #4]
  40c76c:	0c09      	lsrs	r1, r1, #16
  40c76e:	4584      	cmp	ip, r0
  40c770:	b293      	uxth	r3, r2
  40c772:	fb06 3101 	mla	r1, r6, r1, r3
  40c776:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  40c77a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40c77e:	d8e5      	bhi.n	40c74c <__multiply+0xcc>
  40c780:	606b      	str	r3, [r5, #4]
  40c782:	45cb      	cmp	fp, r9
  40c784:	f10a 0a04 	add.w	sl, sl, #4
  40c788:	d8ad      	bhi.n	40c6e6 <__multiply+0x66>
  40c78a:	f8dd b008 	ldr.w	fp, [sp, #8]
  40c78e:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40c792:	f1b8 0f00 	cmp.w	r8, #0
  40c796:	dd0b      	ble.n	40c7b0 <__multiply+0x130>
  40c798:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  40c79c:	f1ab 0b04 	sub.w	fp, fp, #4
  40c7a0:	b11b      	cbz	r3, 40c7aa <__multiply+0x12a>
  40c7a2:	e005      	b.n	40c7b0 <__multiply+0x130>
  40c7a4:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  40c7a8:	b913      	cbnz	r3, 40c7b0 <__multiply+0x130>
  40c7aa:	f1b8 0801 	subs.w	r8, r8, #1
  40c7ae:	d1f9      	bne.n	40c7a4 <__multiply+0x124>
  40c7b0:	9801      	ldr	r0, [sp, #4]
  40c7b2:	f8c0 8010 	str.w	r8, [r0, #16]
  40c7b6:	b005      	add	sp, #20
  40c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c7bc:	4614      	mov	r4, r2
  40c7be:	4689      	mov	r9, r1
  40c7c0:	e76b      	b.n	40c69a <__multiply+0x1a>
  40c7c2:	bf00      	nop

0040c7c4 <__pow5mult>:
  40c7c4:	f012 0303 	ands.w	r3, r2, #3
  40c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c7cc:	4614      	mov	r4, r2
  40c7ce:	4607      	mov	r7, r0
  40c7d0:	460e      	mov	r6, r1
  40c7d2:	d12d      	bne.n	40c830 <__pow5mult+0x6c>
  40c7d4:	10a4      	asrs	r4, r4, #2
  40c7d6:	d01c      	beq.n	40c812 <__pow5mult+0x4e>
  40c7d8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40c7da:	b395      	cbz	r5, 40c842 <__pow5mult+0x7e>
  40c7dc:	07e3      	lsls	r3, r4, #31
  40c7de:	f04f 0800 	mov.w	r8, #0
  40c7e2:	d406      	bmi.n	40c7f2 <__pow5mult+0x2e>
  40c7e4:	1064      	asrs	r4, r4, #1
  40c7e6:	d014      	beq.n	40c812 <__pow5mult+0x4e>
  40c7e8:	6828      	ldr	r0, [r5, #0]
  40c7ea:	b1a8      	cbz	r0, 40c818 <__pow5mult+0x54>
  40c7ec:	4605      	mov	r5, r0
  40c7ee:	07e3      	lsls	r3, r4, #31
  40c7f0:	d5f8      	bpl.n	40c7e4 <__pow5mult+0x20>
  40c7f2:	4638      	mov	r0, r7
  40c7f4:	4631      	mov	r1, r6
  40c7f6:	462a      	mov	r2, r5
  40c7f8:	f7ff ff42 	bl	40c680 <__multiply>
  40c7fc:	b1b6      	cbz	r6, 40c82c <__pow5mult+0x68>
  40c7fe:	6872      	ldr	r2, [r6, #4]
  40c800:	1064      	asrs	r4, r4, #1
  40c802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c808:	6031      	str	r1, [r6, #0]
  40c80a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c80e:	4606      	mov	r6, r0
  40c810:	d1ea      	bne.n	40c7e8 <__pow5mult+0x24>
  40c812:	4630      	mov	r0, r6
  40c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c818:	4629      	mov	r1, r5
  40c81a:	462a      	mov	r2, r5
  40c81c:	4638      	mov	r0, r7
  40c81e:	f7ff ff2f 	bl	40c680 <__multiply>
  40c822:	6028      	str	r0, [r5, #0]
  40c824:	f8c0 8000 	str.w	r8, [r0]
  40c828:	4605      	mov	r5, r0
  40c82a:	e7e0      	b.n	40c7ee <__pow5mult+0x2a>
  40c82c:	4606      	mov	r6, r0
  40c82e:	e7d9      	b.n	40c7e4 <__pow5mult+0x20>
  40c830:	1e5a      	subs	r2, r3, #1
  40c832:	4d0b      	ldr	r5, [pc, #44]	; (40c860 <__pow5mult+0x9c>)
  40c834:	2300      	movs	r3, #0
  40c836:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c83a:	f7ff fe81 	bl	40c540 <__multadd>
  40c83e:	4606      	mov	r6, r0
  40c840:	e7c8      	b.n	40c7d4 <__pow5mult+0x10>
  40c842:	2101      	movs	r1, #1
  40c844:	4638      	mov	r0, r7
  40c846:	f7ff fe49 	bl	40c4dc <_Balloc>
  40c84a:	f240 2171 	movw	r1, #625	; 0x271
  40c84e:	2201      	movs	r2, #1
  40c850:	2300      	movs	r3, #0
  40c852:	6141      	str	r1, [r0, #20]
  40c854:	4605      	mov	r5, r0
  40c856:	6102      	str	r2, [r0, #16]
  40c858:	64b8      	str	r0, [r7, #72]	; 0x48
  40c85a:	6003      	str	r3, [r0, #0]
  40c85c:	e7be      	b.n	40c7dc <__pow5mult+0x18>
  40c85e:	bf00      	nop
  40c860:	0040e708 	.word	0x0040e708

0040c864 <__lshift>:
  40c864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c868:	690e      	ldr	r6, [r1, #16]
  40c86a:	ea4f 1962 	mov.w	r9, r2, asr #5
  40c86e:	688b      	ldr	r3, [r1, #8]
  40c870:	460d      	mov	r5, r1
  40c872:	444e      	add	r6, r9
  40c874:	4690      	mov	r8, r2
  40c876:	4607      	mov	r7, r0
  40c878:	6849      	ldr	r1, [r1, #4]
  40c87a:	1c74      	adds	r4, r6, #1
  40c87c:	429c      	cmp	r4, r3
  40c87e:	dd03      	ble.n	40c888 <__lshift+0x24>
  40c880:	005b      	lsls	r3, r3, #1
  40c882:	3101      	adds	r1, #1
  40c884:	429c      	cmp	r4, r3
  40c886:	dcfb      	bgt.n	40c880 <__lshift+0x1c>
  40c888:	4638      	mov	r0, r7
  40c88a:	f7ff fe27 	bl	40c4dc <_Balloc>
  40c88e:	f1b9 0f00 	cmp.w	r9, #0
  40c892:	4684      	mov	ip, r0
  40c894:	f100 0114 	add.w	r1, r0, #20
  40c898:	dd09      	ble.n	40c8ae <__lshift+0x4a>
  40c89a:	2300      	movs	r3, #0
  40c89c:	460a      	mov	r2, r1
  40c89e:	4618      	mov	r0, r3
  40c8a0:	3301      	adds	r3, #1
  40c8a2:	f842 0b04 	str.w	r0, [r2], #4
  40c8a6:	454b      	cmp	r3, r9
  40c8a8:	d1fa      	bne.n	40c8a0 <__lshift+0x3c>
  40c8aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40c8ae:	692a      	ldr	r2, [r5, #16]
  40c8b0:	f105 0314 	add.w	r3, r5, #20
  40c8b4:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40c8b8:	f018 021f 	ands.w	r2, r8, #31
  40c8bc:	d023      	beq.n	40c906 <__lshift+0xa2>
  40c8be:	f1c2 0920 	rsb	r9, r2, #32
  40c8c2:	f04f 0a00 	mov.w	sl, #0
  40c8c6:	6818      	ldr	r0, [r3, #0]
  40c8c8:	4688      	mov	r8, r1
  40c8ca:	4090      	lsls	r0, r2
  40c8cc:	ea4a 0000 	orr.w	r0, sl, r0
  40c8d0:	f841 0b04 	str.w	r0, [r1], #4
  40c8d4:	f853 0b04 	ldr.w	r0, [r3], #4
  40c8d8:	459e      	cmp	lr, r3
  40c8da:	fa20 fa09 	lsr.w	sl, r0, r9
  40c8de:	d8f2      	bhi.n	40c8c6 <__lshift+0x62>
  40c8e0:	f8c8 a004 	str.w	sl, [r8, #4]
  40c8e4:	f1ba 0f00 	cmp.w	sl, #0
  40c8e8:	d000      	beq.n	40c8ec <__lshift+0x88>
  40c8ea:	1cb4      	adds	r4, r6, #2
  40c8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c8ee:	3c01      	subs	r4, #1
  40c8f0:	686a      	ldr	r2, [r5, #4]
  40c8f2:	4660      	mov	r0, ip
  40c8f4:	f8cc 4010 	str.w	r4, [ip, #16]
  40c8f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c8fc:	6029      	str	r1, [r5, #0]
  40c8fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c906:	3904      	subs	r1, #4
  40c908:	f853 2b04 	ldr.w	r2, [r3], #4
  40c90c:	459e      	cmp	lr, r3
  40c90e:	f841 2f04 	str.w	r2, [r1, #4]!
  40c912:	d8f9      	bhi.n	40c908 <__lshift+0xa4>
  40c914:	e7ea      	b.n	40c8ec <__lshift+0x88>
  40c916:	bf00      	nop

0040c918 <__mcmp>:
  40c918:	6902      	ldr	r2, [r0, #16]
  40c91a:	690b      	ldr	r3, [r1, #16]
  40c91c:	1ad2      	subs	r2, r2, r3
  40c91e:	d113      	bne.n	40c948 <__mcmp+0x30>
  40c920:	009a      	lsls	r2, r3, #2
  40c922:	3014      	adds	r0, #20
  40c924:	3114      	adds	r1, #20
  40c926:	1883      	adds	r3, r0, r2
  40c928:	4411      	add	r1, r2
  40c92a:	b410      	push	{r4}
  40c92c:	e001      	b.n	40c932 <__mcmp+0x1a>
  40c92e:	4298      	cmp	r0, r3
  40c930:	d20c      	bcs.n	40c94c <__mcmp+0x34>
  40c932:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c936:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c93a:	4294      	cmp	r4, r2
  40c93c:	d0f7      	beq.n	40c92e <__mcmp+0x16>
  40c93e:	d309      	bcc.n	40c954 <__mcmp+0x3c>
  40c940:	2001      	movs	r0, #1
  40c942:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c946:	4770      	bx	lr
  40c948:	4610      	mov	r0, r2
  40c94a:	4770      	bx	lr
  40c94c:	2000      	movs	r0, #0
  40c94e:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c952:	4770      	bx	lr
  40c954:	f04f 30ff 	mov.w	r0, #4294967295
  40c958:	f85d 4b04 	ldr.w	r4, [sp], #4
  40c95c:	4770      	bx	lr
  40c95e:	bf00      	nop

0040c960 <__mdiff>:
  40c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c964:	460c      	mov	r4, r1
  40c966:	4605      	mov	r5, r0
  40c968:	4611      	mov	r1, r2
  40c96a:	4617      	mov	r7, r2
  40c96c:	4620      	mov	r0, r4
  40c96e:	f7ff ffd3 	bl	40c918 <__mcmp>
  40c972:	1e06      	subs	r6, r0, #0
  40c974:	d05c      	beq.n	40ca30 <__mdiff+0xd0>
  40c976:	db55      	blt.n	40ca24 <__mdiff+0xc4>
  40c978:	f04f 0800 	mov.w	r8, #0
  40c97c:	6861      	ldr	r1, [r4, #4]
  40c97e:	4628      	mov	r0, r5
  40c980:	f7ff fdac 	bl	40c4dc <_Balloc>
  40c984:	f107 0514 	add.w	r5, r7, #20
  40c988:	693b      	ldr	r3, [r7, #16]
  40c98a:	f104 0114 	add.w	r1, r4, #20
  40c98e:	6926      	ldr	r6, [r4, #16]
  40c990:	4684      	mov	ip, r0
  40c992:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  40c996:	f100 0414 	add.w	r4, r0, #20
  40c99a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40c99e:	2300      	movs	r3, #0
  40c9a0:	f8c0 800c 	str.w	r8, [r0, #12]
  40c9a4:	f851 9b04 	ldr.w	r9, [r1], #4
  40c9a8:	f855 2b04 	ldr.w	r2, [r5], #4
  40c9ac:	fa13 f889 	uxtah	r8, r3, r9
  40c9b0:	4608      	mov	r0, r1
  40c9b2:	b293      	uxth	r3, r2
  40c9b4:	45ae      	cmp	lr, r5
  40c9b6:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40c9ba:	ebc3 0308 	rsb	r3, r3, r8
  40c9be:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40c9c2:	fa1f f883 	uxth.w	r8, r3
  40c9c6:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40c9ca:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40c9ce:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c9d2:	f844 2b04 	str.w	r2, [r4], #4
  40c9d6:	d8e5      	bhi.n	40c9a4 <__mdiff+0x44>
  40c9d8:	428f      	cmp	r7, r1
  40c9da:	4625      	mov	r5, r4
  40c9dc:	d916      	bls.n	40ca0c <__mdiff+0xac>
  40c9de:	f850 2b04 	ldr.w	r2, [r0], #4
  40c9e2:	fa13 f382 	uxtah	r3, r3, r2
  40c9e6:	0c12      	lsrs	r2, r2, #16
  40c9e8:	4287      	cmp	r7, r0
  40c9ea:	fa1f fe83 	uxth.w	lr, r3
  40c9ee:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40c9f2:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40c9f6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c9fa:	f844 2b04 	str.w	r2, [r4], #4
  40c9fe:	d8ee      	bhi.n	40c9de <__mdiff+0x7e>
  40ca00:	43c9      	mvns	r1, r1
  40ca02:	4439      	add	r1, r7
  40ca04:	f021 0403 	bic.w	r4, r1, #3
  40ca08:	3404      	adds	r4, #4
  40ca0a:	442c      	add	r4, r5
  40ca0c:	3c04      	subs	r4, #4
  40ca0e:	b922      	cbnz	r2, 40ca1a <__mdiff+0xba>
  40ca10:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ca14:	3e01      	subs	r6, #1
  40ca16:	2b00      	cmp	r3, #0
  40ca18:	d0fa      	beq.n	40ca10 <__mdiff+0xb0>
  40ca1a:	4660      	mov	r0, ip
  40ca1c:	f8cc 6010 	str.w	r6, [ip, #16]
  40ca20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ca24:	4623      	mov	r3, r4
  40ca26:	f04f 0801 	mov.w	r8, #1
  40ca2a:	463c      	mov	r4, r7
  40ca2c:	461f      	mov	r7, r3
  40ca2e:	e7a5      	b.n	40c97c <__mdiff+0x1c>
  40ca30:	4628      	mov	r0, r5
  40ca32:	4631      	mov	r1, r6
  40ca34:	f7ff fd52 	bl	40c4dc <_Balloc>
  40ca38:	2201      	movs	r2, #1
  40ca3a:	4603      	mov	r3, r0
  40ca3c:	6146      	str	r6, [r0, #20]
  40ca3e:	611a      	str	r2, [r3, #16]
  40ca40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040ca44 <__d2b>:
  40ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ca48:	461c      	mov	r4, r3
  40ca4a:	b082      	sub	sp, #8
  40ca4c:	2101      	movs	r1, #1
  40ca4e:	4616      	mov	r6, r2
  40ca50:	f3c4 550a 	ubfx	r5, r4, #20, #11
  40ca54:	f7ff fd42 	bl	40c4dc <_Balloc>
  40ca58:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ca5c:	4607      	mov	r7, r0
  40ca5e:	b10d      	cbz	r5, 40ca64 <__d2b+0x20>
  40ca60:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ca64:	9401      	str	r4, [sp, #4]
  40ca66:	b30e      	cbz	r6, 40caac <__d2b+0x68>
  40ca68:	a802      	add	r0, sp, #8
  40ca6a:	f840 6d08 	str.w	r6, [r0, #-8]!
  40ca6e:	f7ff fdcb 	bl	40c608 <__lo0bits>
  40ca72:	2800      	cmp	r0, #0
  40ca74:	d132      	bne.n	40cadc <__d2b+0x98>
  40ca76:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ca7a:	617a      	str	r2, [r7, #20]
  40ca7c:	2b00      	cmp	r3, #0
  40ca7e:	61bb      	str	r3, [r7, #24]
  40ca80:	bf14      	ite	ne
  40ca82:	2402      	movne	r4, #2
  40ca84:	2401      	moveq	r4, #1
  40ca86:	613c      	str	r4, [r7, #16]
  40ca88:	b9dd      	cbnz	r5, 40cac2 <__d2b+0x7e>
  40ca8a:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40ca8e:	9a08      	ldr	r2, [sp, #32]
  40ca90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40ca94:	6010      	str	r0, [r2, #0]
  40ca96:	6918      	ldr	r0, [r3, #16]
  40ca98:	f7ff fd94 	bl	40c5c4 <__hi0bits>
  40ca9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ca9e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40caa2:	6018      	str	r0, [r3, #0]
  40caa4:	4638      	mov	r0, r7
  40caa6:	b002      	add	sp, #8
  40caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40caac:	a801      	add	r0, sp, #4
  40caae:	f7ff fdab 	bl	40c608 <__lo0bits>
  40cab2:	2301      	movs	r3, #1
  40cab4:	9a01      	ldr	r2, [sp, #4]
  40cab6:	3020      	adds	r0, #32
  40cab8:	461c      	mov	r4, r3
  40caba:	613b      	str	r3, [r7, #16]
  40cabc:	617a      	str	r2, [r7, #20]
  40cabe:	2d00      	cmp	r5, #0
  40cac0:	d0e3      	beq.n	40ca8a <__d2b+0x46>
  40cac2:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40cac6:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40caca:	9a08      	ldr	r2, [sp, #32]
  40cacc:	4440      	add	r0, r8
  40cace:	6010      	str	r0, [r2, #0]
  40cad0:	4638      	mov	r0, r7
  40cad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40cad4:	6013      	str	r3, [r2, #0]
  40cad6:	b002      	add	sp, #8
  40cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cadc:	9b01      	ldr	r3, [sp, #4]
  40cade:	f1c0 0120 	rsb	r1, r0, #32
  40cae2:	9a00      	ldr	r2, [sp, #0]
  40cae4:	fa03 f101 	lsl.w	r1, r3, r1
  40cae8:	40c3      	lsrs	r3, r0
  40caea:	430a      	orrs	r2, r1
  40caec:	9301      	str	r3, [sp, #4]
  40caee:	617a      	str	r2, [r7, #20]
  40caf0:	e7c4      	b.n	40ca7c <__d2b+0x38>
  40caf2:	bf00      	nop

0040caf4 <_realloc_r>:
  40caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40caf8:	4617      	mov	r7, r2
  40cafa:	b083      	sub	sp, #12
  40cafc:	460e      	mov	r6, r1
  40cafe:	2900      	cmp	r1, #0
  40cb00:	f000 80e2 	beq.w	40ccc8 <_realloc_r+0x1d4>
  40cb04:	f107 040b 	add.w	r4, r7, #11
  40cb08:	4681      	mov	r9, r0
  40cb0a:	f7fb fadb 	bl	4080c4 <__malloc_lock>
  40cb0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cb12:	2c16      	cmp	r4, #22
  40cb14:	f1a6 0808 	sub.w	r8, r6, #8
  40cb18:	f023 0503 	bic.w	r5, r3, #3
  40cb1c:	d850      	bhi.n	40cbc0 <_realloc_r+0xcc>
  40cb1e:	2210      	movs	r2, #16
  40cb20:	2100      	movs	r1, #0
  40cb22:	4614      	mov	r4, r2
  40cb24:	42bc      	cmp	r4, r7
  40cb26:	f0c0 80dc 	bcc.w	40cce2 <_realloc_r+0x1ee>
  40cb2a:	2900      	cmp	r1, #0
  40cb2c:	f040 80d9 	bne.w	40cce2 <_realloc_r+0x1ee>
  40cb30:	4295      	cmp	r5, r2
  40cb32:	da4a      	bge.n	40cbca <_realloc_r+0xd6>
  40cb34:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40cee0 <_realloc_r+0x3ec>
  40cb38:	eb08 0105 	add.w	r1, r8, r5
  40cb3c:	f8db 0008 	ldr.w	r0, [fp, #8]
  40cb40:	4288      	cmp	r0, r1
  40cb42:	f000 80d3 	beq.w	40ccec <_realloc_r+0x1f8>
  40cb46:	6848      	ldr	r0, [r1, #4]
  40cb48:	f020 0e01 	bic.w	lr, r0, #1
  40cb4c:	448e      	add	lr, r1
  40cb4e:	f8de e004 	ldr.w	lr, [lr, #4]
  40cb52:	f01e 0f01 	tst.w	lr, #1
  40cb56:	d14e      	bne.n	40cbf6 <_realloc_r+0x102>
  40cb58:	f020 0003 	bic.w	r0, r0, #3
  40cb5c:	4428      	add	r0, r5
  40cb5e:	4290      	cmp	r0, r2
  40cb60:	f280 80b8 	bge.w	40ccd4 <_realloc_r+0x1e0>
  40cb64:	07db      	lsls	r3, r3, #31
  40cb66:	f100 808b 	bmi.w	40cc80 <_realloc_r+0x18c>
  40cb6a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cb6e:	ebc3 0a08 	rsb	sl, r3, r8
  40cb72:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cb76:	f023 0303 	bic.w	r3, r3, #3
  40cb7a:	eb00 0e03 	add.w	lr, r0, r3
  40cb7e:	4596      	cmp	lr, r2
  40cb80:	db43      	blt.n	40cc0a <_realloc_r+0x116>
  40cb82:	68cb      	ldr	r3, [r1, #12]
  40cb84:	4657      	mov	r7, sl
  40cb86:	6889      	ldr	r1, [r1, #8]
  40cb88:	1f2a      	subs	r2, r5, #4
  40cb8a:	60cb      	str	r3, [r1, #12]
  40cb8c:	2a24      	cmp	r2, #36	; 0x24
  40cb8e:	6099      	str	r1, [r3, #8]
  40cb90:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40cb94:	f8da 300c 	ldr.w	r3, [sl, #12]
  40cb98:	60cb      	str	r3, [r1, #12]
  40cb9a:	6099      	str	r1, [r3, #8]
  40cb9c:	f200 813c 	bhi.w	40ce18 <_realloc_r+0x324>
  40cba0:	2a13      	cmp	r2, #19
  40cba2:	f240 80fa 	bls.w	40cd9a <_realloc_r+0x2a6>
  40cba6:	6833      	ldr	r3, [r6, #0]
  40cba8:	2a1b      	cmp	r2, #27
  40cbaa:	f8ca 3008 	str.w	r3, [sl, #8]
  40cbae:	6873      	ldr	r3, [r6, #4]
  40cbb0:	f8ca 300c 	str.w	r3, [sl, #12]
  40cbb4:	f200 813b 	bhi.w	40ce2e <_realloc_r+0x33a>
  40cbb8:	3608      	adds	r6, #8
  40cbba:	f10a 0310 	add.w	r3, sl, #16
  40cbbe:	e0ed      	b.n	40cd9c <_realloc_r+0x2a8>
  40cbc0:	f024 0407 	bic.w	r4, r4, #7
  40cbc4:	4622      	mov	r2, r4
  40cbc6:	0fe1      	lsrs	r1, r4, #31
  40cbc8:	e7ac      	b.n	40cb24 <_realloc_r+0x30>
  40cbca:	4637      	mov	r7, r6
  40cbcc:	1b2a      	subs	r2, r5, r4
  40cbce:	f003 0301 	and.w	r3, r3, #1
  40cbd2:	2a0f      	cmp	r2, #15
  40cbd4:	d841      	bhi.n	40cc5a <_realloc_r+0x166>
  40cbd6:	eb08 0205 	add.w	r2, r8, r5
  40cbda:	431d      	orrs	r5, r3
  40cbdc:	f8c8 5004 	str.w	r5, [r8, #4]
  40cbe0:	6853      	ldr	r3, [r2, #4]
  40cbe2:	f043 0301 	orr.w	r3, r3, #1
  40cbe6:	6053      	str	r3, [r2, #4]
  40cbe8:	4648      	mov	r0, r9
  40cbea:	f7fb fa6d 	bl	4080c8 <__malloc_unlock>
  40cbee:	4638      	mov	r0, r7
  40cbf0:	b003      	add	sp, #12
  40cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cbf6:	07d9      	lsls	r1, r3, #31
  40cbf8:	d442      	bmi.n	40cc80 <_realloc_r+0x18c>
  40cbfa:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cbfe:	ebc3 0a08 	rsb	sl, r3, r8
  40cc02:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cc06:	f023 0303 	bic.w	r3, r3, #3
  40cc0a:	442b      	add	r3, r5
  40cc0c:	4293      	cmp	r3, r2
  40cc0e:	db37      	blt.n	40cc80 <_realloc_r+0x18c>
  40cc10:	4657      	mov	r7, sl
  40cc12:	1f2a      	subs	r2, r5, #4
  40cc14:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cc18:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40cc1c:	2a24      	cmp	r2, #36	; 0x24
  40cc1e:	60c1      	str	r1, [r0, #12]
  40cc20:	6088      	str	r0, [r1, #8]
  40cc22:	f200 80c6 	bhi.w	40cdb2 <_realloc_r+0x2be>
  40cc26:	2a13      	cmp	r2, #19
  40cc28:	f240 80ff 	bls.w	40ce2a <_realloc_r+0x336>
  40cc2c:	6831      	ldr	r1, [r6, #0]
  40cc2e:	2a1b      	cmp	r2, #27
  40cc30:	f8ca 1008 	str.w	r1, [sl, #8]
  40cc34:	6871      	ldr	r1, [r6, #4]
  40cc36:	f8ca 100c 	str.w	r1, [sl, #12]
  40cc3a:	f200 810d 	bhi.w	40ce58 <_realloc_r+0x364>
  40cc3e:	3608      	adds	r6, #8
  40cc40:	f10a 0210 	add.w	r2, sl, #16
  40cc44:	6831      	ldr	r1, [r6, #0]
  40cc46:	461d      	mov	r5, r3
  40cc48:	46d0      	mov	r8, sl
  40cc4a:	6011      	str	r1, [r2, #0]
  40cc4c:	6873      	ldr	r3, [r6, #4]
  40cc4e:	6053      	str	r3, [r2, #4]
  40cc50:	68b3      	ldr	r3, [r6, #8]
  40cc52:	6093      	str	r3, [r2, #8]
  40cc54:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cc58:	e7b8      	b.n	40cbcc <_realloc_r+0xd8>
  40cc5a:	eb08 0504 	add.w	r5, r8, r4
  40cc5e:	f042 0601 	orr.w	r6, r2, #1
  40cc62:	431c      	orrs	r4, r3
  40cc64:	4648      	mov	r0, r9
  40cc66:	442a      	add	r2, r5
  40cc68:	f105 0108 	add.w	r1, r5, #8
  40cc6c:	f8c8 4004 	str.w	r4, [r8, #4]
  40cc70:	606e      	str	r6, [r5, #4]
  40cc72:	6853      	ldr	r3, [r2, #4]
  40cc74:	f043 0301 	orr.w	r3, r3, #1
  40cc78:	6053      	str	r3, [r2, #4]
  40cc7a:	f7ff f873 	bl	40bd64 <_free_r>
  40cc7e:	e7b3      	b.n	40cbe8 <_realloc_r+0xf4>
  40cc80:	4639      	mov	r1, r7
  40cc82:	4648      	mov	r0, r9
  40cc84:	f7fa ff72 	bl	407b6c <_malloc_r>
  40cc88:	4607      	mov	r7, r0
  40cc8a:	2800      	cmp	r0, #0
  40cc8c:	d0ac      	beq.n	40cbe8 <_realloc_r+0xf4>
  40cc8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cc92:	f1a0 0108 	sub.w	r1, r0, #8
  40cc96:	f023 0201 	bic.w	r2, r3, #1
  40cc9a:	4442      	add	r2, r8
  40cc9c:	4291      	cmp	r1, r2
  40cc9e:	f000 80b4 	beq.w	40ce0a <_realloc_r+0x316>
  40cca2:	1f2a      	subs	r2, r5, #4
  40cca4:	2a24      	cmp	r2, #36	; 0x24
  40cca6:	f200 80a1 	bhi.w	40cdec <_realloc_r+0x2f8>
  40ccaa:	2a13      	cmp	r2, #19
  40ccac:	d86a      	bhi.n	40cd84 <_realloc_r+0x290>
  40ccae:	4603      	mov	r3, r0
  40ccb0:	4632      	mov	r2, r6
  40ccb2:	6811      	ldr	r1, [r2, #0]
  40ccb4:	6019      	str	r1, [r3, #0]
  40ccb6:	6851      	ldr	r1, [r2, #4]
  40ccb8:	6059      	str	r1, [r3, #4]
  40ccba:	6892      	ldr	r2, [r2, #8]
  40ccbc:	609a      	str	r2, [r3, #8]
  40ccbe:	4631      	mov	r1, r6
  40ccc0:	4648      	mov	r0, r9
  40ccc2:	f7ff f84f 	bl	40bd64 <_free_r>
  40ccc6:	e78f      	b.n	40cbe8 <_realloc_r+0xf4>
  40ccc8:	4611      	mov	r1, r2
  40ccca:	b003      	add	sp, #12
  40cccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ccd0:	f7fa bf4c 	b.w	407b6c <_malloc_r>
  40ccd4:	68ca      	ldr	r2, [r1, #12]
  40ccd6:	4637      	mov	r7, r6
  40ccd8:	6889      	ldr	r1, [r1, #8]
  40ccda:	4605      	mov	r5, r0
  40ccdc:	60ca      	str	r2, [r1, #12]
  40ccde:	6091      	str	r1, [r2, #8]
  40cce0:	e774      	b.n	40cbcc <_realloc_r+0xd8>
  40cce2:	230c      	movs	r3, #12
  40cce4:	2000      	movs	r0, #0
  40cce6:	f8c9 3000 	str.w	r3, [r9]
  40ccea:	e781      	b.n	40cbf0 <_realloc_r+0xfc>
  40ccec:	6841      	ldr	r1, [r0, #4]
  40ccee:	f104 0010 	add.w	r0, r4, #16
  40ccf2:	f021 0103 	bic.w	r1, r1, #3
  40ccf6:	4429      	add	r1, r5
  40ccf8:	4281      	cmp	r1, r0
  40ccfa:	da63      	bge.n	40cdc4 <_realloc_r+0x2d0>
  40ccfc:	07db      	lsls	r3, r3, #31
  40ccfe:	d4bf      	bmi.n	40cc80 <_realloc_r+0x18c>
  40cd00:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40cd04:	ebc3 0a08 	rsb	sl, r3, r8
  40cd08:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cd0c:	f023 0303 	bic.w	r3, r3, #3
  40cd10:	eb01 0c03 	add.w	ip, r1, r3
  40cd14:	4560      	cmp	r0, ip
  40cd16:	f73f af78 	bgt.w	40cc0a <_realloc_r+0x116>
  40cd1a:	4657      	mov	r7, sl
  40cd1c:	1f2a      	subs	r2, r5, #4
  40cd1e:	f8da 300c 	ldr.w	r3, [sl, #12]
  40cd22:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40cd26:	2a24      	cmp	r2, #36	; 0x24
  40cd28:	60cb      	str	r3, [r1, #12]
  40cd2a:	6099      	str	r1, [r3, #8]
  40cd2c:	f200 80b8 	bhi.w	40cea0 <_realloc_r+0x3ac>
  40cd30:	2a13      	cmp	r2, #19
  40cd32:	f240 80a8 	bls.w	40ce86 <_realloc_r+0x392>
  40cd36:	6833      	ldr	r3, [r6, #0]
  40cd38:	2a1b      	cmp	r2, #27
  40cd3a:	f8ca 3008 	str.w	r3, [sl, #8]
  40cd3e:	6873      	ldr	r3, [r6, #4]
  40cd40:	f8ca 300c 	str.w	r3, [sl, #12]
  40cd44:	f200 80b5 	bhi.w	40ceb2 <_realloc_r+0x3be>
  40cd48:	3608      	adds	r6, #8
  40cd4a:	f10a 0310 	add.w	r3, sl, #16
  40cd4e:	6832      	ldr	r2, [r6, #0]
  40cd50:	601a      	str	r2, [r3, #0]
  40cd52:	6872      	ldr	r2, [r6, #4]
  40cd54:	605a      	str	r2, [r3, #4]
  40cd56:	68b2      	ldr	r2, [r6, #8]
  40cd58:	609a      	str	r2, [r3, #8]
  40cd5a:	ebc4 030c 	rsb	r3, r4, ip
  40cd5e:	eb0a 0204 	add.w	r2, sl, r4
  40cd62:	4648      	mov	r0, r9
  40cd64:	f043 0301 	orr.w	r3, r3, #1
  40cd68:	f8cb 2008 	str.w	r2, [fp, #8]
  40cd6c:	6053      	str	r3, [r2, #4]
  40cd6e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cd72:	f003 0301 	and.w	r3, r3, #1
  40cd76:	431c      	orrs	r4, r3
  40cd78:	f8ca 4004 	str.w	r4, [sl, #4]
  40cd7c:	f7fb f9a4 	bl	4080c8 <__malloc_unlock>
  40cd80:	4638      	mov	r0, r7
  40cd82:	e735      	b.n	40cbf0 <_realloc_r+0xfc>
  40cd84:	6833      	ldr	r3, [r6, #0]
  40cd86:	2a1b      	cmp	r2, #27
  40cd88:	6003      	str	r3, [r0, #0]
  40cd8a:	6873      	ldr	r3, [r6, #4]
  40cd8c:	6043      	str	r3, [r0, #4]
  40cd8e:	d831      	bhi.n	40cdf4 <_realloc_r+0x300>
  40cd90:	f100 0308 	add.w	r3, r0, #8
  40cd94:	f106 0208 	add.w	r2, r6, #8
  40cd98:	e78b      	b.n	40ccb2 <_realloc_r+0x1be>
  40cd9a:	463b      	mov	r3, r7
  40cd9c:	6832      	ldr	r2, [r6, #0]
  40cd9e:	4675      	mov	r5, lr
  40cda0:	46d0      	mov	r8, sl
  40cda2:	601a      	str	r2, [r3, #0]
  40cda4:	6872      	ldr	r2, [r6, #4]
  40cda6:	605a      	str	r2, [r3, #4]
  40cda8:	68b2      	ldr	r2, [r6, #8]
  40cdaa:	609a      	str	r2, [r3, #8]
  40cdac:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cdb0:	e70c      	b.n	40cbcc <_realloc_r+0xd8>
  40cdb2:	4631      	mov	r1, r6
  40cdb4:	4638      	mov	r0, r7
  40cdb6:	461d      	mov	r5, r3
  40cdb8:	46d0      	mov	r8, sl
  40cdba:	f7ff fb2d 	bl	40c418 <memmove>
  40cdbe:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cdc2:	e703      	b.n	40cbcc <_realloc_r+0xd8>
  40cdc4:	1b0b      	subs	r3, r1, r4
  40cdc6:	eb08 0204 	add.w	r2, r8, r4
  40cdca:	4648      	mov	r0, r9
  40cdcc:	f043 0301 	orr.w	r3, r3, #1
  40cdd0:	f8cb 2008 	str.w	r2, [fp, #8]
  40cdd4:	6053      	str	r3, [r2, #4]
  40cdd6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40cdda:	f003 0301 	and.w	r3, r3, #1
  40cdde:	431c      	orrs	r4, r3
  40cde0:	f846 4c04 	str.w	r4, [r6, #-4]
  40cde4:	f7fb f970 	bl	4080c8 <__malloc_unlock>
  40cde8:	4630      	mov	r0, r6
  40cdea:	e701      	b.n	40cbf0 <_realloc_r+0xfc>
  40cdec:	4631      	mov	r1, r6
  40cdee:	f7ff fb13 	bl	40c418 <memmove>
  40cdf2:	e764      	b.n	40ccbe <_realloc_r+0x1ca>
  40cdf4:	68b3      	ldr	r3, [r6, #8]
  40cdf6:	2a24      	cmp	r2, #36	; 0x24
  40cdf8:	6083      	str	r3, [r0, #8]
  40cdfa:	68f3      	ldr	r3, [r6, #12]
  40cdfc:	60c3      	str	r3, [r0, #12]
  40cdfe:	d022      	beq.n	40ce46 <_realloc_r+0x352>
  40ce00:	f100 0310 	add.w	r3, r0, #16
  40ce04:	f106 0210 	add.w	r2, r6, #16
  40ce08:	e753      	b.n	40ccb2 <_realloc_r+0x1be>
  40ce0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40ce0e:	4637      	mov	r7, r6
  40ce10:	f022 0203 	bic.w	r2, r2, #3
  40ce14:	4415      	add	r5, r2
  40ce16:	e6d9      	b.n	40cbcc <_realloc_r+0xd8>
  40ce18:	4631      	mov	r1, r6
  40ce1a:	4638      	mov	r0, r7
  40ce1c:	4675      	mov	r5, lr
  40ce1e:	46d0      	mov	r8, sl
  40ce20:	f7ff fafa 	bl	40c418 <memmove>
  40ce24:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ce28:	e6d0      	b.n	40cbcc <_realloc_r+0xd8>
  40ce2a:	463a      	mov	r2, r7
  40ce2c:	e70a      	b.n	40cc44 <_realloc_r+0x150>
  40ce2e:	68b3      	ldr	r3, [r6, #8]
  40ce30:	2a24      	cmp	r2, #36	; 0x24
  40ce32:	f8ca 3010 	str.w	r3, [sl, #16]
  40ce36:	68f3      	ldr	r3, [r6, #12]
  40ce38:	f8ca 3014 	str.w	r3, [sl, #20]
  40ce3c:	d018      	beq.n	40ce70 <_realloc_r+0x37c>
  40ce3e:	3610      	adds	r6, #16
  40ce40:	f10a 0318 	add.w	r3, sl, #24
  40ce44:	e7aa      	b.n	40cd9c <_realloc_r+0x2a8>
  40ce46:	6931      	ldr	r1, [r6, #16]
  40ce48:	f100 0318 	add.w	r3, r0, #24
  40ce4c:	f106 0218 	add.w	r2, r6, #24
  40ce50:	6101      	str	r1, [r0, #16]
  40ce52:	6971      	ldr	r1, [r6, #20]
  40ce54:	6141      	str	r1, [r0, #20]
  40ce56:	e72c      	b.n	40ccb2 <_realloc_r+0x1be>
  40ce58:	68b1      	ldr	r1, [r6, #8]
  40ce5a:	2a24      	cmp	r2, #36	; 0x24
  40ce5c:	f8ca 1010 	str.w	r1, [sl, #16]
  40ce60:	68f1      	ldr	r1, [r6, #12]
  40ce62:	f8ca 1014 	str.w	r1, [sl, #20]
  40ce66:	d010      	beq.n	40ce8a <_realloc_r+0x396>
  40ce68:	3610      	adds	r6, #16
  40ce6a:	f10a 0218 	add.w	r2, sl, #24
  40ce6e:	e6e9      	b.n	40cc44 <_realloc_r+0x150>
  40ce70:	6932      	ldr	r2, [r6, #16]
  40ce72:	f10a 0320 	add.w	r3, sl, #32
  40ce76:	3618      	adds	r6, #24
  40ce78:	f8ca 2018 	str.w	r2, [sl, #24]
  40ce7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40ce80:	f8ca 201c 	str.w	r2, [sl, #28]
  40ce84:	e78a      	b.n	40cd9c <_realloc_r+0x2a8>
  40ce86:	463b      	mov	r3, r7
  40ce88:	e761      	b.n	40cd4e <_realloc_r+0x25a>
  40ce8a:	6931      	ldr	r1, [r6, #16]
  40ce8c:	f10a 0220 	add.w	r2, sl, #32
  40ce90:	3618      	adds	r6, #24
  40ce92:	f8ca 1018 	str.w	r1, [sl, #24]
  40ce96:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40ce9a:	f8ca 101c 	str.w	r1, [sl, #28]
  40ce9e:	e6d1      	b.n	40cc44 <_realloc_r+0x150>
  40cea0:	4631      	mov	r1, r6
  40cea2:	4638      	mov	r0, r7
  40cea4:	f8cd c004 	str.w	ip, [sp, #4]
  40cea8:	f7ff fab6 	bl	40c418 <memmove>
  40ceac:	f8dd c004 	ldr.w	ip, [sp, #4]
  40ceb0:	e753      	b.n	40cd5a <_realloc_r+0x266>
  40ceb2:	68b3      	ldr	r3, [r6, #8]
  40ceb4:	2a24      	cmp	r2, #36	; 0x24
  40ceb6:	f8ca 3010 	str.w	r3, [sl, #16]
  40ceba:	68f3      	ldr	r3, [r6, #12]
  40cebc:	f8ca 3014 	str.w	r3, [sl, #20]
  40cec0:	d003      	beq.n	40ceca <_realloc_r+0x3d6>
  40cec2:	3610      	adds	r6, #16
  40cec4:	f10a 0318 	add.w	r3, sl, #24
  40cec8:	e741      	b.n	40cd4e <_realloc_r+0x25a>
  40ceca:	6932      	ldr	r2, [r6, #16]
  40cecc:	f10a 0320 	add.w	r3, sl, #32
  40ced0:	3618      	adds	r6, #24
  40ced2:	f8ca 2018 	str.w	r2, [sl, #24]
  40ced6:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40ceda:	f8ca 201c 	str.w	r2, [sl, #28]
  40cede:	e736      	b.n	40cd4e <_realloc_r+0x25a>
  40cee0:	2040044c 	.word	0x2040044c

0040cee4 <_raise_r>:
  40cee4:	291f      	cmp	r1, #31
  40cee6:	b538      	push	{r3, r4, r5, lr}
  40cee8:	4605      	mov	r5, r0
  40ceea:	d821      	bhi.n	40cf30 <_raise_r+0x4c>
  40ceec:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  40cef0:	460c      	mov	r4, r1
  40cef2:	b19a      	cbz	r2, 40cf1c <_raise_r+0x38>
  40cef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40cef8:	b183      	cbz	r3, 40cf1c <_raise_r+0x38>
  40cefa:	2b01      	cmp	r3, #1
  40cefc:	d00c      	beq.n	40cf18 <_raise_r+0x34>
  40cefe:	1c59      	adds	r1, r3, #1
  40cf00:	d006      	beq.n	40cf10 <_raise_r+0x2c>
  40cf02:	2500      	movs	r5, #0
  40cf04:	4620      	mov	r0, r4
  40cf06:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  40cf0a:	4798      	blx	r3
  40cf0c:	4628      	mov	r0, r5
  40cf0e:	bd38      	pop	{r3, r4, r5, pc}
  40cf10:	2316      	movs	r3, #22
  40cf12:	2001      	movs	r0, #1
  40cf14:	602b      	str	r3, [r5, #0]
  40cf16:	bd38      	pop	{r3, r4, r5, pc}
  40cf18:	2000      	movs	r0, #0
  40cf1a:	bd38      	pop	{r3, r4, r5, pc}
  40cf1c:	4628      	mov	r0, r5
  40cf1e:	f000 f829 	bl	40cf74 <_getpid_r>
  40cf22:	4622      	mov	r2, r4
  40cf24:	4601      	mov	r1, r0
  40cf26:	4628      	mov	r0, r5
  40cf28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40cf2c:	f000 b80e 	b.w	40cf4c <_kill_r>
  40cf30:	2316      	movs	r3, #22
  40cf32:	f04f 30ff 	mov.w	r0, #4294967295
  40cf36:	602b      	str	r3, [r5, #0]
  40cf38:	bd38      	pop	{r3, r4, r5, pc}
  40cf3a:	bf00      	nop

0040cf3c <raise>:
  40cf3c:	4b02      	ldr	r3, [pc, #8]	; (40cf48 <raise+0xc>)
  40cf3e:	4601      	mov	r1, r0
  40cf40:	6818      	ldr	r0, [r3, #0]
  40cf42:	f7ff bfcf 	b.w	40cee4 <_raise_r>
  40cf46:	bf00      	nop
  40cf48:	20400448 	.word	0x20400448

0040cf4c <_kill_r>:
  40cf4c:	b538      	push	{r3, r4, r5, lr}
  40cf4e:	2300      	movs	r3, #0
  40cf50:	4c07      	ldr	r4, [pc, #28]	; (40cf70 <_kill_r+0x24>)
  40cf52:	4605      	mov	r5, r0
  40cf54:	4608      	mov	r0, r1
  40cf56:	4611      	mov	r1, r2
  40cf58:	6023      	str	r3, [r4, #0]
  40cf5a:	f7f6 fa3d 	bl	4033d8 <_kill>
  40cf5e:	1c43      	adds	r3, r0, #1
  40cf60:	d000      	beq.n	40cf64 <_kill_r+0x18>
  40cf62:	bd38      	pop	{r3, r4, r5, pc}
  40cf64:	6823      	ldr	r3, [r4, #0]
  40cf66:	2b00      	cmp	r3, #0
  40cf68:	d0fb      	beq.n	40cf62 <_kill_r+0x16>
  40cf6a:	602b      	str	r3, [r5, #0]
  40cf6c:	bd38      	pop	{r3, r4, r5, pc}
  40cf6e:	bf00      	nop
  40cf70:	2040c440 	.word	0x2040c440

0040cf74 <_getpid_r>:
  40cf74:	f7f6 ba32 	b.w	4033dc <_getpid>

0040cf78 <__sread>:
  40cf78:	b510      	push	{r4, lr}
  40cf7a:	460c      	mov	r4, r1
  40cf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cf80:	f000 fa76 	bl	40d470 <_read_r>
  40cf84:	2800      	cmp	r0, #0
  40cf86:	db03      	blt.n	40cf90 <__sread+0x18>
  40cf88:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40cf8a:	4403      	add	r3, r0
  40cf8c:	6523      	str	r3, [r4, #80]	; 0x50
  40cf8e:	bd10      	pop	{r4, pc}
  40cf90:	89a3      	ldrh	r3, [r4, #12]
  40cf92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cf96:	81a3      	strh	r3, [r4, #12]
  40cf98:	bd10      	pop	{r4, pc}
  40cf9a:	bf00      	nop

0040cf9c <__swrite>:
  40cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cfa0:	461d      	mov	r5, r3
  40cfa2:	898b      	ldrh	r3, [r1, #12]
  40cfa4:	4616      	mov	r6, r2
  40cfa6:	460c      	mov	r4, r1
  40cfa8:	05da      	lsls	r2, r3, #23
  40cfaa:	4607      	mov	r7, r0
  40cfac:	d506      	bpl.n	40cfbc <__swrite+0x20>
  40cfae:	2302      	movs	r3, #2
  40cfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cfb4:	2200      	movs	r2, #0
  40cfb6:	f000 fa47 	bl	40d448 <_lseek_r>
  40cfba:	89a3      	ldrh	r3, [r4, #12]
  40cfbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cfc0:	4638      	mov	r0, r7
  40cfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cfc6:	4632      	mov	r2, r6
  40cfc8:	81a3      	strh	r3, [r4, #12]
  40cfca:	462b      	mov	r3, r5
  40cfcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40cfd0:	f000 b928 	b.w	40d224 <_write_r>

0040cfd4 <__sseek>:
  40cfd4:	b510      	push	{r4, lr}
  40cfd6:	460c      	mov	r4, r1
  40cfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cfdc:	f000 fa34 	bl	40d448 <_lseek_r>
  40cfe0:	1c42      	adds	r2, r0, #1
  40cfe2:	89a3      	ldrh	r3, [r4, #12]
  40cfe4:	d004      	beq.n	40cff0 <__sseek+0x1c>
  40cfe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40cfea:	6520      	str	r0, [r4, #80]	; 0x50
  40cfec:	81a3      	strh	r3, [r4, #12]
  40cfee:	bd10      	pop	{r4, pc}
  40cff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40cff4:	81a3      	strh	r3, [r4, #12]
  40cff6:	bd10      	pop	{r4, pc}

0040cff8 <__sclose>:
  40cff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40cffc:	f000 b9aa 	b.w	40d354 <_close_r>

0040d000 <__ssprint_r>:
  40d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d004:	6893      	ldr	r3, [r2, #8]
  40d006:	b083      	sub	sp, #12
  40d008:	4691      	mov	r9, r2
  40d00a:	f8d2 8000 	ldr.w	r8, [r2]
  40d00e:	9001      	str	r0, [sp, #4]
  40d010:	2b00      	cmp	r3, #0
  40d012:	d073      	beq.n	40d0fc <__ssprint_r+0xfc>
  40d014:	f04f 0b00 	mov.w	fp, #0
  40d018:	460d      	mov	r5, r1
  40d01a:	6808      	ldr	r0, [r1, #0]
  40d01c:	688b      	ldr	r3, [r1, #8]
  40d01e:	465c      	mov	r4, fp
  40d020:	2c00      	cmp	r4, #0
  40d022:	d046      	beq.n	40d0b2 <__ssprint_r+0xb2>
  40d024:	429c      	cmp	r4, r3
  40d026:	461e      	mov	r6, r3
  40d028:	469a      	mov	sl, r3
  40d02a:	d349      	bcc.n	40d0c0 <__ssprint_r+0xc0>
  40d02c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40d030:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40d034:	d02d      	beq.n	40d092 <__ssprint_r+0x92>
  40d036:	696b      	ldr	r3, [r5, #20]
  40d038:	1c62      	adds	r2, r4, #1
  40d03a:	6929      	ldr	r1, [r5, #16]
  40d03c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40d040:	1a46      	subs	r6, r0, r1
  40d042:	4610      	mov	r0, r2
  40d044:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40d048:	4430      	add	r0, r6
  40d04a:	105f      	asrs	r7, r3, #1
  40d04c:	4287      	cmp	r7, r0
  40d04e:	463a      	mov	r2, r7
  40d050:	d201      	bcs.n	40d056 <__ssprint_r+0x56>
  40d052:	4607      	mov	r7, r0
  40d054:	4602      	mov	r2, r0
  40d056:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40d05a:	d034      	beq.n	40d0c6 <__ssprint_r+0xc6>
  40d05c:	4611      	mov	r1, r2
  40d05e:	9801      	ldr	r0, [sp, #4]
  40d060:	f7fa fd84 	bl	407b6c <_malloc_r>
  40d064:	4682      	mov	sl, r0
  40d066:	2800      	cmp	r0, #0
  40d068:	d04e      	beq.n	40d108 <__ssprint_r+0x108>
  40d06a:	4632      	mov	r2, r6
  40d06c:	6929      	ldr	r1, [r5, #16]
  40d06e:	f001 fb85 	bl	40e77c <memcpy>
  40d072:	89aa      	ldrh	r2, [r5, #12]
  40d074:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d078:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d07c:	81aa      	strh	r2, [r5, #12]
  40d07e:	eb0a 0006 	add.w	r0, sl, r6
  40d082:	1bba      	subs	r2, r7, r6
  40d084:	f8c5 a010 	str.w	sl, [r5, #16]
  40d088:	4626      	mov	r6, r4
  40d08a:	46a2      	mov	sl, r4
  40d08c:	6028      	str	r0, [r5, #0]
  40d08e:	60aa      	str	r2, [r5, #8]
  40d090:	616f      	str	r7, [r5, #20]
  40d092:	4652      	mov	r2, sl
  40d094:	4659      	mov	r1, fp
  40d096:	f7ff f9bf 	bl	40c418 <memmove>
  40d09a:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40d09e:	68ab      	ldr	r3, [r5, #8]
  40d0a0:	6828      	ldr	r0, [r5, #0]
  40d0a2:	1b14      	subs	r4, r2, r4
  40d0a4:	1b9b      	subs	r3, r3, r6
  40d0a6:	4450      	add	r0, sl
  40d0a8:	60ab      	str	r3, [r5, #8]
  40d0aa:	6028      	str	r0, [r5, #0]
  40d0ac:	f8c9 4008 	str.w	r4, [r9, #8]
  40d0b0:	b324      	cbz	r4, 40d0fc <__ssprint_r+0xfc>
  40d0b2:	f8d8 b000 	ldr.w	fp, [r8]
  40d0b6:	f108 0808 	add.w	r8, r8, #8
  40d0ba:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40d0be:	e7af      	b.n	40d020 <__ssprint_r+0x20>
  40d0c0:	4626      	mov	r6, r4
  40d0c2:	46a2      	mov	sl, r4
  40d0c4:	e7e5      	b.n	40d092 <__ssprint_r+0x92>
  40d0c6:	9801      	ldr	r0, [sp, #4]
  40d0c8:	f7ff fd14 	bl	40caf4 <_realloc_r>
  40d0cc:	4682      	mov	sl, r0
  40d0ce:	2800      	cmp	r0, #0
  40d0d0:	d1d5      	bne.n	40d07e <__ssprint_r+0x7e>
  40d0d2:	9c01      	ldr	r4, [sp, #4]
  40d0d4:	6929      	ldr	r1, [r5, #16]
  40d0d6:	4620      	mov	r0, r4
  40d0d8:	f7fe fe44 	bl	40bd64 <_free_r>
  40d0dc:	230c      	movs	r3, #12
  40d0de:	6023      	str	r3, [r4, #0]
  40d0e0:	89ab      	ldrh	r3, [r5, #12]
  40d0e2:	2200      	movs	r2, #0
  40d0e4:	f04f 30ff 	mov.w	r0, #4294967295
  40d0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d0ec:	81ab      	strh	r3, [r5, #12]
  40d0ee:	f8c9 2008 	str.w	r2, [r9, #8]
  40d0f2:	f8c9 2004 	str.w	r2, [r9, #4]
  40d0f6:	b003      	add	sp, #12
  40d0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d0fc:	2000      	movs	r0, #0
  40d0fe:	f8c9 0004 	str.w	r0, [r9, #4]
  40d102:	b003      	add	sp, #12
  40d104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d108:	230c      	movs	r3, #12
  40d10a:	9a01      	ldr	r2, [sp, #4]
  40d10c:	6013      	str	r3, [r2, #0]
  40d10e:	e7e7      	b.n	40d0e0 <__ssprint_r+0xe0>

0040d110 <__swbuf_r>:
  40d110:	b570      	push	{r4, r5, r6, lr}
  40d112:	460d      	mov	r5, r1
  40d114:	4614      	mov	r4, r2
  40d116:	4606      	mov	r6, r0
  40d118:	b110      	cbz	r0, 40d120 <__swbuf_r+0x10>
  40d11a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d11c:	2b00      	cmp	r3, #0
  40d11e:	d048      	beq.n	40d1b2 <__swbuf_r+0xa2>
  40d120:	89a2      	ldrh	r2, [r4, #12]
  40d122:	69a3      	ldr	r3, [r4, #24]
  40d124:	b291      	uxth	r1, r2
  40d126:	60a3      	str	r3, [r4, #8]
  40d128:	0708      	lsls	r0, r1, #28
  40d12a:	d538      	bpl.n	40d19e <__swbuf_r+0x8e>
  40d12c:	6923      	ldr	r3, [r4, #16]
  40d12e:	2b00      	cmp	r3, #0
  40d130:	d035      	beq.n	40d19e <__swbuf_r+0x8e>
  40d132:	0489      	lsls	r1, r1, #18
  40d134:	b2ed      	uxtb	r5, r5
  40d136:	d515      	bpl.n	40d164 <__swbuf_r+0x54>
  40d138:	6822      	ldr	r2, [r4, #0]
  40d13a:	6961      	ldr	r1, [r4, #20]
  40d13c:	1ad3      	subs	r3, r2, r3
  40d13e:	428b      	cmp	r3, r1
  40d140:	da1c      	bge.n	40d17c <__swbuf_r+0x6c>
  40d142:	3301      	adds	r3, #1
  40d144:	68a1      	ldr	r1, [r4, #8]
  40d146:	1c50      	adds	r0, r2, #1
  40d148:	3901      	subs	r1, #1
  40d14a:	6020      	str	r0, [r4, #0]
  40d14c:	60a1      	str	r1, [r4, #8]
  40d14e:	7015      	strb	r5, [r2, #0]
  40d150:	6962      	ldr	r2, [r4, #20]
  40d152:	429a      	cmp	r2, r3
  40d154:	d01a      	beq.n	40d18c <__swbuf_r+0x7c>
  40d156:	2d0a      	cmp	r5, #10
  40d158:	d102      	bne.n	40d160 <__swbuf_r+0x50>
  40d15a:	7b23      	ldrb	r3, [r4, #12]
  40d15c:	07db      	lsls	r3, r3, #31
  40d15e:	d415      	bmi.n	40d18c <__swbuf_r+0x7c>
  40d160:	4628      	mov	r0, r5
  40d162:	bd70      	pop	{r4, r5, r6, pc}
  40d164:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40d166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40d16a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40d16e:	81a2      	strh	r2, [r4, #12]
  40d170:	6822      	ldr	r2, [r4, #0]
  40d172:	6661      	str	r1, [r4, #100]	; 0x64
  40d174:	1ad3      	subs	r3, r2, r3
  40d176:	6961      	ldr	r1, [r4, #20]
  40d178:	428b      	cmp	r3, r1
  40d17a:	dbe2      	blt.n	40d142 <__swbuf_r+0x32>
  40d17c:	4630      	mov	r0, r6
  40d17e:	4621      	mov	r1, r4
  40d180:	f7fe fc7e 	bl	40ba80 <_fflush_r>
  40d184:	b940      	cbnz	r0, 40d198 <__swbuf_r+0x88>
  40d186:	6822      	ldr	r2, [r4, #0]
  40d188:	2301      	movs	r3, #1
  40d18a:	e7db      	b.n	40d144 <__swbuf_r+0x34>
  40d18c:	4630      	mov	r0, r6
  40d18e:	4621      	mov	r1, r4
  40d190:	f7fe fc76 	bl	40ba80 <_fflush_r>
  40d194:	2800      	cmp	r0, #0
  40d196:	d0e3      	beq.n	40d160 <__swbuf_r+0x50>
  40d198:	f04f 30ff 	mov.w	r0, #4294967295
  40d19c:	bd70      	pop	{r4, r5, r6, pc}
  40d19e:	4630      	mov	r0, r6
  40d1a0:	4621      	mov	r1, r4
  40d1a2:	f7fd fb3b 	bl	40a81c <__swsetup_r>
  40d1a6:	2800      	cmp	r0, #0
  40d1a8:	d1f6      	bne.n	40d198 <__swbuf_r+0x88>
  40d1aa:	89a2      	ldrh	r2, [r4, #12]
  40d1ac:	6923      	ldr	r3, [r4, #16]
  40d1ae:	b291      	uxth	r1, r2
  40d1b0:	e7bf      	b.n	40d132 <__swbuf_r+0x22>
  40d1b2:	f7fe fcff 	bl	40bbb4 <__sinit>
  40d1b6:	e7b3      	b.n	40d120 <__swbuf_r+0x10>

0040d1b8 <_wcrtomb_r>:
  40d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d1bc:	4605      	mov	r5, r0
  40d1be:	b086      	sub	sp, #24
  40d1c0:	461e      	mov	r6, r3
  40d1c2:	460c      	mov	r4, r1
  40d1c4:	b1a1      	cbz	r1, 40d1f0 <_wcrtomb_r+0x38>
  40d1c6:	4b10      	ldr	r3, [pc, #64]	; (40d208 <_wcrtomb_r+0x50>)
  40d1c8:	4617      	mov	r7, r2
  40d1ca:	f8d3 8000 	ldr.w	r8, [r3]
  40d1ce:	f7ff f85b 	bl	40c288 <__locale_charset>
  40d1d2:	9600      	str	r6, [sp, #0]
  40d1d4:	4603      	mov	r3, r0
  40d1d6:	4621      	mov	r1, r4
  40d1d8:	4628      	mov	r0, r5
  40d1da:	463a      	mov	r2, r7
  40d1dc:	47c0      	blx	r8
  40d1de:	1c43      	adds	r3, r0, #1
  40d1e0:	d103      	bne.n	40d1ea <_wcrtomb_r+0x32>
  40d1e2:	2200      	movs	r2, #0
  40d1e4:	238a      	movs	r3, #138	; 0x8a
  40d1e6:	6032      	str	r2, [r6, #0]
  40d1e8:	602b      	str	r3, [r5, #0]
  40d1ea:	b006      	add	sp, #24
  40d1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d1f0:	4b05      	ldr	r3, [pc, #20]	; (40d208 <_wcrtomb_r+0x50>)
  40d1f2:	681f      	ldr	r7, [r3, #0]
  40d1f4:	f7ff f848 	bl	40c288 <__locale_charset>
  40d1f8:	9600      	str	r6, [sp, #0]
  40d1fa:	4603      	mov	r3, r0
  40d1fc:	4622      	mov	r2, r4
  40d1fe:	4628      	mov	r0, r5
  40d200:	a903      	add	r1, sp, #12
  40d202:	47b8      	blx	r7
  40d204:	e7eb      	b.n	40d1de <_wcrtomb_r+0x26>
  40d206:	bf00      	nop
  40d208:	204008bc 	.word	0x204008bc

0040d20c <__ascii_wctomb>:
  40d20c:	b119      	cbz	r1, 40d216 <__ascii_wctomb+0xa>
  40d20e:	2aff      	cmp	r2, #255	; 0xff
  40d210:	d803      	bhi.n	40d21a <__ascii_wctomb+0xe>
  40d212:	700a      	strb	r2, [r1, #0]
  40d214:	2101      	movs	r1, #1
  40d216:	4608      	mov	r0, r1
  40d218:	4770      	bx	lr
  40d21a:	238a      	movs	r3, #138	; 0x8a
  40d21c:	f04f 31ff 	mov.w	r1, #4294967295
  40d220:	6003      	str	r3, [r0, #0]
  40d222:	e7f8      	b.n	40d216 <__ascii_wctomb+0xa>

0040d224 <_write_r>:
  40d224:	b570      	push	{r4, r5, r6, lr}
  40d226:	4c08      	ldr	r4, [pc, #32]	; (40d248 <_write_r+0x24>)
  40d228:	2500      	movs	r5, #0
  40d22a:	4606      	mov	r6, r0
  40d22c:	4608      	mov	r0, r1
  40d22e:	4611      	mov	r1, r2
  40d230:	461a      	mov	r2, r3
  40d232:	6025      	str	r5, [r4, #0]
  40d234:	f7f6 f8b4 	bl	4033a0 <_write>
  40d238:	1c43      	adds	r3, r0, #1
  40d23a:	d000      	beq.n	40d23e <_write_r+0x1a>
  40d23c:	bd70      	pop	{r4, r5, r6, pc}
  40d23e:	6823      	ldr	r3, [r4, #0]
  40d240:	2b00      	cmp	r3, #0
  40d242:	d0fb      	beq.n	40d23c <_write_r+0x18>
  40d244:	6033      	str	r3, [r6, #0]
  40d246:	bd70      	pop	{r4, r5, r6, pc}
  40d248:	2040c440 	.word	0x2040c440

0040d24c <__register_exitproc>:
  40d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d250:	4c26      	ldr	r4, [pc, #152]	; (40d2ec <__register_exitproc+0xa0>)
  40d252:	4606      	mov	r6, r0
  40d254:	4688      	mov	r8, r1
  40d256:	4691      	mov	r9, r2
  40d258:	6825      	ldr	r5, [r4, #0]
  40d25a:	469a      	mov	sl, r3
  40d25c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40d260:	2c00      	cmp	r4, #0
  40d262:	d03a      	beq.n	40d2da <__register_exitproc+0x8e>
  40d264:	6860      	ldr	r0, [r4, #4]
  40d266:	281f      	cmp	r0, #31
  40d268:	dc19      	bgt.n	40d29e <__register_exitproc+0x52>
  40d26a:	1c41      	adds	r1, r0, #1
  40d26c:	b186      	cbz	r6, 40d290 <__register_exitproc+0x44>
  40d26e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40d272:	2201      	movs	r2, #1
  40d274:	2e02      	cmp	r6, #2
  40d276:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40d27a:	fa02 f200 	lsl.w	r2, r2, r0
  40d27e:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40d282:	ea43 0302 	orr.w	r3, r3, r2
  40d286:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40d28a:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40d28e:	d01e      	beq.n	40d2ce <__register_exitproc+0x82>
  40d290:	1c83      	adds	r3, r0, #2
  40d292:	6061      	str	r1, [r4, #4]
  40d294:	2000      	movs	r0, #0
  40d296:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d29e:	4b14      	ldr	r3, [pc, #80]	; (40d2f0 <__register_exitproc+0xa4>)
  40d2a0:	b303      	cbz	r3, 40d2e4 <__register_exitproc+0x98>
  40d2a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d2a6:	f7fa fc59 	bl	407b5c <malloc>
  40d2aa:	4604      	mov	r4, r0
  40d2ac:	b1d0      	cbz	r0, 40d2e4 <__register_exitproc+0x98>
  40d2ae:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40d2b2:	2700      	movs	r7, #0
  40d2b4:	2101      	movs	r1, #1
  40d2b6:	6003      	str	r3, [r0, #0]
  40d2b8:	4638      	mov	r0, r7
  40d2ba:	6067      	str	r7, [r4, #4]
  40d2bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d2c0:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40d2c4:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40d2c8:	2e00      	cmp	r6, #0
  40d2ca:	d0e1      	beq.n	40d290 <__register_exitproc+0x44>
  40d2cc:	e7cf      	b.n	40d26e <__register_exitproc+0x22>
  40d2ce:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40d2d2:	431a      	orrs	r2, r3
  40d2d4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40d2d8:	e7da      	b.n	40d290 <__register_exitproc+0x44>
  40d2da:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40d2de:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40d2e2:	e7bf      	b.n	40d264 <__register_exitproc+0x18>
  40d2e4:	f04f 30ff 	mov.w	r0, #4294967295
  40d2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d2ec:	0040e494 	.word	0x0040e494
  40d2f0:	00407b5d 	.word	0x00407b5d

0040d2f4 <_calloc_r>:
  40d2f4:	b510      	push	{r4, lr}
  40d2f6:	fb02 f101 	mul.w	r1, r2, r1
  40d2fa:	f7fa fc37 	bl	407b6c <_malloc_r>
  40d2fe:	4604      	mov	r4, r0
  40d300:	b168      	cbz	r0, 40d31e <_calloc_r+0x2a>
  40d302:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d306:	f022 0203 	bic.w	r2, r2, #3
  40d30a:	3a04      	subs	r2, #4
  40d30c:	2a24      	cmp	r2, #36	; 0x24
  40d30e:	d814      	bhi.n	40d33a <_calloc_r+0x46>
  40d310:	2a13      	cmp	r2, #19
  40d312:	d806      	bhi.n	40d322 <_calloc_r+0x2e>
  40d314:	4603      	mov	r3, r0
  40d316:	2200      	movs	r2, #0
  40d318:	601a      	str	r2, [r3, #0]
  40d31a:	605a      	str	r2, [r3, #4]
  40d31c:	609a      	str	r2, [r3, #8]
  40d31e:	4620      	mov	r0, r4
  40d320:	bd10      	pop	{r4, pc}
  40d322:	2100      	movs	r1, #0
  40d324:	2a1b      	cmp	r2, #27
  40d326:	6001      	str	r1, [r0, #0]
  40d328:	6041      	str	r1, [r0, #4]
  40d32a:	d90b      	bls.n	40d344 <_calloc_r+0x50>
  40d32c:	2a24      	cmp	r2, #36	; 0x24
  40d32e:	6081      	str	r1, [r0, #8]
  40d330:	60c1      	str	r1, [r0, #12]
  40d332:	d00a      	beq.n	40d34a <_calloc_r+0x56>
  40d334:	f100 0310 	add.w	r3, r0, #16
  40d338:	e7ed      	b.n	40d316 <_calloc_r+0x22>
  40d33a:	2100      	movs	r1, #0
  40d33c:	f001 fa12 	bl	40e764 <__fini_array_end>
  40d340:	4620      	mov	r0, r4
  40d342:	bd10      	pop	{r4, pc}
  40d344:	f100 0308 	add.w	r3, r0, #8
  40d348:	e7e5      	b.n	40d316 <_calloc_r+0x22>
  40d34a:	6101      	str	r1, [r0, #16]
  40d34c:	f100 0318 	add.w	r3, r0, #24
  40d350:	6141      	str	r1, [r0, #20]
  40d352:	e7e0      	b.n	40d316 <_calloc_r+0x22>

0040d354 <_close_r>:
  40d354:	b538      	push	{r3, r4, r5, lr}
  40d356:	2300      	movs	r3, #0
  40d358:	4c06      	ldr	r4, [pc, #24]	; (40d374 <_close_r+0x20>)
  40d35a:	4605      	mov	r5, r0
  40d35c:	4608      	mov	r0, r1
  40d35e:	6023      	str	r3, [r4, #0]
  40d360:	f7f6 f81a 	bl	403398 <_close>
  40d364:	1c43      	adds	r3, r0, #1
  40d366:	d000      	beq.n	40d36a <_close_r+0x16>
  40d368:	bd38      	pop	{r3, r4, r5, pc}
  40d36a:	6823      	ldr	r3, [r4, #0]
  40d36c:	2b00      	cmp	r3, #0
  40d36e:	d0fb      	beq.n	40d368 <_close_r+0x14>
  40d370:	602b      	str	r3, [r5, #0]
  40d372:	bd38      	pop	{r3, r4, r5, pc}
  40d374:	2040c440 	.word	0x2040c440

0040d378 <_fclose_r>:
  40d378:	2900      	cmp	r1, #0
  40d37a:	d03d      	beq.n	40d3f8 <_fclose_r+0x80>
  40d37c:	b570      	push	{r4, r5, r6, lr}
  40d37e:	4605      	mov	r5, r0
  40d380:	460c      	mov	r4, r1
  40d382:	b108      	cbz	r0, 40d388 <_fclose_r+0x10>
  40d384:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d386:	b37b      	cbz	r3, 40d3e8 <_fclose_r+0x70>
  40d388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40d38c:	b90b      	cbnz	r3, 40d392 <_fclose_r+0x1a>
  40d38e:	2000      	movs	r0, #0
  40d390:	bd70      	pop	{r4, r5, r6, pc}
  40d392:	4628      	mov	r0, r5
  40d394:	4621      	mov	r1, r4
  40d396:	f7fe facf 	bl	40b938 <__sflush_r>
  40d39a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d39c:	4606      	mov	r6, r0
  40d39e:	b133      	cbz	r3, 40d3ae <_fclose_r+0x36>
  40d3a0:	4628      	mov	r0, r5
  40d3a2:	69e1      	ldr	r1, [r4, #28]
  40d3a4:	4798      	blx	r3
  40d3a6:	2800      	cmp	r0, #0
  40d3a8:	bfb8      	it	lt
  40d3aa:	f04f 36ff 	movlt.w	r6, #4294967295
  40d3ae:	89a3      	ldrh	r3, [r4, #12]
  40d3b0:	061b      	lsls	r3, r3, #24
  40d3b2:	d41c      	bmi.n	40d3ee <_fclose_r+0x76>
  40d3b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40d3b6:	b141      	cbz	r1, 40d3ca <_fclose_r+0x52>
  40d3b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40d3bc:	4299      	cmp	r1, r3
  40d3be:	d002      	beq.n	40d3c6 <_fclose_r+0x4e>
  40d3c0:	4628      	mov	r0, r5
  40d3c2:	f7fe fccf 	bl	40bd64 <_free_r>
  40d3c6:	2300      	movs	r3, #0
  40d3c8:	6323      	str	r3, [r4, #48]	; 0x30
  40d3ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40d3cc:	b121      	cbz	r1, 40d3d8 <_fclose_r+0x60>
  40d3ce:	4628      	mov	r0, r5
  40d3d0:	f7fe fcc8 	bl	40bd64 <_free_r>
  40d3d4:	2300      	movs	r3, #0
  40d3d6:	6463      	str	r3, [r4, #68]	; 0x44
  40d3d8:	f7fe fbf2 	bl	40bbc0 <__sfp_lock_acquire>
  40d3dc:	2300      	movs	r3, #0
  40d3de:	81a3      	strh	r3, [r4, #12]
  40d3e0:	f7fe fbf0 	bl	40bbc4 <__sfp_lock_release>
  40d3e4:	4630      	mov	r0, r6
  40d3e6:	bd70      	pop	{r4, r5, r6, pc}
  40d3e8:	f7fe fbe4 	bl	40bbb4 <__sinit>
  40d3ec:	e7cc      	b.n	40d388 <_fclose_r+0x10>
  40d3ee:	4628      	mov	r0, r5
  40d3f0:	6921      	ldr	r1, [r4, #16]
  40d3f2:	f7fe fcb7 	bl	40bd64 <_free_r>
  40d3f6:	e7dd      	b.n	40d3b4 <_fclose_r+0x3c>
  40d3f8:	2000      	movs	r0, #0
  40d3fa:	4770      	bx	lr

0040d3fc <_fstat_r>:
  40d3fc:	b538      	push	{r3, r4, r5, lr}
  40d3fe:	2300      	movs	r3, #0
  40d400:	4c07      	ldr	r4, [pc, #28]	; (40d420 <_fstat_r+0x24>)
  40d402:	4605      	mov	r5, r0
  40d404:	4608      	mov	r0, r1
  40d406:	4611      	mov	r1, r2
  40d408:	6023      	str	r3, [r4, #0]
  40d40a:	f7f5 ffd1 	bl	4033b0 <_fstat>
  40d40e:	1c43      	adds	r3, r0, #1
  40d410:	d000      	beq.n	40d414 <_fstat_r+0x18>
  40d412:	bd38      	pop	{r3, r4, r5, pc}
  40d414:	6823      	ldr	r3, [r4, #0]
  40d416:	2b00      	cmp	r3, #0
  40d418:	d0fb      	beq.n	40d412 <_fstat_r+0x16>
  40d41a:	602b      	str	r3, [r5, #0]
  40d41c:	bd38      	pop	{r3, r4, r5, pc}
  40d41e:	bf00      	nop
  40d420:	2040c440 	.word	0x2040c440

0040d424 <_isatty_r>:
  40d424:	b538      	push	{r3, r4, r5, lr}
  40d426:	2300      	movs	r3, #0
  40d428:	4c06      	ldr	r4, [pc, #24]	; (40d444 <_isatty_r+0x20>)
  40d42a:	4605      	mov	r5, r0
  40d42c:	4608      	mov	r0, r1
  40d42e:	6023      	str	r3, [r4, #0]
  40d430:	f7f5 ffc4 	bl	4033bc <_isatty>
  40d434:	1c43      	adds	r3, r0, #1
  40d436:	d000      	beq.n	40d43a <_isatty_r+0x16>
  40d438:	bd38      	pop	{r3, r4, r5, pc}
  40d43a:	6823      	ldr	r3, [r4, #0]
  40d43c:	2b00      	cmp	r3, #0
  40d43e:	d0fb      	beq.n	40d438 <_isatty_r+0x14>
  40d440:	602b      	str	r3, [r5, #0]
  40d442:	bd38      	pop	{r3, r4, r5, pc}
  40d444:	2040c440 	.word	0x2040c440

0040d448 <_lseek_r>:
  40d448:	b570      	push	{r4, r5, r6, lr}
  40d44a:	4c08      	ldr	r4, [pc, #32]	; (40d46c <_lseek_r+0x24>)
  40d44c:	2500      	movs	r5, #0
  40d44e:	4606      	mov	r6, r0
  40d450:	4608      	mov	r0, r1
  40d452:	4611      	mov	r1, r2
  40d454:	461a      	mov	r2, r3
  40d456:	6025      	str	r5, [r4, #0]
  40d458:	f7f5 ffb2 	bl	4033c0 <_lseek>
  40d45c:	1c43      	adds	r3, r0, #1
  40d45e:	d000      	beq.n	40d462 <_lseek_r+0x1a>
  40d460:	bd70      	pop	{r4, r5, r6, pc}
  40d462:	6823      	ldr	r3, [r4, #0]
  40d464:	2b00      	cmp	r3, #0
  40d466:	d0fb      	beq.n	40d460 <_lseek_r+0x18>
  40d468:	6033      	str	r3, [r6, #0]
  40d46a:	bd70      	pop	{r4, r5, r6, pc}
  40d46c:	2040c440 	.word	0x2040c440

0040d470 <_read_r>:
  40d470:	b570      	push	{r4, r5, r6, lr}
  40d472:	4c08      	ldr	r4, [pc, #32]	; (40d494 <_read_r+0x24>)
  40d474:	2500      	movs	r5, #0
  40d476:	4606      	mov	r6, r0
  40d478:	4608      	mov	r0, r1
  40d47a:	4611      	mov	r1, r2
  40d47c:	461a      	mov	r2, r3
  40d47e:	6025      	str	r5, [r4, #0]
  40d480:	f7f5 ff92 	bl	4033a8 <_read>
  40d484:	1c43      	adds	r3, r0, #1
  40d486:	d000      	beq.n	40d48a <_read_r+0x1a>
  40d488:	bd70      	pop	{r4, r5, r6, pc}
  40d48a:	6823      	ldr	r3, [r4, #0]
  40d48c:	2b00      	cmp	r3, #0
  40d48e:	d0fb      	beq.n	40d488 <_read_r+0x18>
  40d490:	6033      	str	r3, [r6, #0]
  40d492:	bd70      	pop	{r4, r5, r6, pc}
  40d494:	2040c440 	.word	0x2040c440

0040d498 <__aeabi_uldivmod>:
  40d498:	b953      	cbnz	r3, 40d4b0 <__aeabi_uldivmod+0x18>
  40d49a:	b94a      	cbnz	r2, 40d4b0 <__aeabi_uldivmod+0x18>
  40d49c:	2900      	cmp	r1, #0
  40d49e:	bf08      	it	eq
  40d4a0:	2800      	cmpeq	r0, #0
  40d4a2:	bf1c      	itt	ne
  40d4a4:	f04f 31ff 	movne.w	r1, #4294967295
  40d4a8:	f04f 30ff 	movne.w	r0, #4294967295
  40d4ac:	f7f9 bde4 	b.w	407078 <__aeabi_idiv0>
  40d4b0:	b082      	sub	sp, #8
  40d4b2:	46ec      	mov	ip, sp
  40d4b4:	e92d 5000 	stmdb	sp!, {ip, lr}
  40d4b8:	f000 f81e 	bl	40d4f8 <__gnu_uldivmod_helper>
  40d4bc:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d4c0:	b002      	add	sp, #8
  40d4c2:	bc0c      	pop	{r2, r3}
  40d4c4:	4770      	bx	lr
  40d4c6:	bf00      	nop

0040d4c8 <__gnu_ldivmod_helper>:
  40d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d4cc:	4690      	mov	r8, r2
  40d4ce:	4606      	mov	r6, r0
  40d4d0:	460f      	mov	r7, r1
  40d4d2:	461d      	mov	r5, r3
  40d4d4:	9c06      	ldr	r4, [sp, #24]
  40d4d6:	f000 f827 	bl	40d528 <__divdi3>
  40d4da:	fb08 fc01 	mul.w	ip, r8, r1
  40d4de:	4686      	mov	lr, r0
  40d4e0:	fba8 2300 	umull	r2, r3, r8, r0
  40d4e4:	fb00 c505 	mla	r5, r0, r5, ip
  40d4e8:	1ab2      	subs	r2, r6, r2
  40d4ea:	442b      	add	r3, r5
  40d4ec:	eb67 0303 	sbc.w	r3, r7, r3
  40d4f0:	e9c4 2300 	strd	r2, r3, [r4]
  40d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040d4f8 <__gnu_uldivmod_helper>:
  40d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d4fc:	461d      	mov	r5, r3
  40d4fe:	4617      	mov	r7, r2
  40d500:	4680      	mov	r8, r0
  40d502:	4689      	mov	r9, r1
  40d504:	9e08      	ldr	r6, [sp, #32]
  40d506:	f000 f951 	bl	40d7ac <__udivdi3>
  40d50a:	fb00 f305 	mul.w	r3, r0, r5
  40d50e:	fba0 4507 	umull	r4, r5, r0, r7
  40d512:	fb07 3701 	mla	r7, r7, r1, r3
  40d516:	ebb8 0404 	subs.w	r4, r8, r4
  40d51a:	443d      	add	r5, r7
  40d51c:	eb69 0505 	sbc.w	r5, r9, r5
  40d520:	e9c6 4500 	strd	r4, r5, [r6]
  40d524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040d528 <__divdi3>:
  40d528:	2900      	cmp	r1, #0
  40d52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d52e:	f2c0 80a2 	blt.w	40d676 <__divdi3+0x14e>
  40d532:	2600      	movs	r6, #0
  40d534:	2b00      	cmp	r3, #0
  40d536:	f2c0 8098 	blt.w	40d66a <__divdi3+0x142>
  40d53a:	468c      	mov	ip, r1
  40d53c:	4690      	mov	r8, r2
  40d53e:	469e      	mov	lr, r3
  40d540:	4615      	mov	r5, r2
  40d542:	4604      	mov	r4, r0
  40d544:	460f      	mov	r7, r1
  40d546:	bbcb      	cbnz	r3, 40d5bc <__divdi3+0x94>
  40d548:	428a      	cmp	r2, r1
  40d54a:	d956      	bls.n	40d5fa <__divdi3+0xd2>
  40d54c:	fab2 f382 	clz	r3, r2
  40d550:	b13b      	cbz	r3, 40d562 <__divdi3+0x3a>
  40d552:	f1c3 0220 	rsb	r2, r3, #32
  40d556:	409f      	lsls	r7, r3
  40d558:	409d      	lsls	r5, r3
  40d55a:	409c      	lsls	r4, r3
  40d55c:	fa20 f202 	lsr.w	r2, r0, r2
  40d560:	4317      	orrs	r7, r2
  40d562:	0c28      	lsrs	r0, r5, #16
  40d564:	0c22      	lsrs	r2, r4, #16
  40d566:	fa1f fe85 	uxth.w	lr, r5
  40d56a:	fbb7 f1f0 	udiv	r1, r7, r0
  40d56e:	fb00 7711 	mls	r7, r0, r1, r7
  40d572:	fb0e f301 	mul.w	r3, lr, r1
  40d576:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40d57a:	42bb      	cmp	r3, r7
  40d57c:	d907      	bls.n	40d58e <__divdi3+0x66>
  40d57e:	197f      	adds	r7, r7, r5
  40d580:	f080 8101 	bcs.w	40d786 <__divdi3+0x25e>
  40d584:	42bb      	cmp	r3, r7
  40d586:	f240 80fe 	bls.w	40d786 <__divdi3+0x25e>
  40d58a:	3902      	subs	r1, #2
  40d58c:	442f      	add	r7, r5
  40d58e:	1aff      	subs	r7, r7, r3
  40d590:	b2a4      	uxth	r4, r4
  40d592:	fbb7 f3f0 	udiv	r3, r7, r0
  40d596:	fb00 7713 	mls	r7, r0, r3, r7
  40d59a:	fb0e fe03 	mul.w	lr, lr, r3
  40d59e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40d5a2:	45be      	cmp	lr, r7
  40d5a4:	d906      	bls.n	40d5b4 <__divdi3+0x8c>
  40d5a6:	197f      	adds	r7, r7, r5
  40d5a8:	f080 80eb 	bcs.w	40d782 <__divdi3+0x25a>
  40d5ac:	45be      	cmp	lr, r7
  40d5ae:	f240 80e8 	bls.w	40d782 <__divdi3+0x25a>
  40d5b2:	3b02      	subs	r3, #2
  40d5b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40d5b8:	2200      	movs	r2, #0
  40d5ba:	e003      	b.n	40d5c4 <__divdi3+0x9c>
  40d5bc:	428b      	cmp	r3, r1
  40d5be:	d90f      	bls.n	40d5e0 <__divdi3+0xb8>
  40d5c0:	2200      	movs	r2, #0
  40d5c2:	4613      	mov	r3, r2
  40d5c4:	1c34      	adds	r4, r6, #0
  40d5c6:	f04f 0500 	mov.w	r5, #0
  40d5ca:	bf18      	it	ne
  40d5cc:	2401      	movne	r4, #1
  40d5ce:	4260      	negs	r0, r4
  40d5d0:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40d5d4:	4058      	eors	r0, r3
  40d5d6:	4051      	eors	r1, r2
  40d5d8:	1900      	adds	r0, r0, r4
  40d5da:	4169      	adcs	r1, r5
  40d5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d5e0:	fab3 f283 	clz	r2, r3
  40d5e4:	2a00      	cmp	r2, #0
  40d5e6:	f040 8083 	bne.w	40d6f0 <__divdi3+0x1c8>
  40d5ea:	4580      	cmp	r8, r0
  40d5ec:	f240 80cd 	bls.w	40d78a <__divdi3+0x262>
  40d5f0:	428b      	cmp	r3, r1
  40d5f2:	f0c0 80ca 	bcc.w	40d78a <__divdi3+0x262>
  40d5f6:	4613      	mov	r3, r2
  40d5f8:	e7e4      	b.n	40d5c4 <__divdi3+0x9c>
  40d5fa:	b912      	cbnz	r2, 40d602 <__divdi3+0xda>
  40d5fc:	2301      	movs	r3, #1
  40d5fe:	fbb3 f5f2 	udiv	r5, r3, r2
  40d602:	fab5 f285 	clz	r2, r5
  40d606:	2a00      	cmp	r2, #0
  40d608:	d13b      	bne.n	40d682 <__divdi3+0x15a>
  40d60a:	1b78      	subs	r0, r7, r5
  40d60c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40d610:	fa1f fc85 	uxth.w	ip, r5
  40d614:	2201      	movs	r2, #1
  40d616:	0c21      	lsrs	r1, r4, #16
  40d618:	fbb0 f8fe 	udiv	r8, r0, lr
  40d61c:	fb0e 0018 	mls	r0, lr, r8, r0
  40d620:	fb0c f308 	mul.w	r3, ip, r8
  40d624:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40d628:	42bb      	cmp	r3, r7
  40d62a:	d908      	bls.n	40d63e <__divdi3+0x116>
  40d62c:	197f      	adds	r7, r7, r5
  40d62e:	f080 80b0 	bcs.w	40d792 <__divdi3+0x26a>
  40d632:	42bb      	cmp	r3, r7
  40d634:	f240 80ad 	bls.w	40d792 <__divdi3+0x26a>
  40d638:	f1a8 0802 	sub.w	r8, r8, #2
  40d63c:	442f      	add	r7, r5
  40d63e:	1aff      	subs	r7, r7, r3
  40d640:	b2a4      	uxth	r4, r4
  40d642:	fbb7 f3fe 	udiv	r3, r7, lr
  40d646:	fb0e 7713 	mls	r7, lr, r3, r7
  40d64a:	fb0c fc03 	mul.w	ip, ip, r3
  40d64e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40d652:	45bc      	cmp	ip, r7
  40d654:	d906      	bls.n	40d664 <__divdi3+0x13c>
  40d656:	197f      	adds	r7, r7, r5
  40d658:	f080 8099 	bcs.w	40d78e <__divdi3+0x266>
  40d65c:	45bc      	cmp	ip, r7
  40d65e:	f240 8096 	bls.w	40d78e <__divdi3+0x266>
  40d662:	3b02      	subs	r3, #2
  40d664:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40d668:	e7ac      	b.n	40d5c4 <__divdi3+0x9c>
  40d66a:	4252      	negs	r2, r2
  40d66c:	ea6f 0606 	mvn.w	r6, r6
  40d670:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40d674:	e761      	b.n	40d53a <__divdi3+0x12>
  40d676:	4240      	negs	r0, r0
  40d678:	f04f 36ff 	mov.w	r6, #4294967295
  40d67c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40d680:	e758      	b.n	40d534 <__divdi3+0xc>
  40d682:	4095      	lsls	r5, r2
  40d684:	f1c2 0120 	rsb	r1, r2, #32
  40d688:	fa07 f302 	lsl.w	r3, r7, r2
  40d68c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40d690:	40cf      	lsrs	r7, r1
  40d692:	fa24 f101 	lsr.w	r1, r4, r1
  40d696:	4094      	lsls	r4, r2
  40d698:	fa1f fc85 	uxth.w	ip, r5
  40d69c:	4319      	orrs	r1, r3
  40d69e:	fbb7 f2fe 	udiv	r2, r7, lr
  40d6a2:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40d6a6:	fb0e 7712 	mls	r7, lr, r2, r7
  40d6aa:	fb0c f302 	mul.w	r3, ip, r2
  40d6ae:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40d6b2:	42bb      	cmp	r3, r7
  40d6b4:	d905      	bls.n	40d6c2 <__divdi3+0x19a>
  40d6b6:	197f      	adds	r7, r7, r5
  40d6b8:	d271      	bcs.n	40d79e <__divdi3+0x276>
  40d6ba:	42bb      	cmp	r3, r7
  40d6bc:	d96f      	bls.n	40d79e <__divdi3+0x276>
  40d6be:	3a02      	subs	r2, #2
  40d6c0:	442f      	add	r7, r5
  40d6c2:	1aff      	subs	r7, r7, r3
  40d6c4:	b289      	uxth	r1, r1
  40d6c6:	fbb7 f8fe 	udiv	r8, r7, lr
  40d6ca:	fb0e 7718 	mls	r7, lr, r8, r7
  40d6ce:	fb0c f008 	mul.w	r0, ip, r8
  40d6d2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40d6d6:	4298      	cmp	r0, r3
  40d6d8:	d906      	bls.n	40d6e8 <__divdi3+0x1c0>
  40d6da:	195b      	adds	r3, r3, r5
  40d6dc:	d261      	bcs.n	40d7a2 <__divdi3+0x27a>
  40d6de:	4298      	cmp	r0, r3
  40d6e0:	d95f      	bls.n	40d7a2 <__divdi3+0x27a>
  40d6e2:	f1a8 0802 	sub.w	r8, r8, #2
  40d6e6:	442b      	add	r3, r5
  40d6e8:	1a18      	subs	r0, r3, r0
  40d6ea:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40d6ee:	e792      	b.n	40d616 <__divdi3+0xee>
  40d6f0:	f1c2 0720 	rsb	r7, r2, #32
  40d6f4:	fa03 fe02 	lsl.w	lr, r3, r2
  40d6f8:	fa08 f502 	lsl.w	r5, r8, r2
  40d6fc:	4091      	lsls	r1, r2
  40d6fe:	fa28 f307 	lsr.w	r3, r8, r7
  40d702:	fa2c fc07 	lsr.w	ip, ip, r7
  40d706:	40f8      	lsrs	r0, r7
  40d708:	ea43 0e0e 	orr.w	lr, r3, lr
  40d70c:	4308      	orrs	r0, r1
  40d70e:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40d712:	0c07      	lsrs	r7, r0, #16
  40d714:	fa1f fa8e 	uxth.w	sl, lr
  40d718:	fbbc f9f8 	udiv	r9, ip, r8
  40d71c:	fb08 cc19 	mls	ip, r8, r9, ip
  40d720:	fb0a f109 	mul.w	r1, sl, r9
  40d724:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40d728:	4561      	cmp	r1, ip
  40d72a:	d907      	bls.n	40d73c <__divdi3+0x214>
  40d72c:	eb1c 0c0e 	adds.w	ip, ip, lr
  40d730:	d232      	bcs.n	40d798 <__divdi3+0x270>
  40d732:	4561      	cmp	r1, ip
  40d734:	d930      	bls.n	40d798 <__divdi3+0x270>
  40d736:	f1a9 0902 	sub.w	r9, r9, #2
  40d73a:	44f4      	add	ip, lr
  40d73c:	ebc1 0c0c 	rsb	ip, r1, ip
  40d740:	b280      	uxth	r0, r0
  40d742:	fbbc f3f8 	udiv	r3, ip, r8
  40d746:	fb08 cc13 	mls	ip, r8, r3, ip
  40d74a:	fb0a fa03 	mul.w	sl, sl, r3
  40d74e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40d752:	458a      	cmp	sl, r1
  40d754:	d906      	bls.n	40d764 <__divdi3+0x23c>
  40d756:	eb11 010e 	adds.w	r1, r1, lr
  40d75a:	d225      	bcs.n	40d7a8 <__divdi3+0x280>
  40d75c:	458a      	cmp	sl, r1
  40d75e:	d923      	bls.n	40d7a8 <__divdi3+0x280>
  40d760:	3b02      	subs	r3, #2
  40d762:	4471      	add	r1, lr
  40d764:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40d768:	ebca 0101 	rsb	r1, sl, r1
  40d76c:	fba3 8905 	umull	r8, r9, r3, r5
  40d770:	4549      	cmp	r1, r9
  40d772:	d303      	bcc.n	40d77c <__divdi3+0x254>
  40d774:	d103      	bne.n	40d77e <__divdi3+0x256>
  40d776:	4094      	lsls	r4, r2
  40d778:	4544      	cmp	r4, r8
  40d77a:	d200      	bcs.n	40d77e <__divdi3+0x256>
  40d77c:	3b01      	subs	r3, #1
  40d77e:	2200      	movs	r2, #0
  40d780:	e720      	b.n	40d5c4 <__divdi3+0x9c>
  40d782:	3b01      	subs	r3, #1
  40d784:	e716      	b.n	40d5b4 <__divdi3+0x8c>
  40d786:	3901      	subs	r1, #1
  40d788:	e701      	b.n	40d58e <__divdi3+0x66>
  40d78a:	2301      	movs	r3, #1
  40d78c:	e71a      	b.n	40d5c4 <__divdi3+0x9c>
  40d78e:	3b01      	subs	r3, #1
  40d790:	e768      	b.n	40d664 <__divdi3+0x13c>
  40d792:	f108 38ff 	add.w	r8, r8, #4294967295
  40d796:	e752      	b.n	40d63e <__divdi3+0x116>
  40d798:	f109 39ff 	add.w	r9, r9, #4294967295
  40d79c:	e7ce      	b.n	40d73c <__divdi3+0x214>
  40d79e:	3a01      	subs	r2, #1
  40d7a0:	e78f      	b.n	40d6c2 <__divdi3+0x19a>
  40d7a2:	f108 38ff 	add.w	r8, r8, #4294967295
  40d7a6:	e79f      	b.n	40d6e8 <__divdi3+0x1c0>
  40d7a8:	3b01      	subs	r3, #1
  40d7aa:	e7db      	b.n	40d764 <__divdi3+0x23c>

0040d7ac <__udivdi3>:
  40d7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d7b0:	2b00      	cmp	r3, #0
  40d7b2:	d140      	bne.n	40d836 <__udivdi3+0x8a>
  40d7b4:	428a      	cmp	r2, r1
  40d7b6:	4604      	mov	r4, r0
  40d7b8:	4615      	mov	r5, r2
  40d7ba:	d94a      	bls.n	40d852 <__udivdi3+0xa6>
  40d7bc:	fab2 f382 	clz	r3, r2
  40d7c0:	460f      	mov	r7, r1
  40d7c2:	b14b      	cbz	r3, 40d7d8 <__udivdi3+0x2c>
  40d7c4:	f1c3 0620 	rsb	r6, r3, #32
  40d7c8:	4099      	lsls	r1, r3
  40d7ca:	fa00 f403 	lsl.w	r4, r0, r3
  40d7ce:	fa02 f503 	lsl.w	r5, r2, r3
  40d7d2:	40f0      	lsrs	r0, r6
  40d7d4:	ea40 0701 	orr.w	r7, r0, r1
  40d7d8:	0c29      	lsrs	r1, r5, #16
  40d7da:	0c26      	lsrs	r6, r4, #16
  40d7dc:	fa1f fe85 	uxth.w	lr, r5
  40d7e0:	fbb7 f0f1 	udiv	r0, r7, r1
  40d7e4:	fb01 7710 	mls	r7, r1, r0, r7
  40d7e8:	fb0e f200 	mul.w	r2, lr, r0
  40d7ec:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40d7f0:	429a      	cmp	r2, r3
  40d7f2:	d907      	bls.n	40d804 <__udivdi3+0x58>
  40d7f4:	195b      	adds	r3, r3, r5
  40d7f6:	f080 80ea 	bcs.w	40d9ce <__udivdi3+0x222>
  40d7fa:	429a      	cmp	r2, r3
  40d7fc:	f240 80e7 	bls.w	40d9ce <__udivdi3+0x222>
  40d800:	3802      	subs	r0, #2
  40d802:	442b      	add	r3, r5
  40d804:	1a9a      	subs	r2, r3, r2
  40d806:	b2a4      	uxth	r4, r4
  40d808:	fbb2 f3f1 	udiv	r3, r2, r1
  40d80c:	fb01 2213 	mls	r2, r1, r3, r2
  40d810:	fb0e fe03 	mul.w	lr, lr, r3
  40d814:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40d818:	4596      	cmp	lr, r2
  40d81a:	d906      	bls.n	40d82a <__udivdi3+0x7e>
  40d81c:	1952      	adds	r2, r2, r5
  40d81e:	f080 80da 	bcs.w	40d9d6 <__udivdi3+0x22a>
  40d822:	4596      	cmp	lr, r2
  40d824:	f240 80d7 	bls.w	40d9d6 <__udivdi3+0x22a>
  40d828:	3b02      	subs	r3, #2
  40d82a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40d82e:	2600      	movs	r6, #0
  40d830:	4631      	mov	r1, r6
  40d832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d836:	428b      	cmp	r3, r1
  40d838:	d844      	bhi.n	40d8c4 <__udivdi3+0x118>
  40d83a:	fab3 f683 	clz	r6, r3
  40d83e:	2e00      	cmp	r6, #0
  40d840:	d145      	bne.n	40d8ce <__udivdi3+0x122>
  40d842:	4282      	cmp	r2, r0
  40d844:	f240 80bf 	bls.w	40d9c6 <__udivdi3+0x21a>
  40d848:	428b      	cmp	r3, r1
  40d84a:	f0c0 80bc 	bcc.w	40d9c6 <__udivdi3+0x21a>
  40d84e:	4630      	mov	r0, r6
  40d850:	e7ee      	b.n	40d830 <__udivdi3+0x84>
  40d852:	b912      	cbnz	r2, 40d85a <__udivdi3+0xae>
  40d854:	2501      	movs	r5, #1
  40d856:	fbb5 f5f2 	udiv	r5, r5, r2
  40d85a:	fab5 f285 	clz	r2, r5
  40d85e:	2a00      	cmp	r2, #0
  40d860:	d17b      	bne.n	40d95a <__udivdi3+0x1ae>
  40d862:	1b4a      	subs	r2, r1, r5
  40d864:	0c2f      	lsrs	r7, r5, #16
  40d866:	fa1f fe85 	uxth.w	lr, r5
  40d86a:	2601      	movs	r6, #1
  40d86c:	0c23      	lsrs	r3, r4, #16
  40d86e:	fbb2 f0f7 	udiv	r0, r2, r7
  40d872:	fb07 2210 	mls	r2, r7, r0, r2
  40d876:	fb0e fc00 	mul.w	ip, lr, r0
  40d87a:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40d87e:	458c      	cmp	ip, r1
  40d880:	d907      	bls.n	40d892 <__udivdi3+0xe6>
  40d882:	1949      	adds	r1, r1, r5
  40d884:	f080 80a1 	bcs.w	40d9ca <__udivdi3+0x21e>
  40d888:	458c      	cmp	ip, r1
  40d88a:	f240 809e 	bls.w	40d9ca <__udivdi3+0x21e>
  40d88e:	3802      	subs	r0, #2
  40d890:	4429      	add	r1, r5
  40d892:	ebcc 0101 	rsb	r1, ip, r1
  40d896:	b2a4      	uxth	r4, r4
  40d898:	fbb1 f3f7 	udiv	r3, r1, r7
  40d89c:	fb07 1113 	mls	r1, r7, r3, r1
  40d8a0:	fb0e fe03 	mul.w	lr, lr, r3
  40d8a4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40d8a8:	45a6      	cmp	lr, r4
  40d8aa:	d906      	bls.n	40d8ba <__udivdi3+0x10e>
  40d8ac:	1964      	adds	r4, r4, r5
  40d8ae:	f080 8090 	bcs.w	40d9d2 <__udivdi3+0x226>
  40d8b2:	45a6      	cmp	lr, r4
  40d8b4:	f240 808d 	bls.w	40d9d2 <__udivdi3+0x226>
  40d8b8:	3b02      	subs	r3, #2
  40d8ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40d8be:	4631      	mov	r1, r6
  40d8c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d8c4:	2600      	movs	r6, #0
  40d8c6:	4630      	mov	r0, r6
  40d8c8:	4631      	mov	r1, r6
  40d8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d8ce:	f1c6 0520 	rsb	r5, r6, #32
  40d8d2:	40b3      	lsls	r3, r6
  40d8d4:	fa02 f706 	lsl.w	r7, r2, r6
  40d8d8:	fa01 f406 	lsl.w	r4, r1, r6
  40d8dc:	40ea      	lsrs	r2, r5
  40d8de:	40e9      	lsrs	r1, r5
  40d8e0:	fa20 f505 	lsr.w	r5, r0, r5
  40d8e4:	431a      	orrs	r2, r3
  40d8e6:	4325      	orrs	r5, r4
  40d8e8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40d8ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40d8f0:	b293      	uxth	r3, r2
  40d8f2:	fbb1 f8fc 	udiv	r8, r1, ip
  40d8f6:	fb0c 1118 	mls	r1, ip, r8, r1
  40d8fa:	fb03 f408 	mul.w	r4, r3, r8
  40d8fe:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40d902:	428c      	cmp	r4, r1
  40d904:	d906      	bls.n	40d914 <__udivdi3+0x168>
  40d906:	1889      	adds	r1, r1, r2
  40d908:	d269      	bcs.n	40d9de <__udivdi3+0x232>
  40d90a:	428c      	cmp	r4, r1
  40d90c:	d967      	bls.n	40d9de <__udivdi3+0x232>
  40d90e:	f1a8 0802 	sub.w	r8, r8, #2
  40d912:	4411      	add	r1, r2
  40d914:	1b09      	subs	r1, r1, r4
  40d916:	b2ad      	uxth	r5, r5
  40d918:	fbb1 f4fc 	udiv	r4, r1, ip
  40d91c:	fb0c 1114 	mls	r1, ip, r4, r1
  40d920:	fb03 fe04 	mul.w	lr, r3, r4
  40d924:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40d928:	459e      	cmp	lr, r3
  40d92a:	d905      	bls.n	40d938 <__udivdi3+0x18c>
  40d92c:	189b      	adds	r3, r3, r2
  40d92e:	d254      	bcs.n	40d9da <__udivdi3+0x22e>
  40d930:	459e      	cmp	lr, r3
  40d932:	d952      	bls.n	40d9da <__udivdi3+0x22e>
  40d934:	3c02      	subs	r4, #2
  40d936:	4413      	add	r3, r2
  40d938:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40d93c:	ebce 0303 	rsb	r3, lr, r3
  40d940:	fba4 8907 	umull	r8, r9, r4, r7
  40d944:	454b      	cmp	r3, r9
  40d946:	d303      	bcc.n	40d950 <__udivdi3+0x1a4>
  40d948:	d151      	bne.n	40d9ee <__udivdi3+0x242>
  40d94a:	40b0      	lsls	r0, r6
  40d94c:	4540      	cmp	r0, r8
  40d94e:	d24e      	bcs.n	40d9ee <__udivdi3+0x242>
  40d950:	2600      	movs	r6, #0
  40d952:	1e60      	subs	r0, r4, #1
  40d954:	4631      	mov	r1, r6
  40d956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d95a:	f1c2 0620 	rsb	r6, r2, #32
  40d95e:	4095      	lsls	r5, r2
  40d960:	fa01 f302 	lsl.w	r3, r1, r2
  40d964:	fa00 f402 	lsl.w	r4, r0, r2
  40d968:	0c2f      	lsrs	r7, r5, #16
  40d96a:	40f1      	lsrs	r1, r6
  40d96c:	40f0      	lsrs	r0, r6
  40d96e:	fa1f fe85 	uxth.w	lr, r5
  40d972:	fbb1 f6f7 	udiv	r6, r1, r7
  40d976:	4318      	orrs	r0, r3
  40d978:	fb07 1116 	mls	r1, r7, r6, r1
  40d97c:	fb0e f206 	mul.w	r2, lr, r6
  40d980:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40d984:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40d988:	429a      	cmp	r2, r3
  40d98a:	d905      	bls.n	40d998 <__udivdi3+0x1ec>
  40d98c:	195b      	adds	r3, r3, r5
  40d98e:	d229      	bcs.n	40d9e4 <__udivdi3+0x238>
  40d990:	429a      	cmp	r2, r3
  40d992:	d927      	bls.n	40d9e4 <__udivdi3+0x238>
  40d994:	3e02      	subs	r6, #2
  40d996:	442b      	add	r3, r5
  40d998:	1a9b      	subs	r3, r3, r2
  40d99a:	b280      	uxth	r0, r0
  40d99c:	fbb3 fcf7 	udiv	ip, r3, r7
  40d9a0:	fb07 331c 	mls	r3, r7, ip, r3
  40d9a4:	fb0e f10c 	mul.w	r1, lr, ip
  40d9a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40d9ac:	4299      	cmp	r1, r3
  40d9ae:	d906      	bls.n	40d9be <__udivdi3+0x212>
  40d9b0:	195b      	adds	r3, r3, r5
  40d9b2:	d219      	bcs.n	40d9e8 <__udivdi3+0x23c>
  40d9b4:	4299      	cmp	r1, r3
  40d9b6:	d917      	bls.n	40d9e8 <__udivdi3+0x23c>
  40d9b8:	f1ac 0c02 	sub.w	ip, ip, #2
  40d9bc:	442b      	add	r3, r5
  40d9be:	1a5a      	subs	r2, r3, r1
  40d9c0:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40d9c4:	e752      	b.n	40d86c <__udivdi3+0xc0>
  40d9c6:	2001      	movs	r0, #1
  40d9c8:	e732      	b.n	40d830 <__udivdi3+0x84>
  40d9ca:	3801      	subs	r0, #1
  40d9cc:	e761      	b.n	40d892 <__udivdi3+0xe6>
  40d9ce:	3801      	subs	r0, #1
  40d9d0:	e718      	b.n	40d804 <__udivdi3+0x58>
  40d9d2:	3b01      	subs	r3, #1
  40d9d4:	e771      	b.n	40d8ba <__udivdi3+0x10e>
  40d9d6:	3b01      	subs	r3, #1
  40d9d8:	e727      	b.n	40d82a <__udivdi3+0x7e>
  40d9da:	3c01      	subs	r4, #1
  40d9dc:	e7ac      	b.n	40d938 <__udivdi3+0x18c>
  40d9de:	f108 38ff 	add.w	r8, r8, #4294967295
  40d9e2:	e797      	b.n	40d914 <__udivdi3+0x168>
  40d9e4:	3e01      	subs	r6, #1
  40d9e6:	e7d7      	b.n	40d998 <__udivdi3+0x1ec>
  40d9e8:	f10c 3cff 	add.w	ip, ip, #4294967295
  40d9ec:	e7e7      	b.n	40d9be <__udivdi3+0x212>
  40d9ee:	4620      	mov	r0, r4
  40d9f0:	2600      	movs	r6, #0
  40d9f2:	e71d      	b.n	40d830 <__udivdi3+0x84>

0040d9f4 <__func__.8182>:
  40d9f4:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  40da04:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  40da14:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  40da24:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  40da34:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  40da44:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  40da54:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  40da64:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  40da74:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  40da84:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  40da94:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  40daa4:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  40dab4:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  40dac4:	7274 6575 203a 6166 736c 0065 4449 454c     true: false.IDLE
  40dad4:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  40dae4:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  40daf4:	7653 0063 2580 0000 00c0 0000 0800 0000     Svc..%..........
  40db04:	0018 0000 9c4e 0000 a5d9 a955 454d 4c4c     ....N.....U.MELL
  40db14:	5441 4f52 394e 3030 2030 4f42 544f 5320     ATRON9000 BOOT S
  40db24:	5145 4555 434e 0a45 4155 5452 4320 4e4f     EQUENCE.UART CON
  40db34:	4f53 454c 5320 4154 5452 4445 4f20 204e     SOLE STARTED ON 
  40db44:	4155 5452 0a34 6142 6475 6152 6574 203a     UART4.BaudRate: 
  40db54:	3131 3235 3030 420a 7469 3a73 3820 4e0a     115200.Bits: 8.N
  40db64:	206f 7473 706f 6220 7469 2073 000a 0000     o stop bits ....
  40db74:	454c 2044 4e49 5449 4149 494c 415a 4954     LED INITIALIZATI
  40db84:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  40db94:	454c 2044 4e49 5449 4149 494c 415a 4954     LED INITIALIZATI
  40dba4:	4e4f 2d20 4620 4e49 5349 4548 0a44 0000     ON - FINISHED...
  40dbb4:	4157 4354 4448 474f 4920 494e 4954 4c41     WATCHDOG INITIAL
  40dbc4:	5a49 5441 4f49 204e 202d 5453 5241 4554     IZATION - STARTE
  40dbd4:	0a44 0000 4157 4354 4448 474f 4920 494e     D...WATCHDOG INI
  40dbe4:	4954 4c41 5a49 5441 4f49 204e 202d 4946     TIALIZATION - FI
  40dbf4:	494e 4853 4445 000a 4c47 424f 4c41 4920     NISHED..GLOBAL I
  40dc04:	5152 4920 494e 4954 4c41 5a49 5441 4f49     RQ INITIALIZATIO
  40dc14:	204e 202d 5453 5241 4554 0a44 0000 0000     N - STARTED.....
  40dc24:	4c47 424f 4c41 4920 5152 4920 494e 4954     GLOBAL IRQ INITI
  40dc34:	4c41 5a49 5441 4f49 204e 202d 4946 494e     ALIZATION - FINI
  40dc44:	4853 4445 000a 0000 4453 4152 204d 4e49     SHED....SDRAM IN
  40dc54:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  40dc64:	4154 5452 4445 000a 4453 4152 204d 4f43     TARTED..SDRAM CO
  40dc74:	544e 4f52 4c4c 5245 5320 4154 5452 4445     NTROLLER STARTED
  40dc84:	000a 0000 4453 4152 204d 4e49 5449 4149     ....SDRAM INITIA
  40dc94:	494c 415a 4954 4e4f 2d20 4620 4e49 5349     LIZATION - FINIS
  40dca4:	4548 0a44 0000 0000 5754 4849 2053 4e49     HED.....TWIHS IN
  40dcb4:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  40dcc4:	4154 5452 4445 000a 5754 4849 2053 4e49     TARTED..TWIHS IN
  40dcd4:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  40dce4:	4e49 5349 4548 0a44 0000 0000 4553 5652     INISHED.....SERV
  40dcf4:	204f 5244 5649 5245 4920 494e 4954 4c41     O DRIVER INITIAL
  40dd04:	5a49 5441 4f49 204e 202d 5453 5241 4554     IZATION - STARTE
  40dd14:	0a44 0000 4553 5652 204f 5244 5649 5245     D...SERVO DRIVER
  40dd24:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40dd34:	202d 4946 494e 4853 4445 000a 4143 454d     - FINISHED..CAME
  40dd44:	4152 4920 494e 4954 4c41 5a49 5441 4f49     RA INITIALIZATIO
  40dd54:	204e 202d 5453 5241 4554 0a44 0000 0000     N - STARTED.....
  40dd64:	4143 454d 4152 4920 494e 4954 4c41 5a49     CAMERA INITIALIZ
  40dd74:	5441 4f49 204e 202d 4946 494e 4853 4445     ATION - FINISHED
  40dd84:	000a 0000 4957 4552 454c 5353 4d20 444f     ....WIRELESS MOD
  40dd94:	4c55 2045 4e49 5449 4149 494c 415a 4954     ULE INITIALIZATI
  40dda4:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  40ddb4:	4957 4552 454c 5353 4d20 444f 4c55 2045     WIRELESS MODULE 
  40ddc4:	4e49 5449 4149 494c 415a 4954 4e4f 2d20     INITIALIZATION -
  40ddd4:	4620 4e49 5349 4548 0a44 0000 4441 2043      FINISHED...ADC 
  40dde4:	4e49 5449 4149 494c 415a 4954 4e4f 2d20     INITIALIZATION -
  40ddf4:	5320 4154 5452 4445 000a 0000 4441 2043      STARTED....ADC 
  40de04:	4e49 5449 4149 494c 415a 4954 4e4f 2d20     INITIALIZATION -
  40de14:	4620 4e49 5349 4548 0a44 0000 5753 5449      FINISHED...SWIT
  40de24:	4843 4920 494e 4954 4c41 5a49 5441 4f49     CH INITIALIZATIO
  40de34:	204e 202d 5453 5241 4554 0a44 0000 0000     N - STARTED.....
  40de44:	5753 5449 4843 4920 494e 4954 4c41 5a49     SWITCH INITIALIZ
  40de54:	5441 4f49 204e 202d 4946 494e 4853 4445     ATION - FINISHED
  40de64:	000a 0000 4550 4952 4546 4152 204c 5249     ....PERIFERAL IR
  40de74:	2051 4e49 5449 4149 494c 415a 4954 4e4f     Q INITIALIZATION
  40de84:	2d20 5320 4154 5452 4445 000a 4550 4952      - STARTED..PERI
  40de94:	4546 4152 204c 5249 2051 4e49 5449 4149     FERAL IRQ INITIA
  40dea4:	494c 415a 4954 4e4f 2d20 4620 4e49 5349     LIZATION - FINIS
  40deb4:	4548 0a44 0000 0000 7845 7469 6e69 2067     HED.....Exiting 
  40dec4:	6977 6874 7320 6174 7574 2073 6425 0a2e     with status %d..
  40ded4:	0000 0000 454d 204d 5245 4f52 2052 5441     ....MEM ERROR AT
  40dee4:	3020 2578 0a78 0000 4453 4152 204d 5546      0x%x...SDRAM FU
  40def4:	4c4c 4320 4548 4b43 4320 4d4f 4c50 5445     LL CHECK COMPLET
  40df04:	0045 0000 3249 2043 5245 2152 000a 0000     E...I2C ERR!....
  40df14:	7825 202c 0000 0000 4553 5652 204f 5244     %x, ....SERVO DR
  40df24:	5649 5245 5320 5445 5055 4320 4d4f 4c50     IVER SETUP COMPL
  40df34:	4145 4554 000a 0000 4d49 3a47 0000 0000     EATE....IMG:....
  40df44:	453a 444e 4d49 0a47 0000 0000 454c 2544     :ENDIMG.....LED%
  40df54:	2064 4553 2054 4f54 2520 0a64 0000 0000     d SET TO %d.....
  40df64:	4553 5652 204f 454c 3a47 6425 532c 5245     SERVO LEG:%d,SER
  40df74:	4f56 253a 2064 4f4d 4556 2044 4f54 2520     VO:%d MOVED TO %
  40df84:	0a64 0000 6142 7474 7265 2079 6f56 746c     d...Battery Volt
  40df94:	6761 3a65 6625 000a 4154 4b53 2031 4e49     age:%f..TASK1 IN
  40dfa4:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  40dfb4:	4154 5452 4445 000a 4154 4b53 2031 4e49     TARTED..TASK1 IN
  40dfc4:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  40dfd4:	4e49 5349 4548 2044 207c 4e45 4554 4952     INISHED | ENTERI
  40dfe4:	474e 4920 464e 4e49 5449 2045 4f4c 504f     NG INFINITE LOOP
  40dff4:	000a 0000 454c 2047 4f43 544e 4f52 204c     ....LEG CONTROL 
  40e004:	4154 4b53 4920 494e 4954 4c41 5a49 5441     TASK INITIALIZAT
  40e014:	4f49 204e 202d 5453 5241 4554 0a44 0000     ION - STARTED...
  40e024:	454c 2047 4f43 544e 4f52 204c 4154 4b53     LEG CONTROL TASK
  40e034:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40e044:	202d 4946 494e 4853 4445 7c20 4520 544e     - FINISHED | ENT
  40e054:	5245 4e49 2047 4e49 4946 494e 4554 4c20     ERING INFINITE L
  40e064:	4f4f 0a50 0000 0000 4c43 2049 4154 4b53     OOP.....CLI TASK
  40e074:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40e084:	202d 5453 5241 4554 0a44 0000 4c43 2049     - STARTED...CLI 
  40e094:	4154 4b53 4920 494e 4954 4c41 5a49 5441     TASK INITIALIZAT
  40e0a4:	4f49 204e 202d 4946 494e 4853 4445 7c20     ION - FINISHED |
  40e0b4:	4520 544e 5245 4e49 2047 4e49 4946 494e      ENTERING INFINI
  40e0c4:	4554 4c20 4f4f 0a50 0000 0000 4f43 4d4d     TE LOOP.....COMM
  40e0d4:	4e41 2044 494c 454e 5320 4154 5452 4445     AND LINE STARTED
  40e0e4:	000a 0000 5946 5f50 6548 6178 6f62 5f74     ....FYP_Hexabot_
  40e0f4:	5441 4153 534d 3037 4d5f 4c45 414c 5254     ATSAMS70_MELLATR
  40e104:	4e4f 3039 3030 003e 0020 0000 656c 0064     ON9000>. ...led.
  40e114:	616d 756e 7673 006f 6162 7674 6c6f 0a74     manusvo.batvolt.
  40e124:	0000 0000 7564 706d 6d69 0a67 0000 0000     ....dumpimg.....
  40e134:	6177 6b6c 0000 0000 6177 6b6c 7963 6974     walk....walkcyti
  40e144:	656d 0000 6576 6272 736f 0065 4f42 5241     me..verbose.BOAR
  40e154:	2044 4e49 5449 4149 494c 415a 4954 4e4f     D INITIALIZATION
  40e164:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  40e174:	5452 534f 5420 5341 204b 4e49 5449 4149     RTOS TASK INITIA
  40e184:	494c 415a 4954 4e4f 2d20 5320 4154 5452     LIZATION - START
  40e194:	4445 000a 4154 4b53 0031 0000 454c 4347     ED..TASK1...LEGC
  40e1a4:	5254 544c 5341 004b 4c43 5449 5341 004b     TRLTASK.CLITASK.
  40e1b4:	4154 4b53 2031 4544 4946 494e 4954 4e4f     TASK1 DEFINITION
  40e1c4:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  40e1d4:	5453 5241 4954 474e 5220 4f54 0a53 0000     STARTING RTOS...
  40e1e4:	5452 534f 4820 5341 5220 5445 5255 454e     RTOS HAS RETURNE
  40e1f4:	2e44 5420 4948 2053 4853 554f 444c 4520     D. THIS SHOULD E
  40e204:	4556 2052 4148 5050 4e45 202e 5845 5254     VER HAPPEN. EXTR
  40e214:	4d45 2045 5245 4f52 0a52 0000 6361 736f     EME ERROR...acos
  40e224:	0000 0000 7361 6e69 0000 0000 7173 7472     ....asin....sqrt
  40e234:	0000 0000                                   ....

0040e238 <npio2_hw>:
  40e238:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
  40e248:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
  40e258:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
  40e268:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
  40e278:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
  40e288:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
  40e298:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
  40e2a8:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0040e2b8 <two_over_pi>:
  40e2b8:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
  40e2c8:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
  40e2d8:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
  40e2e8:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
  40e2f8:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
  40e308:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
  40e318:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
  40e328:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
  40e338:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
  40e348:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
  40e358:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
  40e368:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
  40e378:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
  40e388:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
  40e398:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
  40e3a8:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
  40e3b8:	e27b 0060 8c6b 00c0                         {.`.k...

0040e3c0 <init_jk>:
  40e3c0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

0040e3d0 <PIo2>:
  40e3d0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
  40e3e0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
  40e3f0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
  40e400:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0040e410 <atanlo>:
  40e410:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
  40e420:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

0040e430 <atanhi>:
  40e430:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
  40e440:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
  40e450:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  40e460:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  40e470:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  40e480:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  40e490:	0043 0000                                   C...

0040e494 <_global_impure_ptr>:
  40e494:	0020 2040                                    .@ 

0040e498 <zeroes.6911>:
  40e498:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040e4a8 <blanks.6910>:
  40e4a8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40e4b8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40e4c8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40e4d8:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40e4e8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40e4f8:	0030 0000                                   0...

0040e4fc <zeroes.6869>:
  40e4fc:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040e50c <blanks.6868>:
  40e50c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040e51c <_ctype_>:
  40e51c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40e52c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40e53c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40e54c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40e55c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40e56c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40e57c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40e58c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40e59c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  40e620:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40e630:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

0040e640 <__mprec_tens>:
  40e640:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40e650:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40e660:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40e670:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40e680:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40e690:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40e6a0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40e6b0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40e6c0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40e6d0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40e6e0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40e6f0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40e700:	9db4 79d9 7843 44ea                         ...yCx.D

0040e708 <p05.5302>:
  40e708:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0040e718 <__mprec_bigtens>:
  40e718:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40e728:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40e738:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040e740 <_init>:
  40e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e742:	bf00      	nop
  40e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40e746:	bc08      	pop	{r3}
  40e748:	469e      	mov	lr, r3
  40e74a:	4770      	bx	lr

0040e74c <__init_array_start>:
  40e74c:	0040a8e1 	.word	0x0040a8e1

0040e750 <__frame_dummy_init_array_entry>:
  40e750:	00400165                                e.@.

0040e754 <_fini>:
  40e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e756:	bf00      	nop
  40e758:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40e75a:	bc08      	pop	{r3}
  40e75c:	469e      	mov	lr, r3
  40e75e:	4770      	bx	lr

0040e760 <__fini_array_start>:
  40e760:	00400141 	.word	0x00400141

Disassembly of section LIBJPEG_R:

0040e764 <memset>:
  40e764:	b510      	push	{r4, lr}
  40e766:	0004      	movs	r4, r0
  40e768:	0010      	movs	r0, r2
  40e76a:	000a      	movs	r2, r1
  40e76c:	0001      	movs	r1, r0
  40e76e:	0020      	movs	r0, r4
  40e770:	f7f9 f976 	bl	407a60 <__aeabi_memset>
  40e774:	0020      	movs	r0, r4
  40e776:	bc10      	pop	{r4}
  40e778:	bc08      	pop	{r3}
  40e77a:	4718      	bx	r3

0040e77c <memcpy>:
  40e77c:	b510      	push	{r4, lr}
  40e77e:	0004      	movs	r4, r0
  40e780:	f7f9 f96c 	bl	407a5c <__aeabi_memcpy>
  40e784:	0020      	movs	r0, r4
  40e786:	bc10      	pop	{r4}
  40e788:	bc08      	pop	{r3}
  40e78a:	4718      	bx	r3

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <__fdlib_version>:
20400018:	0001 0000 0000 0000                         ........

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	e490 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <__malloc_av_>:
	...
20400454:	044c 2040 044c 2040 0454 2040 0454 2040     L.@ L.@ T.@ T.@ 
20400464:	045c 2040 045c 2040 0464 2040 0464 2040     \.@ \.@ d.@ d.@ 
20400474:	046c 2040 046c 2040 0474 2040 0474 2040     l.@ l.@ t.@ t.@ 
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__ctype_ptr__>:
2040085c:	e51c 0040                                   ..@.

20400860 <lconv>:
20400860:	e638 0040 ded4 0040 ded4 0040 ded4 0040     8.@...@...@...@.
20400870:	ded4 0040 ded4 0040 ded4 0040 ded4 0040     ..@...@...@...@.
20400880:	ded4 0040 ded4 0040 ffff ffff ffff ffff     ..@...@.........
20400890:	ffff ffff ffff 0000                         ........

20400898 <lc_ctype_charset>:
20400898:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204008b8 <__mb_cur_max>:
204008b8:	0001 0000                                   ....

204008bc <__wctomb>:
204008bc:	d20d 0040                                   ..@.
