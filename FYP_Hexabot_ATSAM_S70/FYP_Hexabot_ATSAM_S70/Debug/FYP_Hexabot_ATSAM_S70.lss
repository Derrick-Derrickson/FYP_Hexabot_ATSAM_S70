
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ff4c  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ff4c  0040ff4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c0  20400000  0040ff54  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bd44  204008c0  00410814  000188c0  2**2
                  ALLOC
  4 .stack        00002004  2040c604  0041c558  000188c0  2**0
                  ALLOC
  5 .heap         00000200  2040e608  0041e55c  000188c0  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188c0  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  000188f3  2**0
                  CONTENTS, READONLY
  8 .debug_info   000220f0  00000000  00000000  0001894e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004375  00000000  00000000  0003aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e2fb  00000000  00000000  0003edb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011d0  00000000  00000000  0004d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001310  00000000  00000000  0004e27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024a18  00000000  00000000  0004f58e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000188a1  00000000  00000000  00073fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00085f2f  00000000  00000000  0008c847  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000458c  00000000  00000000  00112778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e608 	.word	0x2040e608
  400004:	00403461 	.word	0x00403461
  400008:	0040345d 	.word	0x0040345d
  40000c:	0040345d 	.word	0x0040345d
  400010:	0040345d 	.word	0x0040345d
  400014:	0040345d 	.word	0x0040345d
  400018:	0040345d 	.word	0x0040345d
	...
  40002c:	00400b31 	.word	0x00400b31
  400030:	0040345d 	.word	0x0040345d
  400034:	00000000 	.word	0x00000000
  400038:	00400bcd 	.word	0x00400bcd
  40003c:	00400c31 	.word	0x00400c31
  400040:	0040345d 	.word	0x0040345d
  400044:	0040345d 	.word	0x0040345d
  400048:	0040345d 	.word	0x0040345d
  40004c:	0040345d 	.word	0x0040345d
  400050:	0040345d 	.word	0x0040345d
  400054:	0040345d 	.word	0x0040345d
  400058:	0040345d 	.word	0x0040345d
  40005c:	0040345d 	.word	0x0040345d
  400060:	0040345d 	.word	0x0040345d
  400064:	00000000 	.word	0x00000000
  400068:	004005b1 	.word	0x004005b1
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005d9 	.word	0x004005d9
  400074:	0040345d 	.word	0x0040345d
  400078:	0040345d 	.word	0x0040345d
  40007c:	0040345d 	.word	0x0040345d
  400080:	004005ed 	.word	0x004005ed
  400084:	00400601 	.word	0x00400601
  400088:	0040345d 	.word	0x0040345d
  40008c:	0040345d 	.word	0x0040345d
  400090:	0040345d 	.word	0x0040345d
  400094:	0040345d 	.word	0x0040345d
  400098:	0040345d 	.word	0x0040345d
  40009c:	0040345d 	.word	0x0040345d
  4000a0:	0040345d 	.word	0x0040345d
  4000a4:	0040345d 	.word	0x0040345d
  4000a8:	0040345d 	.word	0x0040345d
  4000ac:	0040345d 	.word	0x0040345d
  4000b0:	0040345d 	.word	0x0040345d
  4000b4:	00400365 	.word	0x00400365
  4000b8:	0040345d 	.word	0x0040345d
  4000bc:	0040345d 	.word	0x0040345d
  4000c0:	0040345d 	.word	0x0040345d
  4000c4:	0040345d 	.word	0x0040345d
  4000c8:	0040345d 	.word	0x0040345d
	...
  4000e0:	00400379 	.word	0x00400379
  4000e4:	0040345d 	.word	0x0040345d
  4000e8:	0040345d 	.word	0x0040345d
  4000ec:	0040345d 	.word	0x0040345d
  4000f0:	0040345d 	.word	0x0040345d
  4000f4:	0040345d 	.word	0x0040345d
  4000f8:	00405ead 	.word	0x00405ead
  4000fc:	0040345d 	.word	0x0040345d
  400100:	0040345d 	.word	0x0040345d
  400104:	0040345d 	.word	0x0040345d
  400108:	0040345d 	.word	0x0040345d
  40010c:	0040345d 	.word	0x0040345d
  400110:	0040345d 	.word	0x0040345d
	...
  400120:	0040345d 	.word	0x0040345d
  400124:	0040345d 	.word	0x0040345d
  400128:	0040345d 	.word	0x0040345d
  40012c:	00405e75 	.word	0x00405e75
  400130:	0040345d 	.word	0x0040345d
  400134:	00000000 	.word	0x00000000
  400138:	0040345d 	.word	0x0040345d
  40013c:	0040345d 	.word	0x0040345d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008c0 	.word	0x204008c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040ff54 	.word	0x0040ff54

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040ff54 	.word	0x0040ff54
  400190:	204008c4 	.word	0x204008c4
  400194:	0040ff54 	.word	0x0040ff54
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402d51 	.word	0x00402d51
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040999d 	.word	0x0040999d
  4001e0:	00402d5d 	.word	0x00402d5d

004001e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
  4001e6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001ec:	4013      	ands	r3, r2
  4001ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4001f2:	4e1a      	ldr	r6, [pc, #104]	; (40025c <afec_process_callback+0x78>)
  4001f4:	4d1a      	ldr	r5, [pc, #104]	; (400260 <afec_process_callback+0x7c>)
  4001f6:	42a8      	cmp	r0, r5
  4001f8:	bf14      	ite	ne
  4001fa:	2000      	movne	r0, #0
  4001fc:	2001      	moveq	r0, #1
  4001fe:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400200:	2c0b      	cmp	r4, #11
  400202:	d80a      	bhi.n	40021a <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400204:	9a01      	ldr	r2, [sp, #4]
  400206:	2301      	movs	r3, #1
  400208:	40a3      	lsls	r3, r4
  40020a:	4213      	tst	r3, r2
  40020c:	d020      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40020e:	192b      	adds	r3, r5, r4
  400210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400214:	b1e3      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400216:	4798      	blx	r3
  400218:	e01a      	b.n	400250 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40021a:	2c0e      	cmp	r4, #14
  40021c:	d80c      	bhi.n	400238 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40021e:	9a01      	ldr	r2, [sp, #4]
  400220:	f104 010c 	add.w	r1, r4, #12
  400224:	2301      	movs	r3, #1
  400226:	408b      	lsls	r3, r1
  400228:	4213      	tst	r3, r2
  40022a:	d011      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	b16b      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400234:	4798      	blx	r3
  400236:	e00b      	b.n	400250 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400238:	9a01      	ldr	r2, [sp, #4]
  40023a:	f104 010f 	add.w	r1, r4, #15
  40023e:	2301      	movs	r3, #1
  400240:	408b      	lsls	r3, r1
  400242:	4213      	tst	r3, r2
  400244:	d004      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400246:	192b      	adds	r3, r5, r4
  400248:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40024c:	b103      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40024e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400250:	3401      	adds	r4, #1
  400252:	2c10      	cmp	r4, #16
  400254:	d1d4      	bne.n	400200 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400256:	b002      	add	sp, #8
  400258:	bd70      	pop	{r4, r5, r6, pc}
  40025a:	bf00      	nop
  40025c:	2040c47c 	.word	0x2040c47c
  400260:	40064000 	.word	0x40064000

00400264 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400296:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40029a:	d14d      	bne.n	400338 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40029c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40029e:	2201      	movs	r2, #1
  4002a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002a2:	7cca      	ldrb	r2, [r1, #19]
  4002a4:	2a00      	cmp	r2, #0
  4002a6:	bf18      	it	ne
  4002a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4002ac:	68ca      	ldr	r2, [r1, #12]
  4002ae:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002b2:	684a      	ldr	r2, [r1, #4]
  4002b4:	688d      	ldr	r5, [r1, #8]
  4002b6:	fbb2 f2f5 	udiv	r2, r2, r5
  4002ba:	3a01      	subs	r2, #1
  4002bc:	0212      	lsls	r2, r2, #8
  4002be:	b292      	uxth	r2, r2
  4002c0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002c2:	7c0c      	ldrb	r4, [r1, #16]
  4002c4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4002c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4002ca:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4002cc:	7c4c      	ldrb	r4, [r1, #17]
  4002ce:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4002d4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4002d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002da:	7d0b      	ldrb	r3, [r1, #20]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf14      	ite	ne
  4002e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4002e4:	2200      	moveq	r2, #0
  4002e6:	680b      	ldr	r3, [r1, #0]
  4002e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4002ea:	7d4b      	ldrb	r3, [r1, #21]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4002f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4002f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4002fa:	7d8b      	ldrb	r3, [r1, #22]
  4002fc:	021b      	lsls	r3, r3, #8
  4002fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400302:	f043 030c 	orr.w	r3, r3, #12
  400306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40030a:	4b12      	ldr	r3, [pc, #72]	; (400354 <afec_init+0xc0>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d106      	bne.n	40031e <afec_init+0x8a>
  400310:	e017      	b.n	400342 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400312:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400316:	428b      	cmp	r3, r1
  400318:	d1fb      	bne.n	400312 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40031a:	2000      	movs	r0, #0
  40031c:	e016      	b.n	40034c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <afec_init+0xc4>)
  400320:	4298      	cmp	r0, r3
  400322:	d10c      	bne.n	40033e <afec_init+0xaa>
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <afec_init+0xc8>)
  400326:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40032a:	2200      	movs	r2, #0
  40032c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400330:	428b      	cmp	r3, r1
  400332:	d1fb      	bne.n	40032c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e009      	b.n	40034c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400338:	2019      	movs	r0, #25
  40033a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40033c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e004      	b.n	40034c <afec_init+0xb8>
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <afec_init+0xcc>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	e7e2      	b.n	400312 <afec_init+0x7e>
  40034c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40034e:	bc30      	pop	{r4, r5}
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	4003c000 	.word	0x4003c000
  400358:	40064000 	.word	0x40064000
  40035c:	2040c4b8 	.word	0x2040c4b8
  400360:	2040c478 	.word	0x2040c478

00400364 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400364:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400366:	4802      	ldr	r0, [pc, #8]	; (400370 <AFEC0_Handler+0xc>)
  400368:	4b02      	ldr	r3, [pc, #8]	; (400374 <AFEC0_Handler+0x10>)
  40036a:	4798      	blx	r3
  40036c:	bd08      	pop	{r3, pc}
  40036e:	bf00      	nop
  400370:	4003c000 	.word	0x4003c000
  400374:	004001e5 	.word	0x004001e5

00400378 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400378:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40037a:	4802      	ldr	r0, [pc, #8]	; (400384 <AFEC1_Handler+0xc>)
  40037c:	4b02      	ldr	r3, [pc, #8]	; (400388 <AFEC1_Handler+0x10>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	40064000 	.word	0x40064000
  400388:	004001e5 	.word	0x004001e5

0040038c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40038c:	b508      	push	{r3, lr}
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <afec_enable+0x44>)
  400390:	4298      	cmp	r0, r3
  400392:	bf0c      	ite	eq
  400394:	2028      	moveq	r0, #40	; 0x28
  400396:	201d      	movne	r0, #29
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <afec_enable+0x48>)
  40039a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40039c:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <afec_enable+0x4c>)
  40039e:	789b      	ldrb	r3, [r3, #2]
  4003a0:	2bff      	cmp	r3, #255	; 0xff
  4003a2:	d100      	bne.n	4003a6 <afec_enable+0x1a>
  4003a4:	e7fe      	b.n	4003a4 <afec_enable+0x18>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003b0:	2100      	movs	r1, #0
  4003b2:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <afec_enable+0x50>)
  4003b4:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003b6:	4908      	ldr	r1, [pc, #32]	; (4003d8 <afec_enable+0x4c>)
  4003b8:	788a      	ldrb	r2, [r1, #2]
  4003ba:	3201      	adds	r2, #1
  4003bc:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003be:	b92b      	cbnz	r3, 4003cc <afec_enable+0x40>
		cpu_irq_enable();
  4003c0:	2201      	movs	r2, #1
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <afec_enable+0x50>)
  4003c4:	701a      	strb	r2, [r3, #0]
  4003c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003ca:	b662      	cpsie	i
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	40064000 	.word	0x40064000
  4003d4:	004029f5 	.word	0x004029f5
  4003d8:	2040c474 	.word	0x2040c474
  4003dc:	20400010 	.word	0x20400010

004003e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4003e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4003e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	bf0c      	ite	eq
  4003e8:	2400      	moveq	r4, #0
  4003ea:	2404      	movne	r4, #4
	}
	if(isi_cfg->vpol) {
  4003ec:	784b      	ldrb	r3, [r1, #1]
  4003ee:	b10b      	cbz	r3, 4003f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4003f0:	f044 0408 	orr.w	r4, r4, #8
	}
	if(isi_cfg->pck_plo) {
  4003f4:	788b      	ldrb	r3, [r1, #2]
  4003f6:	b10b      	cbz	r3, 4003fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4003f8:	f044 0410 	orr.w	r4, r4, #16
	}
	if(isi_cfg->emb_sync) {
  4003fc:	78cb      	ldrb	r3, [r1, #3]
  4003fe:	b10b      	cbz	r3, 400404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  400400:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  400404:	790b      	ldrb	r3, [r1, #4]
  400406:	b10b      	cbz	r3, 40040c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  400408:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40040c:	794a      	ldrb	r2, [r1, #5]
  40040e:	0352      	lsls	r2, r2, #13
  400410:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
  400414:	798b      	ldrb	r3, [r1, #6]
  400416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40041a:	79cb      	ldrb	r3, [r1, #7]
  40041c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
		reg |= ISI_CFG1_EMB_SYNC;
	}
	if(isi_cfg->crc_sync) {
		reg |= ISI_CFG1_CRC_SYNC;
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  400420:	4323      	orrs	r3, r4
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;
  400422:	6003      	str	r3, [r0, #0]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400424:	4b18      	ldr	r3, [pc, #96]	; (400488 <isi_init+0xa8>)
  400426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400428:	685b      	ldr	r3, [r3, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40042a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  400430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  400434:	7a0a      	ldrb	r2, [r1, #8]
  400436:	2a04      	cmp	r2, #4
  400438:	d816      	bhi.n	400468 <isi_init+0x88>
  40043a:	e8df f002 	tbb	[pc, r2]
  40043e:	0603      	.short	0x0603
  400440:	0e09      	.short	0x0e09
  400442:	11          	.byte	0x11
  400443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  400444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
  400448:	e00e      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB565:
			reg |= ISI_CFG2_COL_SPACE;
			reg |= ISI_CFG2_RGB_MODE;
  40044a:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40044e:	e00b      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB888:
			reg |= ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_RGB_MODE;
  400450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  400458:	e006      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_12BIT:
			reg |= ISI_CFG2_GRAYSCALE;
  40045a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40045e:	e003      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_8BIT:
			reg &= ~ISI_CFG2_GRAYSCALE;
			reg &= ~ISI_CFG2_RGB_SWAP;
			reg &= ~ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  400460:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  400464:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  400468:	68ca      	ldr	r2, [r1, #12]
  40046a:	3a01      	subs	r2, #1
  40046c:	4c07      	ldr	r4, [pc, #28]	; (40048c <isi_init+0xac>)
  40046e:	ea04 4402 	and.w	r4, r4, r2, lsl #16
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  400472:	690a      	ldr	r2, [r1, #16]
  400474:	3a01      	subs	r2, #1
  400476:	f3c2 020a 	ubfx	r2, r2, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40047a:	4322      	orrs	r2, r4
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40047c:	4313      	orrs	r3, r2
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
	p_isi->ISI_CFG2 = reg;
  40047e:	6043      	str	r3, [r0, #4]
}
  400480:	f85d 4b04 	ldr.w	r4, [sp], #4
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	4004c000 	.word	0x4004c000
  40048c:	07ff0000 	.word	0x07ff0000

00400490 <isi_size_configure>:
 * \param preview_hsize  Horizontal Preview size  (640 max only in RGB mode).
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
  400490:	b470      	push	{r4, r5, r6}
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400492:	4c23      	ldr	r4, [pc, #140]	; (400520 <isi_size_configure+0x90>)
  400494:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400496:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400498:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40049a:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
  40049e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
  4004a2:	4e20      	ldr	r6, [pc, #128]	; (400524 <isi_size_configure+0x94>)
  4004a4:	402e      	ands	r6, r5
  4004a6:	6046      	str	r6, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004a8:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004aa:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ac:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004ae:	b2ad      	uxth	r5, r5
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
  4004b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
  4004b4:	6045      	str	r5, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004b6:	6865      	ldr	r5, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004b8:	6864      	ldr	r4, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ba:	0eed      	lsrs	r5, r5, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004bc:	f024 4478 	bic.w	r4, r4, #4160749568	; 0xf8000000
  4004c0:	ea44 7505 	orr.w	r5, r4, r5, lsl #28
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround() | ISI_CFG2_IM_VSIZE(image_vsize - 1) | ISI_CFG2_IM_HSIZE(image_hsize - 1);
  4004c4:	3a01      	subs	r2, #1
  4004c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4004ca:	4315      	orrs	r5, r2
  4004cc:	1e4a      	subs	r2, r1, #1
  4004ce:	4c16      	ldr	r4, [pc, #88]	; (400528 <isi_size_configure+0x98>)
  4004d0:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004d4:	ea45 0204 	orr.w	r2, r5, r4
  4004d8:	6042      	str	r2, [r0, #4]

	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_VSIZE_Msk);
  4004da:	6884      	ldr	r4, [r0, #8]
  4004dc:	4a13      	ldr	r2, [pc, #76]	; (40052c <isi_size_configure+0x9c>)
  4004de:	4022      	ands	r2, r4
  4004e0:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_HSIZE_Msk);
  4004e2:	6884      	ldr	r4, [r0, #8]
  4004e4:	4a12      	ldr	r2, [pc, #72]	; (400530 <isi_size_configure+0xa0>)
  4004e6:	4022      	ands	r2, r4
  4004e8:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE |= ISI_PSIZE_PREV_VSIZE(preview_hsize - 1) | ISI_PSIZE_PREV_HSIZE(preview_vsize - 1);
  4004ea:	6885      	ldr	r5, [r0, #8]
  4004ec:	1e5a      	subs	r2, r3, #1
  4004ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
  4004f2:	9a03      	ldr	r2, [sp, #12]
  4004f4:	3a01      	subs	r2, #1
  4004f6:	4c0f      	ldr	r4, [pc, #60]	; (400534 <isi_size_configure+0xa4>)
  4004f8:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004fc:	ea46 0204 	orr.w	r2, r6, r4
  400500:	432a      	orrs	r2, r5
  400502:	6082      	str	r2, [r0, #8]

	uint32_t hRatio;
	hRatio = 1600 * image_hsize / preview_hsize;
  400504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  400508:	fb02 f101 	mul.w	r1, r2, r1
  40050c:	fbb1 f3f3 	udiv	r3, r1, r3
	p_isi->ISI_PDECF = (hRatio / 100);
  400510:	4909      	ldr	r1, [pc, #36]	; (400538 <isi_size_configure+0xa8>)
  400512:	fba1 2303 	umull	r2, r3, r1, r3
  400516:	095b      	lsrs	r3, r3, #5
  400518:	60c3      	str	r3, [r0, #12]
}
  40051a:	bc70      	pop	{r4, r5, r6}
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	4004c000 	.word	0x4004c000
  400524:	f7fff800 	.word	0xf7fff800
  400528:	07ff0000 	.word	0x07ff0000
  40052c:	fffffc00 	.word	0xfffffc00
  400530:	fc00ffff 	.word	0xfc00ffff
  400534:	03ff0000 	.word	0x03ff0000
  400538:	51eb851f 	.word	0x51eb851f

0040053c <isi_set_dma_preview_path>:
 * \param dma_ctrl  DMA preview control.
 * \param frame_buf_start_addr  DMA preview base address.
 */
void isi_set_dma_preview_path(Isi *p_isi, uint8_t frate,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
  40053c:	b410      	push	{r4}
	if(frate > 7) {
		frate = 7;
	}
	p_isi->ISI_CFG1 |= ISI_CFG1_FRATE(frate);
  40053e:	6804      	ldr	r4, [r0, #0]
  400540:	2907      	cmp	r1, #7
  400542:	bf28      	it	cs
  400544:	2107      	movcs	r1, #7
  400546:	0209      	lsls	r1, r1, #8
  400548:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  40054c:	4321      	orrs	r1, r4
  40054e:	6001      	str	r1, [r0, #0]

	p_isi->ISI_DMA_P_DSCR = base_buf_desc;
  400550:	64c2      	str	r2, [r0, #76]	; 0x4c
	p_isi->ISI_DMA_P_CTRL = dma_ctrl;
  400552:	6483      	str	r3, [r0, #72]	; 0x48
	p_isi->ISI_DMA_P_ADDR = frame_buf_start_addr;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	6443      	str	r3, [r0, #68]	; 0x44

}
  400558:	f85d 4b04 	ldr.w	r4, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400564:	4604      	mov	r4, r0
  400566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <pio_handler_process+0x44>)
  40056a:	4798      	blx	r3
  40056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40056e:	4620      	mov	r0, r4
  400570:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <pio_handler_process+0x48>)
  400572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400574:	4005      	ands	r5, r0
  400576:	d013      	beq.n	4005a0 <pio_handler_process+0x40>
  400578:	4c0c      	ldr	r4, [pc, #48]	; (4005ac <pio_handler_process+0x4c>)
  40057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	4543      	cmp	r3, r8
  400582:	d108      	bne.n	400596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400584:	6861      	ldr	r1, [r4, #4]
  400586:	4229      	tst	r1, r5
  400588:	d005      	beq.n	400596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40058a:	68e3      	ldr	r3, [r4, #12]
  40058c:	4640      	mov	r0, r8
  40058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400590:	6863      	ldr	r3, [r4, #4]
  400592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400596:	42b4      	cmp	r4, r6
  400598:	d002      	beq.n	4005a0 <pio_handler_process+0x40>
  40059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40059c:	2d00      	cmp	r5, #0
  40059e:	d1ee      	bne.n	40057e <pio_handler_process+0x1e>
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	004028c9 	.word	0x004028c9
  4005a8:	004028cd 	.word	0x004028cd
  4005ac:	204008dc 	.word	0x204008dc

004005b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005b2:	4802      	ldr	r0, [pc, #8]	; (4005bc <PIOA_Handler+0xc>)
  4005b4:	210a      	movs	r1, #10
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOA_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e0e00 	.word	0x400e0e00
  4005c0:	00400561 	.word	0x00400561

004005c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOB_Handler+0xc>)
  4005c8:	210b      	movs	r1, #11
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOB_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1000 	.word	0x400e1000
  4005d4:	00400561 	.word	0x00400561

004005d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005da:	4802      	ldr	r0, [pc, #8]	; (4005e4 <PIOC_Handler+0xc>)
  4005dc:	210c      	movs	r1, #12
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <PIOC_Handler+0x10>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	400e1200 	.word	0x400e1200
  4005e8:	00400561 	.word	0x00400561

004005ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOD_Handler+0xc>)
  4005f0:	2110      	movs	r1, #16
  4005f2:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOD_Handler+0x10>)
  4005f4:	4798      	blx	r3
  4005f6:	bd08      	pop	{r3, pc}
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00400561 	.word	0x00400561

00400600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400602:	4802      	ldr	r0, [pc, #8]	; (40060c <PIOE_Handler+0xc>)
  400604:	2111      	movs	r1, #17
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOE_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e1600 	.word	0x400e1600
  400610:	00400561 	.word	0x00400561

00400614 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400614:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  400616:	b930      	cbnz	r0, 400626 <qspi_initialize+0x12>
  400618:	4859      	ldr	r0, [pc, #356]	; (400780 <qspi_initialize+0x16c>)
  40061a:	f240 1117 	movw	r1, #279	; 0x117
  40061e:	4a59      	ldr	r2, [pc, #356]	; (400784 <qspi_initialize+0x170>)
  400620:	4b59      	ldr	r3, [pc, #356]	; (400788 <qspi_initialize+0x174>)
  400622:	4c5a      	ldr	r4, [pc, #360]	; (40078c <qspi_initialize+0x178>)
  400624:	47a0      	blx	r4
  400626:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  400628:	2202      	movs	r2, #2
  40062a:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  40062c:	691a      	ldr	r2, [r3, #16]
  40062e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400632:	d1fb      	bne.n	40062c <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  400634:	2280      	movs	r2, #128	; 0x80
  400636:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  400638:	780a      	ldrb	r2, [r1, #0]
  40063a:	2a01      	cmp	r2, #1
  40063c:	d104      	bne.n	400648 <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  40063e:	685a      	ldr	r2, [r3, #4]
  400640:	f042 0201 	orr.w	r2, r2, #1
  400644:	605a      	str	r2, [r3, #4]
  400646:	e001      	b.n	40064c <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  400648:	685a      	ldr	r2, [r3, #4]
  40064a:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  40064c:	784a      	ldrb	r2, [r1, #1]
  40064e:	b122      	cbz	r2, 40065a <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  400650:	685a      	ldr	r2, [r3, #4]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	605a      	str	r2, [r3, #4]
  400658:	e003      	b.n	400662 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  40065a:	685a      	ldr	r2, [r3, #4]
  40065c:	f022 0202 	bic.w	r2, r2, #2
  400660:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  400662:	788a      	ldrb	r2, [r1, #2]
  400664:	b122      	cbz	r2, 400670 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  400666:	685a      	ldr	r2, [r3, #4]
  400668:	f042 0204 	orr.w	r2, r2, #4
  40066c:	605a      	str	r2, [r3, #4]
  40066e:	e03c      	b.n	4006ea <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	f022 0204 	bic.w	r2, r2, #4
  400676:	605a      	str	r2, [r3, #4]
  400678:	e037      	b.n	4006ea <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  40067a:	6a1a      	ldr	r2, [r3, #32]
  40067c:	f042 0201 	orr.w	r2, r2, #1
  400680:	621a      	str	r2, [r3, #32]
  400682:	e053      	b.n	40072c <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400684:	6a1a      	ldr	r2, [r3, #32]
  400686:	f022 0201 	bic.w	r2, r2, #1
  40068a:	621a      	str	r2, [r3, #32]
  40068c:	e04e      	b.n	40072c <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  40068e:	6a1a      	ldr	r2, [r3, #32]
  400690:	f042 0202 	orr.w	r2, r2, #2
  400694:	621a      	str	r2, [r3, #32]
  400696:	e04d      	b.n	400734 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  400698:	6a1a      	ldr	r2, [r3, #32]
  40069a:	f022 0202 	bic.w	r2, r2, #2
  40069e:	621a      	str	r2, [r3, #32]
  4006a0:	e048      	b.n	400734 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a2:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006a4:	0212      	lsls	r2, r2, #8
  4006a6:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006ac:	4302      	orrs	r2, r0
  4006ae:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e047      	b.n	400744 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  4006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006b6:	f042 0201 	orr.w	r2, r2, #1
  4006ba:	641a      	str	r2, [r3, #64]	; 0x40
  4006bc:	e003      	b.n	4006c6 <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  4006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006c0:	f022 0201 	bic.w	r2, r2, #1
  4006c4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  4006c6:	b124      	cbz	r4, 4006d2 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  4006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006ca:	f042 0202 	orr.w	r2, r2, #2
  4006ce:	641a      	str	r2, [r3, #64]	; 0x40
  4006d0:	e04a      	b.n	400768 <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  4006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006d4:	f022 0202 	bic.w	r2, r2, #2
  4006d8:	641a      	str	r2, [r3, #64]	; 0x40
  4006da:	e045      	b.n	400768 <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  4006dc:	6459      	str	r1, [r3, #68]	; 0x44
  4006de:	e049      	b.n	400774 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4006e0:	691a      	ldr	r2, [r3, #16]
  4006e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4006e6:	d0fb      	beq.n	4006e0 <qspi_initialize+0xcc>
  4006e8:	e047      	b.n	40077a <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006ea:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  4006ec:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006ee:	0100      	lsls	r0, r0, #4
  4006f0:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006f8:	4302      	orrs	r2, r0
  4006fa:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  4006fc:	685a      	ldr	r2, [r3, #4]
  4006fe:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400702:	684a      	ldr	r2, [r1, #4]
  400704:	4302      	orrs	r2, r0
  400706:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  400708:	685a      	ldr	r2, [r3, #4]
  40070a:	7a08      	ldrb	r0, [r1, #8]
  40070c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400710:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400714:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  400716:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  400718:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40071a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40071e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  400722:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  400724:	690a      	ldr	r2, [r1, #16]
  400726:	2a00      	cmp	r2, #0
  400728:	d0ac      	beq.n	400684 <qspi_initialize+0x70>
  40072a:	e7a6      	b.n	40067a <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  40072c:	694a      	ldr	r2, [r1, #20]
  40072e:	2a00      	cmp	r2, #0
  400730:	d0b2      	beq.n	400698 <qspi_initialize+0x84>
  400732:	e7ac      	b.n	40068e <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  400734:	6988      	ldr	r0, [r1, #24]
  400736:	4a16      	ldr	r2, [pc, #88]	; (400790 <qspi_initialize+0x17c>)
  400738:	fbb2 f2f0 	udiv	r2, r2, r0
  40073c:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  40073e:	2aff      	cmp	r2, #255	; 0xff
  400740:	d9af      	bls.n	4006a2 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  400742:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  400744:	6a1a      	ldr	r2, [r3, #32]
  400746:	7f0c      	ldrb	r4, [r1, #28]
  400748:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  40074c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400750:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  400752:	f891 5020 	ldrb.w	r5, [r1, #32]
  400756:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  40075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40075c:	f022 0203 	bic.w	r2, r2, #3
  400760:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  400762:	2d00      	cmp	r5, #0
  400764:	d1a6      	bne.n	4006b4 <qspi_initialize+0xa0>
  400766:	e7aa      	b.n	4006be <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  400768:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  40076a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40076e:	f012 0f01 	tst.w	r2, #1
  400772:	d0b3      	beq.n	4006dc <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  400774:	2201      	movs	r2, #1
  400776:	601a      	str	r2, [r3, #0]
  400778:	e7b2      	b.n	4006e0 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  40077a:	b240      	sxtb	r0, r0
}
  40077c:	bd38      	pop	{r3, r4, r5, pc}
  40077e:	bf00      	nop
  400780:	0040ef88 	.word	0x0040ef88
  400784:	0040ef78 	.word	0x0040ef78
  400788:	0040efac 	.word	0x0040efac
  40078c:	00408e09 	.word	0x00408e09
  400790:	08f0d180 	.word	0x08f0d180

00400794 <qspi_read>:
 * \param us_data      Pointer to read data.
 * \param num_of_bytes Read data numbers.
 * \return status Read option result.
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400796:	b930      	cbnz	r0, 4007a6 <qspi_read+0x12>
  400798:	4836      	ldr	r0, [pc, #216]	; (400874 <qspi_read+0xe0>)
  40079a:	f44f 719f 	mov.w	r1, #318	; 0x13e
  40079e:	4a36      	ldr	r2, [pc, #216]	; (400878 <qspi_read+0xe4>)
  4007a0:	4b36      	ldr	r3, [pc, #216]	; (40087c <qspi_read+0xe8>)
  4007a2:	4c37      	ldr	r4, [pc, #220]	; (400880 <qspi_read+0xec>)
  4007a4:	47a0      	blx	r4
  4007a6:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  4007a8:	2a00      	cmp	r2, #0
  4007aa:	d05c      	beq.n	400866 <qspi_read+0xd2>
	uint32_t num_of_bytes_read = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
  4007ac:	2a01      	cmp	r2, #1
  4007ae:	d11e      	bne.n	4007ee <qspi_read+0x5a>
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007b0:	6902      	ldr	r2, [r0, #16]
  4007b2:	f012 0f01 	tst.w	r2, #1
  4007b6:	bf08      	it	eq
  4007b8:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
  4007bc:	d012      	beq.n	4007e4 <qspi_read+0x50>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007be:	689a      	ldr	r2, [r3, #8]
  4007c0:	800a      	strh	r2, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007c2:	691a      	ldr	r2, [r3, #16]
  4007c4:	f012 0f04 	tst.w	r2, #4
  4007c8:	d0fb      	beq.n	4007c2 <qspi_read+0x2e>
	qspi->QSPI_TDR = w_data ;
  4007ca:	22ff      	movs	r2, #255	; 0xff
  4007cc:	60da      	str	r2, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007ce:	691a      	ldr	r2, [r3, #16]
  4007d0:	f012 0f02 	tst.w	r2, #2
  4007d4:	d0fb      	beq.n	4007ce <qspi_read+0x3a>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007d6:	689b      	ldr	r3, [r3, #8]
  4007d8:	800b      	strh	r3, [r1, #0]
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
				*us_data = qspi_read_spi(qspi);
				qspi_write_spi(qspi, dummy);
				*us_data = qspi_read_spi(qspi);
				num_of_attempt = 0;
				status = STATUS_OK;
  4007da:	2000      	movs	r0, #0
				break;
  4007dc:	e048      	b.n	400870 <qspi_read+0xdc>
			} else {
				if(num_of_attempt > 0xFFFF) {
  4007de:	3a01      	subs	r2, #1
  4007e0:	d100      	bne.n	4007e4 <qspi_read+0x50>
  4007e2:	e042      	b.n	40086a <qspi_read+0xd6>
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007e4:	6918      	ldr	r0, [r3, #16]
  4007e6:	f010 0f01 	tst.w	r0, #1
  4007ea:	d0f8      	beq.n	4007de <qspi_read+0x4a>
  4007ec:	e7e7      	b.n	4007be <qspi_read+0x2a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007ee:	6918      	ldr	r0, [r3, #16]
  4007f0:	f010 0f04 	tst.w	r0, #4
  4007f4:	d0fb      	beq.n	4007ee <qspi_read+0x5a>
	qspi->QSPI_TDR = w_data ;
  4007f6:	2000      	movs	r0, #0
  4007f8:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007fa:	6918      	ldr	r0, [r3, #16]
  4007fc:	f010 0f02 	tst.w	r0, #2
  400800:	d0fb      	beq.n	4007fa <qspi_read+0x66>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400802:	6918      	ldr	r0, [r3, #16]
  400804:	f010 0f04 	tst.w	r0, #4
  400808:	d0fb      	beq.n	400802 <qspi_read+0x6e>
	qspi->QSPI_TDR = w_data ;
  40080a:	2000      	movs	r0, #0
  40080c:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40080e:	6918      	ldr	r0, [r3, #16]
  400810:	f010 0f02 	tst.w	r0, #2
  400814:	d0fb      	beq.n	40080e <qspi_read+0x7a>
  400816:	2400      	movs	r4, #0
  400818:	4625      	mov	r5, r4
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40081a:	f04f 0e19 	mov.w	lr, #25
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
	qspi->QSPI_TDR = w_data ;
  40081e:	4626      	mov	r6, r4
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
  400820:	4627      	mov	r7, r4
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
  400822:	6918      	ldr	r0, [r3, #16]
  400824:	f010 0f02 	tst.w	r0, #2
  400828:	d015      	beq.n	400856 <qspi_read+0xc2>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  40082a:	6898      	ldr	r0, [r3, #8]
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
				*pw_data= qspi_read_spi(qspi);
  40082c:	7008      	strb	r0, [r1, #0]
				if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  40082e:	6858      	ldr	r0, [r3, #4]
  400830:	f410 6f70 	tst.w	r0, #3840	; 0xf00
  400834:	d001      	beq.n	40083a <qspi_read+0xa6>
					pw_data += sizeof(uint16_t);
  400836:	3102      	adds	r1, #2
  400838:	e000      	b.n	40083c <qspi_read+0xa8>
				} else {
					pw_data += sizeof(uint8_t);
  40083a:	3101      	adds	r1, #1
				}
				num_of_bytes_read++;
  40083c:	3501      	adds	r5, #1
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40083e:	6918      	ldr	r0, [r3, #16]
  400840:	f010 0f04 	tst.w	r0, #4
  400844:	d0fb      	beq.n	40083e <qspi_read+0xaa>
	qspi->QSPI_TDR = w_data ;
  400846:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  400848:	6918      	ldr	r0, [r3, #16]
  40084a:	f010 0f02 	tst.w	r0, #2
  40084e:	d0fb      	beq.n	400848 <qspi_read+0xb4>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400850:	4634      	mov	r4, r6
				status = STATUS_OK;
  400852:	4638      	mov	r0, r7
  400854:	e004      	b.n	400860 <qspi_read+0xcc>
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
  400856:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40085a:	d208      	bcs.n	40086e <qspi_read+0xda>
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
					num_of_attempt++;
  40085c:	3401      	adds	r4, #1
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40085e:	4670      	mov	r0, lr
		//qspi_read_spi(qspi);
		//qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
  400860:	42aa      	cmp	r2, r5
  400862:	d8de      	bhi.n	400822 <qspi_read+0x8e>
  400864:	e004      	b.n	400870 <qspi_read+0xdc>
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  400866:	2000      	movs	r0, #0
  400868:	e002      	b.n	400870 <qspi_read+0xdc>
				num_of_attempt = 0;
				status = STATUS_OK;
				break;
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086a:	20fd      	movs	r0, #253	; 0xfd
  40086c:	e000      	b.n	400870 <qspi_read+0xdc>
				status = STATUS_OK;
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086e:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400870:	b240      	sxtb	r0, r0
  400872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400874:	0040efb4 	.word	0x0040efb4
  400878:	0040f054 	.word	0x0040f054
  40087c:	0040efac 	.word	0x0040efac
  400880:	00408e09 	.word	0x00408e09

00400884 <qspi_write>:
 * \param us_data      Pointer to data to be written.
 * \param num_of_bytes Write data numbers.
 * \return status      Write option result.
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400886:	b930      	cbnz	r0, 400896 <qspi_write+0x12>
  400888:	4823      	ldr	r0, [pc, #140]	; (400918 <qspi_write+0x94>)
  40088a:	f240 118b 	movw	r1, #395	; 0x18b
  40088e:	4a23      	ldr	r2, [pc, #140]	; (40091c <qspi_write+0x98>)
  400890:	4b23      	ldr	r3, [pc, #140]	; (400920 <qspi_write+0x9c>)
  400892:	4c24      	ldr	r4, [pc, #144]	; (400924 <qspi_write+0xa0>)
  400894:	47a0      	blx	r4
  400896:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  400898:	2a00      	cmp	r2, #0
  40089a:	d038      	beq.n	40090e <qspi_write+0x8a>
	uint32_t num_of_bytes_write = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint8_t Addr_Inc = 0;

	if (num_of_bytes == 1) {
  40089c:	2a01      	cmp	r2, #1
  40089e:	d114      	bne.n	4008ca <qspi_write+0x46>
  4008a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
  4008a4:	6918      	ldr	r0, [r3, #16]
  4008a6:	f010 0f02 	tst.w	r0, #2
  4008aa:	d00b      	beq.n	4008c4 <qspi_write+0x40>
				qspi_write_spi(qspi, (uint16_t)(*us_data));
  4008ac:	8809      	ldrh	r1, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ae:	691a      	ldr	r2, [r3, #16]
  4008b0:	f012 0f04 	tst.w	r2, #4
  4008b4:	d0fb      	beq.n	4008ae <qspi_write+0x2a>
	qspi->QSPI_TDR = w_data ;
  4008b6:	60d9      	str	r1, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008b8:	691a      	ldr	r2, [r3, #16]
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d0fb      	beq.n	4008b8 <qspi_write+0x34>
	if (num_of_bytes == 1) {
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
				qspi_write_spi(qspi, (uint16_t)(*us_data));
				num_of_attempt = 0;
				status = STATUS_OK;
  4008c0:	2000      	movs	r0, #0
  4008c2:	e027      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
  4008c4:	3a01      	subs	r2, #1
  4008c6:	d1ed      	bne.n	4008a4 <qspi_write+0x20>
  4008c8:	e023      	b.n	400912 <qspi_write+0x8e>
					break;
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  4008ca:	6840      	ldr	r0, [r0, #4]
  4008cc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
  4008d0:	2800      	cmp	r0, #0
  4008d2:	bf14      	ite	ne
  4008d4:	f04f 0e02 	movne.w	lr, #2
  4008d8:	f04f 0e01 	moveq.w	lr, #1
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
			Addr_Inc = sizeof(uint16_t);
  4008dc:	2400      	movs	r4, #0
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
			} else {
				status = STATUS_ERR_BUSY;
  4008de:	2519      	movs	r5, #25
		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
  4008e0:	4627      	mov	r7, r4
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
  4008e2:	6918      	ldr	r0, [r3, #16]
  4008e4:	f010 0f04 	tst.w	r0, #4
  4008e8:	d00c      	beq.n	400904 <qspi_write+0x80>
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
  4008ea:	780e      	ldrb	r6, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ec:	6918      	ldr	r0, [r3, #16]
  4008ee:	f010 0f04 	tst.w	r0, #4
  4008f2:	d0fb      	beq.n	4008ec <qspi_write+0x68>
	qspi->QSPI_TDR = w_data ;
  4008f4:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008f6:	6918      	ldr	r0, [r3, #16]
  4008f8:	f010 0f02 	tst.w	r0, #2
  4008fc:	d0fb      	beq.n	4008f6 <qspi_write+0x72>
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
  4008fe:	4471      	add	r1, lr
				num_of_attempt = 0;
				status = STATUS_OK;
  400900:	4638      	mov	r0, r7
  400902:	e000      	b.n	400906 <qspi_write+0x82>
			} else {
				status = STATUS_ERR_BUSY;
  400904:	4628      	mov	r0, r5
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
  400906:	3401      	adds	r4, #1
  400908:	42a2      	cmp	r2, r4
  40090a:	d2ea      	bcs.n	4008e2 <qspi_write+0x5e>
  40090c:	e002      	b.n	400914 <qspi_write+0x90>
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  40090e:	2000      	movs	r0, #0
  400910:	e000      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  400912:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400914:	b240      	sxtb	r0, r0
  400916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400918:	0040efb4 	.word	0x0040efb4
  40091c:	0040f060 	.word	0x0040f060
  400920:	0040efac 	.word	0x0040efac
  400924:	00408e09 	.word	0x00408e09

00400928 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400928:	4b48      	ldr	r3, [pc, #288]	; (400a4c <sdramc_init+0x124>)
  40092a:	781b      	ldrb	r3, [r3, #0]
  40092c:	2bff      	cmp	r3, #255	; 0xff
  40092e:	d100      	bne.n	400932 <sdramc_init+0xa>
  400930:	e7fe      	b.n	400930 <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  400932:	b470      	push	{r4, r5, r6}
  400934:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400936:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40093a:	b672      	cpsid	i
  40093c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400940:	2400      	movs	r4, #0
  400942:	4a43      	ldr	r2, [pc, #268]	; (400a50 <sdramc_init+0x128>)
  400944:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400946:	4c41      	ldr	r4, [pc, #260]	; (400a4c <sdramc_init+0x124>)
  400948:	7822      	ldrb	r2, [r4, #0]
  40094a:	3201      	adds	r2, #1
  40094c:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40094e:	b92b      	cbnz	r3, 40095c <sdramc_init+0x34>
		cpu_irq_enable();
  400950:	2201      	movs	r2, #1
  400952:	4b3f      	ldr	r3, [pc, #252]	; (400a50 <sdramc_init+0x128>)
  400954:	701a      	strb	r2, [r3, #0]
  400956:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40095a:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  40095c:	6883      	ldr	r3, [r0, #8]
  40095e:	4a3d      	ldr	r2, [pc, #244]	; (400a54 <sdramc_init+0x12c>)
  400960:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  400962:	2300      	movs	r3, #0
  400964:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  400966:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400968:	9301      	str	r3, [sp, #4]
  40096a:	4b3b      	ldr	r3, [pc, #236]	; (400a58 <sdramc_init+0x130>)
  40096c:	fba3 2301 	umull	r2, r3, r3, r1
  400970:	0c9a      	lsrs	r2, r3, #18
  400972:	23c8      	movs	r3, #200	; 0xc8
  400974:	fb03 f302 	mul.w	r3, r3, r2
  400978:	4a38      	ldr	r2, [pc, #224]	; (400a5c <sdramc_init+0x134>)
  40097a:	fba2 2303 	umull	r2, r3, r2, r3
  40097e:	089b      	lsrs	r3, r3, #2
  400980:	9a01      	ldr	r2, [sp, #4]
  400982:	4293      	cmp	r3, r2
  400984:	d905      	bls.n	400992 <sdramc_init+0x6a>
  400986:	9a01      	ldr	r2, [sp, #4]
  400988:	3201      	adds	r2, #1
  40098a:	9201      	str	r2, [sp, #4]
  40098c:	9a01      	ldr	r2, [sp, #4]
  40098e:	429a      	cmp	r2, r3
  400990:	d3f9      	bcc.n	400986 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  400992:	4d30      	ldr	r5, [pc, #192]	; (400a54 <sdramc_init+0x12c>)
  400994:	2201      	movs	r2, #1
  400996:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  400998:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  40099c:	2200      	movs	r2, #0
  40099e:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  4009a0:	2602      	movs	r6, #2
  4009a2:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  4009a4:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  4009a6:	9201      	str	r2, [sp, #4]
  4009a8:	9a01      	ldr	r2, [sp, #4]
  4009aa:	429a      	cmp	r2, r3
  4009ac:	d205      	bcs.n	4009ba <sdramc_init+0x92>
  4009ae:	9a01      	ldr	r2, [sp, #4]
  4009b0:	3201      	adds	r2, #1
  4009b2:	9201      	str	r2, [sp, #4]
  4009b4:	9a01      	ldr	r2, [sp, #4]
  4009b6:	429a      	cmp	r2, r3
  4009b8:	d3f9      	bcc.n	4009ae <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ba:	4b26      	ldr	r3, [pc, #152]	; (400a54 <sdramc_init+0x12c>)
  4009bc:	2404      	movs	r4, #4
  4009be:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  4009c0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  4009c4:	2501      	movs	r5, #1
  4009c6:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009c8:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  4009ca:	2502      	movs	r5, #2
  4009cc:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ce:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  4009d0:	2503      	movs	r5, #3
  4009d2:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  4009d6:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d8:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  4009da:	2605      	movs	r6, #5
  4009dc:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009de:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  4009e0:	2606      	movs	r6, #6
  4009e2:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  4009e6:	2607      	movs	r6, #7
  4009e8:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ea:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  4009ec:	2408      	movs	r4, #8
  4009ee:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4009f0:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009f2:	6844      	ldr	r4, [r0, #4]
  4009f4:	0064      	lsls	r4, r4, #1
  4009f6:	4414      	add	r4, r2
  4009f8:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  4009fc:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009fe:	6844      	ldr	r4, [r0, #4]
  400a00:	0064      	lsls	r4, r4, #1
  400a02:	4414      	add	r4, r2
  400a04:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a06:	6844      	ldr	r4, [r0, #4]
  400a08:	0064      	lsls	r4, r4, #1
  400a0a:	4414      	add	r4, r2
  400a0c:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a0e:	6840      	ldr	r0, [r0, #4]
  400a10:	0040      	lsls	r0, r0, #1
  400a12:	4410      	add	r0, r2
  400a14:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  400a16:	2000      	movs	r0, #0
  400a18:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  400a1a:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  400a1c:	4a10      	ldr	r2, [pc, #64]	; (400a60 <sdramc_init+0x138>)
  400a1e:	fba2 1201 	umull	r1, r2, r2, r1
  400a22:	0992      	lsrs	r2, r2, #6
  400a24:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  400a26:	9901      	ldr	r1, [sp, #4]
  400a28:	f641 6278 	movw	r2, #7800	; 0x1e78
  400a2c:	fb02 f201 	mul.w	r2, r2, r1
  400a30:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  400a32:	9a01      	ldr	r2, [sp, #4]
  400a34:	4908      	ldr	r1, [pc, #32]	; (400a58 <sdramc_init+0x130>)
  400a36:	fba1 1202 	umull	r1, r2, r1, r2
  400a3a:	0c92      	lsrs	r2, r2, #18
  400a3c:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  400a3e:	9a01      	ldr	r2, [sp, #4]
  400a40:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400a44:	605a      	str	r2, [r3, #4]
}
  400a46:	b003      	add	sp, #12
  400a48:	bc70      	pop	{r4, r5, r6}
  400a4a:	4770      	bx	lr
  400a4c:	2040c474 	.word	0x2040c474
  400a50:	20400010 	.word	0x20400010
  400a54:	40084000 	.word	0x40084000
  400a58:	431bde83 	.word	0x431bde83
  400a5c:	aaaaaaab 	.word	0xaaaaaaab
  400a60:	10624dd3 	.word	0x10624dd3

00400a64 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400a64:	2901      	cmp	r1, #1
  400a66:	d104      	bne.n	400a72 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400a68:	6882      	ldr	r2, [r0, #8]
  400a6a:	4b06      	ldr	r3, [pc, #24]	; (400a84 <supc_switch_sclk_to_32kxtal+0x20>)
  400a6c:	4313      	orrs	r3, r2
  400a6e:	6083      	str	r3, [r0, #8]
  400a70:	e003      	b.n	400a7a <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400a72:	6882      	ldr	r2, [r0, #8]
  400a74:	4b04      	ldr	r3, [pc, #16]	; (400a88 <supc_switch_sclk_to_32kxtal+0x24>)
  400a76:	4013      	ands	r3, r2
  400a78:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400a7a:	6802      	ldr	r2, [r0, #0]
  400a7c:	4b03      	ldr	r3, [pc, #12]	; (400a8c <supc_switch_sclk_to_32kxtal+0x28>)
  400a7e:	4313      	orrs	r3, r2
  400a80:	6003      	str	r3, [r0, #0]
  400a82:	4770      	bx	lr
  400a84:	a5100000 	.word	0xa5100000
  400a88:	5aefffff 	.word	0x5aefffff
  400a8c:	a5000008 	.word	0xa5000008

00400a90 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a94:	6043      	str	r3, [r0, #4]
  400a96:	4770      	bx	lr

00400a98 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400a98:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <prvTaskExitError+0x38>)
  400a9a:	681b      	ldr	r3, [r3, #0]
  400a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aa0:	d00a      	beq.n	400ab8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400aa2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aa6:	b672      	cpsid	i
  400aa8:	f383 8811 	msr	BASEPRI, r3
  400aac:	f3bf 8f6f 	isb	sy
  400ab0:	f3bf 8f4f 	dsb	sy
  400ab4:	b662      	cpsie	i
  400ab6:	e7fe      	b.n	400ab6 <prvTaskExitError+0x1e>
  400ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400abc:	b672      	cpsid	i
  400abe:	f383 8811 	msr	BASEPRI, r3
  400ac2:	f3bf 8f6f 	isb	sy
  400ac6:	f3bf 8f4f 	dsb	sy
  400aca:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400acc:	e7fe      	b.n	400acc <prvTaskExitError+0x34>
  400ace:	bf00      	nop
  400ad0:	2040000c 	.word	0x2040000c

00400ad4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400ad4:	4806      	ldr	r0, [pc, #24]	; (400af0 <prvPortStartFirstTask+0x1c>)
  400ad6:	6800      	ldr	r0, [r0, #0]
  400ad8:	6800      	ldr	r0, [r0, #0]
  400ada:	f380 8808 	msr	MSP, r0
  400ade:	b662      	cpsie	i
  400ae0:	b661      	cpsie	f
  400ae2:	f3bf 8f4f 	dsb	sy
  400ae6:	f3bf 8f6f 	isb	sy
  400aea:	df00      	svc	0
  400aec:	bf00      	nop
  400aee:	0000      	.short	0x0000
  400af0:	e000ed08 	.word	0xe000ed08

00400af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b04 <vPortEnableVFP+0x10>
  400af8:	6801      	ldr	r1, [r0, #0]
  400afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400afe:	6001      	str	r1, [r0, #0]
  400b00:	4770      	bx	lr
  400b02:	0000      	.short	0x0000
  400b04:	e000ed88 	.word	0xe000ed88

00400b08 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b0c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400b10:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400b14:	4b05      	ldr	r3, [pc, #20]	; (400b2c <pxPortInitialiseStack+0x24>)
  400b16:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400b1a:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400b1e:	f06f 0302 	mvn.w	r3, #2
  400b22:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400b26:	3844      	subs	r0, #68	; 0x44
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	00400a99 	.word	0x00400a99

00400b30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400b30:	4b06      	ldr	r3, [pc, #24]	; (400b4c <pxCurrentTCBConst2>)
  400b32:	6819      	ldr	r1, [r3, #0]
  400b34:	6808      	ldr	r0, [r1, #0]
  400b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b3a:	f380 8809 	msr	PSP, r0
  400b3e:	f3bf 8f6f 	isb	sy
  400b42:	f04f 0000 	mov.w	r0, #0
  400b46:	f380 8811 	msr	BASEPRI, r0
  400b4a:	4770      	bx	lr

00400b4c <pxCurrentTCBConst2>:
  400b4c:	2040c390 	.word	0x2040c390

00400b50 <vPortEnterCritical>:
  400b50:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b54:	b672      	cpsid	i
  400b56:	f383 8811 	msr	BASEPRI, r3
  400b5a:	f3bf 8f6f 	isb	sy
  400b5e:	f3bf 8f4f 	dsb	sy
  400b62:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400b64:	4a0b      	ldr	r2, [pc, #44]	; (400b94 <vPortEnterCritical+0x44>)
  400b66:	6813      	ldr	r3, [r2, #0]
  400b68:	3301      	adds	r3, #1
  400b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400b6c:	2b01      	cmp	r3, #1
  400b6e:	d10f      	bne.n	400b90 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400b70:	4b09      	ldr	r3, [pc, #36]	; (400b98 <vPortEnterCritical+0x48>)
  400b72:	681b      	ldr	r3, [r3, #0]
  400b74:	f013 0fff 	tst.w	r3, #255	; 0xff
  400b78:	d00a      	beq.n	400b90 <vPortEnterCritical+0x40>
  400b7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b7e:	b672      	cpsid	i
  400b80:	f383 8811 	msr	BASEPRI, r3
  400b84:	f3bf 8f6f 	isb	sy
  400b88:	f3bf 8f4f 	dsb	sy
  400b8c:	b662      	cpsie	i
  400b8e:	e7fe      	b.n	400b8e <vPortEnterCritical+0x3e>
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	2040000c 	.word	0x2040000c
  400b98:	e000ed04 	.word	0xe000ed04

00400b9c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400b9c:	4b0a      	ldr	r3, [pc, #40]	; (400bc8 <vPortExitCritical+0x2c>)
  400b9e:	681b      	ldr	r3, [r3, #0]
  400ba0:	b953      	cbnz	r3, 400bb8 <vPortExitCritical+0x1c>
  400ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba6:	b672      	cpsid	i
  400ba8:	f383 8811 	msr	BASEPRI, r3
  400bac:	f3bf 8f6f 	isb	sy
  400bb0:	f3bf 8f4f 	dsb	sy
  400bb4:	b662      	cpsie	i
  400bb6:	e7fe      	b.n	400bb6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400bb8:	3b01      	subs	r3, #1
  400bba:	4a03      	ldr	r2, [pc, #12]	; (400bc8 <vPortExitCritical+0x2c>)
  400bbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400bbe:	b90b      	cbnz	r3, 400bc4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400bc0:	f383 8811 	msr	BASEPRI, r3
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	2040000c 	.word	0x2040000c

00400bcc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400bcc:	f3ef 8009 	mrs	r0, PSP
  400bd0:	f3bf 8f6f 	isb	sy
  400bd4:	4b15      	ldr	r3, [pc, #84]	; (400c2c <pxCurrentTCBConst>)
  400bd6:	681a      	ldr	r2, [r3, #0]
  400bd8:	f01e 0f10 	tst.w	lr, #16
  400bdc:	bf08      	it	eq
  400bde:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400be2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400be6:	6010      	str	r0, [r2, #0]
  400be8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400bec:	f04f 0080 	mov.w	r0, #128	; 0x80
  400bf0:	b672      	cpsid	i
  400bf2:	f380 8811 	msr	BASEPRI, r0
  400bf6:	f3bf 8f4f 	dsb	sy
  400bfa:	f3bf 8f6f 	isb	sy
  400bfe:	b662      	cpsie	i
  400c00:	f001 f92c 	bl	401e5c <vTaskSwitchContext>
  400c04:	f04f 0000 	mov.w	r0, #0
  400c08:	f380 8811 	msr	BASEPRI, r0
  400c0c:	bc08      	pop	{r3}
  400c0e:	6819      	ldr	r1, [r3, #0]
  400c10:	6808      	ldr	r0, [r1, #0]
  400c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c16:	f01e 0f10 	tst.w	lr, #16
  400c1a:	bf08      	it	eq
  400c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400c20:	f380 8809 	msr	PSP, r0
  400c24:	f3bf 8f6f 	isb	sy
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <pxCurrentTCBConst>:
  400c2c:	2040c390 	.word	0x2040c390

00400c30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400c30:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400c32:	f3ef 8311 	mrs	r3, BASEPRI
  400c36:	f04f 0280 	mov.w	r2, #128	; 0x80
  400c3a:	b672      	cpsid	i
  400c3c:	f382 8811 	msr	BASEPRI, r2
  400c40:	f3bf 8f6f 	isb	sy
  400c44:	f3bf 8f4f 	dsb	sy
  400c48:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400c4a:	4b05      	ldr	r3, [pc, #20]	; (400c60 <SysTick_Handler+0x30>)
  400c4c:	4798      	blx	r3
  400c4e:	b118      	cbz	r0, 400c58 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c54:	4b03      	ldr	r3, [pc, #12]	; (400c64 <SysTick_Handler+0x34>)
  400c56:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c58:	2300      	movs	r3, #0
  400c5a:	f383 8811 	msr	BASEPRI, r3
  400c5e:	bd08      	pop	{r3, pc}
  400c60:	00401af1 	.word	0x00401af1
  400c64:	e000ed04 	.word	0xe000ed04

00400c68 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400c68:	4a03      	ldr	r2, [pc, #12]	; (400c78 <vPortSetupTimerInterrupt+0x10>)
  400c6a:	4b04      	ldr	r3, [pc, #16]	; (400c7c <vPortSetupTimerInterrupt+0x14>)
  400c6c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400c6e:	2207      	movs	r2, #7
  400c70:	3b04      	subs	r3, #4
  400c72:	601a      	str	r2, [r3, #0]
  400c74:	4770      	bx	lr
  400c76:	bf00      	nop
  400c78:	000493df 	.word	0x000493df
  400c7c:	e000e014 	.word	0xe000e014

00400c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400c80:	b500      	push	{lr}
  400c82:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400c84:	4b25      	ldr	r3, [pc, #148]	; (400d1c <xPortStartScheduler+0x9c>)
  400c86:	781a      	ldrb	r2, [r3, #0]
  400c88:	b2d2      	uxtb	r2, r2
  400c8a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400c8c:	22ff      	movs	r2, #255	; 0xff
  400c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400c90:	781b      	ldrb	r3, [r3, #0]
  400c92:	b2db      	uxtb	r3, r3
  400c94:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400c98:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ca0:	4a1f      	ldr	r2, [pc, #124]	; (400d20 <xPortStartScheduler+0xa0>)
  400ca2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400ca4:	2207      	movs	r2, #7
  400ca6:	4b1f      	ldr	r3, [pc, #124]	; (400d24 <xPortStartScheduler+0xa4>)
  400ca8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400caa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cae:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cb2:	d010      	beq.n	400cd6 <xPortStartScheduler+0x56>
  400cb4:	2206      	movs	r2, #6
  400cb6:	e000      	b.n	400cba <xPortStartScheduler+0x3a>
  400cb8:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400cba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cbe:	005b      	lsls	r3, r3, #1
  400cc0:	b2db      	uxtb	r3, r3
  400cc2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cca:	1e51      	subs	r1, r2, #1
  400ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cd0:	d1f2      	bne.n	400cb8 <xPortStartScheduler+0x38>
  400cd2:	4b14      	ldr	r3, [pc, #80]	; (400d24 <xPortStartScheduler+0xa4>)
  400cd4:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cd6:	4a13      	ldr	r2, [pc, #76]	; (400d24 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400cd8:	6813      	ldr	r3, [r2, #0]
  400cda:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400ce0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400ce2:	9b01      	ldr	r3, [sp, #4]
  400ce4:	b2db      	uxtb	r3, r3
  400ce6:	4a0d      	ldr	r2, [pc, #52]	; (400d1c <xPortStartScheduler+0x9c>)
  400ce8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400cea:	4b0f      	ldr	r3, [pc, #60]	; (400d28 <xPortStartScheduler+0xa8>)
  400cec:	681a      	ldr	r2, [r3, #0]
  400cee:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400cf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400cf4:	681a      	ldr	r2, [r3, #0]
  400cf6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400cfa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400cfc:	4b0b      	ldr	r3, [pc, #44]	; (400d2c <xPortStartScheduler+0xac>)
  400cfe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400d00:	2200      	movs	r2, #0
  400d02:	4b0b      	ldr	r3, [pc, #44]	; (400d30 <xPortStartScheduler+0xb0>)
  400d04:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400d06:	4b0b      	ldr	r3, [pc, #44]	; (400d34 <xPortStartScheduler+0xb4>)
  400d08:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400d0a:	4a0b      	ldr	r2, [pc, #44]	; (400d38 <xPortStartScheduler+0xb8>)
  400d0c:	6813      	ldr	r3, [r2, #0]
  400d0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400d12:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400d14:	4b09      	ldr	r3, [pc, #36]	; (400d3c <xPortStartScheduler+0xbc>)
  400d16:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400d18:	4b09      	ldr	r3, [pc, #36]	; (400d40 <xPortStartScheduler+0xc0>)
  400d1a:	4798      	blx	r3
  400d1c:	e000e400 	.word	0xe000e400
  400d20:	2040094c 	.word	0x2040094c
  400d24:	20400950 	.word	0x20400950
  400d28:	e000ed20 	.word	0xe000ed20
  400d2c:	00400c69 	.word	0x00400c69
  400d30:	2040000c 	.word	0x2040000c
  400d34:	00400af5 	.word	0x00400af5
  400d38:	e000ef34 	.word	0xe000ef34
  400d3c:	00400ad5 	.word	0x00400ad5
  400d40:	00400a99 	.word	0x00400a99

00400d44 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400d44:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400d48:	2b0f      	cmp	r3, #15
  400d4a:	d911      	bls.n	400d70 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400d4c:	4a12      	ldr	r2, [pc, #72]	; (400d98 <vPortValidateInterruptPriority+0x54>)
  400d4e:	5c9b      	ldrb	r3, [r3, r2]
  400d50:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400d52:	4a12      	ldr	r2, [pc, #72]	; (400d9c <vPortValidateInterruptPriority+0x58>)
  400d54:	7812      	ldrb	r2, [r2, #0]
  400d56:	429a      	cmp	r2, r3
  400d58:	d90a      	bls.n	400d70 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d5e:	b672      	cpsid	i
  400d60:	f383 8811 	msr	BASEPRI, r3
  400d64:	f3bf 8f6f 	isb	sy
  400d68:	f3bf 8f4f 	dsb	sy
  400d6c:	b662      	cpsie	i
  400d6e:	e7fe      	b.n	400d6e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400d70:	4b0b      	ldr	r3, [pc, #44]	; (400da0 <vPortValidateInterruptPriority+0x5c>)
  400d72:	681b      	ldr	r3, [r3, #0]
  400d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d78:	4a0a      	ldr	r2, [pc, #40]	; (400da4 <vPortValidateInterruptPriority+0x60>)
  400d7a:	6812      	ldr	r2, [r2, #0]
  400d7c:	4293      	cmp	r3, r2
  400d7e:	d90a      	bls.n	400d96 <vPortValidateInterruptPriority+0x52>
  400d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d84:	b672      	cpsid	i
  400d86:	f383 8811 	msr	BASEPRI, r3
  400d8a:	f3bf 8f6f 	isb	sy
  400d8e:	f3bf 8f4f 	dsb	sy
  400d92:	b662      	cpsie	i
  400d94:	e7fe      	b.n	400d94 <vPortValidateInterruptPriority+0x50>
  400d96:	4770      	bx	lr
  400d98:	e000e3f0 	.word	0xe000e3f0
  400d9c:	2040094c 	.word	0x2040094c
  400da0:	e000ed0c 	.word	0xe000ed0c
  400da4:	20400950 	.word	0x20400950

00400da8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400da8:	b538      	push	{r3, r4, r5, lr}
  400daa:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400dac:	f010 0f07 	tst.w	r0, #7
  400db0:	d002      	beq.n	400db8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400db2:	f020 0407 	bic.w	r4, r0, #7
  400db6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400db8:	4b0e      	ldr	r3, [pc, #56]	; (400df4 <pvPortMalloc+0x4c>)
  400dba:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400dbc:	4b0e      	ldr	r3, [pc, #56]	; (400df8 <pvPortMalloc+0x50>)
  400dbe:	681b      	ldr	r3, [r3, #0]
  400dc0:	b923      	cbnz	r3, 400dcc <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400dc2:	4b0e      	ldr	r3, [pc, #56]	; (400dfc <pvPortMalloc+0x54>)
  400dc4:	f023 0307 	bic.w	r3, r3, #7
  400dc8:	4a0b      	ldr	r2, [pc, #44]	; (400df8 <pvPortMalloc+0x50>)
  400dca:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400dcc:	4b0c      	ldr	r3, [pc, #48]	; (400e00 <pvPortMalloc+0x58>)
  400dce:	681b      	ldr	r3, [r3, #0]
  400dd0:	441c      	add	r4, r3
  400dd2:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400dd6:	4294      	cmp	r4, r2
  400dd8:	d807      	bhi.n	400dea <pvPortMalloc+0x42>
  400dda:	42a3      	cmp	r3, r4
  400ddc:	d205      	bcs.n	400dea <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400dde:	4a06      	ldr	r2, [pc, #24]	; (400df8 <pvPortMalloc+0x50>)
  400de0:	6815      	ldr	r5, [r2, #0]
  400de2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400de4:	4b06      	ldr	r3, [pc, #24]	; (400e00 <pvPortMalloc+0x58>)
  400de6:	601c      	str	r4, [r3, #0]
  400de8:	e000      	b.n	400dec <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400dea:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400dec:	4b05      	ldr	r3, [pc, #20]	; (400e04 <pvPortMalloc+0x5c>)
  400dee:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400df0:	4628      	mov	r0, r5
  400df2:	bd38      	pop	{r3, r4, r5, pc}
  400df4:	00401ad5 	.word	0x00401ad5
  400df8:	2040c158 	.word	0x2040c158
  400dfc:	20400960 	.word	0x20400960
  400e00:	20400954 	.word	0x20400954
  400e04:	00401c25 	.word	0x00401c25

00400e08 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400e08:	b150      	cbz	r0, 400e20 <vPortFree+0x18>
  400e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e0e:	b672      	cpsid	i
  400e10:	f383 8811 	msr	BASEPRI, r3
  400e14:	f3bf 8f6f 	isb	sy
  400e18:	f3bf 8f4f 	dsb	sy
  400e1c:	b662      	cpsie	i
  400e1e:	e7fe      	b.n	400e1e <vPortFree+0x16>
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop

00400e24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e24:	f100 0308 	add.w	r3, r0, #8
  400e28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e2a:	f04f 32ff 	mov.w	r2, #4294967295
  400e2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e34:	2300      	movs	r3, #0
  400e36:	6003      	str	r3, [r0, #0]
  400e38:	4770      	bx	lr
  400e3a:	bf00      	nop

00400e3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e3c:	2300      	movs	r3, #0
  400e3e:	6103      	str	r3, [r0, #16]
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop

00400e44 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e44:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e46:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e48:	689a      	ldr	r2, [r3, #8]
  400e4a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e4c:	689a      	ldr	r2, [r3, #8]
  400e4e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e50:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e52:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e54:	6803      	ldr	r3, [r0, #0]
  400e56:	3301      	adds	r3, #1
  400e58:	6003      	str	r3, [r0, #0]
  400e5a:	4770      	bx	lr

00400e5c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e5c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e5e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e60:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e64:	d101      	bne.n	400e6a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400e66:	6902      	ldr	r2, [r0, #16]
  400e68:	e007      	b.n	400e7a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e6a:	f100 0208 	add.w	r2, r0, #8
  400e6e:	e000      	b.n	400e72 <vListInsert+0x16>
  400e70:	461a      	mov	r2, r3
  400e72:	6853      	ldr	r3, [r2, #4]
  400e74:	681c      	ldr	r4, [r3, #0]
  400e76:	42a5      	cmp	r5, r4
  400e78:	d2fa      	bcs.n	400e70 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e7a:	6853      	ldr	r3, [r2, #4]
  400e7c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e7e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e80:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e82:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e86:	6803      	ldr	r3, [r0, #0]
  400e88:	3301      	adds	r3, #1
  400e8a:	6003      	str	r3, [r0, #0]
}
  400e8c:	bc30      	pop	{r4, r5}
  400e8e:	4770      	bx	lr

00400e90 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e90:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e92:	6842      	ldr	r2, [r0, #4]
  400e94:	6881      	ldr	r1, [r0, #8]
  400e96:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e98:	6882      	ldr	r2, [r0, #8]
  400e9a:	6841      	ldr	r1, [r0, #4]
  400e9c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e9e:	685a      	ldr	r2, [r3, #4]
  400ea0:	4282      	cmp	r2, r0
  400ea2:	d101      	bne.n	400ea8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400ea4:	6892      	ldr	r2, [r2, #8]
  400ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400ea8:	2200      	movs	r2, #0
  400eaa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400eac:	6818      	ldr	r0, [r3, #0]
  400eae:	3801      	subs	r0, #1
  400eb0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400eb2:	4770      	bx	lr

00400eb4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400eb4:	b538      	push	{r3, r4, r5, lr}
  400eb6:	4604      	mov	r4, r0
  400eb8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400eba:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ebc:	b942      	cbnz	r2, 400ed0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ebe:	6803      	ldr	r3, [r0, #0]
  400ec0:	2b00      	cmp	r3, #0
  400ec2:	d12b      	bne.n	400f1c <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ec4:	6840      	ldr	r0, [r0, #4]
  400ec6:	4b1b      	ldr	r3, [pc, #108]	; (400f34 <prvCopyDataToQueue+0x80>)
  400ec8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400eca:	2300      	movs	r3, #0
  400ecc:	6063      	str	r3, [r4, #4]
  400ece:	e02c      	b.n	400f2a <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400ed0:	b96d      	cbnz	r5, 400eee <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400ed2:	6880      	ldr	r0, [r0, #8]
  400ed4:	4b18      	ldr	r3, [pc, #96]	; (400f38 <prvCopyDataToQueue+0x84>)
  400ed6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ed8:	68a2      	ldr	r2, [r4, #8]
  400eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400edc:	4413      	add	r3, r2
  400ede:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400ee0:	6862      	ldr	r2, [r4, #4]
  400ee2:	4293      	cmp	r3, r2
  400ee4:	d31c      	bcc.n	400f20 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ee6:	6823      	ldr	r3, [r4, #0]
  400ee8:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400eea:	2000      	movs	r0, #0
  400eec:	e01d      	b.n	400f2a <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400eee:	68c0      	ldr	r0, [r0, #12]
  400ef0:	4b11      	ldr	r3, [pc, #68]	; (400f38 <prvCopyDataToQueue+0x84>)
  400ef2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400ef6:	425b      	negs	r3, r3
  400ef8:	68e2      	ldr	r2, [r4, #12]
  400efa:	441a      	add	r2, r3
  400efc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400efe:	6821      	ldr	r1, [r4, #0]
  400f00:	428a      	cmp	r2, r1
  400f02:	d202      	bcs.n	400f0a <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f04:	6862      	ldr	r2, [r4, #4]
  400f06:	4413      	add	r3, r2
  400f08:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f0a:	2d02      	cmp	r5, #2
  400f0c:	d10a      	bne.n	400f24 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f10:	b153      	cbz	r3, 400f28 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f14:	3b01      	subs	r3, #1
  400f16:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f18:	2000      	movs	r0, #0
  400f1a:	e006      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f1c:	2000      	movs	r0, #0
  400f1e:	e004      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f20:	2000      	movs	r0, #0
  400f22:	e002      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f24:	2000      	movs	r0, #0
  400f26:	e000      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f28:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f2c:	3301      	adds	r3, #1
  400f2e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f30:	bd38      	pop	{r3, r4, r5, pc}
  400f32:	bf00      	nop
  400f34:	00402229 	.word	0x00402229
  400f38:	00409461 	.word	0x00409461

00400f3c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f3c:	b530      	push	{r4, r5, lr}
  400f3e:	b083      	sub	sp, #12
  400f40:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f42:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f44:	b954      	cbnz	r4, 400f5c <prvNotifyQueueSetContainer+0x20>
  400f46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f4a:	b672      	cpsid	i
  400f4c:	f383 8811 	msr	BASEPRI, r3
  400f50:	f3bf 8f6f 	isb	sy
  400f54:	f3bf 8f4f 	dsb	sy
  400f58:	b662      	cpsie	i
  400f5a:	e7fe      	b.n	400f5a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f60:	429a      	cmp	r2, r3
  400f62:	d30a      	bcc.n	400f7a <prvNotifyQueueSetContainer+0x3e>
  400f64:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f68:	b672      	cpsid	i
  400f6a:	f383 8811 	msr	BASEPRI, r3
  400f6e:	f3bf 8f6f 	isb	sy
  400f72:	f3bf 8f4f 	dsb	sy
  400f76:	b662      	cpsie	i
  400f78:	e7fe      	b.n	400f78 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f7c:	4293      	cmp	r3, r2
  400f7e:	d917      	bls.n	400fb0 <prvNotifyQueueSetContainer+0x74>
  400f80:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400f82:	4620      	mov	r0, r4
  400f84:	a901      	add	r1, sp, #4
  400f86:	4b0c      	ldr	r3, [pc, #48]	; (400fb8 <prvNotifyQueueSetContainer+0x7c>)
  400f88:	4798      	blx	r3
  400f8a:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400f8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f92:	d109      	bne.n	400fa8 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f96:	b163      	cbz	r3, 400fb2 <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f9c:	4b07      	ldr	r3, [pc, #28]	; (400fbc <prvNotifyQueueSetContainer+0x80>)
  400f9e:	4798      	blx	r3
  400fa0:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fa2:	bf18      	it	ne
  400fa4:	2501      	movne	r5, #1
  400fa6:	e004      	b.n	400fb2 <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400faa:	3301      	adds	r3, #1
  400fac:	64a3      	str	r3, [r4, #72]	; 0x48
  400fae:	e000      	b.n	400fb2 <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fb0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fb2:	4628      	mov	r0, r5
  400fb4:	b003      	add	sp, #12
  400fb6:	bd30      	pop	{r4, r5, pc}
  400fb8:	00400eb5 	.word	0x00400eb5
  400fbc:	00401ff9 	.word	0x00401ff9

00400fc0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400fc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fc2:	b172      	cbz	r2, 400fe2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400fc4:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400fc6:	68c3      	ldr	r3, [r0, #12]
  400fc8:	4413      	add	r3, r2
  400fca:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400fcc:	6844      	ldr	r4, [r0, #4]
  400fce:	42a3      	cmp	r3, r4
  400fd0:	d301      	bcc.n	400fd6 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400fd2:	6803      	ldr	r3, [r0, #0]
  400fd4:	60c3      	str	r3, [r0, #12]
  400fd6:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400fd8:	4608      	mov	r0, r1
  400fda:	68d9      	ldr	r1, [r3, #12]
  400fdc:	4b01      	ldr	r3, [pc, #4]	; (400fe4 <prvCopyDataFromQueue+0x24>)
  400fde:	4798      	blx	r3
  400fe0:	bd10      	pop	{r4, pc}
  400fe2:	4770      	bx	lr
  400fe4:	00409461 	.word	0x00409461

00400fe8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400fec:	4b20      	ldr	r3, [pc, #128]	; (401070 <prvUnlockQueue+0x88>)
  400fee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	dd18      	ble.n	401028 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ff6:	4d1f      	ldr	r5, [pc, #124]	; (401074 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ff8:	4f1f      	ldr	r7, [pc, #124]	; (401078 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ffa:	4e20      	ldr	r6, [pc, #128]	; (40107c <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ffe:	b133      	cbz	r3, 40100e <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401000:	4620      	mov	r0, r4
  401002:	2100      	movs	r1, #0
  401004:	47a8      	blx	r5
  401006:	2801      	cmp	r0, #1
  401008:	d108      	bne.n	40101c <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  40100a:	47b8      	blx	r7
  40100c:	e006      	b.n	40101c <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40100e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401010:	b153      	cbz	r3, 401028 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401012:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401016:	47b0      	blx	r6
  401018:	b100      	cbz	r0, 40101c <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  40101a:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  40101c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40101e:	3b01      	subs	r3, #1
  401020:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401022:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401024:	2b00      	cmp	r3, #0
  401026:	dce9      	bgt.n	400ffc <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401028:	f04f 33ff 	mov.w	r3, #4294967295
  40102c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40102e:	4b14      	ldr	r3, [pc, #80]	; (401080 <prvUnlockQueue+0x98>)
  401030:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401032:	4b0f      	ldr	r3, [pc, #60]	; (401070 <prvUnlockQueue+0x88>)
  401034:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401036:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401038:	2b00      	cmp	r3, #0
  40103a:	dd13      	ble.n	401064 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40103c:	6923      	ldr	r3, [r4, #16]
  40103e:	b91b      	cbnz	r3, 401048 <prvUnlockQueue+0x60>
  401040:	e010      	b.n	401064 <prvUnlockQueue+0x7c>
  401042:	6923      	ldr	r3, [r4, #16]
  401044:	b923      	cbnz	r3, 401050 <prvUnlockQueue+0x68>
  401046:	e00d      	b.n	401064 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401048:	f104 0610 	add.w	r6, r4, #16
  40104c:	4d0b      	ldr	r5, [pc, #44]	; (40107c <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40104e:	4f0a      	ldr	r7, [pc, #40]	; (401078 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401050:	4630      	mov	r0, r6
  401052:	47a8      	blx	r5
  401054:	b100      	cbz	r0, 401058 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401056:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401058:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40105a:	3b01      	subs	r3, #1
  40105c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40105e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401060:	2b00      	cmp	r3, #0
  401062:	dcee      	bgt.n	401042 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401064:	f04f 33ff 	mov.w	r3, #4294967295
  401068:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40106a:	4b05      	ldr	r3, [pc, #20]	; (401080 <prvUnlockQueue+0x98>)
  40106c:	4798      	blx	r3
  40106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401070:	00400b51 	.word	0x00400b51
  401074:	00400f3d 	.word	0x00400f3d
  401078:	00402155 	.word	0x00402155
  40107c:	00401ff9 	.word	0x00401ff9
  401080:	00400b9d 	.word	0x00400b9d

00401084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  401084:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401086:	b950      	cbnz	r0, 40109e <xQueueGenericReset+0x1a>
  401088:	f04f 0380 	mov.w	r3, #128	; 0x80
  40108c:	b672      	cpsid	i
  40108e:	f383 8811 	msr	BASEPRI, r3
  401092:	f3bf 8f6f 	isb	sy
  401096:	f3bf 8f4f 	dsb	sy
  40109a:	b662      	cpsie	i
  40109c:	e7fe      	b.n	40109c <xQueueGenericReset+0x18>
  40109e:	4604      	mov	r4, r0
  4010a0:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010a2:	4b18      	ldr	r3, [pc, #96]	; (401104 <xQueueGenericReset+0x80>)
  4010a4:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010a6:	6822      	ldr	r2, [r4, #0]
  4010a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ac:	fb03 f301 	mul.w	r3, r3, r1
  4010b0:	18d0      	adds	r0, r2, r3
  4010b2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010b4:	2000      	movs	r0, #0
  4010b6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010b8:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010ba:	1a5b      	subs	r3, r3, r1
  4010bc:	4413      	add	r3, r2
  4010be:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010c0:	f04f 33ff 	mov.w	r3, #4294967295
  4010c4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010c6:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4010c8:	b985      	cbnz	r5, 4010ec <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010ca:	6923      	ldr	r3, [r4, #16]
  4010cc:	b1ab      	cbz	r3, 4010fa <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010ce:	f104 0010 	add.w	r0, r4, #16
  4010d2:	4b0d      	ldr	r3, [pc, #52]	; (401108 <xQueueGenericReset+0x84>)
  4010d4:	4798      	blx	r3
  4010d6:	2801      	cmp	r0, #1
  4010d8:	d10f      	bne.n	4010fa <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010de:	4b0b      	ldr	r3, [pc, #44]	; (40110c <xQueueGenericReset+0x88>)
  4010e0:	601a      	str	r2, [r3, #0]
  4010e2:	f3bf 8f4f 	dsb	sy
  4010e6:	f3bf 8f6f 	isb	sy
  4010ea:	e006      	b.n	4010fa <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4010ec:	f104 0010 	add.w	r0, r4, #16
  4010f0:	4d07      	ldr	r5, [pc, #28]	; (401110 <xQueueGenericReset+0x8c>)
  4010f2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4010f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010f8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4010fa:	4b06      	ldr	r3, [pc, #24]	; (401114 <xQueueGenericReset+0x90>)
  4010fc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4010fe:	2001      	movs	r0, #1
  401100:	bd38      	pop	{r3, r4, r5, pc}
  401102:	bf00      	nop
  401104:	00400b51 	.word	0x00400b51
  401108:	00401ff9 	.word	0x00401ff9
  40110c:	e000ed04 	.word	0xe000ed04
  401110:	00400e25 	.word	0x00400e25
  401114:	00400b9d 	.word	0x00400b9d

00401118 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40111a:	b950      	cbnz	r0, 401132 <xQueueGenericCreate+0x1a>
  40111c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401120:	b672      	cpsid	i
  401122:	f383 8811 	msr	BASEPRI, r3
  401126:	f3bf 8f6f 	isb	sy
  40112a:	f3bf 8f4f 	dsb	sy
  40112e:	b662      	cpsie	i
  401130:	e7fe      	b.n	401130 <xQueueGenericCreate+0x18>
  401132:	460d      	mov	r5, r1
  401134:	4617      	mov	r7, r2
  401136:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401138:	b1c1      	cbz	r1, 40116c <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40113a:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40113e:	3059      	adds	r0, #89	; 0x59
  401140:	4b14      	ldr	r3, [pc, #80]	; (401194 <xQueueGenericCreate+0x7c>)
  401142:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401144:	4604      	mov	r4, r0
  401146:	b910      	cbnz	r0, 40114e <xQueueGenericCreate+0x36>
  401148:	e005      	b.n	401156 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40114a:	6024      	str	r4, [r4, #0]
  40114c:	e015      	b.n	40117a <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40114e:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401152:	6003      	str	r3, [r0, #0]
  401154:	e011      	b.n	40117a <xQueueGenericCreate+0x62>
  401156:	f04f 0380 	mov.w	r3, #128	; 0x80
  40115a:	b672      	cpsid	i
  40115c:	f383 8811 	msr	BASEPRI, r3
  401160:	f3bf 8f6f 	isb	sy
  401164:	f3bf 8f4f 	dsb	sy
  401168:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  40116a:	e7fe      	b.n	40116a <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40116c:	2058      	movs	r0, #88	; 0x58
  40116e:	4b09      	ldr	r3, [pc, #36]	; (401194 <xQueueGenericCreate+0x7c>)
  401170:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401172:	4604      	mov	r4, r0
  401174:	2800      	cmp	r0, #0
  401176:	d1e8      	bne.n	40114a <xQueueGenericCreate+0x32>
  401178:	e7ed      	b.n	401156 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  40117a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40117c:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40117e:	4620      	mov	r0, r4
  401180:	2101      	movs	r1, #1
  401182:	4b05      	ldr	r3, [pc, #20]	; (401198 <xQueueGenericCreate+0x80>)
  401184:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  401186:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  40118a:	2300      	movs	r3, #0
  40118c:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  40118e:	4620      	mov	r0, r4
  401190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401192:	bf00      	nop
  401194:	00400da9 	.word	0x00400da9
  401198:	00401085 	.word	0x00401085

0040119c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  40119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011a0:	b085      	sub	sp, #20
  4011a2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011a4:	b950      	cbnz	r0, 4011bc <xQueueGenericSend+0x20>
  4011a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011aa:	b672      	cpsid	i
  4011ac:	f383 8811 	msr	BASEPRI, r3
  4011b0:	f3bf 8f6f 	isb	sy
  4011b4:	f3bf 8f4f 	dsb	sy
  4011b8:	b662      	cpsie	i
  4011ba:	e7fe      	b.n	4011ba <xQueueGenericSend+0x1e>
  4011bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011be:	b961      	cbnz	r1, 4011da <xQueueGenericSend+0x3e>
  4011c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011c2:	b152      	cbz	r2, 4011da <xQueueGenericSend+0x3e>
  4011c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c8:	b672      	cpsid	i
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	f3bf 8f6f 	isb	sy
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	b662      	cpsie	i
  4011d8:	e7fe      	b.n	4011d8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011da:	2b02      	cmp	r3, #2
  4011dc:	d10d      	bne.n	4011fa <xQueueGenericSend+0x5e>
  4011de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4011e0:	2a01      	cmp	r2, #1
  4011e2:	d00a      	beq.n	4011fa <xQueueGenericSend+0x5e>
  4011e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011e8:	b672      	cpsid	i
  4011ea:	f383 8811 	msr	BASEPRI, r3
  4011ee:	f3bf 8f6f 	isb	sy
  4011f2:	f3bf 8f4f 	dsb	sy
  4011f6:	b662      	cpsie	i
  4011f8:	e7fe      	b.n	4011f8 <xQueueGenericSend+0x5c>
  4011fa:	461d      	mov	r5, r3
  4011fc:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4011fe:	4b51      	ldr	r3, [pc, #324]	; (401344 <xQueueGenericSend+0x1a8>)
  401200:	4798      	blx	r3
  401202:	b960      	cbnz	r0, 40121e <xQueueGenericSend+0x82>
  401204:	9b01      	ldr	r3, [sp, #4]
  401206:	b163      	cbz	r3, 401222 <xQueueGenericSend+0x86>
  401208:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120c:	b672      	cpsid	i
  40120e:	f383 8811 	msr	BASEPRI, r3
  401212:	f3bf 8f6f 	isb	sy
  401216:	f3bf 8f4f 	dsb	sy
  40121a:	b662      	cpsie	i
  40121c:	e7fe      	b.n	40121c <xQueueGenericSend+0x80>
  40121e:	2700      	movs	r7, #0
  401220:	e000      	b.n	401224 <xQueueGenericSend+0x88>
  401222:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401224:	4e48      	ldr	r6, [pc, #288]	; (401348 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401226:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401374 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40122a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401354 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40122e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401230:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401232:	2d02      	cmp	r5, #2
  401234:	d002      	beq.n	40123c <xQueueGenericSend+0xa0>
  401236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401238:	429a      	cmp	r2, r3
  40123a:	d233      	bcs.n	4012a4 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40123c:	4620      	mov	r0, r4
  40123e:	9900      	ldr	r1, [sp, #0]
  401240:	462a      	mov	r2, r5
  401242:	4b42      	ldr	r3, [pc, #264]	; (40134c <xQueueGenericSend+0x1b0>)
  401244:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401246:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401248:	b173      	cbz	r3, 401268 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40124a:	4620      	mov	r0, r4
  40124c:	4629      	mov	r1, r5
  40124e:	4b40      	ldr	r3, [pc, #256]	; (401350 <xQueueGenericSend+0x1b4>)
  401250:	4798      	blx	r3
  401252:	2801      	cmp	r0, #1
  401254:	d122      	bne.n	40129c <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40125a:	4b3e      	ldr	r3, [pc, #248]	; (401354 <xQueueGenericSend+0x1b8>)
  40125c:	601a      	str	r2, [r3, #0]
  40125e:	f3bf 8f4f 	dsb	sy
  401262:	f3bf 8f6f 	isb	sy
  401266:	e019      	b.n	40129c <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401268:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40126a:	b173      	cbz	r3, 40128a <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40126c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401270:	4b39      	ldr	r3, [pc, #228]	; (401358 <xQueueGenericSend+0x1bc>)
  401272:	4798      	blx	r3
  401274:	2801      	cmp	r0, #1
  401276:	d111      	bne.n	40129c <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40127c:	4b35      	ldr	r3, [pc, #212]	; (401354 <xQueueGenericSend+0x1b8>)
  40127e:	601a      	str	r2, [r3, #0]
  401280:	f3bf 8f4f 	dsb	sy
  401284:	f3bf 8f6f 	isb	sy
  401288:	e008      	b.n	40129c <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  40128a:	b138      	cbz	r0, 40129c <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  40128c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401290:	4b30      	ldr	r3, [pc, #192]	; (401354 <xQueueGenericSend+0x1b8>)
  401292:	601a      	str	r2, [r3, #0]
  401294:	f3bf 8f4f 	dsb	sy
  401298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  40129c:	4b2f      	ldr	r3, [pc, #188]	; (40135c <xQueueGenericSend+0x1c0>)
  40129e:	4798      	blx	r3
				return pdPASS;
  4012a0:	2001      	movs	r0, #1
  4012a2:	e04b      	b.n	40133c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012a4:	9b01      	ldr	r3, [sp, #4]
  4012a6:	b91b      	cbnz	r3, 4012b0 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012a8:	4b2c      	ldr	r3, [pc, #176]	; (40135c <xQueueGenericSend+0x1c0>)
  4012aa:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012ac:	2000      	movs	r0, #0
  4012ae:	e045      	b.n	40133c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012b0:	b917      	cbnz	r7, 4012b8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012b2:	a802      	add	r0, sp, #8
  4012b4:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012b6:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012b8:	4b28      	ldr	r3, [pc, #160]	; (40135c <xQueueGenericSend+0x1c0>)
  4012ba:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012bc:	4b28      	ldr	r3, [pc, #160]	; (401360 <xQueueGenericSend+0x1c4>)
  4012be:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012c0:	47b0      	blx	r6
  4012c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012c8:	d101      	bne.n	4012ce <xQueueGenericSend+0x132>
  4012ca:	2300      	movs	r3, #0
  4012cc:	6463      	str	r3, [r4, #68]	; 0x44
  4012ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012d4:	d101      	bne.n	4012da <xQueueGenericSend+0x13e>
  4012d6:	2300      	movs	r3, #0
  4012d8:	64a3      	str	r3, [r4, #72]	; 0x48
  4012da:	4b20      	ldr	r3, [pc, #128]	; (40135c <xQueueGenericSend+0x1c0>)
  4012dc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4012de:	a802      	add	r0, sp, #8
  4012e0:	a901      	add	r1, sp, #4
  4012e2:	4b20      	ldr	r3, [pc, #128]	; (401364 <xQueueGenericSend+0x1c8>)
  4012e4:	4798      	blx	r3
  4012e6:	bb18      	cbnz	r0, 401330 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4012e8:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4012ea:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4012ee:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4012f2:	4b1a      	ldr	r3, [pc, #104]	; (40135c <xQueueGenericSend+0x1c0>)
  4012f4:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4012f6:	45d3      	cmp	fp, sl
  4012f8:	d114      	bne.n	401324 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4012fa:	f104 0010 	add.w	r0, r4, #16
  4012fe:	9901      	ldr	r1, [sp, #4]
  401300:	4b19      	ldr	r3, [pc, #100]	; (401368 <xQueueGenericSend+0x1cc>)
  401302:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401304:	4620      	mov	r0, r4
  401306:	4b19      	ldr	r3, [pc, #100]	; (40136c <xQueueGenericSend+0x1d0>)
  401308:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40130a:	4b19      	ldr	r3, [pc, #100]	; (401370 <xQueueGenericSend+0x1d4>)
  40130c:	4798      	blx	r3
  40130e:	2800      	cmp	r0, #0
  401310:	d18d      	bne.n	40122e <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  401312:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401316:	f8c8 3000 	str.w	r3, [r8]
  40131a:	f3bf 8f4f 	dsb	sy
  40131e:	f3bf 8f6f 	isb	sy
  401322:	e784      	b.n	40122e <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401324:	4620      	mov	r0, r4
  401326:	4b11      	ldr	r3, [pc, #68]	; (40136c <xQueueGenericSend+0x1d0>)
  401328:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40132a:	4b11      	ldr	r3, [pc, #68]	; (401370 <xQueueGenericSend+0x1d4>)
  40132c:	4798      	blx	r3
  40132e:	e77e      	b.n	40122e <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401330:	4620      	mov	r0, r4
  401332:	4b0e      	ldr	r3, [pc, #56]	; (40136c <xQueueGenericSend+0x1d0>)
  401334:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401336:	4b0e      	ldr	r3, [pc, #56]	; (401370 <xQueueGenericSend+0x1d4>)
  401338:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40133a:	2000      	movs	r0, #0
		}
	}
}
  40133c:	b005      	add	sp, #20
  40133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401342:	bf00      	nop
  401344:	00402161 	.word	0x00402161
  401348:	00400b51 	.word	0x00400b51
  40134c:	00400eb5 	.word	0x00400eb5
  401350:	00400f3d 	.word	0x00400f3d
  401354:	e000ed04 	.word	0xe000ed04
  401358:	00401ff9 	.word	0x00401ff9
  40135c:	00400b9d 	.word	0x00400b9d
  401360:	00401ad5 	.word	0x00401ad5
  401364:	004020c1 	.word	0x004020c1
  401368:	00401ef5 	.word	0x00401ef5
  40136c:	00400fe9 	.word	0x00400fe9
  401370:	00401c25 	.word	0x00401c25
  401374:	00402091 	.word	0x00402091

00401378 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401378:	b950      	cbnz	r0, 401390 <xQueueGenericSendFromISR+0x18>
  40137a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40137e:	b672      	cpsid	i
  401380:	f383 8811 	msr	BASEPRI, r3
  401384:	f3bf 8f6f 	isb	sy
  401388:	f3bf 8f4f 	dsb	sy
  40138c:	b662      	cpsie	i
  40138e:	e7fe      	b.n	40138e <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  401390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401394:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401396:	b961      	cbnz	r1, 4013b2 <xQueueGenericSendFromISR+0x3a>
  401398:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40139a:	b150      	cbz	r0, 4013b2 <xQueueGenericSendFromISR+0x3a>
  40139c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013a0:	b672      	cpsid	i
  4013a2:	f383 8811 	msr	BASEPRI, r3
  4013a6:	f3bf 8f6f 	isb	sy
  4013aa:	f3bf 8f4f 	dsb	sy
  4013ae:	b662      	cpsie	i
  4013b0:	e7fe      	b.n	4013b0 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013b2:	2b02      	cmp	r3, #2
  4013b4:	d10d      	bne.n	4013d2 <xQueueGenericSendFromISR+0x5a>
  4013b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4013b8:	2801      	cmp	r0, #1
  4013ba:	d00a      	beq.n	4013d2 <xQueueGenericSendFromISR+0x5a>
  4013bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013c0:	b672      	cpsid	i
  4013c2:	f383 8811 	msr	BASEPRI, r3
  4013c6:	f3bf 8f6f 	isb	sy
  4013ca:	f3bf 8f4f 	dsb	sy
  4013ce:	b662      	cpsie	i
  4013d0:	e7fe      	b.n	4013d0 <xQueueGenericSendFromISR+0x58>
  4013d2:	461e      	mov	r6, r3
  4013d4:	4615      	mov	r5, r2
  4013d6:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013d8:	4b21      	ldr	r3, [pc, #132]	; (401460 <xQueueGenericSendFromISR+0xe8>)
  4013da:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4013dc:	f3ef 8711 	mrs	r7, BASEPRI
  4013e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013e4:	b672      	cpsid	i
  4013e6:	f383 8811 	msr	BASEPRI, r3
  4013ea:	f3bf 8f6f 	isb	sy
  4013ee:	f3bf 8f4f 	dsb	sy
  4013f2:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4013f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013f6:	2e02      	cmp	r6, #2
  4013f8:	d002      	beq.n	401400 <xQueueGenericSendFromISR+0x88>
  4013fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013fc:	429a      	cmp	r2, r3
  4013fe:	d223      	bcs.n	401448 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401400:	4620      	mov	r0, r4
  401402:	4641      	mov	r1, r8
  401404:	4632      	mov	r2, r6
  401406:	4b17      	ldr	r3, [pc, #92]	; (401464 <xQueueGenericSendFromISR+0xec>)
  401408:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  40140a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40140c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401410:	d115      	bne.n	40143e <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401412:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401414:	b143      	cbz	r3, 401428 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401416:	4620      	mov	r0, r4
  401418:	4631      	mov	r1, r6
  40141a:	4b13      	ldr	r3, [pc, #76]	; (401468 <xQueueGenericSendFromISR+0xf0>)
  40141c:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40141e:	2801      	cmp	r0, #1
  401420:	d114      	bne.n	40144c <xQueueGenericSendFromISR+0xd4>
  401422:	b19d      	cbz	r5, 40144c <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401424:	6028      	str	r0, [r5, #0]
  401426:	e016      	b.n	401456 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401428:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40142a:	b18b      	cbz	r3, 401450 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40142c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401430:	4b0e      	ldr	r3, [pc, #56]	; (40146c <xQueueGenericSendFromISR+0xf4>)
  401432:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401434:	b170      	cbz	r0, 401454 <xQueueGenericSendFromISR+0xdc>
  401436:	b16d      	cbz	r5, 401454 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401438:	2001      	movs	r0, #1
  40143a:	6028      	str	r0, [r5, #0]
  40143c:	e00b      	b.n	401456 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40143e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401440:	3301      	adds	r3, #1
  401442:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401444:	2001      	movs	r0, #1
  401446:	e006      	b.n	401456 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401448:	2000      	movs	r0, #0
  40144a:	e004      	b.n	401456 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  40144c:	2001      	movs	r0, #1
  40144e:	e002      	b.n	401456 <xQueueGenericSendFromISR+0xde>
  401450:	2001      	movs	r0, #1
  401452:	e000      	b.n	401456 <xQueueGenericSendFromISR+0xde>
  401454:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401456:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  40145a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40145e:	bf00      	nop
  401460:	00400d45 	.word	0x00400d45
  401464:	00400eb5 	.word	0x00400eb5
  401468:	00400f3d 	.word	0x00400f3d
  40146c:	00401ff9 	.word	0x00401ff9

00401470 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  401470:	b950      	cbnz	r0, 401488 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401472:	f04f 0380 	mov.w	r3, #128	; 0x80
  401476:	b672      	cpsid	i
  401478:	f383 8811 	msr	BASEPRI, r3
  40147c:	f3bf 8f6f 	isb	sy
  401480:	f3bf 8f4f 	dsb	sy
  401484:	b662      	cpsie	i
  401486:	e7fe      	b.n	401486 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  401488:	b570      	push	{r4, r5, r6, lr}
  40148a:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  40148c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40148e:	b153      	cbz	r3, 4014a6 <xQueueGiveFromISR+0x36>
  401490:	f04f 0380 	mov.w	r3, #128	; 0x80
  401494:	b672      	cpsid	i
  401496:	f383 8811 	msr	BASEPRI, r3
  40149a:	f3bf 8f6f 	isb	sy
  40149e:	f3bf 8f4f 	dsb	sy
  4014a2:	b662      	cpsie	i
  4014a4:	e7fe      	b.n	4014a4 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4014a6:	6803      	ldr	r3, [r0, #0]
  4014a8:	b963      	cbnz	r3, 4014c4 <xQueueGiveFromISR+0x54>
  4014aa:	6843      	ldr	r3, [r0, #4]
  4014ac:	b153      	cbz	r3, 4014c4 <xQueueGiveFromISR+0x54>
  4014ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b2:	b672      	cpsid	i
  4014b4:	f383 8811 	msr	BASEPRI, r3
  4014b8:	f3bf 8f6f 	isb	sy
  4014bc:	f3bf 8f4f 	dsb	sy
  4014c0:	b662      	cpsie	i
  4014c2:	e7fe      	b.n	4014c2 <xQueueGiveFromISR+0x52>
  4014c4:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4014c6:	4b1f      	ldr	r3, [pc, #124]	; (401544 <xQueueGiveFromISR+0xd4>)
  4014c8:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4014ca:	f3ef 8611 	mrs	r6, BASEPRI
  4014ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d2:	b672      	cpsid	i
  4014d4:	f383 8811 	msr	BASEPRI, r3
  4014d8:	f3bf 8f6f 	isb	sy
  4014dc:	f3bf 8f4f 	dsb	sy
  4014e0:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4014e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014e6:	429a      	cmp	r2, r3
  4014e8:	d221      	bcs.n	40152e <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  4014ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014ec:	3301      	adds	r3, #1
  4014ee:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014f6:	d115      	bne.n	401524 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4014f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4014fa:	b143      	cbz	r3, 40150e <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4014fc:	4620      	mov	r0, r4
  4014fe:	2100      	movs	r1, #0
  401500:	4b11      	ldr	r3, [pc, #68]	; (401548 <xQueueGiveFromISR+0xd8>)
  401502:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401504:	2801      	cmp	r0, #1
  401506:	d114      	bne.n	401532 <xQueueGiveFromISR+0xc2>
  401508:	b19d      	cbz	r5, 401532 <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  40150a:	6028      	str	r0, [r5, #0]
  40150c:	e016      	b.n	40153c <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40150e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401510:	b18b      	cbz	r3, 401536 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401512:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401516:	4b0d      	ldr	r3, [pc, #52]	; (40154c <xQueueGiveFromISR+0xdc>)
  401518:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  40151a:	b170      	cbz	r0, 40153a <xQueueGiveFromISR+0xca>
  40151c:	b16d      	cbz	r5, 40153a <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  40151e:	2001      	movs	r0, #1
  401520:	6028      	str	r0, [r5, #0]
  401522:	e00b      	b.n	40153c <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401526:	3301      	adds	r3, #1
  401528:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  40152a:	2001      	movs	r0, #1
  40152c:	e006      	b.n	40153c <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40152e:	2000      	movs	r0, #0
  401530:	e004      	b.n	40153c <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401532:	2001      	movs	r0, #1
  401534:	e002      	b.n	40153c <xQueueGiveFromISR+0xcc>
  401536:	2001      	movs	r0, #1
  401538:	e000      	b.n	40153c <xQueueGiveFromISR+0xcc>
  40153a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40153c:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401540:	bd70      	pop	{r4, r5, r6, pc}
  401542:	bf00      	nop
  401544:	00400d45 	.word	0x00400d45
  401548:	00400f3d 	.word	0x00400f3d
  40154c:	00401ff9 	.word	0x00401ff9

00401550 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401554:	b085      	sub	sp, #20
  401556:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401558:	b950      	cbnz	r0, 401570 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40155a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40155e:	b672      	cpsid	i
  401560:	f383 8811 	msr	BASEPRI, r3
  401564:	f3bf 8f6f 	isb	sy
  401568:	f3bf 8f4f 	dsb	sy
  40156c:	b662      	cpsie	i
  40156e:	e7fe      	b.n	40156e <xQueueGenericReceive+0x1e>
  401570:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401572:	b961      	cbnz	r1, 40158e <xQueueGenericReceive+0x3e>
  401574:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401576:	b152      	cbz	r2, 40158e <xQueueGenericReceive+0x3e>
  401578:	f04f 0380 	mov.w	r3, #128	; 0x80
  40157c:	b672      	cpsid	i
  40157e:	f383 8811 	msr	BASEPRI, r3
  401582:	f3bf 8f6f 	isb	sy
  401586:	f3bf 8f4f 	dsb	sy
  40158a:	b662      	cpsie	i
  40158c:	e7fe      	b.n	40158c <xQueueGenericReceive+0x3c>
  40158e:	4698      	mov	r8, r3
  401590:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401592:	4b52      	ldr	r3, [pc, #328]	; (4016dc <xQueueGenericReceive+0x18c>)
  401594:	4798      	blx	r3
  401596:	b960      	cbnz	r0, 4015b2 <xQueueGenericReceive+0x62>
  401598:	9b01      	ldr	r3, [sp, #4]
  40159a:	b163      	cbz	r3, 4015b6 <xQueueGenericReceive+0x66>
  40159c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015a0:	b672      	cpsid	i
  4015a2:	f383 8811 	msr	BASEPRI, r3
  4015a6:	f3bf 8f6f 	isb	sy
  4015aa:	f3bf 8f4f 	dsb	sy
  4015ae:	b662      	cpsie	i
  4015b0:	e7fe      	b.n	4015b0 <xQueueGenericReceive+0x60>
  4015b2:	2600      	movs	r6, #0
  4015b4:	e000      	b.n	4015b8 <xQueueGenericReceive+0x68>
  4015b6:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015b8:	4d49      	ldr	r5, [pc, #292]	; (4016e0 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015ba:	f8df a154 	ldr.w	sl, [pc, #340]	; 401710 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4015be:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4016f0 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015c2:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	d034      	beq.n	401634 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4015ca:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4015cc:	4620      	mov	r0, r4
  4015ce:	4659      	mov	r1, fp
  4015d0:	4b44      	ldr	r3, [pc, #272]	; (4016e4 <xQueueGenericReceive+0x194>)
  4015d2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4015d4:	f1b8 0f00 	cmp.w	r8, #0
  4015d8:	d118      	bne.n	40160c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4015da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015dc:	3b01      	subs	r3, #1
  4015de:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015e0:	6823      	ldr	r3, [r4, #0]
  4015e2:	b913      	cbnz	r3, 4015ea <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4015e4:	4b40      	ldr	r3, [pc, #256]	; (4016e8 <xQueueGenericReceive+0x198>)
  4015e6:	4798      	blx	r3
  4015e8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015ea:	6923      	ldr	r3, [r4, #16]
  4015ec:	b1f3      	cbz	r3, 40162c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015ee:	f104 0010 	add.w	r0, r4, #16
  4015f2:	4b3e      	ldr	r3, [pc, #248]	; (4016ec <xQueueGenericReceive+0x19c>)
  4015f4:	4798      	blx	r3
  4015f6:	2801      	cmp	r0, #1
  4015f8:	d118      	bne.n	40162c <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4015fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015fe:	4b3c      	ldr	r3, [pc, #240]	; (4016f0 <xQueueGenericReceive+0x1a0>)
  401600:	601a      	str	r2, [r3, #0]
  401602:	f3bf 8f4f 	dsb	sy
  401606:	f3bf 8f6f 	isb	sy
  40160a:	e00f      	b.n	40162c <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40160c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40160e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401610:	b163      	cbz	r3, 40162c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401612:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401616:	4b35      	ldr	r3, [pc, #212]	; (4016ec <xQueueGenericReceive+0x19c>)
  401618:	4798      	blx	r3
  40161a:	b138      	cbz	r0, 40162c <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  40161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401620:	4b33      	ldr	r3, [pc, #204]	; (4016f0 <xQueueGenericReceive+0x1a0>)
  401622:	601a      	str	r2, [r3, #0]
  401624:	f3bf 8f4f 	dsb	sy
  401628:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  40162c:	4b31      	ldr	r3, [pc, #196]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40162e:	4798      	blx	r3
				return pdPASS;
  401630:	2001      	movs	r0, #1
  401632:	e04f      	b.n	4016d4 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401634:	9b01      	ldr	r3, [sp, #4]
  401636:	b91b      	cbnz	r3, 401640 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401638:	4b2e      	ldr	r3, [pc, #184]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40163a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40163c:	2000      	movs	r0, #0
  40163e:	e049      	b.n	4016d4 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  401640:	b916      	cbnz	r6, 401648 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401642:	a802      	add	r0, sp, #8
  401644:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401646:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401648:	4b2a      	ldr	r3, [pc, #168]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40164a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40164c:	4b2a      	ldr	r3, [pc, #168]	; (4016f8 <xQueueGenericReceive+0x1a8>)
  40164e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401650:	47a8      	blx	r5
  401652:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401654:	f1b3 3fff 	cmp.w	r3, #4294967295
  401658:	d101      	bne.n	40165e <xQueueGenericReceive+0x10e>
  40165a:	2300      	movs	r3, #0
  40165c:	6463      	str	r3, [r4, #68]	; 0x44
  40165e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401660:	f1b3 3fff 	cmp.w	r3, #4294967295
  401664:	d101      	bne.n	40166a <xQueueGenericReceive+0x11a>
  401666:	2300      	movs	r3, #0
  401668:	64a3      	str	r3, [r4, #72]	; 0x48
  40166a:	4b22      	ldr	r3, [pc, #136]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40166c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40166e:	a802      	add	r0, sp, #8
  401670:	a901      	add	r1, sp, #4
  401672:	4b22      	ldr	r3, [pc, #136]	; (4016fc <xQueueGenericReceive+0x1ac>)
  401674:	4798      	blx	r3
  401676:	bb38      	cbnz	r0, 4016c8 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401678:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40167a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40167c:	4b1d      	ldr	r3, [pc, #116]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40167e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401680:	b9e7      	cbnz	r7, 4016bc <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401682:	6823      	ldr	r3, [r4, #0]
  401684:	b92b      	cbnz	r3, 401692 <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401686:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401688:	6860      	ldr	r0, [r4, #4]
  40168a:	4b1d      	ldr	r3, [pc, #116]	; (401700 <xQueueGenericReceive+0x1b0>)
  40168c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40168e:	4b19      	ldr	r3, [pc, #100]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  401690:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401692:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401696:	9901      	ldr	r1, [sp, #4]
  401698:	4b1a      	ldr	r3, [pc, #104]	; (401704 <xQueueGenericReceive+0x1b4>)
  40169a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40169c:	4620      	mov	r0, r4
  40169e:	4b1a      	ldr	r3, [pc, #104]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016a0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016a2:	4b1a      	ldr	r3, [pc, #104]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016a4:	4798      	blx	r3
  4016a6:	2800      	cmp	r0, #0
  4016a8:	d18b      	bne.n	4015c2 <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  4016aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016ae:	f8c9 3000 	str.w	r3, [r9]
  4016b2:	f3bf 8f4f 	dsb	sy
  4016b6:	f3bf 8f6f 	isb	sy
  4016ba:	e782      	b.n	4015c2 <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4016bc:	4620      	mov	r0, r4
  4016be:	4b12      	ldr	r3, [pc, #72]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016c2:	4b12      	ldr	r3, [pc, #72]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016c4:	4798      	blx	r3
  4016c6:	e77c      	b.n	4015c2 <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4016c8:	4620      	mov	r0, r4
  4016ca:	4b0f      	ldr	r3, [pc, #60]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016cc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016ce:	4b0f      	ldr	r3, [pc, #60]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016d0:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4016d2:	2000      	movs	r0, #0
		}
	}
}
  4016d4:	b005      	add	sp, #20
  4016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016da:	bf00      	nop
  4016dc:	00402161 	.word	0x00402161
  4016e0:	00400b51 	.word	0x00400b51
  4016e4:	00400fc1 	.word	0x00400fc1
  4016e8:	004022e9 	.word	0x004022e9
  4016ec:	00401ff9 	.word	0x00401ff9
  4016f0:	e000ed04 	.word	0xe000ed04
  4016f4:	00400b9d 	.word	0x00400b9d
  4016f8:	00401ad5 	.word	0x00401ad5
  4016fc:	004020c1 	.word	0x004020c1
  401700:	00402181 	.word	0x00402181
  401704:	00401ef5 	.word	0x00401ef5
  401708:	00400fe9 	.word	0x00400fe9
  40170c:	00401c25 	.word	0x00401c25
  401710:	00402091 	.word	0x00402091

00401714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401714:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <vQueueAddToRegistry+0x30>)
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	b12b      	cbz	r3, 401728 <vQueueAddToRegistry+0x14>
  40171c:	2301      	movs	r3, #1
  40171e:	4c09      	ldr	r4, [pc, #36]	; (401744 <vQueueAddToRegistry+0x30>)
  401720:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401724:	b942      	cbnz	r2, 401738 <vQueueAddToRegistry+0x24>
  401726:	e000      	b.n	40172a <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401728:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40172a:	4a06      	ldr	r2, [pc, #24]	; (401744 <vQueueAddToRegistry+0x30>)
  40172c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401734:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401736:	e002      	b.n	40173e <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401738:	3301      	adds	r3, #1
  40173a:	2b08      	cmp	r3, #8
  40173c:	d1f0      	bne.n	401720 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40173e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401742:	4770      	bx	lr
  401744:	2040c4fc 	.word	0x2040c4fc

00401748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401748:	b570      	push	{r4, r5, r6, lr}
  40174a:	4604      	mov	r4, r0
  40174c:	460e      	mov	r6, r1
  40174e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401750:	4b0d      	ldr	r3, [pc, #52]	; (401788 <vQueueWaitForMessageRestricted+0x40>)
  401752:	4798      	blx	r3
  401754:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401756:	f1b3 3fff 	cmp.w	r3, #4294967295
  40175a:	d101      	bne.n	401760 <vQueueWaitForMessageRestricted+0x18>
  40175c:	2300      	movs	r3, #0
  40175e:	6463      	str	r3, [r4, #68]	; 0x44
  401760:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401762:	f1b3 3fff 	cmp.w	r3, #4294967295
  401766:	d101      	bne.n	40176c <vQueueWaitForMessageRestricted+0x24>
  401768:	2300      	movs	r3, #0
  40176a:	64a3      	str	r3, [r4, #72]	; 0x48
  40176c:	4b07      	ldr	r3, [pc, #28]	; (40178c <vQueueWaitForMessageRestricted+0x44>)
  40176e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401772:	b92b      	cbnz	r3, 401780 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401774:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401778:	4631      	mov	r1, r6
  40177a:	462a      	mov	r2, r5
  40177c:	4b04      	ldr	r3, [pc, #16]	; (401790 <vQueueWaitForMessageRestricted+0x48>)
  40177e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401780:	4620      	mov	r0, r4
  401782:	4b04      	ldr	r3, [pc, #16]	; (401794 <vQueueWaitForMessageRestricted+0x4c>)
  401784:	4798      	blx	r3
  401786:	bd70      	pop	{r4, r5, r6, pc}
  401788:	00400b51 	.word	0x00400b51
  40178c:	00400b9d 	.word	0x00400b9d
  401790:	00401f79 	.word	0x00401f79
  401794:	00400fe9 	.word	0x00400fe9

00401798 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <prvResetNextTaskUnblockTime+0x24>)
  40179a:	681b      	ldr	r3, [r3, #0]
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	b923      	cbnz	r3, 4017aa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4017a0:	f04f 32ff 	mov.w	r2, #4294967295
  4017a4:	4b06      	ldr	r3, [pc, #24]	; (4017c0 <prvResetNextTaskUnblockTime+0x28>)
  4017a6:	601a      	str	r2, [r3, #0]
  4017a8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017aa:	4b04      	ldr	r3, [pc, #16]	; (4017bc <prvResetNextTaskUnblockTime+0x24>)
  4017ac:	681b      	ldr	r3, [r3, #0]
  4017ae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017b0:	68db      	ldr	r3, [r3, #12]
  4017b2:	685a      	ldr	r2, [r3, #4]
  4017b4:	4b02      	ldr	r3, [pc, #8]	; (4017c0 <prvResetNextTaskUnblockTime+0x28>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	4770      	bx	lr
  4017ba:	bf00      	nop
  4017bc:	2040c160 	.word	0x2040c160
  4017c0:	2040c3b0 	.word	0x2040c3b0

004017c4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4017c4:	b510      	push	{r4, lr}
  4017c6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017c8:	4b0e      	ldr	r3, [pc, #56]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4017ce:	4b0e      	ldr	r3, [pc, #56]	; (401808 <prvAddCurrentTaskToDelayedList+0x44>)
  4017d0:	681b      	ldr	r3, [r3, #0]
  4017d2:	4298      	cmp	r0, r3
  4017d4:	d207      	bcs.n	4017e6 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017d6:	4b0d      	ldr	r3, [pc, #52]	; (40180c <prvAddCurrentTaskToDelayedList+0x48>)
  4017d8:	6818      	ldr	r0, [r3, #0]
  4017da:	4b0a      	ldr	r3, [pc, #40]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017dc:	6819      	ldr	r1, [r3, #0]
  4017de:	3104      	adds	r1, #4
  4017e0:	4b0b      	ldr	r3, [pc, #44]	; (401810 <prvAddCurrentTaskToDelayedList+0x4c>)
  4017e2:	4798      	blx	r3
  4017e4:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017e6:	4b0b      	ldr	r3, [pc, #44]	; (401814 <prvAddCurrentTaskToDelayedList+0x50>)
  4017e8:	6818      	ldr	r0, [r3, #0]
  4017ea:	4b06      	ldr	r3, [pc, #24]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017ec:	6819      	ldr	r1, [r3, #0]
  4017ee:	3104      	adds	r1, #4
  4017f0:	4b07      	ldr	r3, [pc, #28]	; (401810 <prvAddCurrentTaskToDelayedList+0x4c>)
  4017f2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4017f4:	4b08      	ldr	r3, [pc, #32]	; (401818 <prvAddCurrentTaskToDelayedList+0x54>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	429c      	cmp	r4, r3
  4017fa:	d201      	bcs.n	401800 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4017fc:	4b06      	ldr	r3, [pc, #24]	; (401818 <prvAddCurrentTaskToDelayedList+0x54>)
  4017fe:	601c      	str	r4, [r3, #0]
  401800:	bd10      	pop	{r4, pc}
  401802:	bf00      	nop
  401804:	2040c390 	.word	0x2040c390
  401808:	2040c3ac 	.word	0x2040c3ac
  40180c:	2040c180 	.word	0x2040c180
  401810:	00400e5d 	.word	0x00400e5d
  401814:	2040c160 	.word	0x2040c160
  401818:	2040c3b0 	.word	0x2040c3b0

0040181c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  40181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401820:	b083      	sub	sp, #12
  401822:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401824:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401828:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  40182a:	b950      	cbnz	r0, 401842 <xTaskGenericCreate+0x26>
  40182c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401830:	b672      	cpsid	i
  401832:	f383 8811 	msr	BASEPRI, r3
  401836:	f3bf 8f6f 	isb	sy
  40183a:	f3bf 8f4f 	dsb	sy
  40183e:	b662      	cpsie	i
  401840:	e7fe      	b.n	401840 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401842:	2f18      	cmp	r7, #24
  401844:	d90a      	bls.n	40185c <xTaskGenericCreate+0x40>
  401846:	f04f 0380 	mov.w	r3, #128	; 0x80
  40184a:	b672      	cpsid	i
  40184c:	f383 8811 	msr	BASEPRI, r3
  401850:	f3bf 8f6f 	isb	sy
  401854:	f3bf 8f4f 	dsb	sy
  401858:	b662      	cpsie	i
  40185a:	e7fe      	b.n	40185a <xTaskGenericCreate+0x3e>
  40185c:	9001      	str	r0, [sp, #4]
  40185e:	9300      	str	r3, [sp, #0]
  401860:	4690      	mov	r8, r2
  401862:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401864:	b935      	cbnz	r5, 401874 <xTaskGenericCreate+0x58>
  401866:	0090      	lsls	r0, r2, #2
  401868:	4b5f      	ldr	r3, [pc, #380]	; (4019e8 <xTaskGenericCreate+0x1cc>)
  40186a:	4798      	blx	r3

		if( pxStack != NULL )
  40186c:	4605      	mov	r5, r0
  40186e:	2800      	cmp	r0, #0
  401870:	f000 80b4 	beq.w	4019dc <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401874:	2058      	movs	r0, #88	; 0x58
  401876:	4b5c      	ldr	r3, [pc, #368]	; (4019e8 <xTaskGenericCreate+0x1cc>)
  401878:	4798      	blx	r3

			if( pxNewTCB != NULL )
  40187a:	4604      	mov	r4, r0
  40187c:	b1a0      	cbz	r0, 4018a8 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40187e:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401880:	4628      	mov	r0, r5
  401882:	21a5      	movs	r1, #165	; 0xa5
  401884:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401888:	4b58      	ldr	r3, [pc, #352]	; (4019ec <xTaskGenericCreate+0x1d0>)
  40188a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40188c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  401890:	4445      	add	r5, r8
  401892:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401894:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401898:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40189c:	7833      	ldrb	r3, [r6, #0]
  40189e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018a2:	7833      	ldrb	r3, [r6, #0]
  4018a4:	b923      	cbnz	r3, 4018b0 <xTaskGenericCreate+0x94>
  4018a6:	e00f      	b.n	4018c8 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4018a8:	4628      	mov	r0, r5
  4018aa:	4b51      	ldr	r3, [pc, #324]	; (4019f0 <xTaskGenericCreate+0x1d4>)
  4018ac:	4798      	blx	r3
  4018ae:	e095      	b.n	4019dc <xTaskGenericCreate+0x1c0>
  4018b0:	4633      	mov	r3, r6
  4018b2:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018b6:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4018bc:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018c0:	7819      	ldrb	r1, [r3, #0]
  4018c2:	b109      	cbz	r1, 4018c8 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4018c4:	42b3      	cmp	r3, r6
  4018c6:	d1f7      	bne.n	4018b8 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018c8:	f04f 0800 	mov.w	r8, #0
  4018cc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4018d0:	463e      	mov	r6, r7
  4018d2:	2f18      	cmp	r7, #24
  4018d4:	bf28      	it	cs
  4018d6:	2618      	movcs	r6, #24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4018d8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018da:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018dc:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018e0:	f104 0904 	add.w	r9, r4, #4
  4018e4:	4648      	mov	r0, r9
  4018e6:	f8df b154 	ldr.w	fp, [pc, #340]	; 401a3c <xTaskGenericCreate+0x220>
  4018ea:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018ec:	f104 0018 	add.w	r0, r4, #24
  4018f0:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018f2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018f4:	f1c6 0619 	rsb	r6, r6, #25
  4018f8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4018fa:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4018fc:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401900:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401904:	4628      	mov	r0, r5
  401906:	9901      	ldr	r1, [sp, #4]
  401908:	9a00      	ldr	r2, [sp, #0]
  40190a:	4b3a      	ldr	r3, [pc, #232]	; (4019f4 <xTaskGenericCreate+0x1d8>)
  40190c:	4798      	blx	r3
  40190e:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  401910:	f1ba 0f00 	cmp.w	sl, #0
  401914:	d001      	beq.n	40191a <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401916:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  40191a:	4b37      	ldr	r3, [pc, #220]	; (4019f8 <xTaskGenericCreate+0x1dc>)
  40191c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40191e:	4a37      	ldr	r2, [pc, #220]	; (4019fc <xTaskGenericCreate+0x1e0>)
  401920:	6813      	ldr	r3, [r2, #0]
  401922:	3301      	adds	r3, #1
  401924:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401926:	4b36      	ldr	r3, [pc, #216]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401928:	681b      	ldr	r3, [r3, #0]
  40192a:	bb0b      	cbnz	r3, 401970 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40192c:	4b34      	ldr	r3, [pc, #208]	; (401a00 <xTaskGenericCreate+0x1e4>)
  40192e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401930:	6813      	ldr	r3, [r2, #0]
  401932:	2b01      	cmp	r3, #1
  401934:	d126      	bne.n	401984 <xTaskGenericCreate+0x168>
  401936:	4d33      	ldr	r5, [pc, #204]	; (401a04 <xTaskGenericCreate+0x1e8>)
  401938:	f505 78fa 	add.w	r8, r5, #500	; 0x1f4
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40193c:	4e32      	ldr	r6, [pc, #200]	; (401a08 <xTaskGenericCreate+0x1ec>)
  40193e:	4628      	mov	r0, r5
  401940:	47b0      	blx	r6
  401942:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401944:	4545      	cmp	r5, r8
  401946:	d1fa      	bne.n	40193e <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401948:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401a40 <xTaskGenericCreate+0x224>
  40194c:	4640      	mov	r0, r8
  40194e:	4d2e      	ldr	r5, [pc, #184]	; (401a08 <xTaskGenericCreate+0x1ec>)
  401950:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401952:	4e2e      	ldr	r6, [pc, #184]	; (401a0c <xTaskGenericCreate+0x1f0>)
  401954:	4630      	mov	r0, r6
  401956:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401958:	482d      	ldr	r0, [pc, #180]	; (401a10 <xTaskGenericCreate+0x1f4>)
  40195a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  40195c:	482d      	ldr	r0, [pc, #180]	; (401a14 <xTaskGenericCreate+0x1f8>)
  40195e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401960:	482d      	ldr	r0, [pc, #180]	; (401a18 <xTaskGenericCreate+0x1fc>)
  401962:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401964:	4b2d      	ldr	r3, [pc, #180]	; (401a1c <xTaskGenericCreate+0x200>)
  401966:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40196a:	4b2d      	ldr	r3, [pc, #180]	; (401a20 <xTaskGenericCreate+0x204>)
  40196c:	601e      	str	r6, [r3, #0]
  40196e:	e009      	b.n	401984 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401970:	4b2c      	ldr	r3, [pc, #176]	; (401a24 <xTaskGenericCreate+0x208>)
  401972:	681b      	ldr	r3, [r3, #0]
  401974:	b933      	cbnz	r3, 401984 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401976:	4b22      	ldr	r3, [pc, #136]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401978:	681b      	ldr	r3, [r3, #0]
  40197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40197c:	429f      	cmp	r7, r3
  40197e:	d301      	bcc.n	401984 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401980:	4b1f      	ldr	r3, [pc, #124]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401982:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401984:	4a28      	ldr	r2, [pc, #160]	; (401a28 <xTaskGenericCreate+0x20c>)
  401986:	6813      	ldr	r3, [r2, #0]
  401988:	3301      	adds	r3, #1
  40198a:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40198c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40198e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401990:	4926      	ldr	r1, [pc, #152]	; (401a2c <xTaskGenericCreate+0x210>)
  401992:	680b      	ldr	r3, [r1, #0]
  401994:	2201      	movs	r2, #1
  401996:	4082      	lsls	r2, r0
  401998:	4313      	orrs	r3, r2
  40199a:	600b      	str	r3, [r1, #0]
  40199c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019a0:	4b18      	ldr	r3, [pc, #96]	; (401a04 <xTaskGenericCreate+0x1e8>)
  4019a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019a6:	4649      	mov	r1, r9
  4019a8:	4b21      	ldr	r3, [pc, #132]	; (401a30 <xTaskGenericCreate+0x214>)
  4019aa:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4019ac:	4b21      	ldr	r3, [pc, #132]	; (401a34 <xTaskGenericCreate+0x218>)
  4019ae:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4019b0:	4b1c      	ldr	r3, [pc, #112]	; (401a24 <xTaskGenericCreate+0x208>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	b173      	cbz	r3, 4019d4 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019b6:	4b12      	ldr	r3, [pc, #72]	; (401a00 <xTaskGenericCreate+0x1e4>)
  4019b8:	681b      	ldr	r3, [r3, #0]
  4019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019bc:	429f      	cmp	r7, r3
  4019be:	d90b      	bls.n	4019d8 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4019c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019c4:	4b1c      	ldr	r3, [pc, #112]	; (401a38 <xTaskGenericCreate+0x21c>)
  4019c6:	601a      	str	r2, [r3, #0]
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4019d0:	2001      	movs	r0, #1
  4019d2:	e005      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
  4019d4:	2001      	movs	r0, #1
  4019d6:	e003      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
  4019d8:	2001      	movs	r0, #1
  4019da:	e001      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019dc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4019e0:	b003      	add	sp, #12
  4019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019e6:	bf00      	nop
  4019e8:	00400da9 	.word	0x00400da9
  4019ec:	00409595 	.word	0x00409595
  4019f0:	00400e09 	.word	0x00400e09
  4019f4:	00400b09 	.word	0x00400b09
  4019f8:	00400b51 	.word	0x00400b51
  4019fc:	2040c3b8 	.word	0x2040c3b8
  401a00:	2040c390 	.word	0x2040c390
  401a04:	2040c188 	.word	0x2040c188
  401a08:	00400e25 	.word	0x00400e25
  401a0c:	2040c3bc 	.word	0x2040c3bc
  401a10:	2040c394 	.word	0x2040c394
  401a14:	2040c37c 	.word	0x2040c37c
  401a18:	2040c3d0 	.word	0x2040c3d0
  401a1c:	2040c160 	.word	0x2040c160
  401a20:	2040c180 	.word	0x2040c180
  401a24:	2040c164 	.word	0x2040c164
  401a28:	2040c3b4 	.word	0x2040c3b4
  401a2c:	2040c3e4 	.word	0x2040c3e4
  401a30:	00400e45 	.word	0x00400e45
  401a34:	00400b9d 	.word	0x00400b9d
  401a38:	e000ed04 	.word	0xe000ed04
  401a3c:	00400e3d 	.word	0x00400e3d
  401a40:	2040c16c 	.word	0x2040c16c

00401a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401a44:	b510      	push	{r4, lr}
  401a46:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a48:	2300      	movs	r3, #0
  401a4a:	9300      	str	r3, [sp, #0]
  401a4c:	9301      	str	r3, [sp, #4]
  401a4e:	9302      	str	r3, [sp, #8]
  401a50:	9303      	str	r3, [sp, #12]
  401a52:	4818      	ldr	r0, [pc, #96]	; (401ab4 <vTaskStartScheduler+0x70>)
  401a54:	4918      	ldr	r1, [pc, #96]	; (401ab8 <vTaskStartScheduler+0x74>)
  401a56:	2282      	movs	r2, #130	; 0x82
  401a58:	4c18      	ldr	r4, [pc, #96]	; (401abc <vTaskStartScheduler+0x78>)
  401a5a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401a5c:	2801      	cmp	r0, #1
  401a5e:	d11a      	bne.n	401a96 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401a60:	4b17      	ldr	r3, [pc, #92]	; (401ac0 <vTaskStartScheduler+0x7c>)
  401a62:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a64:	2801      	cmp	r0, #1
  401a66:	d116      	bne.n	401a96 <vTaskStartScheduler+0x52>
  401a68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a6c:	b672      	cpsid	i
  401a6e:	f383 8811 	msr	BASEPRI, r3
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	f3bf 8f4f 	dsb	sy
  401a7a:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a7c:	f04f 32ff 	mov.w	r2, #4294967295
  401a80:	4b10      	ldr	r3, [pc, #64]	; (401ac4 <vTaskStartScheduler+0x80>)
  401a82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a84:	2201      	movs	r2, #1
  401a86:	4b10      	ldr	r3, [pc, #64]	; (401ac8 <vTaskStartScheduler+0x84>)
  401a88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a8a:	2200      	movs	r2, #0
  401a8c:	4b0f      	ldr	r3, [pc, #60]	; (401acc <vTaskStartScheduler+0x88>)
  401a8e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a90:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <vTaskStartScheduler+0x8c>)
  401a92:	4798      	blx	r3
  401a94:	e00b      	b.n	401aae <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401a96:	b950      	cbnz	r0, 401aae <vTaskStartScheduler+0x6a>
  401a98:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9c:	b672      	cpsid	i
  401a9e:	f383 8811 	msr	BASEPRI, r3
  401aa2:	f3bf 8f6f 	isb	sy
  401aa6:	f3bf 8f4f 	dsb	sy
  401aaa:	b662      	cpsie	i
  401aac:	e7fe      	b.n	401aac <vTaskStartScheduler+0x68>
	}
}
  401aae:	b004      	add	sp, #16
  401ab0:	bd10      	pop	{r4, pc}
  401ab2:	bf00      	nop
  401ab4:	00401dcd 	.word	0x00401dcd
  401ab8:	0040f06c 	.word	0x0040f06c
  401abc:	0040181d 	.word	0x0040181d
  401ac0:	004023d1 	.word	0x004023d1
  401ac4:	2040c3b0 	.word	0x2040c3b0
  401ac8:	2040c164 	.word	0x2040c164
  401acc:	2040c3ac 	.word	0x2040c3ac
  401ad0:	00400c81 	.word	0x00400c81

00401ad4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ad4:	4a02      	ldr	r2, [pc, #8]	; (401ae0 <vTaskSuspendAll+0xc>)
  401ad6:	6813      	ldr	r3, [r2, #0]
  401ad8:	3301      	adds	r3, #1
  401ada:	6013      	str	r3, [r2, #0]
  401adc:	4770      	bx	lr
  401ade:	bf00      	nop
  401ae0:	2040c3a8 	.word	0x2040c3a8

00401ae4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401ae4:	4b01      	ldr	r3, [pc, #4]	; (401aec <xTaskGetTickCount+0x8>)
  401ae6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401ae8:	4770      	bx	lr
  401aea:	bf00      	nop
  401aec:	2040c3ac 	.word	0x2040c3ac

00401af0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401af4:	4b3d      	ldr	r3, [pc, #244]	; (401bec <xTaskIncrementTick+0xfc>)
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	2b00      	cmp	r3, #0
  401afa:	d16a      	bne.n	401bd2 <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401afc:	4b3c      	ldr	r3, [pc, #240]	; (401bf0 <xTaskIncrementTick+0x100>)
  401afe:	681a      	ldr	r2, [r3, #0]
  401b00:	3201      	adds	r2, #1
  401b02:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b04:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401b06:	b9d6      	cbnz	r6, 401b3e <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401b08:	4b3a      	ldr	r3, [pc, #232]	; (401bf4 <xTaskIncrementTick+0x104>)
  401b0a:	681b      	ldr	r3, [r3, #0]
  401b0c:	681b      	ldr	r3, [r3, #0]
  401b0e:	b153      	cbz	r3, 401b26 <xTaskIncrementTick+0x36>
  401b10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b14:	b672      	cpsid	i
  401b16:	f383 8811 	msr	BASEPRI, r3
  401b1a:	f3bf 8f6f 	isb	sy
  401b1e:	f3bf 8f4f 	dsb	sy
  401b22:	b662      	cpsie	i
  401b24:	e7fe      	b.n	401b24 <xTaskIncrementTick+0x34>
  401b26:	4a33      	ldr	r2, [pc, #204]	; (401bf4 <xTaskIncrementTick+0x104>)
  401b28:	6811      	ldr	r1, [r2, #0]
  401b2a:	4b33      	ldr	r3, [pc, #204]	; (401bf8 <xTaskIncrementTick+0x108>)
  401b2c:	6818      	ldr	r0, [r3, #0]
  401b2e:	6010      	str	r0, [r2, #0]
  401b30:	6019      	str	r1, [r3, #0]
  401b32:	4a32      	ldr	r2, [pc, #200]	; (401bfc <xTaskIncrementTick+0x10c>)
  401b34:	6813      	ldr	r3, [r2, #0]
  401b36:	3301      	adds	r3, #1
  401b38:	6013      	str	r3, [r2, #0]
  401b3a:	4b31      	ldr	r3, [pc, #196]	; (401c00 <xTaskIncrementTick+0x110>)
  401b3c:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b3e:	4b31      	ldr	r3, [pc, #196]	; (401c04 <xTaskIncrementTick+0x114>)
  401b40:	681b      	ldr	r3, [r3, #0]
  401b42:	429e      	cmp	r6, r3
  401b44:	d201      	bcs.n	401b4a <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b46:	2400      	movs	r4, #0
  401b48:	e037      	b.n	401bba <xTaskIncrementTick+0xca>
  401b4a:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b4c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401bf4 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b50:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401c20 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b54:	4f2c      	ldr	r7, [pc, #176]	; (401c08 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b56:	f8d9 3000 	ldr.w	r3, [r9]
  401b5a:	681b      	ldr	r3, [r3, #0]
  401b5c:	b923      	cbnz	r3, 401b68 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401b5e:	f04f 32ff 	mov.w	r2, #4294967295
  401b62:	4b28      	ldr	r3, [pc, #160]	; (401c04 <xTaskIncrementTick+0x114>)
  401b64:	601a      	str	r2, [r3, #0]
						break;
  401b66:	e028      	b.n	401bba <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b68:	f8d9 3000 	ldr.w	r3, [r9]
  401b6c:	68db      	ldr	r3, [r3, #12]
  401b6e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b70:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b72:	429e      	cmp	r6, r3
  401b74:	d202      	bcs.n	401b7c <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b76:	4a23      	ldr	r2, [pc, #140]	; (401c04 <xTaskIncrementTick+0x114>)
  401b78:	6013      	str	r3, [r2, #0]
							break;
  401b7a:	e01e      	b.n	401bba <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b7c:	f105 0a04 	add.w	sl, r5, #4
  401b80:	4650      	mov	r0, sl
  401b82:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b84:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b86:	b113      	cbz	r3, 401b8e <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b88:	f105 0018 	add.w	r0, r5, #24
  401b8c:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b90:	683b      	ldr	r3, [r7, #0]
  401b92:	2201      	movs	r2, #1
  401b94:	4082      	lsls	r2, r0
  401b96:	4313      	orrs	r3, r2
  401b98:	603b      	str	r3, [r7, #0]
  401b9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b9e:	4b1b      	ldr	r3, [pc, #108]	; (401c0c <xTaskIncrementTick+0x11c>)
  401ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ba4:	4651      	mov	r1, sl
  401ba6:	4b1a      	ldr	r3, [pc, #104]	; (401c10 <xTaskIncrementTick+0x120>)
  401ba8:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401baa:	4b1a      	ldr	r3, [pc, #104]	; (401c14 <xTaskIncrementTick+0x124>)
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401bb2:	429a      	cmp	r2, r3
  401bb4:	bf28      	it	cs
  401bb6:	2401      	movcs	r4, #1
  401bb8:	e7cd      	b.n	401b56 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401bba:	4b16      	ldr	r3, [pc, #88]	; (401c14 <xTaskIncrementTick+0x124>)
  401bbc:	681b      	ldr	r3, [r3, #0]
  401bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bc4:	4a11      	ldr	r2, [pc, #68]	; (401c0c <xTaskIncrementTick+0x11c>)
  401bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401bca:	2b02      	cmp	r3, #2
  401bcc:	bf28      	it	cs
  401bce:	2401      	movcs	r4, #1
  401bd0:	e004      	b.n	401bdc <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401bd2:	4a11      	ldr	r2, [pc, #68]	; (401c18 <xTaskIncrementTick+0x128>)
  401bd4:	6813      	ldr	r3, [r2, #0]
  401bd6:	3301      	adds	r3, #1
  401bd8:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401bda:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401bdc:	4b0f      	ldr	r3, [pc, #60]	; (401c1c <xTaskIncrementTick+0x12c>)
  401bde:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401be0:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401be2:	bf0c      	ite	eq
  401be4:	4620      	moveq	r0, r4
  401be6:	2001      	movne	r0, #1
  401be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bec:	2040c3a8 	.word	0x2040c3a8
  401bf0:	2040c3ac 	.word	0x2040c3ac
  401bf4:	2040c160 	.word	0x2040c160
  401bf8:	2040c180 	.word	0x2040c180
  401bfc:	2040c15c 	.word	0x2040c15c
  401c00:	00401799 	.word	0x00401799
  401c04:	2040c3b0 	.word	0x2040c3b0
  401c08:	2040c3e4 	.word	0x2040c3e4
  401c0c:	2040c188 	.word	0x2040c188
  401c10:	00400e45 	.word	0x00400e45
  401c14:	2040c390 	.word	0x2040c390
  401c18:	2040c184 	.word	0x2040c184
  401c1c:	2040c3e8 	.word	0x2040c3e8
  401c20:	00400e91 	.word	0x00400e91

00401c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401c28:	4b36      	ldr	r3, [pc, #216]	; (401d04 <xTaskResumeAll+0xe0>)
  401c2a:	681b      	ldr	r3, [r3, #0]
  401c2c:	b953      	cbnz	r3, 401c44 <xTaskResumeAll+0x20>
  401c2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c32:	b672      	cpsid	i
  401c34:	f383 8811 	msr	BASEPRI, r3
  401c38:	f3bf 8f6f 	isb	sy
  401c3c:	f3bf 8f4f 	dsb	sy
  401c40:	b662      	cpsie	i
  401c42:	e7fe      	b.n	401c42 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401c44:	4b30      	ldr	r3, [pc, #192]	; (401d08 <xTaskResumeAll+0xe4>)
  401c46:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401c48:	4b2e      	ldr	r3, [pc, #184]	; (401d04 <xTaskResumeAll+0xe0>)
  401c4a:	681a      	ldr	r2, [r3, #0]
  401c4c:	3a01      	subs	r2, #1
  401c4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c50:	681b      	ldr	r3, [r3, #0]
  401c52:	2b00      	cmp	r3, #0
  401c54:	d14d      	bne.n	401cf2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c56:	4b2d      	ldr	r3, [pc, #180]	; (401d0c <xTaskResumeAll+0xe8>)
  401c58:	681b      	ldr	r3, [r3, #0]
  401c5a:	bb0b      	cbnz	r3, 401ca0 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c5c:	2400      	movs	r4, #0
  401c5e:	e04b      	b.n	401cf8 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c60:	68fb      	ldr	r3, [r7, #12]
  401c62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c64:	f104 0018 	add.w	r0, r4, #24
  401c68:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c6a:	f104 0804 	add.w	r8, r4, #4
  401c6e:	4640      	mov	r0, r8
  401c70:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c74:	682b      	ldr	r3, [r5, #0]
  401c76:	2201      	movs	r2, #1
  401c78:	4082      	lsls	r2, r0
  401c7a:	4313      	orrs	r3, r2
  401c7c:	602b      	str	r3, [r5, #0]
  401c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c82:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c86:	4641      	mov	r1, r8
  401c88:	4b21      	ldr	r3, [pc, #132]	; (401d10 <xTaskResumeAll+0xec>)
  401c8a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c8c:	4b21      	ldr	r3, [pc, #132]	; (401d14 <xTaskResumeAll+0xf0>)
  401c8e:	681b      	ldr	r3, [r3, #0]
  401c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c94:	429a      	cmp	r2, r3
  401c96:	d308      	bcc.n	401caa <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401c98:	2201      	movs	r2, #1
  401c9a:	4b1f      	ldr	r3, [pc, #124]	; (401d18 <xTaskResumeAll+0xf4>)
  401c9c:	601a      	str	r2, [r3, #0]
  401c9e:	e004      	b.n	401caa <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401ca0:	4f1e      	ldr	r7, [pc, #120]	; (401d1c <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ca2:	4e1f      	ldr	r6, [pc, #124]	; (401d20 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401ca4:	4d1f      	ldr	r5, [pc, #124]	; (401d24 <xTaskResumeAll+0x100>)
  401ca6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401d38 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401caa:	683b      	ldr	r3, [r7, #0]
  401cac:	2b00      	cmp	r3, #0
  401cae:	d1d7      	bne.n	401c60 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401cb0:	4b1d      	ldr	r3, [pc, #116]	; (401d28 <xTaskResumeAll+0x104>)
  401cb2:	681b      	ldr	r3, [r3, #0]
  401cb4:	b17b      	cbz	r3, 401cd6 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cb6:	4b1c      	ldr	r3, [pc, #112]	; (401d28 <xTaskResumeAll+0x104>)
  401cb8:	681b      	ldr	r3, [r3, #0]
  401cba:	b163      	cbz	r3, 401cd6 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cbc:	4e1b      	ldr	r6, [pc, #108]	; (401d2c <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401cbe:	4d16      	ldr	r5, [pc, #88]	; (401d18 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cc0:	4c19      	ldr	r4, [pc, #100]	; (401d28 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cc2:	47b0      	blx	r6
  401cc4:	b108      	cbz	r0, 401cca <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401cc6:	2301      	movs	r3, #1
  401cc8:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cca:	6823      	ldr	r3, [r4, #0]
  401ccc:	3b01      	subs	r3, #1
  401cce:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cd0:	6823      	ldr	r3, [r4, #0]
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d1f5      	bne.n	401cc2 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401cd6:	4b10      	ldr	r3, [pc, #64]	; (401d18 <xTaskResumeAll+0xf4>)
  401cd8:	681b      	ldr	r3, [r3, #0]
  401cda:	2b01      	cmp	r3, #1
  401cdc:	d10b      	bne.n	401cf6 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ce2:	4b13      	ldr	r3, [pc, #76]	; (401d30 <xTaskResumeAll+0x10c>)
  401ce4:	601a      	str	r2, [r3, #0]
  401ce6:	f3bf 8f4f 	dsb	sy
  401cea:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401cee:	2401      	movs	r4, #1
  401cf0:	e002      	b.n	401cf8 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401cf2:	2400      	movs	r4, #0
  401cf4:	e000      	b.n	401cf8 <xTaskResumeAll+0xd4>
  401cf6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401cf8:	4b0e      	ldr	r3, [pc, #56]	; (401d34 <xTaskResumeAll+0x110>)
  401cfa:	4798      	blx	r3

	return xAlreadyYielded;
}
  401cfc:	4620      	mov	r0, r4
  401cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d02:	bf00      	nop
  401d04:	2040c3a8 	.word	0x2040c3a8
  401d08:	00400b51 	.word	0x00400b51
  401d0c:	2040c3b8 	.word	0x2040c3b8
  401d10:	00400e45 	.word	0x00400e45
  401d14:	2040c390 	.word	0x2040c390
  401d18:	2040c3e8 	.word	0x2040c3e8
  401d1c:	2040c394 	.word	0x2040c394
  401d20:	00400e91 	.word	0x00400e91
  401d24:	2040c3e4 	.word	0x2040c3e4
  401d28:	2040c184 	.word	0x2040c184
  401d2c:	00401af1 	.word	0x00401af1
  401d30:	e000ed04 	.word	0xe000ed04
  401d34:	00400b9d 	.word	0x00400b9d
  401d38:	2040c188 	.word	0x2040c188

00401d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401d3c:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d3e:	2800      	cmp	r0, #0
  401d40:	d029      	beq.n	401d96 <vTaskDelay+0x5a>
  401d42:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401d44:	4b18      	ldr	r3, [pc, #96]	; (401da8 <vTaskDelay+0x6c>)
  401d46:	681b      	ldr	r3, [r3, #0]
  401d48:	b153      	cbz	r3, 401d60 <vTaskDelay+0x24>
  401d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d4e:	b672      	cpsid	i
  401d50:	f383 8811 	msr	BASEPRI, r3
  401d54:	f3bf 8f6f 	isb	sy
  401d58:	f3bf 8f4f 	dsb	sy
  401d5c:	b662      	cpsie	i
  401d5e:	e7fe      	b.n	401d5e <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d60:	4b12      	ldr	r3, [pc, #72]	; (401dac <vTaskDelay+0x70>)
  401d62:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d64:	4b12      	ldr	r3, [pc, #72]	; (401db0 <vTaskDelay+0x74>)
  401d66:	681b      	ldr	r3, [r3, #0]
  401d68:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d6a:	4b12      	ldr	r3, [pc, #72]	; (401db4 <vTaskDelay+0x78>)
  401d6c:	6818      	ldr	r0, [r3, #0]
  401d6e:	3004      	adds	r0, #4
  401d70:	4b11      	ldr	r3, [pc, #68]	; (401db8 <vTaskDelay+0x7c>)
  401d72:	4798      	blx	r3
  401d74:	b948      	cbnz	r0, 401d8a <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d76:	4b0f      	ldr	r3, [pc, #60]	; (401db4 <vTaskDelay+0x78>)
  401d78:	681a      	ldr	r2, [r3, #0]
  401d7a:	4910      	ldr	r1, [pc, #64]	; (401dbc <vTaskDelay+0x80>)
  401d7c:	680b      	ldr	r3, [r1, #0]
  401d7e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d80:	2201      	movs	r2, #1
  401d82:	4082      	lsls	r2, r0
  401d84:	ea23 0302 	bic.w	r3, r3, r2
  401d88:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d8a:	4620      	mov	r0, r4
  401d8c:	4b0c      	ldr	r3, [pc, #48]	; (401dc0 <vTaskDelay+0x84>)
  401d8e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d90:	4b0c      	ldr	r3, [pc, #48]	; (401dc4 <vTaskDelay+0x88>)
  401d92:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401d94:	b938      	cbnz	r0, 401da6 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d9a:	4b0b      	ldr	r3, [pc, #44]	; (401dc8 <vTaskDelay+0x8c>)
  401d9c:	601a      	str	r2, [r3, #0]
  401d9e:	f3bf 8f4f 	dsb	sy
  401da2:	f3bf 8f6f 	isb	sy
  401da6:	bd10      	pop	{r4, pc}
  401da8:	2040c3a8 	.word	0x2040c3a8
  401dac:	00401ad5 	.word	0x00401ad5
  401db0:	2040c3ac 	.word	0x2040c3ac
  401db4:	2040c390 	.word	0x2040c390
  401db8:	00400e91 	.word	0x00400e91
  401dbc:	2040c3e4 	.word	0x2040c3e4
  401dc0:	004017c5 	.word	0x004017c5
  401dc4:	00401c25 	.word	0x00401c25
  401dc8:	e000ed04 	.word	0xe000ed04

00401dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401dcc:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dce:	4d18      	ldr	r5, [pc, #96]	; (401e30 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401dd0:	4e18      	ldr	r6, [pc, #96]	; (401e34 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dd2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e54 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401dd6:	4f18      	ldr	r7, [pc, #96]	; (401e38 <prvIdleTask+0x6c>)
  401dd8:	e019      	b.n	401e0e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dda:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ddc:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401dde:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401de0:	b1ac      	cbz	r4, 401e0e <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401de2:	4b16      	ldr	r3, [pc, #88]	; (401e3c <prvIdleTask+0x70>)
  401de4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401de6:	68f3      	ldr	r3, [r6, #12]
  401de8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401dea:	1d20      	adds	r0, r4, #4
  401dec:	4b14      	ldr	r3, [pc, #80]	; (401e40 <prvIdleTask+0x74>)
  401dee:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401df0:	4a14      	ldr	r2, [pc, #80]	; (401e44 <prvIdleTask+0x78>)
  401df2:	6813      	ldr	r3, [r2, #0]
  401df4:	3b01      	subs	r3, #1
  401df6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401df8:	682b      	ldr	r3, [r5, #0]
  401dfa:	3b01      	subs	r3, #1
  401dfc:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401dfe:	4b12      	ldr	r3, [pc, #72]	; (401e48 <prvIdleTask+0x7c>)
  401e00:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401e02:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e04:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e58 <prvIdleTask+0x8c>
  401e08:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401e0a:	4620      	mov	r0, r4
  401e0c:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e0e:	682b      	ldr	r3, [r5, #0]
  401e10:	2b00      	cmp	r3, #0
  401e12:	d1e2      	bne.n	401dda <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e14:	4b0d      	ldr	r3, [pc, #52]	; (401e4c <prvIdleTask+0x80>)
  401e16:	681b      	ldr	r3, [r3, #0]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d9f8      	bls.n	401e0e <prvIdleTask+0x42>
			{
				taskYIELD();
  401e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e20:	4b0b      	ldr	r3, [pc, #44]	; (401e50 <prvIdleTask+0x84>)
  401e22:	601a      	str	r2, [r3, #0]
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	f3bf 8f6f 	isb	sy
  401e2c:	e7d1      	b.n	401dd2 <prvIdleTask+0x6>
  401e2e:	bf00      	nop
  401e30:	2040c168 	.word	0x2040c168
  401e34:	2040c37c 	.word	0x2040c37c
  401e38:	00401c25 	.word	0x00401c25
  401e3c:	00400b51 	.word	0x00400b51
  401e40:	00400e91 	.word	0x00400e91
  401e44:	2040c3b8 	.word	0x2040c3b8
  401e48:	00400b9d 	.word	0x00400b9d
  401e4c:	2040c188 	.word	0x2040c188
  401e50:	e000ed04 	.word	0xe000ed04
  401e54:	00401ad5 	.word	0x00401ad5
  401e58:	00400e09 	.word	0x00400e09

00401e5c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401e5c:	4b20      	ldr	r3, [pc, #128]	; (401ee0 <vTaskSwitchContext+0x84>)
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	b11b      	cbz	r3, 401e6a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401e62:	2201      	movs	r2, #1
  401e64:	4b1f      	ldr	r3, [pc, #124]	; (401ee4 <vTaskSwitchContext+0x88>)
  401e66:	601a      	str	r2, [r3, #0]
  401e68:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401e6a:	2200      	movs	r2, #0
  401e6c:	4b1d      	ldr	r3, [pc, #116]	; (401ee4 <vTaskSwitchContext+0x88>)
  401e6e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e70:	4b1d      	ldr	r3, [pc, #116]	; (401ee8 <vTaskSwitchContext+0x8c>)
  401e72:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401e74:	fab3 f383 	clz	r3, r3
  401e78:	b2db      	uxtb	r3, r3
  401e7a:	f1c3 031f 	rsb	r3, r3, #31
  401e7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e82:	4a1a      	ldr	r2, [pc, #104]	; (401eec <vTaskSwitchContext+0x90>)
  401e84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e88:	b952      	cbnz	r2, 401ea0 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e8e:	b672      	cpsid	i
  401e90:	f383 8811 	msr	BASEPRI, r3
  401e94:	f3bf 8f6f 	isb	sy
  401e98:	f3bf 8f4f 	dsb	sy
  401e9c:	b662      	cpsie	i
  401e9e:	e7fe      	b.n	401e9e <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401ea0:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401ea2:	4a12      	ldr	r2, [pc, #72]	; (401eec <vTaskSwitchContext+0x90>)
  401ea4:	0099      	lsls	r1, r3, #2
  401ea6:	18c8      	adds	r0, r1, r3
  401ea8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401eac:	6844      	ldr	r4, [r0, #4]
  401eae:	6864      	ldr	r4, [r4, #4]
  401eb0:	6044      	str	r4, [r0, #4]
  401eb2:	4602      	mov	r2, r0
  401eb4:	3208      	adds	r2, #8
  401eb6:	4294      	cmp	r4, r2
  401eb8:	d106      	bne.n	401ec8 <vTaskSwitchContext+0x6c>
  401eba:	6860      	ldr	r0, [r4, #4]
  401ebc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ec0:	4a0a      	ldr	r2, [pc, #40]	; (401eec <vTaskSwitchContext+0x90>)
  401ec2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401ec6:	6050      	str	r0, [r2, #4]
  401ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ecc:	4a07      	ldr	r2, [pc, #28]	; (401eec <vTaskSwitchContext+0x90>)
  401ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ed2:	685b      	ldr	r3, [r3, #4]
  401ed4:	68da      	ldr	r2, [r3, #12]
  401ed6:	4b06      	ldr	r3, [pc, #24]	; (401ef0 <vTaskSwitchContext+0x94>)
  401ed8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401eda:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ede:	4770      	bx	lr
  401ee0:	2040c3a8 	.word	0x2040c3a8
  401ee4:	2040c3e8 	.word	0x2040c3e8
  401ee8:	2040c3e4 	.word	0x2040c3e4
  401eec:	2040c188 	.word	0x2040c188
  401ef0:	2040c390 	.word	0x2040c390

00401ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401ef4:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401ef6:	b950      	cbnz	r0, 401f0e <vTaskPlaceOnEventList+0x1a>
  401ef8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401efc:	b672      	cpsid	i
  401efe:	f383 8811 	msr	BASEPRI, r3
  401f02:	f3bf 8f6f 	isb	sy
  401f06:	f3bf 8f4f 	dsb	sy
  401f0a:	b662      	cpsie	i
  401f0c:	e7fe      	b.n	401f0c <vTaskPlaceOnEventList+0x18>
  401f0e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f10:	4d11      	ldr	r5, [pc, #68]	; (401f58 <vTaskPlaceOnEventList+0x64>)
  401f12:	6829      	ldr	r1, [r5, #0]
  401f14:	3118      	adds	r1, #24
  401f16:	4b11      	ldr	r3, [pc, #68]	; (401f5c <vTaskPlaceOnEventList+0x68>)
  401f18:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f1a:	6828      	ldr	r0, [r5, #0]
  401f1c:	3004      	adds	r0, #4
  401f1e:	4b10      	ldr	r3, [pc, #64]	; (401f60 <vTaskPlaceOnEventList+0x6c>)
  401f20:	4798      	blx	r3
  401f22:	b940      	cbnz	r0, 401f36 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f24:	682a      	ldr	r2, [r5, #0]
  401f26:	490f      	ldr	r1, [pc, #60]	; (401f64 <vTaskPlaceOnEventList+0x70>)
  401f28:	680b      	ldr	r3, [r1, #0]
  401f2a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f2c:	2201      	movs	r2, #1
  401f2e:	4082      	lsls	r2, r0
  401f30:	ea23 0302 	bic.w	r3, r3, r2
  401f34:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401f36:	f1b4 3fff 	cmp.w	r4, #4294967295
  401f3a:	d106      	bne.n	401f4a <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f3c:	4b06      	ldr	r3, [pc, #24]	; (401f58 <vTaskPlaceOnEventList+0x64>)
  401f3e:	6819      	ldr	r1, [r3, #0]
  401f40:	4809      	ldr	r0, [pc, #36]	; (401f68 <vTaskPlaceOnEventList+0x74>)
  401f42:	3104      	adds	r1, #4
  401f44:	4b09      	ldr	r3, [pc, #36]	; (401f6c <vTaskPlaceOnEventList+0x78>)
  401f46:	4798      	blx	r3
  401f48:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401f4a:	4b09      	ldr	r3, [pc, #36]	; (401f70 <vTaskPlaceOnEventList+0x7c>)
  401f4c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f4e:	4420      	add	r0, r4
  401f50:	4b08      	ldr	r3, [pc, #32]	; (401f74 <vTaskPlaceOnEventList+0x80>)
  401f52:	4798      	blx	r3
  401f54:	bd38      	pop	{r3, r4, r5, pc}
  401f56:	bf00      	nop
  401f58:	2040c390 	.word	0x2040c390
  401f5c:	00400e5d 	.word	0x00400e5d
  401f60:	00400e91 	.word	0x00400e91
  401f64:	2040c3e4 	.word	0x2040c3e4
  401f68:	2040c3d0 	.word	0x2040c3d0
  401f6c:	00400e45 	.word	0x00400e45
  401f70:	2040c3ac 	.word	0x2040c3ac
  401f74:	004017c5 	.word	0x004017c5

00401f78 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401f78:	b950      	cbnz	r0, 401f90 <vTaskPlaceOnEventListRestricted+0x18>
  401f7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f7e:	b672      	cpsid	i
  401f80:	f383 8811 	msr	BASEPRI, r3
  401f84:	f3bf 8f6f 	isb	sy
  401f88:	f3bf 8f4f 	dsb	sy
  401f8c:	b662      	cpsie	i
  401f8e:	e7fe      	b.n	401f8e <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401f90:	b570      	push	{r4, r5, r6, lr}
  401f92:	4615      	mov	r5, r2
  401f94:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f96:	4e11      	ldr	r6, [pc, #68]	; (401fdc <vTaskPlaceOnEventListRestricted+0x64>)
  401f98:	6831      	ldr	r1, [r6, #0]
  401f9a:	3118      	adds	r1, #24
  401f9c:	4b10      	ldr	r3, [pc, #64]	; (401fe0 <vTaskPlaceOnEventListRestricted+0x68>)
  401f9e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fa0:	6830      	ldr	r0, [r6, #0]
  401fa2:	3004      	adds	r0, #4
  401fa4:	4b0f      	ldr	r3, [pc, #60]	; (401fe4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401fa6:	4798      	blx	r3
  401fa8:	b940      	cbnz	r0, 401fbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401faa:	6832      	ldr	r2, [r6, #0]
  401fac:	490e      	ldr	r1, [pc, #56]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x70>)
  401fae:	680b      	ldr	r3, [r1, #0]
  401fb0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401fb2:	2201      	movs	r2, #1
  401fb4:	4082      	lsls	r2, r0
  401fb6:	ea23 0302 	bic.w	r3, r3, r2
  401fba:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401fbc:	2d01      	cmp	r5, #1
  401fbe:	d106      	bne.n	401fce <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fc0:	4b06      	ldr	r3, [pc, #24]	; (401fdc <vTaskPlaceOnEventListRestricted+0x64>)
  401fc2:	6819      	ldr	r1, [r3, #0]
  401fc4:	4809      	ldr	r0, [pc, #36]	; (401fec <vTaskPlaceOnEventListRestricted+0x74>)
  401fc6:	3104      	adds	r1, #4
  401fc8:	4b05      	ldr	r3, [pc, #20]	; (401fe0 <vTaskPlaceOnEventListRestricted+0x68>)
  401fca:	4798      	blx	r3
  401fcc:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401fce:	4b08      	ldr	r3, [pc, #32]	; (401ff0 <vTaskPlaceOnEventListRestricted+0x78>)
  401fd0:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fd2:	4420      	add	r0, r4
  401fd4:	4b07      	ldr	r3, [pc, #28]	; (401ff4 <vTaskPlaceOnEventListRestricted+0x7c>)
  401fd6:	4798      	blx	r3
  401fd8:	bd70      	pop	{r4, r5, r6, pc}
  401fda:	bf00      	nop
  401fdc:	2040c390 	.word	0x2040c390
  401fe0:	00400e45 	.word	0x00400e45
  401fe4:	00400e91 	.word	0x00400e91
  401fe8:	2040c3e4 	.word	0x2040c3e4
  401fec:	2040c3d0 	.word	0x2040c3d0
  401ff0:	2040c3ac 	.word	0x2040c3ac
  401ff4:	004017c5 	.word	0x004017c5

00401ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401ff8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ffa:	68c3      	ldr	r3, [r0, #12]
  401ffc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ffe:	b954      	cbnz	r4, 402016 <xTaskRemoveFromEventList+0x1e>
  402000:	f04f 0380 	mov.w	r3, #128	; 0x80
  402004:	b672      	cpsid	i
  402006:	f383 8811 	msr	BASEPRI, r3
  40200a:	f3bf 8f6f 	isb	sy
  40200e:	f3bf 8f4f 	dsb	sy
  402012:	b662      	cpsie	i
  402014:	e7fe      	b.n	402014 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402016:	f104 0518 	add.w	r5, r4, #24
  40201a:	4628      	mov	r0, r5
  40201c:	4b14      	ldr	r3, [pc, #80]	; (402070 <xTaskRemoveFromEventList+0x78>)
  40201e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402020:	4b14      	ldr	r3, [pc, #80]	; (402074 <xTaskRemoveFromEventList+0x7c>)
  402022:	681b      	ldr	r3, [r3, #0]
  402024:	b99b      	cbnz	r3, 40204e <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402026:	1d25      	adds	r5, r4, #4
  402028:	4628      	mov	r0, r5
  40202a:	4b11      	ldr	r3, [pc, #68]	; (402070 <xTaskRemoveFromEventList+0x78>)
  40202c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40202e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402030:	4911      	ldr	r1, [pc, #68]	; (402078 <xTaskRemoveFromEventList+0x80>)
  402032:	680b      	ldr	r3, [r1, #0]
  402034:	2201      	movs	r2, #1
  402036:	4082      	lsls	r2, r0
  402038:	4313      	orrs	r3, r2
  40203a:	600b      	str	r3, [r1, #0]
  40203c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402040:	4b0e      	ldr	r3, [pc, #56]	; (40207c <xTaskRemoveFromEventList+0x84>)
  402042:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402046:	4629      	mov	r1, r5
  402048:	4b0d      	ldr	r3, [pc, #52]	; (402080 <xTaskRemoveFromEventList+0x88>)
  40204a:	4798      	blx	r3
  40204c:	e003      	b.n	402056 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40204e:	480d      	ldr	r0, [pc, #52]	; (402084 <xTaskRemoveFromEventList+0x8c>)
  402050:	4629      	mov	r1, r5
  402052:	4b0b      	ldr	r3, [pc, #44]	; (402080 <xTaskRemoveFromEventList+0x88>)
  402054:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402056:	4b0c      	ldr	r3, [pc, #48]	; (402088 <xTaskRemoveFromEventList+0x90>)
  402058:	681b      	ldr	r3, [r3, #0]
  40205a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40205e:	429a      	cmp	r2, r3
  402060:	d903      	bls.n	40206a <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402062:	2001      	movs	r0, #1
  402064:	4b09      	ldr	r3, [pc, #36]	; (40208c <xTaskRemoveFromEventList+0x94>)
  402066:	6018      	str	r0, [r3, #0]
  402068:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  40206a:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  40206c:	bd38      	pop	{r3, r4, r5, pc}
  40206e:	bf00      	nop
  402070:	00400e91 	.word	0x00400e91
  402074:	2040c3a8 	.word	0x2040c3a8
  402078:	2040c3e4 	.word	0x2040c3e4
  40207c:	2040c188 	.word	0x2040c188
  402080:	00400e45 	.word	0x00400e45
  402084:	2040c394 	.word	0x2040c394
  402088:	2040c390 	.word	0x2040c390
  40208c:	2040c3e8 	.word	0x2040c3e8

00402090 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  402090:	b950      	cbnz	r0, 4020a8 <vTaskSetTimeOutState+0x18>
  402092:	f04f 0380 	mov.w	r3, #128	; 0x80
  402096:	b672      	cpsid	i
  402098:	f383 8811 	msr	BASEPRI, r3
  40209c:	f3bf 8f6f 	isb	sy
  4020a0:	f3bf 8f4f 	dsb	sy
  4020a4:	b662      	cpsie	i
  4020a6:	e7fe      	b.n	4020a6 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4020a8:	4a03      	ldr	r2, [pc, #12]	; (4020b8 <vTaskSetTimeOutState+0x28>)
  4020aa:	6812      	ldr	r2, [r2, #0]
  4020ac:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4020ae:	4a03      	ldr	r2, [pc, #12]	; (4020bc <vTaskSetTimeOutState+0x2c>)
  4020b0:	6812      	ldr	r2, [r2, #0]
  4020b2:	6042      	str	r2, [r0, #4]
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	2040c15c 	.word	0x2040c15c
  4020bc:	2040c3ac 	.word	0x2040c3ac

004020c0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4020c0:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4020c2:	b950      	cbnz	r0, 4020da <xTaskCheckForTimeOut+0x1a>
  4020c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c8:	b672      	cpsid	i
  4020ca:	f383 8811 	msr	BASEPRI, r3
  4020ce:	f3bf 8f6f 	isb	sy
  4020d2:	f3bf 8f4f 	dsb	sy
  4020d6:	b662      	cpsie	i
  4020d8:	e7fe      	b.n	4020d8 <xTaskCheckForTimeOut+0x18>
  4020da:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4020dc:	b951      	cbnz	r1, 4020f4 <xTaskCheckForTimeOut+0x34>
  4020de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020e2:	b672      	cpsid	i
  4020e4:	f383 8811 	msr	BASEPRI, r3
  4020e8:	f3bf 8f6f 	isb	sy
  4020ec:	f3bf 8f4f 	dsb	sy
  4020f0:	b662      	cpsie	i
  4020f2:	e7fe      	b.n	4020f2 <xTaskCheckForTimeOut+0x32>
  4020f4:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4020f6:	4b12      	ldr	r3, [pc, #72]	; (402140 <xTaskCheckForTimeOut+0x80>)
  4020f8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4020fa:	4b12      	ldr	r3, [pc, #72]	; (402144 <xTaskCheckForTimeOut+0x84>)
  4020fc:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4020fe:	682b      	ldr	r3, [r5, #0]
  402100:	f1b3 3fff 	cmp.w	r3, #4294967295
  402104:	d013      	beq.n	40212e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402106:	4a10      	ldr	r2, [pc, #64]	; (402148 <xTaskCheckForTimeOut+0x88>)
  402108:	6812      	ldr	r2, [r2, #0]
  40210a:	6820      	ldr	r0, [r4, #0]
  40210c:	4290      	cmp	r0, r2
  40210e:	d002      	beq.n	402116 <xTaskCheckForTimeOut+0x56>
  402110:	6862      	ldr	r2, [r4, #4]
  402112:	4291      	cmp	r1, r2
  402114:	d20d      	bcs.n	402132 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402116:	6862      	ldr	r2, [r4, #4]
  402118:	1a88      	subs	r0, r1, r2
  40211a:	4283      	cmp	r3, r0
  40211c:	d90b      	bls.n	402136 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40211e:	1a52      	subs	r2, r2, r1
  402120:	4413      	add	r3, r2
  402122:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402124:	4620      	mov	r0, r4
  402126:	4b09      	ldr	r3, [pc, #36]	; (40214c <xTaskCheckForTimeOut+0x8c>)
  402128:	4798      	blx	r3
			xReturn = pdFALSE;
  40212a:	2400      	movs	r4, #0
  40212c:	e004      	b.n	402138 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40212e:	2400      	movs	r4, #0
  402130:	e002      	b.n	402138 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402132:	2401      	movs	r4, #1
  402134:	e000      	b.n	402138 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402136:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402138:	4b05      	ldr	r3, [pc, #20]	; (402150 <xTaskCheckForTimeOut+0x90>)
  40213a:	4798      	blx	r3

	return xReturn;
}
  40213c:	4620      	mov	r0, r4
  40213e:	bd38      	pop	{r3, r4, r5, pc}
  402140:	00400b51 	.word	0x00400b51
  402144:	2040c3ac 	.word	0x2040c3ac
  402148:	2040c15c 	.word	0x2040c15c
  40214c:	00402091 	.word	0x00402091
  402150:	00400b9d 	.word	0x00400b9d

00402154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402154:	2201      	movs	r2, #1
  402156:	4b01      	ldr	r3, [pc, #4]	; (40215c <vTaskMissedYield+0x8>)
  402158:	601a      	str	r2, [r3, #0]
  40215a:	4770      	bx	lr
  40215c:	2040c3e8 	.word	0x2040c3e8

00402160 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402160:	4b05      	ldr	r3, [pc, #20]	; (402178 <xTaskGetSchedulerState+0x18>)
  402162:	681b      	ldr	r3, [r3, #0]
  402164:	b133      	cbz	r3, 402174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402166:	4b05      	ldr	r3, [pc, #20]	; (40217c <xTaskGetSchedulerState+0x1c>)
  402168:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40216a:	2b00      	cmp	r3, #0
  40216c:	bf0c      	ite	eq
  40216e:	2002      	moveq	r0, #2
  402170:	2000      	movne	r0, #0
  402172:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402174:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402176:	4770      	bx	lr
  402178:	2040c164 	.word	0x2040c164
  40217c:	2040c3a8 	.word	0x2040c3a8

00402180 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402180:	2800      	cmp	r0, #0
  402182:	d045      	beq.n	402210 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402184:	b538      	push	{r3, r4, r5, lr}
  402186:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402188:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40218a:	4922      	ldr	r1, [pc, #136]	; (402214 <vTaskPriorityInherit+0x94>)
  40218c:	6809      	ldr	r1, [r1, #0]
  40218e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402190:	428a      	cmp	r2, r1
  402192:	d23c      	bcs.n	40220e <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402194:	6981      	ldr	r1, [r0, #24]
  402196:	2900      	cmp	r1, #0
  402198:	db05      	blt.n	4021a6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40219a:	491e      	ldr	r1, [pc, #120]	; (402214 <vTaskPriorityInherit+0x94>)
  40219c:	6809      	ldr	r1, [r1, #0]
  40219e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4021a0:	f1c1 0119 	rsb	r1, r1, #25
  4021a4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4021a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4021aa:	491b      	ldr	r1, [pc, #108]	; (402218 <vTaskPriorityInherit+0x98>)
  4021ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4021b0:	6959      	ldr	r1, [r3, #20]
  4021b2:	4291      	cmp	r1, r2
  4021b4:	d127      	bne.n	402206 <vTaskPriorityInherit+0x86>
  4021b6:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021b8:	1d1d      	adds	r5, r3, #4
  4021ba:	4628      	mov	r0, r5
  4021bc:	4b17      	ldr	r3, [pc, #92]	; (40221c <vTaskPriorityInherit+0x9c>)
  4021be:	4798      	blx	r3
  4021c0:	b970      	cbnz	r0, 4021e0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4021c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4021c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021c8:	4a13      	ldr	r2, [pc, #76]	; (402218 <vTaskPriorityInherit+0x98>)
  4021ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021ce:	b93a      	cbnz	r2, 4021e0 <vTaskPriorityInherit+0x60>
  4021d0:	4813      	ldr	r0, [pc, #76]	; (402220 <vTaskPriorityInherit+0xa0>)
  4021d2:	6802      	ldr	r2, [r0, #0]
  4021d4:	2101      	movs	r1, #1
  4021d6:	fa01 f303 	lsl.w	r3, r1, r3
  4021da:	ea22 0303 	bic.w	r3, r2, r3
  4021de:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021e0:	4b0c      	ldr	r3, [pc, #48]	; (402214 <vTaskPriorityInherit+0x94>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4021e8:	490d      	ldr	r1, [pc, #52]	; (402220 <vTaskPriorityInherit+0xa0>)
  4021ea:	680a      	ldr	r2, [r1, #0]
  4021ec:	2301      	movs	r3, #1
  4021ee:	4083      	lsls	r3, r0
  4021f0:	4313      	orrs	r3, r2
  4021f2:	600b      	str	r3, [r1, #0]
  4021f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021f8:	4b07      	ldr	r3, [pc, #28]	; (402218 <vTaskPriorityInherit+0x98>)
  4021fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021fe:	4629      	mov	r1, r5
  402200:	4b08      	ldr	r3, [pc, #32]	; (402224 <vTaskPriorityInherit+0xa4>)
  402202:	4798      	blx	r3
  402204:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402206:	4a03      	ldr	r2, [pc, #12]	; (402214 <vTaskPriorityInherit+0x94>)
  402208:	6812      	ldr	r2, [r2, #0]
  40220a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40220c:	62da      	str	r2, [r3, #44]	; 0x2c
  40220e:	bd38      	pop	{r3, r4, r5, pc}
  402210:	4770      	bx	lr
  402212:	bf00      	nop
  402214:	2040c390 	.word	0x2040c390
  402218:	2040c188 	.word	0x2040c188
  40221c:	00400e91 	.word	0x00400e91
  402220:	2040c3e4 	.word	0x2040c3e4
  402224:	00400e45 	.word	0x00400e45

00402228 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402228:	2800      	cmp	r0, #0
  40222a:	d04e      	beq.n	4022ca <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  40222c:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40222e:	4a29      	ldr	r2, [pc, #164]	; (4022d4 <xTaskPriorityDisinherit+0xac>)
  402230:	6812      	ldr	r2, [r2, #0]
  402232:	4290      	cmp	r0, r2
  402234:	d00a      	beq.n	40224c <xTaskPriorityDisinherit+0x24>
  402236:	f04f 0380 	mov.w	r3, #128	; 0x80
  40223a:	b672      	cpsid	i
  40223c:	f383 8811 	msr	BASEPRI, r3
  402240:	f3bf 8f6f 	isb	sy
  402244:	f3bf 8f4f 	dsb	sy
  402248:	b662      	cpsie	i
  40224a:	e7fe      	b.n	40224a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  40224c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40224e:	b952      	cbnz	r2, 402266 <xTaskPriorityDisinherit+0x3e>
  402250:	f04f 0380 	mov.w	r3, #128	; 0x80
  402254:	b672      	cpsid	i
  402256:	f383 8811 	msr	BASEPRI, r3
  40225a:	f3bf 8f6f 	isb	sy
  40225e:	f3bf 8f4f 	dsb	sy
  402262:	b662      	cpsie	i
  402264:	e7fe      	b.n	402264 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  402266:	3a01      	subs	r2, #1
  402268:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40226a:	2a00      	cmp	r2, #0
  40226c:	d12f      	bne.n	4022ce <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40226e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  402270:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402272:	4291      	cmp	r1, r2
  402274:	d02b      	beq.n	4022ce <xTaskPriorityDisinherit+0xa6>
  402276:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402278:	1d05      	adds	r5, r0, #4
  40227a:	4628      	mov	r0, r5
  40227c:	4b16      	ldr	r3, [pc, #88]	; (4022d8 <xTaskPriorityDisinherit+0xb0>)
  40227e:	4798      	blx	r3
  402280:	b968      	cbnz	r0, 40229e <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402282:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402284:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402288:	4b14      	ldr	r3, [pc, #80]	; (4022dc <xTaskPriorityDisinherit+0xb4>)
  40228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40228e:	b933      	cbnz	r3, 40229e <xTaskPriorityDisinherit+0x76>
  402290:	4813      	ldr	r0, [pc, #76]	; (4022e0 <xTaskPriorityDisinherit+0xb8>)
  402292:	6803      	ldr	r3, [r0, #0]
  402294:	2201      	movs	r2, #1
  402296:	408a      	lsls	r2, r1
  402298:	ea23 0302 	bic.w	r3, r3, r2
  40229c:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40229e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4022a0:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022a2:	f1c0 0319 	rsb	r3, r0, #25
  4022a6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4022a8:	4a0d      	ldr	r2, [pc, #52]	; (4022e0 <xTaskPriorityDisinherit+0xb8>)
  4022aa:	6813      	ldr	r3, [r2, #0]
  4022ac:	2401      	movs	r4, #1
  4022ae:	fa04 f100 	lsl.w	r1, r4, r0
  4022b2:	430b      	orrs	r3, r1
  4022b4:	6013      	str	r3, [r2, #0]
  4022b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022ba:	4b08      	ldr	r3, [pc, #32]	; (4022dc <xTaskPriorityDisinherit+0xb4>)
  4022bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022c0:	4629      	mov	r1, r5
  4022c2:	4b08      	ldr	r3, [pc, #32]	; (4022e4 <xTaskPriorityDisinherit+0xbc>)
  4022c4:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4022c6:	4620      	mov	r0, r4
  4022c8:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022ca:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022cc:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022ce:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022d0:	bd38      	pop	{r3, r4, r5, pc}
  4022d2:	bf00      	nop
  4022d4:	2040c390 	.word	0x2040c390
  4022d8:	00400e91 	.word	0x00400e91
  4022dc:	2040c188 	.word	0x2040c188
  4022e0:	2040c3e4 	.word	0x2040c3e4
  4022e4:	00400e45 	.word	0x00400e45

004022e8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4022e8:	4b05      	ldr	r3, [pc, #20]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022ea:	681b      	ldr	r3, [r3, #0]
  4022ec:	b123      	cbz	r3, 4022f8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4022ee:	4b04      	ldr	r3, [pc, #16]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022f0:	681a      	ldr	r2, [r3, #0]
  4022f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4022f4:	3301      	adds	r3, #1
  4022f6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4022f8:	4b01      	ldr	r3, [pc, #4]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022fa:	6818      	ldr	r0, [r3, #0]
	}
  4022fc:	4770      	bx	lr
  4022fe:	bf00      	nop
  402300:	2040c390 	.word	0x2040c390

00402304 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402304:	b510      	push	{r4, lr}
  402306:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402308:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40230a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  40230c:	4291      	cmp	r1, r2
  40230e:	d80a      	bhi.n	402326 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402310:	1ad2      	subs	r2, r2, r3
  402312:	6983      	ldr	r3, [r0, #24]
  402314:	429a      	cmp	r2, r3
  402316:	d211      	bcs.n	40233c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402318:	4b0a      	ldr	r3, [pc, #40]	; (402344 <prvInsertTimerInActiveList+0x40>)
  40231a:	6818      	ldr	r0, [r3, #0]
  40231c:	1d21      	adds	r1, r4, #4
  40231e:	4b0a      	ldr	r3, [pc, #40]	; (402348 <prvInsertTimerInActiveList+0x44>)
  402320:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402322:	2000      	movs	r0, #0
  402324:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402326:	4299      	cmp	r1, r3
  402328:	d301      	bcc.n	40232e <prvInsertTimerInActiveList+0x2a>
  40232a:	429a      	cmp	r2, r3
  40232c:	d308      	bcc.n	402340 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40232e:	4b07      	ldr	r3, [pc, #28]	; (40234c <prvInsertTimerInActiveList+0x48>)
  402330:	6818      	ldr	r0, [r3, #0]
  402332:	1d21      	adds	r1, r4, #4
  402334:	4b04      	ldr	r3, [pc, #16]	; (402348 <prvInsertTimerInActiveList+0x44>)
  402336:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402338:	2000      	movs	r0, #0
  40233a:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40233c:	2001      	movs	r0, #1
  40233e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402340:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402342:	bd10      	pop	{r4, pc}
  402344:	2040c420 	.word	0x2040c420
  402348:	00400e5d 	.word	0x00400e5d
  40234c:	2040c3ec 	.word	0x2040c3ec

00402350 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402350:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402352:	4b14      	ldr	r3, [pc, #80]	; (4023a4 <prvCheckForValidListAndQueue+0x54>)
  402354:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402356:	4b14      	ldr	r3, [pc, #80]	; (4023a8 <prvCheckForValidListAndQueue+0x58>)
  402358:	681b      	ldr	r3, [r3, #0]
  40235a:	bb03      	cbnz	r3, 40239e <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  40235c:	4d13      	ldr	r5, [pc, #76]	; (4023ac <prvCheckForValidListAndQueue+0x5c>)
  40235e:	4628      	mov	r0, r5
  402360:	4e13      	ldr	r6, [pc, #76]	; (4023b0 <prvCheckForValidListAndQueue+0x60>)
  402362:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402364:	4c13      	ldr	r4, [pc, #76]	; (4023b4 <prvCheckForValidListAndQueue+0x64>)
  402366:	4620      	mov	r0, r4
  402368:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40236a:	4b13      	ldr	r3, [pc, #76]	; (4023b8 <prvCheckForValidListAndQueue+0x68>)
  40236c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40236e:	4b13      	ldr	r3, [pc, #76]	; (4023bc <prvCheckForValidListAndQueue+0x6c>)
  402370:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402372:	2005      	movs	r0, #5
  402374:	2110      	movs	r1, #16
  402376:	2200      	movs	r2, #0
  402378:	4b11      	ldr	r3, [pc, #68]	; (4023c0 <prvCheckForValidListAndQueue+0x70>)
  40237a:	4798      	blx	r3
  40237c:	4b0a      	ldr	r3, [pc, #40]	; (4023a8 <prvCheckForValidListAndQueue+0x58>)
  40237e:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402380:	b950      	cbnz	r0, 402398 <prvCheckForValidListAndQueue+0x48>
  402382:	f04f 0380 	mov.w	r3, #128	; 0x80
  402386:	b672      	cpsid	i
  402388:	f383 8811 	msr	BASEPRI, r3
  40238c:	f3bf 8f6f 	isb	sy
  402390:	f3bf 8f4f 	dsb	sy
  402394:	b662      	cpsie	i
  402396:	e7fe      	b.n	402396 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402398:	490a      	ldr	r1, [pc, #40]	; (4023c4 <prvCheckForValidListAndQueue+0x74>)
  40239a:	4b0b      	ldr	r3, [pc, #44]	; (4023c8 <prvCheckForValidListAndQueue+0x78>)
  40239c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40239e:	4b0b      	ldr	r3, [pc, #44]	; (4023cc <prvCheckForValidListAndQueue+0x7c>)
  4023a0:	4798      	blx	r3
  4023a2:	bd70      	pop	{r4, r5, r6, pc}
  4023a4:	00400b51 	.word	0x00400b51
  4023a8:	2040c41c 	.word	0x2040c41c
  4023ac:	2040c3f0 	.word	0x2040c3f0
  4023b0:	00400e25 	.word	0x00400e25
  4023b4:	2040c404 	.word	0x2040c404
  4023b8:	2040c3ec 	.word	0x2040c3ec
  4023bc:	2040c420 	.word	0x2040c420
  4023c0:	00401119 	.word	0x00401119
  4023c4:	0040f084 	.word	0x0040f084
  4023c8:	00401715 	.word	0x00401715
  4023cc:	00400b9d 	.word	0x00400b9d

004023d0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4023d0:	b510      	push	{r4, lr}
  4023d2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4023d4:	4b0f      	ldr	r3, [pc, #60]	; (402414 <xTimerCreateTimerTask+0x44>)
  4023d6:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4023d8:	4b0f      	ldr	r3, [pc, #60]	; (402418 <xTimerCreateTimerTask+0x48>)
  4023da:	681b      	ldr	r3, [r3, #0]
  4023dc:	b163      	cbz	r3, 4023f8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4023de:	2318      	movs	r3, #24
  4023e0:	9300      	str	r3, [sp, #0]
  4023e2:	2300      	movs	r3, #0
  4023e4:	9301      	str	r3, [sp, #4]
  4023e6:	9302      	str	r3, [sp, #8]
  4023e8:	9303      	str	r3, [sp, #12]
  4023ea:	480c      	ldr	r0, [pc, #48]	; (40241c <xTimerCreateTimerTask+0x4c>)
  4023ec:	490c      	ldr	r1, [pc, #48]	; (402420 <xTimerCreateTimerTask+0x50>)
  4023ee:	f44f 7282 	mov.w	r2, #260	; 0x104
  4023f2:	4c0c      	ldr	r4, [pc, #48]	; (402424 <xTimerCreateTimerTask+0x54>)
  4023f4:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  4023f6:	b950      	cbnz	r0, 40240e <xTimerCreateTimerTask+0x3e>
  4023f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023fc:	b672      	cpsid	i
  4023fe:	f383 8811 	msr	BASEPRI, r3
  402402:	f3bf 8f6f 	isb	sy
  402406:	f3bf 8f4f 	dsb	sy
  40240a:	b662      	cpsie	i
  40240c:	e7fe      	b.n	40240c <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40240e:	b004      	add	sp, #16
  402410:	bd10      	pop	{r4, pc}
  402412:	bf00      	nop
  402414:	00402351 	.word	0x00402351
  402418:	2040c41c 	.word	0x2040c41c
  40241c:	00402561 	.word	0x00402561
  402420:	0040f08c 	.word	0x0040f08c
  402424:	0040181d 	.word	0x0040181d

00402428 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402428:	b950      	cbnz	r0, 402440 <xTimerGenericCommand+0x18>
  40242a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40242e:	b672      	cpsid	i
  402430:	f383 8811 	msr	BASEPRI, r3
  402434:	f3bf 8f6f 	isb	sy
  402438:	f3bf 8f4f 	dsb	sy
  40243c:	b662      	cpsie	i
  40243e:	e7fe      	b.n	40243e <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402440:	b530      	push	{r4, r5, lr}
  402442:	b085      	sub	sp, #20
  402444:	4615      	mov	r5, r2
  402446:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402448:	4a12      	ldr	r2, [pc, #72]	; (402494 <xTimerGenericCommand+0x6c>)
  40244a:	6810      	ldr	r0, [r2, #0]
  40244c:	b1f0      	cbz	r0, 40248c <xTimerGenericCommand+0x64>
  40244e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402450:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402452:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402454:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402456:	2905      	cmp	r1, #5
  402458:	dc13      	bgt.n	402482 <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40245a:	4b0f      	ldr	r3, [pc, #60]	; (402498 <xTimerGenericCommand+0x70>)
  40245c:	4798      	blx	r3
  40245e:	2802      	cmp	r0, #2
  402460:	d107      	bne.n	402472 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402462:	4b0c      	ldr	r3, [pc, #48]	; (402494 <xTimerGenericCommand+0x6c>)
  402464:	6818      	ldr	r0, [r3, #0]
  402466:	4669      	mov	r1, sp
  402468:	9a08      	ldr	r2, [sp, #32]
  40246a:	2300      	movs	r3, #0
  40246c:	4c0b      	ldr	r4, [pc, #44]	; (40249c <xTimerGenericCommand+0x74>)
  40246e:	47a0      	blx	r4
  402470:	e00d      	b.n	40248e <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402472:	4b08      	ldr	r3, [pc, #32]	; (402494 <xTimerGenericCommand+0x6c>)
  402474:	6818      	ldr	r0, [r3, #0]
  402476:	4669      	mov	r1, sp
  402478:	2200      	movs	r2, #0
  40247a:	4613      	mov	r3, r2
  40247c:	4c07      	ldr	r4, [pc, #28]	; (40249c <xTimerGenericCommand+0x74>)
  40247e:	47a0      	blx	r4
  402480:	e005      	b.n	40248e <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402482:	4669      	mov	r1, sp
  402484:	2300      	movs	r3, #0
  402486:	4c06      	ldr	r4, [pc, #24]	; (4024a0 <xTimerGenericCommand+0x78>)
  402488:	47a0      	blx	r4
  40248a:	e000      	b.n	40248e <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  40248c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40248e:	b005      	add	sp, #20
  402490:	bd30      	pop	{r4, r5, pc}
  402492:	bf00      	nop
  402494:	2040c41c 	.word	0x2040c41c
  402498:	00402161 	.word	0x00402161
  40249c:	0040119d 	.word	0x0040119d
  4024a0:	00401379 	.word	0x00401379

004024a4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4024a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024a8:	b082      	sub	sp, #8
  4024aa:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4024ac:	4b25      	ldr	r3, [pc, #148]	; (402544 <prvSampleTimeNow+0xa0>)
  4024ae:	4798      	blx	r3
  4024b0:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4024b2:	4b25      	ldr	r3, [pc, #148]	; (402548 <prvSampleTimeNow+0xa4>)
  4024b4:	681b      	ldr	r3, [r3, #0]
  4024b6:	4298      	cmp	r0, r3
  4024b8:	d23b      	bcs.n	402532 <prvSampleTimeNow+0x8e>
  4024ba:	e02b      	b.n	402514 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024bc:	68db      	ldr	r3, [r3, #12]
  4024be:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024c2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024c4:	f104 0904 	add.w	r9, r4, #4
  4024c8:	4648      	mov	r0, r9
  4024ca:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024ce:	4620      	mov	r0, r4
  4024d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024d2:	69e3      	ldr	r3, [r4, #28]
  4024d4:	2b01      	cmp	r3, #1
  4024d6:	d11f      	bne.n	402518 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024d8:	69a3      	ldr	r3, [r4, #24]
  4024da:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024dc:	4553      	cmp	r3, sl
  4024de:	d906      	bls.n	4024ee <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024e0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024e2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024e4:	6828      	ldr	r0, [r5, #0]
  4024e6:	4649      	mov	r1, r9
  4024e8:	4b18      	ldr	r3, [pc, #96]	; (40254c <prvSampleTimeNow+0xa8>)
  4024ea:	4798      	blx	r3
  4024ec:	e014      	b.n	402518 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4024ee:	2300      	movs	r3, #0
  4024f0:	9300      	str	r3, [sp, #0]
  4024f2:	4620      	mov	r0, r4
  4024f4:	4619      	mov	r1, r3
  4024f6:	4652      	mov	r2, sl
  4024f8:	4c15      	ldr	r4, [pc, #84]	; (402550 <prvSampleTimeNow+0xac>)
  4024fa:	47a0      	blx	r4
				configASSERT( xResult );
  4024fc:	b960      	cbnz	r0, 402518 <prvSampleTimeNow+0x74>
  4024fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402502:	b672      	cpsid	i
  402504:	f383 8811 	msr	BASEPRI, r3
  402508:	f3bf 8f6f 	isb	sy
  40250c:	f3bf 8f4f 	dsb	sy
  402510:	b662      	cpsie	i
  402512:	e7fe      	b.n	402512 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402514:	4d0f      	ldr	r5, [pc, #60]	; (402554 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402516:	4e10      	ldr	r6, [pc, #64]	; (402558 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402518:	682b      	ldr	r3, [r5, #0]
  40251a:	681a      	ldr	r2, [r3, #0]
  40251c:	2a00      	cmp	r2, #0
  40251e:	d1cd      	bne.n	4024bc <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402520:	4a0e      	ldr	r2, [pc, #56]	; (40255c <prvSampleTimeNow+0xb8>)
  402522:	6810      	ldr	r0, [r2, #0]
  402524:	490b      	ldr	r1, [pc, #44]	; (402554 <prvSampleTimeNow+0xb0>)
  402526:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402528:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  40252a:	2301      	movs	r3, #1
  40252c:	f8c8 3000 	str.w	r3, [r8]
  402530:	e002      	b.n	402538 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402532:	2300      	movs	r3, #0
  402534:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402538:	4b03      	ldr	r3, [pc, #12]	; (402548 <prvSampleTimeNow+0xa4>)
  40253a:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  40253c:	4638      	mov	r0, r7
  40253e:	b002      	add	sp, #8
  402540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402544:	00401ae5 	.word	0x00401ae5
  402548:	2040c418 	.word	0x2040c418
  40254c:	00400e5d 	.word	0x00400e5d
  402550:	00402429 	.word	0x00402429
  402554:	2040c3ec 	.word	0x2040c3ec
  402558:	00400e91 	.word	0x00400e91
  40255c:	2040c420 	.word	0x2040c420

00402560 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402564:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402566:	4c69      	ldr	r4, [pc, #420]	; (40270c <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402568:	4f69      	ldr	r7, [pc, #420]	; (402710 <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40256a:	4d6a      	ldr	r5, [pc, #424]	; (402714 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40256c:	4b6a      	ldr	r3, [pc, #424]	; (402718 <prvTimerTask+0x1b8>)
  40256e:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402570:	681a      	ldr	r2, [r3, #0]
  402572:	2a00      	cmp	r2, #0
  402574:	f000 80bf 	beq.w	4026f6 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402578:	68db      	ldr	r3, [r3, #12]
  40257a:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  40257c:	4b67      	ldr	r3, [pc, #412]	; (40271c <prvTimerTask+0x1bc>)
  40257e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402580:	a804      	add	r0, sp, #16
  402582:	4b67      	ldr	r3, [pc, #412]	; (402720 <prvTimerTask+0x1c0>)
  402584:	4798      	blx	r3
  402586:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402588:	9b04      	ldr	r3, [sp, #16]
  40258a:	2b00      	cmp	r3, #0
  40258c:	d14d      	bne.n	40262a <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40258e:	42b0      	cmp	r0, r6
  402590:	d339      	bcc.n	402606 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  402592:	4b64      	ldr	r3, [pc, #400]	; (402724 <prvTimerTask+0x1c4>)
  402594:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402596:	4b60      	ldr	r3, [pc, #384]	; (402718 <prvTimerTask+0x1b8>)
  402598:	681b      	ldr	r3, [r3, #0]
  40259a:	68db      	ldr	r3, [r3, #12]
  40259c:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025a0:	f109 0004 	add.w	r0, r9, #4
  4025a4:	4b60      	ldr	r3, [pc, #384]	; (402728 <prvTimerTask+0x1c8>)
  4025a6:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4025ac:	2b01      	cmp	r3, #1
  4025ae:	d11d      	bne.n	4025ec <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4025b0:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4025b4:	4648      	mov	r0, r9
  4025b6:	4431      	add	r1, r6
  4025b8:	4642      	mov	r2, r8
  4025ba:	4633      	mov	r3, r6
  4025bc:	f8df c178 	ldr.w	ip, [pc, #376]	; 402738 <prvTimerTask+0x1d8>
  4025c0:	47e0      	blx	ip
  4025c2:	2801      	cmp	r0, #1
  4025c4:	d112      	bne.n	4025ec <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4025c6:	2300      	movs	r3, #0
  4025c8:	9300      	str	r3, [sp, #0]
  4025ca:	4648      	mov	r0, r9
  4025cc:	4619      	mov	r1, r3
  4025ce:	4632      	mov	r2, r6
  4025d0:	4e56      	ldr	r6, [pc, #344]	; (40272c <prvTimerTask+0x1cc>)
  4025d2:	47b0      	blx	r6
			configASSERT( xResult );
  4025d4:	b950      	cbnz	r0, 4025ec <prvTimerTask+0x8c>
  4025d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025da:	b672      	cpsid	i
  4025dc:	f383 8811 	msr	BASEPRI, r3
  4025e0:	f3bf 8f6f 	isb	sy
  4025e4:	f3bf 8f4f 	dsb	sy
  4025e8:	b662      	cpsie	i
  4025ea:	e7fe      	b.n	4025ea <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025ec:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4025f0:	4648      	mov	r0, r9
  4025f2:	4798      	blx	r3
  4025f4:	e077      	b.n	4026e6 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4025f6:	4b4e      	ldr	r3, [pc, #312]	; (402730 <prvTimerTask+0x1d0>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	681a      	ldr	r2, [r3, #0]
  4025fc:	fab2 f282 	clz	r2, r2
  402600:	0952      	lsrs	r2, r2, #5
  402602:	2600      	movs	r6, #0
  402604:	e000      	b.n	402608 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402606:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402608:	6820      	ldr	r0, [r4, #0]
  40260a:	ebc8 0106 	rsb	r1, r8, r6
  40260e:	4b49      	ldr	r3, [pc, #292]	; (402734 <prvTimerTask+0x1d4>)
  402610:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402612:	4b44      	ldr	r3, [pc, #272]	; (402724 <prvTimerTask+0x1c4>)
  402614:	4798      	blx	r3
  402616:	2800      	cmp	r0, #0
  402618:	d165      	bne.n	4026e6 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40261a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40261e:	603b      	str	r3, [r7, #0]
  402620:	f3bf 8f4f 	dsb	sy
  402624:	f3bf 8f6f 	isb	sy
  402628:	e05d      	b.n	4026e6 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  40262a:	4b3e      	ldr	r3, [pc, #248]	; (402724 <prvTimerTask+0x1c4>)
  40262c:	4798      	blx	r3
  40262e:	e05a      	b.n	4026e6 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402630:	9b04      	ldr	r3, [sp, #16]
  402632:	2b00      	cmp	r3, #0
  402634:	da06      	bge.n	402644 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402636:	9806      	ldr	r0, [sp, #24]
  402638:	9907      	ldr	r1, [sp, #28]
  40263a:	9b05      	ldr	r3, [sp, #20]
  40263c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40263e:	9b04      	ldr	r3, [sp, #16]
  402640:	2b00      	cmp	r3, #0
  402642:	db50      	blt.n	4026e6 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402644:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402646:	6973      	ldr	r3, [r6, #20]
  402648:	b113      	cbz	r3, 402650 <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40264a:	1d30      	adds	r0, r6, #4
  40264c:	4b36      	ldr	r3, [pc, #216]	; (402728 <prvTimerTask+0x1c8>)
  40264e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402650:	a803      	add	r0, sp, #12
  402652:	4b33      	ldr	r3, [pc, #204]	; (402720 <prvTimerTask+0x1c0>)
  402654:	4798      	blx	r3
  402656:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402658:	9a04      	ldr	r2, [sp, #16]
  40265a:	2a09      	cmp	r2, #9
  40265c:	d843      	bhi.n	4026e6 <prvTimerTask+0x186>
  40265e:	e8df f002 	tbb	[pc, r2]
  402662:	0505      	.short	0x0505
  402664:	3f2a4205 	.word	0x3f2a4205
  402668:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40266c:	9b05      	ldr	r3, [sp, #20]
  40266e:	69b1      	ldr	r1, [r6, #24]
  402670:	4630      	mov	r0, r6
  402672:	4419      	add	r1, r3
  402674:	4672      	mov	r2, lr
  402676:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 402738 <prvTimerTask+0x1d8>
  40267a:	47e0      	blx	ip
  40267c:	2801      	cmp	r0, #1
  40267e:	d132      	bne.n	4026e6 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402680:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402682:	4630      	mov	r0, r6
  402684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402686:	69f3      	ldr	r3, [r6, #28]
  402688:	2b01      	cmp	r3, #1
  40268a:	d12c      	bne.n	4026e6 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40268c:	69b2      	ldr	r2, [r6, #24]
  40268e:	2300      	movs	r3, #0
  402690:	9300      	str	r3, [sp, #0]
  402692:	4630      	mov	r0, r6
  402694:	4619      	mov	r1, r3
  402696:	9e05      	ldr	r6, [sp, #20]
  402698:	4432      	add	r2, r6
  40269a:	4e24      	ldr	r6, [pc, #144]	; (40272c <prvTimerTask+0x1cc>)
  40269c:	47b0      	blx	r6
							configASSERT( xResult );
  40269e:	bb10      	cbnz	r0, 4026e6 <prvTimerTask+0x186>
  4026a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a4:	b672      	cpsid	i
  4026a6:	f383 8811 	msr	BASEPRI, r3
  4026aa:	f3bf 8f6f 	isb	sy
  4026ae:	f3bf 8f4f 	dsb	sy
  4026b2:	b662      	cpsie	i
  4026b4:	e7fe      	b.n	4026b4 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4026b6:	9905      	ldr	r1, [sp, #20]
  4026b8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4026ba:	b951      	cbnz	r1, 4026d2 <prvTimerTask+0x172>
  4026bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c0:	b672      	cpsid	i
  4026c2:	f383 8811 	msr	BASEPRI, r3
  4026c6:	f3bf 8f6f 	isb	sy
  4026ca:	f3bf 8f4f 	dsb	sy
  4026ce:	b662      	cpsie	i
  4026d0:	e7fe      	b.n	4026d0 <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4026d2:	4630      	mov	r0, r6
  4026d4:	4471      	add	r1, lr
  4026d6:	4672      	mov	r2, lr
  4026d8:	4673      	mov	r3, lr
  4026da:	4e17      	ldr	r6, [pc, #92]	; (402738 <prvTimerTask+0x1d8>)
  4026dc:	47b0      	blx	r6
  4026de:	e002      	b.n	4026e6 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4026e0:	4630      	mov	r0, r6
  4026e2:	4b16      	ldr	r3, [pc, #88]	; (40273c <prvTimerTask+0x1dc>)
  4026e4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026e6:	6820      	ldr	r0, [r4, #0]
  4026e8:	a904      	add	r1, sp, #16
  4026ea:	2200      	movs	r2, #0
  4026ec:	4613      	mov	r3, r2
  4026ee:	47a8      	blx	r5
  4026f0:	2800      	cmp	r0, #0
  4026f2:	d19d      	bne.n	402630 <prvTimerTask+0xd0>
  4026f4:	e73a      	b.n	40256c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4026f6:	4b09      	ldr	r3, [pc, #36]	; (40271c <prvTimerTask+0x1bc>)
  4026f8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026fa:	a804      	add	r0, sp, #16
  4026fc:	4b08      	ldr	r3, [pc, #32]	; (402720 <prvTimerTask+0x1c0>)
  4026fe:	4798      	blx	r3
  402700:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402702:	9b04      	ldr	r3, [sp, #16]
  402704:	2b00      	cmp	r3, #0
  402706:	f43f af76 	beq.w	4025f6 <prvTimerTask+0x96>
  40270a:	e78e      	b.n	40262a <prvTimerTask+0xca>
  40270c:	2040c41c 	.word	0x2040c41c
  402710:	e000ed04 	.word	0xe000ed04
  402714:	00401551 	.word	0x00401551
  402718:	2040c3ec 	.word	0x2040c3ec
  40271c:	00401ad5 	.word	0x00401ad5
  402720:	004024a5 	.word	0x004024a5
  402724:	00401c25 	.word	0x00401c25
  402728:	00400e91 	.word	0x00400e91
  40272c:	00402429 	.word	0x00402429
  402730:	2040c420 	.word	0x2040c420
  402734:	00401749 	.word	0x00401749
  402738:	00402305 	.word	0x00402305
  40273c:	00400e09 	.word	0x00400e09

00402740 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402740:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402742:	4810      	ldr	r0, [pc, #64]	; (402784 <sysclk_init+0x44>)
  402744:	4b10      	ldr	r3, [pc, #64]	; (402788 <sysclk_init+0x48>)
  402746:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402748:	2000      	movs	r0, #0
  40274a:	213e      	movs	r1, #62	; 0x3e
  40274c:	4b0f      	ldr	r3, [pc, #60]	; (40278c <sysclk_init+0x4c>)
  40274e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402750:	4c0f      	ldr	r4, [pc, #60]	; (402790 <sysclk_init+0x50>)
  402752:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402754:	2800      	cmp	r0, #0
  402756:	d0fc      	beq.n	402752 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402758:	4b0e      	ldr	r3, [pc, #56]	; (402794 <sysclk_init+0x54>)
  40275a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40275c:	4a0e      	ldr	r2, [pc, #56]	; (402798 <sysclk_init+0x58>)
  40275e:	4b0f      	ldr	r3, [pc, #60]	; (40279c <sysclk_init+0x5c>)
  402760:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402762:	4c0f      	ldr	r4, [pc, #60]	; (4027a0 <sysclk_init+0x60>)
  402764:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402766:	2800      	cmp	r0, #0
  402768:	d0fc      	beq.n	402764 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40276a:	2002      	movs	r0, #2
  40276c:	4b0d      	ldr	r3, [pc, #52]	; (4027a4 <sysclk_init+0x64>)
  40276e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402770:	2000      	movs	r0, #0
  402772:	4b0d      	ldr	r3, [pc, #52]	; (4027a8 <sysclk_init+0x68>)
  402774:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402776:	4b0d      	ldr	r3, [pc, #52]	; (4027ac <sysclk_init+0x6c>)
  402778:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40277a:	4802      	ldr	r0, [pc, #8]	; (402784 <sysclk_init+0x44>)
  40277c:	4b02      	ldr	r3, [pc, #8]	; (402788 <sysclk_init+0x48>)
  40277e:	4798      	blx	r3
  402780:	bd10      	pop	{r4, pc}
  402782:	bf00      	nop
  402784:	11e1a300 	.word	0x11e1a300
  402788:	0040360d 	.word	0x0040360d
  40278c:	00402971 	.word	0x00402971
  402790:	004029c5 	.word	0x004029c5
  402794:	004029d5 	.word	0x004029d5
  402798:	20183f01 	.word	0x20183f01
  40279c:	400e0600 	.word	0x400e0600
  4027a0:	004029e5 	.word	0x004029e5
  4027a4:	004028d1 	.word	0x004028d1
  4027a8:	00402909 	.word	0x00402909
  4027ac:	004034f9 	.word	0x004034f9

004027b0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4027b0:	b10a      	cbz	r2, 4027b6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4027b2:	6641      	str	r1, [r0, #100]	; 0x64
  4027b4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4027b6:	6601      	str	r1, [r0, #96]	; 0x60
  4027b8:	4770      	bx	lr
  4027ba:	bf00      	nop

004027bc <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4027bc:	6301      	str	r1, [r0, #48]	; 0x30
  4027be:	4770      	bx	lr

004027c0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4027c0:	6341      	str	r1, [r0, #52]	; 0x34
  4027c2:	4770      	bx	lr

004027c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4027c4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4027c6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4027ca:	d02f      	beq.n	40282c <pio_set_peripheral+0x68>
  4027cc:	d807      	bhi.n	4027de <pio_set_peripheral+0x1a>
  4027ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4027d2:	d014      	beq.n	4027fe <pio_set_peripheral+0x3a>
  4027d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4027d8:	d01e      	beq.n	402818 <pio_set_peripheral+0x54>
  4027da:	b939      	cbnz	r1, 4027ec <pio_set_peripheral+0x28>
  4027dc:	4770      	bx	lr
  4027de:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4027e2:	d037      	beq.n	402854 <pio_set_peripheral+0x90>
  4027e4:	d804      	bhi.n	4027f0 <pio_set_peripheral+0x2c>
  4027e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4027ea:	d029      	beq.n	402840 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4027ec:	6042      	str	r2, [r0, #4]
  4027ee:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4027f0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4027f4:	d02e      	beq.n	402854 <pio_set_peripheral+0x90>
  4027f6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4027fa:	d02b      	beq.n	402854 <pio_set_peripheral+0x90>
  4027fc:	e7f6      	b.n	4027ec <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4027fe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402800:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402802:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402804:	43d3      	mvns	r3, r2
  402806:	4021      	ands	r1, r4
  402808:	4019      	ands	r1, r3
  40280a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40280c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40280e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402810:	4021      	ands	r1, r4
  402812:	400b      	ands	r3, r1
  402814:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402816:	e01a      	b.n	40284e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402818:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40281a:	4313      	orrs	r3, r2
  40281c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40281e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402820:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402822:	400b      	ands	r3, r1
  402824:	ea23 0302 	bic.w	r3, r3, r2
  402828:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40282a:	e7df      	b.n	4027ec <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40282c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40282e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402830:	400b      	ands	r3, r1
  402832:	ea23 0302 	bic.w	r3, r3, r2
  402836:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402838:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40283a:	4313      	orrs	r3, r2
  40283c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40283e:	e7d5      	b.n	4027ec <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402840:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402842:	4313      	orrs	r3, r2
  402844:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402846:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402848:	4313      	orrs	r3, r2
  40284a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40284c:	e7ce      	b.n	4027ec <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40284e:	6042      	str	r2, [r0, #4]
}
  402850:	f85d 4b04 	ldr.w	r4, [sp], #4
  402854:	4770      	bx	lr
  402856:	bf00      	nop

00402858 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402858:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40285a:	f012 0f01 	tst.w	r2, #1
  40285e:	d001      	beq.n	402864 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402860:	6641      	str	r1, [r0, #100]	; 0x64
  402862:	e000      	b.n	402866 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402864:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402866:	f012 0f0a 	tst.w	r2, #10
  40286a:	d001      	beq.n	402870 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  40286c:	6201      	str	r1, [r0, #32]
  40286e:	e000      	b.n	402872 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402870:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402872:	f012 0f02 	tst.w	r2, #2
  402876:	d002      	beq.n	40287e <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402878:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40287c:	e004      	b.n	402888 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40287e:	f012 0f08 	tst.w	r2, #8
  402882:	d001      	beq.n	402888 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  402884:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402888:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40288a:	6001      	str	r1, [r0, #0]
  40288c:	4770      	bx	lr
  40288e:	bf00      	nop

00402890 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402890:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402892:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402894:	9c01      	ldr	r4, [sp, #4]
  402896:	b10c      	cbz	r4, 40289c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402898:	6641      	str	r1, [r0, #100]	; 0x64
  40289a:	e000      	b.n	40289e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40289c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40289e:	b10b      	cbz	r3, 4028a4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4028a0:	6501      	str	r1, [r0, #80]	; 0x50
  4028a2:	e000      	b.n	4028a6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028a4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028a6:	b10a      	cbz	r2, 4028ac <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4028a8:	6301      	str	r1, [r0, #48]	; 0x30
  4028aa:	e000      	b.n	4028ae <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028ac:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028ae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4028b0:	6001      	str	r1, [r0, #0]
}
  4028b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028b6:	4770      	bx	lr

004028b8 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  4028b8:	b112      	cbz	r2, 4028c0 <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  4028ba:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  4028be:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  4028c0:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  4028c4:	4770      	bx	lr
  4028c6:	bf00      	nop

004028c8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4028c8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4028ca:	4770      	bx	lr

004028cc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4028cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4028ce:	4770      	bx	lr

004028d0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4028d0:	2803      	cmp	r0, #3
  4028d2:	d007      	beq.n	4028e4 <pmc_mck_set_division+0x14>
  4028d4:	2804      	cmp	r0, #4
  4028d6:	d008      	beq.n	4028ea <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4028d8:	2802      	cmp	r0, #2
  4028da:	bf0c      	ite	eq
  4028dc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4028e0:	2100      	movne	r1, #0
  4028e2:	e004      	b.n	4028ee <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4028e4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4028e8:	e001      	b.n	4028ee <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4028ea:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4028ee:	4a05      	ldr	r2, [pc, #20]	; (402904 <pmc_mck_set_division+0x34>)
  4028f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4028f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4028f6:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4028f8:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4028fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4028fc:	f013 0f08 	tst.w	r3, #8
  402900:	d0fb      	beq.n	4028fa <pmc_mck_set_division+0x2a>
}
  402902:	4770      	bx	lr
  402904:	400e0600 	.word	0x400e0600

00402908 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402908:	4a18      	ldr	r2, [pc, #96]	; (40296c <pmc_switch_mck_to_pllack+0x64>)
  40290a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402910:	4318      	orrs	r0, r3
  402912:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402914:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402916:	f013 0f08 	tst.w	r3, #8
  40291a:	d003      	beq.n	402924 <pmc_switch_mck_to_pllack+0x1c>
  40291c:	e009      	b.n	402932 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40291e:	3b01      	subs	r3, #1
  402920:	d103      	bne.n	40292a <pmc_switch_mck_to_pllack+0x22>
  402922:	e01e      	b.n	402962 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402924:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402928:	4910      	ldr	r1, [pc, #64]	; (40296c <pmc_switch_mck_to_pllack+0x64>)
  40292a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40292c:	f012 0f08 	tst.w	r2, #8
  402930:	d0f5      	beq.n	40291e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402932:	4a0e      	ldr	r2, [pc, #56]	; (40296c <pmc_switch_mck_to_pllack+0x64>)
  402934:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402936:	f023 0303 	bic.w	r3, r3, #3
  40293a:	f043 0302 	orr.w	r3, r3, #2
  40293e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402940:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402942:	f010 0008 	ands.w	r0, r0, #8
  402946:	d004      	beq.n	402952 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402948:	2000      	movs	r0, #0
  40294a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40294c:	3b01      	subs	r3, #1
  40294e:	d103      	bne.n	402958 <pmc_switch_mck_to_pllack+0x50>
  402950:	e009      	b.n	402966 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402952:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402956:	4905      	ldr	r1, [pc, #20]	; (40296c <pmc_switch_mck_to_pllack+0x64>)
  402958:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40295a:	f012 0f08 	tst.w	r2, #8
  40295e:	d0f5      	beq.n	40294c <pmc_switch_mck_to_pllack+0x44>
  402960:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402962:	2001      	movs	r0, #1
  402964:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402966:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402968:	4770      	bx	lr
  40296a:	bf00      	nop
  40296c:	400e0600 	.word	0x400e0600

00402970 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402970:	b138      	cbz	r0, 402982 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402972:	490e      	ldr	r1, [pc, #56]	; (4029ac <pmc_switch_mainck_to_xtal+0x3c>)
  402974:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402976:	4a0e      	ldr	r2, [pc, #56]	; (4029b0 <pmc_switch_mainck_to_xtal+0x40>)
  402978:	401a      	ands	r2, r3
  40297a:	4b0e      	ldr	r3, [pc, #56]	; (4029b4 <pmc_switch_mainck_to_xtal+0x44>)
  40297c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40297e:	620b      	str	r3, [r1, #32]
  402980:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402982:	480a      	ldr	r0, [pc, #40]	; (4029ac <pmc_switch_mainck_to_xtal+0x3c>)
  402984:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402986:	4a0c      	ldr	r2, [pc, #48]	; (4029b8 <pmc_switch_mainck_to_xtal+0x48>)
  402988:	401a      	ands	r2, r3
  40298a:	4b0c      	ldr	r3, [pc, #48]	; (4029bc <pmc_switch_mainck_to_xtal+0x4c>)
  40298c:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40298e:	0209      	lsls	r1, r1, #8
  402990:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402992:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402994:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402996:	4602      	mov	r2, r0
  402998:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40299a:	f013 0f01 	tst.w	r3, #1
  40299e:	d0fb      	beq.n	402998 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4029a0:	4a02      	ldr	r2, [pc, #8]	; (4029ac <pmc_switch_mainck_to_xtal+0x3c>)
  4029a2:	6a11      	ldr	r1, [r2, #32]
  4029a4:	4b06      	ldr	r3, [pc, #24]	; (4029c0 <pmc_switch_mainck_to_xtal+0x50>)
  4029a6:	430b      	orrs	r3, r1
  4029a8:	6213      	str	r3, [r2, #32]
  4029aa:	4770      	bx	lr
  4029ac:	400e0600 	.word	0x400e0600
  4029b0:	fec8fffc 	.word	0xfec8fffc
  4029b4:	01370002 	.word	0x01370002
  4029b8:	ffc8fffc 	.word	0xffc8fffc
  4029bc:	00370001 	.word	0x00370001
  4029c0:	01370000 	.word	0x01370000

004029c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4029c4:	4b02      	ldr	r3, [pc, #8]	; (4029d0 <pmc_osc_is_ready_mainck+0xc>)
  4029c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4029c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4029cc:	4770      	bx	lr
  4029ce:	bf00      	nop
  4029d0:	400e0600 	.word	0x400e0600

004029d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4029d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4029d8:	4b01      	ldr	r3, [pc, #4]	; (4029e0 <pmc_disable_pllack+0xc>)
  4029da:	629a      	str	r2, [r3, #40]	; 0x28
  4029dc:	4770      	bx	lr
  4029de:	bf00      	nop
  4029e0:	400e0600 	.word	0x400e0600

004029e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4029e4:	4b02      	ldr	r3, [pc, #8]	; (4029f0 <pmc_is_locked_pllack+0xc>)
  4029e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4029e8:	f000 0002 	and.w	r0, r0, #2
  4029ec:	4770      	bx	lr
  4029ee:	bf00      	nop
  4029f0:	400e0600 	.word	0x400e0600

004029f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4029f4:	283f      	cmp	r0, #63	; 0x3f
  4029f6:	d81e      	bhi.n	402a36 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4029f8:	281f      	cmp	r0, #31
  4029fa:	d80c      	bhi.n	402a16 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4029fc:	4b11      	ldr	r3, [pc, #68]	; (402a44 <pmc_enable_periph_clk+0x50>)
  4029fe:	699a      	ldr	r2, [r3, #24]
  402a00:	2301      	movs	r3, #1
  402a02:	4083      	lsls	r3, r0
  402a04:	401a      	ands	r2, r3
  402a06:	4293      	cmp	r3, r2
  402a08:	d017      	beq.n	402a3a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402a0a:	2301      	movs	r3, #1
  402a0c:	4083      	lsls	r3, r0
  402a0e:	4a0d      	ldr	r2, [pc, #52]	; (402a44 <pmc_enable_periph_clk+0x50>)
  402a10:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a12:	2000      	movs	r0, #0
  402a14:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a16:	4b0b      	ldr	r3, [pc, #44]	; (402a44 <pmc_enable_periph_clk+0x50>)
  402a18:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402a1c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a1e:	2301      	movs	r3, #1
  402a20:	4083      	lsls	r3, r0
  402a22:	401a      	ands	r2, r3
  402a24:	4293      	cmp	r3, r2
  402a26:	d00a      	beq.n	402a3e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402a28:	2301      	movs	r3, #1
  402a2a:	4083      	lsls	r3, r0
  402a2c:	4a05      	ldr	r2, [pc, #20]	; (402a44 <pmc_enable_periph_clk+0x50>)
  402a2e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402a32:	2000      	movs	r0, #0
  402a34:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402a36:	2001      	movs	r0, #1
  402a38:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a3a:	2000      	movs	r0, #0
  402a3c:	4770      	bx	lr
  402a3e:	2000      	movs	r0, #0
}
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop
  402a44:	400e0600 	.word	0x400e0600

00402a48 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402a48:	4b0f      	ldr	r3, [pc, #60]	; (402a88 <twihs_set_speed+0x40>)
  402a4a:	4299      	cmp	r1, r3
  402a4c:	d819      	bhi.n	402a82 <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402a4e:	0049      	lsls	r1, r1, #1
  402a50:	fbb2 f2f1 	udiv	r2, r2, r1
  402a54:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a56:	2aff      	cmp	r2, #255	; 0xff
  402a58:	d907      	bls.n	402a6a <twihs_set_speed+0x22>
  402a5a:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  402a5c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  402a5e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a60:	2b06      	cmp	r3, #6
  402a62:	d803      	bhi.n	402a6c <twihs_set_speed+0x24>
  402a64:	2aff      	cmp	r2, #255	; 0xff
  402a66:	d8f9      	bhi.n	402a5c <twihs_set_speed+0x14>
  402a68:	e000      	b.n	402a6c <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a6a:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a6c:	0211      	lsls	r1, r2, #8
  402a6e:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  402a70:	041b      	lsls	r3, r3, #16
  402a72:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402a76:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a78:	b2d2      	uxtb	r2, r2
  402a7a:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  402a7c:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  402a7e:	2000      	movs	r0, #0
  402a80:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402a82:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402a84:	4770      	bx	lr
  402a86:	bf00      	nop
  402a88:	00061a80 	.word	0x00061a80

00402a8c <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402a8c:	b508      	push	{r3, lr}
  402a8e:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  402a90:	f04f 31ff 	mov.w	r1, #4294967295
  402a94:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  402a96:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402a98:	2180      	movs	r1, #128	; 0x80
  402a9a:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  402a9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402a9e:	2108      	movs	r1, #8
  402aa0:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402aa2:	2120      	movs	r1, #32
  402aa4:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402aa6:	2104      	movs	r1, #4
  402aa8:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402aaa:	6851      	ldr	r1, [r2, #4]
  402aac:	6812      	ldr	r2, [r2, #0]
  402aae:	4b03      	ldr	r3, [pc, #12]	; (402abc <twihs_master_init+0x30>)
  402ab0:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  402ab2:	2801      	cmp	r0, #1
  402ab4:	bf14      	ite	ne
  402ab6:	2000      	movne	r0, #0
  402ab8:	2001      	moveq	r0, #1
  402aba:	bd08      	pop	{r3, pc}
  402abc:	00402a49 	.word	0x00402a49

00402ac0 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402ac0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  402ac2:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402ac4:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  402ac6:	2a00      	cmp	r2, #0
  402ac8:	d047      	beq.n	402b5a <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402aca:	2600      	movs	r6, #0
  402acc:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402ace:	684b      	ldr	r3, [r1, #4]
  402ad0:	021b      	lsls	r3, r3, #8
  402ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402ad6:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402ada:	7c0b      	ldrb	r3, [r1, #16]
  402adc:	041b      	lsls	r3, r3, #16
  402ade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402ae2:	432b      	orrs	r3, r5
  402ae4:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402ae6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402ae8:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402aea:	b15d      	cbz	r5, 402b04 <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  402aec:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402aee:	2d01      	cmp	r5, #1
  402af0:	dd02      	ble.n	402af8 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  402af2:	784e      	ldrb	r6, [r1, #1]
  402af4:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402af8:	2d02      	cmp	r5, #2
  402afa:	dd04      	ble.n	402b06 <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  402afc:	7889      	ldrb	r1, [r1, #2]
  402afe:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402b02:	e000      	b.n	402b06 <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402b04:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b06:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402b08:	2301      	movs	r3, #1
  402b0a:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  402b0c:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b10:	2702      	movs	r7, #2
  402b12:	e014      	b.n	402b3e <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402b14:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b16:	f413 7f80 	tst.w	r3, #256	; 0x100
  402b1a:	d120      	bne.n	402b5e <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  402b1c:	3901      	subs	r1, #1
  402b1e:	d020      	beq.n	402b62 <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  402b20:	2a01      	cmp	r2, #1
  402b22:	d104      	bne.n	402b2e <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b24:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  402b26:	f013 0f02 	tst.w	r3, #2
  402b2a:	d0f3      	beq.n	402b14 <twihs_master_read+0x54>
  402b2c:	e01d      	b.n	402b6a <twihs_master_read+0xaa>
  402b2e:	f013 0f02 	tst.w	r3, #2
  402b32:	d00a      	beq.n	402b4a <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b34:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b36:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b3a:	3a01      	subs	r2, #1
  402b3c:	d007      	beq.n	402b4e <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  402b3e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b40:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  402b44:	d10f      	bne.n	402b66 <twihs_master_read+0xa6>
  402b46:	4631      	mov	r1, r6
  402b48:	e7ea      	b.n	402b20 <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b4a:	2a00      	cmp	r2, #0
  402b4c:	d1e2      	bne.n	402b14 <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402b4e:	6a03      	ldr	r3, [r0, #32]
  402b50:	f013 0f01 	tst.w	r3, #1
  402b54:	d0fb      	beq.n	402b4e <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  402b56:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  402b58:	e00a      	b.n	402b70 <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402b5a:	2501      	movs	r5, #1
  402b5c:	e008      	b.n	402b70 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b5e:	2505      	movs	r5, #5
  402b60:	e006      	b.n	402b70 <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  402b62:	2509      	movs	r5, #9
  402b64:	e004      	b.n	402b70 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b66:	2505      	movs	r5, #5
  402b68:	e002      	b.n	402b70 <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b6c:	7023      	strb	r3, [r4, #0]
  402b6e:	e7ee      	b.n	402b4e <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  402b70:	4628      	mov	r0, r5
  402b72:	bcf0      	pop	{r4, r5, r6, r7}
  402b74:	4770      	bx	lr
  402b76:	bf00      	nop

00402b78 <Twihs_reinit>:

void Twihs_reinit() {
  402b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b7c:	b086      	sub	sp, #24
	sendDebugString("TWIHS RE-INITIALIZATION - STARTED\n");
  402b7e:	481c      	ldr	r0, [pc, #112]	; (402bf0 <Twihs_reinit+0x78>)
  402b80:	4e1c      	ldr	r6, [pc, #112]	; (402bf4 <Twihs_reinit+0x7c>)
  402b82:	47b0      	blx	r6
	pio_set_output(PIOA,1<<3 | 1<<4,LOW,DISABLE,DISABLE);
  402b84:	4d1c      	ldr	r5, [pc, #112]	; (402bf8 <Twihs_reinit+0x80>)
  402b86:	2400      	movs	r4, #0
  402b88:	9400      	str	r4, [sp, #0]
  402b8a:	4628      	mov	r0, r5
  402b8c:	2118      	movs	r1, #24
  402b8e:	4622      	mov	r2, r4
  402b90:	4623      	mov	r3, r4
  402b92:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402c18 <Twihs_reinit+0xa0>
  402b96:	47c0      	blx	r8
	pio_clear(PIOA,1<<3 | 1<<4);
  402b98:	4628      	mov	r0, r5
  402b9a:	2118      	movs	r1, #24
  402b9c:	4f17      	ldr	r7, [pc, #92]	; (402bfc <Twihs_reinit+0x84>)
  402b9e:	47b8      	blx	r7
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402ba0:	4628      	mov	r0, r5
  402ba2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ba6:	2218      	movs	r2, #24
  402ba8:	4b15      	ldr	r3, [pc, #84]	; (402c00 <Twihs_reinit+0x88>)
  402baa:	4798      	blx	r3
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402bac:	9400      	str	r4, [sp, #0]
  402bae:	4628      	mov	r0, r5
  402bb0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bb4:	4622      	mov	r2, r4
  402bb6:	4623      	mov	r3, r4
  402bb8:	47c0      	blx	r8
	pio_clear(PIOA,PIO_PA26);
  402bba:	4628      	mov	r0, r5
  402bbc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bc0:	47b8      	blx	r7
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402bc2:	4810      	ldr	r0, [pc, #64]	; (402c04 <Twihs_reinit+0x8c>)
  402bc4:	2380      	movs	r3, #128	; 0x80
  402bc6:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_RHR;
  402bc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402bca:	2308      	movs	r3, #8
  402bcc:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402bce:	2320      	movs	r3, #32
  402bd0:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402bd2:	2304      	movs	r3, #4
  402bd4:	6003      	str	r3, [r0, #0]
	pio_clear(PIOA,PIO_PA26);
	
	twihs_reset(TWIHS0);
	twihs_enable_master_mode(TWIHS0);
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402bd6:	4b0c      	ldr	r3, [pc, #48]	; (402c08 <Twihs_reinit+0x90>)
  402bd8:	9303      	str	r3, [sp, #12]
	twihs_opts.speed = 200000;
  402bda:	4b0c      	ldr	r3, [pc, #48]	; (402c0c <Twihs_reinit+0x94>)
  402bdc:	9304      	str	r3, [sp, #16]
	twihs_master_init(TWIHS0,&twihs_opts);
  402bde:	a903      	add	r1, sp, #12
  402be0:	4b0b      	ldr	r3, [pc, #44]	; (402c10 <Twihs_reinit+0x98>)
  402be2:	4798      	blx	r3
	sendDebugString("TWIHS RE-INITIALIZATION - FINISHED\n");
  402be4:	480b      	ldr	r0, [pc, #44]	; (402c14 <Twihs_reinit+0x9c>)
  402be6:	47b0      	blx	r6
}
  402be8:	b006      	add	sp, #24
  402bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402bee:	bf00      	nop
  402bf0:	0040f094 	.word	0x0040f094
  402bf4:	0040019d 	.word	0x0040019d
  402bf8:	400e0e00 	.word	0x400e0e00
  402bfc:	004027c1 	.word	0x004027c1
  402c00:	004027c5 	.word	0x004027c5
  402c04:	40018000 	.word	0x40018000
  402c08:	11e1a300 	.word	0x11e1a300
  402c0c:	00030d40 	.word	0x00030d40
  402c10:	00402a8d 	.word	0x00402a8d
  402c14:	0040f0b8 	.word	0x0040f0b8
  402c18:	00402891 	.word	0x00402891

00402c1c <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402c1c:	b570      	push	{r4, r5, r6, lr}
	uint32_t status, cnt = p_packet->length;
  402c1e:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402c20:	688d      	ldr	r5, [r1, #8]
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
  402c22:	2c00      	cmp	r4, #0
  402c24:	d055      	beq.n	402cd2 <twihs_master_write+0xb6>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402c26:	2600      	movs	r6, #0
  402c28:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c2a:	7c0b      	ldrb	r3, [r1, #16]
  402c2c:	041b      	lsls	r3, r3, #16
  402c2e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402c32:	684b      	ldr	r3, [r1, #4]
  402c34:	021b      	lsls	r3, r3, #8
  402c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c3a:	4313      	orrs	r3, r2
  402c3c:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402c3e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402c40:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402c42:	2a00      	cmp	r2, #0
  402c44:	d051      	beq.n	402cea <twihs_master_write+0xce>
		return 0;

	val = addr[0];
  402c46:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402c48:	2a01      	cmp	r2, #1
  402c4a:	dd02      	ble.n	402c52 <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  402c4c:	784e      	ldrb	r6, [r1, #1]
  402c4e:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402c52:	2a02      	cmp	r2, #2
  402c54:	dd4a      	ble.n	402cec <twihs_master_write+0xd0>
		val <<= 8;
		val |= addr[2];
  402c56:	788a      	ldrb	r2, [r1, #2]
  402c58:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402c5c:	e046      	b.n	402cec <twihs_master_write+0xd0>
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402c5e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402c60:	f413 7f80 	tst.w	r3, #256	; 0x100
  402c64:	d137      	bne.n	402cd6 <twihs_master_write+0xba>
			return TWIHS_RECEIVE_NACK;
		}
		timeout++;
		if(timeout > 0xFFFF) { 
  402c66:	3a01      	subs	r2, #1
  402c68:	d103      	bne.n	402c72 <twihs_master_write+0x56>
			Twihs_reinit();
  402c6a:	4b25      	ldr	r3, [pc, #148]	; (402d00 <twihs_master_write+0xe4>)
  402c6c:	4798      	blx	r3
			return TWIHS_RECEIVE_NACK;
  402c6e:	2105      	movs	r1, #5
  402c70:	e044      	b.n	402cfc <twihs_master_write+0xe0>
		}
		if (!(status & TWIHS_SR_TXRDY)) {
  402c72:	f013 0f04 	tst.w	r3, #4
  402c76:	d003      	beq.n	402c80 <twihs_master_write+0x64>
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402c78:	782b      	ldrb	r3, [r5, #0]
  402c7a:	6343      	str	r3, [r0, #52]	; 0x34

		cnt--;
  402c7c:	3c01      	subs	r4, #1
		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402c7e:	3501      	adds	r5, #1
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  402c80:	2c00      	cmp	r4, #0
  402c82:	d1ec      	bne.n	402c5e <twihs_master_write+0x42>

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402c84:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402c86:	f413 7480 	ands.w	r4, r3, #256	; 0x100
  402c8a:	d126      	bne.n	402cda <twihs_master_write+0xbe>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402c8c:	f013 0f04 	tst.w	r3, #4
  402c90:	d10e      	bne.n	402cb0 <twihs_master_write+0x94>
  402c92:	2300      	movs	r3, #0
		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402c98:	e002      	b.n	402ca0 <twihs_master_write+0x84>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402c9a:	f012 0f04 	tst.w	r2, #4
  402c9e:	d107      	bne.n	402cb0 <twihs_master_write+0x94>
			break;
		}
		timeout++;
  402ca0:	3301      	adds	r3, #1

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402ca2:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402ca4:	f412 7f80 	tst.w	r2, #256	; 0x100
  402ca8:	d119      	bne.n	402cde <twihs_master_write+0xc2>
  402caa:	428b      	cmp	r3, r1
  402cac:	d9f5      	bls.n	402c9a <twihs_master_write+0x7e>
  402cae:	e016      	b.n	402cde <twihs_master_write+0xc2>
			break;
		}
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402cb0:	2302      	movs	r3, #2
  402cb2:	6003      	str	r3, [r0, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cb4:	6a01      	ldr	r1, [r0, #32]
  402cb6:	f011 0101 	ands.w	r1, r1, #1
  402cba:	d112      	bne.n	402ce2 <twihs_master_write+0xc6>
  402cbc:	2300      	movs	r3, #0
  402cbe:	f64f 74fe 	movw	r4, #65534	; 0xfffe
		timeout++;
  402cc2:	3301      	adds	r3, #1
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cc4:	6a02      	ldr	r2, [r0, #32]
  402cc6:	f012 0f01 	tst.w	r2, #1
  402cca:	d117      	bne.n	402cfc <twihs_master_write+0xe0>
  402ccc:	42a3      	cmp	r3, r4
  402cce:	d9f8      	bls.n	402cc2 <twihs_master_write+0xa6>
  402cd0:	e014      	b.n	402cfc <twihs_master_write+0xe0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402cd2:	2101      	movs	r1, #1
  402cd4:	e012      	b.n	402cfc <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402cd6:	2105      	movs	r1, #5
  402cd8:	e010      	b.n	402cfc <twihs_master_write+0xe0>
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
			return TWIHS_RECEIVE_NACK;
  402cda:	2105      	movs	r1, #5
  402cdc:	e00e      	b.n	402cfc <twihs_master_write+0xe0>
  402cde:	2105      	movs	r1, #5
  402ce0:	e00c      	b.n	402cfc <twihs_master_write+0xe0>

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
  402ce2:	4621      	mov	r1, r4
  402ce4:	e00a      	b.n	402cfc <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402ce6:	2105      	movs	r1, #5
  402ce8:	e008      	b.n	402cfc <twihs_master_write+0xe0>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402cea:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402cec:	60c3      	str	r3, [r0, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402cee:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402cf0:	f413 7f80 	tst.w	r3, #256	; 0x100
  402cf4:	d1f7      	bne.n	402ce6 <twihs_master_write+0xca>
  402cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402cfa:	e7ba      	b.n	402c72 <twihs_master_write+0x56>
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
}
  402cfc:	4608      	mov	r0, r1
  402cfe:	bd70      	pop	{r4, r5, r6, pc}
  402d00:	00402b79 	.word	0x00402b79

00402d04 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402d04:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402d06:	23ac      	movs	r3, #172	; 0xac
  402d08:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402d0a:	680b      	ldr	r3, [r1, #0]
  402d0c:	684a      	ldr	r2, [r1, #4]
  402d0e:	fbb3 f3f2 	udiv	r3, r3, r2
  402d12:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402d14:	1e5c      	subs	r4, r3, #1
  402d16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402d1a:	4294      	cmp	r4, r2
  402d1c:	d806      	bhi.n	402d2c <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402d1e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402d20:	688b      	ldr	r3, [r1, #8]
  402d22:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d24:	2350      	movs	r3, #80	; 0x50
  402d26:	6003      	str	r3, [r0, #0]

	return 0;
  402d28:	2000      	movs	r0, #0
  402d2a:	e000      	b.n	402d2e <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402d2c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d32:	4770      	bx	lr

00402d34 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402d34:	2340      	movs	r3, #64	; 0x40
  402d36:	6003      	str	r3, [r0, #0]
  402d38:	4770      	bx	lr
  402d3a:	bf00      	nop

00402d3c <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402d3c:	2310      	movs	r3, #16
  402d3e:	6003      	str	r3, [r0, #0]
  402d40:	4770      	bx	lr
  402d42:	bf00      	nop

00402d44 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d44:	2350      	movs	r3, #80	; 0x50
  402d46:	6003      	str	r3, [r0, #0]
  402d48:	4770      	bx	lr
  402d4a:	bf00      	nop

00402d4c <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402d4c:	6081      	str	r1, [r0, #8]
  402d4e:	4770      	bx	lr

00402d50 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402d50:	6940      	ldr	r0, [r0, #20]
}
  402d52:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402d56:	4770      	bx	lr

00402d58 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402d58:	6201      	str	r1, [r0, #32]
  402d5a:	4770      	bx	lr

00402d5c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402d5c:	6943      	ldr	r3, [r0, #20]
  402d5e:	f013 0f02 	tst.w	r3, #2
  402d62:	d002      	beq.n	402d6a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402d64:	61c1      	str	r1, [r0, #28]
	return 0;
  402d66:	2000      	movs	r0, #0
  402d68:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402d6a:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402d6c:	4770      	bx	lr
  402d6e:	bf00      	nop

00402d70 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402d70:	6943      	ldr	r3, [r0, #20]
  402d72:	f013 0f01 	tst.w	r3, #1
  402d76:	d003      	beq.n	402d80 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402d78:	6983      	ldr	r3, [r0, #24]
  402d7a:	700b      	strb	r3, [r1, #0]
	return 0;
  402d7c:	2000      	movs	r0, #0
  402d7e:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402d80:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402d82:	4770      	bx	lr

00402d84 <board_init>:




void board_init(void)
{
  402d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d88:	b09f      	sub	sp, #124	; 0x7c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402d8a:	48a8      	ldr	r0, [pc, #672]	; (40302c <board_init+0x2a8>)
  402d8c:	2100      	movs	r1, #0
  402d8e:	4ba8      	ldr	r3, [pc, #672]	; (403030 <board_init+0x2ac>)
  402d90:	4798      	blx	r3
	sysclk_init();
  402d92:	4ba8      	ldr	r3, [pc, #672]	; (403034 <board_init+0x2b0>)
  402d94:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402d96:	f8df 9358 	ldr.w	r9, [pc, #856]	; 4030f0 <board_init+0x36c>
  402d9a:	ad1b      	add	r5, sp, #108	; 0x6c
  402d9c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402da0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402da4:	202e      	movs	r0, #46	; 0x2e
  402da6:	f8df 834c 	ldr.w	r8, [pc, #844]	; 4030f4 <board_init+0x370>
  402daa:	47c0      	blx	r8
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  402dac:	202e      	movs	r0, #46	; 0x2e
  402dae:	47c0      	blx	r8
	uart_init(USART_SERIAL, &usart_console_settings);
  402db0:	4ca1      	ldr	r4, [pc, #644]	; (403038 <board_init+0x2b4>)
  402db2:	4620      	mov	r0, r4
  402db4:	4629      	mov	r1, r5
  402db6:	4ba1      	ldr	r3, [pc, #644]	; (40303c <board_init+0x2b8>)
  402db8:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  402dba:	4620      	mov	r0, r4
  402dbc:	4ba0      	ldr	r3, [pc, #640]	; (403040 <board_init+0x2bc>)
  402dbe:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  402dc0:	4620      	mov	r0, r4
  402dc2:	4ba0      	ldr	r3, [pc, #640]	; (403044 <board_init+0x2c0>)
  402dc4:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  402dc6:	4620      	mov	r0, r4
  402dc8:	4b9f      	ldr	r3, [pc, #636]	; (403048 <board_init+0x2c4>)
  402dca:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(83/GLOBAL_SLOWDOWN));
  402dcc:	4620      	mov	r0, r4
  402dce:	2153      	movs	r1, #83	; 0x53
  402dd0:	4b9e      	ldr	r3, [pc, #632]	; (40304c <board_init+0x2c8>)
  402dd2:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  402dd4:	2010      	movs	r0, #16
  402dd6:	47c0      	blx	r8
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  402dd8:	489d      	ldr	r0, [pc, #628]	; (403050 <board_init+0x2cc>)
  402dda:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402dde:	4a9d      	ldr	r2, [pc, #628]	; (403054 <board_init+0x2d0>)
  402de0:	4e9d      	ldr	r6, [pc, #628]	; (403058 <board_init+0x2d4>)
  402de2:	47b0      	blx	r6
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  402de4:	489d      	ldr	r0, [pc, #628]	; (40305c <board_init+0x2d8>)
  402de6:	4d9e      	ldr	r5, [pc, #632]	; (403060 <board_init+0x2dc>)
  402de8:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	sendDebugString("LED INITIALIZATION - STARTED\n");
  402dea:	489e      	ldr	r0, [pc, #632]	; (403064 <board_init+0x2e0>)
  402dec:	47a8      	blx	r5
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  402dee:	489e      	ldr	r0, [pc, #632]	; (403068 <board_init+0x2e4>)
  402df0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402df8:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
  402dfa:	200a      	movs	r0, #10
  402dfc:	47c0      	blx	r8
		pmc_enable_periph_clk(ID_PIOB);
  402dfe:	200b      	movs	r0, #11
  402e00:	47c0      	blx	r8
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  402e02:	2400      	movs	r4, #0
  402e04:	9400      	str	r4, [sp, #0]
  402e06:	4899      	ldr	r0, [pc, #612]	; (40306c <board_init+0x2e8>)
  402e08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e0c:	4622      	mov	r2, r4
  402e0e:	4623      	mov	r3, r4
  402e10:	4f97      	ldr	r7, [pc, #604]	; (403070 <board_init+0x2ec>)
  402e12:	47b8      	blx	r7
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402e14:	9400      	str	r4, [sp, #0]
  402e16:	4895      	ldr	r0, [pc, #596]	; (40306c <board_init+0x2e8>)
  402e18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e1c:	4622      	mov	r2, r4
  402e1e:	4623      	mov	r3, r4
  402e20:	47b8      	blx	r7
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  402e22:	9400      	str	r4, [sp, #0]
  402e24:	4891      	ldr	r0, [pc, #580]	; (40306c <board_init+0x2e8>)
  402e26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e2a:	4622      	mov	r2, r4
  402e2c:	4623      	mov	r3, r4
  402e2e:	47b8      	blx	r7
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  402e30:	9400      	str	r4, [sp, #0]
  402e32:	488e      	ldr	r0, [pc, #568]	; (40306c <board_init+0x2e8>)
  402e34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402e38:	4622      	mov	r2, r4
  402e3a:	4623      	mov	r3, r4
  402e3c:	47b8      	blx	r7
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402e3e:	9400      	str	r4, [sp, #0]
  402e40:	4889      	ldr	r0, [pc, #548]	; (403068 <board_init+0x2e4>)
  402e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e46:	4622      	mov	r2, r4
  402e48:	4623      	mov	r3, r4
  402e4a:	47b8      	blx	r7
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402e4c:	9400      	str	r4, [sp, #0]
  402e4e:	4887      	ldr	r0, [pc, #540]	; (40306c <board_init+0x2e8>)
  402e50:	2104      	movs	r1, #4
  402e52:	4622      	mov	r2, r4
  402e54:	4623      	mov	r3, r4
  402e56:	47b8      	blx	r7
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402e58:	9400      	str	r4, [sp, #0]
  402e5a:	4884      	ldr	r0, [pc, #528]	; (40306c <board_init+0x2e8>)
  402e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402e60:	4622      	mov	r2, r4
  402e62:	4623      	mov	r3, r4
  402e64:	47b8      	blx	r7
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402e66:	9400      	str	r4, [sp, #0]
  402e68:	4880      	ldr	r0, [pc, #512]	; (40306c <board_init+0x2e8>)
  402e6a:	2140      	movs	r1, #64	; 0x40
  402e6c:	4622      	mov	r2, r4
  402e6e:	4623      	mov	r3, r4
  402e70:	47b8      	blx	r7
		
		sendDebugString("LED INITIALIZATION - FINISHED\n");
  402e72:	4880      	ldr	r0, [pc, #512]	; (403074 <board_init+0x2f0>)
  402e74:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402e76:	4880      	ldr	r0, [pc, #512]	; (403078 <board_init+0x2f4>)
  402e78:	47a8      	blx	r5
		wdt_disable(WDT);
  402e7a:	4880      	ldr	r0, [pc, #512]	; (40307c <board_init+0x2f8>)
  402e7c:	4b80      	ldr	r3, [pc, #512]	; (403080 <board_init+0x2fc>)
  402e7e:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402e80:	4880      	ldr	r0, [pc, #512]	; (403084 <board_init+0x300>)
  402e82:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402e84:	4880      	ldr	r0, [pc, #512]	; (403088 <board_init+0x304>)
  402e86:	47a8      	blx	r5
		cpu_irq_enable();
  402e88:	4b80      	ldr	r3, [pc, #512]	; (40308c <board_init+0x308>)
  402e8a:	f04f 0201 	mov.w	r2, #1
  402e8e:	701a      	strb	r2, [r3, #0]
  402e90:	f3bf 8f5f 	dmb	sy
  402e94:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402e96:	487e      	ldr	r0, [pc, #504]	; (403090 <board_init+0x30c>)
  402e98:	47a8      	blx	r5
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("SDRAM INITIALIZATION - STARTED\n");
  402e9a:	487e      	ldr	r0, [pc, #504]	; (403094 <board_init+0x310>)
  402e9c:	47a8      	blx	r5
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  402e9e:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  402ea2:	f109 090c 	add.w	r9, r9, #12
  402ea6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402eaa:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(8)		|
			SDRAMC_CR_TXSR(12)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  402eae:	203e      	movs	r0, #62	; 0x3e
  402eb0:	47c0      	blx	r8
	
	pmc_enable_periph_clk(ID_PIOC);
  402eb2:	200c      	movs	r0, #12
  402eb4:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOD);
  402eb6:	2010      	movs	r0, #16
  402eb8:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOE);
  402eba:	2011      	movs	r0, #17
  402ebc:	47c0      	blx	r8
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  402ebe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 4030f8 <board_init+0x374>
  402ec2:	4875      	ldr	r0, [pc, #468]	; (403098 <board_init+0x314>)
  402ec4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ec8:	464a      	mov	r2, r9
  402eca:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  402ecc:	4872      	ldr	r0, [pc, #456]	; (403098 <board_init+0x314>)
  402ece:	4649      	mov	r1, r9
  402ed0:	2201      	movs	r2, #1
  402ed2:	f8df b228 	ldr.w	fp, [pc, #552]	; 4030fc <board_init+0x378>
  402ed6:	47d8      	blx	fp
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  402ed8:	486f      	ldr	r0, [pc, #444]	; (403098 <board_init+0x314>)
  402eda:	4970      	ldr	r1, [pc, #448]	; (40309c <board_init+0x318>)
  402edc:	4622      	mov	r2, r4
  402ede:	f8df 9220 	ldr.w	r9, [pc, #544]	; 403100 <board_init+0x37c>
  402ee2:	47c8      	blx	r9
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402ee4:	4861      	ldr	r0, [pc, #388]	; (40306c <board_init+0x2e8>)
  402ee6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402eea:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402eee:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  402ef0:	485e      	ldr	r0, [pc, #376]	; (40306c <board_init+0x2e8>)
  402ef2:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402ef6:	4622      	mov	r2, r4
  402ef8:	47d8      	blx	fp
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  402efa:	485c      	ldr	r0, [pc, #368]	; (40306c <board_init+0x2e8>)
  402efc:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f00:	2201      	movs	r2, #1
  402f02:	47c8      	blx	r9
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  402f04:	4859      	ldr	r0, [pc, #356]	; (40306c <board_init+0x2e8>)
  402f06:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f0a:	4a65      	ldr	r2, [pc, #404]	; (4030a0 <board_init+0x31c>)
  402f0c:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402f0e:	4857      	ldr	r0, [pc, #348]	; (40306c <board_init+0x2e8>)
  402f10:	4963      	ldr	r1, [pc, #396]	; (4030a0 <board_init+0x31c>)
  402f12:	2201      	movs	r2, #1
  402f14:	47d8      	blx	fp
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402f16:	4855      	ldr	r0, [pc, #340]	; (40306c <board_init+0x2e8>)
  402f18:	4961      	ldr	r1, [pc, #388]	; (4030a0 <board_init+0x31c>)
  402f1a:	4622      	mov	r2, r4
  402f1c:	47c8      	blx	r9
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402f1e:	484c      	ldr	r0, [pc, #304]	; (403050 <board_init+0x2cc>)
  402f20:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f24:	4a5f      	ldr	r2, [pc, #380]	; (4030a4 <board_init+0x320>)
  402f26:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402f28:	4849      	ldr	r0, [pc, #292]	; (403050 <board_init+0x2cc>)
  402f2a:	495e      	ldr	r1, [pc, #376]	; (4030a4 <board_init+0x320>)
  402f2c:	2201      	movs	r2, #1
  402f2e:	47d8      	blx	fp
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402f30:	4847      	ldr	r0, [pc, #284]	; (403050 <board_init+0x2cc>)
  402f32:	495c      	ldr	r1, [pc, #368]	; (4030a4 <board_init+0x320>)
  402f34:	4622      	mov	r2, r4
  402f36:	47c8      	blx	r9
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402f38:	485b      	ldr	r0, [pc, #364]	; (4030a8 <board_init+0x324>)
  402f3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f3e:	223f      	movs	r2, #63	; 0x3f
  402f40:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402f42:	4859      	ldr	r0, [pc, #356]	; (4030a8 <board_init+0x324>)
  402f44:	213f      	movs	r1, #63	; 0x3f
  402f46:	2201      	movs	r2, #1
  402f48:	47d8      	blx	fp
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402f4a:	4857      	ldr	r0, [pc, #348]	; (4030a8 <board_init+0x324>)
  402f4c:	213f      	movs	r1, #63	; 0x3f
  402f4e:	4622      	mov	r2, r4
  402f50:	47c8      	blx	r9
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402f52:	4a56      	ldr	r2, [pc, #344]	; (4030ac <board_init+0x328>)
  402f54:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402f58:	f043 0310 	orr.w	r3, r3, #16
  402f5c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402f60:	484d      	ldr	r0, [pc, #308]	; (403098 <board_init+0x314>)
  402f62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402f6a:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402f6c:	4650      	mov	r0, sl
  402f6e:	4950      	ldr	r1, [pc, #320]	; (4030b0 <board_init+0x32c>)
  402f70:	4b50      	ldr	r3, [pc, #320]	; (4030b4 <board_init+0x330>)
  402f72:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402f74:	4850      	ldr	r0, [pc, #320]	; (4030b8 <board_init+0x334>)
  402f76:	47a8      	blx	r5
	//checkSDRAM
	//SdramCheck();
	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402f78:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  402f7c:	4621      	mov	r1, r4
  402f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402f82:	4b4e      	ldr	r3, [pc, #312]	; (4030bc <board_init+0x338>)
  402f84:	4798      	blx	r3
	sendDebugString("SDRAM INITIALIZATION - FINISHED\n");
  402f86:	484e      	ldr	r0, [pc, #312]	; (4030c0 <board_init+0x33c>)
  402f88:	47a8      	blx	r5
	/* ######################################
	   ######################################
					 Setup i2c
	   ######################################
	   ###################################### */
	sendDebugString("TWIHS INITIALIZATION - STARTED\n");
  402f8a:	484e      	ldr	r0, [pc, #312]	; (4030c4 <board_init+0x340>)
  402f8c:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402f8e:	9400      	str	r4, [sp, #0]
  402f90:	482f      	ldr	r0, [pc, #188]	; (403050 <board_init+0x2cc>)
  402f92:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402f96:	4622      	mov	r2, r4
  402f98:	4623      	mov	r3, r4
  402f9a:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402f9c:	482c      	ldr	r0, [pc, #176]	; (403050 <board_init+0x2cc>)
  402f9e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fa2:	f8df a160 	ldr.w	sl, [pc, #352]	; 403104 <board_init+0x380>
  402fa6:	47d0      	blx	sl
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402fa8:	9400      	str	r4, [sp, #0]
  402faa:	4830      	ldr	r0, [pc, #192]	; (40306c <board_init+0x2e8>)
  402fac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fb0:	4622      	mov	r2, r4
  402fb2:	4623      	mov	r3, r4
  402fb4:	47b8      	blx	r7
	pio_clear(PIOA,PIO_PA26);
  402fb6:	482d      	ldr	r0, [pc, #180]	; (40306c <board_init+0x2e8>)
  402fb8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fbc:	4b42      	ldr	r3, [pc, #264]	; (4030c8 <board_init+0x344>)
  402fbe:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TWIHS0);
  402fc0:	2013      	movs	r0, #19
  402fc2:	47c0      	blx	r8
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402fc4:	4829      	ldr	r0, [pc, #164]	; (40306c <board_init+0x2e8>)
  402fc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402fca:	2218      	movs	r2, #24
  402fcc:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402fce:	9400      	str	r4, [sp, #0]
  402fd0:	481f      	ldr	r0, [pc, #124]	; (403050 <board_init+0x2cc>)
  402fd2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fd6:	4622      	mov	r2, r4
  402fd8:	4623      	mov	r3, r4
  402fda:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402fdc:	481c      	ldr	r0, [pc, #112]	; (403050 <board_init+0x2cc>)
  402fde:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fe2:	47d0      	blx	sl
	
	Twihs_reinit();
  402fe4:	4b39      	ldr	r3, [pc, #228]	; (4030cc <board_init+0x348>)
  402fe6:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS0);
	//twihs_options_t twihs_opts;
	//twihs_opts.master_clk = sysclk_get_cpu_hz();
	//twihs_opts.speed = 200000;
	//twihs_master_init(TWIHS0,&twihs_opts);
	sendDebugString("TWIHS INITIALIZATION - FINISHED\n");
  402fe8:	4839      	ldr	r0, [pc, #228]	; (4030d0 <board_init+0x34c>)
  402fea:	47a8      	blx	r5
	/* ######################################
	   ######################################
				 Setup Servo Driver
	   ######################################
	   ###################################### */
	sendDebugString("SERVO DRIVER INITIALIZATION - STARTED\n");
  402fec:	4839      	ldr	r0, [pc, #228]	; (4030d4 <board_init+0x350>)
  402fee:	47a8      	blx	r5
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  402ff0:	2040      	movs	r0, #64	; 0x40
  402ff2:	4b39      	ldr	r3, [pc, #228]	; (4030d8 <board_init+0x354>)
  402ff4:	4798      	blx	r3
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  402ff6:	2041      	movs	r0, #65	; 0x41
  402ff8:	4b37      	ldr	r3, [pc, #220]	; (4030d8 <board_init+0x354>)
  402ffa:	4798      	blx	r3
	sendDebugString("SERVO DRIVER INITIALIZATION - FINISHED\n");
  402ffc:	4837      	ldr	r0, [pc, #220]	; (4030dc <board_init+0x358>)
  402ffe:	47a8      	blx	r5
	   ######################################
			 		Setup Camera
	   ######################################
	   ###################################### */

	sendDebugString("CAMERA INITIALIZATION - STARTED\n");
  403000:	4837      	ldr	r0, [pc, #220]	; (4030e0 <board_init+0x35c>)
  403002:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  403004:	9400      	str	r4, [sp, #0]
  403006:	4812      	ldr	r0, [pc, #72]	; (403050 <board_init+0x2cc>)
  403008:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40300c:	4622      	mov	r2, r4
  40300e:	4623      	mov	r3, r4
  403010:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD10);
  403012:	480f      	ldr	r0, [pc, #60]	; (403050 <board_init+0x2cc>)
  403014:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403018:	47d0      	blx	sl
	delay_ms(10);
  40301a:	4832      	ldr	r0, [pc, #200]	; (4030e4 <board_init+0x360>)
  40301c:	4b32      	ldr	r3, [pc, #200]	; (4030e8 <board_init+0x364>)
  40301e:	4798      	blx	r3
	//pio_clear(PIOD,PIO_PD10);
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  403020:	4d32      	ldr	r5, [pc, #200]	; (4030ec <board_init+0x368>)
  403022:	480b      	ldr	r0, [pc, #44]	; (403050 <board_init+0x2cc>)
  403024:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403028:	e06e      	b.n	403108 <board_init+0x384>
  40302a:	bf00      	nop
  40302c:	400e1810 	.word	0x400e1810
  403030:	00400a65 	.word	0x00400a65
  403034:	00402741 	.word	0x00402741
  403038:	400e1e00 	.word	0x400e1e00
  40303c:	00402d05 	.word	0x00402d05
  403040:	00402d45 	.word	0x00402d45
  403044:	00402d35 	.word	0x00402d35
  403048:	00402d3d 	.word	0x00402d3d
  40304c:	00402d59 	.word	0x00402d59
  403050:	400e1400 	.word	0x400e1400
  403054:	00040008 	.word	0x00040008
  403058:	004027c5 	.word	0x004027c5
  40305c:	0040f0f4 	.word	0x0040f0f4
  403060:	0040019d 	.word	0x0040019d
  403064:	0040f158 	.word	0x0040f158
  403068:	400e1000 	.word	0x400e1000
  40306c:	400e0e00 	.word	0x400e0e00
  403070:	00402891 	.word	0x00402891
  403074:	0040f178 	.word	0x0040f178
  403078:	0040f198 	.word	0x0040f198
  40307c:	400e1850 	.word	0x400e1850
  403080:	00400a91 	.word	0x00400a91
  403084:	0040f1bc 	.word	0x0040f1bc
  403088:	0040f1e0 	.word	0x0040f1e0
  40308c:	20400010 	.word	0x20400010
  403090:	0040f208 	.word	0x0040f208
  403094:	0040f230 	.word	0x0040f230
  403098:	400e1200 	.word	0x400e1200
  40309c:	fffc80ff 	.word	0xfffc80ff
  4030a0:	001c0001 	.word	0x001c0001
  4030a4:	2083e000 	.word	0x2083e000
  4030a8:	400e1600 	.word	0x400e1600
  4030ac:	40088000 	.word	0x40088000
  4030b0:	11e1a300 	.word	0x11e1a300
  4030b4:	00400929 	.word	0x00400929
  4030b8:	0040f250 	.word	0x0040f250
  4030bc:	00409595 	.word	0x00409595
  4030c0:	0040f26c 	.word	0x0040f26c
  4030c4:	0040f290 	.word	0x0040f290
  4030c8:	004027c1 	.word	0x004027c1
  4030cc:	00402b79 	.word	0x00402b79
  4030d0:	0040f2b0 	.word	0x0040f2b0
  4030d4:	0040f2d4 	.word	0x0040f2d4
  4030d8:	00403ab5 	.word	0x00403ab5
  4030dc:	0040f2fc 	.word	0x0040f2fc
  4030e0:	0040f324 	.word	0x0040f324
  4030e4:	0007b784 	.word	0x0007b784
  4030e8:	20400001 	.word	0x20400001
  4030ec:	1b601800 	.word	0x1b601800
  4030f0:	0040f0dc 	.word	0x0040f0dc
  4030f4:	004029f5 	.word	0x004029f5
  4030f8:	fffc00ff 	.word	0xfffc00ff
  4030fc:	004028b9 	.word	0x004028b9
  403100:	004027b1 	.word	0x004027b1
  403104:	004027bd 	.word	0x004027bd
  403108:	462a      	mov	r2, r5
  40310a:	47b0      	blx	r6
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	
	pio_pull_up(PIOD,
  40310c:	48aa      	ldr	r0, [pc, #680]	; (4033b8 <board_init+0x634>)
  40310e:	4629      	mov	r1, r5
  403110:	4622      	mov	r2, r4
  403112:	47c8      	blx	r9
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_pull_down(PIOD,
  403114:	48a8      	ldr	r0, [pc, #672]	; (4033b8 <board_init+0x634>)
  403116:	4629      	mov	r1, r5
  403118:	2201      	movs	r2, #1
  40311a:	47d8      	blx	fp
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,1);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  40311c:	48a7      	ldr	r0, [pc, #668]	; (4033bc <board_init+0x638>)
  40311e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403122:	2208      	movs	r2, #8
  403124:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  403126:	48a5      	ldr	r0, [pc, #660]	; (4033bc <board_init+0x638>)
  403128:	2108      	movs	r1, #8
  40312a:	4622      	mov	r2, r4
  40312c:	47c8      	blx	r9
	pio_pull_down(PIOB,1<<3,1);
  40312e:	48a3      	ldr	r0, [pc, #652]	; (4033bc <board_init+0x638>)
  403130:	2108      	movs	r1, #8
  403132:	2201      	movs	r2, #1
  403134:	47d8      	blx	fp
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  403136:	48a2      	ldr	r0, [pc, #648]	; (4033c0 <board_init+0x63c>)
  403138:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40313c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  403140:	47b0      	blx	r6
	1<<27	|
	1<<24	);
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_B,
  403142:	489f      	ldr	r0, [pc, #636]	; (4033c0 <board_init+0x63c>)
  403144:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403148:	f44f 7208 	mov.w	r2, #544	; 0x220
  40314c:	47b0      	blx	r6
		1<<9	|
		1<<5	);
	
	pio_pull_up(PIOA,
  40314e:	4d9d      	ldr	r5, [pc, #628]	; (4033c4 <board_init+0x640>)
  403150:	489b      	ldr	r0, [pc, #620]	; (4033c0 <board_init+0x63c>)
  403152:	4629      	mov	r1, r5
  403154:	4622      	mov	r2, r4
  403156:	47c8      	blx	r9
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pio_pull_down(PIOA,
  403158:	4899      	ldr	r0, [pc, #612]	; (4033c0 <board_init+0x63c>)
  40315a:	4629      	mov	r1, r5
  40315c:	2201      	movs	r2, #1
  40315e:	47d8      	blx	fp
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,1);
	
	pmc_enable_periph_clk(ID_ISI);
  403160:	203b      	movs	r0, #59	; 0x3b
  403162:	47c0      	blx	r8
	
	//set camera to 640x480
	//SetupCameraYUVVGA();
	SetupCameraYUVVGA_OV7670();
  403164:	4b98      	ldr	r3, [pc, #608]	; (4033c8 <board_init+0x644>)
  403166:	4798      	blx	r3
 */
static inline void isi_reset(Isi *p_isi)
{
	/* Resets the image sensor interface.
	   Finish capturing the current frame and then shut down the module. */
	p_isi->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  403168:	2206      	movs	r2, #6
  40316a:	4b98      	ldr	r3, [pc, #608]	; (4033cc <board_init+0x648>)
  40316c:	625a      	str	r2, [r3, #36]	; 0x24
	/* wait Software reset has completed successfully. */
	while((p_isi->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST);
  40316e:	461a      	mov	r2, r3
  403170:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403172:	f013 0f04 	tst.w	r3, #4
  403176:	d0fb      	beq.n	403170 <board_init+0x3ec>
	//Optional Test Mode
	//write_SCCB(0x8D,1<<4);
	isi_reset(ISI);
	
	struct isi_config_t isiConf;
	isiConf.hpol = 1;
  403178:	2601      	movs	r6, #1
  40317a:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
	isiConf.vpol = 1;
  40317e:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
	isiConf.pck_plo = 0;
  403182:	2500      	movs	r5, #0
  403184:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
	isiConf.emb_sync = 0;
  403188:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	isiConf.crc_sync = 0;
  40318c:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	isiConf.sld = 1;
  403190:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
	isiConf.sfd =0;
  403194:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
	isiConf.image_fmt = ISI_INPUT_YUV;
  403198:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	isiConf.image_hsize = 640;
  40319c:	f44f 7820 	mov.w	r8, #640	; 0x280
  4031a0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	isiConf.image_vsize = 480;
  4031a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4031a8:	9317      	str	r3, [sp, #92]	; 0x5c
	isiConf.thmask = 2;
  4031aa:	2302      	movs	r3, #2
  4031ac:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
	

	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  4031b0:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4031b4:	4620      	mov	r0, r4
  4031b6:	4629      	mov	r1, r5
  4031b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4031bc:	4b84      	ldr	r3, [pc, #528]	; (4033d0 <board_init+0x64c>)
  4031be:	4798      	blx	r3
	struct isi_frame_buffer_descriptors* isiFBD0 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  4031c0:	200c      	movs	r0, #12
  4031c2:	f8df 9290 	ldr.w	r9, [pc, #656]	; 403454 <board_init+0x6d0>
  4031c6:	47c8      	blx	r9
  4031c8:	4607      	mov	r7, r0
	struct isi_frame_buffer_descriptors* isiFBD1 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  4031ca:	200c      	movs	r0, #12
  4031cc:	47c8      	blx	r9
	
	isiFBD0->next = isiFBD1;
  4031ce:	60b8      	str	r0, [r7, #8]
	isiFBD0->current =CAM_FRAME0_ADDR;
  4031d0:	603c      	str	r4, [r7, #0]
	isiFBD0->control =0x1;
  4031d2:	607e      	str	r6, [r7, #4]
	
	isiFBD1->next = isiFBD0;
  4031d4:	6087      	str	r7, [r0, #8]
	isiFBD1->current =CAM_FRAME0_ADDR;
  4031d6:	6004      	str	r4, [r0, #0]
	isiFBD1->control =0x1;
  4031d8:	6046      	str	r6, [r0, #4]
	
	isi_init(ISI,&isiConf);
  4031da:	4c7c      	ldr	r4, [pc, #496]	; (4033cc <board_init+0x648>)
  4031dc:	4620      	mov	r0, r4
  4031de:	a913      	add	r1, sp, #76	; 0x4c
  4031e0:	4b7c      	ldr	r3, [pc, #496]	; (4033d4 <board_init+0x650>)
  4031e2:	4798      	blx	r3
	//isi_set_dma_codec_path(ISI,0,1,0,0,0);
	//ISI->ISI_PDECF = 2*16;
	isi_set_dma_preview_path(ISI,0,isiFBD0,0x01,isiFBD0->current);
  4031e4:	683b      	ldr	r3, [r7, #0]
  4031e6:	9300      	str	r3, [sp, #0]
  4031e8:	4620      	mov	r0, r4
  4031ea:	4629      	mov	r1, r5
  4031ec:	463a      	mov	r2, r7
  4031ee:	4633      	mov	r3, r6
  4031f0:	4d79      	ldr	r5, [pc, #484]	; (4033d8 <board_init+0x654>)
  4031f2:	47a8      	blx	r5
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  4031f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4031f6:	4333      	orrs	r3, r6
  4031f8:	63a3      	str	r3, [r4, #56]	; 0x38
	isi_dma_channel_enable(ISI,1);
	
	isi_size_configure(ISI,640,640,320,320);
  4031fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4031fe:	9300      	str	r3, [sp, #0]
  403200:	4620      	mov	r0, r4
  403202:	4641      	mov	r1, r8
  403204:	4642      	mov	r2, r8
  403206:	4d75      	ldr	r5, [pc, #468]	; (4033dc <board_init+0x658>)
  403208:	47a8      	blx	r5
	ISI->ISI_CFG2 = ISI->ISI_CFG2 | ISI_CFG2_YCC_SWAP_MODE1;
  40320a:	6863      	ldr	r3, [r4, #4]
  40320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  403210:	6063      	str	r3, [r4, #4]
 *
 * \param p_isi  Pointer to a ISI instance.
 */
static inline void isi_enable(Isi *p_isi)
{
	p_isi->ISI_CR |= ISI_CR_ISI_EN;
  403212:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403214:	4333      	orrs	r3, r6
  403216:	6263      	str	r3, [r4, #36]	; 0x24
	while((p_isi->ISI_SR & ISI_CR_ISI_EN) != ISI_CR_ISI_EN);
  403218:	4622      	mov	r2, r4
  40321a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40321c:	f013 0f01 	tst.w	r3, #1
  403220:	d0fb      	beq.n	40321a <board_init+0x496>
	//ISI->ISI_PDECF = 32;
	isi_enable(ISI);
	sendDebugString("CAMERA INITIALIZATION - FINISHED\n");
  403222:	486f      	ldr	r0, [pc, #444]	; (4033e0 <board_init+0x65c>)
  403224:	4c6f      	ldr	r4, [pc, #444]	; (4033e4 <board_init+0x660>)
  403226:	47a0      	blx	r4
	   ######################################
			 	Setup Wireless Module
	   ######################################
	   ###################################### */
	
		sendDebugString("QSPI INITIALIZATION - STARTED\n");
  403228:	486f      	ldr	r0, [pc, #444]	; (4033e8 <board_init+0x664>)
  40322a:	47a0      	blx	r4
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  40322c:	2300      	movs	r3, #0
  40322e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	    qspiConf.loopback_en = 0;
  403232:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	    qspiConf.wait_data_for_transfer = 0;
  403236:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	    qspiConf.csmode = 0;
  40323a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  40323e:	930a      	str	r3, [sp, #40]	; 0x28
	    qspiConf.baudrate = 16000000;
  403240:	4a6a      	ldr	r2, [pc, #424]	; (4033ec <board_init+0x668>)
  403242:	920f      	str	r2, [sp, #60]	; 0x3c
		qspiConf.min_delay_qcs = 4;
  403244:	2204      	movs	r2, #4
  403246:	920b      	str	r2, [sp, #44]	; 0x2c
		qspiConf.delay_between_ct = 10;
  403248:	220a      	movs	r2, #10
  40324a:	920c      	str	r2, [sp, #48]	; 0x30
		qspiConf.clock_polarity = 0;
  40324c:	930d      	str	r3, [sp, #52]	; 0x34
		qspiConf.clock_phase = 0;
  40324e:	930e      	str	r3, [sp, #56]	; 0x38
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  403250:	4d5b      	ldr	r5, [pc, #364]	; (4033c0 <board_init+0x63c>)
  403252:	4628      	mov	r0, r5
  403254:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403258:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  40325c:	4c64      	ldr	r4, [pc, #400]	; (4033f0 <board_init+0x66c>)
  40325e:	47a0      	blx	r4
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  403260:	4628      	mov	r0, r5
  403262:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  403266:	2201      	movs	r2, #1
  403268:	4b62      	ldr	r3, [pc, #392]	; (4033f4 <board_init+0x670>)
  40326a:	4798      	blx	r3
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11,1);
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  40326c:	4852      	ldr	r0, [pc, #328]	; (4033b8 <board_init+0x634>)
  40326e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403276:	47a0      	blx	r4
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  403278:	202b      	movs	r0, #43	; 0x2b
  40327a:	4b5f      	ldr	r3, [pc, #380]	; (4033f8 <board_init+0x674>)
  40327c:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  40327e:	2202      	movs	r2, #2
  403280:	4b5e      	ldr	r3, [pc, #376]	; (4033fc <board_init+0x678>)
  403282:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  403284:	461a      	mov	r2, r3
  403286:	6913      	ldr	r3, [r2, #16]
  403288:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40328c:	d1fb      	bne.n	403286 <board_init+0x502>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  40328e:	4c5b      	ldr	r4, [pc, #364]	; (4033fc <board_init+0x678>)
  403290:	2380      	movs	r3, #128	; 0x80
  403292:	6023      	str	r3, [r4, #0]

		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  403294:	4620      	mov	r0, r4
  403296:	a909      	add	r1, sp, #36	; 0x24
  403298:	4b59      	ldr	r3, [pc, #356]	; (403400 <board_init+0x67c>)
  40329a:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  40329c:	2301      	movs	r3, #1
  40329e:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032a0:	4622      	mov	r2, r4
  4032a2:	6913      	ldr	r3, [r2, #16]
  4032a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032a8:	d0fb      	beq.n	4032a2 <board_init+0x51e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032aa:	2202      	movs	r2, #2
  4032ac:	4b53      	ldr	r3, [pc, #332]	; (4033fc <board_init+0x678>)
  4032ae:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032b0:	461a      	mov	r2, r3
  4032b2:	6913      	ldr	r3, [r2, #16]
  4032b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032b8:	d1fb      	bne.n	4032b2 <board_init+0x52e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032ba:	4c50      	ldr	r4, [pc, #320]	; (4033fc <board_init+0x678>)
  4032bc:	2380      	movs	r3, #128	; 0x80
  4032be:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032c0:	4620      	mov	r0, r4
  4032c2:	a909      	add	r1, sp, #36	; 0x24
  4032c4:	4b4e      	ldr	r3, [pc, #312]	; (403400 <board_init+0x67c>)
  4032c6:	4798      	blx	r3
		delay_ms(100);
  4032c8:	484e      	ldr	r0, [pc, #312]	; (403404 <board_init+0x680>)
  4032ca:	4b4f      	ldr	r3, [pc, #316]	; (403408 <board_init+0x684>)
  4032cc:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4032ce:	2301      	movs	r3, #1
  4032d0:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032d2:	4622      	mov	r2, r4
  4032d4:	6913      	ldr	r3, [r2, #16]
  4032d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032da:	d0fb      	beq.n	4032d4 <board_init+0x550>
		qspi_enable(QSPI);
		delay_ms(100);
  4032dc:	4849      	ldr	r0, [pc, #292]	; (403404 <board_init+0x680>)
  4032de:	4b4a      	ldr	r3, [pc, #296]	; (403408 <board_init+0x684>)
  4032e0:	4798      	blx	r3
		//DW1000_initialise();
		sendDebugString("QSPI INITIALIZATION - FINISHED\n");
  4032e2:	484a      	ldr	r0, [pc, #296]	; (40340c <board_init+0x688>)
  4032e4:	4c3f      	ldr	r4, [pc, #252]	; (4033e4 <board_init+0x660>)
  4032e6:	47a0      	blx	r4
		
		//Initalize the dwm1000 module 
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  4032e8:	4849      	ldr	r0, [pc, #292]	; (403410 <board_init+0x68c>)
  4032ea:	47a0      	blx	r4
		//DW1000_initialise2();
		//DW1000_toggleGPIO_MODE();
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  4032ec:	4849      	ldr	r0, [pc, #292]	; (403414 <board_init+0x690>)
  4032ee:	47a0      	blx	r4
	/* ######################################
	   ######################################
			 		Setup ADC
	   ######################################
	   ###################################### */
		sendDebugString("ADC INITIALIZATION - STARTED\n");
  4032f0:	4849      	ldr	r0, [pc, #292]	; (403418 <board_init+0x694>)
  4032f2:	47a0      	blx	r4
		struct afec_config confDefaults;
		pmc_enable_periph_clk(AFEC0);
  4032f4:	4d49      	ldr	r5, [pc, #292]	; (40341c <board_init+0x698>)
  4032f6:	4628      	mov	r0, r5
  4032f8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4033f8 <board_init+0x674>
  4032fc:	47c8      	blx	r9
		
		afec_enable(AFEC0);
  4032fe:	4628      	mov	r0, r5
  403300:	f8df 8154 	ldr.w	r8, [pc, #340]	; 403458 <board_init+0x6d4>
  403304:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403306:	a803      	add	r0, sp, #12
  403308:	4f45      	ldr	r7, [pc, #276]	; (403420 <board_init+0x69c>)
  40330a:	47b8      	blx	r7
		afec_init(AFEC0,&confDefaults);
  40330c:	4628      	mov	r0, r5
  40330e:	a903      	add	r1, sp, #12
  403310:	4e44      	ldr	r6, [pc, #272]	; (403424 <board_init+0x6a0>)
  403312:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  403314:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403316:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  40331a:	606b      	str	r3, [r5, #4]
		afec_set_trigger(AFEC0,AFEC_TRIG_SW);
		
		pmc_enable_periph_clk(AFEC1);
  40331c:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  403320:	4628      	mov	r0, r5
  403322:	47c8      	blx	r9
		
		afec_enable(AFEC1);
  403324:	4628      	mov	r0, r5
  403326:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403328:	a803      	add	r0, sp, #12
  40332a:	47b8      	blx	r7
		afec_init(AFEC1,&confDefaults);
  40332c:	4628      	mov	r0, r5
  40332e:	a903      	add	r1, sp, #12
  403330:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  403332:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403334:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403338:	606b      	str	r3, [r5, #4]
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40333a:	2701      	movs	r7, #1
  40333c:	616f      	str	r7, [r5, #20]
		afec_set_trigger(AFEC1,AFEC_TRIG_SW);
		
		afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
		
		pio_pull_up(PIOB,1<<1,0);
  40333e:	f505 25fa 	add.w	r5, r5, #512000	; 0x7d000
  403342:	4628      	mov	r0, r5
  403344:	2102      	movs	r1, #2
  403346:	2200      	movs	r2, #0
  403348:	4b2a      	ldr	r3, [pc, #168]	; (4033f4 <board_init+0x670>)
  40334a:	4798      	blx	r3
		pio_pull_down(PIOB,1<<1,0);
  40334c:	4628      	mov	r0, r5
  40334e:	2102      	movs	r1, #2
  403350:	2200      	movs	r2, #0
  403352:	4b35      	ldr	r3, [pc, #212]	; (403428 <board_init+0x6a4>)
  403354:	4798      	blx	r3
		sendDebugString("ADC INITIALIZATION - FINISHED\n");
  403356:	4835      	ldr	r0, [pc, #212]	; (40342c <board_init+0x6a8>)
  403358:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup SWITCHES
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  40335a:	4835      	ldr	r0, [pc, #212]	; (403430 <board_init+0x6ac>)
  40335c:	47a0      	blx	r4
		pio_set_input(PIOC,1<<12,PIO_PULLUP | PIO_DEBOUNCE);
  40335e:	4e35      	ldr	r6, [pc, #212]	; (403434 <board_init+0x6b0>)
  403360:	4630      	mov	r0, r6
  403362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403366:	2209      	movs	r2, #9
  403368:	4d33      	ldr	r5, [pc, #204]	; (403438 <board_init+0x6b4>)
  40336a:	47a8      	blx	r5
		pio_set_input(PIOC,1<<11,PIO_PULLUP | PIO_DEBOUNCE);
  40336c:	4630      	mov	r0, r6
  40336e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403372:	2209      	movs	r2, #9
  403374:	47a8      	blx	r5
		pio_set_input(PIOC,1<<10,PIO_PULLUP | PIO_DEBOUNCE);
  403376:	4630      	mov	r0, r6
  403378:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40337c:	2209      	movs	r2, #9
  40337e:	47a8      	blx	r5
		pio_set_input(PIOC,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  403380:	4630      	mov	r0, r6
  403382:	f44f 7100 	mov.w	r1, #512	; 0x200
  403386:	2209      	movs	r2, #9
  403388:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  40338a:	482c      	ldr	r0, [pc, #176]	; (40343c <board_init+0x6b8>)
  40338c:	47a0      	blx	r4
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIFERAL IRQ INITIALIZATION - STARTED\n");
  40338e:	482c      	ldr	r0, [pc, #176]	; (403440 <board_init+0x6bc>)
  403390:	47a0      	blx	r4
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART4,UART_IER_RXRDY);
  403392:	482c      	ldr	r0, [pc, #176]	; (403444 <board_init+0x6c0>)
  403394:	4639      	mov	r1, r7
  403396:	4b2c      	ldr	r3, [pc, #176]	; (403448 <board_init+0x6c4>)
  403398:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40339a:	4b2c      	ldr	r3, [pc, #176]	; (40344c <board_init+0x6c8>)
  40339c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4033a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4033a4:	21c0      	movs	r1, #192	; 0xc0
  4033a6:	f883 132e 	strb.w	r1, [r3, #814]	; 0x32e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4033aa:	605a      	str	r2, [r3, #4]
		NVIC_ClearPendingIRQ(UART4_IRQn);
		NVIC_SetPriority(UART4_IRQn,6);
		NVIC_EnableIRQ(UART4_IRQn);
		sendDebugString("PERIFERAL IRQ INITIALIZATION - FINISHED\n");
  4033ac:	4828      	ldr	r0, [pc, #160]	; (403450 <board_init+0x6cc>)
  4033ae:	47a0      	blx	r4
}
  4033b0:	b01f      	add	sp, #124	; 0x7c
  4033b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033b6:	bf00      	nop
  4033b8:	400e1400 	.word	0x400e1400
  4033bc:	400e1000 	.word	0x400e1000
  4033c0:	400e0e00 	.word	0x400e0e00
  4033c4:	09000220 	.word	0x09000220
  4033c8:	00403d79 	.word	0x00403d79
  4033cc:	4004c000 	.word	0x4004c000
  4033d0:	00409595 	.word	0x00409595
  4033d4:	004003e1 	.word	0x004003e1
  4033d8:	0040053d 	.word	0x0040053d
  4033dc:	00400491 	.word	0x00400491
  4033e0:	0040f348 	.word	0x0040f348
  4033e4:	0040019d 	.word	0x0040019d
  4033e8:	0040f36c 	.word	0x0040f36c
  4033ec:	00f42400 	.word	0x00f42400
  4033f0:	004027c5 	.word	0x004027c5
  4033f4:	004027b1 	.word	0x004027b1
  4033f8:	004029f5 	.word	0x004029f5
  4033fc:	4007c000 	.word	0x4007c000
  403400:	00400615 	.word	0x00400615
  403404:	004d2b25 	.word	0x004d2b25
  403408:	20400001 	.word	0x20400001
  40340c:	0040f38c 	.word	0x0040f38c
  403410:	0040f3ac 	.word	0x0040f3ac
  403414:	0040f3d0 	.word	0x0040f3d0
  403418:	0040f3f4 	.word	0x0040f3f4
  40341c:	4003c000 	.word	0x4003c000
  403420:	00400265 	.word	0x00400265
  403424:	00400295 	.word	0x00400295
  403428:	004028b9 	.word	0x004028b9
  40342c:	0040f414 	.word	0x0040f414
  403430:	0040f434 	.word	0x0040f434
  403434:	400e1200 	.word	0x400e1200
  403438:	00402859 	.word	0x00402859
  40343c:	0040f458 	.word	0x0040f458
  403440:	0040f47c 	.word	0x0040f47c
  403444:	400e1e00 	.word	0x400e1e00
  403448:	00402d4d 	.word	0x00402d4d
  40344c:	e000e100 	.word	0xe000e100
  403450:	0040f4a4 	.word	0x0040f4a4
  403454:	00408ef9 	.word	0x00408ef9
  403458:	0040038d 	.word	0x0040038d

0040345c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  40345c:	e7fe      	b.n	40345c <Dummy_Handler>
  40345e:	bf00      	nop

00403460 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403460:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  403462:	4b19      	ldr	r3, [pc, #100]	; (4034c8 <Reset_Handler+0x68>)
  403464:	4a19      	ldr	r2, [pc, #100]	; (4034cc <Reset_Handler+0x6c>)
  403466:	429a      	cmp	r2, r3
  403468:	d003      	beq.n	403472 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  40346a:	4b19      	ldr	r3, [pc, #100]	; (4034d0 <Reset_Handler+0x70>)
  40346c:	4a16      	ldr	r2, [pc, #88]	; (4034c8 <Reset_Handler+0x68>)
  40346e:	429a      	cmp	r2, r3
  403470:	d304      	bcc.n	40347c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403472:	4b18      	ldr	r3, [pc, #96]	; (4034d4 <Reset_Handler+0x74>)
  403474:	4a18      	ldr	r2, [pc, #96]	; (4034d8 <Reset_Handler+0x78>)
  403476:	429a      	cmp	r2, r3
  403478:	d310      	bcc.n	40349c <Reset_Handler+0x3c>
  40347a:	e01b      	b.n	4034b4 <Reset_Handler+0x54>
  40347c:	4912      	ldr	r1, [pc, #72]	; (4034c8 <Reset_Handler+0x68>)
  40347e:	1d0a      	adds	r2, r1, #4
  403480:	4b16      	ldr	r3, [pc, #88]	; (4034dc <Reset_Handler+0x7c>)
  403482:	1a9b      	subs	r3, r3, r2
  403484:	f023 0303 	bic.w	r3, r3, #3
  403488:	3304      	adds	r3, #4
  40348a:	4a10      	ldr	r2, [pc, #64]	; (4034cc <Reset_Handler+0x6c>)
  40348c:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40348e:	f852 0b04 	ldr.w	r0, [r2], #4
  403492:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  403496:	429a      	cmp	r2, r3
  403498:	d1f9      	bne.n	40348e <Reset_Handler+0x2e>
  40349a:	e7ea      	b.n	403472 <Reset_Handler+0x12>
  40349c:	4b10      	ldr	r3, [pc, #64]	; (4034e0 <Reset_Handler+0x80>)
  40349e:	4a11      	ldr	r2, [pc, #68]	; (4034e4 <Reset_Handler+0x84>)
  4034a0:	1ad2      	subs	r2, r2, r3
  4034a2:	f022 0203 	bic.w	r2, r2, #3
  4034a6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034a8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4034aa:	2100      	movs	r1, #0
  4034ac:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034b0:	4293      	cmp	r3, r2
  4034b2:	d1fb      	bne.n	4034ac <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4034b4:	4a0c      	ldr	r2, [pc, #48]	; (4034e8 <Reset_Handler+0x88>)
  4034b6:	4b0d      	ldr	r3, [pc, #52]	; (4034ec <Reset_Handler+0x8c>)
  4034b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4034bc:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4034be:	4b0c      	ldr	r3, [pc, #48]	; (4034f0 <Reset_Handler+0x90>)
  4034c0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4034c2:	4b0c      	ldr	r3, [pc, #48]	; (4034f4 <Reset_Handler+0x94>)
  4034c4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4034c6:	e7fe      	b.n	4034c6 <Reset_Handler+0x66>
  4034c8:	20400000 	.word	0x20400000
  4034cc:	0040ff54 	.word	0x0040ff54
  4034d0:	204008c0 	.word	0x204008c0
  4034d4:	2040c604 	.word	0x2040c604
  4034d8:	204008c0 	.word	0x204008c0
  4034dc:	204008c3 	.word	0x204008c3
  4034e0:	204008c4 	.word	0x204008c4
  4034e4:	2040c607 	.word	0x2040c607
  4034e8:	e000ed00 	.word	0xe000ed00
  4034ec:	00400000 	.word	0x00400000
  4034f0:	00408e81 	.word	0x00408e81
  4034f4:	00405d8d 	.word	0x00405d8d

004034f8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4034f8:	4b3d      	ldr	r3, [pc, #244]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  4034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4034fc:	f003 0303 	and.w	r3, r3, #3
  403500:	2b01      	cmp	r3, #1
  403502:	d012      	beq.n	40352a <SystemCoreClockUpdate+0x32>
  403504:	b113      	cbz	r3, 40350c <SystemCoreClockUpdate+0x14>
  403506:	2b02      	cmp	r3, #2
  403508:	d02c      	beq.n	403564 <SystemCoreClockUpdate+0x6c>
  40350a:	e05a      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40350c:	4b39      	ldr	r3, [pc, #228]	; (4035f4 <SystemCoreClockUpdate+0xfc>)
  40350e:	695b      	ldr	r3, [r3, #20]
  403510:	f013 0f80 	tst.w	r3, #128	; 0x80
  403514:	d004      	beq.n	403520 <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40351a:	4b37      	ldr	r3, [pc, #220]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  40351c:	601a      	str	r2, [r3, #0]
  40351e:	e050      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403520:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  403524:	4b34      	ldr	r3, [pc, #208]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403526:	601a      	str	r2, [r3, #0]
  403528:	e04b      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40352a:	4b31      	ldr	r3, [pc, #196]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  40352c:	6a1b      	ldr	r3, [r3, #32]
  40352e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403532:	d003      	beq.n	40353c <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403534:	4a31      	ldr	r2, [pc, #196]	; (4035fc <SystemCoreClockUpdate+0x104>)
  403536:	4b30      	ldr	r3, [pc, #192]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403538:	601a      	str	r2, [r3, #0]
  40353a:	e042      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40353c:	4a30      	ldr	r2, [pc, #192]	; (403600 <SystemCoreClockUpdate+0x108>)
  40353e:	4b2e      	ldr	r3, [pc, #184]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403540:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403542:	4b2b      	ldr	r3, [pc, #172]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  403544:	6a1b      	ldr	r3, [r3, #32]
  403546:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40354a:	2b10      	cmp	r3, #16
  40354c:	d002      	beq.n	403554 <SystemCoreClockUpdate+0x5c>
  40354e:	2b20      	cmp	r3, #32
  403550:	d004      	beq.n	40355c <SystemCoreClockUpdate+0x64>
  403552:	e036      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403554:	4a2b      	ldr	r2, [pc, #172]	; (403604 <SystemCoreClockUpdate+0x10c>)
  403556:	4b28      	ldr	r3, [pc, #160]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403558:	601a      	str	r2, [r3, #0]
          break;
  40355a:	e032      	b.n	4035c2 <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40355c:	4a27      	ldr	r2, [pc, #156]	; (4035fc <SystemCoreClockUpdate+0x104>)
  40355e:	4b26      	ldr	r3, [pc, #152]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403560:	601a      	str	r2, [r3, #0]
          break;
  403562:	e02e      	b.n	4035c2 <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403564:	4b22      	ldr	r3, [pc, #136]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  403566:	6a1b      	ldr	r3, [r3, #32]
  403568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40356c:	d003      	beq.n	403576 <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40356e:	4a23      	ldr	r2, [pc, #140]	; (4035fc <SystemCoreClockUpdate+0x104>)
  403570:	4b21      	ldr	r3, [pc, #132]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403572:	601a      	str	r2, [r3, #0]
  403574:	e012      	b.n	40359c <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403576:	4a22      	ldr	r2, [pc, #136]	; (403600 <SystemCoreClockUpdate+0x108>)
  403578:	4b1f      	ldr	r3, [pc, #124]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  40357a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40357c:	4b1c      	ldr	r3, [pc, #112]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  40357e:	6a1b      	ldr	r3, [r3, #32]
  403580:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403584:	2b10      	cmp	r3, #16
  403586:	d002      	beq.n	40358e <SystemCoreClockUpdate+0x96>
  403588:	2b20      	cmp	r3, #32
  40358a:	d004      	beq.n	403596 <SystemCoreClockUpdate+0x9e>
  40358c:	e006      	b.n	40359c <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40358e:	4a1d      	ldr	r2, [pc, #116]	; (403604 <SystemCoreClockUpdate+0x10c>)
  403590:	4b19      	ldr	r3, [pc, #100]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  403592:	601a      	str	r2, [r3, #0]
          break;
  403594:	e002      	b.n	40359c <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403596:	4a19      	ldr	r2, [pc, #100]	; (4035fc <SystemCoreClockUpdate+0x104>)
  403598:	4b17      	ldr	r3, [pc, #92]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  40359a:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40359c:	4b14      	ldr	r3, [pc, #80]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  40359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035a0:	f003 0303 	and.w	r3, r3, #3
  4035a4:	2b02      	cmp	r3, #2
  4035a6:	d10c      	bne.n	4035c2 <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4035a8:	4a11      	ldr	r2, [pc, #68]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  4035aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4035ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4035ae:	4812      	ldr	r0, [pc, #72]	; (4035f8 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4035b0:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4035b4:	6803      	ldr	r3, [r0, #0]
  4035b6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4035ba:	b2d2      	uxtb	r2, r2
  4035bc:	fbb3 f3f2 	udiv	r3, r3, r2
  4035c0:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4035c2:	4b0b      	ldr	r3, [pc, #44]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  4035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035ca:	2b70      	cmp	r3, #112	; 0x70
  4035cc:	d107      	bne.n	4035de <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  4035ce:	4a0a      	ldr	r2, [pc, #40]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  4035d0:	6813      	ldr	r3, [r2, #0]
  4035d2:	490d      	ldr	r1, [pc, #52]	; (403608 <SystemCoreClockUpdate+0x110>)
  4035d4:	fba1 1303 	umull	r1, r3, r1, r3
  4035d8:	085b      	lsrs	r3, r3, #1
  4035da:	6013      	str	r3, [r2, #0]
  4035dc:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4035de:	4b04      	ldr	r3, [pc, #16]	; (4035f0 <SystemCoreClockUpdate+0xf8>)
  4035e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4035e2:	4905      	ldr	r1, [pc, #20]	; (4035f8 <SystemCoreClockUpdate+0x100>)
  4035e4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4035e8:	680b      	ldr	r3, [r1, #0]
  4035ea:	40d3      	lsrs	r3, r2
  4035ec:	600b      	str	r3, [r1, #0]
  4035ee:	4770      	bx	lr
  4035f0:	400e0600 	.word	0x400e0600
  4035f4:	400e1810 	.word	0x400e1810
  4035f8:	20400014 	.word	0x20400014
  4035fc:	00b71b00 	.word	0x00b71b00
  403600:	003d0900 	.word	0x003d0900
  403604:	007a1200 	.word	0x007a1200
  403608:	aaaaaaab 	.word	0xaaaaaaab

0040360c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40360c:	4b14      	ldr	r3, [pc, #80]	; (403660 <system_init_flash+0x54>)
  40360e:	4298      	cmp	r0, r3
  403610:	d804      	bhi.n	40361c <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403612:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403616:	4b13      	ldr	r3, [pc, #76]	; (403664 <system_init_flash+0x58>)
  403618:	601a      	str	r2, [r3, #0]
  40361a:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40361c:	4b12      	ldr	r3, [pc, #72]	; (403668 <system_init_flash+0x5c>)
  40361e:	4298      	cmp	r0, r3
  403620:	d803      	bhi.n	40362a <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403622:	4a12      	ldr	r2, [pc, #72]	; (40366c <system_init_flash+0x60>)
  403624:	4b0f      	ldr	r3, [pc, #60]	; (403664 <system_init_flash+0x58>)
  403626:	601a      	str	r2, [r3, #0]
  403628:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40362a:	4b11      	ldr	r3, [pc, #68]	; (403670 <system_init_flash+0x64>)
  40362c:	4298      	cmp	r0, r3
  40362e:	d803      	bhi.n	403638 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403630:	4a10      	ldr	r2, [pc, #64]	; (403674 <system_init_flash+0x68>)
  403632:	4b0c      	ldr	r3, [pc, #48]	; (403664 <system_init_flash+0x58>)
  403634:	601a      	str	r2, [r3, #0]
  403636:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403638:	4b0f      	ldr	r3, [pc, #60]	; (403678 <system_init_flash+0x6c>)
  40363a:	4298      	cmp	r0, r3
  40363c:	d803      	bhi.n	403646 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40363e:	4a0f      	ldr	r2, [pc, #60]	; (40367c <system_init_flash+0x70>)
  403640:	4b08      	ldr	r3, [pc, #32]	; (403664 <system_init_flash+0x58>)
  403642:	601a      	str	r2, [r3, #0]
  403644:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403646:	4b0e      	ldr	r3, [pc, #56]	; (403680 <system_init_flash+0x74>)
  403648:	4298      	cmp	r0, r3
  40364a:	d804      	bhi.n	403656 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40364c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403650:	4b04      	ldr	r3, [pc, #16]	; (403664 <system_init_flash+0x58>)
  403652:	601a      	str	r2, [r3, #0]
  403654:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403656:	4a0b      	ldr	r2, [pc, #44]	; (403684 <system_init_flash+0x78>)
  403658:	4b02      	ldr	r3, [pc, #8]	; (403664 <system_init_flash+0x58>)
  40365a:	601a      	str	r2, [r3, #0]
  40365c:	4770      	bx	lr
  40365e:	bf00      	nop
  403660:	01312cff 	.word	0x01312cff
  403664:	400e0c00 	.word	0x400e0c00
  403668:	026259ff 	.word	0x026259ff
  40366c:	04000100 	.word	0x04000100
  403670:	039386ff 	.word	0x039386ff
  403674:	04000200 	.word	0x04000200
  403678:	04c4b3ff 	.word	0x04c4b3ff
  40367c:	04000300 	.word	0x04000300
  403680:	05f5e0ff 	.word	0x05f5e0ff
  403684:	04000500 	.word	0x04000500

00403688 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403688:	4b09      	ldr	r3, [pc, #36]	; (4036b0 <_sbrk+0x28>)
  40368a:	681b      	ldr	r3, [r3, #0]
  40368c:	b913      	cbnz	r3, 403694 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40368e:	4a09      	ldr	r2, [pc, #36]	; (4036b4 <_sbrk+0x2c>)
  403690:	4b07      	ldr	r3, [pc, #28]	; (4036b0 <_sbrk+0x28>)
  403692:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403694:	4b06      	ldr	r3, [pc, #24]	; (4036b0 <_sbrk+0x28>)
  403696:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403698:	181a      	adds	r2, r3, r0
  40369a:	4907      	ldr	r1, [pc, #28]	; (4036b8 <_sbrk+0x30>)
  40369c:	4291      	cmp	r1, r2
  40369e:	db04      	blt.n	4036aa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4036a0:	4610      	mov	r0, r2
  4036a2:	4a03      	ldr	r2, [pc, #12]	; (4036b0 <_sbrk+0x28>)
  4036a4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4036a6:	4618      	mov	r0, r3
  4036a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4036aa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4036ae:	4770      	bx	lr
  4036b0:	2040c424 	.word	0x2040c424
  4036b4:	2040e808 	.word	0x2040e808
  4036b8:	2045fffc 	.word	0x2045fffc

004036bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4036bc:	f04f 30ff 	mov.w	r0, #4294967295
  4036c0:	4770      	bx	lr
  4036c2:	bf00      	nop

004036c4 <_write>:

extern int _write(int file)
{
	return -1;
}
  4036c4:	f04f 30ff 	mov.w	r0, #4294967295
  4036c8:	4770      	bx	lr
  4036ca:	bf00      	nop

004036cc <_read>:

extern int _read(int file)
{
	return -1;
}
  4036cc:	f04f 30ff 	mov.w	r0, #4294967295
  4036d0:	4770      	bx	lr
  4036d2:	bf00      	nop

004036d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4036d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4036d8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4036da:	2000      	movs	r0, #0
  4036dc:	4770      	bx	lr
  4036de:	bf00      	nop

004036e0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4036e0:	2001      	movs	r0, #1
  4036e2:	4770      	bx	lr

004036e4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4036e4:	2000      	movs	r0, #0
  4036e6:	4770      	bx	lr

004036e8 <_exit>:

extern void _exit(int status)
{
  4036e8:	b508      	push	{r3, lr}
  4036ea:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  4036ec:	4801      	ldr	r0, [pc, #4]	; (4036f4 <_exit+0xc>)
  4036ee:	4b02      	ldr	r3, [pc, #8]	; (4036f8 <_exit+0x10>)
  4036f0:	4798      	blx	r3

	for (;;);
  4036f2:	e7fe      	b.n	4036f2 <_exit+0xa>
  4036f4:	0040f4d0 	.word	0x0040f4d0
  4036f8:	00408ed1 	.word	0x00408ed1

004036fc <_kill>:
}

extern void _kill(int pid, int sig)
{
  4036fc:	4770      	bx	lr
  4036fe:	bf00      	nop

00403700 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  403700:	f04f 30ff 	mov.w	r0, #4294967295
  403704:	4770      	bx	lr
  403706:	bf00      	nop

00403708 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  403708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40370c:	b087      	sub	sp, #28
  40370e:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  403710:	f103 0e07 	add.w	lr, r3, #7
  403714:	f02e 0e07 	bic.w	lr, lr, #7
  403718:	ebad 0d0e 	sub.w	sp, sp, lr
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
  40371c:	2b08      	cmp	r3, #8
  40371e:	dc41      	bgt.n	4037a4 <DW1000_readReg+0x9c>
  403720:	466e      	mov	r6, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  403722:	b919      	cbnz	r1, 40372c <DW1000_readReg+0x24>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  403724:	60f8      	str	r0, [r7, #12]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  403726:	f04f 0b01 	mov.w	fp, #1
  40372a:	e03e      	b.n	4037aa <DW1000_readReg+0xa2>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  40372c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  403730:	60f8      	str	r0, [r7, #12]
    	if (offset < 128) {							// Check if extended sub-index is needed
  403732:	2a7f      	cmp	r2, #127	; 0x7f
  403734:	d803      	bhi.n	40373e <DW1000_readReg+0x36>
    		header[1] = offset;						
  403736:	613a      	str	r2, [r7, #16]
    		headerLen = 2;
  403738:	f04f 0b02 	mov.w	fp, #2
  40373c:	e035      	b.n	4037aa <DW1000_readReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  40373e:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  403742:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403746:	6139      	str	r1, [r7, #16]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  403748:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  40374c:	617a      	str	r2, [r7, #20]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  40374e:	f04f 0b03 	mov.w	fp, #3
  403752:	e02a      	b.n	4037aa <DW1000_readReg+0xa2>
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  403754:	481b      	ldr	r0, [pc, #108]	; (4037c4 <DW1000_readReg+0xbc>)
  403756:	4649      	mov	r1, r9
  403758:	2201      	movs	r2, #1
  40375a:	47b0      	blx	r6
  40375c:	f108 0801 	add.w	r8, r8, #1
  403760:	f109 0904 	add.w	r9, r9, #4
  403764:	45c3      	cmp	fp, r8
  403766:	dcf5      	bgt.n	403754 <DW1000_readReg+0x4c>
	qspi_read(QSPI,data,n);
  403768:	4816      	ldr	r0, [pc, #88]	; (4037c4 <DW1000_readReg+0xbc>)
  40376a:	687e      	ldr	r6, [r7, #4]
  40376c:	4631      	mov	r1, r6
  40376e:	4652      	mov	r2, sl
  403770:	4b15      	ldr	r3, [pc, #84]	; (4037c8 <DW1000_readReg+0xc0>)
  403772:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  403774:	f1ba 0f01 	cmp.w	sl, #1
  403778:	d40f      	bmi.n	40379a <DW1000_readReg+0x92>
  40377a:	4631      	mov	r1, r6
  40377c:	4456      	add	r6, sl
  40377e:	2200      	movs	r2, #0
  403780:	2300      	movs	r3, #0
		result = (result << 8) | data[i];
  403782:	021d      	lsls	r5, r3, #8
  403784:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
  403788:	0214      	lsls	r4, r2, #8
  40378a:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
  40378e:	2300      	movs	r3, #0
  403790:	4322      	orrs	r2, r4
  403792:	432b      	orrs	r3, r5
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  403794:	428e      	cmp	r6, r1
  403796:	d1f4      	bne.n	403782 <DW1000_readReg+0x7a>
  403798:	e001      	b.n	40379e <DW1000_readReg+0x96>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  40379a:	2200      	movs	r2, #0
  40379c:	2300      	movs	r3, #0
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
  40379e:	4610      	mov	r0, r2
  4037a0:	4619      	mov	r1, r3
  4037a2:	e00a      	b.n	4037ba <DW1000_readReg+0xb2>
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  4037a4:	2000      	movs	r0, #0
  4037a6:	4601      	mov	r1, r0
  4037a8:	e007      	b.n	4037ba <DW1000_readReg+0xb2>
  4037aa:	607e      	str	r6, [r7, #4]
  4037ac:	469a      	mov	sl, r3
  4037ae:	f107 090c 	add.w	r9, r7, #12
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  4037b2:	f04f 0800 	mov.w	r8, #0
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  4037b6:	4e05      	ldr	r6, [pc, #20]	; (4037cc <DW1000_readReg+0xc4>)
  4037b8:	e7cc      	b.n	403754 <DW1000_readReg+0x4c>
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
}
  4037ba:	371c      	adds	r7, #28
  4037bc:	46bd      	mov	sp, r7
  4037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037c2:	bf00      	nop
  4037c4:	4007c000 	.word	0x4007c000
  4037c8:	00400795 	.word	0x00400795
  4037cc:	00400885 	.word	0x00400885

004037d0 <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  4037d0:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  4037d2:	2000      	movs	r0, #0
  4037d4:	4601      	mov	r1, r0
  4037d6:	4602      	mov	r2, r0
  4037d8:	2304      	movs	r3, #4
  4037da:	4c01      	ldr	r4, [pc, #4]	; (4037e0 <DW1000_readDeviceIdentifier+0x10>)
  4037dc:	47a0      	blx	r4
	return result;
}
  4037de:	bd10      	pop	{r4, pc}
  4037e0:	00403709 	.word	0x00403709

004037e4 <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  4037e4:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  4037e6:	200f      	movs	r0, #15
  4037e8:	2100      	movs	r1, #0
  4037ea:	460a      	mov	r2, r1
  4037ec:	2305      	movs	r3, #5
  4037ee:	4c03      	ldr	r4, [pc, #12]	; (4037fc <DW1000_readSystemStatus+0x18>)
  4037f0:	47a0      	blx	r4
  4037f2:	4b03      	ldr	r3, [pc, #12]	; (403800 <DW1000_readSystemStatus+0x1c>)
  4037f4:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  4037f6:	17c1      	asrs	r1, r0, #31
  4037f8:	bd10      	pop	{r4, pc}
  4037fa:	bf00      	nop
  4037fc:	00403709 	.word	0x00403709
  403800:	2040c540 	.word	0x2040c540

00403804 <DW1000_writeReg>:
	}

	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  403804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403808:	b087      	sub	sp, #28
  40380a:	af00      	add	r7, sp, #0
  40380c:	60f8      	str	r0, [r7, #12]
  40380e:	60b9      	str	r1, [r7, #8]
  403810:	4615      	mov	r5, r2
  403812:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  403816:	6cbc      	ldr	r4, [r7, #72]	; 0x48
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
  403818:	1de3      	adds	r3, r4, #7
  40381a:	f023 0307 	bic.w	r3, r3, #7
  40381e:	ebad 0d03 	sub.w	sp, sp, r3
  403822:	f8c7 d004 	str.w	sp, [r7, #4]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  403826:	2c00      	cmp	r4, #0
  403828:	dd25      	ble.n	403876 <DW1000_writeReg+0x72>
  40382a:	eb0d 0b04 	add.w	fp, sp, r4
  40382e:	2600      	movs	r6, #0
  403830:	22ff      	movs	r2, #255	; 0xff
  403832:	2300      	movs	r3, #0
  403834:	46ee      	mov	lr, sp
  403836:	46dc      	mov	ip, fp
  403838:	46c2      	mov	sl, r8
  40383a:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  40383c:	ea02 080a 	and.w	r8, r2, sl
  403840:	ea03 090b 	and.w	r9, r3, fp
  403844:	f1c6 0020 	rsb	r0, r6, #32
  403848:	f1a6 0120 	sub.w	r1, r6, #32
  40384c:	fa28 f806 	lsr.w	r8, r8, r6
  403850:	fa09 f000 	lsl.w	r0, r9, r0
  403854:	ea48 0800 	orr.w	r8, r8, r0
  403858:	fa29 f101 	lsr.w	r1, r9, r1
  40385c:	ea48 0801 	orr.w	r8, r8, r1
  403860:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  403864:	0219      	lsls	r1, r3, #8
  403866:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
  40386a:	0210      	lsls	r0, r2, #8
  40386c:	4602      	mov	r2, r0
  40386e:	460b      	mov	r3, r1
  403870:	3608      	adds	r6, #8
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  403872:	45e6      	cmp	lr, ip
  403874:	d1e2      	bne.n	40383c <DW1000_writeReg+0x38>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  403876:	68bb      	ldr	r3, [r7, #8]
  403878:	b92b      	cbnz	r3, 403886 <DW1000_writeReg+0x82>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  40387a:	68fb      	ldr	r3, [r7, #12]
  40387c:	f063 007f 	orn	r0, r3, #127	; 0x7f
  403880:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  403882:	2201      	movs	r2, #1
  403884:	e00f      	b.n	4038a6 <DW1000_writeReg+0xa2>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  403886:	68fb      	ldr	r3, [r7, #12]
  403888:	f063 003f 	orn	r0, r3, #63	; 0x3f
  40388c:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  40388e:	2d7f      	cmp	r5, #127	; 0x7f
  403890:	d802      	bhi.n	403898 <DW1000_writeReg+0x94>
    		header[1] = offset;						
  403892:	757d      	strb	r5, [r7, #21]
    		headerLen = 2;
  403894:	2202      	movs	r2, #2
  403896:	e006      	b.n	4038a6 <DW1000_writeReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  403898:	f065 037f 	orn	r3, r5, #127	; 0x7f
  40389c:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  40389e:	f3c5 12c7 	ubfx	r2, r5, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  4038a2:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  4038a4:	2203      	movs	r2, #3
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
  4038a6:	4916      	ldr	r1, [pc, #88]	; (403900 <DW1000_writeReg+0xfc>)
  4038a8:	690b      	ldr	r3, [r1, #16]
  4038aa:	f013 0f04 	tst.w	r3, #4
  4038ae:	d0fb      	beq.n	4038a8 <DW1000_writeReg+0xa4>
	for(int i = 0;i<headerLen;i++){
  4038b0:	b17a      	cbz	r2, 4038d2 <DW1000_writeReg+0xce>
  4038b2:	f107 0614 	add.w	r6, r7, #20
  4038b6:	eb06 0802 	add.w	r8, r6, r2
		 qspi_write(QSPI,header+i,1);
  4038ba:	f8df b044 	ldr.w	fp, [pc, #68]	; 403900 <DW1000_writeReg+0xfc>
  4038be:	f04f 0a01 	mov.w	sl, #1
  4038c2:	4d10      	ldr	r5, [pc, #64]	; (403904 <DW1000_writeReg+0x100>)
  4038c4:	4658      	mov	r0, fp
  4038c6:	4631      	mov	r1, r6
  4038c8:	4652      	mov	r2, sl
  4038ca:	47a8      	blx	r5
  4038cc:	3601      	adds	r6, #1
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
  4038ce:	4546      	cmp	r6, r8
  4038d0:	d1f8      	bne.n	4038c4 <DW1000_writeReg+0xc0>
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  4038d2:	2c00      	cmp	r4, #0
  4038d4:	dd0f      	ble.n	4038f6 <DW1000_writeReg+0xf2>
  4038d6:	687b      	ldr	r3, [r7, #4]
  4038d8:	461e      	mov	r6, r3
  4038da:	4423      	add	r3, r4
  4038dc:	461c      	mov	r4, r3
	{
		 qspi_write(QSPI,data+i,1);
  4038de:	f8df 9020 	ldr.w	r9, [pc, #32]	; 403900 <DW1000_writeReg+0xfc>
  4038e2:	f04f 0801 	mov.w	r8, #1
  4038e6:	4d07      	ldr	r5, [pc, #28]	; (403904 <DW1000_writeReg+0x100>)
  4038e8:	4648      	mov	r0, r9
  4038ea:	4631      	mov	r1, r6
  4038ec:	4642      	mov	r2, r8
  4038ee:	47a8      	blx	r5
  4038f0:	3601      	adds	r6, #1
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  4038f2:	42a6      	cmp	r6, r4
  4038f4:	d1f8      	bne.n	4038e8 <DW1000_writeReg+0xe4>
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  4038f6:	371c      	adds	r7, #28
  4038f8:	46bd      	mov	sp, r7
  4038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038fe:	bf00      	nop
  403900:	4007c000 	.word	0x4007c000
  403904:	00400885 	.word	0x00400885

00403908 <DW1000_toggleGPIO_MODE>:

void DW1000_setSystemConfig(uint64_t buffer) {
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}

void DW1000_toggleGPIO_MODE() {
  403908:	b530      	push	{r4, r5, lr}
  40390a:	b085      	sub	sp, #20
	 DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x001540, GPIO_MODE_LEN);
  40390c:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  403910:	2300      	movs	r3, #0
  403912:	e9cd 2300 	strd	r2, r3, [sp]
  403916:	2504      	movs	r5, #4
  403918:	9502      	str	r5, [sp, #8]
  40391a:	2026      	movs	r0, #38	; 0x26
  40391c:	2101      	movs	r1, #1
  40391e:	2200      	movs	r2, #0
  403920:	4c06      	ldr	r4, [pc, #24]	; (40393c <DW1000_toggleGPIO_MODE+0x34>)
  403922:	47a0      	blx	r4
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x00000120, PMSC_LEDC_LEN);
  403924:	f44f 7290 	mov.w	r2, #288	; 0x120
  403928:	2300      	movs	r3, #0
  40392a:	e9cd 2300 	strd	r2, r3, [sp]
  40392e:	9502      	str	r5, [sp, #8]
  403930:	2036      	movs	r0, #54	; 0x36
  403932:	2101      	movs	r1, #1
  403934:	2228      	movs	r2, #40	; 0x28
  403936:	47a0      	blx	r4
}
  403938:	b005      	add	sp, #20
  40393a:	bd30      	pop	{r4, r5, pc}
  40393c:	00403805 	.word	0x00403805

00403940 <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  403940:	b500      	push	{lr}
  403942:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403944:	17c1      	asrs	r1, r0, #31
  403946:	e9cd 0100 	strd	r0, r1, [sp]
  40394a:	2305      	movs	r3, #5
  40394c:	9302      	str	r3, [sp, #8]
  40394e:	2008      	movs	r0, #8
  403950:	2100      	movs	r1, #0
  403952:	460a      	mov	r2, r1
  403954:	4b02      	ldr	r3, [pc, #8]	; (403960 <DW1000_setTxFrameControl+0x20>)
  403956:	4798      	blx	r3
}
  403958:	b005      	add	sp, #20
  40395a:	f85d fb04 	ldr.w	pc, [sp], #4
  40395e:	bf00      	nop
  403960:	00403805 	.word	0x00403805

00403964 <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403964:	b510      	push	{r4, lr}
  403966:	b084      	sub	sp, #16
  403968:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  40396a:	e9cd 2300 	strd	r2, r3, [sp]
  40396e:	9b06      	ldr	r3, [sp, #24]
  403970:	9302      	str	r3, [sp, #8]
  403972:	2009      	movs	r0, #9
  403974:	2101      	movs	r1, #1
  403976:	4622      	mov	r2, r4
  403978:	4b01      	ldr	r3, [pc, #4]	; (403980 <DW1000_writeTxBuffer+0x1c>)
  40397a:	4798      	blx	r3
}
  40397c:	b004      	add	sp, #16
  40397e:	bd10      	pop	{r4, pc}
  403980:	00403805 	.word	0x00403805

00403984 <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  403984:	b500      	push	{lr}
  403986:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  403988:	2202      	movs	r2, #2
  40398a:	2300      	movs	r3, #0
  40398c:	e9cd 2300 	strd	r2, r3, [sp]
  403990:	2304      	movs	r3, #4
  403992:	9302      	str	r3, [sp, #8]
  403994:	200d      	movs	r0, #13
  403996:	2100      	movs	r1, #0
  403998:	460a      	mov	r2, r1
  40399a:	4b02      	ldr	r3, [pc, #8]	; (4039a4 <DW1000_startTx+0x20>)
  40399c:	4798      	blx	r3
}
  40399e:	b005      	add	sp, #20
  4039a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4039a4:	00403805 	.word	0x00403805

004039a8 <SdramCheck>:
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to disable
 */
static inline void isi_disable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IDR = flag;
  4039a8:	4b1c      	ldr	r3, [pc, #112]	; (403a1c <SdramCheck+0x74>)
  4039aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  4039ae:	631a      	str	r2, [r3, #48]	; 0x30
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  4039b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4039b2:	f042 0201 	orr.w	r2, r2, #1
  4039b6:	63da      	str	r2, [r3, #60]	; 0x3c
  4039b8:	4a19      	ldr	r2, [pc, #100]	; (403a20 <SdramCheck+0x78>)
#define REG_BD60ST		0xa3	/* Banding filter value for 60Hz */

void SdramCheck() {
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
  4039ba:	2300      	movs	r3, #0
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
  4039bc:	f822 3f02 	strh.w	r3, [r2, #2]!
		T++;
  4039c0:	3301      	adds	r3, #1
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  4039c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4039c6:	d1f9      	bne.n	4039bc <SdramCheck+0x14>
#define REG_DBLC_GR		0xa0	/* Digital BLC GR chan offset */
#define REG_AECHM		0xa1	/* Exposure value - bits AEC[15:10] */
#define REG_BD50ST		0xa2	/* Banding filter value for 50Hz */
#define REG_BD60ST		0xa3	/* Banding filter value for 60Hz */

void SdramCheck() {
  4039c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039cc:	b088      	sub	sp, #32
  4039ce:	4d14      	ldr	r5, [pc, #80]	; (403a20 <SdramCheck+0x78>)
  4039d0:	2101      	movs	r1, #1
  4039d2:	2400      	movs	r4, #0
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  4039d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 403a30 <SdramCheck+0x88>
  4039d8:	4f12      	ldr	r7, [pc, #72]	; (403a24 <SdramCheck+0x7c>)
			sendDebugString(buf);
  4039da:	4e13      	ldr	r6, [pc, #76]	; (403a28 <SdramCheck+0x80>)
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
  4039dc:	f835 2f02 	ldrh.w	r2, [r5, #2]!
  4039e0:	b2a3      	uxth	r3, r4
  4039e2:	429a      	cmp	r2, r3
  4039e4:	d007      	beq.n	4039f6 <SdramCheck+0x4e>
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  4039e6:	9200      	str	r2, [sp, #0]
  4039e8:	a803      	add	r0, sp, #12
  4039ea:	4641      	mov	r1, r8
  4039ec:	4622      	mov	r2, r4
  4039ee:	47b8      	blx	r7
			sendDebugString(buf);
  4039f0:	a803      	add	r0, sp, #12
  4039f2:	47b0      	blx	r6
			cleanTest = 0;
  4039f4:	2100      	movs	r1, #0
		}
		T++;
  4039f6:	3401      	adds	r4, #1
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  4039f8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
  4039fc:	d1ee      	bne.n	4039dc <SdramCheck+0x34>
			sendDebugString(buf);
			cleanTest = 0;
		}
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
  4039fe:	b111      	cbz	r1, 403a06 <SdramCheck+0x5e>
  403a00:	480a      	ldr	r0, [pc, #40]	; (403a2c <SdramCheck+0x84>)
  403a02:	4b09      	ldr	r3, [pc, #36]	; (403a28 <SdramCheck+0x80>)
  403a04:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  403a06:	4b05      	ldr	r3, [pc, #20]	; (403a1c <SdramCheck+0x74>)
  403a08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  403a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  403a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  403a10:	f042 0201 	orr.w	r2, r2, #1
  403a14:	639a      	str	r2, [r3, #56]	; 0x38
	isi_enable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_enable(ISI,1);
}
  403a16:	b008      	add	sp, #32
  403a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a1c:	4004c000 	.word	0x4004c000
  403a20:	6ffffffe 	.word	0x6ffffffe
  403a24:	00409661 	.word	0x00409661
  403a28:	0040019d 	.word	0x0040019d
  403a2c:	0040f518 	.word	0x0040f518
  403a30:	0040f4ec 	.word	0x0040f4ec

00403a34 <i2cWriteReg>:

void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  403a34:	b500      	push	{lr}
  403a36:	b089      	sub	sp, #36	; 0x24
  403a38:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  403a3c:	2300      	movs	r3, #0
  403a3e:	9303      	str	r3, [sp, #12]
  403a40:	9307      	str	r3, [sp, #28]
  403a42:	f88d 100c 	strb.w	r1, [sp, #12]
  403a46:	2301      	movs	r3, #1
  403a48:	9304      	str	r3, [sp, #16]
  403a4a:	f10d 0207 	add.w	r2, sp, #7
  403a4e:	9205      	str	r2, [sp, #20]
  403a50:	9306      	str	r3, [sp, #24]
  403a52:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  403a56:	4805      	ldr	r0, [pc, #20]	; (403a6c <i2cWriteReg+0x38>)
  403a58:	a903      	add	r1, sp, #12
  403a5a:	4b05      	ldr	r3, [pc, #20]	; (403a70 <i2cWriteReg+0x3c>)
  403a5c:	4798      	blx	r3
  403a5e:	b110      	cbz	r0, 403a66 <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  403a60:	4804      	ldr	r0, [pc, #16]	; (403a74 <i2cWriteReg+0x40>)
  403a62:	4b05      	ldr	r3, [pc, #20]	; (403a78 <i2cWriteReg+0x44>)
  403a64:	4798      	blx	r3
	}
}
  403a66:	b009      	add	sp, #36	; 0x24
  403a68:	f85d fb04 	ldr.w	pc, [sp], #4
  403a6c:	40018000 	.word	0x40018000
  403a70:	00402c1d 	.word	0x00402c1d
  403a74:	0040f534 	.word	0x0040f534
  403a78:	0040019d 	.word	0x0040019d

00403a7c <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  403a7c:	b500      	push	{lr}
  403a7e:	b087      	sub	sp, #28
	int retVal = 0;
  403a80:	2300      	movs	r3, #0
  403a82:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  403a84:	9300      	str	r3, [sp, #0]
  403a86:	9304      	str	r3, [sp, #16]
  403a88:	f88d 1000 	strb.w	r1, [sp]
  403a8c:	2301      	movs	r3, #1
  403a8e:	9301      	str	r3, [sp, #4]
  403a90:	aa05      	add	r2, sp, #20
  403a92:	9202      	str	r2, [sp, #8]
  403a94:	9303      	str	r3, [sp, #12]
  403a96:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  403a9a:	4804      	ldr	r0, [pc, #16]	; (403aac <i2cReadReg+0x30>)
  403a9c:	4669      	mov	r1, sp
  403a9e:	4b04      	ldr	r3, [pc, #16]	; (403ab0 <i2cReadReg+0x34>)
  403aa0:	4798      	blx	r3
	return retVal;
}
  403aa2:	9805      	ldr	r0, [sp, #20]
  403aa4:	b007      	add	sp, #28
  403aa6:	f85d fb04 	ldr.w	pc, [sp], #4
  403aaa:	bf00      	nop
  403aac:	40018000 	.word	0x40018000
  403ab0:	00402ac1 	.word	0x00402ac1

00403ab4 <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  403ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ab8:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  403aba:	b2c4      	uxtb	r4, r0
  403abc:	4620      	mov	r0, r4
  403abe:	2100      	movs	r1, #0
  403ac0:	4f2a      	ldr	r7, [pc, #168]	; (403b6c <ServoDriverInit+0xb8>)
  403ac2:	47b8      	blx	r7
  403ac4:	4602      	mov	r2, r0
  403ac6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403b84 <ServoDriverInit+0xd0>
  403aca:	a801      	add	r0, sp, #4
  403acc:	4641      	mov	r1, r8
  403ace:	4d28      	ldr	r5, [pc, #160]	; (403b70 <ServoDriverInit+0xbc>)
  403ad0:	47a8      	blx	r5
	sendDebugString(buf);
  403ad2:	a801      	add	r0, sp, #4
  403ad4:	4e27      	ldr	r6, [pc, #156]	; (403b74 <ServoDriverInit+0xc0>)
  403ad6:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  403ad8:	4620      	mov	r0, r4
  403ada:	2101      	movs	r1, #1
  403adc:	47b8      	blx	r7
  403ade:	4602      	mov	r2, r0
  403ae0:	a801      	add	r0, sp, #4
  403ae2:	4641      	mov	r1, r8
  403ae4:	47a8      	blx	r5
	sendDebugString(buf);
  403ae6:	a801      	add	r0, sp, #4
  403ae8:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  403aea:	4620      	mov	r0, r4
  403aec:	211e      	movs	r1, #30
  403aee:	47b8      	blx	r7
  403af0:	4602      	mov	r2, r0
  403af2:	a801      	add	r0, sp, #4
  403af4:	4641      	mov	r1, r8
  403af6:	47a8      	blx	r5
	sendDebugString(buf);
  403af8:	a801      	add	r0, sp, #4
  403afa:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  403afc:	4620      	mov	r0, r4
  403afe:	21fe      	movs	r1, #254	; 0xfe
  403b00:	47b8      	blx	r7
  403b02:	4602      	mov	r2, r0
  403b04:	a801      	add	r0, sp, #4
  403b06:	4641      	mov	r1, r8
  403b08:	47a8      	blx	r5
	sendDebugString(buf);
  403b0a:	a801      	add	r0, sp, #4
  403b0c:	47b0      	blx	r6
	
	delay_ms(1);
  403b0e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  403b12:	4f19      	ldr	r7, [pc, #100]	; (403b78 <ServoDriverInit+0xc4>)
  403b14:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  403b16:	4620      	mov	r0, r4
  403b18:	2100      	movs	r1, #0
  403b1a:	2210      	movs	r2, #16
  403b1c:	4d17      	ldr	r5, [pc, #92]	; (403b7c <ServoDriverInit+0xc8>)
  403b1e:	47a8      	blx	r5
	delay_ms(2);
  403b20:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403b88 <ServoDriverInit+0xd4>
  403b24:	4640      	mov	r0, r8
  403b26:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0xFE,0x80);
  403b28:	4620      	mov	r0, r4
  403b2a:	21fe      	movs	r1, #254	; 0xfe
  403b2c:	2280      	movs	r2, #128	; 0x80
  403b2e:	47a8      	blx	r5
	delay_ms(2);
  403b30:	4640      	mov	r0, r8
  403b32:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  403b34:	4620      	mov	r0, r4
  403b36:	2100      	movs	r1, #0
  403b38:	460a      	mov	r2, r1
  403b3a:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  403b3c:	4620      	mov	r0, r4
  403b3e:	2100      	movs	r1, #0
  403b40:	2210      	movs	r2, #16
  403b42:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  403b44:	4620      	mov	r0, r4
  403b46:	2101      	movs	r1, #1
  403b48:	2204      	movs	r2, #4
  403b4a:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  403b4c:	4620      	mov	r0, r4
  403b4e:	2100      	movs	r1, #0
  403b50:	460a      	mov	r2, r1
  403b52:	47a8      	blx	r5
	delay_ms(2);
  403b54:	4640      	mov	r0, r8
  403b56:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  403b58:	4620      	mov	r0, r4
  403b5a:	2100      	movs	r1, #0
  403b5c:	2280      	movs	r2, #128	; 0x80
  403b5e:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  403b60:	4807      	ldr	r0, [pc, #28]	; (403b80 <ServoDriverInit+0xcc>)
  403b62:	47b0      	blx	r6
}
  403b64:	b006      	add	sp, #24
  403b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b6a:	bf00      	nop
  403b6c:	00403a7d 	.word	0x00403a7d
  403b70:	00409661 	.word	0x00409661
  403b74:	0040019d 	.word	0x0040019d
  403b78:	20400001 	.word	0x20400001
  403b7c:	00403a35 	.word	0x00403a35
  403b80:	0040f548 	.word	0x0040f548
  403b84:	0040f540 	.word	0x0040f540
  403b88:	00018b1b 	.word	0x00018b1b

00403b8c <legGetI2Caddr>:
	memaddr[0] = Ain;
	memaddr[1] = Bin;
}

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
  403b8c:	2805      	cmp	r0, #5
  403b8e:	d87b      	bhi.n	403c88 <legGetI2Caddr+0xfc>
  403b90:	e8df f000 	tbb	[pc, r0]
  403b94:	3f2b1703 	.word	0x3f2b1703
  403b98:	6753      	.short	0x6753
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
  403b9a:	b921      	cbnz	r1, 403ba6 <legGetI2Caddr+0x1a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403b9c:	2340      	movs	r3, #64	; 0x40
  403b9e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403ba0:	231e      	movs	r3, #30
  403ba2:	6053      	str	r3, [r2, #4]
  403ba4:	4770      	bx	lr

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
  403ba6:	2901      	cmp	r1, #1
  403ba8:	d104      	bne.n	403bb4 <legGetI2Caddr+0x28>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403baa:	2340      	movs	r3, #64	; 0x40
  403bac:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bae:	2322      	movs	r3, #34	; 0x22
  403bb0:	6053      	str	r3, [r2, #4]
  403bb2:	4770      	bx	lr
void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
  403bb4:	2902      	cmp	r1, #2
  403bb6:	d167      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403bb8:	2340      	movs	r3, #64	; 0x40
  403bba:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bbc:	2326      	movs	r3, #38	; 0x26
  403bbe:	6053      	str	r3, [r2, #4]
  403bc0:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
  403bc2:	b921      	cbnz	r1, 403bce <legGetI2Caddr+0x42>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403bc4:	2341      	movs	r3, #65	; 0x41
  403bc6:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bc8:	2306      	movs	r3, #6
  403bca:	6053      	str	r3, [r2, #4]
  403bcc:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
  403bce:	2901      	cmp	r1, #1
  403bd0:	d104      	bne.n	403bdc <legGetI2Caddr+0x50>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403bd2:	2341      	movs	r3, #65	; 0x41
  403bd4:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bd6:	230a      	movs	r3, #10
  403bd8:	6053      	str	r3, [r2, #4]
  403bda:	4770      	bx	lr
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
  403bdc:	2902      	cmp	r1, #2
  403bde:	d153      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403be0:	2341      	movs	r3, #65	; 0x41
  403be2:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403be4:	230e      	movs	r3, #14
  403be6:	6053      	str	r3, [r2, #4]
  403be8:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
  403bea:	b921      	cbnz	r1, 403bf6 <legGetI2Caddr+0x6a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403bec:	2340      	movs	r3, #64	; 0x40
  403bee:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bf0:	2312      	movs	r3, #18
  403bf2:	6053      	str	r3, [r2, #4]
  403bf4:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
  403bf6:	2901      	cmp	r1, #1
  403bf8:	d104      	bne.n	403c04 <legGetI2Caddr+0x78>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403bfa:	2340      	movs	r3, #64	; 0x40
  403bfc:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403bfe:	2316      	movs	r3, #22
  403c00:	6053      	str	r3, [r2, #4]
  403c02:	4770      	bx	lr
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
  403c04:	2902      	cmp	r1, #2
  403c06:	d13f      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c08:	2340      	movs	r3, #64	; 0x40
  403c0a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c0c:	231a      	movs	r3, #26
  403c0e:	6053      	str	r3, [r2, #4]
  403c10:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
  403c12:	b921      	cbnz	r1, 403c1e <legGetI2Caddr+0x92>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c14:	2341      	movs	r3, #65	; 0x41
  403c16:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c18:	2312      	movs	r3, #18
  403c1a:	6053      	str	r3, [r2, #4]
  403c1c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
  403c1e:	2901      	cmp	r1, #1
  403c20:	d104      	bne.n	403c2c <legGetI2Caddr+0xa0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c22:	2341      	movs	r3, #65	; 0x41
  403c24:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c26:	2316      	movs	r3, #22
  403c28:	6053      	str	r3, [r2, #4]
  403c2a:	4770      	bx	lr
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
  403c2c:	2902      	cmp	r1, #2
  403c2e:	d12b      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c30:	2341      	movs	r3, #65	; 0x41
  403c32:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c34:	231a      	movs	r3, #26
  403c36:	6053      	str	r3, [r2, #4]
  403c38:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
  403c3a:	b921      	cbnz	r1, 403c46 <legGetI2Caddr+0xba>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c3c:	2340      	movs	r3, #64	; 0x40
  403c3e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c40:	2306      	movs	r3, #6
  403c42:	6053      	str	r3, [r2, #4]
  403c44:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
  403c46:	2901      	cmp	r1, #1
  403c48:	d104      	bne.n	403c54 <legGetI2Caddr+0xc8>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c4a:	2340      	movs	r3, #64	; 0x40
  403c4c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c4e:	230a      	movs	r3, #10
  403c50:	6053      	str	r3, [r2, #4]
  403c52:	4770      	bx	lr
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
  403c54:	2902      	cmp	r1, #2
  403c56:	d117      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c58:	2340      	movs	r3, #64	; 0x40
  403c5a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c5c:	230e      	movs	r3, #14
  403c5e:	6053      	str	r3, [r2, #4]
  403c60:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
  403c62:	b921      	cbnz	r1, 403c6e <legGetI2Caddr+0xe2>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c64:	2341      	movs	r3, #65	; 0x41
  403c66:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c68:	231e      	movs	r3, #30
  403c6a:	6053      	str	r3, [r2, #4]
  403c6c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
  403c6e:	2901      	cmp	r1, #1
  403c70:	d104      	bne.n	403c7c <legGetI2Caddr+0xf0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c72:	2341      	movs	r3, #65	; 0x41
  403c74:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c76:	2322      	movs	r3, #34	; 0x22
  403c78:	6053      	str	r3, [r2, #4]
  403c7a:	4770      	bx	lr
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L5_S2_ADDR,addr);
  403c7c:	2902      	cmp	r1, #2
  403c7e:	d103      	bne.n	403c88 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  403c80:	2341      	movs	r3, #65	; 0x41
  403c82:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  403c84:	2326      	movs	r3, #38	; 0x26
  403c86:	6053      	str	r3, [r2, #4]
  403c88:	4770      	bx	lr
  403c8a:	bf00      	nop
  403c8c:	0000      	movs	r0, r0
	...

00403c90 <WriteServo>:
		break;
	}
}

void WriteServo(int Leg,int svo,float angle) 
{
  403c90:	b530      	push	{r4, r5, lr}
  403c92:	ed2d 8b02 	vpush	{d8}
  403c96:	b083      	sub	sp, #12
  403c98:	4605      	mov	r5, r0
  403c9a:	460c      	mov	r4, r1
  403c9c:	ee08 2a10 	vmov	s16, r2
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  403ca0:	466a      	mov	r2, sp
  403ca2:	4b2b      	ldr	r3, [pc, #172]	; (403d50 <WriteServo+0xc0>)
  403ca4:	4798      	blx	r3
	extern float* SvoCal;
	 //uint16_t stop = (int)((1.00+((angle)/180.00))*(4095.00/(20.00)));
	angle = angle + SvoCal[svo*12+2*Leg];
  403ca6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  403caa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
  403cae:	4b29      	ldr	r3, [pc, #164]	; (403d54 <WriteServo+0xc4>)
  403cb0:	681b      	ldr	r3, [r3, #0]
  403cb2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
  403cb6:	edd4 7a00 	vldr	s15, [r4]
	
	uint16_t stop = (int)lroundf( (4095.00/(20.00)) * ((0.56) + (2.4-0.56)*(angle/180.00))  );	
  403cba:	ee78 7a27 	vadd.f32	s15, s16, s15
  403cbe:	ee17 0a90 	vmov	r0, s15
  403cc2:	4b25      	ldr	r3, [pc, #148]	; (403d58 <WriteServo+0xc8>)
  403cc4:	4798      	blx	r3
  403cc6:	2200      	movs	r2, #0
  403cc8:	4b24      	ldr	r3, [pc, #144]	; (403d5c <WriteServo+0xcc>)
  403cca:	4c25      	ldr	r4, [pc, #148]	; (403d60 <WriteServo+0xd0>)
  403ccc:	47a0      	blx	r4
  403cce:	4c25      	ldr	r4, [pc, #148]	; (403d64 <WriteServo+0xd4>)
  403cd0:	a319      	add	r3, pc, #100	; (adr r3, 403d38 <WriteServo+0xa8>)
  403cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cd6:	47a0      	blx	r4
  403cd8:	a319      	add	r3, pc, #100	; (adr r3, 403d40 <WriteServo+0xb0>)
  403cda:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cde:	4d22      	ldr	r5, [pc, #136]	; (403d68 <WriteServo+0xd8>)
  403ce0:	47a8      	blx	r5
  403ce2:	a319      	add	r3, pc, #100	; (adr r3, 403d48 <WriteServo+0xb8>)
  403ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ce8:	47a0      	blx	r4
  403cea:	4b20      	ldr	r3, [pc, #128]	; (403d6c <WriteServo+0xdc>)
  403cec:	4798      	blx	r3
  403cee:	4b20      	ldr	r3, [pc, #128]	; (403d70 <WriteServo+0xe0>)
  403cf0:	4798      	blx	r3
  403cf2:	4605      	mov	r5, r0
		
	i2cWriteReg(addrData[0],addrData[1],0x01);
  403cf4:	f89d 0000 	ldrb.w	r0, [sp]
  403cf8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  403cfc:	2201      	movs	r2, #1
  403cfe:	4c1d      	ldr	r4, [pc, #116]	; (403d74 <WriteServo+0xe4>)
  403d00:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  403d02:	9901      	ldr	r1, [sp, #4]
  403d04:	3101      	adds	r1, #1
  403d06:	f89d 0000 	ldrb.w	r0, [sp]
  403d0a:	b2c9      	uxtb	r1, r1
  403d0c:	2200      	movs	r2, #0
  403d0e:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,stop);
  403d10:	9901      	ldr	r1, [sp, #4]
  403d12:	3102      	adds	r1, #2
  403d14:	f89d 0000 	ldrb.w	r0, [sp]
  403d18:	b2c9      	uxtb	r1, r1
  403d1a:	b2ea      	uxtb	r2, r5
  403d1c:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,stop >> 8);
  403d1e:	9901      	ldr	r1, [sp, #4]
  403d20:	3103      	adds	r1, #3
  403d22:	f89d 0000 	ldrb.w	r0, [sp]
  403d26:	b2c9      	uxtb	r1, r1
  403d28:	f3c5 2207 	ubfx	r2, r5, #8, #8
  403d2c:	47a0      	blx	r4
	
}
  403d2e:	b003      	add	sp, #12
  403d30:	ecbd 8b02 	vpop	{d8}
  403d34:	bd30      	pop	{r4, r5, pc}
  403d36:	bf00      	nop
  403d38:	d70a3d70 	.word	0xd70a3d70
  403d3c:	3ffd70a3 	.word	0x3ffd70a3
  403d40:	1eb851ec 	.word	0x1eb851ec
  403d44:	3fe1eb85 	.word	0x3fe1eb85
  403d48:	00000000 	.word	0x00000000
  403d4c:	40699800 	.word	0x40699800
  403d50:	00403b8d 	.word	0x00403b8d
  403d54:	2040c5e4 	.word	0x2040c5e4
  403d58:	004086f1 	.word	0x004086f1
  403d5c:	40668000 	.word	0x40668000
  403d60:	004089ed 	.word	0x004089ed
  403d64:	00408799 	.word	0x00408799
  403d68:	00408435 	.word	0x00408435
  403d6c:	00408d1d 	.word	0x00408d1d
  403d70:	00406025 	.word	0x00406025
  403d74:	00403a35 	.word	0x00403a35

00403d78 <SetupCameraYUVVGA_OV7670>:
	for(int i = 0;  ov_settings[i][0] != 0xff;i++ ) write_SCCB(ov_settings[i][0],ov_settings[i][1]);
	for(int i = 0; ov_format[i] != 0xff;i++ ) write_SCCB(ov_format[i],ov_vga[1]);
	
}

void SetupCameraYUVVGA_OV7670() {
  403d78:	b510      	push	{r4, lr}
		//Input clock 24Mhz,0x25fps
		 write_SCCB_76(0x12,0x80);
  403d7a:	2021      	movs	r0, #33	; 0x21
  403d7c:	2112      	movs	r1, #18
  403d7e:	2280      	movs	r2, #128	; 0x80
  403d80:	4cca      	ldr	r4, [pc, #808]	; (4040ac <SetupCameraYUVVGA_OV7670+0x334>)
  403d82:	47a0      	blx	r4
		 write_SCCB_76(0x11,0x00);
  403d84:	2021      	movs	r0, #33	; 0x21
  403d86:	2111      	movs	r1, #17
  403d88:	2200      	movs	r2, #0
  403d8a:	47a0      	blx	r4
		 write_SCCB_76(0x3a,0x04);
  403d8c:	2021      	movs	r0, #33	; 0x21
  403d8e:	213a      	movs	r1, #58	; 0x3a
  403d90:	2204      	movs	r2, #4
  403d92:	47a0      	blx	r4
		 write_SCCB_76(0x12,0x00);
  403d94:	2021      	movs	r0, #33	; 0x21
  403d96:	2112      	movs	r1, #18
  403d98:	2200      	movs	r2, #0
  403d9a:	47a0      	blx	r4
		 write_SCCB_76(0x17,0x13);
  403d9c:	2021      	movs	r0, #33	; 0x21
  403d9e:	2117      	movs	r1, #23
  403da0:	2213      	movs	r2, #19
  403da2:	47a0      	blx	r4
		 write_SCCB_76(0x18,0x01);
  403da4:	2021      	movs	r0, #33	; 0x21
  403da6:	2118      	movs	r1, #24
  403da8:	2201      	movs	r2, #1
  403daa:	47a0      	blx	r4
		 write_SCCB_76(0x32,0xb6);
  403dac:	2021      	movs	r0, #33	; 0x21
  403dae:	2132      	movs	r1, #50	; 0x32
  403db0:	22b6      	movs	r2, #182	; 0xb6
  403db2:	47a0      	blx	r4
		 write_SCCB_76(0x19,0x02);
  403db4:	2021      	movs	r0, #33	; 0x21
  403db6:	2119      	movs	r1, #25
  403db8:	2202      	movs	r2, #2
  403dba:	47a0      	blx	r4
		 write_SCCB_76(0x1a,0x7a);
  403dbc:	2021      	movs	r0, #33	; 0x21
  403dbe:	211a      	movs	r1, #26
  403dc0:	227a      	movs	r2, #122	; 0x7a
  403dc2:	47a0      	blx	r4
		 write_SCCB_76(0x03,0x0a);
  403dc4:	2021      	movs	r0, #33	; 0x21
  403dc6:	2103      	movs	r1, #3
  403dc8:	220a      	movs	r2, #10
  403dca:	47a0      	blx	r4
		 write_SCCB_76(0x0c,0x00);
  403dcc:	2021      	movs	r0, #33	; 0x21
  403dce:	210c      	movs	r1, #12
  403dd0:	2200      	movs	r2, #0
  403dd2:	47a0      	blx	r4
		 write_SCCB_76(0x3e,0x00);
  403dd4:	2021      	movs	r0, #33	; 0x21
  403dd6:	213e      	movs	r1, #62	; 0x3e
  403dd8:	2200      	movs	r2, #0
  403dda:	47a0      	blx	r4
		 write_SCCB_76(0x70,0x3a);
  403ddc:	2021      	movs	r0, #33	; 0x21
  403dde:	2170      	movs	r1, #112	; 0x70
  403de0:	223a      	movs	r2, #58	; 0x3a
  403de2:	47a0      	blx	r4
		 write_SCCB_76(0x71,0x35);
  403de4:	2021      	movs	r0, #33	; 0x21
  403de6:	2171      	movs	r1, #113	; 0x71
  403de8:	2235      	movs	r2, #53	; 0x35
  403dea:	47a0      	blx	r4
		 write_SCCB_76(0x72,0x11);
  403dec:	2021      	movs	r0, #33	; 0x21
  403dee:	2172      	movs	r1, #114	; 0x72
  403df0:	2211      	movs	r2, #17
  403df2:	47a0      	blx	r4
		 write_SCCB_76(0x73,0xf0);
  403df4:	2021      	movs	r0, #33	; 0x21
  403df6:	2173      	movs	r1, #115	; 0x73
  403df8:	22f0      	movs	r2, #240	; 0xf0
  403dfa:	47a0      	blx	r4
		 write_SCCB_76(0xa2,0x02);
  403dfc:	2021      	movs	r0, #33	; 0x21
  403dfe:	21a2      	movs	r1, #162	; 0xa2
  403e00:	2202      	movs	r2, #2
  403e02:	47a0      	blx	r4
		 write_SCCB_76(0x7a,0x20);
  403e04:	2021      	movs	r0, #33	; 0x21
  403e06:	217a      	movs	r1, #122	; 0x7a
  403e08:	2220      	movs	r2, #32
  403e0a:	47a0      	blx	r4
		 write_SCCB_76(0x7b,0x10);
  403e0c:	2021      	movs	r0, #33	; 0x21
  403e0e:	217b      	movs	r1, #123	; 0x7b
  403e10:	2210      	movs	r2, #16
  403e12:	47a0      	blx	r4
		 write_SCCB_76(0x7c,0x1e);
  403e14:	2021      	movs	r0, #33	; 0x21
  403e16:	217c      	movs	r1, #124	; 0x7c
  403e18:	221e      	movs	r2, #30
  403e1a:	47a0      	blx	r4
		 write_SCCB_76(0x7d,0x35);
  403e1c:	2021      	movs	r0, #33	; 0x21
  403e1e:	217d      	movs	r1, #125	; 0x7d
  403e20:	2235      	movs	r2, #53	; 0x35
  403e22:	47a0      	blx	r4
		 write_SCCB_76(0x7e,0x5a);
  403e24:	2021      	movs	r0, #33	; 0x21
  403e26:	217e      	movs	r1, #126	; 0x7e
  403e28:	225a      	movs	r2, #90	; 0x5a
  403e2a:	47a0      	blx	r4
		 write_SCCB_76(0x7f,0x69);
  403e2c:	2021      	movs	r0, #33	; 0x21
  403e2e:	217f      	movs	r1, #127	; 0x7f
  403e30:	2269      	movs	r2, #105	; 0x69
  403e32:	47a0      	blx	r4
		 write_SCCB_76(0x80,0x76);
  403e34:	2021      	movs	r0, #33	; 0x21
  403e36:	2180      	movs	r1, #128	; 0x80
  403e38:	2276      	movs	r2, #118	; 0x76
  403e3a:	47a0      	blx	r4
		 write_SCCB_76(0x81,0x80);
  403e3c:	2021      	movs	r0, #33	; 0x21
  403e3e:	2181      	movs	r1, #129	; 0x81
  403e40:	2280      	movs	r2, #128	; 0x80
  403e42:	47a0      	blx	r4
		 write_SCCB_76(0x82,0x88);
  403e44:	2021      	movs	r0, #33	; 0x21
  403e46:	2182      	movs	r1, #130	; 0x82
  403e48:	2288      	movs	r2, #136	; 0x88
  403e4a:	47a0      	blx	r4
		 write_SCCB_76(0x83,0x8f);
  403e4c:	2021      	movs	r0, #33	; 0x21
  403e4e:	2183      	movs	r1, #131	; 0x83
  403e50:	228f      	movs	r2, #143	; 0x8f
  403e52:	47a0      	blx	r4
		 write_SCCB_76(0x84,0x96);
  403e54:	2021      	movs	r0, #33	; 0x21
  403e56:	2184      	movs	r1, #132	; 0x84
  403e58:	2296      	movs	r2, #150	; 0x96
  403e5a:	47a0      	blx	r4
		 write_SCCB_76(0x85,0xa3);
  403e5c:	2021      	movs	r0, #33	; 0x21
  403e5e:	2185      	movs	r1, #133	; 0x85
  403e60:	22a3      	movs	r2, #163	; 0xa3
  403e62:	47a0      	blx	r4
		 write_SCCB_76(0x86,0xaf);
  403e64:	2021      	movs	r0, #33	; 0x21
  403e66:	2186      	movs	r1, #134	; 0x86
  403e68:	22af      	movs	r2, #175	; 0xaf
  403e6a:	47a0      	blx	r4
		 write_SCCB_76(0x87,0xc4);
  403e6c:	2021      	movs	r0, #33	; 0x21
  403e6e:	2187      	movs	r1, #135	; 0x87
  403e70:	22c4      	movs	r2, #196	; 0xc4
  403e72:	47a0      	blx	r4
		 write_SCCB_76(0x88,0xd7);
  403e74:	2021      	movs	r0, #33	; 0x21
  403e76:	2188      	movs	r1, #136	; 0x88
  403e78:	22d7      	movs	r2, #215	; 0xd7
  403e7a:	47a0      	blx	r4
		 write_SCCB_76(0x89,0xe8);
  403e7c:	2021      	movs	r0, #33	; 0x21
  403e7e:	2189      	movs	r1, #137	; 0x89
  403e80:	22e8      	movs	r2, #232	; 0xe8
  403e82:	47a0      	blx	r4
		 write_SCCB_76(0x13,0xe7);
  403e84:	2021      	movs	r0, #33	; 0x21
  403e86:	2113      	movs	r1, #19
  403e88:	22e7      	movs	r2, #231	; 0xe7
  403e8a:	47a0      	blx	r4
		 write_SCCB_76(0x01,0x28);
  403e8c:	2021      	movs	r0, #33	; 0x21
  403e8e:	2101      	movs	r1, #1
  403e90:	2228      	movs	r2, #40	; 0x28
  403e92:	47a0      	blx	r4
		 write_SCCB_76(0x02,0x30);
  403e94:	2021      	movs	r0, #33	; 0x21
  403e96:	2102      	movs	r1, #2
  403e98:	2230      	movs	r2, #48	; 0x30
  403e9a:	47a0      	blx	r4
		 write_SCCB_76(0x00,0x00);
  403e9c:	2021      	movs	r0, #33	; 0x21
  403e9e:	2100      	movs	r1, #0
  403ea0:	460a      	mov	r2, r1
  403ea2:	47a0      	blx	r4
		 write_SCCB_76(0x10,0x00);
  403ea4:	2021      	movs	r0, #33	; 0x21
  403ea6:	2110      	movs	r1, #16
  403ea8:	2200      	movs	r2, #0
  403eaa:	47a0      	blx	r4
		 write_SCCB_76(0x0d,0x40);
  403eac:	2021      	movs	r0, #33	; 0x21
  403eae:	210d      	movs	r1, #13
  403eb0:	2240      	movs	r2, #64	; 0x40
  403eb2:	47a0      	blx	r4
		 write_SCCB_76(0x14,0x18);
  403eb4:	2021      	movs	r0, #33	; 0x21
  403eb6:	2114      	movs	r1, #20
  403eb8:	2218      	movs	r2, #24
  403eba:	47a0      	blx	r4
		 write_SCCB_76(0xa5,0x07);
  403ebc:	2021      	movs	r0, #33	; 0x21
  403ebe:	21a5      	movs	r1, #165	; 0xa5
  403ec0:	2207      	movs	r2, #7
  403ec2:	47a0      	blx	r4
		 write_SCCB_76(0xab,0x08);
  403ec4:	2021      	movs	r0, #33	; 0x21
  403ec6:	21ab      	movs	r1, #171	; 0xab
  403ec8:	2208      	movs	r2, #8
  403eca:	47a0      	blx	r4
		 write_SCCB_76(0x24,0x95);
  403ecc:	2021      	movs	r0, #33	; 0x21
  403ece:	2124      	movs	r1, #36	; 0x24
  403ed0:	2295      	movs	r2, #149	; 0x95
  403ed2:	47a0      	blx	r4
		 write_SCCB_76(0x25,0x33);
  403ed4:	2021      	movs	r0, #33	; 0x21
  403ed6:	2125      	movs	r1, #37	; 0x25
  403ed8:	2233      	movs	r2, #51	; 0x33
  403eda:	47a0      	blx	r4
		 write_SCCB_76(0x26,0xe3);
  403edc:	2021      	movs	r0, #33	; 0x21
  403ede:	2126      	movs	r1, #38	; 0x26
  403ee0:	22e3      	movs	r2, #227	; 0xe3
  403ee2:	47a0      	blx	r4
		 write_SCCB_76(0x9f,0x78);
  403ee4:	2021      	movs	r0, #33	; 0x21
  403ee6:	219f      	movs	r1, #159	; 0x9f
  403ee8:	2278      	movs	r2, #120	; 0x78
  403eea:	47a0      	blx	r4
		 write_SCCB_76(0xa0,0x68);
  403eec:	2021      	movs	r0, #33	; 0x21
  403eee:	21a0      	movs	r1, #160	; 0xa0
  403ef0:	2268      	movs	r2, #104	; 0x68
  403ef2:	47a0      	blx	r4
		 write_SCCB_76(0xa1,0x03);
  403ef4:	2021      	movs	r0, #33	; 0x21
  403ef6:	21a1      	movs	r1, #161	; 0xa1
  403ef8:	2203      	movs	r2, #3
  403efa:	47a0      	blx	r4
		 write_SCCB_76(0xa6,0xd8);
  403efc:	2021      	movs	r0, #33	; 0x21
  403efe:	21a6      	movs	r1, #166	; 0xa6
  403f00:	22d8      	movs	r2, #216	; 0xd8
  403f02:	47a0      	blx	r4
		 write_SCCB_76(0xa7,0xd8);
  403f04:	2021      	movs	r0, #33	; 0x21
  403f06:	21a7      	movs	r1, #167	; 0xa7
  403f08:	22d8      	movs	r2, #216	; 0xd8
  403f0a:	47a0      	blx	r4
		 write_SCCB_76(0xa8,0xf0);
  403f0c:	2021      	movs	r0, #33	; 0x21
  403f0e:	21a8      	movs	r1, #168	; 0xa8
  403f10:	22f0      	movs	r2, #240	; 0xf0
  403f12:	47a0      	blx	r4
		 write_SCCB_76(0xa9,0x90);
  403f14:	2021      	movs	r0, #33	; 0x21
  403f16:	21a9      	movs	r1, #169	; 0xa9
  403f18:	2290      	movs	r2, #144	; 0x90
  403f1a:	47a0      	blx	r4
		 write_SCCB_76(0xaa,0x94);
  403f1c:	2021      	movs	r0, #33	; 0x21
  403f1e:	21aa      	movs	r1, #170	; 0xaa
  403f20:	2294      	movs	r2, #148	; 0x94
  403f22:	47a0      	blx	r4
		 write_SCCB_76(0x13,0xe7);
  403f24:	2021      	movs	r0, #33	; 0x21
  403f26:	2113      	movs	r1, #19
  403f28:	22e7      	movs	r2, #231	; 0xe7
  403f2a:	47a0      	blx	r4
		 write_SCCB_76(0x0e,0x61);
  403f2c:	2021      	movs	r0, #33	; 0x21
  403f2e:	210e      	movs	r1, #14
  403f30:	2261      	movs	r2, #97	; 0x61
  403f32:	47a0      	blx	r4
		 write_SCCB_76(0x0f,0x4b);
  403f34:	2021      	movs	r0, #33	; 0x21
  403f36:	210f      	movs	r1, #15
  403f38:	224b      	movs	r2, #75	; 0x4b
  403f3a:	47a0      	blx	r4
		 write_SCCB_76(0x16,0x02);
  403f3c:	2021      	movs	r0, #33	; 0x21
  403f3e:	2116      	movs	r1, #22
  403f40:	2202      	movs	r2, #2
  403f42:	47a0      	blx	r4
		 write_SCCB_76(0x1e,0x07);
  403f44:	2021      	movs	r0, #33	; 0x21
  403f46:	211e      	movs	r1, #30
  403f48:	2207      	movs	r2, #7
  403f4a:	47a0      	blx	r4
		 write_SCCB_76(0x21,0x02);
  403f4c:	2021      	movs	r0, #33	; 0x21
  403f4e:	4601      	mov	r1, r0
  403f50:	2202      	movs	r2, #2
  403f52:	47a0      	blx	r4
		 write_SCCB_76(0x22,0x91);
  403f54:	2021      	movs	r0, #33	; 0x21
  403f56:	2122      	movs	r1, #34	; 0x22
  403f58:	2291      	movs	r2, #145	; 0x91
  403f5a:	47a0      	blx	r4
		 write_SCCB_76(0x29,0x07);
  403f5c:	2021      	movs	r0, #33	; 0x21
  403f5e:	2129      	movs	r1, #41	; 0x29
  403f60:	2207      	movs	r2, #7
  403f62:	47a0      	blx	r4
		 write_SCCB_76(0x33,0x0b);
  403f64:	2021      	movs	r0, #33	; 0x21
  403f66:	2133      	movs	r1, #51	; 0x33
  403f68:	220b      	movs	r2, #11
  403f6a:	47a0      	blx	r4
		 write_SCCB_76(0x35,0x0b);
  403f6c:	2021      	movs	r0, #33	; 0x21
  403f6e:	2135      	movs	r1, #53	; 0x35
  403f70:	220b      	movs	r2, #11
  403f72:	47a0      	blx	r4
		 write_SCCB_76(0x37,0x1d);
  403f74:	2021      	movs	r0, #33	; 0x21
  403f76:	2137      	movs	r1, #55	; 0x37
  403f78:	221d      	movs	r2, #29
  403f7a:	47a0      	blx	r4
		 write_SCCB_76(0x38,0x71);
  403f7c:	2021      	movs	r0, #33	; 0x21
  403f7e:	2138      	movs	r1, #56	; 0x38
  403f80:	2271      	movs	r2, #113	; 0x71
  403f82:	47a0      	blx	r4
		 write_SCCB_76(0x39,0x2a);
  403f84:	2021      	movs	r0, #33	; 0x21
  403f86:	2139      	movs	r1, #57	; 0x39
  403f88:	222a      	movs	r2, #42	; 0x2a
  403f8a:	47a0      	blx	r4
		 write_SCCB_76(0x3c,0x78);
  403f8c:	2021      	movs	r0, #33	; 0x21
  403f8e:	213c      	movs	r1, #60	; 0x3c
  403f90:	2278      	movs	r2, #120	; 0x78
  403f92:	47a0      	blx	r4
		 write_SCCB_76(0x4d,0x40);
  403f94:	2021      	movs	r0, #33	; 0x21
  403f96:	214d      	movs	r1, #77	; 0x4d
  403f98:	2240      	movs	r2, #64	; 0x40
  403f9a:	47a0      	blx	r4
		 write_SCCB_76(0x4e,0x20);
  403f9c:	2021      	movs	r0, #33	; 0x21
  403f9e:	214e      	movs	r1, #78	; 0x4e
  403fa0:	2220      	movs	r2, #32
  403fa2:	47a0      	blx	r4
		 write_SCCB_76(0x69,0x00);
  403fa4:	2021      	movs	r0, #33	; 0x21
  403fa6:	2169      	movs	r1, #105	; 0x69
  403fa8:	2200      	movs	r2, #0
  403faa:	47a0      	blx	r4
		 write_SCCB_76(0x6b,0x0a);
  403fac:	2021      	movs	r0, #33	; 0x21
  403fae:	216b      	movs	r1, #107	; 0x6b
  403fb0:	220a      	movs	r2, #10
  403fb2:	47a0      	blx	r4
		 write_SCCB_76(0x74,0x10);
  403fb4:	2021      	movs	r0, #33	; 0x21
  403fb6:	2174      	movs	r1, #116	; 0x74
  403fb8:	2210      	movs	r2, #16
  403fba:	47a0      	blx	r4
		 write_SCCB_76(0x8d,0x4f);
  403fbc:	2021      	movs	r0, #33	; 0x21
  403fbe:	218d      	movs	r1, #141	; 0x8d
  403fc0:	224f      	movs	r2, #79	; 0x4f
  403fc2:	47a0      	blx	r4
		 write_SCCB_76(0x8e,0x00);
  403fc4:	2021      	movs	r0, #33	; 0x21
  403fc6:	218e      	movs	r1, #142	; 0x8e
  403fc8:	2200      	movs	r2, #0
  403fca:	47a0      	blx	r4
		 write_SCCB_76(0x8f,0x00);
  403fcc:	2021      	movs	r0, #33	; 0x21
  403fce:	218f      	movs	r1, #143	; 0x8f
  403fd0:	2200      	movs	r2, #0
  403fd2:	47a0      	blx	r4
		 write_SCCB_76(0x90,0x00);
  403fd4:	2021      	movs	r0, #33	; 0x21
  403fd6:	2190      	movs	r1, #144	; 0x90
  403fd8:	2200      	movs	r2, #0
  403fda:	47a0      	blx	r4
		 write_SCCB_76(0x91,0x00);
  403fdc:	2021      	movs	r0, #33	; 0x21
  403fde:	2191      	movs	r1, #145	; 0x91
  403fe0:	2200      	movs	r2, #0
  403fe2:	47a0      	blx	r4
		 write_SCCB_76(0x92,0x66);
  403fe4:	2021      	movs	r0, #33	; 0x21
  403fe6:	2192      	movs	r1, #146	; 0x92
  403fe8:	2266      	movs	r2, #102	; 0x66
  403fea:	47a0      	blx	r4
		 write_SCCB_76(0x96,0x00);
  403fec:	2021      	movs	r0, #33	; 0x21
  403fee:	2196      	movs	r1, #150	; 0x96
  403ff0:	2200      	movs	r2, #0
  403ff2:	47a0      	blx	r4
		 write_SCCB_76(0x9a,0x80);
  403ff4:	2021      	movs	r0, #33	; 0x21
  403ff6:	219a      	movs	r1, #154	; 0x9a
  403ff8:	2280      	movs	r2, #128	; 0x80
  403ffa:	47a0      	blx	r4
		 write_SCCB_76(0xb0,0x84);
  403ffc:	2021      	movs	r0, #33	; 0x21
  403ffe:	21b0      	movs	r1, #176	; 0xb0
  404000:	2284      	movs	r2, #132	; 0x84
  404002:	47a0      	blx	r4
		 write_SCCB_76(0xb1,0x0c);
  404004:	2021      	movs	r0, #33	; 0x21
  404006:	21b1      	movs	r1, #177	; 0xb1
  404008:	220c      	movs	r2, #12
  40400a:	47a0      	blx	r4
		 write_SCCB_76(0xb2,0x0e);
  40400c:	2021      	movs	r0, #33	; 0x21
  40400e:	21b2      	movs	r1, #178	; 0xb2
  404010:	220e      	movs	r2, #14
  404012:	47a0      	blx	r4
		 write_SCCB_76(0xb3,0x82);
  404014:	2021      	movs	r0, #33	; 0x21
  404016:	21b3      	movs	r1, #179	; 0xb3
  404018:	2282      	movs	r2, #130	; 0x82
  40401a:	47a0      	blx	r4
		 write_SCCB_76(0xb8,0x0a);
  40401c:	2021      	movs	r0, #33	; 0x21
  40401e:	21b8      	movs	r1, #184	; 0xb8
  404020:	220a      	movs	r2, #10
  404022:	47a0      	blx	r4
		 write_SCCB_76(0x43,0x14);
  404024:	2021      	movs	r0, #33	; 0x21
  404026:	2143      	movs	r1, #67	; 0x43
  404028:	2214      	movs	r2, #20
  40402a:	47a0      	blx	r4
		 write_SCCB_76(0x44,0xf0);
  40402c:	2021      	movs	r0, #33	; 0x21
  40402e:	2144      	movs	r1, #68	; 0x44
  404030:	22f0      	movs	r2, #240	; 0xf0
  404032:	47a0      	blx	r4
		 write_SCCB_76(0x45,0x34);
  404034:	2021      	movs	r0, #33	; 0x21
  404036:	2145      	movs	r1, #69	; 0x45
  404038:	2234      	movs	r2, #52	; 0x34
  40403a:	47a0      	blx	r4
		 write_SCCB_76(0x46,0x58);
  40403c:	2021      	movs	r0, #33	; 0x21
  40403e:	2146      	movs	r1, #70	; 0x46
  404040:	2258      	movs	r2, #88	; 0x58
  404042:	47a0      	blx	r4
		 write_SCCB_76(0x47,0x28);
  404044:	2021      	movs	r0, #33	; 0x21
  404046:	2147      	movs	r1, #71	; 0x47
  404048:	2228      	movs	r2, #40	; 0x28
  40404a:	47a0      	blx	r4
		 write_SCCB_76(0x48,0x3a);
  40404c:	2021      	movs	r0, #33	; 0x21
  40404e:	2148      	movs	r1, #72	; 0x48
  404050:	223a      	movs	r2, #58	; 0x3a
  404052:	47a0      	blx	r4
		 write_SCCB_76(0x59,0x88);
  404054:	2021      	movs	r0, #33	; 0x21
  404056:	2159      	movs	r1, #89	; 0x59
  404058:	2288      	movs	r2, #136	; 0x88
  40405a:	47a0      	blx	r4
		 write_SCCB_76(0x5a,0x88);
  40405c:	2021      	movs	r0, #33	; 0x21
  40405e:	215a      	movs	r1, #90	; 0x5a
  404060:	2288      	movs	r2, #136	; 0x88
  404062:	47a0      	blx	r4
		 write_SCCB_76(0x5b,0x44);
  404064:	2021      	movs	r0, #33	; 0x21
  404066:	215b      	movs	r1, #91	; 0x5b
  404068:	2244      	movs	r2, #68	; 0x44
  40406a:	47a0      	blx	r4
		 write_SCCB_76(0x5c,0x67);
  40406c:	2021      	movs	r0, #33	; 0x21
  40406e:	215c      	movs	r1, #92	; 0x5c
  404070:	2267      	movs	r2, #103	; 0x67
  404072:	47a0      	blx	r4
		 write_SCCB_76(0x5d,0x49);
  404074:	2021      	movs	r0, #33	; 0x21
  404076:	215d      	movs	r1, #93	; 0x5d
  404078:	2249      	movs	r2, #73	; 0x49
  40407a:	47a0      	blx	r4
		 write_SCCB_76(0x5e,0x0e);
  40407c:	2021      	movs	r0, #33	; 0x21
  40407e:	215e      	movs	r1, #94	; 0x5e
  404080:	220e      	movs	r2, #14
  404082:	47a0      	blx	r4
		 write_SCCB_76(0x64,0x04);
  404084:	2021      	movs	r0, #33	; 0x21
  404086:	2164      	movs	r1, #100	; 0x64
  404088:	2204      	movs	r2, #4
  40408a:	47a0      	blx	r4
		 write_SCCB_76(0x65,0x20);
  40408c:	2021      	movs	r0, #33	; 0x21
  40408e:	2165      	movs	r1, #101	; 0x65
  404090:	2220      	movs	r2, #32
  404092:	47a0      	blx	r4
		 write_SCCB_76(0x66,0x05);
  404094:	2021      	movs	r0, #33	; 0x21
  404096:	2166      	movs	r1, #102	; 0x66
  404098:	2205      	movs	r2, #5
  40409a:	47a0      	blx	r4
		 write_SCCB_76(0x94,0x04);
  40409c:	2021      	movs	r0, #33	; 0x21
  40409e:	2194      	movs	r1, #148	; 0x94
  4040a0:	2204      	movs	r2, #4
  4040a2:	47a0      	blx	r4
		 write_SCCB_76(0x95,0x08);
  4040a4:	2021      	movs	r0, #33	; 0x21
  4040a6:	2195      	movs	r1, #149	; 0x95
  4040a8:	2208      	movs	r2, #8
  4040aa:	e001      	b.n	4040b0 <SetupCameraYUVVGA_OV7670+0x338>
  4040ac:	00403a35 	.word	0x00403a35
  4040b0:	47a0      	blx	r4
		 write_SCCB_76(0x6c,0x0a);
  4040b2:	2021      	movs	r0, #33	; 0x21
  4040b4:	216c      	movs	r1, #108	; 0x6c
  4040b6:	220a      	movs	r2, #10
  4040b8:	47a0      	blx	r4
		 write_SCCB_76(0x6d,0x55);
  4040ba:	2021      	movs	r0, #33	; 0x21
  4040bc:	216d      	movs	r1, #109	; 0x6d
  4040be:	2255      	movs	r2, #85	; 0x55
  4040c0:	47a0      	blx	r4
		 write_SCCB_76(0x6e,0x11);
  4040c2:	2021      	movs	r0, #33	; 0x21
  4040c4:	216e      	movs	r1, #110	; 0x6e
  4040c6:	2211      	movs	r2, #17
  4040c8:	47a0      	blx	r4
		 write_SCCB_76(0x6f,0x9e);
  4040ca:	2021      	movs	r0, #33	; 0x21
  4040cc:	216f      	movs	r1, #111	; 0x6f
  4040ce:	229e      	movs	r2, #158	; 0x9e
  4040d0:	47a0      	blx	r4
		 write_SCCB_76(0x6a,0x40);
  4040d2:	2021      	movs	r0, #33	; 0x21
  4040d4:	216a      	movs	r1, #106	; 0x6a
  4040d6:	2240      	movs	r2, #64	; 0x40
  4040d8:	47a0      	blx	r4
		 write_SCCB_76(0x01,0x20);
  4040da:	2021      	movs	r0, #33	; 0x21
  4040dc:	2101      	movs	r1, #1
  4040de:	2220      	movs	r2, #32
  4040e0:	47a0      	blx	r4
		 write_SCCB_76(0x02,0x20);
  4040e2:	2021      	movs	r0, #33	; 0x21
  4040e4:	2102      	movs	r1, #2
  4040e6:	2220      	movs	r2, #32
  4040e8:	47a0      	blx	r4
		 write_SCCB_76(0x13,0xe7);
  4040ea:	2021      	movs	r0, #33	; 0x21
  4040ec:	2113      	movs	r1, #19
  4040ee:	22e7      	movs	r2, #231	; 0xe7
  4040f0:	47a0      	blx	r4
		 write_SCCB_76(0x4f,0x80);
  4040f2:	2021      	movs	r0, #33	; 0x21
  4040f4:	214f      	movs	r1, #79	; 0x4f
  4040f6:	2280      	movs	r2, #128	; 0x80
  4040f8:	47a0      	blx	r4
		 write_SCCB_76(0x50,0x80);
  4040fa:	2021      	movs	r0, #33	; 0x21
  4040fc:	2150      	movs	r1, #80	; 0x50
  4040fe:	2280      	movs	r2, #128	; 0x80
  404100:	47a0      	blx	r4
		 write_SCCB_76(0x51,0x00);
  404102:	2021      	movs	r0, #33	; 0x21
  404104:	2151      	movs	r1, #81	; 0x51
  404106:	2200      	movs	r2, #0
  404108:	47a0      	blx	r4
		 write_SCCB_76(0x52,0x22);
  40410a:	2021      	movs	r0, #33	; 0x21
  40410c:	2152      	movs	r1, #82	; 0x52
  40410e:	2222      	movs	r2, #34	; 0x22
  404110:	47a0      	blx	r4
		 write_SCCB_76(0x53,0x5e);
  404112:	2021      	movs	r0, #33	; 0x21
  404114:	2153      	movs	r1, #83	; 0x53
  404116:	225e      	movs	r2, #94	; 0x5e
  404118:	47a0      	blx	r4
		 write_SCCB_76(0x54,0x80);
  40411a:	2021      	movs	r0, #33	; 0x21
  40411c:	2154      	movs	r1, #84	; 0x54
  40411e:	2280      	movs	r2, #128	; 0x80
  404120:	47a0      	blx	r4
		 write_SCCB_76(0x58,0x9e);
  404122:	2021      	movs	r0, #33	; 0x21
  404124:	2158      	movs	r1, #88	; 0x58
  404126:	229e      	movs	r2, #158	; 0x9e
  404128:	47a0      	blx	r4
		 write_SCCB_76(0x41,0x08);
  40412a:	2021      	movs	r0, #33	; 0x21
  40412c:	2141      	movs	r1, #65	; 0x41
  40412e:	2208      	movs	r2, #8
  404130:	47a0      	blx	r4
		 write_SCCB_76(0x3f,0x00);
  404132:	2021      	movs	r0, #33	; 0x21
  404134:	213f      	movs	r1, #63	; 0x3f
  404136:	2200      	movs	r2, #0
  404138:	47a0      	blx	r4
		 write_SCCB_76(0x75,0x03);
  40413a:	2021      	movs	r0, #33	; 0x21
  40413c:	2175      	movs	r1, #117	; 0x75
  40413e:	2203      	movs	r2, #3
  404140:	47a0      	blx	r4
		 write_SCCB_76(0x76,0xe1);
  404142:	2021      	movs	r0, #33	; 0x21
  404144:	2176      	movs	r1, #118	; 0x76
  404146:	22e1      	movs	r2, #225	; 0xe1
  404148:	47a0      	blx	r4
		 write_SCCB_76(0x4c,0x00);
  40414a:	2021      	movs	r0, #33	; 0x21
  40414c:	214c      	movs	r1, #76	; 0x4c
  40414e:	2200      	movs	r2, #0
  404150:	47a0      	blx	r4
		 write_SCCB_76(0x77,0x00);
  404152:	2021      	movs	r0, #33	; 0x21
  404154:	2177      	movs	r1, #119	; 0x77
  404156:	2200      	movs	r2, #0
  404158:	47a0      	blx	r4
		 write_SCCB_76(0x3d,0x00);
  40415a:	2021      	movs	r0, #33	; 0x21
  40415c:	213d      	movs	r1, #61	; 0x3d
  40415e:	2200      	movs	r2, #0
  404160:	47a0      	blx	r4
		 write_SCCB_76(0x4b,0x09);
  404162:	2021      	movs	r0, #33	; 0x21
  404164:	214b      	movs	r1, #75	; 0x4b
  404166:	2209      	movs	r2, #9
  404168:	47a0      	blx	r4
		 write_SCCB_76(0xc9,0x60);
  40416a:	2021      	movs	r0, #33	; 0x21
  40416c:	21c9      	movs	r1, #201	; 0xc9
  40416e:	2260      	movs	r2, #96	; 0x60
  404170:	47a0      	blx	r4
		 write_SCCB_76(0x41,0x38);
  404172:	2021      	movs	r0, #33	; 0x21
  404174:	2141      	movs	r1, #65	; 0x41
  404176:	2238      	movs	r2, #56	; 0x38
  404178:	47a0      	blx	r4
		 write_SCCB_76(0x56,0x40);
  40417a:	2021      	movs	r0, #33	; 0x21
  40417c:	2156      	movs	r1, #86	; 0x56
  40417e:	2240      	movs	r2, #64	; 0x40
  404180:	47a0      	blx	r4
		 write_SCCB_76(0x34,0x11);
  404182:	2021      	movs	r0, #33	; 0x21
  404184:	2134      	movs	r1, #52	; 0x34
  404186:	2211      	movs	r2, #17
  404188:	47a0      	blx	r4
		 write_SCCB_76(0x3b,0x0a);
  40418a:	2021      	movs	r0, #33	; 0x21
  40418c:	213b      	movs	r1, #59	; 0x3b
  40418e:	220a      	movs	r2, #10
  404190:	47a0      	blx	r4
		 write_SCCB_76(0xa4,0x88);
  404192:	2021      	movs	r0, #33	; 0x21
  404194:	21a4      	movs	r1, #164	; 0xa4
  404196:	2288      	movs	r2, #136	; 0x88
  404198:	47a0      	blx	r4
		 write_SCCB_76(0x96,0x00);
  40419a:	2021      	movs	r0, #33	; 0x21
  40419c:	2196      	movs	r1, #150	; 0x96
  40419e:	2200      	movs	r2, #0
  4041a0:	47a0      	blx	r4
		 write_SCCB_76(0x97,0x30);
  4041a2:	2021      	movs	r0, #33	; 0x21
  4041a4:	2197      	movs	r1, #151	; 0x97
  4041a6:	2230      	movs	r2, #48	; 0x30
  4041a8:	47a0      	blx	r4
		 write_SCCB_76(0x98,0x20);
  4041aa:	2021      	movs	r0, #33	; 0x21
  4041ac:	2198      	movs	r1, #152	; 0x98
  4041ae:	2220      	movs	r2, #32
  4041b0:	47a0      	blx	r4
		 write_SCCB_76(0x99,0x30);
  4041b2:	2021      	movs	r0, #33	; 0x21
  4041b4:	2199      	movs	r1, #153	; 0x99
  4041b6:	2230      	movs	r2, #48	; 0x30
  4041b8:	47a0      	blx	r4
		 write_SCCB_76(0x9a,0x84);
  4041ba:	2021      	movs	r0, #33	; 0x21
  4041bc:	219a      	movs	r1, #154	; 0x9a
  4041be:	2284      	movs	r2, #132	; 0x84
  4041c0:	47a0      	blx	r4
		 write_SCCB_76(0x9b,0x29);
  4041c2:	2021      	movs	r0, #33	; 0x21
  4041c4:	219b      	movs	r1, #155	; 0x9b
  4041c6:	2229      	movs	r2, #41	; 0x29
  4041c8:	47a0      	blx	r4
		 write_SCCB_76(0x9c,0x03);
  4041ca:	2021      	movs	r0, #33	; 0x21
  4041cc:	219c      	movs	r1, #156	; 0x9c
  4041ce:	2203      	movs	r2, #3
  4041d0:	47a0      	blx	r4
		 write_SCCB_76(0x9d,0x98);
  4041d2:	2021      	movs	r0, #33	; 0x21
  4041d4:	219d      	movs	r1, #157	; 0x9d
  4041d6:	2298      	movs	r2, #152	; 0x98
  4041d8:	47a0      	blx	r4
		 write_SCCB_76(0x9e,0x3f);
  4041da:	2021      	movs	r0, #33	; 0x21
  4041dc:	219e      	movs	r1, #158	; 0x9e
  4041de:	223f      	movs	r2, #63	; 0x3f
  4041e0:	47a0      	blx	r4
		 write_SCCB_76(0x78,0x04);
  4041e2:	2021      	movs	r0, #33	; 0x21
  4041e4:	2178      	movs	r1, #120	; 0x78
  4041e6:	2204      	movs	r2, #4
  4041e8:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x01);
  4041ea:	2021      	movs	r0, #33	; 0x21
  4041ec:	2179      	movs	r1, #121	; 0x79
  4041ee:	2201      	movs	r2, #1
  4041f0:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0xf0);
  4041f2:	2021      	movs	r0, #33	; 0x21
  4041f4:	21c8      	movs	r1, #200	; 0xc8
  4041f6:	22f0      	movs	r2, #240	; 0xf0
  4041f8:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x0f);
  4041fa:	2021      	movs	r0, #33	; 0x21
  4041fc:	2179      	movs	r1, #121	; 0x79
  4041fe:	220f      	movs	r2, #15
  404200:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x00);
  404202:	2021      	movs	r0, #33	; 0x21
  404204:	21c8      	movs	r1, #200	; 0xc8
  404206:	2200      	movs	r2, #0
  404208:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x10);
  40420a:	2021      	movs	r0, #33	; 0x21
  40420c:	2179      	movs	r1, #121	; 0x79
  40420e:	2210      	movs	r2, #16
  404210:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x7e);
  404212:	2021      	movs	r0, #33	; 0x21
  404214:	21c8      	movs	r1, #200	; 0xc8
  404216:	227e      	movs	r2, #126	; 0x7e
  404218:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x0a);
  40421a:	2021      	movs	r0, #33	; 0x21
  40421c:	2179      	movs	r1, #121	; 0x79
  40421e:	220a      	movs	r2, #10
  404220:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x80);
  404222:	2021      	movs	r0, #33	; 0x21
  404224:	21c8      	movs	r1, #200	; 0xc8
  404226:	2280      	movs	r2, #128	; 0x80
  404228:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x0b);
  40422a:	2021      	movs	r0, #33	; 0x21
  40422c:	2179      	movs	r1, #121	; 0x79
  40422e:	220b      	movs	r2, #11
  404230:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x01);
  404232:	2021      	movs	r0, #33	; 0x21
  404234:	21c8      	movs	r1, #200	; 0xc8
  404236:	2201      	movs	r2, #1
  404238:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x0c);
  40423a:	2021      	movs	r0, #33	; 0x21
  40423c:	2179      	movs	r1, #121	; 0x79
  40423e:	220c      	movs	r2, #12
  404240:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x0f);
  404242:	2021      	movs	r0, #33	; 0x21
  404244:	21c8      	movs	r1, #200	; 0xc8
  404246:	220f      	movs	r2, #15
  404248:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x0d);
  40424a:	2021      	movs	r0, #33	; 0x21
  40424c:	2179      	movs	r1, #121	; 0x79
  40424e:	220d      	movs	r2, #13
  404250:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x20);
  404252:	2021      	movs	r0, #33	; 0x21
  404254:	21c8      	movs	r1, #200	; 0xc8
  404256:	2220      	movs	r2, #32
  404258:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x09);
  40425a:	2021      	movs	r0, #33	; 0x21
  40425c:	2179      	movs	r1, #121	; 0x79
  40425e:	2209      	movs	r2, #9
  404260:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x80);
  404262:	2021      	movs	r0, #33	; 0x21
  404264:	21c8      	movs	r1, #200	; 0xc8
  404266:	2280      	movs	r2, #128	; 0x80
  404268:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x02);
  40426a:	2021      	movs	r0, #33	; 0x21
  40426c:	2179      	movs	r1, #121	; 0x79
  40426e:	2202      	movs	r2, #2
  404270:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0xc0);
  404272:	2021      	movs	r0, #33	; 0x21
  404274:	21c8      	movs	r1, #200	; 0xc8
  404276:	22c0      	movs	r2, #192	; 0xc0
  404278:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x03);
  40427a:	2021      	movs	r0, #33	; 0x21
  40427c:	2179      	movs	r1, #121	; 0x79
  40427e:	2203      	movs	r2, #3
  404280:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x40);
  404282:	2021      	movs	r0, #33	; 0x21
  404284:	21c8      	movs	r1, #200	; 0xc8
  404286:	2240      	movs	r2, #64	; 0x40
  404288:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x05);
  40428a:	2021      	movs	r0, #33	; 0x21
  40428c:	2179      	movs	r1, #121	; 0x79
  40428e:	2205      	movs	r2, #5
  404290:	47a0      	blx	r4
		 write_SCCB_76(0xc8,0x30);
  404292:	2021      	movs	r0, #33	; 0x21
  404294:	21c8      	movs	r1, #200	; 0xc8
  404296:	2230      	movs	r2, #48	; 0x30
  404298:	47a0      	blx	r4
		 write_SCCB_76(0x79,0x26);
  40429a:	2021      	movs	r0, #33	; 0x21
  40429c:	2179      	movs	r1, #121	; 0x79
  40429e:	2226      	movs	r2, #38	; 0x26
  4042a0:	47a0      	blx	r4
		 write_SCCB_76(0x2d,0x00);
  4042a2:	2021      	movs	r0, #33	; 0x21
  4042a4:	212d      	movs	r1, #45	; 0x2d
  4042a6:	2200      	movs	r2, #0
  4042a8:	47a0      	blx	r4
		 write_SCCB_76(0x2e,0x00);
  4042aa:	2021      	movs	r0, #33	; 0x21
  4042ac:	212e      	movs	r1, #46	; 0x2e
  4042ae:	2200      	movs	r2, #0
  4042b0:	47a0      	blx	r4
		 write_SCCB_76(0x2e,0x00);
  4042b2:	2021      	movs	r0, #33	; 0x21
  4042b4:	212e      	movs	r1, #46	; 0x2e
  4042b6:	2200      	movs	r2, #0
  4042b8:	47a0      	blx	r4
		 write_SCCB_76(0x1b,0x00);
  4042ba:	2021      	movs	r0, #33	; 0x21
  4042bc:	211b      	movs	r1, #27
  4042be:	2200      	movs	r2, #0
  4042c0:	47a0      	blx	r4
		 write_SCCB_76(0x15,1<<3|1<<1);
  4042c2:	2021      	movs	r0, #33	; 0x21
  4042c4:	2115      	movs	r1, #21
  4042c6:	220a      	movs	r2, #10
  4042c8:	47a0      	blx	r4
  4042ca:	bd10      	pop	{r4, pc}
  4042cc:	0000      	movs	r0, r0
	...

004042d0 <getBatVoltage>:
	};
	for(int i = 0;  ov7_settings[i][0] != 0xff;i++ ) write_SCCB(ov7_settings[i][0],ov7_settings[i][1]);
	*/
		 }

float getBatVoltage() {
  4042d0:	b538      	push	{r3, r4, r5, lr}
  4042d2:	4b19      	ldr	r3, [pc, #100]	; (404338 <getBatVoltage+0x68>)
  4042d4:	2201      	movs	r2, #1
  4042d6:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  4042d8:	2202      	movs	r2, #2
  4042da:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4042dc:	461a      	mov	r2, r3
  4042de:	6b13      	ldr	r3, [r2, #48]	; 0x30
	afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
	afec_start_software_conversion(AFEC1);
					
	while(!(afec_get_interrupt_status(AFEC1) & (1<<AFEC_CHANNEL_0)));
  4042e0:	f013 0f01 	tst.w	r3, #1
  4042e4:	d0fb      	beq.n	4042de <getBatVoltage+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4042e6:	4b14      	ldr	r3, [pc, #80]	; (404338 <getBatVoltage+0x68>)
  4042e8:	2200      	movs	r2, #0
  4042ea:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4042ec:	6e98      	ldr	r0, [r3, #104]	; 0x68

	uint16_t convRes = afec_channel_get_value(AFEC1,AFEC_CHANNEL_0) - 0x7f0;
  4042ee:	f5a0 60fe 	sub.w	r0, r0, #2032	; 0x7f0
	return (3.3*convRes/4095.00)*((140.00+960.00)/105.00);
  4042f2:	b280      	uxth	r0, r0
  4042f4:	4b11      	ldr	r3, [pc, #68]	; (40433c <getBatVoltage+0x6c>)
  4042f6:	4798      	blx	r3
  4042f8:	4c11      	ldr	r4, [pc, #68]	; (404340 <getBatVoltage+0x70>)
  4042fa:	a309      	add	r3, pc, #36	; (adr r3, 404320 <getBatVoltage+0x50>)
  4042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404300:	47a0      	blx	r4
  404302:	a309      	add	r3, pc, #36	; (adr r3, 404328 <getBatVoltage+0x58>)
  404304:	e9d3 2300 	ldrd	r2, r3, [r3]
  404308:	4d0e      	ldr	r5, [pc, #56]	; (404344 <getBatVoltage+0x74>)
  40430a:	47a8      	blx	r5
  40430c:	a308      	add	r3, pc, #32	; (adr r3, 404330 <getBatVoltage+0x60>)
  40430e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404312:	47a0      	blx	r4
  404314:	4b0c      	ldr	r3, [pc, #48]	; (404348 <getBatVoltage+0x78>)
  404316:	4798      	blx	r3
}
  404318:	bd38      	pop	{r3, r4, r5, pc}
  40431a:	bf00      	nop
  40431c:	f3af 8000 	nop.w
  404320:	66666666 	.word	0x66666666
  404324:	400a6666 	.word	0x400a6666
  404328:	00000000 	.word	0x00000000
  40432c:	40affe00 	.word	0x40affe00
  404330:	3cf3cf3d 	.word	0x3cf3cf3d
  404334:	4024f3cf 	.word	0x4024f3cf
  404338:	40064000 	.word	0x40064000
  40433c:	004086cd 	.word	0x004086cd
  404340:	00408799 	.word	0x00408799
  404344:	004089ed 	.word	0x004089ed
  404348:	00408d1d 	.word	0x00408d1d

0040434c <dumpFrame>:

void dumpFrame(int dumpLoc) {
  40434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40434e:	4607      	mov	r7, r0
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  404350:	4a10      	ldr	r2, [pc, #64]	; (404394 <dumpFrame+0x48>)
  404352:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  404354:	f043 0301 	orr.w	r3, r3, #1
  404358:	63d3      	str	r3, [r2, #60]	; 0x3c
		isi_dma_channel_disable(ISI,1);
		sendDebugString("IMG:");
  40435a:	480f      	ldr	r0, [pc, #60]	; (404398 <dumpFrame+0x4c>)
  40435c:	4b0f      	ldr	r3, [pc, #60]	; (40439c <dumpFrame+0x50>)
  40435e:	4798      	blx	r3
  404360:	463e      	mov	r6, r7
  404362:	f507 3716 	add.w	r7, r7, #153600	; 0x25800
		volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
		for(int i=0;i<320*240*2;i++){
			while(!uart_is_tx_ready(UART4));
  404366:	4d0e      	ldr	r5, [pc, #56]	; (4043a0 <dumpFrame+0x54>)
  404368:	4c0e      	ldr	r4, [pc, #56]	; (4043a4 <dumpFrame+0x58>)
  40436a:	4620      	mov	r0, r4
  40436c:	47a8      	blx	r5
  40436e:	2800      	cmp	r0, #0
  404370:	d0fb      	beq.n	40436a <dumpFrame+0x1e>
			uart_write(UART4,imgData[i]);
  404372:	f816 1b01 	ldrb.w	r1, [r6], #1
  404376:	4620      	mov	r0, r4
  404378:	4b0b      	ldr	r3, [pc, #44]	; (4043a8 <dumpFrame+0x5c>)
  40437a:	4798      	blx	r3

void dumpFrame(int dumpLoc) {
		isi_dma_channel_disable(ISI,1);
		sendDebugString("IMG:");
		volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
		for(int i=0;i<320*240*2;i++){
  40437c:	42be      	cmp	r6, r7
  40437e:	d1f4      	bne.n	40436a <dumpFrame+0x1e>
			while(!uart_is_tx_ready(UART4));
			uart_write(UART4,imgData[i]);
		}
		sendDebugString(":ENDIMG\n");
  404380:	480a      	ldr	r0, [pc, #40]	; (4043ac <dumpFrame+0x60>)
  404382:	4b06      	ldr	r3, [pc, #24]	; (40439c <dumpFrame+0x50>)
  404384:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  404386:	4a03      	ldr	r2, [pc, #12]	; (404394 <dumpFrame+0x48>)
  404388:	6b93      	ldr	r3, [r2, #56]	; 0x38
  40438a:	f043 0301 	orr.w	r3, r3, #1
  40438e:	6393      	str	r3, [r2, #56]	; 0x38
  404390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404392:	bf00      	nop
  404394:	4004c000 	.word	0x4004c000
  404398:	0040f568 	.word	0x0040f568
  40439c:	0040019d 	.word	0x0040019d
  4043a0:	00402d51 	.word	0x00402d51
  4043a4:	400e1e00 	.word	0x400e1e00
  4043a8:	00402d5d 	.word	0x00402d5d
  4043ac:	0040f570 	.word	0x0040f570

004043b0 <calcRotation>:
		isi_dma_channel_enable(ISI,1);
		//memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);	
}

XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
  4043b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  4043b4:	ed2d 8b06 	vpush	{d8-d10}
  4043b8:	b08a      	sub	sp, #40	; 0x28
  4043ba:	4604      	mov	r4, r0
  4043bc:	ee09 3a10 	vmov	s18, r3
  4043c0:	eddd 9a18 	vldr	s19, [sp, #96]	; 0x60
  4043c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4043c8:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
	inX = inX - cenX;
	inZ = inZ - cenZ;
  4043cc:	ee07 2a90 	vmov	s15, r2
  4043d0:	ee37 8ae9 	vsub.f32	s16, s15, s19
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  4043d4:	ee07 1a90 	vmov	s15, r1
  4043d8:	ee77 7ac9 	vsub.f32	s15, s15, s18
  4043dc:	ee17 0a90 	vmov	r0, s15
  4043e0:	4b72      	ldr	r3, [pc, #456]	; (4045ac <calcRotation+0x1fc>)
  4043e2:	4798      	blx	r3
  4043e4:	e9cd 0100 	strd	r0, r1, [sp]
  4043e8:	f1b8 0f01 	cmp.w	r8, #1
  4043ec:	f040 808a 	bne.w	404504 <calcRotation+0x154>
  4043f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4043f2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
  4043f6:	4d6d      	ldr	r5, [pc, #436]	; (4045ac <calcRotation+0x1fc>)
  4043f8:	4658      	mov	r0, fp
  4043fa:	47a8      	blx	r5
  4043fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404400:	4e6b      	ldr	r6, [pc, #428]	; (4045b0 <calcRotation+0x200>)
  404402:	47b0      	blx	r6
  404404:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404408:	ee18 0a10 	vmov	r0, s16
  40440c:	47a8      	blx	r5
  40440e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404416:	4f67      	ldr	r7, [pc, #412]	; (4045b4 <calcRotation+0x204>)
  404418:	47b8      	blx	r7
  40441a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  40441e:	4658      	mov	r0, fp
  404420:	47a8      	blx	r5
  404422:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404426:	47b8      	blx	r7
  404428:	4682      	mov	sl, r0
  40442a:	468b      	mov	fp, r1
  40442c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404430:	47b0      	blx	r6
  404432:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404436:	4d60      	ldr	r5, [pc, #384]	; (4045b8 <calcRotation+0x208>)
  404438:	e9dd 0100 	ldrd	r0, r1, [sp]
  40443c:	4652      	mov	r2, sl
  40443e:	465b      	mov	r3, fp
  404440:	47a8      	blx	r5
  404442:	4606      	mov	r6, r0
  404444:	460f      	mov	r7, r1
  404446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40444a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40444e:	47a8      	blx	r5
  404450:	4602      	mov	r2, r0
  404452:	460b      	mov	r3, r1
  404454:	4630      	mov	r0, r6
  404456:	4639      	mov	r1, r7
  404458:	4e58      	ldr	r6, [pc, #352]	; (4045bc <calcRotation+0x20c>)
  40445a:	47b0      	blx	r6
  40445c:	4e58      	ldr	r6, [pc, #352]	; (4045c0 <calcRotation+0x210>)
  40445e:	47b0      	blx	r6
  404460:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  404464:	e9dd 0100 	ldrd	r0, r1, [sp]
  404468:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40446c:	47a8      	blx	r5
  40446e:	4682      	mov	sl, r0
  404470:	468b      	mov	fp, r1
  404472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40447a:	47a8      	blx	r5
  40447c:	4602      	mov	r2, r0
  40447e:	460b      	mov	r3, r1
  404480:	4650      	mov	r0, sl
  404482:	4659      	mov	r1, fp
  404484:	4d4f      	ldr	r5, [pc, #316]	; (4045c4 <calcRotation+0x214>)
  404486:	47a8      	blx	r5
  404488:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  40448a:	ee07 0a90 	vmov	s15, r0
  40448e:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  404492:	f1b8 0f01 	cmp.w	r8, #1
  404496:	d17f      	bne.n	404598 <calcRotation+0x1e8>
  404498:	eeb5 aa40 	vcmp.f32	s20, #0.0
  40449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4044a0:	d118      	bne.n	4044d4 <calcRotation+0x124>
  4044a2:	e079      	b.n	404598 <calcRotation+0x1e8>
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  4044a4:	eefd 7aca 	vcvt.s32.f32	s15, s20
  4044a8:	ee17 3a90 	vmov	r3, s15
  4044ac:	2b00      	cmp	r3, #0
  4044ae:	bfb8      	it	lt
  4044b0:	425b      	neglt	r3, r3
  4044b2:	f1c3 0301 	rsb	r3, r3, #1
  4044b6:	ee07 3a90 	vmov	s15, r3
  4044ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4044be:	ee68 8aa7 	vmul.f32	s17, s17, s15
  4044c2:	ee78 7a29 	vadd.f32	s15, s16, s19
  4044c6:	ee27 8a8a 	vmul.f32	s16, s15, s20
  4044ca:	ee38 8a88 	vadd.f32	s16, s17, s16
  4044ce:	ee78 8a29 	vadd.f32	s17, s16, s19
  4044d2:	e061      	b.n	404598 <calcRotation+0x1e8>
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  4044d4:	eefd 7aca 	vcvt.s32.f32	s15, s20
  4044d8:	ee17 3a90 	vmov	r3, s15
  4044dc:	2b00      	cmp	r3, #0
  4044de:	bfb8      	it	lt
  4044e0:	425b      	neglt	r3, r3
  4044e2:	f1c3 0301 	rsb	r3, r3, #1
  4044e6:	ee07 3a90 	vmov	s15, r3
  4044ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4044ee:	ee67 7aa8 	vmul.f32	s15, s15, s17
  4044f2:	ee38 8a29 	vadd.f32	s16, s16, s19
  4044f6:	ee28 8a0a 	vmul.f32	s16, s16, s20
  4044fa:	ee37 8ac8 	vsub.f32	s16, s15, s16
  4044fe:	ee78 8a29 	vadd.f32	s17, s16, s19
  404502:	e049      	b.n	404598 <calcRotation+0x1e8>
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  404504:	4d29      	ldr	r5, [pc, #164]	; (4045ac <calcRotation+0x1fc>)
  404506:	9819      	ldr	r0, [sp, #100]	; 0x64
  404508:	47a8      	blx	r5
  40450a:	4606      	mov	r6, r0
  40450c:	460f      	mov	r7, r1
  40450e:	4b28      	ldr	r3, [pc, #160]	; (4045b0 <calcRotation+0x200>)
  404510:	4798      	blx	r3
  404512:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404516:	ee18 0a10 	vmov	r0, s16
  40451a:	47a8      	blx	r5
  40451c:	4682      	mov	sl, r0
  40451e:	468b      	mov	fp, r1
  404520:	4630      	mov	r0, r6
  404522:	4639      	mov	r1, r7
  404524:	4b23      	ldr	r3, [pc, #140]	; (4045b4 <calcRotation+0x204>)
  404526:	4798      	blx	r3
  404528:	4602      	mov	r2, r0
  40452a:	460b      	mov	r3, r1
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  40452c:	4d22      	ldr	r5, [pc, #136]	; (4045b8 <calcRotation+0x208>)
  40452e:	e9dd 0100 	ldrd	r0, r1, [sp]
  404532:	e9cd 2304 	strd	r2, r3, [sp, #16]
  404536:	47a8      	blx	r5
  404538:	4606      	mov	r6, r0
  40453a:	460f      	mov	r7, r1
  40453c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404540:	4652      	mov	r2, sl
  404542:	465b      	mov	r3, fp
  404544:	47a8      	blx	r5
  404546:	4602      	mov	r2, r0
  404548:	460b      	mov	r3, r1
  40454a:	4630      	mov	r0, r6
  40454c:	4639      	mov	r1, r7
  40454e:	4e1b      	ldr	r6, [pc, #108]	; (4045bc <calcRotation+0x20c>)
  404550:	47b0      	blx	r6
  404552:	4e1b      	ldr	r6, [pc, #108]	; (4045c0 <calcRotation+0x210>)
  404554:	47b0      	blx	r6
  404556:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  40455a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40455e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404562:	47a8      	blx	r5
  404564:	e9cd 0100 	strd	r0, r1, [sp]
  404568:	4650      	mov	r0, sl
  40456a:	4659      	mov	r1, fp
  40456c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404570:	47a8      	blx	r5
  404572:	4602      	mov	r2, r0
  404574:	460b      	mov	r3, r1
  404576:	e9dd 0100 	ldrd	r0, r1, [sp]
  40457a:	4d12      	ldr	r5, [pc, #72]	; (4045c4 <calcRotation+0x214>)
  40457c:	47a8      	blx	r5
  40457e:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  404580:	ee07 0a90 	vmov	s15, r0
  404584:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside ==0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  404588:	f1b8 0f00 	cmp.w	r8, #0
  40458c:	d104      	bne.n	404598 <calcRotation+0x1e8>
  40458e:	eeb5 aa40 	vcmp.f32	s20, #0.0
  404592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404596:	d185      	bne.n	4044a4 <calcRotation+0xf4>
	if(opside ==1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
	return out;
  404598:	ed84 9a00 	vstr	s18, [r4]
  40459c:	edc4 8a01 	vstr	s17, [r4, #4]
}
  4045a0:	4620      	mov	r0, r4
  4045a2:	b00a      	add	sp, #40	; 0x28
  4045a4:	ecbd 8b06 	vpop	{d8-d10}
  4045a8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  4045ac:	004086f1 	.word	0x004086f1
  4045b0:	00405f09 	.word	0x00405f09
  4045b4:	00405f91 	.word	0x00405f91
  4045b8:	00408799 	.word	0x00408799
  4045bc:	00408435 	.word	0x00408435
  4045c0:	00408d1d 	.word	0x00408d1d
  4045c4:	00408431 	.word	0x00408431

004045c8 <legAngCalc>:
int sign(float in) {
	if(in<0) return -1;
	else return 1;
}

angles legAngCalc(float x, float y, float z) {
  4045c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045cc:	ed2d 8b06 	vpush	{d8-d10}
  4045d0:	b085      	sub	sp, #20
  4045d2:	4605      	mov	r5, r0
  4045d4:	ee09 1a10 	vmov	s18, r1
  4045d8:	ee0a 2a10 	vmov	s20, r2
  4045dc:	ee08 3a90 	vmov	s17, r3
	float G = sqrt(x*x + z*z);
  4045e0:	ee69 7a09 	vmul.f32	s15, s18, s18
  4045e4:	ee28 8aa8 	vmul.f32	s16, s17, s17
  4045e8:	ee37 8a88 	vadd.f32	s16, s15, s16
  4045ec:	4c5a      	ldr	r4, [pc, #360]	; (404758 <legAngCalc+0x190>)
  4045ee:	ee18 0a10 	vmov	r0, s16
  4045f2:	47a0      	blx	r4
  4045f4:	4e59      	ldr	r6, [pc, #356]	; (40475c <legAngCalc+0x194>)
  4045f6:	47b0      	blx	r6
  4045f8:	4f59      	ldr	r7, [pc, #356]	; (404760 <legAngCalc+0x198>)
  4045fa:	47b8      	blx	r7
  4045fc:	ee09 0a90 	vmov	s19, r0
	float H = sqrt(y*y+G*G);
  404600:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  404604:	ee29 8aa9 	vmul.f32	s16, s19, s19
  404608:	ee37 8a88 	vadd.f32	s16, s15, s16
  40460c:	ee18 0a10 	vmov	r0, s16
  404610:	47a0      	blx	r4
  404612:	47b0      	blx	r6
  404614:	47b8      	blx	r7
  404616:	ee08 0a10 	vmov	s16, r0
	float b = acos((A*A + H*H - B*B)/(2*A*H));
  40461a:	ee68 aa08 	vmul.f32	s21, s16, s16
  40461e:	eddf 7a51 	vldr	s15, [pc, #324]	; 404764 <legAngCalc+0x19c>
  404622:	ee7a 7aa7 	vadd.f32	s15, s21, s15
  404626:	ed9f 7a50 	vldr	s14, [pc, #320]	; 404768 <legAngCalc+0x1a0>
  40462a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40462e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 40476c <legAngCalc+0x1a4>
  404632:	ee28 7a07 	vmul.f32	s14, s16, s14
  404636:	eec7 7a87 	vdiv.f32	s15, s15, s14
  40463a:	ee17 0a90 	vmov	r0, s15
  40463e:	47a0      	blx	r4
  404640:	4b4b      	ldr	r3, [pc, #300]	; (404770 <legAngCalc+0x1a8>)
  404642:	4798      	blx	r3
  404644:	47b8      	blx	r7
	
	float h = asin(H*(sin(b))/B);
  404646:	47a0      	blx	r4
  404648:	4682      	mov	sl, r0
  40464a:	468b      	mov	fp, r1
  40464c:	4b49      	ldr	r3, [pc, #292]	; (404774 <legAngCalc+0x1ac>)
  40464e:	4798      	blx	r3
  404650:	4680      	mov	r8, r0
  404652:	4689      	mov	r9, r1
  404654:	ee18 0a10 	vmov	r0, s16
  404658:	47a0      	blx	r4
  40465a:	4642      	mov	r2, r8
  40465c:	464b      	mov	r3, r9
  40465e:	4c46      	ldr	r4, [pc, #280]	; (404778 <legAngCalc+0x1b0>)
  404660:	47a0      	blx	r4
  404662:	2200      	movs	r2, #0
  404664:	4b45      	ldr	r3, [pc, #276]	; (40477c <legAngCalc+0x1b4>)
  404666:	4c46      	ldr	r4, [pc, #280]	; (404780 <legAngCalc+0x1b8>)
  404668:	47a0      	blx	r4
  40466a:	4b46      	ldr	r3, [pc, #280]	; (404784 <legAngCalc+0x1bc>)
  40466c:	4798      	blx	r3
  40466e:	47b8      	blx	r7
  404670:	4680      	mov	r8, r0
	
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
  404672:	eddf 7a45 	vldr	s15, [pc, #276]	; 404788 <legAngCalc+0x1c0>
  404676:	eef4 aae7 	vcmpe.f32	s21, s15
  40467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40467e:	da0a      	bge.n	404696 <legAngCalc+0xce>
	else Ang.S3 = (M_PI)-h;
  404680:	4b35      	ldr	r3, [pc, #212]	; (404758 <legAngCalc+0x190>)
  404682:	4798      	blx	r3
  404684:	4602      	mov	r2, r0
  404686:	460b      	mov	r3, r1
  404688:	a131      	add	r1, pc, #196	; (adr r1, 404750 <legAngCalc+0x188>)
  40468a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40468e:	4c3f      	ldr	r4, [pc, #252]	; (40478c <legAngCalc+0x1c4>)
  404690:	47a0      	blx	r4
  404692:	47b8      	blx	r7
  404694:	4680      	mov	r8, r0
	Ang.S2 = (atan2(y,G))+b;
  404696:	4c30      	ldr	r4, [pc, #192]	; (404758 <legAngCalc+0x190>)
  404698:	ee1a 0a10 	vmov	r0, s20
  40469c:	47a0      	blx	r4
  40469e:	4606      	mov	r6, r0
  4046a0:	460f      	mov	r7, r1
  4046a2:	ee19 0a90 	vmov	r0, s19
  4046a6:	47a0      	blx	r4
  4046a8:	4602      	mov	r2, r0
  4046aa:	460b      	mov	r3, r1
  4046ac:	4630      	mov	r0, r6
  4046ae:	4639      	mov	r1, r7
  4046b0:	4e37      	ldr	r6, [pc, #220]	; (404790 <legAngCalc+0x1c8>)
  4046b2:	47b0      	blx	r6
  4046b4:	e9cd 0100 	strd	r0, r1, [sp]
	Ang.S1 = atan2(x,z);
  4046b8:	ee19 0a10 	vmov	r0, s18
  4046bc:	47a0      	blx	r4
  4046be:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4046c2:	ee18 0a90 	vmov	r0, s17
  4046c6:	47a0      	blx	r4
  4046c8:	4602      	mov	r2, r0
  4046ca:	460b      	mov	r3, r1
  4046cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4046d0:	47b0      	blx	r6
  4046d2:	4e23      	ldr	r6, [pc, #140]	; (404760 <legAngCalc+0x198>)
  4046d4:	47b0      	blx	r6
	
	Ang.S1 = Ang.S1*180.00/M_PI;
  4046d6:	47a0      	blx	r4
  4046d8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 404778 <legAngCalc+0x1b0>
  4046dc:	2200      	movs	r2, #0
  4046de:	4b2d      	ldr	r3, [pc, #180]	; (404794 <legAngCalc+0x1cc>)
  4046e0:	47c8      	blx	r9
  4046e2:	4f27      	ldr	r7, [pc, #156]	; (404780 <legAngCalc+0x1b8>)
  4046e4:	a31a      	add	r3, pc, #104	; (adr r3, 404750 <legAngCalc+0x188>)
  4046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046ea:	47b8      	blx	r7
  4046ec:	47b0      	blx	r6
  4046ee:	6028      	str	r0, [r5, #0]
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
	else Ang.S3 = (M_PI)-h;
	Ang.S2 = (atan2(y,G))+b;
  4046f0:	4650      	mov	r0, sl
  4046f2:	4659      	mov	r1, fp
  4046f4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4046f8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 40479c <legAngCalc+0x1d4>
  4046fc:	47e0      	blx	ip
  4046fe:	47b0      	blx	r6
	Ang.S1 = atan2(x,z);
	
	Ang.S1 = Ang.S1*180.00/M_PI;
	Ang.S2 = 90 - Ang.S2*180.00/M_PI;
  404700:	47a0      	blx	r4
  404702:	2200      	movs	r2, #0
  404704:	4b23      	ldr	r3, [pc, #140]	; (404794 <legAngCalc+0x1cc>)
  404706:	47c8      	blx	r9
  404708:	a311      	add	r3, pc, #68	; (adr r3, 404750 <legAngCalc+0x188>)
  40470a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40470e:	47b8      	blx	r7
  404710:	4602      	mov	r2, r0
  404712:	460b      	mov	r3, r1
  404714:	f8df a074 	ldr.w	sl, [pc, #116]	; 40478c <legAngCalc+0x1c4>
  404718:	2000      	movs	r0, #0
  40471a:	491f      	ldr	r1, [pc, #124]	; (404798 <legAngCalc+0x1d0>)
  40471c:	47d0      	blx	sl
  40471e:	47b0      	blx	r6
  404720:	6068      	str	r0, [r5, #4]
	Ang.S3 = 180 - Ang.S3*180.00/M_PI;
  404722:	4640      	mov	r0, r8
  404724:	47a0      	blx	r4
  404726:	2200      	movs	r2, #0
  404728:	4b1a      	ldr	r3, [pc, #104]	; (404794 <legAngCalc+0x1cc>)
  40472a:	47c8      	blx	r9
  40472c:	a308      	add	r3, pc, #32	; (adr r3, 404750 <legAngCalc+0x188>)
  40472e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404732:	47b8      	blx	r7
  404734:	4602      	mov	r2, r0
  404736:	460b      	mov	r3, r1
  404738:	2000      	movs	r0, #0
  40473a:	4916      	ldr	r1, [pc, #88]	; (404794 <legAngCalc+0x1cc>)
  40473c:	47d0      	blx	sl
  40473e:	47b0      	blx	r6
  404740:	60a8      	str	r0, [r5, #8]
	
	
	return Ang;
}
  404742:	4628      	mov	r0, r5
  404744:	b005      	add	sp, #20
  404746:	ecbd 8b06 	vpop	{d8-d10}
  40474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40474e:	bf00      	nop
  404750:	54442d18 	.word	0x54442d18
  404754:	400921fb 	.word	0x400921fb
  404758:	004086f1 	.word	0x004086f1
  40475c:	004061d1 	.word	0x004061d1
  404760:	00408d1d 	.word	0x00408d1d
  404764:	45840800 	.word	0x45840800
  404768:	462f9000 	.word	0x462f9000
  40476c:	43020000 	.word	0x43020000
  404770:	0040607d 	.word	0x0040607d
  404774:	00405f91 	.word	0x00405f91
  404778:	00408799 	.word	0x00408799
  40477c:	405a8000 	.word	0x405a8000
  404780:	004089ed 	.word	0x004089ed
  404784:	00406125 	.word	0x00406125
  404788:	46719400 	.word	0x46719400
  40478c:	00408431 	.word	0x00408431
  404790:	004061cd 	.word	0x004061cd
  404794:	40668000 	.word	0x40668000
  404798:	40568000 	.word	0x40568000
  40479c:	00408435 	.word	0x00408435

004047a0 <writeLegOut>:

void writeLegOut(int leg, float S0, float S1, float S2) {
  4047a0:	b570      	push	{r4, r5, r6, lr}
  4047a2:	460e      	mov	r6, r1
  4047a4:	4615      	mov	r5, r2
  4047a6:	461c      	mov	r4, r3
	
	switch (leg) {
  4047a8:	2805      	cmp	r0, #5
  4047aa:	d857      	bhi.n	40485c <writeLegOut+0xbc>
  4047ac:	e8df f000 	tbb	[pc, r0]
  4047b0:	2d1f1103 	.word	0x2d1f1103
  4047b4:	493b      	.short	0x493b
	
	case 0:
		WriteServo(L0_S0,S0);
  4047b6:	2000      	movs	r0, #0
  4047b8:	4601      	mov	r1, r0
  4047ba:	4632      	mov	r2, r6
  4047bc:	4e28      	ldr	r6, [pc, #160]	; (404860 <writeLegOut+0xc0>)
  4047be:	47b0      	blx	r6
		WriteServo(L0_S1,S1);
  4047c0:	2000      	movs	r0, #0
  4047c2:	2101      	movs	r1, #1
  4047c4:	462a      	mov	r2, r5
  4047c6:	47b0      	blx	r6
		WriteServo(L0_S2,S2);
  4047c8:	2000      	movs	r0, #0
  4047ca:	2102      	movs	r1, #2
  4047cc:	4622      	mov	r2, r4
  4047ce:	47b0      	blx	r6
	break;
  4047d0:	bd70      	pop	{r4, r5, r6, pc}
	
	case 1:
		WriteServo(L1_S0,S0);
  4047d2:	2001      	movs	r0, #1
  4047d4:	2100      	movs	r1, #0
  4047d6:	4632      	mov	r2, r6
  4047d8:	4e21      	ldr	r6, [pc, #132]	; (404860 <writeLegOut+0xc0>)
  4047da:	47b0      	blx	r6
		WriteServo(L1_S1,S1);
  4047dc:	2001      	movs	r0, #1
  4047de:	4601      	mov	r1, r0
  4047e0:	462a      	mov	r2, r5
  4047e2:	47b0      	blx	r6
		WriteServo(L1_S2,S2);
  4047e4:	2001      	movs	r0, #1
  4047e6:	2102      	movs	r1, #2
  4047e8:	4622      	mov	r2, r4
  4047ea:	47b0      	blx	r6
	break;
  4047ec:	bd70      	pop	{r4, r5, r6, pc}

	case 2:
		WriteServo(L2_S0,S0);
  4047ee:	2002      	movs	r0, #2
  4047f0:	2100      	movs	r1, #0
  4047f2:	4632      	mov	r2, r6
  4047f4:	4e1a      	ldr	r6, [pc, #104]	; (404860 <writeLegOut+0xc0>)
  4047f6:	47b0      	blx	r6
		WriteServo(L2_S1,S1);
  4047f8:	2002      	movs	r0, #2
  4047fa:	2101      	movs	r1, #1
  4047fc:	462a      	mov	r2, r5
  4047fe:	47b0      	blx	r6
		WriteServo(L2_S2,S2);
  404800:	2002      	movs	r0, #2
  404802:	4601      	mov	r1, r0
  404804:	4622      	mov	r2, r4
  404806:	47b0      	blx	r6
	break;
  404808:	bd70      	pop	{r4, r5, r6, pc}

	case 3:
		WriteServo(L3_S0,S0);
  40480a:	2003      	movs	r0, #3
  40480c:	2100      	movs	r1, #0
  40480e:	4632      	mov	r2, r6
  404810:	4e13      	ldr	r6, [pc, #76]	; (404860 <writeLegOut+0xc0>)
  404812:	47b0      	blx	r6
		WriteServo(L3_S1,S1);
  404814:	2003      	movs	r0, #3
  404816:	2101      	movs	r1, #1
  404818:	462a      	mov	r2, r5
  40481a:	47b0      	blx	r6
		WriteServo(L3_S2,S2);
  40481c:	2003      	movs	r0, #3
  40481e:	2102      	movs	r1, #2
  404820:	4622      	mov	r2, r4
  404822:	47b0      	blx	r6
	break;
  404824:	bd70      	pop	{r4, r5, r6, pc}

	case 4:
		WriteServo(L4_S0,S0);
  404826:	2004      	movs	r0, #4
  404828:	2100      	movs	r1, #0
  40482a:	4632      	mov	r2, r6
  40482c:	4e0c      	ldr	r6, [pc, #48]	; (404860 <writeLegOut+0xc0>)
  40482e:	47b0      	blx	r6
		WriteServo(L4_S1,S1);
  404830:	2004      	movs	r0, #4
  404832:	2101      	movs	r1, #1
  404834:	462a      	mov	r2, r5
  404836:	47b0      	blx	r6
		WriteServo(L4_S2,S2);
  404838:	2004      	movs	r0, #4
  40483a:	2102      	movs	r1, #2
  40483c:	4622      	mov	r2, r4
  40483e:	47b0      	blx	r6
	break;
  404840:	bd70      	pop	{r4, r5, r6, pc}

	case 5:
		WriteServo(L5_S0,S0);
  404842:	2005      	movs	r0, #5
  404844:	2100      	movs	r1, #0
  404846:	4632      	mov	r2, r6
  404848:	4e05      	ldr	r6, [pc, #20]	; (404860 <writeLegOut+0xc0>)
  40484a:	47b0      	blx	r6
		WriteServo(L5_S1,S1);
  40484c:	2005      	movs	r0, #5
  40484e:	2101      	movs	r1, #1
  404850:	462a      	mov	r2, r5
  404852:	47b0      	blx	r6
		WriteServo(L5_S2,S2);
  404854:	2005      	movs	r0, #5
  404856:	2102      	movs	r1, #2
  404858:	4622      	mov	r2, r4
  40485a:	47b0      	blx	r6
  40485c:	bd70      	pop	{r4, r5, r6, pc}
  40485e:	bf00      	nop
  404860:	00403c91 	.word	0x00403c91

00404864 <cmdLED>:
 */ 
#include <Hexabot/Hexabot_Cmd.h>
#include <Hexabot/Hexabot.h>
#include <DW1000.h>

void cmdLED(int L, int onOff) {
  404864:	b5f0      	push	{r4, r5, r6, r7, lr}
  404866:	b09b      	sub	sp, #108	; 0x6c
  404868:	4604      	mov	r4, r0
  40486a:	460d      	mov	r5, r1
	extern int VerboseMode;
	char buf[100];
	
	switch(L) {
  40486c:	2809      	cmp	r0, #9
  40486e:	f200 80ad 	bhi.w	4049cc <cmdLED+0x168>
  404872:	e8df f000 	tbb	[pc, r0]
  404876:	1205      	.short	0x1205
  404878:	46392c1f 	.word	0x46392c1f
  40487c:	69ab5e51 	.word	0x69ab5e51
		case 0:
			if(onOff) pio_set(LED0);
  404880:	b129      	cbz	r1, 40488e <cmdLED+0x2a>
  404882:	4859      	ldr	r0, [pc, #356]	; (4049e8 <cmdLED+0x184>)
  404884:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404888:	4b58      	ldr	r3, [pc, #352]	; (4049ec <cmdLED+0x188>)
  40488a:	4798      	blx	r3
  40488c:	e09e      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED0);
  40488e:	4856      	ldr	r0, [pc, #344]	; (4049e8 <cmdLED+0x184>)
  404890:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404894:	4b56      	ldr	r3, [pc, #344]	; (4049f0 <cmdLED+0x18c>)
  404896:	4798      	blx	r3
  404898:	e098      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 1:
			if(onOff) pio_set(LED1);
  40489a:	b129      	cbz	r1, 4048a8 <cmdLED+0x44>
  40489c:	4852      	ldr	r0, [pc, #328]	; (4049e8 <cmdLED+0x184>)
  40489e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4048a2:	4b52      	ldr	r3, [pc, #328]	; (4049ec <cmdLED+0x188>)
  4048a4:	4798      	blx	r3
  4048a6:	e091      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED1);
  4048a8:	484f      	ldr	r0, [pc, #316]	; (4049e8 <cmdLED+0x184>)
  4048aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4048ae:	4b50      	ldr	r3, [pc, #320]	; (4049f0 <cmdLED+0x18c>)
  4048b0:	4798      	blx	r3
  4048b2:	e08b      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 2:
			if(onOff) pio_set(LED2);
  4048b4:	b129      	cbz	r1, 4048c2 <cmdLED+0x5e>
  4048b6:	484c      	ldr	r0, [pc, #304]	; (4049e8 <cmdLED+0x184>)
  4048b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4048bc:	4b4b      	ldr	r3, [pc, #300]	; (4049ec <cmdLED+0x188>)
  4048be:	4798      	blx	r3
  4048c0:	e084      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED2);
  4048c2:	4849      	ldr	r0, [pc, #292]	; (4049e8 <cmdLED+0x184>)
  4048c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4048c8:	4b49      	ldr	r3, [pc, #292]	; (4049f0 <cmdLED+0x18c>)
  4048ca:	4798      	blx	r3
  4048cc:	e07e      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 3:
			if(onOff) pio_set(LED3);
  4048ce:	b129      	cbz	r1, 4048dc <cmdLED+0x78>
  4048d0:	4845      	ldr	r0, [pc, #276]	; (4049e8 <cmdLED+0x184>)
  4048d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4048d6:	4b45      	ldr	r3, [pc, #276]	; (4049ec <cmdLED+0x188>)
  4048d8:	4798      	blx	r3
  4048da:	e077      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED3);
  4048dc:	4842      	ldr	r0, [pc, #264]	; (4049e8 <cmdLED+0x184>)
  4048de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4048e2:	4b43      	ldr	r3, [pc, #268]	; (4049f0 <cmdLED+0x18c>)
  4048e4:	4798      	blx	r3
  4048e6:	e071      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 4:
			if(onOff) pio_set(LED4);
  4048e8:	b129      	cbz	r1, 4048f6 <cmdLED+0x92>
  4048ea:	4842      	ldr	r0, [pc, #264]	; (4049f4 <cmdLED+0x190>)
  4048ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4048f0:	4b3e      	ldr	r3, [pc, #248]	; (4049ec <cmdLED+0x188>)
  4048f2:	4798      	blx	r3
  4048f4:	e06a      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED4);
  4048f6:	483f      	ldr	r0, [pc, #252]	; (4049f4 <cmdLED+0x190>)
  4048f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4048fc:	4b3c      	ldr	r3, [pc, #240]	; (4049f0 <cmdLED+0x18c>)
  4048fe:	4798      	blx	r3
  404900:	e064      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 5:
			if(onOff) pio_set(LED5);
  404902:	b121      	cbz	r1, 40490e <cmdLED+0xaa>
  404904:	4838      	ldr	r0, [pc, #224]	; (4049e8 <cmdLED+0x184>)
  404906:	2104      	movs	r1, #4
  404908:	4b38      	ldr	r3, [pc, #224]	; (4049ec <cmdLED+0x188>)
  40490a:	4798      	blx	r3
  40490c:	e05e      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED5);
  40490e:	4836      	ldr	r0, [pc, #216]	; (4049e8 <cmdLED+0x184>)
  404910:	2104      	movs	r1, #4
  404912:	4b37      	ldr	r3, [pc, #220]	; (4049f0 <cmdLED+0x18c>)
  404914:	4798      	blx	r3
  404916:	e059      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 6:
			if(onOff) pio_set(LED6);
  404918:	b129      	cbz	r1, 404926 <cmdLED+0xc2>
  40491a:	4833      	ldr	r0, [pc, #204]	; (4049e8 <cmdLED+0x184>)
  40491c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404920:	4b32      	ldr	r3, [pc, #200]	; (4049ec <cmdLED+0x188>)
  404922:	4798      	blx	r3
  404924:	e052      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED6);
  404926:	4830      	ldr	r0, [pc, #192]	; (4049e8 <cmdLED+0x184>)
  404928:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40492c:	4b30      	ldr	r3, [pc, #192]	; (4049f0 <cmdLED+0x18c>)
  40492e:	4798      	blx	r3
  404930:	e04c      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 7:
			if(onOff) pio_set(LED7);
  404932:	b121      	cbz	r1, 40493e <cmdLED+0xda>
  404934:	482c      	ldr	r0, [pc, #176]	; (4049e8 <cmdLED+0x184>)
  404936:	2140      	movs	r1, #64	; 0x40
  404938:	4b2c      	ldr	r3, [pc, #176]	; (4049ec <cmdLED+0x188>)
  40493a:	4798      	blx	r3
  40493c:	e046      	b.n	4049cc <cmdLED+0x168>
			else pio_clear(LED7);
  40493e:	482a      	ldr	r0, [pc, #168]	; (4049e8 <cmdLED+0x184>)
  404940:	2140      	movs	r1, #64	; 0x40
  404942:	4b2b      	ldr	r3, [pc, #172]	; (4049f0 <cmdLED+0x18c>)
  404944:	4798      	blx	r3
  404946:	e041      	b.n	4049cc <cmdLED+0x168>
		break;
		
		case 9:
			if(onOff) {
  404948:	b301      	cbz	r1, 40498c <cmdLED+0x128>
				pio_set(LED0);
  40494a:	4f27      	ldr	r7, [pc, #156]	; (4049e8 <cmdLED+0x184>)
  40494c:	4638      	mov	r0, r7
  40494e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404952:	4e26      	ldr	r6, [pc, #152]	; (4049ec <cmdLED+0x188>)
  404954:	47b0      	blx	r6
				pio_set(LED1);
  404956:	4638      	mov	r0, r7
  404958:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40495c:	47b0      	blx	r6
				pio_set(LED2);
  40495e:	4638      	mov	r0, r7
  404960:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  404964:	47b0      	blx	r6
				pio_set(LED3);
  404966:	4638      	mov	r0, r7
  404968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40496c:	47b0      	blx	r6
				pio_set(LED4);
  40496e:	4821      	ldr	r0, [pc, #132]	; (4049f4 <cmdLED+0x190>)
  404970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  404974:	47b0      	blx	r6
				pio_set(LED5);
  404976:	4638      	mov	r0, r7
  404978:	2104      	movs	r1, #4
  40497a:	47b0      	blx	r6
				pio_set(LED6);
  40497c:	4638      	mov	r0, r7
  40497e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404982:	47b0      	blx	r6
				pio_set(LED7);
  404984:	4638      	mov	r0, r7
  404986:	2140      	movs	r1, #64	; 0x40
  404988:	47b0      	blx	r6
  40498a:	e01f      	b.n	4049cc <cmdLED+0x168>
			}
			else
			{
				 pio_clear(LED0);
  40498c:	4f16      	ldr	r7, [pc, #88]	; (4049e8 <cmdLED+0x184>)
  40498e:	4638      	mov	r0, r7
  404990:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404994:	4e16      	ldr	r6, [pc, #88]	; (4049f0 <cmdLED+0x18c>)
  404996:	47b0      	blx	r6
				 pio_clear(LED1);
  404998:	4638      	mov	r0, r7
  40499a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40499e:	47b0      	blx	r6
				 pio_clear(LED2);
  4049a0:	4638      	mov	r0, r7
  4049a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4049a6:	47b0      	blx	r6
				 pio_clear(LED3);
  4049a8:	4638      	mov	r0, r7
  4049aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4049ae:	47b0      	blx	r6
				 pio_clear(LED4);
  4049b0:	4810      	ldr	r0, [pc, #64]	; (4049f4 <cmdLED+0x190>)
  4049b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4049b6:	47b0      	blx	r6
				 pio_clear(LED5);
  4049b8:	4638      	mov	r0, r7
  4049ba:	2104      	movs	r1, #4
  4049bc:	47b0      	blx	r6
				 pio_clear(LED6);
  4049be:	4638      	mov	r0, r7
  4049c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4049c4:	47b0      	blx	r6
				 pio_clear(LED7); 
  4049c6:	4638      	mov	r0, r7
  4049c8:	2140      	movs	r1, #64	; 0x40
  4049ca:	47b0      	blx	r6
			}
		break;
		
	}
		if(VerboseMode) {
  4049cc:	4b0a      	ldr	r3, [pc, #40]	; (4049f8 <cmdLED+0x194>)
  4049ce:	681b      	ldr	r3, [r3, #0]
  4049d0:	b143      	cbz	r3, 4049e4 <cmdLED+0x180>
		sprintf(buf,"LED%d SET TO %d\n",L,onOff);
  4049d2:	a801      	add	r0, sp, #4
  4049d4:	4909      	ldr	r1, [pc, #36]	; (4049fc <cmdLED+0x198>)
  4049d6:	4622      	mov	r2, r4
  4049d8:	462b      	mov	r3, r5
  4049da:	4c09      	ldr	r4, [pc, #36]	; (404a00 <cmdLED+0x19c>)
  4049dc:	47a0      	blx	r4
		sendDebugString(buf);
  4049de:	a801      	add	r0, sp, #4
  4049e0:	4b08      	ldr	r3, [pc, #32]	; (404a04 <cmdLED+0x1a0>)
  4049e2:	4798      	blx	r3
	}

}
  4049e4:	b01b      	add	sp, #108	; 0x6c
  4049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049e8:	400e0e00 	.word	0x400e0e00
  4049ec:	004027bd 	.word	0x004027bd
  4049f0:	004027c1 	.word	0x004027c1
  4049f4:	400e1000 	.word	0x400e1000
  4049f8:	2040c42c 	.word	0x2040c42c
  4049fc:	0040f5c0 	.word	0x0040f5c0
  404a00:	00409661 	.word	0x00409661
  404a04:	0040019d 	.word	0x0040019d

00404a08 <cmdServoMan>:

void cmdServoMan(int L,int S ,int angle) {
  404a08:	b570      	push	{r4, r5, r6, lr}
  404a0a:	b09c      	sub	sp, #112	; 0x70
  404a0c:	4604      	mov	r4, r0
  404a0e:	460d      	mov	r5, r1
  404a10:	4616      	mov	r6, r2
	extern int VerboseMode;
	char buf[100];
	
	switch (L) {
  404a12:	2805      	cmp	r0, #5
  404a14:	d83f      	bhi.n	404a96 <cmdServoMan+0x8e>
  404a16:	e8df f000 	tbb	[pc, r0]
  404a1a:	0d03      	.short	0x0d03
  404a1c:	352b2117 	.word	0x352b2117
		
	case 0:
	WriteServo(L0_S0+S,angle);
  404a20:	2000      	movs	r0, #0
  404a22:	ee07 2a90 	vmov	s15, r2
  404a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a2a:	ee17 2a90 	vmov	r2, s15
  404a2e:	4b21      	ldr	r3, [pc, #132]	; (404ab4 <cmdServoMan+0xac>)
  404a30:	4798      	blx	r3
	break;
  404a32:	e030      	b.n	404a96 <cmdServoMan+0x8e>
	
	case 1:
	WriteServo(L1_S0+S,angle);
  404a34:	2001      	movs	r0, #1
  404a36:	ee07 2a90 	vmov	s15, r2
  404a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a3e:	ee17 2a90 	vmov	r2, s15
  404a42:	4b1c      	ldr	r3, [pc, #112]	; (404ab4 <cmdServoMan+0xac>)
  404a44:	4798      	blx	r3
	break;
  404a46:	e026      	b.n	404a96 <cmdServoMan+0x8e>
	
	case 2:
	WriteServo(L2_S0+S,angle);
  404a48:	2002      	movs	r0, #2
  404a4a:	ee07 2a90 	vmov	s15, r2
  404a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a52:	ee17 2a90 	vmov	r2, s15
  404a56:	4b17      	ldr	r3, [pc, #92]	; (404ab4 <cmdServoMan+0xac>)
  404a58:	4798      	blx	r3
	break;
  404a5a:	e01c      	b.n	404a96 <cmdServoMan+0x8e>
	
	case 3:
	WriteServo(L3_S0+S,angle);
  404a5c:	2003      	movs	r0, #3
  404a5e:	ee07 2a90 	vmov	s15, r2
  404a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a66:	ee17 2a90 	vmov	r2, s15
  404a6a:	4b12      	ldr	r3, [pc, #72]	; (404ab4 <cmdServoMan+0xac>)
  404a6c:	4798      	blx	r3
	break;
  404a6e:	e012      	b.n	404a96 <cmdServoMan+0x8e>
	
	case 4:
	WriteServo(L4_S0+S,angle);
  404a70:	2004      	movs	r0, #4
  404a72:	ee07 2a90 	vmov	s15, r2
  404a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a7a:	ee17 2a90 	vmov	r2, s15
  404a7e:	4b0d      	ldr	r3, [pc, #52]	; (404ab4 <cmdServoMan+0xac>)
  404a80:	4798      	blx	r3
	break;
  404a82:	e008      	b.n	404a96 <cmdServoMan+0x8e>
	
	case 5:
	WriteServo(L5_S0+S,angle);
  404a84:	2005      	movs	r0, #5
  404a86:	ee07 2a90 	vmov	s15, r2
  404a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404a8e:	ee17 2a90 	vmov	r2, s15
  404a92:	4b08      	ldr	r3, [pc, #32]	; (404ab4 <cmdServoMan+0xac>)
  404a94:	4798      	blx	r3
	break;
	}
	
	if(VerboseMode) {
  404a96:	4b08      	ldr	r3, [pc, #32]	; (404ab8 <cmdServoMan+0xb0>)
  404a98:	681b      	ldr	r3, [r3, #0]
  404a9a:	b14b      	cbz	r3, 404ab0 <cmdServoMan+0xa8>
		sprintf(buf,"SERVO LEG:%d,SERVO:%d MOVED TO %d\n",L,S,angle);
  404a9c:	9600      	str	r6, [sp, #0]
  404a9e:	a803      	add	r0, sp, #12
  404aa0:	4906      	ldr	r1, [pc, #24]	; (404abc <cmdServoMan+0xb4>)
  404aa2:	4622      	mov	r2, r4
  404aa4:	462b      	mov	r3, r5
  404aa6:	4c06      	ldr	r4, [pc, #24]	; (404ac0 <cmdServoMan+0xb8>)
  404aa8:	47a0      	blx	r4
		sendDebugString(buf);
  404aaa:	a803      	add	r0, sp, #12
  404aac:	4b05      	ldr	r3, [pc, #20]	; (404ac4 <cmdServoMan+0xbc>)
  404aae:	4798      	blx	r3
	}
	
}
  404ab0:	b01c      	add	sp, #112	; 0x70
  404ab2:	bd70      	pop	{r4, r5, r6, pc}
  404ab4:	00403c91 	.word	0x00403c91
  404ab8:	2040c42c 	.word	0x2040c42c
  404abc:	0040f5d4 	.word	0x0040f5d4
  404ac0:	00409661 	.word	0x00409661
  404ac4:	0040019d 	.word	0x0040019d

00404ac8 <cmdBatVolt>:

void cmdBatVolt() {
  404ac8:	b510      	push	{r4, lr}
  404aca:	b09a      	sub	sp, #104	; 0x68
	char buf[100];
	sprintf(buf,"Battery Voltage:%f\n",getBatVoltage());
  404acc:	4b07      	ldr	r3, [pc, #28]	; (404aec <cmdBatVolt+0x24>)
  404ace:	4798      	blx	r3
  404ad0:	4b07      	ldr	r3, [pc, #28]	; (404af0 <cmdBatVolt+0x28>)
  404ad2:	4798      	blx	r3
  404ad4:	4602      	mov	r2, r0
  404ad6:	460b      	mov	r3, r1
  404ad8:	a801      	add	r0, sp, #4
  404ada:	4906      	ldr	r1, [pc, #24]	; (404af4 <cmdBatVolt+0x2c>)
  404adc:	4c06      	ldr	r4, [pc, #24]	; (404af8 <cmdBatVolt+0x30>)
  404ade:	47a0      	blx	r4
	sendDebugString(buf);
  404ae0:	a801      	add	r0, sp, #4
  404ae2:	4b06      	ldr	r3, [pc, #24]	; (404afc <cmdBatVolt+0x34>)
  404ae4:	4798      	blx	r3
}
  404ae6:	b01a      	add	sp, #104	; 0x68
  404ae8:	bd10      	pop	{r4, pc}
  404aea:	bf00      	nop
  404aec:	004042d1 	.word	0x004042d1
  404af0:	004086f1 	.word	0x004086f1
  404af4:	0040f5f8 	.word	0x0040f5f8
  404af8:	00409661 	.word	0x00409661
  404afc:	0040019d 	.word	0x0040019d

00404b00 <cmdWalk>:
	dumpFrame(dumploc);
}

void cmdWalk(int maxi) {
	extern walk_data hexabot_walk;
	hexabot_walk.i = 0;
  404b00:	4b03      	ldr	r3, [pc, #12]	; (404b10 <cmdWalk+0x10>)
  404b02:	2200      	movs	r2, #0
  404b04:	625a      	str	r2, [r3, #36]	; 0x24
	hexabot_walk.max_i = maxi;
  404b06:	6218      	str	r0, [r3, #32]
	hexabot_walk.Walk_EN = 1;
  404b08:	2201      	movs	r2, #1
  404b0a:	61da      	str	r2, [r3, #28]
  404b0c:	4770      	bx	lr
  404b0e:	bf00      	nop
  404b10:	2040c554 	.word	0x2040c554

00404b14 <cmdTestDW1000>:
}

void cmdTestDW1000() {
  404b14:	b570      	push	{r4, r5, r6, lr}
  404b16:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_toggleGPIO_MODE();
  404b18:	4b15      	ldr	r3, [pc, #84]	; (404b70 <cmdTestDW1000+0x5c>)
  404b1a:	4798      	blx	r3
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x000FFFFF, PMSC_LEDC_LEN);
  404b1c:	4a15      	ldr	r2, [pc, #84]	; (404b74 <cmdTestDW1000+0x60>)
  404b1e:	2300      	movs	r3, #0
  404b20:	e9cd 2300 	strd	r2, r3, [sp]
  404b24:	2304      	movs	r3, #4
  404b26:	9302      	str	r3, [sp, #8]
  404b28:	2036      	movs	r0, #54	; 0x36
  404b2a:	2101      	movs	r1, #1
  404b2c:	2228      	movs	r2, #40	; 0x28
  404b2e:	4b12      	ldr	r3, [pc, #72]	; (404b78 <cmdTestDW1000+0x64>)
  404b30:	4798      	blx	r3

	delay_us(1);
  404b32:	2033      	movs	r0, #51	; 0x33
  404b34:	4b11      	ldr	r3, [pc, #68]	; (404b7c <cmdTestDW1000+0x68>)
  404b36:	4798      	blx	r3
	sprintf(buf,"TestDevID: 0x%x\n",DW1000_readDeviceIdentifier());
  404b38:	4b11      	ldr	r3, [pc, #68]	; (404b80 <cmdTestDW1000+0x6c>)
  404b3a:	4798      	blx	r3
  404b3c:	4602      	mov	r2, r0
  404b3e:	460b      	mov	r3, r1
  404b40:	a804      	add	r0, sp, #16
  404b42:	4910      	ldr	r1, [pc, #64]	; (404b84 <cmdTestDW1000+0x70>)
  404b44:	4e10      	ldr	r6, [pc, #64]	; (404b88 <cmdTestDW1000+0x74>)
  404b46:	47b0      	blx	r6
	sendDebugString(buf);
  404b48:	a804      	add	r0, sp, #16
  404b4a:	4c10      	ldr	r4, [pc, #64]	; (404b8c <cmdTestDW1000+0x78>)
  404b4c:	47a0      	blx	r4
	sendDebugString("\n");
  404b4e:	4d10      	ldr	r5, [pc, #64]	; (404b90 <cmdTestDW1000+0x7c>)
  404b50:	4628      	mov	r0, r5
  404b52:	47a0      	blx	r4
	sprintf(buf,"SysStatus: 0x%x\n", DW1000_readSystemStatus());
  404b54:	4b0f      	ldr	r3, [pc, #60]	; (404b94 <cmdTestDW1000+0x80>)
  404b56:	4798      	blx	r3
  404b58:	4602      	mov	r2, r0
  404b5a:	460b      	mov	r3, r1
  404b5c:	a804      	add	r0, sp, #16
  404b5e:	490e      	ldr	r1, [pc, #56]	; (404b98 <cmdTestDW1000+0x84>)
  404b60:	47b0      	blx	r6
	sendDebugString(buf);
  404b62:	a804      	add	r0, sp, #16
  404b64:	47a0      	blx	r4
	sendDebugString("\n");
  404b66:	4628      	mov	r0, r5
  404b68:	47a0      	blx	r4
	
	
}
  404b6a:	b00e      	add	sp, #56	; 0x38
  404b6c:	bd70      	pop	{r4, r5, r6, pc}
  404b6e:	bf00      	nop
  404b70:	00403909 	.word	0x00403909
  404b74:	000fffff 	.word	0x000fffff
  404b78:	00403805 	.word	0x00403805
  404b7c:	20400001 	.word	0x20400001
  404b80:	004037d1 	.word	0x004037d1
  404b84:	0040f60c 	.word	0x0040f60c
  404b88:	00409661 	.word	0x00409661
  404b8c:	0040019d 	.word	0x0040019d
  404b90:	0040f154 	.word	0x0040f154
  404b94:	004037e5 	.word	0x004037e5
  404b98:	0040f620 	.word	0x0040f620

00404b9c <cmdDWMsend>:

void cmdDWMsend(char* tosend) {
  404b9c:	b530      	push	{r4, r5, lr}
  404b9e:	b083      	sub	sp, #12
  404ba0:	4605      	mov	r5, r0
	DW1000_writeTxBuffer(0,tosend,strlen(tosend));
  404ba2:	4c08      	ldr	r4, [pc, #32]	; (404bc4 <cmdDWMsend+0x28>)
  404ba4:	47a0      	blx	r4
  404ba6:	9000      	str	r0, [sp, #0]
  404ba8:	2000      	movs	r0, #0
  404baa:	462a      	mov	r2, r5
  404bac:	17eb      	asrs	r3, r5, #31
  404bae:	4906      	ldr	r1, [pc, #24]	; (404bc8 <cmdDWMsend+0x2c>)
  404bb0:	4788      	blx	r1
	DW1000_setTxFrameControl(strlen(tosend));
  404bb2:	4628      	mov	r0, r5
  404bb4:	47a0      	blx	r4
  404bb6:	4b05      	ldr	r3, [pc, #20]	; (404bcc <cmdDWMsend+0x30>)
  404bb8:	4798      	blx	r3
	DW1000_startTx();
  404bba:	4b05      	ldr	r3, [pc, #20]	; (404bd0 <cmdDWMsend+0x34>)
  404bbc:	4798      	blx	r3
}
  404bbe:	b003      	add	sp, #12
  404bc0:	bd30      	pop	{r4, r5, pc}
  404bc2:	bf00      	nop
  404bc4:	0040999d 	.word	0x0040999d
  404bc8:	00403965 	.word	0x00403965
  404bcc:	00403941 	.word	0x00403941
  404bd0:	00403985 	.word	0x00403985

00404bd4 <cmdOverrideLEDDWM1000>:

void cmdOverrideLEDDWM1000() {
  404bd4:	b530      	push	{r4, r5, lr}
  404bd6:	b085      	sub	sp, #20
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, 0x00000000, GPIO_MODE_LEN);
  404bd8:	2200      	movs	r2, #0
  404bda:	2300      	movs	r3, #0
  404bdc:	e9cd 2300 	strd	r2, r3, [sp]
  404be0:	2504      	movs	r5, #4
  404be2:	9502      	str	r5, [sp, #8]
  404be4:	2026      	movs	r0, #38	; 0x26
  404be6:	2101      	movs	r1, #1
  404be8:	4c0a      	ldr	r4, [pc, #40]	; (404c14 <cmdOverrideLEDDWM1000+0x40>)
  404bea:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0x8, 0x000000F0, GPIO_MODE_LEN);
  404bec:	22f0      	movs	r2, #240	; 0xf0
  404bee:	2300      	movs	r3, #0
  404bf0:	e9cd 2300 	strd	r2, r3, [sp]
  404bf4:	9502      	str	r5, [sp, #8]
  404bf6:	2026      	movs	r0, #38	; 0x26
  404bf8:	2101      	movs	r1, #1
  404bfa:	2208      	movs	r2, #8
  404bfc:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0xC, 0x000000FF, GPIO_MODE_LEN);
  404bfe:	22ff      	movs	r2, #255	; 0xff
  404c00:	2300      	movs	r3, #0
  404c02:	e9cd 2300 	strd	r2, r3, [sp]
  404c06:	9502      	str	r5, [sp, #8]
  404c08:	2026      	movs	r0, #38	; 0x26
  404c0a:	2101      	movs	r1, #1
  404c0c:	220c      	movs	r2, #12
  404c0e:	47a0      	blx	r4
}
  404c10:	b005      	add	sp, #20
  404c12:	bd30      	pop	{r4, r5, pc}
  404c14:	00403805 	.word	0x00403805

00404c18 <cmdWriteTestDW1000>:

void cmdWriteTestDW1000(uint64_t toRW) {
  404c18:	b510      	push	{r4, lr}
  404c1a:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,toRW,PANADR_LEN);
  404c1c:	e9cd 0100 	strd	r0, r1, [sp]
  404c20:	2404      	movs	r4, #4
  404c22:	9402      	str	r4, [sp, #8]
  404c24:	2003      	movs	r0, #3
  404c26:	2100      	movs	r1, #0
  404c28:	460a      	mov	r2, r1
  404c2a:	4b09      	ldr	r3, [pc, #36]	; (404c50 <cmdWriteTestDW1000+0x38>)
  404c2c:	4798      	blx	r3
	sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  404c2e:	2003      	movs	r0, #3
  404c30:	2100      	movs	r1, #0
  404c32:	460a      	mov	r2, r1
  404c34:	4623      	mov	r3, r4
  404c36:	4c07      	ldr	r4, [pc, #28]	; (404c54 <cmdWriteTestDW1000+0x3c>)
  404c38:	47a0      	blx	r4
  404c3a:	4602      	mov	r2, r0
  404c3c:	460b      	mov	r3, r1
  404c3e:	a804      	add	r0, sp, #16
  404c40:	4905      	ldr	r1, [pc, #20]	; (404c58 <cmdWriteTestDW1000+0x40>)
  404c42:	4c06      	ldr	r4, [pc, #24]	; (404c5c <cmdWriteTestDW1000+0x44>)
  404c44:	47a0      	blx	r4
	sendDebugString(buf);	
  404c46:	a804      	add	r0, sp, #16
  404c48:	4b05      	ldr	r3, [pc, #20]	; (404c60 <cmdWriteTestDW1000+0x48>)
  404c4a:	4798      	blx	r3
}
  404c4c:	b00e      	add	sp, #56	; 0x38
  404c4e:	bd10      	pop	{r4, pc}
  404c50:	00403805 	.word	0x00403805
  404c54:	00403709 	.word	0x00403709
  404c58:	0040f634 	.word	0x0040f634
  404c5c:	00409661 	.word	0x00409661
  404c60:	0040019d 	.word	0x0040019d

00404c64 <vTask1>:
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  404c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
  404c66:	4810      	ldr	r0, [pc, #64]	; (404ca8 <vTask1+0x44>)
  404c68:	4c10      	ldr	r4, [pc, #64]	; (404cac <vTask1+0x48>)
  404c6a:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
  404c6c:	4b10      	ldr	r3, [pc, #64]	; (404cb0 <vTask1+0x4c>)
  404c6e:	4798      	blx	r3
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  404c70:	4810      	ldr	r0, [pc, #64]	; (404cb4 <vTask1+0x50>)
  404c72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404c76:	4b10      	ldr	r3, [pc, #64]	; (404cb8 <vTask1+0x54>)
  404c78:	4798      	blx	r3
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  404c7a:	4810      	ldr	r0, [pc, #64]	; (404cbc <vTask1+0x58>)
  404c7c:	47a0      	blx	r4
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  404c7e:	2401      	movs	r4, #1
				if(tg) {
					pio_set(LED0);
					tg = !tg;
				}
				else {
					pio_clear(LED0);	
  404c80:	4d0c      	ldr	r5, [pc, #48]	; (404cb4 <vTask1+0x50>)
  404c82:	4f0f      	ldr	r7, [pc, #60]	; (404cc0 <vTask1+0x5c>)
	pio_set(LED0);
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
					pio_set(LED0);
  404c84:	4e0c      	ldr	r6, [pc, #48]	; (404cb8 <vTask1+0x54>)
	char buf[20];
	pio_set(LED0);
	int testCountFail = 0;
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
  404c86:	b12c      	cbz	r4, 404c94 <vTask1+0x30>
					pio_set(LED0);
  404c88:	4628      	mov	r0, r5
  404c8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404c8e:	47b0      	blx	r6
					tg = !tg;
  404c90:	2400      	movs	r4, #0
  404c92:	e004      	b.n	404c9e <vTask1+0x3a>
				}
				else {
					pio_clear(LED0);	
  404c94:	4628      	mov	r0, r5
  404c96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404c9a:	47b8      	blx	r7
					tg = !tg;
  404c9c:	2401      	movs	r4, #1
				}	
				vTaskDelay(1000);
  404c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404ca2:	4b08      	ldr	r3, [pc, #32]	; (404cc4 <vTask1+0x60>)
  404ca4:	4798      	blx	r3
	}
  404ca6:	e7ee      	b.n	404c86 <vTask1+0x22>
  404ca8:	0040f650 	.word	0x0040f650
  404cac:	0040019d 	.word	0x0040019d
  404cb0:	00401ae5 	.word	0x00401ae5
  404cb4:	400e0e00 	.word	0x400e0e00
  404cb8:	004027bd 	.word	0x004027bd
  404cbc:	0040f670 	.word	0x0040f670
  404cc0:	004027c1 	.word	0x004027c1
  404cc4:	00401d3d 	.word	0x00401d3d

00404cc8 <LegControlTask>:
}

void LegControlTask (void* pvParameters) {
  404cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ccc:	ed2d 8b10 	vpush	{d8-d15}
  404cd0:	b0b7      	sub	sp, #220	; 0xdc
	sendDebugString("LEG CONTROL TASK INITIALIZATION - STARTED\n");
  404cd2:	48af      	ldr	r0, [pc, #700]	; (404f90 <LegControlTask+0x2c8>)
  404cd4:	4caf      	ldr	r4, [pc, #700]	; (404f94 <LegControlTask+0x2cc>)
  404cd6:	47a0      	blx	r4
	angles	Ang2;
	angles	Ang3;
	angles	Ang4;
	angles	Ang5;
	
	hexabot_walk.movTurn = 0;
  404cd8:	4baf      	ldr	r3, [pc, #700]	; (404f98 <LegControlTask+0x2d0>)
  404cda:	2200      	movs	r2, #0
  404cdc:	601a      	str	r2, [r3, #0]
	hexabot_walk.movDir = 0;
  404cde:	605a      	str	r2, [r3, #4]
	hexabot_walk.stance = 100;
  404ce0:	2264      	movs	r2, #100	; 0x64
  404ce2:	609a      	str	r2, [r3, #8]
	hexabot_walk.hgt = 100;
  404ce4:	60da      	str	r2, [r3, #12]
	hexabot_walk.pup = 50;
  404ce6:	2132      	movs	r1, #50	; 0x32
  404ce8:	6119      	str	r1, [r3, #16]
	hexabot_walk.stride = 100;
  404cea:	615a      	str	r2, [r3, #20]
	hexabot_walk.Walk_EN = 0;
  404cec:	2200      	movs	r2, #0
  404cee:	61da      	str	r2, [r3, #28]
	hexabot_walk.Hexabot_leg_cycle_t = 20;
  404cf0:	2114      	movs	r1, #20
  404cf2:	6199      	str	r1, [r3, #24]
	hexabot_walk.ret = 0;
  404cf4:	629a      	str	r2, [r3, #40]	; 0x28
	
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  404cf6:	48a9      	ldr	r0, [pc, #676]	; (404f9c <LegControlTask+0x2d4>)
  404cf8:	47a0      	blx	r4
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
		  
		}
		else {
			if(hexabot_walk.ret){
		  xzS0 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  404cfa:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 404fa0 <LegControlTask+0x2d8>
	hexabot_walk.ret = 0;
	
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
  404cfe:	48a9      	ldr	r0, [pc, #676]	; (404fa4 <LegControlTask+0x2dc>)
  404d00:	2140      	movs	r1, #64	; 0x40
  404d02:	4ba9      	ldr	r3, [pc, #676]	; (404fa8 <LegControlTask+0x2e0>)
  404d04:	4798      	blx	r3
		if(hexabot_walk.Walk_EN) {
  404d06:	4ba4      	ldr	r3, [pc, #656]	; (404f98 <LegControlTask+0x2d0>)
  404d08:	69db      	ldr	r3, [r3, #28]
  404d0a:	2b00      	cmp	r3, #0
  404d0c:	f000 8319 	beq.w	405342 <LegControlTask+0x67a>
			
		  ofst0 = ((float)hexabot_walk.i+(0*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404d10:	4ca1      	ldr	r4, [pc, #644]	; (404f98 <LegControlTask+0x2d0>)
  404d12:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404d16:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404d1a:	f8d4 8018 	ldr.w	r8, [r4, #24]
  404d1e:	ee07 8a90 	vmov	s15, r8
  404d22:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
  404d26:	ee78 7a88 	vadd.f32	s15, s17, s16
  404d2a:	4fa0      	ldr	r7, [pc, #640]	; (404fac <LegControlTask+0x2e4>)
  404d2c:	eec7 7a89 	vdiv.f32	s15, s15, s18
  404d30:	ee17 0a90 	vmov	r0, s15
  404d34:	47b8      	blx	r7
  404d36:	f8df 9284 	ldr.w	r9, [pc, #644]	; 404fbc <LegControlTask+0x2f4>
  404d3a:	4602      	mov	r2, r0
  404d3c:	460b      	mov	r3, r1
  404d3e:	47c8      	blx	r9
  404d40:	4e9b      	ldr	r6, [pc, #620]	; (404fb0 <LegControlTask+0x2e8>)
  404d42:	a391      	add	r3, pc, #580	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404d44:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d48:	47b0      	blx	r6
  404d4a:	4d9a      	ldr	r5, [pc, #616]	; (404fb4 <LegControlTask+0x2ec>)
  404d4c:	47a8      	blx	r5
  404d4e:	9004      	str	r0, [sp, #16]
		  ofst1 = ((float)hexabot_walk.i+(1*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404d50:	4b99      	ldr	r3, [pc, #612]	; (404fb8 <LegControlTask+0x2f0>)
  404d52:	fb83 2308 	smull	r2, r3, r3, r8
  404d56:	eba3 78e8 	sub.w	r8, r3, r8, asr #31
  404d5a:	ee07 8a90 	vmov	s15, r8
  404d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404d62:	ee78 7aa7 	vadd.f32	s15, s17, s15
  404d66:	eec7 7a89 	vdiv.f32	s15, s15, s18
  404d6a:	ee17 0a90 	vmov	r0, s15
  404d6e:	47b8      	blx	r7
  404d70:	4602      	mov	r2, r0
  404d72:	460b      	mov	r3, r1
  404d74:	47c8      	blx	r9
  404d76:	a384      	add	r3, pc, #528	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404d78:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d7c:	47b0      	blx	r6
  404d7e:	47a8      	blx	r5
  404d80:	4683      	mov	fp, r0
  404d82:	9017      	str	r0, [sp, #92]	; 0x5c
		  ofst2 = ((float)hexabot_walk.i+(2*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404d84:	ea4f 0a48 	mov.w	sl, r8, lsl #1
  404d88:	ee07 aa90 	vmov	s15, sl
  404d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404d90:	ee78 7aa7 	vadd.f32	s15, s17, s15
  404d94:	eec7 7a89 	vdiv.f32	s15, s15, s18
  404d98:	ee17 0a90 	vmov	r0, s15
  404d9c:	47b8      	blx	r7
  404d9e:	4602      	mov	r2, r0
  404da0:	460b      	mov	r3, r1
  404da2:	47c8      	blx	r9
  404da4:	a378      	add	r3, pc, #480	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404da6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404daa:	47b0      	blx	r6
  404dac:	47a8      	blx	r5
  404dae:	9005      	str	r0, [sp, #20]
		  ofst3 = ((float)hexabot_walk.i+(3*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404db0:	eb0a 0308 	add.w	r3, sl, r8
  404db4:	ee07 3a90 	vmov	s15, r3
  404db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404dbc:	ee78 7aa7 	vadd.f32	s15, s17, s15
  404dc0:	eec7 7a89 	vdiv.f32	s15, s15, s18
  404dc4:	ee17 0a90 	vmov	r0, s15
  404dc8:	47b8      	blx	r7
  404dca:	4602      	mov	r2, r0
  404dcc:	460b      	mov	r3, r1
  404dce:	47c8      	blx	r9
  404dd0:	a36d      	add	r3, pc, #436	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dd6:	47b0      	blx	r6
  404dd8:	47a8      	blx	r5
  404dda:	9006      	str	r0, [sp, #24]
		  ofst4 = ((float)hexabot_walk.i+(4*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404ddc:	ea4f 0a88 	mov.w	sl, r8, lsl #2
  404de0:	ee07 aa90 	vmov	s15, sl
  404de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404de8:	ee78 7aa7 	vadd.f32	s15, s17, s15
  404dec:	eec7 7a89 	vdiv.f32	s15, s15, s18
  404df0:	ee17 0a90 	vmov	r0, s15
  404df4:	47b8      	blx	r7
  404df6:	4602      	mov	r2, r0
  404df8:	460b      	mov	r3, r1
  404dfa:	47c8      	blx	r9
  404dfc:	a362      	add	r3, pc, #392	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e02:	47b0      	blx	r6
  404e04:	47a8      	blx	r5
  404e06:	9007      	str	r0, [sp, #28]
		  ofst5 = ((float)hexabot_walk.i+(5*(hexabot_walk.Hexabot_leg_cycle_t/6)))/(hexabot_walk.Hexabot_leg_cycle_t)*2.0*M_PI;
  404e08:	44d0      	add	r8, sl
  404e0a:	ee07 8a90 	vmov	s15, r8
  404e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404e12:	ee78 8aa7 	vadd.f32	s17, s17, s15
  404e16:	eec8 7a89 	vdiv.f32	s15, s17, s18
  404e1a:	ee17 0a90 	vmov	r0, s15
  404e1e:	47b8      	blx	r7
  404e20:	4602      	mov	r2, r0
  404e22:	460b      	mov	r3, r1
  404e24:	47c8      	blx	r9
  404e26:	a358      	add	r3, pc, #352	; (adr r3, 404f88 <LegControlTask+0x2c0>)
  404e28:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e2c:	47b0      	blx	r6
  404e2e:	47a8      	blx	r5
  404e30:	9016      	str	r0, [sp, #88]	; 0x58
		  
		  xzS0 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst0), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  404e32:	9804      	ldr	r0, [sp, #16]
  404e34:	47b8      	blx	r7
  404e36:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404e3a:	f8df a184 	ldr.w	sl, [pc, #388]	; 404fc0 <LegControlTask+0x2f8>
  404e3e:	47d0      	blx	sl
  404e40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404e44:	edd4 7a02 	vldr	s15, [r4, #8]
  404e48:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404e4c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 404fc4 <LegControlTask+0x2fc>
  404e50:	6960      	ldr	r0, [r4, #20]
  404e52:	47c8      	blx	r9
  404e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404e58:	47b0      	blx	r6
  404e5a:	47a8      	blx	r5
  404e5c:	4602      	mov	r2, r0
  404e5e:	ed8d 8a00 	vstr	s16, [sp]
  404e62:	6863      	ldr	r3, [r4, #4]
  404e64:	9301      	str	r3, [sp, #4]
  404e66:	2301      	movs	r3, #1
  404e68:	9302      	str	r3, [sp, #8]
  404e6a:	6823      	ldr	r3, [r4, #0]
  404e6c:	9303      	str	r3, [sp, #12]
  404e6e:	a834      	add	r0, sp, #208	; 0xd0
  404e70:	ee18 1a90 	vmov	r1, s17
  404e74:	ee18 3a90 	vmov	r3, s17
  404e78:	f8df 814c 	ldr.w	r8, [pc, #332]	; 404fc8 <LegControlTask+0x300>
  404e7c:	47c0      	blx	r8
  404e7e:	ed9d ba34 	vldr	s22, [sp, #208]	; 0xd0
  404e82:	eddd aa35 	vldr	s21, [sp, #212]	; 0xd4
		  xzS1 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst1), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  404e86:	4658      	mov	r0, fp
  404e88:	47b8      	blx	r7
  404e8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  404e8e:	47d0      	blx	sl
  404e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e94:	edd4 7a02 	vldr	s15, [r4, #8]
  404e98:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404e9c:	6960      	ldr	r0, [r4, #20]
  404e9e:	47c8      	blx	r9
  404ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404ea4:	47b0      	blx	r6
  404ea6:	47a8      	blx	r5
  404ea8:	4602      	mov	r2, r0
  404eaa:	ed8d 8a00 	vstr	s16, [sp]
  404eae:	6863      	ldr	r3, [r4, #4]
  404eb0:	9301      	str	r3, [sp, #4]
  404eb2:	f04f 0b00 	mov.w	fp, #0
  404eb6:	f8cd b008 	str.w	fp, [sp, #8]
  404eba:	6823      	ldr	r3, [r4, #0]
  404ebc:	9303      	str	r3, [sp, #12]
  404ebe:	a832      	add	r0, sp, #200	; 0xc8
  404ec0:	ee18 1a90 	vmov	r1, s17
  404ec4:	ee18 3a90 	vmov	r3, s17
  404ec8:	47c0      	blx	r8
  404eca:	ed9d aa32 	vldr	s20, [sp, #200]	; 0xc8
  404ece:	eddd 9a33 	vldr	s19, [sp, #204]	; 0xcc
		  xzS2 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst2), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  404ed2:	9805      	ldr	r0, [sp, #20]
  404ed4:	47b8      	blx	r7
  404ed6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404eda:	47d0      	blx	sl
  404edc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  404ee0:	edd4 7a02 	vldr	s15, [r4, #8]
  404ee4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404ee8:	6960      	ldr	r0, [r4, #20]
  404eea:	47c8      	blx	r9
  404eec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  404ef0:	47b0      	blx	r6
  404ef2:	47a8      	blx	r5
  404ef4:	4602      	mov	r2, r0
  404ef6:	ed8d 8a00 	vstr	s16, [sp]
  404efa:	6863      	ldr	r3, [r4, #4]
  404efc:	9301      	str	r3, [sp, #4]
  404efe:	2301      	movs	r3, #1
  404f00:	9302      	str	r3, [sp, #8]
  404f02:	6823      	ldr	r3, [r4, #0]
  404f04:	9303      	str	r3, [sp, #12]
  404f06:	a830      	add	r0, sp, #192	; 0xc0
  404f08:	ee18 1a90 	vmov	r1, s17
  404f0c:	ee18 3a90 	vmov	r3, s17
  404f10:	47c0      	blx	r8
  404f12:	eddd fa30 	vldr	s31, [sp, #192]	; 0xc0
  404f16:	ed9d 9a31 	vldr	s18, [sp, #196]	; 0xc4
		  xzS3 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst3), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  404f1a:	9806      	ldr	r0, [sp, #24]
  404f1c:	47b8      	blx	r7
  404f1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  404f22:	47d0      	blx	sl
  404f24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  404f28:	edd4 7a02 	vldr	s15, [r4, #8]
  404f2c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404f30:	6960      	ldr	r0, [r4, #20]
  404f32:	47c8      	blx	r9
  404f34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404f38:	47b0      	blx	r6
  404f3a:	47a8      	blx	r5
  404f3c:	4602      	mov	r2, r0
  404f3e:	ed8d 8a00 	vstr	s16, [sp]
  404f42:	6863      	ldr	r3, [r4, #4]
  404f44:	9301      	str	r3, [sp, #4]
  404f46:	f8cd b008 	str.w	fp, [sp, #8]
  404f4a:	6823      	ldr	r3, [r4, #0]
  404f4c:	9303      	str	r3, [sp, #12]
  404f4e:	a82e      	add	r0, sp, #184	; 0xb8
  404f50:	ee18 1a90 	vmov	r1, s17
  404f54:	ee18 3a90 	vmov	r3, s17
  404f58:	47c0      	blx	r8
  404f5a:	eddd ea2e 	vldr	s29, [sp, #184]	; 0xb8
  404f5e:	ed9d ea2f 	vldr	s28, [sp, #188]	; 0xbc
		  xzS4 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst4), hexabot_walk.stance, 0, hexabot_walk.movDir,1,hexabot_walk.movTurn);
  404f62:	9807      	ldr	r0, [sp, #28]
  404f64:	47b8      	blx	r7
  404f66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  404f6a:	47d0      	blx	sl
  404f6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404f70:	edd4 7a02 	vldr	s15, [r4, #8]
  404f74:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404f78:	6960      	ldr	r0, [r4, #20]
  404f7a:	47c8      	blx	r9
  404f7c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  404f80:	47b0      	blx	r6
  404f82:	e023      	b.n	404fcc <LegControlTask+0x304>
  404f84:	f3af 8000 	nop.w
  404f88:	54442d18 	.word	0x54442d18
  404f8c:	400921fb 	.word	0x400921fb
  404f90:	0040f6ac 	.word	0x0040f6ac
  404f94:	0040019d 	.word	0x0040019d
  404f98:	2040c554 	.word	0x2040c554
  404f9c:	0040f6d8 	.word	0x0040f6d8
  404fa0:	00000000 	.word	0x00000000
  404fa4:	400e0e00 	.word	0x400e0e00
  404fa8:	004027bd 	.word	0x004027bd
  404fac:	004086f1 	.word	0x004086f1
  404fb0:	00408799 	.word	0x00408799
  404fb4:	00408d1d 	.word	0x00408d1d
  404fb8:	2aaaaaab 	.word	0x2aaaaaab
  404fbc:	00408435 	.word	0x00408435
  404fc0:	00405f09 	.word	0x00405f09
  404fc4:	004086cd 	.word	0x004086cd
  404fc8:	004043b1 	.word	0x004043b1
  404fcc:	47a8      	blx	r5
  404fce:	4602      	mov	r2, r0
  404fd0:	ed8d 8a00 	vstr	s16, [sp]
  404fd4:	6863      	ldr	r3, [r4, #4]
  404fd6:	9301      	str	r3, [sp, #4]
  404fd8:	2301      	movs	r3, #1
  404fda:	9302      	str	r3, [sp, #8]
  404fdc:	6823      	ldr	r3, [r4, #0]
  404fde:	9303      	str	r3, [sp, #12]
  404fe0:	a82c      	add	r0, sp, #176	; 0xb0
  404fe2:	ee18 1a90 	vmov	r1, s17
  404fe6:	ee18 3a90 	vmov	r3, s17
  404fea:	47c0      	blx	r8
  404fec:	ed9d da2c 	vldr	s26, [sp, #176]	; 0xb0
  404ff0:	eddd ca2d 	vldr	s25, [sp, #180]	; 0xb4
		  xzS5 = calcRotation(hexabot_walk.stance, hexabot_walk.stride*cos(ofst5), hexabot_walk.stance, 0, hexabot_walk.movDir,0,hexabot_walk.movTurn);
  404ff4:	9816      	ldr	r0, [sp, #88]	; 0x58
  404ff6:	47b8      	blx	r7
  404ff8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404ffc:	47d0      	blx	sl
  404ffe:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  405002:	edd4 7a02 	vldr	s15, [r4, #8]
  405006:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40500a:	6960      	ldr	r0, [r4, #20]
  40500c:	47c8      	blx	r9
  40500e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  405012:	47b0      	blx	r6
  405014:	47a8      	blx	r5
  405016:	4602      	mov	r2, r0
  405018:	ed8d 8a00 	vstr	s16, [sp]
  40501c:	6863      	ldr	r3, [r4, #4]
  40501e:	9301      	str	r3, [sp, #4]
  405020:	f8cd b008 	str.w	fp, [sp, #8]
  405024:	6823      	ldr	r3, [r4, #0]
  405026:	9303      	str	r3, [sp, #12]
  405028:	a82a      	add	r0, sp, #168	; 0xa8
  40502a:	ee18 1a90 	vmov	r1, s17
  40502e:	ee18 3a90 	vmov	r3, s17
  405032:	47c0      	blx	r8
  405034:	eddd da2a 	vldr	s27, [sp, #168]	; 0xa8
  405038:	ed9d fa2b 	vldr	s30, [sp, #172]	; 0xac

		  Ang0 = legAngCalc(xzS0.X,  (sin(ofst0) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst0)-hexabot_walk.hgt)  ,xzS0.Z);
  40503c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405040:	4b8b      	ldr	r3, [pc, #556]	; (405270 <LegControlTask+0x5a8>)
  405042:	4798      	blx	r3
  405044:	4606      	mov	r6, r0
  405046:	460f      	mov	r7, r1
  405048:	2200      	movs	r2, #0
  40504a:	2300      	movs	r3, #0
  40504c:	4c89      	ldr	r4, [pc, #548]	; (405274 <LegControlTask+0x5ac>)
  40504e:	47a0      	blx	r4
  405050:	b120      	cbz	r0, 40505c <LegControlTask+0x394>
  405052:	4b89      	ldr	r3, [pc, #548]	; (405278 <LegControlTask+0x5b0>)
  405054:	68d8      	ldr	r0, [r3, #12]
  405056:	4240      	negs	r0, r0
  405058:	47c8      	blx	r9
  40505a:	e013      	b.n	405084 <LegControlTask+0x3bc>
  40505c:	4d86      	ldr	r5, [pc, #536]	; (405278 <LegControlTask+0x5b0>)
  40505e:	4c87      	ldr	r4, [pc, #540]	; (40527c <LegControlTask+0x5b4>)
  405060:	6928      	ldr	r0, [r5, #16]
  405062:	47a0      	blx	r4
  405064:	4602      	mov	r2, r0
  405066:	460b      	mov	r3, r1
  405068:	4630      	mov	r0, r6
  40506a:	4639      	mov	r1, r7
  40506c:	4e84      	ldr	r6, [pc, #528]	; (405280 <LegControlTask+0x5b8>)
  40506e:	47b0      	blx	r6
  405070:	4606      	mov	r6, r0
  405072:	460f      	mov	r7, r1
  405074:	68e8      	ldr	r0, [r5, #12]
  405076:	47a0      	blx	r4
  405078:	4602      	mov	r2, r0
  40507a:	460b      	mov	r3, r1
  40507c:	4630      	mov	r0, r6
  40507e:	4639      	mov	r1, r7
  405080:	4c80      	ldr	r4, [pc, #512]	; (405284 <LegControlTask+0x5bc>)
  405082:	47a0      	blx	r4
  405084:	4b80      	ldr	r3, [pc, #512]	; (405288 <LegControlTask+0x5c0>)
  405086:	4798      	blx	r3
  405088:	4602      	mov	r2, r0
  40508a:	a827      	add	r0, sp, #156	; 0x9c
  40508c:	ee1b 1a10 	vmov	r1, s22
  405090:	ee1a 3a90 	vmov	r3, s21
  405094:	4c7d      	ldr	r4, [pc, #500]	; (40528c <LegControlTask+0x5c4>)
  405096:	47a0      	blx	r4
  405098:	ed9d ca27 	vldr	s24, [sp, #156]	; 0x9c
  40509c:	eddd ba28 	vldr	s23, [sp, #160]	; 0xa0
  4050a0:	ed9d ba29 	vldr	s22, [sp, #164]	; 0xa4
		  Ang1 = legAngCalc(xzS1.X,  (sin(ofst1) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst1)-hexabot_walk.hgt)  ,xzS1.Z);
  4050a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4050a8:	4b71      	ldr	r3, [pc, #452]	; (405270 <LegControlTask+0x5a8>)
  4050aa:	4798      	blx	r3
  4050ac:	4606      	mov	r6, r0
  4050ae:	460f      	mov	r7, r1
  4050b0:	2200      	movs	r2, #0
  4050b2:	2300      	movs	r3, #0
  4050b4:	4c6f      	ldr	r4, [pc, #444]	; (405274 <LegControlTask+0x5ac>)
  4050b6:	47a0      	blx	r4
  4050b8:	b128      	cbz	r0, 4050c6 <LegControlTask+0x3fe>
  4050ba:	4b6f      	ldr	r3, [pc, #444]	; (405278 <LegControlTask+0x5b0>)
  4050bc:	68d8      	ldr	r0, [r3, #12]
  4050be:	4240      	negs	r0, r0
  4050c0:	4b6e      	ldr	r3, [pc, #440]	; (40527c <LegControlTask+0x5b4>)
  4050c2:	4798      	blx	r3
  4050c4:	e013      	b.n	4050ee <LegControlTask+0x426>
  4050c6:	4d6c      	ldr	r5, [pc, #432]	; (405278 <LegControlTask+0x5b0>)
  4050c8:	4c6c      	ldr	r4, [pc, #432]	; (40527c <LegControlTask+0x5b4>)
  4050ca:	6928      	ldr	r0, [r5, #16]
  4050cc:	47a0      	blx	r4
  4050ce:	4602      	mov	r2, r0
  4050d0:	460b      	mov	r3, r1
  4050d2:	4630      	mov	r0, r6
  4050d4:	4639      	mov	r1, r7
  4050d6:	4e6a      	ldr	r6, [pc, #424]	; (405280 <LegControlTask+0x5b8>)
  4050d8:	47b0      	blx	r6
  4050da:	4606      	mov	r6, r0
  4050dc:	460f      	mov	r7, r1
  4050de:	68e8      	ldr	r0, [r5, #12]
  4050e0:	47a0      	blx	r4
  4050e2:	4602      	mov	r2, r0
  4050e4:	460b      	mov	r3, r1
  4050e6:	4630      	mov	r0, r6
  4050e8:	4639      	mov	r1, r7
  4050ea:	4c66      	ldr	r4, [pc, #408]	; (405284 <LegControlTask+0x5bc>)
  4050ec:	47a0      	blx	r4
  4050ee:	4b66      	ldr	r3, [pc, #408]	; (405288 <LegControlTask+0x5c0>)
  4050f0:	4798      	blx	r3
  4050f2:	4602      	mov	r2, r0
  4050f4:	a824      	add	r0, sp, #144	; 0x90
  4050f6:	ee1a 1a10 	vmov	r1, s20
  4050fa:	ee19 3a90 	vmov	r3, s19
  4050fe:	4c63      	ldr	r4, [pc, #396]	; (40528c <LegControlTask+0x5c4>)
  405100:	47a0      	blx	r4
  405102:	eddd aa24 	vldr	s21, [sp, #144]	; 0x90
  405106:	ed9d aa25 	vldr	s20, [sp, #148]	; 0x94
  40510a:	eddd 9a26 	vldr	s19, [sp, #152]	; 0x98
		  Ang2 = legAngCalc(xzS2.X,  (sin(ofst2) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst2)-hexabot_walk.hgt)  ,xzS2.Z);
  40510e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  405112:	4b57      	ldr	r3, [pc, #348]	; (405270 <LegControlTask+0x5a8>)
  405114:	4798      	blx	r3
  405116:	4606      	mov	r6, r0
  405118:	460f      	mov	r7, r1
  40511a:	2200      	movs	r2, #0
  40511c:	2300      	movs	r3, #0
  40511e:	4c55      	ldr	r4, [pc, #340]	; (405274 <LegControlTask+0x5ac>)
  405120:	47a0      	blx	r4
  405122:	b128      	cbz	r0, 405130 <LegControlTask+0x468>
  405124:	4b54      	ldr	r3, [pc, #336]	; (405278 <LegControlTask+0x5b0>)
  405126:	68d8      	ldr	r0, [r3, #12]
  405128:	4240      	negs	r0, r0
  40512a:	4b54      	ldr	r3, [pc, #336]	; (40527c <LegControlTask+0x5b4>)
  40512c:	4798      	blx	r3
  40512e:	e013      	b.n	405158 <LegControlTask+0x490>
  405130:	4d51      	ldr	r5, [pc, #324]	; (405278 <LegControlTask+0x5b0>)
  405132:	4c52      	ldr	r4, [pc, #328]	; (40527c <LegControlTask+0x5b4>)
  405134:	6928      	ldr	r0, [r5, #16]
  405136:	47a0      	blx	r4
  405138:	4602      	mov	r2, r0
  40513a:	460b      	mov	r3, r1
  40513c:	4630      	mov	r0, r6
  40513e:	4639      	mov	r1, r7
  405140:	4e4f      	ldr	r6, [pc, #316]	; (405280 <LegControlTask+0x5b8>)
  405142:	47b0      	blx	r6
  405144:	4606      	mov	r6, r0
  405146:	460f      	mov	r7, r1
  405148:	68e8      	ldr	r0, [r5, #12]
  40514a:	47a0      	blx	r4
  40514c:	4602      	mov	r2, r0
  40514e:	460b      	mov	r3, r1
  405150:	4630      	mov	r0, r6
  405152:	4639      	mov	r1, r7
  405154:	4c4b      	ldr	r4, [pc, #300]	; (405284 <LegControlTask+0x5bc>)
  405156:	47a0      	blx	r4
  405158:	4b4b      	ldr	r3, [pc, #300]	; (405288 <LegControlTask+0x5c0>)
  40515a:	4798      	blx	r3
  40515c:	4602      	mov	r2, r0
  40515e:	a821      	add	r0, sp, #132	; 0x84
  405160:	ee1f 1a90 	vmov	r1, s31
  405164:	ee19 3a10 	vmov	r3, s18
  405168:	4c48      	ldr	r4, [pc, #288]	; (40528c <LegControlTask+0x5c4>)
  40516a:	47a0      	blx	r4
  40516c:	ed9d 9a21 	vldr	s18, [sp, #132]	; 0x84
  405170:	eddd 8a22 	vldr	s17, [sp, #136]	; 0x88
  405174:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
		  Ang3 = legAngCalc(xzS3.X,  (sin(ofst3) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst3)-hexabot_walk.hgt)  ,xzS3.Z);
  405178:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40517c:	4b3c      	ldr	r3, [pc, #240]	; (405270 <LegControlTask+0x5a8>)
  40517e:	4798      	blx	r3
  405180:	4606      	mov	r6, r0
  405182:	460f      	mov	r7, r1
  405184:	2200      	movs	r2, #0
  405186:	2300      	movs	r3, #0
  405188:	4c3a      	ldr	r4, [pc, #232]	; (405274 <LegControlTask+0x5ac>)
  40518a:	47a0      	blx	r4
  40518c:	b128      	cbz	r0, 40519a <LegControlTask+0x4d2>
  40518e:	4b3a      	ldr	r3, [pc, #232]	; (405278 <LegControlTask+0x5b0>)
  405190:	68d8      	ldr	r0, [r3, #12]
  405192:	4240      	negs	r0, r0
  405194:	4b39      	ldr	r3, [pc, #228]	; (40527c <LegControlTask+0x5b4>)
  405196:	4798      	blx	r3
  405198:	e013      	b.n	4051c2 <LegControlTask+0x4fa>
  40519a:	4d37      	ldr	r5, [pc, #220]	; (405278 <LegControlTask+0x5b0>)
  40519c:	4c37      	ldr	r4, [pc, #220]	; (40527c <LegControlTask+0x5b4>)
  40519e:	6928      	ldr	r0, [r5, #16]
  4051a0:	47a0      	blx	r4
  4051a2:	4602      	mov	r2, r0
  4051a4:	460b      	mov	r3, r1
  4051a6:	4630      	mov	r0, r6
  4051a8:	4639      	mov	r1, r7
  4051aa:	4e35      	ldr	r6, [pc, #212]	; (405280 <LegControlTask+0x5b8>)
  4051ac:	47b0      	blx	r6
  4051ae:	4606      	mov	r6, r0
  4051b0:	460f      	mov	r7, r1
  4051b2:	68e8      	ldr	r0, [r5, #12]
  4051b4:	47a0      	blx	r4
  4051b6:	4602      	mov	r2, r0
  4051b8:	460b      	mov	r3, r1
  4051ba:	4630      	mov	r0, r6
  4051bc:	4639      	mov	r1, r7
  4051be:	4c31      	ldr	r4, [pc, #196]	; (405284 <LegControlTask+0x5bc>)
  4051c0:	47a0      	blx	r4
  4051c2:	4b31      	ldr	r3, [pc, #196]	; (405288 <LegControlTask+0x5c0>)
  4051c4:	4798      	blx	r3
  4051c6:	4602      	mov	r2, r0
  4051c8:	a81e      	add	r0, sp, #120	; 0x78
  4051ca:	ee1e 1a90 	vmov	r1, s29
  4051ce:	ee1e 3a10 	vmov	r3, s28
  4051d2:	4c2e      	ldr	r4, [pc, #184]	; (40528c <LegControlTask+0x5c4>)
  4051d4:	47a0      	blx	r4
  4051d6:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
  4051da:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
  4051de:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
		  Ang4 = legAngCalc(xzS4.X,  (sin(ofst4) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst4)-hexabot_walk.hgt)  ,xzS4.Z);
  4051e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4051e6:	4b22      	ldr	r3, [pc, #136]	; (405270 <LegControlTask+0x5a8>)
  4051e8:	4798      	blx	r3
  4051ea:	4606      	mov	r6, r0
  4051ec:	460f      	mov	r7, r1
  4051ee:	2200      	movs	r2, #0
  4051f0:	2300      	movs	r3, #0
  4051f2:	4c20      	ldr	r4, [pc, #128]	; (405274 <LegControlTask+0x5ac>)
  4051f4:	47a0      	blx	r4
  4051f6:	b128      	cbz	r0, 405204 <LegControlTask+0x53c>
  4051f8:	4b1f      	ldr	r3, [pc, #124]	; (405278 <LegControlTask+0x5b0>)
  4051fa:	68d8      	ldr	r0, [r3, #12]
  4051fc:	4240      	negs	r0, r0
  4051fe:	4b1f      	ldr	r3, [pc, #124]	; (40527c <LegControlTask+0x5b4>)
  405200:	4798      	blx	r3
  405202:	e013      	b.n	40522c <LegControlTask+0x564>
  405204:	4d1c      	ldr	r5, [pc, #112]	; (405278 <LegControlTask+0x5b0>)
  405206:	4c1d      	ldr	r4, [pc, #116]	; (40527c <LegControlTask+0x5b4>)
  405208:	6928      	ldr	r0, [r5, #16]
  40520a:	47a0      	blx	r4
  40520c:	4602      	mov	r2, r0
  40520e:	460b      	mov	r3, r1
  405210:	4630      	mov	r0, r6
  405212:	4639      	mov	r1, r7
  405214:	4e1a      	ldr	r6, [pc, #104]	; (405280 <LegControlTask+0x5b8>)
  405216:	47b0      	blx	r6
  405218:	4606      	mov	r6, r0
  40521a:	460f      	mov	r7, r1
  40521c:	68e8      	ldr	r0, [r5, #12]
  40521e:	47a0      	blx	r4
  405220:	4602      	mov	r2, r0
  405222:	460b      	mov	r3, r1
  405224:	4630      	mov	r0, r6
  405226:	4639      	mov	r1, r7
  405228:	4c16      	ldr	r4, [pc, #88]	; (405284 <LegControlTask+0x5bc>)
  40522a:	47a0      	blx	r4
  40522c:	4b16      	ldr	r3, [pc, #88]	; (405288 <LegControlTask+0x5c0>)
  40522e:	4798      	blx	r3
  405230:	4602      	mov	r2, r0
  405232:	a81b      	add	r0, sp, #108	; 0x6c
  405234:	ee1d 1a10 	vmov	r1, s26
  405238:	ee1c 3a90 	vmov	r3, s25
  40523c:	4c13      	ldr	r4, [pc, #76]	; (40528c <LegControlTask+0x5c4>)
  40523e:	47a0      	blx	r4
  405240:	ed9d ea1b 	vldr	s28, [sp, #108]	; 0x6c
  405244:	ed9d da1c 	vldr	s26, [sp, #112]	; 0x70
  405248:	eddd ca1d 	vldr	s25, [sp, #116]	; 0x74
		  Ang5 = legAngCalc(xzS5.X,  (sin(ofst5) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst5)-hexabot_walk.hgt)  ,xzS5.Z);
  40524c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405250:	4b07      	ldr	r3, [pc, #28]	; (405270 <LegControlTask+0x5a8>)
  405252:	4798      	blx	r3
  405254:	4606      	mov	r6, r0
  405256:	460f      	mov	r7, r1
  405258:	2200      	movs	r2, #0
  40525a:	2300      	movs	r3, #0
  40525c:	4c05      	ldr	r4, [pc, #20]	; (405274 <LegControlTask+0x5ac>)
  40525e:	47a0      	blx	r4
  405260:	b1b0      	cbz	r0, 405290 <LegControlTask+0x5c8>
  405262:	4b05      	ldr	r3, [pc, #20]	; (405278 <LegControlTask+0x5b0>)
  405264:	68d8      	ldr	r0, [r3, #12]
  405266:	4240      	negs	r0, r0
  405268:	4b04      	ldr	r3, [pc, #16]	; (40527c <LegControlTask+0x5b4>)
  40526a:	4798      	blx	r3
  40526c:	e024      	b.n	4052b8 <LegControlTask+0x5f0>
  40526e:	bf00      	nop
  405270:	00405f91 	.word	0x00405f91
  405274:	00408c7d 	.word	0x00408c7d
  405278:	2040c554 	.word	0x2040c554
  40527c:	004086cd 	.word	0x004086cd
  405280:	00408799 	.word	0x00408799
  405284:	00408431 	.word	0x00408431
  405288:	00408d1d 	.word	0x00408d1d
  40528c:	004045c9 	.word	0x004045c9
  405290:	4db4      	ldr	r5, [pc, #720]	; (405564 <LegControlTask+0x89c>)
  405292:	4cb5      	ldr	r4, [pc, #724]	; (405568 <LegControlTask+0x8a0>)
  405294:	6928      	ldr	r0, [r5, #16]
  405296:	47a0      	blx	r4
  405298:	4602      	mov	r2, r0
  40529a:	460b      	mov	r3, r1
  40529c:	4630      	mov	r0, r6
  40529e:	4639      	mov	r1, r7
  4052a0:	4eb2      	ldr	r6, [pc, #712]	; (40556c <LegControlTask+0x8a4>)
  4052a2:	47b0      	blx	r6
  4052a4:	4606      	mov	r6, r0
  4052a6:	460f      	mov	r7, r1
  4052a8:	68e8      	ldr	r0, [r5, #12]
  4052aa:	47a0      	blx	r4
  4052ac:	4602      	mov	r2, r0
  4052ae:	460b      	mov	r3, r1
  4052b0:	4630      	mov	r0, r6
  4052b2:	4639      	mov	r1, r7
  4052b4:	4cae      	ldr	r4, [pc, #696]	; (405570 <LegControlTask+0x8a8>)
  4052b6:	47a0      	blx	r4
  4052b8:	4bae      	ldr	r3, [pc, #696]	; (405574 <LegControlTask+0x8ac>)
  4052ba:	4798      	blx	r3
  4052bc:	4602      	mov	r2, r0
  4052be:	a818      	add	r0, sp, #96	; 0x60
  4052c0:	ee1d 1a90 	vmov	r1, s27
  4052c4:	ee1f 3a10 	vmov	r3, s30
  4052c8:	4cab      	ldr	r4, [pc, #684]	; (405578 <LegControlTask+0x8b0>)
  4052ca:	47a0      	blx	r4
  4052cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4052ce:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4052d0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
		  
		  writeLegOut(0,Ang0.S1,Ang0.S2,Ang0.S3);
  4052d2:	2000      	movs	r0, #0
  4052d4:	ee1c 1a10 	vmov	r1, s24
  4052d8:	ee1b 2a90 	vmov	r2, s23
  4052dc:	ee1b 3a10 	vmov	r3, s22
  4052e0:	4ca6      	ldr	r4, [pc, #664]	; (40557c <LegControlTask+0x8b4>)
  4052e2:	47a0      	blx	r4
		  writeLegOut(1,Ang1.S1,Ang1.S2,Ang1.S3);
  4052e4:	2001      	movs	r0, #1
  4052e6:	ee1a 1a90 	vmov	r1, s21
  4052ea:	ee1a 2a10 	vmov	r2, s20
  4052ee:	ee19 3a90 	vmov	r3, s19
  4052f2:	47a0      	blx	r4
		  writeLegOut(2,Ang2.S1,Ang2.S2,Ang2.S3);
  4052f4:	2002      	movs	r0, #2
  4052f6:	ee19 1a10 	vmov	r1, s18
  4052fa:	ee18 2a90 	vmov	r2, s17
  4052fe:	465b      	mov	r3, fp
  405300:	47a0      	blx	r4
		  writeLegOut(3,Ang3.S1,Ang3.S2,Ang3.S3);
  405302:	2003      	movs	r0, #3
  405304:	4651      	mov	r1, sl
  405306:	464a      	mov	r2, r9
  405308:	4643      	mov	r3, r8
  40530a:	47a0      	blx	r4
		  writeLegOut(4,Ang4.S1,Ang4.S2,Ang4.S3);
  40530c:	2004      	movs	r0, #4
  40530e:	ee1e 1a10 	vmov	r1, s28
  405312:	ee1d 2a10 	vmov	r2, s26
  405316:	ee1c 3a90 	vmov	r3, s25
  40531a:	47a0      	blx	r4
		  writeLegOut(5,Ang5.S1,Ang5.S2,Ang5.S3);
  40531c:	2005      	movs	r0, #5
  40531e:	4639      	mov	r1, r7
  405320:	4632      	mov	r2, r6
  405322:	462b      	mov	r3, r5
  405324:	47a0      	blx	r4
		  hexabot_walk.i++;
  405326:	4a8f      	ldr	r2, [pc, #572]	; (405564 <LegControlTask+0x89c>)
  405328:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40532a:	3301      	adds	r3, #1
  40532c:	6253      	str	r3, [r2, #36]	; 0x24
		 hexabot_walk. ret = 1;
  40532e:	2101      	movs	r1, #1
  405330:	6291      	str	r1, [r2, #40]	; 0x28
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
  405332:	6a12      	ldr	r2, [r2, #32]
  405334:	4293      	cmp	r3, r2
  405336:	f340 821a 	ble.w	40576e <LegControlTask+0xaa6>
  40533a:	2200      	movs	r2, #0
  40533c:	4b89      	ldr	r3, [pc, #548]	; (405564 <LegControlTask+0x89c>)
  40533e:	61da      	str	r2, [r3, #28]
  405340:	e215      	b.n	40576e <LegControlTask+0xaa6>
		  
		}
		else {
			if(hexabot_walk.ret){
  405342:	4b88      	ldr	r3, [pc, #544]	; (405564 <LegControlTask+0x89c>)
  405344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405346:	2b00      	cmp	r3, #0
  405348:	f000 820e 	beq.w	405768 <LegControlTask+0xaa0>
		  xzS0 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  40534c:	4d85      	ldr	r5, [pc, #532]	; (405564 <LegControlTask+0x89c>)
  40534e:	edd5 7a02 	vldr	s15, [r5, #8]
  405352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405356:	ed8d 8a00 	vstr	s16, [sp]
  40535a:	ed8d 8a01 	vstr	s16, [sp, #4]
  40535e:	2701      	movs	r7, #1
  405360:	9702      	str	r7, [sp, #8]
  405362:	ed8d 8a03 	vstr	s16, [sp, #12]
  405366:	a834      	add	r0, sp, #208	; 0xd0
  405368:	ee17 1a90 	vmov	r1, s15
  40536c:	ee18 2a10 	vmov	r2, s16
  405370:	ee17 3a90 	vmov	r3, s15
  405374:	4c82      	ldr	r4, [pc, #520]	; (405580 <LegControlTask+0x8b8>)
  405376:	47a0      	blx	r4
  405378:	ed9d ba34 	vldr	s22, [sp, #208]	; 0xd0
  40537c:	eddd aa35 	vldr	s21, [sp, #212]	; 0xd4
		  xzS1 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  405380:	edd5 7a02 	vldr	s15, [r5, #8]
  405384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405388:	ed8d 8a00 	vstr	s16, [sp]
  40538c:	ed8d 8a01 	vstr	s16, [sp, #4]
  405390:	2600      	movs	r6, #0
  405392:	9602      	str	r6, [sp, #8]
  405394:	ed8d 8a03 	vstr	s16, [sp, #12]
  405398:	a832      	add	r0, sp, #200	; 0xc8
  40539a:	ee17 1a90 	vmov	r1, s15
  40539e:	ee18 2a10 	vmov	r2, s16
  4053a2:	ee17 3a90 	vmov	r3, s15
  4053a6:	47a0      	blx	r4
  4053a8:	ed9d aa32 	vldr	s20, [sp, #200]	; 0xc8
  4053ac:	eddd 9a33 	vldr	s19, [sp, #204]	; 0xcc
		  xzS2 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  4053b0:	edd5 7a02 	vldr	s15, [r5, #8]
  4053b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4053b8:	ed8d 8a00 	vstr	s16, [sp]
  4053bc:	ed8d 8a01 	vstr	s16, [sp, #4]
  4053c0:	9702      	str	r7, [sp, #8]
  4053c2:	ed8d 8a03 	vstr	s16, [sp, #12]
  4053c6:	a830      	add	r0, sp, #192	; 0xc0
  4053c8:	ee17 1a90 	vmov	r1, s15
  4053cc:	ee18 2a10 	vmov	r2, s16
  4053d0:	ee17 3a90 	vmov	r3, s15
  4053d4:	47a0      	blx	r4
  4053d6:	ed9d 9a30 	vldr	s18, [sp, #192]	; 0xc0
  4053da:	eddd 8a31 	vldr	s17, [sp, #196]	; 0xc4
		  xzS3 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  4053de:	edd5 7a02 	vldr	s15, [r5, #8]
  4053e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4053e6:	ed8d 8a00 	vstr	s16, [sp]
  4053ea:	ed8d 8a01 	vstr	s16, [sp, #4]
  4053ee:	9602      	str	r6, [sp, #8]
  4053f0:	ed8d 8a03 	vstr	s16, [sp, #12]
  4053f4:	a82e      	add	r0, sp, #184	; 0xb8
  4053f6:	ee17 1a90 	vmov	r1, s15
  4053fa:	ee18 2a10 	vmov	r2, s16
  4053fe:	ee17 3a90 	vmov	r3, s15
  405402:	47a0      	blx	r4
  405404:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
  405408:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
		  xzS4 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  40540c:	edd5 7a02 	vldr	s15, [r5, #8]
  405410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405414:	ed8d 8a00 	vstr	s16, [sp]
  405418:	ed8d 8a01 	vstr	s16, [sp, #4]
  40541c:	9702      	str	r7, [sp, #8]
  40541e:	ed8d 8a03 	vstr	s16, [sp, #12]
  405422:	a82c      	add	r0, sp, #176	; 0xb0
  405424:	ee17 1a90 	vmov	r1, s15
  405428:	ee18 2a10 	vmov	r2, s16
  40542c:	ee17 3a90 	vmov	r3, s15
  405430:	47a0      	blx	r4
  405432:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
  405436:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
		  xzS5 = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  40543a:	edd5 7a02 	vldr	s15, [r5, #8]
  40543e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405442:	ed8d 8a00 	vstr	s16, [sp]
  405446:	ed8d 8a01 	vstr	s16, [sp, #4]
  40544a:	9602      	str	r6, [sp, #8]
  40544c:	ed8d 8a03 	vstr	s16, [sp, #12]
  405450:	a82a      	add	r0, sp, #168	; 0xa8
  405452:	ee17 1a90 	vmov	r1, s15
  405456:	ee18 2a10 	vmov	r2, s16
  40545a:	ee17 3a90 	vmov	r3, s15
  40545e:	47a0      	blx	r4
  405460:	eddd da2a 	vldr	s27, [sp, #168]	; 0xa8
  405464:	eddd ea2b 	vldr	s29, [sp, #172]	; 0xac

		  Ang0 = legAngCalc(xzS0.X,  (sin(ofst0) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst0)-hexabot_walk.hgt)  ,xzS0.Z);
  405468:	9804      	ldr	r0, [sp, #16]
  40546a:	4b46      	ldr	r3, [pc, #280]	; (405584 <LegControlTask+0x8bc>)
  40546c:	4798      	blx	r3
  40546e:	4b46      	ldr	r3, [pc, #280]	; (405588 <LegControlTask+0x8c0>)
  405470:	4798      	blx	r3
  405472:	4606      	mov	r6, r0
  405474:	460f      	mov	r7, r1
  405476:	2200      	movs	r2, #0
  405478:	2300      	movs	r3, #0
  40547a:	4c44      	ldr	r4, [pc, #272]	; (40558c <LegControlTask+0x8c4>)
  40547c:	47a0      	blx	r4
  40547e:	b120      	cbz	r0, 40548a <LegControlTask+0x7c2>
  405480:	68e8      	ldr	r0, [r5, #12]
  405482:	4240      	negs	r0, r0
  405484:	4b38      	ldr	r3, [pc, #224]	; (405568 <LegControlTask+0x8a0>)
  405486:	4798      	blx	r3
  405488:	e013      	b.n	4054b2 <LegControlTask+0x7ea>
  40548a:	4d36      	ldr	r5, [pc, #216]	; (405564 <LegControlTask+0x89c>)
  40548c:	4c36      	ldr	r4, [pc, #216]	; (405568 <LegControlTask+0x8a0>)
  40548e:	6928      	ldr	r0, [r5, #16]
  405490:	47a0      	blx	r4
  405492:	4602      	mov	r2, r0
  405494:	460b      	mov	r3, r1
  405496:	4630      	mov	r0, r6
  405498:	4639      	mov	r1, r7
  40549a:	4e34      	ldr	r6, [pc, #208]	; (40556c <LegControlTask+0x8a4>)
  40549c:	47b0      	blx	r6
  40549e:	4606      	mov	r6, r0
  4054a0:	460f      	mov	r7, r1
  4054a2:	68e8      	ldr	r0, [r5, #12]
  4054a4:	47a0      	blx	r4
  4054a6:	4602      	mov	r2, r0
  4054a8:	460b      	mov	r3, r1
  4054aa:	4630      	mov	r0, r6
  4054ac:	4639      	mov	r1, r7
  4054ae:	4c30      	ldr	r4, [pc, #192]	; (405570 <LegControlTask+0x8a8>)
  4054b0:	47a0      	blx	r4
  4054b2:	4b30      	ldr	r3, [pc, #192]	; (405574 <LegControlTask+0x8ac>)
  4054b4:	4798      	blx	r3
  4054b6:	4602      	mov	r2, r0
  4054b8:	a827      	add	r0, sp, #156	; 0x9c
  4054ba:	ee1b 1a10 	vmov	r1, s22
  4054be:	ee1a 3a90 	vmov	r3, s21
  4054c2:	4c2d      	ldr	r4, [pc, #180]	; (405578 <LegControlTask+0x8b0>)
  4054c4:	47a0      	blx	r4
  4054c6:	ed9d da27 	vldr	s26, [sp, #156]	; 0x9c
  4054ca:	eddd ca28 	vldr	s25, [sp, #160]	; 0xa0
  4054ce:	ed9d ca29 	vldr	s24, [sp, #164]	; 0xa4
		  Ang1 = legAngCalc(xzS1.X,  (sin(ofst1) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst1)-hexabot_walk.hgt)  ,xzS1.Z);
  4054d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
  4054d4:	4b2b      	ldr	r3, [pc, #172]	; (405584 <LegControlTask+0x8bc>)
  4054d6:	4798      	blx	r3
  4054d8:	4b2b      	ldr	r3, [pc, #172]	; (405588 <LegControlTask+0x8c0>)
  4054da:	4798      	blx	r3
  4054dc:	4606      	mov	r6, r0
  4054de:	460f      	mov	r7, r1
  4054e0:	2200      	movs	r2, #0
  4054e2:	2300      	movs	r3, #0
  4054e4:	4c29      	ldr	r4, [pc, #164]	; (40558c <LegControlTask+0x8c4>)
  4054e6:	47a0      	blx	r4
  4054e8:	b128      	cbz	r0, 4054f6 <LegControlTask+0x82e>
  4054ea:	4b1e      	ldr	r3, [pc, #120]	; (405564 <LegControlTask+0x89c>)
  4054ec:	68d8      	ldr	r0, [r3, #12]
  4054ee:	4240      	negs	r0, r0
  4054f0:	4b1d      	ldr	r3, [pc, #116]	; (405568 <LegControlTask+0x8a0>)
  4054f2:	4798      	blx	r3
  4054f4:	e013      	b.n	40551e <LegControlTask+0x856>
  4054f6:	4d1b      	ldr	r5, [pc, #108]	; (405564 <LegControlTask+0x89c>)
  4054f8:	4c1b      	ldr	r4, [pc, #108]	; (405568 <LegControlTask+0x8a0>)
  4054fa:	6928      	ldr	r0, [r5, #16]
  4054fc:	47a0      	blx	r4
  4054fe:	4602      	mov	r2, r0
  405500:	460b      	mov	r3, r1
  405502:	4630      	mov	r0, r6
  405504:	4639      	mov	r1, r7
  405506:	4e19      	ldr	r6, [pc, #100]	; (40556c <LegControlTask+0x8a4>)
  405508:	47b0      	blx	r6
  40550a:	4606      	mov	r6, r0
  40550c:	460f      	mov	r7, r1
  40550e:	68e8      	ldr	r0, [r5, #12]
  405510:	47a0      	blx	r4
  405512:	4602      	mov	r2, r0
  405514:	460b      	mov	r3, r1
  405516:	4630      	mov	r0, r6
  405518:	4639      	mov	r1, r7
  40551a:	4c15      	ldr	r4, [pc, #84]	; (405570 <LegControlTask+0x8a8>)
  40551c:	47a0      	blx	r4
  40551e:	4b15      	ldr	r3, [pc, #84]	; (405574 <LegControlTask+0x8ac>)
  405520:	4798      	blx	r3
  405522:	4602      	mov	r2, r0
  405524:	a824      	add	r0, sp, #144	; 0x90
  405526:	ee1a 1a10 	vmov	r1, s20
  40552a:	ee19 3a90 	vmov	r3, s19
  40552e:	4c12      	ldr	r4, [pc, #72]	; (405578 <LegControlTask+0x8b0>)
  405530:	47a0      	blx	r4
  405532:	eddd ba24 	vldr	s23, [sp, #144]	; 0x90
  405536:	ed9d ba25 	vldr	s22, [sp, #148]	; 0x94
  40553a:	eddd aa26 	vldr	s21, [sp, #152]	; 0x98
		  Ang2 = legAngCalc(xzS2.X,  (sin(ofst2) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst2)-hexabot_walk.hgt)  ,xzS2.Z);
  40553e:	9805      	ldr	r0, [sp, #20]
  405540:	4b10      	ldr	r3, [pc, #64]	; (405584 <LegControlTask+0x8bc>)
  405542:	4798      	blx	r3
  405544:	4b10      	ldr	r3, [pc, #64]	; (405588 <LegControlTask+0x8c0>)
  405546:	4798      	blx	r3
  405548:	4606      	mov	r6, r0
  40554a:	460f      	mov	r7, r1
  40554c:	2200      	movs	r2, #0
  40554e:	2300      	movs	r3, #0
  405550:	4c0e      	ldr	r4, [pc, #56]	; (40558c <LegControlTask+0x8c4>)
  405552:	47a0      	blx	r4
  405554:	b1e0      	cbz	r0, 405590 <LegControlTask+0x8c8>
  405556:	4b03      	ldr	r3, [pc, #12]	; (405564 <LegControlTask+0x89c>)
  405558:	68d8      	ldr	r0, [r3, #12]
  40555a:	4240      	negs	r0, r0
  40555c:	4b02      	ldr	r3, [pc, #8]	; (405568 <LegControlTask+0x8a0>)
  40555e:	4798      	blx	r3
  405560:	e02a      	b.n	4055b8 <LegControlTask+0x8f0>
  405562:	bf00      	nop
  405564:	2040c554 	.word	0x2040c554
  405568:	004086cd 	.word	0x004086cd
  40556c:	00408799 	.word	0x00408799
  405570:	00408431 	.word	0x00408431
  405574:	00408d1d 	.word	0x00408d1d
  405578:	004045c9 	.word	0x004045c9
  40557c:	004047a1 	.word	0x004047a1
  405580:	004043b1 	.word	0x004043b1
  405584:	004086f1 	.word	0x004086f1
  405588:	00405f91 	.word	0x00405f91
  40558c:	00408c7d 	.word	0x00408c7d
  405590:	4d7b      	ldr	r5, [pc, #492]	; (405780 <LegControlTask+0xab8>)
  405592:	4c7c      	ldr	r4, [pc, #496]	; (405784 <LegControlTask+0xabc>)
  405594:	6928      	ldr	r0, [r5, #16]
  405596:	47a0      	blx	r4
  405598:	4602      	mov	r2, r0
  40559a:	460b      	mov	r3, r1
  40559c:	4630      	mov	r0, r6
  40559e:	4639      	mov	r1, r7
  4055a0:	4e79      	ldr	r6, [pc, #484]	; (405788 <LegControlTask+0xac0>)
  4055a2:	47b0      	blx	r6
  4055a4:	4606      	mov	r6, r0
  4055a6:	460f      	mov	r7, r1
  4055a8:	68e8      	ldr	r0, [r5, #12]
  4055aa:	47a0      	blx	r4
  4055ac:	4602      	mov	r2, r0
  4055ae:	460b      	mov	r3, r1
  4055b0:	4630      	mov	r0, r6
  4055b2:	4639      	mov	r1, r7
  4055b4:	4c75      	ldr	r4, [pc, #468]	; (40578c <LegControlTask+0xac4>)
  4055b6:	47a0      	blx	r4
  4055b8:	4b75      	ldr	r3, [pc, #468]	; (405790 <LegControlTask+0xac8>)
  4055ba:	4798      	blx	r3
  4055bc:	4602      	mov	r2, r0
  4055be:	a821      	add	r0, sp, #132	; 0x84
  4055c0:	ee19 1a10 	vmov	r1, s18
  4055c4:	ee18 3a90 	vmov	r3, s17
  4055c8:	4c72      	ldr	r4, [pc, #456]	; (405794 <LegControlTask+0xacc>)
  4055ca:	47a0      	blx	r4
  4055cc:	ed9d aa21 	vldr	s20, [sp, #132]	; 0x84
  4055d0:	eddd 9a22 	vldr	s19, [sp, #136]	; 0x88
  4055d4:	ed9d 9a23 	vldr	s18, [sp, #140]	; 0x8c
		  Ang3 = legAngCalc(xzS3.X,  (sin(ofst3) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst3)-hexabot_walk.hgt)  ,xzS3.Z);
  4055d8:	9806      	ldr	r0, [sp, #24]
  4055da:	4b6f      	ldr	r3, [pc, #444]	; (405798 <LegControlTask+0xad0>)
  4055dc:	4798      	blx	r3
  4055de:	4b6f      	ldr	r3, [pc, #444]	; (40579c <LegControlTask+0xad4>)
  4055e0:	4798      	blx	r3
  4055e2:	4606      	mov	r6, r0
  4055e4:	460f      	mov	r7, r1
  4055e6:	2200      	movs	r2, #0
  4055e8:	2300      	movs	r3, #0
  4055ea:	4c6d      	ldr	r4, [pc, #436]	; (4057a0 <LegControlTask+0xad8>)
  4055ec:	47a0      	blx	r4
  4055ee:	b128      	cbz	r0, 4055fc <LegControlTask+0x934>
  4055f0:	4b63      	ldr	r3, [pc, #396]	; (405780 <LegControlTask+0xab8>)
  4055f2:	68d8      	ldr	r0, [r3, #12]
  4055f4:	4240      	negs	r0, r0
  4055f6:	4b63      	ldr	r3, [pc, #396]	; (405784 <LegControlTask+0xabc>)
  4055f8:	4798      	blx	r3
  4055fa:	e013      	b.n	405624 <LegControlTask+0x95c>
  4055fc:	4d60      	ldr	r5, [pc, #384]	; (405780 <LegControlTask+0xab8>)
  4055fe:	4c61      	ldr	r4, [pc, #388]	; (405784 <LegControlTask+0xabc>)
  405600:	6928      	ldr	r0, [r5, #16]
  405602:	47a0      	blx	r4
  405604:	4602      	mov	r2, r0
  405606:	460b      	mov	r3, r1
  405608:	4630      	mov	r0, r6
  40560a:	4639      	mov	r1, r7
  40560c:	4e5e      	ldr	r6, [pc, #376]	; (405788 <LegControlTask+0xac0>)
  40560e:	47b0      	blx	r6
  405610:	4606      	mov	r6, r0
  405612:	460f      	mov	r7, r1
  405614:	68e8      	ldr	r0, [r5, #12]
  405616:	47a0      	blx	r4
  405618:	4602      	mov	r2, r0
  40561a:	460b      	mov	r3, r1
  40561c:	4630      	mov	r0, r6
  40561e:	4639      	mov	r1, r7
  405620:	4c5a      	ldr	r4, [pc, #360]	; (40578c <LegControlTask+0xac4>)
  405622:	47a0      	blx	r4
  405624:	4b5a      	ldr	r3, [pc, #360]	; (405790 <LegControlTask+0xac8>)
  405626:	4798      	blx	r3
  405628:	4602      	mov	r2, r0
  40562a:	a81e      	add	r0, sp, #120	; 0x78
  40562c:	4659      	mov	r1, fp
  40562e:	4653      	mov	r3, sl
  405630:	4c58      	ldr	r4, [pc, #352]	; (405794 <LegControlTask+0xacc>)
  405632:	47a0      	blx	r4
  405634:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
  405638:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
  40563c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
		  Ang4 = legAngCalc(xzS4.X,  (sin(ofst4) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst4)-hexabot_walk.hgt)  ,xzS4.Z);
  405640:	9807      	ldr	r0, [sp, #28]
  405642:	4b55      	ldr	r3, [pc, #340]	; (405798 <LegControlTask+0xad0>)
  405644:	4798      	blx	r3
  405646:	4b55      	ldr	r3, [pc, #340]	; (40579c <LegControlTask+0xad4>)
  405648:	4798      	blx	r3
  40564a:	4606      	mov	r6, r0
  40564c:	460f      	mov	r7, r1
  40564e:	2200      	movs	r2, #0
  405650:	2300      	movs	r3, #0
  405652:	4c53      	ldr	r4, [pc, #332]	; (4057a0 <LegControlTask+0xad8>)
  405654:	47a0      	blx	r4
  405656:	b128      	cbz	r0, 405664 <LegControlTask+0x99c>
  405658:	4b49      	ldr	r3, [pc, #292]	; (405780 <LegControlTask+0xab8>)
  40565a:	68d8      	ldr	r0, [r3, #12]
  40565c:	4240      	negs	r0, r0
  40565e:	4b49      	ldr	r3, [pc, #292]	; (405784 <LegControlTask+0xabc>)
  405660:	4798      	blx	r3
  405662:	e013      	b.n	40568c <LegControlTask+0x9c4>
  405664:	4d46      	ldr	r5, [pc, #280]	; (405780 <LegControlTask+0xab8>)
  405666:	4c47      	ldr	r4, [pc, #284]	; (405784 <LegControlTask+0xabc>)
  405668:	6928      	ldr	r0, [r5, #16]
  40566a:	47a0      	blx	r4
  40566c:	4602      	mov	r2, r0
  40566e:	460b      	mov	r3, r1
  405670:	4630      	mov	r0, r6
  405672:	4639      	mov	r1, r7
  405674:	4e44      	ldr	r6, [pc, #272]	; (405788 <LegControlTask+0xac0>)
  405676:	47b0      	blx	r6
  405678:	4606      	mov	r6, r0
  40567a:	460f      	mov	r7, r1
  40567c:	68e8      	ldr	r0, [r5, #12]
  40567e:	47a0      	blx	r4
  405680:	4602      	mov	r2, r0
  405682:	460b      	mov	r3, r1
  405684:	4630      	mov	r0, r6
  405686:	4639      	mov	r1, r7
  405688:	4c40      	ldr	r4, [pc, #256]	; (40578c <LegControlTask+0xac4>)
  40568a:	47a0      	blx	r4
  40568c:	4b40      	ldr	r3, [pc, #256]	; (405790 <LegControlTask+0xac8>)
  40568e:	4798      	blx	r3
  405690:	4602      	mov	r2, r0
  405692:	a81b      	add	r0, sp, #108	; 0x6c
  405694:	4649      	mov	r1, r9
  405696:	4643      	mov	r3, r8
  405698:	4c3e      	ldr	r4, [pc, #248]	; (405794 <LegControlTask+0xacc>)
  40569a:	47a0      	blx	r4
  40569c:	ed9d ea1b 	vldr	s28, [sp, #108]	; 0x6c
  4056a0:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
  4056a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
		  Ang5 = legAngCalc(xzS5.X,  (sin(ofst5) < 0)?-hexabot_walk.hgt:(hexabot_walk.pup*sin(ofst5)-hexabot_walk.hgt)  ,xzS5.Z);
  4056a8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4056aa:	4b3b      	ldr	r3, [pc, #236]	; (405798 <LegControlTask+0xad0>)
  4056ac:	4798      	blx	r3
  4056ae:	4b3b      	ldr	r3, [pc, #236]	; (40579c <LegControlTask+0xad4>)
  4056b0:	4798      	blx	r3
  4056b2:	4606      	mov	r6, r0
  4056b4:	460f      	mov	r7, r1
  4056b6:	2200      	movs	r2, #0
  4056b8:	2300      	movs	r3, #0
  4056ba:	4c39      	ldr	r4, [pc, #228]	; (4057a0 <LegControlTask+0xad8>)
  4056bc:	47a0      	blx	r4
  4056be:	b128      	cbz	r0, 4056cc <LegControlTask+0xa04>
  4056c0:	4b2f      	ldr	r3, [pc, #188]	; (405780 <LegControlTask+0xab8>)
  4056c2:	68d8      	ldr	r0, [r3, #12]
  4056c4:	4240      	negs	r0, r0
  4056c6:	4b2f      	ldr	r3, [pc, #188]	; (405784 <LegControlTask+0xabc>)
  4056c8:	4798      	blx	r3
  4056ca:	e013      	b.n	4056f4 <LegControlTask+0xa2c>
  4056cc:	4d2c      	ldr	r5, [pc, #176]	; (405780 <LegControlTask+0xab8>)
  4056ce:	4c2d      	ldr	r4, [pc, #180]	; (405784 <LegControlTask+0xabc>)
  4056d0:	6928      	ldr	r0, [r5, #16]
  4056d2:	47a0      	blx	r4
  4056d4:	4602      	mov	r2, r0
  4056d6:	460b      	mov	r3, r1
  4056d8:	4630      	mov	r0, r6
  4056da:	4639      	mov	r1, r7
  4056dc:	4e2a      	ldr	r6, [pc, #168]	; (405788 <LegControlTask+0xac0>)
  4056de:	47b0      	blx	r6
  4056e0:	4606      	mov	r6, r0
  4056e2:	460f      	mov	r7, r1
  4056e4:	68e8      	ldr	r0, [r5, #12]
  4056e6:	47a0      	blx	r4
  4056e8:	4602      	mov	r2, r0
  4056ea:	460b      	mov	r3, r1
  4056ec:	4630      	mov	r0, r6
  4056ee:	4639      	mov	r1, r7
  4056f0:	4c26      	ldr	r4, [pc, #152]	; (40578c <LegControlTask+0xac4>)
  4056f2:	47a0      	blx	r4
  4056f4:	4b26      	ldr	r3, [pc, #152]	; (405790 <LegControlTask+0xac8>)
  4056f6:	4798      	blx	r3
  4056f8:	4602      	mov	r2, r0
  4056fa:	a818      	add	r0, sp, #96	; 0x60
  4056fc:	ee1d 1a90 	vmov	r1, s27
  405700:	ee1e 3a90 	vmov	r3, s29
  405704:	4c23      	ldr	r4, [pc, #140]	; (405794 <LegControlTask+0xacc>)
  405706:	47a0      	blx	r4
  405708:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40570a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40570c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
		  
		  writeLegOut(0,Ang0.S1,Ang0.S2,Ang0.S3);
  40570e:	2000      	movs	r0, #0
  405710:	ee1d 1a10 	vmov	r1, s26
  405714:	ee1c 2a90 	vmov	r2, s25
  405718:	ee1c 3a10 	vmov	r3, s24
  40571c:	4c21      	ldr	r4, [pc, #132]	; (4057a4 <LegControlTask+0xadc>)
  40571e:	47a0      	blx	r4
		  writeLegOut(1,Ang1.S1,Ang1.S2,Ang1.S3);
  405720:	2001      	movs	r0, #1
  405722:	ee1b 1a90 	vmov	r1, s23
  405726:	ee1b 2a10 	vmov	r2, s22
  40572a:	ee1a 3a90 	vmov	r3, s21
  40572e:	47a0      	blx	r4
		  writeLegOut(2,Ang2.S1,Ang2.S2,Ang2.S3);
  405730:	2002      	movs	r0, #2
  405732:	ee1a 1a10 	vmov	r1, s20
  405736:	ee19 2a90 	vmov	r2, s19
  40573a:	ee19 3a10 	vmov	r3, s18
  40573e:	47a0      	blx	r4
		  writeLegOut(3,Ang3.S1,Ang3.S2,Ang3.S3);
  405740:	2003      	movs	r0, #3
  405742:	ee18 1a90 	vmov	r1, s17
  405746:	465a      	mov	r2, fp
  405748:	4653      	mov	r3, sl
  40574a:	47a0      	blx	r4
		  writeLegOut(4,Ang4.S1,Ang4.S2,Ang4.S3);
  40574c:	2004      	movs	r0, #4
  40574e:	ee1e 1a10 	vmov	r1, s28
  405752:	464a      	mov	r2, r9
  405754:	4643      	mov	r3, r8
  405756:	47a0      	blx	r4
		  writeLegOut(5,Ang5.S1,Ang5.S2,Ang5.S3);
  405758:	2005      	movs	r0, #5
  40575a:	4639      	mov	r1, r7
  40575c:	4632      	mov	r2, r6
  40575e:	462b      	mov	r3, r5
  405760:	47a0      	blx	r4
		  hexabot_walk.ret = 0;
  405762:	2200      	movs	r2, #0
  405764:	4b06      	ldr	r3, [pc, #24]	; (405780 <LegControlTask+0xab8>)
  405766:	629a      	str	r2, [r3, #40]	; 0x28
		}
			hexabot_walk.i = 0;
  405768:	2200      	movs	r2, #0
  40576a:	4b05      	ldr	r3, [pc, #20]	; (405780 <LegControlTask+0xab8>)
  40576c:	625a      	str	r2, [r3, #36]	; 0x24
			//return to idle state (legs in middle) 
		}
		pio_clear(LED7);
  40576e:	480e      	ldr	r0, [pc, #56]	; (4057a8 <LegControlTask+0xae0>)
  405770:	2140      	movs	r1, #64	; 0x40
  405772:	4b0e      	ldr	r3, [pc, #56]	; (4057ac <LegControlTask+0xae4>)
  405774:	4798      	blx	r3
		  vTaskDelay(20);
  405776:	2014      	movs	r0, #20
  405778:	4b0d      	ldr	r3, [pc, #52]	; (4057b0 <LegControlTask+0xae8>)
  40577a:	4798      	blx	r3
	}
  40577c:	f7ff babf 	b.w	404cfe <LegControlTask+0x36>
  405780:	2040c554 	.word	0x2040c554
  405784:	004086cd 	.word	0x004086cd
  405788:	00408799 	.word	0x00408799
  40578c:	00408431 	.word	0x00408431
  405790:	00408d1d 	.word	0x00408d1d
  405794:	004045c9 	.word	0x004045c9
  405798:	004086f1 	.word	0x004086f1
  40579c:	00405f91 	.word	0x00405f91
  4057a0:	00408c7d 	.word	0x00408c7d
  4057a4:	004047a1 	.word	0x004047a1
  4057a8:	400e0e00 	.word	0x400e0e00
  4057ac:	004027c1 	.word	0x004027c1
  4057b0:	00401d3d 	.word	0x00401d3d

004057b4 <CLItask>:
}

void CLItask(void* pvParameters) {
  4057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057b8:	b085      	sub	sp, #20
	sendDebugString("CLI TASK INITIALIZATION - STARTED\n");
  4057ba:	4886      	ldr	r0, [pc, #536]	; (4059d4 <CLItask+0x220>)
  4057bc:	4c86      	ldr	r4, [pc, #536]	; (4059d8 <CLItask+0x224>)
  4057be:	47a0      	blx	r4
	memset(CLIbuf,0,100);
  4057c0:	4886      	ldr	r0, [pc, #536]	; (4059dc <CLItask+0x228>)
  4057c2:	2100      	movs	r1, #0
  4057c4:	2264      	movs	r2, #100	; 0x64
  4057c6:	4b86      	ldr	r3, [pc, #536]	; (4059e0 <CLItask+0x22c>)
  4057c8:	4798      	blx	r3
	char* BaseCmd;
	sendDebugString("CLI TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  4057ca:	4886      	ldr	r0, [pc, #536]	; (4059e4 <CLItask+0x230>)
  4057cc:	47a0      	blx	r4
	sendDebugString("COMMAND LINE STARTED\n");
  4057ce:	4886      	ldr	r0, [pc, #536]	; (4059e8 <CLItask+0x234>)
  4057d0:	47a0      	blx	r4
	sendDebugString("\n");
  4057d2:	4d86      	ldr	r5, [pc, #536]	; (4059ec <CLItask+0x238>)
  4057d4:	4628      	mov	r0, r5
  4057d6:	47a0      	blx	r4
	sendDebugString("\n");
  4057d8:	4628      	mov	r0, r5
  4057da:	47a0      	blx	r4
	UARTsem = xSemaphoreCreateBinary();
  4057dc:	2001      	movs	r0, #1
  4057de:	2100      	movs	r1, #0
  4057e0:	2203      	movs	r2, #3
  4057e2:	4b83      	ldr	r3, [pc, #524]	; (4059f0 <CLItask+0x23c>)
  4057e4:	4798      	blx	r3
  4057e6:	4b83      	ldr	r3, [pc, #524]	; (4059f4 <CLItask+0x240>)
  4057e8:	6018      	str	r0, [r3, #0]
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4057ea:	4883      	ldr	r0, [pc, #524]	; (4059f8 <CLItask+0x244>)
  4057ec:	47a0      	blx	r4
	for(;;) {
			if(xSemaphoreTake(UARTsem,0xFFFF) == pdTRUE) {
  4057ee:	4d81      	ldr	r5, [pc, #516]	; (4059f4 <CLItask+0x240>)
  4057f0:	4c82      	ldr	r4, [pc, #520]	; (4059fc <CLItask+0x248>)
				hexabot_walk.ret = 1;
			}
			
			else if(!strcmp(BaseCmd,"svoinhib")) {
				if(atoi(strtok(NULL," "))) pio_set(PIOA,PIO_PA26);
				else pio_clear(PIOA,PIO_PA26);
  4057f2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 405a8c <CLItask+0x2d8>
	sendDebugString("\n");
	UARTsem = xSemaphoreCreateBinary();
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
	for(;;) {
			if(xSemaphoreTake(UARTsem,0xFFFF) == pdTRUE) {
  4057f6:	6828      	ldr	r0, [r5, #0]
  4057f8:	2100      	movs	r1, #0
  4057fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4057fe:	460b      	mov	r3, r1
  405800:	47a0      	blx	r4
  405802:	2801      	cmp	r0, #1
  405804:	d1f7      	bne.n	4057f6 <CLItask+0x42>
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  405806:	4b7e      	ldr	r3, [pc, #504]	; (405a00 <CLItask+0x24c>)
  405808:	681b      	ldr	r3, [r3, #0]
  40580a:	4a74      	ldr	r2, [pc, #464]	; (4059dc <CLItask+0x228>)
  40580c:	4413      	add	r3, r2
  40580e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  405812:	2b0a      	cmp	r3, #10
  405814:	d1ef      	bne.n	4057f6 <CLItask+0x42>
			CLIbufIndex=0;
  405816:	2200      	movs	r2, #0
  405818:	4b79      	ldr	r3, [pc, #484]	; (405a00 <CLItask+0x24c>)
  40581a:	601a      	str	r2, [r3, #0]
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  40581c:	486f      	ldr	r0, [pc, #444]	; (4059dc <CLItask+0x228>)
  40581e:	4979      	ldr	r1, [pc, #484]	; (405a04 <CLItask+0x250>)
  405820:	4b79      	ldr	r3, [pc, #484]	; (405a08 <CLItask+0x254>)
  405822:	4798      	blx	r3
  405824:	4607      	mov	r7, r0
			
			if(!strcmp(BaseCmd,"led")) cmdLED( atoi(strtok(NULL," "))  , atoi(strtok(NULL," ")) );
  405826:	4979      	ldr	r1, [pc, #484]	; (405a0c <CLItask+0x258>)
  405828:	4b79      	ldr	r3, [pc, #484]	; (405a10 <CLItask+0x25c>)
  40582a:	4798      	blx	r3
  40582c:	b980      	cbnz	r0, 405850 <CLItask+0x9c>
  40582e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 405a04 <CLItask+0x250>
  405832:	4649      	mov	r1, r9
  405834:	4e74      	ldr	r6, [pc, #464]	; (405a08 <CLItask+0x254>)
  405836:	47b0      	blx	r6
  405838:	4f76      	ldr	r7, [pc, #472]	; (405a14 <CLItask+0x260>)
  40583a:	47b8      	blx	r7
  40583c:	4682      	mov	sl, r0
  40583e:	2000      	movs	r0, #0
  405840:	4649      	mov	r1, r9
  405842:	47b0      	blx	r6
  405844:	47b8      	blx	r7
  405846:	4601      	mov	r1, r0
  405848:	4650      	mov	r0, sl
  40584a:	4b73      	ldr	r3, [pc, #460]	; (405a18 <CLItask+0x264>)
  40584c:	4798      	blx	r3
  40584e:	e185      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"manusvo"))  cmdServoMan(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  405850:	4638      	mov	r0, r7
  405852:	4972      	ldr	r1, [pc, #456]	; (405a1c <CLItask+0x268>)
  405854:	4b6e      	ldr	r3, [pc, #440]	; (405a10 <CLItask+0x25c>)
  405856:	4798      	blx	r3
  405858:	b9b0      	cbnz	r0, 405888 <CLItask+0xd4>
  40585a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 405a04 <CLItask+0x250>
  40585e:	4649      	mov	r1, r9
  405860:	4e69      	ldr	r6, [pc, #420]	; (405a08 <CLItask+0x254>)
  405862:	47b0      	blx	r6
  405864:	4f6b      	ldr	r7, [pc, #428]	; (405a14 <CLItask+0x260>)
  405866:	47b8      	blx	r7
  405868:	4683      	mov	fp, r0
  40586a:	2000      	movs	r0, #0
  40586c:	4649      	mov	r1, r9
  40586e:	47b0      	blx	r6
  405870:	47b8      	blx	r7
  405872:	4682      	mov	sl, r0
  405874:	2000      	movs	r0, #0
  405876:	4649      	mov	r1, r9
  405878:	47b0      	blx	r6
  40587a:	47b8      	blx	r7
  40587c:	4602      	mov	r2, r0
  40587e:	4658      	mov	r0, fp
  405880:	4651      	mov	r1, sl
  405882:	4b67      	ldr	r3, [pc, #412]	; (405a20 <CLItask+0x26c>)
  405884:	4798      	blx	r3
  405886:	e169      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"batvolt\n")) cmdBatVolt();
  405888:	4638      	mov	r0, r7
  40588a:	4966      	ldr	r1, [pc, #408]	; (405a24 <CLItask+0x270>)
  40588c:	4b60      	ldr	r3, [pc, #384]	; (405a10 <CLItask+0x25c>)
  40588e:	4798      	blx	r3
  405890:	b910      	cbnz	r0, 405898 <CLItask+0xe4>
  405892:	4b65      	ldr	r3, [pc, #404]	; (405a28 <CLItask+0x274>)
  405894:	4798      	blx	r3
  405896:	e161      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"dumpimg")) dumpFrame( strtol(strtok(NULL," "),NULL,16));
  405898:	4638      	mov	r0, r7
  40589a:	4964      	ldr	r1, [pc, #400]	; (405a2c <CLItask+0x278>)
  40589c:	4b5c      	ldr	r3, [pc, #368]	; (405a10 <CLItask+0x25c>)
  40589e:	4798      	blx	r3
  4058a0:	b948      	cbnz	r0, 4058b6 <CLItask+0x102>
  4058a2:	4958      	ldr	r1, [pc, #352]	; (405a04 <CLItask+0x250>)
  4058a4:	4b58      	ldr	r3, [pc, #352]	; (405a08 <CLItask+0x254>)
  4058a6:	4798      	blx	r3
  4058a8:	2100      	movs	r1, #0
  4058aa:	2210      	movs	r2, #16
  4058ac:	4b60      	ldr	r3, [pc, #384]	; (405a30 <CLItask+0x27c>)
  4058ae:	4798      	blx	r3
  4058b0:	4b60      	ldr	r3, [pc, #384]	; (405a34 <CLItask+0x280>)
  4058b2:	4798      	blx	r3
  4058b4:	e152      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"walk")) cmdWalk(atoi(strtok(NULL," ")));
  4058b6:	4638      	mov	r0, r7
  4058b8:	495f      	ldr	r1, [pc, #380]	; (405a38 <CLItask+0x284>)
  4058ba:	4b55      	ldr	r3, [pc, #340]	; (405a10 <CLItask+0x25c>)
  4058bc:	4798      	blx	r3
  4058be:	b938      	cbnz	r0, 4058d0 <CLItask+0x11c>
  4058c0:	4950      	ldr	r1, [pc, #320]	; (405a04 <CLItask+0x250>)
  4058c2:	4b51      	ldr	r3, [pc, #324]	; (405a08 <CLItask+0x254>)
  4058c4:	4798      	blx	r3
  4058c6:	4b53      	ldr	r3, [pc, #332]	; (405a14 <CLItask+0x260>)
  4058c8:	4798      	blx	r3
  4058ca:	4b5c      	ldr	r3, [pc, #368]	; (405a3c <CLItask+0x288>)
  4058cc:	4798      	blx	r3
  4058ce:	e145      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"walkcytime")) hexabot_walk.Hexabot_leg_cycle_t = atoi(strtok(NULL," "));
  4058d0:	4638      	mov	r0, r7
  4058d2:	495b      	ldr	r1, [pc, #364]	; (405a40 <CLItask+0x28c>)
  4058d4:	4b4e      	ldr	r3, [pc, #312]	; (405a10 <CLItask+0x25c>)
  4058d6:	4798      	blx	r3
  4058d8:	b938      	cbnz	r0, 4058ea <CLItask+0x136>
  4058da:	494a      	ldr	r1, [pc, #296]	; (405a04 <CLItask+0x250>)
  4058dc:	4b4a      	ldr	r3, [pc, #296]	; (405a08 <CLItask+0x254>)
  4058de:	4798      	blx	r3
  4058e0:	4b4c      	ldr	r3, [pc, #304]	; (405a14 <CLItask+0x260>)
  4058e2:	4798      	blx	r3
  4058e4:	4b57      	ldr	r3, [pc, #348]	; (405a44 <CLItask+0x290>)
  4058e6:	6198      	str	r0, [r3, #24]
  4058e8:	e138      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"verbose")) VerboseMode = atoi(strtok(NULL," "));
  4058ea:	4638      	mov	r0, r7
  4058ec:	4956      	ldr	r1, [pc, #344]	; (405a48 <CLItask+0x294>)
  4058ee:	4b48      	ldr	r3, [pc, #288]	; (405a10 <CLItask+0x25c>)
  4058f0:	4798      	blx	r3
  4058f2:	b938      	cbnz	r0, 405904 <CLItask+0x150>
  4058f4:	4943      	ldr	r1, [pc, #268]	; (405a04 <CLItask+0x250>)
  4058f6:	4b44      	ldr	r3, [pc, #272]	; (405a08 <CLItask+0x254>)
  4058f8:	4798      	blx	r3
  4058fa:	4b46      	ldr	r3, [pc, #280]	; (405a14 <CLItask+0x260>)
  4058fc:	4798      	blx	r3
  4058fe:	4b53      	ldr	r3, [pc, #332]	; (405a4c <CLItask+0x298>)
  405900:	6018      	str	r0, [r3, #0]
  405902:	e12b      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"DWM-test\n")) cmdTestDW1000();
  405904:	4638      	mov	r0, r7
  405906:	4952      	ldr	r1, [pc, #328]	; (405a50 <CLItask+0x29c>)
  405908:	4b41      	ldr	r3, [pc, #260]	; (405a10 <CLItask+0x25c>)
  40590a:	4798      	blx	r3
  40590c:	b910      	cbnz	r0, 405914 <CLItask+0x160>
  40590e:	4b51      	ldr	r3, [pc, #324]	; (405a54 <CLItask+0x2a0>)
  405910:	4798      	blx	r3
  405912:	e123      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"DWM-send")) cmdDWMsend(strtok(NULL," "));
  405914:	4638      	mov	r0, r7
  405916:	4950      	ldr	r1, [pc, #320]	; (405a58 <CLItask+0x2a4>)
  405918:	4b3d      	ldr	r3, [pc, #244]	; (405a10 <CLItask+0x25c>)
  40591a:	4798      	blx	r3
  40591c:	b928      	cbnz	r0, 40592a <CLItask+0x176>
  40591e:	4939      	ldr	r1, [pc, #228]	; (405a04 <CLItask+0x250>)
  405920:	4b39      	ldr	r3, [pc, #228]	; (405a08 <CLItask+0x254>)
  405922:	4798      	blx	r3
  405924:	4b4d      	ldr	r3, [pc, #308]	; (405a5c <CLItask+0x2a8>)
  405926:	4798      	blx	r3
  405928:	e118      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"DWM-orLed\n")) cmdOverrideLEDDWM1000();
  40592a:	4638      	mov	r0, r7
  40592c:	494c      	ldr	r1, [pc, #304]	; (405a60 <CLItask+0x2ac>)
  40592e:	4b38      	ldr	r3, [pc, #224]	; (405a10 <CLItask+0x25c>)
  405930:	4798      	blx	r3
  405932:	b910      	cbnz	r0, 40593a <CLItask+0x186>
  405934:	4b4b      	ldr	r3, [pc, #300]	; (405a64 <CLItask+0x2b0>)
  405936:	4798      	blx	r3
  405938:	e110      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"DWM-RWtest")) cmdWriteTestDW1000( strtol(strtok(NULL," "),NULL,16));
  40593a:	4638      	mov	r0, r7
  40593c:	494a      	ldr	r1, [pc, #296]	; (405a68 <CLItask+0x2b4>)
  40593e:	4b34      	ldr	r3, [pc, #208]	; (405a10 <CLItask+0x25c>)
  405940:	4798      	blx	r3
  405942:	b950      	cbnz	r0, 40595a <CLItask+0x1a6>
  405944:	492f      	ldr	r1, [pc, #188]	; (405a04 <CLItask+0x250>)
  405946:	4b30      	ldr	r3, [pc, #192]	; (405a08 <CLItask+0x254>)
  405948:	4798      	blx	r3
  40594a:	2100      	movs	r1, #0
  40594c:	2210      	movs	r2, #16
  40594e:	4b38      	ldr	r3, [pc, #224]	; (405a30 <CLItask+0x27c>)
  405950:	4798      	blx	r3
  405952:	17c1      	asrs	r1, r0, #31
  405954:	4b45      	ldr	r3, [pc, #276]	; (405a6c <CLItask+0x2b8>)
  405956:	4798      	blx	r3
  405958:	e100      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"camdtsh")) cam_dif_tsh = atoi(strtok(NULL," "));
  40595a:	4638      	mov	r0, r7
  40595c:	4944      	ldr	r1, [pc, #272]	; (405a70 <CLItask+0x2bc>)
  40595e:	4b2c      	ldr	r3, [pc, #176]	; (405a10 <CLItask+0x25c>)
  405960:	4798      	blx	r3
  405962:	b938      	cbnz	r0, 405974 <CLItask+0x1c0>
  405964:	4927      	ldr	r1, [pc, #156]	; (405a04 <CLItask+0x250>)
  405966:	4b28      	ldr	r3, [pc, #160]	; (405a08 <CLItask+0x254>)
  405968:	4798      	blx	r3
  40596a:	4b2a      	ldr	r3, [pc, #168]	; (405a14 <CLItask+0x260>)
  40596c:	4798      	blx	r3
  40596e:	4b41      	ldr	r3, [pc, #260]	; (405a74 <CLItask+0x2c0>)
  405970:	6018      	str	r0, [r3, #0]
  405972:	e0f3      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"memtest\n")) SdramCheck();
  405974:	4638      	mov	r0, r7
  405976:	4940      	ldr	r1, [pc, #256]	; (405a78 <CLItask+0x2c4>)
  405978:	4b25      	ldr	r3, [pc, #148]	; (405a10 <CLItask+0x25c>)
  40597a:	4798      	blx	r3
  40597c:	b910      	cbnz	r0, 405984 <CLItask+0x1d0>
  40597e:	4b3f      	ldr	r3, [pc, #252]	; (405a7c <CLItask+0x2c8>)
  405980:	4798      	blx	r3
  405982:	e0eb      	b.n	405b5c <CLItask+0x3a8>
			
			else if(!strcmp(BaseCmd,"DWM-clrStatus\n")) DW1000_writeReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0xFFFFFFFF, SYS_STATUS_LEN);
  405984:	4638      	mov	r0, r7
  405986:	493e      	ldr	r1, [pc, #248]	; (405a80 <CLItask+0x2cc>)
  405988:	4b21      	ldr	r3, [pc, #132]	; (405a10 <CLItask+0x25c>)
  40598a:	4798      	blx	r3
  40598c:	b960      	cbnz	r0, 4059a8 <CLItask+0x1f4>
  40598e:	f04f 32ff 	mov.w	r2, #4294967295
  405992:	2300      	movs	r3, #0
  405994:	e9cd 2300 	strd	r2, r3, [sp]
  405998:	2305      	movs	r3, #5
  40599a:	9302      	str	r3, [sp, #8]
  40599c:	200f      	movs	r0, #15
  40599e:	2100      	movs	r1, #0
  4059a0:	460a      	mov	r2, r1
  4059a2:	4b38      	ldr	r3, [pc, #224]	; (405a84 <CLItask+0x2d0>)
  4059a4:	4798      	blx	r3
  4059a6:	e0d9      	b.n	405b5c <CLItask+0x3a8>
			
			//walk patern settings
			
			else if(!strcmp(BaseCmd,"gaitTurn")){
  4059a8:	4638      	mov	r0, r7
  4059aa:	4937      	ldr	r1, [pc, #220]	; (405a88 <CLItask+0x2d4>)
  4059ac:	4b18      	ldr	r3, [pc, #96]	; (405a10 <CLItask+0x25c>)
  4059ae:	4798      	blx	r3
  4059b0:	2800      	cmp	r0, #0
  4059b2:	d16d      	bne.n	405a90 <CLItask+0x2dc>
				hexabot_walk.movTurn = atoi(strtok(NULL," "));
  4059b4:	4913      	ldr	r1, [pc, #76]	; (405a04 <CLItask+0x250>)
  4059b6:	4b14      	ldr	r3, [pc, #80]	; (405a08 <CLItask+0x254>)
  4059b8:	4798      	blx	r3
  4059ba:	4b16      	ldr	r3, [pc, #88]	; (405a14 <CLItask+0x260>)
  4059bc:	4798      	blx	r3
  4059be:	4b21      	ldr	r3, [pc, #132]	; (405a44 <CLItask+0x290>)
  4059c0:	ee07 0a90 	vmov	s15, r0
  4059c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4059c8:	edc3 7a00 	vstr	s15, [r3]
				hexabot_walk.ret = 1;
  4059cc:	2201      	movs	r2, #1
  4059ce:	629a      	str	r2, [r3, #40]	; 0x28
  4059d0:	e0c4      	b.n	405b5c <CLItask+0x3a8>
  4059d2:	bf00      	nop
  4059d4:	0040f720 	.word	0x0040f720
  4059d8:	0040019d 	.word	0x0040019d
  4059dc:	2040c580 	.word	0x2040c580
  4059e0:	00409595 	.word	0x00409595
  4059e4:	0040f744 	.word	0x0040f744
  4059e8:	0040f784 	.word	0x0040f784
  4059ec:	0040f154 	.word	0x0040f154
  4059f0:	00401119 	.word	0x00401119
  4059f4:	2040c43c 	.word	0x2040c43c
  4059f8:	0040f79c 	.word	0x0040f79c
  4059fc:	00401551 	.word	0x00401551
  405a00:	2040c430 	.word	0x2040c430
  405a04:	0040f7c0 	.word	0x0040f7c0
  405a08:	004099f9 	.word	0x004099f9
  405a0c:	0040f7c4 	.word	0x0040f7c4
  405a10:	004096c9 	.word	0x004096c9
  405a14:	00408e45 	.word	0x00408e45
  405a18:	00404865 	.word	0x00404865
  405a1c:	0040f7c8 	.word	0x0040f7c8
  405a20:	00404a09 	.word	0x00404a09
  405a24:	0040f7d0 	.word	0x0040f7d0
  405a28:	00404ac9 	.word	0x00404ac9
  405a2c:	0040f7dc 	.word	0x0040f7dc
  405a30:	00409b89 	.word	0x00409b89
  405a34:	0040434d 	.word	0x0040434d
  405a38:	0040f7e4 	.word	0x0040f7e4
  405a3c:	00404b01 	.word	0x00404b01
  405a40:	0040f7ec 	.word	0x0040f7ec
  405a44:	2040c554 	.word	0x2040c554
  405a48:	0040f7f8 	.word	0x0040f7f8
  405a4c:	2040c42c 	.word	0x2040c42c
  405a50:	0040f800 	.word	0x0040f800
  405a54:	00404b15 	.word	0x00404b15
  405a58:	0040f80c 	.word	0x0040f80c
  405a5c:	00404b9d 	.word	0x00404b9d
  405a60:	0040f818 	.word	0x0040f818
  405a64:	00404bd5 	.word	0x00404bd5
  405a68:	0040f824 	.word	0x0040f824
  405a6c:	00404c19 	.word	0x00404c19
  405a70:	0040f830 	.word	0x0040f830
  405a74:	20400018 	.word	0x20400018
  405a78:	0040f838 	.word	0x0040f838
  405a7c:	004039a9 	.word	0x004039a9
  405a80:	0040f844 	.word	0x0040f844
  405a84:	00403805 	.word	0x00403805
  405a88:	0040f854 	.word	0x0040f854
  405a8c:	400e0e00 	.word	0x400e0e00
			}
			else if(!strcmp(BaseCmd,"gaitDir")){
  405a90:	4638      	mov	r0, r7
  405a92:	4937      	ldr	r1, [pc, #220]	; (405b70 <CLItask+0x3bc>)
  405a94:	4b37      	ldr	r3, [pc, #220]	; (405b74 <CLItask+0x3c0>)
  405a96:	4798      	blx	r3
  405a98:	b970      	cbnz	r0, 405ab8 <CLItask+0x304>
				hexabot_walk.movDir = atoi(strtok(NULL," "));
  405a9a:	4937      	ldr	r1, [pc, #220]	; (405b78 <CLItask+0x3c4>)
  405a9c:	4b37      	ldr	r3, [pc, #220]	; (405b7c <CLItask+0x3c8>)
  405a9e:	4798      	blx	r3
  405aa0:	4b37      	ldr	r3, [pc, #220]	; (405b80 <CLItask+0x3cc>)
  405aa2:	4798      	blx	r3
  405aa4:	4b37      	ldr	r3, [pc, #220]	; (405b84 <CLItask+0x3d0>)
  405aa6:	ee07 0a90 	vmov	s15, r0
  405aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405aae:	edc3 7a01 	vstr	s15, [r3, #4]
				hexabot_walk.ret = 1;
  405ab2:	2201      	movs	r2, #1
  405ab4:	629a      	str	r2, [r3, #40]	; 0x28
  405ab6:	e051      	b.n	405b5c <CLItask+0x3a8>
			}
			else if(!strcmp(BaseCmd,"gaitStance")){
  405ab8:	4638      	mov	r0, r7
  405aba:	4933      	ldr	r1, [pc, #204]	; (405b88 <CLItask+0x3d4>)
  405abc:	4b2d      	ldr	r3, [pc, #180]	; (405b74 <CLItask+0x3c0>)
  405abe:	4798      	blx	r3
  405ac0:	b948      	cbnz	r0, 405ad6 <CLItask+0x322>
				hexabot_walk.stance = atoi(strtok(NULL," "));
  405ac2:	492d      	ldr	r1, [pc, #180]	; (405b78 <CLItask+0x3c4>)
  405ac4:	4b2d      	ldr	r3, [pc, #180]	; (405b7c <CLItask+0x3c8>)
  405ac6:	4798      	blx	r3
  405ac8:	4b2d      	ldr	r3, [pc, #180]	; (405b80 <CLItask+0x3cc>)
  405aca:	4798      	blx	r3
  405acc:	4b2d      	ldr	r3, [pc, #180]	; (405b84 <CLItask+0x3d0>)
  405ace:	6098      	str	r0, [r3, #8]
				hexabot_walk.ret = 1;
  405ad0:	2201      	movs	r2, #1
  405ad2:	629a      	str	r2, [r3, #40]	; 0x28
  405ad4:	e042      	b.n	405b5c <CLItask+0x3a8>
			}
			else if(!strcmp(BaseCmd,"gaitHgt")){
  405ad6:	4638      	mov	r0, r7
  405ad8:	492c      	ldr	r1, [pc, #176]	; (405b8c <CLItask+0x3d8>)
  405ada:	4b26      	ldr	r3, [pc, #152]	; (405b74 <CLItask+0x3c0>)
  405adc:	4798      	blx	r3
  405ade:	b948      	cbnz	r0, 405af4 <CLItask+0x340>
				hexabot_walk.hgt = atoi(strtok(NULL," "));
  405ae0:	4925      	ldr	r1, [pc, #148]	; (405b78 <CLItask+0x3c4>)
  405ae2:	4b26      	ldr	r3, [pc, #152]	; (405b7c <CLItask+0x3c8>)
  405ae4:	4798      	blx	r3
  405ae6:	4b26      	ldr	r3, [pc, #152]	; (405b80 <CLItask+0x3cc>)
  405ae8:	4798      	blx	r3
  405aea:	4b26      	ldr	r3, [pc, #152]	; (405b84 <CLItask+0x3d0>)
  405aec:	60d8      	str	r0, [r3, #12]
				hexabot_walk.ret = 1;
  405aee:	2201      	movs	r2, #1
  405af0:	629a      	str	r2, [r3, #40]	; 0x28
  405af2:	e033      	b.n	405b5c <CLItask+0x3a8>
			}
			else if(!strcmp(BaseCmd,"gaitPup")){
  405af4:	4638      	mov	r0, r7
  405af6:	4926      	ldr	r1, [pc, #152]	; (405b90 <CLItask+0x3dc>)
  405af8:	4b1e      	ldr	r3, [pc, #120]	; (405b74 <CLItask+0x3c0>)
  405afa:	4798      	blx	r3
  405afc:	b948      	cbnz	r0, 405b12 <CLItask+0x35e>
				hexabot_walk.pup = atoi(strtok(NULL," "));
  405afe:	491e      	ldr	r1, [pc, #120]	; (405b78 <CLItask+0x3c4>)
  405b00:	4b1e      	ldr	r3, [pc, #120]	; (405b7c <CLItask+0x3c8>)
  405b02:	4798      	blx	r3
  405b04:	4b1e      	ldr	r3, [pc, #120]	; (405b80 <CLItask+0x3cc>)
  405b06:	4798      	blx	r3
  405b08:	4b1e      	ldr	r3, [pc, #120]	; (405b84 <CLItask+0x3d0>)
  405b0a:	6118      	str	r0, [r3, #16]
				hexabot_walk.ret = 1;
  405b0c:	2201      	movs	r2, #1
  405b0e:	629a      	str	r2, [r3, #40]	; 0x28
  405b10:	e024      	b.n	405b5c <CLItask+0x3a8>
			}
			else if(!strcmp(BaseCmd,"gaitStride")){
  405b12:	4638      	mov	r0, r7
  405b14:	491f      	ldr	r1, [pc, #124]	; (405b94 <CLItask+0x3e0>)
  405b16:	4b17      	ldr	r3, [pc, #92]	; (405b74 <CLItask+0x3c0>)
  405b18:	4798      	blx	r3
  405b1a:	b948      	cbnz	r0, 405b30 <CLItask+0x37c>
				hexabot_walk.stride = atoi(strtok(NULL," "));
  405b1c:	4916      	ldr	r1, [pc, #88]	; (405b78 <CLItask+0x3c4>)
  405b1e:	4b17      	ldr	r3, [pc, #92]	; (405b7c <CLItask+0x3c8>)
  405b20:	4798      	blx	r3
  405b22:	4b17      	ldr	r3, [pc, #92]	; (405b80 <CLItask+0x3cc>)
  405b24:	4798      	blx	r3
  405b26:	4b17      	ldr	r3, [pc, #92]	; (405b84 <CLItask+0x3d0>)
  405b28:	6158      	str	r0, [r3, #20]
				hexabot_walk.ret = 1;
  405b2a:	2201      	movs	r2, #1
  405b2c:	629a      	str	r2, [r3, #40]	; 0x28
  405b2e:	e015      	b.n	405b5c <CLItask+0x3a8>
			}
			
			else if(!strcmp(BaseCmd,"svoinhib")) {
  405b30:	4638      	mov	r0, r7
  405b32:	4919      	ldr	r1, [pc, #100]	; (405b98 <CLItask+0x3e4>)
  405b34:	4b0f      	ldr	r3, [pc, #60]	; (405b74 <CLItask+0x3c0>)
  405b36:	4798      	blx	r3
  405b38:	b980      	cbnz	r0, 405b5c <CLItask+0x3a8>
				if(atoi(strtok(NULL," "))) pio_set(PIOA,PIO_PA26);
  405b3a:	490f      	ldr	r1, [pc, #60]	; (405b78 <CLItask+0x3c4>)
  405b3c:	4b0f      	ldr	r3, [pc, #60]	; (405b7c <CLItask+0x3c8>)
  405b3e:	4798      	blx	r3
  405b40:	4b0f      	ldr	r3, [pc, #60]	; (405b80 <CLItask+0x3cc>)
  405b42:	4798      	blx	r3
  405b44:	b128      	cbz	r0, 405b52 <CLItask+0x39e>
  405b46:	4640      	mov	r0, r8
  405b48:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  405b4c:	4b13      	ldr	r3, [pc, #76]	; (405b9c <CLItask+0x3e8>)
  405b4e:	4798      	blx	r3
  405b50:	e004      	b.n	405b5c <CLItask+0x3a8>
				else pio_clear(PIOA,PIO_PA26);
  405b52:	4640      	mov	r0, r8
  405b54:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  405b58:	4b11      	ldr	r3, [pc, #68]	; (405ba0 <CLItask+0x3ec>)
  405b5a:	4798      	blx	r3
			}
			
			
			
			sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  405b5c:	4811      	ldr	r0, [pc, #68]	; (405ba4 <CLItask+0x3f0>)
  405b5e:	4b12      	ldr	r3, [pc, #72]	; (405ba8 <CLItask+0x3f4>)
  405b60:	4798      	blx	r3
			memset(CLIbuf,0,100);
  405b62:	4812      	ldr	r0, [pc, #72]	; (405bac <CLItask+0x3f8>)
  405b64:	2100      	movs	r1, #0
  405b66:	2264      	movs	r2, #100	; 0x64
  405b68:	4b11      	ldr	r3, [pc, #68]	; (405bb0 <CLItask+0x3fc>)
  405b6a:	4798      	blx	r3
  405b6c:	e643      	b.n	4057f6 <CLItask+0x42>
  405b6e:	bf00      	nop
  405b70:	0040f860 	.word	0x0040f860
  405b74:	004096c9 	.word	0x004096c9
  405b78:	0040f7c0 	.word	0x0040f7c0
  405b7c:	004099f9 	.word	0x004099f9
  405b80:	00408e45 	.word	0x00408e45
  405b84:	2040c554 	.word	0x2040c554
  405b88:	0040f868 	.word	0x0040f868
  405b8c:	0040f874 	.word	0x0040f874
  405b90:	0040f87c 	.word	0x0040f87c
  405b94:	0040f884 	.word	0x0040f884
  405b98:	0040f890 	.word	0x0040f890
  405b9c:	004027bd 	.word	0x004027bd
  405ba0:	004027c1 	.word	0x004027c1
  405ba4:	0040f79c 	.word	0x0040f79c
  405ba8:	0040019d 	.word	0x0040019d
  405bac:	2040c580 	.word	0x2040c580
  405bb0:	00409595 	.word	0x00409595
  405bb4:	00000000 	.word	0x00000000

00405bb8 <ImageProTask>:
			}
		}
	}
}

void ImageProTask(void* pvParams) {
  405bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405bbc:	ed2d 8b04 	vpush	{d8-d9}
  405bc0:	b083      	sub	sp, #12
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - STARTED\n");
  405bc2:	485b      	ldr	r0, [pc, #364]	; (405d30 <ImageProTask+0x178>)
  405bc4:	4c5b      	ldr	r4, [pc, #364]	; (405d34 <ImageProTask+0x17c>)
  405bc6:	47a0      	blx	r4
	
	ISIsem = xSemaphoreCreateBinary();
  405bc8:	2001      	movs	r0, #1
  405bca:	2100      	movs	r1, #0
  405bcc:	2203      	movs	r2, #3
  405bce:	4b5a      	ldr	r3, [pc, #360]	; (405d38 <ImageProTask+0x180>)
  405bd0:	4798      	blx	r3
  405bd2:	4b5a      	ldr	r3, [pc, #360]	; (405d3c <ImageProTask+0x184>)
  405bd4:	6018      	str	r0, [r3, #0]
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  405bd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  405bda:	4b59      	ldr	r3, [pc, #356]	; (405d40 <ImageProTask+0x188>)
  405bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405bde:	4b59      	ldr	r3, [pc, #356]	; (405d44 <ImageProTask+0x18c>)
  405be0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  405be4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405be8:	21e0      	movs	r1, #224	; 0xe0
  405bea:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405bee:	605a      	str	r2, [r3, #4]
	isi_enable_interrupt(ISI,1<<16|1<<17);
	NVIC_ClearPendingIRQ(ISI_IRQn);
	NVIC_SetPriority(ISI_IRQn,7);
	NVIC_EnableIRQ(ISI_IRQn);
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
  405bf0:	4855      	ldr	r0, [pc, #340]	; (405d48 <ImageProTask+0x190>)
  405bf2:	47a0      	blx	r4
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
  405bf4:	4b55      	ldr	r3, [pc, #340]	; (405d4c <ImageProTask+0x194>)
  405bf6:	681d      	ldr	r5, [r3, #0]
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  405bf8:	4f50      	ldr	r7, [pc, #320]	; (405d3c <ImageProTask+0x184>)
  405bfa:	4e55      	ldr	r6, [pc, #340]	; (405d50 <ImageProTask+0x198>)
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  405bfc:	ed9f 9b48 	vldr	d9, [pc, #288]	; 405d20 <ImageProTask+0x168>
  405c00:	ed9f 8b49 	vldr	d8, [pc, #292]	; 405d28 <ImageProTask+0x170>
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  405c04:	2400      	movs	r4, #0
  405c06:	6838      	ldr	r0, [r7, #0]
  405c08:	4621      	mov	r1, r4
  405c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  405c0e:	4623      	mov	r3, r4
  405c10:	47b0      	blx	r6
  405c12:	2801      	cmp	r0, #1
  405c14:	d1f7      	bne.n	405c06 <ImageProTask+0x4e>
				//do dif here	
				pio_set(LED3);
  405c16:	484f      	ldr	r0, [pc, #316]	; (405d54 <ImageProTask+0x19c>)
  405c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405c1c:	4b4e      	ldr	r3, [pc, #312]	; (405d58 <ImageProTask+0x1a0>)
  405c1e:	4798      	blx	r3
				diffPix=0;
  405c20:	2200      	movs	r2, #0
  405c22:	4b4e      	ldr	r3, [pc, #312]	; (405d5c <ImageProTask+0x1a4>)
  405c24:	601a      	str	r2, [r3, #0]
  405c26:	f04f 40e2 	mov.w	r0, #1895825408	; 0x71000000
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c2a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 405d78 <ImageProTask+0x1c0>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
						}
						else dif1[i] = 0x0000;
  405c2e:	4691      	mov	r9, r2
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
  405c30:	469c      	mov	ip, r3
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  405c32:	f8df e148 	ldr.w	lr, [pc, #328]	; 405d7c <ImageProTask+0x1c4>
  405c36:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
					tempframe0 = frame0[i];
  405c3a:	881a      	ldrh	r2, [r3, #0]
  405c3c:	b292      	uxth	r2, r2
  405c3e:	f100 410f 	add.w	r1, r0, #2399141888	; 0x8f000000
					tempframe1 = frame1[i];
  405c42:	5a6b      	ldrh	r3, [r5, r1]
  405c44:	b29b      	uxth	r3, r3
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c46:	f8d8 a000 	ldr.w	sl, [r8]
  405c4a:	0adc      	lsrs	r4, r3, #11
  405c4c:	ebc4 24d2 	rsb	r4, r4, r2, lsr #11
  405c50:	4554      	cmp	r4, sl
  405c52:	dc08      	bgt.n	405c66 <ImageProTask+0xae>
  405c54:	f403 64fc 	and.w	r4, r3, #2016	; 0x7e0
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  405c58:	f3c2 1b45 	ubfx	fp, r2, #5, #6
  405c5c:	ebab 1464 	sub.w	r4, fp, r4, asr #5
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c60:	45a2      	cmp	sl, r4
  405c62:	db10      	blt.n	405c86 <ImageProTask+0xce>
  405c64:	e007      	b.n	405c76 <ImageProTask+0xbe>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  405c66:	f3c3 1345 	ubfx	r3, r3, #5, #6
  405c6a:	f3c2 1445 	ubfx	r4, r2, #5, #6
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c6e:	1b1b      	subs	r3, r3, r4
  405c70:	bf18      	it	ne
  405c72:	2301      	movne	r3, #1
  405c74:	e015      	b.n	405ca2 <ImageProTask+0xea>
  405c76:	f003 0b1f 	and.w	fp, r3, #31
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  405c7a:	2a1e      	cmp	r2, #30
  405c7c:	bf8c      	ite	hi
  405c7e:	2400      	movhi	r4, #0
  405c80:	f00b 0401 	andls.w	r4, fp, #1
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  405c84:	b12c      	cbz	r4, 405c92 <ImageProTask+0xda>
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c86:	4053      	eors	r3, r2
  405c88:	f013 031f 	ands.w	r3, r3, #31
  405c8c:	bf18      	it	ne
  405c8e:	2301      	movne	r3, #1
  405c90:	e007      	b.n	405ca2 <ImageProTask+0xea>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  405c92:	f002 041f 	and.w	r4, r2, #31
  405c96:	ebcb 0304 	rsb	r3, fp, r4
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  405c9a:	459a      	cmp	sl, r3
  405c9c:	bfac      	ite	ge
  405c9e:	2300      	movge	r3, #0
  405ca0:	2301      	movlt	r3, #1
  405ca2:	b133      	cbz	r3, 405cb2 <ImageProTask+0xfa>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
  405ca4:	8002      	strh	r2, [r0, #0]
							diffPix++;
  405ca6:	f8dc 3000 	ldr.w	r3, [ip]
  405caa:	3301      	adds	r3, #1
  405cac:	f8cc 3000 	str.w	r3, [ip]
  405cb0:	e001      	b.n	405cb6 <ImageProTask+0xfe>
						}
						else dif1[i] = 0x0000;
  405cb2:	f8a0 9000 	strh.w	r9, [r0]
						//for(int d =0;d<20;d++) ((volatile uint16_t*)(0x7F000000))[0] = 0x0000; //for(int d =0;d<50;d++)	asm volatile ("nop");
						//((volatile uint8_t*)frame1)[2*i] = (tempframe0&0xFF00)>>8;
						//((volatile uint8_t*)frame1)[2*i+1] = tempframe0&0x00FF;
						frame1[i] = tempframe0;
  405cb6:	526a      	strh	r2, [r5, r1]
  405cb8:	3002      	adds	r0, #2
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  405cba:	4570      	cmp	r0, lr
  405cbc:	d1bb      	bne.n	405c36 <ImageProTask+0x7e>
						frame1[i] = tempframe0;
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
  405cbe:	4b28      	ldr	r3, [pc, #160]	; (405d60 <ImageProTask+0x1a8>)
  405cc0:	681b      	ldr	r3, [r3, #0]
  405cc2:	b323      	cbz	r3, 405d0e <ImageProTask+0x156>
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  405cc4:	4b25      	ldr	r3, [pc, #148]	; (405d5c <ImageProTask+0x1a4>)
  405cc6:	f8d3 8000 	ldr.w	r8, [r3]
  405cca:	4c26      	ldr	r4, [pc, #152]	; (405d64 <ImageProTask+0x1ac>)
  405ccc:	ee07 8a90 	vmov	s15, r8
  405cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405cd4:	ee17 0a90 	vmov	r0, s15
  405cd8:	4b23      	ldr	r3, [pc, #140]	; (405d68 <ImageProTask+0x1b0>)
  405cda:	4798      	blx	r3
  405cdc:	4602      	mov	r2, r0
  405cde:	460b      	mov	r3, r1
  405ce0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 405d80 <ImageProTask+0x1c8>
  405ce4:	47e0      	blx	ip
  405ce6:	ec53 2b19 	vmov	r2, r3, d9
  405cea:	f8df c098 	ldr.w	ip, [pc, #152]	; 405d84 <ImageProTask+0x1cc>
  405cee:	47e0      	blx	ip
  405cf0:	ec53 2b18 	vmov	r2, r3, d8
  405cf4:	f8df c090 	ldr.w	ip, [pc, #144]	; 405d88 <ImageProTask+0x1d0>
  405cf8:	47e0      	blx	ip
  405cfa:	e9cd 0100 	strd	r0, r1, [sp]
  405cfe:	4620      	mov	r0, r4
  405d00:	491a      	ldr	r1, [pc, #104]	; (405d6c <ImageProTask+0x1b4>)
  405d02:	4642      	mov	r2, r8
  405d04:	4b1a      	ldr	r3, [pc, #104]	; (405d70 <ImageProTask+0x1b8>)
  405d06:	4798      	blx	r3
					sendDebugString(buf);
  405d08:	4620      	mov	r0, r4
  405d0a:	4b0a      	ldr	r3, [pc, #40]	; (405d34 <ImageProTask+0x17c>)
  405d0c:	4798      	blx	r3
				}		
				pio_clear(LED3);
  405d0e:	4811      	ldr	r0, [pc, #68]	; (405d54 <ImageProTask+0x19c>)
  405d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405d14:	4b17      	ldr	r3, [pc, #92]	; (405d74 <ImageProTask+0x1bc>)
  405d16:	4798      	blx	r3
  405d18:	e774      	b.n	405c04 <ImageProTask+0x4c>
  405d1a:	bf00      	nop
  405d1c:	f3af 8000 	nop.w
  405d20:	00000000 	.word	0x00000000
  405d24:	40f2c000 	.word	0x40f2c000
  405d28:	00000000 	.word	0x00000000
  405d2c:	40590000 	.word	0x40590000
  405d30:	0040f89c 	.word	0x0040f89c
  405d34:	0040019d 	.word	0x0040019d
  405d38:	00401119 	.word	0x00401119
  405d3c:	2040c428 	.word	0x2040c428
  405d40:	4004c000 	.word	0x4004c000
  405d44:	e000e100 	.word	0xe000e100
  405d48:	0040f8d0 	.word	0x0040f8d0
  405d4c:	2040c5fc 	.word	0x2040c5fc
  405d50:	00401551 	.word	0x00401551
  405d54:	400e0e00 	.word	0x400e0e00
  405d58:	004027bd 	.word	0x004027bd
  405d5c:	2040c434 	.word	0x2040c434
  405d60:	2040c42c 	.word	0x2040c42c
  405d64:	2040c5e8 	.word	0x2040c5e8
  405d68:	004086f1 	.word	0x004086f1
  405d6c:	0040f904 	.word	0x0040f904
  405d70:	00409661 	.word	0x00409661
  405d74:	004027c1 	.word	0x004027c1
  405d78:	20400018 	.word	0x20400018
  405d7c:	71025800 	.word	0x71025800
  405d80:	00408435 	.word	0x00408435
  405d84:	004089ed 	.word	0x004089ed
  405d88:	00408799 	.word	0x00408799

00405d8c <main>:
//semaphores!
SemaphoreHandle_t ISIsem = NULL;
SemaphoreHandle_t UARTsem = NULL;

int main (void)
{
  405d8c:	b570      	push	{r4, r5, r6, lr}
  405d8e:	b084      	sub	sp, #16
		
	
	board_init();
  405d90:	4b24      	ldr	r3, [pc, #144]	; (405e24 <main+0x98>)
  405d92:	4798      	blx	r3
	sendDebugString("BOARD INITIALIZATION - FINISHED\n");
  405d94:	4824      	ldr	r0, [pc, #144]	; (405e28 <main+0x9c>)
  405d96:	4d25      	ldr	r5, [pc, #148]	; (405e2c <main+0xa0>)
  405d98:	47a8      	blx	r5
	intl_frame = (uint16_t*)malloc(240*320*2); //assign
  405d9a:	f44f 3016 	mov.w	r0, #153600	; 0x25800
  405d9e:	4c24      	ldr	r4, [pc, #144]	; (405e30 <main+0xa4>)
  405da0:	47a0      	blx	r4
  405da2:	4b24      	ldr	r3, [pc, #144]	; (405e34 <main+0xa8>)
  405da4:	6018      	str	r0, [r3, #0]
	SvoCal = (float*)malloc(sizeof(float)*2*18);
  405da6:	2090      	movs	r0, #144	; 0x90
  405da8:	47a0      	blx	r4
  405daa:	4b23      	ldr	r3, [pc, #140]	; (405e38 <main+0xac>)
  405dac:	6018      	str	r0, [r3, #0]
	sendDebugString("RTOS TASK INITIALIZATION - STARTED\n");
  405dae:	4823      	ldr	r0, [pc, #140]	; (405e3c <main+0xb0>)
  405db0:	47a8      	blx	r5
	
	xTaskCreate(vTask1,"TASK1",400,NULL,10,NULL);
  405db2:	230a      	movs	r3, #10
  405db4:	9300      	str	r3, [sp, #0]
  405db6:	2400      	movs	r4, #0
  405db8:	9401      	str	r4, [sp, #4]
  405dba:	9402      	str	r4, [sp, #8]
  405dbc:	9403      	str	r4, [sp, #12]
  405dbe:	4820      	ldr	r0, [pc, #128]	; (405e40 <main+0xb4>)
  405dc0:	4920      	ldr	r1, [pc, #128]	; (405e44 <main+0xb8>)
  405dc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
  405dc6:	4623      	mov	r3, r4
  405dc8:	4e1f      	ldr	r6, [pc, #124]	; (405e48 <main+0xbc>)
  405dca:	47b0      	blx	r6
	xTaskCreate(LegControlTask,"LEGCTRLTASK",1600,NULL,4,NULL);
  405dcc:	2304      	movs	r3, #4
  405dce:	9300      	str	r3, [sp, #0]
  405dd0:	9401      	str	r4, [sp, #4]
  405dd2:	9402      	str	r4, [sp, #8]
  405dd4:	9403      	str	r4, [sp, #12]
  405dd6:	481d      	ldr	r0, [pc, #116]	; (405e4c <main+0xc0>)
  405dd8:	491d      	ldr	r1, [pc, #116]	; (405e50 <main+0xc4>)
  405dda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  405dde:	4623      	mov	r3, r4
  405de0:	47b0      	blx	r6
	xTaskCreate(ImageProTask,"IMGTASK",400,NULL,3,NULL);
  405de2:	2303      	movs	r3, #3
  405de4:	9300      	str	r3, [sp, #0]
  405de6:	9401      	str	r4, [sp, #4]
  405de8:	9402      	str	r4, [sp, #8]
  405dea:	9403      	str	r4, [sp, #12]
  405dec:	4819      	ldr	r0, [pc, #100]	; (405e54 <main+0xc8>)
  405dee:	491a      	ldr	r1, [pc, #104]	; (405e58 <main+0xcc>)
  405df0:	f44f 72c8 	mov.w	r2, #400	; 0x190
  405df4:	4623      	mov	r3, r4
  405df6:	47b0      	blx	r6
	xTaskCreate(CLItask,"CLITASK",1600,NULL,5,NULL);
  405df8:	2305      	movs	r3, #5
  405dfa:	9300      	str	r3, [sp, #0]
  405dfc:	9401      	str	r4, [sp, #4]
  405dfe:	9402      	str	r4, [sp, #8]
  405e00:	9403      	str	r4, [sp, #12]
  405e02:	4816      	ldr	r0, [pc, #88]	; (405e5c <main+0xd0>)
  405e04:	4916      	ldr	r1, [pc, #88]	; (405e60 <main+0xd4>)
  405e06:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  405e0a:	4623      	mov	r3, r4
  405e0c:	47b0      	blx	r6
	
	sendDebugString("RTOS TASK INITIALIZATION - FINISHED\n");
  405e0e:	4815      	ldr	r0, [pc, #84]	; (405e64 <main+0xd8>)
  405e10:	47a8      	blx	r5
	
	sendDebugString("STARTING RTOS\n");
  405e12:	4815      	ldr	r0, [pc, #84]	; (405e68 <main+0xdc>)
  405e14:	47a8      	blx	r5
	vTaskStartScheduler();
  405e16:	4b15      	ldr	r3, [pc, #84]	; (405e6c <main+0xe0>)
  405e18:	4798      	blx	r3
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
  405e1a:	4815      	ldr	r0, [pc, #84]	; (405e70 <main+0xe4>)
  405e1c:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  405e1e:	4620      	mov	r0, r4
  405e20:	b004      	add	sp, #16
  405e22:	bd70      	pop	{r4, r5, r6, pc}
  405e24:	00402d85 	.word	0x00402d85
  405e28:	0040f924 	.word	0x0040f924
  405e2c:	0040019d 	.word	0x0040019d
  405e30:	00408ef9 	.word	0x00408ef9
  405e34:	2040c5fc 	.word	0x2040c5fc
  405e38:	2040c5e4 	.word	0x2040c5e4
  405e3c:	0040f948 	.word	0x0040f948
  405e40:	00404c65 	.word	0x00404c65
  405e44:	0040f96c 	.word	0x0040f96c
  405e48:	0040181d 	.word	0x0040181d
  405e4c:	00404cc9 	.word	0x00404cc9
  405e50:	0040f974 	.word	0x0040f974
  405e54:	00405bb9 	.word	0x00405bb9
  405e58:	0040f980 	.word	0x0040f980
  405e5c:	004057b5 	.word	0x004057b5
  405e60:	0040f988 	.word	0x0040f988
  405e64:	0040f990 	.word	0x0040f990
  405e68:	0040f9b8 	.word	0x0040f9b8
  405e6c:	00401a45 	.word	0x00401a45
  405e70:	0040f9c8 	.word	0x0040f9c8

00405e74 <ISI_Handler>:
	   ######################################
			 	INTERUPT HANDLERS
	   ######################################
	   ###################################### */
	
void ISI_Handler(void) {
  405e74:	b508      	push	{r3, lr}
	uint32_t status,imr;
	status = ISI->ISI_SR;
  405e76:	4b09      	ldr	r3, [pc, #36]	; (405e9c <ISI_Handler+0x28>)
  405e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  405e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	//pio_set(LED3);
	isi_frames_done++;
  405e7c:	4a08      	ldr	r2, [pc, #32]	; (405ea0 <ISI_Handler+0x2c>)
  405e7e:	6813      	ldr	r3, [r2, #0]
  405e80:	3301      	adds	r3, #1
  405e82:	6013      	str	r3, [r2, #0]
	if(isi_frames_done >= 1) {
  405e84:	2b00      	cmp	r3, #0
  405e86:	dd07      	ble.n	405e98 <ISI_Handler+0x24>
		xSemaphoreGiveFromISR(ISIsem,NULL);
  405e88:	4b06      	ldr	r3, [pc, #24]	; (405ea4 <ISI_Handler+0x30>)
  405e8a:	6818      	ldr	r0, [r3, #0]
  405e8c:	2100      	movs	r1, #0
  405e8e:	4b06      	ldr	r3, [pc, #24]	; (405ea8 <ISI_Handler+0x34>)
  405e90:	4798      	blx	r3
		isi_frames_done = 0;
  405e92:	2200      	movs	r2, #0
  405e94:	4b02      	ldr	r3, [pc, #8]	; (405ea0 <ISI_Handler+0x2c>)
  405e96:	601a      	str	r2, [r3, #0]
  405e98:	bd08      	pop	{r3, pc}
  405e9a:	bf00      	nop
  405e9c:	4004c000 	.word	0x4004c000
  405ea0:	2040c438 	.word	0x2040c438
  405ea4:	2040c428 	.word	0x2040c428
  405ea8:	00401471 	.word	0x00401471

00405eac <UART4_Handler>:
	}
}

void UART4_Handler(void) {
  405eac:	b500      	push	{lr}
  405eae:	b083      	sub	sp, #12
	uint32_t imr = ISI->ISI_IMR;
  405eb0:	4b0d      	ldr	r3, [pc, #52]	; (405ee8 <UART4_Handler+0x3c>)
  405eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	char temp;
	uart_read(UART4,&temp);
  405eb4:	480d      	ldr	r0, [pc, #52]	; (405eec <UART4_Handler+0x40>)
  405eb6:	f10d 0107 	add.w	r1, sp, #7
  405eba:	4b0d      	ldr	r3, [pc, #52]	; (405ef0 <UART4_Handler+0x44>)
  405ebc:	4798      	blx	r3
	CLIbuf[CLIbufIndex] = temp;
  405ebe:	4a0d      	ldr	r2, [pc, #52]	; (405ef4 <UART4_Handler+0x48>)
  405ec0:	6813      	ldr	r3, [r2, #0]
  405ec2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  405ec6:	490c      	ldr	r1, [pc, #48]	; (405ef8 <UART4_Handler+0x4c>)
  405ec8:	54c8      	strb	r0, [r1, r3]
	CLIbufIndex++;
  405eca:	3301      	adds	r3, #1
  405ecc:	6013      	str	r3, [r2, #0]
	if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
  405ece:	4b0b      	ldr	r3, [pc, #44]	; (405efc <UART4_Handler+0x50>)
  405ed0:	b2db      	uxtb	r3, r3
  405ed2:	f88d 3007 	strb.w	r3, [sp, #7]
  405ed6:	b123      	cbz	r3, 405ee2 <UART4_Handler+0x36>
  405ed8:	4b09      	ldr	r3, [pc, #36]	; (405f00 <UART4_Handler+0x54>)
  405eda:	6818      	ldr	r0, [r3, #0]
  405edc:	2100      	movs	r1, #0
  405ede:	4b09      	ldr	r3, [pc, #36]	; (405f04 <UART4_Handler+0x58>)
  405ee0:	4798      	blx	r3
}
  405ee2:	b003      	add	sp, #12
  405ee4:	f85d fb04 	ldr.w	pc, [sp], #4
  405ee8:	4004c000 	.word	0x4004c000
  405eec:	400e1e00 	.word	0x400e1e00
  405ef0:	00402d71 	.word	0x00402d71
  405ef4:	2040c430 	.word	0x2040c430
  405ef8:	2040c580 	.word	0x2040c580
  405efc:	0040f154 	.word	0x0040f154
  405f00:	2040c43c 	.word	0x2040c43c
  405f04:	00401471 	.word	0x00401471

00405f08 <cos>:
  405f08:	4a1f      	ldr	r2, [pc, #124]	; (405f88 <cos+0x80>)
  405f0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405f0e:	4293      	cmp	r3, r2
  405f10:	b530      	push	{r4, r5, lr}
  405f12:	b087      	sub	sp, #28
  405f14:	dd1b      	ble.n	405f4e <cos+0x46>
  405f16:	4a1d      	ldr	r2, [pc, #116]	; (405f8c <cos+0x84>)
  405f18:	4293      	cmp	r3, r2
  405f1a:	dd05      	ble.n	405f28 <cos+0x20>
  405f1c:	4602      	mov	r2, r0
  405f1e:	460b      	mov	r3, r1
  405f20:	f002 fa86 	bl	408430 <__aeabi_dsub>
  405f24:	b007      	add	sp, #28
  405f26:	bd30      	pop	{r4, r5, pc}
  405f28:	aa02      	add	r2, sp, #8
  405f2a:	f000 ff11 	bl	406d50 <__ieee754_rem_pio2>
  405f2e:	f000 0303 	and.w	r3, r0, #3
  405f32:	2b01      	cmp	r3, #1
  405f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f38:	d016      	beq.n	405f68 <cos+0x60>
  405f3a:	2b02      	cmp	r3, #2
  405f3c:	d00d      	beq.n	405f5a <cos+0x52>
  405f3e:	b1eb      	cbz	r3, 405f7c <cos+0x74>
  405f40:	2401      	movs	r4, #1
  405f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405f46:	9400      	str	r4, [sp, #0]
  405f48:	f001 fef2 	bl	407d30 <__kernel_sin>
  405f4c:	e7ea      	b.n	405f24 <cos+0x1c>
  405f4e:	2200      	movs	r2, #0
  405f50:	2300      	movs	r3, #0
  405f52:	f001 f9c9 	bl	4072e8 <__kernel_cos>
  405f56:	b007      	add	sp, #28
  405f58:	bd30      	pop	{r4, r5, pc}
  405f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405f5e:	f001 f9c3 	bl	4072e8 <__kernel_cos>
  405f62:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405f66:	e7dd      	b.n	405f24 <cos+0x1c>
  405f68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  405f6c:	9300      	str	r3, [sp, #0]
  405f6e:	4622      	mov	r2, r4
  405f70:	462b      	mov	r3, r5
  405f72:	f001 fedd 	bl	407d30 <__kernel_sin>
  405f76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405f7a:	e7d3      	b.n	405f24 <cos+0x1c>
  405f7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405f80:	f001 f9b2 	bl	4072e8 <__kernel_cos>
  405f84:	e7ce      	b.n	405f24 <cos+0x1c>
  405f86:	bf00      	nop
  405f88:	3fe921fb 	.word	0x3fe921fb
  405f8c:	7fefffff 	.word	0x7fefffff

00405f90 <sin>:
  405f90:	4a22      	ldr	r2, [pc, #136]	; (40601c <sin+0x8c>)
  405f92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405f96:	4293      	cmp	r3, r2
  405f98:	b530      	push	{r4, r5, lr}
  405f9a:	b087      	sub	sp, #28
  405f9c:	dd1b      	ble.n	405fd6 <sin+0x46>
  405f9e:	4a20      	ldr	r2, [pc, #128]	; (406020 <sin+0x90>)
  405fa0:	4293      	cmp	r3, r2
  405fa2:	dd05      	ble.n	405fb0 <sin+0x20>
  405fa4:	4602      	mov	r2, r0
  405fa6:	460b      	mov	r3, r1
  405fa8:	f002 fa42 	bl	408430 <__aeabi_dsub>
  405fac:	b007      	add	sp, #28
  405fae:	bd30      	pop	{r4, r5, pc}
  405fb0:	aa02      	add	r2, sp, #8
  405fb2:	f000 fecd 	bl	406d50 <__ieee754_rem_pio2>
  405fb6:	f000 0003 	and.w	r0, r0, #3
  405fba:	2801      	cmp	r0, #1
  405fbc:	d01e      	beq.n	405ffc <sin+0x6c>
  405fbe:	2802      	cmp	r0, #2
  405fc0:	d011      	beq.n	405fe6 <sin+0x56>
  405fc2:	b310      	cbz	r0, 40600a <sin+0x7a>
  405fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405fcc:	f001 f98c 	bl	4072e8 <__kernel_cos>
  405fd0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405fd4:	e7ea      	b.n	405fac <sin+0x1c>
  405fd6:	2400      	movs	r4, #0
  405fd8:	2200      	movs	r2, #0
  405fda:	2300      	movs	r3, #0
  405fdc:	9400      	str	r4, [sp, #0]
  405fde:	f001 fea7 	bl	407d30 <__kernel_sin>
  405fe2:	b007      	add	sp, #28
  405fe4:	bd30      	pop	{r4, r5, pc}
  405fe6:	2401      	movs	r4, #1
  405fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405ff0:	9400      	str	r4, [sp, #0]
  405ff2:	f001 fe9d 	bl	407d30 <__kernel_sin>
  405ff6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  405ffa:	e7d7      	b.n	405fac <sin+0x1c>
  405ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406000:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406004:	f001 f970 	bl	4072e8 <__kernel_cos>
  406008:	e7d0      	b.n	405fac <sin+0x1c>
  40600a:	2401      	movs	r4, #1
  40600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  406014:	9400      	str	r4, [sp, #0]
  406016:	f001 fe8b 	bl	407d30 <__kernel_sin>
  40601a:	e7c7      	b.n	405fac <sin+0x1c>
  40601c:	3fe921fb 	.word	0x3fe921fb
  406020:	7fefffff 	.word	0x7fefffff

00406024 <lroundf>:
  406024:	b510      	push	{r4, lr}
  406026:	f3c0 54c7 	ubfx	r4, r0, #23, #8
  40602a:	2800      	cmp	r0, #0
  40602c:	f1a4 027f 	sub.w	r2, r4, #127	; 0x7f
  406030:	bfb4      	ite	lt
  406032:	f04f 31ff 	movlt.w	r1, #4294967295
  406036:	2101      	movge	r1, #1
  406038:	2a1e      	cmp	r2, #30
  40603a:	dc0c      	bgt.n	406056 <lroundf+0x32>
  40603c:	2a00      	cmp	r2, #0
  40603e:	db17      	blt.n	406070 <lroundf+0x4c>
  406040:	f3c0 0316 	ubfx	r3, r0, #0, #23
  406044:	2a16      	cmp	r2, #22
  406046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40604a:	dd07      	ble.n	40605c <lroundf+0x38>
  40604c:	3c96      	subs	r4, #150	; 0x96
  40604e:	40a3      	lsls	r3, r4
  406050:	fb01 f003 	mul.w	r0, r1, r3
  406054:	bd10      	pop	{r4, pc}
  406056:	f002 feb1 	bl	408dbc <__aeabi_f2iz>
  40605a:	bd10      	pop	{r4, pc}
  40605c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  406060:	f1c2 0417 	rsb	r4, r2, #23
  406064:	4110      	asrs	r0, r2
  406066:	4403      	add	r3, r0
  406068:	40e3      	lsrs	r3, r4
  40606a:	fb01 f003 	mul.w	r0, r1, r3
  40606e:	bd10      	pop	{r4, pc}
  406070:	3201      	adds	r2, #1
  406072:	bf0c      	ite	eq
  406074:	4608      	moveq	r0, r1
  406076:	2000      	movne	r0, #0
  406078:	bd10      	pop	{r4, pc}
  40607a:	bf00      	nop

0040607c <acos>:
  40607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406080:	f8df 809c 	ldr.w	r8, [pc, #156]	; 406120 <acos+0xa4>
  406084:	b08a      	sub	sp, #40	; 0x28
  406086:	4606      	mov	r6, r0
  406088:	460f      	mov	r7, r1
  40608a:	f000 f8fd 	bl	406288 <__ieee754_acos>
  40608e:	f998 3000 	ldrsb.w	r3, [r8]
  406092:	4604      	mov	r4, r0
  406094:	460d      	mov	r5, r1
  406096:	3301      	adds	r3, #1
  406098:	d004      	beq.n	4060a4 <acos+0x28>
  40609a:	4630      	mov	r0, r6
  40609c:	4639      	mov	r1, r7
  40609e:	f002 f90f 	bl	4082c0 <__fpclassifyd>
  4060a2:	b920      	cbnz	r0, 4060ae <acos+0x32>
  4060a4:	4620      	mov	r0, r4
  4060a6:	4629      	mov	r1, r5
  4060a8:	b00a      	add	sp, #40	; 0x28
  4060aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060ae:	4630      	mov	r0, r6
  4060b0:	4639      	mov	r1, r7
  4060b2:	f002 f877 	bl	4081a4 <fabs>
  4060b6:	2200      	movs	r2, #0
  4060b8:	4b16      	ldr	r3, [pc, #88]	; (406114 <acos+0x98>)
  4060ba:	f002 fdfd 	bl	408cb8 <__aeabi_dcmpgt>
  4060be:	2800      	cmp	r0, #0
  4060c0:	d0f0      	beq.n	4060a4 <acos+0x28>
  4060c2:	2300      	movs	r3, #0
  4060c4:	2101      	movs	r1, #1
  4060c6:	4a14      	ldr	r2, [pc, #80]	; (406118 <acos+0x9c>)
  4060c8:	4814      	ldr	r0, [pc, #80]	; (40611c <acos+0xa0>)
  4060ca:	9308      	str	r3, [sp, #32]
  4060cc:	e88d 0006 	stmia.w	sp, {r1, r2}
  4060d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  4060d4:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4060d8:	f002 f916 	bl	408308 <nan>
  4060dc:	f998 3000 	ldrsb.w	r3, [r8]
  4060e0:	2b02      	cmp	r3, #2
  4060e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4060e6:	d00a      	beq.n	4060fe <acos+0x82>
  4060e8:	4668      	mov	r0, sp
  4060ea:	f002 f90b 	bl	408304 <matherr>
  4060ee:	b130      	cbz	r0, 4060fe <acos+0x82>
  4060f0:	9b08      	ldr	r3, [sp, #32]
  4060f2:	b94b      	cbnz	r3, 406108 <acos+0x8c>
  4060f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4060f8:	b00a      	add	sp, #40	; 0x28
  4060fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4060fe:	f002 fea5 	bl	408e4c <__errno>
  406102:	2321      	movs	r3, #33	; 0x21
  406104:	6003      	str	r3, [r0, #0]
  406106:	e7f3      	b.n	4060f0 <acos+0x74>
  406108:	f002 fea0 	bl	408e4c <__errno>
  40610c:	9b08      	ldr	r3, [sp, #32]
  40610e:	6003      	str	r3, [r0, #0]
  406110:	e7f0      	b.n	4060f4 <acos+0x78>
  406112:	bf00      	nop
  406114:	3ff00000 	.word	0x3ff00000
  406118:	0040fa04 	.word	0x0040fa04
  40611c:	0040f4e8 	.word	0x0040f4e8
  406120:	2040001c 	.word	0x2040001c

00406124 <asin>:
  406124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406128:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4061c8 <asin+0xa4>
  40612c:	b08a      	sub	sp, #40	; 0x28
  40612e:	4606      	mov	r6, r0
  406130:	460f      	mov	r7, r1
  406132:	f000 fb05 	bl	406740 <__ieee754_asin>
  406136:	f998 3000 	ldrsb.w	r3, [r8]
  40613a:	4604      	mov	r4, r0
  40613c:	460d      	mov	r5, r1
  40613e:	3301      	adds	r3, #1
  406140:	d004      	beq.n	40614c <asin+0x28>
  406142:	4630      	mov	r0, r6
  406144:	4639      	mov	r1, r7
  406146:	f002 f8bb 	bl	4082c0 <__fpclassifyd>
  40614a:	b920      	cbnz	r0, 406156 <asin+0x32>
  40614c:	4620      	mov	r0, r4
  40614e:	4629      	mov	r1, r5
  406150:	b00a      	add	sp, #40	; 0x28
  406152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406156:	4630      	mov	r0, r6
  406158:	4639      	mov	r1, r7
  40615a:	f002 f823 	bl	4081a4 <fabs>
  40615e:	2200      	movs	r2, #0
  406160:	4b16      	ldr	r3, [pc, #88]	; (4061bc <asin+0x98>)
  406162:	f002 fda9 	bl	408cb8 <__aeabi_dcmpgt>
  406166:	2800      	cmp	r0, #0
  406168:	d0f0      	beq.n	40614c <asin+0x28>
  40616a:	2300      	movs	r3, #0
  40616c:	2101      	movs	r1, #1
  40616e:	4a14      	ldr	r2, [pc, #80]	; (4061c0 <asin+0x9c>)
  406170:	4814      	ldr	r0, [pc, #80]	; (4061c4 <asin+0xa0>)
  406172:	9308      	str	r3, [sp, #32]
  406174:	e88d 0006 	stmia.w	sp, {r1, r2}
  406178:	e9cd 6704 	strd	r6, r7, [sp, #16]
  40617c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  406180:	f002 f8c2 	bl	408308 <nan>
  406184:	f998 3000 	ldrsb.w	r3, [r8]
  406188:	2b02      	cmp	r3, #2
  40618a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40618e:	d00a      	beq.n	4061a6 <asin+0x82>
  406190:	4668      	mov	r0, sp
  406192:	f002 f8b7 	bl	408304 <matherr>
  406196:	b130      	cbz	r0, 4061a6 <asin+0x82>
  406198:	9b08      	ldr	r3, [sp, #32]
  40619a:	b94b      	cbnz	r3, 4061b0 <asin+0x8c>
  40619c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4061a0:	b00a      	add	sp, #40	; 0x28
  4061a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4061a6:	f002 fe51 	bl	408e4c <__errno>
  4061aa:	2321      	movs	r3, #33	; 0x21
  4061ac:	6003      	str	r3, [r0, #0]
  4061ae:	e7f3      	b.n	406198 <asin+0x74>
  4061b0:	f002 fe4c 	bl	408e4c <__errno>
  4061b4:	9b08      	ldr	r3, [sp, #32]
  4061b6:	6003      	str	r3, [r0, #0]
  4061b8:	e7f0      	b.n	40619c <asin+0x78>
  4061ba:	bf00      	nop
  4061bc:	3ff00000 	.word	0x3ff00000
  4061c0:	0040fa0c 	.word	0x0040fa0c
  4061c4:	0040f4e8 	.word	0x0040f4e8
  4061c8:	2040001c 	.word	0x2040001c

004061cc <atan2>:
  4061cc:	f000 bce8 	b.w	406ba0 <__ieee754_atan2>

004061d0 <sqrt>:
  4061d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4061d4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 406280 <sqrt+0xb0>
  4061d8:	b08a      	sub	sp, #40	; 0x28
  4061da:	4606      	mov	r6, r0
  4061dc:	460f      	mov	r7, r1
  4061de:	f000 ffd5 	bl	40718c <__ieee754_sqrt>
  4061e2:	f998 3000 	ldrsb.w	r3, [r8]
  4061e6:	4604      	mov	r4, r0
  4061e8:	460d      	mov	r5, r1
  4061ea:	3301      	adds	r3, #1
  4061ec:	d02d      	beq.n	40624a <sqrt+0x7a>
  4061ee:	4630      	mov	r0, r6
  4061f0:	4639      	mov	r1, r7
  4061f2:	f002 f865 	bl	4082c0 <__fpclassifyd>
  4061f6:	b340      	cbz	r0, 40624a <sqrt+0x7a>
  4061f8:	2300      	movs	r3, #0
  4061fa:	4630      	mov	r0, r6
  4061fc:	4639      	mov	r1, r7
  4061fe:	2200      	movs	r2, #0
  406200:	f002 fd3c 	bl	408c7c <__aeabi_dcmplt>
  406204:	f04f 0301 	mov.w	r3, #1
  406208:	b900      	cbnz	r0, 40620c <sqrt+0x3c>
  40620a:	4603      	mov	r3, r0
  40620c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406210:	d01b      	beq.n	40624a <sqrt+0x7a>
  406212:	2101      	movs	r1, #1
  406214:	4a19      	ldr	r2, [pc, #100]	; (40627c <sqrt+0xac>)
  406216:	2300      	movs	r3, #0
  406218:	f898 4000 	ldrb.w	r4, [r8]
  40621c:	e88d 0006 	stmia.w	sp, {r1, r2}
  406220:	9308      	str	r3, [sp, #32]
  406222:	e9cd 6704 	strd	r6, r7, [sp, #16]
  406226:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40622a:	b99c      	cbnz	r4, 406254 <sqrt+0x84>
  40622c:	2200      	movs	r2, #0
  40622e:	2300      	movs	r3, #0
  406230:	e9cd 2306 	strd	r2, r3, [sp, #24]
  406234:	4668      	mov	r0, sp
  406236:	f002 f865 	bl	408304 <matherr>
  40623a:	b1a8      	cbz	r0, 406268 <sqrt+0x98>
  40623c:	9b08      	ldr	r3, [sp, #32]
  40623e:	b9c3      	cbnz	r3, 406272 <sqrt+0xa2>
  406240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  406244:	b00a      	add	sp, #40	; 0x28
  406246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40624a:	4620      	mov	r0, r4
  40624c:	4629      	mov	r1, r5
  40624e:	b00a      	add	sp, #40	; 0x28
  406250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406254:	2000      	movs	r0, #0
  406256:	2100      	movs	r1, #0
  406258:	4602      	mov	r2, r0
  40625a:	460b      	mov	r3, r1
  40625c:	f002 fbc6 	bl	4089ec <__aeabi_ddiv>
  406260:	2c02      	cmp	r4, #2
  406262:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406266:	d1e5      	bne.n	406234 <sqrt+0x64>
  406268:	f002 fdf0 	bl	408e4c <__errno>
  40626c:	2321      	movs	r3, #33	; 0x21
  40626e:	6003      	str	r3, [r0, #0]
  406270:	e7e4      	b.n	40623c <sqrt+0x6c>
  406272:	f002 fdeb 	bl	408e4c <__errno>
  406276:	9b08      	ldr	r3, [sp, #32]
  406278:	6003      	str	r3, [r0, #0]
  40627a:	e7e1      	b.n	406240 <sqrt+0x70>
  40627c:	0040fa14 	.word	0x0040fa14
  406280:	2040001c 	.word	0x2040001c
  406284:	00000000 	.word	0x00000000

00406288 <__ieee754_acos>:
  406288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40628c:	4ec6      	ldr	r6, [pc, #792]	; (4065a8 <__ieee754_acos+0x320>)
  40628e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  406292:	460c      	mov	r4, r1
  406294:	4605      	mov	r5, r0
  406296:	42b3      	cmp	r3, r6
  406298:	dd0c      	ble.n	4062b4 <__ieee754_acos+0x2c>
  40629a:	4fc4      	ldr	r7, [pc, #784]	; (4065ac <__ieee754_acos+0x324>)
  40629c:	441f      	add	r7, r3
  40629e:	4603      	mov	r3, r0
  4062a0:	433b      	orrs	r3, r7
  4062a2:	f040 80bb 	bne.w	40641c <__ieee754_acos+0x194>
  4062a6:	2900      	cmp	r1, #0
  4062a8:	f340 8144 	ble.w	406534 <__ieee754_acos+0x2ac>
  4062ac:	2000      	movs	r0, #0
  4062ae:	2100      	movs	r1, #0
  4062b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062b4:	4ebe      	ldr	r6, [pc, #760]	; (4065b0 <__ieee754_acos+0x328>)
  4062b6:	42b3      	cmp	r3, r6
  4062b8:	f340 80a8 	ble.w	40640c <__ieee754_acos+0x184>
  4062bc:	2900      	cmp	r1, #0
  4062be:	f2c0 817f 	blt.w	4065c0 <__ieee754_acos+0x338>
  4062c2:	4602      	mov	r2, r0
  4062c4:	4623      	mov	r3, r4
  4062c6:	2000      	movs	r0, #0
  4062c8:	49ba      	ldr	r1, [pc, #744]	; (4065b4 <__ieee754_acos+0x32c>)
  4062ca:	f002 f8b1 	bl	408430 <__aeabi_dsub>
  4062ce:	2200      	movs	r2, #0
  4062d0:	4bb9      	ldr	r3, [pc, #740]	; (4065b8 <__ieee754_acos+0x330>)
  4062d2:	2600      	movs	r6, #0
  4062d4:	f002 fa60 	bl	408798 <__aeabi_dmul>
  4062d8:	4604      	mov	r4, r0
  4062da:	460d      	mov	r5, r1
  4062dc:	f000 ff56 	bl	40718c <__ieee754_sqrt>
  4062e0:	4689      	mov	r9, r1
  4062e2:	4680      	mov	r8, r0
  4062e4:	4629      	mov	r1, r5
  4062e6:	4620      	mov	r0, r4
  4062e8:	a395      	add	r3, pc, #596	; (adr r3, 406540 <__ieee754_acos+0x2b8>)
  4062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4062ee:	f002 fa53 	bl	408798 <__aeabi_dmul>
  4062f2:	a395      	add	r3, pc, #596	; (adr r3, 406548 <__ieee754_acos+0x2c0>)
  4062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4062f8:	f002 f89c 	bl	408434 <__adddf3>
  4062fc:	4622      	mov	r2, r4
  4062fe:	462b      	mov	r3, r5
  406300:	f002 fa4a 	bl	408798 <__aeabi_dmul>
  406304:	a392      	add	r3, pc, #584	; (adr r3, 406550 <__ieee754_acos+0x2c8>)
  406306:	e9d3 2300 	ldrd	r2, r3, [r3]
  40630a:	f002 f891 	bl	408430 <__aeabi_dsub>
  40630e:	4622      	mov	r2, r4
  406310:	462b      	mov	r3, r5
  406312:	f002 fa41 	bl	408798 <__aeabi_dmul>
  406316:	a390      	add	r3, pc, #576	; (adr r3, 406558 <__ieee754_acos+0x2d0>)
  406318:	e9d3 2300 	ldrd	r2, r3, [r3]
  40631c:	f002 f88a 	bl	408434 <__adddf3>
  406320:	4622      	mov	r2, r4
  406322:	462b      	mov	r3, r5
  406324:	f002 fa38 	bl	408798 <__aeabi_dmul>
  406328:	a38d      	add	r3, pc, #564	; (adr r3, 406560 <__ieee754_acos+0x2d8>)
  40632a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40632e:	f002 f87f 	bl	408430 <__aeabi_dsub>
  406332:	4622      	mov	r2, r4
  406334:	462b      	mov	r3, r5
  406336:	f002 fa2f 	bl	408798 <__aeabi_dmul>
  40633a:	a38b      	add	r3, pc, #556	; (adr r3, 406568 <__ieee754_acos+0x2e0>)
  40633c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406340:	f002 f878 	bl	408434 <__adddf3>
  406344:	4622      	mov	r2, r4
  406346:	462b      	mov	r3, r5
  406348:	f002 fa26 	bl	408798 <__aeabi_dmul>
  40634c:	4682      	mov	sl, r0
  40634e:	468b      	mov	fp, r1
  406350:	4620      	mov	r0, r4
  406352:	4629      	mov	r1, r5
  406354:	a386      	add	r3, pc, #536	; (adr r3, 406570 <__ieee754_acos+0x2e8>)
  406356:	e9d3 2300 	ldrd	r2, r3, [r3]
  40635a:	f002 fa1d 	bl	408798 <__aeabi_dmul>
  40635e:	a386      	add	r3, pc, #536	; (adr r3, 406578 <__ieee754_acos+0x2f0>)
  406360:	e9d3 2300 	ldrd	r2, r3, [r3]
  406364:	f002 f864 	bl	408430 <__aeabi_dsub>
  406368:	4622      	mov	r2, r4
  40636a:	462b      	mov	r3, r5
  40636c:	f002 fa14 	bl	408798 <__aeabi_dmul>
  406370:	a383      	add	r3, pc, #524	; (adr r3, 406580 <__ieee754_acos+0x2f8>)
  406372:	e9d3 2300 	ldrd	r2, r3, [r3]
  406376:	f002 f85d 	bl	408434 <__adddf3>
  40637a:	4622      	mov	r2, r4
  40637c:	462b      	mov	r3, r5
  40637e:	f002 fa0b 	bl	408798 <__aeabi_dmul>
  406382:	a381      	add	r3, pc, #516	; (adr r3, 406588 <__ieee754_acos+0x300>)
  406384:	e9d3 2300 	ldrd	r2, r3, [r3]
  406388:	f002 f852 	bl	408430 <__aeabi_dsub>
  40638c:	4622      	mov	r2, r4
  40638e:	462b      	mov	r3, r5
  406390:	f002 fa02 	bl	408798 <__aeabi_dmul>
  406394:	2200      	movs	r2, #0
  406396:	4b87      	ldr	r3, [pc, #540]	; (4065b4 <__ieee754_acos+0x32c>)
  406398:	f002 f84c 	bl	408434 <__adddf3>
  40639c:	4602      	mov	r2, r0
  40639e:	460b      	mov	r3, r1
  4063a0:	4650      	mov	r0, sl
  4063a2:	4659      	mov	r1, fp
  4063a4:	f002 fb22 	bl	4089ec <__aeabi_ddiv>
  4063a8:	4642      	mov	r2, r8
  4063aa:	464b      	mov	r3, r9
  4063ac:	f002 f9f4 	bl	408798 <__aeabi_dmul>
  4063b0:	4632      	mov	r2, r6
  4063b2:	4682      	mov	sl, r0
  4063b4:	468b      	mov	fp, r1
  4063b6:	464b      	mov	r3, r9
  4063b8:	4630      	mov	r0, r6
  4063ba:	4649      	mov	r1, r9
  4063bc:	f002 f9ec 	bl	408798 <__aeabi_dmul>
  4063c0:	4602      	mov	r2, r0
  4063c2:	460b      	mov	r3, r1
  4063c4:	4620      	mov	r0, r4
  4063c6:	4629      	mov	r1, r5
  4063c8:	f002 f832 	bl	408430 <__aeabi_dsub>
  4063cc:	4604      	mov	r4, r0
  4063ce:	460d      	mov	r5, r1
  4063d0:	4632      	mov	r2, r6
  4063d2:	464b      	mov	r3, r9
  4063d4:	4640      	mov	r0, r8
  4063d6:	4649      	mov	r1, r9
  4063d8:	f002 f82c 	bl	408434 <__adddf3>
  4063dc:	4602      	mov	r2, r0
  4063de:	460b      	mov	r3, r1
  4063e0:	4620      	mov	r0, r4
  4063e2:	4629      	mov	r1, r5
  4063e4:	f002 fb02 	bl	4089ec <__aeabi_ddiv>
  4063e8:	4602      	mov	r2, r0
  4063ea:	460b      	mov	r3, r1
  4063ec:	4650      	mov	r0, sl
  4063ee:	4659      	mov	r1, fp
  4063f0:	f002 f820 	bl	408434 <__adddf3>
  4063f4:	4602      	mov	r2, r0
  4063f6:	460b      	mov	r3, r1
  4063f8:	4630      	mov	r0, r6
  4063fa:	4649      	mov	r1, r9
  4063fc:	f002 f81a 	bl	408434 <__adddf3>
  406400:	4602      	mov	r2, r0
  406402:	460b      	mov	r3, r1
  406404:	f002 f816 	bl	408434 <__adddf3>
  406408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40640c:	4a6b      	ldr	r2, [pc, #428]	; (4065bc <__ieee754_acos+0x334>)
  40640e:	4293      	cmp	r3, r2
  406410:	dc0e      	bgt.n	406430 <__ieee754_acos+0x1a8>
  406412:	a15f      	add	r1, pc, #380	; (adr r1, 406590 <__ieee754_acos+0x308>)
  406414:	e9d1 0100 	ldrd	r0, r1, [r1]
  406418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40641c:	4602      	mov	r2, r0
  40641e:	460b      	mov	r3, r1
  406420:	f002 f806 	bl	408430 <__aeabi_dsub>
  406424:	4602      	mov	r2, r0
  406426:	460b      	mov	r3, r1
  406428:	f002 fae0 	bl	4089ec <__aeabi_ddiv>
  40642c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406430:	4602      	mov	r2, r0
  406432:	460b      	mov	r3, r1
  406434:	f002 f9b0 	bl	408798 <__aeabi_dmul>
  406438:	4606      	mov	r6, r0
  40643a:	460f      	mov	r7, r1
  40643c:	a340      	add	r3, pc, #256	; (adr r3, 406540 <__ieee754_acos+0x2b8>)
  40643e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406442:	f002 f9a9 	bl	408798 <__aeabi_dmul>
  406446:	a340      	add	r3, pc, #256	; (adr r3, 406548 <__ieee754_acos+0x2c0>)
  406448:	e9d3 2300 	ldrd	r2, r3, [r3]
  40644c:	f001 fff2 	bl	408434 <__adddf3>
  406450:	4632      	mov	r2, r6
  406452:	463b      	mov	r3, r7
  406454:	f002 f9a0 	bl	408798 <__aeabi_dmul>
  406458:	a33d      	add	r3, pc, #244	; (adr r3, 406550 <__ieee754_acos+0x2c8>)
  40645a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40645e:	f001 ffe7 	bl	408430 <__aeabi_dsub>
  406462:	4632      	mov	r2, r6
  406464:	463b      	mov	r3, r7
  406466:	f002 f997 	bl	408798 <__aeabi_dmul>
  40646a:	a33b      	add	r3, pc, #236	; (adr r3, 406558 <__ieee754_acos+0x2d0>)
  40646c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406470:	f001 ffe0 	bl	408434 <__adddf3>
  406474:	4632      	mov	r2, r6
  406476:	463b      	mov	r3, r7
  406478:	f002 f98e 	bl	408798 <__aeabi_dmul>
  40647c:	a338      	add	r3, pc, #224	; (adr r3, 406560 <__ieee754_acos+0x2d8>)
  40647e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406482:	f001 ffd5 	bl	408430 <__aeabi_dsub>
  406486:	4632      	mov	r2, r6
  406488:	463b      	mov	r3, r7
  40648a:	f002 f985 	bl	408798 <__aeabi_dmul>
  40648e:	a336      	add	r3, pc, #216	; (adr r3, 406568 <__ieee754_acos+0x2e0>)
  406490:	e9d3 2300 	ldrd	r2, r3, [r3]
  406494:	f001 ffce 	bl	408434 <__adddf3>
  406498:	4632      	mov	r2, r6
  40649a:	463b      	mov	r3, r7
  40649c:	f002 f97c 	bl	408798 <__aeabi_dmul>
  4064a0:	4680      	mov	r8, r0
  4064a2:	4689      	mov	r9, r1
  4064a4:	4630      	mov	r0, r6
  4064a6:	4639      	mov	r1, r7
  4064a8:	a331      	add	r3, pc, #196	; (adr r3, 406570 <__ieee754_acos+0x2e8>)
  4064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4064ae:	f002 f973 	bl	408798 <__aeabi_dmul>
  4064b2:	a331      	add	r3, pc, #196	; (adr r3, 406578 <__ieee754_acos+0x2f0>)
  4064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4064b8:	f001 ffba 	bl	408430 <__aeabi_dsub>
  4064bc:	4632      	mov	r2, r6
  4064be:	463b      	mov	r3, r7
  4064c0:	f002 f96a 	bl	408798 <__aeabi_dmul>
  4064c4:	a32e      	add	r3, pc, #184	; (adr r3, 406580 <__ieee754_acos+0x2f8>)
  4064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4064ca:	f001 ffb3 	bl	408434 <__adddf3>
  4064ce:	4632      	mov	r2, r6
  4064d0:	463b      	mov	r3, r7
  4064d2:	f002 f961 	bl	408798 <__aeabi_dmul>
  4064d6:	a32c      	add	r3, pc, #176	; (adr r3, 406588 <__ieee754_acos+0x300>)
  4064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4064dc:	f001 ffa8 	bl	408430 <__aeabi_dsub>
  4064e0:	4632      	mov	r2, r6
  4064e2:	463b      	mov	r3, r7
  4064e4:	f002 f958 	bl	408798 <__aeabi_dmul>
  4064e8:	2200      	movs	r2, #0
  4064ea:	4b32      	ldr	r3, [pc, #200]	; (4065b4 <__ieee754_acos+0x32c>)
  4064ec:	f001 ffa2 	bl	408434 <__adddf3>
  4064f0:	4602      	mov	r2, r0
  4064f2:	460b      	mov	r3, r1
  4064f4:	4640      	mov	r0, r8
  4064f6:	4649      	mov	r1, r9
  4064f8:	f002 fa78 	bl	4089ec <__aeabi_ddiv>
  4064fc:	4602      	mov	r2, r0
  4064fe:	460b      	mov	r3, r1
  406500:	4628      	mov	r0, r5
  406502:	4621      	mov	r1, r4
  406504:	f002 f948 	bl	408798 <__aeabi_dmul>
  406508:	4602      	mov	r2, r0
  40650a:	460b      	mov	r3, r1
  40650c:	a122      	add	r1, pc, #136	; (adr r1, 406598 <__ieee754_acos+0x310>)
  40650e:	e9d1 0100 	ldrd	r0, r1, [r1]
  406512:	f001 ff8d 	bl	408430 <__aeabi_dsub>
  406516:	4602      	mov	r2, r0
  406518:	460b      	mov	r3, r1
  40651a:	4628      	mov	r0, r5
  40651c:	4621      	mov	r1, r4
  40651e:	f001 ff87 	bl	408430 <__aeabi_dsub>
  406522:	4602      	mov	r2, r0
  406524:	460b      	mov	r3, r1
  406526:	a11a      	add	r1, pc, #104	; (adr r1, 406590 <__ieee754_acos+0x308>)
  406528:	e9d1 0100 	ldrd	r0, r1, [r1]
  40652c:	f001 ff80 	bl	408430 <__aeabi_dsub>
  406530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406534:	a11a      	add	r1, pc, #104	; (adr r1, 4065a0 <__ieee754_acos+0x318>)
  406536:	e9d1 0100 	ldrd	r0, r1, [r1]
  40653a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40653e:	bf00      	nop
  406540:	0dfdf709 	.word	0x0dfdf709
  406544:	3f023de1 	.word	0x3f023de1
  406548:	7501b288 	.word	0x7501b288
  40654c:	3f49efe0 	.word	0x3f49efe0
  406550:	b5688f3b 	.word	0xb5688f3b
  406554:	3fa48228 	.word	0x3fa48228
  406558:	0e884455 	.word	0x0e884455
  40655c:	3fc9c155 	.word	0x3fc9c155
  406560:	03eb6f7d 	.word	0x03eb6f7d
  406564:	3fd4d612 	.word	0x3fd4d612
  406568:	55555555 	.word	0x55555555
  40656c:	3fc55555 	.word	0x3fc55555
  406570:	b12e9282 	.word	0xb12e9282
  406574:	3fb3b8c5 	.word	0x3fb3b8c5
  406578:	1b8d0159 	.word	0x1b8d0159
  40657c:	3fe6066c 	.word	0x3fe6066c
  406580:	9c598ac8 	.word	0x9c598ac8
  406584:	40002ae5 	.word	0x40002ae5
  406588:	1c8a2d4b 	.word	0x1c8a2d4b
  40658c:	40033a27 	.word	0x40033a27
  406590:	54442d18 	.word	0x54442d18
  406594:	3ff921fb 	.word	0x3ff921fb
  406598:	33145c07 	.word	0x33145c07
  40659c:	3c91a626 	.word	0x3c91a626
  4065a0:	54442d18 	.word	0x54442d18
  4065a4:	400921fb 	.word	0x400921fb
  4065a8:	3fefffff 	.word	0x3fefffff
  4065ac:	c0100000 	.word	0xc0100000
  4065b0:	3fdfffff 	.word	0x3fdfffff
  4065b4:	3ff00000 	.word	0x3ff00000
  4065b8:	3fe00000 	.word	0x3fe00000
  4065bc:	3c600000 	.word	0x3c600000
  4065c0:	2200      	movs	r2, #0
  4065c2:	4b5d      	ldr	r3, [pc, #372]	; (406738 <__ieee754_acos+0x4b0>)
  4065c4:	f001 ff36 	bl	408434 <__adddf3>
  4065c8:	2200      	movs	r2, #0
  4065ca:	4b5c      	ldr	r3, [pc, #368]	; (40673c <__ieee754_acos+0x4b4>)
  4065cc:	f002 f8e4 	bl	408798 <__aeabi_dmul>
  4065d0:	4604      	mov	r4, r0
  4065d2:	460d      	mov	r5, r1
  4065d4:	a340      	add	r3, pc, #256	; (adr r3, 4066d8 <__ieee754_acos+0x450>)
  4065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065da:	f002 f8dd 	bl	408798 <__aeabi_dmul>
  4065de:	a340      	add	r3, pc, #256	; (adr r3, 4066e0 <__ieee754_acos+0x458>)
  4065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065e4:	f001 ff26 	bl	408434 <__adddf3>
  4065e8:	4622      	mov	r2, r4
  4065ea:	462b      	mov	r3, r5
  4065ec:	f002 f8d4 	bl	408798 <__aeabi_dmul>
  4065f0:	a33d      	add	r3, pc, #244	; (adr r3, 4066e8 <__ieee754_acos+0x460>)
  4065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4065f6:	f001 ff1b 	bl	408430 <__aeabi_dsub>
  4065fa:	4622      	mov	r2, r4
  4065fc:	462b      	mov	r3, r5
  4065fe:	f002 f8cb 	bl	408798 <__aeabi_dmul>
  406602:	a33b      	add	r3, pc, #236	; (adr r3, 4066f0 <__ieee754_acos+0x468>)
  406604:	e9d3 2300 	ldrd	r2, r3, [r3]
  406608:	f001 ff14 	bl	408434 <__adddf3>
  40660c:	4622      	mov	r2, r4
  40660e:	462b      	mov	r3, r5
  406610:	f002 f8c2 	bl	408798 <__aeabi_dmul>
  406614:	a338      	add	r3, pc, #224	; (adr r3, 4066f8 <__ieee754_acos+0x470>)
  406616:	e9d3 2300 	ldrd	r2, r3, [r3]
  40661a:	f001 ff09 	bl	408430 <__aeabi_dsub>
  40661e:	4622      	mov	r2, r4
  406620:	462b      	mov	r3, r5
  406622:	f002 f8b9 	bl	408798 <__aeabi_dmul>
  406626:	a336      	add	r3, pc, #216	; (adr r3, 406700 <__ieee754_acos+0x478>)
  406628:	e9d3 2300 	ldrd	r2, r3, [r3]
  40662c:	f001 ff02 	bl	408434 <__adddf3>
  406630:	4622      	mov	r2, r4
  406632:	462b      	mov	r3, r5
  406634:	f002 f8b0 	bl	408798 <__aeabi_dmul>
  406638:	4680      	mov	r8, r0
  40663a:	4689      	mov	r9, r1
  40663c:	4620      	mov	r0, r4
  40663e:	4629      	mov	r1, r5
  406640:	f000 fda4 	bl	40718c <__ieee754_sqrt>
  406644:	4606      	mov	r6, r0
  406646:	460f      	mov	r7, r1
  406648:	4620      	mov	r0, r4
  40664a:	4629      	mov	r1, r5
  40664c:	a32e      	add	r3, pc, #184	; (adr r3, 406708 <__ieee754_acos+0x480>)
  40664e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406652:	f002 f8a1 	bl	408798 <__aeabi_dmul>
  406656:	a32e      	add	r3, pc, #184	; (adr r3, 406710 <__ieee754_acos+0x488>)
  406658:	e9d3 2300 	ldrd	r2, r3, [r3]
  40665c:	f001 fee8 	bl	408430 <__aeabi_dsub>
  406660:	4622      	mov	r2, r4
  406662:	462b      	mov	r3, r5
  406664:	f002 f898 	bl	408798 <__aeabi_dmul>
  406668:	a32b      	add	r3, pc, #172	; (adr r3, 406718 <__ieee754_acos+0x490>)
  40666a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40666e:	f001 fee1 	bl	408434 <__adddf3>
  406672:	4622      	mov	r2, r4
  406674:	462b      	mov	r3, r5
  406676:	f002 f88f 	bl	408798 <__aeabi_dmul>
  40667a:	a329      	add	r3, pc, #164	; (adr r3, 406720 <__ieee754_acos+0x498>)
  40667c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406680:	f001 fed6 	bl	408430 <__aeabi_dsub>
  406684:	4622      	mov	r2, r4
  406686:	462b      	mov	r3, r5
  406688:	f002 f886 	bl	408798 <__aeabi_dmul>
  40668c:	2200      	movs	r2, #0
  40668e:	4b2a      	ldr	r3, [pc, #168]	; (406738 <__ieee754_acos+0x4b0>)
  406690:	f001 fed0 	bl	408434 <__adddf3>
  406694:	4602      	mov	r2, r0
  406696:	460b      	mov	r3, r1
  406698:	4640      	mov	r0, r8
  40669a:	4649      	mov	r1, r9
  40669c:	f002 f9a6 	bl	4089ec <__aeabi_ddiv>
  4066a0:	4632      	mov	r2, r6
  4066a2:	463b      	mov	r3, r7
  4066a4:	f002 f878 	bl	408798 <__aeabi_dmul>
  4066a8:	a31f      	add	r3, pc, #124	; (adr r3, 406728 <__ieee754_acos+0x4a0>)
  4066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066ae:	f001 febf 	bl	408430 <__aeabi_dsub>
  4066b2:	4602      	mov	r2, r0
  4066b4:	460b      	mov	r3, r1
  4066b6:	4630      	mov	r0, r6
  4066b8:	4639      	mov	r1, r7
  4066ba:	f001 febb 	bl	408434 <__adddf3>
  4066be:	4602      	mov	r2, r0
  4066c0:	460b      	mov	r3, r1
  4066c2:	f001 feb7 	bl	408434 <__adddf3>
  4066c6:	4602      	mov	r2, r0
  4066c8:	460b      	mov	r3, r1
  4066ca:	a119      	add	r1, pc, #100	; (adr r1, 406730 <__ieee754_acos+0x4a8>)
  4066cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  4066d0:	f001 feae 	bl	408430 <__aeabi_dsub>
  4066d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066d8:	0dfdf709 	.word	0x0dfdf709
  4066dc:	3f023de1 	.word	0x3f023de1
  4066e0:	7501b288 	.word	0x7501b288
  4066e4:	3f49efe0 	.word	0x3f49efe0
  4066e8:	b5688f3b 	.word	0xb5688f3b
  4066ec:	3fa48228 	.word	0x3fa48228
  4066f0:	0e884455 	.word	0x0e884455
  4066f4:	3fc9c155 	.word	0x3fc9c155
  4066f8:	03eb6f7d 	.word	0x03eb6f7d
  4066fc:	3fd4d612 	.word	0x3fd4d612
  406700:	55555555 	.word	0x55555555
  406704:	3fc55555 	.word	0x3fc55555
  406708:	b12e9282 	.word	0xb12e9282
  40670c:	3fb3b8c5 	.word	0x3fb3b8c5
  406710:	1b8d0159 	.word	0x1b8d0159
  406714:	3fe6066c 	.word	0x3fe6066c
  406718:	9c598ac8 	.word	0x9c598ac8
  40671c:	40002ae5 	.word	0x40002ae5
  406720:	1c8a2d4b 	.word	0x1c8a2d4b
  406724:	40033a27 	.word	0x40033a27
  406728:	33145c07 	.word	0x33145c07
  40672c:	3c91a626 	.word	0x3c91a626
  406730:	54442d18 	.word	0x54442d18
  406734:	400921fb 	.word	0x400921fb
  406738:	3ff00000 	.word	0x3ff00000
  40673c:	3fe00000 	.word	0x3fe00000

00406740 <__ieee754_asin>:
  406740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406744:	4bbe      	ldr	r3, [pc, #760]	; (406a40 <__ieee754_asin+0x300>)
  406746:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40674a:	b086      	sub	sp, #24
  40674c:	460d      	mov	r5, r1
  40674e:	429e      	cmp	r6, r3
  406750:	4604      	mov	r4, r0
  406752:	468a      	mov	sl, r1
  406754:	dd11      	ble.n	40677a <__ieee754_asin+0x3a>
  406756:	4abb      	ldr	r2, [pc, #748]	; (406a44 <__ieee754_asin+0x304>)
  406758:	4603      	mov	r3, r0
  40675a:	4432      	add	r2, r6
  40675c:	4313      	orrs	r3, r2
  40675e:	d022      	beq.n	4067a6 <__ieee754_asin+0x66>
  406760:	4602      	mov	r2, r0
  406762:	460b      	mov	r3, r1
  406764:	f001 fe64 	bl	408430 <__aeabi_dsub>
  406768:	4602      	mov	r2, r0
  40676a:	460b      	mov	r3, r1
  40676c:	f002 f93e 	bl	4089ec <__aeabi_ddiv>
  406770:	4604      	mov	r4, r0
  406772:	4620      	mov	r0, r4
  406774:	b006      	add	sp, #24
  406776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40677a:	4bb3      	ldr	r3, [pc, #716]	; (406a48 <__ieee754_asin+0x308>)
  40677c:	429e      	cmp	r6, r3
  40677e:	dc2b      	bgt.n	4067d8 <__ieee754_asin+0x98>
  406780:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  406784:	f280 8168 	bge.w	406a58 <__ieee754_asin+0x318>
  406788:	a391      	add	r3, pc, #580	; (adr r3, 4069d0 <__ieee754_asin+0x290>)
  40678a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40678e:	f001 fe51 	bl	408434 <__adddf3>
  406792:	2200      	movs	r2, #0
  406794:	4bad      	ldr	r3, [pc, #692]	; (406a4c <__ieee754_asin+0x30c>)
  406796:	f002 fa8f 	bl	408cb8 <__aeabi_dcmpgt>
  40679a:	b1e8      	cbz	r0, 4067d8 <__ieee754_asin+0x98>
  40679c:	4629      	mov	r1, r5
  40679e:	4620      	mov	r0, r4
  4067a0:	b006      	add	sp, #24
  4067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067a6:	a38c      	add	r3, pc, #560	; (adr r3, 4069d8 <__ieee754_asin+0x298>)
  4067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067ac:	f001 fff4 	bl	408798 <__aeabi_dmul>
  4067b0:	4606      	mov	r6, r0
  4067b2:	460f      	mov	r7, r1
  4067b4:	4620      	mov	r0, r4
  4067b6:	4629      	mov	r1, r5
  4067b8:	a389      	add	r3, pc, #548	; (adr r3, 4069e0 <__ieee754_asin+0x2a0>)
  4067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067be:	f001 ffeb 	bl	408798 <__aeabi_dmul>
  4067c2:	4602      	mov	r2, r0
  4067c4:	460b      	mov	r3, r1
  4067c6:	4630      	mov	r0, r6
  4067c8:	4639      	mov	r1, r7
  4067ca:	f001 fe33 	bl	408434 <__adddf3>
  4067ce:	4604      	mov	r4, r0
  4067d0:	4620      	mov	r0, r4
  4067d2:	b006      	add	sp, #24
  4067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067d8:	4620      	mov	r0, r4
  4067da:	4629      	mov	r1, r5
  4067dc:	f001 fce2 	bl	4081a4 <fabs>
  4067e0:	4602      	mov	r2, r0
  4067e2:	460b      	mov	r3, r1
  4067e4:	2000      	movs	r0, #0
  4067e6:	4999      	ldr	r1, [pc, #612]	; (406a4c <__ieee754_asin+0x30c>)
  4067e8:	f001 fe22 	bl	408430 <__aeabi_dsub>
  4067ec:	2200      	movs	r2, #0
  4067ee:	4b98      	ldr	r3, [pc, #608]	; (406a50 <__ieee754_asin+0x310>)
  4067f0:	f001 ffd2 	bl	408798 <__aeabi_dmul>
  4067f4:	4604      	mov	r4, r0
  4067f6:	460d      	mov	r5, r1
  4067f8:	a37b      	add	r3, pc, #492	; (adr r3, 4069e8 <__ieee754_asin+0x2a8>)
  4067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067fe:	f001 ffcb 	bl	408798 <__aeabi_dmul>
  406802:	a37b      	add	r3, pc, #492	; (adr r3, 4069f0 <__ieee754_asin+0x2b0>)
  406804:	e9d3 2300 	ldrd	r2, r3, [r3]
  406808:	f001 fe14 	bl	408434 <__adddf3>
  40680c:	4622      	mov	r2, r4
  40680e:	462b      	mov	r3, r5
  406810:	f001 ffc2 	bl	408798 <__aeabi_dmul>
  406814:	a378      	add	r3, pc, #480	; (adr r3, 4069f8 <__ieee754_asin+0x2b8>)
  406816:	e9d3 2300 	ldrd	r2, r3, [r3]
  40681a:	f001 fe09 	bl	408430 <__aeabi_dsub>
  40681e:	4622      	mov	r2, r4
  406820:	462b      	mov	r3, r5
  406822:	f001 ffb9 	bl	408798 <__aeabi_dmul>
  406826:	a376      	add	r3, pc, #472	; (adr r3, 406a00 <__ieee754_asin+0x2c0>)
  406828:	e9d3 2300 	ldrd	r2, r3, [r3]
  40682c:	f001 fe02 	bl	408434 <__adddf3>
  406830:	4622      	mov	r2, r4
  406832:	462b      	mov	r3, r5
  406834:	f001 ffb0 	bl	408798 <__aeabi_dmul>
  406838:	a373      	add	r3, pc, #460	; (adr r3, 406a08 <__ieee754_asin+0x2c8>)
  40683a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40683e:	f001 fdf7 	bl	408430 <__aeabi_dsub>
  406842:	4622      	mov	r2, r4
  406844:	462b      	mov	r3, r5
  406846:	f001 ffa7 	bl	408798 <__aeabi_dmul>
  40684a:	a371      	add	r3, pc, #452	; (adr r3, 406a10 <__ieee754_asin+0x2d0>)
  40684c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406850:	f001 fdf0 	bl	408434 <__adddf3>
  406854:	4622      	mov	r2, r4
  406856:	462b      	mov	r3, r5
  406858:	f001 ff9e 	bl	408798 <__aeabi_dmul>
  40685c:	a36e      	add	r3, pc, #440	; (adr r3, 406a18 <__ieee754_asin+0x2d8>)
  40685e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406862:	e9cd 0100 	strd	r0, r1, [sp]
  406866:	4620      	mov	r0, r4
  406868:	4629      	mov	r1, r5
  40686a:	f001 ff95 	bl	408798 <__aeabi_dmul>
  40686e:	a36c      	add	r3, pc, #432	; (adr r3, 406a20 <__ieee754_asin+0x2e0>)
  406870:	e9d3 2300 	ldrd	r2, r3, [r3]
  406874:	f001 fddc 	bl	408430 <__aeabi_dsub>
  406878:	4622      	mov	r2, r4
  40687a:	462b      	mov	r3, r5
  40687c:	f001 ff8c 	bl	408798 <__aeabi_dmul>
  406880:	a369      	add	r3, pc, #420	; (adr r3, 406a28 <__ieee754_asin+0x2e8>)
  406882:	e9d3 2300 	ldrd	r2, r3, [r3]
  406886:	f001 fdd5 	bl	408434 <__adddf3>
  40688a:	4622      	mov	r2, r4
  40688c:	462b      	mov	r3, r5
  40688e:	f001 ff83 	bl	408798 <__aeabi_dmul>
  406892:	a367      	add	r3, pc, #412	; (adr r3, 406a30 <__ieee754_asin+0x2f0>)
  406894:	e9d3 2300 	ldrd	r2, r3, [r3]
  406898:	f001 fdca 	bl	408430 <__aeabi_dsub>
  40689c:	4622      	mov	r2, r4
  40689e:	462b      	mov	r3, r5
  4068a0:	f001 ff7a 	bl	408798 <__aeabi_dmul>
  4068a4:	4b69      	ldr	r3, [pc, #420]	; (406a4c <__ieee754_asin+0x30c>)
  4068a6:	2200      	movs	r2, #0
  4068a8:	f001 fdc4 	bl	408434 <__adddf3>
  4068ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4068b0:	4620      	mov	r0, r4
  4068b2:	4629      	mov	r1, r5
  4068b4:	f000 fc6a 	bl	40718c <__ieee754_sqrt>
  4068b8:	4b66      	ldr	r3, [pc, #408]	; (406a54 <__ieee754_asin+0x314>)
  4068ba:	4680      	mov	r8, r0
  4068bc:	4689      	mov	r9, r1
  4068be:	429e      	cmp	r6, r3
  4068c0:	dc64      	bgt.n	40698c <__ieee754_asin+0x24c>
  4068c2:	4602      	mov	r2, r0
  4068c4:	460b      	mov	r3, r1
  4068c6:	2600      	movs	r6, #0
  4068c8:	460f      	mov	r7, r1
  4068ca:	f001 fdb3 	bl	408434 <__adddf3>
  4068ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4068d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4068d6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4068da:	f002 f887 	bl	4089ec <__aeabi_ddiv>
  4068de:	4602      	mov	r2, r0
  4068e0:	460b      	mov	r3, r1
  4068e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4068e6:	f001 ff57 	bl	408798 <__aeabi_dmul>
  4068ea:	4632      	mov	r2, r6
  4068ec:	464b      	mov	r3, r9
  4068ee:	e9cd 0100 	strd	r0, r1, [sp]
  4068f2:	4630      	mov	r0, r6
  4068f4:	4649      	mov	r1, r9
  4068f6:	f001 ff4f 	bl	408798 <__aeabi_dmul>
  4068fa:	4602      	mov	r2, r0
  4068fc:	460b      	mov	r3, r1
  4068fe:	4620      	mov	r0, r4
  406900:	4629      	mov	r1, r5
  406902:	f001 fd95 	bl	408430 <__aeabi_dsub>
  406906:	4604      	mov	r4, r0
  406908:	460d      	mov	r5, r1
  40690a:	4632      	mov	r2, r6
  40690c:	464b      	mov	r3, r9
  40690e:	4640      	mov	r0, r8
  406910:	4649      	mov	r1, r9
  406912:	f001 fd8f 	bl	408434 <__adddf3>
  406916:	4602      	mov	r2, r0
  406918:	460b      	mov	r3, r1
  40691a:	4620      	mov	r0, r4
  40691c:	4629      	mov	r1, r5
  40691e:	f002 f865 	bl	4089ec <__aeabi_ddiv>
  406922:	4602      	mov	r2, r0
  406924:	460b      	mov	r3, r1
  406926:	f001 fd85 	bl	408434 <__adddf3>
  40692a:	4602      	mov	r2, r0
  40692c:	460b      	mov	r3, r1
  40692e:	a12c      	add	r1, pc, #176	; (adr r1, 4069e0 <__ieee754_asin+0x2a0>)
  406930:	e9d1 0100 	ldrd	r0, r1, [r1]
  406934:	f001 fd7c 	bl	408430 <__aeabi_dsub>
  406938:	4602      	mov	r2, r0
  40693a:	460b      	mov	r3, r1
  40693c:	e9dd 0100 	ldrd	r0, r1, [sp]
  406940:	f001 fd76 	bl	408430 <__aeabi_dsub>
  406944:	4632      	mov	r2, r6
  406946:	4604      	mov	r4, r0
  406948:	460d      	mov	r5, r1
  40694a:	463b      	mov	r3, r7
  40694c:	4630      	mov	r0, r6
  40694e:	4649      	mov	r1, r9
  406950:	f001 fd70 	bl	408434 <__adddf3>
  406954:	4602      	mov	r2, r0
  406956:	460b      	mov	r3, r1
  406958:	a137      	add	r1, pc, #220	; (adr r1, 406a38 <__ieee754_asin+0x2f8>)
  40695a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40695e:	f001 fd67 	bl	408430 <__aeabi_dsub>
  406962:	4602      	mov	r2, r0
  406964:	460b      	mov	r3, r1
  406966:	4620      	mov	r0, r4
  406968:	4629      	mov	r1, r5
  40696a:	f001 fd61 	bl	408430 <__aeabi_dsub>
  40696e:	4602      	mov	r2, r0
  406970:	460b      	mov	r3, r1
  406972:	a131      	add	r1, pc, #196	; (adr r1, 406a38 <__ieee754_asin+0x2f8>)
  406974:	e9d1 0100 	ldrd	r0, r1, [r1]
  406978:	f001 fd5a 	bl	408430 <__aeabi_dsub>
  40697c:	4604      	mov	r4, r0
  40697e:	f1ba 0f00 	cmp.w	sl, #0
  406982:	f73f aef6 	bgt.w	406772 <__ieee754_asin+0x32>
  406986:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40698a:	e6f2      	b.n	406772 <__ieee754_asin+0x32>
  40698c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406990:	e9dd 0100 	ldrd	r0, r1, [sp]
  406994:	f002 f82a 	bl	4089ec <__aeabi_ddiv>
  406998:	4602      	mov	r2, r0
  40699a:	460b      	mov	r3, r1
  40699c:	4640      	mov	r0, r8
  40699e:	4649      	mov	r1, r9
  4069a0:	f001 fefa 	bl	408798 <__aeabi_dmul>
  4069a4:	4642      	mov	r2, r8
  4069a6:	464b      	mov	r3, r9
  4069a8:	f001 fd44 	bl	408434 <__adddf3>
  4069ac:	4602      	mov	r2, r0
  4069ae:	460b      	mov	r3, r1
  4069b0:	f001 fd40 	bl	408434 <__adddf3>
  4069b4:	a30a      	add	r3, pc, #40	; (adr r3, 4069e0 <__ieee754_asin+0x2a0>)
  4069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069ba:	f001 fd39 	bl	408430 <__aeabi_dsub>
  4069be:	4602      	mov	r2, r0
  4069c0:	460b      	mov	r3, r1
  4069c2:	a105      	add	r1, pc, #20	; (adr r1, 4069d8 <__ieee754_asin+0x298>)
  4069c4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4069c8:	f001 fd32 	bl	408430 <__aeabi_dsub>
  4069cc:	4604      	mov	r4, r0
  4069ce:	e7d6      	b.n	40697e <__ieee754_asin+0x23e>
  4069d0:	8800759c 	.word	0x8800759c
  4069d4:	7e37e43c 	.word	0x7e37e43c
  4069d8:	54442d18 	.word	0x54442d18
  4069dc:	3ff921fb 	.word	0x3ff921fb
  4069e0:	33145c07 	.word	0x33145c07
  4069e4:	3c91a626 	.word	0x3c91a626
  4069e8:	0dfdf709 	.word	0x0dfdf709
  4069ec:	3f023de1 	.word	0x3f023de1
  4069f0:	7501b288 	.word	0x7501b288
  4069f4:	3f49efe0 	.word	0x3f49efe0
  4069f8:	b5688f3b 	.word	0xb5688f3b
  4069fc:	3fa48228 	.word	0x3fa48228
  406a00:	0e884455 	.word	0x0e884455
  406a04:	3fc9c155 	.word	0x3fc9c155
  406a08:	03eb6f7d 	.word	0x03eb6f7d
  406a0c:	3fd4d612 	.word	0x3fd4d612
  406a10:	55555555 	.word	0x55555555
  406a14:	3fc55555 	.word	0x3fc55555
  406a18:	b12e9282 	.word	0xb12e9282
  406a1c:	3fb3b8c5 	.word	0x3fb3b8c5
  406a20:	1b8d0159 	.word	0x1b8d0159
  406a24:	3fe6066c 	.word	0x3fe6066c
  406a28:	9c598ac8 	.word	0x9c598ac8
  406a2c:	40002ae5 	.word	0x40002ae5
  406a30:	1c8a2d4b 	.word	0x1c8a2d4b
  406a34:	40033a27 	.word	0x40033a27
  406a38:	54442d18 	.word	0x54442d18
  406a3c:	3fe921fb 	.word	0x3fe921fb
  406a40:	3fefffff 	.word	0x3fefffff
  406a44:	c0100000 	.word	0xc0100000
  406a48:	3fdfffff 	.word	0x3fdfffff
  406a4c:	3ff00000 	.word	0x3ff00000
  406a50:	3fe00000 	.word	0x3fe00000
  406a54:	3fef3332 	.word	0x3fef3332
  406a58:	4602      	mov	r2, r0
  406a5a:	460b      	mov	r3, r1
  406a5c:	f001 fe9c 	bl	408798 <__aeabi_dmul>
  406a60:	4606      	mov	r6, r0
  406a62:	460f      	mov	r7, r1
  406a64:	a338      	add	r3, pc, #224	; (adr r3, 406b48 <__ieee754_asin+0x408>)
  406a66:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a6a:	f001 fe95 	bl	408798 <__aeabi_dmul>
  406a6e:	a338      	add	r3, pc, #224	; (adr r3, 406b50 <__ieee754_asin+0x410>)
  406a70:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a74:	f001 fcde 	bl	408434 <__adddf3>
  406a78:	4632      	mov	r2, r6
  406a7a:	463b      	mov	r3, r7
  406a7c:	f001 fe8c 	bl	408798 <__aeabi_dmul>
  406a80:	a335      	add	r3, pc, #212	; (adr r3, 406b58 <__ieee754_asin+0x418>)
  406a82:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a86:	f001 fcd3 	bl	408430 <__aeabi_dsub>
  406a8a:	4632      	mov	r2, r6
  406a8c:	463b      	mov	r3, r7
  406a8e:	f001 fe83 	bl	408798 <__aeabi_dmul>
  406a92:	a333      	add	r3, pc, #204	; (adr r3, 406b60 <__ieee754_asin+0x420>)
  406a94:	e9d3 2300 	ldrd	r2, r3, [r3]
  406a98:	f001 fccc 	bl	408434 <__adddf3>
  406a9c:	4632      	mov	r2, r6
  406a9e:	463b      	mov	r3, r7
  406aa0:	f001 fe7a 	bl	408798 <__aeabi_dmul>
  406aa4:	a330      	add	r3, pc, #192	; (adr r3, 406b68 <__ieee754_asin+0x428>)
  406aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  406aaa:	f001 fcc1 	bl	408430 <__aeabi_dsub>
  406aae:	4632      	mov	r2, r6
  406ab0:	463b      	mov	r3, r7
  406ab2:	f001 fe71 	bl	408798 <__aeabi_dmul>
  406ab6:	a32e      	add	r3, pc, #184	; (adr r3, 406b70 <__ieee754_asin+0x430>)
  406ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406abc:	f001 fcba 	bl	408434 <__adddf3>
  406ac0:	4632      	mov	r2, r6
  406ac2:	463b      	mov	r3, r7
  406ac4:	f001 fe68 	bl	408798 <__aeabi_dmul>
  406ac8:	4680      	mov	r8, r0
  406aca:	4689      	mov	r9, r1
  406acc:	4630      	mov	r0, r6
  406ace:	4639      	mov	r1, r7
  406ad0:	a329      	add	r3, pc, #164	; (adr r3, 406b78 <__ieee754_asin+0x438>)
  406ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ad6:	f001 fe5f 	bl	408798 <__aeabi_dmul>
  406ada:	a329      	add	r3, pc, #164	; (adr r3, 406b80 <__ieee754_asin+0x440>)
  406adc:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ae0:	f001 fca6 	bl	408430 <__aeabi_dsub>
  406ae4:	4632      	mov	r2, r6
  406ae6:	463b      	mov	r3, r7
  406ae8:	f001 fe56 	bl	408798 <__aeabi_dmul>
  406aec:	a326      	add	r3, pc, #152	; (adr r3, 406b88 <__ieee754_asin+0x448>)
  406aee:	e9d3 2300 	ldrd	r2, r3, [r3]
  406af2:	f001 fc9f 	bl	408434 <__adddf3>
  406af6:	4632      	mov	r2, r6
  406af8:	463b      	mov	r3, r7
  406afa:	f001 fe4d 	bl	408798 <__aeabi_dmul>
  406afe:	a324      	add	r3, pc, #144	; (adr r3, 406b90 <__ieee754_asin+0x450>)
  406b00:	e9d3 2300 	ldrd	r2, r3, [r3]
  406b04:	f001 fc94 	bl	408430 <__aeabi_dsub>
  406b08:	4632      	mov	r2, r6
  406b0a:	463b      	mov	r3, r7
  406b0c:	f001 fe44 	bl	408798 <__aeabi_dmul>
  406b10:	2200      	movs	r2, #0
  406b12:	4b21      	ldr	r3, [pc, #132]	; (406b98 <__ieee754_asin+0x458>)
  406b14:	f001 fc8e 	bl	408434 <__adddf3>
  406b18:	4602      	mov	r2, r0
  406b1a:	460b      	mov	r3, r1
  406b1c:	4640      	mov	r0, r8
  406b1e:	4649      	mov	r1, r9
  406b20:	f001 ff64 	bl	4089ec <__aeabi_ddiv>
  406b24:	4602      	mov	r2, r0
  406b26:	460b      	mov	r3, r1
  406b28:	4620      	mov	r0, r4
  406b2a:	4629      	mov	r1, r5
  406b2c:	f001 fe34 	bl	408798 <__aeabi_dmul>
  406b30:	4622      	mov	r2, r4
  406b32:	462b      	mov	r3, r5
  406b34:	f001 fc7e 	bl	408434 <__adddf3>
  406b38:	4604      	mov	r4, r0
  406b3a:	4620      	mov	r0, r4
  406b3c:	b006      	add	sp, #24
  406b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406b42:	bf00      	nop
  406b44:	f3af 8000 	nop.w
  406b48:	0dfdf709 	.word	0x0dfdf709
  406b4c:	3f023de1 	.word	0x3f023de1
  406b50:	7501b288 	.word	0x7501b288
  406b54:	3f49efe0 	.word	0x3f49efe0
  406b58:	b5688f3b 	.word	0xb5688f3b
  406b5c:	3fa48228 	.word	0x3fa48228
  406b60:	0e884455 	.word	0x0e884455
  406b64:	3fc9c155 	.word	0x3fc9c155
  406b68:	03eb6f7d 	.word	0x03eb6f7d
  406b6c:	3fd4d612 	.word	0x3fd4d612
  406b70:	55555555 	.word	0x55555555
  406b74:	3fc55555 	.word	0x3fc55555
  406b78:	b12e9282 	.word	0xb12e9282
  406b7c:	3fb3b8c5 	.word	0x3fb3b8c5
  406b80:	1b8d0159 	.word	0x1b8d0159
  406b84:	3fe6066c 	.word	0x3fe6066c
  406b88:	9c598ac8 	.word	0x9c598ac8
  406b8c:	40002ae5 	.word	0x40002ae5
  406b90:	1c8a2d4b 	.word	0x1c8a2d4b
  406b94:	40033a27 	.word	0x40033a27
  406b98:	3ff00000 	.word	0x3ff00000
  406b9c:	00000000 	.word	0x00000000

00406ba0 <__ieee754_atan2>:
  406ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ba4:	4254      	negs	r4, r2
  406ba6:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
  406baa:	f8df a178 	ldr.w	sl, [pc, #376]	; 406d24 <__ieee754_atan2+0x184>
  406bae:	4606      	mov	r6, r0
  406bb0:	4314      	orrs	r4, r2
  406bb2:	460d      	mov	r5, r1
  406bb4:	4617      	mov	r7, r2
  406bb6:	469e      	mov	lr, r3
  406bb8:	ea48 74d4 	orr.w	r4, r8, r4, lsr #31
  406bbc:	4554      	cmp	r4, sl
  406bbe:	d83c      	bhi.n	406c3a <__ieee754_atan2+0x9a>
  406bc0:	4244      	negs	r4, r0
  406bc2:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  406bc6:	4689      	mov	r9, r1
  406bc8:	4304      	orrs	r4, r0
  406bca:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  406bce:	4554      	cmp	r4, sl
  406bd0:	d833      	bhi.n	406c3a <__ieee754_atan2+0x9a>
  406bd2:	4c53      	ldr	r4, [pc, #332]	; (406d20 <__ieee754_atan2+0x180>)
  406bd4:	441c      	add	r4, r3
  406bd6:	4314      	orrs	r4, r2
  406bd8:	d046      	beq.n	406c68 <__ieee754_atan2+0xc8>
  406bda:	179c      	asrs	r4, r3, #30
  406bdc:	f004 0402 	and.w	r4, r4, #2
  406be0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  406be4:	ea5b 0100 	orrs.w	r1, fp, r0
  406be8:	d02f      	beq.n	406c4a <__ieee754_atan2+0xaa>
  406bea:	ea58 0107 	orrs.w	r1, r8, r7
  406bee:	d035      	beq.n	406c5c <__ieee754_atan2+0xbc>
  406bf0:	494c      	ldr	r1, [pc, #304]	; (406d24 <__ieee754_atan2+0x184>)
  406bf2:	4588      	cmp	r8, r1
  406bf4:	d045      	beq.n	406c82 <__ieee754_atan2+0xe2>
  406bf6:	494b      	ldr	r1, [pc, #300]	; (406d24 <__ieee754_atan2+0x184>)
  406bf8:	458b      	cmp	fp, r1
  406bfa:	d02f      	beq.n	406c5c <__ieee754_atan2+0xbc>
  406bfc:	ebc8 080b 	rsb	r8, r8, fp
  406c00:	ea4f 5828 	mov.w	r8, r8, asr #20
  406c04:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
  406c08:	dc37      	bgt.n	406c7a <__ieee754_atan2+0xda>
  406c0a:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
  406c0e:	da60      	bge.n	406cd2 <__ieee754_atan2+0x132>
  406c10:	f1be 0f00 	cmp.w	lr, #0
  406c14:	da5d      	bge.n	406cd2 <__ieee754_atan2+0x132>
  406c16:	2000      	movs	r0, #0
  406c18:	2100      	movs	r1, #0
  406c1a:	2c01      	cmp	r4, #1
  406c1c:	d056      	beq.n	406ccc <__ieee754_atan2+0x12c>
  406c1e:	2c02      	cmp	r4, #2
  406c20:	d047      	beq.n	406cb2 <__ieee754_atan2+0x112>
  406c22:	b184      	cbz	r4, 406c46 <__ieee754_atan2+0xa6>
  406c24:	a338      	add	r3, pc, #224	; (adr r3, 406d08 <__ieee754_atan2+0x168>)
  406c26:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c2a:	f001 fc01 	bl	408430 <__aeabi_dsub>
  406c2e:	a338      	add	r3, pc, #224	; (adr r3, 406d10 <__ieee754_atan2+0x170>)
  406c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c34:	f001 fbfc 	bl	408430 <__aeabi_dsub>
  406c38:	e005      	b.n	406c46 <__ieee754_atan2+0xa6>
  406c3a:	4610      	mov	r0, r2
  406c3c:	4619      	mov	r1, r3
  406c3e:	4632      	mov	r2, r6
  406c40:	462b      	mov	r3, r5
  406c42:	f001 fbf7 	bl	408434 <__adddf3>
  406c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c4a:	2c03      	cmp	r4, #3
  406c4c:	d8cd      	bhi.n	406bea <__ieee754_atan2+0x4a>
  406c4e:	e8df f004 	tbb	[pc, r4]
  406c52:	1212      	.short	0x1212
  406c54:	0f02      	.short	0x0f02
  406c56:	4834      	ldr	r0, [pc, #208]	; (406d28 <__ieee754_atan2+0x188>)
  406c58:	4934      	ldr	r1, [pc, #208]	; (406d2c <__ieee754_atan2+0x18c>)
  406c5a:	e7f4      	b.n	406c46 <__ieee754_atan2+0xa6>
  406c5c:	f1b9 0f00 	cmp.w	r9, #0
  406c60:	4831      	ldr	r0, [pc, #196]	; (406d28 <__ieee754_atan2+0x188>)
  406c62:	db24      	blt.n	406cae <__ieee754_atan2+0x10e>
  406c64:	4932      	ldr	r1, [pc, #200]	; (406d30 <__ieee754_atan2+0x190>)
  406c66:	e7ee      	b.n	406c46 <__ieee754_atan2+0xa6>
  406c68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c6c:	f001 b918 	b.w	407ea0 <atan>
  406c70:	482d      	ldr	r0, [pc, #180]	; (406d28 <__ieee754_atan2+0x188>)
  406c72:	4930      	ldr	r1, [pc, #192]	; (406d34 <__ieee754_atan2+0x194>)
  406c74:	e7e7      	b.n	406c46 <__ieee754_atan2+0xa6>
  406c76:	4629      	mov	r1, r5
  406c78:	e7e5      	b.n	406c46 <__ieee754_atan2+0xa6>
  406c7a:	a127      	add	r1, pc, #156	; (adr r1, 406d18 <__ieee754_atan2+0x178>)
  406c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
  406c80:	e7cb      	b.n	406c1a <__ieee754_atan2+0x7a>
  406c82:	45c3      	cmp	fp, r8
  406c84:	d02e      	beq.n	406ce4 <__ieee754_atan2+0x144>
  406c86:	2c03      	cmp	r4, #3
  406c88:	d8b5      	bhi.n	406bf6 <__ieee754_atan2+0x56>
  406c8a:	a101      	add	r1, pc, #4	; (adr r1, 406c90 <__ieee754_atan2+0xf0>)
  406c8c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  406c90:	00406ca1 	.word	0x00406ca1
  406c94:	00406ca7 	.word	0x00406ca7
  406c98:	00406c57 	.word	0x00406c57
  406c9c:	00406c71 	.word	0x00406c71
  406ca0:	2000      	movs	r0, #0
  406ca2:	4601      	mov	r1, r0
  406ca4:	e7cf      	b.n	406c46 <__ieee754_atan2+0xa6>
  406ca6:	2000      	movs	r0, #0
  406ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406cac:	e7cb      	b.n	406c46 <__ieee754_atan2+0xa6>
  406cae:	4922      	ldr	r1, [pc, #136]	; (406d38 <__ieee754_atan2+0x198>)
  406cb0:	e7c9      	b.n	406c46 <__ieee754_atan2+0xa6>
  406cb2:	a315      	add	r3, pc, #84	; (adr r3, 406d08 <__ieee754_atan2+0x168>)
  406cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  406cb8:	f001 fbba 	bl	408430 <__aeabi_dsub>
  406cbc:	4602      	mov	r2, r0
  406cbe:	460b      	mov	r3, r1
  406cc0:	a113      	add	r1, pc, #76	; (adr r1, 406d10 <__ieee754_atan2+0x170>)
  406cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
  406cc6:	f001 fbb3 	bl	408430 <__aeabi_dsub>
  406cca:	e7bc      	b.n	406c46 <__ieee754_atan2+0xa6>
  406ccc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  406cd0:	e7b9      	b.n	406c46 <__ieee754_atan2+0xa6>
  406cd2:	4630      	mov	r0, r6
  406cd4:	4629      	mov	r1, r5
  406cd6:	f001 fe89 	bl	4089ec <__aeabi_ddiv>
  406cda:	f001 fa63 	bl	4081a4 <fabs>
  406cde:	f001 f8df 	bl	407ea0 <atan>
  406ce2:	e79a      	b.n	406c1a <__ieee754_atan2+0x7a>
  406ce4:	2c03      	cmp	r4, #3
  406ce6:	d8b9      	bhi.n	406c5c <__ieee754_atan2+0xbc>
  406ce8:	e8df f004 	tbb	[pc, r4]
  406cec:	05080b02 	.word	0x05080b02
  406cf0:	480d      	ldr	r0, [pc, #52]	; (406d28 <__ieee754_atan2+0x188>)
  406cf2:	4912      	ldr	r1, [pc, #72]	; (406d3c <__ieee754_atan2+0x19c>)
  406cf4:	e7a7      	b.n	406c46 <__ieee754_atan2+0xa6>
  406cf6:	4812      	ldr	r0, [pc, #72]	; (406d40 <__ieee754_atan2+0x1a0>)
  406cf8:	4912      	ldr	r1, [pc, #72]	; (406d44 <__ieee754_atan2+0x1a4>)
  406cfa:	e7a4      	b.n	406c46 <__ieee754_atan2+0xa6>
  406cfc:	4810      	ldr	r0, [pc, #64]	; (406d40 <__ieee754_atan2+0x1a0>)
  406cfe:	4912      	ldr	r1, [pc, #72]	; (406d48 <__ieee754_atan2+0x1a8>)
  406d00:	e7a1      	b.n	406c46 <__ieee754_atan2+0xa6>
  406d02:	4809      	ldr	r0, [pc, #36]	; (406d28 <__ieee754_atan2+0x188>)
  406d04:	4911      	ldr	r1, [pc, #68]	; (406d4c <__ieee754_atan2+0x1ac>)
  406d06:	e79e      	b.n	406c46 <__ieee754_atan2+0xa6>
  406d08:	33145c07 	.word	0x33145c07
  406d0c:	3ca1a626 	.word	0x3ca1a626
  406d10:	54442d18 	.word	0x54442d18
  406d14:	400921fb 	.word	0x400921fb
  406d18:	54442d18 	.word	0x54442d18
  406d1c:	3ff921fb 	.word	0x3ff921fb
  406d20:	c0100000 	.word	0xc0100000
  406d24:	7ff00000 	.word	0x7ff00000
  406d28:	54442d18 	.word	0x54442d18
  406d2c:	400921fb 	.word	0x400921fb
  406d30:	3ff921fb 	.word	0x3ff921fb
  406d34:	c00921fb 	.word	0xc00921fb
  406d38:	bff921fb 	.word	0xbff921fb
  406d3c:	3fe921fb 	.word	0x3fe921fb
  406d40:	7f3321d2 	.word	0x7f3321d2
  406d44:	c002d97c 	.word	0xc002d97c
  406d48:	4002d97c 	.word	0x4002d97c
  406d4c:	bfe921fb 	.word	0xbfe921fb

00406d50 <__ieee754_rem_pio2>:
  406d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d54:	4c96      	ldr	r4, [pc, #600]	; (406fb0 <__ieee754_rem_pio2+0x260>)
  406d56:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  406d5a:	b08f      	sub	sp, #60	; 0x3c
  406d5c:	460b      	mov	r3, r1
  406d5e:	42a7      	cmp	r7, r4
  406d60:	460e      	mov	r6, r1
  406d62:	f340 8082 	ble.w	406e6a <__ieee754_rem_pio2+0x11a>
  406d66:	4614      	mov	r4, r2
  406d68:	4a92      	ldr	r2, [pc, #584]	; (406fb4 <__ieee754_rem_pio2+0x264>)
  406d6a:	4297      	cmp	r7, r2
  406d6c:	dc28      	bgt.n	406dc0 <__ieee754_rem_pio2+0x70>
  406d6e:	2900      	cmp	r1, #0
  406d70:	a385      	add	r3, pc, #532	; (adr r3, 406f88 <__ieee754_rem_pio2+0x238>)
  406d72:	e9d3 2300 	ldrd	r2, r3, [r3]
  406d76:	f340 81a3 	ble.w	4070c0 <__ieee754_rem_pio2+0x370>
  406d7a:	f001 fb59 	bl	408430 <__aeabi_dsub>
  406d7e:	4b8e      	ldr	r3, [pc, #568]	; (406fb8 <__ieee754_rem_pio2+0x268>)
  406d80:	4680      	mov	r8, r0
  406d82:	4689      	mov	r9, r1
  406d84:	429f      	cmp	r7, r3
  406d86:	f000 8087 	beq.w	406e98 <__ieee754_rem_pio2+0x148>
  406d8a:	2501      	movs	r5, #1
  406d8c:	a380      	add	r3, pc, #512	; (adr r3, 406f90 <__ieee754_rem_pio2+0x240>)
  406d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  406d92:	f001 fb4d 	bl	408430 <__aeabi_dsub>
  406d96:	4606      	mov	r6, r0
  406d98:	460f      	mov	r7, r1
  406d9a:	4640      	mov	r0, r8
  406d9c:	4632      	mov	r2, r6
  406d9e:	4649      	mov	r1, r9
  406da0:	463b      	mov	r3, r7
  406da2:	e9c4 6700 	strd	r6, r7, [r4]
  406da6:	f001 fb43 	bl	408430 <__aeabi_dsub>
  406daa:	a379      	add	r3, pc, #484	; (adr r3, 406f90 <__ieee754_rem_pio2+0x240>)
  406dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  406db0:	f001 fb3e 	bl	408430 <__aeabi_dsub>
  406db4:	e9c4 0102 	strd	r0, r1, [r4, #8]
  406db8:	4628      	mov	r0, r5
  406dba:	b00f      	add	sp, #60	; 0x3c
  406dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dc0:	4a7e      	ldr	r2, [pc, #504]	; (406fbc <__ieee754_rem_pio2+0x26c>)
  406dc2:	4297      	cmp	r7, r2
  406dc4:	f340 8087 	ble.w	406ed6 <__ieee754_rem_pio2+0x186>
  406dc8:	4a7d      	ldr	r2, [pc, #500]	; (406fc0 <__ieee754_rem_pio2+0x270>)
  406dca:	4297      	cmp	r7, r2
  406dcc:	dc5a      	bgt.n	406e84 <__ieee754_rem_pio2+0x134>
  406dce:	153a      	asrs	r2, r7, #20
  406dd0:	4682      	mov	sl, r0
  406dd2:	f2a2 4516 	subw	r5, r2, #1046	; 0x416
  406dd6:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
  406dda:	468b      	mov	fp, r1
  406ddc:	f001 ff76 	bl	408ccc <__aeabi_d2iz>
  406de0:	f001 fc74 	bl	4086cc <__aeabi_i2d>
  406de4:	4680      	mov	r8, r0
  406de6:	4689      	mov	r9, r1
  406de8:	4650      	mov	r0, sl
  406dea:	4642      	mov	r2, r8
  406dec:	4659      	mov	r1, fp
  406dee:	464b      	mov	r3, r9
  406df0:	e9cd 8908 	strd	r8, r9, [sp, #32]
  406df4:	f001 fb1c 	bl	408430 <__aeabi_dsub>
  406df8:	2200      	movs	r2, #0
  406dfa:	4b72      	ldr	r3, [pc, #456]	; (406fc4 <__ieee754_rem_pio2+0x274>)
  406dfc:	f001 fccc 	bl	408798 <__aeabi_dmul>
  406e00:	468b      	mov	fp, r1
  406e02:	4682      	mov	sl, r0
  406e04:	f001 ff62 	bl	408ccc <__aeabi_d2iz>
  406e08:	f001 fc60 	bl	4086cc <__aeabi_i2d>
  406e0c:	4680      	mov	r8, r0
  406e0e:	4689      	mov	r9, r1
  406e10:	4650      	mov	r0, sl
  406e12:	4642      	mov	r2, r8
  406e14:	4659      	mov	r1, fp
  406e16:	464b      	mov	r3, r9
  406e18:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  406e1c:	f001 fb08 	bl	408430 <__aeabi_dsub>
  406e20:	2200      	movs	r2, #0
  406e22:	4b68      	ldr	r3, [pc, #416]	; (406fc4 <__ieee754_rem_pio2+0x274>)
  406e24:	f001 fcb8 	bl	408798 <__aeabi_dmul>
  406e28:	2200      	movs	r2, #0
  406e2a:	2300      	movs	r3, #0
  406e2c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  406e30:	f001 ff1a 	bl	408c68 <__aeabi_dcmpeq>
  406e34:	2800      	cmp	r0, #0
  406e36:	f000 816d 	beq.w	407114 <__ieee754_rem_pio2+0x3c4>
  406e3a:	2300      	movs	r3, #0
  406e3c:	4640      	mov	r0, r8
  406e3e:	4649      	mov	r1, r9
  406e40:	2200      	movs	r2, #0
  406e42:	f001 ff11 	bl	408c68 <__aeabi_dcmpeq>
  406e46:	2800      	cmp	r0, #0
  406e48:	bf14      	ite	ne
  406e4a:	2301      	movne	r3, #1
  406e4c:	2302      	moveq	r3, #2
  406e4e:	2002      	movs	r0, #2
  406e50:	495d      	ldr	r1, [pc, #372]	; (406fc8 <__ieee754_rem_pio2+0x278>)
  406e52:	462a      	mov	r2, r5
  406e54:	9000      	str	r0, [sp, #0]
  406e56:	a808      	add	r0, sp, #32
  406e58:	9101      	str	r1, [sp, #4]
  406e5a:	4621      	mov	r1, r4
  406e5c:	f000 fb68 	bl	407530 <__kernel_rem_pio2>
  406e60:	2e00      	cmp	r6, #0
  406e62:	f2c0 814d 	blt.w	407100 <__ieee754_rem_pio2+0x3b0>
  406e66:	4605      	mov	r5, r0
  406e68:	e008      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  406e6a:	4606      	mov	r6, r0
  406e6c:	2100      	movs	r1, #0
  406e6e:	2000      	movs	r0, #0
  406e70:	461f      	mov	r7, r3
  406e72:	2500      	movs	r5, #0
  406e74:	e9c2 0102 	strd	r0, r1, [r2, #8]
  406e78:	e9c2 6700 	strd	r6, r7, [r2]
  406e7c:	4628      	mov	r0, r5
  406e7e:	b00f      	add	sp, #60	; 0x3c
  406e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e84:	4602      	mov	r2, r0
  406e86:	460b      	mov	r3, r1
  406e88:	f001 fad2 	bl	408430 <__aeabi_dsub>
  406e8c:	2500      	movs	r5, #0
  406e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
  406e92:	e9c4 0100 	strd	r0, r1, [r4]
  406e96:	e7f1      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  406e98:	a33f      	add	r3, pc, #252	; (adr r3, 406f98 <__ieee754_rem_pio2+0x248>)
  406e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406e9e:	f001 fac7 	bl	408430 <__aeabi_dsub>
  406ea2:	4680      	mov	r8, r0
  406ea4:	4689      	mov	r9, r1
  406ea6:	2501      	movs	r5, #1
  406ea8:	a33d      	add	r3, pc, #244	; (adr r3, 406fa0 <__ieee754_rem_pio2+0x250>)
  406eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  406eae:	f001 fabf 	bl	408430 <__aeabi_dsub>
  406eb2:	4606      	mov	r6, r0
  406eb4:	460f      	mov	r7, r1
  406eb6:	4640      	mov	r0, r8
  406eb8:	4632      	mov	r2, r6
  406eba:	4649      	mov	r1, r9
  406ebc:	463b      	mov	r3, r7
  406ebe:	e9c4 6700 	strd	r6, r7, [r4]
  406ec2:	f001 fab5 	bl	408430 <__aeabi_dsub>
  406ec6:	a336      	add	r3, pc, #216	; (adr r3, 406fa0 <__ieee754_rem_pio2+0x250>)
  406ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ecc:	f001 fab0 	bl	408430 <__aeabi_dsub>
  406ed0:	e9c4 0102 	strd	r0, r1, [r4, #8]
  406ed4:	e7d2      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  406ed6:	f001 f965 	bl	4081a4 <fabs>
  406eda:	4680      	mov	r8, r0
  406edc:	4689      	mov	r9, r1
  406ede:	a332      	add	r3, pc, #200	; (adr r3, 406fa8 <__ieee754_rem_pio2+0x258>)
  406ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ee4:	f001 fc58 	bl	408798 <__aeabi_dmul>
  406ee8:	2200      	movs	r2, #0
  406eea:	4b38      	ldr	r3, [pc, #224]	; (406fcc <__ieee754_rem_pio2+0x27c>)
  406eec:	f001 faa2 	bl	408434 <__adddf3>
  406ef0:	f001 feec 	bl	408ccc <__aeabi_d2iz>
  406ef4:	4605      	mov	r5, r0
  406ef6:	f001 fbe9 	bl	4086cc <__aeabi_i2d>
  406efa:	a323      	add	r3, pc, #140	; (adr r3, 406f88 <__ieee754_rem_pio2+0x238>)
  406efc:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406f04:	f001 fc48 	bl	408798 <__aeabi_dmul>
  406f08:	4602      	mov	r2, r0
  406f0a:	460b      	mov	r3, r1
  406f0c:	4640      	mov	r0, r8
  406f0e:	4649      	mov	r1, r9
  406f10:	f001 fa8e 	bl	408430 <__aeabi_dsub>
  406f14:	4682      	mov	sl, r0
  406f16:	468b      	mov	fp, r1
  406f18:	a31d      	add	r3, pc, #116	; (adr r3, 406f90 <__ieee754_rem_pio2+0x240>)
  406f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406f22:	f001 fc39 	bl	408798 <__aeabi_dmul>
  406f26:	2d1f      	cmp	r5, #31
  406f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406f2c:	4650      	mov	r0, sl
  406f2e:	4659      	mov	r1, fp
  406f30:	dc50      	bgt.n	406fd4 <__ieee754_rem_pio2+0x284>
  406f32:	4b27      	ldr	r3, [pc, #156]	; (406fd0 <__ieee754_rem_pio2+0x280>)
  406f34:	1e6a      	subs	r2, r5, #1
  406f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406f3a:	42bb      	cmp	r3, r7
  406f3c:	d04a      	beq.n	406fd4 <__ieee754_rem_pio2+0x284>
  406f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406f42:	f001 fa75 	bl	408430 <__aeabi_dsub>
  406f46:	4602      	mov	r2, r0
  406f48:	460b      	mov	r3, r1
  406f4a:	4681      	mov	r9, r0
  406f4c:	4688      	mov	r8, r1
  406f4e:	e9c4 2300 	strd	r2, r3, [r4]
  406f52:	464a      	mov	r2, r9
  406f54:	4643      	mov	r3, r8
  406f56:	4650      	mov	r0, sl
  406f58:	4659      	mov	r1, fp
  406f5a:	f001 fa69 	bl	408430 <__aeabi_dsub>
  406f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406f62:	f001 fa65 	bl	408430 <__aeabi_dsub>
  406f66:	2e00      	cmp	r6, #0
  406f68:	4602      	mov	r2, r0
  406f6a:	460b      	mov	r3, r1
  406f6c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  406f70:	da84      	bge.n	406e7c <__ieee754_rem_pio2+0x12c>
  406f72:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
  406f76:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  406f7a:	60a0      	str	r0, [r4, #8]
  406f7c:	426d      	negs	r5, r5
  406f7e:	f8c4 9000 	str.w	r9, [r4]
  406f82:	6063      	str	r3, [r4, #4]
  406f84:	60e1      	str	r1, [r4, #12]
  406f86:	e779      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  406f88:	54400000 	.word	0x54400000
  406f8c:	3ff921fb 	.word	0x3ff921fb
  406f90:	1a626331 	.word	0x1a626331
  406f94:	3dd0b461 	.word	0x3dd0b461
  406f98:	1a600000 	.word	0x1a600000
  406f9c:	3dd0b461 	.word	0x3dd0b461
  406fa0:	2e037073 	.word	0x2e037073
  406fa4:	3ba3198a 	.word	0x3ba3198a
  406fa8:	6dc9c883 	.word	0x6dc9c883
  406fac:	3fe45f30 	.word	0x3fe45f30
  406fb0:	3fe921fb 	.word	0x3fe921fb
  406fb4:	4002d97b 	.word	0x4002d97b
  406fb8:	3ff921fb 	.word	0x3ff921fb
  406fbc:	413921fb 	.word	0x413921fb
  406fc0:	7fefffff 	.word	0x7fefffff
  406fc4:	41700000 	.word	0x41700000
  406fc8:	0040fa9c 	.word	0x0040fa9c
  406fcc:	3fe00000 	.word	0x3fe00000
  406fd0:	0040fa1c 	.word	0x0040fa1c
  406fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406fd8:	f001 fa2a 	bl	408430 <__aeabi_dsub>
  406fdc:	4688      	mov	r8, r1
  406fde:	153f      	asrs	r7, r7, #20
  406fe0:	4681      	mov	r9, r0
  406fe2:	f3c8 530a 	ubfx	r3, r8, #20, #11
  406fe6:	1afb      	subs	r3, r7, r3
  406fe8:	2b10      	cmp	r3, #16
  406fea:	e9c4 0100 	strd	r0, r1, [r4]
  406fee:	ddb0      	ble.n	406f52 <__ieee754_rem_pio2+0x202>
  406ff0:	a35b      	add	r3, pc, #364	; (adr r3, 407160 <__ieee754_rem_pio2+0x410>)
  406ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406ffa:	f001 fbcd 	bl	408798 <__aeabi_dmul>
  406ffe:	4680      	mov	r8, r0
  407000:	4689      	mov	r9, r1
  407002:	4650      	mov	r0, sl
  407004:	4642      	mov	r2, r8
  407006:	4659      	mov	r1, fp
  407008:	464b      	mov	r3, r9
  40700a:	f001 fa11 	bl	408430 <__aeabi_dsub>
  40700e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  407016:	4650      	mov	r0, sl
  407018:	4659      	mov	r1, fp
  40701a:	f001 fa09 	bl	408430 <__aeabi_dsub>
  40701e:	4642      	mov	r2, r8
  407020:	464b      	mov	r3, r9
  407022:	f001 fa05 	bl	408430 <__aeabi_dsub>
  407026:	4680      	mov	r8, r0
  407028:	4689      	mov	r9, r1
  40702a:	a34f      	add	r3, pc, #316	; (adr r3, 407168 <__ieee754_rem_pio2+0x418>)
  40702c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407030:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407034:	f001 fbb0 	bl	408798 <__aeabi_dmul>
  407038:	4642      	mov	r2, r8
  40703a:	464b      	mov	r3, r9
  40703c:	f001 f9f8 	bl	408430 <__aeabi_dsub>
  407040:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407044:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40704c:	f001 f9f0 	bl	408430 <__aeabi_dsub>
  407050:	4688      	mov	r8, r1
  407052:	f3c1 510a 	ubfx	r1, r1, #20, #11
  407056:	4602      	mov	r2, r0
  407058:	4643      	mov	r3, r8
  40705a:	4681      	mov	r9, r0
  40705c:	1a7f      	subs	r7, r7, r1
  40705e:	2f31      	cmp	r7, #49	; 0x31
  407060:	e9c4 2300 	strd	r2, r3, [r4]
  407064:	dd78      	ble.n	407158 <__ieee754_rem_pio2+0x408>
  407066:	a342      	add	r3, pc, #264	; (adr r3, 407170 <__ieee754_rem_pio2+0x420>)
  407068:	e9d3 2300 	ldrd	r2, r3, [r3]
  40706c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407070:	f001 fb92 	bl	408798 <__aeabi_dmul>
  407074:	4680      	mov	r8, r0
  407076:	4689      	mov	r9, r1
  407078:	4642      	mov	r2, r8
  40707a:	464b      	mov	r3, r9
  40707c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407080:	f001 f9d6 	bl	408430 <__aeabi_dsub>
  407084:	4682      	mov	sl, r0
  407086:	468b      	mov	fp, r1
  407088:	4652      	mov	r2, sl
  40708a:	465b      	mov	r3, fp
  40708c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407090:	f001 f9ce 	bl	408430 <__aeabi_dsub>
  407094:	4642      	mov	r2, r8
  407096:	464b      	mov	r3, r9
  407098:	f001 f9ca 	bl	408430 <__aeabi_dsub>
  40709c:	4680      	mov	r8, r0
  40709e:	4689      	mov	r9, r1
  4070a0:	a335      	add	r3, pc, #212	; (adr r3, 407178 <__ieee754_rem_pio2+0x428>)
  4070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4070aa:	f001 fb75 	bl	408798 <__aeabi_dmul>
  4070ae:	4642      	mov	r2, r8
  4070b0:	464b      	mov	r3, r9
  4070b2:	f001 f9bd 	bl	408430 <__aeabi_dsub>
  4070b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4070ba:	4650      	mov	r0, sl
  4070bc:	4659      	mov	r1, fp
  4070be:	e73e      	b.n	406f3e <__ieee754_rem_pio2+0x1ee>
  4070c0:	f001 f9b8 	bl	408434 <__adddf3>
  4070c4:	4b30      	ldr	r3, [pc, #192]	; (407188 <__ieee754_rem_pio2+0x438>)
  4070c6:	4680      	mov	r8, r0
  4070c8:	4689      	mov	r9, r1
  4070ca:	429f      	cmp	r7, r3
  4070cc:	d024      	beq.n	407118 <__ieee754_rem_pio2+0x3c8>
  4070ce:	f04f 35ff 	mov.w	r5, #4294967295
  4070d2:	a32b      	add	r3, pc, #172	; (adr r3, 407180 <__ieee754_rem_pio2+0x430>)
  4070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070d8:	f001 f9ac 	bl	408434 <__adddf3>
  4070dc:	4606      	mov	r6, r0
  4070de:	460f      	mov	r7, r1
  4070e0:	4640      	mov	r0, r8
  4070e2:	4632      	mov	r2, r6
  4070e4:	4649      	mov	r1, r9
  4070e6:	463b      	mov	r3, r7
  4070e8:	e9c4 6700 	strd	r6, r7, [r4]
  4070ec:	f001 f9a0 	bl	408430 <__aeabi_dsub>
  4070f0:	a323      	add	r3, pc, #140	; (adr r3, 407180 <__ieee754_rem_pio2+0x430>)
  4070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4070f6:	f001 f99d 	bl	408434 <__adddf3>
  4070fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4070fe:	e6bd      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  407100:	6862      	ldr	r2, [r4, #4]
  407102:	4245      	negs	r5, r0
  407104:	68e3      	ldr	r3, [r4, #12]
  407106:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40710a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40710e:	6062      	str	r2, [r4, #4]
  407110:	60e3      	str	r3, [r4, #12]
  407112:	e6b3      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  407114:	2303      	movs	r3, #3
  407116:	e69a      	b.n	406e4e <__ieee754_rem_pio2+0xfe>
  407118:	a311      	add	r3, pc, #68	; (adr r3, 407160 <__ieee754_rem_pio2+0x410>)
  40711a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40711e:	f001 f989 	bl	408434 <__adddf3>
  407122:	4680      	mov	r8, r0
  407124:	4689      	mov	r9, r1
  407126:	f04f 35ff 	mov.w	r5, #4294967295
  40712a:	a30f      	add	r3, pc, #60	; (adr r3, 407168 <__ieee754_rem_pio2+0x418>)
  40712c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407130:	f001 f980 	bl	408434 <__adddf3>
  407134:	4606      	mov	r6, r0
  407136:	460f      	mov	r7, r1
  407138:	4640      	mov	r0, r8
  40713a:	4632      	mov	r2, r6
  40713c:	4649      	mov	r1, r9
  40713e:	463b      	mov	r3, r7
  407140:	e9c4 6700 	strd	r6, r7, [r4]
  407144:	f001 f974 	bl	408430 <__aeabi_dsub>
  407148:	a307      	add	r3, pc, #28	; (adr r3, 407168 <__ieee754_rem_pio2+0x418>)
  40714a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40714e:	f001 f971 	bl	408434 <__adddf3>
  407152:	e9c4 0102 	strd	r0, r1, [r4, #8]
  407156:	e691      	b.n	406e7c <__ieee754_rem_pio2+0x12c>
  407158:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  40715c:	e6f9      	b.n	406f52 <__ieee754_rem_pio2+0x202>
  40715e:	bf00      	nop
  407160:	1a600000 	.word	0x1a600000
  407164:	3dd0b461 	.word	0x3dd0b461
  407168:	2e037073 	.word	0x2e037073
  40716c:	3ba3198a 	.word	0x3ba3198a
  407170:	2e000000 	.word	0x2e000000
  407174:	3ba3198a 	.word	0x3ba3198a
  407178:	252049c1 	.word	0x252049c1
  40717c:	397b839a 	.word	0x397b839a
  407180:	1a626331 	.word	0x1a626331
  407184:	3dd0b461 	.word	0x3dd0b461
  407188:	3ff921fb 	.word	0x3ff921fb

0040718c <__ieee754_sqrt>:
  40718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407190:	4e53      	ldr	r6, [pc, #332]	; (4072e0 <__ieee754_sqrt+0x154>)
  407192:	460c      	mov	r4, r1
  407194:	4605      	mov	r5, r0
  407196:	460b      	mov	r3, r1
  407198:	46b6      	mov	lr, r6
  40719a:	400e      	ands	r6, r1
  40719c:	4576      	cmp	r6, lr
  40719e:	f000 8085 	beq.w	4072ac <__ieee754_sqrt+0x120>
  4071a2:	2900      	cmp	r1, #0
  4071a4:	4602      	mov	r2, r0
  4071a6:	dd65      	ble.n	407274 <__ieee754_sqrt+0xe8>
  4071a8:	150f      	asrs	r7, r1, #20
  4071aa:	d070      	beq.n	40728e <__ieee754_sqrt+0x102>
  4071ac:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4071b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4071b4:	07f9      	lsls	r1, r7, #31
  4071b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4071ba:	d453      	bmi.n	407264 <__ieee754_sqrt+0xd8>
  4071bc:	0fd1      	lsrs	r1, r2, #31
  4071be:	2600      	movs	r6, #0
  4071c0:	107f      	asrs	r7, r7, #1
  4071c2:	2016      	movs	r0, #22
  4071c4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  4071c8:	46b6      	mov	lr, r6
  4071ca:	0052      	lsls	r2, r2, #1
  4071cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4071d0:	eb0e 0401 	add.w	r4, lr, r1
  4071d4:	0fd5      	lsrs	r5, r2, #31
  4071d6:	0052      	lsls	r2, r2, #1
  4071d8:	429c      	cmp	r4, r3
  4071da:	dc03      	bgt.n	4071e4 <__ieee754_sqrt+0x58>
  4071dc:	1b1b      	subs	r3, r3, r4
  4071de:	eb04 0e01 	add.w	lr, r4, r1
  4071e2:	440e      	add	r6, r1
  4071e4:	3801      	subs	r0, #1
  4071e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4071ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4071ee:	d1ef      	bne.n	4071d0 <__ieee754_sqrt+0x44>
  4071f0:	2520      	movs	r5, #32
  4071f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4071f6:	4684      	mov	ip, r0
  4071f8:	4573      	cmp	r3, lr
  4071fa:	eb01 040c 	add.w	r4, r1, ip
  4071fe:	dc03      	bgt.n	407208 <__ieee754_sqrt+0x7c>
  407200:	4294      	cmp	r4, r2
  407202:	d80e      	bhi.n	407222 <__ieee754_sqrt+0x96>
  407204:	4573      	cmp	r3, lr
  407206:	d10c      	bne.n	407222 <__ieee754_sqrt+0x96>
  407208:	2c00      	cmp	r4, #0
  40720a:	eb04 0c01 	add.w	ip, r4, r1
  40720e:	db23      	blt.n	407258 <__ieee754_sqrt+0xcc>
  407210:	46f0      	mov	r8, lr
  407212:	4294      	cmp	r4, r2
  407214:	ebce 0303 	rsb	r3, lr, r3
  407218:	d900      	bls.n	40721c <__ieee754_sqrt+0x90>
  40721a:	3b01      	subs	r3, #1
  40721c:	1b12      	subs	r2, r2, r4
  40721e:	4408      	add	r0, r1
  407220:	46c6      	mov	lr, r8
  407222:	0fd4      	lsrs	r4, r2, #31
  407224:	3d01      	subs	r5, #1
  407226:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40722a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  40722e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  407232:	d1e1      	bne.n	4071f8 <__ieee754_sqrt+0x6c>
  407234:	4313      	orrs	r3, r2
  407236:	d004      	beq.n	407242 <__ieee754_sqrt+0xb6>
  407238:	1c42      	adds	r2, r0, #1
  40723a:	d041      	beq.n	4072c0 <__ieee754_sqrt+0x134>
  40723c:	f000 0301 	and.w	r3, r0, #1
  407240:	4418      	add	r0, r3
  407242:	0840      	lsrs	r0, r0, #1
  407244:	1073      	asrs	r3, r6, #1
  407246:	4927      	ldr	r1, [pc, #156]	; (4072e4 <__ieee754_sqrt+0x158>)
  407248:	4419      	add	r1, r3
  40724a:	07f3      	lsls	r3, r6, #31
  40724c:	d40f      	bmi.n	40726e <__ieee754_sqrt+0xe2>
  40724e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  407252:	4619      	mov	r1, r3
  407254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407258:	f1bc 0f00 	cmp.w	ip, #0
  40725c:	dbd8      	blt.n	407210 <__ieee754_sqrt+0x84>
  40725e:	f10e 0801 	add.w	r8, lr, #1
  407262:	e7d6      	b.n	407212 <__ieee754_sqrt+0x86>
  407264:	0fd1      	lsrs	r1, r2, #31
  407266:	0052      	lsls	r2, r2, #1
  407268:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  40726c:	e7a6      	b.n	4071bc <__ieee754_sqrt+0x30>
  40726e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  407272:	e7ec      	b.n	40724e <__ieee754_sqrt+0xc2>
  407274:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  407278:	4306      	orrs	r6, r0
  40727a:	d0eb      	beq.n	407254 <__ieee754_sqrt+0xc8>
  40727c:	bb39      	cbnz	r1, 4072ce <__ieee754_sqrt+0x142>
  40727e:	460f      	mov	r7, r1
  407280:	0ad3      	lsrs	r3, r2, #11
  407282:	3f15      	subs	r7, #21
  407284:	0552      	lsls	r2, r2, #21
  407286:	2b00      	cmp	r3, #0
  407288:	d0fa      	beq.n	407280 <__ieee754_sqrt+0xf4>
  40728a:	02dc      	lsls	r4, r3, #11
  40728c:	d41b      	bmi.n	4072c6 <__ieee754_sqrt+0x13a>
  40728e:	2100      	movs	r1, #0
  407290:	005b      	lsls	r3, r3, #1
  407292:	3101      	adds	r1, #1
  407294:	02d8      	lsls	r0, r3, #11
  407296:	d5fb      	bpl.n	407290 <__ieee754_sqrt+0x104>
  407298:	f1c1 0401 	rsb	r4, r1, #1
  40729c:	f1c1 0020 	rsb	r0, r1, #32
  4072a0:	fa22 f000 	lsr.w	r0, r2, r0
  4072a4:	4427      	add	r7, r4
  4072a6:	408a      	lsls	r2, r1
  4072a8:	4303      	orrs	r3, r0
  4072aa:	e77f      	b.n	4071ac <__ieee754_sqrt+0x20>
  4072ac:	4602      	mov	r2, r0
  4072ae:	460b      	mov	r3, r1
  4072b0:	f001 fa72 	bl	408798 <__aeabi_dmul>
  4072b4:	462a      	mov	r2, r5
  4072b6:	4623      	mov	r3, r4
  4072b8:	f001 f8bc 	bl	408434 <__adddf3>
  4072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4072c0:	3601      	adds	r6, #1
  4072c2:	4628      	mov	r0, r5
  4072c4:	e7be      	b.n	407244 <__ieee754_sqrt+0xb8>
  4072c6:	2020      	movs	r0, #32
  4072c8:	2401      	movs	r4, #1
  4072ca:	2100      	movs	r1, #0
  4072cc:	e7e8      	b.n	4072a0 <__ieee754_sqrt+0x114>
  4072ce:	4602      	mov	r2, r0
  4072d0:	460b      	mov	r3, r1
  4072d2:	f001 f8ad 	bl	408430 <__aeabi_dsub>
  4072d6:	4602      	mov	r2, r0
  4072d8:	460b      	mov	r3, r1
  4072da:	f001 fb87 	bl	4089ec <__aeabi_ddiv>
  4072de:	e7b9      	b.n	407254 <__ieee754_sqrt+0xc8>
  4072e0:	7ff00000 	.word	0x7ff00000
  4072e4:	3fe00000 	.word	0x3fe00000

004072e8 <__kernel_cos>:
  4072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072ec:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4072f0:	b085      	sub	sp, #20
  4072f2:	460c      	mov	r4, r1
  4072f4:	4692      	mov	sl, r2
  4072f6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
  4072fa:	469b      	mov	fp, r3
  4072fc:	4605      	mov	r5, r0
  4072fe:	da6b      	bge.n	4073d8 <__kernel_cos+0xf0>
  407300:	f001 fce4 	bl	408ccc <__aeabi_d2iz>
  407304:	2800      	cmp	r0, #0
  407306:	f000 80e7 	beq.w	4074d8 <__kernel_cos+0x1f0>
  40730a:	462a      	mov	r2, r5
  40730c:	4623      	mov	r3, r4
  40730e:	4628      	mov	r0, r5
  407310:	4621      	mov	r1, r4
  407312:	f001 fa41 	bl	408798 <__aeabi_dmul>
  407316:	4680      	mov	r8, r0
  407318:	4689      	mov	r9, r1
  40731a:	a373      	add	r3, pc, #460	; (adr r3, 4074e8 <__kernel_cos+0x200>)
  40731c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407320:	f001 fa3a 	bl	408798 <__aeabi_dmul>
  407324:	a372      	add	r3, pc, #456	; (adr r3, 4074f0 <__kernel_cos+0x208>)
  407326:	e9d3 2300 	ldrd	r2, r3, [r3]
  40732a:	f001 f883 	bl	408434 <__adddf3>
  40732e:	4642      	mov	r2, r8
  407330:	464b      	mov	r3, r9
  407332:	f001 fa31 	bl	408798 <__aeabi_dmul>
  407336:	a370      	add	r3, pc, #448	; (adr r3, 4074f8 <__kernel_cos+0x210>)
  407338:	e9d3 2300 	ldrd	r2, r3, [r3]
  40733c:	f001 f878 	bl	408430 <__aeabi_dsub>
  407340:	4642      	mov	r2, r8
  407342:	464b      	mov	r3, r9
  407344:	f001 fa28 	bl	408798 <__aeabi_dmul>
  407348:	a36d      	add	r3, pc, #436	; (adr r3, 407500 <__kernel_cos+0x218>)
  40734a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40734e:	f001 f871 	bl	408434 <__adddf3>
  407352:	4642      	mov	r2, r8
  407354:	464b      	mov	r3, r9
  407356:	f001 fa1f 	bl	408798 <__aeabi_dmul>
  40735a:	a36b      	add	r3, pc, #428	; (adr r3, 407508 <__kernel_cos+0x220>)
  40735c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407360:	f001 f866 	bl	408430 <__aeabi_dsub>
  407364:	4642      	mov	r2, r8
  407366:	464b      	mov	r3, r9
  407368:	f001 fa16 	bl	408798 <__aeabi_dmul>
  40736c:	a368      	add	r3, pc, #416	; (adr r3, 407510 <__kernel_cos+0x228>)
  40736e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407372:	f001 f85f 	bl	408434 <__adddf3>
  407376:	4642      	mov	r2, r8
  407378:	464b      	mov	r3, r9
  40737a:	f001 fa0d 	bl	408798 <__aeabi_dmul>
  40737e:	e9cd 0100 	strd	r0, r1, [sp]
  407382:	4640      	mov	r0, r8
  407384:	4649      	mov	r1, r9
  407386:	2200      	movs	r2, #0
  407388:	4b63      	ldr	r3, [pc, #396]	; (407518 <__kernel_cos+0x230>)
  40738a:	f001 fa05 	bl	408798 <__aeabi_dmul>
  40738e:	4606      	mov	r6, r0
  407390:	460f      	mov	r7, r1
  407392:	4640      	mov	r0, r8
  407394:	4649      	mov	r1, r9
  407396:	e9dd 2300 	ldrd	r2, r3, [sp]
  40739a:	f001 f9fd 	bl	408798 <__aeabi_dmul>
  40739e:	4680      	mov	r8, r0
  4073a0:	4689      	mov	r9, r1
  4073a2:	4652      	mov	r2, sl
  4073a4:	465b      	mov	r3, fp
  4073a6:	4628      	mov	r0, r5
  4073a8:	4621      	mov	r1, r4
  4073aa:	f001 f9f5 	bl	408798 <__aeabi_dmul>
  4073ae:	4602      	mov	r2, r0
  4073b0:	460b      	mov	r3, r1
  4073b2:	4640      	mov	r0, r8
  4073b4:	4649      	mov	r1, r9
  4073b6:	f001 f83b 	bl	408430 <__aeabi_dsub>
  4073ba:	4602      	mov	r2, r0
  4073bc:	460b      	mov	r3, r1
  4073be:	4630      	mov	r0, r6
  4073c0:	4639      	mov	r1, r7
  4073c2:	f001 f835 	bl	408430 <__aeabi_dsub>
  4073c6:	4602      	mov	r2, r0
  4073c8:	460b      	mov	r3, r1
  4073ca:	2000      	movs	r0, #0
  4073cc:	4953      	ldr	r1, [pc, #332]	; (40751c <__kernel_cos+0x234>)
  4073ce:	f001 f82f 	bl	408430 <__aeabi_dsub>
  4073d2:	b005      	add	sp, #20
  4073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4073d8:	4602      	mov	r2, r0
  4073da:	460b      	mov	r3, r1
  4073dc:	f001 f9dc 	bl	408798 <__aeabi_dmul>
  4073e0:	4680      	mov	r8, r0
  4073e2:	4689      	mov	r9, r1
  4073e4:	a340      	add	r3, pc, #256	; (adr r3, 4074e8 <__kernel_cos+0x200>)
  4073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073ea:	f001 f9d5 	bl	408798 <__aeabi_dmul>
  4073ee:	a340      	add	r3, pc, #256	; (adr r3, 4074f0 <__kernel_cos+0x208>)
  4073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4073f4:	f001 f81e 	bl	408434 <__adddf3>
  4073f8:	4642      	mov	r2, r8
  4073fa:	464b      	mov	r3, r9
  4073fc:	f001 f9cc 	bl	408798 <__aeabi_dmul>
  407400:	a33d      	add	r3, pc, #244	; (adr r3, 4074f8 <__kernel_cos+0x210>)
  407402:	e9d3 2300 	ldrd	r2, r3, [r3]
  407406:	f001 f813 	bl	408430 <__aeabi_dsub>
  40740a:	4642      	mov	r2, r8
  40740c:	464b      	mov	r3, r9
  40740e:	f001 f9c3 	bl	408798 <__aeabi_dmul>
  407412:	a33b      	add	r3, pc, #236	; (adr r3, 407500 <__kernel_cos+0x218>)
  407414:	e9d3 2300 	ldrd	r2, r3, [r3]
  407418:	f001 f80c 	bl	408434 <__adddf3>
  40741c:	4642      	mov	r2, r8
  40741e:	464b      	mov	r3, r9
  407420:	f001 f9ba 	bl	408798 <__aeabi_dmul>
  407424:	a338      	add	r3, pc, #224	; (adr r3, 407508 <__kernel_cos+0x220>)
  407426:	e9d3 2300 	ldrd	r2, r3, [r3]
  40742a:	f001 f801 	bl	408430 <__aeabi_dsub>
  40742e:	4642      	mov	r2, r8
  407430:	464b      	mov	r3, r9
  407432:	f001 f9b1 	bl	408798 <__aeabi_dmul>
  407436:	a336      	add	r3, pc, #216	; (adr r3, 407510 <__kernel_cos+0x228>)
  407438:	e9d3 2300 	ldrd	r2, r3, [r3]
  40743c:	f000 fffa 	bl	408434 <__adddf3>
  407440:	464b      	mov	r3, r9
  407442:	4642      	mov	r2, r8
  407444:	f001 f9a8 	bl	408798 <__aeabi_dmul>
  407448:	4b35      	ldr	r3, [pc, #212]	; (407520 <__kernel_cos+0x238>)
  40744a:	429f      	cmp	r7, r3
  40744c:	e9cd 0100 	strd	r0, r1, [sp]
  407450:	dd97      	ble.n	407382 <__kernel_cos+0x9a>
  407452:	4b34      	ldr	r3, [pc, #208]	; (407524 <__kernel_cos+0x23c>)
  407454:	2200      	movs	r2, #0
  407456:	429f      	cmp	r7, r3
  407458:	dc38      	bgt.n	4074cc <__kernel_cos+0x1e4>
  40745a:	f5a7 1300 	sub.w	r3, r7, #2097152	; 0x200000
  40745e:	2000      	movs	r0, #0
  407460:	492e      	ldr	r1, [pc, #184]	; (40751c <__kernel_cos+0x234>)
  407462:	4616      	mov	r6, r2
  407464:	461f      	mov	r7, r3
  407466:	f000 ffe3 	bl	408430 <__aeabi_dsub>
  40746a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40746e:	4640      	mov	r0, r8
  407470:	4649      	mov	r1, r9
  407472:	2200      	movs	r2, #0
  407474:	4b28      	ldr	r3, [pc, #160]	; (407518 <__kernel_cos+0x230>)
  407476:	f001 f98f 	bl	408798 <__aeabi_dmul>
  40747a:	4632      	mov	r2, r6
  40747c:	463b      	mov	r3, r7
  40747e:	f000 ffd7 	bl	408430 <__aeabi_dsub>
  407482:	4606      	mov	r6, r0
  407484:	460f      	mov	r7, r1
  407486:	4640      	mov	r0, r8
  407488:	4649      	mov	r1, r9
  40748a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40748e:	f001 f983 	bl	408798 <__aeabi_dmul>
  407492:	4680      	mov	r8, r0
  407494:	4689      	mov	r9, r1
  407496:	4652      	mov	r2, sl
  407498:	465b      	mov	r3, fp
  40749a:	4628      	mov	r0, r5
  40749c:	4621      	mov	r1, r4
  40749e:	f001 f97b 	bl	408798 <__aeabi_dmul>
  4074a2:	4602      	mov	r2, r0
  4074a4:	460b      	mov	r3, r1
  4074a6:	4640      	mov	r0, r8
  4074a8:	4649      	mov	r1, r9
  4074aa:	f000 ffc1 	bl	408430 <__aeabi_dsub>
  4074ae:	4602      	mov	r2, r0
  4074b0:	460b      	mov	r3, r1
  4074b2:	4630      	mov	r0, r6
  4074b4:	4639      	mov	r1, r7
  4074b6:	f000 ffbb 	bl	408430 <__aeabi_dsub>
  4074ba:	4602      	mov	r2, r0
  4074bc:	460b      	mov	r3, r1
  4074be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4074c2:	f000 ffb5 	bl	408430 <__aeabi_dsub>
  4074c6:	b005      	add	sp, #20
  4074c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074cc:	4b16      	ldr	r3, [pc, #88]	; (407528 <__kernel_cos+0x240>)
  4074ce:	2600      	movs	r6, #0
  4074d0:	4f16      	ldr	r7, [pc, #88]	; (40752c <__kernel_cos+0x244>)
  4074d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4074d6:	e7ca      	b.n	40746e <__kernel_cos+0x186>
  4074d8:	2000      	movs	r0, #0
  4074da:	4910      	ldr	r1, [pc, #64]	; (40751c <__kernel_cos+0x234>)
  4074dc:	b005      	add	sp, #20
  4074de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074e2:	bf00      	nop
  4074e4:	f3af 8000 	nop.w
  4074e8:	be8838d4 	.word	0xbe8838d4
  4074ec:	bda8fae9 	.word	0xbda8fae9
  4074f0:	bdb4b1c4 	.word	0xbdb4b1c4
  4074f4:	3e21ee9e 	.word	0x3e21ee9e
  4074f8:	809c52ad 	.word	0x809c52ad
  4074fc:	3e927e4f 	.word	0x3e927e4f
  407500:	19cb1590 	.word	0x19cb1590
  407504:	3efa01a0 	.word	0x3efa01a0
  407508:	16c15177 	.word	0x16c15177
  40750c:	3f56c16c 	.word	0x3f56c16c
  407510:	5555554c 	.word	0x5555554c
  407514:	3fa55555 	.word	0x3fa55555
  407518:	3fe00000 	.word	0x3fe00000
  40751c:	3ff00000 	.word	0x3ff00000
  407520:	3fd33332 	.word	0x3fd33332
  407524:	3fe90000 	.word	0x3fe90000
  407528:	3fe70000 	.word	0x3fe70000
  40752c:	3fd20000 	.word	0x3fd20000

00407530 <__kernel_rem_pio2>:
  407530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407534:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  407538:	461e      	mov	r6, r3
  40753a:	4c84      	ldr	r4, [pc, #528]	; (40774c <__kernel_rem_pio2+0x21c>)
  40753c:	930c      	str	r3, [sp, #48]	; 0x30
  40753e:	1ed3      	subs	r3, r2, #3
  407540:	9004      	str	r0, [sp, #16]
  407542:	3e01      	subs	r6, #1
  407544:	fb84 0403 	smull	r0, r4, r4, r3
  407548:	17db      	asrs	r3, r3, #31
  40754a:	4d81      	ldr	r5, [pc, #516]	; (407750 <__kernel_rem_pio2+0x220>)
  40754c:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  407550:	98a6      	ldr	r0, [sp, #664]	; 0x298
  407552:	910a      	str	r1, [sp, #40]	; 0x28
  407554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407558:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  40755c:	9603      	str	r6, [sp, #12]
  40755e:	4619      	mov	r1, r3
  407560:	930d      	str	r3, [sp, #52]	; 0x34
  407562:	43db      	mvns	r3, r3
  407564:	1834      	adds	r4, r6, r0
  407566:	9009      	str	r0, [sp, #36]	; 0x24
  407568:	eba1 0506 	sub.w	r5, r1, r6
  40756c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  407570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  407574:	9308      	str	r3, [sp, #32]
  407576:	d416      	bmi.n	4075a6 <__kernel_rem_pio2+0x76>
  407578:	442c      	add	r4, r5
  40757a:	ae22      	add	r6, sp, #136	; 0x88
  40757c:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  40757e:	3401      	adds	r4, #1
  407580:	e008      	b.n	407594 <__kernel_rem_pio2+0x64>
  407582:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  407586:	3501      	adds	r5, #1
  407588:	f001 f8a0 	bl	4086cc <__aeabi_i2d>
  40758c:	42a5      	cmp	r5, r4
  40758e:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  407592:	d008      	beq.n	4075a6 <__kernel_rem_pio2+0x76>
  407594:	2d00      	cmp	r5, #0
  407596:	daf4      	bge.n	407582 <__kernel_rem_pio2+0x52>
  407598:	3501      	adds	r5, #1
  40759a:	2000      	movs	r0, #0
  40759c:	2100      	movs	r1, #0
  40759e:	42a5      	cmp	r5, r4
  4075a0:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  4075a4:	d1f6      	bne.n	407594 <__kernel_rem_pio2+0x64>
  4075a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4075a8:	2b00      	cmp	r3, #0
  4075aa:	db31      	blt.n	407610 <__kernel_rem_pio2+0xe0>
  4075ac:	a974      	add	r1, sp, #464	; 0x1d0
  4075ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4075b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4075b2:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
  4075b6:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  4075ba:	a924      	add	r1, sp, #144	; 0x90
  4075bc:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  4075c0:	9a03      	ldr	r2, [sp, #12]
  4075c2:	00db      	lsls	r3, r3, #3
  4075c4:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
  4075c8:	9300      	str	r3, [sp, #0]
  4075ca:	9b03      	ldr	r3, [sp, #12]
  4075cc:	2b00      	cmp	r3, #0
  4075ce:	f2c0 8195 	blt.w	4078fc <__kernel_rem_pio2+0x3cc>
  4075d2:	9b04      	ldr	r3, [sp, #16]
  4075d4:	4644      	mov	r4, r8
  4075d6:	2600      	movs	r6, #0
  4075d8:	2700      	movs	r7, #0
  4075da:	f1a3 0a08 	sub.w	sl, r3, #8
  4075de:	9b00      	ldr	r3, [sp, #0]
  4075e0:	eb08 0503 	add.w	r5, r8, r3
  4075e4:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  4075e8:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4075ec:	f001 f8d4 	bl	408798 <__aeabi_dmul>
  4075f0:	4602      	mov	r2, r0
  4075f2:	460b      	mov	r3, r1
  4075f4:	4630      	mov	r0, r6
  4075f6:	4639      	mov	r1, r7
  4075f8:	f000 ff1c 	bl	408434 <__adddf3>
  4075fc:	42ac      	cmp	r4, r5
  4075fe:	4606      	mov	r6, r0
  407600:	460f      	mov	r7, r1
  407602:	d1ef      	bne.n	4075e4 <__kernel_rem_pio2+0xb4>
  407604:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  407608:	45d9      	cmp	r9, fp
  40760a:	f108 0808 	add.w	r8, r8, #8
  40760e:	d1dc      	bne.n	4075ca <__kernel_rem_pio2+0x9a>
  407610:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407612:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  407616:	a910      	add	r1, sp, #64	; 0x40
  407618:	4413      	add	r3, r2
  40761a:	4693      	mov	fp, r2
  40761c:	009b      	lsls	r3, r3, #2
  40761e:	1d1a      	adds	r2, r3, #4
  407620:	440b      	add	r3, r1
  407622:	930e      	str	r3, [sp, #56]	; 0x38
  407624:	460b      	mov	r3, r1
  407626:	4413      	add	r3, r2
  407628:	930f      	str	r3, [sp, #60]	; 0x3c
  40762a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  40762e:	a99c      	add	r1, sp, #624	; 0x270
  407630:	f1bb 0f00 	cmp.w	fp, #0
  407634:	461a      	mov	r2, r3
  407636:	9306      	str	r3, [sp, #24]
  407638:	440b      	add	r3, r1
  40763a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  40763e:	dd28      	ble.n	407692 <__kernel_rem_pio2+0x162>
  407640:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
  407644:	af0f      	add	r7, sp, #60	; 0x3c
  407646:	eb0a 0602 	add.w	r6, sl, r2
  40764a:	2200      	movs	r2, #0
  40764c:	4b41      	ldr	r3, [pc, #260]	; (407754 <__kernel_rem_pio2+0x224>)
  40764e:	4620      	mov	r0, r4
  407650:	4629      	mov	r1, r5
  407652:	f001 f8a1 	bl	408798 <__aeabi_dmul>
  407656:	f001 fb39 	bl	408ccc <__aeabi_d2iz>
  40765a:	f001 f837 	bl	4086cc <__aeabi_i2d>
  40765e:	2200      	movs	r2, #0
  407660:	4b3d      	ldr	r3, [pc, #244]	; (407758 <__kernel_rem_pio2+0x228>)
  407662:	4680      	mov	r8, r0
  407664:	4689      	mov	r9, r1
  407666:	f001 f897 	bl	408798 <__aeabi_dmul>
  40766a:	4602      	mov	r2, r0
  40766c:	460b      	mov	r3, r1
  40766e:	4620      	mov	r0, r4
  407670:	4629      	mov	r1, r5
  407672:	f000 fedd 	bl	408430 <__aeabi_dsub>
  407676:	f001 fb29 	bl	408ccc <__aeabi_d2iz>
  40767a:	4649      	mov	r1, r9
  40767c:	f847 0f04 	str.w	r0, [r7, #4]!
  407680:	4640      	mov	r0, r8
  407682:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
  407686:	f000 fed5 	bl	408434 <__adddf3>
  40768a:	4604      	mov	r4, r0
  40768c:	4556      	cmp	r6, sl
  40768e:	460d      	mov	r5, r1
  407690:	d1db      	bne.n	40764a <__kernel_rem_pio2+0x11a>
  407692:	f8dd 9020 	ldr.w	r9, [sp, #32]
  407696:	4620      	mov	r0, r4
  407698:	4629      	mov	r1, r5
  40769a:	464a      	mov	r2, r9
  40769c:	f000 fe3c 	bl	408318 <scalbn>
  4076a0:	2200      	movs	r2, #0
  4076a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4076a6:	4604      	mov	r4, r0
  4076a8:	460d      	mov	r5, r1
  4076aa:	f001 f875 	bl	408798 <__aeabi_dmul>
  4076ae:	f000 fd7f 	bl	4081b0 <floor>
  4076b2:	2200      	movs	r2, #0
  4076b4:	4b29      	ldr	r3, [pc, #164]	; (40775c <__kernel_rem_pio2+0x22c>)
  4076b6:	f001 f86f 	bl	408798 <__aeabi_dmul>
  4076ba:	4602      	mov	r2, r0
  4076bc:	460b      	mov	r3, r1
  4076be:	4620      	mov	r0, r4
  4076c0:	4629      	mov	r1, r5
  4076c2:	f000 feb5 	bl	408430 <__aeabi_dsub>
  4076c6:	460d      	mov	r5, r1
  4076c8:	4604      	mov	r4, r0
  4076ca:	f001 faff 	bl	408ccc <__aeabi_d2iz>
  4076ce:	4680      	mov	r8, r0
  4076d0:	f000 fffc 	bl	4086cc <__aeabi_i2d>
  4076d4:	460b      	mov	r3, r1
  4076d6:	4602      	mov	r2, r0
  4076d8:	4629      	mov	r1, r5
  4076da:	4620      	mov	r0, r4
  4076dc:	f000 fea8 	bl	408430 <__aeabi_dsub>
  4076e0:	464b      	mov	r3, r9
  4076e2:	4606      	mov	r6, r0
  4076e4:	460f      	mov	r7, r1
  4076e6:	2b00      	cmp	r3, #0
  4076e8:	f340 80f4 	ble.w	4078d4 <__kernel_rem_pio2+0x3a4>
  4076ec:	f10b 30ff 	add.w	r0, fp, #4294967295
  4076f0:	ab10      	add	r3, sp, #64	; 0x40
  4076f2:	f1c9 0218 	rsb	r2, r9, #24
  4076f6:	f1c9 0117 	rsb	r1, r9, #23
  4076fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  4076fe:	fa43 f402 	asr.w	r4, r3, r2
  407702:	fa04 f502 	lsl.w	r5, r4, r2
  407706:	44a0      	add	r8, r4
  407708:	1b5d      	subs	r5, r3, r5
  40770a:	ab10      	add	r3, sp, #64	; 0x40
  40770c:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  407710:	410d      	asrs	r5, r1
  407712:	2d00      	cmp	r5, #0
  407714:	dd2c      	ble.n	407770 <__kernel_rem_pio2+0x240>
  407716:	f1bb 0f00 	cmp.w	fp, #0
  40771a:	f108 0801 	add.w	r8, r8, #1
  40771e:	f340 80ab 	ble.w	407878 <__kernel_rem_pio2+0x348>
  407722:	2300      	movs	r3, #0
  407724:	aa0f      	add	r2, sp, #60	; 0x3c
  407726:	461c      	mov	r4, r3
  407728:	e008      	b.n	40773c <__kernel_rem_pio2+0x20c>
  40772a:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  40772e:	b108      	cbz	r0, 407734 <__kernel_rem_pio2+0x204>
  407730:	2401      	movs	r4, #1
  407732:	6011      	str	r1, [r2, #0]
  407734:	3301      	adds	r3, #1
  407736:	459b      	cmp	fp, r3
  407738:	f340 809f 	ble.w	40787a <__kernel_rem_pio2+0x34a>
  40773c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  407740:	f852 0f04 	ldr.w	r0, [r2, #4]!
  407744:	2c00      	cmp	r4, #0
  407746:	d0f0      	beq.n	40772a <__kernel_rem_pio2+0x1fa>
  407748:	1a09      	subs	r1, r1, r0
  40774a:	e7f1      	b.n	407730 <__kernel_rem_pio2+0x200>
  40774c:	2aaaaaab 	.word	0x2aaaaaab
  407750:	0040fba4 	.word	0x0040fba4
  407754:	3e700000 	.word	0x3e700000
  407758:	41700000 	.word	0x41700000
  40775c:	40200000 	.word	0x40200000
  407760:	2200      	movs	r2, #0
  407762:	4bb2      	ldr	r3, [pc, #712]	; (407a2c <__kernel_rem_pio2+0x4fc>)
  407764:	f001 fa9e 	bl	408ca4 <__aeabi_dcmpge>
  407768:	2800      	cmp	r0, #0
  40776a:	f040 80d1 	bne.w	407910 <__kernel_rem_pio2+0x3e0>
  40776e:	4605      	mov	r5, r0
  407770:	4630      	mov	r0, r6
  407772:	4639      	mov	r1, r7
  407774:	2200      	movs	r2, #0
  407776:	2300      	movs	r3, #0
  407778:	f001 fa76 	bl	408c68 <__aeabi_dcmpeq>
  40777c:	2800      	cmp	r0, #0
  40777e:	f000 80d9 	beq.w	407934 <__kernel_rem_pio2+0x404>
  407782:	f10b 3aff 	add.w	sl, fp, #4294967295
  407786:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407788:	4553      	cmp	r3, sl
  40778a:	dc0d      	bgt.n	4077a8 <__kernel_rem_pio2+0x278>
  40778c:	ab10      	add	r3, sp, #64	; 0x40
  40778e:	2200      	movs	r2, #0
  407790:	980f      	ldr	r0, [sp, #60]	; 0x3c
  407792:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  407796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40779a:	4283      	cmp	r3, r0
  40779c:	ea42 0201 	orr.w	r2, r2, r1
  4077a0:	d1f9      	bne.n	407796 <__kernel_rem_pio2+0x266>
  4077a2:	2a00      	cmp	r2, #0
  4077a4:	f040 8229 	bne.w	407bfa <__kernel_rem_pio2+0x6ca>
  4077a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4077aa:	aa10      	add	r2, sp, #64	; 0x40
  4077ac:	3b01      	subs	r3, #1
  4077ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4077b2:	2b00      	cmp	r3, #0
  4077b4:	f040 8239 	bne.w	407c2a <__kernel_rem_pio2+0x6fa>
  4077b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4077ba:	2301      	movs	r3, #1
  4077bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4077c0:	3301      	adds	r3, #1
  4077c2:	2900      	cmp	r1, #0
  4077c4:	d0fa      	beq.n	4077bc <__kernel_rem_pio2+0x28c>
  4077c6:	445b      	add	r3, fp
  4077c8:	461a      	mov	r2, r3
  4077ca:	930b      	str	r3, [sp, #44]	; 0x2c
  4077cc:	f10b 0301 	add.w	r3, fp, #1
  4077d0:	4293      	cmp	r3, r2
  4077d2:	dc4b      	bgt.n	40786c <__kernel_rem_pio2+0x33c>
  4077d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4077d6:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  4077da:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077dc:	f04f 0800 	mov.w	r8, #0
  4077e0:	4413      	add	r3, r2
  4077e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4077e4:	445a      	add	r2, fp
  4077e6:	4499      	add	r9, r3
  4077e8:	ebcb 0b01 	rsb	fp, fp, r1
  4077ec:	00d3      	lsls	r3, r2, #3
  4077ee:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
  4077f0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
  4077f4:	9307      	str	r3, [sp, #28]
  4077f6:	9200      	str	r2, [sp, #0]
  4077f8:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  4077fc:	9205      	str	r2, [sp, #20]
  4077fe:	aa24      	add	r2, sp, #144	; 0x90
  407800:	eb02 0b03 	add.w	fp, r2, r3
  407804:	aa74      	add	r2, sp, #464	; 0x1d0
  407806:	9b06      	ldr	r3, [sp, #24]
  407808:	eb02 0a03 	add.w	sl, r2, r3
  40780c:	9b00      	ldr	r3, [sp, #0]
  40780e:	f853 0f04 	ldr.w	r0, [r3, #4]!
  407812:	9300      	str	r3, [sp, #0]
  407814:	f000 ff5a 	bl	4086cc <__aeabi_i2d>
  407818:	9b03      	ldr	r3, [sp, #12]
  40781a:	2b00      	cmp	r3, #0
  40781c:	e8eb 0102 	strd	r0, r1, [fp], #8
  407820:	db27      	blt.n	407872 <__kernel_rem_pio2+0x342>
  407822:	9b07      	ldr	r3, [sp, #28]
  407824:	2600      	movs	r6, #0
  407826:	2700      	movs	r7, #0
  407828:	eb03 0408 	add.w	r4, r3, r8
  40782c:	9b06      	ldr	r3, [sp, #24]
  40782e:	eb08 0503 	add.w	r5, r8, r3
  407832:	9b04      	ldr	r3, [sp, #16]
  407834:	f1a3 0908 	sub.w	r9, r3, #8
  407838:	ab24      	add	r3, sp, #144	; 0x90
  40783a:	441c      	add	r4, r3
  40783c:	441d      	add	r5, r3
  40783e:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  407842:	e874 0102 	ldrd	r0, r1, [r4], #-8
  407846:	f000 ffa7 	bl	408798 <__aeabi_dmul>
  40784a:	4602      	mov	r2, r0
  40784c:	460b      	mov	r3, r1
  40784e:	4630      	mov	r0, r6
  407850:	4639      	mov	r1, r7
  407852:	f000 fdef 	bl	408434 <__adddf3>
  407856:	42ac      	cmp	r4, r5
  407858:	4606      	mov	r6, r0
  40785a:	460f      	mov	r7, r1
  40785c:	d1ef      	bne.n	40783e <__kernel_rem_pio2+0x30e>
  40785e:	f108 0808 	add.w	r8, r8, #8
  407862:	9b05      	ldr	r3, [sp, #20]
  407864:	4598      	cmp	r8, r3
  407866:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40786a:	d1cf      	bne.n	40780c <__kernel_rem_pio2+0x2dc>
  40786c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  407870:	e6db      	b.n	40762a <__kernel_rem_pio2+0xfa>
  407872:	2600      	movs	r6, #0
  407874:	2700      	movs	r7, #0
  407876:	e7f2      	b.n	40785e <__kernel_rem_pio2+0x32e>
  407878:	2400      	movs	r4, #0
  40787a:	9b08      	ldr	r3, [sp, #32]
  40787c:	2b00      	cmp	r3, #0
  40787e:	dd0d      	ble.n	40789c <__kernel_rem_pio2+0x36c>
  407880:	2b01      	cmp	r3, #1
  407882:	d030      	beq.n	4078e6 <__kernel_rem_pio2+0x3b6>
  407884:	2b02      	cmp	r3, #2
  407886:	d109      	bne.n	40789c <__kernel_rem_pio2+0x36c>
  407888:	f10b 32ff 	add.w	r2, fp, #4294967295
  40788c:	ab10      	add	r3, sp, #64	; 0x40
  40788e:	a910      	add	r1, sp, #64	; 0x40
  407890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  407894:	f3c3 0315 	ubfx	r3, r3, #0, #22
  407898:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40789c:	2d02      	cmp	r5, #2
  40789e:	f47f af67 	bne.w	407770 <__kernel_rem_pio2+0x240>
  4078a2:	4632      	mov	r2, r6
  4078a4:	463b      	mov	r3, r7
  4078a6:	2000      	movs	r0, #0
  4078a8:	4961      	ldr	r1, [pc, #388]	; (407a30 <__kernel_rem_pio2+0x500>)
  4078aa:	f000 fdc1 	bl	408430 <__aeabi_dsub>
  4078ae:	4606      	mov	r6, r0
  4078b0:	460f      	mov	r7, r1
  4078b2:	2c00      	cmp	r4, #0
  4078b4:	f43f af5c 	beq.w	407770 <__kernel_rem_pio2+0x240>
  4078b8:	9a08      	ldr	r2, [sp, #32]
  4078ba:	2000      	movs	r0, #0
  4078bc:	495c      	ldr	r1, [pc, #368]	; (407a30 <__kernel_rem_pio2+0x500>)
  4078be:	f000 fd2b 	bl	408318 <scalbn>
  4078c2:	4602      	mov	r2, r0
  4078c4:	460b      	mov	r3, r1
  4078c6:	4630      	mov	r0, r6
  4078c8:	4639      	mov	r1, r7
  4078ca:	f000 fdb1 	bl	408430 <__aeabi_dsub>
  4078ce:	4606      	mov	r6, r0
  4078d0:	460f      	mov	r7, r1
  4078d2:	e74d      	b.n	407770 <__kernel_rem_pio2+0x240>
  4078d4:	f47f af44 	bne.w	407760 <__kernel_rem_pio2+0x230>
  4078d8:	f10b 33ff 	add.w	r3, fp, #4294967295
  4078dc:	aa10      	add	r2, sp, #64	; 0x40
  4078de:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  4078e2:	15ed      	asrs	r5, r5, #23
  4078e4:	e715      	b.n	407712 <__kernel_rem_pio2+0x1e2>
  4078e6:	f10b 32ff 	add.w	r2, fp, #4294967295
  4078ea:	ab10      	add	r3, sp, #64	; 0x40
  4078ec:	a910      	add	r1, sp, #64	; 0x40
  4078ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4078f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4078f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4078fa:	e7cf      	b.n	40789c <__kernel_rem_pio2+0x36c>
  4078fc:	2600      	movs	r6, #0
  4078fe:	2700      	movs	r7, #0
  407900:	f108 0808 	add.w	r8, r8, #8
  407904:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  407908:	45d9      	cmp	r9, fp
  40790a:	f47f ae5e 	bne.w	4075ca <__kernel_rem_pio2+0x9a>
  40790e:	e67f      	b.n	407610 <__kernel_rem_pio2+0xe0>
  407910:	f1bb 0f00 	cmp.w	fp, #0
  407914:	f108 0801 	add.w	r8, r8, #1
  407918:	bfc8      	it	gt
  40791a:	2502      	movgt	r5, #2
  40791c:	f73f af01 	bgt.w	407722 <__kernel_rem_pio2+0x1f2>
  407920:	4632      	mov	r2, r6
  407922:	463b      	mov	r3, r7
  407924:	2000      	movs	r0, #0
  407926:	4942      	ldr	r1, [pc, #264]	; (407a30 <__kernel_rem_pio2+0x500>)
  407928:	f000 fd82 	bl	408430 <__aeabi_dsub>
  40792c:	2502      	movs	r5, #2
  40792e:	4606      	mov	r6, r0
  407930:	460f      	mov	r7, r1
  407932:	e71d      	b.n	407770 <__kernel_rem_pio2+0x240>
  407934:	9b08      	ldr	r3, [sp, #32]
  407936:	4630      	mov	r0, r6
  407938:	4639      	mov	r1, r7
  40793a:	9503      	str	r5, [sp, #12]
  40793c:	425a      	negs	r2, r3
  40793e:	f8cd 8014 	str.w	r8, [sp, #20]
  407942:	f000 fce9 	bl	408318 <scalbn>
  407946:	2200      	movs	r2, #0
  407948:	4b3a      	ldr	r3, [pc, #232]	; (407a34 <__kernel_rem_pio2+0x504>)
  40794a:	4604      	mov	r4, r0
  40794c:	460d      	mov	r5, r1
  40794e:	f001 f9a9 	bl	408ca4 <__aeabi_dcmpge>
  407952:	2800      	cmp	r0, #0
  407954:	f000 81e2 	beq.w	407d1c <__kernel_rem_pio2+0x7ec>
  407958:	2200      	movs	r2, #0
  40795a:	4b37      	ldr	r3, [pc, #220]	; (407a38 <__kernel_rem_pio2+0x508>)
  40795c:	4620      	mov	r0, r4
  40795e:	4629      	mov	r1, r5
  407960:	f000 ff1a 	bl	408798 <__aeabi_dmul>
  407964:	9b08      	ldr	r3, [sp, #32]
  407966:	f10b 0a01 	add.w	sl, fp, #1
  40796a:	3318      	adds	r3, #24
  40796c:	9308      	str	r3, [sp, #32]
  40796e:	f001 f9ad 	bl	408ccc <__aeabi_d2iz>
  407972:	4606      	mov	r6, r0
  407974:	f000 feaa 	bl	4086cc <__aeabi_i2d>
  407978:	2200      	movs	r2, #0
  40797a:	4b2e      	ldr	r3, [pc, #184]	; (407a34 <__kernel_rem_pio2+0x504>)
  40797c:	f000 ff0c 	bl	408798 <__aeabi_dmul>
  407980:	460b      	mov	r3, r1
  407982:	4602      	mov	r2, r0
  407984:	4629      	mov	r1, r5
  407986:	4620      	mov	r0, r4
  407988:	f000 fd52 	bl	408430 <__aeabi_dsub>
  40798c:	f001 f99e 	bl	408ccc <__aeabi_d2iz>
  407990:	ab10      	add	r3, sp, #64	; 0x40
  407992:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  407996:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
  40799a:	9a08      	ldr	r2, [sp, #32]
  40799c:	2000      	movs	r0, #0
  40799e:	4924      	ldr	r1, [pc, #144]	; (407a30 <__kernel_rem_pio2+0x500>)
  4079a0:	f000 fcba 	bl	408318 <scalbn>
  4079a4:	f1ba 0f00 	cmp.w	sl, #0
  4079a8:	4604      	mov	r4, r0
  4079aa:	460d      	mov	r5, r1
  4079ac:	f2c0 80d8 	blt.w	407b60 <__kernel_rem_pio2+0x630>
  4079b0:	f10a 0301 	add.w	r3, sl, #1
  4079b4:	af74      	add	r7, sp, #464	; 0x1d0
  4079b6:	aa10      	add	r2, sp, #64	; 0x40
  4079b8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  4079bc:	9300      	str	r3, [sp, #0]
  4079be:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  4079c2:	eb07 0608 	add.w	r6, r7, r8
  4079c6:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  4079ca:	f000 fe7f 	bl	4086cc <__aeabi_i2d>
  4079ce:	4622      	mov	r2, r4
  4079d0:	462b      	mov	r3, r5
  4079d2:	f000 fee1 	bl	408798 <__aeabi_dmul>
  4079d6:	2200      	movs	r2, #0
  4079d8:	4b17      	ldr	r3, [pc, #92]	; (407a38 <__kernel_rem_pio2+0x508>)
  4079da:	e966 0102 	strd	r0, r1, [r6, #-8]!
  4079de:	4620      	mov	r0, r4
  4079e0:	4629      	mov	r1, r5
  4079e2:	f000 fed9 	bl	408798 <__aeabi_dmul>
  4079e6:	42be      	cmp	r6, r7
  4079e8:	4604      	mov	r4, r0
  4079ea:	460d      	mov	r5, r1
  4079ec:	d1eb      	bne.n	4079c6 <__kernel_rem_pio2+0x496>
  4079ee:	f1a8 0b08 	sub.w	fp, r8, #8
  4079f2:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  4079f6:	f8cd a018 	str.w	sl, [sp, #24]
  4079fa:	f04f 0800 	mov.w	r8, #0
  4079fe:	eb06 030b 	add.w	r3, r6, fp
  407a02:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  407a06:	f8cd 9010 	str.w	r9, [sp, #16]
  407a0a:	469b      	mov	fp, r3
  407a0c:	f1ba 0f00 	cmp.w	sl, #0
  407a10:	f2c0 80a3 	blt.w	407b5a <__kernel_rem_pio2+0x62a>
  407a14:	f1b8 0f00 	cmp.w	r8, #0
  407a18:	f2c0 809f 	blt.w	407b5a <__kernel_rem_pio2+0x62a>
  407a1c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 407a3c <__kernel_rem_pio2+0x50c>
  407a20:	465d      	mov	r5, fp
  407a22:	2600      	movs	r6, #0
  407a24:	2700      	movs	r7, #0
  407a26:	2400      	movs	r4, #0
  407a28:	e00c      	b.n	407a44 <__kernel_rem_pio2+0x514>
  407a2a:	bf00      	nop
  407a2c:	3fe00000 	.word	0x3fe00000
  407a30:	3ff00000 	.word	0x3ff00000
  407a34:	41700000 	.word	0x41700000
  407a38:	3e700000 	.word	0x3e700000
  407a3c:	0040fbb0 	.word	0x0040fbb0
  407a40:	4544      	cmp	r4, r8
  407a42:	dc10      	bgt.n	407a66 <__kernel_rem_pio2+0x536>
  407a44:	3401      	adds	r4, #1
  407a46:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  407a4a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  407a4e:	f000 fea3 	bl	408798 <__aeabi_dmul>
  407a52:	4602      	mov	r2, r0
  407a54:	460b      	mov	r3, r1
  407a56:	4630      	mov	r0, r6
  407a58:	4639      	mov	r1, r7
  407a5a:	f000 fceb 	bl	408434 <__adddf3>
  407a5e:	45a2      	cmp	sl, r4
  407a60:	4606      	mov	r6, r0
  407a62:	460f      	mov	r7, r1
  407a64:	daec      	bge.n	407a40 <__kernel_rem_pio2+0x510>
  407a66:	9b04      	ldr	r3, [sp, #16]
  407a68:	f1ab 0b08 	sub.w	fp, fp, #8
  407a6c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  407a70:	f108 0801 	add.w	r8, r8, #1
  407a74:	e9c3 6700 	strd	r6, r7, [r3]
  407a78:	9b00      	ldr	r3, [sp, #0]
  407a7a:	4598      	cmp	r8, r3
  407a7c:	d1c6      	bne.n	407a0c <__kernel_rem_pio2+0x4dc>
  407a7e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  407a80:	f8dd a018 	ldr.w	sl, [sp, #24]
  407a84:	f8dd 9010 	ldr.w	r9, [sp, #16]
  407a88:	2b03      	cmp	r3, #3
  407a8a:	d83d      	bhi.n	407b08 <__kernel_rem_pio2+0x5d8>
  407a8c:	e8df f013 	tbh	[pc, r3, lsl #1]
  407a90:	00040043 	.word	0x00040043
  407a94:	00cf0004 	.word	0x00cf0004
  407a98:	2400      	movs	r4, #0
  407a9a:	9b00      	ldr	r3, [sp, #0]
  407a9c:	4626      	mov	r6, r4
  407a9e:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
  407aa2:	4620      	mov	r0, r4
  407aa4:	4631      	mov	r1, r6
  407aa6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  407aaa:	f000 fcc3 	bl	408434 <__adddf3>
  407aae:	4604      	mov	r4, r0
  407ab0:	454d      	cmp	r5, r9
  407ab2:	460e      	mov	r6, r1
  407ab4:	d1f5      	bne.n	407aa2 <__kernel_rem_pio2+0x572>
  407ab6:	9b03      	ldr	r3, [sp, #12]
  407ab8:	2b00      	cmp	r3, #0
  407aba:	f000 8084 	beq.w	407bc6 <__kernel_rem_pio2+0x696>
  407abe:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  407ac2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407ac4:	4622      	mov	r2, r4
  407ac6:	4633      	mov	r3, r6
  407ac8:	6069      	str	r1, [r5, #4]
  407aca:	602c      	str	r4, [r5, #0]
  407acc:	e9d9 0100 	ldrd	r0, r1, [r9]
  407ad0:	f000 fcae 	bl	408430 <__aeabi_dsub>
  407ad4:	f1ba 0f00 	cmp.w	sl, #0
  407ad8:	4602      	mov	r2, r0
  407ada:	460b      	mov	r3, r1
  407adc:	dd0d      	ble.n	407afa <__kernel_rem_pio2+0x5ca>
  407ade:	2401      	movs	r4, #1
  407ae0:	3401      	adds	r4, #1
  407ae2:	4610      	mov	r0, r2
  407ae4:	4619      	mov	r1, r3
  407ae6:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  407aea:	f000 fca3 	bl	408434 <__adddf3>
  407aee:	45a2      	cmp	sl, r4
  407af0:	4602      	mov	r2, r0
  407af2:	460b      	mov	r3, r1
  407af4:	daf4      	bge.n	407ae0 <__kernel_rem_pio2+0x5b0>
  407af6:	9903      	ldr	r1, [sp, #12]
  407af8:	b109      	cbz	r1, 407afe <__kernel_rem_pio2+0x5ce>
  407afa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  407afe:	4619      	mov	r1, r3
  407b00:	4610      	mov	r0, r2
  407b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b04:	e9c3 0102 	strd	r0, r1, [r3, #8]
  407b08:	9b05      	ldr	r3, [sp, #20]
  407b0a:	f003 0007 	and.w	r0, r3, #7
  407b0e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  407b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b16:	9b00      	ldr	r3, [sp, #0]
  407b18:	2200      	movs	r2, #0
  407b1a:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  407b1e:	4613      	mov	r3, r2
  407b20:	f10a 3aff 	add.w	sl, sl, #4294967295
  407b24:	4610      	mov	r0, r2
  407b26:	4619      	mov	r1, r3
  407b28:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  407b2c:	f000 fc82 	bl	408434 <__adddf3>
  407b30:	f1ba 3fff 	cmp.w	sl, #4294967295
  407b34:	4602      	mov	r2, r0
  407b36:	460b      	mov	r3, r1
  407b38:	d1f2      	bne.n	407b20 <__kernel_rem_pio2+0x5f0>
  407b3a:	9903      	ldr	r1, [sp, #12]
  407b3c:	b109      	cbz	r1, 407b42 <__kernel_rem_pio2+0x612>
  407b3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  407b42:	4610      	mov	r0, r2
  407b44:	4619      	mov	r1, r3
  407b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b48:	e9c3 0100 	strd	r0, r1, [r3]
  407b4c:	9b05      	ldr	r3, [sp, #20]
  407b4e:	f003 0007 	and.w	r0, r3, #7
  407b52:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  407b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b5a:	2600      	movs	r6, #0
  407b5c:	2700      	movs	r7, #0
  407b5e:	e782      	b.n	407a66 <__kernel_rem_pio2+0x536>
  407b60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  407b62:	2b03      	cmp	r3, #3
  407b64:	d8d0      	bhi.n	407b08 <__kernel_rem_pio2+0x5d8>
  407b66:	e8df f003 	tbb	[pc, r3]
  407b6a:	2645      	.short	0x2645
  407b6c:	0226      	.short	0x0226
  407b6e:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  407b72:	2300      	movs	r3, #0
  407b74:	9903      	ldr	r1, [sp, #12]
  407b76:	461a      	mov	r2, r3
  407b78:	2900      	cmp	r1, #0
  407b7a:	f000 80b9 	beq.w	407cf0 <__kernel_rem_pio2+0x7c0>
  407b7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407b80:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  407b84:	f8d9 0004 	ldr.w	r0, [r9, #4]
  407b88:	f8d9 100c 	ldr.w	r1, [r9, #12]
  407b8c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  407b90:	613b      	str	r3, [r7, #16]
  407b92:	9b05      	ldr	r3, [sp, #20]
  407b94:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407b98:	f8d9 4000 	ldr.w	r4, [r9]
  407b9c:	f8d9 5008 	ldr.w	r5, [r9, #8]
  407ba0:	6078      	str	r0, [r7, #4]
  407ba2:	f003 0007 	and.w	r0, r3, #7
  407ba6:	617a      	str	r2, [r7, #20]
  407ba8:	60f9      	str	r1, [r7, #12]
  407baa:	603c      	str	r4, [r7, #0]
  407bac:	60bd      	str	r5, [r7, #8]
  407bae:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  407bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407bb6:	2400      	movs	r4, #0
  407bb8:	9b03      	ldr	r3, [sp, #12]
  407bba:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  407bbe:	4626      	mov	r6, r4
  407bc0:	2b00      	cmp	r3, #0
  407bc2:	f47f af7c 	bne.w	407abe <__kernel_rem_pio2+0x58e>
  407bc6:	4620      	mov	r0, r4
  407bc8:	4622      	mov	r2, r4
  407bca:	4631      	mov	r1, r6
  407bcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407bce:	4633      	mov	r3, r6
  407bd0:	e9c4 0100 	strd	r0, r1, [r4]
  407bd4:	e9d9 0100 	ldrd	r0, r1, [r9]
  407bd8:	f000 fc2a 	bl	408430 <__aeabi_dsub>
  407bdc:	f1ba 0f00 	cmp.w	sl, #0
  407be0:	4602      	mov	r2, r0
  407be2:	460b      	mov	r3, r1
  407be4:	f73f af7b 	bgt.w	407ade <__kernel_rem_pio2+0x5ae>
  407be8:	4619      	mov	r1, r3
  407bea:	4610      	mov	r0, r2
  407bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407bee:	e9c3 0102 	strd	r0, r1, [r3, #8]
  407bf2:	e789      	b.n	407b08 <__kernel_rem_pio2+0x5d8>
  407bf4:	2200      	movs	r2, #0
  407bf6:	4613      	mov	r3, r2
  407bf8:	e79f      	b.n	407b3a <__kernel_rem_pio2+0x60a>
  407bfa:	9a08      	ldr	r2, [sp, #32]
  407bfc:	ab10      	add	r3, sp, #64	; 0x40
  407bfe:	9503      	str	r5, [sp, #12]
  407c00:	3a18      	subs	r2, #24
  407c02:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  407c06:	f8cd 8014 	str.w	r8, [sp, #20]
  407c0a:	9208      	str	r2, [sp, #32]
  407c0c:	2b00      	cmp	r3, #0
  407c0e:	f47f aec4 	bne.w	40799a <__kernel_rem_pio2+0x46a>
  407c12:	ab10      	add	r3, sp, #64	; 0x40
  407c14:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  407c18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  407c1c:	f10a 3aff 	add.w	sl, sl, #4294967295
  407c20:	3a18      	subs	r2, #24
  407c22:	2900      	cmp	r1, #0
  407c24:	d0f8      	beq.n	407c18 <__kernel_rem_pio2+0x6e8>
  407c26:	9208      	str	r2, [sp, #32]
  407c28:	e6b7      	b.n	40799a <__kernel_rem_pio2+0x46a>
  407c2a:	2301      	movs	r3, #1
  407c2c:	e5cb      	b.n	4077c6 <__kernel_rem_pio2+0x296>
  407c2e:	f1ba 0f00 	cmp.w	sl, #0
  407c32:	dd9e      	ble.n	407b72 <__kernel_rem_pio2+0x642>
  407c34:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  407c38:	eb09 0b08 	add.w	fp, r9, r8
  407c3c:	e9db 6700 	ldrd	r6, r7, [fp]
  407c40:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
  407c44:	4630      	mov	r0, r6
  407c46:	4639      	mov	r1, r7
  407c48:	e9cd 2300 	strd	r2, r3, [sp]
  407c4c:	f000 fbf2 	bl	408434 <__adddf3>
  407c50:	4604      	mov	r4, r0
  407c52:	460d      	mov	r5, r1
  407c54:	4622      	mov	r2, r4
  407c56:	462b      	mov	r3, r5
  407c58:	e9dd 0100 	ldrd	r0, r1, [sp]
  407c5c:	f000 fbe8 	bl	408430 <__aeabi_dsub>
  407c60:	4602      	mov	r2, r0
  407c62:	460b      	mov	r3, r1
  407c64:	4630      	mov	r0, r6
  407c66:	4639      	mov	r1, r7
  407c68:	4626      	mov	r6, r4
  407c6a:	f000 fbe3 	bl	408434 <__adddf3>
  407c6e:	45cb      	cmp	fp, r9
  407c70:	462f      	mov	r7, r5
  407c72:	e9cb 0102 	strd	r0, r1, [fp, #8]
  407c76:	e9cb 4500 	strd	r4, r5, [fp]
  407c7a:	d1e1      	bne.n	407c40 <__kernel_rem_pio2+0x710>
  407c7c:	f1ba 0f01 	cmp.w	sl, #1
  407c80:	f77f af77 	ble.w	407b72 <__kernel_rem_pio2+0x642>
  407c84:	eb09 0a08 	add.w	sl, r9, r8
  407c88:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  407c8c:	e9da 6700 	ldrd	r6, r7, [sl]
  407c90:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  407c94:	4632      	mov	r2, r6
  407c96:	463b      	mov	r3, r7
  407c98:	e9cd 0100 	strd	r0, r1, [sp]
  407c9c:	f000 fbca 	bl	408434 <__adddf3>
  407ca0:	4604      	mov	r4, r0
  407ca2:	460d      	mov	r5, r1
  407ca4:	4622      	mov	r2, r4
  407ca6:	462b      	mov	r3, r5
  407ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
  407cac:	f000 fbc0 	bl	408430 <__aeabi_dsub>
  407cb0:	4632      	mov	r2, r6
  407cb2:	463b      	mov	r3, r7
  407cb4:	4626      	mov	r6, r4
  407cb6:	f000 fbbd 	bl	408434 <__adddf3>
  407cba:	45da      	cmp	sl, fp
  407cbc:	462f      	mov	r7, r5
  407cbe:	e9ca 0102 	strd	r0, r1, [sl, #8]
  407cc2:	e9ca 4500 	strd	r4, r5, [sl]
  407cc6:	d1e3      	bne.n	407c90 <__kernel_rem_pio2+0x760>
  407cc8:	f108 0408 	add.w	r4, r8, #8
  407ccc:	2300      	movs	r3, #0
  407cce:	ad50      	add	r5, sp, #320	; 0x140
  407cd0:	444c      	add	r4, r9
  407cd2:	461a      	mov	r2, r3
  407cd4:	4618      	mov	r0, r3
  407cd6:	4611      	mov	r1, r2
  407cd8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  407cdc:	f000 fbaa 	bl	408434 <__adddf3>
  407ce0:	4603      	mov	r3, r0
  407ce2:	42ac      	cmp	r4, r5
  407ce4:	460a      	mov	r2, r1
  407ce6:	d1f5      	bne.n	407cd4 <__kernel_rem_pio2+0x7a4>
  407ce8:	9903      	ldr	r1, [sp, #12]
  407cea:	2900      	cmp	r1, #0
  407cec:	f47f af47 	bne.w	407b7e <__kernel_rem_pio2+0x64e>
  407cf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407cf2:	4618      	mov	r0, r3
  407cf4:	4611      	mov	r1, r2
  407cf6:	4604      	mov	r4, r0
  407cf8:	460d      	mov	r5, r1
  407cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
  407cfe:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
  407d02:	e9c7 2300 	strd	r2, r3, [r7]
  407d06:	9b05      	ldr	r3, [sp, #20]
  407d08:	e9c7 0102 	strd	r0, r1, [r7, #8]
  407d0c:	f003 0007 	and.w	r0, r3, #7
  407d10:	e9c7 4504 	strd	r4, r5, [r7, #16]
  407d14:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  407d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d1c:	4620      	mov	r0, r4
  407d1e:	4629      	mov	r1, r5
  407d20:	f000 ffd4 	bl	408ccc <__aeabi_d2iz>
  407d24:	ab10      	add	r3, sp, #64	; 0x40
  407d26:	46da      	mov	sl, fp
  407d28:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  407d2c:	e635      	b.n	40799a <__kernel_rem_pio2+0x46a>
  407d2e:	bf00      	nop

00407d30 <__kernel_sin>:
  407d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d34:	4699      	mov	r9, r3
  407d36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407d3a:	b085      	sub	sp, #20
  407d3c:	460c      	mov	r4, r1
  407d3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  407d42:	4690      	mov	r8, r2
  407d44:	4605      	mov	r5, r0
  407d46:	da04      	bge.n	407d52 <__kernel_sin+0x22>
  407d48:	f000 ffc0 	bl	408ccc <__aeabi_d2iz>
  407d4c:	2800      	cmp	r0, #0
  407d4e:	f000 8083 	beq.w	407e58 <__kernel_sin+0x128>
  407d52:	462a      	mov	r2, r5
  407d54:	4623      	mov	r3, r4
  407d56:	4628      	mov	r0, r5
  407d58:	4621      	mov	r1, r4
  407d5a:	f000 fd1d 	bl	408798 <__aeabi_dmul>
  407d5e:	4606      	mov	r6, r0
  407d60:	460f      	mov	r7, r1
  407d62:	462a      	mov	r2, r5
  407d64:	4623      	mov	r3, r4
  407d66:	f000 fd17 	bl	408798 <__aeabi_dmul>
  407d6a:	4682      	mov	sl, r0
  407d6c:	468b      	mov	fp, r1
  407d6e:	4630      	mov	r0, r6
  407d70:	4639      	mov	r1, r7
  407d72:	a33d      	add	r3, pc, #244	; (adr r3, 407e68 <__kernel_sin+0x138>)
  407d74:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d78:	f000 fd0e 	bl	408798 <__aeabi_dmul>
  407d7c:	a33c      	add	r3, pc, #240	; (adr r3, 407e70 <__kernel_sin+0x140>)
  407d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d82:	f000 fb55 	bl	408430 <__aeabi_dsub>
  407d86:	4632      	mov	r2, r6
  407d88:	463b      	mov	r3, r7
  407d8a:	f000 fd05 	bl	408798 <__aeabi_dmul>
  407d8e:	a33a      	add	r3, pc, #232	; (adr r3, 407e78 <__kernel_sin+0x148>)
  407d90:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d94:	f000 fb4e 	bl	408434 <__adddf3>
  407d98:	4632      	mov	r2, r6
  407d9a:	463b      	mov	r3, r7
  407d9c:	f000 fcfc 	bl	408798 <__aeabi_dmul>
  407da0:	a337      	add	r3, pc, #220	; (adr r3, 407e80 <__kernel_sin+0x150>)
  407da2:	e9d3 2300 	ldrd	r2, r3, [r3]
  407da6:	f000 fb43 	bl	408430 <__aeabi_dsub>
  407daa:	4632      	mov	r2, r6
  407dac:	463b      	mov	r3, r7
  407dae:	f000 fcf3 	bl	408798 <__aeabi_dmul>
  407db2:	a335      	add	r3, pc, #212	; (adr r3, 407e88 <__kernel_sin+0x158>)
  407db4:	e9d3 2300 	ldrd	r2, r3, [r3]
  407db8:	f000 fb3c 	bl	408434 <__adddf3>
  407dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407dbe:	e9cd 0100 	strd	r0, r1, [sp]
  407dc2:	b39b      	cbz	r3, 407e2c <__kernel_sin+0xfc>
  407dc4:	4640      	mov	r0, r8
  407dc6:	4649      	mov	r1, r9
  407dc8:	2200      	movs	r2, #0
  407dca:	4b33      	ldr	r3, [pc, #204]	; (407e98 <__kernel_sin+0x168>)
  407dcc:	f000 fce4 	bl	408798 <__aeabi_dmul>
  407dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
  407dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407dd8:	4650      	mov	r0, sl
  407dda:	4659      	mov	r1, fp
  407ddc:	f000 fcdc 	bl	408798 <__aeabi_dmul>
  407de0:	4602      	mov	r2, r0
  407de2:	460b      	mov	r3, r1
  407de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407de8:	f000 fb22 	bl	408430 <__aeabi_dsub>
  407dec:	4632      	mov	r2, r6
  407dee:	463b      	mov	r3, r7
  407df0:	f000 fcd2 	bl	408798 <__aeabi_dmul>
  407df4:	4642      	mov	r2, r8
  407df6:	464b      	mov	r3, r9
  407df8:	f000 fb1a 	bl	408430 <__aeabi_dsub>
  407dfc:	4606      	mov	r6, r0
  407dfe:	460f      	mov	r7, r1
  407e00:	4650      	mov	r0, sl
  407e02:	4659      	mov	r1, fp
  407e04:	a322      	add	r3, pc, #136	; (adr r3, 407e90 <__kernel_sin+0x160>)
  407e06:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e0a:	f000 fcc5 	bl	408798 <__aeabi_dmul>
  407e0e:	4602      	mov	r2, r0
  407e10:	460b      	mov	r3, r1
  407e12:	4630      	mov	r0, r6
  407e14:	4639      	mov	r1, r7
  407e16:	f000 fb0d 	bl	408434 <__adddf3>
  407e1a:	4602      	mov	r2, r0
  407e1c:	460b      	mov	r3, r1
  407e1e:	4628      	mov	r0, r5
  407e20:	4621      	mov	r1, r4
  407e22:	f000 fb05 	bl	408430 <__aeabi_dsub>
  407e26:	b005      	add	sp, #20
  407e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
  407e30:	4630      	mov	r0, r6
  407e32:	4639      	mov	r1, r7
  407e34:	f000 fcb0 	bl	408798 <__aeabi_dmul>
  407e38:	a315      	add	r3, pc, #84	; (adr r3, 407e90 <__kernel_sin+0x160>)
  407e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e3e:	f000 faf7 	bl	408430 <__aeabi_dsub>
  407e42:	4652      	mov	r2, sl
  407e44:	465b      	mov	r3, fp
  407e46:	f000 fca7 	bl	408798 <__aeabi_dmul>
  407e4a:	462a      	mov	r2, r5
  407e4c:	4623      	mov	r3, r4
  407e4e:	f000 faf1 	bl	408434 <__adddf3>
  407e52:	b005      	add	sp, #20
  407e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e58:	4628      	mov	r0, r5
  407e5a:	4621      	mov	r1, r4
  407e5c:	b005      	add	sp, #20
  407e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e62:	bf00      	nop
  407e64:	f3af 8000 	nop.w
  407e68:	5acfd57c 	.word	0x5acfd57c
  407e6c:	3de5d93a 	.word	0x3de5d93a
  407e70:	8a2b9ceb 	.word	0x8a2b9ceb
  407e74:	3e5ae5e6 	.word	0x3e5ae5e6
  407e78:	57b1fe7d 	.word	0x57b1fe7d
  407e7c:	3ec71de3 	.word	0x3ec71de3
  407e80:	19c161d5 	.word	0x19c161d5
  407e84:	3f2a01a0 	.word	0x3f2a01a0
  407e88:	1110f8a6 	.word	0x1110f8a6
  407e8c:	3f811111 	.word	0x3f811111
  407e90:	55555549 	.word	0x55555549
  407e94:	3fc55555 	.word	0x3fc55555
  407e98:	3fe00000 	.word	0x3fe00000
  407e9c:	00000000 	.word	0x00000000

00407ea0 <atan>:
  407ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ea4:	4bb2      	ldr	r3, [pc, #712]	; (408170 <atan+0x2d0>)
  407ea6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  407eaa:	460d      	mov	r5, r1
  407eac:	4604      	mov	r4, r0
  407eae:	4598      	cmp	r8, r3
  407eb0:	468b      	mov	fp, r1
  407eb2:	dd11      	ble.n	407ed8 <atan+0x38>
  407eb4:	4baf      	ldr	r3, [pc, #700]	; (408174 <atan+0x2d4>)
  407eb6:	4598      	cmp	r8, r3
  407eb8:	dc04      	bgt.n	407ec4 <atan+0x24>
  407eba:	f040 80db 	bne.w	408074 <atan+0x1d4>
  407ebe:	2800      	cmp	r0, #0
  407ec0:	f000 80d8 	beq.w	408074 <atan+0x1d4>
  407ec4:	4620      	mov	r0, r4
  407ec6:	4622      	mov	r2, r4
  407ec8:	4629      	mov	r1, r5
  407eca:	462b      	mov	r3, r5
  407ecc:	f000 fab2 	bl	408434 <__adddf3>
  407ed0:	4604      	mov	r4, r0
  407ed2:	4620      	mov	r0, r4
  407ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ed8:	4ba7      	ldr	r3, [pc, #668]	; (408178 <atan+0x2d8>)
  407eda:	4598      	cmp	r8, r3
  407edc:	f300 80ad 	bgt.w	40803a <atan+0x19a>
  407ee0:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  407ee4:	4598      	cmp	r8, r3
  407ee6:	f340 8098 	ble.w	40801a <atan+0x17a>
  407eea:	f04f 3aff 	mov.w	sl, #4294967295
  407eee:	4622      	mov	r2, r4
  407ef0:	462b      	mov	r3, r5
  407ef2:	4620      	mov	r0, r4
  407ef4:	4629      	mov	r1, r5
  407ef6:	f000 fc4f 	bl	408798 <__aeabi_dmul>
  407efa:	4602      	mov	r2, r0
  407efc:	460b      	mov	r3, r1
  407efe:	4680      	mov	r8, r0
  407f00:	4689      	mov	r9, r1
  407f02:	f000 fc49 	bl	408798 <__aeabi_dmul>
  407f06:	4606      	mov	r6, r0
  407f08:	460f      	mov	r7, r1
  407f0a:	a381      	add	r3, pc, #516	; (adr r3, 408110 <atan+0x270>)
  407f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f10:	f000 fc42 	bl	408798 <__aeabi_dmul>
  407f14:	a380      	add	r3, pc, #512	; (adr r3, 408118 <atan+0x278>)
  407f16:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f1a:	f000 fa8b 	bl	408434 <__adddf3>
  407f1e:	4632      	mov	r2, r6
  407f20:	463b      	mov	r3, r7
  407f22:	f000 fc39 	bl	408798 <__aeabi_dmul>
  407f26:	a37e      	add	r3, pc, #504	; (adr r3, 408120 <atan+0x280>)
  407f28:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f2c:	f000 fa82 	bl	408434 <__adddf3>
  407f30:	4632      	mov	r2, r6
  407f32:	463b      	mov	r3, r7
  407f34:	f000 fc30 	bl	408798 <__aeabi_dmul>
  407f38:	a37b      	add	r3, pc, #492	; (adr r3, 408128 <atan+0x288>)
  407f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f3e:	f000 fa79 	bl	408434 <__adddf3>
  407f42:	4632      	mov	r2, r6
  407f44:	463b      	mov	r3, r7
  407f46:	f000 fc27 	bl	408798 <__aeabi_dmul>
  407f4a:	a379      	add	r3, pc, #484	; (adr r3, 408130 <atan+0x290>)
  407f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f50:	f000 fa70 	bl	408434 <__adddf3>
  407f54:	4632      	mov	r2, r6
  407f56:	463b      	mov	r3, r7
  407f58:	f000 fc1e 	bl	408798 <__aeabi_dmul>
  407f5c:	a376      	add	r3, pc, #472	; (adr r3, 408138 <atan+0x298>)
  407f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f62:	f000 fa67 	bl	408434 <__adddf3>
  407f66:	4642      	mov	r2, r8
  407f68:	464b      	mov	r3, r9
  407f6a:	f000 fc15 	bl	408798 <__aeabi_dmul>
  407f6e:	4680      	mov	r8, r0
  407f70:	4689      	mov	r9, r1
  407f72:	4630      	mov	r0, r6
  407f74:	4639      	mov	r1, r7
  407f76:	a372      	add	r3, pc, #456	; (adr r3, 408140 <atan+0x2a0>)
  407f78:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f7c:	f000 fc0c 	bl	408798 <__aeabi_dmul>
  407f80:	a371      	add	r3, pc, #452	; (adr r3, 408148 <atan+0x2a8>)
  407f82:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f86:	f000 fa53 	bl	408430 <__aeabi_dsub>
  407f8a:	4632      	mov	r2, r6
  407f8c:	463b      	mov	r3, r7
  407f8e:	f000 fc03 	bl	408798 <__aeabi_dmul>
  407f92:	a36f      	add	r3, pc, #444	; (adr r3, 408150 <atan+0x2b0>)
  407f94:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f98:	f000 fa4a 	bl	408430 <__aeabi_dsub>
  407f9c:	4632      	mov	r2, r6
  407f9e:	463b      	mov	r3, r7
  407fa0:	f000 fbfa 	bl	408798 <__aeabi_dmul>
  407fa4:	a36c      	add	r3, pc, #432	; (adr r3, 408158 <atan+0x2b8>)
  407fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407faa:	f000 fa41 	bl	408430 <__aeabi_dsub>
  407fae:	4632      	mov	r2, r6
  407fb0:	463b      	mov	r3, r7
  407fb2:	f000 fbf1 	bl	408798 <__aeabi_dmul>
  407fb6:	a36a      	add	r3, pc, #424	; (adr r3, 408160 <atan+0x2c0>)
  407fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fbc:	f000 fa38 	bl	408430 <__aeabi_dsub>
  407fc0:	4632      	mov	r2, r6
  407fc2:	463b      	mov	r3, r7
  407fc4:	f000 fbe8 	bl	408798 <__aeabi_dmul>
  407fc8:	f1ba 3fff 	cmp.w	sl, #4294967295
  407fcc:	4602      	mov	r2, r0
  407fce:	460b      	mov	r3, r1
  407fd0:	d05a      	beq.n	408088 <atan+0x1e8>
  407fd2:	4640      	mov	r0, r8
  407fd4:	4649      	mov	r1, r9
  407fd6:	f000 fa2d 	bl	408434 <__adddf3>
  407fda:	4622      	mov	r2, r4
  407fdc:	462b      	mov	r3, r5
  407fde:	ea4f 0aca 	mov.w	sl, sl, lsl #3
  407fe2:	f000 fbd9 	bl	408798 <__aeabi_dmul>
  407fe6:	4e65      	ldr	r6, [pc, #404]	; (40817c <atan+0x2dc>)
  407fe8:	4b65      	ldr	r3, [pc, #404]	; (408180 <atan+0x2e0>)
  407fea:	4456      	add	r6, sl
  407fec:	449a      	add	sl, r3
  407fee:	e9da 2300 	ldrd	r2, r3, [sl]
  407ff2:	f000 fa1d 	bl	408430 <__aeabi_dsub>
  407ff6:	4622      	mov	r2, r4
  407ff8:	462b      	mov	r3, r5
  407ffa:	f000 fa19 	bl	408430 <__aeabi_dsub>
  407ffe:	4602      	mov	r2, r0
  408000:	460b      	mov	r3, r1
  408002:	e9d6 0100 	ldrd	r0, r1, [r6]
  408006:	f000 fa13 	bl	408430 <__aeabi_dsub>
  40800a:	f1bb 0f00 	cmp.w	fp, #0
  40800e:	4604      	mov	r4, r0
  408010:	f6bf af5f 	bge.w	407ed2 <atan+0x32>
  408014:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408018:	e75b      	b.n	407ed2 <atan+0x32>
  40801a:	a353      	add	r3, pc, #332	; (adr r3, 408168 <atan+0x2c8>)
  40801c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408020:	f000 fa08 	bl	408434 <__adddf3>
  408024:	2200      	movs	r2, #0
  408026:	4b57      	ldr	r3, [pc, #348]	; (408184 <atan+0x2e4>)
  408028:	f000 fe46 	bl	408cb8 <__aeabi_dcmpgt>
  40802c:	2800      	cmp	r0, #0
  40802e:	f43f af5c 	beq.w	407eea <atan+0x4a>
  408032:	4629      	mov	r1, r5
  408034:	4620      	mov	r0, r4
  408036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40803a:	f000 f8b3 	bl	4081a4 <fabs>
  40803e:	4b52      	ldr	r3, [pc, #328]	; (408188 <atan+0x2e8>)
  408040:	4606      	mov	r6, r0
  408042:	460f      	mov	r7, r1
  408044:	4598      	cmp	r8, r3
  408046:	dc2f      	bgt.n	4080a8 <atan+0x208>
  408048:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40804c:	4598      	cmp	r8, r3
  40804e:	dc54      	bgt.n	4080fa <atan+0x25a>
  408050:	4602      	mov	r2, r0
  408052:	460b      	mov	r3, r1
  408054:	f000 f9ee 	bl	408434 <__adddf3>
  408058:	2200      	movs	r2, #0
  40805a:	4b4a      	ldr	r3, [pc, #296]	; (408184 <atan+0x2e4>)
  40805c:	f04f 0a00 	mov.w	sl, #0
  408060:	f000 f9e6 	bl	408430 <__aeabi_dsub>
  408064:	2200      	movs	r2, #0
  408066:	4604      	mov	r4, r0
  408068:	460d      	mov	r5, r1
  40806a:	4630      	mov	r0, r6
  40806c:	4639      	mov	r1, r7
  40806e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  408072:	e02c      	b.n	4080ce <atan+0x22e>
  408074:	4b45      	ldr	r3, [pc, #276]	; (40818c <atan+0x2ec>)
  408076:	4c46      	ldr	r4, [pc, #280]	; (408190 <atan+0x2f0>)
  408078:	4946      	ldr	r1, [pc, #280]	; (408194 <atan+0x2f4>)
  40807a:	4620      	mov	r0, r4
  40807c:	f1bb 0f00 	cmp.w	fp, #0
  408080:	bfc8      	it	gt
  408082:	4619      	movgt	r1, r3
  408084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408088:	4640      	mov	r0, r8
  40808a:	4649      	mov	r1, r9
  40808c:	f000 f9d2 	bl	408434 <__adddf3>
  408090:	4622      	mov	r2, r4
  408092:	462b      	mov	r3, r5
  408094:	f000 fb80 	bl	408798 <__aeabi_dmul>
  408098:	4602      	mov	r2, r0
  40809a:	460b      	mov	r3, r1
  40809c:	4620      	mov	r0, r4
  40809e:	4629      	mov	r1, r5
  4080a0:	f000 f9c6 	bl	408430 <__aeabi_dsub>
  4080a4:	4604      	mov	r4, r0
  4080a6:	e714      	b.n	407ed2 <atan+0x32>
  4080a8:	4b3b      	ldr	r3, [pc, #236]	; (408198 <atan+0x2f8>)
  4080aa:	4598      	cmp	r8, r3
  4080ac:	dc1a      	bgt.n	4080e4 <atan+0x244>
  4080ae:	2200      	movs	r2, #0
  4080b0:	4b3a      	ldr	r3, [pc, #232]	; (40819c <atan+0x2fc>)
  4080b2:	f000 f9bd 	bl	408430 <__aeabi_dsub>
  4080b6:	2200      	movs	r2, #0
  4080b8:	4604      	mov	r4, r0
  4080ba:	460d      	mov	r5, r1
  4080bc:	4630      	mov	r0, r6
  4080be:	4639      	mov	r1, r7
  4080c0:	4b36      	ldr	r3, [pc, #216]	; (40819c <atan+0x2fc>)
  4080c2:	f04f 0a02 	mov.w	sl, #2
  4080c6:	f000 fb67 	bl	408798 <__aeabi_dmul>
  4080ca:	2200      	movs	r2, #0
  4080cc:	4b2d      	ldr	r3, [pc, #180]	; (408184 <atan+0x2e4>)
  4080ce:	f000 f9b1 	bl	408434 <__adddf3>
  4080d2:	4602      	mov	r2, r0
  4080d4:	460b      	mov	r3, r1
  4080d6:	4620      	mov	r0, r4
  4080d8:	4629      	mov	r1, r5
  4080da:	f000 fc87 	bl	4089ec <__aeabi_ddiv>
  4080de:	4604      	mov	r4, r0
  4080e0:	460d      	mov	r5, r1
  4080e2:	e704      	b.n	407eee <atan+0x4e>
  4080e4:	4602      	mov	r2, r0
  4080e6:	460b      	mov	r3, r1
  4080e8:	2000      	movs	r0, #0
  4080ea:	492d      	ldr	r1, [pc, #180]	; (4081a0 <atan+0x300>)
  4080ec:	f000 fc7e 	bl	4089ec <__aeabi_ddiv>
  4080f0:	f04f 0a03 	mov.w	sl, #3
  4080f4:	4604      	mov	r4, r0
  4080f6:	460d      	mov	r5, r1
  4080f8:	e6f9      	b.n	407eee <atan+0x4e>
  4080fa:	2200      	movs	r2, #0
  4080fc:	4b21      	ldr	r3, [pc, #132]	; (408184 <atan+0x2e4>)
  4080fe:	f000 f997 	bl	408430 <__aeabi_dsub>
  408102:	f04f 0a01 	mov.w	sl, #1
  408106:	4604      	mov	r4, r0
  408108:	460d      	mov	r5, r1
  40810a:	4630      	mov	r0, r6
  40810c:	4639      	mov	r1, r7
  40810e:	e7dc      	b.n	4080ca <atan+0x22a>
  408110:	e322da11 	.word	0xe322da11
  408114:	3f90ad3a 	.word	0x3f90ad3a
  408118:	24760deb 	.word	0x24760deb
  40811c:	3fa97b4b 	.word	0x3fa97b4b
  408120:	a0d03d51 	.word	0xa0d03d51
  408124:	3fb10d66 	.word	0x3fb10d66
  408128:	c54c206e 	.word	0xc54c206e
  40812c:	3fb745cd 	.word	0x3fb745cd
  408130:	920083ff 	.word	0x920083ff
  408134:	3fc24924 	.word	0x3fc24924
  408138:	5555550d 	.word	0x5555550d
  40813c:	3fd55555 	.word	0x3fd55555
  408140:	2c6a6c2f 	.word	0x2c6a6c2f
  408144:	bfa2b444 	.word	0xbfa2b444
  408148:	52defd9a 	.word	0x52defd9a
  40814c:	3fadde2d 	.word	0x3fadde2d
  408150:	af749a6d 	.word	0xaf749a6d
  408154:	3fb3b0f2 	.word	0x3fb3b0f2
  408158:	fe231671 	.word	0xfe231671
  40815c:	3fbc71c6 	.word	0x3fbc71c6
  408160:	9998ebc4 	.word	0x9998ebc4
  408164:	3fc99999 	.word	0x3fc99999
  408168:	8800759c 	.word	0x8800759c
  40816c:	7e37e43c 	.word	0x7e37e43c
  408170:	440fffff 	.word	0x440fffff
  408174:	7ff00000 	.word	0x7ff00000
  408178:	3fdbffff 	.word	0x3fdbffff
  40817c:	0040fc18 	.word	0x0040fc18
  408180:	0040fbf8 	.word	0x0040fbf8
  408184:	3ff00000 	.word	0x3ff00000
  408188:	3ff2ffff 	.word	0x3ff2ffff
  40818c:	3ff921fb 	.word	0x3ff921fb
  408190:	54442d18 	.word	0x54442d18
  408194:	bff921fb 	.word	0xbff921fb
  408198:	40037fff 	.word	0x40037fff
  40819c:	3ff80000 	.word	0x3ff80000
  4081a0:	bff00000 	.word	0xbff00000

004081a4 <fabs>:
  4081a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4081a8:	4770      	bx	lr
  4081aa:	bf00      	nop
  4081ac:	0000      	movs	r0, r0
	...

004081b0 <floor>:
  4081b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4081b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
  4081b8:	460b      	mov	r3, r1
  4081ba:	4604      	mov	r4, r0
  4081bc:	460d      	mov	r5, r1
  4081be:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
  4081c2:	4602      	mov	r2, r0
  4081c4:	4689      	mov	r9, r1
  4081c6:	4607      	mov	r7, r0
  4081c8:	2e13      	cmp	r6, #19
  4081ca:	dc1d      	bgt.n	408208 <floor+0x58>
  4081cc:	2e00      	cmp	r6, #0
  4081ce:	db40      	blt.n	408252 <floor+0xa2>
  4081d0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 4082bc <floor+0x10c>
  4081d4:	fa48 f806 	asr.w	r8, r8, r6
  4081d8:	ea08 0e01 	and.w	lr, r8, r1
  4081dc:	ea5e 0202 	orrs.w	r2, lr, r2
  4081e0:	d017      	beq.n	408212 <floor+0x62>
  4081e2:	a333      	add	r3, pc, #204	; (adr r3, 4082b0 <floor+0x100>)
  4081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081e8:	f000 f924 	bl	408434 <__adddf3>
  4081ec:	2200      	movs	r2, #0
  4081ee:	2300      	movs	r3, #0
  4081f0:	f000 fd62 	bl	408cb8 <__aeabi_dcmpgt>
  4081f4:	b120      	cbz	r0, 408200 <floor+0x50>
  4081f6:	2d00      	cmp	r5, #0
  4081f8:	db40      	blt.n	40827c <floor+0xcc>
  4081fa:	ea29 0508 	bic.w	r5, r9, r8
  4081fe:	2700      	movs	r7, #0
  408200:	4638      	mov	r0, r7
  408202:	4629      	mov	r1, r5
  408204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408208:	2e33      	cmp	r6, #51	; 0x33
  40820a:	dd06      	ble.n	40821a <floor+0x6a>
  40820c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  408210:	d02f      	beq.n	408272 <floor+0xc2>
  408212:	4620      	mov	r0, r4
  408214:	4619      	mov	r1, r3
  408216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40821a:	f2a8 4213 	subw	r2, r8, #1043	; 0x413
  40821e:	f04f 3aff 	mov.w	sl, #4294967295
  408222:	fa2a fa02 	lsr.w	sl, sl, r2
  408226:	ea1a 0f00 	tst.w	sl, r0
  40822a:	d0f2      	beq.n	408212 <floor+0x62>
  40822c:	a320      	add	r3, pc, #128	; (adr r3, 4082b0 <floor+0x100>)
  40822e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408232:	f000 f8ff 	bl	408434 <__adddf3>
  408236:	2200      	movs	r2, #0
  408238:	2300      	movs	r3, #0
  40823a:	f000 fd3d 	bl	408cb8 <__aeabi_dcmpgt>
  40823e:	2800      	cmp	r0, #0
  408240:	d0de      	beq.n	408200 <floor+0x50>
  408242:	2d00      	cmp	r5, #0
  408244:	db1f      	blt.n	408286 <floor+0xd6>
  408246:	464d      	mov	r5, r9
  408248:	ea27 070a 	bic.w	r7, r7, sl
  40824c:	4629      	mov	r1, r5
  40824e:	4638      	mov	r0, r7
  408250:	e7d8      	b.n	408204 <floor+0x54>
  408252:	a317      	add	r3, pc, #92	; (adr r3, 4082b0 <floor+0x100>)
  408254:	e9d3 2300 	ldrd	r2, r3, [r3]
  408258:	f000 f8ec 	bl	408434 <__adddf3>
  40825c:	2200      	movs	r2, #0
  40825e:	2300      	movs	r3, #0
  408260:	f000 fd2a 	bl	408cb8 <__aeabi_dcmpgt>
  408264:	2800      	cmp	r0, #0
  408266:	d0cb      	beq.n	408200 <floor+0x50>
  408268:	2d00      	cmp	r5, #0
  40826a:	db19      	blt.n	4082a0 <floor+0xf0>
  40826c:	2700      	movs	r7, #0
  40826e:	463d      	mov	r5, r7
  408270:	e7c6      	b.n	408200 <floor+0x50>
  408272:	4602      	mov	r2, r0
  408274:	460b      	mov	r3, r1
  408276:	f000 f8dd 	bl	408434 <__adddf3>
  40827a:	e7cc      	b.n	408216 <floor+0x66>
  40827c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  408280:	4133      	asrs	r3, r6
  408282:	4499      	add	r9, r3
  408284:	e7b9      	b.n	4081fa <floor+0x4a>
  408286:	2e14      	cmp	r6, #20
  408288:	d007      	beq.n	40829a <floor+0xea>
  40828a:	f240 4233 	movw	r2, #1075	; 0x433
  40828e:	2301      	movs	r3, #1
  408290:	ebc8 0202 	rsb	r2, r8, r2
  408294:	4093      	lsls	r3, r2
  408296:	191f      	adds	r7, r3, r4
  408298:	d3d5      	bcc.n	408246 <floor+0x96>
  40829a:	f109 0901 	add.w	r9, r9, #1
  40829e:	e7d2      	b.n	408246 <floor+0x96>
  4082a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  4082a4:	ea53 0704 	orrs.w	r7, r3, r4
  4082a8:	d0aa      	beq.n	408200 <floor+0x50>
  4082aa:	2700      	movs	r7, #0
  4082ac:	4d02      	ldr	r5, [pc, #8]	; (4082b8 <floor+0x108>)
  4082ae:	e7a7      	b.n	408200 <floor+0x50>
  4082b0:	8800759c 	.word	0x8800759c
  4082b4:	7e37e43c 	.word	0x7e37e43c
  4082b8:	bff00000 	.word	0xbff00000
  4082bc:	000fffff 	.word	0x000fffff

004082c0 <__fpclassifyd>:
  4082c0:	fab0 f080 	clz	r0, r0
  4082c4:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  4082c8:	ea4f 1050 	mov.w	r0, r0, lsr #5
  4082cc:	d102      	bne.n	4082d4 <__fpclassifyd+0x14>
  4082ce:	b108      	cbz	r0, 4082d4 <__fpclassifyd+0x14>
  4082d0:	2002      	movs	r0, #2
  4082d2:	4770      	bx	lr
  4082d4:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  4082d8:	4b08      	ldr	r3, [pc, #32]	; (4082fc <__fpclassifyd+0x3c>)
  4082da:	429a      	cmp	r2, r3
  4082dc:	d801      	bhi.n	4082e2 <__fpclassifyd+0x22>
  4082de:	2004      	movs	r0, #4
  4082e0:	4770      	bx	lr
  4082e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4082e6:	d201      	bcs.n	4082ec <__fpclassifyd+0x2c>
  4082e8:	2003      	movs	r0, #3
  4082ea:	4770      	bx	lr
  4082ec:	4b04      	ldr	r3, [pc, #16]	; (408300 <__fpclassifyd+0x40>)
  4082ee:	4299      	cmp	r1, r3
  4082f0:	bf14      	ite	ne
  4082f2:	2000      	movne	r0, #0
  4082f4:	f000 0001 	andeq.w	r0, r0, #1
  4082f8:	4770      	bx	lr
  4082fa:	bf00      	nop
  4082fc:	7fdfffff 	.word	0x7fdfffff
  408300:	7ff00000 	.word	0x7ff00000

00408304 <matherr>:
  408304:	2000      	movs	r0, #0
  408306:	4770      	bx	lr

00408308 <nan>:
  408308:	2000      	movs	r0, #0
  40830a:	4901      	ldr	r1, [pc, #4]	; (408310 <nan+0x8>)
  40830c:	4770      	bx	lr
  40830e:	bf00      	nop
  408310:	7ff80000 	.word	0x7ff80000
  408314:	00000000 	.word	0x00000000

00408318 <scalbn>:
  408318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40831a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40831e:	4604      	mov	r4, r0
  408320:	460d      	mov	r5, r1
  408322:	4617      	mov	r7, r2
  408324:	460e      	mov	r6, r1
  408326:	bb1b      	cbnz	r3, 408370 <scalbn+0x58>
  408328:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40832c:	ea56 0300 	orrs.w	r3, r6, r0
  408330:	d030      	beq.n	408394 <scalbn+0x7c>
  408332:	4b35      	ldr	r3, [pc, #212]	; (408408 <scalbn+0xf0>)
  408334:	2200      	movs	r2, #0
  408336:	f000 fa2f 	bl	408798 <__aeabi_dmul>
  40833a:	4b34      	ldr	r3, [pc, #208]	; (40840c <scalbn+0xf4>)
  40833c:	4604      	mov	r4, r0
  40833e:	460d      	mov	r5, r1
  408340:	429f      	cmp	r7, r3
  408342:	460e      	mov	r6, r1
  408344:	db35      	blt.n	4083b2 <scalbn+0x9a>
  408346:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40834a:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40834e:	3b36      	subs	r3, #54	; 0x36
  408350:	443b      	add	r3, r7
  408352:	4293      	cmp	r3, r2
  408354:	dd15      	ble.n	408382 <scalbn+0x6a>
  408356:	4622      	mov	r2, r4
  408358:	462b      	mov	r3, r5
  40835a:	a127      	add	r1, pc, #156	; (adr r1, 4083f8 <scalbn+0xe0>)
  40835c:	e9d1 0100 	ldrd	r0, r1, [r1]
  408360:	f000 f85a 	bl	408418 <copysign>
  408364:	a324      	add	r3, pc, #144	; (adr r3, 4083f8 <scalbn+0xe0>)
  408366:	e9d3 2300 	ldrd	r2, r3, [r3]
  40836a:	f000 fa15 	bl	408798 <__aeabi_dmul>
  40836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408370:	f240 72ff 	movw	r2, #2047	; 0x7ff
  408374:	4293      	cmp	r3, r2
  408376:	d022      	beq.n	4083be <scalbn+0xa6>
  408378:	443b      	add	r3, r7
  40837a:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40837e:	4293      	cmp	r3, r2
  408380:	dce9      	bgt.n	408356 <scalbn+0x3e>
  408382:	2b00      	cmp	r3, #0
  408384:	dd07      	ble.n	408396 <scalbn+0x7e>
  408386:	4a22      	ldr	r2, [pc, #136]	; (408410 <scalbn+0xf8>)
  408388:	4620      	mov	r0, r4
  40838a:	4032      	ands	r2, r6
  40838c:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
  408390:	4629      	mov	r1, r5
  408392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408396:	f113 0f35 	cmn.w	r3, #53	; 0x35
  40839a:	da15      	bge.n	4083c8 <scalbn+0xb0>
  40839c:	f24c 3350 	movw	r3, #50000	; 0xc350
  4083a0:	4622      	mov	r2, r4
  4083a2:	429f      	cmp	r7, r3
  4083a4:	462b      	mov	r3, r5
  4083a6:	dc1c      	bgt.n	4083e2 <scalbn+0xca>
  4083a8:	a115      	add	r1, pc, #84	; (adr r1, 408400 <scalbn+0xe8>)
  4083aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4083ae:	f000 f833 	bl	408418 <copysign>
  4083b2:	a313      	add	r3, pc, #76	; (adr r3, 408400 <scalbn+0xe8>)
  4083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083b8:	f000 f9ee 	bl	408798 <__aeabi_dmul>
  4083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083be:	4602      	mov	r2, r0
  4083c0:	460b      	mov	r3, r1
  4083c2:	f000 f837 	bl	408434 <__adddf3>
  4083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083c8:	4811      	ldr	r0, [pc, #68]	; (408410 <scalbn+0xf8>)
  4083ca:	f103 0136 	add.w	r1, r3, #54	; 0x36
  4083ce:	2200      	movs	r2, #0
  4083d0:	4b10      	ldr	r3, [pc, #64]	; (408414 <scalbn+0xfc>)
  4083d2:	4030      	ands	r0, r6
  4083d4:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
  4083d8:	4620      	mov	r0, r4
  4083da:	4629      	mov	r1, r5
  4083dc:	f000 f9dc 	bl	408798 <__aeabi_dmul>
  4083e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083e2:	a105      	add	r1, pc, #20	; (adr r1, 4083f8 <scalbn+0xe0>)
  4083e4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4083e8:	f000 f816 	bl	408418 <copysign>
  4083ec:	a302      	add	r3, pc, #8	; (adr r3, 4083f8 <scalbn+0xe0>)
  4083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083f2:	f000 f9d1 	bl	408798 <__aeabi_dmul>
  4083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4083f8:	8800759c 	.word	0x8800759c
  4083fc:	7e37e43c 	.word	0x7e37e43c
  408400:	c2f8f359 	.word	0xc2f8f359
  408404:	01a56e1f 	.word	0x01a56e1f
  408408:	43500000 	.word	0x43500000
  40840c:	ffff3cb0 	.word	0xffff3cb0
  408410:	800fffff 	.word	0x800fffff
  408414:	3c900000 	.word	0x3c900000

00408418 <copysign>:
  408418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  40841c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  408420:	ea43 0102 	orr.w	r1, r3, r2
  408424:	4770      	bx	lr
  408426:	bf00      	nop

00408428 <__aeabi_drsub>:
  408428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40842c:	e002      	b.n	408434 <__adddf3>
  40842e:	bf00      	nop

00408430 <__aeabi_dsub>:
  408430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408434 <__adddf3>:
  408434:	b530      	push	{r4, r5, lr}
  408436:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40843a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40843e:	ea94 0f05 	teq	r4, r5
  408442:	bf08      	it	eq
  408444:	ea90 0f02 	teqeq	r0, r2
  408448:	bf1f      	itttt	ne
  40844a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40844e:	ea55 0c02 	orrsne.w	ip, r5, r2
  408452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  408456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40845a:	f000 80e2 	beq.w	408622 <__adddf3+0x1ee>
  40845e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  408466:	bfb8      	it	lt
  408468:	426d      	neglt	r5, r5
  40846a:	dd0c      	ble.n	408486 <__adddf3+0x52>
  40846c:	442c      	add	r4, r5
  40846e:	ea80 0202 	eor.w	r2, r0, r2
  408472:	ea81 0303 	eor.w	r3, r1, r3
  408476:	ea82 0000 	eor.w	r0, r2, r0
  40847a:	ea83 0101 	eor.w	r1, r3, r1
  40847e:	ea80 0202 	eor.w	r2, r0, r2
  408482:	ea81 0303 	eor.w	r3, r1, r3
  408486:	2d36      	cmp	r5, #54	; 0x36
  408488:	bf88      	it	hi
  40848a:	bd30      	pophi	{r4, r5, pc}
  40848c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408490:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40849c:	d002      	beq.n	4084a4 <__adddf3+0x70>
  40849e:	4240      	negs	r0, r0
  4084a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4084a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4084a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4084ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4084b0:	d002      	beq.n	4084b8 <__adddf3+0x84>
  4084b2:	4252      	negs	r2, r2
  4084b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4084b8:	ea94 0f05 	teq	r4, r5
  4084bc:	f000 80a7 	beq.w	40860e <__adddf3+0x1da>
  4084c0:	f1a4 0401 	sub.w	r4, r4, #1
  4084c4:	f1d5 0e20 	rsbs	lr, r5, #32
  4084c8:	db0d      	blt.n	4084e6 <__adddf3+0xb2>
  4084ca:	fa02 fc0e 	lsl.w	ip, r2, lr
  4084ce:	fa22 f205 	lsr.w	r2, r2, r5
  4084d2:	1880      	adds	r0, r0, r2
  4084d4:	f141 0100 	adc.w	r1, r1, #0
  4084d8:	fa03 f20e 	lsl.w	r2, r3, lr
  4084dc:	1880      	adds	r0, r0, r2
  4084de:	fa43 f305 	asr.w	r3, r3, r5
  4084e2:	4159      	adcs	r1, r3
  4084e4:	e00e      	b.n	408504 <__adddf3+0xd0>
  4084e6:	f1a5 0520 	sub.w	r5, r5, #32
  4084ea:	f10e 0e20 	add.w	lr, lr, #32
  4084ee:	2a01      	cmp	r2, #1
  4084f0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4084f4:	bf28      	it	cs
  4084f6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4084fa:	fa43 f305 	asr.w	r3, r3, r5
  4084fe:	18c0      	adds	r0, r0, r3
  408500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408508:	d507      	bpl.n	40851a <__adddf3+0xe6>
  40850a:	f04f 0e00 	mov.w	lr, #0
  40850e:	f1dc 0c00 	rsbs	ip, ip, #0
  408512:	eb7e 0000 	sbcs.w	r0, lr, r0
  408516:	eb6e 0101 	sbc.w	r1, lr, r1
  40851a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40851e:	d31b      	bcc.n	408558 <__adddf3+0x124>
  408520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408524:	d30c      	bcc.n	408540 <__adddf3+0x10c>
  408526:	0849      	lsrs	r1, r1, #1
  408528:	ea5f 0030 	movs.w	r0, r0, rrx
  40852c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408530:	f104 0401 	add.w	r4, r4, #1
  408534:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40853c:	f080 809a 	bcs.w	408674 <__adddf3+0x240>
  408540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408544:	bf08      	it	eq
  408546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40854a:	f150 0000 	adcs.w	r0, r0, #0
  40854e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408552:	ea41 0105 	orr.w	r1, r1, r5
  408556:	bd30      	pop	{r4, r5, pc}
  408558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40855c:	4140      	adcs	r0, r0
  40855e:	eb41 0101 	adc.w	r1, r1, r1
  408562:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408566:	f1a4 0401 	sub.w	r4, r4, #1
  40856a:	d1e9      	bne.n	408540 <__adddf3+0x10c>
  40856c:	f091 0f00 	teq	r1, #0
  408570:	bf04      	itt	eq
  408572:	4601      	moveq	r1, r0
  408574:	2000      	moveq	r0, #0
  408576:	fab1 f381 	clz	r3, r1
  40857a:	bf08      	it	eq
  40857c:	3320      	addeq	r3, #32
  40857e:	f1a3 030b 	sub.w	r3, r3, #11
  408582:	f1b3 0220 	subs.w	r2, r3, #32
  408586:	da0c      	bge.n	4085a2 <__adddf3+0x16e>
  408588:	320c      	adds	r2, #12
  40858a:	dd08      	ble.n	40859e <__adddf3+0x16a>
  40858c:	f102 0c14 	add.w	ip, r2, #20
  408590:	f1c2 020c 	rsb	r2, r2, #12
  408594:	fa01 f00c 	lsl.w	r0, r1, ip
  408598:	fa21 f102 	lsr.w	r1, r1, r2
  40859c:	e00c      	b.n	4085b8 <__adddf3+0x184>
  40859e:	f102 0214 	add.w	r2, r2, #20
  4085a2:	bfd8      	it	le
  4085a4:	f1c2 0c20 	rsble	ip, r2, #32
  4085a8:	fa01 f102 	lsl.w	r1, r1, r2
  4085ac:	fa20 fc0c 	lsr.w	ip, r0, ip
  4085b0:	bfdc      	itt	le
  4085b2:	ea41 010c 	orrle.w	r1, r1, ip
  4085b6:	4090      	lslle	r0, r2
  4085b8:	1ae4      	subs	r4, r4, r3
  4085ba:	bfa2      	ittt	ge
  4085bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4085c0:	4329      	orrge	r1, r5
  4085c2:	bd30      	popge	{r4, r5, pc}
  4085c4:	ea6f 0404 	mvn.w	r4, r4
  4085c8:	3c1f      	subs	r4, #31
  4085ca:	da1c      	bge.n	408606 <__adddf3+0x1d2>
  4085cc:	340c      	adds	r4, #12
  4085ce:	dc0e      	bgt.n	4085ee <__adddf3+0x1ba>
  4085d0:	f104 0414 	add.w	r4, r4, #20
  4085d4:	f1c4 0220 	rsb	r2, r4, #32
  4085d8:	fa20 f004 	lsr.w	r0, r0, r4
  4085dc:	fa01 f302 	lsl.w	r3, r1, r2
  4085e0:	ea40 0003 	orr.w	r0, r0, r3
  4085e4:	fa21 f304 	lsr.w	r3, r1, r4
  4085e8:	ea45 0103 	orr.w	r1, r5, r3
  4085ec:	bd30      	pop	{r4, r5, pc}
  4085ee:	f1c4 040c 	rsb	r4, r4, #12
  4085f2:	f1c4 0220 	rsb	r2, r4, #32
  4085f6:	fa20 f002 	lsr.w	r0, r0, r2
  4085fa:	fa01 f304 	lsl.w	r3, r1, r4
  4085fe:	ea40 0003 	orr.w	r0, r0, r3
  408602:	4629      	mov	r1, r5
  408604:	bd30      	pop	{r4, r5, pc}
  408606:	fa21 f004 	lsr.w	r0, r1, r4
  40860a:	4629      	mov	r1, r5
  40860c:	bd30      	pop	{r4, r5, pc}
  40860e:	f094 0f00 	teq	r4, #0
  408612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408616:	bf06      	itte	eq
  408618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40861c:	3401      	addeq	r4, #1
  40861e:	3d01      	subne	r5, #1
  408620:	e74e      	b.n	4084c0 <__adddf3+0x8c>
  408622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408626:	bf18      	it	ne
  408628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40862c:	d029      	beq.n	408682 <__adddf3+0x24e>
  40862e:	ea94 0f05 	teq	r4, r5
  408632:	bf08      	it	eq
  408634:	ea90 0f02 	teqeq	r0, r2
  408638:	d005      	beq.n	408646 <__adddf3+0x212>
  40863a:	ea54 0c00 	orrs.w	ip, r4, r0
  40863e:	bf04      	itt	eq
  408640:	4619      	moveq	r1, r3
  408642:	4610      	moveq	r0, r2
  408644:	bd30      	pop	{r4, r5, pc}
  408646:	ea91 0f03 	teq	r1, r3
  40864a:	bf1e      	ittt	ne
  40864c:	2100      	movne	r1, #0
  40864e:	2000      	movne	r0, #0
  408650:	bd30      	popne	{r4, r5, pc}
  408652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408656:	d105      	bne.n	408664 <__adddf3+0x230>
  408658:	0040      	lsls	r0, r0, #1
  40865a:	4149      	adcs	r1, r1
  40865c:	bf28      	it	cs
  40865e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408662:	bd30      	pop	{r4, r5, pc}
  408664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408668:	bf3c      	itt	cc
  40866a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40866e:	bd30      	popcc	{r4, r5, pc}
  408670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40867c:	f04f 0000 	mov.w	r0, #0
  408680:	bd30      	pop	{r4, r5, pc}
  408682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408686:	bf1a      	itte	ne
  408688:	4619      	movne	r1, r3
  40868a:	4610      	movne	r0, r2
  40868c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408690:	bf1c      	itt	ne
  408692:	460b      	movne	r3, r1
  408694:	4602      	movne	r2, r0
  408696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40869a:	bf06      	itte	eq
  40869c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4086a0:	ea91 0f03 	teqeq	r1, r3
  4086a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4086a8:	bd30      	pop	{r4, r5, pc}
  4086aa:	bf00      	nop

004086ac <__aeabi_ui2d>:
  4086ac:	f090 0f00 	teq	r0, #0
  4086b0:	bf04      	itt	eq
  4086b2:	2100      	moveq	r1, #0
  4086b4:	4770      	bxeq	lr
  4086b6:	b530      	push	{r4, r5, lr}
  4086b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4086bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4086c0:	f04f 0500 	mov.w	r5, #0
  4086c4:	f04f 0100 	mov.w	r1, #0
  4086c8:	e750      	b.n	40856c <__adddf3+0x138>
  4086ca:	bf00      	nop

004086cc <__aeabi_i2d>:
  4086cc:	f090 0f00 	teq	r0, #0
  4086d0:	bf04      	itt	eq
  4086d2:	2100      	moveq	r1, #0
  4086d4:	4770      	bxeq	lr
  4086d6:	b530      	push	{r4, r5, lr}
  4086d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4086dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4086e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4086e4:	bf48      	it	mi
  4086e6:	4240      	negmi	r0, r0
  4086e8:	f04f 0100 	mov.w	r1, #0
  4086ec:	e73e      	b.n	40856c <__adddf3+0x138>
  4086ee:	bf00      	nop

004086f0 <__aeabi_f2d>:
  4086f0:	0042      	lsls	r2, r0, #1
  4086f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4086f6:	ea4f 0131 	mov.w	r1, r1, rrx
  4086fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4086fe:	bf1f      	itttt	ne
  408700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40870c:	4770      	bxne	lr
  40870e:	f092 0f00 	teq	r2, #0
  408712:	bf14      	ite	ne
  408714:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408718:	4770      	bxeq	lr
  40871a:	b530      	push	{r4, r5, lr}
  40871c:	f44f 7460 	mov.w	r4, #896	; 0x380
  408720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408728:	e720      	b.n	40856c <__adddf3+0x138>
  40872a:	bf00      	nop

0040872c <__aeabi_ul2d>:
  40872c:	ea50 0201 	orrs.w	r2, r0, r1
  408730:	bf08      	it	eq
  408732:	4770      	bxeq	lr
  408734:	b530      	push	{r4, r5, lr}
  408736:	f04f 0500 	mov.w	r5, #0
  40873a:	e00a      	b.n	408752 <__aeabi_l2d+0x16>

0040873c <__aeabi_l2d>:
  40873c:	ea50 0201 	orrs.w	r2, r0, r1
  408740:	bf08      	it	eq
  408742:	4770      	bxeq	lr
  408744:	b530      	push	{r4, r5, lr}
  408746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40874a:	d502      	bpl.n	408752 <__aeabi_l2d+0x16>
  40874c:	4240      	negs	r0, r0
  40874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408752:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408756:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40875e:	f43f aedc 	beq.w	40851a <__adddf3+0xe6>
  408762:	f04f 0203 	mov.w	r2, #3
  408766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40876a:	bf18      	it	ne
  40876c:	3203      	addne	r2, #3
  40876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408772:	bf18      	it	ne
  408774:	3203      	addne	r2, #3
  408776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40877a:	f1c2 0320 	rsb	r3, r2, #32
  40877e:	fa00 fc03 	lsl.w	ip, r0, r3
  408782:	fa20 f002 	lsr.w	r0, r0, r2
  408786:	fa01 fe03 	lsl.w	lr, r1, r3
  40878a:	ea40 000e 	orr.w	r0, r0, lr
  40878e:	fa21 f102 	lsr.w	r1, r1, r2
  408792:	4414      	add	r4, r2
  408794:	e6c1      	b.n	40851a <__adddf3+0xe6>
  408796:	bf00      	nop

00408798 <__aeabi_dmul>:
  408798:	b570      	push	{r4, r5, r6, lr}
  40879a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40879e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4087a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4087a6:	bf1d      	ittte	ne
  4087a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4087ac:	ea94 0f0c 	teqne	r4, ip
  4087b0:	ea95 0f0c 	teqne	r5, ip
  4087b4:	f000 f8de 	bleq	408974 <__aeabi_dmul+0x1dc>
  4087b8:	442c      	add	r4, r5
  4087ba:	ea81 0603 	eor.w	r6, r1, r3
  4087be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4087c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4087c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4087ca:	bf18      	it	ne
  4087cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4087d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4087d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4087d8:	d038      	beq.n	40884c <__aeabi_dmul+0xb4>
  4087da:	fba0 ce02 	umull	ip, lr, r0, r2
  4087de:	f04f 0500 	mov.w	r5, #0
  4087e2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4087e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4087ea:	fbe0 e503 	umlal	lr, r5, r0, r3
  4087ee:	f04f 0600 	mov.w	r6, #0
  4087f2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4087f6:	f09c 0f00 	teq	ip, #0
  4087fa:	bf18      	it	ne
  4087fc:	f04e 0e01 	orrne.w	lr, lr, #1
  408800:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408808:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40880c:	d204      	bcs.n	408818 <__aeabi_dmul+0x80>
  40880e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408812:	416d      	adcs	r5, r5
  408814:	eb46 0606 	adc.w	r6, r6, r6
  408818:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40881c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408820:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408824:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408828:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40882c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408830:	bf88      	it	hi
  408832:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408836:	d81e      	bhi.n	408876 <__aeabi_dmul+0xde>
  408838:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40883c:	bf08      	it	eq
  40883e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408842:	f150 0000 	adcs.w	r0, r0, #0
  408846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40884a:	bd70      	pop	{r4, r5, r6, pc}
  40884c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408850:	ea46 0101 	orr.w	r1, r6, r1
  408854:	ea40 0002 	orr.w	r0, r0, r2
  408858:	ea81 0103 	eor.w	r1, r1, r3
  40885c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408860:	bfc2      	ittt	gt
  408862:	ebd4 050c 	rsbsgt	r5, r4, ip
  408866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40886a:	bd70      	popgt	{r4, r5, r6, pc}
  40886c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408870:	f04f 0e00 	mov.w	lr, #0
  408874:	3c01      	subs	r4, #1
  408876:	f300 80ab 	bgt.w	4089d0 <__aeabi_dmul+0x238>
  40887a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40887e:	bfde      	ittt	le
  408880:	2000      	movle	r0, #0
  408882:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408886:	bd70      	pople	{r4, r5, r6, pc}
  408888:	f1c4 0400 	rsb	r4, r4, #0
  40888c:	3c20      	subs	r4, #32
  40888e:	da35      	bge.n	4088fc <__aeabi_dmul+0x164>
  408890:	340c      	adds	r4, #12
  408892:	dc1b      	bgt.n	4088cc <__aeabi_dmul+0x134>
  408894:	f104 0414 	add.w	r4, r4, #20
  408898:	f1c4 0520 	rsb	r5, r4, #32
  40889c:	fa00 f305 	lsl.w	r3, r0, r5
  4088a0:	fa20 f004 	lsr.w	r0, r0, r4
  4088a4:	fa01 f205 	lsl.w	r2, r1, r5
  4088a8:	ea40 0002 	orr.w	r0, r0, r2
  4088ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4088b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4088b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4088b8:	fa21 f604 	lsr.w	r6, r1, r4
  4088bc:	eb42 0106 	adc.w	r1, r2, r6
  4088c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4088c4:	bf08      	it	eq
  4088c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4088ca:	bd70      	pop	{r4, r5, r6, pc}
  4088cc:	f1c4 040c 	rsb	r4, r4, #12
  4088d0:	f1c4 0520 	rsb	r5, r4, #32
  4088d4:	fa00 f304 	lsl.w	r3, r0, r4
  4088d8:	fa20 f005 	lsr.w	r0, r0, r5
  4088dc:	fa01 f204 	lsl.w	r2, r1, r4
  4088e0:	ea40 0002 	orr.w	r0, r0, r2
  4088e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4088e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4088ec:	f141 0100 	adc.w	r1, r1, #0
  4088f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4088f4:	bf08      	it	eq
  4088f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4088fa:	bd70      	pop	{r4, r5, r6, pc}
  4088fc:	f1c4 0520 	rsb	r5, r4, #32
  408900:	fa00 f205 	lsl.w	r2, r0, r5
  408904:	ea4e 0e02 	orr.w	lr, lr, r2
  408908:	fa20 f304 	lsr.w	r3, r0, r4
  40890c:	fa01 f205 	lsl.w	r2, r1, r5
  408910:	ea43 0302 	orr.w	r3, r3, r2
  408914:	fa21 f004 	lsr.w	r0, r1, r4
  408918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40891c:	fa21 f204 	lsr.w	r2, r1, r4
  408920:	ea20 0002 	bic.w	r0, r0, r2
  408924:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40892c:	bf08      	it	eq
  40892e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408932:	bd70      	pop	{r4, r5, r6, pc}
  408934:	f094 0f00 	teq	r4, #0
  408938:	d10f      	bne.n	40895a <__aeabi_dmul+0x1c2>
  40893a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40893e:	0040      	lsls	r0, r0, #1
  408940:	eb41 0101 	adc.w	r1, r1, r1
  408944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408948:	bf08      	it	eq
  40894a:	3c01      	subeq	r4, #1
  40894c:	d0f7      	beq.n	40893e <__aeabi_dmul+0x1a6>
  40894e:	ea41 0106 	orr.w	r1, r1, r6
  408952:	f095 0f00 	teq	r5, #0
  408956:	bf18      	it	ne
  408958:	4770      	bxne	lr
  40895a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40895e:	0052      	lsls	r2, r2, #1
  408960:	eb43 0303 	adc.w	r3, r3, r3
  408964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408968:	bf08      	it	eq
  40896a:	3d01      	subeq	r5, #1
  40896c:	d0f7      	beq.n	40895e <__aeabi_dmul+0x1c6>
  40896e:	ea43 0306 	orr.w	r3, r3, r6
  408972:	4770      	bx	lr
  408974:	ea94 0f0c 	teq	r4, ip
  408978:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40897c:	bf18      	it	ne
  40897e:	ea95 0f0c 	teqne	r5, ip
  408982:	d00c      	beq.n	40899e <__aeabi_dmul+0x206>
  408984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408988:	bf18      	it	ne
  40898a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40898e:	d1d1      	bne.n	408934 <__aeabi_dmul+0x19c>
  408990:	ea81 0103 	eor.w	r1, r1, r3
  408994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408998:	f04f 0000 	mov.w	r0, #0
  40899c:	bd70      	pop	{r4, r5, r6, pc}
  40899e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4089a2:	bf06      	itte	eq
  4089a4:	4610      	moveq	r0, r2
  4089a6:	4619      	moveq	r1, r3
  4089a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4089ac:	d019      	beq.n	4089e2 <__aeabi_dmul+0x24a>
  4089ae:	ea94 0f0c 	teq	r4, ip
  4089b2:	d102      	bne.n	4089ba <__aeabi_dmul+0x222>
  4089b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4089b8:	d113      	bne.n	4089e2 <__aeabi_dmul+0x24a>
  4089ba:	ea95 0f0c 	teq	r5, ip
  4089be:	d105      	bne.n	4089cc <__aeabi_dmul+0x234>
  4089c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4089c4:	bf1c      	itt	ne
  4089c6:	4610      	movne	r0, r2
  4089c8:	4619      	movne	r1, r3
  4089ca:	d10a      	bne.n	4089e2 <__aeabi_dmul+0x24a>
  4089cc:	ea81 0103 	eor.w	r1, r1, r3
  4089d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4089d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4089d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4089dc:	f04f 0000 	mov.w	r0, #0
  4089e0:	bd70      	pop	{r4, r5, r6, pc}
  4089e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4089e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4089ea:	bd70      	pop	{r4, r5, r6, pc}

004089ec <__aeabi_ddiv>:
  4089ec:	b570      	push	{r4, r5, r6, lr}
  4089ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4089f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4089f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4089fa:	bf1d      	ittte	ne
  4089fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408a00:	ea94 0f0c 	teqne	r4, ip
  408a04:	ea95 0f0c 	teqne	r5, ip
  408a08:	f000 f8a7 	bleq	408b5a <__aeabi_ddiv+0x16e>
  408a0c:	eba4 0405 	sub.w	r4, r4, r5
  408a10:	ea81 0e03 	eor.w	lr, r1, r3
  408a14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408a1c:	f000 8088 	beq.w	408b30 <__aeabi_ddiv+0x144>
  408a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408a24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408a28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408a2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408a30:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408a34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408a38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408a3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408a40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408a44:	429d      	cmp	r5, r3
  408a46:	bf08      	it	eq
  408a48:	4296      	cmpeq	r6, r2
  408a4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408a4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408a52:	d202      	bcs.n	408a5a <__aeabi_ddiv+0x6e>
  408a54:	085b      	lsrs	r3, r3, #1
  408a56:	ea4f 0232 	mov.w	r2, r2, rrx
  408a5a:	1ab6      	subs	r6, r6, r2
  408a5c:	eb65 0503 	sbc.w	r5, r5, r3
  408a60:	085b      	lsrs	r3, r3, #1
  408a62:	ea4f 0232 	mov.w	r2, r2, rrx
  408a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408a6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408a6e:	ebb6 0e02 	subs.w	lr, r6, r2
  408a72:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a76:	bf22      	ittt	cs
  408a78:	1ab6      	subcs	r6, r6, r2
  408a7a:	4675      	movcs	r5, lr
  408a7c:	ea40 000c 	orrcs.w	r0, r0, ip
  408a80:	085b      	lsrs	r3, r3, #1
  408a82:	ea4f 0232 	mov.w	r2, r2, rrx
  408a86:	ebb6 0e02 	subs.w	lr, r6, r2
  408a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
  408a8e:	bf22      	ittt	cs
  408a90:	1ab6      	subcs	r6, r6, r2
  408a92:	4675      	movcs	r5, lr
  408a94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408a98:	085b      	lsrs	r3, r3, #1
  408a9a:	ea4f 0232 	mov.w	r2, r2, rrx
  408a9e:	ebb6 0e02 	subs.w	lr, r6, r2
  408aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
  408aa6:	bf22      	ittt	cs
  408aa8:	1ab6      	subcs	r6, r6, r2
  408aaa:	4675      	movcs	r5, lr
  408aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408ab0:	085b      	lsrs	r3, r3, #1
  408ab2:	ea4f 0232 	mov.w	r2, r2, rrx
  408ab6:	ebb6 0e02 	subs.w	lr, r6, r2
  408aba:	eb75 0e03 	sbcs.w	lr, r5, r3
  408abe:	bf22      	ittt	cs
  408ac0:	1ab6      	subcs	r6, r6, r2
  408ac2:	4675      	movcs	r5, lr
  408ac4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408ac8:	ea55 0e06 	orrs.w	lr, r5, r6
  408acc:	d018      	beq.n	408b00 <__aeabi_ddiv+0x114>
  408ace:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408ad2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408ad6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408ada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408ade:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408ae2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408ae6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408aea:	d1c0      	bne.n	408a6e <__aeabi_ddiv+0x82>
  408aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408af0:	d10b      	bne.n	408b0a <__aeabi_ddiv+0x11e>
  408af2:	ea41 0100 	orr.w	r1, r1, r0
  408af6:	f04f 0000 	mov.w	r0, #0
  408afa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408afe:	e7b6      	b.n	408a6e <__aeabi_ddiv+0x82>
  408b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408b04:	bf04      	itt	eq
  408b06:	4301      	orreq	r1, r0
  408b08:	2000      	moveq	r0, #0
  408b0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408b0e:	bf88      	it	hi
  408b10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408b14:	f63f aeaf 	bhi.w	408876 <__aeabi_dmul+0xde>
  408b18:	ebb5 0c03 	subs.w	ip, r5, r3
  408b1c:	bf04      	itt	eq
  408b1e:	ebb6 0c02 	subseq.w	ip, r6, r2
  408b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408b26:	f150 0000 	adcs.w	r0, r0, #0
  408b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408b2e:	bd70      	pop	{r4, r5, r6, pc}
  408b30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408b34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408b38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408b3c:	bfc2      	ittt	gt
  408b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408b46:	bd70      	popgt	{r4, r5, r6, pc}
  408b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408b4c:	f04f 0e00 	mov.w	lr, #0
  408b50:	3c01      	subs	r4, #1
  408b52:	e690      	b.n	408876 <__aeabi_dmul+0xde>
  408b54:	ea45 0e06 	orr.w	lr, r5, r6
  408b58:	e68d      	b.n	408876 <__aeabi_dmul+0xde>
  408b5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408b5e:	ea94 0f0c 	teq	r4, ip
  408b62:	bf08      	it	eq
  408b64:	ea95 0f0c 	teqeq	r5, ip
  408b68:	f43f af3b 	beq.w	4089e2 <__aeabi_dmul+0x24a>
  408b6c:	ea94 0f0c 	teq	r4, ip
  408b70:	d10a      	bne.n	408b88 <__aeabi_ddiv+0x19c>
  408b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408b76:	f47f af34 	bne.w	4089e2 <__aeabi_dmul+0x24a>
  408b7a:	ea95 0f0c 	teq	r5, ip
  408b7e:	f47f af25 	bne.w	4089cc <__aeabi_dmul+0x234>
  408b82:	4610      	mov	r0, r2
  408b84:	4619      	mov	r1, r3
  408b86:	e72c      	b.n	4089e2 <__aeabi_dmul+0x24a>
  408b88:	ea95 0f0c 	teq	r5, ip
  408b8c:	d106      	bne.n	408b9c <__aeabi_ddiv+0x1b0>
  408b8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408b92:	f43f aefd 	beq.w	408990 <__aeabi_dmul+0x1f8>
  408b96:	4610      	mov	r0, r2
  408b98:	4619      	mov	r1, r3
  408b9a:	e722      	b.n	4089e2 <__aeabi_dmul+0x24a>
  408b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408ba0:	bf18      	it	ne
  408ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408ba6:	f47f aec5 	bne.w	408934 <__aeabi_dmul+0x19c>
  408baa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408bae:	f47f af0d 	bne.w	4089cc <__aeabi_dmul+0x234>
  408bb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408bb6:	f47f aeeb 	bne.w	408990 <__aeabi_dmul+0x1f8>
  408bba:	e712      	b.n	4089e2 <__aeabi_dmul+0x24a>

00408bbc <__gedf2>:
  408bbc:	f04f 3cff 	mov.w	ip, #4294967295
  408bc0:	e006      	b.n	408bd0 <__cmpdf2+0x4>
  408bc2:	bf00      	nop

00408bc4 <__ledf2>:
  408bc4:	f04f 0c01 	mov.w	ip, #1
  408bc8:	e002      	b.n	408bd0 <__cmpdf2+0x4>
  408bca:	bf00      	nop

00408bcc <__cmpdf2>:
  408bcc:	f04f 0c01 	mov.w	ip, #1
  408bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
  408bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408be0:	bf18      	it	ne
  408be2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408be6:	d01b      	beq.n	408c20 <__cmpdf2+0x54>
  408be8:	b001      	add	sp, #4
  408bea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408bee:	bf0c      	ite	eq
  408bf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408bf4:	ea91 0f03 	teqne	r1, r3
  408bf8:	bf02      	ittt	eq
  408bfa:	ea90 0f02 	teqeq	r0, r2
  408bfe:	2000      	moveq	r0, #0
  408c00:	4770      	bxeq	lr
  408c02:	f110 0f00 	cmn.w	r0, #0
  408c06:	ea91 0f03 	teq	r1, r3
  408c0a:	bf58      	it	pl
  408c0c:	4299      	cmppl	r1, r3
  408c0e:	bf08      	it	eq
  408c10:	4290      	cmpeq	r0, r2
  408c12:	bf2c      	ite	cs
  408c14:	17d8      	asrcs	r0, r3, #31
  408c16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408c1a:	f040 0001 	orr.w	r0, r0, #1
  408c1e:	4770      	bx	lr
  408c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408c28:	d102      	bne.n	408c30 <__cmpdf2+0x64>
  408c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408c2e:	d107      	bne.n	408c40 <__cmpdf2+0x74>
  408c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408c38:	d1d6      	bne.n	408be8 <__cmpdf2+0x1c>
  408c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408c3e:	d0d3      	beq.n	408be8 <__cmpdf2+0x1c>
  408c40:	f85d 0b04 	ldr.w	r0, [sp], #4
  408c44:	4770      	bx	lr
  408c46:	bf00      	nop

00408c48 <__aeabi_cdrcmple>:
  408c48:	4684      	mov	ip, r0
  408c4a:	4610      	mov	r0, r2
  408c4c:	4662      	mov	r2, ip
  408c4e:	468c      	mov	ip, r1
  408c50:	4619      	mov	r1, r3
  408c52:	4663      	mov	r3, ip
  408c54:	e000      	b.n	408c58 <__aeabi_cdcmpeq>
  408c56:	bf00      	nop

00408c58 <__aeabi_cdcmpeq>:
  408c58:	b501      	push	{r0, lr}
  408c5a:	f7ff ffb7 	bl	408bcc <__cmpdf2>
  408c5e:	2800      	cmp	r0, #0
  408c60:	bf48      	it	mi
  408c62:	f110 0f00 	cmnmi.w	r0, #0
  408c66:	bd01      	pop	{r0, pc}

00408c68 <__aeabi_dcmpeq>:
  408c68:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c6c:	f7ff fff4 	bl	408c58 <__aeabi_cdcmpeq>
  408c70:	bf0c      	ite	eq
  408c72:	2001      	moveq	r0, #1
  408c74:	2000      	movne	r0, #0
  408c76:	f85d fb08 	ldr.w	pc, [sp], #8
  408c7a:	bf00      	nop

00408c7c <__aeabi_dcmplt>:
  408c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c80:	f7ff ffea 	bl	408c58 <__aeabi_cdcmpeq>
  408c84:	bf34      	ite	cc
  408c86:	2001      	movcc	r0, #1
  408c88:	2000      	movcs	r0, #0
  408c8a:	f85d fb08 	ldr.w	pc, [sp], #8
  408c8e:	bf00      	nop

00408c90 <__aeabi_dcmple>:
  408c90:	f84d ed08 	str.w	lr, [sp, #-8]!
  408c94:	f7ff ffe0 	bl	408c58 <__aeabi_cdcmpeq>
  408c98:	bf94      	ite	ls
  408c9a:	2001      	movls	r0, #1
  408c9c:	2000      	movhi	r0, #0
  408c9e:	f85d fb08 	ldr.w	pc, [sp], #8
  408ca2:	bf00      	nop

00408ca4 <__aeabi_dcmpge>:
  408ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ca8:	f7ff ffce 	bl	408c48 <__aeabi_cdrcmple>
  408cac:	bf94      	ite	ls
  408cae:	2001      	movls	r0, #1
  408cb0:	2000      	movhi	r0, #0
  408cb2:	f85d fb08 	ldr.w	pc, [sp], #8
  408cb6:	bf00      	nop

00408cb8 <__aeabi_dcmpgt>:
  408cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  408cbc:	f7ff ffc4 	bl	408c48 <__aeabi_cdrcmple>
  408cc0:	bf34      	ite	cc
  408cc2:	2001      	movcc	r0, #1
  408cc4:	2000      	movcs	r0, #0
  408cc6:	f85d fb08 	ldr.w	pc, [sp], #8
  408cca:	bf00      	nop

00408ccc <__aeabi_d2iz>:
  408ccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408cd4:	d215      	bcs.n	408d02 <__aeabi_d2iz+0x36>
  408cd6:	d511      	bpl.n	408cfc <__aeabi_d2iz+0x30>
  408cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408ce0:	d912      	bls.n	408d08 <__aeabi_d2iz+0x3c>
  408ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408cf2:	fa23 f002 	lsr.w	r0, r3, r2
  408cf6:	bf18      	it	ne
  408cf8:	4240      	negne	r0, r0
  408cfa:	4770      	bx	lr
  408cfc:	f04f 0000 	mov.w	r0, #0
  408d00:	4770      	bx	lr
  408d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408d06:	d105      	bne.n	408d14 <__aeabi_d2iz+0x48>
  408d08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408d0c:	bf08      	it	eq
  408d0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408d12:	4770      	bx	lr
  408d14:	f04f 0000 	mov.w	r0, #0
  408d18:	4770      	bx	lr
  408d1a:	bf00      	nop

00408d1c <__aeabi_d2f>:
  408d1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408d20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  408d24:	bf24      	itt	cs
  408d26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  408d2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  408d2e:	d90d      	bls.n	408d4c <__aeabi_d2f+0x30>
  408d30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  408d34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  408d38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  408d3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  408d40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  408d44:	bf08      	it	eq
  408d46:	f020 0001 	biceq.w	r0, r0, #1
  408d4a:	4770      	bx	lr
  408d4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  408d50:	d121      	bne.n	408d96 <__aeabi_d2f+0x7a>
  408d52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  408d56:	bfbc      	itt	lt
  408d58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  408d5c:	4770      	bxlt	lr
  408d5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408d62:	ea4f 5252 	mov.w	r2, r2, lsr #21
  408d66:	f1c2 0218 	rsb	r2, r2, #24
  408d6a:	f1c2 0c20 	rsb	ip, r2, #32
  408d6e:	fa10 f30c 	lsls.w	r3, r0, ip
  408d72:	fa20 f002 	lsr.w	r0, r0, r2
  408d76:	bf18      	it	ne
  408d78:	f040 0001 	orrne.w	r0, r0, #1
  408d7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408d80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  408d84:	fa03 fc0c 	lsl.w	ip, r3, ip
  408d88:	ea40 000c 	orr.w	r0, r0, ip
  408d8c:	fa23 f302 	lsr.w	r3, r3, r2
  408d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
  408d94:	e7cc      	b.n	408d30 <__aeabi_d2f+0x14>
  408d96:	ea7f 5362 	mvns.w	r3, r2, asr #21
  408d9a:	d107      	bne.n	408dac <__aeabi_d2f+0x90>
  408d9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  408da0:	bf1e      	ittt	ne
  408da2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  408da6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  408daa:	4770      	bxne	lr
  408dac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  408db0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  408db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408db8:	4770      	bx	lr
  408dba:	bf00      	nop

00408dbc <__aeabi_f2iz>:
  408dbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
  408dc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  408dc4:	d30f      	bcc.n	408de6 <__aeabi_f2iz+0x2a>
  408dc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
  408dca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  408dce:	d90d      	bls.n	408dec <__aeabi_f2iz+0x30>
  408dd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
  408dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408dd8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  408ddc:	fa23 f002 	lsr.w	r0, r3, r2
  408de0:	bf18      	it	ne
  408de2:	4240      	negne	r0, r0
  408de4:	4770      	bx	lr
  408de6:	f04f 0000 	mov.w	r0, #0
  408dea:	4770      	bx	lr
  408dec:	f112 0f61 	cmn.w	r2, #97	; 0x61
  408df0:	d101      	bne.n	408df6 <__aeabi_f2iz+0x3a>
  408df2:	0242      	lsls	r2, r0, #9
  408df4:	d105      	bne.n	408e02 <__aeabi_f2iz+0x46>
  408df6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  408dfa:	bf08      	it	eq
  408dfc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408e00:	4770      	bx	lr
  408e02:	f04f 0000 	mov.w	r0, #0
  408e06:	4770      	bx	lr

00408e08 <__assert_func>:
  408e08:	4c0a      	ldr	r4, [pc, #40]	; (408e34 <__assert_func+0x2c>)
  408e0a:	4605      	mov	r5, r0
  408e0c:	6820      	ldr	r0, [r4, #0]
  408e0e:	b500      	push	{lr}
  408e10:	68c0      	ldr	r0, [r0, #12]
  408e12:	b085      	sub	sp, #20
  408e14:	b15a      	cbz	r2, 408e2e <__assert_func+0x26>
  408e16:	4614      	mov	r4, r2
  408e18:	4a07      	ldr	r2, [pc, #28]	; (408e38 <__assert_func+0x30>)
  408e1a:	9402      	str	r4, [sp, #8]
  408e1c:	e88d 0006 	stmia.w	sp, {r1, r2}
  408e20:	461a      	mov	r2, r3
  408e22:	4906      	ldr	r1, [pc, #24]	; (408e3c <__assert_func+0x34>)
  408e24:	462b      	mov	r3, r5
  408e26:	f000 f817 	bl	408e58 <fiprintf>
  408e2a:	f003 f823 	bl	40be74 <abort>
  408e2e:	4a04      	ldr	r2, [pc, #16]	; (408e40 <__assert_func+0x38>)
  408e30:	4614      	mov	r4, r2
  408e32:	e7f2      	b.n	408e1a <__assert_func+0x12>
  408e34:	20400448 	.word	0x20400448
  408e38:	0040fc38 	.word	0x0040fc38
  408e3c:	0040fc48 	.word	0x0040fc48
  408e40:	0040f4e8 	.word	0x0040f4e8

00408e44 <atoi>:
  408e44:	2100      	movs	r1, #0
  408e46:	220a      	movs	r2, #10
  408e48:	f000 be9e 	b.w	409b88 <strtol>

00408e4c <__errno>:
  408e4c:	4b01      	ldr	r3, [pc, #4]	; (408e54 <__errno+0x8>)
  408e4e:	6818      	ldr	r0, [r3, #0]
  408e50:	4770      	bx	lr
  408e52:	bf00      	nop
  408e54:	20400448 	.word	0x20400448

00408e58 <fiprintf>:
  408e58:	b40e      	push	{r1, r2, r3}
  408e5a:	b510      	push	{r4, lr}
  408e5c:	b083      	sub	sp, #12
  408e5e:	4b07      	ldr	r3, [pc, #28]	; (408e7c <fiprintf+0x24>)
  408e60:	4601      	mov	r1, r0
  408e62:	ac05      	add	r4, sp, #20
  408e64:	6818      	ldr	r0, [r3, #0]
  408e66:	f854 2b04 	ldr.w	r2, [r4], #4
  408e6a:	4623      	mov	r3, r4
  408e6c:	9401      	str	r4, [sp, #4]
  408e6e:	f002 f95b 	bl	40b128 <_vfiprintf_r>
  408e72:	b003      	add	sp, #12
  408e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408e78:	b003      	add	sp, #12
  408e7a:	4770      	bx	lr
  408e7c:	20400448 	.word	0x20400448

00408e80 <__libc_init_array>:
  408e80:	b570      	push	{r4, r5, r6, lr}
  408e82:	4e0f      	ldr	r6, [pc, #60]	; (408ec0 <__libc_init_array+0x40>)
  408e84:	4d0f      	ldr	r5, [pc, #60]	; (408ec4 <__libc_init_array+0x44>)
  408e86:	1b76      	subs	r6, r6, r5
  408e88:	10b6      	asrs	r6, r6, #2
  408e8a:	bf18      	it	ne
  408e8c:	2400      	movne	r4, #0
  408e8e:	d005      	beq.n	408e9c <__libc_init_array+0x1c>
  408e90:	3401      	adds	r4, #1
  408e92:	f855 3b04 	ldr.w	r3, [r5], #4
  408e96:	4798      	blx	r3
  408e98:	42a6      	cmp	r6, r4
  408e9a:	d1f9      	bne.n	408e90 <__libc_init_array+0x10>
  408e9c:	4e0a      	ldr	r6, [pc, #40]	; (408ec8 <__libc_init_array+0x48>)
  408e9e:	f007 f843 	bl	40ff28 <_init>
  408ea2:	4d0a      	ldr	r5, [pc, #40]	; (408ecc <__libc_init_array+0x4c>)
  408ea4:	1b76      	subs	r6, r6, r5
  408ea6:	10b6      	asrs	r6, r6, #2
  408ea8:	bf18      	it	ne
  408eaa:	2400      	movne	r4, #0
  408eac:	d006      	beq.n	408ebc <__libc_init_array+0x3c>
  408eae:	3401      	adds	r4, #1
  408eb0:	f855 3b04 	ldr.w	r3, [r5], #4
  408eb4:	4798      	blx	r3
  408eb6:	42a6      	cmp	r6, r4
  408eb8:	d1f9      	bne.n	408eae <__libc_init_array+0x2e>
  408eba:	bd70      	pop	{r4, r5, r6, pc}
  408ebc:	bd70      	pop	{r4, r5, r6, pc}
  408ebe:	bf00      	nop
  408ec0:	0040ff34 	.word	0x0040ff34
  408ec4:	0040ff34 	.word	0x0040ff34
  408ec8:	0040ff3c 	.word	0x0040ff3c
  408ecc:	0040ff34 	.word	0x0040ff34

00408ed0 <iprintf>:
  408ed0:	b40f      	push	{r0, r1, r2, r3}
  408ed2:	b510      	push	{r4, lr}
  408ed4:	b082      	sub	sp, #8
  408ed6:	4b07      	ldr	r3, [pc, #28]	; (408ef4 <iprintf+0x24>)
  408ed8:	ac04      	add	r4, sp, #16
  408eda:	6818      	ldr	r0, [r3, #0]
  408edc:	f854 2b04 	ldr.w	r2, [r4], #4
  408ee0:	6881      	ldr	r1, [r0, #8]
  408ee2:	4623      	mov	r3, r4
  408ee4:	9401      	str	r4, [sp, #4]
  408ee6:	f002 f91f 	bl	40b128 <_vfiprintf_r>
  408eea:	b002      	add	sp, #8
  408eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408ef0:	b004      	add	sp, #16
  408ef2:	4770      	bx	lr
  408ef4:	20400448 	.word	0x20400448

00408ef8 <malloc>:
  408ef8:	4b02      	ldr	r3, [pc, #8]	; (408f04 <malloc+0xc>)
  408efa:	4601      	mov	r1, r0
  408efc:	6818      	ldr	r0, [r3, #0]
  408efe:	f000 b803 	b.w	408f08 <_malloc_r>
  408f02:	bf00      	nop
  408f04:	20400448 	.word	0x20400448

00408f08 <_malloc_r>:
  408f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f0c:	f101 040b 	add.w	r4, r1, #11
  408f10:	b083      	sub	sp, #12
  408f12:	4605      	mov	r5, r0
  408f14:	2c16      	cmp	r4, #22
  408f16:	d927      	bls.n	408f68 <_malloc_r+0x60>
  408f18:	f034 0407 	bics.w	r4, r4, #7
  408f1c:	d42a      	bmi.n	408f74 <_malloc_r+0x6c>
  408f1e:	42a1      	cmp	r1, r4
  408f20:	d828      	bhi.n	408f74 <_malloc_r+0x6c>
  408f22:	f000 fb87 	bl	409634 <__malloc_lock>
  408f26:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  408f2a:	d22b      	bcs.n	408f84 <_malloc_r+0x7c>
  408f2c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  408f30:	4ec0      	ldr	r6, [pc, #768]	; (409234 <_malloc_r+0x32c>)
  408f32:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  408f36:	68d3      	ldr	r3, [r2, #12]
  408f38:	4293      	cmp	r3, r2
  408f3a:	f000 8171 	beq.w	409220 <_malloc_r+0x318>
  408f3e:	685a      	ldr	r2, [r3, #4]
  408f40:	f103 0808 	add.w	r8, r3, #8
  408f44:	68d9      	ldr	r1, [r3, #12]
  408f46:	4628      	mov	r0, r5
  408f48:	f022 0203 	bic.w	r2, r2, #3
  408f4c:	689c      	ldr	r4, [r3, #8]
  408f4e:	4413      	add	r3, r2
  408f50:	60e1      	str	r1, [r4, #12]
  408f52:	608c      	str	r4, [r1, #8]
  408f54:	685a      	ldr	r2, [r3, #4]
  408f56:	f042 0201 	orr.w	r2, r2, #1
  408f5a:	605a      	str	r2, [r3, #4]
  408f5c:	f000 fb6c 	bl	409638 <__malloc_unlock>
  408f60:	4640      	mov	r0, r8
  408f62:	b003      	add	sp, #12
  408f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f68:	2910      	cmp	r1, #16
  408f6a:	d803      	bhi.n	408f74 <_malloc_r+0x6c>
  408f6c:	f000 fb62 	bl	409634 <__malloc_lock>
  408f70:	2410      	movs	r4, #16
  408f72:	e7db      	b.n	408f2c <_malloc_r+0x24>
  408f74:	f04f 0800 	mov.w	r8, #0
  408f78:	230c      	movs	r3, #12
  408f7a:	4640      	mov	r0, r8
  408f7c:	602b      	str	r3, [r5, #0]
  408f7e:	b003      	add	sp, #12
  408f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f84:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  408f88:	f000 8089 	beq.w	40909e <_malloc_r+0x196>
  408f8c:	f1bc 0f04 	cmp.w	ip, #4
  408f90:	f200 80c4 	bhi.w	40911c <_malloc_r+0x214>
  408f94:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  408f98:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  408f9c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408fa0:	4ea4      	ldr	r6, [pc, #656]	; (409234 <_malloc_r+0x32c>)
  408fa2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  408fa6:	68c3      	ldr	r3, [r0, #12]
  408fa8:	4298      	cmp	r0, r3
  408faa:	d105      	bne.n	408fb8 <_malloc_r+0xb0>
  408fac:	e00c      	b.n	408fc8 <_malloc_r+0xc0>
  408fae:	2900      	cmp	r1, #0
  408fb0:	da79      	bge.n	4090a6 <_malloc_r+0x19e>
  408fb2:	68db      	ldr	r3, [r3, #12]
  408fb4:	4298      	cmp	r0, r3
  408fb6:	d007      	beq.n	408fc8 <_malloc_r+0xc0>
  408fb8:	685a      	ldr	r2, [r3, #4]
  408fba:	f022 0203 	bic.w	r2, r2, #3
  408fbe:	1b11      	subs	r1, r2, r4
  408fc0:	290f      	cmp	r1, #15
  408fc2:	ddf4      	ble.n	408fae <_malloc_r+0xa6>
  408fc4:	f10c 3cff 	add.w	ip, ip, #4294967295
  408fc8:	f10c 0c01 	add.w	ip, ip, #1
  408fcc:	4f99      	ldr	r7, [pc, #612]	; (409234 <_malloc_r+0x32c>)
  408fce:	6933      	ldr	r3, [r6, #16]
  408fd0:	f107 0e08 	add.w	lr, r7, #8
  408fd4:	4573      	cmp	r3, lr
  408fd6:	f000 8119 	beq.w	40920c <_malloc_r+0x304>
  408fda:	685a      	ldr	r2, [r3, #4]
  408fdc:	f022 0203 	bic.w	r2, r2, #3
  408fe0:	1b11      	subs	r1, r2, r4
  408fe2:	290f      	cmp	r1, #15
  408fe4:	f300 80ca 	bgt.w	40917c <_malloc_r+0x274>
  408fe8:	2900      	cmp	r1, #0
  408fea:	f8c7 e014 	str.w	lr, [r7, #20]
  408fee:	f8c7 e010 	str.w	lr, [r7, #16]
  408ff2:	da6a      	bge.n	4090ca <_malloc_r+0x1c2>
  408ff4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408ff8:	f080 809f 	bcs.w	40913a <_malloc_r+0x232>
  408ffc:	08d2      	lsrs	r2, r2, #3
  408ffe:	2001      	movs	r0, #1
  409000:	6879      	ldr	r1, [r7, #4]
  409002:	ea4f 08a2 	mov.w	r8, r2, asr #2
  409006:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40900a:	fa00 f008 	lsl.w	r0, r0, r8
  40900e:	f8d2 8008 	ldr.w	r8, [r2, #8]
  409012:	4308      	orrs	r0, r1
  409014:	60da      	str	r2, [r3, #12]
  409016:	f8c3 8008 	str.w	r8, [r3, #8]
  40901a:	6078      	str	r0, [r7, #4]
  40901c:	6093      	str	r3, [r2, #8]
  40901e:	f8c8 300c 	str.w	r3, [r8, #12]
  409022:	ea4f 03ac 	mov.w	r3, ip, asr #2
  409026:	2101      	movs	r1, #1
  409028:	4099      	lsls	r1, r3
  40902a:	4281      	cmp	r1, r0
  40902c:	d85b      	bhi.n	4090e6 <_malloc_r+0x1de>
  40902e:	4208      	tst	r0, r1
  409030:	d106      	bne.n	409040 <_malloc_r+0x138>
  409032:	f02c 0c03 	bic.w	ip, ip, #3
  409036:	0049      	lsls	r1, r1, #1
  409038:	f10c 0c04 	add.w	ip, ip, #4
  40903c:	4208      	tst	r0, r1
  40903e:	d0fa      	beq.n	409036 <_malloc_r+0x12e>
  409040:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  409044:	46e1      	mov	r9, ip
  409046:	4640      	mov	r0, r8
  409048:	68c7      	ldr	r7, [r0, #12]
  40904a:	42b8      	cmp	r0, r7
  40904c:	d107      	bne.n	40905e <_malloc_r+0x156>
  40904e:	e0df      	b.n	409210 <_malloc_r+0x308>
  409050:	2a00      	cmp	r2, #0
  409052:	f280 80f7 	bge.w	409244 <_malloc_r+0x33c>
  409056:	68ff      	ldr	r7, [r7, #12]
  409058:	42b8      	cmp	r0, r7
  40905a:	f000 80d9 	beq.w	409210 <_malloc_r+0x308>
  40905e:	687b      	ldr	r3, [r7, #4]
  409060:	f023 0303 	bic.w	r3, r3, #3
  409064:	1b1a      	subs	r2, r3, r4
  409066:	2a0f      	cmp	r2, #15
  409068:	ddf2      	ble.n	409050 <_malloc_r+0x148>
  40906a:	46b8      	mov	r8, r7
  40906c:	68fb      	ldr	r3, [r7, #12]
  40906e:	f044 0901 	orr.w	r9, r4, #1
  409072:	f042 0c01 	orr.w	ip, r2, #1
  409076:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40907a:	443c      	add	r4, r7
  40907c:	f8c7 9004 	str.w	r9, [r7, #4]
  409080:	4628      	mov	r0, r5
  409082:	60cb      	str	r3, [r1, #12]
  409084:	6099      	str	r1, [r3, #8]
  409086:	6174      	str	r4, [r6, #20]
  409088:	6134      	str	r4, [r6, #16]
  40908a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40908e:	f8c4 e008 	str.w	lr, [r4, #8]
  409092:	f8c4 c004 	str.w	ip, [r4, #4]
  409096:	50a2      	str	r2, [r4, r2]
  409098:	f000 face 	bl	409638 <__malloc_unlock>
  40909c:	e760      	b.n	408f60 <_malloc_r+0x58>
  40909e:	207e      	movs	r0, #126	; 0x7e
  4090a0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  4090a4:	e77c      	b.n	408fa0 <_malloc_r+0x98>
  4090a6:	441a      	add	r2, r3
  4090a8:	68dc      	ldr	r4, [r3, #12]
  4090aa:	689e      	ldr	r6, [r3, #8]
  4090ac:	f103 0808 	add.w	r8, r3, #8
  4090b0:	6851      	ldr	r1, [r2, #4]
  4090b2:	4628      	mov	r0, r5
  4090b4:	60f4      	str	r4, [r6, #12]
  4090b6:	f041 0301 	orr.w	r3, r1, #1
  4090ba:	60a6      	str	r6, [r4, #8]
  4090bc:	6053      	str	r3, [r2, #4]
  4090be:	f000 fabb 	bl	409638 <__malloc_unlock>
  4090c2:	4640      	mov	r0, r8
  4090c4:	b003      	add	sp, #12
  4090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090ca:	441a      	add	r2, r3
  4090cc:	f103 0808 	add.w	r8, r3, #8
  4090d0:	4628      	mov	r0, r5
  4090d2:	6853      	ldr	r3, [r2, #4]
  4090d4:	f043 0301 	orr.w	r3, r3, #1
  4090d8:	6053      	str	r3, [r2, #4]
  4090da:	f000 faad 	bl	409638 <__malloc_unlock>
  4090de:	4640      	mov	r0, r8
  4090e0:	b003      	add	sp, #12
  4090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090e6:	68b7      	ldr	r7, [r6, #8]
  4090e8:	687a      	ldr	r2, [r7, #4]
  4090ea:	f022 0803 	bic.w	r8, r2, #3
  4090ee:	ebc4 0208 	rsb	r2, r4, r8
  4090f2:	2a0f      	cmp	r2, #15
  4090f4:	dd56      	ble.n	4091a4 <_malloc_r+0x29c>
  4090f6:	45a0      	cmp	r8, r4
  4090f8:	d354      	bcc.n	4091a4 <_malloc_r+0x29c>
  4090fa:	f044 0301 	orr.w	r3, r4, #1
  4090fe:	f042 0201 	orr.w	r2, r2, #1
  409102:	443c      	add	r4, r7
  409104:	f107 0808 	add.w	r8, r7, #8
  409108:	607b      	str	r3, [r7, #4]
  40910a:	4628      	mov	r0, r5
  40910c:	60b4      	str	r4, [r6, #8]
  40910e:	6062      	str	r2, [r4, #4]
  409110:	f000 fa92 	bl	409638 <__malloc_unlock>
  409114:	4640      	mov	r0, r8
  409116:	b003      	add	sp, #12
  409118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40911c:	f1bc 0f14 	cmp.w	ip, #20
  409120:	f240 809f 	bls.w	409262 <_malloc_r+0x35a>
  409124:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  409128:	f200 8127 	bhi.w	40937a <_malloc_r+0x472>
  40912c:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  409130:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  409134:	ea4f 004c 	mov.w	r0, ip, lsl #1
  409138:	e732      	b.n	408fa0 <_malloc_r+0x98>
  40913a:	0a51      	lsrs	r1, r2, #9
  40913c:	2904      	cmp	r1, #4
  40913e:	f240 8095 	bls.w	40926c <_malloc_r+0x364>
  409142:	2914      	cmp	r1, #20
  409144:	f200 8142 	bhi.w	4093cc <_malloc_r+0x4c4>
  409148:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40914c:	0078      	lsls	r0, r7, #1
  40914e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  409152:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 409234 <_malloc_r+0x32c>
  409156:	6881      	ldr	r1, [r0, #8]
  409158:	4281      	cmp	r1, r0
  40915a:	f000 811b 	beq.w	409394 <_malloc_r+0x48c>
  40915e:	684f      	ldr	r7, [r1, #4]
  409160:	f027 0703 	bic.w	r7, r7, #3
  409164:	42ba      	cmp	r2, r7
  409166:	d202      	bcs.n	40916e <_malloc_r+0x266>
  409168:	6889      	ldr	r1, [r1, #8]
  40916a:	4288      	cmp	r0, r1
  40916c:	d1f7      	bne.n	40915e <_malloc_r+0x256>
  40916e:	68ca      	ldr	r2, [r1, #12]
  409170:	6870      	ldr	r0, [r6, #4]
  409172:	60da      	str	r2, [r3, #12]
  409174:	6099      	str	r1, [r3, #8]
  409176:	6093      	str	r3, [r2, #8]
  409178:	60cb      	str	r3, [r1, #12]
  40917a:	e752      	b.n	409022 <_malloc_r+0x11a>
  40917c:	f044 0601 	orr.w	r6, r4, #1
  409180:	f041 0201 	orr.w	r2, r1, #1
  409184:	441c      	add	r4, r3
  409186:	4628      	mov	r0, r5
  409188:	605e      	str	r6, [r3, #4]
  40918a:	f103 0808 	add.w	r8, r3, #8
  40918e:	617c      	str	r4, [r7, #20]
  409190:	613c      	str	r4, [r7, #16]
  409192:	f8c4 e00c 	str.w	lr, [r4, #12]
  409196:	f8c4 e008 	str.w	lr, [r4, #8]
  40919a:	6062      	str	r2, [r4, #4]
  40919c:	5061      	str	r1, [r4, r1]
  40919e:	f000 fa4b 	bl	409638 <__malloc_unlock>
  4091a2:	e6dd      	b.n	408f60 <_malloc_r+0x58>
  4091a4:	4a24      	ldr	r2, [pc, #144]	; (409238 <_malloc_r+0x330>)
  4091a6:	4b25      	ldr	r3, [pc, #148]	; (40923c <_malloc_r+0x334>)
  4091a8:	6811      	ldr	r1, [r2, #0]
  4091aa:	681b      	ldr	r3, [r3, #0]
  4091ac:	3101      	adds	r1, #1
  4091ae:	4423      	add	r3, r4
  4091b0:	f000 8109 	beq.w	4093c6 <_malloc_r+0x4be>
  4091b4:	f241 010f 	movw	r1, #4111	; 0x100f
  4091b8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 409240 <_malloc_r+0x338>
  4091bc:	4419      	add	r1, r3
  4091be:	ea01 0909 	and.w	r9, r1, r9
  4091c2:	4628      	mov	r0, r5
  4091c4:	4649      	mov	r1, r9
  4091c6:	9201      	str	r2, [sp, #4]
  4091c8:	f000 fa38 	bl	40963c <_sbrk_r>
  4091cc:	f1b0 3fff 	cmp.w	r0, #4294967295
  4091d0:	4682      	mov	sl, r0
  4091d2:	9a01      	ldr	r2, [sp, #4]
  4091d4:	f000 8101 	beq.w	4093da <_malloc_r+0x4d2>
  4091d8:	1bbb      	subs	r3, r7, r6
  4091da:	eb07 0108 	add.w	r1, r7, r8
  4091de:	4815      	ldr	r0, [pc, #84]	; (409234 <_malloc_r+0x32c>)
  4091e0:	bf18      	it	ne
  4091e2:	2301      	movne	r3, #1
  4091e4:	4551      	cmp	r1, sl
  4091e6:	d967      	bls.n	4092b8 <_malloc_r+0x3b0>
  4091e8:	2b00      	cmp	r3, #0
  4091ea:	d065      	beq.n	4092b8 <_malloc_r+0x3b0>
  4091ec:	6887      	ldr	r7, [r0, #8]
  4091ee:	687b      	ldr	r3, [r7, #4]
  4091f0:	f023 0303 	bic.w	r3, r3, #3
  4091f4:	1b1a      	subs	r2, r3, r4
  4091f6:	2a0f      	cmp	r2, #15
  4091f8:	dd02      	ble.n	409200 <_malloc_r+0x2f8>
  4091fa:	429c      	cmp	r4, r3
  4091fc:	f67f af7d 	bls.w	4090fa <_malloc_r+0x1f2>
  409200:	4628      	mov	r0, r5
  409202:	f04f 0800 	mov.w	r8, #0
  409206:	f000 fa17 	bl	409638 <__malloc_unlock>
  40920a:	e6a9      	b.n	408f60 <_malloc_r+0x58>
  40920c:	6878      	ldr	r0, [r7, #4]
  40920e:	e708      	b.n	409022 <_malloc_r+0x11a>
  409210:	f109 0901 	add.w	r9, r9, #1
  409214:	3008      	adds	r0, #8
  409216:	f019 0f03 	tst.w	r9, #3
  40921a:	f47f af15 	bne.w	409048 <_malloc_r+0x140>
  40921e:	e02f      	b.n	409280 <_malloc_r+0x378>
  409220:	f103 0208 	add.w	r2, r3, #8
  409224:	695b      	ldr	r3, [r3, #20]
  409226:	429a      	cmp	r2, r3
  409228:	bf08      	it	eq
  40922a:	f10c 0c02 	addeq.w	ip, ip, #2
  40922e:	f43f aecd 	beq.w	408fcc <_malloc_r+0xc4>
  409232:	e684      	b.n	408f3e <_malloc_r+0x36>
  409234:	2040044c 	.word	0x2040044c
  409238:	20400858 	.word	0x20400858
  40923c:	2040c448 	.word	0x2040c448
  409240:	fffff000 	.word	0xfffff000
  409244:	18fa      	adds	r2, r7, r3
  409246:	46b8      	mov	r8, r7
  409248:	68f9      	ldr	r1, [r7, #12]
  40924a:	4628      	mov	r0, r5
  40924c:	6853      	ldr	r3, [r2, #4]
  40924e:	f858 4f08 	ldr.w	r4, [r8, #8]!
  409252:	f043 0301 	orr.w	r3, r3, #1
  409256:	6053      	str	r3, [r2, #4]
  409258:	60e1      	str	r1, [r4, #12]
  40925a:	608c      	str	r4, [r1, #8]
  40925c:	f000 f9ec 	bl	409638 <__malloc_unlock>
  409260:	e67e      	b.n	408f60 <_malloc_r+0x58>
  409262:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  409266:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40926a:	e699      	b.n	408fa0 <_malloc_r+0x98>
  40926c:	0991      	lsrs	r1, r2, #6
  40926e:	f101 0738 	add.w	r7, r1, #56	; 0x38
  409272:	0078      	lsls	r0, r7, #1
  409274:	e76b      	b.n	40914e <_malloc_r+0x246>
  409276:	f8d8 8000 	ldr.w	r8, [r8]
  40927a:	4598      	cmp	r8, r3
  40927c:	f040 80e6 	bne.w	40944c <_malloc_r+0x544>
  409280:	f01c 0f03 	tst.w	ip, #3
  409284:	f1a8 0308 	sub.w	r3, r8, #8
  409288:	f10c 3cff 	add.w	ip, ip, #4294967295
  40928c:	d1f3      	bne.n	409276 <_malloc_r+0x36e>
  40928e:	6873      	ldr	r3, [r6, #4]
  409290:	ea23 0301 	bic.w	r3, r3, r1
  409294:	6073      	str	r3, [r6, #4]
  409296:	0049      	lsls	r1, r1, #1
  409298:	4299      	cmp	r1, r3
  40929a:	f63f af24 	bhi.w	4090e6 <_malloc_r+0x1de>
  40929e:	2900      	cmp	r1, #0
  4092a0:	f43f af21 	beq.w	4090e6 <_malloc_r+0x1de>
  4092a4:	420b      	tst	r3, r1
  4092a6:	46cc      	mov	ip, r9
  4092a8:	f47f aeca 	bne.w	409040 <_malloc_r+0x138>
  4092ac:	0049      	lsls	r1, r1, #1
  4092ae:	f10c 0c04 	add.w	ip, ip, #4
  4092b2:	420b      	tst	r3, r1
  4092b4:	d0fa      	beq.n	4092ac <_malloc_r+0x3a4>
  4092b6:	e6c3      	b.n	409040 <_malloc_r+0x138>
  4092b8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 409458 <_malloc_r+0x550>
  4092bc:	4551      	cmp	r1, sl
  4092be:	f8db 0000 	ldr.w	r0, [fp]
  4092c2:	4448      	add	r0, r9
  4092c4:	f8cb 0000 	str.w	r0, [fp]
  4092c8:	f000 808c 	beq.w	4093e4 <_malloc_r+0x4dc>
  4092cc:	6812      	ldr	r2, [r2, #0]
  4092ce:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40945c <_malloc_r+0x554>
  4092d2:	3201      	adds	r2, #1
  4092d4:	f000 80a3 	beq.w	40941e <_malloc_r+0x516>
  4092d8:	ebc1 010a 	rsb	r1, r1, sl
  4092dc:	4408      	add	r0, r1
  4092de:	f8cb 0000 	str.w	r0, [fp]
  4092e2:	f01a 0107 	ands.w	r1, sl, #7
  4092e6:	d052      	beq.n	40938e <_malloc_r+0x486>
  4092e8:	f1c1 0008 	rsb	r0, r1, #8
  4092ec:	f241 0208 	movw	r2, #4104	; 0x1008
  4092f0:	4482      	add	sl, r0
  4092f2:	1a52      	subs	r2, r2, r1
  4092f4:	eb0a 0109 	add.w	r1, sl, r9
  4092f8:	4628      	mov	r0, r5
  4092fa:	9301      	str	r3, [sp, #4]
  4092fc:	f3c1 010b 	ubfx	r1, r1, #0, #12
  409300:	ebc1 0902 	rsb	r9, r1, r2
  409304:	4649      	mov	r1, r9
  409306:	f000 f999 	bl	40963c <_sbrk_r>
  40930a:	1c43      	adds	r3, r0, #1
  40930c:	9b01      	ldr	r3, [sp, #4]
  40930e:	d07a      	beq.n	409406 <_malloc_r+0x4fe>
  409310:	ebca 0200 	rsb	r2, sl, r0
  409314:	444a      	add	r2, r9
  409316:	f042 0201 	orr.w	r2, r2, #1
  40931a:	f8db 0000 	ldr.w	r0, [fp]
  40931e:	f8c6 a008 	str.w	sl, [r6, #8]
  409322:	4448      	add	r0, r9
  409324:	f8ca 2004 	str.w	r2, [sl, #4]
  409328:	f8df 912c 	ldr.w	r9, [pc, #300]	; 409458 <_malloc_r+0x550>
  40932c:	f8cb 0000 	str.w	r0, [fp]
  409330:	b1a3      	cbz	r3, 40935c <_malloc_r+0x454>
  409332:	f1b8 0f0f 	cmp.w	r8, #15
  409336:	d937      	bls.n	4093a8 <_malloc_r+0x4a0>
  409338:	687b      	ldr	r3, [r7, #4]
  40933a:	f1a8 020c 	sub.w	r2, r8, #12
  40933e:	f04f 0e05 	mov.w	lr, #5
  409342:	f022 0207 	bic.w	r2, r2, #7
  409346:	f003 0301 	and.w	r3, r3, #1
  40934a:	18b9      	adds	r1, r7, r2
  40934c:	4313      	orrs	r3, r2
  40934e:	2a0f      	cmp	r2, #15
  409350:	607b      	str	r3, [r7, #4]
  409352:	f8c1 e004 	str.w	lr, [r1, #4]
  409356:	f8c1 e008 	str.w	lr, [r1, #8]
  40935a:	d858      	bhi.n	40940e <_malloc_r+0x506>
  40935c:	4b3c      	ldr	r3, [pc, #240]	; (409450 <_malloc_r+0x548>)
  40935e:	681a      	ldr	r2, [r3, #0]
  409360:	4290      	cmp	r0, r2
  409362:	d900      	bls.n	409366 <_malloc_r+0x45e>
  409364:	6018      	str	r0, [r3, #0]
  409366:	4b3b      	ldr	r3, [pc, #236]	; (409454 <_malloc_r+0x54c>)
  409368:	68b7      	ldr	r7, [r6, #8]
  40936a:	681a      	ldr	r2, [r3, #0]
  40936c:	4290      	cmp	r0, r2
  40936e:	d900      	bls.n	409372 <_malloc_r+0x46a>
  409370:	6018      	str	r0, [r3, #0]
  409372:	687b      	ldr	r3, [r7, #4]
  409374:	f023 0303 	bic.w	r3, r3, #3
  409378:	e73c      	b.n	4091f4 <_malloc_r+0x2ec>
  40937a:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40937e:	d817      	bhi.n	4093b0 <_malloc_r+0x4a8>
  409380:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  409384:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  409388:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40938c:	e608      	b.n	408fa0 <_malloc_r+0x98>
  40938e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  409392:	e7af      	b.n	4092f4 <_malloc_r+0x3ec>
  409394:	10bf      	asrs	r7, r7, #2
  409396:	2001      	movs	r0, #1
  409398:	460a      	mov	r2, r1
  40939a:	40b8      	lsls	r0, r7
  40939c:	f8d9 7004 	ldr.w	r7, [r9, #4]
  4093a0:	4338      	orrs	r0, r7
  4093a2:	f8c9 0004 	str.w	r0, [r9, #4]
  4093a6:	e6e4      	b.n	409172 <_malloc_r+0x26a>
  4093a8:	2301      	movs	r3, #1
  4093aa:	f8ca 3004 	str.w	r3, [sl, #4]
  4093ae:	e727      	b.n	409200 <_malloc_r+0x2f8>
  4093b0:	f240 5354 	movw	r3, #1364	; 0x554
  4093b4:	459c      	cmp	ip, r3
  4093b6:	d822      	bhi.n	4093fe <_malloc_r+0x4f6>
  4093b8:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  4093bc:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  4093c0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4093c4:	e5ec      	b.n	408fa0 <_malloc_r+0x98>
  4093c6:	f103 0910 	add.w	r9, r3, #16
  4093ca:	e6fa      	b.n	4091c2 <_malloc_r+0x2ba>
  4093cc:	2954      	cmp	r1, #84	; 0x54
  4093ce:	d829      	bhi.n	409424 <_malloc_r+0x51c>
  4093d0:	0b11      	lsrs	r1, r2, #12
  4093d2:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  4093d6:	0078      	lsls	r0, r7, #1
  4093d8:	e6b9      	b.n	40914e <_malloc_r+0x246>
  4093da:	68b7      	ldr	r7, [r6, #8]
  4093dc:	687b      	ldr	r3, [r7, #4]
  4093de:	f023 0303 	bic.w	r3, r3, #3
  4093e2:	e707      	b.n	4091f4 <_malloc_r+0x2ec>
  4093e4:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  4093e8:	f1be 0f00 	cmp.w	lr, #0
  4093ec:	f47f af6e 	bne.w	4092cc <_malloc_r+0x3c4>
  4093f0:	eb09 0308 	add.w	r3, r9, r8
  4093f4:	68b2      	ldr	r2, [r6, #8]
  4093f6:	f043 0301 	orr.w	r3, r3, #1
  4093fa:	6053      	str	r3, [r2, #4]
  4093fc:	e7ae      	b.n	40935c <_malloc_r+0x454>
  4093fe:	20fc      	movs	r0, #252	; 0xfc
  409400:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  409404:	e5cc      	b.n	408fa0 <_malloc_r+0x98>
  409406:	2201      	movs	r2, #1
  409408:	f04f 0900 	mov.w	r9, #0
  40940c:	e785      	b.n	40931a <_malloc_r+0x412>
  40940e:	4628      	mov	r0, r5
  409410:	f107 0108 	add.w	r1, r7, #8
  409414:	f003 ff66 	bl	40d2e4 <_free_r>
  409418:	f8d9 0000 	ldr.w	r0, [r9]
  40941c:	e79e      	b.n	40935c <_malloc_r+0x454>
  40941e:	f8ce a000 	str.w	sl, [lr]
  409422:	e75e      	b.n	4092e2 <_malloc_r+0x3da>
  409424:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  409428:	d804      	bhi.n	409434 <_malloc_r+0x52c>
  40942a:	0bd1      	lsrs	r1, r2, #15
  40942c:	f101 0777 	add.w	r7, r1, #119	; 0x77
  409430:	0078      	lsls	r0, r7, #1
  409432:	e68c      	b.n	40914e <_malloc_r+0x246>
  409434:	f240 5054 	movw	r0, #1364	; 0x554
  409438:	4281      	cmp	r1, r0
  40943a:	d804      	bhi.n	409446 <_malloc_r+0x53e>
  40943c:	0c91      	lsrs	r1, r2, #18
  40943e:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  409442:	0078      	lsls	r0, r7, #1
  409444:	e683      	b.n	40914e <_malloc_r+0x246>
  409446:	20fc      	movs	r0, #252	; 0xfc
  409448:	277e      	movs	r7, #126	; 0x7e
  40944a:	e680      	b.n	40914e <_malloc_r+0x246>
  40944c:	6873      	ldr	r3, [r6, #4]
  40944e:	e722      	b.n	409296 <_malloc_r+0x38e>
  409450:	2040c444 	.word	0x2040c444
  409454:	2040c440 	.word	0x2040c440
  409458:	2040c44c 	.word	0x2040c44c
  40945c:	20400858 	.word	0x20400858

00409460 <memcpy>:
  409460:	4684      	mov	ip, r0
  409462:	ea41 0300 	orr.w	r3, r1, r0
  409466:	f013 0303 	ands.w	r3, r3, #3
  40946a:	d16d      	bne.n	409548 <memcpy+0xe8>
  40946c:	3a40      	subs	r2, #64	; 0x40
  40946e:	d341      	bcc.n	4094f4 <memcpy+0x94>
  409470:	f851 3b04 	ldr.w	r3, [r1], #4
  409474:	f840 3b04 	str.w	r3, [r0], #4
  409478:	f851 3b04 	ldr.w	r3, [r1], #4
  40947c:	f840 3b04 	str.w	r3, [r0], #4
  409480:	f851 3b04 	ldr.w	r3, [r1], #4
  409484:	f840 3b04 	str.w	r3, [r0], #4
  409488:	f851 3b04 	ldr.w	r3, [r1], #4
  40948c:	f840 3b04 	str.w	r3, [r0], #4
  409490:	f851 3b04 	ldr.w	r3, [r1], #4
  409494:	f840 3b04 	str.w	r3, [r0], #4
  409498:	f851 3b04 	ldr.w	r3, [r1], #4
  40949c:	f840 3b04 	str.w	r3, [r0], #4
  4094a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4094a4:	f840 3b04 	str.w	r3, [r0], #4
  4094a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094ac:	f840 3b04 	str.w	r3, [r0], #4
  4094b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4094b4:	f840 3b04 	str.w	r3, [r0], #4
  4094b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094bc:	f840 3b04 	str.w	r3, [r0], #4
  4094c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4094c4:	f840 3b04 	str.w	r3, [r0], #4
  4094c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094cc:	f840 3b04 	str.w	r3, [r0], #4
  4094d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4094d4:	f840 3b04 	str.w	r3, [r0], #4
  4094d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094dc:	f840 3b04 	str.w	r3, [r0], #4
  4094e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4094e4:	f840 3b04 	str.w	r3, [r0], #4
  4094e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094ec:	f840 3b04 	str.w	r3, [r0], #4
  4094f0:	3a40      	subs	r2, #64	; 0x40
  4094f2:	d2bd      	bcs.n	409470 <memcpy+0x10>
  4094f4:	3230      	adds	r2, #48	; 0x30
  4094f6:	d311      	bcc.n	40951c <memcpy+0xbc>
  4094f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4094fc:	f840 3b04 	str.w	r3, [r0], #4
  409500:	f851 3b04 	ldr.w	r3, [r1], #4
  409504:	f840 3b04 	str.w	r3, [r0], #4
  409508:	f851 3b04 	ldr.w	r3, [r1], #4
  40950c:	f840 3b04 	str.w	r3, [r0], #4
  409510:	f851 3b04 	ldr.w	r3, [r1], #4
  409514:	f840 3b04 	str.w	r3, [r0], #4
  409518:	3a10      	subs	r2, #16
  40951a:	d2ed      	bcs.n	4094f8 <memcpy+0x98>
  40951c:	320c      	adds	r2, #12
  40951e:	d305      	bcc.n	40952c <memcpy+0xcc>
  409520:	f851 3b04 	ldr.w	r3, [r1], #4
  409524:	f840 3b04 	str.w	r3, [r0], #4
  409528:	3a04      	subs	r2, #4
  40952a:	d2f9      	bcs.n	409520 <memcpy+0xc0>
  40952c:	3204      	adds	r2, #4
  40952e:	d008      	beq.n	409542 <memcpy+0xe2>
  409530:	07d2      	lsls	r2, r2, #31
  409532:	bf1c      	itt	ne
  409534:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409538:	f800 3b01 	strbne.w	r3, [r0], #1
  40953c:	d301      	bcc.n	409542 <memcpy+0xe2>
  40953e:	880b      	ldrh	r3, [r1, #0]
  409540:	8003      	strh	r3, [r0, #0]
  409542:	4660      	mov	r0, ip
  409544:	4770      	bx	lr
  409546:	bf00      	nop
  409548:	2a08      	cmp	r2, #8
  40954a:	d313      	bcc.n	409574 <memcpy+0x114>
  40954c:	078b      	lsls	r3, r1, #30
  40954e:	d08d      	beq.n	40946c <memcpy+0xc>
  409550:	f010 0303 	ands.w	r3, r0, #3
  409554:	d08a      	beq.n	40946c <memcpy+0xc>
  409556:	f1c3 0304 	rsb	r3, r3, #4
  40955a:	1ad2      	subs	r2, r2, r3
  40955c:	07db      	lsls	r3, r3, #31
  40955e:	bf1c      	itt	ne
  409560:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409564:	f800 3b01 	strbne.w	r3, [r0], #1
  409568:	d380      	bcc.n	40946c <memcpy+0xc>
  40956a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40956e:	f820 3b02 	strh.w	r3, [r0], #2
  409572:	e77b      	b.n	40946c <memcpy+0xc>
  409574:	3a04      	subs	r2, #4
  409576:	d3d9      	bcc.n	40952c <memcpy+0xcc>
  409578:	3a01      	subs	r2, #1
  40957a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40957e:	f800 3b01 	strb.w	r3, [r0], #1
  409582:	d2f9      	bcs.n	409578 <memcpy+0x118>
  409584:	780b      	ldrb	r3, [r1, #0]
  409586:	7003      	strb	r3, [r0, #0]
  409588:	784b      	ldrb	r3, [r1, #1]
  40958a:	7043      	strb	r3, [r0, #1]
  40958c:	788b      	ldrb	r3, [r1, #2]
  40958e:	7083      	strb	r3, [r0, #2]
  409590:	4660      	mov	r0, ip
  409592:	4770      	bx	lr

00409594 <memset>:
  409594:	0783      	lsls	r3, r0, #30
  409596:	b470      	push	{r4, r5, r6}
  409598:	d049      	beq.n	40962e <memset+0x9a>
  40959a:	1e54      	subs	r4, r2, #1
  40959c:	2a00      	cmp	r2, #0
  40959e:	d044      	beq.n	40962a <memset+0x96>
  4095a0:	b2cd      	uxtb	r5, r1
  4095a2:	4603      	mov	r3, r0
  4095a4:	e002      	b.n	4095ac <memset+0x18>
  4095a6:	2c00      	cmp	r4, #0
  4095a8:	d03f      	beq.n	40962a <memset+0x96>
  4095aa:	4614      	mov	r4, r2
  4095ac:	f803 5b01 	strb.w	r5, [r3], #1
  4095b0:	f013 0f03 	tst.w	r3, #3
  4095b4:	f104 32ff 	add.w	r2, r4, #4294967295
  4095b8:	d1f5      	bne.n	4095a6 <memset+0x12>
  4095ba:	2c03      	cmp	r4, #3
  4095bc:	d92e      	bls.n	40961c <memset+0x88>
  4095be:	b2cd      	uxtb	r5, r1
  4095c0:	2c0f      	cmp	r4, #15
  4095c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4095c6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4095ca:	d919      	bls.n	409600 <memset+0x6c>
  4095cc:	f103 0210 	add.w	r2, r3, #16
  4095d0:	4626      	mov	r6, r4
  4095d2:	3e10      	subs	r6, #16
  4095d4:	f842 5c10 	str.w	r5, [r2, #-16]
  4095d8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4095dc:	3210      	adds	r2, #16
  4095de:	2e0f      	cmp	r6, #15
  4095e0:	f842 5c18 	str.w	r5, [r2, #-24]
  4095e4:	f842 5c14 	str.w	r5, [r2, #-20]
  4095e8:	d8f3      	bhi.n	4095d2 <memset+0x3e>
  4095ea:	f1a4 0210 	sub.w	r2, r4, #16
  4095ee:	f004 040f 	and.w	r4, r4, #15
  4095f2:	f022 020f 	bic.w	r2, r2, #15
  4095f6:	2c03      	cmp	r4, #3
  4095f8:	f102 0210 	add.w	r2, r2, #16
  4095fc:	4413      	add	r3, r2
  4095fe:	d90d      	bls.n	40961c <memset+0x88>
  409600:	461e      	mov	r6, r3
  409602:	4622      	mov	r2, r4
  409604:	3a04      	subs	r2, #4
  409606:	f846 5b04 	str.w	r5, [r6], #4
  40960a:	2a03      	cmp	r2, #3
  40960c:	d8fa      	bhi.n	409604 <memset+0x70>
  40960e:	1f22      	subs	r2, r4, #4
  409610:	f004 0403 	and.w	r4, r4, #3
  409614:	f022 0203 	bic.w	r2, r2, #3
  409618:	3204      	adds	r2, #4
  40961a:	4413      	add	r3, r2
  40961c:	b12c      	cbz	r4, 40962a <memset+0x96>
  40961e:	b2c9      	uxtb	r1, r1
  409620:	441c      	add	r4, r3
  409622:	f803 1b01 	strb.w	r1, [r3], #1
  409626:	42a3      	cmp	r3, r4
  409628:	d1fb      	bne.n	409622 <memset+0x8e>
  40962a:	bc70      	pop	{r4, r5, r6}
  40962c:	4770      	bx	lr
  40962e:	4614      	mov	r4, r2
  409630:	4603      	mov	r3, r0
  409632:	e7c2      	b.n	4095ba <memset+0x26>

00409634 <__malloc_lock>:
  409634:	4770      	bx	lr
  409636:	bf00      	nop

00409638 <__malloc_unlock>:
  409638:	4770      	bx	lr
  40963a:	bf00      	nop

0040963c <_sbrk_r>:
  40963c:	b538      	push	{r3, r4, r5, lr}
  40963e:	2300      	movs	r3, #0
  409640:	4c06      	ldr	r4, [pc, #24]	; (40965c <_sbrk_r+0x20>)
  409642:	4605      	mov	r5, r0
  409644:	4608      	mov	r0, r1
  409646:	6023      	str	r3, [r4, #0]
  409648:	f7fa f81e 	bl	403688 <_sbrk>
  40964c:	1c43      	adds	r3, r0, #1
  40964e:	d000      	beq.n	409652 <_sbrk_r+0x16>
  409650:	bd38      	pop	{r3, r4, r5, pc}
  409652:	6823      	ldr	r3, [r4, #0]
  409654:	2b00      	cmp	r3, #0
  409656:	d0fb      	beq.n	409650 <_sbrk_r+0x14>
  409658:	602b      	str	r3, [r5, #0]
  40965a:	bd38      	pop	{r3, r4, r5, pc}
  40965c:	2040c600 	.word	0x2040c600

00409660 <sprintf>:
  409660:	b40e      	push	{r1, r2, r3}
  409662:	b5f0      	push	{r4, r5, r6, r7, lr}
  409664:	b09c      	sub	sp, #112	; 0x70
  409666:	4b10      	ldr	r3, [pc, #64]	; (4096a8 <sprintf+0x48>)
  409668:	4606      	mov	r6, r0
  40966a:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40966e:	ac21      	add	r4, sp, #132	; 0x84
  409670:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  409674:	f64f 77ff 	movw	r7, #65535	; 0xffff
  409678:	6818      	ldr	r0, [r3, #0]
  40967a:	f854 2b04 	ldr.w	r2, [r4], #4
  40967e:	a902      	add	r1, sp, #8
  409680:	9602      	str	r6, [sp, #8]
  409682:	4623      	mov	r3, r4
  409684:	9606      	str	r6, [sp, #24]
  409686:	9401      	str	r4, [sp, #4]
  409688:	f8ad e014 	strh.w	lr, [sp, #20]
  40968c:	9504      	str	r5, [sp, #16]
  40968e:	9507      	str	r5, [sp, #28]
  409690:	f8ad 7016 	strh.w	r7, [sp, #22]
  409694:	f000 fa84 	bl	409ba0 <_svfprintf_r>
  409698:	9b02      	ldr	r3, [sp, #8]
  40969a:	2200      	movs	r2, #0
  40969c:	701a      	strb	r2, [r3, #0]
  40969e:	b01c      	add	sp, #112	; 0x70
  4096a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4096a4:	b003      	add	sp, #12
  4096a6:	4770      	bx	lr
  4096a8:	20400448 	.word	0x20400448
	...
  4096c0:	eba2 0003 	sub.w	r0, r2, r3
  4096c4:	4770      	bx	lr
  4096c6:	bf00      	nop

004096c8 <strcmp>:
  4096c8:	7802      	ldrb	r2, [r0, #0]
  4096ca:	780b      	ldrb	r3, [r1, #0]
  4096cc:	2a01      	cmp	r2, #1
  4096ce:	bf28      	it	cs
  4096d0:	429a      	cmpcs	r2, r3
  4096d2:	d1f5      	bne.n	4096c0 <sprintf+0x60>
  4096d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4096d8:	ea40 0401 	orr.w	r4, r0, r1
  4096dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4096e0:	f06f 0c00 	mvn.w	ip, #0
  4096e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4096e8:	b312      	cbz	r2, 409730 <strcmp+0x68>
  4096ea:	ea80 0401 	eor.w	r4, r0, r1
  4096ee:	f014 0f07 	tst.w	r4, #7
  4096f2:	d16a      	bne.n	4097ca <strcmp+0x102>
  4096f4:	f000 0407 	and.w	r4, r0, #7
  4096f8:	f020 0007 	bic.w	r0, r0, #7
  4096fc:	f004 0503 	and.w	r5, r4, #3
  409700:	f021 0107 	bic.w	r1, r1, #7
  409704:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  409708:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40970c:	f014 0f04 	tst.w	r4, #4
  409710:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  409714:	fa0c f405 	lsl.w	r4, ip, r5
  409718:	ea62 0204 	orn	r2, r2, r4
  40971c:	ea66 0604 	orn	r6, r6, r4
  409720:	d00a      	beq.n	409738 <strcmp+0x70>
  409722:	ea63 0304 	orn	r3, r3, r4
  409726:	4662      	mov	r2, ip
  409728:	ea67 0704 	orn	r7, r7, r4
  40972c:	4666      	mov	r6, ip
  40972e:	e003      	b.n	409738 <strcmp+0x70>
  409730:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  409734:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  409738:	fa82 f54c 	uadd8	r5, r2, ip
  40973c:	ea82 0406 	eor.w	r4, r2, r6
  409740:	faa4 f48c 	sel	r4, r4, ip
  409744:	bb6c      	cbnz	r4, 4097a2 <strcmp+0xda>
  409746:	fa83 f54c 	uadd8	r5, r3, ip
  40974a:	ea83 0507 	eor.w	r5, r3, r7
  40974e:	faa5 f58c 	sel	r5, r5, ip
  409752:	b995      	cbnz	r5, 40977a <strcmp+0xb2>
  409754:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  409758:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40975c:	fa82 f54c 	uadd8	r5, r2, ip
  409760:	ea82 0406 	eor.w	r4, r2, r6
  409764:	faa4 f48c 	sel	r4, r4, ip
  409768:	fa83 f54c 	uadd8	r5, r3, ip
  40976c:	ea83 0507 	eor.w	r5, r3, r7
  409770:	faa5 f58c 	sel	r5, r5, ip
  409774:	4325      	orrs	r5, r4
  409776:	d0db      	beq.n	409730 <strcmp+0x68>
  409778:	b99c      	cbnz	r4, 4097a2 <strcmp+0xda>
  40977a:	ba2d      	rev	r5, r5
  40977c:	fab5 f485 	clz	r4, r5
  409780:	f024 0407 	bic.w	r4, r4, #7
  409784:	fa27 f104 	lsr.w	r1, r7, r4
  409788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40978c:	fa23 f304 	lsr.w	r3, r3, r4
  409790:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  409794:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409798:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40979c:	eba0 0001 	sub.w	r0, r0, r1
  4097a0:	4770      	bx	lr
  4097a2:	ba24      	rev	r4, r4
  4097a4:	fab4 f484 	clz	r4, r4
  4097a8:	f024 0407 	bic.w	r4, r4, #7
  4097ac:	fa26 f104 	lsr.w	r1, r6, r4
  4097b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4097b4:	fa22 f204 	lsr.w	r2, r2, r4
  4097b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4097bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4097c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4097c4:	eba0 0001 	sub.w	r0, r0, r1
  4097c8:	4770      	bx	lr
  4097ca:	f014 0f03 	tst.w	r4, #3
  4097ce:	d13c      	bne.n	40984a <strcmp+0x182>
  4097d0:	f010 0403 	ands.w	r4, r0, #3
  4097d4:	d128      	bne.n	409828 <strcmp+0x160>
  4097d6:	f850 2b08 	ldr.w	r2, [r0], #8
  4097da:	f851 3b08 	ldr.w	r3, [r1], #8
  4097de:	fa82 f54c 	uadd8	r5, r2, ip
  4097e2:	ea82 0503 	eor.w	r5, r2, r3
  4097e6:	faa5 f58c 	sel	r5, r5, ip
  4097ea:	b95d      	cbnz	r5, 409804 <strcmp+0x13c>
  4097ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4097f4:	fa82 f54c 	uadd8	r5, r2, ip
  4097f8:	ea82 0503 	eor.w	r5, r2, r3
  4097fc:	faa5 f58c 	sel	r5, r5, ip
  409800:	2d00      	cmp	r5, #0
  409802:	d0e8      	beq.n	4097d6 <strcmp+0x10e>
  409804:	ba2d      	rev	r5, r5
  409806:	fab5 f485 	clz	r4, r5
  40980a:	f024 0407 	bic.w	r4, r4, #7
  40980e:	fa23 f104 	lsr.w	r1, r3, r4
  409812:	fa22 f204 	lsr.w	r2, r2, r4
  409816:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40981a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40981e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409822:	eba0 0001 	sub.w	r0, r0, r1
  409826:	4770      	bx	lr
  409828:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40982c:	f020 0003 	bic.w	r0, r0, #3
  409830:	f850 2b08 	ldr.w	r2, [r0], #8
  409834:	f021 0103 	bic.w	r1, r1, #3
  409838:	f851 3b08 	ldr.w	r3, [r1], #8
  40983c:	fa0c f404 	lsl.w	r4, ip, r4
  409840:	ea62 0204 	orn	r2, r2, r4
  409844:	ea63 0304 	orn	r3, r3, r4
  409848:	e7c9      	b.n	4097de <strcmp+0x116>
  40984a:	f010 0403 	ands.w	r4, r0, #3
  40984e:	d01a      	beq.n	409886 <strcmp+0x1be>
  409850:	eba1 0104 	sub.w	r1, r1, r4
  409854:	f020 0003 	bic.w	r0, r0, #3
  409858:	07e4      	lsls	r4, r4, #31
  40985a:	f850 2b04 	ldr.w	r2, [r0], #4
  40985e:	d006      	beq.n	40986e <strcmp+0x1a6>
  409860:	d20f      	bcs.n	409882 <strcmp+0x1ba>
  409862:	788b      	ldrb	r3, [r1, #2]
  409864:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  409868:	1ae4      	subs	r4, r4, r3
  40986a:	d106      	bne.n	40987a <strcmp+0x1b2>
  40986c:	b12b      	cbz	r3, 40987a <strcmp+0x1b2>
  40986e:	78cb      	ldrb	r3, [r1, #3]
  409870:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  409874:	1ae4      	subs	r4, r4, r3
  409876:	d100      	bne.n	40987a <strcmp+0x1b2>
  409878:	b91b      	cbnz	r3, 409882 <strcmp+0x1ba>
  40987a:	4620      	mov	r0, r4
  40987c:	f85d 4b10 	ldr.w	r4, [sp], #16
  409880:	4770      	bx	lr
  409882:	f101 0104 	add.w	r1, r1, #4
  409886:	f850 2b04 	ldr.w	r2, [r0], #4
  40988a:	07cc      	lsls	r4, r1, #31
  40988c:	f021 0103 	bic.w	r1, r1, #3
  409890:	f851 3b04 	ldr.w	r3, [r1], #4
  409894:	d848      	bhi.n	409928 <strcmp+0x260>
  409896:	d224      	bcs.n	4098e2 <strcmp+0x21a>
  409898:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40989c:	fa82 f54c 	uadd8	r5, r2, ip
  4098a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4098a4:	faa5 f58c 	sel	r5, r5, ip
  4098a8:	d10a      	bne.n	4098c0 <strcmp+0x1f8>
  4098aa:	b965      	cbnz	r5, 4098c6 <strcmp+0x1fe>
  4098ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4098b0:	ea84 0402 	eor.w	r4, r4, r2
  4098b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4098b8:	d10e      	bne.n	4098d8 <strcmp+0x210>
  4098ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4098be:	e7eb      	b.n	409898 <strcmp+0x1d0>
  4098c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4098c4:	e055      	b.n	409972 <strcmp+0x2aa>
  4098c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4098ca:	d14d      	bne.n	409968 <strcmp+0x2a0>
  4098cc:	7808      	ldrb	r0, [r1, #0]
  4098ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4098d2:	f1c0 0000 	rsb	r0, r0, #0
  4098d6:	4770      	bx	lr
  4098d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4098dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4098e0:	e047      	b.n	409972 <strcmp+0x2aa>
  4098e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4098e6:	fa82 f54c 	uadd8	r5, r2, ip
  4098ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4098ee:	faa5 f58c 	sel	r5, r5, ip
  4098f2:	d10a      	bne.n	40990a <strcmp+0x242>
  4098f4:	b965      	cbnz	r5, 409910 <strcmp+0x248>
  4098f6:	f851 3b04 	ldr.w	r3, [r1], #4
  4098fa:	ea84 0402 	eor.w	r4, r4, r2
  4098fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  409902:	d10c      	bne.n	40991e <strcmp+0x256>
  409904:	f850 2b04 	ldr.w	r2, [r0], #4
  409908:	e7eb      	b.n	4098e2 <strcmp+0x21a>
  40990a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40990e:	e030      	b.n	409972 <strcmp+0x2aa>
  409910:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  409914:	d128      	bne.n	409968 <strcmp+0x2a0>
  409916:	880b      	ldrh	r3, [r1, #0]
  409918:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40991c:	e029      	b.n	409972 <strcmp+0x2aa>
  40991e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409922:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  409926:	e024      	b.n	409972 <strcmp+0x2aa>
  409928:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40992c:	fa82 f54c 	uadd8	r5, r2, ip
  409930:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  409934:	faa5 f58c 	sel	r5, r5, ip
  409938:	d10a      	bne.n	409950 <strcmp+0x288>
  40993a:	b965      	cbnz	r5, 409956 <strcmp+0x28e>
  40993c:	f851 3b04 	ldr.w	r3, [r1], #4
  409940:	ea84 0402 	eor.w	r4, r4, r2
  409944:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  409948:	d109      	bne.n	40995e <strcmp+0x296>
  40994a:	f850 2b04 	ldr.w	r2, [r0], #4
  40994e:	e7eb      	b.n	409928 <strcmp+0x260>
  409950:	ea4f 6313 	mov.w	r3, r3, lsr #24
  409954:	e00d      	b.n	409972 <strcmp+0x2aa>
  409956:	f015 0fff 	tst.w	r5, #255	; 0xff
  40995a:	d105      	bne.n	409968 <strcmp+0x2a0>
  40995c:	680b      	ldr	r3, [r1, #0]
  40995e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  409962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  409966:	e004      	b.n	409972 <strcmp+0x2aa>
  409968:	f04f 0000 	mov.w	r0, #0
  40996c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409970:	4770      	bx	lr
  409972:	ba12      	rev	r2, r2
  409974:	ba1b      	rev	r3, r3
  409976:	fa82 f44c 	uadd8	r4, r2, ip
  40997a:	ea82 0403 	eor.w	r4, r2, r3
  40997e:	faa4 f58c 	sel	r5, r4, ip
  409982:	fab5 f485 	clz	r4, r5
  409986:	fa02 f204 	lsl.w	r2, r2, r4
  40998a:	fa03 f304 	lsl.w	r3, r3, r4
  40998e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  409992:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  409996:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40999a:	4770      	bx	lr

0040999c <strlen>:
  40999c:	f020 0103 	bic.w	r1, r0, #3
  4099a0:	f010 0003 	ands.w	r0, r0, #3
  4099a4:	f1c0 0000 	rsb	r0, r0, #0
  4099a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4099ac:	f100 0c04 	add.w	ip, r0, #4
  4099b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4099b4:	f06f 0200 	mvn.w	r2, #0
  4099b8:	bf1c      	itt	ne
  4099ba:	fa22 f20c 	lsrne.w	r2, r2, ip
  4099be:	4313      	orrne	r3, r2
  4099c0:	f04f 0c01 	mov.w	ip, #1
  4099c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4099c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4099cc:	eba3 020c 	sub.w	r2, r3, ip
  4099d0:	ea22 0203 	bic.w	r2, r2, r3
  4099d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4099d8:	bf04      	itt	eq
  4099da:	f851 3b04 	ldreq.w	r3, [r1], #4
  4099de:	3004      	addeq	r0, #4
  4099e0:	d0f4      	beq.n	4099cc <strlen+0x30>
  4099e2:	f1c2 0100 	rsb	r1, r2, #0
  4099e6:	ea02 0201 	and.w	r2, r2, r1
  4099ea:	fab2 f282 	clz	r2, r2
  4099ee:	f1c2 021f 	rsb	r2, r2, #31
  4099f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4099f6:	4770      	bx	lr

004099f8 <strtok>:
  4099f8:	4a02      	ldr	r2, [pc, #8]	; (409a04 <strtok+0xc>)
  4099fa:	2301      	movs	r3, #1
  4099fc:	6812      	ldr	r2, [r2, #0]
  4099fe:	325c      	adds	r2, #92	; 0x5c
  409a00:	f000 b802 	b.w	409a08 <__strtok_r>
  409a04:	20400448 	.word	0x20400448

00409a08 <__strtok_r>:
  409a08:	b4f0      	push	{r4, r5, r6, r7}
  409a0a:	b320      	cbz	r0, 409a56 <__strtok_r+0x4e>
  409a0c:	4607      	mov	r7, r0
  409a0e:	460d      	mov	r5, r1
  409a10:	f817 6b01 	ldrb.w	r6, [r7], #1
  409a14:	e001      	b.n	409a1a <__strtok_r+0x12>
  409a16:	42a6      	cmp	r6, r4
  409a18:	d016      	beq.n	409a48 <__strtok_r+0x40>
  409a1a:	f815 4b01 	ldrb.w	r4, [r5], #1
  409a1e:	2c00      	cmp	r4, #0
  409a20:	d1f9      	bne.n	409a16 <__strtok_r+0xe>
  409a22:	b1ee      	cbz	r6, 409a60 <__strtok_r+0x58>
  409a24:	463e      	mov	r6, r7
  409a26:	460c      	mov	r4, r1
  409a28:	f816 5b01 	ldrb.w	r5, [r6], #1
  409a2c:	e000      	b.n	409a30 <__strtok_r+0x28>
  409a2e:	b173      	cbz	r3, 409a4e <__strtok_r+0x46>
  409a30:	f814 3b01 	ldrb.w	r3, [r4], #1
  409a34:	42ab      	cmp	r3, r5
  409a36:	d1fa      	bne.n	409a2e <__strtok_r+0x26>
  409a38:	b15d      	cbz	r5, 409a52 <__strtok_r+0x4a>
  409a3a:	2300      	movs	r3, #0
  409a3c:	703b      	strb	r3, [r7, #0]
  409a3e:	6016      	str	r6, [r2, #0]
  409a40:	4606      	mov	r6, r0
  409a42:	4630      	mov	r0, r6
  409a44:	bcf0      	pop	{r4, r5, r6, r7}
  409a46:	4770      	bx	lr
  409a48:	b163      	cbz	r3, 409a64 <__strtok_r+0x5c>
  409a4a:	4638      	mov	r0, r7
  409a4c:	e7de      	b.n	409a0c <__strtok_r+0x4>
  409a4e:	4637      	mov	r7, r6
  409a50:	e7e8      	b.n	409a24 <__strtok_r+0x1c>
  409a52:	462e      	mov	r6, r5
  409a54:	e7f3      	b.n	409a3e <__strtok_r+0x36>
  409a56:	6810      	ldr	r0, [r2, #0]
  409a58:	2800      	cmp	r0, #0
  409a5a:	d1d7      	bne.n	409a0c <__strtok_r+0x4>
  409a5c:	4606      	mov	r6, r0
  409a5e:	e7f0      	b.n	409a42 <__strtok_r+0x3a>
  409a60:	6016      	str	r6, [r2, #0]
  409a62:	e7ee      	b.n	409a42 <__strtok_r+0x3a>
  409a64:	6017      	str	r7, [r2, #0]
  409a66:	4606      	mov	r6, r0
  409a68:	7003      	strb	r3, [r0, #0]
  409a6a:	e7ea      	b.n	409a42 <__strtok_r+0x3a>

00409a6c <_strtol_r>:
  409a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409a70:	4c44      	ldr	r4, [pc, #272]	; (409b84 <_strtol_r+0x118>)
  409a72:	4683      	mov	fp, r0
  409a74:	460e      	mov	r6, r1
  409a76:	f8d4 e000 	ldr.w	lr, [r4]
  409a7a:	e000      	b.n	409a7e <_strtol_r+0x12>
  409a7c:	4626      	mov	r6, r4
  409a7e:	4634      	mov	r4, r6
  409a80:	f814 5b01 	ldrb.w	r5, [r4], #1
  409a84:	eb0e 0005 	add.w	r0, lr, r5
  409a88:	7840      	ldrb	r0, [r0, #1]
  409a8a:	f000 0008 	and.w	r0, r0, #8
  409a8e:	f000 09ff 	and.w	r9, r0, #255	; 0xff
  409a92:	2800      	cmp	r0, #0
  409a94:	d1f2      	bne.n	409a7c <_strtol_r+0x10>
  409a96:	2d2d      	cmp	r5, #45	; 0x2d
  409a98:	d052      	beq.n	409b40 <_strtol_r+0xd4>
  409a9a:	2d2b      	cmp	r5, #43	; 0x2b
  409a9c:	d064      	beq.n	409b68 <_strtol_r+0xfc>
  409a9e:	f033 0010 	bics.w	r0, r3, #16
  409aa2:	d10b      	bne.n	409abc <_strtol_r+0x50>
  409aa4:	fab3 f083 	clz	r0, r3
  409aa8:	2d30      	cmp	r5, #48	; 0x30
  409aaa:	ea4f 1050 	mov.w	r0, r0, lsr #5
  409aae:	d05e      	beq.n	409b6e <_strtol_r+0x102>
  409ab0:	b120      	cbz	r0, 409abc <_strtol_r+0x50>
  409ab2:	230a      	movs	r3, #10
  409ab4:	4618      	mov	r0, r3
  409ab6:	e002      	b.n	409abe <_strtol_r+0x52>
  409ab8:	b100      	cbz	r0, 409abc <_strtol_r+0x50>
  409aba:	2308      	movs	r3, #8
  409abc:	4618      	mov	r0, r3
  409abe:	f1b9 0f00 	cmp.w	r9, #0
  409ac2:	f04f 0700 	mov.w	r7, #0
  409ac6:	bf14      	ite	ne
  409ac8:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  409acc:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  409ad0:	46bc      	mov	ip, r7
  409ad2:	fbba f8f0 	udiv	r8, sl, r0
  409ad6:	fb00 aa18 	mls	sl, r0, r8, sl
  409ada:	e00e      	b.n	409afa <_strtol_r+0x8e>
  409adc:	3d30      	subs	r5, #48	; 0x30
  409ade:	42ab      	cmp	r3, r5
  409ae0:	dd1b      	ble.n	409b1a <_strtol_r+0xae>
  409ae2:	2f00      	cmp	r7, #0
  409ae4:	db05      	blt.n	409af2 <_strtol_r+0x86>
  409ae6:	45c4      	cmp	ip, r8
  409ae8:	d803      	bhi.n	409af2 <_strtol_r+0x86>
  409aea:	4555      	cmp	r5, sl
  409aec:	dd22      	ble.n	409b34 <_strtol_r+0xc8>
  409aee:	45c4      	cmp	ip, r8
  409af0:	d120      	bne.n	409b34 <_strtol_r+0xc8>
  409af2:	f04f 37ff 	mov.w	r7, #4294967295
  409af6:	f814 5b01 	ldrb.w	r5, [r4], #1
  409afa:	eb0e 0605 	add.w	r6, lr, r5
  409afe:	7876      	ldrb	r6, [r6, #1]
  409b00:	f016 0f04 	tst.w	r6, #4
  409b04:	d1ea      	bne.n	409adc <_strtol_r+0x70>
  409b06:	f016 0603 	ands.w	r6, r6, #3
  409b0a:	d006      	beq.n	409b1a <_strtol_r+0xae>
  409b0c:	2e01      	cmp	r6, #1
  409b0e:	bf0c      	ite	eq
  409b10:	2637      	moveq	r6, #55	; 0x37
  409b12:	2657      	movne	r6, #87	; 0x57
  409b14:	1bad      	subs	r5, r5, r6
  409b16:	42ab      	cmp	r3, r5
  409b18:	dce3      	bgt.n	409ae2 <_strtol_r+0x76>
  409b1a:	1c7b      	adds	r3, r7, #1
  409b1c:	d015      	beq.n	409b4a <_strtol_r+0xde>
  409b1e:	f1c9 0000 	rsb	r0, r9, #0
  409b22:	ea8c 0000 	eor.w	r0, ip, r0
  409b26:	4448      	add	r0, r9
  409b28:	b142      	cbz	r2, 409b3c <_strtol_r+0xd0>
  409b2a:	b107      	cbz	r7, 409b2e <_strtol_r+0xc2>
  409b2c:	1e61      	subs	r1, r4, #1
  409b2e:	6011      	str	r1, [r2, #0]
  409b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b34:	fb00 5c0c 	mla	ip, r0, ip, r5
  409b38:	2701      	movs	r7, #1
  409b3a:	e7dc      	b.n	409af6 <_strtol_r+0x8a>
  409b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b40:	1cb4      	adds	r4, r6, #2
  409b42:	7875      	ldrb	r5, [r6, #1]
  409b44:	f04f 0901 	mov.w	r9, #1
  409b48:	e7a9      	b.n	409a9e <_strtol_r+0x32>
  409b4a:	f1b9 0f00 	cmp.w	r9, #0
  409b4e:	f04f 0322 	mov.w	r3, #34	; 0x22
  409b52:	bf14      	ite	ne
  409b54:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  409b58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409b5c:	f8cb 3000 	str.w	r3, [fp]
  409b60:	2a00      	cmp	r2, #0
  409b62:	d1e3      	bne.n	409b2c <_strtol_r+0xc0>
  409b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b68:	1cb4      	adds	r4, r6, #2
  409b6a:	7875      	ldrb	r5, [r6, #1]
  409b6c:	e797      	b.n	409a9e <_strtol_r+0x32>
  409b6e:	7826      	ldrb	r6, [r4, #0]
  409b70:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  409b74:	2e58      	cmp	r6, #88	; 0x58
  409b76:	d19f      	bne.n	409ab8 <_strtol_r+0x4c>
  409b78:	2310      	movs	r3, #16
  409b7a:	7865      	ldrb	r5, [r4, #1]
  409b7c:	3402      	adds	r4, #2
  409b7e:	4618      	mov	r0, r3
  409b80:	e79d      	b.n	409abe <_strtol_r+0x52>
  409b82:	bf00      	nop
  409b84:	2040085c 	.word	0x2040085c

00409b88 <strtol>:
  409b88:	b430      	push	{r4, r5}
  409b8a:	460d      	mov	r5, r1
  409b8c:	4c03      	ldr	r4, [pc, #12]	; (409b9c <strtol+0x14>)
  409b8e:	4613      	mov	r3, r2
  409b90:	4601      	mov	r1, r0
  409b92:	462a      	mov	r2, r5
  409b94:	6820      	ldr	r0, [r4, #0]
  409b96:	bc30      	pop	{r4, r5}
  409b98:	f7ff bf68 	b.w	409a6c <_strtol_r>
  409b9c:	20400448 	.word	0x20400448

00409ba0 <_svfprintf_r>:
  409ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ba4:	b0c1      	sub	sp, #260	; 0x104
  409ba6:	4689      	mov	r9, r1
  409ba8:	9208      	str	r2, [sp, #32]
  409baa:	930c      	str	r3, [sp, #48]	; 0x30
  409bac:	9009      	str	r0, [sp, #36]	; 0x24
  409bae:	f003 fe35 	bl	40d81c <_localeconv_r>
  409bb2:	6803      	ldr	r3, [r0, #0]
  409bb4:	4618      	mov	r0, r3
  409bb6:	9316      	str	r3, [sp, #88]	; 0x58
  409bb8:	f7ff fef0 	bl	40999c <strlen>
  409bbc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  409bc0:	9017      	str	r0, [sp, #92]	; 0x5c
  409bc2:	061d      	lsls	r5, r3, #24
  409bc4:	d504      	bpl.n	409bd0 <_svfprintf_r+0x30>
  409bc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
  409bca:	2b00      	cmp	r3, #0
  409bcc:	f001 8080 	beq.w	40acd0 <_svfprintf_r+0x1130>
  409bd0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  409bd4:	2300      	movs	r3, #0
  409bd6:	46c3      	mov	fp, r8
  409bd8:	9313      	str	r3, [sp, #76]	; 0x4c
  409bda:	9314      	str	r3, [sp, #80]	; 0x50
  409bdc:	9312      	str	r3, [sp, #72]	; 0x48
  409bde:	9315      	str	r3, [sp, #84]	; 0x54
  409be0:	9319      	str	r3, [sp, #100]	; 0x64
  409be2:	930a      	str	r3, [sp, #40]	; 0x28
  409be4:	9325      	str	r3, [sp, #148]	; 0x94
  409be6:	9324      	str	r3, [sp, #144]	; 0x90
  409be8:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  409bec:	9a08      	ldr	r2, [sp, #32]
  409bee:	7813      	ldrb	r3, [r2, #0]
  409bf0:	2b25      	cmp	r3, #37	; 0x25
  409bf2:	f000 80a6 	beq.w	409d42 <_svfprintf_r+0x1a2>
  409bf6:	b90b      	cbnz	r3, 409bfc <_svfprintf_r+0x5c>
  409bf8:	e0a3      	b.n	409d42 <_svfprintf_r+0x1a2>
  409bfa:	b11b      	cbz	r3, 409c04 <_svfprintf_r+0x64>
  409bfc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  409c00:	2b25      	cmp	r3, #37	; 0x25
  409c02:	d1fa      	bne.n	409bfa <_svfprintf_r+0x5a>
  409c04:	9908      	ldr	r1, [sp, #32]
  409c06:	4614      	mov	r4, r2
  409c08:	1a55      	subs	r5, r2, r1
  409c0a:	d010      	beq.n	409c2e <_svfprintf_r+0x8e>
  409c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409c10:	3301      	adds	r3, #1
  409c12:	f8cb 1000 	str.w	r1, [fp]
  409c16:	442a      	add	r2, r5
  409c18:	f8cb 5004 	str.w	r5, [fp, #4]
  409c1c:	2b07      	cmp	r3, #7
  409c1e:	9324      	str	r3, [sp, #144]	; 0x90
  409c20:	9225      	str	r2, [sp, #148]	; 0x94
  409c22:	dc73      	bgt.n	409d0c <_svfprintf_r+0x16c>
  409c24:	f10b 0b08 	add.w	fp, fp, #8
  409c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409c2a:	442b      	add	r3, r5
  409c2c:	930a      	str	r3, [sp, #40]	; 0x28
  409c2e:	7823      	ldrb	r3, [r4, #0]
  409c30:	2b00      	cmp	r3, #0
  409c32:	d073      	beq.n	409d1c <_svfprintf_r+0x17c>
  409c34:	2300      	movs	r3, #0
  409c36:	f04f 3cff 	mov.w	ip, #4294967295
  409c3a:	1c61      	adds	r1, r4, #1
  409c3c:	7866      	ldrb	r6, [r4, #1]
  409c3e:	461a      	mov	r2, r3
  409c40:	4664      	mov	r4, ip
  409c42:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409c46:	930b      	str	r3, [sp, #44]	; 0x2c
  409c48:	9306      	str	r3, [sp, #24]
  409c4a:	1c4b      	adds	r3, r1, #1
  409c4c:	f1a6 0120 	sub.w	r1, r6, #32
  409c50:	2958      	cmp	r1, #88	; 0x58
  409c52:	f200 83b2 	bhi.w	40a3ba <_svfprintf_r+0x81a>
  409c56:	e8df f011 	tbh	[pc, r1, lsl #1]
  409c5a:	0319      	.short	0x0319
  409c5c:	03b003b0 	.word	0x03b003b0
  409c60:	03b00320 	.word	0x03b00320
  409c64:	03b003b0 	.word	0x03b003b0
  409c68:	03b003b0 	.word	0x03b003b0
  409c6c:	024003b0 	.word	0x024003b0
  409c70:	03b001fb 	.word	0x03b001fb
  409c74:	01ff01e2 	.word	0x01ff01e2
  409c78:	032703b0 	.word	0x032703b0
  409c7c:	032e032e 	.word	0x032e032e
  409c80:	032e032e 	.word	0x032e032e
  409c84:	032e032e 	.word	0x032e032e
  409c88:	032e032e 	.word	0x032e032e
  409c8c:	03b0032e 	.word	0x03b0032e
  409c90:	03b003b0 	.word	0x03b003b0
  409c94:	03b003b0 	.word	0x03b003b0
  409c98:	03b003b0 	.word	0x03b003b0
  409c9c:	03b003b0 	.word	0x03b003b0
  409ca0:	033d03b0 	.word	0x033d03b0
  409ca4:	03b00365 	.word	0x03b00365
  409ca8:	03b00365 	.word	0x03b00365
  409cac:	03b003b0 	.word	0x03b003b0
  409cb0:	02fe03b0 	.word	0x02fe03b0
  409cb4:	03b003b0 	.word	0x03b003b0
  409cb8:	03b00293 	.word	0x03b00293
  409cbc:	03b003b0 	.word	0x03b003b0
  409cc0:	03b003b0 	.word	0x03b003b0
  409cc4:	03b002b0 	.word	0x03b002b0
  409cc8:	02c603b0 	.word	0x02c603b0
  409ccc:	03b003b0 	.word	0x03b003b0
  409cd0:	03b003b0 	.word	0x03b003b0
  409cd4:	03b003b0 	.word	0x03b003b0
  409cd8:	03b003b0 	.word	0x03b003b0
  409cdc:	03b003b0 	.word	0x03b003b0
  409ce0:	021802eb 	.word	0x021802eb
  409ce4:	03650365 	.word	0x03650365
  409ce8:	024e0365 	.word	0x024e0365
  409cec:	03b00218 	.word	0x03b00218
  409cf0:	023603b0 	.word	0x023603b0
  409cf4:	026003b0 	.word	0x026003b0
  409cf8:	039901e9 	.word	0x039901e9
  409cfc:	03b00259 	.word	0x03b00259
  409d00:	03b00272 	.word	0x03b00272
  409d04:	03b00076 	.word	0x03b00076
  409d08:	030503b0 	.word	0x030503b0
  409d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
  409d0e:	4649      	mov	r1, r9
  409d10:	aa23      	add	r2, sp, #140	; 0x8c
  409d12:	f004 fc35 	bl	40e580 <__ssprint_r>
  409d16:	b940      	cbnz	r0, 409d2a <_svfprintf_r+0x18a>
  409d18:	46c3      	mov	fp, r8
  409d1a:	e785      	b.n	409c28 <_svfprintf_r+0x88>
  409d1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409d1e:	b123      	cbz	r3, 409d2a <_svfprintf_r+0x18a>
  409d20:	9809      	ldr	r0, [sp, #36]	; 0x24
  409d22:	4649      	mov	r1, r9
  409d24:	aa23      	add	r2, sp, #140	; 0x8c
  409d26:	f004 fc2b 	bl	40e580 <__ssprint_r>
  409d2a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  409d2e:	f013 0f40 	tst.w	r3, #64	; 0x40
  409d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409d34:	bf18      	it	ne
  409d36:	f04f 33ff 	movne.w	r3, #4294967295
  409d3a:	4618      	mov	r0, r3
  409d3c:	b041      	add	sp, #260	; 0x104
  409d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d42:	9c08      	ldr	r4, [sp, #32]
  409d44:	e773      	b.n	409c2e <_svfprintf_r+0x8e>
  409d46:	9308      	str	r3, [sp, #32]
  409d48:	46a4      	mov	ip, r4
  409d4a:	9b06      	ldr	r3, [sp, #24]
  409d4c:	0698      	lsls	r0, r3, #26
  409d4e:	f140 823e 	bpl.w	40a1ce <_svfprintf_r+0x62e>
  409d52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409d54:	2301      	movs	r3, #1
  409d56:	3707      	adds	r7, #7
  409d58:	f027 0207 	bic.w	r2, r7, #7
  409d5c:	f102 0108 	add.w	r1, r2, #8
  409d60:	e9d2 4500 	ldrd	r4, r5, [r2]
  409d64:	910c      	str	r1, [sp, #48]	; 0x30
  409d66:	2200      	movs	r2, #0
  409d68:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  409d6c:	4617      	mov	r7, r2
  409d6e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  409d72:	f1bc 0f00 	cmp.w	ip, #0
  409d76:	db03      	blt.n	409d80 <_svfprintf_r+0x1e0>
  409d78:	9a06      	ldr	r2, [sp, #24]
  409d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  409d7e:	9206      	str	r2, [sp, #24]
  409d80:	f1bc 0f00 	cmp.w	ip, #0
  409d84:	f040 83ac 	bne.w	40a4e0 <_svfprintf_r+0x940>
  409d88:	ea54 0205 	orrs.w	r2, r4, r5
  409d8c:	bf14      	ite	ne
  409d8e:	2201      	movne	r2, #1
  409d90:	2200      	moveq	r2, #0
  409d92:	2a00      	cmp	r2, #0
  409d94:	f040 83a4 	bne.w	40a4e0 <_svfprintf_r+0x940>
  409d98:	2b00      	cmp	r3, #0
  409d9a:	f040 8460 	bne.w	40a65e <_svfprintf_r+0xabe>
  409d9e:	9a06      	ldr	r2, [sp, #24]
  409da0:	07d2      	lsls	r2, r2, #31
  409da2:	f140 84fd 	bpl.w	40a7a0 <_svfprintf_r+0xc00>
  409da6:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  409daa:	2330      	movs	r3, #48	; 0x30
  409dac:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  409db0:	ebca 0408 	rsb	r4, sl, r8
  409db4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  409db8:	45a4      	cmp	ip, r4
  409dba:	4663      	mov	r3, ip
  409dbc:	bfb8      	it	lt
  409dbe:	4623      	movlt	r3, r4
  409dc0:	9307      	str	r3, [sp, #28]
  409dc2:	2300      	movs	r3, #0
  409dc4:	9311      	str	r3, [sp, #68]	; 0x44
  409dc6:	b117      	cbz	r7, 409dce <_svfprintf_r+0x22e>
  409dc8:	9b07      	ldr	r3, [sp, #28]
  409dca:	3301      	adds	r3, #1
  409dcc:	9307      	str	r3, [sp, #28]
  409dce:	9b06      	ldr	r3, [sp, #24]
  409dd0:	f013 0302 	ands.w	r3, r3, #2
  409dd4:	930d      	str	r3, [sp, #52]	; 0x34
  409dd6:	d002      	beq.n	409dde <_svfprintf_r+0x23e>
  409dd8:	9b07      	ldr	r3, [sp, #28]
  409dda:	3302      	adds	r3, #2
  409ddc:	9307      	str	r3, [sp, #28]
  409dde:	9b06      	ldr	r3, [sp, #24]
  409de0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  409de4:	930e      	str	r3, [sp, #56]	; 0x38
  409de6:	f040 8307 	bne.w	40a3f8 <_svfprintf_r+0x858>
  409dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409dec:	9a07      	ldr	r2, [sp, #28]
  409dee:	ebc2 0a03 	rsb	sl, r2, r3
  409df2:	f1ba 0f00 	cmp.w	sl, #0
  409df6:	f340 82ff 	ble.w	40a3f8 <_svfprintf_r+0x858>
  409dfa:	f1ba 0f10 	cmp.w	sl, #16
  409dfe:	9925      	ldr	r1, [sp, #148]	; 0x94
  409e00:	f340 87dd 	ble.w	40adbe <_svfprintf_r+0x121e>
  409e04:	4fbf      	ldr	r7, [pc, #764]	; (40a104 <_svfprintf_r+0x564>)
  409e06:	2510      	movs	r5, #16
  409e08:	9618      	str	r6, [sp, #96]	; 0x60
  409e0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409e0c:	463e      	mov	r6, r7
  409e0e:	4627      	mov	r7, r4
  409e10:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409e12:	e004      	b.n	409e1e <_svfprintf_r+0x27e>
  409e14:	f1aa 0a10 	sub.w	sl, sl, #16
  409e18:	f1ba 0f10 	cmp.w	sl, #16
  409e1c:	dd1b      	ble.n	409e56 <_svfprintf_r+0x2b6>
  409e1e:	3201      	adds	r2, #1
  409e20:	3110      	adds	r1, #16
  409e22:	f8cb 6000 	str.w	r6, [fp]
  409e26:	f10b 0b08 	add.w	fp, fp, #8
  409e2a:	2a07      	cmp	r2, #7
  409e2c:	f84b 5c04 	str.w	r5, [fp, #-4]
  409e30:	9125      	str	r1, [sp, #148]	; 0x94
  409e32:	9224      	str	r2, [sp, #144]	; 0x90
  409e34:	ddee      	ble.n	409e14 <_svfprintf_r+0x274>
  409e36:	4620      	mov	r0, r4
  409e38:	4649      	mov	r1, r9
  409e3a:	aa23      	add	r2, sp, #140	; 0x8c
  409e3c:	46c3      	mov	fp, r8
  409e3e:	f004 fb9f 	bl	40e580 <__ssprint_r>
  409e42:	2800      	cmp	r0, #0
  409e44:	f47f af71 	bne.w	409d2a <_svfprintf_r+0x18a>
  409e48:	f1aa 0a10 	sub.w	sl, sl, #16
  409e4c:	9925      	ldr	r1, [sp, #148]	; 0x94
  409e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409e50:	f1ba 0f10 	cmp.w	sl, #16
  409e54:	dce3      	bgt.n	409e1e <_svfprintf_r+0x27e>
  409e56:	463c      	mov	r4, r7
  409e58:	4637      	mov	r7, r6
  409e5a:	9e18      	ldr	r6, [sp, #96]	; 0x60
  409e5c:	3201      	adds	r2, #1
  409e5e:	eb0a 0c01 	add.w	ip, sl, r1
  409e62:	f8cb 7000 	str.w	r7, [fp]
  409e66:	2a07      	cmp	r2, #7
  409e68:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409e6c:	9224      	str	r2, [sp, #144]	; 0x90
  409e6e:	f8cb a004 	str.w	sl, [fp, #4]
  409e72:	f300 82b6 	bgt.w	40a3e2 <_svfprintf_r+0x842>
  409e76:	f10b 0b08 	add.w	fp, fp, #8
  409e7a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409e7e:	b197      	cbz	r7, 409ea6 <_svfprintf_r+0x306>
  409e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e82:	2201      	movs	r2, #1
  409e84:	f10c 0c01 	add.w	ip, ip, #1
  409e88:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409e8c:	4413      	add	r3, r2
  409e8e:	f8cb 2004 	str.w	r2, [fp, #4]
  409e92:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409e96:	2b07      	cmp	r3, #7
  409e98:	f8cb 1000 	str.w	r1, [fp]
  409e9c:	9324      	str	r3, [sp, #144]	; 0x90
  409e9e:	f300 83fb 	bgt.w	40a698 <_svfprintf_r+0xaf8>
  409ea2:	f10b 0b08 	add.w	fp, fp, #8
  409ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409ea8:	b18b      	cbz	r3, 409ece <_svfprintf_r+0x32e>
  409eaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409eac:	f10c 0c02 	add.w	ip, ip, #2
  409eb0:	a91c      	add	r1, sp, #112	; 0x70
  409eb2:	2202      	movs	r2, #2
  409eb4:	3301      	adds	r3, #1
  409eb6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409eba:	f8cb 1000 	str.w	r1, [fp]
  409ebe:	2b07      	cmp	r3, #7
  409ec0:	9324      	str	r3, [sp, #144]	; 0x90
  409ec2:	f8cb 2004 	str.w	r2, [fp, #4]
  409ec6:	f300 83db 	bgt.w	40a680 <_svfprintf_r+0xae0>
  409eca:	f10b 0b08 	add.w	fp, fp, #8
  409ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409ed0:	2b80      	cmp	r3, #128	; 0x80
  409ed2:	f000 8321 	beq.w	40a518 <_svfprintf_r+0x978>
  409ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409ed8:	1b1f      	subs	r7, r3, r4
  409eda:	2f00      	cmp	r7, #0
  409edc:	dd37      	ble.n	409f4e <_svfprintf_r+0x3ae>
  409ede:	2f10      	cmp	r7, #16
  409ee0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409ee2:	f340 85ec 	ble.w	40aabe <_svfprintf_r+0xf1e>
  409ee6:	940d      	str	r4, [sp, #52]	; 0x34
  409ee8:	f04f 0a10 	mov.w	sl, #16
  409eec:	4d86      	ldr	r5, [pc, #536]	; (40a108 <_svfprintf_r+0x568>)
  409eee:	4662      	mov	r2, ip
  409ef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409ef2:	e002      	b.n	409efa <_svfprintf_r+0x35a>
  409ef4:	3f10      	subs	r7, #16
  409ef6:	2f10      	cmp	r7, #16
  409ef8:	dd19      	ble.n	409f2e <_svfprintf_r+0x38e>
  409efa:	3301      	adds	r3, #1
  409efc:	3210      	adds	r2, #16
  409efe:	f8cb 5000 	str.w	r5, [fp]
  409f02:	f10b 0b08 	add.w	fp, fp, #8
  409f06:	2b07      	cmp	r3, #7
  409f08:	f84b ac04 	str.w	sl, [fp, #-4]
  409f0c:	9225      	str	r2, [sp, #148]	; 0x94
  409f0e:	9324      	str	r3, [sp, #144]	; 0x90
  409f10:	ddf0      	ble.n	409ef4 <_svfprintf_r+0x354>
  409f12:	4620      	mov	r0, r4
  409f14:	4649      	mov	r1, r9
  409f16:	aa23      	add	r2, sp, #140	; 0x8c
  409f18:	46c3      	mov	fp, r8
  409f1a:	f004 fb31 	bl	40e580 <__ssprint_r>
  409f1e:	2800      	cmp	r0, #0
  409f20:	f47f af03 	bne.w	409d2a <_svfprintf_r+0x18a>
  409f24:	3f10      	subs	r7, #16
  409f26:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f2a:	2f10      	cmp	r7, #16
  409f2c:	dce5      	bgt.n	409efa <_svfprintf_r+0x35a>
  409f2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  409f30:	4694      	mov	ip, r2
  409f32:	3301      	adds	r3, #1
  409f34:	44bc      	add	ip, r7
  409f36:	f8cb 5000 	str.w	r5, [fp]
  409f3a:	2b07      	cmp	r3, #7
  409f3c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409f40:	9324      	str	r3, [sp, #144]	; 0x90
  409f42:	f8cb 7004 	str.w	r7, [fp, #4]
  409f46:	f300 838f 	bgt.w	40a668 <_svfprintf_r+0xac8>
  409f4a:	f10b 0b08 	add.w	fp, fp, #8
  409f4e:	9b06      	ldr	r3, [sp, #24]
  409f50:	05df      	lsls	r7, r3, #23
  409f52:	f100 8254 	bmi.w	40a3fe <_svfprintf_r+0x85e>
  409f56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f58:	44a4      	add	ip, r4
  409f5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409f5c:	3301      	adds	r3, #1
  409f5e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409f62:	f8cb 2000 	str.w	r2, [fp]
  409f66:	2b07      	cmp	r3, #7
  409f68:	f8cb 4004 	str.w	r4, [fp, #4]
  409f6c:	9324      	str	r3, [sp, #144]	; 0x90
  409f6e:	f300 8360 	bgt.w	40a632 <_svfprintf_r+0xa92>
  409f72:	f10b 0b08 	add.w	fp, fp, #8
  409f76:	9b06      	ldr	r3, [sp, #24]
  409f78:	075a      	lsls	r2, r3, #29
  409f7a:	d540      	bpl.n	409ffe <_svfprintf_r+0x45e>
  409f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409f7e:	9a07      	ldr	r2, [sp, #28]
  409f80:	1a9c      	subs	r4, r3, r2
  409f82:	2c00      	cmp	r4, #0
  409f84:	dd3b      	ble.n	409ffe <_svfprintf_r+0x45e>
  409f86:	2c10      	cmp	r4, #16
  409f88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f8a:	f340 876b 	ble.w	40ae64 <_svfprintf_r+0x12c4>
  409f8e:	2510      	movs	r5, #16
  409f90:	4f5c      	ldr	r7, [pc, #368]	; (40a104 <_svfprintf_r+0x564>)
  409f92:	4662      	mov	r2, ip
  409f94:	9e09      	ldr	r6, [sp, #36]	; 0x24
  409f96:	e002      	b.n	409f9e <_svfprintf_r+0x3fe>
  409f98:	3c10      	subs	r4, #16
  409f9a:	2c10      	cmp	r4, #16
  409f9c:	dd19      	ble.n	409fd2 <_svfprintf_r+0x432>
  409f9e:	3301      	adds	r3, #1
  409fa0:	3210      	adds	r2, #16
  409fa2:	f8cb 7000 	str.w	r7, [fp]
  409fa6:	f10b 0b08 	add.w	fp, fp, #8
  409faa:	2b07      	cmp	r3, #7
  409fac:	f84b 5c04 	str.w	r5, [fp, #-4]
  409fb0:	9225      	str	r2, [sp, #148]	; 0x94
  409fb2:	9324      	str	r3, [sp, #144]	; 0x90
  409fb4:	ddf0      	ble.n	409f98 <_svfprintf_r+0x3f8>
  409fb6:	4630      	mov	r0, r6
  409fb8:	4649      	mov	r1, r9
  409fba:	aa23      	add	r2, sp, #140	; 0x8c
  409fbc:	46c3      	mov	fp, r8
  409fbe:	f004 fadf 	bl	40e580 <__ssprint_r>
  409fc2:	2800      	cmp	r0, #0
  409fc4:	f47f aeb1 	bne.w	409d2a <_svfprintf_r+0x18a>
  409fc8:	3c10      	subs	r4, #16
  409fca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409fcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409fce:	2c10      	cmp	r4, #16
  409fd0:	dce5      	bgt.n	409f9e <_svfprintf_r+0x3fe>
  409fd2:	4694      	mov	ip, r2
  409fd4:	3301      	adds	r3, #1
  409fd6:	44a4      	add	ip, r4
  409fd8:	f8cb 7000 	str.w	r7, [fp]
  409fdc:	2b07      	cmp	r3, #7
  409fde:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  409fe2:	9324      	str	r3, [sp, #144]	; 0x90
  409fe4:	f8cb 4004 	str.w	r4, [fp, #4]
  409fe8:	dd09      	ble.n	409ffe <_svfprintf_r+0x45e>
  409fea:	9809      	ldr	r0, [sp, #36]	; 0x24
  409fec:	4649      	mov	r1, r9
  409fee:	aa23      	add	r2, sp, #140	; 0x8c
  409ff0:	f004 fac6 	bl	40e580 <__ssprint_r>
  409ff4:	2800      	cmp	r0, #0
  409ff6:	f47f ae98 	bne.w	409d2a <_svfprintf_r+0x18a>
  409ffa:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  409ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a000:	9a07      	ldr	r2, [sp, #28]
  40a002:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a004:	428a      	cmp	r2, r1
  40a006:	bfac      	ite	ge
  40a008:	189b      	addge	r3, r3, r2
  40a00a:	185b      	addlt	r3, r3, r1
  40a00c:	930a      	str	r3, [sp, #40]	; 0x28
  40a00e:	f1bc 0f00 	cmp.w	ip, #0
  40a012:	f040 831a 	bne.w	40a64a <_svfprintf_r+0xaaa>
  40a016:	2300      	movs	r3, #0
  40a018:	46c3      	mov	fp, r8
  40a01a:	9324      	str	r3, [sp, #144]	; 0x90
  40a01c:	e5e6      	b.n	409bec <_svfprintf_r+0x4c>
  40a01e:	4619      	mov	r1, r3
  40a020:	9806      	ldr	r0, [sp, #24]
  40a022:	781e      	ldrb	r6, [r3, #0]
  40a024:	f040 0004 	orr.w	r0, r0, #4
  40a028:	9006      	str	r0, [sp, #24]
  40a02a:	e60e      	b.n	409c4a <_svfprintf_r+0xaa>
  40a02c:	9308      	str	r3, [sp, #32]
  40a02e:	46a4      	mov	ip, r4
  40a030:	9b06      	ldr	r3, [sp, #24]
  40a032:	f013 0320 	ands.w	r3, r3, #32
  40a036:	f000 80ae 	beq.w	40a196 <_svfprintf_r+0x5f6>
  40a03a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a03c:	2300      	movs	r3, #0
  40a03e:	3707      	adds	r7, #7
  40a040:	f027 0207 	bic.w	r2, r7, #7
  40a044:	f102 0108 	add.w	r1, r2, #8
  40a048:	e9d2 4500 	ldrd	r4, r5, [r2]
  40a04c:	910c      	str	r1, [sp, #48]	; 0x30
  40a04e:	e68a      	b.n	409d66 <_svfprintf_r+0x1c6>
  40a050:	781e      	ldrb	r6, [r3, #0]
  40a052:	4619      	mov	r1, r3
  40a054:	222b      	movs	r2, #43	; 0x2b
  40a056:	e5f8      	b.n	409c4a <_svfprintf_r+0xaa>
  40a058:	781e      	ldrb	r6, [r3, #0]
  40a05a:	1c59      	adds	r1, r3, #1
  40a05c:	2e2a      	cmp	r6, #42	; 0x2a
  40a05e:	f001 8006 	beq.w	40b06e <_svfprintf_r+0x14ce>
  40a062:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40a066:	460b      	mov	r3, r1
  40a068:	2400      	movs	r4, #0
  40a06a:	2809      	cmp	r0, #9
  40a06c:	f63f adee 	bhi.w	409c4c <_svfprintf_r+0xac>
  40a070:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40a074:	f813 6b01 	ldrb.w	r6, [r3], #1
  40a078:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40a07c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40a080:	2809      	cmp	r0, #9
  40a082:	d9f5      	bls.n	40a070 <_svfprintf_r+0x4d0>
  40a084:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40a088:	e5e0      	b.n	409c4c <_svfprintf_r+0xac>
  40a08a:	9308      	str	r3, [sp, #32]
  40a08c:	46a4      	mov	ip, r4
  40a08e:	9b06      	ldr	r3, [sp, #24]
  40a090:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a094:	069c      	lsls	r4, r3, #26
  40a096:	f140 8129 	bpl.w	40a2ec <_svfprintf_r+0x74c>
  40a09a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a09c:	3707      	adds	r7, #7
  40a09e:	f027 0707 	bic.w	r7, r7, #7
  40a0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
  40a0a6:	f107 0108 	add.w	r1, r7, #8
  40a0aa:	4614      	mov	r4, r2
  40a0ac:	461d      	mov	r5, r3
  40a0ae:	910c      	str	r1, [sp, #48]	; 0x30
  40a0b0:	2a00      	cmp	r2, #0
  40a0b2:	f173 0300 	sbcs.w	r3, r3, #0
  40a0b6:	f2c0 812a 	blt.w	40a30e <_svfprintf_r+0x76e>
  40a0ba:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40a0be:	2301      	movs	r3, #1
  40a0c0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40a0c4:	e655      	b.n	409d72 <_svfprintf_r+0x1d2>
  40a0c6:	781e      	ldrb	r6, [r3, #0]
  40a0c8:	9906      	ldr	r1, [sp, #24]
  40a0ca:	2e6c      	cmp	r6, #108	; 0x6c
  40a0cc:	f000 8557 	beq.w	40ab7e <_svfprintf_r+0xfde>
  40a0d0:	f041 0110 	orr.w	r1, r1, #16
  40a0d4:	9106      	str	r1, [sp, #24]
  40a0d6:	4619      	mov	r1, r3
  40a0d8:	e5b7      	b.n	409c4a <_svfprintf_r+0xaa>
  40a0da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40a0dc:	6829      	ldr	r1, [r5, #0]
  40a0de:	4608      	mov	r0, r1
  40a0e0:	910b      	str	r1, [sp, #44]	; 0x2c
  40a0e2:	4629      	mov	r1, r5
  40a0e4:	2800      	cmp	r0, #0
  40a0e6:	f101 0104 	add.w	r1, r1, #4
  40a0ea:	f2c0 854f 	blt.w	40ab8c <_svfprintf_r+0xfec>
  40a0ee:	910c      	str	r1, [sp, #48]	; 0x30
  40a0f0:	4619      	mov	r1, r3
  40a0f2:	781e      	ldrb	r6, [r3, #0]
  40a0f4:	e5a9      	b.n	409c4a <_svfprintf_r+0xaa>
  40a0f6:	9906      	ldr	r1, [sp, #24]
  40a0f8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40a0fc:	9106      	str	r1, [sp, #24]
  40a0fe:	4619      	mov	r1, r3
  40a100:	781e      	ldrb	r6, [r3, #0]
  40a102:	e5a2      	b.n	409c4a <_svfprintf_r+0xaa>
  40a104:	0040fc90 	.word	0x0040fc90
  40a108:	0040fc80 	.word	0x0040fc80
  40a10c:	9906      	ldr	r1, [sp, #24]
  40a10e:	f041 0120 	orr.w	r1, r1, #32
  40a112:	9106      	str	r1, [sp, #24]
  40a114:	4619      	mov	r1, r3
  40a116:	781e      	ldrb	r6, [r3, #0]
  40a118:	e597      	b.n	409c4a <_svfprintf_r+0xaa>
  40a11a:	9308      	str	r3, [sp, #32]
  40a11c:	9b06      	ldr	r3, [sp, #24]
  40a11e:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a122:	069e      	lsls	r6, r3, #26
  40a124:	f140 84a4 	bpl.w	40aa70 <_svfprintf_r+0xed0>
  40a128:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a12a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a12c:	17cd      	asrs	r5, r1, #31
  40a12e:	4608      	mov	r0, r1
  40a130:	6813      	ldr	r3, [r2, #0]
  40a132:	3204      	adds	r2, #4
  40a134:	4629      	mov	r1, r5
  40a136:	920c      	str	r2, [sp, #48]	; 0x30
  40a138:	e9c3 0100 	strd	r0, r1, [r3]
  40a13c:	e556      	b.n	409bec <_svfprintf_r+0x4c>
  40a13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a140:	2500      	movs	r5, #0
  40a142:	9308      	str	r3, [sp, #32]
  40a144:	6813      	ldr	r3, [r2, #0]
  40a146:	1d17      	adds	r7, r2, #4
  40a148:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  40a14c:	930f      	str	r3, [sp, #60]	; 0x3c
  40a14e:	2b00      	cmp	r3, #0
  40a150:	f000 867a 	beq.w	40ae48 <_svfprintf_r+0x12a8>
  40a154:	2c00      	cmp	r4, #0
  40a156:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40a158:	f2c0 8624 	blt.w	40ada4 <_svfprintf_r+0x1204>
  40a15c:	4629      	mov	r1, r5
  40a15e:	4622      	mov	r2, r4
  40a160:	f003 fbd2 	bl	40d908 <memchr>
  40a164:	2800      	cmp	r0, #0
  40a166:	f000 86df 	beq.w	40af28 <_svfprintf_r+0x1388>
  40a16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a16c:	970c      	str	r7, [sp, #48]	; 0x30
  40a16e:	1ac4      	subs	r4, r0, r3
  40a170:	9510      	str	r5, [sp, #64]	; 0x40
  40a172:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40a176:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40a17a:	9511      	str	r5, [sp, #68]	; 0x44
  40a17c:	9307      	str	r3, [sp, #28]
  40a17e:	e622      	b.n	409dc6 <_svfprintf_r+0x226>
  40a180:	9308      	str	r3, [sp, #32]
  40a182:	46a4      	mov	ip, r4
  40a184:	9b06      	ldr	r3, [sp, #24]
  40a186:	f043 0310 	orr.w	r3, r3, #16
  40a18a:	9306      	str	r3, [sp, #24]
  40a18c:	9b06      	ldr	r3, [sp, #24]
  40a18e:	f013 0320 	ands.w	r3, r3, #32
  40a192:	f47f af52 	bne.w	40a03a <_svfprintf_r+0x49a>
  40a196:	9a06      	ldr	r2, [sp, #24]
  40a198:	f012 0210 	ands.w	r2, r2, #16
  40a19c:	f040 8352 	bne.w	40a844 <_svfprintf_r+0xca4>
  40a1a0:	9b06      	ldr	r3, [sp, #24]
  40a1a2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40a1a6:	f000 834d 	beq.w	40a844 <_svfprintf_r+0xca4>
  40a1aa:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a1ac:	4613      	mov	r3, r2
  40a1ae:	2500      	movs	r5, #0
  40a1b0:	460a      	mov	r2, r1
  40a1b2:	880c      	ldrh	r4, [r1, #0]
  40a1b4:	3204      	adds	r2, #4
  40a1b6:	920c      	str	r2, [sp, #48]	; 0x30
  40a1b8:	e5d5      	b.n	409d66 <_svfprintf_r+0x1c6>
  40a1ba:	9308      	str	r3, [sp, #32]
  40a1bc:	46a4      	mov	ip, r4
  40a1be:	9b06      	ldr	r3, [sp, #24]
  40a1c0:	f043 0310 	orr.w	r3, r3, #16
  40a1c4:	9306      	str	r3, [sp, #24]
  40a1c6:	9b06      	ldr	r3, [sp, #24]
  40a1c8:	0698      	lsls	r0, r3, #26
  40a1ca:	f53f adc2 	bmi.w	409d52 <_svfprintf_r+0x1b2>
  40a1ce:	9b06      	ldr	r3, [sp, #24]
  40a1d0:	06d9      	lsls	r1, r3, #27
  40a1d2:	f140 8432 	bpl.w	40aa3a <_svfprintf_r+0xe9a>
  40a1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a1d8:	4613      	mov	r3, r2
  40a1da:	3204      	adds	r2, #4
  40a1dc:	681c      	ldr	r4, [r3, #0]
  40a1de:	2500      	movs	r5, #0
  40a1e0:	2301      	movs	r3, #1
  40a1e2:	920c      	str	r2, [sp, #48]	; 0x30
  40a1e4:	e5bf      	b.n	409d66 <_svfprintf_r+0x1c6>
  40a1e6:	9308      	str	r3, [sp, #32]
  40a1e8:	46a4      	mov	ip, r4
  40a1ea:	4bb7      	ldr	r3, [pc, #732]	; (40a4c8 <_svfprintf_r+0x928>)
  40a1ec:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a1f0:	9315      	str	r3, [sp, #84]	; 0x54
  40a1f2:	9b06      	ldr	r3, [sp, #24]
  40a1f4:	069a      	lsls	r2, r3, #26
  40a1f6:	d53e      	bpl.n	40a276 <_svfprintf_r+0x6d6>
  40a1f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a1fa:	3707      	adds	r7, #7
  40a1fc:	f027 0307 	bic.w	r3, r7, #7
  40a200:	f103 0208 	add.w	r2, r3, #8
  40a204:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a208:	920c      	str	r2, [sp, #48]	; 0x30
  40a20a:	9b06      	ldr	r3, [sp, #24]
  40a20c:	07df      	lsls	r7, r3, #31
  40a20e:	f140 8268 	bpl.w	40a6e2 <_svfprintf_r+0xb42>
  40a212:	ea54 0305 	orrs.w	r3, r4, r5
  40a216:	f000 8264 	beq.w	40a6e2 <_svfprintf_r+0xb42>
  40a21a:	9b06      	ldr	r3, [sp, #24]
  40a21c:	2230      	movs	r2, #48	; 0x30
  40a21e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40a222:	f043 0302 	orr.w	r3, r3, #2
  40a226:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40a22a:	9306      	str	r3, [sp, #24]
  40a22c:	2302      	movs	r3, #2
  40a22e:	e59a      	b.n	409d66 <_svfprintf_r+0x1c6>
  40a230:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a232:	2001      	movs	r0, #1
  40a234:	9308      	str	r3, [sp, #32]
  40a236:	2300      	movs	r3, #0
  40a238:	680a      	ldr	r2, [r1, #0]
  40a23a:	3104      	adds	r1, #4
  40a23c:	461f      	mov	r7, r3
  40a23e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a242:	9310      	str	r3, [sp, #64]	; 0x40
  40a244:	4604      	mov	r4, r0
  40a246:	9311      	str	r3, [sp, #68]	; 0x44
  40a248:	ab26      	add	r3, sp, #152	; 0x98
  40a24a:	9007      	str	r0, [sp, #28]
  40a24c:	910c      	str	r1, [sp, #48]	; 0x30
  40a24e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40a252:	930f      	str	r3, [sp, #60]	; 0x3c
  40a254:	e5bb      	b.n	409dce <_svfprintf_r+0x22e>
  40a256:	9906      	ldr	r1, [sp, #24]
  40a258:	f041 0108 	orr.w	r1, r1, #8
  40a25c:	9106      	str	r1, [sp, #24]
  40a25e:	4619      	mov	r1, r3
  40a260:	781e      	ldrb	r6, [r3, #0]
  40a262:	e4f2      	b.n	409c4a <_svfprintf_r+0xaa>
  40a264:	9308      	str	r3, [sp, #32]
  40a266:	46a4      	mov	ip, r4
  40a268:	4b98      	ldr	r3, [pc, #608]	; (40a4cc <_svfprintf_r+0x92c>)
  40a26a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a26e:	9315      	str	r3, [sp, #84]	; 0x54
  40a270:	9b06      	ldr	r3, [sp, #24]
  40a272:	069a      	lsls	r2, r3, #26
  40a274:	d4c0      	bmi.n	40a1f8 <_svfprintf_r+0x658>
  40a276:	9b06      	ldr	r3, [sp, #24]
  40a278:	06db      	lsls	r3, r3, #27
  40a27a:	f140 83ec 	bpl.w	40aa56 <_svfprintf_r+0xeb6>
  40a27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a280:	2500      	movs	r5, #0
  40a282:	4613      	mov	r3, r2
  40a284:	6814      	ldr	r4, [r2, #0]
  40a286:	3304      	adds	r3, #4
  40a288:	930c      	str	r3, [sp, #48]	; 0x30
  40a28a:	e7be      	b.n	40a20a <_svfprintf_r+0x66a>
  40a28c:	781e      	ldrb	r6, [r3, #0]
  40a28e:	4619      	mov	r1, r3
  40a290:	2a00      	cmp	r2, #0
  40a292:	f47f acda 	bne.w	409c4a <_svfprintf_r+0xaa>
  40a296:	2220      	movs	r2, #32
  40a298:	e4d7      	b.n	409c4a <_svfprintf_r+0xaa>
  40a29a:	9906      	ldr	r1, [sp, #24]
  40a29c:	f041 0101 	orr.w	r1, r1, #1
  40a2a0:	9106      	str	r1, [sp, #24]
  40a2a2:	4619      	mov	r1, r3
  40a2a4:	781e      	ldrb	r6, [r3, #0]
  40a2a6:	e4d0      	b.n	409c4a <_svfprintf_r+0xaa>
  40a2a8:	9906      	ldr	r1, [sp, #24]
  40a2aa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40a2ae:	9106      	str	r1, [sp, #24]
  40a2b0:	4619      	mov	r1, r3
  40a2b2:	781e      	ldrb	r6, [r3, #0]
  40a2b4:	e4c9      	b.n	409c4a <_svfprintf_r+0xaa>
  40a2b6:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40a2ba:	2100      	movs	r1, #0
  40a2bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40a2c0:	f813 6b01 	ldrb.w	r6, [r3], #1
  40a2c4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40a2c8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40a2cc:	2809      	cmp	r0, #9
  40a2ce:	d9f5      	bls.n	40a2bc <_svfprintf_r+0x71c>
  40a2d0:	910b      	str	r1, [sp, #44]	; 0x2c
  40a2d2:	e4bb      	b.n	409c4c <_svfprintf_r+0xac>
  40a2d4:	9308      	str	r3, [sp, #32]
  40a2d6:	46a4      	mov	ip, r4
  40a2d8:	9b06      	ldr	r3, [sp, #24]
  40a2da:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a2de:	f043 0310 	orr.w	r3, r3, #16
  40a2e2:	9306      	str	r3, [sp, #24]
  40a2e4:	9b06      	ldr	r3, [sp, #24]
  40a2e6:	069c      	lsls	r4, r3, #26
  40a2e8:	f53f aed7 	bmi.w	40a09a <_svfprintf_r+0x4fa>
  40a2ec:	9b06      	ldr	r3, [sp, #24]
  40a2ee:	06d8      	lsls	r0, r3, #27
  40a2f0:	f140 83d5 	bpl.w	40aa9e <_svfprintf_r+0xefe>
  40a2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a2f6:	4613      	mov	r3, r2
  40a2f8:	681c      	ldr	r4, [r3, #0]
  40a2fa:	3304      	adds	r3, #4
  40a2fc:	17e5      	asrs	r5, r4, #31
  40a2fe:	4622      	mov	r2, r4
  40a300:	930c      	str	r3, [sp, #48]	; 0x30
  40a302:	2a00      	cmp	r2, #0
  40a304:	462b      	mov	r3, r5
  40a306:	f173 0300 	sbcs.w	r3, r3, #0
  40a30a:	f6bf aed6 	bge.w	40a0ba <_svfprintf_r+0x51a>
  40a30e:	272d      	movs	r7, #45	; 0x2d
  40a310:	4264      	negs	r4, r4
  40a312:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40a316:	f04f 0301 	mov.w	r3, #1
  40a31a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40a31e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40a322:	e526      	b.n	409d72 <_svfprintf_r+0x1d2>
  40a324:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a326:	9308      	str	r3, [sp, #32]
  40a328:	3707      	adds	r7, #7
  40a32a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a32e:	f027 0307 	bic.w	r3, r7, #7
  40a332:	f103 0208 	add.w	r2, r3, #8
  40a336:	920c      	str	r2, [sp, #48]	; 0x30
  40a338:	681a      	ldr	r2, [r3, #0]
  40a33a:	9213      	str	r2, [sp, #76]	; 0x4c
  40a33c:	685b      	ldr	r3, [r3, #4]
  40a33e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a340:	9314      	str	r3, [sp, #80]	; 0x50
  40a342:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a344:	9407      	str	r4, [sp, #28]
  40a346:	f7fd ffbb 	bl	4082c0 <__fpclassifyd>
  40a34a:	2801      	cmp	r0, #1
  40a34c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40a350:	f040 8355 	bne.w	40a9fe <_svfprintf_r+0xe5e>
  40a354:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a356:	2200      	movs	r2, #0
  40a358:	2300      	movs	r3, #0
  40a35a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a35c:	f7fe fc8e 	bl	408c7c <__aeabi_dcmplt>
  40a360:	2800      	cmp	r0, #0
  40a362:	f040 8582 	bne.w	40ae6a <_svfprintf_r+0x12ca>
  40a366:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40a36a:	2303      	movs	r3, #3
  40a36c:	9806      	ldr	r0, [sp, #24]
  40a36e:	4a58      	ldr	r2, [pc, #352]	; (40a4d0 <_svfprintf_r+0x930>)
  40a370:	2100      	movs	r1, #0
  40a372:	461c      	mov	r4, r3
  40a374:	9307      	str	r3, [sp, #28]
  40a376:	4b57      	ldr	r3, [pc, #348]	; (40a4d4 <_svfprintf_r+0x934>)
  40a378:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  40a37c:	9110      	str	r1, [sp, #64]	; 0x40
  40a37e:	2e47      	cmp	r6, #71	; 0x47
  40a380:	bfd8      	it	le
  40a382:	461a      	movle	r2, r3
  40a384:	9006      	str	r0, [sp, #24]
  40a386:	9111      	str	r1, [sp, #68]	; 0x44
  40a388:	920f      	str	r2, [sp, #60]	; 0x3c
  40a38a:	e51c      	b.n	409dc6 <_svfprintf_r+0x226>
  40a38c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40a38e:	2230      	movs	r2, #48	; 0x30
  40a390:	9806      	ldr	r0, [sp, #24]
  40a392:	46a4      	mov	ip, r4
  40a394:	4629      	mov	r1, r5
  40a396:	9308      	str	r3, [sp, #32]
  40a398:	2378      	movs	r3, #120	; 0x78
  40a39a:	f040 0002 	orr.w	r0, r0, #2
  40a39e:	3104      	adds	r1, #4
  40a3a0:	682c      	ldr	r4, [r5, #0]
  40a3a2:	461e      	mov	r6, r3
  40a3a4:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  40a3a8:	4b48      	ldr	r3, [pc, #288]	; (40a4cc <_svfprintf_r+0x92c>)
  40a3aa:	2500      	movs	r5, #0
  40a3ac:	9006      	str	r0, [sp, #24]
  40a3ae:	9315      	str	r3, [sp, #84]	; 0x54
  40a3b0:	2302      	movs	r3, #2
  40a3b2:	910c      	str	r1, [sp, #48]	; 0x30
  40a3b4:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40a3b8:	e4d5      	b.n	409d66 <_svfprintf_r+0x1c6>
  40a3ba:	9308      	str	r3, [sp, #32]
  40a3bc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40a3c0:	2e00      	cmp	r6, #0
  40a3c2:	f43f acab 	beq.w	409d1c <_svfprintf_r+0x17c>
  40a3c6:	2300      	movs	r3, #0
  40a3c8:	2201      	movs	r2, #1
  40a3ca:	a926      	add	r1, sp, #152	; 0x98
  40a3cc:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40a3d0:	9207      	str	r2, [sp, #28]
  40a3d2:	461f      	mov	r7, r3
  40a3d4:	910f      	str	r1, [sp, #60]	; 0x3c
  40a3d6:	4614      	mov	r4, r2
  40a3d8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a3dc:	9310      	str	r3, [sp, #64]	; 0x40
  40a3de:	9311      	str	r3, [sp, #68]	; 0x44
  40a3e0:	e4f5      	b.n	409dce <_svfprintf_r+0x22e>
  40a3e2:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a3e4:	4649      	mov	r1, r9
  40a3e6:	aa23      	add	r2, sp, #140	; 0x8c
  40a3e8:	f004 f8ca 	bl	40e580 <__ssprint_r>
  40a3ec:	2800      	cmp	r0, #0
  40a3ee:	f47f ac9c 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a3f2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40a3f6:	46c3      	mov	fp, r8
  40a3f8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a3fc:	e53f      	b.n	409e7e <_svfprintf_r+0x2de>
  40a3fe:	2e65      	cmp	r6, #101	; 0x65
  40a400:	f340 80c9 	ble.w	40a596 <_svfprintf_r+0x9f6>
  40a404:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a406:	2200      	movs	r2, #0
  40a408:	2300      	movs	r3, #0
  40a40a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a40c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40a410:	f7fe fc2a 	bl	408c68 <__aeabi_dcmpeq>
  40a414:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40a418:	2800      	cmp	r0, #0
  40a41a:	f000 8165 	beq.w	40a6e8 <_svfprintf_r+0xb48>
  40a41e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a420:	2201      	movs	r2, #1
  40a422:	f10c 0c01 	add.w	ip, ip, #1
  40a426:	492c      	ldr	r1, [pc, #176]	; (40a4d8 <_svfprintf_r+0x938>)
  40a428:	4413      	add	r3, r2
  40a42a:	f8cb 2004 	str.w	r2, [fp, #4]
  40a42e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a432:	2b07      	cmp	r3, #7
  40a434:	f8cb 1000 	str.w	r1, [fp]
  40a438:	9324      	str	r3, [sp, #144]	; 0x90
  40a43a:	f300 8343 	bgt.w	40aac4 <_svfprintf_r+0xf24>
  40a43e:	f10b 0b08 	add.w	fp, fp, #8
  40a442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a444:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a446:	4293      	cmp	r3, r2
  40a448:	db03      	blt.n	40a452 <_svfprintf_r+0x8b2>
  40a44a:	9b06      	ldr	r3, [sp, #24]
  40a44c:	07de      	lsls	r6, r3, #31
  40a44e:	f57f ad92 	bpl.w	409f76 <_svfprintf_r+0x3d6>
  40a452:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a454:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40a456:	3301      	adds	r3, #1
  40a458:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a45a:	448c      	add	ip, r1
  40a45c:	f8cb 1004 	str.w	r1, [fp, #4]
  40a460:	2b07      	cmp	r3, #7
  40a462:	f8cb 2000 	str.w	r2, [fp]
  40a466:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a46a:	9324      	str	r3, [sp, #144]	; 0x90
  40a46c:	f300 841d 	bgt.w	40acaa <_svfprintf_r+0x110a>
  40a470:	f10b 0b08 	add.w	fp, fp, #8
  40a474:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a476:	1e5c      	subs	r4, r3, #1
  40a478:	2c00      	cmp	r4, #0
  40a47a:	f77f ad7c 	ble.w	409f76 <_svfprintf_r+0x3d6>
  40a47e:	2c10      	cmp	r4, #16
  40a480:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a482:	f340 85bc 	ble.w	40affe <_svfprintf_r+0x145e>
  40a486:	2610      	movs	r6, #16
  40a488:	4d14      	ldr	r5, [pc, #80]	; (40a4dc <_svfprintf_r+0x93c>)
  40a48a:	4662      	mov	r2, ip
  40a48c:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40a48e:	e003      	b.n	40a498 <_svfprintf_r+0x8f8>
  40a490:	3c10      	subs	r4, #16
  40a492:	2c10      	cmp	r4, #16
  40a494:	f340 81c8 	ble.w	40a828 <_svfprintf_r+0xc88>
  40a498:	3301      	adds	r3, #1
  40a49a:	3210      	adds	r2, #16
  40a49c:	f8cb 5000 	str.w	r5, [fp]
  40a4a0:	f10b 0b08 	add.w	fp, fp, #8
  40a4a4:	2b07      	cmp	r3, #7
  40a4a6:	f84b 6c04 	str.w	r6, [fp, #-4]
  40a4aa:	9225      	str	r2, [sp, #148]	; 0x94
  40a4ac:	9324      	str	r3, [sp, #144]	; 0x90
  40a4ae:	ddef      	ble.n	40a490 <_svfprintf_r+0x8f0>
  40a4b0:	4638      	mov	r0, r7
  40a4b2:	4649      	mov	r1, r9
  40a4b4:	aa23      	add	r2, sp, #140	; 0x8c
  40a4b6:	46c3      	mov	fp, r8
  40a4b8:	f004 f862 	bl	40e580 <__ssprint_r>
  40a4bc:	2800      	cmp	r0, #0
  40a4be:	f47f ac34 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a4c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a4c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a4c6:	e7e3      	b.n	40a490 <_svfprintf_r+0x8f0>
  40a4c8:	0040fcb0 	.word	0x0040fcb0
  40a4cc:	0040fcc4 	.word	0x0040fcc4
  40a4d0:	0040fca4 	.word	0x0040fca4
  40a4d4:	0040fca0 	.word	0x0040fca0
  40a4d8:	0040fce0 	.word	0x0040fce0
  40a4dc:	0040fc80 	.word	0x0040fc80
  40a4e0:	2b01      	cmp	r3, #1
  40a4e2:	f000 814d 	beq.w	40a780 <_svfprintf_r+0xbe0>
  40a4e6:	2b02      	cmp	r3, #2
  40a4e8:	f040 80e3 	bne.w	40a6b2 <_svfprintf_r+0xb12>
  40a4ec:	46c2      	mov	sl, r8
  40a4ee:	9815      	ldr	r0, [sp, #84]	; 0x54
  40a4f0:	0923      	lsrs	r3, r4, #4
  40a4f2:	f004 010f 	and.w	r1, r4, #15
  40a4f6:	092a      	lsrs	r2, r5, #4
  40a4f8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40a4fc:	4615      	mov	r5, r2
  40a4fe:	461c      	mov	r4, r3
  40a500:	5c43      	ldrb	r3, [r0, r1]
  40a502:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  40a506:	ea54 0305 	orrs.w	r3, r4, r5
  40a50a:	d1f1      	bne.n	40a4f0 <_svfprintf_r+0x950>
  40a50c:	4653      	mov	r3, sl
  40a50e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40a512:	ebc3 0408 	rsb	r4, r3, r8
  40a516:	e44f      	b.n	409db8 <_svfprintf_r+0x218>
  40a518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a51a:	9a07      	ldr	r2, [sp, #28]
  40a51c:	1a9f      	subs	r7, r3, r2
  40a51e:	2f00      	cmp	r7, #0
  40a520:	f77f acd9 	ble.w	409ed6 <_svfprintf_r+0x336>
  40a524:	2f10      	cmp	r7, #16
  40a526:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a528:	f340 84f9 	ble.w	40af1e <_svfprintf_r+0x137e>
  40a52c:	940d      	str	r4, [sp, #52]	; 0x34
  40a52e:	f04f 0a10 	mov.w	sl, #16
  40a532:	4dc8      	ldr	r5, [pc, #800]	; (40a854 <_svfprintf_r+0xcb4>)
  40a534:	4662      	mov	r2, ip
  40a536:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40a538:	e002      	b.n	40a540 <_svfprintf_r+0x9a0>
  40a53a:	3f10      	subs	r7, #16
  40a53c:	2f10      	cmp	r7, #16
  40a53e:	dd19      	ble.n	40a574 <_svfprintf_r+0x9d4>
  40a540:	3301      	adds	r3, #1
  40a542:	3210      	adds	r2, #16
  40a544:	f8cb 5000 	str.w	r5, [fp]
  40a548:	f10b 0b08 	add.w	fp, fp, #8
  40a54c:	2b07      	cmp	r3, #7
  40a54e:	f84b ac04 	str.w	sl, [fp, #-4]
  40a552:	9225      	str	r2, [sp, #148]	; 0x94
  40a554:	9324      	str	r3, [sp, #144]	; 0x90
  40a556:	ddf0      	ble.n	40a53a <_svfprintf_r+0x99a>
  40a558:	4620      	mov	r0, r4
  40a55a:	4649      	mov	r1, r9
  40a55c:	aa23      	add	r2, sp, #140	; 0x8c
  40a55e:	46c3      	mov	fp, r8
  40a560:	f004 f80e 	bl	40e580 <__ssprint_r>
  40a564:	2800      	cmp	r0, #0
  40a566:	f47f abe0 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a56a:	3f10      	subs	r7, #16
  40a56c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a56e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a570:	2f10      	cmp	r7, #16
  40a572:	dce5      	bgt.n	40a540 <_svfprintf_r+0x9a0>
  40a574:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40a576:	4694      	mov	ip, r2
  40a578:	3301      	adds	r3, #1
  40a57a:	44bc      	add	ip, r7
  40a57c:	f8cb 5000 	str.w	r5, [fp]
  40a580:	2b07      	cmp	r3, #7
  40a582:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a586:	9324      	str	r3, [sp, #144]	; 0x90
  40a588:	f8cb 7004 	str.w	r7, [fp, #4]
  40a58c:	f300 81fc 	bgt.w	40a988 <_svfprintf_r+0xde8>
  40a590:	f10b 0b08 	add.w	fp, fp, #8
  40a594:	e49f      	b.n	409ed6 <_svfprintf_r+0x336>
  40a596:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a598:	f10c 0601 	add.w	r6, ip, #1
  40a59c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40a59e:	2b01      	cmp	r3, #1
  40a5a0:	f340 81c9 	ble.w	40a936 <_svfprintf_r+0xd96>
  40a5a4:	2301      	movs	r3, #1
  40a5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a5a8:	9625      	str	r6, [sp, #148]	; 0x94
  40a5aa:	441c      	add	r4, r3
  40a5ac:	f8cb 2000 	str.w	r2, [fp]
  40a5b0:	f8cb 3004 	str.w	r3, [fp, #4]
  40a5b4:	2c07      	cmp	r4, #7
  40a5b6:	9424      	str	r4, [sp, #144]	; 0x90
  40a5b8:	f300 81da 	bgt.w	40a970 <_svfprintf_r+0xdd0>
  40a5bc:	f10b 0b08 	add.w	fp, fp, #8
  40a5c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40a5c2:	3401      	adds	r4, #1
  40a5c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40a5c6:	4416      	add	r6, r2
  40a5c8:	2c07      	cmp	r4, #7
  40a5ca:	f8cb 3000 	str.w	r3, [fp]
  40a5ce:	9625      	str	r6, [sp, #148]	; 0x94
  40a5d0:	9424      	str	r4, [sp, #144]	; 0x90
  40a5d2:	f8cb 2004 	str.w	r2, [fp, #4]
  40a5d6:	f300 81bf 	bgt.w	40a958 <_svfprintf_r+0xdb8>
  40a5da:	f10b 0b08 	add.w	fp, fp, #8
  40a5de:	2300      	movs	r3, #0
  40a5e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a5e2:	2200      	movs	r2, #0
  40a5e4:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a5e6:	f7fe fb3f 	bl	408c68 <__aeabi_dcmpeq>
  40a5ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a5ec:	2800      	cmp	r0, #0
  40a5ee:	f040 80dc 	bne.w	40a7aa <_svfprintf_r+0xc0a>
  40a5f2:	3b01      	subs	r3, #1
  40a5f4:	3401      	adds	r4, #1
  40a5f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a5f8:	441e      	add	r6, r3
  40a5fa:	2c07      	cmp	r4, #7
  40a5fc:	f102 0201 	add.w	r2, r2, #1
  40a600:	9424      	str	r4, [sp, #144]	; 0x90
  40a602:	9625      	str	r6, [sp, #148]	; 0x94
  40a604:	f8cb 2000 	str.w	r2, [fp]
  40a608:	f8cb 3004 	str.w	r3, [fp, #4]
  40a60c:	f300 8100 	bgt.w	40a810 <_svfprintf_r+0xc70>
  40a610:	f10b 0b08 	add.w	fp, fp, #8
  40a614:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a616:	3401      	adds	r4, #1
  40a618:	ab1f      	add	r3, sp, #124	; 0x7c
  40a61a:	eb06 0c02 	add.w	ip, r6, r2
  40a61e:	2c07      	cmp	r4, #7
  40a620:	f8cb 2004 	str.w	r2, [fp, #4]
  40a624:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a628:	9424      	str	r4, [sp, #144]	; 0x90
  40a62a:	f8cb 3000 	str.w	r3, [fp]
  40a62e:	f77f aca0 	ble.w	409f72 <_svfprintf_r+0x3d2>
  40a632:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a634:	4649      	mov	r1, r9
  40a636:	aa23      	add	r2, sp, #140	; 0x8c
  40a638:	f003 ffa2 	bl	40e580 <__ssprint_r>
  40a63c:	2800      	cmp	r0, #0
  40a63e:	f47f ab74 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a642:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a646:	46c3      	mov	fp, r8
  40a648:	e495      	b.n	409f76 <_svfprintf_r+0x3d6>
  40a64a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a64c:	4649      	mov	r1, r9
  40a64e:	aa23      	add	r2, sp, #140	; 0x8c
  40a650:	f003 ff96 	bl	40e580 <__ssprint_r>
  40a654:	2800      	cmp	r0, #0
  40a656:	f43f acde 	beq.w	40a016 <_svfprintf_r+0x476>
  40a65a:	f7ff bb66 	b.w	409d2a <_svfprintf_r+0x18a>
  40a65e:	4614      	mov	r4, r2
  40a660:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40a664:	f7ff bba8 	b.w	409db8 <_svfprintf_r+0x218>
  40a668:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a66a:	4649      	mov	r1, r9
  40a66c:	aa23      	add	r2, sp, #140	; 0x8c
  40a66e:	f003 ff87 	bl	40e580 <__ssprint_r>
  40a672:	2800      	cmp	r0, #0
  40a674:	f47f ab59 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a678:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a67c:	46c3      	mov	fp, r8
  40a67e:	e466      	b.n	409f4e <_svfprintf_r+0x3ae>
  40a680:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a682:	4649      	mov	r1, r9
  40a684:	aa23      	add	r2, sp, #140	; 0x8c
  40a686:	f003 ff7b 	bl	40e580 <__ssprint_r>
  40a68a:	2800      	cmp	r0, #0
  40a68c:	f47f ab4d 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a690:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a694:	46c3      	mov	fp, r8
  40a696:	e41a      	b.n	409ece <_svfprintf_r+0x32e>
  40a698:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a69a:	4649      	mov	r1, r9
  40a69c:	aa23      	add	r2, sp, #140	; 0x8c
  40a69e:	f003 ff6f 	bl	40e580 <__ssprint_r>
  40a6a2:	2800      	cmp	r0, #0
  40a6a4:	f47f ab41 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a6a8:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a6ac:	46c3      	mov	fp, r8
  40a6ae:	f7ff bbfa 	b.w	409ea6 <_svfprintf_r+0x306>
  40a6b2:	4641      	mov	r1, r8
  40a6b4:	08e2      	lsrs	r2, r4, #3
  40a6b6:	f004 0307 	and.w	r3, r4, #7
  40a6ba:	08e8      	lsrs	r0, r5, #3
  40a6bc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40a6c0:	3330      	adds	r3, #48	; 0x30
  40a6c2:	4605      	mov	r5, r0
  40a6c4:	4614      	mov	r4, r2
  40a6c6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40a6ca:	ea54 0205 	orrs.w	r2, r4, r5
  40a6ce:	d1f1      	bne.n	40a6b4 <_svfprintf_r+0xb14>
  40a6d0:	9a06      	ldr	r2, [sp, #24]
  40a6d2:	910f      	str	r1, [sp, #60]	; 0x3c
  40a6d4:	07d0      	lsls	r0, r2, #31
  40a6d6:	f100 8164 	bmi.w	40a9a2 <_svfprintf_r+0xe02>
  40a6da:	ebc1 0408 	rsb	r4, r1, r8
  40a6de:	f7ff bb6b 	b.w	409db8 <_svfprintf_r+0x218>
  40a6e2:	2302      	movs	r3, #2
  40a6e4:	f7ff bb3f 	b.w	409d66 <_svfprintf_r+0x1c6>
  40a6e8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40a6ea:	2c00      	cmp	r4, #0
  40a6ec:	f340 81f6 	ble.w	40aadc <_svfprintf_r+0xf3c>
  40a6f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a6f2:	9911      	ldr	r1, [sp, #68]	; 0x44
  40a6f4:	4613      	mov	r3, r2
  40a6f6:	428a      	cmp	r2, r1
  40a6f8:	bfa8      	it	ge
  40a6fa:	460b      	movge	r3, r1
  40a6fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40a6fe:	461c      	mov	r4, r3
  40a700:	188f      	adds	r7, r1, r2
  40a702:	2c00      	cmp	r4, #0
  40a704:	dd0e      	ble.n	40a724 <_svfprintf_r+0xb84>
  40a706:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a708:	44a4      	add	ip, r4
  40a70a:	f8cb 1000 	str.w	r1, [fp]
  40a70e:	3301      	adds	r3, #1
  40a710:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a714:	f8cb 4004 	str.w	r4, [fp, #4]
  40a718:	2b07      	cmp	r3, #7
  40a71a:	9324      	str	r3, [sp, #144]	; 0x90
  40a71c:	f300 8353 	bgt.w	40adc6 <_svfprintf_r+0x1226>
  40a720:	f10b 0b08 	add.w	fp, fp, #8
  40a724:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a726:	2c00      	cmp	r4, #0
  40a728:	bfa8      	it	ge
  40a72a:	1b1b      	subge	r3, r3, r4
  40a72c:	2b00      	cmp	r3, #0
  40a72e:	461c      	mov	r4, r3
  40a730:	f340 80a1 	ble.w	40a876 <_svfprintf_r+0xcd6>
  40a734:	2c10      	cmp	r4, #16
  40a736:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a738:	f340 846c 	ble.w	40b014 <_svfprintf_r+0x1474>
  40a73c:	2610      	movs	r6, #16
  40a73e:	4d45      	ldr	r5, [pc, #276]	; (40a854 <_svfprintf_r+0xcb4>)
  40a740:	4662      	mov	r2, ip
  40a742:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  40a746:	e003      	b.n	40a750 <_svfprintf_r+0xbb0>
  40a748:	3c10      	subs	r4, #16
  40a74a:	2c10      	cmp	r4, #16
  40a74c:	f340 8084 	ble.w	40a858 <_svfprintf_r+0xcb8>
  40a750:	3301      	adds	r3, #1
  40a752:	3210      	adds	r2, #16
  40a754:	f8cb 5000 	str.w	r5, [fp]
  40a758:	f10b 0b08 	add.w	fp, fp, #8
  40a75c:	2b07      	cmp	r3, #7
  40a75e:	f84b 6c04 	str.w	r6, [fp, #-4]
  40a762:	9225      	str	r2, [sp, #148]	; 0x94
  40a764:	9324      	str	r3, [sp, #144]	; 0x90
  40a766:	ddef      	ble.n	40a748 <_svfprintf_r+0xba8>
  40a768:	4650      	mov	r0, sl
  40a76a:	4649      	mov	r1, r9
  40a76c:	aa23      	add	r2, sp, #140	; 0x8c
  40a76e:	46c3      	mov	fp, r8
  40a770:	f003 ff06 	bl	40e580 <__ssprint_r>
  40a774:	2800      	cmp	r0, #0
  40a776:	f47f aad8 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a77a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a77c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a77e:	e7e3      	b.n	40a748 <_svfprintf_r+0xba8>
  40a780:	2d00      	cmp	r5, #0
  40a782:	bf08      	it	eq
  40a784:	2c0a      	cmpeq	r4, #10
  40a786:	f080 811a 	bcs.w	40a9be <_svfprintf_r+0xe1e>
  40a78a:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40a78e:	3430      	adds	r4, #48	; 0x30
  40a790:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  40a794:	ebca 0408 	rsb	r4, sl, r8
  40a798:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40a79c:	f7ff bb0c 	b.w	409db8 <_svfprintf_r+0x218>
  40a7a0:	461c      	mov	r4, r3
  40a7a2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40a7a6:	f7ff bb07 	b.w	409db8 <_svfprintf_r+0x218>
  40a7aa:	1e5f      	subs	r7, r3, #1
  40a7ac:	2f00      	cmp	r7, #0
  40a7ae:	f77f af31 	ble.w	40a614 <_svfprintf_r+0xa74>
  40a7b2:	2f10      	cmp	r7, #16
  40a7b4:	4d27      	ldr	r5, [pc, #156]	; (40a854 <_svfprintf_r+0xcb4>)
  40a7b6:	bfc8      	it	gt
  40a7b8:	f04f 0a10 	movgt.w	sl, #16
  40a7bc:	dc03      	bgt.n	40a7c6 <_svfprintf_r+0xc26>
  40a7be:	e01c      	b.n	40a7fa <_svfprintf_r+0xc5a>
  40a7c0:	3f10      	subs	r7, #16
  40a7c2:	2f10      	cmp	r7, #16
  40a7c4:	dd19      	ble.n	40a7fa <_svfprintf_r+0xc5a>
  40a7c6:	3401      	adds	r4, #1
  40a7c8:	3610      	adds	r6, #16
  40a7ca:	f8cb 5000 	str.w	r5, [fp]
  40a7ce:	f10b 0b08 	add.w	fp, fp, #8
  40a7d2:	2c07      	cmp	r4, #7
  40a7d4:	f84b ac04 	str.w	sl, [fp, #-4]
  40a7d8:	9625      	str	r6, [sp, #148]	; 0x94
  40a7da:	9424      	str	r4, [sp, #144]	; 0x90
  40a7dc:	ddf0      	ble.n	40a7c0 <_svfprintf_r+0xc20>
  40a7de:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a7e0:	4649      	mov	r1, r9
  40a7e2:	aa23      	add	r2, sp, #140	; 0x8c
  40a7e4:	46c3      	mov	fp, r8
  40a7e6:	f003 fecb 	bl	40e580 <__ssprint_r>
  40a7ea:	2800      	cmp	r0, #0
  40a7ec:	f47f aa9d 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a7f0:	3f10      	subs	r7, #16
  40a7f2:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40a7f4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40a7f6:	2f10      	cmp	r7, #16
  40a7f8:	dce5      	bgt.n	40a7c6 <_svfprintf_r+0xc26>
  40a7fa:	3401      	adds	r4, #1
  40a7fc:	443e      	add	r6, r7
  40a7fe:	f8cb 5000 	str.w	r5, [fp]
  40a802:	2c07      	cmp	r4, #7
  40a804:	9625      	str	r6, [sp, #148]	; 0x94
  40a806:	9424      	str	r4, [sp, #144]	; 0x90
  40a808:	f8cb 7004 	str.w	r7, [fp, #4]
  40a80c:	f77f af00 	ble.w	40a610 <_svfprintf_r+0xa70>
  40a810:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a812:	4649      	mov	r1, r9
  40a814:	aa23      	add	r2, sp, #140	; 0x8c
  40a816:	f003 feb3 	bl	40e580 <__ssprint_r>
  40a81a:	2800      	cmp	r0, #0
  40a81c:	f47f aa85 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a820:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40a822:	46c3      	mov	fp, r8
  40a824:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40a826:	e6f5      	b.n	40a614 <_svfprintf_r+0xa74>
  40a828:	4694      	mov	ip, r2
  40a82a:	3301      	adds	r3, #1
  40a82c:	44a4      	add	ip, r4
  40a82e:	f8cb 5000 	str.w	r5, [fp]
  40a832:	2b07      	cmp	r3, #7
  40a834:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a838:	9324      	str	r3, [sp, #144]	; 0x90
  40a83a:	f8cb 4004 	str.w	r4, [fp, #4]
  40a83e:	f77f ab98 	ble.w	409f72 <_svfprintf_r+0x3d2>
  40a842:	e6f6      	b.n	40a632 <_svfprintf_r+0xa92>
  40a844:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a846:	2500      	movs	r5, #0
  40a848:	460a      	mov	r2, r1
  40a84a:	680c      	ldr	r4, [r1, #0]
  40a84c:	3204      	adds	r2, #4
  40a84e:	920c      	str	r2, [sp, #48]	; 0x30
  40a850:	f7ff ba89 	b.w	409d66 <_svfprintf_r+0x1c6>
  40a854:	0040fc80 	.word	0x0040fc80
  40a858:	4694      	mov	ip, r2
  40a85a:	3301      	adds	r3, #1
  40a85c:	44a4      	add	ip, r4
  40a85e:	f8cb 5000 	str.w	r5, [fp]
  40a862:	2b07      	cmp	r3, #7
  40a864:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a868:	9324      	str	r3, [sp, #144]	; 0x90
  40a86a:	f8cb 4004 	str.w	r4, [fp, #4]
  40a86e:	f300 82df 	bgt.w	40ae30 <_svfprintf_r+0x1290>
  40a872:	f10b 0b08 	add.w	fp, fp, #8
  40a876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a878:	9911      	ldr	r1, [sp, #68]	; 0x44
  40a87a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a87c:	440a      	add	r2, r1
  40a87e:	4616      	mov	r6, r2
  40a880:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a882:	4293      	cmp	r3, r2
  40a884:	db45      	blt.n	40a912 <_svfprintf_r+0xd72>
  40a886:	9a06      	ldr	r2, [sp, #24]
  40a888:	07d0      	lsls	r0, r2, #31
  40a88a:	d442      	bmi.n	40a912 <_svfprintf_r+0xd72>
  40a88c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a88e:	1bbc      	subs	r4, r7, r6
  40a890:	1ad3      	subs	r3, r2, r3
  40a892:	429c      	cmp	r4, r3
  40a894:	bfa8      	it	ge
  40a896:	461c      	movge	r4, r3
  40a898:	2c00      	cmp	r4, #0
  40a89a:	4625      	mov	r5, r4
  40a89c:	dd0e      	ble.n	40a8bc <_svfprintf_r+0xd1c>
  40a89e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a8a0:	44a4      	add	ip, r4
  40a8a2:	f8cb 6000 	str.w	r6, [fp]
  40a8a6:	3201      	adds	r2, #1
  40a8a8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a8ac:	f8cb 4004 	str.w	r4, [fp, #4]
  40a8b0:	2a07      	cmp	r2, #7
  40a8b2:	9224      	str	r2, [sp, #144]	; 0x90
  40a8b4:	f300 82a0 	bgt.w	40adf8 <_svfprintf_r+0x1258>
  40a8b8:	f10b 0b08 	add.w	fp, fp, #8
  40a8bc:	2d00      	cmp	r5, #0
  40a8be:	bfac      	ite	ge
  40a8c0:	1b5c      	subge	r4, r3, r5
  40a8c2:	461c      	movlt	r4, r3
  40a8c4:	2c00      	cmp	r4, #0
  40a8c6:	f77f ab56 	ble.w	409f76 <_svfprintf_r+0x3d6>
  40a8ca:	2c10      	cmp	r4, #16
  40a8cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a8ce:	f340 8396 	ble.w	40affe <_svfprintf_r+0x145e>
  40a8d2:	2610      	movs	r6, #16
  40a8d4:	4db1      	ldr	r5, [pc, #708]	; (40ab9c <_svfprintf_r+0xffc>)
  40a8d6:	4662      	mov	r2, ip
  40a8d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40a8da:	e002      	b.n	40a8e2 <_svfprintf_r+0xd42>
  40a8dc:	3c10      	subs	r4, #16
  40a8de:	2c10      	cmp	r4, #16
  40a8e0:	dda2      	ble.n	40a828 <_svfprintf_r+0xc88>
  40a8e2:	3301      	adds	r3, #1
  40a8e4:	3210      	adds	r2, #16
  40a8e6:	f8cb 5000 	str.w	r5, [fp]
  40a8ea:	f10b 0b08 	add.w	fp, fp, #8
  40a8ee:	2b07      	cmp	r3, #7
  40a8f0:	f84b 6c04 	str.w	r6, [fp, #-4]
  40a8f4:	9225      	str	r2, [sp, #148]	; 0x94
  40a8f6:	9324      	str	r3, [sp, #144]	; 0x90
  40a8f8:	ddf0      	ble.n	40a8dc <_svfprintf_r+0xd3c>
  40a8fa:	4638      	mov	r0, r7
  40a8fc:	4649      	mov	r1, r9
  40a8fe:	aa23      	add	r2, sp, #140	; 0x8c
  40a900:	46c3      	mov	fp, r8
  40a902:	f003 fe3d 	bl	40e580 <__ssprint_r>
  40a906:	2800      	cmp	r0, #0
  40a908:	f47f aa0f 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a90c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a90e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a910:	e7e4      	b.n	40a8dc <_svfprintf_r+0xd3c>
  40a912:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a914:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40a916:	3201      	adds	r2, #1
  40a918:	9916      	ldr	r1, [sp, #88]	; 0x58
  40a91a:	4484      	add	ip, r0
  40a91c:	f8cb 0004 	str.w	r0, [fp, #4]
  40a920:	2a07      	cmp	r2, #7
  40a922:	f8cb 1000 	str.w	r1, [fp]
  40a926:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40a92a:	9224      	str	r2, [sp, #144]	; 0x90
  40a92c:	f300 8273 	bgt.w	40ae16 <_svfprintf_r+0x1276>
  40a930:	f10b 0b08 	add.w	fp, fp, #8
  40a934:	e7aa      	b.n	40a88c <_svfprintf_r+0xcec>
  40a936:	9b06      	ldr	r3, [sp, #24]
  40a938:	07d9      	lsls	r1, r3, #31
  40a93a:	f53f ae33 	bmi.w	40a5a4 <_svfprintf_r+0xa04>
  40a93e:	2301      	movs	r3, #1
  40a940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a942:	9625      	str	r6, [sp, #148]	; 0x94
  40a944:	441c      	add	r4, r3
  40a946:	f8cb 2000 	str.w	r2, [fp]
  40a94a:	f8cb 3004 	str.w	r3, [fp, #4]
  40a94e:	2c07      	cmp	r4, #7
  40a950:	9424      	str	r4, [sp, #144]	; 0x90
  40a952:	f77f ae5d 	ble.w	40a610 <_svfprintf_r+0xa70>
  40a956:	e75b      	b.n	40a810 <_svfprintf_r+0xc70>
  40a958:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a95a:	4649      	mov	r1, r9
  40a95c:	aa23      	add	r2, sp, #140	; 0x8c
  40a95e:	f003 fe0f 	bl	40e580 <__ssprint_r>
  40a962:	2800      	cmp	r0, #0
  40a964:	f47f a9e1 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a968:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40a96a:	46c3      	mov	fp, r8
  40a96c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40a96e:	e636      	b.n	40a5de <_svfprintf_r+0xa3e>
  40a970:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a972:	4649      	mov	r1, r9
  40a974:	aa23      	add	r2, sp, #140	; 0x8c
  40a976:	f003 fe03 	bl	40e580 <__ssprint_r>
  40a97a:	2800      	cmp	r0, #0
  40a97c:	f47f a9d5 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a980:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40a982:	46c3      	mov	fp, r8
  40a984:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40a986:	e61b      	b.n	40a5c0 <_svfprintf_r+0xa20>
  40a988:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a98a:	4649      	mov	r1, r9
  40a98c:	aa23      	add	r2, sp, #140	; 0x8c
  40a98e:	f003 fdf7 	bl	40e580 <__ssprint_r>
  40a992:	2800      	cmp	r0, #0
  40a994:	f47f a9c9 	bne.w	409d2a <_svfprintf_r+0x18a>
  40a998:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40a99c:	46c3      	mov	fp, r8
  40a99e:	f7ff ba9a 	b.w	409ed6 <_svfprintf_r+0x336>
  40a9a2:	2b30      	cmp	r3, #48	; 0x30
  40a9a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a9a6:	f43f adb4 	beq.w	40a512 <_svfprintf_r+0x972>
  40a9aa:	3b01      	subs	r3, #1
  40a9ac:	461a      	mov	r2, r3
  40a9ae:	930f      	str	r3, [sp, #60]	; 0x3c
  40a9b0:	2330      	movs	r3, #48	; 0x30
  40a9b2:	ebc2 0408 	rsb	r4, r2, r8
  40a9b6:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a9ba:	f7ff b9fd 	b.w	409db8 <_svfprintf_r+0x218>
  40a9be:	46c2      	mov	sl, r8
  40a9c0:	f8cd c01c 	str.w	ip, [sp, #28]
  40a9c4:	4620      	mov	r0, r4
  40a9c6:	4629      	mov	r1, r5
  40a9c8:	220a      	movs	r2, #10
  40a9ca:	2300      	movs	r3, #0
  40a9cc:	f004 f824 	bl	40ea18 <__aeabi_uldivmod>
  40a9d0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40a9d4:	4620      	mov	r0, r4
  40a9d6:	4629      	mov	r1, r5
  40a9d8:	2300      	movs	r3, #0
  40a9da:	220a      	movs	r2, #10
  40a9dc:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40a9e0:	f004 f81a 	bl	40ea18 <__aeabi_uldivmod>
  40a9e4:	4604      	mov	r4, r0
  40a9e6:	460d      	mov	r5, r1
  40a9e8:	ea54 0305 	orrs.w	r3, r4, r5
  40a9ec:	d1ea      	bne.n	40a9c4 <_svfprintf_r+0xe24>
  40a9ee:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40a9f2:	ebca 0408 	rsb	r4, sl, r8
  40a9f6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40a9fa:	f7ff b9dd 	b.w	409db8 <_svfprintf_r+0x218>
  40a9fe:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40aa00:	9914      	ldr	r1, [sp, #80]	; 0x50
  40aa02:	f8cd c01c 	str.w	ip, [sp, #28]
  40aa06:	f7fd fc5b 	bl	4082c0 <__fpclassifyd>
  40aa0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40aa0e:	2800      	cmp	r0, #0
  40aa10:	f040 80cc 	bne.w	40abac <_svfprintf_r+0x100c>
  40aa14:	9c06      	ldr	r4, [sp, #24]
  40aa16:	2103      	movs	r1, #3
  40aa18:	4a61      	ldr	r2, [pc, #388]	; (40aba0 <_svfprintf_r+0x1000>)
  40aa1a:	4b62      	ldr	r3, [pc, #392]	; (40aba4 <_svfprintf_r+0x1004>)
  40aa1c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40aa20:	9010      	str	r0, [sp, #64]	; 0x40
  40aa22:	2e47      	cmp	r6, #71	; 0x47
  40aa24:	bfd8      	it	le
  40aa26:	461a      	movle	r2, r3
  40aa28:	9406      	str	r4, [sp, #24]
  40aa2a:	9107      	str	r1, [sp, #28]
  40aa2c:	460c      	mov	r4, r1
  40aa2e:	9011      	str	r0, [sp, #68]	; 0x44
  40aa30:	920f      	str	r2, [sp, #60]	; 0x3c
  40aa32:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40aa36:	f7ff b9c6 	b.w	409dc6 <_svfprintf_r+0x226>
  40aa3a:	9b06      	ldr	r3, [sp, #24]
  40aa3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa3e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40aa42:	4613      	mov	r3, r2
  40aa44:	f43f abc9 	beq.w	40a1da <_svfprintf_r+0x63a>
  40aa48:	8814      	ldrh	r4, [r2, #0]
  40aa4a:	3204      	adds	r2, #4
  40aa4c:	2500      	movs	r5, #0
  40aa4e:	2301      	movs	r3, #1
  40aa50:	920c      	str	r2, [sp, #48]	; 0x30
  40aa52:	f7ff b988 	b.w	409d66 <_svfprintf_r+0x1c6>
  40aa56:	9b06      	ldr	r3, [sp, #24]
  40aa58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa5a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40aa5e:	4613      	mov	r3, r2
  40aa60:	f000 8130 	beq.w	40acc4 <_svfprintf_r+0x1124>
  40aa64:	3304      	adds	r3, #4
  40aa66:	8814      	ldrh	r4, [r2, #0]
  40aa68:	2500      	movs	r5, #0
  40aa6a:	930c      	str	r3, [sp, #48]	; 0x30
  40aa6c:	f7ff bbcd 	b.w	40a20a <_svfprintf_r+0x66a>
  40aa70:	9b06      	ldr	r3, [sp, #24]
  40aa72:	06dd      	lsls	r5, r3, #27
  40aa74:	d40b      	bmi.n	40aa8e <_svfprintf_r+0xeee>
  40aa76:	9b06      	ldr	r3, [sp, #24]
  40aa78:	065c      	lsls	r4, r3, #25
  40aa7a:	d508      	bpl.n	40aa8e <_svfprintf_r+0xeee>
  40aa7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa7e:	6813      	ldr	r3, [r2, #0]
  40aa80:	3204      	adds	r2, #4
  40aa82:	920c      	str	r2, [sp, #48]	; 0x30
  40aa84:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  40aa88:	801a      	strh	r2, [r3, #0]
  40aa8a:	f7ff b8af 	b.w	409bec <_svfprintf_r+0x4c>
  40aa8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aa90:	6813      	ldr	r3, [r2, #0]
  40aa92:	3204      	adds	r2, #4
  40aa94:	920c      	str	r2, [sp, #48]	; 0x30
  40aa96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40aa98:	601a      	str	r2, [r3, #0]
  40aa9a:	f7ff b8a7 	b.w	409bec <_svfprintf_r+0x4c>
  40aa9e:	9b06      	ldr	r3, [sp, #24]
  40aaa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40aaa2:	f013 0f40 	tst.w	r3, #64	; 0x40
  40aaa6:	4613      	mov	r3, r2
  40aaa8:	f43f ac26 	beq.w	40a2f8 <_svfprintf_r+0x758>
  40aaac:	f9b2 4000 	ldrsh.w	r4, [r2]
  40aab0:	3304      	adds	r3, #4
  40aab2:	17e5      	asrs	r5, r4, #31
  40aab4:	930c      	str	r3, [sp, #48]	; 0x30
  40aab6:	4622      	mov	r2, r4
  40aab8:	462b      	mov	r3, r5
  40aaba:	f7ff baf9 	b.w	40a0b0 <_svfprintf_r+0x510>
  40aabe:	4d37      	ldr	r5, [pc, #220]	; (40ab9c <_svfprintf_r+0xffc>)
  40aac0:	f7ff ba37 	b.w	409f32 <_svfprintf_r+0x392>
  40aac4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40aac6:	4649      	mov	r1, r9
  40aac8:	aa23      	add	r2, sp, #140	; 0x8c
  40aaca:	f003 fd59 	bl	40e580 <__ssprint_r>
  40aace:	2800      	cmp	r0, #0
  40aad0:	f47f a92b 	bne.w	409d2a <_svfprintf_r+0x18a>
  40aad4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40aad8:	46c3      	mov	fp, r8
  40aada:	e4b2      	b.n	40a442 <_svfprintf_r+0x8a2>
  40aadc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aade:	2201      	movs	r2, #1
  40aae0:	f10c 0c01 	add.w	ip, ip, #1
  40aae4:	4930      	ldr	r1, [pc, #192]	; (40aba8 <_svfprintf_r+0x1008>)
  40aae6:	4413      	add	r3, r2
  40aae8:	f8cb 2004 	str.w	r2, [fp, #4]
  40aaec:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40aaf0:	2b07      	cmp	r3, #7
  40aaf2:	f8cb 1000 	str.w	r1, [fp]
  40aaf6:	9324      	str	r3, [sp, #144]	; 0x90
  40aaf8:	f300 80fa 	bgt.w	40acf0 <_svfprintf_r+0x1150>
  40aafc:	f10b 0b08 	add.w	fp, fp, #8
  40ab00:	b92c      	cbnz	r4, 40ab0e <_svfprintf_r+0xf6e>
  40ab02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ab04:	b91b      	cbnz	r3, 40ab0e <_svfprintf_r+0xf6e>
  40ab06:	9b06      	ldr	r3, [sp, #24]
  40ab08:	07dd      	lsls	r5, r3, #31
  40ab0a:	f57f aa34 	bpl.w	409f76 <_svfprintf_r+0x3d6>
  40ab0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ab10:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40ab12:	3301      	adds	r3, #1
  40ab14:	9816      	ldr	r0, [sp, #88]	; 0x58
  40ab16:	eb0c 0201 	add.w	r2, ip, r1
  40ab1a:	f8cb 1004 	str.w	r1, [fp, #4]
  40ab1e:	2b07      	cmp	r3, #7
  40ab20:	f8cb 0000 	str.w	r0, [fp]
  40ab24:	9225      	str	r2, [sp, #148]	; 0x94
  40ab26:	9324      	str	r3, [sp, #144]	; 0x90
  40ab28:	f300 824c 	bgt.w	40afc4 <_svfprintf_r+0x1424>
  40ab2c:	f10b 0b08 	add.w	fp, fp, #8
  40ab30:	4264      	negs	r4, r4
  40ab32:	2c00      	cmp	r4, #0
  40ab34:	f340 8126 	ble.w	40ad84 <_svfprintf_r+0x11e4>
  40ab38:	2c10      	cmp	r4, #16
  40ab3a:	4d18      	ldr	r5, [pc, #96]	; (40ab9c <_svfprintf_r+0xffc>)
  40ab3c:	f340 814f 	ble.w	40adde <_svfprintf_r+0x123e>
  40ab40:	2610      	movs	r6, #16
  40ab42:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40ab44:	e003      	b.n	40ab4e <_svfprintf_r+0xfae>
  40ab46:	3c10      	subs	r4, #16
  40ab48:	2c10      	cmp	r4, #16
  40ab4a:	f340 8148 	ble.w	40adde <_svfprintf_r+0x123e>
  40ab4e:	3301      	adds	r3, #1
  40ab50:	3210      	adds	r2, #16
  40ab52:	f8cb 5000 	str.w	r5, [fp]
  40ab56:	f10b 0b08 	add.w	fp, fp, #8
  40ab5a:	2b07      	cmp	r3, #7
  40ab5c:	f84b 6c04 	str.w	r6, [fp, #-4]
  40ab60:	9225      	str	r2, [sp, #148]	; 0x94
  40ab62:	9324      	str	r3, [sp, #144]	; 0x90
  40ab64:	ddef      	ble.n	40ab46 <_svfprintf_r+0xfa6>
  40ab66:	4638      	mov	r0, r7
  40ab68:	4649      	mov	r1, r9
  40ab6a:	aa23      	add	r2, sp, #140	; 0x8c
  40ab6c:	46c3      	mov	fp, r8
  40ab6e:	f003 fd07 	bl	40e580 <__ssprint_r>
  40ab72:	2800      	cmp	r0, #0
  40ab74:	f47f a8d9 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ab78:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ab7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ab7c:	e7e3      	b.n	40ab46 <_svfprintf_r+0xfa6>
  40ab7e:	f041 0120 	orr.w	r1, r1, #32
  40ab82:	785e      	ldrb	r6, [r3, #1]
  40ab84:	9106      	str	r1, [sp, #24]
  40ab86:	1c59      	adds	r1, r3, #1
  40ab88:	f7ff b85f 	b.w	409c4a <_svfprintf_r+0xaa>
  40ab8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ab8e:	910c      	str	r1, [sp, #48]	; 0x30
  40ab90:	4619      	mov	r1, r3
  40ab92:	4240      	negs	r0, r0
  40ab94:	900b      	str	r0, [sp, #44]	; 0x2c
  40ab96:	f7ff ba43 	b.w	40a020 <_svfprintf_r+0x480>
  40ab9a:	bf00      	nop
  40ab9c:	0040fc80 	.word	0x0040fc80
  40aba0:	0040fcac 	.word	0x0040fcac
  40aba4:	0040fca8 	.word	0x0040fca8
  40aba8:	0040fce0 	.word	0x0040fce0
  40abac:	f1bc 3fff 	cmp.w	ip, #4294967295
  40abb0:	f026 0a20 	bic.w	sl, r6, #32
  40abb4:	f000 80a9 	beq.w	40ad0a <_svfprintf_r+0x116a>
  40abb8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40abbc:	f040 80a7 	bne.w	40ad0e <_svfprintf_r+0x116e>
  40abc0:	f1bc 0f00 	cmp.w	ip, #0
  40abc4:	f040 80a3 	bne.w	40ad0e <_svfprintf_r+0x116e>
  40abc8:	9b06      	ldr	r3, [sp, #24]
  40abca:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40abce:	f04f 0c01 	mov.w	ip, #1
  40abd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40abd6:	930e      	str	r3, [sp, #56]	; 0x38
  40abd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40abda:	2b00      	cmp	r3, #0
  40abdc:	f2c0 81ff 	blt.w	40afde <_svfprintf_r+0x143e>
  40abe0:	461d      	mov	r5, r3
  40abe2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40abe4:	2300      	movs	r3, #0
  40abe6:	930d      	str	r3, [sp, #52]	; 0x34
  40abe8:	2002      	movs	r0, #2
  40abea:	a91d      	add	r1, sp, #116	; 0x74
  40abec:	f8cd c004 	str.w	ip, [sp, #4]
  40abf0:	463a      	mov	r2, r7
  40abf2:	9000      	str	r0, [sp, #0]
  40abf4:	a81e      	add	r0, sp, #120	; 0x78
  40abf6:	9102      	str	r1, [sp, #8]
  40abf8:	a921      	add	r1, sp, #132	; 0x84
  40abfa:	9003      	str	r0, [sp, #12]
  40abfc:	462b      	mov	r3, r5
  40abfe:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ac00:	9104      	str	r1, [sp, #16]
  40ac02:	f8cd c01c 	str.w	ip, [sp, #28]
  40ac06:	f001 f9e3 	bl	40bfd0 <_dtoa_r>
  40ac0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40ac0e:	900f      	str	r0, [sp, #60]	; 0x3c
  40ac10:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40ac14:	f040 8242 	bne.w	40b09c <_svfprintf_r+0x14fc>
  40ac18:	9b06      	ldr	r3, [sp, #24]
  40ac1a:	07db      	lsls	r3, r3, #31
  40ac1c:	f140 81f3 	bpl.w	40b006 <_svfprintf_r+0x1466>
  40ac20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ac22:	eb03 040c 	add.w	r4, r3, ip
  40ac26:	4638      	mov	r0, r7
  40ac28:	2200      	movs	r2, #0
  40ac2a:	2300      	movs	r3, #0
  40ac2c:	4629      	mov	r1, r5
  40ac2e:	f8cd c01c 	str.w	ip, [sp, #28]
  40ac32:	f7fe f819 	bl	408c68 <__aeabi_dcmpeq>
  40ac36:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40ac3a:	2800      	cmp	r0, #0
  40ac3c:	f040 8172 	bne.w	40af24 <_svfprintf_r+0x1384>
  40ac40:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ac42:	429c      	cmp	r4, r3
  40ac44:	d906      	bls.n	40ac54 <_svfprintf_r+0x10b4>
  40ac46:	2130      	movs	r1, #48	; 0x30
  40ac48:	1c5a      	adds	r2, r3, #1
  40ac4a:	9221      	str	r2, [sp, #132]	; 0x84
  40ac4c:	7019      	strb	r1, [r3, #0]
  40ac4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ac50:	429c      	cmp	r4, r3
  40ac52:	d8f9      	bhi.n	40ac48 <_svfprintf_r+0x10a8>
  40ac54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ac56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40ac5a:	eba3 0302 	sub.w	r3, r3, r2
  40ac5e:	9312      	str	r3, [sp, #72]	; 0x48
  40ac60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ac62:	f040 8113 	bne.w	40ae8c <_svfprintf_r+0x12ec>
  40ac66:	459c      	cmp	ip, r3
  40ac68:	f2c0 8168 	blt.w	40af3c <_svfprintf_r+0x139c>
  40ac6c:	1cd9      	adds	r1, r3, #3
  40ac6e:	f2c0 8165 	blt.w	40af3c <_svfprintf_r+0x139c>
  40ac72:	2667      	movs	r6, #103	; 0x67
  40ac74:	9311      	str	r3, [sp, #68]	; 0x44
  40ac76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ac78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ac7a:	4293      	cmp	r3, r2
  40ac7c:	f300 81b6 	bgt.w	40afec <_svfprintf_r+0x144c>
  40ac80:	9b06      	ldr	r3, [sp, #24]
  40ac82:	07df      	lsls	r7, r3, #31
  40ac84:	f100 81c1 	bmi.w	40b00a <_svfprintf_r+0x146a>
  40ac88:	4614      	mov	r4, r2
  40ac8a:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  40ac8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ac90:	2b00      	cmp	r3, #0
  40ac92:	f040 80f0 	bne.w	40ae76 <_svfprintf_r+0x12d6>
  40ac96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ac98:	f8cd c01c 	str.w	ip, [sp, #28]
  40ac9c:	9306      	str	r3, [sp, #24]
  40ac9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40aca0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40aca4:	9310      	str	r3, [sp, #64]	; 0x40
  40aca6:	f7ff b88e 	b.w	409dc6 <_svfprintf_r+0x226>
  40acaa:	9809      	ldr	r0, [sp, #36]	; 0x24
  40acac:	4649      	mov	r1, r9
  40acae:	aa23      	add	r2, sp, #140	; 0x8c
  40acb0:	f003 fc66 	bl	40e580 <__ssprint_r>
  40acb4:	2800      	cmp	r0, #0
  40acb6:	f47f a838 	bne.w	409d2a <_svfprintf_r+0x18a>
  40acba:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40acbe:	46c3      	mov	fp, r8
  40acc0:	f7ff bbd8 	b.w	40a474 <_svfprintf_r+0x8d4>
  40acc4:	3304      	adds	r3, #4
  40acc6:	6814      	ldr	r4, [r2, #0]
  40acc8:	2500      	movs	r5, #0
  40acca:	930c      	str	r3, [sp, #48]	; 0x30
  40accc:	f7ff ba9d 	b.w	40a20a <_svfprintf_r+0x66a>
  40acd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40acd2:	2140      	movs	r1, #64	; 0x40
  40acd4:	f7fe f918 	bl	408f08 <_malloc_r>
  40acd8:	f8c9 0000 	str.w	r0, [r9]
  40acdc:	f8c9 0010 	str.w	r0, [r9, #16]
  40ace0:	2800      	cmp	r0, #0
  40ace2:	f000 81d4 	beq.w	40b08e <_svfprintf_r+0x14ee>
  40ace6:	2340      	movs	r3, #64	; 0x40
  40ace8:	f8c9 3014 	str.w	r3, [r9, #20]
  40acec:	f7fe bf70 	b.w	409bd0 <_svfprintf_r+0x30>
  40acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40acf2:	4649      	mov	r1, r9
  40acf4:	aa23      	add	r2, sp, #140	; 0x8c
  40acf6:	f003 fc43 	bl	40e580 <__ssprint_r>
  40acfa:	2800      	cmp	r0, #0
  40acfc:	f47f a815 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ad00:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40ad02:	46c3      	mov	fp, r8
  40ad04:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40ad08:	e6fa      	b.n	40ab00 <_svfprintf_r+0xf60>
  40ad0a:	f04f 0c06 	mov.w	ip, #6
  40ad0e:	9b06      	ldr	r3, [sp, #24]
  40ad10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40ad14:	930e      	str	r3, [sp, #56]	; 0x38
  40ad16:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ad18:	2b00      	cmp	r3, #0
  40ad1a:	f2c0 8160 	blt.w	40afde <_svfprintf_r+0x143e>
  40ad1e:	461d      	mov	r5, r3
  40ad20:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40ad22:	2300      	movs	r3, #0
  40ad24:	930d      	str	r3, [sp, #52]	; 0x34
  40ad26:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40ad2a:	f000 80c4 	beq.w	40aeb6 <_svfprintf_r+0x1316>
  40ad2e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40ad32:	f47f af59 	bne.w	40abe8 <_svfprintf_r+0x1048>
  40ad36:	f10c 0401 	add.w	r4, ip, #1
  40ad3a:	f8cd c01c 	str.w	ip, [sp, #28]
  40ad3e:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  40ad42:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  40ad46:	a81e      	add	r0, sp, #120	; 0x78
  40ad48:	2102      	movs	r1, #2
  40ad4a:	f8cd c010 	str.w	ip, [sp, #16]
  40ad4e:	463a      	mov	r2, r7
  40ad50:	9003      	str	r0, [sp, #12]
  40ad52:	462b      	mov	r3, r5
  40ad54:	9401      	str	r4, [sp, #4]
  40ad56:	9100      	str	r1, [sp, #0]
  40ad58:	f8cd e008 	str.w	lr, [sp, #8]
  40ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ad5e:	f001 f937 	bl	40bfd0 <_dtoa_r>
  40ad62:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40ad66:	900f      	str	r0, [sp, #60]	; 0x3c
  40ad68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ad6a:	441c      	add	r4, r3
  40ad6c:	e75b      	b.n	40ac26 <_svfprintf_r+0x1086>
  40ad6e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ad70:	4649      	mov	r1, r9
  40ad72:	aa23      	add	r2, sp, #140	; 0x8c
  40ad74:	f003 fc04 	bl	40e580 <__ssprint_r>
  40ad78:	2800      	cmp	r0, #0
  40ad7a:	f47e afd6 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ad7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ad80:	46c3      	mov	fp, r8
  40ad82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ad84:	9812      	ldr	r0, [sp, #72]	; 0x48
  40ad86:	3301      	adds	r3, #1
  40ad88:	eb02 0c00 	add.w	ip, r2, r0
  40ad8c:	2b07      	cmp	r3, #7
  40ad8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ad90:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40ad94:	f8cb 2000 	str.w	r2, [fp]
  40ad98:	9324      	str	r3, [sp, #144]	; 0x90
  40ad9a:	f8cb 0004 	str.w	r0, [fp, #4]
  40ad9e:	f77f a8e8 	ble.w	409f72 <_svfprintf_r+0x3d2>
  40ada2:	e446      	b.n	40a632 <_svfprintf_r+0xa92>
  40ada4:	9510      	str	r5, [sp, #64]	; 0x40
  40ada6:	f7fe fdf9 	bl	40999c <strlen>
  40adaa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40adae:	970c      	str	r7, [sp, #48]	; 0x30
  40adb0:	4604      	mov	r4, r0
  40adb2:	9511      	str	r5, [sp, #68]	; 0x44
  40adb4:	9307      	str	r3, [sp, #28]
  40adb6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40adba:	f7ff b804 	b.w	409dc6 <_svfprintf_r+0x226>
  40adbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40adc0:	4fb7      	ldr	r7, [pc, #732]	; (40b0a0 <_svfprintf_r+0x1500>)
  40adc2:	f7ff b84b 	b.w	409e5c <_svfprintf_r+0x2bc>
  40adc6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40adc8:	4649      	mov	r1, r9
  40adca:	aa23      	add	r2, sp, #140	; 0x8c
  40adcc:	f003 fbd8 	bl	40e580 <__ssprint_r>
  40add0:	2800      	cmp	r0, #0
  40add2:	f47e afaa 	bne.w	409d2a <_svfprintf_r+0x18a>
  40add6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40adda:	46c3      	mov	fp, r8
  40addc:	e4a2      	b.n	40a724 <_svfprintf_r+0xb84>
  40adde:	3301      	adds	r3, #1
  40ade0:	4422      	add	r2, r4
  40ade2:	f8cb 5000 	str.w	r5, [fp]
  40ade6:	2b07      	cmp	r3, #7
  40ade8:	9225      	str	r2, [sp, #148]	; 0x94
  40adea:	9324      	str	r3, [sp, #144]	; 0x90
  40adec:	f8cb 4004 	str.w	r4, [fp, #4]
  40adf0:	dcbd      	bgt.n	40ad6e <_svfprintf_r+0x11ce>
  40adf2:	f10b 0b08 	add.w	fp, fp, #8
  40adf6:	e7c5      	b.n	40ad84 <_svfprintf_r+0x11e4>
  40adf8:	9809      	ldr	r0, [sp, #36]	; 0x24
  40adfa:	4649      	mov	r1, r9
  40adfc:	aa23      	add	r2, sp, #140	; 0x8c
  40adfe:	f003 fbbf 	bl	40e580 <__ssprint_r>
  40ae02:	2800      	cmp	r0, #0
  40ae04:	f47e af91 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ae08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ae0a:	46c3      	mov	fp, r8
  40ae0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40ae0e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40ae12:	1ad3      	subs	r3, r2, r3
  40ae14:	e552      	b.n	40a8bc <_svfprintf_r+0xd1c>
  40ae16:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ae18:	4649      	mov	r1, r9
  40ae1a:	aa23      	add	r2, sp, #140	; 0x8c
  40ae1c:	f003 fbb0 	bl	40e580 <__ssprint_r>
  40ae20:	2800      	cmp	r0, #0
  40ae22:	f47e af82 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ae26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ae28:	46c3      	mov	fp, r8
  40ae2a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40ae2e:	e52d      	b.n	40a88c <_svfprintf_r+0xcec>
  40ae30:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ae32:	4649      	mov	r1, r9
  40ae34:	aa23      	add	r2, sp, #140	; 0x8c
  40ae36:	f003 fba3 	bl	40e580 <__ssprint_r>
  40ae3a:	2800      	cmp	r0, #0
  40ae3c:	f47e af75 	bne.w	409d2a <_svfprintf_r+0x18a>
  40ae40:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40ae44:	46c3      	mov	fp, r8
  40ae46:	e516      	b.n	40a876 <_svfprintf_r+0xcd6>
  40ae48:	2c06      	cmp	r4, #6
  40ae4a:	970c      	str	r7, [sp, #48]	; 0x30
  40ae4c:	9310      	str	r3, [sp, #64]	; 0x40
  40ae4e:	461f      	mov	r7, r3
  40ae50:	bf28      	it	cs
  40ae52:	2406      	movcs	r4, #6
  40ae54:	9711      	str	r7, [sp, #68]	; 0x44
  40ae56:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ae5a:	9307      	str	r3, [sp, #28]
  40ae5c:	4b91      	ldr	r3, [pc, #580]	; (40b0a4 <_svfprintf_r+0x1504>)
  40ae5e:	930f      	str	r3, [sp, #60]	; 0x3c
  40ae60:	f7fe bfb1 	b.w	409dc6 <_svfprintf_r+0x226>
  40ae64:	4f8e      	ldr	r7, [pc, #568]	; (40b0a0 <_svfprintf_r+0x1500>)
  40ae66:	f7ff b8b5 	b.w	409fd4 <_svfprintf_r+0x434>
  40ae6a:	232d      	movs	r3, #45	; 0x2d
  40ae6c:	461f      	mov	r7, r3
  40ae6e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40ae72:	f7ff ba7a 	b.w	40a36a <_svfprintf_r+0x7ca>
  40ae76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ae78:	272d      	movs	r7, #45	; 0x2d
  40ae7a:	f8cd c01c 	str.w	ip, [sp, #28]
  40ae7e:	9306      	str	r3, [sp, #24]
  40ae80:	2300      	movs	r3, #0
  40ae82:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40ae86:	9310      	str	r3, [sp, #64]	; 0x40
  40ae88:	f7fe bf9e 	b.w	409dc8 <_svfprintf_r+0x228>
  40ae8c:	2e65      	cmp	r6, #101	; 0x65
  40ae8e:	dd56      	ble.n	40af3e <_svfprintf_r+0x139e>
  40ae90:	2e66      	cmp	r6, #102	; 0x66
  40ae92:	9311      	str	r3, [sp, #68]	; 0x44
  40ae94:	f47f aeef 	bne.w	40ac76 <_svfprintf_r+0x10d6>
  40ae98:	2b00      	cmp	r3, #0
  40ae9a:	f340 80d6 	ble.w	40b04a <_svfprintf_r+0x14aa>
  40ae9e:	f1bc 0f00 	cmp.w	ip, #0
  40aea2:	f040 80c1 	bne.w	40b028 <_svfprintf_r+0x1488>
  40aea6:	9b06      	ldr	r3, [sp, #24]
  40aea8:	07da      	lsls	r2, r3, #31
  40aeaa:	f100 80bd 	bmi.w	40b028 <_svfprintf_r+0x1488>
  40aeae:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40aeb0:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40aeb4:	e6eb      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40aeb6:	2003      	movs	r0, #3
  40aeb8:	a91d      	add	r1, sp, #116	; 0x74
  40aeba:	463a      	mov	r2, r7
  40aebc:	f8cd c004 	str.w	ip, [sp, #4]
  40aec0:	9000      	str	r0, [sp, #0]
  40aec2:	a81e      	add	r0, sp, #120	; 0x78
  40aec4:	9102      	str	r1, [sp, #8]
  40aec6:	a921      	add	r1, sp, #132	; 0x84
  40aec8:	462b      	mov	r3, r5
  40aeca:	9003      	str	r0, [sp, #12]
  40aecc:	9104      	str	r1, [sp, #16]
  40aece:	9809      	ldr	r0, [sp, #36]	; 0x24
  40aed0:	f8cd c01c 	str.w	ip, [sp, #28]
  40aed4:	f001 f87c 	bl	40bfd0 <_dtoa_r>
  40aed8:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40aedc:	4602      	mov	r2, r0
  40aede:	7803      	ldrb	r3, [r0, #0]
  40aee0:	4462      	add	r2, ip
  40aee2:	900f      	str	r0, [sp, #60]	; 0x3c
  40aee4:	2b30      	cmp	r3, #48	; 0x30
  40aee6:	9207      	str	r2, [sp, #28]
  40aee8:	f040 808b 	bne.w	40b002 <_svfprintf_r+0x1462>
  40aeec:	4638      	mov	r0, r7
  40aeee:	2200      	movs	r2, #0
  40aef0:	2300      	movs	r3, #0
  40aef2:	4629      	mov	r1, r5
  40aef4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40aef8:	f04f 0401 	mov.w	r4, #1
  40aefc:	f7fd feb4 	bl	408c68 <__aeabi_dcmpeq>
  40af00:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40af04:	b108      	cbz	r0, 40af0a <_svfprintf_r+0x136a>
  40af06:	f04f 0400 	mov.w	r4, #0
  40af0a:	f014 0fff 	tst.w	r4, #255	; 0xff
  40af0e:	d078      	beq.n	40b002 <_svfprintf_r+0x1462>
  40af10:	f1cc 0401 	rsb	r4, ip, #1
  40af14:	941d      	str	r4, [sp, #116]	; 0x74
  40af16:	9b07      	ldr	r3, [sp, #28]
  40af18:	4423      	add	r3, r4
  40af1a:	461c      	mov	r4, r3
  40af1c:	e683      	b.n	40ac26 <_svfprintf_r+0x1086>
  40af1e:	4d62      	ldr	r5, [pc, #392]	; (40b0a8 <_svfprintf_r+0x1508>)
  40af20:	f7ff bb2a 	b.w	40a578 <_svfprintf_r+0x9d8>
  40af24:	4623      	mov	r3, r4
  40af26:	e695      	b.n	40ac54 <_svfprintf_r+0x10b4>
  40af28:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40af2c:	970c      	str	r7, [sp, #48]	; 0x30
  40af2e:	9010      	str	r0, [sp, #64]	; 0x40
  40af30:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40af34:	9307      	str	r3, [sp, #28]
  40af36:	9011      	str	r0, [sp, #68]	; 0x44
  40af38:	f7fe bf45 	b.w	409dc6 <_svfprintf_r+0x226>
  40af3c:	3e02      	subs	r6, #2
  40af3e:	3b01      	subs	r3, #1
  40af40:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  40af44:	2b00      	cmp	r3, #0
  40af46:	931d      	str	r3, [sp, #116]	; 0x74
  40af48:	db75      	blt.n	40b036 <_svfprintf_r+0x1496>
  40af4a:	222b      	movs	r2, #43	; 0x2b
  40af4c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40af50:	2b09      	cmp	r3, #9
  40af52:	dd61      	ble.n	40b018 <_svfprintf_r+0x1478>
  40af54:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  40af58:	4601      	mov	r1, r0
  40af5a:	4a54      	ldr	r2, [pc, #336]	; (40b0ac <_svfprintf_r+0x150c>)
  40af5c:	fb82 2403 	smull	r2, r4, r2, r3
  40af60:	17da      	asrs	r2, r3, #31
  40af62:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40af66:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40af6a:	2c09      	cmp	r4, #9
  40af6c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40af70:	4623      	mov	r3, r4
  40af72:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40af76:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40af7a:	dcee      	bgt.n	40af5a <_svfprintf_r+0x13ba>
  40af7c:	3330      	adds	r3, #48	; 0x30
  40af7e:	460a      	mov	r2, r1
  40af80:	b2db      	uxtb	r3, r3
  40af82:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40af86:	4290      	cmp	r0, r2
  40af88:	d97e      	bls.n	40b088 <_svfprintf_r+0x14e8>
  40af8a:	460a      	mov	r2, r1
  40af8c:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  40af90:	e001      	b.n	40af96 <_svfprintf_r+0x13f6>
  40af92:	f812 3b01 	ldrb.w	r3, [r2], #1
  40af96:	4282      	cmp	r2, r0
  40af98:	f804 3b01 	strb.w	r3, [r4], #1
  40af9c:	d1f9      	bne.n	40af92 <_svfprintf_r+0x13f2>
  40af9e:	ab23      	add	r3, sp, #140	; 0x8c
  40afa0:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40afa4:	1a5b      	subs	r3, r3, r1
  40afa6:	4413      	add	r3, r2
  40afa8:	aa1f      	add	r2, sp, #124	; 0x7c
  40afaa:	1a9b      	subs	r3, r3, r2
  40afac:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40afae:	2a01      	cmp	r2, #1
  40afb0:	9319      	str	r3, [sp, #100]	; 0x64
  40afb2:	eb02 0403 	add.w	r4, r2, r3
  40afb6:	dd43      	ble.n	40b040 <_svfprintf_r+0x14a0>
  40afb8:	3401      	adds	r4, #1
  40afba:	2300      	movs	r3, #0
  40afbc:	9311      	str	r3, [sp, #68]	; 0x44
  40afbe:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40afc2:	e664      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40afc4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40afc6:	4649      	mov	r1, r9
  40afc8:	aa23      	add	r2, sp, #140	; 0x8c
  40afca:	f003 fad9 	bl	40e580 <__ssprint_r>
  40afce:	2800      	cmp	r0, #0
  40afd0:	f47e aeab 	bne.w	409d2a <_svfprintf_r+0x18a>
  40afd4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40afd6:	46c3      	mov	fp, r8
  40afd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40afda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40afdc:	e5a8      	b.n	40ab30 <_svfprintf_r+0xf90>
  40afde:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40afe0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40afe2:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  40afe6:	232d      	movs	r3, #45	; 0x2d
  40afe8:	930d      	str	r3, [sp, #52]	; 0x34
  40afea:	e69c      	b.n	40ad26 <_svfprintf_r+0x1186>
  40afec:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40afee:	2b00      	cmp	r3, #0
  40aff0:	dd35      	ble.n	40b05e <_svfprintf_r+0x14be>
  40aff2:	2401      	movs	r4, #1
  40aff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40aff6:	441c      	add	r4, r3
  40aff8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40affc:	e647      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40affe:	4d2a      	ldr	r5, [pc, #168]	; (40b0a8 <_svfprintf_r+0x1508>)
  40b000:	e413      	b.n	40a82a <_svfprintf_r+0xc8a>
  40b002:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40b004:	e787      	b.n	40af16 <_svfprintf_r+0x1376>
  40b006:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b008:	e624      	b.n	40ac54 <_svfprintf_r+0x10b4>
  40b00a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b00c:	1c5c      	adds	r4, r3, #1
  40b00e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40b012:	e63c      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40b014:	4d24      	ldr	r5, [pc, #144]	; (40b0a8 <_svfprintf_r+0x1508>)
  40b016:	e420      	b.n	40a85a <_svfprintf_r+0xcba>
  40b018:	3330      	adds	r3, #48	; 0x30
  40b01a:	2230      	movs	r2, #48	; 0x30
  40b01c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40b020:	ab20      	add	r3, sp, #128	; 0x80
  40b022:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40b026:	e7bf      	b.n	40afa8 <_svfprintf_r+0x1408>
  40b028:	f10c 0401 	add.w	r4, ip, #1
  40b02c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b02e:	441c      	add	r4, r3
  40b030:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40b034:	e62b      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40b036:	222d      	movs	r2, #45	; 0x2d
  40b038:	425b      	negs	r3, r3
  40b03a:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40b03e:	e787      	b.n	40af50 <_svfprintf_r+0x13b0>
  40b040:	9b06      	ldr	r3, [sp, #24]
  40b042:	f013 0301 	ands.w	r3, r3, #1
  40b046:	d0b9      	beq.n	40afbc <_svfprintf_r+0x141c>
  40b048:	e7b6      	b.n	40afb8 <_svfprintf_r+0x1418>
  40b04a:	f1bc 0f00 	cmp.w	ip, #0
  40b04e:	d109      	bne.n	40b064 <_svfprintf_r+0x14c4>
  40b050:	9b06      	ldr	r3, [sp, #24]
  40b052:	07db      	lsls	r3, r3, #31
  40b054:	d406      	bmi.n	40b064 <_svfprintf_r+0x14c4>
  40b056:	f04f 0c01 	mov.w	ip, #1
  40b05a:	4664      	mov	r4, ip
  40b05c:	e617      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40b05e:	f1c3 0402 	rsb	r4, r3, #2
  40b062:	e7c7      	b.n	40aff4 <_svfprintf_r+0x1454>
  40b064:	f10c 0402 	add.w	r4, ip, #2
  40b068:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40b06c:	e60f      	b.n	40ac8e <_svfprintf_r+0x10ee>
  40b06e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40b070:	785e      	ldrb	r6, [r3, #1]
  40b072:	4628      	mov	r0, r5
  40b074:	682c      	ldr	r4, [r5, #0]
  40b076:	3004      	adds	r0, #4
  40b078:	2c00      	cmp	r4, #0
  40b07a:	900c      	str	r0, [sp, #48]	; 0x30
  40b07c:	f6be ade5 	bge.w	409c4a <_svfprintf_r+0xaa>
  40b080:	f04f 34ff 	mov.w	r4, #4294967295
  40b084:	f7fe bde1 	b.w	409c4a <_svfprintf_r+0xaa>
  40b088:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40b08c:	e78c      	b.n	40afa8 <_svfprintf_r+0x1408>
  40b08e:	230c      	movs	r3, #12
  40b090:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b092:	f04f 30ff 	mov.w	r0, #4294967295
  40b096:	6013      	str	r3, [r2, #0]
  40b098:	f7fe be50 	b.w	409d3c <_svfprintf_r+0x19c>
  40b09c:	4664      	mov	r4, ip
  40b09e:	e663      	b.n	40ad68 <_svfprintf_r+0x11c8>
  40b0a0:	0040fc90 	.word	0x0040fc90
  40b0a4:	0040fcd8 	.word	0x0040fcd8
  40b0a8:	0040fc80 	.word	0x0040fc80
  40b0ac:	66666667 	.word	0x66666667

0040b0b0 <__sprint_r.part.0>:
  40b0b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b0b6:	049c      	lsls	r4, r3, #18
  40b0b8:	460f      	mov	r7, r1
  40b0ba:	4692      	mov	sl, r2
  40b0bc:	d52a      	bpl.n	40b114 <__sprint_r.part.0+0x64>
  40b0be:	6893      	ldr	r3, [r2, #8]
  40b0c0:	6812      	ldr	r2, [r2, #0]
  40b0c2:	b32b      	cbz	r3, 40b110 <__sprint_r.part.0+0x60>
  40b0c4:	4680      	mov	r8, r0
  40b0c6:	f102 0908 	add.w	r9, r2, #8
  40b0ca:	e919 0060 	ldmdb	r9, {r5, r6}
  40b0ce:	08b6      	lsrs	r6, r6, #2
  40b0d0:	d016      	beq.n	40b100 <__sprint_r.part.0+0x50>
  40b0d2:	3d04      	subs	r5, #4
  40b0d4:	2400      	movs	r4, #0
  40b0d6:	e001      	b.n	40b0dc <__sprint_r.part.0+0x2c>
  40b0d8:	42a6      	cmp	r6, r4
  40b0da:	d00f      	beq.n	40b0fc <__sprint_r.part.0+0x4c>
  40b0dc:	4640      	mov	r0, r8
  40b0de:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40b0e2:	463a      	mov	r2, r7
  40b0e4:	3401      	adds	r4, #1
  40b0e6:	f002 f89d 	bl	40d224 <_fputwc_r>
  40b0ea:	1c43      	adds	r3, r0, #1
  40b0ec:	d1f4      	bne.n	40b0d8 <__sprint_r.part.0+0x28>
  40b0ee:	2300      	movs	r3, #0
  40b0f0:	f8ca 3008 	str.w	r3, [sl, #8]
  40b0f4:	f8ca 3004 	str.w	r3, [sl, #4]
  40b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b0fc:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b100:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40b104:	f109 0908 	add.w	r9, r9, #8
  40b108:	f8ca 3008 	str.w	r3, [sl, #8]
  40b10c:	2b00      	cmp	r3, #0
  40b10e:	d1dc      	bne.n	40b0ca <__sprint_r.part.0+0x1a>
  40b110:	2000      	movs	r0, #0
  40b112:	e7ec      	b.n	40b0ee <__sprint_r.part.0+0x3e>
  40b114:	f002 f9be 	bl	40d494 <__sfvwrite_r>
  40b118:	2300      	movs	r3, #0
  40b11a:	f8ca 3008 	str.w	r3, [sl, #8]
  40b11e:	f8ca 3004 	str.w	r3, [sl, #4]
  40b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b126:	bf00      	nop

0040b128 <_vfiprintf_r>:
  40b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b12c:	461c      	mov	r4, r3
  40b12e:	b0ad      	sub	sp, #180	; 0xb4
  40b130:	4692      	mov	sl, r2
  40b132:	9101      	str	r1, [sp, #4]
  40b134:	9002      	str	r0, [sp, #8]
  40b136:	9406      	str	r4, [sp, #24]
  40b138:	b118      	cbz	r0, 40b142 <_vfiprintf_r+0x1a>
  40b13a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b13c:	2b00      	cmp	r3, #0
  40b13e:	f000 80de 	beq.w	40b2fe <_vfiprintf_r+0x1d6>
  40b142:	9b01      	ldr	r3, [sp, #4]
  40b144:	8999      	ldrh	r1, [r3, #12]
  40b146:	b28a      	uxth	r2, r1
  40b148:	0490      	lsls	r0, r2, #18
  40b14a:	d408      	bmi.n	40b15e <_vfiprintf_r+0x36>
  40b14c:	461d      	mov	r5, r3
  40b14e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40b152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40b154:	b28a      	uxth	r2, r1
  40b156:	81a9      	strh	r1, [r5, #12]
  40b158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40b15c:	666b      	str	r3, [r5, #100]	; 0x64
  40b15e:	0711      	lsls	r1, r2, #28
  40b160:	f140 80ad 	bpl.w	40b2be <_vfiprintf_r+0x196>
  40b164:	9b01      	ldr	r3, [sp, #4]
  40b166:	691b      	ldr	r3, [r3, #16]
  40b168:	2b00      	cmp	r3, #0
  40b16a:	f000 80a8 	beq.w	40b2be <_vfiprintf_r+0x196>
  40b16e:	f002 021a 	and.w	r2, r2, #26
  40b172:	2a0a      	cmp	r2, #10
  40b174:	f000 80af 	beq.w	40b2d6 <_vfiprintf_r+0x1ae>
  40b178:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40b17c:	2300      	movs	r3, #0
  40b17e:	465c      	mov	r4, fp
  40b180:	930a      	str	r3, [sp, #40]	; 0x28
  40b182:	9311      	str	r3, [sp, #68]	; 0x44
  40b184:	9303      	str	r3, [sp, #12]
  40b186:	9310      	str	r3, [sp, #64]	; 0x40
  40b188:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40b18c:	f89a 3000 	ldrb.w	r3, [sl]
  40b190:	4655      	mov	r5, sl
  40b192:	2b25      	cmp	r3, #37	; 0x25
  40b194:	d01c      	beq.n	40b1d0 <_vfiprintf_r+0xa8>
  40b196:	b90b      	cbnz	r3, 40b19c <_vfiprintf_r+0x74>
  40b198:	e01a      	b.n	40b1d0 <_vfiprintf_r+0xa8>
  40b19a:	b11b      	cbz	r3, 40b1a4 <_vfiprintf_r+0x7c>
  40b19c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40b1a0:	2b25      	cmp	r3, #37	; 0x25
  40b1a2:	d1fa      	bne.n	40b19a <_vfiprintf_r+0x72>
  40b1a4:	ebb5 060a 	subs.w	r6, r5, sl
  40b1a8:	d012      	beq.n	40b1d0 <_vfiprintf_r+0xa8>
  40b1aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b1ae:	3301      	adds	r3, #1
  40b1b0:	f8c4 a000 	str.w	sl, [r4]
  40b1b4:	4432      	add	r2, r6
  40b1b6:	6066      	str	r6, [r4, #4]
  40b1b8:	2b07      	cmp	r3, #7
  40b1ba:	9310      	str	r3, [sp, #64]	; 0x40
  40b1bc:	9211      	str	r2, [sp, #68]	; 0x44
  40b1be:	dd79      	ble.n	40b2b4 <_vfiprintf_r+0x18c>
  40b1c0:	2a00      	cmp	r2, #0
  40b1c2:	f040 84a5 	bne.w	40bb10 <_vfiprintf_r+0x9e8>
  40b1c6:	9b03      	ldr	r3, [sp, #12]
  40b1c8:	465c      	mov	r4, fp
  40b1ca:	9210      	str	r2, [sp, #64]	; 0x40
  40b1cc:	4433      	add	r3, r6
  40b1ce:	9303      	str	r3, [sp, #12]
  40b1d0:	782b      	ldrb	r3, [r5, #0]
  40b1d2:	2b00      	cmp	r3, #0
  40b1d4:	f000 833a 	beq.w	40b84c <_vfiprintf_r+0x724>
  40b1d8:	2100      	movs	r1, #0
  40b1da:	f04f 0300 	mov.w	r3, #0
  40b1de:	f04f 38ff 	mov.w	r8, #4294967295
  40b1e2:	1c68      	adds	r0, r5, #1
  40b1e4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40b1e8:	4689      	mov	r9, r1
  40b1ea:	786b      	ldrb	r3, [r5, #1]
  40b1ec:	4646      	mov	r6, r8
  40b1ee:	460d      	mov	r5, r1
  40b1f0:	f100 0a01 	add.w	sl, r0, #1
  40b1f4:	f1a3 0220 	sub.w	r2, r3, #32
  40b1f8:	2a58      	cmp	r2, #88	; 0x58
  40b1fa:	f200 8301 	bhi.w	40b800 <_vfiprintf_r+0x6d8>
  40b1fe:	e8df f012 	tbh	[pc, r2, lsl #1]
  40b202:	0247      	.short	0x0247
  40b204:	02ff02ff 	.word	0x02ff02ff
  40b208:	02ff0255 	.word	0x02ff0255
  40b20c:	02ff02ff 	.word	0x02ff02ff
  40b210:	02ff02ff 	.word	0x02ff02ff
  40b214:	025b02ff 	.word	0x025b02ff
  40b218:	02ff0268 	.word	0x02ff0268
  40b21c:	01ba0181 	.word	0x01ba0181
  40b220:	028702ff 	.word	0x028702ff
  40b224:	028d028d 	.word	0x028d028d
  40b228:	028d028d 	.word	0x028d028d
  40b22c:	028d028d 	.word	0x028d028d
  40b230:	028d028d 	.word	0x028d028d
  40b234:	02ff028d 	.word	0x02ff028d
  40b238:	02ff02ff 	.word	0x02ff02ff
  40b23c:	02ff02ff 	.word	0x02ff02ff
  40b240:	02ff02ff 	.word	0x02ff02ff
  40b244:	02ff02ff 	.word	0x02ff02ff
  40b248:	029b02ff 	.word	0x029b02ff
  40b24c:	02ff02ff 	.word	0x02ff02ff
  40b250:	02ff02ff 	.word	0x02ff02ff
  40b254:	02ff02ff 	.word	0x02ff02ff
  40b258:	02ff02ff 	.word	0x02ff02ff
  40b25c:	02ff02ff 	.word	0x02ff02ff
  40b260:	02ff02b6 	.word	0x02ff02b6
  40b264:	02ff02ff 	.word	0x02ff02ff
  40b268:	02ff02ff 	.word	0x02ff02ff
  40b26c:	02ff02ce 	.word	0x02ff02ce
  40b270:	02e602ff 	.word	0x02e602ff
  40b274:	02ff02ff 	.word	0x02ff02ff
  40b278:	02ff02ff 	.word	0x02ff02ff
  40b27c:	02ff02ff 	.word	0x02ff02ff
  40b280:	02ff02ff 	.word	0x02ff02ff
  40b284:	02ff02ff 	.word	0x02ff02ff
  40b288:	022b0219 	.word	0x022b0219
  40b28c:	02ff02ff 	.word	0x02ff02ff
  40b290:	021302ff 	.word	0x021302ff
  40b294:	02ff022b 	.word	0x02ff022b
  40b298:	01f902ff 	.word	0x01f902ff
  40b29c:	020202ff 	.word	0x020202ff
  40b2a0:	026d0187 	.word	0x026d0187
  40b2a4:	02ff0281 	.word	0x02ff0281
  40b2a8:	02ff0198 	.word	0x02ff0198
  40b2ac:	02ff0081 	.word	0x02ff0081
  40b2b0:	01d502ff 	.word	0x01d502ff
  40b2b4:	3408      	adds	r4, #8
  40b2b6:	9b03      	ldr	r3, [sp, #12]
  40b2b8:	4433      	add	r3, r6
  40b2ba:	9303      	str	r3, [sp, #12]
  40b2bc:	e788      	b.n	40b1d0 <_vfiprintf_r+0xa8>
  40b2be:	9802      	ldr	r0, [sp, #8]
  40b2c0:	9901      	ldr	r1, [sp, #4]
  40b2c2:	f000 fd6b 	bl	40bd9c <__swsetup_r>
  40b2c6:	b9a8      	cbnz	r0, 40b2f4 <_vfiprintf_r+0x1cc>
  40b2c8:	9b01      	ldr	r3, [sp, #4]
  40b2ca:	899a      	ldrh	r2, [r3, #12]
  40b2cc:	f002 021a 	and.w	r2, r2, #26
  40b2d0:	2a0a      	cmp	r2, #10
  40b2d2:	f47f af51 	bne.w	40b178 <_vfiprintf_r+0x50>
  40b2d6:	9b01      	ldr	r3, [sp, #4]
  40b2d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40b2dc:	2b00      	cmp	r3, #0
  40b2de:	f6ff af4b 	blt.w	40b178 <_vfiprintf_r+0x50>
  40b2e2:	9901      	ldr	r1, [sp, #4]
  40b2e4:	4652      	mov	r2, sl
  40b2e6:	4623      	mov	r3, r4
  40b2e8:	9802      	ldr	r0, [sp, #8]
  40b2ea:	f000 fd17 	bl	40bd1c <__sbprintf>
  40b2ee:	b02d      	add	sp, #180	; 0xb4
  40b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2f4:	f04f 30ff 	mov.w	r0, #4294967295
  40b2f8:	b02d      	add	sp, #180	; 0xb4
  40b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2fe:	f001 ff19 	bl	40d134 <__sinit>
  40b302:	e71e      	b.n	40b142 <_vfiprintf_r+0x1a>
  40b304:	f019 0f20 	tst.w	r9, #32
  40b308:	9505      	str	r5, [sp, #20]
  40b30a:	46b0      	mov	r8, r6
  40b30c:	9a06      	ldr	r2, [sp, #24]
  40b30e:	f000 824f 	beq.w	40b7b0 <_vfiprintf_r+0x688>
  40b312:	3207      	adds	r2, #7
  40b314:	2301      	movs	r3, #1
  40b316:	f022 0207 	bic.w	r2, r2, #7
  40b31a:	f102 0108 	add.w	r1, r2, #8
  40b31e:	e9d2 6700 	ldrd	r6, r7, [r2]
  40b322:	9106      	str	r1, [sp, #24]
  40b324:	f04f 0200 	mov.w	r2, #0
  40b328:	2500      	movs	r5, #0
  40b32a:	f8cd 8010 	str.w	r8, [sp, #16]
  40b32e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40b332:	f1b8 0f00 	cmp.w	r8, #0
  40b336:	db01      	blt.n	40b33c <_vfiprintf_r+0x214>
  40b338:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  40b33c:	f1b8 0f00 	cmp.w	r8, #0
  40b340:	f040 8294 	bne.w	40b86c <_vfiprintf_r+0x744>
  40b344:	ea56 0207 	orrs.w	r2, r6, r7
  40b348:	bf14      	ite	ne
  40b34a:	2201      	movne	r2, #1
  40b34c:	2200      	moveq	r2, #0
  40b34e:	2a00      	cmp	r2, #0
  40b350:	f040 828c 	bne.w	40b86c <_vfiprintf_r+0x744>
  40b354:	2b00      	cmp	r3, #0
  40b356:	f040 8372 	bne.w	40ba3e <_vfiprintf_r+0x916>
  40b35a:	f019 0f01 	tst.w	r9, #1
  40b35e:	f000 83a3 	beq.w	40baa8 <_vfiprintf_r+0x980>
  40b362:	ab2c      	add	r3, sp, #176	; 0xb0
  40b364:	2230      	movs	r2, #48	; 0x30
  40b366:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40b36a:	ebc3 080b 	rsb	r8, r3, fp
  40b36e:	9308      	str	r3, [sp, #32]
  40b370:	9b04      	ldr	r3, [sp, #16]
  40b372:	4543      	cmp	r3, r8
  40b374:	bfb8      	it	lt
  40b376:	4643      	movlt	r3, r8
  40b378:	461f      	mov	r7, r3
  40b37a:	b105      	cbz	r5, 40b37e <_vfiprintf_r+0x256>
  40b37c:	3701      	adds	r7, #1
  40b37e:	f019 0c02 	ands.w	ip, r9, #2
  40b382:	d000      	beq.n	40b386 <_vfiprintf_r+0x25e>
  40b384:	3702      	adds	r7, #2
  40b386:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  40b38a:	9307      	str	r3, [sp, #28]
  40b38c:	f040 8247 	bne.w	40b81e <_vfiprintf_r+0x6f6>
  40b390:	9b05      	ldr	r3, [sp, #20]
  40b392:	1bdd      	subs	r5, r3, r7
  40b394:	2d00      	cmp	r5, #0
  40b396:	f340 8242 	ble.w	40b81e <_vfiprintf_r+0x6f6>
  40b39a:	2d10      	cmp	r5, #16
  40b39c:	f340 848b 	ble.w	40bcb6 <_vfiprintf_r+0xb8e>
  40b3a0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40b3a4:	2310      	movs	r3, #16
  40b3a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b3a8:	4ebd      	ldr	r6, [pc, #756]	; (40b6a0 <_vfiprintf_r+0x578>)
  40b3aa:	4671      	mov	r1, lr
  40b3ac:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40b3b0:	e006      	b.n	40b3c0 <_vfiprintf_r+0x298>
  40b3b2:	4611      	mov	r1, r2
  40b3b4:	f04f 0e01 	mov.w	lr, #1
  40b3b8:	465c      	mov	r4, fp
  40b3ba:	3d10      	subs	r5, #16
  40b3bc:	2d10      	cmp	r5, #16
  40b3be:	dd20      	ble.n	40b402 <_vfiprintf_r+0x2da>
  40b3c0:	1c48      	adds	r0, r1, #1
  40b3c2:	3210      	adds	r2, #16
  40b3c4:	6026      	str	r6, [r4, #0]
  40b3c6:	f101 0e02 	add.w	lr, r1, #2
  40b3ca:	2807      	cmp	r0, #7
  40b3cc:	6063      	str	r3, [r4, #4]
  40b3ce:	9211      	str	r2, [sp, #68]	; 0x44
  40b3d0:	4601      	mov	r1, r0
  40b3d2:	f104 0408 	add.w	r4, r4, #8
  40b3d6:	9010      	str	r0, [sp, #64]	; 0x40
  40b3d8:	ddef      	ble.n	40b3ba <_vfiprintf_r+0x292>
  40b3da:	2a00      	cmp	r2, #0
  40b3dc:	d0e9      	beq.n	40b3b2 <_vfiprintf_r+0x28a>
  40b3de:	9802      	ldr	r0, [sp, #8]
  40b3e0:	aa0f      	add	r2, sp, #60	; 0x3c
  40b3e2:	9901      	ldr	r1, [sp, #4]
  40b3e4:	465c      	mov	r4, fp
  40b3e6:	9309      	str	r3, [sp, #36]	; 0x24
  40b3e8:	f7ff fe62 	bl	40b0b0 <__sprint_r.part.0>
  40b3ec:	2800      	cmp	r0, #0
  40b3ee:	f040 8234 	bne.w	40b85a <_vfiprintf_r+0x732>
  40b3f2:	3d10      	subs	r5, #16
  40b3f4:	9910      	ldr	r1, [sp, #64]	; 0x40
  40b3f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b3f8:	2d10      	cmp	r5, #16
  40b3fa:	f101 0e01 	add.w	lr, r1, #1
  40b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b400:	dcde      	bgt.n	40b3c0 <_vfiprintf_r+0x298>
  40b402:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40b406:	4671      	mov	r1, lr
  40b408:	442a      	add	r2, r5
  40b40a:	2907      	cmp	r1, #7
  40b40c:	6026      	str	r6, [r4, #0]
  40b40e:	6065      	str	r5, [r4, #4]
  40b410:	9211      	str	r2, [sp, #68]	; 0x44
  40b412:	9110      	str	r1, [sp, #64]	; 0x40
  40b414:	f300 8330 	bgt.w	40ba78 <_vfiprintf_r+0x950>
  40b418:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40b41c:	3408      	adds	r4, #8
  40b41e:	1c48      	adds	r0, r1, #1
  40b420:	2b00      	cmp	r3, #0
  40b422:	f040 8204 	bne.w	40b82e <_vfiprintf_r+0x706>
  40b426:	f1bc 0f00 	cmp.w	ip, #0
  40b42a:	d00c      	beq.n	40b446 <_vfiprintf_r+0x31e>
  40b42c:	3202      	adds	r2, #2
  40b42e:	a90e      	add	r1, sp, #56	; 0x38
  40b430:	2302      	movs	r3, #2
  40b432:	2807      	cmp	r0, #7
  40b434:	9010      	str	r0, [sp, #64]	; 0x40
  40b436:	9211      	str	r2, [sp, #68]	; 0x44
  40b438:	e884 000a 	stmia.w	r4, {r1, r3}
  40b43c:	f300 82f8 	bgt.w	40ba30 <_vfiprintf_r+0x908>
  40b440:	4601      	mov	r1, r0
  40b442:	3408      	adds	r4, #8
  40b444:	3001      	adds	r0, #1
  40b446:	9b07      	ldr	r3, [sp, #28]
  40b448:	2b80      	cmp	r3, #128	; 0x80
  40b44a:	f000 8298 	beq.w	40b97e <_vfiprintf_r+0x856>
  40b44e:	9b04      	ldr	r3, [sp, #16]
  40b450:	ebc8 0503 	rsb	r5, r8, r3
  40b454:	2d00      	cmp	r5, #0
  40b456:	dd38      	ble.n	40b4ca <_vfiprintf_r+0x3a2>
  40b458:	2d10      	cmp	r5, #16
  40b45a:	4e92      	ldr	r6, [pc, #584]	; (40b6a4 <_vfiprintf_r+0x57c>)
  40b45c:	bfc8      	it	gt
  40b45e:	2310      	movgt	r3, #16
  40b460:	dc07      	bgt.n	40b472 <_vfiprintf_r+0x34a>
  40b462:	e028      	b.n	40b4b6 <_vfiprintf_r+0x38e>
  40b464:	f04f 0e01 	mov.w	lr, #1
  40b468:	4611      	mov	r1, r2
  40b46a:	465c      	mov	r4, fp
  40b46c:	3d10      	subs	r5, #16
  40b46e:	2d10      	cmp	r5, #16
  40b470:	dd20      	ble.n	40b4b4 <_vfiprintf_r+0x38c>
  40b472:	1c48      	adds	r0, r1, #1
  40b474:	3210      	adds	r2, #16
  40b476:	6026      	str	r6, [r4, #0]
  40b478:	f101 0e02 	add.w	lr, r1, #2
  40b47c:	2807      	cmp	r0, #7
  40b47e:	6063      	str	r3, [r4, #4]
  40b480:	9211      	str	r2, [sp, #68]	; 0x44
  40b482:	4601      	mov	r1, r0
  40b484:	f104 0408 	add.w	r4, r4, #8
  40b488:	9010      	str	r0, [sp, #64]	; 0x40
  40b48a:	ddef      	ble.n	40b46c <_vfiprintf_r+0x344>
  40b48c:	2a00      	cmp	r2, #0
  40b48e:	d0e9      	beq.n	40b464 <_vfiprintf_r+0x33c>
  40b490:	9802      	ldr	r0, [sp, #8]
  40b492:	aa0f      	add	r2, sp, #60	; 0x3c
  40b494:	9901      	ldr	r1, [sp, #4]
  40b496:	465c      	mov	r4, fp
  40b498:	9304      	str	r3, [sp, #16]
  40b49a:	f7ff fe09 	bl	40b0b0 <__sprint_r.part.0>
  40b49e:	2800      	cmp	r0, #0
  40b4a0:	f040 81db 	bne.w	40b85a <_vfiprintf_r+0x732>
  40b4a4:	3d10      	subs	r5, #16
  40b4a6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40b4a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b4aa:	2d10      	cmp	r5, #16
  40b4ac:	f101 0e01 	add.w	lr, r1, #1
  40b4b0:	9b04      	ldr	r3, [sp, #16]
  40b4b2:	dcde      	bgt.n	40b472 <_vfiprintf_r+0x34a>
  40b4b4:	4670      	mov	r0, lr
  40b4b6:	442a      	add	r2, r5
  40b4b8:	2807      	cmp	r0, #7
  40b4ba:	6026      	str	r6, [r4, #0]
  40b4bc:	6065      	str	r5, [r4, #4]
  40b4be:	9211      	str	r2, [sp, #68]	; 0x44
  40b4c0:	9010      	str	r0, [sp, #64]	; 0x40
  40b4c2:	f300 81ef 	bgt.w	40b8a4 <_vfiprintf_r+0x77c>
  40b4c6:	3408      	adds	r4, #8
  40b4c8:	3001      	adds	r0, #1
  40b4ca:	eb02 0308 	add.w	r3, r2, r8
  40b4ce:	2807      	cmp	r0, #7
  40b4d0:	9a08      	ldr	r2, [sp, #32]
  40b4d2:	9311      	str	r3, [sp, #68]	; 0x44
  40b4d4:	9010      	str	r0, [sp, #64]	; 0x40
  40b4d6:	e884 0104 	stmia.w	r4, {r2, r8}
  40b4da:	f340 81f0 	ble.w	40b8be <_vfiprintf_r+0x796>
  40b4de:	2b00      	cmp	r3, #0
  40b4e0:	f040 82f2 	bne.w	40bac8 <_vfiprintf_r+0x9a0>
  40b4e4:	f019 0f04 	tst.w	r9, #4
  40b4e8:	9310      	str	r3, [sp, #64]	; 0x40
  40b4ea:	f040 82d6 	bne.w	40ba9a <_vfiprintf_r+0x972>
  40b4ee:	9b03      	ldr	r3, [sp, #12]
  40b4f0:	9a05      	ldr	r2, [sp, #20]
  40b4f2:	4297      	cmp	r7, r2
  40b4f4:	bfac      	ite	ge
  40b4f6:	19db      	addge	r3, r3, r7
  40b4f8:	189b      	addlt	r3, r3, r2
  40b4fa:	9303      	str	r3, [sp, #12]
  40b4fc:	2300      	movs	r3, #0
  40b4fe:	465c      	mov	r4, fp
  40b500:	9310      	str	r3, [sp, #64]	; 0x40
  40b502:	e643      	b.n	40b18c <_vfiprintf_r+0x64>
  40b504:	4650      	mov	r0, sl
  40b506:	f049 0904 	orr.w	r9, r9, #4
  40b50a:	f89a 3000 	ldrb.w	r3, [sl]
  40b50e:	e66f      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b510:	f019 0320 	ands.w	r3, r9, #32
  40b514:	9505      	str	r5, [sp, #20]
  40b516:	46b0      	mov	r8, r6
  40b518:	f000 8131 	beq.w	40b77e <_vfiprintf_r+0x656>
  40b51c:	9a06      	ldr	r2, [sp, #24]
  40b51e:	2300      	movs	r3, #0
  40b520:	3207      	adds	r2, #7
  40b522:	f022 0207 	bic.w	r2, r2, #7
  40b526:	f102 0108 	add.w	r1, r2, #8
  40b52a:	e9d2 6700 	ldrd	r6, r7, [r2]
  40b52e:	9106      	str	r1, [sp, #24]
  40b530:	e6f8      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40b532:	9a06      	ldr	r2, [sp, #24]
  40b534:	46b0      	mov	r8, r6
  40b536:	9505      	str	r5, [sp, #20]
  40b538:	6813      	ldr	r3, [r2, #0]
  40b53a:	1d16      	adds	r6, r2, #4
  40b53c:	f04f 0200 	mov.w	r2, #0
  40b540:	9308      	str	r3, [sp, #32]
  40b542:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40b546:	2b00      	cmp	r3, #0
  40b548:	f000 83bb 	beq.w	40bcc2 <_vfiprintf_r+0xb9a>
  40b54c:	f1b8 0f00 	cmp.w	r8, #0
  40b550:	f2c0 8398 	blt.w	40bc84 <_vfiprintf_r+0xb5c>
  40b554:	9d08      	ldr	r5, [sp, #32]
  40b556:	2100      	movs	r1, #0
  40b558:	4642      	mov	r2, r8
  40b55a:	4628      	mov	r0, r5
  40b55c:	f002 f9d4 	bl	40d908 <memchr>
  40b560:	2800      	cmp	r0, #0
  40b562:	f000 83be 	beq.w	40bce2 <_vfiprintf_r+0xbba>
  40b566:	2300      	movs	r3, #0
  40b568:	ebc5 0800 	rsb	r8, r5, r0
  40b56c:	9606      	str	r6, [sp, #24]
  40b56e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40b572:	9304      	str	r3, [sp, #16]
  40b574:	e6fc      	b.n	40b370 <_vfiprintf_r+0x248>
  40b576:	f89a 3000 	ldrb.w	r3, [sl]
  40b57a:	f10a 0001 	add.w	r0, sl, #1
  40b57e:	2b2a      	cmp	r3, #42	; 0x2a
  40b580:	f000 83b8 	beq.w	40bcf4 <_vfiprintf_r+0xbcc>
  40b584:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b588:	4682      	mov	sl, r0
  40b58a:	2600      	movs	r6, #0
  40b58c:	2a09      	cmp	r2, #9
  40b58e:	f63f ae31 	bhi.w	40b1f4 <_vfiprintf_r+0xcc>
  40b592:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40b596:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40b59a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40b59e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b5a2:	2a09      	cmp	r2, #9
  40b5a4:	d9f5      	bls.n	40b592 <_vfiprintf_r+0x46a>
  40b5a6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40b5aa:	e623      	b.n	40b1f4 <_vfiprintf_r+0xcc>
  40b5ac:	4a3e      	ldr	r2, [pc, #248]	; (40b6a8 <_vfiprintf_r+0x580>)
  40b5ae:	f019 0f20 	tst.w	r9, #32
  40b5b2:	9505      	str	r5, [sp, #20]
  40b5b4:	46b0      	mov	r8, r6
  40b5b6:	920a      	str	r2, [sp, #40]	; 0x28
  40b5b8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b5bc:	f000 8111 	beq.w	40b7e2 <_vfiprintf_r+0x6ba>
  40b5c0:	9a06      	ldr	r2, [sp, #24]
  40b5c2:	3207      	adds	r2, #7
  40b5c4:	f022 0207 	bic.w	r2, r2, #7
  40b5c8:	f102 0108 	add.w	r1, r2, #8
  40b5cc:	e9d2 6700 	ldrd	r6, r7, [r2]
  40b5d0:	9106      	str	r1, [sp, #24]
  40b5d2:	f019 0f01 	tst.w	r9, #1
  40b5d6:	f000 824d 	beq.w	40ba74 <_vfiprintf_r+0x94c>
  40b5da:	ea56 0207 	orrs.w	r2, r6, r7
  40b5de:	f000 8249 	beq.w	40ba74 <_vfiprintf_r+0x94c>
  40b5e2:	2230      	movs	r2, #48	; 0x30
  40b5e4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40b5e8:	f049 0902 	orr.w	r9, r9, #2
  40b5ec:	2302      	movs	r3, #2
  40b5ee:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  40b5f2:	e697      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40b5f4:	f89a 3000 	ldrb.w	r3, [sl]
  40b5f8:	2b6c      	cmp	r3, #108	; 0x6c
  40b5fa:	f000 8337 	beq.w	40bc6c <_vfiprintf_r+0xb44>
  40b5fe:	f049 0910 	orr.w	r9, r9, #16
  40b602:	4650      	mov	r0, sl
  40b604:	e5f4      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b606:	f019 0f20 	tst.w	r9, #32
  40b60a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b60e:	f000 8305 	beq.w	40bc1c <_vfiprintf_r+0xaf4>
  40b612:	9903      	ldr	r1, [sp, #12]
  40b614:	9a06      	ldr	r2, [sp, #24]
  40b616:	17cf      	asrs	r7, r1, #31
  40b618:	4608      	mov	r0, r1
  40b61a:	6813      	ldr	r3, [r2, #0]
  40b61c:	3204      	adds	r2, #4
  40b61e:	4639      	mov	r1, r7
  40b620:	9206      	str	r2, [sp, #24]
  40b622:	e9c3 0100 	strd	r0, r1, [r3]
  40b626:	e5b1      	b.n	40b18c <_vfiprintf_r+0x64>
  40b628:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  40b62c:	f89a 3000 	ldrb.w	r3, [sl]
  40b630:	4650      	mov	r0, sl
  40b632:	e5dd      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b634:	9a06      	ldr	r2, [sp, #24]
  40b636:	2701      	movs	r7, #1
  40b638:	f04f 0100 	mov.w	r1, #0
  40b63c:	9505      	str	r5, [sp, #20]
  40b63e:	6813      	ldr	r3, [r2, #0]
  40b640:	3204      	adds	r2, #4
  40b642:	46b8      	mov	r8, r7
  40b644:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b648:	9206      	str	r2, [sp, #24]
  40b64a:	aa12      	add	r2, sp, #72	; 0x48
  40b64c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40b650:	9208      	str	r2, [sp, #32]
  40b652:	2300      	movs	r3, #0
  40b654:	9304      	str	r3, [sp, #16]
  40b656:	e692      	b.n	40b37e <_vfiprintf_r+0x256>
  40b658:	f019 0f20 	tst.w	r9, #32
  40b65c:	9505      	str	r5, [sp, #20]
  40b65e:	46b0      	mov	r8, r6
  40b660:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b664:	d071      	beq.n	40b74a <_vfiprintf_r+0x622>
  40b666:	9906      	ldr	r1, [sp, #24]
  40b668:	3107      	adds	r1, #7
  40b66a:	f021 0107 	bic.w	r1, r1, #7
  40b66e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40b672:	3108      	adds	r1, #8
  40b674:	4616      	mov	r6, r2
  40b676:	461f      	mov	r7, r3
  40b678:	9106      	str	r1, [sp, #24]
  40b67a:	2a00      	cmp	r2, #0
  40b67c:	f173 0300 	sbcs.w	r3, r3, #0
  40b680:	f2c0 82b1 	blt.w	40bbe6 <_vfiprintf_r+0xabe>
  40b684:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40b688:	2301      	movs	r3, #1
  40b68a:	f8cd 8010 	str.w	r8, [sp, #16]
  40b68e:	e650      	b.n	40b332 <_vfiprintf_r+0x20a>
  40b690:	f89a 3000 	ldrb.w	r3, [sl]
  40b694:	4650      	mov	r0, sl
  40b696:	2900      	cmp	r1, #0
  40b698:	f47f adaa 	bne.w	40b1f0 <_vfiprintf_r+0xc8>
  40b69c:	2120      	movs	r1, #32
  40b69e:	e5a7      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b6a0:	0040fcf4 	.word	0x0040fcf4
  40b6a4:	0040fce4 	.word	0x0040fce4
  40b6a8:	0040fcc4 	.word	0x0040fcc4
  40b6ac:	f049 0901 	orr.w	r9, r9, #1
  40b6b0:	f89a 3000 	ldrb.w	r3, [sl]
  40b6b4:	4650      	mov	r0, sl
  40b6b6:	e59b      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b6b8:	9a06      	ldr	r2, [sp, #24]
  40b6ba:	6815      	ldr	r5, [r2, #0]
  40b6bc:	4613      	mov	r3, r2
  40b6be:	2d00      	cmp	r5, #0
  40b6c0:	f103 0304 	add.w	r3, r3, #4
  40b6c4:	f2c0 82da 	blt.w	40bc7c <_vfiprintf_r+0xb54>
  40b6c8:	9306      	str	r3, [sp, #24]
  40b6ca:	4650      	mov	r0, sl
  40b6cc:	f89a 3000 	ldrb.w	r3, [sl]
  40b6d0:	e58e      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b6d2:	f89a 3000 	ldrb.w	r3, [sl]
  40b6d6:	4650      	mov	r0, sl
  40b6d8:	212b      	movs	r1, #43	; 0x2b
  40b6da:	e589      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b6dc:	9806      	ldr	r0, [sp, #24]
  40b6de:	2278      	movs	r2, #120	; 0x78
  40b6e0:	2330      	movs	r3, #48	; 0x30
  40b6e2:	46b0      	mov	r8, r6
  40b6e4:	4601      	mov	r1, r0
  40b6e6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40b6ea:	4aaa      	ldr	r2, [pc, #680]	; (40b994 <_vfiprintf_r+0x86c>)
  40b6ec:	f049 0902 	orr.w	r9, r9, #2
  40b6f0:	3104      	adds	r1, #4
  40b6f2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  40b6f6:	9505      	str	r5, [sp, #20]
  40b6f8:	2302      	movs	r3, #2
  40b6fa:	6806      	ldr	r6, [r0, #0]
  40b6fc:	2700      	movs	r7, #0
  40b6fe:	9106      	str	r1, [sp, #24]
  40b700:	920a      	str	r2, [sp, #40]	; 0x28
  40b702:	e60f      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40b704:	f049 0920 	orr.w	r9, r9, #32
  40b708:	f89a 3000 	ldrb.w	r3, [sl]
  40b70c:	4650      	mov	r0, sl
  40b70e:	e56f      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b710:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  40b714:	f89a 3000 	ldrb.w	r3, [sl]
  40b718:	4650      	mov	r0, sl
  40b71a:	e569      	b.n	40b1f0 <_vfiprintf_r+0xc8>
  40b71c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b720:	2500      	movs	r5, #0
  40b722:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40b726:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40b72a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40b72e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40b732:	2a09      	cmp	r2, #9
  40b734:	d9f5      	bls.n	40b722 <_vfiprintf_r+0x5fa>
  40b736:	e55d      	b.n	40b1f4 <_vfiprintf_r+0xcc>
  40b738:	f049 0910 	orr.w	r9, r9, #16
  40b73c:	9505      	str	r5, [sp, #20]
  40b73e:	46b0      	mov	r8, r6
  40b740:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b744:	f019 0f20 	tst.w	r9, #32
  40b748:	d18d      	bne.n	40b666 <_vfiprintf_r+0x53e>
  40b74a:	9a06      	ldr	r2, [sp, #24]
  40b74c:	f019 0f10 	tst.w	r9, #16
  40b750:	4613      	mov	r3, r2
  40b752:	f040 81c4 	bne.w	40bade <_vfiprintf_r+0x9b6>
  40b756:	f019 0f40 	tst.w	r9, #64	; 0x40
  40b75a:	f000 81c0 	beq.w	40bade <_vfiprintf_r+0x9b6>
  40b75e:	f9b2 6000 	ldrsh.w	r6, [r2]
  40b762:	3304      	adds	r3, #4
  40b764:	17f7      	asrs	r7, r6, #31
  40b766:	9306      	str	r3, [sp, #24]
  40b768:	4632      	mov	r2, r6
  40b76a:	463b      	mov	r3, r7
  40b76c:	e785      	b.n	40b67a <_vfiprintf_r+0x552>
  40b76e:	f049 0910 	orr.w	r9, r9, #16
  40b772:	9505      	str	r5, [sp, #20]
  40b774:	46b0      	mov	r8, r6
  40b776:	f019 0320 	ands.w	r3, r9, #32
  40b77a:	f47f aecf 	bne.w	40b51c <_vfiprintf_r+0x3f4>
  40b77e:	f019 0210 	ands.w	r2, r9, #16
  40b782:	f040 81b3 	bne.w	40baec <_vfiprintf_r+0x9c4>
  40b786:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  40b78a:	f000 81af 	beq.w	40baec <_vfiprintf_r+0x9c4>
  40b78e:	9906      	ldr	r1, [sp, #24]
  40b790:	4613      	mov	r3, r2
  40b792:	2700      	movs	r7, #0
  40b794:	460a      	mov	r2, r1
  40b796:	880e      	ldrh	r6, [r1, #0]
  40b798:	3204      	adds	r2, #4
  40b79a:	9206      	str	r2, [sp, #24]
  40b79c:	e5c2      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40b79e:	f049 0910 	orr.w	r9, r9, #16
  40b7a2:	9505      	str	r5, [sp, #20]
  40b7a4:	46b0      	mov	r8, r6
  40b7a6:	9a06      	ldr	r2, [sp, #24]
  40b7a8:	f019 0f20 	tst.w	r9, #32
  40b7ac:	f47f adb1 	bne.w	40b312 <_vfiprintf_r+0x1ea>
  40b7b0:	f019 0f10 	tst.w	r9, #16
  40b7b4:	4613      	mov	r3, r2
  40b7b6:	f040 81a5 	bne.w	40bb04 <_vfiprintf_r+0x9dc>
  40b7ba:	f019 0f40 	tst.w	r9, #64	; 0x40
  40b7be:	f000 81a1 	beq.w	40bb04 <_vfiprintf_r+0x9dc>
  40b7c2:	8816      	ldrh	r6, [r2, #0]
  40b7c4:	3204      	adds	r2, #4
  40b7c6:	2700      	movs	r7, #0
  40b7c8:	2301      	movs	r3, #1
  40b7ca:	9206      	str	r2, [sp, #24]
  40b7cc:	e5aa      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40b7ce:	4a72      	ldr	r2, [pc, #456]	; (40b998 <_vfiprintf_r+0x870>)
  40b7d0:	f019 0f20 	tst.w	r9, #32
  40b7d4:	9505      	str	r5, [sp, #20]
  40b7d6:	46b0      	mov	r8, r6
  40b7d8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b7dc:	920a      	str	r2, [sp, #40]	; 0x28
  40b7de:	f47f aeef 	bne.w	40b5c0 <_vfiprintf_r+0x498>
  40b7e2:	9906      	ldr	r1, [sp, #24]
  40b7e4:	f019 0f10 	tst.w	r9, #16
  40b7e8:	460a      	mov	r2, r1
  40b7ea:	f040 8186 	bne.w	40bafa <_vfiprintf_r+0x9d2>
  40b7ee:	f019 0f40 	tst.w	r9, #64	; 0x40
  40b7f2:	f000 8182 	beq.w	40bafa <_vfiprintf_r+0x9d2>
  40b7f6:	3204      	adds	r2, #4
  40b7f8:	880e      	ldrh	r6, [r1, #0]
  40b7fa:	2700      	movs	r7, #0
  40b7fc:	9206      	str	r2, [sp, #24]
  40b7fe:	e6e8      	b.n	40b5d2 <_vfiprintf_r+0x4aa>
  40b800:	9505      	str	r5, [sp, #20]
  40b802:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40b806:	b30b      	cbz	r3, 40b84c <_vfiprintf_r+0x724>
  40b808:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40b80c:	f04f 0300 	mov.w	r3, #0
  40b810:	2701      	movs	r7, #1
  40b812:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40b816:	ab12      	add	r3, sp, #72	; 0x48
  40b818:	46b8      	mov	r8, r7
  40b81a:	9308      	str	r3, [sp, #32]
  40b81c:	e719      	b.n	40b652 <_vfiprintf_r+0x52a>
  40b81e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40b820:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b822:	1c48      	adds	r0, r1, #1
  40b824:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40b828:	2b00      	cmp	r3, #0
  40b82a:	f43f adfc 	beq.w	40b426 <_vfiprintf_r+0x2fe>
  40b82e:	3201      	adds	r2, #1
  40b830:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40b834:	2301      	movs	r3, #1
  40b836:	2807      	cmp	r0, #7
  40b838:	9010      	str	r0, [sp, #64]	; 0x40
  40b83a:	9211      	str	r2, [sp, #68]	; 0x44
  40b83c:	e884 000a 	stmia.w	r4, {r1, r3}
  40b840:	f300 80e7 	bgt.w	40ba12 <_vfiprintf_r+0x8ea>
  40b844:	4601      	mov	r1, r0
  40b846:	3408      	adds	r4, #8
  40b848:	3001      	adds	r0, #1
  40b84a:	e5ec      	b.n	40b426 <_vfiprintf_r+0x2fe>
  40b84c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b84e:	b123      	cbz	r3, 40b85a <_vfiprintf_r+0x732>
  40b850:	9802      	ldr	r0, [sp, #8]
  40b852:	aa0f      	add	r2, sp, #60	; 0x3c
  40b854:	9901      	ldr	r1, [sp, #4]
  40b856:	f7ff fc2b 	bl	40b0b0 <__sprint_r.part.0>
  40b85a:	9b01      	ldr	r3, [sp, #4]
  40b85c:	899b      	ldrh	r3, [r3, #12]
  40b85e:	065b      	lsls	r3, r3, #25
  40b860:	f53f ad48 	bmi.w	40b2f4 <_vfiprintf_r+0x1cc>
  40b864:	9803      	ldr	r0, [sp, #12]
  40b866:	b02d      	add	sp, #180	; 0xb4
  40b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b86c:	2b01      	cmp	r3, #1
  40b86e:	f000 811f 	beq.w	40bab0 <_vfiprintf_r+0x988>
  40b872:	2b02      	cmp	r3, #2
  40b874:	f040 80e7 	bne.w	40ba46 <_vfiprintf_r+0x91e>
  40b878:	465a      	mov	r2, fp
  40b87a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  40b87e:	0933      	lsrs	r3, r6, #4
  40b880:	f006 000f 	and.w	r0, r6, #15
  40b884:	0939      	lsrs	r1, r7, #4
  40b886:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40b88a:	460f      	mov	r7, r1
  40b88c:	461e      	mov	r6, r3
  40b88e:	f81e 3000 	ldrb.w	r3, [lr, r0]
  40b892:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40b896:	ea56 0307 	orrs.w	r3, r6, r7
  40b89a:	d1f0      	bne.n	40b87e <_vfiprintf_r+0x756>
  40b89c:	9208      	str	r2, [sp, #32]
  40b89e:	ebc2 080b 	rsb	r8, r2, fp
  40b8a2:	e565      	b.n	40b370 <_vfiprintf_r+0x248>
  40b8a4:	2a00      	cmp	r2, #0
  40b8a6:	f040 8167 	bne.w	40bb78 <_vfiprintf_r+0xa50>
  40b8aa:	2201      	movs	r2, #1
  40b8ac:	9908      	ldr	r1, [sp, #32]
  40b8ae:	4643      	mov	r3, r8
  40b8b0:	465c      	mov	r4, fp
  40b8b2:	911c      	str	r1, [sp, #112]	; 0x70
  40b8b4:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  40b8b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40b8bc:	9210      	str	r2, [sp, #64]	; 0x40
  40b8be:	f104 0208 	add.w	r2, r4, #8
  40b8c2:	f019 0f04 	tst.w	r9, #4
  40b8c6:	d047      	beq.n	40b958 <_vfiprintf_r+0x830>
  40b8c8:	9905      	ldr	r1, [sp, #20]
  40b8ca:	1bcd      	subs	r5, r1, r7
  40b8cc:	2d00      	cmp	r5, #0
  40b8ce:	dd43      	ble.n	40b958 <_vfiprintf_r+0x830>
  40b8d0:	2d10      	cmp	r5, #16
  40b8d2:	f340 8201 	ble.w	40bcd8 <_vfiprintf_r+0xbb0>
  40b8d6:	9810      	ldr	r0, [sp, #64]	; 0x40
  40b8d8:	2410      	movs	r4, #16
  40b8da:	4e30      	ldr	r6, [pc, #192]	; (40b99c <_vfiprintf_r+0x874>)
  40b8dc:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40b8e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40b8e4:	e006      	b.n	40b8f4 <_vfiprintf_r+0x7cc>
  40b8e6:	f04f 0e01 	mov.w	lr, #1
  40b8ea:	4618      	mov	r0, r3
  40b8ec:	465a      	mov	r2, fp
  40b8ee:	3d10      	subs	r5, #16
  40b8f0:	2d10      	cmp	r5, #16
  40b8f2:	dd1d      	ble.n	40b930 <_vfiprintf_r+0x808>
  40b8f4:	1c41      	adds	r1, r0, #1
  40b8f6:	3310      	adds	r3, #16
  40b8f8:	6016      	str	r6, [r2, #0]
  40b8fa:	f100 0e02 	add.w	lr, r0, #2
  40b8fe:	2907      	cmp	r1, #7
  40b900:	6054      	str	r4, [r2, #4]
  40b902:	9311      	str	r3, [sp, #68]	; 0x44
  40b904:	4608      	mov	r0, r1
  40b906:	f102 0208 	add.w	r2, r2, #8
  40b90a:	9110      	str	r1, [sp, #64]	; 0x40
  40b90c:	ddef      	ble.n	40b8ee <_vfiprintf_r+0x7c6>
  40b90e:	2b00      	cmp	r3, #0
  40b910:	d0e9      	beq.n	40b8e6 <_vfiprintf_r+0x7be>
  40b912:	aa0f      	add	r2, sp, #60	; 0x3c
  40b914:	4640      	mov	r0, r8
  40b916:	4649      	mov	r1, r9
  40b918:	f7ff fbca 	bl	40b0b0 <__sprint_r.part.0>
  40b91c:	465a      	mov	r2, fp
  40b91e:	2800      	cmp	r0, #0
  40b920:	d19b      	bne.n	40b85a <_vfiprintf_r+0x732>
  40b922:	3d10      	subs	r5, #16
  40b924:	9810      	ldr	r0, [sp, #64]	; 0x40
  40b926:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b928:	2d10      	cmp	r5, #16
  40b92a:	f100 0e01 	add.w	lr, r0, #1
  40b92e:	dce1      	bgt.n	40b8f4 <_vfiprintf_r+0x7cc>
  40b930:	442b      	add	r3, r5
  40b932:	f1be 0f07 	cmp.w	lr, #7
  40b936:	6016      	str	r6, [r2, #0]
  40b938:	6055      	str	r5, [r2, #4]
  40b93a:	9311      	str	r3, [sp, #68]	; 0x44
  40b93c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40b940:	dd0a      	ble.n	40b958 <_vfiprintf_r+0x830>
  40b942:	2b00      	cmp	r3, #0
  40b944:	f43f add3 	beq.w	40b4ee <_vfiprintf_r+0x3c6>
  40b948:	9802      	ldr	r0, [sp, #8]
  40b94a:	aa0f      	add	r2, sp, #60	; 0x3c
  40b94c:	9901      	ldr	r1, [sp, #4]
  40b94e:	f7ff fbaf 	bl	40b0b0 <__sprint_r.part.0>
  40b952:	2800      	cmp	r0, #0
  40b954:	d181      	bne.n	40b85a <_vfiprintf_r+0x732>
  40b956:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b958:	9a03      	ldr	r2, [sp, #12]
  40b95a:	9905      	ldr	r1, [sp, #20]
  40b95c:	428f      	cmp	r7, r1
  40b95e:	bfac      	ite	ge
  40b960:	19d2      	addge	r2, r2, r7
  40b962:	1852      	addlt	r2, r2, r1
  40b964:	9203      	str	r2, [sp, #12]
  40b966:	2b00      	cmp	r3, #0
  40b968:	f43f adc8 	beq.w	40b4fc <_vfiprintf_r+0x3d4>
  40b96c:	9802      	ldr	r0, [sp, #8]
  40b96e:	aa0f      	add	r2, sp, #60	; 0x3c
  40b970:	9901      	ldr	r1, [sp, #4]
  40b972:	f7ff fb9d 	bl	40b0b0 <__sprint_r.part.0>
  40b976:	2800      	cmp	r0, #0
  40b978:	f43f adc0 	beq.w	40b4fc <_vfiprintf_r+0x3d4>
  40b97c:	e76d      	b.n	40b85a <_vfiprintf_r+0x732>
  40b97e:	9b05      	ldr	r3, [sp, #20]
  40b980:	1bdd      	subs	r5, r3, r7
  40b982:	2d00      	cmp	r5, #0
  40b984:	f77f ad63 	ble.w	40b44e <_vfiprintf_r+0x326>
  40b988:	2d10      	cmp	r5, #16
  40b98a:	f340 81b0 	ble.w	40bcee <_vfiprintf_r+0xbc6>
  40b98e:	4e04      	ldr	r6, [pc, #16]	; (40b9a0 <_vfiprintf_r+0x878>)
  40b990:	2310      	movs	r3, #16
  40b992:	e00e      	b.n	40b9b2 <_vfiprintf_r+0x88a>
  40b994:	0040fcc4 	.word	0x0040fcc4
  40b998:	0040fcb0 	.word	0x0040fcb0
  40b99c:	0040fcf4 	.word	0x0040fcf4
  40b9a0:	0040fce4 	.word	0x0040fce4
  40b9a4:	f04f 0e01 	mov.w	lr, #1
  40b9a8:	4611      	mov	r1, r2
  40b9aa:	465c      	mov	r4, fp
  40b9ac:	3d10      	subs	r5, #16
  40b9ae:	2d10      	cmp	r5, #16
  40b9b0:	dd20      	ble.n	40b9f4 <_vfiprintf_r+0x8cc>
  40b9b2:	1c48      	adds	r0, r1, #1
  40b9b4:	3210      	adds	r2, #16
  40b9b6:	6026      	str	r6, [r4, #0]
  40b9b8:	f101 0e02 	add.w	lr, r1, #2
  40b9bc:	2807      	cmp	r0, #7
  40b9be:	6063      	str	r3, [r4, #4]
  40b9c0:	9211      	str	r2, [sp, #68]	; 0x44
  40b9c2:	4601      	mov	r1, r0
  40b9c4:	f104 0408 	add.w	r4, r4, #8
  40b9c8:	9010      	str	r0, [sp, #64]	; 0x40
  40b9ca:	ddef      	ble.n	40b9ac <_vfiprintf_r+0x884>
  40b9cc:	2a00      	cmp	r2, #0
  40b9ce:	d0e9      	beq.n	40b9a4 <_vfiprintf_r+0x87c>
  40b9d0:	9802      	ldr	r0, [sp, #8]
  40b9d2:	aa0f      	add	r2, sp, #60	; 0x3c
  40b9d4:	9901      	ldr	r1, [sp, #4]
  40b9d6:	465c      	mov	r4, fp
  40b9d8:	9307      	str	r3, [sp, #28]
  40b9da:	f7ff fb69 	bl	40b0b0 <__sprint_r.part.0>
  40b9de:	2800      	cmp	r0, #0
  40b9e0:	f47f af3b 	bne.w	40b85a <_vfiprintf_r+0x732>
  40b9e4:	3d10      	subs	r5, #16
  40b9e6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40b9e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40b9ea:	2d10      	cmp	r5, #16
  40b9ec:	f101 0e01 	add.w	lr, r1, #1
  40b9f0:	9b07      	ldr	r3, [sp, #28]
  40b9f2:	dcde      	bgt.n	40b9b2 <_vfiprintf_r+0x88a>
  40b9f4:	442a      	add	r2, r5
  40b9f6:	f1be 0f07 	cmp.w	lr, #7
  40b9fa:	6026      	str	r6, [r4, #0]
  40b9fc:	6065      	str	r5, [r4, #4]
  40b9fe:	9211      	str	r2, [sp, #68]	; 0x44
  40ba00:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40ba04:	f300 80b1 	bgt.w	40bb6a <_vfiprintf_r+0xa42>
  40ba08:	3408      	adds	r4, #8
  40ba0a:	f10e 0001 	add.w	r0, lr, #1
  40ba0e:	4671      	mov	r1, lr
  40ba10:	e51d      	b.n	40b44e <_vfiprintf_r+0x326>
  40ba12:	2a00      	cmp	r2, #0
  40ba14:	f040 808b 	bne.w	40bb2e <_vfiprintf_r+0xa06>
  40ba18:	f1bc 0f00 	cmp.w	ip, #0
  40ba1c:	f000 8083 	beq.w	40bb26 <_vfiprintf_r+0x9fe>
  40ba20:	aa0e      	add	r2, sp, #56	; 0x38
  40ba22:	2102      	movs	r1, #2
  40ba24:	4618      	mov	r0, r3
  40ba26:	465c      	mov	r4, fp
  40ba28:	921c      	str	r2, [sp, #112]	; 0x70
  40ba2a:	460a      	mov	r2, r1
  40ba2c:	911d      	str	r1, [sp, #116]	; 0x74
  40ba2e:	e507      	b.n	40b440 <_vfiprintf_r+0x318>
  40ba30:	2a00      	cmp	r2, #0
  40ba32:	f040 808d 	bne.w	40bb50 <_vfiprintf_r+0xa28>
  40ba36:	2001      	movs	r0, #1
  40ba38:	4611      	mov	r1, r2
  40ba3a:	465c      	mov	r4, fp
  40ba3c:	e503      	b.n	40b446 <_vfiprintf_r+0x31e>
  40ba3e:	4690      	mov	r8, r2
  40ba40:	f8cd b020 	str.w	fp, [sp, #32]
  40ba44:	e494      	b.n	40b370 <_vfiprintf_r+0x248>
  40ba46:	4659      	mov	r1, fp
  40ba48:	08f2      	lsrs	r2, r6, #3
  40ba4a:	f006 0307 	and.w	r3, r6, #7
  40ba4e:	08f8      	lsrs	r0, r7, #3
  40ba50:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40ba54:	3330      	adds	r3, #48	; 0x30
  40ba56:	4607      	mov	r7, r0
  40ba58:	4616      	mov	r6, r2
  40ba5a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40ba5e:	ea56 0207 	orrs.w	r2, r6, r7
  40ba62:	d1f1      	bne.n	40ba48 <_vfiprintf_r+0x920>
  40ba64:	f019 0f01 	tst.w	r9, #1
  40ba68:	9108      	str	r1, [sp, #32]
  40ba6a:	f040 8092 	bne.w	40bb92 <_vfiprintf_r+0xa6a>
  40ba6e:	ebc1 080b 	rsb	r8, r1, fp
  40ba72:	e47d      	b.n	40b370 <_vfiprintf_r+0x248>
  40ba74:	2302      	movs	r3, #2
  40ba76:	e455      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40ba78:	2a00      	cmp	r2, #0
  40ba7a:	f040 80e6 	bne.w	40bc4a <_vfiprintf_r+0xb22>
  40ba7e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40ba82:	2b00      	cmp	r3, #0
  40ba84:	f000 80bb 	beq.w	40bbfe <_vfiprintf_r+0xad6>
  40ba88:	2301      	movs	r3, #1
  40ba8a:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  40ba8e:	465c      	mov	r4, fp
  40ba90:	921c      	str	r2, [sp, #112]	; 0x70
  40ba92:	4618      	mov	r0, r3
  40ba94:	931d      	str	r3, [sp, #116]	; 0x74
  40ba96:	461a      	mov	r2, r3
  40ba98:	e6d4      	b.n	40b844 <_vfiprintf_r+0x71c>
  40ba9a:	9a05      	ldr	r2, [sp, #20]
  40ba9c:	1bd5      	subs	r5, r2, r7
  40ba9e:	465a      	mov	r2, fp
  40baa0:	2d00      	cmp	r5, #0
  40baa2:	f73f af15 	bgt.w	40b8d0 <_vfiprintf_r+0x7a8>
  40baa6:	e522      	b.n	40b4ee <_vfiprintf_r+0x3c6>
  40baa8:	4698      	mov	r8, r3
  40baaa:	f8cd b020 	str.w	fp, [sp, #32]
  40baae:	e45f      	b.n	40b370 <_vfiprintf_r+0x248>
  40bab0:	2f00      	cmp	r7, #0
  40bab2:	bf08      	it	eq
  40bab4:	2e0a      	cmpeq	r6, #10
  40bab6:	d279      	bcs.n	40bbac <_vfiprintf_r+0xa84>
  40bab8:	ab2c      	add	r3, sp, #176	; 0xb0
  40baba:	3630      	adds	r6, #48	; 0x30
  40babc:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40bac0:	ebc3 080b 	rsb	r8, r3, fp
  40bac4:	9308      	str	r3, [sp, #32]
  40bac6:	e453      	b.n	40b370 <_vfiprintf_r+0x248>
  40bac8:	9802      	ldr	r0, [sp, #8]
  40baca:	aa0f      	add	r2, sp, #60	; 0x3c
  40bacc:	9901      	ldr	r1, [sp, #4]
  40bace:	f7ff faef 	bl	40b0b0 <__sprint_r.part.0>
  40bad2:	2800      	cmp	r0, #0
  40bad4:	f47f aec1 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bada:	465a      	mov	r2, fp
  40badc:	e6f1      	b.n	40b8c2 <_vfiprintf_r+0x79a>
  40bade:	681e      	ldr	r6, [r3, #0]
  40bae0:	3304      	adds	r3, #4
  40bae2:	17f7      	asrs	r7, r6, #31
  40bae4:	9306      	str	r3, [sp, #24]
  40bae6:	4632      	mov	r2, r6
  40bae8:	463b      	mov	r3, r7
  40baea:	e5c6      	b.n	40b67a <_vfiprintf_r+0x552>
  40baec:	9906      	ldr	r1, [sp, #24]
  40baee:	2700      	movs	r7, #0
  40baf0:	460a      	mov	r2, r1
  40baf2:	680e      	ldr	r6, [r1, #0]
  40baf4:	3204      	adds	r2, #4
  40baf6:	9206      	str	r2, [sp, #24]
  40baf8:	e414      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40bafa:	6816      	ldr	r6, [r2, #0]
  40bafc:	3204      	adds	r2, #4
  40bafe:	2700      	movs	r7, #0
  40bb00:	9206      	str	r2, [sp, #24]
  40bb02:	e566      	b.n	40b5d2 <_vfiprintf_r+0x4aa>
  40bb04:	3204      	adds	r2, #4
  40bb06:	681e      	ldr	r6, [r3, #0]
  40bb08:	2700      	movs	r7, #0
  40bb0a:	2301      	movs	r3, #1
  40bb0c:	9206      	str	r2, [sp, #24]
  40bb0e:	e409      	b.n	40b324 <_vfiprintf_r+0x1fc>
  40bb10:	9802      	ldr	r0, [sp, #8]
  40bb12:	aa0f      	add	r2, sp, #60	; 0x3c
  40bb14:	9901      	ldr	r1, [sp, #4]
  40bb16:	f7ff facb 	bl	40b0b0 <__sprint_r.part.0>
  40bb1a:	2800      	cmp	r0, #0
  40bb1c:	f47f ae9d 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bb20:	465c      	mov	r4, fp
  40bb22:	f7ff bbc8 	b.w	40b2b6 <_vfiprintf_r+0x18e>
  40bb26:	4618      	mov	r0, r3
  40bb28:	4611      	mov	r1, r2
  40bb2a:	465c      	mov	r4, fp
  40bb2c:	e48b      	b.n	40b446 <_vfiprintf_r+0x31e>
  40bb2e:	9802      	ldr	r0, [sp, #8]
  40bb30:	aa0f      	add	r2, sp, #60	; 0x3c
  40bb32:	9901      	ldr	r1, [sp, #4]
  40bb34:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40bb38:	f7ff faba 	bl	40b0b0 <__sprint_r.part.0>
  40bb3c:	2800      	cmp	r0, #0
  40bb3e:	f47f ae8c 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bb42:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bb44:	465c      	mov	r4, fp
  40bb46:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bb48:	1c48      	adds	r0, r1, #1
  40bb4a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40bb4e:	e46a      	b.n	40b426 <_vfiprintf_r+0x2fe>
  40bb50:	9802      	ldr	r0, [sp, #8]
  40bb52:	aa0f      	add	r2, sp, #60	; 0x3c
  40bb54:	9901      	ldr	r1, [sp, #4]
  40bb56:	f7ff faab 	bl	40b0b0 <__sprint_r.part.0>
  40bb5a:	2800      	cmp	r0, #0
  40bb5c:	f47f ae7d 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bb60:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bb62:	465c      	mov	r4, fp
  40bb64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bb66:	1c48      	adds	r0, r1, #1
  40bb68:	e46d      	b.n	40b446 <_vfiprintf_r+0x31e>
  40bb6a:	2a00      	cmp	r2, #0
  40bb6c:	f040 8095 	bne.w	40bc9a <_vfiprintf_r+0xb72>
  40bb70:	2001      	movs	r0, #1
  40bb72:	4611      	mov	r1, r2
  40bb74:	465c      	mov	r4, fp
  40bb76:	e46a      	b.n	40b44e <_vfiprintf_r+0x326>
  40bb78:	9802      	ldr	r0, [sp, #8]
  40bb7a:	aa0f      	add	r2, sp, #60	; 0x3c
  40bb7c:	9901      	ldr	r1, [sp, #4]
  40bb7e:	f7ff fa97 	bl	40b0b0 <__sprint_r.part.0>
  40bb82:	2800      	cmp	r0, #0
  40bb84:	f47f ae69 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bb88:	9810      	ldr	r0, [sp, #64]	; 0x40
  40bb8a:	465c      	mov	r4, fp
  40bb8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bb8e:	3001      	adds	r0, #1
  40bb90:	e49b      	b.n	40b4ca <_vfiprintf_r+0x3a2>
  40bb92:	2b30      	cmp	r3, #48	; 0x30
  40bb94:	9b08      	ldr	r3, [sp, #32]
  40bb96:	d022      	beq.n	40bbde <_vfiprintf_r+0xab6>
  40bb98:	3b01      	subs	r3, #1
  40bb9a:	461a      	mov	r2, r3
  40bb9c:	9308      	str	r3, [sp, #32]
  40bb9e:	2330      	movs	r3, #48	; 0x30
  40bba0:	ebc2 080b 	rsb	r8, r2, fp
  40bba4:	f801 3c01 	strb.w	r3, [r1, #-1]
  40bba8:	f7ff bbe2 	b.w	40b370 <_vfiprintf_r+0x248>
  40bbac:	46d8      	mov	r8, fp
  40bbae:	4630      	mov	r0, r6
  40bbb0:	4639      	mov	r1, r7
  40bbb2:	220a      	movs	r2, #10
  40bbb4:	2300      	movs	r3, #0
  40bbb6:	f002 ff2f 	bl	40ea18 <__aeabi_uldivmod>
  40bbba:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40bbbe:	4630      	mov	r0, r6
  40bbc0:	4639      	mov	r1, r7
  40bbc2:	2300      	movs	r3, #0
  40bbc4:	220a      	movs	r2, #10
  40bbc6:	f808 ed01 	strb.w	lr, [r8, #-1]!
  40bbca:	f002 ff25 	bl	40ea18 <__aeabi_uldivmod>
  40bbce:	4606      	mov	r6, r0
  40bbd0:	460f      	mov	r7, r1
  40bbd2:	ea56 0307 	orrs.w	r3, r6, r7
  40bbd6:	d1ea      	bne.n	40bbae <_vfiprintf_r+0xa86>
  40bbd8:	4643      	mov	r3, r8
  40bbda:	f8cd 8020 	str.w	r8, [sp, #32]
  40bbde:	ebc3 080b 	rsb	r8, r3, fp
  40bbe2:	f7ff bbc5 	b.w	40b370 <_vfiprintf_r+0x248>
  40bbe6:	252d      	movs	r5, #45	; 0x2d
  40bbe8:	4276      	negs	r6, r6
  40bbea:	f8cd 8010 	str.w	r8, [sp, #16]
  40bbee:	f04f 0301 	mov.w	r3, #1
  40bbf2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40bbf6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40bbfa:	f7ff bb9a 	b.w	40b332 <_vfiprintf_r+0x20a>
  40bbfe:	4611      	mov	r1, r2
  40bc00:	2001      	movs	r0, #1
  40bc02:	465c      	mov	r4, fp
  40bc04:	f1bc 0f00 	cmp.w	ip, #0
  40bc08:	f43f ac21 	beq.w	40b44e <_vfiprintf_r+0x326>
  40bc0c:	aa0e      	add	r2, sp, #56	; 0x38
  40bc0e:	2302      	movs	r3, #2
  40bc10:	f8cb 2000 	str.w	r2, [fp]
  40bc14:	461a      	mov	r2, r3
  40bc16:	f8cb 3004 	str.w	r3, [fp, #4]
  40bc1a:	e411      	b.n	40b440 <_vfiprintf_r+0x318>
  40bc1c:	f019 0f10 	tst.w	r9, #16
  40bc20:	d10b      	bne.n	40bc3a <_vfiprintf_r+0xb12>
  40bc22:	f019 0f40 	tst.w	r9, #64	; 0x40
  40bc26:	d008      	beq.n	40bc3a <_vfiprintf_r+0xb12>
  40bc28:	9a06      	ldr	r2, [sp, #24]
  40bc2a:	6813      	ldr	r3, [r2, #0]
  40bc2c:	3204      	adds	r2, #4
  40bc2e:	9206      	str	r2, [sp, #24]
  40bc30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40bc34:	801a      	strh	r2, [r3, #0]
  40bc36:	f7ff baa9 	b.w	40b18c <_vfiprintf_r+0x64>
  40bc3a:	9a06      	ldr	r2, [sp, #24]
  40bc3c:	6813      	ldr	r3, [r2, #0]
  40bc3e:	3204      	adds	r2, #4
  40bc40:	9206      	str	r2, [sp, #24]
  40bc42:	9a03      	ldr	r2, [sp, #12]
  40bc44:	601a      	str	r2, [r3, #0]
  40bc46:	f7ff baa1 	b.w	40b18c <_vfiprintf_r+0x64>
  40bc4a:	9802      	ldr	r0, [sp, #8]
  40bc4c:	aa0f      	add	r2, sp, #60	; 0x3c
  40bc4e:	9901      	ldr	r1, [sp, #4]
  40bc50:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40bc54:	f7ff fa2c 	bl	40b0b0 <__sprint_r.part.0>
  40bc58:	2800      	cmp	r0, #0
  40bc5a:	f47f adfe 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bc5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bc60:	465c      	mov	r4, fp
  40bc62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bc64:	1c48      	adds	r0, r1, #1
  40bc66:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40bc6a:	e5db      	b.n	40b824 <_vfiprintf_r+0x6fc>
  40bc6c:	f049 0920 	orr.w	r9, r9, #32
  40bc70:	f10a 0001 	add.w	r0, sl, #1
  40bc74:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40bc78:	f7ff baba 	b.w	40b1f0 <_vfiprintf_r+0xc8>
  40bc7c:	426d      	negs	r5, r5
  40bc7e:	9306      	str	r3, [sp, #24]
  40bc80:	4650      	mov	r0, sl
  40bc82:	e440      	b.n	40b506 <_vfiprintf_r+0x3de>
  40bc84:	9808      	ldr	r0, [sp, #32]
  40bc86:	9606      	str	r6, [sp, #24]
  40bc88:	f7fd fe88 	bl	40999c <strlen>
  40bc8c:	2300      	movs	r3, #0
  40bc8e:	4680      	mov	r8, r0
  40bc90:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40bc94:	9304      	str	r3, [sp, #16]
  40bc96:	f7ff bb6b 	b.w	40b370 <_vfiprintf_r+0x248>
  40bc9a:	9802      	ldr	r0, [sp, #8]
  40bc9c:	aa0f      	add	r2, sp, #60	; 0x3c
  40bc9e:	9901      	ldr	r1, [sp, #4]
  40bca0:	f7ff fa06 	bl	40b0b0 <__sprint_r.part.0>
  40bca4:	2800      	cmp	r0, #0
  40bca6:	f47f add8 	bne.w	40b85a <_vfiprintf_r+0x732>
  40bcaa:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bcac:	465c      	mov	r4, fp
  40bcae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bcb0:	1c48      	adds	r0, r1, #1
  40bcb2:	f7ff bbcc 	b.w	40b44e <_vfiprintf_r+0x326>
  40bcb6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bcb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bcba:	3101      	adds	r1, #1
  40bcbc:	4e14      	ldr	r6, [pc, #80]	; (40bd10 <_vfiprintf_r+0xbe8>)
  40bcbe:	f7ff bba3 	b.w	40b408 <_vfiprintf_r+0x2e0>
  40bcc2:	f1b8 0f06 	cmp.w	r8, #6
  40bcc6:	4b13      	ldr	r3, [pc, #76]	; (40bd14 <_vfiprintf_r+0xbec>)
  40bcc8:	9606      	str	r6, [sp, #24]
  40bcca:	bf28      	it	cs
  40bccc:	f04f 0806 	movcs.w	r8, #6
  40bcd0:	9308      	str	r3, [sp, #32]
  40bcd2:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  40bcd6:	e4bc      	b.n	40b652 <_vfiprintf_r+0x52a>
  40bcd8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40bcda:	4e0d      	ldr	r6, [pc, #52]	; (40bd10 <_vfiprintf_r+0xbe8>)
  40bcdc:	f101 0e01 	add.w	lr, r1, #1
  40bce0:	e626      	b.n	40b930 <_vfiprintf_r+0x808>
  40bce2:	9606      	str	r6, [sp, #24]
  40bce4:	9004      	str	r0, [sp, #16]
  40bce6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40bcea:	f7ff bb41 	b.w	40b370 <_vfiprintf_r+0x248>
  40bcee:	4686      	mov	lr, r0
  40bcf0:	4e09      	ldr	r6, [pc, #36]	; (40bd18 <_vfiprintf_r+0xbf0>)
  40bcf2:	e67f      	b.n	40b9f4 <_vfiprintf_r+0x8cc>
  40bcf4:	9a06      	ldr	r2, [sp, #24]
  40bcf6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40bcfa:	6816      	ldr	r6, [r2, #0]
  40bcfc:	3204      	adds	r2, #4
  40bcfe:	2e00      	cmp	r6, #0
  40bd00:	9206      	str	r2, [sp, #24]
  40bd02:	f6bf aa75 	bge.w	40b1f0 <_vfiprintf_r+0xc8>
  40bd06:	f04f 36ff 	mov.w	r6, #4294967295
  40bd0a:	f7ff ba71 	b.w	40b1f0 <_vfiprintf_r+0xc8>
  40bd0e:	bf00      	nop
  40bd10:	0040fcf4 	.word	0x0040fcf4
  40bd14:	0040fcd8 	.word	0x0040fcd8
  40bd18:	0040fce4 	.word	0x0040fce4

0040bd1c <__sbprintf>:
  40bd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40bd20:	898d      	ldrh	r5, [r1, #12]
  40bd22:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40bd26:	4688      	mov	r8, r1
  40bd28:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40bd2c:	f025 0502 	bic.w	r5, r5, #2
  40bd30:	ac1c      	add	r4, sp, #112	; 0x70
  40bd32:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40bd36:	2700      	movs	r7, #0
  40bd38:	f8ad 5014 	strh.w	r5, [sp, #20]
  40bd3c:	a902      	add	r1, sp, #8
  40bd3e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40bd42:	4681      	mov	r9, r0
  40bd44:	9402      	str	r4, [sp, #8]
  40bd46:	9501      	str	r5, [sp, #4]
  40bd48:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  40bd4c:	9406      	str	r4, [sp, #24]
  40bd4e:	951b      	str	r5, [sp, #108]	; 0x6c
  40bd50:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40bd54:	f8ad a016 	strh.w	sl, [sp, #22]
  40bd58:	9509      	str	r5, [sp, #36]	; 0x24
  40bd5a:	9d01      	ldr	r5, [sp, #4]
  40bd5c:	9708      	str	r7, [sp, #32]
  40bd5e:	950b      	str	r5, [sp, #44]	; 0x2c
  40bd60:	9604      	str	r6, [sp, #16]
  40bd62:	9607      	str	r6, [sp, #28]
  40bd64:	f7ff f9e0 	bl	40b128 <_vfiprintf_r>
  40bd68:	1e04      	subs	r4, r0, #0
  40bd6a:	db07      	blt.n	40bd7c <__sbprintf+0x60>
  40bd6c:	4648      	mov	r0, r9
  40bd6e:	a902      	add	r1, sp, #8
  40bd70:	f001 f946 	bl	40d000 <_fflush_r>
  40bd74:	42b8      	cmp	r0, r7
  40bd76:	bf18      	it	ne
  40bd78:	f04f 34ff 	movne.w	r4, #4294967295
  40bd7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40bd80:	065b      	lsls	r3, r3, #25
  40bd82:	d505      	bpl.n	40bd90 <__sbprintf+0x74>
  40bd84:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40bd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bd8c:	f8a8 300c 	strh.w	r3, [r8, #12]
  40bd90:	4620      	mov	r0, r4
  40bd92:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40bd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bd9a:	bf00      	nop

0040bd9c <__swsetup_r>:
  40bd9c:	b538      	push	{r3, r4, r5, lr}
  40bd9e:	4b2f      	ldr	r3, [pc, #188]	; (40be5c <__swsetup_r+0xc0>)
  40bda0:	4605      	mov	r5, r0
  40bda2:	460c      	mov	r4, r1
  40bda4:	6818      	ldr	r0, [r3, #0]
  40bda6:	b110      	cbz	r0, 40bdae <__swsetup_r+0x12>
  40bda8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bdaa:	2b00      	cmp	r3, #0
  40bdac:	d036      	beq.n	40be1c <__swsetup_r+0x80>
  40bdae:	89a2      	ldrh	r2, [r4, #12]
  40bdb0:	b293      	uxth	r3, r2
  40bdb2:	0718      	lsls	r0, r3, #28
  40bdb4:	d50b      	bpl.n	40bdce <__swsetup_r+0x32>
  40bdb6:	6920      	ldr	r0, [r4, #16]
  40bdb8:	b1a0      	cbz	r0, 40bde4 <__swsetup_r+0x48>
  40bdba:	f013 0201 	ands.w	r2, r3, #1
  40bdbe:	d11d      	bne.n	40bdfc <__swsetup_r+0x60>
  40bdc0:	0799      	lsls	r1, r3, #30
  40bdc2:	d400      	bmi.n	40bdc6 <__swsetup_r+0x2a>
  40bdc4:	6962      	ldr	r2, [r4, #20]
  40bdc6:	60a2      	str	r2, [r4, #8]
  40bdc8:	b1f8      	cbz	r0, 40be0a <__swsetup_r+0x6e>
  40bdca:	2000      	movs	r0, #0
  40bdcc:	bd38      	pop	{r3, r4, r5, pc}
  40bdce:	06d9      	lsls	r1, r3, #27
  40bdd0:	d53b      	bpl.n	40be4a <__swsetup_r+0xae>
  40bdd2:	0758      	lsls	r0, r3, #29
  40bdd4:	d425      	bmi.n	40be22 <__swsetup_r+0x86>
  40bdd6:	6920      	ldr	r0, [r4, #16]
  40bdd8:	f042 0208 	orr.w	r2, r2, #8
  40bddc:	b293      	uxth	r3, r2
  40bdde:	81a2      	strh	r2, [r4, #12]
  40bde0:	2800      	cmp	r0, #0
  40bde2:	d1ea      	bne.n	40bdba <__swsetup_r+0x1e>
  40bde4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40bde8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40bdec:	d0e5      	beq.n	40bdba <__swsetup_r+0x1e>
  40bdee:	4628      	mov	r0, r5
  40bdf0:	4621      	mov	r1, r4
  40bdf2:	f001 fd17 	bl	40d824 <__smakebuf_r>
  40bdf6:	89a3      	ldrh	r3, [r4, #12]
  40bdf8:	6920      	ldr	r0, [r4, #16]
  40bdfa:	e7de      	b.n	40bdba <__swsetup_r+0x1e>
  40bdfc:	6963      	ldr	r3, [r4, #20]
  40bdfe:	2200      	movs	r2, #0
  40be00:	425b      	negs	r3, r3
  40be02:	60a2      	str	r2, [r4, #8]
  40be04:	61a3      	str	r3, [r4, #24]
  40be06:	2800      	cmp	r0, #0
  40be08:	d1df      	bne.n	40bdca <__swsetup_r+0x2e>
  40be0a:	89a3      	ldrh	r3, [r4, #12]
  40be0c:	061a      	lsls	r2, r3, #24
  40be0e:	d5dd      	bpl.n	40bdcc <__swsetup_r+0x30>
  40be10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40be14:	f04f 30ff 	mov.w	r0, #4294967295
  40be18:	81a3      	strh	r3, [r4, #12]
  40be1a:	bd38      	pop	{r3, r4, r5, pc}
  40be1c:	f001 f98a 	bl	40d134 <__sinit>
  40be20:	e7c5      	b.n	40bdae <__swsetup_r+0x12>
  40be22:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40be24:	b149      	cbz	r1, 40be3a <__swsetup_r+0x9e>
  40be26:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40be2a:	4299      	cmp	r1, r3
  40be2c:	d003      	beq.n	40be36 <__swsetup_r+0x9a>
  40be2e:	4628      	mov	r0, r5
  40be30:	f001 fa58 	bl	40d2e4 <_free_r>
  40be34:	89a2      	ldrh	r2, [r4, #12]
  40be36:	2300      	movs	r3, #0
  40be38:	6323      	str	r3, [r4, #48]	; 0x30
  40be3a:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40be3e:	2300      	movs	r3, #0
  40be40:	6920      	ldr	r0, [r4, #16]
  40be42:	b292      	uxth	r2, r2
  40be44:	e884 0009 	stmia.w	r4, {r0, r3}
  40be48:	e7c6      	b.n	40bdd8 <__swsetup_r+0x3c>
  40be4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40be4e:	2309      	movs	r3, #9
  40be50:	f04f 30ff 	mov.w	r0, #4294967295
  40be54:	602b      	str	r3, [r5, #0]
  40be56:	81a2      	strh	r2, [r4, #12]
  40be58:	bd38      	pop	{r3, r4, r5, pc}
  40be5a:	bf00      	nop
  40be5c:	20400448 	.word	0x20400448

0040be60 <register_fini>:
  40be60:	4b02      	ldr	r3, [pc, #8]	; (40be6c <register_fini+0xc>)
  40be62:	b113      	cbz	r3, 40be6a <register_fini+0xa>
  40be64:	4802      	ldr	r0, [pc, #8]	; (40be70 <register_fini+0x10>)
  40be66:	f000 b80d 	b.w	40be84 <atexit>
  40be6a:	4770      	bx	lr
  40be6c:	00000000 	.word	0x00000000
  40be70:	0040d149 	.word	0x0040d149

0040be74 <abort>:
  40be74:	b508      	push	{r3, lr}
  40be76:	2006      	movs	r0, #6
  40be78:	f002 fb20 	bl	40e4bc <raise>
  40be7c:	2001      	movs	r0, #1
  40be7e:	f7f7 fc33 	bl	4036e8 <_exit>
  40be82:	bf00      	nop

0040be84 <atexit>:
  40be84:	4601      	mov	r1, r0
  40be86:	2000      	movs	r0, #0
  40be88:	4602      	mov	r2, r0
  40be8a:	4603      	mov	r3, r0
  40be8c:	f002 bc9e 	b.w	40e7cc <__register_exitproc>

0040be90 <quorem>:
  40be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be94:	6903      	ldr	r3, [r0, #16]
  40be96:	b083      	sub	sp, #12
  40be98:	690f      	ldr	r7, [r1, #16]
  40be9a:	429f      	cmp	r7, r3
  40be9c:	f300 8093 	bgt.w	40bfc6 <quorem+0x136>
  40bea0:	3f01      	subs	r7, #1
  40bea2:	f101 0614 	add.w	r6, r1, #20
  40bea6:	f100 0a14 	add.w	sl, r0, #20
  40beaa:	00bb      	lsls	r3, r7, #2
  40beac:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  40beb0:	461d      	mov	r5, r3
  40beb2:	9300      	str	r3, [sp, #0]
  40beb4:	3201      	adds	r2, #1
  40beb6:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40beba:	eb0a 0405 	add.w	r4, sl, r5
  40bebe:	eb06 0905 	add.w	r9, r6, r5
  40bec2:	fbb3 f8f2 	udiv	r8, r3, r2
  40bec6:	9401      	str	r4, [sp, #4]
  40bec8:	f1b8 0f00 	cmp.w	r8, #0
  40becc:	d040      	beq.n	40bf50 <quorem+0xc0>
  40bece:	2500      	movs	r5, #0
  40bed0:	46b4      	mov	ip, r6
  40bed2:	46d6      	mov	lr, sl
  40bed4:	462b      	mov	r3, r5
  40bed6:	f85c bb04 	ldr.w	fp, [ip], #4
  40beda:	f8de 2000 	ldr.w	r2, [lr]
  40bede:	fa1f f48b 	uxth.w	r4, fp
  40bee2:	45e1      	cmp	r9, ip
  40bee4:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  40bee8:	fb04 5508 	mla	r5, r4, r8, r5
  40beec:	fb0b fb08 	mul.w	fp, fp, r8
  40bef0:	b2ac      	uxth	r4, r5
  40bef2:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  40bef6:	eba3 0304 	sub.w	r3, r3, r4
  40befa:	fa1f fb85 	uxth.w	fp, r5
  40befe:	fa13 f482 	uxtah	r4, r3, r2
  40bf02:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40bf06:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40bf0a:	fa1f fb84 	uxth.w	fp, r4
  40bf0e:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40bf12:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40bf16:	ea4f 4323 	mov.w	r3, r3, asr #16
  40bf1a:	f84e 2b04 	str.w	r2, [lr], #4
  40bf1e:	d2da      	bcs.n	40bed6 <quorem+0x46>
  40bf20:	9b00      	ldr	r3, [sp, #0]
  40bf22:	f85a 3003 	ldr.w	r3, [sl, r3]
  40bf26:	b99b      	cbnz	r3, 40bf50 <quorem+0xc0>
  40bf28:	9c01      	ldr	r4, [sp, #4]
  40bf2a:	1f23      	subs	r3, r4, #4
  40bf2c:	459a      	cmp	sl, r3
  40bf2e:	d20e      	bcs.n	40bf4e <quorem+0xbe>
  40bf30:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40bf34:	b95b      	cbnz	r3, 40bf4e <quorem+0xbe>
  40bf36:	f1a4 0308 	sub.w	r3, r4, #8
  40bf3a:	e001      	b.n	40bf40 <quorem+0xb0>
  40bf3c:	6812      	ldr	r2, [r2, #0]
  40bf3e:	b932      	cbnz	r2, 40bf4e <quorem+0xbe>
  40bf40:	459a      	cmp	sl, r3
  40bf42:	461a      	mov	r2, r3
  40bf44:	f107 37ff 	add.w	r7, r7, #4294967295
  40bf48:	f1a3 0304 	sub.w	r3, r3, #4
  40bf4c:	d3f6      	bcc.n	40bf3c <quorem+0xac>
  40bf4e:	6107      	str	r7, [r0, #16]
  40bf50:	4604      	mov	r4, r0
  40bf52:	f001 ffa1 	bl	40de98 <__mcmp>
  40bf56:	2800      	cmp	r0, #0
  40bf58:	db31      	blt.n	40bfbe <quorem+0x12e>
  40bf5a:	f108 0801 	add.w	r8, r8, #1
  40bf5e:	4655      	mov	r5, sl
  40bf60:	2000      	movs	r0, #0
  40bf62:	f856 1b04 	ldr.w	r1, [r6], #4
  40bf66:	682a      	ldr	r2, [r5, #0]
  40bf68:	b28b      	uxth	r3, r1
  40bf6a:	45b1      	cmp	r9, r6
  40bf6c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40bf70:	eba0 0303 	sub.w	r3, r0, r3
  40bf74:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  40bf78:	fa13 f382 	uxtah	r3, r3, r2
  40bf7c:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40bf80:	b29b      	uxth	r3, r3
  40bf82:	ea4f 4022 	mov.w	r0, r2, asr #16
  40bf86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40bf8a:	f845 3b04 	str.w	r3, [r5], #4
  40bf8e:	d2e8      	bcs.n	40bf62 <quorem+0xd2>
  40bf90:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40bf94:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40bf98:	b98a      	cbnz	r2, 40bfbe <quorem+0x12e>
  40bf9a:	1f1a      	subs	r2, r3, #4
  40bf9c:	4592      	cmp	sl, r2
  40bf9e:	d20d      	bcs.n	40bfbc <quorem+0x12c>
  40bfa0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40bfa4:	b952      	cbnz	r2, 40bfbc <quorem+0x12c>
  40bfa6:	3b08      	subs	r3, #8
  40bfa8:	e001      	b.n	40bfae <quorem+0x11e>
  40bfaa:	6812      	ldr	r2, [r2, #0]
  40bfac:	b932      	cbnz	r2, 40bfbc <quorem+0x12c>
  40bfae:	459a      	cmp	sl, r3
  40bfb0:	461a      	mov	r2, r3
  40bfb2:	f107 37ff 	add.w	r7, r7, #4294967295
  40bfb6:	f1a3 0304 	sub.w	r3, r3, #4
  40bfba:	d3f6      	bcc.n	40bfaa <quorem+0x11a>
  40bfbc:	6127      	str	r7, [r4, #16]
  40bfbe:	4640      	mov	r0, r8
  40bfc0:	b003      	add	sp, #12
  40bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bfc6:	2000      	movs	r0, #0
  40bfc8:	b003      	add	sp, #12
  40bfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bfce:	bf00      	nop

0040bfd0 <_dtoa_r>:
  40bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bfd4:	469b      	mov	fp, r3
  40bfd6:	b099      	sub	sp, #100	; 0x64
  40bfd8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40bfda:	4604      	mov	r4, r0
  40bfdc:	4692      	mov	sl, r2
  40bfde:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40bfe0:	b14b      	cbz	r3, 40bff6 <_dtoa_r+0x26>
  40bfe2:	6c46      	ldr	r6, [r0, #68]	; 0x44
  40bfe4:	2201      	movs	r2, #1
  40bfe6:	4619      	mov	r1, r3
  40bfe8:	40b2      	lsls	r2, r6
  40bfea:	605e      	str	r6, [r3, #4]
  40bfec:	609a      	str	r2, [r3, #8]
  40bfee:	f001 fd5d 	bl	40daac <_Bfree>
  40bff2:	2300      	movs	r3, #0
  40bff4:	6423      	str	r3, [r4, #64]	; 0x40
  40bff6:	f1bb 0f00 	cmp.w	fp, #0
  40bffa:	46d9      	mov	r9, fp
  40bffc:	db33      	blt.n	40c066 <_dtoa_r+0x96>
  40bffe:	2300      	movs	r3, #0
  40c000:	602b      	str	r3, [r5, #0]
  40c002:	4b99      	ldr	r3, [pc, #612]	; (40c268 <_dtoa_r+0x298>)
  40c004:	461a      	mov	r2, r3
  40c006:	ea09 0303 	and.w	r3, r9, r3
  40c00a:	4293      	cmp	r3, r2
  40c00c:	d014      	beq.n	40c038 <_dtoa_r+0x68>
  40c00e:	2200      	movs	r2, #0
  40c010:	2300      	movs	r3, #0
  40c012:	4650      	mov	r0, sl
  40c014:	4659      	mov	r1, fp
  40c016:	f7fc fe27 	bl	408c68 <__aeabi_dcmpeq>
  40c01a:	4680      	mov	r8, r0
  40c01c:	b348      	cbz	r0, 40c072 <_dtoa_r+0xa2>
  40c01e:	2301      	movs	r3, #1
  40c020:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c022:	6013      	str	r3, [r2, #0]
  40c024:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c026:	2b00      	cmp	r3, #0
  40c028:	f000 80cb 	beq.w	40c1c2 <_dtoa_r+0x1f2>
  40c02c:	488f      	ldr	r0, [pc, #572]	; (40c26c <_dtoa_r+0x29c>)
  40c02e:	6018      	str	r0, [r3, #0]
  40c030:	3801      	subs	r0, #1
  40c032:	b019      	add	sp, #100	; 0x64
  40c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c038:	f242 730f 	movw	r3, #9999	; 0x270f
  40c03c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c03e:	6013      	str	r3, [r2, #0]
  40c040:	f1ba 0f00 	cmp.w	sl, #0
  40c044:	f000 80a6 	beq.w	40c194 <_dtoa_r+0x1c4>
  40c048:	4889      	ldr	r0, [pc, #548]	; (40c270 <_dtoa_r+0x2a0>)
  40c04a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c04c:	2b00      	cmp	r3, #0
  40c04e:	d0f0      	beq.n	40c032 <_dtoa_r+0x62>
  40c050:	78c3      	ldrb	r3, [r0, #3]
  40c052:	2b00      	cmp	r3, #0
  40c054:	f000 80b7 	beq.w	40c1c6 <_dtoa_r+0x1f6>
  40c058:	f100 0308 	add.w	r3, r0, #8
  40c05c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40c05e:	6013      	str	r3, [r2, #0]
  40c060:	b019      	add	sp, #100	; 0x64
  40c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c066:	2301      	movs	r3, #1
  40c068:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40c06c:	602b      	str	r3, [r5, #0]
  40c06e:	46cb      	mov	fp, r9
  40c070:	e7c7      	b.n	40c002 <_dtoa_r+0x32>
  40c072:	ad17      	add	r5, sp, #92	; 0x5c
  40c074:	a916      	add	r1, sp, #88	; 0x58
  40c076:	4620      	mov	r0, r4
  40c078:	4652      	mov	r2, sl
  40c07a:	9500      	str	r5, [sp, #0]
  40c07c:	465b      	mov	r3, fp
  40c07e:	9101      	str	r1, [sp, #4]
  40c080:	f001 ffa0 	bl	40dfc4 <__d2b>
  40c084:	9006      	str	r0, [sp, #24]
  40c086:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40c08a:	f040 808c 	bne.w	40c1a6 <_dtoa_r+0x1d6>
  40c08e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40c092:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40c096:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40c098:	4445      	add	r5, r8
  40c09a:	429d      	cmp	r5, r3
  40c09c:	f2c0 81cc 	blt.w	40c438 <_dtoa_r+0x468>
  40c0a0:	331f      	adds	r3, #31
  40c0a2:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40c0a6:	1b5b      	subs	r3, r3, r5
  40c0a8:	fa2a f002 	lsr.w	r0, sl, r2
  40c0ac:	fa09 f903 	lsl.w	r9, r9, r3
  40c0b0:	ea49 0000 	orr.w	r0, r9, r0
  40c0b4:	f7fc fafa 	bl	4086ac <__aeabi_ui2d>
  40c0b8:	3d01      	subs	r5, #1
  40c0ba:	2301      	movs	r3, #1
  40c0bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40c0c0:	9311      	str	r3, [sp, #68]	; 0x44
  40c0c2:	2200      	movs	r2, #0
  40c0c4:	4b6b      	ldr	r3, [pc, #428]	; (40c274 <_dtoa_r+0x2a4>)
  40c0c6:	f7fc f9b3 	bl	408430 <__aeabi_dsub>
  40c0ca:	a361      	add	r3, pc, #388	; (adr r3, 40c250 <_dtoa_r+0x280>)
  40c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c0d0:	f7fc fb62 	bl	408798 <__aeabi_dmul>
  40c0d4:	a360      	add	r3, pc, #384	; (adr r3, 40c258 <_dtoa_r+0x288>)
  40c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c0da:	f7fc f9ab 	bl	408434 <__adddf3>
  40c0de:	4606      	mov	r6, r0
  40c0e0:	460f      	mov	r7, r1
  40c0e2:	4628      	mov	r0, r5
  40c0e4:	f7fc faf2 	bl	4086cc <__aeabi_i2d>
  40c0e8:	a35d      	add	r3, pc, #372	; (adr r3, 40c260 <_dtoa_r+0x290>)
  40c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c0ee:	f7fc fb53 	bl	408798 <__aeabi_dmul>
  40c0f2:	4602      	mov	r2, r0
  40c0f4:	460b      	mov	r3, r1
  40c0f6:	4630      	mov	r0, r6
  40c0f8:	4639      	mov	r1, r7
  40c0fa:	f7fc f99b 	bl	408434 <__adddf3>
  40c0fe:	4606      	mov	r6, r0
  40c100:	460f      	mov	r7, r1
  40c102:	f7fc fde3 	bl	408ccc <__aeabi_d2iz>
  40c106:	2200      	movs	r2, #0
  40c108:	9002      	str	r0, [sp, #8]
  40c10a:	4639      	mov	r1, r7
  40c10c:	4630      	mov	r0, r6
  40c10e:	2300      	movs	r3, #0
  40c110:	f7fc fdb4 	bl	408c7c <__aeabi_dcmplt>
  40c114:	2800      	cmp	r0, #0
  40c116:	f040 8171 	bne.w	40c3fc <_dtoa_r+0x42c>
  40c11a:	9b02      	ldr	r3, [sp, #8]
  40c11c:	2b16      	cmp	r3, #22
  40c11e:	f200 8091 	bhi.w	40c244 <_dtoa_r+0x274>
  40c122:	9802      	ldr	r0, [sp, #8]
  40c124:	4652      	mov	r2, sl
  40c126:	4954      	ldr	r1, [pc, #336]	; (40c278 <_dtoa_r+0x2a8>)
  40c128:	465b      	mov	r3, fp
  40c12a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40c12e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c132:	f7fc fdc1 	bl	408cb8 <__aeabi_dcmpgt>
  40c136:	2800      	cmp	r0, #0
  40c138:	f000 817c 	beq.w	40c434 <_dtoa_r+0x464>
  40c13c:	9b02      	ldr	r3, [sp, #8]
  40c13e:	3b01      	subs	r3, #1
  40c140:	9302      	str	r3, [sp, #8]
  40c142:	2300      	movs	r3, #0
  40c144:	930d      	str	r3, [sp, #52]	; 0x34
  40c146:	ebc5 0508 	rsb	r5, r5, r8
  40c14a:	1e6b      	subs	r3, r5, #1
  40c14c:	9303      	str	r3, [sp, #12]
  40c14e:	f100 816c 	bmi.w	40c42a <_dtoa_r+0x45a>
  40c152:	2300      	movs	r3, #0
  40c154:	9307      	str	r3, [sp, #28]
  40c156:	9b02      	ldr	r3, [sp, #8]
  40c158:	2b00      	cmp	r3, #0
  40c15a:	f2c0 815d 	blt.w	40c418 <_dtoa_r+0x448>
  40c15e:	9a03      	ldr	r2, [sp, #12]
  40c160:	930c      	str	r3, [sp, #48]	; 0x30
  40c162:	4611      	mov	r1, r2
  40c164:	4419      	add	r1, r3
  40c166:	2300      	movs	r3, #0
  40c168:	9103      	str	r1, [sp, #12]
  40c16a:	930a      	str	r3, [sp, #40]	; 0x28
  40c16c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c16e:	2b09      	cmp	r3, #9
  40c170:	d82b      	bhi.n	40c1ca <_dtoa_r+0x1fa>
  40c172:	2b05      	cmp	r3, #5
  40c174:	f340 867e 	ble.w	40ce74 <_dtoa_r+0xea4>
  40c178:	3b04      	subs	r3, #4
  40c17a:	2500      	movs	r5, #0
  40c17c:	9322      	str	r3, [sp, #136]	; 0x88
  40c17e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c180:	3b02      	subs	r3, #2
  40c182:	2b03      	cmp	r3, #3
  40c184:	f200 8679 	bhi.w	40ce7a <_dtoa_r+0xeaa>
  40c188:	e8df f013 	tbh	[pc, r3, lsl #1]
  40c18c:	0289029b 	.word	0x0289029b
  40c190:	068d0180 	.word	0x068d0180
  40c194:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40c198:	4b35      	ldr	r3, [pc, #212]	; (40c270 <_dtoa_r+0x2a0>)
  40c19a:	4a38      	ldr	r2, [pc, #224]	; (40c27c <_dtoa_r+0x2ac>)
  40c19c:	2800      	cmp	r0, #0
  40c19e:	bf14      	ite	ne
  40c1a0:	4618      	movne	r0, r3
  40c1a2:	4610      	moveq	r0, r2
  40c1a4:	e751      	b.n	40c04a <_dtoa_r+0x7a>
  40c1a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40c1aa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40c1ae:	4650      	mov	r0, sl
  40c1b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40c1b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40c1b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40c1bc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40c1c0:	e77f      	b.n	40c0c2 <_dtoa_r+0xf2>
  40c1c2:	482f      	ldr	r0, [pc, #188]	; (40c280 <_dtoa_r+0x2b0>)
  40c1c4:	e735      	b.n	40c032 <_dtoa_r+0x62>
  40c1c6:	1cc3      	adds	r3, r0, #3
  40c1c8:	e748      	b.n	40c05c <_dtoa_r+0x8c>
  40c1ca:	f04f 33ff 	mov.w	r3, #4294967295
  40c1ce:	2100      	movs	r1, #0
  40c1d0:	4620      	mov	r0, r4
  40c1d2:	461d      	mov	r5, r3
  40c1d4:	9310      	str	r3, [sp, #64]	; 0x40
  40c1d6:	2301      	movs	r3, #1
  40c1d8:	6461      	str	r1, [r4, #68]	; 0x44
  40c1da:	9123      	str	r1, [sp, #140]	; 0x8c
  40c1dc:	930b      	str	r3, [sp, #44]	; 0x2c
  40c1de:	f001 fc3d 	bl	40da5c <_Balloc>
  40c1e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c1e4:	9005      	str	r0, [sp, #20]
  40c1e6:	9322      	str	r3, [sp, #136]	; 0x88
  40c1e8:	9504      	str	r5, [sp, #16]
  40c1ea:	6420      	str	r0, [r4, #64]	; 0x40
  40c1ec:	9a02      	ldr	r2, [sp, #8]
  40c1ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c1f0:	2a0e      	cmp	r2, #14
  40c1f2:	dc49      	bgt.n	40c288 <_dtoa_r+0x2b8>
  40c1f4:	2b00      	cmp	r3, #0
  40c1f6:	db47      	blt.n	40c288 <_dtoa_r+0x2b8>
  40c1f8:	4b1f      	ldr	r3, [pc, #124]	; (40c278 <_dtoa_r+0x2a8>)
  40c1fa:	9a02      	ldr	r2, [sp, #8]
  40c1fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c200:	e9d3 8900 	ldrd	r8, r9, [r3]
  40c204:	9b04      	ldr	r3, [sp, #16]
  40c206:	2b00      	cmp	r3, #0
  40c208:	f300 825e 	bgt.w	40c6c8 <_dtoa_r+0x6f8>
  40c20c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c20e:	2b00      	cmp	r3, #0
  40c210:	f280 825a 	bge.w	40c6c8 <_dtoa_r+0x6f8>
  40c214:	9b04      	ldr	r3, [sp, #16]
  40c216:	2b00      	cmp	r3, #0
  40c218:	f040 85bf 	bne.w	40cd9a <_dtoa_r+0xdca>
  40c21c:	2200      	movs	r2, #0
  40c21e:	4b19      	ldr	r3, [pc, #100]	; (40c284 <_dtoa_r+0x2b4>)
  40c220:	4640      	mov	r0, r8
  40c222:	4649      	mov	r1, r9
  40c224:	f7fc fab8 	bl	408798 <__aeabi_dmul>
  40c228:	4652      	mov	r2, sl
  40c22a:	465b      	mov	r3, fp
  40c22c:	f7fc fd3a 	bl	408ca4 <__aeabi_dcmpge>
  40c230:	9f04      	ldr	r7, [sp, #16]
  40c232:	9708      	str	r7, [sp, #32]
  40c234:	2800      	cmp	r0, #0
  40c236:	f000 80bd 	beq.w	40c3b4 <_dtoa_r+0x3e4>
  40c23a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c23c:	9d05      	ldr	r5, [sp, #20]
  40c23e:	43db      	mvns	r3, r3
  40c240:	9302      	str	r3, [sp, #8]
  40c242:	e0be      	b.n	40c3c2 <_dtoa_r+0x3f2>
  40c244:	2301      	movs	r3, #1
  40c246:	930d      	str	r3, [sp, #52]	; 0x34
  40c248:	e77d      	b.n	40c146 <_dtoa_r+0x176>
  40c24a:	bf00      	nop
  40c24c:	f3af 8000 	nop.w
  40c250:	636f4361 	.word	0x636f4361
  40c254:	3fd287a7 	.word	0x3fd287a7
  40c258:	8b60c8b3 	.word	0x8b60c8b3
  40c25c:	3fc68a28 	.word	0x3fc68a28
  40c260:	509f79fb 	.word	0x509f79fb
  40c264:	3fd34413 	.word	0x3fd34413
  40c268:	7ff00000 	.word	0x7ff00000
  40c26c:	0040fce1 	.word	0x0040fce1
  40c270:	0040fe14 	.word	0x0040fe14
  40c274:	3ff80000 	.word	0x3ff80000
  40c278:	0040fe28 	.word	0x0040fe28
  40c27c:	0040fe08 	.word	0x0040fe08
  40c280:	0040fce0 	.word	0x0040fce0
  40c284:	40140000 	.word	0x40140000
  40c288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c28a:	2a00      	cmp	r2, #0
  40c28c:	f040 80e1 	bne.w	40c452 <_dtoa_r+0x482>
  40c290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c292:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40c294:	9d07      	ldr	r5, [sp, #28]
  40c296:	9308      	str	r3, [sp, #32]
  40c298:	9903      	ldr	r1, [sp, #12]
  40c29a:	2900      	cmp	r1, #0
  40c29c:	460b      	mov	r3, r1
  40c29e:	dd0a      	ble.n	40c2b6 <_dtoa_r+0x2e6>
  40c2a0:	2d00      	cmp	r5, #0
  40c2a2:	dd08      	ble.n	40c2b6 <_dtoa_r+0x2e6>
  40c2a4:	42a9      	cmp	r1, r5
  40c2a6:	9a07      	ldr	r2, [sp, #28]
  40c2a8:	bfa8      	it	ge
  40c2aa:	462b      	movge	r3, r5
  40c2ac:	1ad2      	subs	r2, r2, r3
  40c2ae:	1aed      	subs	r5, r5, r3
  40c2b0:	1acb      	subs	r3, r1, r3
  40c2b2:	9207      	str	r2, [sp, #28]
  40c2b4:	9303      	str	r3, [sp, #12]
  40c2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c2b8:	2b00      	cmp	r3, #0
  40c2ba:	dd1b      	ble.n	40c2f4 <_dtoa_r+0x324>
  40c2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c2be:	2b00      	cmp	r3, #0
  40c2c0:	f000 84ce 	beq.w	40cc60 <_dtoa_r+0xc90>
  40c2c4:	2e00      	cmp	r6, #0
  40c2c6:	dd11      	ble.n	40c2ec <_dtoa_r+0x31c>
  40c2c8:	9908      	ldr	r1, [sp, #32]
  40c2ca:	4632      	mov	r2, r6
  40c2cc:	4620      	mov	r0, r4
  40c2ce:	f001 fd39 	bl	40dd44 <__pow5mult>
  40c2d2:	9f06      	ldr	r7, [sp, #24]
  40c2d4:	4601      	mov	r1, r0
  40c2d6:	9008      	str	r0, [sp, #32]
  40c2d8:	463a      	mov	r2, r7
  40c2da:	4620      	mov	r0, r4
  40c2dc:	f001 fc90 	bl	40dc00 <__multiply>
  40c2e0:	4603      	mov	r3, r0
  40c2e2:	4639      	mov	r1, r7
  40c2e4:	4620      	mov	r0, r4
  40c2e6:	9306      	str	r3, [sp, #24]
  40c2e8:	f001 fbe0 	bl	40daac <_Bfree>
  40c2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c2ee:	1b9a      	subs	r2, r3, r6
  40c2f0:	f040 84ff 	bne.w	40ccf2 <_dtoa_r+0xd22>
  40c2f4:	4620      	mov	r0, r4
  40c2f6:	2101      	movs	r1, #1
  40c2f8:	f001 fc78 	bl	40dbec <__i2b>
  40c2fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c2fe:	4607      	mov	r7, r0
  40c300:	2b00      	cmp	r3, #0
  40c302:	f340 8282 	ble.w	40c80a <_dtoa_r+0x83a>
  40c306:	4601      	mov	r1, r0
  40c308:	461a      	mov	r2, r3
  40c30a:	4620      	mov	r0, r4
  40c30c:	f001 fd1a 	bl	40dd44 <__pow5mult>
  40c310:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c312:	4607      	mov	r7, r0
  40c314:	2b01      	cmp	r3, #1
  40c316:	f340 84f3 	ble.w	40cd00 <_dtoa_r+0xd30>
  40c31a:	f04f 0800 	mov.w	r8, #0
  40c31e:	693b      	ldr	r3, [r7, #16]
  40c320:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40c324:	6918      	ldr	r0, [r3, #16]
  40c326:	f001 fc0d 	bl	40db44 <__hi0bits>
  40c32a:	f1c0 0020 	rsb	r0, r0, #32
  40c32e:	9b03      	ldr	r3, [sp, #12]
  40c330:	4418      	add	r0, r3
  40c332:	f010 001f 	ands.w	r0, r0, #31
  40c336:	f000 82a0 	beq.w	40c87a <_dtoa_r+0x8aa>
  40c33a:	f1c0 0320 	rsb	r3, r0, #32
  40c33e:	2b04      	cmp	r3, #4
  40c340:	f340 8592 	ble.w	40ce68 <_dtoa_r+0xe98>
  40c344:	f1c0 001c 	rsb	r0, r0, #28
  40c348:	9b07      	ldr	r3, [sp, #28]
  40c34a:	4405      	add	r5, r0
  40c34c:	4403      	add	r3, r0
  40c34e:	9307      	str	r3, [sp, #28]
  40c350:	9b03      	ldr	r3, [sp, #12]
  40c352:	4403      	add	r3, r0
  40c354:	9303      	str	r3, [sp, #12]
  40c356:	9b07      	ldr	r3, [sp, #28]
  40c358:	2b00      	cmp	r3, #0
  40c35a:	dd05      	ble.n	40c368 <_dtoa_r+0x398>
  40c35c:	9906      	ldr	r1, [sp, #24]
  40c35e:	461a      	mov	r2, r3
  40c360:	4620      	mov	r0, r4
  40c362:	f001 fd3f 	bl	40dde4 <__lshift>
  40c366:	9006      	str	r0, [sp, #24]
  40c368:	9b03      	ldr	r3, [sp, #12]
  40c36a:	2b00      	cmp	r3, #0
  40c36c:	dd05      	ble.n	40c37a <_dtoa_r+0x3aa>
  40c36e:	4639      	mov	r1, r7
  40c370:	461a      	mov	r2, r3
  40c372:	4620      	mov	r0, r4
  40c374:	f001 fd36 	bl	40dde4 <__lshift>
  40c378:	4607      	mov	r7, r0
  40c37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c37c:	2b00      	cmp	r3, #0
  40c37e:	f040 838b 	bne.w	40ca98 <_dtoa_r+0xac8>
  40c382:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c384:	2b02      	cmp	r3, #2
  40c386:	f340 827a 	ble.w	40c87e <_dtoa_r+0x8ae>
  40c38a:	9b04      	ldr	r3, [sp, #16]
  40c38c:	2b00      	cmp	r3, #0
  40c38e:	f300 8276 	bgt.w	40c87e <_dtoa_r+0x8ae>
  40c392:	9b04      	ldr	r3, [sp, #16]
  40c394:	2b00      	cmp	r3, #0
  40c396:	f47f af50 	bne.w	40c23a <_dtoa_r+0x26a>
  40c39a:	4639      	mov	r1, r7
  40c39c:	2205      	movs	r2, #5
  40c39e:	4620      	mov	r0, r4
  40c3a0:	f001 fb8e 	bl	40dac0 <__multadd>
  40c3a4:	4607      	mov	r7, r0
  40c3a6:	9806      	ldr	r0, [sp, #24]
  40c3a8:	4639      	mov	r1, r7
  40c3aa:	f001 fd75 	bl	40de98 <__mcmp>
  40c3ae:	2800      	cmp	r0, #0
  40c3b0:	f77f af43 	ble.w	40c23a <_dtoa_r+0x26a>
  40c3b4:	9a02      	ldr	r2, [sp, #8]
  40c3b6:	2331      	movs	r3, #49	; 0x31
  40c3b8:	3201      	adds	r2, #1
  40c3ba:	9202      	str	r2, [sp, #8]
  40c3bc:	9a05      	ldr	r2, [sp, #20]
  40c3be:	1c55      	adds	r5, r2, #1
  40c3c0:	7013      	strb	r3, [r2, #0]
  40c3c2:	4639      	mov	r1, r7
  40c3c4:	4620      	mov	r0, r4
  40c3c6:	f001 fb71 	bl	40daac <_Bfree>
  40c3ca:	9b08      	ldr	r3, [sp, #32]
  40c3cc:	b11b      	cbz	r3, 40c3d6 <_dtoa_r+0x406>
  40c3ce:	9908      	ldr	r1, [sp, #32]
  40c3d0:	4620      	mov	r0, r4
  40c3d2:	f001 fb6b 	bl	40daac <_Bfree>
  40c3d6:	4620      	mov	r0, r4
  40c3d8:	9906      	ldr	r1, [sp, #24]
  40c3da:	f001 fb67 	bl	40daac <_Bfree>
  40c3de:	2200      	movs	r2, #0
  40c3e0:	9b02      	ldr	r3, [sp, #8]
  40c3e2:	702a      	strb	r2, [r5, #0]
  40c3e4:	3301      	adds	r3, #1
  40c3e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c3e8:	6013      	str	r3, [r2, #0]
  40c3ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c3ec:	2b00      	cmp	r3, #0
  40c3ee:	f000 82a3 	beq.w	40c938 <_dtoa_r+0x968>
  40c3f2:	9805      	ldr	r0, [sp, #20]
  40c3f4:	601d      	str	r5, [r3, #0]
  40c3f6:	b019      	add	sp, #100	; 0x64
  40c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3fc:	9802      	ldr	r0, [sp, #8]
  40c3fe:	f7fc f965 	bl	4086cc <__aeabi_i2d>
  40c402:	4632      	mov	r2, r6
  40c404:	463b      	mov	r3, r7
  40c406:	f7fc fc2f 	bl	408c68 <__aeabi_dcmpeq>
  40c40a:	2800      	cmp	r0, #0
  40c40c:	f47f ae85 	bne.w	40c11a <_dtoa_r+0x14a>
  40c410:	9b02      	ldr	r3, [sp, #8]
  40c412:	3b01      	subs	r3, #1
  40c414:	9302      	str	r3, [sp, #8]
  40c416:	e680      	b.n	40c11a <_dtoa_r+0x14a>
  40c418:	9a07      	ldr	r2, [sp, #28]
  40c41a:	9b02      	ldr	r3, [sp, #8]
  40c41c:	1ad2      	subs	r2, r2, r3
  40c41e:	425b      	negs	r3, r3
  40c420:	930a      	str	r3, [sp, #40]	; 0x28
  40c422:	2300      	movs	r3, #0
  40c424:	9207      	str	r2, [sp, #28]
  40c426:	930c      	str	r3, [sp, #48]	; 0x30
  40c428:	e6a0      	b.n	40c16c <_dtoa_r+0x19c>
  40c42a:	425b      	negs	r3, r3
  40c42c:	9307      	str	r3, [sp, #28]
  40c42e:	2300      	movs	r3, #0
  40c430:	9303      	str	r3, [sp, #12]
  40c432:	e690      	b.n	40c156 <_dtoa_r+0x186>
  40c434:	900d      	str	r0, [sp, #52]	; 0x34
  40c436:	e686      	b.n	40c146 <_dtoa_r+0x176>
  40c438:	4bbd      	ldr	r3, [pc, #756]	; (40c730 <_dtoa_r+0x760>)
  40c43a:	1b5b      	subs	r3, r3, r5
  40c43c:	fa0a f003 	lsl.w	r0, sl, r3
  40c440:	e638      	b.n	40c0b4 <_dtoa_r+0xe4>
  40c442:	2100      	movs	r1, #0
  40c444:	f04f 32ff 	mov.w	r2, #4294967295
  40c448:	9123      	str	r1, [sp, #140]	; 0x8c
  40c44a:	2101      	movs	r1, #1
  40c44c:	9204      	str	r2, [sp, #16]
  40c44e:	910b      	str	r1, [sp, #44]	; 0x2c
  40c450:	9210      	str	r2, [sp, #64]	; 0x40
  40c452:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40c454:	2a01      	cmp	r2, #1
  40c456:	f340 8460 	ble.w	40cd1a <_dtoa_r+0xd4a>
  40c45a:	9b04      	ldr	r3, [sp, #16]
  40c45c:	1e5e      	subs	r6, r3, #1
  40c45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c460:	42b3      	cmp	r3, r6
  40c462:	f2c0 8405 	blt.w	40cc70 <_dtoa_r+0xca0>
  40c466:	1b9e      	subs	r6, r3, r6
  40c468:	9b04      	ldr	r3, [sp, #16]
  40c46a:	2b00      	cmp	r3, #0
  40c46c:	f2c0 8461 	blt.w	40cd32 <_dtoa_r+0xd62>
  40c470:	9d07      	ldr	r5, [sp, #28]
  40c472:	9b04      	ldr	r3, [sp, #16]
  40c474:	9a07      	ldr	r2, [sp, #28]
  40c476:	4620      	mov	r0, r4
  40c478:	2101      	movs	r1, #1
  40c47a:	441a      	add	r2, r3
  40c47c:	9207      	str	r2, [sp, #28]
  40c47e:	9a03      	ldr	r2, [sp, #12]
  40c480:	441a      	add	r2, r3
  40c482:	9203      	str	r2, [sp, #12]
  40c484:	f001 fbb2 	bl	40dbec <__i2b>
  40c488:	9008      	str	r0, [sp, #32]
  40c48a:	e705      	b.n	40c298 <_dtoa_r+0x2c8>
  40c48c:	2301      	movs	r3, #1
  40c48e:	930b      	str	r3, [sp, #44]	; 0x2c
  40c490:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c492:	2b00      	cmp	r3, #0
  40c494:	f340 83df 	ble.w	40cc56 <_dtoa_r+0xc86>
  40c498:	2b0e      	cmp	r3, #14
  40c49a:	bf8c      	ite	hi
  40c49c:	2500      	movhi	r5, #0
  40c49e:	f005 0501 	andls.w	r5, r5, #1
  40c4a2:	461e      	mov	r6, r3
  40c4a4:	9310      	str	r3, [sp, #64]	; 0x40
  40c4a6:	9304      	str	r3, [sp, #16]
  40c4a8:	2100      	movs	r1, #0
  40c4aa:	2e17      	cmp	r6, #23
  40c4ac:	6461      	str	r1, [r4, #68]	; 0x44
  40c4ae:	d909      	bls.n	40c4c4 <_dtoa_r+0x4f4>
  40c4b0:	2201      	movs	r2, #1
  40c4b2:	2304      	movs	r3, #4
  40c4b4:	005b      	lsls	r3, r3, #1
  40c4b6:	4611      	mov	r1, r2
  40c4b8:	3201      	adds	r2, #1
  40c4ba:	f103 0014 	add.w	r0, r3, #20
  40c4be:	42b0      	cmp	r0, r6
  40c4c0:	d9f8      	bls.n	40c4b4 <_dtoa_r+0x4e4>
  40c4c2:	6461      	str	r1, [r4, #68]	; 0x44
  40c4c4:	4620      	mov	r0, r4
  40c4c6:	f001 fac9 	bl	40da5c <_Balloc>
  40c4ca:	9005      	str	r0, [sp, #20]
  40c4cc:	6420      	str	r0, [r4, #64]	; 0x40
  40c4ce:	2d00      	cmp	r5, #0
  40c4d0:	f43f ae8c 	beq.w	40c1ec <_dtoa_r+0x21c>
  40c4d4:	9802      	ldr	r0, [sp, #8]
  40c4d6:	2800      	cmp	r0, #0
  40c4d8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  40c4dc:	f340 8233 	ble.w	40c946 <_dtoa_r+0x976>
  40c4e0:	4a94      	ldr	r2, [pc, #592]	; (40c734 <_dtoa_r+0x764>)
  40c4e2:	f000 030f 	and.w	r3, r0, #15
  40c4e6:	1105      	asrs	r5, r0, #4
  40c4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40c4ec:	06ea      	lsls	r2, r5, #27
  40c4ee:	e9d3 6700 	ldrd	r6, r7, [r3]
  40c4f2:	f140 821c 	bpl.w	40c92e <_dtoa_r+0x95e>
  40c4f6:	4b90      	ldr	r3, [pc, #576]	; (40c738 <_dtoa_r+0x768>)
  40c4f8:	4650      	mov	r0, sl
  40c4fa:	4659      	mov	r1, fp
  40c4fc:	f005 050f 	and.w	r5, r5, #15
  40c500:	f04f 0803 	mov.w	r8, #3
  40c504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40c508:	f7fc fa70 	bl	4089ec <__aeabi_ddiv>
  40c50c:	4682      	mov	sl, r0
  40c50e:	468b      	mov	fp, r1
  40c510:	b18d      	cbz	r5, 40c536 <_dtoa_r+0x566>
  40c512:	f8df 9224 	ldr.w	r9, [pc, #548]	; 40c738 <_dtoa_r+0x768>
  40c516:	07eb      	lsls	r3, r5, #31
  40c518:	4630      	mov	r0, r6
  40c51a:	4639      	mov	r1, r7
  40c51c:	d507      	bpl.n	40c52e <_dtoa_r+0x55e>
  40c51e:	f108 0801 	add.w	r8, r8, #1
  40c522:	e9d9 2300 	ldrd	r2, r3, [r9]
  40c526:	f7fc f937 	bl	408798 <__aeabi_dmul>
  40c52a:	4606      	mov	r6, r0
  40c52c:	460f      	mov	r7, r1
  40c52e:	106d      	asrs	r5, r5, #1
  40c530:	f109 0908 	add.w	r9, r9, #8
  40c534:	d1ef      	bne.n	40c516 <_dtoa_r+0x546>
  40c536:	4650      	mov	r0, sl
  40c538:	4659      	mov	r1, fp
  40c53a:	4632      	mov	r2, r6
  40c53c:	463b      	mov	r3, r7
  40c53e:	f7fc fa55 	bl	4089ec <__aeabi_ddiv>
  40c542:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40c546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c548:	b143      	cbz	r3, 40c55c <_dtoa_r+0x58c>
  40c54a:	2200      	movs	r2, #0
  40c54c:	4b7b      	ldr	r3, [pc, #492]	; (40c73c <_dtoa_r+0x76c>)
  40c54e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40c552:	f7fc fb93 	bl	408c7c <__aeabi_dcmplt>
  40c556:	2800      	cmp	r0, #0
  40c558:	f040 8393 	bne.w	40cc82 <_dtoa_r+0xcb2>
  40c55c:	4640      	mov	r0, r8
  40c55e:	f7fc f8b5 	bl	4086cc <__aeabi_i2d>
  40c562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40c566:	f7fc f917 	bl	408798 <__aeabi_dmul>
  40c56a:	4b75      	ldr	r3, [pc, #468]	; (40c740 <_dtoa_r+0x770>)
  40c56c:	2200      	movs	r2, #0
  40c56e:	f7fb ff61 	bl	408434 <__adddf3>
  40c572:	9b04      	ldr	r3, [sp, #16]
  40c574:	4606      	mov	r6, r0
  40c576:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40c57a:	2b00      	cmp	r3, #0
  40c57c:	f000 8161 	beq.w	40c842 <_dtoa_r+0x872>
  40c580:	9b02      	ldr	r3, [sp, #8]
  40c582:	f8dd c010 	ldr.w	ip, [sp, #16]
  40c586:	9314      	str	r3, [sp, #80]	; 0x50
  40c588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c58a:	2b00      	cmp	r3, #0
  40c58c:	f000 820b 	beq.w	40c9a6 <_dtoa_r+0x9d6>
  40c590:	4b68      	ldr	r3, [pc, #416]	; (40c734 <_dtoa_r+0x764>)
  40c592:	2000      	movs	r0, #0
  40c594:	9a05      	ldr	r2, [sp, #20]
  40c596:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40c59a:	496a      	ldr	r1, [pc, #424]	; (40c744 <_dtoa_r+0x774>)
  40c59c:	1c55      	adds	r5, r2, #1
  40c59e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40c5a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40c5a6:	f7fc fa21 	bl	4089ec <__aeabi_ddiv>
  40c5aa:	4632      	mov	r2, r6
  40c5ac:	463b      	mov	r3, r7
  40c5ae:	f7fb ff3f 	bl	408430 <__aeabi_dsub>
  40c5b2:	4682      	mov	sl, r0
  40c5b4:	468b      	mov	fp, r1
  40c5b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40c5ba:	4649      	mov	r1, r9
  40c5bc:	4640      	mov	r0, r8
  40c5be:	f7fc fb85 	bl	408ccc <__aeabi_d2iz>
  40c5c2:	4606      	mov	r6, r0
  40c5c4:	f7fc f882 	bl	4086cc <__aeabi_i2d>
  40c5c8:	4602      	mov	r2, r0
  40c5ca:	3630      	adds	r6, #48	; 0x30
  40c5cc:	460b      	mov	r3, r1
  40c5ce:	4640      	mov	r0, r8
  40c5d0:	4649      	mov	r1, r9
  40c5d2:	f7fb ff2d 	bl	408430 <__aeabi_dsub>
  40c5d6:	9f05      	ldr	r7, [sp, #20]
  40c5d8:	4680      	mov	r8, r0
  40c5da:	4689      	mov	r9, r1
  40c5dc:	b2f6      	uxtb	r6, r6
  40c5de:	4650      	mov	r0, sl
  40c5e0:	4659      	mov	r1, fp
  40c5e2:	4642      	mov	r2, r8
  40c5e4:	464b      	mov	r3, r9
  40c5e6:	703e      	strb	r6, [r7, #0]
  40c5e8:	f7fc fb66 	bl	408cb8 <__aeabi_dcmpgt>
  40c5ec:	2800      	cmp	r0, #0
  40c5ee:	f040 8243 	bne.w	40ca78 <_dtoa_r+0xaa8>
  40c5f2:	4642      	mov	r2, r8
  40c5f4:	464b      	mov	r3, r9
  40c5f6:	2000      	movs	r0, #0
  40c5f8:	4950      	ldr	r1, [pc, #320]	; (40c73c <_dtoa_r+0x76c>)
  40c5fa:	f7fb ff19 	bl	408430 <__aeabi_dsub>
  40c5fe:	4602      	mov	r2, r0
  40c600:	460b      	mov	r3, r1
  40c602:	4650      	mov	r0, sl
  40c604:	4659      	mov	r1, fp
  40c606:	f7fc fb57 	bl	408cb8 <__aeabi_dcmpgt>
  40c60a:	2800      	cmp	r0, #0
  40c60c:	f040 80eb 	bne.w	40c7e6 <_dtoa_r+0x816>
  40c610:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40c614:	f1bc 0f01 	cmp.w	ip, #1
  40c618:	f340 8192 	ble.w	40c940 <_dtoa_r+0x970>
  40c61c:	9f05      	ldr	r7, [sp, #20]
  40c61e:	9412      	str	r4, [sp, #72]	; 0x48
  40c620:	4467      	add	r7, ip
  40c622:	9708      	str	r7, [sp, #32]
  40c624:	e00e      	b.n	40c644 <_dtoa_r+0x674>
  40c626:	2000      	movs	r0, #0
  40c628:	4944      	ldr	r1, [pc, #272]	; (40c73c <_dtoa_r+0x76c>)
  40c62a:	f7fb ff01 	bl	408430 <__aeabi_dsub>
  40c62e:	4652      	mov	r2, sl
  40c630:	465b      	mov	r3, fp
  40c632:	f7fc fb23 	bl	408c7c <__aeabi_dcmplt>
  40c636:	2800      	cmp	r0, #0
  40c638:	f040 83a1 	bne.w	40cd7e <_dtoa_r+0xdae>
  40c63c:	9b08      	ldr	r3, [sp, #32]
  40c63e:	429d      	cmp	r5, r3
  40c640:	f000 817d 	beq.w	40c93e <_dtoa_r+0x96e>
  40c644:	4650      	mov	r0, sl
  40c646:	4659      	mov	r1, fp
  40c648:	2200      	movs	r2, #0
  40c64a:	4b3f      	ldr	r3, [pc, #252]	; (40c748 <_dtoa_r+0x778>)
  40c64c:	f7fc f8a4 	bl	408798 <__aeabi_dmul>
  40c650:	2200      	movs	r2, #0
  40c652:	4b3d      	ldr	r3, [pc, #244]	; (40c748 <_dtoa_r+0x778>)
  40c654:	4682      	mov	sl, r0
  40c656:	468b      	mov	fp, r1
  40c658:	4640      	mov	r0, r8
  40c65a:	4649      	mov	r1, r9
  40c65c:	f7fc f89c 	bl	408798 <__aeabi_dmul>
  40c660:	4606      	mov	r6, r0
  40c662:	460f      	mov	r7, r1
  40c664:	f7fc fb32 	bl	408ccc <__aeabi_d2iz>
  40c668:	4604      	mov	r4, r0
  40c66a:	f7fc f82f 	bl	4086cc <__aeabi_i2d>
  40c66e:	4602      	mov	r2, r0
  40c670:	460b      	mov	r3, r1
  40c672:	3430      	adds	r4, #48	; 0x30
  40c674:	4630      	mov	r0, r6
  40c676:	4639      	mov	r1, r7
  40c678:	b2e6      	uxtb	r6, r4
  40c67a:	f7fb fed9 	bl	408430 <__aeabi_dsub>
  40c67e:	4680      	mov	r8, r0
  40c680:	4689      	mov	r9, r1
  40c682:	4652      	mov	r2, sl
  40c684:	465b      	mov	r3, fp
  40c686:	f805 6b01 	strb.w	r6, [r5], #1
  40c68a:	f7fc faf7 	bl	408c7c <__aeabi_dcmplt>
  40c68e:	4642      	mov	r2, r8
  40c690:	464b      	mov	r3, r9
  40c692:	2800      	cmp	r0, #0
  40c694:	d0c7      	beq.n	40c626 <_dtoa_r+0x656>
  40c696:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c698:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c69a:	9302      	str	r3, [sp, #8]
  40c69c:	e69b      	b.n	40c3d6 <_dtoa_r+0x406>
  40c69e:	2300      	movs	r3, #0
  40c6a0:	930b      	str	r3, [sp, #44]	; 0x2c
  40c6a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c6a4:	9a02      	ldr	r2, [sp, #8]
  40c6a6:	4413      	add	r3, r2
  40c6a8:	9310      	str	r3, [sp, #64]	; 0x40
  40c6aa:	3301      	adds	r3, #1
  40c6ac:	2b00      	cmp	r3, #0
  40c6ae:	9304      	str	r3, [sp, #16]
  40c6b0:	f340 82c9 	ble.w	40cc46 <_dtoa_r+0xc76>
  40c6b4:	9e04      	ldr	r6, [sp, #16]
  40c6b6:	2e0e      	cmp	r6, #14
  40c6b8:	bf8c      	ite	hi
  40c6ba:	2500      	movhi	r5, #0
  40c6bc:	f005 0501 	andls.w	r5, r5, #1
  40c6c0:	e6f2      	b.n	40c4a8 <_dtoa_r+0x4d8>
  40c6c2:	2300      	movs	r3, #0
  40c6c4:	930b      	str	r3, [sp, #44]	; 0x2c
  40c6c6:	e6e3      	b.n	40c490 <_dtoa_r+0x4c0>
  40c6c8:	9905      	ldr	r1, [sp, #20]
  40c6ca:	4642      	mov	r2, r8
  40c6cc:	464b      	mov	r3, r9
  40c6ce:	4650      	mov	r0, sl
  40c6d0:	1c4d      	adds	r5, r1, #1
  40c6d2:	4659      	mov	r1, fp
  40c6d4:	f7fc f98a 	bl	4089ec <__aeabi_ddiv>
  40c6d8:	4656      	mov	r6, sl
  40c6da:	f7fc faf7 	bl	408ccc <__aeabi_d2iz>
  40c6de:	4682      	mov	sl, r0
  40c6e0:	f7fb fff4 	bl	4086cc <__aeabi_i2d>
  40c6e4:	4642      	mov	r2, r8
  40c6e6:	464b      	mov	r3, r9
  40c6e8:	f7fc f856 	bl	408798 <__aeabi_dmul>
  40c6ec:	4602      	mov	r2, r0
  40c6ee:	460b      	mov	r3, r1
  40c6f0:	4630      	mov	r0, r6
  40c6f2:	4659      	mov	r1, fp
  40c6f4:	f7fb fe9c 	bl	408430 <__aeabi_dsub>
  40c6f8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40c6fc:	9a05      	ldr	r2, [sp, #20]
  40c6fe:	4606      	mov	r6, r0
  40c700:	460f      	mov	r7, r1
  40c702:	7013      	strb	r3, [r2, #0]
  40c704:	9b04      	ldr	r3, [sp, #16]
  40c706:	2b01      	cmp	r3, #1
  40c708:	d04d      	beq.n	40c7a6 <_dtoa_r+0x7d6>
  40c70a:	2200      	movs	r2, #0
  40c70c:	4b0e      	ldr	r3, [pc, #56]	; (40c748 <_dtoa_r+0x778>)
  40c70e:	f7fc f843 	bl	408798 <__aeabi_dmul>
  40c712:	2200      	movs	r2, #0
  40c714:	2300      	movs	r3, #0
  40c716:	4606      	mov	r6, r0
  40c718:	460f      	mov	r7, r1
  40c71a:	f7fc faa5 	bl	408c68 <__aeabi_dcmpeq>
  40c71e:	2800      	cmp	r0, #0
  40c720:	f47f ae59 	bne.w	40c3d6 <_dtoa_r+0x406>
  40c724:	9403      	str	r4, [sp, #12]
  40c726:	f8dd b014 	ldr.w	fp, [sp, #20]
  40c72a:	9c04      	ldr	r4, [sp, #16]
  40c72c:	e019      	b.n	40c762 <_dtoa_r+0x792>
  40c72e:	bf00      	nop
  40c730:	fffffbee 	.word	0xfffffbee
  40c734:	0040fe28 	.word	0x0040fe28
  40c738:	0040ff00 	.word	0x0040ff00
  40c73c:	3ff00000 	.word	0x3ff00000
  40c740:	401c0000 	.word	0x401c0000
  40c744:	3fe00000 	.word	0x3fe00000
  40c748:	40240000 	.word	0x40240000
  40c74c:	f7fc f824 	bl	408798 <__aeabi_dmul>
  40c750:	2200      	movs	r2, #0
  40c752:	2300      	movs	r3, #0
  40c754:	4606      	mov	r6, r0
  40c756:	460f      	mov	r7, r1
  40c758:	f7fc fa86 	bl	408c68 <__aeabi_dcmpeq>
  40c75c:	2800      	cmp	r0, #0
  40c75e:	f040 82e5 	bne.w	40cd2c <_dtoa_r+0xd5c>
  40c762:	4642      	mov	r2, r8
  40c764:	464b      	mov	r3, r9
  40c766:	4630      	mov	r0, r6
  40c768:	4639      	mov	r1, r7
  40c76a:	f7fc f93f 	bl	4089ec <__aeabi_ddiv>
  40c76e:	f7fc faad 	bl	408ccc <__aeabi_d2iz>
  40c772:	4682      	mov	sl, r0
  40c774:	f7fb ffaa 	bl	4086cc <__aeabi_i2d>
  40c778:	4642      	mov	r2, r8
  40c77a:	464b      	mov	r3, r9
  40c77c:	f7fc f80c 	bl	408798 <__aeabi_dmul>
  40c780:	4602      	mov	r2, r0
  40c782:	460b      	mov	r3, r1
  40c784:	4630      	mov	r0, r6
  40c786:	4639      	mov	r1, r7
  40c788:	f7fb fe52 	bl	408430 <__aeabi_dsub>
  40c78c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40c790:	4606      	mov	r6, r0
  40c792:	460f      	mov	r7, r1
  40c794:	f805 eb01 	strb.w	lr, [r5], #1
  40c798:	ebcb 0e05 	rsb	lr, fp, r5
  40c79c:	2200      	movs	r2, #0
  40c79e:	4bb8      	ldr	r3, [pc, #736]	; (40ca80 <_dtoa_r+0xab0>)
  40c7a0:	4574      	cmp	r4, lr
  40c7a2:	d1d3      	bne.n	40c74c <_dtoa_r+0x77c>
  40c7a4:	9c03      	ldr	r4, [sp, #12]
  40c7a6:	4632      	mov	r2, r6
  40c7a8:	463b      	mov	r3, r7
  40c7aa:	4630      	mov	r0, r6
  40c7ac:	4639      	mov	r1, r7
  40c7ae:	f7fb fe41 	bl	408434 <__adddf3>
  40c7b2:	4606      	mov	r6, r0
  40c7b4:	460f      	mov	r7, r1
  40c7b6:	4640      	mov	r0, r8
  40c7b8:	4649      	mov	r1, r9
  40c7ba:	4632      	mov	r2, r6
  40c7bc:	463b      	mov	r3, r7
  40c7be:	f7fc fa5d 	bl	408c7c <__aeabi_dcmplt>
  40c7c2:	b960      	cbnz	r0, 40c7de <_dtoa_r+0x80e>
  40c7c4:	4640      	mov	r0, r8
  40c7c6:	4649      	mov	r1, r9
  40c7c8:	4632      	mov	r2, r6
  40c7ca:	463b      	mov	r3, r7
  40c7cc:	f7fc fa4c 	bl	408c68 <__aeabi_dcmpeq>
  40c7d0:	2800      	cmp	r0, #0
  40c7d2:	f43f ae00 	beq.w	40c3d6 <_dtoa_r+0x406>
  40c7d6:	f01a 0f01 	tst.w	sl, #1
  40c7da:	f43f adfc 	beq.w	40c3d6 <_dtoa_r+0x406>
  40c7de:	9b02      	ldr	r3, [sp, #8]
  40c7e0:	9314      	str	r3, [sp, #80]	; 0x50
  40c7e2:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40c7e6:	1e6a      	subs	r2, r5, #1
  40c7e8:	9b05      	ldr	r3, [sp, #20]
  40c7ea:	e004      	b.n	40c7f6 <_dtoa_r+0x826>
  40c7ec:	429a      	cmp	r2, r3
  40c7ee:	f000 8277 	beq.w	40cce0 <_dtoa_r+0xd10>
  40c7f2:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40c7f6:	2e39      	cmp	r6, #57	; 0x39
  40c7f8:	f102 0501 	add.w	r5, r2, #1
  40c7fc:	d0f6      	beq.n	40c7ec <_dtoa_r+0x81c>
  40c7fe:	1c73      	adds	r3, r6, #1
  40c800:	9914      	ldr	r1, [sp, #80]	; 0x50
  40c802:	b2db      	uxtb	r3, r3
  40c804:	9102      	str	r1, [sp, #8]
  40c806:	7013      	strb	r3, [r2, #0]
  40c808:	e5e5      	b.n	40c3d6 <_dtoa_r+0x406>
  40c80a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40c80c:	2b01      	cmp	r3, #1
  40c80e:	f340 8161 	ble.w	40cad4 <_dtoa_r+0xb04>
  40c812:	f04f 0800 	mov.w	r8, #0
  40c816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c818:	2b00      	cmp	r3, #0
  40c81a:	f47f ad80 	bne.w	40c31e <_dtoa_r+0x34e>
  40c81e:	2001      	movs	r0, #1
  40c820:	e585      	b.n	40c32e <_dtoa_r+0x35e>
  40c822:	4640      	mov	r0, r8
  40c824:	f7fb ff52 	bl	4086cc <__aeabi_i2d>
  40c828:	4602      	mov	r2, r0
  40c82a:	460b      	mov	r3, r1
  40c82c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40c830:	f7fb ffb2 	bl	408798 <__aeabi_dmul>
  40c834:	2200      	movs	r2, #0
  40c836:	4b93      	ldr	r3, [pc, #588]	; (40ca84 <_dtoa_r+0xab4>)
  40c838:	f7fb fdfc 	bl	408434 <__adddf3>
  40c83c:	4606      	mov	r6, r0
  40c83e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40c842:	2200      	movs	r2, #0
  40c844:	4b90      	ldr	r3, [pc, #576]	; (40ca88 <_dtoa_r+0xab8>)
  40c846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40c84a:	f7fb fdf1 	bl	408430 <__aeabi_dsub>
  40c84e:	4632      	mov	r2, r6
  40c850:	463b      	mov	r3, r7
  40c852:	4680      	mov	r8, r0
  40c854:	4689      	mov	r9, r1
  40c856:	f7fc fa2f 	bl	408cb8 <__aeabi_dcmpgt>
  40c85a:	4605      	mov	r5, r0
  40c85c:	2800      	cmp	r0, #0
  40c85e:	f040 809f 	bne.w	40c9a0 <_dtoa_r+0x9d0>
  40c862:	4632      	mov	r2, r6
  40c864:	4640      	mov	r0, r8
  40c866:	4649      	mov	r1, r9
  40c868:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40c86c:	f7fc fa06 	bl	408c7c <__aeabi_dcmplt>
  40c870:	2800      	cmp	r0, #0
  40c872:	d065      	beq.n	40c940 <_dtoa_r+0x970>
  40c874:	462f      	mov	r7, r5
  40c876:	9508      	str	r5, [sp, #32]
  40c878:	e4df      	b.n	40c23a <_dtoa_r+0x26a>
  40c87a:	201c      	movs	r0, #28
  40c87c:	e564      	b.n	40c348 <_dtoa_r+0x378>
  40c87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c880:	2b00      	cmp	r3, #0
  40c882:	f040 814f 	bne.w	40cb24 <_dtoa_r+0xb54>
  40c886:	f8dd a014 	ldr.w	sl, [sp, #20]
  40c88a:	9e06      	ldr	r6, [sp, #24]
  40c88c:	4655      	mov	r5, sl
  40c88e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40c892:	e002      	b.n	40c89a <_dtoa_r+0x8ca>
  40c894:	f001 f914 	bl	40dac0 <__multadd>
  40c898:	4606      	mov	r6, r0
  40c89a:	4639      	mov	r1, r7
  40c89c:	4630      	mov	r0, r6
  40c89e:	f7ff faf7 	bl	40be90 <quorem>
  40c8a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40c8a6:	4631      	mov	r1, r6
  40c8a8:	4620      	mov	r0, r4
  40c8aa:	f805 9b01 	strb.w	r9, [r5], #1
  40c8ae:	ebca 0e05 	rsb	lr, sl, r5
  40c8b2:	220a      	movs	r2, #10
  40c8b4:	2300      	movs	r3, #0
  40c8b6:	45c6      	cmp	lr, r8
  40c8b8:	dbec      	blt.n	40c894 <_dtoa_r+0x8c4>
  40c8ba:	9b05      	ldr	r3, [sp, #20]
  40c8bc:	f04f 0a00 	mov.w	sl, #0
  40c8c0:	9a04      	ldr	r2, [sp, #16]
  40c8c2:	9606      	str	r6, [sp, #24]
  40c8c4:	2a01      	cmp	r2, #1
  40c8c6:	bfac      	ite	ge
  40c8c8:	189b      	addge	r3, r3, r2
  40c8ca:	3301      	addlt	r3, #1
  40c8cc:	461d      	mov	r5, r3
  40c8ce:	9906      	ldr	r1, [sp, #24]
  40c8d0:	2201      	movs	r2, #1
  40c8d2:	4620      	mov	r0, r4
  40c8d4:	f001 fa86 	bl	40dde4 <__lshift>
  40c8d8:	4639      	mov	r1, r7
  40c8da:	9006      	str	r0, [sp, #24]
  40c8dc:	f001 fadc 	bl	40de98 <__mcmp>
  40c8e0:	2800      	cmp	r0, #0
  40c8e2:	f340 824e 	ble.w	40cd82 <_dtoa_r+0xdb2>
  40c8e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40c8ea:	1e6b      	subs	r3, r5, #1
  40c8ec:	9905      	ldr	r1, [sp, #20]
  40c8ee:	e004      	b.n	40c8fa <_dtoa_r+0x92a>
  40c8f0:	428b      	cmp	r3, r1
  40c8f2:	f000 820b 	beq.w	40cd0c <_dtoa_r+0xd3c>
  40c8f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40c8fa:	2a39      	cmp	r2, #57	; 0x39
  40c8fc:	f103 0501 	add.w	r5, r3, #1
  40c900:	d0f6      	beq.n	40c8f0 <_dtoa_r+0x920>
  40c902:	3201      	adds	r2, #1
  40c904:	701a      	strb	r2, [r3, #0]
  40c906:	4639      	mov	r1, r7
  40c908:	4620      	mov	r0, r4
  40c90a:	f001 f8cf 	bl	40daac <_Bfree>
  40c90e:	9b08      	ldr	r3, [sp, #32]
  40c910:	2b00      	cmp	r3, #0
  40c912:	f43f ad60 	beq.w	40c3d6 <_dtoa_r+0x406>
  40c916:	459a      	cmp	sl, r3
  40c918:	f43f ad59 	beq.w	40c3ce <_dtoa_r+0x3fe>
  40c91c:	f1ba 0f00 	cmp.w	sl, #0
  40c920:	f43f ad55 	beq.w	40c3ce <_dtoa_r+0x3fe>
  40c924:	4651      	mov	r1, sl
  40c926:	4620      	mov	r0, r4
  40c928:	f001 f8c0 	bl	40daac <_Bfree>
  40c92c:	e54f      	b.n	40c3ce <_dtoa_r+0x3fe>
  40c92e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40c932:	f04f 0802 	mov.w	r8, #2
  40c936:	e5eb      	b.n	40c510 <_dtoa_r+0x540>
  40c938:	9805      	ldr	r0, [sp, #20]
  40c93a:	f7ff bb7a 	b.w	40c032 <_dtoa_r+0x62>
  40c93e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c940:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40c944:	e452      	b.n	40c1ec <_dtoa_r+0x21c>
  40c946:	9b02      	ldr	r3, [sp, #8]
  40c948:	425d      	negs	r5, r3
  40c94a:	2d00      	cmp	r5, #0
  40c94c:	f000 81c1 	beq.w	40ccd2 <_dtoa_r+0xd02>
  40c950:	f005 020f 	and.w	r2, r5, #15
  40c954:	4b4d      	ldr	r3, [pc, #308]	; (40ca8c <_dtoa_r+0xabc>)
  40c956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c95a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c962:	f7fb ff19 	bl	408798 <__aeabi_dmul>
  40c966:	112d      	asrs	r5, r5, #4
  40c968:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40c96c:	f000 8275 	beq.w	40ce5a <_dtoa_r+0xe8a>
  40c970:	4e47      	ldr	r6, [pc, #284]	; (40ca90 <_dtoa_r+0xac0>)
  40c972:	f04f 0802 	mov.w	r8, #2
  40c976:	4602      	mov	r2, r0
  40c978:	460b      	mov	r3, r1
  40c97a:	07ef      	lsls	r7, r5, #31
  40c97c:	4610      	mov	r0, r2
  40c97e:	4619      	mov	r1, r3
  40c980:	d507      	bpl.n	40c992 <_dtoa_r+0x9c2>
  40c982:	f108 0801 	add.w	r8, r8, #1
  40c986:	e9d6 2300 	ldrd	r2, r3, [r6]
  40c98a:	f7fb ff05 	bl	408798 <__aeabi_dmul>
  40c98e:	4602      	mov	r2, r0
  40c990:	460b      	mov	r3, r1
  40c992:	106d      	asrs	r5, r5, #1
  40c994:	f106 0608 	add.w	r6, r6, #8
  40c998:	d1ef      	bne.n	40c97a <_dtoa_r+0x9aa>
  40c99a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40c99e:	e5d2      	b.n	40c546 <_dtoa_r+0x576>
  40c9a0:	2700      	movs	r7, #0
  40c9a2:	9708      	str	r7, [sp, #32]
  40c9a4:	e506      	b.n	40c3b4 <_dtoa_r+0x3e4>
  40c9a6:	f10c 3bff 	add.w	fp, ip, #4294967295
  40c9aa:	4938      	ldr	r1, [pc, #224]	; (40ca8c <_dtoa_r+0xabc>)
  40c9ac:	4632      	mov	r2, r6
  40c9ae:	463b      	mov	r3, r7
  40c9b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40c9b4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  40c9b8:	9f05      	ldr	r7, [sp, #20]
  40c9ba:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c9be:	f7fb feeb 	bl	408798 <__aeabi_dmul>
  40c9c2:	1c7d      	adds	r5, r7, #1
  40c9c4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40c9c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40c9cc:	4649      	mov	r1, r9
  40c9ce:	4640      	mov	r0, r8
  40c9d0:	f7fc f97c 	bl	408ccc <__aeabi_d2iz>
  40c9d4:	4606      	mov	r6, r0
  40c9d6:	f7fb fe79 	bl	4086cc <__aeabi_i2d>
  40c9da:	4602      	mov	r2, r0
  40c9dc:	460b      	mov	r3, r1
  40c9de:	4640      	mov	r0, r8
  40c9e0:	4649      	mov	r1, r9
  40c9e2:	3630      	adds	r6, #48	; 0x30
  40c9e4:	f7fb fd24 	bl	408430 <__aeabi_dsub>
  40c9e8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  40c9ec:	4680      	mov	r8, r0
  40c9ee:	4689      	mov	r9, r1
  40c9f0:	f1bc 0f01 	cmp.w	ip, #1
  40c9f4:	703e      	strb	r6, [r7, #0]
  40c9f6:	d020      	beq.n	40ca3a <_dtoa_r+0xa6a>
  40c9f8:	9b05      	ldr	r3, [sp, #20]
  40c9fa:	4640      	mov	r0, r8
  40c9fc:	46aa      	mov	sl, r5
  40c9fe:	46a8      	mov	r8, r5
  40ca00:	eb03 070c 	add.w	r7, r3, ip
  40ca04:	46b9      	mov	r9, r7
  40ca06:	2200      	movs	r2, #0
  40ca08:	4b1d      	ldr	r3, [pc, #116]	; (40ca80 <_dtoa_r+0xab0>)
  40ca0a:	f7fb fec5 	bl	408798 <__aeabi_dmul>
  40ca0e:	460f      	mov	r7, r1
  40ca10:	4606      	mov	r6, r0
  40ca12:	f7fc f95b 	bl	408ccc <__aeabi_d2iz>
  40ca16:	4605      	mov	r5, r0
  40ca18:	f7fb fe58 	bl	4086cc <__aeabi_i2d>
  40ca1c:	4602      	mov	r2, r0
  40ca1e:	460b      	mov	r3, r1
  40ca20:	3530      	adds	r5, #48	; 0x30
  40ca22:	4630      	mov	r0, r6
  40ca24:	4639      	mov	r1, r7
  40ca26:	f7fb fd03 	bl	408430 <__aeabi_dsub>
  40ca2a:	f80a 5b01 	strb.w	r5, [sl], #1
  40ca2e:	45ca      	cmp	sl, r9
  40ca30:	d1e9      	bne.n	40ca06 <_dtoa_r+0xa36>
  40ca32:	4645      	mov	r5, r8
  40ca34:	4689      	mov	r9, r1
  40ca36:	4680      	mov	r8, r0
  40ca38:	445d      	add	r5, fp
  40ca3a:	2200      	movs	r2, #0
  40ca3c:	4b15      	ldr	r3, [pc, #84]	; (40ca94 <_dtoa_r+0xac4>)
  40ca3e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40ca42:	f7fb fcf7 	bl	408434 <__adddf3>
  40ca46:	4642      	mov	r2, r8
  40ca48:	464b      	mov	r3, r9
  40ca4a:	f7fc f917 	bl	408c7c <__aeabi_dcmplt>
  40ca4e:	2800      	cmp	r0, #0
  40ca50:	f47f aec7 	bne.w	40c7e2 <_dtoa_r+0x812>
  40ca54:	2000      	movs	r0, #0
  40ca56:	490f      	ldr	r1, [pc, #60]	; (40ca94 <_dtoa_r+0xac4>)
  40ca58:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40ca5c:	f7fb fce8 	bl	408430 <__aeabi_dsub>
  40ca60:	4642      	mov	r2, r8
  40ca62:	464b      	mov	r3, r9
  40ca64:	f7fc f928 	bl	408cb8 <__aeabi_dcmpgt>
  40ca68:	b908      	cbnz	r0, 40ca6e <_dtoa_r+0xa9e>
  40ca6a:	e769      	b.n	40c940 <_dtoa_r+0x970>
  40ca6c:	4615      	mov	r5, r2
  40ca6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ca72:	1e6a      	subs	r2, r5, #1
  40ca74:	2b30      	cmp	r3, #48	; 0x30
  40ca76:	d0f9      	beq.n	40ca6c <_dtoa_r+0xa9c>
  40ca78:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ca7a:	9302      	str	r3, [sp, #8]
  40ca7c:	e4ab      	b.n	40c3d6 <_dtoa_r+0x406>
  40ca7e:	bf00      	nop
  40ca80:	40240000 	.word	0x40240000
  40ca84:	401c0000 	.word	0x401c0000
  40ca88:	40140000 	.word	0x40140000
  40ca8c:	0040fe28 	.word	0x0040fe28
  40ca90:	0040ff00 	.word	0x0040ff00
  40ca94:	3fe00000 	.word	0x3fe00000
  40ca98:	9806      	ldr	r0, [sp, #24]
  40ca9a:	4639      	mov	r1, r7
  40ca9c:	f001 f9fc 	bl	40de98 <__mcmp>
  40caa0:	2800      	cmp	r0, #0
  40caa2:	f6bf ac6e 	bge.w	40c382 <_dtoa_r+0x3b2>
  40caa6:	9e02      	ldr	r6, [sp, #8]
  40caa8:	2300      	movs	r3, #0
  40caaa:	9906      	ldr	r1, [sp, #24]
  40caac:	4620      	mov	r0, r4
  40caae:	3e01      	subs	r6, #1
  40cab0:	220a      	movs	r2, #10
  40cab2:	9602      	str	r6, [sp, #8]
  40cab4:	f001 f804 	bl	40dac0 <__multadd>
  40cab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40caba:	9006      	str	r0, [sp, #24]
  40cabc:	bb1b      	cbnz	r3, 40cb06 <_dtoa_r+0xb36>
  40cabe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cac0:	2b02      	cmp	r3, #2
  40cac2:	f340 81ce 	ble.w	40ce62 <_dtoa_r+0xe92>
  40cac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cac8:	2b00      	cmp	r3, #0
  40caca:	f300 81ca 	bgt.w	40ce62 <_dtoa_r+0xe92>
  40cace:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cad0:	9304      	str	r3, [sp, #16]
  40cad2:	e45e      	b.n	40c392 <_dtoa_r+0x3c2>
  40cad4:	f1ba 0f00 	cmp.w	sl, #0
  40cad8:	f47f ae9b 	bne.w	40c812 <_dtoa_r+0x842>
  40cadc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40cae0:	2b00      	cmp	r3, #0
  40cae2:	f47f ae96 	bne.w	40c812 <_dtoa_r+0x842>
  40cae6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40caea:	0d36      	lsrs	r6, r6, #20
  40caec:	0536      	lsls	r6, r6, #20
  40caee:	2e00      	cmp	r6, #0
  40caf0:	f000 818a 	beq.w	40ce08 <_dtoa_r+0xe38>
  40caf4:	9b07      	ldr	r3, [sp, #28]
  40caf6:	f04f 0801 	mov.w	r8, #1
  40cafa:	3301      	adds	r3, #1
  40cafc:	9307      	str	r3, [sp, #28]
  40cafe:	9b03      	ldr	r3, [sp, #12]
  40cb00:	3301      	adds	r3, #1
  40cb02:	9303      	str	r3, [sp, #12]
  40cb04:	e687      	b.n	40c816 <_dtoa_r+0x846>
  40cb06:	2300      	movs	r3, #0
  40cb08:	9908      	ldr	r1, [sp, #32]
  40cb0a:	4620      	mov	r0, r4
  40cb0c:	220a      	movs	r2, #10
  40cb0e:	f000 ffd7 	bl	40dac0 <__multadd>
  40cb12:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cb14:	9008      	str	r0, [sp, #32]
  40cb16:	2b02      	cmp	r3, #2
  40cb18:	dd02      	ble.n	40cb20 <_dtoa_r+0xb50>
  40cb1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cb1c:	2b00      	cmp	r3, #0
  40cb1e:	ddd6      	ble.n	40cace <_dtoa_r+0xafe>
  40cb20:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cb22:	9304      	str	r3, [sp, #16]
  40cb24:	2d00      	cmp	r5, #0
  40cb26:	dd05      	ble.n	40cb34 <_dtoa_r+0xb64>
  40cb28:	9908      	ldr	r1, [sp, #32]
  40cb2a:	462a      	mov	r2, r5
  40cb2c:	4620      	mov	r0, r4
  40cb2e:	f001 f959 	bl	40dde4 <__lshift>
  40cb32:	9008      	str	r0, [sp, #32]
  40cb34:	f1b8 0f00 	cmp.w	r8, #0
  40cb38:	f040 8133 	bne.w	40cda2 <_dtoa_r+0xdd2>
  40cb3c:	9e08      	ldr	r6, [sp, #32]
  40cb3e:	f00a 0101 	and.w	r1, sl, #1
  40cb42:	9b04      	ldr	r3, [sp, #16]
  40cb44:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40cb46:	3b01      	subs	r3, #1
  40cb48:	910b      	str	r1, [sp, #44]	; 0x2c
  40cb4a:	9905      	ldr	r1, [sp, #20]
  40cb4c:	fab2 f282 	clz	r2, r2
  40cb50:	970a      	str	r7, [sp, #40]	; 0x28
  40cb52:	18cb      	adds	r3, r1, r3
  40cb54:	4688      	mov	r8, r1
  40cb56:	f8dd b020 	ldr.w	fp, [sp, #32]
  40cb5a:	930c      	str	r3, [sp, #48]	; 0x30
  40cb5c:	0953      	lsrs	r3, r2, #5
  40cb5e:	9f06      	ldr	r7, [sp, #24]
  40cb60:	9303      	str	r3, [sp, #12]
  40cb62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40cb64:	4638      	mov	r0, r7
  40cb66:	4629      	mov	r1, r5
  40cb68:	f7ff f992 	bl	40be90 <quorem>
  40cb6c:	4659      	mov	r1, fp
  40cb6e:	4681      	mov	r9, r0
  40cb70:	4638      	mov	r0, r7
  40cb72:	f001 f991 	bl	40de98 <__mcmp>
  40cb76:	4629      	mov	r1, r5
  40cb78:	4632      	mov	r2, r6
  40cb7a:	4682      	mov	sl, r0
  40cb7c:	4620      	mov	r0, r4
  40cb7e:	f001 f9af 	bl	40dee0 <__mdiff>
  40cb82:	68c2      	ldr	r2, [r0, #12]
  40cb84:	4605      	mov	r5, r0
  40cb86:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  40cb8a:	9207      	str	r2, [sp, #28]
  40cb8c:	2a00      	cmp	r2, #0
  40cb8e:	d150      	bne.n	40cc32 <_dtoa_r+0xc62>
  40cb90:	4629      	mov	r1, r5
  40cb92:	4638      	mov	r0, r7
  40cb94:	f8cd c018 	str.w	ip, [sp, #24]
  40cb98:	f001 f97e 	bl	40de98 <__mcmp>
  40cb9c:	4629      	mov	r1, r5
  40cb9e:	9004      	str	r0, [sp, #16]
  40cba0:	4620      	mov	r0, r4
  40cba2:	f000 ff83 	bl	40daac <_Bfree>
  40cba6:	9a03      	ldr	r2, [sp, #12]
  40cba8:	9b04      	ldr	r3, [sp, #16]
  40cbaa:	f8dd c018 	ldr.w	ip, [sp, #24]
  40cbae:	b132      	cbz	r2, 40cbbe <_dtoa_r+0xbee>
  40cbb0:	b92b      	cbnz	r3, 40cbbe <_dtoa_r+0xbee>
  40cbb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cbb4:	9a07      	ldr	r2, [sp, #28]
  40cbb6:	2b00      	cmp	r3, #0
  40cbb8:	f000 8128 	beq.w	40ce0c <_dtoa_r+0xe3c>
  40cbbc:	4613      	mov	r3, r2
  40cbbe:	f1ba 0f00 	cmp.w	sl, #0
  40cbc2:	f2c0 80bc 	blt.w	40cd3e <_dtoa_r+0xd6e>
  40cbc6:	9a03      	ldr	r2, [sp, #12]
  40cbc8:	b132      	cbz	r2, 40cbd8 <_dtoa_r+0xc08>
  40cbca:	f1ba 0f00 	cmp.w	sl, #0
  40cbce:	d103      	bne.n	40cbd8 <_dtoa_r+0xc08>
  40cbd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cbd2:	2a00      	cmp	r2, #0
  40cbd4:	f000 80b3 	beq.w	40cd3e <_dtoa_r+0xd6e>
  40cbd8:	2b00      	cmp	r3, #0
  40cbda:	f300 80fe 	bgt.w	40cdda <_dtoa_r+0xe0a>
  40cbde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cbe0:	f108 0901 	add.w	r9, r8, #1
  40cbe4:	f888 c000 	strb.w	ip, [r8]
  40cbe8:	4598      	cmp	r8, r3
  40cbea:	464d      	mov	r5, r9
  40cbec:	f000 8106 	beq.w	40cdfc <_dtoa_r+0xe2c>
  40cbf0:	4639      	mov	r1, r7
  40cbf2:	220a      	movs	r2, #10
  40cbf4:	2300      	movs	r3, #0
  40cbf6:	4620      	mov	r0, r4
  40cbf8:	f000 ff62 	bl	40dac0 <__multadd>
  40cbfc:	45b3      	cmp	fp, r6
  40cbfe:	4607      	mov	r7, r0
  40cc00:	4659      	mov	r1, fp
  40cc02:	4620      	mov	r0, r4
  40cc04:	f04f 020a 	mov.w	r2, #10
  40cc08:	f04f 0300 	mov.w	r3, #0
  40cc0c:	d00b      	beq.n	40cc26 <_dtoa_r+0xc56>
  40cc0e:	f000 ff57 	bl	40dac0 <__multadd>
  40cc12:	4631      	mov	r1, r6
  40cc14:	4683      	mov	fp, r0
  40cc16:	220a      	movs	r2, #10
  40cc18:	4620      	mov	r0, r4
  40cc1a:	2300      	movs	r3, #0
  40cc1c:	f000 ff50 	bl	40dac0 <__multadd>
  40cc20:	46c8      	mov	r8, r9
  40cc22:	4606      	mov	r6, r0
  40cc24:	e79d      	b.n	40cb62 <_dtoa_r+0xb92>
  40cc26:	f000 ff4b 	bl	40dac0 <__multadd>
  40cc2a:	46c8      	mov	r8, r9
  40cc2c:	4683      	mov	fp, r0
  40cc2e:	4606      	mov	r6, r0
  40cc30:	e797      	b.n	40cb62 <_dtoa_r+0xb92>
  40cc32:	4601      	mov	r1, r0
  40cc34:	4620      	mov	r0, r4
  40cc36:	f8cd c010 	str.w	ip, [sp, #16]
  40cc3a:	f000 ff37 	bl	40daac <_Bfree>
  40cc3e:	2301      	movs	r3, #1
  40cc40:	f8dd c010 	ldr.w	ip, [sp, #16]
  40cc44:	e7bb      	b.n	40cbbe <_dtoa_r+0xbee>
  40cc46:	2b0e      	cmp	r3, #14
  40cc48:	bf8c      	ite	hi
  40cc4a:	2300      	movhi	r3, #0
  40cc4c:	2301      	movls	r3, #1
  40cc4e:	2100      	movs	r1, #0
  40cc50:	401d      	ands	r5, r3
  40cc52:	6461      	str	r1, [r4, #68]	; 0x44
  40cc54:	e436      	b.n	40c4c4 <_dtoa_r+0x4f4>
  40cc56:	2301      	movs	r3, #1
  40cc58:	9323      	str	r3, [sp, #140]	; 0x8c
  40cc5a:	9310      	str	r3, [sp, #64]	; 0x40
  40cc5c:	9304      	str	r3, [sp, #16]
  40cc5e:	e7f6      	b.n	40cc4e <_dtoa_r+0xc7e>
  40cc60:	9906      	ldr	r1, [sp, #24]
  40cc62:	4620      	mov	r0, r4
  40cc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cc66:	f001 f86d 	bl	40dd44 <__pow5mult>
  40cc6a:	9006      	str	r0, [sp, #24]
  40cc6c:	f7ff bb42 	b.w	40c2f4 <_dtoa_r+0x324>
  40cc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cc74:	1af3      	subs	r3, r6, r3
  40cc76:	960a      	str	r6, [sp, #40]	; 0x28
  40cc78:	2600      	movs	r6, #0
  40cc7a:	441a      	add	r2, r3
  40cc7c:	920c      	str	r2, [sp, #48]	; 0x30
  40cc7e:	f7ff bbf3 	b.w	40c468 <_dtoa_r+0x498>
  40cc82:	9b04      	ldr	r3, [sp, #16]
  40cc84:	2b00      	cmp	r3, #0
  40cc86:	f43f adcc 	beq.w	40c822 <_dtoa_r+0x852>
  40cc8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40cc8c:	2d00      	cmp	r5, #0
  40cc8e:	f77f ae57 	ble.w	40c940 <_dtoa_r+0x970>
  40cc92:	2200      	movs	r2, #0
  40cc94:	4b86      	ldr	r3, [pc, #536]	; (40ceb0 <_dtoa_r+0xee0>)
  40cc96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40cc9a:	f7fb fd7d 	bl	408798 <__aeabi_dmul>
  40cc9e:	9b02      	ldr	r3, [sp, #8]
  40cca0:	4606      	mov	r6, r0
  40cca2:	460f      	mov	r7, r1
  40cca4:	3b01      	subs	r3, #1
  40cca6:	f108 0001 	add.w	r0, r8, #1
  40ccaa:	e9cd 6708 	strd	r6, r7, [sp, #32]
  40ccae:	9314      	str	r3, [sp, #80]	; 0x50
  40ccb0:	f7fb fd0c 	bl	4086cc <__aeabi_i2d>
  40ccb4:	4602      	mov	r2, r0
  40ccb6:	460b      	mov	r3, r1
  40ccb8:	4630      	mov	r0, r6
  40ccba:	4639      	mov	r1, r7
  40ccbc:	f7fb fd6c 	bl	408798 <__aeabi_dmul>
  40ccc0:	2200      	movs	r2, #0
  40ccc2:	4b7c      	ldr	r3, [pc, #496]	; (40ceb4 <_dtoa_r+0xee4>)
  40ccc4:	f7fb fbb6 	bl	408434 <__adddf3>
  40ccc8:	46ac      	mov	ip, r5
  40ccca:	4606      	mov	r6, r0
  40cccc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40ccd0:	e45a      	b.n	40c588 <_dtoa_r+0x5b8>
  40ccd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40ccd6:	f04f 0802 	mov.w	r8, #2
  40ccda:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40ccde:	e432      	b.n	40c546 <_dtoa_r+0x576>
  40cce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cce2:	2130      	movs	r1, #48	; 0x30
  40cce4:	3301      	adds	r3, #1
  40cce6:	7011      	strb	r1, [r2, #0]
  40cce8:	9302      	str	r3, [sp, #8]
  40ccea:	2331      	movs	r3, #49	; 0x31
  40ccec:	7013      	strb	r3, [r2, #0]
  40ccee:	f7ff bb72 	b.w	40c3d6 <_dtoa_r+0x406>
  40ccf2:	9906      	ldr	r1, [sp, #24]
  40ccf4:	4620      	mov	r0, r4
  40ccf6:	f001 f825 	bl	40dd44 <__pow5mult>
  40ccfa:	9006      	str	r0, [sp, #24]
  40ccfc:	f7ff bafa 	b.w	40c2f4 <_dtoa_r+0x324>
  40cd00:	f1ba 0f00 	cmp.w	sl, #0
  40cd04:	f43f aeea 	beq.w	40cadc <_dtoa_r+0xb0c>
  40cd08:	f7ff bb07 	b.w	40c31a <_dtoa_r+0x34a>
  40cd0c:	9a02      	ldr	r2, [sp, #8]
  40cd0e:	2331      	movs	r3, #49	; 0x31
  40cd10:	3201      	adds	r2, #1
  40cd12:	9202      	str	r2, [sp, #8]
  40cd14:	9a05      	ldr	r2, [sp, #20]
  40cd16:	7013      	strb	r3, [r2, #0]
  40cd18:	e5f5      	b.n	40c906 <_dtoa_r+0x936>
  40cd1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cd1c:	2a00      	cmp	r2, #0
  40cd1e:	d055      	beq.n	40cdcc <_dtoa_r+0xdfc>
  40cd20:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40cd24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40cd26:	9d07      	ldr	r5, [sp, #28]
  40cd28:	f7ff bba4 	b.w	40c474 <_dtoa_r+0x4a4>
  40cd2c:	9c03      	ldr	r4, [sp, #12]
  40cd2e:	f7ff bb52 	b.w	40c3d6 <_dtoa_r+0x406>
  40cd32:	9b07      	ldr	r3, [sp, #28]
  40cd34:	9a04      	ldr	r2, [sp, #16]
  40cd36:	1a9d      	subs	r5, r3, r2
  40cd38:	2300      	movs	r3, #0
  40cd3a:	f7ff bb9b 	b.w	40c474 <_dtoa_r+0x4a4>
  40cd3e:	2b00      	cmp	r3, #0
  40cd40:	9706      	str	r7, [sp, #24]
  40cd42:	46e1      	mov	r9, ip
  40cd44:	f8cd b020 	str.w	fp, [sp, #32]
  40cd48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40cd4a:	4665      	mov	r5, ip
  40cd4c:	dd0f      	ble.n	40cd6e <_dtoa_r+0xd9e>
  40cd4e:	9906      	ldr	r1, [sp, #24]
  40cd50:	2201      	movs	r2, #1
  40cd52:	4620      	mov	r0, r4
  40cd54:	f001 f846 	bl	40dde4 <__lshift>
  40cd58:	4639      	mov	r1, r7
  40cd5a:	9006      	str	r0, [sp, #24]
  40cd5c:	f001 f89c 	bl	40de98 <__mcmp>
  40cd60:	2800      	cmp	r0, #0
  40cd62:	dd75      	ble.n	40ce50 <_dtoa_r+0xe80>
  40cd64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40cd68:	d066      	beq.n	40ce38 <_dtoa_r+0xe68>
  40cd6a:	f109 0501 	add.w	r5, r9, #1
  40cd6e:	f8dd a020 	ldr.w	sl, [sp, #32]
  40cd72:	f888 5000 	strb.w	r5, [r8]
  40cd76:	f108 0501 	add.w	r5, r8, #1
  40cd7a:	9608      	str	r6, [sp, #32]
  40cd7c:	e5c3      	b.n	40c906 <_dtoa_r+0x936>
  40cd7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40cd80:	e531      	b.n	40c7e6 <_dtoa_r+0x816>
  40cd82:	d104      	bne.n	40cd8e <_dtoa_r+0xdbe>
  40cd84:	f019 0f01 	tst.w	r9, #1
  40cd88:	d001      	beq.n	40cd8e <_dtoa_r+0xdbe>
  40cd8a:	e5ac      	b.n	40c8e6 <_dtoa_r+0x916>
  40cd8c:	4615      	mov	r5, r2
  40cd8e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40cd92:	1e6a      	subs	r2, r5, #1
  40cd94:	2b30      	cmp	r3, #48	; 0x30
  40cd96:	d0f9      	beq.n	40cd8c <_dtoa_r+0xdbc>
  40cd98:	e5b5      	b.n	40c906 <_dtoa_r+0x936>
  40cd9a:	2700      	movs	r7, #0
  40cd9c:	9708      	str	r7, [sp, #32]
  40cd9e:	f7ff ba4c 	b.w	40c23a <_dtoa_r+0x26a>
  40cda2:	9e08      	ldr	r6, [sp, #32]
  40cda4:	4620      	mov	r0, r4
  40cda6:	6871      	ldr	r1, [r6, #4]
  40cda8:	f000 fe58 	bl	40da5c <_Balloc>
  40cdac:	6933      	ldr	r3, [r6, #16]
  40cdae:	4605      	mov	r5, r0
  40cdb0:	f106 010c 	add.w	r1, r6, #12
  40cdb4:	1c9a      	adds	r2, r3, #2
  40cdb6:	300c      	adds	r0, #12
  40cdb8:	0092      	lsls	r2, r2, #2
  40cdba:	f7fc fb51 	bl	409460 <memcpy>
  40cdbe:	4620      	mov	r0, r4
  40cdc0:	4629      	mov	r1, r5
  40cdc2:	2201      	movs	r2, #1
  40cdc4:	f001 f80e 	bl	40dde4 <__lshift>
  40cdc8:	4606      	mov	r6, r0
  40cdca:	e6b8      	b.n	40cb3e <_dtoa_r+0xb6e>
  40cdcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40cdce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40cdd0:	9d07      	ldr	r5, [sp, #28]
  40cdd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40cdd6:	f7ff bb4d 	b.w	40c474 <_dtoa_r+0x4a4>
  40cdda:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40cdde:	9706      	str	r7, [sp, #24]
  40cde0:	f8cd b020 	str.w	fp, [sp, #32]
  40cde4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40cde6:	d030      	beq.n	40ce4a <_dtoa_r+0xe7a>
  40cde8:	f10c 0901 	add.w	r9, ip, #1
  40cdec:	f8dd a020 	ldr.w	sl, [sp, #32]
  40cdf0:	f108 0501 	add.w	r5, r8, #1
  40cdf4:	9608      	str	r6, [sp, #32]
  40cdf6:	f888 9000 	strb.w	r9, [r8]
  40cdfa:	e584      	b.n	40c906 <_dtoa_r+0x936>
  40cdfc:	9706      	str	r7, [sp, #24]
  40cdfe:	46e1      	mov	r9, ip
  40ce00:	46da      	mov	sl, fp
  40ce02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ce04:	9608      	str	r6, [sp, #32]
  40ce06:	e562      	b.n	40c8ce <_dtoa_r+0x8fe>
  40ce08:	46b0      	mov	r8, r6
  40ce0a:	e504      	b.n	40c816 <_dtoa_r+0x846>
  40ce0c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40ce10:	9706      	str	r7, [sp, #24]
  40ce12:	f8cd b020 	str.w	fp, [sp, #32]
  40ce16:	4655      	mov	r5, sl
  40ce18:	46cb      	mov	fp, r9
  40ce1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ce1c:	46e1      	mov	r9, ip
  40ce1e:	d00b      	beq.n	40ce38 <_dtoa_r+0xe68>
  40ce20:	2d00      	cmp	r5, #0
  40ce22:	dd01      	ble.n	40ce28 <_dtoa_r+0xe58>
  40ce24:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  40ce28:	f8dd a020 	ldr.w	sl, [sp, #32]
  40ce2c:	f108 0501 	add.w	r5, r8, #1
  40ce30:	f888 9000 	strb.w	r9, [r8]
  40ce34:	9608      	str	r6, [sp, #32]
  40ce36:	e566      	b.n	40c906 <_dtoa_r+0x936>
  40ce38:	f8dd a020 	ldr.w	sl, [sp, #32]
  40ce3c:	9608      	str	r6, [sp, #32]
  40ce3e:	2239      	movs	r2, #57	; 0x39
  40ce40:	f108 0501 	add.w	r5, r8, #1
  40ce44:	f888 2000 	strb.w	r2, [r8]
  40ce48:	e54f      	b.n	40c8ea <_dtoa_r+0x91a>
  40ce4a:	46da      	mov	sl, fp
  40ce4c:	9608      	str	r6, [sp, #32]
  40ce4e:	e7f6      	b.n	40ce3e <_dtoa_r+0xe6e>
  40ce50:	d18d      	bne.n	40cd6e <_dtoa_r+0xd9e>
  40ce52:	f019 0f01 	tst.w	r9, #1
  40ce56:	d08a      	beq.n	40cd6e <_dtoa_r+0xd9e>
  40ce58:	e784      	b.n	40cd64 <_dtoa_r+0xd94>
  40ce5a:	f04f 0802 	mov.w	r8, #2
  40ce5e:	f7ff bb72 	b.w	40c546 <_dtoa_r+0x576>
  40ce62:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ce64:	9304      	str	r3, [sp, #16]
  40ce66:	e50e      	b.n	40c886 <_dtoa_r+0x8b6>
  40ce68:	f43f aa75 	beq.w	40c356 <_dtoa_r+0x386>
  40ce6c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40ce70:	f7ff ba6a 	b.w	40c348 <_dtoa_r+0x378>
  40ce74:	2501      	movs	r5, #1
  40ce76:	f7ff b982 	b.w	40c17e <_dtoa_r+0x1ae>
  40ce7a:	2500      	movs	r5, #0
  40ce7c:	4620      	mov	r0, r4
  40ce7e:	6465      	str	r5, [r4, #68]	; 0x44
  40ce80:	4629      	mov	r1, r5
  40ce82:	f000 fdeb 	bl	40da5c <_Balloc>
  40ce86:	9a02      	ldr	r2, [sp, #8]
  40ce88:	9005      	str	r0, [sp, #20]
  40ce8a:	2a0e      	cmp	r2, #14
  40ce8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ce8e:	6420      	str	r0, [r4, #64]	; 0x40
  40ce90:	f73f aad7 	bgt.w	40c442 <_dtoa_r+0x472>
  40ce94:	42ab      	cmp	r3, r5
  40ce96:	f6ff aad4 	blt.w	40c442 <_dtoa_r+0x472>
  40ce9a:	f04f 33ff 	mov.w	r3, #4294967295
  40ce9e:	9523      	str	r5, [sp, #140]	; 0x8c
  40cea0:	9304      	str	r3, [sp, #16]
  40cea2:	f7ff b9a9 	b.w	40c1f8 <_dtoa_r+0x228>
  40cea6:	2301      	movs	r3, #1
  40cea8:	930b      	str	r3, [sp, #44]	; 0x2c
  40ceaa:	f7ff bbfa 	b.w	40c6a2 <_dtoa_r+0x6d2>
  40ceae:	bf00      	nop
  40ceb0:	40240000 	.word	0x40240000
  40ceb4:	401c0000 	.word	0x401c0000

0040ceb8 <__sflush_r>:
  40ceb8:	898b      	ldrh	r3, [r1, #12]
  40ceba:	b29a      	uxth	r2, r3
  40cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40cec0:	460d      	mov	r5, r1
  40cec2:	0711      	lsls	r1, r2, #28
  40cec4:	4680      	mov	r8, r0
  40cec6:	d43c      	bmi.n	40cf42 <__sflush_r+0x8a>
  40cec8:	686a      	ldr	r2, [r5, #4]
  40ceca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40cece:	2a00      	cmp	r2, #0
  40ced0:	81ab      	strh	r3, [r5, #12]
  40ced2:	dd76      	ble.n	40cfc2 <__sflush_r+0x10a>
  40ced4:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40ced6:	2e00      	cmp	r6, #0
  40ced8:	d04b      	beq.n	40cf72 <__sflush_r+0xba>
  40ceda:	b29b      	uxth	r3, r3
  40cedc:	2100      	movs	r1, #0
  40cede:	f8d8 4000 	ldr.w	r4, [r8]
  40cee2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40cee6:	f8c8 1000 	str.w	r1, [r8]
  40ceea:	b292      	uxth	r2, r2
  40ceec:	2a00      	cmp	r2, #0
  40ceee:	d06c      	beq.n	40cfca <__sflush_r+0x112>
  40cef0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40cef2:	075f      	lsls	r7, r3, #29
  40cef4:	d505      	bpl.n	40cf02 <__sflush_r+0x4a>
  40cef6:	6869      	ldr	r1, [r5, #4]
  40cef8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40cefa:	1a52      	subs	r2, r2, r1
  40cefc:	b10b      	cbz	r3, 40cf02 <__sflush_r+0x4a>
  40cefe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40cf00:	1ad2      	subs	r2, r2, r3
  40cf02:	4640      	mov	r0, r8
  40cf04:	69e9      	ldr	r1, [r5, #28]
  40cf06:	2300      	movs	r3, #0
  40cf08:	47b0      	blx	r6
  40cf0a:	1c46      	adds	r6, r0, #1
  40cf0c:	d03e      	beq.n	40cf8c <__sflush_r+0xd4>
  40cf0e:	89ab      	ldrh	r3, [r5, #12]
  40cf10:	2100      	movs	r1, #0
  40cf12:	692a      	ldr	r2, [r5, #16]
  40cf14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40cf18:	6069      	str	r1, [r5, #4]
  40cf1a:	602a      	str	r2, [r5, #0]
  40cf1c:	b29b      	uxth	r3, r3
  40cf1e:	04da      	lsls	r2, r3, #19
  40cf20:	81ab      	strh	r3, [r5, #12]
  40cf22:	d44c      	bmi.n	40cfbe <__sflush_r+0x106>
  40cf24:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40cf26:	f8c8 4000 	str.w	r4, [r8]
  40cf2a:	b311      	cbz	r1, 40cf72 <__sflush_r+0xba>
  40cf2c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40cf30:	4299      	cmp	r1, r3
  40cf32:	d002      	beq.n	40cf3a <__sflush_r+0x82>
  40cf34:	4640      	mov	r0, r8
  40cf36:	f000 f9d5 	bl	40d2e4 <_free_r>
  40cf3a:	2000      	movs	r0, #0
  40cf3c:	6328      	str	r0, [r5, #48]	; 0x30
  40cf3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cf42:	692e      	ldr	r6, [r5, #16]
  40cf44:	b1ae      	cbz	r6, 40cf72 <__sflush_r+0xba>
  40cf46:	682c      	ldr	r4, [r5, #0]
  40cf48:	0791      	lsls	r1, r2, #30
  40cf4a:	602e      	str	r6, [r5, #0]
  40cf4c:	eba4 0406 	sub.w	r4, r4, r6
  40cf50:	d11a      	bne.n	40cf88 <__sflush_r+0xd0>
  40cf52:	696b      	ldr	r3, [r5, #20]
  40cf54:	60ab      	str	r3, [r5, #8]
  40cf56:	e00a      	b.n	40cf6e <__sflush_r+0xb6>
  40cf58:	4632      	mov	r2, r6
  40cf5a:	4623      	mov	r3, r4
  40cf5c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40cf5e:	4640      	mov	r0, r8
  40cf60:	69e9      	ldr	r1, [r5, #28]
  40cf62:	47b8      	blx	r7
  40cf64:	2800      	cmp	r0, #0
  40cf66:	eba4 0400 	sub.w	r4, r4, r0
  40cf6a:	4406      	add	r6, r0
  40cf6c:	dd04      	ble.n	40cf78 <__sflush_r+0xc0>
  40cf6e:	2c00      	cmp	r4, #0
  40cf70:	dcf2      	bgt.n	40cf58 <__sflush_r+0xa0>
  40cf72:	2000      	movs	r0, #0
  40cf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cf78:	89ab      	ldrh	r3, [r5, #12]
  40cf7a:	f04f 30ff 	mov.w	r0, #4294967295
  40cf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cf82:	81ab      	strh	r3, [r5, #12]
  40cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cf88:	2300      	movs	r3, #0
  40cf8a:	e7e3      	b.n	40cf54 <__sflush_r+0x9c>
  40cf8c:	f8d8 3000 	ldr.w	r3, [r8]
  40cf90:	fab3 f283 	clz	r2, r3
  40cf94:	2b00      	cmp	r3, #0
  40cf96:	bf18      	it	ne
  40cf98:	2b1d      	cmpne	r3, #29
  40cf9a:	ea4f 1252 	mov.w	r2, r2, lsr #5
  40cf9e:	d001      	beq.n	40cfa4 <__sflush_r+0xec>
  40cfa0:	2b16      	cmp	r3, #22
  40cfa2:	d127      	bne.n	40cff4 <__sflush_r+0x13c>
  40cfa4:	89ab      	ldrh	r3, [r5, #12]
  40cfa6:	2600      	movs	r6, #0
  40cfa8:	6929      	ldr	r1, [r5, #16]
  40cfaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40cfae:	b29b      	uxth	r3, r3
  40cfb0:	81ab      	strh	r3, [r5, #12]
  40cfb2:	04db      	lsls	r3, r3, #19
  40cfb4:	e885 0042 	stmia.w	r5, {r1, r6}
  40cfb8:	d5b4      	bpl.n	40cf24 <__sflush_r+0x6c>
  40cfba:	2a00      	cmp	r2, #0
  40cfbc:	d0b2      	beq.n	40cf24 <__sflush_r+0x6c>
  40cfbe:	6528      	str	r0, [r5, #80]	; 0x50
  40cfc0:	e7b0      	b.n	40cf24 <__sflush_r+0x6c>
  40cfc2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40cfc4:	2a00      	cmp	r2, #0
  40cfc6:	dc85      	bgt.n	40ced4 <__sflush_r+0x1c>
  40cfc8:	e7d3      	b.n	40cf72 <__sflush_r+0xba>
  40cfca:	2301      	movs	r3, #1
  40cfcc:	4640      	mov	r0, r8
  40cfce:	69e9      	ldr	r1, [r5, #28]
  40cfd0:	47b0      	blx	r6
  40cfd2:	1c43      	adds	r3, r0, #1
  40cfd4:	4602      	mov	r2, r0
  40cfd6:	d002      	beq.n	40cfde <__sflush_r+0x126>
  40cfd8:	89ab      	ldrh	r3, [r5, #12]
  40cfda:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40cfdc:	e789      	b.n	40cef2 <__sflush_r+0x3a>
  40cfde:	f8d8 3000 	ldr.w	r3, [r8]
  40cfe2:	2b00      	cmp	r3, #0
  40cfe4:	d0f8      	beq.n	40cfd8 <__sflush_r+0x120>
  40cfe6:	2b16      	cmp	r3, #22
  40cfe8:	d001      	beq.n	40cfee <__sflush_r+0x136>
  40cfea:	2b1d      	cmp	r3, #29
  40cfec:	d1c4      	bne.n	40cf78 <__sflush_r+0xc0>
  40cfee:	f8c8 4000 	str.w	r4, [r8]
  40cff2:	e7be      	b.n	40cf72 <__sflush_r+0xba>
  40cff4:	89ab      	ldrh	r3, [r5, #12]
  40cff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40cffa:	81ab      	strh	r3, [r5, #12]
  40cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040d000 <_fflush_r>:
  40d000:	b510      	push	{r4, lr}
  40d002:	4604      	mov	r4, r0
  40d004:	b082      	sub	sp, #8
  40d006:	b108      	cbz	r0, 40d00c <_fflush_r+0xc>
  40d008:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d00a:	b153      	cbz	r3, 40d022 <_fflush_r+0x22>
  40d00c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40d010:	b908      	cbnz	r0, 40d016 <_fflush_r+0x16>
  40d012:	b002      	add	sp, #8
  40d014:	bd10      	pop	{r4, pc}
  40d016:	4620      	mov	r0, r4
  40d018:	b002      	add	sp, #8
  40d01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40d01e:	f7ff bf4b 	b.w	40ceb8 <__sflush_r>
  40d022:	9101      	str	r1, [sp, #4]
  40d024:	f000 f886 	bl	40d134 <__sinit>
  40d028:	9901      	ldr	r1, [sp, #4]
  40d02a:	e7ef      	b.n	40d00c <_fflush_r+0xc>

0040d02c <_cleanup_r>:
  40d02c:	4901      	ldr	r1, [pc, #4]	; (40d034 <_cleanup_r+0x8>)
  40d02e:	f000 bbc3 	b.w	40d7b8 <_fwalk_reent>
  40d032:	bf00      	nop
  40d034:	0040e8f9 	.word	0x0040e8f9

0040d038 <__sinit.part.1>:
  40d038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d03c:	4682      	mov	sl, r0
  40d03e:	2400      	movs	r4, #0
  40d040:	4837      	ldr	r0, [pc, #220]	; (40d120 <__sinit.part.1+0xe8>)
  40d042:	2103      	movs	r1, #3
  40d044:	f8da 5004 	ldr.w	r5, [sl, #4]
  40d048:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40d04c:	2604      	movs	r6, #4
  40d04e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40d052:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40d056:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40d05a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  40d05e:	4621      	mov	r1, r4
  40d060:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40d064:	2208      	movs	r2, #8
  40d066:	81ae      	strh	r6, [r5, #12]
  40d068:	602c      	str	r4, [r5, #0]
  40d06a:	606c      	str	r4, [r5, #4]
  40d06c:	60ac      	str	r4, [r5, #8]
  40d06e:	666c      	str	r4, [r5, #100]	; 0x64
  40d070:	81ec      	strh	r4, [r5, #14]
  40d072:	612c      	str	r4, [r5, #16]
  40d074:	616c      	str	r4, [r5, #20]
  40d076:	61ac      	str	r4, [r5, #24]
  40d078:	f7fc fa8c 	bl	409594 <memset>
  40d07c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40d128 <__sinit.part.1+0xf0>
  40d080:	f8da 6008 	ldr.w	r6, [sl, #8]
  40d084:	f04f 0301 	mov.w	r3, #1
  40d088:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40d12c <__sinit.part.1+0xf4>
  40d08c:	f04f 0e09 	mov.w	lr, #9
  40d090:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40d130 <__sinit.part.1+0xf8>
  40d094:	4621      	mov	r1, r4
  40d096:	4f23      	ldr	r7, [pc, #140]	; (40d124 <__sinit.part.1+0xec>)
  40d098:	2208      	movs	r2, #8
  40d09a:	61ed      	str	r5, [r5, #28]
  40d09c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40d0a0:	f8c5 b020 	str.w	fp, [r5, #32]
  40d0a4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40d0a8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40d0ac:	62ef      	str	r7, [r5, #44]	; 0x2c
  40d0ae:	81f3      	strh	r3, [r6, #14]
  40d0b0:	f8a6 e00c 	strh.w	lr, [r6, #12]
  40d0b4:	6034      	str	r4, [r6, #0]
  40d0b6:	6074      	str	r4, [r6, #4]
  40d0b8:	60b4      	str	r4, [r6, #8]
  40d0ba:	6674      	str	r4, [r6, #100]	; 0x64
  40d0bc:	6134      	str	r4, [r6, #16]
  40d0be:	6174      	str	r4, [r6, #20]
  40d0c0:	61b4      	str	r4, [r6, #24]
  40d0c2:	f7fc fa67 	bl	409594 <memset>
  40d0c6:	f8da 500c 	ldr.w	r5, [sl, #12]
  40d0ca:	f04f 0c12 	mov.w	ip, #18
  40d0ce:	f04f 0e02 	mov.w	lr, #2
  40d0d2:	61f6      	str	r6, [r6, #28]
  40d0d4:	4621      	mov	r1, r4
  40d0d6:	f8c6 b020 	str.w	fp, [r6, #32]
  40d0da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40d0de:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  40d0e2:	2208      	movs	r2, #8
  40d0e4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  40d0e8:	62f7      	str	r7, [r6, #44]	; 0x2c
  40d0ea:	602c      	str	r4, [r5, #0]
  40d0ec:	606c      	str	r4, [r5, #4]
  40d0ee:	60ac      	str	r4, [r5, #8]
  40d0f0:	666c      	str	r4, [r5, #100]	; 0x64
  40d0f2:	612c      	str	r4, [r5, #16]
  40d0f4:	616c      	str	r4, [r5, #20]
  40d0f6:	61ac      	str	r4, [r5, #24]
  40d0f8:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40d0fc:	f8a5 e00e 	strh.w	lr, [r5, #14]
  40d100:	f7fc fa48 	bl	409594 <memset>
  40d104:	2301      	movs	r3, #1
  40d106:	61ed      	str	r5, [r5, #28]
  40d108:	f8c5 b020 	str.w	fp, [r5, #32]
  40d10c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40d110:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40d114:	62ef      	str	r7, [r5, #44]	; 0x2c
  40d116:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40d11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d11e:	bf00      	nop
  40d120:	0040d02d 	.word	0x0040d02d
  40d124:	0040e579 	.word	0x0040e579
  40d128:	0040e4f9 	.word	0x0040e4f9
  40d12c:	0040e51d 	.word	0x0040e51d
  40d130:	0040e555 	.word	0x0040e555

0040d134 <__sinit>:
  40d134:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d136:	b103      	cbz	r3, 40d13a <__sinit+0x6>
  40d138:	4770      	bx	lr
  40d13a:	f7ff bf7d 	b.w	40d038 <__sinit.part.1>
  40d13e:	bf00      	nop

0040d140 <__sfp_lock_acquire>:
  40d140:	4770      	bx	lr
  40d142:	bf00      	nop

0040d144 <__sfp_lock_release>:
  40d144:	4770      	bx	lr
  40d146:	bf00      	nop

0040d148 <__libc_fini_array>:
  40d148:	b538      	push	{r3, r4, r5, lr}
  40d14a:	4b08      	ldr	r3, [pc, #32]	; (40d16c <__libc_fini_array+0x24>)
  40d14c:	4d08      	ldr	r5, [pc, #32]	; (40d170 <__libc_fini_array+0x28>)
  40d14e:	1aed      	subs	r5, r5, r3
  40d150:	10ac      	asrs	r4, r5, #2
  40d152:	bf18      	it	ne
  40d154:	18ed      	addne	r5, r5, r3
  40d156:	d005      	beq.n	40d164 <__libc_fini_array+0x1c>
  40d158:	3c01      	subs	r4, #1
  40d15a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40d15e:	4798      	blx	r3
  40d160:	2c00      	cmp	r4, #0
  40d162:	d1f9      	bne.n	40d158 <__libc_fini_array+0x10>
  40d164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40d168:	f002 bee8 	b.w	40ff3c <_fini>
  40d16c:	0040ff48 	.word	0x0040ff48
  40d170:	0040ff4c 	.word	0x0040ff4c

0040d174 <__fputwc>:
  40d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d178:	b082      	sub	sp, #8
  40d17a:	4607      	mov	r7, r0
  40d17c:	460e      	mov	r6, r1
  40d17e:	4614      	mov	r4, r2
  40d180:	f000 fb46 	bl	40d810 <__locale_mb_cur_max>
  40d184:	2801      	cmp	r0, #1
  40d186:	d040      	beq.n	40d20a <__fputwc+0x96>
  40d188:	4638      	mov	r0, r7
  40d18a:	a901      	add	r1, sp, #4
  40d18c:	4632      	mov	r2, r6
  40d18e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40d192:	f001 fad1 	bl	40e738 <_wcrtomb_r>
  40d196:	f1b0 3fff 	cmp.w	r0, #4294967295
  40d19a:	4680      	mov	r8, r0
  40d19c:	d02e      	beq.n	40d1fc <__fputwc+0x88>
  40d19e:	2800      	cmp	r0, #0
  40d1a0:	d03b      	beq.n	40d21a <__fputwc+0xa6>
  40d1a2:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40d1a6:	2500      	movs	r5, #0
  40d1a8:	e009      	b.n	40d1be <__fputwc+0x4a>
  40d1aa:	6823      	ldr	r3, [r4, #0]
  40d1ac:	7019      	strb	r1, [r3, #0]
  40d1ae:	6823      	ldr	r3, [r4, #0]
  40d1b0:	3301      	adds	r3, #1
  40d1b2:	6023      	str	r3, [r4, #0]
  40d1b4:	3501      	adds	r5, #1
  40d1b6:	45a8      	cmp	r8, r5
  40d1b8:	d92f      	bls.n	40d21a <__fputwc+0xa6>
  40d1ba:	ab01      	add	r3, sp, #4
  40d1bc:	5d59      	ldrb	r1, [r3, r5]
  40d1be:	68a3      	ldr	r3, [r4, #8]
  40d1c0:	3b01      	subs	r3, #1
  40d1c2:	2b00      	cmp	r3, #0
  40d1c4:	60a3      	str	r3, [r4, #8]
  40d1c6:	daf0      	bge.n	40d1aa <__fputwc+0x36>
  40d1c8:	69a2      	ldr	r2, [r4, #24]
  40d1ca:	4293      	cmp	r3, r2
  40d1cc:	db06      	blt.n	40d1dc <__fputwc+0x68>
  40d1ce:	6823      	ldr	r3, [r4, #0]
  40d1d0:	7019      	strb	r1, [r3, #0]
  40d1d2:	6823      	ldr	r3, [r4, #0]
  40d1d4:	7819      	ldrb	r1, [r3, #0]
  40d1d6:	3301      	adds	r3, #1
  40d1d8:	290a      	cmp	r1, #10
  40d1da:	d1ea      	bne.n	40d1b2 <__fputwc+0x3e>
  40d1dc:	4638      	mov	r0, r7
  40d1de:	4622      	mov	r2, r4
  40d1e0:	f001 fa56 	bl	40e690 <__swbuf_r>
  40d1e4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40d1e8:	fab0 f080 	clz	r0, r0
  40d1ec:	0940      	lsrs	r0, r0, #5
  40d1ee:	2800      	cmp	r0, #0
  40d1f0:	d0e0      	beq.n	40d1b4 <__fputwc+0x40>
  40d1f2:	f04f 30ff 	mov.w	r0, #4294967295
  40d1f6:	b002      	add	sp, #8
  40d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d1fc:	89a3      	ldrh	r3, [r4, #12]
  40d1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d202:	81a3      	strh	r3, [r4, #12]
  40d204:	b002      	add	sp, #8
  40d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d20a:	1e73      	subs	r3, r6, #1
  40d20c:	2bfe      	cmp	r3, #254	; 0xfe
  40d20e:	d8bb      	bhi.n	40d188 <__fputwc+0x14>
  40d210:	b2f1      	uxtb	r1, r6
  40d212:	4680      	mov	r8, r0
  40d214:	f88d 1004 	strb.w	r1, [sp, #4]
  40d218:	e7c5      	b.n	40d1a6 <__fputwc+0x32>
  40d21a:	4630      	mov	r0, r6
  40d21c:	b002      	add	sp, #8
  40d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d222:	bf00      	nop

0040d224 <_fputwc_r>:
  40d224:	8993      	ldrh	r3, [r2, #12]
  40d226:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40d22a:	d10b      	bne.n	40d244 <_fputwc_r+0x20>
  40d22c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40d230:	b410      	push	{r4}
  40d232:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40d234:	8193      	strh	r3, [r2, #12]
  40d236:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40d23a:	6654      	str	r4, [r2, #100]	; 0x64
  40d23c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40d240:	f7ff bf98 	b.w	40d174 <__fputwc>
  40d244:	f7ff bf96 	b.w	40d174 <__fputwc>

0040d248 <_malloc_trim_r>:
  40d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d24a:	4f22      	ldr	r7, [pc, #136]	; (40d2d4 <_malloc_trim_r+0x8c>)
  40d24c:	460c      	mov	r4, r1
  40d24e:	4606      	mov	r6, r0
  40d250:	f7fc f9f0 	bl	409634 <__malloc_lock>
  40d254:	68ba      	ldr	r2, [r7, #8]
  40d256:	4b20      	ldr	r3, [pc, #128]	; (40d2d8 <_malloc_trim_r+0x90>)
  40d258:	6855      	ldr	r5, [r2, #4]
  40d25a:	f025 0503 	bic.w	r5, r5, #3
  40d25e:	1b2c      	subs	r4, r5, r4
  40d260:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40d264:	4023      	ands	r3, r4
  40d266:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40d26a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40d26e:	db07      	blt.n	40d280 <_malloc_trim_r+0x38>
  40d270:	4630      	mov	r0, r6
  40d272:	2100      	movs	r1, #0
  40d274:	f7fc f9e2 	bl	40963c <_sbrk_r>
  40d278:	68bb      	ldr	r3, [r7, #8]
  40d27a:	442b      	add	r3, r5
  40d27c:	4298      	cmp	r0, r3
  40d27e:	d004      	beq.n	40d28a <_malloc_trim_r+0x42>
  40d280:	4630      	mov	r0, r6
  40d282:	f7fc f9d9 	bl	409638 <__malloc_unlock>
  40d286:	2000      	movs	r0, #0
  40d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d28a:	4630      	mov	r0, r6
  40d28c:	4261      	negs	r1, r4
  40d28e:	f7fc f9d5 	bl	40963c <_sbrk_r>
  40d292:	3001      	adds	r0, #1
  40d294:	d00d      	beq.n	40d2b2 <_malloc_trim_r+0x6a>
  40d296:	4a11      	ldr	r2, [pc, #68]	; (40d2dc <_malloc_trim_r+0x94>)
  40d298:	1b2d      	subs	r5, r5, r4
  40d29a:	68b9      	ldr	r1, [r7, #8]
  40d29c:	4630      	mov	r0, r6
  40d29e:	6813      	ldr	r3, [r2, #0]
  40d2a0:	f045 0501 	orr.w	r5, r5, #1
  40d2a4:	1b1b      	subs	r3, r3, r4
  40d2a6:	604d      	str	r5, [r1, #4]
  40d2a8:	6013      	str	r3, [r2, #0]
  40d2aa:	f7fc f9c5 	bl	409638 <__malloc_unlock>
  40d2ae:	2001      	movs	r0, #1
  40d2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d2b2:	4630      	mov	r0, r6
  40d2b4:	2100      	movs	r1, #0
  40d2b6:	f7fc f9c1 	bl	40963c <_sbrk_r>
  40d2ba:	68ba      	ldr	r2, [r7, #8]
  40d2bc:	1a83      	subs	r3, r0, r2
  40d2be:	2b0f      	cmp	r3, #15
  40d2c0:	ddde      	ble.n	40d280 <_malloc_trim_r+0x38>
  40d2c2:	4c07      	ldr	r4, [pc, #28]	; (40d2e0 <_malloc_trim_r+0x98>)
  40d2c4:	f043 0301 	orr.w	r3, r3, #1
  40d2c8:	4904      	ldr	r1, [pc, #16]	; (40d2dc <_malloc_trim_r+0x94>)
  40d2ca:	6824      	ldr	r4, [r4, #0]
  40d2cc:	6053      	str	r3, [r2, #4]
  40d2ce:	1b00      	subs	r0, r0, r4
  40d2d0:	6008      	str	r0, [r1, #0]
  40d2d2:	e7d5      	b.n	40d280 <_malloc_trim_r+0x38>
  40d2d4:	2040044c 	.word	0x2040044c
  40d2d8:	fffff000 	.word	0xfffff000
  40d2dc:	2040c44c 	.word	0x2040c44c
  40d2e0:	20400858 	.word	0x20400858

0040d2e4 <_free_r>:
  40d2e4:	2900      	cmp	r1, #0
  40d2e6:	d04d      	beq.n	40d384 <_free_r+0xa0>
  40d2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d2ec:	460c      	mov	r4, r1
  40d2ee:	4680      	mov	r8, r0
  40d2f0:	f7fc f9a0 	bl	409634 <__malloc_lock>
  40d2f4:	4963      	ldr	r1, [pc, #396]	; (40d484 <_free_r+0x1a0>)
  40d2f6:	f854 7c04 	ldr.w	r7, [r4, #-4]
  40d2fa:	f1a4 0508 	sub.w	r5, r4, #8
  40d2fe:	688e      	ldr	r6, [r1, #8]
  40d300:	f027 0301 	bic.w	r3, r7, #1
  40d304:	18ea      	adds	r2, r5, r3
  40d306:	6850      	ldr	r0, [r2, #4]
  40d308:	4296      	cmp	r6, r2
  40d30a:	f020 0003 	bic.w	r0, r0, #3
  40d30e:	d059      	beq.n	40d3c4 <_free_r+0xe0>
  40d310:	07fe      	lsls	r6, r7, #31
  40d312:	6050      	str	r0, [r2, #4]
  40d314:	d40b      	bmi.n	40d32e <_free_r+0x4a>
  40d316:	f854 4c08 	ldr.w	r4, [r4, #-8]
  40d31a:	f101 0708 	add.w	r7, r1, #8
  40d31e:	1b2d      	subs	r5, r5, r4
  40d320:	4423      	add	r3, r4
  40d322:	68ac      	ldr	r4, [r5, #8]
  40d324:	42bc      	cmp	r4, r7
  40d326:	d066      	beq.n	40d3f6 <_free_r+0x112>
  40d328:	68ef      	ldr	r7, [r5, #12]
  40d32a:	60e7      	str	r7, [r4, #12]
  40d32c:	60bc      	str	r4, [r7, #8]
  40d32e:	1814      	adds	r4, r2, r0
  40d330:	6864      	ldr	r4, [r4, #4]
  40d332:	07e4      	lsls	r4, r4, #31
  40d334:	d40c      	bmi.n	40d350 <_free_r+0x6c>
  40d336:	4c54      	ldr	r4, [pc, #336]	; (40d488 <_free_r+0x1a4>)
  40d338:	4403      	add	r3, r0
  40d33a:	6890      	ldr	r0, [r2, #8]
  40d33c:	42a0      	cmp	r0, r4
  40d33e:	d07c      	beq.n	40d43a <_free_r+0x156>
  40d340:	68d4      	ldr	r4, [r2, #12]
  40d342:	f043 0201 	orr.w	r2, r3, #1
  40d346:	60c4      	str	r4, [r0, #12]
  40d348:	60a0      	str	r0, [r4, #8]
  40d34a:	606a      	str	r2, [r5, #4]
  40d34c:	50eb      	str	r3, [r5, r3]
  40d34e:	e003      	b.n	40d358 <_free_r+0x74>
  40d350:	f043 0201 	orr.w	r2, r3, #1
  40d354:	606a      	str	r2, [r5, #4]
  40d356:	50eb      	str	r3, [r5, r3]
  40d358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40d35c:	d213      	bcs.n	40d386 <_free_r+0xa2>
  40d35e:	08db      	lsrs	r3, r3, #3
  40d360:	2001      	movs	r0, #1
  40d362:	684a      	ldr	r2, [r1, #4]
  40d364:	109c      	asrs	r4, r3, #2
  40d366:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40d36a:	40a0      	lsls	r0, r4
  40d36c:	689c      	ldr	r4, [r3, #8]
  40d36e:	4302      	orrs	r2, r0
  40d370:	60eb      	str	r3, [r5, #12]
  40d372:	60ac      	str	r4, [r5, #8]
  40d374:	604a      	str	r2, [r1, #4]
  40d376:	609d      	str	r5, [r3, #8]
  40d378:	60e5      	str	r5, [r4, #12]
  40d37a:	4640      	mov	r0, r8
  40d37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d380:	f7fc b95a 	b.w	409638 <__malloc_unlock>
  40d384:	4770      	bx	lr
  40d386:	0a5a      	lsrs	r2, r3, #9
  40d388:	2a04      	cmp	r2, #4
  40d38a:	d847      	bhi.n	40d41c <_free_r+0x138>
  40d38c:	099a      	lsrs	r2, r3, #6
  40d38e:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40d392:	0060      	lsls	r0, r4, #1
  40d394:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40d398:	493a      	ldr	r1, [pc, #232]	; (40d484 <_free_r+0x1a0>)
  40d39a:	6882      	ldr	r2, [r0, #8]
  40d39c:	4282      	cmp	r2, r0
  40d39e:	d043      	beq.n	40d428 <_free_r+0x144>
  40d3a0:	6851      	ldr	r1, [r2, #4]
  40d3a2:	f021 0103 	bic.w	r1, r1, #3
  40d3a6:	4299      	cmp	r1, r3
  40d3a8:	d902      	bls.n	40d3b0 <_free_r+0xcc>
  40d3aa:	6892      	ldr	r2, [r2, #8]
  40d3ac:	4290      	cmp	r0, r2
  40d3ae:	d1f7      	bne.n	40d3a0 <_free_r+0xbc>
  40d3b0:	68d3      	ldr	r3, [r2, #12]
  40d3b2:	60eb      	str	r3, [r5, #12]
  40d3b4:	4640      	mov	r0, r8
  40d3b6:	60aa      	str	r2, [r5, #8]
  40d3b8:	609d      	str	r5, [r3, #8]
  40d3ba:	60d5      	str	r5, [r2, #12]
  40d3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d3c0:	f7fc b93a 	b.w	409638 <__malloc_unlock>
  40d3c4:	07ff      	lsls	r7, r7, #31
  40d3c6:	4403      	add	r3, r0
  40d3c8:	d407      	bmi.n	40d3da <_free_r+0xf6>
  40d3ca:	f854 2c08 	ldr.w	r2, [r4, #-8]
  40d3ce:	1aad      	subs	r5, r5, r2
  40d3d0:	4413      	add	r3, r2
  40d3d2:	68a8      	ldr	r0, [r5, #8]
  40d3d4:	68ea      	ldr	r2, [r5, #12]
  40d3d6:	60c2      	str	r2, [r0, #12]
  40d3d8:	6090      	str	r0, [r2, #8]
  40d3da:	4a2c      	ldr	r2, [pc, #176]	; (40d48c <_free_r+0x1a8>)
  40d3dc:	f043 0001 	orr.w	r0, r3, #1
  40d3e0:	6812      	ldr	r2, [r2, #0]
  40d3e2:	6068      	str	r0, [r5, #4]
  40d3e4:	4293      	cmp	r3, r2
  40d3e6:	608d      	str	r5, [r1, #8]
  40d3e8:	d3c7      	bcc.n	40d37a <_free_r+0x96>
  40d3ea:	4b29      	ldr	r3, [pc, #164]	; (40d490 <_free_r+0x1ac>)
  40d3ec:	4640      	mov	r0, r8
  40d3ee:	6819      	ldr	r1, [r3, #0]
  40d3f0:	f7ff ff2a 	bl	40d248 <_malloc_trim_r>
  40d3f4:	e7c1      	b.n	40d37a <_free_r+0x96>
  40d3f6:	1811      	adds	r1, r2, r0
  40d3f8:	6849      	ldr	r1, [r1, #4]
  40d3fa:	07c9      	lsls	r1, r1, #31
  40d3fc:	d409      	bmi.n	40d412 <_free_r+0x12e>
  40d3fe:	4403      	add	r3, r0
  40d400:	68d1      	ldr	r1, [r2, #12]
  40d402:	6892      	ldr	r2, [r2, #8]
  40d404:	f043 0001 	orr.w	r0, r3, #1
  40d408:	60d1      	str	r1, [r2, #12]
  40d40a:	608a      	str	r2, [r1, #8]
  40d40c:	6068      	str	r0, [r5, #4]
  40d40e:	50eb      	str	r3, [r5, r3]
  40d410:	e7b3      	b.n	40d37a <_free_r+0x96>
  40d412:	f043 0201 	orr.w	r2, r3, #1
  40d416:	606a      	str	r2, [r5, #4]
  40d418:	50eb      	str	r3, [r5, r3]
  40d41a:	e7ae      	b.n	40d37a <_free_r+0x96>
  40d41c:	2a14      	cmp	r2, #20
  40d41e:	d815      	bhi.n	40d44c <_free_r+0x168>
  40d420:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  40d424:	0060      	lsls	r0, r4, #1
  40d426:	e7b5      	b.n	40d394 <_free_r+0xb0>
  40d428:	10a4      	asrs	r4, r4, #2
  40d42a:	2701      	movs	r7, #1
  40d42c:	6848      	ldr	r0, [r1, #4]
  40d42e:	4613      	mov	r3, r2
  40d430:	fa07 f404 	lsl.w	r4, r7, r4
  40d434:	4320      	orrs	r0, r4
  40d436:	6048      	str	r0, [r1, #4]
  40d438:	e7bb      	b.n	40d3b2 <_free_r+0xce>
  40d43a:	f043 0201 	orr.w	r2, r3, #1
  40d43e:	614d      	str	r5, [r1, #20]
  40d440:	610d      	str	r5, [r1, #16]
  40d442:	60e8      	str	r0, [r5, #12]
  40d444:	60a8      	str	r0, [r5, #8]
  40d446:	606a      	str	r2, [r5, #4]
  40d448:	50eb      	str	r3, [r5, r3]
  40d44a:	e796      	b.n	40d37a <_free_r+0x96>
  40d44c:	2a54      	cmp	r2, #84	; 0x54
  40d44e:	d804      	bhi.n	40d45a <_free_r+0x176>
  40d450:	0b1a      	lsrs	r2, r3, #12
  40d452:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  40d456:	0060      	lsls	r0, r4, #1
  40d458:	e79c      	b.n	40d394 <_free_r+0xb0>
  40d45a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40d45e:	d804      	bhi.n	40d46a <_free_r+0x186>
  40d460:	0bda      	lsrs	r2, r3, #15
  40d462:	f102 0477 	add.w	r4, r2, #119	; 0x77
  40d466:	0060      	lsls	r0, r4, #1
  40d468:	e794      	b.n	40d394 <_free_r+0xb0>
  40d46a:	f240 5054 	movw	r0, #1364	; 0x554
  40d46e:	4282      	cmp	r2, r0
  40d470:	d804      	bhi.n	40d47c <_free_r+0x198>
  40d472:	0c9a      	lsrs	r2, r3, #18
  40d474:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  40d478:	0060      	lsls	r0, r4, #1
  40d47a:	e78b      	b.n	40d394 <_free_r+0xb0>
  40d47c:	20fc      	movs	r0, #252	; 0xfc
  40d47e:	247e      	movs	r4, #126	; 0x7e
  40d480:	e788      	b.n	40d394 <_free_r+0xb0>
  40d482:	bf00      	nop
  40d484:	2040044c 	.word	0x2040044c
  40d488:	20400454 	.word	0x20400454
  40d48c:	20400854 	.word	0x20400854
  40d490:	2040c448 	.word	0x2040c448

0040d494 <__sfvwrite_r>:
  40d494:	6893      	ldr	r3, [r2, #8]
  40d496:	2b00      	cmp	r3, #0
  40d498:	d07a      	beq.n	40d590 <__sfvwrite_r+0xfc>
  40d49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d49e:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40d4a2:	b083      	sub	sp, #12
  40d4a4:	460c      	mov	r4, r1
  40d4a6:	4681      	mov	r9, r0
  40d4a8:	f01e 0f08 	tst.w	lr, #8
  40d4ac:	4616      	mov	r6, r2
  40d4ae:	d026      	beq.n	40d4fe <__sfvwrite_r+0x6a>
  40d4b0:	690b      	ldr	r3, [r1, #16]
  40d4b2:	b323      	cbz	r3, 40d4fe <__sfvwrite_r+0x6a>
  40d4b4:	f00e 0802 	and.w	r8, lr, #2
  40d4b8:	6835      	ldr	r5, [r6, #0]
  40d4ba:	fa1f f088 	uxth.w	r0, r8
  40d4be:	b370      	cbz	r0, 40d51e <__sfvwrite_r+0x8a>
  40d4c0:	f04f 0a00 	mov.w	sl, #0
  40d4c4:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 40d7b4 <__sfvwrite_r+0x320>
  40d4c8:	46d0      	mov	r8, sl
  40d4ca:	45d8      	cmp	r8, fp
  40d4cc:	4643      	mov	r3, r8
  40d4ce:	4652      	mov	r2, sl
  40d4d0:	4648      	mov	r0, r9
  40d4d2:	bf28      	it	cs
  40d4d4:	465b      	movcs	r3, fp
  40d4d6:	f1b8 0f00 	cmp.w	r8, #0
  40d4da:	d053      	beq.n	40d584 <__sfvwrite_r+0xf0>
  40d4dc:	69e1      	ldr	r1, [r4, #28]
  40d4de:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d4e0:	47b8      	blx	r7
  40d4e2:	2800      	cmp	r0, #0
  40d4e4:	dd73      	ble.n	40d5ce <__sfvwrite_r+0x13a>
  40d4e6:	68b3      	ldr	r3, [r6, #8]
  40d4e8:	4482      	add	sl, r0
  40d4ea:	ebc0 0808 	rsb	r8, r0, r8
  40d4ee:	1a18      	subs	r0, r3, r0
  40d4f0:	60b0      	str	r0, [r6, #8]
  40d4f2:	2800      	cmp	r0, #0
  40d4f4:	d1e9      	bne.n	40d4ca <__sfvwrite_r+0x36>
  40d4f6:	2000      	movs	r0, #0
  40d4f8:	b003      	add	sp, #12
  40d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d4fe:	4648      	mov	r0, r9
  40d500:	4621      	mov	r1, r4
  40d502:	f7fe fc4b 	bl	40bd9c <__swsetup_r>
  40d506:	2800      	cmp	r0, #0
  40d508:	f040 814c 	bne.w	40d7a4 <__sfvwrite_r+0x310>
  40d50c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40d510:	6835      	ldr	r5, [r6, #0]
  40d512:	f00e 0802 	and.w	r8, lr, #2
  40d516:	fa1f f088 	uxth.w	r0, r8
  40d51a:	2800      	cmp	r0, #0
  40d51c:	d1d0      	bne.n	40d4c0 <__sfvwrite_r+0x2c>
  40d51e:	f01e 0b01 	ands.w	fp, lr, #1
  40d522:	d15d      	bne.n	40d5e0 <__sfvwrite_r+0x14c>
  40d524:	46d8      	mov	r8, fp
  40d526:	f1b8 0f00 	cmp.w	r8, #0
  40d52a:	d025      	beq.n	40d578 <__sfvwrite_r+0xe4>
  40d52c:	f41e 7f00 	tst.w	lr, #512	; 0x200
  40d530:	68a7      	ldr	r7, [r4, #8]
  40d532:	d02f      	beq.n	40d594 <__sfvwrite_r+0x100>
  40d534:	45b8      	cmp	r8, r7
  40d536:	46ba      	mov	sl, r7
  40d538:	f0c0 80a8 	bcc.w	40d68c <__sfvwrite_r+0x1f8>
  40d53c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40d540:	f040 80b5 	bne.w	40d6ae <__sfvwrite_r+0x21a>
  40d544:	6820      	ldr	r0, [r4, #0]
  40d546:	4659      	mov	r1, fp
  40d548:	4652      	mov	r2, sl
  40d54a:	f000 fa25 	bl	40d998 <memmove>
  40d54e:	68a2      	ldr	r2, [r4, #8]
  40d550:	6821      	ldr	r1, [r4, #0]
  40d552:	4640      	mov	r0, r8
  40d554:	1bd7      	subs	r7, r2, r7
  40d556:	eb01 030a 	add.w	r3, r1, sl
  40d55a:	60a7      	str	r7, [r4, #8]
  40d55c:	6023      	str	r3, [r4, #0]
  40d55e:	68b3      	ldr	r3, [r6, #8]
  40d560:	4483      	add	fp, r0
  40d562:	ebc0 0808 	rsb	r8, r0, r8
  40d566:	1a18      	subs	r0, r3, r0
  40d568:	60b0      	str	r0, [r6, #8]
  40d56a:	2800      	cmp	r0, #0
  40d56c:	d0c3      	beq.n	40d4f6 <__sfvwrite_r+0x62>
  40d56e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  40d572:	f1b8 0f00 	cmp.w	r8, #0
  40d576:	d1d9      	bne.n	40d52c <__sfvwrite_r+0x98>
  40d578:	f8d5 b000 	ldr.w	fp, [r5]
  40d57c:	3508      	adds	r5, #8
  40d57e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40d582:	e7d0      	b.n	40d526 <__sfvwrite_r+0x92>
  40d584:	f8d5 a000 	ldr.w	sl, [r5]
  40d588:	3508      	adds	r5, #8
  40d58a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  40d58e:	e79c      	b.n	40d4ca <__sfvwrite_r+0x36>
  40d590:	2000      	movs	r0, #0
  40d592:	4770      	bx	lr
  40d594:	6820      	ldr	r0, [r4, #0]
  40d596:	6923      	ldr	r3, [r4, #16]
  40d598:	4298      	cmp	r0, r3
  40d59a:	d803      	bhi.n	40d5a4 <__sfvwrite_r+0x110>
  40d59c:	6963      	ldr	r3, [r4, #20]
  40d59e:	4598      	cmp	r8, r3
  40d5a0:	f080 80bf 	bcs.w	40d722 <__sfvwrite_r+0x28e>
  40d5a4:	4547      	cmp	r7, r8
  40d5a6:	4659      	mov	r1, fp
  40d5a8:	bf28      	it	cs
  40d5aa:	4647      	movcs	r7, r8
  40d5ac:	463a      	mov	r2, r7
  40d5ae:	f000 f9f3 	bl	40d998 <memmove>
  40d5b2:	68a3      	ldr	r3, [r4, #8]
  40d5b4:	6822      	ldr	r2, [r4, #0]
  40d5b6:	1bdb      	subs	r3, r3, r7
  40d5b8:	443a      	add	r2, r7
  40d5ba:	60a3      	str	r3, [r4, #8]
  40d5bc:	6022      	str	r2, [r4, #0]
  40d5be:	2b00      	cmp	r3, #0
  40d5c0:	d149      	bne.n	40d656 <__sfvwrite_r+0x1c2>
  40d5c2:	4648      	mov	r0, r9
  40d5c4:	4621      	mov	r1, r4
  40d5c6:	f7ff fd1b 	bl	40d000 <_fflush_r>
  40d5ca:	2800      	cmp	r0, #0
  40d5cc:	d043      	beq.n	40d656 <__sfvwrite_r+0x1c2>
  40d5ce:	89a3      	ldrh	r3, [r4, #12]
  40d5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d5d4:	f04f 30ff 	mov.w	r0, #4294967295
  40d5d8:	81a3      	strh	r3, [r4, #12]
  40d5da:	b003      	add	sp, #12
  40d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d5e0:	4680      	mov	r8, r0
  40d5e2:	4683      	mov	fp, r0
  40d5e4:	4682      	mov	sl, r0
  40d5e6:	9000      	str	r0, [sp, #0]
  40d5e8:	f1ba 0f00 	cmp.w	sl, #0
  40d5ec:	d02b      	beq.n	40d646 <__sfvwrite_r+0x1b2>
  40d5ee:	9b00      	ldr	r3, [sp, #0]
  40d5f0:	2b00      	cmp	r3, #0
  40d5f2:	d04f      	beq.n	40d694 <__sfvwrite_r+0x200>
  40d5f4:	45d0      	cmp	r8, sl
  40d5f6:	6962      	ldr	r2, [r4, #20]
  40d5f8:	68a1      	ldr	r1, [r4, #8]
  40d5fa:	4643      	mov	r3, r8
  40d5fc:	bf28      	it	cs
  40d5fe:	4653      	movcs	r3, sl
  40d600:	6820      	ldr	r0, [r4, #0]
  40d602:	eb02 0c01 	add.w	ip, r2, r1
  40d606:	461f      	mov	r7, r3
  40d608:	4563      	cmp	r3, ip
  40d60a:	dd03      	ble.n	40d614 <__sfvwrite_r+0x180>
  40d60c:	6921      	ldr	r1, [r4, #16]
  40d60e:	4288      	cmp	r0, r1
  40d610:	f200 8099 	bhi.w	40d746 <__sfvwrite_r+0x2b2>
  40d614:	4293      	cmp	r3, r2
  40d616:	db20      	blt.n	40d65a <__sfvwrite_r+0x1c6>
  40d618:	4613      	mov	r3, r2
  40d61a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d61c:	4648      	mov	r0, r9
  40d61e:	69e1      	ldr	r1, [r4, #28]
  40d620:	465a      	mov	r2, fp
  40d622:	47b8      	blx	r7
  40d624:	1e07      	subs	r7, r0, #0
  40d626:	ddd2      	ble.n	40d5ce <__sfvwrite_r+0x13a>
  40d628:	ebb8 0807 	subs.w	r8, r8, r7
  40d62c:	d025      	beq.n	40d67a <__sfvwrite_r+0x1e6>
  40d62e:	68b3      	ldr	r3, [r6, #8]
  40d630:	44bb      	add	fp, r7
  40d632:	ebc7 0a0a 	rsb	sl, r7, sl
  40d636:	1bdf      	subs	r7, r3, r7
  40d638:	60b7      	str	r7, [r6, #8]
  40d63a:	2f00      	cmp	r7, #0
  40d63c:	f43f af5b 	beq.w	40d4f6 <__sfvwrite_r+0x62>
  40d640:	f1ba 0f00 	cmp.w	sl, #0
  40d644:	d1d3      	bne.n	40d5ee <__sfvwrite_r+0x15a>
  40d646:	2300      	movs	r3, #0
  40d648:	f8d5 b000 	ldr.w	fp, [r5]
  40d64c:	f8d5 a004 	ldr.w	sl, [r5, #4]
  40d650:	3508      	adds	r5, #8
  40d652:	9300      	str	r3, [sp, #0]
  40d654:	e7c8      	b.n	40d5e8 <__sfvwrite_r+0x154>
  40d656:	4638      	mov	r0, r7
  40d658:	e781      	b.n	40d55e <__sfvwrite_r+0xca>
  40d65a:	461a      	mov	r2, r3
  40d65c:	4659      	mov	r1, fp
  40d65e:	9301      	str	r3, [sp, #4]
  40d660:	f000 f99a 	bl	40d998 <memmove>
  40d664:	68a2      	ldr	r2, [r4, #8]
  40d666:	ebb8 0807 	subs.w	r8, r8, r7
  40d66a:	6821      	ldr	r1, [r4, #0]
  40d66c:	9b01      	ldr	r3, [sp, #4]
  40d66e:	eba2 0203 	sub.w	r2, r2, r3
  40d672:	440b      	add	r3, r1
  40d674:	60a2      	str	r2, [r4, #8]
  40d676:	6023      	str	r3, [r4, #0]
  40d678:	d1d9      	bne.n	40d62e <__sfvwrite_r+0x19a>
  40d67a:	4648      	mov	r0, r9
  40d67c:	4621      	mov	r1, r4
  40d67e:	f7ff fcbf 	bl	40d000 <_fflush_r>
  40d682:	2800      	cmp	r0, #0
  40d684:	d1a3      	bne.n	40d5ce <__sfvwrite_r+0x13a>
  40d686:	f8cd 8000 	str.w	r8, [sp]
  40d68a:	e7d0      	b.n	40d62e <__sfvwrite_r+0x19a>
  40d68c:	4647      	mov	r7, r8
  40d68e:	6820      	ldr	r0, [r4, #0]
  40d690:	46c2      	mov	sl, r8
  40d692:	e758      	b.n	40d546 <__sfvwrite_r+0xb2>
  40d694:	4658      	mov	r0, fp
  40d696:	210a      	movs	r1, #10
  40d698:	4652      	mov	r2, sl
  40d69a:	f000 f935 	bl	40d908 <memchr>
  40d69e:	2800      	cmp	r0, #0
  40d6a0:	d07b      	beq.n	40d79a <__sfvwrite_r+0x306>
  40d6a2:	3001      	adds	r0, #1
  40d6a4:	2301      	movs	r3, #1
  40d6a6:	ebcb 0800 	rsb	r8, fp, r0
  40d6aa:	9300      	str	r3, [sp, #0]
  40d6ac:	e7a2      	b.n	40d5f4 <__sfvwrite_r+0x160>
  40d6ae:	6963      	ldr	r3, [r4, #20]
  40d6b0:	6921      	ldr	r1, [r4, #16]
  40d6b2:	6827      	ldr	r7, [r4, #0]
  40d6b4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  40d6b8:	1a7f      	subs	r7, r7, r1
  40d6ba:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  40d6be:	1c7b      	adds	r3, r7, #1
  40d6c0:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  40d6c4:	4443      	add	r3, r8
  40d6c6:	4662      	mov	r2, ip
  40d6c8:	459c      	cmp	ip, r3
  40d6ca:	d201      	bcs.n	40d6d0 <__sfvwrite_r+0x23c>
  40d6cc:	469c      	mov	ip, r3
  40d6ce:	461a      	mov	r2, r3
  40d6d0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40d6d4:	f8cd c000 	str.w	ip, [sp]
  40d6d8:	d04b      	beq.n	40d772 <__sfvwrite_r+0x2de>
  40d6da:	4611      	mov	r1, r2
  40d6dc:	4648      	mov	r0, r9
  40d6de:	f7fb fc13 	bl	408f08 <_malloc_r>
  40d6e2:	f8dd c000 	ldr.w	ip, [sp]
  40d6e6:	4682      	mov	sl, r0
  40d6e8:	2800      	cmp	r0, #0
  40d6ea:	d05e      	beq.n	40d7aa <__sfvwrite_r+0x316>
  40d6ec:	463a      	mov	r2, r7
  40d6ee:	6921      	ldr	r1, [r4, #16]
  40d6f0:	f8cd c000 	str.w	ip, [sp]
  40d6f4:	f7fb feb4 	bl	409460 <memcpy>
  40d6f8:	89a2      	ldrh	r2, [r4, #12]
  40d6fa:	f8dd c000 	ldr.w	ip, [sp]
  40d6fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d706:	81a2      	strh	r2, [r4, #12]
  40d708:	eb0a 0007 	add.w	r0, sl, r7
  40d70c:	ebc7 020c 	rsb	r2, r7, ip
  40d710:	f8c4 a010 	str.w	sl, [r4, #16]
  40d714:	4647      	mov	r7, r8
  40d716:	6020      	str	r0, [r4, #0]
  40d718:	46c2      	mov	sl, r8
  40d71a:	60a2      	str	r2, [r4, #8]
  40d71c:	f8c4 c014 	str.w	ip, [r4, #20]
  40d720:	e711      	b.n	40d546 <__sfvwrite_r+0xb2>
  40d722:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  40d726:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40d728:	4648      	mov	r0, r9
  40d72a:	69e1      	ldr	r1, [r4, #28]
  40d72c:	45c6      	cmp	lr, r8
  40d72e:	465a      	mov	r2, fp
  40d730:	bf28      	it	cs
  40d732:	46c6      	movcs	lr, r8
  40d734:	fb9e fef3 	sdiv	lr, lr, r3
  40d738:	fb0e f303 	mul.w	r3, lr, r3
  40d73c:	47b8      	blx	r7
  40d73e:	2800      	cmp	r0, #0
  40d740:	f73f af0d 	bgt.w	40d55e <__sfvwrite_r+0xca>
  40d744:	e743      	b.n	40d5ce <__sfvwrite_r+0x13a>
  40d746:	4662      	mov	r2, ip
  40d748:	4659      	mov	r1, fp
  40d74a:	f8cd c004 	str.w	ip, [sp, #4]
  40d74e:	f000 f923 	bl	40d998 <memmove>
  40d752:	6823      	ldr	r3, [r4, #0]
  40d754:	4648      	mov	r0, r9
  40d756:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d75a:	4621      	mov	r1, r4
  40d75c:	4463      	add	r3, ip
  40d75e:	6023      	str	r3, [r4, #0]
  40d760:	f7ff fc4e 	bl	40d000 <_fflush_r>
  40d764:	f8dd c004 	ldr.w	ip, [sp, #4]
  40d768:	2800      	cmp	r0, #0
  40d76a:	f47f af30 	bne.w	40d5ce <__sfvwrite_r+0x13a>
  40d76e:	4667      	mov	r7, ip
  40d770:	e75a      	b.n	40d628 <__sfvwrite_r+0x194>
  40d772:	4648      	mov	r0, r9
  40d774:	f000 fc7e 	bl	40e074 <_realloc_r>
  40d778:	f8dd c000 	ldr.w	ip, [sp]
  40d77c:	4682      	mov	sl, r0
  40d77e:	2800      	cmp	r0, #0
  40d780:	d1c2      	bne.n	40d708 <__sfvwrite_r+0x274>
  40d782:	4648      	mov	r0, r9
  40d784:	6921      	ldr	r1, [r4, #16]
  40d786:	f7ff fdad 	bl	40d2e4 <_free_r>
  40d78a:	89a3      	ldrh	r3, [r4, #12]
  40d78c:	220c      	movs	r2, #12
  40d78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40d792:	f8c9 2000 	str.w	r2, [r9]
  40d796:	b29b      	uxth	r3, r3
  40d798:	e71a      	b.n	40d5d0 <__sfvwrite_r+0x13c>
  40d79a:	2301      	movs	r3, #1
  40d79c:	f10a 0801 	add.w	r8, sl, #1
  40d7a0:	9300      	str	r3, [sp, #0]
  40d7a2:	e727      	b.n	40d5f4 <__sfvwrite_r+0x160>
  40d7a4:	f04f 30ff 	mov.w	r0, #4294967295
  40d7a8:	e6a6      	b.n	40d4f8 <__sfvwrite_r+0x64>
  40d7aa:	220c      	movs	r2, #12
  40d7ac:	89a3      	ldrh	r3, [r4, #12]
  40d7ae:	f8c9 2000 	str.w	r2, [r9]
  40d7b2:	e70d      	b.n	40d5d0 <__sfvwrite_r+0x13c>
  40d7b4:	7ffffc00 	.word	0x7ffffc00

0040d7b8 <_fwalk_reent>:
  40d7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d7bc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40d7c0:	d01e      	beq.n	40d800 <_fwalk_reent+0x48>
  40d7c2:	4688      	mov	r8, r1
  40d7c4:	4606      	mov	r6, r0
  40d7c6:	f04f 0900 	mov.w	r9, #0
  40d7ca:	687d      	ldr	r5, [r7, #4]
  40d7cc:	68bc      	ldr	r4, [r7, #8]
  40d7ce:	3d01      	subs	r5, #1
  40d7d0:	d410      	bmi.n	40d7f4 <_fwalk_reent+0x3c>
  40d7d2:	89a3      	ldrh	r3, [r4, #12]
  40d7d4:	3d01      	subs	r5, #1
  40d7d6:	2b01      	cmp	r3, #1
  40d7d8:	d908      	bls.n	40d7ec <_fwalk_reent+0x34>
  40d7da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40d7de:	4621      	mov	r1, r4
  40d7e0:	4630      	mov	r0, r6
  40d7e2:	3301      	adds	r3, #1
  40d7e4:	d002      	beq.n	40d7ec <_fwalk_reent+0x34>
  40d7e6:	47c0      	blx	r8
  40d7e8:	ea49 0900 	orr.w	r9, r9, r0
  40d7ec:	1c6b      	adds	r3, r5, #1
  40d7ee:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40d7f2:	d1ee      	bne.n	40d7d2 <_fwalk_reent+0x1a>
  40d7f4:	683f      	ldr	r7, [r7, #0]
  40d7f6:	2f00      	cmp	r7, #0
  40d7f8:	d1e7      	bne.n	40d7ca <_fwalk_reent+0x12>
  40d7fa:	4648      	mov	r0, r9
  40d7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d800:	46b9      	mov	r9, r7
  40d802:	4648      	mov	r0, r9
  40d804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040d808 <__locale_charset>:
  40d808:	4800      	ldr	r0, [pc, #0]	; (40d80c <__locale_charset+0x4>)
  40d80a:	4770      	bx	lr
  40d80c:	20400898 	.word	0x20400898

0040d810 <__locale_mb_cur_max>:
  40d810:	4b01      	ldr	r3, [pc, #4]	; (40d818 <__locale_mb_cur_max+0x8>)
  40d812:	6818      	ldr	r0, [r3, #0]
  40d814:	4770      	bx	lr
  40d816:	bf00      	nop
  40d818:	204008b8 	.word	0x204008b8

0040d81c <_localeconv_r>:
  40d81c:	4800      	ldr	r0, [pc, #0]	; (40d820 <_localeconv_r+0x4>)
  40d81e:	4770      	bx	lr
  40d820:	20400860 	.word	0x20400860

0040d824 <__smakebuf_r>:
  40d824:	898b      	ldrh	r3, [r1, #12]
  40d826:	b29a      	uxth	r2, r3
  40d828:	f012 0f02 	tst.w	r2, #2
  40d82c:	d13d      	bne.n	40d8aa <__smakebuf_r+0x86>
  40d82e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d830:	460c      	mov	r4, r1
  40d832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40d836:	b091      	sub	sp, #68	; 0x44
  40d838:	4605      	mov	r5, r0
  40d83a:	2900      	cmp	r1, #0
  40d83c:	db19      	blt.n	40d872 <__smakebuf_r+0x4e>
  40d83e:	aa01      	add	r2, sp, #4
  40d840:	f001 f89c 	bl	40e97c <_fstat_r>
  40d844:	2800      	cmp	r0, #0
  40d846:	db12      	blt.n	40d86e <__smakebuf_r+0x4a>
  40d848:	9b02      	ldr	r3, [sp, #8]
  40d84a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  40d84e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  40d852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40d856:	fab7 f787 	clz	r7, r7
  40d85a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  40d85e:	d02b      	beq.n	40d8b8 <__smakebuf_r+0x94>
  40d860:	89a3      	ldrh	r3, [r4, #12]
  40d862:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40d866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40d86a:	81a3      	strh	r3, [r4, #12]
  40d86c:	e00c      	b.n	40d888 <__smakebuf_r+0x64>
  40d86e:	89a3      	ldrh	r3, [r4, #12]
  40d870:	b29a      	uxth	r2, r3
  40d872:	f012 0f80 	tst.w	r2, #128	; 0x80
  40d876:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40d87a:	f04f 0700 	mov.w	r7, #0
  40d87e:	bf0c      	ite	eq
  40d880:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  40d884:	2640      	movne	r6, #64	; 0x40
  40d886:	81a3      	strh	r3, [r4, #12]
  40d888:	4628      	mov	r0, r5
  40d88a:	4631      	mov	r1, r6
  40d88c:	f7fb fb3c 	bl	408f08 <_malloc_r>
  40d890:	89a3      	ldrh	r3, [r4, #12]
  40d892:	b340      	cbz	r0, 40d8e6 <__smakebuf_r+0xc2>
  40d894:	4a1a      	ldr	r2, [pc, #104]	; (40d900 <__smakebuf_r+0xdc>)
  40d896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d89a:	63ea      	str	r2, [r5, #60]	; 0x3c
  40d89c:	81a3      	strh	r3, [r4, #12]
  40d89e:	6020      	str	r0, [r4, #0]
  40d8a0:	6120      	str	r0, [r4, #16]
  40d8a2:	6166      	str	r6, [r4, #20]
  40d8a4:	b99f      	cbnz	r7, 40d8ce <__smakebuf_r+0xaa>
  40d8a6:	b011      	add	sp, #68	; 0x44
  40d8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d8aa:	f101 0343 	add.w	r3, r1, #67	; 0x43
  40d8ae:	2201      	movs	r2, #1
  40d8b0:	600b      	str	r3, [r1, #0]
  40d8b2:	610b      	str	r3, [r1, #16]
  40d8b4:	614a      	str	r2, [r1, #20]
  40d8b6:	4770      	bx	lr
  40d8b8:	4b12      	ldr	r3, [pc, #72]	; (40d904 <__smakebuf_r+0xe0>)
  40d8ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40d8bc:	429a      	cmp	r2, r3
  40d8be:	d1cf      	bne.n	40d860 <__smakebuf_r+0x3c>
  40d8c0:	89a3      	ldrh	r3, [r4, #12]
  40d8c2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40d8c6:	4333      	orrs	r3, r6
  40d8c8:	64e6      	str	r6, [r4, #76]	; 0x4c
  40d8ca:	81a3      	strh	r3, [r4, #12]
  40d8cc:	e7dc      	b.n	40d888 <__smakebuf_r+0x64>
  40d8ce:	4628      	mov	r0, r5
  40d8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40d8d4:	f001 f866 	bl	40e9a4 <_isatty_r>
  40d8d8:	2800      	cmp	r0, #0
  40d8da:	d0e4      	beq.n	40d8a6 <__smakebuf_r+0x82>
  40d8dc:	89a3      	ldrh	r3, [r4, #12]
  40d8de:	f043 0301 	orr.w	r3, r3, #1
  40d8e2:	81a3      	strh	r3, [r4, #12]
  40d8e4:	e7df      	b.n	40d8a6 <__smakebuf_r+0x82>
  40d8e6:	059a      	lsls	r2, r3, #22
  40d8e8:	d4dd      	bmi.n	40d8a6 <__smakebuf_r+0x82>
  40d8ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40d8ee:	f043 0302 	orr.w	r3, r3, #2
  40d8f2:	2101      	movs	r1, #1
  40d8f4:	81a3      	strh	r3, [r4, #12]
  40d8f6:	6022      	str	r2, [r4, #0]
  40d8f8:	6122      	str	r2, [r4, #16]
  40d8fa:	6161      	str	r1, [r4, #20]
  40d8fc:	e7d3      	b.n	40d8a6 <__smakebuf_r+0x82>
  40d8fe:	bf00      	nop
  40d900:	0040d02d 	.word	0x0040d02d
  40d904:	0040e555 	.word	0x0040e555

0040d908 <memchr>:
  40d908:	0783      	lsls	r3, r0, #30
  40d90a:	b2c9      	uxtb	r1, r1
  40d90c:	b470      	push	{r4, r5, r6}
  40d90e:	d03f      	beq.n	40d990 <memchr+0x88>
  40d910:	1e54      	subs	r4, r2, #1
  40d912:	2a00      	cmp	r2, #0
  40d914:	d03e      	beq.n	40d994 <memchr+0x8c>
  40d916:	7803      	ldrb	r3, [r0, #0]
  40d918:	428b      	cmp	r3, r1
  40d91a:	bf18      	it	ne
  40d91c:	1c43      	addne	r3, r0, #1
  40d91e:	d105      	bne.n	40d92c <memchr+0x24>
  40d920:	e01c      	b.n	40d95c <memchr+0x54>
  40d922:	b1ec      	cbz	r4, 40d960 <memchr+0x58>
  40d924:	7802      	ldrb	r2, [r0, #0]
  40d926:	3c01      	subs	r4, #1
  40d928:	428a      	cmp	r2, r1
  40d92a:	d017      	beq.n	40d95c <memchr+0x54>
  40d92c:	f013 0f03 	tst.w	r3, #3
  40d930:	4618      	mov	r0, r3
  40d932:	f103 0301 	add.w	r3, r3, #1
  40d936:	d1f4      	bne.n	40d922 <memchr+0x1a>
  40d938:	2c03      	cmp	r4, #3
  40d93a:	d814      	bhi.n	40d966 <memchr+0x5e>
  40d93c:	b184      	cbz	r4, 40d960 <memchr+0x58>
  40d93e:	7803      	ldrb	r3, [r0, #0]
  40d940:	428b      	cmp	r3, r1
  40d942:	d00b      	beq.n	40d95c <memchr+0x54>
  40d944:	1905      	adds	r5, r0, r4
  40d946:	1c43      	adds	r3, r0, #1
  40d948:	e002      	b.n	40d950 <memchr+0x48>
  40d94a:	7802      	ldrb	r2, [r0, #0]
  40d94c:	428a      	cmp	r2, r1
  40d94e:	d005      	beq.n	40d95c <memchr+0x54>
  40d950:	42ab      	cmp	r3, r5
  40d952:	4618      	mov	r0, r3
  40d954:	f103 0301 	add.w	r3, r3, #1
  40d958:	d1f7      	bne.n	40d94a <memchr+0x42>
  40d95a:	2000      	movs	r0, #0
  40d95c:	bc70      	pop	{r4, r5, r6}
  40d95e:	4770      	bx	lr
  40d960:	4620      	mov	r0, r4
  40d962:	bc70      	pop	{r4, r5, r6}
  40d964:	4770      	bx	lr
  40d966:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40d96a:	4602      	mov	r2, r0
  40d96c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40d970:	4610      	mov	r0, r2
  40d972:	3204      	adds	r2, #4
  40d974:	6803      	ldr	r3, [r0, #0]
  40d976:	4073      	eors	r3, r6
  40d978:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40d97c:	ea25 0303 	bic.w	r3, r5, r3
  40d980:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40d984:	d1da      	bne.n	40d93c <memchr+0x34>
  40d986:	3c04      	subs	r4, #4
  40d988:	4610      	mov	r0, r2
  40d98a:	2c03      	cmp	r4, #3
  40d98c:	d8f0      	bhi.n	40d970 <memchr+0x68>
  40d98e:	e7d5      	b.n	40d93c <memchr+0x34>
  40d990:	4614      	mov	r4, r2
  40d992:	e7d1      	b.n	40d938 <memchr+0x30>
  40d994:	4610      	mov	r0, r2
  40d996:	e7e1      	b.n	40d95c <memchr+0x54>

0040d998 <memmove>:
  40d998:	4288      	cmp	r0, r1
  40d99a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d99c:	d90d      	bls.n	40d9ba <memmove+0x22>
  40d99e:	188b      	adds	r3, r1, r2
  40d9a0:	4298      	cmp	r0, r3
  40d9a2:	d20a      	bcs.n	40d9ba <memmove+0x22>
  40d9a4:	1881      	adds	r1, r0, r2
  40d9a6:	2a00      	cmp	r2, #0
  40d9a8:	d053      	beq.n	40da52 <memmove+0xba>
  40d9aa:	1a9a      	subs	r2, r3, r2
  40d9ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40d9b0:	4293      	cmp	r3, r2
  40d9b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
  40d9b6:	d1f9      	bne.n	40d9ac <memmove+0x14>
  40d9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d9ba:	2a0f      	cmp	r2, #15
  40d9bc:	d947      	bls.n	40da4e <memmove+0xb6>
  40d9be:	ea40 0301 	orr.w	r3, r0, r1
  40d9c2:	079b      	lsls	r3, r3, #30
  40d9c4:	d146      	bne.n	40da54 <memmove+0xbc>
  40d9c6:	f100 0410 	add.w	r4, r0, #16
  40d9ca:	f101 0310 	add.w	r3, r1, #16
  40d9ce:	4615      	mov	r5, r2
  40d9d0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40d9d4:	3d10      	subs	r5, #16
  40d9d6:	3310      	adds	r3, #16
  40d9d8:	3410      	adds	r4, #16
  40d9da:	f844 6c20 	str.w	r6, [r4, #-32]
  40d9de:	2d0f      	cmp	r5, #15
  40d9e0:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  40d9e4:	f844 6c1c 	str.w	r6, [r4, #-28]
  40d9e8:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40d9ec:	f844 6c18 	str.w	r6, [r4, #-24]
  40d9f0:	f853 6c14 	ldr.w	r6, [r3, #-20]
  40d9f4:	f844 6c14 	str.w	r6, [r4, #-20]
  40d9f8:	d8ea      	bhi.n	40d9d0 <memmove+0x38>
  40d9fa:	f1a2 0310 	sub.w	r3, r2, #16
  40d9fe:	f002 0e0f 	and.w	lr, r2, #15
  40da02:	f023 030f 	bic.w	r3, r3, #15
  40da06:	f1be 0f03 	cmp.w	lr, #3
  40da0a:	f103 0310 	add.w	r3, r3, #16
  40da0e:	4419      	add	r1, r3
  40da10:	4403      	add	r3, r0
  40da12:	d921      	bls.n	40da58 <memmove+0xc0>
  40da14:	1f1e      	subs	r6, r3, #4
  40da16:	460d      	mov	r5, r1
  40da18:	4674      	mov	r4, lr
  40da1a:	3c04      	subs	r4, #4
  40da1c:	f855 7b04 	ldr.w	r7, [r5], #4
  40da20:	2c03      	cmp	r4, #3
  40da22:	f846 7f04 	str.w	r7, [r6, #4]!
  40da26:	d8f8      	bhi.n	40da1a <memmove+0x82>
  40da28:	f1ae 0404 	sub.w	r4, lr, #4
  40da2c:	f002 0203 	and.w	r2, r2, #3
  40da30:	f024 0403 	bic.w	r4, r4, #3
  40da34:	3404      	adds	r4, #4
  40da36:	4423      	add	r3, r4
  40da38:	4421      	add	r1, r4
  40da3a:	b152      	cbz	r2, 40da52 <memmove+0xba>
  40da3c:	3b01      	subs	r3, #1
  40da3e:	440a      	add	r2, r1
  40da40:	f811 4b01 	ldrb.w	r4, [r1], #1
  40da44:	4291      	cmp	r1, r2
  40da46:	f803 4f01 	strb.w	r4, [r3, #1]!
  40da4a:	d1f9      	bne.n	40da40 <memmove+0xa8>
  40da4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40da4e:	4603      	mov	r3, r0
  40da50:	e7f3      	b.n	40da3a <memmove+0xa2>
  40da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40da54:	4603      	mov	r3, r0
  40da56:	e7f1      	b.n	40da3c <memmove+0xa4>
  40da58:	4672      	mov	r2, lr
  40da5a:	e7ee      	b.n	40da3a <memmove+0xa2>

0040da5c <_Balloc>:
  40da5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40da5e:	b538      	push	{r3, r4, r5, lr}
  40da60:	4605      	mov	r5, r0
  40da62:	460c      	mov	r4, r1
  40da64:	b152      	cbz	r2, 40da7c <_Balloc+0x20>
  40da66:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  40da6a:	b18b      	cbz	r3, 40da90 <_Balloc+0x34>
  40da6c:	6819      	ldr	r1, [r3, #0]
  40da6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40da72:	2200      	movs	r2, #0
  40da74:	4618      	mov	r0, r3
  40da76:	611a      	str	r2, [r3, #16]
  40da78:	60da      	str	r2, [r3, #12]
  40da7a:	bd38      	pop	{r3, r4, r5, pc}
  40da7c:	2221      	movs	r2, #33	; 0x21
  40da7e:	2104      	movs	r1, #4
  40da80:	f000 fef8 	bl	40e874 <_calloc_r>
  40da84:	64e8      	str	r0, [r5, #76]	; 0x4c
  40da86:	4602      	mov	r2, r0
  40da88:	2800      	cmp	r0, #0
  40da8a:	d1ec      	bne.n	40da66 <_Balloc+0xa>
  40da8c:	2000      	movs	r0, #0
  40da8e:	bd38      	pop	{r3, r4, r5, pc}
  40da90:	2101      	movs	r1, #1
  40da92:	4628      	mov	r0, r5
  40da94:	fa01 f504 	lsl.w	r5, r1, r4
  40da98:	1d6a      	adds	r2, r5, #5
  40da9a:	0092      	lsls	r2, r2, #2
  40da9c:	f000 feea 	bl	40e874 <_calloc_r>
  40daa0:	4603      	mov	r3, r0
  40daa2:	2800      	cmp	r0, #0
  40daa4:	d0f2      	beq.n	40da8c <_Balloc+0x30>
  40daa6:	6044      	str	r4, [r0, #4]
  40daa8:	6085      	str	r5, [r0, #8]
  40daaa:	e7e2      	b.n	40da72 <_Balloc+0x16>

0040daac <_Bfree>:
  40daac:	b131      	cbz	r1, 40dabc <_Bfree+0x10>
  40daae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40dab0:	684a      	ldr	r2, [r1, #4]
  40dab2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40dab6:	6008      	str	r0, [r1, #0]
  40dab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40dabc:	4770      	bx	lr
  40dabe:	bf00      	nop

0040dac0 <__multadd>:
  40dac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40dac2:	460c      	mov	r4, r1
  40dac4:	b083      	sub	sp, #12
  40dac6:	4605      	mov	r5, r0
  40dac8:	690e      	ldr	r6, [r1, #16]
  40daca:	f101 0e14 	add.w	lr, r1, #20
  40dace:	2700      	movs	r7, #0
  40dad0:	f8de 1000 	ldr.w	r1, [lr]
  40dad4:	3701      	adds	r7, #1
  40dad6:	b288      	uxth	r0, r1
  40dad8:	42be      	cmp	r6, r7
  40dada:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40dade:	fb02 3300 	mla	r3, r2, r0, r3
  40dae2:	fb02 f101 	mul.w	r1, r2, r1
  40dae6:	b298      	uxth	r0, r3
  40dae8:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  40daec:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  40daf0:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40daf4:	f84e 1b04 	str.w	r1, [lr], #4
  40daf8:	dcea      	bgt.n	40dad0 <__multadd+0x10>
  40dafa:	b13b      	cbz	r3, 40db0c <__multadd+0x4c>
  40dafc:	68a2      	ldr	r2, [r4, #8]
  40dafe:	4296      	cmp	r6, r2
  40db00:	da07      	bge.n	40db12 <__multadd+0x52>
  40db02:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40db06:	3601      	adds	r6, #1
  40db08:	6153      	str	r3, [r2, #20]
  40db0a:	6126      	str	r6, [r4, #16]
  40db0c:	4620      	mov	r0, r4
  40db0e:	b003      	add	sp, #12
  40db10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40db12:	6861      	ldr	r1, [r4, #4]
  40db14:	4628      	mov	r0, r5
  40db16:	9301      	str	r3, [sp, #4]
  40db18:	3101      	adds	r1, #1
  40db1a:	f7ff ff9f 	bl	40da5c <_Balloc>
  40db1e:	6922      	ldr	r2, [r4, #16]
  40db20:	f104 010c 	add.w	r1, r4, #12
  40db24:	4607      	mov	r7, r0
  40db26:	3202      	adds	r2, #2
  40db28:	300c      	adds	r0, #12
  40db2a:	0092      	lsls	r2, r2, #2
  40db2c:	f7fb fc98 	bl	409460 <memcpy>
  40db30:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40db32:	6861      	ldr	r1, [r4, #4]
  40db34:	9b01      	ldr	r3, [sp, #4]
  40db36:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40db3a:	6020      	str	r0, [r4, #0]
  40db3c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  40db40:	463c      	mov	r4, r7
  40db42:	e7de      	b.n	40db02 <__multadd+0x42>

0040db44 <__hi0bits>:
  40db44:	4b0f      	ldr	r3, [pc, #60]	; (40db84 <__hi0bits+0x40>)
  40db46:	4003      	ands	r3, r0
  40db48:	b9b3      	cbnz	r3, 40db78 <__hi0bits+0x34>
  40db4a:	0400      	lsls	r0, r0, #16
  40db4c:	2310      	movs	r3, #16
  40db4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40db52:	d101      	bne.n	40db58 <__hi0bits+0x14>
  40db54:	3308      	adds	r3, #8
  40db56:	0200      	lsls	r0, r0, #8
  40db58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40db5c:	d101      	bne.n	40db62 <__hi0bits+0x1e>
  40db5e:	3304      	adds	r3, #4
  40db60:	0100      	lsls	r0, r0, #4
  40db62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40db66:	d101      	bne.n	40db6c <__hi0bits+0x28>
  40db68:	3302      	adds	r3, #2
  40db6a:	0080      	lsls	r0, r0, #2
  40db6c:	2800      	cmp	r0, #0
  40db6e:	db07      	blt.n	40db80 <__hi0bits+0x3c>
  40db70:	0042      	lsls	r2, r0, #1
  40db72:	d403      	bmi.n	40db7c <__hi0bits+0x38>
  40db74:	2020      	movs	r0, #32
  40db76:	4770      	bx	lr
  40db78:	2300      	movs	r3, #0
  40db7a:	e7e8      	b.n	40db4e <__hi0bits+0xa>
  40db7c:	1c58      	adds	r0, r3, #1
  40db7e:	4770      	bx	lr
  40db80:	4618      	mov	r0, r3
  40db82:	4770      	bx	lr
  40db84:	ffff0000 	.word	0xffff0000

0040db88 <__lo0bits>:
  40db88:	6803      	ldr	r3, [r0, #0]
  40db8a:	f013 0207 	ands.w	r2, r3, #7
  40db8e:	d008      	beq.n	40dba2 <__lo0bits+0x1a>
  40db90:	07d9      	lsls	r1, r3, #31
  40db92:	d422      	bmi.n	40dbda <__lo0bits+0x52>
  40db94:	079a      	lsls	r2, r3, #30
  40db96:	d423      	bmi.n	40dbe0 <__lo0bits+0x58>
  40db98:	089b      	lsrs	r3, r3, #2
  40db9a:	2202      	movs	r2, #2
  40db9c:	6003      	str	r3, [r0, #0]
  40db9e:	4610      	mov	r0, r2
  40dba0:	4770      	bx	lr
  40dba2:	b299      	uxth	r1, r3
  40dba4:	b909      	cbnz	r1, 40dbaa <__lo0bits+0x22>
  40dba6:	0c1b      	lsrs	r3, r3, #16
  40dba8:	2210      	movs	r2, #16
  40dbaa:	f013 0fff 	tst.w	r3, #255	; 0xff
  40dbae:	d101      	bne.n	40dbb4 <__lo0bits+0x2c>
  40dbb0:	3208      	adds	r2, #8
  40dbb2:	0a1b      	lsrs	r3, r3, #8
  40dbb4:	0719      	lsls	r1, r3, #28
  40dbb6:	d101      	bne.n	40dbbc <__lo0bits+0x34>
  40dbb8:	3204      	adds	r2, #4
  40dbba:	091b      	lsrs	r3, r3, #4
  40dbbc:	0799      	lsls	r1, r3, #30
  40dbbe:	d101      	bne.n	40dbc4 <__lo0bits+0x3c>
  40dbc0:	3202      	adds	r2, #2
  40dbc2:	089b      	lsrs	r3, r3, #2
  40dbc4:	07d9      	lsls	r1, r3, #31
  40dbc6:	d405      	bmi.n	40dbd4 <__lo0bits+0x4c>
  40dbc8:	085b      	lsrs	r3, r3, #1
  40dbca:	d102      	bne.n	40dbd2 <__lo0bits+0x4a>
  40dbcc:	2220      	movs	r2, #32
  40dbce:	4610      	mov	r0, r2
  40dbd0:	4770      	bx	lr
  40dbd2:	3201      	adds	r2, #1
  40dbd4:	6003      	str	r3, [r0, #0]
  40dbd6:	4610      	mov	r0, r2
  40dbd8:	4770      	bx	lr
  40dbda:	2200      	movs	r2, #0
  40dbdc:	4610      	mov	r0, r2
  40dbde:	4770      	bx	lr
  40dbe0:	085b      	lsrs	r3, r3, #1
  40dbe2:	2201      	movs	r2, #1
  40dbe4:	6003      	str	r3, [r0, #0]
  40dbe6:	4610      	mov	r0, r2
  40dbe8:	4770      	bx	lr
  40dbea:	bf00      	nop

0040dbec <__i2b>:
  40dbec:	b510      	push	{r4, lr}
  40dbee:	460c      	mov	r4, r1
  40dbf0:	2101      	movs	r1, #1
  40dbf2:	f7ff ff33 	bl	40da5c <_Balloc>
  40dbf6:	2201      	movs	r2, #1
  40dbf8:	6144      	str	r4, [r0, #20]
  40dbfa:	6102      	str	r2, [r0, #16]
  40dbfc:	bd10      	pop	{r4, pc}
  40dbfe:	bf00      	nop

0040dc00 <__multiply>:
  40dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dc04:	690e      	ldr	r6, [r1, #16]
  40dc06:	b085      	sub	sp, #20
  40dc08:	6915      	ldr	r5, [r2, #16]
  40dc0a:	460c      	mov	r4, r1
  40dc0c:	4691      	mov	r9, r2
  40dc0e:	42ae      	cmp	r6, r5
  40dc10:	f2c0 8094 	blt.w	40dd3c <__multiply+0x13c>
  40dc14:	462b      	mov	r3, r5
  40dc16:	4635      	mov	r5, r6
  40dc18:	461e      	mov	r6, r3
  40dc1a:	eb05 0806 	add.w	r8, r5, r6
  40dc1e:	68a3      	ldr	r3, [r4, #8]
  40dc20:	6861      	ldr	r1, [r4, #4]
  40dc22:	4598      	cmp	r8, r3
  40dc24:	dd00      	ble.n	40dc28 <__multiply+0x28>
  40dc26:	3101      	adds	r1, #1
  40dc28:	f7ff ff18 	bl	40da5c <_Balloc>
  40dc2c:	f100 0a14 	add.w	sl, r0, #20
  40dc30:	9001      	str	r0, [sp, #4]
  40dc32:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40dc36:	45da      	cmp	sl, fp
  40dc38:	d205      	bcs.n	40dc46 <__multiply+0x46>
  40dc3a:	4653      	mov	r3, sl
  40dc3c:	2100      	movs	r1, #0
  40dc3e:	f843 1b04 	str.w	r1, [r3], #4
  40dc42:	459b      	cmp	fp, r3
  40dc44:	d8fb      	bhi.n	40dc3e <__multiply+0x3e>
  40dc46:	f109 0914 	add.w	r9, r9, #20
  40dc4a:	f104 0314 	add.w	r3, r4, #20
  40dc4e:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40dc52:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40dc56:	4591      	cmp	r9, r2
  40dc58:	d25b      	bcs.n	40dd12 <__multiply+0x112>
  40dc5a:	f8cd b008 	str.w	fp, [sp, #8]
  40dc5e:	4693      	mov	fp, r2
  40dc60:	f8cd 800c 	str.w	r8, [sp, #12]
  40dc64:	4698      	mov	r8, r3
  40dc66:	f859 6b04 	ldr.w	r6, [r9], #4
  40dc6a:	fa1f fe86 	uxth.w	lr, r6
  40dc6e:	f1be 0f00 	cmp.w	lr, #0
  40dc72:	d021      	beq.n	40dcb8 <__multiply+0xb8>
  40dc74:	4647      	mov	r7, r8
  40dc76:	4656      	mov	r6, sl
  40dc78:	2100      	movs	r1, #0
  40dc7a:	e000      	b.n	40dc7e <__multiply+0x7e>
  40dc7c:	4626      	mov	r6, r4
  40dc7e:	f857 2b04 	ldr.w	r2, [r7], #4
  40dc82:	4634      	mov	r4, r6
  40dc84:	6835      	ldr	r5, [r6, #0]
  40dc86:	b290      	uxth	r0, r2
  40dc88:	45bc      	cmp	ip, r7
  40dc8a:	b2ab      	uxth	r3, r5
  40dc8c:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40dc90:	fb0e 3000 	mla	r0, lr, r0, r3
  40dc94:	ea4f 4315 	mov.w	r3, r5, lsr #16
  40dc98:	4401      	add	r1, r0
  40dc9a:	fb0e 3302 	mla	r3, lr, r2, r3
  40dc9e:	b28a      	uxth	r2, r1
  40dca0:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40dca4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40dca8:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40dcac:	f844 3b04 	str.w	r3, [r4], #4
  40dcb0:	d8e4      	bhi.n	40dc7c <__multiply+0x7c>
  40dcb2:	6071      	str	r1, [r6, #4]
  40dcb4:	f859 6c04 	ldr.w	r6, [r9, #-4]
  40dcb8:	0c36      	lsrs	r6, r6, #16
  40dcba:	d022      	beq.n	40dd02 <__multiply+0x102>
  40dcbc:	f8da 3000 	ldr.w	r3, [sl]
  40dcc0:	2700      	movs	r7, #0
  40dcc2:	4655      	mov	r5, sl
  40dcc4:	4640      	mov	r0, r8
  40dcc6:	461a      	mov	r2, r3
  40dcc8:	46be      	mov	lr, r7
  40dcca:	e000      	b.n	40dcce <__multiply+0xce>
  40dccc:	4625      	mov	r5, r4
  40dcce:	8807      	ldrh	r7, [r0, #0]
  40dcd0:	0c12      	lsrs	r2, r2, #16
  40dcd2:	b299      	uxth	r1, r3
  40dcd4:	462c      	mov	r4, r5
  40dcd6:	fb06 2207 	mla	r2, r6, r7, r2
  40dcda:	eb02 070e 	add.w	r7, r2, lr
  40dcde:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40dce2:	f844 3b04 	str.w	r3, [r4], #4
  40dce6:	f850 1b04 	ldr.w	r1, [r0], #4
  40dcea:	686a      	ldr	r2, [r5, #4]
  40dcec:	0c09      	lsrs	r1, r1, #16
  40dcee:	4584      	cmp	ip, r0
  40dcf0:	b293      	uxth	r3, r2
  40dcf2:	fb06 3101 	mla	r1, r6, r1, r3
  40dcf6:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  40dcfa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  40dcfe:	d8e5      	bhi.n	40dccc <__multiply+0xcc>
  40dd00:	606b      	str	r3, [r5, #4]
  40dd02:	45cb      	cmp	fp, r9
  40dd04:	f10a 0a04 	add.w	sl, sl, #4
  40dd08:	d8ad      	bhi.n	40dc66 <__multiply+0x66>
  40dd0a:	f8dd b008 	ldr.w	fp, [sp, #8]
  40dd0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40dd12:	f1b8 0f00 	cmp.w	r8, #0
  40dd16:	dd0b      	ble.n	40dd30 <__multiply+0x130>
  40dd18:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  40dd1c:	f1ab 0b04 	sub.w	fp, fp, #4
  40dd20:	b11b      	cbz	r3, 40dd2a <__multiply+0x12a>
  40dd22:	e005      	b.n	40dd30 <__multiply+0x130>
  40dd24:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  40dd28:	b913      	cbnz	r3, 40dd30 <__multiply+0x130>
  40dd2a:	f1b8 0801 	subs.w	r8, r8, #1
  40dd2e:	d1f9      	bne.n	40dd24 <__multiply+0x124>
  40dd30:	9801      	ldr	r0, [sp, #4]
  40dd32:	f8c0 8010 	str.w	r8, [r0, #16]
  40dd36:	b005      	add	sp, #20
  40dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dd3c:	4614      	mov	r4, r2
  40dd3e:	4689      	mov	r9, r1
  40dd40:	e76b      	b.n	40dc1a <__multiply+0x1a>
  40dd42:	bf00      	nop

0040dd44 <__pow5mult>:
  40dd44:	f012 0303 	ands.w	r3, r2, #3
  40dd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dd4c:	4614      	mov	r4, r2
  40dd4e:	4607      	mov	r7, r0
  40dd50:	460e      	mov	r6, r1
  40dd52:	d12d      	bne.n	40ddb0 <__pow5mult+0x6c>
  40dd54:	10a4      	asrs	r4, r4, #2
  40dd56:	d01c      	beq.n	40dd92 <__pow5mult+0x4e>
  40dd58:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40dd5a:	b395      	cbz	r5, 40ddc2 <__pow5mult+0x7e>
  40dd5c:	07e3      	lsls	r3, r4, #31
  40dd5e:	f04f 0800 	mov.w	r8, #0
  40dd62:	d406      	bmi.n	40dd72 <__pow5mult+0x2e>
  40dd64:	1064      	asrs	r4, r4, #1
  40dd66:	d014      	beq.n	40dd92 <__pow5mult+0x4e>
  40dd68:	6828      	ldr	r0, [r5, #0]
  40dd6a:	b1a8      	cbz	r0, 40dd98 <__pow5mult+0x54>
  40dd6c:	4605      	mov	r5, r0
  40dd6e:	07e3      	lsls	r3, r4, #31
  40dd70:	d5f8      	bpl.n	40dd64 <__pow5mult+0x20>
  40dd72:	4638      	mov	r0, r7
  40dd74:	4631      	mov	r1, r6
  40dd76:	462a      	mov	r2, r5
  40dd78:	f7ff ff42 	bl	40dc00 <__multiply>
  40dd7c:	b1b6      	cbz	r6, 40ddac <__pow5mult+0x68>
  40dd7e:	6872      	ldr	r2, [r6, #4]
  40dd80:	1064      	asrs	r4, r4, #1
  40dd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40dd84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40dd88:	6031      	str	r1, [r6, #0]
  40dd8a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40dd8e:	4606      	mov	r6, r0
  40dd90:	d1ea      	bne.n	40dd68 <__pow5mult+0x24>
  40dd92:	4630      	mov	r0, r6
  40dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40dd98:	4629      	mov	r1, r5
  40dd9a:	462a      	mov	r2, r5
  40dd9c:	4638      	mov	r0, r7
  40dd9e:	f7ff ff2f 	bl	40dc00 <__multiply>
  40dda2:	6028      	str	r0, [r5, #0]
  40dda4:	f8c0 8000 	str.w	r8, [r0]
  40dda8:	4605      	mov	r5, r0
  40ddaa:	e7e0      	b.n	40dd6e <__pow5mult+0x2a>
  40ddac:	4606      	mov	r6, r0
  40ddae:	e7d9      	b.n	40dd64 <__pow5mult+0x20>
  40ddb0:	1e5a      	subs	r2, r3, #1
  40ddb2:	4d0b      	ldr	r5, [pc, #44]	; (40dde0 <__pow5mult+0x9c>)
  40ddb4:	2300      	movs	r3, #0
  40ddb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ddba:	f7ff fe81 	bl	40dac0 <__multadd>
  40ddbe:	4606      	mov	r6, r0
  40ddc0:	e7c8      	b.n	40dd54 <__pow5mult+0x10>
  40ddc2:	2101      	movs	r1, #1
  40ddc4:	4638      	mov	r0, r7
  40ddc6:	f7ff fe49 	bl	40da5c <_Balloc>
  40ddca:	f240 2171 	movw	r1, #625	; 0x271
  40ddce:	2201      	movs	r2, #1
  40ddd0:	2300      	movs	r3, #0
  40ddd2:	6141      	str	r1, [r0, #20]
  40ddd4:	4605      	mov	r5, r0
  40ddd6:	6102      	str	r2, [r0, #16]
  40ddd8:	64b8      	str	r0, [r7, #72]	; 0x48
  40ddda:	6003      	str	r3, [r0, #0]
  40dddc:	e7be      	b.n	40dd5c <__pow5mult+0x18>
  40ddde:	bf00      	nop
  40dde0:	0040fef0 	.word	0x0040fef0

0040dde4 <__lshift>:
  40dde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40dde8:	690e      	ldr	r6, [r1, #16]
  40ddea:	ea4f 1962 	mov.w	r9, r2, asr #5
  40ddee:	688b      	ldr	r3, [r1, #8]
  40ddf0:	460d      	mov	r5, r1
  40ddf2:	444e      	add	r6, r9
  40ddf4:	4690      	mov	r8, r2
  40ddf6:	4607      	mov	r7, r0
  40ddf8:	6849      	ldr	r1, [r1, #4]
  40ddfa:	1c74      	adds	r4, r6, #1
  40ddfc:	429c      	cmp	r4, r3
  40ddfe:	dd03      	ble.n	40de08 <__lshift+0x24>
  40de00:	005b      	lsls	r3, r3, #1
  40de02:	3101      	adds	r1, #1
  40de04:	429c      	cmp	r4, r3
  40de06:	dcfb      	bgt.n	40de00 <__lshift+0x1c>
  40de08:	4638      	mov	r0, r7
  40de0a:	f7ff fe27 	bl	40da5c <_Balloc>
  40de0e:	f1b9 0f00 	cmp.w	r9, #0
  40de12:	4684      	mov	ip, r0
  40de14:	f100 0114 	add.w	r1, r0, #20
  40de18:	dd09      	ble.n	40de2e <__lshift+0x4a>
  40de1a:	2300      	movs	r3, #0
  40de1c:	460a      	mov	r2, r1
  40de1e:	4618      	mov	r0, r3
  40de20:	3301      	adds	r3, #1
  40de22:	f842 0b04 	str.w	r0, [r2], #4
  40de26:	454b      	cmp	r3, r9
  40de28:	d1fa      	bne.n	40de20 <__lshift+0x3c>
  40de2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40de2e:	692a      	ldr	r2, [r5, #16]
  40de30:	f105 0314 	add.w	r3, r5, #20
  40de34:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  40de38:	f018 021f 	ands.w	r2, r8, #31
  40de3c:	d023      	beq.n	40de86 <__lshift+0xa2>
  40de3e:	f1c2 0920 	rsb	r9, r2, #32
  40de42:	f04f 0a00 	mov.w	sl, #0
  40de46:	6818      	ldr	r0, [r3, #0]
  40de48:	4688      	mov	r8, r1
  40de4a:	4090      	lsls	r0, r2
  40de4c:	ea4a 0000 	orr.w	r0, sl, r0
  40de50:	f841 0b04 	str.w	r0, [r1], #4
  40de54:	f853 0b04 	ldr.w	r0, [r3], #4
  40de58:	459e      	cmp	lr, r3
  40de5a:	fa20 fa09 	lsr.w	sl, r0, r9
  40de5e:	d8f2      	bhi.n	40de46 <__lshift+0x62>
  40de60:	f8c8 a004 	str.w	sl, [r8, #4]
  40de64:	f1ba 0f00 	cmp.w	sl, #0
  40de68:	d000      	beq.n	40de6c <__lshift+0x88>
  40de6a:	1cb4      	adds	r4, r6, #2
  40de6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40de6e:	3c01      	subs	r4, #1
  40de70:	686a      	ldr	r2, [r5, #4]
  40de72:	4660      	mov	r0, ip
  40de74:	f8cc 4010 	str.w	r4, [ip, #16]
  40de78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40de7c:	6029      	str	r1, [r5, #0]
  40de7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40de82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de86:	3904      	subs	r1, #4
  40de88:	f853 2b04 	ldr.w	r2, [r3], #4
  40de8c:	459e      	cmp	lr, r3
  40de8e:	f841 2f04 	str.w	r2, [r1, #4]!
  40de92:	d8f9      	bhi.n	40de88 <__lshift+0xa4>
  40de94:	e7ea      	b.n	40de6c <__lshift+0x88>
  40de96:	bf00      	nop

0040de98 <__mcmp>:
  40de98:	6902      	ldr	r2, [r0, #16]
  40de9a:	690b      	ldr	r3, [r1, #16]
  40de9c:	1ad2      	subs	r2, r2, r3
  40de9e:	d113      	bne.n	40dec8 <__mcmp+0x30>
  40dea0:	009a      	lsls	r2, r3, #2
  40dea2:	3014      	adds	r0, #20
  40dea4:	3114      	adds	r1, #20
  40dea6:	1883      	adds	r3, r0, r2
  40dea8:	4411      	add	r1, r2
  40deaa:	b410      	push	{r4}
  40deac:	e001      	b.n	40deb2 <__mcmp+0x1a>
  40deae:	4298      	cmp	r0, r3
  40deb0:	d20c      	bcs.n	40decc <__mcmp+0x34>
  40deb2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40deb6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40deba:	4294      	cmp	r4, r2
  40debc:	d0f7      	beq.n	40deae <__mcmp+0x16>
  40debe:	d309      	bcc.n	40ded4 <__mcmp+0x3c>
  40dec0:	2001      	movs	r0, #1
  40dec2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40dec6:	4770      	bx	lr
  40dec8:	4610      	mov	r0, r2
  40deca:	4770      	bx	lr
  40decc:	2000      	movs	r0, #0
  40dece:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ded2:	4770      	bx	lr
  40ded4:	f04f 30ff 	mov.w	r0, #4294967295
  40ded8:	f85d 4b04 	ldr.w	r4, [sp], #4
  40dedc:	4770      	bx	lr
  40dede:	bf00      	nop

0040dee0 <__mdiff>:
  40dee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40dee4:	460c      	mov	r4, r1
  40dee6:	4605      	mov	r5, r0
  40dee8:	4611      	mov	r1, r2
  40deea:	4617      	mov	r7, r2
  40deec:	4620      	mov	r0, r4
  40deee:	f7ff ffd3 	bl	40de98 <__mcmp>
  40def2:	1e06      	subs	r6, r0, #0
  40def4:	d05c      	beq.n	40dfb0 <__mdiff+0xd0>
  40def6:	db55      	blt.n	40dfa4 <__mdiff+0xc4>
  40def8:	f04f 0800 	mov.w	r8, #0
  40defc:	6861      	ldr	r1, [r4, #4]
  40defe:	4628      	mov	r0, r5
  40df00:	f7ff fdac 	bl	40da5c <_Balloc>
  40df04:	f107 0514 	add.w	r5, r7, #20
  40df08:	693b      	ldr	r3, [r7, #16]
  40df0a:	f104 0114 	add.w	r1, r4, #20
  40df0e:	6926      	ldr	r6, [r4, #16]
  40df10:	4684      	mov	ip, r0
  40df12:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  40df16:	f100 0414 	add.w	r4, r0, #20
  40df1a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  40df1e:	2300      	movs	r3, #0
  40df20:	f8c0 800c 	str.w	r8, [r0, #12]
  40df24:	f851 9b04 	ldr.w	r9, [r1], #4
  40df28:	f855 2b04 	ldr.w	r2, [r5], #4
  40df2c:	fa13 f889 	uxtah	r8, r3, r9
  40df30:	4608      	mov	r0, r1
  40df32:	b293      	uxth	r3, r2
  40df34:	45ae      	cmp	lr, r5
  40df36:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40df3a:	ebc3 0308 	rsb	r3, r3, r8
  40df3e:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  40df42:	fa1f f883 	uxth.w	r8, r3
  40df46:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40df4a:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  40df4e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40df52:	f844 2b04 	str.w	r2, [r4], #4
  40df56:	d8e5      	bhi.n	40df24 <__mdiff+0x44>
  40df58:	428f      	cmp	r7, r1
  40df5a:	4625      	mov	r5, r4
  40df5c:	d916      	bls.n	40df8c <__mdiff+0xac>
  40df5e:	f850 2b04 	ldr.w	r2, [r0], #4
  40df62:	fa13 f382 	uxtah	r3, r3, r2
  40df66:	0c12      	lsrs	r2, r2, #16
  40df68:	4287      	cmp	r7, r0
  40df6a:	fa1f fe83 	uxth.w	lr, r3
  40df6e:	eb02 4323 	add.w	r3, r2, r3, asr #16
  40df72:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  40df76:	ea4f 4323 	mov.w	r3, r3, asr #16
  40df7a:	f844 2b04 	str.w	r2, [r4], #4
  40df7e:	d8ee      	bhi.n	40df5e <__mdiff+0x7e>
  40df80:	43c9      	mvns	r1, r1
  40df82:	4439      	add	r1, r7
  40df84:	f021 0403 	bic.w	r4, r1, #3
  40df88:	3404      	adds	r4, #4
  40df8a:	442c      	add	r4, r5
  40df8c:	3c04      	subs	r4, #4
  40df8e:	b922      	cbnz	r2, 40df9a <__mdiff+0xba>
  40df90:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40df94:	3e01      	subs	r6, #1
  40df96:	2b00      	cmp	r3, #0
  40df98:	d0fa      	beq.n	40df90 <__mdiff+0xb0>
  40df9a:	4660      	mov	r0, ip
  40df9c:	f8cc 6010 	str.w	r6, [ip, #16]
  40dfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40dfa4:	4623      	mov	r3, r4
  40dfa6:	f04f 0801 	mov.w	r8, #1
  40dfaa:	463c      	mov	r4, r7
  40dfac:	461f      	mov	r7, r3
  40dfae:	e7a5      	b.n	40defc <__mdiff+0x1c>
  40dfb0:	4628      	mov	r0, r5
  40dfb2:	4631      	mov	r1, r6
  40dfb4:	f7ff fd52 	bl	40da5c <_Balloc>
  40dfb8:	2201      	movs	r2, #1
  40dfba:	4603      	mov	r3, r0
  40dfbc:	6146      	str	r6, [r0, #20]
  40dfbe:	611a      	str	r2, [r3, #16]
  40dfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040dfc4 <__d2b>:
  40dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dfc8:	461c      	mov	r4, r3
  40dfca:	b082      	sub	sp, #8
  40dfcc:	2101      	movs	r1, #1
  40dfce:	4616      	mov	r6, r2
  40dfd0:	f3c4 550a 	ubfx	r5, r4, #20, #11
  40dfd4:	f7ff fd42 	bl	40da5c <_Balloc>
  40dfd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40dfdc:	4607      	mov	r7, r0
  40dfde:	b10d      	cbz	r5, 40dfe4 <__d2b+0x20>
  40dfe0:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40dfe4:	9401      	str	r4, [sp, #4]
  40dfe6:	b30e      	cbz	r6, 40e02c <__d2b+0x68>
  40dfe8:	a802      	add	r0, sp, #8
  40dfea:	f840 6d08 	str.w	r6, [r0, #-8]!
  40dfee:	f7ff fdcb 	bl	40db88 <__lo0bits>
  40dff2:	2800      	cmp	r0, #0
  40dff4:	d132      	bne.n	40e05c <__d2b+0x98>
  40dff6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40dffa:	617a      	str	r2, [r7, #20]
  40dffc:	2b00      	cmp	r3, #0
  40dffe:	61bb      	str	r3, [r7, #24]
  40e000:	bf14      	ite	ne
  40e002:	2402      	movne	r4, #2
  40e004:	2401      	moveq	r4, #1
  40e006:	613c      	str	r4, [r7, #16]
  40e008:	b9dd      	cbnz	r5, 40e042 <__d2b+0x7e>
  40e00a:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  40e00e:	9a08      	ldr	r2, [sp, #32]
  40e010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40e014:	6010      	str	r0, [r2, #0]
  40e016:	6918      	ldr	r0, [r3, #16]
  40e018:	f7ff fd94 	bl	40db44 <__hi0bits>
  40e01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e01e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40e022:	6018      	str	r0, [r3, #0]
  40e024:	4638      	mov	r0, r7
  40e026:	b002      	add	sp, #8
  40e028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e02c:	a801      	add	r0, sp, #4
  40e02e:	f7ff fdab 	bl	40db88 <__lo0bits>
  40e032:	2301      	movs	r3, #1
  40e034:	9a01      	ldr	r2, [sp, #4]
  40e036:	3020      	adds	r0, #32
  40e038:	461c      	mov	r4, r3
  40e03a:	613b      	str	r3, [r7, #16]
  40e03c:	617a      	str	r2, [r7, #20]
  40e03e:	2d00      	cmp	r5, #0
  40e040:	d0e3      	beq.n	40e00a <__d2b+0x46>
  40e042:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  40e046:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  40e04a:	9a08      	ldr	r2, [sp, #32]
  40e04c:	4440      	add	r0, r8
  40e04e:	6010      	str	r0, [r2, #0]
  40e050:	4638      	mov	r0, r7
  40e052:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e054:	6013      	str	r3, [r2, #0]
  40e056:	b002      	add	sp, #8
  40e058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e05c:	9b01      	ldr	r3, [sp, #4]
  40e05e:	f1c0 0120 	rsb	r1, r0, #32
  40e062:	9a00      	ldr	r2, [sp, #0]
  40e064:	fa03 f101 	lsl.w	r1, r3, r1
  40e068:	40c3      	lsrs	r3, r0
  40e06a:	430a      	orrs	r2, r1
  40e06c:	9301      	str	r3, [sp, #4]
  40e06e:	617a      	str	r2, [r7, #20]
  40e070:	e7c4      	b.n	40dffc <__d2b+0x38>
  40e072:	bf00      	nop

0040e074 <_realloc_r>:
  40e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e078:	4617      	mov	r7, r2
  40e07a:	b083      	sub	sp, #12
  40e07c:	460e      	mov	r6, r1
  40e07e:	2900      	cmp	r1, #0
  40e080:	f000 80e2 	beq.w	40e248 <_realloc_r+0x1d4>
  40e084:	f107 040b 	add.w	r4, r7, #11
  40e088:	4681      	mov	r9, r0
  40e08a:	f7fb fad3 	bl	409634 <__malloc_lock>
  40e08e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40e092:	2c16      	cmp	r4, #22
  40e094:	f1a6 0808 	sub.w	r8, r6, #8
  40e098:	f023 0503 	bic.w	r5, r3, #3
  40e09c:	d850      	bhi.n	40e140 <_realloc_r+0xcc>
  40e09e:	2210      	movs	r2, #16
  40e0a0:	2100      	movs	r1, #0
  40e0a2:	4614      	mov	r4, r2
  40e0a4:	42bc      	cmp	r4, r7
  40e0a6:	f0c0 80dc 	bcc.w	40e262 <_realloc_r+0x1ee>
  40e0aa:	2900      	cmp	r1, #0
  40e0ac:	f040 80d9 	bne.w	40e262 <_realloc_r+0x1ee>
  40e0b0:	4295      	cmp	r5, r2
  40e0b2:	da4a      	bge.n	40e14a <_realloc_r+0xd6>
  40e0b4:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40e460 <_realloc_r+0x3ec>
  40e0b8:	eb08 0105 	add.w	r1, r8, r5
  40e0bc:	f8db 0008 	ldr.w	r0, [fp, #8]
  40e0c0:	4288      	cmp	r0, r1
  40e0c2:	f000 80d3 	beq.w	40e26c <_realloc_r+0x1f8>
  40e0c6:	6848      	ldr	r0, [r1, #4]
  40e0c8:	f020 0e01 	bic.w	lr, r0, #1
  40e0cc:	448e      	add	lr, r1
  40e0ce:	f8de e004 	ldr.w	lr, [lr, #4]
  40e0d2:	f01e 0f01 	tst.w	lr, #1
  40e0d6:	d14e      	bne.n	40e176 <_realloc_r+0x102>
  40e0d8:	f020 0003 	bic.w	r0, r0, #3
  40e0dc:	4428      	add	r0, r5
  40e0de:	4290      	cmp	r0, r2
  40e0e0:	f280 80b8 	bge.w	40e254 <_realloc_r+0x1e0>
  40e0e4:	07db      	lsls	r3, r3, #31
  40e0e6:	f100 808b 	bmi.w	40e200 <_realloc_r+0x18c>
  40e0ea:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40e0ee:	ebc3 0a08 	rsb	sl, r3, r8
  40e0f2:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e0f6:	f023 0303 	bic.w	r3, r3, #3
  40e0fa:	eb00 0e03 	add.w	lr, r0, r3
  40e0fe:	4596      	cmp	lr, r2
  40e100:	db43      	blt.n	40e18a <_realloc_r+0x116>
  40e102:	68cb      	ldr	r3, [r1, #12]
  40e104:	4657      	mov	r7, sl
  40e106:	6889      	ldr	r1, [r1, #8]
  40e108:	1f2a      	subs	r2, r5, #4
  40e10a:	60cb      	str	r3, [r1, #12]
  40e10c:	2a24      	cmp	r2, #36	; 0x24
  40e10e:	6099      	str	r1, [r3, #8]
  40e110:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40e114:	f8da 300c 	ldr.w	r3, [sl, #12]
  40e118:	60cb      	str	r3, [r1, #12]
  40e11a:	6099      	str	r1, [r3, #8]
  40e11c:	f200 813c 	bhi.w	40e398 <_realloc_r+0x324>
  40e120:	2a13      	cmp	r2, #19
  40e122:	f240 80fa 	bls.w	40e31a <_realloc_r+0x2a6>
  40e126:	6833      	ldr	r3, [r6, #0]
  40e128:	2a1b      	cmp	r2, #27
  40e12a:	f8ca 3008 	str.w	r3, [sl, #8]
  40e12e:	6873      	ldr	r3, [r6, #4]
  40e130:	f8ca 300c 	str.w	r3, [sl, #12]
  40e134:	f200 813b 	bhi.w	40e3ae <_realloc_r+0x33a>
  40e138:	3608      	adds	r6, #8
  40e13a:	f10a 0310 	add.w	r3, sl, #16
  40e13e:	e0ed      	b.n	40e31c <_realloc_r+0x2a8>
  40e140:	f024 0407 	bic.w	r4, r4, #7
  40e144:	4622      	mov	r2, r4
  40e146:	0fe1      	lsrs	r1, r4, #31
  40e148:	e7ac      	b.n	40e0a4 <_realloc_r+0x30>
  40e14a:	4637      	mov	r7, r6
  40e14c:	1b2a      	subs	r2, r5, r4
  40e14e:	f003 0301 	and.w	r3, r3, #1
  40e152:	2a0f      	cmp	r2, #15
  40e154:	d841      	bhi.n	40e1da <_realloc_r+0x166>
  40e156:	eb08 0205 	add.w	r2, r8, r5
  40e15a:	431d      	orrs	r5, r3
  40e15c:	f8c8 5004 	str.w	r5, [r8, #4]
  40e160:	6853      	ldr	r3, [r2, #4]
  40e162:	f043 0301 	orr.w	r3, r3, #1
  40e166:	6053      	str	r3, [r2, #4]
  40e168:	4648      	mov	r0, r9
  40e16a:	f7fb fa65 	bl	409638 <__malloc_unlock>
  40e16e:	4638      	mov	r0, r7
  40e170:	b003      	add	sp, #12
  40e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e176:	07d9      	lsls	r1, r3, #31
  40e178:	d442      	bmi.n	40e200 <_realloc_r+0x18c>
  40e17a:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40e17e:	ebc3 0a08 	rsb	sl, r3, r8
  40e182:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e186:	f023 0303 	bic.w	r3, r3, #3
  40e18a:	442b      	add	r3, r5
  40e18c:	4293      	cmp	r3, r2
  40e18e:	db37      	blt.n	40e200 <_realloc_r+0x18c>
  40e190:	4657      	mov	r7, sl
  40e192:	1f2a      	subs	r2, r5, #4
  40e194:	f8da 100c 	ldr.w	r1, [sl, #12]
  40e198:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40e19c:	2a24      	cmp	r2, #36	; 0x24
  40e19e:	60c1      	str	r1, [r0, #12]
  40e1a0:	6088      	str	r0, [r1, #8]
  40e1a2:	f200 80c6 	bhi.w	40e332 <_realloc_r+0x2be>
  40e1a6:	2a13      	cmp	r2, #19
  40e1a8:	f240 80ff 	bls.w	40e3aa <_realloc_r+0x336>
  40e1ac:	6831      	ldr	r1, [r6, #0]
  40e1ae:	2a1b      	cmp	r2, #27
  40e1b0:	f8ca 1008 	str.w	r1, [sl, #8]
  40e1b4:	6871      	ldr	r1, [r6, #4]
  40e1b6:	f8ca 100c 	str.w	r1, [sl, #12]
  40e1ba:	f200 810d 	bhi.w	40e3d8 <_realloc_r+0x364>
  40e1be:	3608      	adds	r6, #8
  40e1c0:	f10a 0210 	add.w	r2, sl, #16
  40e1c4:	6831      	ldr	r1, [r6, #0]
  40e1c6:	461d      	mov	r5, r3
  40e1c8:	46d0      	mov	r8, sl
  40e1ca:	6011      	str	r1, [r2, #0]
  40e1cc:	6873      	ldr	r3, [r6, #4]
  40e1ce:	6053      	str	r3, [r2, #4]
  40e1d0:	68b3      	ldr	r3, [r6, #8]
  40e1d2:	6093      	str	r3, [r2, #8]
  40e1d4:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e1d8:	e7b8      	b.n	40e14c <_realloc_r+0xd8>
  40e1da:	eb08 0504 	add.w	r5, r8, r4
  40e1de:	f042 0601 	orr.w	r6, r2, #1
  40e1e2:	431c      	orrs	r4, r3
  40e1e4:	4648      	mov	r0, r9
  40e1e6:	442a      	add	r2, r5
  40e1e8:	f105 0108 	add.w	r1, r5, #8
  40e1ec:	f8c8 4004 	str.w	r4, [r8, #4]
  40e1f0:	606e      	str	r6, [r5, #4]
  40e1f2:	6853      	ldr	r3, [r2, #4]
  40e1f4:	f043 0301 	orr.w	r3, r3, #1
  40e1f8:	6053      	str	r3, [r2, #4]
  40e1fa:	f7ff f873 	bl	40d2e4 <_free_r>
  40e1fe:	e7b3      	b.n	40e168 <_realloc_r+0xf4>
  40e200:	4639      	mov	r1, r7
  40e202:	4648      	mov	r0, r9
  40e204:	f7fa fe80 	bl	408f08 <_malloc_r>
  40e208:	4607      	mov	r7, r0
  40e20a:	2800      	cmp	r0, #0
  40e20c:	d0ac      	beq.n	40e168 <_realloc_r+0xf4>
  40e20e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40e212:	f1a0 0108 	sub.w	r1, r0, #8
  40e216:	f023 0201 	bic.w	r2, r3, #1
  40e21a:	4442      	add	r2, r8
  40e21c:	4291      	cmp	r1, r2
  40e21e:	f000 80b4 	beq.w	40e38a <_realloc_r+0x316>
  40e222:	1f2a      	subs	r2, r5, #4
  40e224:	2a24      	cmp	r2, #36	; 0x24
  40e226:	f200 80a1 	bhi.w	40e36c <_realloc_r+0x2f8>
  40e22a:	2a13      	cmp	r2, #19
  40e22c:	d86a      	bhi.n	40e304 <_realloc_r+0x290>
  40e22e:	4603      	mov	r3, r0
  40e230:	4632      	mov	r2, r6
  40e232:	6811      	ldr	r1, [r2, #0]
  40e234:	6019      	str	r1, [r3, #0]
  40e236:	6851      	ldr	r1, [r2, #4]
  40e238:	6059      	str	r1, [r3, #4]
  40e23a:	6892      	ldr	r2, [r2, #8]
  40e23c:	609a      	str	r2, [r3, #8]
  40e23e:	4631      	mov	r1, r6
  40e240:	4648      	mov	r0, r9
  40e242:	f7ff f84f 	bl	40d2e4 <_free_r>
  40e246:	e78f      	b.n	40e168 <_realloc_r+0xf4>
  40e248:	4611      	mov	r1, r2
  40e24a:	b003      	add	sp, #12
  40e24c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e250:	f7fa be5a 	b.w	408f08 <_malloc_r>
  40e254:	68ca      	ldr	r2, [r1, #12]
  40e256:	4637      	mov	r7, r6
  40e258:	6889      	ldr	r1, [r1, #8]
  40e25a:	4605      	mov	r5, r0
  40e25c:	60ca      	str	r2, [r1, #12]
  40e25e:	6091      	str	r1, [r2, #8]
  40e260:	e774      	b.n	40e14c <_realloc_r+0xd8>
  40e262:	230c      	movs	r3, #12
  40e264:	2000      	movs	r0, #0
  40e266:	f8c9 3000 	str.w	r3, [r9]
  40e26a:	e781      	b.n	40e170 <_realloc_r+0xfc>
  40e26c:	6841      	ldr	r1, [r0, #4]
  40e26e:	f104 0010 	add.w	r0, r4, #16
  40e272:	f021 0103 	bic.w	r1, r1, #3
  40e276:	4429      	add	r1, r5
  40e278:	4281      	cmp	r1, r0
  40e27a:	da63      	bge.n	40e344 <_realloc_r+0x2d0>
  40e27c:	07db      	lsls	r3, r3, #31
  40e27e:	d4bf      	bmi.n	40e200 <_realloc_r+0x18c>
  40e280:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40e284:	ebc3 0a08 	rsb	sl, r3, r8
  40e288:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e28c:	f023 0303 	bic.w	r3, r3, #3
  40e290:	eb01 0c03 	add.w	ip, r1, r3
  40e294:	4560      	cmp	r0, ip
  40e296:	f73f af78 	bgt.w	40e18a <_realloc_r+0x116>
  40e29a:	4657      	mov	r7, sl
  40e29c:	1f2a      	subs	r2, r5, #4
  40e29e:	f8da 300c 	ldr.w	r3, [sl, #12]
  40e2a2:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40e2a6:	2a24      	cmp	r2, #36	; 0x24
  40e2a8:	60cb      	str	r3, [r1, #12]
  40e2aa:	6099      	str	r1, [r3, #8]
  40e2ac:	f200 80b8 	bhi.w	40e420 <_realloc_r+0x3ac>
  40e2b0:	2a13      	cmp	r2, #19
  40e2b2:	f240 80a8 	bls.w	40e406 <_realloc_r+0x392>
  40e2b6:	6833      	ldr	r3, [r6, #0]
  40e2b8:	2a1b      	cmp	r2, #27
  40e2ba:	f8ca 3008 	str.w	r3, [sl, #8]
  40e2be:	6873      	ldr	r3, [r6, #4]
  40e2c0:	f8ca 300c 	str.w	r3, [sl, #12]
  40e2c4:	f200 80b5 	bhi.w	40e432 <_realloc_r+0x3be>
  40e2c8:	3608      	adds	r6, #8
  40e2ca:	f10a 0310 	add.w	r3, sl, #16
  40e2ce:	6832      	ldr	r2, [r6, #0]
  40e2d0:	601a      	str	r2, [r3, #0]
  40e2d2:	6872      	ldr	r2, [r6, #4]
  40e2d4:	605a      	str	r2, [r3, #4]
  40e2d6:	68b2      	ldr	r2, [r6, #8]
  40e2d8:	609a      	str	r2, [r3, #8]
  40e2da:	ebc4 030c 	rsb	r3, r4, ip
  40e2de:	eb0a 0204 	add.w	r2, sl, r4
  40e2e2:	4648      	mov	r0, r9
  40e2e4:	f043 0301 	orr.w	r3, r3, #1
  40e2e8:	f8cb 2008 	str.w	r2, [fp, #8]
  40e2ec:	6053      	str	r3, [r2, #4]
  40e2ee:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e2f2:	f003 0301 	and.w	r3, r3, #1
  40e2f6:	431c      	orrs	r4, r3
  40e2f8:	f8ca 4004 	str.w	r4, [sl, #4]
  40e2fc:	f7fb f99c 	bl	409638 <__malloc_unlock>
  40e300:	4638      	mov	r0, r7
  40e302:	e735      	b.n	40e170 <_realloc_r+0xfc>
  40e304:	6833      	ldr	r3, [r6, #0]
  40e306:	2a1b      	cmp	r2, #27
  40e308:	6003      	str	r3, [r0, #0]
  40e30a:	6873      	ldr	r3, [r6, #4]
  40e30c:	6043      	str	r3, [r0, #4]
  40e30e:	d831      	bhi.n	40e374 <_realloc_r+0x300>
  40e310:	f100 0308 	add.w	r3, r0, #8
  40e314:	f106 0208 	add.w	r2, r6, #8
  40e318:	e78b      	b.n	40e232 <_realloc_r+0x1be>
  40e31a:	463b      	mov	r3, r7
  40e31c:	6832      	ldr	r2, [r6, #0]
  40e31e:	4675      	mov	r5, lr
  40e320:	46d0      	mov	r8, sl
  40e322:	601a      	str	r2, [r3, #0]
  40e324:	6872      	ldr	r2, [r6, #4]
  40e326:	605a      	str	r2, [r3, #4]
  40e328:	68b2      	ldr	r2, [r6, #8]
  40e32a:	609a      	str	r2, [r3, #8]
  40e32c:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e330:	e70c      	b.n	40e14c <_realloc_r+0xd8>
  40e332:	4631      	mov	r1, r6
  40e334:	4638      	mov	r0, r7
  40e336:	461d      	mov	r5, r3
  40e338:	46d0      	mov	r8, sl
  40e33a:	f7ff fb2d 	bl	40d998 <memmove>
  40e33e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e342:	e703      	b.n	40e14c <_realloc_r+0xd8>
  40e344:	1b0b      	subs	r3, r1, r4
  40e346:	eb08 0204 	add.w	r2, r8, r4
  40e34a:	4648      	mov	r0, r9
  40e34c:	f043 0301 	orr.w	r3, r3, #1
  40e350:	f8cb 2008 	str.w	r2, [fp, #8]
  40e354:	6053      	str	r3, [r2, #4]
  40e356:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40e35a:	f003 0301 	and.w	r3, r3, #1
  40e35e:	431c      	orrs	r4, r3
  40e360:	f846 4c04 	str.w	r4, [r6, #-4]
  40e364:	f7fb f968 	bl	409638 <__malloc_unlock>
  40e368:	4630      	mov	r0, r6
  40e36a:	e701      	b.n	40e170 <_realloc_r+0xfc>
  40e36c:	4631      	mov	r1, r6
  40e36e:	f7ff fb13 	bl	40d998 <memmove>
  40e372:	e764      	b.n	40e23e <_realloc_r+0x1ca>
  40e374:	68b3      	ldr	r3, [r6, #8]
  40e376:	2a24      	cmp	r2, #36	; 0x24
  40e378:	6083      	str	r3, [r0, #8]
  40e37a:	68f3      	ldr	r3, [r6, #12]
  40e37c:	60c3      	str	r3, [r0, #12]
  40e37e:	d022      	beq.n	40e3c6 <_realloc_r+0x352>
  40e380:	f100 0310 	add.w	r3, r0, #16
  40e384:	f106 0210 	add.w	r2, r6, #16
  40e388:	e753      	b.n	40e232 <_realloc_r+0x1be>
  40e38a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40e38e:	4637      	mov	r7, r6
  40e390:	f022 0203 	bic.w	r2, r2, #3
  40e394:	4415      	add	r5, r2
  40e396:	e6d9      	b.n	40e14c <_realloc_r+0xd8>
  40e398:	4631      	mov	r1, r6
  40e39a:	4638      	mov	r0, r7
  40e39c:	4675      	mov	r5, lr
  40e39e:	46d0      	mov	r8, sl
  40e3a0:	f7ff fafa 	bl	40d998 <memmove>
  40e3a4:	f8da 3004 	ldr.w	r3, [sl, #4]
  40e3a8:	e6d0      	b.n	40e14c <_realloc_r+0xd8>
  40e3aa:	463a      	mov	r2, r7
  40e3ac:	e70a      	b.n	40e1c4 <_realloc_r+0x150>
  40e3ae:	68b3      	ldr	r3, [r6, #8]
  40e3b0:	2a24      	cmp	r2, #36	; 0x24
  40e3b2:	f8ca 3010 	str.w	r3, [sl, #16]
  40e3b6:	68f3      	ldr	r3, [r6, #12]
  40e3b8:	f8ca 3014 	str.w	r3, [sl, #20]
  40e3bc:	d018      	beq.n	40e3f0 <_realloc_r+0x37c>
  40e3be:	3610      	adds	r6, #16
  40e3c0:	f10a 0318 	add.w	r3, sl, #24
  40e3c4:	e7aa      	b.n	40e31c <_realloc_r+0x2a8>
  40e3c6:	6931      	ldr	r1, [r6, #16]
  40e3c8:	f100 0318 	add.w	r3, r0, #24
  40e3cc:	f106 0218 	add.w	r2, r6, #24
  40e3d0:	6101      	str	r1, [r0, #16]
  40e3d2:	6971      	ldr	r1, [r6, #20]
  40e3d4:	6141      	str	r1, [r0, #20]
  40e3d6:	e72c      	b.n	40e232 <_realloc_r+0x1be>
  40e3d8:	68b1      	ldr	r1, [r6, #8]
  40e3da:	2a24      	cmp	r2, #36	; 0x24
  40e3dc:	f8ca 1010 	str.w	r1, [sl, #16]
  40e3e0:	68f1      	ldr	r1, [r6, #12]
  40e3e2:	f8ca 1014 	str.w	r1, [sl, #20]
  40e3e6:	d010      	beq.n	40e40a <_realloc_r+0x396>
  40e3e8:	3610      	adds	r6, #16
  40e3ea:	f10a 0218 	add.w	r2, sl, #24
  40e3ee:	e6e9      	b.n	40e1c4 <_realloc_r+0x150>
  40e3f0:	6932      	ldr	r2, [r6, #16]
  40e3f2:	f10a 0320 	add.w	r3, sl, #32
  40e3f6:	3618      	adds	r6, #24
  40e3f8:	f8ca 2018 	str.w	r2, [sl, #24]
  40e3fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40e400:	f8ca 201c 	str.w	r2, [sl, #28]
  40e404:	e78a      	b.n	40e31c <_realloc_r+0x2a8>
  40e406:	463b      	mov	r3, r7
  40e408:	e761      	b.n	40e2ce <_realloc_r+0x25a>
  40e40a:	6931      	ldr	r1, [r6, #16]
  40e40c:	f10a 0220 	add.w	r2, sl, #32
  40e410:	3618      	adds	r6, #24
  40e412:	f8ca 1018 	str.w	r1, [sl, #24]
  40e416:	f856 1c04 	ldr.w	r1, [r6, #-4]
  40e41a:	f8ca 101c 	str.w	r1, [sl, #28]
  40e41e:	e6d1      	b.n	40e1c4 <_realloc_r+0x150>
  40e420:	4631      	mov	r1, r6
  40e422:	4638      	mov	r0, r7
  40e424:	f8cd c004 	str.w	ip, [sp, #4]
  40e428:	f7ff fab6 	bl	40d998 <memmove>
  40e42c:	f8dd c004 	ldr.w	ip, [sp, #4]
  40e430:	e753      	b.n	40e2da <_realloc_r+0x266>
  40e432:	68b3      	ldr	r3, [r6, #8]
  40e434:	2a24      	cmp	r2, #36	; 0x24
  40e436:	f8ca 3010 	str.w	r3, [sl, #16]
  40e43a:	68f3      	ldr	r3, [r6, #12]
  40e43c:	f8ca 3014 	str.w	r3, [sl, #20]
  40e440:	d003      	beq.n	40e44a <_realloc_r+0x3d6>
  40e442:	3610      	adds	r6, #16
  40e444:	f10a 0318 	add.w	r3, sl, #24
  40e448:	e741      	b.n	40e2ce <_realloc_r+0x25a>
  40e44a:	6932      	ldr	r2, [r6, #16]
  40e44c:	f10a 0320 	add.w	r3, sl, #32
  40e450:	3618      	adds	r6, #24
  40e452:	f8ca 2018 	str.w	r2, [sl, #24]
  40e456:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40e45a:	f8ca 201c 	str.w	r2, [sl, #28]
  40e45e:	e736      	b.n	40e2ce <_realloc_r+0x25a>
  40e460:	2040044c 	.word	0x2040044c

0040e464 <_raise_r>:
  40e464:	291f      	cmp	r1, #31
  40e466:	b538      	push	{r3, r4, r5, lr}
  40e468:	4605      	mov	r5, r0
  40e46a:	d821      	bhi.n	40e4b0 <_raise_r+0x4c>
  40e46c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  40e470:	460c      	mov	r4, r1
  40e472:	b19a      	cbz	r2, 40e49c <_raise_r+0x38>
  40e474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  40e478:	b183      	cbz	r3, 40e49c <_raise_r+0x38>
  40e47a:	2b01      	cmp	r3, #1
  40e47c:	d00c      	beq.n	40e498 <_raise_r+0x34>
  40e47e:	1c59      	adds	r1, r3, #1
  40e480:	d006      	beq.n	40e490 <_raise_r+0x2c>
  40e482:	2500      	movs	r5, #0
  40e484:	4620      	mov	r0, r4
  40e486:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  40e48a:	4798      	blx	r3
  40e48c:	4628      	mov	r0, r5
  40e48e:	bd38      	pop	{r3, r4, r5, pc}
  40e490:	2316      	movs	r3, #22
  40e492:	2001      	movs	r0, #1
  40e494:	602b      	str	r3, [r5, #0]
  40e496:	bd38      	pop	{r3, r4, r5, pc}
  40e498:	2000      	movs	r0, #0
  40e49a:	bd38      	pop	{r3, r4, r5, pc}
  40e49c:	4628      	mov	r0, r5
  40e49e:	f000 f829 	bl	40e4f4 <_getpid_r>
  40e4a2:	4622      	mov	r2, r4
  40e4a4:	4601      	mov	r1, r0
  40e4a6:	4628      	mov	r0, r5
  40e4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e4ac:	f000 b80e 	b.w	40e4cc <_kill_r>
  40e4b0:	2316      	movs	r3, #22
  40e4b2:	f04f 30ff 	mov.w	r0, #4294967295
  40e4b6:	602b      	str	r3, [r5, #0]
  40e4b8:	bd38      	pop	{r3, r4, r5, pc}
  40e4ba:	bf00      	nop

0040e4bc <raise>:
  40e4bc:	4b02      	ldr	r3, [pc, #8]	; (40e4c8 <raise+0xc>)
  40e4be:	4601      	mov	r1, r0
  40e4c0:	6818      	ldr	r0, [r3, #0]
  40e4c2:	f7ff bfcf 	b.w	40e464 <_raise_r>
  40e4c6:	bf00      	nop
  40e4c8:	20400448 	.word	0x20400448

0040e4cc <_kill_r>:
  40e4cc:	b538      	push	{r3, r4, r5, lr}
  40e4ce:	2300      	movs	r3, #0
  40e4d0:	4c07      	ldr	r4, [pc, #28]	; (40e4f0 <_kill_r+0x24>)
  40e4d2:	4605      	mov	r5, r0
  40e4d4:	4608      	mov	r0, r1
  40e4d6:	4611      	mov	r1, r2
  40e4d8:	6023      	str	r3, [r4, #0]
  40e4da:	f7f5 f90f 	bl	4036fc <_kill>
  40e4de:	1c43      	adds	r3, r0, #1
  40e4e0:	d000      	beq.n	40e4e4 <_kill_r+0x18>
  40e4e2:	bd38      	pop	{r3, r4, r5, pc}
  40e4e4:	6823      	ldr	r3, [r4, #0]
  40e4e6:	2b00      	cmp	r3, #0
  40e4e8:	d0fb      	beq.n	40e4e2 <_kill_r+0x16>
  40e4ea:	602b      	str	r3, [r5, #0]
  40e4ec:	bd38      	pop	{r3, r4, r5, pc}
  40e4ee:	bf00      	nop
  40e4f0:	2040c600 	.word	0x2040c600

0040e4f4 <_getpid_r>:
  40e4f4:	f7f5 b904 	b.w	403700 <_getpid>

0040e4f8 <__sread>:
  40e4f8:	b510      	push	{r4, lr}
  40e4fa:	460c      	mov	r4, r1
  40e4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e500:	f000 fa76 	bl	40e9f0 <_read_r>
  40e504:	2800      	cmp	r0, #0
  40e506:	db03      	blt.n	40e510 <__sread+0x18>
  40e508:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40e50a:	4403      	add	r3, r0
  40e50c:	6523      	str	r3, [r4, #80]	; 0x50
  40e50e:	bd10      	pop	{r4, pc}
  40e510:	89a3      	ldrh	r3, [r4, #12]
  40e512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40e516:	81a3      	strh	r3, [r4, #12]
  40e518:	bd10      	pop	{r4, pc}
  40e51a:	bf00      	nop

0040e51c <__swrite>:
  40e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e520:	461d      	mov	r5, r3
  40e522:	898b      	ldrh	r3, [r1, #12]
  40e524:	4616      	mov	r6, r2
  40e526:	460c      	mov	r4, r1
  40e528:	05da      	lsls	r2, r3, #23
  40e52a:	4607      	mov	r7, r0
  40e52c:	d506      	bpl.n	40e53c <__swrite+0x20>
  40e52e:	2302      	movs	r3, #2
  40e530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e534:	2200      	movs	r2, #0
  40e536:	f000 fa47 	bl	40e9c8 <_lseek_r>
  40e53a:	89a3      	ldrh	r3, [r4, #12]
  40e53c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40e540:	4638      	mov	r0, r7
  40e542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40e546:	4632      	mov	r2, r6
  40e548:	81a3      	strh	r3, [r4, #12]
  40e54a:	462b      	mov	r3, r5
  40e54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e550:	f000 b928 	b.w	40e7a4 <_write_r>

0040e554 <__sseek>:
  40e554:	b510      	push	{r4, lr}
  40e556:	460c      	mov	r4, r1
  40e558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e55c:	f000 fa34 	bl	40e9c8 <_lseek_r>
  40e560:	1c42      	adds	r2, r0, #1
  40e562:	89a3      	ldrh	r3, [r4, #12]
  40e564:	d004      	beq.n	40e570 <__sseek+0x1c>
  40e566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40e56a:	6520      	str	r0, [r4, #80]	; 0x50
  40e56c:	81a3      	strh	r3, [r4, #12]
  40e56e:	bd10      	pop	{r4, pc}
  40e570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40e574:	81a3      	strh	r3, [r4, #12]
  40e576:	bd10      	pop	{r4, pc}

0040e578 <__sclose>:
  40e578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e57c:	f000 b9aa 	b.w	40e8d4 <_close_r>

0040e580 <__ssprint_r>:
  40e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e584:	6893      	ldr	r3, [r2, #8]
  40e586:	b083      	sub	sp, #12
  40e588:	4691      	mov	r9, r2
  40e58a:	f8d2 8000 	ldr.w	r8, [r2]
  40e58e:	9001      	str	r0, [sp, #4]
  40e590:	2b00      	cmp	r3, #0
  40e592:	d073      	beq.n	40e67c <__ssprint_r+0xfc>
  40e594:	f04f 0b00 	mov.w	fp, #0
  40e598:	460d      	mov	r5, r1
  40e59a:	6808      	ldr	r0, [r1, #0]
  40e59c:	688b      	ldr	r3, [r1, #8]
  40e59e:	465c      	mov	r4, fp
  40e5a0:	2c00      	cmp	r4, #0
  40e5a2:	d046      	beq.n	40e632 <__ssprint_r+0xb2>
  40e5a4:	429c      	cmp	r4, r3
  40e5a6:	461e      	mov	r6, r3
  40e5a8:	469a      	mov	sl, r3
  40e5aa:	d349      	bcc.n	40e640 <__ssprint_r+0xc0>
  40e5ac:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40e5b0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40e5b4:	d02d      	beq.n	40e612 <__ssprint_r+0x92>
  40e5b6:	696b      	ldr	r3, [r5, #20]
  40e5b8:	1c62      	adds	r2, r4, #1
  40e5ba:	6929      	ldr	r1, [r5, #16]
  40e5bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40e5c0:	1a46      	subs	r6, r0, r1
  40e5c2:	4610      	mov	r0, r2
  40e5c4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40e5c8:	4430      	add	r0, r6
  40e5ca:	105f      	asrs	r7, r3, #1
  40e5cc:	4287      	cmp	r7, r0
  40e5ce:	463a      	mov	r2, r7
  40e5d0:	d201      	bcs.n	40e5d6 <__ssprint_r+0x56>
  40e5d2:	4607      	mov	r7, r0
  40e5d4:	4602      	mov	r2, r0
  40e5d6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40e5da:	d034      	beq.n	40e646 <__ssprint_r+0xc6>
  40e5dc:	4611      	mov	r1, r2
  40e5de:	9801      	ldr	r0, [sp, #4]
  40e5e0:	f7fa fc92 	bl	408f08 <_malloc_r>
  40e5e4:	4682      	mov	sl, r0
  40e5e6:	2800      	cmp	r0, #0
  40e5e8:	d04e      	beq.n	40e688 <__ssprint_r+0x108>
  40e5ea:	4632      	mov	r2, r6
  40e5ec:	6929      	ldr	r1, [r5, #16]
  40e5ee:	f7fa ff37 	bl	409460 <memcpy>
  40e5f2:	89aa      	ldrh	r2, [r5, #12]
  40e5f4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40e5f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40e5fc:	81aa      	strh	r2, [r5, #12]
  40e5fe:	eb0a 0006 	add.w	r0, sl, r6
  40e602:	1bba      	subs	r2, r7, r6
  40e604:	f8c5 a010 	str.w	sl, [r5, #16]
  40e608:	4626      	mov	r6, r4
  40e60a:	46a2      	mov	sl, r4
  40e60c:	6028      	str	r0, [r5, #0]
  40e60e:	60aa      	str	r2, [r5, #8]
  40e610:	616f      	str	r7, [r5, #20]
  40e612:	4652      	mov	r2, sl
  40e614:	4659      	mov	r1, fp
  40e616:	f7ff f9bf 	bl	40d998 <memmove>
  40e61a:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40e61e:	68ab      	ldr	r3, [r5, #8]
  40e620:	6828      	ldr	r0, [r5, #0]
  40e622:	1b14      	subs	r4, r2, r4
  40e624:	1b9b      	subs	r3, r3, r6
  40e626:	4450      	add	r0, sl
  40e628:	60ab      	str	r3, [r5, #8]
  40e62a:	6028      	str	r0, [r5, #0]
  40e62c:	f8c9 4008 	str.w	r4, [r9, #8]
  40e630:	b324      	cbz	r4, 40e67c <__ssprint_r+0xfc>
  40e632:	f8d8 b000 	ldr.w	fp, [r8]
  40e636:	f108 0808 	add.w	r8, r8, #8
  40e63a:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40e63e:	e7af      	b.n	40e5a0 <__ssprint_r+0x20>
  40e640:	4626      	mov	r6, r4
  40e642:	46a2      	mov	sl, r4
  40e644:	e7e5      	b.n	40e612 <__ssprint_r+0x92>
  40e646:	9801      	ldr	r0, [sp, #4]
  40e648:	f7ff fd14 	bl	40e074 <_realloc_r>
  40e64c:	4682      	mov	sl, r0
  40e64e:	2800      	cmp	r0, #0
  40e650:	d1d5      	bne.n	40e5fe <__ssprint_r+0x7e>
  40e652:	9c01      	ldr	r4, [sp, #4]
  40e654:	6929      	ldr	r1, [r5, #16]
  40e656:	4620      	mov	r0, r4
  40e658:	f7fe fe44 	bl	40d2e4 <_free_r>
  40e65c:	230c      	movs	r3, #12
  40e65e:	6023      	str	r3, [r4, #0]
  40e660:	89ab      	ldrh	r3, [r5, #12]
  40e662:	2200      	movs	r2, #0
  40e664:	f04f 30ff 	mov.w	r0, #4294967295
  40e668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e66c:	81ab      	strh	r3, [r5, #12]
  40e66e:	f8c9 2008 	str.w	r2, [r9, #8]
  40e672:	f8c9 2004 	str.w	r2, [r9, #4]
  40e676:	b003      	add	sp, #12
  40e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e67c:	2000      	movs	r0, #0
  40e67e:	f8c9 0004 	str.w	r0, [r9, #4]
  40e682:	b003      	add	sp, #12
  40e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e688:	230c      	movs	r3, #12
  40e68a:	9a01      	ldr	r2, [sp, #4]
  40e68c:	6013      	str	r3, [r2, #0]
  40e68e:	e7e7      	b.n	40e660 <__ssprint_r+0xe0>

0040e690 <__swbuf_r>:
  40e690:	b570      	push	{r4, r5, r6, lr}
  40e692:	460d      	mov	r5, r1
  40e694:	4614      	mov	r4, r2
  40e696:	4606      	mov	r6, r0
  40e698:	b110      	cbz	r0, 40e6a0 <__swbuf_r+0x10>
  40e69a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e69c:	2b00      	cmp	r3, #0
  40e69e:	d048      	beq.n	40e732 <__swbuf_r+0xa2>
  40e6a0:	89a2      	ldrh	r2, [r4, #12]
  40e6a2:	69a3      	ldr	r3, [r4, #24]
  40e6a4:	b291      	uxth	r1, r2
  40e6a6:	60a3      	str	r3, [r4, #8]
  40e6a8:	0708      	lsls	r0, r1, #28
  40e6aa:	d538      	bpl.n	40e71e <__swbuf_r+0x8e>
  40e6ac:	6923      	ldr	r3, [r4, #16]
  40e6ae:	2b00      	cmp	r3, #0
  40e6b0:	d035      	beq.n	40e71e <__swbuf_r+0x8e>
  40e6b2:	0489      	lsls	r1, r1, #18
  40e6b4:	b2ed      	uxtb	r5, r5
  40e6b6:	d515      	bpl.n	40e6e4 <__swbuf_r+0x54>
  40e6b8:	6822      	ldr	r2, [r4, #0]
  40e6ba:	6961      	ldr	r1, [r4, #20]
  40e6bc:	1ad3      	subs	r3, r2, r3
  40e6be:	428b      	cmp	r3, r1
  40e6c0:	da1c      	bge.n	40e6fc <__swbuf_r+0x6c>
  40e6c2:	3301      	adds	r3, #1
  40e6c4:	68a1      	ldr	r1, [r4, #8]
  40e6c6:	1c50      	adds	r0, r2, #1
  40e6c8:	3901      	subs	r1, #1
  40e6ca:	6020      	str	r0, [r4, #0]
  40e6cc:	60a1      	str	r1, [r4, #8]
  40e6ce:	7015      	strb	r5, [r2, #0]
  40e6d0:	6962      	ldr	r2, [r4, #20]
  40e6d2:	429a      	cmp	r2, r3
  40e6d4:	d01a      	beq.n	40e70c <__swbuf_r+0x7c>
  40e6d6:	2d0a      	cmp	r5, #10
  40e6d8:	d102      	bne.n	40e6e0 <__swbuf_r+0x50>
  40e6da:	7b23      	ldrb	r3, [r4, #12]
  40e6dc:	07db      	lsls	r3, r3, #31
  40e6de:	d415      	bmi.n	40e70c <__swbuf_r+0x7c>
  40e6e0:	4628      	mov	r0, r5
  40e6e2:	bd70      	pop	{r4, r5, r6, pc}
  40e6e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40e6e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e6ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40e6ee:	81a2      	strh	r2, [r4, #12]
  40e6f0:	6822      	ldr	r2, [r4, #0]
  40e6f2:	6661      	str	r1, [r4, #100]	; 0x64
  40e6f4:	1ad3      	subs	r3, r2, r3
  40e6f6:	6961      	ldr	r1, [r4, #20]
  40e6f8:	428b      	cmp	r3, r1
  40e6fa:	dbe2      	blt.n	40e6c2 <__swbuf_r+0x32>
  40e6fc:	4630      	mov	r0, r6
  40e6fe:	4621      	mov	r1, r4
  40e700:	f7fe fc7e 	bl	40d000 <_fflush_r>
  40e704:	b940      	cbnz	r0, 40e718 <__swbuf_r+0x88>
  40e706:	6822      	ldr	r2, [r4, #0]
  40e708:	2301      	movs	r3, #1
  40e70a:	e7db      	b.n	40e6c4 <__swbuf_r+0x34>
  40e70c:	4630      	mov	r0, r6
  40e70e:	4621      	mov	r1, r4
  40e710:	f7fe fc76 	bl	40d000 <_fflush_r>
  40e714:	2800      	cmp	r0, #0
  40e716:	d0e3      	beq.n	40e6e0 <__swbuf_r+0x50>
  40e718:	f04f 30ff 	mov.w	r0, #4294967295
  40e71c:	bd70      	pop	{r4, r5, r6, pc}
  40e71e:	4630      	mov	r0, r6
  40e720:	4621      	mov	r1, r4
  40e722:	f7fd fb3b 	bl	40bd9c <__swsetup_r>
  40e726:	2800      	cmp	r0, #0
  40e728:	d1f6      	bne.n	40e718 <__swbuf_r+0x88>
  40e72a:	89a2      	ldrh	r2, [r4, #12]
  40e72c:	6923      	ldr	r3, [r4, #16]
  40e72e:	b291      	uxth	r1, r2
  40e730:	e7bf      	b.n	40e6b2 <__swbuf_r+0x22>
  40e732:	f7fe fcff 	bl	40d134 <__sinit>
  40e736:	e7b3      	b.n	40e6a0 <__swbuf_r+0x10>

0040e738 <_wcrtomb_r>:
  40e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e73c:	4605      	mov	r5, r0
  40e73e:	b086      	sub	sp, #24
  40e740:	461e      	mov	r6, r3
  40e742:	460c      	mov	r4, r1
  40e744:	b1a1      	cbz	r1, 40e770 <_wcrtomb_r+0x38>
  40e746:	4b10      	ldr	r3, [pc, #64]	; (40e788 <_wcrtomb_r+0x50>)
  40e748:	4617      	mov	r7, r2
  40e74a:	f8d3 8000 	ldr.w	r8, [r3]
  40e74e:	f7ff f85b 	bl	40d808 <__locale_charset>
  40e752:	9600      	str	r6, [sp, #0]
  40e754:	4603      	mov	r3, r0
  40e756:	4621      	mov	r1, r4
  40e758:	4628      	mov	r0, r5
  40e75a:	463a      	mov	r2, r7
  40e75c:	47c0      	blx	r8
  40e75e:	1c43      	adds	r3, r0, #1
  40e760:	d103      	bne.n	40e76a <_wcrtomb_r+0x32>
  40e762:	2200      	movs	r2, #0
  40e764:	238a      	movs	r3, #138	; 0x8a
  40e766:	6032      	str	r2, [r6, #0]
  40e768:	602b      	str	r3, [r5, #0]
  40e76a:	b006      	add	sp, #24
  40e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e770:	4b05      	ldr	r3, [pc, #20]	; (40e788 <_wcrtomb_r+0x50>)
  40e772:	681f      	ldr	r7, [r3, #0]
  40e774:	f7ff f848 	bl	40d808 <__locale_charset>
  40e778:	9600      	str	r6, [sp, #0]
  40e77a:	4603      	mov	r3, r0
  40e77c:	4622      	mov	r2, r4
  40e77e:	4628      	mov	r0, r5
  40e780:	a903      	add	r1, sp, #12
  40e782:	47b8      	blx	r7
  40e784:	e7eb      	b.n	40e75e <_wcrtomb_r+0x26>
  40e786:	bf00      	nop
  40e788:	204008bc 	.word	0x204008bc

0040e78c <__ascii_wctomb>:
  40e78c:	b119      	cbz	r1, 40e796 <__ascii_wctomb+0xa>
  40e78e:	2aff      	cmp	r2, #255	; 0xff
  40e790:	d803      	bhi.n	40e79a <__ascii_wctomb+0xe>
  40e792:	700a      	strb	r2, [r1, #0]
  40e794:	2101      	movs	r1, #1
  40e796:	4608      	mov	r0, r1
  40e798:	4770      	bx	lr
  40e79a:	238a      	movs	r3, #138	; 0x8a
  40e79c:	f04f 31ff 	mov.w	r1, #4294967295
  40e7a0:	6003      	str	r3, [r0, #0]
  40e7a2:	e7f8      	b.n	40e796 <__ascii_wctomb+0xa>

0040e7a4 <_write_r>:
  40e7a4:	b570      	push	{r4, r5, r6, lr}
  40e7a6:	4c08      	ldr	r4, [pc, #32]	; (40e7c8 <_write_r+0x24>)
  40e7a8:	2500      	movs	r5, #0
  40e7aa:	4606      	mov	r6, r0
  40e7ac:	4608      	mov	r0, r1
  40e7ae:	4611      	mov	r1, r2
  40e7b0:	461a      	mov	r2, r3
  40e7b2:	6025      	str	r5, [r4, #0]
  40e7b4:	f7f4 ff86 	bl	4036c4 <_write>
  40e7b8:	1c43      	adds	r3, r0, #1
  40e7ba:	d000      	beq.n	40e7be <_write_r+0x1a>
  40e7bc:	bd70      	pop	{r4, r5, r6, pc}
  40e7be:	6823      	ldr	r3, [r4, #0]
  40e7c0:	2b00      	cmp	r3, #0
  40e7c2:	d0fb      	beq.n	40e7bc <_write_r+0x18>
  40e7c4:	6033      	str	r3, [r6, #0]
  40e7c6:	bd70      	pop	{r4, r5, r6, pc}
  40e7c8:	2040c600 	.word	0x2040c600

0040e7cc <__register_exitproc>:
  40e7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e7d0:	4c26      	ldr	r4, [pc, #152]	; (40e86c <__register_exitproc+0xa0>)
  40e7d2:	4606      	mov	r6, r0
  40e7d4:	4688      	mov	r8, r1
  40e7d6:	4691      	mov	r9, r2
  40e7d8:	6825      	ldr	r5, [r4, #0]
  40e7da:	469a      	mov	sl, r3
  40e7dc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40e7e0:	2c00      	cmp	r4, #0
  40e7e2:	d03a      	beq.n	40e85a <__register_exitproc+0x8e>
  40e7e4:	6860      	ldr	r0, [r4, #4]
  40e7e6:	281f      	cmp	r0, #31
  40e7e8:	dc19      	bgt.n	40e81e <__register_exitproc+0x52>
  40e7ea:	1c41      	adds	r1, r0, #1
  40e7ec:	b186      	cbz	r6, 40e810 <__register_exitproc+0x44>
  40e7ee:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40e7f2:	2201      	movs	r2, #1
  40e7f4:	2e02      	cmp	r6, #2
  40e7f6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40e7fa:	fa02 f200 	lsl.w	r2, r2, r0
  40e7fe:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40e802:	ea43 0302 	orr.w	r3, r3, r2
  40e806:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40e80a:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40e80e:	d01e      	beq.n	40e84e <__register_exitproc+0x82>
  40e810:	1c83      	adds	r3, r0, #2
  40e812:	6061      	str	r1, [r4, #4]
  40e814:	2000      	movs	r0, #0
  40e816:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40e81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e81e:	4b14      	ldr	r3, [pc, #80]	; (40e870 <__register_exitproc+0xa4>)
  40e820:	b303      	cbz	r3, 40e864 <__register_exitproc+0x98>
  40e822:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40e826:	f7fa fb67 	bl	408ef8 <malloc>
  40e82a:	4604      	mov	r4, r0
  40e82c:	b1d0      	cbz	r0, 40e864 <__register_exitproc+0x98>
  40e82e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40e832:	2700      	movs	r7, #0
  40e834:	2101      	movs	r1, #1
  40e836:	6003      	str	r3, [r0, #0]
  40e838:	4638      	mov	r0, r7
  40e83a:	6067      	str	r7, [r4, #4]
  40e83c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40e840:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40e844:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40e848:	2e00      	cmp	r6, #0
  40e84a:	d0e1      	beq.n	40e810 <__register_exitproc+0x44>
  40e84c:	e7cf      	b.n	40e7ee <__register_exitproc+0x22>
  40e84e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40e852:	431a      	orrs	r2, r3
  40e854:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40e858:	e7da      	b.n	40e810 <__register_exitproc+0x44>
  40e85a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40e85e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40e862:	e7bf      	b.n	40e7e4 <__register_exitproc+0x18>
  40e864:	f04f 30ff 	mov.w	r0, #4294967295
  40e868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e86c:	0040fc7c 	.word	0x0040fc7c
  40e870:	00408ef9 	.word	0x00408ef9

0040e874 <_calloc_r>:
  40e874:	b510      	push	{r4, lr}
  40e876:	fb02 f101 	mul.w	r1, r2, r1
  40e87a:	f7fa fb45 	bl	408f08 <_malloc_r>
  40e87e:	4604      	mov	r4, r0
  40e880:	b168      	cbz	r0, 40e89e <_calloc_r+0x2a>
  40e882:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40e886:	f022 0203 	bic.w	r2, r2, #3
  40e88a:	3a04      	subs	r2, #4
  40e88c:	2a24      	cmp	r2, #36	; 0x24
  40e88e:	d814      	bhi.n	40e8ba <_calloc_r+0x46>
  40e890:	2a13      	cmp	r2, #19
  40e892:	d806      	bhi.n	40e8a2 <_calloc_r+0x2e>
  40e894:	4603      	mov	r3, r0
  40e896:	2200      	movs	r2, #0
  40e898:	601a      	str	r2, [r3, #0]
  40e89a:	605a      	str	r2, [r3, #4]
  40e89c:	609a      	str	r2, [r3, #8]
  40e89e:	4620      	mov	r0, r4
  40e8a0:	bd10      	pop	{r4, pc}
  40e8a2:	2100      	movs	r1, #0
  40e8a4:	2a1b      	cmp	r2, #27
  40e8a6:	6001      	str	r1, [r0, #0]
  40e8a8:	6041      	str	r1, [r0, #4]
  40e8aa:	d90b      	bls.n	40e8c4 <_calloc_r+0x50>
  40e8ac:	2a24      	cmp	r2, #36	; 0x24
  40e8ae:	6081      	str	r1, [r0, #8]
  40e8b0:	60c1      	str	r1, [r0, #12]
  40e8b2:	d00a      	beq.n	40e8ca <_calloc_r+0x56>
  40e8b4:	f100 0310 	add.w	r3, r0, #16
  40e8b8:	e7ed      	b.n	40e896 <_calloc_r+0x22>
  40e8ba:	2100      	movs	r1, #0
  40e8bc:	f7fa fe6a 	bl	409594 <memset>
  40e8c0:	4620      	mov	r0, r4
  40e8c2:	bd10      	pop	{r4, pc}
  40e8c4:	f100 0308 	add.w	r3, r0, #8
  40e8c8:	e7e5      	b.n	40e896 <_calloc_r+0x22>
  40e8ca:	6101      	str	r1, [r0, #16]
  40e8cc:	f100 0318 	add.w	r3, r0, #24
  40e8d0:	6141      	str	r1, [r0, #20]
  40e8d2:	e7e0      	b.n	40e896 <_calloc_r+0x22>

0040e8d4 <_close_r>:
  40e8d4:	b538      	push	{r3, r4, r5, lr}
  40e8d6:	2300      	movs	r3, #0
  40e8d8:	4c06      	ldr	r4, [pc, #24]	; (40e8f4 <_close_r+0x20>)
  40e8da:	4605      	mov	r5, r0
  40e8dc:	4608      	mov	r0, r1
  40e8de:	6023      	str	r3, [r4, #0]
  40e8e0:	f7f4 feec 	bl	4036bc <_close>
  40e8e4:	1c43      	adds	r3, r0, #1
  40e8e6:	d000      	beq.n	40e8ea <_close_r+0x16>
  40e8e8:	bd38      	pop	{r3, r4, r5, pc}
  40e8ea:	6823      	ldr	r3, [r4, #0]
  40e8ec:	2b00      	cmp	r3, #0
  40e8ee:	d0fb      	beq.n	40e8e8 <_close_r+0x14>
  40e8f0:	602b      	str	r3, [r5, #0]
  40e8f2:	bd38      	pop	{r3, r4, r5, pc}
  40e8f4:	2040c600 	.word	0x2040c600

0040e8f8 <_fclose_r>:
  40e8f8:	2900      	cmp	r1, #0
  40e8fa:	d03d      	beq.n	40e978 <_fclose_r+0x80>
  40e8fc:	b570      	push	{r4, r5, r6, lr}
  40e8fe:	4605      	mov	r5, r0
  40e900:	460c      	mov	r4, r1
  40e902:	b108      	cbz	r0, 40e908 <_fclose_r+0x10>
  40e904:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e906:	b37b      	cbz	r3, 40e968 <_fclose_r+0x70>
  40e908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e90c:	b90b      	cbnz	r3, 40e912 <_fclose_r+0x1a>
  40e90e:	2000      	movs	r0, #0
  40e910:	bd70      	pop	{r4, r5, r6, pc}
  40e912:	4628      	mov	r0, r5
  40e914:	4621      	mov	r1, r4
  40e916:	f7fe facf 	bl	40ceb8 <__sflush_r>
  40e91a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40e91c:	4606      	mov	r6, r0
  40e91e:	b133      	cbz	r3, 40e92e <_fclose_r+0x36>
  40e920:	4628      	mov	r0, r5
  40e922:	69e1      	ldr	r1, [r4, #28]
  40e924:	4798      	blx	r3
  40e926:	2800      	cmp	r0, #0
  40e928:	bfb8      	it	lt
  40e92a:	f04f 36ff 	movlt.w	r6, #4294967295
  40e92e:	89a3      	ldrh	r3, [r4, #12]
  40e930:	061b      	lsls	r3, r3, #24
  40e932:	d41c      	bmi.n	40e96e <_fclose_r+0x76>
  40e934:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e936:	b141      	cbz	r1, 40e94a <_fclose_r+0x52>
  40e938:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e93c:	4299      	cmp	r1, r3
  40e93e:	d002      	beq.n	40e946 <_fclose_r+0x4e>
  40e940:	4628      	mov	r0, r5
  40e942:	f7fe fccf 	bl	40d2e4 <_free_r>
  40e946:	2300      	movs	r3, #0
  40e948:	6323      	str	r3, [r4, #48]	; 0x30
  40e94a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40e94c:	b121      	cbz	r1, 40e958 <_fclose_r+0x60>
  40e94e:	4628      	mov	r0, r5
  40e950:	f7fe fcc8 	bl	40d2e4 <_free_r>
  40e954:	2300      	movs	r3, #0
  40e956:	6463      	str	r3, [r4, #68]	; 0x44
  40e958:	f7fe fbf2 	bl	40d140 <__sfp_lock_acquire>
  40e95c:	2300      	movs	r3, #0
  40e95e:	81a3      	strh	r3, [r4, #12]
  40e960:	f7fe fbf0 	bl	40d144 <__sfp_lock_release>
  40e964:	4630      	mov	r0, r6
  40e966:	bd70      	pop	{r4, r5, r6, pc}
  40e968:	f7fe fbe4 	bl	40d134 <__sinit>
  40e96c:	e7cc      	b.n	40e908 <_fclose_r+0x10>
  40e96e:	4628      	mov	r0, r5
  40e970:	6921      	ldr	r1, [r4, #16]
  40e972:	f7fe fcb7 	bl	40d2e4 <_free_r>
  40e976:	e7dd      	b.n	40e934 <_fclose_r+0x3c>
  40e978:	2000      	movs	r0, #0
  40e97a:	4770      	bx	lr

0040e97c <_fstat_r>:
  40e97c:	b538      	push	{r3, r4, r5, lr}
  40e97e:	2300      	movs	r3, #0
  40e980:	4c07      	ldr	r4, [pc, #28]	; (40e9a0 <_fstat_r+0x24>)
  40e982:	4605      	mov	r5, r0
  40e984:	4608      	mov	r0, r1
  40e986:	4611      	mov	r1, r2
  40e988:	6023      	str	r3, [r4, #0]
  40e98a:	f7f4 fea3 	bl	4036d4 <_fstat>
  40e98e:	1c43      	adds	r3, r0, #1
  40e990:	d000      	beq.n	40e994 <_fstat_r+0x18>
  40e992:	bd38      	pop	{r3, r4, r5, pc}
  40e994:	6823      	ldr	r3, [r4, #0]
  40e996:	2b00      	cmp	r3, #0
  40e998:	d0fb      	beq.n	40e992 <_fstat_r+0x16>
  40e99a:	602b      	str	r3, [r5, #0]
  40e99c:	bd38      	pop	{r3, r4, r5, pc}
  40e99e:	bf00      	nop
  40e9a0:	2040c600 	.word	0x2040c600

0040e9a4 <_isatty_r>:
  40e9a4:	b538      	push	{r3, r4, r5, lr}
  40e9a6:	2300      	movs	r3, #0
  40e9a8:	4c06      	ldr	r4, [pc, #24]	; (40e9c4 <_isatty_r+0x20>)
  40e9aa:	4605      	mov	r5, r0
  40e9ac:	4608      	mov	r0, r1
  40e9ae:	6023      	str	r3, [r4, #0]
  40e9b0:	f7f4 fe96 	bl	4036e0 <_isatty>
  40e9b4:	1c43      	adds	r3, r0, #1
  40e9b6:	d000      	beq.n	40e9ba <_isatty_r+0x16>
  40e9b8:	bd38      	pop	{r3, r4, r5, pc}
  40e9ba:	6823      	ldr	r3, [r4, #0]
  40e9bc:	2b00      	cmp	r3, #0
  40e9be:	d0fb      	beq.n	40e9b8 <_isatty_r+0x14>
  40e9c0:	602b      	str	r3, [r5, #0]
  40e9c2:	bd38      	pop	{r3, r4, r5, pc}
  40e9c4:	2040c600 	.word	0x2040c600

0040e9c8 <_lseek_r>:
  40e9c8:	b570      	push	{r4, r5, r6, lr}
  40e9ca:	4c08      	ldr	r4, [pc, #32]	; (40e9ec <_lseek_r+0x24>)
  40e9cc:	2500      	movs	r5, #0
  40e9ce:	4606      	mov	r6, r0
  40e9d0:	4608      	mov	r0, r1
  40e9d2:	4611      	mov	r1, r2
  40e9d4:	461a      	mov	r2, r3
  40e9d6:	6025      	str	r5, [r4, #0]
  40e9d8:	f7f4 fe84 	bl	4036e4 <_lseek>
  40e9dc:	1c43      	adds	r3, r0, #1
  40e9de:	d000      	beq.n	40e9e2 <_lseek_r+0x1a>
  40e9e0:	bd70      	pop	{r4, r5, r6, pc}
  40e9e2:	6823      	ldr	r3, [r4, #0]
  40e9e4:	2b00      	cmp	r3, #0
  40e9e6:	d0fb      	beq.n	40e9e0 <_lseek_r+0x18>
  40e9e8:	6033      	str	r3, [r6, #0]
  40e9ea:	bd70      	pop	{r4, r5, r6, pc}
  40e9ec:	2040c600 	.word	0x2040c600

0040e9f0 <_read_r>:
  40e9f0:	b570      	push	{r4, r5, r6, lr}
  40e9f2:	4c08      	ldr	r4, [pc, #32]	; (40ea14 <_read_r+0x24>)
  40e9f4:	2500      	movs	r5, #0
  40e9f6:	4606      	mov	r6, r0
  40e9f8:	4608      	mov	r0, r1
  40e9fa:	4611      	mov	r1, r2
  40e9fc:	461a      	mov	r2, r3
  40e9fe:	6025      	str	r5, [r4, #0]
  40ea00:	f7f4 fe64 	bl	4036cc <_read>
  40ea04:	1c43      	adds	r3, r0, #1
  40ea06:	d000      	beq.n	40ea0a <_read_r+0x1a>
  40ea08:	bd70      	pop	{r4, r5, r6, pc}
  40ea0a:	6823      	ldr	r3, [r4, #0]
  40ea0c:	2b00      	cmp	r3, #0
  40ea0e:	d0fb      	beq.n	40ea08 <_read_r+0x18>
  40ea10:	6033      	str	r3, [r6, #0]
  40ea12:	bd70      	pop	{r4, r5, r6, pc}
  40ea14:	2040c600 	.word	0x2040c600

0040ea18 <__aeabi_uldivmod>:
  40ea18:	b953      	cbnz	r3, 40ea30 <__aeabi_uldivmod+0x18>
  40ea1a:	b94a      	cbnz	r2, 40ea30 <__aeabi_uldivmod+0x18>
  40ea1c:	2900      	cmp	r1, #0
  40ea1e:	bf08      	it	eq
  40ea20:	2800      	cmpeq	r0, #0
  40ea22:	bf1c      	itt	ne
  40ea24:	f04f 31ff 	movne.w	r1, #4294967295
  40ea28:	f04f 30ff 	movne.w	r0, #4294967295
  40ea2c:	f000 b83c 	b.w	40eaa8 <__aeabi_idiv0>
  40ea30:	b082      	sub	sp, #8
  40ea32:	46ec      	mov	ip, sp
  40ea34:	e92d 5000 	stmdb	sp!, {ip, lr}
  40ea38:	f000 f81e 	bl	40ea78 <__gnu_uldivmod_helper>
  40ea3c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40ea40:	b002      	add	sp, #8
  40ea42:	bc0c      	pop	{r2, r3}
  40ea44:	4770      	bx	lr
  40ea46:	bf00      	nop

0040ea48 <__gnu_ldivmod_helper>:
  40ea48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ea4c:	4690      	mov	r8, r2
  40ea4e:	4606      	mov	r6, r0
  40ea50:	460f      	mov	r7, r1
  40ea52:	461d      	mov	r5, r3
  40ea54:	9c06      	ldr	r4, [sp, #24]
  40ea56:	f000 f829 	bl	40eaac <__divdi3>
  40ea5a:	fb08 fc01 	mul.w	ip, r8, r1
  40ea5e:	4686      	mov	lr, r0
  40ea60:	fba8 2300 	umull	r2, r3, r8, r0
  40ea64:	fb00 c505 	mla	r5, r0, r5, ip
  40ea68:	1ab2      	subs	r2, r6, r2
  40ea6a:	442b      	add	r3, r5
  40ea6c:	eb67 0303 	sbc.w	r3, r7, r3
  40ea70:	e9c4 2300 	strd	r2, r3, [r4]
  40ea74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040ea78 <__gnu_uldivmod_helper>:
  40ea78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ea7c:	461d      	mov	r5, r3
  40ea7e:	4617      	mov	r7, r2
  40ea80:	4680      	mov	r8, r0
  40ea82:	4689      	mov	r9, r1
  40ea84:	9e08      	ldr	r6, [sp, #32]
  40ea86:	f000 f953 	bl	40ed30 <__udivdi3>
  40ea8a:	fb00 f305 	mul.w	r3, r0, r5
  40ea8e:	fba0 4507 	umull	r4, r5, r0, r7
  40ea92:	fb07 3701 	mla	r7, r7, r1, r3
  40ea96:	ebb8 0404 	subs.w	r4, r8, r4
  40ea9a:	443d      	add	r5, r7
  40ea9c:	eb69 0505 	sbc.w	r5, r9, r5
  40eaa0:	e9c6 4500 	strd	r4, r5, [r6]
  40eaa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040eaa8 <__aeabi_idiv0>:
  40eaa8:	4770      	bx	lr
  40eaaa:	bf00      	nop

0040eaac <__divdi3>:
  40eaac:	2900      	cmp	r1, #0
  40eaae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40eab2:	f2c0 80a2 	blt.w	40ebfa <__divdi3+0x14e>
  40eab6:	2600      	movs	r6, #0
  40eab8:	2b00      	cmp	r3, #0
  40eaba:	f2c0 8098 	blt.w	40ebee <__divdi3+0x142>
  40eabe:	468c      	mov	ip, r1
  40eac0:	4690      	mov	r8, r2
  40eac2:	469e      	mov	lr, r3
  40eac4:	4615      	mov	r5, r2
  40eac6:	4604      	mov	r4, r0
  40eac8:	460f      	mov	r7, r1
  40eaca:	bbcb      	cbnz	r3, 40eb40 <__divdi3+0x94>
  40eacc:	428a      	cmp	r2, r1
  40eace:	d956      	bls.n	40eb7e <__divdi3+0xd2>
  40ead0:	fab2 f382 	clz	r3, r2
  40ead4:	b13b      	cbz	r3, 40eae6 <__divdi3+0x3a>
  40ead6:	f1c3 0220 	rsb	r2, r3, #32
  40eada:	409f      	lsls	r7, r3
  40eadc:	409d      	lsls	r5, r3
  40eade:	409c      	lsls	r4, r3
  40eae0:	fa20 f202 	lsr.w	r2, r0, r2
  40eae4:	4317      	orrs	r7, r2
  40eae6:	0c28      	lsrs	r0, r5, #16
  40eae8:	0c22      	lsrs	r2, r4, #16
  40eaea:	fa1f fe85 	uxth.w	lr, r5
  40eaee:	fbb7 f1f0 	udiv	r1, r7, r0
  40eaf2:	fb00 7711 	mls	r7, r0, r1, r7
  40eaf6:	fb0e f301 	mul.w	r3, lr, r1
  40eafa:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40eafe:	42bb      	cmp	r3, r7
  40eb00:	d907      	bls.n	40eb12 <__divdi3+0x66>
  40eb02:	197f      	adds	r7, r7, r5
  40eb04:	f080 8101 	bcs.w	40ed0a <__divdi3+0x25e>
  40eb08:	42bb      	cmp	r3, r7
  40eb0a:	f240 80fe 	bls.w	40ed0a <__divdi3+0x25e>
  40eb0e:	3902      	subs	r1, #2
  40eb10:	442f      	add	r7, r5
  40eb12:	1aff      	subs	r7, r7, r3
  40eb14:	b2a4      	uxth	r4, r4
  40eb16:	fbb7 f3f0 	udiv	r3, r7, r0
  40eb1a:	fb00 7713 	mls	r7, r0, r3, r7
  40eb1e:	fb0e fe03 	mul.w	lr, lr, r3
  40eb22:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40eb26:	45be      	cmp	lr, r7
  40eb28:	d906      	bls.n	40eb38 <__divdi3+0x8c>
  40eb2a:	197f      	adds	r7, r7, r5
  40eb2c:	f080 80eb 	bcs.w	40ed06 <__divdi3+0x25a>
  40eb30:	45be      	cmp	lr, r7
  40eb32:	f240 80e8 	bls.w	40ed06 <__divdi3+0x25a>
  40eb36:	3b02      	subs	r3, #2
  40eb38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40eb3c:	2200      	movs	r2, #0
  40eb3e:	e003      	b.n	40eb48 <__divdi3+0x9c>
  40eb40:	428b      	cmp	r3, r1
  40eb42:	d90f      	bls.n	40eb64 <__divdi3+0xb8>
  40eb44:	2200      	movs	r2, #0
  40eb46:	4613      	mov	r3, r2
  40eb48:	1c34      	adds	r4, r6, #0
  40eb4a:	f04f 0500 	mov.w	r5, #0
  40eb4e:	bf18      	it	ne
  40eb50:	2401      	movne	r4, #1
  40eb52:	4260      	negs	r0, r4
  40eb54:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40eb58:	4058      	eors	r0, r3
  40eb5a:	4051      	eors	r1, r2
  40eb5c:	1900      	adds	r0, r0, r4
  40eb5e:	4169      	adcs	r1, r5
  40eb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40eb64:	fab3 f283 	clz	r2, r3
  40eb68:	2a00      	cmp	r2, #0
  40eb6a:	f040 8083 	bne.w	40ec74 <__divdi3+0x1c8>
  40eb6e:	4580      	cmp	r8, r0
  40eb70:	f240 80cd 	bls.w	40ed0e <__divdi3+0x262>
  40eb74:	428b      	cmp	r3, r1
  40eb76:	f0c0 80ca 	bcc.w	40ed0e <__divdi3+0x262>
  40eb7a:	4613      	mov	r3, r2
  40eb7c:	e7e4      	b.n	40eb48 <__divdi3+0x9c>
  40eb7e:	b912      	cbnz	r2, 40eb86 <__divdi3+0xda>
  40eb80:	2301      	movs	r3, #1
  40eb82:	fbb3 f5f2 	udiv	r5, r3, r2
  40eb86:	fab5 f285 	clz	r2, r5
  40eb8a:	2a00      	cmp	r2, #0
  40eb8c:	d13b      	bne.n	40ec06 <__divdi3+0x15a>
  40eb8e:	1b78      	subs	r0, r7, r5
  40eb90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40eb94:	fa1f fc85 	uxth.w	ip, r5
  40eb98:	2201      	movs	r2, #1
  40eb9a:	0c21      	lsrs	r1, r4, #16
  40eb9c:	fbb0 f8fe 	udiv	r8, r0, lr
  40eba0:	fb0e 0018 	mls	r0, lr, r8, r0
  40eba4:	fb0c f308 	mul.w	r3, ip, r8
  40eba8:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40ebac:	42bb      	cmp	r3, r7
  40ebae:	d908      	bls.n	40ebc2 <__divdi3+0x116>
  40ebb0:	197f      	adds	r7, r7, r5
  40ebb2:	f080 80b0 	bcs.w	40ed16 <__divdi3+0x26a>
  40ebb6:	42bb      	cmp	r3, r7
  40ebb8:	f240 80ad 	bls.w	40ed16 <__divdi3+0x26a>
  40ebbc:	f1a8 0802 	sub.w	r8, r8, #2
  40ebc0:	442f      	add	r7, r5
  40ebc2:	1aff      	subs	r7, r7, r3
  40ebc4:	b2a4      	uxth	r4, r4
  40ebc6:	fbb7 f3fe 	udiv	r3, r7, lr
  40ebca:	fb0e 7713 	mls	r7, lr, r3, r7
  40ebce:	fb0c fc03 	mul.w	ip, ip, r3
  40ebd2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40ebd6:	45bc      	cmp	ip, r7
  40ebd8:	d906      	bls.n	40ebe8 <__divdi3+0x13c>
  40ebda:	197f      	adds	r7, r7, r5
  40ebdc:	f080 8099 	bcs.w	40ed12 <__divdi3+0x266>
  40ebe0:	45bc      	cmp	ip, r7
  40ebe2:	f240 8096 	bls.w	40ed12 <__divdi3+0x266>
  40ebe6:	3b02      	subs	r3, #2
  40ebe8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40ebec:	e7ac      	b.n	40eb48 <__divdi3+0x9c>
  40ebee:	4252      	negs	r2, r2
  40ebf0:	ea6f 0606 	mvn.w	r6, r6
  40ebf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40ebf8:	e761      	b.n	40eabe <__divdi3+0x12>
  40ebfa:	4240      	negs	r0, r0
  40ebfc:	f04f 36ff 	mov.w	r6, #4294967295
  40ec00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ec04:	e758      	b.n	40eab8 <__divdi3+0xc>
  40ec06:	4095      	lsls	r5, r2
  40ec08:	f1c2 0120 	rsb	r1, r2, #32
  40ec0c:	fa07 f302 	lsl.w	r3, r7, r2
  40ec10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40ec14:	40cf      	lsrs	r7, r1
  40ec16:	fa24 f101 	lsr.w	r1, r4, r1
  40ec1a:	4094      	lsls	r4, r2
  40ec1c:	fa1f fc85 	uxth.w	ip, r5
  40ec20:	4319      	orrs	r1, r3
  40ec22:	fbb7 f2fe 	udiv	r2, r7, lr
  40ec26:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40ec2a:	fb0e 7712 	mls	r7, lr, r2, r7
  40ec2e:	fb0c f302 	mul.w	r3, ip, r2
  40ec32:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40ec36:	42bb      	cmp	r3, r7
  40ec38:	d905      	bls.n	40ec46 <__divdi3+0x19a>
  40ec3a:	197f      	adds	r7, r7, r5
  40ec3c:	d271      	bcs.n	40ed22 <__divdi3+0x276>
  40ec3e:	42bb      	cmp	r3, r7
  40ec40:	d96f      	bls.n	40ed22 <__divdi3+0x276>
  40ec42:	3a02      	subs	r2, #2
  40ec44:	442f      	add	r7, r5
  40ec46:	1aff      	subs	r7, r7, r3
  40ec48:	b289      	uxth	r1, r1
  40ec4a:	fbb7 f8fe 	udiv	r8, r7, lr
  40ec4e:	fb0e 7718 	mls	r7, lr, r8, r7
  40ec52:	fb0c f008 	mul.w	r0, ip, r8
  40ec56:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40ec5a:	4298      	cmp	r0, r3
  40ec5c:	d906      	bls.n	40ec6c <__divdi3+0x1c0>
  40ec5e:	195b      	adds	r3, r3, r5
  40ec60:	d261      	bcs.n	40ed26 <__divdi3+0x27a>
  40ec62:	4298      	cmp	r0, r3
  40ec64:	d95f      	bls.n	40ed26 <__divdi3+0x27a>
  40ec66:	f1a8 0802 	sub.w	r8, r8, #2
  40ec6a:	442b      	add	r3, r5
  40ec6c:	1a18      	subs	r0, r3, r0
  40ec6e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40ec72:	e792      	b.n	40eb9a <__divdi3+0xee>
  40ec74:	f1c2 0720 	rsb	r7, r2, #32
  40ec78:	fa03 fe02 	lsl.w	lr, r3, r2
  40ec7c:	fa08 f502 	lsl.w	r5, r8, r2
  40ec80:	4091      	lsls	r1, r2
  40ec82:	fa28 f307 	lsr.w	r3, r8, r7
  40ec86:	fa2c fc07 	lsr.w	ip, ip, r7
  40ec8a:	40f8      	lsrs	r0, r7
  40ec8c:	ea43 0e0e 	orr.w	lr, r3, lr
  40ec90:	4308      	orrs	r0, r1
  40ec92:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40ec96:	0c07      	lsrs	r7, r0, #16
  40ec98:	fa1f fa8e 	uxth.w	sl, lr
  40ec9c:	fbbc f9f8 	udiv	r9, ip, r8
  40eca0:	fb08 cc19 	mls	ip, r8, r9, ip
  40eca4:	fb0a f109 	mul.w	r1, sl, r9
  40eca8:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40ecac:	4561      	cmp	r1, ip
  40ecae:	d907      	bls.n	40ecc0 <__divdi3+0x214>
  40ecb0:	eb1c 0c0e 	adds.w	ip, ip, lr
  40ecb4:	d232      	bcs.n	40ed1c <__divdi3+0x270>
  40ecb6:	4561      	cmp	r1, ip
  40ecb8:	d930      	bls.n	40ed1c <__divdi3+0x270>
  40ecba:	f1a9 0902 	sub.w	r9, r9, #2
  40ecbe:	44f4      	add	ip, lr
  40ecc0:	ebc1 0c0c 	rsb	ip, r1, ip
  40ecc4:	b280      	uxth	r0, r0
  40ecc6:	fbbc f3f8 	udiv	r3, ip, r8
  40ecca:	fb08 cc13 	mls	ip, r8, r3, ip
  40ecce:	fb0a fa03 	mul.w	sl, sl, r3
  40ecd2:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40ecd6:	458a      	cmp	sl, r1
  40ecd8:	d906      	bls.n	40ece8 <__divdi3+0x23c>
  40ecda:	eb11 010e 	adds.w	r1, r1, lr
  40ecde:	d225      	bcs.n	40ed2c <__divdi3+0x280>
  40ece0:	458a      	cmp	sl, r1
  40ece2:	d923      	bls.n	40ed2c <__divdi3+0x280>
  40ece4:	3b02      	subs	r3, #2
  40ece6:	4471      	add	r1, lr
  40ece8:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40ecec:	ebca 0101 	rsb	r1, sl, r1
  40ecf0:	fba3 8905 	umull	r8, r9, r3, r5
  40ecf4:	4549      	cmp	r1, r9
  40ecf6:	d303      	bcc.n	40ed00 <__divdi3+0x254>
  40ecf8:	d103      	bne.n	40ed02 <__divdi3+0x256>
  40ecfa:	4094      	lsls	r4, r2
  40ecfc:	4544      	cmp	r4, r8
  40ecfe:	d200      	bcs.n	40ed02 <__divdi3+0x256>
  40ed00:	3b01      	subs	r3, #1
  40ed02:	2200      	movs	r2, #0
  40ed04:	e720      	b.n	40eb48 <__divdi3+0x9c>
  40ed06:	3b01      	subs	r3, #1
  40ed08:	e716      	b.n	40eb38 <__divdi3+0x8c>
  40ed0a:	3901      	subs	r1, #1
  40ed0c:	e701      	b.n	40eb12 <__divdi3+0x66>
  40ed0e:	2301      	movs	r3, #1
  40ed10:	e71a      	b.n	40eb48 <__divdi3+0x9c>
  40ed12:	3b01      	subs	r3, #1
  40ed14:	e768      	b.n	40ebe8 <__divdi3+0x13c>
  40ed16:	f108 38ff 	add.w	r8, r8, #4294967295
  40ed1a:	e752      	b.n	40ebc2 <__divdi3+0x116>
  40ed1c:	f109 39ff 	add.w	r9, r9, #4294967295
  40ed20:	e7ce      	b.n	40ecc0 <__divdi3+0x214>
  40ed22:	3a01      	subs	r2, #1
  40ed24:	e78f      	b.n	40ec46 <__divdi3+0x19a>
  40ed26:	f108 38ff 	add.w	r8, r8, #4294967295
  40ed2a:	e79f      	b.n	40ec6c <__divdi3+0x1c0>
  40ed2c:	3b01      	subs	r3, #1
  40ed2e:	e7db      	b.n	40ece8 <__divdi3+0x23c>

0040ed30 <__udivdi3>:
  40ed30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ed34:	2b00      	cmp	r3, #0
  40ed36:	d140      	bne.n	40edba <__udivdi3+0x8a>
  40ed38:	428a      	cmp	r2, r1
  40ed3a:	4604      	mov	r4, r0
  40ed3c:	4615      	mov	r5, r2
  40ed3e:	d94a      	bls.n	40edd6 <__udivdi3+0xa6>
  40ed40:	fab2 f382 	clz	r3, r2
  40ed44:	460f      	mov	r7, r1
  40ed46:	b14b      	cbz	r3, 40ed5c <__udivdi3+0x2c>
  40ed48:	f1c3 0620 	rsb	r6, r3, #32
  40ed4c:	4099      	lsls	r1, r3
  40ed4e:	fa00 f403 	lsl.w	r4, r0, r3
  40ed52:	fa02 f503 	lsl.w	r5, r2, r3
  40ed56:	40f0      	lsrs	r0, r6
  40ed58:	ea40 0701 	orr.w	r7, r0, r1
  40ed5c:	0c29      	lsrs	r1, r5, #16
  40ed5e:	0c26      	lsrs	r6, r4, #16
  40ed60:	fa1f fe85 	uxth.w	lr, r5
  40ed64:	fbb7 f0f1 	udiv	r0, r7, r1
  40ed68:	fb01 7710 	mls	r7, r1, r0, r7
  40ed6c:	fb0e f200 	mul.w	r2, lr, r0
  40ed70:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40ed74:	429a      	cmp	r2, r3
  40ed76:	d907      	bls.n	40ed88 <__udivdi3+0x58>
  40ed78:	195b      	adds	r3, r3, r5
  40ed7a:	f080 80ea 	bcs.w	40ef52 <__udivdi3+0x222>
  40ed7e:	429a      	cmp	r2, r3
  40ed80:	f240 80e7 	bls.w	40ef52 <__udivdi3+0x222>
  40ed84:	3802      	subs	r0, #2
  40ed86:	442b      	add	r3, r5
  40ed88:	1a9a      	subs	r2, r3, r2
  40ed8a:	b2a4      	uxth	r4, r4
  40ed8c:	fbb2 f3f1 	udiv	r3, r2, r1
  40ed90:	fb01 2213 	mls	r2, r1, r3, r2
  40ed94:	fb0e fe03 	mul.w	lr, lr, r3
  40ed98:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40ed9c:	4596      	cmp	lr, r2
  40ed9e:	d906      	bls.n	40edae <__udivdi3+0x7e>
  40eda0:	1952      	adds	r2, r2, r5
  40eda2:	f080 80da 	bcs.w	40ef5a <__udivdi3+0x22a>
  40eda6:	4596      	cmp	lr, r2
  40eda8:	f240 80d7 	bls.w	40ef5a <__udivdi3+0x22a>
  40edac:	3b02      	subs	r3, #2
  40edae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40edb2:	2600      	movs	r6, #0
  40edb4:	4631      	mov	r1, r6
  40edb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40edba:	428b      	cmp	r3, r1
  40edbc:	d844      	bhi.n	40ee48 <__udivdi3+0x118>
  40edbe:	fab3 f683 	clz	r6, r3
  40edc2:	2e00      	cmp	r6, #0
  40edc4:	d145      	bne.n	40ee52 <__udivdi3+0x122>
  40edc6:	4282      	cmp	r2, r0
  40edc8:	f240 80bf 	bls.w	40ef4a <__udivdi3+0x21a>
  40edcc:	428b      	cmp	r3, r1
  40edce:	f0c0 80bc 	bcc.w	40ef4a <__udivdi3+0x21a>
  40edd2:	4630      	mov	r0, r6
  40edd4:	e7ee      	b.n	40edb4 <__udivdi3+0x84>
  40edd6:	b912      	cbnz	r2, 40edde <__udivdi3+0xae>
  40edd8:	2501      	movs	r5, #1
  40edda:	fbb5 f5f2 	udiv	r5, r5, r2
  40edde:	fab5 f285 	clz	r2, r5
  40ede2:	2a00      	cmp	r2, #0
  40ede4:	d17b      	bne.n	40eede <__udivdi3+0x1ae>
  40ede6:	1b4a      	subs	r2, r1, r5
  40ede8:	0c2f      	lsrs	r7, r5, #16
  40edea:	fa1f fe85 	uxth.w	lr, r5
  40edee:	2601      	movs	r6, #1
  40edf0:	0c23      	lsrs	r3, r4, #16
  40edf2:	fbb2 f0f7 	udiv	r0, r2, r7
  40edf6:	fb07 2210 	mls	r2, r7, r0, r2
  40edfa:	fb0e fc00 	mul.w	ip, lr, r0
  40edfe:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40ee02:	458c      	cmp	ip, r1
  40ee04:	d907      	bls.n	40ee16 <__udivdi3+0xe6>
  40ee06:	1949      	adds	r1, r1, r5
  40ee08:	f080 80a1 	bcs.w	40ef4e <__udivdi3+0x21e>
  40ee0c:	458c      	cmp	ip, r1
  40ee0e:	f240 809e 	bls.w	40ef4e <__udivdi3+0x21e>
  40ee12:	3802      	subs	r0, #2
  40ee14:	4429      	add	r1, r5
  40ee16:	ebcc 0101 	rsb	r1, ip, r1
  40ee1a:	b2a4      	uxth	r4, r4
  40ee1c:	fbb1 f3f7 	udiv	r3, r1, r7
  40ee20:	fb07 1113 	mls	r1, r7, r3, r1
  40ee24:	fb0e fe03 	mul.w	lr, lr, r3
  40ee28:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40ee2c:	45a6      	cmp	lr, r4
  40ee2e:	d906      	bls.n	40ee3e <__udivdi3+0x10e>
  40ee30:	1964      	adds	r4, r4, r5
  40ee32:	f080 8090 	bcs.w	40ef56 <__udivdi3+0x226>
  40ee36:	45a6      	cmp	lr, r4
  40ee38:	f240 808d 	bls.w	40ef56 <__udivdi3+0x226>
  40ee3c:	3b02      	subs	r3, #2
  40ee3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40ee42:	4631      	mov	r1, r6
  40ee44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ee48:	2600      	movs	r6, #0
  40ee4a:	4630      	mov	r0, r6
  40ee4c:	4631      	mov	r1, r6
  40ee4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ee52:	f1c6 0520 	rsb	r5, r6, #32
  40ee56:	40b3      	lsls	r3, r6
  40ee58:	fa02 f706 	lsl.w	r7, r2, r6
  40ee5c:	fa01 f406 	lsl.w	r4, r1, r6
  40ee60:	40ea      	lsrs	r2, r5
  40ee62:	40e9      	lsrs	r1, r5
  40ee64:	fa20 f505 	lsr.w	r5, r0, r5
  40ee68:	431a      	orrs	r2, r3
  40ee6a:	4325      	orrs	r5, r4
  40ee6c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40ee70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40ee74:	b293      	uxth	r3, r2
  40ee76:	fbb1 f8fc 	udiv	r8, r1, ip
  40ee7a:	fb0c 1118 	mls	r1, ip, r8, r1
  40ee7e:	fb03 f408 	mul.w	r4, r3, r8
  40ee82:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40ee86:	428c      	cmp	r4, r1
  40ee88:	d906      	bls.n	40ee98 <__udivdi3+0x168>
  40ee8a:	1889      	adds	r1, r1, r2
  40ee8c:	d269      	bcs.n	40ef62 <__udivdi3+0x232>
  40ee8e:	428c      	cmp	r4, r1
  40ee90:	d967      	bls.n	40ef62 <__udivdi3+0x232>
  40ee92:	f1a8 0802 	sub.w	r8, r8, #2
  40ee96:	4411      	add	r1, r2
  40ee98:	1b09      	subs	r1, r1, r4
  40ee9a:	b2ad      	uxth	r5, r5
  40ee9c:	fbb1 f4fc 	udiv	r4, r1, ip
  40eea0:	fb0c 1114 	mls	r1, ip, r4, r1
  40eea4:	fb03 fe04 	mul.w	lr, r3, r4
  40eea8:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40eeac:	459e      	cmp	lr, r3
  40eeae:	d905      	bls.n	40eebc <__udivdi3+0x18c>
  40eeb0:	189b      	adds	r3, r3, r2
  40eeb2:	d254      	bcs.n	40ef5e <__udivdi3+0x22e>
  40eeb4:	459e      	cmp	lr, r3
  40eeb6:	d952      	bls.n	40ef5e <__udivdi3+0x22e>
  40eeb8:	3c02      	subs	r4, #2
  40eeba:	4413      	add	r3, r2
  40eebc:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40eec0:	ebce 0303 	rsb	r3, lr, r3
  40eec4:	fba4 8907 	umull	r8, r9, r4, r7
  40eec8:	454b      	cmp	r3, r9
  40eeca:	d303      	bcc.n	40eed4 <__udivdi3+0x1a4>
  40eecc:	d151      	bne.n	40ef72 <__udivdi3+0x242>
  40eece:	40b0      	lsls	r0, r6
  40eed0:	4540      	cmp	r0, r8
  40eed2:	d24e      	bcs.n	40ef72 <__udivdi3+0x242>
  40eed4:	2600      	movs	r6, #0
  40eed6:	1e60      	subs	r0, r4, #1
  40eed8:	4631      	mov	r1, r6
  40eeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40eede:	f1c2 0620 	rsb	r6, r2, #32
  40eee2:	4095      	lsls	r5, r2
  40eee4:	fa01 f302 	lsl.w	r3, r1, r2
  40eee8:	fa00 f402 	lsl.w	r4, r0, r2
  40eeec:	0c2f      	lsrs	r7, r5, #16
  40eeee:	40f1      	lsrs	r1, r6
  40eef0:	40f0      	lsrs	r0, r6
  40eef2:	fa1f fe85 	uxth.w	lr, r5
  40eef6:	fbb1 f6f7 	udiv	r6, r1, r7
  40eefa:	4318      	orrs	r0, r3
  40eefc:	fb07 1116 	mls	r1, r7, r6, r1
  40ef00:	fb0e f206 	mul.w	r2, lr, r6
  40ef04:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40ef08:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40ef0c:	429a      	cmp	r2, r3
  40ef0e:	d905      	bls.n	40ef1c <__udivdi3+0x1ec>
  40ef10:	195b      	adds	r3, r3, r5
  40ef12:	d229      	bcs.n	40ef68 <__udivdi3+0x238>
  40ef14:	429a      	cmp	r2, r3
  40ef16:	d927      	bls.n	40ef68 <__udivdi3+0x238>
  40ef18:	3e02      	subs	r6, #2
  40ef1a:	442b      	add	r3, r5
  40ef1c:	1a9b      	subs	r3, r3, r2
  40ef1e:	b280      	uxth	r0, r0
  40ef20:	fbb3 fcf7 	udiv	ip, r3, r7
  40ef24:	fb07 331c 	mls	r3, r7, ip, r3
  40ef28:	fb0e f10c 	mul.w	r1, lr, ip
  40ef2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40ef30:	4299      	cmp	r1, r3
  40ef32:	d906      	bls.n	40ef42 <__udivdi3+0x212>
  40ef34:	195b      	adds	r3, r3, r5
  40ef36:	d219      	bcs.n	40ef6c <__udivdi3+0x23c>
  40ef38:	4299      	cmp	r1, r3
  40ef3a:	d917      	bls.n	40ef6c <__udivdi3+0x23c>
  40ef3c:	f1ac 0c02 	sub.w	ip, ip, #2
  40ef40:	442b      	add	r3, r5
  40ef42:	1a5a      	subs	r2, r3, r1
  40ef44:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40ef48:	e752      	b.n	40edf0 <__udivdi3+0xc0>
  40ef4a:	2001      	movs	r0, #1
  40ef4c:	e732      	b.n	40edb4 <__udivdi3+0x84>
  40ef4e:	3801      	subs	r0, #1
  40ef50:	e761      	b.n	40ee16 <__udivdi3+0xe6>
  40ef52:	3801      	subs	r0, #1
  40ef54:	e718      	b.n	40ed88 <__udivdi3+0x58>
  40ef56:	3b01      	subs	r3, #1
  40ef58:	e771      	b.n	40ee3e <__udivdi3+0x10e>
  40ef5a:	3b01      	subs	r3, #1
  40ef5c:	e727      	b.n	40edae <__udivdi3+0x7e>
  40ef5e:	3c01      	subs	r4, #1
  40ef60:	e7ac      	b.n	40eebc <__udivdi3+0x18c>
  40ef62:	f108 38ff 	add.w	r8, r8, #4294967295
  40ef66:	e797      	b.n	40ee98 <__udivdi3+0x168>
  40ef68:	3e01      	subs	r6, #1
  40ef6a:	e7d7      	b.n	40ef1c <__udivdi3+0x1ec>
  40ef6c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ef70:	e7e7      	b.n	40ef42 <__udivdi3+0x212>
  40ef72:	4620      	mov	r0, r4
  40ef74:	2600      	movs	r6, #0
  40ef76:	e71d      	b.n	40edb4 <__udivdi3+0x84>

0040ef78 <__func__.8182>:
  40ef78:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  40ef88:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  40ef98:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  40efa8:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  40efb8:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  40efc8:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  40efd8:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  40efe8:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  40eff8:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  40f008:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  40f018:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  40f028:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  40f038:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  40f048:	7274 6575 203a 6166 736c 0065               true: false.

0040f054 <__func__.8348>:
  40f054:	7371 6970 725f 6165 0064 0000               qspi_read...

0040f060 <__func__.8364>:
  40f060:	7371 6970 775f 6972 6574 0000 4449 454c     qspi_write..IDLE
  40f070:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  40f080:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  40f090:	7653 0063 5754 4849 2053 4552 492d 494e     Svc.TWIHS RE-INI
  40f0a0:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  40f0b0:	5241 4554 0a44 0000 5754 4849 2053 4552     ARTED...TWIHS RE
  40f0c0:	492d 494e 4954 4c41 5a49 5441 4f49 204e     -INITIALIZATION 
  40f0d0:	202d 4946 494e 4853 4445 000a 2580 0000     - FINISHED...%..
  40f0e0:	00c0 0000 0800 0000 0019 0000 8040 0000     ............@...
  40f0f0:	c5d9 c855 454d 4c4c 5441 4f52 394e 3030     ..U.MELLATRON900
  40f100:	2030 4f42 544f 5320 5145 4555 434e 0a45     0 BOOT SEQUENCE.
  40f110:	4155 5452 4320 4e4f 4f53 454c 5320 4154     UART CONSOLE STA
  40f120:	5452 4445 4f20 204e 4155 5452 0a34 6142     RTED ON UART4.Ba
  40f130:	6475 6152 6574 203a 3131 3235 3030 420a     udRate: 115200.B
  40f140:	7469 3a73 3820 4e0a 206f 7473 706f 6220     its: 8.No stop b
  40f150:	7469 2073 000a 0000 454c 2044 4e49 5449     its ....LED INIT
  40f160:	4149 494c 415a 4954 4e4f 2d20 5320 4154     IALIZATION - STA
  40f170:	5452 4445 000a 0000 454c 2044 4e49 5449     RTED....LED INIT
  40f180:	4149 494c 415a 4954 4e4f 2d20 4620 4e49     IALIZATION - FIN
  40f190:	5349 4548 0a44 0000 4157 4354 4448 474f     ISHED...WATCHDOG
  40f1a0:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40f1b0:	202d 5453 5241 4554 0a44 0000 4157 4354     - STARTED...WATC
  40f1c0:	4448 474f 4920 494e 4954 4c41 5a49 5441     HDOG INITIALIZAT
  40f1d0:	4f49 204e 202d 4946 494e 4853 4445 000a     ION - FINISHED..
  40f1e0:	4c47 424f 4c41 4920 5152 4920 494e 4954     GLOBAL IRQ INITI
  40f1f0:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  40f200:	4554 0a44 0000 0000 4c47 424f 4c41 4920     TED.....GLOBAL I
  40f210:	5152 4920 494e 4954 4c41 5a49 5441 4f49     RQ INITIALIZATIO
  40f220:	204e 202d 4946 494e 4853 4445 000a 0000     N - FINISHED....
  40f230:	4453 4152 204d 4e49 5449 4149 494c 415a     SDRAM INITIALIZA
  40f240:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  40f250:	4453 4152 204d 4f43 544e 4f52 4c4c 5245     SDRAM CONTROLLER
  40f260:	5320 4154 5452 4445 000a 0000 4453 4152      STARTED....SDRA
  40f270:	204d 4e49 5449 4149 494c 415a 4954 4e4f     M INITIALIZATION
  40f280:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  40f290:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  40f2a0:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  40f2b0:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  40f2c0:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  40f2d0:	0000 0000 4553 5652 204f 5244 5649 5245     ....SERVO DRIVER
  40f2e0:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40f2f0:	202d 5453 5241 4554 0a44 0000 4553 5652     - STARTED...SERV
  40f300:	204f 5244 5649 5245 4920 494e 4954 4c41     O DRIVER INITIAL
  40f310:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  40f320:	4445 000a 4143 454d 4152 4920 494e 4954     ED..CAMERA INITI
  40f330:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  40f340:	4554 0a44 0000 0000 4143 454d 4152 4920     TED.....CAMERA I
  40f350:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  40f360:	4946 494e 4853 4445 000a 0000 5351 4950     FINISHED....QSPI
  40f370:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40f380:	202d 5453 5241 4554 0a44 0000 5351 4950     - STARTED...QSPI
  40f390:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  40f3a0:	202d 4946 494e 4853 4445 000a 5744 314d     - FINISHED..DWM1
  40f3b0:	3030 2030 4e49 5449 4149 494c 415a 4954     000 INITIALIZATI
  40f3c0:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  40f3d0:	5744 314d 3030 2030 4e49 5449 4149 494c     DWM1000 INITIALI
  40f3e0:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  40f3f0:	0a44 0000 4441 2043 4e49 5449 4149 494c     D...ADC INITIALI
  40f400:	415a 4954 4e4f 2d20 5320 4154 5452 4445     ZATION - STARTED
  40f410:	000a 0000 4441 2043 4e49 5449 4149 494c     ....ADC INITIALI
  40f420:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  40f430:	0a44 0000 5753 5449 4843 4920 494e 4954     D...SWITCH INITI
  40f440:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  40f450:	4554 0a44 0000 0000 5753 5449 4843 4920     TED.....SWITCH I
  40f460:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  40f470:	4946 494e 4853 4445 000a 0000 4550 4952     FINISHED....PERI
  40f480:	4546 4152 204c 5249 2051 4e49 5449 4149     FERAL IRQ INITIA
  40f490:	494c 415a 4954 4e4f 2d20 5320 4154 5452     LIZATION - START
  40f4a0:	4445 000a 4550 4952 4546 4152 204c 5249     ED..PERIFERAL IR
  40f4b0:	2051 4e49 5449 4149 494c 415a 4954 4e4f     Q INITIALIZATION
  40f4c0:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  40f4d0:	7845 7469 6e69 2067 6977 6874 7320 6174     Exiting with sta
  40f4e0:	7574 2073 6425 0a2e 0000 0000 454d 204d     tus %d......MEM 
  40f4f0:	5245 4f52 2052 5441 3020 2578 2078 203a     ERROR AT 0x%x : 
  40f500:	5845 3a50 7830 7825 2c20 5220 5643 203a     EXP:0x%x , RCV: 
  40f510:	7830 7825 0a20 0000 4453 4152 204d 5546     0x%x ...SDRAM FU
  40f520:	4c4c 4320 4548 4b43 4320 4d4f 4c50 5445     LL CHECK COMPLET
  40f530:	0045 0000 3249 2043 5245 2152 000a 0000     E...I2C ERR!....
  40f540:	7825 202c 0000 0000 4553 5652 204f 5244     %x, ....SERVO DR
  40f550:	5649 5245 5320 5445 5055 4320 4d4f 4c50     IVER SETUP COMPL
  40f560:	4145 4554 000a 0000 4d49 3a47 0000 0000     EATE....IMG:....
  40f570:	453a 444e 4d49 0a47 0000 0000 7453 7261     :ENDIMG.....Star
  40f580:	6574 2064 6573 7672 206f 6163 0a6c 0000     ted servo cal...
  40f590:	6946 696e 6873 6465 7320 7265 6f76 6320     Finished servo c
  40f5a0:	6c61 6420 7461 2061 6f46 6c6c 776f 3a73     al data Follows:
  40f5b0:	000a 0000 6625 252c 2c66 6625 000a 0000     ....%f,%f,%f....
  40f5c0:	454c 2544 2064 4553 2054 4f54 2520 0a64     LED%d SET TO %d.
  40f5d0:	0000 0000 4553 5652 204f 454c 3a47 6425     ....SERVO LEG:%d
  40f5e0:	532c 5245 4f56 253a 2064 4f4d 4556 2044     ,SERVO:%d MOVED 
  40f5f0:	4f54 2520 0a64 0000 6142 7474 7265 2079     TO %d...Battery 
  40f600:	6f56 746c 6761 3a65 6625 000a 6554 7473     Voltage:%f..Test
  40f610:	6544 4976 3a44 3020 2578 0a78 0000 0000     DevID: 0x%x.....
  40f620:	7953 5373 6174 7574 3a73 3020 2578 0a78     SysStatus: 0x%x.
  40f630:	0000 0000 4449 5720 4952 5454 4e45 520a     ....ID WRITTEN.R
  40f640:	4145 2044 4142 4b43 203a 7830 7825 000a     EAD BACK: 0x%x..
  40f650:	4154 4b53 2031 4e49 5449 4149 494c 415a     TASK1 INITIALIZA
  40f660:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  40f670:	4154 4b53 2031 4e49 5449 4149 494c 415a     TASK1 INITIALIZA
  40f680:	4954 4e4f 2d20 4620 4e49 5349 4548 2044     TION - FINISHED 
  40f690:	207c 4e45 4554 4952 474e 4920 464e 4e49     | ENTERING INFIN
  40f6a0:	5449 2045 4f4c 504f 000a 0000 454c 2047     ITE LOOP....LEG 
  40f6b0:	4f43 544e 4f52 204c 4154 4b53 4920 494e     CONTROL TASK INI
  40f6c0:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  40f6d0:	5241 4554 0a44 0000 454c 2047 4f43 544e     ARTED...LEG CONT
  40f6e0:	4f52 204c 4154 4b53 4920 494e 4954 4c41     ROL TASK INITIAL
  40f6f0:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  40f700:	4445 7c20 4520 544e 5245 4e49 2047 4e49     ED | ENTERING IN
  40f710:	4946 494e 4554 4c20 4f4f 0a50 0000 0000     FINITE LOOP.....
  40f720:	4c43 2049 4154 4b53 4920 494e 4954 4c41     CLI TASK INITIAL
  40f730:	5a49 5441 4f49 204e 202d 5453 5241 4554     IZATION - STARTE
  40f740:	0a44 0000 4c43 2049 4154 4b53 4920 494e     D...CLI TASK INI
  40f750:	4954 4c41 5a49 5441 4f49 204e 202d 4946     TIALIZATION - FI
  40f760:	494e 4853 4445 7c20 4520 544e 5245 4e49     NISHED | ENTERIN
  40f770:	2047 4e49 4946 494e 4554 4c20 4f4f 0a50     G INFINITE LOOP.
  40f780:	0000 0000 4f43 4d4d 4e41 2044 494c 454e     ....COMMAND LINE
  40f790:	5320 4154 5452 4445 000a 0000 5946 5f50      STARTED....FYP_
  40f7a0:	6548 6178 6f62 5f74 5441 4153 534d 3037     Hexabot_ATSAMS70
  40f7b0:	4d5f 4c45 414c 5254 4e4f 3039 3030 003e     _MELLATRON9000>.
  40f7c0:	0020 0000 656c 0064 616d 756e 7673 006f      ...led.manusvo.
  40f7d0:	6162 7674 6c6f 0a74 0000 0000 7564 706d     batvolt.....dump
  40f7e0:	6d69 0067 6177 6b6c 0000 0000 6177 6b6c     img.walk....walk
  40f7f0:	7963 6974 656d 0000 6576 6272 736f 0065     cytime..verbose.
  40f800:	5744 2d4d 6574 7473 000a 0000 5744 2d4d     DWM-test....DWM-
  40f810:	6573 646e 0000 0000 5744 2d4d 726f 654c     send....DWM-orLe
  40f820:	0a64 0000 5744 2d4d 5752 6574 7473 0000     d...DWM-RWtest..
  40f830:	6163 646d 7374 0068 656d 746d 7365 0a74     camdtsh.memtest.
  40f840:	0000 0000 5744 2d4d 6c63 5372 6174 7574     ....DWM-clrStatu
  40f850:	0a73 0000 6167 7469 7554 6e72 0000 0000     s...gaitTurn....
  40f860:	6167 7469 6944 0072 6167 7469 7453 6e61     gaitDir.gaitStan
  40f870:	6563 0000 6167 7469 6748 0074 6167 7469     ce..gaitHgt.gait
  40f880:	7550 0070 6167 7469 7453 6972 6564 0000     Pup.gaitStride..
  40f890:	7673 696f 686e 6269 0000 0000 4143 454d     svoinhib....CAME
  40f8a0:	4152 5020 4f52 4543 5353 4e49 2047 4154     RA PROCESSING TA
  40f8b0:	4b53 4920 494e 4954 4c41 5a49 5441 4f49     SK INITIALIZATIO
  40f8c0:	204e 202d 5453 5241 4554 0a44 0000 0000     N - STARTED.....
  40f8d0:	4143 454d 4152 5020 4f52 4543 5353 4e49     CAMERA PROCESSIN
  40f8e0:	2047 4154 4b53 4920 494e 4954 4c41 5a49     G TASK INITIALIZ
  40f8f0:	5441 4f49 204e 202d 4946 494e 4853 4445     ATION - FINISHED
  40f900:	000a 0000 6863 6e61 6567 2064 6970 3a78     ....changed pix:
  40f910:	2520 0a64 6162 646e 6977 6874 203a 6625      %d.bandwith: %f
  40f920:	0a25 0000 4f42 5241 2044 4e49 5449 4149     %...BOARD INITIA
  40f930:	494c 415a 4954 4e4f 2d20 4620 4e49 5349     LIZATION - FINIS
  40f940:	4548 0a44 0000 0000 5452 534f 5420 5341     HED.....RTOS TAS
  40f950:	204b 4e49 5449 4149 494c 415a 4954 4e4f     K INITIALIZATION
  40f960:	2d20 5320 4154 5452 4445 000a 4154 4b53      - STARTED..TASK
  40f970:	0031 0000 454c 4347 5254 544c 5341 004b     1...LEGCTRLTASK.
  40f980:	4d49 5447 5341 004b 4c43 5449 5341 004b     IMGTASK.CLITASK.
  40f990:	5452 534f 5420 5341 204b 4e49 5449 4149     RTOS TASK INITIA
  40f9a0:	494c 415a 4954 4e4f 2d20 4620 4e49 5349     LIZATION - FINIS
  40f9b0:	4548 0a44 0000 0000 5453 5241 4954 474e     HED.....STARTING
  40f9c0:	5220 4f54 0a53 0000 5452 534f 4820 5341      RTOS...RTOS HAS
  40f9d0:	5220 5445 5255 454e 2e44 5420 4948 2053      RETURNED. THIS 
  40f9e0:	4853 554f 444c 4520 4556 2052 4148 5050     SHOULD EVER HAPP
  40f9f0:	4e45 202e 5845 5254 4d45 2045 5245 4f52     EN. EXTREME ERRO
  40fa00:	0a52 0000 6361 736f 0000 0000 7361 6e69     R...acos....asin
  40fa10:	0000 0000 7173 7472 0000 0000               ....sqrt....

0040fa1c <npio2_hw>:
  40fa1c:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
  40fa2c:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
  40fa3c:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
  40fa4c:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
  40fa5c:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
  40fa6c:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
  40fa7c:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
  40fa8c:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0040fa9c <two_over_pi>:
  40fa9c:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
  40faac:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
  40fabc:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
  40facc:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
  40fadc:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
  40faec:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
  40fafc:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
  40fb0c:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
  40fb1c:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
  40fb2c:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
  40fb3c:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
  40fb4c:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
  40fb5c:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
  40fb6c:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
  40fb7c:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
  40fb8c:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
  40fb9c:	e27b 0060 8c6b 00c0                         {.`.k...

0040fba4 <init_jk>:
  40fba4:	0002 0000 0003 0000 0004 0000 0006 0000     ................
  40fbb4:	0000 0000                                   ....

0040fbb8 <PIo2>:
  40fbb8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
  40fbc8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
  40fbd8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
  40fbe8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0040fbf8 <atanlo>:
  40fbf8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
  40fc08:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

0040fc18 <atanhi>:
  40fc18:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
  40fc28:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
  40fc38:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  40fc48:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  40fc58:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  40fc68:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  40fc78:	0043 0000                                   C...

0040fc7c <_global_impure_ptr>:
  40fc7c:	0020 2040                                    .@ 

0040fc80 <zeroes.6911>:
  40fc80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040fc90 <blanks.6910>:
  40fc90:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40fca0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  40fcb0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40fcc0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  40fcd0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  40fce0:	0030 0000                                   0...

0040fce4 <zeroes.6869>:
  40fce4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040fcf4 <blanks.6868>:
  40fcf4:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040fd04 <_ctype_>:
  40fd04:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40fd14:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40fd24:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40fd34:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40fd44:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40fd54:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40fd64:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40fd74:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40fd84:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  40fe08:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40fe18:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

0040fe28 <__mprec_tens>:
  40fe28:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40fe38:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40fe48:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40fe58:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40fe68:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40fe78:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40fe88:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40fe98:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40fea8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40feb8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40fec8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40fed8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40fee8:	9db4 79d9 7843 44ea                         ...yCx.D

0040fef0 <p05.5302>:
  40fef0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0040ff00 <__mprec_bigtens>:
  40ff00:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ff10:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40ff20:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040ff28 <_init>:
  40ff28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ff2a:	bf00      	nop
  40ff2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ff2e:	bc08      	pop	{r3}
  40ff30:	469e      	mov	lr, r3
  40ff32:	4770      	bx	lr

0040ff34 <__init_array_start>:
  40ff34:	0040be61 	.word	0x0040be61

0040ff38 <__frame_dummy_init_array_entry>:
  40ff38:	00400165                                e.@.

0040ff3c <_fini>:
  40ff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ff3e:	bf00      	nop
  40ff40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ff42:	bc08      	pop	{r3}
  40ff44:	469e      	mov	lr, r3
  40ff46:	4770      	bx	lr

0040ff48 <__fini_array_start>:
  40ff48:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <cam_dif_tsh>:
20400018:	0019 0000                                   ....

2040001c <__fdlib_version>:
2040001c:	0001 0000                                   ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	fc78 0040 0000 0000 0000 0000 0000 0000     x.@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <__malloc_av_>:
	...
20400454:	044c 2040 044c 2040 0454 2040 0454 2040     L.@ L.@ T.@ T.@ 
20400464:	045c 2040 045c 2040 0464 2040 0464 2040     \.@ \.@ d.@ d.@ 
20400474:	046c 2040 046c 2040 0474 2040 0474 2040     l.@ l.@ t.@ t.@ 
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__ctype_ptr__>:
2040085c:	fd04 0040                                   ..@.

20400860 <lconv>:
20400860:	fe20 0040 f4e8 0040 f4e8 0040 f4e8 0040      .@...@...@...@.
20400870:	f4e8 0040 f4e8 0040 f4e8 0040 f4e8 0040     ..@...@...@...@.
20400880:	f4e8 0040 f4e8 0040 ffff ffff ffff ffff     ..@...@.........
20400890:	ffff ffff ffff 0000                         ........

20400898 <lc_ctype_charset>:
20400898:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

204008b8 <__mb_cur_max>:
204008b8:	0001 0000                                   ....

204008bc <__wctomb>:
204008bc:	e78d 0040                                   ..@.
