
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001419c  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0041419c  0041419c  0001c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000950  20400000  004141a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c578  20400950  00414af4  00020950  2**2
                  ALLOC
  4 .stack        00002000  2040cec8  0042106c  00020950  2**0
                  ALLOC
  5 .heap         00000200  2040eec8  0042306c  00020950  2**0
                  ALLOC
  6 .ARM.attributes 00000035  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00020985  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023ff2  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000046d6  00000000  00000000  000449d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e896  00000000  00000000  000490a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012b0  00000000  00000000  0005793e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013d0  00000000  00000000  00058bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025b0b  00000000  00000000  00059fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a622  00000000  00000000  0007fac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008680c  00000000  00000000  0009a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004bf4  00000000  00000000  001208f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040eec8 	.word	0x2040eec8
  400004:	004034d9 	.word	0x004034d9
  400008:	004034d5 	.word	0x004034d5
  40000c:	004034d5 	.word	0x004034d5
  400010:	004034d5 	.word	0x004034d5
  400014:	004034d5 	.word	0x004034d5
  400018:	004034d5 	.word	0x004034d5
	...
  40002c:	00400b3d 	.word	0x00400b3d
  400030:	004034d5 	.word	0x004034d5
  400034:	00000000 	.word	0x00000000
  400038:	00400bd9 	.word	0x00400bd9
  40003c:	00400c3d 	.word	0x00400c3d
  400040:	004034d5 	.word	0x004034d5
  400044:	004034d5 	.word	0x004034d5
  400048:	004034d5 	.word	0x004034d5
  40004c:	004034d5 	.word	0x004034d5
  400050:	004034d5 	.word	0x004034d5
  400054:	004034d5 	.word	0x004034d5
  400058:	004034d5 	.word	0x004034d5
  40005c:	004034d5 	.word	0x004034d5
  400060:	004034d5 	.word	0x004034d5
  400064:	00000000 	.word	0x00000000
  400068:	004005b1 	.word	0x004005b1
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005d9 	.word	0x004005d9
  400074:	004034d5 	.word	0x004034d5
  400078:	004034d5 	.word	0x004034d5
  40007c:	004034d5 	.word	0x004034d5
  400080:	004005ed 	.word	0x004005ed
  400084:	00400601 	.word	0x00400601
  400088:	004034d5 	.word	0x004034d5
  40008c:	004034d5 	.word	0x004034d5
  400090:	004034d5 	.word	0x004034d5
  400094:	004034d5 	.word	0x004034d5
  400098:	004034d5 	.word	0x004034d5
  40009c:	004034d5 	.word	0x004034d5
  4000a0:	004034d5 	.word	0x004034d5
  4000a4:	004034d5 	.word	0x004034d5
  4000a8:	004034d5 	.word	0x004034d5
  4000ac:	004034d5 	.word	0x004034d5
  4000b0:	004034d5 	.word	0x004034d5
  4000b4:	00400365 	.word	0x00400365
  4000b8:	004034d5 	.word	0x004034d5
  4000bc:	004034d5 	.word	0x004034d5
  4000c0:	004034d5 	.word	0x004034d5
  4000c4:	004034d5 	.word	0x004034d5
  4000c8:	004034d5 	.word	0x004034d5
	...
  4000e0:	00400379 	.word	0x00400379
  4000e4:	004034d5 	.word	0x004034d5
  4000e8:	004034d5 	.word	0x004034d5
  4000ec:	004034d5 	.word	0x004034d5
  4000f0:	004034d5 	.word	0x004034d5
  4000f4:	004034d5 	.word	0x004034d5
  4000f8:	00407e19 	.word	0x00407e19
  4000fc:	004034d5 	.word	0x004034d5
  400100:	004034d5 	.word	0x004034d5
  400104:	004034d5 	.word	0x004034d5
  400108:	004034d5 	.word	0x004034d5
  40010c:	004034d5 	.word	0x004034d5
  400110:	004034d5 	.word	0x004034d5
	...
  400120:	004034d5 	.word	0x004034d5
  400124:	004034d5 	.word	0x004034d5
  400128:	004034d5 	.word	0x004034d5
  40012c:	00407de1 	.word	0x00407de1
  400130:	004034d5 	.word	0x004034d5
  400134:	00000000 	.word	0x00000000
  400138:	004034d5 	.word	0x004034d5
  40013c:	004034d5 	.word	0x004034d5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400950 	.word	0x20400950
  40015c:	00000000 	.word	0x00000000
  400160:	004141a4 	.word	0x004141a4

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	004141a4 	.word	0x004141a4
  400190:	20400954 	.word	0x20400954
  400194:	004141a4 	.word	0x004141a4
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402d79 	.word	0x00402d79
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040bebd 	.word	0x0040bebd
  4001e0:	00402d85 	.word	0x00402d85

004001e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
  4001e6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001ec:	4013      	ands	r3, r2
  4001ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4001f2:	4e1a      	ldr	r6, [pc, #104]	; (40025c <afec_process_callback+0x78>)
  4001f4:	4d1a      	ldr	r5, [pc, #104]	; (400260 <afec_process_callback+0x7c>)
  4001f6:	42a8      	cmp	r0, r5
  4001f8:	bf14      	ite	ne
  4001fa:	2000      	movne	r0, #0
  4001fc:	2001      	moveq	r0, #1
  4001fe:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400200:	2c0b      	cmp	r4, #11
  400202:	d80a      	bhi.n	40021a <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400204:	9a01      	ldr	r2, [sp, #4]
  400206:	2301      	movs	r3, #1
  400208:	40a3      	lsls	r3, r4
  40020a:	4213      	tst	r3, r2
  40020c:	d020      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40020e:	192b      	adds	r3, r5, r4
  400210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400214:	b1e3      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400216:	4798      	blx	r3
  400218:	e01a      	b.n	400250 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40021a:	2c0e      	cmp	r4, #14
  40021c:	d80c      	bhi.n	400238 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40021e:	9a01      	ldr	r2, [sp, #4]
  400220:	f104 010c 	add.w	r1, r4, #12
  400224:	2301      	movs	r3, #1
  400226:	408b      	lsls	r3, r1
  400228:	4213      	tst	r3, r2
  40022a:	d011      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	b16b      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400234:	4798      	blx	r3
  400236:	e00b      	b.n	400250 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400238:	9a01      	ldr	r2, [sp, #4]
  40023a:	f104 010f 	add.w	r1, r4, #15
  40023e:	2301      	movs	r3, #1
  400240:	408b      	lsls	r3, r1
  400242:	4213      	tst	r3, r2
  400244:	d004      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400246:	192b      	adds	r3, r5, r4
  400248:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40024c:	b103      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40024e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400250:	3401      	adds	r4, #1
  400252:	2c10      	cmp	r4, #16
  400254:	d1d4      	bne.n	400200 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400256:	b002      	add	sp, #8
  400258:	bd70      	pop	{r4, r5, r6, pc}
  40025a:	bf00      	nop
  40025c:	2040c520 	.word	0x2040c520
  400260:	40064000 	.word	0x40064000

00400264 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400296:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40029a:	d14d      	bne.n	400338 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40029c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40029e:	2201      	movs	r2, #1
  4002a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002a2:	7cca      	ldrb	r2, [r1, #19]
  4002a4:	2a00      	cmp	r2, #0
  4002a6:	bf18      	it	ne
  4002a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4002ac:	68ca      	ldr	r2, [r1, #12]
  4002ae:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002b2:	684a      	ldr	r2, [r1, #4]
  4002b4:	688d      	ldr	r5, [r1, #8]
  4002b6:	fbb2 f2f5 	udiv	r2, r2, r5
  4002ba:	3a01      	subs	r2, #1
  4002bc:	0212      	lsls	r2, r2, #8
  4002be:	b292      	uxth	r2, r2
  4002c0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002c2:	7c0c      	ldrb	r4, [r1, #16]
  4002c4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4002c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4002ca:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4002cc:	7c4c      	ldrb	r4, [r1, #17]
  4002ce:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4002d4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4002d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002da:	7d0b      	ldrb	r3, [r1, #20]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf14      	ite	ne
  4002e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4002e4:	2200      	moveq	r2, #0
  4002e6:	680b      	ldr	r3, [r1, #0]
  4002e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4002ea:	7d4b      	ldrb	r3, [r1, #21]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4002f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4002f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4002fa:	7d8b      	ldrb	r3, [r1, #22]
  4002fc:	021b      	lsls	r3, r3, #8
  4002fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400302:	f043 030c 	orr.w	r3, r3, #12
  400306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40030a:	4b12      	ldr	r3, [pc, #72]	; (400354 <afec_init+0xc0>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d106      	bne.n	40031e <afec_init+0x8a>
  400310:	e017      	b.n	400342 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400312:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400316:	428b      	cmp	r3, r1
  400318:	d1fb      	bne.n	400312 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40031a:	2000      	movs	r0, #0
  40031c:	e016      	b.n	40034c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <afec_init+0xc4>)
  400320:	4298      	cmp	r0, r3
  400322:	d10c      	bne.n	40033e <afec_init+0xaa>
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <afec_init+0xc8>)
  400326:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40032a:	2200      	movs	r2, #0
  40032c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400330:	428b      	cmp	r3, r1
  400332:	d1fb      	bne.n	40032c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e009      	b.n	40034c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400338:	2019      	movs	r0, #25
  40033a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40033c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e004      	b.n	40034c <afec_init+0xb8>
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <afec_init+0xcc>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	e7e2      	b.n	400312 <afec_init+0x7e>
  40034c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40034e:	bc30      	pop	{r4, r5}
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	4003c000 	.word	0x4003c000
  400358:	40064000 	.word	0x40064000
  40035c:	2040c55c 	.word	0x2040c55c
  400360:	2040c51c 	.word	0x2040c51c

00400364 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400364:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400366:	4802      	ldr	r0, [pc, #8]	; (400370 <AFEC0_Handler+0xc>)
  400368:	4b02      	ldr	r3, [pc, #8]	; (400374 <AFEC0_Handler+0x10>)
  40036a:	4798      	blx	r3
  40036c:	bd08      	pop	{r3, pc}
  40036e:	bf00      	nop
  400370:	4003c000 	.word	0x4003c000
  400374:	004001e5 	.word	0x004001e5

00400378 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400378:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40037a:	4802      	ldr	r0, [pc, #8]	; (400384 <AFEC1_Handler+0xc>)
  40037c:	4b02      	ldr	r3, [pc, #8]	; (400388 <AFEC1_Handler+0x10>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	40064000 	.word	0x40064000
  400388:	004001e5 	.word	0x004001e5

0040038c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40038c:	b508      	push	{r3, lr}
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <afec_enable+0x44>)
  400390:	4298      	cmp	r0, r3
  400392:	bf0c      	ite	eq
  400394:	2028      	moveq	r0, #40	; 0x28
  400396:	201d      	movne	r0, #29
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <afec_enable+0x48>)
  40039a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40039c:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <afec_enable+0x4c>)
  40039e:	789b      	ldrb	r3, [r3, #2]
  4003a0:	2bff      	cmp	r3, #255	; 0xff
  4003a2:	d100      	bne.n	4003a6 <afec_enable+0x1a>
  4003a4:	e7fe      	b.n	4003a4 <afec_enable+0x18>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003b0:	2100      	movs	r1, #0
  4003b2:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <afec_enable+0x50>)
  4003b4:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003b6:	4908      	ldr	r1, [pc, #32]	; (4003d8 <afec_enable+0x4c>)
  4003b8:	788a      	ldrb	r2, [r1, #2]
  4003ba:	3201      	adds	r2, #1
  4003bc:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003be:	b92b      	cbnz	r3, 4003cc <afec_enable+0x40>
		cpu_irq_enable();
  4003c0:	2201      	movs	r2, #1
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <afec_enable+0x50>)
  4003c4:	701a      	strb	r2, [r3, #0]
  4003c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003ca:	b662      	cpsie	i
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	40064000 	.word	0x40064000
  4003d4:	00402a1d 	.word	0x00402a1d
  4003d8:	2040c518 	.word	0x2040c518
  4003dc:	20400010 	.word	0x20400010

004003e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4003e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4003e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	bf0c      	ite	eq
  4003e8:	2400      	moveq	r4, #0
  4003ea:	2404      	movne	r4, #4
	}
	if(isi_cfg->vpol) {
  4003ec:	784b      	ldrb	r3, [r1, #1]
  4003ee:	b10b      	cbz	r3, 4003f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4003f0:	f044 0408 	orr.w	r4, r4, #8
	}
	if(isi_cfg->pck_plo) {
  4003f4:	788b      	ldrb	r3, [r1, #2]
  4003f6:	b10b      	cbz	r3, 4003fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4003f8:	f044 0410 	orr.w	r4, r4, #16
	}
	if(isi_cfg->emb_sync) {
  4003fc:	78cb      	ldrb	r3, [r1, #3]
  4003fe:	b10b      	cbz	r3, 400404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  400400:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  400404:	790b      	ldrb	r3, [r1, #4]
  400406:	b10b      	cbz	r3, 40040c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  400408:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40040c:	794a      	ldrb	r2, [r1, #5]
  40040e:	0352      	lsls	r2, r2, #13
  400410:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
  400414:	798b      	ldrb	r3, [r1, #6]
  400416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40041a:	79cb      	ldrb	r3, [r1, #7]
  40041c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
		reg |= ISI_CFG1_EMB_SYNC;
	}
	if(isi_cfg->crc_sync) {
		reg |= ISI_CFG1_CRC_SYNC;
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  400420:	4323      	orrs	r3, r4
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;
  400422:	6003      	str	r3, [r0, #0]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400424:	4b18      	ldr	r3, [pc, #96]	; (400488 <isi_init+0xa8>)
  400426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400428:	685b      	ldr	r3, [r3, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40042a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  400430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  400434:	7a0a      	ldrb	r2, [r1, #8]
  400436:	2a04      	cmp	r2, #4
  400438:	d816      	bhi.n	400468 <isi_init+0x88>
  40043a:	e8df f002 	tbb	[pc, r2]
  40043e:	0603      	.short	0x0603
  400440:	0e09      	.short	0x0e09
  400442:	11          	.byte	0x11
  400443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  400444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
  400448:	e00e      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB565:
			reg |= ISI_CFG2_COL_SPACE;
			reg |= ISI_CFG2_RGB_MODE;
  40044a:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40044e:	e00b      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB888:
			reg |= ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_RGB_MODE;
  400450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  400458:	e006      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_12BIT:
			reg |= ISI_CFG2_GRAYSCALE;
  40045a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40045e:	e003      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_8BIT:
			reg &= ~ISI_CFG2_GRAYSCALE;
			reg &= ~ISI_CFG2_RGB_SWAP;
			reg &= ~ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  400460:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  400464:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  400468:	68ca      	ldr	r2, [r1, #12]
  40046a:	3a01      	subs	r2, #1
  40046c:	4c07      	ldr	r4, [pc, #28]	; (40048c <isi_init+0xac>)
  40046e:	ea04 4402 	and.w	r4, r4, r2, lsl #16
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  400472:	690a      	ldr	r2, [r1, #16]
  400474:	3a01      	subs	r2, #1
  400476:	f3c2 020a 	ubfx	r2, r2, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40047a:	4322      	orrs	r2, r4
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40047c:	4313      	orrs	r3, r2
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
	p_isi->ISI_CFG2 = reg;
  40047e:	6043      	str	r3, [r0, #4]
}
  400480:	f85d 4b04 	ldr.w	r4, [sp], #4
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	4004c000 	.word	0x4004c000
  40048c:	07ff0000 	.word	0x07ff0000

00400490 <isi_size_configure>:
 * \param preview_hsize  Horizontal Preview size  (640 max only in RGB mode).
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
  400490:	b470      	push	{r4, r5, r6}
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400492:	4c23      	ldr	r4, [pc, #140]	; (400520 <isi_size_configure+0x90>)
  400494:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400496:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400498:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40049a:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
  40049e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
  4004a2:	4e20      	ldr	r6, [pc, #128]	; (400524 <isi_size_configure+0x94>)
  4004a4:	402e      	ands	r6, r5
  4004a6:	6046      	str	r6, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004a8:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004aa:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ac:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004ae:	b2ad      	uxth	r5, r5
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
  4004b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
  4004b4:	6045      	str	r5, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004b6:	6865      	ldr	r5, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004b8:	6864      	ldr	r4, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ba:	0eed      	lsrs	r5, r5, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004bc:	f024 4478 	bic.w	r4, r4, #4160749568	; 0xf8000000
  4004c0:	ea44 7505 	orr.w	r5, r4, r5, lsl #28
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround() | ISI_CFG2_IM_VSIZE(image_vsize - 1) | ISI_CFG2_IM_HSIZE(image_hsize - 1);
  4004c4:	3a01      	subs	r2, #1
  4004c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4004ca:	4315      	orrs	r5, r2
  4004cc:	1e4a      	subs	r2, r1, #1
  4004ce:	4c16      	ldr	r4, [pc, #88]	; (400528 <isi_size_configure+0x98>)
  4004d0:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004d4:	ea45 0204 	orr.w	r2, r5, r4
  4004d8:	6042      	str	r2, [r0, #4]

	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_VSIZE_Msk);
  4004da:	6884      	ldr	r4, [r0, #8]
  4004dc:	4a13      	ldr	r2, [pc, #76]	; (40052c <isi_size_configure+0x9c>)
  4004de:	4022      	ands	r2, r4
  4004e0:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_HSIZE_Msk);
  4004e2:	6884      	ldr	r4, [r0, #8]
  4004e4:	4a12      	ldr	r2, [pc, #72]	; (400530 <isi_size_configure+0xa0>)
  4004e6:	4022      	ands	r2, r4
  4004e8:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE |= ISI_PSIZE_PREV_VSIZE(preview_hsize - 1) | ISI_PSIZE_PREV_HSIZE(preview_vsize - 1);
  4004ea:	6885      	ldr	r5, [r0, #8]
  4004ec:	1e5a      	subs	r2, r3, #1
  4004ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
  4004f2:	9a03      	ldr	r2, [sp, #12]
  4004f4:	3a01      	subs	r2, #1
  4004f6:	4c0f      	ldr	r4, [pc, #60]	; (400534 <isi_size_configure+0xa4>)
  4004f8:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004fc:	ea46 0204 	orr.w	r2, r6, r4
  400500:	432a      	orrs	r2, r5
  400502:	6082      	str	r2, [r0, #8]

	uint32_t hRatio;
	hRatio = 1600 * image_hsize / preview_hsize;
  400504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  400508:	fb02 f101 	mul.w	r1, r2, r1
  40050c:	fbb1 f3f3 	udiv	r3, r1, r3
	p_isi->ISI_PDECF = (hRatio / 100);
  400510:	4909      	ldr	r1, [pc, #36]	; (400538 <isi_size_configure+0xa8>)
  400512:	fba1 2303 	umull	r2, r3, r1, r3
  400516:	095b      	lsrs	r3, r3, #5
  400518:	60c3      	str	r3, [r0, #12]
}
  40051a:	bc70      	pop	{r4, r5, r6}
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	4004c000 	.word	0x4004c000
  400524:	f7fff800 	.word	0xf7fff800
  400528:	07ff0000 	.word	0x07ff0000
  40052c:	fffffc00 	.word	0xfffffc00
  400530:	fc00ffff 	.word	0xfc00ffff
  400534:	03ff0000 	.word	0x03ff0000
  400538:	51eb851f 	.word	0x51eb851f

0040053c <isi_set_dma_preview_path>:
 * \param dma_ctrl  DMA preview control.
 * \param frame_buf_start_addr  DMA preview base address.
 */
void isi_set_dma_preview_path(Isi *p_isi, uint8_t frate,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
  40053c:	b410      	push	{r4}
	if(frate > 7) {
		frate = 7;
	}
	p_isi->ISI_CFG1 |= ISI_CFG1_FRATE(frate);
  40053e:	6804      	ldr	r4, [r0, #0]
  400540:	2907      	cmp	r1, #7
  400542:	bf28      	it	cs
  400544:	2107      	movcs	r1, #7
  400546:	0209      	lsls	r1, r1, #8
  400548:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  40054c:	4321      	orrs	r1, r4
  40054e:	6001      	str	r1, [r0, #0]

	p_isi->ISI_DMA_P_DSCR = base_buf_desc;
  400550:	64c2      	str	r2, [r0, #76]	; 0x4c
	p_isi->ISI_DMA_P_CTRL = dma_ctrl;
  400552:	6483      	str	r3, [r0, #72]	; 0x48
	p_isi->ISI_DMA_P_ADDR = frame_buf_start_addr;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	6443      	str	r3, [r0, #68]	; 0x44

}
  400558:	f85d 4b04 	ldr.w	r4, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400564:	4604      	mov	r4, r0
  400566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <pio_handler_process+0x44>)
  40056a:	4798      	blx	r3
  40056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40056e:	4620      	mov	r0, r4
  400570:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <pio_handler_process+0x48>)
  400572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400574:	4005      	ands	r5, r0
  400576:	d013      	beq.n	4005a0 <pio_handler_process+0x40>
  400578:	4c0c      	ldr	r4, [pc, #48]	; (4005ac <pio_handler_process+0x4c>)
  40057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	4543      	cmp	r3, r8
  400582:	d108      	bne.n	400596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400584:	6861      	ldr	r1, [r4, #4]
  400586:	4229      	tst	r1, r5
  400588:	d005      	beq.n	400596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40058a:	68e3      	ldr	r3, [r4, #12]
  40058c:	4640      	mov	r0, r8
  40058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400590:	6863      	ldr	r3, [r4, #4]
  400592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400596:	42b4      	cmp	r4, r6
  400598:	d002      	beq.n	4005a0 <pio_handler_process+0x40>
  40059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40059c:	2d00      	cmp	r5, #0
  40059e:	d1ee      	bne.n	40057e <pio_handler_process+0x1e>
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	004028f1 	.word	0x004028f1
  4005a8:	004028f5 	.word	0x004028f5
  4005ac:	2040096c 	.word	0x2040096c

004005b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005b2:	4802      	ldr	r0, [pc, #8]	; (4005bc <PIOA_Handler+0xc>)
  4005b4:	210a      	movs	r1, #10
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOA_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e0e00 	.word	0x400e0e00
  4005c0:	00400561 	.word	0x00400561

004005c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOB_Handler+0xc>)
  4005c8:	210b      	movs	r1, #11
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOB_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1000 	.word	0x400e1000
  4005d4:	00400561 	.word	0x00400561

004005d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005da:	4802      	ldr	r0, [pc, #8]	; (4005e4 <PIOC_Handler+0xc>)
  4005dc:	210c      	movs	r1, #12
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <PIOC_Handler+0x10>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	400e1200 	.word	0x400e1200
  4005e8:	00400561 	.word	0x00400561

004005ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOD_Handler+0xc>)
  4005f0:	2110      	movs	r1, #16
  4005f2:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOD_Handler+0x10>)
  4005f4:	4798      	blx	r3
  4005f6:	bd08      	pop	{r3, pc}
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00400561 	.word	0x00400561

00400600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400602:	4802      	ldr	r0, [pc, #8]	; (40060c <PIOE_Handler+0xc>)
  400604:	2111      	movs	r1, #17
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOE_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e1600 	.word	0x400e1600
  400610:	00400561 	.word	0x00400561

00400614 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400614:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  400616:	b930      	cbnz	r0, 400626 <qspi_initialize+0x12>
  400618:	4859      	ldr	r0, [pc, #356]	; (400780 <qspi_initialize+0x16c>)
  40061a:	f240 1117 	movw	r1, #279	; 0x117
  40061e:	4a59      	ldr	r2, [pc, #356]	; (400784 <qspi_initialize+0x170>)
  400620:	4b59      	ldr	r3, [pc, #356]	; (400788 <qspi_initialize+0x174>)
  400622:	4c5a      	ldr	r4, [pc, #360]	; (40078c <qspi_initialize+0x178>)
  400624:	47a0      	blx	r4
  400626:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  400628:	2202      	movs	r2, #2
  40062a:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  40062c:	691a      	ldr	r2, [r3, #16]
  40062e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400632:	d1fb      	bne.n	40062c <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  400634:	2280      	movs	r2, #128	; 0x80
  400636:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  400638:	780a      	ldrb	r2, [r1, #0]
  40063a:	2a01      	cmp	r2, #1
  40063c:	d104      	bne.n	400648 <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  40063e:	685a      	ldr	r2, [r3, #4]
  400640:	f042 0201 	orr.w	r2, r2, #1
  400644:	605a      	str	r2, [r3, #4]
  400646:	e001      	b.n	40064c <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  400648:	685a      	ldr	r2, [r3, #4]
  40064a:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  40064c:	784a      	ldrb	r2, [r1, #1]
  40064e:	b122      	cbz	r2, 40065a <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  400650:	685a      	ldr	r2, [r3, #4]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	605a      	str	r2, [r3, #4]
  400658:	e003      	b.n	400662 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  40065a:	685a      	ldr	r2, [r3, #4]
  40065c:	f022 0202 	bic.w	r2, r2, #2
  400660:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  400662:	788a      	ldrb	r2, [r1, #2]
  400664:	b122      	cbz	r2, 400670 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  400666:	685a      	ldr	r2, [r3, #4]
  400668:	f042 0204 	orr.w	r2, r2, #4
  40066c:	605a      	str	r2, [r3, #4]
  40066e:	e03c      	b.n	4006ea <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	f022 0204 	bic.w	r2, r2, #4
  400676:	605a      	str	r2, [r3, #4]
  400678:	e037      	b.n	4006ea <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  40067a:	6a1a      	ldr	r2, [r3, #32]
  40067c:	f042 0201 	orr.w	r2, r2, #1
  400680:	621a      	str	r2, [r3, #32]
  400682:	e053      	b.n	40072c <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400684:	6a1a      	ldr	r2, [r3, #32]
  400686:	f022 0201 	bic.w	r2, r2, #1
  40068a:	621a      	str	r2, [r3, #32]
  40068c:	e04e      	b.n	40072c <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  40068e:	6a1a      	ldr	r2, [r3, #32]
  400690:	f042 0202 	orr.w	r2, r2, #2
  400694:	621a      	str	r2, [r3, #32]
  400696:	e04d      	b.n	400734 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  400698:	6a1a      	ldr	r2, [r3, #32]
  40069a:	f022 0202 	bic.w	r2, r2, #2
  40069e:	621a      	str	r2, [r3, #32]
  4006a0:	e048      	b.n	400734 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a2:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006a4:	0212      	lsls	r2, r2, #8
  4006a6:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006ac:	4302      	orrs	r2, r0
  4006ae:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e047      	b.n	400744 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  4006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006b6:	f042 0201 	orr.w	r2, r2, #1
  4006ba:	641a      	str	r2, [r3, #64]	; 0x40
  4006bc:	e003      	b.n	4006c6 <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  4006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006c0:	f022 0201 	bic.w	r2, r2, #1
  4006c4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  4006c6:	b124      	cbz	r4, 4006d2 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  4006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006ca:	f042 0202 	orr.w	r2, r2, #2
  4006ce:	641a      	str	r2, [r3, #64]	; 0x40
  4006d0:	e04a      	b.n	400768 <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  4006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006d4:	f022 0202 	bic.w	r2, r2, #2
  4006d8:	641a      	str	r2, [r3, #64]	; 0x40
  4006da:	e045      	b.n	400768 <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  4006dc:	6459      	str	r1, [r3, #68]	; 0x44
  4006de:	e049      	b.n	400774 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4006e0:	691a      	ldr	r2, [r3, #16]
  4006e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4006e6:	d0fb      	beq.n	4006e0 <qspi_initialize+0xcc>
  4006e8:	e047      	b.n	40077a <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006ea:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  4006ec:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006ee:	0100      	lsls	r0, r0, #4
  4006f0:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006f8:	4302      	orrs	r2, r0
  4006fa:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  4006fc:	685a      	ldr	r2, [r3, #4]
  4006fe:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400702:	684a      	ldr	r2, [r1, #4]
  400704:	4302      	orrs	r2, r0
  400706:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  400708:	685a      	ldr	r2, [r3, #4]
  40070a:	7a08      	ldrb	r0, [r1, #8]
  40070c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400710:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400714:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  400716:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  400718:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40071a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40071e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  400722:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  400724:	690a      	ldr	r2, [r1, #16]
  400726:	2a00      	cmp	r2, #0
  400728:	d0ac      	beq.n	400684 <qspi_initialize+0x70>
  40072a:	e7a6      	b.n	40067a <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  40072c:	694a      	ldr	r2, [r1, #20]
  40072e:	2a00      	cmp	r2, #0
  400730:	d0b2      	beq.n	400698 <qspi_initialize+0x84>
  400732:	e7ac      	b.n	40068e <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  400734:	6988      	ldr	r0, [r1, #24]
  400736:	4a16      	ldr	r2, [pc, #88]	; (400790 <qspi_initialize+0x17c>)
  400738:	fbb2 f2f0 	udiv	r2, r2, r0
  40073c:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  40073e:	2aff      	cmp	r2, #255	; 0xff
  400740:	d9af      	bls.n	4006a2 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  400742:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  400744:	6a1a      	ldr	r2, [r3, #32]
  400746:	7f0c      	ldrb	r4, [r1, #28]
  400748:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  40074c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400750:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  400752:	f891 5020 	ldrb.w	r5, [r1, #32]
  400756:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  40075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40075c:	f022 0203 	bic.w	r2, r2, #3
  400760:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  400762:	2d00      	cmp	r5, #0
  400764:	d1a6      	bne.n	4006b4 <qspi_initialize+0xa0>
  400766:	e7aa      	b.n	4006be <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  400768:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  40076a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40076e:	f012 0f01 	tst.w	r2, #1
  400772:	d0b3      	beq.n	4006dc <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  400774:	2201      	movs	r2, #1
  400776:	601a      	str	r2, [r3, #0]
  400778:	e7b2      	b.n	4006e0 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  40077a:	b240      	sxtb	r0, r0
}
  40077c:	bd38      	pop	{r3, r4, r5, pc}
  40077e:	bf00      	nop
  400780:	00412ef4 	.word	0x00412ef4
  400784:	00412ee4 	.word	0x00412ee4
  400788:	00412f18 	.word	0x00412f18
  40078c:	0040b319 	.word	0x0040b319
  400790:	08f0d180 	.word	0x08f0d180

00400794 <qspi_read>:
 * \param us_data      Pointer to read data.
 * \param num_of_bytes Read data numbers.
 * \return status Read option result.
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400796:	b930      	cbnz	r0, 4007a6 <qspi_read+0x12>
  400798:	4836      	ldr	r0, [pc, #216]	; (400874 <qspi_read+0xe0>)
  40079a:	f44f 719f 	mov.w	r1, #318	; 0x13e
  40079e:	4a36      	ldr	r2, [pc, #216]	; (400878 <qspi_read+0xe4>)
  4007a0:	4b36      	ldr	r3, [pc, #216]	; (40087c <qspi_read+0xe8>)
  4007a2:	4c37      	ldr	r4, [pc, #220]	; (400880 <qspi_read+0xec>)
  4007a4:	47a0      	blx	r4
  4007a6:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  4007a8:	2a00      	cmp	r2, #0
  4007aa:	d05c      	beq.n	400866 <qspi_read+0xd2>
	uint32_t num_of_bytes_read = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
  4007ac:	2a01      	cmp	r2, #1
  4007ae:	d11e      	bne.n	4007ee <qspi_read+0x5a>
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007b0:	6902      	ldr	r2, [r0, #16]
  4007b2:	f012 0f01 	tst.w	r2, #1
  4007b6:	bf08      	it	eq
  4007b8:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
  4007bc:	d012      	beq.n	4007e4 <qspi_read+0x50>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007be:	689a      	ldr	r2, [r3, #8]
  4007c0:	800a      	strh	r2, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007c2:	691a      	ldr	r2, [r3, #16]
  4007c4:	f012 0f04 	tst.w	r2, #4
  4007c8:	d0fb      	beq.n	4007c2 <qspi_read+0x2e>
	qspi->QSPI_TDR = w_data ;
  4007ca:	22ff      	movs	r2, #255	; 0xff
  4007cc:	60da      	str	r2, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007ce:	691a      	ldr	r2, [r3, #16]
  4007d0:	f012 0f02 	tst.w	r2, #2
  4007d4:	d0fb      	beq.n	4007ce <qspi_read+0x3a>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007d6:	689b      	ldr	r3, [r3, #8]
  4007d8:	800b      	strh	r3, [r1, #0]
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
				*us_data = qspi_read_spi(qspi);
				qspi_write_spi(qspi, dummy);
				*us_data = qspi_read_spi(qspi);
				num_of_attempt = 0;
				status = STATUS_OK;
  4007da:	2000      	movs	r0, #0
				break;
  4007dc:	e048      	b.n	400870 <qspi_read+0xdc>
			} else {
				if(num_of_attempt > 0xFFFF) {
  4007de:	3a01      	subs	r2, #1
  4007e0:	d100      	bne.n	4007e4 <qspi_read+0x50>
  4007e2:	e042      	b.n	40086a <qspi_read+0xd6>
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007e4:	6918      	ldr	r0, [r3, #16]
  4007e6:	f010 0f01 	tst.w	r0, #1
  4007ea:	d0f8      	beq.n	4007de <qspi_read+0x4a>
  4007ec:	e7e7      	b.n	4007be <qspi_read+0x2a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007ee:	6918      	ldr	r0, [r3, #16]
  4007f0:	f010 0f04 	tst.w	r0, #4
  4007f4:	d0fb      	beq.n	4007ee <qspi_read+0x5a>
	qspi->QSPI_TDR = w_data ;
  4007f6:	2000      	movs	r0, #0
  4007f8:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007fa:	6918      	ldr	r0, [r3, #16]
  4007fc:	f010 0f02 	tst.w	r0, #2
  400800:	d0fb      	beq.n	4007fa <qspi_read+0x66>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400802:	6918      	ldr	r0, [r3, #16]
  400804:	f010 0f04 	tst.w	r0, #4
  400808:	d0fb      	beq.n	400802 <qspi_read+0x6e>
	qspi->QSPI_TDR = w_data ;
  40080a:	2000      	movs	r0, #0
  40080c:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40080e:	6918      	ldr	r0, [r3, #16]
  400810:	f010 0f02 	tst.w	r0, #2
  400814:	d0fb      	beq.n	40080e <qspi_read+0x7a>
  400816:	2400      	movs	r4, #0
  400818:	4625      	mov	r5, r4
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40081a:	f04f 0e19 	mov.w	lr, #25
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
	qspi->QSPI_TDR = w_data ;
  40081e:	4626      	mov	r6, r4
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
  400820:	4627      	mov	r7, r4
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
  400822:	6918      	ldr	r0, [r3, #16]
  400824:	f010 0f02 	tst.w	r0, #2
  400828:	d015      	beq.n	400856 <qspi_read+0xc2>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  40082a:	6898      	ldr	r0, [r3, #8]
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
				*pw_data= qspi_read_spi(qspi);
  40082c:	7008      	strb	r0, [r1, #0]
				if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  40082e:	6858      	ldr	r0, [r3, #4]
  400830:	f410 6f70 	tst.w	r0, #3840	; 0xf00
  400834:	d001      	beq.n	40083a <qspi_read+0xa6>
					pw_data += sizeof(uint16_t);
  400836:	3102      	adds	r1, #2
  400838:	e000      	b.n	40083c <qspi_read+0xa8>
				} else {
					pw_data += sizeof(uint8_t);
  40083a:	3101      	adds	r1, #1
				}
				num_of_bytes_read++;
  40083c:	3501      	adds	r5, #1
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40083e:	6918      	ldr	r0, [r3, #16]
  400840:	f010 0f04 	tst.w	r0, #4
  400844:	d0fb      	beq.n	40083e <qspi_read+0xaa>
	qspi->QSPI_TDR = w_data ;
  400846:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  400848:	6918      	ldr	r0, [r3, #16]
  40084a:	f010 0f02 	tst.w	r0, #2
  40084e:	d0fb      	beq.n	400848 <qspi_read+0xb4>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400850:	4634      	mov	r4, r6
				status = STATUS_OK;
  400852:	4638      	mov	r0, r7
  400854:	e004      	b.n	400860 <qspi_read+0xcc>
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
  400856:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40085a:	d208      	bcs.n	40086e <qspi_read+0xda>
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
					num_of_attempt++;
  40085c:	3401      	adds	r4, #1
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40085e:	4670      	mov	r0, lr
		//qspi_read_spi(qspi);
		//qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
  400860:	42aa      	cmp	r2, r5
  400862:	d8de      	bhi.n	400822 <qspi_read+0x8e>
  400864:	e004      	b.n	400870 <qspi_read+0xdc>
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  400866:	2000      	movs	r0, #0
  400868:	e002      	b.n	400870 <qspi_read+0xdc>
				num_of_attempt = 0;
				status = STATUS_OK;
				break;
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086a:	20fd      	movs	r0, #253	; 0xfd
  40086c:	e000      	b.n	400870 <qspi_read+0xdc>
				status = STATUS_OK;
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086e:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400870:	b240      	sxtb	r0, r0
  400872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400874:	00412f20 	.word	0x00412f20
  400878:	00412fc0 	.word	0x00412fc0
  40087c:	00412f18 	.word	0x00412f18
  400880:	0040b319 	.word	0x0040b319

00400884 <qspi_write>:
 * \param us_data      Pointer to data to be written.
 * \param num_of_bytes Write data numbers.
 * \return status      Write option result.
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400886:	b930      	cbnz	r0, 400896 <qspi_write+0x12>
  400888:	4823      	ldr	r0, [pc, #140]	; (400918 <qspi_write+0x94>)
  40088a:	f240 118b 	movw	r1, #395	; 0x18b
  40088e:	4a23      	ldr	r2, [pc, #140]	; (40091c <qspi_write+0x98>)
  400890:	4b23      	ldr	r3, [pc, #140]	; (400920 <qspi_write+0x9c>)
  400892:	4c24      	ldr	r4, [pc, #144]	; (400924 <qspi_write+0xa0>)
  400894:	47a0      	blx	r4
  400896:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  400898:	2a00      	cmp	r2, #0
  40089a:	d038      	beq.n	40090e <qspi_write+0x8a>
	uint32_t num_of_bytes_write = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint8_t Addr_Inc = 0;

	if (num_of_bytes == 1) {
  40089c:	2a01      	cmp	r2, #1
  40089e:	d114      	bne.n	4008ca <qspi_write+0x46>
  4008a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
  4008a4:	6918      	ldr	r0, [r3, #16]
  4008a6:	f010 0f02 	tst.w	r0, #2
  4008aa:	d00b      	beq.n	4008c4 <qspi_write+0x40>
				qspi_write_spi(qspi, (uint16_t)(*us_data));
  4008ac:	8809      	ldrh	r1, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ae:	691a      	ldr	r2, [r3, #16]
  4008b0:	f012 0f04 	tst.w	r2, #4
  4008b4:	d0fb      	beq.n	4008ae <qspi_write+0x2a>
	qspi->QSPI_TDR = w_data ;
  4008b6:	60d9      	str	r1, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008b8:	691a      	ldr	r2, [r3, #16]
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d0fb      	beq.n	4008b8 <qspi_write+0x34>
	if (num_of_bytes == 1) {
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
				qspi_write_spi(qspi, (uint16_t)(*us_data));
				num_of_attempt = 0;
				status = STATUS_OK;
  4008c0:	2000      	movs	r0, #0
  4008c2:	e027      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
  4008c4:	3a01      	subs	r2, #1
  4008c6:	d1ed      	bne.n	4008a4 <qspi_write+0x20>
  4008c8:	e023      	b.n	400912 <qspi_write+0x8e>
					break;
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  4008ca:	6840      	ldr	r0, [r0, #4]
  4008cc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
  4008d0:	2800      	cmp	r0, #0
  4008d2:	bf14      	ite	ne
  4008d4:	f04f 0e02 	movne.w	lr, #2
  4008d8:	f04f 0e01 	moveq.w	lr, #1
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
			Addr_Inc = sizeof(uint16_t);
  4008dc:	2400      	movs	r4, #0
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
			} else {
				status = STATUS_ERR_BUSY;
  4008de:	2519      	movs	r5, #25
		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
  4008e0:	4627      	mov	r7, r4
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
  4008e2:	6918      	ldr	r0, [r3, #16]
  4008e4:	f010 0f04 	tst.w	r0, #4
  4008e8:	d00c      	beq.n	400904 <qspi_write+0x80>
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
  4008ea:	780e      	ldrb	r6, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ec:	6918      	ldr	r0, [r3, #16]
  4008ee:	f010 0f04 	tst.w	r0, #4
  4008f2:	d0fb      	beq.n	4008ec <qspi_write+0x68>
	qspi->QSPI_TDR = w_data ;
  4008f4:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008f6:	6918      	ldr	r0, [r3, #16]
  4008f8:	f010 0f02 	tst.w	r0, #2
  4008fc:	d0fb      	beq.n	4008f6 <qspi_write+0x72>
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
  4008fe:	4471      	add	r1, lr
				num_of_attempt = 0;
				status = STATUS_OK;
  400900:	4638      	mov	r0, r7
  400902:	e000      	b.n	400906 <qspi_write+0x82>
			} else {
				status = STATUS_ERR_BUSY;
  400904:	4628      	mov	r0, r5
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
  400906:	3401      	adds	r4, #1
  400908:	42a2      	cmp	r2, r4
  40090a:	d2ea      	bcs.n	4008e2 <qspi_write+0x5e>
  40090c:	e002      	b.n	400914 <qspi_write+0x90>
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  40090e:	2000      	movs	r0, #0
  400910:	e000      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  400912:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400914:	b240      	sxtb	r0, r0
  400916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400918:	00412f20 	.word	0x00412f20
  40091c:	00412fcc 	.word	0x00412fcc
  400920:	00412f18 	.word	0x00412f18
  400924:	0040b319 	.word	0x0040b319

00400928 <rstc_start_software_reset>:
 */
void rstc_start_software_reset(
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
  400928:	4b01      	ldr	r3, [pc, #4]	; (400930 <rstc_start_software_reset+0x8>)
  40092a:	6003      	str	r3, [r0, #0]
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	a5000001 	.word	0xa5000001

00400934 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400934:	4b48      	ldr	r3, [pc, #288]	; (400a58 <sdramc_init+0x124>)
  400936:	781b      	ldrb	r3, [r3, #0]
  400938:	2bff      	cmp	r3, #255	; 0xff
  40093a:	d100      	bne.n	40093e <sdramc_init+0xa>
  40093c:	e7fe      	b.n	40093c <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40093e:	b470      	push	{r4, r5, r6}
  400940:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400942:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400946:	b672      	cpsid	i
  400948:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40094c:	2400      	movs	r4, #0
  40094e:	4a43      	ldr	r2, [pc, #268]	; (400a5c <sdramc_init+0x128>)
  400950:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400952:	4c41      	ldr	r4, [pc, #260]	; (400a58 <sdramc_init+0x124>)
  400954:	7822      	ldrb	r2, [r4, #0]
  400956:	3201      	adds	r2, #1
  400958:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40095a:	b92b      	cbnz	r3, 400968 <sdramc_init+0x34>
		cpu_irq_enable();
  40095c:	2201      	movs	r2, #1
  40095e:	4b3f      	ldr	r3, [pc, #252]	; (400a5c <sdramc_init+0x128>)
  400960:	701a      	strb	r2, [r3, #0]
  400962:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400966:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  400968:	6883      	ldr	r3, [r0, #8]
  40096a:	4a3d      	ldr	r2, [pc, #244]	; (400a60 <sdramc_init+0x12c>)
  40096c:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  40096e:	2300      	movs	r3, #0
  400970:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  400972:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400974:	9301      	str	r3, [sp, #4]
  400976:	4b3b      	ldr	r3, [pc, #236]	; (400a64 <sdramc_init+0x130>)
  400978:	fba3 2301 	umull	r2, r3, r3, r1
  40097c:	0c9a      	lsrs	r2, r3, #18
  40097e:	23c8      	movs	r3, #200	; 0xc8
  400980:	fb03 f302 	mul.w	r3, r3, r2
  400984:	4a38      	ldr	r2, [pc, #224]	; (400a68 <sdramc_init+0x134>)
  400986:	fba2 2303 	umull	r2, r3, r2, r3
  40098a:	089b      	lsrs	r3, r3, #2
  40098c:	9a01      	ldr	r2, [sp, #4]
  40098e:	4293      	cmp	r3, r2
  400990:	d905      	bls.n	40099e <sdramc_init+0x6a>
  400992:	9a01      	ldr	r2, [sp, #4]
  400994:	3201      	adds	r2, #1
  400996:	9201      	str	r2, [sp, #4]
  400998:	9a01      	ldr	r2, [sp, #4]
  40099a:	429a      	cmp	r2, r3
  40099c:	d3f9      	bcc.n	400992 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  40099e:	4d30      	ldr	r5, [pc, #192]	; (400a60 <sdramc_init+0x12c>)
  4009a0:	2201      	movs	r2, #1
  4009a2:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  4009a4:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4009a8:	2200      	movs	r2, #0
  4009aa:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  4009ac:	2602      	movs	r6, #2
  4009ae:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  4009b0:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  4009b2:	9201      	str	r2, [sp, #4]
  4009b4:	9a01      	ldr	r2, [sp, #4]
  4009b6:	429a      	cmp	r2, r3
  4009b8:	d205      	bcs.n	4009c6 <sdramc_init+0x92>
  4009ba:	9a01      	ldr	r2, [sp, #4]
  4009bc:	3201      	adds	r2, #1
  4009be:	9201      	str	r2, [sp, #4]
  4009c0:	9a01      	ldr	r2, [sp, #4]
  4009c2:	429a      	cmp	r2, r3
  4009c4:	d3f9      	bcc.n	4009ba <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009c6:	4b26      	ldr	r3, [pc, #152]	; (400a60 <sdramc_init+0x12c>)
  4009c8:	2404      	movs	r4, #4
  4009ca:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  4009cc:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  4009d0:	2501      	movs	r5, #1
  4009d2:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  4009d6:	2502      	movs	r5, #2
  4009d8:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009da:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  4009dc:	2503      	movs	r5, #3
  4009de:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e0:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  4009e2:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  4009e6:	2605      	movs	r6, #5
  4009e8:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ea:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  4009ec:	2606      	movs	r6, #6
  4009ee:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009f0:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  4009f2:	2607      	movs	r6, #7
  4009f4:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009f6:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  4009f8:	2408      	movs	r4, #8
  4009fa:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4009fc:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009fe:	6844      	ldr	r4, [r0, #4]
  400a00:	0064      	lsls	r4, r4, #1
  400a02:	4414      	add	r4, r2
  400a04:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  400a08:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a0a:	6844      	ldr	r4, [r0, #4]
  400a0c:	0064      	lsls	r4, r4, #1
  400a0e:	4414      	add	r4, r2
  400a10:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a12:	6844      	ldr	r4, [r0, #4]
  400a14:	0064      	lsls	r4, r4, #1
  400a16:	4414      	add	r4, r2
  400a18:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a1a:	6840      	ldr	r0, [r0, #4]
  400a1c:	0040      	lsls	r0, r0, #1
  400a1e:	4410      	add	r0, r2
  400a20:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  400a22:	2000      	movs	r0, #0
  400a24:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  400a26:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  400a28:	4a10      	ldr	r2, [pc, #64]	; (400a6c <sdramc_init+0x138>)
  400a2a:	fba2 1201 	umull	r1, r2, r2, r1
  400a2e:	0992      	lsrs	r2, r2, #6
  400a30:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  400a32:	9901      	ldr	r1, [sp, #4]
  400a34:	f641 6278 	movw	r2, #7800	; 0x1e78
  400a38:	fb02 f201 	mul.w	r2, r2, r1
  400a3c:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  400a3e:	9a01      	ldr	r2, [sp, #4]
  400a40:	4908      	ldr	r1, [pc, #32]	; (400a64 <sdramc_init+0x130>)
  400a42:	fba1 1202 	umull	r1, r2, r1, r2
  400a46:	0c92      	lsrs	r2, r2, #18
  400a48:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  400a4a:	9a01      	ldr	r2, [sp, #4]
  400a4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400a50:	605a      	str	r2, [r3, #4]
}
  400a52:	b003      	add	sp, #12
  400a54:	bc70      	pop	{r4, r5, r6}
  400a56:	4770      	bx	lr
  400a58:	2040c518 	.word	0x2040c518
  400a5c:	20400010 	.word	0x20400010
  400a60:	40084000 	.word	0x40084000
  400a64:	431bde83 	.word	0x431bde83
  400a68:	aaaaaaab 	.word	0xaaaaaaab
  400a6c:	10624dd3 	.word	0x10624dd3

00400a70 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400a70:	2901      	cmp	r1, #1
  400a72:	d104      	bne.n	400a7e <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400a74:	6882      	ldr	r2, [r0, #8]
  400a76:	4b06      	ldr	r3, [pc, #24]	; (400a90 <supc_switch_sclk_to_32kxtal+0x20>)
  400a78:	4313      	orrs	r3, r2
  400a7a:	6083      	str	r3, [r0, #8]
  400a7c:	e003      	b.n	400a86 <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400a7e:	6882      	ldr	r2, [r0, #8]
  400a80:	4b04      	ldr	r3, [pc, #16]	; (400a94 <supc_switch_sclk_to_32kxtal+0x24>)
  400a82:	4013      	ands	r3, r2
  400a84:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400a86:	6802      	ldr	r2, [r0, #0]
  400a88:	4b03      	ldr	r3, [pc, #12]	; (400a98 <supc_switch_sclk_to_32kxtal+0x28>)
  400a8a:	4313      	orrs	r3, r2
  400a8c:	6003      	str	r3, [r0, #0]
  400a8e:	4770      	bx	lr
  400a90:	a5100000 	.word	0xa5100000
  400a94:	5aefffff 	.word	0x5aefffff
  400a98:	a5000008 	.word	0xa5000008

00400a9c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aa0:	6043      	str	r3, [r0, #4]
  400aa2:	4770      	bx	lr

00400aa4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <prvTaskExitError+0x38>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aac:	d00a      	beq.n	400ac4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400aae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ab2:	b672      	cpsid	i
  400ab4:	f383 8811 	msr	BASEPRI, r3
  400ab8:	f3bf 8f6f 	isb	sy
  400abc:	f3bf 8f4f 	dsb	sy
  400ac0:	b662      	cpsie	i
  400ac2:	e7fe      	b.n	400ac2 <prvTaskExitError+0x1e>
  400ac4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ac8:	b672      	cpsid	i
  400aca:	f383 8811 	msr	BASEPRI, r3
  400ace:	f3bf 8f6f 	isb	sy
  400ad2:	f3bf 8f4f 	dsb	sy
  400ad6:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400ad8:	e7fe      	b.n	400ad8 <prvTaskExitError+0x34>
  400ada:	bf00      	nop
  400adc:	2040000c 	.word	0x2040000c

00400ae0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400ae0:	4806      	ldr	r0, [pc, #24]	; (400afc <prvPortStartFirstTask+0x1c>)
  400ae2:	6800      	ldr	r0, [r0, #0]
  400ae4:	6800      	ldr	r0, [r0, #0]
  400ae6:	f380 8808 	msr	MSP, r0
  400aea:	b662      	cpsie	i
  400aec:	b661      	cpsie	f
  400aee:	f3bf 8f4f 	dsb	sy
  400af2:	f3bf 8f6f 	isb	sy
  400af6:	df00      	svc	0
  400af8:	bf00      	nop
  400afa:	0000      	.short	0x0000
  400afc:	e000ed08 	.word	0xe000ed08

00400b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b10 <vPortEnableVFP+0x10>
  400b04:	6801      	ldr	r1, [r0, #0]
  400b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b0a:	6001      	str	r1, [r0, #0]
  400b0c:	4770      	bx	lr
  400b0e:	0000      	.short	0x0000
  400b10:	e000ed88 	.word	0xe000ed88

00400b14 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b18:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400b1c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400b20:	4b05      	ldr	r3, [pc, #20]	; (400b38 <pxPortInitialiseStack+0x24>)
  400b22:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400b26:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400b2a:	f06f 0302 	mvn.w	r3, #2
  400b2e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400b32:	3844      	subs	r0, #68	; 0x44
  400b34:	4770      	bx	lr
  400b36:	bf00      	nop
  400b38:	00400aa5 	.word	0x00400aa5

00400b3c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <pxCurrentTCBConst2>)
  400b3e:	6819      	ldr	r1, [r3, #0]
  400b40:	6808      	ldr	r0, [r1, #0]
  400b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b46:	f380 8809 	msr	PSP, r0
  400b4a:	f3bf 8f6f 	isb	sy
  400b4e:	f04f 0000 	mov.w	r0, #0
  400b52:	f380 8811 	msr	BASEPRI, r0
  400b56:	4770      	bx	lr

00400b58 <pxCurrentTCBConst2>:
  400b58:	2040c420 	.word	0x2040c420

00400b5c <vPortEnterCritical>:
  400b5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b60:	b672      	cpsid	i
  400b62:	f383 8811 	msr	BASEPRI, r3
  400b66:	f3bf 8f6f 	isb	sy
  400b6a:	f3bf 8f4f 	dsb	sy
  400b6e:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400b70:	4a0b      	ldr	r2, [pc, #44]	; (400ba0 <vPortEnterCritical+0x44>)
  400b72:	6813      	ldr	r3, [r2, #0]
  400b74:	3301      	adds	r3, #1
  400b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400b78:	2b01      	cmp	r3, #1
  400b7a:	d10f      	bne.n	400b9c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400b7c:	4b09      	ldr	r3, [pc, #36]	; (400ba4 <vPortEnterCritical+0x48>)
  400b7e:	681b      	ldr	r3, [r3, #0]
  400b80:	f013 0fff 	tst.w	r3, #255	; 0xff
  400b84:	d00a      	beq.n	400b9c <vPortEnterCritical+0x40>
  400b86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b8a:	b672      	cpsid	i
  400b8c:	f383 8811 	msr	BASEPRI, r3
  400b90:	f3bf 8f6f 	isb	sy
  400b94:	f3bf 8f4f 	dsb	sy
  400b98:	b662      	cpsie	i
  400b9a:	e7fe      	b.n	400b9a <vPortEnterCritical+0x3e>
  400b9c:	4770      	bx	lr
  400b9e:	bf00      	nop
  400ba0:	2040000c 	.word	0x2040000c
  400ba4:	e000ed04 	.word	0xe000ed04

00400ba8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400ba8:	4b0a      	ldr	r3, [pc, #40]	; (400bd4 <vPortExitCritical+0x2c>)
  400baa:	681b      	ldr	r3, [r3, #0]
  400bac:	b953      	cbnz	r3, 400bc4 <vPortExitCritical+0x1c>
  400bae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb2:	b672      	cpsid	i
  400bb4:	f383 8811 	msr	BASEPRI, r3
  400bb8:	f3bf 8f6f 	isb	sy
  400bbc:	f3bf 8f4f 	dsb	sy
  400bc0:	b662      	cpsie	i
  400bc2:	e7fe      	b.n	400bc2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400bc4:	3b01      	subs	r3, #1
  400bc6:	4a03      	ldr	r2, [pc, #12]	; (400bd4 <vPortExitCritical+0x2c>)
  400bc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400bca:	b90b      	cbnz	r3, 400bd0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400bcc:	f383 8811 	msr	BASEPRI, r3
  400bd0:	4770      	bx	lr
  400bd2:	bf00      	nop
  400bd4:	2040000c 	.word	0x2040000c

00400bd8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400bd8:	f3ef 8009 	mrs	r0, PSP
  400bdc:	f3bf 8f6f 	isb	sy
  400be0:	4b15      	ldr	r3, [pc, #84]	; (400c38 <pxCurrentTCBConst>)
  400be2:	681a      	ldr	r2, [r3, #0]
  400be4:	f01e 0f10 	tst.w	lr, #16
  400be8:	bf08      	it	eq
  400bea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400bee:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf2:	6010      	str	r0, [r2, #0]
  400bf4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400bf8:	f04f 0080 	mov.w	r0, #128	; 0x80
  400bfc:	b672      	cpsid	i
  400bfe:	f380 8811 	msr	BASEPRI, r0
  400c02:	f3bf 8f4f 	dsb	sy
  400c06:	f3bf 8f6f 	isb	sy
  400c0a:	b662      	cpsie	i
  400c0c:	f001 f92c 	bl	401e68 <vTaskSwitchContext>
  400c10:	f04f 0000 	mov.w	r0, #0
  400c14:	f380 8811 	msr	BASEPRI, r0
  400c18:	bc08      	pop	{r3}
  400c1a:	6819      	ldr	r1, [r3, #0]
  400c1c:	6808      	ldr	r0, [r1, #0]
  400c1e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c22:	f01e 0f10 	tst.w	lr, #16
  400c26:	bf08      	it	eq
  400c28:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400c2c:	f380 8809 	msr	PSP, r0
  400c30:	f3bf 8f6f 	isb	sy
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop

00400c38 <pxCurrentTCBConst>:
  400c38:	2040c420 	.word	0x2040c420

00400c3c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400c3c:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400c3e:	f3ef 8311 	mrs	r3, BASEPRI
  400c42:	f04f 0280 	mov.w	r2, #128	; 0x80
  400c46:	b672      	cpsid	i
  400c48:	f382 8811 	msr	BASEPRI, r2
  400c4c:	f3bf 8f6f 	isb	sy
  400c50:	f3bf 8f4f 	dsb	sy
  400c54:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400c56:	4b05      	ldr	r3, [pc, #20]	; (400c6c <SysTick_Handler+0x30>)
  400c58:	4798      	blx	r3
  400c5a:	b118      	cbz	r0, 400c64 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c60:	4b03      	ldr	r3, [pc, #12]	; (400c70 <SysTick_Handler+0x34>)
  400c62:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c64:	2300      	movs	r3, #0
  400c66:	f383 8811 	msr	BASEPRI, r3
  400c6a:	bd08      	pop	{r3, pc}
  400c6c:	00401afd 	.word	0x00401afd
  400c70:	e000ed04 	.word	0xe000ed04

00400c74 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400c74:	4a03      	ldr	r2, [pc, #12]	; (400c84 <vPortSetupTimerInterrupt+0x10>)
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <vPortSetupTimerInterrupt+0x14>)
  400c78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400c7a:	2207      	movs	r2, #7
  400c7c:	3b04      	subs	r3, #4
  400c7e:	601a      	str	r2, [r3, #0]
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop
  400c84:	000493df 	.word	0x000493df
  400c88:	e000e014 	.word	0xe000e014

00400c8c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400c8c:	b500      	push	{lr}
  400c8e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400c90:	4b25      	ldr	r3, [pc, #148]	; (400d28 <xPortStartScheduler+0x9c>)
  400c92:	781a      	ldrb	r2, [r3, #0]
  400c94:	b2d2      	uxtb	r2, r2
  400c96:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400c98:	22ff      	movs	r2, #255	; 0xff
  400c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400c9c:	781b      	ldrb	r3, [r3, #0]
  400c9e:	b2db      	uxtb	r3, r3
  400ca0:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400ca4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400cac:	4a1f      	ldr	r2, [pc, #124]	; (400d2c <xPortStartScheduler+0xa0>)
  400cae:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400cb0:	2207      	movs	r2, #7
  400cb2:	4b1f      	ldr	r3, [pc, #124]	; (400d30 <xPortStartScheduler+0xa4>)
  400cb4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cba:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cbe:	d010      	beq.n	400ce2 <xPortStartScheduler+0x56>
  400cc0:	2206      	movs	r2, #6
  400cc2:	e000      	b.n	400cc6 <xPortStartScheduler+0x3a>
  400cc4:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cca:	005b      	lsls	r3, r3, #1
  400ccc:	b2db      	uxtb	r3, r3
  400cce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cd6:	1e51      	subs	r1, r2, #1
  400cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cdc:	d1f2      	bne.n	400cc4 <xPortStartScheduler+0x38>
  400cde:	4b14      	ldr	r3, [pc, #80]	; (400d30 <xPortStartScheduler+0xa4>)
  400ce0:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400ce2:	4a13      	ldr	r2, [pc, #76]	; (400d30 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400ce4:	6813      	ldr	r3, [r2, #0]
  400ce6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400cee:	9b01      	ldr	r3, [sp, #4]
  400cf0:	b2db      	uxtb	r3, r3
  400cf2:	4a0d      	ldr	r2, [pc, #52]	; (400d28 <xPortStartScheduler+0x9c>)
  400cf4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400cf6:	4b0f      	ldr	r3, [pc, #60]	; (400d34 <xPortStartScheduler+0xa8>)
  400cf8:	681a      	ldr	r2, [r3, #0]
  400cfa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400cfe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400d00:	681a      	ldr	r2, [r3, #0]
  400d02:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400d06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400d08:	4b0b      	ldr	r3, [pc, #44]	; (400d38 <xPortStartScheduler+0xac>)
  400d0a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400d0c:	2200      	movs	r2, #0
  400d0e:	4b0b      	ldr	r3, [pc, #44]	; (400d3c <xPortStartScheduler+0xb0>)
  400d10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400d12:	4b0b      	ldr	r3, [pc, #44]	; (400d40 <xPortStartScheduler+0xb4>)
  400d14:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400d16:	4a0b      	ldr	r2, [pc, #44]	; (400d44 <xPortStartScheduler+0xb8>)
  400d18:	6813      	ldr	r3, [r2, #0]
  400d1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400d1e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <xPortStartScheduler+0xbc>)
  400d22:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400d24:	4b09      	ldr	r3, [pc, #36]	; (400d4c <xPortStartScheduler+0xc0>)
  400d26:	4798      	blx	r3
  400d28:	e000e400 	.word	0xe000e400
  400d2c:	204009dc 	.word	0x204009dc
  400d30:	204009e0 	.word	0x204009e0
  400d34:	e000ed20 	.word	0xe000ed20
  400d38:	00400c75 	.word	0x00400c75
  400d3c:	2040000c 	.word	0x2040000c
  400d40:	00400b01 	.word	0x00400b01
  400d44:	e000ef34 	.word	0xe000ef34
  400d48:	00400ae1 	.word	0x00400ae1
  400d4c:	00400aa5 	.word	0x00400aa5

00400d50 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400d50:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400d54:	2b0f      	cmp	r3, #15
  400d56:	d911      	bls.n	400d7c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400d58:	4a12      	ldr	r2, [pc, #72]	; (400da4 <vPortValidateInterruptPriority+0x54>)
  400d5a:	5c9b      	ldrb	r3, [r3, r2]
  400d5c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400d5e:	4a12      	ldr	r2, [pc, #72]	; (400da8 <vPortValidateInterruptPriority+0x58>)
  400d60:	7812      	ldrb	r2, [r2, #0]
  400d62:	429a      	cmp	r2, r3
  400d64:	d90a      	bls.n	400d7c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d66:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d6a:	b672      	cpsid	i
  400d6c:	f383 8811 	msr	BASEPRI, r3
  400d70:	f3bf 8f6f 	isb	sy
  400d74:	f3bf 8f4f 	dsb	sy
  400d78:	b662      	cpsie	i
  400d7a:	e7fe      	b.n	400d7a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400d7c:	4b0b      	ldr	r3, [pc, #44]	; (400dac <vPortValidateInterruptPriority+0x5c>)
  400d7e:	681b      	ldr	r3, [r3, #0]
  400d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d84:	4a0a      	ldr	r2, [pc, #40]	; (400db0 <vPortValidateInterruptPriority+0x60>)
  400d86:	6812      	ldr	r2, [r2, #0]
  400d88:	4293      	cmp	r3, r2
  400d8a:	d90a      	bls.n	400da2 <vPortValidateInterruptPriority+0x52>
  400d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d90:	b672      	cpsid	i
  400d92:	f383 8811 	msr	BASEPRI, r3
  400d96:	f3bf 8f6f 	isb	sy
  400d9a:	f3bf 8f4f 	dsb	sy
  400d9e:	b662      	cpsie	i
  400da0:	e7fe      	b.n	400da0 <vPortValidateInterruptPriority+0x50>
  400da2:	4770      	bx	lr
  400da4:	e000e3f0 	.word	0xe000e3f0
  400da8:	204009dc 	.word	0x204009dc
  400dac:	e000ed0c 	.word	0xe000ed0c
  400db0:	204009e0 	.word	0x204009e0

00400db4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400db4:	b538      	push	{r3, r4, r5, lr}
  400db6:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400db8:	f010 0f07 	tst.w	r0, #7
  400dbc:	d002      	beq.n	400dc4 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400dbe:	f020 0407 	bic.w	r4, r0, #7
  400dc2:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400dc4:	4b0e      	ldr	r3, [pc, #56]	; (400e00 <pvPortMalloc+0x4c>)
  400dc6:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400dc8:	4b0e      	ldr	r3, [pc, #56]	; (400e04 <pvPortMalloc+0x50>)
  400dca:	681b      	ldr	r3, [r3, #0]
  400dcc:	b923      	cbnz	r3, 400dd8 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400dce:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <pvPortMalloc+0x54>)
  400dd0:	f023 0307 	bic.w	r3, r3, #7
  400dd4:	4a0b      	ldr	r2, [pc, #44]	; (400e04 <pvPortMalloc+0x50>)
  400dd6:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400dd8:	4b0c      	ldr	r3, [pc, #48]	; (400e0c <pvPortMalloc+0x58>)
  400dda:	681b      	ldr	r3, [r3, #0]
  400ddc:	441c      	add	r4, r3
  400dde:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400de2:	4294      	cmp	r4, r2
  400de4:	d807      	bhi.n	400df6 <pvPortMalloc+0x42>
  400de6:	42a3      	cmp	r3, r4
  400de8:	d205      	bcs.n	400df6 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400dea:	4a06      	ldr	r2, [pc, #24]	; (400e04 <pvPortMalloc+0x50>)
  400dec:	6815      	ldr	r5, [r2, #0]
  400dee:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400df0:	4b06      	ldr	r3, [pc, #24]	; (400e0c <pvPortMalloc+0x58>)
  400df2:	601c      	str	r4, [r3, #0]
  400df4:	e000      	b.n	400df8 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400df6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400df8:	4b05      	ldr	r3, [pc, #20]	; (400e10 <pvPortMalloc+0x5c>)
  400dfa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400dfc:	4628      	mov	r0, r5
  400dfe:	bd38      	pop	{r3, r4, r5, pc}
  400e00:	00401ae1 	.word	0x00401ae1
  400e04:	2040c1e8 	.word	0x2040c1e8
  400e08:	204009f0 	.word	0x204009f0
  400e0c:	204009e4 	.word	0x204009e4
  400e10:	00401c31 	.word	0x00401c31

00400e14 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400e14:	b150      	cbz	r0, 400e2c <vPortFree+0x18>
  400e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e1a:	b672      	cpsid	i
  400e1c:	f383 8811 	msr	BASEPRI, r3
  400e20:	f3bf 8f6f 	isb	sy
  400e24:	f3bf 8f4f 	dsb	sy
  400e28:	b662      	cpsie	i
  400e2a:	e7fe      	b.n	400e2a <vPortFree+0x16>
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop

00400e30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e30:	f100 0308 	add.w	r3, r0, #8
  400e34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e36:	f04f 32ff 	mov.w	r2, #4294967295
  400e3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e40:	2300      	movs	r3, #0
  400e42:	6003      	str	r3, [r0, #0]
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop

00400e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e48:	2300      	movs	r3, #0
  400e4a:	6103      	str	r3, [r0, #16]
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop

00400e50 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e50:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e54:	689a      	ldr	r2, [r3, #8]
  400e56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e58:	689a      	ldr	r2, [r3, #8]
  400e5a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e5c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e5e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e60:	6803      	ldr	r3, [r0, #0]
  400e62:	3301      	adds	r3, #1
  400e64:	6003      	str	r3, [r0, #0]
  400e66:	4770      	bx	lr

00400e68 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e68:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e6a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e6c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e70:	d101      	bne.n	400e76 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400e72:	6902      	ldr	r2, [r0, #16]
  400e74:	e007      	b.n	400e86 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e76:	f100 0208 	add.w	r2, r0, #8
  400e7a:	e000      	b.n	400e7e <vListInsert+0x16>
  400e7c:	461a      	mov	r2, r3
  400e7e:	6853      	ldr	r3, [r2, #4]
  400e80:	681c      	ldr	r4, [r3, #0]
  400e82:	42a5      	cmp	r5, r4
  400e84:	d2fa      	bcs.n	400e7c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e86:	6853      	ldr	r3, [r2, #4]
  400e88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e8a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e8c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e8e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e90:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e92:	6803      	ldr	r3, [r0, #0]
  400e94:	3301      	adds	r3, #1
  400e96:	6003      	str	r3, [r0, #0]
}
  400e98:	bc30      	pop	{r4, r5}
  400e9a:	4770      	bx	lr

00400e9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e9e:	6842      	ldr	r2, [r0, #4]
  400ea0:	6881      	ldr	r1, [r0, #8]
  400ea2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400ea4:	6882      	ldr	r2, [r0, #8]
  400ea6:	6841      	ldr	r1, [r0, #4]
  400ea8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400eaa:	685a      	ldr	r2, [r3, #4]
  400eac:	4282      	cmp	r2, r0
  400eae:	d101      	bne.n	400eb4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400eb0:	6892      	ldr	r2, [r2, #8]
  400eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400eb4:	2200      	movs	r2, #0
  400eb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400eb8:	6818      	ldr	r0, [r3, #0]
  400eba:	3801      	subs	r0, #1
  400ebc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400ebe:	4770      	bx	lr

00400ec0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400ec0:	b538      	push	{r3, r4, r5, lr}
  400ec2:	4604      	mov	r4, r0
  400ec4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400ec6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ec8:	b942      	cbnz	r2, 400edc <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400eca:	6803      	ldr	r3, [r0, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	d12b      	bne.n	400f28 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ed0:	6840      	ldr	r0, [r0, #4]
  400ed2:	4b1b      	ldr	r3, [pc, #108]	; (400f40 <prvCopyDataToQueue+0x80>)
  400ed4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ed6:	2300      	movs	r3, #0
  400ed8:	6063      	str	r3, [r4, #4]
  400eda:	e02c      	b.n	400f36 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400edc:	b96d      	cbnz	r5, 400efa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400ede:	6880      	ldr	r0, [r0, #8]
  400ee0:	4b18      	ldr	r3, [pc, #96]	; (400f44 <prvCopyDataToQueue+0x84>)
  400ee2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ee4:	68a2      	ldr	r2, [r4, #8]
  400ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400ee8:	4413      	add	r3, r2
  400eea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400eec:	6862      	ldr	r2, [r4, #4]
  400eee:	4293      	cmp	r3, r2
  400ef0:	d31c      	bcc.n	400f2c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ef2:	6823      	ldr	r3, [r4, #0]
  400ef4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400ef6:	2000      	movs	r0, #0
  400ef8:	e01d      	b.n	400f36 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400efa:	68c0      	ldr	r0, [r0, #12]
  400efc:	4b11      	ldr	r3, [pc, #68]	; (400f44 <prvCopyDataToQueue+0x84>)
  400efe:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f02:	425b      	negs	r3, r3
  400f04:	68e2      	ldr	r2, [r4, #12]
  400f06:	441a      	add	r2, r3
  400f08:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f0a:	6821      	ldr	r1, [r4, #0]
  400f0c:	428a      	cmp	r2, r1
  400f0e:	d202      	bcs.n	400f16 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f10:	6862      	ldr	r2, [r4, #4]
  400f12:	4413      	add	r3, r2
  400f14:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f16:	2d02      	cmp	r5, #2
  400f18:	d10a      	bne.n	400f30 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f1c:	b153      	cbz	r3, 400f34 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f20:	3b01      	subs	r3, #1
  400f22:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f24:	2000      	movs	r0, #0
  400f26:	e006      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f28:	2000      	movs	r0, #0
  400f2a:	e004      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f2c:	2000      	movs	r0, #0
  400f2e:	e002      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f30:	2000      	movs	r0, #0
  400f32:	e000      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f34:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f38:	3301      	adds	r3, #1
  400f3a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f3c:	bd38      	pop	{r3, r4, r5, pc}
  400f3e:	bf00      	nop
  400f40:	00402235 	.word	0x00402235
  400f44:	0040b979 	.word	0x0040b979

00400f48 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f48:	b530      	push	{r4, r5, lr}
  400f4a:	b083      	sub	sp, #12
  400f4c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f4e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f50:	b954      	cbnz	r4, 400f68 <prvNotifyQueueSetContainer+0x20>
  400f52:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f56:	b672      	cpsid	i
  400f58:	f383 8811 	msr	BASEPRI, r3
  400f5c:	f3bf 8f6f 	isb	sy
  400f60:	f3bf 8f4f 	dsb	sy
  400f64:	b662      	cpsie	i
  400f66:	e7fe      	b.n	400f66 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f6c:	429a      	cmp	r2, r3
  400f6e:	d30a      	bcc.n	400f86 <prvNotifyQueueSetContainer+0x3e>
  400f70:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f74:	b672      	cpsid	i
  400f76:	f383 8811 	msr	BASEPRI, r3
  400f7a:	f3bf 8f6f 	isb	sy
  400f7e:	f3bf 8f4f 	dsb	sy
  400f82:	b662      	cpsie	i
  400f84:	e7fe      	b.n	400f84 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f88:	4293      	cmp	r3, r2
  400f8a:	d917      	bls.n	400fbc <prvNotifyQueueSetContainer+0x74>
  400f8c:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400f8e:	4620      	mov	r0, r4
  400f90:	a901      	add	r1, sp, #4
  400f92:	4b0c      	ldr	r3, [pc, #48]	; (400fc4 <prvNotifyQueueSetContainer+0x7c>)
  400f94:	4798      	blx	r3
  400f96:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400f98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f9e:	d109      	bne.n	400fb4 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fa2:	b163      	cbz	r3, 400fbe <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fa8:	4b07      	ldr	r3, [pc, #28]	; (400fc8 <prvNotifyQueueSetContainer+0x80>)
  400faa:	4798      	blx	r3
  400fac:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fae:	bf18      	it	ne
  400fb0:	2501      	movne	r5, #1
  400fb2:	e004      	b.n	400fbe <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fb6:	3301      	adds	r3, #1
  400fb8:	64a3      	str	r3, [r4, #72]	; 0x48
  400fba:	e000      	b.n	400fbe <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fbc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fbe:	4628      	mov	r0, r5
  400fc0:	b003      	add	sp, #12
  400fc2:	bd30      	pop	{r4, r5, pc}
  400fc4:	00400ec1 	.word	0x00400ec1
  400fc8:	00402005 	.word	0x00402005

00400fcc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400fcc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fce:	b172      	cbz	r2, 400fee <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400fd0:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400fd2:	68c3      	ldr	r3, [r0, #12]
  400fd4:	4413      	add	r3, r2
  400fd6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400fd8:	6844      	ldr	r4, [r0, #4]
  400fda:	42a3      	cmp	r3, r4
  400fdc:	d301      	bcc.n	400fe2 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400fde:	6803      	ldr	r3, [r0, #0]
  400fe0:	60c3      	str	r3, [r0, #12]
  400fe2:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400fe4:	4608      	mov	r0, r1
  400fe6:	68d9      	ldr	r1, [r3, #12]
  400fe8:	4b01      	ldr	r3, [pc, #4]	; (400ff0 <prvCopyDataFromQueue+0x24>)
  400fea:	4798      	blx	r3
  400fec:	bd10      	pop	{r4, pc}
  400fee:	4770      	bx	lr
  400ff0:	0040b979 	.word	0x0040b979

00400ff4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ff6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400ff8:	4b20      	ldr	r3, [pc, #128]	; (40107c <prvUnlockQueue+0x88>)
  400ffa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ffe:	2b00      	cmp	r3, #0
  401000:	dd18      	ble.n	401034 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401002:	4d1f      	ldr	r5, [pc, #124]	; (401080 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401004:	4f1f      	ldr	r7, [pc, #124]	; (401084 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401006:	4e20      	ldr	r6, [pc, #128]	; (401088 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401008:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40100a:	b133      	cbz	r3, 40101a <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40100c:	4620      	mov	r0, r4
  40100e:	2100      	movs	r1, #0
  401010:	47a8      	blx	r5
  401012:	2801      	cmp	r0, #1
  401014:	d108      	bne.n	401028 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401016:	47b8      	blx	r7
  401018:	e006      	b.n	401028 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40101a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40101c:	b153      	cbz	r3, 401034 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40101e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401022:	47b0      	blx	r6
  401024:	b100      	cbz	r0, 401028 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401026:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40102a:	3b01      	subs	r3, #1
  40102c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40102e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401030:	2b00      	cmp	r3, #0
  401032:	dce9      	bgt.n	401008 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401034:	f04f 33ff 	mov.w	r3, #4294967295
  401038:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40103a:	4b14      	ldr	r3, [pc, #80]	; (40108c <prvUnlockQueue+0x98>)
  40103c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40103e:	4b0f      	ldr	r3, [pc, #60]	; (40107c <prvUnlockQueue+0x88>)
  401040:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401042:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401044:	2b00      	cmp	r3, #0
  401046:	dd13      	ble.n	401070 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401048:	6923      	ldr	r3, [r4, #16]
  40104a:	b91b      	cbnz	r3, 401054 <prvUnlockQueue+0x60>
  40104c:	e010      	b.n	401070 <prvUnlockQueue+0x7c>
  40104e:	6923      	ldr	r3, [r4, #16]
  401050:	b923      	cbnz	r3, 40105c <prvUnlockQueue+0x68>
  401052:	e00d      	b.n	401070 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401054:	f104 0610 	add.w	r6, r4, #16
  401058:	4d0b      	ldr	r5, [pc, #44]	; (401088 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40105a:	4f0a      	ldr	r7, [pc, #40]	; (401084 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40105c:	4630      	mov	r0, r6
  40105e:	47a8      	blx	r5
  401060:	b100      	cbz	r0, 401064 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401062:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401064:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401066:	3b01      	subs	r3, #1
  401068:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40106a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40106c:	2b00      	cmp	r3, #0
  40106e:	dcee      	bgt.n	40104e <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401070:	f04f 33ff 	mov.w	r3, #4294967295
  401074:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401076:	4b05      	ldr	r3, [pc, #20]	; (40108c <prvUnlockQueue+0x98>)
  401078:	4798      	blx	r3
  40107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40107c:	00400b5d 	.word	0x00400b5d
  401080:	00400f49 	.word	0x00400f49
  401084:	00402161 	.word	0x00402161
  401088:	00402005 	.word	0x00402005
  40108c:	00400ba9 	.word	0x00400ba9

00401090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  401090:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401092:	b950      	cbnz	r0, 4010aa <xQueueGenericReset+0x1a>
  401094:	f04f 0380 	mov.w	r3, #128	; 0x80
  401098:	b672      	cpsid	i
  40109a:	f383 8811 	msr	BASEPRI, r3
  40109e:	f3bf 8f6f 	isb	sy
  4010a2:	f3bf 8f4f 	dsb	sy
  4010a6:	b662      	cpsie	i
  4010a8:	e7fe      	b.n	4010a8 <xQueueGenericReset+0x18>
  4010aa:	4604      	mov	r4, r0
  4010ac:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010ae:	4b18      	ldr	r3, [pc, #96]	; (401110 <xQueueGenericReset+0x80>)
  4010b0:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010b2:	6822      	ldr	r2, [r4, #0]
  4010b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010b8:	fb03 f301 	mul.w	r3, r3, r1
  4010bc:	18d0      	adds	r0, r2, r3
  4010be:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010c0:	2000      	movs	r0, #0
  4010c2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010c4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010c6:	1a5b      	subs	r3, r3, r1
  4010c8:	4413      	add	r3, r2
  4010ca:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010cc:	f04f 33ff 	mov.w	r3, #4294967295
  4010d0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010d2:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4010d4:	b985      	cbnz	r5, 4010f8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010d6:	6923      	ldr	r3, [r4, #16]
  4010d8:	b1ab      	cbz	r3, 401106 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010da:	f104 0010 	add.w	r0, r4, #16
  4010de:	4b0d      	ldr	r3, [pc, #52]	; (401114 <xQueueGenericReset+0x84>)
  4010e0:	4798      	blx	r3
  4010e2:	2801      	cmp	r0, #1
  4010e4:	d10f      	bne.n	401106 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4010e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010ea:	4b0b      	ldr	r3, [pc, #44]	; (401118 <xQueueGenericReset+0x88>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	f3bf 8f4f 	dsb	sy
  4010f2:	f3bf 8f6f 	isb	sy
  4010f6:	e006      	b.n	401106 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4010f8:	f104 0010 	add.w	r0, r4, #16
  4010fc:	4d07      	ldr	r5, [pc, #28]	; (40111c <xQueueGenericReset+0x8c>)
  4010fe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401100:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401104:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401106:	4b06      	ldr	r3, [pc, #24]	; (401120 <xQueueGenericReset+0x90>)
  401108:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  40110a:	2001      	movs	r0, #1
  40110c:	bd38      	pop	{r3, r4, r5, pc}
  40110e:	bf00      	nop
  401110:	00400b5d 	.word	0x00400b5d
  401114:	00402005 	.word	0x00402005
  401118:	e000ed04 	.word	0xe000ed04
  40111c:	00400e31 	.word	0x00400e31
  401120:	00400ba9 	.word	0x00400ba9

00401124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401126:	b950      	cbnz	r0, 40113e <xQueueGenericCreate+0x1a>
  401128:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112c:	b672      	cpsid	i
  40112e:	f383 8811 	msr	BASEPRI, r3
  401132:	f3bf 8f6f 	isb	sy
  401136:	f3bf 8f4f 	dsb	sy
  40113a:	b662      	cpsie	i
  40113c:	e7fe      	b.n	40113c <xQueueGenericCreate+0x18>
  40113e:	460d      	mov	r5, r1
  401140:	4617      	mov	r7, r2
  401142:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401144:	b1c1      	cbz	r1, 401178 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401146:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40114a:	3059      	adds	r0, #89	; 0x59
  40114c:	4b14      	ldr	r3, [pc, #80]	; (4011a0 <xQueueGenericCreate+0x7c>)
  40114e:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401150:	4604      	mov	r4, r0
  401152:	b910      	cbnz	r0, 40115a <xQueueGenericCreate+0x36>
  401154:	e005      	b.n	401162 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401156:	6024      	str	r4, [r4, #0]
  401158:	e015      	b.n	401186 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40115a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40115e:	6003      	str	r3, [r0, #0]
  401160:	e011      	b.n	401186 <xQueueGenericCreate+0x62>
  401162:	f04f 0380 	mov.w	r3, #128	; 0x80
  401166:	b672      	cpsid	i
  401168:	f383 8811 	msr	BASEPRI, r3
  40116c:	f3bf 8f6f 	isb	sy
  401170:	f3bf 8f4f 	dsb	sy
  401174:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401176:	e7fe      	b.n	401176 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401178:	2058      	movs	r0, #88	; 0x58
  40117a:	4b09      	ldr	r3, [pc, #36]	; (4011a0 <xQueueGenericCreate+0x7c>)
  40117c:	4798      	blx	r3

	if( pxNewQueue != NULL )
  40117e:	4604      	mov	r4, r0
  401180:	2800      	cmp	r0, #0
  401182:	d1e8      	bne.n	401156 <xQueueGenericCreate+0x32>
  401184:	e7ed      	b.n	401162 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  401186:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401188:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40118a:	4620      	mov	r0, r4
  40118c:	2101      	movs	r1, #1
  40118e:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <xQueueGenericCreate+0x80>)
  401190:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  401192:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  401196:	2300      	movs	r3, #0
  401198:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  40119a:	4620      	mov	r0, r4
  40119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40119e:	bf00      	nop
  4011a0:	00400db5 	.word	0x00400db5
  4011a4:	00401091 	.word	0x00401091

004011a8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  4011a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011ac:	b085      	sub	sp, #20
  4011ae:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011b0:	b950      	cbnz	r0, 4011c8 <xQueueGenericSend+0x20>
  4011b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011b6:	b672      	cpsid	i
  4011b8:	f383 8811 	msr	BASEPRI, r3
  4011bc:	f3bf 8f6f 	isb	sy
  4011c0:	f3bf 8f4f 	dsb	sy
  4011c4:	b662      	cpsie	i
  4011c6:	e7fe      	b.n	4011c6 <xQueueGenericSend+0x1e>
  4011c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011ca:	b961      	cbnz	r1, 4011e6 <xQueueGenericSend+0x3e>
  4011cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011ce:	b152      	cbz	r2, 4011e6 <xQueueGenericSend+0x3e>
  4011d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011d4:	b672      	cpsid	i
  4011d6:	f383 8811 	msr	BASEPRI, r3
  4011da:	f3bf 8f6f 	isb	sy
  4011de:	f3bf 8f4f 	dsb	sy
  4011e2:	b662      	cpsie	i
  4011e4:	e7fe      	b.n	4011e4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011e6:	2b02      	cmp	r3, #2
  4011e8:	d10d      	bne.n	401206 <xQueueGenericSend+0x5e>
  4011ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4011ec:	2a01      	cmp	r2, #1
  4011ee:	d00a      	beq.n	401206 <xQueueGenericSend+0x5e>
  4011f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011f4:	b672      	cpsid	i
  4011f6:	f383 8811 	msr	BASEPRI, r3
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	f3bf 8f4f 	dsb	sy
  401202:	b662      	cpsie	i
  401204:	e7fe      	b.n	401204 <xQueueGenericSend+0x5c>
  401206:	461d      	mov	r5, r3
  401208:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40120a:	4b51      	ldr	r3, [pc, #324]	; (401350 <xQueueGenericSend+0x1a8>)
  40120c:	4798      	blx	r3
  40120e:	b960      	cbnz	r0, 40122a <xQueueGenericSend+0x82>
  401210:	9b01      	ldr	r3, [sp, #4]
  401212:	b163      	cbz	r3, 40122e <xQueueGenericSend+0x86>
  401214:	f04f 0380 	mov.w	r3, #128	; 0x80
  401218:	b672      	cpsid	i
  40121a:	f383 8811 	msr	BASEPRI, r3
  40121e:	f3bf 8f6f 	isb	sy
  401222:	f3bf 8f4f 	dsb	sy
  401226:	b662      	cpsie	i
  401228:	e7fe      	b.n	401228 <xQueueGenericSend+0x80>
  40122a:	2700      	movs	r7, #0
  40122c:	e000      	b.n	401230 <xQueueGenericSend+0x88>
  40122e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401230:	4e48      	ldr	r6, [pc, #288]	; (401354 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401232:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401380 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401236:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401360 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40123a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40123c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40123e:	2d02      	cmp	r5, #2
  401240:	d002      	beq.n	401248 <xQueueGenericSend+0xa0>
  401242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401244:	429a      	cmp	r2, r3
  401246:	d233      	bcs.n	4012b0 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401248:	4620      	mov	r0, r4
  40124a:	9900      	ldr	r1, [sp, #0]
  40124c:	462a      	mov	r2, r5
  40124e:	4b42      	ldr	r3, [pc, #264]	; (401358 <xQueueGenericSend+0x1b0>)
  401250:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401252:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401254:	b173      	cbz	r3, 401274 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401256:	4620      	mov	r0, r4
  401258:	4629      	mov	r1, r5
  40125a:	4b40      	ldr	r3, [pc, #256]	; (40135c <xQueueGenericSend+0x1b4>)
  40125c:	4798      	blx	r3
  40125e:	2801      	cmp	r0, #1
  401260:	d122      	bne.n	4012a8 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401266:	4b3e      	ldr	r3, [pc, #248]	; (401360 <xQueueGenericSend+0x1b8>)
  401268:	601a      	str	r2, [r3, #0]
  40126a:	f3bf 8f4f 	dsb	sy
  40126e:	f3bf 8f6f 	isb	sy
  401272:	e019      	b.n	4012a8 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401274:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401276:	b173      	cbz	r3, 401296 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401278:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40127c:	4b39      	ldr	r3, [pc, #228]	; (401364 <xQueueGenericSend+0x1bc>)
  40127e:	4798      	blx	r3
  401280:	2801      	cmp	r0, #1
  401282:	d111      	bne.n	4012a8 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401288:	4b35      	ldr	r3, [pc, #212]	; (401360 <xQueueGenericSend+0x1b8>)
  40128a:	601a      	str	r2, [r3, #0]
  40128c:	f3bf 8f4f 	dsb	sy
  401290:	f3bf 8f6f 	isb	sy
  401294:	e008      	b.n	4012a8 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  401296:	b138      	cbz	r0, 4012a8 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  401298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40129c:	4b30      	ldr	r3, [pc, #192]	; (401360 <xQueueGenericSend+0x1b8>)
  40129e:	601a      	str	r2, [r3, #0]
  4012a0:	f3bf 8f4f 	dsb	sy
  4012a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  4012a8:	4b2f      	ldr	r3, [pc, #188]	; (401368 <xQueueGenericSend+0x1c0>)
  4012aa:	4798      	blx	r3
				return pdPASS;
  4012ac:	2001      	movs	r0, #1
  4012ae:	e04b      	b.n	401348 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012b0:	9b01      	ldr	r3, [sp, #4]
  4012b2:	b91b      	cbnz	r3, 4012bc <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012b4:	4b2c      	ldr	r3, [pc, #176]	; (401368 <xQueueGenericSend+0x1c0>)
  4012b6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012b8:	2000      	movs	r0, #0
  4012ba:	e045      	b.n	401348 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012bc:	b917      	cbnz	r7, 4012c4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012be:	a802      	add	r0, sp, #8
  4012c0:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012c2:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012c4:	4b28      	ldr	r3, [pc, #160]	; (401368 <xQueueGenericSend+0x1c0>)
  4012c6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012c8:	4b28      	ldr	r3, [pc, #160]	; (40136c <xQueueGenericSend+0x1c4>)
  4012ca:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012cc:	47b0      	blx	r6
  4012ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012d4:	d101      	bne.n	4012da <xQueueGenericSend+0x132>
  4012d6:	2300      	movs	r3, #0
  4012d8:	6463      	str	r3, [r4, #68]	; 0x44
  4012da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012e0:	d101      	bne.n	4012e6 <xQueueGenericSend+0x13e>
  4012e2:	2300      	movs	r3, #0
  4012e4:	64a3      	str	r3, [r4, #72]	; 0x48
  4012e6:	4b20      	ldr	r3, [pc, #128]	; (401368 <xQueueGenericSend+0x1c0>)
  4012e8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4012ea:	a802      	add	r0, sp, #8
  4012ec:	a901      	add	r1, sp, #4
  4012ee:	4b20      	ldr	r3, [pc, #128]	; (401370 <xQueueGenericSend+0x1c8>)
  4012f0:	4798      	blx	r3
  4012f2:	bb18      	cbnz	r0, 40133c <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4012f4:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4012f6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4012fa:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4012fe:	4b1a      	ldr	r3, [pc, #104]	; (401368 <xQueueGenericSend+0x1c0>)
  401300:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401302:	45d3      	cmp	fp, sl
  401304:	d114      	bne.n	401330 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401306:	f104 0010 	add.w	r0, r4, #16
  40130a:	9901      	ldr	r1, [sp, #4]
  40130c:	4b19      	ldr	r3, [pc, #100]	; (401374 <xQueueGenericSend+0x1cc>)
  40130e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401310:	4620      	mov	r0, r4
  401312:	4b19      	ldr	r3, [pc, #100]	; (401378 <xQueueGenericSend+0x1d0>)
  401314:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401316:	4b19      	ldr	r3, [pc, #100]	; (40137c <xQueueGenericSend+0x1d4>)
  401318:	4798      	blx	r3
  40131a:	2800      	cmp	r0, #0
  40131c:	d18d      	bne.n	40123a <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  40131e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401322:	f8c8 3000 	str.w	r3, [r8]
  401326:	f3bf 8f4f 	dsb	sy
  40132a:	f3bf 8f6f 	isb	sy
  40132e:	e784      	b.n	40123a <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401330:	4620      	mov	r0, r4
  401332:	4b11      	ldr	r3, [pc, #68]	; (401378 <xQueueGenericSend+0x1d0>)
  401334:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401336:	4b11      	ldr	r3, [pc, #68]	; (40137c <xQueueGenericSend+0x1d4>)
  401338:	4798      	blx	r3
  40133a:	e77e      	b.n	40123a <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40133c:	4620      	mov	r0, r4
  40133e:	4b0e      	ldr	r3, [pc, #56]	; (401378 <xQueueGenericSend+0x1d0>)
  401340:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401342:	4b0e      	ldr	r3, [pc, #56]	; (40137c <xQueueGenericSend+0x1d4>)
  401344:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401346:	2000      	movs	r0, #0
		}
	}
}
  401348:	b005      	add	sp, #20
  40134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40134e:	bf00      	nop
  401350:	0040216d 	.word	0x0040216d
  401354:	00400b5d 	.word	0x00400b5d
  401358:	00400ec1 	.word	0x00400ec1
  40135c:	00400f49 	.word	0x00400f49
  401360:	e000ed04 	.word	0xe000ed04
  401364:	00402005 	.word	0x00402005
  401368:	00400ba9 	.word	0x00400ba9
  40136c:	00401ae1 	.word	0x00401ae1
  401370:	004020cd 	.word	0x004020cd
  401374:	00401f01 	.word	0x00401f01
  401378:	00400ff5 	.word	0x00400ff5
  40137c:	00401c31 	.word	0x00401c31
  401380:	0040209d 	.word	0x0040209d

00401384 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401384:	b950      	cbnz	r0, 40139c <xQueueGenericSendFromISR+0x18>
  401386:	f04f 0380 	mov.w	r3, #128	; 0x80
  40138a:	b672      	cpsid	i
  40138c:	f383 8811 	msr	BASEPRI, r3
  401390:	f3bf 8f6f 	isb	sy
  401394:	f3bf 8f4f 	dsb	sy
  401398:	b662      	cpsie	i
  40139a:	e7fe      	b.n	40139a <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  40139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013a0:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013a2:	b961      	cbnz	r1, 4013be <xQueueGenericSendFromISR+0x3a>
  4013a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4013a6:	b150      	cbz	r0, 4013be <xQueueGenericSendFromISR+0x3a>
  4013a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013ac:	b672      	cpsid	i
  4013ae:	f383 8811 	msr	BASEPRI, r3
  4013b2:	f3bf 8f6f 	isb	sy
  4013b6:	f3bf 8f4f 	dsb	sy
  4013ba:	b662      	cpsie	i
  4013bc:	e7fe      	b.n	4013bc <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013be:	2b02      	cmp	r3, #2
  4013c0:	d10d      	bne.n	4013de <xQueueGenericSendFromISR+0x5a>
  4013c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4013c4:	2801      	cmp	r0, #1
  4013c6:	d00a      	beq.n	4013de <xQueueGenericSendFromISR+0x5a>
  4013c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013cc:	b672      	cpsid	i
  4013ce:	f383 8811 	msr	BASEPRI, r3
  4013d2:	f3bf 8f6f 	isb	sy
  4013d6:	f3bf 8f4f 	dsb	sy
  4013da:	b662      	cpsie	i
  4013dc:	e7fe      	b.n	4013dc <xQueueGenericSendFromISR+0x58>
  4013de:	461e      	mov	r6, r3
  4013e0:	4615      	mov	r5, r2
  4013e2:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013e4:	4b21      	ldr	r3, [pc, #132]	; (40146c <xQueueGenericSendFromISR+0xe8>)
  4013e6:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4013e8:	f3ef 8711 	mrs	r7, BASEPRI
  4013ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013f0:	b672      	cpsid	i
  4013f2:	f383 8811 	msr	BASEPRI, r3
  4013f6:	f3bf 8f6f 	isb	sy
  4013fa:	f3bf 8f4f 	dsb	sy
  4013fe:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401400:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401402:	2e02      	cmp	r6, #2
  401404:	d002      	beq.n	40140c <xQueueGenericSendFromISR+0x88>
  401406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401408:	429a      	cmp	r2, r3
  40140a:	d223      	bcs.n	401454 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40140c:	4620      	mov	r0, r4
  40140e:	4641      	mov	r1, r8
  401410:	4632      	mov	r2, r6
  401412:	4b17      	ldr	r3, [pc, #92]	; (401470 <xQueueGenericSendFromISR+0xec>)
  401414:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401416:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401418:	f1b3 3fff 	cmp.w	r3, #4294967295
  40141c:	d115      	bne.n	40144a <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40141e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401420:	b143      	cbz	r3, 401434 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401422:	4620      	mov	r0, r4
  401424:	4631      	mov	r1, r6
  401426:	4b13      	ldr	r3, [pc, #76]	; (401474 <xQueueGenericSendFromISR+0xf0>)
  401428:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40142a:	2801      	cmp	r0, #1
  40142c:	d114      	bne.n	401458 <xQueueGenericSendFromISR+0xd4>
  40142e:	b19d      	cbz	r5, 401458 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401430:	6028      	str	r0, [r5, #0]
  401432:	e016      	b.n	401462 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401434:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401436:	b18b      	cbz	r3, 40145c <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401438:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40143c:	4b0e      	ldr	r3, [pc, #56]	; (401478 <xQueueGenericSendFromISR+0xf4>)
  40143e:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401440:	b170      	cbz	r0, 401460 <xQueueGenericSendFromISR+0xdc>
  401442:	b16d      	cbz	r5, 401460 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401444:	2001      	movs	r0, #1
  401446:	6028      	str	r0, [r5, #0]
  401448:	e00b      	b.n	401462 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40144a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40144c:	3301      	adds	r3, #1
  40144e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401450:	2001      	movs	r0, #1
  401452:	e006      	b.n	401462 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401454:	2000      	movs	r0, #0
  401456:	e004      	b.n	401462 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401458:	2001      	movs	r0, #1
  40145a:	e002      	b.n	401462 <xQueueGenericSendFromISR+0xde>
  40145c:	2001      	movs	r0, #1
  40145e:	e000      	b.n	401462 <xQueueGenericSendFromISR+0xde>
  401460:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401462:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40146a:	bf00      	nop
  40146c:	00400d51 	.word	0x00400d51
  401470:	00400ec1 	.word	0x00400ec1
  401474:	00400f49 	.word	0x00400f49
  401478:	00402005 	.word	0x00402005

0040147c <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  40147c:	b950      	cbnz	r0, 401494 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40147e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401482:	b672      	cpsid	i
  401484:	f383 8811 	msr	BASEPRI, r3
  401488:	f3bf 8f6f 	isb	sy
  40148c:	f3bf 8f4f 	dsb	sy
  401490:	b662      	cpsie	i
  401492:	e7fe      	b.n	401492 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  401494:	b570      	push	{r4, r5, r6, lr}
  401496:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  401498:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40149a:	b153      	cbz	r3, 4014b2 <xQueueGiveFromISR+0x36>
  40149c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014a0:	b672      	cpsid	i
  4014a2:	f383 8811 	msr	BASEPRI, r3
  4014a6:	f3bf 8f6f 	isb	sy
  4014aa:	f3bf 8f4f 	dsb	sy
  4014ae:	b662      	cpsie	i
  4014b0:	e7fe      	b.n	4014b0 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4014b2:	6803      	ldr	r3, [r0, #0]
  4014b4:	b963      	cbnz	r3, 4014d0 <xQueueGiveFromISR+0x54>
  4014b6:	6843      	ldr	r3, [r0, #4]
  4014b8:	b153      	cbz	r3, 4014d0 <xQueueGiveFromISR+0x54>
  4014ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014be:	b672      	cpsid	i
  4014c0:	f383 8811 	msr	BASEPRI, r3
  4014c4:	f3bf 8f6f 	isb	sy
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	b662      	cpsie	i
  4014ce:	e7fe      	b.n	4014ce <xQueueGiveFromISR+0x52>
  4014d0:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4014d2:	4b1f      	ldr	r3, [pc, #124]	; (401550 <xQueueGiveFromISR+0xd4>)
  4014d4:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4014d6:	f3ef 8611 	mrs	r6, BASEPRI
  4014da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014de:	b672      	cpsid	i
  4014e0:	f383 8811 	msr	BASEPRI, r3
  4014e4:	f3bf 8f6f 	isb	sy
  4014e8:	f3bf 8f4f 	dsb	sy
  4014ec:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4014ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014f2:	429a      	cmp	r2, r3
  4014f4:	d221      	bcs.n	40153a <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  4014f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014f8:	3301      	adds	r3, #1
  4014fa:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401502:	d115      	bne.n	401530 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401504:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401506:	b143      	cbz	r3, 40151a <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401508:	4620      	mov	r0, r4
  40150a:	2100      	movs	r1, #0
  40150c:	4b11      	ldr	r3, [pc, #68]	; (401554 <xQueueGiveFromISR+0xd8>)
  40150e:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401510:	2801      	cmp	r0, #1
  401512:	d114      	bne.n	40153e <xQueueGiveFromISR+0xc2>
  401514:	b19d      	cbz	r5, 40153e <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401516:	6028      	str	r0, [r5, #0]
  401518:	e016      	b.n	401548 <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40151a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40151c:	b18b      	cbz	r3, 401542 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40151e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401522:	4b0d      	ldr	r3, [pc, #52]	; (401558 <xQueueGiveFromISR+0xdc>)
  401524:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401526:	b170      	cbz	r0, 401546 <xQueueGiveFromISR+0xca>
  401528:	b16d      	cbz	r5, 401546 <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  40152a:	2001      	movs	r0, #1
  40152c:	6028      	str	r0, [r5, #0]
  40152e:	e00b      	b.n	401548 <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401530:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401532:	3301      	adds	r3, #1
  401534:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401536:	2001      	movs	r0, #1
  401538:	e006      	b.n	401548 <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40153a:	2000      	movs	r0, #0
  40153c:	e004      	b.n	401548 <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  40153e:	2001      	movs	r0, #1
  401540:	e002      	b.n	401548 <xQueueGiveFromISR+0xcc>
  401542:	2001      	movs	r0, #1
  401544:	e000      	b.n	401548 <xQueueGiveFromISR+0xcc>
  401546:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401548:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  40154c:	bd70      	pop	{r4, r5, r6, pc}
  40154e:	bf00      	nop
  401550:	00400d51 	.word	0x00400d51
  401554:	00400f49 	.word	0x00400f49
  401558:	00402005 	.word	0x00402005

0040155c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  40155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401560:	b085      	sub	sp, #20
  401562:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401564:	b950      	cbnz	r0, 40157c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156a:	b672      	cpsid	i
  40156c:	f383 8811 	msr	BASEPRI, r3
  401570:	f3bf 8f6f 	isb	sy
  401574:	f3bf 8f4f 	dsb	sy
  401578:	b662      	cpsie	i
  40157a:	e7fe      	b.n	40157a <xQueueGenericReceive+0x1e>
  40157c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40157e:	b961      	cbnz	r1, 40159a <xQueueGenericReceive+0x3e>
  401580:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401582:	b152      	cbz	r2, 40159a <xQueueGenericReceive+0x3e>
  401584:	f04f 0380 	mov.w	r3, #128	; 0x80
  401588:	b672      	cpsid	i
  40158a:	f383 8811 	msr	BASEPRI, r3
  40158e:	f3bf 8f6f 	isb	sy
  401592:	f3bf 8f4f 	dsb	sy
  401596:	b662      	cpsie	i
  401598:	e7fe      	b.n	401598 <xQueueGenericReceive+0x3c>
  40159a:	4698      	mov	r8, r3
  40159c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40159e:	4b52      	ldr	r3, [pc, #328]	; (4016e8 <xQueueGenericReceive+0x18c>)
  4015a0:	4798      	blx	r3
  4015a2:	b960      	cbnz	r0, 4015be <xQueueGenericReceive+0x62>
  4015a4:	9b01      	ldr	r3, [sp, #4]
  4015a6:	b163      	cbz	r3, 4015c2 <xQueueGenericReceive+0x66>
  4015a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ac:	b672      	cpsid	i
  4015ae:	f383 8811 	msr	BASEPRI, r3
  4015b2:	f3bf 8f6f 	isb	sy
  4015b6:	f3bf 8f4f 	dsb	sy
  4015ba:	b662      	cpsie	i
  4015bc:	e7fe      	b.n	4015bc <xQueueGenericReceive+0x60>
  4015be:	2600      	movs	r6, #0
  4015c0:	e000      	b.n	4015c4 <xQueueGenericReceive+0x68>
  4015c2:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015c4:	4d49      	ldr	r5, [pc, #292]	; (4016ec <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015c6:	f8df a154 	ldr.w	sl, [pc, #340]	; 40171c <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4015ca:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4016fc <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015ce:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015d2:	2b00      	cmp	r3, #0
  4015d4:	d034      	beq.n	401640 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4015d6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4015d8:	4620      	mov	r0, r4
  4015da:	4659      	mov	r1, fp
  4015dc:	4b44      	ldr	r3, [pc, #272]	; (4016f0 <xQueueGenericReceive+0x194>)
  4015de:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4015e0:	f1b8 0f00 	cmp.w	r8, #0
  4015e4:	d118      	bne.n	401618 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4015e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015e8:	3b01      	subs	r3, #1
  4015ea:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015ec:	6823      	ldr	r3, [r4, #0]
  4015ee:	b913      	cbnz	r3, 4015f6 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4015f0:	4b40      	ldr	r3, [pc, #256]	; (4016f4 <xQueueGenericReceive+0x198>)
  4015f2:	4798      	blx	r3
  4015f4:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015f6:	6923      	ldr	r3, [r4, #16]
  4015f8:	b1f3      	cbz	r3, 401638 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015fa:	f104 0010 	add.w	r0, r4, #16
  4015fe:	4b3e      	ldr	r3, [pc, #248]	; (4016f8 <xQueueGenericReceive+0x19c>)
  401600:	4798      	blx	r3
  401602:	2801      	cmp	r0, #1
  401604:	d118      	bne.n	401638 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40160a:	4b3c      	ldr	r3, [pc, #240]	; (4016fc <xQueueGenericReceive+0x1a0>)
  40160c:	601a      	str	r2, [r3, #0]
  40160e:	f3bf 8f4f 	dsb	sy
  401612:	f3bf 8f6f 	isb	sy
  401616:	e00f      	b.n	401638 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401618:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40161a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40161c:	b163      	cbz	r3, 401638 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40161e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401622:	4b35      	ldr	r3, [pc, #212]	; (4016f8 <xQueueGenericReceive+0x19c>)
  401624:	4798      	blx	r3
  401626:	b138      	cbz	r0, 401638 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40162c:	4b33      	ldr	r3, [pc, #204]	; (4016fc <xQueueGenericReceive+0x1a0>)
  40162e:	601a      	str	r2, [r3, #0]
  401630:	f3bf 8f4f 	dsb	sy
  401634:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401638:	4b31      	ldr	r3, [pc, #196]	; (401700 <xQueueGenericReceive+0x1a4>)
  40163a:	4798      	blx	r3
				return pdPASS;
  40163c:	2001      	movs	r0, #1
  40163e:	e04f      	b.n	4016e0 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401640:	9b01      	ldr	r3, [sp, #4]
  401642:	b91b      	cbnz	r3, 40164c <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401644:	4b2e      	ldr	r3, [pc, #184]	; (401700 <xQueueGenericReceive+0x1a4>)
  401646:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401648:	2000      	movs	r0, #0
  40164a:	e049      	b.n	4016e0 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  40164c:	b916      	cbnz	r6, 401654 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40164e:	a802      	add	r0, sp, #8
  401650:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401652:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401654:	4b2a      	ldr	r3, [pc, #168]	; (401700 <xQueueGenericReceive+0x1a4>)
  401656:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401658:	4b2a      	ldr	r3, [pc, #168]	; (401704 <xQueueGenericReceive+0x1a8>)
  40165a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40165c:	47a8      	blx	r5
  40165e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401660:	f1b3 3fff 	cmp.w	r3, #4294967295
  401664:	d101      	bne.n	40166a <xQueueGenericReceive+0x10e>
  401666:	2300      	movs	r3, #0
  401668:	6463      	str	r3, [r4, #68]	; 0x44
  40166a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40166c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401670:	d101      	bne.n	401676 <xQueueGenericReceive+0x11a>
  401672:	2300      	movs	r3, #0
  401674:	64a3      	str	r3, [r4, #72]	; 0x48
  401676:	4b22      	ldr	r3, [pc, #136]	; (401700 <xQueueGenericReceive+0x1a4>)
  401678:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40167a:	a802      	add	r0, sp, #8
  40167c:	a901      	add	r1, sp, #4
  40167e:	4b22      	ldr	r3, [pc, #136]	; (401708 <xQueueGenericReceive+0x1ac>)
  401680:	4798      	blx	r3
  401682:	bb38      	cbnz	r0, 4016d4 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401684:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401686:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401688:	4b1d      	ldr	r3, [pc, #116]	; (401700 <xQueueGenericReceive+0x1a4>)
  40168a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40168c:	b9e7      	cbnz	r7, 4016c8 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40168e:	6823      	ldr	r3, [r4, #0]
  401690:	b92b      	cbnz	r3, 40169e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401692:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401694:	6860      	ldr	r0, [r4, #4]
  401696:	4b1d      	ldr	r3, [pc, #116]	; (40170c <xQueueGenericReceive+0x1b0>)
  401698:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40169a:	4b19      	ldr	r3, [pc, #100]	; (401700 <xQueueGenericReceive+0x1a4>)
  40169c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40169e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016a2:	9901      	ldr	r1, [sp, #4]
  4016a4:	4b1a      	ldr	r3, [pc, #104]	; (401710 <xQueueGenericReceive+0x1b4>)
  4016a6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4016a8:	4620      	mov	r0, r4
  4016aa:	4b1a      	ldr	r3, [pc, #104]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016ac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016ae:	4b1a      	ldr	r3, [pc, #104]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016b0:	4798      	blx	r3
  4016b2:	2800      	cmp	r0, #0
  4016b4:	d18b      	bne.n	4015ce <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  4016b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016ba:	f8c9 3000 	str.w	r3, [r9]
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	f3bf 8f6f 	isb	sy
  4016c6:	e782      	b.n	4015ce <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4016c8:	4620      	mov	r0, r4
  4016ca:	4b12      	ldr	r3, [pc, #72]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016cc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016ce:	4b12      	ldr	r3, [pc, #72]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016d0:	4798      	blx	r3
  4016d2:	e77c      	b.n	4015ce <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4016d4:	4620      	mov	r0, r4
  4016d6:	4b0f      	ldr	r3, [pc, #60]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016da:	4b0f      	ldr	r3, [pc, #60]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016dc:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4016de:	2000      	movs	r0, #0
		}
	}
}
  4016e0:	b005      	add	sp, #20
  4016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016e6:	bf00      	nop
  4016e8:	0040216d 	.word	0x0040216d
  4016ec:	00400b5d 	.word	0x00400b5d
  4016f0:	00400fcd 	.word	0x00400fcd
  4016f4:	004022f5 	.word	0x004022f5
  4016f8:	00402005 	.word	0x00402005
  4016fc:	e000ed04 	.word	0xe000ed04
  401700:	00400ba9 	.word	0x00400ba9
  401704:	00401ae1 	.word	0x00401ae1
  401708:	004020cd 	.word	0x004020cd
  40170c:	0040218d 	.word	0x0040218d
  401710:	00401f01 	.word	0x00401f01
  401714:	00400ff5 	.word	0x00400ff5
  401718:	00401c31 	.word	0x00401c31
  40171c:	0040209d 	.word	0x0040209d

00401720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401720:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401722:	4b0b      	ldr	r3, [pc, #44]	; (401750 <vQueueAddToRegistry+0x30>)
  401724:	681b      	ldr	r3, [r3, #0]
  401726:	b12b      	cbz	r3, 401734 <vQueueAddToRegistry+0x14>
  401728:	2301      	movs	r3, #1
  40172a:	4c09      	ldr	r4, [pc, #36]	; (401750 <vQueueAddToRegistry+0x30>)
  40172c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401730:	b942      	cbnz	r2, 401744 <vQueueAddToRegistry+0x24>
  401732:	e000      	b.n	401736 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401734:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401736:	4a06      	ldr	r2, [pc, #24]	; (401750 <vQueueAddToRegistry+0x30>)
  401738:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40173c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401740:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401742:	e002      	b.n	40174a <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401744:	3301      	adds	r3, #1
  401746:	2b08      	cmp	r3, #8
  401748:	d1f0      	bne.n	40172c <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40174a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40174e:	4770      	bx	lr
  401750:	2040c5a0 	.word	0x2040c5a0

00401754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401754:	b570      	push	{r4, r5, r6, lr}
  401756:	4604      	mov	r4, r0
  401758:	460e      	mov	r6, r1
  40175a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40175c:	4b0d      	ldr	r3, [pc, #52]	; (401794 <vQueueWaitForMessageRestricted+0x40>)
  40175e:	4798      	blx	r3
  401760:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401762:	f1b3 3fff 	cmp.w	r3, #4294967295
  401766:	d101      	bne.n	40176c <vQueueWaitForMessageRestricted+0x18>
  401768:	2300      	movs	r3, #0
  40176a:	6463      	str	r3, [r4, #68]	; 0x44
  40176c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40176e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401772:	d101      	bne.n	401778 <vQueueWaitForMessageRestricted+0x24>
  401774:	2300      	movs	r3, #0
  401776:	64a3      	str	r3, [r4, #72]	; 0x48
  401778:	4b07      	ldr	r3, [pc, #28]	; (401798 <vQueueWaitForMessageRestricted+0x44>)
  40177a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40177c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40177e:	b92b      	cbnz	r3, 40178c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401780:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401784:	4631      	mov	r1, r6
  401786:	462a      	mov	r2, r5
  401788:	4b04      	ldr	r3, [pc, #16]	; (40179c <vQueueWaitForMessageRestricted+0x48>)
  40178a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40178c:	4620      	mov	r0, r4
  40178e:	4b04      	ldr	r3, [pc, #16]	; (4017a0 <vQueueWaitForMessageRestricted+0x4c>)
  401790:	4798      	blx	r3
  401792:	bd70      	pop	{r4, r5, r6, pc}
  401794:	00400b5d 	.word	0x00400b5d
  401798:	00400ba9 	.word	0x00400ba9
  40179c:	00401f85 	.word	0x00401f85
  4017a0:	00400ff5 	.word	0x00400ff5

004017a4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4017a4:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <prvResetNextTaskUnblockTime+0x24>)
  4017a6:	681b      	ldr	r3, [r3, #0]
  4017a8:	681b      	ldr	r3, [r3, #0]
  4017aa:	b923      	cbnz	r3, 4017b6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4017ac:	f04f 32ff 	mov.w	r2, #4294967295
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <prvResetNextTaskUnblockTime+0x28>)
  4017b2:	601a      	str	r2, [r3, #0]
  4017b4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017b6:	4b04      	ldr	r3, [pc, #16]	; (4017c8 <prvResetNextTaskUnblockTime+0x24>)
  4017b8:	681b      	ldr	r3, [r3, #0]
  4017ba:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017bc:	68db      	ldr	r3, [r3, #12]
  4017be:	685a      	ldr	r2, [r3, #4]
  4017c0:	4b02      	ldr	r3, [pc, #8]	; (4017cc <prvResetNextTaskUnblockTime+0x28>)
  4017c2:	601a      	str	r2, [r3, #0]
  4017c4:	4770      	bx	lr
  4017c6:	bf00      	nop
  4017c8:	2040c1f0 	.word	0x2040c1f0
  4017cc:	2040c440 	.word	0x2040c440

004017d0 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4017d0:	b510      	push	{r4, lr}
  4017d2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017d4:	4b0e      	ldr	r3, [pc, #56]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017d6:	681b      	ldr	r3, [r3, #0]
  4017d8:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4017da:	4b0e      	ldr	r3, [pc, #56]	; (401814 <prvAddCurrentTaskToDelayedList+0x44>)
  4017dc:	681b      	ldr	r3, [r3, #0]
  4017de:	4298      	cmp	r0, r3
  4017e0:	d207      	bcs.n	4017f2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017e2:	4b0d      	ldr	r3, [pc, #52]	; (401818 <prvAddCurrentTaskToDelayedList+0x48>)
  4017e4:	6818      	ldr	r0, [r3, #0]
  4017e6:	4b0a      	ldr	r3, [pc, #40]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017e8:	6819      	ldr	r1, [r3, #0]
  4017ea:	3104      	adds	r1, #4
  4017ec:	4b0b      	ldr	r3, [pc, #44]	; (40181c <prvAddCurrentTaskToDelayedList+0x4c>)
  4017ee:	4798      	blx	r3
  4017f0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017f2:	4b0b      	ldr	r3, [pc, #44]	; (401820 <prvAddCurrentTaskToDelayedList+0x50>)
  4017f4:	6818      	ldr	r0, [r3, #0]
  4017f6:	4b06      	ldr	r3, [pc, #24]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017f8:	6819      	ldr	r1, [r3, #0]
  4017fa:	3104      	adds	r1, #4
  4017fc:	4b07      	ldr	r3, [pc, #28]	; (40181c <prvAddCurrentTaskToDelayedList+0x4c>)
  4017fe:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401800:	4b08      	ldr	r3, [pc, #32]	; (401824 <prvAddCurrentTaskToDelayedList+0x54>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	429c      	cmp	r4, r3
  401806:	d201      	bcs.n	40180c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <prvAddCurrentTaskToDelayedList+0x54>)
  40180a:	601c      	str	r4, [r3, #0]
  40180c:	bd10      	pop	{r4, pc}
  40180e:	bf00      	nop
  401810:	2040c420 	.word	0x2040c420
  401814:	2040c43c 	.word	0x2040c43c
  401818:	2040c210 	.word	0x2040c210
  40181c:	00400e69 	.word	0x00400e69
  401820:	2040c1f0 	.word	0x2040c1f0
  401824:	2040c440 	.word	0x2040c440

00401828 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  401828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40182c:	b083      	sub	sp, #12
  40182e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401830:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401834:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  401836:	b950      	cbnz	r0, 40184e <xTaskGenericCreate+0x26>
  401838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40183c:	b672      	cpsid	i
  40183e:	f383 8811 	msr	BASEPRI, r3
  401842:	f3bf 8f6f 	isb	sy
  401846:	f3bf 8f4f 	dsb	sy
  40184a:	b662      	cpsie	i
  40184c:	e7fe      	b.n	40184c <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40184e:	2f18      	cmp	r7, #24
  401850:	d90a      	bls.n	401868 <xTaskGenericCreate+0x40>
  401852:	f04f 0380 	mov.w	r3, #128	; 0x80
  401856:	b672      	cpsid	i
  401858:	f383 8811 	msr	BASEPRI, r3
  40185c:	f3bf 8f6f 	isb	sy
  401860:	f3bf 8f4f 	dsb	sy
  401864:	b662      	cpsie	i
  401866:	e7fe      	b.n	401866 <xTaskGenericCreate+0x3e>
  401868:	9001      	str	r0, [sp, #4]
  40186a:	9300      	str	r3, [sp, #0]
  40186c:	4690      	mov	r8, r2
  40186e:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401870:	b935      	cbnz	r5, 401880 <xTaskGenericCreate+0x58>
  401872:	0090      	lsls	r0, r2, #2
  401874:	4b5f      	ldr	r3, [pc, #380]	; (4019f4 <xTaskGenericCreate+0x1cc>)
  401876:	4798      	blx	r3

		if( pxStack != NULL )
  401878:	4605      	mov	r5, r0
  40187a:	2800      	cmp	r0, #0
  40187c:	f000 80b4 	beq.w	4019e8 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401880:	2058      	movs	r0, #88	; 0x58
  401882:	4b5c      	ldr	r3, [pc, #368]	; (4019f4 <xTaskGenericCreate+0x1cc>)
  401884:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401886:	4604      	mov	r4, r0
  401888:	b1a0      	cbz	r0, 4018b4 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40188a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40188c:	4628      	mov	r0, r5
  40188e:	21a5      	movs	r1, #165	; 0xa5
  401890:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401894:	4b58      	ldr	r3, [pc, #352]	; (4019f8 <xTaskGenericCreate+0x1d0>)
  401896:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401898:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40189c:	4445      	add	r5, r8
  40189e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4018a4:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018a8:	7833      	ldrb	r3, [r6, #0]
  4018aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018ae:	7833      	ldrb	r3, [r6, #0]
  4018b0:	b923      	cbnz	r3, 4018bc <xTaskGenericCreate+0x94>
  4018b2:	e00f      	b.n	4018d4 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4018b4:	4628      	mov	r0, r5
  4018b6:	4b51      	ldr	r3, [pc, #324]	; (4019fc <xTaskGenericCreate+0x1d4>)
  4018b8:	4798      	blx	r3
  4018ba:	e095      	b.n	4019e8 <xTaskGenericCreate+0x1c0>
  4018bc:	4633      	mov	r3, r6
  4018be:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018c2:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4018c8:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018cc:	7819      	ldrb	r1, [r3, #0]
  4018ce:	b109      	cbz	r1, 4018d4 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4018d0:	42b3      	cmp	r3, r6
  4018d2:	d1f7      	bne.n	4018c4 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018d4:	f04f 0800 	mov.w	r8, #0
  4018d8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4018dc:	463e      	mov	r6, r7
  4018de:	2f18      	cmp	r7, #24
  4018e0:	bf28      	it	cs
  4018e2:	2618      	movcs	r6, #24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4018e4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018e6:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018e8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018ec:	f104 0904 	add.w	r9, r4, #4
  4018f0:	4648      	mov	r0, r9
  4018f2:	f8df b154 	ldr.w	fp, [pc, #340]	; 401a48 <xTaskGenericCreate+0x220>
  4018f6:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018f8:	f104 0018 	add.w	r0, r4, #24
  4018fc:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018fe:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401900:	f1c6 0619 	rsb	r6, r6, #25
  401904:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401906:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401908:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40190c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401910:	4628      	mov	r0, r5
  401912:	9901      	ldr	r1, [sp, #4]
  401914:	9a00      	ldr	r2, [sp, #0]
  401916:	4b3a      	ldr	r3, [pc, #232]	; (401a00 <xTaskGenericCreate+0x1d8>)
  401918:	4798      	blx	r3
  40191a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40191c:	f1ba 0f00 	cmp.w	sl, #0
  401920:	d001      	beq.n	401926 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401922:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  401926:	4b37      	ldr	r3, [pc, #220]	; (401a04 <xTaskGenericCreate+0x1dc>)
  401928:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40192a:	4a37      	ldr	r2, [pc, #220]	; (401a08 <xTaskGenericCreate+0x1e0>)
  40192c:	6813      	ldr	r3, [r2, #0]
  40192e:	3301      	adds	r3, #1
  401930:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401932:	4b36      	ldr	r3, [pc, #216]	; (401a0c <xTaskGenericCreate+0x1e4>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	bb0b      	cbnz	r3, 40197c <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401938:	4b34      	ldr	r3, [pc, #208]	; (401a0c <xTaskGenericCreate+0x1e4>)
  40193a:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40193c:	6813      	ldr	r3, [r2, #0]
  40193e:	2b01      	cmp	r3, #1
  401940:	d126      	bne.n	401990 <xTaskGenericCreate+0x168>
  401942:	4d33      	ldr	r5, [pc, #204]	; (401a10 <xTaskGenericCreate+0x1e8>)
  401944:	f505 78fa 	add.w	r8, r5, #500	; 0x1f4
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401948:	4e32      	ldr	r6, [pc, #200]	; (401a14 <xTaskGenericCreate+0x1ec>)
  40194a:	4628      	mov	r0, r5
  40194c:	47b0      	blx	r6
  40194e:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401950:	4545      	cmp	r5, r8
  401952:	d1fa      	bne.n	40194a <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401954:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401a4c <xTaskGenericCreate+0x224>
  401958:	4640      	mov	r0, r8
  40195a:	4d2e      	ldr	r5, [pc, #184]	; (401a14 <xTaskGenericCreate+0x1ec>)
  40195c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40195e:	4e2e      	ldr	r6, [pc, #184]	; (401a18 <xTaskGenericCreate+0x1f0>)
  401960:	4630      	mov	r0, r6
  401962:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401964:	482d      	ldr	r0, [pc, #180]	; (401a1c <xTaskGenericCreate+0x1f4>)
  401966:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401968:	482d      	ldr	r0, [pc, #180]	; (401a20 <xTaskGenericCreate+0x1f8>)
  40196a:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  40196c:	482d      	ldr	r0, [pc, #180]	; (401a24 <xTaskGenericCreate+0x1fc>)
  40196e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401970:	4b2d      	ldr	r3, [pc, #180]	; (401a28 <xTaskGenericCreate+0x200>)
  401972:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401976:	4b2d      	ldr	r3, [pc, #180]	; (401a2c <xTaskGenericCreate+0x204>)
  401978:	601e      	str	r6, [r3, #0]
  40197a:	e009      	b.n	401990 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40197c:	4b2c      	ldr	r3, [pc, #176]	; (401a30 <xTaskGenericCreate+0x208>)
  40197e:	681b      	ldr	r3, [r3, #0]
  401980:	b933      	cbnz	r3, 401990 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401982:	4b22      	ldr	r3, [pc, #136]	; (401a0c <xTaskGenericCreate+0x1e4>)
  401984:	681b      	ldr	r3, [r3, #0]
  401986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401988:	429f      	cmp	r7, r3
  40198a:	d301      	bcc.n	401990 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40198c:	4b1f      	ldr	r3, [pc, #124]	; (401a0c <xTaskGenericCreate+0x1e4>)
  40198e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401990:	4a28      	ldr	r2, [pc, #160]	; (401a34 <xTaskGenericCreate+0x20c>)
  401992:	6813      	ldr	r3, [r2, #0]
  401994:	3301      	adds	r3, #1
  401996:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401998:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40199a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40199c:	4926      	ldr	r1, [pc, #152]	; (401a38 <xTaskGenericCreate+0x210>)
  40199e:	680b      	ldr	r3, [r1, #0]
  4019a0:	2201      	movs	r2, #1
  4019a2:	4082      	lsls	r2, r0
  4019a4:	4313      	orrs	r3, r2
  4019a6:	600b      	str	r3, [r1, #0]
  4019a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019ac:	4b18      	ldr	r3, [pc, #96]	; (401a10 <xTaskGenericCreate+0x1e8>)
  4019ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019b2:	4649      	mov	r1, r9
  4019b4:	4b21      	ldr	r3, [pc, #132]	; (401a3c <xTaskGenericCreate+0x214>)
  4019b6:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4019b8:	4b21      	ldr	r3, [pc, #132]	; (401a40 <xTaskGenericCreate+0x218>)
  4019ba:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4019bc:	4b1c      	ldr	r3, [pc, #112]	; (401a30 <xTaskGenericCreate+0x208>)
  4019be:	681b      	ldr	r3, [r3, #0]
  4019c0:	b173      	cbz	r3, 4019e0 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019c2:	4b12      	ldr	r3, [pc, #72]	; (401a0c <xTaskGenericCreate+0x1e4>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019c8:	429f      	cmp	r7, r3
  4019ca:	d90b      	bls.n	4019e4 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4019cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019d0:	4b1c      	ldr	r3, [pc, #112]	; (401a44 <xTaskGenericCreate+0x21c>)
  4019d2:	601a      	str	r2, [r3, #0]
  4019d4:	f3bf 8f4f 	dsb	sy
  4019d8:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4019dc:	2001      	movs	r0, #1
  4019de:	e005      	b.n	4019ec <xTaskGenericCreate+0x1c4>
  4019e0:	2001      	movs	r0, #1
  4019e2:	e003      	b.n	4019ec <xTaskGenericCreate+0x1c4>
  4019e4:	2001      	movs	r0, #1
  4019e6:	e001      	b.n	4019ec <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019e8:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4019ec:	b003      	add	sp, #12
  4019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019f2:	bf00      	nop
  4019f4:	00400db5 	.word	0x00400db5
  4019f8:	0040baad 	.word	0x0040baad
  4019fc:	00400e15 	.word	0x00400e15
  401a00:	00400b15 	.word	0x00400b15
  401a04:	00400b5d 	.word	0x00400b5d
  401a08:	2040c448 	.word	0x2040c448
  401a0c:	2040c420 	.word	0x2040c420
  401a10:	2040c218 	.word	0x2040c218
  401a14:	00400e31 	.word	0x00400e31
  401a18:	2040c44c 	.word	0x2040c44c
  401a1c:	2040c424 	.word	0x2040c424
  401a20:	2040c40c 	.word	0x2040c40c
  401a24:	2040c460 	.word	0x2040c460
  401a28:	2040c1f0 	.word	0x2040c1f0
  401a2c:	2040c210 	.word	0x2040c210
  401a30:	2040c1f4 	.word	0x2040c1f4
  401a34:	2040c444 	.word	0x2040c444
  401a38:	2040c474 	.word	0x2040c474
  401a3c:	00400e51 	.word	0x00400e51
  401a40:	00400ba9 	.word	0x00400ba9
  401a44:	e000ed04 	.word	0xe000ed04
  401a48:	00400e49 	.word	0x00400e49
  401a4c:	2040c1fc 	.word	0x2040c1fc

00401a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401a50:	b510      	push	{r4, lr}
  401a52:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a54:	2300      	movs	r3, #0
  401a56:	9300      	str	r3, [sp, #0]
  401a58:	9301      	str	r3, [sp, #4]
  401a5a:	9302      	str	r3, [sp, #8]
  401a5c:	9303      	str	r3, [sp, #12]
  401a5e:	4818      	ldr	r0, [pc, #96]	; (401ac0 <vTaskStartScheduler+0x70>)
  401a60:	4918      	ldr	r1, [pc, #96]	; (401ac4 <vTaskStartScheduler+0x74>)
  401a62:	2282      	movs	r2, #130	; 0x82
  401a64:	4c18      	ldr	r4, [pc, #96]	; (401ac8 <vTaskStartScheduler+0x78>)
  401a66:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401a68:	2801      	cmp	r0, #1
  401a6a:	d11a      	bne.n	401aa2 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401a6c:	4b17      	ldr	r3, [pc, #92]	; (401acc <vTaskStartScheduler+0x7c>)
  401a6e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a70:	2801      	cmp	r0, #1
  401a72:	d116      	bne.n	401aa2 <vTaskStartScheduler+0x52>
  401a74:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a78:	b672      	cpsid	i
  401a7a:	f383 8811 	msr	BASEPRI, r3
  401a7e:	f3bf 8f6f 	isb	sy
  401a82:	f3bf 8f4f 	dsb	sy
  401a86:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a88:	f04f 32ff 	mov.w	r2, #4294967295
  401a8c:	4b10      	ldr	r3, [pc, #64]	; (401ad0 <vTaskStartScheduler+0x80>)
  401a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a90:	2201      	movs	r2, #1
  401a92:	4b10      	ldr	r3, [pc, #64]	; (401ad4 <vTaskStartScheduler+0x84>)
  401a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a96:	2200      	movs	r2, #0
  401a98:	4b0f      	ldr	r3, [pc, #60]	; (401ad8 <vTaskStartScheduler+0x88>)
  401a9a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a9c:	4b0f      	ldr	r3, [pc, #60]	; (401adc <vTaskStartScheduler+0x8c>)
  401a9e:	4798      	blx	r3
  401aa0:	e00b      	b.n	401aba <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401aa2:	b950      	cbnz	r0, 401aba <vTaskStartScheduler+0x6a>
  401aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa8:	b672      	cpsid	i
  401aaa:	f383 8811 	msr	BASEPRI, r3
  401aae:	f3bf 8f6f 	isb	sy
  401ab2:	f3bf 8f4f 	dsb	sy
  401ab6:	b662      	cpsie	i
  401ab8:	e7fe      	b.n	401ab8 <vTaskStartScheduler+0x68>
	}
}
  401aba:	b004      	add	sp, #16
  401abc:	bd10      	pop	{r4, pc}
  401abe:	bf00      	nop
  401ac0:	00401dd9 	.word	0x00401dd9
  401ac4:	00412fd8 	.word	0x00412fd8
  401ac8:	00401829 	.word	0x00401829
  401acc:	004023dd 	.word	0x004023dd
  401ad0:	2040c440 	.word	0x2040c440
  401ad4:	2040c1f4 	.word	0x2040c1f4
  401ad8:	2040c43c 	.word	0x2040c43c
  401adc:	00400c8d 	.word	0x00400c8d

00401ae0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ae0:	4a02      	ldr	r2, [pc, #8]	; (401aec <vTaskSuspendAll+0xc>)
  401ae2:	6813      	ldr	r3, [r2, #0]
  401ae4:	3301      	adds	r3, #1
  401ae6:	6013      	str	r3, [r2, #0]
  401ae8:	4770      	bx	lr
  401aea:	bf00      	nop
  401aec:	2040c438 	.word	0x2040c438

00401af0 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401af0:	4b01      	ldr	r3, [pc, #4]	; (401af8 <xTaskGetTickCount+0x8>)
  401af2:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401af4:	4770      	bx	lr
  401af6:	bf00      	nop
  401af8:	2040c43c 	.word	0x2040c43c

00401afc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b00:	4b3d      	ldr	r3, [pc, #244]	; (401bf8 <xTaskIncrementTick+0xfc>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	2b00      	cmp	r3, #0
  401b06:	d16a      	bne.n	401bde <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401b08:	4b3c      	ldr	r3, [pc, #240]	; (401bfc <xTaskIncrementTick+0x100>)
  401b0a:	681a      	ldr	r2, [r3, #0]
  401b0c:	3201      	adds	r2, #1
  401b0e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b10:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401b12:	b9d6      	cbnz	r6, 401b4a <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401b14:	4b3a      	ldr	r3, [pc, #232]	; (401c00 <xTaskIncrementTick+0x104>)
  401b16:	681b      	ldr	r3, [r3, #0]
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	b153      	cbz	r3, 401b32 <xTaskIncrementTick+0x36>
  401b1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b20:	b672      	cpsid	i
  401b22:	f383 8811 	msr	BASEPRI, r3
  401b26:	f3bf 8f6f 	isb	sy
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	b662      	cpsie	i
  401b30:	e7fe      	b.n	401b30 <xTaskIncrementTick+0x34>
  401b32:	4a33      	ldr	r2, [pc, #204]	; (401c00 <xTaskIncrementTick+0x104>)
  401b34:	6811      	ldr	r1, [r2, #0]
  401b36:	4b33      	ldr	r3, [pc, #204]	; (401c04 <xTaskIncrementTick+0x108>)
  401b38:	6818      	ldr	r0, [r3, #0]
  401b3a:	6010      	str	r0, [r2, #0]
  401b3c:	6019      	str	r1, [r3, #0]
  401b3e:	4a32      	ldr	r2, [pc, #200]	; (401c08 <xTaskIncrementTick+0x10c>)
  401b40:	6813      	ldr	r3, [r2, #0]
  401b42:	3301      	adds	r3, #1
  401b44:	6013      	str	r3, [r2, #0]
  401b46:	4b31      	ldr	r3, [pc, #196]	; (401c0c <xTaskIncrementTick+0x110>)
  401b48:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b4a:	4b31      	ldr	r3, [pc, #196]	; (401c10 <xTaskIncrementTick+0x114>)
  401b4c:	681b      	ldr	r3, [r3, #0]
  401b4e:	429e      	cmp	r6, r3
  401b50:	d201      	bcs.n	401b56 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b52:	2400      	movs	r4, #0
  401b54:	e037      	b.n	401bc6 <xTaskIncrementTick+0xca>
  401b56:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b58:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401c00 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b5c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401c2c <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b60:	4f2c      	ldr	r7, [pc, #176]	; (401c14 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b62:	f8d9 3000 	ldr.w	r3, [r9]
  401b66:	681b      	ldr	r3, [r3, #0]
  401b68:	b923      	cbnz	r3, 401b74 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401b6a:	f04f 32ff 	mov.w	r2, #4294967295
  401b6e:	4b28      	ldr	r3, [pc, #160]	; (401c10 <xTaskIncrementTick+0x114>)
  401b70:	601a      	str	r2, [r3, #0]
						break;
  401b72:	e028      	b.n	401bc6 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b74:	f8d9 3000 	ldr.w	r3, [r9]
  401b78:	68db      	ldr	r3, [r3, #12]
  401b7a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b7c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b7e:	429e      	cmp	r6, r3
  401b80:	d202      	bcs.n	401b88 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b82:	4a23      	ldr	r2, [pc, #140]	; (401c10 <xTaskIncrementTick+0x114>)
  401b84:	6013      	str	r3, [r2, #0]
							break;
  401b86:	e01e      	b.n	401bc6 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b88:	f105 0a04 	add.w	sl, r5, #4
  401b8c:	4650      	mov	r0, sl
  401b8e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b92:	b113      	cbz	r3, 401b9a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b94:	f105 0018 	add.w	r0, r5, #24
  401b98:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b9c:	683b      	ldr	r3, [r7, #0]
  401b9e:	2201      	movs	r2, #1
  401ba0:	4082      	lsls	r2, r0
  401ba2:	4313      	orrs	r3, r2
  401ba4:	603b      	str	r3, [r7, #0]
  401ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401baa:	4b1b      	ldr	r3, [pc, #108]	; (401c18 <xTaskIncrementTick+0x11c>)
  401bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401bb0:	4651      	mov	r1, sl
  401bb2:	4b1a      	ldr	r3, [pc, #104]	; (401c1c <xTaskIncrementTick+0x120>)
  401bb4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bb6:	4b1a      	ldr	r3, [pc, #104]	; (401c20 <xTaskIncrementTick+0x124>)
  401bb8:	681b      	ldr	r3, [r3, #0]
  401bba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401bbe:	429a      	cmp	r2, r3
  401bc0:	bf28      	it	cs
  401bc2:	2401      	movcs	r4, #1
  401bc4:	e7cd      	b.n	401b62 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401bc6:	4b16      	ldr	r3, [pc, #88]	; (401c20 <xTaskIncrementTick+0x124>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bd0:	4a11      	ldr	r2, [pc, #68]	; (401c18 <xTaskIncrementTick+0x11c>)
  401bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401bd6:	2b02      	cmp	r3, #2
  401bd8:	bf28      	it	cs
  401bda:	2401      	movcs	r4, #1
  401bdc:	e004      	b.n	401be8 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401bde:	4a11      	ldr	r2, [pc, #68]	; (401c24 <xTaskIncrementTick+0x128>)
  401be0:	6813      	ldr	r3, [r2, #0]
  401be2:	3301      	adds	r3, #1
  401be4:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401be6:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401be8:	4b0f      	ldr	r3, [pc, #60]	; (401c28 <xTaskIncrementTick+0x12c>)
  401bea:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401bec:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401bee:	bf0c      	ite	eq
  401bf0:	4620      	moveq	r0, r4
  401bf2:	2001      	movne	r0, #1
  401bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bf8:	2040c438 	.word	0x2040c438
  401bfc:	2040c43c 	.word	0x2040c43c
  401c00:	2040c1f0 	.word	0x2040c1f0
  401c04:	2040c210 	.word	0x2040c210
  401c08:	2040c1ec 	.word	0x2040c1ec
  401c0c:	004017a5 	.word	0x004017a5
  401c10:	2040c440 	.word	0x2040c440
  401c14:	2040c474 	.word	0x2040c474
  401c18:	2040c218 	.word	0x2040c218
  401c1c:	00400e51 	.word	0x00400e51
  401c20:	2040c420 	.word	0x2040c420
  401c24:	2040c214 	.word	0x2040c214
  401c28:	2040c478 	.word	0x2040c478
  401c2c:	00400e9d 	.word	0x00400e9d

00401c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401c34:	4b36      	ldr	r3, [pc, #216]	; (401d10 <xTaskResumeAll+0xe0>)
  401c36:	681b      	ldr	r3, [r3, #0]
  401c38:	b953      	cbnz	r3, 401c50 <xTaskResumeAll+0x20>
  401c3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c3e:	b672      	cpsid	i
  401c40:	f383 8811 	msr	BASEPRI, r3
  401c44:	f3bf 8f6f 	isb	sy
  401c48:	f3bf 8f4f 	dsb	sy
  401c4c:	b662      	cpsie	i
  401c4e:	e7fe      	b.n	401c4e <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401c50:	4b30      	ldr	r3, [pc, #192]	; (401d14 <xTaskResumeAll+0xe4>)
  401c52:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401c54:	4b2e      	ldr	r3, [pc, #184]	; (401d10 <xTaskResumeAll+0xe0>)
  401c56:	681a      	ldr	r2, [r3, #0]
  401c58:	3a01      	subs	r2, #1
  401c5a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c5c:	681b      	ldr	r3, [r3, #0]
  401c5e:	2b00      	cmp	r3, #0
  401c60:	d14d      	bne.n	401cfe <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c62:	4b2d      	ldr	r3, [pc, #180]	; (401d18 <xTaskResumeAll+0xe8>)
  401c64:	681b      	ldr	r3, [r3, #0]
  401c66:	bb0b      	cbnz	r3, 401cac <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c68:	2400      	movs	r4, #0
  401c6a:	e04b      	b.n	401d04 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c6c:	68fb      	ldr	r3, [r7, #12]
  401c6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c70:	f104 0018 	add.w	r0, r4, #24
  401c74:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c76:	f104 0804 	add.w	r8, r4, #4
  401c7a:	4640      	mov	r0, r8
  401c7c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c80:	682b      	ldr	r3, [r5, #0]
  401c82:	2201      	movs	r2, #1
  401c84:	4082      	lsls	r2, r0
  401c86:	4313      	orrs	r3, r2
  401c88:	602b      	str	r3, [r5, #0]
  401c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c8e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c92:	4641      	mov	r1, r8
  401c94:	4b21      	ldr	r3, [pc, #132]	; (401d1c <xTaskResumeAll+0xec>)
  401c96:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c98:	4b21      	ldr	r3, [pc, #132]	; (401d20 <xTaskResumeAll+0xf0>)
  401c9a:	681b      	ldr	r3, [r3, #0]
  401c9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ca0:	429a      	cmp	r2, r3
  401ca2:	d308      	bcc.n	401cb6 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401ca4:	2201      	movs	r2, #1
  401ca6:	4b1f      	ldr	r3, [pc, #124]	; (401d24 <xTaskResumeAll+0xf4>)
  401ca8:	601a      	str	r2, [r3, #0]
  401caa:	e004      	b.n	401cb6 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cac:	4f1e      	ldr	r7, [pc, #120]	; (401d28 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cae:	4e1f      	ldr	r6, [pc, #124]	; (401d2c <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401cb0:	4d1f      	ldr	r5, [pc, #124]	; (401d30 <xTaskResumeAll+0x100>)
  401cb2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401d44 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cb6:	683b      	ldr	r3, [r7, #0]
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d1d7      	bne.n	401c6c <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401cbc:	4b1d      	ldr	r3, [pc, #116]	; (401d34 <xTaskResumeAll+0x104>)
  401cbe:	681b      	ldr	r3, [r3, #0]
  401cc0:	b17b      	cbz	r3, 401ce2 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cc2:	4b1c      	ldr	r3, [pc, #112]	; (401d34 <xTaskResumeAll+0x104>)
  401cc4:	681b      	ldr	r3, [r3, #0]
  401cc6:	b163      	cbz	r3, 401ce2 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cc8:	4e1b      	ldr	r6, [pc, #108]	; (401d38 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401cca:	4d16      	ldr	r5, [pc, #88]	; (401d24 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401ccc:	4c19      	ldr	r4, [pc, #100]	; (401d34 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cce:	47b0      	blx	r6
  401cd0:	b108      	cbz	r0, 401cd6 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401cd2:	2301      	movs	r3, #1
  401cd4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cd6:	6823      	ldr	r3, [r4, #0]
  401cd8:	3b01      	subs	r3, #1
  401cda:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cdc:	6823      	ldr	r3, [r4, #0]
  401cde:	2b00      	cmp	r3, #0
  401ce0:	d1f5      	bne.n	401cce <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401ce2:	4b10      	ldr	r3, [pc, #64]	; (401d24 <xTaskResumeAll+0xf4>)
  401ce4:	681b      	ldr	r3, [r3, #0]
  401ce6:	2b01      	cmp	r3, #1
  401ce8:	d10b      	bne.n	401d02 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401cee:	4b13      	ldr	r3, [pc, #76]	; (401d3c <xTaskResumeAll+0x10c>)
  401cf0:	601a      	str	r2, [r3, #0]
  401cf2:	f3bf 8f4f 	dsb	sy
  401cf6:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401cfa:	2401      	movs	r4, #1
  401cfc:	e002      	b.n	401d04 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401cfe:	2400      	movs	r4, #0
  401d00:	e000      	b.n	401d04 <xTaskResumeAll+0xd4>
  401d02:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d04:	4b0e      	ldr	r3, [pc, #56]	; (401d40 <xTaskResumeAll+0x110>)
  401d06:	4798      	blx	r3

	return xAlreadyYielded;
}
  401d08:	4620      	mov	r0, r4
  401d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d0e:	bf00      	nop
  401d10:	2040c438 	.word	0x2040c438
  401d14:	00400b5d 	.word	0x00400b5d
  401d18:	2040c448 	.word	0x2040c448
  401d1c:	00400e51 	.word	0x00400e51
  401d20:	2040c420 	.word	0x2040c420
  401d24:	2040c478 	.word	0x2040c478
  401d28:	2040c424 	.word	0x2040c424
  401d2c:	00400e9d 	.word	0x00400e9d
  401d30:	2040c474 	.word	0x2040c474
  401d34:	2040c214 	.word	0x2040c214
  401d38:	00401afd 	.word	0x00401afd
  401d3c:	e000ed04 	.word	0xe000ed04
  401d40:	00400ba9 	.word	0x00400ba9
  401d44:	2040c218 	.word	0x2040c218

00401d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401d48:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d4a:	2800      	cmp	r0, #0
  401d4c:	d029      	beq.n	401da2 <vTaskDelay+0x5a>
  401d4e:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401d50:	4b18      	ldr	r3, [pc, #96]	; (401db4 <vTaskDelay+0x6c>)
  401d52:	681b      	ldr	r3, [r3, #0]
  401d54:	b153      	cbz	r3, 401d6c <vTaskDelay+0x24>
  401d56:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d5a:	b672      	cpsid	i
  401d5c:	f383 8811 	msr	BASEPRI, r3
  401d60:	f3bf 8f6f 	isb	sy
  401d64:	f3bf 8f4f 	dsb	sy
  401d68:	b662      	cpsie	i
  401d6a:	e7fe      	b.n	401d6a <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d6c:	4b12      	ldr	r3, [pc, #72]	; (401db8 <vTaskDelay+0x70>)
  401d6e:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d70:	4b12      	ldr	r3, [pc, #72]	; (401dbc <vTaskDelay+0x74>)
  401d72:	681b      	ldr	r3, [r3, #0]
  401d74:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d76:	4b12      	ldr	r3, [pc, #72]	; (401dc0 <vTaskDelay+0x78>)
  401d78:	6818      	ldr	r0, [r3, #0]
  401d7a:	3004      	adds	r0, #4
  401d7c:	4b11      	ldr	r3, [pc, #68]	; (401dc4 <vTaskDelay+0x7c>)
  401d7e:	4798      	blx	r3
  401d80:	b948      	cbnz	r0, 401d96 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d82:	4b0f      	ldr	r3, [pc, #60]	; (401dc0 <vTaskDelay+0x78>)
  401d84:	681a      	ldr	r2, [r3, #0]
  401d86:	4910      	ldr	r1, [pc, #64]	; (401dc8 <vTaskDelay+0x80>)
  401d88:	680b      	ldr	r3, [r1, #0]
  401d8a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d8c:	2201      	movs	r2, #1
  401d8e:	4082      	lsls	r2, r0
  401d90:	ea23 0302 	bic.w	r3, r3, r2
  401d94:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d96:	4620      	mov	r0, r4
  401d98:	4b0c      	ldr	r3, [pc, #48]	; (401dcc <vTaskDelay+0x84>)
  401d9a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d9c:	4b0c      	ldr	r3, [pc, #48]	; (401dd0 <vTaskDelay+0x88>)
  401d9e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401da0:	b938      	cbnz	r0, 401db2 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401da6:	4b0b      	ldr	r3, [pc, #44]	; (401dd4 <vTaskDelay+0x8c>)
  401da8:	601a      	str	r2, [r3, #0]
  401daa:	f3bf 8f4f 	dsb	sy
  401dae:	f3bf 8f6f 	isb	sy
  401db2:	bd10      	pop	{r4, pc}
  401db4:	2040c438 	.word	0x2040c438
  401db8:	00401ae1 	.word	0x00401ae1
  401dbc:	2040c43c 	.word	0x2040c43c
  401dc0:	2040c420 	.word	0x2040c420
  401dc4:	00400e9d 	.word	0x00400e9d
  401dc8:	2040c474 	.word	0x2040c474
  401dcc:	004017d1 	.word	0x004017d1
  401dd0:	00401c31 	.word	0x00401c31
  401dd4:	e000ed04 	.word	0xe000ed04

00401dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401dd8:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dda:	4d18      	ldr	r5, [pc, #96]	; (401e3c <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ddc:	4e18      	ldr	r6, [pc, #96]	; (401e40 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dde:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e60 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401de2:	4f18      	ldr	r7, [pc, #96]	; (401e44 <prvIdleTask+0x6c>)
  401de4:	e019      	b.n	401e1a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401de6:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401de8:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401dea:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401dec:	b1ac      	cbz	r4, 401e1a <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401dee:	4b16      	ldr	r3, [pc, #88]	; (401e48 <prvIdleTask+0x70>)
  401df0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401df2:	68f3      	ldr	r3, [r6, #12]
  401df4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401df6:	1d20      	adds	r0, r4, #4
  401df8:	4b14      	ldr	r3, [pc, #80]	; (401e4c <prvIdleTask+0x74>)
  401dfa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401dfc:	4a14      	ldr	r2, [pc, #80]	; (401e50 <prvIdleTask+0x78>)
  401dfe:	6813      	ldr	r3, [r2, #0]
  401e00:	3b01      	subs	r3, #1
  401e02:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401e04:	682b      	ldr	r3, [r5, #0]
  401e06:	3b01      	subs	r3, #1
  401e08:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401e0a:	4b12      	ldr	r3, [pc, #72]	; (401e54 <prvIdleTask+0x7c>)
  401e0c:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401e0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e10:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e64 <prvIdleTask+0x8c>
  401e14:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401e16:	4620      	mov	r0, r4
  401e18:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e1a:	682b      	ldr	r3, [r5, #0]
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d1e2      	bne.n	401de6 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e20:	4b0d      	ldr	r3, [pc, #52]	; (401e58 <prvIdleTask+0x80>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	2b01      	cmp	r3, #1
  401e26:	d9f8      	bls.n	401e1a <prvIdleTask+0x42>
			{
				taskYIELD();
  401e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e2c:	4b0b      	ldr	r3, [pc, #44]	; (401e5c <prvIdleTask+0x84>)
  401e2e:	601a      	str	r2, [r3, #0]
  401e30:	f3bf 8f4f 	dsb	sy
  401e34:	f3bf 8f6f 	isb	sy
  401e38:	e7d1      	b.n	401dde <prvIdleTask+0x6>
  401e3a:	bf00      	nop
  401e3c:	2040c1f8 	.word	0x2040c1f8
  401e40:	2040c40c 	.word	0x2040c40c
  401e44:	00401c31 	.word	0x00401c31
  401e48:	00400b5d 	.word	0x00400b5d
  401e4c:	00400e9d 	.word	0x00400e9d
  401e50:	2040c448 	.word	0x2040c448
  401e54:	00400ba9 	.word	0x00400ba9
  401e58:	2040c218 	.word	0x2040c218
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	00401ae1 	.word	0x00401ae1
  401e64:	00400e15 	.word	0x00400e15

00401e68 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401e68:	4b20      	ldr	r3, [pc, #128]	; (401eec <vTaskSwitchContext+0x84>)
  401e6a:	681b      	ldr	r3, [r3, #0]
  401e6c:	b11b      	cbz	r3, 401e76 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401e6e:	2201      	movs	r2, #1
  401e70:	4b1f      	ldr	r3, [pc, #124]	; (401ef0 <vTaskSwitchContext+0x88>)
  401e72:	601a      	str	r2, [r3, #0]
  401e74:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401e76:	2200      	movs	r2, #0
  401e78:	4b1d      	ldr	r3, [pc, #116]	; (401ef0 <vTaskSwitchContext+0x88>)
  401e7a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e7c:	4b1d      	ldr	r3, [pc, #116]	; (401ef4 <vTaskSwitchContext+0x8c>)
  401e7e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401e80:	fab3 f383 	clz	r3, r3
  401e84:	b2db      	uxtb	r3, r3
  401e86:	f1c3 031f 	rsb	r3, r3, #31
  401e8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e8e:	4a1a      	ldr	r2, [pc, #104]	; (401ef8 <vTaskSwitchContext+0x90>)
  401e90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e94:	b952      	cbnz	r2, 401eac <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e9a:	b672      	cpsid	i
  401e9c:	f383 8811 	msr	BASEPRI, r3
  401ea0:	f3bf 8f6f 	isb	sy
  401ea4:	f3bf 8f4f 	dsb	sy
  401ea8:	b662      	cpsie	i
  401eaa:	e7fe      	b.n	401eaa <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401eac:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401eae:	4a12      	ldr	r2, [pc, #72]	; (401ef8 <vTaskSwitchContext+0x90>)
  401eb0:	0099      	lsls	r1, r3, #2
  401eb2:	18c8      	adds	r0, r1, r3
  401eb4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401eb8:	6844      	ldr	r4, [r0, #4]
  401eba:	6864      	ldr	r4, [r4, #4]
  401ebc:	6044      	str	r4, [r0, #4]
  401ebe:	4602      	mov	r2, r0
  401ec0:	3208      	adds	r2, #8
  401ec2:	4294      	cmp	r4, r2
  401ec4:	d106      	bne.n	401ed4 <vTaskSwitchContext+0x6c>
  401ec6:	6860      	ldr	r0, [r4, #4]
  401ec8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ecc:	4a0a      	ldr	r2, [pc, #40]	; (401ef8 <vTaskSwitchContext+0x90>)
  401ece:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401ed2:	6050      	str	r0, [r2, #4]
  401ed4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ed8:	4a07      	ldr	r2, [pc, #28]	; (401ef8 <vTaskSwitchContext+0x90>)
  401eda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ede:	685b      	ldr	r3, [r3, #4]
  401ee0:	68da      	ldr	r2, [r3, #12]
  401ee2:	4b06      	ldr	r3, [pc, #24]	; (401efc <vTaskSwitchContext+0x94>)
  401ee4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401eea:	4770      	bx	lr
  401eec:	2040c438 	.word	0x2040c438
  401ef0:	2040c478 	.word	0x2040c478
  401ef4:	2040c474 	.word	0x2040c474
  401ef8:	2040c218 	.word	0x2040c218
  401efc:	2040c420 	.word	0x2040c420

00401f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401f00:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401f02:	b950      	cbnz	r0, 401f1a <vTaskPlaceOnEventList+0x1a>
  401f04:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f08:	b672      	cpsid	i
  401f0a:	f383 8811 	msr	BASEPRI, r3
  401f0e:	f3bf 8f6f 	isb	sy
  401f12:	f3bf 8f4f 	dsb	sy
  401f16:	b662      	cpsie	i
  401f18:	e7fe      	b.n	401f18 <vTaskPlaceOnEventList+0x18>
  401f1a:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f1c:	4d11      	ldr	r5, [pc, #68]	; (401f64 <vTaskPlaceOnEventList+0x64>)
  401f1e:	6829      	ldr	r1, [r5, #0]
  401f20:	3118      	adds	r1, #24
  401f22:	4b11      	ldr	r3, [pc, #68]	; (401f68 <vTaskPlaceOnEventList+0x68>)
  401f24:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f26:	6828      	ldr	r0, [r5, #0]
  401f28:	3004      	adds	r0, #4
  401f2a:	4b10      	ldr	r3, [pc, #64]	; (401f6c <vTaskPlaceOnEventList+0x6c>)
  401f2c:	4798      	blx	r3
  401f2e:	b940      	cbnz	r0, 401f42 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f30:	682a      	ldr	r2, [r5, #0]
  401f32:	490f      	ldr	r1, [pc, #60]	; (401f70 <vTaskPlaceOnEventList+0x70>)
  401f34:	680b      	ldr	r3, [r1, #0]
  401f36:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f38:	2201      	movs	r2, #1
  401f3a:	4082      	lsls	r2, r0
  401f3c:	ea23 0302 	bic.w	r3, r3, r2
  401f40:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401f42:	f1b4 3fff 	cmp.w	r4, #4294967295
  401f46:	d106      	bne.n	401f56 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f48:	4b06      	ldr	r3, [pc, #24]	; (401f64 <vTaskPlaceOnEventList+0x64>)
  401f4a:	6819      	ldr	r1, [r3, #0]
  401f4c:	4809      	ldr	r0, [pc, #36]	; (401f74 <vTaskPlaceOnEventList+0x74>)
  401f4e:	3104      	adds	r1, #4
  401f50:	4b09      	ldr	r3, [pc, #36]	; (401f78 <vTaskPlaceOnEventList+0x78>)
  401f52:	4798      	blx	r3
  401f54:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401f56:	4b09      	ldr	r3, [pc, #36]	; (401f7c <vTaskPlaceOnEventList+0x7c>)
  401f58:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f5a:	4420      	add	r0, r4
  401f5c:	4b08      	ldr	r3, [pc, #32]	; (401f80 <vTaskPlaceOnEventList+0x80>)
  401f5e:	4798      	blx	r3
  401f60:	bd38      	pop	{r3, r4, r5, pc}
  401f62:	bf00      	nop
  401f64:	2040c420 	.word	0x2040c420
  401f68:	00400e69 	.word	0x00400e69
  401f6c:	00400e9d 	.word	0x00400e9d
  401f70:	2040c474 	.word	0x2040c474
  401f74:	2040c460 	.word	0x2040c460
  401f78:	00400e51 	.word	0x00400e51
  401f7c:	2040c43c 	.word	0x2040c43c
  401f80:	004017d1 	.word	0x004017d1

00401f84 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401f84:	b950      	cbnz	r0, 401f9c <vTaskPlaceOnEventListRestricted+0x18>
  401f86:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f8a:	b672      	cpsid	i
  401f8c:	f383 8811 	msr	BASEPRI, r3
  401f90:	f3bf 8f6f 	isb	sy
  401f94:	f3bf 8f4f 	dsb	sy
  401f98:	b662      	cpsie	i
  401f9a:	e7fe      	b.n	401f9a <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401f9c:	b570      	push	{r4, r5, r6, lr}
  401f9e:	4615      	mov	r5, r2
  401fa0:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401fa2:	4e11      	ldr	r6, [pc, #68]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x64>)
  401fa4:	6831      	ldr	r1, [r6, #0]
  401fa6:	3118      	adds	r1, #24
  401fa8:	4b10      	ldr	r3, [pc, #64]	; (401fec <vTaskPlaceOnEventListRestricted+0x68>)
  401faa:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fac:	6830      	ldr	r0, [r6, #0]
  401fae:	3004      	adds	r0, #4
  401fb0:	4b0f      	ldr	r3, [pc, #60]	; (401ff0 <vTaskPlaceOnEventListRestricted+0x6c>)
  401fb2:	4798      	blx	r3
  401fb4:	b940      	cbnz	r0, 401fc8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401fb6:	6832      	ldr	r2, [r6, #0]
  401fb8:	490e      	ldr	r1, [pc, #56]	; (401ff4 <vTaskPlaceOnEventListRestricted+0x70>)
  401fba:	680b      	ldr	r3, [r1, #0]
  401fbc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401fbe:	2201      	movs	r2, #1
  401fc0:	4082      	lsls	r2, r0
  401fc2:	ea23 0302 	bic.w	r3, r3, r2
  401fc6:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401fc8:	2d01      	cmp	r5, #1
  401fca:	d106      	bne.n	401fda <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fcc:	4b06      	ldr	r3, [pc, #24]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x64>)
  401fce:	6819      	ldr	r1, [r3, #0]
  401fd0:	4809      	ldr	r0, [pc, #36]	; (401ff8 <vTaskPlaceOnEventListRestricted+0x74>)
  401fd2:	3104      	adds	r1, #4
  401fd4:	4b05      	ldr	r3, [pc, #20]	; (401fec <vTaskPlaceOnEventListRestricted+0x68>)
  401fd6:	4798      	blx	r3
  401fd8:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401fda:	4b08      	ldr	r3, [pc, #32]	; (401ffc <vTaskPlaceOnEventListRestricted+0x78>)
  401fdc:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fde:	4420      	add	r0, r4
  401fe0:	4b07      	ldr	r3, [pc, #28]	; (402000 <vTaskPlaceOnEventListRestricted+0x7c>)
  401fe2:	4798      	blx	r3
  401fe4:	bd70      	pop	{r4, r5, r6, pc}
  401fe6:	bf00      	nop
  401fe8:	2040c420 	.word	0x2040c420
  401fec:	00400e51 	.word	0x00400e51
  401ff0:	00400e9d 	.word	0x00400e9d
  401ff4:	2040c474 	.word	0x2040c474
  401ff8:	2040c460 	.word	0x2040c460
  401ffc:	2040c43c 	.word	0x2040c43c
  402000:	004017d1 	.word	0x004017d1

00402004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  402004:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402006:	68c3      	ldr	r3, [r0, #12]
  402008:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40200a:	b954      	cbnz	r4, 402022 <xTaskRemoveFromEventList+0x1e>
  40200c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402010:	b672      	cpsid	i
  402012:	f383 8811 	msr	BASEPRI, r3
  402016:	f3bf 8f6f 	isb	sy
  40201a:	f3bf 8f4f 	dsb	sy
  40201e:	b662      	cpsie	i
  402020:	e7fe      	b.n	402020 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402022:	f104 0518 	add.w	r5, r4, #24
  402026:	4628      	mov	r0, r5
  402028:	4b14      	ldr	r3, [pc, #80]	; (40207c <xTaskRemoveFromEventList+0x78>)
  40202a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40202c:	4b14      	ldr	r3, [pc, #80]	; (402080 <xTaskRemoveFromEventList+0x7c>)
  40202e:	681b      	ldr	r3, [r3, #0]
  402030:	b99b      	cbnz	r3, 40205a <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402032:	1d25      	adds	r5, r4, #4
  402034:	4628      	mov	r0, r5
  402036:	4b11      	ldr	r3, [pc, #68]	; (40207c <xTaskRemoveFromEventList+0x78>)
  402038:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40203a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40203c:	4911      	ldr	r1, [pc, #68]	; (402084 <xTaskRemoveFromEventList+0x80>)
  40203e:	680b      	ldr	r3, [r1, #0]
  402040:	2201      	movs	r2, #1
  402042:	4082      	lsls	r2, r0
  402044:	4313      	orrs	r3, r2
  402046:	600b      	str	r3, [r1, #0]
  402048:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40204c:	4b0e      	ldr	r3, [pc, #56]	; (402088 <xTaskRemoveFromEventList+0x84>)
  40204e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402052:	4629      	mov	r1, r5
  402054:	4b0d      	ldr	r3, [pc, #52]	; (40208c <xTaskRemoveFromEventList+0x88>)
  402056:	4798      	blx	r3
  402058:	e003      	b.n	402062 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40205a:	480d      	ldr	r0, [pc, #52]	; (402090 <xTaskRemoveFromEventList+0x8c>)
  40205c:	4629      	mov	r1, r5
  40205e:	4b0b      	ldr	r3, [pc, #44]	; (40208c <xTaskRemoveFromEventList+0x88>)
  402060:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402062:	4b0c      	ldr	r3, [pc, #48]	; (402094 <xTaskRemoveFromEventList+0x90>)
  402064:	681b      	ldr	r3, [r3, #0]
  402066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40206a:	429a      	cmp	r2, r3
  40206c:	d903      	bls.n	402076 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  40206e:	2001      	movs	r0, #1
  402070:	4b09      	ldr	r3, [pc, #36]	; (402098 <xTaskRemoveFromEventList+0x94>)
  402072:	6018      	str	r0, [r3, #0]
  402074:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  402076:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  402078:	bd38      	pop	{r3, r4, r5, pc}
  40207a:	bf00      	nop
  40207c:	00400e9d 	.word	0x00400e9d
  402080:	2040c438 	.word	0x2040c438
  402084:	2040c474 	.word	0x2040c474
  402088:	2040c218 	.word	0x2040c218
  40208c:	00400e51 	.word	0x00400e51
  402090:	2040c424 	.word	0x2040c424
  402094:	2040c420 	.word	0x2040c420
  402098:	2040c478 	.word	0x2040c478

0040209c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  40209c:	b950      	cbnz	r0, 4020b4 <vTaskSetTimeOutState+0x18>
  40209e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a2:	b672      	cpsid	i
  4020a4:	f383 8811 	msr	BASEPRI, r3
  4020a8:	f3bf 8f6f 	isb	sy
  4020ac:	f3bf 8f4f 	dsb	sy
  4020b0:	b662      	cpsie	i
  4020b2:	e7fe      	b.n	4020b2 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4020b4:	4a03      	ldr	r2, [pc, #12]	; (4020c4 <vTaskSetTimeOutState+0x28>)
  4020b6:	6812      	ldr	r2, [r2, #0]
  4020b8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4020ba:	4a03      	ldr	r2, [pc, #12]	; (4020c8 <vTaskSetTimeOutState+0x2c>)
  4020bc:	6812      	ldr	r2, [r2, #0]
  4020be:	6042      	str	r2, [r0, #4]
  4020c0:	4770      	bx	lr
  4020c2:	bf00      	nop
  4020c4:	2040c1ec 	.word	0x2040c1ec
  4020c8:	2040c43c 	.word	0x2040c43c

004020cc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4020cc:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4020ce:	b950      	cbnz	r0, 4020e6 <xTaskCheckForTimeOut+0x1a>
  4020d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d4:	b672      	cpsid	i
  4020d6:	f383 8811 	msr	BASEPRI, r3
  4020da:	f3bf 8f6f 	isb	sy
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	b662      	cpsie	i
  4020e4:	e7fe      	b.n	4020e4 <xTaskCheckForTimeOut+0x18>
  4020e6:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4020e8:	b951      	cbnz	r1, 402100 <xTaskCheckForTimeOut+0x34>
  4020ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ee:	b672      	cpsid	i
  4020f0:	f383 8811 	msr	BASEPRI, r3
  4020f4:	f3bf 8f6f 	isb	sy
  4020f8:	f3bf 8f4f 	dsb	sy
  4020fc:	b662      	cpsie	i
  4020fe:	e7fe      	b.n	4020fe <xTaskCheckForTimeOut+0x32>
  402100:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  402102:	4b12      	ldr	r3, [pc, #72]	; (40214c <xTaskCheckForTimeOut+0x80>)
  402104:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  402106:	4b12      	ldr	r3, [pc, #72]	; (402150 <xTaskCheckForTimeOut+0x84>)
  402108:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40210a:	682b      	ldr	r3, [r5, #0]
  40210c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402110:	d013      	beq.n	40213a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402112:	4a10      	ldr	r2, [pc, #64]	; (402154 <xTaskCheckForTimeOut+0x88>)
  402114:	6812      	ldr	r2, [r2, #0]
  402116:	6820      	ldr	r0, [r4, #0]
  402118:	4290      	cmp	r0, r2
  40211a:	d002      	beq.n	402122 <xTaskCheckForTimeOut+0x56>
  40211c:	6862      	ldr	r2, [r4, #4]
  40211e:	4291      	cmp	r1, r2
  402120:	d20d      	bcs.n	40213e <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402122:	6862      	ldr	r2, [r4, #4]
  402124:	1a88      	subs	r0, r1, r2
  402126:	4283      	cmp	r3, r0
  402128:	d90b      	bls.n	402142 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40212a:	1a52      	subs	r2, r2, r1
  40212c:	4413      	add	r3, r2
  40212e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402130:	4620      	mov	r0, r4
  402132:	4b09      	ldr	r3, [pc, #36]	; (402158 <xTaskCheckForTimeOut+0x8c>)
  402134:	4798      	blx	r3
			xReturn = pdFALSE;
  402136:	2400      	movs	r4, #0
  402138:	e004      	b.n	402144 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40213a:	2400      	movs	r4, #0
  40213c:	e002      	b.n	402144 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40213e:	2401      	movs	r4, #1
  402140:	e000      	b.n	402144 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402142:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402144:	4b05      	ldr	r3, [pc, #20]	; (40215c <xTaskCheckForTimeOut+0x90>)
  402146:	4798      	blx	r3

	return xReturn;
}
  402148:	4620      	mov	r0, r4
  40214a:	bd38      	pop	{r3, r4, r5, pc}
  40214c:	00400b5d 	.word	0x00400b5d
  402150:	2040c43c 	.word	0x2040c43c
  402154:	2040c1ec 	.word	0x2040c1ec
  402158:	0040209d 	.word	0x0040209d
  40215c:	00400ba9 	.word	0x00400ba9

00402160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402160:	2201      	movs	r2, #1
  402162:	4b01      	ldr	r3, [pc, #4]	; (402168 <vTaskMissedYield+0x8>)
  402164:	601a      	str	r2, [r3, #0]
  402166:	4770      	bx	lr
  402168:	2040c478 	.word	0x2040c478

0040216c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40216c:	4b05      	ldr	r3, [pc, #20]	; (402184 <xTaskGetSchedulerState+0x18>)
  40216e:	681b      	ldr	r3, [r3, #0]
  402170:	b133      	cbz	r3, 402180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402172:	4b05      	ldr	r3, [pc, #20]	; (402188 <xTaskGetSchedulerState+0x1c>)
  402174:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402176:	2b00      	cmp	r3, #0
  402178:	bf0c      	ite	eq
  40217a:	2002      	moveq	r0, #2
  40217c:	2000      	movne	r0, #0
  40217e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402180:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402182:	4770      	bx	lr
  402184:	2040c1f4 	.word	0x2040c1f4
  402188:	2040c438 	.word	0x2040c438

0040218c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40218c:	2800      	cmp	r0, #0
  40218e:	d045      	beq.n	40221c <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402190:	b538      	push	{r3, r4, r5, lr}
  402192:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402194:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402196:	4922      	ldr	r1, [pc, #136]	; (402220 <vTaskPriorityInherit+0x94>)
  402198:	6809      	ldr	r1, [r1, #0]
  40219a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40219c:	428a      	cmp	r2, r1
  40219e:	d23c      	bcs.n	40221a <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4021a0:	6981      	ldr	r1, [r0, #24]
  4021a2:	2900      	cmp	r1, #0
  4021a4:	db05      	blt.n	4021b2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4021a6:	491e      	ldr	r1, [pc, #120]	; (402220 <vTaskPriorityInherit+0x94>)
  4021a8:	6809      	ldr	r1, [r1, #0]
  4021aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4021ac:	f1c1 0119 	rsb	r1, r1, #25
  4021b0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4021b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4021b6:	491b      	ldr	r1, [pc, #108]	; (402224 <vTaskPriorityInherit+0x98>)
  4021b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4021bc:	6959      	ldr	r1, [r3, #20]
  4021be:	4291      	cmp	r1, r2
  4021c0:	d127      	bne.n	402212 <vTaskPriorityInherit+0x86>
  4021c2:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021c4:	1d1d      	adds	r5, r3, #4
  4021c6:	4628      	mov	r0, r5
  4021c8:	4b17      	ldr	r3, [pc, #92]	; (402228 <vTaskPriorityInherit+0x9c>)
  4021ca:	4798      	blx	r3
  4021cc:	b970      	cbnz	r0, 4021ec <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4021ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4021d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021d4:	4a13      	ldr	r2, [pc, #76]	; (402224 <vTaskPriorityInherit+0x98>)
  4021d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021da:	b93a      	cbnz	r2, 4021ec <vTaskPriorityInherit+0x60>
  4021dc:	4813      	ldr	r0, [pc, #76]	; (40222c <vTaskPriorityInherit+0xa0>)
  4021de:	6802      	ldr	r2, [r0, #0]
  4021e0:	2101      	movs	r1, #1
  4021e2:	fa01 f303 	lsl.w	r3, r1, r3
  4021e6:	ea22 0303 	bic.w	r3, r2, r3
  4021ea:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021ec:	4b0c      	ldr	r3, [pc, #48]	; (402220 <vTaskPriorityInherit+0x94>)
  4021ee:	681b      	ldr	r3, [r3, #0]
  4021f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021f2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4021f4:	490d      	ldr	r1, [pc, #52]	; (40222c <vTaskPriorityInherit+0xa0>)
  4021f6:	680a      	ldr	r2, [r1, #0]
  4021f8:	2301      	movs	r3, #1
  4021fa:	4083      	lsls	r3, r0
  4021fc:	4313      	orrs	r3, r2
  4021fe:	600b      	str	r3, [r1, #0]
  402200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402204:	4b07      	ldr	r3, [pc, #28]	; (402224 <vTaskPriorityInherit+0x98>)
  402206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40220a:	4629      	mov	r1, r5
  40220c:	4b08      	ldr	r3, [pc, #32]	; (402230 <vTaskPriorityInherit+0xa4>)
  40220e:	4798      	blx	r3
  402210:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402212:	4a03      	ldr	r2, [pc, #12]	; (402220 <vTaskPriorityInherit+0x94>)
  402214:	6812      	ldr	r2, [r2, #0]
  402216:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402218:	62da      	str	r2, [r3, #44]	; 0x2c
  40221a:	bd38      	pop	{r3, r4, r5, pc}
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop
  402220:	2040c420 	.word	0x2040c420
  402224:	2040c218 	.word	0x2040c218
  402228:	00400e9d 	.word	0x00400e9d
  40222c:	2040c474 	.word	0x2040c474
  402230:	00400e51 	.word	0x00400e51

00402234 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402234:	2800      	cmp	r0, #0
  402236:	d04e      	beq.n	4022d6 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  402238:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40223a:	4a29      	ldr	r2, [pc, #164]	; (4022e0 <xTaskPriorityDisinherit+0xac>)
  40223c:	6812      	ldr	r2, [r2, #0]
  40223e:	4290      	cmp	r0, r2
  402240:	d00a      	beq.n	402258 <xTaskPriorityDisinherit+0x24>
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
  402256:	e7fe      	b.n	402256 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  402258:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40225a:	b952      	cbnz	r2, 402272 <xTaskPriorityDisinherit+0x3e>
  40225c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402260:	b672      	cpsid	i
  402262:	f383 8811 	msr	BASEPRI, r3
  402266:	f3bf 8f6f 	isb	sy
  40226a:	f3bf 8f4f 	dsb	sy
  40226e:	b662      	cpsie	i
  402270:	e7fe      	b.n	402270 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  402272:	3a01      	subs	r2, #1
  402274:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402276:	2a00      	cmp	r2, #0
  402278:	d12f      	bne.n	4022da <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40227a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40227c:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40227e:	4291      	cmp	r1, r2
  402280:	d02b      	beq.n	4022da <xTaskPriorityDisinherit+0xa6>
  402282:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402284:	1d05      	adds	r5, r0, #4
  402286:	4628      	mov	r0, r5
  402288:	4b16      	ldr	r3, [pc, #88]	; (4022e4 <xTaskPriorityDisinherit+0xb0>)
  40228a:	4798      	blx	r3
  40228c:	b968      	cbnz	r0, 4022aa <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40228e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402290:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402294:	4b14      	ldr	r3, [pc, #80]	; (4022e8 <xTaskPriorityDisinherit+0xb4>)
  402296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40229a:	b933      	cbnz	r3, 4022aa <xTaskPriorityDisinherit+0x76>
  40229c:	4813      	ldr	r0, [pc, #76]	; (4022ec <xTaskPriorityDisinherit+0xb8>)
  40229e:	6803      	ldr	r3, [r0, #0]
  4022a0:	2201      	movs	r2, #1
  4022a2:	408a      	lsls	r2, r1
  4022a4:	ea23 0302 	bic.w	r3, r3, r2
  4022a8:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4022aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4022ac:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022ae:	f1c0 0319 	rsb	r3, r0, #25
  4022b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4022b4:	4a0d      	ldr	r2, [pc, #52]	; (4022ec <xTaskPriorityDisinherit+0xb8>)
  4022b6:	6813      	ldr	r3, [r2, #0]
  4022b8:	2401      	movs	r4, #1
  4022ba:	fa04 f100 	lsl.w	r1, r4, r0
  4022be:	430b      	orrs	r3, r1
  4022c0:	6013      	str	r3, [r2, #0]
  4022c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <xTaskPriorityDisinherit+0xb4>)
  4022c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022cc:	4629      	mov	r1, r5
  4022ce:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <xTaskPriorityDisinherit+0xbc>)
  4022d0:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4022d2:	4620      	mov	r0, r4
  4022d4:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022d6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022d8:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022da:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022dc:	bd38      	pop	{r3, r4, r5, pc}
  4022de:	bf00      	nop
  4022e0:	2040c420 	.word	0x2040c420
  4022e4:	00400e9d 	.word	0x00400e9d
  4022e8:	2040c218 	.word	0x2040c218
  4022ec:	2040c474 	.word	0x2040c474
  4022f0:	00400e51 	.word	0x00400e51

004022f4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4022f4:	4b05      	ldr	r3, [pc, #20]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  4022f6:	681b      	ldr	r3, [r3, #0]
  4022f8:	b123      	cbz	r3, 402304 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4022fa:	4b04      	ldr	r3, [pc, #16]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  4022fc:	681a      	ldr	r2, [r3, #0]
  4022fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402300:	3301      	adds	r3, #1
  402302:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402304:	4b01      	ldr	r3, [pc, #4]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  402306:	6818      	ldr	r0, [r3, #0]
	}
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	2040c420 	.word	0x2040c420

00402310 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402310:	b510      	push	{r4, lr}
  402312:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402314:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402316:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402318:	4291      	cmp	r1, r2
  40231a:	d80a      	bhi.n	402332 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40231c:	1ad2      	subs	r2, r2, r3
  40231e:	6983      	ldr	r3, [r0, #24]
  402320:	429a      	cmp	r2, r3
  402322:	d211      	bcs.n	402348 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402324:	4b0a      	ldr	r3, [pc, #40]	; (402350 <prvInsertTimerInActiveList+0x40>)
  402326:	6818      	ldr	r0, [r3, #0]
  402328:	1d21      	adds	r1, r4, #4
  40232a:	4b0a      	ldr	r3, [pc, #40]	; (402354 <prvInsertTimerInActiveList+0x44>)
  40232c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  40232e:	2000      	movs	r0, #0
  402330:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402332:	4299      	cmp	r1, r3
  402334:	d301      	bcc.n	40233a <prvInsertTimerInActiveList+0x2a>
  402336:	429a      	cmp	r2, r3
  402338:	d308      	bcc.n	40234c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40233a:	4b07      	ldr	r3, [pc, #28]	; (402358 <prvInsertTimerInActiveList+0x48>)
  40233c:	6818      	ldr	r0, [r3, #0]
  40233e:	1d21      	adds	r1, r4, #4
  402340:	4b04      	ldr	r3, [pc, #16]	; (402354 <prvInsertTimerInActiveList+0x44>)
  402342:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402344:	2000      	movs	r0, #0
  402346:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402348:	2001      	movs	r0, #1
  40234a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40234c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40234e:	bd10      	pop	{r4, pc}
  402350:	2040c4b0 	.word	0x2040c4b0
  402354:	00400e69 	.word	0x00400e69
  402358:	2040c47c 	.word	0x2040c47c

0040235c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40235c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40235e:	4b14      	ldr	r3, [pc, #80]	; (4023b0 <prvCheckForValidListAndQueue+0x54>)
  402360:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402362:	4b14      	ldr	r3, [pc, #80]	; (4023b4 <prvCheckForValidListAndQueue+0x58>)
  402364:	681b      	ldr	r3, [r3, #0]
  402366:	bb03      	cbnz	r3, 4023aa <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  402368:	4d13      	ldr	r5, [pc, #76]	; (4023b8 <prvCheckForValidListAndQueue+0x5c>)
  40236a:	4628      	mov	r0, r5
  40236c:	4e13      	ldr	r6, [pc, #76]	; (4023bc <prvCheckForValidListAndQueue+0x60>)
  40236e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402370:	4c13      	ldr	r4, [pc, #76]	; (4023c0 <prvCheckForValidListAndQueue+0x64>)
  402372:	4620      	mov	r0, r4
  402374:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402376:	4b13      	ldr	r3, [pc, #76]	; (4023c4 <prvCheckForValidListAndQueue+0x68>)
  402378:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40237a:	4b13      	ldr	r3, [pc, #76]	; (4023c8 <prvCheckForValidListAndQueue+0x6c>)
  40237c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40237e:	2005      	movs	r0, #5
  402380:	2110      	movs	r1, #16
  402382:	2200      	movs	r2, #0
  402384:	4b11      	ldr	r3, [pc, #68]	; (4023cc <prvCheckForValidListAndQueue+0x70>)
  402386:	4798      	blx	r3
  402388:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <prvCheckForValidListAndQueue+0x58>)
  40238a:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40238c:	b950      	cbnz	r0, 4023a4 <prvCheckForValidListAndQueue+0x48>
  40238e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402392:	b672      	cpsid	i
  402394:	f383 8811 	msr	BASEPRI, r3
  402398:	f3bf 8f6f 	isb	sy
  40239c:	f3bf 8f4f 	dsb	sy
  4023a0:	b662      	cpsie	i
  4023a2:	e7fe      	b.n	4023a2 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4023a4:	490a      	ldr	r1, [pc, #40]	; (4023d0 <prvCheckForValidListAndQueue+0x74>)
  4023a6:	4b0b      	ldr	r3, [pc, #44]	; (4023d4 <prvCheckForValidListAndQueue+0x78>)
  4023a8:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4023aa:	4b0b      	ldr	r3, [pc, #44]	; (4023d8 <prvCheckForValidListAndQueue+0x7c>)
  4023ac:	4798      	blx	r3
  4023ae:	bd70      	pop	{r4, r5, r6, pc}
  4023b0:	00400b5d 	.word	0x00400b5d
  4023b4:	2040c4ac 	.word	0x2040c4ac
  4023b8:	2040c480 	.word	0x2040c480
  4023bc:	00400e31 	.word	0x00400e31
  4023c0:	2040c494 	.word	0x2040c494
  4023c4:	2040c47c 	.word	0x2040c47c
  4023c8:	2040c4b0 	.word	0x2040c4b0
  4023cc:	00401125 	.word	0x00401125
  4023d0:	00412ff0 	.word	0x00412ff0
  4023d4:	00401721 	.word	0x00401721
  4023d8:	00400ba9 	.word	0x00400ba9

004023dc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4023dc:	b510      	push	{r4, lr}
  4023de:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4023e0:	4b0f      	ldr	r3, [pc, #60]	; (402420 <xTimerCreateTimerTask+0x44>)
  4023e2:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4023e4:	4b0f      	ldr	r3, [pc, #60]	; (402424 <xTimerCreateTimerTask+0x48>)
  4023e6:	681b      	ldr	r3, [r3, #0]
  4023e8:	b163      	cbz	r3, 402404 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4023ea:	2318      	movs	r3, #24
  4023ec:	9300      	str	r3, [sp, #0]
  4023ee:	2300      	movs	r3, #0
  4023f0:	9301      	str	r3, [sp, #4]
  4023f2:	9302      	str	r3, [sp, #8]
  4023f4:	9303      	str	r3, [sp, #12]
  4023f6:	480c      	ldr	r0, [pc, #48]	; (402428 <xTimerCreateTimerTask+0x4c>)
  4023f8:	490c      	ldr	r1, [pc, #48]	; (40242c <xTimerCreateTimerTask+0x50>)
  4023fa:	f44f 7282 	mov.w	r2, #260	; 0x104
  4023fe:	4c0c      	ldr	r4, [pc, #48]	; (402430 <xTimerCreateTimerTask+0x54>)
  402400:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402402:	b950      	cbnz	r0, 40241a <xTimerCreateTimerTask+0x3e>
  402404:	f04f 0380 	mov.w	r3, #128	; 0x80
  402408:	b672      	cpsid	i
  40240a:	f383 8811 	msr	BASEPRI, r3
  40240e:	f3bf 8f6f 	isb	sy
  402412:	f3bf 8f4f 	dsb	sy
  402416:	b662      	cpsie	i
  402418:	e7fe      	b.n	402418 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40241a:	b004      	add	sp, #16
  40241c:	bd10      	pop	{r4, pc}
  40241e:	bf00      	nop
  402420:	0040235d 	.word	0x0040235d
  402424:	2040c4ac 	.word	0x2040c4ac
  402428:	0040256d 	.word	0x0040256d
  40242c:	00412ff8 	.word	0x00412ff8
  402430:	00401829 	.word	0x00401829

00402434 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402434:	b950      	cbnz	r0, 40244c <xTimerGenericCommand+0x18>
  402436:	f04f 0380 	mov.w	r3, #128	; 0x80
  40243a:	b672      	cpsid	i
  40243c:	f383 8811 	msr	BASEPRI, r3
  402440:	f3bf 8f6f 	isb	sy
  402444:	f3bf 8f4f 	dsb	sy
  402448:	b662      	cpsie	i
  40244a:	e7fe      	b.n	40244a <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  40244c:	b530      	push	{r4, r5, lr}
  40244e:	b085      	sub	sp, #20
  402450:	4615      	mov	r5, r2
  402452:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402454:	4a12      	ldr	r2, [pc, #72]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402456:	6810      	ldr	r0, [r2, #0]
  402458:	b1f0      	cbz	r0, 402498 <xTimerGenericCommand+0x64>
  40245a:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40245c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40245e:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402460:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402462:	2905      	cmp	r1, #5
  402464:	dc13      	bgt.n	40248e <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402466:	4b0f      	ldr	r3, [pc, #60]	; (4024a4 <xTimerGenericCommand+0x70>)
  402468:	4798      	blx	r3
  40246a:	2802      	cmp	r0, #2
  40246c:	d107      	bne.n	40247e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40246e:	4b0c      	ldr	r3, [pc, #48]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402470:	6818      	ldr	r0, [r3, #0]
  402472:	4669      	mov	r1, sp
  402474:	9a08      	ldr	r2, [sp, #32]
  402476:	2300      	movs	r3, #0
  402478:	4c0b      	ldr	r4, [pc, #44]	; (4024a8 <xTimerGenericCommand+0x74>)
  40247a:	47a0      	blx	r4
  40247c:	e00d      	b.n	40249a <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40247e:	4b08      	ldr	r3, [pc, #32]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402480:	6818      	ldr	r0, [r3, #0]
  402482:	4669      	mov	r1, sp
  402484:	2200      	movs	r2, #0
  402486:	4613      	mov	r3, r2
  402488:	4c07      	ldr	r4, [pc, #28]	; (4024a8 <xTimerGenericCommand+0x74>)
  40248a:	47a0      	blx	r4
  40248c:	e005      	b.n	40249a <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40248e:	4669      	mov	r1, sp
  402490:	2300      	movs	r3, #0
  402492:	4c06      	ldr	r4, [pc, #24]	; (4024ac <xTimerGenericCommand+0x78>)
  402494:	47a0      	blx	r4
  402496:	e000      	b.n	40249a <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402498:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40249a:	b005      	add	sp, #20
  40249c:	bd30      	pop	{r4, r5, pc}
  40249e:	bf00      	nop
  4024a0:	2040c4ac 	.word	0x2040c4ac
  4024a4:	0040216d 	.word	0x0040216d
  4024a8:	004011a9 	.word	0x004011a9
  4024ac:	00401385 	.word	0x00401385

004024b0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024b4:	b082      	sub	sp, #8
  4024b6:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4024b8:	4b25      	ldr	r3, [pc, #148]	; (402550 <prvSampleTimeNow+0xa0>)
  4024ba:	4798      	blx	r3
  4024bc:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4024be:	4b25      	ldr	r3, [pc, #148]	; (402554 <prvSampleTimeNow+0xa4>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	4298      	cmp	r0, r3
  4024c4:	d23b      	bcs.n	40253e <prvSampleTimeNow+0x8e>
  4024c6:	e02b      	b.n	402520 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024c8:	68db      	ldr	r3, [r3, #12]
  4024ca:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024ce:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024d0:	f104 0904 	add.w	r9, r4, #4
  4024d4:	4648      	mov	r0, r9
  4024d6:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024da:	4620      	mov	r0, r4
  4024dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024de:	69e3      	ldr	r3, [r4, #28]
  4024e0:	2b01      	cmp	r3, #1
  4024e2:	d11f      	bne.n	402524 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024e4:	69a3      	ldr	r3, [r4, #24]
  4024e6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024e8:	4553      	cmp	r3, sl
  4024ea:	d906      	bls.n	4024fa <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024ec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024ee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024f0:	6828      	ldr	r0, [r5, #0]
  4024f2:	4649      	mov	r1, r9
  4024f4:	4b18      	ldr	r3, [pc, #96]	; (402558 <prvSampleTimeNow+0xa8>)
  4024f6:	4798      	blx	r3
  4024f8:	e014      	b.n	402524 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4024fa:	2300      	movs	r3, #0
  4024fc:	9300      	str	r3, [sp, #0]
  4024fe:	4620      	mov	r0, r4
  402500:	4619      	mov	r1, r3
  402502:	4652      	mov	r2, sl
  402504:	4c15      	ldr	r4, [pc, #84]	; (40255c <prvSampleTimeNow+0xac>)
  402506:	47a0      	blx	r4
				configASSERT( xResult );
  402508:	b960      	cbnz	r0, 402524 <prvSampleTimeNow+0x74>
  40250a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40250e:	b672      	cpsid	i
  402510:	f383 8811 	msr	BASEPRI, r3
  402514:	f3bf 8f6f 	isb	sy
  402518:	f3bf 8f4f 	dsb	sy
  40251c:	b662      	cpsie	i
  40251e:	e7fe      	b.n	40251e <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402520:	4d0f      	ldr	r5, [pc, #60]	; (402560 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402522:	4e10      	ldr	r6, [pc, #64]	; (402564 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402524:	682b      	ldr	r3, [r5, #0]
  402526:	681a      	ldr	r2, [r3, #0]
  402528:	2a00      	cmp	r2, #0
  40252a:	d1cd      	bne.n	4024c8 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  40252c:	4a0e      	ldr	r2, [pc, #56]	; (402568 <prvSampleTimeNow+0xb8>)
  40252e:	6810      	ldr	r0, [r2, #0]
  402530:	490b      	ldr	r1, [pc, #44]	; (402560 <prvSampleTimeNow+0xb0>)
  402532:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402534:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402536:	2301      	movs	r3, #1
  402538:	f8c8 3000 	str.w	r3, [r8]
  40253c:	e002      	b.n	402544 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40253e:	2300      	movs	r3, #0
  402540:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402544:	4b03      	ldr	r3, [pc, #12]	; (402554 <prvSampleTimeNow+0xa4>)
  402546:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402548:	4638      	mov	r0, r7
  40254a:	b002      	add	sp, #8
  40254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402550:	00401af1 	.word	0x00401af1
  402554:	2040c4a8 	.word	0x2040c4a8
  402558:	00400e69 	.word	0x00400e69
  40255c:	00402435 	.word	0x00402435
  402560:	2040c47c 	.word	0x2040c47c
  402564:	00400e9d 	.word	0x00400e9d
  402568:	2040c4b0 	.word	0x2040c4b0

0040256c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40256c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402570:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402572:	4c69      	ldr	r4, [pc, #420]	; (402718 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402574:	4f69      	ldr	r7, [pc, #420]	; (40271c <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402576:	4d6a      	ldr	r5, [pc, #424]	; (402720 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402578:	4b6a      	ldr	r3, [pc, #424]	; (402724 <prvTimerTask+0x1b8>)
  40257a:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40257c:	681a      	ldr	r2, [r3, #0]
  40257e:	2a00      	cmp	r2, #0
  402580:	f000 80bf 	beq.w	402702 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402584:	68db      	ldr	r3, [r3, #12]
  402586:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402588:	4b67      	ldr	r3, [pc, #412]	; (402728 <prvTimerTask+0x1bc>)
  40258a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40258c:	a804      	add	r0, sp, #16
  40258e:	4b67      	ldr	r3, [pc, #412]	; (40272c <prvTimerTask+0x1c0>)
  402590:	4798      	blx	r3
  402592:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402594:	9b04      	ldr	r3, [sp, #16]
  402596:	2b00      	cmp	r3, #0
  402598:	d14d      	bne.n	402636 <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40259a:	42b0      	cmp	r0, r6
  40259c:	d339      	bcc.n	402612 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  40259e:	4b64      	ldr	r3, [pc, #400]	; (402730 <prvTimerTask+0x1c4>)
  4025a0:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025a2:	4b60      	ldr	r3, [pc, #384]	; (402724 <prvTimerTask+0x1b8>)
  4025a4:	681b      	ldr	r3, [r3, #0]
  4025a6:	68db      	ldr	r3, [r3, #12]
  4025a8:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025ac:	f109 0004 	add.w	r0, r9, #4
  4025b0:	4b60      	ldr	r3, [pc, #384]	; (402734 <prvTimerTask+0x1c8>)
  4025b2:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4025b8:	2b01      	cmp	r3, #1
  4025ba:	d11d      	bne.n	4025f8 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4025bc:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4025c0:	4648      	mov	r0, r9
  4025c2:	4431      	add	r1, r6
  4025c4:	4642      	mov	r2, r8
  4025c6:	4633      	mov	r3, r6
  4025c8:	f8df c178 	ldr.w	ip, [pc, #376]	; 402744 <prvTimerTask+0x1d8>
  4025cc:	47e0      	blx	ip
  4025ce:	2801      	cmp	r0, #1
  4025d0:	d112      	bne.n	4025f8 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4025d2:	2300      	movs	r3, #0
  4025d4:	9300      	str	r3, [sp, #0]
  4025d6:	4648      	mov	r0, r9
  4025d8:	4619      	mov	r1, r3
  4025da:	4632      	mov	r2, r6
  4025dc:	4e56      	ldr	r6, [pc, #344]	; (402738 <prvTimerTask+0x1cc>)
  4025de:	47b0      	blx	r6
			configASSERT( xResult );
  4025e0:	b950      	cbnz	r0, 4025f8 <prvTimerTask+0x8c>
  4025e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025e6:	b672      	cpsid	i
  4025e8:	f383 8811 	msr	BASEPRI, r3
  4025ec:	f3bf 8f6f 	isb	sy
  4025f0:	f3bf 8f4f 	dsb	sy
  4025f4:	b662      	cpsie	i
  4025f6:	e7fe      	b.n	4025f6 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025f8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4025fc:	4648      	mov	r0, r9
  4025fe:	4798      	blx	r3
  402600:	e077      	b.n	4026f2 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402602:	4b4e      	ldr	r3, [pc, #312]	; (40273c <prvTimerTask+0x1d0>)
  402604:	681b      	ldr	r3, [r3, #0]
  402606:	681a      	ldr	r2, [r3, #0]
  402608:	fab2 f282 	clz	r2, r2
  40260c:	0952      	lsrs	r2, r2, #5
  40260e:	2600      	movs	r6, #0
  402610:	e000      	b.n	402614 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402612:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402614:	6820      	ldr	r0, [r4, #0]
  402616:	ebc8 0106 	rsb	r1, r8, r6
  40261a:	4b49      	ldr	r3, [pc, #292]	; (402740 <prvTimerTask+0x1d4>)
  40261c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40261e:	4b44      	ldr	r3, [pc, #272]	; (402730 <prvTimerTask+0x1c4>)
  402620:	4798      	blx	r3
  402622:	2800      	cmp	r0, #0
  402624:	d165      	bne.n	4026f2 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40262a:	603b      	str	r3, [r7, #0]
  40262c:	f3bf 8f4f 	dsb	sy
  402630:	f3bf 8f6f 	isb	sy
  402634:	e05d      	b.n	4026f2 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  402636:	4b3e      	ldr	r3, [pc, #248]	; (402730 <prvTimerTask+0x1c4>)
  402638:	4798      	blx	r3
  40263a:	e05a      	b.n	4026f2 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40263c:	9b04      	ldr	r3, [sp, #16]
  40263e:	2b00      	cmp	r3, #0
  402640:	da06      	bge.n	402650 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402642:	9806      	ldr	r0, [sp, #24]
  402644:	9907      	ldr	r1, [sp, #28]
  402646:	9b05      	ldr	r3, [sp, #20]
  402648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40264a:	9b04      	ldr	r3, [sp, #16]
  40264c:	2b00      	cmp	r3, #0
  40264e:	db50      	blt.n	4026f2 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402650:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402652:	6973      	ldr	r3, [r6, #20]
  402654:	b113      	cbz	r3, 40265c <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402656:	1d30      	adds	r0, r6, #4
  402658:	4b36      	ldr	r3, [pc, #216]	; (402734 <prvTimerTask+0x1c8>)
  40265a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40265c:	a803      	add	r0, sp, #12
  40265e:	4b33      	ldr	r3, [pc, #204]	; (40272c <prvTimerTask+0x1c0>)
  402660:	4798      	blx	r3
  402662:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402664:	9a04      	ldr	r2, [sp, #16]
  402666:	2a09      	cmp	r2, #9
  402668:	d843      	bhi.n	4026f2 <prvTimerTask+0x186>
  40266a:	e8df f002 	tbb	[pc, r2]
  40266e:	0505      	.short	0x0505
  402670:	3f2a4205 	.word	0x3f2a4205
  402674:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402678:	9b05      	ldr	r3, [sp, #20]
  40267a:	69b1      	ldr	r1, [r6, #24]
  40267c:	4630      	mov	r0, r6
  40267e:	4419      	add	r1, r3
  402680:	4672      	mov	r2, lr
  402682:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 402744 <prvTimerTask+0x1d8>
  402686:	47e0      	blx	ip
  402688:	2801      	cmp	r0, #1
  40268a:	d132      	bne.n	4026f2 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40268c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40268e:	4630      	mov	r0, r6
  402690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402692:	69f3      	ldr	r3, [r6, #28]
  402694:	2b01      	cmp	r3, #1
  402696:	d12c      	bne.n	4026f2 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402698:	69b2      	ldr	r2, [r6, #24]
  40269a:	2300      	movs	r3, #0
  40269c:	9300      	str	r3, [sp, #0]
  40269e:	4630      	mov	r0, r6
  4026a0:	4619      	mov	r1, r3
  4026a2:	9e05      	ldr	r6, [sp, #20]
  4026a4:	4432      	add	r2, r6
  4026a6:	4e24      	ldr	r6, [pc, #144]	; (402738 <prvTimerTask+0x1cc>)
  4026a8:	47b0      	blx	r6
							configASSERT( xResult );
  4026aa:	bb10      	cbnz	r0, 4026f2 <prvTimerTask+0x186>
  4026ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b0:	b672      	cpsid	i
  4026b2:	f383 8811 	msr	BASEPRI, r3
  4026b6:	f3bf 8f6f 	isb	sy
  4026ba:	f3bf 8f4f 	dsb	sy
  4026be:	b662      	cpsie	i
  4026c0:	e7fe      	b.n	4026c0 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4026c2:	9905      	ldr	r1, [sp, #20]
  4026c4:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4026c6:	b951      	cbnz	r1, 4026de <prvTimerTask+0x172>
  4026c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026cc:	b672      	cpsid	i
  4026ce:	f383 8811 	msr	BASEPRI, r3
  4026d2:	f3bf 8f6f 	isb	sy
  4026d6:	f3bf 8f4f 	dsb	sy
  4026da:	b662      	cpsie	i
  4026dc:	e7fe      	b.n	4026dc <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4026de:	4630      	mov	r0, r6
  4026e0:	4471      	add	r1, lr
  4026e2:	4672      	mov	r2, lr
  4026e4:	4673      	mov	r3, lr
  4026e6:	4e17      	ldr	r6, [pc, #92]	; (402744 <prvTimerTask+0x1d8>)
  4026e8:	47b0      	blx	r6
  4026ea:	e002      	b.n	4026f2 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4026ec:	4630      	mov	r0, r6
  4026ee:	4b16      	ldr	r3, [pc, #88]	; (402748 <prvTimerTask+0x1dc>)
  4026f0:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026f2:	6820      	ldr	r0, [r4, #0]
  4026f4:	a904      	add	r1, sp, #16
  4026f6:	2200      	movs	r2, #0
  4026f8:	4613      	mov	r3, r2
  4026fa:	47a8      	blx	r5
  4026fc:	2800      	cmp	r0, #0
  4026fe:	d19d      	bne.n	40263c <prvTimerTask+0xd0>
  402700:	e73a      	b.n	402578 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402702:	4b09      	ldr	r3, [pc, #36]	; (402728 <prvTimerTask+0x1bc>)
  402704:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402706:	a804      	add	r0, sp, #16
  402708:	4b08      	ldr	r3, [pc, #32]	; (40272c <prvTimerTask+0x1c0>)
  40270a:	4798      	blx	r3
  40270c:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40270e:	9b04      	ldr	r3, [sp, #16]
  402710:	2b00      	cmp	r3, #0
  402712:	f43f af76 	beq.w	402602 <prvTimerTask+0x96>
  402716:	e78e      	b.n	402636 <prvTimerTask+0xca>
  402718:	2040c4ac 	.word	0x2040c4ac
  40271c:	e000ed04 	.word	0xe000ed04
  402720:	0040155d 	.word	0x0040155d
  402724:	2040c47c 	.word	0x2040c47c
  402728:	00401ae1 	.word	0x00401ae1
  40272c:	004024b1 	.word	0x004024b1
  402730:	00401c31 	.word	0x00401c31
  402734:	00400e9d 	.word	0x00400e9d
  402738:	00402435 	.word	0x00402435
  40273c:	2040c4b0 	.word	0x2040c4b0
  402740:	00401755 	.word	0x00401755
  402744:	00402311 	.word	0x00402311
  402748:	00400e15 	.word	0x00400e15

0040274c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40274c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40274e:	4810      	ldr	r0, [pc, #64]	; (402790 <sysclk_init+0x44>)
  402750:	4b10      	ldr	r3, [pc, #64]	; (402794 <sysclk_init+0x48>)
  402752:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402754:	2000      	movs	r0, #0
  402756:	213e      	movs	r1, #62	; 0x3e
  402758:	4b0f      	ldr	r3, [pc, #60]	; (402798 <sysclk_init+0x4c>)
  40275a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40275c:	4c0f      	ldr	r4, [pc, #60]	; (40279c <sysclk_init+0x50>)
  40275e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402760:	2800      	cmp	r0, #0
  402762:	d0fc      	beq.n	40275e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402764:	4b0e      	ldr	r3, [pc, #56]	; (4027a0 <sysclk_init+0x54>)
  402766:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402768:	4a0e      	ldr	r2, [pc, #56]	; (4027a4 <sysclk_init+0x58>)
  40276a:	4b0f      	ldr	r3, [pc, #60]	; (4027a8 <sysclk_init+0x5c>)
  40276c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40276e:	4c0f      	ldr	r4, [pc, #60]	; (4027ac <sysclk_init+0x60>)
  402770:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402772:	2800      	cmp	r0, #0
  402774:	d0fc      	beq.n	402770 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402776:	2002      	movs	r0, #2
  402778:	4b0d      	ldr	r3, [pc, #52]	; (4027b0 <sysclk_init+0x64>)
  40277a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40277c:	2000      	movs	r0, #0
  40277e:	4b0d      	ldr	r3, [pc, #52]	; (4027b4 <sysclk_init+0x68>)
  402780:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402782:	4b0d      	ldr	r3, [pc, #52]	; (4027b8 <sysclk_init+0x6c>)
  402784:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402786:	4802      	ldr	r0, [pc, #8]	; (402790 <sysclk_init+0x44>)
  402788:	4b02      	ldr	r3, [pc, #8]	; (402794 <sysclk_init+0x48>)
  40278a:	4798      	blx	r3
  40278c:	bd10      	pop	{r4, pc}
  40278e:	bf00      	nop
  402790:	11e1a300 	.word	0x11e1a300
  402794:	00403685 	.word	0x00403685
  402798:	00402999 	.word	0x00402999
  40279c:	004029ed 	.word	0x004029ed
  4027a0:	004029fd 	.word	0x004029fd
  4027a4:	20183f01 	.word	0x20183f01
  4027a8:	400e0600 	.word	0x400e0600
  4027ac:	00402a0d 	.word	0x00402a0d
  4027b0:	004028f9 	.word	0x004028f9
  4027b4:	00402931 	.word	0x00402931
  4027b8:	00403571 	.word	0x00403571

004027bc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4027bc:	b10a      	cbz	r2, 4027c2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4027be:	6641      	str	r1, [r0, #100]	; 0x64
  4027c0:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4027c2:	6601      	str	r1, [r0, #96]	; 0x60
  4027c4:	4770      	bx	lr
  4027c6:	bf00      	nop

004027c8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4027c8:	6301      	str	r1, [r0, #48]	; 0x30
  4027ca:	4770      	bx	lr

004027cc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4027cc:	6341      	str	r1, [r0, #52]	; 0x34
  4027ce:	4770      	bx	lr

004027d0 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4027d0:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4027d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4027d8:	d101      	bne.n	4027de <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  4027da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4027dc:	e000      	b.n	4027e0 <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4027de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  4027e0:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4027e2:	bf14      	ite	ne
  4027e4:	2001      	movne	r0, #1
  4027e6:	2000      	moveq	r0, #0
  4027e8:	4770      	bx	lr
  4027ea:	bf00      	nop

004027ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4027ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4027ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4027f2:	d02f      	beq.n	402854 <pio_set_peripheral+0x68>
  4027f4:	d807      	bhi.n	402806 <pio_set_peripheral+0x1a>
  4027f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4027fa:	d014      	beq.n	402826 <pio_set_peripheral+0x3a>
  4027fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402800:	d01e      	beq.n	402840 <pio_set_peripheral+0x54>
  402802:	b939      	cbnz	r1, 402814 <pio_set_peripheral+0x28>
  402804:	4770      	bx	lr
  402806:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40280a:	d037      	beq.n	40287c <pio_set_peripheral+0x90>
  40280c:	d804      	bhi.n	402818 <pio_set_peripheral+0x2c>
  40280e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402812:	d029      	beq.n	402868 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402814:	6042      	str	r2, [r0, #4]
  402816:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402818:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40281c:	d02e      	beq.n	40287c <pio_set_peripheral+0x90>
  40281e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402822:	d02b      	beq.n	40287c <pio_set_peripheral+0x90>
  402824:	e7f6      	b.n	402814 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402826:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402828:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40282a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40282c:	43d3      	mvns	r3, r2
  40282e:	4021      	ands	r1, r4
  402830:	4019      	ands	r1, r3
  402832:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402834:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402836:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402838:	4021      	ands	r1, r4
  40283a:	400b      	ands	r3, r1
  40283c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40283e:	e01a      	b.n	402876 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402840:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402842:	4313      	orrs	r3, r2
  402844:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402846:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402848:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40284a:	400b      	ands	r3, r1
  40284c:	ea23 0302 	bic.w	r3, r3, r2
  402850:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402852:	e7df      	b.n	402814 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402854:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402856:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402858:	400b      	ands	r3, r1
  40285a:	ea23 0302 	bic.w	r3, r3, r2
  40285e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402860:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402862:	4313      	orrs	r3, r2
  402864:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402866:	e7d5      	b.n	402814 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402868:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40286a:	4313      	orrs	r3, r2
  40286c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40286e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402870:	4313      	orrs	r3, r2
  402872:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402874:	e7ce      	b.n	402814 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402876:	6042      	str	r2, [r0, #4]
}
  402878:	f85d 4b04 	ldr.w	r4, [sp], #4
  40287c:	4770      	bx	lr
  40287e:	bf00      	nop

00402880 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402880:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402882:	f012 0f01 	tst.w	r2, #1
  402886:	d001      	beq.n	40288c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402888:	6641      	str	r1, [r0, #100]	; 0x64
  40288a:	e000      	b.n	40288e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40288c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40288e:	f012 0f0a 	tst.w	r2, #10
  402892:	d001      	beq.n	402898 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402894:	6201      	str	r1, [r0, #32]
  402896:	e000      	b.n	40289a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402898:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40289a:	f012 0f02 	tst.w	r2, #2
  40289e:	d002      	beq.n	4028a6 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  4028a0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4028a4:	e004      	b.n	4028b0 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4028a6:	f012 0f08 	tst.w	r2, #8
  4028aa:	d001      	beq.n	4028b0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4028ac:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4028b0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4028b2:	6001      	str	r1, [r0, #0]
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop

004028b8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4028b8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028ba:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4028bc:	9c01      	ldr	r4, [sp, #4]
  4028be:	b10c      	cbz	r4, 4028c4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028c0:	6641      	str	r1, [r0, #100]	; 0x64
  4028c2:	e000      	b.n	4028c6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028c4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4028c6:	b10b      	cbz	r3, 4028cc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4028c8:	6501      	str	r1, [r0, #80]	; 0x50
  4028ca:	e000      	b.n	4028ce <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028cc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028ce:	b10a      	cbz	r2, 4028d4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4028d0:	6301      	str	r1, [r0, #48]	; 0x30
  4028d2:	e000      	b.n	4028d6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028d4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028d6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4028d8:	6001      	str	r1, [r0, #0]
}
  4028da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028de:	4770      	bx	lr

004028e0 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  4028e0:	b112      	cbz	r2, 4028e8 <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  4028e2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  4028e6:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  4028e8:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  4028ec:	4770      	bx	lr
  4028ee:	bf00      	nop

004028f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4028f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4028f2:	4770      	bx	lr

004028f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4028f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4028f6:	4770      	bx	lr

004028f8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4028f8:	2803      	cmp	r0, #3
  4028fa:	d007      	beq.n	40290c <pmc_mck_set_division+0x14>
  4028fc:	2804      	cmp	r0, #4
  4028fe:	d008      	beq.n	402912 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402900:	2802      	cmp	r0, #2
  402902:	bf0c      	ite	eq
  402904:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402908:	2100      	movne	r1, #0
  40290a:	e004      	b.n	402916 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40290c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402910:	e001      	b.n	402916 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402912:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402916:	4a05      	ldr	r2, [pc, #20]	; (40292c <pmc_mck_set_division+0x34>)
  402918:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40291e:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402920:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402922:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402924:	f013 0f08 	tst.w	r3, #8
  402928:	d0fb      	beq.n	402922 <pmc_mck_set_division+0x2a>
}
  40292a:	4770      	bx	lr
  40292c:	400e0600 	.word	0x400e0600

00402930 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402930:	4a18      	ldr	r2, [pc, #96]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402932:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402938:	4318      	orrs	r0, r3
  40293a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40293c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40293e:	f013 0f08 	tst.w	r3, #8
  402942:	d003      	beq.n	40294c <pmc_switch_mck_to_pllack+0x1c>
  402944:	e009      	b.n	40295a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402946:	3b01      	subs	r3, #1
  402948:	d103      	bne.n	402952 <pmc_switch_mck_to_pllack+0x22>
  40294a:	e01e      	b.n	40298a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40294c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402950:	4910      	ldr	r1, [pc, #64]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402952:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402954:	f012 0f08 	tst.w	r2, #8
  402958:	d0f5      	beq.n	402946 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40295a:	4a0e      	ldr	r2, [pc, #56]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  40295c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40295e:	f023 0303 	bic.w	r3, r3, #3
  402962:	f043 0302 	orr.w	r3, r3, #2
  402966:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402968:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40296a:	f010 0008 	ands.w	r0, r0, #8
  40296e:	d004      	beq.n	40297a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402970:	2000      	movs	r0, #0
  402972:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402974:	3b01      	subs	r3, #1
  402976:	d103      	bne.n	402980 <pmc_switch_mck_to_pllack+0x50>
  402978:	e009      	b.n	40298e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40297a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40297e:	4905      	ldr	r1, [pc, #20]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402980:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402982:	f012 0f08 	tst.w	r2, #8
  402986:	d0f5      	beq.n	402974 <pmc_switch_mck_to_pllack+0x44>
  402988:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40298a:	2001      	movs	r0, #1
  40298c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40298e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402990:	4770      	bx	lr
  402992:	bf00      	nop
  402994:	400e0600 	.word	0x400e0600

00402998 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402998:	b138      	cbz	r0, 4029aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40299a:	490e      	ldr	r1, [pc, #56]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  40299c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40299e:	4a0e      	ldr	r2, [pc, #56]	; (4029d8 <pmc_switch_mainck_to_xtal+0x40>)
  4029a0:	401a      	ands	r2, r3
  4029a2:	4b0e      	ldr	r3, [pc, #56]	; (4029dc <pmc_switch_mainck_to_xtal+0x44>)
  4029a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4029a6:	620b      	str	r3, [r1, #32]
  4029a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4029aa:	480a      	ldr	r0, [pc, #40]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4029ac:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029ae:	4a0c      	ldr	r2, [pc, #48]	; (4029e0 <pmc_switch_mainck_to_xtal+0x48>)
  4029b0:	401a      	ands	r2, r3
  4029b2:	4b0c      	ldr	r3, [pc, #48]	; (4029e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4029b4:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4029b6:	0209      	lsls	r1, r1, #8
  4029b8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029ba:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4029bc:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4029be:	4602      	mov	r2, r0
  4029c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4029c2:	f013 0f01 	tst.w	r3, #1
  4029c6:	d0fb      	beq.n	4029c0 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4029c8:	4a02      	ldr	r2, [pc, #8]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4029ca:	6a11      	ldr	r1, [r2, #32]
  4029cc:	4b06      	ldr	r3, [pc, #24]	; (4029e8 <pmc_switch_mainck_to_xtal+0x50>)
  4029ce:	430b      	orrs	r3, r1
  4029d0:	6213      	str	r3, [r2, #32]
  4029d2:	4770      	bx	lr
  4029d4:	400e0600 	.word	0x400e0600
  4029d8:	fec8fffc 	.word	0xfec8fffc
  4029dc:	01370002 	.word	0x01370002
  4029e0:	ffc8fffc 	.word	0xffc8fffc
  4029e4:	00370001 	.word	0x00370001
  4029e8:	01370000 	.word	0x01370000

004029ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4029ec:	4b02      	ldr	r3, [pc, #8]	; (4029f8 <pmc_osc_is_ready_mainck+0xc>)
  4029ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4029f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4029f4:	4770      	bx	lr
  4029f6:	bf00      	nop
  4029f8:	400e0600 	.word	0x400e0600

004029fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4029fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402a00:	4b01      	ldr	r3, [pc, #4]	; (402a08 <pmc_disable_pllack+0xc>)
  402a02:	629a      	str	r2, [r3, #40]	; 0x28
  402a04:	4770      	bx	lr
  402a06:	bf00      	nop
  402a08:	400e0600 	.word	0x400e0600

00402a0c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402a0c:	4b02      	ldr	r3, [pc, #8]	; (402a18 <pmc_is_locked_pllack+0xc>)
  402a0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402a10:	f000 0002 	and.w	r0, r0, #2
  402a14:	4770      	bx	lr
  402a16:	bf00      	nop
  402a18:	400e0600 	.word	0x400e0600

00402a1c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402a1c:	283f      	cmp	r0, #63	; 0x3f
  402a1e:	d81e      	bhi.n	402a5e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402a20:	281f      	cmp	r0, #31
  402a22:	d80c      	bhi.n	402a3e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402a24:	4b11      	ldr	r3, [pc, #68]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a26:	699a      	ldr	r2, [r3, #24]
  402a28:	2301      	movs	r3, #1
  402a2a:	4083      	lsls	r3, r0
  402a2c:	401a      	ands	r2, r3
  402a2e:	4293      	cmp	r3, r2
  402a30:	d017      	beq.n	402a62 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402a32:	2301      	movs	r3, #1
  402a34:	4083      	lsls	r3, r0
  402a36:	4a0d      	ldr	r2, [pc, #52]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a38:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a3a:	2000      	movs	r0, #0
  402a3c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a3e:	4b0b      	ldr	r3, [pc, #44]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402a44:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a46:	2301      	movs	r3, #1
  402a48:	4083      	lsls	r3, r0
  402a4a:	401a      	ands	r2, r3
  402a4c:	4293      	cmp	r3, r2
  402a4e:	d00a      	beq.n	402a66 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402a50:	2301      	movs	r3, #1
  402a52:	4083      	lsls	r3, r0
  402a54:	4a05      	ldr	r2, [pc, #20]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a56:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402a5a:	2000      	movs	r0, #0
  402a5c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402a5e:	2001      	movs	r0, #1
  402a60:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a62:	2000      	movs	r0, #0
  402a64:	4770      	bx	lr
  402a66:	2000      	movs	r0, #0
}
  402a68:	4770      	bx	lr
  402a6a:	bf00      	nop
  402a6c:	400e0600 	.word	0x400e0600

00402a70 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402a70:	4b0f      	ldr	r3, [pc, #60]	; (402ab0 <twihs_set_speed+0x40>)
  402a72:	4299      	cmp	r1, r3
  402a74:	d819      	bhi.n	402aaa <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402a76:	0049      	lsls	r1, r1, #1
  402a78:	fbb2 f2f1 	udiv	r2, r2, r1
  402a7c:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a7e:	2aff      	cmp	r2, #255	; 0xff
  402a80:	d907      	bls.n	402a92 <twihs_set_speed+0x22>
  402a82:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  402a84:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  402a86:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a88:	2b06      	cmp	r3, #6
  402a8a:	d803      	bhi.n	402a94 <twihs_set_speed+0x24>
  402a8c:	2aff      	cmp	r2, #255	; 0xff
  402a8e:	d8f9      	bhi.n	402a84 <twihs_set_speed+0x14>
  402a90:	e000      	b.n	402a94 <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a92:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a94:	0211      	lsls	r1, r2, #8
  402a96:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  402a98:	041b      	lsls	r3, r3, #16
  402a9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402a9e:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402aa0:	b2d2      	uxtb	r2, r2
  402aa2:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  402aa4:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  402aa6:	2000      	movs	r0, #0
  402aa8:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402aaa:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402aac:	4770      	bx	lr
  402aae:	bf00      	nop
  402ab0:	00061a80 	.word	0x00061a80

00402ab4 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402ab4:	b508      	push	{r3, lr}
  402ab6:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  402ab8:	f04f 31ff 	mov.w	r1, #4294967295
  402abc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  402abe:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402ac0:	2180      	movs	r1, #128	; 0x80
  402ac2:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  402ac4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402ac6:	2108      	movs	r1, #8
  402ac8:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402aca:	2120      	movs	r1, #32
  402acc:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402ace:	2104      	movs	r1, #4
  402ad0:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402ad2:	6851      	ldr	r1, [r2, #4]
  402ad4:	6812      	ldr	r2, [r2, #0]
  402ad6:	4b03      	ldr	r3, [pc, #12]	; (402ae4 <twihs_master_init+0x30>)
  402ad8:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  402ada:	2801      	cmp	r0, #1
  402adc:	bf14      	ite	ne
  402ade:	2000      	movne	r0, #0
  402ae0:	2001      	moveq	r0, #1
  402ae2:	bd08      	pop	{r3, pc}
  402ae4:	00402a71 	.word	0x00402a71

00402ae8 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402ae8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  402aea:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402aec:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  402aee:	2a00      	cmp	r2, #0
  402af0:	d047      	beq.n	402b82 <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402af2:	2600      	movs	r6, #0
  402af4:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402af6:	684b      	ldr	r3, [r1, #4]
  402af8:	021b      	lsls	r3, r3, #8
  402afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402afe:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402b02:	7c0b      	ldrb	r3, [r1, #16]
  402b04:	041b      	lsls	r3, r3, #16
  402b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402b0a:	432b      	orrs	r3, r5
  402b0c:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402b0e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b10:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402b12:	b15d      	cbz	r5, 402b2c <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  402b14:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402b16:	2d01      	cmp	r5, #1
  402b18:	dd02      	ble.n	402b20 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  402b1a:	784e      	ldrb	r6, [r1, #1]
  402b1c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402b20:	2d02      	cmp	r5, #2
  402b22:	dd04      	ble.n	402b2e <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  402b24:	7889      	ldrb	r1, [r1, #2]
  402b26:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402b2a:	e000      	b.n	402b2e <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402b2c:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b2e:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402b30:	2301      	movs	r3, #1
  402b32:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  402b34:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b38:	2702      	movs	r7, #2
  402b3a:	e014      	b.n	402b66 <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402b3c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b3e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402b42:	d120      	bne.n	402b86 <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  402b44:	3901      	subs	r1, #1
  402b46:	d020      	beq.n	402b8a <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  402b48:	2a01      	cmp	r2, #1
  402b4a:	d104      	bne.n	402b56 <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b4c:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  402b4e:	f013 0f02 	tst.w	r3, #2
  402b52:	d0f3      	beq.n	402b3c <twihs_master_read+0x54>
  402b54:	e01d      	b.n	402b92 <twihs_master_read+0xaa>
  402b56:	f013 0f02 	tst.w	r3, #2
  402b5a:	d00a      	beq.n	402b72 <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b5e:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b62:	3a01      	subs	r2, #1
  402b64:	d007      	beq.n	402b76 <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  402b66:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b68:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  402b6c:	d10f      	bne.n	402b8e <twihs_master_read+0xa6>
  402b6e:	4631      	mov	r1, r6
  402b70:	e7ea      	b.n	402b48 <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b72:	2a00      	cmp	r2, #0
  402b74:	d1e2      	bne.n	402b3c <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402b76:	6a03      	ldr	r3, [r0, #32]
  402b78:	f013 0f01 	tst.w	r3, #1
  402b7c:	d0fb      	beq.n	402b76 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  402b7e:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  402b80:	e00a      	b.n	402b98 <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402b82:	2501      	movs	r5, #1
  402b84:	e008      	b.n	402b98 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b86:	2505      	movs	r5, #5
  402b88:	e006      	b.n	402b98 <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  402b8a:	2509      	movs	r5, #9
  402b8c:	e004      	b.n	402b98 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b8e:	2505      	movs	r5, #5
  402b90:	e002      	b.n	402b98 <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b92:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b94:	7023      	strb	r3, [r4, #0]
  402b96:	e7ee      	b.n	402b76 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  402b98:	4628      	mov	r0, r5
  402b9a:	bcf0      	pop	{r4, r5, r6, r7}
  402b9c:	4770      	bx	lr
  402b9e:	bf00      	nop

00402ba0 <Twihs_reinit>:

void Twihs_reinit() {
  402ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ba4:	b086      	sub	sp, #24
	sendDebugString("TWIHS RE-INITIALIZATION - STARTED\n");
  402ba6:	481c      	ldr	r0, [pc, #112]	; (402c18 <Twihs_reinit+0x78>)
  402ba8:	4e1c      	ldr	r6, [pc, #112]	; (402c1c <Twihs_reinit+0x7c>)
  402baa:	47b0      	blx	r6
	pio_set_output(PIOA,1<<3 | 1<<4,LOW,DISABLE,DISABLE);
  402bac:	4d1c      	ldr	r5, [pc, #112]	; (402c20 <Twihs_reinit+0x80>)
  402bae:	2400      	movs	r4, #0
  402bb0:	9400      	str	r4, [sp, #0]
  402bb2:	4628      	mov	r0, r5
  402bb4:	2118      	movs	r1, #24
  402bb6:	4622      	mov	r2, r4
  402bb8:	4623      	mov	r3, r4
  402bba:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402c40 <Twihs_reinit+0xa0>
  402bbe:	47c0      	blx	r8
	pio_clear(PIOA,1<<3 | 1<<4);
  402bc0:	4628      	mov	r0, r5
  402bc2:	2118      	movs	r1, #24
  402bc4:	4f17      	ldr	r7, [pc, #92]	; (402c24 <Twihs_reinit+0x84>)
  402bc6:	47b8      	blx	r7
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402bc8:	4628      	mov	r0, r5
  402bca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bce:	2218      	movs	r2, #24
  402bd0:	4b15      	ldr	r3, [pc, #84]	; (402c28 <Twihs_reinit+0x88>)
  402bd2:	4798      	blx	r3
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402bd4:	9400      	str	r4, [sp, #0]
  402bd6:	4628      	mov	r0, r5
  402bd8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bdc:	4622      	mov	r2, r4
  402bde:	4623      	mov	r3, r4
  402be0:	47c0      	blx	r8
	pio_clear(PIOA,PIO_PA26);
  402be2:	4628      	mov	r0, r5
  402be4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402be8:	47b8      	blx	r7
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402bea:	4810      	ldr	r0, [pc, #64]	; (402c2c <Twihs_reinit+0x8c>)
  402bec:	2380      	movs	r3, #128	; 0x80
  402bee:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_RHR;
  402bf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402bf2:	2308      	movs	r3, #8
  402bf4:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402bf6:	2320      	movs	r3, #32
  402bf8:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402bfa:	2304      	movs	r3, #4
  402bfc:	6003      	str	r3, [r0, #0]
	pio_clear(PIOA,PIO_PA26);
	
	twihs_reset(TWIHS0);
	twihs_enable_master_mode(TWIHS0);
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402bfe:	4b0c      	ldr	r3, [pc, #48]	; (402c30 <Twihs_reinit+0x90>)
  402c00:	9303      	str	r3, [sp, #12]
	twihs_opts.speed = 200000;
  402c02:	4b0c      	ldr	r3, [pc, #48]	; (402c34 <Twihs_reinit+0x94>)
  402c04:	9304      	str	r3, [sp, #16]
	twihs_master_init(TWIHS0,&twihs_opts);
  402c06:	a903      	add	r1, sp, #12
  402c08:	4b0b      	ldr	r3, [pc, #44]	; (402c38 <Twihs_reinit+0x98>)
  402c0a:	4798      	blx	r3
	sendDebugString("TWIHS RE-INITIALIZATION - FINISHED\n");
  402c0c:	480b      	ldr	r0, [pc, #44]	; (402c3c <Twihs_reinit+0x9c>)
  402c0e:	47b0      	blx	r6
}
  402c10:	b006      	add	sp, #24
  402c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c16:	bf00      	nop
  402c18:	00413000 	.word	0x00413000
  402c1c:	0040019d 	.word	0x0040019d
  402c20:	400e0e00 	.word	0x400e0e00
  402c24:	004027cd 	.word	0x004027cd
  402c28:	004027ed 	.word	0x004027ed
  402c2c:	40018000 	.word	0x40018000
  402c30:	11e1a300 	.word	0x11e1a300
  402c34:	00030d40 	.word	0x00030d40
  402c38:	00402ab5 	.word	0x00402ab5
  402c3c:	00413024 	.word	0x00413024
  402c40:	004028b9 	.word	0x004028b9

00402c44 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402c44:	b570      	push	{r4, r5, r6, lr}
	uint32_t status, cnt = p_packet->length;
  402c46:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402c48:	688d      	ldr	r5, [r1, #8]
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
  402c4a:	2c00      	cmp	r4, #0
  402c4c:	d055      	beq.n	402cfa <twihs_master_write+0xb6>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402c4e:	2600      	movs	r6, #0
  402c50:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c52:	7c0b      	ldrb	r3, [r1, #16]
  402c54:	041b      	lsls	r3, r3, #16
  402c56:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402c5a:	684b      	ldr	r3, [r1, #4]
  402c5c:	021b      	lsls	r3, r3, #8
  402c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c62:	4313      	orrs	r3, r2
  402c64:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402c66:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402c68:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402c6a:	2a00      	cmp	r2, #0
  402c6c:	d051      	beq.n	402d12 <twihs_master_write+0xce>
		return 0;

	val = addr[0];
  402c6e:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402c70:	2a01      	cmp	r2, #1
  402c72:	dd02      	ble.n	402c7a <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  402c74:	784e      	ldrb	r6, [r1, #1]
  402c76:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402c7a:	2a02      	cmp	r2, #2
  402c7c:	dd4a      	ble.n	402d14 <twihs_master_write+0xd0>
		val <<= 8;
		val |= addr[2];
  402c7e:	788a      	ldrb	r2, [r1, #2]
  402c80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402c84:	e046      	b.n	402d14 <twihs_master_write+0xd0>
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402c86:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402c88:	f413 7f80 	tst.w	r3, #256	; 0x100
  402c8c:	d137      	bne.n	402cfe <twihs_master_write+0xba>
			return TWIHS_RECEIVE_NACK;
		}
		timeout++;
		if(timeout > 0xFFFF) { 
  402c8e:	3a01      	subs	r2, #1
  402c90:	d103      	bne.n	402c9a <twihs_master_write+0x56>
			Twihs_reinit();
  402c92:	4b25      	ldr	r3, [pc, #148]	; (402d28 <twihs_master_write+0xe4>)
  402c94:	4798      	blx	r3
			return TWIHS_RECEIVE_NACK;
  402c96:	2105      	movs	r1, #5
  402c98:	e044      	b.n	402d24 <twihs_master_write+0xe0>
		}
		if (!(status & TWIHS_SR_TXRDY)) {
  402c9a:	f013 0f04 	tst.w	r3, #4
  402c9e:	d003      	beq.n	402ca8 <twihs_master_write+0x64>
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402ca0:	782b      	ldrb	r3, [r5, #0]
  402ca2:	6343      	str	r3, [r0, #52]	; 0x34

		cnt--;
  402ca4:	3c01      	subs	r4, #1
		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402ca6:	3501      	adds	r5, #1
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  402ca8:	2c00      	cmp	r4, #0
  402caa:	d1ec      	bne.n	402c86 <twihs_master_write+0x42>

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402cac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cae:	f413 7480 	ands.w	r4, r3, #256	; 0x100
  402cb2:	d126      	bne.n	402d02 <twihs_master_write+0xbe>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402cb4:	f013 0f04 	tst.w	r3, #4
  402cb8:	d10e      	bne.n	402cd8 <twihs_master_write+0x94>
  402cba:	2300      	movs	r3, #0
		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402cc0:	e002      	b.n	402cc8 <twihs_master_write+0x84>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402cc2:	f012 0f04 	tst.w	r2, #4
  402cc6:	d107      	bne.n	402cd8 <twihs_master_write+0x94>
			break;
		}
		timeout++;
  402cc8:	3301      	adds	r3, #1

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402cca:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402ccc:	f412 7f80 	tst.w	r2, #256	; 0x100
  402cd0:	d119      	bne.n	402d06 <twihs_master_write+0xc2>
  402cd2:	428b      	cmp	r3, r1
  402cd4:	d9f5      	bls.n	402cc2 <twihs_master_write+0x7e>
  402cd6:	e016      	b.n	402d06 <twihs_master_write+0xc2>
			break;
		}
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402cd8:	2302      	movs	r3, #2
  402cda:	6003      	str	r3, [r0, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cdc:	6a01      	ldr	r1, [r0, #32]
  402cde:	f011 0101 	ands.w	r1, r1, #1
  402ce2:	d112      	bne.n	402d0a <twihs_master_write+0xc6>
  402ce4:	2300      	movs	r3, #0
  402ce6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
		timeout++;
  402cea:	3301      	adds	r3, #1
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cec:	6a02      	ldr	r2, [r0, #32]
  402cee:	f012 0f01 	tst.w	r2, #1
  402cf2:	d117      	bne.n	402d24 <twihs_master_write+0xe0>
  402cf4:	42a3      	cmp	r3, r4
  402cf6:	d9f8      	bls.n	402cea <twihs_master_write+0xa6>
  402cf8:	e014      	b.n	402d24 <twihs_master_write+0xe0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402cfa:	2101      	movs	r1, #1
  402cfc:	e012      	b.n	402d24 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402cfe:	2105      	movs	r1, #5
  402d00:	e010      	b.n	402d24 <twihs_master_write+0xe0>
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
			return TWIHS_RECEIVE_NACK;
  402d02:	2105      	movs	r1, #5
  402d04:	e00e      	b.n	402d24 <twihs_master_write+0xe0>
  402d06:	2105      	movs	r1, #5
  402d08:	e00c      	b.n	402d24 <twihs_master_write+0xe0>

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
  402d0a:	4621      	mov	r1, r4
  402d0c:	e00a      	b.n	402d24 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402d0e:	2105      	movs	r1, #5
  402d10:	e008      	b.n	402d24 <twihs_master_write+0xe0>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402d12:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402d14:	60c3      	str	r3, [r0, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402d16:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402d18:	f413 7f80 	tst.w	r3, #256	; 0x100
  402d1c:	d1f7      	bne.n	402d0e <twihs_master_write+0xca>
  402d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d22:	e7ba      	b.n	402c9a <twihs_master_write+0x56>
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
}
  402d24:	4608      	mov	r0, r1
  402d26:	bd70      	pop	{r4, r5, r6, pc}
  402d28:	00402ba1 	.word	0x00402ba1

00402d2c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402d2c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402d2e:	23ac      	movs	r3, #172	; 0xac
  402d30:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402d32:	680b      	ldr	r3, [r1, #0]
  402d34:	684a      	ldr	r2, [r1, #4]
  402d36:	fbb3 f3f2 	udiv	r3, r3, r2
  402d3a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402d3c:	1e5c      	subs	r4, r3, #1
  402d3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402d42:	4294      	cmp	r4, r2
  402d44:	d806      	bhi.n	402d54 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402d46:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402d48:	688b      	ldr	r3, [r1, #8]
  402d4a:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d4c:	2350      	movs	r3, #80	; 0x50
  402d4e:	6003      	str	r3, [r0, #0]

	return 0;
  402d50:	2000      	movs	r0, #0
  402d52:	e000      	b.n	402d56 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402d54:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402d56:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d5a:	4770      	bx	lr

00402d5c <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402d5c:	2340      	movs	r3, #64	; 0x40
  402d5e:	6003      	str	r3, [r0, #0]
  402d60:	4770      	bx	lr
  402d62:	bf00      	nop

00402d64 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402d64:	2310      	movs	r3, #16
  402d66:	6003      	str	r3, [r0, #0]
  402d68:	4770      	bx	lr
  402d6a:	bf00      	nop

00402d6c <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d6c:	2350      	movs	r3, #80	; 0x50
  402d6e:	6003      	str	r3, [r0, #0]
  402d70:	4770      	bx	lr
  402d72:	bf00      	nop

00402d74 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402d74:	6081      	str	r1, [r0, #8]
  402d76:	4770      	bx	lr

00402d78 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402d78:	6940      	ldr	r0, [r0, #20]
}
  402d7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402d7e:	4770      	bx	lr

00402d80 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402d80:	6201      	str	r1, [r0, #32]
  402d82:	4770      	bx	lr

00402d84 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402d84:	6943      	ldr	r3, [r0, #20]
  402d86:	f013 0f02 	tst.w	r3, #2
  402d8a:	d002      	beq.n	402d92 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402d8c:	61c1      	str	r1, [r0, #28]
	return 0;
  402d8e:	2000      	movs	r0, #0
  402d90:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402d92:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402d94:	4770      	bx	lr
  402d96:	bf00      	nop

00402d98 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402d98:	6943      	ldr	r3, [r0, #20]
  402d9a:	f013 0f01 	tst.w	r3, #1
  402d9e:	d003      	beq.n	402da8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402da0:	6983      	ldr	r3, [r0, #24]
  402da2:	700b      	strb	r3, [r1, #0]
	return 0;
  402da4:	2000      	movs	r0, #0
  402da6:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402da8:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402daa:	4770      	bx	lr

00402dac <board_init>:
#define USART_SERIAL_PARITY          US_MR_PAR_NO
#define USART_SERIAL_STOP_BIT        US_MR_NBSTOP_1_BIT


void board_init(void)
{
  402dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402db0:	b09f      	sub	sp, #124	; 0x7c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402db2:	48a9      	ldr	r0, [pc, #676]	; (403058 <board_init+0x2ac>)
  402db4:	2100      	movs	r1, #0
  402db6:	4ba9      	ldr	r3, [pc, #676]	; (40305c <board_init+0x2b0>)
  402db8:	4798      	blx	r3
	sysclk_init();
  402dba:	4ba9      	ldr	r3, [pc, #676]	; (403060 <board_init+0x2b4>)
  402dbc:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402dbe:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402dc2:	b672      	cpsid	i
  402dc4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402dc8:	2100      	movs	r1, #0
  402dca:	4aa6      	ldr	r2, [pc, #664]	; (403064 <board_init+0x2b8>)
  402dcc:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402dce:	49a6      	ldr	r1, [pc, #664]	; (403068 <board_init+0x2bc>)
  402dd0:	680a      	ldr	r2, [r1, #0]
  402dd2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  402dd6:	600a      	str	r2, [r1, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402dd8:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402ddc:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402de0:	b92b      	cbnz	r3, 402dee <board_init+0x42>
		cpu_irq_enable();
  402de2:	2201      	movs	r2, #1
  402de4:	4b9f      	ldr	r3, [pc, #636]	; (403064 <board_init+0x2b8>)
  402de6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402de8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402dec:	b662      	cpsie	i
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402dee:	f8df 931c 	ldr.w	r9, [pc, #796]	; 40310c <board_init+0x360>
  402df2:	ad1b      	add	r5, sp, #108	; 0x6c
  402df4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402df8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402dfc:	202e      	movs	r0, #46	; 0x2e
  402dfe:	f8df 8310 	ldr.w	r8, [pc, #784]	; 403110 <board_init+0x364>
  402e02:	47c0      	blx	r8
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  402e04:	202e      	movs	r0, #46	; 0x2e
  402e06:	47c0      	blx	r8
	uart_init(USART_SERIAL, &usart_console_settings);
  402e08:	4c98      	ldr	r4, [pc, #608]	; (40306c <board_init+0x2c0>)
  402e0a:	4620      	mov	r0, r4
  402e0c:	4629      	mov	r1, r5
  402e0e:	4b98      	ldr	r3, [pc, #608]	; (403070 <board_init+0x2c4>)
  402e10:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  402e12:	4620      	mov	r0, r4
  402e14:	4b97      	ldr	r3, [pc, #604]	; (403074 <board_init+0x2c8>)
  402e16:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  402e18:	4620      	mov	r0, r4
  402e1a:	4b97      	ldr	r3, [pc, #604]	; (403078 <board_init+0x2cc>)
  402e1c:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  402e1e:	4620      	mov	r0, r4
  402e20:	4b96      	ldr	r3, [pc, #600]	; (40307c <board_init+0x2d0>)
  402e22:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(1000));
  402e24:	4620      	mov	r0, r4
  402e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402e2a:	4b95      	ldr	r3, [pc, #596]	; (403080 <board_init+0x2d4>)
  402e2c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  402e2e:	2010      	movs	r0, #16
  402e30:	47c0      	blx	r8
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  402e32:	4894      	ldr	r0, [pc, #592]	; (403084 <board_init+0x2d8>)
  402e34:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402e38:	4a93      	ldr	r2, [pc, #588]	; (403088 <board_init+0x2dc>)
  402e3a:	4e94      	ldr	r6, [pc, #592]	; (40308c <board_init+0x2e0>)
  402e3c:	47b0      	blx	r6
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  402e3e:	4894      	ldr	r0, [pc, #592]	; (403090 <board_init+0x2e4>)
  402e40:	4d94      	ldr	r5, [pc, #592]	; (403094 <board_init+0x2e8>)
  402e42:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	sendDebugString("LED INITIALIZATION - STARTED\n");
  402e44:	4894      	ldr	r0, [pc, #592]	; (403098 <board_init+0x2ec>)
  402e46:	47a8      	blx	r5
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  402e48:	4894      	ldr	r0, [pc, #592]	; (40309c <board_init+0x2f0>)
  402e4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402e4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402e52:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
  402e54:	200a      	movs	r0, #10
  402e56:	47c0      	blx	r8
		pmc_enable_periph_clk(ID_PIOB);
  402e58:	200b      	movs	r0, #11
  402e5a:	47c0      	blx	r8
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  402e5c:	2400      	movs	r4, #0
  402e5e:	9400      	str	r4, [sp, #0]
  402e60:	488f      	ldr	r0, [pc, #572]	; (4030a0 <board_init+0x2f4>)
  402e62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e66:	4622      	mov	r2, r4
  402e68:	4623      	mov	r3, r4
  402e6a:	4f8e      	ldr	r7, [pc, #568]	; (4030a4 <board_init+0x2f8>)
  402e6c:	47b8      	blx	r7
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402e6e:	9400      	str	r4, [sp, #0]
  402e70:	488b      	ldr	r0, [pc, #556]	; (4030a0 <board_init+0x2f4>)
  402e72:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e76:	4622      	mov	r2, r4
  402e78:	4623      	mov	r3, r4
  402e7a:	47b8      	blx	r7
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  402e7c:	9400      	str	r4, [sp, #0]
  402e7e:	4888      	ldr	r0, [pc, #544]	; (4030a0 <board_init+0x2f4>)
  402e80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e84:	4622      	mov	r2, r4
  402e86:	4623      	mov	r3, r4
  402e88:	47b8      	blx	r7
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  402e8a:	9400      	str	r4, [sp, #0]
  402e8c:	4884      	ldr	r0, [pc, #528]	; (4030a0 <board_init+0x2f4>)
  402e8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402e92:	4622      	mov	r2, r4
  402e94:	4623      	mov	r3, r4
  402e96:	47b8      	blx	r7
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402e98:	9400      	str	r4, [sp, #0]
  402e9a:	4880      	ldr	r0, [pc, #512]	; (40309c <board_init+0x2f0>)
  402e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402ea0:	4622      	mov	r2, r4
  402ea2:	4623      	mov	r3, r4
  402ea4:	47b8      	blx	r7
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402ea6:	9400      	str	r4, [sp, #0]
  402ea8:	487d      	ldr	r0, [pc, #500]	; (4030a0 <board_init+0x2f4>)
  402eaa:	2104      	movs	r1, #4
  402eac:	4622      	mov	r2, r4
  402eae:	4623      	mov	r3, r4
  402eb0:	47b8      	blx	r7
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402eb2:	9400      	str	r4, [sp, #0]
  402eb4:	487a      	ldr	r0, [pc, #488]	; (4030a0 <board_init+0x2f4>)
  402eb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402eba:	4622      	mov	r2, r4
  402ebc:	4623      	mov	r3, r4
  402ebe:	47b8      	blx	r7
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402ec0:	9400      	str	r4, [sp, #0]
  402ec2:	4877      	ldr	r0, [pc, #476]	; (4030a0 <board_init+0x2f4>)
  402ec4:	2140      	movs	r1, #64	; 0x40
  402ec6:	4622      	mov	r2, r4
  402ec8:	4623      	mov	r3, r4
  402eca:	47b8      	blx	r7
		
		sendDebugString("LED INITIALIZATION - FINISHED\n");
  402ecc:	4876      	ldr	r0, [pc, #472]	; (4030a8 <board_init+0x2fc>)
  402ece:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402ed0:	4876      	ldr	r0, [pc, #472]	; (4030ac <board_init+0x300>)
  402ed2:	47a8      	blx	r5
		wdt_disable(WDT);
  402ed4:	4876      	ldr	r0, [pc, #472]	; (4030b0 <board_init+0x304>)
  402ed6:	4b77      	ldr	r3, [pc, #476]	; (4030b4 <board_init+0x308>)
  402ed8:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402eda:	4877      	ldr	r0, [pc, #476]	; (4030b8 <board_init+0x30c>)
  402edc:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402ede:	4877      	ldr	r0, [pc, #476]	; (4030bc <board_init+0x310>)
  402ee0:	47a8      	blx	r5
		cpu_irq_enable();
  402ee2:	4b60      	ldr	r3, [pc, #384]	; (403064 <board_init+0x2b8>)
  402ee4:	f04f 0201 	mov.w	r2, #1
  402ee8:	701a      	strb	r2, [r3, #0]
  402eea:	f3bf 8f5f 	dmb	sy
  402eee:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402ef0:	4873      	ldr	r0, [pc, #460]	; (4030c0 <board_init+0x314>)
  402ef2:	47a8      	blx	r5
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("SDRAM INITIALIZATION - STARTED\n");
  402ef4:	4873      	ldr	r0, [pc, #460]	; (4030c4 <board_init+0x318>)
  402ef6:	47a8      	blx	r5
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  402ef8:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  402efc:	f109 090c 	add.w	r9, r9, #12
  402f00:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402f04:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(8)		|
			SDRAMC_CR_TXSR(12)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  402f08:	203e      	movs	r0, #62	; 0x3e
  402f0a:	47c0      	blx	r8
	
	pmc_enable_periph_clk(ID_PIOC);
  402f0c:	200c      	movs	r0, #12
  402f0e:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOD);
  402f10:	2010      	movs	r0, #16
  402f12:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOE);
  402f14:	2011      	movs	r0, #17
  402f16:	47c0      	blx	r8
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  402f18:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 403114 <board_init+0x368>
  402f1c:	486a      	ldr	r0, [pc, #424]	; (4030c8 <board_init+0x31c>)
  402f1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f22:	464a      	mov	r2, r9
  402f24:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  402f26:	4868      	ldr	r0, [pc, #416]	; (4030c8 <board_init+0x31c>)
  402f28:	4649      	mov	r1, r9
  402f2a:	2201      	movs	r2, #1
  402f2c:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 403118 <board_init+0x36c>
  402f30:	47d8      	blx	fp
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  402f32:	4865      	ldr	r0, [pc, #404]	; (4030c8 <board_init+0x31c>)
  402f34:	4965      	ldr	r1, [pc, #404]	; (4030cc <board_init+0x320>)
  402f36:	4622      	mov	r2, r4
  402f38:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 40311c <board_init+0x370>
  402f3c:	47c8      	blx	r9
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402f3e:	4858      	ldr	r0, [pc, #352]	; (4030a0 <board_init+0x2f4>)
  402f40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f44:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402f48:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  402f4a:	4855      	ldr	r0, [pc, #340]	; (4030a0 <board_init+0x2f4>)
  402f4c:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f50:	4622      	mov	r2, r4
  402f52:	47d8      	blx	fp
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  402f54:	4852      	ldr	r0, [pc, #328]	; (4030a0 <board_init+0x2f4>)
  402f56:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f5a:	2201      	movs	r2, #1
  402f5c:	47c8      	blx	r9
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  402f5e:	4850      	ldr	r0, [pc, #320]	; (4030a0 <board_init+0x2f4>)
  402f60:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f64:	4a5a      	ldr	r2, [pc, #360]	; (4030d0 <board_init+0x324>)
  402f66:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402f68:	484d      	ldr	r0, [pc, #308]	; (4030a0 <board_init+0x2f4>)
  402f6a:	4959      	ldr	r1, [pc, #356]	; (4030d0 <board_init+0x324>)
  402f6c:	2201      	movs	r2, #1
  402f6e:	47d8      	blx	fp
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402f70:	484b      	ldr	r0, [pc, #300]	; (4030a0 <board_init+0x2f4>)
  402f72:	4957      	ldr	r1, [pc, #348]	; (4030d0 <board_init+0x324>)
  402f74:	4622      	mov	r2, r4
  402f76:	47c8      	blx	r9
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402f78:	4842      	ldr	r0, [pc, #264]	; (403084 <board_init+0x2d8>)
  402f7a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f7e:	4a55      	ldr	r2, [pc, #340]	; (4030d4 <board_init+0x328>)
  402f80:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402f82:	4840      	ldr	r0, [pc, #256]	; (403084 <board_init+0x2d8>)
  402f84:	4953      	ldr	r1, [pc, #332]	; (4030d4 <board_init+0x328>)
  402f86:	2201      	movs	r2, #1
  402f88:	47d8      	blx	fp
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402f8a:	483e      	ldr	r0, [pc, #248]	; (403084 <board_init+0x2d8>)
  402f8c:	4951      	ldr	r1, [pc, #324]	; (4030d4 <board_init+0x328>)
  402f8e:	4622      	mov	r2, r4
  402f90:	47c8      	blx	r9
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402f92:	4851      	ldr	r0, [pc, #324]	; (4030d8 <board_init+0x32c>)
  402f94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f98:	223f      	movs	r2, #63	; 0x3f
  402f9a:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402f9c:	484e      	ldr	r0, [pc, #312]	; (4030d8 <board_init+0x32c>)
  402f9e:	213f      	movs	r1, #63	; 0x3f
  402fa0:	2201      	movs	r2, #1
  402fa2:	47d8      	blx	fp
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402fa4:	484c      	ldr	r0, [pc, #304]	; (4030d8 <board_init+0x32c>)
  402fa6:	213f      	movs	r1, #63	; 0x3f
  402fa8:	4622      	mov	r2, r4
  402faa:	47c8      	blx	r9
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402fac:	4a4b      	ldr	r2, [pc, #300]	; (4030dc <board_init+0x330>)
  402fae:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402fb2:	f043 0310 	orr.w	r3, r3, #16
  402fb6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402fba:	4843      	ldr	r0, [pc, #268]	; (4030c8 <board_init+0x31c>)
  402fbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402fc4:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402fc6:	4650      	mov	r0, sl
  402fc8:	4945      	ldr	r1, [pc, #276]	; (4030e0 <board_init+0x334>)
  402fca:	4b46      	ldr	r3, [pc, #280]	; (4030e4 <board_init+0x338>)
  402fcc:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402fce:	4846      	ldr	r0, [pc, #280]	; (4030e8 <board_init+0x33c>)
  402fd0:	47a8      	blx	r5
	//checkSDRAM
	//SdramCheck();
	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402fd2:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  402fd6:	4621      	mov	r1, r4
  402fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402fdc:	4b43      	ldr	r3, [pc, #268]	; (4030ec <board_init+0x340>)
  402fde:	4798      	blx	r3
	sendDebugString("SDRAM INITIALIZATION - FINISHED\n");
  402fe0:	4843      	ldr	r0, [pc, #268]	; (4030f0 <board_init+0x344>)
  402fe2:	47a8      	blx	r5
	/* ######################################
	   ######################################
					 Setup i2c
	   ######################################
	   ###################################### */
	sendDebugString("TWIHS INITIALIZATION - STARTED\n");
  402fe4:	4843      	ldr	r0, [pc, #268]	; (4030f4 <board_init+0x348>)
  402fe6:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402fe8:	9400      	str	r4, [sp, #0]
  402fea:	4826      	ldr	r0, [pc, #152]	; (403084 <board_init+0x2d8>)
  402fec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ff0:	4622      	mov	r2, r4
  402ff2:	4623      	mov	r3, r4
  402ff4:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402ff6:	4823      	ldr	r0, [pc, #140]	; (403084 <board_init+0x2d8>)
  402ff8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ffc:	f8df a120 	ldr.w	sl, [pc, #288]	; 403120 <board_init+0x374>
  403000:	47d0      	blx	sl
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  403002:	9400      	str	r4, [sp, #0]
  403004:	4826      	ldr	r0, [pc, #152]	; (4030a0 <board_init+0x2f4>)
  403006:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40300a:	4622      	mov	r2, r4
  40300c:	4623      	mov	r3, r4
  40300e:	47b8      	blx	r7
	pio_clear(PIOA,PIO_PA26);
  403010:	4823      	ldr	r0, [pc, #140]	; (4030a0 <board_init+0x2f4>)
  403012:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403016:	4b38      	ldr	r3, [pc, #224]	; (4030f8 <board_init+0x34c>)
  403018:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TWIHS0);
  40301a:	2013      	movs	r0, #19
  40301c:	47c0      	blx	r8
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  40301e:	4820      	ldr	r0, [pc, #128]	; (4030a0 <board_init+0x2f4>)
  403020:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403024:	2218      	movs	r2, #24
  403026:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  403028:	9400      	str	r4, [sp, #0]
  40302a:	4816      	ldr	r0, [pc, #88]	; (403084 <board_init+0x2d8>)
  40302c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403030:	4622      	mov	r2, r4
  403032:	4623      	mov	r3, r4
  403034:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  403036:	4813      	ldr	r0, [pc, #76]	; (403084 <board_init+0x2d8>)
  403038:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40303c:	47d0      	blx	sl
	
	Twihs_reinit();
  40303e:	4b2f      	ldr	r3, [pc, #188]	; (4030fc <board_init+0x350>)
  403040:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS0);
	//twihs_options_t twihs_opts;
	//twihs_opts.master_clk = sysclk_get_cpu_hz();
	//twihs_opts.speed = 200000;
	//twihs_master_init(TWIHS0,&twihs_opts);
	sendDebugString("TWIHS INITIALIZATION - FINISHED\n");
  403042:	482f      	ldr	r0, [pc, #188]	; (403100 <board_init+0x354>)
  403044:	47a8      	blx	r5
	/* ######################################
	   ######################################
				 Setup Servo Driver
	   ######################################
	   ###################################### */
	sendDebugString("SERVO DRIVER INITIALIZATION - STARTED\n");
  403046:	482f      	ldr	r0, [pc, #188]	; (403104 <board_init+0x358>)
  403048:	47a8      	blx	r5
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  40304a:	2040      	movs	r0, #64	; 0x40
  40304c:	4b2e      	ldr	r3, [pc, #184]	; (403108 <board_init+0x35c>)
  40304e:	4798      	blx	r3
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  403050:	2041      	movs	r0, #65	; 0x41
  403052:	4b2d      	ldr	r3, [pc, #180]	; (403108 <board_init+0x35c>)
  403054:	4798      	blx	r3
  403056:	e065      	b.n	403124 <board_init+0x378>
  403058:	400e1810 	.word	0x400e1810
  40305c:	00400a71 	.word	0x00400a71
  403060:	0040274d 	.word	0x0040274d
  403064:	20400010 	.word	0x20400010
  403068:	e000ed88 	.word	0xe000ed88
  40306c:	400e1e00 	.word	0x400e1e00
  403070:	00402d2d 	.word	0x00402d2d
  403074:	00402d6d 	.word	0x00402d6d
  403078:	00402d5d 	.word	0x00402d5d
  40307c:	00402d65 	.word	0x00402d65
  403080:	00402d81 	.word	0x00402d81
  403084:	400e1400 	.word	0x400e1400
  403088:	00040008 	.word	0x00040008
  40308c:	004027ed 	.word	0x004027ed
  403090:	00413060 	.word	0x00413060
  403094:	0040019d 	.word	0x0040019d
  403098:	004130c4 	.word	0x004130c4
  40309c:	400e1000 	.word	0x400e1000
  4030a0:	400e0e00 	.word	0x400e0e00
  4030a4:	004028b9 	.word	0x004028b9
  4030a8:	004130e4 	.word	0x004130e4
  4030ac:	00413104 	.word	0x00413104
  4030b0:	400e1850 	.word	0x400e1850
  4030b4:	00400a9d 	.word	0x00400a9d
  4030b8:	00413128 	.word	0x00413128
  4030bc:	0041314c 	.word	0x0041314c
  4030c0:	00413174 	.word	0x00413174
  4030c4:	0041319c 	.word	0x0041319c
  4030c8:	400e1200 	.word	0x400e1200
  4030cc:	fffc80ff 	.word	0xfffc80ff
  4030d0:	001c0001 	.word	0x001c0001
  4030d4:	2083e000 	.word	0x2083e000
  4030d8:	400e1600 	.word	0x400e1600
  4030dc:	40088000 	.word	0x40088000
  4030e0:	11e1a300 	.word	0x11e1a300
  4030e4:	00400935 	.word	0x00400935
  4030e8:	004131bc 	.word	0x004131bc
  4030ec:	0040baad 	.word	0x0040baad
  4030f0:	004131d8 	.word	0x004131d8
  4030f4:	004131fc 	.word	0x004131fc
  4030f8:	004027cd 	.word	0x004027cd
  4030fc:	00402ba1 	.word	0x00402ba1
  403100:	0041321c 	.word	0x0041321c
  403104:	00413240 	.word	0x00413240
  403108:	004051e5 	.word	0x004051e5
  40310c:	00413048 	.word	0x00413048
  403110:	00402a1d 	.word	0x00402a1d
  403114:	fffc00ff 	.word	0xfffc00ff
  403118:	004028e1 	.word	0x004028e1
  40311c:	004027bd 	.word	0x004027bd
  403120:	004027c9 	.word	0x004027c9
	sendDebugString("SERVO DRIVER INITIALIZATION - FINISHED\n");
  403124:	48ac      	ldr	r0, [pc, #688]	; (4033d8 <board_init+0x62c>)
  403126:	47a8      	blx	r5
	   ######################################
			 		Setup Camera
	   ######################################
	   ###################################### */

	sendDebugString("CAMERA INITIALIZATION - STARTED\n");
  403128:	48ac      	ldr	r0, [pc, #688]	; (4033dc <board_init+0x630>)
  40312a:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  40312c:	9400      	str	r4, [sp, #0]
  40312e:	48ac      	ldr	r0, [pc, #688]	; (4033e0 <board_init+0x634>)
  403130:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403134:	4622      	mov	r2, r4
  403136:	4623      	mov	r3, r4
  403138:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD10);
  40313a:	48a9      	ldr	r0, [pc, #676]	; (4033e0 <board_init+0x634>)
  40313c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403140:	47d0      	blx	sl
	delay_ms(10);
  403142:	48a8      	ldr	r0, [pc, #672]	; (4033e4 <board_init+0x638>)
  403144:	4ba8      	ldr	r3, [pc, #672]	; (4033e8 <board_init+0x63c>)
  403146:	4798      	blx	r3
	//pio_clear(PIOD,PIO_PD10);
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  403148:	4da8      	ldr	r5, [pc, #672]	; (4033ec <board_init+0x640>)
  40314a:	48a5      	ldr	r0, [pc, #660]	; (4033e0 <board_init+0x634>)
  40314c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403150:	462a      	mov	r2, r5
  403152:	47b0      	blx	r6
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	
	pio_pull_up(PIOD,
  403154:	48a2      	ldr	r0, [pc, #648]	; (4033e0 <board_init+0x634>)
  403156:	4629      	mov	r1, r5
  403158:	4622      	mov	r2, r4
  40315a:	47c8      	blx	r9
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_pull_down(PIOD,
  40315c:	48a0      	ldr	r0, [pc, #640]	; (4033e0 <board_init+0x634>)
  40315e:	4629      	mov	r1, r5
  403160:	2201      	movs	r2, #1
  403162:	47d8      	blx	fp
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,1);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  403164:	48a2      	ldr	r0, [pc, #648]	; (4033f0 <board_init+0x644>)
  403166:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40316a:	2208      	movs	r2, #8
  40316c:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  40316e:	48a0      	ldr	r0, [pc, #640]	; (4033f0 <board_init+0x644>)
  403170:	2108      	movs	r1, #8
  403172:	4622      	mov	r2, r4
  403174:	47c8      	blx	r9
	pio_pull_down(PIOB,1<<3,1);
  403176:	489e      	ldr	r0, [pc, #632]	; (4033f0 <board_init+0x644>)
  403178:	2108      	movs	r1, #8
  40317a:	2201      	movs	r2, #1
  40317c:	47d8      	blx	fp
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  40317e:	489d      	ldr	r0, [pc, #628]	; (4033f4 <board_init+0x648>)
  403180:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403184:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  403188:	47b0      	blx	r6
	1<<27	|
	1<<24	);
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_B,
  40318a:	489a      	ldr	r0, [pc, #616]	; (4033f4 <board_init+0x648>)
  40318c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403190:	f44f 7208 	mov.w	r2, #544	; 0x220
  403194:	47b0      	blx	r6
		1<<9	|
		1<<5	);
	
	pio_pull_up(PIOA,
  403196:	4d98      	ldr	r5, [pc, #608]	; (4033f8 <board_init+0x64c>)
  403198:	4896      	ldr	r0, [pc, #600]	; (4033f4 <board_init+0x648>)
  40319a:	4629      	mov	r1, r5
  40319c:	4622      	mov	r2, r4
  40319e:	47c8      	blx	r9
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pio_pull_down(PIOA,
  4031a0:	4894      	ldr	r0, [pc, #592]	; (4033f4 <board_init+0x648>)
  4031a2:	4629      	mov	r1, r5
  4031a4:	2201      	movs	r2, #1
  4031a6:	47d8      	blx	fp
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,1);
	
	pmc_enable_periph_clk(ID_ISI);
  4031a8:	203b      	movs	r0, #59	; 0x3b
  4031aa:	47c0      	blx	r8
	
	//set camera to 640x480
	//SetupCameraYUVVGA();
	SetupCameraYUVVGA_OV7670();
  4031ac:	4b93      	ldr	r3, [pc, #588]	; (4033fc <board_init+0x650>)
  4031ae:	4798      	blx	r3
 */
static inline void isi_reset(Isi *p_isi)
{
	/* Resets the image sensor interface.
	   Finish capturing the current frame and then shut down the module. */
	p_isi->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  4031b0:	2206      	movs	r2, #6
  4031b2:	4b93      	ldr	r3, [pc, #588]	; (403400 <board_init+0x654>)
  4031b4:	625a      	str	r2, [r3, #36]	; 0x24
	/* wait Software reset has completed successfully. */
	while((p_isi->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST);
  4031b6:	461a      	mov	r2, r3
  4031b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4031ba:	f013 0f04 	tst.w	r3, #4
  4031be:	d0fb      	beq.n	4031b8 <board_init+0x40c>
	//Optional Test Mode
	//write_SCCB(0x8D,1<<4);
	isi_reset(ISI);
	
	struct isi_config_t isiConf;
	isiConf.hpol = 1;
  4031c0:	2601      	movs	r6, #1
  4031c2:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
	isiConf.vpol = 1;
  4031c6:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
	isiConf.pck_plo = 0;
  4031ca:	2500      	movs	r5, #0
  4031cc:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
	isiConf.emb_sync = 0;
  4031d0:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	isiConf.crc_sync = 0;
  4031d4:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	isiConf.sld = 1;
  4031d8:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
	isiConf.sfd =0;
  4031dc:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
	isiConf.image_fmt = ISI_INPUT_YUV;
  4031e0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	isiConf.image_hsize = 640;
  4031e4:	f44f 7820 	mov.w	r8, #640	; 0x280
  4031e8:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	isiConf.image_vsize = 480;
  4031ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4031f0:	9317      	str	r3, [sp, #92]	; 0x5c
	isiConf.thmask = 2;
  4031f2:	2302      	movs	r3, #2
  4031f4:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
	

	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  4031f8:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4031fc:	4620      	mov	r0, r4
  4031fe:	4629      	mov	r1, r5
  403200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403204:	4b7f      	ldr	r3, [pc, #508]	; (403404 <board_init+0x658>)
  403206:	4798      	blx	r3
	struct isi_frame_buffer_descriptors* isiFBD0 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  403208:	200c      	movs	r0, #12
  40320a:	f8df 925c 	ldr.w	r9, [pc, #604]	; 403468 <board_init+0x6bc>
  40320e:	47c8      	blx	r9
  403210:	4607      	mov	r7, r0
	struct isi_frame_buffer_descriptors* isiFBD1 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  403212:	200c      	movs	r0, #12
  403214:	47c8      	blx	r9
	
	isiFBD0->next = isiFBD1;
  403216:	60b8      	str	r0, [r7, #8]
	isiFBD0->current =CAM_FRAME0_ADDR;
  403218:	603c      	str	r4, [r7, #0]
	isiFBD0->control =0x1;
  40321a:	607e      	str	r6, [r7, #4]
	
	isiFBD1->next = isiFBD0;
  40321c:	6087      	str	r7, [r0, #8]
	isiFBD1->current =CAM_FRAME0_ADDR;
  40321e:	6004      	str	r4, [r0, #0]
	isiFBD1->control =0x1;
  403220:	6046      	str	r6, [r0, #4]
	
	isi_init(ISI,&isiConf);
  403222:	4c77      	ldr	r4, [pc, #476]	; (403400 <board_init+0x654>)
  403224:	4620      	mov	r0, r4
  403226:	a913      	add	r1, sp, #76	; 0x4c
  403228:	4b77      	ldr	r3, [pc, #476]	; (403408 <board_init+0x65c>)
  40322a:	4798      	blx	r3
	//isi_set_dma_codec_path(ISI,0,1,0,0,0);
	//ISI->ISI_PDECF = 2*16;
	isi_set_dma_preview_path(ISI,0,isiFBD0,0x01,isiFBD0->current);
  40322c:	683b      	ldr	r3, [r7, #0]
  40322e:	9300      	str	r3, [sp, #0]
  403230:	4620      	mov	r0, r4
  403232:	4629      	mov	r1, r5
  403234:	463a      	mov	r2, r7
  403236:	4633      	mov	r3, r6
  403238:	4d74      	ldr	r5, [pc, #464]	; (40340c <board_init+0x660>)
  40323a:	47a8      	blx	r5
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  40323c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40323e:	4333      	orrs	r3, r6
  403240:	63a3      	str	r3, [r4, #56]	; 0x38
	isi_dma_channel_enable(ISI,1);
	
	isi_size_configure(ISI,640,640,320,320);
  403242:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403246:	9300      	str	r3, [sp, #0]
  403248:	4620      	mov	r0, r4
  40324a:	4641      	mov	r1, r8
  40324c:	4642      	mov	r2, r8
  40324e:	4d70      	ldr	r5, [pc, #448]	; (403410 <board_init+0x664>)
  403250:	47a8      	blx	r5
	ISI->ISI_CFG2 = ISI->ISI_CFG2 | ISI_CFG2_YCC_SWAP_MODE1;
  403252:	6863      	ldr	r3, [r4, #4]
  403254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  403258:	6063      	str	r3, [r4, #4]
 *
 * \param p_isi  Pointer to a ISI instance.
 */
static inline void isi_enable(Isi *p_isi)
{
	p_isi->ISI_CR |= ISI_CR_ISI_EN;
  40325a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40325c:	4333      	orrs	r3, r6
  40325e:	6263      	str	r3, [r4, #36]	; 0x24
	while((p_isi->ISI_SR & ISI_CR_ISI_EN) != ISI_CR_ISI_EN);
  403260:	4622      	mov	r2, r4
  403262:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403264:	f013 0f01 	tst.w	r3, #1
  403268:	d0fb      	beq.n	403262 <board_init+0x4b6>
	//ISI->ISI_PDECF = 32;
	isi_enable(ISI);
	sendDebugString("CAMERA INITIALIZATION - FINISHED\n");
  40326a:	486a      	ldr	r0, [pc, #424]	; (403414 <board_init+0x668>)
  40326c:	4c6a      	ldr	r4, [pc, #424]	; (403418 <board_init+0x66c>)
  40326e:	47a0      	blx	r4
	   ######################################
			 	Setup Wireless Module
	   ######################################
	   ###################################### */
	
		sendDebugString("QSPI INITIALIZATION - STARTED\n");
  403270:	486a      	ldr	r0, [pc, #424]	; (40341c <board_init+0x670>)
  403272:	47a0      	blx	r4
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  403274:	2300      	movs	r3, #0
  403276:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	    qspiConf.loopback_en = 0;
  40327a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	    qspiConf.wait_data_for_transfer = 0;
  40327e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	    qspiConf.csmode = 0;
  403282:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  403286:	930a      	str	r3, [sp, #40]	; 0x28
	    qspiConf.baudrate = 16000000;
  403288:	4a65      	ldr	r2, [pc, #404]	; (403420 <board_init+0x674>)
  40328a:	920f      	str	r2, [sp, #60]	; 0x3c
		qspiConf.min_delay_qcs = 4;
  40328c:	2204      	movs	r2, #4
  40328e:	920b      	str	r2, [sp, #44]	; 0x2c
		qspiConf.delay_between_ct = 10;
  403290:	220a      	movs	r2, #10
  403292:	920c      	str	r2, [sp, #48]	; 0x30
		qspiConf.clock_polarity = 0;
  403294:	930d      	str	r3, [sp, #52]	; 0x34
		qspiConf.clock_phase = 0;
  403296:	930e      	str	r3, [sp, #56]	; 0x38
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  403298:	4d56      	ldr	r5, [pc, #344]	; (4033f4 <board_init+0x648>)
  40329a:	4628      	mov	r0, r5
  40329c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032a0:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  4032a4:	4c5f      	ldr	r4, [pc, #380]	; (403424 <board_init+0x678>)
  4032a6:	47a0      	blx	r4
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  4032a8:	4628      	mov	r0, r5
  4032aa:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  4032ae:	2201      	movs	r2, #1
  4032b0:	4b5d      	ldr	r3, [pc, #372]	; (403428 <board_init+0x67c>)
  4032b2:	4798      	blx	r3
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11,1);
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  4032b4:	484a      	ldr	r0, [pc, #296]	; (4033e0 <board_init+0x634>)
  4032b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4032be:	47a0      	blx	r4
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  4032c0:	202b      	movs	r0, #43	; 0x2b
  4032c2:	4b5a      	ldr	r3, [pc, #360]	; (40342c <board_init+0x680>)
  4032c4:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032c6:	2202      	movs	r2, #2
  4032c8:	4b59      	ldr	r3, [pc, #356]	; (403430 <board_init+0x684>)
  4032ca:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032cc:	461a      	mov	r2, r3
  4032ce:	6913      	ldr	r3, [r2, #16]
  4032d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032d4:	d1fb      	bne.n	4032ce <board_init+0x522>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032d6:	4c56      	ldr	r4, [pc, #344]	; (403430 <board_init+0x684>)
  4032d8:	2380      	movs	r3, #128	; 0x80
  4032da:	6023      	str	r3, [r4, #0]

		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032dc:	4620      	mov	r0, r4
  4032de:	a909      	add	r1, sp, #36	; 0x24
  4032e0:	4b54      	ldr	r3, [pc, #336]	; (403434 <board_init+0x688>)
  4032e2:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4032e4:	2301      	movs	r3, #1
  4032e6:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032e8:	4622      	mov	r2, r4
  4032ea:	6913      	ldr	r3, [r2, #16]
  4032ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032f0:	d0fb      	beq.n	4032ea <board_init+0x53e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032f2:	2202      	movs	r2, #2
  4032f4:	4b4e      	ldr	r3, [pc, #312]	; (403430 <board_init+0x684>)
  4032f6:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032f8:	461a      	mov	r2, r3
  4032fa:	6913      	ldr	r3, [r2, #16]
  4032fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403300:	d1fb      	bne.n	4032fa <board_init+0x54e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  403302:	4c4b      	ldr	r4, [pc, #300]	; (403430 <board_init+0x684>)
  403304:	2380      	movs	r3, #128	; 0x80
  403306:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  403308:	4620      	mov	r0, r4
  40330a:	a909      	add	r1, sp, #36	; 0x24
  40330c:	4b49      	ldr	r3, [pc, #292]	; (403434 <board_init+0x688>)
  40330e:	4798      	blx	r3
		delay_ms(100);
  403310:	4849      	ldr	r0, [pc, #292]	; (403438 <board_init+0x68c>)
  403312:	4b35      	ldr	r3, [pc, #212]	; (4033e8 <board_init+0x63c>)
  403314:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  403316:	2301      	movs	r3, #1
  403318:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  40331a:	4622      	mov	r2, r4
  40331c:	6913      	ldr	r3, [r2, #16]
  40331e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403322:	d0fb      	beq.n	40331c <board_init+0x570>
		qspi_enable(QSPI);
		delay_ms(100);
  403324:	4844      	ldr	r0, [pc, #272]	; (403438 <board_init+0x68c>)
  403326:	4b30      	ldr	r3, [pc, #192]	; (4033e8 <board_init+0x63c>)
  403328:	4798      	blx	r3
		//DW1000_initialise();
		sendDebugString("QSPI INITIALIZATION - FINISHED\n");
  40332a:	4844      	ldr	r0, [pc, #272]	; (40343c <board_init+0x690>)
  40332c:	4c3a      	ldr	r4, [pc, #232]	; (403418 <board_init+0x66c>)
  40332e:	47a0      	blx	r4
		
		//Initalize the dwm1000 module 
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  403330:	4843      	ldr	r0, [pc, #268]	; (403440 <board_init+0x694>)
  403332:	47a0      	blx	r4
		//DW1000_initialise2();
		//DW1000_toggleGPIO_MODE();
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  403334:	4843      	ldr	r0, [pc, #268]	; (403444 <board_init+0x698>)
  403336:	47a0      	blx	r4
	/* ######################################
	   ######################################
			 		Setup ADC
	   ######################################
	   ###################################### */
		sendDebugString("ADC INITIALIZATION - STARTED\n");
  403338:	4843      	ldr	r0, [pc, #268]	; (403448 <board_init+0x69c>)
  40333a:	47a0      	blx	r4
		struct afec_config confDefaults;
		pmc_enable_periph_clk(AFEC0);
  40333c:	4d43      	ldr	r5, [pc, #268]	; (40344c <board_init+0x6a0>)
  40333e:	4628      	mov	r0, r5
  403340:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 40342c <board_init+0x680>
  403344:	47c8      	blx	r9
		
		afec_enable(AFEC0);
  403346:	4628      	mov	r0, r5
  403348:	f8df 8120 	ldr.w	r8, [pc, #288]	; 40346c <board_init+0x6c0>
  40334c:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  40334e:	a803      	add	r0, sp, #12
  403350:	4f3f      	ldr	r7, [pc, #252]	; (403450 <board_init+0x6a4>)
  403352:	47b8      	blx	r7
		afec_init(AFEC0,&confDefaults);
  403354:	4628      	mov	r0, r5
  403356:	a903      	add	r1, sp, #12
  403358:	4e3e      	ldr	r6, [pc, #248]	; (403454 <board_init+0x6a8>)
  40335a:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  40335c:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40335e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403362:	606b      	str	r3, [r5, #4]
		afec_set_trigger(AFEC0,AFEC_TRIG_SW);
		
		pmc_enable_periph_clk(AFEC1);
  403364:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  403368:	4628      	mov	r0, r5
  40336a:	47c8      	blx	r9
		
		afec_enable(AFEC1);
  40336c:	4628      	mov	r0, r5
  40336e:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403370:	a803      	add	r0, sp, #12
  403372:	47b8      	blx	r7
		afec_init(AFEC1,&confDefaults);
  403374:	4628      	mov	r0, r5
  403376:	a903      	add	r1, sp, #12
  403378:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  40337a:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40337c:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403380:	606b      	str	r3, [r5, #4]
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403382:	2701      	movs	r7, #1
  403384:	616f      	str	r7, [r5, #20]
		afec_set_trigger(AFEC1,AFEC_TRIG_SW);
		
		afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
		
		pio_pull_up(PIOB,1<<1,0);
  403386:	f505 25fa 	add.w	r5, r5, #512000	; 0x7d000
  40338a:	4628      	mov	r0, r5
  40338c:	2102      	movs	r1, #2
  40338e:	2200      	movs	r2, #0
  403390:	4b25      	ldr	r3, [pc, #148]	; (403428 <board_init+0x67c>)
  403392:	4798      	blx	r3
		pio_pull_down(PIOB,1<<1,0);
  403394:	4628      	mov	r0, r5
  403396:	2102      	movs	r1, #2
  403398:	2200      	movs	r2, #0
  40339a:	4b2f      	ldr	r3, [pc, #188]	; (403458 <board_init+0x6ac>)
  40339c:	4798      	blx	r3
		sendDebugString("ADC INITIALIZATION - FINISHED\n");
  40339e:	482f      	ldr	r0, [pc, #188]	; (40345c <board_init+0x6b0>)
  4033a0:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup SWITCHES
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  4033a2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 403470 <board_init+0x6c4>
  4033a6:	4640      	mov	r0, r8
  4033a8:	47a0      	blx	r4
		pio_set_input(PIOC,1<<12,PIO_PULLUP | PIO_DEBOUNCE);
  4033aa:	4e2d      	ldr	r6, [pc, #180]	; (403460 <board_init+0x6b4>)
  4033ac:	4630      	mov	r0, r6
  4033ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4033b2:	2209      	movs	r2, #9
  4033b4:	4d2b      	ldr	r5, [pc, #172]	; (403464 <board_init+0x6b8>)
  4033b6:	47a8      	blx	r5
		pio_set_input(PIOC,1<<11,PIO_PULLUP | PIO_DEBOUNCE);
  4033b8:	4630      	mov	r0, r6
  4033ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4033be:	2209      	movs	r2, #9
  4033c0:	47a8      	blx	r5
		pio_set_input(PIOC,1<<10,PIO_PULLUP | PIO_DEBOUNCE);
  4033c2:	4630      	mov	r0, r6
  4033c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4033c8:	2209      	movs	r2, #9
  4033ca:	47a8      	blx	r5
		pio_set_input(PIOC,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  4033cc:	4630      	mov	r0, r6
  4033ce:	f44f 7100 	mov.w	r1, #512	; 0x200
  4033d2:	2209      	movs	r2, #9
  4033d4:	e04e      	b.n	403474 <board_init+0x6c8>
  4033d6:	bf00      	nop
  4033d8:	00413268 	.word	0x00413268
  4033dc:	00413290 	.word	0x00413290
  4033e0:	400e1400 	.word	0x400e1400
  4033e4:	0007b784 	.word	0x0007b784
  4033e8:	20400001 	.word	0x20400001
  4033ec:	1b601800 	.word	0x1b601800
  4033f0:	400e1000 	.word	0x400e1000
  4033f4:	400e0e00 	.word	0x400e0e00
  4033f8:	09000220 	.word	0x09000220
  4033fc:	0040550d 	.word	0x0040550d
  403400:	4004c000 	.word	0x4004c000
  403404:	0040baad 	.word	0x0040baad
  403408:	004003e1 	.word	0x004003e1
  40340c:	0040053d 	.word	0x0040053d
  403410:	00400491 	.word	0x00400491
  403414:	004132b4 	.word	0x004132b4
  403418:	0040019d 	.word	0x0040019d
  40341c:	004132d8 	.word	0x004132d8
  403420:	00f42400 	.word	0x00f42400
  403424:	004027ed 	.word	0x004027ed
  403428:	004027bd 	.word	0x004027bd
  40342c:	00402a1d 	.word	0x00402a1d
  403430:	4007c000 	.word	0x4007c000
  403434:	00400615 	.word	0x00400615
  403438:	004d2b25 	.word	0x004d2b25
  40343c:	004132f8 	.word	0x004132f8
  403440:	00413318 	.word	0x00413318
  403444:	0041333c 	.word	0x0041333c
  403448:	00413360 	.word	0x00413360
  40344c:	4003c000 	.word	0x4003c000
  403450:	00400265 	.word	0x00400265
  403454:	00400295 	.word	0x00400295
  403458:	004028e1 	.word	0x004028e1
  40345c:	00413380 	.word	0x00413380
  403460:	400e1200 	.word	0x400e1200
  403464:	00402881 	.word	0x00402881
  403468:	0040b411 	.word	0x0040b411
  40346c:	0040038d 	.word	0x0040038d
  403470:	004133a0 	.word	0x004133a0
  403474:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  403476:	4e10      	ldr	r6, [pc, #64]	; (4034b8 <board_init+0x70c>)
  403478:	4630      	mov	r0, r6
  40347a:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup USB POWER
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  40347c:	4640      	mov	r0, r8
  40347e:	47a0      	blx	r4
		pio_set_input(PIOD,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  403480:	480e      	ldr	r0, [pc, #56]	; (4034bc <board_init+0x710>)
  403482:	f44f 7100 	mov.w	r1, #512	; 0x200
  403486:	2209      	movs	r2, #9
  403488:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  40348a:	4630      	mov	r0, r6
  40348c:	47a0      	blx	r4
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIFERAL IRQ INITIALIZATION - STARTED\n");
  40348e:	480c      	ldr	r0, [pc, #48]	; (4034c0 <board_init+0x714>)
  403490:	47a0      	blx	r4
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART4,UART_IER_RXRDY);
  403492:	480c      	ldr	r0, [pc, #48]	; (4034c4 <board_init+0x718>)
  403494:	4639      	mov	r1, r7
  403496:	4b0c      	ldr	r3, [pc, #48]	; (4034c8 <board_init+0x71c>)
  403498:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40349a:	4b0c      	ldr	r3, [pc, #48]	; (4034cc <board_init+0x720>)
  40349c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4034a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034a4:	21c0      	movs	r1, #192	; 0xc0
  4034a6:	f883 132e 	strb.w	r1, [r3, #814]	; 0x32e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034aa:	605a      	str	r2, [r3, #4]
		NVIC_ClearPendingIRQ(UART4_IRQn);
		NVIC_SetPriority(UART4_IRQn,6);
		NVIC_EnableIRQ(UART4_IRQn);
		sendDebugString("PERIFERAL IRQ INITIALIZATION - FINISHED\n");
  4034ac:	4808      	ldr	r0, [pc, #32]	; (4034d0 <board_init+0x724>)
  4034ae:	47a0      	blx	r4
}
  4034b0:	b01f      	add	sp, #124	; 0x7c
  4034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034b6:	bf00      	nop
  4034b8:	004133c4 	.word	0x004133c4
  4034bc:	400e1400 	.word	0x400e1400
  4034c0:	004133e8 	.word	0x004133e8
  4034c4:	400e1e00 	.word	0x400e1e00
  4034c8:	00402d75 	.word	0x00402d75
  4034cc:	e000e100 	.word	0xe000e100
  4034d0:	00413410 	.word	0x00413410

004034d4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  4034d4:	e7fe      	b.n	4034d4 <Dummy_Handler>
  4034d6:	bf00      	nop

004034d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4034d8:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4034da:	4b19      	ldr	r3, [pc, #100]	; (403540 <Reset_Handler+0x68>)
  4034dc:	4a19      	ldr	r2, [pc, #100]	; (403544 <Reset_Handler+0x6c>)
  4034de:	429a      	cmp	r2, r3
  4034e0:	d003      	beq.n	4034ea <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  4034e2:	4b19      	ldr	r3, [pc, #100]	; (403548 <Reset_Handler+0x70>)
  4034e4:	4a16      	ldr	r2, [pc, #88]	; (403540 <Reset_Handler+0x68>)
  4034e6:	429a      	cmp	r2, r3
  4034e8:	d304      	bcc.n	4034f4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034ea:	4b18      	ldr	r3, [pc, #96]	; (40354c <Reset_Handler+0x74>)
  4034ec:	4a18      	ldr	r2, [pc, #96]	; (403550 <Reset_Handler+0x78>)
  4034ee:	429a      	cmp	r2, r3
  4034f0:	d310      	bcc.n	403514 <Reset_Handler+0x3c>
  4034f2:	e01b      	b.n	40352c <Reset_Handler+0x54>
  4034f4:	4912      	ldr	r1, [pc, #72]	; (403540 <Reset_Handler+0x68>)
  4034f6:	1d0a      	adds	r2, r1, #4
  4034f8:	4b16      	ldr	r3, [pc, #88]	; (403554 <Reset_Handler+0x7c>)
  4034fa:	1a9b      	subs	r3, r3, r2
  4034fc:	f023 0303 	bic.w	r3, r3, #3
  403500:	3304      	adds	r3, #4
  403502:	4a10      	ldr	r2, [pc, #64]	; (403544 <Reset_Handler+0x6c>)
  403504:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  403506:	f852 0b04 	ldr.w	r0, [r2], #4
  40350a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  40350e:	429a      	cmp	r2, r3
  403510:	d1f9      	bne.n	403506 <Reset_Handler+0x2e>
  403512:	e7ea      	b.n	4034ea <Reset_Handler+0x12>
  403514:	4b10      	ldr	r3, [pc, #64]	; (403558 <Reset_Handler+0x80>)
  403516:	4a11      	ldr	r2, [pc, #68]	; (40355c <Reset_Handler+0x84>)
  403518:	1ad2      	subs	r2, r2, r3
  40351a:	f022 0203 	bic.w	r2, r2, #3
  40351e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403520:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403522:	2100      	movs	r1, #0
  403524:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403528:	4293      	cmp	r3, r2
  40352a:	d1fb      	bne.n	403524 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40352c:	4a0c      	ldr	r2, [pc, #48]	; (403560 <Reset_Handler+0x88>)
  40352e:	4b0d      	ldr	r3, [pc, #52]	; (403564 <Reset_Handler+0x8c>)
  403530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403534:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  403536:	4b0c      	ldr	r3, [pc, #48]	; (403568 <Reset_Handler+0x90>)
  403538:	4798      	blx	r3

        /* Branch to main function */
        main();
  40353a:	4b0c      	ldr	r3, [pc, #48]	; (40356c <Reset_Handler+0x94>)
  40353c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40353e:	e7fe      	b.n	40353e <Reset_Handler+0x66>
  403540:	20400000 	.word	0x20400000
  403544:	004141a4 	.word	0x004141a4
  403548:	20400950 	.word	0x20400950
  40354c:	2040cec8 	.word	0x2040cec8
  403550:	20400950 	.word	0x20400950
  403554:	20400953 	.word	0x20400953
  403558:	20400954 	.word	0x20400954
  40355c:	2040cecb 	.word	0x2040cecb
  403560:	e000ed00 	.word	0xe000ed00
  403564:	00400000 	.word	0x00400000
  403568:	0040b399 	.word	0x0040b399
  40356c:	00407d05 	.word	0x00407d05

00403570 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403570:	4b3d      	ldr	r3, [pc, #244]	; (403668 <SystemCoreClockUpdate+0xf8>)
  403572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403574:	f003 0303 	and.w	r3, r3, #3
  403578:	2b01      	cmp	r3, #1
  40357a:	d012      	beq.n	4035a2 <SystemCoreClockUpdate+0x32>
  40357c:	b113      	cbz	r3, 403584 <SystemCoreClockUpdate+0x14>
  40357e:	2b02      	cmp	r3, #2
  403580:	d02c      	beq.n	4035dc <SystemCoreClockUpdate+0x6c>
  403582:	e05a      	b.n	40363a <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403584:	4b39      	ldr	r3, [pc, #228]	; (40366c <SystemCoreClockUpdate+0xfc>)
  403586:	695b      	ldr	r3, [r3, #20]
  403588:	f013 0f80 	tst.w	r3, #128	; 0x80
  40358c:	d004      	beq.n	403598 <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40358e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403592:	4b37      	ldr	r3, [pc, #220]	; (403670 <SystemCoreClockUpdate+0x100>)
  403594:	601a      	str	r2, [r3, #0]
  403596:	e050      	b.n	40363a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403598:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40359c:	4b34      	ldr	r3, [pc, #208]	; (403670 <SystemCoreClockUpdate+0x100>)
  40359e:	601a      	str	r2, [r3, #0]
  4035a0:	e04b      	b.n	40363a <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4035a2:	4b31      	ldr	r3, [pc, #196]	; (403668 <SystemCoreClockUpdate+0xf8>)
  4035a4:	6a1b      	ldr	r3, [r3, #32]
  4035a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4035aa:	d003      	beq.n	4035b4 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4035ac:	4a31      	ldr	r2, [pc, #196]	; (403674 <SystemCoreClockUpdate+0x104>)
  4035ae:	4b30      	ldr	r3, [pc, #192]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035b0:	601a      	str	r2, [r3, #0]
  4035b2:	e042      	b.n	40363a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035b4:	4a30      	ldr	r2, [pc, #192]	; (403678 <SystemCoreClockUpdate+0x108>)
  4035b6:	4b2e      	ldr	r3, [pc, #184]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035b8:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4035ba:	4b2b      	ldr	r3, [pc, #172]	; (403668 <SystemCoreClockUpdate+0xf8>)
  4035bc:	6a1b      	ldr	r3, [r3, #32]
  4035be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035c2:	2b10      	cmp	r3, #16
  4035c4:	d002      	beq.n	4035cc <SystemCoreClockUpdate+0x5c>
  4035c6:	2b20      	cmp	r3, #32
  4035c8:	d004      	beq.n	4035d4 <SystemCoreClockUpdate+0x64>
  4035ca:	e036      	b.n	40363a <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4035cc:	4a2b      	ldr	r2, [pc, #172]	; (40367c <SystemCoreClockUpdate+0x10c>)
  4035ce:	4b28      	ldr	r3, [pc, #160]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035d0:	601a      	str	r2, [r3, #0]
          break;
  4035d2:	e032      	b.n	40363a <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4035d4:	4a27      	ldr	r2, [pc, #156]	; (403674 <SystemCoreClockUpdate+0x104>)
  4035d6:	4b26      	ldr	r3, [pc, #152]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035d8:	601a      	str	r2, [r3, #0]
          break;
  4035da:	e02e      	b.n	40363a <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4035dc:	4b22      	ldr	r3, [pc, #136]	; (403668 <SystemCoreClockUpdate+0xf8>)
  4035de:	6a1b      	ldr	r3, [r3, #32]
  4035e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4035e4:	d003      	beq.n	4035ee <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4035e6:	4a23      	ldr	r2, [pc, #140]	; (403674 <SystemCoreClockUpdate+0x104>)
  4035e8:	4b21      	ldr	r3, [pc, #132]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035ea:	601a      	str	r2, [r3, #0]
  4035ec:	e012      	b.n	403614 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035ee:	4a22      	ldr	r2, [pc, #136]	; (403678 <SystemCoreClockUpdate+0x108>)
  4035f0:	4b1f      	ldr	r3, [pc, #124]	; (403670 <SystemCoreClockUpdate+0x100>)
  4035f2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4035f4:	4b1c      	ldr	r3, [pc, #112]	; (403668 <SystemCoreClockUpdate+0xf8>)
  4035f6:	6a1b      	ldr	r3, [r3, #32]
  4035f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035fc:	2b10      	cmp	r3, #16
  4035fe:	d002      	beq.n	403606 <SystemCoreClockUpdate+0x96>
  403600:	2b20      	cmp	r3, #32
  403602:	d004      	beq.n	40360e <SystemCoreClockUpdate+0x9e>
  403604:	e006      	b.n	403614 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403606:	4a1d      	ldr	r2, [pc, #116]	; (40367c <SystemCoreClockUpdate+0x10c>)
  403608:	4b19      	ldr	r3, [pc, #100]	; (403670 <SystemCoreClockUpdate+0x100>)
  40360a:	601a      	str	r2, [r3, #0]
          break;
  40360c:	e002      	b.n	403614 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40360e:	4a19      	ldr	r2, [pc, #100]	; (403674 <SystemCoreClockUpdate+0x104>)
  403610:	4b17      	ldr	r3, [pc, #92]	; (403670 <SystemCoreClockUpdate+0x100>)
  403612:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403614:	4b14      	ldr	r3, [pc, #80]	; (403668 <SystemCoreClockUpdate+0xf8>)
  403616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403618:	f003 0303 	and.w	r3, r3, #3
  40361c:	2b02      	cmp	r3, #2
  40361e:	d10c      	bne.n	40363a <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403620:	4a11      	ldr	r2, [pc, #68]	; (403668 <SystemCoreClockUpdate+0xf8>)
  403622:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403624:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403626:	4812      	ldr	r0, [pc, #72]	; (403670 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403628:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40362c:	6803      	ldr	r3, [r0, #0]
  40362e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403632:	b2d2      	uxtb	r2, r2
  403634:	fbb3 f3f2 	udiv	r3, r3, r2
  403638:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40363a:	4b0b      	ldr	r3, [pc, #44]	; (403668 <SystemCoreClockUpdate+0xf8>)
  40363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40363e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403642:	2b70      	cmp	r3, #112	; 0x70
  403644:	d107      	bne.n	403656 <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  403646:	4a0a      	ldr	r2, [pc, #40]	; (403670 <SystemCoreClockUpdate+0x100>)
  403648:	6813      	ldr	r3, [r2, #0]
  40364a:	490d      	ldr	r1, [pc, #52]	; (403680 <SystemCoreClockUpdate+0x110>)
  40364c:	fba1 1303 	umull	r1, r3, r1, r3
  403650:	085b      	lsrs	r3, r3, #1
  403652:	6013      	str	r3, [r2, #0]
  403654:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403656:	4b04      	ldr	r3, [pc, #16]	; (403668 <SystemCoreClockUpdate+0xf8>)
  403658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40365a:	4905      	ldr	r1, [pc, #20]	; (403670 <SystemCoreClockUpdate+0x100>)
  40365c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403660:	680b      	ldr	r3, [r1, #0]
  403662:	40d3      	lsrs	r3, r2
  403664:	600b      	str	r3, [r1, #0]
  403666:	4770      	bx	lr
  403668:	400e0600 	.word	0x400e0600
  40366c:	400e1810 	.word	0x400e1810
  403670:	20400014 	.word	0x20400014
  403674:	00b71b00 	.word	0x00b71b00
  403678:	003d0900 	.word	0x003d0900
  40367c:	007a1200 	.word	0x007a1200
  403680:	aaaaaaab 	.word	0xaaaaaaab

00403684 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403684:	4b14      	ldr	r3, [pc, #80]	; (4036d8 <system_init_flash+0x54>)
  403686:	4298      	cmp	r0, r3
  403688:	d804      	bhi.n	403694 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40368a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40368e:	4b13      	ldr	r3, [pc, #76]	; (4036dc <system_init_flash+0x58>)
  403690:	601a      	str	r2, [r3, #0]
  403692:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403694:	4b12      	ldr	r3, [pc, #72]	; (4036e0 <system_init_flash+0x5c>)
  403696:	4298      	cmp	r0, r3
  403698:	d803      	bhi.n	4036a2 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40369a:	4a12      	ldr	r2, [pc, #72]	; (4036e4 <system_init_flash+0x60>)
  40369c:	4b0f      	ldr	r3, [pc, #60]	; (4036dc <system_init_flash+0x58>)
  40369e:	601a      	str	r2, [r3, #0]
  4036a0:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4036a2:	4b11      	ldr	r3, [pc, #68]	; (4036e8 <system_init_flash+0x64>)
  4036a4:	4298      	cmp	r0, r3
  4036a6:	d803      	bhi.n	4036b0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4036a8:	4a10      	ldr	r2, [pc, #64]	; (4036ec <system_init_flash+0x68>)
  4036aa:	4b0c      	ldr	r3, [pc, #48]	; (4036dc <system_init_flash+0x58>)
  4036ac:	601a      	str	r2, [r3, #0]
  4036ae:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4036b0:	4b0f      	ldr	r3, [pc, #60]	; (4036f0 <system_init_flash+0x6c>)
  4036b2:	4298      	cmp	r0, r3
  4036b4:	d803      	bhi.n	4036be <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4036b6:	4a0f      	ldr	r2, [pc, #60]	; (4036f4 <system_init_flash+0x70>)
  4036b8:	4b08      	ldr	r3, [pc, #32]	; (4036dc <system_init_flash+0x58>)
  4036ba:	601a      	str	r2, [r3, #0]
  4036bc:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4036be:	4b0e      	ldr	r3, [pc, #56]	; (4036f8 <system_init_flash+0x74>)
  4036c0:	4298      	cmp	r0, r3
  4036c2:	d804      	bhi.n	4036ce <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4036c4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4036c8:	4b04      	ldr	r3, [pc, #16]	; (4036dc <system_init_flash+0x58>)
  4036ca:	601a      	str	r2, [r3, #0]
  4036cc:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4036ce:	4a0b      	ldr	r2, [pc, #44]	; (4036fc <system_init_flash+0x78>)
  4036d0:	4b02      	ldr	r3, [pc, #8]	; (4036dc <system_init_flash+0x58>)
  4036d2:	601a      	str	r2, [r3, #0]
  4036d4:	4770      	bx	lr
  4036d6:	bf00      	nop
  4036d8:	01312cff 	.word	0x01312cff
  4036dc:	400e0c00 	.word	0x400e0c00
  4036e0:	026259ff 	.word	0x026259ff
  4036e4:	04000100 	.word	0x04000100
  4036e8:	039386ff 	.word	0x039386ff
  4036ec:	04000200 	.word	0x04000200
  4036f0:	04c4b3ff 	.word	0x04c4b3ff
  4036f4:	04000300 	.word	0x04000300
  4036f8:	05f5e0ff 	.word	0x05f5e0ff
  4036fc:	04000500 	.word	0x04000500

00403700 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403700:	4b09      	ldr	r3, [pc, #36]	; (403728 <_sbrk+0x28>)
  403702:	681b      	ldr	r3, [r3, #0]
  403704:	b913      	cbnz	r3, 40370c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403706:	4a09      	ldr	r2, [pc, #36]	; (40372c <_sbrk+0x2c>)
  403708:	4b07      	ldr	r3, [pc, #28]	; (403728 <_sbrk+0x28>)
  40370a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40370c:	4b06      	ldr	r3, [pc, #24]	; (403728 <_sbrk+0x28>)
  40370e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403710:	181a      	adds	r2, r3, r0
  403712:	4907      	ldr	r1, [pc, #28]	; (403730 <_sbrk+0x30>)
  403714:	4291      	cmp	r1, r2
  403716:	db04      	blt.n	403722 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403718:	4610      	mov	r0, r2
  40371a:	4a03      	ldr	r2, [pc, #12]	; (403728 <_sbrk+0x28>)
  40371c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40371e:	4618      	mov	r0, r3
  403720:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403722:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403726:	4770      	bx	lr
  403728:	2040c4b4 	.word	0x2040c4b4
  40372c:	2040f0c8 	.word	0x2040f0c8
  403730:	2045fffc 	.word	0x2045fffc

00403734 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403734:	f04f 30ff 	mov.w	r0, #4294967295
  403738:	4770      	bx	lr
  40373a:	bf00      	nop

0040373c <_write>:

extern int _write(int file)
{
	return -1;
}
  40373c:	f04f 30ff 	mov.w	r0, #4294967295
  403740:	4770      	bx	lr
  403742:	bf00      	nop

00403744 <_read>:

extern int _read(int file)
{
	return -1;
}
  403744:	f04f 30ff 	mov.w	r0, #4294967295
  403748:	4770      	bx	lr
  40374a:	bf00      	nop

0040374c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40374c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403750:	604b      	str	r3, [r1, #4]

	return 0;
}
  403752:	2000      	movs	r0, #0
  403754:	4770      	bx	lr
  403756:	bf00      	nop

00403758 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403758:	2001      	movs	r0, #1
  40375a:	4770      	bx	lr

0040375c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40375c:	2000      	movs	r0, #0
  40375e:	4770      	bx	lr

00403760 <_exit>:

extern void _exit(int status)
{
  403760:	b508      	push	{r3, lr}
  403762:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  403764:	4801      	ldr	r0, [pc, #4]	; (40376c <_exit+0xc>)
  403766:	4b02      	ldr	r3, [pc, #8]	; (403770 <_exit+0x10>)
  403768:	4798      	blx	r3

	for (;;);
  40376a:	e7fe      	b.n	40376a <_exit+0xa>
  40376c:	0041343c 	.word	0x0041343c
  403770:	0040b3e9 	.word	0x0040b3e9

00403774 <_kill>:
}

extern void _kill(int pid, int sig)
{
  403774:	4770      	bx	lr
  403776:	bf00      	nop

00403778 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  403778:	f04f 30ff 	mov.w	r0, #4294967295
  40377c:	4770      	bx	lr
  40377e:	bf00      	nop

00403780 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  403780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403784:	b087      	sub	sp, #28
  403786:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  403788:	f103 0e07 	add.w	lr, r3, #7
  40378c:	f02e 0e07 	bic.w	lr, lr, #7
  403790:	ebad 0d0e 	sub.w	sp, sp, lr
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
  403794:	2b08      	cmp	r3, #8
  403796:	dc41      	bgt.n	40381c <DW1000_readReg+0x9c>
  403798:	466e      	mov	r6, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  40379a:	b919      	cbnz	r1, 4037a4 <DW1000_readReg+0x24>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  40379c:	60f8      	str	r0, [r7, #12]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  40379e:	f04f 0b01 	mov.w	fp, #1
  4037a2:	e03e      	b.n	403822 <DW1000_readReg+0xa2>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  4037a4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  4037a8:	60f8      	str	r0, [r7, #12]
    	if (offset < 128) {							// Check if extended sub-index is needed
  4037aa:	2a7f      	cmp	r2, #127	; 0x7f
  4037ac:	d803      	bhi.n	4037b6 <DW1000_readReg+0x36>
    		header[1] = offset;						
  4037ae:	613a      	str	r2, [r7, #16]
    		headerLen = 2;
  4037b0:	f04f 0b02 	mov.w	fp, #2
  4037b4:	e035      	b.n	403822 <DW1000_readReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  4037b6:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  4037ba:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4037be:	6139      	str	r1, [r7, #16]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  4037c0:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  4037c4:	617a      	str	r2, [r7, #20]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  4037c6:	f04f 0b03 	mov.w	fp, #3
  4037ca:	e02a      	b.n	403822 <DW1000_readReg+0xa2>
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  4037cc:	481b      	ldr	r0, [pc, #108]	; (40383c <DW1000_readReg+0xbc>)
  4037ce:	4649      	mov	r1, r9
  4037d0:	2201      	movs	r2, #1
  4037d2:	47b0      	blx	r6
  4037d4:	f108 0801 	add.w	r8, r8, #1
  4037d8:	f109 0904 	add.w	r9, r9, #4
  4037dc:	45c3      	cmp	fp, r8
  4037de:	dcf5      	bgt.n	4037cc <DW1000_readReg+0x4c>
	qspi_read(QSPI,data,n);
  4037e0:	4816      	ldr	r0, [pc, #88]	; (40383c <DW1000_readReg+0xbc>)
  4037e2:	687e      	ldr	r6, [r7, #4]
  4037e4:	4631      	mov	r1, r6
  4037e6:	4652      	mov	r2, sl
  4037e8:	4b15      	ldr	r3, [pc, #84]	; (403840 <DW1000_readReg+0xc0>)
  4037ea:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  4037ec:	f1ba 0f01 	cmp.w	sl, #1
  4037f0:	d40f      	bmi.n	403812 <DW1000_readReg+0x92>
  4037f2:	4631      	mov	r1, r6
  4037f4:	4456      	add	r6, sl
  4037f6:	2200      	movs	r2, #0
  4037f8:	2300      	movs	r3, #0
		result = (result << 8) | data[i];
  4037fa:	021d      	lsls	r5, r3, #8
  4037fc:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
  403800:	0214      	lsls	r4, r2, #8
  403802:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
  403806:	2300      	movs	r3, #0
  403808:	4322      	orrs	r2, r4
  40380a:	432b      	orrs	r3, r5
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  40380c:	428e      	cmp	r6, r1
  40380e:	d1f4      	bne.n	4037fa <DW1000_readReg+0x7a>
  403810:	e001      	b.n	403816 <DW1000_readReg+0x96>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  403812:	2200      	movs	r2, #0
  403814:	2300      	movs	r3, #0
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}
	return result;
  403816:	4610      	mov	r0, r2
  403818:	4619      	mov	r1, r3
  40381a:	e00a      	b.n	403832 <DW1000_readReg+0xb2>
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  40381c:	2000      	movs	r0, #0
  40381e:	4601      	mov	r1, r0
  403820:	e007      	b.n	403832 <DW1000_readReg+0xb2>
  403822:	607e      	str	r6, [r7, #4]
  403824:	469a      	mov	sl, r3
  403826:	f107 090c 	add.w	r9, r7, #12
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  40382a:	f04f 0800 	mov.w	r8, #0
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  40382e:	4e05      	ldr	r6, [pc, #20]	; (403844 <DW1000_readReg+0xc4>)
  403830:	e7cc      	b.n	4037cc <DW1000_readReg+0x4c>
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}
	return result;
}
  403832:	371c      	adds	r7, #28
  403834:	46bd      	mov	sp, r7
  403836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40383a:	bf00      	nop
  40383c:	4007c000 	.word	0x4007c000
  403840:	00400795 	.word	0x00400795
  403844:	00400885 	.word	0x00400885

00403848 <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  403848:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  40384a:	2000      	movs	r0, #0
  40384c:	4601      	mov	r1, r0
  40384e:	4602      	mov	r2, r0
  403850:	2304      	movs	r3, #4
  403852:	4c01      	ldr	r4, [pc, #4]	; (403858 <DW1000_readDeviceIdentifier+0x10>)
  403854:	47a0      	blx	r4
	return result;
}
  403856:	bd10      	pop	{r4, pc}
  403858:	00403781 	.word	0x00403781

0040385c <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  40385c:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  40385e:	200f      	movs	r0, #15
  403860:	2100      	movs	r1, #0
  403862:	460a      	mov	r2, r1
  403864:	2305      	movs	r3, #5
  403866:	4c03      	ldr	r4, [pc, #12]	; (403874 <DW1000_readSystemStatus+0x18>)
  403868:	47a0      	blx	r4
  40386a:	4b03      	ldr	r3, [pc, #12]	; (403878 <DW1000_readSystemStatus+0x1c>)
  40386c:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  40386e:	17c1      	asrs	r1, r0, #31
  403870:	bd10      	pop	{r4, pc}
  403872:	bf00      	nop
  403874:	00403781 	.word	0x00403781
  403878:	2040c5e4 	.word	0x2040c5e4

0040387c <DW1000_readRxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
}

uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
  40387c:	b510      	push	{r4, lr}
  40387e:	4602      	mov	r2, r0
  403880:	460b      	mov	r3, r1
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
  403882:	2011      	movs	r0, #17
  403884:	2100      	movs	r1, #0
  403886:	4c01      	ldr	r4, [pc, #4]	; (40388c <DW1000_readRxBuffer+0x10>)
  403888:	47a0      	blx	r4
	return rxBuffer;
}
  40388a:	bd10      	pop	{r4, pc}
  40388c:	00403781 	.word	0x00403781

00403890 <DW1000_writeReg>:
		result = (result << 8) | data[i];
	}
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  403890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403894:	b087      	sub	sp, #28
  403896:	af00      	add	r7, sp, #0
  403898:	60f8      	str	r0, [r7, #12]
  40389a:	60b9      	str	r1, [r7, #8]
  40389c:	4615      	mov	r5, r2
  40389e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  4038a2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
  4038a4:	1de3      	adds	r3, r4, #7
  4038a6:	f023 0307 	bic.w	r3, r3, #7
  4038aa:	ebad 0d03 	sub.w	sp, sp, r3
  4038ae:	f8c7 d004 	str.w	sp, [r7, #4]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  4038b2:	2c00      	cmp	r4, #0
  4038b4:	dd25      	ble.n	403902 <DW1000_writeReg+0x72>
  4038b6:	eb0d 0b04 	add.w	fp, sp, r4
  4038ba:	2600      	movs	r6, #0
  4038bc:	22ff      	movs	r2, #255	; 0xff
  4038be:	2300      	movs	r3, #0
  4038c0:	46ee      	mov	lr, sp
  4038c2:	46dc      	mov	ip, fp
  4038c4:	46c2      	mov	sl, r8
  4038c6:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  4038c8:	ea02 080a 	and.w	r8, r2, sl
  4038cc:	ea03 090b 	and.w	r9, r3, fp
  4038d0:	f1c6 0020 	rsb	r0, r6, #32
  4038d4:	f1a6 0120 	sub.w	r1, r6, #32
  4038d8:	fa28 f806 	lsr.w	r8, r8, r6
  4038dc:	fa09 f000 	lsl.w	r0, r9, r0
  4038e0:	ea48 0800 	orr.w	r8, r8, r0
  4038e4:	fa29 f101 	lsr.w	r1, r9, r1
  4038e8:	ea48 0801 	orr.w	r8, r8, r1
  4038ec:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  4038f0:	0219      	lsls	r1, r3, #8
  4038f2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
  4038f6:	0210      	lsls	r0, r2, #8
  4038f8:	4602      	mov	r2, r0
  4038fa:	460b      	mov	r3, r1
  4038fc:	3608      	adds	r6, #8
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  4038fe:	45e6      	cmp	lr, ip
  403900:	d1e2      	bne.n	4038c8 <DW1000_writeReg+0x38>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  403902:	68bb      	ldr	r3, [r7, #8]
  403904:	b92b      	cbnz	r3, 403912 <DW1000_writeReg+0x82>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  403906:	68fb      	ldr	r3, [r7, #12]
  403908:	f063 007f 	orn	r0, r3, #127	; 0x7f
  40390c:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  40390e:	2201      	movs	r2, #1
  403910:	e00f      	b.n	403932 <DW1000_writeReg+0xa2>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  403912:	68fb      	ldr	r3, [r7, #12]
  403914:	f063 003f 	orn	r0, r3, #63	; 0x3f
  403918:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  40391a:	2d7f      	cmp	r5, #127	; 0x7f
  40391c:	d802      	bhi.n	403924 <DW1000_writeReg+0x94>
    		header[1] = offset;						
  40391e:	757d      	strb	r5, [r7, #21]
    		headerLen = 2;
  403920:	2202      	movs	r2, #2
  403922:	e006      	b.n	403932 <DW1000_writeReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  403924:	f065 037f 	orn	r3, r5, #127	; 0x7f
  403928:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  40392a:	f3c5 12c7 	ubfx	r2, r5, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  40392e:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  403930:	2203      	movs	r2, #3
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
  403932:	4916      	ldr	r1, [pc, #88]	; (40398c <DW1000_writeReg+0xfc>)
  403934:	690b      	ldr	r3, [r1, #16]
  403936:	f013 0f04 	tst.w	r3, #4
  40393a:	d0fb      	beq.n	403934 <DW1000_writeReg+0xa4>
	for(int i = 0;i<headerLen;i++){
  40393c:	b17a      	cbz	r2, 40395e <DW1000_writeReg+0xce>
  40393e:	f107 0614 	add.w	r6, r7, #20
  403942:	eb06 0802 	add.w	r8, r6, r2
		 qspi_write(QSPI,header+i,1);
  403946:	f8df b044 	ldr.w	fp, [pc, #68]	; 40398c <DW1000_writeReg+0xfc>
  40394a:	f04f 0a01 	mov.w	sl, #1
  40394e:	4d10      	ldr	r5, [pc, #64]	; (403990 <DW1000_writeReg+0x100>)
  403950:	4658      	mov	r0, fp
  403952:	4631      	mov	r1, r6
  403954:	4652      	mov	r2, sl
  403956:	47a8      	blx	r5
  403958:	3601      	adds	r6, #1
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
  40395a:	4546      	cmp	r6, r8
  40395c:	d1f8      	bne.n	403950 <DW1000_writeReg+0xc0>
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  40395e:	2c00      	cmp	r4, #0
  403960:	dd0f      	ble.n	403982 <DW1000_writeReg+0xf2>
  403962:	687b      	ldr	r3, [r7, #4]
  403964:	461e      	mov	r6, r3
  403966:	4423      	add	r3, r4
  403968:	461c      	mov	r4, r3
	{
		 qspi_write(QSPI,data+i,1);
  40396a:	f8df 9020 	ldr.w	r9, [pc, #32]	; 40398c <DW1000_writeReg+0xfc>
  40396e:	f04f 0801 	mov.w	r8, #1
  403972:	4d07      	ldr	r5, [pc, #28]	; (403990 <DW1000_writeReg+0x100>)
  403974:	4648      	mov	r0, r9
  403976:	4631      	mov	r1, r6
  403978:	4642      	mov	r2, r8
  40397a:	47a8      	blx	r5
  40397c:	3601      	adds	r6, #1
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  40397e:	42a6      	cmp	r6, r4
  403980:	d1f8      	bne.n	403974 <DW1000_writeReg+0xe4>
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  403982:	371c      	adds	r7, #28
  403984:	46bd      	mov	sp, r7
  403986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40398a:	bf00      	nop
  40398c:	4007c000 	.word	0x4007c000
  403990:	00400885 	.word	0x00400885
  403994:	00000000 	.word	0x00000000

00403998 <DW1000_initialise>:
 * Preamble code:		5
 * Preamble length:		2048 (changed from 128)
 * PAC size:			64 (changed from 8)
 * SFD length:			64 (changed from 8 (standard))
 */
void DW1000_initialise() {
  403998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40399c:	b085      	sub	sp, #20
	//delay(5);
	//digitalWrite(DW1000__rst, HIGH);
	//delay(5);

	// Channel, preamble, bitrate selection
	 DW1000_writeReg(CHAN_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x08440011, CHAN_CTRL_LEN);
  40399e:	a379      	add	r3, pc, #484	; (adr r3, 403b84 <DW1000_initialise+0x1ec>)
  4039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039a4:	e9cd 2300 	strd	r2, r3, [sp]
  4039a8:	2604      	movs	r6, #4
  4039aa:	9602      	str	r6, [sp, #8]
  4039ac:	201f      	movs	r0, #31
  4039ae:	2100      	movs	r1, #0
  4039b0:	460a      	mov	r2, r1
  4039b2:	4c6f      	ldr	r4, [pc, #444]	; (403b70 <DW1000_initialise+0x1d8>)
  4039b4:	47a0      	blx	r4
	 //DW1000_writeReg(TX_FCTRL_ID, NO_SUB, NO_OFFSET, 0x0015400C, TX_FCTRL_LEN);
	 DW1000_writeReg(ACK_RESP_T_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00000000, ACK_RESP_T_LEN); // changed
  4039b6:	f04f 0800 	mov.w	r8, #0
  4039ba:	f04f 0900 	mov.w	r9, #0
  4039be:	e9cd 8900 	strd	r8, r9, [sp]
  4039c2:	9602      	str	r6, [sp, #8]
  4039c4:	201a      	movs	r0, #26
  4039c6:	2100      	movs	r1, #0
  4039c8:	460a      	mov	r2, r1
  4039ca:	47a0      	blx	r4
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00441200, SYS_CFG_LEN); // changed
  4039cc:	4a69      	ldr	r2, [pc, #420]	; (403b74 <DW1000_initialise+0x1dc>)
  4039ce:	2300      	movs	r3, #0
  4039d0:	e9cd 2300 	strd	r2, r3, [sp]
  4039d4:	9602      	str	r6, [sp, #8]
  4039d6:	4630      	mov	r0, r6
  4039d8:	2100      	movs	r1, #0
  4039da:	460a      	mov	r2, r1
  4039dc:	47a0      	blx	r4
	 DW1000_writeReg(TX_POWER_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x75757575, TX_POWER_LEN);
  4039de:	f04f 3275 	mov.w	r2, #1970632053	; 0x75757575
  4039e2:	2300      	movs	r3, #0
  4039e4:	e9cd 2300 	strd	r2, r3, [sp]
  4039e8:	9602      	str	r6, [sp, #8]
  4039ea:	201e      	movs	r0, #30
  4039ec:	2100      	movs	r1, #0
  4039ee:	460a      	mov	r2, r1
  4039f0:	47a0      	blx	r4

	// Default values that should be modified
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE1_OFFSET, (AGC_TUNE1_16M & AGC_TUNE1_MASK), AGC_TUNE1_LEN);
  4039f2:	f648 0270 	movw	r2, #34928	; 0x8870
  4039f6:	2300      	movs	r3, #0
  4039f8:	e9cd 2300 	strd	r2, r3, [sp]
  4039fc:	2702      	movs	r7, #2
  4039fe:	9702      	str	r7, [sp, #8]
  403a00:	2023      	movs	r0, #35	; 0x23
  403a02:	2101      	movs	r1, #1
  403a04:	4632      	mov	r2, r6
  403a06:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE2_OFFSET, (AGC_TUNE2_VAL & AGC_TUNE2_MASK), AGC_TUNE2_LEN);
  403a08:	a353      	add	r3, pc, #332	; (adr r3, 403b58 <DW1000_initialise+0x1c0>)
  403a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a0e:	e9cd 2300 	strd	r2, r3, [sp]
  403a12:	9602      	str	r6, [sp, #8]
  403a14:	2023      	movs	r0, #35	; 0x23
  403a16:	2101      	movs	r1, #1
  403a18:	220c      	movs	r2, #12
  403a1a:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE3_OFFSET, (AGC_TUNE3_VAL & AGC_TUNE3_MASK), AGC_TUNE3_LEN);
  403a1c:	2255      	movs	r2, #85	; 0x55
  403a1e:	2300      	movs	r3, #0
  403a20:	e9cd 2300 	strd	r2, r3, [sp]
  403a24:	9702      	str	r7, [sp, #8]
  403a26:	2023      	movs	r0, #35	; 0x23
  403a28:	2101      	movs	r1, #1
  403a2a:	2212      	movs	r2, #18
  403a2c:	47a0      	blx	r4

	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE0b_OFFSET, 0x0016, DRX_TUNE0b_LEN); // changed
  403a2e:	2216      	movs	r2, #22
  403a30:	2300      	movs	r3, #0
  403a32:	e9cd 2300 	strd	r2, r3, [sp]
  403a36:	9702      	str	r7, [sp, #8]
  403a38:	2027      	movs	r0, #39	; 0x27
  403a3a:	2101      	movs	r1, #1
  403a3c:	463a      	mov	r2, r7
  403a3e:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1a_OFFSET, 0x0087, DRX_TUNE1a_LEN);
  403a40:	2287      	movs	r2, #135	; 0x87
  403a42:	2300      	movs	r3, #0
  403a44:	e9cd 2300 	strd	r2, r3, [sp]
  403a48:	9702      	str	r7, [sp, #8]
  403a4a:	2027      	movs	r0, #39	; 0x27
  403a4c:	2101      	movs	r1, #1
  403a4e:	4632      	mov	r2, r6
  403a50:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1b_OFFSET, 0x0064, DRX_TUNE1b_LEN); // changed
  403a52:	2264      	movs	r2, #100	; 0x64
  403a54:	2300      	movs	r3, #0
  403a56:	e9cd 2300 	strd	r2, r3, [sp]
  403a5a:	9702      	str	r7, [sp, #8]
  403a5c:	2027      	movs	r0, #39	; 0x27
  403a5e:	2101      	movs	r1, #1
  403a60:	2206      	movs	r2, #6
  403a62:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE2_OFFSET, 0x371A011D, DRX_TUNE2_LEN); // changed
  403a64:	a33e      	add	r3, pc, #248	; (adr r3, 403b60 <DW1000_initialise+0x1c8>)
  403a66:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a6a:	e9cd 2300 	strd	r2, r3, [sp]
  403a6e:	9602      	str	r6, [sp, #8]
  403a70:	2027      	movs	r0, #39	; 0x27
  403a72:	2101      	movs	r1, #1
  403a74:	2208      	movs	r2, #8
  403a76:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE4H_OFFSET, 0x0028, DRX_TUNE4H_LEN); // changed
  403a78:	2228      	movs	r2, #40	; 0x28
  403a7a:	2300      	movs	r3, #0
  403a7c:	e9cd 2300 	strd	r2, r3, [sp]
  403a80:	9702      	str	r7, [sp, #8]
  403a82:	2027      	movs	r0, #39	; 0x27
  403a84:	2101      	movs	r1, #1
  403a86:	2226      	movs	r2, #38	; 0x26
  403a88:	47a0      	blx	r4

	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_RXCTRLH_OFFSET, 0xD8, 1);
  403a8a:	22d8      	movs	r2, #216	; 0xd8
  403a8c:	2300      	movs	r3, #0
  403a8e:	e9cd 2300 	strd	r2, r3, [sp]
  403a92:	2501      	movs	r5, #1
  403a94:	9502      	str	r5, [sp, #8]
  403a96:	2028      	movs	r0, #40	; 0x28
  403a98:	4629      	mov	r1, r5
  403a9a:	220b      	movs	r2, #11
  403a9c:	47a0      	blx	r4
	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_TXCTRL_OFFSET, RF_TXCTRL_CH3, RF_TXCTRL_LEN);
  403a9e:	4a36      	ldr	r2, [pc, #216]	; (403b78 <DW1000_initialise+0x1e0>)
  403aa0:	2300      	movs	r3, #0
  403aa2:	e9cd 2300 	strd	r2, r3, [sp]
  403aa6:	9602      	str	r6, [sp, #8]
  403aa8:	2028      	movs	r0, #40	; 0x28
  403aaa:	4629      	mov	r1, r5
  403aac:	220c      	movs	r2, #12
  403aae:	47a0      	blx	r4

	 DW1000_writeReg(TX_CAL_ID, DW1000_SUB, TC_PGDELAY_OFFSET, TC_PGDELAY_CH3, TC_PGDELAY_LEN);
  403ab0:	22c5      	movs	r2, #197	; 0xc5
  403ab2:	2300      	movs	r3, #0
  403ab4:	e9cd 2300 	strd	r2, r3, [sp]
  403ab8:	9502      	str	r5, [sp, #8]
  403aba:	202a      	movs	r0, #42	; 0x2a
  403abc:	4629      	mov	r1, r5
  403abe:	220b      	movs	r2, #11
  403ac0:	47a0      	blx	r4

	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLCFG_OFFSET, FS_PLLCFG_CH3, FS_PLLCFG_LEN);
  403ac2:	a329      	add	r3, pc, #164	; (adr r3, 403b68 <DW1000_initialise+0x1d0>)
  403ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ac8:	e9cd 2300 	strd	r2, r3, [sp]
  403acc:	2305      	movs	r3, #5
  403ace:	9302      	str	r3, [sp, #8]
  403ad0:	202b      	movs	r0, #43	; 0x2b
  403ad2:	4629      	mov	r1, r5
  403ad4:	2207      	movs	r2, #7
  403ad6:	47a0      	blx	r4
	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLTUNE_OFFSET, FS_PLLTUNE_CH3, FS_PLLTUNE_LEN);
  403ad8:	225e      	movs	r2, #94	; 0x5e
  403ada:	2300      	movs	r3, #0
  403adc:	e9cd 2300 	strd	r2, r3, [sp]
  403ae0:	9502      	str	r5, [sp, #8]
  403ae2:	202b      	movs	r0, #43	; 0x2b
  403ae4:	4629      	mov	r1, r5
  403ae6:	220b      	movs	r2, #11
  403ae8:	47a0      	blx	r4

	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG1_OFFSET, 0x6D, LDE_CFG1_LEN);
  403aea:	226d      	movs	r2, #109	; 0x6d
  403aec:	2300      	movs	r3, #0
  403aee:	e9cd 2300 	strd	r2, r3, [sp]
  403af2:	9502      	str	r5, [sp, #8]
  403af4:	202e      	movs	r0, #46	; 0x2e
  403af6:	4629      	mov	r1, r5
  403af8:	f640 0206 	movw	r2, #2054	; 0x806
  403afc:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG2_OFFSET, 0x1607, LDE_CFG2_LEN);
  403afe:	f241 6207 	movw	r2, #5639	; 0x1607
  403b02:	2300      	movs	r3, #0
  403b04:	e9cd 2300 	strd	r2, r3, [sp]
  403b08:	9702      	str	r7, [sp, #8]
  403b0a:	202e      	movs	r0, #46	; 0x2e
  403b0c:	4629      	mov	r1, r5
  403b0e:	f641 0206 	movw	r2, #6150	; 0x1806
  403b12:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_REPC_OFFSET, (0x451E/8), LDE_REPC_LEN); // changed
  403b14:	f640 02a3 	movw	r2, #2211	; 0x8a3
  403b18:	2300      	movs	r3, #0
  403b1a:	e9cd 2300 	strd	r2, r3, [sp]
  403b1e:	9702      	str	r7, [sp, #8]
  403b20:	202e      	movs	r0, #46	; 0x2e
  403b22:	4629      	mov	r1, r5
  403b24:	f642 0204 	movw	r2, #10244	; 0x2804
  403b28:	47a0      	blx	r4

	// Ensure CPLOCK and CPLL_LL flags are working correctly
	 DW1000_writeReg(EXT_SYNC_ID, DW1000_SUB, EC_CTRL_OFFSET, 0x4, EC_CTRL_LEN);
  403b2a:	2204      	movs	r2, #4
  403b2c:	2300      	movs	r3, #0
  403b2e:	e9cd 2300 	strd	r2, r3, [sp]
  403b32:	9602      	str	r6, [sp, #8]
  403b34:	2024      	movs	r0, #36	; 0x24
  403b36:	4629      	mov	r1, r5
  403b38:	2200      	movs	r2, #0
  403b3a:	47a0      	blx	r4

	// DW1000_writeReg(AON_ID, SUB, AON_WCFG_OFFSET, 0, AON_WCFG_LEN);

	// Load LDE microcode from ROM to RAM
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, 0x0000, 2);
  403b3c:	e9cd 8900 	strd	r8, r9, [sp]
  403b40:	9702      	str	r7, [sp, #8]
  403b42:	2036      	movs	r0, #54	; 0x36
  403b44:	4629      	mov	r1, r5
  403b46:	2200      	movs	r2, #0
  403b48:	47a0      	blx	r4
	 //DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, OTP_CTRL_LDELOAD, 2);
	 delay_ms(150);
  403b4a:	480c      	ldr	r0, [pc, #48]	; (403b7c <DW1000_initialise+0x1e4>)
  403b4c:	4b0c      	ldr	r3, [pc, #48]	; (403b80 <DW1000_initialise+0x1e8>)
  403b4e:	4798      	blx	r3
	// long temp = DW1000_readReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, PMSC_CTRL1_LEN);
	// DW1000_writeReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, (temp & 0xFFFDFFFF), PMSC_CTRL1_LEN);
	// DW1000_writeReg(OTP_IF_ID, SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	// delayMicroseconds(150);
	// DW1000_writeReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}
  403b50:	b005      	add	sp, #20
  403b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b56:	bf00      	nop
  403b58:	2502a907 	.word	0x2502a907
  403b5c:	00000000 	.word	0x00000000
  403b60:	371a011d 	.word	0x371a011d
  403b64:	00000000 	.word	0x00000000
  403b68:	08401009 	.word	0x08401009
  403b6c:	00000000 	.word	0x00000000
  403b70:	00403891 	.word	0x00403891
  403b74:	00441200 	.word	0x00441200
  403b78:	00086cc0 	.word	0x00086cc0
  403b7c:	0073c0b7 	.word	0x0073c0b7
  403b80:	20400001 	.word	0x20400001
  403b84:	08440011 	.word	0x08440011
  403b88:	00000000 	.word	0x00000000

00403b8c <DW1000_toggleGPIO_MODE>:

void DW1000_setSystemConfig(uint64_t buffer) {
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}

void DW1000_toggleGPIO_MODE() {
  403b8c:	b570      	push	{r4, r5, r6, lr}
  403b8e:	b084      	sub	sp, #16
    uint32_t led = 0;
    //read the gio_mode register so we collect any of the reserved bits, not necessary for this one its all 0's  
    led = DW1000_readReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, GPIO_MODE_LEN);
  403b90:	2026      	movs	r0, #38	; 0x26
  403b92:	2101      	movs	r1, #1
  403b94:	2200      	movs	r2, #0
  403b96:	2304      	movs	r3, #4
  403b98:	4e18      	ldr	r6, [pc, #96]	; (403bfc <DW1000_toggleGPIO_MODE+0x70>)
  403b9a:	47b0      	blx	r6
    //write to set up all the gpios as leds plus an extra 4 in the first 5, all the cool kids are doing it
    DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x5540, GPIO_MODE_LEN);
  403b9c:	f245 5240 	movw	r2, #21824	; 0x5540
  403ba0:	2300      	movs	r3, #0
  403ba2:	e9cd 2300 	strd	r2, r3, [sp]
  403ba6:	2404      	movs	r4, #4
  403ba8:	9402      	str	r4, [sp, #8]
  403baa:	2026      	movs	r0, #38	; 0x26
  403bac:	2101      	movs	r1, #1
  403bae:	2200      	movs	r2, #0
  403bb0:	4d13      	ldr	r5, [pc, #76]	; (403c00 <DW1000_toggleGPIO_MODE+0x74>)
  403bb2:	47a8      	blx	r5
   
    //read the ctrl0 register to get all those reserved bits
    led = DW1000_readReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, PMSC_CTRL0_LEN);
  403bb4:	2036      	movs	r0, #54	; 0x36
  403bb6:	2101      	movs	r1, #1
  403bb8:	2200      	movs	r2, #0
  403bba:	4623      	mov	r3, r4
  403bbc:	47b0      	blx	r6
    led |= (1<<18) | (1<<23); //activate those 2 weird clocks bro
  403bbe:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
    //and slam them in there
    DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, led, PMSC_CTRL0_LEN);
  403bc2:	2200      	movs	r2, #0
  403bc4:	9000      	str	r0, [sp, #0]
  403bc6:	9201      	str	r2, [sp, #4]
  403bc8:	9402      	str	r4, [sp, #8]
  403bca:	2036      	movs	r0, #54	; 0x36
  403bcc:	2101      	movs	r1, #1
  403bce:	47a8      	blx	r5
    led = PMSC_LEDC_BLNKEN | (1<<5);
   
    //this makes all the lights blink now
    led|= 0xf0000;
    //slam it in
    DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  403bd0:	4a0c      	ldr	r2, [pc, #48]	; (403c04 <DW1000_toggleGPIO_MODE+0x78>)
  403bd2:	2300      	movs	r3, #0
  403bd4:	e9cd 2300 	strd	r2, r3, [sp]
  403bd8:	9402      	str	r4, [sp, #8]
  403bda:	2036      	movs	r0, #54	; 0x36
  403bdc:	2101      	movs	r1, #1
  403bde:	2228      	movs	r2, #40	; 0x28
  403be0:	47a8      	blx	r5
   
    led &= ~0xf0000; //write the same thing without the blink now
    //and it should be ready to do stuff normally
    DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  403be2:	f44f 7290 	mov.w	r2, #288	; 0x120
  403be6:	2300      	movs	r3, #0
  403be8:	e9cd 2300 	strd	r2, r3, [sp]
  403bec:	9402      	str	r4, [sp, #8]
  403bee:	2036      	movs	r0, #54	; 0x36
  403bf0:	2101      	movs	r1, #1
  403bf2:	2228      	movs	r2, #40	; 0x28
  403bf4:	47a8      	blx	r5
   
   
}
  403bf6:	b004      	add	sp, #16
  403bf8:	bd70      	pop	{r4, r5, r6, pc}
  403bfa:	bf00      	nop
  403bfc:	00403781 	.word	0x00403781
  403c00:	00403891 	.word	0x00403891
  403c04:	000f0120 	.word	0x000f0120

00403c08 <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  403c08:	b500      	push	{lr}
  403c0a:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403c0c:	17c1      	asrs	r1, r0, #31
  403c0e:	e9cd 0100 	strd	r0, r1, [sp]
  403c12:	2305      	movs	r3, #5
  403c14:	9302      	str	r3, [sp, #8]
  403c16:	2008      	movs	r0, #8
  403c18:	2100      	movs	r1, #0
  403c1a:	460a      	mov	r2, r1
  403c1c:	4b02      	ldr	r3, [pc, #8]	; (403c28 <DW1000_setTxFrameControl+0x20>)
  403c1e:	4798      	blx	r3
}
  403c20:	b005      	add	sp, #20
  403c22:	f85d fb04 	ldr.w	pc, [sp], #4
  403c26:	bf00      	nop
  403c28:	00403891 	.word	0x00403891

00403c2c <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403c2c:	b510      	push	{r4, lr}
  403c2e:	b084      	sub	sp, #16
  403c30:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  403c32:	e9cd 2300 	strd	r2, r3, [sp]
  403c36:	9b06      	ldr	r3, [sp, #24]
  403c38:	9302      	str	r3, [sp, #8]
  403c3a:	2009      	movs	r0, #9
  403c3c:	2101      	movs	r1, #1
  403c3e:	4622      	mov	r2, r4
  403c40:	4b01      	ldr	r3, [pc, #4]	; (403c48 <DW1000_writeTxBuffer+0x1c>)
  403c42:	4798      	blx	r3
}
  403c44:	b004      	add	sp, #16
  403c46:	bd10      	pop	{r4, pc}
  403c48:	00403891 	.word	0x00403891

00403c4c <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  403c4c:	b500      	push	{lr}
  403c4e:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  403c50:	2202      	movs	r2, #2
  403c52:	2300      	movs	r3, #0
  403c54:	e9cd 2300 	strd	r2, r3, [sp]
  403c58:	2304      	movs	r3, #4
  403c5a:	9302      	str	r3, [sp, #8]
  403c5c:	200d      	movs	r0, #13
  403c5e:	2100      	movs	r1, #0
  403c60:	460a      	mov	r2, r1
  403c62:	4b02      	ldr	r3, [pc, #8]	; (403c6c <DW1000_startTx+0x20>)
  403c64:	4798      	blx	r3
}
  403c66:	b005      	add	sp, #20
  403c68:	f85d fb04 	ldr.w	pc, [sp], #4
  403c6c:	00403891 	.word	0x00403891

00403c70 <standUp>:
*  Author: to300
*/
#include "Gait.h"

//Stand up
void standUp( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  403c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c74:	ed2d 8b02 	vpush	{d8}
  403c78:	b085      	sub	sp, #20
  403c7a:	460d      	mov	r5, r1
  403c7c:	4614      	mov	r4, r2
  403c7e:	4698      	mov	r8, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403c80:	edd3 7a02 	vldr	s15, [r3, #8]
  403c84:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403c88:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 403fb0 <standUp+0x340>
  403c8c:	eeb0 0a41 	vmov.f32	s0, s2
  403c90:	eef0 0a48 	vmov.f32	s1, s16
  403c94:	eef0 1a48 	vmov.f32	s3, s16
  403c98:	eeb0 2a48 	vmov.f32	s4, s16
  403c9c:	2001      	movs	r0, #1
  403c9e:	eef0 2a48 	vmov.f32	s5, s16
  403ca2:	4ec4      	ldr	r6, [pc, #784]	; (403fb4 <standUp+0x344>)
  403ca4:	47b0      	blx	r6
  403ca6:	ed85 0a00 	vstr	s0, [r5]
  403caa:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403cae:	edd8 7a02 	vldr	s15, [r8, #8]
  403cb2:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403cb6:	eeb0 0a41 	vmov.f32	s0, s2
  403cba:	eef0 0a48 	vmov.f32	s1, s16
  403cbe:	eef0 1a48 	vmov.f32	s3, s16
  403cc2:	eeb0 2a48 	vmov.f32	s4, s16
  403cc6:	2000      	movs	r0, #0
  403cc8:	eef0 2a48 	vmov.f32	s5, s16
  403ccc:	47b0      	blx	r6
  403cce:	ed85 0a02 	vstr	s0, [r5, #8]
  403cd2:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403cd6:	edd8 7a02 	vldr	s15, [r8, #8]
  403cda:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403cde:	eeb0 0a41 	vmov.f32	s0, s2
  403ce2:	eef0 0a48 	vmov.f32	s1, s16
  403ce6:	eef0 1a48 	vmov.f32	s3, s16
  403cea:	eeb0 2a48 	vmov.f32	s4, s16
  403cee:	2001      	movs	r0, #1
  403cf0:	eef0 2a48 	vmov.f32	s5, s16
  403cf4:	47b0      	blx	r6
  403cf6:	ed85 0a04 	vstr	s0, [r5, #16]
  403cfa:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403cfe:	edd8 7a02 	vldr	s15, [r8, #8]
  403d02:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403d06:	eeb0 0a41 	vmov.f32	s0, s2
  403d0a:	eef0 0a48 	vmov.f32	s1, s16
  403d0e:	eef0 1a48 	vmov.f32	s3, s16
  403d12:	eeb0 2a48 	vmov.f32	s4, s16
  403d16:	2000      	movs	r0, #0
  403d18:	eef0 2a48 	vmov.f32	s5, s16
  403d1c:	47b0      	blx	r6
  403d1e:	ed85 0a06 	vstr	s0, [r5, #24]
  403d22:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403d26:	edd8 7a02 	vldr	s15, [r8, #8]
  403d2a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403d2e:	eeb0 0a41 	vmov.f32	s0, s2
  403d32:	eef0 0a48 	vmov.f32	s1, s16
  403d36:	eef0 1a48 	vmov.f32	s3, s16
  403d3a:	eeb0 2a48 	vmov.f32	s4, s16
  403d3e:	2001      	movs	r0, #1
  403d40:	eef0 2a48 	vmov.f32	s5, s16
  403d44:	47b0      	blx	r6
  403d46:	ed85 0a08 	vstr	s0, [r5, #32]
  403d4a:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403d4e:	edd8 7a02 	vldr	s15, [r8, #8]
  403d52:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403d56:	eeb0 0a41 	vmov.f32	s0, s2
  403d5a:	eef0 0a48 	vmov.f32	s1, s16
  403d5e:	eef0 1a48 	vmov.f32	s3, s16
  403d62:	eeb0 2a48 	vmov.f32	s4, s16
  403d66:	2000      	movs	r0, #0
  403d68:	eef0 2a48 	vmov.f32	s5, s16
  403d6c:	47b0      	blx	r6
  403d6e:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  403d72:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[0].Z);
  403d76:	9501      	str	r5, [sp, #4]
  403d78:	ed95 8a00 	vldr	s16, [r5]
  403d7c:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  403d80:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403d84:	f8df a248 	ldr.w	sl, [pc, #584]	; 403fd0 <standUp+0x360>
  403d88:	ebc0 000b 	rsb	r0, r0, fp
  403d8c:	47d0      	blx	sl
  403d8e:	4606      	mov	r6, r0
  403d90:	460f      	mov	r7, r1
  403d92:	f8df 9240 	ldr.w	r9, [pc, #576]	; 403fd4 <standUp+0x364>
  403d96:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403d9e:	ee17 0a90 	vmov	r0, s15
  403da2:	47c8      	blx	r9
  403da4:	2200      	movs	r2, #0
  403da6:	4b84      	ldr	r3, [pc, #528]	; (403fb8 <standUp+0x348>)
  403da8:	4d84      	ldr	r5, [pc, #528]	; (403fbc <standUp+0x34c>)
  403daa:	47a8      	blx	r5
  403dac:	4602      	mov	r2, r0
  403dae:	460b      	mov	r3, r1
  403db0:	4630      	mov	r0, r6
  403db2:	4639      	mov	r1, r7
  403db4:	4d82      	ldr	r5, [pc, #520]	; (403fc0 <standUp+0x350>)
  403db6:	47a8      	blx	r5
  403db8:	a37b      	add	r3, pc, #492	; (adr r3, 403fa8 <standUp+0x338>)
  403dba:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dbe:	4d81      	ldr	r5, [pc, #516]	; (403fc4 <standUp+0x354>)
  403dc0:	47a8      	blx	r5
  403dc2:	4f81      	ldr	r7, [pc, #516]	; (403fc8 <standUp+0x358>)
  403dc4:	47b8      	blx	r7
  403dc6:	eeb0 0a48 	vmov.f32	s0, s16
  403dca:	ee00 0a90 	vmov	s1, r0
  403dce:	9d01      	ldr	r5, [sp, #4]
  403dd0:	ed95 1a01 	vldr	s2, [r5, #4]
  403dd4:	4e7d      	ldr	r6, [pc, #500]	; (403fcc <standUp+0x35c>)
  403dd6:	47b0      	blx	r6
  403dd8:	ed84 0a00 	vstr	s0, [r4]
  403ddc:	edc4 0a01 	vstr	s1, [r4, #4]
  403de0:	ed84 1a02 	vstr	s2, [r4, #8]
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[1].Z);
  403de4:	9501      	str	r5, [sp, #4]
  403de6:	ed95 8a02 	vldr	s16, [r5, #8]
  403dea:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403dee:	ebc0 000b 	rsb	r0, r0, fp
  403df2:	47d0      	blx	sl
  403df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403df8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e00:	ee17 0a90 	vmov	r0, s15
  403e04:	47c8      	blx	r9
  403e06:	2200      	movs	r2, #0
  403e08:	4b6b      	ldr	r3, [pc, #428]	; (403fb8 <standUp+0x348>)
  403e0a:	4d6c      	ldr	r5, [pc, #432]	; (403fbc <standUp+0x34c>)
  403e0c:	47a8      	blx	r5
  403e0e:	4602      	mov	r2, r0
  403e10:	460b      	mov	r3, r1
  403e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e16:	4d6a      	ldr	r5, [pc, #424]	; (403fc0 <standUp+0x350>)
  403e18:	47a8      	blx	r5
  403e1a:	a363      	add	r3, pc, #396	; (adr r3, 403fa8 <standUp+0x338>)
  403e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e20:	4d68      	ldr	r5, [pc, #416]	; (403fc4 <standUp+0x354>)
  403e22:	47a8      	blx	r5
  403e24:	47b8      	blx	r7
  403e26:	eeb0 0a48 	vmov.f32	s0, s16
  403e2a:	ee00 0a90 	vmov	s1, r0
  403e2e:	9d01      	ldr	r5, [sp, #4]
  403e30:	ed95 1a03 	vldr	s2, [r5, #12]
  403e34:	47b0      	blx	r6
  403e36:	ed84 0a03 	vstr	s0, [r4, #12]
  403e3a:	edc4 0a04 	vstr	s1, [r4, #16]
  403e3e:	ed84 1a05 	vstr	s2, [r4, #20]
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[2].Z);
  403e42:	9501      	str	r5, [sp, #4]
  403e44:	ed95 8a04 	vldr	s16, [r5, #16]
  403e48:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403e4c:	ebc0 000b 	rsb	r0, r0, fp
  403e50:	47d0      	blx	sl
  403e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e56:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e5e:	ee17 0a90 	vmov	r0, s15
  403e62:	47c8      	blx	r9
  403e64:	2200      	movs	r2, #0
  403e66:	4b54      	ldr	r3, [pc, #336]	; (403fb8 <standUp+0x348>)
  403e68:	4d54      	ldr	r5, [pc, #336]	; (403fbc <standUp+0x34c>)
  403e6a:	47a8      	blx	r5
  403e6c:	4602      	mov	r2, r0
  403e6e:	460b      	mov	r3, r1
  403e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e74:	4d52      	ldr	r5, [pc, #328]	; (403fc0 <standUp+0x350>)
  403e76:	47a8      	blx	r5
  403e78:	a34b      	add	r3, pc, #300	; (adr r3, 403fa8 <standUp+0x338>)
  403e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e7e:	4d51      	ldr	r5, [pc, #324]	; (403fc4 <standUp+0x354>)
  403e80:	47a8      	blx	r5
  403e82:	47b8      	blx	r7
  403e84:	eeb0 0a48 	vmov.f32	s0, s16
  403e88:	ee00 0a90 	vmov	s1, r0
  403e8c:	9d01      	ldr	r5, [sp, #4]
  403e8e:	ed95 1a05 	vldr	s2, [r5, #20]
  403e92:	47b0      	blx	r6
  403e94:	ed84 0a06 	vstr	s0, [r4, #24]
  403e98:	edc4 0a07 	vstr	s1, [r4, #28]
  403e9c:	ed84 1a08 	vstr	s2, [r4, #32]
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[3].Z);
  403ea0:	9501      	str	r5, [sp, #4]
  403ea2:	ed95 8a06 	vldr	s16, [r5, #24]
  403ea6:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403eaa:	ebc0 000b 	rsb	r0, r0, fp
  403eae:	47d0      	blx	sl
  403eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403eb4:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403ebc:	ee17 0a90 	vmov	r0, s15
  403ec0:	47c8      	blx	r9
  403ec2:	2200      	movs	r2, #0
  403ec4:	4b3c      	ldr	r3, [pc, #240]	; (403fb8 <standUp+0x348>)
  403ec6:	4d3d      	ldr	r5, [pc, #244]	; (403fbc <standUp+0x34c>)
  403ec8:	47a8      	blx	r5
  403eca:	4602      	mov	r2, r0
  403ecc:	460b      	mov	r3, r1
  403ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ed2:	4d3b      	ldr	r5, [pc, #236]	; (403fc0 <standUp+0x350>)
  403ed4:	47a8      	blx	r5
  403ed6:	a334      	add	r3, pc, #208	; (adr r3, 403fa8 <standUp+0x338>)
  403ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403edc:	4d39      	ldr	r5, [pc, #228]	; (403fc4 <standUp+0x354>)
  403ede:	47a8      	blx	r5
  403ee0:	47b8      	blx	r7
  403ee2:	eeb0 0a48 	vmov.f32	s0, s16
  403ee6:	ee00 0a90 	vmov	s1, r0
  403eea:	9d01      	ldr	r5, [sp, #4]
  403eec:	ed95 1a07 	vldr	s2, [r5, #28]
  403ef0:	47b0      	blx	r6
  403ef2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  403ef6:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
  403efa:	ed84 1a0b 	vstr	s2, [r4, #44]	; 0x2c
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[4].Z);
  403efe:	9501      	str	r5, [sp, #4]
  403f00:	ed95 8a08 	vldr	s16, [r5, #32]
  403f04:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403f08:	ebc0 000b 	rsb	r0, r0, fp
  403f0c:	47d0      	blx	sl
  403f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403f12:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403f1a:	ee17 0a90 	vmov	r0, s15
  403f1e:	47c8      	blx	r9
  403f20:	2200      	movs	r2, #0
  403f22:	4b25      	ldr	r3, [pc, #148]	; (403fb8 <standUp+0x348>)
  403f24:	4d25      	ldr	r5, [pc, #148]	; (403fbc <standUp+0x34c>)
  403f26:	47a8      	blx	r5
  403f28:	4602      	mov	r2, r0
  403f2a:	460b      	mov	r3, r1
  403f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f30:	4d23      	ldr	r5, [pc, #140]	; (403fc0 <standUp+0x350>)
  403f32:	47a8      	blx	r5
  403f34:	a31c      	add	r3, pc, #112	; (adr r3, 403fa8 <standUp+0x338>)
  403f36:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f3a:	4d22      	ldr	r5, [pc, #136]	; (403fc4 <standUp+0x354>)
  403f3c:	47a8      	blx	r5
  403f3e:	47b8      	blx	r7
  403f40:	eeb0 0a48 	vmov.f32	s0, s16
  403f44:	ee00 0a90 	vmov	s1, r0
  403f48:	9d01      	ldr	r5, [sp, #4]
  403f4a:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  403f4e:	47b0      	blx	r6
  403f50:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  403f54:	edc4 0a0d 	vstr	s1, [r4, #52]	; 0x34
  403f58:	ed84 1a0e 	vstr	s2, [r4, #56]	; 0x38
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[5].Z);
  403f5c:	9501      	str	r5, [sp, #4]
  403f5e:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  403f62:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403f66:	ebc0 000b 	rsb	r0, r0, fp
  403f6a:	47d0      	blx	sl
  403f6c:	4682      	mov	sl, r0
  403f6e:	468b      	mov	fp, r1
  403f70:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  403f74:	ee07 0a90 	vmov	s15, r0
  403f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403f7c:	ee17 0a90 	vmov	r0, s15
  403f80:	47c8      	blx	r9
  403f82:	2200      	movs	r2, #0
  403f84:	4b0c      	ldr	r3, [pc, #48]	; (403fb8 <standUp+0x348>)
  403f86:	4d0d      	ldr	r5, [pc, #52]	; (403fbc <standUp+0x34c>)
  403f88:	47a8      	blx	r5
  403f8a:	4602      	mov	r2, r0
  403f8c:	460b      	mov	r3, r1
  403f8e:	4650      	mov	r0, sl
  403f90:	4659      	mov	r1, fp
  403f92:	4d0b      	ldr	r5, [pc, #44]	; (403fc0 <standUp+0x350>)
  403f94:	47a8      	blx	r5
  403f96:	a304      	add	r3, pc, #16	; (adr r3, 403fa8 <standUp+0x338>)
  403f98:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f9c:	4d09      	ldr	r5, [pc, #36]	; (403fc4 <standUp+0x354>)
  403f9e:	47a8      	blx	r5
  403fa0:	e01a      	b.n	403fd8 <standUp+0x368>
  403fa2:	bf00      	nop
  403fa4:	f3af 8000 	nop.w
  403fa8:	00000000 	.word	0x00000000
  403fac:	4052c000 	.word	0x4052c000
  403fb0:	00000000 	.word	0x00000000
  403fb4:	00405b41 	.word	0x00405b41
  403fb8:	40590000 	.word	0x40590000
  403fbc:	0040af49 	.word	0x0040af49
  403fc0:	0040acf5 	.word	0x0040acf5
  403fc4:	0040a991 	.word	0x0040a991
  403fc8:	0040b279 	.word	0x0040b279
  403fcc:	00405d89 	.word	0x00405d89
  403fd0:	0040ac29 	.word	0x0040ac29
  403fd4:	0040ac4d 	.word	0x0040ac4d
  403fd8:	47b8      	blx	r7
  403fda:	eeb0 0a48 	vmov.f32	s0, s16
  403fde:	ee00 0a90 	vmov	s1, r0
  403fe2:	9b01      	ldr	r3, [sp, #4]
  403fe4:	ed93 1a0b 	vldr	s2, [r3, #44]	; 0x2c
  403fe8:	47b0      	blx	r6
  403fea:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
  403fee:	edc4 0a10 	vstr	s1, [r4, #64]	; 0x40
  403ff2:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  403ff6:	2000      	movs	r0, #0
  403ff8:	ed94 0a00 	vldr	s0, [r4]
  403ffc:	edd4 0a01 	vldr	s1, [r4, #4]
  404000:	ed94 1a02 	vldr	s2, [r4, #8]
  404004:	4d17      	ldr	r5, [pc, #92]	; (404064 <standUp+0x3f4>)
  404006:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  404008:	2001      	movs	r0, #1
  40400a:	ed94 0a03 	vldr	s0, [r4, #12]
  40400e:	edd4 0a04 	vldr	s1, [r4, #16]
  404012:	ed94 1a05 	vldr	s2, [r4, #20]
  404016:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  404018:	2002      	movs	r0, #2
  40401a:	ed94 0a06 	vldr	s0, [r4, #24]
  40401e:	edd4 0a07 	vldr	s1, [r4, #28]
  404022:	ed94 1a08 	vldr	s2, [r4, #32]
  404026:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  404028:	2003      	movs	r0, #3
  40402a:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  40402e:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
  404032:	ed94 1a0b 	vldr	s2, [r4, #44]	; 0x2c
  404036:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  404038:	2004      	movs	r0, #4
  40403a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
  40403e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
  404042:	ed94 1a0e 	vldr	s2, [r4, #56]	; 0x38
  404046:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  404048:	2005      	movs	r0, #5
  40404a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
  40404e:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
  404052:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
  404056:	47a8      	blx	r5
}
  404058:	b005      	add	sp, #20
  40405a:	ecbd 8b02 	vpop	{d8}
  40405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404062:	bf00      	nop
  404064:	00405fb5 	.word	0x00405fb5

00404068 <sitDown>:

void sitDown( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40406c:	ed2d 8b02 	vpush	{d8}
  404070:	b083      	sub	sp, #12
  404072:	460d      	mov	r5, r1
  404074:	4614      	mov	r4, r2
  404076:	4698      	mov	r8, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  404078:	edd3 7a02 	vldr	s15, [r3, #8]
  40407c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404080:	ed9f 8ac7 	vldr	s16, [pc, #796]	; 4043a0 <sitDown+0x338>
  404084:	eeb0 0a41 	vmov.f32	s0, s2
  404088:	eef0 0a48 	vmov.f32	s1, s16
  40408c:	eef0 1a48 	vmov.f32	s3, s16
  404090:	eeb0 2a48 	vmov.f32	s4, s16
  404094:	2001      	movs	r0, #1
  404096:	eef0 2a48 	vmov.f32	s5, s16
  40409a:	4ec2      	ldr	r6, [pc, #776]	; (4043a4 <sitDown+0x33c>)
  40409c:	47b0      	blx	r6
  40409e:	ed85 0a00 	vstr	s0, [r5]
  4040a2:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  4040a6:	edd8 7a02 	vldr	s15, [r8, #8]
  4040aa:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4040ae:	eeb0 0a41 	vmov.f32	s0, s2
  4040b2:	eef0 0a48 	vmov.f32	s1, s16
  4040b6:	eef0 1a48 	vmov.f32	s3, s16
  4040ba:	eeb0 2a48 	vmov.f32	s4, s16
  4040be:	2000      	movs	r0, #0
  4040c0:	eef0 2a48 	vmov.f32	s5, s16
  4040c4:	47b0      	blx	r6
  4040c6:	ed85 0a02 	vstr	s0, [r5, #8]
  4040ca:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  4040ce:	edd8 7a02 	vldr	s15, [r8, #8]
  4040d2:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4040d6:	eeb0 0a41 	vmov.f32	s0, s2
  4040da:	eef0 0a48 	vmov.f32	s1, s16
  4040de:	eef0 1a48 	vmov.f32	s3, s16
  4040e2:	eeb0 2a48 	vmov.f32	s4, s16
  4040e6:	2001      	movs	r0, #1
  4040e8:	eef0 2a48 	vmov.f32	s5, s16
  4040ec:	47b0      	blx	r6
  4040ee:	ed85 0a04 	vstr	s0, [r5, #16]
  4040f2:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  4040f6:	edd8 7a02 	vldr	s15, [r8, #8]
  4040fa:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4040fe:	eeb0 0a41 	vmov.f32	s0, s2
  404102:	eef0 0a48 	vmov.f32	s1, s16
  404106:	eef0 1a48 	vmov.f32	s3, s16
  40410a:	eeb0 2a48 	vmov.f32	s4, s16
  40410e:	2000      	movs	r0, #0
  404110:	eef0 2a48 	vmov.f32	s5, s16
  404114:	47b0      	blx	r6
  404116:	ed85 0a06 	vstr	s0, [r5, #24]
  40411a:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  40411e:	edd8 7a02 	vldr	s15, [r8, #8]
  404122:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404126:	eeb0 0a41 	vmov.f32	s0, s2
  40412a:	eef0 0a48 	vmov.f32	s1, s16
  40412e:	eef0 1a48 	vmov.f32	s3, s16
  404132:	eeb0 2a48 	vmov.f32	s4, s16
  404136:	2001      	movs	r0, #1
  404138:	eef0 2a48 	vmov.f32	s5, s16
  40413c:	47b0      	blx	r6
  40413e:	ed85 0a08 	vstr	s0, [r5, #32]
  404142:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  404146:	edd8 7a02 	vldr	s15, [r8, #8]
  40414a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  40414e:	eeb0 0a41 	vmov.f32	s0, s2
  404152:	eef0 0a48 	vmov.f32	s1, s16
  404156:	eef0 1a48 	vmov.f32	s3, s16
  40415a:	eeb0 2a48 	vmov.f32	s4, s16
  40415e:	2000      	movs	r0, #0
  404160:	eef0 2a48 	vmov.f32	s5, s16
  404164:	47b0      	blx	r6
  404166:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  40416a:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[0].Z);
  40416e:	ed95 8a00 	vldr	s16, [r5]
  404172:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  404176:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40417a:	ebc0 000b 	rsb	r0, r0, fp
  40417e:	4b8a      	ldr	r3, [pc, #552]	; (4043a8 <sitDown+0x340>)
  404180:	4798      	blx	r3
  404182:	e9cd 0100 	strd	r0, r1, [sp]
  404186:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  40418a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40418e:	ee17 0a90 	vmov	r0, s15
  404192:	4b86      	ldr	r3, [pc, #536]	; (4043ac <sitDown+0x344>)
  404194:	4798      	blx	r3
  404196:	4602      	mov	r2, r0
  404198:	460b      	mov	r3, r1
  40419a:	2000      	movs	r0, #0
  40419c:	4984      	ldr	r1, [pc, #528]	; (4043b0 <sitDown+0x348>)
  40419e:	4e85      	ldr	r6, [pc, #532]	; (4043b4 <sitDown+0x34c>)
  4041a0:	47b0      	blx	r6
  4041a2:	2200      	movs	r2, #0
  4041a4:	4b82      	ldr	r3, [pc, #520]	; (4043b0 <sitDown+0x348>)
  4041a6:	4e84      	ldr	r6, [pc, #528]	; (4043b8 <sitDown+0x350>)
  4041a8:	47b0      	blx	r6
  4041aa:	4602      	mov	r2, r0
  4041ac:	460b      	mov	r3, r1
  4041ae:	f8df a214 	ldr.w	sl, [pc, #532]	; 4043c4 <sitDown+0x35c>
  4041b2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4041b6:	47d0      	blx	sl
  4041b8:	f8df 920c 	ldr.w	r9, [pc, #524]	; 4043c8 <sitDown+0x360>
  4041bc:	a376      	add	r3, pc, #472	; (adr r3, 404398 <sitDown+0x330>)
  4041be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041c2:	47c8      	blx	r9
  4041c4:	4f7d      	ldr	r7, [pc, #500]	; (4043bc <sitDown+0x354>)
  4041c6:	47b8      	blx	r7
  4041c8:	eeb0 0a48 	vmov.f32	s0, s16
  4041cc:	ee00 0a90 	vmov	s1, r0
  4041d0:	ed95 1a01 	vldr	s2, [r5, #4]
  4041d4:	4b7a      	ldr	r3, [pc, #488]	; (4043c0 <sitDown+0x358>)
  4041d6:	4798      	blx	r3
  4041d8:	ed84 0a00 	vstr	s0, [r4]
  4041dc:	edc4 0a01 	vstr	s1, [r4, #4]
  4041e0:	ed84 1a02 	vstr	s2, [r4, #8]
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[1].Z);
  4041e4:	ed95 8a02 	vldr	s16, [r5, #8]
  4041e8:	f8d8 000c 	ldr.w	r0, [r8, #12]
  4041ec:	ebc0 000b 	rsb	r0, r0, fp
  4041f0:	4b6d      	ldr	r3, [pc, #436]	; (4043a8 <sitDown+0x340>)
  4041f2:	4798      	blx	r3
  4041f4:	e9cd 0100 	strd	r0, r1, [sp]
  4041f8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  4041fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404200:	ee17 0a90 	vmov	r0, s15
  404204:	4b69      	ldr	r3, [pc, #420]	; (4043ac <sitDown+0x344>)
  404206:	4798      	blx	r3
  404208:	4602      	mov	r2, r0
  40420a:	460b      	mov	r3, r1
  40420c:	2000      	movs	r0, #0
  40420e:	4968      	ldr	r1, [pc, #416]	; (4043b0 <sitDown+0x348>)
  404210:	4e68      	ldr	r6, [pc, #416]	; (4043b4 <sitDown+0x34c>)
  404212:	47b0      	blx	r6
  404214:	2200      	movs	r2, #0
  404216:	4b66      	ldr	r3, [pc, #408]	; (4043b0 <sitDown+0x348>)
  404218:	4e67      	ldr	r6, [pc, #412]	; (4043b8 <sitDown+0x350>)
  40421a:	47b0      	blx	r6
  40421c:	4602      	mov	r2, r0
  40421e:	460b      	mov	r3, r1
  404220:	e9dd 0100 	ldrd	r0, r1, [sp]
  404224:	47d0      	blx	sl
  404226:	a35c      	add	r3, pc, #368	; (adr r3, 404398 <sitDown+0x330>)
  404228:	e9d3 2300 	ldrd	r2, r3, [r3]
  40422c:	47c8      	blx	r9
  40422e:	47b8      	blx	r7
  404230:	eeb0 0a48 	vmov.f32	s0, s16
  404234:	ee00 0a90 	vmov	s1, r0
  404238:	ed95 1a03 	vldr	s2, [r5, #12]
  40423c:	4b60      	ldr	r3, [pc, #384]	; (4043c0 <sitDown+0x358>)
  40423e:	4798      	blx	r3
  404240:	ed84 0a03 	vstr	s0, [r4, #12]
  404244:	edc4 0a04 	vstr	s1, [r4, #16]
  404248:	ed84 1a05 	vstr	s2, [r4, #20]
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[2].Z);
  40424c:	ed95 8a04 	vldr	s16, [r5, #16]
  404250:	f8d8 000c 	ldr.w	r0, [r8, #12]
  404254:	ebc0 000b 	rsb	r0, r0, fp
  404258:	4b53      	ldr	r3, [pc, #332]	; (4043a8 <sitDown+0x340>)
  40425a:	4798      	blx	r3
  40425c:	e9cd 0100 	strd	r0, r1, [sp]
  404260:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  404264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404268:	ee17 0a90 	vmov	r0, s15
  40426c:	4b4f      	ldr	r3, [pc, #316]	; (4043ac <sitDown+0x344>)
  40426e:	4798      	blx	r3
  404270:	4602      	mov	r2, r0
  404272:	460b      	mov	r3, r1
  404274:	2000      	movs	r0, #0
  404276:	494e      	ldr	r1, [pc, #312]	; (4043b0 <sitDown+0x348>)
  404278:	4e4e      	ldr	r6, [pc, #312]	; (4043b4 <sitDown+0x34c>)
  40427a:	47b0      	blx	r6
  40427c:	2200      	movs	r2, #0
  40427e:	4b4c      	ldr	r3, [pc, #304]	; (4043b0 <sitDown+0x348>)
  404280:	4e4d      	ldr	r6, [pc, #308]	; (4043b8 <sitDown+0x350>)
  404282:	47b0      	blx	r6
  404284:	4602      	mov	r2, r0
  404286:	460b      	mov	r3, r1
  404288:	e9dd 0100 	ldrd	r0, r1, [sp]
  40428c:	47d0      	blx	sl
  40428e:	a342      	add	r3, pc, #264	; (adr r3, 404398 <sitDown+0x330>)
  404290:	e9d3 2300 	ldrd	r2, r3, [r3]
  404294:	47c8      	blx	r9
  404296:	47b8      	blx	r7
  404298:	eeb0 0a48 	vmov.f32	s0, s16
  40429c:	ee00 0a90 	vmov	s1, r0
  4042a0:	ed95 1a05 	vldr	s2, [r5, #20]
  4042a4:	4b46      	ldr	r3, [pc, #280]	; (4043c0 <sitDown+0x358>)
  4042a6:	4798      	blx	r3
  4042a8:	ed84 0a06 	vstr	s0, [r4, #24]
  4042ac:	edc4 0a07 	vstr	s1, [r4, #28]
  4042b0:	ed84 1a08 	vstr	s2, [r4, #32]
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[3].Z);
  4042b4:	ed95 8a06 	vldr	s16, [r5, #24]
  4042b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
  4042bc:	ebc0 000b 	rsb	r0, r0, fp
  4042c0:	4b39      	ldr	r3, [pc, #228]	; (4043a8 <sitDown+0x340>)
  4042c2:	4798      	blx	r3
  4042c4:	e9cd 0100 	strd	r0, r1, [sp]
  4042c8:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  4042cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4042d0:	ee17 0a90 	vmov	r0, s15
  4042d4:	4b35      	ldr	r3, [pc, #212]	; (4043ac <sitDown+0x344>)
  4042d6:	4798      	blx	r3
  4042d8:	4602      	mov	r2, r0
  4042da:	460b      	mov	r3, r1
  4042dc:	2000      	movs	r0, #0
  4042de:	4934      	ldr	r1, [pc, #208]	; (4043b0 <sitDown+0x348>)
  4042e0:	4e34      	ldr	r6, [pc, #208]	; (4043b4 <sitDown+0x34c>)
  4042e2:	47b0      	blx	r6
  4042e4:	2200      	movs	r2, #0
  4042e6:	4b32      	ldr	r3, [pc, #200]	; (4043b0 <sitDown+0x348>)
  4042e8:	4e33      	ldr	r6, [pc, #204]	; (4043b8 <sitDown+0x350>)
  4042ea:	47b0      	blx	r6
  4042ec:	4602      	mov	r2, r0
  4042ee:	460b      	mov	r3, r1
  4042f0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4042f4:	47d0      	blx	sl
  4042f6:	a328      	add	r3, pc, #160	; (adr r3, 404398 <sitDown+0x330>)
  4042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042fc:	47c8      	blx	r9
  4042fe:	47b8      	blx	r7
  404300:	eeb0 0a48 	vmov.f32	s0, s16
  404304:	ee00 0a90 	vmov	s1, r0
  404308:	ed95 1a07 	vldr	s2, [r5, #28]
  40430c:	4b2c      	ldr	r3, [pc, #176]	; (4043c0 <sitDown+0x358>)
  40430e:	4798      	blx	r3
  404310:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  404314:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
  404318:	ed84 1a0b 	vstr	s2, [r4, #44]	; 0x2c
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[4].Z);
  40431c:	ed95 8a08 	vldr	s16, [r5, #32]
  404320:	f8d8 000c 	ldr.w	r0, [r8, #12]
  404324:	ebc0 000b 	rsb	r0, r0, fp
  404328:	4b1f      	ldr	r3, [pc, #124]	; (4043a8 <sitDown+0x340>)
  40432a:	4798      	blx	r3
  40432c:	e9cd 0100 	strd	r0, r1, [sp]
  404330:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  404334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404338:	ee17 0a90 	vmov	r0, s15
  40433c:	4b1b      	ldr	r3, [pc, #108]	; (4043ac <sitDown+0x344>)
  40433e:	4798      	blx	r3
  404340:	4602      	mov	r2, r0
  404342:	460b      	mov	r3, r1
  404344:	2000      	movs	r0, #0
  404346:	491a      	ldr	r1, [pc, #104]	; (4043b0 <sitDown+0x348>)
  404348:	4e1a      	ldr	r6, [pc, #104]	; (4043b4 <sitDown+0x34c>)
  40434a:	47b0      	blx	r6
  40434c:	2200      	movs	r2, #0
  40434e:	4b18      	ldr	r3, [pc, #96]	; (4043b0 <sitDown+0x348>)
  404350:	4e19      	ldr	r6, [pc, #100]	; (4043b8 <sitDown+0x350>)
  404352:	47b0      	blx	r6
  404354:	4602      	mov	r2, r0
  404356:	460b      	mov	r3, r1
  404358:	e9dd 0100 	ldrd	r0, r1, [sp]
  40435c:	47d0      	blx	sl
  40435e:	a30e      	add	r3, pc, #56	; (adr r3, 404398 <sitDown+0x330>)
  404360:	e9d3 2300 	ldrd	r2, r3, [r3]
  404364:	47c8      	blx	r9
  404366:	47b8      	blx	r7
  404368:	eeb0 0a48 	vmov.f32	s0, s16
  40436c:	ee00 0a90 	vmov	s1, r0
  404370:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  404374:	4b12      	ldr	r3, [pc, #72]	; (4043c0 <sitDown+0x358>)
  404376:	4798      	blx	r3
  404378:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  40437c:	edc4 0a0d 	vstr	s1, [r4, #52]	; 0x34
  404380:	ed84 1a0e 	vstr	s2, [r4, #56]	; 0x38
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[5].Z);
  404384:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  404388:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40438c:	ebc0 000b 	rsb	r0, r0, fp
  404390:	e01c      	b.n	4043cc <sitDown+0x364>
  404392:	bf00      	nop
  404394:	f3af 8000 	nop.w
  404398:	00000000 	.word	0x00000000
  40439c:	4052c000 	.word	0x4052c000
  4043a0:	00000000 	.word	0x00000000
  4043a4:	00405b41 	.word	0x00405b41
  4043a8:	0040ac29 	.word	0x0040ac29
  4043ac:	0040ac4d 	.word	0x0040ac4d
  4043b0:	40590000 	.word	0x40590000
  4043b4:	0040a98d 	.word	0x0040a98d
  4043b8:	0040af49 	.word	0x0040af49
  4043bc:	0040b279 	.word	0x0040b279
  4043c0:	00405d89 	.word	0x00405d89
  4043c4:	0040acf5 	.word	0x0040acf5
  4043c8:	0040a991 	.word	0x0040a991
  4043cc:	4b34      	ldr	r3, [pc, #208]	; (4044a0 <sitDown+0x438>)
  4043ce:	4798      	blx	r3
  4043d0:	e9cd 0100 	strd	r0, r1, [sp]
  4043d4:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  4043d8:	ee07 0a90 	vmov	s15, r0
  4043dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4043e0:	ee17 0a90 	vmov	r0, s15
  4043e4:	4b2f      	ldr	r3, [pc, #188]	; (4044a4 <sitDown+0x43c>)
  4043e6:	4798      	blx	r3
  4043e8:	4602      	mov	r2, r0
  4043ea:	460b      	mov	r3, r1
  4043ec:	2000      	movs	r0, #0
  4043ee:	492e      	ldr	r1, [pc, #184]	; (4044a8 <sitDown+0x440>)
  4043f0:	4e2e      	ldr	r6, [pc, #184]	; (4044ac <sitDown+0x444>)
  4043f2:	47b0      	blx	r6
  4043f4:	2200      	movs	r2, #0
  4043f6:	4b2c      	ldr	r3, [pc, #176]	; (4044a8 <sitDown+0x440>)
  4043f8:	4e2d      	ldr	r6, [pc, #180]	; (4044b0 <sitDown+0x448>)
  4043fa:	47b0      	blx	r6
  4043fc:	4602      	mov	r2, r0
  4043fe:	460b      	mov	r3, r1
  404400:	e9dd 0100 	ldrd	r0, r1, [sp]
  404404:	47d0      	blx	sl
  404406:	a324      	add	r3, pc, #144	; (adr r3, 404498 <sitDown+0x430>)
  404408:	e9d3 2300 	ldrd	r2, r3, [r3]
  40440c:	47c8      	blx	r9
  40440e:	47b8      	blx	r7
  404410:	eeb0 0a48 	vmov.f32	s0, s16
  404414:	ee00 0a90 	vmov	s1, r0
  404418:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
  40441c:	4b25      	ldr	r3, [pc, #148]	; (4044b4 <sitDown+0x44c>)
  40441e:	4798      	blx	r3
  404420:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
  404424:	edc4 0a10 	vstr	s1, [r4, #64]	; 0x40
  404428:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  40442c:	2000      	movs	r0, #0
  40442e:	ed94 0a00 	vldr	s0, [r4]
  404432:	edd4 0a01 	vldr	s1, [r4, #4]
  404436:	ed94 1a02 	vldr	s2, [r4, #8]
  40443a:	4d1f      	ldr	r5, [pc, #124]	; (4044b8 <sitDown+0x450>)
  40443c:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  40443e:	2001      	movs	r0, #1
  404440:	ed94 0a03 	vldr	s0, [r4, #12]
  404444:	edd4 0a04 	vldr	s1, [r4, #16]
  404448:	ed94 1a05 	vldr	s2, [r4, #20]
  40444c:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  40444e:	2002      	movs	r0, #2
  404450:	ed94 0a06 	vldr	s0, [r4, #24]
  404454:	edd4 0a07 	vldr	s1, [r4, #28]
  404458:	ed94 1a08 	vldr	s2, [r4, #32]
  40445c:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  40445e:	2003      	movs	r0, #3
  404460:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  404464:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
  404468:	ed94 1a0b 	vldr	s2, [r4, #44]	; 0x2c
  40446c:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  40446e:	2004      	movs	r0, #4
  404470:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
  404474:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
  404478:	ed94 1a0e 	vldr	s2, [r4, #56]	; 0x38
  40447c:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  40447e:	2005      	movs	r0, #5
  404480:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
  404484:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
  404488:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
  40448c:	47a8      	blx	r5
}
  40448e:	b003      	add	sp, #12
  404490:	ecbd 8b02 	vpop	{d8}
  404494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404498:	00000000 	.word	0x00000000
  40449c:	4052c000 	.word	0x4052c000
  4044a0:	0040ac29 	.word	0x0040ac29
  4044a4:	0040ac4d 	.word	0x0040ac4d
  4044a8:	40590000 	.word	0x40590000
  4044ac:	0040a98d 	.word	0x0040a98d
  4044b0:	0040af49 	.word	0x0040af49
  4044b4:	00405d89 	.word	0x00405d89
  4044b8:	00405fb5 	.word	0x00405fb5
  4044bc:	00000000 	.word	0x00000000

004044c0 <Gait0>:

//default, sinusoid based paten
void Gait0( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  4044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044c4:	ed2d 8b04 	vpush	{d8-d9}
  4044c8:	b083      	sub	sp, #12
  4044ca:	4681      	mov	r9, r0
  4044cc:	460d      	mov	r5, r1
  4044ce:	4690      	mov	r8, r2
  4044d0:	461c      	mov	r4, r3

	ofst[0] = ((float)hexabot_walk->i+(0*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4044d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
  4044d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4044da:	ed9f 8acf 	vldr	s16, [pc, #828]	; 404818 <Gait0+0x358>
  4044de:	ee77 7a88 	vadd.f32	s15, s15, s16
  4044e2:	ed93 7a06 	vldr	s14, [r3, #24]
  4044e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4044ea:	4ecc      	ldr	r6, [pc, #816]	; (40481c <Gait0+0x35c>)
  4044ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4044f0:	ee17 0a90 	vmov	r0, s15
  4044f4:	47b0      	blx	r6
  4044f6:	4602      	mov	r2, r0
  4044f8:	460b      	mov	r3, r1
  4044fa:	4fc9      	ldr	r7, [pc, #804]	; (404820 <Gait0+0x360>)
  4044fc:	47b8      	blx	r7
  4044fe:	f8df a330 	ldr.w	sl, [pc, #816]	; 404830 <Gait0+0x370>
  404502:	a3c3      	add	r3, pc, #780	; (adr r3, 404810 <Gait0+0x350>)
  404504:	e9d3 2300 	ldrd	r2, r3, [r3]
  404508:	47d0      	blx	sl
  40450a:	4bc6      	ldr	r3, [pc, #792]	; (404824 <Gait0+0x364>)
  40450c:	4798      	blx	r3
  40450e:	ee08 0a90 	vmov	s17, r0
  404512:	f8c9 0000 	str.w	r0, [r9]
	ofst[1] = ((float)hexabot_walk->i+(1*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404516:	69a3      	ldr	r3, [r4, #24]
  404518:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  40451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404520:	f8df b310 	ldr.w	fp, [pc, #784]	; 404834 <Gait0+0x374>
  404524:	fb8b 1203 	smull	r1, r2, fp, r3
  404528:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  40452c:	ee07 2a10 	vmov	s14, r2
  404530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404534:	ee37 7a87 	vadd.f32	s14, s15, s14
  404538:	ee07 3a90 	vmov	s15, r3
  40453c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404540:	eec7 7a27 	vdiv.f32	s15, s14, s15
  404544:	ee17 0a90 	vmov	r0, s15
  404548:	47b0      	blx	r6
  40454a:	4602      	mov	r2, r0
  40454c:	460b      	mov	r3, r1
  40454e:	47b8      	blx	r7
  404550:	a3af      	add	r3, pc, #700	; (adr r3, 404810 <Gait0+0x350>)
  404552:	e9d3 2300 	ldrd	r2, r3, [r3]
  404556:	47d0      	blx	sl
  404558:	4bb2      	ldr	r3, [pc, #712]	; (404824 <Gait0+0x364>)
  40455a:	4798      	blx	r3
  40455c:	f8c9 0004 	str.w	r0, [r9, #4]
	ofst[2] = ((float)hexabot_walk->i+(2*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404560:	69a2      	ldr	r2, [r4, #24]
  404562:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  40456a:	fb8b 1302 	smull	r1, r3, fp, r2
  40456e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  404572:	005b      	lsls	r3, r3, #1
  404574:	ee07 3a90 	vmov	s15, r3
  404578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40457c:	ee77 7a27 	vadd.f32	s15, s14, s15
  404580:	ee07 2a10 	vmov	s14, r2
  404584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404588:	eec7 7a87 	vdiv.f32	s15, s15, s14
  40458c:	ee17 0a90 	vmov	r0, s15
  404590:	47b0      	blx	r6
  404592:	4602      	mov	r2, r0
  404594:	460b      	mov	r3, r1
  404596:	47b8      	blx	r7
  404598:	a39d      	add	r3, pc, #628	; (adr r3, 404810 <Gait0+0x350>)
  40459a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40459e:	47d0      	blx	sl
  4045a0:	4ba0      	ldr	r3, [pc, #640]	; (404824 <Gait0+0x364>)
  4045a2:	4798      	blx	r3
  4045a4:	f8c9 0008 	str.w	r0, [r9, #8]
	ofst[3] = ((float)hexabot_walk->i+(3*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4045a8:	69a2      	ldr	r2, [r4, #24]
  4045aa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4045ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4045b2:	fb8b 1302 	smull	r1, r3, fp, r2
  4045b6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  4045ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4045be:	ee07 3a90 	vmov	s15, r3
  4045c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4045c6:	ee77 7a27 	vadd.f32	s15, s14, s15
  4045ca:	ee07 2a10 	vmov	s14, r2
  4045ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4045d2:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4045d6:	ee17 0a90 	vmov	r0, s15
  4045da:	47b0      	blx	r6
  4045dc:	4602      	mov	r2, r0
  4045de:	460b      	mov	r3, r1
  4045e0:	47b8      	blx	r7
  4045e2:	a38b      	add	r3, pc, #556	; (adr r3, 404810 <Gait0+0x350>)
  4045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045e8:	47d0      	blx	sl
  4045ea:	4b8e      	ldr	r3, [pc, #568]	; (404824 <Gait0+0x364>)
  4045ec:	4798      	blx	r3
  4045ee:	f8c9 000c 	str.w	r0, [r9, #12]
	ofst[4] = ((float)hexabot_walk->i+(4*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4045f2:	69a2      	ldr	r2, [r4, #24]
  4045f4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4045f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4045fc:	fb8b 1302 	smull	r1, r3, fp, r2
  404600:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  404604:	009b      	lsls	r3, r3, #2
  404606:	ee07 3a90 	vmov	s15, r3
  40460a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40460e:	ee77 7a27 	vadd.f32	s15, s14, s15
  404612:	ee07 2a10 	vmov	s14, r2
  404616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  40461a:	eec7 7a87 	vdiv.f32	s15, s15, s14
  40461e:	ee17 0a90 	vmov	r0, s15
  404622:	47b0      	blx	r6
  404624:	4602      	mov	r2, r0
  404626:	460b      	mov	r3, r1
  404628:	47b8      	blx	r7
  40462a:	a379      	add	r3, pc, #484	; (adr r3, 404810 <Gait0+0x350>)
  40462c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404630:	47d0      	blx	sl
  404632:	4b7c      	ldr	r3, [pc, #496]	; (404824 <Gait0+0x364>)
  404634:	4798      	blx	r3
  404636:	f8c9 0010 	str.w	r0, [r9, #16]
	ofst[5] = ((float)hexabot_walk->i+(5*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  40463a:	69a2      	ldr	r2, [r4, #24]
  40463c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404644:	fb8b 1302 	smull	r1, r3, fp, r2
  404648:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  40464c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404650:	ee07 3a90 	vmov	s15, r3
  404654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404658:	ee77 7a27 	vadd.f32	s15, s14, s15
  40465c:	ee07 2a10 	vmov	s14, r2
  404660:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404664:	eec7 7a87 	vdiv.f32	s15, s15, s14
  404668:	ee17 0a90 	vmov	r0, s15
  40466c:	47b0      	blx	r6
  40466e:	4602      	mov	r2, r0
  404670:	460b      	mov	r3, r1
  404672:	47b8      	blx	r7
  404674:	a366      	add	r3, pc, #408	; (adr r3, 404810 <Gait0+0x350>)
  404676:	e9d3 2300 	ldrd	r2, r3, [r3]
  40467a:	47d0      	blx	sl
  40467c:	4b69      	ldr	r3, [pc, #420]	; (404824 <Gait0+0x364>)
  40467e:	4798      	blx	r3
  404680:	f8c9 0014 	str.w	r0, [r9, #20]
	
	xzS[0] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[0]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  404684:	ee18 0a90 	vmov	r0, s17
  404688:	47b0      	blx	r6
  40468a:	ec41 0b10 	vmov	d0, r0, r1
  40468e:	4b66      	ldr	r3, [pc, #408]	; (404828 <Gait0+0x368>)
  404690:	4798      	blx	r3
  404692:	eeb0 9a40 	vmov.f32	s18, s0
  404696:	eef0 9a60 	vmov.f32	s19, s1
  40469a:	edd4 7a02 	vldr	s15, [r4, #8]
  40469e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4046a2:	6960      	ldr	r0, [r4, #20]
  4046a4:	4b61      	ldr	r3, [pc, #388]	; (40482c <Gait0+0x36c>)
  4046a6:	4798      	blx	r3
  4046a8:	ec53 2b19 	vmov	r2, r3, d9
  4046ac:	47d0      	blx	sl
  4046ae:	4b5d      	ldr	r3, [pc, #372]	; (404824 <Gait0+0x364>)
  4046b0:	4798      	blx	r3
  4046b2:	eeb0 0a68 	vmov.f32	s0, s17
  4046b6:	ee00 0a90 	vmov	s1, r0
  4046ba:	eeb0 1a68 	vmov.f32	s2, s17
  4046be:	eef0 1a48 	vmov.f32	s3, s16
  4046c2:	ed94 2a01 	vldr	s4, [r4, #4]
  4046c6:	2001      	movs	r0, #1
  4046c8:	edd4 2a00 	vldr	s5, [r4]
  4046cc:	f8df b168 	ldr.w	fp, [pc, #360]	; 404838 <Gait0+0x378>
  4046d0:	47d8      	blx	fp
  4046d2:	ed85 0a00 	vstr	s0, [r5]
  4046d6:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[1]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  4046da:	f8d9 0004 	ldr.w	r0, [r9, #4]
  4046de:	47b0      	blx	r6
  4046e0:	ec41 0b10 	vmov	d0, r0, r1
  4046e4:	4b50      	ldr	r3, [pc, #320]	; (404828 <Gait0+0x368>)
  4046e6:	4798      	blx	r3
  4046e8:	eeb0 9a40 	vmov.f32	s18, s0
  4046ec:	eef0 9a60 	vmov.f32	s19, s1
  4046f0:	edd4 7a02 	vldr	s15, [r4, #8]
  4046f4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4046f8:	6960      	ldr	r0, [r4, #20]
  4046fa:	4b4c      	ldr	r3, [pc, #304]	; (40482c <Gait0+0x36c>)
  4046fc:	4798      	blx	r3
  4046fe:	ec53 2b19 	vmov	r2, r3, d9
  404702:	47d0      	blx	sl
  404704:	4b47      	ldr	r3, [pc, #284]	; (404824 <Gait0+0x364>)
  404706:	4798      	blx	r3
  404708:	eeb0 0a68 	vmov.f32	s0, s17
  40470c:	ee00 0a90 	vmov	s1, r0
  404710:	eeb0 1a68 	vmov.f32	s2, s17
  404714:	eef0 1a48 	vmov.f32	s3, s16
  404718:	ed94 2a01 	vldr	s4, [r4, #4]
  40471c:	2000      	movs	r0, #0
  40471e:	edd4 2a00 	vldr	s5, [r4]
  404722:	47d8      	blx	fp
  404724:	ed85 0a02 	vstr	s0, [r5, #8]
  404728:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[2]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  40472c:	f8d9 0008 	ldr.w	r0, [r9, #8]
  404730:	47b0      	blx	r6
  404732:	ec41 0b10 	vmov	d0, r0, r1
  404736:	4b3c      	ldr	r3, [pc, #240]	; (404828 <Gait0+0x368>)
  404738:	4798      	blx	r3
  40473a:	eeb0 9a40 	vmov.f32	s18, s0
  40473e:	eef0 9a60 	vmov.f32	s19, s1
  404742:	edd4 7a02 	vldr	s15, [r4, #8]
  404746:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40474a:	6960      	ldr	r0, [r4, #20]
  40474c:	4b37      	ldr	r3, [pc, #220]	; (40482c <Gait0+0x36c>)
  40474e:	4798      	blx	r3
  404750:	ec53 2b19 	vmov	r2, r3, d9
  404754:	47d0      	blx	sl
  404756:	4b33      	ldr	r3, [pc, #204]	; (404824 <Gait0+0x364>)
  404758:	4798      	blx	r3
  40475a:	eeb0 0a68 	vmov.f32	s0, s17
  40475e:	ee00 0a90 	vmov	s1, r0
  404762:	eeb0 1a68 	vmov.f32	s2, s17
  404766:	eef0 1a48 	vmov.f32	s3, s16
  40476a:	ed94 2a01 	vldr	s4, [r4, #4]
  40476e:	2001      	movs	r0, #1
  404770:	edd4 2a00 	vldr	s5, [r4]
  404774:	47d8      	blx	fp
  404776:	ed85 0a04 	vstr	s0, [r5, #16]
  40477a:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[3]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  40477e:	f8d9 000c 	ldr.w	r0, [r9, #12]
  404782:	47b0      	blx	r6
  404784:	ec41 0b10 	vmov	d0, r0, r1
  404788:	4b27      	ldr	r3, [pc, #156]	; (404828 <Gait0+0x368>)
  40478a:	4798      	blx	r3
  40478c:	eeb0 9a40 	vmov.f32	s18, s0
  404790:	eef0 9a60 	vmov.f32	s19, s1
  404794:	edd4 7a02 	vldr	s15, [r4, #8]
  404798:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40479c:	6960      	ldr	r0, [r4, #20]
  40479e:	4b23      	ldr	r3, [pc, #140]	; (40482c <Gait0+0x36c>)
  4047a0:	4798      	blx	r3
  4047a2:	ec53 2b19 	vmov	r2, r3, d9
  4047a6:	47d0      	blx	sl
  4047a8:	4b1e      	ldr	r3, [pc, #120]	; (404824 <Gait0+0x364>)
  4047aa:	4798      	blx	r3
  4047ac:	eeb0 0a68 	vmov.f32	s0, s17
  4047b0:	ee00 0a90 	vmov	s1, r0
  4047b4:	eeb0 1a68 	vmov.f32	s2, s17
  4047b8:	eef0 1a48 	vmov.f32	s3, s16
  4047bc:	ed94 2a01 	vldr	s4, [r4, #4]
  4047c0:	2000      	movs	r0, #0
  4047c2:	edd4 2a00 	vldr	s5, [r4]
  4047c6:	47d8      	blx	fp
  4047c8:	ed85 0a06 	vstr	s0, [r5, #24]
  4047cc:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[4]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  4047d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
  4047d4:	47b0      	blx	r6
  4047d6:	ec41 0b10 	vmov	d0, r0, r1
  4047da:	4b13      	ldr	r3, [pc, #76]	; (404828 <Gait0+0x368>)
  4047dc:	4798      	blx	r3
  4047de:	eeb0 9a40 	vmov.f32	s18, s0
  4047e2:	eef0 9a60 	vmov.f32	s19, s1
  4047e6:	edd4 7a02 	vldr	s15, [r4, #8]
  4047ea:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4047ee:	6960      	ldr	r0, [r4, #20]
  4047f0:	4b0e      	ldr	r3, [pc, #56]	; (40482c <Gait0+0x36c>)
  4047f2:	4798      	blx	r3
  4047f4:	ec53 2b19 	vmov	r2, r3, d9
  4047f8:	47d0      	blx	sl
  4047fa:	4b0a      	ldr	r3, [pc, #40]	; (404824 <Gait0+0x364>)
  4047fc:	4798      	blx	r3
  4047fe:	eeb0 0a68 	vmov.f32	s0, s17
  404802:	ee00 0a90 	vmov	s1, r0
  404806:	eeb0 1a68 	vmov.f32	s2, s17
  40480a:	eef0 1a48 	vmov.f32	s3, s16
  40480e:	e015      	b.n	40483c <Gait0+0x37c>
  404810:	54442d18 	.word	0x54442d18
  404814:	400921fb 	.word	0x400921fb
  404818:	00000000 	.word	0x00000000
  40481c:	0040ac4d 	.word	0x0040ac4d
  404820:	0040a991 	.word	0x0040a991
  404824:	0040b279 	.word	0x0040b279
  404828:	00407ea9 	.word	0x00407ea9
  40482c:	0040ac29 	.word	0x0040ac29
  404830:	0040acf5 	.word	0x0040acf5
  404834:	2aaaaaab 	.word	0x2aaaaaab
  404838:	00405b41 	.word	0x00405b41
  40483c:	ed94 2a01 	vldr	s4, [r4, #4]
  404840:	2001      	movs	r0, #1
  404842:	edd4 2a00 	vldr	s5, [r4]
  404846:	47d8      	blx	fp
  404848:	ed85 0a08 	vstr	s0, [r5, #32]
  40484c:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[5]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  404850:	f8d9 0014 	ldr.w	r0, [r9, #20]
  404854:	47b0      	blx	r6
  404856:	ec41 0b10 	vmov	d0, r0, r1
  40485a:	4b98      	ldr	r3, [pc, #608]	; (404abc <Gait0+0x5fc>)
  40485c:	4798      	blx	r3
  40485e:	eeb0 9a40 	vmov.f32	s18, s0
  404862:	eef0 9a60 	vmov.f32	s19, s1
  404866:	edd4 7a02 	vldr	s15, [r4, #8]
  40486a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40486e:	6960      	ldr	r0, [r4, #20]
  404870:	4b93      	ldr	r3, [pc, #588]	; (404ac0 <Gait0+0x600>)
  404872:	4798      	blx	r3
  404874:	ec53 2b19 	vmov	r2, r3, d9
  404878:	47d0      	blx	sl
  40487a:	4b92      	ldr	r3, [pc, #584]	; (404ac4 <Gait0+0x604>)
  40487c:	4798      	blx	r3
  40487e:	eeb0 0a68 	vmov.f32	s0, s17
  404882:	ee00 0a90 	vmov	s1, r0
  404886:	eeb0 1a68 	vmov.f32	s2, s17
  40488a:	eef0 1a48 	vmov.f32	s3, s16
  40488e:	ed94 2a01 	vldr	s4, [r4, #4]
  404892:	2000      	movs	r0, #0
  404894:	edd4 2a00 	vldr	s5, [r4]
  404898:	47d8      	blx	fp
  40489a:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  40489e:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X,  (sin(ofst[0]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[0])-hexabot_walk->hgt)  ,xzS[0].Z);
  4048a2:	ed95 8a00 	vldr	s16, [r5]
  4048a6:	f8d9 0000 	ldr.w	r0, [r9]
  4048aa:	47b0      	blx	r6
  4048ac:	ec41 0b10 	vmov	d0, r0, r1
  4048b0:	4b85      	ldr	r3, [pc, #532]	; (404ac8 <Gait0+0x608>)
  4048b2:	4798      	blx	r3
  4048b4:	ec5b ab10 	vmov	sl, fp, d0
  4048b8:	ee10 0a10 	vmov	r0, s0
  4048bc:	4659      	mov	r1, fp
  4048be:	2200      	movs	r2, #0
  4048c0:	2300      	movs	r3, #0
  4048c2:	4e82      	ldr	r6, [pc, #520]	; (404acc <Gait0+0x60c>)
  4048c4:	47b0      	blx	r6
  4048c6:	b120      	cbz	r0, 4048d2 <Gait0+0x412>
  4048c8:	68e0      	ldr	r0, [r4, #12]
  4048ca:	4240      	negs	r0, r0
  4048cc:	4b7c      	ldr	r3, [pc, #496]	; (404ac0 <Gait0+0x600>)
  4048ce:	4798      	blx	r3
  4048d0:	e012      	b.n	4048f8 <Gait0+0x438>
  4048d2:	4f7b      	ldr	r7, [pc, #492]	; (404ac0 <Gait0+0x600>)
  4048d4:	6920      	ldr	r0, [r4, #16]
  4048d6:	47b8      	blx	r7
  4048d8:	4602      	mov	r2, r0
  4048da:	460b      	mov	r3, r1
  4048dc:	4650      	mov	r0, sl
  4048de:	4659      	mov	r1, fp
  4048e0:	4e7b      	ldr	r6, [pc, #492]	; (404ad0 <Gait0+0x610>)
  4048e2:	47b0      	blx	r6
  4048e4:	4682      	mov	sl, r0
  4048e6:	468b      	mov	fp, r1
  4048e8:	68e0      	ldr	r0, [r4, #12]
  4048ea:	47b8      	blx	r7
  4048ec:	4602      	mov	r2, r0
  4048ee:	460b      	mov	r3, r1
  4048f0:	4650      	mov	r0, sl
  4048f2:	4659      	mov	r1, fp
  4048f4:	4e77      	ldr	r6, [pc, #476]	; (404ad4 <Gait0+0x614>)
  4048f6:	47b0      	blx	r6
  4048f8:	4b72      	ldr	r3, [pc, #456]	; (404ac4 <Gait0+0x604>)
  4048fa:	4798      	blx	r3
  4048fc:	eeb0 0a48 	vmov.f32	s0, s16
  404900:	ee00 0a90 	vmov	s1, r0
  404904:	ed95 1a01 	vldr	s2, [r5, #4]
  404908:	4b73      	ldr	r3, [pc, #460]	; (404ad8 <Gait0+0x618>)
  40490a:	4798      	blx	r3
  40490c:	ed88 0a00 	vstr	s0, [r8]
  404910:	edc8 0a01 	vstr	s1, [r8, #4]
  404914:	ed88 1a02 	vstr	s2, [r8, #8]
	Ang[1] = legAngCalc(xzS[1].X,  (sin(ofst[1]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[1])-hexabot_walk->hgt)  ,xzS[1].Z);
  404918:	f108 0a0c 	add.w	sl, r8, #12
  40491c:	ed95 8a02 	vldr	s16, [r5, #8]
  404920:	f8d9 0004 	ldr.w	r0, [r9, #4]
  404924:	4b6d      	ldr	r3, [pc, #436]	; (404adc <Gait0+0x61c>)
  404926:	4798      	blx	r3
  404928:	ec41 0b10 	vmov	d0, r0, r1
  40492c:	4b66      	ldr	r3, [pc, #408]	; (404ac8 <Gait0+0x608>)
  40492e:	4798      	blx	r3
  404930:	ec51 0b10 	vmov	r0, r1, d0
  404934:	ed8d 0b00 	vstr	d0, [sp]
  404938:	2200      	movs	r2, #0
  40493a:	2300      	movs	r3, #0
  40493c:	4e63      	ldr	r6, [pc, #396]	; (404acc <Gait0+0x60c>)
  40493e:	47b0      	blx	r6
  404940:	b120      	cbz	r0, 40494c <Gait0+0x48c>
  404942:	68e0      	ldr	r0, [r4, #12]
  404944:	4240      	negs	r0, r0
  404946:	4b5e      	ldr	r3, [pc, #376]	; (404ac0 <Gait0+0x600>)
  404948:	4798      	blx	r3
  40494a:	e012      	b.n	404972 <Gait0+0x4b2>
  40494c:	4f5c      	ldr	r7, [pc, #368]	; (404ac0 <Gait0+0x600>)
  40494e:	6920      	ldr	r0, [r4, #16]
  404950:	47b8      	blx	r7
  404952:	4602      	mov	r2, r0
  404954:	460b      	mov	r3, r1
  404956:	e9dd 0100 	ldrd	r0, r1, [sp]
  40495a:	4e5d      	ldr	r6, [pc, #372]	; (404ad0 <Gait0+0x610>)
  40495c:	47b0      	blx	r6
  40495e:	e9cd 0100 	strd	r0, r1, [sp]
  404962:	68e0      	ldr	r0, [r4, #12]
  404964:	47b8      	blx	r7
  404966:	4602      	mov	r2, r0
  404968:	460b      	mov	r3, r1
  40496a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40496e:	4e59      	ldr	r6, [pc, #356]	; (404ad4 <Gait0+0x614>)
  404970:	47b0      	blx	r6
  404972:	4b54      	ldr	r3, [pc, #336]	; (404ac4 <Gait0+0x604>)
  404974:	4798      	blx	r3
  404976:	eeb0 0a48 	vmov.f32	s0, s16
  40497a:	ee00 0a90 	vmov	s1, r0
  40497e:	ed95 1a03 	vldr	s2, [r5, #12]
  404982:	4b55      	ldr	r3, [pc, #340]	; (404ad8 <Gait0+0x618>)
  404984:	4798      	blx	r3
  404986:	ed88 0a03 	vstr	s0, [r8, #12]
  40498a:	edca 0a01 	vstr	s1, [sl, #4]
  40498e:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[2] = legAngCalc(xzS[2].X,  (sin(ofst[2]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[2])-hexabot_walk->hgt)  ,xzS[2].Z);
  404992:	f108 0a18 	add.w	sl, r8, #24
  404996:	ed95 8a04 	vldr	s16, [r5, #16]
  40499a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40499e:	4b4f      	ldr	r3, [pc, #316]	; (404adc <Gait0+0x61c>)
  4049a0:	4798      	blx	r3
  4049a2:	ec41 0b10 	vmov	d0, r0, r1
  4049a6:	4b48      	ldr	r3, [pc, #288]	; (404ac8 <Gait0+0x608>)
  4049a8:	4798      	blx	r3
  4049aa:	ec51 0b10 	vmov	r0, r1, d0
  4049ae:	ed8d 0b00 	vstr	d0, [sp]
  4049b2:	2200      	movs	r2, #0
  4049b4:	2300      	movs	r3, #0
  4049b6:	4e45      	ldr	r6, [pc, #276]	; (404acc <Gait0+0x60c>)
  4049b8:	47b0      	blx	r6
  4049ba:	b120      	cbz	r0, 4049c6 <Gait0+0x506>
  4049bc:	68e0      	ldr	r0, [r4, #12]
  4049be:	4240      	negs	r0, r0
  4049c0:	4b3f      	ldr	r3, [pc, #252]	; (404ac0 <Gait0+0x600>)
  4049c2:	4798      	blx	r3
  4049c4:	e012      	b.n	4049ec <Gait0+0x52c>
  4049c6:	4f3e      	ldr	r7, [pc, #248]	; (404ac0 <Gait0+0x600>)
  4049c8:	6920      	ldr	r0, [r4, #16]
  4049ca:	47b8      	blx	r7
  4049cc:	4602      	mov	r2, r0
  4049ce:	460b      	mov	r3, r1
  4049d0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4049d4:	4e3e      	ldr	r6, [pc, #248]	; (404ad0 <Gait0+0x610>)
  4049d6:	47b0      	blx	r6
  4049d8:	e9cd 0100 	strd	r0, r1, [sp]
  4049dc:	68e0      	ldr	r0, [r4, #12]
  4049de:	47b8      	blx	r7
  4049e0:	4602      	mov	r2, r0
  4049e2:	460b      	mov	r3, r1
  4049e4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4049e8:	4e3a      	ldr	r6, [pc, #232]	; (404ad4 <Gait0+0x614>)
  4049ea:	47b0      	blx	r6
  4049ec:	4b35      	ldr	r3, [pc, #212]	; (404ac4 <Gait0+0x604>)
  4049ee:	4798      	blx	r3
  4049f0:	eeb0 0a48 	vmov.f32	s0, s16
  4049f4:	ee00 0a90 	vmov	s1, r0
  4049f8:	ed95 1a05 	vldr	s2, [r5, #20]
  4049fc:	4b36      	ldr	r3, [pc, #216]	; (404ad8 <Gait0+0x618>)
  4049fe:	4798      	blx	r3
  404a00:	ed88 0a06 	vstr	s0, [r8, #24]
  404a04:	edca 0a01 	vstr	s1, [sl, #4]
  404a08:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[3] = legAngCalc(xzS[3].X,  (sin(ofst[3]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[3])-hexabot_walk->hgt)  ,xzS[3].Z);
  404a0c:	f108 0a24 	add.w	sl, r8, #36	; 0x24
  404a10:	ed95 8a06 	vldr	s16, [r5, #24]
  404a14:	f8d9 000c 	ldr.w	r0, [r9, #12]
  404a18:	4b30      	ldr	r3, [pc, #192]	; (404adc <Gait0+0x61c>)
  404a1a:	4798      	blx	r3
  404a1c:	ec41 0b10 	vmov	d0, r0, r1
  404a20:	4b29      	ldr	r3, [pc, #164]	; (404ac8 <Gait0+0x608>)
  404a22:	4798      	blx	r3
  404a24:	ec51 0b10 	vmov	r0, r1, d0
  404a28:	ed8d 0b00 	vstr	d0, [sp]
  404a2c:	2200      	movs	r2, #0
  404a2e:	2300      	movs	r3, #0
  404a30:	4e26      	ldr	r6, [pc, #152]	; (404acc <Gait0+0x60c>)
  404a32:	47b0      	blx	r6
  404a34:	b120      	cbz	r0, 404a40 <Gait0+0x580>
  404a36:	68e0      	ldr	r0, [r4, #12]
  404a38:	4240      	negs	r0, r0
  404a3a:	4b21      	ldr	r3, [pc, #132]	; (404ac0 <Gait0+0x600>)
  404a3c:	4798      	blx	r3
  404a3e:	e012      	b.n	404a66 <Gait0+0x5a6>
  404a40:	4f1f      	ldr	r7, [pc, #124]	; (404ac0 <Gait0+0x600>)
  404a42:	6920      	ldr	r0, [r4, #16]
  404a44:	47b8      	blx	r7
  404a46:	4602      	mov	r2, r0
  404a48:	460b      	mov	r3, r1
  404a4a:	e9dd 0100 	ldrd	r0, r1, [sp]
  404a4e:	4e20      	ldr	r6, [pc, #128]	; (404ad0 <Gait0+0x610>)
  404a50:	47b0      	blx	r6
  404a52:	e9cd 0100 	strd	r0, r1, [sp]
  404a56:	68e0      	ldr	r0, [r4, #12]
  404a58:	47b8      	blx	r7
  404a5a:	4602      	mov	r2, r0
  404a5c:	460b      	mov	r3, r1
  404a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
  404a62:	4e1c      	ldr	r6, [pc, #112]	; (404ad4 <Gait0+0x614>)
  404a64:	47b0      	blx	r6
  404a66:	4b17      	ldr	r3, [pc, #92]	; (404ac4 <Gait0+0x604>)
  404a68:	4798      	blx	r3
  404a6a:	eeb0 0a48 	vmov.f32	s0, s16
  404a6e:	ee00 0a90 	vmov	s1, r0
  404a72:	ed95 1a07 	vldr	s2, [r5, #28]
  404a76:	4b18      	ldr	r3, [pc, #96]	; (404ad8 <Gait0+0x618>)
  404a78:	4798      	blx	r3
  404a7a:	ed88 0a09 	vstr	s0, [r8, #36]	; 0x24
  404a7e:	edca 0a01 	vstr	s1, [sl, #4]
  404a82:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[4] = legAngCalc(xzS[4].X,  (sin(ofst[4]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[4])-hexabot_walk->hgt)  ,xzS[4].Z);
  404a86:	f108 0a30 	add.w	sl, r8, #48	; 0x30
  404a8a:	ed95 8a08 	vldr	s16, [r5, #32]
  404a8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
  404a92:	4b12      	ldr	r3, [pc, #72]	; (404adc <Gait0+0x61c>)
  404a94:	4798      	blx	r3
  404a96:	ec41 0b10 	vmov	d0, r0, r1
  404a9a:	4b0b      	ldr	r3, [pc, #44]	; (404ac8 <Gait0+0x608>)
  404a9c:	4798      	blx	r3
  404a9e:	ec51 0b10 	vmov	r0, r1, d0
  404aa2:	ed8d 0b00 	vstr	d0, [sp]
  404aa6:	2200      	movs	r2, #0
  404aa8:	2300      	movs	r3, #0
  404aaa:	4e08      	ldr	r6, [pc, #32]	; (404acc <Gait0+0x60c>)
  404aac:	47b0      	blx	r6
  404aae:	b1b8      	cbz	r0, 404ae0 <Gait0+0x620>
  404ab0:	68e0      	ldr	r0, [r4, #12]
  404ab2:	4240      	negs	r0, r0
  404ab4:	4b02      	ldr	r3, [pc, #8]	; (404ac0 <Gait0+0x600>)
  404ab6:	4798      	blx	r3
  404ab8:	e025      	b.n	404b06 <Gait0+0x646>
  404aba:	bf00      	nop
  404abc:	00407ea9 	.word	0x00407ea9
  404ac0:	0040ac29 	.word	0x0040ac29
  404ac4:	0040b279 	.word	0x0040b279
  404ac8:	00407f51 	.word	0x00407f51
  404acc:	0040b1d9 	.word	0x0040b1d9
  404ad0:	0040acf5 	.word	0x0040acf5
  404ad4:	0040a98d 	.word	0x0040a98d
  404ad8:	00405d89 	.word	0x00405d89
  404adc:	0040ac4d 	.word	0x0040ac4d
  404ae0:	4f32      	ldr	r7, [pc, #200]	; (404bac <Gait0+0x6ec>)
  404ae2:	6920      	ldr	r0, [r4, #16]
  404ae4:	47b8      	blx	r7
  404ae6:	4602      	mov	r2, r0
  404ae8:	460b      	mov	r3, r1
  404aea:	e9dd 0100 	ldrd	r0, r1, [sp]
  404aee:	4e30      	ldr	r6, [pc, #192]	; (404bb0 <Gait0+0x6f0>)
  404af0:	47b0      	blx	r6
  404af2:	e9cd 0100 	strd	r0, r1, [sp]
  404af6:	68e0      	ldr	r0, [r4, #12]
  404af8:	47b8      	blx	r7
  404afa:	4602      	mov	r2, r0
  404afc:	460b      	mov	r3, r1
  404afe:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b02:	4e2c      	ldr	r6, [pc, #176]	; (404bb4 <Gait0+0x6f4>)
  404b04:	47b0      	blx	r6
  404b06:	4b2c      	ldr	r3, [pc, #176]	; (404bb8 <Gait0+0x6f8>)
  404b08:	4798      	blx	r3
  404b0a:	eeb0 0a48 	vmov.f32	s0, s16
  404b0e:	ee00 0a90 	vmov	s1, r0
  404b12:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  404b16:	4b29      	ldr	r3, [pc, #164]	; (404bbc <Gait0+0x6fc>)
  404b18:	4798      	blx	r3
  404b1a:	ed88 0a0c 	vstr	s0, [r8, #48]	; 0x30
  404b1e:	edca 0a01 	vstr	s1, [sl, #4]
  404b22:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[5] = legAngCalc(xzS[5].X,  (sin(ofst[5]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[5])-hexabot_walk->hgt)  ,xzS[5].Z);
  404b26:	f108 0a3c 	add.w	sl, r8, #60	; 0x3c
  404b2a:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  404b2e:	f8d9 0014 	ldr.w	r0, [r9, #20]
  404b32:	4b23      	ldr	r3, [pc, #140]	; (404bc0 <Gait0+0x700>)
  404b34:	4798      	blx	r3
  404b36:	ec41 0b10 	vmov	d0, r0, r1
  404b3a:	4b22      	ldr	r3, [pc, #136]	; (404bc4 <Gait0+0x704>)
  404b3c:	4798      	blx	r3
  404b3e:	ec51 0b10 	vmov	r0, r1, d0
  404b42:	ed8d 0b00 	vstr	d0, [sp]
  404b46:	2200      	movs	r2, #0
  404b48:	2300      	movs	r3, #0
  404b4a:	4e1f      	ldr	r6, [pc, #124]	; (404bc8 <Gait0+0x708>)
  404b4c:	47b0      	blx	r6
  404b4e:	b120      	cbz	r0, 404b5a <Gait0+0x69a>
  404b50:	68e0      	ldr	r0, [r4, #12]
  404b52:	4240      	negs	r0, r0
  404b54:	4b15      	ldr	r3, [pc, #84]	; (404bac <Gait0+0x6ec>)
  404b56:	4798      	blx	r3
  404b58:	e012      	b.n	404b80 <Gait0+0x6c0>
  404b5a:	4f14      	ldr	r7, [pc, #80]	; (404bac <Gait0+0x6ec>)
  404b5c:	6920      	ldr	r0, [r4, #16]
  404b5e:	47b8      	blx	r7
  404b60:	4602      	mov	r2, r0
  404b62:	460b      	mov	r3, r1
  404b64:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b68:	4e11      	ldr	r6, [pc, #68]	; (404bb0 <Gait0+0x6f0>)
  404b6a:	47b0      	blx	r6
  404b6c:	e9cd 0100 	strd	r0, r1, [sp]
  404b70:	68e0      	ldr	r0, [r4, #12]
  404b72:	47b8      	blx	r7
  404b74:	4602      	mov	r2, r0
  404b76:	460b      	mov	r3, r1
  404b78:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b7c:	4c0d      	ldr	r4, [pc, #52]	; (404bb4 <Gait0+0x6f4>)
  404b7e:	47a0      	blx	r4
  404b80:	4b0d      	ldr	r3, [pc, #52]	; (404bb8 <Gait0+0x6f8>)
  404b82:	4798      	blx	r3
  404b84:	eeb0 0a48 	vmov.f32	s0, s16
  404b88:	ee00 0a90 	vmov	s1, r0
  404b8c:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
  404b90:	4b0a      	ldr	r3, [pc, #40]	; (404bbc <Gait0+0x6fc>)
  404b92:	4798      	blx	r3
  404b94:	ed88 0a0f 	vstr	s0, [r8, #60]	; 0x3c
  404b98:	edca 0a01 	vstr	s1, [sl, #4]
  404b9c:	ed8a 1a02 	vstr	s2, [sl, #8]
	
}
  404ba0:	b003      	add	sp, #12
  404ba2:	ecbd 8b04 	vpop	{d8-d9}
  404ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404baa:	bf00      	nop
  404bac:	0040ac29 	.word	0x0040ac29
  404bb0:	0040acf5 	.word	0x0040acf5
  404bb4:	0040a98d 	.word	0x0040a98d
  404bb8:	0040b279 	.word	0x0040b279
  404bbc:	00405d89 	.word	0x00405d89
  404bc0:	0040ac4d 	.word	0x0040ac4d
  404bc4:	00407f51 	.word	0x00407f51
  404bc8:	0040b1d9 	.word	0x0040b1d9
  404bcc:	00000000 	.word	0x00000000

00404bd0 <Gait1>:

//Second gait function
//Shannon its pretty

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bd4:	ed2d 8b08 	vpush	{d8-d11}
  404bd8:	b087      	sub	sp, #28
  404bda:	4682      	mov	sl, r0
  404bdc:	4689      	mov	r9, r1
  404bde:	4690      	mov	r8, r2
  404be0:	461c      	mov	r4, r3
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
  404be2:	6958      	ldr	r0, [r3, #20]
  404be4:	4b8e      	ldr	r3, [pc, #568]	; (404e20 <Gait1+0x250>)
  404be6:	4798      	blx	r3
  404be8:	e9cd 0100 	strd	r0, r1, [sp]
  404bec:	4e8d      	ldr	r6, [pc, #564]	; (404e24 <Gait1+0x254>)
  404bee:	a386      	add	r3, pc, #536	; (adr r3, 404e08 <Gait1+0x238>)
  404bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404bf4:	47b0      	blx	r6
  404bf6:	4d8c      	ldr	r5, [pc, #560]	; (404e28 <Gait1+0x258>)
  404bf8:	47a8      	blx	r5
  404bfa:	ee0b 0a10 	vmov	s22, r0
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
  404bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
  404c02:	2200      	movs	r2, #0
  404c04:	4b89      	ldr	r3, [pc, #548]	; (404e2c <Gait1+0x25c>)
  404c06:	47b0      	blx	r6
  404c08:	47a8      	blx	r5
  404c0a:	9005      	str	r0, [sp, #20]
  404c0c:	4657      	mov	r7, sl
  404c0e:	46ca      	mov	sl, r9
  404c10:	46c3      	mov	fp, r8
	
	for(int i = 0; i < 6; i++) {
  404c12:	f04f 0900 	mov.w	r9, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404c16:	4d86      	ldr	r5, [pc, #536]	; (404e30 <Gait1+0x260>)
		if( ofst[i] < (5.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404c18:	eddf 8a86 	vldr	s17, [pc, #536]	; 404e34 <Gait1+0x264>
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  404c1c:	ed9f 9b7c 	vldr	d9, [pc, #496]	; 404e10 <Gait1+0x240>
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404c20:	edd4 7a06 	vldr	s15, [r4, #24]
  404c24:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  404c28:	6a60      	ldr	r0, [r4, #36]	; 0x24
  404c2a:	4b7d      	ldr	r3, [pc, #500]	; (404e20 <Gait1+0x250>)
  404c2c:	4798      	blx	r3
  404c2e:	e9cd 0100 	strd	r0, r1, [sp]
  404c32:	ee07 9a90 	vmov	s15, r9
  404c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404c3a:	ee67 7a88 	vmul.f32	s15, s15, s16
  404c3e:	ee17 0a90 	vmov	r0, s15
  404c42:	47a8      	blx	r5
  404c44:	f8df 820c 	ldr.w	r8, [pc, #524]	; 404e54 <Gait1+0x284>
  404c48:	2200      	movs	r2, #0
  404c4a:	4b7b      	ldr	r3, [pc, #492]	; (404e38 <Gait1+0x268>)
  404c4c:	47c0      	blx	r8
  404c4e:	4602      	mov	r2, r0
  404c50:	460b      	mov	r3, r1
  404c52:	e9dd 0100 	ldrd	r0, r1, [sp]
  404c56:	4e79      	ldr	r6, [pc, #484]	; (404e3c <Gait1+0x26c>)
  404c58:	47b0      	blx	r6
  404c5a:	4e73      	ldr	r6, [pc, #460]	; (404e28 <Gait1+0x258>)
  404c5c:	47b0      	blx	r6
  404c5e:	47a8      	blx	r5
  404c60:	ec41 0b1a 	vmov	d10, r0, r1
  404c64:	ee18 0a10 	vmov	r0, s16
  404c68:	47a8      	blx	r5
  404c6a:	eeb0 0a4a 	vmov.f32	s0, s20
  404c6e:	eef0 0a6a 	vmov.f32	s1, s21
  404c72:	ec41 0b11 	vmov	d1, r0, r1
  404c76:	4b72      	ldr	r3, [pc, #456]	; (404e40 <Gait1+0x270>)
  404c78:	4798      	blx	r3
  404c7a:	eeb0 aa40 	vmov.f32	s20, s0
  404c7e:	eef0 aa60 	vmov.f32	s21, s1
  404c82:	edd4 7a06 	vldr	s15, [r4, #24]
  404c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404c8a:	ee17 0a90 	vmov	r0, s15
  404c8e:	47a8      	blx	r5
  404c90:	4602      	mov	r2, r0
  404c92:	460b      	mov	r3, r1
  404c94:	ec51 0b1a 	vmov	r0, r1, d10
  404c98:	47c0      	blx	r8
  404c9a:	47b0      	blx	r6
  404c9c:	ee08 0a10 	vmov	s16, r0
  404ca0:	f847 0b04 	str.w	r0, [r7], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (5.00/6.00) ) {
  404ca4:	47a8      	blx	r5
  404ca6:	e9cd 0100 	strd	r0, r1, [sp]
  404caa:	a35b      	add	r3, pc, #364	; (adr r3, 404e18 <Gait1+0x248>)
  404cac:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cb0:	4e64      	ldr	r6, [pc, #400]	; (404e44 <Gait1+0x274>)
  404cb2:	47b0      	blx	r6
  404cb4:	b360      	cbz	r0, 404d10 <Gait1+0x140>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404cb6:	edd4 7a02 	vldr	s15, [r4, #8]
  404cba:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404cbe:	ee2b 8a08 	vmul.f32	s16, s22, s16
  404cc2:	edd4 7a05 	vldr	s15, [r4, #20]
  404cc6:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  404cca:	eeb0 0a41 	vmov.f32	s0, s2
  404cce:	ee78 0a60 	vsub.f32	s1, s16, s1
  404cd2:	eef0 1a68 	vmov.f32	s3, s17
  404cd6:	ed94 2a01 	vldr	s4, [r4, #4]
  404cda:	f009 0001 	and.w	r0, r9, #1
  404cde:	edd4 2a00 	vldr	s5, [r4]
  404ce2:	4b59      	ldr	r3, [pc, #356]	; (404e48 <Gait1+0x278>)
  404ce4:	4798      	blx	r3
  404ce6:	eeb0 1a60 	vmov.f32	s2, s1
  404cea:	ed8a 0a00 	vstr	s0, [sl]
  404cee:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404cf2:	68e3      	ldr	r3, [r4, #12]
  404cf4:	425b      	negs	r3, r3
  404cf6:	ee00 3a90 	vmov	s1, r3
  404cfa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  404cfe:	4b53      	ldr	r3, [pc, #332]	; (404e4c <Gait1+0x27c>)
  404d00:	4798      	blx	r3
  404d02:	ed8b 0a00 	vstr	s0, [fp]
  404d06:	edcb 0a01 	vstr	s1, [fp, #4]
  404d0a:	ed8b 1a02 	vstr	s2, [fp, #8]
  404d0e:	e06c      	b.n	404dea <Gait1+0x21a>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404d10:	edd4 7a02 	vldr	s15, [r4, #8]
  404d14:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  404d18:	edd4 7a05 	vldr	s15, [r4, #20]
  404d1c:	eeb8 aae7 	vcvt.f32.s32	s20, s15
  404d20:	9805      	ldr	r0, [sp, #20]
  404d22:	47a8      	blx	r5
  404d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d28:	f8df 812c 	ldr.w	r8, [pc, #300]	; 404e58 <Gait1+0x288>
  404d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
  404d30:	a339      	add	r3, pc, #228	; (adr r3, 404e18 <Gait1+0x248>)
  404d32:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d36:	47c0      	blx	r8
  404d38:	4602      	mov	r2, r0
  404d3a:	460b      	mov	r3, r1
  404d3c:	4e39      	ldr	r6, [pc, #228]	; (404e24 <Gait1+0x254>)
  404d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d42:	47b0      	blx	r6
  404d44:	4b38      	ldr	r3, [pc, #224]	; (404e28 <Gait1+0x258>)
  404d46:	4798      	blx	r3
  404d48:	eeb0 0a48 	vmov.f32	s0, s16
  404d4c:	ee07 0a90 	vmov	s15, r0
  404d50:	ee7a 0a67 	vsub.f32	s1, s20, s15
  404d54:	eeb0 1a48 	vmov.f32	s2, s16
  404d58:	eef0 1a68 	vmov.f32	s3, s17
  404d5c:	ed94 2a01 	vldr	s4, [r4, #4]
  404d60:	f009 0001 	and.w	r0, r9, #1
  404d64:	edd4 2a00 	vldr	s5, [r4]
  404d68:	4b37      	ldr	r3, [pc, #220]	; (404e48 <Gait1+0x278>)
  404d6a:	4798      	blx	r3
  404d6c:	eef0 ba40 	vmov.f32	s23, s0
  404d70:	eeb0 8a60 	vmov.f32	s16, s1
  404d74:	ed8a 0a00 	vstr	s0, [sl]
  404d78:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  404d7c:	f857 0c04 	ldr.w	r0, [r7, #-4]
  404d80:	47a8      	blx	r5
  404d82:	a325      	add	r3, pc, #148	; (adr r3, 404e18 <Gait1+0x248>)
  404d84:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d88:	47c0      	blx	r8
  404d8a:	2200      	movs	r2, #0
  404d8c:	4b2a      	ldr	r3, [pc, #168]	; (404e38 <Gait1+0x268>)
  404d8e:	47b0      	blx	r6
  404d90:	ec53 2b19 	vmov	r2, r3, d9
  404d94:	47b0      	blx	r6
  404d96:	ec41 0b10 	vmov	d0, r0, r1
  404d9a:	4b2d      	ldr	r3, [pc, #180]	; (404e50 <Gait1+0x280>)
  404d9c:	4798      	blx	r3
  404d9e:	eeb0 aa40 	vmov.f32	s20, s0
  404da2:	eef0 aa60 	vmov.f32	s21, s1
  404da6:	68e0      	ldr	r0, [r4, #12]
  404da8:	4240      	negs	r0, r0
  404daa:	4b1d      	ldr	r3, [pc, #116]	; (404e20 <Gait1+0x250>)
  404dac:	4798      	blx	r3
  404dae:	e9cd 0100 	strd	r0, r1, [sp]
  404db2:	6920      	ldr	r0, [r4, #16]
  404db4:	4b1a      	ldr	r3, [pc, #104]	; (404e20 <Gait1+0x250>)
  404db6:	4798      	blx	r3
  404db8:	ec53 2b1a 	vmov	r2, r3, d10
  404dbc:	47b0      	blx	r6
  404dbe:	4602      	mov	r2, r0
  404dc0:	460b      	mov	r3, r1
  404dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
  404dc6:	4e1d      	ldr	r6, [pc, #116]	; (404e3c <Gait1+0x26c>)
  404dc8:	47b0      	blx	r6
  404dca:	4b17      	ldr	r3, [pc, #92]	; (404e28 <Gait1+0x258>)
  404dcc:	4798      	blx	r3
  404dce:	eeb0 0a6b 	vmov.f32	s0, s23
  404dd2:	ee00 0a90 	vmov	s1, r0
  404dd6:	eeb0 1a48 	vmov.f32	s2, s16
  404dda:	4b1c      	ldr	r3, [pc, #112]	; (404e4c <Gait1+0x27c>)
  404ddc:	4798      	blx	r3
  404dde:	ed8b 0a00 	vstr	s0, [fp]
  404de2:	edcb 0a01 	vstr	s1, [fp, #4]
  404de6:	ed8b 1a02 	vstr	s2, [fp, #8]

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404dea:	f109 0901 	add.w	r9, r9, #1
  404dee:	f10a 0a08 	add.w	sl, sl, #8
  404df2:	f10b 0b0c 	add.w	fp, fp, #12
  404df6:	f1b9 0f06 	cmp.w	r9, #6
  404dfa:	f47f af11 	bne.w	404c20 <Gait1+0x50>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  404dfe:	b007      	add	sp, #28
  404e00:	ecbd 8b08 	vpop	{d8-d11}
  404e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e08:	33333333 	.word	0x33333333
  404e0c:	40033333 	.word	0x40033333
  404e10:	54442d18 	.word	0x54442d18
  404e14:	400921fb 	.word	0x400921fb
  404e18:	aaaaaaab 	.word	0xaaaaaaab
  404e1c:	3feaaaaa 	.word	0x3feaaaaa
  404e20:	0040ac29 	.word	0x0040ac29
  404e24:	0040acf5 	.word	0x0040acf5
  404e28:	0040b279 	.word	0x0040b279
  404e2c:	40280000 	.word	0x40280000
  404e30:	0040ac4d 	.word	0x0040ac4d
  404e34:	00000000 	.word	0x00000000
  404e38:	40180000 	.word	0x40180000
  404e3c:	0040a991 	.word	0x0040a991
  404e40:	00408211 	.word	0x00408211
  404e44:	0040b1d9 	.word	0x0040b1d9
  404e48:	00405b41 	.word	0x00405b41
  404e4c:	00405d89 	.word	0x00405d89
  404e50:	00407f51 	.word	0x00407f51
  404e54:	0040af49 	.word	0x0040af49
  404e58:	0040a98d 	.word	0x0040a98d
  404e5c:	00000000 	.word	0x00000000

00404e60 <Gait2>:

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e64:	ed2d 8b0a 	vpush	{d8-d12}
  404e68:	b083      	sub	sp, #12
  404e6a:	4680      	mov	r8, r0
  404e6c:	460f      	mov	r7, r1
  404e6e:	4616      	mov	r6, r2
  404e70:	461c      	mov	r4, r3
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
  404e72:	6958      	ldr	r0, [r3, #20]
  404e74:	4b8a      	ldr	r3, [pc, #552]	; (4050a0 <Gait2+0x240>)
  404e76:	4798      	blx	r3
  404e78:	2200      	movs	r2, #0
  404e7a:	4b8a      	ldr	r3, [pc, #552]	; (4050a4 <Gait2+0x244>)
  404e7c:	4d8a      	ldr	r5, [pc, #552]	; (4050a8 <Gait2+0x248>)
  404e7e:	47a8      	blx	r5
  404e80:	4b8a      	ldr	r3, [pc, #552]	; (4050ac <Gait2+0x24c>)
  404e82:	4798      	blx	r3
  404e84:	ee0b 0a90 	vmov	s23, r0
  404e88:	46ba      	mov	sl, r7
  404e8a:	46b1      	mov	r9, r6
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404e8c:	2500      	movs	r5, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404e8e:	4f88      	ldr	r7, [pc, #544]	; (4050b0 <Gait2+0x250>)
  404e90:	ed9f ab7f 	vldr	d10, [pc, #508]	; 405090 <Gait2+0x230>
		if( ofst[i] < (3.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404e94:	ed9f ba87 	vldr	s22, [pc, #540]	; 4050b4 <Gait2+0x254>
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  404e98:	ed9f 9b7f 	vldr	d9, [pc, #508]	; 405098 <Gait2+0x238>
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404e9c:	46ab      	mov	fp, r5
  404e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  404ea0:	4b7f      	ldr	r3, [pc, #508]	; (4050a0 <Gait2+0x240>)
  404ea2:	4798      	blx	r3
  404ea4:	e9cd 0100 	strd	r0, r1, [sp]
  404ea8:	1eeb      	subs	r3, r5, #3
  404eaa:	2b01      	cmp	r3, #1
  404eac:	d902      	bls.n	404eb4 <Gait2+0x54>
  404eae:	ec53 2b1a 	vmov	r2, r3, d10
  404eb2:	b96d      	cbnz	r5, 404ed0 <Gait2+0x70>
  404eb4:	edd4 7a06 	vldr	s15, [r4, #24]
  404eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404ebc:	ee17 0a90 	vmov	r0, s15
  404ec0:	47b8      	blx	r7
  404ec2:	2200      	movs	r2, #0
  404ec4:	4b7c      	ldr	r3, [pc, #496]	; (4050b8 <Gait2+0x258>)
  404ec6:	4e78      	ldr	r6, [pc, #480]	; (4050a8 <Gait2+0x248>)
  404ec8:	47b0      	blx	r6
  404eca:	4602      	mov	r2, r0
  404ecc:	460b      	mov	r3, r1
  404ece:	e7ff      	b.n	404ed0 <Gait2+0x70>
  404ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
  404ed4:	4e79      	ldr	r6, [pc, #484]	; (4050bc <Gait2+0x25c>)
  404ed6:	47b0      	blx	r6
  404ed8:	4e74      	ldr	r6, [pc, #464]	; (4050ac <Gait2+0x24c>)
  404eda:	47b0      	blx	r6
  404edc:	47b8      	blx	r7
  404ede:	ec41 0b18 	vmov	d8, r0, r1
  404ee2:	edd4 7a06 	vldr	s15, [r4, #24]
  404ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404eea:	ee17 0a90 	vmov	r0, s15
  404eee:	47b8      	blx	r7
  404ef0:	eeb0 0a48 	vmov.f32	s0, s16
  404ef4:	eef0 0a68 	vmov.f32	s1, s17
  404ef8:	ec41 0b11 	vmov	d1, r0, r1
  404efc:	4b70      	ldr	r3, [pc, #448]	; (4050c0 <Gait2+0x260>)
  404efe:	4798      	blx	r3
  404f00:	eeb0 8a40 	vmov.f32	s16, s0
  404f04:	eef0 8a60 	vmov.f32	s17, s1
  404f08:	edd4 7a06 	vldr	s15, [r4, #24]
  404f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404f10:	ee17 0a90 	vmov	r0, s15
  404f14:	47b8      	blx	r7
  404f16:	4602      	mov	r2, r0
  404f18:	460b      	mov	r3, r1
  404f1a:	ec51 0b18 	vmov	r0, r1, d8
  404f1e:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 4050d4 <Gait2+0x274>
  404f22:	47e0      	blx	ip
  404f24:	47b0      	blx	r6
  404f26:	ee08 0a10 	vmov	s16, r0
  404f2a:	f848 0b04 	str.w	r0, [r8], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (3.00/6.00) ) {
  404f2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
  404f32:	eeb4 8ae7 	vcmpe.f32	s16, s15
  404f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404f3a:	d52c      	bpl.n	404f96 <Gait2+0x136>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404f3c:	edd4 7a02 	vldr	s15, [r4, #8]
  404f40:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404f44:	ee2b 8a88 	vmul.f32	s16, s23, s16
  404f48:	edd4 7a05 	vldr	s15, [r4, #20]
  404f4c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  404f50:	eeb0 0a41 	vmov.f32	s0, s2
  404f54:	ee78 0a60 	vsub.f32	s1, s16, s1
  404f58:	eef0 1a4b 	vmov.f32	s3, s22
  404f5c:	ed94 2a01 	vldr	s4, [r4, #4]
  404f60:	f00b 0001 	and.w	r0, fp, #1
  404f64:	edd4 2a00 	vldr	s5, [r4]
  404f68:	4b56      	ldr	r3, [pc, #344]	; (4050c4 <Gait2+0x264>)
  404f6a:	4798      	blx	r3
  404f6c:	eeb0 1a60 	vmov.f32	s2, s1
  404f70:	ed8a 0a00 	vstr	s0, [sl]
  404f74:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404f78:	68e3      	ldr	r3, [r4, #12]
  404f7a:	425b      	negs	r3, r3
  404f7c:	ee00 3a90 	vmov	s1, r3
  404f80:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  404f84:	4b50      	ldr	r3, [pc, #320]	; (4050c8 <Gait2+0x268>)
  404f86:	4798      	blx	r3
  404f88:	ed89 0a00 	vstr	s0, [r9]
  404f8c:	edc9 0a01 	vstr	s1, [r9, #4]
  404f90:	ed89 1a02 	vstr	s2, [r9, #8]
  404f94:	e06e      	b.n	405074 <Gait2+0x214>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404f96:	edd4 7a02 	vldr	s15, [r4, #8]
  404f9a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404f9e:	edd4 7a05 	vldr	s15, [r4, #20]
  404fa2:	eeb8 cae7 	vcvt.f32.s32	s24, s15
  404fa6:	ee1b 0a90 	vmov	r0, s23
  404faa:	47b8      	blx	r7
  404fac:	e9cd 0100 	strd	r0, r1, [sp]
  404fb0:	ee18 0a10 	vmov	r0, s16
  404fb4:	47b8      	blx	r7
  404fb6:	2200      	movs	r2, #0
  404fb8:	4b3f      	ldr	r3, [pc, #252]	; (4050b8 <Gait2+0x258>)
  404fba:	4e44      	ldr	r6, [pc, #272]	; (4050cc <Gait2+0x26c>)
  404fbc:	47b0      	blx	r6
  404fbe:	4602      	mov	r2, r0
  404fc0:	460b      	mov	r3, r1
  404fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
  404fc6:	4e38      	ldr	r6, [pc, #224]	; (4050a8 <Gait2+0x248>)
  404fc8:	47b0      	blx	r6
  404fca:	4b38      	ldr	r3, [pc, #224]	; (4050ac <Gait2+0x24c>)
  404fcc:	4798      	blx	r3
  404fce:	eeb0 0a68 	vmov.f32	s0, s17
  404fd2:	ee07 0a90 	vmov	s15, r0
  404fd6:	ee7c 0a67 	vsub.f32	s1, s24, s15
  404fda:	eeb0 1a68 	vmov.f32	s2, s17
  404fde:	eef0 1a4b 	vmov.f32	s3, s22
  404fe2:	ed94 2a01 	vldr	s4, [r4, #4]
  404fe6:	f00b 0001 	and.w	r0, fp, #1
  404fea:	edd4 2a00 	vldr	s5, [r4]
  404fee:	4b35      	ldr	r3, [pc, #212]	; (4050c4 <Gait2+0x264>)
  404ff0:	4798      	blx	r3
  404ff2:	eef0 ca40 	vmov.f32	s25, s0
  404ff6:	eeb0 ca60 	vmov.f32	s24, s1
  404ffa:	ed8a 0a00 	vstr	s0, [sl]
  404ffe:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  405002:	f858 0c04 	ldr.w	r0, [r8, #-4]
  405006:	47b8      	blx	r7
  405008:	2200      	movs	r2, #0
  40500a:	4b2b      	ldr	r3, [pc, #172]	; (4050b8 <Gait2+0x258>)
  40500c:	4e2f      	ldr	r6, [pc, #188]	; (4050cc <Gait2+0x26c>)
  40500e:	47b0      	blx	r6
  405010:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4050bc <Gait2+0x25c>
  405014:	4602      	mov	r2, r0
  405016:	460b      	mov	r3, r1
  405018:	47d8      	blx	fp
  40501a:	ec53 2b19 	vmov	r2, r3, d9
  40501e:	4e22      	ldr	r6, [pc, #136]	; (4050a8 <Gait2+0x248>)
  405020:	47b0      	blx	r6
  405022:	ec41 0b10 	vmov	d0, r0, r1
  405026:	4b2a      	ldr	r3, [pc, #168]	; (4050d0 <Gait2+0x270>)
  405028:	4798      	blx	r3
  40502a:	eeb0 8a40 	vmov.f32	s16, s0
  40502e:	eef0 8a60 	vmov.f32	s17, s1
  405032:	68e0      	ldr	r0, [r4, #12]
  405034:	4240      	negs	r0, r0
  405036:	4b1a      	ldr	r3, [pc, #104]	; (4050a0 <Gait2+0x240>)
  405038:	4798      	blx	r3
  40503a:	e9cd 0100 	strd	r0, r1, [sp]
  40503e:	6920      	ldr	r0, [r4, #16]
  405040:	4b17      	ldr	r3, [pc, #92]	; (4050a0 <Gait2+0x240>)
  405042:	4798      	blx	r3
  405044:	ec53 2b18 	vmov	r2, r3, d8
  405048:	47b0      	blx	r6
  40504a:	4602      	mov	r2, r0
  40504c:	460b      	mov	r3, r1
  40504e:	e9dd 0100 	ldrd	r0, r1, [sp]
  405052:	47d8      	blx	fp
  405054:	4b15      	ldr	r3, [pc, #84]	; (4050ac <Gait2+0x24c>)
  405056:	4798      	blx	r3
  405058:	eeb0 0a6c 	vmov.f32	s0, s25
  40505c:	ee00 0a90 	vmov	s1, r0
  405060:	eeb0 1a4c 	vmov.f32	s2, s24
  405064:	4b18      	ldr	r3, [pc, #96]	; (4050c8 <Gait2+0x268>)
  405066:	4798      	blx	r3
  405068:	ed89 0a00 	vstr	s0, [r9]
  40506c:	edc9 0a01 	vstr	s1, [r9, #4]
  405070:	ed89 1a02 	vstr	s2, [r9, #8]

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  405074:	3501      	adds	r5, #1
  405076:	f10a 0a08 	add.w	sl, sl, #8
  40507a:	f109 090c 	add.w	r9, r9, #12
  40507e:	2d06      	cmp	r5, #6
  405080:	f47f af0c 	bne.w	404e9c <Gait2+0x3c>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  405084:	b003      	add	sp, #12
  405086:	ecbd 8b0a 	vpop	{d8-d12}
  40508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40508e:	bf00      	nop
	...
  405098:	54442d18 	.word	0x54442d18
  40509c:	400921fb 	.word	0x400921fb
  4050a0:	0040ac29 	.word	0x0040ac29
  4050a4:	40100000 	.word	0x40100000
  4050a8:	0040acf5 	.word	0x0040acf5
  4050ac:	0040b279 	.word	0x0040b279
  4050b0:	0040ac4d 	.word	0x0040ac4d
  4050b4:	00000000 	.word	0x00000000
  4050b8:	3fe00000 	.word	0x3fe00000
  4050bc:	0040a991 	.word	0x0040a991
  4050c0:	00408211 	.word	0x00408211
  4050c4:	00405b41 	.word	0x00405b41
  4050c8:	00405d89 	.word	0x00405d89
  4050cc:	0040a98d 	.word	0x0040a98d
  4050d0:	00407f51 	.word	0x00407f51
  4050d4:	0040af49 	.word	0x0040af49

004050d8 <SdramCheck>:
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to disable
 */
static inline void isi_disable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IDR = flag;
  4050d8:	4b1c      	ldr	r3, [pc, #112]	; (40514c <SdramCheck+0x74>)
  4050da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  4050de:	631a      	str	r2, [r3, #48]	; 0x30
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  4050e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4050e2:	f042 0201 	orr.w	r2, r2, #1
  4050e6:	63da      	str	r2, [r3, #60]	; 0x3c
  4050e8:	4a19      	ldr	r2, [pc, #100]	; (405150 <SdramCheck+0x78>)

//SDRAM CHECK
void SdramCheck() {
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
  4050ea:	2300      	movs	r3, #0
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
  4050ec:	f822 3f02 	strh.w	r3, [r2, #2]!
		T++;
  4050f0:	3301      	adds	r3, #1
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  4050f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4050f6:	d1f9      	bne.n	4050ec <SdramCheck+0x14>
#define REG_AECHM		0xa1	/* Exposure value - bits AEC[15:10] */
#define REG_BD50ST		0xa2	/* Banding filter value for 50Hz */
#define REG_BD60ST		0xa3	/* Banding filter value for 60Hz */

//SDRAM CHECK
void SdramCheck() {
  4050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050fc:	b088      	sub	sp, #32
  4050fe:	4d14      	ldr	r5, [pc, #80]	; (405150 <SdramCheck+0x78>)
  405100:	2101      	movs	r1, #1
  405102:	2400      	movs	r4, #0
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  405104:	f8df 8058 	ldr.w	r8, [pc, #88]	; 405160 <SdramCheck+0x88>
  405108:	4f12      	ldr	r7, [pc, #72]	; (405154 <SdramCheck+0x7c>)
			sendDebugString(buf);
  40510a:	4e13      	ldr	r6, [pc, #76]	; (405158 <SdramCheck+0x80>)
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
  40510c:	f835 2f02 	ldrh.w	r2, [r5, #2]!
  405110:	b2a3      	uxth	r3, r4
  405112:	429a      	cmp	r2, r3
  405114:	d007      	beq.n	405126 <SdramCheck+0x4e>
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  405116:	9200      	str	r2, [sp, #0]
  405118:	a803      	add	r0, sp, #12
  40511a:	4641      	mov	r1, r8
  40511c:	4622      	mov	r2, r4
  40511e:	47b8      	blx	r7
			sendDebugString(buf);
  405120:	a803      	add	r0, sp, #12
  405122:	47b0      	blx	r6
			cleanTest = 0;
  405124:	2100      	movs	r1, #0
		}
		T++;
  405126:	3401      	adds	r4, #1
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  405128:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
  40512c:	d1ee      	bne.n	40510c <SdramCheck+0x34>
			sendDebugString(buf);
			cleanTest = 0;
		}
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
  40512e:	b111      	cbz	r1, 405136 <SdramCheck+0x5e>
  405130:	480a      	ldr	r0, [pc, #40]	; (40515c <SdramCheck+0x84>)
  405132:	4b09      	ldr	r3, [pc, #36]	; (405158 <SdramCheck+0x80>)
  405134:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  405136:	4b05      	ldr	r3, [pc, #20]	; (40514c <SdramCheck+0x74>)
  405138:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  40513c:	62da      	str	r2, [r3, #44]	; 0x2c
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  40513e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405140:	f042 0201 	orr.w	r2, r2, #1
  405144:	639a      	str	r2, [r3, #56]	; 0x38
	isi_enable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_enable(ISI,1);
}
  405146:	b008      	add	sp, #32
  405148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40514c:	4004c000 	.word	0x4004c000
  405150:	6ffffffe 	.word	0x6ffffffe
  405154:	0040bb79 	.word	0x0040bb79
  405158:	0040019d 	.word	0x0040019d
  40515c:	00413484 	.word	0x00413484
  405160:	00413458 	.word	0x00413458

00405164 <i2cWriteReg>:

//I2C interfacing
void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  405164:	b500      	push	{lr}
  405166:	b089      	sub	sp, #36	; 0x24
  405168:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  40516c:	2300      	movs	r3, #0
  40516e:	9303      	str	r3, [sp, #12]
  405170:	9307      	str	r3, [sp, #28]
  405172:	f88d 100c 	strb.w	r1, [sp, #12]
  405176:	2301      	movs	r3, #1
  405178:	9304      	str	r3, [sp, #16]
  40517a:	f10d 0207 	add.w	r2, sp, #7
  40517e:	9205      	str	r2, [sp, #20]
  405180:	9306      	str	r3, [sp, #24]
  405182:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  405186:	4805      	ldr	r0, [pc, #20]	; (40519c <i2cWriteReg+0x38>)
  405188:	a903      	add	r1, sp, #12
  40518a:	4b05      	ldr	r3, [pc, #20]	; (4051a0 <i2cWriteReg+0x3c>)
  40518c:	4798      	blx	r3
  40518e:	b110      	cbz	r0, 405196 <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  405190:	4804      	ldr	r0, [pc, #16]	; (4051a4 <i2cWriteReg+0x40>)
  405192:	4b05      	ldr	r3, [pc, #20]	; (4051a8 <i2cWriteReg+0x44>)
  405194:	4798      	blx	r3
	}
}
  405196:	b009      	add	sp, #36	; 0x24
  405198:	f85d fb04 	ldr.w	pc, [sp], #4
  40519c:	40018000 	.word	0x40018000
  4051a0:	00402c45 	.word	0x00402c45
  4051a4:	004134a0 	.word	0x004134a0
  4051a8:	0040019d 	.word	0x0040019d

004051ac <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  4051ac:	b500      	push	{lr}
  4051ae:	b087      	sub	sp, #28
	int retVal = 0;
  4051b0:	2300      	movs	r3, #0
  4051b2:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  4051b4:	9300      	str	r3, [sp, #0]
  4051b6:	9304      	str	r3, [sp, #16]
  4051b8:	f88d 1000 	strb.w	r1, [sp]
  4051bc:	2301      	movs	r3, #1
  4051be:	9301      	str	r3, [sp, #4]
  4051c0:	aa05      	add	r2, sp, #20
  4051c2:	9202      	str	r2, [sp, #8]
  4051c4:	9303      	str	r3, [sp, #12]
  4051c6:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  4051ca:	4804      	ldr	r0, [pc, #16]	; (4051dc <i2cReadReg+0x30>)
  4051cc:	4669      	mov	r1, sp
  4051ce:	4b04      	ldr	r3, [pc, #16]	; (4051e0 <i2cReadReg+0x34>)
  4051d0:	4798      	blx	r3
	return retVal;
}
  4051d2:	9805      	ldr	r0, [sp, #20]
  4051d4:	b007      	add	sp, #28
  4051d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4051da:	bf00      	nop
  4051dc:	40018000 	.word	0x40018000
  4051e0:	00402ae9 	.word	0x00402ae9

004051e4 <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  4051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4051e8:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  4051ea:	b2c4      	uxtb	r4, r0
  4051ec:	4620      	mov	r0, r4
  4051ee:	2100      	movs	r1, #0
  4051f0:	4f2a      	ldr	r7, [pc, #168]	; (40529c <ServoDriverInit+0xb8>)
  4051f2:	47b8      	blx	r7
  4051f4:	4602      	mov	r2, r0
  4051f6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4052b4 <ServoDriverInit+0xd0>
  4051fa:	a801      	add	r0, sp, #4
  4051fc:	4641      	mov	r1, r8
  4051fe:	4d28      	ldr	r5, [pc, #160]	; (4052a0 <ServoDriverInit+0xbc>)
  405200:	47a8      	blx	r5
	sendDebugString(buf);
  405202:	a801      	add	r0, sp, #4
  405204:	4e27      	ldr	r6, [pc, #156]	; (4052a4 <ServoDriverInit+0xc0>)
  405206:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  405208:	4620      	mov	r0, r4
  40520a:	2101      	movs	r1, #1
  40520c:	47b8      	blx	r7
  40520e:	4602      	mov	r2, r0
  405210:	a801      	add	r0, sp, #4
  405212:	4641      	mov	r1, r8
  405214:	47a8      	blx	r5
	sendDebugString(buf);
  405216:	a801      	add	r0, sp, #4
  405218:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  40521a:	4620      	mov	r0, r4
  40521c:	211e      	movs	r1, #30
  40521e:	47b8      	blx	r7
  405220:	4602      	mov	r2, r0
  405222:	a801      	add	r0, sp, #4
  405224:	4641      	mov	r1, r8
  405226:	47a8      	blx	r5
	sendDebugString(buf);
  405228:	a801      	add	r0, sp, #4
  40522a:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  40522c:	4620      	mov	r0, r4
  40522e:	21fe      	movs	r1, #254	; 0xfe
  405230:	47b8      	blx	r7
  405232:	4602      	mov	r2, r0
  405234:	a801      	add	r0, sp, #4
  405236:	4641      	mov	r1, r8
  405238:	47a8      	blx	r5
	sendDebugString(buf);
  40523a:	a801      	add	r0, sp, #4
  40523c:	47b0      	blx	r6
	
	delay_ms(1);
  40523e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  405242:	4f19      	ldr	r7, [pc, #100]	; (4052a8 <ServoDriverInit+0xc4>)
  405244:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  405246:	4620      	mov	r0, r4
  405248:	2100      	movs	r1, #0
  40524a:	2210      	movs	r2, #16
  40524c:	4d17      	ldr	r5, [pc, #92]	; (4052ac <ServoDriverInit+0xc8>)
  40524e:	47a8      	blx	r5
	delay_ms(2);
  405250:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4052b8 <ServoDriverInit+0xd4>
  405254:	4640      	mov	r0, r8
  405256:	47b8      	blx	r7
	//The following line was changed from a reg value of 0x80 to 0x1E, resulting in a longest pulse of 5ms from 20ms
	i2cWriteReg(ServoAddr,0xFE,0x1E);
  405258:	4620      	mov	r0, r4
  40525a:	21fe      	movs	r1, #254	; 0xfe
  40525c:	221e      	movs	r2, #30
  40525e:	47a8      	blx	r5
	delay_ms(2);
  405260:	4640      	mov	r0, r8
  405262:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  405264:	4620      	mov	r0, r4
  405266:	2100      	movs	r1, #0
  405268:	460a      	mov	r2, r1
  40526a:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  40526c:	4620      	mov	r0, r4
  40526e:	2100      	movs	r1, #0
  405270:	2210      	movs	r2, #16
  405272:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  405274:	4620      	mov	r0, r4
  405276:	2101      	movs	r1, #1
  405278:	2204      	movs	r2, #4
  40527a:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  40527c:	4620      	mov	r0, r4
  40527e:	2100      	movs	r1, #0
  405280:	460a      	mov	r2, r1
  405282:	47a8      	blx	r5
	delay_ms(2);
  405284:	4640      	mov	r0, r8
  405286:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  405288:	4620      	mov	r0, r4
  40528a:	2100      	movs	r1, #0
  40528c:	2280      	movs	r2, #128	; 0x80
  40528e:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  405290:	4807      	ldr	r0, [pc, #28]	; (4052b0 <ServoDriverInit+0xcc>)
  405292:	47b0      	blx	r6
}
  405294:	b006      	add	sp, #24
  405296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40529a:	bf00      	nop
  40529c:	004051ad 	.word	0x004051ad
  4052a0:	0040bb79 	.word	0x0040bb79
  4052a4:	0040019d 	.word	0x0040019d
  4052a8:	20400001 	.word	0x20400001
  4052ac:	00405165 	.word	0x00405165
  4052b0:	004134b4 	.word	0x004134b4
  4052b4:	004134ac 	.word	0x004134ac
  4052b8:	00018b1b 	.word	0x00018b1b

004052bc <legGetI2Caddr>:
	memaddr[0] = Ain;
	memaddr[1] = Bin;
}

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
  4052bc:	2805      	cmp	r0, #5
  4052be:	d87b      	bhi.n	4053b8 <legGetI2Caddr+0xfc>
  4052c0:	e8df f000 	tbb	[pc, r0]
  4052c4:	3f2b1703 	.word	0x3f2b1703
  4052c8:	6753      	.short	0x6753
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
  4052ca:	b921      	cbnz	r1, 4052d6 <legGetI2Caddr+0x1a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052cc:	2340      	movs	r3, #64	; 0x40
  4052ce:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052d0:	231e      	movs	r3, #30
  4052d2:	6053      	str	r3, [r2, #4]
  4052d4:	4770      	bx	lr

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
  4052d6:	2901      	cmp	r1, #1
  4052d8:	d104      	bne.n	4052e4 <legGetI2Caddr+0x28>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052da:	2340      	movs	r3, #64	; 0x40
  4052dc:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052de:	2322      	movs	r3, #34	; 0x22
  4052e0:	6053      	str	r3, [r2, #4]
  4052e2:	4770      	bx	lr
void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
  4052e4:	2902      	cmp	r1, #2
  4052e6:	d167      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052e8:	2340      	movs	r3, #64	; 0x40
  4052ea:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052ec:	2326      	movs	r3, #38	; 0x26
  4052ee:	6053      	str	r3, [r2, #4]
  4052f0:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
  4052f2:	b921      	cbnz	r1, 4052fe <legGetI2Caddr+0x42>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052f4:	2341      	movs	r3, #65	; 0x41
  4052f6:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052f8:	2306      	movs	r3, #6
  4052fa:	6053      	str	r3, [r2, #4]
  4052fc:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
  4052fe:	2901      	cmp	r1, #1
  405300:	d104      	bne.n	40530c <legGetI2Caddr+0x50>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405302:	2341      	movs	r3, #65	; 0x41
  405304:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405306:	230a      	movs	r3, #10
  405308:	6053      	str	r3, [r2, #4]
  40530a:	4770      	bx	lr
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
  40530c:	2902      	cmp	r1, #2
  40530e:	d153      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405310:	2341      	movs	r3, #65	; 0x41
  405312:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405314:	230e      	movs	r3, #14
  405316:	6053      	str	r3, [r2, #4]
  405318:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
  40531a:	b921      	cbnz	r1, 405326 <legGetI2Caddr+0x6a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40531c:	2340      	movs	r3, #64	; 0x40
  40531e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405320:	2312      	movs	r3, #18
  405322:	6053      	str	r3, [r2, #4]
  405324:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
  405326:	2901      	cmp	r1, #1
  405328:	d104      	bne.n	405334 <legGetI2Caddr+0x78>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40532a:	2340      	movs	r3, #64	; 0x40
  40532c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40532e:	2316      	movs	r3, #22
  405330:	6053      	str	r3, [r2, #4]
  405332:	4770      	bx	lr
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
  405334:	2902      	cmp	r1, #2
  405336:	d13f      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405338:	2340      	movs	r3, #64	; 0x40
  40533a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40533c:	231a      	movs	r3, #26
  40533e:	6053      	str	r3, [r2, #4]
  405340:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
  405342:	b921      	cbnz	r1, 40534e <legGetI2Caddr+0x92>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405344:	2341      	movs	r3, #65	; 0x41
  405346:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405348:	2312      	movs	r3, #18
  40534a:	6053      	str	r3, [r2, #4]
  40534c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
  40534e:	2901      	cmp	r1, #1
  405350:	d104      	bne.n	40535c <legGetI2Caddr+0xa0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405352:	2341      	movs	r3, #65	; 0x41
  405354:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405356:	2316      	movs	r3, #22
  405358:	6053      	str	r3, [r2, #4]
  40535a:	4770      	bx	lr
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
  40535c:	2902      	cmp	r1, #2
  40535e:	d12b      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405360:	2341      	movs	r3, #65	; 0x41
  405362:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405364:	231a      	movs	r3, #26
  405366:	6053      	str	r3, [r2, #4]
  405368:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
  40536a:	b921      	cbnz	r1, 405376 <legGetI2Caddr+0xba>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40536c:	2340      	movs	r3, #64	; 0x40
  40536e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405370:	2306      	movs	r3, #6
  405372:	6053      	str	r3, [r2, #4]
  405374:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
  405376:	2901      	cmp	r1, #1
  405378:	d104      	bne.n	405384 <legGetI2Caddr+0xc8>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40537a:	2340      	movs	r3, #64	; 0x40
  40537c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40537e:	230a      	movs	r3, #10
  405380:	6053      	str	r3, [r2, #4]
  405382:	4770      	bx	lr
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
  405384:	2902      	cmp	r1, #2
  405386:	d117      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405388:	2340      	movs	r3, #64	; 0x40
  40538a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40538c:	230e      	movs	r3, #14
  40538e:	6053      	str	r3, [r2, #4]
  405390:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
  405392:	b921      	cbnz	r1, 40539e <legGetI2Caddr+0xe2>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405394:	2341      	movs	r3, #65	; 0x41
  405396:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405398:	231e      	movs	r3, #30
  40539a:	6053      	str	r3, [r2, #4]
  40539c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
  40539e:	2901      	cmp	r1, #1
  4053a0:	d104      	bne.n	4053ac <legGetI2Caddr+0xf0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4053a2:	2341      	movs	r3, #65	; 0x41
  4053a4:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4053a6:	2322      	movs	r3, #34	; 0x22
  4053a8:	6053      	str	r3, [r2, #4]
  4053aa:	4770      	bx	lr
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L5_S2_ADDR,addr);
  4053ac:	2902      	cmp	r1, #2
  4053ae:	d103      	bne.n	4053b8 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4053b0:	2341      	movs	r3, #65	; 0x41
  4053b2:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4053b4:	2326      	movs	r3, #38	; 0x26
  4053b6:	6053      	str	r3, [r2, #4]
  4053b8:	4770      	bx	lr
  4053ba:	bf00      	nop

004053bc <relaxServo>:
	}
}

//Servo controller wrapper
void relaxServo(int Leg, int svo)
{
  4053bc:	b510      	push	{r4, lr}
  4053be:	b082      	sub	sp, #8
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  4053c0:	466a      	mov	r2, sp
  4053c2:	4b10      	ldr	r3, [pc, #64]	; (405404 <relaxServo+0x48>)
  4053c4:	4798      	blx	r3
	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  4053c6:	f89d 0000 	ldrb.w	r0, [sp]
  4053ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4053ce:	2200      	movs	r2, #0
  4053d0:	4c0d      	ldr	r4, [pc, #52]	; (405408 <relaxServo+0x4c>)
  4053d2:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  4053d4:	9901      	ldr	r1, [sp, #4]
  4053d6:	3101      	adds	r1, #1
  4053d8:	f89d 0000 	ldrb.w	r0, [sp]
  4053dc:	b2c9      	uxtb	r1, r1
  4053de:	2200      	movs	r2, #0
  4053e0:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,0x00);
  4053e2:	9901      	ldr	r1, [sp, #4]
  4053e4:	3102      	adds	r1, #2
  4053e6:	f89d 0000 	ldrb.w	r0, [sp]
  4053ea:	b2c9      	uxtb	r1, r1
  4053ec:	2200      	movs	r2, #0
  4053ee:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,0x00);
  4053f0:	9901      	ldr	r1, [sp, #4]
  4053f2:	3103      	adds	r1, #3
  4053f4:	f89d 0000 	ldrb.w	r0, [sp]
  4053f8:	b2c9      	uxtb	r1, r1
  4053fa:	2200      	movs	r2, #0
  4053fc:	47a0      	blx	r4
	
	
}
  4053fe:	b002      	add	sp, #8
  405400:	bd10      	pop	{r4, pc}
  405402:	bf00      	nop
  405404:	004052bd 	.word	0x004052bd
  405408:	00405165 	.word	0x00405165
  40540c:	00000000 	.word	0x00000000

00405410 <WriteServo>:

void WriteServo(int Leg,int svo,float angle)
{
  405410:	b530      	push	{r4, r5, lr}
  405412:	ed2d 8b02 	vpush	{d8}
  405416:	b083      	sub	sp, #12
  405418:	4605      	mov	r5, r0
  40541a:	460c      	mov	r4, r1
  40541c:	eeb0 8a40 	vmov.f32	s16, s0
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  405420:	466a      	mov	r2, sp
  405422:	4b2f      	ldr	r3, [pc, #188]	; (4054e0 <WriteServo+0xd0>)
  405424:	4798      	blx	r3
	extern float SvoCal[];
	
	angle = angle - SvoCal[svo*12+2*Leg];
  405426:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  40542a:	eb05 0040 	add.w	r0, r5, r0, lsl #1
  40542e:	4b2d      	ldr	r3, [pc, #180]	; (4054e4 <WriteServo+0xd4>)
  405430:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  405434:	ed90 0a00 	vldr	s0, [r0]
  405438:	ee38 0a40 	vsub.f32	s0, s16, s0
	
	if(svo == 2) angle = 180-angle;
  40543c:	2c02      	cmp	r4, #2
  40543e:	d103      	bne.n	405448 <WriteServo+0x38>
  405440:	eddf 7a29 	vldr	s15, [pc, #164]	; 4054e8 <WriteServo+0xd8>
  405444:	ee37 0ac0 	vsub.f32	s0, s15, s0
	
	uint16_t stop = (uint16_t)lroundf( (4095.00/(5.00))*(0.550 + 1.900*(angle/180.00)) );
  405448:	ee10 0a10 	vmov	r0, s0
  40544c:	4b27      	ldr	r3, [pc, #156]	; (4054ec <WriteServo+0xdc>)
  40544e:	4798      	blx	r3
  405450:	2200      	movs	r2, #0
  405452:	4b27      	ldr	r3, [pc, #156]	; (4054f0 <WriteServo+0xe0>)
  405454:	4c27      	ldr	r4, [pc, #156]	; (4054f4 <WriteServo+0xe4>)
  405456:	47a0      	blx	r4
  405458:	4c27      	ldr	r4, [pc, #156]	; (4054f8 <WriteServo+0xe8>)
  40545a:	a31b      	add	r3, pc, #108	; (adr r3, 4054c8 <WriteServo+0xb8>)
  40545c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405460:	47a0      	blx	r4
  405462:	a31b      	add	r3, pc, #108	; (adr r3, 4054d0 <WriteServo+0xc0>)
  405464:	e9d3 2300 	ldrd	r2, r3, [r3]
  405468:	4d24      	ldr	r5, [pc, #144]	; (4054fc <WriteServo+0xec>)
  40546a:	47a8      	blx	r5
  40546c:	a31a      	add	r3, pc, #104	; (adr r3, 4054d8 <WriteServo+0xc8>)
  40546e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405472:	47a0      	blx	r4
  405474:	4b22      	ldr	r3, [pc, #136]	; (405500 <WriteServo+0xf0>)
  405476:	4798      	blx	r3
  405478:	ee00 0a10 	vmov	s0, r0
  40547c:	4b21      	ldr	r3, [pc, #132]	; (405504 <WriteServo+0xf4>)
  40547e:	4798      	blx	r3
  405480:	4605      	mov	r5, r0
	//sendDebugString(buf);	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  405482:	f89d 0000 	ldrb.w	r0, [sp]
  405486:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40548a:	2200      	movs	r2, #0
  40548c:	4c1e      	ldr	r4, [pc, #120]	; (405508 <WriteServo+0xf8>)
  40548e:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  405490:	9901      	ldr	r1, [sp, #4]
  405492:	3101      	adds	r1, #1
  405494:	f89d 0000 	ldrb.w	r0, [sp]
  405498:	b2c9      	uxtb	r1, r1
  40549a:	2200      	movs	r2, #0
  40549c:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,stop);
  40549e:	9901      	ldr	r1, [sp, #4]
  4054a0:	3102      	adds	r1, #2
  4054a2:	f89d 0000 	ldrb.w	r0, [sp]
  4054a6:	b2c9      	uxtb	r1, r1
  4054a8:	b2ea      	uxtb	r2, r5
  4054aa:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,stop >> 8);
  4054ac:	9901      	ldr	r1, [sp, #4]
  4054ae:	3103      	adds	r1, #3
  4054b0:	f89d 0000 	ldrb.w	r0, [sp]
  4054b4:	b2c9      	uxtb	r1, r1
  4054b6:	f3c5 2207 	ubfx	r2, r5, #8, #8
  4054ba:	47a0      	blx	r4
	
}
  4054bc:	b003      	add	sp, #12
  4054be:	ecbd 8b02 	vpop	{d8}
  4054c2:	bd30      	pop	{r4, r5, pc}
  4054c4:	f3af 8000 	nop.w
  4054c8:	66666666 	.word	0x66666666
  4054cc:	3ffe6666 	.word	0x3ffe6666
  4054d0:	9999999a 	.word	0x9999999a
  4054d4:	3fe19999 	.word	0x3fe19999
  4054d8:	00000000 	.word	0x00000000
  4054dc:	40899800 	.word	0x40899800
  4054e0:	004052bd 	.word	0x004052bd
  4054e4:	20400018 	.word	0x20400018
  4054e8:	43340000 	.word	0x43340000
  4054ec:	0040ac4d 	.word	0x0040ac4d
  4054f0:	40668000 	.word	0x40668000
  4054f4:	0040af49 	.word	0x0040af49
  4054f8:	0040acf5 	.word	0x0040acf5
  4054fc:	0040a991 	.word	0x0040a991
  405500:	0040b279 	.word	0x0040b279
  405504:	00408011 	.word	0x00408011
  405508:	00405165 	.word	0x00405165

0040550c <SetupCameraYUVVGA_OV7670>:
	for(int i = 0;  ov_settings[i][0] != 0xff;i++ ) write_SCCB(ov_settings[i][0],ov_settings[i][1]);
	for(int i = 0; ov_format[i] != 0xff;i++ ) write_SCCB(ov_format[i],ov_vga[1]);
	
}

void SetupCameraYUVVGA_OV7670() {
  40550c:	b510      	push	{r4, lr}
	//Input clock 24Mhz,0x25fps
	write_SCCB_76(0x12,0x80);
  40550e:	2021      	movs	r0, #33	; 0x21
  405510:	2112      	movs	r1, #18
  405512:	2280      	movs	r2, #128	; 0x80
  405514:	4cca      	ldr	r4, [pc, #808]	; (405840 <SetupCameraYUVVGA_OV7670+0x334>)
  405516:	47a0      	blx	r4
	write_SCCB_76(0x11,0x00);
  405518:	2021      	movs	r0, #33	; 0x21
  40551a:	2111      	movs	r1, #17
  40551c:	2200      	movs	r2, #0
  40551e:	47a0      	blx	r4
	write_SCCB_76(0x3a,0x04);
  405520:	2021      	movs	r0, #33	; 0x21
  405522:	213a      	movs	r1, #58	; 0x3a
  405524:	2204      	movs	r2, #4
  405526:	47a0      	blx	r4
	write_SCCB_76(0x12,0x00);
  405528:	2021      	movs	r0, #33	; 0x21
  40552a:	2112      	movs	r1, #18
  40552c:	2200      	movs	r2, #0
  40552e:	47a0      	blx	r4
	write_SCCB_76(0x17,0x13);
  405530:	2021      	movs	r0, #33	; 0x21
  405532:	2117      	movs	r1, #23
  405534:	2213      	movs	r2, #19
  405536:	47a0      	blx	r4
	write_SCCB_76(0x18,0x01);
  405538:	2021      	movs	r0, #33	; 0x21
  40553a:	2118      	movs	r1, #24
  40553c:	2201      	movs	r2, #1
  40553e:	47a0      	blx	r4
	write_SCCB_76(0x32,0xb6);
  405540:	2021      	movs	r0, #33	; 0x21
  405542:	2132      	movs	r1, #50	; 0x32
  405544:	22b6      	movs	r2, #182	; 0xb6
  405546:	47a0      	blx	r4
	write_SCCB_76(0x19,0x02);
  405548:	2021      	movs	r0, #33	; 0x21
  40554a:	2119      	movs	r1, #25
  40554c:	2202      	movs	r2, #2
  40554e:	47a0      	blx	r4
	write_SCCB_76(0x1a,0x7a);
  405550:	2021      	movs	r0, #33	; 0x21
  405552:	211a      	movs	r1, #26
  405554:	227a      	movs	r2, #122	; 0x7a
  405556:	47a0      	blx	r4
	write_SCCB_76(0x03,0x0a);
  405558:	2021      	movs	r0, #33	; 0x21
  40555a:	2103      	movs	r1, #3
  40555c:	220a      	movs	r2, #10
  40555e:	47a0      	blx	r4
	write_SCCB_76(0x0c,0x00);
  405560:	2021      	movs	r0, #33	; 0x21
  405562:	210c      	movs	r1, #12
  405564:	2200      	movs	r2, #0
  405566:	47a0      	blx	r4
	write_SCCB_76(0x3e,0x00);
  405568:	2021      	movs	r0, #33	; 0x21
  40556a:	213e      	movs	r1, #62	; 0x3e
  40556c:	2200      	movs	r2, #0
  40556e:	47a0      	blx	r4
	write_SCCB_76(0x70,0x3a);
  405570:	2021      	movs	r0, #33	; 0x21
  405572:	2170      	movs	r1, #112	; 0x70
  405574:	223a      	movs	r2, #58	; 0x3a
  405576:	47a0      	blx	r4
	write_SCCB_76(0x71,0x35);
  405578:	2021      	movs	r0, #33	; 0x21
  40557a:	2171      	movs	r1, #113	; 0x71
  40557c:	2235      	movs	r2, #53	; 0x35
  40557e:	47a0      	blx	r4
	write_SCCB_76(0x72,0x11);
  405580:	2021      	movs	r0, #33	; 0x21
  405582:	2172      	movs	r1, #114	; 0x72
  405584:	2211      	movs	r2, #17
  405586:	47a0      	blx	r4
	write_SCCB_76(0x73,0xf0);
  405588:	2021      	movs	r0, #33	; 0x21
  40558a:	2173      	movs	r1, #115	; 0x73
  40558c:	22f0      	movs	r2, #240	; 0xf0
  40558e:	47a0      	blx	r4
	write_SCCB_76(0xa2,0x02);
  405590:	2021      	movs	r0, #33	; 0x21
  405592:	21a2      	movs	r1, #162	; 0xa2
  405594:	2202      	movs	r2, #2
  405596:	47a0      	blx	r4
	write_SCCB_76(0x7a,0x20);
  405598:	2021      	movs	r0, #33	; 0x21
  40559a:	217a      	movs	r1, #122	; 0x7a
  40559c:	2220      	movs	r2, #32
  40559e:	47a0      	blx	r4
	write_SCCB_76(0x7b,0x10);
  4055a0:	2021      	movs	r0, #33	; 0x21
  4055a2:	217b      	movs	r1, #123	; 0x7b
  4055a4:	2210      	movs	r2, #16
  4055a6:	47a0      	blx	r4
	write_SCCB_76(0x7c,0x1e);
  4055a8:	2021      	movs	r0, #33	; 0x21
  4055aa:	217c      	movs	r1, #124	; 0x7c
  4055ac:	221e      	movs	r2, #30
  4055ae:	47a0      	blx	r4
	write_SCCB_76(0x7d,0x35);
  4055b0:	2021      	movs	r0, #33	; 0x21
  4055b2:	217d      	movs	r1, #125	; 0x7d
  4055b4:	2235      	movs	r2, #53	; 0x35
  4055b6:	47a0      	blx	r4
	write_SCCB_76(0x7e,0x5a);
  4055b8:	2021      	movs	r0, #33	; 0x21
  4055ba:	217e      	movs	r1, #126	; 0x7e
  4055bc:	225a      	movs	r2, #90	; 0x5a
  4055be:	47a0      	blx	r4
	write_SCCB_76(0x7f,0x69);
  4055c0:	2021      	movs	r0, #33	; 0x21
  4055c2:	217f      	movs	r1, #127	; 0x7f
  4055c4:	2269      	movs	r2, #105	; 0x69
  4055c6:	47a0      	blx	r4
	write_SCCB_76(0x80,0x76);
  4055c8:	2021      	movs	r0, #33	; 0x21
  4055ca:	2180      	movs	r1, #128	; 0x80
  4055cc:	2276      	movs	r2, #118	; 0x76
  4055ce:	47a0      	blx	r4
	write_SCCB_76(0x81,0x80);
  4055d0:	2021      	movs	r0, #33	; 0x21
  4055d2:	2181      	movs	r1, #129	; 0x81
  4055d4:	2280      	movs	r2, #128	; 0x80
  4055d6:	47a0      	blx	r4
	write_SCCB_76(0x82,0x88);
  4055d8:	2021      	movs	r0, #33	; 0x21
  4055da:	2182      	movs	r1, #130	; 0x82
  4055dc:	2288      	movs	r2, #136	; 0x88
  4055de:	47a0      	blx	r4
	write_SCCB_76(0x83,0x8f);
  4055e0:	2021      	movs	r0, #33	; 0x21
  4055e2:	2183      	movs	r1, #131	; 0x83
  4055e4:	228f      	movs	r2, #143	; 0x8f
  4055e6:	47a0      	blx	r4
	write_SCCB_76(0x84,0x96);
  4055e8:	2021      	movs	r0, #33	; 0x21
  4055ea:	2184      	movs	r1, #132	; 0x84
  4055ec:	2296      	movs	r2, #150	; 0x96
  4055ee:	47a0      	blx	r4
	write_SCCB_76(0x85,0xa3);
  4055f0:	2021      	movs	r0, #33	; 0x21
  4055f2:	2185      	movs	r1, #133	; 0x85
  4055f4:	22a3      	movs	r2, #163	; 0xa3
  4055f6:	47a0      	blx	r4
	write_SCCB_76(0x86,0xaf);
  4055f8:	2021      	movs	r0, #33	; 0x21
  4055fa:	2186      	movs	r1, #134	; 0x86
  4055fc:	22af      	movs	r2, #175	; 0xaf
  4055fe:	47a0      	blx	r4
	write_SCCB_76(0x87,0xc4);
  405600:	2021      	movs	r0, #33	; 0x21
  405602:	2187      	movs	r1, #135	; 0x87
  405604:	22c4      	movs	r2, #196	; 0xc4
  405606:	47a0      	blx	r4
	write_SCCB_76(0x88,0xd7);
  405608:	2021      	movs	r0, #33	; 0x21
  40560a:	2188      	movs	r1, #136	; 0x88
  40560c:	22d7      	movs	r2, #215	; 0xd7
  40560e:	47a0      	blx	r4
	write_SCCB_76(0x89,0xe8);
  405610:	2021      	movs	r0, #33	; 0x21
  405612:	2189      	movs	r1, #137	; 0x89
  405614:	22e8      	movs	r2, #232	; 0xe8
  405616:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  405618:	2021      	movs	r0, #33	; 0x21
  40561a:	2113      	movs	r1, #19
  40561c:	22e7      	movs	r2, #231	; 0xe7
  40561e:	47a0      	blx	r4
	write_SCCB_76(0x01,0x28);
  405620:	2021      	movs	r0, #33	; 0x21
  405622:	2101      	movs	r1, #1
  405624:	2228      	movs	r2, #40	; 0x28
  405626:	47a0      	blx	r4
	write_SCCB_76(0x02,0x30);
  405628:	2021      	movs	r0, #33	; 0x21
  40562a:	2102      	movs	r1, #2
  40562c:	2230      	movs	r2, #48	; 0x30
  40562e:	47a0      	blx	r4
	write_SCCB_76(0x00,0x00);
  405630:	2021      	movs	r0, #33	; 0x21
  405632:	2100      	movs	r1, #0
  405634:	460a      	mov	r2, r1
  405636:	47a0      	blx	r4
	write_SCCB_76(0x10,0x00);
  405638:	2021      	movs	r0, #33	; 0x21
  40563a:	2110      	movs	r1, #16
  40563c:	2200      	movs	r2, #0
  40563e:	47a0      	blx	r4
	write_SCCB_76(0x0d,0x40);
  405640:	2021      	movs	r0, #33	; 0x21
  405642:	210d      	movs	r1, #13
  405644:	2240      	movs	r2, #64	; 0x40
  405646:	47a0      	blx	r4
	write_SCCB_76(0x14,0x18);
  405648:	2021      	movs	r0, #33	; 0x21
  40564a:	2114      	movs	r1, #20
  40564c:	2218      	movs	r2, #24
  40564e:	47a0      	blx	r4
	write_SCCB_76(0xa5,0x07);
  405650:	2021      	movs	r0, #33	; 0x21
  405652:	21a5      	movs	r1, #165	; 0xa5
  405654:	2207      	movs	r2, #7
  405656:	47a0      	blx	r4
	write_SCCB_76(0xab,0x08);
  405658:	2021      	movs	r0, #33	; 0x21
  40565a:	21ab      	movs	r1, #171	; 0xab
  40565c:	2208      	movs	r2, #8
  40565e:	47a0      	blx	r4
	write_SCCB_76(0x24,0x95);
  405660:	2021      	movs	r0, #33	; 0x21
  405662:	2124      	movs	r1, #36	; 0x24
  405664:	2295      	movs	r2, #149	; 0x95
  405666:	47a0      	blx	r4
	write_SCCB_76(0x25,0x33);
  405668:	2021      	movs	r0, #33	; 0x21
  40566a:	2125      	movs	r1, #37	; 0x25
  40566c:	2233      	movs	r2, #51	; 0x33
  40566e:	47a0      	blx	r4
	write_SCCB_76(0x26,0xe3);
  405670:	2021      	movs	r0, #33	; 0x21
  405672:	2126      	movs	r1, #38	; 0x26
  405674:	22e3      	movs	r2, #227	; 0xe3
  405676:	47a0      	blx	r4
	write_SCCB_76(0x9f,0x78);
  405678:	2021      	movs	r0, #33	; 0x21
  40567a:	219f      	movs	r1, #159	; 0x9f
  40567c:	2278      	movs	r2, #120	; 0x78
  40567e:	47a0      	blx	r4
	write_SCCB_76(0xa0,0x68);
  405680:	2021      	movs	r0, #33	; 0x21
  405682:	21a0      	movs	r1, #160	; 0xa0
  405684:	2268      	movs	r2, #104	; 0x68
  405686:	47a0      	blx	r4
	write_SCCB_76(0xa1,0x03);
  405688:	2021      	movs	r0, #33	; 0x21
  40568a:	21a1      	movs	r1, #161	; 0xa1
  40568c:	2203      	movs	r2, #3
  40568e:	47a0      	blx	r4
	write_SCCB_76(0xa6,0xd8);
  405690:	2021      	movs	r0, #33	; 0x21
  405692:	21a6      	movs	r1, #166	; 0xa6
  405694:	22d8      	movs	r2, #216	; 0xd8
  405696:	47a0      	blx	r4
	write_SCCB_76(0xa7,0xd8);
  405698:	2021      	movs	r0, #33	; 0x21
  40569a:	21a7      	movs	r1, #167	; 0xa7
  40569c:	22d8      	movs	r2, #216	; 0xd8
  40569e:	47a0      	blx	r4
	write_SCCB_76(0xa8,0xf0);
  4056a0:	2021      	movs	r0, #33	; 0x21
  4056a2:	21a8      	movs	r1, #168	; 0xa8
  4056a4:	22f0      	movs	r2, #240	; 0xf0
  4056a6:	47a0      	blx	r4
	write_SCCB_76(0xa9,0x90);
  4056a8:	2021      	movs	r0, #33	; 0x21
  4056aa:	21a9      	movs	r1, #169	; 0xa9
  4056ac:	2290      	movs	r2, #144	; 0x90
  4056ae:	47a0      	blx	r4
	write_SCCB_76(0xaa,0x94);
  4056b0:	2021      	movs	r0, #33	; 0x21
  4056b2:	21aa      	movs	r1, #170	; 0xaa
  4056b4:	2294      	movs	r2, #148	; 0x94
  4056b6:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  4056b8:	2021      	movs	r0, #33	; 0x21
  4056ba:	2113      	movs	r1, #19
  4056bc:	22e7      	movs	r2, #231	; 0xe7
  4056be:	47a0      	blx	r4
	write_SCCB_76(0x0e,0x61);
  4056c0:	2021      	movs	r0, #33	; 0x21
  4056c2:	210e      	movs	r1, #14
  4056c4:	2261      	movs	r2, #97	; 0x61
  4056c6:	47a0      	blx	r4
	write_SCCB_76(0x0f,0x4b);
  4056c8:	2021      	movs	r0, #33	; 0x21
  4056ca:	210f      	movs	r1, #15
  4056cc:	224b      	movs	r2, #75	; 0x4b
  4056ce:	47a0      	blx	r4
	write_SCCB_76(0x16,0x02);
  4056d0:	2021      	movs	r0, #33	; 0x21
  4056d2:	2116      	movs	r1, #22
  4056d4:	2202      	movs	r2, #2
  4056d6:	47a0      	blx	r4
	write_SCCB_76(0x1e,0x07);
  4056d8:	2021      	movs	r0, #33	; 0x21
  4056da:	211e      	movs	r1, #30
  4056dc:	2207      	movs	r2, #7
  4056de:	47a0      	blx	r4
	write_SCCB_76(0x21,0x02);
  4056e0:	2021      	movs	r0, #33	; 0x21
  4056e2:	4601      	mov	r1, r0
  4056e4:	2202      	movs	r2, #2
  4056e6:	47a0      	blx	r4
	write_SCCB_76(0x22,0x91);
  4056e8:	2021      	movs	r0, #33	; 0x21
  4056ea:	2122      	movs	r1, #34	; 0x22
  4056ec:	2291      	movs	r2, #145	; 0x91
  4056ee:	47a0      	blx	r4
	write_SCCB_76(0x29,0x07);
  4056f0:	2021      	movs	r0, #33	; 0x21
  4056f2:	2129      	movs	r1, #41	; 0x29
  4056f4:	2207      	movs	r2, #7
  4056f6:	47a0      	blx	r4
	write_SCCB_76(0x33,0x0b);
  4056f8:	2021      	movs	r0, #33	; 0x21
  4056fa:	2133      	movs	r1, #51	; 0x33
  4056fc:	220b      	movs	r2, #11
  4056fe:	47a0      	blx	r4
	write_SCCB_76(0x35,0x0b);
  405700:	2021      	movs	r0, #33	; 0x21
  405702:	2135      	movs	r1, #53	; 0x35
  405704:	220b      	movs	r2, #11
  405706:	47a0      	blx	r4
	write_SCCB_76(0x37,0x1d);
  405708:	2021      	movs	r0, #33	; 0x21
  40570a:	2137      	movs	r1, #55	; 0x37
  40570c:	221d      	movs	r2, #29
  40570e:	47a0      	blx	r4
	write_SCCB_76(0x38,0x71);
  405710:	2021      	movs	r0, #33	; 0x21
  405712:	2138      	movs	r1, #56	; 0x38
  405714:	2271      	movs	r2, #113	; 0x71
  405716:	47a0      	blx	r4
	write_SCCB_76(0x39,0x2a);
  405718:	2021      	movs	r0, #33	; 0x21
  40571a:	2139      	movs	r1, #57	; 0x39
  40571c:	222a      	movs	r2, #42	; 0x2a
  40571e:	47a0      	blx	r4
	write_SCCB_76(0x3c,0x78);
  405720:	2021      	movs	r0, #33	; 0x21
  405722:	213c      	movs	r1, #60	; 0x3c
  405724:	2278      	movs	r2, #120	; 0x78
  405726:	47a0      	blx	r4
	write_SCCB_76(0x4d,0x40);
  405728:	2021      	movs	r0, #33	; 0x21
  40572a:	214d      	movs	r1, #77	; 0x4d
  40572c:	2240      	movs	r2, #64	; 0x40
  40572e:	47a0      	blx	r4
	write_SCCB_76(0x4e,0x20);
  405730:	2021      	movs	r0, #33	; 0x21
  405732:	214e      	movs	r1, #78	; 0x4e
  405734:	2220      	movs	r2, #32
  405736:	47a0      	blx	r4
	write_SCCB_76(0x69,0x00);
  405738:	2021      	movs	r0, #33	; 0x21
  40573a:	2169      	movs	r1, #105	; 0x69
  40573c:	2200      	movs	r2, #0
  40573e:	47a0      	blx	r4
	write_SCCB_76(0x6b,0x0a);
  405740:	2021      	movs	r0, #33	; 0x21
  405742:	216b      	movs	r1, #107	; 0x6b
  405744:	220a      	movs	r2, #10
  405746:	47a0      	blx	r4
	write_SCCB_76(0x74,0x10);
  405748:	2021      	movs	r0, #33	; 0x21
  40574a:	2174      	movs	r1, #116	; 0x74
  40574c:	2210      	movs	r2, #16
  40574e:	47a0      	blx	r4
	write_SCCB_76(0x8d,0x4f);
  405750:	2021      	movs	r0, #33	; 0x21
  405752:	218d      	movs	r1, #141	; 0x8d
  405754:	224f      	movs	r2, #79	; 0x4f
  405756:	47a0      	blx	r4
	write_SCCB_76(0x8e,0x00);
  405758:	2021      	movs	r0, #33	; 0x21
  40575a:	218e      	movs	r1, #142	; 0x8e
  40575c:	2200      	movs	r2, #0
  40575e:	47a0      	blx	r4
	write_SCCB_76(0x8f,0x00);
  405760:	2021      	movs	r0, #33	; 0x21
  405762:	218f      	movs	r1, #143	; 0x8f
  405764:	2200      	movs	r2, #0
  405766:	47a0      	blx	r4
	write_SCCB_76(0x90,0x00);
  405768:	2021      	movs	r0, #33	; 0x21
  40576a:	2190      	movs	r1, #144	; 0x90
  40576c:	2200      	movs	r2, #0
  40576e:	47a0      	blx	r4
	write_SCCB_76(0x91,0x00);
  405770:	2021      	movs	r0, #33	; 0x21
  405772:	2191      	movs	r1, #145	; 0x91
  405774:	2200      	movs	r2, #0
  405776:	47a0      	blx	r4
	write_SCCB_76(0x92,0x66);
  405778:	2021      	movs	r0, #33	; 0x21
  40577a:	2192      	movs	r1, #146	; 0x92
  40577c:	2266      	movs	r2, #102	; 0x66
  40577e:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  405780:	2021      	movs	r0, #33	; 0x21
  405782:	2196      	movs	r1, #150	; 0x96
  405784:	2200      	movs	r2, #0
  405786:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x80);
  405788:	2021      	movs	r0, #33	; 0x21
  40578a:	219a      	movs	r1, #154	; 0x9a
  40578c:	2280      	movs	r2, #128	; 0x80
  40578e:	47a0      	blx	r4
	write_SCCB_76(0xb0,0x84);
  405790:	2021      	movs	r0, #33	; 0x21
  405792:	21b0      	movs	r1, #176	; 0xb0
  405794:	2284      	movs	r2, #132	; 0x84
  405796:	47a0      	blx	r4
	write_SCCB_76(0xb1,0x0c);
  405798:	2021      	movs	r0, #33	; 0x21
  40579a:	21b1      	movs	r1, #177	; 0xb1
  40579c:	220c      	movs	r2, #12
  40579e:	47a0      	blx	r4
	write_SCCB_76(0xb2,0x0e);
  4057a0:	2021      	movs	r0, #33	; 0x21
  4057a2:	21b2      	movs	r1, #178	; 0xb2
  4057a4:	220e      	movs	r2, #14
  4057a6:	47a0      	blx	r4
	write_SCCB_76(0xb3,0x82);
  4057a8:	2021      	movs	r0, #33	; 0x21
  4057aa:	21b3      	movs	r1, #179	; 0xb3
  4057ac:	2282      	movs	r2, #130	; 0x82
  4057ae:	47a0      	blx	r4
	write_SCCB_76(0xb8,0x0a);
  4057b0:	2021      	movs	r0, #33	; 0x21
  4057b2:	21b8      	movs	r1, #184	; 0xb8
  4057b4:	220a      	movs	r2, #10
  4057b6:	47a0      	blx	r4
	write_SCCB_76(0x43,0x14);
  4057b8:	2021      	movs	r0, #33	; 0x21
  4057ba:	2143      	movs	r1, #67	; 0x43
  4057bc:	2214      	movs	r2, #20
  4057be:	47a0      	blx	r4
	write_SCCB_76(0x44,0xf0);
  4057c0:	2021      	movs	r0, #33	; 0x21
  4057c2:	2144      	movs	r1, #68	; 0x44
  4057c4:	22f0      	movs	r2, #240	; 0xf0
  4057c6:	47a0      	blx	r4
	write_SCCB_76(0x45,0x34);
  4057c8:	2021      	movs	r0, #33	; 0x21
  4057ca:	2145      	movs	r1, #69	; 0x45
  4057cc:	2234      	movs	r2, #52	; 0x34
  4057ce:	47a0      	blx	r4
	write_SCCB_76(0x46,0x58);
  4057d0:	2021      	movs	r0, #33	; 0x21
  4057d2:	2146      	movs	r1, #70	; 0x46
  4057d4:	2258      	movs	r2, #88	; 0x58
  4057d6:	47a0      	blx	r4
	write_SCCB_76(0x47,0x28);
  4057d8:	2021      	movs	r0, #33	; 0x21
  4057da:	2147      	movs	r1, #71	; 0x47
  4057dc:	2228      	movs	r2, #40	; 0x28
  4057de:	47a0      	blx	r4
	write_SCCB_76(0x48,0x3a);
  4057e0:	2021      	movs	r0, #33	; 0x21
  4057e2:	2148      	movs	r1, #72	; 0x48
  4057e4:	223a      	movs	r2, #58	; 0x3a
  4057e6:	47a0      	blx	r4
	write_SCCB_76(0x59,0x88);
  4057e8:	2021      	movs	r0, #33	; 0x21
  4057ea:	2159      	movs	r1, #89	; 0x59
  4057ec:	2288      	movs	r2, #136	; 0x88
  4057ee:	47a0      	blx	r4
	write_SCCB_76(0x5a,0x88);
  4057f0:	2021      	movs	r0, #33	; 0x21
  4057f2:	215a      	movs	r1, #90	; 0x5a
  4057f4:	2288      	movs	r2, #136	; 0x88
  4057f6:	47a0      	blx	r4
	write_SCCB_76(0x5b,0x44);
  4057f8:	2021      	movs	r0, #33	; 0x21
  4057fa:	215b      	movs	r1, #91	; 0x5b
  4057fc:	2244      	movs	r2, #68	; 0x44
  4057fe:	47a0      	blx	r4
	write_SCCB_76(0x5c,0x67);
  405800:	2021      	movs	r0, #33	; 0x21
  405802:	215c      	movs	r1, #92	; 0x5c
  405804:	2267      	movs	r2, #103	; 0x67
  405806:	47a0      	blx	r4
	write_SCCB_76(0x5d,0x49);
  405808:	2021      	movs	r0, #33	; 0x21
  40580a:	215d      	movs	r1, #93	; 0x5d
  40580c:	2249      	movs	r2, #73	; 0x49
  40580e:	47a0      	blx	r4
	write_SCCB_76(0x5e,0x0e);
  405810:	2021      	movs	r0, #33	; 0x21
  405812:	215e      	movs	r1, #94	; 0x5e
  405814:	220e      	movs	r2, #14
  405816:	47a0      	blx	r4
	write_SCCB_76(0x64,0x04);
  405818:	2021      	movs	r0, #33	; 0x21
  40581a:	2164      	movs	r1, #100	; 0x64
  40581c:	2204      	movs	r2, #4
  40581e:	47a0      	blx	r4
	write_SCCB_76(0x65,0x20);
  405820:	2021      	movs	r0, #33	; 0x21
  405822:	2165      	movs	r1, #101	; 0x65
  405824:	2220      	movs	r2, #32
  405826:	47a0      	blx	r4
	write_SCCB_76(0x66,0x05);
  405828:	2021      	movs	r0, #33	; 0x21
  40582a:	2166      	movs	r1, #102	; 0x66
  40582c:	2205      	movs	r2, #5
  40582e:	47a0      	blx	r4
	write_SCCB_76(0x94,0x04);
  405830:	2021      	movs	r0, #33	; 0x21
  405832:	2194      	movs	r1, #148	; 0x94
  405834:	2204      	movs	r2, #4
  405836:	47a0      	blx	r4
	write_SCCB_76(0x95,0x08);
  405838:	2021      	movs	r0, #33	; 0x21
  40583a:	2195      	movs	r1, #149	; 0x95
  40583c:	2208      	movs	r2, #8
  40583e:	e001      	b.n	405844 <SetupCameraYUVVGA_OV7670+0x338>
  405840:	00405165 	.word	0x00405165
  405844:	47a0      	blx	r4
	write_SCCB_76(0x6c,0x0a);
  405846:	2021      	movs	r0, #33	; 0x21
  405848:	216c      	movs	r1, #108	; 0x6c
  40584a:	220a      	movs	r2, #10
  40584c:	47a0      	blx	r4
	write_SCCB_76(0x6d,0x55);
  40584e:	2021      	movs	r0, #33	; 0x21
  405850:	216d      	movs	r1, #109	; 0x6d
  405852:	2255      	movs	r2, #85	; 0x55
  405854:	47a0      	blx	r4
	write_SCCB_76(0x6e,0x11);
  405856:	2021      	movs	r0, #33	; 0x21
  405858:	216e      	movs	r1, #110	; 0x6e
  40585a:	2211      	movs	r2, #17
  40585c:	47a0      	blx	r4
	write_SCCB_76(0x6f,0x9e);
  40585e:	2021      	movs	r0, #33	; 0x21
  405860:	216f      	movs	r1, #111	; 0x6f
  405862:	229e      	movs	r2, #158	; 0x9e
  405864:	47a0      	blx	r4
	write_SCCB_76(0x6a,0x40);
  405866:	2021      	movs	r0, #33	; 0x21
  405868:	216a      	movs	r1, #106	; 0x6a
  40586a:	2240      	movs	r2, #64	; 0x40
  40586c:	47a0      	blx	r4
	write_SCCB_76(0x01,0x20);
  40586e:	2021      	movs	r0, #33	; 0x21
  405870:	2101      	movs	r1, #1
  405872:	2220      	movs	r2, #32
  405874:	47a0      	blx	r4
	write_SCCB_76(0x02,0x20);
  405876:	2021      	movs	r0, #33	; 0x21
  405878:	2102      	movs	r1, #2
  40587a:	2220      	movs	r2, #32
  40587c:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  40587e:	2021      	movs	r0, #33	; 0x21
  405880:	2113      	movs	r1, #19
  405882:	22e7      	movs	r2, #231	; 0xe7
  405884:	47a0      	blx	r4
	write_SCCB_76(0x4f,0x80);
  405886:	2021      	movs	r0, #33	; 0x21
  405888:	214f      	movs	r1, #79	; 0x4f
  40588a:	2280      	movs	r2, #128	; 0x80
  40588c:	47a0      	blx	r4
	write_SCCB_76(0x50,0x80);
  40588e:	2021      	movs	r0, #33	; 0x21
  405890:	2150      	movs	r1, #80	; 0x50
  405892:	2280      	movs	r2, #128	; 0x80
  405894:	47a0      	blx	r4
	write_SCCB_76(0x51,0x00);
  405896:	2021      	movs	r0, #33	; 0x21
  405898:	2151      	movs	r1, #81	; 0x51
  40589a:	2200      	movs	r2, #0
  40589c:	47a0      	blx	r4
	write_SCCB_76(0x52,0x22);
  40589e:	2021      	movs	r0, #33	; 0x21
  4058a0:	2152      	movs	r1, #82	; 0x52
  4058a2:	2222      	movs	r2, #34	; 0x22
  4058a4:	47a0      	blx	r4
	write_SCCB_76(0x53,0x5e);
  4058a6:	2021      	movs	r0, #33	; 0x21
  4058a8:	2153      	movs	r1, #83	; 0x53
  4058aa:	225e      	movs	r2, #94	; 0x5e
  4058ac:	47a0      	blx	r4
	write_SCCB_76(0x54,0x80);
  4058ae:	2021      	movs	r0, #33	; 0x21
  4058b0:	2154      	movs	r1, #84	; 0x54
  4058b2:	2280      	movs	r2, #128	; 0x80
  4058b4:	47a0      	blx	r4
	write_SCCB_76(0x58,0x9e);
  4058b6:	2021      	movs	r0, #33	; 0x21
  4058b8:	2158      	movs	r1, #88	; 0x58
  4058ba:	229e      	movs	r2, #158	; 0x9e
  4058bc:	47a0      	blx	r4
	write_SCCB_76(0x41,0x08);
  4058be:	2021      	movs	r0, #33	; 0x21
  4058c0:	2141      	movs	r1, #65	; 0x41
  4058c2:	2208      	movs	r2, #8
  4058c4:	47a0      	blx	r4
	write_SCCB_76(0x3f,0x00);
  4058c6:	2021      	movs	r0, #33	; 0x21
  4058c8:	213f      	movs	r1, #63	; 0x3f
  4058ca:	2200      	movs	r2, #0
  4058cc:	47a0      	blx	r4
	write_SCCB_76(0x75,0x03);
  4058ce:	2021      	movs	r0, #33	; 0x21
  4058d0:	2175      	movs	r1, #117	; 0x75
  4058d2:	2203      	movs	r2, #3
  4058d4:	47a0      	blx	r4
	write_SCCB_76(0x76,0xe1);
  4058d6:	2021      	movs	r0, #33	; 0x21
  4058d8:	2176      	movs	r1, #118	; 0x76
  4058da:	22e1      	movs	r2, #225	; 0xe1
  4058dc:	47a0      	blx	r4
	write_SCCB_76(0x4c,0x00);
  4058de:	2021      	movs	r0, #33	; 0x21
  4058e0:	214c      	movs	r1, #76	; 0x4c
  4058e2:	2200      	movs	r2, #0
  4058e4:	47a0      	blx	r4
	write_SCCB_76(0x77,0x00);
  4058e6:	2021      	movs	r0, #33	; 0x21
  4058e8:	2177      	movs	r1, #119	; 0x77
  4058ea:	2200      	movs	r2, #0
  4058ec:	47a0      	blx	r4
	write_SCCB_76(0x3d,0x00);
  4058ee:	2021      	movs	r0, #33	; 0x21
  4058f0:	213d      	movs	r1, #61	; 0x3d
  4058f2:	2200      	movs	r2, #0
  4058f4:	47a0      	blx	r4
	write_SCCB_76(0x4b,0x09);
  4058f6:	2021      	movs	r0, #33	; 0x21
  4058f8:	214b      	movs	r1, #75	; 0x4b
  4058fa:	2209      	movs	r2, #9
  4058fc:	47a0      	blx	r4
	write_SCCB_76(0xc9,0x60);
  4058fe:	2021      	movs	r0, #33	; 0x21
  405900:	21c9      	movs	r1, #201	; 0xc9
  405902:	2260      	movs	r2, #96	; 0x60
  405904:	47a0      	blx	r4
	write_SCCB_76(0x41,0x38);
  405906:	2021      	movs	r0, #33	; 0x21
  405908:	2141      	movs	r1, #65	; 0x41
  40590a:	2238      	movs	r2, #56	; 0x38
  40590c:	47a0      	blx	r4
	write_SCCB_76(0x56,0x40);
  40590e:	2021      	movs	r0, #33	; 0x21
  405910:	2156      	movs	r1, #86	; 0x56
  405912:	2240      	movs	r2, #64	; 0x40
  405914:	47a0      	blx	r4
	write_SCCB_76(0x34,0x11);
  405916:	2021      	movs	r0, #33	; 0x21
  405918:	2134      	movs	r1, #52	; 0x34
  40591a:	2211      	movs	r2, #17
  40591c:	47a0      	blx	r4
	write_SCCB_76(0x3b,0x0a);
  40591e:	2021      	movs	r0, #33	; 0x21
  405920:	213b      	movs	r1, #59	; 0x3b
  405922:	220a      	movs	r2, #10
  405924:	47a0      	blx	r4
	write_SCCB_76(0xa4,0x88);
  405926:	2021      	movs	r0, #33	; 0x21
  405928:	21a4      	movs	r1, #164	; 0xa4
  40592a:	2288      	movs	r2, #136	; 0x88
  40592c:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  40592e:	2021      	movs	r0, #33	; 0x21
  405930:	2196      	movs	r1, #150	; 0x96
  405932:	2200      	movs	r2, #0
  405934:	47a0      	blx	r4
	write_SCCB_76(0x97,0x30);
  405936:	2021      	movs	r0, #33	; 0x21
  405938:	2197      	movs	r1, #151	; 0x97
  40593a:	2230      	movs	r2, #48	; 0x30
  40593c:	47a0      	blx	r4
	write_SCCB_76(0x98,0x20);
  40593e:	2021      	movs	r0, #33	; 0x21
  405940:	2198      	movs	r1, #152	; 0x98
  405942:	2220      	movs	r2, #32
  405944:	47a0      	blx	r4
	write_SCCB_76(0x99,0x30);
  405946:	2021      	movs	r0, #33	; 0x21
  405948:	2199      	movs	r1, #153	; 0x99
  40594a:	2230      	movs	r2, #48	; 0x30
  40594c:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x84);
  40594e:	2021      	movs	r0, #33	; 0x21
  405950:	219a      	movs	r1, #154	; 0x9a
  405952:	2284      	movs	r2, #132	; 0x84
  405954:	47a0      	blx	r4
	write_SCCB_76(0x9b,0x29);
  405956:	2021      	movs	r0, #33	; 0x21
  405958:	219b      	movs	r1, #155	; 0x9b
  40595a:	2229      	movs	r2, #41	; 0x29
  40595c:	47a0      	blx	r4
	write_SCCB_76(0x9c,0x03);
  40595e:	2021      	movs	r0, #33	; 0x21
  405960:	219c      	movs	r1, #156	; 0x9c
  405962:	2203      	movs	r2, #3
  405964:	47a0      	blx	r4
	write_SCCB_76(0x9d,0x98);
  405966:	2021      	movs	r0, #33	; 0x21
  405968:	219d      	movs	r1, #157	; 0x9d
  40596a:	2298      	movs	r2, #152	; 0x98
  40596c:	47a0      	blx	r4
	write_SCCB_76(0x9e,0x3f);
  40596e:	2021      	movs	r0, #33	; 0x21
  405970:	219e      	movs	r1, #158	; 0x9e
  405972:	223f      	movs	r2, #63	; 0x3f
  405974:	47a0      	blx	r4
	write_SCCB_76(0x78,0x04);
  405976:	2021      	movs	r0, #33	; 0x21
  405978:	2178      	movs	r1, #120	; 0x78
  40597a:	2204      	movs	r2, #4
  40597c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x01);
  40597e:	2021      	movs	r0, #33	; 0x21
  405980:	2179      	movs	r1, #121	; 0x79
  405982:	2201      	movs	r2, #1
  405984:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xf0);
  405986:	2021      	movs	r0, #33	; 0x21
  405988:	21c8      	movs	r1, #200	; 0xc8
  40598a:	22f0      	movs	r2, #240	; 0xf0
  40598c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0f);
  40598e:	2021      	movs	r0, #33	; 0x21
  405990:	2179      	movs	r1, #121	; 0x79
  405992:	220f      	movs	r2, #15
  405994:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x00);
  405996:	2021      	movs	r0, #33	; 0x21
  405998:	21c8      	movs	r1, #200	; 0xc8
  40599a:	2200      	movs	r2, #0
  40599c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x10);
  40599e:	2021      	movs	r0, #33	; 0x21
  4059a0:	2179      	movs	r1, #121	; 0x79
  4059a2:	2210      	movs	r2, #16
  4059a4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x7e);
  4059a6:	2021      	movs	r0, #33	; 0x21
  4059a8:	21c8      	movs	r1, #200	; 0xc8
  4059aa:	227e      	movs	r2, #126	; 0x7e
  4059ac:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0a);
  4059ae:	2021      	movs	r0, #33	; 0x21
  4059b0:	2179      	movs	r1, #121	; 0x79
  4059b2:	220a      	movs	r2, #10
  4059b4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  4059b6:	2021      	movs	r0, #33	; 0x21
  4059b8:	21c8      	movs	r1, #200	; 0xc8
  4059ba:	2280      	movs	r2, #128	; 0x80
  4059bc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0b);
  4059be:	2021      	movs	r0, #33	; 0x21
  4059c0:	2179      	movs	r1, #121	; 0x79
  4059c2:	220b      	movs	r2, #11
  4059c4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x01);
  4059c6:	2021      	movs	r0, #33	; 0x21
  4059c8:	21c8      	movs	r1, #200	; 0xc8
  4059ca:	2201      	movs	r2, #1
  4059cc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0c);
  4059ce:	2021      	movs	r0, #33	; 0x21
  4059d0:	2179      	movs	r1, #121	; 0x79
  4059d2:	220c      	movs	r2, #12
  4059d4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x0f);
  4059d6:	2021      	movs	r0, #33	; 0x21
  4059d8:	21c8      	movs	r1, #200	; 0xc8
  4059da:	220f      	movs	r2, #15
  4059dc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0d);
  4059de:	2021      	movs	r0, #33	; 0x21
  4059e0:	2179      	movs	r1, #121	; 0x79
  4059e2:	220d      	movs	r2, #13
  4059e4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x20);
  4059e6:	2021      	movs	r0, #33	; 0x21
  4059e8:	21c8      	movs	r1, #200	; 0xc8
  4059ea:	2220      	movs	r2, #32
  4059ec:	47a0      	blx	r4
	write_SCCB_76(0x79,0x09);
  4059ee:	2021      	movs	r0, #33	; 0x21
  4059f0:	2179      	movs	r1, #121	; 0x79
  4059f2:	2209      	movs	r2, #9
  4059f4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  4059f6:	2021      	movs	r0, #33	; 0x21
  4059f8:	21c8      	movs	r1, #200	; 0xc8
  4059fa:	2280      	movs	r2, #128	; 0x80
  4059fc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x02);
  4059fe:	2021      	movs	r0, #33	; 0x21
  405a00:	2179      	movs	r1, #121	; 0x79
  405a02:	2202      	movs	r2, #2
  405a04:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xc0);
  405a06:	2021      	movs	r0, #33	; 0x21
  405a08:	21c8      	movs	r1, #200	; 0xc8
  405a0a:	22c0      	movs	r2, #192	; 0xc0
  405a0c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x03);
  405a0e:	2021      	movs	r0, #33	; 0x21
  405a10:	2179      	movs	r1, #121	; 0x79
  405a12:	2203      	movs	r2, #3
  405a14:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x40);
  405a16:	2021      	movs	r0, #33	; 0x21
  405a18:	21c8      	movs	r1, #200	; 0xc8
  405a1a:	2240      	movs	r2, #64	; 0x40
  405a1c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x05);
  405a1e:	2021      	movs	r0, #33	; 0x21
  405a20:	2179      	movs	r1, #121	; 0x79
  405a22:	2205      	movs	r2, #5
  405a24:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x30);
  405a26:	2021      	movs	r0, #33	; 0x21
  405a28:	21c8      	movs	r1, #200	; 0xc8
  405a2a:	2230      	movs	r2, #48	; 0x30
  405a2c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x26);
  405a2e:	2021      	movs	r0, #33	; 0x21
  405a30:	2179      	movs	r1, #121	; 0x79
  405a32:	2226      	movs	r2, #38	; 0x26
  405a34:	47a0      	blx	r4
	write_SCCB_76(0x2d,0x00);
  405a36:	2021      	movs	r0, #33	; 0x21
  405a38:	212d      	movs	r1, #45	; 0x2d
  405a3a:	2200      	movs	r2, #0
  405a3c:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  405a3e:	2021      	movs	r0, #33	; 0x21
  405a40:	212e      	movs	r1, #46	; 0x2e
  405a42:	2200      	movs	r2, #0
  405a44:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  405a46:	2021      	movs	r0, #33	; 0x21
  405a48:	212e      	movs	r1, #46	; 0x2e
  405a4a:	2200      	movs	r2, #0
  405a4c:	47a0      	blx	r4
	write_SCCB_76(0x1b,0x00);
  405a4e:	2021      	movs	r0, #33	; 0x21
  405a50:	211b      	movs	r1, #27
  405a52:	2200      	movs	r2, #0
  405a54:	47a0      	blx	r4
	write_SCCB_76(0x15,1<<3|1<<1);
  405a56:	2021      	movs	r0, #33	; 0x21
  405a58:	2115      	movs	r1, #21
  405a5a:	220a      	movs	r2, #10
  405a5c:	47a0      	blx	r4
  405a5e:	bd10      	pop	{r4, pc}

00405a60 <getBatVoltage>:
	*/
}


//get battery voltage
float getBatVoltage() {
  405a60:	b538      	push	{r3, r4, r5, lr}
  405a62:	4b19      	ldr	r3, [pc, #100]	; (405ac8 <getBatVoltage+0x68>)
  405a64:	2201      	movs	r2, #1
  405a66:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  405a68:	2202      	movs	r2, #2
  405a6a:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  405a6c:	461a      	mov	r2, r3
  405a6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
	afec_start_software_conversion(AFEC1);
	
	while(!(afec_get_interrupt_status(AFEC1) & (1<<AFEC_CHANNEL_0)));
  405a70:	f013 0f01 	tst.w	r3, #1
  405a74:	d0fb      	beq.n	405a6e <getBatVoltage+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  405a76:	4b14      	ldr	r3, [pc, #80]	; (405ac8 <getBatVoltage+0x68>)
  405a78:	2200      	movs	r2, #0
  405a7a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  405a7c:	6e98      	ldr	r0, [r3, #104]	; 0x68

	uint16_t convRes = afec_channel_get_value(AFEC1,AFEC_CHANNEL_0) - 0x7f0;
  405a7e:	f5a0 60fe 	sub.w	r0, r0, #2032	; 0x7f0
	return (3.3*convRes/4095.00)*((140.00+960.00)/105.00);
  405a82:	b280      	uxth	r0, r0
  405a84:	4b11      	ldr	r3, [pc, #68]	; (405acc <getBatVoltage+0x6c>)
  405a86:	4798      	blx	r3
  405a88:	4c11      	ldr	r4, [pc, #68]	; (405ad0 <getBatVoltage+0x70>)
  405a8a:	a309      	add	r3, pc, #36	; (adr r3, 405ab0 <getBatVoltage+0x50>)
  405a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a90:	47a0      	blx	r4
  405a92:	a309      	add	r3, pc, #36	; (adr r3, 405ab8 <getBatVoltage+0x58>)
  405a94:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a98:	4d0e      	ldr	r5, [pc, #56]	; (405ad4 <getBatVoltage+0x74>)
  405a9a:	47a8      	blx	r5
  405a9c:	a308      	add	r3, pc, #32	; (adr r3, 405ac0 <getBatVoltage+0x60>)
  405a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405aa2:	47a0      	blx	r4
  405aa4:	4b0c      	ldr	r3, [pc, #48]	; (405ad8 <getBatVoltage+0x78>)
  405aa6:	4798      	blx	r3
}
  405aa8:	ee00 0a10 	vmov	s0, r0
  405aac:	bd38      	pop	{r3, r4, r5, pc}
  405aae:	bf00      	nop
  405ab0:	66666666 	.word	0x66666666
  405ab4:	400a6666 	.word	0x400a6666
  405ab8:	00000000 	.word	0x00000000
  405abc:	40affe00 	.word	0x40affe00
  405ac0:	3cf3cf3d 	.word	0x3cf3cf3d
  405ac4:	4024f3cf 	.word	0x4024f3cf
  405ac8:	40064000 	.word	0x40064000
  405acc:	0040ac29 	.word	0x0040ac29
  405ad0:	0040acf5 	.word	0x0040acf5
  405ad4:	0040af49 	.word	0x0040af49
  405ad8:	0040b279 	.word	0x0040b279

00405adc <dumpFrame>:
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
  405adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405ade:	4607      	mov	r7, r0
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  405ae0:	4a10      	ldr	r2, [pc, #64]	; (405b24 <dumpFrame+0x48>)
  405ae2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  405ae4:	f043 0301 	orr.w	r3, r3, #1
  405ae8:	63d3      	str	r3, [r2, #60]	; 0x3c
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
  405aea:	480f      	ldr	r0, [pc, #60]	; (405b28 <dumpFrame+0x4c>)
  405aec:	4b0f      	ldr	r3, [pc, #60]	; (405b2c <dumpFrame+0x50>)
  405aee:	4798      	blx	r3
  405af0:	463e      	mov	r6, r7
  405af2:	f507 3716 	add.w	r7, r7, #153600	; 0x25800
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
		while(!uart_is_tx_ready(UART4));
  405af6:	4d0e      	ldr	r5, [pc, #56]	; (405b30 <dumpFrame+0x54>)
  405af8:	4c0e      	ldr	r4, [pc, #56]	; (405b34 <dumpFrame+0x58>)
  405afa:	4620      	mov	r0, r4
  405afc:	47a8      	blx	r5
  405afe:	2800      	cmp	r0, #0
  405b00:	d0fb      	beq.n	405afa <dumpFrame+0x1e>
		uart_write(UART4,imgData[i]);
  405b02:	f816 1b01 	ldrb.w	r1, [r6], #1
  405b06:	4620      	mov	r0, r4
  405b08:	4b0b      	ldr	r3, [pc, #44]	; (405b38 <dumpFrame+0x5c>)
  405b0a:	4798      	blx	r3
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
  405b0c:	42be      	cmp	r6, r7
  405b0e:	d1f4      	bne.n	405afa <dumpFrame+0x1e>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,imgData[i]);
	}
	sendDebugString(":ENDIMG\n");
  405b10:	480a      	ldr	r0, [pc, #40]	; (405b3c <dumpFrame+0x60>)
  405b12:	4b06      	ldr	r3, [pc, #24]	; (405b2c <dumpFrame+0x50>)
  405b14:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  405b16:	4a03      	ldr	r2, [pc, #12]	; (405b24 <dumpFrame+0x48>)
  405b18:	6b93      	ldr	r3, [r2, #56]	; 0x38
  405b1a:	f043 0301 	orr.w	r3, r3, #1
  405b1e:	6393      	str	r3, [r2, #56]	; 0x38
  405b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b22:	bf00      	nop
  405b24:	4004c000 	.word	0x4004c000
  405b28:	004134d4 	.word	0x004134d4
  405b2c:	0040019d 	.word	0x0040019d
  405b30:	00402d79 	.word	0x00402d79
  405b34:	400e1e00 	.word	0x400e1e00
  405b38:	00402d85 	.word	0x00402d85
  405b3c:	004134dc 	.word	0x004134dc

00405b40 <calcRotation>:
	isi_dma_channel_enable(ISI,1);
	//memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
}

//Inverse Kinamatic functions
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
  405b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b44:	ed2d 8b0a 	vpush	{d8-d12}
  405b48:	b08b      	sub	sp, #44	; 0x2c
  405b4a:	eef0 9a41 	vmov.f32	s19, s2
  405b4e:	eeb0 aa61 	vmov.f32	s20, s3
  405b52:	eeb0 8a42 	vmov.f32	s16, s4
  405b56:	4604      	mov	r4, r0
  405b58:	eef0 aa62 	vmov.f32	s21, s5
	inX = inX - cenX;
	inZ = inZ - cenZ;
  405b5c:	ee30 9ae1 	vsub.f32	s18, s1, s3
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405b60:	ee70 7a41 	vsub.f32	s15, s0, s2
  405b64:	ee17 0a90 	vmov	r0, s15
  405b68:	4b80      	ldr	r3, [pc, #512]	; (405d6c <calcRotation+0x22c>)
  405b6a:	4798      	blx	r3
  405b6c:	e9cd 0100 	strd	r0, r1, [sp]
  405b70:	2c01      	cmp	r4, #1
  405b72:	f040 809e 	bne.w	405cb2 <calcRotation+0x172>
  405b76:	eef1 7a48 	vneg.f32	s15, s16
  405b7a:	ee17 aa90 	vmov	sl, s15
  405b7e:	4f7b      	ldr	r7, [pc, #492]	; (405d6c <calcRotation+0x22c>)
  405b80:	ee17 0a90 	vmov	r0, s15
  405b84:	47b8      	blx	r7
  405b86:	ec41 0b18 	vmov	d8, r0, r1
  405b8a:	ec41 0b10 	vmov	d0, r0, r1
  405b8e:	4d78      	ldr	r5, [pc, #480]	; (405d70 <calcRotation+0x230>)
  405b90:	47a8      	blx	r5
  405b92:	eeb0 ca40 	vmov.f32	s24, s0
  405b96:	eef0 ca60 	vmov.f32	s25, s1
  405b9a:	ee19 0a10 	vmov	r0, s18
  405b9e:	47b8      	blx	r7
  405ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405ba4:	eeb0 0a48 	vmov.f32	s0, s16
  405ba8:	eef0 0a68 	vmov.f32	s1, s17
  405bac:	4e71      	ldr	r6, [pc, #452]	; (405d74 <calcRotation+0x234>)
  405bae:	47b0      	blx	r6
  405bb0:	eeb0 ba40 	vmov.f32	s22, s0
  405bb4:	eef0 ba60 	vmov.f32	s23, s1
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  405bb8:	4650      	mov	r0, sl
  405bba:	47b8      	blx	r7
  405bbc:	ec41 0b18 	vmov	d8, r0, r1
  405bc0:	ec41 0b10 	vmov	d0, r0, r1
  405bc4:	47b0      	blx	r6
  405bc6:	ec59 8b10 	vmov	r8, r9, d0
  405bca:	eeb0 0a48 	vmov.f32	s0, s16
  405bce:	eef0 0a68 	vmov.f32	s1, s17
  405bd2:	47a8      	blx	r5
  405bd4:	ec5b ab10 	vmov	sl, fp, d0
  405bd8:	4d67      	ldr	r5, [pc, #412]	; (405d78 <calcRotation+0x238>)
  405bda:	e9dd 0100 	ldrd	r0, r1, [sp]
  405bde:	4642      	mov	r2, r8
  405be0:	464b      	mov	r3, r9
  405be2:	47a8      	blx	r5
  405be4:	4680      	mov	r8, r0
  405be6:	4689      	mov	r9, r1
  405be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bec:	4652      	mov	r2, sl
  405bee:	465b      	mov	r3, fp
  405bf0:	47a8      	blx	r5
  405bf2:	4602      	mov	r2, r0
  405bf4:	460b      	mov	r3, r1
  405bf6:	4640      	mov	r0, r8
  405bf8:	4649      	mov	r1, r9
  405bfa:	4e60      	ldr	r6, [pc, #384]	; (405d7c <calcRotation+0x23c>)
  405bfc:	47b0      	blx	r6
  405bfe:	4e60      	ldr	r6, [pc, #384]	; (405d80 <calcRotation+0x240>)
  405c00:	47b0      	blx	r6
  405c02:	ee08 0a10 	vmov	s16, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405c06:	e9dd 0100 	ldrd	r0, r1, [sp]
  405c0a:	ec53 2b1c 	vmov	r2, r3, d12
  405c0e:	47a8      	blx	r5
  405c10:	4680      	mov	r8, r0
  405c12:	4689      	mov	r9, r1
  405c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405c18:	ec53 2b1b 	vmov	r2, r3, d11
  405c1c:	47a8      	blx	r5
  405c1e:	4602      	mov	r2, r0
  405c20:	460b      	mov	r3, r1
  405c22:	4640      	mov	r0, r8
  405c24:	4649      	mov	r1, r9
  405c26:	4d57      	ldr	r5, [pc, #348]	; (405d84 <calcRotation+0x244>)
  405c28:	47a8      	blx	r5
  405c2a:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  405c2c:	ee07 0a90 	vmov	s15, r0
  405c30:	ee39 0aa7 	vadd.f32	s0, s19, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405c34:	2c01      	cmp	r4, #1
  405c36:	bf14      	ite	ne
  405c38:	2400      	movne	r4, #0
  405c3a:	2401      	moveq	r4, #1
  405c3c:	b3a4      	cbz	r4, 405ca8 <calcRotation+0x168>
  405c3e:	eef5 aa40 	vcmp.f32	s21, #0.0
  405c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405c46:	d118      	bne.n	405c7a <calcRotation+0x13a>
  405c48:	e02e      	b.n	405ca8 <calcRotation+0x168>
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  405c4a:	eefd 7aea 	vcvt.s32.f32	s15, s21
  405c4e:	ee17 3a90 	vmov	r3, s15
  405c52:	2b00      	cmp	r3, #0
  405c54:	bfb8      	it	lt
  405c56:	425b      	neglt	r3, r3
  405c58:	f1c3 0301 	rsb	r3, r3, #1
  405c5c:	ee07 3a90 	vmov	s15, r3
  405c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405c64:	ee28 8a27 	vmul.f32	s16, s16, s15
  405c68:	ee39 9a0a 	vadd.f32	s18, s18, s20
  405c6c:	ee69 aa2a 	vmul.f32	s21, s18, s21
  405c70:	ee38 8a2a 	vadd.f32	s16, s16, s21
  405c74:	ee38 8a0a 	vadd.f32	s16, s16, s20
  405c78:	e06b      	b.n	405d52 <calcRotation+0x212>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405c7a:	eefd 7aea 	vcvt.s32.f32	s15, s21
  405c7e:	ee17 3a90 	vmov	r3, s15
  405c82:	2b00      	cmp	r3, #0
  405c84:	bfb8      	it	lt
  405c86:	425b      	neglt	r3, r3
  405c88:	f1c3 0301 	rsb	r3, r3, #1
  405c8c:	ee07 3a90 	vmov	s15, r3
  405c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405c94:	ee27 8a88 	vmul.f32	s16, s15, s16
  405c98:	ee39 9a0a 	vadd.f32	s18, s18, s20
  405c9c:	ee69 aa2a 	vmul.f32	s21, s18, s21
  405ca0:	ee38 8a6a 	vsub.f32	s16, s16, s21
  405ca4:	ee38 8a0a 	vadd.f32	s16, s16, s20
	if(opside == 1) out.Z = -out.Z;
  405ca8:	2c00      	cmp	r4, #0
  405caa:	d057      	beq.n	405d5c <calcRotation+0x21c>
  405cac:	eeb1 8a48 	vneg.f32	s16, s16
  405cb0:	e054      	b.n	405d5c <calcRotation+0x21c>
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405cb2:	4d2e      	ldr	r5, [pc, #184]	; (405d6c <calcRotation+0x22c>)
  405cb4:	ee18 0a10 	vmov	r0, s16
  405cb8:	47a8      	blx	r5
  405cba:	ec41 0b18 	vmov	d8, r0, r1
  405cbe:	ec41 0b10 	vmov	d0, r0, r1
  405cc2:	4b2b      	ldr	r3, [pc, #172]	; (405d70 <calcRotation+0x230>)
  405cc4:	4798      	blx	r3
  405cc6:	ec57 6b10 	vmov	r6, r7, d0
  405cca:	ee19 0a10 	vmov	r0, s18
  405cce:	47a8      	blx	r5
  405cd0:	4682      	mov	sl, r0
  405cd2:	468b      	mov	fp, r1
  405cd4:	eeb0 0a48 	vmov.f32	s0, s16
  405cd8:	eef0 0a68 	vmov.f32	s1, s17
  405cdc:	4b25      	ldr	r3, [pc, #148]	; (405d74 <calcRotation+0x234>)
  405cde:	4798      	blx	r3
  405ce0:	ec53 2b10 	vmov	r2, r3, d0
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  405ce4:	4d24      	ldr	r5, [pc, #144]	; (405d78 <calcRotation+0x238>)
  405ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
  405cea:	ed8d 0b02 	vstr	d0, [sp, #8]
  405cee:	47a8      	blx	r5
  405cf0:	4680      	mov	r8, r0
  405cf2:	4689      	mov	r9, r1
  405cf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  405cf8:	4630      	mov	r0, r6
  405cfa:	4639      	mov	r1, r7
  405cfc:	4652      	mov	r2, sl
  405cfe:	465b      	mov	r3, fp
  405d00:	47a8      	blx	r5
  405d02:	4602      	mov	r2, r0
  405d04:	460b      	mov	r3, r1
  405d06:	4640      	mov	r0, r8
  405d08:	4649      	mov	r1, r9
  405d0a:	4e1c      	ldr	r6, [pc, #112]	; (405d7c <calcRotation+0x23c>)
  405d0c:	47b0      	blx	r6
  405d0e:	4e1c      	ldr	r6, [pc, #112]	; (405d80 <calcRotation+0x240>)
  405d10:	47b0      	blx	r6
  405d12:	ee08 0a10 	vmov	s16, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405d16:	e9dd 0100 	ldrd	r0, r1, [sp]
  405d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405d1e:	47a8      	blx	r5
  405d20:	4680      	mov	r8, r0
  405d22:	4689      	mov	r9, r1
  405d24:	4650      	mov	r0, sl
  405d26:	4659      	mov	r1, fp
  405d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405d2c:	47a8      	blx	r5
  405d2e:	4602      	mov	r2, r0
  405d30:	460b      	mov	r3, r1
  405d32:	4640      	mov	r0, r8
  405d34:	4649      	mov	r1, r9
  405d36:	4d13      	ldr	r5, [pc, #76]	; (405d84 <calcRotation+0x244>)
  405d38:	47a8      	blx	r5
  405d3a:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  405d3c:	ee07 0a90 	vmov	s15, r0
  405d40:	ee39 0aa7 	vadd.f32	s0, s19, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  405d44:	b92c      	cbnz	r4, 405d52 <calcRotation+0x212>
  405d46:	eef5 aa40 	vcmp.f32	s21, #0.0
  405d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405d4e:	f47f af7c 	bne.w	405c4a <calcRotation+0x10a>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405d52:	2c01      	cmp	r4, #1
  405d54:	bf14      	ite	ne
  405d56:	2400      	movne	r4, #0
  405d58:	2401      	moveq	r4, #1
  405d5a:	e7a5      	b.n	405ca8 <calcRotation+0x168>
	if(opside == 1) out.Z = -out.Z;
	return out;
}
  405d5c:	eef0 0a48 	vmov.f32	s1, s16
  405d60:	b00b      	add	sp, #44	; 0x2c
  405d62:	ecbd 8b0a 	vpop	{d8-d12}
  405d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d6a:	bf00      	nop
  405d6c:	0040ac4d 	.word	0x0040ac4d
  405d70:	00407ea9 	.word	0x00407ea9
  405d74:	00407f51 	.word	0x00407f51
  405d78:	0040acf5 	.word	0x0040acf5
  405d7c:	0040a991 	.word	0x0040a991
  405d80:	0040b279 	.word	0x0040b279
  405d84:	0040a98d 	.word	0x0040a98d

00405d88 <legAngCalc>:
int sign(float in) {
	if(in<0) return -1;
	else return 1;
}

angles legAngCalc(float x, float y, float z) {
  405d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d8c:	ed2d 8b06 	vpush	{d8-d10}
  405d90:	b089      	sub	sp, #36	; 0x24
  405d92:	eeb0 9a40 	vmov.f32	s18, s0
  405d96:	eeb0 aa60 	vmov.f32	s20, s1
  405d9a:	eef0 8a41 	vmov.f32	s17, s2
	
	*/
	
	//Begin old code
	
	float G = sqrt(x*x + z*z) - C;
  405d9e:	ee60 7a00 	vmul.f32	s15, s0, s0
  405da2:	ee21 8a01 	vmul.f32	s16, s2, s2
  405da6:	ee37 8a88 	vadd.f32	s16, s15, s16
  405daa:	4f71      	ldr	r7, [pc, #452]	; (405f70 <legAngCalc+0x1e8>)
  405dac:	ee18 0a10 	vmov	r0, s16
  405db0:	47b8      	blx	r7
  405db2:	ec41 0b10 	vmov	d0, r0, r1
  405db6:	4e6f      	ldr	r6, [pc, #444]	; (405f74 <legAngCalc+0x1ec>)
  405db8:	47b0      	blx	r6
  405dba:	4d6f      	ldr	r5, [pc, #444]	; (405f78 <legAngCalc+0x1f0>)
  405dbc:	ec51 0b10 	vmov	r0, r1, d0
  405dc0:	2200      	movs	r2, #0
  405dc2:	4b6e      	ldr	r3, [pc, #440]	; (405f7c <legAngCalc+0x1f4>)
  405dc4:	47a8      	blx	r5
  405dc6:	4c6e      	ldr	r4, [pc, #440]	; (405f80 <legAngCalc+0x1f8>)
  405dc8:	47a0      	blx	r4
  405dca:	ee09 0a90 	vmov	s19, r0
	float H = sqrt(y*y+G*G);
  405dce:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  405dd2:	ee29 8aa9 	vmul.f32	s16, s19, s19
  405dd6:	ee37 8a88 	vadd.f32	s16, s15, s16
  405dda:	ee18 0a10 	vmov	r0, s16
  405dde:	47b8      	blx	r7
  405de0:	ec41 0b10 	vmov	d0, r0, r1
  405de4:	47b0      	blx	r6
  405de6:	ec51 0b10 	vmov	r0, r1, d0
  405dea:	47a0      	blx	r4
	float b = acos((A*A + H*H - B*B)/(2*A*H));
  405dec:	ee07 0a90 	vmov	s15, r0
  405df0:	ee27 8aa7 	vmul.f32	s16, s15, s15
  405df4:	47b8      	blx	r7
  405df6:	4682      	mov	sl, r0
  405df8:	468b      	mov	fp, r1
  405dfa:	ee18 0a10 	vmov	r0, s16
  405dfe:	47b8      	blx	r7
  405e00:	a355      	add	r3, pc, #340	; (adr r3, 405f58 <legAngCalc+0x1d0>)
  405e02:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e06:	4e5f      	ldr	r6, [pc, #380]	; (405f84 <legAngCalc+0x1fc>)
  405e08:	47b0      	blx	r6
  405e0a:	a355      	add	r3, pc, #340	; (adr r3, 405f60 <legAngCalc+0x1d8>)
  405e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e10:	47a8      	blx	r5
  405e12:	4680      	mov	r8, r0
  405e14:	4689      	mov	r9, r1
  405e16:	4e5c      	ldr	r6, [pc, #368]	; (405f88 <legAngCalc+0x200>)
  405e18:	4650      	mov	r0, sl
  405e1a:	4659      	mov	r1, fp
  405e1c:	2200      	movs	r2, #0
  405e1e:	4b5b      	ldr	r3, [pc, #364]	; (405f8c <legAngCalc+0x204>)
  405e20:	47b0      	blx	r6
  405e22:	4602      	mov	r2, r0
  405e24:	460b      	mov	r3, r1
  405e26:	4d5a      	ldr	r5, [pc, #360]	; (405f90 <legAngCalc+0x208>)
  405e28:	4640      	mov	r0, r8
  405e2a:	4649      	mov	r1, r9
  405e2c:	47a8      	blx	r5
  405e2e:	ec41 0b10 	vmov	d0, r0, r1
  405e32:	4b58      	ldr	r3, [pc, #352]	; (405f94 <legAngCalc+0x20c>)
  405e34:	4798      	blx	r3
  405e36:	ec51 0b10 	vmov	r0, r1, d0
  405e3a:	47a0      	blx	r4
	
	float h = asin(H*(sin(b))/B);
  405e3c:	47b8      	blx	r7
  405e3e:	4680      	mov	r8, r0
  405e40:	4689      	mov	r9, r1
  405e42:	ec49 8b10 	vmov	d0, r8, r9
  405e46:	4b54      	ldr	r3, [pc, #336]	; (405f98 <legAngCalc+0x210>)
  405e48:	4798      	blx	r3
  405e4a:	4650      	mov	r0, sl
  405e4c:	4659      	mov	r1, fp
  405e4e:	ec53 2b10 	vmov	r2, r3, d0
  405e52:	47b0      	blx	r6
  405e54:	2200      	movs	r2, #0
  405e56:	4b51      	ldr	r3, [pc, #324]	; (405f9c <legAngCalc+0x214>)
  405e58:	47a8      	blx	r5
  405e5a:	ec41 0b10 	vmov	d0, r0, r1
  405e5e:	4b50      	ldr	r3, [pc, #320]	; (405fa0 <legAngCalc+0x218>)
  405e60:	4798      	blx	r3
  405e62:	ec51 0b10 	vmov	r0, r1, d0
  405e66:	47a0      	blx	r4
  405e68:	4682      	mov	sl, r0
	
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
  405e6a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 405fa4 <legAngCalc+0x21c>
  405e6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
  405e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e76:	da0a      	bge.n	405e8e <legAngCalc+0x106>
	else Ang.S3 = (M_PI)-h;
  405e78:	47b8      	blx	r7
  405e7a:	4602      	mov	r2, r0
  405e7c:	460b      	mov	r3, r1
  405e7e:	a13a      	add	r1, pc, #232	; (adr r1, 405f68 <legAngCalc+0x1e0>)
  405e80:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e84:	4c3c      	ldr	r4, [pc, #240]	; (405f78 <legAngCalc+0x1f0>)
  405e86:	47a0      	blx	r4
  405e88:	4b3d      	ldr	r3, [pc, #244]	; (405f80 <legAngCalc+0x1f8>)
  405e8a:	4798      	blx	r3
  405e8c:	4682      	mov	sl, r0
	Ang.S2 = (atan2(y,G))+b;
  405e8e:	4c38      	ldr	r4, [pc, #224]	; (405f70 <legAngCalc+0x1e8>)
  405e90:	ee1a 0a10 	vmov	r0, s20
  405e94:	47a0      	blx	r4
  405e96:	4606      	mov	r6, r0
  405e98:	460f      	mov	r7, r1
  405e9a:	ee19 0a90 	vmov	r0, s19
  405e9e:	47a0      	blx	r4
  405ea0:	ec47 6b10 	vmov	d0, r6, r7
  405ea4:	ec41 0b11 	vmov	d1, r0, r1
  405ea8:	4d3f      	ldr	r5, [pc, #252]	; (405fa8 <legAngCalc+0x220>)
  405eaa:	47a8      	blx	r5
  405eac:	eeb0 aa40 	vmov.f32	s20, s0
  405eb0:	eef0 aa60 	vmov.f32	s21, s1
	Ang.S1 = atan2(x,z);
  405eb4:	ee19 0a10 	vmov	r0, s18
  405eb8:	47a0      	blx	r4
  405eba:	4606      	mov	r6, r0
  405ebc:	460f      	mov	r7, r1
  405ebe:	ee18 0a90 	vmov	r0, s17
  405ec2:	47a0      	blx	r4
  405ec4:	ec47 6b10 	vmov	d0, r6, r7
  405ec8:	ec41 0b11 	vmov	d1, r0, r1
  405ecc:	47a8      	blx	r5
  405ece:	4d2c      	ldr	r5, [pc, #176]	; (405f80 <legAngCalc+0x1f8>)
  405ed0:	ec51 0b10 	vmov	r0, r1, d0
  405ed4:	47a8      	blx	r5
	
	Ang.S1 = Ang.S1*180.00/M_PI;
  405ed6:	47a0      	blx	r4
  405ed8:	4f2b      	ldr	r7, [pc, #172]	; (405f88 <legAngCalc+0x200>)
  405eda:	2200      	movs	r2, #0
  405edc:	4b33      	ldr	r3, [pc, #204]	; (405fac <legAngCalc+0x224>)
  405ede:	47b8      	blx	r7
  405ee0:	4e2b      	ldr	r6, [pc, #172]	; (405f90 <legAngCalc+0x208>)
  405ee2:	a321      	add	r3, pc, #132	; (adr r3, 405f68 <legAngCalc+0x1e0>)
  405ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ee8:	47b0      	blx	r6
  405eea:	47a8      	blx	r5
  405eec:	4683      	mov	fp, r0
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
	else Ang.S3 = (M_PI)-h;
	Ang.S2 = (atan2(y,G))+b;
  405eee:	4640      	mov	r0, r8
  405ef0:	4649      	mov	r1, r9
  405ef2:	ec53 2b1a 	vmov	r2, r3, d10
  405ef6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 405f84 <legAngCalc+0x1fc>
  405efa:	47e0      	blx	ip
  405efc:	47a8      	blx	r5
	Ang.S1 = atan2(x,z);
	
	Ang.S1 = Ang.S1*180.00/M_PI;
	Ang.S2 = 90 - Ang.S2*180.00/M_PI;
  405efe:	47a0      	blx	r4
  405f00:	2200      	movs	r2, #0
  405f02:	4b2a      	ldr	r3, [pc, #168]	; (405fac <legAngCalc+0x224>)
  405f04:	47b8      	blx	r7
  405f06:	a318      	add	r3, pc, #96	; (adr r3, 405f68 <legAngCalc+0x1e0>)
  405f08:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f0c:	47b0      	blx	r6
  405f0e:	4602      	mov	r2, r0
  405f10:	460b      	mov	r3, r1
  405f12:	f8df 8064 	ldr.w	r8, [pc, #100]	; 405f78 <legAngCalc+0x1f0>
  405f16:	2000      	movs	r0, #0
  405f18:	4925      	ldr	r1, [pc, #148]	; (405fb0 <legAngCalc+0x228>)
  405f1a:	47c0      	blx	r8
  405f1c:	47a8      	blx	r5
  405f1e:	4681      	mov	r9, r0
	Ang.S3 = 180 - Ang.S3*180.00/M_PI;
  405f20:	4650      	mov	r0, sl
  405f22:	47a0      	blx	r4
  405f24:	2200      	movs	r2, #0
  405f26:	4b21      	ldr	r3, [pc, #132]	; (405fac <legAngCalc+0x224>)
  405f28:	47b8      	blx	r7
  405f2a:	a30f      	add	r3, pc, #60	; (adr r3, 405f68 <legAngCalc+0x1e0>)
  405f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f30:	47b0      	blx	r6
  405f32:	4602      	mov	r2, r0
  405f34:	460b      	mov	r3, r1
  405f36:	2000      	movs	r0, #0
  405f38:	491c      	ldr	r1, [pc, #112]	; (405fac <legAngCalc+0x224>)
  405f3a:	47c0      	blx	r8
  405f3c:	47a8      	blx	r5
	
	
	return Ang;
}
  405f3e:	ee00 ba10 	vmov	s0, fp
  405f42:	ee00 9a90 	vmov	s1, r9
  405f46:	ee01 0a10 	vmov	s2, r0
  405f4a:	b009      	add	sp, #36	; 0x24
  405f4c:	ecbd 8b06 	vpop	{d8-d10}
  405f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f54:	f3af 8000 	nop.w
  405f58:	00000000 	.word	0x00000000
  405f5c:	40cc2000 	.word	0x40cc2000
  405f60:	00000000 	.word	0x00000000
  405f64:	40b08100 	.word	0x40b08100
  405f68:	54442d18 	.word	0x54442d18
  405f6c:	400921fb 	.word	0x400921fb
  405f70:	0040ac4d 	.word	0x0040ac4d
  405f74:	004082e9 	.word	0x004082e9
  405f78:	0040a98d 	.word	0x0040a98d
  405f7c:	40518000 	.word	0x40518000
  405f80:	0040b279 	.word	0x0040b279
  405f84:	0040a991 	.word	0x0040a991
  405f88:	0040acf5 	.word	0x0040acf5
  405f8c:	406e0000 	.word	0x406e0000
  405f90:	0040af49 	.word	0x0040af49
  405f94:	00408085 	.word	0x00408085
  405f98:	00407f51 	.word	0x00407f51
  405f9c:	40504000 	.word	0x40504000
  405fa0:	00408149 	.word	0x00408149
  405fa4:	46918200 	.word	0x46918200
  405fa8:	0040820d 	.word	0x0040820d
  405fac:	40668000 	.word	0x40668000
  405fb0:	40568000 	.word	0x40568000

00405fb4 <writeLegOut>:

//Leg interface
void writeLegOut(int leg, float S0, float S1, float S2) {
  405fb4:	b510      	push	{r4, lr}
  405fb6:	ed2d 8b02 	vpush	{d8}
  405fba:	eef0 8a60 	vmov.f32	s17, s1
  405fbe:	eeb0 8a41 	vmov.f32	s16, s2
	
	switch (leg) {
  405fc2:	2805      	cmp	r0, #5
  405fc4:	d85d      	bhi.n	406082 <writeLegOut+0xce>
  405fc6:	e8df f000 	tbb	[pc, r0]
  405fca:	1203      	.short	0x1203
  405fcc:	4e3f3021 	.word	0x4e3f3021
		
		case 0:
		WriteServo(L0_S0,S0);
  405fd0:	2000      	movs	r0, #0
  405fd2:	4601      	mov	r1, r0
  405fd4:	4c2c      	ldr	r4, [pc, #176]	; (406088 <writeLegOut+0xd4>)
  405fd6:	47a0      	blx	r4
		WriteServo(L0_S1,S1);
  405fd8:	2000      	movs	r0, #0
  405fda:	2101      	movs	r1, #1
  405fdc:	eeb0 0a68 	vmov.f32	s0, s17
  405fe0:	47a0      	blx	r4
		WriteServo(L0_S2,S2);
  405fe2:	2000      	movs	r0, #0
  405fe4:	2102      	movs	r1, #2
  405fe6:	eeb0 0a48 	vmov.f32	s0, s16
  405fea:	47a0      	blx	r4
		break;
  405fec:	e049      	b.n	406082 <writeLegOut+0xce>
		
		case 1:
		WriteServo(L1_S0,S0);
  405fee:	2001      	movs	r0, #1
  405ff0:	2100      	movs	r1, #0
  405ff2:	4c25      	ldr	r4, [pc, #148]	; (406088 <writeLegOut+0xd4>)
  405ff4:	47a0      	blx	r4
		WriteServo(L1_S1,S1);
  405ff6:	2001      	movs	r0, #1
  405ff8:	4601      	mov	r1, r0
  405ffa:	eeb0 0a68 	vmov.f32	s0, s17
  405ffe:	47a0      	blx	r4
		WriteServo(L1_S2,S2);
  406000:	2001      	movs	r0, #1
  406002:	2102      	movs	r1, #2
  406004:	eeb0 0a48 	vmov.f32	s0, s16
  406008:	47a0      	blx	r4
		break;
  40600a:	e03a      	b.n	406082 <writeLegOut+0xce>

		case 2:
		WriteServo(L2_S0,S0);
  40600c:	2002      	movs	r0, #2
  40600e:	2100      	movs	r1, #0
  406010:	4c1d      	ldr	r4, [pc, #116]	; (406088 <writeLegOut+0xd4>)
  406012:	47a0      	blx	r4
		WriteServo(L2_S1,S1);
  406014:	2002      	movs	r0, #2
  406016:	2101      	movs	r1, #1
  406018:	eeb0 0a68 	vmov.f32	s0, s17
  40601c:	47a0      	blx	r4
		WriteServo(L2_S2,S2);
  40601e:	2002      	movs	r0, #2
  406020:	4601      	mov	r1, r0
  406022:	eeb0 0a48 	vmov.f32	s0, s16
  406026:	47a0      	blx	r4
		break;
  406028:	e02b      	b.n	406082 <writeLegOut+0xce>

		case 3:
		WriteServo(L3_S0,S0);
  40602a:	2003      	movs	r0, #3
  40602c:	2100      	movs	r1, #0
  40602e:	4c16      	ldr	r4, [pc, #88]	; (406088 <writeLegOut+0xd4>)
  406030:	47a0      	blx	r4
		WriteServo(L3_S1,S1);
  406032:	2003      	movs	r0, #3
  406034:	2101      	movs	r1, #1
  406036:	eeb0 0a68 	vmov.f32	s0, s17
  40603a:	47a0      	blx	r4
		WriteServo(L3_S2,S2);
  40603c:	2003      	movs	r0, #3
  40603e:	2102      	movs	r1, #2
  406040:	eeb0 0a48 	vmov.f32	s0, s16
  406044:	47a0      	blx	r4
		break;
  406046:	e01c      	b.n	406082 <writeLegOut+0xce>

		case 4:
		WriteServo(L4_S0,S0);
  406048:	2004      	movs	r0, #4
  40604a:	2100      	movs	r1, #0
  40604c:	4c0e      	ldr	r4, [pc, #56]	; (406088 <writeLegOut+0xd4>)
  40604e:	47a0      	blx	r4
		WriteServo(L4_S1,S1);
  406050:	2004      	movs	r0, #4
  406052:	2101      	movs	r1, #1
  406054:	eeb0 0a68 	vmov.f32	s0, s17
  406058:	47a0      	blx	r4
		WriteServo(L4_S2,S2);
  40605a:	2004      	movs	r0, #4
  40605c:	2102      	movs	r1, #2
  40605e:	eeb0 0a48 	vmov.f32	s0, s16
  406062:	47a0      	blx	r4
		break;
  406064:	e00d      	b.n	406082 <writeLegOut+0xce>

		case 5:
		WriteServo(L5_S0,S0);
  406066:	2005      	movs	r0, #5
  406068:	2100      	movs	r1, #0
  40606a:	4c07      	ldr	r4, [pc, #28]	; (406088 <writeLegOut+0xd4>)
  40606c:	47a0      	blx	r4
		WriteServo(L5_S1,S1);
  40606e:	2005      	movs	r0, #5
  406070:	2101      	movs	r1, #1
  406072:	eeb0 0a68 	vmov.f32	s0, s17
  406076:	47a0      	blx	r4
		WriteServo(L5_S2,S2);
  406078:	2005      	movs	r0, #5
  40607a:	2102      	movs	r1, #2
  40607c:	eeb0 0a48 	vmov.f32	s0, s16
  406080:	47a0      	blx	r4
		break;
		
		
	}

}
  406082:	ecbd 8b02 	vpop	{d8}
  406086:	bd10      	pop	{r4, pc}
  406088:	00405411 	.word	0x00405411
  40608c:	00000000 	.word	0x00000000

00406090 <getS0cal>:

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
  406090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406094:	ed2d 8b02 	vpush	{d8}
  406098:	4680      	mov	r8, r0
  40609a:	468a      	mov	sl, r1
  40609c:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  40609e:	2006      	movs	r0, #6
  4060a0:	2100      	movs	r1, #0
  4060a2:	225a      	movs	r2, #90	; 0x5a
  4060a4:	4c52      	ldr	r4, [pc, #328]	; (4061f0 <getS0cal+0x160>)
  4060a6:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  4060a8:	2006      	movs	r0, #6
  4060aa:	2101      	movs	r1, #1
  4060ac:	2200      	movs	r2, #0
  4060ae:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  4060b0:	2006      	movs	r0, #6
  4060b2:	2102      	movs	r1, #2
  4060b4:	225a      	movs	r2, #90	; 0x5a
  4060b6:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  4060b8:	484e      	ldr	r0, [pc, #312]	; (4061f4 <getS0cal+0x164>)
  4060ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060be:	f44f 7200 	mov.w	r2, #512	; 0x200
  4060c2:	4b4d      	ldr	r3, [pc, #308]	; (4061f8 <getS0cal+0x168>)
  4060c4:	4798      	blx	r3
}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  4060c6:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 4061fc <getS0cal+0x16c>

}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  4060ca:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  4060cc:	4d49      	ldr	r5, [pc, #292]	; (4061f4 <getS0cal+0x164>)
  4060ce:	4c4a      	ldr	r4, [pc, #296]	; (4061f8 <getS0cal+0x168>)
  4060d0:	4f4b      	ldr	r7, [pc, #300]	; (406200 <getS0cal+0x170>)
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  4060d2:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  4060d6:	f8df 9144 	ldr.w	r9, [pc, #324]	; 40621c <getS0cal+0x18c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  4060da:	4628      	mov	r0, r5
  4060dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060e0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4060e4:	47a0      	blx	r4
  4060e6:	b958      	cbnz	r0, 406100 <getS0cal+0x70>
  4060e8:	683b      	ldr	r3, [r7, #0]
  4060ea:	b94b      	cbnz	r3, 406100 <getS0cal+0x70>
			if(calState == 0){
  4060ec:	b91e      	cbnz	r6, 4060f6 <getS0cal+0x66>
				*angOff = 90 - ang;
  4060ee:	ee38 8ac8 	vsub.f32	s16, s17, s16
  4060f2:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  4060f6:	3601      	adds	r6, #1
			ang = 90;
			But_Up = 1;
  4060f8:	2301      	movs	r3, #1
  4060fa:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  4060fc:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  406100:	4628      	mov	r0, r5
  406102:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406106:	f44f 7200 	mov.w	r2, #512	; 0x200
  40610a:	47a0      	blx	r4
  40610c:	b108      	cbz	r0, 406112 <getS0cal+0x82>
  40610e:	2300      	movs	r3, #0
  406110:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  406112:	4628      	mov	r0, r5
  406114:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406118:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40611c:	47a0      	blx	r4
  40611e:	b968      	cbnz	r0, 40613c <getS0cal+0xac>
			ang += 0.01;
  406120:	ee18 0a10 	vmov	r0, s16
  406124:	4b37      	ldr	r3, [pc, #220]	; (406204 <getS0cal+0x174>)
  406126:	4798      	blx	r3
  406128:	a32f      	add	r3, pc, #188	; (adr r3, 4061e8 <getS0cal+0x158>)
  40612a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40612e:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 406220 <getS0cal+0x190>
  406132:	47e0      	blx	ip
  406134:	4b34      	ldr	r3, [pc, #208]	; (406208 <getS0cal+0x178>)
  406136:	4798      	blx	r3
  406138:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  40613c:	4628      	mov	r0, r5
  40613e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406142:	f44f 6200 	mov.w	r2, #2048	; 0x800
  406146:	47a0      	blx	r4
  406148:	b968      	cbnz	r0, 406166 <getS0cal+0xd6>
			ang -= 0.01;
  40614a:	ee18 0a10 	vmov	r0, s16
  40614e:	4b2d      	ldr	r3, [pc, #180]	; (406204 <getS0cal+0x174>)
  406150:	4798      	blx	r3
  406152:	a325      	add	r3, pc, #148	; (adr r3, 4061e8 <getS0cal+0x158>)
  406154:	e9d3 2300 	ldrd	r2, r3, [r3]
  406158:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 406224 <getS0cal+0x194>
  40615c:	47e0      	blx	ip
  40615e:	4b2a      	ldr	r3, [pc, #168]	; (406208 <getS0cal+0x178>)
  406160:	4798      	blx	r3
  406162:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  406166:	2e01      	cmp	r6, #1
  406168:	d105      	bne.n	406176 <getS0cal+0xe6>
  40616a:	4648      	mov	r0, r9
  40616c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406170:	4b26      	ldr	r3, [pc, #152]	; (40620c <getS0cal+0x17c>)
  406172:	4798      	blx	r3
  406174:	e004      	b.n	406180 <getS0cal+0xf0>
		else pio_clear(LED3);
  406176:	4648      	mov	r0, r9
  406178:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40617c:	4b24      	ldr	r3, [pc, #144]	; (406210 <getS0cal+0x180>)
  40617e:	4798      	blx	r3
		
		WriteServo(Leg,0,ang);
  406180:	4640      	mov	r0, r8
  406182:	2100      	movs	r1, #0
  406184:	eeb0 0a48 	vmov.f32	s0, s16
  406188:	4b22      	ldr	r3, [pc, #136]	; (406214 <getS0cal+0x184>)
  40618a:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  40618c:	4628      	mov	r0, r5
  40618e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406192:	f44f 7200 	mov.w	r2, #512	; 0x200
  406196:	47a0      	blx	r4
  406198:	2e00      	cmp	r6, #0
  40619a:	dd9e      	ble.n	4060da <getS0cal+0x4a>
  40619c:	2800      	cmp	r0, #0
  40619e:	d19c      	bne.n	4060da <getS0cal+0x4a>
  4061a0:	683b      	ldr	r3, [r7, #0]
  4061a2:	2b00      	cmp	r3, #0
  4061a4:	d199      	bne.n	4060da <getS0cal+0x4a>
		else pio_clear(LED3);
		
		WriteServo(Leg,0,ang);
		
	}
	But_Up = 1;
  4061a6:	2501      	movs	r5, #1
  4061a8:	4b15      	ldr	r3, [pc, #84]	; (406200 <getS0cal+0x170>)
  4061aa:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  4061ac:	edda 7a00 	vldr	s15, [sl]
  4061b0:	ee38 8a27 	vadd.f32	s16, s16, s15
  4061b4:	eddf 7a18 	vldr	s15, [pc, #96]	; 406218 <getS0cal+0x188>
  4061b8:	ee88 8a27 	vdiv.f32	s16, s16, s15
  4061bc:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  4061c0:	2006      	movs	r0, #6
  4061c2:	2100      	movs	r1, #0
  4061c4:	225a      	movs	r2, #90	; 0x5a
  4061c6:	4c0a      	ldr	r4, [pc, #40]	; (4061f0 <getS0cal+0x160>)
  4061c8:	47a0      	blx	r4
	cmdServoMan(6,1,90.00);
  4061ca:	2006      	movs	r0, #6
  4061cc:	4629      	mov	r1, r5
  4061ce:	225a      	movs	r2, #90	; 0x5a
  4061d0:	47a0      	blx	r4
	cmdServoMan(6,2,180.00);
  4061d2:	2006      	movs	r0, #6
  4061d4:	2102      	movs	r1, #2
  4061d6:	22b4      	movs	r2, #180	; 0xb4
  4061d8:	47a0      	blx	r4
}
  4061da:	ecbd 8b02 	vpop	{d8}
  4061de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061e2:	bf00      	nop
  4061e4:	f3af 8000 	nop.w
  4061e8:	47ae147b 	.word	0x47ae147b
  4061ec:	3f847ae1 	.word	0x3f847ae1
  4061f0:	00406b3d 	.word	0x00406b3d
  4061f4:	400e1200 	.word	0x400e1200
  4061f8:	004027d1 	.word	0x004027d1
  4061fc:	42b40000 	.word	0x42b40000
  406200:	2040c4c8 	.word	0x2040c4c8
  406204:	0040ac4d 	.word	0x0040ac4d
  406208:	0040b279 	.word	0x0040b279
  40620c:	004027c9 	.word	0x004027c9
  406210:	004027cd 	.word	0x004027cd
  406214:	00405411 	.word	0x00405411
  406218:	42340000 	.word	0x42340000
  40621c:	400e0e00 	.word	0x400e0e00
  406220:	0040a991 	.word	0x0040a991
  406224:	0040a98d 	.word	0x0040a98d

00406228 <getS1cal>:


void getS1cal(int Leg, float* angOff, float* Lin) {
  406228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40622c:	ed2d 8b02 	vpush	{d8}
  406230:	4680      	mov	r8, r0
  406232:	468a      	mov	sl, r1
  406234:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 0;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  406236:	2006      	movs	r0, #6
  406238:	2100      	movs	r1, #0
  40623a:	225a      	movs	r2, #90	; 0x5a
  40623c:	4c52      	ldr	r4, [pc, #328]	; (406388 <getS1cal+0x160>)
  40623e:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406240:	2006      	movs	r0, #6
  406242:	2101      	movs	r1, #1
  406244:	2200      	movs	r2, #0
  406246:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406248:	2006      	movs	r0, #6
  40624a:	2102      	movs	r1, #2
  40624c:	225a      	movs	r2, #90	; 0x5a
  40624e:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  406250:	484e      	ldr	r0, [pc, #312]	; (40638c <getS1cal+0x164>)
  406252:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406256:	f44f 7200 	mov.w	r2, #512	; 0x200
  40625a:	4b4d      	ldr	r3, [pc, #308]	; (406390 <getS1cal+0x168>)
  40625c:	4798      	blx	r3
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 0;
  40625e:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 406394 <getS1cal+0x16c>
	cmdServoMan(6,2,180.00);
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  406262:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  406264:	4d49      	ldr	r5, [pc, #292]	; (40638c <getS1cal+0x164>)
  406266:	4c4a      	ldr	r4, [pc, #296]	; (406390 <getS1cal+0x168>)
  406268:	4f4b      	ldr	r7, [pc, #300]	; (406398 <getS1cal+0x170>)
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  40626a:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  40626e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4063b4 <getS1cal+0x18c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  406272:	4628      	mov	r0, r5
  406274:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406278:	f44f 7200 	mov.w	r2, #512	; 0x200
  40627c:	47a0      	blx	r4
  40627e:	b958      	cbnz	r0, 406298 <getS1cal+0x70>
  406280:	683b      	ldr	r3, [r7, #0]
  406282:	b94b      	cbnz	r3, 406298 <getS1cal+0x70>
			if(calState == 0){
  406284:	b91e      	cbnz	r6, 40628e <getS1cal+0x66>
				*angOff = 0 - ang;
  406286:	ee38 8ac8 	vsub.f32	s16, s17, s16
  40628a:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  40628e:	3601      	adds	r6, #1
			ang = 0;
			But_Up = 1;
  406290:	2301      	movs	r3, #1
  406292:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  406294:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  406298:	4628      	mov	r0, r5
  40629a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40629e:	f44f 7200 	mov.w	r2, #512	; 0x200
  4062a2:	47a0      	blx	r4
  4062a4:	b108      	cbz	r0, 4062aa <getS1cal+0x82>
  4062a6:	2300      	movs	r3, #0
  4062a8:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  4062aa:	4628      	mov	r0, r5
  4062ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4062b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4062b4:	47a0      	blx	r4
  4062b6:	b968      	cbnz	r0, 4062d4 <getS1cal+0xac>
			ang += 0.01;
  4062b8:	ee18 0a10 	vmov	r0, s16
  4062bc:	4b37      	ldr	r3, [pc, #220]	; (40639c <getS1cal+0x174>)
  4062be:	4798      	blx	r3
  4062c0:	a32f      	add	r3, pc, #188	; (adr r3, 406380 <getS1cal+0x158>)
  4062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4062c6:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 4063b8 <getS1cal+0x190>
  4062ca:	47e0      	blx	ip
  4062cc:	4b34      	ldr	r3, [pc, #208]	; (4063a0 <getS1cal+0x178>)
  4062ce:	4798      	blx	r3
  4062d0:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  4062d4:	4628      	mov	r0, r5
  4062d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4062da:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4062de:	47a0      	blx	r4
  4062e0:	b968      	cbnz	r0, 4062fe <getS1cal+0xd6>
			ang -= 0.01;
  4062e2:	ee18 0a10 	vmov	r0, s16
  4062e6:	4b2d      	ldr	r3, [pc, #180]	; (40639c <getS1cal+0x174>)
  4062e8:	4798      	blx	r3
  4062ea:	a325      	add	r3, pc, #148	; (adr r3, 406380 <getS1cal+0x158>)
  4062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4062f0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 4063bc <getS1cal+0x194>
  4062f4:	47e0      	blx	ip
  4062f6:	4b2a      	ldr	r3, [pc, #168]	; (4063a0 <getS1cal+0x178>)
  4062f8:	4798      	blx	r3
  4062fa:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  4062fe:	2e01      	cmp	r6, #1
  406300:	d105      	bne.n	40630e <getS1cal+0xe6>
  406302:	4648      	mov	r0, r9
  406304:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406308:	4b26      	ldr	r3, [pc, #152]	; (4063a4 <getS1cal+0x17c>)
  40630a:	4798      	blx	r3
  40630c:	e004      	b.n	406318 <getS1cal+0xf0>
		else pio_clear(LED3);
  40630e:	4648      	mov	r0, r9
  406310:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406314:	4b24      	ldr	r3, [pc, #144]	; (4063a8 <getS1cal+0x180>)
  406316:	4798      	blx	r3
		
		WriteServo(Leg,1,ang);
  406318:	4640      	mov	r0, r8
  40631a:	2101      	movs	r1, #1
  40631c:	eeb0 0a48 	vmov.f32	s0, s16
  406320:	4b22      	ldr	r3, [pc, #136]	; (4063ac <getS1cal+0x184>)
  406322:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  406324:	4628      	mov	r0, r5
  406326:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40632a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40632e:	47a0      	blx	r4
  406330:	2e00      	cmp	r6, #0
  406332:	dd9e      	ble.n	406272 <getS1cal+0x4a>
  406334:	2800      	cmp	r0, #0
  406336:	d19c      	bne.n	406272 <getS1cal+0x4a>
  406338:	683b      	ldr	r3, [r7, #0]
  40633a:	2b00      	cmp	r3, #0
  40633c:	d199      	bne.n	406272 <getS1cal+0x4a>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,1,ang);
	}
	But_Up = 1;
  40633e:	2501      	movs	r5, #1
  406340:	4b15      	ldr	r3, [pc, #84]	; (406398 <getS1cal+0x170>)
  406342:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  406344:	edda 7a00 	vldr	s15, [sl]
  406348:	ee38 8a27 	vadd.f32	s16, s16, s15
  40634c:	eddf 7a18 	vldr	s15, [pc, #96]	; 4063b0 <getS1cal+0x188>
  406350:	ee88 8a27 	vdiv.f32	s16, s16, s15
  406354:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  406358:	2006      	movs	r0, #6
  40635a:	2100      	movs	r1, #0
  40635c:	225a      	movs	r2, #90	; 0x5a
  40635e:	4c0a      	ldr	r4, [pc, #40]	; (406388 <getS1cal+0x160>)
  406360:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406362:	2006      	movs	r0, #6
  406364:	4629      	mov	r1, r5
  406366:	2200      	movs	r2, #0
  406368:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  40636a:	2006      	movs	r0, #6
  40636c:	2102      	movs	r1, #2
  40636e:	225a      	movs	r2, #90	; 0x5a
  406370:	47a0      	blx	r4
}
  406372:	ecbd 8b02 	vpop	{d8}
  406376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40637a:	bf00      	nop
  40637c:	f3af 8000 	nop.w
  406380:	47ae147b 	.word	0x47ae147b
  406384:	3f847ae1 	.word	0x3f847ae1
  406388:	00406b3d 	.word	0x00406b3d
  40638c:	400e1200 	.word	0x400e1200
  406390:	004027d1 	.word	0x004027d1
  406394:	00000000 	.word	0x00000000
  406398:	2040c4c8 	.word	0x2040c4c8
  40639c:	0040ac4d 	.word	0x0040ac4d
  4063a0:	0040b279 	.word	0x0040b279
  4063a4:	004027c9 	.word	0x004027c9
  4063a8:	004027cd 	.word	0x004027cd
  4063ac:	00405411 	.word	0x00405411
  4063b0:	42340000 	.word	0x42340000
  4063b4:	400e0e00 	.word	0x400e0e00
  4063b8:	0040a991 	.word	0x0040a991
  4063bc:	0040a98d 	.word	0x0040a98d

004063c0 <getS2cal>:

void getS2cal(int Leg, float* angOff, float* Lin) {
  4063c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063c4:	ed2d 8b02 	vpush	{d8}
  4063c8:	4680      	mov	r8, r0
  4063ca:	468a      	mov	sl, r1
  4063cc:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  4063ce:	2006      	movs	r0, #6
  4063d0:	2100      	movs	r1, #0
  4063d2:	225a      	movs	r2, #90	; 0x5a
  4063d4:	4c52      	ldr	r4, [pc, #328]	; (406520 <getS2cal+0x160>)
  4063d6:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  4063d8:	2006      	movs	r0, #6
  4063da:	2101      	movs	r1, #1
  4063dc:	2200      	movs	r2, #0
  4063de:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  4063e0:	2006      	movs	r0, #6
  4063e2:	2102      	movs	r1, #2
  4063e4:	225a      	movs	r2, #90	; 0x5a
  4063e6:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  4063e8:	484e      	ldr	r0, [pc, #312]	; (406524 <getS2cal+0x164>)
  4063ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4063ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  4063f2:	4b4d      	ldr	r3, [pc, #308]	; (406528 <getS2cal+0x168>)
  4063f4:	4798      	blx	r3
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  4063f6:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 40652c <getS2cal+0x16c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  4063fa:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  4063fc:	4d49      	ldr	r5, [pc, #292]	; (406524 <getS2cal+0x164>)
  4063fe:	4c4a      	ldr	r4, [pc, #296]	; (406528 <getS2cal+0x168>)
  406400:	4f4b      	ldr	r7, [pc, #300]	; (406530 <getS2cal+0x170>)
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  406402:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  406406:	f8df 9140 	ldr.w	r9, [pc, #320]	; 406548 <getS2cal+0x188>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40640a:	4628      	mov	r0, r5
  40640c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406410:	f44f 7200 	mov.w	r2, #512	; 0x200
  406414:	47a0      	blx	r4
  406416:	b958      	cbnz	r0, 406430 <getS2cal+0x70>
  406418:	683b      	ldr	r3, [r7, #0]
  40641a:	b94b      	cbnz	r3, 406430 <getS2cal+0x70>
			if(calState == 0){
  40641c:	b91e      	cbnz	r6, 406426 <getS2cal+0x66>
				*angOff = 90 - ang;
  40641e:	ee38 8ac8 	vsub.f32	s16, s17, s16
  406422:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  406426:	3601      	adds	r6, #1
			ang = 90;
			But_Up = 1;
  406428:	2301      	movs	r3, #1
  40642a:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  40642c:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  406430:	4628      	mov	r0, r5
  406432:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406436:	f44f 7200 	mov.w	r2, #512	; 0x200
  40643a:	47a0      	blx	r4
  40643c:	b108      	cbz	r0, 406442 <getS2cal+0x82>
  40643e:	2300      	movs	r3, #0
  406440:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  406442:	4628      	mov	r0, r5
  406444:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406448:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40644c:	47a0      	blx	r4
  40644e:	b968      	cbnz	r0, 40646c <getS2cal+0xac>
			ang += 0.01;
  406450:	ee18 0a10 	vmov	r0, s16
  406454:	4b37      	ldr	r3, [pc, #220]	; (406534 <getS2cal+0x174>)
  406456:	4798      	blx	r3
  406458:	a32f      	add	r3, pc, #188	; (adr r3, 406518 <getS2cal+0x158>)
  40645a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40645e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 40654c <getS2cal+0x18c>
  406462:	47e0      	blx	ip
  406464:	4b34      	ldr	r3, [pc, #208]	; (406538 <getS2cal+0x178>)
  406466:	4798      	blx	r3
  406468:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  40646c:	4628      	mov	r0, r5
  40646e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406472:	f44f 6200 	mov.w	r2, #2048	; 0x800
  406476:	47a0      	blx	r4
  406478:	b968      	cbnz	r0, 406496 <getS2cal+0xd6>
			ang -= 0.01;
  40647a:	ee18 0a10 	vmov	r0, s16
  40647e:	4b2d      	ldr	r3, [pc, #180]	; (406534 <getS2cal+0x174>)
  406480:	4798      	blx	r3
  406482:	a325      	add	r3, pc, #148	; (adr r3, 406518 <getS2cal+0x158>)
  406484:	e9d3 2300 	ldrd	r2, r3, [r3]
  406488:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 406550 <getS2cal+0x190>
  40648c:	47e0      	blx	ip
  40648e:	4b2a      	ldr	r3, [pc, #168]	; (406538 <getS2cal+0x178>)
  406490:	4798      	blx	r3
  406492:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  406496:	2e01      	cmp	r6, #1
  406498:	d105      	bne.n	4064a6 <getS2cal+0xe6>
  40649a:	4648      	mov	r0, r9
  40649c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4064a0:	4b26      	ldr	r3, [pc, #152]	; (40653c <getS2cal+0x17c>)
  4064a2:	4798      	blx	r3
  4064a4:	e004      	b.n	4064b0 <getS2cal+0xf0>
		else pio_clear(LED3);
  4064a6:	4648      	mov	r0, r9
  4064a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4064ac:	4b24      	ldr	r3, [pc, #144]	; (406540 <getS2cal+0x180>)
  4064ae:	4798      	blx	r3
		
		WriteServo(Leg,2,ang);
  4064b0:	4640      	mov	r0, r8
  4064b2:	2102      	movs	r1, #2
  4064b4:	eeb0 0a48 	vmov.f32	s0, s16
  4064b8:	4b22      	ldr	r3, [pc, #136]	; (406544 <getS2cal+0x184>)
  4064ba:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  4064bc:	4628      	mov	r0, r5
  4064be:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4064c2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4064c6:	47a0      	blx	r4
  4064c8:	2e00      	cmp	r6, #0
  4064ca:	dd9e      	ble.n	40640a <getS2cal+0x4a>
  4064cc:	2800      	cmp	r0, #0
  4064ce:	d19c      	bne.n	40640a <getS2cal+0x4a>
  4064d0:	683b      	ldr	r3, [r7, #0]
  4064d2:	2b00      	cmp	r3, #0
  4064d4:	d199      	bne.n	40640a <getS2cal+0x4a>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,2,ang);
	}
	But_Up = 1;
  4064d6:	2501      	movs	r5, #1
  4064d8:	4b15      	ldr	r3, [pc, #84]	; (406530 <getS2cal+0x170>)
  4064da:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/90.00;
  4064dc:	edda 7a00 	vldr	s15, [sl]
  4064e0:	ee38 8a27 	vadd.f32	s16, s16, s15
  4064e4:	eddf 7a11 	vldr	s15, [pc, #68]	; 40652c <getS2cal+0x16c>
  4064e8:	ee88 8a27 	vdiv.f32	s16, s16, s15
  4064ec:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  4064f0:	2006      	movs	r0, #6
  4064f2:	2100      	movs	r1, #0
  4064f4:	225a      	movs	r2, #90	; 0x5a
  4064f6:	4c0a      	ldr	r4, [pc, #40]	; (406520 <getS2cal+0x160>)
  4064f8:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  4064fa:	2006      	movs	r0, #6
  4064fc:	4629      	mov	r1, r5
  4064fe:	2200      	movs	r2, #0
  406500:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406502:	2006      	movs	r0, #6
  406504:	2102      	movs	r1, #2
  406506:	225a      	movs	r2, #90	; 0x5a
  406508:	47a0      	blx	r4
}
  40650a:	ecbd 8b02 	vpop	{d8}
  40650e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406512:	bf00      	nop
  406514:	f3af 8000 	nop.w
  406518:	47ae147b 	.word	0x47ae147b
  40651c:	3f847ae1 	.word	0x3f847ae1
  406520:	00406b3d 	.word	0x00406b3d
  406524:	400e1200 	.word	0x400e1200
  406528:	004027d1 	.word	0x004027d1
  40652c:	42b40000 	.word	0x42b40000
  406530:	2040c4c8 	.word	0x2040c4c8
  406534:	0040ac4d 	.word	0x0040ac4d
  406538:	0040b279 	.word	0x0040b279
  40653c:	004027c9 	.word	0x004027c9
  406540:	004027cd 	.word	0x004027cd
  406544:	00405411 	.word	0x00405411
  406548:	400e0e00 	.word	0x400e0e00
  40654c:	0040a991 	.word	0x0040a991
  406550:	0040a98d 	.word	0x0040a98d

00406554 <calibServoSpec>:

void calibServoSpec(float* calData,int Leg,int Svo) {
  406554:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  406558:	b09c      	sub	sp, #112	; 0x70
  40655a:	4680      	mov	r8, r0

		if(Svo == 0) {
  40655c:	b962      	cbnz	r2, 406578 <calibServoSpec+0x24>
			calData[Leg*2] = 0;
  40655e:	00cb      	lsls	r3, r1, #3
  406560:	18c4      	adds	r4, r0, r3
  406562:	2000      	movs	r0, #0
  406564:	6020      	str	r0, [r4, #0]
			calData[Leg*2+1] = 0;
  406566:	3304      	adds	r3, #4
  406568:	eb08 0203 	add.w	r2, r8, r3
  40656c:	6010      	str	r0, [r2, #0]
			getS0cal(Leg,&calData[Leg*2],&calData[Leg*2+1]);
  40656e:	4608      	mov	r0, r1
  406570:	4621      	mov	r1, r4
  406572:	4b24      	ldr	r3, [pc, #144]	; (406604 <calibServoSpec+0xb0>)
  406574:	4798      	blx	r3
  406576:	e020      	b.n	4065ba <calibServoSpec+0x66>
		}
		else if(Svo == 1) {
  406578:	2a01      	cmp	r2, #1
  40657a:	d10e      	bne.n	40659a <calibServoSpec+0x46>
			calData[Leg*2+12] = 0;
  40657c:	00cb      	lsls	r3, r1, #3
  40657e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  406582:	4404      	add	r4, r0
  406584:	2000      	movs	r0, #0
  406586:	6020      	str	r0, [r4, #0]
			calData[Leg*2+13] = 0;
  406588:	3334      	adds	r3, #52	; 0x34
  40658a:	eb08 0203 	add.w	r2, r8, r3
  40658e:	6010      	str	r0, [r2, #0]
			getS1cal(Leg,&calData[Leg*2+12],&calData[Leg*2+13]);
  406590:	4608      	mov	r0, r1
  406592:	4621      	mov	r1, r4
  406594:	4b1c      	ldr	r3, [pc, #112]	; (406608 <calibServoSpec+0xb4>)
  406596:	4798      	blx	r3
  406598:	e00f      	b.n	4065ba <calibServoSpec+0x66>
		}
		else if(Svo == 2) {
  40659a:	2a02      	cmp	r2, #2
  40659c:	d10d      	bne.n	4065ba <calibServoSpec+0x66>
			calData[Leg*2+24] = 0;
  40659e:	00cb      	lsls	r3, r1, #3
  4065a0:	f103 0460 	add.w	r4, r3, #96	; 0x60
  4065a4:	4404      	add	r4, r0
  4065a6:	2000      	movs	r0, #0
  4065a8:	6020      	str	r0, [r4, #0]
			calData[Leg*2+25] = 0;
  4065aa:	3364      	adds	r3, #100	; 0x64
  4065ac:	eb08 0203 	add.w	r2, r8, r3
  4065b0:	6010      	str	r0, [r2, #0]
			getS2cal(Leg,&calData[Leg*2+24],&calData[Leg*2+25]);
  4065b2:	4608      	mov	r0, r1
  4065b4:	4621      	mov	r1, r4
  4065b6:	4b15      	ldr	r3, [pc, #84]	; (40660c <calibServoSpec+0xb8>)
  4065b8:	4798      	blx	r3
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
  4065ba:	4815      	ldr	r0, [pc, #84]	; (406610 <calibServoSpec+0xbc>)
  4065bc:	4c15      	ldr	r4, [pc, #84]	; (406614 <calibServoSpec+0xc0>)
  4065be:	47a0      	blx	r4
		char buf[100];
		sendDebugString("{");
  4065c0:	4815      	ldr	r0, [pc, #84]	; (406618 <calibServoSpec+0xc4>)
  4065c2:	47a0      	blx	r4
  4065c4:	4644      	mov	r4, r8
  4065c6:	f108 0890 	add.w	r8, r8, #144	; 0x90
			for(int i =0; i<18; i++) {
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  4065ca:	4f14      	ldr	r7, [pc, #80]	; (40661c <calibServoSpec+0xc8>)
  4065cc:	4d14      	ldr	r5, [pc, #80]	; (406620 <calibServoSpec+0xcc>)
  4065ce:	4e15      	ldr	r6, [pc, #84]	; (406624 <calibServoSpec+0xd0>)
  4065d0:	6820      	ldr	r0, [r4, #0]
  4065d2:	47a8      	blx	r5
  4065d4:	4682      	mov	sl, r0
  4065d6:	468b      	mov	fp, r1
  4065d8:	6860      	ldr	r0, [r4, #4]
  4065da:	47a8      	blx	r5
  4065dc:	e9cd 0100 	strd	r0, r1, [sp]
  4065e0:	a803      	add	r0, sp, #12
  4065e2:	4639      	mov	r1, r7
  4065e4:	4652      	mov	r2, sl
  4065e6:	465b      	mov	r3, fp
  4065e8:	47b0      	blx	r6
				sendDebugString(buf);
  4065ea:	a803      	add	r0, sp, #12
  4065ec:	4b09      	ldr	r3, [pc, #36]	; (406614 <calibServoSpec+0xc0>)
  4065ee:	4798      	blx	r3
  4065f0:	3408      	adds	r4, #8
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
		char buf[100];
		sendDebugString("{");
			for(int i =0; i<18; i++) {
  4065f2:	4544      	cmp	r4, r8
  4065f4:	d1ec      	bne.n	4065d0 <calibServoSpec+0x7c>
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
				sendDebugString(buf);
			}
		sendDebugString("}\n");
  4065f6:	480c      	ldr	r0, [pc, #48]	; (406628 <calibServoSpec+0xd4>)
  4065f8:	4b06      	ldr	r3, [pc, #24]	; (406614 <calibServoSpec+0xc0>)
  4065fa:	4798      	blx	r3
}
  4065fc:	b01c      	add	sp, #112	; 0x70
  4065fe:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  406602:	bf00      	nop
  406604:	00406091 	.word	0x00406091
  406608:	00406229 	.word	0x00406229
  40660c:	004063c1 	.word	0x004063c1
  406610:	004134e8 	.word	0x004134e8
  406614:	0040019d 	.word	0x0040019d
  406618:	0041350c 	.word	0x0041350c
  40661c:	00413510 	.word	0x00413510
  406620:	0040ac4d 	.word	0x0040ac4d
  406624:	0040bb79 	.word	0x0040bb79
  406628:	00413518 	.word	0x00413518

0040662c <byteToLEDs>:
		}
	sendDebugString("}\n");
}

//Misc
void byteToLEDs(uint8_t disp,uint8_t mask) {
  40662c:	b538      	push	{r3, r4, r5, lr}
  40662e:	4605      	mov	r5, r0
  406630:	460c      	mov	r4, r1
	if(mask&(1<<0) && disp&(1<<0)) pio_set(LED0);
  406632:	f011 0f01 	tst.w	r1, #1
  406636:	d00d      	beq.n	406654 <byteToLEDs+0x28>
  406638:	f010 0f01 	tst.w	r0, #1
  40663c:	d005      	beq.n	40664a <byteToLEDs+0x1e>
  40663e:	483f      	ldr	r0, [pc, #252]	; (40673c <byteToLEDs+0x110>)
  406640:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406644:	4b3e      	ldr	r3, [pc, #248]	; (406740 <byteToLEDs+0x114>)
  406646:	4798      	blx	r3
  406648:	e004      	b.n	406654 <byteToLEDs+0x28>
	else if(mask&(1<<0)) pio_clear(LED0);
  40664a:	483c      	ldr	r0, [pc, #240]	; (40673c <byteToLEDs+0x110>)
  40664c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406650:	4b3c      	ldr	r3, [pc, #240]	; (406744 <byteToLEDs+0x118>)
  406652:	4798      	blx	r3
	
	if(mask&(1<<1) && disp&(1<<1)) pio_set(LED1);
  406654:	f014 0f02 	tst.w	r4, #2
  406658:	d00d      	beq.n	406676 <byteToLEDs+0x4a>
  40665a:	f015 0f02 	tst.w	r5, #2
  40665e:	d005      	beq.n	40666c <byteToLEDs+0x40>
  406660:	4836      	ldr	r0, [pc, #216]	; (40673c <byteToLEDs+0x110>)
  406662:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406666:	4b36      	ldr	r3, [pc, #216]	; (406740 <byteToLEDs+0x114>)
  406668:	4798      	blx	r3
  40666a:	e004      	b.n	406676 <byteToLEDs+0x4a>
	else if(mask&(1<<1)) pio_clear(LED1);
  40666c:	4833      	ldr	r0, [pc, #204]	; (40673c <byteToLEDs+0x110>)
  40666e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406672:	4b34      	ldr	r3, [pc, #208]	; (406744 <byteToLEDs+0x118>)
  406674:	4798      	blx	r3
	
	if(mask&(1<<2) && disp&(1<<2)) pio_set(LED2);
  406676:	f014 0f04 	tst.w	r4, #4
  40667a:	d00d      	beq.n	406698 <byteToLEDs+0x6c>
  40667c:	f015 0f04 	tst.w	r5, #4
  406680:	d005      	beq.n	40668e <byteToLEDs+0x62>
  406682:	482e      	ldr	r0, [pc, #184]	; (40673c <byteToLEDs+0x110>)
  406684:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406688:	4b2d      	ldr	r3, [pc, #180]	; (406740 <byteToLEDs+0x114>)
  40668a:	4798      	blx	r3
  40668c:	e004      	b.n	406698 <byteToLEDs+0x6c>
	else if(mask&(1<<2)) pio_clear(LED2);
  40668e:	482b      	ldr	r0, [pc, #172]	; (40673c <byteToLEDs+0x110>)
  406690:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406694:	4b2b      	ldr	r3, [pc, #172]	; (406744 <byteToLEDs+0x118>)
  406696:	4798      	blx	r3
	
	if(mask&(1<<3) && disp&(1<<3)) pio_set(LED3);
  406698:	f014 0f08 	tst.w	r4, #8
  40669c:	d00d      	beq.n	4066ba <byteToLEDs+0x8e>
  40669e:	f015 0f08 	tst.w	r5, #8
  4066a2:	d005      	beq.n	4066b0 <byteToLEDs+0x84>
  4066a4:	4825      	ldr	r0, [pc, #148]	; (40673c <byteToLEDs+0x110>)
  4066a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4066aa:	4b25      	ldr	r3, [pc, #148]	; (406740 <byteToLEDs+0x114>)
  4066ac:	4798      	blx	r3
  4066ae:	e004      	b.n	4066ba <byteToLEDs+0x8e>
	else if(mask&(1<<3)) pio_clear(LED3);
  4066b0:	4822      	ldr	r0, [pc, #136]	; (40673c <byteToLEDs+0x110>)
  4066b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4066b6:	4b23      	ldr	r3, [pc, #140]	; (406744 <byteToLEDs+0x118>)
  4066b8:	4798      	blx	r3
	
	if(mask&(1<<4) && disp&(1<<4)) pio_set(LED4);
  4066ba:	f014 0f10 	tst.w	r4, #16
  4066be:	d00d      	beq.n	4066dc <byteToLEDs+0xb0>
  4066c0:	f015 0f10 	tst.w	r5, #16
  4066c4:	d005      	beq.n	4066d2 <byteToLEDs+0xa6>
  4066c6:	4820      	ldr	r0, [pc, #128]	; (406748 <byteToLEDs+0x11c>)
  4066c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4066cc:	4b1c      	ldr	r3, [pc, #112]	; (406740 <byteToLEDs+0x114>)
  4066ce:	4798      	blx	r3
  4066d0:	e004      	b.n	4066dc <byteToLEDs+0xb0>
	else if(mask&(1<<4)) pio_clear(LED4);
  4066d2:	481d      	ldr	r0, [pc, #116]	; (406748 <byteToLEDs+0x11c>)
  4066d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4066d8:	4b1a      	ldr	r3, [pc, #104]	; (406744 <byteToLEDs+0x118>)
  4066da:	4798      	blx	r3
	
	if(mask&(1<<5) && disp&(1<<5)) pio_set(LED5);
  4066dc:	f014 0f20 	tst.w	r4, #32
  4066e0:	d00b      	beq.n	4066fa <byteToLEDs+0xce>
  4066e2:	f015 0f20 	tst.w	r5, #32
  4066e6:	d004      	beq.n	4066f2 <byteToLEDs+0xc6>
  4066e8:	4814      	ldr	r0, [pc, #80]	; (40673c <byteToLEDs+0x110>)
  4066ea:	2104      	movs	r1, #4
  4066ec:	4b14      	ldr	r3, [pc, #80]	; (406740 <byteToLEDs+0x114>)
  4066ee:	4798      	blx	r3
  4066f0:	e003      	b.n	4066fa <byteToLEDs+0xce>
	else if(mask&(1<<5)) pio_clear(LED5);
  4066f2:	4812      	ldr	r0, [pc, #72]	; (40673c <byteToLEDs+0x110>)
  4066f4:	2104      	movs	r1, #4
  4066f6:	4b13      	ldr	r3, [pc, #76]	; (406744 <byteToLEDs+0x118>)
  4066f8:	4798      	blx	r3
	
	if(mask&(1<<6) && disp&(1<<6)) pio_set(LED6);
  4066fa:	f014 0f40 	tst.w	r4, #64	; 0x40
  4066fe:	d00d      	beq.n	40671c <byteToLEDs+0xf0>
  406700:	f015 0f40 	tst.w	r5, #64	; 0x40
  406704:	d005      	beq.n	406712 <byteToLEDs+0xe6>
  406706:	480d      	ldr	r0, [pc, #52]	; (40673c <byteToLEDs+0x110>)
  406708:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40670c:	4b0c      	ldr	r3, [pc, #48]	; (406740 <byteToLEDs+0x114>)
  40670e:	4798      	blx	r3
  406710:	e004      	b.n	40671c <byteToLEDs+0xf0>
	else if(mask&(1<<6)) pio_clear(LED6);
  406712:	480a      	ldr	r0, [pc, #40]	; (40673c <byteToLEDs+0x110>)
  406714:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406718:	4b0a      	ldr	r3, [pc, #40]	; (406744 <byteToLEDs+0x118>)
  40671a:	4798      	blx	r3
	
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
  40671c:	09e4      	lsrs	r4, r4, #7
  40671e:	d006      	beq.n	40672e <byteToLEDs+0x102>
  406720:	09eb      	lsrs	r3, r5, #7
  406722:	d004      	beq.n	40672e <byteToLEDs+0x102>
  406724:	4805      	ldr	r0, [pc, #20]	; (40673c <byteToLEDs+0x110>)
  406726:	2140      	movs	r1, #64	; 0x40
  406728:	4b05      	ldr	r3, [pc, #20]	; (406740 <byteToLEDs+0x114>)
  40672a:	4798      	blx	r3
  40672c:	bd38      	pop	{r3, r4, r5, pc}
	else if(mask&(1<<7)) pio_clear(LED7);
  40672e:	b11c      	cbz	r4, 406738 <byteToLEDs+0x10c>
  406730:	4802      	ldr	r0, [pc, #8]	; (40673c <byteToLEDs+0x110>)
  406732:	2140      	movs	r1, #64	; 0x40
  406734:	4b03      	ldr	r3, [pc, #12]	; (406744 <byteToLEDs+0x118>)
  406736:	4798      	blx	r3
  406738:	bd38      	pop	{r3, r4, r5, pc}
  40673a:	bf00      	nop
  40673c:	400e0e00 	.word	0x400e0e00
  406740:	004027c9 	.word	0x004027c9
  406744:	004027cd 	.word	0x004027cd
  406748:	400e1000 	.word	0x400e1000

0040674c <calibServos>:
				sendDebugString(buf);
			}
		sendDebugString("}\n");
}

void calibServos(float* calData) {
  40674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406750:	b09d      	sub	sp, #116	; 0x74
  406752:	4606      	mov	r6, r0
	sendDebugString("Started servo cal\n");
  406754:	4849      	ldr	r0, [pc, #292]	; (40687c <calibServos+0x130>)
  406756:	4b4a      	ldr	r3, [pc, #296]	; (406880 <calibServos+0x134>)
  406758:	4798      	blx	r3
  40675a:	4634      	mov	r4, r6
  40675c:	f106 0590 	add.w	r5, r6, #144	; 0x90
  406760:	4633      	mov	r3, r6
	for(int i = 0;i<36;i++) calData[i] = 0;
  406762:	2200      	movs	r2, #0
  406764:	f843 2b04 	str.w	r2, [r3], #4
  406768:	42ab      	cmp	r3, r5
  40676a:	d1fb      	bne.n	406764 <calibServos+0x18>
  40676c:	46b0      	mov	r8, r6
  40676e:	2700      	movs	r7, #0
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  406770:	f8df b124 	ldr.w	fp, [pc, #292]	; 406898 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  406774:	f8df 9124 	ldr.w	r9, [pc, #292]	; 40689c <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  406778:	f8df a124 	ldr.w	sl, [pc, #292]	; 4068a0 <calibServos+0x154>

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  40677c:	f3c7 1007 	ubfx	r0, r7, #4, #8
  406780:	21f0      	movs	r1, #240	; 0xf0
  406782:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  406784:	2006      	movs	r0, #6
  406786:	2100      	movs	r1, #0
  406788:	225a      	movs	r2, #90	; 0x5a
  40678a:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  40678c:	2006      	movs	r0, #6
  40678e:	2101      	movs	r1, #1
  406790:	225a      	movs	r2, #90	; 0x5a
  406792:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  406794:	2006      	movs	r0, #6
  406796:	2102      	movs	r1, #2
  406798:	22b4      	movs	r2, #180	; 0xb4
  40679a:	47c8      	blx	r9
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  40679c:	4638      	mov	r0, r7
  40679e:	4641      	mov	r1, r8
  4067a0:	f108 0204 	add.w	r2, r8, #4
  4067a4:	47d0      	blx	sl
}

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
  4067a6:	3701      	adds	r7, #1
  4067a8:	f108 0808 	add.w	r8, r8, #8
  4067ac:	2f06      	cmp	r7, #6
  4067ae:	d1e5      	bne.n	40677c <calibServos+0x30>
  4067b0:	f106 0830 	add.w	r8, r6, #48	; 0x30
  4067b4:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  4067b6:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 406898 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  4067ba:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40689c <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  4067be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 4068a4 <calibServos+0x158>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  4067c2:	f3c7 1007 	ubfx	r0, r7, #4, #8
  4067c6:	21f0      	movs	r1, #240	; 0xf0
  4067c8:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  4067ca:	2006      	movs	r0, #6
  4067cc:	2100      	movs	r1, #0
  4067ce:	225a      	movs	r2, #90	; 0x5a
  4067d0:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  4067d2:	2006      	movs	r0, #6
  4067d4:	2101      	movs	r1, #1
  4067d6:	225a      	movs	r2, #90	; 0x5a
  4067d8:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  4067da:	2006      	movs	r0, #6
  4067dc:	2102      	movs	r1, #2
  4067de:	22b4      	movs	r2, #180	; 0xb4
  4067e0:	47c8      	blx	r9
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  4067e2:	4638      	mov	r0, r7
  4067e4:	4641      	mov	r1, r8
  4067e6:	f108 0204 	add.w	r2, r8, #4
  4067ea:	47d0      	blx	sl
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
  4067ec:	3701      	adds	r7, #1
  4067ee:	f108 0808 	add.w	r8, r8, #8
  4067f2:	2f06      	cmp	r7, #6
  4067f4:	d1e5      	bne.n	4067c2 <calibServos+0x76>
  4067f6:	3660      	adds	r6, #96	; 0x60
  4067f8:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  4067fa:	f8df a09c 	ldr.w	sl, [pc, #156]	; 406898 <calibServos+0x14c>
	cmdServoMan(6,0,90.00);
  4067fe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40689c <calibServos+0x150>
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  406802:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4068a8 <calibServos+0x15c>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  406806:	f3c7 1007 	ubfx	r0, r7, #4, #8
  40680a:	21f0      	movs	r1, #240	; 0xf0
  40680c:	47d0      	blx	sl
	cmdServoMan(6,0,90.00);
  40680e:	2006      	movs	r0, #6
  406810:	2100      	movs	r1, #0
  406812:	225a      	movs	r2, #90	; 0x5a
  406814:	47c0      	blx	r8
	cmdServoMan(6,1,90.00);
  406816:	2006      	movs	r0, #6
  406818:	2101      	movs	r1, #1
  40681a:	225a      	movs	r2, #90	; 0x5a
  40681c:	47c0      	blx	r8
	cmdServoMan(6,2,180.00);
  40681e:	2006      	movs	r0, #6
  406820:	2102      	movs	r1, #2
  406822:	22b4      	movs	r2, #180	; 0xb4
  406824:	47c0      	blx	r8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  406826:	4638      	mov	r0, r7
  406828:	4631      	mov	r1, r6
  40682a:	1d32      	adds	r2, r6, #4
  40682c:	47c8      	blx	r9
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
  40682e:	3701      	adds	r7, #1
  406830:	3608      	adds	r6, #8
  406832:	2f06      	cmp	r7, #6
  406834:	d1e7      	bne.n	406806 <calibServos+0xba>
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
  406836:	4813      	ldr	r0, [pc, #76]	; (406884 <calibServos+0x138>)
  406838:	4e11      	ldr	r6, [pc, #68]	; (406880 <calibServos+0x134>)
  40683a:	47b0      	blx	r6
	char buf[100];
	sendDebugString("{");
  40683c:	4812      	ldr	r0, [pc, #72]	; (406888 <calibServos+0x13c>)
  40683e:	47b0      	blx	r6
		for(int i =0; i<18; i++) {
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  406840:	f8df a068 	ldr.w	sl, [pc, #104]	; 4068ac <calibServos+0x160>
  406844:	4f11      	ldr	r7, [pc, #68]	; (40688c <calibServos+0x140>)
  406846:	4e12      	ldr	r6, [pc, #72]	; (406890 <calibServos+0x144>)
  406848:	6820      	ldr	r0, [r4, #0]
  40684a:	47b8      	blx	r7
  40684c:	4680      	mov	r8, r0
  40684e:	4689      	mov	r9, r1
  406850:	6860      	ldr	r0, [r4, #4]
  406852:	47b8      	blx	r7
  406854:	e9cd 0100 	strd	r0, r1, [sp]
  406858:	a803      	add	r0, sp, #12
  40685a:	4651      	mov	r1, sl
  40685c:	4642      	mov	r2, r8
  40685e:	464b      	mov	r3, r9
  406860:	47b0      	blx	r6
			sendDebugString(buf);
  406862:	a803      	add	r0, sp, #12
  406864:	4b06      	ldr	r3, [pc, #24]	; (406880 <calibServos+0x134>)
  406866:	4798      	blx	r3
  406868:	3408      	adds	r4, #8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
	char buf[100];
	sendDebugString("{");
		for(int i =0; i<18; i++) {
  40686a:	42a5      	cmp	r5, r4
  40686c:	d1ec      	bne.n	406848 <calibServos+0xfc>
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
			sendDebugString(buf);
		}
	sendDebugString("}\n");
  40686e:	4809      	ldr	r0, [pc, #36]	; (406894 <calibServos+0x148>)
  406870:	4b03      	ldr	r3, [pc, #12]	; (406880 <calibServos+0x134>)
  406872:	4798      	blx	r3
}
  406874:	b01d      	add	sp, #116	; 0x74
  406876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40687a:	bf00      	nop
  40687c:	0041351c 	.word	0x0041351c
  406880:	0040019d 	.word	0x0040019d
  406884:	004134e8 	.word	0x004134e8
  406888:	0041350c 	.word	0x0041350c
  40688c:	0040ac4d 	.word	0x0040ac4d
  406890:	0040bb79 	.word	0x0040bb79
  406894:	00413518 	.word	0x00413518
  406898:	0040662d 	.word	0x0040662d
  40689c:	00406b3d 	.word	0x00406b3d
  4068a0:	00406091 	.word	0x00406091
  4068a4:	00406229 	.word	0x00406229
  4068a8:	004063c1 	.word	0x004063c1
  4068ac:	00413510 	.word	0x00413510

004068b0 <surprise>:
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
	else if(mask&(1<<7)) pio_clear(LED7);
	
}

void surprise() {
  4068b0:	b510      	push	{r4, lr}
  4068b2:	ed2d 8b02 	vpush	{d8}
	WriteServo(2,0,120);
  4068b6:	ed9f 8a18 	vldr	s16, [pc, #96]	; 406918 <surprise+0x68>
  4068ba:	2002      	movs	r0, #2
  4068bc:	2100      	movs	r1, #0
  4068be:	eeb0 0a48 	vmov.f32	s0, s16
  4068c2:	4c16      	ldr	r4, [pc, #88]	; (40691c <surprise+0x6c>)
  4068c4:	47a0      	blx	r4
	WriteServo(3,0,60);
  4068c6:	eddf 8a16 	vldr	s17, [pc, #88]	; 406920 <surprise+0x70>
  4068ca:	2003      	movs	r0, #3
  4068cc:	2100      	movs	r1, #0
  4068ce:	eeb0 0a68 	vmov.f32	s0, s17
  4068d2:	47a0      	blx	r4
	WriteServo(4,0,60);
  4068d4:	2004      	movs	r0, #4
  4068d6:	2100      	movs	r1, #0
  4068d8:	eeb0 0a68 	vmov.f32	s0, s17
  4068dc:	47a0      	blx	r4
	WriteServo(5,0,120);
  4068de:	2005      	movs	r0, #5
  4068e0:	2100      	movs	r1, #0
  4068e2:	eeb0 0a48 	vmov.f32	s0, s16
  4068e6:	47a0      	blx	r4
	WriteServo(0,1,30);
  4068e8:	2000      	movs	r0, #0
  4068ea:	2101      	movs	r1, #1
  4068ec:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x3e
  4068f0:	47a0      	blx	r4
	WriteServo(1,1,30);
  4068f2:	2001      	movs	r0, #1
  4068f4:	4601      	mov	r1, r0
  4068f6:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x3e
  4068fa:	47a0      	blx	r4
	WriteServo(0,0,170);
  4068fc:	2000      	movs	r0, #0
  4068fe:	4601      	mov	r1, r0
  406900:	ed9f 0a08 	vldr	s0, [pc, #32]	; 406924 <surprise+0x74>
  406904:	47a0      	blx	r4
	WriteServo(1,0,10);
  406906:	2001      	movs	r0, #1
  406908:	2100      	movs	r1, #0
  40690a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x24
  40690e:	47a0      	blx	r4
	
}
  406910:	ecbd 8b02 	vpop	{d8}
  406914:	bd10      	pop	{r4, pc}
  406916:	bf00      	nop
  406918:	42f00000 	.word	0x42f00000
  40691c:	00405411 	.word	0x00405411
  406920:	42700000 	.word	0x42700000
  406924:	432a0000 	.word	0x432a0000

00406928 <cmdInterp>:
		// 14	max_i addition amount byte 1
		// 15	max_i addition amount byte 2
		// 16	max_i addition amount byte 3
		// 17   walk EN
		
		switch(cmd[0]) {
  406928:	7803      	ldrb	r3, [r0, #0]
  40692a:	2b02      	cmp	r3, #2
  40692c:	d002      	beq.n	406934 <cmdInterp+0xc>
  40692e:	2b03      	cmp	r3, #3
  406930:	d021      	beq.n	406976 <cmdInterp+0x4e>
  406932:	4770      	bx	lr
			//strcpy(BaseCmd,&cmd[1]);
			//xSemaphoreGive(UARTsem);
		break;
		
		case 02:
				if(cmdLen != 35) break;
  406934:	2923      	cmp	r1, #35	; 0x23
  406936:	d12e      	bne.n	406996 <cmdInterp+0x6e>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  406938:	1c43      	adds	r3, r0, #1
  40693a:	681b      	ldr	r3, [r3, #0]
  40693c:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  40693e:	1d43      	adds	r3, r0, #5
  406940:	681b      	ldr	r3, [r3, #0]
  406942:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  406944:	7a43      	ldrb	r3, [r0, #9]
  406946:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += *(uint32_t*)&cmd[13];
  406948:	6a11      	ldr	r1, [r2, #32]
  40694a:	f8d0 300d 	ldr.w	r3, [r0, #13]
  40694e:	440b      	add	r3, r1
  406950:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  406952:	7c43      	ldrb	r3, [r0, #17]
  406954:	61d3      	str	r3, [r2, #28]
				//stance
				hexabot_walk->stance = *(uint32_t*)&cmd[18];
  406956:	f8d0 3012 	ldr.w	r3, [r0, #18]
  40695a:	6093      	str	r3, [r2, #8]
				//height
				hexabot_walk->hgt = *(uint32_t*)&cmd[22];
  40695c:	f8d0 3016 	ldr.w	r3, [r0, #22]
  406960:	60d3      	str	r3, [r2, #12]
				//pull up
				hexabot_walk->pup = *(uint32_t*)&cmd[26];
  406962:	f8d0 301a 	ldr.w	r3, [r0, #26]
  406966:	6113      	str	r3, [r2, #16]
				//stride
				hexabot_walk->stride = *(uint32_t*)&cmd[30];
  406968:	f8d0 301e 	ldr.w	r3, [r0, #30]
  40696c:	6153      	str	r3, [r2, #20]
				//retval
				hexabot_walk->ret = cmd[34];
  40696e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
  406972:	6293      	str	r3, [r2, #40]	; 0x28
				break;
  406974:	4770      	bx	lr
		
		//Critical walking pattern update
		case 03:
				if(cmdLen != 18) break;
  406976:	2912      	cmp	r1, #18
  406978:	d10d      	bne.n	406996 <cmdInterp+0x6e>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  40697a:	1c43      	adds	r3, r0, #1
  40697c:	681b      	ldr	r3, [r3, #0]
  40697e:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  406980:	1d43      	adds	r3, r0, #5
  406982:	681b      	ldr	r3, [r3, #0]
  406984:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  406986:	7a43      	ldrb	r3, [r0, #9]
  406988:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += cmd[13];
  40698a:	7b43      	ldrb	r3, [r0, #13]
  40698c:	6a11      	ldr	r1, [r2, #32]
  40698e:	440b      	add	r3, r1
  406990:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  406992:	7c43      	ldrb	r3, [r0, #17]
  406994:	61d3      	str	r3, [r2, #28]
  406996:	4770      	bx	lr

00406998 <cmdLED>:
 */ 
#include <Hexabot/Hexabot_Cmd.h>
#include <Hexabot/Hexabot.h>
#include <DW1000.h>

void cmdLED(int L, int onOff) {
  406998:	b5f0      	push	{r4, r5, r6, r7, lr}
  40699a:	b09b      	sub	sp, #108	; 0x6c
  40699c:	4604      	mov	r4, r0
  40699e:	460d      	mov	r5, r1
	extern int VerboseMode;
	char buf[100];
	
	switch(L) {
  4069a0:	2809      	cmp	r0, #9
  4069a2:	f200 80ad 	bhi.w	406b00 <cmdLED+0x168>
  4069a6:	e8df f000 	tbb	[pc, r0]
  4069aa:	1205      	.short	0x1205
  4069ac:	46392c1f 	.word	0x46392c1f
  4069b0:	69ab5e51 	.word	0x69ab5e51
		case 0:
			if(onOff) pio_set(LED0);
  4069b4:	b129      	cbz	r1, 4069c2 <cmdLED+0x2a>
  4069b6:	4859      	ldr	r0, [pc, #356]	; (406b1c <cmdLED+0x184>)
  4069b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4069bc:	4b58      	ldr	r3, [pc, #352]	; (406b20 <cmdLED+0x188>)
  4069be:	4798      	blx	r3
  4069c0:	e09e      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED0);
  4069c2:	4856      	ldr	r0, [pc, #344]	; (406b1c <cmdLED+0x184>)
  4069c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4069c8:	4b56      	ldr	r3, [pc, #344]	; (406b24 <cmdLED+0x18c>)
  4069ca:	4798      	blx	r3
  4069cc:	e098      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 1:
			if(onOff) pio_set(LED1);
  4069ce:	b129      	cbz	r1, 4069dc <cmdLED+0x44>
  4069d0:	4852      	ldr	r0, [pc, #328]	; (406b1c <cmdLED+0x184>)
  4069d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4069d6:	4b52      	ldr	r3, [pc, #328]	; (406b20 <cmdLED+0x188>)
  4069d8:	4798      	blx	r3
  4069da:	e091      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED1);
  4069dc:	484f      	ldr	r0, [pc, #316]	; (406b1c <cmdLED+0x184>)
  4069de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4069e2:	4b50      	ldr	r3, [pc, #320]	; (406b24 <cmdLED+0x18c>)
  4069e4:	4798      	blx	r3
  4069e6:	e08b      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 2:
			if(onOff) pio_set(LED2);
  4069e8:	b129      	cbz	r1, 4069f6 <cmdLED+0x5e>
  4069ea:	484c      	ldr	r0, [pc, #304]	; (406b1c <cmdLED+0x184>)
  4069ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4069f0:	4b4b      	ldr	r3, [pc, #300]	; (406b20 <cmdLED+0x188>)
  4069f2:	4798      	blx	r3
  4069f4:	e084      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED2);
  4069f6:	4849      	ldr	r0, [pc, #292]	; (406b1c <cmdLED+0x184>)
  4069f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4069fc:	4b49      	ldr	r3, [pc, #292]	; (406b24 <cmdLED+0x18c>)
  4069fe:	4798      	blx	r3
  406a00:	e07e      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 3:
			if(onOff) pio_set(LED3);
  406a02:	b129      	cbz	r1, 406a10 <cmdLED+0x78>
  406a04:	4845      	ldr	r0, [pc, #276]	; (406b1c <cmdLED+0x184>)
  406a06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406a0a:	4b45      	ldr	r3, [pc, #276]	; (406b20 <cmdLED+0x188>)
  406a0c:	4798      	blx	r3
  406a0e:	e077      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED3);
  406a10:	4842      	ldr	r0, [pc, #264]	; (406b1c <cmdLED+0x184>)
  406a12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406a16:	4b43      	ldr	r3, [pc, #268]	; (406b24 <cmdLED+0x18c>)
  406a18:	4798      	blx	r3
  406a1a:	e071      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 4:
			if(onOff) pio_set(LED4);
  406a1c:	b129      	cbz	r1, 406a2a <cmdLED+0x92>
  406a1e:	4842      	ldr	r0, [pc, #264]	; (406b28 <cmdLED+0x190>)
  406a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406a24:	4b3e      	ldr	r3, [pc, #248]	; (406b20 <cmdLED+0x188>)
  406a26:	4798      	blx	r3
  406a28:	e06a      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED4);
  406a2a:	483f      	ldr	r0, [pc, #252]	; (406b28 <cmdLED+0x190>)
  406a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406a30:	4b3c      	ldr	r3, [pc, #240]	; (406b24 <cmdLED+0x18c>)
  406a32:	4798      	blx	r3
  406a34:	e064      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 5:
			if(onOff) pio_set(LED5);
  406a36:	b121      	cbz	r1, 406a42 <cmdLED+0xaa>
  406a38:	4838      	ldr	r0, [pc, #224]	; (406b1c <cmdLED+0x184>)
  406a3a:	2104      	movs	r1, #4
  406a3c:	4b38      	ldr	r3, [pc, #224]	; (406b20 <cmdLED+0x188>)
  406a3e:	4798      	blx	r3
  406a40:	e05e      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED5);
  406a42:	4836      	ldr	r0, [pc, #216]	; (406b1c <cmdLED+0x184>)
  406a44:	2104      	movs	r1, #4
  406a46:	4b37      	ldr	r3, [pc, #220]	; (406b24 <cmdLED+0x18c>)
  406a48:	4798      	blx	r3
  406a4a:	e059      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 6:
			if(onOff) pio_set(LED6);
  406a4c:	b129      	cbz	r1, 406a5a <cmdLED+0xc2>
  406a4e:	4833      	ldr	r0, [pc, #204]	; (406b1c <cmdLED+0x184>)
  406a50:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406a54:	4b32      	ldr	r3, [pc, #200]	; (406b20 <cmdLED+0x188>)
  406a56:	4798      	blx	r3
  406a58:	e052      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED6);
  406a5a:	4830      	ldr	r0, [pc, #192]	; (406b1c <cmdLED+0x184>)
  406a5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406a60:	4b30      	ldr	r3, [pc, #192]	; (406b24 <cmdLED+0x18c>)
  406a62:	4798      	blx	r3
  406a64:	e04c      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 7:
			if(onOff) pio_set(LED7);
  406a66:	b121      	cbz	r1, 406a72 <cmdLED+0xda>
  406a68:	482c      	ldr	r0, [pc, #176]	; (406b1c <cmdLED+0x184>)
  406a6a:	2140      	movs	r1, #64	; 0x40
  406a6c:	4b2c      	ldr	r3, [pc, #176]	; (406b20 <cmdLED+0x188>)
  406a6e:	4798      	blx	r3
  406a70:	e046      	b.n	406b00 <cmdLED+0x168>
			else pio_clear(LED7);
  406a72:	482a      	ldr	r0, [pc, #168]	; (406b1c <cmdLED+0x184>)
  406a74:	2140      	movs	r1, #64	; 0x40
  406a76:	4b2b      	ldr	r3, [pc, #172]	; (406b24 <cmdLED+0x18c>)
  406a78:	4798      	blx	r3
  406a7a:	e041      	b.n	406b00 <cmdLED+0x168>
		break;
		
		case 9:
			if(onOff) {
  406a7c:	b301      	cbz	r1, 406ac0 <cmdLED+0x128>
				pio_set(LED0);
  406a7e:	4f27      	ldr	r7, [pc, #156]	; (406b1c <cmdLED+0x184>)
  406a80:	4638      	mov	r0, r7
  406a82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406a86:	4e26      	ldr	r6, [pc, #152]	; (406b20 <cmdLED+0x188>)
  406a88:	47b0      	blx	r6
				pio_set(LED1);
  406a8a:	4638      	mov	r0, r7
  406a8c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406a90:	47b0      	blx	r6
				pio_set(LED2);
  406a92:	4638      	mov	r0, r7
  406a94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406a98:	47b0      	blx	r6
				pio_set(LED3);
  406a9a:	4638      	mov	r0, r7
  406a9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406aa0:	47b0      	blx	r6
				pio_set(LED4);
  406aa2:	4821      	ldr	r0, [pc, #132]	; (406b28 <cmdLED+0x190>)
  406aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406aa8:	47b0      	blx	r6
				pio_set(LED5);
  406aaa:	4638      	mov	r0, r7
  406aac:	2104      	movs	r1, #4
  406aae:	47b0      	blx	r6
				pio_set(LED6);
  406ab0:	4638      	mov	r0, r7
  406ab2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406ab6:	47b0      	blx	r6
				pio_set(LED7);
  406ab8:	4638      	mov	r0, r7
  406aba:	2140      	movs	r1, #64	; 0x40
  406abc:	47b0      	blx	r6
  406abe:	e01f      	b.n	406b00 <cmdLED+0x168>
			}
			else
			{
				 pio_clear(LED0);
  406ac0:	4f16      	ldr	r7, [pc, #88]	; (406b1c <cmdLED+0x184>)
  406ac2:	4638      	mov	r0, r7
  406ac4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406ac8:	4e16      	ldr	r6, [pc, #88]	; (406b24 <cmdLED+0x18c>)
  406aca:	47b0      	blx	r6
				 pio_clear(LED1);
  406acc:	4638      	mov	r0, r7
  406ace:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406ad2:	47b0      	blx	r6
				 pio_clear(LED2);
  406ad4:	4638      	mov	r0, r7
  406ad6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406ada:	47b0      	blx	r6
				 pio_clear(LED3);
  406adc:	4638      	mov	r0, r7
  406ade:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406ae2:	47b0      	blx	r6
				 pio_clear(LED4);
  406ae4:	4810      	ldr	r0, [pc, #64]	; (406b28 <cmdLED+0x190>)
  406ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406aea:	47b0      	blx	r6
				 pio_clear(LED5);
  406aec:	4638      	mov	r0, r7
  406aee:	2104      	movs	r1, #4
  406af0:	47b0      	blx	r6
				 pio_clear(LED6);
  406af2:	4638      	mov	r0, r7
  406af4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406af8:	47b0      	blx	r6
				 pio_clear(LED7); 
  406afa:	4638      	mov	r0, r7
  406afc:	2140      	movs	r1, #64	; 0x40
  406afe:	47b0      	blx	r6
			}
		break;
		
	}
		if(VerboseMode) {
  406b00:	4b0a      	ldr	r3, [pc, #40]	; (406b2c <cmdLED+0x194>)
  406b02:	681b      	ldr	r3, [r3, #0]
  406b04:	b143      	cbz	r3, 406b18 <cmdLED+0x180>
		sprintf(buf,"LED%d SET TO %d\n",L,onOff);
  406b06:	a801      	add	r0, sp, #4
  406b08:	4909      	ldr	r1, [pc, #36]	; (406b30 <cmdLED+0x198>)
  406b0a:	4622      	mov	r2, r4
  406b0c:	462b      	mov	r3, r5
  406b0e:	4c09      	ldr	r4, [pc, #36]	; (406b34 <cmdLED+0x19c>)
  406b10:	47a0      	blx	r4
		sendDebugString(buf);
  406b12:	a801      	add	r0, sp, #4
  406b14:	4b08      	ldr	r3, [pc, #32]	; (406b38 <cmdLED+0x1a0>)
  406b16:	4798      	blx	r3
	}

}
  406b18:	b01b      	add	sp, #108	; 0x6c
  406b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406b1c:	400e0e00 	.word	0x400e0e00
  406b20:	004027c9 	.word	0x004027c9
  406b24:	004027cd 	.word	0x004027cd
  406b28:	400e1000 	.word	0x400e1000
  406b2c:	2040c4d4 	.word	0x2040c4d4
  406b30:	00413530 	.word	0x00413530
  406b34:	0040bb79 	.word	0x0040bb79
  406b38:	0040019d 	.word	0x0040019d

00406b3c <cmdServoMan>:

void cmdServoMan(int L,int S ,int angle) {
  406b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b3e:	ed2d 8b02 	vpush	{d8}
  406b42:	b09d      	sub	sp, #116	; 0x74
  406b44:	4604      	mov	r4, r0
  406b46:	460d      	mov	r5, r1
  406b48:	4616      	mov	r6, r2
	extern int VerboseMode;
	char buf[100];
	
	switch (L) {
  406b4a:	2806      	cmp	r0, #6
  406b4c:	d857      	bhi.n	406bfe <cmdServoMan+0xc2>
  406b4e:	e8df f000 	tbb	[pc, r0]
  406b52:	0c04      	.short	0x0c04
  406b54:	2c241c14 	.word	0x2c241c14
  406b58:	34          	.byte	0x34
  406b59:	00          	.byte	0x00
		
	case 0:
	WriteServo(L0_S0+S,angle);
  406b5a:	2000      	movs	r0, #0
  406b5c:	ee07 2a90 	vmov	s15, r2
  406b60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b64:	4b2e      	ldr	r3, [pc, #184]	; (406c20 <cmdServoMan+0xe4>)
  406b66:	4798      	blx	r3
	break;
  406b68:	e049      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 1:
	WriteServo(L1_S0+S,angle);
  406b6a:	2001      	movs	r0, #1
  406b6c:	ee07 2a90 	vmov	s15, r2
  406b70:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b74:	4b2a      	ldr	r3, [pc, #168]	; (406c20 <cmdServoMan+0xe4>)
  406b76:	4798      	blx	r3
	break;
  406b78:	e041      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 2:
	WriteServo(L2_S0+S,angle);
  406b7a:	2002      	movs	r0, #2
  406b7c:	ee07 2a90 	vmov	s15, r2
  406b80:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b84:	4b26      	ldr	r3, [pc, #152]	; (406c20 <cmdServoMan+0xe4>)
  406b86:	4798      	blx	r3
	break;
  406b88:	e039      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 3:
	WriteServo(L3_S0+S,angle);
  406b8a:	2003      	movs	r0, #3
  406b8c:	ee07 2a90 	vmov	s15, r2
  406b90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b94:	4b22      	ldr	r3, [pc, #136]	; (406c20 <cmdServoMan+0xe4>)
  406b96:	4798      	blx	r3
	break;
  406b98:	e031      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 4:
	WriteServo(L4_S0+S,angle);
  406b9a:	2004      	movs	r0, #4
  406b9c:	ee07 2a90 	vmov	s15, r2
  406ba0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406ba4:	4b1e      	ldr	r3, [pc, #120]	; (406c20 <cmdServoMan+0xe4>)
  406ba6:	4798      	blx	r3
	break;
  406ba8:	e029      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 5:
	WriteServo(L5_S0+S,angle);
  406baa:	2005      	movs	r0, #5
  406bac:	ee07 2a90 	vmov	s15, r2
  406bb0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406bb4:	4b1a      	ldr	r3, [pc, #104]	; (406c20 <cmdServoMan+0xe4>)
  406bb6:	4798      	blx	r3
	break;
  406bb8:	e021      	b.n	406bfe <cmdServoMan+0xc2>
	
	case 6:
	WriteServo(L0_S0+S,angle);
  406bba:	ee07 2a90 	vmov	s15, r2
  406bbe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  406bc2:	2000      	movs	r0, #0
  406bc4:	eeb0 0a48 	vmov.f32	s0, s16
  406bc8:	4f15      	ldr	r7, [pc, #84]	; (406c20 <cmdServoMan+0xe4>)
  406bca:	47b8      	blx	r7
	WriteServo(L1_S0+S,angle);
  406bcc:	2001      	movs	r0, #1
  406bce:	4629      	mov	r1, r5
  406bd0:	eeb0 0a48 	vmov.f32	s0, s16
  406bd4:	47b8      	blx	r7
	WriteServo(L2_S0+S,angle);
  406bd6:	2002      	movs	r0, #2
  406bd8:	4629      	mov	r1, r5
  406bda:	eeb0 0a48 	vmov.f32	s0, s16
  406bde:	47b8      	blx	r7
	WriteServo(L3_S0+S,angle);
  406be0:	2003      	movs	r0, #3
  406be2:	4629      	mov	r1, r5
  406be4:	eeb0 0a48 	vmov.f32	s0, s16
  406be8:	47b8      	blx	r7
	WriteServo(L4_S0+S,angle);
  406bea:	2004      	movs	r0, #4
  406bec:	4629      	mov	r1, r5
  406bee:	eeb0 0a48 	vmov.f32	s0, s16
  406bf2:	47b8      	blx	r7
	WriteServo(L5_S0+S,angle);
  406bf4:	2005      	movs	r0, #5
  406bf6:	4629      	mov	r1, r5
  406bf8:	eeb0 0a48 	vmov.f32	s0, s16
  406bfc:	47b8      	blx	r7
	break;
	}
	
	if(VerboseMode) {
  406bfe:	4b09      	ldr	r3, [pc, #36]	; (406c24 <cmdServoMan+0xe8>)
  406c00:	681b      	ldr	r3, [r3, #0]
  406c02:	b14b      	cbz	r3, 406c18 <cmdServoMan+0xdc>
		sprintf(buf,"SERVO LEG:%d,SERVO:%d MOVED TO %d\n",L,S,angle);
  406c04:	9600      	str	r6, [sp, #0]
  406c06:	a803      	add	r0, sp, #12
  406c08:	4907      	ldr	r1, [pc, #28]	; (406c28 <cmdServoMan+0xec>)
  406c0a:	4622      	mov	r2, r4
  406c0c:	462b      	mov	r3, r5
  406c0e:	4c07      	ldr	r4, [pc, #28]	; (406c2c <cmdServoMan+0xf0>)
  406c10:	47a0      	blx	r4
		sendDebugString(buf);
  406c12:	a803      	add	r0, sp, #12
  406c14:	4b06      	ldr	r3, [pc, #24]	; (406c30 <cmdServoMan+0xf4>)
  406c16:	4798      	blx	r3
	}
	
}
  406c18:	b01d      	add	sp, #116	; 0x74
  406c1a:	ecbd 8b02 	vpop	{d8}
  406c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c20:	00405411 	.word	0x00405411
  406c24:	2040c4d4 	.word	0x2040c4d4
  406c28:	00413544 	.word	0x00413544
  406c2c:	0040bb79 	.word	0x0040bb79
  406c30:	0040019d 	.word	0x0040019d

00406c34 <cmdBatVolt>:

void cmdBatVolt() {
  406c34:	b510      	push	{r4, lr}
  406c36:	b09a      	sub	sp, #104	; 0x68
	char buf[100];
	sprintf(buf,"Battery Voltage:%f\n",getBatVoltage());
  406c38:	4b08      	ldr	r3, [pc, #32]	; (406c5c <cmdBatVolt+0x28>)
  406c3a:	4798      	blx	r3
  406c3c:	ee10 0a10 	vmov	r0, s0
  406c40:	4b07      	ldr	r3, [pc, #28]	; (406c60 <cmdBatVolt+0x2c>)
  406c42:	4798      	blx	r3
  406c44:	4602      	mov	r2, r0
  406c46:	460b      	mov	r3, r1
  406c48:	a801      	add	r0, sp, #4
  406c4a:	4906      	ldr	r1, [pc, #24]	; (406c64 <cmdBatVolt+0x30>)
  406c4c:	4c06      	ldr	r4, [pc, #24]	; (406c68 <cmdBatVolt+0x34>)
  406c4e:	47a0      	blx	r4
	sendDebugString(buf);
  406c50:	a801      	add	r0, sp, #4
  406c52:	4b06      	ldr	r3, [pc, #24]	; (406c6c <cmdBatVolt+0x38>)
  406c54:	4798      	blx	r3
}
  406c56:	b01a      	add	sp, #104	; 0x68
  406c58:	bd10      	pop	{r4, pc}
  406c5a:	bf00      	nop
  406c5c:	00405a61 	.word	0x00405a61
  406c60:	0040ac4d 	.word	0x0040ac4d
  406c64:	00413568 	.word	0x00413568
  406c68:	0040bb79 	.word	0x0040bb79
  406c6c:	0040019d 	.word	0x0040019d

00406c70 <cmdWalk>:
	dumpFrame(dumploc);
}

void cmdWalk(int maxi) {
	extern walk_data hexabot_walk;
	hexabot_walk.i = 0;
  406c70:	4b03      	ldr	r3, [pc, #12]	; (406c80 <cmdWalk+0x10>)
  406c72:	2200      	movs	r2, #0
  406c74:	625a      	str	r2, [r3, #36]	; 0x24
	hexabot_walk.max_i = maxi;
  406c76:	6218      	str	r0, [r3, #32]
	hexabot_walk.Walk_EN = 1;
  406c78:	2201      	movs	r2, #1
  406c7a:	61da      	str	r2, [r3, #28]
  406c7c:	4770      	bx	lr
  406c7e:	bf00      	nop
  406c80:	2040c5f8 	.word	0x2040c5f8

00406c84 <cmdTestDW1000>:
}

void cmdTestDW1000() {
  406c84:	b5f0      	push	{r4, r5, r6, r7, lr}
  406c86:	b08f      	sub	sp, #60	; 0x3c
	char buf[40];
	DW1000_toggleGPIO_MODE();
  406c88:	4b1c      	ldr	r3, [pc, #112]	; (406cfc <cmdTestDW1000+0x78>)
  406c8a:	4798      	blx	r3
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x000FFFFF, PMSC_LEDC_LEN);
  406c8c:	4a1c      	ldr	r2, [pc, #112]	; (406d00 <cmdTestDW1000+0x7c>)
  406c8e:	2300      	movs	r3, #0
  406c90:	e9cd 2300 	strd	r2, r3, [sp]
  406c94:	2304      	movs	r3, #4
  406c96:	9302      	str	r3, [sp, #8]
  406c98:	2036      	movs	r0, #54	; 0x36
  406c9a:	2101      	movs	r1, #1
  406c9c:	2228      	movs	r2, #40	; 0x28
  406c9e:	4b19      	ldr	r3, [pc, #100]	; (406d04 <cmdTestDW1000+0x80>)
  406ca0:	4798      	blx	r3

	delay_us(1);
  406ca2:	2033      	movs	r0, #51	; 0x33
  406ca4:	4b18      	ldr	r3, [pc, #96]	; (406d08 <cmdTestDW1000+0x84>)
  406ca6:	4798      	blx	r3
	sprintf(buf,"TestDevID: 0x%08x\n",DW1000_readDeviceIdentifier());
  406ca8:	4b18      	ldr	r3, [pc, #96]	; (406d0c <cmdTestDW1000+0x88>)
  406caa:	4798      	blx	r3
  406cac:	4602      	mov	r2, r0
  406cae:	460b      	mov	r3, r1
  406cb0:	a804      	add	r0, sp, #16
  406cb2:	4917      	ldr	r1, [pc, #92]	; (406d10 <cmdTestDW1000+0x8c>)
  406cb4:	4e17      	ldr	r6, [pc, #92]	; (406d14 <cmdTestDW1000+0x90>)
  406cb6:	47b0      	blx	r6
	sendDebugString(buf);
  406cb8:	a804      	add	r0, sp, #16
  406cba:	4c17      	ldr	r4, [pc, #92]	; (406d18 <cmdTestDW1000+0x94>)
  406cbc:	47a0      	blx	r4
	sendDebugString("\n");
  406cbe:	4d17      	ldr	r5, [pc, #92]	; (406d1c <cmdTestDW1000+0x98>)
  406cc0:	4628      	mov	r0, r5
  406cc2:	47a0      	blx	r4
	sprintf(buf,"SysStatus: 0x%08x\n", DW1000_readSystemStatus());
  406cc4:	4b16      	ldr	r3, [pc, #88]	; (406d20 <cmdTestDW1000+0x9c>)
  406cc6:	4798      	blx	r3
  406cc8:	4602      	mov	r2, r0
  406cca:	460b      	mov	r3, r1
  406ccc:	a804      	add	r0, sp, #16
  406cce:	4915      	ldr	r1, [pc, #84]	; (406d24 <cmdTestDW1000+0xa0>)
  406cd0:	47b0      	blx	r6
	sendDebugString(buf);
  406cd2:	a804      	add	r0, sp, #16
  406cd4:	47a0      	blx	r4
	sendDebugString("\n");
  406cd6:	4628      	mov	r0, r5
  406cd8:	47a0      	blx	r4
	
	sprintf(buf,"RX_status: 0x%08x\n", DW1000_readReg(RX_FINFO_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, RX_FINFO_ID));
  406cda:	2010      	movs	r0, #16
  406cdc:	2100      	movs	r1, #0
  406cde:	460a      	mov	r2, r1
  406ce0:	4603      	mov	r3, r0
  406ce2:	4f11      	ldr	r7, [pc, #68]	; (406d28 <cmdTestDW1000+0xa4>)
  406ce4:	47b8      	blx	r7
  406ce6:	4602      	mov	r2, r0
  406ce8:	460b      	mov	r3, r1
  406cea:	a804      	add	r0, sp, #16
  406cec:	490f      	ldr	r1, [pc, #60]	; (406d2c <cmdTestDW1000+0xa8>)
  406cee:	47b0      	blx	r6
	sendDebugString(buf);
  406cf0:	a804      	add	r0, sp, #16
  406cf2:	47a0      	blx	r4
	sendDebugString("\n");
  406cf4:	4628      	mov	r0, r5
  406cf6:	47a0      	blx	r4
	
	
}
  406cf8:	b00f      	add	sp, #60	; 0x3c
  406cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406cfc:	00403b8d 	.word	0x00403b8d
  406d00:	000fffff 	.word	0x000fffff
  406d04:	00403891 	.word	0x00403891
  406d08:	20400001 	.word	0x20400001
  406d0c:	00403849 	.word	0x00403849
  406d10:	0041357c 	.word	0x0041357c
  406d14:	0040bb79 	.word	0x0040bb79
  406d18:	0040019d 	.word	0x0040019d
  406d1c:	004130c0 	.word	0x004130c0
  406d20:	0040385d 	.word	0x0040385d
  406d24:	00413590 	.word	0x00413590
  406d28:	00403781 	.word	0x00403781
  406d2c:	004135a4 	.word	0x004135a4

00406d30 <cmdDWMsend>:

void cmdDWMsend(char* tosend) {
  406d30:	b530      	push	{r4, r5, lr}
  406d32:	b083      	sub	sp, #12
  406d34:	4605      	mov	r5, r0
	DW1000_writeTxBuffer(0,tosend,strlen(tosend));
  406d36:	4c0a      	ldr	r4, [pc, #40]	; (406d60 <cmdDWMsend+0x30>)
  406d38:	47a0      	blx	r4
  406d3a:	9000      	str	r0, [sp, #0]
  406d3c:	2000      	movs	r0, #0
  406d3e:	462a      	mov	r2, r5
  406d40:	17eb      	asrs	r3, r5, #31
  406d42:	4908      	ldr	r1, [pc, #32]	; (406d64 <cmdDWMsend+0x34>)
  406d44:	4788      	blx	r1
	DW1000_setTxFrameControl( 0x000D0000 | 0x7F&strlen(tosend)  );
  406d46:	4628      	mov	r0, r5
  406d48:	47a0      	blx	r4
  406d4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  406d4e:	f440 2050 	orr.w	r0, r0, #851968	; 0xd0000
  406d52:	4b05      	ldr	r3, [pc, #20]	; (406d68 <cmdDWMsend+0x38>)
  406d54:	4798      	blx	r3
	DW1000_startTx();
  406d56:	4b05      	ldr	r3, [pc, #20]	; (406d6c <cmdDWMsend+0x3c>)
  406d58:	4798      	blx	r3
}
  406d5a:	b003      	add	sp, #12
  406d5c:	bd30      	pop	{r4, r5, pc}
  406d5e:	bf00      	nop
  406d60:	0040bebd 	.word	0x0040bebd
  406d64:	00403c2d 	.word	0x00403c2d
  406d68:	00403c09 	.word	0x00403c09
  406d6c:	00403c4d 	.word	0x00403c4d

00406d70 <cmdRXen>:
void cmdRXen() {
  406d70:	b500      	push	{lr}
  406d72:	b085      	sub	sp, #20
	DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, 0x0, 0x00000100, SYS_CTRL_LEN);
  406d74:	f44f 7280 	mov.w	r2, #256	; 0x100
  406d78:	2300      	movs	r3, #0
  406d7a:	e9cd 2300 	strd	r2, r3, [sp]
  406d7e:	2304      	movs	r3, #4
  406d80:	9302      	str	r3, [sp, #8]
  406d82:	200d      	movs	r0, #13
  406d84:	2100      	movs	r1, #0
  406d86:	460a      	mov	r2, r1
  406d88:	4b02      	ldr	r3, [pc, #8]	; (406d94 <cmdRXen+0x24>)
  406d8a:	4798      	blx	r3
}
  406d8c:	b005      	add	sp, #20
  406d8e:	f85d fb04 	ldr.w	pc, [sp], #4
  406d92:	bf00      	nop
  406d94:	00403891 	.word	0x00403891

00406d98 <cmdDWMreadRX>:

int cmdDWMreadRX(char* buffer) {
  406d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d9c:	4605      	mov	r5, r0
	uint64_t frameInfo = DW1000_readReg(RX_FINFO_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, RX_FINFO_ID);
  406d9e:	2010      	movs	r0, #16
  406da0:	2100      	movs	r1, #0
  406da2:	460a      	mov	r2, r1
  406da4:	4603      	mov	r3, r0
  406da6:	4c0a      	ldr	r4, [pc, #40]	; (406dd0 <cmdDWMreadRX+0x38>)
  406da8:	47a0      	blx	r4
	int frameLen = frameInfo&0x7F;
  406daa:	f000 087f 	and.w	r8, r0, #127	; 0x7f
  406dae:	3d08      	subs	r5, #8
  406db0:	2400      	movs	r4, #0
	int secToRead = frameLen / 4 + 1;
	for(int i = 0;i<256;i++) {
	((uint64_t*)buffer)[i] = DW1000_readRxBuffer(i*4,4);	
  406db2:	2704      	movs	r7, #4
  406db4:	4e07      	ldr	r6, [pc, #28]	; (406dd4 <cmdDWMreadRX+0x3c>)
  406db6:	4620      	mov	r0, r4
  406db8:	4639      	mov	r1, r7
  406dba:	47b0      	blx	r6
  406dbc:	e9e5 0102 	strd	r0, r1, [r5, #8]!
  406dc0:	3404      	adds	r4, #4
  406dc2:	b2a4      	uxth	r4, r4

int cmdDWMreadRX(char* buffer) {
	uint64_t frameInfo = DW1000_readReg(RX_FINFO_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, RX_FINFO_ID);
	int frameLen = frameInfo&0x7F;
	int secToRead = frameLen / 4 + 1;
	for(int i = 0;i<256;i++) {
  406dc4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  406dc8:	d1f5      	bne.n	406db6 <cmdDWMreadRX+0x1e>
	((uint64_t*)buffer)[i] = DW1000_readRxBuffer(i*4,4);	
	}
	return frameLen;
}
  406dca:	4640      	mov	r0, r8
  406dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406dd0:	00403781 	.word	0x00403781
  406dd4:	0040387d 	.word	0x0040387d

00406dd8 <cmdOverrideLEDDWM1000>:

void cmdOverrideLEDDWM1000() {
  406dd8:	b530      	push	{r4, r5, lr}
  406dda:	b085      	sub	sp, #20
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, 0x00000000, GPIO_MODE_LEN);
  406ddc:	2200      	movs	r2, #0
  406dde:	2300      	movs	r3, #0
  406de0:	e9cd 2300 	strd	r2, r3, [sp]
  406de4:	2504      	movs	r5, #4
  406de6:	9502      	str	r5, [sp, #8]
  406de8:	2026      	movs	r0, #38	; 0x26
  406dea:	2101      	movs	r1, #1
  406dec:	4c0a      	ldr	r4, [pc, #40]	; (406e18 <cmdOverrideLEDDWM1000+0x40>)
  406dee:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0x8, 0x000000F0, GPIO_MODE_LEN);
  406df0:	22f0      	movs	r2, #240	; 0xf0
  406df2:	2300      	movs	r3, #0
  406df4:	e9cd 2300 	strd	r2, r3, [sp]
  406df8:	9502      	str	r5, [sp, #8]
  406dfa:	2026      	movs	r0, #38	; 0x26
  406dfc:	2101      	movs	r1, #1
  406dfe:	2208      	movs	r2, #8
  406e00:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0xC, 0x000000FF, GPIO_MODE_LEN);
  406e02:	22ff      	movs	r2, #255	; 0xff
  406e04:	2300      	movs	r3, #0
  406e06:	e9cd 2300 	strd	r2, r3, [sp]
  406e0a:	9502      	str	r5, [sp, #8]
  406e0c:	2026      	movs	r0, #38	; 0x26
  406e0e:	2101      	movs	r1, #1
  406e10:	220c      	movs	r2, #12
  406e12:	47a0      	blx	r4
}
  406e14:	b005      	add	sp, #20
  406e16:	bd30      	pop	{r4, r5, pc}
  406e18:	00403891 	.word	0x00403891

00406e1c <cmdWriteTestDW1000>:

void cmdWriteTestDW1000(uint64_t toRW) {
  406e1c:	b510      	push	{r4, lr}
  406e1e:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,toRW,PANADR_LEN);
  406e20:	e9cd 0100 	strd	r0, r1, [sp]
  406e24:	2404      	movs	r4, #4
  406e26:	9402      	str	r4, [sp, #8]
  406e28:	2003      	movs	r0, #3
  406e2a:	2100      	movs	r1, #0
  406e2c:	460a      	mov	r2, r1
  406e2e:	4b09      	ldr	r3, [pc, #36]	; (406e54 <cmdWriteTestDW1000+0x38>)
  406e30:	4798      	blx	r3
	sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  406e32:	2003      	movs	r0, #3
  406e34:	2100      	movs	r1, #0
  406e36:	460a      	mov	r2, r1
  406e38:	4623      	mov	r3, r4
  406e3a:	4c07      	ldr	r4, [pc, #28]	; (406e58 <cmdWriteTestDW1000+0x3c>)
  406e3c:	47a0      	blx	r4
  406e3e:	4602      	mov	r2, r0
  406e40:	460b      	mov	r3, r1
  406e42:	a804      	add	r0, sp, #16
  406e44:	4905      	ldr	r1, [pc, #20]	; (406e5c <cmdWriteTestDW1000+0x40>)
  406e46:	4c06      	ldr	r4, [pc, #24]	; (406e60 <cmdWriteTestDW1000+0x44>)
  406e48:	47a0      	blx	r4
	sendDebugString(buf);	
  406e4a:	a804      	add	r0, sp, #16
  406e4c:	4b05      	ldr	r3, [pc, #20]	; (406e64 <cmdWriteTestDW1000+0x48>)
  406e4e:	4798      	blx	r3
}
  406e50:	b00e      	add	sp, #56	; 0x38
  406e52:	bd10      	pop	{r4, pc}
  406e54:	00403891 	.word	0x00403891
  406e58:	00403781 	.word	0x00403781
  406e5c:	004135b8 	.word	0x004135b8
  406e60:	0040bb79 	.word	0x0040bb79
  406e64:	0040019d 	.word	0x0040019d

00406e68 <cmdRelaxSvo>:

void cmdRelaxSvo(int Leg,int Svo) {
  406e68:	b570      	push	{r4, r5, r6, lr}
  406e6a:	460c      	mov	r4, r1
	if(Leg == 6) {
  406e6c:	2806      	cmp	r0, #6
  406e6e:	d122      	bne.n	406eb6 <cmdRelaxSvo+0x4e>
		relaxServo(0,Svo);
  406e70:	2000      	movs	r0, #0
  406e72:	4d12      	ldr	r5, [pc, #72]	; (406ebc <cmdRelaxSvo+0x54>)
  406e74:	47a8      	blx	r5
		delay_ms(1);
  406e76:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406e7a:	4e11      	ldr	r6, [pc, #68]	; (406ec0 <cmdRelaxSvo+0x58>)
  406e7c:	47b0      	blx	r6
		relaxServo(1,Svo);
  406e7e:	2001      	movs	r0, #1
  406e80:	4621      	mov	r1, r4
  406e82:	47a8      	blx	r5
		delay_ms(1);
  406e84:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406e88:	47b0      	blx	r6
		relaxServo(2,Svo);
  406e8a:	2002      	movs	r0, #2
  406e8c:	4621      	mov	r1, r4
  406e8e:	47a8      	blx	r5
		delay_ms(1);
  406e90:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406e94:	47b0      	blx	r6
		relaxServo(3,Svo);
  406e96:	2003      	movs	r0, #3
  406e98:	4621      	mov	r1, r4
  406e9a:	47a8      	blx	r5
		delay_ms(1);
  406e9c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406ea0:	47b0      	blx	r6
		relaxServo(4,Svo);
  406ea2:	2004      	movs	r0, #4
  406ea4:	4621      	mov	r1, r4
  406ea6:	47a8      	blx	r5
		delay_ms(1);
  406ea8:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406eac:	47b0      	blx	r6
		relaxServo(5,Svo);
  406eae:	2005      	movs	r0, #5
  406eb0:	4621      	mov	r1, r4
  406eb2:	47a8      	blx	r5
  406eb4:	bd70      	pop	{r4, r5, r6, pc}
	}
	else relaxServo(Leg,Svo);
  406eb6:	4b01      	ldr	r3, [pc, #4]	; (406ebc <cmdRelaxSvo+0x54>)
  406eb8:	4798      	blx	r3
  406eba:	bd70      	pop	{r4, r5, r6, pc}
  406ebc:	004053bd 	.word	0x004053bd
  406ec0:	20400001 	.word	0x20400001

00406ec4 <cmdRelaxAll>:
}

void cmdRelaxAll() {
  406ec4:	b510      	push	{r4, lr}
			//SvoA
			relaxServo(0,0);
  406ec6:	2000      	movs	r0, #0
  406ec8:	4601      	mov	r1, r0
  406eca:	4c1b      	ldr	r4, [pc, #108]	; (406f38 <cmdRelaxAll+0x74>)
  406ecc:	47a0      	blx	r4
			relaxServo(1,0);
  406ece:	2001      	movs	r0, #1
  406ed0:	2100      	movs	r1, #0
  406ed2:	47a0      	blx	r4
			relaxServo(2,0);
  406ed4:	2002      	movs	r0, #2
  406ed6:	2100      	movs	r1, #0
  406ed8:	47a0      	blx	r4
			relaxServo(3,0);
  406eda:	2003      	movs	r0, #3
  406edc:	2100      	movs	r1, #0
  406ede:	47a0      	blx	r4
			relaxServo(4,0);
  406ee0:	2004      	movs	r0, #4
  406ee2:	2100      	movs	r1, #0
  406ee4:	47a0      	blx	r4
			relaxServo(5,0);
  406ee6:	2005      	movs	r0, #5
  406ee8:	2100      	movs	r1, #0
  406eea:	47a0      	blx	r4
			//SvoB
			relaxServo(0,1);
  406eec:	2000      	movs	r0, #0
  406eee:	2101      	movs	r1, #1
  406ef0:	47a0      	blx	r4
			relaxServo(1,1);
  406ef2:	2001      	movs	r0, #1
  406ef4:	4601      	mov	r1, r0
  406ef6:	47a0      	blx	r4
			relaxServo(2,1);
  406ef8:	2002      	movs	r0, #2
  406efa:	2101      	movs	r1, #1
  406efc:	47a0      	blx	r4
			relaxServo(3,1);
  406efe:	2003      	movs	r0, #3
  406f00:	2101      	movs	r1, #1
  406f02:	47a0      	blx	r4
			relaxServo(4,1);
  406f04:	2004      	movs	r0, #4
  406f06:	2101      	movs	r1, #1
  406f08:	47a0      	blx	r4
			relaxServo(5,1);
  406f0a:	2005      	movs	r0, #5
  406f0c:	2101      	movs	r1, #1
  406f0e:	47a0      	blx	r4
			//SvoC
			relaxServo(0,2);
  406f10:	2000      	movs	r0, #0
  406f12:	2102      	movs	r1, #2
  406f14:	47a0      	blx	r4
			relaxServo(1,2);
  406f16:	2001      	movs	r0, #1
  406f18:	2102      	movs	r1, #2
  406f1a:	47a0      	blx	r4
			relaxServo(2,2);
  406f1c:	2002      	movs	r0, #2
  406f1e:	4601      	mov	r1, r0
  406f20:	47a0      	blx	r4
			relaxServo(3,2);
  406f22:	2003      	movs	r0, #3
  406f24:	2102      	movs	r1, #2
  406f26:	47a0      	blx	r4
			relaxServo(4,2);
  406f28:	2004      	movs	r0, #4
  406f2a:	2102      	movs	r1, #2
  406f2c:	47a0      	blx	r4
			relaxServo(5,2);
  406f2e:	2005      	movs	r0, #5
  406f30:	2102      	movs	r1, #2
  406f32:	47a0      	blx	r4
  406f34:	bd10      	pop	{r4, pc}
  406f36:	bf00      	nop
  406f38:	004053bd 	.word	0x004053bd

00406f3c <vTask1>:
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  406f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
  406f40:	484e      	ldr	r0, [pc, #312]	; (40707c <vTask1+0x140>)
  406f42:	4c4f      	ldr	r4, [pc, #316]	; (407080 <vTask1+0x144>)
  406f44:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
  406f46:	4b4f      	ldr	r3, [pc, #316]	; (407084 <vTask1+0x148>)
  406f48:	4798      	blx	r3
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  406f4a:	484f      	ldr	r0, [pc, #316]	; (407088 <vTask1+0x14c>)
  406f4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406f50:	4b4e      	ldr	r3, [pc, #312]	; (40708c <vTask1+0x150>)
  406f52:	4798      	blx	r3
	int testCountFail = 0;
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  406f54:	484e      	ldr	r0, [pc, #312]	; (407090 <vTask1+0x154>)
  406f56:	47a0      	blx	r4
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
	int testCountFail = 0;
	
	int batLowCount = 0;
  406f58:	2700      	movs	r7, #0
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  406f5a:	2501      	movs	r5, #1
						pio_set(LED7);
					}
					tg = !tg;
				}
				else {
					pio_clear(LED0);	
  406f5c:	4c4a      	ldr	r4, [pc, #296]	; (407088 <vTask1+0x14c>)
  406f5e:	4e4d      	ldr	r6, [pc, #308]	; (407094 <vTask1+0x158>)
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
					pio_set(LED0);
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25 && !pio_get(PIOD,PIO_INPUT,1<<9))  batLowCount++;
  406f60:	f8df 8154 	ldr.w	r8, [pc, #340]	; 4070b8 <vTask1+0x17c>
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
  406f64:	2d00      	cmp	r5, #0
  406f66:	d053      	beq.n	407010 <vTask1+0xd4>
					pio_set(LED0);
  406f68:	4620      	mov	r0, r4
  406f6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406f6e:	4b47      	ldr	r3, [pc, #284]	; (40708c <vTask1+0x150>)
  406f70:	4798      	blx	r3
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25 && !pio_get(PIOD,PIO_INPUT,1<<9))  batLowCount++;
  406f72:	4b49      	ldr	r3, [pc, #292]	; (407098 <vTask1+0x15c>)
  406f74:	69db      	ldr	r3, [r3, #28]
  406f76:	2b00      	cmp	r3, #0
  406f78:	d17d      	bne.n	407076 <vTask1+0x13a>
  406f7a:	4b48      	ldr	r3, [pc, #288]	; (40709c <vTask1+0x160>)
  406f7c:	4798      	blx	r3
  406f7e:	eef1 7a09 	vmov.f32	s15, #25
  406f82:	eeb4 0ae7 	vcmpe.f32	s0, s15
  406f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406f8a:	d574      	bpl.n	407076 <vTask1+0x13a>
  406f8c:	4640      	mov	r0, r8
  406f8e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406f92:	f44f 7200 	mov.w	r2, #512	; 0x200
  406f96:	4b42      	ldr	r3, [pc, #264]	; (4070a0 <vTask1+0x164>)
  406f98:	4798      	blx	r3
  406f9a:	2800      	cmp	r0, #0
  406f9c:	d16b      	bne.n	407076 <vTask1+0x13a>
  406f9e:	3701      	adds	r7, #1
					else batLowCount = 0;
					if(batLowCount > 10) {
  406fa0:	2f0a      	cmp	r7, #10
  406fa2:	dd33      	ble.n	40700c <vTask1+0xd0>
						sendDebugString("********************\n");
  406fa4:	f8df 9114 	ldr.w	r9, [pc, #276]	; 4070bc <vTask1+0x180>
  406fa8:	4648      	mov	r0, r9
  406faa:	4d35      	ldr	r5, [pc, #212]	; (407080 <vTask1+0x144>)
  406fac:	47a8      	blx	r5
						sendDebugString("********************\n");
  406fae:	4648      	mov	r0, r9
  406fb0:	47a8      	blx	r5
						sendDebugString("WARNING: BAT VOLT AT CRITICAL LEVELS\n");
  406fb2:	483c      	ldr	r0, [pc, #240]	; (4070a4 <vTask1+0x168>)
  406fb4:	47a8      	blx	r5
						sendDebugString("DISABLING SERVO WRITE OUT\n");
  406fb6:	483c      	ldr	r0, [pc, #240]	; (4070a8 <vTask1+0x16c>)
  406fb8:	47a8      	blx	r5
						sendDebugString("PLEASE DISCONNECT BATTERY NOW!\n");
  406fba:	483c      	ldr	r0, [pc, #240]	; (4070ac <vTask1+0x170>)
  406fbc:	47a8      	blx	r5
						sendDebugString("********************\n");
  406fbe:	4648      	mov	r0, r9
  406fc0:	47a8      	blx	r5
						sendDebugString("********************\n");
  406fc2:	4648      	mov	r0, r9
  406fc4:	47a8      	blx	r5
						pio_set(PIOA,PIO_PA26);
  406fc6:	4620      	mov	r0, r4
  406fc8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  406fcc:	4d2f      	ldr	r5, [pc, #188]	; (40708c <vTask1+0x150>)
  406fce:	47a8      	blx	r5
						
						pio_set(LED0);
  406fd0:	4620      	mov	r0, r4
  406fd2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406fd6:	47a8      	blx	r5
						pio_set(LED1);
  406fd8:	4620      	mov	r0, r4
  406fda:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406fde:	47a8      	blx	r5
						pio_set(LED2);
  406fe0:	4620      	mov	r0, r4
  406fe2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406fe6:	47a8      	blx	r5
						pio_set(LED3);
  406fe8:	4620      	mov	r0, r4
  406fea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406fee:	47a8      	blx	r5
						pio_set(LED4);
  406ff0:	482f      	ldr	r0, [pc, #188]	; (4070b0 <vTask1+0x174>)
  406ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406ff6:	47a8      	blx	r5
						pio_set(LED5);
  406ff8:	4620      	mov	r0, r4
  406ffa:	2104      	movs	r1, #4
  406ffc:	47a8      	blx	r5
						pio_set(LED6);
  406ffe:	4620      	mov	r0, r4
  407000:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407004:	47a8      	blx	r5
						pio_set(LED7);
  407006:	4620      	mov	r0, r4
  407008:	2140      	movs	r1, #64	; 0x40
  40700a:	47a8      	blx	r5
					}
					tg = !tg;
  40700c:	2500      	movs	r5, #0
  40700e:	e02e      	b.n	40706e <vTask1+0x132>
				}
				else {
					pio_clear(LED0);	
  407010:	4620      	mov	r0, r4
  407012:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407016:	47b0      	blx	r6
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25) {
  407018:	4b1f      	ldr	r3, [pc, #124]	; (407098 <vTask1+0x15c>)
  40701a:	69db      	ldr	r3, [r3, #28]
  40701c:	bb33      	cbnz	r3, 40706c <vTask1+0x130>
  40701e:	4b1f      	ldr	r3, [pc, #124]	; (40709c <vTask1+0x160>)
  407020:	4798      	blx	r3
  407022:	eef1 7a09 	vmov.f32	s15, #25
  407026:	eeb4 0ae7 	vcmpe.f32	s0, s15
  40702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40702e:	d51d      	bpl.n	40706c <vTask1+0x130>
						pio_clear(LED0);
  407030:	4620      	mov	r0, r4
  407032:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407036:	47b0      	blx	r6
						pio_clear(LED1);
  407038:	4620      	mov	r0, r4
  40703a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40703e:	47b0      	blx	r6
						pio_clear(LED2);
  407040:	4620      	mov	r0, r4
  407042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  407046:	47b0      	blx	r6
						pio_clear(LED3);
  407048:	4620      	mov	r0, r4
  40704a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40704e:	47b0      	blx	r6
						pio_clear(LED4);
  407050:	4817      	ldr	r0, [pc, #92]	; (4070b0 <vTask1+0x174>)
  407052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  407056:	47b0      	blx	r6
						pio_clear(LED5);
  407058:	4620      	mov	r0, r4
  40705a:	2104      	movs	r1, #4
  40705c:	47b0      	blx	r6
						pio_clear(LED6);
  40705e:	4620      	mov	r0, r4
  407060:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407064:	47b0      	blx	r6
						pio_clear(LED7);
  407066:	4620      	mov	r0, r4
  407068:	2140      	movs	r1, #64	; 0x40
  40706a:	47b0      	blx	r6
					}
					tg = !tg;
  40706c:	2501      	movs	r5, #1
				}	
				vTaskDelay(250);
  40706e:	20fa      	movs	r0, #250	; 0xfa
  407070:	4b10      	ldr	r3, [pc, #64]	; (4070b4 <vTask1+0x178>)
  407072:	4798      	blx	r3
	}
  407074:	e776      	b.n	406f64 <vTask1+0x28>
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  407076:	2700      	movs	r7, #0
  407078:	e7c8      	b.n	40700c <vTask1+0xd0>
  40707a:	bf00      	nop
  40707c:	004135d4 	.word	0x004135d4
  407080:	0040019d 	.word	0x0040019d
  407084:	00401af1 	.word	0x00401af1
  407088:	400e0e00 	.word	0x400e0e00
  40708c:	004027c9 	.word	0x004027c9
  407090:	004135f4 	.word	0x004135f4
  407094:	004027cd 	.word	0x004027cd
  407098:	2040c5f8 	.word	0x2040c5f8
  40709c:	00405a61 	.word	0x00405a61
  4070a0:	004027d1 	.word	0x004027d1
  4070a4:	00413648 	.word	0x00413648
  4070a8:	00413670 	.word	0x00413670
  4070ac:	0041368c 	.word	0x0041368c
  4070b0:	400e1000 	.word	0x400e1000
  4070b4:	00401d49 	.word	0x00401d49
  4070b8:	400e1400 	.word	0x400e1400
  4070bc:	00413630 	.word	0x00413630

004070c0 <LegControlTask>:
				}	
				vTaskDelay(250);
	}
}

void LegControlTask (void* pvParameters) {
  4070c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070c2:	ed2d 8b02 	vpush	{d8}
  4070c6:	b0ab      	sub	sp, #172	; 0xac
	sendDebugString("LEG CONTROL TASK INITIALIZATION - STARTED\n");
  4070c8:	484f      	ldr	r0, [pc, #316]	; (407208 <LegControlTask+0x148>)
  4070ca:	4e50      	ldr	r6, [pc, #320]	; (40720c <LegControlTask+0x14c>)
  4070cc:	47b0      	blx	r6
	
	float	ofst[7];
	XZ		xzS[7];
	angles	Ang[7];
	
	hexabot_walk.movTurn = 0;
  4070ce:	4b50      	ldr	r3, [pc, #320]	; (407210 <LegControlTask+0x150>)
  4070d0:	2200      	movs	r2, #0
  4070d2:	601a      	str	r2, [r3, #0]
	hexabot_walk.movDir = 0;
  4070d4:	605a      	str	r2, [r3, #4]
	hexabot_walk.stance = 165;
  4070d6:	22a5      	movs	r2, #165	; 0xa5
  4070d8:	609a      	str	r2, [r3, #8]
	hexabot_walk.hgt = 20;
  4070da:	2214      	movs	r2, #20
  4070dc:	60da      	str	r2, [r3, #12]
	hexabot_walk.pup = 85;
  4070de:	2255      	movs	r2, #85	; 0x55
  4070e0:	611a      	str	r2, [r3, #16]
	hexabot_walk.stride = 65;
  4070e2:	2241      	movs	r2, #65	; 0x41
  4070e4:	615a      	str	r2, [r3, #20]
	hexabot_walk.Walk_EN = 0;
  4070e6:	2400      	movs	r4, #0
  4070e8:	61dc      	str	r4, [r3, #28]
	hexabot_walk.Hexabot_leg_cycle_t = 150;
  4070ea:	2296      	movs	r2, #150	; 0x96
  4070ec:	619a      	str	r2, [r3, #24]
	hexabot_walk.ret = 0;
  4070ee:	629c      	str	r4, [r3, #40]	; 0x28
	hexabot_walk.gaitIndex = 2;
  4070f0:	2702      	movs	r7, #2
  4070f2:	62df      	str	r7, [r3, #44]	; 0x2c
	
	cmdServoMan(6,0,90.00);
  4070f4:	2006      	movs	r0, #6
  4070f6:	4621      	mov	r1, r4
  4070f8:	225a      	movs	r2, #90	; 0x5a
  4070fa:	4d46      	ldr	r5, [pc, #280]	; (407214 <LegControlTask+0x154>)
  4070fc:	47a8      	blx	r5
	cmdServoMan(6,1,0.00);
  4070fe:	2006      	movs	r0, #6
  407100:	2101      	movs	r1, #1
  407102:	4622      	mov	r2, r4
  407104:	47a8      	blx	r5
	cmdServoMan(6,2,90.00);
  407106:	2006      	movs	r0, #6
  407108:	4639      	mov	r1, r7
  40710a:	225a      	movs	r2, #90	; 0x5a
  40710c:	47a8      	blx	r5
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  40710e:	4842      	ldr	r0, [pc, #264]	; (407218 <LegControlTask+0x158>)
  407110:	47b0      	blx	r6
	
	for(;;) {
		pio_set(LED7);
  407112:	4d42      	ldr	r5, [pc, #264]	; (40721c <LegControlTask+0x15c>)
  407114:	4e42      	ldr	r6, [pc, #264]	; (407220 <LegControlTask+0x160>)
		  
		}
		else {
			if(hexabot_walk.ret){
				if(!resting) {
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  407116:	ed9f 8a43 	vldr	s16, [pc, #268]	; 407224 <LegControlTask+0x164>
	cmdServoMan(6,2,90.00);
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
  40711a:	4628      	mov	r0, r5
  40711c:	2140      	movs	r1, #64	; 0x40
  40711e:	47b0      	blx	r6
		if(hexabot_walk.Walk_EN) {
  407120:	4b3b      	ldr	r3, [pc, #236]	; (407210 <LegControlTask+0x150>)
  407122:	69db      	ldr	r3, [r3, #28]
  407124:	2b00      	cmp	r3, #0
  407126:	f000 808b 	beq.w	407240 <LegControlTask+0x180>
			
		switch(hexabot_walk.gaitIndex) {
  40712a:	4b39      	ldr	r3, [pc, #228]	; (407210 <LegControlTask+0x150>)
  40712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40712e:	2b02      	cmp	r3, #2
  407130:	d017      	beq.n	407162 <LegControlTask+0xa2>
  407132:	dc03      	bgt.n	40713c <LegControlTask+0x7c>
  407134:	b13b      	cbz	r3, 407146 <LegControlTask+0x86>
  407136:	2b01      	cmp	r3, #1
  407138:	d00c      	beq.n	407154 <LegControlTask+0x94>
  40713a:	e026      	b.n	40718a <LegControlTask+0xca>
  40713c:	2b62      	cmp	r3, #98	; 0x62
  40713e:	d017      	beq.n	407170 <LegControlTask+0xb0>
  407140:	2b63      	cmp	r3, #99	; 0x63
  407142:	d01c      	beq.n	40717e <LegControlTask+0xbe>
  407144:	e021      	b.n	40718a <LegControlTask+0xca>
			
			case 0:	
			Gait0(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407146:	a823      	add	r0, sp, #140	; 0x8c
  407148:	a915      	add	r1, sp, #84	; 0x54
  40714a:	466a      	mov	r2, sp
  40714c:	4b30      	ldr	r3, [pc, #192]	; (407210 <LegControlTask+0x150>)
  40714e:	4c36      	ldr	r4, [pc, #216]	; (407228 <LegControlTask+0x168>)
  407150:	47a0      	blx	r4
			break;
  407152:	e01a      	b.n	40718a <LegControlTask+0xca>
			
			case 1:
			Gait1(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407154:	a823      	add	r0, sp, #140	; 0x8c
  407156:	a915      	add	r1, sp, #84	; 0x54
  407158:	466a      	mov	r2, sp
  40715a:	4b2d      	ldr	r3, [pc, #180]	; (407210 <LegControlTask+0x150>)
  40715c:	4c33      	ldr	r4, [pc, #204]	; (40722c <LegControlTask+0x16c>)
  40715e:	47a0      	blx	r4
			break;
  407160:	e013      	b.n	40718a <LegControlTask+0xca>
			
			case 2:
			Gait2(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407162:	a823      	add	r0, sp, #140	; 0x8c
  407164:	a915      	add	r1, sp, #84	; 0x54
  407166:	466a      	mov	r2, sp
  407168:	4b29      	ldr	r3, [pc, #164]	; (407210 <LegControlTask+0x150>)
  40716a:	4c31      	ldr	r4, [pc, #196]	; (407230 <LegControlTask+0x170>)
  40716c:	47a0      	blx	r4
			break;
  40716e:	e00c      	b.n	40718a <LegControlTask+0xca>
			
			case 98:
			sitDown(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407170:	a823      	add	r0, sp, #140	; 0x8c
  407172:	a915      	add	r1, sp, #84	; 0x54
  407174:	466a      	mov	r2, sp
  407176:	4b26      	ldr	r3, [pc, #152]	; (407210 <LegControlTask+0x150>)
  407178:	4c2e      	ldr	r4, [pc, #184]	; (407234 <LegControlTask+0x174>)
  40717a:	47a0      	blx	r4
			break;
  40717c:	e005      	b.n	40718a <LegControlTask+0xca>
			
			case 99:
			standUp(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  40717e:	a823      	add	r0, sp, #140	; 0x8c
  407180:	a915      	add	r1, sp, #84	; 0x54
  407182:	466a      	mov	r2, sp
  407184:	4b22      	ldr	r3, [pc, #136]	; (407210 <LegControlTask+0x150>)
  407186:	4c2c      	ldr	r4, [pc, #176]	; (407238 <LegControlTask+0x178>)
  407188:	47a0      	blx	r4
			break;
		}
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  40718a:	2000      	movs	r0, #0
  40718c:	ed9d 0a00 	vldr	s0, [sp]
  407190:	eddd 0a01 	vldr	s1, [sp, #4]
  407194:	ed9d 1a02 	vldr	s2, [sp, #8]
  407198:	4c28      	ldr	r4, [pc, #160]	; (40723c <LegControlTask+0x17c>)
  40719a:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  40719c:	2001      	movs	r0, #1
  40719e:	ed9d 0a03 	vldr	s0, [sp, #12]
  4071a2:	eddd 0a04 	vldr	s1, [sp, #16]
  4071a6:	ed9d 1a05 	vldr	s2, [sp, #20]
  4071aa:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  4071ac:	2002      	movs	r0, #2
  4071ae:	ed9d 0a06 	vldr	s0, [sp, #24]
  4071b2:	eddd 0a07 	vldr	s1, [sp, #28]
  4071b6:	ed9d 1a08 	vldr	s2, [sp, #32]
  4071ba:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  4071bc:	2003      	movs	r0, #3
  4071be:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
  4071c2:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
  4071c6:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
  4071ca:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  4071cc:	2004      	movs	r0, #4
  4071ce:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
  4071d2:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
  4071d6:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
  4071da:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  4071dc:	2005      	movs	r0, #5
  4071de:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
  4071e2:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
  4071e6:	ed9d 1a11 	vldr	s2, [sp, #68]	; 0x44
  4071ea:	47a0      	blx	r4
		  hexabot_walk.i++;
  4071ec:	4a08      	ldr	r2, [pc, #32]	; (407210 <LegControlTask+0x150>)
  4071ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4071f0:	3301      	adds	r3, #1
  4071f2:	6253      	str	r3, [r2, #36]	; 0x24
		 hexabot_walk. ret = 1;
  4071f4:	2101      	movs	r1, #1
  4071f6:	6291      	str	r1, [r2, #40]	; 0x28
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
  4071f8:	6a12      	ldr	r2, [r2, #32]
  4071fa:	4293      	cmp	r3, r2
  4071fc:	f340 8149 	ble.w	407492 <LegControlTask+0x3d2>
  407200:	2200      	movs	r2, #0
  407202:	4b03      	ldr	r3, [pc, #12]	; (407210 <LegControlTask+0x150>)
  407204:	61da      	str	r2, [r3, #28]
  407206:	e144      	b.n	407492 <LegControlTask+0x3d2>
  407208:	004136ac 	.word	0x004136ac
  40720c:	0040019d 	.word	0x0040019d
  407210:	2040c5f8 	.word	0x2040c5f8
  407214:	00406b3d 	.word	0x00406b3d
  407218:	004136d8 	.word	0x004136d8
  40721c:	400e0e00 	.word	0x400e0e00
  407220:	004027c9 	.word	0x004027c9
  407224:	00000000 	.word	0x00000000
  407228:	004044c1 	.word	0x004044c1
  40722c:	00404bd1 	.word	0x00404bd1
  407230:	00404e61 	.word	0x00404e61
  407234:	00404069 	.word	0x00404069
  407238:	00403c71 	.word	0x00403c71
  40723c:	00405fb5 	.word	0x00405fb5
		  
		}
		else {
			if(hexabot_walk.ret){
  407240:	4b98      	ldr	r3, [pc, #608]	; (4074a4 <LegControlTask+0x3e4>)
  407242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407244:	2b00      	cmp	r3, #0
  407246:	f000 8121 	beq.w	40748c <LegControlTask+0x3cc>
				if(!resting) {
  40724a:	4b97      	ldr	r3, [pc, #604]	; (4074a8 <LegControlTask+0x3e8>)
  40724c:	681b      	ldr	r3, [r3, #0]
  40724e:	2b00      	cmp	r3, #0
  407250:	f040 8112 	bne.w	407478 <LegControlTask+0x3b8>
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  407254:	4c93      	ldr	r4, [pc, #588]	; (4074a4 <LegControlTask+0x3e4>)
  407256:	edd4 7a02 	vldr	s15, [r4, #8]
  40725a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  40725e:	eeb0 0a41 	vmov.f32	s0, s2
  407262:	eef0 0a48 	vmov.f32	s1, s16
  407266:	eef0 1a48 	vmov.f32	s3, s16
  40726a:	eeb0 2a48 	vmov.f32	s4, s16
  40726e:	2001      	movs	r0, #1
  407270:	eef0 2a48 	vmov.f32	s5, s16
  407274:	4f8d      	ldr	r7, [pc, #564]	; (4074ac <LegControlTask+0x3ec>)
  407276:	47b8      	blx	r7
  407278:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
  40727c:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
		  xzS[1] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  407280:	edd4 7a02 	vldr	s15, [r4, #8]
  407284:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407288:	eeb0 0a41 	vmov.f32	s0, s2
  40728c:	eef0 0a48 	vmov.f32	s1, s16
  407290:	eef0 1a48 	vmov.f32	s3, s16
  407294:	eeb0 2a48 	vmov.f32	s4, s16
  407298:	2000      	movs	r0, #0
  40729a:	eef0 2a48 	vmov.f32	s5, s16
  40729e:	47b8      	blx	r7
  4072a0:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
  4072a4:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
		  xzS[2] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  4072a8:	edd4 7a02 	vldr	s15, [r4, #8]
  4072ac:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4072b0:	eeb0 0a41 	vmov.f32	s0, s2
  4072b4:	eef0 0a48 	vmov.f32	s1, s16
  4072b8:	eef0 1a48 	vmov.f32	s3, s16
  4072bc:	eeb0 2a48 	vmov.f32	s4, s16
  4072c0:	2001      	movs	r0, #1
  4072c2:	eef0 2a48 	vmov.f32	s5, s16
  4072c6:	47b8      	blx	r7
  4072c8:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
  4072cc:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
		  xzS[3] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  4072d0:	edd4 7a02 	vldr	s15, [r4, #8]
  4072d4:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4072d8:	eeb0 0a41 	vmov.f32	s0, s2
  4072dc:	eef0 0a48 	vmov.f32	s1, s16
  4072e0:	eef0 1a48 	vmov.f32	s3, s16
  4072e4:	eeb0 2a48 	vmov.f32	s4, s16
  4072e8:	2000      	movs	r0, #0
  4072ea:	eef0 2a48 	vmov.f32	s5, s16
  4072ee:	47b8      	blx	r7
  4072f0:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
  4072f4:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
		  xzS[4] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  4072f8:	edd4 7a02 	vldr	s15, [r4, #8]
  4072fc:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407300:	eeb0 0a41 	vmov.f32	s0, s2
  407304:	eef0 0a48 	vmov.f32	s1, s16
  407308:	eef0 1a48 	vmov.f32	s3, s16
  40730c:	eeb0 2a48 	vmov.f32	s4, s16
  407310:	2001      	movs	r0, #1
  407312:	eef0 2a48 	vmov.f32	s5, s16
  407316:	47b8      	blx	r7
  407318:	ed8d 0a1d 	vstr	s0, [sp, #116]	; 0x74
  40731c:	edcd 0a1e 	vstr	s1, [sp, #120]	; 0x78
		  xzS[5] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  407320:	edd4 7a02 	vldr	s15, [r4, #8]
  407324:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407328:	eeb0 0a41 	vmov.f32	s0, s2
  40732c:	eef0 0a48 	vmov.f32	s1, s16
  407330:	eef0 1a48 	vmov.f32	s3, s16
  407334:	eeb0 2a48 	vmov.f32	s4, s16
  407338:	2000      	movs	r0, #0
  40733a:	eef0 2a48 	vmov.f32	s5, s16
  40733e:	47b8      	blx	r7
  407340:	ed8d 0a1f 	vstr	s0, [sp, #124]	; 0x7c
  407344:	edcd 0a20 	vstr	s1, [sp, #128]	; 0x80

		  Ang[0] = legAngCalc(xzS[0].X,  -hexabot_walk.hgt  ,xzS[0].Z);
  407348:	68e3      	ldr	r3, [r4, #12]
  40734a:	425b      	negs	r3, r3
  40734c:	ee00 3a90 	vmov	s1, r3
  407350:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
  407354:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  407358:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
  40735c:	4f54      	ldr	r7, [pc, #336]	; (4074b0 <LegControlTask+0x3f0>)
  40735e:	47b8      	blx	r7
  407360:	ed8d 0a00 	vstr	s0, [sp]
  407364:	edcd 0a01 	vstr	s1, [sp, #4]
  407368:	ed8d 1a02 	vstr	s2, [sp, #8]
		  Ang[1] = legAngCalc(xzS[1].X,  -hexabot_walk.hgt  ,xzS[1].Z);
  40736c:	68e3      	ldr	r3, [r4, #12]
  40736e:	425b      	negs	r3, r3
  407370:	ee00 3a90 	vmov	s1, r3
  407374:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
  407378:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  40737c:	ed9d 1a18 	vldr	s2, [sp, #96]	; 0x60
  407380:	47b8      	blx	r7
  407382:	ed8d 0a03 	vstr	s0, [sp, #12]
  407386:	edcd 0a04 	vstr	s1, [sp, #16]
  40738a:	ed8d 1a05 	vstr	s2, [sp, #20]
		  Ang[2] = legAngCalc(xzS[2].X,  -hexabot_walk.hgt  ,xzS[2].Z);
  40738e:	68e3      	ldr	r3, [r4, #12]
  407390:	425b      	negs	r3, r3
  407392:	ee00 3a90 	vmov	s1, r3
  407396:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
  40739a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  40739e:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
  4073a2:	47b8      	blx	r7
  4073a4:	ed8d 0a06 	vstr	s0, [sp, #24]
  4073a8:	edcd 0a07 	vstr	s1, [sp, #28]
  4073ac:	ed8d 1a08 	vstr	s2, [sp, #32]
		  Ang[3] = legAngCalc(xzS[3].X,  -hexabot_walk.hgt  ,xzS[3].Z);
  4073b0:	68e3      	ldr	r3, [r4, #12]
  4073b2:	425b      	negs	r3, r3
  4073b4:	ee00 3a90 	vmov	s1, r3
  4073b8:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
  4073bc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  4073c0:	ed9d 1a1c 	vldr	s2, [sp, #112]	; 0x70
  4073c4:	47b8      	blx	r7
  4073c6:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
  4073ca:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
  4073ce:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
		  Ang[4] = legAngCalc(xzS[4].X,  -hexabot_walk.hgt  ,xzS[4].Z);
  4073d2:	68e3      	ldr	r3, [r4, #12]
  4073d4:	425b      	negs	r3, r3
  4073d6:	ee00 3a90 	vmov	s1, r3
  4073da:	ed9d 0a1d 	vldr	s0, [sp, #116]	; 0x74
  4073de:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  4073e2:	ed9d 1a1e 	vldr	s2, [sp, #120]	; 0x78
  4073e6:	47b8      	blx	r7
  4073e8:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
  4073ec:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
  4073f0:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
		  Ang[5] = legAngCalc(xzS[5].X,  -hexabot_walk.hgt  ,xzS[5].Z);
  4073f4:	68e3      	ldr	r3, [r4, #12]
  4073f6:	425b      	negs	r3, r3
  4073f8:	ee00 3a90 	vmov	s1, r3
  4073fc:	ed9d 0a1f 	vldr	s0, [sp, #124]	; 0x7c
  407400:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  407404:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
  407408:	47b8      	blx	r7
  40740a:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
  40740e:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
  407412:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  407416:	2000      	movs	r0, #0
  407418:	ed9d 0a00 	vldr	s0, [sp]
  40741c:	eddd 0a01 	vldr	s1, [sp, #4]
  407420:	ed9d 1a02 	vldr	s2, [sp, #8]
  407424:	4c23      	ldr	r4, [pc, #140]	; (4074b4 <LegControlTask+0x3f4>)
  407426:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  407428:	2001      	movs	r0, #1
  40742a:	ed9d 0a03 	vldr	s0, [sp, #12]
  40742e:	eddd 0a04 	vldr	s1, [sp, #16]
  407432:	ed9d 1a05 	vldr	s2, [sp, #20]
  407436:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  407438:	2002      	movs	r0, #2
  40743a:	ed9d 0a06 	vldr	s0, [sp, #24]
  40743e:	eddd 0a07 	vldr	s1, [sp, #28]
  407442:	ed9d 1a08 	vldr	s2, [sp, #32]
  407446:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  407448:	2003      	movs	r0, #3
  40744a:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
  40744e:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
  407452:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
  407456:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  407458:	2004      	movs	r0, #4
  40745a:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
  40745e:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
  407462:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
  407466:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  407468:	2005      	movs	r0, #5
  40746a:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
  40746e:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
  407472:	ed9d 1a11 	vldr	s2, [sp, #68]	; 0x44
  407476:	47a0      	blx	r4
				}
		  hexabot_walk.ret = 0;
  407478:	4b0a      	ldr	r3, [pc, #40]	; (4074a4 <LegControlTask+0x3e4>)
  40747a:	2200      	movs	r2, #0
  40747c:	629a      	str	r2, [r3, #40]	; 0x28
		  if(hexabot_walk.gaitIndex == 99 || hexabot_walk.gaitIndex == 98) hexabot_walk.gaitIndex = 2;
  40747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407480:	3b62      	subs	r3, #98	; 0x62
  407482:	2b01      	cmp	r3, #1
  407484:	d802      	bhi.n	40748c <LegControlTask+0x3cc>
  407486:	2202      	movs	r2, #2
  407488:	4b06      	ldr	r3, [pc, #24]	; (4074a4 <LegControlTask+0x3e4>)
  40748a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
			hexabot_walk.i = 0;
  40748c:	2200      	movs	r2, #0
  40748e:	4b05      	ldr	r3, [pc, #20]	; (4074a4 <LegControlTask+0x3e4>)
  407490:	625a      	str	r2, [r3, #36]	; 0x24
			//return to idle state (legs in middle) 
		}
		pio_clear(LED7);
  407492:	4628      	mov	r0, r5
  407494:	2140      	movs	r1, #64	; 0x40
  407496:	4b08      	ldr	r3, [pc, #32]	; (4074b8 <LegControlTask+0x3f8>)
  407498:	4798      	blx	r3
		  vTaskDelay(5);
  40749a:	2005      	movs	r0, #5
  40749c:	4b07      	ldr	r3, [pc, #28]	; (4074bc <LegControlTask+0x3fc>)
  40749e:	4798      	blx	r3
	}
  4074a0:	e63b      	b.n	40711a <LegControlTask+0x5a>
  4074a2:	bf00      	nop
  4074a4:	2040c5f8 	.word	0x2040c5f8
  4074a8:	2040c4bc 	.word	0x2040c4bc
  4074ac:	00405b41 	.word	0x00405b41
  4074b0:	00405d89 	.word	0x00405d89
  4074b4:	00405fb5 	.word	0x00405fb5
  4074b8:	004027cd 	.word	0x004027cd
  4074bc:	00401d49 	.word	0x00401d49

004074c0 <ImageProTask>:
			}
		}
	}
}

void ImageProTask(void* pvParams) {
  4074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074c4:	ed2d 8b04 	vpush	{d8-d9}
  4074c8:	b083      	sub	sp, #12
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - STARTED\n");
  4074ca:	485b      	ldr	r0, [pc, #364]	; (407638 <ImageProTask+0x178>)
  4074cc:	4c5b      	ldr	r4, [pc, #364]	; (40763c <ImageProTask+0x17c>)
  4074ce:	47a0      	blx	r4
	
	ISIsem = xSemaphoreCreateBinary();
  4074d0:	2001      	movs	r0, #1
  4074d2:	2100      	movs	r1, #0
  4074d4:	2203      	movs	r2, #3
  4074d6:	4b5a      	ldr	r3, [pc, #360]	; (407640 <ImageProTask+0x180>)
  4074d8:	4798      	blx	r3
  4074da:	4b5a      	ldr	r3, [pc, #360]	; (407644 <ImageProTask+0x184>)
  4074dc:	6018      	str	r0, [r3, #0]
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  4074de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  4074e2:	4b59      	ldr	r3, [pc, #356]	; (407648 <ImageProTask+0x188>)
  4074e4:	62da      	str	r2, [r3, #44]	; 0x2c

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4074e6:	4b59      	ldr	r3, [pc, #356]	; (40764c <ImageProTask+0x18c>)
  4074e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4074ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4074f0:	21e0      	movs	r1, #224	; 0xe0
  4074f2:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4074f6:	605a      	str	r2, [r3, #4]
	isi_enable_interrupt(ISI,1<<16|1<<17);
	NVIC_ClearPendingIRQ(ISI_IRQn);
	NVIC_SetPriority(ISI_IRQn,7);
	NVIC_EnableIRQ(ISI_IRQn);
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
  4074f8:	4855      	ldr	r0, [pc, #340]	; (407650 <ImageProTask+0x190>)
  4074fa:	47a0      	blx	r4
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
  4074fc:	4b55      	ldr	r3, [pc, #340]	; (407654 <ImageProTask+0x194>)
  4074fe:	681d      	ldr	r5, [r3, #0]
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  407500:	4f50      	ldr	r7, [pc, #320]	; (407644 <ImageProTask+0x184>)
  407502:	4e55      	ldr	r6, [pc, #340]	; (407658 <ImageProTask+0x198>)
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  407504:	ed9f 9b48 	vldr	d9, [pc, #288]	; 407628 <ImageProTask+0x168>
  407508:	ed9f 8b49 	vldr	d8, [pc, #292]	; 407630 <ImageProTask+0x170>
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  40750c:	2400      	movs	r4, #0
  40750e:	6838      	ldr	r0, [r7, #0]
  407510:	4621      	mov	r1, r4
  407512:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407516:	4623      	mov	r3, r4
  407518:	47b0      	blx	r6
  40751a:	2801      	cmp	r0, #1
  40751c:	d1f7      	bne.n	40750e <ImageProTask+0x4e>
				//do dif here	
				pio_set(LED3);
  40751e:	484f      	ldr	r0, [pc, #316]	; (40765c <ImageProTask+0x19c>)
  407520:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407524:	4b4e      	ldr	r3, [pc, #312]	; (407660 <ImageProTask+0x1a0>)
  407526:	4798      	blx	r3
				diffPix=0;
  407528:	2200      	movs	r2, #0
  40752a:	4b4e      	ldr	r3, [pc, #312]	; (407664 <ImageProTask+0x1a4>)
  40752c:	601a      	str	r2, [r3, #0]
  40752e:	f04f 40e2 	mov.w	r0, #1895825408	; 0x71000000
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407532:	f8df 814c 	ldr.w	r8, [pc, #332]	; 407680 <ImageProTask+0x1c0>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
						}
						else dif1[i] = 0x0000;
  407536:	4691      	mov	r9, r2
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
  407538:	469c      	mov	ip, r3
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  40753a:	f8df e148 	ldr.w	lr, [pc, #328]	; 407684 <ImageProTask+0x1c4>
  40753e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
					tempframe0 = frame0[i];
  407542:	881a      	ldrh	r2, [r3, #0]
  407544:	b292      	uxth	r2, r2
  407546:	f100 410f 	add.w	r1, r0, #2399141888	; 0x8f000000
					tempframe1 = frame1[i];
  40754a:	5a6b      	ldrh	r3, [r5, r1]
  40754c:	b29b      	uxth	r3, r3
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  40754e:	f8d8 a000 	ldr.w	sl, [r8]
  407552:	0adc      	lsrs	r4, r3, #11
  407554:	ebc4 24d2 	rsb	r4, r4, r2, lsr #11
  407558:	4554      	cmp	r4, sl
  40755a:	dc08      	bgt.n	40756e <ImageProTask+0xae>
  40755c:	f403 64fc 	and.w	r4, r3, #2016	; 0x7e0
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  407560:	f3c2 1b45 	ubfx	fp, r2, #5, #6
  407564:	ebab 1464 	sub.w	r4, fp, r4, asr #5
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407568:	45a2      	cmp	sl, r4
  40756a:	db10      	blt.n	40758e <ImageProTask+0xce>
  40756c:	e007      	b.n	40757e <ImageProTask+0xbe>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  40756e:	f3c3 1345 	ubfx	r3, r3, #5, #6
  407572:	f3c2 1445 	ubfx	r4, r2, #5, #6
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407576:	1b1b      	subs	r3, r3, r4
  407578:	bf18      	it	ne
  40757a:	2301      	movne	r3, #1
  40757c:	e015      	b.n	4075aa <ImageProTask+0xea>
  40757e:	f003 0b1f 	and.w	fp, r3, #31
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  407582:	2a1e      	cmp	r2, #30
  407584:	bf8c      	ite	hi
  407586:	2400      	movhi	r4, #0
  407588:	f00b 0401 	andls.w	r4, fp, #1
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  40758c:	b12c      	cbz	r4, 40759a <ImageProTask+0xda>
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  40758e:	4053      	eors	r3, r2
  407590:	f013 031f 	ands.w	r3, r3, #31
  407594:	bf18      	it	ne
  407596:	2301      	movne	r3, #1
  407598:	e007      	b.n	4075aa <ImageProTask+0xea>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  40759a:	f002 041f 	and.w	r4, r2, #31
  40759e:	ebcb 0304 	rsb	r3, fp, r4
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  4075a2:	459a      	cmp	sl, r3
  4075a4:	bfac      	ite	ge
  4075a6:	2300      	movge	r3, #0
  4075a8:	2301      	movlt	r3, #1
  4075aa:	b133      	cbz	r3, 4075ba <ImageProTask+0xfa>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
  4075ac:	8002      	strh	r2, [r0, #0]
							diffPix++;
  4075ae:	f8dc 3000 	ldr.w	r3, [ip]
  4075b2:	3301      	adds	r3, #1
  4075b4:	f8cc 3000 	str.w	r3, [ip]
  4075b8:	e001      	b.n	4075be <ImageProTask+0xfe>
						}
						else dif1[i] = 0x0000;
  4075ba:	f8a0 9000 	strh.w	r9, [r0]
						//for(int d =0;d<20;d++) ((volatile uint16_t*)(0x7F000000))[0] = 0x0000; //for(int d =0;d<50;d++)	asm volatile ("nop");
						//((volatile uint8_t*)frame1)[2*i] = (tempframe0&0xFF00)>>8;
						//((volatile uint8_t*)frame1)[2*i+1] = tempframe0&0x00FF;
						frame1[i] = tempframe0;
  4075be:	526a      	strh	r2, [r5, r1]
  4075c0:	3002      	adds	r0, #2
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  4075c2:	4570      	cmp	r0, lr
  4075c4:	d1bb      	bne.n	40753e <ImageProTask+0x7e>
						frame1[i] = tempframe0;
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
  4075c6:	4b28      	ldr	r3, [pc, #160]	; (407668 <ImageProTask+0x1a8>)
  4075c8:	681b      	ldr	r3, [r3, #0]
  4075ca:	b323      	cbz	r3, 407616 <ImageProTask+0x156>
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  4075cc:	4b25      	ldr	r3, [pc, #148]	; (407664 <ImageProTask+0x1a4>)
  4075ce:	f8d3 8000 	ldr.w	r8, [r3]
  4075d2:	4c26      	ldr	r4, [pc, #152]	; (40766c <ImageProTask+0x1ac>)
  4075d4:	ee07 8a90 	vmov	s15, r8
  4075d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4075dc:	ee17 0a90 	vmov	r0, s15
  4075e0:	4b23      	ldr	r3, [pc, #140]	; (407670 <ImageProTask+0x1b0>)
  4075e2:	4798      	blx	r3
  4075e4:	4602      	mov	r2, r0
  4075e6:	460b      	mov	r3, r1
  4075e8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 407688 <ImageProTask+0x1c8>
  4075ec:	47e0      	blx	ip
  4075ee:	ec53 2b19 	vmov	r2, r3, d9
  4075f2:	f8df c098 	ldr.w	ip, [pc, #152]	; 40768c <ImageProTask+0x1cc>
  4075f6:	47e0      	blx	ip
  4075f8:	ec53 2b18 	vmov	r2, r3, d8
  4075fc:	f8df c090 	ldr.w	ip, [pc, #144]	; 407690 <ImageProTask+0x1d0>
  407600:	47e0      	blx	ip
  407602:	e9cd 0100 	strd	r0, r1, [sp]
  407606:	4620      	mov	r0, r4
  407608:	491a      	ldr	r1, [pc, #104]	; (407674 <ImageProTask+0x1b4>)
  40760a:	4642      	mov	r2, r8
  40760c:	4b1a      	ldr	r3, [pc, #104]	; (407678 <ImageProTask+0x1b8>)
  40760e:	4798      	blx	r3
					sendDebugString(buf);
  407610:	4620      	mov	r0, r4
  407612:	4b0a      	ldr	r3, [pc, #40]	; (40763c <ImageProTask+0x17c>)
  407614:	4798      	blx	r3
				}		
				pio_clear(LED3);
  407616:	4811      	ldr	r0, [pc, #68]	; (40765c <ImageProTask+0x19c>)
  407618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40761c:	4b17      	ldr	r3, [pc, #92]	; (40767c <ImageProTask+0x1bc>)
  40761e:	4798      	blx	r3
  407620:	e774      	b.n	40750c <ImageProTask+0x4c>
  407622:	bf00      	nop
  407624:	f3af 8000 	nop.w
  407628:	00000000 	.word	0x00000000
  40762c:	40f2c000 	.word	0x40f2c000
  407630:	00000000 	.word	0x00000000
  407634:	40590000 	.word	0x40590000
  407638:	00413720 	.word	0x00413720
  40763c:	0040019d 	.word	0x0040019d
  407640:	00401125 	.word	0x00401125
  407644:	2040c4c4 	.word	0x2040c4c4
  407648:	4004c000 	.word	0x4004c000
  40764c:	e000e100 	.word	0xe000e100
  407650:	00413754 	.word	0x00413754
  407654:	2040cec0 	.word	0x2040cec0
  407658:	0040155d 	.word	0x0040155d
  40765c:	400e0e00 	.word	0x400e0e00
  407660:	004027c9 	.word	0x004027c9
  407664:	2040c4d8 	.word	0x2040c4d8
  407668:	2040c4d4 	.word	0x2040c4d4
  40766c:	2040ce5c 	.word	0x2040ce5c
  407670:	0040ac4d 	.word	0x0040ac4d
  407674:	00413788 	.word	0x00413788
  407678:	0040bb79 	.word	0x0040bb79
  40767c:	004027cd 	.word	0x004027cd
  407680:	204000a8 	.word	0x204000a8
  407684:	71025800 	.word	0x71025800
  407688:	0040a991 	.word	0x0040a991
  40768c:	0040af49 	.word	0x0040af49
  407690:	0040acf5 	.word	0x0040acf5

00407694 <CLItask>:
		pio_clear(LED7);
		  vTaskDelay(5);
	}
}

void CLItask(void* pvParameters) {
  407694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407698:	b085      	sub	sp, #20
	sendDebugString("CLI TASK INITIALIZATION - STARTED\n");
  40769a:	487d      	ldr	r0, [pc, #500]	; (407890 <CLItask+0x1fc>)
  40769c:	4c7d      	ldr	r4, [pc, #500]	; (407894 <CLItask+0x200>)
  40769e:	47a0      	blx	r4
	memset(CLIbuf,0,100);
  4076a0:	487d      	ldr	r0, [pc, #500]	; (407898 <CLItask+0x204>)
  4076a2:	2100      	movs	r1, #0
  4076a4:	2264      	movs	r2, #100	; 0x64
  4076a6:	4b7d      	ldr	r3, [pc, #500]	; (40789c <CLItask+0x208>)
  4076a8:	4798      	blx	r3
	char* BaseCmd;
	sendDebugString("CLI TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  4076aa:	487d      	ldr	r0, [pc, #500]	; (4078a0 <CLItask+0x20c>)
  4076ac:	47a0      	blx	r4
	sendDebugString("COMMAND LINE STARTED\n");
  4076ae:	487d      	ldr	r0, [pc, #500]	; (4078a4 <CLItask+0x210>)
  4076b0:	47a0      	blx	r4
	sendDebugString("\n");
  4076b2:	4d7d      	ldr	r5, [pc, #500]	; (4078a8 <CLItask+0x214>)
  4076b4:	4628      	mov	r0, r5
  4076b6:	47a0      	blx	r4
	sendDebugString("\n");
  4076b8:	4628      	mov	r0, r5
  4076ba:	47a0      	blx	r4
	UARTsem = xSemaphoreCreateBinary();
  4076bc:	2001      	movs	r0, #1
  4076be:	2100      	movs	r1, #0
  4076c0:	2203      	movs	r2, #3
  4076c2:	4b7a      	ldr	r3, [pc, #488]	; (4078ac <CLItask+0x218>)
  4076c4:	4798      	blx	r3
  4076c6:	4b7a      	ldr	r3, [pc, #488]	; (4078b0 <CLItask+0x21c>)
  4076c8:	6018      	str	r0, [r3, #0]
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4076ca:	487a      	ldr	r0, [pc, #488]	; (4078b4 <CLItask+0x220>)
  4076cc:	47a0      	blx	r4
	for(;;) {
			if(xSemaphoreTake(UARTsem,0xFFFF) == pdTRUE) {
  4076ce:	4d78      	ldr	r5, [pc, #480]	; (4078b0 <CLItask+0x21c>)
  4076d0:	6828      	ldr	r0, [r5, #0]
  4076d2:	2100      	movs	r1, #0
  4076d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4076d8:	460b      	mov	r3, r1
  4076da:	4c77      	ldr	r4, [pc, #476]	; (4078b8 <CLItask+0x224>)
  4076dc:	47a0      	blx	r4
  4076de:	2801      	cmp	r0, #1
  4076e0:	d1f6      	bne.n	4076d0 <CLItask+0x3c>
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  4076e2:	4b76      	ldr	r3, [pc, #472]	; (4078bc <CLItask+0x228>)
  4076e4:	681b      	ldr	r3, [r3, #0]
  4076e6:	4a6c      	ldr	r2, [pc, #432]	; (407898 <CLItask+0x204>)
  4076e8:	4413      	add	r3, r2
  4076ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4076ee:	2b0a      	cmp	r3, #10
  4076f0:	d1ee      	bne.n	4076d0 <CLItask+0x3c>
			CLIbufIndex=0;
  4076f2:	2200      	movs	r2, #0
  4076f4:	4b71      	ldr	r3, [pc, #452]	; (4078bc <CLItask+0x228>)
  4076f6:	601a      	str	r2, [r3, #0]
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  4076f8:	4867      	ldr	r0, [pc, #412]	; (407898 <CLItask+0x204>)
  4076fa:	4971      	ldr	r1, [pc, #452]	; (4078c0 <CLItask+0x22c>)
  4076fc:	4b71      	ldr	r3, [pc, #452]	; (4078c4 <CLItask+0x230>)
  4076fe:	4798      	blx	r3
  407700:	4604      	mov	r4, r0
			
			if(UART_Ctrl_EN) {
  407702:	4b71      	ldr	r3, [pc, #452]	; (4078c8 <CLItask+0x234>)
  407704:	681b      	ldr	r3, [r3, #0]
  407706:	b183      	cbz	r3, 40772a <CLItask+0x96>
				UART_Ctrl_EN = 0;
  407708:	2300      	movs	r3, #0
  40770a:	4a6f      	ldr	r2, [pc, #444]	; (4078c8 <CLItask+0x234>)
  40770c:	6013      	str	r3, [r2, #0]
				UART_Ctrl_Cnt = 0;
  40770e:	4a6f      	ldr	r2, [pc, #444]	; (4078cc <CLItask+0x238>)
  407710:	6013      	str	r3, [r2, #0]
				pio_clear(LED6);
  407712:	486f      	ldr	r0, [pc, #444]	; (4078d0 <CLItask+0x23c>)
  407714:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407718:	4b6e      	ldr	r3, [pc, #440]	; (4078d4 <CLItask+0x240>)
  40771a:	4798      	blx	r3
				cmdInterp(CLIbuf,UART_Ctrl_Max,&hexabot_walk);
  40771c:	485e      	ldr	r0, [pc, #376]	; (407898 <CLItask+0x204>)
  40771e:	4b6e      	ldr	r3, [pc, #440]	; (4078d8 <CLItask+0x244>)
  407720:	6819      	ldr	r1, [r3, #0]
  407722:	4a6e      	ldr	r2, [pc, #440]	; (4078dc <CLItask+0x248>)
  407724:	4b6e      	ldr	r3, [pc, #440]	; (4078e0 <CLItask+0x24c>)
  407726:	4798      	blx	r3
  407728:	e2bc      	b.n	407ca4 <CLItask+0x610>
			}
			else { 
			if(!strcmp(BaseCmd,"led")) cmdLED( atoi(strtok(NULL," "))  , atoi(strtok(NULL," ")) );
  40772a:	496e      	ldr	r1, [pc, #440]	; (4078e4 <CLItask+0x250>)
  40772c:	4b6e      	ldr	r3, [pc, #440]	; (4078e8 <CLItask+0x254>)
  40772e:	4798      	blx	r3
  407730:	b978      	cbnz	r0, 407752 <CLItask+0xbe>
  407732:	4e63      	ldr	r6, [pc, #396]	; (4078c0 <CLItask+0x22c>)
  407734:	4631      	mov	r1, r6
  407736:	4f63      	ldr	r7, [pc, #396]	; (4078c4 <CLItask+0x230>)
  407738:	47b8      	blx	r7
  40773a:	4c6c      	ldr	r4, [pc, #432]	; (4078ec <CLItask+0x258>)
  40773c:	47a0      	blx	r4
  40773e:	4682      	mov	sl, r0
  407740:	2000      	movs	r0, #0
  407742:	4631      	mov	r1, r6
  407744:	47b8      	blx	r7
  407746:	47a0      	blx	r4
  407748:	4601      	mov	r1, r0
  40774a:	4650      	mov	r0, sl
  40774c:	4b68      	ldr	r3, [pc, #416]	; (4078f0 <CLItask+0x25c>)
  40774e:	4798      	blx	r3
  407750:	e2a5      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"manusvo"))  cmdServoMan(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  407752:	4620      	mov	r0, r4
  407754:	4967      	ldr	r1, [pc, #412]	; (4078f4 <CLItask+0x260>)
  407756:	4b64      	ldr	r3, [pc, #400]	; (4078e8 <CLItask+0x254>)
  407758:	4798      	blx	r3
  40775a:	b9b0      	cbnz	r0, 40778a <CLItask+0xf6>
  40775c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4078c0 <CLItask+0x22c>
  407760:	4649      	mov	r1, r9
  407762:	4f58      	ldr	r7, [pc, #352]	; (4078c4 <CLItask+0x230>)
  407764:	47b8      	blx	r7
  407766:	4c61      	ldr	r4, [pc, #388]	; (4078ec <CLItask+0x258>)
  407768:	47a0      	blx	r4
  40776a:	4683      	mov	fp, r0
  40776c:	2000      	movs	r0, #0
  40776e:	4649      	mov	r1, r9
  407770:	47b8      	blx	r7
  407772:	47a0      	blx	r4
  407774:	4682      	mov	sl, r0
  407776:	2000      	movs	r0, #0
  407778:	4649      	mov	r1, r9
  40777a:	47b8      	blx	r7
  40777c:	47a0      	blx	r4
  40777e:	4602      	mov	r2, r0
  407780:	4658      	mov	r0, fp
  407782:	4651      	mov	r1, sl
  407784:	4b5c      	ldr	r3, [pc, #368]	; (4078f8 <CLItask+0x264>)
  407786:	4798      	blx	r3
  407788:	e289      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"batvolt\n")) cmdBatVolt();
  40778a:	4620      	mov	r0, r4
  40778c:	495b      	ldr	r1, [pc, #364]	; (4078fc <CLItask+0x268>)
  40778e:	4b56      	ldr	r3, [pc, #344]	; (4078e8 <CLItask+0x254>)
  407790:	4798      	blx	r3
  407792:	b910      	cbnz	r0, 40779a <CLItask+0x106>
  407794:	4b5a      	ldr	r3, [pc, #360]	; (407900 <CLItask+0x26c>)
  407796:	4798      	blx	r3
  407798:	e281      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"dumpimg")) dumpFrame( strtol(strtok(NULL," "),NULL,16));
  40779a:	4620      	mov	r0, r4
  40779c:	4959      	ldr	r1, [pc, #356]	; (407904 <CLItask+0x270>)
  40779e:	4b52      	ldr	r3, [pc, #328]	; (4078e8 <CLItask+0x254>)
  4077a0:	4798      	blx	r3
  4077a2:	b948      	cbnz	r0, 4077b8 <CLItask+0x124>
  4077a4:	4946      	ldr	r1, [pc, #280]	; (4078c0 <CLItask+0x22c>)
  4077a6:	4b47      	ldr	r3, [pc, #284]	; (4078c4 <CLItask+0x230>)
  4077a8:	4798      	blx	r3
  4077aa:	2100      	movs	r1, #0
  4077ac:	2210      	movs	r2, #16
  4077ae:	4b56      	ldr	r3, [pc, #344]	; (407908 <CLItask+0x274>)
  4077b0:	4798      	blx	r3
  4077b2:	4b56      	ldr	r3, [pc, #344]	; (40790c <CLItask+0x278>)
  4077b4:	4798      	blx	r3
  4077b6:	e272      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"walk")) cmdWalk(atoi(strtok(NULL," ")));
  4077b8:	4620      	mov	r0, r4
  4077ba:	4955      	ldr	r1, [pc, #340]	; (407910 <CLItask+0x27c>)
  4077bc:	4b4a      	ldr	r3, [pc, #296]	; (4078e8 <CLItask+0x254>)
  4077be:	4798      	blx	r3
  4077c0:	b938      	cbnz	r0, 4077d2 <CLItask+0x13e>
  4077c2:	493f      	ldr	r1, [pc, #252]	; (4078c0 <CLItask+0x22c>)
  4077c4:	4b3f      	ldr	r3, [pc, #252]	; (4078c4 <CLItask+0x230>)
  4077c6:	4798      	blx	r3
  4077c8:	4b48      	ldr	r3, [pc, #288]	; (4078ec <CLItask+0x258>)
  4077ca:	4798      	blx	r3
  4077cc:	4b51      	ldr	r3, [pc, #324]	; (407914 <CLItask+0x280>)
  4077ce:	4798      	blx	r3
  4077d0:	e265      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"walkcytime")) hexabot_walk.Hexabot_leg_cycle_t = atoi(strtok(NULL," "));
  4077d2:	4620      	mov	r0, r4
  4077d4:	4950      	ldr	r1, [pc, #320]	; (407918 <CLItask+0x284>)
  4077d6:	4b44      	ldr	r3, [pc, #272]	; (4078e8 <CLItask+0x254>)
  4077d8:	4798      	blx	r3
  4077da:	b938      	cbnz	r0, 4077ec <CLItask+0x158>
  4077dc:	4938      	ldr	r1, [pc, #224]	; (4078c0 <CLItask+0x22c>)
  4077de:	4b39      	ldr	r3, [pc, #228]	; (4078c4 <CLItask+0x230>)
  4077e0:	4798      	blx	r3
  4077e2:	4b42      	ldr	r3, [pc, #264]	; (4078ec <CLItask+0x258>)
  4077e4:	4798      	blx	r3
  4077e6:	4b3d      	ldr	r3, [pc, #244]	; (4078dc <CLItask+0x248>)
  4077e8:	6198      	str	r0, [r3, #24]
  4077ea:	e258      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"verbose")) VerboseMode = atoi(strtok(NULL," "));
  4077ec:	4620      	mov	r0, r4
  4077ee:	494b      	ldr	r1, [pc, #300]	; (40791c <CLItask+0x288>)
  4077f0:	4b3d      	ldr	r3, [pc, #244]	; (4078e8 <CLItask+0x254>)
  4077f2:	4798      	blx	r3
  4077f4:	b938      	cbnz	r0, 407806 <CLItask+0x172>
  4077f6:	4932      	ldr	r1, [pc, #200]	; (4078c0 <CLItask+0x22c>)
  4077f8:	4b32      	ldr	r3, [pc, #200]	; (4078c4 <CLItask+0x230>)
  4077fa:	4798      	blx	r3
  4077fc:	4b3b      	ldr	r3, [pc, #236]	; (4078ec <CLItask+0x258>)
  4077fe:	4798      	blx	r3
  407800:	4b47      	ldr	r3, [pc, #284]	; (407920 <CLItask+0x28c>)
  407802:	6018      	str	r0, [r3, #0]
  407804:	e24b      	b.n	407c9e <CLItask+0x60a>
			
			
			//DWM THINGS
			else if(!strcmp(BaseCmd,"DWM-test\n")) cmdTestDW1000();
  407806:	4620      	mov	r0, r4
  407808:	4946      	ldr	r1, [pc, #280]	; (407924 <CLItask+0x290>)
  40780a:	4b37      	ldr	r3, [pc, #220]	; (4078e8 <CLItask+0x254>)
  40780c:	4798      	blx	r3
  40780e:	b910      	cbnz	r0, 407816 <CLItask+0x182>
  407810:	4b45      	ldr	r3, [pc, #276]	; (407928 <CLItask+0x294>)
  407812:	4798      	blx	r3
  407814:	e243      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-send")) cmdDWMsend(strtok(NULL," "));
  407816:	4620      	mov	r0, r4
  407818:	4944      	ldr	r1, [pc, #272]	; (40792c <CLItask+0x298>)
  40781a:	4b33      	ldr	r3, [pc, #204]	; (4078e8 <CLItask+0x254>)
  40781c:	4798      	blx	r3
  40781e:	b928      	cbnz	r0, 40782c <CLItask+0x198>
  407820:	4927      	ldr	r1, [pc, #156]	; (4078c0 <CLItask+0x22c>)
  407822:	4b28      	ldr	r3, [pc, #160]	; (4078c4 <CLItask+0x230>)
  407824:	4798      	blx	r3
  407826:	4b42      	ldr	r3, [pc, #264]	; (407930 <CLItask+0x29c>)
  407828:	4798      	blx	r3
  40782a:	e238      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-orLed\n")) cmdOverrideLEDDWM1000();
  40782c:	4620      	mov	r0, r4
  40782e:	4941      	ldr	r1, [pc, #260]	; (407934 <CLItask+0x2a0>)
  407830:	4b2d      	ldr	r3, [pc, #180]	; (4078e8 <CLItask+0x254>)
  407832:	4798      	blx	r3
  407834:	b910      	cbnz	r0, 40783c <CLItask+0x1a8>
  407836:	4b40      	ldr	r3, [pc, #256]	; (407938 <CLItask+0x2a4>)
  407838:	4798      	blx	r3
  40783a:	e230      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-RWtest")) cmdWriteTestDW1000( strtol(strtok(NULL," "),NULL,16));
  40783c:	4620      	mov	r0, r4
  40783e:	493f      	ldr	r1, [pc, #252]	; (40793c <CLItask+0x2a8>)
  407840:	4b29      	ldr	r3, [pc, #164]	; (4078e8 <CLItask+0x254>)
  407842:	4798      	blx	r3
  407844:	b950      	cbnz	r0, 40785c <CLItask+0x1c8>
  407846:	491e      	ldr	r1, [pc, #120]	; (4078c0 <CLItask+0x22c>)
  407848:	4b1e      	ldr	r3, [pc, #120]	; (4078c4 <CLItask+0x230>)
  40784a:	4798      	blx	r3
  40784c:	2100      	movs	r1, #0
  40784e:	2210      	movs	r2, #16
  407850:	4b2d      	ldr	r3, [pc, #180]	; (407908 <CLItask+0x274>)
  407852:	4798      	blx	r3
  407854:	17c1      	asrs	r1, r0, #31
  407856:	4b3a      	ldr	r3, [pc, #232]	; (407940 <CLItask+0x2ac>)
  407858:	4798      	blx	r3
  40785a:	e220      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-Init\n")) DW1000_initialise();
  40785c:	4620      	mov	r0, r4
  40785e:	4939      	ldr	r1, [pc, #228]	; (407944 <CLItask+0x2b0>)
  407860:	4b21      	ldr	r3, [pc, #132]	; (4078e8 <CLItask+0x254>)
  407862:	4798      	blx	r3
  407864:	b910      	cbnz	r0, 40786c <CLItask+0x1d8>
  407866:	4b38      	ldr	r3, [pc, #224]	; (407948 <CLItask+0x2b4>)
  407868:	4798      	blx	r3
  40786a:	e218      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-LEDinit\n")) DW1000_toggleGPIO_MODE();
  40786c:	4620      	mov	r0, r4
  40786e:	4937      	ldr	r1, [pc, #220]	; (40794c <CLItask+0x2b8>)
  407870:	4b1d      	ldr	r3, [pc, #116]	; (4078e8 <CLItask+0x254>)
  407872:	4798      	blx	r3
  407874:	b910      	cbnz	r0, 40787c <CLItask+0x1e8>
  407876:	4b36      	ldr	r3, [pc, #216]	; (407950 <CLItask+0x2bc>)
  407878:	4798      	blx	r3
  40787a:	e210      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-RXEN\n")) cmdRXen();
  40787c:	4620      	mov	r0, r4
  40787e:	4935      	ldr	r1, [pc, #212]	; (407954 <CLItask+0x2c0>)
  407880:	4b19      	ldr	r3, [pc, #100]	; (4078e8 <CLItask+0x254>)
  407882:	4798      	blx	r3
  407884:	2800      	cmp	r0, #0
  407886:	d169      	bne.n	40795c <CLItask+0x2c8>
  407888:	4b33      	ldr	r3, [pc, #204]	; (407958 <CLItask+0x2c4>)
  40788a:	4798      	blx	r3
  40788c:	e207      	b.n	407c9e <CLItask+0x60a>
  40788e:	bf00      	nop
  407890:	004137a8 	.word	0x004137a8
  407894:	0040019d 	.word	0x0040019d
  407898:	2040c628 	.word	0x2040c628
  40789c:	0040baad 	.word	0x0040baad
  4078a0:	004137cc 	.word	0x004137cc
  4078a4:	0041380c 	.word	0x0041380c
  4078a8:	004130c0 	.word	0x004130c0
  4078ac:	00401125 	.word	0x00401125
  4078b0:	2040c4e0 	.word	0x2040c4e0
  4078b4:	00413824 	.word	0x00413824
  4078b8:	0040155d 	.word	0x0040155d
  4078bc:	2040c4b8 	.word	0x2040c4b8
  4078c0:	00413848 	.word	0x00413848
  4078c4:	0040ced1 	.word	0x0040ced1
  4078c8:	2040c4c0 	.word	0x2040c4c0
  4078cc:	2040c4cc 	.word	0x2040c4cc
  4078d0:	400e0e00 	.word	0x400e0e00
  4078d4:	004027cd 	.word	0x004027cd
  4078d8:	2040c4d0 	.word	0x2040c4d0
  4078dc:	2040c5f8 	.word	0x2040c5f8
  4078e0:	00406929 	.word	0x00406929
  4078e4:	0041384c 	.word	0x0041384c
  4078e8:	0040bbe9 	.word	0x0040bbe9
  4078ec:	0040b35d 	.word	0x0040b35d
  4078f0:	00406999 	.word	0x00406999
  4078f4:	00413850 	.word	0x00413850
  4078f8:	00406b3d 	.word	0x00406b3d
  4078fc:	00413858 	.word	0x00413858
  407900:	00406c35 	.word	0x00406c35
  407904:	00413864 	.word	0x00413864
  407908:	0040d061 	.word	0x0040d061
  40790c:	00405add 	.word	0x00405add
  407910:	0041386c 	.word	0x0041386c
  407914:	00406c71 	.word	0x00406c71
  407918:	00413874 	.word	0x00413874
  40791c:	00413880 	.word	0x00413880
  407920:	2040c4d4 	.word	0x2040c4d4
  407924:	00413888 	.word	0x00413888
  407928:	00406c85 	.word	0x00406c85
  40792c:	00413894 	.word	0x00413894
  407930:	00406d31 	.word	0x00406d31
  407934:	004138a0 	.word	0x004138a0
  407938:	00406dd9 	.word	0x00406dd9
  40793c:	004138ac 	.word	0x004138ac
  407940:	00406e1d 	.word	0x00406e1d
  407944:	004138b8 	.word	0x004138b8
  407948:	00403999 	.word	0x00403999
  40794c:	004138c4 	.word	0x004138c4
  407950:	00403b8d 	.word	0x00403b8d
  407954:	004138d4 	.word	0x004138d4
  407958:	00406d71 	.word	0x00406d71
			
			else if(!strcmp(BaseCmd,"DWM-ReadRX\n")) {
  40795c:	4620      	mov	r0, r4
  40795e:	4984      	ldr	r1, [pc, #528]	; (407b70 <CLItask+0x4dc>)
  407960:	4b84      	ldr	r3, [pc, #528]	; (407b74 <CLItask+0x4e0>)
  407962:	4798      	blx	r3
  407964:	b9b0      	cbnz	r0, 407994 <CLItask+0x300>
				
				int msgLen = cmdDWMreadRX(RXbuf);
  407966:	f8df a29c 	ldr.w	sl, [pc, #668]	; 407c04 <CLItask+0x570>
  40796a:	4650      	mov	r0, sl
  40796c:	4b82      	ldr	r3, [pc, #520]	; (407b78 <CLItask+0x4e4>)
  40796e:	4798      	blx	r3
  407970:	4602      	mov	r2, r0
				sprintf(buf,"Length: %d\n",msgLen);
  407972:	4c82      	ldr	r4, [pc, #520]	; (407b7c <CLItask+0x4e8>)
  407974:	4620      	mov	r0, r4
  407976:	4982      	ldr	r1, [pc, #520]	; (407b80 <CLItask+0x4ec>)
  407978:	f8df 928c 	ldr.w	r9, [pc, #652]	; 407c08 <CLItask+0x574>
  40797c:	47c8      	blx	r9
				sendDebugString(buf);
  40797e:	4620      	mov	r0, r4
  407980:	f8df 8288 	ldr.w	r8, [pc, #648]	; 407c0c <CLItask+0x578>
  407984:	47c0      	blx	r8
				sprintf(buf,"SomeData: %s\n",RXbuf);
  407986:	4620      	mov	r0, r4
  407988:	497e      	ldr	r1, [pc, #504]	; (407b84 <CLItask+0x4f0>)
  40798a:	4652      	mov	r2, sl
  40798c:	47c8      	blx	r9
				sendDebugString(buf);
  40798e:	4620      	mov	r0, r4
  407990:	47c0      	blx	r8
  407992:	e184      	b.n	407c9e <CLItask+0x60a>
			
			//END OF DWM THINGS
			
			
			
			else if(!strcmp(BaseCmd,"camdtsh")) cam_dif_tsh = atoi(strtok(NULL," "));
  407994:	4620      	mov	r0, r4
  407996:	497c      	ldr	r1, [pc, #496]	; (407b88 <CLItask+0x4f4>)
  407998:	4b76      	ldr	r3, [pc, #472]	; (407b74 <CLItask+0x4e0>)
  40799a:	4798      	blx	r3
  40799c:	b938      	cbnz	r0, 4079ae <CLItask+0x31a>
  40799e:	497b      	ldr	r1, [pc, #492]	; (407b8c <CLItask+0x4f8>)
  4079a0:	4b7b      	ldr	r3, [pc, #492]	; (407b90 <CLItask+0x4fc>)
  4079a2:	4798      	blx	r3
  4079a4:	4b7b      	ldr	r3, [pc, #492]	; (407b94 <CLItask+0x500>)
  4079a6:	4798      	blx	r3
  4079a8:	4b7b      	ldr	r3, [pc, #492]	; (407b98 <CLItask+0x504>)
  4079aa:	6018      	str	r0, [r3, #0]
  4079ac:	e177      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"memtest\n")) SdramCheck();
  4079ae:	4620      	mov	r0, r4
  4079b0:	497a      	ldr	r1, [pc, #488]	; (407b9c <CLItask+0x508>)
  4079b2:	4b70      	ldr	r3, [pc, #448]	; (407b74 <CLItask+0x4e0>)
  4079b4:	4798      	blx	r3
  4079b6:	b910      	cbnz	r0, 4079be <CLItask+0x32a>
  4079b8:	4b79      	ldr	r3, [pc, #484]	; (407ba0 <CLItask+0x50c>)
  4079ba:	4798      	blx	r3
  4079bc:	e16f      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"DWM-clrStatus\n")) DW1000_writeReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0xFFFFFFFF, SYS_STATUS_LEN);
  4079be:	4620      	mov	r0, r4
  4079c0:	4978      	ldr	r1, [pc, #480]	; (407ba4 <CLItask+0x510>)
  4079c2:	4b6c      	ldr	r3, [pc, #432]	; (407b74 <CLItask+0x4e0>)
  4079c4:	4798      	blx	r3
  4079c6:	b960      	cbnz	r0, 4079e2 <CLItask+0x34e>
  4079c8:	f04f 32ff 	mov.w	r2, #4294967295
  4079cc:	2300      	movs	r3, #0
  4079ce:	e9cd 2300 	strd	r2, r3, [sp]
  4079d2:	2305      	movs	r3, #5
  4079d4:	9302      	str	r3, [sp, #8]
  4079d6:	200f      	movs	r0, #15
  4079d8:	2100      	movs	r1, #0
  4079da:	460a      	mov	r2, r1
  4079dc:	4b72      	ldr	r3, [pc, #456]	; (407ba8 <CLItask+0x514>)
  4079de:	4798      	blx	r3
  4079e0:	e15d      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"svoCal\n")) calibServos(SvoCal);
  4079e2:	4620      	mov	r0, r4
  4079e4:	4971      	ldr	r1, [pc, #452]	; (407bac <CLItask+0x518>)
  4079e6:	4b63      	ldr	r3, [pc, #396]	; (407b74 <CLItask+0x4e0>)
  4079e8:	4798      	blx	r3
  4079ea:	b918      	cbnz	r0, 4079f4 <CLItask+0x360>
  4079ec:	4870      	ldr	r0, [pc, #448]	; (407bb0 <CLItask+0x51c>)
  4079ee:	4b71      	ldr	r3, [pc, #452]	; (407bb4 <CLItask+0x520>)
  4079f0:	4798      	blx	r3
  4079f2:	e154      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"svoCalSpec")) calibServoSpec(SvoCal,atoi(strtok(NULL," ")),atoi(strtok(NULL," ")));
  4079f4:	4620      	mov	r0, r4
  4079f6:	4970      	ldr	r1, [pc, #448]	; (407bb8 <CLItask+0x524>)
  4079f8:	4b5e      	ldr	r3, [pc, #376]	; (407b74 <CLItask+0x4e0>)
  4079fa:	4798      	blx	r3
  4079fc:	b990      	cbnz	r0, 407a24 <CLItask+0x390>
  4079fe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 407b8c <CLItask+0x4f8>
  407a02:	4649      	mov	r1, r9
  407a04:	f8df 8188 	ldr.w	r8, [pc, #392]	; 407b90 <CLItask+0x4fc>
  407a08:	47c0      	blx	r8
  407a0a:	4c62      	ldr	r4, [pc, #392]	; (407b94 <CLItask+0x500>)
  407a0c:	47a0      	blx	r4
  407a0e:	4682      	mov	sl, r0
  407a10:	2000      	movs	r0, #0
  407a12:	4649      	mov	r1, r9
  407a14:	47c0      	blx	r8
  407a16:	47a0      	blx	r4
  407a18:	4602      	mov	r2, r0
  407a1a:	4865      	ldr	r0, [pc, #404]	; (407bb0 <CLItask+0x51c>)
  407a1c:	4651      	mov	r1, sl
  407a1e:	4b67      	ldr	r3, [pc, #412]	; (407bbc <CLItask+0x528>)
  407a20:	4798      	blx	r3
  407a22:	e13c      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"surprise\n")) surprise();
  407a24:	4620      	mov	r0, r4
  407a26:	4966      	ldr	r1, [pc, #408]	; (407bc0 <CLItask+0x52c>)
  407a28:	4b52      	ldr	r3, [pc, #328]	; (407b74 <CLItask+0x4e0>)
  407a2a:	4798      	blx	r3
  407a2c:	b910      	cbnz	r0, 407a34 <CLItask+0x3a0>
  407a2e:	4b65      	ldr	r3, [pc, #404]	; (407bc4 <CLItask+0x530>)
  407a30:	4798      	blx	r3
  407a32:	e134      	b.n	407c9e <CLItask+0x60a>
			
			//walk patern settings
			else if(!strcmp(BaseCmd,"relaxSvo")) cmdRelaxSvo(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  407a34:	4620      	mov	r0, r4
  407a36:	4964      	ldr	r1, [pc, #400]	; (407bc8 <CLItask+0x534>)
  407a38:	4b4e      	ldr	r3, [pc, #312]	; (407b74 <CLItask+0x4e0>)
  407a3a:	4798      	blx	r3
  407a3c:	b988      	cbnz	r0, 407a62 <CLItask+0x3ce>
  407a3e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 407b8c <CLItask+0x4f8>
  407a42:	4649      	mov	r1, r9
  407a44:	f8df 8148 	ldr.w	r8, [pc, #328]	; 407b90 <CLItask+0x4fc>
  407a48:	47c0      	blx	r8
  407a4a:	4c52      	ldr	r4, [pc, #328]	; (407b94 <CLItask+0x500>)
  407a4c:	47a0      	blx	r4
  407a4e:	4682      	mov	sl, r0
  407a50:	2000      	movs	r0, #0
  407a52:	4649      	mov	r1, r9
  407a54:	47c0      	blx	r8
  407a56:	47a0      	blx	r4
  407a58:	4601      	mov	r1, r0
  407a5a:	4650      	mov	r0, sl
  407a5c:	4b5b      	ldr	r3, [pc, #364]	; (407bcc <CLItask+0x538>)
  407a5e:	4798      	blx	r3
  407a60:	e11d      	b.n	407c9e <CLItask+0x60a>
			
			else if(!strcmp(BaseCmd,"StandUp\n")) {
  407a62:	4620      	mov	r0, r4
  407a64:	495a      	ldr	r1, [pc, #360]	; (407bd0 <CLItask+0x53c>)
  407a66:	4b43      	ldr	r3, [pc, #268]	; (407b74 <CLItask+0x4e0>)
  407a68:	4798      	blx	r3
  407a6a:	b958      	cbnz	r0, 407a84 <CLItask+0x3f0>
				hexabot_walk.gaitIndex = 99;
  407a6c:	4b59      	ldr	r3, [pc, #356]	; (407bd4 <CLItask+0x540>)
  407a6e:	2263      	movs	r2, #99	; 0x63
  407a70:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  407a72:	2200      	movs	r2, #0
  407a74:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  407a76:	2164      	movs	r1, #100	; 0x64
  407a78:	6219      	str	r1, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  407a7a:	2101      	movs	r1, #1
  407a7c:	61d9      	str	r1, [r3, #28]
				resting = 0;
  407a7e:	4b56      	ldr	r3, [pc, #344]	; (407bd8 <CLItask+0x544>)
  407a80:	601a      	str	r2, [r3, #0]
  407a82:	e10c      	b.n	407c9e <CLItask+0x60a>
			}
			
			else if(!strcmp(BaseCmd,"SitDown\n")) {
  407a84:	4620      	mov	r0, r4
  407a86:	4955      	ldr	r1, [pc, #340]	; (407bdc <CLItask+0x548>)
  407a88:	4b3a      	ldr	r3, [pc, #232]	; (407b74 <CLItask+0x4e0>)
  407a8a:	4798      	blx	r3
  407a8c:	b958      	cbnz	r0, 407aa6 <CLItask+0x412>
				hexabot_walk.gaitIndex = 98;
  407a8e:	4b51      	ldr	r3, [pc, #324]	; (407bd4 <CLItask+0x540>)
  407a90:	2262      	movs	r2, #98	; 0x62
  407a92:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  407a94:	2200      	movs	r2, #0
  407a96:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  407a98:	2264      	movs	r2, #100	; 0x64
  407a9a:	621a      	str	r2, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  407a9c:	2201      	movs	r2, #1
  407a9e:	61da      	str	r2, [r3, #28]
				resting = 1;
  407aa0:	4b4d      	ldr	r3, [pc, #308]	; (407bd8 <CLItask+0x544>)
  407aa2:	601a      	str	r2, [r3, #0]
  407aa4:	e0fb      	b.n	407c9e <CLItask+0x60a>
				
			}
			
			else if(!strcmp(BaseCmd,"relaxAll\n")) cmdRelaxAll();
  407aa6:	4620      	mov	r0, r4
  407aa8:	494d      	ldr	r1, [pc, #308]	; (407be0 <CLItask+0x54c>)
  407aaa:	4b32      	ldr	r3, [pc, #200]	; (407b74 <CLItask+0x4e0>)
  407aac:	4798      	blx	r3
  407aae:	b910      	cbnz	r0, 407ab6 <CLItask+0x422>
  407ab0:	4b4c      	ldr	r3, [pc, #304]	; (407be4 <CLItask+0x550>)
  407ab2:	4798      	blx	r3
  407ab4:	e0f3      	b.n	407c9e <CLItask+0x60a>
			//walk patern settings
			
			else if(!strcmp(BaseCmd,"gaitTurn")){
  407ab6:	4620      	mov	r0, r4
  407ab8:	494b      	ldr	r1, [pc, #300]	; (407be8 <CLItask+0x554>)
  407aba:	4b2e      	ldr	r3, [pc, #184]	; (407b74 <CLItask+0x4e0>)
  407abc:	4798      	blx	r3
  407abe:	b950      	cbnz	r0, 407ad6 <CLItask+0x442>
				hexabot_walk.movTurn = atoff(strtok(NULL," "));
  407ac0:	4932      	ldr	r1, [pc, #200]	; (407b8c <CLItask+0x4f8>)
  407ac2:	4b33      	ldr	r3, [pc, #204]	; (407b90 <CLItask+0x4fc>)
  407ac4:	4798      	blx	r3
  407ac6:	4b49      	ldr	r3, [pc, #292]	; (407bec <CLItask+0x558>)
  407ac8:	4798      	blx	r3
  407aca:	4b42      	ldr	r3, [pc, #264]	; (407bd4 <CLItask+0x540>)
  407acc:	ed83 0a00 	vstr	s0, [r3]
				hexabot_walk.ret = 1;
  407ad0:	2201      	movs	r2, #1
  407ad2:	629a      	str	r2, [r3, #40]	; 0x28
  407ad4:	e0e3      	b.n	407c9e <CLItask+0x60a>
			}
			else if(!strcmp(BaseCmd,"gaitDir")){
  407ad6:	4620      	mov	r0, r4
  407ad8:	4945      	ldr	r1, [pc, #276]	; (407bf0 <CLItask+0x55c>)
  407ada:	4b26      	ldr	r3, [pc, #152]	; (407b74 <CLItask+0x4e0>)
  407adc:	4798      	blx	r3
  407ade:	b950      	cbnz	r0, 407af6 <CLItask+0x462>
				hexabot_walk.movDir = atoff(strtok(NULL," "));
  407ae0:	492a      	ldr	r1, [pc, #168]	; (407b8c <CLItask+0x4f8>)
  407ae2:	4b2b      	ldr	r3, [pc, #172]	; (407b90 <CLItask+0x4fc>)
  407ae4:	4798      	blx	r3
  407ae6:	4b41      	ldr	r3, [pc, #260]	; (407bec <CLItask+0x558>)
  407ae8:	4798      	blx	r3
  407aea:	4b3a      	ldr	r3, [pc, #232]	; (407bd4 <CLItask+0x540>)
  407aec:	ed83 0a01 	vstr	s0, [r3, #4]
				hexabot_walk.ret = 1;
  407af0:	2201      	movs	r2, #1
  407af2:	629a      	str	r2, [r3, #40]	; 0x28
  407af4:	e0d3      	b.n	407c9e <CLItask+0x60a>
			}
			else if(!strcmp(BaseCmd,"gaitStance")){
  407af6:	4620      	mov	r0, r4
  407af8:	493e      	ldr	r1, [pc, #248]	; (407bf4 <CLItask+0x560>)
  407afa:	4b1e      	ldr	r3, [pc, #120]	; (407b74 <CLItask+0x4e0>)
  407afc:	4798      	blx	r3
  407afe:	b948      	cbnz	r0, 407b14 <CLItask+0x480>
				hexabot_walk.stance = atoi(strtok(NULL," "));
  407b00:	4922      	ldr	r1, [pc, #136]	; (407b8c <CLItask+0x4f8>)
  407b02:	4b23      	ldr	r3, [pc, #140]	; (407b90 <CLItask+0x4fc>)
  407b04:	4798      	blx	r3
  407b06:	4b23      	ldr	r3, [pc, #140]	; (407b94 <CLItask+0x500>)
  407b08:	4798      	blx	r3
  407b0a:	4b32      	ldr	r3, [pc, #200]	; (407bd4 <CLItask+0x540>)
  407b0c:	6098      	str	r0, [r3, #8]
				hexabot_walk.ret = 1;
  407b0e:	2201      	movs	r2, #1
  407b10:	629a      	str	r2, [r3, #40]	; 0x28
  407b12:	e0c4      	b.n	407c9e <CLItask+0x60a>
			}
			else if(!strcmp(BaseCmd,"gaitHgt")){
  407b14:	4620      	mov	r0, r4
  407b16:	4938      	ldr	r1, [pc, #224]	; (407bf8 <CLItask+0x564>)
  407b18:	4b16      	ldr	r3, [pc, #88]	; (407b74 <CLItask+0x4e0>)
  407b1a:	4798      	blx	r3
  407b1c:	b948      	cbnz	r0, 407b32 <CLItask+0x49e>
				hexabot_walk.hgt = atoi(strtok(NULL," "));
  407b1e:	491b      	ldr	r1, [pc, #108]	; (407b8c <CLItask+0x4f8>)
  407b20:	4b1b      	ldr	r3, [pc, #108]	; (407b90 <CLItask+0x4fc>)
  407b22:	4798      	blx	r3
  407b24:	4b1b      	ldr	r3, [pc, #108]	; (407b94 <CLItask+0x500>)
  407b26:	4798      	blx	r3
  407b28:	4b2a      	ldr	r3, [pc, #168]	; (407bd4 <CLItask+0x540>)
  407b2a:	60d8      	str	r0, [r3, #12]
				hexabot_walk.ret = 1;
  407b2c:	2201      	movs	r2, #1
  407b2e:	629a      	str	r2, [r3, #40]	; 0x28
  407b30:	e0b5      	b.n	407c9e <CLItask+0x60a>
			}
			else if(!strcmp(BaseCmd,"gaitPup")){
  407b32:	4620      	mov	r0, r4
  407b34:	4931      	ldr	r1, [pc, #196]	; (407bfc <CLItask+0x568>)
  407b36:	4b0f      	ldr	r3, [pc, #60]	; (407b74 <CLItask+0x4e0>)
  407b38:	4798      	blx	r3
  407b3a:	b948      	cbnz	r0, 407b50 <CLItask+0x4bc>
				hexabot_walk.pup = atoi(strtok(NULL," "));
  407b3c:	4913      	ldr	r1, [pc, #76]	; (407b8c <CLItask+0x4f8>)
  407b3e:	4b14      	ldr	r3, [pc, #80]	; (407b90 <CLItask+0x4fc>)
  407b40:	4798      	blx	r3
  407b42:	4b14      	ldr	r3, [pc, #80]	; (407b94 <CLItask+0x500>)
  407b44:	4798      	blx	r3
  407b46:	4b23      	ldr	r3, [pc, #140]	; (407bd4 <CLItask+0x540>)
  407b48:	6118      	str	r0, [r3, #16]
				hexabot_walk.ret = 1;
  407b4a:	2201      	movs	r2, #1
  407b4c:	629a      	str	r2, [r3, #40]	; 0x28
  407b4e:	e0a6      	b.n	407c9e <CLItask+0x60a>
			}
			else if(!strcmp(BaseCmd,"gaitStride")){
  407b50:	4620      	mov	r0, r4
  407b52:	492b      	ldr	r1, [pc, #172]	; (407c00 <CLItask+0x56c>)
  407b54:	4b07      	ldr	r3, [pc, #28]	; (407b74 <CLItask+0x4e0>)
  407b56:	4798      	blx	r3
  407b58:	2800      	cmp	r0, #0
  407b5a:	d159      	bne.n	407c10 <CLItask+0x57c>
				hexabot_walk.stride = atoi(strtok(NULL," "));
  407b5c:	490b      	ldr	r1, [pc, #44]	; (407b8c <CLItask+0x4f8>)
  407b5e:	4b0c      	ldr	r3, [pc, #48]	; (407b90 <CLItask+0x4fc>)
  407b60:	4798      	blx	r3
  407b62:	4b0c      	ldr	r3, [pc, #48]	; (407b94 <CLItask+0x500>)
  407b64:	4798      	blx	r3
  407b66:	4b1b      	ldr	r3, [pc, #108]	; (407bd4 <CLItask+0x540>)
  407b68:	6158      	str	r0, [r3, #20]
				hexabot_walk.ret = 1;
  407b6a:	2201      	movs	r2, #1
  407b6c:	629a      	str	r2, [r3, #40]	; 0x28
  407b6e:	e096      	b.n	407c9e <CLItask+0x60a>
  407b70:	004138e0 	.word	0x004138e0
  407b74:	0040bbe9 	.word	0x0040bbe9
  407b78:	00406d99 	.word	0x00406d99
  407b7c:	2040ce5c 	.word	0x2040ce5c
  407b80:	004138ec 	.word	0x004138ec
  407b84:	004138f8 	.word	0x004138f8
  407b88:	00413908 	.word	0x00413908
  407b8c:	00413848 	.word	0x00413848
  407b90:	0040ced1 	.word	0x0040ced1
  407b94:	0040b35d 	.word	0x0040b35d
  407b98:	204000a8 	.word	0x204000a8
  407b9c:	00413910 	.word	0x00413910
  407ba0:	004050d9 	.word	0x004050d9
  407ba4:	0041391c 	.word	0x0041391c
  407ba8:	00403891 	.word	0x00403891
  407bac:	0041392c 	.word	0x0041392c
  407bb0:	20400018 	.word	0x20400018
  407bb4:	0040674d 	.word	0x0040674d
  407bb8:	00413934 	.word	0x00413934
  407bbc:	00406555 	.word	0x00406555
  407bc0:	00413940 	.word	0x00413940
  407bc4:	004068b1 	.word	0x004068b1
  407bc8:	0041394c 	.word	0x0041394c
  407bcc:	00406e69 	.word	0x00406e69
  407bd0:	00413958 	.word	0x00413958
  407bd4:	2040c5f8 	.word	0x2040c5f8
  407bd8:	2040c4bc 	.word	0x2040c4bc
  407bdc:	00413964 	.word	0x00413964
  407be0:	00413970 	.word	0x00413970
  407be4:	00406ec5 	.word	0x00406ec5
  407be8:	0041397c 	.word	0x0041397c
  407bec:	0040b355 	.word	0x0040b355
  407bf0:	00413988 	.word	0x00413988
  407bf4:	00413990 	.word	0x00413990
  407bf8:	0041399c 	.word	0x0041399c
  407bfc:	004139a4 	.word	0x004139a4
  407c00:	004139ac 	.word	0x004139ac
  407c04:	2040c68c 	.word	0x2040c68c
  407c08:	0040bb79 	.word	0x0040bb79
  407c0c:	0040019d 	.word	0x0040019d
			}
			else if(!strcmp(BaseCmd,"gaitStyle")){
  407c10:	4620      	mov	r0, r4
  407c12:	4927      	ldr	r1, [pc, #156]	; (407cb0 <CLItask+0x61c>)
  407c14:	4b27      	ldr	r3, [pc, #156]	; (407cb4 <CLItask+0x620>)
  407c16:	4798      	blx	r3
  407c18:	b948      	cbnz	r0, 407c2e <CLItask+0x59a>
				hexabot_walk.gaitIndex = atoi(strtok(NULL," "));
  407c1a:	4927      	ldr	r1, [pc, #156]	; (407cb8 <CLItask+0x624>)
  407c1c:	4b27      	ldr	r3, [pc, #156]	; (407cbc <CLItask+0x628>)
  407c1e:	4798      	blx	r3
  407c20:	4b27      	ldr	r3, [pc, #156]	; (407cc0 <CLItask+0x62c>)
  407c22:	4798      	blx	r3
  407c24:	4b27      	ldr	r3, [pc, #156]	; (407cc4 <CLItask+0x630>)
  407c26:	62d8      	str	r0, [r3, #44]	; 0x2c
				hexabot_walk.ret = 1;
  407c28:	2201      	movs	r2, #1
  407c2a:	629a      	str	r2, [r3, #40]	; 0x28
  407c2c:	e037      	b.n	407c9e <CLItask+0x60a>
			}
			
			else if(!strcmp(BaseCmd,"svoinhib")) {
  407c2e:	4620      	mov	r0, r4
  407c30:	4925      	ldr	r1, [pc, #148]	; (407cc8 <CLItask+0x634>)
  407c32:	4b20      	ldr	r3, [pc, #128]	; (407cb4 <CLItask+0x620>)
  407c34:	4798      	blx	r3
  407c36:	b988      	cbnz	r0, 407c5c <CLItask+0x5c8>
				if(atoi(strtok(NULL," "))) pio_set(PIOA,PIO_PA26);
  407c38:	491f      	ldr	r1, [pc, #124]	; (407cb8 <CLItask+0x624>)
  407c3a:	4b20      	ldr	r3, [pc, #128]	; (407cbc <CLItask+0x628>)
  407c3c:	4798      	blx	r3
  407c3e:	4b20      	ldr	r3, [pc, #128]	; (407cc0 <CLItask+0x62c>)
  407c40:	4798      	blx	r3
  407c42:	b128      	cbz	r0, 407c50 <CLItask+0x5bc>
  407c44:	4821      	ldr	r0, [pc, #132]	; (407ccc <CLItask+0x638>)
  407c46:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407c4a:	4b21      	ldr	r3, [pc, #132]	; (407cd0 <CLItask+0x63c>)
  407c4c:	4798      	blx	r3
  407c4e:	e026      	b.n	407c9e <CLItask+0x60a>
				else pio_clear(PIOA,PIO_PA26);
  407c50:	481e      	ldr	r0, [pc, #120]	; (407ccc <CLItask+0x638>)
  407c52:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407c56:	4b1f      	ldr	r3, [pc, #124]	; (407cd4 <CLItask+0x640>)
  407c58:	4798      	blx	r3
  407c5a:	e020      	b.n	407c9e <CLItask+0x60a>
			}
			
			//controller command
			else if(!strcmp(BaseCmd,"ctrlCmd")) {
  407c5c:	4620      	mov	r0, r4
  407c5e:	491e      	ldr	r1, [pc, #120]	; (407cd8 <CLItask+0x644>)
  407c60:	4b14      	ldr	r3, [pc, #80]	; (407cb4 <CLItask+0x620>)
  407c62:	4798      	blx	r3
  407c64:	b978      	cbnz	r0, 407c86 <CLItask+0x5f2>
				UART_Ctrl_EN = 1;
  407c66:	2201      	movs	r2, #1
  407c68:	4b1c      	ldr	r3, [pc, #112]	; (407cdc <CLItask+0x648>)
  407c6a:	601a      	str	r2, [r3, #0]
				UART_Ctrl_Max = atoi(strtok(NULL," "));
  407c6c:	4912      	ldr	r1, [pc, #72]	; (407cb8 <CLItask+0x624>)
  407c6e:	4b13      	ldr	r3, [pc, #76]	; (407cbc <CLItask+0x628>)
  407c70:	4798      	blx	r3
  407c72:	4b13      	ldr	r3, [pc, #76]	; (407cc0 <CLItask+0x62c>)
  407c74:	4798      	blx	r3
  407c76:	4b1a      	ldr	r3, [pc, #104]	; (407ce0 <CLItask+0x64c>)
  407c78:	6018      	str	r0, [r3, #0]
				pio_set(LED6);
  407c7a:	4814      	ldr	r0, [pc, #80]	; (407ccc <CLItask+0x638>)
  407c7c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407c80:	4b13      	ldr	r3, [pc, #76]	; (407cd0 <CLItask+0x63c>)
  407c82:	4798      	blx	r3
  407c84:	e00b      	b.n	407c9e <CLItask+0x60a>
			}
			
			else if(!strcmp(BaseCmd,"RESET\n")) rstc_start_software_reset(RSTC);
  407c86:	4620      	mov	r0, r4
  407c88:	4916      	ldr	r1, [pc, #88]	; (407ce4 <CLItask+0x650>)
  407c8a:	4b0a      	ldr	r3, [pc, #40]	; (407cb4 <CLItask+0x620>)
  407c8c:	4798      	blx	r3
  407c8e:	b918      	cbnz	r0, 407c98 <CLItask+0x604>
  407c90:	4815      	ldr	r0, [pc, #84]	; (407ce8 <CLItask+0x654>)
  407c92:	4b16      	ldr	r3, [pc, #88]	; (407cec <CLItask+0x658>)
  407c94:	4798      	blx	r3
  407c96:	e002      	b.n	407c9e <CLItask+0x60a>
			
			else sendDebugString("ERROR: Command not found\n");
  407c98:	4815      	ldr	r0, [pc, #84]	; (407cf0 <CLItask+0x65c>)
  407c9a:	4b16      	ldr	r3, [pc, #88]	; (407cf4 <CLItask+0x660>)
  407c9c:	4798      	blx	r3
			
			sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  407c9e:	4816      	ldr	r0, [pc, #88]	; (407cf8 <CLItask+0x664>)
  407ca0:	4b14      	ldr	r3, [pc, #80]	; (407cf4 <CLItask+0x660>)
  407ca2:	4798      	blx	r3
			}
			memset(CLIbuf,0,100);
  407ca4:	4815      	ldr	r0, [pc, #84]	; (407cfc <CLItask+0x668>)
  407ca6:	2100      	movs	r1, #0
  407ca8:	2264      	movs	r2, #100	; 0x64
  407caa:	4b15      	ldr	r3, [pc, #84]	; (407d00 <CLItask+0x66c>)
  407cac:	4798      	blx	r3
  407cae:	e50f      	b.n	4076d0 <CLItask+0x3c>
  407cb0:	004139b8 	.word	0x004139b8
  407cb4:	0040bbe9 	.word	0x0040bbe9
  407cb8:	00413848 	.word	0x00413848
  407cbc:	0040ced1 	.word	0x0040ced1
  407cc0:	0040b35d 	.word	0x0040b35d
  407cc4:	2040c5f8 	.word	0x2040c5f8
  407cc8:	004139c4 	.word	0x004139c4
  407ccc:	400e0e00 	.word	0x400e0e00
  407cd0:	004027c9 	.word	0x004027c9
  407cd4:	004027cd 	.word	0x004027cd
  407cd8:	004139d0 	.word	0x004139d0
  407cdc:	2040c4c0 	.word	0x2040c4c0
  407ce0:	2040c4d0 	.word	0x2040c4d0
  407ce4:	004139d8 	.word	0x004139d8
  407ce8:	400e1800 	.word	0x400e1800
  407cec:	00400929 	.word	0x00400929
  407cf0:	004139e0 	.word	0x004139e0
  407cf4:	0040019d 	.word	0x0040019d
  407cf8:	00413824 	.word	0x00413824
  407cfc:	2040c628 	.word	0x2040c628
  407d00:	0040baad 	.word	0x0040baad

00407d04 <main>:
//semaphores!
SemaphoreHandle_t ISIsem = NULL;
SemaphoreHandle_t UARTsem = NULL;

int main (void)
{
  407d04:	b570      	push	{r4, r5, r6, lr}
  407d06:	b084      	sub	sp, #16
		
	
	board_init();
  407d08:	4b22      	ldr	r3, [pc, #136]	; (407d94 <main+0x90>)
  407d0a:	4798      	blx	r3
	sendDebugString("BOARD INITIALIZATION - FINISHED\n");
  407d0c:	4822      	ldr	r0, [pc, #136]	; (407d98 <main+0x94>)
  407d0e:	4d23      	ldr	r5, [pc, #140]	; (407d9c <main+0x98>)
  407d10:	47a8      	blx	r5
	intl_frame = (uint16_t*)malloc(240*320*2); //assign
  407d12:	f44f 3016 	mov.w	r0, #153600	; 0x25800
  407d16:	4b22      	ldr	r3, [pc, #136]	; (407da0 <main+0x9c>)
  407d18:	4798      	blx	r3
  407d1a:	4b22      	ldr	r3, [pc, #136]	; (407da4 <main+0xa0>)
  407d1c:	6018      	str	r0, [r3, #0]
	//SvoCal = (float*)malloc(sizeof(float)*2*18);
	
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	
	sendDebugString("RTOS TASK INITIALIZATION - STARTED\n");
  407d1e:	4822      	ldr	r0, [pc, #136]	; (407da8 <main+0xa4>)
  407d20:	47a8      	blx	r5
	
	xTaskCreate(vTask1,"TASK1",400,NULL,10,NULL);
  407d22:	230a      	movs	r3, #10
  407d24:	9300      	str	r3, [sp, #0]
  407d26:	2400      	movs	r4, #0
  407d28:	9401      	str	r4, [sp, #4]
  407d2a:	9402      	str	r4, [sp, #8]
  407d2c:	9403      	str	r4, [sp, #12]
  407d2e:	481f      	ldr	r0, [pc, #124]	; (407dac <main+0xa8>)
  407d30:	491f      	ldr	r1, [pc, #124]	; (407db0 <main+0xac>)
  407d32:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407d36:	4623      	mov	r3, r4
  407d38:	4e1e      	ldr	r6, [pc, #120]	; (407db4 <main+0xb0>)
  407d3a:	47b0      	blx	r6
	xTaskCreate(LegControlTask,"LEGCTRLTASK",1600,NULL,4,NULL);
  407d3c:	2304      	movs	r3, #4
  407d3e:	9300      	str	r3, [sp, #0]
  407d40:	9401      	str	r4, [sp, #4]
  407d42:	9402      	str	r4, [sp, #8]
  407d44:	9403      	str	r4, [sp, #12]
  407d46:	481c      	ldr	r0, [pc, #112]	; (407db8 <main+0xb4>)
  407d48:	491c      	ldr	r1, [pc, #112]	; (407dbc <main+0xb8>)
  407d4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  407d4e:	4623      	mov	r3, r4
  407d50:	47b0      	blx	r6
	xTaskCreate(ImageProTask,"IMGTASK",400,NULL,3,NULL);
  407d52:	2303      	movs	r3, #3
  407d54:	9300      	str	r3, [sp, #0]
  407d56:	9401      	str	r4, [sp, #4]
  407d58:	9402      	str	r4, [sp, #8]
  407d5a:	9403      	str	r4, [sp, #12]
  407d5c:	4818      	ldr	r0, [pc, #96]	; (407dc0 <main+0xbc>)
  407d5e:	4919      	ldr	r1, [pc, #100]	; (407dc4 <main+0xc0>)
  407d60:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407d64:	4623      	mov	r3, r4
  407d66:	47b0      	blx	r6
	xTaskCreate(CLItask,"CLITASK",1600,NULL,5,NULL);
  407d68:	2305      	movs	r3, #5
  407d6a:	9300      	str	r3, [sp, #0]
  407d6c:	9401      	str	r4, [sp, #4]
  407d6e:	9402      	str	r4, [sp, #8]
  407d70:	9403      	str	r4, [sp, #12]
  407d72:	4815      	ldr	r0, [pc, #84]	; (407dc8 <main+0xc4>)
  407d74:	4915      	ldr	r1, [pc, #84]	; (407dcc <main+0xc8>)
  407d76:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  407d7a:	4623      	mov	r3, r4
  407d7c:	47b0      	blx	r6
	
	sendDebugString("RTOS TASK INITIALIZATION - FINISHED\n");
  407d7e:	4814      	ldr	r0, [pc, #80]	; (407dd0 <main+0xcc>)
  407d80:	47a8      	blx	r5
	
	sendDebugString("STARTING RTOS\n");
  407d82:	4814      	ldr	r0, [pc, #80]	; (407dd4 <main+0xd0>)
  407d84:	47a8      	blx	r5
	vTaskStartScheduler();
  407d86:	4b14      	ldr	r3, [pc, #80]	; (407dd8 <main+0xd4>)
  407d88:	4798      	blx	r3
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
  407d8a:	4814      	ldr	r0, [pc, #80]	; (407ddc <main+0xd8>)
  407d8c:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  407d8e:	4620      	mov	r0, r4
  407d90:	b004      	add	sp, #16
  407d92:	bd70      	pop	{r4, r5, r6, pc}
  407d94:	00402dad 	.word	0x00402dad
  407d98:	004139fc 	.word	0x004139fc
  407d9c:	0040019d 	.word	0x0040019d
  407da0:	0040b411 	.word	0x0040b411
  407da4:	2040cec0 	.word	0x2040cec0
  407da8:	00413a20 	.word	0x00413a20
  407dac:	00406f3d 	.word	0x00406f3d
  407db0:	00413a44 	.word	0x00413a44
  407db4:	00401829 	.word	0x00401829
  407db8:	004070c1 	.word	0x004070c1
  407dbc:	00413a4c 	.word	0x00413a4c
  407dc0:	004074c1 	.word	0x004074c1
  407dc4:	00413a58 	.word	0x00413a58
  407dc8:	00407695 	.word	0x00407695
  407dcc:	00413a60 	.word	0x00413a60
  407dd0:	00413a68 	.word	0x00413a68
  407dd4:	00413a90 	.word	0x00413a90
  407dd8:	00401a51 	.word	0x00401a51
  407ddc:	00413aa0 	.word	0x00413aa0

00407de0 <ISI_Handler>:
	   ######################################
			 	INTERUPT HANDLERS
	   ######################################
	   ###################################### */
	
void ISI_Handler(void) {
  407de0:	b508      	push	{r3, lr}
	uint32_t status,imr;
	status = ISI->ISI_SR;
  407de2:	4b09      	ldr	r3, [pc, #36]	; (407e08 <ISI_Handler+0x28>)
  407de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  407de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	//pio_set(LED3);
	isi_frames_done++;
  407de8:	4a08      	ldr	r2, [pc, #32]	; (407e0c <ISI_Handler+0x2c>)
  407dea:	6813      	ldr	r3, [r2, #0]
  407dec:	3301      	adds	r3, #1
  407dee:	6013      	str	r3, [r2, #0]
	if(isi_frames_done >= 1) {
  407df0:	2b00      	cmp	r3, #0
  407df2:	dd07      	ble.n	407e04 <ISI_Handler+0x24>
		xSemaphoreGiveFromISR(ISIsem,NULL);
  407df4:	4b06      	ldr	r3, [pc, #24]	; (407e10 <ISI_Handler+0x30>)
  407df6:	6818      	ldr	r0, [r3, #0]
  407df8:	2100      	movs	r1, #0
  407dfa:	4b06      	ldr	r3, [pc, #24]	; (407e14 <ISI_Handler+0x34>)
  407dfc:	4798      	blx	r3
		isi_frames_done = 0;
  407dfe:	2200      	movs	r2, #0
  407e00:	4b02      	ldr	r3, [pc, #8]	; (407e0c <ISI_Handler+0x2c>)
  407e02:	601a      	str	r2, [r3, #0]
  407e04:	bd08      	pop	{r3, pc}
  407e06:	bf00      	nop
  407e08:	4004c000 	.word	0x4004c000
  407e0c:	2040c4dc 	.word	0x2040c4dc
  407e10:	2040c4c4 	.word	0x2040c4c4
  407e14:	0040147d 	.word	0x0040147d

00407e18 <UART4_Handler>:
	}
}


void UART4_Handler(void) {
  407e18:	b500      	push	{lr}
  407e1a:	b083      	sub	sp, #12
	uint32_t imr = ISI->ISI_IMR;
  407e1c:	4b16      	ldr	r3, [pc, #88]	; (407e78 <UART4_Handler+0x60>)
  407e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	char temp;
	uart_read(UART4,&temp);
  407e20:	4816      	ldr	r0, [pc, #88]	; (407e7c <UART4_Handler+0x64>)
  407e22:	f10d 0107 	add.w	r1, sp, #7
  407e26:	4b16      	ldr	r3, [pc, #88]	; (407e80 <UART4_Handler+0x68>)
  407e28:	4798      	blx	r3
	CLIbuf[CLIbufIndex] = temp;
  407e2a:	4a16      	ldr	r2, [pc, #88]	; (407e84 <UART4_Handler+0x6c>)
  407e2c:	6813      	ldr	r3, [r2, #0]
  407e2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  407e32:	4915      	ldr	r1, [pc, #84]	; (407e88 <UART4_Handler+0x70>)
  407e34:	54c8      	strb	r0, [r1, r3]
	CLIbufIndex++;
  407e36:	3301      	adds	r3, #1
  407e38:	6013      	str	r3, [r2, #0]
	
	if(UART_Ctrl_EN) {
  407e3a:	4b14      	ldr	r3, [pc, #80]	; (407e8c <UART4_Handler+0x74>)
  407e3c:	681b      	ldr	r3, [r3, #0]
  407e3e:	b16b      	cbz	r3, 407e5c <UART4_Handler+0x44>
		UART_Ctrl_Cnt++;
  407e40:	4a13      	ldr	r2, [pc, #76]	; (407e90 <UART4_Handler+0x78>)
  407e42:	6813      	ldr	r3, [r2, #0]
  407e44:	3301      	adds	r3, #1
  407e46:	6013      	str	r3, [r2, #0]
		if(UART_Ctrl_Max <= UART_Ctrl_Cnt) {
  407e48:	4a12      	ldr	r2, [pc, #72]	; (407e94 <UART4_Handler+0x7c>)
  407e4a:	6812      	ldr	r2, [r2, #0]
  407e4c:	4293      	cmp	r3, r2
  407e4e:	db0f      	blt.n	407e70 <UART4_Handler+0x58>
			xSemaphoreGiveFromISR(UARTsem,NULL);
  407e50:	4b11      	ldr	r3, [pc, #68]	; (407e98 <UART4_Handler+0x80>)
  407e52:	6818      	ldr	r0, [r3, #0]
  407e54:	2100      	movs	r1, #0
  407e56:	4b11      	ldr	r3, [pc, #68]	; (407e9c <UART4_Handler+0x84>)
  407e58:	4798      	blx	r3
  407e5a:	e009      	b.n	407e70 <UART4_Handler+0x58>
		}
	}
	else {
	if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
  407e5c:	4b10      	ldr	r3, [pc, #64]	; (407ea0 <UART4_Handler+0x88>)
  407e5e:	b2db      	uxtb	r3, r3
  407e60:	f88d 3007 	strb.w	r3, [sp, #7]
  407e64:	b123      	cbz	r3, 407e70 <UART4_Handler+0x58>
  407e66:	4b0c      	ldr	r3, [pc, #48]	; (407e98 <UART4_Handler+0x80>)
  407e68:	6818      	ldr	r0, [r3, #0]
  407e6a:	2100      	movs	r1, #0
  407e6c:	4b0b      	ldr	r3, [pc, #44]	; (407e9c <UART4_Handler+0x84>)
  407e6e:	4798      	blx	r3
	}
}
  407e70:	b003      	add	sp, #12
  407e72:	f85d fb04 	ldr.w	pc, [sp], #4
  407e76:	bf00      	nop
  407e78:	4004c000 	.word	0x4004c000
  407e7c:	400e1e00 	.word	0x400e1e00
  407e80:	00402d99 	.word	0x00402d99
  407e84:	2040c4b8 	.word	0x2040c4b8
  407e88:	2040c628 	.word	0x2040c628
  407e8c:	2040c4c0 	.word	0x2040c4c0
  407e90:	2040c4cc 	.word	0x2040c4cc
  407e94:	2040c4d0 	.word	0x2040c4d0
  407e98:	2040c4e0 	.word	0x2040c4e0
  407e9c:	0040147d 	.word	0x0040147d
  407ea0:	004130c0 	.word	0x004130c0
  407ea4:	00000000 	.word	0x00000000

00407ea8 <cos>:
  407ea8:	ec51 0b10 	vmov	r0, r1, d0
  407eac:	4a26      	ldr	r2, [pc, #152]	; (407f48 <cos+0xa0>)
  407eae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407eb2:	4293      	cmp	r3, r2
  407eb4:	b500      	push	{lr}
  407eb6:	b085      	sub	sp, #20
  407eb8:	dd20      	ble.n	407efc <cos+0x54>
  407eba:	4a24      	ldr	r2, [pc, #144]	; (407f4c <cos+0xa4>)
  407ebc:	4293      	cmp	r3, r2
  407ebe:	dd09      	ble.n	407ed4 <cos+0x2c>
  407ec0:	ee10 2a10 	vmov	r2, s0
  407ec4:	460b      	mov	r3, r1
  407ec6:	f002 fd61 	bl	40a98c <__aeabi_dsub>
  407eca:	ec41 0b10 	vmov	d0, r0, r1
  407ece:	b005      	add	sp, #20
  407ed0:	f85d fb04 	ldr.w	pc, [sp], #4
  407ed4:	4668      	mov	r0, sp
  407ed6:	f001 f96b 	bl	4091b0 <__ieee754_rem_pio2>
  407eda:	f000 0003 	and.w	r0, r0, #3
  407ede:	2801      	cmp	r0, #1
  407ee0:	ed9d 0b00 	vldr	d0, [sp]
  407ee4:	ed9d 1b02 	vldr	d1, [sp, #8]
  407ee8:	d020      	beq.n	407f2c <cos+0x84>
  407eea:	2802      	cmp	r0, #2
  407eec:	d011      	beq.n	407f12 <cos+0x6a>
  407eee:	b300      	cbz	r0, 407f32 <cos+0x8a>
  407ef0:	2001      	movs	r0, #1
  407ef2:	f002 f981 	bl	40a1f8 <__kernel_sin>
  407ef6:	ec51 0b10 	vmov	r0, r1, d0
  407efa:	e7e6      	b.n	407eca <cos+0x22>
  407efc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 407f40 <cos+0x98>
  407f00:	f001 fc3a 	bl	409778 <__kernel_cos>
  407f04:	ec51 0b10 	vmov	r0, r1, d0
  407f08:	ec41 0b10 	vmov	d0, r0, r1
  407f0c:	b005      	add	sp, #20
  407f0e:	f85d fb04 	ldr.w	pc, [sp], #4
  407f12:	f001 fc31 	bl	409778 <__kernel_cos>
  407f16:	ee10 0a10 	vmov	r0, s0
  407f1a:	ec53 2b10 	vmov	r2, r3, d0
  407f1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  407f22:	ec41 0b10 	vmov	d0, r0, r1
  407f26:	b005      	add	sp, #20
  407f28:	f85d fb04 	ldr.w	pc, [sp], #4
  407f2c:	f002 f964 	bl	40a1f8 <__kernel_sin>
  407f30:	e7f1      	b.n	407f16 <cos+0x6e>
  407f32:	f001 fc21 	bl	409778 <__kernel_cos>
  407f36:	ec51 0b10 	vmov	r0, r1, d0
  407f3a:	e7c6      	b.n	407eca <cos+0x22>
  407f3c:	f3af 8000 	nop.w
	...
  407f48:	3fe921fb 	.word	0x3fe921fb
  407f4c:	7fefffff 	.word	0x7fefffff

00407f50 <sin>:
  407f50:	ec51 0b10 	vmov	r0, r1, d0
  407f54:	4a2c      	ldr	r2, [pc, #176]	; (408008 <sin+0xb8>)
  407f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407f5a:	4293      	cmp	r3, r2
  407f5c:	b500      	push	{lr}
  407f5e:	b085      	sub	sp, #20
  407f60:	dd27      	ble.n	407fb2 <sin+0x62>
  407f62:	4a2a      	ldr	r2, [pc, #168]	; (40800c <sin+0xbc>)
  407f64:	4293      	cmp	r3, r2
  407f66:	dd09      	ble.n	407f7c <sin+0x2c>
  407f68:	ee10 2a10 	vmov	r2, s0
  407f6c:	460b      	mov	r3, r1
  407f6e:	f002 fd0d 	bl	40a98c <__aeabi_dsub>
  407f72:	ec41 0b10 	vmov	d0, r0, r1
  407f76:	b005      	add	sp, #20
  407f78:	f85d fb04 	ldr.w	pc, [sp], #4
  407f7c:	4668      	mov	r0, sp
  407f7e:	f001 f917 	bl	4091b0 <__ieee754_rem_pio2>
  407f82:	f000 0003 	and.w	r0, r0, #3
  407f86:	2801      	cmp	r0, #1
  407f88:	d027      	beq.n	407fda <sin+0x8a>
  407f8a:	2802      	cmp	r0, #2
  407f8c:	d01d      	beq.n	407fca <sin+0x7a>
  407f8e:	b368      	cbz	r0, 407fec <sin+0x9c>
  407f90:	ed9d 0b00 	vldr	d0, [sp]
  407f94:	ed9d 1b02 	vldr	d1, [sp, #8]
  407f98:	f001 fbee 	bl	409778 <__kernel_cos>
  407f9c:	ee10 0a10 	vmov	r0, s0
  407fa0:	ec53 2b10 	vmov	r2, r3, d0
  407fa4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  407fa8:	ec41 0b10 	vmov	d0, r0, r1
  407fac:	b005      	add	sp, #20
  407fae:	f85d fb04 	ldr.w	pc, [sp], #4
  407fb2:	2000      	movs	r0, #0
  407fb4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 408000 <sin+0xb0>
  407fb8:	f002 f91e 	bl	40a1f8 <__kernel_sin>
  407fbc:	ec51 0b10 	vmov	r0, r1, d0
  407fc0:	ec41 0b10 	vmov	d0, r0, r1
  407fc4:	b005      	add	sp, #20
  407fc6:	f85d fb04 	ldr.w	pc, [sp], #4
  407fca:	ed9d 0b00 	vldr	d0, [sp]
  407fce:	ed9d 1b02 	vldr	d1, [sp, #8]
  407fd2:	2001      	movs	r0, #1
  407fd4:	f002 f910 	bl	40a1f8 <__kernel_sin>
  407fd8:	e7e0      	b.n	407f9c <sin+0x4c>
  407fda:	ed9d 0b00 	vldr	d0, [sp]
  407fde:	ed9d 1b02 	vldr	d1, [sp, #8]
  407fe2:	f001 fbc9 	bl	409778 <__kernel_cos>
  407fe6:	ec51 0b10 	vmov	r0, r1, d0
  407fea:	e7c2      	b.n	407f72 <sin+0x22>
  407fec:	2001      	movs	r0, #1
  407fee:	ed9d 0b00 	vldr	d0, [sp]
  407ff2:	ed9d 1b02 	vldr	d1, [sp, #8]
  407ff6:	f002 f8ff 	bl	40a1f8 <__kernel_sin>
  407ffa:	ec51 0b10 	vmov	r0, r1, d0
  407ffe:	e7b8      	b.n	407f72 <sin+0x22>
	...
  408008:	3fe921fb 	.word	0x3fe921fb
  40800c:	7fefffff 	.word	0x7fefffff

00408010 <lroundf>:
  408010:	b410      	push	{r4}
  408012:	b083      	sub	sp, #12
  408014:	ed8d 0a01 	vstr	s0, [sp, #4]
  408018:	9b01      	ldr	r3, [sp, #4]
  40801a:	f3c3 51c7 	ubfx	r1, r3, #23, #8
  40801e:	2b00      	cmp	r3, #0
  408020:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
  408024:	bfb4      	ite	lt
  408026:	f04f 30ff 	movlt.w	r0, #4294967295
  40802a:	2001      	movge	r0, #1
  40802c:	2a1e      	cmp	r2, #30
  40802e:	dc0f      	bgt.n	408050 <lroundf+0x40>
  408030:	2a00      	cmp	r2, #0
  408032:	db20      	blt.n	408076 <lroundf+0x66>
  408034:	f3c3 0316 	ubfx	r3, r3, #0, #23
  408038:	2a16      	cmp	r2, #22
  40803a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40803e:	dd11      	ble.n	408064 <lroundf+0x54>
  408040:	3996      	subs	r1, #150	; 0x96
  408042:	408b      	lsls	r3, r1
  408044:	fb00 f003 	mul.w	r0, r0, r3
  408048:	b003      	add	sp, #12
  40804a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40804e:	4770      	bx	lr
  408050:	eddd 7a01 	vldr	s15, [sp, #4]
  408054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  408058:	ee17 0a90 	vmov	r0, s15
  40805c:	b003      	add	sp, #12
  40805e:	f85d 4b04 	ldr.w	r4, [sp], #4
  408062:	4770      	bx	lr
  408064:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  408068:	f1c2 0417 	rsb	r4, r2, #23
  40806c:	fa41 f202 	asr.w	r2, r1, r2
  408070:	4413      	add	r3, r2
  408072:	40e3      	lsrs	r3, r4
  408074:	e7e6      	b.n	408044 <lroundf+0x34>
  408076:	3201      	adds	r2, #1
  408078:	bf18      	it	ne
  40807a:	2000      	movne	r0, #0
  40807c:	b003      	add	sp, #12
  40807e:	f85d 4b04 	ldr.w	r4, [sp], #4
  408082:	4770      	bx	lr

00408084 <acos>:
  408084:	b510      	push	{r4, lr}
  408086:	4c2c      	ldr	r4, [pc, #176]	; (408138 <acos+0xb4>)
  408088:	ed2d 8b04 	vpush	{d8-d9}
  40808c:	b08a      	sub	sp, #40	; 0x28
  40808e:	eeb0 9a40 	vmov.f32	s18, s0
  408092:	eef0 9a60 	vmov.f32	s19, s1
  408096:	f000 f98b 	bl	4083b0 <__ieee754_acos>
  40809a:	f994 3000 	ldrsb.w	r3, [r4]
  40809e:	eeb0 8a40 	vmov.f32	s16, s0
  4080a2:	eef0 8a60 	vmov.f32	s17, s1
  4080a6:	3301      	adds	r3, #1
  4080a8:	d006      	beq.n	4080b8 <acos+0x34>
  4080aa:	eeb0 0a49 	vmov.f32	s0, s18
  4080ae:	eef0 0a69 	vmov.f32	s1, s19
  4080b2:	f002 fba5 	bl	40a800 <__fpclassifyd>
  4080b6:	b938      	cbnz	r0, 4080c8 <acos+0x44>
  4080b8:	eeb0 0a48 	vmov.f32	s0, s16
  4080bc:	eef0 0a68 	vmov.f32	s1, s17
  4080c0:	b00a      	add	sp, #40	; 0x28
  4080c2:	ecbd 8b04 	vpop	{d8-d9}
  4080c6:	bd10      	pop	{r4, pc}
  4080c8:	eeb0 0a49 	vmov.f32	s0, s18
  4080cc:	eef0 0a69 	vmov.f32	s1, s19
  4080d0:	f002 fafe 	bl	40a6d0 <fabs>
  4080d4:	2200      	movs	r2, #0
  4080d6:	4b19      	ldr	r3, [pc, #100]	; (40813c <acos+0xb8>)
  4080d8:	ec51 0b10 	vmov	r0, r1, d0
  4080dc:	f003 f89a 	bl	40b214 <__aeabi_dcmpgt>
  4080e0:	2800      	cmp	r0, #0
  4080e2:	d0e9      	beq.n	4080b8 <acos+0x34>
  4080e4:	2300      	movs	r3, #0
  4080e6:	2101      	movs	r1, #1
  4080e8:	4a15      	ldr	r2, [pc, #84]	; (408140 <acos+0xbc>)
  4080ea:	4816      	ldr	r0, [pc, #88]	; (408144 <acos+0xc0>)
  4080ec:	9308      	str	r3, [sp, #32]
  4080ee:	e88d 0006 	stmia.w	sp, {r1, r2}
  4080f2:	ed8d 9b04 	vstr	d9, [sp, #16]
  4080f6:	ed8d 9b02 	vstr	d9, [sp, #8]
  4080fa:	f002 fba9 	bl	40a850 <nan>
  4080fe:	f994 3000 	ldrsb.w	r3, [r4]
  408102:	2b02      	cmp	r3, #2
  408104:	ed8d 0b06 	vstr	d0, [sp, #24]
  408108:	d00b      	beq.n	408122 <acos+0x9e>
  40810a:	4668      	mov	r0, sp
  40810c:	f002 fb9e 	bl	40a84c <matherr>
  408110:	b138      	cbz	r0, 408122 <acos+0x9e>
  408112:	9b08      	ldr	r3, [sp, #32]
  408114:	b953      	cbnz	r3, 40812c <acos+0xa8>
  408116:	ed9d 0b06 	vldr	d0, [sp, #24]
  40811a:	b00a      	add	sp, #40	; 0x28
  40811c:	ecbd 8b04 	vpop	{d8-d9}
  408120:	bd10      	pop	{r4, pc}
  408122:	f003 f91f 	bl	40b364 <__errno>
  408126:	2321      	movs	r3, #33	; 0x21
  408128:	6003      	str	r3, [r0, #0]
  40812a:	e7f2      	b.n	408112 <acos+0x8e>
  40812c:	f003 f91a 	bl	40b364 <__errno>
  408130:	9b08      	ldr	r3, [sp, #32]
  408132:	6003      	str	r3, [r0, #0]
  408134:	e7ef      	b.n	408116 <acos+0x92>
  408136:	bf00      	nop
  408138:	204000ac 	.word	0x204000ac
  40813c:	3ff00000 	.word	0x3ff00000
  408140:	00413adc 	.word	0x00413adc
  408144:	00413454 	.word	0x00413454

00408148 <asin>:
  408148:	b510      	push	{r4, lr}
  40814a:	4c2c      	ldr	r4, [pc, #176]	; (4081fc <asin+0xb4>)
  40814c:	ed2d 8b04 	vpush	{d8-d9}
  408150:	b08a      	sub	sp, #40	; 0x28
  408152:	eeb0 9a40 	vmov.f32	s18, s0
  408156:	eef0 9a60 	vmov.f32	s19, s1
  40815a:	f000 fba1 	bl	4088a0 <__ieee754_asin>
  40815e:	f994 3000 	ldrsb.w	r3, [r4]
  408162:	eeb0 8a40 	vmov.f32	s16, s0
  408166:	eef0 8a60 	vmov.f32	s17, s1
  40816a:	3301      	adds	r3, #1
  40816c:	d006      	beq.n	40817c <asin+0x34>
  40816e:	eeb0 0a49 	vmov.f32	s0, s18
  408172:	eef0 0a69 	vmov.f32	s1, s19
  408176:	f002 fb43 	bl	40a800 <__fpclassifyd>
  40817a:	b938      	cbnz	r0, 40818c <asin+0x44>
  40817c:	eeb0 0a48 	vmov.f32	s0, s16
  408180:	eef0 0a68 	vmov.f32	s1, s17
  408184:	b00a      	add	sp, #40	; 0x28
  408186:	ecbd 8b04 	vpop	{d8-d9}
  40818a:	bd10      	pop	{r4, pc}
  40818c:	eeb0 0a49 	vmov.f32	s0, s18
  408190:	eef0 0a69 	vmov.f32	s1, s19
  408194:	f002 fa9c 	bl	40a6d0 <fabs>
  408198:	2200      	movs	r2, #0
  40819a:	4b19      	ldr	r3, [pc, #100]	; (408200 <asin+0xb8>)
  40819c:	ec51 0b10 	vmov	r0, r1, d0
  4081a0:	f003 f838 	bl	40b214 <__aeabi_dcmpgt>
  4081a4:	2800      	cmp	r0, #0
  4081a6:	d0e9      	beq.n	40817c <asin+0x34>
  4081a8:	2300      	movs	r3, #0
  4081aa:	2101      	movs	r1, #1
  4081ac:	4a15      	ldr	r2, [pc, #84]	; (408204 <asin+0xbc>)
  4081ae:	4816      	ldr	r0, [pc, #88]	; (408208 <asin+0xc0>)
  4081b0:	9308      	str	r3, [sp, #32]
  4081b2:	e88d 0006 	stmia.w	sp, {r1, r2}
  4081b6:	ed8d 9b04 	vstr	d9, [sp, #16]
  4081ba:	ed8d 9b02 	vstr	d9, [sp, #8]
  4081be:	f002 fb47 	bl	40a850 <nan>
  4081c2:	f994 3000 	ldrsb.w	r3, [r4]
  4081c6:	2b02      	cmp	r3, #2
  4081c8:	ed8d 0b06 	vstr	d0, [sp, #24]
  4081cc:	d00b      	beq.n	4081e6 <asin+0x9e>
  4081ce:	4668      	mov	r0, sp
  4081d0:	f002 fb3c 	bl	40a84c <matherr>
  4081d4:	b138      	cbz	r0, 4081e6 <asin+0x9e>
  4081d6:	9b08      	ldr	r3, [sp, #32]
  4081d8:	b953      	cbnz	r3, 4081f0 <asin+0xa8>
  4081da:	ed9d 0b06 	vldr	d0, [sp, #24]
  4081de:	b00a      	add	sp, #40	; 0x28
  4081e0:	ecbd 8b04 	vpop	{d8-d9}
  4081e4:	bd10      	pop	{r4, pc}
  4081e6:	f003 f8bd 	bl	40b364 <__errno>
  4081ea:	2321      	movs	r3, #33	; 0x21
  4081ec:	6003      	str	r3, [r0, #0]
  4081ee:	e7f2      	b.n	4081d6 <asin+0x8e>
  4081f0:	f003 f8b8 	bl	40b364 <__errno>
  4081f4:	9b08      	ldr	r3, [sp, #32]
  4081f6:	6003      	str	r3, [r0, #0]
  4081f8:	e7ef      	b.n	4081da <asin+0x92>
  4081fa:	bf00      	nop
  4081fc:	204000ac 	.word	0x204000ac
  408200:	3ff00000 	.word	0x3ff00000
  408204:	00413ae4 	.word	0x00413ae4
  408208:	00413454 	.word	0x00413454

0040820c <atan2>:
  40820c:	f000 bd90 	b.w	408d30 <__ieee754_atan2>

00408210 <fmod>:
  408210:	b530      	push	{r4, r5, lr}
  408212:	4c33      	ldr	r4, [pc, #204]	; (4082e0 <fmod+0xd0>)
  408214:	ed2d 8b06 	vpush	{d8-d10}
  408218:	b08b      	sub	sp, #44	; 0x2c
  40821a:	eeb0 aa40 	vmov.f32	s20, s0
  40821e:	eef0 aa60 	vmov.f32	s21, s1
  408222:	eeb0 9a41 	vmov.f32	s18, s2
  408226:	eef0 9a61 	vmov.f32	s19, s3
  40822a:	f000 fe8d 	bl	408f48 <__ieee754_fmod>
  40822e:	f994 3000 	ldrsb.w	r3, [r4]
  408232:	eeb0 8a40 	vmov.f32	s16, s0
  408236:	eef0 8a60 	vmov.f32	s17, s1
  40823a:	3301      	adds	r3, #1
  40823c:	d006      	beq.n	40824c <fmod+0x3c>
  40823e:	eeb0 0a49 	vmov.f32	s0, s18
  408242:	eef0 0a69 	vmov.f32	s1, s19
  408246:	f002 fadb 	bl	40a800 <__fpclassifyd>
  40824a:	b938      	cbnz	r0, 40825c <fmod+0x4c>
  40824c:	eeb0 0a48 	vmov.f32	s0, s16
  408250:	eef0 0a68 	vmov.f32	s1, s17
  408254:	b00b      	add	sp, #44	; 0x2c
  408256:	ecbd 8b06 	vpop	{d8-d10}
  40825a:	bd30      	pop	{r4, r5, pc}
  40825c:	eeb0 0a4a 	vmov.f32	s0, s20
  408260:	eef0 0a6a 	vmov.f32	s1, s21
  408264:	f002 facc 	bl	40a800 <__fpclassifyd>
  408268:	2800      	cmp	r0, #0
  40826a:	d0ef      	beq.n	40824c <fmod+0x3c>
  40826c:	2200      	movs	r2, #0
  40826e:	2300      	movs	r3, #0
  408270:	f04f 0501 	mov.w	r5, #1
  408274:	ec51 0b19 	vmov	r0, r1, d9
  408278:	f002 ffa4 	bl	40b1c4 <__aeabi_dcmpeq>
  40827c:	b900      	cbnz	r0, 408280 <fmod+0x70>
  40827e:	4605      	mov	r5, r0
  408280:	f015 0fff 	tst.w	r5, #255	; 0xff
  408284:	d0e2      	beq.n	40824c <fmod+0x3c>
  408286:	2101      	movs	r1, #1
  408288:	4a16      	ldr	r2, [pc, #88]	; (4082e4 <fmod+0xd4>)
  40828a:	2300      	movs	r3, #0
  40828c:	7824      	ldrb	r4, [r4, #0]
  40828e:	e88d 0006 	stmia.w	sp, {r1, r2}
  408292:	9308      	str	r3, [sp, #32]
  408294:	ed8d ab02 	vstr	d10, [sp, #8]
  408298:	ed8d 9b04 	vstr	d9, [sp, #16]
  40829c:	b194      	cbz	r4, 4082c4 <fmod+0xb4>
  40829e:	2000      	movs	r0, #0
  4082a0:	2100      	movs	r1, #0
  4082a2:	4602      	mov	r2, r0
  4082a4:	460b      	mov	r3, r1
  4082a6:	f002 fe4f 	bl	40af48 <__aeabi_ddiv>
  4082aa:	2c02      	cmp	r4, #2
  4082ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4082b0:	d10a      	bne.n	4082c8 <fmod+0xb8>
  4082b2:	f003 f857 	bl	40b364 <__errno>
  4082b6:	2321      	movs	r3, #33	; 0x21
  4082b8:	6003      	str	r3, [r0, #0]
  4082ba:	9b08      	ldr	r3, [sp, #32]
  4082bc:	b953      	cbnz	r3, 4082d4 <fmod+0xc4>
  4082be:	ed9d 0b06 	vldr	d0, [sp, #24]
  4082c2:	e7c7      	b.n	408254 <fmod+0x44>
  4082c4:	ed8d ab06 	vstr	d10, [sp, #24]
  4082c8:	4668      	mov	r0, sp
  4082ca:	f002 fabf 	bl	40a84c <matherr>
  4082ce:	2800      	cmp	r0, #0
  4082d0:	d1f3      	bne.n	4082ba <fmod+0xaa>
  4082d2:	e7ee      	b.n	4082b2 <fmod+0xa2>
  4082d4:	f003 f846 	bl	40b364 <__errno>
  4082d8:	9b08      	ldr	r3, [sp, #32]
  4082da:	6003      	str	r3, [r0, #0]
  4082dc:	e7ef      	b.n	4082be <fmod+0xae>
  4082de:	bf00      	nop
  4082e0:	204000ac 	.word	0x204000ac
  4082e4:	00413aec 	.word	0x00413aec

004082e8 <sqrt>:
  4082e8:	b530      	push	{r4, r5, lr}
  4082ea:	4c2f      	ldr	r4, [pc, #188]	; (4083a8 <sqrt+0xc0>)
  4082ec:	ed2d 8b04 	vpush	{d8-d9}
  4082f0:	b08b      	sub	sp, #44	; 0x2c
  4082f2:	eeb0 9a40 	vmov.f32	s18, s0
  4082f6:	eef0 9a60 	vmov.f32	s19, s1
  4082fa:	f001 f97f 	bl	4095fc <__ieee754_sqrt>
  4082fe:	f994 3000 	ldrsb.w	r3, [r4]
  408302:	eeb0 8a40 	vmov.f32	s16, s0
  408306:	eef0 8a60 	vmov.f32	s17, s1
  40830a:	3301      	adds	r3, #1
  40830c:	d02f      	beq.n	40836e <sqrt+0x86>
  40830e:	eeb0 0a49 	vmov.f32	s0, s18
  408312:	eef0 0a69 	vmov.f32	s1, s19
  408316:	f002 fa73 	bl	40a800 <__fpclassifyd>
  40831a:	b340      	cbz	r0, 40836e <sqrt+0x86>
  40831c:	2200      	movs	r2, #0
  40831e:	2300      	movs	r3, #0
  408320:	f04f 0501 	mov.w	r5, #1
  408324:	ec51 0b19 	vmov	r0, r1, d9
  408328:	f002 ff56 	bl	40b1d8 <__aeabi_dcmplt>
  40832c:	b900      	cbnz	r0, 408330 <sqrt+0x48>
  40832e:	4605      	mov	r5, r0
  408330:	f015 0fff 	tst.w	r5, #255	; 0xff
  408334:	d01b      	beq.n	40836e <sqrt+0x86>
  408336:	2101      	movs	r1, #1
  408338:	4a1c      	ldr	r2, [pc, #112]	; (4083ac <sqrt+0xc4>)
  40833a:	2300      	movs	r3, #0
  40833c:	7824      	ldrb	r4, [r4, #0]
  40833e:	e88d 0006 	stmia.w	sp, {r1, r2}
  408342:	9308      	str	r3, [sp, #32]
  408344:	ed8d 9b04 	vstr	d9, [sp, #16]
  408348:	ed8d 9b02 	vstr	d9, [sp, #8]
  40834c:	b9bc      	cbnz	r4, 40837e <sqrt+0x96>
  40834e:	2200      	movs	r2, #0
  408350:	2300      	movs	r3, #0
  408352:	e9cd 2306 	strd	r2, r3, [sp, #24]
  408356:	4668      	mov	r0, sp
  408358:	f002 fa78 	bl	40a84c <matherr>
  40835c:	b1c8      	cbz	r0, 408392 <sqrt+0xaa>
  40835e:	9b08      	ldr	r3, [sp, #32]
  408360:	b9e3      	cbnz	r3, 40839c <sqrt+0xb4>
  408362:	ed9d 0b06 	vldr	d0, [sp, #24]
  408366:	b00b      	add	sp, #44	; 0x2c
  408368:	ecbd 8b04 	vpop	{d8-d9}
  40836c:	bd30      	pop	{r4, r5, pc}
  40836e:	eeb0 0a48 	vmov.f32	s0, s16
  408372:	eef0 0a68 	vmov.f32	s1, s17
  408376:	b00b      	add	sp, #44	; 0x2c
  408378:	ecbd 8b04 	vpop	{d8-d9}
  40837c:	bd30      	pop	{r4, r5, pc}
  40837e:	2000      	movs	r0, #0
  408380:	2100      	movs	r1, #0
  408382:	4602      	mov	r2, r0
  408384:	460b      	mov	r3, r1
  408386:	f002 fddf 	bl	40af48 <__aeabi_ddiv>
  40838a:	2c02      	cmp	r4, #2
  40838c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408390:	d1e1      	bne.n	408356 <sqrt+0x6e>
  408392:	f002 ffe7 	bl	40b364 <__errno>
  408396:	2321      	movs	r3, #33	; 0x21
  408398:	6003      	str	r3, [r0, #0]
  40839a:	e7e0      	b.n	40835e <sqrt+0x76>
  40839c:	f002 ffe2 	bl	40b364 <__errno>
  4083a0:	9b08      	ldr	r3, [sp, #32]
  4083a2:	6003      	str	r3, [r0, #0]
  4083a4:	e7dd      	b.n	408362 <sqrt+0x7a>
  4083a6:	bf00      	nop
  4083a8:	204000ac 	.word	0x204000ac
  4083ac:	00413af4 	.word	0x00413af4

004083b0 <__ieee754_acos>:
  4083b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083b4:	ec55 4b10 	vmov	r4, r5, d0
  4083b8:	49cf      	ldr	r1, [pc, #828]	; (4086f8 <__ieee754_acos+0x348>)
  4083ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  4083be:	428b      	cmp	r3, r1
  4083c0:	dd0c      	ble.n	4083dc <__ieee754_acos+0x2c>
  4083c2:	48ce      	ldr	r0, [pc, #824]	; (4086fc <__ieee754_acos+0x34c>)
  4083c4:	4418      	add	r0, r3
  4083c6:	4623      	mov	r3, r4
  4083c8:	4303      	orrs	r3, r0
  4083ca:	f040 80bf 	bne.w	40854c <__ieee754_acos+0x19c>
  4083ce:	2d00      	cmp	r5, #0
  4083d0:	f340 8153 	ble.w	40867a <__ieee754_acos+0x2ca>
  4083d4:	ed9f 0bac 	vldr	d0, [pc, #688]	; 408688 <__ieee754_acos+0x2d8>
  4083d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083dc:	49c8      	ldr	r1, [pc, #800]	; (408700 <__ieee754_acos+0x350>)
  4083de:	428b      	cmp	r3, r1
  4083e0:	f340 80ad 	ble.w	40853e <__ieee754_acos+0x18e>
  4083e4:	2d00      	cmp	r5, #0
  4083e6:	f2c0 8193 	blt.w	408710 <__ieee754_acos+0x360>
  4083ea:	ee10 2a10 	vmov	r2, s0
  4083ee:	462b      	mov	r3, r5
  4083f0:	2000      	movs	r0, #0
  4083f2:	49c4      	ldr	r1, [pc, #784]	; (408704 <__ieee754_acos+0x354>)
  4083f4:	f002 faca 	bl	40a98c <__aeabi_dsub>
  4083f8:	2200      	movs	r2, #0
  4083fa:	4bc3      	ldr	r3, [pc, #780]	; (408708 <__ieee754_acos+0x358>)
  4083fc:	2600      	movs	r6, #0
  4083fe:	f002 fc79 	bl	40acf4 <__aeabi_dmul>
  408402:	4604      	mov	r4, r0
  408404:	460d      	mov	r5, r1
  408406:	ec45 4b10 	vmov	d0, r4, r5
  40840a:	f001 f8f7 	bl	4095fc <__ieee754_sqrt>
  40840e:	4620      	mov	r0, r4
  408410:	4629      	mov	r1, r5
  408412:	a39f      	add	r3, pc, #636	; (adr r3, 408690 <__ieee754_acos+0x2e0>)
  408414:	e9d3 2300 	ldrd	r2, r3, [r3]
  408418:	ec59 8b10 	vmov	r8, r9, d0
  40841c:	f002 fc6a 	bl	40acf4 <__aeabi_dmul>
  408420:	a39d      	add	r3, pc, #628	; (adr r3, 408698 <__ieee754_acos+0x2e8>)
  408422:	e9d3 2300 	ldrd	r2, r3, [r3]
  408426:	f002 fab3 	bl	40a990 <__adddf3>
  40842a:	4622      	mov	r2, r4
  40842c:	462b      	mov	r3, r5
  40842e:	f002 fc61 	bl	40acf4 <__aeabi_dmul>
  408432:	a39b      	add	r3, pc, #620	; (adr r3, 4086a0 <__ieee754_acos+0x2f0>)
  408434:	e9d3 2300 	ldrd	r2, r3, [r3]
  408438:	f002 faa8 	bl	40a98c <__aeabi_dsub>
  40843c:	4622      	mov	r2, r4
  40843e:	462b      	mov	r3, r5
  408440:	f002 fc58 	bl	40acf4 <__aeabi_dmul>
  408444:	a398      	add	r3, pc, #608	; (adr r3, 4086a8 <__ieee754_acos+0x2f8>)
  408446:	e9d3 2300 	ldrd	r2, r3, [r3]
  40844a:	f002 faa1 	bl	40a990 <__adddf3>
  40844e:	4622      	mov	r2, r4
  408450:	462b      	mov	r3, r5
  408452:	f002 fc4f 	bl	40acf4 <__aeabi_dmul>
  408456:	a396      	add	r3, pc, #600	; (adr r3, 4086b0 <__ieee754_acos+0x300>)
  408458:	e9d3 2300 	ldrd	r2, r3, [r3]
  40845c:	f002 fa96 	bl	40a98c <__aeabi_dsub>
  408460:	4622      	mov	r2, r4
  408462:	462b      	mov	r3, r5
  408464:	f002 fc46 	bl	40acf4 <__aeabi_dmul>
  408468:	a393      	add	r3, pc, #588	; (adr r3, 4086b8 <__ieee754_acos+0x308>)
  40846a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40846e:	f002 fa8f 	bl	40a990 <__adddf3>
  408472:	4622      	mov	r2, r4
  408474:	462b      	mov	r3, r5
  408476:	f002 fc3d 	bl	40acf4 <__aeabi_dmul>
  40847a:	4682      	mov	sl, r0
  40847c:	468b      	mov	fp, r1
  40847e:	4620      	mov	r0, r4
  408480:	4629      	mov	r1, r5
  408482:	a38f      	add	r3, pc, #572	; (adr r3, 4086c0 <__ieee754_acos+0x310>)
  408484:	e9d3 2300 	ldrd	r2, r3, [r3]
  408488:	f002 fc34 	bl	40acf4 <__aeabi_dmul>
  40848c:	a38e      	add	r3, pc, #568	; (adr r3, 4086c8 <__ieee754_acos+0x318>)
  40848e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408492:	f002 fa7b 	bl	40a98c <__aeabi_dsub>
  408496:	4622      	mov	r2, r4
  408498:	462b      	mov	r3, r5
  40849a:	f002 fc2b 	bl	40acf4 <__aeabi_dmul>
  40849e:	a38c      	add	r3, pc, #560	; (adr r3, 4086d0 <__ieee754_acos+0x320>)
  4084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084a4:	f002 fa74 	bl	40a990 <__adddf3>
  4084a8:	4622      	mov	r2, r4
  4084aa:	462b      	mov	r3, r5
  4084ac:	f002 fc22 	bl	40acf4 <__aeabi_dmul>
  4084b0:	a389      	add	r3, pc, #548	; (adr r3, 4086d8 <__ieee754_acos+0x328>)
  4084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084b6:	f002 fa69 	bl	40a98c <__aeabi_dsub>
  4084ba:	4622      	mov	r2, r4
  4084bc:	462b      	mov	r3, r5
  4084be:	f002 fc19 	bl	40acf4 <__aeabi_dmul>
  4084c2:	2200      	movs	r2, #0
  4084c4:	4b8f      	ldr	r3, [pc, #572]	; (408704 <__ieee754_acos+0x354>)
  4084c6:	f002 fa63 	bl	40a990 <__adddf3>
  4084ca:	4602      	mov	r2, r0
  4084cc:	460b      	mov	r3, r1
  4084ce:	4650      	mov	r0, sl
  4084d0:	4659      	mov	r1, fp
  4084d2:	f002 fd39 	bl	40af48 <__aeabi_ddiv>
  4084d6:	4642      	mov	r2, r8
  4084d8:	464b      	mov	r3, r9
  4084da:	f002 fc0b 	bl	40acf4 <__aeabi_dmul>
  4084de:	4632      	mov	r2, r6
  4084e0:	4682      	mov	sl, r0
  4084e2:	468b      	mov	fp, r1
  4084e4:	464b      	mov	r3, r9
  4084e6:	4630      	mov	r0, r6
  4084e8:	4649      	mov	r1, r9
  4084ea:	f002 fc03 	bl	40acf4 <__aeabi_dmul>
  4084ee:	4602      	mov	r2, r0
  4084f0:	460b      	mov	r3, r1
  4084f2:	4620      	mov	r0, r4
  4084f4:	4629      	mov	r1, r5
  4084f6:	f002 fa49 	bl	40a98c <__aeabi_dsub>
  4084fa:	4604      	mov	r4, r0
  4084fc:	460d      	mov	r5, r1
  4084fe:	4632      	mov	r2, r6
  408500:	464b      	mov	r3, r9
  408502:	4640      	mov	r0, r8
  408504:	4649      	mov	r1, r9
  408506:	f002 fa43 	bl	40a990 <__adddf3>
  40850a:	4602      	mov	r2, r0
  40850c:	460b      	mov	r3, r1
  40850e:	4620      	mov	r0, r4
  408510:	4629      	mov	r1, r5
  408512:	f002 fd19 	bl	40af48 <__aeabi_ddiv>
  408516:	4602      	mov	r2, r0
  408518:	460b      	mov	r3, r1
  40851a:	4650      	mov	r0, sl
  40851c:	4659      	mov	r1, fp
  40851e:	f002 fa37 	bl	40a990 <__adddf3>
  408522:	4602      	mov	r2, r0
  408524:	460b      	mov	r3, r1
  408526:	4630      	mov	r0, r6
  408528:	4649      	mov	r1, r9
  40852a:	f002 fa31 	bl	40a990 <__adddf3>
  40852e:	4602      	mov	r2, r0
  408530:	460b      	mov	r3, r1
  408532:	f002 fa2d 	bl	40a990 <__adddf3>
  408536:	ec41 0b10 	vmov	d0, r0, r1
  40853a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40853e:	4a73      	ldr	r2, [pc, #460]	; (40870c <__ieee754_acos+0x35c>)
  408540:	4293      	cmp	r3, r2
  408542:	dc12      	bgt.n	40856a <__ieee754_acos+0x1ba>
  408544:	ed9f 0b66 	vldr	d0, [pc, #408]	; 4086e0 <__ieee754_acos+0x330>
  408548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40854c:	ee10 0a10 	vmov	r0, s0
  408550:	4622      	mov	r2, r4
  408552:	462b      	mov	r3, r5
  408554:	4629      	mov	r1, r5
  408556:	f002 fa19 	bl	40a98c <__aeabi_dsub>
  40855a:	4602      	mov	r2, r0
  40855c:	460b      	mov	r3, r1
  40855e:	f002 fcf3 	bl	40af48 <__aeabi_ddiv>
  408562:	ec41 0b10 	vmov	d0, r0, r1
  408566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40856a:	ee10 2a10 	vmov	r2, s0
  40856e:	ee10 0a10 	vmov	r0, s0
  408572:	462b      	mov	r3, r5
  408574:	4629      	mov	r1, r5
  408576:	f002 fbbd 	bl	40acf4 <__aeabi_dmul>
  40857a:	4606      	mov	r6, r0
  40857c:	460f      	mov	r7, r1
  40857e:	a344      	add	r3, pc, #272	; (adr r3, 408690 <__ieee754_acos+0x2e0>)
  408580:	e9d3 2300 	ldrd	r2, r3, [r3]
  408584:	f002 fbb6 	bl	40acf4 <__aeabi_dmul>
  408588:	a343      	add	r3, pc, #268	; (adr r3, 408698 <__ieee754_acos+0x2e8>)
  40858a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40858e:	f002 f9ff 	bl	40a990 <__adddf3>
  408592:	4632      	mov	r2, r6
  408594:	463b      	mov	r3, r7
  408596:	f002 fbad 	bl	40acf4 <__aeabi_dmul>
  40859a:	a341      	add	r3, pc, #260	; (adr r3, 4086a0 <__ieee754_acos+0x2f0>)
  40859c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085a0:	f002 f9f4 	bl	40a98c <__aeabi_dsub>
  4085a4:	4632      	mov	r2, r6
  4085a6:	463b      	mov	r3, r7
  4085a8:	f002 fba4 	bl	40acf4 <__aeabi_dmul>
  4085ac:	a33e      	add	r3, pc, #248	; (adr r3, 4086a8 <__ieee754_acos+0x2f8>)
  4085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085b2:	f002 f9ed 	bl	40a990 <__adddf3>
  4085b6:	4632      	mov	r2, r6
  4085b8:	463b      	mov	r3, r7
  4085ba:	f002 fb9b 	bl	40acf4 <__aeabi_dmul>
  4085be:	a33c      	add	r3, pc, #240	; (adr r3, 4086b0 <__ieee754_acos+0x300>)
  4085c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085c4:	f002 f9e2 	bl	40a98c <__aeabi_dsub>
  4085c8:	4632      	mov	r2, r6
  4085ca:	463b      	mov	r3, r7
  4085cc:	f002 fb92 	bl	40acf4 <__aeabi_dmul>
  4085d0:	a339      	add	r3, pc, #228	; (adr r3, 4086b8 <__ieee754_acos+0x308>)
  4085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085d6:	f002 f9db 	bl	40a990 <__adddf3>
  4085da:	4632      	mov	r2, r6
  4085dc:	463b      	mov	r3, r7
  4085de:	f002 fb89 	bl	40acf4 <__aeabi_dmul>
  4085e2:	4680      	mov	r8, r0
  4085e4:	4689      	mov	r9, r1
  4085e6:	4630      	mov	r0, r6
  4085e8:	4639      	mov	r1, r7
  4085ea:	a335      	add	r3, pc, #212	; (adr r3, 4086c0 <__ieee754_acos+0x310>)
  4085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085f0:	f002 fb80 	bl	40acf4 <__aeabi_dmul>
  4085f4:	a334      	add	r3, pc, #208	; (adr r3, 4086c8 <__ieee754_acos+0x318>)
  4085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085fa:	f002 f9c7 	bl	40a98c <__aeabi_dsub>
  4085fe:	4632      	mov	r2, r6
  408600:	463b      	mov	r3, r7
  408602:	f002 fb77 	bl	40acf4 <__aeabi_dmul>
  408606:	a332      	add	r3, pc, #200	; (adr r3, 4086d0 <__ieee754_acos+0x320>)
  408608:	e9d3 2300 	ldrd	r2, r3, [r3]
  40860c:	f002 f9c0 	bl	40a990 <__adddf3>
  408610:	4632      	mov	r2, r6
  408612:	463b      	mov	r3, r7
  408614:	f002 fb6e 	bl	40acf4 <__aeabi_dmul>
  408618:	a32f      	add	r3, pc, #188	; (adr r3, 4086d8 <__ieee754_acos+0x328>)
  40861a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40861e:	f002 f9b5 	bl	40a98c <__aeabi_dsub>
  408622:	4632      	mov	r2, r6
  408624:	463b      	mov	r3, r7
  408626:	f002 fb65 	bl	40acf4 <__aeabi_dmul>
  40862a:	2200      	movs	r2, #0
  40862c:	4b35      	ldr	r3, [pc, #212]	; (408704 <__ieee754_acos+0x354>)
  40862e:	f002 f9af 	bl	40a990 <__adddf3>
  408632:	4602      	mov	r2, r0
  408634:	460b      	mov	r3, r1
  408636:	4640      	mov	r0, r8
  408638:	4649      	mov	r1, r9
  40863a:	f002 fc85 	bl	40af48 <__aeabi_ddiv>
  40863e:	4602      	mov	r2, r0
  408640:	460b      	mov	r3, r1
  408642:	4620      	mov	r0, r4
  408644:	4629      	mov	r1, r5
  408646:	f002 fb55 	bl	40acf4 <__aeabi_dmul>
  40864a:	4602      	mov	r2, r0
  40864c:	460b      	mov	r3, r1
  40864e:	a126      	add	r1, pc, #152	; (adr r1, 4086e8 <__ieee754_acos+0x338>)
  408650:	e9d1 0100 	ldrd	r0, r1, [r1]
  408654:	f002 f99a 	bl	40a98c <__aeabi_dsub>
  408658:	4602      	mov	r2, r0
  40865a:	460b      	mov	r3, r1
  40865c:	4620      	mov	r0, r4
  40865e:	4629      	mov	r1, r5
  408660:	f002 f994 	bl	40a98c <__aeabi_dsub>
  408664:	4602      	mov	r2, r0
  408666:	460b      	mov	r3, r1
  408668:	a11d      	add	r1, pc, #116	; (adr r1, 4086e0 <__ieee754_acos+0x330>)
  40866a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40866e:	f002 f98d 	bl	40a98c <__aeabi_dsub>
  408672:	ec41 0b10 	vmov	d0, r0, r1
  408676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40867a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 4086f0 <__ieee754_acos+0x340>
  40867e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408682:	bf00      	nop
  408684:	f3af 8000 	nop.w
	...
  408690:	0dfdf709 	.word	0x0dfdf709
  408694:	3f023de1 	.word	0x3f023de1
  408698:	7501b288 	.word	0x7501b288
  40869c:	3f49efe0 	.word	0x3f49efe0
  4086a0:	b5688f3b 	.word	0xb5688f3b
  4086a4:	3fa48228 	.word	0x3fa48228
  4086a8:	0e884455 	.word	0x0e884455
  4086ac:	3fc9c155 	.word	0x3fc9c155
  4086b0:	03eb6f7d 	.word	0x03eb6f7d
  4086b4:	3fd4d612 	.word	0x3fd4d612
  4086b8:	55555555 	.word	0x55555555
  4086bc:	3fc55555 	.word	0x3fc55555
  4086c0:	b12e9282 	.word	0xb12e9282
  4086c4:	3fb3b8c5 	.word	0x3fb3b8c5
  4086c8:	1b8d0159 	.word	0x1b8d0159
  4086cc:	3fe6066c 	.word	0x3fe6066c
  4086d0:	9c598ac8 	.word	0x9c598ac8
  4086d4:	40002ae5 	.word	0x40002ae5
  4086d8:	1c8a2d4b 	.word	0x1c8a2d4b
  4086dc:	40033a27 	.word	0x40033a27
  4086e0:	54442d18 	.word	0x54442d18
  4086e4:	3ff921fb 	.word	0x3ff921fb
  4086e8:	33145c07 	.word	0x33145c07
  4086ec:	3c91a626 	.word	0x3c91a626
  4086f0:	54442d18 	.word	0x54442d18
  4086f4:	400921fb 	.word	0x400921fb
  4086f8:	3fefffff 	.word	0x3fefffff
  4086fc:	c0100000 	.word	0xc0100000
  408700:	3fdfffff 	.word	0x3fdfffff
  408704:	3ff00000 	.word	0x3ff00000
  408708:	3fe00000 	.word	0x3fe00000
  40870c:	3c600000 	.word	0x3c600000
  408710:	ee10 0a10 	vmov	r0, s0
  408714:	4629      	mov	r1, r5
  408716:	2200      	movs	r2, #0
  408718:	4b5f      	ldr	r3, [pc, #380]	; (408898 <__ieee754_acos+0x4e8>)
  40871a:	f002 f939 	bl	40a990 <__adddf3>
  40871e:	2200      	movs	r2, #0
  408720:	4b5e      	ldr	r3, [pc, #376]	; (40889c <__ieee754_acos+0x4ec>)
  408722:	f002 fae7 	bl	40acf4 <__aeabi_dmul>
  408726:	4604      	mov	r4, r0
  408728:	460d      	mov	r5, r1
  40872a:	a343      	add	r3, pc, #268	; (adr r3, 408838 <__ieee754_acos+0x488>)
  40872c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408730:	f002 fae0 	bl	40acf4 <__aeabi_dmul>
  408734:	a342      	add	r3, pc, #264	; (adr r3, 408840 <__ieee754_acos+0x490>)
  408736:	e9d3 2300 	ldrd	r2, r3, [r3]
  40873a:	f002 f929 	bl	40a990 <__adddf3>
  40873e:	4622      	mov	r2, r4
  408740:	462b      	mov	r3, r5
  408742:	f002 fad7 	bl	40acf4 <__aeabi_dmul>
  408746:	a340      	add	r3, pc, #256	; (adr r3, 408848 <__ieee754_acos+0x498>)
  408748:	e9d3 2300 	ldrd	r2, r3, [r3]
  40874c:	f002 f91e 	bl	40a98c <__aeabi_dsub>
  408750:	4622      	mov	r2, r4
  408752:	462b      	mov	r3, r5
  408754:	f002 face 	bl	40acf4 <__aeabi_dmul>
  408758:	a33d      	add	r3, pc, #244	; (adr r3, 408850 <__ieee754_acos+0x4a0>)
  40875a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40875e:	f002 f917 	bl	40a990 <__adddf3>
  408762:	4622      	mov	r2, r4
  408764:	462b      	mov	r3, r5
  408766:	f002 fac5 	bl	40acf4 <__aeabi_dmul>
  40876a:	a33b      	add	r3, pc, #236	; (adr r3, 408858 <__ieee754_acos+0x4a8>)
  40876c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408770:	f002 f90c 	bl	40a98c <__aeabi_dsub>
  408774:	4622      	mov	r2, r4
  408776:	462b      	mov	r3, r5
  408778:	f002 fabc 	bl	40acf4 <__aeabi_dmul>
  40877c:	a338      	add	r3, pc, #224	; (adr r3, 408860 <__ieee754_acos+0x4b0>)
  40877e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408782:	f002 f905 	bl	40a990 <__adddf3>
  408786:	4622      	mov	r2, r4
  408788:	462b      	mov	r3, r5
  40878a:	f002 fab3 	bl	40acf4 <__aeabi_dmul>
  40878e:	4680      	mov	r8, r0
  408790:	4689      	mov	r9, r1
  408792:	ec45 4b10 	vmov	d0, r4, r5
  408796:	f000 ff31 	bl	4095fc <__ieee754_sqrt>
  40879a:	4620      	mov	r0, r4
  40879c:	4629      	mov	r1, r5
  40879e:	a332      	add	r3, pc, #200	; (adr r3, 408868 <__ieee754_acos+0x4b8>)
  4087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087a4:	ec57 6b10 	vmov	r6, r7, d0
  4087a8:	f002 faa4 	bl	40acf4 <__aeabi_dmul>
  4087ac:	a330      	add	r3, pc, #192	; (adr r3, 408870 <__ieee754_acos+0x4c0>)
  4087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087b2:	f002 f8eb 	bl	40a98c <__aeabi_dsub>
  4087b6:	4622      	mov	r2, r4
  4087b8:	462b      	mov	r3, r5
  4087ba:	f002 fa9b 	bl	40acf4 <__aeabi_dmul>
  4087be:	a32e      	add	r3, pc, #184	; (adr r3, 408878 <__ieee754_acos+0x4c8>)
  4087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087c4:	f002 f8e4 	bl	40a990 <__adddf3>
  4087c8:	4622      	mov	r2, r4
  4087ca:	462b      	mov	r3, r5
  4087cc:	f002 fa92 	bl	40acf4 <__aeabi_dmul>
  4087d0:	a32b      	add	r3, pc, #172	; (adr r3, 408880 <__ieee754_acos+0x4d0>)
  4087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087d6:	f002 f8d9 	bl	40a98c <__aeabi_dsub>
  4087da:	4622      	mov	r2, r4
  4087dc:	462b      	mov	r3, r5
  4087de:	f002 fa89 	bl	40acf4 <__aeabi_dmul>
  4087e2:	2200      	movs	r2, #0
  4087e4:	4b2c      	ldr	r3, [pc, #176]	; (408898 <__ieee754_acos+0x4e8>)
  4087e6:	f002 f8d3 	bl	40a990 <__adddf3>
  4087ea:	4602      	mov	r2, r0
  4087ec:	460b      	mov	r3, r1
  4087ee:	4640      	mov	r0, r8
  4087f0:	4649      	mov	r1, r9
  4087f2:	f002 fba9 	bl	40af48 <__aeabi_ddiv>
  4087f6:	4632      	mov	r2, r6
  4087f8:	463b      	mov	r3, r7
  4087fa:	f002 fa7b 	bl	40acf4 <__aeabi_dmul>
  4087fe:	a322      	add	r3, pc, #136	; (adr r3, 408888 <__ieee754_acos+0x4d8>)
  408800:	e9d3 2300 	ldrd	r2, r3, [r3]
  408804:	f002 f8c2 	bl	40a98c <__aeabi_dsub>
  408808:	4602      	mov	r2, r0
  40880a:	460b      	mov	r3, r1
  40880c:	4630      	mov	r0, r6
  40880e:	4639      	mov	r1, r7
  408810:	f002 f8be 	bl	40a990 <__adddf3>
  408814:	4602      	mov	r2, r0
  408816:	460b      	mov	r3, r1
  408818:	f002 f8ba 	bl	40a990 <__adddf3>
  40881c:	4602      	mov	r2, r0
  40881e:	460b      	mov	r3, r1
  408820:	a11b      	add	r1, pc, #108	; (adr r1, 408890 <__ieee754_acos+0x4e0>)
  408822:	e9d1 0100 	ldrd	r0, r1, [r1]
  408826:	f002 f8b1 	bl	40a98c <__aeabi_dsub>
  40882a:	ec41 0b10 	vmov	d0, r0, r1
  40882e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408832:	bf00      	nop
  408834:	f3af 8000 	nop.w
  408838:	0dfdf709 	.word	0x0dfdf709
  40883c:	3f023de1 	.word	0x3f023de1
  408840:	7501b288 	.word	0x7501b288
  408844:	3f49efe0 	.word	0x3f49efe0
  408848:	b5688f3b 	.word	0xb5688f3b
  40884c:	3fa48228 	.word	0x3fa48228
  408850:	0e884455 	.word	0x0e884455
  408854:	3fc9c155 	.word	0x3fc9c155
  408858:	03eb6f7d 	.word	0x03eb6f7d
  40885c:	3fd4d612 	.word	0x3fd4d612
  408860:	55555555 	.word	0x55555555
  408864:	3fc55555 	.word	0x3fc55555
  408868:	b12e9282 	.word	0xb12e9282
  40886c:	3fb3b8c5 	.word	0x3fb3b8c5
  408870:	1b8d0159 	.word	0x1b8d0159
  408874:	3fe6066c 	.word	0x3fe6066c
  408878:	9c598ac8 	.word	0x9c598ac8
  40887c:	40002ae5 	.word	0x40002ae5
  408880:	1c8a2d4b 	.word	0x1c8a2d4b
  408884:	40033a27 	.word	0x40033a27
  408888:	33145c07 	.word	0x33145c07
  40888c:	3c91a626 	.word	0x3c91a626
  408890:	54442d18 	.word	0x54442d18
  408894:	400921fb 	.word	0x400921fb
  408898:	3ff00000 	.word	0x3ff00000
  40889c:	3fe00000 	.word	0x3fe00000

004088a0 <__ieee754_asin>:
  4088a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4088a4:	ec55 4b10 	vmov	r4, r5, d0
  4088a8:	4bc7      	ldr	r3, [pc, #796]	; (408bc8 <__ieee754_asin+0x328>)
  4088aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
  4088ae:	b086      	sub	sp, #24
  4088b0:	46aa      	mov	sl, r5
  4088b2:	429e      	cmp	r6, r3
  4088b4:	dd15      	ble.n	4088e2 <__ieee754_asin+0x42>
  4088b6:	4ac5      	ldr	r2, [pc, #788]	; (408bcc <__ieee754_asin+0x32c>)
  4088b8:	ee10 3a10 	vmov	r3, s0
  4088bc:	ee10 0a10 	vmov	r0, s0
  4088c0:	4629      	mov	r1, r5
  4088c2:	4432      	add	r2, r6
  4088c4:	4313      	orrs	r3, r2
  4088c6:	d027      	beq.n	408918 <__ieee754_asin+0x78>
  4088c8:	4622      	mov	r2, r4
  4088ca:	462b      	mov	r3, r5
  4088cc:	f002 f85e 	bl	40a98c <__aeabi_dsub>
  4088d0:	4602      	mov	r2, r0
  4088d2:	460b      	mov	r3, r1
  4088d4:	f002 fb38 	bl	40af48 <__aeabi_ddiv>
  4088d8:	ec41 0b10 	vmov	d0, r0, r1
  4088dc:	b006      	add	sp, #24
  4088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4088e2:	4bbb      	ldr	r3, [pc, #748]	; (408bd0 <__ieee754_asin+0x330>)
  4088e4:	429e      	cmp	r6, r3
  4088e6:	dc30      	bgt.n	40894a <__ieee754_asin+0xaa>
  4088e8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4088ec:	ee10 0a10 	vmov	r0, s0
  4088f0:	4629      	mov	r1, r5
  4088f2:	f280 8175 	bge.w	408be0 <__ieee754_asin+0x340>
  4088f6:	a398      	add	r3, pc, #608	; (adr r3, 408b58 <__ieee754_asin+0x2b8>)
  4088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4088fc:	f002 f848 	bl	40a990 <__adddf3>
  408900:	2200      	movs	r2, #0
  408902:	4bb4      	ldr	r3, [pc, #720]	; (408bd4 <__ieee754_asin+0x334>)
  408904:	f002 fc86 	bl	40b214 <__aeabi_dcmpgt>
  408908:	b1f8      	cbz	r0, 40894a <__ieee754_asin+0xaa>
  40890a:	4620      	mov	r0, r4
  40890c:	4629      	mov	r1, r5
  40890e:	ec41 0b10 	vmov	d0, r0, r1
  408912:	b006      	add	sp, #24
  408914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408918:	a391      	add	r3, pc, #580	; (adr r3, 408b60 <__ieee754_asin+0x2c0>)
  40891a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40891e:	f002 f9e9 	bl	40acf4 <__aeabi_dmul>
  408922:	4606      	mov	r6, r0
  408924:	460f      	mov	r7, r1
  408926:	4620      	mov	r0, r4
  408928:	4629      	mov	r1, r5
  40892a:	a38f      	add	r3, pc, #572	; (adr r3, 408b68 <__ieee754_asin+0x2c8>)
  40892c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408930:	f002 f9e0 	bl	40acf4 <__aeabi_dmul>
  408934:	4602      	mov	r2, r0
  408936:	460b      	mov	r3, r1
  408938:	4630      	mov	r0, r6
  40893a:	4639      	mov	r1, r7
  40893c:	f002 f828 	bl	40a990 <__adddf3>
  408940:	ec41 0b10 	vmov	d0, r0, r1
  408944:	b006      	add	sp, #24
  408946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40894a:	ec45 4b10 	vmov	d0, r4, r5
  40894e:	f001 febf 	bl	40a6d0 <fabs>
  408952:	2000      	movs	r0, #0
  408954:	499f      	ldr	r1, [pc, #636]	; (408bd4 <__ieee754_asin+0x334>)
  408956:	ec53 2b10 	vmov	r2, r3, d0
  40895a:	f002 f817 	bl	40a98c <__aeabi_dsub>
  40895e:	2200      	movs	r2, #0
  408960:	4b9d      	ldr	r3, [pc, #628]	; (408bd8 <__ieee754_asin+0x338>)
  408962:	f002 f9c7 	bl	40acf4 <__aeabi_dmul>
  408966:	4604      	mov	r4, r0
  408968:	460d      	mov	r5, r1
  40896a:	a381      	add	r3, pc, #516	; (adr r3, 408b70 <__ieee754_asin+0x2d0>)
  40896c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408970:	f002 f9c0 	bl	40acf4 <__aeabi_dmul>
  408974:	a380      	add	r3, pc, #512	; (adr r3, 408b78 <__ieee754_asin+0x2d8>)
  408976:	e9d3 2300 	ldrd	r2, r3, [r3]
  40897a:	f002 f809 	bl	40a990 <__adddf3>
  40897e:	4622      	mov	r2, r4
  408980:	462b      	mov	r3, r5
  408982:	f002 f9b7 	bl	40acf4 <__aeabi_dmul>
  408986:	a37e      	add	r3, pc, #504	; (adr r3, 408b80 <__ieee754_asin+0x2e0>)
  408988:	e9d3 2300 	ldrd	r2, r3, [r3]
  40898c:	f001 fffe 	bl	40a98c <__aeabi_dsub>
  408990:	4622      	mov	r2, r4
  408992:	462b      	mov	r3, r5
  408994:	f002 f9ae 	bl	40acf4 <__aeabi_dmul>
  408998:	a37b      	add	r3, pc, #492	; (adr r3, 408b88 <__ieee754_asin+0x2e8>)
  40899a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40899e:	f001 fff7 	bl	40a990 <__adddf3>
  4089a2:	4622      	mov	r2, r4
  4089a4:	462b      	mov	r3, r5
  4089a6:	f002 f9a5 	bl	40acf4 <__aeabi_dmul>
  4089aa:	a379      	add	r3, pc, #484	; (adr r3, 408b90 <__ieee754_asin+0x2f0>)
  4089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089b0:	f001 ffec 	bl	40a98c <__aeabi_dsub>
  4089b4:	4622      	mov	r2, r4
  4089b6:	462b      	mov	r3, r5
  4089b8:	f002 f99c 	bl	40acf4 <__aeabi_dmul>
  4089bc:	a376      	add	r3, pc, #472	; (adr r3, 408b98 <__ieee754_asin+0x2f8>)
  4089be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089c2:	f001 ffe5 	bl	40a990 <__adddf3>
  4089c6:	4622      	mov	r2, r4
  4089c8:	462b      	mov	r3, r5
  4089ca:	f002 f993 	bl	40acf4 <__aeabi_dmul>
  4089ce:	a374      	add	r3, pc, #464	; (adr r3, 408ba0 <__ieee754_asin+0x300>)
  4089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089d4:	e9cd 0100 	strd	r0, r1, [sp]
  4089d8:	4620      	mov	r0, r4
  4089da:	4629      	mov	r1, r5
  4089dc:	f002 f98a 	bl	40acf4 <__aeabi_dmul>
  4089e0:	a371      	add	r3, pc, #452	; (adr r3, 408ba8 <__ieee754_asin+0x308>)
  4089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089e6:	f001 ffd1 	bl	40a98c <__aeabi_dsub>
  4089ea:	4622      	mov	r2, r4
  4089ec:	462b      	mov	r3, r5
  4089ee:	f002 f981 	bl	40acf4 <__aeabi_dmul>
  4089f2:	a36f      	add	r3, pc, #444	; (adr r3, 408bb0 <__ieee754_asin+0x310>)
  4089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089f8:	f001 ffca 	bl	40a990 <__adddf3>
  4089fc:	4622      	mov	r2, r4
  4089fe:	462b      	mov	r3, r5
  408a00:	f002 f978 	bl	40acf4 <__aeabi_dmul>
  408a04:	a36c      	add	r3, pc, #432	; (adr r3, 408bb8 <__ieee754_asin+0x318>)
  408a06:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a0a:	f001 ffbf 	bl	40a98c <__aeabi_dsub>
  408a0e:	4622      	mov	r2, r4
  408a10:	462b      	mov	r3, r5
  408a12:	f002 f96f 	bl	40acf4 <__aeabi_dmul>
  408a16:	4b6f      	ldr	r3, [pc, #444]	; (408bd4 <__ieee754_asin+0x334>)
  408a18:	2200      	movs	r2, #0
  408a1a:	f001 ffb9 	bl	40a990 <__adddf3>
  408a1e:	ec45 4b10 	vmov	d0, r4, r5
  408a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408a26:	f000 fde9 	bl	4095fc <__ieee754_sqrt>
  408a2a:	4b6c      	ldr	r3, [pc, #432]	; (408bdc <__ieee754_asin+0x33c>)
  408a2c:	429e      	cmp	r6, r3
  408a2e:	ec59 8b10 	vmov	r8, r9, d0
  408a32:	dc6d      	bgt.n	408b10 <__ieee754_asin+0x270>
  408a34:	ee10 2a10 	vmov	r2, s0
  408a38:	ee10 0a10 	vmov	r0, s0
  408a3c:	464b      	mov	r3, r9
  408a3e:	4649      	mov	r1, r9
  408a40:	2600      	movs	r6, #0
  408a42:	f001 ffa5 	bl	40a990 <__adddf3>
  408a46:	464f      	mov	r7, r9
  408a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408a50:	e9dd 0100 	ldrd	r0, r1, [sp]
  408a54:	f002 fa78 	bl	40af48 <__aeabi_ddiv>
  408a58:	4602      	mov	r2, r0
  408a5a:	460b      	mov	r3, r1
  408a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408a60:	f002 f948 	bl	40acf4 <__aeabi_dmul>
  408a64:	4632      	mov	r2, r6
  408a66:	464b      	mov	r3, r9
  408a68:	e9cd 0100 	strd	r0, r1, [sp]
  408a6c:	4630      	mov	r0, r6
  408a6e:	4649      	mov	r1, r9
  408a70:	f002 f940 	bl	40acf4 <__aeabi_dmul>
  408a74:	4602      	mov	r2, r0
  408a76:	460b      	mov	r3, r1
  408a78:	4620      	mov	r0, r4
  408a7a:	4629      	mov	r1, r5
  408a7c:	f001 ff86 	bl	40a98c <__aeabi_dsub>
  408a80:	4604      	mov	r4, r0
  408a82:	460d      	mov	r5, r1
  408a84:	4632      	mov	r2, r6
  408a86:	464b      	mov	r3, r9
  408a88:	4640      	mov	r0, r8
  408a8a:	4649      	mov	r1, r9
  408a8c:	f001 ff80 	bl	40a990 <__adddf3>
  408a90:	4602      	mov	r2, r0
  408a92:	460b      	mov	r3, r1
  408a94:	4620      	mov	r0, r4
  408a96:	4629      	mov	r1, r5
  408a98:	f002 fa56 	bl	40af48 <__aeabi_ddiv>
  408a9c:	4602      	mov	r2, r0
  408a9e:	460b      	mov	r3, r1
  408aa0:	f001 ff76 	bl	40a990 <__adddf3>
  408aa4:	4602      	mov	r2, r0
  408aa6:	460b      	mov	r3, r1
  408aa8:	a12f      	add	r1, pc, #188	; (adr r1, 408b68 <__ieee754_asin+0x2c8>)
  408aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
  408aae:	f001 ff6d 	bl	40a98c <__aeabi_dsub>
  408ab2:	4602      	mov	r2, r0
  408ab4:	460b      	mov	r3, r1
  408ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
  408aba:	f001 ff67 	bl	40a98c <__aeabi_dsub>
  408abe:	4632      	mov	r2, r6
  408ac0:	4604      	mov	r4, r0
  408ac2:	460d      	mov	r5, r1
  408ac4:	463b      	mov	r3, r7
  408ac6:	4630      	mov	r0, r6
  408ac8:	4649      	mov	r1, r9
  408aca:	f001 ff61 	bl	40a990 <__adddf3>
  408ace:	4602      	mov	r2, r0
  408ad0:	460b      	mov	r3, r1
  408ad2:	a13b      	add	r1, pc, #236	; (adr r1, 408bc0 <__ieee754_asin+0x320>)
  408ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
  408ad8:	f001 ff58 	bl	40a98c <__aeabi_dsub>
  408adc:	4602      	mov	r2, r0
  408ade:	460b      	mov	r3, r1
  408ae0:	4620      	mov	r0, r4
  408ae2:	4629      	mov	r1, r5
  408ae4:	f001 ff52 	bl	40a98c <__aeabi_dsub>
  408ae8:	4602      	mov	r2, r0
  408aea:	460b      	mov	r3, r1
  408aec:	a134      	add	r1, pc, #208	; (adr r1, 408bc0 <__ieee754_asin+0x320>)
  408aee:	e9d1 0100 	ldrd	r0, r1, [r1]
  408af2:	f001 ff4b 	bl	40a98c <__aeabi_dsub>
  408af6:	4602      	mov	r2, r0
  408af8:	460b      	mov	r3, r1
  408afa:	f1ba 0f00 	cmp.w	sl, #0
  408afe:	f340 80e5 	ble.w	408ccc <__ieee754_asin+0x42c>
  408b02:	4610      	mov	r0, r2
  408b04:	4619      	mov	r1, r3
  408b06:	ec41 0b10 	vmov	d0, r0, r1
  408b0a:	b006      	add	sp, #24
  408b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408b14:	e9dd 0100 	ldrd	r0, r1, [sp]
  408b18:	f002 fa16 	bl	40af48 <__aeabi_ddiv>
  408b1c:	4602      	mov	r2, r0
  408b1e:	460b      	mov	r3, r1
  408b20:	4640      	mov	r0, r8
  408b22:	4649      	mov	r1, r9
  408b24:	f002 f8e6 	bl	40acf4 <__aeabi_dmul>
  408b28:	4642      	mov	r2, r8
  408b2a:	464b      	mov	r3, r9
  408b2c:	f001 ff30 	bl	40a990 <__adddf3>
  408b30:	4602      	mov	r2, r0
  408b32:	460b      	mov	r3, r1
  408b34:	f001 ff2c 	bl	40a990 <__adddf3>
  408b38:	a30b      	add	r3, pc, #44	; (adr r3, 408b68 <__ieee754_asin+0x2c8>)
  408b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b3e:	f001 ff25 	bl	40a98c <__aeabi_dsub>
  408b42:	4602      	mov	r2, r0
  408b44:	460b      	mov	r3, r1
  408b46:	a106      	add	r1, pc, #24	; (adr r1, 408b60 <__ieee754_asin+0x2c0>)
  408b48:	e9d1 0100 	ldrd	r0, r1, [r1]
  408b4c:	f001 ff1e 	bl	40a98c <__aeabi_dsub>
  408b50:	4602      	mov	r2, r0
  408b52:	460b      	mov	r3, r1
  408b54:	e7d1      	b.n	408afa <__ieee754_asin+0x25a>
  408b56:	bf00      	nop
  408b58:	8800759c 	.word	0x8800759c
  408b5c:	7e37e43c 	.word	0x7e37e43c
  408b60:	54442d18 	.word	0x54442d18
  408b64:	3ff921fb 	.word	0x3ff921fb
  408b68:	33145c07 	.word	0x33145c07
  408b6c:	3c91a626 	.word	0x3c91a626
  408b70:	0dfdf709 	.word	0x0dfdf709
  408b74:	3f023de1 	.word	0x3f023de1
  408b78:	7501b288 	.word	0x7501b288
  408b7c:	3f49efe0 	.word	0x3f49efe0
  408b80:	b5688f3b 	.word	0xb5688f3b
  408b84:	3fa48228 	.word	0x3fa48228
  408b88:	0e884455 	.word	0x0e884455
  408b8c:	3fc9c155 	.word	0x3fc9c155
  408b90:	03eb6f7d 	.word	0x03eb6f7d
  408b94:	3fd4d612 	.word	0x3fd4d612
  408b98:	55555555 	.word	0x55555555
  408b9c:	3fc55555 	.word	0x3fc55555
  408ba0:	b12e9282 	.word	0xb12e9282
  408ba4:	3fb3b8c5 	.word	0x3fb3b8c5
  408ba8:	1b8d0159 	.word	0x1b8d0159
  408bac:	3fe6066c 	.word	0x3fe6066c
  408bb0:	9c598ac8 	.word	0x9c598ac8
  408bb4:	40002ae5 	.word	0x40002ae5
  408bb8:	1c8a2d4b 	.word	0x1c8a2d4b
  408bbc:	40033a27 	.word	0x40033a27
  408bc0:	54442d18 	.word	0x54442d18
  408bc4:	3fe921fb 	.word	0x3fe921fb
  408bc8:	3fefffff 	.word	0x3fefffff
  408bcc:	c0100000 	.word	0xc0100000
  408bd0:	3fdfffff 	.word	0x3fdfffff
  408bd4:	3ff00000 	.word	0x3ff00000
  408bd8:	3fe00000 	.word	0x3fe00000
  408bdc:	3fef3332 	.word	0x3fef3332
  408be0:	ee10 2a10 	vmov	r2, s0
  408be4:	462b      	mov	r3, r5
  408be6:	f002 f885 	bl	40acf4 <__aeabi_dmul>
  408bea:	4606      	mov	r6, r0
  408bec:	460f      	mov	r7, r1
  408bee:	a33b      	add	r3, pc, #236	; (adr r3, 408cdc <__ieee754_asin+0x43c>)
  408bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408bf4:	f002 f87e 	bl	40acf4 <__aeabi_dmul>
  408bf8:	a33a      	add	r3, pc, #232	; (adr r3, 408ce4 <__ieee754_asin+0x444>)
  408bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  408bfe:	f001 fec7 	bl	40a990 <__adddf3>
  408c02:	4632      	mov	r2, r6
  408c04:	463b      	mov	r3, r7
  408c06:	f002 f875 	bl	40acf4 <__aeabi_dmul>
  408c0a:	a338      	add	r3, pc, #224	; (adr r3, 408cec <__ieee754_asin+0x44c>)
  408c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c10:	f001 febc 	bl	40a98c <__aeabi_dsub>
  408c14:	4632      	mov	r2, r6
  408c16:	463b      	mov	r3, r7
  408c18:	f002 f86c 	bl	40acf4 <__aeabi_dmul>
  408c1c:	a335      	add	r3, pc, #212	; (adr r3, 408cf4 <__ieee754_asin+0x454>)
  408c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c22:	f001 feb5 	bl	40a990 <__adddf3>
  408c26:	4632      	mov	r2, r6
  408c28:	463b      	mov	r3, r7
  408c2a:	f002 f863 	bl	40acf4 <__aeabi_dmul>
  408c2e:	a333      	add	r3, pc, #204	; (adr r3, 408cfc <__ieee754_asin+0x45c>)
  408c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c34:	f001 feaa 	bl	40a98c <__aeabi_dsub>
  408c38:	4632      	mov	r2, r6
  408c3a:	463b      	mov	r3, r7
  408c3c:	f002 f85a 	bl	40acf4 <__aeabi_dmul>
  408c40:	a330      	add	r3, pc, #192	; (adr r3, 408d04 <__ieee754_asin+0x464>)
  408c42:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c46:	f001 fea3 	bl	40a990 <__adddf3>
  408c4a:	4632      	mov	r2, r6
  408c4c:	463b      	mov	r3, r7
  408c4e:	f002 f851 	bl	40acf4 <__aeabi_dmul>
  408c52:	4680      	mov	r8, r0
  408c54:	4689      	mov	r9, r1
  408c56:	4630      	mov	r0, r6
  408c58:	4639      	mov	r1, r7
  408c5a:	a32c      	add	r3, pc, #176	; (adr r3, 408d0c <__ieee754_asin+0x46c>)
  408c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c60:	f002 f848 	bl	40acf4 <__aeabi_dmul>
  408c64:	a32b      	add	r3, pc, #172	; (adr r3, 408d14 <__ieee754_asin+0x474>)
  408c66:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c6a:	f001 fe8f 	bl	40a98c <__aeabi_dsub>
  408c6e:	4632      	mov	r2, r6
  408c70:	463b      	mov	r3, r7
  408c72:	f002 f83f 	bl	40acf4 <__aeabi_dmul>
  408c76:	a329      	add	r3, pc, #164	; (adr r3, 408d1c <__ieee754_asin+0x47c>)
  408c78:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c7c:	f001 fe88 	bl	40a990 <__adddf3>
  408c80:	4632      	mov	r2, r6
  408c82:	463b      	mov	r3, r7
  408c84:	f002 f836 	bl	40acf4 <__aeabi_dmul>
  408c88:	a326      	add	r3, pc, #152	; (adr r3, 408d24 <__ieee754_asin+0x484>)
  408c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c8e:	f001 fe7d 	bl	40a98c <__aeabi_dsub>
  408c92:	4632      	mov	r2, r6
  408c94:	463b      	mov	r3, r7
  408c96:	f002 f82d 	bl	40acf4 <__aeabi_dmul>
  408c9a:	2200      	movs	r2, #0
  408c9c:	4b0e      	ldr	r3, [pc, #56]	; (408cd8 <__ieee754_asin+0x438>)
  408c9e:	f001 fe77 	bl	40a990 <__adddf3>
  408ca2:	4602      	mov	r2, r0
  408ca4:	460b      	mov	r3, r1
  408ca6:	4640      	mov	r0, r8
  408ca8:	4649      	mov	r1, r9
  408caa:	f002 f94d 	bl	40af48 <__aeabi_ddiv>
  408cae:	4602      	mov	r2, r0
  408cb0:	460b      	mov	r3, r1
  408cb2:	4620      	mov	r0, r4
  408cb4:	4629      	mov	r1, r5
  408cb6:	f002 f81d 	bl	40acf4 <__aeabi_dmul>
  408cba:	4622      	mov	r2, r4
  408cbc:	462b      	mov	r3, r5
  408cbe:	f001 fe67 	bl	40a990 <__adddf3>
  408cc2:	ec41 0b10 	vmov	d0, r0, r1
  408cc6:	b006      	add	sp, #24
  408cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ccc:	4610      	mov	r0, r2
  408cce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  408cd2:	e601      	b.n	4088d8 <__ieee754_asin+0x38>
  408cd4:	f3af 8000 	nop.w
  408cd8:	3ff00000 	.word	0x3ff00000
  408cdc:	0dfdf709 	.word	0x0dfdf709
  408ce0:	3f023de1 	.word	0x3f023de1
  408ce4:	7501b288 	.word	0x7501b288
  408ce8:	3f49efe0 	.word	0x3f49efe0
  408cec:	b5688f3b 	.word	0xb5688f3b
  408cf0:	3fa48228 	.word	0x3fa48228
  408cf4:	0e884455 	.word	0x0e884455
  408cf8:	3fc9c155 	.word	0x3fc9c155
  408cfc:	03eb6f7d 	.word	0x03eb6f7d
  408d00:	3fd4d612 	.word	0x3fd4d612
  408d04:	55555555 	.word	0x55555555
  408d08:	3fc55555 	.word	0x3fc55555
  408d0c:	b12e9282 	.word	0xb12e9282
  408d10:	3fb3b8c5 	.word	0x3fb3b8c5
  408d14:	1b8d0159 	.word	0x1b8d0159
  408d18:	3fe6066c 	.word	0x3fe6066c
  408d1c:	9c598ac8 	.word	0x9c598ac8
  408d20:	40002ae5 	.word	0x40002ae5
  408d24:	1c8a2d4b 	.word	0x1c8a2d4b
  408d28:	40033a27 	.word	0x40033a27
  408d2c:	00000000 	.word	0x00000000

00408d30 <__ieee754_atan2>:
  408d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408d34:	ec57 6b11 	vmov	r6, r7, d1
  408d38:	4273      	negs	r3, r6
  408d3a:	f027 4e00 	bic.w	lr, r7, #2147483648	; 0x80000000
  408d3e:	4880      	ldr	r0, [pc, #512]	; (408f40 <__ieee754_atan2+0x210>)
  408d40:	ee11 2a10 	vmov	r2, s2
  408d44:	4333      	orrs	r3, r6
  408d46:	4639      	mov	r1, r7
  408d48:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
  408d4c:	4283      	cmp	r3, r0
  408d4e:	ec55 4b10 	vmov	r4, r5, d0
  408d52:	d843      	bhi.n	408ddc <__ieee754_atan2+0xac>
  408d54:	4263      	negs	r3, r4
  408d56:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
  408d5a:	46a9      	mov	r9, r5
  408d5c:	4323      	orrs	r3, r4
  408d5e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
  408d62:	4283      	cmp	r3, r0
  408d64:	d83a      	bhi.n	408ddc <__ieee754_atan2+0xac>
  408d66:	4b77      	ldr	r3, [pc, #476]	; (408f44 <__ieee754_atan2+0x214>)
  408d68:	443b      	add	r3, r7
  408d6a:	4333      	orrs	r3, r6
  408d6c:	d052      	beq.n	408e14 <__ieee754_atan2+0xe4>
  408d6e:	ea4f 78a7 	mov.w	r8, r7, asr #30
  408d72:	ea5a 0304 	orrs.w	r3, sl, r4
  408d76:	f008 0802 	and.w	r8, r8, #2
  408d7a:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
  408d7e:	d037      	beq.n	408df0 <__ieee754_atan2+0xc0>
  408d80:	ea5e 0302 	orrs.w	r3, lr, r2
  408d84:	d03f      	beq.n	408e06 <__ieee754_atan2+0xd6>
  408d86:	4b6e      	ldr	r3, [pc, #440]	; (408f40 <__ieee754_atan2+0x210>)
  408d88:	459e      	cmp	lr, r3
  408d8a:	d051      	beq.n	408e30 <__ieee754_atan2+0x100>
  408d8c:	4b6c      	ldr	r3, [pc, #432]	; (408f40 <__ieee754_atan2+0x210>)
  408d8e:	459a      	cmp	sl, r3
  408d90:	d039      	beq.n	408e06 <__ieee754_atan2+0xd6>
  408d92:	ebce 0e0a 	rsb	lr, lr, sl
  408d96:	ea4f 5e2e 	mov.w	lr, lr, asr #20
  408d9a:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
  408d9e:	dc43      	bgt.n	408e28 <__ieee754_atan2+0xf8>
  408da0:	f11e 0f3c 	cmn.w	lr, #60	; 0x3c
  408da4:	da7a      	bge.n	408e9c <__ieee754_atan2+0x16c>
  408da6:	2900      	cmp	r1, #0
  408da8:	da78      	bge.n	408e9c <__ieee754_atan2+0x16c>
  408daa:	2000      	movs	r0, #0
  408dac:	2100      	movs	r1, #0
  408dae:	f1b8 0f01 	cmp.w	r8, #1
  408db2:	d06d      	beq.n	408e90 <__ieee754_atan2+0x160>
  408db4:	f1b8 0f02 	cmp.w	r8, #2
  408db8:	d05a      	beq.n	408e70 <__ieee754_atan2+0x140>
  408dba:	f1b8 0f00 	cmp.w	r8, #0
  408dbe:	d053      	beq.n	408e68 <__ieee754_atan2+0x138>
  408dc0:	a349      	add	r3, pc, #292	; (adr r3, 408ee8 <__ieee754_atan2+0x1b8>)
  408dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408dc6:	f001 fde1 	bl	40a98c <__aeabi_dsub>
  408dca:	a349      	add	r3, pc, #292	; (adr r3, 408ef0 <__ieee754_atan2+0x1c0>)
  408dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
  408dd0:	f001 fddc 	bl	40a98c <__aeabi_dsub>
  408dd4:	ec41 0b10 	vmov	d0, r0, r1
  408dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ddc:	4630      	mov	r0, r6
  408dde:	4639      	mov	r1, r7
  408de0:	4622      	mov	r2, r4
  408de2:	462b      	mov	r3, r5
  408de4:	f001 fdd4 	bl	40a990 <__adddf3>
  408de8:	ec41 0b10 	vmov	d0, r0, r1
  408dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408df0:	f1b8 0f03 	cmp.w	r8, #3
  408df4:	d8c4      	bhi.n	408d80 <__ieee754_atan2+0x50>
  408df6:	e8df f008 	tbb	[pc, r8]
  408dfa:	1515      	.short	0x1515
  408dfc:	1102      	.short	0x1102
  408dfe:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 408ef0 <__ieee754_atan2+0x1c0>
  408e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e06:	f1b9 0f00 	cmp.w	r9, #0
  408e0a:	db29      	blt.n	408e60 <__ieee754_atan2+0x130>
  408e0c:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 408ef8 <__ieee754_atan2+0x1c8>
  408e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e18:	f001 bab6 	b.w	40a388 <atan>
  408e1c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 408f00 <__ieee754_atan2+0x1d0>
  408e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e28:	a133      	add	r1, pc, #204	; (adr r1, 408ef8 <__ieee754_atan2+0x1c8>)
  408e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
  408e2e:	e7be      	b.n	408dae <__ieee754_atan2+0x7e>
  408e30:	45f2      	cmp	sl, lr
  408e32:	d042      	beq.n	408eba <__ieee754_atan2+0x18a>
  408e34:	f1b8 0f03 	cmp.w	r8, #3
  408e38:	d8a8      	bhi.n	408d8c <__ieee754_atan2+0x5c>
  408e3a:	a301      	add	r3, pc, #4	; (adr r3, 408e40 <__ieee754_atan2+0x110>)
  408e3c:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
  408e40:	00408e51 	.word	0x00408e51
  408e44:	00408e59 	.word	0x00408e59
  408e48:	00408dff 	.word	0x00408dff
  408e4c:	00408e1d 	.word	0x00408e1d
  408e50:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408f08 <__ieee754_atan2+0x1d8>
  408e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e58:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408f10 <__ieee754_atan2+0x1e0>
  408e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e60:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408f18 <__ieee754_atan2+0x1e8>
  408e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e68:	ec41 0b10 	vmov	d0, r0, r1
  408e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e70:	a31d      	add	r3, pc, #116	; (adr r3, 408ee8 <__ieee754_atan2+0x1b8>)
  408e72:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e76:	f001 fd89 	bl	40a98c <__aeabi_dsub>
  408e7a:	4602      	mov	r2, r0
  408e7c:	460b      	mov	r3, r1
  408e7e:	a11c      	add	r1, pc, #112	; (adr r1, 408ef0 <__ieee754_atan2+0x1c0>)
  408e80:	e9d1 0100 	ldrd	r0, r1, [r1]
  408e84:	f001 fd82 	bl	40a98c <__aeabi_dsub>
  408e88:	ec41 0b10 	vmov	d0, r0, r1
  408e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e90:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408e94:	ec41 0b10 	vmov	d0, r0, r1
  408e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408e9c:	4632      	mov	r2, r6
  408e9e:	463b      	mov	r3, r7
  408ea0:	4620      	mov	r0, r4
  408ea2:	4629      	mov	r1, r5
  408ea4:	f002 f850 	bl	40af48 <__aeabi_ddiv>
  408ea8:	ec41 0b10 	vmov	d0, r0, r1
  408eac:	f001 fc10 	bl	40a6d0 <fabs>
  408eb0:	f001 fa6a 	bl	40a388 <atan>
  408eb4:	ec51 0b10 	vmov	r0, r1, d0
  408eb8:	e779      	b.n	408dae <__ieee754_atan2+0x7e>
  408eba:	f1b8 0f03 	cmp.w	r8, #3
  408ebe:	d8a2      	bhi.n	408e06 <__ieee754_atan2+0xd6>
  408ec0:	e8df f008 	tbb	[pc, r8]
  408ec4:	060a0e02 	.word	0x060a0e02
  408ec8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408f20 <__ieee754_atan2+0x1f0>
  408ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ed0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408f28 <__ieee754_atan2+0x1f8>
  408ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ed8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408f30 <__ieee754_atan2+0x200>
  408edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ee0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408f38 <__ieee754_atan2+0x208>
  408ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ee8:	33145c07 	.word	0x33145c07
  408eec:	3ca1a626 	.word	0x3ca1a626
  408ef0:	54442d18 	.word	0x54442d18
  408ef4:	400921fb 	.word	0x400921fb
  408ef8:	54442d18 	.word	0x54442d18
  408efc:	3ff921fb 	.word	0x3ff921fb
  408f00:	54442d18 	.word	0x54442d18
  408f04:	c00921fb 	.word	0xc00921fb
	...
  408f14:	80000000 	.word	0x80000000
  408f18:	54442d18 	.word	0x54442d18
  408f1c:	bff921fb 	.word	0xbff921fb
  408f20:	54442d18 	.word	0x54442d18
  408f24:	3fe921fb 	.word	0x3fe921fb
  408f28:	7f3321d2 	.word	0x7f3321d2
  408f2c:	c002d97c 	.word	0xc002d97c
  408f30:	7f3321d2 	.word	0x7f3321d2
  408f34:	4002d97c 	.word	0x4002d97c
  408f38:	54442d18 	.word	0x54442d18
  408f3c:	bfe921fb 	.word	0xbfe921fb
  408f40:	7ff00000 	.word	0x7ff00000
  408f44:	c0100000 	.word	0xc0100000

00408f48 <__ieee754_fmod>:
  408f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f4c:	ec55 4b11 	vmov	r4, r5, d1
  408f50:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  408f54:	46ac      	mov	ip, r5
  408f56:	ee11 1a10 	vmov	r1, s2
  408f5a:	ea52 0004 	orrs.w	r0, r2, r4
  408f5e:	ec59 8b10 	vmov	r8, r9, d0
  408f62:	f009 4700 	and.w	r7, r9, #2147483648	; 0x80000000
  408f66:	ea87 0b09 	eor.w	fp, r7, r9
  408f6a:	d028      	beq.n	408fbe <__ieee754_fmod+0x76>
  408f6c:	4888      	ldr	r0, [pc, #544]	; (409190 <__ieee754_fmod+0x248>)
  408f6e:	4583      	cmp	fp, r0
  408f70:	dc25      	bgt.n	408fbe <__ieee754_fmod+0x76>
  408f72:	4260      	negs	r0, r4
  408f74:	f8df e230 	ldr.w	lr, [pc, #560]	; 4091a8 <__ieee754_fmod+0x260>
  408f78:	4320      	orrs	r0, r4
  408f7a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
  408f7e:	4570      	cmp	r0, lr
  408f80:	d81d      	bhi.n	408fbe <__ieee754_fmod+0x76>
  408f82:	4593      	cmp	fp, r2
  408f84:	ee10 aa10 	vmov	sl, s0
  408f88:	4643      	mov	r3, r8
  408f8a:	4626      	mov	r6, r4
  408f8c:	dc06      	bgt.n	408f9c <__ieee754_fmod+0x54>
  408f8e:	f2c0 80e9 	blt.w	409164 <__ieee754_fmod+0x21c>
  408f92:	45a0      	cmp	r8, r4
  408f94:	f0c0 80e6 	bcc.w	409164 <__ieee754_fmod+0x21c>
  408f98:	f000 80dc 	beq.w	409154 <__ieee754_fmod+0x20c>
  408f9c:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
  408fa0:	da1b      	bge.n	408fda <__ieee754_fmod+0x92>
  408fa2:	f1bb 0f00 	cmp.w	fp, #0
  408fa6:	f040 80b2 	bne.w	40910e <__ieee754_fmod+0x1c6>
  408faa:	f1ba 0f00 	cmp.w	sl, #0
  408fae:	4654      	mov	r4, sl
  408fb0:	4878      	ldr	r0, [pc, #480]	; (409194 <__ieee754_fmod+0x24c>)
  408fb2:	dd16      	ble.n	408fe2 <__ieee754_fmod+0x9a>
  408fb4:	0064      	lsls	r4, r4, #1
  408fb6:	3801      	subs	r0, #1
  408fb8:	2c00      	cmp	r4, #0
  408fba:	dcfb      	bgt.n	408fb4 <__ieee754_fmod+0x6c>
  408fbc:	e011      	b.n	408fe2 <__ieee754_fmod+0x9a>
  408fbe:	4622      	mov	r2, r4
  408fc0:	462b      	mov	r3, r5
  408fc2:	4640      	mov	r0, r8
  408fc4:	4649      	mov	r1, r9
  408fc6:	f001 fe95 	bl	40acf4 <__aeabi_dmul>
  408fca:	4602      	mov	r2, r0
  408fcc:	460b      	mov	r3, r1
  408fce:	f001 ffbb 	bl	40af48 <__aeabi_ddiv>
  408fd2:	ec41 0b10 	vmov	d0, r0, r1
  408fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fda:	ea4f 502b 	mov.w	r0, fp, asr #20
  408fde:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
  408fe2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
  408fe6:	da0d      	bge.n	409004 <__ieee754_fmod+0xbc>
  408fe8:	2a00      	cmp	r2, #0
  408fea:	f040 8087 	bne.w	4090fc <__ieee754_fmod+0x1b4>
  408fee:	2900      	cmp	r1, #0
  408ff0:	460c      	mov	r4, r1
  408ff2:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 409194 <__ieee754_fmod+0x24c>
  408ff6:	dd09      	ble.n	40900c <__ieee754_fmod+0xc4>
  408ff8:	0064      	lsls	r4, r4, #1
  408ffa:	f10e 3eff 	add.w	lr, lr, #4294967295
  408ffe:	2c00      	cmp	r4, #0
  409000:	dcfa      	bgt.n	408ff8 <__ieee754_fmod+0xb0>
  409002:	e003      	b.n	40900c <__ieee754_fmod+0xc4>
  409004:	ea4f 5e22 	mov.w	lr, r2, asr #20
  409008:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
  40900c:	4c62      	ldr	r4, [pc, #392]	; (409198 <__ieee754_fmod+0x250>)
  40900e:	42a0      	cmp	r0, r4
  409010:	db63      	blt.n	4090da <__ieee754_fmod+0x192>
  409012:	f3cb 0513 	ubfx	r5, fp, #0, #20
  409016:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
  40901a:	4c5f      	ldr	r4, [pc, #380]	; (409198 <__ieee754_fmod+0x250>)
  40901c:	45a6      	cmp	lr, r4
  40901e:	db4e      	blt.n	4090be <__ieee754_fmod+0x176>
  409020:	f3cc 0113 	ubfx	r1, ip, #0, #20
  409024:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409028:	ebce 0000 	rsb	r0, lr, r0
  40902c:	e005      	b.n	40903a <__ieee754_fmod+0xf2>
  40902e:	0063      	lsls	r3, r4, #1
  409030:	4314      	orrs	r4, r2
  409032:	eb0c 0542 	add.w	r5, ip, r2, lsl #1
  409036:	d00f      	beq.n	409058 <__ieee754_fmod+0x110>
  409038:	3801      	subs	r0, #1
  40903a:	1b9c      	subs	r4, r3, r6
  40903c:	1a6a      	subs	r2, r5, r1
  40903e:	b198      	cbz	r0, 409068 <__ieee754_fmod+0x120>
  409040:	42b3      	cmp	r3, r6
  409042:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
  409046:	d200      	bcs.n	40904a <__ieee754_fmod+0x102>
  409048:	3a01      	subs	r2, #1
  40904a:	2a00      	cmp	r2, #0
  40904c:	daef      	bge.n	40902e <__ieee754_fmod+0xe6>
  40904e:	0fda      	lsrs	r2, r3, #31
  409050:	005b      	lsls	r3, r3, #1
  409052:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  409056:	e7ef      	b.n	409038 <__ieee754_fmod+0xf0>
  409058:	4b50      	ldr	r3, [pc, #320]	; (40919c <__ieee754_fmod+0x254>)
  40905a:	0fff      	lsrs	r7, r7, #31
  40905c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
  409060:	ed97 0b00 	vldr	d0, [r7]
  409064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409068:	429e      	cmp	r6, r3
  40906a:	4611      	mov	r1, r2
  40906c:	d844      	bhi.n	4090f8 <__ieee754_fmod+0x1b0>
  40906e:	2900      	cmp	r1, #0
  409070:	db7c      	blt.n	40916c <__ieee754_fmod+0x224>
  409072:	1b9b      	subs	r3, r3, r6
  409074:	ea51 0203 	orrs.w	r2, r1, r3
  409078:	d0ee      	beq.n	409058 <__ieee754_fmod+0x110>
  40907a:	4849      	ldr	r0, [pc, #292]	; (4091a0 <__ieee754_fmod+0x258>)
  40907c:	4281      	cmp	r1, r0
  40907e:	dc07      	bgt.n	409090 <__ieee754_fmod+0x148>
  409080:	0fda      	lsrs	r2, r3, #31
  409082:	f10e 3eff 	add.w	lr, lr, #4294967295
  409086:	005b      	lsls	r3, r3, #1
  409088:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  40908c:	4281      	cmp	r1, r0
  40908e:	ddf7      	ble.n	409080 <__ieee754_fmod+0x138>
  409090:	4a41      	ldr	r2, [pc, #260]	; (409198 <__ieee754_fmod+0x250>)
  409092:	4596      	cmp	lr, r2
  409094:	da52      	bge.n	40913c <__ieee754_fmod+0x1f4>
  409096:	4a40      	ldr	r2, [pc, #256]	; (409198 <__ieee754_fmod+0x250>)
  409098:	ebce 0202 	rsb	r2, lr, r2
  40909c:	2a14      	cmp	r2, #20
  40909e:	dc67      	bgt.n	409170 <__ieee754_fmod+0x228>
  4090a0:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  4090a4:	40d3      	lsrs	r3, r2
  4090a6:	fa41 f002 	asr.w	r0, r1, r2
  4090aa:	fa01 f10e 	lsl.w	r1, r1, lr
  4090ae:	4319      	orrs	r1, r3
  4090b0:	ea40 0307 	orr.w	r3, r0, r7
  4090b4:	460a      	mov	r2, r1
  4090b6:	ec43 2b10 	vmov	d0, r2, r3
  4090ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090be:	4c36      	ldr	r4, [pc, #216]	; (409198 <__ieee754_fmod+0x250>)
  4090c0:	ebce 0404 	rsb	r4, lr, r4
  4090c4:	2c1f      	cmp	r4, #31
  4090c6:	dc33      	bgt.n	409130 <__ieee754_fmod+0x1e8>
  4090c8:	f20e 4c1e 	addw	ip, lr, #1054	; 0x41e
  4090cc:	40a2      	lsls	r2, r4
  4090ce:	fa01 f604 	lsl.w	r6, r1, r4
  4090d2:	4664      	mov	r4, ip
  4090d4:	40e1      	lsrs	r1, r4
  4090d6:	4311      	orrs	r1, r2
  4090d8:	e7a6      	b.n	409028 <__ieee754_fmod+0xe0>
  4090da:	4b2f      	ldr	r3, [pc, #188]	; (409198 <__ieee754_fmod+0x250>)
  4090dc:	1a1b      	subs	r3, r3, r0
  4090de:	2b1f      	cmp	r3, #31
  4090e0:	dc20      	bgt.n	409124 <__ieee754_fmod+0x1dc>
  4090e2:	f200 441e 	addw	r4, r0, #1054	; 0x41e
  4090e6:	fa0b fb03 	lsl.w	fp, fp, r3
  4090ea:	fa0a f303 	lsl.w	r3, sl, r3
  4090ee:	fa2a f504 	lsr.w	r5, sl, r4
  4090f2:	ea4b 0505 	orr.w	r5, fp, r5
  4090f6:	e790      	b.n	40901a <__ieee754_fmod+0xd2>
  4090f8:	1e51      	subs	r1, r2, #1
  4090fa:	e7b8      	b.n	40906e <__ieee754_fmod+0x126>
  4090fc:	02d4      	lsls	r4, r2, #11
  4090fe:	f8df e098 	ldr.w	lr, [pc, #152]	; 409198 <__ieee754_fmod+0x250>
  409102:	0064      	lsls	r4, r4, #1
  409104:	f10e 3eff 	add.w	lr, lr, #4294967295
  409108:	2c00      	cmp	r4, #0
  40910a:	dcfa      	bgt.n	409102 <__ieee754_fmod+0x1ba>
  40910c:	e77e      	b.n	40900c <__ieee754_fmod+0xc4>
  40910e:	ea4f 24cb 	mov.w	r4, fp, lsl #11
  409112:	4821      	ldr	r0, [pc, #132]	; (409198 <__ieee754_fmod+0x250>)
  409114:	2c00      	cmp	r4, #0
  409116:	f77f af64 	ble.w	408fe2 <__ieee754_fmod+0x9a>
  40911a:	0064      	lsls	r4, r4, #1
  40911c:	3801      	subs	r0, #1
  40911e:	2c00      	cmp	r4, #0
  409120:	dcfb      	bgt.n	40911a <__ieee754_fmod+0x1d2>
  409122:	e75e      	b.n	408fe2 <__ieee754_fmod+0x9a>
  409124:	4c1f      	ldr	r4, [pc, #124]	; (4091a4 <__ieee754_fmod+0x25c>)
  409126:	2300      	movs	r3, #0
  409128:	1a24      	subs	r4, r4, r0
  40912a:	fa0a f504 	lsl.w	r5, sl, r4
  40912e:	e774      	b.n	40901a <__ieee754_fmod+0xd2>
  409130:	4a1c      	ldr	r2, [pc, #112]	; (4091a4 <__ieee754_fmod+0x25c>)
  409132:	2600      	movs	r6, #0
  409134:	ebce 0202 	rsb	r2, lr, r2
  409138:	4091      	lsls	r1, r2
  40913a:	e775      	b.n	409028 <__ieee754_fmod+0xe0>
  40913c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  409140:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
  409144:	4618      	mov	r0, r3
  409146:	4317      	orrs	r7, r2
  409148:	ea47 510e 	orr.w	r1, r7, lr, lsl #20
  40914c:	ec41 0b10 	vmov	d0, r0, r1
  409150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409154:	0fff      	lsrs	r7, r7, #31
  409156:	4b11      	ldr	r3, [pc, #68]	; (40919c <__ieee754_fmod+0x254>)
  409158:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40915c:	ed93 0b00 	vldr	d0, [r3]
  409160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409164:	ec49 8b10 	vmov	d0, r8, r9
  409168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40916c:	4629      	mov	r1, r5
  40916e:	e781      	b.n	409074 <__ieee754_fmod+0x12c>
  409170:	2a1f      	cmp	r2, #31
  409172:	dc07      	bgt.n	409184 <__ieee754_fmod+0x23c>
  409174:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  409178:	40d3      	lsrs	r3, r2
  40917a:	4638      	mov	r0, r7
  40917c:	fa01 f10e 	lsl.w	r1, r1, lr
  409180:	4319      	orrs	r1, r3
  409182:	e795      	b.n	4090b0 <__ieee754_fmod+0x168>
  409184:	4b07      	ldr	r3, [pc, #28]	; (4091a4 <__ieee754_fmod+0x25c>)
  409186:	4638      	mov	r0, r7
  409188:	ebce 0303 	rsb	r3, lr, r3
  40918c:	4119      	asrs	r1, r3
  40918e:	e78f      	b.n	4090b0 <__ieee754_fmod+0x168>
  409190:	7fefffff 	.word	0x7fefffff
  409194:	fffffbed 	.word	0xfffffbed
  409198:	fffffc02 	.word	0xfffffc02
  40919c:	00413b00 	.word	0x00413b00
  4091a0:	000fffff 	.word	0x000fffff
  4091a4:	fffffbe2 	.word	0xfffffbe2
  4091a8:	7ff00000 	.word	0x7ff00000
  4091ac:	00000000 	.word	0x00000000

004091b0 <__ieee754_rem_pio2>:
  4091b0:	ec53 2b10 	vmov	r2, r3, d0
  4091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4091b8:	4999      	ldr	r1, [pc, #612]	; (409420 <__ieee754_rem_pio2+0x270>)
  4091ba:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
  4091be:	b08f      	sub	sp, #60	; 0x3c
  4091c0:	461d      	mov	r5, r3
  4091c2:	458b      	cmp	fp, r1
  4091c4:	4604      	mov	r4, r0
  4091c6:	f340 8086 	ble.w	4092d6 <__ieee754_rem_pio2+0x126>
  4091ca:	4996      	ldr	r1, [pc, #600]	; (409424 <__ieee754_rem_pio2+0x274>)
  4091cc:	458b      	cmp	fp, r1
  4091ce:	dc2a      	bgt.n	409226 <__ieee754_rem_pio2+0x76>
  4091d0:	2d00      	cmp	r5, #0
  4091d2:	4619      	mov	r1, r3
  4091d4:	ee10 0a10 	vmov	r0, s0
  4091d8:	a387      	add	r3, pc, #540	; (adr r3, 4093f8 <__ieee754_rem_pio2+0x248>)
  4091da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091de:	f340 81a9 	ble.w	409534 <__ieee754_rem_pio2+0x384>
  4091e2:	f001 fbd3 	bl	40a98c <__aeabi_dsub>
  4091e6:	4b90      	ldr	r3, [pc, #576]	; (409428 <__ieee754_rem_pio2+0x278>)
  4091e8:	4606      	mov	r6, r0
  4091ea:	460f      	mov	r7, r1
  4091ec:	459b      	cmp	fp, r3
  4091ee:	f000 808a 	beq.w	409306 <__ieee754_rem_pio2+0x156>
  4091f2:	f04f 0a01 	mov.w	sl, #1
  4091f6:	a382      	add	r3, pc, #520	; (adr r3, 409400 <__ieee754_rem_pio2+0x250>)
  4091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091fc:	f001 fbc6 	bl	40a98c <__aeabi_dsub>
  409200:	4602      	mov	r2, r0
  409202:	460b      	mov	r3, r1
  409204:	4630      	mov	r0, r6
  409206:	4639      	mov	r1, r7
  409208:	e9c4 2300 	strd	r2, r3, [r4]
  40920c:	f001 fbbe 	bl	40a98c <__aeabi_dsub>
  409210:	a37b      	add	r3, pc, #492	; (adr r3, 409400 <__ieee754_rem_pio2+0x250>)
  409212:	e9d3 2300 	ldrd	r2, r3, [r3]
  409216:	f001 fbb9 	bl	40a98c <__aeabi_dsub>
  40921a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40921e:	4650      	mov	r0, sl
  409220:	b00f      	add	sp, #60	; 0x3c
  409222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409226:	4981      	ldr	r1, [pc, #516]	; (40942c <__ieee754_rem_pio2+0x27c>)
  409228:	458b      	cmp	fp, r1
  40922a:	f340 808a 	ble.w	409342 <__ieee754_rem_pio2+0x192>
  40922e:	4980      	ldr	r1, [pc, #512]	; (409430 <__ieee754_rem_pio2+0x280>)
  409230:	458b      	cmp	fp, r1
  409232:	dc5c      	bgt.n	4092ee <__ieee754_rem_pio2+0x13e>
  409234:	ea4f 5a2b 	mov.w	sl, fp, asr #20
  409238:	4610      	mov	r0, r2
  40923a:	ee10 6a10 	vmov	r6, s0
  40923e:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
  409242:	ebab 570a 	sub.w	r7, fp, sl, lsl #20
  409246:	4639      	mov	r1, r7
  409248:	f001 ffee 	bl	40b228 <__aeabi_d2iz>
  40924c:	f001 fcec 	bl	40ac28 <__aeabi_i2d>
  409250:	4680      	mov	r8, r0
  409252:	4689      	mov	r9, r1
  409254:	4602      	mov	r2, r0
  409256:	460b      	mov	r3, r1
  409258:	4630      	mov	r0, r6
  40925a:	4639      	mov	r1, r7
  40925c:	e9cd 8908 	strd	r8, r9, [sp, #32]
  409260:	f001 fb94 	bl	40a98c <__aeabi_dsub>
  409264:	2200      	movs	r2, #0
  409266:	4b73      	ldr	r3, [pc, #460]	; (409434 <__ieee754_rem_pio2+0x284>)
  409268:	f001 fd44 	bl	40acf4 <__aeabi_dmul>
  40926c:	4689      	mov	r9, r1
  40926e:	4680      	mov	r8, r0
  409270:	f001 ffda 	bl	40b228 <__aeabi_d2iz>
  409274:	f001 fcd8 	bl	40ac28 <__aeabi_i2d>
  409278:	4606      	mov	r6, r0
  40927a:	460f      	mov	r7, r1
  40927c:	4602      	mov	r2, r0
  40927e:	460b      	mov	r3, r1
  409280:	4640      	mov	r0, r8
  409282:	4649      	mov	r1, r9
  409284:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  409288:	f001 fb80 	bl	40a98c <__aeabi_dsub>
  40928c:	2200      	movs	r2, #0
  40928e:	4b69      	ldr	r3, [pc, #420]	; (409434 <__ieee754_rem_pio2+0x284>)
  409290:	f001 fd30 	bl	40acf4 <__aeabi_dmul>
  409294:	2200      	movs	r2, #0
  409296:	2300      	movs	r3, #0
  409298:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40929c:	f001 ff92 	bl	40b1c4 <__aeabi_dcmpeq>
  4092a0:	2800      	cmp	r0, #0
  4092a2:	f000 8170 	beq.w	409586 <__ieee754_rem_pio2+0x3d6>
  4092a6:	2300      	movs	r3, #0
  4092a8:	4630      	mov	r0, r6
  4092aa:	4639      	mov	r1, r7
  4092ac:	2200      	movs	r2, #0
  4092ae:	f001 ff89 	bl	40b1c4 <__aeabi_dcmpeq>
  4092b2:	2800      	cmp	r0, #0
  4092b4:	bf14      	ite	ne
  4092b6:	2301      	movne	r3, #1
  4092b8:	2302      	moveq	r3, #2
  4092ba:	2002      	movs	r0, #2
  4092bc:	495e      	ldr	r1, [pc, #376]	; (409438 <__ieee754_rem_pio2+0x288>)
  4092be:	4652      	mov	r2, sl
  4092c0:	9000      	str	r0, [sp, #0]
  4092c2:	a808      	add	r0, sp, #32
  4092c4:	9101      	str	r1, [sp, #4]
  4092c6:	4621      	mov	r1, r4
  4092c8:	f000 fb96 	bl	4099f8 <__kernel_rem_pio2>
  4092cc:	2d00      	cmp	r5, #0
  4092ce:	f2c0 814f 	blt.w	409570 <__ieee754_rem_pio2+0x3c0>
  4092d2:	4682      	mov	sl, r0
  4092d4:	e007      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  4092d6:	2000      	movs	r0, #0
  4092d8:	2100      	movs	r1, #0
  4092da:	f04f 0a00 	mov.w	sl, #0
  4092de:	ed84 0b00 	vstr	d0, [r4]
  4092e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4092e6:	4650      	mov	r0, sl
  4092e8:	b00f      	add	sp, #60	; 0x3c
  4092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092ee:	ee10 0a10 	vmov	r0, s0
  4092f2:	4619      	mov	r1, r3
  4092f4:	f001 fb4a 	bl	40a98c <__aeabi_dsub>
  4092f8:	f04f 0a00 	mov.w	sl, #0
  4092fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
  409300:	e9c4 0100 	strd	r0, r1, [r4]
  409304:	e7ef      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  409306:	a340      	add	r3, pc, #256	; (adr r3, 409408 <__ieee754_rem_pio2+0x258>)
  409308:	e9d3 2300 	ldrd	r2, r3, [r3]
  40930c:	f001 fb3e 	bl	40a98c <__aeabi_dsub>
  409310:	4606      	mov	r6, r0
  409312:	460f      	mov	r7, r1
  409314:	f04f 0a01 	mov.w	sl, #1
  409318:	a33d      	add	r3, pc, #244	; (adr r3, 409410 <__ieee754_rem_pio2+0x260>)
  40931a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40931e:	f001 fb35 	bl	40a98c <__aeabi_dsub>
  409322:	4602      	mov	r2, r0
  409324:	460b      	mov	r3, r1
  409326:	4630      	mov	r0, r6
  409328:	4639      	mov	r1, r7
  40932a:	e9c4 2300 	strd	r2, r3, [r4]
  40932e:	f001 fb2d 	bl	40a98c <__aeabi_dsub>
  409332:	a337      	add	r3, pc, #220	; (adr r3, 409410 <__ieee754_rem_pio2+0x260>)
  409334:	e9d3 2300 	ldrd	r2, r3, [r3]
  409338:	f001 fb28 	bl	40a98c <__aeabi_dsub>
  40933c:	e9c4 0102 	strd	r0, r1, [r4, #8]
  409340:	e7d1      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  409342:	f001 f9c5 	bl	40a6d0 <fabs>
  409346:	ee10 0a10 	vmov	r0, s0
  40934a:	ec57 6b10 	vmov	r6, r7, d0
  40934e:	a332      	add	r3, pc, #200	; (adr r3, 409418 <__ieee754_rem_pio2+0x268>)
  409350:	e9d3 2300 	ldrd	r2, r3, [r3]
  409354:	4639      	mov	r1, r7
  409356:	f001 fccd 	bl	40acf4 <__aeabi_dmul>
  40935a:	2200      	movs	r2, #0
  40935c:	4b37      	ldr	r3, [pc, #220]	; (40943c <__ieee754_rem_pio2+0x28c>)
  40935e:	f001 fb17 	bl	40a990 <__adddf3>
  409362:	f001 ff61 	bl	40b228 <__aeabi_d2iz>
  409366:	4682      	mov	sl, r0
  409368:	f001 fc5e 	bl	40ac28 <__aeabi_i2d>
  40936c:	a322      	add	r3, pc, #136	; (adr r3, 4093f8 <__ieee754_rem_pio2+0x248>)
  40936e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409372:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409376:	f001 fcbd 	bl	40acf4 <__aeabi_dmul>
  40937a:	4602      	mov	r2, r0
  40937c:	460b      	mov	r3, r1
  40937e:	4630      	mov	r0, r6
  409380:	4639      	mov	r1, r7
  409382:	f001 fb03 	bl	40a98c <__aeabi_dsub>
  409386:	4606      	mov	r6, r0
  409388:	460f      	mov	r7, r1
  40938a:	a31d      	add	r3, pc, #116	; (adr r3, 409400 <__ieee754_rem_pio2+0x250>)
  40938c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409390:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409394:	f001 fcae 	bl	40acf4 <__aeabi_dmul>
  409398:	f1ba 0f1f 	cmp.w	sl, #31
  40939c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4093a0:	4630      	mov	r0, r6
  4093a2:	4639      	mov	r1, r7
  4093a4:	dc4e      	bgt.n	409444 <__ieee754_rem_pio2+0x294>
  4093a6:	4b26      	ldr	r3, [pc, #152]	; (409440 <__ieee754_rem_pio2+0x290>)
  4093a8:	f10a 32ff 	add.w	r2, sl, #4294967295
  4093ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4093b0:	455b      	cmp	r3, fp
  4093b2:	d047      	beq.n	409444 <__ieee754_rem_pio2+0x294>
  4093b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4093b8:	f001 fae8 	bl	40a98c <__aeabi_dsub>
  4093bc:	4680      	mov	r8, r0
  4093be:	4689      	mov	r9, r1
  4093c0:	e9c4 8900 	strd	r8, r9, [r4]
  4093c4:	4642      	mov	r2, r8
  4093c6:	464b      	mov	r3, r9
  4093c8:	4630      	mov	r0, r6
  4093ca:	4639      	mov	r1, r7
  4093cc:	f001 fade 	bl	40a98c <__aeabi_dsub>
  4093d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4093d4:	f001 fada 	bl	40a98c <__aeabi_dsub>
  4093d8:	2d00      	cmp	r5, #0
  4093da:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4093de:	da82      	bge.n	4092e6 <__ieee754_rem_pio2+0x136>
  4093e0:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
  4093e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4093e8:	f1ca 0a00 	rsb	sl, sl, #0
  4093ec:	f8c4 8000 	str.w	r8, [r4]
  4093f0:	6065      	str	r5, [r4, #4]
  4093f2:	60a0      	str	r0, [r4, #8]
  4093f4:	60e3      	str	r3, [r4, #12]
  4093f6:	e776      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  4093f8:	54400000 	.word	0x54400000
  4093fc:	3ff921fb 	.word	0x3ff921fb
  409400:	1a626331 	.word	0x1a626331
  409404:	3dd0b461 	.word	0x3dd0b461
  409408:	1a600000 	.word	0x1a600000
  40940c:	3dd0b461 	.word	0x3dd0b461
  409410:	2e037073 	.word	0x2e037073
  409414:	3ba3198a 	.word	0x3ba3198a
  409418:	6dc9c883 	.word	0x6dc9c883
  40941c:	3fe45f30 	.word	0x3fe45f30
  409420:	3fe921fb 	.word	0x3fe921fb
  409424:	4002d97b 	.word	0x4002d97b
  409428:	3ff921fb 	.word	0x3ff921fb
  40942c:	413921fb 	.word	0x413921fb
  409430:	7fefffff 	.word	0x7fefffff
  409434:	41700000 	.word	0x41700000
  409438:	00413b90 	.word	0x00413b90
  40943c:	3fe00000 	.word	0x3fe00000
  409440:	00413b10 	.word	0x00413b10
  409444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409448:	f001 faa0 	bl	40a98c <__aeabi_dsub>
  40944c:	f3c1 530a 	ubfx	r3, r1, #20, #11
  409450:	ea4f 5b2b 	mov.w	fp, fp, asr #20
  409454:	4680      	mov	r8, r0
  409456:	4689      	mov	r9, r1
  409458:	ebc3 030b 	rsb	r3, r3, fp
  40945c:	2b10      	cmp	r3, #16
  40945e:	e9c4 8900 	strd	r8, r9, [r4]
  409462:	ddaf      	ble.n	4093c4 <__ieee754_rem_pio2+0x214>
  409464:	a35c      	add	r3, pc, #368	; (adr r3, 4095d8 <__ieee754_rem_pio2+0x428>)
  409466:	e9d3 2300 	ldrd	r2, r3, [r3]
  40946a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40946e:	f001 fc41 	bl	40acf4 <__aeabi_dmul>
  409472:	4680      	mov	r8, r0
  409474:	4689      	mov	r9, r1
  409476:	4630      	mov	r0, r6
  409478:	4642      	mov	r2, r8
  40947a:	4639      	mov	r1, r7
  40947c:	464b      	mov	r3, r9
  40947e:	f001 fa85 	bl	40a98c <__aeabi_dsub>
  409482:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40948a:	4630      	mov	r0, r6
  40948c:	4639      	mov	r1, r7
  40948e:	f001 fa7d 	bl	40a98c <__aeabi_dsub>
  409492:	4642      	mov	r2, r8
  409494:	464b      	mov	r3, r9
  409496:	f001 fa79 	bl	40a98c <__aeabi_dsub>
  40949a:	4606      	mov	r6, r0
  40949c:	460f      	mov	r7, r1
  40949e:	a350      	add	r3, pc, #320	; (adr r3, 4095e0 <__ieee754_rem_pio2+0x430>)
  4094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4094a8:	f001 fc24 	bl	40acf4 <__aeabi_dmul>
  4094ac:	4632      	mov	r2, r6
  4094ae:	463b      	mov	r3, r7
  4094b0:	f001 fa6c 	bl	40a98c <__aeabi_dsub>
  4094b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4094b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4094bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4094c0:	f001 fa64 	bl	40a98c <__aeabi_dsub>
  4094c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
  4094c8:	4680      	mov	r8, r0
  4094ca:	4689      	mov	r9, r1
  4094cc:	ebc3 0b0b 	rsb	fp, r3, fp
  4094d0:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
  4094d4:	e9c4 8900 	strd	r8, r9, [r4]
  4094d8:	dd75      	ble.n	4095c6 <__ieee754_rem_pio2+0x416>
  4094da:	a344      	add	r3, pc, #272	; (adr r3, 4095ec <__ieee754_rem_pio2+0x43c>)
  4094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4094e4:	f001 fc06 	bl	40acf4 <__aeabi_dmul>
  4094e8:	4680      	mov	r8, r0
  4094ea:	4689      	mov	r9, r1
  4094ec:	4642      	mov	r2, r8
  4094ee:	464b      	mov	r3, r9
  4094f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4094f4:	f001 fa4a 	bl	40a98c <__aeabi_dsub>
  4094f8:	4606      	mov	r6, r0
  4094fa:	460f      	mov	r7, r1
  4094fc:	4632      	mov	r2, r6
  4094fe:	463b      	mov	r3, r7
  409500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  409504:	f001 fa42 	bl	40a98c <__aeabi_dsub>
  409508:	4642      	mov	r2, r8
  40950a:	464b      	mov	r3, r9
  40950c:	f001 fa3e 	bl	40a98c <__aeabi_dsub>
  409510:	4680      	mov	r8, r0
  409512:	4689      	mov	r9, r1
  409514:	a337      	add	r3, pc, #220	; (adr r3, 4095f4 <__ieee754_rem_pio2+0x444>)
  409516:	e9d3 2300 	ldrd	r2, r3, [r3]
  40951a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40951e:	f001 fbe9 	bl	40acf4 <__aeabi_dmul>
  409522:	4642      	mov	r2, r8
  409524:	464b      	mov	r3, r9
  409526:	f001 fa31 	bl	40a98c <__aeabi_dsub>
  40952a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40952e:	4630      	mov	r0, r6
  409530:	4639      	mov	r1, r7
  409532:	e73f      	b.n	4093b4 <__ieee754_rem_pio2+0x204>
  409534:	f001 fa2c 	bl	40a990 <__adddf3>
  409538:	4b2b      	ldr	r3, [pc, #172]	; (4095e8 <__ieee754_rem_pio2+0x438>)
  40953a:	4606      	mov	r6, r0
  40953c:	460f      	mov	r7, r1
  40953e:	459b      	cmp	fp, r3
  409540:	d023      	beq.n	40958a <__ieee754_rem_pio2+0x3da>
  409542:	f04f 3aff 	mov.w	sl, #4294967295
  409546:	a322      	add	r3, pc, #136	; (adr r3, 4095d0 <__ieee754_rem_pio2+0x420>)
  409548:	e9d3 2300 	ldrd	r2, r3, [r3]
  40954c:	f001 fa20 	bl	40a990 <__adddf3>
  409550:	4602      	mov	r2, r0
  409552:	460b      	mov	r3, r1
  409554:	4630      	mov	r0, r6
  409556:	4639      	mov	r1, r7
  409558:	e9c4 2300 	strd	r2, r3, [r4]
  40955c:	f001 fa16 	bl	40a98c <__aeabi_dsub>
  409560:	a31b      	add	r3, pc, #108	; (adr r3, 4095d0 <__ieee754_rem_pio2+0x420>)
  409562:	e9d3 2300 	ldrd	r2, r3, [r3]
  409566:	f001 fa13 	bl	40a990 <__adddf3>
  40956a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40956e:	e6ba      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  409570:	6862      	ldr	r2, [r4, #4]
  409572:	f1c0 0a00 	rsb	sl, r0, #0
  409576:	68e3      	ldr	r3, [r4, #12]
  409578:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40957c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  409580:	6062      	str	r2, [r4, #4]
  409582:	60e3      	str	r3, [r4, #12]
  409584:	e6af      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  409586:	2303      	movs	r3, #3
  409588:	e697      	b.n	4092ba <__ieee754_rem_pio2+0x10a>
  40958a:	a313      	add	r3, pc, #76	; (adr r3, 4095d8 <__ieee754_rem_pio2+0x428>)
  40958c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409590:	f001 f9fe 	bl	40a990 <__adddf3>
  409594:	4606      	mov	r6, r0
  409596:	460f      	mov	r7, r1
  409598:	f04f 3aff 	mov.w	sl, #4294967295
  40959c:	a310      	add	r3, pc, #64	; (adr r3, 4095e0 <__ieee754_rem_pio2+0x430>)
  40959e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4095a2:	f001 f9f5 	bl	40a990 <__adddf3>
  4095a6:	4602      	mov	r2, r0
  4095a8:	460b      	mov	r3, r1
  4095aa:	4630      	mov	r0, r6
  4095ac:	4639      	mov	r1, r7
  4095ae:	e9c4 2300 	strd	r2, r3, [r4]
  4095b2:	f001 f9eb 	bl	40a98c <__aeabi_dsub>
  4095b6:	a30a      	add	r3, pc, #40	; (adr r3, 4095e0 <__ieee754_rem_pio2+0x430>)
  4095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4095bc:	f001 f9e8 	bl	40a990 <__adddf3>
  4095c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4095c4:	e68f      	b.n	4092e6 <__ieee754_rem_pio2+0x136>
  4095c6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  4095ca:	e6fb      	b.n	4093c4 <__ieee754_rem_pio2+0x214>
  4095cc:	f3af 8000 	nop.w
  4095d0:	1a626331 	.word	0x1a626331
  4095d4:	3dd0b461 	.word	0x3dd0b461
  4095d8:	1a600000 	.word	0x1a600000
  4095dc:	3dd0b461 	.word	0x3dd0b461
  4095e0:	2e037073 	.word	0x2e037073
  4095e4:	3ba3198a 	.word	0x3ba3198a
  4095e8:	3ff921fb 	.word	0x3ff921fb
  4095ec:	2e000000 	.word	0x2e000000
  4095f0:	3ba3198a 	.word	0x3ba3198a
  4095f4:	252049c1 	.word	0x252049c1
  4095f8:	397b839a 	.word	0x397b839a

004095fc <__ieee754_sqrt>:
  4095fc:	495c      	ldr	r1, [pc, #368]	; (409770 <__ieee754_sqrt+0x174>)
  4095fe:	ee10 0a10 	vmov	r0, s0
  409602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409606:	ec55 4b10 	vmov	r4, r5, d0
  40960a:	460e      	mov	r6, r1
  40960c:	4029      	ands	r1, r5
  40960e:	462b      	mov	r3, r5
  409610:	42b1      	cmp	r1, r6
  409612:	f000 8086 	beq.w	409722 <__ieee754_sqrt+0x126>
  409616:	2d00      	cmp	r5, #0
  409618:	4622      	mov	r2, r4
  40961a:	dd66      	ble.n	4096ea <__ieee754_sqrt+0xee>
  40961c:	152f      	asrs	r7, r5, #20
  40961e:	d071      	beq.n	409704 <__ieee754_sqrt+0x108>
  409620:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  409624:	f3c3 0313 	ubfx	r3, r3, #0, #20
  409628:	07f9      	lsls	r1, r7, #31
  40962a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40962e:	d457      	bmi.n	4096e0 <__ieee754_sqrt+0xe4>
  409630:	0fd1      	lsrs	r1, r2, #31
  409632:	2600      	movs	r6, #0
  409634:	107f      	asrs	r7, r7, #1
  409636:	2016      	movs	r0, #22
  409638:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  40963c:	46b6      	mov	lr, r6
  40963e:	0052      	lsls	r2, r2, #1
  409640:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  409644:	eb0e 0401 	add.w	r4, lr, r1
  409648:	0fd5      	lsrs	r5, r2, #31
  40964a:	0052      	lsls	r2, r2, #1
  40964c:	429c      	cmp	r4, r3
  40964e:	dc03      	bgt.n	409658 <__ieee754_sqrt+0x5c>
  409650:	1b1b      	subs	r3, r3, r4
  409652:	eb04 0e01 	add.w	lr, r4, r1
  409656:	440e      	add	r6, r1
  409658:	3801      	subs	r0, #1
  40965a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40965e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  409662:	d1ef      	bne.n	409644 <__ieee754_sqrt+0x48>
  409664:	2520      	movs	r5, #32
  409666:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40966a:	4684      	mov	ip, r0
  40966c:	4573      	cmp	r3, lr
  40966e:	eb01 040c 	add.w	r4, r1, ip
  409672:	dc03      	bgt.n	40967c <__ieee754_sqrt+0x80>
  409674:	4294      	cmp	r4, r2
  409676:	d80e      	bhi.n	409696 <__ieee754_sqrt+0x9a>
  409678:	4573      	cmp	r3, lr
  40967a:	d10c      	bne.n	409696 <__ieee754_sqrt+0x9a>
  40967c:	2c00      	cmp	r4, #0
  40967e:	eb04 0c01 	add.w	ip, r4, r1
  409682:	db27      	blt.n	4096d4 <__ieee754_sqrt+0xd8>
  409684:	46f0      	mov	r8, lr
  409686:	4294      	cmp	r4, r2
  409688:	ebce 0303 	rsb	r3, lr, r3
  40968c:	d900      	bls.n	409690 <__ieee754_sqrt+0x94>
  40968e:	3b01      	subs	r3, #1
  409690:	1b12      	subs	r2, r2, r4
  409692:	4408      	add	r0, r1
  409694:	46c6      	mov	lr, r8
  409696:	0fd4      	lsrs	r4, r2, #31
  409698:	3d01      	subs	r5, #1
  40969a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40969e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  4096a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4096a6:	d1e1      	bne.n	40966c <__ieee754_sqrt+0x70>
  4096a8:	4313      	orrs	r3, r2
  4096aa:	d004      	beq.n	4096b6 <__ieee754_sqrt+0xba>
  4096ac:	1c42      	adds	r2, r0, #1
  4096ae:	d048      	beq.n	409742 <__ieee754_sqrt+0x146>
  4096b0:	f000 0301 	and.w	r3, r0, #1
  4096b4:	4418      	add	r0, r3
  4096b6:	0840      	lsrs	r0, r0, #1
  4096b8:	1073      	asrs	r3, r6, #1
  4096ba:	492e      	ldr	r1, [pc, #184]	; (409774 <__ieee754_sqrt+0x178>)
  4096bc:	4419      	add	r1, r3
  4096be:	07f3      	lsls	r3, r6, #31
  4096c0:	d501      	bpl.n	4096c6 <__ieee754_sqrt+0xca>
  4096c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  4096c6:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  4096ca:	4602      	mov	r2, r0
  4096cc:	ec43 2b10 	vmov	d0, r2, r3
  4096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4096d4:	f1bc 0f00 	cmp.w	ip, #0
  4096d8:	dbd4      	blt.n	409684 <__ieee754_sqrt+0x88>
  4096da:	f10e 0801 	add.w	r8, lr, #1
  4096de:	e7d2      	b.n	409686 <__ieee754_sqrt+0x8a>
  4096e0:	0fd1      	lsrs	r1, r2, #31
  4096e2:	0052      	lsls	r2, r2, #1
  4096e4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  4096e8:	e7a2      	b.n	409630 <__ieee754_sqrt+0x34>
  4096ea:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
  4096ee:	4321      	orrs	r1, r4
  4096f0:	d025      	beq.n	40973e <__ieee754_sqrt+0x142>
  4096f2:	bb6d      	cbnz	r5, 409750 <__ieee754_sqrt+0x154>
  4096f4:	462f      	mov	r7, r5
  4096f6:	0ad3      	lsrs	r3, r2, #11
  4096f8:	3f15      	subs	r7, #21
  4096fa:	0552      	lsls	r2, r2, #21
  4096fc:	2b00      	cmp	r3, #0
  4096fe:	d0fa      	beq.n	4096f6 <__ieee754_sqrt+0xfa>
  409700:	02dc      	lsls	r4, r3, #11
  409702:	d421      	bmi.n	409748 <__ieee754_sqrt+0x14c>
  409704:	2100      	movs	r1, #0
  409706:	005b      	lsls	r3, r3, #1
  409708:	3101      	adds	r1, #1
  40970a:	02d8      	lsls	r0, r3, #11
  40970c:	d5fb      	bpl.n	409706 <__ieee754_sqrt+0x10a>
  40970e:	f1c1 0401 	rsb	r4, r1, #1
  409712:	f1c1 0020 	rsb	r0, r1, #32
  409716:	fa22 f000 	lsr.w	r0, r2, r0
  40971a:	4427      	add	r7, r4
  40971c:	408a      	lsls	r2, r1
  40971e:	4303      	orrs	r3, r0
  409720:	e77e      	b.n	409620 <__ieee754_sqrt+0x24>
  409722:	ee10 2a10 	vmov	r2, s0
  409726:	462b      	mov	r3, r5
  409728:	4629      	mov	r1, r5
  40972a:	f001 fae3 	bl	40acf4 <__aeabi_dmul>
  40972e:	4622      	mov	r2, r4
  409730:	462b      	mov	r3, r5
  409732:	f001 f92d 	bl	40a990 <__adddf3>
  409736:	ec41 0b10 	vmov	d0, r0, r1
  40973a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409742:	3601      	adds	r6, #1
  409744:	4628      	mov	r0, r5
  409746:	e7b7      	b.n	4096b8 <__ieee754_sqrt+0xbc>
  409748:	2020      	movs	r0, #32
  40974a:	2401      	movs	r4, #1
  40974c:	2100      	movs	r1, #0
  40974e:	e7e2      	b.n	409716 <__ieee754_sqrt+0x11a>
  409750:	ee10 0a10 	vmov	r0, s0
  409754:	4622      	mov	r2, r4
  409756:	462b      	mov	r3, r5
  409758:	4629      	mov	r1, r5
  40975a:	f001 f917 	bl	40a98c <__aeabi_dsub>
  40975e:	4602      	mov	r2, r0
  409760:	460b      	mov	r3, r1
  409762:	f001 fbf1 	bl	40af48 <__aeabi_ddiv>
  409766:	ec41 0b10 	vmov	d0, r0, r1
  40976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40976e:	bf00      	nop
  409770:	7ff00000 	.word	0x7ff00000
  409774:	3fe00000 	.word	0x3fe00000

00409778 <__kernel_cos>:
  409778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40977c:	ec57 6b10 	vmov	r6, r7, d0
  409780:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
  409784:	ee10 0a10 	vmov	r0, s0
  409788:	4639      	mov	r1, r7
  40978a:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
  40978e:	ed2d 8b02 	vpush	{d8}
  409792:	eeb0 8a41 	vmov.f32	s16, s2
  409796:	eef0 8a61 	vmov.f32	s17, s3
  40979a:	b083      	sub	sp, #12
  40979c:	da6f      	bge.n	40987e <__kernel_cos+0x106>
  40979e:	f001 fd43 	bl	40b228 <__aeabi_d2iz>
  4097a2:	2800      	cmp	r0, #0
  4097a4:	f000 80f3 	beq.w	40998e <__kernel_cos+0x216>
  4097a8:	4632      	mov	r2, r6
  4097aa:	463b      	mov	r3, r7
  4097ac:	4630      	mov	r0, r6
  4097ae:	4639      	mov	r1, r7
  4097b0:	f001 faa0 	bl	40acf4 <__aeabi_dmul>
  4097b4:	4604      	mov	r4, r0
  4097b6:	460d      	mov	r5, r1
  4097b8:	a379      	add	r3, pc, #484	; (adr r3, 4099a0 <__kernel_cos+0x228>)
  4097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097be:	f001 fa99 	bl	40acf4 <__aeabi_dmul>
  4097c2:	a379      	add	r3, pc, #484	; (adr r3, 4099a8 <__kernel_cos+0x230>)
  4097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097c8:	f001 f8e2 	bl	40a990 <__adddf3>
  4097cc:	4622      	mov	r2, r4
  4097ce:	462b      	mov	r3, r5
  4097d0:	f001 fa90 	bl	40acf4 <__aeabi_dmul>
  4097d4:	a376      	add	r3, pc, #472	; (adr r3, 4099b0 <__kernel_cos+0x238>)
  4097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097da:	f001 f8d7 	bl	40a98c <__aeabi_dsub>
  4097de:	4622      	mov	r2, r4
  4097e0:	462b      	mov	r3, r5
  4097e2:	f001 fa87 	bl	40acf4 <__aeabi_dmul>
  4097e6:	a374      	add	r3, pc, #464	; (adr r3, 4099b8 <__kernel_cos+0x240>)
  4097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097ec:	f001 f8d0 	bl	40a990 <__adddf3>
  4097f0:	4622      	mov	r2, r4
  4097f2:	462b      	mov	r3, r5
  4097f4:	f001 fa7e 	bl	40acf4 <__aeabi_dmul>
  4097f8:	a371      	add	r3, pc, #452	; (adr r3, 4099c0 <__kernel_cos+0x248>)
  4097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4097fe:	f001 f8c5 	bl	40a98c <__aeabi_dsub>
  409802:	4622      	mov	r2, r4
  409804:	462b      	mov	r3, r5
  409806:	f001 fa75 	bl	40acf4 <__aeabi_dmul>
  40980a:	a36f      	add	r3, pc, #444	; (adr r3, 4099c8 <__kernel_cos+0x250>)
  40980c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409810:	f001 f8be 	bl	40a990 <__adddf3>
  409814:	4622      	mov	r2, r4
  409816:	462b      	mov	r3, r5
  409818:	f001 fa6c 	bl	40acf4 <__aeabi_dmul>
  40981c:	4682      	mov	sl, r0
  40981e:	468b      	mov	fp, r1
  409820:	4620      	mov	r0, r4
  409822:	4629      	mov	r1, r5
  409824:	2200      	movs	r2, #0
  409826:	4b6e      	ldr	r3, [pc, #440]	; (4099e0 <__kernel_cos+0x268>)
  409828:	f001 fa64 	bl	40acf4 <__aeabi_dmul>
  40982c:	4652      	mov	r2, sl
  40982e:	4680      	mov	r8, r0
  409830:	4689      	mov	r9, r1
  409832:	465b      	mov	r3, fp
  409834:	4620      	mov	r0, r4
  409836:	4629      	mov	r1, r5
  409838:	f001 fa5c 	bl	40acf4 <__aeabi_dmul>
  40983c:	4604      	mov	r4, r0
  40983e:	460d      	mov	r5, r1
  409840:	4630      	mov	r0, r6
  409842:	4639      	mov	r1, r7
  409844:	ec53 2b18 	vmov	r2, r3, d8
  409848:	f001 fa54 	bl	40acf4 <__aeabi_dmul>
  40984c:	4602      	mov	r2, r0
  40984e:	460b      	mov	r3, r1
  409850:	4620      	mov	r0, r4
  409852:	4629      	mov	r1, r5
  409854:	f001 f89a 	bl	40a98c <__aeabi_dsub>
  409858:	4602      	mov	r2, r0
  40985a:	460b      	mov	r3, r1
  40985c:	4640      	mov	r0, r8
  40985e:	4649      	mov	r1, r9
  409860:	f001 f894 	bl	40a98c <__aeabi_dsub>
  409864:	4602      	mov	r2, r0
  409866:	460b      	mov	r3, r1
  409868:	2000      	movs	r0, #0
  40986a:	495e      	ldr	r1, [pc, #376]	; (4099e4 <__kernel_cos+0x26c>)
  40986c:	f001 f88e 	bl	40a98c <__aeabi_dsub>
  409870:	ec41 0b10 	vmov	d0, r0, r1
  409874:	b003      	add	sp, #12
  409876:	ecbd 8b02 	vpop	{d8}
  40987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40987e:	ee10 2a10 	vmov	r2, s0
  409882:	463b      	mov	r3, r7
  409884:	f001 fa36 	bl	40acf4 <__aeabi_dmul>
  409888:	4604      	mov	r4, r0
  40988a:	460d      	mov	r5, r1
  40988c:	a344      	add	r3, pc, #272	; (adr r3, 4099a0 <__kernel_cos+0x228>)
  40988e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409892:	f001 fa2f 	bl	40acf4 <__aeabi_dmul>
  409896:	a344      	add	r3, pc, #272	; (adr r3, 4099a8 <__kernel_cos+0x230>)
  409898:	e9d3 2300 	ldrd	r2, r3, [r3]
  40989c:	f001 f878 	bl	40a990 <__adddf3>
  4098a0:	4622      	mov	r2, r4
  4098a2:	462b      	mov	r3, r5
  4098a4:	f001 fa26 	bl	40acf4 <__aeabi_dmul>
  4098a8:	a341      	add	r3, pc, #260	; (adr r3, 4099b0 <__kernel_cos+0x238>)
  4098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4098ae:	f001 f86d 	bl	40a98c <__aeabi_dsub>
  4098b2:	4622      	mov	r2, r4
  4098b4:	462b      	mov	r3, r5
  4098b6:	f001 fa1d 	bl	40acf4 <__aeabi_dmul>
  4098ba:	a33f      	add	r3, pc, #252	; (adr r3, 4099b8 <__kernel_cos+0x240>)
  4098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4098c0:	f001 f866 	bl	40a990 <__adddf3>
  4098c4:	4622      	mov	r2, r4
  4098c6:	462b      	mov	r3, r5
  4098c8:	f001 fa14 	bl	40acf4 <__aeabi_dmul>
  4098cc:	a33c      	add	r3, pc, #240	; (adr r3, 4099c0 <__kernel_cos+0x248>)
  4098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4098d2:	f001 f85b 	bl	40a98c <__aeabi_dsub>
  4098d6:	4622      	mov	r2, r4
  4098d8:	462b      	mov	r3, r5
  4098da:	f001 fa0b 	bl	40acf4 <__aeabi_dmul>
  4098de:	a33a      	add	r3, pc, #232	; (adr r3, 4099c8 <__kernel_cos+0x250>)
  4098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4098e4:	f001 f854 	bl	40a990 <__adddf3>
  4098e8:	462b      	mov	r3, r5
  4098ea:	4622      	mov	r2, r4
  4098ec:	f001 fa02 	bl	40acf4 <__aeabi_dmul>
  4098f0:	4b3d      	ldr	r3, [pc, #244]	; (4099e8 <__kernel_cos+0x270>)
  4098f2:	4682      	mov	sl, r0
  4098f4:	468b      	mov	fp, r1
  4098f6:	4599      	cmp	r9, r3
  4098f8:	dd92      	ble.n	409820 <__kernel_cos+0xa8>
  4098fa:	4b3c      	ldr	r3, [pc, #240]	; (4099ec <__kernel_cos+0x274>)
  4098fc:	4599      	cmp	r9, r3
  4098fe:	dc3d      	bgt.n	40997c <__kernel_cos+0x204>
  409900:	2200      	movs	r2, #0
  409902:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
  409906:	2000      	movs	r0, #0
  409908:	4936      	ldr	r1, [pc, #216]	; (4099e4 <__kernel_cos+0x26c>)
  40990a:	4690      	mov	r8, r2
  40990c:	4699      	mov	r9, r3
  40990e:	f001 f83d 	bl	40a98c <__aeabi_dsub>
  409912:	e9cd 0100 	strd	r0, r1, [sp]
  409916:	4620      	mov	r0, r4
  409918:	4629      	mov	r1, r5
  40991a:	2200      	movs	r2, #0
  40991c:	4b30      	ldr	r3, [pc, #192]	; (4099e0 <__kernel_cos+0x268>)
  40991e:	f001 f9e9 	bl	40acf4 <__aeabi_dmul>
  409922:	4642      	mov	r2, r8
  409924:	464b      	mov	r3, r9
  409926:	f001 f831 	bl	40a98c <__aeabi_dsub>
  40992a:	4652      	mov	r2, sl
  40992c:	4680      	mov	r8, r0
  40992e:	4689      	mov	r9, r1
  409930:	465b      	mov	r3, fp
  409932:	4620      	mov	r0, r4
  409934:	4629      	mov	r1, r5
  409936:	f001 f9dd 	bl	40acf4 <__aeabi_dmul>
  40993a:	4604      	mov	r4, r0
  40993c:	460d      	mov	r5, r1
  40993e:	4630      	mov	r0, r6
  409940:	4639      	mov	r1, r7
  409942:	ec53 2b18 	vmov	r2, r3, d8
  409946:	f001 f9d5 	bl	40acf4 <__aeabi_dmul>
  40994a:	4602      	mov	r2, r0
  40994c:	460b      	mov	r3, r1
  40994e:	4620      	mov	r0, r4
  409950:	4629      	mov	r1, r5
  409952:	f001 f81b 	bl	40a98c <__aeabi_dsub>
  409956:	4602      	mov	r2, r0
  409958:	460b      	mov	r3, r1
  40995a:	4640      	mov	r0, r8
  40995c:	4649      	mov	r1, r9
  40995e:	f001 f815 	bl	40a98c <__aeabi_dsub>
  409962:	4602      	mov	r2, r0
  409964:	460b      	mov	r3, r1
  409966:	e9dd 0100 	ldrd	r0, r1, [sp]
  40996a:	f001 f80f 	bl	40a98c <__aeabi_dsub>
  40996e:	ec41 0b10 	vmov	d0, r0, r1
  409972:	b003      	add	sp, #12
  409974:	ecbd 8b02 	vpop	{d8}
  409978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40997c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 4099d0 <__kernel_cos+0x258>
  409980:	f04f 0800 	mov.w	r8, #0
  409984:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4099f0 <__kernel_cos+0x278>
  409988:	ed8d 7b00 	vstr	d7, [sp]
  40998c:	e7c3      	b.n	409916 <__kernel_cos+0x19e>
  40998e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 4099d8 <__kernel_cos+0x260>
  409992:	b003      	add	sp, #12
  409994:	ecbd 8b02 	vpop	{d8}
  409998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40999c:	f3af 8000 	nop.w
  4099a0:	be8838d4 	.word	0xbe8838d4
  4099a4:	bda8fae9 	.word	0xbda8fae9
  4099a8:	bdb4b1c4 	.word	0xbdb4b1c4
  4099ac:	3e21ee9e 	.word	0x3e21ee9e
  4099b0:	809c52ad 	.word	0x809c52ad
  4099b4:	3e927e4f 	.word	0x3e927e4f
  4099b8:	19cb1590 	.word	0x19cb1590
  4099bc:	3efa01a0 	.word	0x3efa01a0
  4099c0:	16c15177 	.word	0x16c15177
  4099c4:	3f56c16c 	.word	0x3f56c16c
  4099c8:	5555554c 	.word	0x5555554c
  4099cc:	3fa55555 	.word	0x3fa55555
  4099d0:	00000000 	.word	0x00000000
  4099d4:	3fe70000 	.word	0x3fe70000
  4099d8:	00000000 	.word	0x00000000
  4099dc:	3ff00000 	.word	0x3ff00000
  4099e0:	3fe00000 	.word	0x3fe00000
  4099e4:	3ff00000 	.word	0x3ff00000
  4099e8:	3fd33332 	.word	0x3fd33332
  4099ec:	3fe90000 	.word	0x3fe90000
  4099f0:	3fd20000 	.word	0x3fd20000
  4099f4:	00000000 	.word	0x00000000

004099f8 <__kernel_rem_pio2>:
  4099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4099fc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
  409a00:	461e      	mov	r6, r3
  409a02:	4cc4      	ldr	r4, [pc, #784]	; (409d14 <__kernel_rem_pio2+0x31c>)
  409a04:	930a      	str	r3, [sp, #40]	; 0x28
  409a06:	1ed3      	subs	r3, r2, #3
  409a08:	9003      	str	r0, [sp, #12]
  409a0a:	3e01      	subs	r6, #1
  409a0c:	fb84 0403 	smull	r0, r4, r4, r3
  409a10:	17db      	asrs	r3, r3, #31
  409a12:	4dc1      	ldr	r5, [pc, #772]	; (409d18 <__kernel_rem_pio2+0x320>)
  409a14:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  409a18:	98a4      	ldr	r0, [sp, #656]	; 0x290
  409a1a:	9108      	str	r1, [sp, #32]
  409a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409a20:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  409a24:	9600      	str	r6, [sp, #0]
  409a26:	4619      	mov	r1, r3
  409a28:	930b      	str	r3, [sp, #44]	; 0x2c
  409a2a:	43db      	mvns	r3, r3
  409a2c:	1834      	adds	r4, r6, r0
  409a2e:	9007      	str	r0, [sp, #28]
  409a30:	eba1 0506 	sub.w	r5, r1, r6
  409a34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  409a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  409a3c:	9306      	str	r3, [sp, #24]
  409a3e:	d416      	bmi.n	409a6e <__kernel_rem_pio2+0x76>
  409a40:	442c      	add	r4, r5
  409a42:	ae22      	add	r6, sp, #136	; 0x88
  409a44:	9fa5      	ldr	r7, [sp, #660]	; 0x294
  409a46:	3401      	adds	r4, #1
  409a48:	e008      	b.n	409a5c <__kernel_rem_pio2+0x64>
  409a4a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  409a4e:	3501      	adds	r5, #1
  409a50:	f001 f8ea 	bl	40ac28 <__aeabi_i2d>
  409a54:	42a5      	cmp	r5, r4
  409a56:	e8e6 0102 	strd	r0, r1, [r6], #8
  409a5a:	d008      	beq.n	409a6e <__kernel_rem_pio2+0x76>
  409a5c:	2d00      	cmp	r5, #0
  409a5e:	daf4      	bge.n	409a4a <__kernel_rem_pio2+0x52>
  409a60:	3501      	adds	r5, #1
  409a62:	2000      	movs	r0, #0
  409a64:	2100      	movs	r1, #0
  409a66:	42a5      	cmp	r5, r4
  409a68:	e8e6 0102 	strd	r0, r1, [r6], #8
  409a6c:	d1f6      	bne.n	409a5c <__kernel_rem_pio2+0x64>
  409a6e:	9b07      	ldr	r3, [sp, #28]
  409a70:	2b00      	cmp	r3, #0
  409a72:	db2a      	blt.n	409aca <__kernel_rem_pio2+0xd2>
  409a74:	9b07      	ldr	r3, [sp, #28]
  409a76:	af22      	add	r7, sp, #136	; 0x88
  409a78:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
  409a7c:	f103 0b01 	add.w	fp, r3, #1
  409a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a82:	463d      	mov	r5, r7
  409a84:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  409a88:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
  409a8c:	9b00      	ldr	r3, [sp, #0]
  409a8e:	2b00      	cmp	r3, #0
  409a90:	f2c0 818d 	blt.w	409dae <__kernel_rem_pio2+0x3b6>
  409a94:	f8dd 900c 	ldr.w	r9, [sp, #12]
  409a98:	eb05 040a 	add.w	r4, r5, sl
  409a9c:	2600      	movs	r6, #0
  409a9e:	2700      	movs	r7, #0
  409aa0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409aa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
  409aa8:	f001 f924 	bl	40acf4 <__aeabi_dmul>
  409aac:	4602      	mov	r2, r0
  409aae:	460b      	mov	r3, r1
  409ab0:	4630      	mov	r0, r6
  409ab2:	4639      	mov	r1, r7
  409ab4:	f000 ff6c 	bl	40a990 <__adddf3>
  409ab8:	42a5      	cmp	r5, r4
  409aba:	4606      	mov	r6, r0
  409abc:	460f      	mov	r7, r1
  409abe:	d1ef      	bne.n	409aa0 <__kernel_rem_pio2+0xa8>
  409ac0:	3508      	adds	r5, #8
  409ac2:	455d      	cmp	r5, fp
  409ac4:	e8e8 6702 	strd	r6, r7, [r8], #8
  409ac8:	d1e0      	bne.n	409a8c <__kernel_rem_pio2+0x94>
  409aca:	9907      	ldr	r1, [sp, #28]
  409acc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  409ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409ad2:	440b      	add	r3, r1
  409ad4:	460d      	mov	r5, r1
  409ad6:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
  409ada:	a90e      	add	r1, sp, #56	; 0x38
  409adc:	009b      	lsls	r3, r3, #2
  409ade:	00d2      	lsls	r2, r2, #3
  409ae0:	9205      	str	r2, [sp, #20]
  409ae2:	1d1a      	adds	r2, r3, #4
  409ae4:	440b      	add	r3, r1
  409ae6:	930c      	str	r3, [sp, #48]	; 0x30
  409ae8:	460b      	mov	r3, r1
  409aea:	4413      	add	r3, r2
  409aec:	930d      	str	r3, [sp, #52]	; 0x34
  409aee:	00ec      	lsls	r4, r5, #3
  409af0:	ab9a      	add	r3, sp, #616	; 0x268
  409af2:	2d00      	cmp	r5, #0
  409af4:	4423      	add	r3, r4
  409af6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  409afa:	dd28      	ble.n	409b4e <__kernel_rem_pio2+0x156>
  409afc:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  409b00:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
  409b04:	445c      	add	r4, fp
  409b06:	2200      	movs	r2, #0
  409b08:	4b84      	ldr	r3, [pc, #528]	; (409d1c <__kernel_rem_pio2+0x324>)
  409b0a:	4630      	mov	r0, r6
  409b0c:	4639      	mov	r1, r7
  409b0e:	f001 f8f1 	bl	40acf4 <__aeabi_dmul>
  409b12:	f001 fb89 	bl	40b228 <__aeabi_d2iz>
  409b16:	f001 f887 	bl	40ac28 <__aeabi_i2d>
  409b1a:	2200      	movs	r2, #0
  409b1c:	4b80      	ldr	r3, [pc, #512]	; (409d20 <__kernel_rem_pio2+0x328>)
  409b1e:	4680      	mov	r8, r0
  409b20:	4689      	mov	r9, r1
  409b22:	f001 f8e7 	bl	40acf4 <__aeabi_dmul>
  409b26:	4602      	mov	r2, r0
  409b28:	460b      	mov	r3, r1
  409b2a:	4630      	mov	r0, r6
  409b2c:	4639      	mov	r1, r7
  409b2e:	f000 ff2d 	bl	40a98c <__aeabi_dsub>
  409b32:	f001 fb79 	bl	40b228 <__aeabi_d2iz>
  409b36:	4649      	mov	r1, r9
  409b38:	f84a 0f04 	str.w	r0, [sl, #4]!
  409b3c:	4640      	mov	r0, r8
  409b3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409b42:	f000 ff25 	bl	40a990 <__adddf3>
  409b46:	4606      	mov	r6, r0
  409b48:	455c      	cmp	r4, fp
  409b4a:	460f      	mov	r7, r1
  409b4c:	d1db      	bne.n	409b06 <__kernel_rem_pio2+0x10e>
  409b4e:	9c06      	ldr	r4, [sp, #24]
  409b50:	ec47 6b10 	vmov	d0, r6, r7
  409b54:	4620      	mov	r0, r4
  409b56:	f000 fe83 	bl	40a860 <scalbn>
  409b5a:	2200      	movs	r2, #0
  409b5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  409b60:	ee10 0a10 	vmov	r0, s0
  409b64:	ec57 6b10 	vmov	r6, r7, d0
  409b68:	4639      	mov	r1, r7
  409b6a:	f001 f8c3 	bl	40acf4 <__aeabi_dmul>
  409b6e:	ec41 0b10 	vmov	d0, r0, r1
  409b72:	f000 fdb5 	bl	40a6e0 <floor>
  409b76:	2200      	movs	r2, #0
  409b78:	4b6a      	ldr	r3, [pc, #424]	; (409d24 <__kernel_rem_pio2+0x32c>)
  409b7a:	ec51 0b10 	vmov	r0, r1, d0
  409b7e:	f001 f8b9 	bl	40acf4 <__aeabi_dmul>
  409b82:	4602      	mov	r2, r0
  409b84:	460b      	mov	r3, r1
  409b86:	4630      	mov	r0, r6
  409b88:	4639      	mov	r1, r7
  409b8a:	f000 feff 	bl	40a98c <__aeabi_dsub>
  409b8e:	460f      	mov	r7, r1
  409b90:	4606      	mov	r6, r0
  409b92:	f001 fb49 	bl	40b228 <__aeabi_d2iz>
  409b96:	4680      	mov	r8, r0
  409b98:	f001 f846 	bl	40ac28 <__aeabi_i2d>
  409b9c:	4602      	mov	r2, r0
  409b9e:	460b      	mov	r3, r1
  409ba0:	4630      	mov	r0, r6
  409ba2:	4639      	mov	r1, r7
  409ba4:	f000 fef2 	bl	40a98c <__aeabi_dsub>
  409ba8:	2c00      	cmp	r4, #0
  409baa:	4606      	mov	r6, r0
  409bac:	460f      	mov	r7, r1
  409bae:	f340 80eb 	ble.w	409d88 <__kernel_rem_pio2+0x390>
  409bb2:	1e68      	subs	r0, r5, #1
  409bb4:	ab0e      	add	r3, sp, #56	; 0x38
  409bb6:	f1c4 0218 	rsb	r2, r4, #24
  409bba:	f1c4 0117 	rsb	r1, r4, #23
  409bbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  409bc2:	fa43 f402 	asr.w	r4, r3, r2
  409bc6:	fa04 f902 	lsl.w	r9, r4, r2
  409bca:	44a0      	add	r8, r4
  409bcc:	aa0e      	add	r2, sp, #56	; 0x38
  409bce:	ebc9 0303 	rsb	r3, r9, r3
  409bd2:	fa43 f901 	asr.w	r9, r3, r1
  409bd6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  409bda:	f1b9 0f00 	cmp.w	r9, #0
  409bde:	dd21      	ble.n	409c24 <__kernel_rem_pio2+0x22c>
  409be0:	2d00      	cmp	r5, #0
  409be2:	f108 0801 	add.w	r8, r8, #1
  409be6:	f340 80a1 	ble.w	409d2c <__kernel_rem_pio2+0x334>
  409bea:	2300      	movs	r3, #0
  409bec:	aa0d      	add	r2, sp, #52	; 0x34
  409bee:	461c      	mov	r4, r3
  409bf0:	e008      	b.n	409c04 <__kernel_rem_pio2+0x20c>
  409bf2:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  409bf6:	b108      	cbz	r0, 409bfc <__kernel_rem_pio2+0x204>
  409bf8:	2401      	movs	r4, #1
  409bfa:	6011      	str	r1, [r2, #0]
  409bfc:	3301      	adds	r3, #1
  409bfe:	429d      	cmp	r5, r3
  409c00:	f340 8095 	ble.w	409d2e <__kernel_rem_pio2+0x336>
  409c04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  409c08:	f852 0f04 	ldr.w	r0, [r2, #4]!
  409c0c:	2c00      	cmp	r4, #0
  409c0e:	d0f0      	beq.n	409bf2 <__kernel_rem_pio2+0x1fa>
  409c10:	1a09      	subs	r1, r1, r0
  409c12:	e7f1      	b.n	409bf8 <__kernel_rem_pio2+0x200>
  409c14:	2200      	movs	r2, #0
  409c16:	4b44      	ldr	r3, [pc, #272]	; (409d28 <__kernel_rem_pio2+0x330>)
  409c18:	f001 faf2 	bl	40b200 <__aeabi_dcmpge>
  409c1c:	2800      	cmp	r0, #0
  409c1e:	f040 80cf 	bne.w	409dc0 <__kernel_rem_pio2+0x3c8>
  409c22:	4681      	mov	r9, r0
  409c24:	4630      	mov	r0, r6
  409c26:	4639      	mov	r1, r7
  409c28:	2200      	movs	r2, #0
  409c2a:	2300      	movs	r3, #0
  409c2c:	f001 faca 	bl	40b1c4 <__aeabi_dcmpeq>
  409c30:	2800      	cmp	r0, #0
  409c32:	f000 80d8 	beq.w	409de6 <__kernel_rem_pio2+0x3ee>
  409c36:	f105 3aff 	add.w	sl, r5, #4294967295
  409c3a:	9b07      	ldr	r3, [sp, #28]
  409c3c:	4553      	cmp	r3, sl
  409c3e:	dc0d      	bgt.n	409c5c <__kernel_rem_pio2+0x264>
  409c40:	ab0e      	add	r3, sp, #56	; 0x38
  409c42:	2200      	movs	r2, #0
  409c44:	980d      	ldr	r0, [sp, #52]	; 0x34
  409c46:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  409c4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  409c4e:	4283      	cmp	r3, r0
  409c50:	ea42 0201 	orr.w	r2, r2, r1
  409c54:	d1f9      	bne.n	409c4a <__kernel_rem_pio2+0x252>
  409c56:	2a00      	cmp	r2, #0
  409c58:	f040 8228 	bne.w	40a0ac <__kernel_rem_pio2+0x6b4>
  409c5c:	9b07      	ldr	r3, [sp, #28]
  409c5e:	aa0e      	add	r2, sp, #56	; 0x38
  409c60:	3b01      	subs	r3, #1
  409c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409c66:	2b00      	cmp	r3, #0
  409c68:	f040 8239 	bne.w	40a0de <__kernel_rem_pio2+0x6e6>
  409c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409c6e:	2301      	movs	r3, #1
  409c70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  409c74:	3301      	adds	r3, #1
  409c76:	2900      	cmp	r1, #0
  409c78:	d0fa      	beq.n	409c70 <__kernel_rem_pio2+0x278>
  409c7a:	18eb      	adds	r3, r5, r3
  409c7c:	f105 0a01 	add.w	sl, r5, #1
  409c80:	459a      	cmp	sl, r3
  409c82:	9309      	str	r3, [sp, #36]	; 0x24
  409c84:	dc3c      	bgt.n	409d00 <__kernel_rem_pio2+0x308>
  409c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409c88:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  409c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
  409c8e:	4453      	add	r3, sl
  409c90:	440d      	add	r5, r1
  409c92:	4499      	add	r9, r3
  409c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409c96:	eb03 0b01 	add.w	fp, r3, r1
  409c9a:	ab22      	add	r3, sp, #136	; 0x88
  409c9c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
  409ca0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
  409ca2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  409ca6:	ab22      	add	r3, sp, #136	; 0x88
  409ca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  409cac:	9304      	str	r3, [sp, #16]
  409cae:	ab72      	add	r3, sp, #456	; 0x1c8
  409cb0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
  409cb4:	f859 0f04 	ldr.w	r0, [r9, #4]!
  409cb8:	f000 ffb6 	bl	40ac28 <__aeabi_i2d>
  409cbc:	9b00      	ldr	r3, [sp, #0]
  409cbe:	2b00      	cmp	r3, #0
  409cc0:	e8e8 0102 	strd	r0, r1, [r8], #8
  409cc4:	db1e      	blt.n	409d04 <__kernel_rem_pio2+0x30c>
  409cc6:	9b05      	ldr	r3, [sp, #20]
  409cc8:	4644      	mov	r4, r8
  409cca:	f8dd b00c 	ldr.w	fp, [sp, #12]
  409cce:	2600      	movs	r6, #0
  409cd0:	eb08 0503 	add.w	r5, r8, r3
  409cd4:	2700      	movs	r7, #0
  409cd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409cda:	e8fb 0102 	ldrd	r0, r1, [fp], #8
  409cde:	f001 f809 	bl	40acf4 <__aeabi_dmul>
  409ce2:	4602      	mov	r2, r0
  409ce4:	460b      	mov	r3, r1
  409ce6:	4630      	mov	r0, r6
  409ce8:	4639      	mov	r1, r7
  409cea:	f000 fe51 	bl	40a990 <__adddf3>
  409cee:	42ac      	cmp	r4, r5
  409cf0:	4606      	mov	r6, r0
  409cf2:	460f      	mov	r7, r1
  409cf4:	d1ef      	bne.n	409cd6 <__kernel_rem_pio2+0x2de>
  409cf6:	9b04      	ldr	r3, [sp, #16]
  409cf8:	4598      	cmp	r8, r3
  409cfa:	e8ea 6702 	strd	r6, r7, [sl], #8
  409cfe:	d1d9      	bne.n	409cb4 <__kernel_rem_pio2+0x2bc>
  409d00:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409d02:	e6f4      	b.n	409aee <__kernel_rem_pio2+0xf6>
  409d04:	9b04      	ldr	r3, [sp, #16]
  409d06:	2600      	movs	r6, #0
  409d08:	2700      	movs	r7, #0
  409d0a:	4598      	cmp	r8, r3
  409d0c:	e8ea 6702 	strd	r6, r7, [sl], #8
  409d10:	d1d0      	bne.n	409cb4 <__kernel_rem_pio2+0x2bc>
  409d12:	e7f5      	b.n	409d00 <__kernel_rem_pio2+0x308>
  409d14:	2aaaaaab 	.word	0x2aaaaaab
  409d18:	00413c98 	.word	0x00413c98
  409d1c:	3e700000 	.word	0x3e700000
  409d20:	41700000 	.word	0x41700000
  409d24:	40200000 	.word	0x40200000
  409d28:	3fe00000 	.word	0x3fe00000
  409d2c:	2400      	movs	r4, #0
  409d2e:	9b06      	ldr	r3, [sp, #24]
  409d30:	2b00      	cmp	r3, #0
  409d32:	dd0c      	ble.n	409d4e <__kernel_rem_pio2+0x356>
  409d34:	2b01      	cmp	r3, #1
  409d36:	d030      	beq.n	409d9a <__kernel_rem_pio2+0x3a2>
  409d38:	2b02      	cmp	r3, #2
  409d3a:	d108      	bne.n	409d4e <__kernel_rem_pio2+0x356>
  409d3c:	1e6a      	subs	r2, r5, #1
  409d3e:	ab0e      	add	r3, sp, #56	; 0x38
  409d40:	a90e      	add	r1, sp, #56	; 0x38
  409d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409d46:	f3c3 0315 	ubfx	r3, r3, #0, #22
  409d4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409d4e:	f1b9 0f02 	cmp.w	r9, #2
  409d52:	f47f af67 	bne.w	409c24 <__kernel_rem_pio2+0x22c>
  409d56:	4632      	mov	r2, r6
  409d58:	463b      	mov	r3, r7
  409d5a:	2000      	movs	r0, #0
  409d5c:	49bc      	ldr	r1, [pc, #752]	; (40a050 <__kernel_rem_pio2+0x658>)
  409d5e:	f000 fe15 	bl	40a98c <__aeabi_dsub>
  409d62:	4606      	mov	r6, r0
  409d64:	460f      	mov	r7, r1
  409d66:	2c00      	cmp	r4, #0
  409d68:	f43f af5c 	beq.w	409c24 <__kernel_rem_pio2+0x22c>
  409d6c:	9806      	ldr	r0, [sp, #24]
  409d6e:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 40a048 <__kernel_rem_pio2+0x650>
  409d72:	f000 fd75 	bl	40a860 <scalbn>
  409d76:	4630      	mov	r0, r6
  409d78:	4639      	mov	r1, r7
  409d7a:	ec53 2b10 	vmov	r2, r3, d0
  409d7e:	f000 fe05 	bl	40a98c <__aeabi_dsub>
  409d82:	4606      	mov	r6, r0
  409d84:	460f      	mov	r7, r1
  409d86:	e74d      	b.n	409c24 <__kernel_rem_pio2+0x22c>
  409d88:	f47f af44 	bne.w	409c14 <__kernel_rem_pio2+0x21c>
  409d8c:	1e6b      	subs	r3, r5, #1
  409d8e:	aa0e      	add	r2, sp, #56	; 0x38
  409d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409d94:	ea4f 59e3 	mov.w	r9, r3, asr #23
  409d98:	e71f      	b.n	409bda <__kernel_rem_pio2+0x1e2>
  409d9a:	1e6a      	subs	r2, r5, #1
  409d9c:	ab0e      	add	r3, sp, #56	; 0x38
  409d9e:	a90e      	add	r1, sp, #56	; 0x38
  409da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409da4:	f3c3 0316 	ubfx	r3, r3, #0, #23
  409da8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409dac:	e7cf      	b.n	409d4e <__kernel_rem_pio2+0x356>
  409dae:	3508      	adds	r5, #8
  409db0:	2600      	movs	r6, #0
  409db2:	2700      	movs	r7, #0
  409db4:	455d      	cmp	r5, fp
  409db6:	e8e8 6702 	strd	r6, r7, [r8], #8
  409dba:	f47f ae67 	bne.w	409a8c <__kernel_rem_pio2+0x94>
  409dbe:	e684      	b.n	409aca <__kernel_rem_pio2+0xd2>
  409dc0:	2d00      	cmp	r5, #0
  409dc2:	f108 0801 	add.w	r8, r8, #1
  409dc6:	bfc8      	it	gt
  409dc8:	f04f 0902 	movgt.w	r9, #2
  409dcc:	f73f af0d 	bgt.w	409bea <__kernel_rem_pio2+0x1f2>
  409dd0:	4632      	mov	r2, r6
  409dd2:	463b      	mov	r3, r7
  409dd4:	2000      	movs	r0, #0
  409dd6:	499e      	ldr	r1, [pc, #632]	; (40a050 <__kernel_rem_pio2+0x658>)
  409dd8:	f000 fdd8 	bl	40a98c <__aeabi_dsub>
  409ddc:	f04f 0902 	mov.w	r9, #2
  409de0:	4606      	mov	r6, r0
  409de2:	460f      	mov	r7, r1
  409de4:	e71e      	b.n	409c24 <__kernel_rem_pio2+0x22c>
  409de6:	9b06      	ldr	r3, [sp, #24]
  409de8:	f8cd 900c 	str.w	r9, [sp, #12]
  409dec:	4258      	negs	r0, r3
  409dee:	f8cd 8014 	str.w	r8, [sp, #20]
  409df2:	ec47 6b10 	vmov	d0, r6, r7
  409df6:	f000 fd33 	bl	40a860 <scalbn>
  409dfa:	2200      	movs	r2, #0
  409dfc:	ee10 0a10 	vmov	r0, s0
  409e00:	4b94      	ldr	r3, [pc, #592]	; (40a054 <__kernel_rem_pio2+0x65c>)
  409e02:	ec57 6b10 	vmov	r6, r7, d0
  409e06:	4639      	mov	r1, r7
  409e08:	f001 f9fa 	bl	40b200 <__aeabi_dcmpge>
  409e0c:	2800      	cmp	r0, #0
  409e0e:	f000 81e8 	beq.w	40a1e2 <__kernel_rem_pio2+0x7ea>
  409e12:	2200      	movs	r2, #0
  409e14:	4b90      	ldr	r3, [pc, #576]	; (40a058 <__kernel_rem_pio2+0x660>)
  409e16:	4630      	mov	r0, r6
  409e18:	4639      	mov	r1, r7
  409e1a:	f000 ff6b 	bl	40acf4 <__aeabi_dmul>
  409e1e:	9b06      	ldr	r3, [sp, #24]
  409e20:	f105 0a01 	add.w	sl, r5, #1
  409e24:	3318      	adds	r3, #24
  409e26:	9306      	str	r3, [sp, #24]
  409e28:	f001 f9fe 	bl	40b228 <__aeabi_d2iz>
  409e2c:	4604      	mov	r4, r0
  409e2e:	f000 fefb 	bl	40ac28 <__aeabi_i2d>
  409e32:	2200      	movs	r2, #0
  409e34:	4b87      	ldr	r3, [pc, #540]	; (40a054 <__kernel_rem_pio2+0x65c>)
  409e36:	f000 ff5d 	bl	40acf4 <__aeabi_dmul>
  409e3a:	460b      	mov	r3, r1
  409e3c:	4602      	mov	r2, r0
  409e3e:	4639      	mov	r1, r7
  409e40:	4630      	mov	r0, r6
  409e42:	f000 fda3 	bl	40a98c <__aeabi_dsub>
  409e46:	f001 f9ef 	bl	40b228 <__aeabi_d2iz>
  409e4a:	ab0e      	add	r3, sp, #56	; 0x38
  409e4c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409e50:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
  409e54:	9806      	ldr	r0, [sp, #24]
  409e56:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 40a048 <__kernel_rem_pio2+0x650>
  409e5a:	f000 fd01 	bl	40a860 <scalbn>
  409e5e:	f1ba 0f00 	cmp.w	sl, #0
  409e62:	ec55 4b10 	vmov	r4, r5, d0
  409e66:	f2c0 80c1 	blt.w	409fec <__kernel_rem_pio2+0x5f4>
  409e6a:	f10a 0301 	add.w	r3, sl, #1
  409e6e:	af72      	add	r7, sp, #456	; 0x1c8
  409e70:	aa0e      	add	r2, sp, #56	; 0x38
  409e72:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  409e76:	9300      	str	r3, [sp, #0]
  409e78:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  409e7c:	eb07 0608 	add.w	r6, r7, r8
  409e80:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  409e84:	f000 fed0 	bl	40ac28 <__aeabi_i2d>
  409e88:	4622      	mov	r2, r4
  409e8a:	462b      	mov	r3, r5
  409e8c:	f000 ff32 	bl	40acf4 <__aeabi_dmul>
  409e90:	2200      	movs	r2, #0
  409e92:	4b71      	ldr	r3, [pc, #452]	; (40a058 <__kernel_rem_pio2+0x660>)
  409e94:	e966 0102 	strd	r0, r1, [r6, #-8]!
  409e98:	4620      	mov	r0, r4
  409e9a:	4629      	mov	r1, r5
  409e9c:	f000 ff2a 	bl	40acf4 <__aeabi_dmul>
  409ea0:	42be      	cmp	r6, r7
  409ea2:	4604      	mov	r4, r0
  409ea4:	460d      	mov	r5, r1
  409ea6:	d1eb      	bne.n	409e80 <__kernel_rem_pio2+0x488>
  409ea8:	f1a8 0b08 	sub.w	fp, r8, #8
  409eac:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  409eb0:	f8cd a018 	str.w	sl, [sp, #24]
  409eb4:	f04f 0800 	mov.w	r8, #0
  409eb8:	eb06 030b 	add.w	r3, r6, fp
  409ebc:	f8dd a01c 	ldr.w	sl, [sp, #28]
  409ec0:	f8cd 9010 	str.w	r9, [sp, #16]
  409ec4:	469b      	mov	fp, r3
  409ec6:	f1ba 0f00 	cmp.w	sl, #0
  409eca:	f2c0 808c 	blt.w	409fe6 <__kernel_rem_pio2+0x5ee>
  409ece:	f1b8 0f00 	cmp.w	r8, #0
  409ed2:	f2c0 8088 	blt.w	409fe6 <__kernel_rem_pio2+0x5ee>
  409ed6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 40a05c <__kernel_rem_pio2+0x664>
  409eda:	465d      	mov	r5, fp
  409edc:	2400      	movs	r4, #0
  409ede:	2600      	movs	r6, #0
  409ee0:	2700      	movs	r7, #0
  409ee2:	e001      	b.n	409ee8 <__kernel_rem_pio2+0x4f0>
  409ee4:	4544      	cmp	r4, r8
  409ee6:	dc10      	bgt.n	409f0a <__kernel_rem_pio2+0x512>
  409ee8:	3401      	adds	r4, #1
  409eea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  409eee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
  409ef2:	f000 feff 	bl	40acf4 <__aeabi_dmul>
  409ef6:	4602      	mov	r2, r0
  409ef8:	460b      	mov	r3, r1
  409efa:	4630      	mov	r0, r6
  409efc:	4639      	mov	r1, r7
  409efe:	f000 fd47 	bl	40a990 <__adddf3>
  409f02:	45a2      	cmp	sl, r4
  409f04:	4606      	mov	r6, r0
  409f06:	460f      	mov	r7, r1
  409f08:	daec      	bge.n	409ee4 <__kernel_rem_pio2+0x4ec>
  409f0a:	9b04      	ldr	r3, [sp, #16]
  409f0c:	f1ab 0b08 	sub.w	fp, fp, #8
  409f10:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  409f14:	f108 0801 	add.w	r8, r8, #1
  409f18:	e9c3 6700 	strd	r6, r7, [r3]
  409f1c:	9b00      	ldr	r3, [sp, #0]
  409f1e:	4598      	cmp	r8, r3
  409f20:	d1d1      	bne.n	409ec6 <__kernel_rem_pio2+0x4ce>
  409f22:	9ba4      	ldr	r3, [sp, #656]	; 0x290
  409f24:	f8dd a018 	ldr.w	sl, [sp, #24]
  409f28:	f8dd 9010 	ldr.w	r9, [sp, #16]
  409f2c:	2b03      	cmp	r3, #3
  409f2e:	d835      	bhi.n	409f9c <__kernel_rem_pio2+0x5a4>
  409f30:	e8df f013 	tbh	[pc, r3, lsl #1]
  409f34:	0004003b 	.word	0x0004003b
  409f38:	00d70004 	.word	0x00d70004
  409f3c:	9b00      	ldr	r3, [sp, #0]
  409f3e:	2000      	movs	r0, #0
  409f40:	2100      	movs	r1, #0
  409f42:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
  409f46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409f4a:	f000 fd21 	bl	40a990 <__adddf3>
  409f4e:	454c      	cmp	r4, r9
  409f50:	d1f9      	bne.n	409f46 <__kernel_rem_pio2+0x54e>
  409f52:	9b03      	ldr	r3, [sp, #12]
  409f54:	2b00      	cmp	r3, #0
  409f56:	f000 808b 	beq.w	40a070 <__kernel_rem_pio2+0x678>
  409f5a:	4602      	mov	r2, r0
  409f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409f60:	9d08      	ldr	r5, [sp, #32]
  409f62:	e885 000c 	stmia.w	r5, {r2, r3}
  409f66:	4602      	mov	r2, r0
  409f68:	460b      	mov	r3, r1
  409f6a:	e9d9 0100 	ldrd	r0, r1, [r9]
  409f6e:	f000 fd0d 	bl	40a98c <__aeabi_dsub>
  409f72:	f1ba 0f00 	cmp.w	sl, #0
  409f76:	dd0b      	ble.n	409f90 <__kernel_rem_pio2+0x598>
  409f78:	ad4c      	add	r5, sp, #304	; 0x130
  409f7a:	2401      	movs	r4, #1
  409f7c:	3401      	adds	r4, #1
  409f7e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  409f82:	f000 fd05 	bl	40a990 <__adddf3>
  409f86:	45a2      	cmp	sl, r4
  409f88:	daf8      	bge.n	409f7c <__kernel_rem_pio2+0x584>
  409f8a:	9b03      	ldr	r3, [sp, #12]
  409f8c:	2b00      	cmp	r3, #0
  409f8e:	d07c      	beq.n	40a08a <__kernel_rem_pio2+0x692>
  409f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409f94:	4602      	mov	r2, r0
  409f96:	9908      	ldr	r1, [sp, #32]
  409f98:	e9c1 2302 	strd	r2, r3, [r1, #8]
  409f9c:	9b05      	ldr	r3, [sp, #20]
  409f9e:	f003 0007 	and.w	r0, r3, #7
  409fa2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409faa:	9b00      	ldr	r3, [sp, #0]
  409fac:	2000      	movs	r0, #0
  409fae:	2100      	movs	r1, #0
  409fb0:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  409fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
  409fb8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  409fbc:	f000 fce8 	bl	40a990 <__adddf3>
  409fc0:	f1ba 3fff 	cmp.w	sl, #4294967295
  409fc4:	d1f6      	bne.n	409fb4 <__kernel_rem_pio2+0x5bc>
  409fc6:	9b03      	ldr	r3, [sp, #12]
  409fc8:	2b00      	cmp	r3, #0
  409fca:	d069      	beq.n	40a0a0 <__kernel_rem_pio2+0x6a8>
  409fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409fd0:	4602      	mov	r2, r0
  409fd2:	9908      	ldr	r1, [sp, #32]
  409fd4:	e9c1 2300 	strd	r2, r3, [r1]
  409fd8:	9b05      	ldr	r3, [sp, #20]
  409fda:	f003 0007 	and.w	r0, r3, #7
  409fde:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fe6:	2600      	movs	r6, #0
  409fe8:	2700      	movs	r7, #0
  409fea:	e78e      	b.n	409f0a <__kernel_rem_pio2+0x512>
  409fec:	9ba4      	ldr	r3, [sp, #656]	; 0x290
  409fee:	2b03      	cmp	r3, #3
  409ff0:	d8d4      	bhi.n	409f9c <__kernel_rem_pio2+0x5a4>
  409ff2:	e8df f003 	tbb	[pc, r3]
  409ff6:	3550      	.short	0x3550
  409ff8:	0235      	.short	0x0235
  409ffa:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  409ffe:	9b03      	ldr	r3, [sp, #12]
  40a000:	2000      	movs	r0, #0
  40a002:	2100      	movs	r1, #0
  40a004:	2b00      	cmp	r3, #0
  40a006:	f000 80da 	beq.w	40a1be <__kernel_rem_pio2+0x7c6>
  40a00a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40a00e:	4604      	mov	r4, r0
  40a010:	9f08      	ldr	r7, [sp, #32]
  40a012:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a016:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40a01a:	f8d9 0000 	ldr.w	r0, [r9]
  40a01e:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a022:	60fb      	str	r3, [r7, #12]
  40a024:	9b05      	ldr	r3, [sp, #20]
  40a026:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40a02a:	f8d9 5008 	ldr.w	r5, [r9, #8]
  40a02e:	6038      	str	r0, [r7, #0]
  40a030:	f003 0007 	and.w	r0, r3, #7
  40a034:	607a      	str	r2, [r7, #4]
  40a036:	60bd      	str	r5, [r7, #8]
  40a038:	613c      	str	r4, [r7, #16]
  40a03a:	6179      	str	r1, [r7, #20]
  40a03c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  40a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a044:	f3af 8000 	nop.w
  40a048:	00000000 	.word	0x00000000
  40a04c:	3ff00000 	.word	0x3ff00000
  40a050:	3ff00000 	.word	0x3ff00000
  40a054:	41700000 	.word	0x41700000
  40a058:	3e700000 	.word	0x3e700000
  40a05c:	00413ca8 	.word	0x00413ca8
  40a060:	9b03      	ldr	r3, [sp, #12]
  40a062:	2000      	movs	r0, #0
  40a064:	2100      	movs	r1, #0
  40a066:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  40a06a:	2b00      	cmp	r3, #0
  40a06c:	f47f af75 	bne.w	409f5a <__kernel_rem_pio2+0x562>
  40a070:	9b08      	ldr	r3, [sp, #32]
  40a072:	4602      	mov	r2, r0
  40a074:	e9c3 0100 	strd	r0, r1, [r3]
  40a078:	460b      	mov	r3, r1
  40a07a:	e9d9 0100 	ldrd	r0, r1, [r9]
  40a07e:	f000 fc85 	bl	40a98c <__aeabi_dsub>
  40a082:	f1ba 0f00 	cmp.w	sl, #0
  40a086:	f73f af77 	bgt.w	409f78 <__kernel_rem_pio2+0x580>
  40a08a:	460b      	mov	r3, r1
  40a08c:	4602      	mov	r2, r0
  40a08e:	9908      	ldr	r1, [sp, #32]
  40a090:	e9c1 2302 	strd	r2, r3, [r1, #8]
  40a094:	e782      	b.n	409f9c <__kernel_rem_pio2+0x5a4>
  40a096:	9b03      	ldr	r3, [sp, #12]
  40a098:	2000      	movs	r0, #0
  40a09a:	2100      	movs	r1, #0
  40a09c:	2b00      	cmp	r3, #0
  40a09e:	d195      	bne.n	409fcc <__kernel_rem_pio2+0x5d4>
  40a0a0:	460b      	mov	r3, r1
  40a0a2:	4602      	mov	r2, r0
  40a0a4:	9908      	ldr	r1, [sp, #32]
  40a0a6:	e9c1 2300 	strd	r2, r3, [r1]
  40a0aa:	e795      	b.n	409fd8 <__kernel_rem_pio2+0x5e0>
  40a0ac:	9a06      	ldr	r2, [sp, #24]
  40a0ae:	ab0e      	add	r3, sp, #56	; 0x38
  40a0b0:	f8cd 900c 	str.w	r9, [sp, #12]
  40a0b4:	3a18      	subs	r2, #24
  40a0b6:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  40a0ba:	f8cd 8014 	str.w	r8, [sp, #20]
  40a0be:	9206      	str	r2, [sp, #24]
  40a0c0:	2b00      	cmp	r3, #0
  40a0c2:	f47f aec7 	bne.w	409e54 <__kernel_rem_pio2+0x45c>
  40a0c6:	ab0e      	add	r3, sp, #56	; 0x38
  40a0c8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  40a0cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40a0d0:	f10a 3aff 	add.w	sl, sl, #4294967295
  40a0d4:	3a18      	subs	r2, #24
  40a0d6:	2900      	cmp	r1, #0
  40a0d8:	d0f8      	beq.n	40a0cc <__kernel_rem_pio2+0x6d4>
  40a0da:	9206      	str	r2, [sp, #24]
  40a0dc:	e6ba      	b.n	409e54 <__kernel_rem_pio2+0x45c>
  40a0de:	2301      	movs	r3, #1
  40a0e0:	e5cb      	b.n	409c7a <__kernel_rem_pio2+0x282>
  40a0e2:	f1ba 0f00 	cmp.w	sl, #0
  40a0e6:	dd8a      	ble.n	409ffe <__kernel_rem_pio2+0x606>
  40a0e8:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  40a0ec:	f108 0c08 	add.w	ip, r8, #8
  40a0f0:	eb09 0b08 	add.w	fp, r9, r8
  40a0f4:	f8cd 8010 	str.w	r8, [sp, #16]
  40a0f8:	44cc      	add	ip, r9
  40a0fa:	e9db 6700 	ldrd	r6, r7, [fp]
  40a0fe:	46e0      	mov	r8, ip
  40a100:	4630      	mov	r0, r6
  40a102:	4639      	mov	r1, r7
  40a104:	ed3b 7b02 	vldmdb	fp!, {d7}
  40a108:	ec53 2b17 	vmov	r2, r3, d7
  40a10c:	ed8d 7b00 	vstr	d7, [sp]
  40a110:	f000 fc3e 	bl	40a990 <__adddf3>
  40a114:	4604      	mov	r4, r0
  40a116:	460d      	mov	r5, r1
  40a118:	4622      	mov	r2, r4
  40a11a:	462b      	mov	r3, r5
  40a11c:	e9dd 0100 	ldrd	r0, r1, [sp]
  40a120:	f000 fc34 	bl	40a98c <__aeabi_dsub>
  40a124:	4602      	mov	r2, r0
  40a126:	460b      	mov	r3, r1
  40a128:	4630      	mov	r0, r6
  40a12a:	4639      	mov	r1, r7
  40a12c:	4626      	mov	r6, r4
  40a12e:	f000 fc2f 	bl	40a990 <__adddf3>
  40a132:	45cb      	cmp	fp, r9
  40a134:	462f      	mov	r7, r5
  40a136:	e968 0102 	strd	r0, r1, [r8, #-8]!
  40a13a:	e9cb 4500 	strd	r4, r5, [fp]
  40a13e:	d1df      	bne.n	40a100 <__kernel_rem_pio2+0x708>
  40a140:	f1ba 0f01 	cmp.w	sl, #1
  40a144:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40a148:	f77f af59 	ble.w	409ffe <__kernel_rem_pio2+0x606>
  40a14c:	f108 0408 	add.w	r4, r8, #8
  40a150:	44c8      	add	r8, r9
  40a152:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
  40a156:	444c      	add	r4, r9
  40a158:	4645      	mov	r5, r8
  40a15a:	e9d8 ab00 	ldrd	sl, fp, [r8]
  40a15e:	46a0      	mov	r8, r4
  40a160:	4652      	mov	r2, sl
  40a162:	465b      	mov	r3, fp
  40a164:	f8cd c010 	str.w	ip, [sp, #16]
  40a168:	ed35 7b02 	vldmdb	r5!, {d7}
  40a16c:	ec51 0b17 	vmov	r0, r1, d7
  40a170:	ed8d 7b00 	vstr	d7, [sp]
  40a174:	f000 fc0c 	bl	40a990 <__adddf3>
  40a178:	4606      	mov	r6, r0
  40a17a:	460f      	mov	r7, r1
  40a17c:	4632      	mov	r2, r6
  40a17e:	463b      	mov	r3, r7
  40a180:	e9dd 0100 	ldrd	r0, r1, [sp]
  40a184:	f000 fc02 	bl	40a98c <__aeabi_dsub>
  40a188:	4652      	mov	r2, sl
  40a18a:	465b      	mov	r3, fp
  40a18c:	46b2      	mov	sl, r6
  40a18e:	f000 fbff 	bl	40a990 <__adddf3>
  40a192:	f8dd c010 	ldr.w	ip, [sp, #16]
  40a196:	46bb      	mov	fp, r7
  40a198:	4565      	cmp	r5, ip
  40a19a:	e968 0102 	strd	r0, r1, [r8, #-8]!
  40a19e:	e9c5 6700 	strd	r6, r7, [r5]
  40a1a2:	d1dd      	bne.n	40a160 <__kernel_rem_pio2+0x768>
  40a1a4:	2000      	movs	r0, #0
  40a1a6:	2100      	movs	r1, #0
  40a1a8:	ad4e      	add	r5, sp, #312	; 0x138
  40a1aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40a1ae:	f000 fbef 	bl	40a990 <__adddf3>
  40a1b2:	42ac      	cmp	r4, r5
  40a1b4:	d1f9      	bne.n	40a1aa <__kernel_rem_pio2+0x7b2>
  40a1b6:	9b03      	ldr	r3, [sp, #12]
  40a1b8:	2b00      	cmp	r3, #0
  40a1ba:	f47f af26 	bne.w	40a00a <__kernel_rem_pio2+0x612>
  40a1be:	9f08      	ldr	r7, [sp, #32]
  40a1c0:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
  40a1c4:	e9d9 4500 	ldrd	r4, r5, [r9]
  40a1c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  40a1cc:	9b05      	ldr	r3, [sp, #20]
  40a1ce:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40a1d2:	f003 0007 	and.w	r0, r3, #7
  40a1d6:	e9c7 4500 	strd	r4, r5, [r7]
  40a1da:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  40a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1e2:	4630      	mov	r0, r6
  40a1e4:	4639      	mov	r1, r7
  40a1e6:	f001 f81f 	bl	40b228 <__aeabi_d2iz>
  40a1ea:	ab0e      	add	r3, sp, #56	; 0x38
  40a1ec:	46aa      	mov	sl, r5
  40a1ee:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40a1f2:	e62f      	b.n	409e54 <__kernel_rem_pio2+0x45c>
  40a1f4:	0000      	movs	r0, r0
	...

0040a1f8 <__kernel_sin>:
  40a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a1fc:	ec55 4b10 	vmov	r4, r5, d0
  40a200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  40a204:	4682      	mov	sl, r0
  40a206:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  40a20a:	ed2d 8b02 	vpush	{d8}
  40a20e:	eeb0 8a41 	vmov.f32	s16, s2
  40a212:	eef0 8a61 	vmov.f32	s17, s3
  40a216:	b083      	sub	sp, #12
  40a218:	da07      	bge.n	40a22a <__kernel_sin+0x32>
  40a21a:	ee10 0a10 	vmov	r0, s0
  40a21e:	4629      	mov	r1, r5
  40a220:	f001 f802 	bl	40b228 <__aeabi_d2iz>
  40a224:	2800      	cmp	r0, #0
  40a226:	f000 808c 	beq.w	40a342 <__kernel_sin+0x14a>
  40a22a:	4622      	mov	r2, r4
  40a22c:	462b      	mov	r3, r5
  40a22e:	4620      	mov	r0, r4
  40a230:	4629      	mov	r1, r5
  40a232:	f000 fd5f 	bl	40acf4 <__aeabi_dmul>
  40a236:	4606      	mov	r6, r0
  40a238:	460f      	mov	r7, r1
  40a23a:	4622      	mov	r2, r4
  40a23c:	462b      	mov	r3, r5
  40a23e:	f000 fd59 	bl	40acf4 <__aeabi_dmul>
  40a242:	4680      	mov	r8, r0
  40a244:	4689      	mov	r9, r1
  40a246:	4630      	mov	r0, r6
  40a248:	4639      	mov	r1, r7
  40a24a:	a344      	add	r3, pc, #272	; (adr r3, 40a35c <__kernel_sin+0x164>)
  40a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a250:	f000 fd50 	bl	40acf4 <__aeabi_dmul>
  40a254:	a343      	add	r3, pc, #268	; (adr r3, 40a364 <__kernel_sin+0x16c>)
  40a256:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a25a:	f000 fb97 	bl	40a98c <__aeabi_dsub>
  40a25e:	4632      	mov	r2, r6
  40a260:	463b      	mov	r3, r7
  40a262:	f000 fd47 	bl	40acf4 <__aeabi_dmul>
  40a266:	a341      	add	r3, pc, #260	; (adr r3, 40a36c <__kernel_sin+0x174>)
  40a268:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a26c:	f000 fb90 	bl	40a990 <__adddf3>
  40a270:	4632      	mov	r2, r6
  40a272:	463b      	mov	r3, r7
  40a274:	f000 fd3e 	bl	40acf4 <__aeabi_dmul>
  40a278:	a33e      	add	r3, pc, #248	; (adr r3, 40a374 <__kernel_sin+0x17c>)
  40a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a27e:	f000 fb85 	bl	40a98c <__aeabi_dsub>
  40a282:	4632      	mov	r2, r6
  40a284:	463b      	mov	r3, r7
  40a286:	f000 fd35 	bl	40acf4 <__aeabi_dmul>
  40a28a:	a33c      	add	r3, pc, #240	; (adr r3, 40a37c <__kernel_sin+0x184>)
  40a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a290:	f000 fb7e 	bl	40a990 <__adddf3>
  40a294:	e9cd 0100 	strd	r0, r1, [sp]
  40a298:	f1ba 0f00 	cmp.w	sl, #0
  40a29c:	d037      	beq.n	40a30e <__kernel_sin+0x116>
  40a29e:	2200      	movs	r2, #0
  40a2a0:	4b2d      	ldr	r3, [pc, #180]	; (40a358 <__kernel_sin+0x160>)
  40a2a2:	ec51 0b18 	vmov	r0, r1, d8
  40a2a6:	f000 fd25 	bl	40acf4 <__aeabi_dmul>
  40a2aa:	4682      	mov	sl, r0
  40a2ac:	468b      	mov	fp, r1
  40a2ae:	4640      	mov	r0, r8
  40a2b0:	4649      	mov	r1, r9
  40a2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a2b6:	f000 fd1d 	bl	40acf4 <__aeabi_dmul>
  40a2ba:	4602      	mov	r2, r0
  40a2bc:	460b      	mov	r3, r1
  40a2be:	4650      	mov	r0, sl
  40a2c0:	4659      	mov	r1, fp
  40a2c2:	f000 fb63 	bl	40a98c <__aeabi_dsub>
  40a2c6:	4632      	mov	r2, r6
  40a2c8:	463b      	mov	r3, r7
  40a2ca:	f000 fd13 	bl	40acf4 <__aeabi_dmul>
  40a2ce:	ec53 2b18 	vmov	r2, r3, d8
  40a2d2:	f000 fb5b 	bl	40a98c <__aeabi_dsub>
  40a2d6:	4606      	mov	r6, r0
  40a2d8:	460f      	mov	r7, r1
  40a2da:	4640      	mov	r0, r8
  40a2dc:	4649      	mov	r1, r9
  40a2de:	a31c      	add	r3, pc, #112	; (adr r3, 40a350 <__kernel_sin+0x158>)
  40a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2e4:	f000 fd06 	bl	40acf4 <__aeabi_dmul>
  40a2e8:	4602      	mov	r2, r0
  40a2ea:	460b      	mov	r3, r1
  40a2ec:	4630      	mov	r0, r6
  40a2ee:	4639      	mov	r1, r7
  40a2f0:	f000 fb4e 	bl	40a990 <__adddf3>
  40a2f4:	4602      	mov	r2, r0
  40a2f6:	460b      	mov	r3, r1
  40a2f8:	4620      	mov	r0, r4
  40a2fa:	4629      	mov	r1, r5
  40a2fc:	f000 fb46 	bl	40a98c <__aeabi_dsub>
  40a300:	ec41 0b10 	vmov	d0, r0, r1
  40a304:	b003      	add	sp, #12
  40a306:	ecbd 8b02 	vpop	{d8}
  40a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a30e:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a312:	4630      	mov	r0, r6
  40a314:	4639      	mov	r1, r7
  40a316:	f000 fced 	bl	40acf4 <__aeabi_dmul>
  40a31a:	a30d      	add	r3, pc, #52	; (adr r3, 40a350 <__kernel_sin+0x158>)
  40a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a320:	f000 fb34 	bl	40a98c <__aeabi_dsub>
  40a324:	4642      	mov	r2, r8
  40a326:	464b      	mov	r3, r9
  40a328:	f000 fce4 	bl	40acf4 <__aeabi_dmul>
  40a32c:	4622      	mov	r2, r4
  40a32e:	462b      	mov	r3, r5
  40a330:	f000 fb2e 	bl	40a990 <__adddf3>
  40a334:	ec41 0b10 	vmov	d0, r0, r1
  40a338:	b003      	add	sp, #12
  40a33a:	ecbd 8b02 	vpop	{d8}
  40a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a342:	ec45 4b10 	vmov	d0, r4, r5
  40a346:	b003      	add	sp, #12
  40a348:	ecbd 8b02 	vpop	{d8}
  40a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a350:	55555549 	.word	0x55555549
  40a354:	3fc55555 	.word	0x3fc55555
  40a358:	3fe00000 	.word	0x3fe00000
  40a35c:	5acfd57c 	.word	0x5acfd57c
  40a360:	3de5d93a 	.word	0x3de5d93a
  40a364:	8a2b9ceb 	.word	0x8a2b9ceb
  40a368:	3e5ae5e6 	.word	0x3e5ae5e6
  40a36c:	57b1fe7d 	.word	0x57b1fe7d
  40a370:	3ec71de3 	.word	0x3ec71de3
  40a374:	19c161d5 	.word	0x19c161d5
  40a378:	3f2a01a0 	.word	0x3f2a01a0
  40a37c:	1110f8a6 	.word	0x1110f8a6
  40a380:	3f811111 	.word	0x3f811111
  40a384:	00000000 	.word	0x00000000

0040a388 <atan>:
  40a388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a38c:	ec55 4b10 	vmov	r4, r5, d0
  40a390:	4bc5      	ldr	r3, [pc, #788]	; (40a6a8 <atan+0x320>)
  40a392:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
  40a396:	46ab      	mov	fp, r5
  40a398:	4598      	cmp	r8, r3
  40a39a:	dd11      	ble.n	40a3c0 <atan+0x38>
  40a39c:	4bc3      	ldr	r3, [pc, #780]	; (40a6ac <atan+0x324>)
  40a39e:	4598      	cmp	r8, r3
  40a3a0:	dc04      	bgt.n	40a3ac <atan+0x24>
  40a3a2:	f040 80e3 	bne.w	40a56c <atan+0x1e4>
  40a3a6:	2c00      	cmp	r4, #0
  40a3a8:	f000 80e0 	beq.w	40a56c <atan+0x1e4>
  40a3ac:	4620      	mov	r0, r4
  40a3ae:	4629      	mov	r1, r5
  40a3b0:	4622      	mov	r2, r4
  40a3b2:	462b      	mov	r3, r5
  40a3b4:	f000 faec 	bl	40a990 <__adddf3>
  40a3b8:	ec41 0b10 	vmov	d0, r0, r1
  40a3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3c0:	4bbb      	ldr	r3, [pc, #748]	; (40a6b0 <atan+0x328>)
  40a3c2:	4598      	cmp	r8, r3
  40a3c4:	f300 80b1 	bgt.w	40a52a <atan+0x1a2>
  40a3c8:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  40a3cc:	4598      	cmp	r8, r3
  40a3ce:	f340 8097 	ble.w	40a500 <atan+0x178>
  40a3d2:	f04f 3aff 	mov.w	sl, #4294967295
  40a3d6:	4622      	mov	r2, r4
  40a3d8:	462b      	mov	r3, r5
  40a3da:	4620      	mov	r0, r4
  40a3dc:	4629      	mov	r1, r5
  40a3de:	f000 fc89 	bl	40acf4 <__aeabi_dmul>
  40a3e2:	4602      	mov	r2, r0
  40a3e4:	460b      	mov	r3, r1
  40a3e6:	4680      	mov	r8, r0
  40a3e8:	4689      	mov	r9, r1
  40a3ea:	f000 fc83 	bl	40acf4 <__aeabi_dmul>
  40a3ee:	4606      	mov	r6, r0
  40a3f0:	460f      	mov	r7, r1
  40a3f2:	a391      	add	r3, pc, #580	; (adr r3, 40a638 <atan+0x2b0>)
  40a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a3f8:	f000 fc7c 	bl	40acf4 <__aeabi_dmul>
  40a3fc:	a390      	add	r3, pc, #576	; (adr r3, 40a640 <atan+0x2b8>)
  40a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a402:	f000 fac5 	bl	40a990 <__adddf3>
  40a406:	4632      	mov	r2, r6
  40a408:	463b      	mov	r3, r7
  40a40a:	f000 fc73 	bl	40acf4 <__aeabi_dmul>
  40a40e:	a38e      	add	r3, pc, #568	; (adr r3, 40a648 <atan+0x2c0>)
  40a410:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a414:	f000 fabc 	bl	40a990 <__adddf3>
  40a418:	4632      	mov	r2, r6
  40a41a:	463b      	mov	r3, r7
  40a41c:	f000 fc6a 	bl	40acf4 <__aeabi_dmul>
  40a420:	a38b      	add	r3, pc, #556	; (adr r3, 40a650 <atan+0x2c8>)
  40a422:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a426:	f000 fab3 	bl	40a990 <__adddf3>
  40a42a:	4632      	mov	r2, r6
  40a42c:	463b      	mov	r3, r7
  40a42e:	f000 fc61 	bl	40acf4 <__aeabi_dmul>
  40a432:	a389      	add	r3, pc, #548	; (adr r3, 40a658 <atan+0x2d0>)
  40a434:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a438:	f000 faaa 	bl	40a990 <__adddf3>
  40a43c:	4632      	mov	r2, r6
  40a43e:	463b      	mov	r3, r7
  40a440:	f000 fc58 	bl	40acf4 <__aeabi_dmul>
  40a444:	a386      	add	r3, pc, #536	; (adr r3, 40a660 <atan+0x2d8>)
  40a446:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a44a:	f000 faa1 	bl	40a990 <__adddf3>
  40a44e:	4642      	mov	r2, r8
  40a450:	464b      	mov	r3, r9
  40a452:	f000 fc4f 	bl	40acf4 <__aeabi_dmul>
  40a456:	4680      	mov	r8, r0
  40a458:	4689      	mov	r9, r1
  40a45a:	4630      	mov	r0, r6
  40a45c:	4639      	mov	r1, r7
  40a45e:	a382      	add	r3, pc, #520	; (adr r3, 40a668 <atan+0x2e0>)
  40a460:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a464:	f000 fc46 	bl	40acf4 <__aeabi_dmul>
  40a468:	a381      	add	r3, pc, #516	; (adr r3, 40a670 <atan+0x2e8>)
  40a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a46e:	f000 fa8d 	bl	40a98c <__aeabi_dsub>
  40a472:	4632      	mov	r2, r6
  40a474:	463b      	mov	r3, r7
  40a476:	f000 fc3d 	bl	40acf4 <__aeabi_dmul>
  40a47a:	a37f      	add	r3, pc, #508	; (adr r3, 40a678 <atan+0x2f0>)
  40a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a480:	f000 fa84 	bl	40a98c <__aeabi_dsub>
  40a484:	4632      	mov	r2, r6
  40a486:	463b      	mov	r3, r7
  40a488:	f000 fc34 	bl	40acf4 <__aeabi_dmul>
  40a48c:	a37c      	add	r3, pc, #496	; (adr r3, 40a680 <atan+0x2f8>)
  40a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a492:	f000 fa7b 	bl	40a98c <__aeabi_dsub>
  40a496:	4632      	mov	r2, r6
  40a498:	463b      	mov	r3, r7
  40a49a:	f000 fc2b 	bl	40acf4 <__aeabi_dmul>
  40a49e:	a37a      	add	r3, pc, #488	; (adr r3, 40a688 <atan+0x300>)
  40a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a4a4:	f000 fa72 	bl	40a98c <__aeabi_dsub>
  40a4a8:	4632      	mov	r2, r6
  40a4aa:	463b      	mov	r3, r7
  40a4ac:	f000 fc22 	bl	40acf4 <__aeabi_dmul>
  40a4b0:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a4b4:	4602      	mov	r2, r0
  40a4b6:	460b      	mov	r3, r1
  40a4b8:	d062      	beq.n	40a580 <atan+0x1f8>
  40a4ba:	4640      	mov	r0, r8
  40a4bc:	4649      	mov	r1, r9
  40a4be:	f000 fa67 	bl	40a990 <__adddf3>
  40a4c2:	4622      	mov	r2, r4
  40a4c4:	462b      	mov	r3, r5
  40a4c6:	ea4f 0aca 	mov.w	sl, sl, lsl #3
  40a4ca:	f000 fc13 	bl	40acf4 <__aeabi_dmul>
  40a4ce:	4e79      	ldr	r6, [pc, #484]	; (40a6b4 <atan+0x32c>)
  40a4d0:	4b79      	ldr	r3, [pc, #484]	; (40a6b8 <atan+0x330>)
  40a4d2:	4456      	add	r6, sl
  40a4d4:	449a      	add	sl, r3
  40a4d6:	e9da 2300 	ldrd	r2, r3, [sl]
  40a4da:	f000 fa57 	bl	40a98c <__aeabi_dsub>
  40a4de:	4622      	mov	r2, r4
  40a4e0:	462b      	mov	r3, r5
  40a4e2:	f000 fa53 	bl	40a98c <__aeabi_dsub>
  40a4e6:	4602      	mov	r2, r0
  40a4e8:	460b      	mov	r3, r1
  40a4ea:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a4ee:	f000 fa4d 	bl	40a98c <__aeabi_dsub>
  40a4f2:	f1bb 0f00 	cmp.w	fp, #0
  40a4f6:	f6bf af5f 	bge.w	40a3b8 <atan+0x30>
  40a4fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a4fe:	e75b      	b.n	40a3b8 <atan+0x30>
  40a500:	a363      	add	r3, pc, #396	; (adr r3, 40a690 <atan+0x308>)
  40a502:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a506:	ee10 0a10 	vmov	r0, s0
  40a50a:	4629      	mov	r1, r5
  40a50c:	f000 fa40 	bl	40a990 <__adddf3>
  40a510:	2200      	movs	r2, #0
  40a512:	4b6a      	ldr	r3, [pc, #424]	; (40a6bc <atan+0x334>)
  40a514:	f000 fe7e 	bl	40b214 <__aeabi_dcmpgt>
  40a518:	2800      	cmp	r0, #0
  40a51a:	f43f af5a 	beq.w	40a3d2 <atan+0x4a>
  40a51e:	4620      	mov	r0, r4
  40a520:	4629      	mov	r1, r5
  40a522:	ec41 0b10 	vmov	d0, r0, r1
  40a526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a52a:	f000 f8d1 	bl	40a6d0 <fabs>
  40a52e:	4b64      	ldr	r3, [pc, #400]	; (40a6c0 <atan+0x338>)
  40a530:	4598      	cmp	r8, r3
  40a532:	ec57 6b10 	vmov	r6, r7, d0
  40a536:	dc32      	bgt.n	40a59e <atan+0x216>
  40a538:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40a53c:	4598      	cmp	r8, r3
  40a53e:	dc5f      	bgt.n	40a600 <atan+0x278>
  40a540:	ee10 2a10 	vmov	r2, s0
  40a544:	ee10 0a10 	vmov	r0, s0
  40a548:	463b      	mov	r3, r7
  40a54a:	4639      	mov	r1, r7
  40a54c:	f000 fa20 	bl	40a990 <__adddf3>
  40a550:	2200      	movs	r2, #0
  40a552:	4b5a      	ldr	r3, [pc, #360]	; (40a6bc <atan+0x334>)
  40a554:	f04f 0a00 	mov.w	sl, #0
  40a558:	f000 fa18 	bl	40a98c <__aeabi_dsub>
  40a55c:	2200      	movs	r2, #0
  40a55e:	4604      	mov	r4, r0
  40a560:	460d      	mov	r5, r1
  40a562:	4630      	mov	r0, r6
  40a564:	4639      	mov	r1, r7
  40a566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a56a:	e02e      	b.n	40a5ca <atan+0x242>
  40a56c:	f1bb 0f00 	cmp.w	fp, #0
  40a570:	dd36      	ble.n	40a5e0 <atan+0x258>
  40a572:	a149      	add	r1, pc, #292	; (adr r1, 40a698 <atan+0x310>)
  40a574:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a578:	ec41 0b10 	vmov	d0, r0, r1
  40a57c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a580:	4640      	mov	r0, r8
  40a582:	4649      	mov	r1, r9
  40a584:	f000 fa04 	bl	40a990 <__adddf3>
  40a588:	4622      	mov	r2, r4
  40a58a:	462b      	mov	r3, r5
  40a58c:	f000 fbb2 	bl	40acf4 <__aeabi_dmul>
  40a590:	4602      	mov	r2, r0
  40a592:	460b      	mov	r3, r1
  40a594:	4620      	mov	r0, r4
  40a596:	4629      	mov	r1, r5
  40a598:	f000 f9f8 	bl	40a98c <__aeabi_dsub>
  40a59c:	e70c      	b.n	40a3b8 <atan+0x30>
  40a59e:	4b49      	ldr	r3, [pc, #292]	; (40a6c4 <atan+0x33c>)
  40a5a0:	4598      	cmp	r8, r3
  40a5a2:	dc21      	bgt.n	40a5e8 <atan+0x260>
  40a5a4:	ee10 0a10 	vmov	r0, s0
  40a5a8:	2200      	movs	r2, #0
  40a5aa:	4b47      	ldr	r3, [pc, #284]	; (40a6c8 <atan+0x340>)
  40a5ac:	4639      	mov	r1, r7
  40a5ae:	f000 f9ed 	bl	40a98c <__aeabi_dsub>
  40a5b2:	2200      	movs	r2, #0
  40a5b4:	4b44      	ldr	r3, [pc, #272]	; (40a6c8 <atan+0x340>)
  40a5b6:	4604      	mov	r4, r0
  40a5b8:	460d      	mov	r5, r1
  40a5ba:	4630      	mov	r0, r6
  40a5bc:	4639      	mov	r1, r7
  40a5be:	f04f 0a02 	mov.w	sl, #2
  40a5c2:	f000 fb97 	bl	40acf4 <__aeabi_dmul>
  40a5c6:	2200      	movs	r2, #0
  40a5c8:	4b3c      	ldr	r3, [pc, #240]	; (40a6bc <atan+0x334>)
  40a5ca:	f000 f9e1 	bl	40a990 <__adddf3>
  40a5ce:	4602      	mov	r2, r0
  40a5d0:	460b      	mov	r3, r1
  40a5d2:	4620      	mov	r0, r4
  40a5d4:	4629      	mov	r1, r5
  40a5d6:	f000 fcb7 	bl	40af48 <__aeabi_ddiv>
  40a5da:	4604      	mov	r4, r0
  40a5dc:	460d      	mov	r5, r1
  40a5de:	e6fa      	b.n	40a3d6 <atan+0x4e>
  40a5e0:	a12f      	add	r1, pc, #188	; (adr r1, 40a6a0 <atan+0x318>)
  40a5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a5e6:	e6e7      	b.n	40a3b8 <atan+0x30>
  40a5e8:	ee10 2a10 	vmov	r2, s0
  40a5ec:	463b      	mov	r3, r7
  40a5ee:	2000      	movs	r0, #0
  40a5f0:	4936      	ldr	r1, [pc, #216]	; (40a6cc <atan+0x344>)
  40a5f2:	f000 fca9 	bl	40af48 <__aeabi_ddiv>
  40a5f6:	f04f 0a03 	mov.w	sl, #3
  40a5fa:	4604      	mov	r4, r0
  40a5fc:	460d      	mov	r5, r1
  40a5fe:	e6ea      	b.n	40a3d6 <atan+0x4e>
  40a600:	ee10 0a10 	vmov	r0, s0
  40a604:	2200      	movs	r2, #0
  40a606:	4b2d      	ldr	r3, [pc, #180]	; (40a6bc <atan+0x334>)
  40a608:	4639      	mov	r1, r7
  40a60a:	f000 f9bf 	bl	40a98c <__aeabi_dsub>
  40a60e:	4604      	mov	r4, r0
  40a610:	460d      	mov	r5, r1
  40a612:	2200      	movs	r2, #0
  40a614:	4b29      	ldr	r3, [pc, #164]	; (40a6bc <atan+0x334>)
  40a616:	4630      	mov	r0, r6
  40a618:	4639      	mov	r1, r7
  40a61a:	f04f 0a01 	mov.w	sl, #1
  40a61e:	f000 f9b7 	bl	40a990 <__adddf3>
  40a622:	4602      	mov	r2, r0
  40a624:	460b      	mov	r3, r1
  40a626:	4620      	mov	r0, r4
  40a628:	4629      	mov	r1, r5
  40a62a:	f000 fc8d 	bl	40af48 <__aeabi_ddiv>
  40a62e:	4604      	mov	r4, r0
  40a630:	460d      	mov	r5, r1
  40a632:	e6d0      	b.n	40a3d6 <atan+0x4e>
  40a634:	f3af 8000 	nop.w
  40a638:	e322da11 	.word	0xe322da11
  40a63c:	3f90ad3a 	.word	0x3f90ad3a
  40a640:	24760deb 	.word	0x24760deb
  40a644:	3fa97b4b 	.word	0x3fa97b4b
  40a648:	a0d03d51 	.word	0xa0d03d51
  40a64c:	3fb10d66 	.word	0x3fb10d66
  40a650:	c54c206e 	.word	0xc54c206e
  40a654:	3fb745cd 	.word	0x3fb745cd
  40a658:	920083ff 	.word	0x920083ff
  40a65c:	3fc24924 	.word	0x3fc24924
  40a660:	5555550d 	.word	0x5555550d
  40a664:	3fd55555 	.word	0x3fd55555
  40a668:	2c6a6c2f 	.word	0x2c6a6c2f
  40a66c:	bfa2b444 	.word	0xbfa2b444
  40a670:	52defd9a 	.word	0x52defd9a
  40a674:	3fadde2d 	.word	0x3fadde2d
  40a678:	af749a6d 	.word	0xaf749a6d
  40a67c:	3fb3b0f2 	.word	0x3fb3b0f2
  40a680:	fe231671 	.word	0xfe231671
  40a684:	3fbc71c6 	.word	0x3fbc71c6
  40a688:	9998ebc4 	.word	0x9998ebc4
  40a68c:	3fc99999 	.word	0x3fc99999
  40a690:	8800759c 	.word	0x8800759c
  40a694:	7e37e43c 	.word	0x7e37e43c
  40a698:	54442d18 	.word	0x54442d18
  40a69c:	3ff921fb 	.word	0x3ff921fb
  40a6a0:	54442d18 	.word	0x54442d18
  40a6a4:	bff921fb 	.word	0xbff921fb
  40a6a8:	440fffff 	.word	0x440fffff
  40a6ac:	7ff00000 	.word	0x7ff00000
  40a6b0:	3fdbffff 	.word	0x3fdbffff
  40a6b4:	00413d08 	.word	0x00413d08
  40a6b8:	00413ce8 	.word	0x00413ce8
  40a6bc:	3ff00000 	.word	0x3ff00000
  40a6c0:	3ff2ffff 	.word	0x3ff2ffff
  40a6c4:	40037fff 	.word	0x40037fff
  40a6c8:	3ff80000 	.word	0x3ff80000
  40a6cc:	bff00000 	.word	0xbff00000

0040a6d0 <fabs>:
  40a6d0:	ec53 2b10 	vmov	r2, r3, d0
  40a6d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a6d8:	ec43 2b10 	vmov	d0, r2, r3
  40a6dc:	4770      	bx	lr
  40a6de:	bf00      	nop

0040a6e0 <floor>:
  40a6e0:	ec51 0b10 	vmov	r0, r1, d0
  40a6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a6e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
  40a6ec:	460c      	mov	r4, r1
  40a6ee:	ee10 3a10 	vmov	r3, s0
  40a6f2:	4688      	mov	r8, r1
  40a6f4:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
  40a6f8:	4606      	mov	r6, r0
  40a6fa:	2d13      	cmp	r5, #19
  40a6fc:	dc1c      	bgt.n	40a738 <floor+0x58>
  40a6fe:	2d00      	cmp	r5, #0
  40a700:	db42      	blt.n	40a788 <floor+0xa8>
  40a702:	4f3d      	ldr	r7, [pc, #244]	; (40a7f8 <floor+0x118>)
  40a704:	412f      	asrs	r7, r5
  40a706:	ea07 0201 	and.w	r2, r7, r1
  40a70a:	4313      	orrs	r3, r2
  40a70c:	d019      	beq.n	40a742 <floor+0x62>
  40a70e:	a338      	add	r3, pc, #224	; (adr r3, 40a7f0 <floor+0x110>)
  40a710:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a714:	f000 f93c 	bl	40a990 <__adddf3>
  40a718:	2200      	movs	r2, #0
  40a71a:	2300      	movs	r3, #0
  40a71c:	f000 fd7a 	bl	40b214 <__aeabi_dcmpgt>
  40a720:	b120      	cbz	r0, 40a72c <floor+0x4c>
  40a722:	2c00      	cmp	r4, #0
  40a724:	db49      	blt.n	40a7ba <floor+0xda>
  40a726:	ea28 0407 	bic.w	r4, r8, r7
  40a72a:	2600      	movs	r6, #0
  40a72c:	4623      	mov	r3, r4
  40a72e:	4632      	mov	r2, r6
  40a730:	ec43 2b10 	vmov	d0, r2, r3
  40a734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a738:	2d33      	cmp	r5, #51	; 0x33
  40a73a:	dd06      	ble.n	40a74a <floor+0x6a>
  40a73c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  40a740:	d032      	beq.n	40a7a8 <floor+0xc8>
  40a742:	ec41 0b10 	vmov	d0, r0, r1
  40a746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a74a:	f2a7 4313 	subw	r3, r7, #1043	; 0x413
  40a74e:	f04f 39ff 	mov.w	r9, #4294967295
  40a752:	fa29 f903 	lsr.w	r9, r9, r3
  40a756:	ea19 0f00 	tst.w	r9, r0
  40a75a:	d0f2      	beq.n	40a742 <floor+0x62>
  40a75c:	a324      	add	r3, pc, #144	; (adr r3, 40a7f0 <floor+0x110>)
  40a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a762:	f000 f915 	bl	40a990 <__adddf3>
  40a766:	2200      	movs	r2, #0
  40a768:	2300      	movs	r3, #0
  40a76a:	f000 fd53 	bl	40b214 <__aeabi_dcmpgt>
  40a76e:	2800      	cmp	r0, #0
  40a770:	d0dc      	beq.n	40a72c <floor+0x4c>
  40a772:	2c00      	cmp	r4, #0
  40a774:	db26      	blt.n	40a7c4 <floor+0xe4>
  40a776:	4644      	mov	r4, r8
  40a778:	ea26 0609 	bic.w	r6, r6, r9
  40a77c:	4623      	mov	r3, r4
  40a77e:	4632      	mov	r2, r6
  40a780:	ec43 2b10 	vmov	d0, r2, r3
  40a784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a788:	a319      	add	r3, pc, #100	; (adr r3, 40a7f0 <floor+0x110>)
  40a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a78e:	f000 f8ff 	bl	40a990 <__adddf3>
  40a792:	2200      	movs	r2, #0
  40a794:	2300      	movs	r3, #0
  40a796:	f000 fd3d 	bl	40b214 <__aeabi_dcmpgt>
  40a79a:	2800      	cmp	r0, #0
  40a79c:	d0c6      	beq.n	40a72c <floor+0x4c>
  40a79e:	2c00      	cmp	r4, #0
  40a7a0:	db1c      	blt.n	40a7dc <floor+0xfc>
  40a7a2:	2600      	movs	r6, #0
  40a7a4:	4634      	mov	r4, r6
  40a7a6:	e7c1      	b.n	40a72c <floor+0x4c>
  40a7a8:	ee10 2a10 	vmov	r2, s0
  40a7ac:	460b      	mov	r3, r1
  40a7ae:	f000 f8ef 	bl	40a990 <__adddf3>
  40a7b2:	ec41 0b10 	vmov	d0, r0, r1
  40a7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a7ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a7be:	412b      	asrs	r3, r5
  40a7c0:	4498      	add	r8, r3
  40a7c2:	e7b0      	b.n	40a726 <floor+0x46>
  40a7c4:	2d14      	cmp	r5, #20
  40a7c6:	d006      	beq.n	40a7d6 <floor+0xf6>
  40a7c8:	f240 4233 	movw	r2, #1075	; 0x433
  40a7cc:	2301      	movs	r3, #1
  40a7ce:	1bd2      	subs	r2, r2, r7
  40a7d0:	4093      	lsls	r3, r2
  40a7d2:	199e      	adds	r6, r3, r6
  40a7d4:	d3cf      	bcc.n	40a776 <floor+0x96>
  40a7d6:	f108 0801 	add.w	r8, r8, #1
  40a7da:	e7cc      	b.n	40a776 <floor+0x96>
  40a7dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
  40a7e0:	431e      	orrs	r6, r3
  40a7e2:	d0a3      	beq.n	40a72c <floor+0x4c>
  40a7e4:	2600      	movs	r6, #0
  40a7e6:	4c05      	ldr	r4, [pc, #20]	; (40a7fc <floor+0x11c>)
  40a7e8:	e7a0      	b.n	40a72c <floor+0x4c>
  40a7ea:	bf00      	nop
  40a7ec:	f3af 8000 	nop.w
  40a7f0:	8800759c 	.word	0x8800759c
  40a7f4:	7e37e43c 	.word	0x7e37e43c
  40a7f8:	000fffff 	.word	0x000fffff
  40a7fc:	bff00000 	.word	0xbff00000

0040a800 <__fpclassifyd>:
  40a800:	ee10 3a10 	vmov	r3, s0
  40a804:	ec51 0b10 	vmov	r0, r1, d0
  40a808:	fab3 f383 	clz	r3, r3
  40a80c:	f031 4000 	bics.w	r0, r1, #2147483648	; 0x80000000
  40a810:	ea4f 1353 	mov.w	r3, r3, lsr #5
  40a814:	d102      	bne.n	40a81c <__fpclassifyd+0x1c>
  40a816:	b10b      	cbz	r3, 40a81c <__fpclassifyd+0x1c>
  40a818:	2002      	movs	r0, #2
  40a81a:	4770      	bx	lr
  40a81c:	f5a0 1180 	sub.w	r1, r0, #1048576	; 0x100000
  40a820:	4a08      	ldr	r2, [pc, #32]	; (40a844 <__fpclassifyd+0x44>)
  40a822:	4291      	cmp	r1, r2
  40a824:	d801      	bhi.n	40a82a <__fpclassifyd+0x2a>
  40a826:	2004      	movs	r0, #4
  40a828:	4770      	bx	lr
  40a82a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  40a82e:	d201      	bcs.n	40a834 <__fpclassifyd+0x34>
  40a830:	2003      	movs	r0, #3
  40a832:	4770      	bx	lr
  40a834:	4a04      	ldr	r2, [pc, #16]	; (40a848 <__fpclassifyd+0x48>)
  40a836:	4290      	cmp	r0, r2
  40a838:	bf14      	ite	ne
  40a83a:	2000      	movne	r0, #0
  40a83c:	f003 0001 	andeq.w	r0, r3, #1
  40a840:	4770      	bx	lr
  40a842:	bf00      	nop
  40a844:	7fdfffff 	.word	0x7fdfffff
  40a848:	7ff00000 	.word	0x7ff00000

0040a84c <matherr>:
  40a84c:	2000      	movs	r0, #0
  40a84e:	4770      	bx	lr

0040a850 <nan>:
  40a850:	ed9f 0b01 	vldr	d0, [pc, #4]	; 40a858 <nan+0x8>
  40a854:	4770      	bx	lr
  40a856:	bf00      	nop
  40a858:	00000000 	.word	0x00000000
  40a85c:	7ff80000 	.word	0x7ff80000

0040a860 <scalbn>:
  40a860:	ec53 2b10 	vmov	r2, r3, d0
  40a864:	f3c3 510a 	ubfx	r1, r3, #20, #11
  40a868:	b570      	push	{r4, r5, r6, lr}
  40a86a:	461c      	mov	r4, r3
  40a86c:	4605      	mov	r5, r0
  40a86e:	bb49      	cbnz	r1, 40a8c4 <scalbn+0x64>
  40a870:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40a874:	ea54 0102 	orrs.w	r1, r4, r2
  40a878:	d036      	beq.n	40a8e8 <scalbn+0x88>
  40a87a:	4e37      	ldr	r6, [pc, #220]	; (40a958 <scalbn+0xf8>)
  40a87c:	4619      	mov	r1, r3
  40a87e:	2200      	movs	r2, #0
  40a880:	4b36      	ldr	r3, [pc, #216]	; (40a95c <scalbn+0xfc>)
  40a882:	ee10 0a10 	vmov	r0, s0
  40a886:	f000 fa35 	bl	40acf4 <__aeabi_dmul>
  40a88a:	42b5      	cmp	r5, r6
  40a88c:	4602      	mov	r2, r0
  40a88e:	460b      	mov	r3, r1
  40a890:	460c      	mov	r4, r1
  40a892:	db39      	blt.n	40a908 <scalbn+0xa8>
  40a894:	f3c1 510a 	ubfx	r1, r1, #20, #11
  40a898:	f240 70fe 	movw	r0, #2046	; 0x7fe
  40a89c:	3936      	subs	r1, #54	; 0x36
  40a89e:	4429      	add	r1, r5
  40a8a0:	4281      	cmp	r1, r0
  40a8a2:	dd18      	ble.n	40a8d6 <scalbn+0x76>
  40a8a4:	ec43 2b11 	vmov	d1, r2, r3
  40a8a8:	ed9f 0b27 	vldr	d0, [pc, #156]	; 40a948 <scalbn+0xe8>
  40a8ac:	f000 f85c 	bl	40a968 <copysign>
  40a8b0:	a325      	add	r3, pc, #148	; (adr r3, 40a948 <scalbn+0xe8>)
  40a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a8b6:	ec51 0b10 	vmov	r0, r1, d0
  40a8ba:	f000 fa1b 	bl	40acf4 <__aeabi_dmul>
  40a8be:	ec41 0b10 	vmov	d0, r0, r1
  40a8c2:	bd70      	pop	{r4, r5, r6, pc}
  40a8c4:	f240 70ff 	movw	r0, #2047	; 0x7ff
  40a8c8:	4281      	cmp	r1, r0
  40a8ca:	d025      	beq.n	40a918 <scalbn+0xb8>
  40a8cc:	4429      	add	r1, r5
  40a8ce:	f240 70fe 	movw	r0, #2046	; 0x7fe
  40a8d2:	4281      	cmp	r1, r0
  40a8d4:	dce6      	bgt.n	40a8a4 <scalbn+0x44>
  40a8d6:	2900      	cmp	r1, #0
  40a8d8:	dd07      	ble.n	40a8ea <scalbn+0x8a>
  40a8da:	4821      	ldr	r0, [pc, #132]	; (40a960 <scalbn+0x100>)
  40a8dc:	4020      	ands	r0, r4
  40a8de:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
  40a8e2:	ec43 2b10 	vmov	d0, r2, r3
  40a8e6:	bd70      	pop	{r4, r5, r6, pc}
  40a8e8:	bd70      	pop	{r4, r5, r6, pc}
  40a8ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
  40a8ee:	da1b      	bge.n	40a928 <scalbn+0xc8>
  40a8f0:	f24c 3150 	movw	r1, #50000	; 0xc350
  40a8f4:	428d      	cmp	r5, r1
  40a8f6:	dcd5      	bgt.n	40a8a4 <scalbn+0x44>
  40a8f8:	ed9f 0b15 	vldr	d0, [pc, #84]	; 40a950 <scalbn+0xf0>
  40a8fc:	ec43 2b11 	vmov	d1, r2, r3
  40a900:	f000 f832 	bl	40a968 <copysign>
  40a904:	ec51 0b10 	vmov	r0, r1, d0
  40a908:	a311      	add	r3, pc, #68	; (adr r3, 40a950 <scalbn+0xf0>)
  40a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a90e:	f000 f9f1 	bl	40acf4 <__aeabi_dmul>
  40a912:	ec41 0b10 	vmov	d0, r0, r1
  40a916:	bd70      	pop	{r4, r5, r6, pc}
  40a918:	ee10 0a10 	vmov	r0, s0
  40a91c:	4619      	mov	r1, r3
  40a91e:	f000 f837 	bl	40a990 <__adddf3>
  40a922:	ec41 0b10 	vmov	d0, r0, r1
  40a926:	bd70      	pop	{r4, r5, r6, pc}
  40a928:	480d      	ldr	r0, [pc, #52]	; (40a960 <scalbn+0x100>)
  40a92a:	3136      	adds	r1, #54	; 0x36
  40a92c:	4020      	ands	r0, r4
  40a92e:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
  40a932:	4610      	mov	r0, r2
  40a934:	2200      	movs	r2, #0
  40a936:	4619      	mov	r1, r3
  40a938:	4b0a      	ldr	r3, [pc, #40]	; (40a964 <scalbn+0x104>)
  40a93a:	f000 f9db 	bl	40acf4 <__aeabi_dmul>
  40a93e:	ec41 0b10 	vmov	d0, r0, r1
  40a942:	bd70      	pop	{r4, r5, r6, pc}
  40a944:	f3af 8000 	nop.w
  40a948:	8800759c 	.word	0x8800759c
  40a94c:	7e37e43c 	.word	0x7e37e43c
  40a950:	c2f8f359 	.word	0xc2f8f359
  40a954:	01a56e1f 	.word	0x01a56e1f
  40a958:	ffff3cb0 	.word	0xffff3cb0
  40a95c:	43500000 	.word	0x43500000
  40a960:	800fffff 	.word	0x800fffff
  40a964:	3c900000 	.word	0x3c900000

0040a968 <copysign>:
  40a968:	ee11 0a90 	vmov	r0, s3
  40a96c:	ec53 2b10 	vmov	r2, r3, d0
  40a970:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40a974:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  40a978:	ea40 0301 	orr.w	r3, r0, r1
  40a97c:	ec43 2b10 	vmov	d0, r2, r3
  40a980:	4770      	bx	lr
  40a982:	bf00      	nop

0040a984 <__aeabi_drsub>:
  40a984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a988:	e002      	b.n	40a990 <__adddf3>
  40a98a:	bf00      	nop

0040a98c <__aeabi_dsub>:
  40a98c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a990 <__adddf3>:
  40a990:	b530      	push	{r4, r5, lr}
  40a992:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a996:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a99a:	ea94 0f05 	teq	r4, r5
  40a99e:	bf08      	it	eq
  40a9a0:	ea90 0f02 	teqeq	r0, r2
  40a9a4:	bf1f      	itttt	ne
  40a9a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a9aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a9ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a9b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a9b6:	f000 80e2 	beq.w	40ab7e <__adddf3+0x1ee>
  40a9ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a9be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a9c2:	bfb8      	it	lt
  40a9c4:	426d      	neglt	r5, r5
  40a9c6:	dd0c      	ble.n	40a9e2 <__adddf3+0x52>
  40a9c8:	442c      	add	r4, r5
  40a9ca:	ea80 0202 	eor.w	r2, r0, r2
  40a9ce:	ea81 0303 	eor.w	r3, r1, r3
  40a9d2:	ea82 0000 	eor.w	r0, r2, r0
  40a9d6:	ea83 0101 	eor.w	r1, r3, r1
  40a9da:	ea80 0202 	eor.w	r2, r0, r2
  40a9de:	ea81 0303 	eor.w	r3, r1, r3
  40a9e2:	2d36      	cmp	r5, #54	; 0x36
  40a9e4:	bf88      	it	hi
  40a9e6:	bd30      	pophi	{r4, r5, pc}
  40a9e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a9ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a9f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a9f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a9f8:	d002      	beq.n	40aa00 <__adddf3+0x70>
  40a9fa:	4240      	negs	r0, r0
  40a9fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40aa00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40aa04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40aa08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40aa0c:	d002      	beq.n	40aa14 <__adddf3+0x84>
  40aa0e:	4252      	negs	r2, r2
  40aa10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40aa14:	ea94 0f05 	teq	r4, r5
  40aa18:	f000 80a7 	beq.w	40ab6a <__adddf3+0x1da>
  40aa1c:	f1a4 0401 	sub.w	r4, r4, #1
  40aa20:	f1d5 0e20 	rsbs	lr, r5, #32
  40aa24:	db0d      	blt.n	40aa42 <__adddf3+0xb2>
  40aa26:	fa02 fc0e 	lsl.w	ip, r2, lr
  40aa2a:	fa22 f205 	lsr.w	r2, r2, r5
  40aa2e:	1880      	adds	r0, r0, r2
  40aa30:	f141 0100 	adc.w	r1, r1, #0
  40aa34:	fa03 f20e 	lsl.w	r2, r3, lr
  40aa38:	1880      	adds	r0, r0, r2
  40aa3a:	fa43 f305 	asr.w	r3, r3, r5
  40aa3e:	4159      	adcs	r1, r3
  40aa40:	e00e      	b.n	40aa60 <__adddf3+0xd0>
  40aa42:	f1a5 0520 	sub.w	r5, r5, #32
  40aa46:	f10e 0e20 	add.w	lr, lr, #32
  40aa4a:	2a01      	cmp	r2, #1
  40aa4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40aa50:	bf28      	it	cs
  40aa52:	f04c 0c02 	orrcs.w	ip, ip, #2
  40aa56:	fa43 f305 	asr.w	r3, r3, r5
  40aa5a:	18c0      	adds	r0, r0, r3
  40aa5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40aa60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aa64:	d507      	bpl.n	40aa76 <__adddf3+0xe6>
  40aa66:	f04f 0e00 	mov.w	lr, #0
  40aa6a:	f1dc 0c00 	rsbs	ip, ip, #0
  40aa6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40aa72:	eb6e 0101 	sbc.w	r1, lr, r1
  40aa76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40aa7a:	d31b      	bcc.n	40aab4 <__adddf3+0x124>
  40aa7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40aa80:	d30c      	bcc.n	40aa9c <__adddf3+0x10c>
  40aa82:	0849      	lsrs	r1, r1, #1
  40aa84:	ea5f 0030 	movs.w	r0, r0, rrx
  40aa88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40aa8c:	f104 0401 	add.w	r4, r4, #1
  40aa90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40aa94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40aa98:	f080 809a 	bcs.w	40abd0 <__adddf3+0x240>
  40aa9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40aaa0:	bf08      	it	eq
  40aaa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40aaa6:	f150 0000 	adcs.w	r0, r0, #0
  40aaaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40aaae:	ea41 0105 	orr.w	r1, r1, r5
  40aab2:	bd30      	pop	{r4, r5, pc}
  40aab4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40aab8:	4140      	adcs	r0, r0
  40aaba:	eb41 0101 	adc.w	r1, r1, r1
  40aabe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aac2:	f1a4 0401 	sub.w	r4, r4, #1
  40aac6:	d1e9      	bne.n	40aa9c <__adddf3+0x10c>
  40aac8:	f091 0f00 	teq	r1, #0
  40aacc:	bf04      	itt	eq
  40aace:	4601      	moveq	r1, r0
  40aad0:	2000      	moveq	r0, #0
  40aad2:	fab1 f381 	clz	r3, r1
  40aad6:	bf08      	it	eq
  40aad8:	3320      	addeq	r3, #32
  40aada:	f1a3 030b 	sub.w	r3, r3, #11
  40aade:	f1b3 0220 	subs.w	r2, r3, #32
  40aae2:	da0c      	bge.n	40aafe <__adddf3+0x16e>
  40aae4:	320c      	adds	r2, #12
  40aae6:	dd08      	ble.n	40aafa <__adddf3+0x16a>
  40aae8:	f102 0c14 	add.w	ip, r2, #20
  40aaec:	f1c2 020c 	rsb	r2, r2, #12
  40aaf0:	fa01 f00c 	lsl.w	r0, r1, ip
  40aaf4:	fa21 f102 	lsr.w	r1, r1, r2
  40aaf8:	e00c      	b.n	40ab14 <__adddf3+0x184>
  40aafa:	f102 0214 	add.w	r2, r2, #20
  40aafe:	bfd8      	it	le
  40ab00:	f1c2 0c20 	rsble	ip, r2, #32
  40ab04:	fa01 f102 	lsl.w	r1, r1, r2
  40ab08:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ab0c:	bfdc      	itt	le
  40ab0e:	ea41 010c 	orrle.w	r1, r1, ip
  40ab12:	4090      	lslle	r0, r2
  40ab14:	1ae4      	subs	r4, r4, r3
  40ab16:	bfa2      	ittt	ge
  40ab18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40ab1c:	4329      	orrge	r1, r5
  40ab1e:	bd30      	popge	{r4, r5, pc}
  40ab20:	ea6f 0404 	mvn.w	r4, r4
  40ab24:	3c1f      	subs	r4, #31
  40ab26:	da1c      	bge.n	40ab62 <__adddf3+0x1d2>
  40ab28:	340c      	adds	r4, #12
  40ab2a:	dc0e      	bgt.n	40ab4a <__adddf3+0x1ba>
  40ab2c:	f104 0414 	add.w	r4, r4, #20
  40ab30:	f1c4 0220 	rsb	r2, r4, #32
  40ab34:	fa20 f004 	lsr.w	r0, r0, r4
  40ab38:	fa01 f302 	lsl.w	r3, r1, r2
  40ab3c:	ea40 0003 	orr.w	r0, r0, r3
  40ab40:	fa21 f304 	lsr.w	r3, r1, r4
  40ab44:	ea45 0103 	orr.w	r1, r5, r3
  40ab48:	bd30      	pop	{r4, r5, pc}
  40ab4a:	f1c4 040c 	rsb	r4, r4, #12
  40ab4e:	f1c4 0220 	rsb	r2, r4, #32
  40ab52:	fa20 f002 	lsr.w	r0, r0, r2
  40ab56:	fa01 f304 	lsl.w	r3, r1, r4
  40ab5a:	ea40 0003 	orr.w	r0, r0, r3
  40ab5e:	4629      	mov	r1, r5
  40ab60:	bd30      	pop	{r4, r5, pc}
  40ab62:	fa21 f004 	lsr.w	r0, r1, r4
  40ab66:	4629      	mov	r1, r5
  40ab68:	bd30      	pop	{r4, r5, pc}
  40ab6a:	f094 0f00 	teq	r4, #0
  40ab6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40ab72:	bf06      	itte	eq
  40ab74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40ab78:	3401      	addeq	r4, #1
  40ab7a:	3d01      	subne	r5, #1
  40ab7c:	e74e      	b.n	40aa1c <__adddf3+0x8c>
  40ab7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ab82:	bf18      	it	ne
  40ab84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ab88:	d029      	beq.n	40abde <__adddf3+0x24e>
  40ab8a:	ea94 0f05 	teq	r4, r5
  40ab8e:	bf08      	it	eq
  40ab90:	ea90 0f02 	teqeq	r0, r2
  40ab94:	d005      	beq.n	40aba2 <__adddf3+0x212>
  40ab96:	ea54 0c00 	orrs.w	ip, r4, r0
  40ab9a:	bf04      	itt	eq
  40ab9c:	4619      	moveq	r1, r3
  40ab9e:	4610      	moveq	r0, r2
  40aba0:	bd30      	pop	{r4, r5, pc}
  40aba2:	ea91 0f03 	teq	r1, r3
  40aba6:	bf1e      	ittt	ne
  40aba8:	2100      	movne	r1, #0
  40abaa:	2000      	movne	r0, #0
  40abac:	bd30      	popne	{r4, r5, pc}
  40abae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40abb2:	d105      	bne.n	40abc0 <__adddf3+0x230>
  40abb4:	0040      	lsls	r0, r0, #1
  40abb6:	4149      	adcs	r1, r1
  40abb8:	bf28      	it	cs
  40abba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40abbe:	bd30      	pop	{r4, r5, pc}
  40abc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40abc4:	bf3c      	itt	cc
  40abc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40abca:	bd30      	popcc	{r4, r5, pc}
  40abcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40abd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40abd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40abd8:	f04f 0000 	mov.w	r0, #0
  40abdc:	bd30      	pop	{r4, r5, pc}
  40abde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40abe2:	bf1a      	itte	ne
  40abe4:	4619      	movne	r1, r3
  40abe6:	4610      	movne	r0, r2
  40abe8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40abec:	bf1c      	itt	ne
  40abee:	460b      	movne	r3, r1
  40abf0:	4602      	movne	r2, r0
  40abf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40abf6:	bf06      	itte	eq
  40abf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40abfc:	ea91 0f03 	teqeq	r1, r3
  40ac00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ac04:	bd30      	pop	{r4, r5, pc}
  40ac06:	bf00      	nop

0040ac08 <__aeabi_ui2d>:
  40ac08:	f090 0f00 	teq	r0, #0
  40ac0c:	bf04      	itt	eq
  40ac0e:	2100      	moveq	r1, #0
  40ac10:	4770      	bxeq	lr
  40ac12:	b530      	push	{r4, r5, lr}
  40ac14:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ac18:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ac1c:	f04f 0500 	mov.w	r5, #0
  40ac20:	f04f 0100 	mov.w	r1, #0
  40ac24:	e750      	b.n	40aac8 <__adddf3+0x138>
  40ac26:	bf00      	nop

0040ac28 <__aeabi_i2d>:
  40ac28:	f090 0f00 	teq	r0, #0
  40ac2c:	bf04      	itt	eq
  40ac2e:	2100      	moveq	r1, #0
  40ac30:	4770      	bxeq	lr
  40ac32:	b530      	push	{r4, r5, lr}
  40ac34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ac38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ac3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ac40:	bf48      	it	mi
  40ac42:	4240      	negmi	r0, r0
  40ac44:	f04f 0100 	mov.w	r1, #0
  40ac48:	e73e      	b.n	40aac8 <__adddf3+0x138>
  40ac4a:	bf00      	nop

0040ac4c <__aeabi_f2d>:
  40ac4c:	0042      	lsls	r2, r0, #1
  40ac4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40ac52:	ea4f 0131 	mov.w	r1, r1, rrx
  40ac56:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40ac5a:	bf1f      	itttt	ne
  40ac5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40ac60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ac64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40ac68:	4770      	bxne	lr
  40ac6a:	f092 0f00 	teq	r2, #0
  40ac6e:	bf14      	ite	ne
  40ac70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ac74:	4770      	bxeq	lr
  40ac76:	b530      	push	{r4, r5, lr}
  40ac78:	f44f 7460 	mov.w	r4, #896	; 0x380
  40ac7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ac80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ac84:	e720      	b.n	40aac8 <__adddf3+0x138>
  40ac86:	bf00      	nop

0040ac88 <__aeabi_ul2d>:
  40ac88:	ea50 0201 	orrs.w	r2, r0, r1
  40ac8c:	bf08      	it	eq
  40ac8e:	4770      	bxeq	lr
  40ac90:	b530      	push	{r4, r5, lr}
  40ac92:	f04f 0500 	mov.w	r5, #0
  40ac96:	e00a      	b.n	40acae <__aeabi_l2d+0x16>

0040ac98 <__aeabi_l2d>:
  40ac98:	ea50 0201 	orrs.w	r2, r0, r1
  40ac9c:	bf08      	it	eq
  40ac9e:	4770      	bxeq	lr
  40aca0:	b530      	push	{r4, r5, lr}
  40aca2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40aca6:	d502      	bpl.n	40acae <__aeabi_l2d+0x16>
  40aca8:	4240      	negs	r0, r0
  40acaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40acae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40acb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40acb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40acba:	f43f aedc 	beq.w	40aa76 <__adddf3+0xe6>
  40acbe:	f04f 0203 	mov.w	r2, #3
  40acc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40acc6:	bf18      	it	ne
  40acc8:	3203      	addne	r2, #3
  40acca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40acce:	bf18      	it	ne
  40acd0:	3203      	addne	r2, #3
  40acd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40acd6:	f1c2 0320 	rsb	r3, r2, #32
  40acda:	fa00 fc03 	lsl.w	ip, r0, r3
  40acde:	fa20 f002 	lsr.w	r0, r0, r2
  40ace2:	fa01 fe03 	lsl.w	lr, r1, r3
  40ace6:	ea40 000e 	orr.w	r0, r0, lr
  40acea:	fa21 f102 	lsr.w	r1, r1, r2
  40acee:	4414      	add	r4, r2
  40acf0:	e6c1      	b.n	40aa76 <__adddf3+0xe6>
  40acf2:	bf00      	nop

0040acf4 <__aeabi_dmul>:
  40acf4:	b570      	push	{r4, r5, r6, lr}
  40acf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40acfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40acfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ad02:	bf1d      	ittte	ne
  40ad04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ad08:	ea94 0f0c 	teqne	r4, ip
  40ad0c:	ea95 0f0c 	teqne	r5, ip
  40ad10:	f000 f8de 	bleq	40aed0 <__aeabi_dmul+0x1dc>
  40ad14:	442c      	add	r4, r5
  40ad16:	ea81 0603 	eor.w	r6, r1, r3
  40ad1a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ad1e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ad22:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ad26:	bf18      	it	ne
  40ad28:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ad2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ad30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40ad34:	d038      	beq.n	40ada8 <__aeabi_dmul+0xb4>
  40ad36:	fba0 ce02 	umull	ip, lr, r0, r2
  40ad3a:	f04f 0500 	mov.w	r5, #0
  40ad3e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40ad42:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40ad46:	fbe0 e503 	umlal	lr, r5, r0, r3
  40ad4a:	f04f 0600 	mov.w	r6, #0
  40ad4e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40ad52:	f09c 0f00 	teq	ip, #0
  40ad56:	bf18      	it	ne
  40ad58:	f04e 0e01 	orrne.w	lr, lr, #1
  40ad5c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40ad60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40ad64:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40ad68:	d204      	bcs.n	40ad74 <__aeabi_dmul+0x80>
  40ad6a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40ad6e:	416d      	adcs	r5, r5
  40ad70:	eb46 0606 	adc.w	r6, r6, r6
  40ad74:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40ad78:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40ad7c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40ad80:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40ad84:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40ad88:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ad8c:	bf88      	it	hi
  40ad8e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ad92:	d81e      	bhi.n	40add2 <__aeabi_dmul+0xde>
  40ad94:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40ad98:	bf08      	it	eq
  40ad9a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40ad9e:	f150 0000 	adcs.w	r0, r0, #0
  40ada2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ada6:	bd70      	pop	{r4, r5, r6, pc}
  40ada8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40adac:	ea46 0101 	orr.w	r1, r6, r1
  40adb0:	ea40 0002 	orr.w	r0, r0, r2
  40adb4:	ea81 0103 	eor.w	r1, r1, r3
  40adb8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40adbc:	bfc2      	ittt	gt
  40adbe:	ebd4 050c 	rsbsgt	r5, r4, ip
  40adc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40adc6:	bd70      	popgt	{r4, r5, r6, pc}
  40adc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40adcc:	f04f 0e00 	mov.w	lr, #0
  40add0:	3c01      	subs	r4, #1
  40add2:	f300 80ab 	bgt.w	40af2c <__aeabi_dmul+0x238>
  40add6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40adda:	bfde      	ittt	le
  40addc:	2000      	movle	r0, #0
  40adde:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40ade2:	bd70      	pople	{r4, r5, r6, pc}
  40ade4:	f1c4 0400 	rsb	r4, r4, #0
  40ade8:	3c20      	subs	r4, #32
  40adea:	da35      	bge.n	40ae58 <__aeabi_dmul+0x164>
  40adec:	340c      	adds	r4, #12
  40adee:	dc1b      	bgt.n	40ae28 <__aeabi_dmul+0x134>
  40adf0:	f104 0414 	add.w	r4, r4, #20
  40adf4:	f1c4 0520 	rsb	r5, r4, #32
  40adf8:	fa00 f305 	lsl.w	r3, r0, r5
  40adfc:	fa20 f004 	lsr.w	r0, r0, r4
  40ae00:	fa01 f205 	lsl.w	r2, r1, r5
  40ae04:	ea40 0002 	orr.w	r0, r0, r2
  40ae08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40ae0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ae10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ae14:	fa21 f604 	lsr.w	r6, r1, r4
  40ae18:	eb42 0106 	adc.w	r1, r2, r6
  40ae1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ae20:	bf08      	it	eq
  40ae22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ae26:	bd70      	pop	{r4, r5, r6, pc}
  40ae28:	f1c4 040c 	rsb	r4, r4, #12
  40ae2c:	f1c4 0520 	rsb	r5, r4, #32
  40ae30:	fa00 f304 	lsl.w	r3, r0, r4
  40ae34:	fa20 f005 	lsr.w	r0, r0, r5
  40ae38:	fa01 f204 	lsl.w	r2, r1, r4
  40ae3c:	ea40 0002 	orr.w	r0, r0, r2
  40ae40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ae44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ae48:	f141 0100 	adc.w	r1, r1, #0
  40ae4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ae50:	bf08      	it	eq
  40ae52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ae56:	bd70      	pop	{r4, r5, r6, pc}
  40ae58:	f1c4 0520 	rsb	r5, r4, #32
  40ae5c:	fa00 f205 	lsl.w	r2, r0, r5
  40ae60:	ea4e 0e02 	orr.w	lr, lr, r2
  40ae64:	fa20 f304 	lsr.w	r3, r0, r4
  40ae68:	fa01 f205 	lsl.w	r2, r1, r5
  40ae6c:	ea43 0302 	orr.w	r3, r3, r2
  40ae70:	fa21 f004 	lsr.w	r0, r1, r4
  40ae74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ae78:	fa21 f204 	lsr.w	r2, r1, r4
  40ae7c:	ea20 0002 	bic.w	r0, r0, r2
  40ae80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40ae84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ae88:	bf08      	it	eq
  40ae8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ae8e:	bd70      	pop	{r4, r5, r6, pc}
  40ae90:	f094 0f00 	teq	r4, #0
  40ae94:	d10f      	bne.n	40aeb6 <__aeabi_dmul+0x1c2>
  40ae96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40ae9a:	0040      	lsls	r0, r0, #1
  40ae9c:	eb41 0101 	adc.w	r1, r1, r1
  40aea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aea4:	bf08      	it	eq
  40aea6:	3c01      	subeq	r4, #1
  40aea8:	d0f7      	beq.n	40ae9a <__aeabi_dmul+0x1a6>
  40aeaa:	ea41 0106 	orr.w	r1, r1, r6
  40aeae:	f095 0f00 	teq	r5, #0
  40aeb2:	bf18      	it	ne
  40aeb4:	4770      	bxne	lr
  40aeb6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40aeba:	0052      	lsls	r2, r2, #1
  40aebc:	eb43 0303 	adc.w	r3, r3, r3
  40aec0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40aec4:	bf08      	it	eq
  40aec6:	3d01      	subeq	r5, #1
  40aec8:	d0f7      	beq.n	40aeba <__aeabi_dmul+0x1c6>
  40aeca:	ea43 0306 	orr.w	r3, r3, r6
  40aece:	4770      	bx	lr
  40aed0:	ea94 0f0c 	teq	r4, ip
  40aed4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aed8:	bf18      	it	ne
  40aeda:	ea95 0f0c 	teqne	r5, ip
  40aede:	d00c      	beq.n	40aefa <__aeabi_dmul+0x206>
  40aee0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aee4:	bf18      	it	ne
  40aee6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aeea:	d1d1      	bne.n	40ae90 <__aeabi_dmul+0x19c>
  40aeec:	ea81 0103 	eor.w	r1, r1, r3
  40aef0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aef4:	f04f 0000 	mov.w	r0, #0
  40aef8:	bd70      	pop	{r4, r5, r6, pc}
  40aefa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aefe:	bf06      	itte	eq
  40af00:	4610      	moveq	r0, r2
  40af02:	4619      	moveq	r1, r3
  40af04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40af08:	d019      	beq.n	40af3e <__aeabi_dmul+0x24a>
  40af0a:	ea94 0f0c 	teq	r4, ip
  40af0e:	d102      	bne.n	40af16 <__aeabi_dmul+0x222>
  40af10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40af14:	d113      	bne.n	40af3e <__aeabi_dmul+0x24a>
  40af16:	ea95 0f0c 	teq	r5, ip
  40af1a:	d105      	bne.n	40af28 <__aeabi_dmul+0x234>
  40af1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40af20:	bf1c      	itt	ne
  40af22:	4610      	movne	r0, r2
  40af24:	4619      	movne	r1, r3
  40af26:	d10a      	bne.n	40af3e <__aeabi_dmul+0x24a>
  40af28:	ea81 0103 	eor.w	r1, r1, r3
  40af2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40af30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40af34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40af38:	f04f 0000 	mov.w	r0, #0
  40af3c:	bd70      	pop	{r4, r5, r6, pc}
  40af3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40af42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40af46:	bd70      	pop	{r4, r5, r6, pc}

0040af48 <__aeabi_ddiv>:
  40af48:	b570      	push	{r4, r5, r6, lr}
  40af4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40af4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40af52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40af56:	bf1d      	ittte	ne
  40af58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40af5c:	ea94 0f0c 	teqne	r4, ip
  40af60:	ea95 0f0c 	teqne	r5, ip
  40af64:	f000 f8a7 	bleq	40b0b6 <__aeabi_ddiv+0x16e>
  40af68:	eba4 0405 	sub.w	r4, r4, r5
  40af6c:	ea81 0e03 	eor.w	lr, r1, r3
  40af70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40af74:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40af78:	f000 8088 	beq.w	40b08c <__aeabi_ddiv+0x144>
  40af7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40af80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40af84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40af88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40af8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40af90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40af94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40af98:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40af9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40afa0:	429d      	cmp	r5, r3
  40afa2:	bf08      	it	eq
  40afa4:	4296      	cmpeq	r6, r2
  40afa6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40afaa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40afae:	d202      	bcs.n	40afb6 <__aeabi_ddiv+0x6e>
  40afb0:	085b      	lsrs	r3, r3, #1
  40afb2:	ea4f 0232 	mov.w	r2, r2, rrx
  40afb6:	1ab6      	subs	r6, r6, r2
  40afb8:	eb65 0503 	sbc.w	r5, r5, r3
  40afbc:	085b      	lsrs	r3, r3, #1
  40afbe:	ea4f 0232 	mov.w	r2, r2, rrx
  40afc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40afc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40afca:	ebb6 0e02 	subs.w	lr, r6, r2
  40afce:	eb75 0e03 	sbcs.w	lr, r5, r3
  40afd2:	bf22      	ittt	cs
  40afd4:	1ab6      	subcs	r6, r6, r2
  40afd6:	4675      	movcs	r5, lr
  40afd8:	ea40 000c 	orrcs.w	r0, r0, ip
  40afdc:	085b      	lsrs	r3, r3, #1
  40afde:	ea4f 0232 	mov.w	r2, r2, rrx
  40afe2:	ebb6 0e02 	subs.w	lr, r6, r2
  40afe6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40afea:	bf22      	ittt	cs
  40afec:	1ab6      	subcs	r6, r6, r2
  40afee:	4675      	movcs	r5, lr
  40aff0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40aff4:	085b      	lsrs	r3, r3, #1
  40aff6:	ea4f 0232 	mov.w	r2, r2, rrx
  40affa:	ebb6 0e02 	subs.w	lr, r6, r2
  40affe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b002:	bf22      	ittt	cs
  40b004:	1ab6      	subcs	r6, r6, r2
  40b006:	4675      	movcs	r5, lr
  40b008:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b00c:	085b      	lsrs	r3, r3, #1
  40b00e:	ea4f 0232 	mov.w	r2, r2, rrx
  40b012:	ebb6 0e02 	subs.w	lr, r6, r2
  40b016:	eb75 0e03 	sbcs.w	lr, r5, r3
  40b01a:	bf22      	ittt	cs
  40b01c:	1ab6      	subcs	r6, r6, r2
  40b01e:	4675      	movcs	r5, lr
  40b020:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b024:	ea55 0e06 	orrs.w	lr, r5, r6
  40b028:	d018      	beq.n	40b05c <__aeabi_ddiv+0x114>
  40b02a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40b02e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40b032:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40b036:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40b03a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40b03e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40b042:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40b046:	d1c0      	bne.n	40afca <__aeabi_ddiv+0x82>
  40b048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b04c:	d10b      	bne.n	40b066 <__aeabi_ddiv+0x11e>
  40b04e:	ea41 0100 	orr.w	r1, r1, r0
  40b052:	f04f 0000 	mov.w	r0, #0
  40b056:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40b05a:	e7b6      	b.n	40afca <__aeabi_ddiv+0x82>
  40b05c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b060:	bf04      	itt	eq
  40b062:	4301      	orreq	r1, r0
  40b064:	2000      	moveq	r0, #0
  40b066:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40b06a:	bf88      	it	hi
  40b06c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40b070:	f63f aeaf 	bhi.w	40add2 <__aeabi_dmul+0xde>
  40b074:	ebb5 0c03 	subs.w	ip, r5, r3
  40b078:	bf04      	itt	eq
  40b07a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40b07e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b082:	f150 0000 	adcs.w	r0, r0, #0
  40b086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b08a:	bd70      	pop	{r4, r5, r6, pc}
  40b08c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40b090:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40b094:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40b098:	bfc2      	ittt	gt
  40b09a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40b09e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40b0a2:	bd70      	popgt	{r4, r5, r6, pc}
  40b0a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b0a8:	f04f 0e00 	mov.w	lr, #0
  40b0ac:	3c01      	subs	r4, #1
  40b0ae:	e690      	b.n	40add2 <__aeabi_dmul+0xde>
  40b0b0:	ea45 0e06 	orr.w	lr, r5, r6
  40b0b4:	e68d      	b.n	40add2 <__aeabi_dmul+0xde>
  40b0b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40b0ba:	ea94 0f0c 	teq	r4, ip
  40b0be:	bf08      	it	eq
  40b0c0:	ea95 0f0c 	teqeq	r5, ip
  40b0c4:	f43f af3b 	beq.w	40af3e <__aeabi_dmul+0x24a>
  40b0c8:	ea94 0f0c 	teq	r4, ip
  40b0cc:	d10a      	bne.n	40b0e4 <__aeabi_ddiv+0x19c>
  40b0ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40b0d2:	f47f af34 	bne.w	40af3e <__aeabi_dmul+0x24a>
  40b0d6:	ea95 0f0c 	teq	r5, ip
  40b0da:	f47f af25 	bne.w	40af28 <__aeabi_dmul+0x234>
  40b0de:	4610      	mov	r0, r2
  40b0e0:	4619      	mov	r1, r3
  40b0e2:	e72c      	b.n	40af3e <__aeabi_dmul+0x24a>
  40b0e4:	ea95 0f0c 	teq	r5, ip
  40b0e8:	d106      	bne.n	40b0f8 <__aeabi_ddiv+0x1b0>
  40b0ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40b0ee:	f43f aefd 	beq.w	40aeec <__aeabi_dmul+0x1f8>
  40b0f2:	4610      	mov	r0, r2
  40b0f4:	4619      	mov	r1, r3
  40b0f6:	e722      	b.n	40af3e <__aeabi_dmul+0x24a>
  40b0f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40b0fc:	bf18      	it	ne
  40b0fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40b102:	f47f aec5 	bne.w	40ae90 <__aeabi_dmul+0x19c>
  40b106:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40b10a:	f47f af0d 	bne.w	40af28 <__aeabi_dmul+0x234>
  40b10e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40b112:	f47f aeeb 	bne.w	40aeec <__aeabi_dmul+0x1f8>
  40b116:	e712      	b.n	40af3e <__aeabi_dmul+0x24a>

0040b118 <__gedf2>:
  40b118:	f04f 3cff 	mov.w	ip, #4294967295
  40b11c:	e006      	b.n	40b12c <__cmpdf2+0x4>
  40b11e:	bf00      	nop

0040b120 <__ledf2>:
  40b120:	f04f 0c01 	mov.w	ip, #1
  40b124:	e002      	b.n	40b12c <__cmpdf2+0x4>
  40b126:	bf00      	nop

0040b128 <__cmpdf2>:
  40b128:	f04f 0c01 	mov.w	ip, #1
  40b12c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40b130:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b13c:	bf18      	it	ne
  40b13e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40b142:	d01b      	beq.n	40b17c <__cmpdf2+0x54>
  40b144:	b001      	add	sp, #4
  40b146:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40b14a:	bf0c      	ite	eq
  40b14c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40b150:	ea91 0f03 	teqne	r1, r3
  40b154:	bf02      	ittt	eq
  40b156:	ea90 0f02 	teqeq	r0, r2
  40b15a:	2000      	moveq	r0, #0
  40b15c:	4770      	bxeq	lr
  40b15e:	f110 0f00 	cmn.w	r0, #0
  40b162:	ea91 0f03 	teq	r1, r3
  40b166:	bf58      	it	pl
  40b168:	4299      	cmppl	r1, r3
  40b16a:	bf08      	it	eq
  40b16c:	4290      	cmpeq	r0, r2
  40b16e:	bf2c      	ite	cs
  40b170:	17d8      	asrcs	r0, r3, #31
  40b172:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40b176:	f040 0001 	orr.w	r0, r0, #1
  40b17a:	4770      	bx	lr
  40b17c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40b180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b184:	d102      	bne.n	40b18c <__cmpdf2+0x64>
  40b186:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40b18a:	d107      	bne.n	40b19c <__cmpdf2+0x74>
  40b18c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b190:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b194:	d1d6      	bne.n	40b144 <__cmpdf2+0x1c>
  40b196:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b19a:	d0d3      	beq.n	40b144 <__cmpdf2+0x1c>
  40b19c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b1a0:	4770      	bx	lr
  40b1a2:	bf00      	nop

0040b1a4 <__aeabi_cdrcmple>:
  40b1a4:	4684      	mov	ip, r0
  40b1a6:	4610      	mov	r0, r2
  40b1a8:	4662      	mov	r2, ip
  40b1aa:	468c      	mov	ip, r1
  40b1ac:	4619      	mov	r1, r3
  40b1ae:	4663      	mov	r3, ip
  40b1b0:	e000      	b.n	40b1b4 <__aeabi_cdcmpeq>
  40b1b2:	bf00      	nop

0040b1b4 <__aeabi_cdcmpeq>:
  40b1b4:	b501      	push	{r0, lr}
  40b1b6:	f7ff ffb7 	bl	40b128 <__cmpdf2>
  40b1ba:	2800      	cmp	r0, #0
  40b1bc:	bf48      	it	mi
  40b1be:	f110 0f00 	cmnmi.w	r0, #0
  40b1c2:	bd01      	pop	{r0, pc}

0040b1c4 <__aeabi_dcmpeq>:
  40b1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b1c8:	f7ff fff4 	bl	40b1b4 <__aeabi_cdcmpeq>
  40b1cc:	bf0c      	ite	eq
  40b1ce:	2001      	moveq	r0, #1
  40b1d0:	2000      	movne	r0, #0
  40b1d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40b1d6:	bf00      	nop

0040b1d8 <__aeabi_dcmplt>:
  40b1d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b1dc:	f7ff ffea 	bl	40b1b4 <__aeabi_cdcmpeq>
  40b1e0:	bf34      	ite	cc
  40b1e2:	2001      	movcc	r0, #1
  40b1e4:	2000      	movcs	r0, #0
  40b1e6:	f85d fb08 	ldr.w	pc, [sp], #8
  40b1ea:	bf00      	nop

0040b1ec <__aeabi_dcmple>:
  40b1ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b1f0:	f7ff ffe0 	bl	40b1b4 <__aeabi_cdcmpeq>
  40b1f4:	bf94      	ite	ls
  40b1f6:	2001      	movls	r0, #1
  40b1f8:	2000      	movhi	r0, #0
  40b1fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40b1fe:	bf00      	nop

0040b200 <__aeabi_dcmpge>:
  40b200:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b204:	f7ff ffce 	bl	40b1a4 <__aeabi_cdrcmple>
  40b208:	bf94      	ite	ls
  40b20a:	2001      	movls	r0, #1
  40b20c:	2000      	movhi	r0, #0
  40b20e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b212:	bf00      	nop

0040b214 <__aeabi_dcmpgt>:
  40b214:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b218:	f7ff ffc4 	bl	40b1a4 <__aeabi_cdrcmple>
  40b21c:	bf34      	ite	cc
  40b21e:	2001      	movcc	r0, #1
  40b220:	2000      	movcs	r0, #0
  40b222:	f85d fb08 	ldr.w	pc, [sp], #8
  40b226:	bf00      	nop

0040b228 <__aeabi_d2iz>:
  40b228:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b22c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b230:	d215      	bcs.n	40b25e <__aeabi_d2iz+0x36>
  40b232:	d511      	bpl.n	40b258 <__aeabi_d2iz+0x30>
  40b234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b23c:	d912      	bls.n	40b264 <__aeabi_d2iz+0x3c>
  40b23e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b24a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b24e:	fa23 f002 	lsr.w	r0, r3, r2
  40b252:	bf18      	it	ne
  40b254:	4240      	negne	r0, r0
  40b256:	4770      	bx	lr
  40b258:	f04f 0000 	mov.w	r0, #0
  40b25c:	4770      	bx	lr
  40b25e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b262:	d105      	bne.n	40b270 <__aeabi_d2iz+0x48>
  40b264:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b268:	bf08      	it	eq
  40b26a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b26e:	4770      	bx	lr
  40b270:	f04f 0000 	mov.w	r0, #0
  40b274:	4770      	bx	lr
  40b276:	bf00      	nop

0040b278 <__aeabi_d2f>:
  40b278:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b27c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40b280:	bf24      	itt	cs
  40b282:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40b286:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40b28a:	d90d      	bls.n	40b2a8 <__aeabi_d2f+0x30>
  40b28c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b290:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40b294:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40b298:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40b29c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40b2a0:	bf08      	it	eq
  40b2a2:	f020 0001 	biceq.w	r0, r0, #1
  40b2a6:	4770      	bx	lr
  40b2a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40b2ac:	d121      	bne.n	40b2f2 <__aeabi_d2f+0x7a>
  40b2ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40b2b2:	bfbc      	itt	lt
  40b2b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40b2b8:	4770      	bxlt	lr
  40b2ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b2be:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40b2c2:	f1c2 0218 	rsb	r2, r2, #24
  40b2c6:	f1c2 0c20 	rsb	ip, r2, #32
  40b2ca:	fa10 f30c 	lsls.w	r3, r0, ip
  40b2ce:	fa20 f002 	lsr.w	r0, r0, r2
  40b2d2:	bf18      	it	ne
  40b2d4:	f040 0001 	orrne.w	r0, r0, #1
  40b2d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b2dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40b2e0:	fa03 fc0c 	lsl.w	ip, r3, ip
  40b2e4:	ea40 000c 	orr.w	r0, r0, ip
  40b2e8:	fa23 f302 	lsr.w	r3, r3, r2
  40b2ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40b2f0:	e7cc      	b.n	40b28c <__aeabi_d2f+0x14>
  40b2f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40b2f6:	d107      	bne.n	40b308 <__aeabi_d2f+0x90>
  40b2f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40b2fc:	bf1e      	ittt	ne
  40b2fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40b302:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40b306:	4770      	bxne	lr
  40b308:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40b30c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b310:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b314:	4770      	bx	lr
  40b316:	bf00      	nop

0040b318 <__assert_func>:
  40b318:	4c0a      	ldr	r4, [pc, #40]	; (40b344 <__assert_func+0x2c>)
  40b31a:	4605      	mov	r5, r0
  40b31c:	6820      	ldr	r0, [r4, #0]
  40b31e:	b500      	push	{lr}
  40b320:	68c0      	ldr	r0, [r0, #12]
  40b322:	b085      	sub	sp, #20
  40b324:	b15a      	cbz	r2, 40b33e <__assert_func+0x26>
  40b326:	4614      	mov	r4, r2
  40b328:	4a07      	ldr	r2, [pc, #28]	; (40b348 <__assert_func+0x30>)
  40b32a:	9402      	str	r4, [sp, #8]
  40b32c:	e88d 0006 	stmia.w	sp, {r1, r2}
  40b330:	461a      	mov	r2, r3
  40b332:	4906      	ldr	r1, [pc, #24]	; (40b34c <__assert_func+0x34>)
  40b334:	462b      	mov	r3, r5
  40b336:	f000 f81b 	bl	40b370 <fiprintf>
  40b33a:	f003 ffed 	bl	40f318 <abort>
  40b33e:	4a04      	ldr	r2, [pc, #16]	; (40b350 <__assert_func+0x38>)
  40b340:	4614      	mov	r4, r2
  40b342:	e7f2      	b.n	40b32a <__assert_func+0x12>
  40b344:	204004d8 	.word	0x204004d8
  40b348:	00413d28 	.word	0x00413d28
  40b34c:	00413d38 	.word	0x00413d38
  40b350:	00413454 	.word	0x00413454

0040b354 <atoff>:
  40b354:	2100      	movs	r1, #0
  40b356:	f001 bd99 	b.w	40ce8c <strtof>
  40b35a:	bf00      	nop

0040b35c <atoi>:
  40b35c:	2100      	movs	r1, #0
  40b35e:	220a      	movs	r2, #10
  40b360:	f001 be7e 	b.w	40d060 <strtol>

0040b364 <__errno>:
  40b364:	4b01      	ldr	r3, [pc, #4]	; (40b36c <__errno+0x8>)
  40b366:	6818      	ldr	r0, [r3, #0]
  40b368:	4770      	bx	lr
  40b36a:	bf00      	nop
  40b36c:	204004d8 	.word	0x204004d8

0040b370 <fiprintf>:
  40b370:	b40e      	push	{r1, r2, r3}
  40b372:	b510      	push	{r4, lr}
  40b374:	b083      	sub	sp, #12
  40b376:	4b07      	ldr	r3, [pc, #28]	; (40b394 <fiprintf+0x24>)
  40b378:	4601      	mov	r1, r0
  40b37a:	ac05      	add	r4, sp, #20
  40b37c:	6818      	ldr	r0, [r3, #0]
  40b37e:	f854 2b04 	ldr.w	r2, [r4], #4
  40b382:	4623      	mov	r3, r4
  40b384:	9401      	str	r4, [sp, #4]
  40b386:	f003 f921 	bl	40e5cc <_vfiprintf_r>
  40b38a:	b003      	add	sp, #12
  40b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b390:	b003      	add	sp, #12
  40b392:	4770      	bx	lr
  40b394:	204004d8 	.word	0x204004d8

0040b398 <__libc_init_array>:
  40b398:	b570      	push	{r4, r5, r6, lr}
  40b39a:	4e0f      	ldr	r6, [pc, #60]	; (40b3d8 <__libc_init_array+0x40>)
  40b39c:	4d0f      	ldr	r5, [pc, #60]	; (40b3dc <__libc_init_array+0x44>)
  40b39e:	1b76      	subs	r6, r6, r5
  40b3a0:	10b6      	asrs	r6, r6, #2
  40b3a2:	bf18      	it	ne
  40b3a4:	2400      	movne	r4, #0
  40b3a6:	d005      	beq.n	40b3b4 <__libc_init_array+0x1c>
  40b3a8:	3401      	adds	r4, #1
  40b3aa:	f855 3b04 	ldr.w	r3, [r5], #4
  40b3ae:	4798      	blx	r3
  40b3b0:	42a6      	cmp	r6, r4
  40b3b2:	d1f9      	bne.n	40b3a8 <__libc_init_array+0x10>
  40b3b4:	4e0a      	ldr	r6, [pc, #40]	; (40b3e0 <__libc_init_array+0x48>)
  40b3b6:	f008 fedf 	bl	414178 <_init>
  40b3ba:	4d0a      	ldr	r5, [pc, #40]	; (40b3e4 <__libc_init_array+0x4c>)
  40b3bc:	1b76      	subs	r6, r6, r5
  40b3be:	10b6      	asrs	r6, r6, #2
  40b3c0:	bf18      	it	ne
  40b3c2:	2400      	movne	r4, #0
  40b3c4:	d006      	beq.n	40b3d4 <__libc_init_array+0x3c>
  40b3c6:	3401      	adds	r4, #1
  40b3c8:	f855 3b04 	ldr.w	r3, [r5], #4
  40b3cc:	4798      	blx	r3
  40b3ce:	42a6      	cmp	r6, r4
  40b3d0:	d1f9      	bne.n	40b3c6 <__libc_init_array+0x2e>
  40b3d2:	bd70      	pop	{r4, r5, r6, pc}
  40b3d4:	bd70      	pop	{r4, r5, r6, pc}
  40b3d6:	bf00      	nop
  40b3d8:	00414184 	.word	0x00414184
  40b3dc:	00414184 	.word	0x00414184
  40b3e0:	0041418c 	.word	0x0041418c
  40b3e4:	00414184 	.word	0x00414184

0040b3e8 <iprintf>:
  40b3e8:	b40f      	push	{r0, r1, r2, r3}
  40b3ea:	b510      	push	{r4, lr}
  40b3ec:	b082      	sub	sp, #8
  40b3ee:	4b07      	ldr	r3, [pc, #28]	; (40b40c <iprintf+0x24>)
  40b3f0:	ac04      	add	r4, sp, #16
  40b3f2:	6818      	ldr	r0, [r3, #0]
  40b3f4:	f854 2b04 	ldr.w	r2, [r4], #4
  40b3f8:	6881      	ldr	r1, [r0, #8]
  40b3fa:	4623      	mov	r3, r4
  40b3fc:	9401      	str	r4, [sp, #4]
  40b3fe:	f003 f8e5 	bl	40e5cc <_vfiprintf_r>
  40b402:	b002      	add	sp, #8
  40b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b408:	b004      	add	sp, #16
  40b40a:	4770      	bx	lr
  40b40c:	204004d8 	.word	0x204004d8

0040b410 <malloc>:
  40b410:	4b02      	ldr	r3, [pc, #8]	; (40b41c <malloc+0xc>)
  40b412:	4601      	mov	r1, r0
  40b414:	6818      	ldr	r0, [r3, #0]
  40b416:	f000 b803 	b.w	40b420 <_malloc_r>
  40b41a:	bf00      	nop
  40b41c:	204004d8 	.word	0x204004d8

0040b420 <_malloc_r>:
  40b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b424:	f101 040b 	add.w	r4, r1, #11
  40b428:	b083      	sub	sp, #12
  40b42a:	4605      	mov	r5, r0
  40b42c:	2c16      	cmp	r4, #22
  40b42e:	d927      	bls.n	40b480 <_malloc_r+0x60>
  40b430:	f034 0407 	bics.w	r4, r4, #7
  40b434:	d42a      	bmi.n	40b48c <_malloc_r+0x6c>
  40b436:	42a1      	cmp	r1, r4
  40b438:	d828      	bhi.n	40b48c <_malloc_r+0x6c>
  40b43a:	f000 fb87 	bl	40bb4c <__malloc_lock>
  40b43e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40b442:	d22b      	bcs.n	40b49c <_malloc_r+0x7c>
  40b444:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40b448:	4ec0      	ldr	r6, [pc, #768]	; (40b74c <_malloc_r+0x32c>)
  40b44a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40b44e:	68d3      	ldr	r3, [r2, #12]
  40b450:	4293      	cmp	r3, r2
  40b452:	f000 8171 	beq.w	40b738 <_malloc_r+0x318>
  40b456:	685a      	ldr	r2, [r3, #4]
  40b458:	f103 0808 	add.w	r8, r3, #8
  40b45c:	68d9      	ldr	r1, [r3, #12]
  40b45e:	4628      	mov	r0, r5
  40b460:	f022 0203 	bic.w	r2, r2, #3
  40b464:	689c      	ldr	r4, [r3, #8]
  40b466:	4413      	add	r3, r2
  40b468:	60e1      	str	r1, [r4, #12]
  40b46a:	608c      	str	r4, [r1, #8]
  40b46c:	685a      	ldr	r2, [r3, #4]
  40b46e:	f042 0201 	orr.w	r2, r2, #1
  40b472:	605a      	str	r2, [r3, #4]
  40b474:	f000 fb6c 	bl	40bb50 <__malloc_unlock>
  40b478:	4640      	mov	r0, r8
  40b47a:	b003      	add	sp, #12
  40b47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b480:	2910      	cmp	r1, #16
  40b482:	d803      	bhi.n	40b48c <_malloc_r+0x6c>
  40b484:	f000 fb62 	bl	40bb4c <__malloc_lock>
  40b488:	2410      	movs	r4, #16
  40b48a:	e7db      	b.n	40b444 <_malloc_r+0x24>
  40b48c:	f04f 0800 	mov.w	r8, #0
  40b490:	230c      	movs	r3, #12
  40b492:	4640      	mov	r0, r8
  40b494:	602b      	str	r3, [r5, #0]
  40b496:	b003      	add	sp, #12
  40b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b49c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40b4a0:	f000 8089 	beq.w	40b5b6 <_malloc_r+0x196>
  40b4a4:	f1bc 0f04 	cmp.w	ip, #4
  40b4a8:	f200 80c4 	bhi.w	40b634 <_malloc_r+0x214>
  40b4ac:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40b4b0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40b4b4:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b4b8:	4ea4      	ldr	r6, [pc, #656]	; (40b74c <_malloc_r+0x32c>)
  40b4ba:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40b4be:	68c3      	ldr	r3, [r0, #12]
  40b4c0:	4298      	cmp	r0, r3
  40b4c2:	d105      	bne.n	40b4d0 <_malloc_r+0xb0>
  40b4c4:	e00c      	b.n	40b4e0 <_malloc_r+0xc0>
  40b4c6:	2900      	cmp	r1, #0
  40b4c8:	da79      	bge.n	40b5be <_malloc_r+0x19e>
  40b4ca:	68db      	ldr	r3, [r3, #12]
  40b4cc:	4298      	cmp	r0, r3
  40b4ce:	d007      	beq.n	40b4e0 <_malloc_r+0xc0>
  40b4d0:	685a      	ldr	r2, [r3, #4]
  40b4d2:	f022 0203 	bic.w	r2, r2, #3
  40b4d6:	1b11      	subs	r1, r2, r4
  40b4d8:	290f      	cmp	r1, #15
  40b4da:	ddf4      	ble.n	40b4c6 <_malloc_r+0xa6>
  40b4dc:	f10c 3cff 	add.w	ip, ip, #4294967295
  40b4e0:	f10c 0c01 	add.w	ip, ip, #1
  40b4e4:	4f99      	ldr	r7, [pc, #612]	; (40b74c <_malloc_r+0x32c>)
  40b4e6:	6933      	ldr	r3, [r6, #16]
  40b4e8:	f107 0e08 	add.w	lr, r7, #8
  40b4ec:	4573      	cmp	r3, lr
  40b4ee:	f000 8119 	beq.w	40b724 <_malloc_r+0x304>
  40b4f2:	685a      	ldr	r2, [r3, #4]
  40b4f4:	f022 0203 	bic.w	r2, r2, #3
  40b4f8:	1b11      	subs	r1, r2, r4
  40b4fa:	290f      	cmp	r1, #15
  40b4fc:	f300 80ca 	bgt.w	40b694 <_malloc_r+0x274>
  40b500:	2900      	cmp	r1, #0
  40b502:	f8c7 e014 	str.w	lr, [r7, #20]
  40b506:	f8c7 e010 	str.w	lr, [r7, #16]
  40b50a:	da6a      	bge.n	40b5e2 <_malloc_r+0x1c2>
  40b50c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40b510:	f080 809f 	bcs.w	40b652 <_malloc_r+0x232>
  40b514:	08d2      	lsrs	r2, r2, #3
  40b516:	2001      	movs	r0, #1
  40b518:	6879      	ldr	r1, [r7, #4]
  40b51a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40b51e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40b522:	fa00 f008 	lsl.w	r0, r0, r8
  40b526:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40b52a:	4308      	orrs	r0, r1
  40b52c:	60da      	str	r2, [r3, #12]
  40b52e:	f8c3 8008 	str.w	r8, [r3, #8]
  40b532:	6078      	str	r0, [r7, #4]
  40b534:	6093      	str	r3, [r2, #8]
  40b536:	f8c8 300c 	str.w	r3, [r8, #12]
  40b53a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40b53e:	2101      	movs	r1, #1
  40b540:	4099      	lsls	r1, r3
  40b542:	4281      	cmp	r1, r0
  40b544:	d85b      	bhi.n	40b5fe <_malloc_r+0x1de>
  40b546:	4208      	tst	r0, r1
  40b548:	d106      	bne.n	40b558 <_malloc_r+0x138>
  40b54a:	f02c 0c03 	bic.w	ip, ip, #3
  40b54e:	0049      	lsls	r1, r1, #1
  40b550:	f10c 0c04 	add.w	ip, ip, #4
  40b554:	4208      	tst	r0, r1
  40b556:	d0fa      	beq.n	40b54e <_malloc_r+0x12e>
  40b558:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40b55c:	46e1      	mov	r9, ip
  40b55e:	4640      	mov	r0, r8
  40b560:	68c7      	ldr	r7, [r0, #12]
  40b562:	42b8      	cmp	r0, r7
  40b564:	d107      	bne.n	40b576 <_malloc_r+0x156>
  40b566:	e0df      	b.n	40b728 <_malloc_r+0x308>
  40b568:	2a00      	cmp	r2, #0
  40b56a:	f280 80f7 	bge.w	40b75c <_malloc_r+0x33c>
  40b56e:	68ff      	ldr	r7, [r7, #12]
  40b570:	42b8      	cmp	r0, r7
  40b572:	f000 80d9 	beq.w	40b728 <_malloc_r+0x308>
  40b576:	687b      	ldr	r3, [r7, #4]
  40b578:	f023 0303 	bic.w	r3, r3, #3
  40b57c:	1b1a      	subs	r2, r3, r4
  40b57e:	2a0f      	cmp	r2, #15
  40b580:	ddf2      	ble.n	40b568 <_malloc_r+0x148>
  40b582:	46b8      	mov	r8, r7
  40b584:	68fb      	ldr	r3, [r7, #12]
  40b586:	f044 0901 	orr.w	r9, r4, #1
  40b58a:	f042 0c01 	orr.w	ip, r2, #1
  40b58e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40b592:	443c      	add	r4, r7
  40b594:	f8c7 9004 	str.w	r9, [r7, #4]
  40b598:	4628      	mov	r0, r5
  40b59a:	60cb      	str	r3, [r1, #12]
  40b59c:	6099      	str	r1, [r3, #8]
  40b59e:	6174      	str	r4, [r6, #20]
  40b5a0:	6134      	str	r4, [r6, #16]
  40b5a2:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b5a6:	f8c4 e008 	str.w	lr, [r4, #8]
  40b5aa:	f8c4 c004 	str.w	ip, [r4, #4]
  40b5ae:	50a2      	str	r2, [r4, r2]
  40b5b0:	f000 face 	bl	40bb50 <__malloc_unlock>
  40b5b4:	e760      	b.n	40b478 <_malloc_r+0x58>
  40b5b6:	207e      	movs	r0, #126	; 0x7e
  40b5b8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40b5bc:	e77c      	b.n	40b4b8 <_malloc_r+0x98>
  40b5be:	441a      	add	r2, r3
  40b5c0:	68dc      	ldr	r4, [r3, #12]
  40b5c2:	689e      	ldr	r6, [r3, #8]
  40b5c4:	f103 0808 	add.w	r8, r3, #8
  40b5c8:	6851      	ldr	r1, [r2, #4]
  40b5ca:	4628      	mov	r0, r5
  40b5cc:	60f4      	str	r4, [r6, #12]
  40b5ce:	f041 0301 	orr.w	r3, r1, #1
  40b5d2:	60a6      	str	r6, [r4, #8]
  40b5d4:	6053      	str	r3, [r2, #4]
  40b5d6:	f000 fabb 	bl	40bb50 <__malloc_unlock>
  40b5da:	4640      	mov	r0, r8
  40b5dc:	b003      	add	sp, #12
  40b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5e2:	441a      	add	r2, r3
  40b5e4:	f103 0808 	add.w	r8, r3, #8
  40b5e8:	4628      	mov	r0, r5
  40b5ea:	6853      	ldr	r3, [r2, #4]
  40b5ec:	f043 0301 	orr.w	r3, r3, #1
  40b5f0:	6053      	str	r3, [r2, #4]
  40b5f2:	f000 faad 	bl	40bb50 <__malloc_unlock>
  40b5f6:	4640      	mov	r0, r8
  40b5f8:	b003      	add	sp, #12
  40b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b5fe:	68b7      	ldr	r7, [r6, #8]
  40b600:	687a      	ldr	r2, [r7, #4]
  40b602:	f022 0803 	bic.w	r8, r2, #3
  40b606:	ebc4 0208 	rsb	r2, r4, r8
  40b60a:	2a0f      	cmp	r2, #15
  40b60c:	dd56      	ble.n	40b6bc <_malloc_r+0x29c>
  40b60e:	45a0      	cmp	r8, r4
  40b610:	d354      	bcc.n	40b6bc <_malloc_r+0x29c>
  40b612:	f044 0301 	orr.w	r3, r4, #1
  40b616:	f042 0201 	orr.w	r2, r2, #1
  40b61a:	443c      	add	r4, r7
  40b61c:	f107 0808 	add.w	r8, r7, #8
  40b620:	607b      	str	r3, [r7, #4]
  40b622:	4628      	mov	r0, r5
  40b624:	60b4      	str	r4, [r6, #8]
  40b626:	6062      	str	r2, [r4, #4]
  40b628:	f000 fa92 	bl	40bb50 <__malloc_unlock>
  40b62c:	4640      	mov	r0, r8
  40b62e:	b003      	add	sp, #12
  40b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b634:	f1bc 0f14 	cmp.w	ip, #20
  40b638:	f240 809f 	bls.w	40b77a <_malloc_r+0x35a>
  40b63c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40b640:	f200 8127 	bhi.w	40b892 <_malloc_r+0x472>
  40b644:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40b648:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40b64c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b650:	e732      	b.n	40b4b8 <_malloc_r+0x98>
  40b652:	0a51      	lsrs	r1, r2, #9
  40b654:	2904      	cmp	r1, #4
  40b656:	f240 8095 	bls.w	40b784 <_malloc_r+0x364>
  40b65a:	2914      	cmp	r1, #20
  40b65c:	f200 8142 	bhi.w	40b8e4 <_malloc_r+0x4c4>
  40b660:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40b664:	0078      	lsls	r0, r7, #1
  40b666:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40b66a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40b74c <_malloc_r+0x32c>
  40b66e:	6881      	ldr	r1, [r0, #8]
  40b670:	4281      	cmp	r1, r0
  40b672:	f000 811b 	beq.w	40b8ac <_malloc_r+0x48c>
  40b676:	684f      	ldr	r7, [r1, #4]
  40b678:	f027 0703 	bic.w	r7, r7, #3
  40b67c:	42ba      	cmp	r2, r7
  40b67e:	d202      	bcs.n	40b686 <_malloc_r+0x266>
  40b680:	6889      	ldr	r1, [r1, #8]
  40b682:	4288      	cmp	r0, r1
  40b684:	d1f7      	bne.n	40b676 <_malloc_r+0x256>
  40b686:	68ca      	ldr	r2, [r1, #12]
  40b688:	6870      	ldr	r0, [r6, #4]
  40b68a:	60da      	str	r2, [r3, #12]
  40b68c:	6099      	str	r1, [r3, #8]
  40b68e:	6093      	str	r3, [r2, #8]
  40b690:	60cb      	str	r3, [r1, #12]
  40b692:	e752      	b.n	40b53a <_malloc_r+0x11a>
  40b694:	f044 0601 	orr.w	r6, r4, #1
  40b698:	f041 0201 	orr.w	r2, r1, #1
  40b69c:	441c      	add	r4, r3
  40b69e:	4628      	mov	r0, r5
  40b6a0:	605e      	str	r6, [r3, #4]
  40b6a2:	f103 0808 	add.w	r8, r3, #8
  40b6a6:	617c      	str	r4, [r7, #20]
  40b6a8:	613c      	str	r4, [r7, #16]
  40b6aa:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b6ae:	f8c4 e008 	str.w	lr, [r4, #8]
  40b6b2:	6062      	str	r2, [r4, #4]
  40b6b4:	5061      	str	r1, [r4, r1]
  40b6b6:	f000 fa4b 	bl	40bb50 <__malloc_unlock>
  40b6ba:	e6dd      	b.n	40b478 <_malloc_r+0x58>
  40b6bc:	4a24      	ldr	r2, [pc, #144]	; (40b750 <_malloc_r+0x330>)
  40b6be:	4b25      	ldr	r3, [pc, #148]	; (40b754 <_malloc_r+0x334>)
  40b6c0:	6811      	ldr	r1, [r2, #0]
  40b6c2:	681b      	ldr	r3, [r3, #0]
  40b6c4:	3101      	adds	r1, #1
  40b6c6:	4423      	add	r3, r4
  40b6c8:	f000 8109 	beq.w	40b8de <_malloc_r+0x4be>
  40b6cc:	f241 010f 	movw	r1, #4111	; 0x100f
  40b6d0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40b758 <_malloc_r+0x338>
  40b6d4:	4419      	add	r1, r3
  40b6d6:	ea01 0909 	and.w	r9, r1, r9
  40b6da:	4628      	mov	r0, r5
  40b6dc:	4649      	mov	r1, r9
  40b6de:	9201      	str	r2, [sp, #4]
  40b6e0:	f000 fa38 	bl	40bb54 <_sbrk_r>
  40b6e4:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b6e8:	4682      	mov	sl, r0
  40b6ea:	9a01      	ldr	r2, [sp, #4]
  40b6ec:	f000 8101 	beq.w	40b8f2 <_malloc_r+0x4d2>
  40b6f0:	1bbb      	subs	r3, r7, r6
  40b6f2:	eb07 0108 	add.w	r1, r7, r8
  40b6f6:	4815      	ldr	r0, [pc, #84]	; (40b74c <_malloc_r+0x32c>)
  40b6f8:	bf18      	it	ne
  40b6fa:	2301      	movne	r3, #1
  40b6fc:	4551      	cmp	r1, sl
  40b6fe:	d967      	bls.n	40b7d0 <_malloc_r+0x3b0>
  40b700:	2b00      	cmp	r3, #0
  40b702:	d065      	beq.n	40b7d0 <_malloc_r+0x3b0>
  40b704:	6887      	ldr	r7, [r0, #8]
  40b706:	687b      	ldr	r3, [r7, #4]
  40b708:	f023 0303 	bic.w	r3, r3, #3
  40b70c:	1b1a      	subs	r2, r3, r4
  40b70e:	2a0f      	cmp	r2, #15
  40b710:	dd02      	ble.n	40b718 <_malloc_r+0x2f8>
  40b712:	429c      	cmp	r4, r3
  40b714:	f67f af7d 	bls.w	40b612 <_malloc_r+0x1f2>
  40b718:	4628      	mov	r0, r5
  40b71a:	f04f 0800 	mov.w	r8, #0
  40b71e:	f000 fa17 	bl	40bb50 <__malloc_unlock>
  40b722:	e6a9      	b.n	40b478 <_malloc_r+0x58>
  40b724:	6878      	ldr	r0, [r7, #4]
  40b726:	e708      	b.n	40b53a <_malloc_r+0x11a>
  40b728:	f109 0901 	add.w	r9, r9, #1
  40b72c:	3008      	adds	r0, #8
  40b72e:	f019 0f03 	tst.w	r9, #3
  40b732:	f47f af15 	bne.w	40b560 <_malloc_r+0x140>
  40b736:	e02f      	b.n	40b798 <_malloc_r+0x378>
  40b738:	f103 0208 	add.w	r2, r3, #8
  40b73c:	695b      	ldr	r3, [r3, #20]
  40b73e:	429a      	cmp	r2, r3
  40b740:	bf08      	it	eq
  40b742:	f10c 0c02 	addeq.w	ip, ip, #2
  40b746:	f43f aecd 	beq.w	40b4e4 <_malloc_r+0xc4>
  40b74a:	e684      	b.n	40b456 <_malloc_r+0x36>
  40b74c:	204004dc 	.word	0x204004dc
  40b750:	204008e8 	.word	0x204008e8
  40b754:	2040c4ec 	.word	0x2040c4ec
  40b758:	fffff000 	.word	0xfffff000
  40b75c:	18fa      	adds	r2, r7, r3
  40b75e:	46b8      	mov	r8, r7
  40b760:	68f9      	ldr	r1, [r7, #12]
  40b762:	4628      	mov	r0, r5
  40b764:	6853      	ldr	r3, [r2, #4]
  40b766:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40b76a:	f043 0301 	orr.w	r3, r3, #1
  40b76e:	6053      	str	r3, [r2, #4]
  40b770:	60e1      	str	r1, [r4, #12]
  40b772:	608c      	str	r4, [r1, #8]
  40b774:	f000 f9ec 	bl	40bb50 <__malloc_unlock>
  40b778:	e67e      	b.n	40b478 <_malloc_r+0x58>
  40b77a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40b77e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b782:	e699      	b.n	40b4b8 <_malloc_r+0x98>
  40b784:	0991      	lsrs	r1, r2, #6
  40b786:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40b78a:	0078      	lsls	r0, r7, #1
  40b78c:	e76b      	b.n	40b666 <_malloc_r+0x246>
  40b78e:	f8d8 8000 	ldr.w	r8, [r8]
  40b792:	4598      	cmp	r8, r3
  40b794:	f040 80e6 	bne.w	40b964 <_malloc_r+0x544>
  40b798:	f01c 0f03 	tst.w	ip, #3
  40b79c:	f1a8 0308 	sub.w	r3, r8, #8
  40b7a0:	f10c 3cff 	add.w	ip, ip, #4294967295
  40b7a4:	d1f3      	bne.n	40b78e <_malloc_r+0x36e>
  40b7a6:	6873      	ldr	r3, [r6, #4]
  40b7a8:	ea23 0301 	bic.w	r3, r3, r1
  40b7ac:	6073      	str	r3, [r6, #4]
  40b7ae:	0049      	lsls	r1, r1, #1
  40b7b0:	4299      	cmp	r1, r3
  40b7b2:	f63f af24 	bhi.w	40b5fe <_malloc_r+0x1de>
  40b7b6:	2900      	cmp	r1, #0
  40b7b8:	f43f af21 	beq.w	40b5fe <_malloc_r+0x1de>
  40b7bc:	420b      	tst	r3, r1
  40b7be:	46cc      	mov	ip, r9
  40b7c0:	f47f aeca 	bne.w	40b558 <_malloc_r+0x138>
  40b7c4:	0049      	lsls	r1, r1, #1
  40b7c6:	f10c 0c04 	add.w	ip, ip, #4
  40b7ca:	420b      	tst	r3, r1
  40b7cc:	d0fa      	beq.n	40b7c4 <_malloc_r+0x3a4>
  40b7ce:	e6c3      	b.n	40b558 <_malloc_r+0x138>
  40b7d0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40b970 <_malloc_r+0x550>
  40b7d4:	4551      	cmp	r1, sl
  40b7d6:	f8db 0000 	ldr.w	r0, [fp]
  40b7da:	4448      	add	r0, r9
  40b7dc:	f8cb 0000 	str.w	r0, [fp]
  40b7e0:	f000 808c 	beq.w	40b8fc <_malloc_r+0x4dc>
  40b7e4:	6812      	ldr	r2, [r2, #0]
  40b7e6:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40b974 <_malloc_r+0x554>
  40b7ea:	3201      	adds	r2, #1
  40b7ec:	f000 80a3 	beq.w	40b936 <_malloc_r+0x516>
  40b7f0:	ebc1 010a 	rsb	r1, r1, sl
  40b7f4:	4408      	add	r0, r1
  40b7f6:	f8cb 0000 	str.w	r0, [fp]
  40b7fa:	f01a 0107 	ands.w	r1, sl, #7
  40b7fe:	d052      	beq.n	40b8a6 <_malloc_r+0x486>
  40b800:	f1c1 0008 	rsb	r0, r1, #8
  40b804:	f241 0208 	movw	r2, #4104	; 0x1008
  40b808:	4482      	add	sl, r0
  40b80a:	1a52      	subs	r2, r2, r1
  40b80c:	eb0a 0109 	add.w	r1, sl, r9
  40b810:	4628      	mov	r0, r5
  40b812:	9301      	str	r3, [sp, #4]
  40b814:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40b818:	ebc1 0902 	rsb	r9, r1, r2
  40b81c:	4649      	mov	r1, r9
  40b81e:	f000 f999 	bl	40bb54 <_sbrk_r>
  40b822:	1c43      	adds	r3, r0, #1
  40b824:	9b01      	ldr	r3, [sp, #4]
  40b826:	d07a      	beq.n	40b91e <_malloc_r+0x4fe>
  40b828:	ebca 0200 	rsb	r2, sl, r0
  40b82c:	444a      	add	r2, r9
  40b82e:	f042 0201 	orr.w	r2, r2, #1
  40b832:	f8db 0000 	ldr.w	r0, [fp]
  40b836:	f8c6 a008 	str.w	sl, [r6, #8]
  40b83a:	4448      	add	r0, r9
  40b83c:	f8ca 2004 	str.w	r2, [sl, #4]
  40b840:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40b970 <_malloc_r+0x550>
  40b844:	f8cb 0000 	str.w	r0, [fp]
  40b848:	b1a3      	cbz	r3, 40b874 <_malloc_r+0x454>
  40b84a:	f1b8 0f0f 	cmp.w	r8, #15
  40b84e:	d937      	bls.n	40b8c0 <_malloc_r+0x4a0>
  40b850:	687b      	ldr	r3, [r7, #4]
  40b852:	f1a8 020c 	sub.w	r2, r8, #12
  40b856:	f04f 0e05 	mov.w	lr, #5
  40b85a:	f022 0207 	bic.w	r2, r2, #7
  40b85e:	f003 0301 	and.w	r3, r3, #1
  40b862:	18b9      	adds	r1, r7, r2
  40b864:	4313      	orrs	r3, r2
  40b866:	2a0f      	cmp	r2, #15
  40b868:	607b      	str	r3, [r7, #4]
  40b86a:	f8c1 e004 	str.w	lr, [r1, #4]
  40b86e:	f8c1 e008 	str.w	lr, [r1, #8]
  40b872:	d858      	bhi.n	40b926 <_malloc_r+0x506>
  40b874:	4b3c      	ldr	r3, [pc, #240]	; (40b968 <_malloc_r+0x548>)
  40b876:	681a      	ldr	r2, [r3, #0]
  40b878:	4290      	cmp	r0, r2
  40b87a:	d900      	bls.n	40b87e <_malloc_r+0x45e>
  40b87c:	6018      	str	r0, [r3, #0]
  40b87e:	4b3b      	ldr	r3, [pc, #236]	; (40b96c <_malloc_r+0x54c>)
  40b880:	68b7      	ldr	r7, [r6, #8]
  40b882:	681a      	ldr	r2, [r3, #0]
  40b884:	4290      	cmp	r0, r2
  40b886:	d900      	bls.n	40b88a <_malloc_r+0x46a>
  40b888:	6018      	str	r0, [r3, #0]
  40b88a:	687b      	ldr	r3, [r7, #4]
  40b88c:	f023 0303 	bic.w	r3, r3, #3
  40b890:	e73c      	b.n	40b70c <_malloc_r+0x2ec>
  40b892:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40b896:	d817      	bhi.n	40b8c8 <_malloc_r+0x4a8>
  40b898:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40b89c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40b8a0:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b8a4:	e608      	b.n	40b4b8 <_malloc_r+0x98>
  40b8a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b8aa:	e7af      	b.n	40b80c <_malloc_r+0x3ec>
  40b8ac:	10bf      	asrs	r7, r7, #2
  40b8ae:	2001      	movs	r0, #1
  40b8b0:	460a      	mov	r2, r1
  40b8b2:	40b8      	lsls	r0, r7
  40b8b4:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40b8b8:	4338      	orrs	r0, r7
  40b8ba:	f8c9 0004 	str.w	r0, [r9, #4]
  40b8be:	e6e4      	b.n	40b68a <_malloc_r+0x26a>
  40b8c0:	2301      	movs	r3, #1
  40b8c2:	f8ca 3004 	str.w	r3, [sl, #4]
  40b8c6:	e727      	b.n	40b718 <_malloc_r+0x2f8>
  40b8c8:	f240 5354 	movw	r3, #1364	; 0x554
  40b8cc:	459c      	cmp	ip, r3
  40b8ce:	d822      	bhi.n	40b916 <_malloc_r+0x4f6>
  40b8d0:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40b8d4:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40b8d8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b8dc:	e5ec      	b.n	40b4b8 <_malloc_r+0x98>
  40b8de:	f103 0910 	add.w	r9, r3, #16
  40b8e2:	e6fa      	b.n	40b6da <_malloc_r+0x2ba>
  40b8e4:	2954      	cmp	r1, #84	; 0x54
  40b8e6:	d829      	bhi.n	40b93c <_malloc_r+0x51c>
  40b8e8:	0b11      	lsrs	r1, r2, #12
  40b8ea:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40b8ee:	0078      	lsls	r0, r7, #1
  40b8f0:	e6b9      	b.n	40b666 <_malloc_r+0x246>
  40b8f2:	68b7      	ldr	r7, [r6, #8]
  40b8f4:	687b      	ldr	r3, [r7, #4]
  40b8f6:	f023 0303 	bic.w	r3, r3, #3
  40b8fa:	e707      	b.n	40b70c <_malloc_r+0x2ec>
  40b8fc:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40b900:	f1be 0f00 	cmp.w	lr, #0
  40b904:	f47f af6e 	bne.w	40b7e4 <_malloc_r+0x3c4>
  40b908:	eb09 0308 	add.w	r3, r9, r8
  40b90c:	68b2      	ldr	r2, [r6, #8]
  40b90e:	f043 0301 	orr.w	r3, r3, #1
  40b912:	6053      	str	r3, [r2, #4]
  40b914:	e7ae      	b.n	40b874 <_malloc_r+0x454>
  40b916:	20fc      	movs	r0, #252	; 0xfc
  40b918:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40b91c:	e5cc      	b.n	40b4b8 <_malloc_r+0x98>
  40b91e:	2201      	movs	r2, #1
  40b920:	f04f 0900 	mov.w	r9, #0
  40b924:	e785      	b.n	40b832 <_malloc_r+0x412>
  40b926:	4628      	mov	r0, r5
  40b928:	f107 0108 	add.w	r1, r7, #8
  40b92c:	f004 ff1e 	bl	41076c <_free_r>
  40b930:	f8d9 0000 	ldr.w	r0, [r9]
  40b934:	e79e      	b.n	40b874 <_malloc_r+0x454>
  40b936:	f8ce a000 	str.w	sl, [lr]
  40b93a:	e75e      	b.n	40b7fa <_malloc_r+0x3da>
  40b93c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40b940:	d804      	bhi.n	40b94c <_malloc_r+0x52c>
  40b942:	0bd1      	lsrs	r1, r2, #15
  40b944:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40b948:	0078      	lsls	r0, r7, #1
  40b94a:	e68c      	b.n	40b666 <_malloc_r+0x246>
  40b94c:	f240 5054 	movw	r0, #1364	; 0x554
  40b950:	4281      	cmp	r1, r0
  40b952:	d804      	bhi.n	40b95e <_malloc_r+0x53e>
  40b954:	0c91      	lsrs	r1, r2, #18
  40b956:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40b95a:	0078      	lsls	r0, r7, #1
  40b95c:	e683      	b.n	40b666 <_malloc_r+0x246>
  40b95e:	20fc      	movs	r0, #252	; 0xfc
  40b960:	277e      	movs	r7, #126	; 0x7e
  40b962:	e680      	b.n	40b666 <_malloc_r+0x246>
  40b964:	6873      	ldr	r3, [r6, #4]
  40b966:	e722      	b.n	40b7ae <_malloc_r+0x38e>
  40b968:	2040c4e8 	.word	0x2040c4e8
  40b96c:	2040c4e4 	.word	0x2040c4e4
  40b970:	2040c4f0 	.word	0x2040c4f0
  40b974:	204008e8 	.word	0x204008e8

0040b978 <memcpy>:
  40b978:	4684      	mov	ip, r0
  40b97a:	ea41 0300 	orr.w	r3, r1, r0
  40b97e:	f013 0303 	ands.w	r3, r3, #3
  40b982:	d16d      	bne.n	40ba60 <memcpy+0xe8>
  40b984:	3a40      	subs	r2, #64	; 0x40
  40b986:	d341      	bcc.n	40ba0c <memcpy+0x94>
  40b988:	f851 3b04 	ldr.w	r3, [r1], #4
  40b98c:	f840 3b04 	str.w	r3, [r0], #4
  40b990:	f851 3b04 	ldr.w	r3, [r1], #4
  40b994:	f840 3b04 	str.w	r3, [r0], #4
  40b998:	f851 3b04 	ldr.w	r3, [r1], #4
  40b99c:	f840 3b04 	str.w	r3, [r0], #4
  40b9a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9a4:	f840 3b04 	str.w	r3, [r0], #4
  40b9a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9ac:	f840 3b04 	str.w	r3, [r0], #4
  40b9b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9b4:	f840 3b04 	str.w	r3, [r0], #4
  40b9b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9bc:	f840 3b04 	str.w	r3, [r0], #4
  40b9c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9c4:	f840 3b04 	str.w	r3, [r0], #4
  40b9c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9cc:	f840 3b04 	str.w	r3, [r0], #4
  40b9d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9d4:	f840 3b04 	str.w	r3, [r0], #4
  40b9d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9dc:	f840 3b04 	str.w	r3, [r0], #4
  40b9e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9e4:	f840 3b04 	str.w	r3, [r0], #4
  40b9e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9ec:	f840 3b04 	str.w	r3, [r0], #4
  40b9f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9f4:	f840 3b04 	str.w	r3, [r0], #4
  40b9f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b9fc:	f840 3b04 	str.w	r3, [r0], #4
  40ba00:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba04:	f840 3b04 	str.w	r3, [r0], #4
  40ba08:	3a40      	subs	r2, #64	; 0x40
  40ba0a:	d2bd      	bcs.n	40b988 <memcpy+0x10>
  40ba0c:	3230      	adds	r2, #48	; 0x30
  40ba0e:	d311      	bcc.n	40ba34 <memcpy+0xbc>
  40ba10:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba14:	f840 3b04 	str.w	r3, [r0], #4
  40ba18:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba1c:	f840 3b04 	str.w	r3, [r0], #4
  40ba20:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba24:	f840 3b04 	str.w	r3, [r0], #4
  40ba28:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba2c:	f840 3b04 	str.w	r3, [r0], #4
  40ba30:	3a10      	subs	r2, #16
  40ba32:	d2ed      	bcs.n	40ba10 <memcpy+0x98>
  40ba34:	320c      	adds	r2, #12
  40ba36:	d305      	bcc.n	40ba44 <memcpy+0xcc>
  40ba38:	f851 3b04 	ldr.w	r3, [r1], #4
  40ba3c:	f840 3b04 	str.w	r3, [r0], #4
  40ba40:	3a04      	subs	r2, #4
  40ba42:	d2f9      	bcs.n	40ba38 <memcpy+0xc0>
  40ba44:	3204      	adds	r2, #4
  40ba46:	d008      	beq.n	40ba5a <memcpy+0xe2>
  40ba48:	07d2      	lsls	r2, r2, #31
  40ba4a:	bf1c      	itt	ne
  40ba4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ba50:	f800 3b01 	strbne.w	r3, [r0], #1
  40ba54:	d301      	bcc.n	40ba5a <memcpy+0xe2>
  40ba56:	880b      	ldrh	r3, [r1, #0]
  40ba58:	8003      	strh	r3, [r0, #0]
  40ba5a:	4660      	mov	r0, ip
  40ba5c:	4770      	bx	lr
  40ba5e:	bf00      	nop
  40ba60:	2a08      	cmp	r2, #8
  40ba62:	d313      	bcc.n	40ba8c <memcpy+0x114>
  40ba64:	078b      	lsls	r3, r1, #30
  40ba66:	d08d      	beq.n	40b984 <memcpy+0xc>
  40ba68:	f010 0303 	ands.w	r3, r0, #3
  40ba6c:	d08a      	beq.n	40b984 <memcpy+0xc>
  40ba6e:	f1c3 0304 	rsb	r3, r3, #4
  40ba72:	1ad2      	subs	r2, r2, r3
  40ba74:	07db      	lsls	r3, r3, #31
  40ba76:	bf1c      	itt	ne
  40ba78:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ba7c:	f800 3b01 	strbne.w	r3, [r0], #1
  40ba80:	d380      	bcc.n	40b984 <memcpy+0xc>
  40ba82:	f831 3b02 	ldrh.w	r3, [r1], #2
  40ba86:	f820 3b02 	strh.w	r3, [r0], #2
  40ba8a:	e77b      	b.n	40b984 <memcpy+0xc>
  40ba8c:	3a04      	subs	r2, #4
  40ba8e:	d3d9      	bcc.n	40ba44 <memcpy+0xcc>
  40ba90:	3a01      	subs	r2, #1
  40ba92:	f811 3b01 	ldrb.w	r3, [r1], #1
  40ba96:	f800 3b01 	strb.w	r3, [r0], #1
  40ba9a:	d2f9      	bcs.n	40ba90 <memcpy+0x118>
  40ba9c:	780b      	ldrb	r3, [r1, #0]
  40ba9e:	7003      	strb	r3, [r0, #0]
  40baa0:	784b      	ldrb	r3, [r1, #1]
  40baa2:	7043      	strb	r3, [r0, #1]
  40baa4:	788b      	ldrb	r3, [r1, #2]
  40baa6:	7083      	strb	r3, [r0, #2]
  40baa8:	4660      	mov	r0, ip
  40baaa:	4770      	bx	lr

0040baac <memset>:
  40baac:	0783      	lsls	r3, r0, #30
  40baae:	b470      	push	{r4, r5, r6}
  40bab0:	d049      	beq.n	40bb46 <memset+0x9a>
  40bab2:	1e54      	subs	r4, r2, #1
  40bab4:	2a00      	cmp	r2, #0
  40bab6:	d044      	beq.n	40bb42 <memset+0x96>
  40bab8:	b2cd      	uxtb	r5, r1
  40baba:	4603      	mov	r3, r0
  40babc:	e002      	b.n	40bac4 <memset+0x18>
  40babe:	2c00      	cmp	r4, #0
  40bac0:	d03f      	beq.n	40bb42 <memset+0x96>
  40bac2:	4614      	mov	r4, r2
  40bac4:	f803 5b01 	strb.w	r5, [r3], #1
  40bac8:	f013 0f03 	tst.w	r3, #3
  40bacc:	f104 32ff 	add.w	r2, r4, #4294967295
  40bad0:	d1f5      	bne.n	40babe <memset+0x12>
  40bad2:	2c03      	cmp	r4, #3
  40bad4:	d92e      	bls.n	40bb34 <memset+0x88>
  40bad6:	b2cd      	uxtb	r5, r1
  40bad8:	2c0f      	cmp	r4, #15
  40bada:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40bade:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40bae2:	d919      	bls.n	40bb18 <memset+0x6c>
  40bae4:	f103 0210 	add.w	r2, r3, #16
  40bae8:	4626      	mov	r6, r4
  40baea:	3e10      	subs	r6, #16
  40baec:	f842 5c10 	str.w	r5, [r2, #-16]
  40baf0:	f842 5c0c 	str.w	r5, [r2, #-12]
  40baf4:	3210      	adds	r2, #16
  40baf6:	2e0f      	cmp	r6, #15
  40baf8:	f842 5c18 	str.w	r5, [r2, #-24]
  40bafc:	f842 5c14 	str.w	r5, [r2, #-20]
  40bb00:	d8f3      	bhi.n	40baea <memset+0x3e>
  40bb02:	f1a4 0210 	sub.w	r2, r4, #16
  40bb06:	f004 040f 	and.w	r4, r4, #15
  40bb0a:	f022 020f 	bic.w	r2, r2, #15
  40bb0e:	2c03      	cmp	r4, #3
  40bb10:	f102 0210 	add.w	r2, r2, #16
  40bb14:	4413      	add	r3, r2
  40bb16:	d90d      	bls.n	40bb34 <memset+0x88>
  40bb18:	461e      	mov	r6, r3
  40bb1a:	4622      	mov	r2, r4
  40bb1c:	3a04      	subs	r2, #4
  40bb1e:	f846 5b04 	str.w	r5, [r6], #4
  40bb22:	2a03      	cmp	r2, #3
  40bb24:	d8fa      	bhi.n	40bb1c <memset+0x70>
  40bb26:	1f22      	subs	r2, r4, #4
  40bb28:	f004 0403 	and.w	r4, r4, #3
  40bb2c:	f022 0203 	bic.w	r2, r2, #3
  40bb30:	3204      	adds	r2, #4
  40bb32:	4413      	add	r3, r2
  40bb34:	b12c      	cbz	r4, 40bb42 <memset+0x96>
  40bb36:	b2c9      	uxtb	r1, r1
  40bb38:	441c      	add	r4, r3
  40bb3a:	f803 1b01 	strb.w	r1, [r3], #1
  40bb3e:	42a3      	cmp	r3, r4
  40bb40:	d1fb      	bne.n	40bb3a <memset+0x8e>
  40bb42:	bc70      	pop	{r4, r5, r6}
  40bb44:	4770      	bx	lr
  40bb46:	4614      	mov	r4, r2
  40bb48:	4603      	mov	r3, r0
  40bb4a:	e7c2      	b.n	40bad2 <memset+0x26>

0040bb4c <__malloc_lock>:
  40bb4c:	4770      	bx	lr
  40bb4e:	bf00      	nop

0040bb50 <__malloc_unlock>:
  40bb50:	4770      	bx	lr
  40bb52:	bf00      	nop

0040bb54 <_sbrk_r>:
  40bb54:	b538      	push	{r3, r4, r5, lr}
  40bb56:	2300      	movs	r3, #0
  40bb58:	4c06      	ldr	r4, [pc, #24]	; (40bb74 <_sbrk_r+0x20>)
  40bb5a:	4605      	mov	r5, r0
  40bb5c:	4608      	mov	r0, r1
  40bb5e:	6023      	str	r3, [r4, #0]
  40bb60:	f7f7 fdce 	bl	403700 <_sbrk>
  40bb64:	1c43      	adds	r3, r0, #1
  40bb66:	d000      	beq.n	40bb6a <_sbrk_r+0x16>
  40bb68:	bd38      	pop	{r3, r4, r5, pc}
  40bb6a:	6823      	ldr	r3, [r4, #0]
  40bb6c:	2b00      	cmp	r3, #0
  40bb6e:	d0fb      	beq.n	40bb68 <_sbrk_r+0x14>
  40bb70:	602b      	str	r3, [r5, #0]
  40bb72:	bd38      	pop	{r3, r4, r5, pc}
  40bb74:	2040cec4 	.word	0x2040cec4

0040bb78 <sprintf>:
  40bb78:	b40e      	push	{r1, r2, r3}
  40bb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bb7c:	b09c      	sub	sp, #112	; 0x70
  40bb7e:	4b10      	ldr	r3, [pc, #64]	; (40bbc0 <sprintf+0x48>)
  40bb80:	4606      	mov	r6, r0
  40bb82:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40bb86:	ac21      	add	r4, sp, #132	; 0x84
  40bb88:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  40bb8c:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40bb90:	6818      	ldr	r0, [r3, #0]
  40bb92:	f854 2b04 	ldr.w	r2, [r4], #4
  40bb96:	a902      	add	r1, sp, #8
  40bb98:	9602      	str	r6, [sp, #8]
  40bb9a:	4623      	mov	r3, r4
  40bb9c:	9606      	str	r6, [sp, #24]
  40bb9e:	9401      	str	r4, [sp, #4]
  40bba0:	f8ad e014 	strh.w	lr, [sp, #20]
  40bba4:	9504      	str	r5, [sp, #16]
  40bba6:	9507      	str	r5, [sp, #28]
  40bba8:	f8ad 7016 	strh.w	r7, [sp, #22]
  40bbac:	f001 fa64 	bl	40d078 <_svfprintf_r>
  40bbb0:	9b02      	ldr	r3, [sp, #8]
  40bbb2:	2200      	movs	r2, #0
  40bbb4:	701a      	strb	r2, [r3, #0]
  40bbb6:	b01c      	add	sp, #112	; 0x70
  40bbb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40bbbc:	b003      	add	sp, #12
  40bbbe:	4770      	bx	lr
  40bbc0:	204004d8 	.word	0x204004d8
	...
  40bbe0:	eba2 0003 	sub.w	r0, r2, r3
  40bbe4:	4770      	bx	lr
  40bbe6:	bf00      	nop

0040bbe8 <strcmp>:
  40bbe8:	7802      	ldrb	r2, [r0, #0]
  40bbea:	780b      	ldrb	r3, [r1, #0]
  40bbec:	2a01      	cmp	r2, #1
  40bbee:	bf28      	it	cs
  40bbf0:	429a      	cmpcs	r2, r3
  40bbf2:	d1f5      	bne.n	40bbe0 <sprintf+0x68>
  40bbf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40bbf8:	ea40 0401 	orr.w	r4, r0, r1
  40bbfc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40bc00:	f06f 0c00 	mvn.w	ip, #0
  40bc04:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40bc08:	b312      	cbz	r2, 40bc50 <strcmp+0x68>
  40bc0a:	ea80 0401 	eor.w	r4, r0, r1
  40bc0e:	f014 0f07 	tst.w	r4, #7
  40bc12:	d16a      	bne.n	40bcea <strcmp+0x102>
  40bc14:	f000 0407 	and.w	r4, r0, #7
  40bc18:	f020 0007 	bic.w	r0, r0, #7
  40bc1c:	f004 0503 	and.w	r5, r4, #3
  40bc20:	f021 0107 	bic.w	r1, r1, #7
  40bc24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40bc28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40bc2c:	f014 0f04 	tst.w	r4, #4
  40bc30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40bc34:	fa0c f405 	lsl.w	r4, ip, r5
  40bc38:	ea62 0204 	orn	r2, r2, r4
  40bc3c:	ea66 0604 	orn	r6, r6, r4
  40bc40:	d00a      	beq.n	40bc58 <strcmp+0x70>
  40bc42:	ea63 0304 	orn	r3, r3, r4
  40bc46:	4662      	mov	r2, ip
  40bc48:	ea67 0704 	orn	r7, r7, r4
  40bc4c:	4666      	mov	r6, ip
  40bc4e:	e003      	b.n	40bc58 <strcmp+0x70>
  40bc50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40bc54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40bc58:	fa82 f54c 	uadd8	r5, r2, ip
  40bc5c:	ea82 0406 	eor.w	r4, r2, r6
  40bc60:	faa4 f48c 	sel	r4, r4, ip
  40bc64:	bb6c      	cbnz	r4, 40bcc2 <strcmp+0xda>
  40bc66:	fa83 f54c 	uadd8	r5, r3, ip
  40bc6a:	ea83 0507 	eor.w	r5, r3, r7
  40bc6e:	faa5 f58c 	sel	r5, r5, ip
  40bc72:	b995      	cbnz	r5, 40bc9a <strcmp+0xb2>
  40bc74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40bc78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40bc7c:	fa82 f54c 	uadd8	r5, r2, ip
  40bc80:	ea82 0406 	eor.w	r4, r2, r6
  40bc84:	faa4 f48c 	sel	r4, r4, ip
  40bc88:	fa83 f54c 	uadd8	r5, r3, ip
  40bc8c:	ea83 0507 	eor.w	r5, r3, r7
  40bc90:	faa5 f58c 	sel	r5, r5, ip
  40bc94:	4325      	orrs	r5, r4
  40bc96:	d0db      	beq.n	40bc50 <strcmp+0x68>
  40bc98:	b99c      	cbnz	r4, 40bcc2 <strcmp+0xda>
  40bc9a:	ba2d      	rev	r5, r5
  40bc9c:	fab5 f485 	clz	r4, r5
  40bca0:	f024 0407 	bic.w	r4, r4, #7
  40bca4:	fa27 f104 	lsr.w	r1, r7, r4
  40bca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40bcac:	fa23 f304 	lsr.w	r3, r3, r4
  40bcb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40bcb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bcb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bcbc:	eba0 0001 	sub.w	r0, r0, r1
  40bcc0:	4770      	bx	lr
  40bcc2:	ba24      	rev	r4, r4
  40bcc4:	fab4 f484 	clz	r4, r4
  40bcc8:	f024 0407 	bic.w	r4, r4, #7
  40bccc:	fa26 f104 	lsr.w	r1, r6, r4
  40bcd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40bcd4:	fa22 f204 	lsr.w	r2, r2, r4
  40bcd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40bcdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bce0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bce4:	eba0 0001 	sub.w	r0, r0, r1
  40bce8:	4770      	bx	lr
  40bcea:	f014 0f03 	tst.w	r4, #3
  40bcee:	d13c      	bne.n	40bd6a <strcmp+0x182>
  40bcf0:	f010 0403 	ands.w	r4, r0, #3
  40bcf4:	d128      	bne.n	40bd48 <strcmp+0x160>
  40bcf6:	f850 2b08 	ldr.w	r2, [r0], #8
  40bcfa:	f851 3b08 	ldr.w	r3, [r1], #8
  40bcfe:	fa82 f54c 	uadd8	r5, r2, ip
  40bd02:	ea82 0503 	eor.w	r5, r2, r3
  40bd06:	faa5 f58c 	sel	r5, r5, ip
  40bd0a:	b95d      	cbnz	r5, 40bd24 <strcmp+0x13c>
  40bd0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40bd14:	fa82 f54c 	uadd8	r5, r2, ip
  40bd18:	ea82 0503 	eor.w	r5, r2, r3
  40bd1c:	faa5 f58c 	sel	r5, r5, ip
  40bd20:	2d00      	cmp	r5, #0
  40bd22:	d0e8      	beq.n	40bcf6 <strcmp+0x10e>
  40bd24:	ba2d      	rev	r5, r5
  40bd26:	fab5 f485 	clz	r4, r5
  40bd2a:	f024 0407 	bic.w	r4, r4, #7
  40bd2e:	fa23 f104 	lsr.w	r1, r3, r4
  40bd32:	fa22 f204 	lsr.w	r2, r2, r4
  40bd36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40bd3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bd3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bd42:	eba0 0001 	sub.w	r0, r0, r1
  40bd46:	4770      	bx	lr
  40bd48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40bd4c:	f020 0003 	bic.w	r0, r0, #3
  40bd50:	f850 2b08 	ldr.w	r2, [r0], #8
  40bd54:	f021 0103 	bic.w	r1, r1, #3
  40bd58:	f851 3b08 	ldr.w	r3, [r1], #8
  40bd5c:	fa0c f404 	lsl.w	r4, ip, r4
  40bd60:	ea62 0204 	orn	r2, r2, r4
  40bd64:	ea63 0304 	orn	r3, r3, r4
  40bd68:	e7c9      	b.n	40bcfe <strcmp+0x116>
  40bd6a:	f010 0403 	ands.w	r4, r0, #3
  40bd6e:	d01a      	beq.n	40bda6 <strcmp+0x1be>
  40bd70:	eba1 0104 	sub.w	r1, r1, r4
  40bd74:	f020 0003 	bic.w	r0, r0, #3
  40bd78:	07e4      	lsls	r4, r4, #31
  40bd7a:	f850 2b04 	ldr.w	r2, [r0], #4
  40bd7e:	d006      	beq.n	40bd8e <strcmp+0x1a6>
  40bd80:	d20f      	bcs.n	40bda2 <strcmp+0x1ba>
  40bd82:	788b      	ldrb	r3, [r1, #2]
  40bd84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40bd88:	1ae4      	subs	r4, r4, r3
  40bd8a:	d106      	bne.n	40bd9a <strcmp+0x1b2>
  40bd8c:	b12b      	cbz	r3, 40bd9a <strcmp+0x1b2>
  40bd8e:	78cb      	ldrb	r3, [r1, #3]
  40bd90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40bd94:	1ae4      	subs	r4, r4, r3
  40bd96:	d100      	bne.n	40bd9a <strcmp+0x1b2>
  40bd98:	b91b      	cbnz	r3, 40bda2 <strcmp+0x1ba>
  40bd9a:	4620      	mov	r0, r4
  40bd9c:	f85d 4b10 	ldr.w	r4, [sp], #16
  40bda0:	4770      	bx	lr
  40bda2:	f101 0104 	add.w	r1, r1, #4
  40bda6:	f850 2b04 	ldr.w	r2, [r0], #4
  40bdaa:	07cc      	lsls	r4, r1, #31
  40bdac:	f021 0103 	bic.w	r1, r1, #3
  40bdb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40bdb4:	d848      	bhi.n	40be48 <strcmp+0x260>
  40bdb6:	d224      	bcs.n	40be02 <strcmp+0x21a>
  40bdb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40bdbc:	fa82 f54c 	uadd8	r5, r2, ip
  40bdc0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40bdc4:	faa5 f58c 	sel	r5, r5, ip
  40bdc8:	d10a      	bne.n	40bde0 <strcmp+0x1f8>
  40bdca:	b965      	cbnz	r5, 40bde6 <strcmp+0x1fe>
  40bdcc:	f851 3b04 	ldr.w	r3, [r1], #4
  40bdd0:	ea84 0402 	eor.w	r4, r4, r2
  40bdd4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40bdd8:	d10e      	bne.n	40bdf8 <strcmp+0x210>
  40bdda:	f850 2b04 	ldr.w	r2, [r0], #4
  40bdde:	e7eb      	b.n	40bdb8 <strcmp+0x1d0>
  40bde0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40bde4:	e055      	b.n	40be92 <strcmp+0x2aa>
  40bde6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40bdea:	d14d      	bne.n	40be88 <strcmp+0x2a0>
  40bdec:	7808      	ldrb	r0, [r1, #0]
  40bdee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bdf2:	f1c0 0000 	rsb	r0, r0, #0
  40bdf6:	4770      	bx	lr
  40bdf8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40bdfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40be00:	e047      	b.n	40be92 <strcmp+0x2aa>
  40be02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40be06:	fa82 f54c 	uadd8	r5, r2, ip
  40be0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40be0e:	faa5 f58c 	sel	r5, r5, ip
  40be12:	d10a      	bne.n	40be2a <strcmp+0x242>
  40be14:	b965      	cbnz	r5, 40be30 <strcmp+0x248>
  40be16:	f851 3b04 	ldr.w	r3, [r1], #4
  40be1a:	ea84 0402 	eor.w	r4, r4, r2
  40be1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40be22:	d10c      	bne.n	40be3e <strcmp+0x256>
  40be24:	f850 2b04 	ldr.w	r2, [r0], #4
  40be28:	e7eb      	b.n	40be02 <strcmp+0x21a>
  40be2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40be2e:	e030      	b.n	40be92 <strcmp+0x2aa>
  40be30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40be34:	d128      	bne.n	40be88 <strcmp+0x2a0>
  40be36:	880b      	ldrh	r3, [r1, #0]
  40be38:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40be3c:	e029      	b.n	40be92 <strcmp+0x2aa>
  40be3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40be42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40be46:	e024      	b.n	40be92 <strcmp+0x2aa>
  40be48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40be4c:	fa82 f54c 	uadd8	r5, r2, ip
  40be50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40be54:	faa5 f58c 	sel	r5, r5, ip
  40be58:	d10a      	bne.n	40be70 <strcmp+0x288>
  40be5a:	b965      	cbnz	r5, 40be76 <strcmp+0x28e>
  40be5c:	f851 3b04 	ldr.w	r3, [r1], #4
  40be60:	ea84 0402 	eor.w	r4, r4, r2
  40be64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40be68:	d109      	bne.n	40be7e <strcmp+0x296>
  40be6a:	f850 2b04 	ldr.w	r2, [r0], #4
  40be6e:	e7eb      	b.n	40be48 <strcmp+0x260>
  40be70:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40be74:	e00d      	b.n	40be92 <strcmp+0x2aa>
  40be76:	f015 0fff 	tst.w	r5, #255	; 0xff
  40be7a:	d105      	bne.n	40be88 <strcmp+0x2a0>
  40be7c:	680b      	ldr	r3, [r1, #0]
  40be7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40be82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40be86:	e004      	b.n	40be92 <strcmp+0x2aa>
  40be88:	f04f 0000 	mov.w	r0, #0
  40be8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40be90:	4770      	bx	lr
  40be92:	ba12      	rev	r2, r2
  40be94:	ba1b      	rev	r3, r3
  40be96:	fa82 f44c 	uadd8	r4, r2, ip
  40be9a:	ea82 0403 	eor.w	r4, r2, r3
  40be9e:	faa4 f58c 	sel	r5, r4, ip
  40bea2:	fab5 f485 	clz	r4, r5
  40bea6:	fa02 f204 	lsl.w	r2, r2, r4
  40beaa:	fa03 f304 	lsl.w	r3, r3, r4
  40beae:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40beb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40beb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40beba:	4770      	bx	lr

0040bebc <strlen>:
  40bebc:	f020 0103 	bic.w	r1, r0, #3
  40bec0:	f010 0003 	ands.w	r0, r0, #3
  40bec4:	f1c0 0000 	rsb	r0, r0, #0
  40bec8:	f851 3b04 	ldr.w	r3, [r1], #4
  40becc:	f100 0c04 	add.w	ip, r0, #4
  40bed0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40bed4:	f06f 0200 	mvn.w	r2, #0
  40bed8:	bf1c      	itt	ne
  40beda:	fa22 f20c 	lsrne.w	r2, r2, ip
  40bede:	4313      	orrne	r3, r2
  40bee0:	f04f 0c01 	mov.w	ip, #1
  40bee4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40bee8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40beec:	eba3 020c 	sub.w	r2, r3, ip
  40bef0:	ea22 0203 	bic.w	r2, r2, r3
  40bef4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40bef8:	bf04      	itt	eq
  40befa:	f851 3b04 	ldreq.w	r3, [r1], #4
  40befe:	3004      	addeq	r0, #4
  40bf00:	d0f4      	beq.n	40beec <strlen+0x30>
  40bf02:	f1c2 0100 	rsb	r1, r2, #0
  40bf06:	ea02 0201 	and.w	r2, r2, r1
  40bf0a:	fab2 f282 	clz	r2, r2
  40bf0e:	f1c2 021f 	rsb	r2, r2, #31
  40bf12:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40bf16:	4770      	bx	lr

0040bf18 <sulp>:
  40bf18:	b570      	push	{r4, r5, r6, lr}
  40bf1a:	4604      	mov	r4, r0
  40bf1c:	460d      	mov	r5, r1
  40bf1e:	4616      	mov	r6, r2
  40bf20:	ec45 4b10 	vmov	d0, r4, r5
  40bf24:	f005 fe78 	bl	411c18 <__ulp>
  40bf28:	b196      	cbz	r6, 40bf50 <sulp+0x38>
  40bf2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
  40bf2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40bf32:	2b00      	cmp	r3, #0
  40bf34:	dd0c      	ble.n	40bf50 <sulp+0x38>
  40bf36:	051b      	lsls	r3, r3, #20
  40bf38:	2400      	movs	r4, #0
  40bf3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  40bf3e:	4622      	mov	r2, r4
  40bf40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40bf44:	ec51 0b10 	vmov	r0, r1, d0
  40bf48:	462b      	mov	r3, r5
  40bf4a:	f7fe fed3 	bl	40acf4 <__aeabi_dmul>
  40bf4e:	bd70      	pop	{r4, r5, r6, pc}
  40bf50:	ec51 0b10 	vmov	r0, r1, d0
  40bf54:	bd70      	pop	{r4, r5, r6, pc}
  40bf56:	bf00      	nop

0040bf58 <_strtod_r>:
  40bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bf5c:	b09f      	sub	sp, #124	; 0x7c
  40bf5e:	460f      	mov	r7, r1
  40bf60:	4682      	mov	sl, r0
  40bf62:	460b      	mov	r3, r1
  40bf64:	9204      	str	r2, [sp, #16]
  40bf66:	2000      	movs	r0, #0
  40bf68:	2200      	movs	r2, #0
  40bf6a:	2100      	movs	r1, #0
  40bf6c:	9719      	str	r7, [sp, #100]	; 0x64
  40bf6e:	921a      	str	r2, [sp, #104]	; 0x68
  40bf70:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bf74:	461c      	mov	r4, r3
  40bf76:	f813 6b01 	ldrb.w	r6, [r3], #1
  40bf7a:	2e2d      	cmp	r6, #45	; 0x2d
  40bf7c:	f200 813a 	bhi.w	40c1f4 <_strtod_r+0x29c>
  40bf80:	e8df f016 	tbh	[pc, r6, lsl #1]
  40bf84:	01380056 	.word	0x01380056
  40bf88:	01380138 	.word	0x01380138
  40bf8c:	01380138 	.word	0x01380138
  40bf90:	01380138 	.word	0x01380138
  40bf94:	009d0138 	.word	0x009d0138
  40bf98:	009d009d 	.word	0x009d009d
  40bf9c:	009d009d 	.word	0x009d009d
  40bfa0:	01380138 	.word	0x01380138
  40bfa4:	01380138 	.word	0x01380138
  40bfa8:	01380138 	.word	0x01380138
  40bfac:	01380138 	.word	0x01380138
  40bfb0:	01380138 	.word	0x01380138
  40bfb4:	01380138 	.word	0x01380138
  40bfb8:	01380138 	.word	0x01380138
  40bfbc:	01380138 	.word	0x01380138
  40bfc0:	01380138 	.word	0x01380138
  40bfc4:	0138009d 	.word	0x0138009d
  40bfc8:	01380138 	.word	0x01380138
  40bfcc:	01380138 	.word	0x01380138
  40bfd0:	01380138 	.word	0x01380138
  40bfd4:	01380138 	.word	0x01380138
  40bfd8:	006a0138 	.word	0x006a0138
  40bfdc:	00990138 	.word	0x00990138
  40bfe0:	4650      	mov	r0, sl
  40bfe2:	9306      	str	r3, [sp, #24]
  40bfe4:	f005 f9fa 	bl	4113dc <_localeconv_r>
  40bfe8:	f8d0 8000 	ldr.w	r8, [r0]
  40bfec:	4650      	mov	r0, sl
  40bfee:	f005 f9f5 	bl	4113dc <_localeconv_r>
  40bff2:	6800      	ldr	r0, [r0, #0]
  40bff4:	f7ff ff62 	bl	40bebc <strlen>
  40bff8:	9b06      	ldr	r3, [sp, #24]
  40bffa:	4602      	mov	r2, r0
  40bffc:	4641      	mov	r1, r8
  40bffe:	4618      	mov	r0, r3
  40c000:	f006 fa08 	bl	412414 <strncmp>
  40c004:	4680      	mov	r8, r0
  40c006:	2800      	cmp	r0, #0
  40c008:	f000 815a 	beq.w	40c2c0 <_strtod_r+0x368>
  40c00c:	2000      	movs	r0, #0
  40c00e:	46a1      	mov	r9, r4
  40c010:	4684      	mov	ip, r0
  40c012:	4686      	mov	lr, r0
  40c014:	f026 0320 	bic.w	r3, r6, #32
  40c018:	2b45      	cmp	r3, #69	; 0x45
  40c01a:	d152      	bne.n	40c0c2 <_strtod_r+0x16a>
  40c01c:	f1b9 0f00 	cmp.w	r9, #0
  40c020:	bf08      	it	eq
  40c022:	2800      	cmpeq	r0, #0
  40c024:	f040 80fd 	bne.w	40c222 <_strtod_r+0x2ca>
  40c028:	9b08      	ldr	r3, [sp, #32]
  40c02a:	2b00      	cmp	r3, #0
  40c02c:	f040 80f9 	bne.w	40c222 <_strtod_r+0x2ca>
  40c030:	9b04      	ldr	r3, [sp, #16]
  40c032:	f04f 0800 	mov.w	r8, #0
  40c036:	f04f 0900 	mov.w	r9, #0
  40c03a:	b143      	cbz	r3, 40c04e <_strtod_r+0xf6>
  40c03c:	2300      	movs	r3, #0
  40c03e:	9305      	str	r3, [sp, #20]
  40c040:	9b04      	ldr	r3, [sp, #16]
  40c042:	601f      	str	r7, [r3, #0]
  40c044:	9b05      	ldr	r3, [sp, #20]
  40c046:	b113      	cbz	r3, 40c04e <_strtod_r+0xf6>
  40c048:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  40c04c:	4699      	mov	r9, r3
  40c04e:	ec49 8b10 	vmov	d0, r8, r9
  40c052:	b01f      	add	sp, #124	; 0x7c
  40c054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c058:	2200      	movs	r2, #0
  40c05a:	4623      	mov	r3, r4
  40c05c:	9205      	str	r2, [sp, #20]
  40c05e:	3401      	adds	r4, #1
  40c060:	9419      	str	r4, [sp, #100]	; 0x64
  40c062:	785e      	ldrb	r6, [r3, #1]
  40c064:	2e00      	cmp	r6, #0
  40c066:	d0e3      	beq.n	40c030 <_strtod_r+0xd8>
  40c068:	2e30      	cmp	r6, #48	; 0x30
  40c06a:	f000 80c8 	beq.w	40c1fe <_strtod_r+0x2a6>
  40c06e:	2300      	movs	r3, #0
  40c070:	9409      	str	r4, [sp, #36]	; 0x24
  40c072:	9308      	str	r3, [sp, #32]
  40c074:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40c078:	f04f 0b00 	mov.w	fp, #0
  40c07c:	2b09      	cmp	r3, #9
  40c07e:	465d      	mov	r5, fp
  40c080:	4623      	mov	r3, r4
  40c082:	465c      	mov	r4, fp
  40c084:	d90a      	bls.n	40c09c <_strtod_r+0x144>
  40c086:	e7ab      	b.n	40bfe0 <_strtod_r+0x88>
  40c088:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
  40c08c:	3301      	adds	r3, #1
  40c08e:	3401      	adds	r4, #1
  40c090:	9319      	str	r3, [sp, #100]	; 0x64
  40c092:	781e      	ldrb	r6, [r3, #0]
  40c094:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40c098:	2a09      	cmp	r2, #9
  40c09a:	d8a1      	bhi.n	40bfe0 <_strtod_r+0x88>
  40c09c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
  40c0a0:	2c08      	cmp	r4, #8
  40c0a2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40c0a6:	eb06 0242 	add.w	r2, r6, r2, lsl #1
  40c0aa:	eb06 0641 	add.w	r6, r6, r1, lsl #1
  40c0ae:	ddeb      	ble.n	40c088 <_strtod_r+0x130>
  40c0b0:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
  40c0b4:	e7ea      	b.n	40c08c <_strtod_r+0x134>
  40c0b6:	2201      	movs	r2, #1
  40c0b8:	4623      	mov	r3, r4
  40c0ba:	9205      	str	r2, [sp, #20]
  40c0bc:	e7cf      	b.n	40c05e <_strtod_r+0x106>
  40c0be:	9319      	str	r3, [sp, #100]	; 0x64
  40c0c0:	e758      	b.n	40bf74 <_strtod_r+0x1c>
  40c0c2:	2300      	movs	r3, #0
  40c0c4:	f1b9 0f00 	cmp.w	r9, #0
  40c0c8:	d036      	beq.n	40c138 <_strtod_r+0x1e0>
  40c0ca:	f1b9 0f10 	cmp.w	r9, #16
  40c0ce:	46c8      	mov	r8, r9
  40c0d0:	ebcc 0303 	rsb	r3, ip, r3
  40c0d4:	4628      	mov	r0, r5
  40c0d6:	bfa8      	it	ge
  40c0d8:	f04f 0810 	movge.w	r8, #16
  40c0dc:	2c00      	cmp	r4, #0
  40c0de:	bf08      	it	eq
  40c0e0:	464c      	moveq	r4, r9
  40c0e2:	9306      	str	r3, [sp, #24]
  40c0e4:	f7fe fd90 	bl	40ac08 <__aeabi_ui2d>
  40c0e8:	f1b8 0f09 	cmp.w	r8, #9
  40c0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c0f0:	dd13      	ble.n	40c11a <_strtod_r+0x1c2>
  40c0f2:	4b87      	ldr	r3, [pc, #540]	; (40c310 <_strtod_r+0x3b8>)
  40c0f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40c0f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  40c0fc:	f7fe fdfa 	bl	40acf4 <__aeabi_dmul>
  40c100:	4606      	mov	r6, r0
  40c102:	460f      	mov	r7, r1
  40c104:	4658      	mov	r0, fp
  40c106:	f7fe fd7f 	bl	40ac08 <__aeabi_ui2d>
  40c10a:	4602      	mov	r2, r0
  40c10c:	460b      	mov	r3, r1
  40c10e:	4630      	mov	r0, r6
  40c110:	4639      	mov	r1, r7
  40c112:	f7fe fc3d 	bl	40a990 <__adddf3>
  40c116:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c11a:	f1b9 0f0f 	cmp.w	r9, #15
  40c11e:	f300 80f9 	bgt.w	40c314 <_strtod_r+0x3bc>
  40c122:	9b06      	ldr	r3, [sp, #24]
  40c124:	2b00      	cmp	r3, #0
  40c126:	f040 82d8 	bne.w	40c6da <_strtod_r+0x782>
  40c12a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40c12e:	9b04      	ldr	r3, [sp, #16]
  40c130:	2b00      	cmp	r3, #0
  40c132:	d087      	beq.n	40c044 <_strtod_r+0xec>
  40c134:	9f19      	ldr	r7, [sp, #100]	; 0x64
  40c136:	e783      	b.n	40c040 <_strtod_r+0xe8>
  40c138:	2800      	cmp	r0, #0
  40c13a:	f040 80bc 	bne.w	40c2b6 <_strtod_r+0x35e>
  40c13e:	9b08      	ldr	r3, [sp, #32]
  40c140:	2b00      	cmp	r3, #0
  40c142:	f040 80b8 	bne.w	40c2b6 <_strtod_r+0x35e>
  40c146:	f1be 0f00 	cmp.w	lr, #0
  40c14a:	f47f af71 	bne.w	40c030 <_strtod_r+0xd8>
  40c14e:	3e49      	subs	r6, #73	; 0x49
  40c150:	2e25      	cmp	r6, #37	; 0x25
  40c152:	f63f af6d 	bhi.w	40c030 <_strtod_r+0xd8>
  40c156:	a301      	add	r3, pc, #4	; (adr r3, 40c15c <_strtod_r+0x204>)
  40c158:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
  40c15c:	0040c7e9 	.word	0x0040c7e9
  40c160:	0040c031 	.word	0x0040c031
  40c164:	0040c031 	.word	0x0040c031
  40c168:	0040c031 	.word	0x0040c031
  40c16c:	0040c031 	.word	0x0040c031
  40c170:	0040c7b1 	.word	0x0040c7b1
  40c174:	0040c031 	.word	0x0040c031
  40c178:	0040c031 	.word	0x0040c031
  40c17c:	0040c031 	.word	0x0040c031
  40c180:	0040c031 	.word	0x0040c031
  40c184:	0040c031 	.word	0x0040c031
  40c188:	0040c031 	.word	0x0040c031
  40c18c:	0040c031 	.word	0x0040c031
  40c190:	0040c031 	.word	0x0040c031
  40c194:	0040c031 	.word	0x0040c031
  40c198:	0040c031 	.word	0x0040c031
  40c19c:	0040c031 	.word	0x0040c031
  40c1a0:	0040c031 	.word	0x0040c031
  40c1a4:	0040c031 	.word	0x0040c031
  40c1a8:	0040c031 	.word	0x0040c031
  40c1ac:	0040c031 	.word	0x0040c031
  40c1b0:	0040c031 	.word	0x0040c031
  40c1b4:	0040c031 	.word	0x0040c031
  40c1b8:	0040c031 	.word	0x0040c031
  40c1bc:	0040c031 	.word	0x0040c031
  40c1c0:	0040c031 	.word	0x0040c031
  40c1c4:	0040c031 	.word	0x0040c031
  40c1c8:	0040c031 	.word	0x0040c031
  40c1cc:	0040c031 	.word	0x0040c031
  40c1d0:	0040c031 	.word	0x0040c031
  40c1d4:	0040c031 	.word	0x0040c031
  40c1d8:	0040c031 	.word	0x0040c031
  40c1dc:	0040c7e9 	.word	0x0040c7e9
  40c1e0:	0040c031 	.word	0x0040c031
  40c1e4:	0040c031 	.word	0x0040c031
  40c1e8:	0040c031 	.word	0x0040c031
  40c1ec:	0040c031 	.word	0x0040c031
  40c1f0:	0040c7b1 	.word	0x0040c7b1
  40c1f4:	2300      	movs	r3, #0
  40c1f6:	2e30      	cmp	r6, #48	; 0x30
  40c1f8:	9305      	str	r3, [sp, #20]
  40c1fa:	f47f af38 	bne.w	40c06e <_strtod_r+0x116>
  40c1fe:	7863      	ldrb	r3, [r4, #1]
  40c200:	2b58      	cmp	r3, #88	; 0x58
  40c202:	f000 8348 	beq.w	40c896 <_strtod_r+0x93e>
  40c206:	2b78      	cmp	r3, #120	; 0x78
  40c208:	f000 8345 	beq.w	40c896 <_strtod_r+0x93e>
  40c20c:	3401      	adds	r4, #1
  40c20e:	9419      	str	r4, [sp, #100]	; 0x64
  40c210:	7826      	ldrb	r6, [r4, #0]
  40c212:	2e30      	cmp	r6, #48	; 0x30
  40c214:	d0fa      	beq.n	40c20c <_strtod_r+0x2b4>
  40c216:	2e00      	cmp	r6, #0
  40c218:	d04d      	beq.n	40c2b6 <_strtod_r+0x35e>
  40c21a:	2301      	movs	r3, #1
  40c21c:	9409      	str	r4, [sp, #36]	; 0x24
  40c21e:	9308      	str	r3, [sp, #32]
  40c220:	e728      	b.n	40c074 <_strtod_r+0x11c>
  40c222:	9f19      	ldr	r7, [sp, #100]	; 0x64
  40c224:	1c7b      	adds	r3, r7, #1
  40c226:	9319      	str	r3, [sp, #100]	; 0x64
  40c228:	787e      	ldrb	r6, [r7, #1]
  40c22a:	2e2b      	cmp	r6, #43	; 0x2b
  40c22c:	f000 830d 	beq.w	40c84a <_strtod_r+0x8f2>
  40c230:	2e2d      	cmp	r6, #45	; 0x2d
  40c232:	f000 8249 	beq.w	40c6c8 <_strtod_r+0x770>
  40c236:	f04f 0800 	mov.w	r8, #0
  40c23a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40c23e:	2b09      	cmp	r3, #9
  40c240:	f200 82fc 	bhi.w	40c83c <_strtod_r+0x8e4>
  40c244:	2e30      	cmp	r6, #48	; 0x30
  40c246:	d105      	bne.n	40c254 <_strtod_r+0x2fc>
  40c248:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c24a:	3301      	adds	r3, #1
  40c24c:	9319      	str	r3, [sp, #100]	; 0x64
  40c24e:	781e      	ldrb	r6, [r3, #0]
  40c250:	2e30      	cmp	r6, #48	; 0x30
  40c252:	d0fa      	beq.n	40c24a <_strtod_r+0x2f2>
  40c254:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40c258:	2b08      	cmp	r3, #8
  40c25a:	f63f af32 	bhi.w	40c0c2 <_strtod_r+0x16a>
  40c25e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c260:	4619      	mov	r1, r3
  40c262:	9306      	str	r3, [sp, #24]
  40c264:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40c268:	460a      	mov	r2, r1
  40c26a:	3201      	adds	r2, #1
  40c26c:	9219      	str	r2, [sp, #100]	; 0x64
  40c26e:	784e      	ldrb	r6, [r1, #1]
  40c270:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40c274:	2909      	cmp	r1, #9
  40c276:	d80b      	bhi.n	40c290 <_strtod_r+0x338>
  40c278:	3201      	adds	r2, #1
  40c27a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40c27e:	9219      	str	r2, [sp, #100]	; 0x64
  40c280:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  40c284:	7816      	ldrb	r6, [r2, #0]
  40c286:	3b30      	subs	r3, #48	; 0x30
  40c288:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40c28c:	2909      	cmp	r1, #9
  40c28e:	d9f3      	bls.n	40c278 <_strtod_r+0x320>
  40c290:	9906      	ldr	r1, [sp, #24]
  40c292:	1a52      	subs	r2, r2, r1
  40c294:	2a08      	cmp	r2, #8
  40c296:	f300 8412 	bgt.w	40cabe <_strtod_r+0xb66>
  40c29a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40c29e:	4293      	cmp	r3, r2
  40c2a0:	f300 840d 	bgt.w	40cabe <_strtod_r+0xb66>
  40c2a4:	f1c8 0200 	rsb	r2, r8, #0
  40c2a8:	4053      	eors	r3, r2
  40c2aa:	4443      	add	r3, r8
  40c2ac:	f1b9 0f00 	cmp.w	r9, #0
  40c2b0:	f47f af0b 	bne.w	40c0ca <_strtod_r+0x172>
  40c2b4:	e740      	b.n	40c138 <_strtod_r+0x1e0>
  40c2b6:	f04f 0800 	mov.w	r8, #0
  40c2ba:	f04f 0900 	mov.w	r9, #0
  40c2be:	e736      	b.n	40c12e <_strtod_r+0x1d6>
  40c2c0:	4650      	mov	r0, sl
  40c2c2:	f005 f88b 	bl	4113dc <_localeconv_r>
  40c2c6:	6800      	ldr	r0, [r0, #0]
  40c2c8:	f7ff fdf8 	bl	40bebc <strlen>
  40c2cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c2ce:	181a      	adds	r2, r3, r0
  40c2d0:	9219      	str	r2, [sp, #100]	; 0x64
  40c2d2:	5c1e      	ldrb	r6, [r3, r0]
  40c2d4:	2c00      	cmp	r4, #0
  40c2d6:	f040 81e5 	bne.w	40c6a4 <_strtod_r+0x74c>
  40c2da:	2e30      	cmp	r6, #48	; 0x30
  40c2dc:	4620      	mov	r0, r4
  40c2de:	d105      	bne.n	40c2ec <_strtod_r+0x394>
  40c2e0:	3201      	adds	r2, #1
  40c2e2:	3001      	adds	r0, #1
  40c2e4:	9219      	str	r2, [sp, #100]	; 0x64
  40c2e6:	7816      	ldrb	r6, [r2, #0]
  40c2e8:	2e30      	cmp	r6, #48	; 0x30
  40c2ea:	d0f9      	beq.n	40c2e0 <_strtod_r+0x388>
  40c2ec:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40c2f0:	2b08      	cmp	r3, #8
  40c2f2:	f200 8252 	bhi.w	40c79a <_strtod_r+0x842>
  40c2f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c2f8:	3e30      	subs	r6, #48	; 0x30
  40c2fa:	f100 0c01 	add.w	ip, r0, #1
  40c2fe:	f04f 0901 	mov.w	r9, #1
  40c302:	9309      	str	r3, [sp, #36]	; 0x24
  40c304:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40c308:	2000      	movs	r0, #0
  40c30a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
  40c30e:	e1d7      	b.n	40c6c0 <_strtod_r+0x768>
  40c310:	00414078 	.word	0x00414078
  40c314:	ebc8 0809 	rsb	r8, r8, r9
  40c318:	9b06      	ldr	r3, [sp, #24]
  40c31a:	4498      	add	r8, r3
  40c31c:	f1b8 0f00 	cmp.w	r8, #0
  40c320:	f340 8369 	ble.w	40c9f6 <_strtod_r+0xa9e>
  40c324:	f018 010f 	ands.w	r1, r8, #15
  40c328:	d00a      	beq.n	40c340 <_strtod_r+0x3e8>
  40c32a:	4bbd      	ldr	r3, [pc, #756]	; (40c620 <_strtod_r+0x6c8>)
  40c32c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40c330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c334:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c338:	f7fe fcdc 	bl	40acf4 <__aeabi_dmul>
  40c33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c340:	f038 060f 	bics.w	r6, r8, #15
  40c344:	f040 81db 	bne.w	40c6fe <_strtod_r+0x7a6>
  40c348:	2300      	movs	r3, #0
  40c34a:	9308      	str	r3, [sp, #32]
  40c34c:	9500      	str	r5, [sp, #0]
  40c34e:	4622      	mov	r2, r4
  40c350:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c352:	464b      	mov	r3, r9
  40c354:	4650      	mov	r0, sl
  40c356:	f005 f9d5 	bl	411704 <__s2b>
  40c35a:	9011      	str	r0, [sp, #68]	; 0x44
  40c35c:	2800      	cmp	r0, #0
  40c35e:	f000 8307 	beq.w	40c970 <_strtod_r+0xa18>
  40c362:	9a06      	ldr	r2, [sp, #24]
  40c364:	2700      	movs	r7, #0
  40c366:	4681      	mov	r9, r0
  40c368:	2a00      	cmp	r2, #0
  40c36a:	f1c2 0300 	rsb	r3, r2, #0
  40c36e:	46bb      	mov	fp, r7
  40c370:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  40c374:	bfa8      	it	ge
  40c376:	463b      	movge	r3, r7
  40c378:	9209      	str	r2, [sp, #36]	; 0x24
  40c37a:	930c      	str	r3, [sp, #48]	; 0x30
  40c37c:	4650      	mov	r0, sl
  40c37e:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40c382:	f005 f94b 	bl	41161c <_Balloc>
  40c386:	4606      	mov	r6, r0
  40c388:	2800      	cmp	r0, #0
  40c38a:	f000 8265 	beq.w	40c858 <_strtod_r+0x900>
  40c38e:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40c392:	f109 010c 	add.w	r1, r9, #12
  40c396:	300c      	adds	r0, #12
  40c398:	3202      	adds	r2, #2
  40c39a:	ed9d 7b02 	vldr	d7, [sp, #8]
  40c39e:	0092      	lsls	r2, r2, #2
  40c3a0:	ed8d 7b06 	vstr	d7, [sp, #24]
  40c3a4:	f7ff fae8 	bl	40b978 <memcpy>
  40c3a8:	4650      	mov	r0, sl
  40c3aa:	a91b      	add	r1, sp, #108	; 0x6c
  40c3ac:	aa1c      	add	r2, sp, #112	; 0x70
  40c3ae:	ed9d 0b06 	vldr	d0, [sp, #24]
  40c3b2:	f005 fcc1 	bl	411d38 <__d2b>
  40c3b6:	901a      	str	r0, [sp, #104]	; 0x68
  40c3b8:	2800      	cmp	r0, #0
  40c3ba:	f000 824e 	beq.w	40c85a <_strtod_r+0x902>
  40c3be:	4650      	mov	r0, sl
  40c3c0:	2101      	movs	r1, #1
  40c3c2:	f005 fa3d 	bl	411840 <__i2b>
  40c3c6:	4683      	mov	fp, r0
  40c3c8:	2800      	cmp	r0, #0
  40c3ca:	f000 8245 	beq.w	40c858 <_strtod_r+0x900>
  40c3ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c3d0:	2b00      	cmp	r3, #0
  40c3d2:	f2c0 8118 	blt.w	40c606 <_strtod_r+0x6ae>
  40c3d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c3d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c3da:	eb02 0803 	add.w	r8, r2, r3
  40c3de:	9a08      	ldr	r2, [sp, #32]
  40c3e0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  40c3e4:	1a9a      	subs	r2, r3, r2
  40c3e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c3e8:	441a      	add	r2, r3
  40c3ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40c3ee:	428a      	cmp	r2, r1
  40c3f0:	f280 80f1 	bge.w	40c5d6 <_strtod_r+0x67e>
  40c3f4:	1a89      	subs	r1, r1, r2
  40c3f6:	291f      	cmp	r1, #31
  40c3f8:	eba3 0301 	sub.w	r3, r3, r1
  40c3fc:	f300 811a 	bgt.w	40c634 <_strtod_r+0x6dc>
  40c400:	2201      	movs	r2, #1
  40c402:	2000      	movs	r0, #0
  40c404:	408a      	lsls	r2, r1
  40c406:	900a      	str	r0, [sp, #40]	; 0x28
  40c408:	9210      	str	r2, [sp, #64]	; 0x40
  40c40a:	eb08 0503 	add.w	r5, r8, r3
  40c40e:	441c      	add	r4, r3
  40c410:	9b08      	ldr	r3, [sp, #32]
  40c412:	4545      	cmp	r5, r8
  40c414:	462a      	mov	r2, r5
  40c416:	441c      	add	r4, r3
  40c418:	bfa8      	it	ge
  40c41a:	4642      	movge	r2, r8
  40c41c:	42a2      	cmp	r2, r4
  40c41e:	bfa8      	it	ge
  40c420:	4622      	movge	r2, r4
  40c422:	2a00      	cmp	r2, #0
  40c424:	dd03      	ble.n	40c42e <_strtod_r+0x4d6>
  40c426:	1aad      	subs	r5, r5, r2
  40c428:	1aa4      	subs	r4, r4, r2
  40c42a:	ebc2 0808 	rsb	r8, r2, r8
  40c42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c430:	b1bb      	cbz	r3, 40c462 <_strtod_r+0x50a>
  40c432:	4659      	mov	r1, fp
  40c434:	4650      	mov	r0, sl
  40c436:	461a      	mov	r2, r3
  40c438:	f005 faae 	bl	411998 <__pow5mult>
  40c43c:	4683      	mov	fp, r0
  40c43e:	2800      	cmp	r0, #0
  40c440:	f000 820a 	beq.w	40c858 <_strtod_r+0x900>
  40c444:	4650      	mov	r0, sl
  40c446:	4659      	mov	r1, fp
  40c448:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c44a:	f005 fa03 	bl	411854 <__multiply>
  40c44e:	2800      	cmp	r0, #0
  40c450:	f000 8202 	beq.w	40c858 <_strtod_r+0x900>
  40c454:	900d      	str	r0, [sp, #52]	; 0x34
  40c456:	4650      	mov	r0, sl
  40c458:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c45a:	f005 f907 	bl	41166c <_Bfree>
  40c45e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c460:	921a      	str	r2, [sp, #104]	; 0x68
  40c462:	2d00      	cmp	r5, #0
  40c464:	dd08      	ble.n	40c478 <_strtod_r+0x520>
  40c466:	462a      	mov	r2, r5
  40c468:	4650      	mov	r0, sl
  40c46a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c46c:	f005 fae4 	bl	411a38 <__lshift>
  40c470:	901a      	str	r0, [sp, #104]	; 0x68
  40c472:	2800      	cmp	r0, #0
  40c474:	f000 81f1 	beq.w	40c85a <_strtod_r+0x902>
  40c478:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c47a:	b143      	cbz	r3, 40c48e <_strtod_r+0x536>
  40c47c:	4631      	mov	r1, r6
  40c47e:	4650      	mov	r0, sl
  40c480:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c482:	f005 fa89 	bl	411998 <__pow5mult>
  40c486:	4606      	mov	r6, r0
  40c488:	2800      	cmp	r0, #0
  40c48a:	f000 81e5 	beq.w	40c858 <_strtod_r+0x900>
  40c48e:	2c00      	cmp	r4, #0
  40c490:	dd08      	ble.n	40c4a4 <_strtod_r+0x54c>
  40c492:	4631      	mov	r1, r6
  40c494:	4622      	mov	r2, r4
  40c496:	4650      	mov	r0, sl
  40c498:	f005 face 	bl	411a38 <__lshift>
  40c49c:	4606      	mov	r6, r0
  40c49e:	2800      	cmp	r0, #0
  40c4a0:	f000 81da 	beq.w	40c858 <_strtod_r+0x900>
  40c4a4:	f1b8 0f00 	cmp.w	r8, #0
  40c4a8:	dd08      	ble.n	40c4bc <_strtod_r+0x564>
  40c4aa:	4659      	mov	r1, fp
  40c4ac:	4642      	mov	r2, r8
  40c4ae:	4650      	mov	r0, sl
  40c4b0:	f005 fac2 	bl	411a38 <__lshift>
  40c4b4:	4683      	mov	fp, r0
  40c4b6:	2800      	cmp	r0, #0
  40c4b8:	f000 81ce 	beq.w	40c858 <_strtod_r+0x900>
  40c4bc:	4650      	mov	r0, sl
  40c4be:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c4c0:	4632      	mov	r2, r6
  40c4c2:	f005 fb37 	bl	411b34 <__mdiff>
  40c4c6:	4607      	mov	r7, r0
  40c4c8:	2800      	cmp	r0, #0
  40c4ca:	f000 81c5 	beq.w	40c858 <_strtod_r+0x900>
  40c4ce:	2300      	movs	r3, #0
  40c4d0:	68c2      	ldr	r2, [r0, #12]
  40c4d2:	4659      	mov	r1, fp
  40c4d4:	60c3      	str	r3, [r0, #12]
  40c4d6:	920d      	str	r2, [sp, #52]	; 0x34
  40c4d8:	f005 fb08 	bl	411aec <__mcmp>
  40c4dc:	2800      	cmp	r0, #0
  40c4de:	f2c0 83ad 	blt.w	40cc3c <_strtod_r+0xce4>
  40c4e2:	f000 83fe 	beq.w	40cce2 <_strtod_r+0xd8a>
  40c4e6:	4638      	mov	r0, r7
  40c4e8:	4659      	mov	r1, fp
  40c4ea:	f005 fc83 	bl	411df4 <__ratio>
  40c4ee:	2200      	movs	r2, #0
  40c4f0:	ee10 0a10 	vmov	r0, s0
  40c4f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40c4f8:	ec55 4b10 	vmov	r4, r5, d0
  40c4fc:	4629      	mov	r1, r5
  40c4fe:	f7fe fe75 	bl	40b1ec <__aeabi_dcmple>
  40c502:	2800      	cmp	r0, #0
  40c504:	d06c      	beq.n	40c5e0 <_strtod_r+0x688>
  40c506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c508:	2b00      	cmp	r3, #0
  40c50a:	f000 80a0 	beq.w	40c64e <_strtod_r+0x6f6>
  40c50e:	2400      	movs	r4, #0
  40c510:	4d44      	ldr	r5, [pc, #272]	; (40c624 <_strtod_r+0x6cc>)
  40c512:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40c516:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 40c610 <_strtod_r+0x6b8>
  40c51a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c51e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 40c62c <_strtod_r+0x6d4>
  40c522:	4b41      	ldr	r3, [pc, #260]	; (40c628 <_strtod_r+0x6d0>)
  40c524:	ea0c 0808 	and.w	r8, ip, r8
  40c528:	4598      	cmp	r8, r3
  40c52a:	f000 81f1 	beq.w	40c910 <_strtod_r+0x9b8>
  40c52e:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  40c532:	d824      	bhi.n	40c57e <_strtod_r+0x626>
  40c534:	9b08      	ldr	r3, [sp, #32]
  40c536:	b313      	cbz	r3, 40c57e <_strtod_r+0x626>
  40c538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c53c:	a336      	add	r3, pc, #216	; (adr r3, 40c618 <_strtod_r+0x6c0>)
  40c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c542:	f7fe fe53 	bl	40b1ec <__aeabi_dcmple>
  40c546:	b1b0      	cbz	r0, 40c576 <_strtod_r+0x61e>
  40c548:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c54c:	f006 f9fa 	bl	412944 <__aeabi_d2uiz>
  40c550:	2800      	cmp	r0, #0
  40c552:	f000 8128 	beq.w	40c7a6 <_strtod_r+0x84e>
  40c556:	f7fe fb57 	bl	40ac08 <__aeabi_ui2d>
  40c55a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c560:	2b00      	cmp	r3, #0
  40c562:	f040 8243 	bne.w	40c9ec <_strtod_r+0xa94>
  40c566:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c56e:	9012      	str	r0, [sp, #72]	; 0x48
  40c570:	9313      	str	r3, [sp, #76]	; 0x4c
  40c572:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  40c576:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  40c57a:	ebc8 0503 	rsb	r5, r8, r3
  40c57e:	ed9d 0b06 	vldr	d0, [sp, #24]
  40c582:	f005 fb49 	bl	411c18 <__ulp>
  40c586:	4620      	mov	r0, r4
  40c588:	4629      	mov	r1, r5
  40c58a:	ec53 2b10 	vmov	r2, r3, d0
  40c58e:	f7fe fbb1 	bl	40acf4 <__aeabi_dmul>
  40c592:	4602      	mov	r2, r0
  40c594:	460b      	mov	r3, r1
  40c596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c59a:	f7fe f9f9 	bl	40a990 <__adddf3>
  40c59e:	460c      	mov	r4, r1
  40c5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c5a4:	4b21      	ldr	r3, [pc, #132]	; (40c62c <_strtod_r+0x6d4>)
  40c5a6:	4023      	ands	r3, r4
  40c5a8:	4598      	cmp	r8, r3
  40c5aa:	d103      	bne.n	40c5b4 <_strtod_r+0x65c>
  40c5ac:	9b08      	ldr	r3, [sp, #32]
  40c5ae:	2b00      	cmp	r3, #0
  40c5b0:	f000 81e7 	beq.w	40c982 <_strtod_r+0xa2a>
  40c5b4:	4650      	mov	r0, sl
  40c5b6:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c5b8:	f005 f858 	bl	41166c <_Bfree>
  40c5bc:	4650      	mov	r0, sl
  40c5be:	4631      	mov	r1, r6
  40c5c0:	f005 f854 	bl	41166c <_Bfree>
  40c5c4:	4650      	mov	r0, sl
  40c5c6:	4659      	mov	r1, fp
  40c5c8:	f005 f850 	bl	41166c <_Bfree>
  40c5cc:	4650      	mov	r0, sl
  40c5ce:	4639      	mov	r1, r7
  40c5d0:	f005 f84c 	bl	41166c <_Bfree>
  40c5d4:	e6d2      	b.n	40c37c <_strtod_r+0x424>
  40c5d6:	2200      	movs	r2, #0
  40c5d8:	920a      	str	r2, [sp, #40]	; 0x28
  40c5da:	2201      	movs	r2, #1
  40c5dc:	9210      	str	r2, [sp, #64]	; 0x40
  40c5de:	e714      	b.n	40c40a <_strtod_r+0x4b2>
  40c5e0:	4b13      	ldr	r3, [pc, #76]	; (40c630 <_strtod_r+0x6d8>)
  40c5e2:	4620      	mov	r0, r4
  40c5e4:	4629      	mov	r1, r5
  40c5e6:	2200      	movs	r2, #0
  40c5e8:	f7fe fb84 	bl	40acf4 <__aeabi_dmul>
  40c5ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c5ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c5f2:	bb3b      	cbnz	r3, 40c644 <_strtod_r+0x6ec>
  40c5f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c5f8:	900e      	str	r0, [sp, #56]	; 0x38
  40c5fa:	930f      	str	r3, [sp, #60]	; 0x3c
  40c5fc:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40c600:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  40c604:	e78b      	b.n	40c51e <_strtod_r+0x5c6>
  40c606:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c608:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40c60c:	1ad4      	subs	r4, r2, r3
  40c60e:	e6e6      	b.n	40c3de <_strtod_r+0x486>
  40c610:	00000000 	.word	0x00000000
  40c614:	3ff00000 	.word	0x3ff00000
  40c618:	ffc00000 	.word	0xffc00000
  40c61c:	41dfffff 	.word	0x41dfffff
  40c620:	00414078 	.word	0x00414078
  40c624:	3ff00000 	.word	0x3ff00000
  40c628:	7fe00000 	.word	0x7fe00000
  40c62c:	7ff00000 	.word	0x7ff00000
  40c630:	3fe00000 	.word	0x3fe00000
  40c634:	49a8      	ldr	r1, [pc, #672]	; (40c8d8 <_strtod_r+0x980>)
  40c636:	2501      	movs	r5, #1
  40c638:	1a89      	subs	r1, r1, r2
  40c63a:	9510      	str	r5, [sp, #64]	; 0x40
  40c63c:	fa05 f201 	lsl.w	r2, r5, r1
  40c640:	920a      	str	r2, [sp, #40]	; 0x28
  40c642:	e6e2      	b.n	40c40a <_strtod_r+0x4b2>
  40c644:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
  40c648:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40c64c:	e7d6      	b.n	40c5fc <_strtod_r+0x6a4>
  40c64e:	9b02      	ldr	r3, [sp, #8]
  40c650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c654:	2b00      	cmp	r3, #0
  40c656:	f040 8095 	bne.w	40c784 <_strtod_r+0x82c>
  40c65a:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40c65e:	468c      	mov	ip, r1
  40c660:	2b00      	cmp	r3, #0
  40c662:	f040 8093 	bne.w	40c78c <_strtod_r+0x834>
  40c666:	910a      	str	r1, [sp, #40]	; 0x28
  40c668:	4620      	mov	r0, r4
  40c66a:	4629      	mov	r1, r5
  40c66c:	2200      	movs	r2, #0
  40c66e:	4b9b      	ldr	r3, [pc, #620]	; (40c8dc <_strtod_r+0x984>)
  40c670:	f7fe fdb2 	bl	40b1d8 <__aeabi_dcmplt>
  40c674:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40c678:	2800      	cmp	r0, #0
  40c67a:	f040 8356 	bne.w	40cd2a <_strtod_r+0xdd2>
  40c67e:	4b98      	ldr	r3, [pc, #608]	; (40c8e0 <_strtod_r+0x988>)
  40c680:	4620      	mov	r0, r4
  40c682:	4629      	mov	r1, r5
  40c684:	2200      	movs	r2, #0
  40c686:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40c68a:	f7fe fb33 	bl	40acf4 <__aeabi_dmul>
  40c68e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40c692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c696:	9016      	str	r0, [sp, #88]	; 0x58
  40c698:	9317      	str	r3, [sp, #92]	; 0x5c
  40c69a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c69e:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40c6a2:	e73c      	b.n	40c51e <_strtod_r+0x5c6>
  40c6a4:	4640      	mov	r0, r8
  40c6a6:	46a1      	mov	r9, r4
  40c6a8:	46c4      	mov	ip, r8
  40c6aa:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40c6ae:	2a09      	cmp	r2, #9
  40c6b0:	d810      	bhi.n	40c6d4 <_strtod_r+0x77c>
  40c6b2:	1c43      	adds	r3, r0, #1
  40c6b4:	4616      	mov	r6, r2
  40c6b6:	2a00      	cmp	r2, #0
  40c6b8:	f040 8205 	bne.w	40cac6 <_strtod_r+0xb6e>
  40c6bc:	4618      	mov	r0, r3
  40c6be:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c6c0:	1c5a      	adds	r2, r3, #1
  40c6c2:	9219      	str	r2, [sp, #100]	; 0x64
  40c6c4:	785e      	ldrb	r6, [r3, #1]
  40c6c6:	e7f0      	b.n	40c6aa <_strtod_r+0x752>
  40c6c8:	f04f 0801 	mov.w	r8, #1
  40c6cc:	1cbb      	adds	r3, r7, #2
  40c6ce:	9319      	str	r3, [sp, #100]	; 0x64
  40c6d0:	78be      	ldrb	r6, [r7, #2]
  40c6d2:	e5b2      	b.n	40c23a <_strtod_r+0x2e2>
  40c6d4:	f04f 0e01 	mov.w	lr, #1
  40c6d8:	e49c      	b.n	40c014 <_strtod_r+0xbc>
  40c6da:	9b06      	ldr	r3, [sp, #24]
  40c6dc:	f340 8296 	ble.w	40cc0c <_strtod_r+0xcb4>
  40c6e0:	2b16      	cmp	r3, #22
  40c6e2:	f300 8211 	bgt.w	40cb08 <_strtod_r+0xbb0>
  40c6e6:	497f      	ldr	r1, [pc, #508]	; (40c8e4 <_strtod_r+0x98c>)
  40c6e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40c6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c6f4:	f7fe fafe 	bl	40acf4 <__aeabi_dmul>
  40c6f8:	4680      	mov	r8, r0
  40c6fa:	4689      	mov	r9, r1
  40c6fc:	e517      	b.n	40c12e <_strtod_r+0x1d6>
  40c6fe:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  40c702:	f300 8135 	bgt.w	40c970 <_strtod_r+0xa18>
  40c706:	1136      	asrs	r6, r6, #4
  40c708:	2e01      	cmp	r6, #1
  40c70a:	f340 833b 	ble.w	40cd84 <_strtod_r+0xe2c>
  40c70e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40c90c <_strtod_r+0x9b4>
  40c712:	f04f 0b00 	mov.w	fp, #0
  40c716:	4647      	mov	r7, r8
  40c718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c71c:	f016 0f01 	tst.w	r6, #1
  40c720:	f10b 0b01 	add.w	fp, fp, #1
  40c724:	ea4f 0666 	mov.w	r6, r6, asr #1
  40c728:	d003      	beq.n	40c732 <_strtod_r+0x7da>
  40c72a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c72e:	f7fe fae1 	bl	40acf4 <__aeabi_dmul>
  40c732:	2e01      	cmp	r6, #1
  40c734:	f107 0708 	add.w	r7, r7, #8
  40c738:	d1f0      	bne.n	40c71c <_strtod_r+0x7c4>
  40c73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c73e:	9b03      	ldr	r3, [sp, #12]
  40c740:	eb08 08cb 	add.w	r8, r8, fp, lsl #3
  40c744:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40c748:	9303      	str	r3, [sp, #12]
  40c74a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c74e:	e9d8 0100 	ldrd	r0, r1, [r8]
  40c752:	f7fe facf 	bl	40acf4 <__aeabi_dmul>
  40c756:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40c75a:	4a63      	ldr	r2, [pc, #396]	; (40c8e8 <_strtod_r+0x990>)
  40c75c:	0d1b      	lsrs	r3, r3, #20
  40c75e:	051b      	lsls	r3, r3, #20
  40c760:	4293      	cmp	r3, r2
  40c762:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c766:	f200 8103 	bhi.w	40c970 <_strtod_r+0xa18>
  40c76a:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  40c76e:	4293      	cmp	r3, r2
  40c770:	f240 82e4 	bls.w	40cd3c <_strtod_r+0xde4>
  40c774:	4b5d      	ldr	r3, [pc, #372]	; (40c8ec <_strtod_r+0x994>)
  40c776:	9303      	str	r3, [sp, #12]
  40c778:	2300      	movs	r3, #0
  40c77a:	9308      	str	r3, [sp, #32]
  40c77c:	f04f 33ff 	mov.w	r3, #4294967295
  40c780:	9302      	str	r3, [sp, #8]
  40c782:	e5e3      	b.n	40c34c <_strtod_r+0x3f4>
  40c784:	2801      	cmp	r0, #1
  40c786:	f000 81dd 	beq.w	40cb44 <_strtod_r+0xbec>
  40c78a:	468c      	mov	ip, r1
  40c78c:	2400      	movs	r4, #0
  40c78e:	4d58      	ldr	r5, [pc, #352]	; (40c8f0 <_strtod_r+0x998>)
  40c790:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 40c8d0 <_strtod_r+0x978>
  40c794:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c798:	e6c1      	b.n	40c51e <_strtod_r+0x5c6>
  40c79a:	f04f 0900 	mov.w	r9, #0
  40c79e:	f04f 0e01 	mov.w	lr, #1
  40c7a2:	46cc      	mov	ip, r9
  40c7a4:	e436      	b.n	40c014 <_strtod_r+0xbc>
  40c7a6:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 40c8d0 <_strtod_r+0x978>
  40c7aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c7ae:	e6d6      	b.n	40c55e <_strtod_r+0x606>
  40c7b0:	9919      	ldr	r1, [sp, #100]	; 0x64
  40c7b2:	4850      	ldr	r0, [pc, #320]	; (40c8f4 <_strtod_r+0x99c>)
  40c7b4:	e009      	b.n	40c7ca <_strtod_r+0x872>
  40c7b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40c7ba:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c7be:	2c19      	cmp	r4, #25
  40c7c0:	d800      	bhi.n	40c7c4 <_strtod_r+0x86c>
  40c7c2:	3320      	adds	r3, #32
  40c7c4:	4293      	cmp	r3, r2
  40c7c6:	f47f ac33 	bne.w	40c030 <_strtod_r+0xd8>
  40c7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
  40c7ce:	2a00      	cmp	r2, #0
  40c7d0:	d1f1      	bne.n	40c7b6 <_strtod_r+0x85e>
  40c7d2:	1c4b      	adds	r3, r1, #1
  40c7d4:	9319      	str	r3, [sp, #100]	; 0x64
  40c7d6:	784b      	ldrb	r3, [r1, #1]
  40c7d8:	2b28      	cmp	r3, #40	; 0x28
  40c7da:	f000 82de 	beq.w	40cd9a <_strtod_r+0xe42>
  40c7de:	4b46      	ldr	r3, [pc, #280]	; (40c8f8 <_strtod_r+0x9a0>)
  40c7e0:	9303      	str	r3, [sp, #12]
  40c7e2:	2300      	movs	r3, #0
  40c7e4:	9302      	str	r3, [sp, #8]
  40c7e6:	e4a0      	b.n	40c12a <_strtod_r+0x1d2>
  40c7e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c7ea:	4844      	ldr	r0, [pc, #272]	; (40c8fc <_strtod_r+0x9a4>)
  40c7ec:	e009      	b.n	40c802 <_strtod_r+0x8aa>
  40c7ee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c7f2:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c7f6:	2c19      	cmp	r4, #25
  40c7f8:	d800      	bhi.n	40c7fc <_strtod_r+0x8a4>
  40c7fa:	3320      	adds	r3, #32
  40c7fc:	428b      	cmp	r3, r1
  40c7fe:	f47f ac17 	bne.w	40c030 <_strtod_r+0xd8>
  40c802:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c806:	2900      	cmp	r1, #0
  40c808:	d1f1      	bne.n	40c7ee <_strtod_r+0x896>
  40c80a:	9219      	str	r2, [sp, #100]	; 0x64
  40c80c:	4615      	mov	r5, r2
  40c80e:	483c      	ldr	r0, [pc, #240]	; (40c900 <_strtod_r+0x9a8>)
  40c810:	e009      	b.n	40c826 <_strtod_r+0x8ce>
  40c812:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c816:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c81a:	2c19      	cmp	r4, #25
  40c81c:	d800      	bhi.n	40c820 <_strtod_r+0x8c8>
  40c81e:	3320      	adds	r3, #32
  40c820:	428b      	cmp	r3, r1
  40c822:	f040 8297 	bne.w	40cd54 <_strtod_r+0xdfc>
  40c826:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c82a:	2900      	cmp	r1, #0
  40c82c:	d1f1      	bne.n	40c812 <_strtod_r+0x8ba>
  40c82e:	3201      	adds	r2, #1
  40c830:	9219      	str	r2, [sp, #100]	; 0x64
  40c832:	4b34      	ldr	r3, [pc, #208]	; (40c904 <_strtod_r+0x9ac>)
  40c834:	9303      	str	r3, [sp, #12]
  40c836:	2300      	movs	r3, #0
  40c838:	9302      	str	r3, [sp, #8]
  40c83a:	e476      	b.n	40c12a <_strtod_r+0x1d2>
  40c83c:	9719      	str	r7, [sp, #100]	; 0x64
  40c83e:	2300      	movs	r3, #0
  40c840:	f1b9 0f00 	cmp.w	r9, #0
  40c844:	f47f ac41 	bne.w	40c0ca <_strtod_r+0x172>
  40c848:	e476      	b.n	40c138 <_strtod_r+0x1e0>
  40c84a:	f04f 0800 	mov.w	r8, #0
  40c84e:	e73d      	b.n	40c6cc <_strtod_r+0x774>
  40c850:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c852:	3301      	adds	r3, #1
  40c854:	f040 8086 	bne.w	40c964 <_strtod_r+0xa0c>
  40c858:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c85a:	4b2a      	ldr	r3, [pc, #168]	; (40c904 <_strtod_r+0x9ac>)
  40c85c:	2200      	movs	r2, #0
  40c85e:	9303      	str	r3, [sp, #12]
  40c860:	2322      	movs	r3, #34	; 0x22
  40c862:	9202      	str	r2, [sp, #8]
  40c864:	f8ca 3000 	str.w	r3, [sl]
  40c868:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40c86c:	4601      	mov	r1, r0
  40c86e:	4650      	mov	r0, sl
  40c870:	f004 fefc 	bl	41166c <_Bfree>
  40c874:	4650      	mov	r0, sl
  40c876:	4631      	mov	r1, r6
  40c878:	f004 fef8 	bl	41166c <_Bfree>
  40c87c:	4650      	mov	r0, sl
  40c87e:	4659      	mov	r1, fp
  40c880:	f004 fef4 	bl	41166c <_Bfree>
  40c884:	4650      	mov	r0, sl
  40c886:	9911      	ldr	r1, [sp, #68]	; 0x44
  40c888:	f004 fef0 	bl	41166c <_Bfree>
  40c88c:	4650      	mov	r0, sl
  40c88e:	4639      	mov	r1, r7
  40c890:	f004 feec 	bl	41166c <_Bfree>
  40c894:	e44b      	b.n	40c12e <_strtod_r+0x1d6>
  40c896:	9a05      	ldr	r2, [sp, #20]
  40c898:	ab1a      	add	r3, sp, #104	; 0x68
  40c89a:	4650      	mov	r0, sl
  40c89c:	a919      	add	r1, sp, #100	; 0x64
  40c89e:	9201      	str	r2, [sp, #4]
  40c8a0:	9300      	str	r3, [sp, #0]
  40c8a2:	ab1b      	add	r3, sp, #108	; 0x6c
  40c8a4:	4a18      	ldr	r2, [pc, #96]	; (40c908 <_strtod_r+0x9b0>)
  40c8a6:	f004 fa43 	bl	410d30 <__gethex>
  40c8aa:	f010 0607 	ands.w	r6, r0, #7
  40c8ae:	4605      	mov	r5, r0
  40c8b0:	f43f ad01 	beq.w	40c2b6 <_strtod_r+0x35e>
  40c8b4:	2e06      	cmp	r6, #6
  40c8b6:	f040 8156 	bne.w	40cb66 <_strtod_r+0xc0e>
  40c8ba:	3401      	adds	r4, #1
  40c8bc:	2300      	movs	r3, #0
  40c8be:	f04f 0800 	mov.w	r8, #0
  40c8c2:	f04f 0900 	mov.w	r9, #0
  40c8c6:	9305      	str	r3, [sp, #20]
  40c8c8:	9419      	str	r4, [sp, #100]	; 0x64
  40c8ca:	e430      	b.n	40c12e <_strtod_r+0x1d6>
  40c8cc:	f3af 8000 	nop.w
  40c8d0:	00000000 	.word	0x00000000
  40c8d4:	3ff00000 	.word	0x3ff00000
  40c8d8:	fffffbe3 	.word	0xfffffbe3
  40c8dc:	3ff00000 	.word	0x3ff00000
  40c8e0:	3fe00000 	.word	0x3fe00000
  40c8e4:	00414078 	.word	0x00414078
  40c8e8:	7ca00000 	.word	0x7ca00000
  40c8ec:	7fefffff 	.word	0x7fefffff
  40c8f0:	bff00000 	.word	0xbff00000
  40c8f4:	00413db8 	.word	0x00413db8
  40c8f8:	fff80000 	.word	0xfff80000
  40c8fc:	00413dac 	.word	0x00413dac
  40c900:	00413db0 	.word	0x00413db0
  40c904:	7ff00000 	.word	0x7ff00000
  40c908:	00413dbc 	.word	0x00413dbc
  40c90c:	00414150 	.word	0x00414150
  40c910:	f1ac 7354 	sub.w	r3, ip, #55574528	; 0x3500000
  40c914:	9303      	str	r3, [sp, #12]
  40c916:	ed9d 7b02 	vldr	d7, [sp, #8]
  40c91a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40c91e:	eeb0 0a47 	vmov.f32	s0, s14
  40c922:	eef0 0a67 	vmov.f32	s1, s15
  40c926:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40c92a:	f005 f975 	bl	411c18 <__ulp>
  40c92e:	4620      	mov	r0, r4
  40c930:	4629      	mov	r1, r5
  40c932:	ec53 2b10 	vmov	r2, r3, d0
  40c936:	f7fe f9dd 	bl	40acf4 <__aeabi_dmul>
  40c93a:	4602      	mov	r2, r0
  40c93c:	460b      	mov	r3, r1
  40c93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c942:	f7fe f825 	bl	40a990 <__adddf3>
  40c946:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40c94a:	4aab      	ldr	r2, [pc, #684]	; (40cbf8 <_strtod_r+0xca0>)
  40c94c:	0d1b      	lsrs	r3, r3, #20
  40c94e:	051b      	lsls	r3, r3, #20
  40c950:	4293      	cmp	r3, r2
  40c952:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c956:	f240 80ad 	bls.w	40cab4 <_strtod_r+0xb5c>
  40c95a:	4ba8      	ldr	r3, [pc, #672]	; (40cbfc <_strtod_r+0xca4>)
  40c95c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c95e:	429a      	cmp	r2, r3
  40c960:	f43f af76 	beq.w	40c850 <_strtod_r+0x8f8>
  40c964:	4ba5      	ldr	r3, [pc, #660]	; (40cbfc <_strtod_r+0xca4>)
  40c966:	9303      	str	r3, [sp, #12]
  40c968:	f04f 33ff 	mov.w	r3, #4294967295
  40c96c:	9302      	str	r3, [sp, #8]
  40c96e:	e621      	b.n	40c5b4 <_strtod_r+0x65c>
  40c970:	4ba3      	ldr	r3, [pc, #652]	; (40cc00 <_strtod_r+0xca8>)
  40c972:	2200      	movs	r2, #0
  40c974:	9303      	str	r3, [sp, #12]
  40c976:	2322      	movs	r3, #34	; 0x22
  40c978:	9202      	str	r2, [sp, #8]
  40c97a:	f8ca 3000 	str.w	r3, [sl]
  40c97e:	f7ff bbd4 	b.w	40c12a <_strtod_r+0x1d2>
  40c982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c986:	f7fe fc4f 	bl	40b228 <__aeabi_d2iz>
  40c98a:	f7fe f94d 	bl	40ac28 <__aeabi_i2d>
  40c98e:	460b      	mov	r3, r1
  40c990:	4602      	mov	r2, r0
  40c992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c996:	f7fd fff9 	bl	40a98c <__aeabi_dsub>
  40c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c99c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40c9a0:	b983      	cbnz	r3, 40c9c4 <_strtod_r+0xa6c>
  40c9a2:	9b02      	ldr	r3, [sp, #8]
  40c9a4:	b973      	cbnz	r3, 40c9c4 <_strtod_r+0xa6c>
  40c9a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c9aa:	b95c      	cbnz	r4, 40c9c4 <_strtod_r+0xa6c>
  40c9ac:	a38c      	add	r3, pc, #560	; (adr r3, 40cbe0 <_strtod_r+0xc88>)
  40c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c9b2:	f7fe fc11 	bl	40b1d8 <__aeabi_dcmplt>
  40c9b6:	2800      	cmp	r0, #0
  40c9b8:	f43f adfc 	beq.w	40c5b4 <_strtod_r+0x65c>
  40c9bc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40c9c0:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c9c2:	e753      	b.n	40c86c <_strtod_r+0x914>
  40c9c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c9c8:	a387      	add	r3, pc, #540	; (adr r3, 40cbe8 <_strtod_r+0xc90>)
  40c9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c9ce:	f7fe fc03 	bl	40b1d8 <__aeabi_dcmplt>
  40c9d2:	2800      	cmp	r0, #0
  40c9d4:	d1f2      	bne.n	40c9bc <_strtod_r+0xa64>
  40c9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c9da:	a385      	add	r3, pc, #532	; (adr r3, 40cbf0 <_strtod_r+0xc98>)
  40c9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c9e0:	f7fe fc18 	bl	40b214 <__aeabi_dcmpgt>
  40c9e4:	2800      	cmp	r0, #0
  40c9e6:	f43f ade5 	beq.w	40c5b4 <_strtod_r+0x65c>
  40c9ea:	e7e7      	b.n	40c9bc <_strtod_r+0xa64>
  40c9ec:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
  40c9f0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  40c9f4:	e5bd      	b.n	40c572 <_strtod_r+0x61a>
  40c9f6:	f43f aca7 	beq.w	40c348 <_strtod_r+0x3f0>
  40c9fa:	f1c8 0600 	rsb	r6, r8, #0
  40c9fe:	f016 020f 	ands.w	r2, r6, #15
  40ca02:	d00a      	beq.n	40ca1a <_strtod_r+0xac2>
  40ca04:	4b7f      	ldr	r3, [pc, #508]	; (40cc04 <_strtod_r+0xcac>)
  40ca06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ca0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca12:	f7fe fa99 	bl	40af48 <__aeabi_ddiv>
  40ca16:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40ca1a:	1136      	asrs	r6, r6, #4
  40ca1c:	f43f ac94 	beq.w	40c348 <_strtod_r+0x3f0>
  40ca20:	2e1f      	cmp	r6, #31
  40ca22:	dc3e      	bgt.n	40caa2 <_strtod_r+0xb4a>
  40ca24:	f016 0310 	ands.w	r3, r6, #16
  40ca28:	f000 81b1 	beq.w	40cd8e <_strtod_r+0xe36>
  40ca2c:	236a      	movs	r3, #106	; 0x6a
  40ca2e:	2e00      	cmp	r6, #0
  40ca30:	bfd8      	it	le
  40ca32:	9308      	strle	r3, [sp, #32]
  40ca34:	dd18      	ble.n	40ca68 <_strtod_r+0xb10>
  40ca36:	9308      	str	r3, [sp, #32]
  40ca38:	4f73      	ldr	r7, [pc, #460]	; (40cc08 <_strtod_r+0xcb0>)
  40ca3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40ca3e:	f016 0f01 	tst.w	r6, #1
  40ca42:	4610      	mov	r0, r2
  40ca44:	ea4f 0666 	mov.w	r6, r6, asr #1
  40ca48:	4619      	mov	r1, r3
  40ca4a:	d005      	beq.n	40ca58 <_strtod_r+0xb00>
  40ca4c:	e9d7 2300 	ldrd	r2, r3, [r7]
  40ca50:	f7fe f950 	bl	40acf4 <__aeabi_dmul>
  40ca54:	4602      	mov	r2, r0
  40ca56:	460b      	mov	r3, r1
  40ca58:	2e00      	cmp	r6, #0
  40ca5a:	f107 0708 	add.w	r7, r7, #8
  40ca5e:	dcee      	bgt.n	40ca3e <_strtod_r+0xae6>
  40ca60:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40ca64:	9b08      	ldr	r3, [sp, #32]
  40ca66:	b19b      	cbz	r3, 40ca90 <_strtod_r+0xb38>
  40ca68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ca6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40ca70:	460a      	mov	r2, r1
  40ca72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40ca76:	2b00      	cmp	r3, #0
  40ca78:	dd0a      	ble.n	40ca90 <_strtod_r+0xb38>
  40ca7a:	2b1f      	cmp	r3, #31
  40ca7c:	f340 81e0 	ble.w	40ce40 <_strtod_r+0xee8>
  40ca80:	2100      	movs	r1, #0
  40ca82:	2b34      	cmp	r3, #52	; 0x34
  40ca84:	9102      	str	r1, [sp, #8]
  40ca86:	f340 81e3 	ble.w	40ce50 <_strtod_r+0xef8>
  40ca8a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40ca8e:	9303      	str	r3, [sp, #12]
  40ca90:	2200      	movs	r2, #0
  40ca92:	2300      	movs	r3, #0
  40ca94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ca98:	f7fe fb94 	bl	40b1c4 <__aeabi_dcmpeq>
  40ca9c:	2800      	cmp	r0, #0
  40ca9e:	f43f ac55 	beq.w	40c34c <_strtod_r+0x3f4>
  40caa2:	2322      	movs	r3, #34	; 0x22
  40caa4:	f04f 0800 	mov.w	r8, #0
  40caa8:	f04f 0900 	mov.w	r9, #0
  40caac:	f8ca 3000 	str.w	r3, [sl]
  40cab0:	f7ff bb3d 	b.w	40c12e <_strtod_r+0x1d6>
  40cab4:	9b03      	ldr	r3, [sp, #12]
  40cab6:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
  40caba:	9403      	str	r4, [sp, #12]
  40cabc:	e572      	b.n	40c5a4 <_strtod_r+0x64c>
  40cabe:	f644 631f 	movw	r3, #19999	; 0x4e1f
  40cac2:	f7ff bbef 	b.w	40c2a4 <_strtod_r+0x34c>
  40cac6:	2b01      	cmp	r3, #1
  40cac8:	449c      	add	ip, r3
  40caca:	d014      	beq.n	40caf6 <_strtod_r+0xb9e>
  40cacc:	4448      	add	r0, r9
  40cace:	e002      	b.n	40cad6 <_strtod_r+0xb7e>
  40cad0:	004d      	lsls	r5, r1, #1
  40cad2:	4581      	cmp	r9, r0
  40cad4:	d010      	beq.n	40caf8 <_strtod_r+0xba0>
  40cad6:	f109 0901 	add.w	r9, r9, #1
  40cada:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40cade:	f109 33ff 	add.w	r3, r9, #4294967295
  40cae2:	2b08      	cmp	r3, #8
  40cae4:	ddf4      	ble.n	40cad0 <_strtod_r+0xb78>
  40cae6:	f1b9 0f10 	cmp.w	r9, #16
  40caea:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
  40caee:	dcf0      	bgt.n	40cad2 <_strtod_r+0xb7a>
  40caf0:	ea4f 0b43 	mov.w	fp, r3, lsl #1
  40caf4:	e7ed      	b.n	40cad2 <_strtod_r+0xb7a>
  40caf6:	4648      	mov	r0, r9
  40caf8:	2808      	cmp	r0, #8
  40cafa:	f100 0901 	add.w	r9, r0, #1
  40cafe:	f300 8096 	bgt.w	40cc2e <_strtod_r+0xcd6>
  40cb02:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cb04:	f7ff bbfe 	b.w	40c304 <_strtod_r+0x3ac>
  40cb08:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
  40cb0c:	9a06      	ldr	r2, [sp, #24]
  40cb0e:	429a      	cmp	r2, r3
  40cb10:	f73f ac00 	bgt.w	40c314 <_strtod_r+0x3bc>
  40cb14:	f1c9 090f 	rsb	r9, r9, #15
  40cb18:	4c3a      	ldr	r4, [pc, #232]	; (40cc04 <_strtod_r+0xcac>)
  40cb1a:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
  40cb1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cb22:	e9d1 0100 	ldrd	r0, r1, [r1]
  40cb26:	f7fe f8e5 	bl	40acf4 <__aeabi_dmul>
  40cb2a:	9b06      	ldr	r3, [sp, #24]
  40cb2c:	ebc9 0903 	rsb	r9, r9, r3
  40cb30:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
  40cb34:	e9d4 2300 	ldrd	r2, r3, [r4]
  40cb38:	f7fe f8dc 	bl	40acf4 <__aeabi_dmul>
  40cb3c:	4680      	mov	r8, r0
  40cb3e:	4689      	mov	r9, r1
  40cb40:	f7ff baf5 	b.w	40c12e <_strtod_r+0x1d6>
  40cb44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cb48:	469c      	mov	ip, r3
  40cb4a:	2b00      	cmp	r3, #0
  40cb4c:	f47f ae1e 	bne.w	40c78c <_strtod_r+0x834>
  40cb50:	463c      	mov	r4, r7
  40cb52:	2322      	movs	r3, #34	; 0x22
  40cb54:	4627      	mov	r7, r4
  40cb56:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cb58:	f04f 0800 	mov.w	r8, #0
  40cb5c:	f8ca 3000 	str.w	r3, [sl]
  40cb60:	f04f 0900 	mov.w	r9, #0
  40cb64:	e682      	b.n	40c86c <_strtod_r+0x914>
  40cb66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40cb68:	b13a      	cbz	r2, 40cb7a <_strtod_r+0xc22>
  40cb6a:	a81c      	add	r0, sp, #112	; 0x70
  40cb6c:	2135      	movs	r1, #53	; 0x35
  40cb6e:	f005 f973 	bl	411e58 <__copybits>
  40cb72:	4650      	mov	r0, sl
  40cb74:	991a      	ldr	r1, [sp, #104]	; 0x68
  40cb76:	f004 fd79 	bl	41166c <_Bfree>
  40cb7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cb7c:	2e06      	cmp	r6, #6
  40cb7e:	d80b      	bhi.n	40cb98 <_strtod_r+0xc40>
  40cb80:	e8df f006 	tbb	[pc, r6]
  40cb84:	13181d28 	.word	0x13181d28
  40cb88:	1d04      	.short	0x1d04
  40cb8a:	28          	.byte	0x28
  40cb8b:	00          	.byte	0x00
  40cb8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40cb90:	9303      	str	r3, [sp, #12]
  40cb92:	f04f 33ff 	mov.w	r3, #4294967295
  40cb96:	9302      	str	r3, [sp, #8]
  40cb98:	072b      	lsls	r3, r5, #28
  40cb9a:	f57f aac6 	bpl.w	40c12a <_strtod_r+0x1d2>
  40cb9e:	9b03      	ldr	r3, [sp, #12]
  40cba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40cba4:	9303      	str	r3, [sp, #12]
  40cba6:	f7ff bac0 	b.w	40c12a <_strtod_r+0x1d2>
  40cbaa:	4b15      	ldr	r3, [pc, #84]	; (40cc00 <_strtod_r+0xca8>)
  40cbac:	9303      	str	r3, [sp, #12]
  40cbae:	2300      	movs	r3, #0
  40cbb0:	9302      	str	r3, [sp, #8]
  40cbb2:	e7f1      	b.n	40cb98 <_strtod_r+0xc40>
  40cbb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40cbb6:	9302      	str	r3, [sp, #8]
  40cbb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40cbba:	9303      	str	r3, [sp, #12]
  40cbbc:	e7ec      	b.n	40cb98 <_strtod_r+0xc40>
  40cbbe:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40cbc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40cbc4:	991c      	ldr	r1, [sp, #112]	; 0x70
  40cbc6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40cbca:	9102      	str	r1, [sp, #8]
  40cbcc:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  40cbd0:	9303      	str	r3, [sp, #12]
  40cbd2:	e7e1      	b.n	40cb98 <_strtod_r+0xc40>
  40cbd4:	2300      	movs	r3, #0
  40cbd6:	9303      	str	r3, [sp, #12]
  40cbd8:	9302      	str	r3, [sp, #8]
  40cbda:	e7dd      	b.n	40cb98 <_strtod_r+0xc40>
  40cbdc:	f3af 8000 	nop.w
  40cbe0:	94a03595 	.word	0x94a03595
  40cbe4:	3fcfffff 	.word	0x3fcfffff
  40cbe8:	94a03595 	.word	0x94a03595
  40cbec:	3fdfffff 	.word	0x3fdfffff
  40cbf0:	35afe535 	.word	0x35afe535
  40cbf4:	3fe00000 	.word	0x3fe00000
  40cbf8:	7c9fffff 	.word	0x7c9fffff
  40cbfc:	7fefffff 	.word	0x7fefffff
  40cc00:	7ff00000 	.word	0x7ff00000
  40cc04:	00414078 	.word	0x00414078
  40cc08:	00413d70 	.word	0x00413d70
  40cc0c:	3316      	adds	r3, #22
  40cc0e:	f6ff ab81 	blt.w	40c314 <_strtod_r+0x3bc>
  40cc12:	9a06      	ldr	r2, [sp, #24]
  40cc14:	4b96      	ldr	r3, [pc, #600]	; (40ce70 <_strtod_r+0xf18>)
  40cc16:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
  40cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cc22:	f7fe f991 	bl	40af48 <__aeabi_ddiv>
  40cc26:	4680      	mov	r8, r0
  40cc28:	4689      	mov	r9, r1
  40cc2a:	f7ff ba80 	b.w	40c12e <_strtod_r+0x1d6>
  40cc2e:	f1b9 0f10 	cmp.w	r9, #16
  40cc32:	f340 8088 	ble.w	40cd46 <_strtod_r+0xdee>
  40cc36:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cc38:	2000      	movs	r0, #0
  40cc3a:	e541      	b.n	40c6c0 <_strtod_r+0x768>
  40cc3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cc3e:	463c      	mov	r4, r7
  40cc40:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40cc44:	bb8b      	cbnz	r3, 40ccaa <_strtod_r+0xd52>
  40cc46:	9b02      	ldr	r3, [sp, #8]
  40cc48:	bb7b      	cbnz	r3, 40ccaa <_strtod_r+0xd52>
  40cc4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cc4e:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40cc52:	460d      	mov	r5, r1
  40cc54:	bb4b      	cbnz	r3, 40ccaa <_strtod_r+0xd52>
  40cc56:	9b03      	ldr	r3, [sp, #12]
  40cc58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40cc5c:	0d1b      	lsrs	r3, r3, #20
  40cc5e:	051b      	lsls	r3, r3, #20
  40cc60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40cc64:	d921      	bls.n	40ccaa <_strtod_r+0xd52>
  40cc66:	697b      	ldr	r3, [r7, #20]
  40cc68:	b913      	cbnz	r3, 40cc70 <_strtod_r+0xd18>
  40cc6a:	693b      	ldr	r3, [r7, #16]
  40cc6c:	2b01      	cmp	r3, #1
  40cc6e:	dd1c      	ble.n	40ccaa <_strtod_r+0xd52>
  40cc70:	4639      	mov	r1, r7
  40cc72:	2201      	movs	r2, #1
  40cc74:	4650      	mov	r0, sl
  40cc76:	f004 fedf 	bl	411a38 <__lshift>
  40cc7a:	4659      	mov	r1, fp
  40cc7c:	4604      	mov	r4, r0
  40cc7e:	f004 ff35 	bl	411aec <__mcmp>
  40cc82:	2800      	cmp	r0, #0
  40cc84:	dd11      	ble.n	40ccaa <_strtod_r+0xd52>
  40cc86:	9b08      	ldr	r3, [sp, #32]
  40cc88:	2b00      	cmp	r3, #0
  40cc8a:	f040 80ce 	bne.w	40ce2a <_strtod_r+0xed2>
  40cc8e:	4b79      	ldr	r3, [pc, #484]	; (40ce74 <_strtod_r+0xf1c>)
  40cc90:	402b      	ands	r3, r5
  40cc92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  40cc96:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  40cc9a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  40cc9e:	9303      	str	r3, [sp, #12]
  40cca0:	f04f 33ff 	mov.w	r3, #4294967295
  40cca4:	9302      	str	r3, [sp, #8]
  40cca6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40ccaa:	9b08      	ldr	r3, [sp, #32]
  40ccac:	b1b3      	cbz	r3, 40ccdc <_strtod_r+0xd84>
  40ccae:	4b72      	ldr	r3, [pc, #456]	; (40ce78 <_strtod_r+0xf20>)
  40ccb0:	4640      	mov	r0, r8
  40ccb2:	4649      	mov	r1, r9
  40ccb4:	9315      	str	r3, [sp, #84]	; 0x54
  40ccb6:	2300      	movs	r3, #0
  40ccb8:	9314      	str	r3, [sp, #80]	; 0x50
  40ccba:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40ccbe:	f7fe f819 	bl	40acf4 <__aeabi_dmul>
  40ccc2:	4602      	mov	r2, r0
  40ccc4:	460b      	mov	r3, r1
  40ccc6:	4680      	mov	r8, r0
  40ccc8:	4689      	mov	r9, r1
  40ccca:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40ccce:	b929      	cbnz	r1, 40ccdc <_strtod_r+0xd84>
  40ccd0:	9b02      	ldr	r3, [sp, #8]
  40ccd2:	4627      	mov	r7, r4
  40ccd4:	2b00      	cmp	r3, #0
  40ccd6:	d050      	beq.n	40cd7a <_strtod_r+0xe22>
  40ccd8:	981a      	ldr	r0, [sp, #104]	; 0x68
  40ccda:	e5c7      	b.n	40c86c <_strtod_r+0x914>
  40ccdc:	4627      	mov	r7, r4
  40ccde:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cce0:	e5c4      	b.n	40c86c <_strtod_r+0x914>
  40cce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cce4:	463c      	mov	r4, r7
  40cce6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40ccea:	2b00      	cmp	r3, #0
  40ccec:	d035      	beq.n	40cd5a <_strtod_r+0xe02>
  40ccee:	9b03      	ldr	r3, [sp, #12]
  40ccf0:	9a03      	ldr	r2, [sp, #12]
  40ccf2:	f3c3 0113 	ubfx	r1, r3, #0, #20
  40ccf6:	4b61      	ldr	r3, [pc, #388]	; (40ce7c <_strtod_r+0xf24>)
  40ccf8:	4299      	cmp	r1, r3
  40ccfa:	d060      	beq.n	40cdbe <_strtod_r+0xe66>
  40ccfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ccfe:	2b00      	cmp	r3, #0
  40cd00:	d036      	beq.n	40cd70 <_strtod_r+0xe18>
  40cd02:	9a03      	ldr	r2, [sp, #12]
  40cd04:	4213      	tst	r3, r2
  40cd06:	d0d0      	beq.n	40ccaa <_strtod_r+0xd52>
  40cd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cd0a:	9a08      	ldr	r2, [sp, #32]
  40cd0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cd10:	2b00      	cmp	r3, #0
  40cd12:	d078      	beq.n	40ce06 <_strtod_r+0xeae>
  40cd14:	f7ff f900 	bl	40bf18 <sulp>
  40cd18:	4602      	mov	r2, r0
  40cd1a:	460b      	mov	r3, r1
  40cd1c:	4640      	mov	r0, r8
  40cd1e:	4649      	mov	r1, r9
  40cd20:	f7fd fe36 	bl	40a990 <__adddf3>
  40cd24:	4680      	mov	r8, r0
  40cd26:	4689      	mov	r9, r1
  40cd28:	e7bf      	b.n	40ccaa <_strtod_r+0xd52>
  40cd2a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 40ce60 <_strtod_r+0xf08>
  40cd2e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  40cd32:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 40ce68 <_strtod_r+0xf10>
  40cd36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40cd3a:	e4b0      	b.n	40c69e <_strtod_r+0x746>
  40cd3c:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  40cd40:	9303      	str	r3, [sp, #12]
  40cd42:	f7ff bb01 	b.w	40c348 <_strtod_r+0x3f0>
  40cd46:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
  40cd4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cd4c:	2000      	movs	r0, #0
  40cd4e:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
  40cd52:	e4b5      	b.n	40c6c0 <_strtod_r+0x768>
  40cd54:	1c6b      	adds	r3, r5, #1
  40cd56:	9319      	str	r3, [sp, #100]	; 0x64
  40cd58:	e56b      	b.n	40c832 <_strtod_r+0x8da>
  40cd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cd5e:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40cd62:	460d      	mov	r5, r1
  40cd64:	2b00      	cmp	r3, #0
  40cd66:	d1c9      	bne.n	40ccfc <_strtod_r+0xda4>
  40cd68:	9b02      	ldr	r3, [sp, #8]
  40cd6a:	2b00      	cmp	r3, #0
  40cd6c:	d1c6      	bne.n	40ccfc <_strtod_r+0xda4>
  40cd6e:	e78a      	b.n	40cc86 <_strtod_r+0xd2e>
  40cd70:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cd72:	9a02      	ldr	r2, [sp, #8]
  40cd74:	4213      	tst	r3, r2
  40cd76:	d098      	beq.n	40ccaa <_strtod_r+0xd52>
  40cd78:	e7c6      	b.n	40cd08 <_strtod_r+0xdb0>
  40cd7a:	2322      	movs	r3, #34	; 0x22
  40cd7c:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cd7e:	f8ca 3000 	str.w	r3, [sl]
  40cd82:	e573      	b.n	40c86c <_strtod_r+0x914>
  40cd84:	f04f 0b00 	mov.w	fp, #0
  40cd88:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 40ce88 <_strtod_r+0xf30>
  40cd8c:	e4d7      	b.n	40c73e <_strtod_r+0x7e6>
  40cd8e:	2e00      	cmp	r6, #0
  40cd90:	bfd8      	it	le
  40cd92:	9308      	strle	r3, [sp, #32]
  40cd94:	f73f ae4f 	bgt.w	40ca36 <_strtod_r+0xade>
  40cd98:	e67a      	b.n	40ca90 <_strtod_r+0xb38>
  40cd9a:	a819      	add	r0, sp, #100	; 0x64
  40cd9c:	4938      	ldr	r1, [pc, #224]	; (40ce80 <_strtod_r+0xf28>)
  40cd9e:	aa1c      	add	r2, sp, #112	; 0x70
  40cda0:	f004 fa52 	bl	411248 <__hexnan>
  40cda4:	2805      	cmp	r0, #5
  40cda6:	f47f ad1a 	bne.w	40c7de <_strtod_r+0x886>
  40cdaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40cdac:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40cdb0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40cdb4:	9303      	str	r3, [sp, #12]
  40cdb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40cdb8:	9302      	str	r3, [sp, #8]
  40cdba:	f7ff b9b6 	b.w	40c12a <_strtod_r+0x1d2>
  40cdbe:	9b08      	ldr	r3, [sp, #32]
  40cdc0:	9902      	ldr	r1, [sp, #8]
  40cdc2:	b1eb      	cbz	r3, 40ce00 <_strtod_r+0xea8>
  40cdc4:	4b2b      	ldr	r3, [pc, #172]	; (40ce74 <_strtod_r+0xf1c>)
  40cdc6:	4013      	ands	r3, r2
  40cdc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40cdcc:	d818      	bhi.n	40ce00 <_strtod_r+0xea8>
  40cdce:	0d1b      	lsrs	r3, r3, #20
  40cdd0:	f04f 30ff 	mov.w	r0, #4294967295
  40cdd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40cdd8:	fa00 f303 	lsl.w	r3, r0, r3
  40cddc:	4299      	cmp	r1, r3
  40cdde:	d18d      	bne.n	40ccfc <_strtod_r+0xda4>
  40cde0:	4b28      	ldr	r3, [pc, #160]	; (40ce84 <_strtod_r+0xf2c>)
  40cde2:	429a      	cmp	r2, r3
  40cde4:	d102      	bne.n	40cdec <_strtod_r+0xe94>
  40cde6:	3101      	adds	r1, #1
  40cde8:	f43f ad36 	beq.w	40c858 <_strtod_r+0x900>
  40cdec:	4b21      	ldr	r3, [pc, #132]	; (40ce74 <_strtod_r+0xf1c>)
  40cdee:	4013      	ands	r3, r2
  40cdf0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40cdf4:	9303      	str	r3, [sp, #12]
  40cdf6:	2300      	movs	r3, #0
  40cdf8:	9302      	str	r3, [sp, #8]
  40cdfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40cdfe:	e754      	b.n	40ccaa <_strtod_r+0xd52>
  40ce00:	f04f 33ff 	mov.w	r3, #4294967295
  40ce04:	e7ea      	b.n	40cddc <_strtod_r+0xe84>
  40ce06:	f7ff f887 	bl	40bf18 <sulp>
  40ce0a:	4602      	mov	r2, r0
  40ce0c:	460b      	mov	r3, r1
  40ce0e:	4640      	mov	r0, r8
  40ce10:	4649      	mov	r1, r9
  40ce12:	f7fd fdbb 	bl	40a98c <__aeabi_dsub>
  40ce16:	2200      	movs	r2, #0
  40ce18:	2300      	movs	r3, #0
  40ce1a:	4680      	mov	r8, r0
  40ce1c:	4689      	mov	r9, r1
  40ce1e:	f7fe f9d1 	bl	40b1c4 <__aeabi_dcmpeq>
  40ce22:	2800      	cmp	r0, #0
  40ce24:	f47f ae95 	bne.w	40cb52 <_strtod_r+0xbfa>
  40ce28:	e73f      	b.n	40ccaa <_strtod_r+0xd52>
  40ce2a:	4b12      	ldr	r3, [pc, #72]	; (40ce74 <_strtod_r+0xf1c>)
  40ce2c:	402b      	ands	r3, r5
  40ce2e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40ce32:	f73f af2e 	bgt.w	40cc92 <_strtod_r+0xd3a>
  40ce36:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  40ce3a:	f73f af38 	bgt.w	40ccae <_strtod_r+0xd56>
  40ce3e:	e688      	b.n	40cb52 <_strtod_r+0xbfa>
  40ce40:	f04f 32ff 	mov.w	r2, #4294967295
  40ce44:	fa02 f303 	lsl.w	r3, r2, r3
  40ce48:	9a02      	ldr	r2, [sp, #8]
  40ce4a:	401a      	ands	r2, r3
  40ce4c:	9202      	str	r2, [sp, #8]
  40ce4e:	e61f      	b.n	40ca90 <_strtod_r+0xb38>
  40ce50:	3b20      	subs	r3, #32
  40ce52:	f04f 31ff 	mov.w	r1, #4294967295
  40ce56:	fa01 f303 	lsl.w	r3, r1, r3
  40ce5a:	4013      	ands	r3, r2
  40ce5c:	9303      	str	r3, [sp, #12]
  40ce5e:	e617      	b.n	40ca90 <_strtod_r+0xb38>
  40ce60:	00000000 	.word	0x00000000
  40ce64:	bfe00000 	.word	0xbfe00000
  40ce68:	00000000 	.word	0x00000000
  40ce6c:	3fe00000 	.word	0x3fe00000
  40ce70:	00414078 	.word	0x00414078
  40ce74:	7ff00000 	.word	0x7ff00000
  40ce78:	39500000 	.word	0x39500000
  40ce7c:	000fffff 	.word	0x000fffff
  40ce80:	00413d98 	.word	0x00413d98
  40ce84:	7fefffff 	.word	0x7fefffff
  40ce88:	00414150 	.word	0x00414150

0040ce8c <strtof>:
  40ce8c:	b508      	push	{r3, lr}
  40ce8e:	4b0f      	ldr	r3, [pc, #60]	; (40cecc <strtof+0x40>)
  40ce90:	460a      	mov	r2, r1
  40ce92:	4601      	mov	r1, r0
  40ce94:	6818      	ldr	r0, [r3, #0]
  40ce96:	ed2d 8b02 	vpush	{d8}
  40ce9a:	f7ff f85d 	bl	40bf58 <_strtod_r>
  40ce9e:	eeb0 8a40 	vmov.f32	s16, s0
  40cea2:	eef0 8a60 	vmov.f32	s17, s1
  40cea6:	f7fd fcab 	bl	40a800 <__fpclassifyd>
  40ceaa:	b140      	cbz	r0, 40cebe <strtof+0x32>
  40ceac:	ec51 0b18 	vmov	r0, r1, d8
  40ceb0:	f7fe f9e2 	bl	40b278 <__aeabi_d2f>
  40ceb4:	ee00 0a10 	vmov	s0, r0
  40ceb8:	ecbd 8b02 	vpop	{d8}
  40cebc:	bd08      	pop	{r3, pc}
  40cebe:	ecbd 8b02 	vpop	{d8}
  40cec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40cec6:	f005 ba11 	b.w	4122ec <nanf>
  40ceca:	bf00      	nop
  40cecc:	204004d8 	.word	0x204004d8

0040ced0 <strtok>:
  40ced0:	4a02      	ldr	r2, [pc, #8]	; (40cedc <strtok+0xc>)
  40ced2:	2301      	movs	r3, #1
  40ced4:	6812      	ldr	r2, [r2, #0]
  40ced6:	325c      	adds	r2, #92	; 0x5c
  40ced8:	f000 b802 	b.w	40cee0 <__strtok_r>
  40cedc:	204004d8 	.word	0x204004d8

0040cee0 <__strtok_r>:
  40cee0:	b4f0      	push	{r4, r5, r6, r7}
  40cee2:	b320      	cbz	r0, 40cf2e <__strtok_r+0x4e>
  40cee4:	4607      	mov	r7, r0
  40cee6:	460d      	mov	r5, r1
  40cee8:	f817 6b01 	ldrb.w	r6, [r7], #1
  40ceec:	e001      	b.n	40cef2 <__strtok_r+0x12>
  40ceee:	42a6      	cmp	r6, r4
  40cef0:	d016      	beq.n	40cf20 <__strtok_r+0x40>
  40cef2:	f815 4b01 	ldrb.w	r4, [r5], #1
  40cef6:	2c00      	cmp	r4, #0
  40cef8:	d1f9      	bne.n	40ceee <__strtok_r+0xe>
  40cefa:	b1ee      	cbz	r6, 40cf38 <__strtok_r+0x58>
  40cefc:	463e      	mov	r6, r7
  40cefe:	460c      	mov	r4, r1
  40cf00:	f816 5b01 	ldrb.w	r5, [r6], #1
  40cf04:	e000      	b.n	40cf08 <__strtok_r+0x28>
  40cf06:	b173      	cbz	r3, 40cf26 <__strtok_r+0x46>
  40cf08:	f814 3b01 	ldrb.w	r3, [r4], #1
  40cf0c:	42ab      	cmp	r3, r5
  40cf0e:	d1fa      	bne.n	40cf06 <__strtok_r+0x26>
  40cf10:	b15d      	cbz	r5, 40cf2a <__strtok_r+0x4a>
  40cf12:	2300      	movs	r3, #0
  40cf14:	703b      	strb	r3, [r7, #0]
  40cf16:	6016      	str	r6, [r2, #0]
  40cf18:	4606      	mov	r6, r0
  40cf1a:	4630      	mov	r0, r6
  40cf1c:	bcf0      	pop	{r4, r5, r6, r7}
  40cf1e:	4770      	bx	lr
  40cf20:	b163      	cbz	r3, 40cf3c <__strtok_r+0x5c>
  40cf22:	4638      	mov	r0, r7
  40cf24:	e7de      	b.n	40cee4 <__strtok_r+0x4>
  40cf26:	4637      	mov	r7, r6
  40cf28:	e7e8      	b.n	40cefc <__strtok_r+0x1c>
  40cf2a:	462e      	mov	r6, r5
  40cf2c:	e7f3      	b.n	40cf16 <__strtok_r+0x36>
  40cf2e:	6810      	ldr	r0, [r2, #0]
  40cf30:	2800      	cmp	r0, #0
  40cf32:	d1d7      	bne.n	40cee4 <__strtok_r+0x4>
  40cf34:	4606      	mov	r6, r0
  40cf36:	e7f0      	b.n	40cf1a <__strtok_r+0x3a>
  40cf38:	6016      	str	r6, [r2, #0]
  40cf3a:	e7ee      	b.n	40cf1a <__strtok_r+0x3a>
  40cf3c:	6017      	str	r7, [r2, #0]
  40cf3e:	4606      	mov	r6, r0
  40cf40:	7003      	strb	r3, [r0, #0]
  40cf42:	e7ea      	b.n	40cf1a <__strtok_r+0x3a>

0040cf44 <_strtol_r>:
  40cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cf48:	4c44      	ldr	r4, [pc, #272]	; (40d05c <_strtol_r+0x118>)
  40cf4a:	4683      	mov	fp, r0
  40cf4c:	460e      	mov	r6, r1
  40cf4e:	f8d4 e000 	ldr.w	lr, [r4]
  40cf52:	e000      	b.n	40cf56 <_strtol_r+0x12>
  40cf54:	4626      	mov	r6, r4
  40cf56:	4634      	mov	r4, r6
  40cf58:	f814 5b01 	ldrb.w	r5, [r4], #1
  40cf5c:	eb0e 0005 	add.w	r0, lr, r5
  40cf60:	7840      	ldrb	r0, [r0, #1]
  40cf62:	f000 0008 	and.w	r0, r0, #8
  40cf66:	f000 09ff 	and.w	r9, r0, #255	; 0xff
  40cf6a:	2800      	cmp	r0, #0
  40cf6c:	d1f2      	bne.n	40cf54 <_strtol_r+0x10>
  40cf6e:	2d2d      	cmp	r5, #45	; 0x2d
  40cf70:	d052      	beq.n	40d018 <_strtol_r+0xd4>
  40cf72:	2d2b      	cmp	r5, #43	; 0x2b
  40cf74:	d064      	beq.n	40d040 <_strtol_r+0xfc>
  40cf76:	f033 0010 	bics.w	r0, r3, #16
  40cf7a:	d10b      	bne.n	40cf94 <_strtol_r+0x50>
  40cf7c:	fab3 f083 	clz	r0, r3
  40cf80:	2d30      	cmp	r5, #48	; 0x30
  40cf82:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40cf86:	d05e      	beq.n	40d046 <_strtol_r+0x102>
  40cf88:	b120      	cbz	r0, 40cf94 <_strtol_r+0x50>
  40cf8a:	230a      	movs	r3, #10
  40cf8c:	4618      	mov	r0, r3
  40cf8e:	e002      	b.n	40cf96 <_strtol_r+0x52>
  40cf90:	b100      	cbz	r0, 40cf94 <_strtol_r+0x50>
  40cf92:	2308      	movs	r3, #8
  40cf94:	4618      	mov	r0, r3
  40cf96:	f1b9 0f00 	cmp.w	r9, #0
  40cf9a:	f04f 0700 	mov.w	r7, #0
  40cf9e:	bf14      	ite	ne
  40cfa0:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40cfa4:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  40cfa8:	46bc      	mov	ip, r7
  40cfaa:	fbba f8f0 	udiv	r8, sl, r0
  40cfae:	fb00 aa18 	mls	sl, r0, r8, sl
  40cfb2:	e00e      	b.n	40cfd2 <_strtol_r+0x8e>
  40cfb4:	3d30      	subs	r5, #48	; 0x30
  40cfb6:	42ab      	cmp	r3, r5
  40cfb8:	dd1b      	ble.n	40cff2 <_strtol_r+0xae>
  40cfba:	2f00      	cmp	r7, #0
  40cfbc:	db05      	blt.n	40cfca <_strtol_r+0x86>
  40cfbe:	45c4      	cmp	ip, r8
  40cfc0:	d803      	bhi.n	40cfca <_strtol_r+0x86>
  40cfc2:	4555      	cmp	r5, sl
  40cfc4:	dd22      	ble.n	40d00c <_strtol_r+0xc8>
  40cfc6:	45c4      	cmp	ip, r8
  40cfc8:	d120      	bne.n	40d00c <_strtol_r+0xc8>
  40cfca:	f04f 37ff 	mov.w	r7, #4294967295
  40cfce:	f814 5b01 	ldrb.w	r5, [r4], #1
  40cfd2:	eb0e 0605 	add.w	r6, lr, r5
  40cfd6:	7876      	ldrb	r6, [r6, #1]
  40cfd8:	f016 0f04 	tst.w	r6, #4
  40cfdc:	d1ea      	bne.n	40cfb4 <_strtol_r+0x70>
  40cfde:	f016 0603 	ands.w	r6, r6, #3
  40cfe2:	d006      	beq.n	40cff2 <_strtol_r+0xae>
  40cfe4:	2e01      	cmp	r6, #1
  40cfe6:	bf0c      	ite	eq
  40cfe8:	2637      	moveq	r6, #55	; 0x37
  40cfea:	2657      	movne	r6, #87	; 0x57
  40cfec:	1bad      	subs	r5, r5, r6
  40cfee:	42ab      	cmp	r3, r5
  40cff0:	dce3      	bgt.n	40cfba <_strtol_r+0x76>
  40cff2:	1c7b      	adds	r3, r7, #1
  40cff4:	d015      	beq.n	40d022 <_strtol_r+0xde>
  40cff6:	f1c9 0000 	rsb	r0, r9, #0
  40cffa:	ea8c 0000 	eor.w	r0, ip, r0
  40cffe:	4448      	add	r0, r9
  40d000:	b142      	cbz	r2, 40d014 <_strtol_r+0xd0>
  40d002:	b107      	cbz	r7, 40d006 <_strtol_r+0xc2>
  40d004:	1e61      	subs	r1, r4, #1
  40d006:	6011      	str	r1, [r2, #0]
  40d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d00c:	fb00 5c0c 	mla	ip, r0, ip, r5
  40d010:	2701      	movs	r7, #1
  40d012:	e7dc      	b.n	40cfce <_strtol_r+0x8a>
  40d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d018:	1cb4      	adds	r4, r6, #2
  40d01a:	7875      	ldrb	r5, [r6, #1]
  40d01c:	f04f 0901 	mov.w	r9, #1
  40d020:	e7a9      	b.n	40cf76 <_strtol_r+0x32>
  40d022:	f1b9 0f00 	cmp.w	r9, #0
  40d026:	f04f 0322 	mov.w	r3, #34	; 0x22
  40d02a:	bf14      	ite	ne
  40d02c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40d030:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d034:	f8cb 3000 	str.w	r3, [fp]
  40d038:	2a00      	cmp	r2, #0
  40d03a:	d1e3      	bne.n	40d004 <_strtol_r+0xc0>
  40d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d040:	1cb4      	adds	r4, r6, #2
  40d042:	7875      	ldrb	r5, [r6, #1]
  40d044:	e797      	b.n	40cf76 <_strtol_r+0x32>
  40d046:	7826      	ldrb	r6, [r4, #0]
  40d048:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  40d04c:	2e58      	cmp	r6, #88	; 0x58
  40d04e:	d19f      	bne.n	40cf90 <_strtol_r+0x4c>
  40d050:	2310      	movs	r3, #16
  40d052:	7865      	ldrb	r5, [r4, #1]
  40d054:	3402      	adds	r4, #2
  40d056:	4618      	mov	r0, r3
  40d058:	e79d      	b.n	40cf96 <_strtol_r+0x52>
  40d05a:	bf00      	nop
  40d05c:	204008ec 	.word	0x204008ec

0040d060 <strtol>:
  40d060:	b430      	push	{r4, r5}
  40d062:	460d      	mov	r5, r1
  40d064:	4c03      	ldr	r4, [pc, #12]	; (40d074 <strtol+0x14>)
  40d066:	4613      	mov	r3, r2
  40d068:	4601      	mov	r1, r0
  40d06a:	462a      	mov	r2, r5
  40d06c:	6820      	ldr	r0, [r4, #0]
  40d06e:	bc30      	pop	{r4, r5}
  40d070:	f7ff bf68 	b.w	40cf44 <_strtol_r>
  40d074:	204004d8 	.word	0x204004d8

0040d078 <_svfprintf_r>:
  40d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d07c:	b0bf      	sub	sp, #252	; 0xfc
  40d07e:	4689      	mov	r9, r1
  40d080:	9204      	str	r2, [sp, #16]
  40d082:	9309      	str	r3, [sp, #36]	; 0x24
  40d084:	9005      	str	r0, [sp, #20]
  40d086:	f004 f9a9 	bl	4113dc <_localeconv_r>
  40d08a:	6803      	ldr	r3, [r0, #0]
  40d08c:	4618      	mov	r0, r3
  40d08e:	9312      	str	r3, [sp, #72]	; 0x48
  40d090:	f7fe ff14 	bl	40bebc <strlen>
  40d094:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40d098:	9013      	str	r0, [sp, #76]	; 0x4c
  40d09a:	061a      	lsls	r2, r3, #24
  40d09c:	d504      	bpl.n	40d0a8 <_svfprintf_r+0x30>
  40d09e:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40d0a2:	2b00      	cmp	r3, #0
  40d0a4:	f001 806b 	beq.w	40e17e <_svfprintf_r+0x1106>
  40d0a8:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
  40d0ac:	2300      	movs	r3, #0
  40d0ae:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 40d2e8 <_svfprintf_r+0x270>
  40d0b2:	46c3      	mov	fp, r8
  40d0b4:	9310      	str	r3, [sp, #64]	; 0x40
  40d0b6:	9323      	str	r3, [sp, #140]	; 0x8c
  40d0b8:	9311      	str	r3, [sp, #68]	; 0x44
  40d0ba:	9315      	str	r3, [sp, #84]	; 0x54
  40d0bc:	9306      	str	r3, [sp, #24]
  40d0be:	9322      	str	r3, [sp, #136]	; 0x88
  40d0c0:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
  40d0c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40d0c8:	9a04      	ldr	r2, [sp, #16]
  40d0ca:	7813      	ldrb	r3, [r2, #0]
  40d0cc:	2b25      	cmp	r3, #37	; 0x25
  40d0ce:	f000 80a5 	beq.w	40d21c <_svfprintf_r+0x1a4>
  40d0d2:	b90b      	cbnz	r3, 40d0d8 <_svfprintf_r+0x60>
  40d0d4:	e0a2      	b.n	40d21c <_svfprintf_r+0x1a4>
  40d0d6:	b11b      	cbz	r3, 40d0e0 <_svfprintf_r+0x68>
  40d0d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40d0dc:	2b25      	cmp	r3, #37	; 0x25
  40d0de:	d1fa      	bne.n	40d0d6 <_svfprintf_r+0x5e>
  40d0e0:	9904      	ldr	r1, [sp, #16]
  40d0e2:	4614      	mov	r4, r2
  40d0e4:	1a55      	subs	r5, r2, r1
  40d0e6:	d010      	beq.n	40d10a <_svfprintf_r+0x92>
  40d0e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d0ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d0ec:	3301      	adds	r3, #1
  40d0ee:	f8cb 1000 	str.w	r1, [fp]
  40d0f2:	442a      	add	r2, r5
  40d0f4:	f8cb 5004 	str.w	r5, [fp, #4]
  40d0f8:	2b07      	cmp	r3, #7
  40d0fa:	9322      	str	r3, [sp, #136]	; 0x88
  40d0fc:	9223      	str	r2, [sp, #140]	; 0x8c
  40d0fe:	dc72      	bgt.n	40d1e6 <_svfprintf_r+0x16e>
  40d100:	f10b 0b08 	add.w	fp, fp, #8
  40d104:	9b06      	ldr	r3, [sp, #24]
  40d106:	442b      	add	r3, r5
  40d108:	9306      	str	r3, [sp, #24]
  40d10a:	7823      	ldrb	r3, [r4, #0]
  40d10c:	2b00      	cmp	r3, #0
  40d10e:	d072      	beq.n	40d1f6 <_svfprintf_r+0x17e>
  40d110:	2300      	movs	r3, #0
  40d112:	1c61      	adds	r1, r4, #1
  40d114:	7866      	ldrb	r6, [r4, #1]
  40d116:	f04f 37ff 	mov.w	r7, #4294967295
  40d11a:	461a      	mov	r2, r3
  40d11c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40d120:	9308      	str	r3, [sp, #32]
  40d122:	9302      	str	r3, [sp, #8]
  40d124:	1c4b      	adds	r3, r1, #1
  40d126:	f1a6 0120 	sub.w	r1, r6, #32
  40d12a:	2958      	cmp	r1, #88	; 0x58
  40d12c:	f200 83af 	bhi.w	40d88e <_svfprintf_r+0x816>
  40d130:	e8df f011 	tbh	[pc, r1, lsl #1]
  40d134:	03ad0314 	.word	0x03ad0314
  40d138:	031b03ad 	.word	0x031b03ad
  40d13c:	03ad03ad 	.word	0x03ad03ad
  40d140:	03ad03ad 	.word	0x03ad03ad
  40d144:	03ad03ad 	.word	0x03ad03ad
  40d148:	01fa023c 	.word	0x01fa023c
  40d14c:	01e203ad 	.word	0x01e203ad
  40d150:	03ad01fe 	.word	0x03ad01fe
  40d154:	03290322 	.word	0x03290322
  40d158:	03290329 	.word	0x03290329
  40d15c:	03290329 	.word	0x03290329
  40d160:	03290329 	.word	0x03290329
  40d164:	03290329 	.word	0x03290329
  40d168:	03ad03ad 	.word	0x03ad03ad
  40d16c:	03ad03ad 	.word	0x03ad03ad
  40d170:	03ad03ad 	.word	0x03ad03ad
  40d174:	03ad03ad 	.word	0x03ad03ad
  40d178:	03ad03ad 	.word	0x03ad03ad
  40d17c:	035f0338 	.word	0x035f0338
  40d180:	035f03ad 	.word	0x035f03ad
  40d184:	03ad03ad 	.word	0x03ad03ad
  40d188:	03ad03ad 	.word	0x03ad03ad
  40d18c:	03ad02fa 	.word	0x03ad02fa
  40d190:	028e03ad 	.word	0x028e03ad
  40d194:	03ad03ad 	.word	0x03ad03ad
  40d198:	03ad03ad 	.word	0x03ad03ad
  40d19c:	02ae03ad 	.word	0x02ae03ad
  40d1a0:	03ad03ad 	.word	0x03ad03ad
  40d1a4:	03ad02c3 	.word	0x03ad02c3
  40d1a8:	03ad03ad 	.word	0x03ad03ad
  40d1ac:	03ad03ad 	.word	0x03ad03ad
  40d1b0:	03ad03ad 	.word	0x03ad03ad
  40d1b4:	03ad03ad 	.word	0x03ad03ad
  40d1b8:	02e703ad 	.word	0x02e703ad
  40d1bc:	035f0217 	.word	0x035f0217
  40d1c0:	035f035f 	.word	0x035f035f
  40d1c4:	0217024a 	.word	0x0217024a
  40d1c8:	03ad03ad 	.word	0x03ad03ad
  40d1cc:	03ad0232 	.word	0x03ad0232
  40d1d0:	01e90258 	.word	0x01e90258
  40d1d4:	02510397 	.word	0x02510397
  40d1d8:	026a03ad 	.word	0x026a03ad
  40d1dc:	007603ad 	.word	0x007603ad
  40d1e0:	03ad03ad 	.word	0x03ad03ad
  40d1e4:	0301      	.short	0x0301
  40d1e6:	9805      	ldr	r0, [sp, #20]
  40d1e8:	4649      	mov	r1, r9
  40d1ea:	aa21      	add	r2, sp, #132	; 0x84
  40d1ec:	f005 f95e 	bl	4124ac <__ssprint_r>
  40d1f0:	b940      	cbnz	r0, 40d204 <_svfprintf_r+0x18c>
  40d1f2:	46c3      	mov	fp, r8
  40d1f4:	e786      	b.n	40d104 <_svfprintf_r+0x8c>
  40d1f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d1f8:	b123      	cbz	r3, 40d204 <_svfprintf_r+0x18c>
  40d1fa:	9805      	ldr	r0, [sp, #20]
  40d1fc:	4649      	mov	r1, r9
  40d1fe:	aa21      	add	r2, sp, #132	; 0x84
  40d200:	f005 f954 	bl	4124ac <__ssprint_r>
  40d204:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40d208:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d20c:	9b06      	ldr	r3, [sp, #24]
  40d20e:	bf18      	it	ne
  40d210:	f04f 33ff 	movne.w	r3, #4294967295
  40d214:	4618      	mov	r0, r3
  40d216:	b03f      	add	sp, #252	; 0xfc
  40d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d21c:	9c04      	ldr	r4, [sp, #16]
  40d21e:	e774      	b.n	40d10a <_svfprintf_r+0x92>
  40d220:	9304      	str	r3, [sp, #16]
  40d222:	9b02      	ldr	r3, [sp, #8]
  40d224:	069c      	lsls	r4, r3, #26
  40d226:	f140 823c 	bpl.w	40d6a2 <_svfprintf_r+0x62a>
  40d22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d22c:	2301      	movs	r3, #1
  40d22e:	3207      	adds	r2, #7
  40d230:	f022 0207 	bic.w	r2, r2, #7
  40d234:	f102 0108 	add.w	r1, r2, #8
  40d238:	e9d2 4500 	ldrd	r4, r5, [r2]
  40d23c:	9109      	str	r1, [sp, #36]	; 0x24
  40d23e:	2200      	movs	r2, #0
  40d240:	970c      	str	r7, [sp, #48]	; 0x30
  40d242:	4694      	mov	ip, r2
  40d244:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d248:	2f00      	cmp	r7, #0
  40d24a:	db03      	blt.n	40d254 <_svfprintf_r+0x1dc>
  40d24c:	9a02      	ldr	r2, [sp, #8]
  40d24e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40d252:	9202      	str	r2, [sp, #8]
  40d254:	2f00      	cmp	r7, #0
  40d256:	f040 83a9 	bne.w	40d9ac <_svfprintf_r+0x934>
  40d25a:	ea54 0205 	orrs.w	r2, r4, r5
  40d25e:	bf14      	ite	ne
  40d260:	2201      	movne	r2, #1
  40d262:	2200      	moveq	r2, #0
  40d264:	2a00      	cmp	r2, #0
  40d266:	f040 83a1 	bne.w	40d9ac <_svfprintf_r+0x934>
  40d26a:	2b00      	cmp	r3, #0
  40d26c:	f040 845c 	bne.w	40db28 <_svfprintf_r+0xab0>
  40d270:	9a02      	ldr	r2, [sp, #8]
  40d272:	07d2      	lsls	r2, r2, #31
  40d274:	f140 84e9 	bpl.w	40dc4a <_svfprintf_r+0xbd2>
  40d278:	f10d 0af8 	add.w	sl, sp, #248	; 0xf8
  40d27c:	2330      	movs	r3, #48	; 0x30
  40d27e:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40d282:	ebca 0308 	rsb	r3, sl, r8
  40d286:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40d28a:	9307      	str	r3, [sp, #28]
  40d28c:	9a07      	ldr	r2, [sp, #28]
  40d28e:	463b      	mov	r3, r7
  40d290:	4297      	cmp	r7, r2
  40d292:	bfb8      	it	lt
  40d294:	4613      	movlt	r3, r2
  40d296:	9303      	str	r3, [sp, #12]
  40d298:	2300      	movs	r3, #0
  40d29a:	930d      	str	r3, [sp, #52]	; 0x34
  40d29c:	f1bc 0f00 	cmp.w	ip, #0
  40d2a0:	d002      	beq.n	40d2a8 <_svfprintf_r+0x230>
  40d2a2:	9b03      	ldr	r3, [sp, #12]
  40d2a4:	3301      	adds	r3, #1
  40d2a6:	9303      	str	r3, [sp, #12]
  40d2a8:	9b02      	ldr	r3, [sp, #8]
  40d2aa:	f013 0302 	ands.w	r3, r3, #2
  40d2ae:	930a      	str	r3, [sp, #40]	; 0x28
  40d2b0:	d002      	beq.n	40d2b8 <_svfprintf_r+0x240>
  40d2b2:	9b03      	ldr	r3, [sp, #12]
  40d2b4:	3302      	adds	r3, #2
  40d2b6:	9303      	str	r3, [sp, #12]
  40d2b8:	9b02      	ldr	r3, [sp, #8]
  40d2ba:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40d2be:	f040 8305 	bne.w	40d8cc <_svfprintf_r+0x854>
  40d2c2:	9b08      	ldr	r3, [sp, #32]
  40d2c4:	9a03      	ldr	r2, [sp, #12]
  40d2c6:	1a9c      	subs	r4, r3, r2
  40d2c8:	2c00      	cmp	r4, #0
  40d2ca:	f340 82ff 	ble.w	40d8cc <_svfprintf_r+0x854>
  40d2ce:	2c10      	cmp	r4, #16
  40d2d0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40d2d2:	f340 87bf 	ble.w	40e254 <_svfprintf_r+0x11dc>
  40d2d6:	4f06      	ldr	r7, [pc, #24]	; (40d2f0 <_svfprintf_r+0x278>)
  40d2d8:	f04f 0a10 	mov.w	sl, #16
  40d2dc:	9514      	str	r5, [sp, #80]	; 0x50
  40d2de:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d2e0:	463d      	mov	r5, r7
  40d2e2:	4627      	mov	r7, r4
  40d2e4:	9c05      	ldr	r4, [sp, #20]
  40d2e6:	e008      	b.n	40d2fa <_svfprintf_r+0x282>
	...
  40d2f0:	00413de0 	.word	0x00413de0
  40d2f4:	3f10      	subs	r7, #16
  40d2f6:	2f10      	cmp	r7, #16
  40d2f8:	dd19      	ble.n	40d32e <_svfprintf_r+0x2b6>
  40d2fa:	3201      	adds	r2, #1
  40d2fc:	3110      	adds	r1, #16
  40d2fe:	f8cb 5000 	str.w	r5, [fp]
  40d302:	f10b 0b08 	add.w	fp, fp, #8
  40d306:	2a07      	cmp	r2, #7
  40d308:	f84b ac04 	str.w	sl, [fp, #-4]
  40d30c:	9123      	str	r1, [sp, #140]	; 0x8c
  40d30e:	9222      	str	r2, [sp, #136]	; 0x88
  40d310:	ddf0      	ble.n	40d2f4 <_svfprintf_r+0x27c>
  40d312:	4620      	mov	r0, r4
  40d314:	4649      	mov	r1, r9
  40d316:	aa21      	add	r2, sp, #132	; 0x84
  40d318:	46c3      	mov	fp, r8
  40d31a:	f005 f8c7 	bl	4124ac <__ssprint_r>
  40d31e:	2800      	cmp	r0, #0
  40d320:	f47f af70 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d324:	3f10      	subs	r7, #16
  40d326:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40d328:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d32a:	2f10      	cmp	r7, #16
  40d32c:	dce5      	bgt.n	40d2fa <_svfprintf_r+0x282>
  40d32e:	463c      	mov	r4, r7
  40d330:	462f      	mov	r7, r5
  40d332:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d334:	3201      	adds	r2, #1
  40d336:	eb04 0a01 	add.w	sl, r4, r1
  40d33a:	f8cb 7000 	str.w	r7, [fp]
  40d33e:	2a07      	cmp	r2, #7
  40d340:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d344:	9222      	str	r2, [sp, #136]	; 0x88
  40d346:	f8cb 4004 	str.w	r4, [fp, #4]
  40d34a:	f300 82b4 	bgt.w	40d8b6 <_svfprintf_r+0x83e>
  40d34e:	f10b 0b08 	add.w	fp, fp, #8
  40d352:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d356:	f1bc 0f00 	cmp.w	ip, #0
  40d35a:	d012      	beq.n	40d382 <_svfprintf_r+0x30a>
  40d35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d35e:	2201      	movs	r2, #1
  40d360:	f10a 0a01 	add.w	sl, sl, #1
  40d364:	f10d 0167 	add.w	r1, sp, #103	; 0x67
  40d368:	4413      	add	r3, r2
  40d36a:	f8cb 2004 	str.w	r2, [fp, #4]
  40d36e:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d372:	2b07      	cmp	r3, #7
  40d374:	f8cb 1000 	str.w	r1, [fp]
  40d378:	9322      	str	r3, [sp, #136]	; 0x88
  40d37a:	f300 83e6 	bgt.w	40db4a <_svfprintf_r+0xad2>
  40d37e:	f10b 0b08 	add.w	fp, fp, #8
  40d382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d384:	b18b      	cbz	r3, 40d3aa <_svfprintf_r+0x332>
  40d386:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d388:	f10a 0a02 	add.w	sl, sl, #2
  40d38c:	a91a      	add	r1, sp, #104	; 0x68
  40d38e:	2202      	movs	r2, #2
  40d390:	3301      	adds	r3, #1
  40d392:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d396:	f8cb 1000 	str.w	r1, [fp]
  40d39a:	2b07      	cmp	r3, #7
  40d39c:	9322      	str	r3, [sp, #136]	; 0x88
  40d39e:	f8cb 2004 	str.w	r2, [fp, #4]
  40d3a2:	f300 83de 	bgt.w	40db62 <_svfprintf_r+0xaea>
  40d3a6:	f10b 0b08 	add.w	fp, fp, #8
  40d3aa:	2d80      	cmp	r5, #128	; 0x80
  40d3ac:	f000 831b 	beq.w	40d9e6 <_svfprintf_r+0x96e>
  40d3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d3b2:	9a07      	ldr	r2, [sp, #28]
  40d3b4:	1a9f      	subs	r7, r3, r2
  40d3b6:	2f00      	cmp	r7, #0
  40d3b8:	dd35      	ble.n	40d426 <_svfprintf_r+0x3ae>
  40d3ba:	2f10      	cmp	r7, #16
  40d3bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d3be:	f340 85e9 	ble.w	40df94 <_svfprintf_r+0xf1c>
  40d3c2:	4653      	mov	r3, sl
  40d3c4:	2410      	movs	r4, #16
  40d3c6:	4db0      	ldr	r5, [pc, #704]	; (40d688 <_svfprintf_r+0x610>)
  40d3c8:	f8dd a014 	ldr.w	sl, [sp, #20]
  40d3cc:	e002      	b.n	40d3d4 <_svfprintf_r+0x35c>
  40d3ce:	3f10      	subs	r7, #16
  40d3d0:	2f10      	cmp	r7, #16
  40d3d2:	dd19      	ble.n	40d408 <_svfprintf_r+0x390>
  40d3d4:	3201      	adds	r2, #1
  40d3d6:	3310      	adds	r3, #16
  40d3d8:	f8cb 5000 	str.w	r5, [fp]
  40d3dc:	f10b 0b08 	add.w	fp, fp, #8
  40d3e0:	2a07      	cmp	r2, #7
  40d3e2:	f84b 4c04 	str.w	r4, [fp, #-4]
  40d3e6:	9323      	str	r3, [sp, #140]	; 0x8c
  40d3e8:	9222      	str	r2, [sp, #136]	; 0x88
  40d3ea:	ddf0      	ble.n	40d3ce <_svfprintf_r+0x356>
  40d3ec:	4650      	mov	r0, sl
  40d3ee:	4649      	mov	r1, r9
  40d3f0:	aa21      	add	r2, sp, #132	; 0x84
  40d3f2:	46c3      	mov	fp, r8
  40d3f4:	f005 f85a 	bl	4124ac <__ssprint_r>
  40d3f8:	2800      	cmp	r0, #0
  40d3fa:	f47f af03 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d3fe:	3f10      	subs	r7, #16
  40d400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d402:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d404:	2f10      	cmp	r7, #16
  40d406:	dce5      	bgt.n	40d3d4 <_svfprintf_r+0x35c>
  40d408:	469a      	mov	sl, r3
  40d40a:	3201      	adds	r2, #1
  40d40c:	44ba      	add	sl, r7
  40d40e:	f8cb 5000 	str.w	r5, [fp]
  40d412:	2a07      	cmp	r2, #7
  40d414:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d418:	9222      	str	r2, [sp, #136]	; 0x88
  40d41a:	f8cb 7004 	str.w	r7, [fp, #4]
  40d41e:	f300 8388 	bgt.w	40db32 <_svfprintf_r+0xaba>
  40d422:	f10b 0b08 	add.w	fp, fp, #8
  40d426:	9b02      	ldr	r3, [sp, #8]
  40d428:	05df      	lsls	r7, r3, #23
  40d42a:	f100 8252 	bmi.w	40d8d2 <_svfprintf_r+0x85a>
  40d42e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d430:	9907      	ldr	r1, [sp, #28]
  40d432:	3301      	adds	r3, #1
  40d434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d436:	448a      	add	sl, r1
  40d438:	f8cb 1004 	str.w	r1, [fp, #4]
  40d43c:	2b07      	cmp	r3, #7
  40d43e:	f8cb 2000 	str.w	r2, [fp]
  40d442:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d446:	9322      	str	r3, [sp, #136]	; 0x88
  40d448:	f300 8358 	bgt.w	40dafc <_svfprintf_r+0xa84>
  40d44c:	f10b 0b08 	add.w	fp, fp, #8
  40d450:	9b02      	ldr	r3, [sp, #8]
  40d452:	075a      	lsls	r2, r3, #29
  40d454:	d540      	bpl.n	40d4d8 <_svfprintf_r+0x460>
  40d456:	9b08      	ldr	r3, [sp, #32]
  40d458:	9a03      	ldr	r2, [sp, #12]
  40d45a:	1a9c      	subs	r4, r3, r2
  40d45c:	2c00      	cmp	r4, #0
  40d45e:	dd3b      	ble.n	40d4d8 <_svfprintf_r+0x460>
  40d460:	2c10      	cmp	r4, #16
  40d462:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d464:	f340 874e 	ble.w	40e304 <_svfprintf_r+0x128c>
  40d468:	2510      	movs	r5, #16
  40d46a:	4f88      	ldr	r7, [pc, #544]	; (40d68c <_svfprintf_r+0x614>)
  40d46c:	4652      	mov	r2, sl
  40d46e:	9e05      	ldr	r6, [sp, #20]
  40d470:	e002      	b.n	40d478 <_svfprintf_r+0x400>
  40d472:	3c10      	subs	r4, #16
  40d474:	2c10      	cmp	r4, #16
  40d476:	dd19      	ble.n	40d4ac <_svfprintf_r+0x434>
  40d478:	3301      	adds	r3, #1
  40d47a:	3210      	adds	r2, #16
  40d47c:	f8cb 7000 	str.w	r7, [fp]
  40d480:	f10b 0b08 	add.w	fp, fp, #8
  40d484:	2b07      	cmp	r3, #7
  40d486:	f84b 5c04 	str.w	r5, [fp, #-4]
  40d48a:	9223      	str	r2, [sp, #140]	; 0x8c
  40d48c:	9322      	str	r3, [sp, #136]	; 0x88
  40d48e:	ddf0      	ble.n	40d472 <_svfprintf_r+0x3fa>
  40d490:	4630      	mov	r0, r6
  40d492:	4649      	mov	r1, r9
  40d494:	aa21      	add	r2, sp, #132	; 0x84
  40d496:	46c3      	mov	fp, r8
  40d498:	f005 f808 	bl	4124ac <__ssprint_r>
  40d49c:	2800      	cmp	r0, #0
  40d49e:	f47f aeb1 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d4a2:	3c10      	subs	r4, #16
  40d4a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d4a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d4a8:	2c10      	cmp	r4, #16
  40d4aa:	dce5      	bgt.n	40d478 <_svfprintf_r+0x400>
  40d4ac:	4692      	mov	sl, r2
  40d4ae:	3301      	adds	r3, #1
  40d4b0:	44a2      	add	sl, r4
  40d4b2:	f8cb 7000 	str.w	r7, [fp]
  40d4b6:	2b07      	cmp	r3, #7
  40d4b8:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d4bc:	9322      	str	r3, [sp, #136]	; 0x88
  40d4be:	f8cb 4004 	str.w	r4, [fp, #4]
  40d4c2:	dd09      	ble.n	40d4d8 <_svfprintf_r+0x460>
  40d4c4:	9805      	ldr	r0, [sp, #20]
  40d4c6:	4649      	mov	r1, r9
  40d4c8:	aa21      	add	r2, sp, #132	; 0x84
  40d4ca:	f004 ffef 	bl	4124ac <__ssprint_r>
  40d4ce:	2800      	cmp	r0, #0
  40d4d0:	f47f ae98 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d4d4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d4d8:	9b06      	ldr	r3, [sp, #24]
  40d4da:	9a03      	ldr	r2, [sp, #12]
  40d4dc:	9908      	ldr	r1, [sp, #32]
  40d4de:	428a      	cmp	r2, r1
  40d4e0:	bfac      	ite	ge
  40d4e2:	189b      	addge	r3, r3, r2
  40d4e4:	185b      	addlt	r3, r3, r1
  40d4e6:	9306      	str	r3, [sp, #24]
  40d4e8:	f1ba 0f00 	cmp.w	sl, #0
  40d4ec:	f040 8312 	bne.w	40db14 <_svfprintf_r+0xa9c>
  40d4f0:	2300      	movs	r3, #0
  40d4f2:	46c3      	mov	fp, r8
  40d4f4:	9322      	str	r3, [sp, #136]	; 0x88
  40d4f6:	e5e7      	b.n	40d0c8 <_svfprintf_r+0x50>
  40d4f8:	4619      	mov	r1, r3
  40d4fa:	9802      	ldr	r0, [sp, #8]
  40d4fc:	781e      	ldrb	r6, [r3, #0]
  40d4fe:	f040 0004 	orr.w	r0, r0, #4
  40d502:	9002      	str	r0, [sp, #8]
  40d504:	e60e      	b.n	40d124 <_svfprintf_r+0xac>
  40d506:	9304      	str	r3, [sp, #16]
  40d508:	9b02      	ldr	r3, [sp, #8]
  40d50a:	f013 0320 	ands.w	r3, r3, #32
  40d50e:	f000 80a9 	beq.w	40d664 <_svfprintf_r+0x5ec>
  40d512:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d514:	2300      	movs	r3, #0
  40d516:	3207      	adds	r2, #7
  40d518:	f022 0207 	bic.w	r2, r2, #7
  40d51c:	f102 0108 	add.w	r1, r2, #8
  40d520:	e9d2 4500 	ldrd	r4, r5, [r2]
  40d524:	9109      	str	r1, [sp, #36]	; 0x24
  40d526:	e68a      	b.n	40d23e <_svfprintf_r+0x1c6>
  40d528:	781e      	ldrb	r6, [r3, #0]
  40d52a:	4619      	mov	r1, r3
  40d52c:	222b      	movs	r2, #43	; 0x2b
  40d52e:	e5f9      	b.n	40d124 <_svfprintf_r+0xac>
  40d530:	781e      	ldrb	r6, [r3, #0]
  40d532:	1c59      	adds	r1, r3, #1
  40d534:	2e2a      	cmp	r6, #42	; 0x2a
  40d536:	f000 87e6 	beq.w	40e506 <_svfprintf_r+0x148e>
  40d53a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d53e:	460b      	mov	r3, r1
  40d540:	2700      	movs	r7, #0
  40d542:	2809      	cmp	r0, #9
  40d544:	f63f adef 	bhi.w	40d126 <_svfprintf_r+0xae>
  40d548:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  40d54c:	f813 6b01 	ldrb.w	r6, [r3], #1
  40d550:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  40d554:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d558:	2809      	cmp	r0, #9
  40d55a:	d9f5      	bls.n	40d548 <_svfprintf_r+0x4d0>
  40d55c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
  40d560:	e5e1      	b.n	40d126 <_svfprintf_r+0xae>
  40d562:	9304      	str	r3, [sp, #16]
  40d564:	9b02      	ldr	r3, [sp, #8]
  40d566:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d56a:	069b      	lsls	r3, r3, #26
  40d56c:	f140 8125 	bpl.w	40d7ba <_svfprintf_r+0x742>
  40d570:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d572:	3307      	adds	r3, #7
  40d574:	f023 0307 	bic.w	r3, r3, #7
  40d578:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d57c:	3308      	adds	r3, #8
  40d57e:	4604      	mov	r4, r0
  40d580:	460d      	mov	r5, r1
  40d582:	9309      	str	r3, [sp, #36]	; 0x24
  40d584:	2800      	cmp	r0, #0
  40d586:	f171 0300 	sbcs.w	r3, r1, #0
  40d58a:	f2c0 8127 	blt.w	40d7dc <_svfprintf_r+0x764>
  40d58e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d592:	2301      	movs	r3, #1
  40d594:	970c      	str	r7, [sp, #48]	; 0x30
  40d596:	e657      	b.n	40d248 <_svfprintf_r+0x1d0>
  40d598:	781e      	ldrb	r6, [r3, #0]
  40d59a:	9902      	ldr	r1, [sp, #8]
  40d59c:	2e6c      	cmp	r6, #108	; 0x6c
  40d59e:	f000 8559 	beq.w	40e054 <_svfprintf_r+0xfdc>
  40d5a2:	f041 0110 	orr.w	r1, r1, #16
  40d5a6:	9102      	str	r1, [sp, #8]
  40d5a8:	4619      	mov	r1, r3
  40d5aa:	e5bb      	b.n	40d124 <_svfprintf_r+0xac>
  40d5ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d5ae:	6821      	ldr	r1, [r4, #0]
  40d5b0:	4608      	mov	r0, r1
  40d5b2:	9108      	str	r1, [sp, #32]
  40d5b4:	4621      	mov	r1, r4
  40d5b6:	2800      	cmp	r0, #0
  40d5b8:	f101 0104 	add.w	r1, r1, #4
  40d5bc:	f2c0 8551 	blt.w	40e062 <_svfprintf_r+0xfea>
  40d5c0:	9109      	str	r1, [sp, #36]	; 0x24
  40d5c2:	4619      	mov	r1, r3
  40d5c4:	781e      	ldrb	r6, [r3, #0]
  40d5c6:	e5ad      	b.n	40d124 <_svfprintf_r+0xac>
  40d5c8:	9902      	ldr	r1, [sp, #8]
  40d5ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40d5ce:	9102      	str	r1, [sp, #8]
  40d5d0:	4619      	mov	r1, r3
  40d5d2:	781e      	ldrb	r6, [r3, #0]
  40d5d4:	e5a6      	b.n	40d124 <_svfprintf_r+0xac>
  40d5d6:	9902      	ldr	r1, [sp, #8]
  40d5d8:	f041 0120 	orr.w	r1, r1, #32
  40d5dc:	9102      	str	r1, [sp, #8]
  40d5de:	4619      	mov	r1, r3
  40d5e0:	781e      	ldrb	r6, [r3, #0]
  40d5e2:	e59f      	b.n	40d124 <_svfprintf_r+0xac>
  40d5e4:	9304      	str	r3, [sp, #16]
  40d5e6:	9b02      	ldr	r3, [sp, #8]
  40d5e8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d5ec:	069f      	lsls	r7, r3, #26
  40d5ee:	f140 84ac 	bpl.w	40df4a <_svfprintf_r+0xed2>
  40d5f2:	9906      	ldr	r1, [sp, #24]
  40d5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d5f6:	17cd      	asrs	r5, r1, #31
  40d5f8:	4608      	mov	r0, r1
  40d5fa:	6813      	ldr	r3, [r2, #0]
  40d5fc:	3204      	adds	r2, #4
  40d5fe:	4629      	mov	r1, r5
  40d600:	9209      	str	r2, [sp, #36]	; 0x24
  40d602:	e9c3 0100 	strd	r0, r1, [r3]
  40d606:	e55f      	b.n	40d0c8 <_svfprintf_r+0x50>
  40d608:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d60a:	2500      	movs	r5, #0
  40d60c:	9304      	str	r3, [sp, #16]
  40d60e:	6813      	ldr	r3, [r2, #0]
  40d610:	9707      	str	r7, [sp, #28]
  40d612:	1d17      	adds	r7, r2, #4
  40d614:	930b      	str	r3, [sp, #44]	; 0x2c
  40d616:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
  40d61a:	2b00      	cmp	r3, #0
  40d61c:	f000 865f 	beq.w	40e2de <_svfprintf_r+0x1266>
  40d620:	9b07      	ldr	r3, [sp, #28]
  40d622:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d624:	2b00      	cmp	r3, #0
  40d626:	f2c0 8608 	blt.w	40e23a <_svfprintf_r+0x11c2>
  40d62a:	4629      	mov	r1, r5
  40d62c:	461a      	mov	r2, r3
  40d62e:	f003 ff4b 	bl	4114c8 <memchr>
  40d632:	2800      	cmp	r0, #0
  40d634:	f000 86bf 	beq.w	40e3b6 <_svfprintf_r+0x133e>
  40d638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d63a:	950c      	str	r5, [sp, #48]	; 0x30
  40d63c:	1ac3      	subs	r3, r0, r3
  40d63e:	9709      	str	r7, [sp, #36]	; 0x24
  40d640:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d644:	9307      	str	r3, [sp, #28]
  40d646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d64a:	950d      	str	r5, [sp, #52]	; 0x34
  40d64c:	9303      	str	r3, [sp, #12]
  40d64e:	e625      	b.n	40d29c <_svfprintf_r+0x224>
  40d650:	9304      	str	r3, [sp, #16]
  40d652:	9b02      	ldr	r3, [sp, #8]
  40d654:	f043 0310 	orr.w	r3, r3, #16
  40d658:	9302      	str	r3, [sp, #8]
  40d65a:	9b02      	ldr	r3, [sp, #8]
  40d65c:	f013 0320 	ands.w	r3, r3, #32
  40d660:	f47f af57 	bne.w	40d512 <_svfprintf_r+0x49a>
  40d664:	9a02      	ldr	r2, [sp, #8]
  40d666:	f012 0210 	ands.w	r2, r2, #16
  40d66a:	f040 8351 	bne.w	40dd10 <_svfprintf_r+0xc98>
  40d66e:	9b02      	ldr	r3, [sp, #8]
  40d670:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40d674:	f000 834c 	beq.w	40dd10 <_svfprintf_r+0xc98>
  40d678:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d67a:	4613      	mov	r3, r2
  40d67c:	2500      	movs	r5, #0
  40d67e:	460a      	mov	r2, r1
  40d680:	880c      	ldrh	r4, [r1, #0]
  40d682:	3204      	adds	r2, #4
  40d684:	9209      	str	r2, [sp, #36]	; 0x24
  40d686:	e5da      	b.n	40d23e <_svfprintf_r+0x1c6>
  40d688:	00413dd0 	.word	0x00413dd0
  40d68c:	00413de0 	.word	0x00413de0
  40d690:	9304      	str	r3, [sp, #16]
  40d692:	9b02      	ldr	r3, [sp, #8]
  40d694:	f043 0310 	orr.w	r3, r3, #16
  40d698:	9302      	str	r3, [sp, #8]
  40d69a:	9b02      	ldr	r3, [sp, #8]
  40d69c:	069c      	lsls	r4, r3, #26
  40d69e:	f53f adc4 	bmi.w	40d22a <_svfprintf_r+0x1b2>
  40d6a2:	9b02      	ldr	r3, [sp, #8]
  40d6a4:	06d8      	lsls	r0, r3, #27
  40d6a6:	f140 8467 	bpl.w	40df78 <_svfprintf_r+0xf00>
  40d6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d6ac:	4613      	mov	r3, r2
  40d6ae:	3204      	adds	r2, #4
  40d6b0:	681c      	ldr	r4, [r3, #0]
  40d6b2:	2500      	movs	r5, #0
  40d6b4:	2301      	movs	r3, #1
  40d6b6:	9209      	str	r2, [sp, #36]	; 0x24
  40d6b8:	e5c1      	b.n	40d23e <_svfprintf_r+0x1c6>
  40d6ba:	9304      	str	r3, [sp, #16]
  40d6bc:	4bb5      	ldr	r3, [pc, #724]	; (40d994 <_svfprintf_r+0x91c>)
  40d6be:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d6c2:	9311      	str	r3, [sp, #68]	; 0x44
  40d6c4:	9b02      	ldr	r3, [sp, #8]
  40d6c6:	0699      	lsls	r1, r3, #26
  40d6c8:	d53d      	bpl.n	40d746 <_svfprintf_r+0x6ce>
  40d6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d6cc:	3307      	adds	r3, #7
  40d6ce:	f023 0307 	bic.w	r3, r3, #7
  40d6d2:	f103 0208 	add.w	r2, r3, #8
  40d6d6:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d6da:	9209      	str	r2, [sp, #36]	; 0x24
  40d6dc:	9b02      	ldr	r3, [sp, #8]
  40d6de:	07db      	lsls	r3, r3, #31
  40d6e0:	f140 8264 	bpl.w	40dbac <_svfprintf_r+0xb34>
  40d6e4:	ea54 0305 	orrs.w	r3, r4, r5
  40d6e8:	f000 8260 	beq.w	40dbac <_svfprintf_r+0xb34>
  40d6ec:	9b02      	ldr	r3, [sp, #8]
  40d6ee:	2230      	movs	r2, #48	; 0x30
  40d6f0:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
  40d6f4:	f043 0302 	orr.w	r3, r3, #2
  40d6f8:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
  40d6fc:	9302      	str	r3, [sp, #8]
  40d6fe:	2302      	movs	r3, #2
  40d700:	e59d      	b.n	40d23e <_svfprintf_r+0x1c6>
  40d702:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d704:	2001      	movs	r0, #1
  40d706:	9304      	str	r3, [sp, #16]
  40d708:	2300      	movs	r3, #0
  40d70a:	680a      	ldr	r2, [r1, #0]
  40d70c:	3104      	adds	r1, #4
  40d70e:	469c      	mov	ip, r3
  40d710:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40d714:	930c      	str	r3, [sp, #48]	; 0x30
  40d716:	930d      	str	r3, [sp, #52]	; 0x34
  40d718:	ab24      	add	r3, sp, #144	; 0x90
  40d71a:	9003      	str	r0, [sp, #12]
  40d71c:	9109      	str	r1, [sp, #36]	; 0x24
  40d71e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  40d722:	9007      	str	r0, [sp, #28]
  40d724:	930b      	str	r3, [sp, #44]	; 0x2c
  40d726:	e5bf      	b.n	40d2a8 <_svfprintf_r+0x230>
  40d728:	9902      	ldr	r1, [sp, #8]
  40d72a:	f041 0108 	orr.w	r1, r1, #8
  40d72e:	9102      	str	r1, [sp, #8]
  40d730:	4619      	mov	r1, r3
  40d732:	781e      	ldrb	r6, [r3, #0]
  40d734:	e4f6      	b.n	40d124 <_svfprintf_r+0xac>
  40d736:	9304      	str	r3, [sp, #16]
  40d738:	4b97      	ldr	r3, [pc, #604]	; (40d998 <_svfprintf_r+0x920>)
  40d73a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d73e:	9311      	str	r3, [sp, #68]	; 0x44
  40d740:	9b02      	ldr	r3, [sp, #8]
  40d742:	0699      	lsls	r1, r3, #26
  40d744:	d4c1      	bmi.n	40d6ca <_svfprintf_r+0x652>
  40d746:	9b02      	ldr	r3, [sp, #8]
  40d748:	06da      	lsls	r2, r3, #27
  40d74a:	f140 83e1 	bpl.w	40df10 <_svfprintf_r+0xe98>
  40d74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d750:	2500      	movs	r5, #0
  40d752:	4613      	mov	r3, r2
  40d754:	6814      	ldr	r4, [r2, #0]
  40d756:	3304      	adds	r3, #4
  40d758:	9309      	str	r3, [sp, #36]	; 0x24
  40d75a:	e7bf      	b.n	40d6dc <_svfprintf_r+0x664>
  40d75c:	781e      	ldrb	r6, [r3, #0]
  40d75e:	4619      	mov	r1, r3
  40d760:	2a00      	cmp	r2, #0
  40d762:	f47f acdf 	bne.w	40d124 <_svfprintf_r+0xac>
  40d766:	2220      	movs	r2, #32
  40d768:	e4dc      	b.n	40d124 <_svfprintf_r+0xac>
  40d76a:	9902      	ldr	r1, [sp, #8]
  40d76c:	f041 0101 	orr.w	r1, r1, #1
  40d770:	9102      	str	r1, [sp, #8]
  40d772:	4619      	mov	r1, r3
  40d774:	781e      	ldrb	r6, [r3, #0]
  40d776:	e4d5      	b.n	40d124 <_svfprintf_r+0xac>
  40d778:	9902      	ldr	r1, [sp, #8]
  40d77a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40d77e:	9102      	str	r1, [sp, #8]
  40d780:	4619      	mov	r1, r3
  40d782:	781e      	ldrb	r6, [r3, #0]
  40d784:	e4ce      	b.n	40d124 <_svfprintf_r+0xac>
  40d786:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d78a:	2100      	movs	r1, #0
  40d78c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40d790:	f813 6b01 	ldrb.w	r6, [r3], #1
  40d794:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40d798:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d79c:	2809      	cmp	r0, #9
  40d79e:	d9f5      	bls.n	40d78c <_svfprintf_r+0x714>
  40d7a0:	9108      	str	r1, [sp, #32]
  40d7a2:	e4c0      	b.n	40d126 <_svfprintf_r+0xae>
  40d7a4:	9304      	str	r3, [sp, #16]
  40d7a6:	9b02      	ldr	r3, [sp, #8]
  40d7a8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d7ac:	f043 0310 	orr.w	r3, r3, #16
  40d7b0:	9302      	str	r3, [sp, #8]
  40d7b2:	9b02      	ldr	r3, [sp, #8]
  40d7b4:	069b      	lsls	r3, r3, #26
  40d7b6:	f53f aedb 	bmi.w	40d570 <_svfprintf_r+0x4f8>
  40d7ba:	9b02      	ldr	r3, [sp, #8]
  40d7bc:	06dd      	lsls	r5, r3, #27
  40d7be:	f140 83b4 	bpl.w	40df2a <_svfprintf_r+0xeb2>
  40d7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d7c4:	4613      	mov	r3, r2
  40d7c6:	681c      	ldr	r4, [r3, #0]
  40d7c8:	3304      	adds	r3, #4
  40d7ca:	17e5      	asrs	r5, r4, #31
  40d7cc:	4620      	mov	r0, r4
  40d7ce:	9309      	str	r3, [sp, #36]	; 0x24
  40d7d0:	4629      	mov	r1, r5
  40d7d2:	2800      	cmp	r0, #0
  40d7d4:	f171 0300 	sbcs.w	r3, r1, #0
  40d7d8:	f6bf aed9 	bge.w	40d58e <_svfprintf_r+0x516>
  40d7dc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40d7e0:	4264      	negs	r4, r4
  40d7e2:	970c      	str	r7, [sp, #48]	; 0x30
  40d7e4:	f04f 0301 	mov.w	r3, #1
  40d7e8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d7ec:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40d7f0:	e52a      	b.n	40d248 <_svfprintf_r+0x1d0>
  40d7f2:	9304      	str	r3, [sp, #16]
  40d7f4:	9b02      	ldr	r3, [sp, #8]
  40d7f6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d7fa:	f013 0f08 	tst.w	r3, #8
  40d7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d800:	f103 0307 	add.w	r3, r3, #7
  40d804:	f023 0307 	bic.w	r3, r3, #7
  40d808:	f000 837b 	beq.w	40df02 <_svfprintf_r+0xe8a>
  40d80c:	f103 0208 	add.w	r2, r3, #8
  40d810:	ed93 7b00 	vldr	d7, [r3]
  40d814:	9209      	str	r2, [sp, #36]	; 0x24
  40d816:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40d81a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
  40d81e:	f7fc ffef 	bl	40a800 <__fpclassifyd>
  40d822:	2801      	cmp	r0, #1
  40d824:	f040 8353 	bne.w	40dece <_svfprintf_r+0xe56>
  40d828:	2200      	movs	r2, #0
  40d82a:	2300      	movs	r3, #0
  40d82c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d830:	f7fd fcd2 	bl	40b1d8 <__aeabi_dcmplt>
  40d834:	2800      	cmp	r0, #0
  40d836:	f040 8568 	bne.w	40e30a <_svfprintf_r+0x1292>
  40d83a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d83e:	2303      	movs	r3, #3
  40d840:	9c02      	ldr	r4, [sp, #8]
  40d842:	4a56      	ldr	r2, [pc, #344]	; (40d99c <_svfprintf_r+0x924>)
  40d844:	2000      	movs	r0, #0
  40d846:	4619      	mov	r1, r3
  40d848:	9303      	str	r3, [sp, #12]
  40d84a:	4b55      	ldr	r3, [pc, #340]	; (40d9a0 <_svfprintf_r+0x928>)
  40d84c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40d850:	900c      	str	r0, [sp, #48]	; 0x30
  40d852:	2e47      	cmp	r6, #71	; 0x47
  40d854:	bfd8      	it	le
  40d856:	461a      	movle	r2, r3
  40d858:	9402      	str	r4, [sp, #8]
  40d85a:	9107      	str	r1, [sp, #28]
  40d85c:	920b      	str	r2, [sp, #44]	; 0x2c
  40d85e:	900d      	str	r0, [sp, #52]	; 0x34
  40d860:	e51c      	b.n	40d29c <_svfprintf_r+0x224>
  40d862:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d864:	2230      	movs	r2, #48	; 0x30
  40d866:	9802      	ldr	r0, [sp, #8]
  40d868:	4629      	mov	r1, r5
  40d86a:	9304      	str	r3, [sp, #16]
  40d86c:	2378      	movs	r3, #120	; 0x78
  40d86e:	f040 0002 	orr.w	r0, r0, #2
  40d872:	3104      	adds	r1, #4
  40d874:	682c      	ldr	r4, [r5, #0]
  40d876:	461e      	mov	r6, r3
  40d878:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  40d87c:	4b46      	ldr	r3, [pc, #280]	; (40d998 <_svfprintf_r+0x920>)
  40d87e:	2500      	movs	r5, #0
  40d880:	9002      	str	r0, [sp, #8]
  40d882:	9311      	str	r3, [sp, #68]	; 0x44
  40d884:	2302      	movs	r3, #2
  40d886:	9109      	str	r1, [sp, #36]	; 0x24
  40d888:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
  40d88c:	e4d7      	b.n	40d23e <_svfprintf_r+0x1c6>
  40d88e:	9304      	str	r3, [sp, #16]
  40d890:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d894:	2e00      	cmp	r6, #0
  40d896:	f43f acae 	beq.w	40d1f6 <_svfprintf_r+0x17e>
  40d89a:	2300      	movs	r3, #0
  40d89c:	2201      	movs	r2, #1
  40d89e:	a924      	add	r1, sp, #144	; 0x90
  40d8a0:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
  40d8a4:	9203      	str	r2, [sp, #12]
  40d8a6:	469c      	mov	ip, r3
  40d8a8:	910b      	str	r1, [sp, #44]	; 0x2c
  40d8aa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40d8ae:	9207      	str	r2, [sp, #28]
  40d8b0:	930c      	str	r3, [sp, #48]	; 0x30
  40d8b2:	930d      	str	r3, [sp, #52]	; 0x34
  40d8b4:	e4f8      	b.n	40d2a8 <_svfprintf_r+0x230>
  40d8b6:	9805      	ldr	r0, [sp, #20]
  40d8b8:	4649      	mov	r1, r9
  40d8ba:	aa21      	add	r2, sp, #132	; 0x84
  40d8bc:	f004 fdf6 	bl	4124ac <__ssprint_r>
  40d8c0:	2800      	cmp	r0, #0
  40d8c2:	f47f ac9f 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d8c6:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d8ca:	46c3      	mov	fp, r8
  40d8cc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d8d0:	e541      	b.n	40d356 <_svfprintf_r+0x2de>
  40d8d2:	2e65      	cmp	r6, #101	; 0x65
  40d8d4:	f340 80c4 	ble.w	40da60 <_svfprintf_r+0x9e8>
  40d8d8:	2200      	movs	r2, #0
  40d8da:	2300      	movs	r3, #0
  40d8dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d8e0:	f7fd fc70 	bl	40b1c4 <__aeabi_dcmpeq>
  40d8e4:	2800      	cmp	r0, #0
  40d8e6:	f000 8164 	beq.w	40dbb2 <_svfprintf_r+0xb3a>
  40d8ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d8ec:	2201      	movs	r2, #1
  40d8ee:	f10a 0a01 	add.w	sl, sl, #1
  40d8f2:	492c      	ldr	r1, [pc, #176]	; (40d9a4 <_svfprintf_r+0x92c>)
  40d8f4:	4413      	add	r3, r2
  40d8f6:	f8cb 2004 	str.w	r2, [fp, #4]
  40d8fa:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d8fe:	2b07      	cmp	r3, #7
  40d900:	f8cb 1000 	str.w	r1, [fp]
  40d904:	9322      	str	r3, [sp, #136]	; 0x88
  40d906:	f300 8348 	bgt.w	40df9a <_svfprintf_r+0xf22>
  40d90a:	f10b 0b08 	add.w	fp, fp, #8
  40d90e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d910:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d912:	4293      	cmp	r3, r2
  40d914:	db03      	blt.n	40d91e <_svfprintf_r+0x8a6>
  40d916:	9b02      	ldr	r3, [sp, #8]
  40d918:	07de      	lsls	r6, r3, #31
  40d91a:	f57f ad99 	bpl.w	40d450 <_svfprintf_r+0x3d8>
  40d91e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d920:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40d922:	3301      	adds	r3, #1
  40d924:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d926:	448a      	add	sl, r1
  40d928:	f8cb 1004 	str.w	r1, [fp, #4]
  40d92c:	2b07      	cmp	r3, #7
  40d92e:	f8cb 2000 	str.w	r2, [fp]
  40d932:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d936:	9322      	str	r3, [sp, #136]	; 0x88
  40d938:	f300 8414 	bgt.w	40e164 <_svfprintf_r+0x10ec>
  40d93c:	f10b 0b08 	add.w	fp, fp, #8
  40d940:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d942:	1e5c      	subs	r4, r3, #1
  40d944:	2c00      	cmp	r4, #0
  40d946:	f77f ad83 	ble.w	40d450 <_svfprintf_r+0x3d8>
  40d94a:	2c10      	cmp	r4, #16
  40d94c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d94e:	f340 85a7 	ble.w	40e4a0 <_svfprintf_r+0x1428>
  40d952:	2610      	movs	r6, #16
  40d954:	4d14      	ldr	r5, [pc, #80]	; (40d9a8 <_svfprintf_r+0x930>)
  40d956:	4652      	mov	r2, sl
  40d958:	9f05      	ldr	r7, [sp, #20]
  40d95a:	e003      	b.n	40d964 <_svfprintf_r+0x8ec>
  40d95c:	3c10      	subs	r4, #16
  40d95e:	2c10      	cmp	r4, #16
  40d960:	f340 81c8 	ble.w	40dcf4 <_svfprintf_r+0xc7c>
  40d964:	3301      	adds	r3, #1
  40d966:	3210      	adds	r2, #16
  40d968:	f8cb 5000 	str.w	r5, [fp]
  40d96c:	f10b 0b08 	add.w	fp, fp, #8
  40d970:	2b07      	cmp	r3, #7
  40d972:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d976:	9223      	str	r2, [sp, #140]	; 0x8c
  40d978:	9322      	str	r3, [sp, #136]	; 0x88
  40d97a:	ddef      	ble.n	40d95c <_svfprintf_r+0x8e4>
  40d97c:	4638      	mov	r0, r7
  40d97e:	4649      	mov	r1, r9
  40d980:	aa21      	add	r2, sp, #132	; 0x84
  40d982:	46c3      	mov	fp, r8
  40d984:	f004 fd92 	bl	4124ac <__ssprint_r>
  40d988:	2800      	cmp	r0, #0
  40d98a:	f47f ac3b 	bne.w	40d204 <_svfprintf_r+0x18c>
  40d98e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d990:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d992:	e7e3      	b.n	40d95c <_svfprintf_r+0x8e4>
  40d994:	00413e00 	.word	0x00413e00
  40d998:	00413e14 	.word	0x00413e14
  40d99c:	00413df4 	.word	0x00413df4
  40d9a0:	00413df0 	.word	0x00413df0
  40d9a4:	00413e30 	.word	0x00413e30
  40d9a8:	00413dd0 	.word	0x00413dd0
  40d9ac:	2b01      	cmp	r3, #1
  40d9ae:	f000 8151 	beq.w	40dc54 <_svfprintf_r+0xbdc>
  40d9b2:	2b02      	cmp	r3, #2
  40d9b4:	f040 80e1 	bne.w	40db7a <_svfprintf_r+0xb02>
  40d9b8:	46c2      	mov	sl, r8
  40d9ba:	9811      	ldr	r0, [sp, #68]	; 0x44
  40d9bc:	0923      	lsrs	r3, r4, #4
  40d9be:	f004 010f 	and.w	r1, r4, #15
  40d9c2:	092a      	lsrs	r2, r5, #4
  40d9c4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40d9c8:	4615      	mov	r5, r2
  40d9ca:	461c      	mov	r4, r3
  40d9cc:	5c43      	ldrb	r3, [r0, r1]
  40d9ce:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  40d9d2:	ea54 0305 	orrs.w	r3, r4, r5
  40d9d6:	d1f1      	bne.n	40d9bc <_svfprintf_r+0x944>
  40d9d8:	4653      	mov	r3, sl
  40d9da:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40d9de:	ebc3 0308 	rsb	r3, r3, r8
  40d9e2:	9307      	str	r3, [sp, #28]
  40d9e4:	e452      	b.n	40d28c <_svfprintf_r+0x214>
  40d9e6:	9b08      	ldr	r3, [sp, #32]
  40d9e8:	9a03      	ldr	r2, [sp, #12]
  40d9ea:	1a9f      	subs	r7, r3, r2
  40d9ec:	2f00      	cmp	r7, #0
  40d9ee:	f77f acdf 	ble.w	40d3b0 <_svfprintf_r+0x338>
  40d9f2:	2f10      	cmp	r7, #16
  40d9f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d9f6:	f340 84d9 	ble.w	40e3ac <_svfprintf_r+0x1334>
  40d9fa:	4653      	mov	r3, sl
  40d9fc:	2410      	movs	r4, #16
  40d9fe:	4dc8      	ldr	r5, [pc, #800]	; (40dd20 <_svfprintf_r+0xca8>)
  40da00:	f8dd a014 	ldr.w	sl, [sp, #20]
  40da04:	e002      	b.n	40da0c <_svfprintf_r+0x994>
  40da06:	3f10      	subs	r7, #16
  40da08:	2f10      	cmp	r7, #16
  40da0a:	dd19      	ble.n	40da40 <_svfprintf_r+0x9c8>
  40da0c:	3201      	adds	r2, #1
  40da0e:	3310      	adds	r3, #16
  40da10:	f8cb 5000 	str.w	r5, [fp]
  40da14:	f10b 0b08 	add.w	fp, fp, #8
  40da18:	2a07      	cmp	r2, #7
  40da1a:	f84b 4c04 	str.w	r4, [fp, #-4]
  40da1e:	9323      	str	r3, [sp, #140]	; 0x8c
  40da20:	9222      	str	r2, [sp, #136]	; 0x88
  40da22:	ddf0      	ble.n	40da06 <_svfprintf_r+0x98e>
  40da24:	4650      	mov	r0, sl
  40da26:	4649      	mov	r1, r9
  40da28:	aa21      	add	r2, sp, #132	; 0x84
  40da2a:	46c3      	mov	fp, r8
  40da2c:	f004 fd3e 	bl	4124ac <__ssprint_r>
  40da30:	2800      	cmp	r0, #0
  40da32:	f47f abe7 	bne.w	40d204 <_svfprintf_r+0x18c>
  40da36:	3f10      	subs	r7, #16
  40da38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40da3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40da3c:	2f10      	cmp	r7, #16
  40da3e:	dce5      	bgt.n	40da0c <_svfprintf_r+0x994>
  40da40:	469a      	mov	sl, r3
  40da42:	3201      	adds	r2, #1
  40da44:	44ba      	add	sl, r7
  40da46:	f8cb 5000 	str.w	r5, [fp]
  40da4a:	2a07      	cmp	r2, #7
  40da4c:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40da50:	9222      	str	r2, [sp, #136]	; 0x88
  40da52:	f8cb 7004 	str.w	r7, [fp, #4]
  40da56:	f300 820c 	bgt.w	40de72 <_svfprintf_r+0xdfa>
  40da5a:	f10b 0b08 	add.w	fp, fp, #8
  40da5e:	e4a7      	b.n	40d3b0 <_svfprintf_r+0x338>
  40da60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40da62:	f10a 0601 	add.w	r6, sl, #1
  40da66:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40da68:	2b01      	cmp	r3, #1
  40da6a:	f340 81ca 	ble.w	40de02 <_svfprintf_r+0xd8a>
  40da6e:	2301      	movs	r3, #1
  40da70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40da72:	9623      	str	r6, [sp, #140]	; 0x8c
  40da74:	441c      	add	r4, r3
  40da76:	f8cb 2000 	str.w	r2, [fp]
  40da7a:	f8cb 3004 	str.w	r3, [fp, #4]
  40da7e:	2c07      	cmp	r4, #7
  40da80:	9422      	str	r4, [sp, #136]	; 0x88
  40da82:	f300 81cf 	bgt.w	40de24 <_svfprintf_r+0xdac>
  40da86:	f10b 0b08 	add.w	fp, fp, #8
  40da8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40da8c:	3401      	adds	r4, #1
  40da8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40da90:	4416      	add	r6, r2
  40da92:	2c07      	cmp	r4, #7
  40da94:	f8cb 3000 	str.w	r3, [fp]
  40da98:	9623      	str	r6, [sp, #140]	; 0x8c
  40da9a:	9422      	str	r4, [sp, #136]	; 0x88
  40da9c:	f8cb 2004 	str.w	r2, [fp, #4]
  40daa0:	f300 81cc 	bgt.w	40de3c <_svfprintf_r+0xdc4>
  40daa4:	f10b 0b08 	add.w	fp, fp, #8
  40daa8:	2300      	movs	r3, #0
  40daaa:	2200      	movs	r2, #0
  40daac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40dab0:	f7fd fb88 	bl	40b1c4 <__aeabi_dcmpeq>
  40dab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dab6:	2800      	cmp	r0, #0
  40dab8:	f040 80dd 	bne.w	40dc76 <_svfprintf_r+0xbfe>
  40dabc:	3b01      	subs	r3, #1
  40dabe:	3401      	adds	r4, #1
  40dac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dac2:	441e      	add	r6, r3
  40dac4:	2c07      	cmp	r4, #7
  40dac6:	f102 0201 	add.w	r2, r2, #1
  40daca:	9422      	str	r4, [sp, #136]	; 0x88
  40dacc:	9623      	str	r6, [sp, #140]	; 0x8c
  40dace:	f8cb 2000 	str.w	r2, [fp]
  40dad2:	f8cb 3004 	str.w	r3, [fp, #4]
  40dad6:	f300 8101 	bgt.w	40dcdc <_svfprintf_r+0xc64>
  40dada:	f10b 0b08 	add.w	fp, fp, #8
  40dade:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40dae0:	3401      	adds	r4, #1
  40dae2:	ab1d      	add	r3, sp, #116	; 0x74
  40dae4:	eb06 0a02 	add.w	sl, r6, r2
  40dae8:	2c07      	cmp	r4, #7
  40daea:	f8cb 2004 	str.w	r2, [fp, #4]
  40daee:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40daf2:	9422      	str	r4, [sp, #136]	; 0x88
  40daf4:	f8cb 3000 	str.w	r3, [fp]
  40daf8:	f77f aca8 	ble.w	40d44c <_svfprintf_r+0x3d4>
  40dafc:	9805      	ldr	r0, [sp, #20]
  40dafe:	4649      	mov	r1, r9
  40db00:	aa21      	add	r2, sp, #132	; 0x84
  40db02:	f004 fcd3 	bl	4124ac <__ssprint_r>
  40db06:	2800      	cmp	r0, #0
  40db08:	f47f ab7c 	bne.w	40d204 <_svfprintf_r+0x18c>
  40db0c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40db10:	46c3      	mov	fp, r8
  40db12:	e49d      	b.n	40d450 <_svfprintf_r+0x3d8>
  40db14:	9805      	ldr	r0, [sp, #20]
  40db16:	4649      	mov	r1, r9
  40db18:	aa21      	add	r2, sp, #132	; 0x84
  40db1a:	f004 fcc7 	bl	4124ac <__ssprint_r>
  40db1e:	2800      	cmp	r0, #0
  40db20:	f43f ace6 	beq.w	40d4f0 <_svfprintf_r+0x478>
  40db24:	f7ff bb6e 	b.w	40d204 <_svfprintf_r+0x18c>
  40db28:	9207      	str	r2, [sp, #28]
  40db2a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  40db2e:	f7ff bbad 	b.w	40d28c <_svfprintf_r+0x214>
  40db32:	9805      	ldr	r0, [sp, #20]
  40db34:	4649      	mov	r1, r9
  40db36:	aa21      	add	r2, sp, #132	; 0x84
  40db38:	f004 fcb8 	bl	4124ac <__ssprint_r>
  40db3c:	2800      	cmp	r0, #0
  40db3e:	f47f ab61 	bne.w	40d204 <_svfprintf_r+0x18c>
  40db42:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40db46:	46c3      	mov	fp, r8
  40db48:	e46d      	b.n	40d426 <_svfprintf_r+0x3ae>
  40db4a:	9805      	ldr	r0, [sp, #20]
  40db4c:	4649      	mov	r1, r9
  40db4e:	aa21      	add	r2, sp, #132	; 0x84
  40db50:	f004 fcac 	bl	4124ac <__ssprint_r>
  40db54:	2800      	cmp	r0, #0
  40db56:	f47f ab55 	bne.w	40d204 <_svfprintf_r+0x18c>
  40db5a:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40db5e:	46c3      	mov	fp, r8
  40db60:	e40f      	b.n	40d382 <_svfprintf_r+0x30a>
  40db62:	9805      	ldr	r0, [sp, #20]
  40db64:	4649      	mov	r1, r9
  40db66:	aa21      	add	r2, sp, #132	; 0x84
  40db68:	f004 fca0 	bl	4124ac <__ssprint_r>
  40db6c:	2800      	cmp	r0, #0
  40db6e:	f47f ab49 	bne.w	40d204 <_svfprintf_r+0x18c>
  40db72:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40db76:	46c3      	mov	fp, r8
  40db78:	e417      	b.n	40d3aa <_svfprintf_r+0x332>
  40db7a:	4641      	mov	r1, r8
  40db7c:	08e2      	lsrs	r2, r4, #3
  40db7e:	f004 0307 	and.w	r3, r4, #7
  40db82:	08e8      	lsrs	r0, r5, #3
  40db84:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40db88:	3330      	adds	r3, #48	; 0x30
  40db8a:	4605      	mov	r5, r0
  40db8c:	4614      	mov	r4, r2
  40db8e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40db92:	ea54 0205 	orrs.w	r2, r4, r5
  40db96:	d1f1      	bne.n	40db7c <_svfprintf_r+0xb04>
  40db98:	9a02      	ldr	r2, [sp, #8]
  40db9a:	910b      	str	r1, [sp, #44]	; 0x2c
  40db9c:	07d0      	lsls	r0, r2, #31
  40db9e:	f100 8159 	bmi.w	40de54 <_svfprintf_r+0xddc>
  40dba2:	ebc1 0308 	rsb	r3, r1, r8
  40dba6:	9307      	str	r3, [sp, #28]
  40dba8:	f7ff bb70 	b.w	40d28c <_svfprintf_r+0x214>
  40dbac:	2302      	movs	r3, #2
  40dbae:	f7ff bb46 	b.w	40d23e <_svfprintf_r+0x1c6>
  40dbb2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40dbb4:	2c00      	cmp	r4, #0
  40dbb6:	f340 81fc 	ble.w	40dfb2 <_svfprintf_r+0xf3a>
  40dbba:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dbbc:	990d      	ldr	r1, [sp, #52]	; 0x34
  40dbbe:	4613      	mov	r3, r2
  40dbc0:	428a      	cmp	r2, r1
  40dbc2:	bfa8      	it	ge
  40dbc4:	460b      	movge	r3, r1
  40dbc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40dbc8:	461c      	mov	r4, r3
  40dbca:	188f      	adds	r7, r1, r2
  40dbcc:	2c00      	cmp	r4, #0
  40dbce:	dd0e      	ble.n	40dbee <_svfprintf_r+0xb76>
  40dbd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dbd2:	44a2      	add	sl, r4
  40dbd4:	f8cb 1000 	str.w	r1, [fp]
  40dbd8:	3301      	adds	r3, #1
  40dbda:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dbde:	f8cb 4004 	str.w	r4, [fp, #4]
  40dbe2:	2b07      	cmp	r3, #7
  40dbe4:	9322      	str	r3, [sp, #136]	; 0x88
  40dbe6:	f300 8339 	bgt.w	40e25c <_svfprintf_r+0x11e4>
  40dbea:	f10b 0b08 	add.w	fp, fp, #8
  40dbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dbf0:	2c00      	cmp	r4, #0
  40dbf2:	bfa8      	it	ge
  40dbf4:	1b1b      	subge	r3, r3, r4
  40dbf6:	2b00      	cmp	r3, #0
  40dbf8:	461c      	mov	r4, r3
  40dbfa:	f340 80a2 	ble.w	40dd42 <_svfprintf_r+0xcca>
  40dbfe:	2c10      	cmp	r4, #16
  40dc00:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dc02:	f340 8457 	ble.w	40e4b4 <_svfprintf_r+0x143c>
  40dc06:	4652      	mov	r2, sl
  40dc08:	2610      	movs	r6, #16
  40dc0a:	4d45      	ldr	r5, [pc, #276]	; (40dd20 <_svfprintf_r+0xca8>)
  40dc0c:	f8dd a014 	ldr.w	sl, [sp, #20]
  40dc10:	e003      	b.n	40dc1a <_svfprintf_r+0xba2>
  40dc12:	3c10      	subs	r4, #16
  40dc14:	2c10      	cmp	r4, #16
  40dc16:	f340 8085 	ble.w	40dd24 <_svfprintf_r+0xcac>
  40dc1a:	3301      	adds	r3, #1
  40dc1c:	3210      	adds	r2, #16
  40dc1e:	f8cb 5000 	str.w	r5, [fp]
  40dc22:	f10b 0b08 	add.w	fp, fp, #8
  40dc26:	2b07      	cmp	r3, #7
  40dc28:	f84b 6c04 	str.w	r6, [fp, #-4]
  40dc2c:	9223      	str	r2, [sp, #140]	; 0x8c
  40dc2e:	9322      	str	r3, [sp, #136]	; 0x88
  40dc30:	ddef      	ble.n	40dc12 <_svfprintf_r+0xb9a>
  40dc32:	4650      	mov	r0, sl
  40dc34:	4649      	mov	r1, r9
  40dc36:	aa21      	add	r2, sp, #132	; 0x84
  40dc38:	46c3      	mov	fp, r8
  40dc3a:	f004 fc37 	bl	4124ac <__ssprint_r>
  40dc3e:	2800      	cmp	r0, #0
  40dc40:	f47f aae0 	bne.w	40d204 <_svfprintf_r+0x18c>
  40dc44:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40dc46:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dc48:	e7e3      	b.n	40dc12 <_svfprintf_r+0xb9a>
  40dc4a:	9307      	str	r3, [sp, #28]
  40dc4c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  40dc50:	f7ff bb1c 	b.w	40d28c <_svfprintf_r+0x214>
  40dc54:	2d00      	cmp	r5, #0
  40dc56:	bf08      	it	eq
  40dc58:	2c0a      	cmpeq	r4, #10
  40dc5a:	f080 8117 	bcs.w	40de8c <_svfprintf_r+0xe14>
  40dc5e:	f10d 0af8 	add.w	sl, sp, #248	; 0xf8
  40dc62:	3430      	adds	r4, #48	; 0x30
  40dc64:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  40dc68:	ebca 0308 	rsb	r3, sl, r8
  40dc6c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40dc70:	9307      	str	r3, [sp, #28]
  40dc72:	f7ff bb0b 	b.w	40d28c <_svfprintf_r+0x214>
  40dc76:	1e5f      	subs	r7, r3, #1
  40dc78:	2f00      	cmp	r7, #0
  40dc7a:	f77f af30 	ble.w	40dade <_svfprintf_r+0xa66>
  40dc7e:	2f10      	cmp	r7, #16
  40dc80:	4d27      	ldr	r5, [pc, #156]	; (40dd20 <_svfprintf_r+0xca8>)
  40dc82:	bfc8      	it	gt
  40dc84:	f04f 0a10 	movgt.w	sl, #16
  40dc88:	dc03      	bgt.n	40dc92 <_svfprintf_r+0xc1a>
  40dc8a:	e01c      	b.n	40dcc6 <_svfprintf_r+0xc4e>
  40dc8c:	3f10      	subs	r7, #16
  40dc8e:	2f10      	cmp	r7, #16
  40dc90:	dd19      	ble.n	40dcc6 <_svfprintf_r+0xc4e>
  40dc92:	3401      	adds	r4, #1
  40dc94:	3610      	adds	r6, #16
  40dc96:	f8cb 5000 	str.w	r5, [fp]
  40dc9a:	f10b 0b08 	add.w	fp, fp, #8
  40dc9e:	2c07      	cmp	r4, #7
  40dca0:	f84b ac04 	str.w	sl, [fp, #-4]
  40dca4:	9623      	str	r6, [sp, #140]	; 0x8c
  40dca6:	9422      	str	r4, [sp, #136]	; 0x88
  40dca8:	ddf0      	ble.n	40dc8c <_svfprintf_r+0xc14>
  40dcaa:	9805      	ldr	r0, [sp, #20]
  40dcac:	4649      	mov	r1, r9
  40dcae:	aa21      	add	r2, sp, #132	; 0x84
  40dcb0:	46c3      	mov	fp, r8
  40dcb2:	f004 fbfb 	bl	4124ac <__ssprint_r>
  40dcb6:	2800      	cmp	r0, #0
  40dcb8:	f47f aaa4 	bne.w	40d204 <_svfprintf_r+0x18c>
  40dcbc:	3f10      	subs	r7, #16
  40dcbe:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40dcc0:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40dcc2:	2f10      	cmp	r7, #16
  40dcc4:	dce5      	bgt.n	40dc92 <_svfprintf_r+0xc1a>
  40dcc6:	3401      	adds	r4, #1
  40dcc8:	443e      	add	r6, r7
  40dcca:	f8cb 5000 	str.w	r5, [fp]
  40dcce:	2c07      	cmp	r4, #7
  40dcd0:	9623      	str	r6, [sp, #140]	; 0x8c
  40dcd2:	9422      	str	r4, [sp, #136]	; 0x88
  40dcd4:	f8cb 7004 	str.w	r7, [fp, #4]
  40dcd8:	f77f aeff 	ble.w	40dada <_svfprintf_r+0xa62>
  40dcdc:	9805      	ldr	r0, [sp, #20]
  40dcde:	4649      	mov	r1, r9
  40dce0:	aa21      	add	r2, sp, #132	; 0x84
  40dce2:	f004 fbe3 	bl	4124ac <__ssprint_r>
  40dce6:	2800      	cmp	r0, #0
  40dce8:	f47f aa8c 	bne.w	40d204 <_svfprintf_r+0x18c>
  40dcec:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40dcee:	46c3      	mov	fp, r8
  40dcf0:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40dcf2:	e6f4      	b.n	40dade <_svfprintf_r+0xa66>
  40dcf4:	4692      	mov	sl, r2
  40dcf6:	3301      	adds	r3, #1
  40dcf8:	44a2      	add	sl, r4
  40dcfa:	f8cb 5000 	str.w	r5, [fp]
  40dcfe:	2b07      	cmp	r3, #7
  40dd00:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dd04:	9322      	str	r3, [sp, #136]	; 0x88
  40dd06:	f8cb 4004 	str.w	r4, [fp, #4]
  40dd0a:	f77f ab9f 	ble.w	40d44c <_svfprintf_r+0x3d4>
  40dd0e:	e6f5      	b.n	40dafc <_svfprintf_r+0xa84>
  40dd10:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dd12:	2500      	movs	r5, #0
  40dd14:	460a      	mov	r2, r1
  40dd16:	680c      	ldr	r4, [r1, #0]
  40dd18:	3204      	adds	r2, #4
  40dd1a:	9209      	str	r2, [sp, #36]	; 0x24
  40dd1c:	f7ff ba8f 	b.w	40d23e <_svfprintf_r+0x1c6>
  40dd20:	00413dd0 	.word	0x00413dd0
  40dd24:	4692      	mov	sl, r2
  40dd26:	3301      	adds	r3, #1
  40dd28:	44a2      	add	sl, r4
  40dd2a:	f8cb 5000 	str.w	r5, [fp]
  40dd2e:	2b07      	cmp	r3, #7
  40dd30:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dd34:	9322      	str	r3, [sp, #136]	; 0x88
  40dd36:	f8cb 4004 	str.w	r4, [fp, #4]
  40dd3a:	f300 82c4 	bgt.w	40e2c6 <_svfprintf_r+0x124e>
  40dd3e:	f10b 0b08 	add.w	fp, fp, #8
  40dd42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dd44:	990d      	ldr	r1, [sp, #52]	; 0x34
  40dd46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40dd48:	440a      	add	r2, r1
  40dd4a:	4616      	mov	r6, r2
  40dd4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dd4e:	4293      	cmp	r3, r2
  40dd50:	db45      	blt.n	40ddde <_svfprintf_r+0xd66>
  40dd52:	9a02      	ldr	r2, [sp, #8]
  40dd54:	07d0      	lsls	r0, r2, #31
  40dd56:	d442      	bmi.n	40ddde <_svfprintf_r+0xd66>
  40dd58:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dd5a:	1bbc      	subs	r4, r7, r6
  40dd5c:	1ad3      	subs	r3, r2, r3
  40dd5e:	429c      	cmp	r4, r3
  40dd60:	bfa8      	it	ge
  40dd62:	461c      	movge	r4, r3
  40dd64:	2c00      	cmp	r4, #0
  40dd66:	4625      	mov	r5, r4
  40dd68:	dd0e      	ble.n	40dd88 <_svfprintf_r+0xd10>
  40dd6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dd6c:	44a2      	add	sl, r4
  40dd6e:	f8cb 6000 	str.w	r6, [fp]
  40dd72:	3201      	adds	r2, #1
  40dd74:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dd78:	f8cb 4004 	str.w	r4, [fp, #4]
  40dd7c:	2a07      	cmp	r2, #7
  40dd7e:	9222      	str	r2, [sp, #136]	; 0x88
  40dd80:	f300 8285 	bgt.w	40e28e <_svfprintf_r+0x1216>
  40dd84:	f10b 0b08 	add.w	fp, fp, #8
  40dd88:	2d00      	cmp	r5, #0
  40dd8a:	bfac      	ite	ge
  40dd8c:	1b5c      	subge	r4, r3, r5
  40dd8e:	461c      	movlt	r4, r3
  40dd90:	2c00      	cmp	r4, #0
  40dd92:	f77f ab5d 	ble.w	40d450 <_svfprintf_r+0x3d8>
  40dd96:	2c10      	cmp	r4, #16
  40dd98:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dd9a:	f340 8381 	ble.w	40e4a0 <_svfprintf_r+0x1428>
  40dd9e:	2610      	movs	r6, #16
  40dda0:	4db6      	ldr	r5, [pc, #728]	; (40e07c <_svfprintf_r+0x1004>)
  40dda2:	4652      	mov	r2, sl
  40dda4:	9f05      	ldr	r7, [sp, #20]
  40dda6:	e002      	b.n	40ddae <_svfprintf_r+0xd36>
  40dda8:	3c10      	subs	r4, #16
  40ddaa:	2c10      	cmp	r4, #16
  40ddac:	dda2      	ble.n	40dcf4 <_svfprintf_r+0xc7c>
  40ddae:	3301      	adds	r3, #1
  40ddb0:	3210      	adds	r2, #16
  40ddb2:	f8cb 5000 	str.w	r5, [fp]
  40ddb6:	f10b 0b08 	add.w	fp, fp, #8
  40ddba:	2b07      	cmp	r3, #7
  40ddbc:	f84b 6c04 	str.w	r6, [fp, #-4]
  40ddc0:	9223      	str	r2, [sp, #140]	; 0x8c
  40ddc2:	9322      	str	r3, [sp, #136]	; 0x88
  40ddc4:	ddf0      	ble.n	40dda8 <_svfprintf_r+0xd30>
  40ddc6:	4638      	mov	r0, r7
  40ddc8:	4649      	mov	r1, r9
  40ddca:	aa21      	add	r2, sp, #132	; 0x84
  40ddcc:	46c3      	mov	fp, r8
  40ddce:	f004 fb6d 	bl	4124ac <__ssprint_r>
  40ddd2:	2800      	cmp	r0, #0
  40ddd4:	f47f aa16 	bne.w	40d204 <_svfprintf_r+0x18c>
  40ddd8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40ddda:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dddc:	e7e4      	b.n	40dda8 <_svfprintf_r+0xd30>
  40ddde:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dde0:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40dde2:	3201      	adds	r2, #1
  40dde4:	9912      	ldr	r1, [sp, #72]	; 0x48
  40dde6:	4482      	add	sl, r0
  40dde8:	f8cb 0004 	str.w	r0, [fp, #4]
  40ddec:	2a07      	cmp	r2, #7
  40ddee:	f8cb 1000 	str.w	r1, [fp]
  40ddf2:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40ddf6:	9222      	str	r2, [sp, #136]	; 0x88
  40ddf8:	f300 8258 	bgt.w	40e2ac <_svfprintf_r+0x1234>
  40ddfc:	f10b 0b08 	add.w	fp, fp, #8
  40de00:	e7aa      	b.n	40dd58 <_svfprintf_r+0xce0>
  40de02:	9b02      	ldr	r3, [sp, #8]
  40de04:	07d9      	lsls	r1, r3, #31
  40de06:	f53f ae32 	bmi.w	40da6e <_svfprintf_r+0x9f6>
  40de0a:	2301      	movs	r3, #1
  40de0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40de0e:	9623      	str	r6, [sp, #140]	; 0x8c
  40de10:	441c      	add	r4, r3
  40de12:	f8cb 2000 	str.w	r2, [fp]
  40de16:	f8cb 3004 	str.w	r3, [fp, #4]
  40de1a:	2c07      	cmp	r4, #7
  40de1c:	9422      	str	r4, [sp, #136]	; 0x88
  40de1e:	f77f ae5c 	ble.w	40dada <_svfprintf_r+0xa62>
  40de22:	e75b      	b.n	40dcdc <_svfprintf_r+0xc64>
  40de24:	9805      	ldr	r0, [sp, #20]
  40de26:	4649      	mov	r1, r9
  40de28:	aa21      	add	r2, sp, #132	; 0x84
  40de2a:	f004 fb3f 	bl	4124ac <__ssprint_r>
  40de2e:	2800      	cmp	r0, #0
  40de30:	f47f a9e8 	bne.w	40d204 <_svfprintf_r+0x18c>
  40de34:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40de36:	46c3      	mov	fp, r8
  40de38:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40de3a:	e626      	b.n	40da8a <_svfprintf_r+0xa12>
  40de3c:	9805      	ldr	r0, [sp, #20]
  40de3e:	4649      	mov	r1, r9
  40de40:	aa21      	add	r2, sp, #132	; 0x84
  40de42:	f004 fb33 	bl	4124ac <__ssprint_r>
  40de46:	2800      	cmp	r0, #0
  40de48:	f47f a9dc 	bne.w	40d204 <_svfprintf_r+0x18c>
  40de4c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40de4e:	46c3      	mov	fp, r8
  40de50:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40de52:	e629      	b.n	40daa8 <_svfprintf_r+0xa30>
  40de54:	2b30      	cmp	r3, #48	; 0x30
  40de56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40de58:	f43f adc1 	beq.w	40d9de <_svfprintf_r+0x966>
  40de5c:	3b01      	subs	r3, #1
  40de5e:	461a      	mov	r2, r3
  40de60:	930b      	str	r3, [sp, #44]	; 0x2c
  40de62:	2330      	movs	r3, #48	; 0x30
  40de64:	ebc2 0208 	rsb	r2, r2, r8
  40de68:	f801 3c01 	strb.w	r3, [r1, #-1]
  40de6c:	9207      	str	r2, [sp, #28]
  40de6e:	f7ff ba0d 	b.w	40d28c <_svfprintf_r+0x214>
  40de72:	9805      	ldr	r0, [sp, #20]
  40de74:	4649      	mov	r1, r9
  40de76:	aa21      	add	r2, sp, #132	; 0x84
  40de78:	f004 fb18 	bl	4124ac <__ssprint_r>
  40de7c:	2800      	cmp	r0, #0
  40de7e:	f47f a9c1 	bne.w	40d204 <_svfprintf_r+0x18c>
  40de82:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40de86:	46c3      	mov	fp, r8
  40de88:	f7ff ba92 	b.w	40d3b0 <_svfprintf_r+0x338>
  40de8c:	46c2      	mov	sl, r8
  40de8e:	f8cd c00c 	str.w	ip, [sp, #12]
  40de92:	4620      	mov	r0, r4
  40de94:	4629      	mov	r1, r5
  40de96:	220a      	movs	r2, #10
  40de98:	2300      	movs	r3, #0
  40de9a:	f004 fd73 	bl	412984 <__aeabi_uldivmod>
  40de9e:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40dea2:	4620      	mov	r0, r4
  40dea4:	4629      	mov	r1, r5
  40dea6:	2300      	movs	r3, #0
  40dea8:	220a      	movs	r2, #10
  40deaa:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40deae:	f004 fd69 	bl	412984 <__aeabi_uldivmod>
  40deb2:	4604      	mov	r4, r0
  40deb4:	460d      	mov	r5, r1
  40deb6:	ea54 0305 	orrs.w	r3, r4, r5
  40deba:	d1ea      	bne.n	40de92 <_svfprintf_r+0xe1a>
  40debc:	ebca 0308 	rsb	r3, sl, r8
  40dec0:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40dec4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40dec8:	9307      	str	r3, [sp, #28]
  40deca:	f7ff b9df 	b.w	40d28c <_svfprintf_r+0x214>
  40dece:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
  40ded2:	f7fc fc95 	bl	40a800 <__fpclassifyd>
  40ded6:	2800      	cmp	r0, #0
  40ded8:	f040 80d8 	bne.w	40e08c <_svfprintf_r+0x1014>
  40dedc:	9c02      	ldr	r4, [sp, #8]
  40dede:	2103      	movs	r1, #3
  40dee0:	4a67      	ldr	r2, [pc, #412]	; (40e080 <_svfprintf_r+0x1008>)
  40dee2:	4b68      	ldr	r3, [pc, #416]	; (40e084 <_svfprintf_r+0x100c>)
  40dee4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40dee8:	900c      	str	r0, [sp, #48]	; 0x30
  40deea:	2e47      	cmp	r6, #71	; 0x47
  40deec:	bfd8      	it	le
  40deee:	461a      	movle	r2, r3
  40def0:	9103      	str	r1, [sp, #12]
  40def2:	9402      	str	r4, [sp, #8]
  40def4:	900d      	str	r0, [sp, #52]	; 0x34
  40def6:	920b      	str	r2, [sp, #44]	; 0x2c
  40def8:	9107      	str	r1, [sp, #28]
  40defa:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40defe:	f7ff b9cd 	b.w	40d29c <_svfprintf_r+0x224>
  40df02:	ed93 7b00 	vldr	d7, [r3]
  40df06:	3308      	adds	r3, #8
  40df08:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40df0c:	9309      	str	r3, [sp, #36]	; 0x24
  40df0e:	e484      	b.n	40d81a <_svfprintf_r+0x7a2>
  40df10:	9b02      	ldr	r3, [sp, #8]
  40df12:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df14:	f013 0f40 	tst.w	r3, #64	; 0x40
  40df18:	4613      	mov	r3, r2
  40df1a:	f000 80a9 	beq.w	40e070 <_svfprintf_r+0xff8>
  40df1e:	3304      	adds	r3, #4
  40df20:	8814      	ldrh	r4, [r2, #0]
  40df22:	2500      	movs	r5, #0
  40df24:	9309      	str	r3, [sp, #36]	; 0x24
  40df26:	f7ff bbd9 	b.w	40d6dc <_svfprintf_r+0x664>
  40df2a:	9b02      	ldr	r3, [sp, #8]
  40df2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df2e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40df32:	4613      	mov	r3, r2
  40df34:	f43f ac47 	beq.w	40d7c6 <_svfprintf_r+0x74e>
  40df38:	f9b2 4000 	ldrsh.w	r4, [r2]
  40df3c:	3304      	adds	r3, #4
  40df3e:	17e5      	asrs	r5, r4, #31
  40df40:	9309      	str	r3, [sp, #36]	; 0x24
  40df42:	4620      	mov	r0, r4
  40df44:	4629      	mov	r1, r5
  40df46:	f7ff bb1d 	b.w	40d584 <_svfprintf_r+0x50c>
  40df4a:	9b02      	ldr	r3, [sp, #8]
  40df4c:	06de      	lsls	r6, r3, #27
  40df4e:	d40b      	bmi.n	40df68 <_svfprintf_r+0xef0>
  40df50:	9b02      	ldr	r3, [sp, #8]
  40df52:	065d      	lsls	r5, r3, #25
  40df54:	d508      	bpl.n	40df68 <_svfprintf_r+0xef0>
  40df56:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df58:	6813      	ldr	r3, [r2, #0]
  40df5a:	3204      	adds	r2, #4
  40df5c:	9209      	str	r2, [sp, #36]	; 0x24
  40df5e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40df62:	801a      	strh	r2, [r3, #0]
  40df64:	f7ff b8b0 	b.w	40d0c8 <_svfprintf_r+0x50>
  40df68:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df6a:	6813      	ldr	r3, [r2, #0]
  40df6c:	3204      	adds	r2, #4
  40df6e:	9209      	str	r2, [sp, #36]	; 0x24
  40df70:	9a06      	ldr	r2, [sp, #24]
  40df72:	601a      	str	r2, [r3, #0]
  40df74:	f7ff b8a8 	b.w	40d0c8 <_svfprintf_r+0x50>
  40df78:	9b02      	ldr	r3, [sp, #8]
  40df7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df7c:	f013 0f40 	tst.w	r3, #64	; 0x40
  40df80:	4613      	mov	r3, r2
  40df82:	f43f ab94 	beq.w	40d6ae <_svfprintf_r+0x636>
  40df86:	8814      	ldrh	r4, [r2, #0]
  40df88:	3204      	adds	r2, #4
  40df8a:	2500      	movs	r5, #0
  40df8c:	2301      	movs	r3, #1
  40df8e:	9209      	str	r2, [sp, #36]	; 0x24
  40df90:	f7ff b955 	b.w	40d23e <_svfprintf_r+0x1c6>
  40df94:	4d39      	ldr	r5, [pc, #228]	; (40e07c <_svfprintf_r+0x1004>)
  40df96:	f7ff ba38 	b.w	40d40a <_svfprintf_r+0x392>
  40df9a:	9805      	ldr	r0, [sp, #20]
  40df9c:	4649      	mov	r1, r9
  40df9e:	aa21      	add	r2, sp, #132	; 0x84
  40dfa0:	f004 fa84 	bl	4124ac <__ssprint_r>
  40dfa4:	2800      	cmp	r0, #0
  40dfa6:	f47f a92d 	bne.w	40d204 <_svfprintf_r+0x18c>
  40dfaa:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40dfae:	46c3      	mov	fp, r8
  40dfb0:	e4ad      	b.n	40d90e <_svfprintf_r+0x896>
  40dfb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dfb4:	2201      	movs	r2, #1
  40dfb6:	f10a 0a01 	add.w	sl, sl, #1
  40dfba:	4933      	ldr	r1, [pc, #204]	; (40e088 <_svfprintf_r+0x1010>)
  40dfbc:	4413      	add	r3, r2
  40dfbe:	f8cb 2004 	str.w	r2, [fp, #4]
  40dfc2:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dfc6:	2b07      	cmp	r3, #7
  40dfc8:	f8cb 1000 	str.w	r1, [fp]
  40dfcc:	9322      	str	r3, [sp, #136]	; 0x88
  40dfce:	f300 80e6 	bgt.w	40e19e <_svfprintf_r+0x1126>
  40dfd2:	f10b 0b08 	add.w	fp, fp, #8
  40dfd6:	b92c      	cbnz	r4, 40dfe4 <_svfprintf_r+0xf6c>
  40dfd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dfda:	b91b      	cbnz	r3, 40dfe4 <_svfprintf_r+0xf6c>
  40dfdc:	9b02      	ldr	r3, [sp, #8]
  40dfde:	07dd      	lsls	r5, r3, #31
  40dfe0:	f57f aa36 	bpl.w	40d450 <_svfprintf_r+0x3d8>
  40dfe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dfe6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40dfe8:	3301      	adds	r3, #1
  40dfea:	9812      	ldr	r0, [sp, #72]	; 0x48
  40dfec:	eb0a 0201 	add.w	r2, sl, r1
  40dff0:	f8cb 1004 	str.w	r1, [fp, #4]
  40dff4:	2b07      	cmp	r3, #7
  40dff6:	f8cb 0000 	str.w	r0, [fp]
  40dffa:	9223      	str	r2, [sp, #140]	; 0x8c
  40dffc:	9322      	str	r3, [sp, #136]	; 0x88
  40dffe:	f300 822c 	bgt.w	40e45a <_svfprintf_r+0x13e2>
  40e002:	f10b 0b08 	add.w	fp, fp, #8
  40e006:	4264      	negs	r4, r4
  40e008:	2c00      	cmp	r4, #0
  40e00a:	f340 8106 	ble.w	40e21a <_svfprintf_r+0x11a2>
  40e00e:	2c10      	cmp	r4, #16
  40e010:	4d1a      	ldr	r5, [pc, #104]	; (40e07c <_svfprintf_r+0x1004>)
  40e012:	f340 812f 	ble.w	40e274 <_svfprintf_r+0x11fc>
  40e016:	2610      	movs	r6, #16
  40e018:	9f05      	ldr	r7, [sp, #20]
  40e01a:	e003      	b.n	40e024 <_svfprintf_r+0xfac>
  40e01c:	3c10      	subs	r4, #16
  40e01e:	2c10      	cmp	r4, #16
  40e020:	f340 8128 	ble.w	40e274 <_svfprintf_r+0x11fc>
  40e024:	3301      	adds	r3, #1
  40e026:	3210      	adds	r2, #16
  40e028:	f8cb 5000 	str.w	r5, [fp]
  40e02c:	f10b 0b08 	add.w	fp, fp, #8
  40e030:	2b07      	cmp	r3, #7
  40e032:	f84b 6c04 	str.w	r6, [fp, #-4]
  40e036:	9223      	str	r2, [sp, #140]	; 0x8c
  40e038:	9322      	str	r3, [sp, #136]	; 0x88
  40e03a:	ddef      	ble.n	40e01c <_svfprintf_r+0xfa4>
  40e03c:	4638      	mov	r0, r7
  40e03e:	4649      	mov	r1, r9
  40e040:	aa21      	add	r2, sp, #132	; 0x84
  40e042:	46c3      	mov	fp, r8
  40e044:	f004 fa32 	bl	4124ac <__ssprint_r>
  40e048:	2800      	cmp	r0, #0
  40e04a:	f47f a8db 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e04e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40e050:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40e052:	e7e3      	b.n	40e01c <_svfprintf_r+0xfa4>
  40e054:	f041 0120 	orr.w	r1, r1, #32
  40e058:	785e      	ldrb	r6, [r3, #1]
  40e05a:	9102      	str	r1, [sp, #8]
  40e05c:	1c59      	adds	r1, r3, #1
  40e05e:	f7ff b861 	b.w	40d124 <_svfprintf_r+0xac>
  40e062:	9808      	ldr	r0, [sp, #32]
  40e064:	9109      	str	r1, [sp, #36]	; 0x24
  40e066:	4619      	mov	r1, r3
  40e068:	4240      	negs	r0, r0
  40e06a:	9008      	str	r0, [sp, #32]
  40e06c:	f7ff ba45 	b.w	40d4fa <_svfprintf_r+0x482>
  40e070:	3304      	adds	r3, #4
  40e072:	6814      	ldr	r4, [r2, #0]
  40e074:	2500      	movs	r5, #0
  40e076:	9309      	str	r3, [sp, #36]	; 0x24
  40e078:	f7ff bb30 	b.w	40d6dc <_svfprintf_r+0x664>
  40e07c:	00413dd0 	.word	0x00413dd0
  40e080:	00413dfc 	.word	0x00413dfc
  40e084:	00413df8 	.word	0x00413df8
  40e088:	00413e30 	.word	0x00413e30
  40e08c:	1c7c      	adds	r4, r7, #1
  40e08e:	f026 0520 	bic.w	r5, r6, #32
  40e092:	f000 8091 	beq.w	40e1b8 <_svfprintf_r+0x1140>
  40e096:	2d47      	cmp	r5, #71	; 0x47
  40e098:	f040 808f 	bne.w	40e1ba <_svfprintf_r+0x1142>
  40e09c:	2f00      	cmp	r7, #0
  40e09e:	f040 808c 	bne.w	40e1ba <_svfprintf_r+0x1142>
  40e0a2:	9a02      	ldr	r2, [sp, #8]
  40e0a4:	2547      	movs	r5, #71	; 0x47
  40e0a6:	2701      	movs	r7, #1
  40e0a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40e0ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40e0b0:	920a      	str	r2, [sp, #40]	; 0x28
  40e0b2:	2900      	cmp	r1, #0
  40e0b4:	f2c0 81de 	blt.w	40e474 <_svfprintf_r+0x13fc>
  40e0b8:	f04f 0a00 	mov.w	sl, #0
  40e0bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40e0c0:	aa1c      	add	r2, sp, #112	; 0x70
  40e0c2:	ab1f      	add	r3, sp, #124	; 0x7c
  40e0c4:	9805      	ldr	r0, [sp, #20]
  40e0c6:	2102      	movs	r1, #2
  40e0c8:	9200      	str	r2, [sp, #0]
  40e0ca:	463a      	mov	r2, r7
  40e0cc:	9301      	str	r3, [sp, #4]
  40e0ce:	ab1b      	add	r3, sp, #108	; 0x6c
  40e0d0:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40e0d4:	f001 f9d0 	bl	40f478 <_dtoa_r>
  40e0d8:	2d47      	cmp	r5, #71	; 0x47
  40e0da:	900b      	str	r0, [sp, #44]	; 0x2c
  40e0dc:	f040 8225 	bne.w	40e52a <_svfprintf_r+0x14b2>
  40e0e0:	9b02      	ldr	r3, [sp, #8]
  40e0e2:	07db      	lsls	r3, r3, #31
  40e0e4:	f140 81de 	bpl.w	40e4a4 <_svfprintf_r+0x142c>
  40e0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e0ea:	19dc      	adds	r4, r3, r7
  40e0ec:	2200      	movs	r2, #0
  40e0ee:	2300      	movs	r3, #0
  40e0f0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40e0f4:	f7fd f866 	bl	40b1c4 <__aeabi_dcmpeq>
  40e0f8:	2800      	cmp	r0, #0
  40e0fa:	f040 815a 	bne.w	40e3b2 <_svfprintf_r+0x133a>
  40e0fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e100:	429c      	cmp	r4, r3
  40e102:	d906      	bls.n	40e112 <_svfprintf_r+0x109a>
  40e104:	2130      	movs	r1, #48	; 0x30
  40e106:	1c5a      	adds	r2, r3, #1
  40e108:	921f      	str	r2, [sp, #124]	; 0x7c
  40e10a:	7019      	strb	r1, [r3, #0]
  40e10c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e10e:	429c      	cmp	r4, r3
  40e110:	d8f9      	bhi.n	40e106 <_svfprintf_r+0x108e>
  40e112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e114:	2d47      	cmp	r5, #71	; 0x47
  40e116:	eba3 0302 	sub.w	r3, r3, r2
  40e11a:	9310      	str	r3, [sp, #64]	; 0x40
  40e11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40e11e:	f040 8125 	bne.w	40e36c <_svfprintf_r+0x12f4>
  40e122:	429f      	cmp	r7, r3
  40e124:	f2c0 8152 	blt.w	40e3cc <_svfprintf_r+0x1354>
  40e128:	1cd8      	adds	r0, r3, #3
  40e12a:	f2c0 814f 	blt.w	40e3cc <_svfprintf_r+0x1354>
  40e12e:	2667      	movs	r6, #103	; 0x67
  40e130:	930d      	str	r3, [sp, #52]	; 0x34
  40e132:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e136:	4293      	cmp	r3, r2
  40e138:	f300 81a5 	bgt.w	40e486 <_svfprintf_r+0x140e>
  40e13c:	9b02      	ldr	r3, [sp, #8]
  40e13e:	07db      	lsls	r3, r3, #31
  40e140:	f100 81b2 	bmi.w	40e4a8 <_svfprintf_r+0x1430>
  40e144:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
  40e148:	9207      	str	r2, [sp, #28]
  40e14a:	f1ba 0f00 	cmp.w	sl, #0
  40e14e:	f040 8122 	bne.w	40e396 <_svfprintf_r+0x131e>
  40e152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e154:	9703      	str	r7, [sp, #12]
  40e156:	9302      	str	r3, [sp, #8]
  40e158:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  40e15c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40e160:	f7ff b89c 	b.w	40d29c <_svfprintf_r+0x224>
  40e164:	9805      	ldr	r0, [sp, #20]
  40e166:	4649      	mov	r1, r9
  40e168:	aa21      	add	r2, sp, #132	; 0x84
  40e16a:	f004 f99f 	bl	4124ac <__ssprint_r>
  40e16e:	2800      	cmp	r0, #0
  40e170:	f47f a848 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e174:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e178:	46c3      	mov	fp, r8
  40e17a:	f7ff bbe1 	b.w	40d940 <_svfprintf_r+0x8c8>
  40e17e:	9805      	ldr	r0, [sp, #20]
  40e180:	2140      	movs	r1, #64	; 0x40
  40e182:	f7fd f94d 	bl	40b420 <_malloc_r>
  40e186:	f8c9 0000 	str.w	r0, [r9]
  40e18a:	f8c9 0010 	str.w	r0, [r9, #16]
  40e18e:	2800      	cmp	r0, #0
  40e190:	f000 81d6 	beq.w	40e540 <_svfprintf_r+0x14c8>
  40e194:	2340      	movs	r3, #64	; 0x40
  40e196:	f8c9 3014 	str.w	r3, [r9, #20]
  40e19a:	f7fe bf85 	b.w	40d0a8 <_svfprintf_r+0x30>
  40e19e:	9805      	ldr	r0, [sp, #20]
  40e1a0:	4649      	mov	r1, r9
  40e1a2:	aa21      	add	r2, sp, #132	; 0x84
  40e1a4:	f004 f982 	bl	4124ac <__ssprint_r>
  40e1a8:	2800      	cmp	r0, #0
  40e1aa:	f47f a82b 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e1ae:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e1b0:	46c3      	mov	fp, r8
  40e1b2:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e1b6:	e70e      	b.n	40dfd6 <_svfprintf_r+0xf5e>
  40e1b8:	2706      	movs	r7, #6
  40e1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40e1bc:	9a02      	ldr	r2, [sp, #8]
  40e1be:	2b00      	cmp	r3, #0
  40e1c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40e1c4:	920a      	str	r2, [sp, #40]	; 0x28
  40e1c6:	f2c0 8155 	blt.w	40e474 <_svfprintf_r+0x13fc>
  40e1ca:	f04f 0a00 	mov.w	sl, #0
  40e1ce:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  40e1d2:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  40e1d6:	2d46      	cmp	r5, #70	; 0x46
  40e1d8:	f000 809d 	beq.w	40e316 <_svfprintf_r+0x129e>
  40e1dc:	2d45      	cmp	r5, #69	; 0x45
  40e1de:	f47f af6f 	bne.w	40e0c0 <_svfprintf_r+0x1048>
  40e1e2:	a91c      	add	r1, sp, #112	; 0x70
  40e1e4:	ab1f      	add	r3, sp, #124	; 0x7c
  40e1e6:	1c7c      	adds	r4, r7, #1
  40e1e8:	9805      	ldr	r0, [sp, #20]
  40e1ea:	e88d 000a 	stmia.w	sp, {r1, r3}
  40e1ee:	4622      	mov	r2, r4
  40e1f0:	2102      	movs	r1, #2
  40e1f2:	ab1b      	add	r3, sp, #108	; 0x6c
  40e1f4:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40e1f8:	f001 f93e 	bl	40f478 <_dtoa_r>
  40e1fc:	900b      	str	r0, [sp, #44]	; 0x2c
  40e1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e200:	441c      	add	r4, r3
  40e202:	e773      	b.n	40e0ec <_svfprintf_r+0x1074>
  40e204:	9805      	ldr	r0, [sp, #20]
  40e206:	4649      	mov	r1, r9
  40e208:	aa21      	add	r2, sp, #132	; 0x84
  40e20a:	f004 f94f 	bl	4124ac <__ssprint_r>
  40e20e:	2800      	cmp	r0, #0
  40e210:	f47e aff8 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e214:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40e216:	46c3      	mov	fp, r8
  40e218:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40e21a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e21c:	3301      	adds	r3, #1
  40e21e:	eb02 0a00 	add.w	sl, r2, r0
  40e222:	2b07      	cmp	r3, #7
  40e224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e226:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40e22a:	f8cb 2000 	str.w	r2, [fp]
  40e22e:	9322      	str	r3, [sp, #136]	; 0x88
  40e230:	f8cb 0004 	str.w	r0, [fp, #4]
  40e234:	f77f a90a 	ble.w	40d44c <_svfprintf_r+0x3d4>
  40e238:	e460      	b.n	40dafc <_svfprintf_r+0xa84>
  40e23a:	950c      	str	r5, [sp, #48]	; 0x30
  40e23c:	f7fd fe3e 	bl	40bebc <strlen>
  40e240:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40e244:	9007      	str	r0, [sp, #28]
  40e246:	9709      	str	r7, [sp, #36]	; 0x24
  40e248:	950d      	str	r5, [sp, #52]	; 0x34
  40e24a:	9303      	str	r3, [sp, #12]
  40e24c:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40e250:	f7ff b824 	b.w	40d29c <_svfprintf_r+0x224>
  40e254:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40e256:	4fb6      	ldr	r7, [pc, #728]	; (40e530 <_svfprintf_r+0x14b8>)
  40e258:	f7ff b86c 	b.w	40d334 <_svfprintf_r+0x2bc>
  40e25c:	9805      	ldr	r0, [sp, #20]
  40e25e:	4649      	mov	r1, r9
  40e260:	aa21      	add	r2, sp, #132	; 0x84
  40e262:	f004 f923 	bl	4124ac <__ssprint_r>
  40e266:	2800      	cmp	r0, #0
  40e268:	f47e afcc 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e26c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e270:	46c3      	mov	fp, r8
  40e272:	e4bc      	b.n	40dbee <_svfprintf_r+0xb76>
  40e274:	3301      	adds	r3, #1
  40e276:	4422      	add	r2, r4
  40e278:	f8cb 5000 	str.w	r5, [fp]
  40e27c:	2b07      	cmp	r3, #7
  40e27e:	9223      	str	r2, [sp, #140]	; 0x8c
  40e280:	9322      	str	r3, [sp, #136]	; 0x88
  40e282:	f8cb 4004 	str.w	r4, [fp, #4]
  40e286:	dcbd      	bgt.n	40e204 <_svfprintf_r+0x118c>
  40e288:	f10b 0b08 	add.w	fp, fp, #8
  40e28c:	e7c5      	b.n	40e21a <_svfprintf_r+0x11a2>
  40e28e:	9805      	ldr	r0, [sp, #20]
  40e290:	4649      	mov	r1, r9
  40e292:	aa21      	add	r2, sp, #132	; 0x84
  40e294:	f004 f90a 	bl	4124ac <__ssprint_r>
  40e298:	2800      	cmp	r0, #0
  40e29a:	f47e afb3 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e29e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40e2a0:	46c3      	mov	fp, r8
  40e2a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e2a4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e2a8:	1ad3      	subs	r3, r2, r3
  40e2aa:	e56d      	b.n	40dd88 <_svfprintf_r+0xd10>
  40e2ac:	9805      	ldr	r0, [sp, #20]
  40e2ae:	4649      	mov	r1, r9
  40e2b0:	aa21      	add	r2, sp, #132	; 0x84
  40e2b2:	f004 f8fb 	bl	4124ac <__ssprint_r>
  40e2b6:	2800      	cmp	r0, #0
  40e2b8:	f47e afa4 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40e2be:	46c3      	mov	fp, r8
  40e2c0:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e2c4:	e548      	b.n	40dd58 <_svfprintf_r+0xce0>
  40e2c6:	9805      	ldr	r0, [sp, #20]
  40e2c8:	4649      	mov	r1, r9
  40e2ca:	aa21      	add	r2, sp, #132	; 0x84
  40e2cc:	f004 f8ee 	bl	4124ac <__ssprint_r>
  40e2d0:	2800      	cmp	r0, #0
  40e2d2:	f47e af97 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e2d6:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e2da:	46c3      	mov	fp, r8
  40e2dc:	e531      	b.n	40dd42 <_svfprintf_r+0xcca>
  40e2de:	9b07      	ldr	r3, [sp, #28]
  40e2e0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40e2e4:	2b06      	cmp	r3, #6
  40e2e6:	9709      	str	r7, [sp, #36]	; 0x24
  40e2e8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  40e2ec:	bf28      	it	cs
  40e2ee:	2306      	movcs	r3, #6
  40e2f0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40e2f4:	9307      	str	r3, [sp, #28]
  40e2f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e2fa:	9303      	str	r3, [sp, #12]
  40e2fc:	4b8d      	ldr	r3, [pc, #564]	; (40e534 <_svfprintf_r+0x14bc>)
  40e2fe:	930b      	str	r3, [sp, #44]	; 0x2c
  40e300:	f7fe bfcc 	b.w	40d29c <_svfprintf_r+0x224>
  40e304:	4f8a      	ldr	r7, [pc, #552]	; (40e530 <_svfprintf_r+0x14b8>)
  40e306:	f7ff b8d2 	b.w	40d4ae <_svfprintf_r+0x436>
  40e30a:	232d      	movs	r3, #45	; 0x2d
  40e30c:	469c      	mov	ip, r3
  40e30e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40e312:	f7ff ba94 	b.w	40d83e <_svfprintf_r+0x7c6>
  40e316:	aa1c      	add	r2, sp, #112	; 0x70
  40e318:	ab1f      	add	r3, sp, #124	; 0x7c
  40e31a:	9805      	ldr	r0, [sp, #20]
  40e31c:	2103      	movs	r1, #3
  40e31e:	9200      	str	r2, [sp, #0]
  40e320:	463a      	mov	r2, r7
  40e322:	9301      	str	r3, [sp, #4]
  40e324:	ab1b      	add	r3, sp, #108	; 0x6c
  40e326:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40e32a:	f001 f8a5 	bl	40f478 <_dtoa_r>
  40e32e:	7803      	ldrb	r3, [r0, #0]
  40e330:	900b      	str	r0, [sp, #44]	; 0x2c
  40e332:	eb00 0c07 	add.w	ip, r0, r7
  40e336:	2b30      	cmp	r3, #48	; 0x30
  40e338:	f040 80af 	bne.w	40e49a <_svfprintf_r+0x1422>
  40e33c:	2200      	movs	r2, #0
  40e33e:	2300      	movs	r3, #0
  40e340:	f8cd c00c 	str.w	ip, [sp, #12]
  40e344:	f04f 0401 	mov.w	r4, #1
  40e348:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40e34c:	f7fc ff3a 	bl	40b1c4 <__aeabi_dcmpeq>
  40e350:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40e354:	b108      	cbz	r0, 40e35a <_svfprintf_r+0x12e2>
  40e356:	f04f 0400 	mov.w	r4, #0
  40e35a:	f014 0fff 	tst.w	r4, #255	; 0xff
  40e35e:	f000 809c 	beq.w	40e49a <_svfprintf_r+0x1422>
  40e362:	f1c7 0401 	rsb	r4, r7, #1
  40e366:	941b      	str	r4, [sp, #108]	; 0x6c
  40e368:	4464      	add	r4, ip
  40e36a:	e6bf      	b.n	40e0ec <_svfprintf_r+0x1074>
  40e36c:	2e65      	cmp	r6, #101	; 0x65
  40e36e:	dd2e      	ble.n	40e3ce <_svfprintf_r+0x1356>
  40e370:	2e66      	cmp	r6, #102	; 0x66
  40e372:	930d      	str	r3, [sp, #52]	; 0x34
  40e374:	f47f aedd 	bne.w	40e132 <_svfprintf_r+0x10ba>
  40e378:	2b00      	cmp	r3, #0
  40e37a:	f340 80ba 	ble.w	40e4f2 <_svfprintf_r+0x147a>
  40e37e:	2f00      	cmp	r7, #0
  40e380:	f040 80a2 	bne.w	40e4c8 <_svfprintf_r+0x1450>
  40e384:	9b02      	ldr	r3, [sp, #8]
  40e386:	07d9      	lsls	r1, r3, #31
  40e388:	f100 809e 	bmi.w	40e4c8 <_svfprintf_r+0x1450>
  40e38c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e38e:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
  40e392:	9207      	str	r2, [sp, #28]
  40e394:	e6d9      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e398:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40e39c:	9703      	str	r7, [sp, #12]
  40e39e:	9302      	str	r3, [sp, #8]
  40e3a0:	2300      	movs	r3, #0
  40e3a2:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40e3a6:	930c      	str	r3, [sp, #48]	; 0x30
  40e3a8:	f7fe bf7b 	b.w	40d2a2 <_svfprintf_r+0x22a>
  40e3ac:	4d62      	ldr	r5, [pc, #392]	; (40e538 <_svfprintf_r+0x14c0>)
  40e3ae:	f7ff bb48 	b.w	40da42 <_svfprintf_r+0x9ca>
  40e3b2:	4623      	mov	r3, r4
  40e3b4:	e6ad      	b.n	40e112 <_svfprintf_r+0x109a>
  40e3b6:	9b07      	ldr	r3, [sp, #28]
  40e3b8:	900c      	str	r0, [sp, #48]	; 0x30
  40e3ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e3be:	9709      	str	r7, [sp, #36]	; 0x24
  40e3c0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40e3c4:	9303      	str	r3, [sp, #12]
  40e3c6:	900d      	str	r0, [sp, #52]	; 0x34
  40e3c8:	f7fe bf68 	b.w	40d29c <_svfprintf_r+0x224>
  40e3cc:	3e02      	subs	r6, #2
  40e3ce:	3b01      	subs	r3, #1
  40e3d0:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  40e3d4:	2b00      	cmp	r3, #0
  40e3d6:	931b      	str	r3, [sp, #108]	; 0x6c
  40e3d8:	db7d      	blt.n	40e4d6 <_svfprintf_r+0x145e>
  40e3da:	222b      	movs	r2, #43	; 0x2b
  40e3dc:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40e3e0:	2b09      	cmp	r3, #9
  40e3e2:	dd69      	ble.n	40e4b8 <_svfprintf_r+0x1440>
  40e3e4:	f10d 0083 	add.w	r0, sp, #131	; 0x83
  40e3e8:	4601      	mov	r1, r0
  40e3ea:	4a54      	ldr	r2, [pc, #336]	; (40e53c <_svfprintf_r+0x14c4>)
  40e3ec:	fb82 2403 	smull	r2, r4, r2, r3
  40e3f0:	17da      	asrs	r2, r3, #31
  40e3f2:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40e3f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40e3fa:	2c09      	cmp	r4, #9
  40e3fc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40e400:	4623      	mov	r3, r4
  40e402:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40e406:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40e40a:	dcee      	bgt.n	40e3ea <_svfprintf_r+0x1372>
  40e40c:	3330      	adds	r3, #48	; 0x30
  40e40e:	460a      	mov	r2, r1
  40e410:	b2db      	uxtb	r3, r3
  40e412:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40e416:	4290      	cmp	r0, r2
  40e418:	f240 8099 	bls.w	40e54e <_svfprintf_r+0x14d6>
  40e41c:	460a      	mov	r2, r1
  40e41e:	f10d 0476 	add.w	r4, sp, #118	; 0x76
  40e422:	e001      	b.n	40e428 <_svfprintf_r+0x13b0>
  40e424:	f812 3b01 	ldrb.w	r3, [r2], #1
  40e428:	4282      	cmp	r2, r0
  40e42a:	f804 3b01 	strb.w	r3, [r4], #1
  40e42e:	d1f9      	bne.n	40e424 <_svfprintf_r+0x13ac>
  40e430:	ab21      	add	r3, sp, #132	; 0x84
  40e432:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40e436:	1a5b      	subs	r3, r3, r1
  40e438:	4413      	add	r3, r2
  40e43a:	aa1d      	add	r2, sp, #116	; 0x74
  40e43c:	1a9b      	subs	r3, r3, r2
  40e43e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e440:	9315      	str	r3, [sp, #84]	; 0x54
  40e442:	2a01      	cmp	r2, #1
  40e444:	4413      	add	r3, r2
  40e446:	9307      	str	r3, [sp, #28]
  40e448:	dd4a      	ble.n	40e4e0 <_svfprintf_r+0x1468>
  40e44a:	9b07      	ldr	r3, [sp, #28]
  40e44c:	2200      	movs	r2, #0
  40e44e:	3301      	adds	r3, #1
  40e450:	920d      	str	r2, [sp, #52]	; 0x34
  40e452:	9307      	str	r3, [sp, #28]
  40e454:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e458:	e677      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e45a:	9805      	ldr	r0, [sp, #20]
  40e45c:	4649      	mov	r1, r9
  40e45e:	aa21      	add	r2, sp, #132	; 0x84
  40e460:	f004 f824 	bl	4124ac <__ssprint_r>
  40e464:	2800      	cmp	r0, #0
  40e466:	f47e aecd 	bne.w	40d204 <_svfprintf_r+0x18c>
  40e46a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e46c:	46c3      	mov	fp, r8
  40e46e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40e470:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40e472:	e5c8      	b.n	40e006 <_svfprintf_r+0xf8e>
  40e474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40e478:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40e47c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40e480:	9016      	str	r0, [sp, #88]	; 0x58
  40e482:	9317      	str	r3, [sp, #92]	; 0x5c
  40e484:	e6a7      	b.n	40e1d6 <_svfprintf_r+0x115e>
  40e486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e488:	2b00      	cmp	r3, #0
  40e48a:	dd39      	ble.n	40e500 <_svfprintf_r+0x1488>
  40e48c:	2401      	movs	r4, #1
  40e48e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e490:	18e3      	adds	r3, r4, r3
  40e492:	9307      	str	r3, [sp, #28]
  40e494:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e498:	e657      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e49a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e49c:	4464      	add	r4, ip
  40e49e:	e625      	b.n	40e0ec <_svfprintf_r+0x1074>
  40e4a0:	4d25      	ldr	r5, [pc, #148]	; (40e538 <_svfprintf_r+0x14c0>)
  40e4a2:	e428      	b.n	40dcf6 <_svfprintf_r+0xc7e>
  40e4a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e4a6:	e634      	b.n	40e112 <_svfprintf_r+0x109a>
  40e4a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e4aa:	3301      	adds	r3, #1
  40e4ac:	9307      	str	r3, [sp, #28]
  40e4ae:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e4b2:	e64a      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e4b4:	4d20      	ldr	r5, [pc, #128]	; (40e538 <_svfprintf_r+0x14c0>)
  40e4b6:	e436      	b.n	40dd26 <_svfprintf_r+0xcae>
  40e4b8:	3330      	adds	r3, #48	; 0x30
  40e4ba:	2230      	movs	r2, #48	; 0x30
  40e4bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40e4c0:	ab1e      	add	r3, sp, #120	; 0x78
  40e4c2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  40e4c6:	e7b8      	b.n	40e43a <_svfprintf_r+0x13c2>
  40e4c8:	1c7c      	adds	r4, r7, #1
  40e4ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e4cc:	4423      	add	r3, r4
  40e4ce:	9307      	str	r3, [sp, #28]
  40e4d0:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e4d4:	e639      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e4d6:	222d      	movs	r2, #45	; 0x2d
  40e4d8:	425b      	negs	r3, r3
  40e4da:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40e4de:	e77f      	b.n	40e3e0 <_svfprintf_r+0x1368>
  40e4e0:	9b02      	ldr	r3, [sp, #8]
  40e4e2:	f013 0301 	ands.w	r3, r3, #1
  40e4e6:	d1b0      	bne.n	40e44a <_svfprintf_r+0x13d2>
  40e4e8:	930d      	str	r3, [sp, #52]	; 0x34
  40e4ea:	9b07      	ldr	r3, [sp, #28]
  40e4ec:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e4f0:	e62b      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e4f2:	b9af      	cbnz	r7, 40e520 <_svfprintf_r+0x14a8>
  40e4f4:	9b02      	ldr	r3, [sp, #8]
  40e4f6:	07da      	lsls	r2, r3, #31
  40e4f8:	d412      	bmi.n	40e520 <_svfprintf_r+0x14a8>
  40e4fa:	2701      	movs	r7, #1
  40e4fc:	9707      	str	r7, [sp, #28]
  40e4fe:	e624      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e500:	f1c3 0402 	rsb	r4, r3, #2
  40e504:	e7c3      	b.n	40e48e <_svfprintf_r+0x1416>
  40e506:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e508:	785e      	ldrb	r6, [r3, #1]
  40e50a:	4620      	mov	r0, r4
  40e50c:	6827      	ldr	r7, [r4, #0]
  40e50e:	3004      	adds	r0, #4
  40e510:	2f00      	cmp	r7, #0
  40e512:	9009      	str	r0, [sp, #36]	; 0x24
  40e514:	f6be ae06 	bge.w	40d124 <_svfprintf_r+0xac>
  40e518:	f04f 37ff 	mov.w	r7, #4294967295
  40e51c:	f7fe be02 	b.w	40d124 <_svfprintf_r+0xac>
  40e520:	1cbb      	adds	r3, r7, #2
  40e522:	9307      	str	r3, [sp, #28]
  40e524:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e528:	e60f      	b.n	40e14a <_svfprintf_r+0x10d2>
  40e52a:	463c      	mov	r4, r7
  40e52c:	e667      	b.n	40e1fe <_svfprintf_r+0x1186>
  40e52e:	bf00      	nop
  40e530:	00413de0 	.word	0x00413de0
  40e534:	00413e28 	.word	0x00413e28
  40e538:	00413dd0 	.word	0x00413dd0
  40e53c:	66666667 	.word	0x66666667
  40e540:	230c      	movs	r3, #12
  40e542:	9a05      	ldr	r2, [sp, #20]
  40e544:	f04f 30ff 	mov.w	r0, #4294967295
  40e548:	6013      	str	r3, [r2, #0]
  40e54a:	f7fe be64 	b.w	40d216 <_svfprintf_r+0x19e>
  40e54e:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40e552:	e772      	b.n	40e43a <_svfprintf_r+0x13c2>

0040e554 <__sprint_r.part.0>:
  40e554:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40e556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e55a:	049c      	lsls	r4, r3, #18
  40e55c:	460f      	mov	r7, r1
  40e55e:	4692      	mov	sl, r2
  40e560:	d52a      	bpl.n	40e5b8 <__sprint_r.part.0+0x64>
  40e562:	6893      	ldr	r3, [r2, #8]
  40e564:	6812      	ldr	r2, [r2, #0]
  40e566:	b32b      	cbz	r3, 40e5b4 <__sprint_r.part.0+0x60>
  40e568:	4680      	mov	r8, r0
  40e56a:	f102 0908 	add.w	r9, r2, #8
  40e56e:	e919 0060 	ldmdb	r9, {r5, r6}
  40e572:	08b6      	lsrs	r6, r6, #2
  40e574:	d016      	beq.n	40e5a4 <__sprint_r.part.0+0x50>
  40e576:	3d04      	subs	r5, #4
  40e578:	2400      	movs	r4, #0
  40e57a:	e001      	b.n	40e580 <__sprint_r.part.0+0x2c>
  40e57c:	42a6      	cmp	r6, r4
  40e57e:	d00f      	beq.n	40e5a0 <__sprint_r.part.0+0x4c>
  40e580:	4640      	mov	r0, r8
  40e582:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40e586:	463a      	mov	r2, r7
  40e588:	3401      	adds	r4, #1
  40e58a:	f002 f88f 	bl	4106ac <_fputwc_r>
  40e58e:	1c43      	adds	r3, r0, #1
  40e590:	d1f4      	bne.n	40e57c <__sprint_r.part.0+0x28>
  40e592:	2300      	movs	r3, #0
  40e594:	f8ca 3008 	str.w	r3, [sl, #8]
  40e598:	f8ca 3004 	str.w	r3, [sl, #4]
  40e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e5a0:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e5a4:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40e5a8:	f109 0908 	add.w	r9, r9, #8
  40e5ac:	f8ca 3008 	str.w	r3, [sl, #8]
  40e5b0:	2b00      	cmp	r3, #0
  40e5b2:	d1dc      	bne.n	40e56e <__sprint_r.part.0+0x1a>
  40e5b4:	2000      	movs	r0, #0
  40e5b6:	e7ec      	b.n	40e592 <__sprint_r.part.0+0x3e>
  40e5b8:	f002 f9b0 	bl	41091c <__sfvwrite_r>
  40e5bc:	2300      	movs	r3, #0
  40e5be:	f8ca 3008 	str.w	r3, [sl, #8]
  40e5c2:	f8ca 3004 	str.w	r3, [sl, #4]
  40e5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e5ca:	bf00      	nop

0040e5cc <_vfiprintf_r>:
  40e5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e5d0:	461c      	mov	r4, r3
  40e5d2:	b0ad      	sub	sp, #180	; 0xb4
  40e5d4:	4692      	mov	sl, r2
  40e5d6:	9101      	str	r1, [sp, #4]
  40e5d8:	9002      	str	r0, [sp, #8]
  40e5da:	9406      	str	r4, [sp, #24]
  40e5dc:	b118      	cbz	r0, 40e5e6 <_vfiprintf_r+0x1a>
  40e5de:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e5e0:	2b00      	cmp	r3, #0
  40e5e2:	f000 80de 	beq.w	40e7a2 <_vfiprintf_r+0x1d6>
  40e5e6:	9b01      	ldr	r3, [sp, #4]
  40e5e8:	8999      	ldrh	r1, [r3, #12]
  40e5ea:	b28a      	uxth	r2, r1
  40e5ec:	0490      	lsls	r0, r2, #18
  40e5ee:	d408      	bmi.n	40e602 <_vfiprintf_r+0x36>
  40e5f0:	461d      	mov	r5, r3
  40e5f2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40e5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40e5f8:	b28a      	uxth	r2, r1
  40e5fa:	81a9      	strh	r1, [r5, #12]
  40e5fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e600:	666b      	str	r3, [r5, #100]	; 0x64
  40e602:	0711      	lsls	r1, r2, #28
  40e604:	f140 80ad 	bpl.w	40e762 <_vfiprintf_r+0x196>
  40e608:	9b01      	ldr	r3, [sp, #4]
  40e60a:	691b      	ldr	r3, [r3, #16]
  40e60c:	2b00      	cmp	r3, #0
  40e60e:	f000 80a8 	beq.w	40e762 <_vfiprintf_r+0x196>
  40e612:	f002 021a 	and.w	r2, r2, #26
  40e616:	2a0a      	cmp	r2, #10
  40e618:	f000 80af 	beq.w	40e77a <_vfiprintf_r+0x1ae>
  40e61c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40e620:	2300      	movs	r3, #0
  40e622:	465c      	mov	r4, fp
  40e624:	930a      	str	r3, [sp, #40]	; 0x28
  40e626:	9311      	str	r3, [sp, #68]	; 0x44
  40e628:	9303      	str	r3, [sp, #12]
  40e62a:	9310      	str	r3, [sp, #64]	; 0x40
  40e62c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40e630:	f89a 3000 	ldrb.w	r3, [sl]
  40e634:	4655      	mov	r5, sl
  40e636:	2b25      	cmp	r3, #37	; 0x25
  40e638:	d01c      	beq.n	40e674 <_vfiprintf_r+0xa8>
  40e63a:	b90b      	cbnz	r3, 40e640 <_vfiprintf_r+0x74>
  40e63c:	e01a      	b.n	40e674 <_vfiprintf_r+0xa8>
  40e63e:	b11b      	cbz	r3, 40e648 <_vfiprintf_r+0x7c>
  40e640:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40e644:	2b25      	cmp	r3, #37	; 0x25
  40e646:	d1fa      	bne.n	40e63e <_vfiprintf_r+0x72>
  40e648:	ebb5 060a 	subs.w	r6, r5, sl
  40e64c:	d012      	beq.n	40e674 <_vfiprintf_r+0xa8>
  40e64e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e650:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e652:	3301      	adds	r3, #1
  40e654:	f8c4 a000 	str.w	sl, [r4]
  40e658:	4432      	add	r2, r6
  40e65a:	6066      	str	r6, [r4, #4]
  40e65c:	2b07      	cmp	r3, #7
  40e65e:	9310      	str	r3, [sp, #64]	; 0x40
  40e660:	9211      	str	r2, [sp, #68]	; 0x44
  40e662:	dd79      	ble.n	40e758 <_vfiprintf_r+0x18c>
  40e664:	2a00      	cmp	r2, #0
  40e666:	f040 84a5 	bne.w	40efb4 <_vfiprintf_r+0x9e8>
  40e66a:	9b03      	ldr	r3, [sp, #12]
  40e66c:	465c      	mov	r4, fp
  40e66e:	9210      	str	r2, [sp, #64]	; 0x40
  40e670:	4433      	add	r3, r6
  40e672:	9303      	str	r3, [sp, #12]
  40e674:	782b      	ldrb	r3, [r5, #0]
  40e676:	2b00      	cmp	r3, #0
  40e678:	f000 833a 	beq.w	40ecf0 <_vfiprintf_r+0x724>
  40e67c:	2100      	movs	r1, #0
  40e67e:	f04f 0300 	mov.w	r3, #0
  40e682:	f04f 38ff 	mov.w	r8, #4294967295
  40e686:	1c68      	adds	r0, r5, #1
  40e688:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40e68c:	4689      	mov	r9, r1
  40e68e:	786b      	ldrb	r3, [r5, #1]
  40e690:	4646      	mov	r6, r8
  40e692:	460d      	mov	r5, r1
  40e694:	f100 0a01 	add.w	sl, r0, #1
  40e698:	f1a3 0220 	sub.w	r2, r3, #32
  40e69c:	2a58      	cmp	r2, #88	; 0x58
  40e69e:	f200 8301 	bhi.w	40eca4 <_vfiprintf_r+0x6d8>
  40e6a2:	e8df f012 	tbh	[pc, r2, lsl #1]
  40e6a6:	0247      	.short	0x0247
  40e6a8:	02ff02ff 	.word	0x02ff02ff
  40e6ac:	02ff0255 	.word	0x02ff0255
  40e6b0:	02ff02ff 	.word	0x02ff02ff
  40e6b4:	02ff02ff 	.word	0x02ff02ff
  40e6b8:	025b02ff 	.word	0x025b02ff
  40e6bc:	02ff0268 	.word	0x02ff0268
  40e6c0:	01ba0181 	.word	0x01ba0181
  40e6c4:	028702ff 	.word	0x028702ff
  40e6c8:	028d028d 	.word	0x028d028d
  40e6cc:	028d028d 	.word	0x028d028d
  40e6d0:	028d028d 	.word	0x028d028d
  40e6d4:	028d028d 	.word	0x028d028d
  40e6d8:	02ff028d 	.word	0x02ff028d
  40e6dc:	02ff02ff 	.word	0x02ff02ff
  40e6e0:	02ff02ff 	.word	0x02ff02ff
  40e6e4:	02ff02ff 	.word	0x02ff02ff
  40e6e8:	02ff02ff 	.word	0x02ff02ff
  40e6ec:	029b02ff 	.word	0x029b02ff
  40e6f0:	02ff02ff 	.word	0x02ff02ff
  40e6f4:	02ff02ff 	.word	0x02ff02ff
  40e6f8:	02ff02ff 	.word	0x02ff02ff
  40e6fc:	02ff02ff 	.word	0x02ff02ff
  40e700:	02ff02ff 	.word	0x02ff02ff
  40e704:	02ff02b6 	.word	0x02ff02b6
  40e708:	02ff02ff 	.word	0x02ff02ff
  40e70c:	02ff02ff 	.word	0x02ff02ff
  40e710:	02ff02ce 	.word	0x02ff02ce
  40e714:	02e602ff 	.word	0x02e602ff
  40e718:	02ff02ff 	.word	0x02ff02ff
  40e71c:	02ff02ff 	.word	0x02ff02ff
  40e720:	02ff02ff 	.word	0x02ff02ff
  40e724:	02ff02ff 	.word	0x02ff02ff
  40e728:	02ff02ff 	.word	0x02ff02ff
  40e72c:	022b0219 	.word	0x022b0219
  40e730:	02ff02ff 	.word	0x02ff02ff
  40e734:	021302ff 	.word	0x021302ff
  40e738:	02ff022b 	.word	0x02ff022b
  40e73c:	01f902ff 	.word	0x01f902ff
  40e740:	020202ff 	.word	0x020202ff
  40e744:	026d0187 	.word	0x026d0187
  40e748:	02ff0281 	.word	0x02ff0281
  40e74c:	02ff0198 	.word	0x02ff0198
  40e750:	02ff0081 	.word	0x02ff0081
  40e754:	01d502ff 	.word	0x01d502ff
  40e758:	3408      	adds	r4, #8
  40e75a:	9b03      	ldr	r3, [sp, #12]
  40e75c:	4433      	add	r3, r6
  40e75e:	9303      	str	r3, [sp, #12]
  40e760:	e788      	b.n	40e674 <_vfiprintf_r+0xa8>
  40e762:	9802      	ldr	r0, [sp, #8]
  40e764:	9901      	ldr	r1, [sp, #4]
  40e766:	f000 fd6b 	bl	40f240 <__swsetup_r>
  40e76a:	b9a8      	cbnz	r0, 40e798 <_vfiprintf_r+0x1cc>
  40e76c:	9b01      	ldr	r3, [sp, #4]
  40e76e:	899a      	ldrh	r2, [r3, #12]
  40e770:	f002 021a 	and.w	r2, r2, #26
  40e774:	2a0a      	cmp	r2, #10
  40e776:	f47f af51 	bne.w	40e61c <_vfiprintf_r+0x50>
  40e77a:	9b01      	ldr	r3, [sp, #4]
  40e77c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40e780:	2b00      	cmp	r3, #0
  40e782:	f6ff af4b 	blt.w	40e61c <_vfiprintf_r+0x50>
  40e786:	9901      	ldr	r1, [sp, #4]
  40e788:	4652      	mov	r2, sl
  40e78a:	4623      	mov	r3, r4
  40e78c:	9802      	ldr	r0, [sp, #8]
  40e78e:	f000 fd17 	bl	40f1c0 <__sbprintf>
  40e792:	b02d      	add	sp, #180	; 0xb4
  40e794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e798:	f04f 30ff 	mov.w	r0, #4294967295
  40e79c:	b02d      	add	sp, #180	; 0xb4
  40e79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e7a2:	f001 ff0b 	bl	4105bc <__sinit>
  40e7a6:	e71e      	b.n	40e5e6 <_vfiprintf_r+0x1a>
  40e7a8:	f019 0f20 	tst.w	r9, #32
  40e7ac:	9505      	str	r5, [sp, #20]
  40e7ae:	46b0      	mov	r8, r6
  40e7b0:	9a06      	ldr	r2, [sp, #24]
  40e7b2:	f000 824f 	beq.w	40ec54 <_vfiprintf_r+0x688>
  40e7b6:	3207      	adds	r2, #7
  40e7b8:	2301      	movs	r3, #1
  40e7ba:	f022 0207 	bic.w	r2, r2, #7
  40e7be:	f102 0108 	add.w	r1, r2, #8
  40e7c2:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e7c6:	9106      	str	r1, [sp, #24]
  40e7c8:	f04f 0200 	mov.w	r2, #0
  40e7cc:	2500      	movs	r5, #0
  40e7ce:	f8cd 8010 	str.w	r8, [sp, #16]
  40e7d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e7d6:	f1b8 0f00 	cmp.w	r8, #0
  40e7da:	db01      	blt.n	40e7e0 <_vfiprintf_r+0x214>
  40e7dc:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  40e7e0:	f1b8 0f00 	cmp.w	r8, #0
  40e7e4:	f040 8294 	bne.w	40ed10 <_vfiprintf_r+0x744>
  40e7e8:	ea56 0207 	orrs.w	r2, r6, r7
  40e7ec:	bf14      	ite	ne
  40e7ee:	2201      	movne	r2, #1
  40e7f0:	2200      	moveq	r2, #0
  40e7f2:	2a00      	cmp	r2, #0
  40e7f4:	f040 828c 	bne.w	40ed10 <_vfiprintf_r+0x744>
  40e7f8:	2b00      	cmp	r3, #0
  40e7fa:	f040 8372 	bne.w	40eee2 <_vfiprintf_r+0x916>
  40e7fe:	f019 0f01 	tst.w	r9, #1
  40e802:	f000 83a3 	beq.w	40ef4c <_vfiprintf_r+0x980>
  40e806:	ab2c      	add	r3, sp, #176	; 0xb0
  40e808:	2230      	movs	r2, #48	; 0x30
  40e80a:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40e80e:	ebc3 080b 	rsb	r8, r3, fp
  40e812:	9308      	str	r3, [sp, #32]
  40e814:	9b04      	ldr	r3, [sp, #16]
  40e816:	4543      	cmp	r3, r8
  40e818:	bfb8      	it	lt
  40e81a:	4643      	movlt	r3, r8
  40e81c:	461f      	mov	r7, r3
  40e81e:	b105      	cbz	r5, 40e822 <_vfiprintf_r+0x256>
  40e820:	3701      	adds	r7, #1
  40e822:	f019 0c02 	ands.w	ip, r9, #2
  40e826:	d000      	beq.n	40e82a <_vfiprintf_r+0x25e>
  40e828:	3702      	adds	r7, #2
  40e82a:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  40e82e:	9307      	str	r3, [sp, #28]
  40e830:	f040 8247 	bne.w	40ecc2 <_vfiprintf_r+0x6f6>
  40e834:	9b05      	ldr	r3, [sp, #20]
  40e836:	1bdd      	subs	r5, r3, r7
  40e838:	2d00      	cmp	r5, #0
  40e83a:	f340 8242 	ble.w	40ecc2 <_vfiprintf_r+0x6f6>
  40e83e:	2d10      	cmp	r5, #16
  40e840:	f340 848b 	ble.w	40f15a <_vfiprintf_r+0xb8e>
  40e844:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40e848:	2310      	movs	r3, #16
  40e84a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e84c:	4ebd      	ldr	r6, [pc, #756]	; (40eb44 <_vfiprintf_r+0x578>)
  40e84e:	4671      	mov	r1, lr
  40e850:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e854:	e006      	b.n	40e864 <_vfiprintf_r+0x298>
  40e856:	4611      	mov	r1, r2
  40e858:	f04f 0e01 	mov.w	lr, #1
  40e85c:	465c      	mov	r4, fp
  40e85e:	3d10      	subs	r5, #16
  40e860:	2d10      	cmp	r5, #16
  40e862:	dd20      	ble.n	40e8a6 <_vfiprintf_r+0x2da>
  40e864:	1c48      	adds	r0, r1, #1
  40e866:	3210      	adds	r2, #16
  40e868:	6026      	str	r6, [r4, #0]
  40e86a:	f101 0e02 	add.w	lr, r1, #2
  40e86e:	2807      	cmp	r0, #7
  40e870:	6063      	str	r3, [r4, #4]
  40e872:	9211      	str	r2, [sp, #68]	; 0x44
  40e874:	4601      	mov	r1, r0
  40e876:	f104 0408 	add.w	r4, r4, #8
  40e87a:	9010      	str	r0, [sp, #64]	; 0x40
  40e87c:	ddef      	ble.n	40e85e <_vfiprintf_r+0x292>
  40e87e:	2a00      	cmp	r2, #0
  40e880:	d0e9      	beq.n	40e856 <_vfiprintf_r+0x28a>
  40e882:	9802      	ldr	r0, [sp, #8]
  40e884:	aa0f      	add	r2, sp, #60	; 0x3c
  40e886:	9901      	ldr	r1, [sp, #4]
  40e888:	465c      	mov	r4, fp
  40e88a:	9309      	str	r3, [sp, #36]	; 0x24
  40e88c:	f7ff fe62 	bl	40e554 <__sprint_r.part.0>
  40e890:	2800      	cmp	r0, #0
  40e892:	f040 8234 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40e896:	3d10      	subs	r5, #16
  40e898:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e89a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e89c:	2d10      	cmp	r5, #16
  40e89e:	f101 0e01 	add.w	lr, r1, #1
  40e8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e8a4:	dcde      	bgt.n	40e864 <_vfiprintf_r+0x298>
  40e8a6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40e8aa:	4671      	mov	r1, lr
  40e8ac:	442a      	add	r2, r5
  40e8ae:	2907      	cmp	r1, #7
  40e8b0:	6026      	str	r6, [r4, #0]
  40e8b2:	6065      	str	r5, [r4, #4]
  40e8b4:	9211      	str	r2, [sp, #68]	; 0x44
  40e8b6:	9110      	str	r1, [sp, #64]	; 0x40
  40e8b8:	f300 8330 	bgt.w	40ef1c <_vfiprintf_r+0x950>
  40e8bc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40e8c0:	3408      	adds	r4, #8
  40e8c2:	1c48      	adds	r0, r1, #1
  40e8c4:	2b00      	cmp	r3, #0
  40e8c6:	f040 8204 	bne.w	40ecd2 <_vfiprintf_r+0x706>
  40e8ca:	f1bc 0f00 	cmp.w	ip, #0
  40e8ce:	d00c      	beq.n	40e8ea <_vfiprintf_r+0x31e>
  40e8d0:	3202      	adds	r2, #2
  40e8d2:	a90e      	add	r1, sp, #56	; 0x38
  40e8d4:	2302      	movs	r3, #2
  40e8d6:	2807      	cmp	r0, #7
  40e8d8:	9010      	str	r0, [sp, #64]	; 0x40
  40e8da:	9211      	str	r2, [sp, #68]	; 0x44
  40e8dc:	e884 000a 	stmia.w	r4, {r1, r3}
  40e8e0:	f300 82f8 	bgt.w	40eed4 <_vfiprintf_r+0x908>
  40e8e4:	4601      	mov	r1, r0
  40e8e6:	3408      	adds	r4, #8
  40e8e8:	3001      	adds	r0, #1
  40e8ea:	9b07      	ldr	r3, [sp, #28]
  40e8ec:	2b80      	cmp	r3, #128	; 0x80
  40e8ee:	f000 8298 	beq.w	40ee22 <_vfiprintf_r+0x856>
  40e8f2:	9b04      	ldr	r3, [sp, #16]
  40e8f4:	ebc8 0503 	rsb	r5, r8, r3
  40e8f8:	2d00      	cmp	r5, #0
  40e8fa:	dd38      	ble.n	40e96e <_vfiprintf_r+0x3a2>
  40e8fc:	2d10      	cmp	r5, #16
  40e8fe:	4e92      	ldr	r6, [pc, #584]	; (40eb48 <_vfiprintf_r+0x57c>)
  40e900:	bfc8      	it	gt
  40e902:	2310      	movgt	r3, #16
  40e904:	dc07      	bgt.n	40e916 <_vfiprintf_r+0x34a>
  40e906:	e028      	b.n	40e95a <_vfiprintf_r+0x38e>
  40e908:	f04f 0e01 	mov.w	lr, #1
  40e90c:	4611      	mov	r1, r2
  40e90e:	465c      	mov	r4, fp
  40e910:	3d10      	subs	r5, #16
  40e912:	2d10      	cmp	r5, #16
  40e914:	dd20      	ble.n	40e958 <_vfiprintf_r+0x38c>
  40e916:	1c48      	adds	r0, r1, #1
  40e918:	3210      	adds	r2, #16
  40e91a:	6026      	str	r6, [r4, #0]
  40e91c:	f101 0e02 	add.w	lr, r1, #2
  40e920:	2807      	cmp	r0, #7
  40e922:	6063      	str	r3, [r4, #4]
  40e924:	9211      	str	r2, [sp, #68]	; 0x44
  40e926:	4601      	mov	r1, r0
  40e928:	f104 0408 	add.w	r4, r4, #8
  40e92c:	9010      	str	r0, [sp, #64]	; 0x40
  40e92e:	ddef      	ble.n	40e910 <_vfiprintf_r+0x344>
  40e930:	2a00      	cmp	r2, #0
  40e932:	d0e9      	beq.n	40e908 <_vfiprintf_r+0x33c>
  40e934:	9802      	ldr	r0, [sp, #8]
  40e936:	aa0f      	add	r2, sp, #60	; 0x3c
  40e938:	9901      	ldr	r1, [sp, #4]
  40e93a:	465c      	mov	r4, fp
  40e93c:	9304      	str	r3, [sp, #16]
  40e93e:	f7ff fe09 	bl	40e554 <__sprint_r.part.0>
  40e942:	2800      	cmp	r0, #0
  40e944:	f040 81db 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40e948:	3d10      	subs	r5, #16
  40e94a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e94c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e94e:	2d10      	cmp	r5, #16
  40e950:	f101 0e01 	add.w	lr, r1, #1
  40e954:	9b04      	ldr	r3, [sp, #16]
  40e956:	dcde      	bgt.n	40e916 <_vfiprintf_r+0x34a>
  40e958:	4670      	mov	r0, lr
  40e95a:	442a      	add	r2, r5
  40e95c:	2807      	cmp	r0, #7
  40e95e:	6026      	str	r6, [r4, #0]
  40e960:	6065      	str	r5, [r4, #4]
  40e962:	9211      	str	r2, [sp, #68]	; 0x44
  40e964:	9010      	str	r0, [sp, #64]	; 0x40
  40e966:	f300 81ef 	bgt.w	40ed48 <_vfiprintf_r+0x77c>
  40e96a:	3408      	adds	r4, #8
  40e96c:	3001      	adds	r0, #1
  40e96e:	eb02 0308 	add.w	r3, r2, r8
  40e972:	2807      	cmp	r0, #7
  40e974:	9a08      	ldr	r2, [sp, #32]
  40e976:	9311      	str	r3, [sp, #68]	; 0x44
  40e978:	9010      	str	r0, [sp, #64]	; 0x40
  40e97a:	e884 0104 	stmia.w	r4, {r2, r8}
  40e97e:	f340 81f0 	ble.w	40ed62 <_vfiprintf_r+0x796>
  40e982:	2b00      	cmp	r3, #0
  40e984:	f040 82f2 	bne.w	40ef6c <_vfiprintf_r+0x9a0>
  40e988:	f019 0f04 	tst.w	r9, #4
  40e98c:	9310      	str	r3, [sp, #64]	; 0x40
  40e98e:	f040 82d6 	bne.w	40ef3e <_vfiprintf_r+0x972>
  40e992:	9b03      	ldr	r3, [sp, #12]
  40e994:	9a05      	ldr	r2, [sp, #20]
  40e996:	4297      	cmp	r7, r2
  40e998:	bfac      	ite	ge
  40e99a:	19db      	addge	r3, r3, r7
  40e99c:	189b      	addlt	r3, r3, r2
  40e99e:	9303      	str	r3, [sp, #12]
  40e9a0:	2300      	movs	r3, #0
  40e9a2:	465c      	mov	r4, fp
  40e9a4:	9310      	str	r3, [sp, #64]	; 0x40
  40e9a6:	e643      	b.n	40e630 <_vfiprintf_r+0x64>
  40e9a8:	4650      	mov	r0, sl
  40e9aa:	f049 0904 	orr.w	r9, r9, #4
  40e9ae:	f89a 3000 	ldrb.w	r3, [sl]
  40e9b2:	e66f      	b.n	40e694 <_vfiprintf_r+0xc8>
  40e9b4:	f019 0320 	ands.w	r3, r9, #32
  40e9b8:	9505      	str	r5, [sp, #20]
  40e9ba:	46b0      	mov	r8, r6
  40e9bc:	f000 8131 	beq.w	40ec22 <_vfiprintf_r+0x656>
  40e9c0:	9a06      	ldr	r2, [sp, #24]
  40e9c2:	2300      	movs	r3, #0
  40e9c4:	3207      	adds	r2, #7
  40e9c6:	f022 0207 	bic.w	r2, r2, #7
  40e9ca:	f102 0108 	add.w	r1, r2, #8
  40e9ce:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e9d2:	9106      	str	r1, [sp, #24]
  40e9d4:	e6f8      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40e9d6:	9a06      	ldr	r2, [sp, #24]
  40e9d8:	46b0      	mov	r8, r6
  40e9da:	9505      	str	r5, [sp, #20]
  40e9dc:	6813      	ldr	r3, [r2, #0]
  40e9de:	1d16      	adds	r6, r2, #4
  40e9e0:	f04f 0200 	mov.w	r2, #0
  40e9e4:	9308      	str	r3, [sp, #32]
  40e9e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e9ea:	2b00      	cmp	r3, #0
  40e9ec:	f000 83bb 	beq.w	40f166 <_vfiprintf_r+0xb9a>
  40e9f0:	f1b8 0f00 	cmp.w	r8, #0
  40e9f4:	f2c0 8398 	blt.w	40f128 <_vfiprintf_r+0xb5c>
  40e9f8:	9d08      	ldr	r5, [sp, #32]
  40e9fa:	2100      	movs	r1, #0
  40e9fc:	4642      	mov	r2, r8
  40e9fe:	4628      	mov	r0, r5
  40ea00:	f002 fd62 	bl	4114c8 <memchr>
  40ea04:	2800      	cmp	r0, #0
  40ea06:	f000 83be 	beq.w	40f186 <_vfiprintf_r+0xbba>
  40ea0a:	2300      	movs	r3, #0
  40ea0c:	ebc5 0800 	rsb	r8, r5, r0
  40ea10:	9606      	str	r6, [sp, #24]
  40ea12:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40ea16:	9304      	str	r3, [sp, #16]
  40ea18:	e6fc      	b.n	40e814 <_vfiprintf_r+0x248>
  40ea1a:	f89a 3000 	ldrb.w	r3, [sl]
  40ea1e:	f10a 0001 	add.w	r0, sl, #1
  40ea22:	2b2a      	cmp	r3, #42	; 0x2a
  40ea24:	f000 83b8 	beq.w	40f198 <_vfiprintf_r+0xbcc>
  40ea28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ea2c:	4682      	mov	sl, r0
  40ea2e:	2600      	movs	r6, #0
  40ea30:	2a09      	cmp	r2, #9
  40ea32:	f63f ae31 	bhi.w	40e698 <_vfiprintf_r+0xcc>
  40ea36:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40ea3a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ea3e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40ea42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ea46:	2a09      	cmp	r2, #9
  40ea48:	d9f5      	bls.n	40ea36 <_vfiprintf_r+0x46a>
  40ea4a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40ea4e:	e623      	b.n	40e698 <_vfiprintf_r+0xcc>
  40ea50:	4a3e      	ldr	r2, [pc, #248]	; (40eb4c <_vfiprintf_r+0x580>)
  40ea52:	f019 0f20 	tst.w	r9, #32
  40ea56:	9505      	str	r5, [sp, #20]
  40ea58:	46b0      	mov	r8, r6
  40ea5a:	920a      	str	r2, [sp, #40]	; 0x28
  40ea5c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40ea60:	f000 8111 	beq.w	40ec86 <_vfiprintf_r+0x6ba>
  40ea64:	9a06      	ldr	r2, [sp, #24]
  40ea66:	3207      	adds	r2, #7
  40ea68:	f022 0207 	bic.w	r2, r2, #7
  40ea6c:	f102 0108 	add.w	r1, r2, #8
  40ea70:	e9d2 6700 	ldrd	r6, r7, [r2]
  40ea74:	9106      	str	r1, [sp, #24]
  40ea76:	f019 0f01 	tst.w	r9, #1
  40ea7a:	f000 824d 	beq.w	40ef18 <_vfiprintf_r+0x94c>
  40ea7e:	ea56 0207 	orrs.w	r2, r6, r7
  40ea82:	f000 8249 	beq.w	40ef18 <_vfiprintf_r+0x94c>
  40ea86:	2230      	movs	r2, #48	; 0x30
  40ea88:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40ea8c:	f049 0902 	orr.w	r9, r9, #2
  40ea90:	2302      	movs	r3, #2
  40ea92:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  40ea96:	e697      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40ea98:	f89a 3000 	ldrb.w	r3, [sl]
  40ea9c:	2b6c      	cmp	r3, #108	; 0x6c
  40ea9e:	f000 8337 	beq.w	40f110 <_vfiprintf_r+0xb44>
  40eaa2:	f049 0910 	orr.w	r9, r9, #16
  40eaa6:	4650      	mov	r0, sl
  40eaa8:	e5f4      	b.n	40e694 <_vfiprintf_r+0xc8>
  40eaaa:	f019 0f20 	tst.w	r9, #32
  40eaae:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40eab2:	f000 8305 	beq.w	40f0c0 <_vfiprintf_r+0xaf4>
  40eab6:	9903      	ldr	r1, [sp, #12]
  40eab8:	9a06      	ldr	r2, [sp, #24]
  40eaba:	17cf      	asrs	r7, r1, #31
  40eabc:	4608      	mov	r0, r1
  40eabe:	6813      	ldr	r3, [r2, #0]
  40eac0:	3204      	adds	r2, #4
  40eac2:	4639      	mov	r1, r7
  40eac4:	9206      	str	r2, [sp, #24]
  40eac6:	e9c3 0100 	strd	r0, r1, [r3]
  40eaca:	e5b1      	b.n	40e630 <_vfiprintf_r+0x64>
  40eacc:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  40ead0:	f89a 3000 	ldrb.w	r3, [sl]
  40ead4:	4650      	mov	r0, sl
  40ead6:	e5dd      	b.n	40e694 <_vfiprintf_r+0xc8>
  40ead8:	9a06      	ldr	r2, [sp, #24]
  40eada:	2701      	movs	r7, #1
  40eadc:	f04f 0100 	mov.w	r1, #0
  40eae0:	9505      	str	r5, [sp, #20]
  40eae2:	6813      	ldr	r3, [r2, #0]
  40eae4:	3204      	adds	r2, #4
  40eae6:	46b8      	mov	r8, r7
  40eae8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40eaec:	9206      	str	r2, [sp, #24]
  40eaee:	aa12      	add	r2, sp, #72	; 0x48
  40eaf0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40eaf4:	9208      	str	r2, [sp, #32]
  40eaf6:	2300      	movs	r3, #0
  40eaf8:	9304      	str	r3, [sp, #16]
  40eafa:	e692      	b.n	40e822 <_vfiprintf_r+0x256>
  40eafc:	f019 0f20 	tst.w	r9, #32
  40eb00:	9505      	str	r5, [sp, #20]
  40eb02:	46b0      	mov	r8, r6
  40eb04:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40eb08:	d071      	beq.n	40ebee <_vfiprintf_r+0x622>
  40eb0a:	9906      	ldr	r1, [sp, #24]
  40eb0c:	3107      	adds	r1, #7
  40eb0e:	f021 0107 	bic.w	r1, r1, #7
  40eb12:	e9d1 2300 	ldrd	r2, r3, [r1]
  40eb16:	3108      	adds	r1, #8
  40eb18:	4616      	mov	r6, r2
  40eb1a:	461f      	mov	r7, r3
  40eb1c:	9106      	str	r1, [sp, #24]
  40eb1e:	2a00      	cmp	r2, #0
  40eb20:	f173 0300 	sbcs.w	r3, r3, #0
  40eb24:	f2c0 82b1 	blt.w	40f08a <_vfiprintf_r+0xabe>
  40eb28:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40eb2c:	2301      	movs	r3, #1
  40eb2e:	f8cd 8010 	str.w	r8, [sp, #16]
  40eb32:	e650      	b.n	40e7d6 <_vfiprintf_r+0x20a>
  40eb34:	f89a 3000 	ldrb.w	r3, [sl]
  40eb38:	4650      	mov	r0, sl
  40eb3a:	2900      	cmp	r1, #0
  40eb3c:	f47f adaa 	bne.w	40e694 <_vfiprintf_r+0xc8>
  40eb40:	2120      	movs	r1, #32
  40eb42:	e5a7      	b.n	40e694 <_vfiprintf_r+0xc8>
  40eb44:	00413e44 	.word	0x00413e44
  40eb48:	00413e34 	.word	0x00413e34
  40eb4c:	00413e14 	.word	0x00413e14
  40eb50:	f049 0901 	orr.w	r9, r9, #1
  40eb54:	f89a 3000 	ldrb.w	r3, [sl]
  40eb58:	4650      	mov	r0, sl
  40eb5a:	e59b      	b.n	40e694 <_vfiprintf_r+0xc8>
  40eb5c:	9a06      	ldr	r2, [sp, #24]
  40eb5e:	6815      	ldr	r5, [r2, #0]
  40eb60:	4613      	mov	r3, r2
  40eb62:	2d00      	cmp	r5, #0
  40eb64:	f103 0304 	add.w	r3, r3, #4
  40eb68:	f2c0 82da 	blt.w	40f120 <_vfiprintf_r+0xb54>
  40eb6c:	9306      	str	r3, [sp, #24]
  40eb6e:	4650      	mov	r0, sl
  40eb70:	f89a 3000 	ldrb.w	r3, [sl]
  40eb74:	e58e      	b.n	40e694 <_vfiprintf_r+0xc8>
  40eb76:	f89a 3000 	ldrb.w	r3, [sl]
  40eb7a:	4650      	mov	r0, sl
  40eb7c:	212b      	movs	r1, #43	; 0x2b
  40eb7e:	e589      	b.n	40e694 <_vfiprintf_r+0xc8>
  40eb80:	9806      	ldr	r0, [sp, #24]
  40eb82:	2278      	movs	r2, #120	; 0x78
  40eb84:	2330      	movs	r3, #48	; 0x30
  40eb86:	46b0      	mov	r8, r6
  40eb88:	4601      	mov	r1, r0
  40eb8a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40eb8e:	4aaa      	ldr	r2, [pc, #680]	; (40ee38 <_vfiprintf_r+0x86c>)
  40eb90:	f049 0902 	orr.w	r9, r9, #2
  40eb94:	3104      	adds	r1, #4
  40eb96:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  40eb9a:	9505      	str	r5, [sp, #20]
  40eb9c:	2302      	movs	r3, #2
  40eb9e:	6806      	ldr	r6, [r0, #0]
  40eba0:	2700      	movs	r7, #0
  40eba2:	9106      	str	r1, [sp, #24]
  40eba4:	920a      	str	r2, [sp, #40]	; 0x28
  40eba6:	e60f      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40eba8:	f049 0920 	orr.w	r9, r9, #32
  40ebac:	f89a 3000 	ldrb.w	r3, [sl]
  40ebb0:	4650      	mov	r0, sl
  40ebb2:	e56f      	b.n	40e694 <_vfiprintf_r+0xc8>
  40ebb4:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  40ebb8:	f89a 3000 	ldrb.w	r3, [sl]
  40ebbc:	4650      	mov	r0, sl
  40ebbe:	e569      	b.n	40e694 <_vfiprintf_r+0xc8>
  40ebc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ebc4:	2500      	movs	r5, #0
  40ebc6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40ebca:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ebce:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40ebd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ebd6:	2a09      	cmp	r2, #9
  40ebd8:	d9f5      	bls.n	40ebc6 <_vfiprintf_r+0x5fa>
  40ebda:	e55d      	b.n	40e698 <_vfiprintf_r+0xcc>
  40ebdc:	f049 0910 	orr.w	r9, r9, #16
  40ebe0:	9505      	str	r5, [sp, #20]
  40ebe2:	46b0      	mov	r8, r6
  40ebe4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40ebe8:	f019 0f20 	tst.w	r9, #32
  40ebec:	d18d      	bne.n	40eb0a <_vfiprintf_r+0x53e>
  40ebee:	9a06      	ldr	r2, [sp, #24]
  40ebf0:	f019 0f10 	tst.w	r9, #16
  40ebf4:	4613      	mov	r3, r2
  40ebf6:	f040 81c4 	bne.w	40ef82 <_vfiprintf_r+0x9b6>
  40ebfa:	f019 0f40 	tst.w	r9, #64	; 0x40
  40ebfe:	f000 81c0 	beq.w	40ef82 <_vfiprintf_r+0x9b6>
  40ec02:	f9b2 6000 	ldrsh.w	r6, [r2]
  40ec06:	3304      	adds	r3, #4
  40ec08:	17f7      	asrs	r7, r6, #31
  40ec0a:	9306      	str	r3, [sp, #24]
  40ec0c:	4632      	mov	r2, r6
  40ec0e:	463b      	mov	r3, r7
  40ec10:	e785      	b.n	40eb1e <_vfiprintf_r+0x552>
  40ec12:	f049 0910 	orr.w	r9, r9, #16
  40ec16:	9505      	str	r5, [sp, #20]
  40ec18:	46b0      	mov	r8, r6
  40ec1a:	f019 0320 	ands.w	r3, r9, #32
  40ec1e:	f47f aecf 	bne.w	40e9c0 <_vfiprintf_r+0x3f4>
  40ec22:	f019 0210 	ands.w	r2, r9, #16
  40ec26:	f040 81b3 	bne.w	40ef90 <_vfiprintf_r+0x9c4>
  40ec2a:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  40ec2e:	f000 81af 	beq.w	40ef90 <_vfiprintf_r+0x9c4>
  40ec32:	9906      	ldr	r1, [sp, #24]
  40ec34:	4613      	mov	r3, r2
  40ec36:	2700      	movs	r7, #0
  40ec38:	460a      	mov	r2, r1
  40ec3a:	880e      	ldrh	r6, [r1, #0]
  40ec3c:	3204      	adds	r2, #4
  40ec3e:	9206      	str	r2, [sp, #24]
  40ec40:	e5c2      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40ec42:	f049 0910 	orr.w	r9, r9, #16
  40ec46:	9505      	str	r5, [sp, #20]
  40ec48:	46b0      	mov	r8, r6
  40ec4a:	9a06      	ldr	r2, [sp, #24]
  40ec4c:	f019 0f20 	tst.w	r9, #32
  40ec50:	f47f adb1 	bne.w	40e7b6 <_vfiprintf_r+0x1ea>
  40ec54:	f019 0f10 	tst.w	r9, #16
  40ec58:	4613      	mov	r3, r2
  40ec5a:	f040 81a5 	bne.w	40efa8 <_vfiprintf_r+0x9dc>
  40ec5e:	f019 0f40 	tst.w	r9, #64	; 0x40
  40ec62:	f000 81a1 	beq.w	40efa8 <_vfiprintf_r+0x9dc>
  40ec66:	8816      	ldrh	r6, [r2, #0]
  40ec68:	3204      	adds	r2, #4
  40ec6a:	2700      	movs	r7, #0
  40ec6c:	2301      	movs	r3, #1
  40ec6e:	9206      	str	r2, [sp, #24]
  40ec70:	e5aa      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40ec72:	4a72      	ldr	r2, [pc, #456]	; (40ee3c <_vfiprintf_r+0x870>)
  40ec74:	f019 0f20 	tst.w	r9, #32
  40ec78:	9505      	str	r5, [sp, #20]
  40ec7a:	46b0      	mov	r8, r6
  40ec7c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40ec80:	920a      	str	r2, [sp, #40]	; 0x28
  40ec82:	f47f aeef 	bne.w	40ea64 <_vfiprintf_r+0x498>
  40ec86:	9906      	ldr	r1, [sp, #24]
  40ec88:	f019 0f10 	tst.w	r9, #16
  40ec8c:	460a      	mov	r2, r1
  40ec8e:	f040 8186 	bne.w	40ef9e <_vfiprintf_r+0x9d2>
  40ec92:	f019 0f40 	tst.w	r9, #64	; 0x40
  40ec96:	f000 8182 	beq.w	40ef9e <_vfiprintf_r+0x9d2>
  40ec9a:	3204      	adds	r2, #4
  40ec9c:	880e      	ldrh	r6, [r1, #0]
  40ec9e:	2700      	movs	r7, #0
  40eca0:	9206      	str	r2, [sp, #24]
  40eca2:	e6e8      	b.n	40ea76 <_vfiprintf_r+0x4aa>
  40eca4:	9505      	str	r5, [sp, #20]
  40eca6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40ecaa:	b30b      	cbz	r3, 40ecf0 <_vfiprintf_r+0x724>
  40ecac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40ecb0:	f04f 0300 	mov.w	r3, #0
  40ecb4:	2701      	movs	r7, #1
  40ecb6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40ecba:	ab12      	add	r3, sp, #72	; 0x48
  40ecbc:	46b8      	mov	r8, r7
  40ecbe:	9308      	str	r3, [sp, #32]
  40ecc0:	e719      	b.n	40eaf6 <_vfiprintf_r+0x52a>
  40ecc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ecc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ecc6:	1c48      	adds	r0, r1, #1
  40ecc8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40eccc:	2b00      	cmp	r3, #0
  40ecce:	f43f adfc 	beq.w	40e8ca <_vfiprintf_r+0x2fe>
  40ecd2:	3201      	adds	r2, #1
  40ecd4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40ecd8:	2301      	movs	r3, #1
  40ecda:	2807      	cmp	r0, #7
  40ecdc:	9010      	str	r0, [sp, #64]	; 0x40
  40ecde:	9211      	str	r2, [sp, #68]	; 0x44
  40ece0:	e884 000a 	stmia.w	r4, {r1, r3}
  40ece4:	f300 80e7 	bgt.w	40eeb6 <_vfiprintf_r+0x8ea>
  40ece8:	4601      	mov	r1, r0
  40ecea:	3408      	adds	r4, #8
  40ecec:	3001      	adds	r0, #1
  40ecee:	e5ec      	b.n	40e8ca <_vfiprintf_r+0x2fe>
  40ecf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ecf2:	b123      	cbz	r3, 40ecfe <_vfiprintf_r+0x732>
  40ecf4:	9802      	ldr	r0, [sp, #8]
  40ecf6:	aa0f      	add	r2, sp, #60	; 0x3c
  40ecf8:	9901      	ldr	r1, [sp, #4]
  40ecfa:	f7ff fc2b 	bl	40e554 <__sprint_r.part.0>
  40ecfe:	9b01      	ldr	r3, [sp, #4]
  40ed00:	899b      	ldrh	r3, [r3, #12]
  40ed02:	065b      	lsls	r3, r3, #25
  40ed04:	f53f ad48 	bmi.w	40e798 <_vfiprintf_r+0x1cc>
  40ed08:	9803      	ldr	r0, [sp, #12]
  40ed0a:	b02d      	add	sp, #180	; 0xb4
  40ed0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed10:	2b01      	cmp	r3, #1
  40ed12:	f000 811f 	beq.w	40ef54 <_vfiprintf_r+0x988>
  40ed16:	2b02      	cmp	r3, #2
  40ed18:	f040 80e7 	bne.w	40eeea <_vfiprintf_r+0x91e>
  40ed1c:	465a      	mov	r2, fp
  40ed1e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  40ed22:	0933      	lsrs	r3, r6, #4
  40ed24:	f006 000f 	and.w	r0, r6, #15
  40ed28:	0939      	lsrs	r1, r7, #4
  40ed2a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40ed2e:	460f      	mov	r7, r1
  40ed30:	461e      	mov	r6, r3
  40ed32:	f81e 3000 	ldrb.w	r3, [lr, r0]
  40ed36:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40ed3a:	ea56 0307 	orrs.w	r3, r6, r7
  40ed3e:	d1f0      	bne.n	40ed22 <_vfiprintf_r+0x756>
  40ed40:	9208      	str	r2, [sp, #32]
  40ed42:	ebc2 080b 	rsb	r8, r2, fp
  40ed46:	e565      	b.n	40e814 <_vfiprintf_r+0x248>
  40ed48:	2a00      	cmp	r2, #0
  40ed4a:	f040 8167 	bne.w	40f01c <_vfiprintf_r+0xa50>
  40ed4e:	2201      	movs	r2, #1
  40ed50:	9908      	ldr	r1, [sp, #32]
  40ed52:	4643      	mov	r3, r8
  40ed54:	465c      	mov	r4, fp
  40ed56:	911c      	str	r1, [sp, #112]	; 0x70
  40ed58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  40ed5c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40ed60:	9210      	str	r2, [sp, #64]	; 0x40
  40ed62:	f104 0208 	add.w	r2, r4, #8
  40ed66:	f019 0f04 	tst.w	r9, #4
  40ed6a:	d047      	beq.n	40edfc <_vfiprintf_r+0x830>
  40ed6c:	9905      	ldr	r1, [sp, #20]
  40ed6e:	1bcd      	subs	r5, r1, r7
  40ed70:	2d00      	cmp	r5, #0
  40ed72:	dd43      	ble.n	40edfc <_vfiprintf_r+0x830>
  40ed74:	2d10      	cmp	r5, #16
  40ed76:	f340 8201 	ble.w	40f17c <_vfiprintf_r+0xbb0>
  40ed7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ed7c:	2410      	movs	r4, #16
  40ed7e:	4e30      	ldr	r6, [pc, #192]	; (40ee40 <_vfiprintf_r+0x874>)
  40ed80:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40ed84:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40ed88:	e006      	b.n	40ed98 <_vfiprintf_r+0x7cc>
  40ed8a:	f04f 0e01 	mov.w	lr, #1
  40ed8e:	4618      	mov	r0, r3
  40ed90:	465a      	mov	r2, fp
  40ed92:	3d10      	subs	r5, #16
  40ed94:	2d10      	cmp	r5, #16
  40ed96:	dd1d      	ble.n	40edd4 <_vfiprintf_r+0x808>
  40ed98:	1c41      	adds	r1, r0, #1
  40ed9a:	3310      	adds	r3, #16
  40ed9c:	6016      	str	r6, [r2, #0]
  40ed9e:	f100 0e02 	add.w	lr, r0, #2
  40eda2:	2907      	cmp	r1, #7
  40eda4:	6054      	str	r4, [r2, #4]
  40eda6:	9311      	str	r3, [sp, #68]	; 0x44
  40eda8:	4608      	mov	r0, r1
  40edaa:	f102 0208 	add.w	r2, r2, #8
  40edae:	9110      	str	r1, [sp, #64]	; 0x40
  40edb0:	ddef      	ble.n	40ed92 <_vfiprintf_r+0x7c6>
  40edb2:	2b00      	cmp	r3, #0
  40edb4:	d0e9      	beq.n	40ed8a <_vfiprintf_r+0x7be>
  40edb6:	aa0f      	add	r2, sp, #60	; 0x3c
  40edb8:	4640      	mov	r0, r8
  40edba:	4649      	mov	r1, r9
  40edbc:	f7ff fbca 	bl	40e554 <__sprint_r.part.0>
  40edc0:	465a      	mov	r2, fp
  40edc2:	2800      	cmp	r0, #0
  40edc4:	d19b      	bne.n	40ecfe <_vfiprintf_r+0x732>
  40edc6:	3d10      	subs	r5, #16
  40edc8:	9810      	ldr	r0, [sp, #64]	; 0x40
  40edca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40edcc:	2d10      	cmp	r5, #16
  40edce:	f100 0e01 	add.w	lr, r0, #1
  40edd2:	dce1      	bgt.n	40ed98 <_vfiprintf_r+0x7cc>
  40edd4:	442b      	add	r3, r5
  40edd6:	f1be 0f07 	cmp.w	lr, #7
  40edda:	6016      	str	r6, [r2, #0]
  40eddc:	6055      	str	r5, [r2, #4]
  40edde:	9311      	str	r3, [sp, #68]	; 0x44
  40ede0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40ede4:	dd0a      	ble.n	40edfc <_vfiprintf_r+0x830>
  40ede6:	2b00      	cmp	r3, #0
  40ede8:	f43f add3 	beq.w	40e992 <_vfiprintf_r+0x3c6>
  40edec:	9802      	ldr	r0, [sp, #8]
  40edee:	aa0f      	add	r2, sp, #60	; 0x3c
  40edf0:	9901      	ldr	r1, [sp, #4]
  40edf2:	f7ff fbaf 	bl	40e554 <__sprint_r.part.0>
  40edf6:	2800      	cmp	r0, #0
  40edf8:	d181      	bne.n	40ecfe <_vfiprintf_r+0x732>
  40edfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40edfc:	9a03      	ldr	r2, [sp, #12]
  40edfe:	9905      	ldr	r1, [sp, #20]
  40ee00:	428f      	cmp	r7, r1
  40ee02:	bfac      	ite	ge
  40ee04:	19d2      	addge	r2, r2, r7
  40ee06:	1852      	addlt	r2, r2, r1
  40ee08:	9203      	str	r2, [sp, #12]
  40ee0a:	2b00      	cmp	r3, #0
  40ee0c:	f43f adc8 	beq.w	40e9a0 <_vfiprintf_r+0x3d4>
  40ee10:	9802      	ldr	r0, [sp, #8]
  40ee12:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee14:	9901      	ldr	r1, [sp, #4]
  40ee16:	f7ff fb9d 	bl	40e554 <__sprint_r.part.0>
  40ee1a:	2800      	cmp	r0, #0
  40ee1c:	f43f adc0 	beq.w	40e9a0 <_vfiprintf_r+0x3d4>
  40ee20:	e76d      	b.n	40ecfe <_vfiprintf_r+0x732>
  40ee22:	9b05      	ldr	r3, [sp, #20]
  40ee24:	1bdd      	subs	r5, r3, r7
  40ee26:	2d00      	cmp	r5, #0
  40ee28:	f77f ad63 	ble.w	40e8f2 <_vfiprintf_r+0x326>
  40ee2c:	2d10      	cmp	r5, #16
  40ee2e:	f340 81b0 	ble.w	40f192 <_vfiprintf_r+0xbc6>
  40ee32:	4e04      	ldr	r6, [pc, #16]	; (40ee44 <_vfiprintf_r+0x878>)
  40ee34:	2310      	movs	r3, #16
  40ee36:	e00e      	b.n	40ee56 <_vfiprintf_r+0x88a>
  40ee38:	00413e14 	.word	0x00413e14
  40ee3c:	00413e00 	.word	0x00413e00
  40ee40:	00413e44 	.word	0x00413e44
  40ee44:	00413e34 	.word	0x00413e34
  40ee48:	f04f 0e01 	mov.w	lr, #1
  40ee4c:	4611      	mov	r1, r2
  40ee4e:	465c      	mov	r4, fp
  40ee50:	3d10      	subs	r5, #16
  40ee52:	2d10      	cmp	r5, #16
  40ee54:	dd20      	ble.n	40ee98 <_vfiprintf_r+0x8cc>
  40ee56:	1c48      	adds	r0, r1, #1
  40ee58:	3210      	adds	r2, #16
  40ee5a:	6026      	str	r6, [r4, #0]
  40ee5c:	f101 0e02 	add.w	lr, r1, #2
  40ee60:	2807      	cmp	r0, #7
  40ee62:	6063      	str	r3, [r4, #4]
  40ee64:	9211      	str	r2, [sp, #68]	; 0x44
  40ee66:	4601      	mov	r1, r0
  40ee68:	f104 0408 	add.w	r4, r4, #8
  40ee6c:	9010      	str	r0, [sp, #64]	; 0x40
  40ee6e:	ddef      	ble.n	40ee50 <_vfiprintf_r+0x884>
  40ee70:	2a00      	cmp	r2, #0
  40ee72:	d0e9      	beq.n	40ee48 <_vfiprintf_r+0x87c>
  40ee74:	9802      	ldr	r0, [sp, #8]
  40ee76:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee78:	9901      	ldr	r1, [sp, #4]
  40ee7a:	465c      	mov	r4, fp
  40ee7c:	9307      	str	r3, [sp, #28]
  40ee7e:	f7ff fb69 	bl	40e554 <__sprint_r.part.0>
  40ee82:	2800      	cmp	r0, #0
  40ee84:	f47f af3b 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40ee88:	3d10      	subs	r5, #16
  40ee8a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee8e:	2d10      	cmp	r5, #16
  40ee90:	f101 0e01 	add.w	lr, r1, #1
  40ee94:	9b07      	ldr	r3, [sp, #28]
  40ee96:	dcde      	bgt.n	40ee56 <_vfiprintf_r+0x88a>
  40ee98:	442a      	add	r2, r5
  40ee9a:	f1be 0f07 	cmp.w	lr, #7
  40ee9e:	6026      	str	r6, [r4, #0]
  40eea0:	6065      	str	r5, [r4, #4]
  40eea2:	9211      	str	r2, [sp, #68]	; 0x44
  40eea4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40eea8:	f300 80b1 	bgt.w	40f00e <_vfiprintf_r+0xa42>
  40eeac:	3408      	adds	r4, #8
  40eeae:	f10e 0001 	add.w	r0, lr, #1
  40eeb2:	4671      	mov	r1, lr
  40eeb4:	e51d      	b.n	40e8f2 <_vfiprintf_r+0x326>
  40eeb6:	2a00      	cmp	r2, #0
  40eeb8:	f040 808b 	bne.w	40efd2 <_vfiprintf_r+0xa06>
  40eebc:	f1bc 0f00 	cmp.w	ip, #0
  40eec0:	f000 8083 	beq.w	40efca <_vfiprintf_r+0x9fe>
  40eec4:	aa0e      	add	r2, sp, #56	; 0x38
  40eec6:	2102      	movs	r1, #2
  40eec8:	4618      	mov	r0, r3
  40eeca:	465c      	mov	r4, fp
  40eecc:	921c      	str	r2, [sp, #112]	; 0x70
  40eece:	460a      	mov	r2, r1
  40eed0:	911d      	str	r1, [sp, #116]	; 0x74
  40eed2:	e507      	b.n	40e8e4 <_vfiprintf_r+0x318>
  40eed4:	2a00      	cmp	r2, #0
  40eed6:	f040 808d 	bne.w	40eff4 <_vfiprintf_r+0xa28>
  40eeda:	2001      	movs	r0, #1
  40eedc:	4611      	mov	r1, r2
  40eede:	465c      	mov	r4, fp
  40eee0:	e503      	b.n	40e8ea <_vfiprintf_r+0x31e>
  40eee2:	4690      	mov	r8, r2
  40eee4:	f8cd b020 	str.w	fp, [sp, #32]
  40eee8:	e494      	b.n	40e814 <_vfiprintf_r+0x248>
  40eeea:	4659      	mov	r1, fp
  40eeec:	08f2      	lsrs	r2, r6, #3
  40eeee:	f006 0307 	and.w	r3, r6, #7
  40eef2:	08f8      	lsrs	r0, r7, #3
  40eef4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40eef8:	3330      	adds	r3, #48	; 0x30
  40eefa:	4607      	mov	r7, r0
  40eefc:	4616      	mov	r6, r2
  40eefe:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40ef02:	ea56 0207 	orrs.w	r2, r6, r7
  40ef06:	d1f1      	bne.n	40eeec <_vfiprintf_r+0x920>
  40ef08:	f019 0f01 	tst.w	r9, #1
  40ef0c:	9108      	str	r1, [sp, #32]
  40ef0e:	f040 8092 	bne.w	40f036 <_vfiprintf_r+0xa6a>
  40ef12:	ebc1 080b 	rsb	r8, r1, fp
  40ef16:	e47d      	b.n	40e814 <_vfiprintf_r+0x248>
  40ef18:	2302      	movs	r3, #2
  40ef1a:	e455      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40ef1c:	2a00      	cmp	r2, #0
  40ef1e:	f040 80e6 	bne.w	40f0ee <_vfiprintf_r+0xb22>
  40ef22:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40ef26:	2b00      	cmp	r3, #0
  40ef28:	f000 80bb 	beq.w	40f0a2 <_vfiprintf_r+0xad6>
  40ef2c:	2301      	movs	r3, #1
  40ef2e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  40ef32:	465c      	mov	r4, fp
  40ef34:	921c      	str	r2, [sp, #112]	; 0x70
  40ef36:	4618      	mov	r0, r3
  40ef38:	931d      	str	r3, [sp, #116]	; 0x74
  40ef3a:	461a      	mov	r2, r3
  40ef3c:	e6d4      	b.n	40ece8 <_vfiprintf_r+0x71c>
  40ef3e:	9a05      	ldr	r2, [sp, #20]
  40ef40:	1bd5      	subs	r5, r2, r7
  40ef42:	465a      	mov	r2, fp
  40ef44:	2d00      	cmp	r5, #0
  40ef46:	f73f af15 	bgt.w	40ed74 <_vfiprintf_r+0x7a8>
  40ef4a:	e522      	b.n	40e992 <_vfiprintf_r+0x3c6>
  40ef4c:	4698      	mov	r8, r3
  40ef4e:	f8cd b020 	str.w	fp, [sp, #32]
  40ef52:	e45f      	b.n	40e814 <_vfiprintf_r+0x248>
  40ef54:	2f00      	cmp	r7, #0
  40ef56:	bf08      	it	eq
  40ef58:	2e0a      	cmpeq	r6, #10
  40ef5a:	d279      	bcs.n	40f050 <_vfiprintf_r+0xa84>
  40ef5c:	ab2c      	add	r3, sp, #176	; 0xb0
  40ef5e:	3630      	adds	r6, #48	; 0x30
  40ef60:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40ef64:	ebc3 080b 	rsb	r8, r3, fp
  40ef68:	9308      	str	r3, [sp, #32]
  40ef6a:	e453      	b.n	40e814 <_vfiprintf_r+0x248>
  40ef6c:	9802      	ldr	r0, [sp, #8]
  40ef6e:	aa0f      	add	r2, sp, #60	; 0x3c
  40ef70:	9901      	ldr	r1, [sp, #4]
  40ef72:	f7ff faef 	bl	40e554 <__sprint_r.part.0>
  40ef76:	2800      	cmp	r0, #0
  40ef78:	f47f aec1 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40ef7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ef7e:	465a      	mov	r2, fp
  40ef80:	e6f1      	b.n	40ed66 <_vfiprintf_r+0x79a>
  40ef82:	681e      	ldr	r6, [r3, #0]
  40ef84:	3304      	adds	r3, #4
  40ef86:	17f7      	asrs	r7, r6, #31
  40ef88:	9306      	str	r3, [sp, #24]
  40ef8a:	4632      	mov	r2, r6
  40ef8c:	463b      	mov	r3, r7
  40ef8e:	e5c6      	b.n	40eb1e <_vfiprintf_r+0x552>
  40ef90:	9906      	ldr	r1, [sp, #24]
  40ef92:	2700      	movs	r7, #0
  40ef94:	460a      	mov	r2, r1
  40ef96:	680e      	ldr	r6, [r1, #0]
  40ef98:	3204      	adds	r2, #4
  40ef9a:	9206      	str	r2, [sp, #24]
  40ef9c:	e414      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40ef9e:	6816      	ldr	r6, [r2, #0]
  40efa0:	3204      	adds	r2, #4
  40efa2:	2700      	movs	r7, #0
  40efa4:	9206      	str	r2, [sp, #24]
  40efa6:	e566      	b.n	40ea76 <_vfiprintf_r+0x4aa>
  40efa8:	3204      	adds	r2, #4
  40efaa:	681e      	ldr	r6, [r3, #0]
  40efac:	2700      	movs	r7, #0
  40efae:	2301      	movs	r3, #1
  40efb0:	9206      	str	r2, [sp, #24]
  40efb2:	e409      	b.n	40e7c8 <_vfiprintf_r+0x1fc>
  40efb4:	9802      	ldr	r0, [sp, #8]
  40efb6:	aa0f      	add	r2, sp, #60	; 0x3c
  40efb8:	9901      	ldr	r1, [sp, #4]
  40efba:	f7ff facb 	bl	40e554 <__sprint_r.part.0>
  40efbe:	2800      	cmp	r0, #0
  40efc0:	f47f ae9d 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40efc4:	465c      	mov	r4, fp
  40efc6:	f7ff bbc8 	b.w	40e75a <_vfiprintf_r+0x18e>
  40efca:	4618      	mov	r0, r3
  40efcc:	4611      	mov	r1, r2
  40efce:	465c      	mov	r4, fp
  40efd0:	e48b      	b.n	40e8ea <_vfiprintf_r+0x31e>
  40efd2:	9802      	ldr	r0, [sp, #8]
  40efd4:	aa0f      	add	r2, sp, #60	; 0x3c
  40efd6:	9901      	ldr	r1, [sp, #4]
  40efd8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40efdc:	f7ff faba 	bl	40e554 <__sprint_r.part.0>
  40efe0:	2800      	cmp	r0, #0
  40efe2:	f47f ae8c 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40efe6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efe8:	465c      	mov	r4, fp
  40efea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efec:	1c48      	adds	r0, r1, #1
  40efee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40eff2:	e46a      	b.n	40e8ca <_vfiprintf_r+0x2fe>
  40eff4:	9802      	ldr	r0, [sp, #8]
  40eff6:	aa0f      	add	r2, sp, #60	; 0x3c
  40eff8:	9901      	ldr	r1, [sp, #4]
  40effa:	f7ff faab 	bl	40e554 <__sprint_r.part.0>
  40effe:	2800      	cmp	r0, #0
  40f000:	f47f ae7d 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40f004:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f006:	465c      	mov	r4, fp
  40f008:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f00a:	1c48      	adds	r0, r1, #1
  40f00c:	e46d      	b.n	40e8ea <_vfiprintf_r+0x31e>
  40f00e:	2a00      	cmp	r2, #0
  40f010:	f040 8095 	bne.w	40f13e <_vfiprintf_r+0xb72>
  40f014:	2001      	movs	r0, #1
  40f016:	4611      	mov	r1, r2
  40f018:	465c      	mov	r4, fp
  40f01a:	e46a      	b.n	40e8f2 <_vfiprintf_r+0x326>
  40f01c:	9802      	ldr	r0, [sp, #8]
  40f01e:	aa0f      	add	r2, sp, #60	; 0x3c
  40f020:	9901      	ldr	r1, [sp, #4]
  40f022:	f7ff fa97 	bl	40e554 <__sprint_r.part.0>
  40f026:	2800      	cmp	r0, #0
  40f028:	f47f ae69 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40f02c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40f02e:	465c      	mov	r4, fp
  40f030:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f032:	3001      	adds	r0, #1
  40f034:	e49b      	b.n	40e96e <_vfiprintf_r+0x3a2>
  40f036:	2b30      	cmp	r3, #48	; 0x30
  40f038:	9b08      	ldr	r3, [sp, #32]
  40f03a:	d022      	beq.n	40f082 <_vfiprintf_r+0xab6>
  40f03c:	3b01      	subs	r3, #1
  40f03e:	461a      	mov	r2, r3
  40f040:	9308      	str	r3, [sp, #32]
  40f042:	2330      	movs	r3, #48	; 0x30
  40f044:	ebc2 080b 	rsb	r8, r2, fp
  40f048:	f801 3c01 	strb.w	r3, [r1, #-1]
  40f04c:	f7ff bbe2 	b.w	40e814 <_vfiprintf_r+0x248>
  40f050:	46d8      	mov	r8, fp
  40f052:	4630      	mov	r0, r6
  40f054:	4639      	mov	r1, r7
  40f056:	220a      	movs	r2, #10
  40f058:	2300      	movs	r3, #0
  40f05a:	f003 fc93 	bl	412984 <__aeabi_uldivmod>
  40f05e:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40f062:	4630      	mov	r0, r6
  40f064:	4639      	mov	r1, r7
  40f066:	2300      	movs	r3, #0
  40f068:	220a      	movs	r2, #10
  40f06a:	f808 ed01 	strb.w	lr, [r8, #-1]!
  40f06e:	f003 fc89 	bl	412984 <__aeabi_uldivmod>
  40f072:	4606      	mov	r6, r0
  40f074:	460f      	mov	r7, r1
  40f076:	ea56 0307 	orrs.w	r3, r6, r7
  40f07a:	d1ea      	bne.n	40f052 <_vfiprintf_r+0xa86>
  40f07c:	4643      	mov	r3, r8
  40f07e:	f8cd 8020 	str.w	r8, [sp, #32]
  40f082:	ebc3 080b 	rsb	r8, r3, fp
  40f086:	f7ff bbc5 	b.w	40e814 <_vfiprintf_r+0x248>
  40f08a:	252d      	movs	r5, #45	; 0x2d
  40f08c:	4276      	negs	r6, r6
  40f08e:	f8cd 8010 	str.w	r8, [sp, #16]
  40f092:	f04f 0301 	mov.w	r3, #1
  40f096:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40f09a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40f09e:	f7ff bb9a 	b.w	40e7d6 <_vfiprintf_r+0x20a>
  40f0a2:	4611      	mov	r1, r2
  40f0a4:	2001      	movs	r0, #1
  40f0a6:	465c      	mov	r4, fp
  40f0a8:	f1bc 0f00 	cmp.w	ip, #0
  40f0ac:	f43f ac21 	beq.w	40e8f2 <_vfiprintf_r+0x326>
  40f0b0:	aa0e      	add	r2, sp, #56	; 0x38
  40f0b2:	2302      	movs	r3, #2
  40f0b4:	f8cb 2000 	str.w	r2, [fp]
  40f0b8:	461a      	mov	r2, r3
  40f0ba:	f8cb 3004 	str.w	r3, [fp, #4]
  40f0be:	e411      	b.n	40e8e4 <_vfiprintf_r+0x318>
  40f0c0:	f019 0f10 	tst.w	r9, #16
  40f0c4:	d10b      	bne.n	40f0de <_vfiprintf_r+0xb12>
  40f0c6:	f019 0f40 	tst.w	r9, #64	; 0x40
  40f0ca:	d008      	beq.n	40f0de <_vfiprintf_r+0xb12>
  40f0cc:	9a06      	ldr	r2, [sp, #24]
  40f0ce:	6813      	ldr	r3, [r2, #0]
  40f0d0:	3204      	adds	r2, #4
  40f0d2:	9206      	str	r2, [sp, #24]
  40f0d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40f0d8:	801a      	strh	r2, [r3, #0]
  40f0da:	f7ff baa9 	b.w	40e630 <_vfiprintf_r+0x64>
  40f0de:	9a06      	ldr	r2, [sp, #24]
  40f0e0:	6813      	ldr	r3, [r2, #0]
  40f0e2:	3204      	adds	r2, #4
  40f0e4:	9206      	str	r2, [sp, #24]
  40f0e6:	9a03      	ldr	r2, [sp, #12]
  40f0e8:	601a      	str	r2, [r3, #0]
  40f0ea:	f7ff baa1 	b.w	40e630 <_vfiprintf_r+0x64>
  40f0ee:	9802      	ldr	r0, [sp, #8]
  40f0f0:	aa0f      	add	r2, sp, #60	; 0x3c
  40f0f2:	9901      	ldr	r1, [sp, #4]
  40f0f4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40f0f8:	f7ff fa2c 	bl	40e554 <__sprint_r.part.0>
  40f0fc:	2800      	cmp	r0, #0
  40f0fe:	f47f adfe 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40f102:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f104:	465c      	mov	r4, fp
  40f106:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f108:	1c48      	adds	r0, r1, #1
  40f10a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40f10e:	e5db      	b.n	40ecc8 <_vfiprintf_r+0x6fc>
  40f110:	f049 0920 	orr.w	r9, r9, #32
  40f114:	f10a 0001 	add.w	r0, sl, #1
  40f118:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f11c:	f7ff baba 	b.w	40e694 <_vfiprintf_r+0xc8>
  40f120:	426d      	negs	r5, r5
  40f122:	9306      	str	r3, [sp, #24]
  40f124:	4650      	mov	r0, sl
  40f126:	e440      	b.n	40e9aa <_vfiprintf_r+0x3de>
  40f128:	9808      	ldr	r0, [sp, #32]
  40f12a:	9606      	str	r6, [sp, #24]
  40f12c:	f7fc fec6 	bl	40bebc <strlen>
  40f130:	2300      	movs	r3, #0
  40f132:	4680      	mov	r8, r0
  40f134:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40f138:	9304      	str	r3, [sp, #16]
  40f13a:	f7ff bb6b 	b.w	40e814 <_vfiprintf_r+0x248>
  40f13e:	9802      	ldr	r0, [sp, #8]
  40f140:	aa0f      	add	r2, sp, #60	; 0x3c
  40f142:	9901      	ldr	r1, [sp, #4]
  40f144:	f7ff fa06 	bl	40e554 <__sprint_r.part.0>
  40f148:	2800      	cmp	r0, #0
  40f14a:	f47f add8 	bne.w	40ecfe <_vfiprintf_r+0x732>
  40f14e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f150:	465c      	mov	r4, fp
  40f152:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f154:	1c48      	adds	r0, r1, #1
  40f156:	f7ff bbcc 	b.w	40e8f2 <_vfiprintf_r+0x326>
  40f15a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f15c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40f15e:	3101      	adds	r1, #1
  40f160:	4e14      	ldr	r6, [pc, #80]	; (40f1b4 <_vfiprintf_r+0xbe8>)
  40f162:	f7ff bba3 	b.w	40e8ac <_vfiprintf_r+0x2e0>
  40f166:	f1b8 0f06 	cmp.w	r8, #6
  40f16a:	4b13      	ldr	r3, [pc, #76]	; (40f1b8 <_vfiprintf_r+0xbec>)
  40f16c:	9606      	str	r6, [sp, #24]
  40f16e:	bf28      	it	cs
  40f170:	f04f 0806 	movcs.w	r8, #6
  40f174:	9308      	str	r3, [sp, #32]
  40f176:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  40f17a:	e4bc      	b.n	40eaf6 <_vfiprintf_r+0x52a>
  40f17c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40f17e:	4e0d      	ldr	r6, [pc, #52]	; (40f1b4 <_vfiprintf_r+0xbe8>)
  40f180:	f101 0e01 	add.w	lr, r1, #1
  40f184:	e626      	b.n	40edd4 <_vfiprintf_r+0x808>
  40f186:	9606      	str	r6, [sp, #24]
  40f188:	9004      	str	r0, [sp, #16]
  40f18a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40f18e:	f7ff bb41 	b.w	40e814 <_vfiprintf_r+0x248>
  40f192:	4686      	mov	lr, r0
  40f194:	4e09      	ldr	r6, [pc, #36]	; (40f1bc <_vfiprintf_r+0xbf0>)
  40f196:	e67f      	b.n	40ee98 <_vfiprintf_r+0x8cc>
  40f198:	9a06      	ldr	r2, [sp, #24]
  40f19a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40f19e:	6816      	ldr	r6, [r2, #0]
  40f1a0:	3204      	adds	r2, #4
  40f1a2:	2e00      	cmp	r6, #0
  40f1a4:	9206      	str	r2, [sp, #24]
  40f1a6:	f6bf aa75 	bge.w	40e694 <_vfiprintf_r+0xc8>
  40f1aa:	f04f 36ff 	mov.w	r6, #4294967295
  40f1ae:	f7ff ba71 	b.w	40e694 <_vfiprintf_r+0xc8>
  40f1b2:	bf00      	nop
  40f1b4:	00413e44 	.word	0x00413e44
  40f1b8:	00413e28 	.word	0x00413e28
  40f1bc:	00413e34 	.word	0x00413e34

0040f1c0 <__sbprintf>:
  40f1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f1c4:	898d      	ldrh	r5, [r1, #12]
  40f1c6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40f1ca:	4688      	mov	r8, r1
  40f1cc:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f1d0:	f025 0502 	bic.w	r5, r5, #2
  40f1d4:	ac1c      	add	r4, sp, #112	; 0x70
  40f1d6:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40f1da:	2700      	movs	r7, #0
  40f1dc:	f8ad 5014 	strh.w	r5, [sp, #20]
  40f1e0:	a902      	add	r1, sp, #8
  40f1e2:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40f1e6:	4681      	mov	r9, r0
  40f1e8:	9402      	str	r4, [sp, #8]
  40f1ea:	9501      	str	r5, [sp, #4]
  40f1ec:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  40f1f0:	9406      	str	r4, [sp, #24]
  40f1f2:	951b      	str	r5, [sp, #108]	; 0x6c
  40f1f4:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40f1f8:	f8ad a016 	strh.w	sl, [sp, #22]
  40f1fc:	9509      	str	r5, [sp, #36]	; 0x24
  40f1fe:	9d01      	ldr	r5, [sp, #4]
  40f200:	9708      	str	r7, [sp, #32]
  40f202:	950b      	str	r5, [sp, #44]	; 0x2c
  40f204:	9604      	str	r6, [sp, #16]
  40f206:	9607      	str	r6, [sp, #28]
  40f208:	f7ff f9e0 	bl	40e5cc <_vfiprintf_r>
  40f20c:	1e04      	subs	r4, r0, #0
  40f20e:	db07      	blt.n	40f220 <__sbprintf+0x60>
  40f210:	4648      	mov	r0, r9
  40f212:	a902      	add	r1, sp, #8
  40f214:	f001 f938 	bl	410488 <_fflush_r>
  40f218:	42b8      	cmp	r0, r7
  40f21a:	bf18      	it	ne
  40f21c:	f04f 34ff 	movne.w	r4, #4294967295
  40f220:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f224:	065b      	lsls	r3, r3, #25
  40f226:	d505      	bpl.n	40f234 <__sbprintf+0x74>
  40f228:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40f22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f230:	f8a8 300c 	strh.w	r3, [r8, #12]
  40f234:	4620      	mov	r0, r4
  40f236:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40f23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f23e:	bf00      	nop

0040f240 <__swsetup_r>:
  40f240:	b538      	push	{r3, r4, r5, lr}
  40f242:	4b2f      	ldr	r3, [pc, #188]	; (40f300 <__swsetup_r+0xc0>)
  40f244:	4605      	mov	r5, r0
  40f246:	460c      	mov	r4, r1
  40f248:	6818      	ldr	r0, [r3, #0]
  40f24a:	b110      	cbz	r0, 40f252 <__swsetup_r+0x12>
  40f24c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f24e:	2b00      	cmp	r3, #0
  40f250:	d036      	beq.n	40f2c0 <__swsetup_r+0x80>
  40f252:	89a2      	ldrh	r2, [r4, #12]
  40f254:	b293      	uxth	r3, r2
  40f256:	0718      	lsls	r0, r3, #28
  40f258:	d50b      	bpl.n	40f272 <__swsetup_r+0x32>
  40f25a:	6920      	ldr	r0, [r4, #16]
  40f25c:	b1a0      	cbz	r0, 40f288 <__swsetup_r+0x48>
  40f25e:	f013 0201 	ands.w	r2, r3, #1
  40f262:	d11d      	bne.n	40f2a0 <__swsetup_r+0x60>
  40f264:	0799      	lsls	r1, r3, #30
  40f266:	d400      	bmi.n	40f26a <__swsetup_r+0x2a>
  40f268:	6962      	ldr	r2, [r4, #20]
  40f26a:	60a2      	str	r2, [r4, #8]
  40f26c:	b1f8      	cbz	r0, 40f2ae <__swsetup_r+0x6e>
  40f26e:	2000      	movs	r0, #0
  40f270:	bd38      	pop	{r3, r4, r5, pc}
  40f272:	06d9      	lsls	r1, r3, #27
  40f274:	d53b      	bpl.n	40f2ee <__swsetup_r+0xae>
  40f276:	0758      	lsls	r0, r3, #29
  40f278:	d425      	bmi.n	40f2c6 <__swsetup_r+0x86>
  40f27a:	6920      	ldr	r0, [r4, #16]
  40f27c:	f042 0208 	orr.w	r2, r2, #8
  40f280:	b293      	uxth	r3, r2
  40f282:	81a2      	strh	r2, [r4, #12]
  40f284:	2800      	cmp	r0, #0
  40f286:	d1ea      	bne.n	40f25e <__swsetup_r+0x1e>
  40f288:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40f28c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40f290:	d0e5      	beq.n	40f25e <__swsetup_r+0x1e>
  40f292:	4628      	mov	r0, r5
  40f294:	4621      	mov	r1, r4
  40f296:	f002 f8a5 	bl	4113e4 <__smakebuf_r>
  40f29a:	89a3      	ldrh	r3, [r4, #12]
  40f29c:	6920      	ldr	r0, [r4, #16]
  40f29e:	e7de      	b.n	40f25e <__swsetup_r+0x1e>
  40f2a0:	6963      	ldr	r3, [r4, #20]
  40f2a2:	2200      	movs	r2, #0
  40f2a4:	425b      	negs	r3, r3
  40f2a6:	60a2      	str	r2, [r4, #8]
  40f2a8:	61a3      	str	r3, [r4, #24]
  40f2aa:	2800      	cmp	r0, #0
  40f2ac:	d1df      	bne.n	40f26e <__swsetup_r+0x2e>
  40f2ae:	89a3      	ldrh	r3, [r4, #12]
  40f2b0:	061a      	lsls	r2, r3, #24
  40f2b2:	d5dd      	bpl.n	40f270 <__swsetup_r+0x30>
  40f2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f2b8:	f04f 30ff 	mov.w	r0, #4294967295
  40f2bc:	81a3      	strh	r3, [r4, #12]
  40f2be:	bd38      	pop	{r3, r4, r5, pc}
  40f2c0:	f001 f97c 	bl	4105bc <__sinit>
  40f2c4:	e7c5      	b.n	40f252 <__swsetup_r+0x12>
  40f2c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f2c8:	b149      	cbz	r1, 40f2de <__swsetup_r+0x9e>
  40f2ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f2ce:	4299      	cmp	r1, r3
  40f2d0:	d003      	beq.n	40f2da <__swsetup_r+0x9a>
  40f2d2:	4628      	mov	r0, r5
  40f2d4:	f001 fa4a 	bl	41076c <_free_r>
  40f2d8:	89a2      	ldrh	r2, [r4, #12]
  40f2da:	2300      	movs	r3, #0
  40f2dc:	6323      	str	r3, [r4, #48]	; 0x30
  40f2de:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40f2e2:	2300      	movs	r3, #0
  40f2e4:	6920      	ldr	r0, [r4, #16]
  40f2e6:	b292      	uxth	r2, r2
  40f2e8:	e884 0009 	stmia.w	r4, {r0, r3}
  40f2ec:	e7c6      	b.n	40f27c <__swsetup_r+0x3c>
  40f2ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40f2f2:	2309      	movs	r3, #9
  40f2f4:	f04f 30ff 	mov.w	r0, #4294967295
  40f2f8:	602b      	str	r3, [r5, #0]
  40f2fa:	81a2      	strh	r2, [r4, #12]
  40f2fc:	bd38      	pop	{r3, r4, r5, pc}
  40f2fe:	bf00      	nop
  40f300:	204004d8 	.word	0x204004d8

0040f304 <register_fini>:
  40f304:	4b02      	ldr	r3, [pc, #8]	; (40f310 <register_fini+0xc>)
  40f306:	b113      	cbz	r3, 40f30e <register_fini+0xa>
  40f308:	4802      	ldr	r0, [pc, #8]	; (40f314 <register_fini+0x10>)
  40f30a:	f000 b80d 	b.w	40f328 <atexit>
  40f30e:	4770      	bx	lr
  40f310:	00000000 	.word	0x00000000
  40f314:	004105d1 	.word	0x004105d1

0040f318 <abort>:
  40f318:	b508      	push	{r3, lr}
  40f31a:	2006      	movs	r0, #6
  40f31c:	f003 f818 	bl	412350 <raise>
  40f320:	2001      	movs	r0, #1
  40f322:	f7f4 fa1d 	bl	403760 <_exit>
  40f326:	bf00      	nop

0040f328 <atexit>:
  40f328:	4601      	mov	r1, r0
  40f32a:	2000      	movs	r0, #0
  40f32c:	4602      	mov	r2, r0
  40f32e:	4603      	mov	r3, r0
  40f330:	f003 b9e2 	b.w	4126f8 <__register_exitproc>

0040f334 <quorem>:
  40f334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f338:	6903      	ldr	r3, [r0, #16]
  40f33a:	b083      	sub	sp, #12
  40f33c:	690f      	ldr	r7, [r1, #16]
  40f33e:	429f      	cmp	r7, r3
  40f340:	f300 8093 	bgt.w	40f46a <quorem+0x136>
  40f344:	3f01      	subs	r7, #1
  40f346:	f101 0614 	add.w	r6, r1, #20
  40f34a:	f100 0a14 	add.w	sl, r0, #20
  40f34e:	00bb      	lsls	r3, r7, #2
  40f350:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  40f354:	461d      	mov	r5, r3
  40f356:	9300      	str	r3, [sp, #0]
  40f358:	3201      	adds	r2, #1
  40f35a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40f35e:	eb0a 0405 	add.w	r4, sl, r5
  40f362:	eb06 0905 	add.w	r9, r6, r5
  40f366:	fbb3 f8f2 	udiv	r8, r3, r2
  40f36a:	9401      	str	r4, [sp, #4]
  40f36c:	f1b8 0f00 	cmp.w	r8, #0
  40f370:	d040      	beq.n	40f3f4 <quorem+0xc0>
  40f372:	2500      	movs	r5, #0
  40f374:	46b4      	mov	ip, r6
  40f376:	46d6      	mov	lr, sl
  40f378:	462b      	mov	r3, r5
  40f37a:	f85c bb04 	ldr.w	fp, [ip], #4
  40f37e:	f8de 2000 	ldr.w	r2, [lr]
  40f382:	fa1f f48b 	uxth.w	r4, fp
  40f386:	45e1      	cmp	r9, ip
  40f388:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  40f38c:	fb04 5508 	mla	r5, r4, r8, r5
  40f390:	fb0b fb08 	mul.w	fp, fp, r8
  40f394:	b2ac      	uxth	r4, r5
  40f396:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  40f39a:	eba3 0304 	sub.w	r3, r3, r4
  40f39e:	fa1f fb85 	uxth.w	fp, r5
  40f3a2:	fa13 f482 	uxtah	r4, r3, r2
  40f3a6:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40f3aa:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40f3ae:	fa1f fb84 	uxth.w	fp, r4
  40f3b2:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40f3b6:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40f3ba:	ea4f 4323 	mov.w	r3, r3, asr #16
  40f3be:	f84e 2b04 	str.w	r2, [lr], #4
  40f3c2:	d2da      	bcs.n	40f37a <quorem+0x46>
  40f3c4:	9b00      	ldr	r3, [sp, #0]
  40f3c6:	f85a 3003 	ldr.w	r3, [sl, r3]
  40f3ca:	b99b      	cbnz	r3, 40f3f4 <quorem+0xc0>
  40f3cc:	9c01      	ldr	r4, [sp, #4]
  40f3ce:	1f23      	subs	r3, r4, #4
  40f3d0:	459a      	cmp	sl, r3
  40f3d2:	d20e      	bcs.n	40f3f2 <quorem+0xbe>
  40f3d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40f3d8:	b95b      	cbnz	r3, 40f3f2 <quorem+0xbe>
  40f3da:	f1a4 0308 	sub.w	r3, r4, #8
  40f3de:	e001      	b.n	40f3e4 <quorem+0xb0>
  40f3e0:	6812      	ldr	r2, [r2, #0]
  40f3e2:	b932      	cbnz	r2, 40f3f2 <quorem+0xbe>
  40f3e4:	459a      	cmp	sl, r3
  40f3e6:	461a      	mov	r2, r3
  40f3e8:	f107 37ff 	add.w	r7, r7, #4294967295
  40f3ec:	f1a3 0304 	sub.w	r3, r3, #4
  40f3f0:	d3f6      	bcc.n	40f3e0 <quorem+0xac>
  40f3f2:	6107      	str	r7, [r0, #16]
  40f3f4:	4604      	mov	r4, r0
  40f3f6:	f002 fb79 	bl	411aec <__mcmp>
  40f3fa:	2800      	cmp	r0, #0
  40f3fc:	db31      	blt.n	40f462 <quorem+0x12e>
  40f3fe:	f108 0801 	add.w	r8, r8, #1
  40f402:	4655      	mov	r5, sl
  40f404:	2000      	movs	r0, #0
  40f406:	f856 1b04 	ldr.w	r1, [r6], #4
  40f40a:	682a      	ldr	r2, [r5, #0]
  40f40c:	b28b      	uxth	r3, r1
  40f40e:	45b1      	cmp	r9, r6
  40f410:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40f414:	eba0 0303 	sub.w	r3, r0, r3
  40f418:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  40f41c:	fa13 f382 	uxtah	r3, r3, r2
  40f420:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40f424:	b29b      	uxth	r3, r3
  40f426:	ea4f 4022 	mov.w	r0, r2, asr #16
  40f42a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40f42e:	f845 3b04 	str.w	r3, [r5], #4
  40f432:	d2e8      	bcs.n	40f406 <quorem+0xd2>
  40f434:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40f438:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40f43c:	b98a      	cbnz	r2, 40f462 <quorem+0x12e>
  40f43e:	1f1a      	subs	r2, r3, #4
  40f440:	4592      	cmp	sl, r2
  40f442:	d20d      	bcs.n	40f460 <quorem+0x12c>
  40f444:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40f448:	b952      	cbnz	r2, 40f460 <quorem+0x12c>
  40f44a:	3b08      	subs	r3, #8
  40f44c:	e001      	b.n	40f452 <quorem+0x11e>
  40f44e:	6812      	ldr	r2, [r2, #0]
  40f450:	b932      	cbnz	r2, 40f460 <quorem+0x12c>
  40f452:	459a      	cmp	sl, r3
  40f454:	461a      	mov	r2, r3
  40f456:	f107 37ff 	add.w	r7, r7, #4294967295
  40f45a:	f1a3 0304 	sub.w	r3, r3, #4
  40f45e:	d3f6      	bcc.n	40f44e <quorem+0x11a>
  40f460:	6127      	str	r7, [r4, #16]
  40f462:	4640      	mov	r0, r8
  40f464:	b003      	add	sp, #12
  40f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f46a:	2000      	movs	r0, #0
  40f46c:	b003      	add	sp, #12
  40f46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f472:	bf00      	nop
  40f474:	0000      	movs	r0, r0
	...

0040f478 <_dtoa_r>:
  40f478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f47c:	b099      	sub	sp, #100	; 0x64
  40f47e:	4604      	mov	r4, r0
  40f480:	9300      	str	r3, [sp, #0]
  40f482:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40f484:	9101      	str	r1, [sp, #4]
  40f486:	9203      	str	r2, [sp, #12]
  40f488:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40f48a:	ec5b ab10 	vmov	sl, fp, d0
  40f48e:	b14b      	cbz	r3, 40f4a4 <_dtoa_r+0x2c>
  40f490:	6c46      	ldr	r6, [r0, #68]	; 0x44
  40f492:	2201      	movs	r2, #1
  40f494:	4619      	mov	r1, r3
  40f496:	40b2      	lsls	r2, r6
  40f498:	605e      	str	r6, [r3, #4]
  40f49a:	609a      	str	r2, [r3, #8]
  40f49c:	f002 f8e6 	bl	41166c <_Bfree>
  40f4a0:	2300      	movs	r3, #0
  40f4a2:	6423      	str	r3, [r4, #64]	; 0x40
  40f4a4:	f1bb 0f00 	cmp.w	fp, #0
  40f4a8:	46d9      	mov	r9, fp
  40f4aa:	db35      	blt.n	40f518 <_dtoa_r+0xa0>
  40f4ac:	2300      	movs	r3, #0
  40f4ae:	602b      	str	r3, [r5, #0]
  40f4b0:	4b97      	ldr	r3, [pc, #604]	; (40f710 <_dtoa_r+0x298>)
  40f4b2:	461a      	mov	r2, r3
  40f4b4:	ea09 0303 	and.w	r3, r9, r3
  40f4b8:	4293      	cmp	r3, r2
  40f4ba:	d016      	beq.n	40f4ea <_dtoa_r+0x72>
  40f4bc:	4650      	mov	r0, sl
  40f4be:	4659      	mov	r1, fp
  40f4c0:	2200      	movs	r2, #0
  40f4c2:	2300      	movs	r3, #0
  40f4c4:	f7fb fe7e 	bl	40b1c4 <__aeabi_dcmpeq>
  40f4c8:	4656      	mov	r6, sl
  40f4ca:	465f      	mov	r7, fp
  40f4cc:	4680      	mov	r8, r0
  40f4ce:	b348      	cbz	r0, 40f524 <_dtoa_r+0xac>
  40f4d0:	2301      	movs	r3, #1
  40f4d2:	9a00      	ldr	r2, [sp, #0]
  40f4d4:	6013      	str	r3, [r2, #0]
  40f4d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f4d8:	2b00      	cmp	r3, #0
  40f4da:	f000 80c8 	beq.w	40f66e <_dtoa_r+0x1f6>
  40f4de:	488d      	ldr	r0, [pc, #564]	; (40f714 <_dtoa_r+0x29c>)
  40f4e0:	6018      	str	r0, [r3, #0]
  40f4e2:	3801      	subs	r0, #1
  40f4e4:	b019      	add	sp, #100	; 0x64
  40f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f4ea:	f242 730f 	movw	r3, #9999	; 0x270f
  40f4ee:	9a00      	ldr	r2, [sp, #0]
  40f4f0:	6013      	str	r3, [r2, #0]
  40f4f2:	f1ba 0f00 	cmp.w	sl, #0
  40f4f6:	f000 80a3 	beq.w	40f640 <_dtoa_r+0x1c8>
  40f4fa:	4887      	ldr	r0, [pc, #540]	; (40f718 <_dtoa_r+0x2a0>)
  40f4fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f4fe:	2b00      	cmp	r3, #0
  40f500:	d0f0      	beq.n	40f4e4 <_dtoa_r+0x6c>
  40f502:	78c3      	ldrb	r3, [r0, #3]
  40f504:	2b00      	cmp	r3, #0
  40f506:	f000 80b4 	beq.w	40f672 <_dtoa_r+0x1fa>
  40f50a:	f100 0308 	add.w	r3, r0, #8
  40f50e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40f510:	6013      	str	r3, [r2, #0]
  40f512:	b019      	add	sp, #100	; 0x64
  40f514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f518:	2301      	movs	r3, #1
  40f51a:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40f51e:	602b      	str	r3, [r5, #0]
  40f520:	46cb      	mov	fp, r9
  40f522:	e7c5      	b.n	40f4b0 <_dtoa_r+0x38>
  40f524:	4620      	mov	r0, r4
  40f526:	a917      	add	r1, sp, #92	; 0x5c
  40f528:	aa16      	add	r2, sp, #88	; 0x58
  40f52a:	ec47 6b10 	vmov	d0, r6, r7
  40f52e:	f002 fc03 	bl	411d38 <__d2b>
  40f532:	9007      	str	r0, [sp, #28]
  40f534:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40f538:	f040 808b 	bne.w	40f652 <_dtoa_r+0x1da>
  40f53c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40f540:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40f544:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40f546:	4445      	add	r5, r8
  40f548:	429d      	cmp	r5, r3
  40f54a:	f2c0 81c9 	blt.w	40f8e0 <_dtoa_r+0x468>
  40f54e:	331f      	adds	r3, #31
  40f550:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40f554:	1b5b      	subs	r3, r3, r5
  40f556:	fa2a f002 	lsr.w	r0, sl, r2
  40f55a:	fa09 f903 	lsl.w	r9, r9, r3
  40f55e:	ea49 0000 	orr.w	r0, r9, r0
  40f562:	f7fb fb51 	bl	40ac08 <__aeabi_ui2d>
  40f566:	3d01      	subs	r5, #1
  40f568:	2301      	movs	r3, #1
  40f56a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40f56e:	9312      	str	r3, [sp, #72]	; 0x48
  40f570:	2200      	movs	r2, #0
  40f572:	4b6a      	ldr	r3, [pc, #424]	; (40f71c <_dtoa_r+0x2a4>)
  40f574:	f7fb fa0a 	bl	40a98c <__aeabi_dsub>
  40f578:	a35f      	add	r3, pc, #380	; (adr r3, 40f6f8 <_dtoa_r+0x280>)
  40f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f57e:	f7fb fbb9 	bl	40acf4 <__aeabi_dmul>
  40f582:	a35f      	add	r3, pc, #380	; (adr r3, 40f700 <_dtoa_r+0x288>)
  40f584:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f588:	f7fb fa02 	bl	40a990 <__adddf3>
  40f58c:	4606      	mov	r6, r0
  40f58e:	460f      	mov	r7, r1
  40f590:	4628      	mov	r0, r5
  40f592:	f7fb fb49 	bl	40ac28 <__aeabi_i2d>
  40f596:	a35c      	add	r3, pc, #368	; (adr r3, 40f708 <_dtoa_r+0x290>)
  40f598:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f59c:	f7fb fbaa 	bl	40acf4 <__aeabi_dmul>
  40f5a0:	4602      	mov	r2, r0
  40f5a2:	460b      	mov	r3, r1
  40f5a4:	4630      	mov	r0, r6
  40f5a6:	4639      	mov	r1, r7
  40f5a8:	f7fb f9f2 	bl	40a990 <__adddf3>
  40f5ac:	4606      	mov	r6, r0
  40f5ae:	460f      	mov	r7, r1
  40f5b0:	f7fb fe3a 	bl	40b228 <__aeabi_d2iz>
  40f5b4:	2200      	movs	r2, #0
  40f5b6:	9002      	str	r0, [sp, #8]
  40f5b8:	4639      	mov	r1, r7
  40f5ba:	4630      	mov	r0, r6
  40f5bc:	2300      	movs	r3, #0
  40f5be:	f7fb fe0b 	bl	40b1d8 <__aeabi_dcmplt>
  40f5c2:	2800      	cmp	r0, #0
  40f5c4:	f040 816e 	bne.w	40f8a4 <_dtoa_r+0x42c>
  40f5c8:	9b02      	ldr	r3, [sp, #8]
  40f5ca:	2b16      	cmp	r3, #22
  40f5cc:	f200 8090 	bhi.w	40f6f0 <_dtoa_r+0x278>
  40f5d0:	4953      	ldr	r1, [pc, #332]	; (40f720 <_dtoa_r+0x2a8>)
  40f5d2:	4652      	mov	r2, sl
  40f5d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40f5d8:	465b      	mov	r3, fp
  40f5da:	e9d1 0100 	ldrd	r0, r1, [r1]
  40f5de:	f7fb fe19 	bl	40b214 <__aeabi_dcmpgt>
  40f5e2:	2800      	cmp	r0, #0
  40f5e4:	f000 817a 	beq.w	40f8dc <_dtoa_r+0x464>
  40f5e8:	9b02      	ldr	r3, [sp, #8]
  40f5ea:	3b01      	subs	r3, #1
  40f5ec:	9302      	str	r3, [sp, #8]
  40f5ee:	2300      	movs	r3, #0
  40f5f0:	930e      	str	r3, [sp, #56]	; 0x38
  40f5f2:	ebc5 0508 	rsb	r5, r5, r8
  40f5f6:	1e6b      	subs	r3, r5, #1
  40f5f8:	9304      	str	r3, [sp, #16]
  40f5fa:	f100 816a 	bmi.w	40f8d2 <_dtoa_r+0x45a>
  40f5fe:	2300      	movs	r3, #0
  40f600:	930a      	str	r3, [sp, #40]	; 0x28
  40f602:	9b02      	ldr	r3, [sp, #8]
  40f604:	2b00      	cmp	r3, #0
  40f606:	f2c0 815b 	blt.w	40f8c0 <_dtoa_r+0x448>
  40f60a:	9a04      	ldr	r2, [sp, #16]
  40f60c:	930d      	str	r3, [sp, #52]	; 0x34
  40f60e:	4611      	mov	r1, r2
  40f610:	4419      	add	r1, r3
  40f612:	2300      	movs	r3, #0
  40f614:	9104      	str	r1, [sp, #16]
  40f616:	930b      	str	r3, [sp, #44]	; 0x2c
  40f618:	9b01      	ldr	r3, [sp, #4]
  40f61a:	2b09      	cmp	r3, #9
  40f61c:	d82b      	bhi.n	40f676 <_dtoa_r+0x1fe>
  40f61e:	2b05      	cmp	r3, #5
  40f620:	f340 866d 	ble.w	4102fe <_dtoa_r+0xe86>
  40f624:	3b04      	subs	r3, #4
  40f626:	2500      	movs	r5, #0
  40f628:	9301      	str	r3, [sp, #4]
  40f62a:	9b01      	ldr	r3, [sp, #4]
  40f62c:	3b02      	subs	r3, #2
  40f62e:	2b03      	cmp	r3, #3
  40f630:	f200 8668 	bhi.w	410304 <_dtoa_r+0xe8c>
  40f634:	e8df f013 	tbh	[pc, r3, lsl #1]
  40f638:	02820294 	.word	0x02820294
  40f63c:	067c017e 	.word	0x067c017e
  40f640:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40f644:	4b34      	ldr	r3, [pc, #208]	; (40f718 <_dtoa_r+0x2a0>)
  40f646:	4a37      	ldr	r2, [pc, #220]	; (40f724 <_dtoa_r+0x2ac>)
  40f648:	2800      	cmp	r0, #0
  40f64a:	bf14      	ite	ne
  40f64c:	4618      	movne	r0, r3
  40f64e:	4610      	moveq	r0, r2
  40f650:	e754      	b.n	40f4fc <_dtoa_r+0x84>
  40f652:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40f656:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  40f65a:	4650      	mov	r0, sl
  40f65c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40f660:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40f664:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40f668:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40f66c:	e780      	b.n	40f570 <_dtoa_r+0xf8>
  40f66e:	482e      	ldr	r0, [pc, #184]	; (40f728 <_dtoa_r+0x2b0>)
  40f670:	e738      	b.n	40f4e4 <_dtoa_r+0x6c>
  40f672:	1cc3      	adds	r3, r0, #3
  40f674:	e74b      	b.n	40f50e <_dtoa_r+0x96>
  40f676:	2100      	movs	r1, #0
  40f678:	f04f 33ff 	mov.w	r3, #4294967295
  40f67c:	4620      	mov	r0, r4
  40f67e:	461d      	mov	r5, r3
  40f680:	930f      	str	r3, [sp, #60]	; 0x3c
  40f682:	460e      	mov	r6, r1
  40f684:	2301      	movs	r3, #1
  40f686:	6461      	str	r1, [r4, #68]	; 0x44
  40f688:	930c      	str	r3, [sp, #48]	; 0x30
  40f68a:	9103      	str	r1, [sp, #12]
  40f68c:	f001 ffc6 	bl	41161c <_Balloc>
  40f690:	9601      	str	r6, [sp, #4]
  40f692:	9005      	str	r0, [sp, #20]
  40f694:	9506      	str	r5, [sp, #24]
  40f696:	6420      	str	r0, [r4, #64]	; 0x40
  40f698:	9a02      	ldr	r2, [sp, #8]
  40f69a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40f69c:	2a0e      	cmp	r2, #14
  40f69e:	dc47      	bgt.n	40f730 <_dtoa_r+0x2b8>
  40f6a0:	2b00      	cmp	r3, #0
  40f6a2:	db45      	blt.n	40f730 <_dtoa_r+0x2b8>
  40f6a4:	4b1e      	ldr	r3, [pc, #120]	; (40f720 <_dtoa_r+0x2a8>)
  40f6a6:	9a02      	ldr	r2, [sp, #8]
  40f6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f6ac:	e9d3 8900 	ldrd	r8, r9, [r3]
  40f6b0:	9b06      	ldr	r3, [sp, #24]
  40f6b2:	2b00      	cmp	r3, #0
  40f6b4:	f300 8257 	bgt.w	40fb66 <_dtoa_r+0x6ee>
  40f6b8:	9b03      	ldr	r3, [sp, #12]
  40f6ba:	2b00      	cmp	r3, #0
  40f6bc:	f280 8253 	bge.w	40fb66 <_dtoa_r+0x6ee>
  40f6c0:	9b06      	ldr	r3, [sp, #24]
  40f6c2:	2b00      	cmp	r3, #0
  40f6c4:	f040 8323 	bne.w	40fd0e <_dtoa_r+0x896>
  40f6c8:	2200      	movs	r2, #0
  40f6ca:	4b18      	ldr	r3, [pc, #96]	; (40f72c <_dtoa_r+0x2b4>)
  40f6cc:	4640      	mov	r0, r8
  40f6ce:	4649      	mov	r1, r9
  40f6d0:	f7fb fb10 	bl	40acf4 <__aeabi_dmul>
  40f6d4:	4652      	mov	r2, sl
  40f6d6:	465b      	mov	r3, fp
  40f6d8:	f7fb fd92 	bl	40b200 <__aeabi_dcmpge>
  40f6dc:	9e06      	ldr	r6, [sp, #24]
  40f6de:	9608      	str	r6, [sp, #32]
  40f6e0:	2800      	cmp	r0, #0
  40f6e2:	f000 80bb 	beq.w	40f85c <_dtoa_r+0x3e4>
  40f6e6:	9b03      	ldr	r3, [sp, #12]
  40f6e8:	9d05      	ldr	r5, [sp, #20]
  40f6ea:	43db      	mvns	r3, r3
  40f6ec:	9302      	str	r3, [sp, #8]
  40f6ee:	e0bc      	b.n	40f86a <_dtoa_r+0x3f2>
  40f6f0:	2301      	movs	r3, #1
  40f6f2:	930e      	str	r3, [sp, #56]	; 0x38
  40f6f4:	e77d      	b.n	40f5f2 <_dtoa_r+0x17a>
  40f6f6:	bf00      	nop
  40f6f8:	636f4361 	.word	0x636f4361
  40f6fc:	3fd287a7 	.word	0x3fd287a7
  40f700:	8b60c8b3 	.word	0x8b60c8b3
  40f704:	3fc68a28 	.word	0x3fc68a28
  40f708:	509f79fb 	.word	0x509f79fb
  40f70c:	3fd34413 	.word	0x3fd34413
  40f710:	7ff00000 	.word	0x7ff00000
  40f714:	00413e31 	.word	0x00413e31
  40f718:	00413f64 	.word	0x00413f64
  40f71c:	3ff80000 	.word	0x3ff80000
  40f720:	00414078 	.word	0x00414078
  40f724:	00413f58 	.word	0x00413f58
  40f728:	00413e30 	.word	0x00413e30
  40f72c:	40140000 	.word	0x40140000
  40f730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f732:	2a00      	cmp	r2, #0
  40f734:	f040 80e1 	bne.w	40f8fa <_dtoa_r+0x482>
  40f738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f73a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40f73c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f73e:	9308      	str	r3, [sp, #32]
  40f740:	9904      	ldr	r1, [sp, #16]
  40f742:	2900      	cmp	r1, #0
  40f744:	460b      	mov	r3, r1
  40f746:	dd0a      	ble.n	40f75e <_dtoa_r+0x2e6>
  40f748:	2d00      	cmp	r5, #0
  40f74a:	dd08      	ble.n	40f75e <_dtoa_r+0x2e6>
  40f74c:	42a9      	cmp	r1, r5
  40f74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f750:	bfa8      	it	ge
  40f752:	462b      	movge	r3, r5
  40f754:	1ad2      	subs	r2, r2, r3
  40f756:	1aed      	subs	r5, r5, r3
  40f758:	1acb      	subs	r3, r1, r3
  40f75a:	920a      	str	r2, [sp, #40]	; 0x28
  40f75c:	9304      	str	r3, [sp, #16]
  40f75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f760:	2b00      	cmp	r3, #0
  40f762:	dd1b      	ble.n	40f79c <_dtoa_r+0x324>
  40f764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f766:	2b00      	cmp	r3, #0
  40f768:	f000 84c4 	beq.w	4100f4 <_dtoa_r+0xc7c>
  40f76c:	2e00      	cmp	r6, #0
  40f76e:	dd11      	ble.n	40f794 <_dtoa_r+0x31c>
  40f770:	9908      	ldr	r1, [sp, #32]
  40f772:	4632      	mov	r2, r6
  40f774:	4620      	mov	r0, r4
  40f776:	f002 f90f 	bl	411998 <__pow5mult>
  40f77a:	9f07      	ldr	r7, [sp, #28]
  40f77c:	4601      	mov	r1, r0
  40f77e:	9008      	str	r0, [sp, #32]
  40f780:	463a      	mov	r2, r7
  40f782:	4620      	mov	r0, r4
  40f784:	f002 f866 	bl	411854 <__multiply>
  40f788:	4603      	mov	r3, r0
  40f78a:	4639      	mov	r1, r7
  40f78c:	4620      	mov	r0, r4
  40f78e:	9307      	str	r3, [sp, #28]
  40f790:	f001 ff6c 	bl	41166c <_Bfree>
  40f794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f796:	1b9a      	subs	r2, r3, r6
  40f798:	f040 84f4 	bne.w	410184 <_dtoa_r+0xd0c>
  40f79c:	4620      	mov	r0, r4
  40f79e:	2101      	movs	r1, #1
  40f7a0:	f002 f84e 	bl	411840 <__i2b>
  40f7a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f7a6:	4606      	mov	r6, r0
  40f7a8:	2b00      	cmp	r3, #0
  40f7aa:	f340 827c 	ble.w	40fca6 <_dtoa_r+0x82e>
  40f7ae:	4601      	mov	r1, r0
  40f7b0:	461a      	mov	r2, r3
  40f7b2:	4620      	mov	r0, r4
  40f7b4:	f002 f8f0 	bl	411998 <__pow5mult>
  40f7b8:	9b01      	ldr	r3, [sp, #4]
  40f7ba:	4606      	mov	r6, r0
  40f7bc:	2b01      	cmp	r3, #1
  40f7be:	f340 84e8 	ble.w	410192 <_dtoa_r+0xd1a>
  40f7c2:	f04f 0800 	mov.w	r8, #0
  40f7c6:	6933      	ldr	r3, [r6, #16]
  40f7c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40f7cc:	6918      	ldr	r0, [r3, #16]
  40f7ce:	f001 ffe3 	bl	411798 <__hi0bits>
  40f7d2:	f1c0 0020 	rsb	r0, r0, #32
  40f7d6:	9b04      	ldr	r3, [sp, #16]
  40f7d8:	4418      	add	r0, r3
  40f7da:	f010 001f 	ands.w	r0, r0, #31
  40f7de:	f000 82f1 	beq.w	40fdc4 <_dtoa_r+0x94c>
  40f7e2:	f1c0 0320 	rsb	r3, r0, #32
  40f7e6:	2b04      	cmp	r3, #4
  40f7e8:	f340 8583 	ble.w	4102f2 <_dtoa_r+0xe7a>
  40f7ec:	f1c0 001c 	rsb	r0, r0, #28
  40f7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f7f2:	4405      	add	r5, r0
  40f7f4:	4403      	add	r3, r0
  40f7f6:	930a      	str	r3, [sp, #40]	; 0x28
  40f7f8:	9b04      	ldr	r3, [sp, #16]
  40f7fa:	4403      	add	r3, r0
  40f7fc:	9304      	str	r3, [sp, #16]
  40f7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f800:	2b00      	cmp	r3, #0
  40f802:	dd05      	ble.n	40f810 <_dtoa_r+0x398>
  40f804:	9907      	ldr	r1, [sp, #28]
  40f806:	461a      	mov	r2, r3
  40f808:	4620      	mov	r0, r4
  40f80a:	f002 f915 	bl	411a38 <__lshift>
  40f80e:	9007      	str	r0, [sp, #28]
  40f810:	9b04      	ldr	r3, [sp, #16]
  40f812:	2b00      	cmp	r3, #0
  40f814:	dd05      	ble.n	40f822 <_dtoa_r+0x3aa>
  40f816:	4631      	mov	r1, r6
  40f818:	461a      	mov	r2, r3
  40f81a:	4620      	mov	r0, r4
  40f81c:	f002 f90c 	bl	411a38 <__lshift>
  40f820:	4606      	mov	r6, r0
  40f822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f824:	2b00      	cmp	r3, #0
  40f826:	f040 837f 	bne.w	40ff28 <_dtoa_r+0xab0>
  40f82a:	9b01      	ldr	r3, [sp, #4]
  40f82c:	2b02      	cmp	r3, #2
  40f82e:	f340 8271 	ble.w	40fd14 <_dtoa_r+0x89c>
  40f832:	9b06      	ldr	r3, [sp, #24]
  40f834:	2b00      	cmp	r3, #0
  40f836:	f300 826d 	bgt.w	40fd14 <_dtoa_r+0x89c>
  40f83a:	9b06      	ldr	r3, [sp, #24]
  40f83c:	2b00      	cmp	r3, #0
  40f83e:	f47f af52 	bne.w	40f6e6 <_dtoa_r+0x26e>
  40f842:	4631      	mov	r1, r6
  40f844:	2205      	movs	r2, #5
  40f846:	4620      	mov	r0, r4
  40f848:	f001 ff1a 	bl	411680 <__multadd>
  40f84c:	4606      	mov	r6, r0
  40f84e:	9807      	ldr	r0, [sp, #28]
  40f850:	4631      	mov	r1, r6
  40f852:	f002 f94b 	bl	411aec <__mcmp>
  40f856:	2800      	cmp	r0, #0
  40f858:	f77f af45 	ble.w	40f6e6 <_dtoa_r+0x26e>
  40f85c:	9a02      	ldr	r2, [sp, #8]
  40f85e:	2331      	movs	r3, #49	; 0x31
  40f860:	3201      	adds	r2, #1
  40f862:	9202      	str	r2, [sp, #8]
  40f864:	9a05      	ldr	r2, [sp, #20]
  40f866:	1c55      	adds	r5, r2, #1
  40f868:	7013      	strb	r3, [r2, #0]
  40f86a:	4631      	mov	r1, r6
  40f86c:	4620      	mov	r0, r4
  40f86e:	f001 fefd 	bl	41166c <_Bfree>
  40f872:	9b08      	ldr	r3, [sp, #32]
  40f874:	b11b      	cbz	r3, 40f87e <_dtoa_r+0x406>
  40f876:	9908      	ldr	r1, [sp, #32]
  40f878:	4620      	mov	r0, r4
  40f87a:	f001 fef7 	bl	41166c <_Bfree>
  40f87e:	4620      	mov	r0, r4
  40f880:	9907      	ldr	r1, [sp, #28]
  40f882:	f001 fef3 	bl	41166c <_Bfree>
  40f886:	2200      	movs	r2, #0
  40f888:	9b02      	ldr	r3, [sp, #8]
  40f88a:	702a      	strb	r2, [r5, #0]
  40f88c:	3301      	adds	r3, #1
  40f88e:	9a00      	ldr	r2, [sp, #0]
  40f890:	6013      	str	r3, [r2, #0]
  40f892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f894:	2b00      	cmp	r3, #0
  40f896:	f000 829c 	beq.w	40fdd2 <_dtoa_r+0x95a>
  40f89a:	9805      	ldr	r0, [sp, #20]
  40f89c:	601d      	str	r5, [r3, #0]
  40f89e:	b019      	add	sp, #100	; 0x64
  40f8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f8a4:	9802      	ldr	r0, [sp, #8]
  40f8a6:	f7fb f9bf 	bl	40ac28 <__aeabi_i2d>
  40f8aa:	4632      	mov	r2, r6
  40f8ac:	463b      	mov	r3, r7
  40f8ae:	f7fb fc89 	bl	40b1c4 <__aeabi_dcmpeq>
  40f8b2:	2800      	cmp	r0, #0
  40f8b4:	f47f ae88 	bne.w	40f5c8 <_dtoa_r+0x150>
  40f8b8:	9b02      	ldr	r3, [sp, #8]
  40f8ba:	3b01      	subs	r3, #1
  40f8bc:	9302      	str	r3, [sp, #8]
  40f8be:	e683      	b.n	40f5c8 <_dtoa_r+0x150>
  40f8c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f8c2:	9b02      	ldr	r3, [sp, #8]
  40f8c4:	1ad2      	subs	r2, r2, r3
  40f8c6:	425b      	negs	r3, r3
  40f8c8:	930b      	str	r3, [sp, #44]	; 0x2c
  40f8ca:	2300      	movs	r3, #0
  40f8cc:	920a      	str	r2, [sp, #40]	; 0x28
  40f8ce:	930d      	str	r3, [sp, #52]	; 0x34
  40f8d0:	e6a2      	b.n	40f618 <_dtoa_r+0x1a0>
  40f8d2:	425b      	negs	r3, r3
  40f8d4:	930a      	str	r3, [sp, #40]	; 0x28
  40f8d6:	2300      	movs	r3, #0
  40f8d8:	9304      	str	r3, [sp, #16]
  40f8da:	e692      	b.n	40f602 <_dtoa_r+0x18a>
  40f8dc:	900e      	str	r0, [sp, #56]	; 0x38
  40f8de:	e688      	b.n	40f5f2 <_dtoa_r+0x17a>
  40f8e0:	4bba      	ldr	r3, [pc, #744]	; (40fbcc <_dtoa_r+0x754>)
  40f8e2:	1b5b      	subs	r3, r3, r5
  40f8e4:	fa0a f003 	lsl.w	r0, sl, r3
  40f8e8:	e63b      	b.n	40f562 <_dtoa_r+0xea>
  40f8ea:	2100      	movs	r1, #0
  40f8ec:	f04f 32ff 	mov.w	r2, #4294967295
  40f8f0:	9103      	str	r1, [sp, #12]
  40f8f2:	2101      	movs	r1, #1
  40f8f4:	9206      	str	r2, [sp, #24]
  40f8f6:	910c      	str	r1, [sp, #48]	; 0x30
  40f8f8:	920f      	str	r2, [sp, #60]	; 0x3c
  40f8fa:	9a01      	ldr	r2, [sp, #4]
  40f8fc:	2a01      	cmp	r2, #1
  40f8fe:	f340 8455 	ble.w	4101ac <_dtoa_r+0xd34>
  40f902:	9b06      	ldr	r3, [sp, #24]
  40f904:	1e5e      	subs	r6, r3, #1
  40f906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f908:	42b3      	cmp	r3, r6
  40f90a:	f2c0 83fb 	blt.w	410104 <_dtoa_r+0xc8c>
  40f90e:	1b9e      	subs	r6, r3, r6
  40f910:	9b06      	ldr	r3, [sp, #24]
  40f912:	2b00      	cmp	r3, #0
  40f914:	f2c0 8475 	blt.w	410202 <_dtoa_r+0xd8a>
  40f918:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f91a:	9b06      	ldr	r3, [sp, #24]
  40f91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f91e:	4620      	mov	r0, r4
  40f920:	2101      	movs	r1, #1
  40f922:	441a      	add	r2, r3
  40f924:	920a      	str	r2, [sp, #40]	; 0x28
  40f926:	9a04      	ldr	r2, [sp, #16]
  40f928:	441a      	add	r2, r3
  40f92a:	9204      	str	r2, [sp, #16]
  40f92c:	f001 ff88 	bl	411840 <__i2b>
  40f930:	9008      	str	r0, [sp, #32]
  40f932:	e705      	b.n	40f740 <_dtoa_r+0x2c8>
  40f934:	2301      	movs	r3, #1
  40f936:	930c      	str	r3, [sp, #48]	; 0x30
  40f938:	9b03      	ldr	r3, [sp, #12]
  40f93a:	2b00      	cmp	r3, #0
  40f93c:	f340 83cd 	ble.w	4100da <_dtoa_r+0xc62>
  40f940:	2b0e      	cmp	r3, #14
  40f942:	bf8c      	ite	hi
  40f944:	2500      	movhi	r5, #0
  40f946:	f005 0501 	andls.w	r5, r5, #1
  40f94a:	461e      	mov	r6, r3
  40f94c:	930f      	str	r3, [sp, #60]	; 0x3c
  40f94e:	9306      	str	r3, [sp, #24]
  40f950:	2100      	movs	r1, #0
  40f952:	2e17      	cmp	r6, #23
  40f954:	6461      	str	r1, [r4, #68]	; 0x44
  40f956:	d909      	bls.n	40f96c <_dtoa_r+0x4f4>
  40f958:	2201      	movs	r2, #1
  40f95a:	2304      	movs	r3, #4
  40f95c:	005b      	lsls	r3, r3, #1
  40f95e:	4611      	mov	r1, r2
  40f960:	3201      	adds	r2, #1
  40f962:	f103 0014 	add.w	r0, r3, #20
  40f966:	42b0      	cmp	r0, r6
  40f968:	d9f8      	bls.n	40f95c <_dtoa_r+0x4e4>
  40f96a:	6461      	str	r1, [r4, #68]	; 0x44
  40f96c:	4620      	mov	r0, r4
  40f96e:	f001 fe55 	bl	41161c <_Balloc>
  40f972:	9005      	str	r0, [sp, #20]
  40f974:	6420      	str	r0, [r4, #64]	; 0x40
  40f976:	2d00      	cmp	r5, #0
  40f978:	f43f ae8e 	beq.w	40f698 <_dtoa_r+0x220>
  40f97c:	9802      	ldr	r0, [sp, #8]
  40f97e:	2800      	cmp	r0, #0
  40f980:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40f984:	f340 822c 	ble.w	40fde0 <_dtoa_r+0x968>
  40f988:	4a91      	ldr	r2, [pc, #580]	; (40fbd0 <_dtoa_r+0x758>)
  40f98a:	f000 030f 	and.w	r3, r0, #15
  40f98e:	1105      	asrs	r5, r0, #4
  40f990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40f994:	e9d3 6700 	ldrd	r6, r7, [r3]
  40f998:	06eb      	lsls	r3, r5, #27
  40f99a:	f140 8215 	bpl.w	40fdc8 <_dtoa_r+0x950>
  40f99e:	4b8d      	ldr	r3, [pc, #564]	; (40fbd4 <_dtoa_r+0x75c>)
  40f9a0:	4650      	mov	r0, sl
  40f9a2:	4659      	mov	r1, fp
  40f9a4:	f005 050f 	and.w	r5, r5, #15
  40f9a8:	f04f 0803 	mov.w	r8, #3
  40f9ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40f9b0:	f7fb faca 	bl	40af48 <__aeabi_ddiv>
  40f9b4:	4682      	mov	sl, r0
  40f9b6:	468b      	mov	fp, r1
  40f9b8:	b195      	cbz	r5, 40f9e0 <_dtoa_r+0x568>
  40f9ba:	f8df 9218 	ldr.w	r9, [pc, #536]	; 40fbd4 <_dtoa_r+0x75c>
  40f9be:	f015 0f01 	tst.w	r5, #1
  40f9c2:	4630      	mov	r0, r6
  40f9c4:	4639      	mov	r1, r7
  40f9c6:	d007      	beq.n	40f9d8 <_dtoa_r+0x560>
  40f9c8:	f108 0801 	add.w	r8, r8, #1
  40f9cc:	e9d9 2300 	ldrd	r2, r3, [r9]
  40f9d0:	f7fb f990 	bl	40acf4 <__aeabi_dmul>
  40f9d4:	4606      	mov	r6, r0
  40f9d6:	460f      	mov	r7, r1
  40f9d8:	106d      	asrs	r5, r5, #1
  40f9da:	f109 0908 	add.w	r9, r9, #8
  40f9de:	d1ee      	bne.n	40f9be <_dtoa_r+0x546>
  40f9e0:	4650      	mov	r0, sl
  40f9e2:	4659      	mov	r1, fp
  40f9e4:	4632      	mov	r2, r6
  40f9e6:	463b      	mov	r3, r7
  40f9e8:	f7fb faae 	bl	40af48 <__aeabi_ddiv>
  40f9ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40f9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f9f2:	b143      	cbz	r3, 40fa06 <_dtoa_r+0x58e>
  40f9f4:	2200      	movs	r2, #0
  40f9f6:	4b78      	ldr	r3, [pc, #480]	; (40fbd8 <_dtoa_r+0x760>)
  40f9f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f9fc:	f7fb fbec 	bl	40b1d8 <__aeabi_dcmplt>
  40fa00:	2800      	cmp	r0, #0
  40fa02:	f040 8391 	bne.w	410128 <_dtoa_r+0xcb0>
  40fa06:	4640      	mov	r0, r8
  40fa08:	f7fb f90e 	bl	40ac28 <__aeabi_i2d>
  40fa0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40fa10:	f7fb f970 	bl	40acf4 <__aeabi_dmul>
  40fa14:	4b71      	ldr	r3, [pc, #452]	; (40fbdc <_dtoa_r+0x764>)
  40fa16:	2200      	movs	r2, #0
  40fa18:	f7fa ffba 	bl	40a990 <__adddf3>
  40fa1c:	9b06      	ldr	r3, [sp, #24]
  40fa1e:	4680      	mov	r8, r0
  40fa20:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  40fa24:	2b00      	cmp	r3, #0
  40fa26:	f000 815a 	beq.w	40fcde <_dtoa_r+0x866>
  40fa2a:	9b02      	ldr	r3, [sp, #8]
  40fa2c:	9f06      	ldr	r7, [sp, #24]
  40fa2e:	9313      	str	r3, [sp, #76]	; 0x4c
  40fa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fa32:	2b00      	cmp	r3, #0
  40fa34:	f000 8205 	beq.w	40fe42 <_dtoa_r+0x9ca>
  40fa38:	4b65      	ldr	r3, [pc, #404]	; (40fbd0 <_dtoa_r+0x758>)
  40fa3a:	2000      	movs	r0, #0
  40fa3c:	9a05      	ldr	r2, [sp, #20]
  40fa3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40fa42:	4967      	ldr	r1, [pc, #412]	; (40fbe0 <_dtoa_r+0x768>)
  40fa44:	1c55      	adds	r5, r2, #1
  40fa46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40fa4a:	f7fb fa7d 	bl	40af48 <__aeabi_ddiv>
  40fa4e:	4642      	mov	r2, r8
  40fa50:	464b      	mov	r3, r9
  40fa52:	f7fa ff9b 	bl	40a98c <__aeabi_dsub>
  40fa56:	4682      	mov	sl, r0
  40fa58:	468b      	mov	fp, r1
  40fa5a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40fa5e:	4649      	mov	r1, r9
  40fa60:	4640      	mov	r0, r8
  40fa62:	f7fb fbe1 	bl	40b228 <__aeabi_d2iz>
  40fa66:	4606      	mov	r6, r0
  40fa68:	f7fb f8de 	bl	40ac28 <__aeabi_i2d>
  40fa6c:	4602      	mov	r2, r0
  40fa6e:	3630      	adds	r6, #48	; 0x30
  40fa70:	460b      	mov	r3, r1
  40fa72:	4640      	mov	r0, r8
  40fa74:	4649      	mov	r1, r9
  40fa76:	f7fa ff89 	bl	40a98c <__aeabi_dsub>
  40fa7a:	9b05      	ldr	r3, [sp, #20]
  40fa7c:	4680      	mov	r8, r0
  40fa7e:	4689      	mov	r9, r1
  40fa80:	b2f6      	uxtb	r6, r6
  40fa82:	4650      	mov	r0, sl
  40fa84:	4659      	mov	r1, fp
  40fa86:	4642      	mov	r2, r8
  40fa88:	701e      	strb	r6, [r3, #0]
  40fa8a:	464b      	mov	r3, r9
  40fa8c:	f7fb fbc2 	bl	40b214 <__aeabi_dcmpgt>
  40fa90:	2800      	cmp	r0, #0
  40fa92:	f040 8239 	bne.w	40ff08 <_dtoa_r+0xa90>
  40fa96:	4642      	mov	r2, r8
  40fa98:	464b      	mov	r3, r9
  40fa9a:	2000      	movs	r0, #0
  40fa9c:	494e      	ldr	r1, [pc, #312]	; (40fbd8 <_dtoa_r+0x760>)
  40fa9e:	f7fa ff75 	bl	40a98c <__aeabi_dsub>
  40faa2:	4602      	mov	r2, r0
  40faa4:	460b      	mov	r3, r1
  40faa6:	4650      	mov	r0, sl
  40faa8:	4659      	mov	r1, fp
  40faaa:	f7fb fbb3 	bl	40b214 <__aeabi_dcmpgt>
  40faae:	2800      	cmp	r0, #0
  40fab0:	f040 80e7 	bne.w	40fc82 <_dtoa_r+0x80a>
  40fab4:	2f01      	cmp	r7, #1
  40fab6:	f340 8190 	ble.w	40fdda <_dtoa_r+0x962>
  40faba:	9b05      	ldr	r3, [sp, #20]
  40fabc:	9414      	str	r4, [sp, #80]	; 0x50
  40fabe:	441f      	add	r7, r3
  40fac0:	9708      	str	r7, [sp, #32]
  40fac2:	e010      	b.n	40fae6 <_dtoa_r+0x66e>
  40fac4:	4642      	mov	r2, r8
  40fac6:	464b      	mov	r3, r9
  40fac8:	2000      	movs	r0, #0
  40faca:	4943      	ldr	r1, [pc, #268]	; (40fbd8 <_dtoa_r+0x760>)
  40facc:	f7fa ff5e 	bl	40a98c <__aeabi_dsub>
  40fad0:	4652      	mov	r2, sl
  40fad2:	465b      	mov	r3, fp
  40fad4:	f7fb fb80 	bl	40b1d8 <__aeabi_dcmplt>
  40fad8:	2800      	cmp	r0, #0
  40fada:	f040 8398 	bne.w	41020e <_dtoa_r+0xd96>
  40fade:	9b08      	ldr	r3, [sp, #32]
  40fae0:	429d      	cmp	r5, r3
  40fae2:	f000 8179 	beq.w	40fdd8 <_dtoa_r+0x960>
  40fae6:	4650      	mov	r0, sl
  40fae8:	4659      	mov	r1, fp
  40faea:	2200      	movs	r2, #0
  40faec:	4b3d      	ldr	r3, [pc, #244]	; (40fbe4 <_dtoa_r+0x76c>)
  40faee:	f7fb f901 	bl	40acf4 <__aeabi_dmul>
  40faf2:	2200      	movs	r2, #0
  40faf4:	4b3b      	ldr	r3, [pc, #236]	; (40fbe4 <_dtoa_r+0x76c>)
  40faf6:	4682      	mov	sl, r0
  40faf8:	468b      	mov	fp, r1
  40fafa:	4640      	mov	r0, r8
  40fafc:	4649      	mov	r1, r9
  40fafe:	f7fb f8f9 	bl	40acf4 <__aeabi_dmul>
  40fb02:	4606      	mov	r6, r0
  40fb04:	460f      	mov	r7, r1
  40fb06:	f7fb fb8f 	bl	40b228 <__aeabi_d2iz>
  40fb0a:	4604      	mov	r4, r0
  40fb0c:	f7fb f88c 	bl	40ac28 <__aeabi_i2d>
  40fb10:	4602      	mov	r2, r0
  40fb12:	4630      	mov	r0, r6
  40fb14:	3430      	adds	r4, #48	; 0x30
  40fb16:	460b      	mov	r3, r1
  40fb18:	4639      	mov	r1, r7
  40fb1a:	b2e6      	uxtb	r6, r4
  40fb1c:	f7fa ff36 	bl	40a98c <__aeabi_dsub>
  40fb20:	4652      	mov	r2, sl
  40fb22:	465b      	mov	r3, fp
  40fb24:	f805 6b01 	strb.w	r6, [r5], #1
  40fb28:	4680      	mov	r8, r0
  40fb2a:	4689      	mov	r9, r1
  40fb2c:	f7fb fb54 	bl	40b1d8 <__aeabi_dcmplt>
  40fb30:	2800      	cmp	r0, #0
  40fb32:	d0c7      	beq.n	40fac4 <_dtoa_r+0x64c>
  40fb34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40fb36:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40fb38:	9302      	str	r3, [sp, #8]
  40fb3a:	e6a0      	b.n	40f87e <_dtoa_r+0x406>
  40fb3c:	2300      	movs	r3, #0
  40fb3e:	930c      	str	r3, [sp, #48]	; 0x30
  40fb40:	9b03      	ldr	r3, [sp, #12]
  40fb42:	9a02      	ldr	r2, [sp, #8]
  40fb44:	4413      	add	r3, r2
  40fb46:	930f      	str	r3, [sp, #60]	; 0x3c
  40fb48:	3301      	adds	r3, #1
  40fb4a:	2b00      	cmp	r3, #0
  40fb4c:	9306      	str	r3, [sp, #24]
  40fb4e:	f340 82cc 	ble.w	4100ea <_dtoa_r+0xc72>
  40fb52:	9e06      	ldr	r6, [sp, #24]
  40fb54:	2e0e      	cmp	r6, #14
  40fb56:	bf8c      	ite	hi
  40fb58:	2500      	movhi	r5, #0
  40fb5a:	f005 0501 	andls.w	r5, r5, #1
  40fb5e:	e6f7      	b.n	40f950 <_dtoa_r+0x4d8>
  40fb60:	2300      	movs	r3, #0
  40fb62:	930c      	str	r3, [sp, #48]	; 0x30
  40fb64:	e6e8      	b.n	40f938 <_dtoa_r+0x4c0>
  40fb66:	9b05      	ldr	r3, [sp, #20]
  40fb68:	4642      	mov	r2, r8
  40fb6a:	4650      	mov	r0, sl
  40fb6c:	4659      	mov	r1, fp
  40fb6e:	1c5d      	adds	r5, r3, #1
  40fb70:	464b      	mov	r3, r9
  40fb72:	f7fb f9e9 	bl	40af48 <__aeabi_ddiv>
  40fb76:	4656      	mov	r6, sl
  40fb78:	f7fb fb56 	bl	40b228 <__aeabi_d2iz>
  40fb7c:	4682      	mov	sl, r0
  40fb7e:	f7fb f853 	bl	40ac28 <__aeabi_i2d>
  40fb82:	4642      	mov	r2, r8
  40fb84:	464b      	mov	r3, r9
  40fb86:	f7fb f8b5 	bl	40acf4 <__aeabi_dmul>
  40fb8a:	4602      	mov	r2, r0
  40fb8c:	460b      	mov	r3, r1
  40fb8e:	4630      	mov	r0, r6
  40fb90:	4659      	mov	r1, fp
  40fb92:	f7fa fefb 	bl	40a98c <__aeabi_dsub>
  40fb96:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40fb9a:	9a05      	ldr	r2, [sp, #20]
  40fb9c:	4606      	mov	r6, r0
  40fb9e:	460f      	mov	r7, r1
  40fba0:	7013      	strb	r3, [r2, #0]
  40fba2:	9b06      	ldr	r3, [sp, #24]
  40fba4:	2b01      	cmp	r3, #1
  40fba6:	d04c      	beq.n	40fc42 <_dtoa_r+0x7ca>
  40fba8:	2200      	movs	r2, #0
  40fbaa:	4b0e      	ldr	r3, [pc, #56]	; (40fbe4 <_dtoa_r+0x76c>)
  40fbac:	f7fb f8a2 	bl	40acf4 <__aeabi_dmul>
  40fbb0:	2200      	movs	r2, #0
  40fbb2:	2300      	movs	r3, #0
  40fbb4:	4606      	mov	r6, r0
  40fbb6:	460f      	mov	r7, r1
  40fbb8:	f7fb fb04 	bl	40b1c4 <__aeabi_dcmpeq>
  40fbbc:	2800      	cmp	r0, #0
  40fbbe:	f47f ae5e 	bne.w	40f87e <_dtoa_r+0x406>
  40fbc2:	9401      	str	r4, [sp, #4]
  40fbc4:	f8dd b014 	ldr.w	fp, [sp, #20]
  40fbc8:	9c06      	ldr	r4, [sp, #24]
  40fbca:	e018      	b.n	40fbfe <_dtoa_r+0x786>
  40fbcc:	fffffbee 	.word	0xfffffbee
  40fbd0:	00414078 	.word	0x00414078
  40fbd4:	00414150 	.word	0x00414150
  40fbd8:	3ff00000 	.word	0x3ff00000
  40fbdc:	401c0000 	.word	0x401c0000
  40fbe0:	3fe00000 	.word	0x3fe00000
  40fbe4:	40240000 	.word	0x40240000
  40fbe8:	f7fb f884 	bl	40acf4 <__aeabi_dmul>
  40fbec:	2200      	movs	r2, #0
  40fbee:	2300      	movs	r3, #0
  40fbf0:	4606      	mov	r6, r0
  40fbf2:	460f      	mov	r7, r1
  40fbf4:	f7fb fae6 	bl	40b1c4 <__aeabi_dcmpeq>
  40fbf8:	2800      	cmp	r0, #0
  40fbfa:	f040 82e0 	bne.w	4101be <_dtoa_r+0xd46>
  40fbfe:	4642      	mov	r2, r8
  40fc00:	464b      	mov	r3, r9
  40fc02:	4630      	mov	r0, r6
  40fc04:	4639      	mov	r1, r7
  40fc06:	f7fb f99f 	bl	40af48 <__aeabi_ddiv>
  40fc0a:	f7fb fb0d 	bl	40b228 <__aeabi_d2iz>
  40fc0e:	4682      	mov	sl, r0
  40fc10:	f7fb f80a 	bl	40ac28 <__aeabi_i2d>
  40fc14:	4642      	mov	r2, r8
  40fc16:	464b      	mov	r3, r9
  40fc18:	f7fb f86c 	bl	40acf4 <__aeabi_dmul>
  40fc1c:	4602      	mov	r2, r0
  40fc1e:	460b      	mov	r3, r1
  40fc20:	4630      	mov	r0, r6
  40fc22:	4639      	mov	r1, r7
  40fc24:	f7fa feb2 	bl	40a98c <__aeabi_dsub>
  40fc28:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40fc2c:	4606      	mov	r6, r0
  40fc2e:	460f      	mov	r7, r1
  40fc30:	f805 3b01 	strb.w	r3, [r5], #1
  40fc34:	ebcb 0305 	rsb	r3, fp, r5
  40fc38:	2200      	movs	r2, #0
  40fc3a:	429c      	cmp	r4, r3
  40fc3c:	4bb4      	ldr	r3, [pc, #720]	; (40ff10 <_dtoa_r+0xa98>)
  40fc3e:	d1d3      	bne.n	40fbe8 <_dtoa_r+0x770>
  40fc40:	9c01      	ldr	r4, [sp, #4]
  40fc42:	4632      	mov	r2, r6
  40fc44:	463b      	mov	r3, r7
  40fc46:	4630      	mov	r0, r6
  40fc48:	4639      	mov	r1, r7
  40fc4a:	f7fa fea1 	bl	40a990 <__adddf3>
  40fc4e:	4606      	mov	r6, r0
  40fc50:	460f      	mov	r7, r1
  40fc52:	4640      	mov	r0, r8
  40fc54:	4649      	mov	r1, r9
  40fc56:	4632      	mov	r2, r6
  40fc58:	463b      	mov	r3, r7
  40fc5a:	f7fb fabd 	bl	40b1d8 <__aeabi_dcmplt>
  40fc5e:	b960      	cbnz	r0, 40fc7a <_dtoa_r+0x802>
  40fc60:	4640      	mov	r0, r8
  40fc62:	4649      	mov	r1, r9
  40fc64:	4632      	mov	r2, r6
  40fc66:	463b      	mov	r3, r7
  40fc68:	f7fb faac 	bl	40b1c4 <__aeabi_dcmpeq>
  40fc6c:	2800      	cmp	r0, #0
  40fc6e:	f43f ae06 	beq.w	40f87e <_dtoa_r+0x406>
  40fc72:	f01a 0f01 	tst.w	sl, #1
  40fc76:	f43f ae02 	beq.w	40f87e <_dtoa_r+0x406>
  40fc7a:	9b02      	ldr	r3, [sp, #8]
  40fc7c:	9313      	str	r3, [sp, #76]	; 0x4c
  40fc7e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40fc82:	1e6a      	subs	r2, r5, #1
  40fc84:	9b05      	ldr	r3, [sp, #20]
  40fc86:	e004      	b.n	40fc92 <_dtoa_r+0x81a>
  40fc88:	429a      	cmp	r2, r3
  40fc8a:	f000 8244 	beq.w	410116 <_dtoa_r+0xc9e>
  40fc8e:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40fc92:	2e39      	cmp	r6, #57	; 0x39
  40fc94:	f102 0501 	add.w	r5, r2, #1
  40fc98:	d0f6      	beq.n	40fc88 <_dtoa_r+0x810>
  40fc9a:	1c73      	adds	r3, r6, #1
  40fc9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40fc9e:	b2db      	uxtb	r3, r3
  40fca0:	9102      	str	r1, [sp, #8]
  40fca2:	7013      	strb	r3, [r2, #0]
  40fca4:	e5eb      	b.n	40f87e <_dtoa_r+0x406>
  40fca6:	9b01      	ldr	r3, [sp, #4]
  40fca8:	2b01      	cmp	r3, #1
  40fcaa:	f340 815b 	ble.w	40ff64 <_dtoa_r+0xaec>
  40fcae:	f04f 0800 	mov.w	r8, #0
  40fcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fcb4:	2b00      	cmp	r3, #0
  40fcb6:	f47f ad86 	bne.w	40f7c6 <_dtoa_r+0x34e>
  40fcba:	2001      	movs	r0, #1
  40fcbc:	e58b      	b.n	40f7d6 <_dtoa_r+0x35e>
  40fcbe:	4640      	mov	r0, r8
  40fcc0:	f7fa ffb2 	bl	40ac28 <__aeabi_i2d>
  40fcc4:	4602      	mov	r2, r0
  40fcc6:	460b      	mov	r3, r1
  40fcc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fccc:	f7fb f812 	bl	40acf4 <__aeabi_dmul>
  40fcd0:	2200      	movs	r2, #0
  40fcd2:	4b90      	ldr	r3, [pc, #576]	; (40ff14 <_dtoa_r+0xa9c>)
  40fcd4:	f7fa fe5c 	bl	40a990 <__adddf3>
  40fcd8:	4680      	mov	r8, r0
  40fcda:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  40fcde:	2200      	movs	r2, #0
  40fce0:	4b8d      	ldr	r3, [pc, #564]	; (40ff18 <_dtoa_r+0xaa0>)
  40fce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fce6:	f7fa fe51 	bl	40a98c <__aeabi_dsub>
  40fcea:	4642      	mov	r2, r8
  40fcec:	464b      	mov	r3, r9
  40fcee:	4606      	mov	r6, r0
  40fcf0:	460f      	mov	r7, r1
  40fcf2:	f7fb fa8f 	bl	40b214 <__aeabi_dcmpgt>
  40fcf6:	2800      	cmp	r0, #0
  40fcf8:	f040 80a0 	bne.w	40fe3c <_dtoa_r+0x9c4>
  40fcfc:	4630      	mov	r0, r6
  40fcfe:	4639      	mov	r1, r7
  40fd00:	4642      	mov	r2, r8
  40fd02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  40fd06:	f7fb fa67 	bl	40b1d8 <__aeabi_dcmplt>
  40fd0a:	2800      	cmp	r0, #0
  40fd0c:	d065      	beq.n	40fdda <_dtoa_r+0x962>
  40fd0e:	2600      	movs	r6, #0
  40fd10:	9608      	str	r6, [sp, #32]
  40fd12:	e4e8      	b.n	40f6e6 <_dtoa_r+0x26e>
  40fd14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fd16:	2b00      	cmp	r3, #0
  40fd18:	f040 814c 	bne.w	40ffb4 <_dtoa_r+0xb3c>
  40fd1c:	f8dd a014 	ldr.w	sl, [sp, #20]
  40fd20:	9f07      	ldr	r7, [sp, #28]
  40fd22:	4655      	mov	r5, sl
  40fd24:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40fd28:	e002      	b.n	40fd30 <_dtoa_r+0x8b8>
  40fd2a:	f001 fca9 	bl	411680 <__multadd>
  40fd2e:	4607      	mov	r7, r0
  40fd30:	4631      	mov	r1, r6
  40fd32:	4638      	mov	r0, r7
  40fd34:	f7ff fafe 	bl	40f334 <quorem>
  40fd38:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40fd3c:	4639      	mov	r1, r7
  40fd3e:	4620      	mov	r0, r4
  40fd40:	f805 8b01 	strb.w	r8, [r5], #1
  40fd44:	ebca 0e05 	rsb	lr, sl, r5
  40fd48:	220a      	movs	r2, #10
  40fd4a:	2300      	movs	r3, #0
  40fd4c:	45ce      	cmp	lr, r9
  40fd4e:	dbec      	blt.n	40fd2a <_dtoa_r+0x8b2>
  40fd50:	9b05      	ldr	r3, [sp, #20]
  40fd52:	f04f 0a00 	mov.w	sl, #0
  40fd56:	9a06      	ldr	r2, [sp, #24]
  40fd58:	9707      	str	r7, [sp, #28]
  40fd5a:	2a01      	cmp	r2, #1
  40fd5c:	bfac      	ite	ge
  40fd5e:	189b      	addge	r3, r3, r2
  40fd60:	3301      	addlt	r3, #1
  40fd62:	461d      	mov	r5, r3
  40fd64:	9907      	ldr	r1, [sp, #28]
  40fd66:	2201      	movs	r2, #1
  40fd68:	4620      	mov	r0, r4
  40fd6a:	f001 fe65 	bl	411a38 <__lshift>
  40fd6e:	4631      	mov	r1, r6
  40fd70:	9007      	str	r0, [sp, #28]
  40fd72:	f001 febb 	bl	411aec <__mcmp>
  40fd76:	2800      	cmp	r0, #0
  40fd78:	f340 824b 	ble.w	410212 <_dtoa_r+0xd9a>
  40fd7c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40fd80:	1e6b      	subs	r3, r5, #1
  40fd82:	9905      	ldr	r1, [sp, #20]
  40fd84:	e004      	b.n	40fd90 <_dtoa_r+0x918>
  40fd86:	428b      	cmp	r3, r1
  40fd88:	f000 8209 	beq.w	41019e <_dtoa_r+0xd26>
  40fd8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40fd90:	2a39      	cmp	r2, #57	; 0x39
  40fd92:	f103 0501 	add.w	r5, r3, #1
  40fd96:	d0f6      	beq.n	40fd86 <_dtoa_r+0x90e>
  40fd98:	3201      	adds	r2, #1
  40fd9a:	701a      	strb	r2, [r3, #0]
  40fd9c:	4631      	mov	r1, r6
  40fd9e:	4620      	mov	r0, r4
  40fda0:	f001 fc64 	bl	41166c <_Bfree>
  40fda4:	9b08      	ldr	r3, [sp, #32]
  40fda6:	2b00      	cmp	r3, #0
  40fda8:	f43f ad69 	beq.w	40f87e <_dtoa_r+0x406>
  40fdac:	459a      	cmp	sl, r3
  40fdae:	f43f ad62 	beq.w	40f876 <_dtoa_r+0x3fe>
  40fdb2:	f1ba 0f00 	cmp.w	sl, #0
  40fdb6:	f43f ad5e 	beq.w	40f876 <_dtoa_r+0x3fe>
  40fdba:	4651      	mov	r1, sl
  40fdbc:	4620      	mov	r0, r4
  40fdbe:	f001 fc55 	bl	41166c <_Bfree>
  40fdc2:	e558      	b.n	40f876 <_dtoa_r+0x3fe>
  40fdc4:	201c      	movs	r0, #28
  40fdc6:	e513      	b.n	40f7f0 <_dtoa_r+0x378>
  40fdc8:	f04f 0802 	mov.w	r8, #2
  40fdcc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40fdd0:	e5f2      	b.n	40f9b8 <_dtoa_r+0x540>
  40fdd2:	9805      	ldr	r0, [sp, #20]
  40fdd4:	f7ff bb86 	b.w	40f4e4 <_dtoa_r+0x6c>
  40fdd8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40fdda:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40fdde:	e45b      	b.n	40f698 <_dtoa_r+0x220>
  40fde0:	9b02      	ldr	r3, [sp, #8]
  40fde2:	425d      	negs	r5, r3
  40fde4:	2d00      	cmp	r5, #0
  40fde6:	f000 81c6 	beq.w	410176 <_dtoa_r+0xcfe>
  40fdea:	f005 020f 	and.w	r2, r5, #15
  40fdee:	4b4b      	ldr	r3, [pc, #300]	; (40ff1c <_dtoa_r+0xaa4>)
  40fdf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40fdf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40fdfc:	f7fa ff7a 	bl	40acf4 <__aeabi_dmul>
  40fe00:	112d      	asrs	r5, r5, #4
  40fe02:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40fe06:	f000 826d 	beq.w	4102e4 <_dtoa_r+0xe6c>
  40fe0a:	4e45      	ldr	r6, [pc, #276]	; (40ff20 <_dtoa_r+0xaa8>)
  40fe0c:	f04f 0802 	mov.w	r8, #2
  40fe10:	4602      	mov	r2, r0
  40fe12:	460b      	mov	r3, r1
  40fe14:	f015 0f01 	tst.w	r5, #1
  40fe18:	4610      	mov	r0, r2
  40fe1a:	4619      	mov	r1, r3
  40fe1c:	d007      	beq.n	40fe2e <_dtoa_r+0x9b6>
  40fe1e:	f108 0801 	add.w	r8, r8, #1
  40fe22:	e9d6 2300 	ldrd	r2, r3, [r6]
  40fe26:	f7fa ff65 	bl	40acf4 <__aeabi_dmul>
  40fe2a:	4602      	mov	r2, r0
  40fe2c:	460b      	mov	r3, r1
  40fe2e:	106d      	asrs	r5, r5, #1
  40fe30:	f106 0608 	add.w	r6, r6, #8
  40fe34:	d1ee      	bne.n	40fe14 <_dtoa_r+0x99c>
  40fe36:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40fe3a:	e5d9      	b.n	40f9f0 <_dtoa_r+0x578>
  40fe3c:	2600      	movs	r6, #0
  40fe3e:	9608      	str	r6, [sp, #32]
  40fe40:	e50c      	b.n	40f85c <_dtoa_r+0x3e4>
  40fe42:	4936      	ldr	r1, [pc, #216]	; (40ff1c <_dtoa_r+0xaa4>)
  40fe44:	f107 3bff 	add.w	fp, r7, #4294967295
  40fe48:	9b05      	ldr	r3, [sp, #20]
  40fe4a:	4642      	mov	r2, r8
  40fe4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40fe50:	1c5d      	adds	r5, r3, #1
  40fe52:	464b      	mov	r3, r9
  40fe54:	e9d1 0100 	ldrd	r0, r1, [r1]
  40fe58:	f7fa ff4c 	bl	40acf4 <__aeabi_dmul>
  40fe5c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40fe60:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40fe64:	4649      	mov	r1, r9
  40fe66:	4640      	mov	r0, r8
  40fe68:	f7fb f9de 	bl	40b228 <__aeabi_d2iz>
  40fe6c:	4606      	mov	r6, r0
  40fe6e:	f7fa fedb 	bl	40ac28 <__aeabi_i2d>
  40fe72:	460b      	mov	r3, r1
  40fe74:	4602      	mov	r2, r0
  40fe76:	4649      	mov	r1, r9
  40fe78:	4640      	mov	r0, r8
  40fe7a:	3630      	adds	r6, #48	; 0x30
  40fe7c:	f7fa fd86 	bl	40a98c <__aeabi_dsub>
  40fe80:	9b05      	ldr	r3, [sp, #20]
  40fe82:	2f01      	cmp	r7, #1
  40fe84:	4680      	mov	r8, r0
  40fe86:	4689      	mov	r9, r1
  40fe88:	701e      	strb	r6, [r3, #0]
  40fe8a:	d01e      	beq.n	40feca <_dtoa_r+0xa52>
  40fe8c:	9b05      	ldr	r3, [sp, #20]
  40fe8e:	46aa      	mov	sl, r5
  40fe90:	46a8      	mov	r8, r5
  40fe92:	441f      	add	r7, r3
  40fe94:	46b9      	mov	r9, r7
  40fe96:	2200      	movs	r2, #0
  40fe98:	4b1d      	ldr	r3, [pc, #116]	; (40ff10 <_dtoa_r+0xa98>)
  40fe9a:	f7fa ff2b 	bl	40acf4 <__aeabi_dmul>
  40fe9e:	460f      	mov	r7, r1
  40fea0:	4606      	mov	r6, r0
  40fea2:	f7fb f9c1 	bl	40b228 <__aeabi_d2iz>
  40fea6:	4605      	mov	r5, r0
  40fea8:	f7fa febe 	bl	40ac28 <__aeabi_i2d>
  40feac:	4602      	mov	r2, r0
  40feae:	460b      	mov	r3, r1
  40feb0:	3530      	adds	r5, #48	; 0x30
  40feb2:	4630      	mov	r0, r6
  40feb4:	4639      	mov	r1, r7
  40feb6:	f7fa fd69 	bl	40a98c <__aeabi_dsub>
  40feba:	f80a 5b01 	strb.w	r5, [sl], #1
  40febe:	45ca      	cmp	sl, r9
  40fec0:	d1e9      	bne.n	40fe96 <_dtoa_r+0xa1e>
  40fec2:	4645      	mov	r5, r8
  40fec4:	4689      	mov	r9, r1
  40fec6:	4680      	mov	r8, r0
  40fec8:	445d      	add	r5, fp
  40feca:	2200      	movs	r2, #0
  40fecc:	4b15      	ldr	r3, [pc, #84]	; (40ff24 <_dtoa_r+0xaac>)
  40fece:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40fed2:	f7fa fd5d 	bl	40a990 <__adddf3>
  40fed6:	4642      	mov	r2, r8
  40fed8:	464b      	mov	r3, r9
  40feda:	f7fb f97d 	bl	40b1d8 <__aeabi_dcmplt>
  40fede:	2800      	cmp	r0, #0
  40fee0:	f47f aecd 	bne.w	40fc7e <_dtoa_r+0x806>
  40fee4:	2000      	movs	r0, #0
  40fee6:	490f      	ldr	r1, [pc, #60]	; (40ff24 <_dtoa_r+0xaac>)
  40fee8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40feec:	f7fa fd4e 	bl	40a98c <__aeabi_dsub>
  40fef0:	4642      	mov	r2, r8
  40fef2:	464b      	mov	r3, r9
  40fef4:	f7fb f98e 	bl	40b214 <__aeabi_dcmpgt>
  40fef8:	b908      	cbnz	r0, 40fefe <_dtoa_r+0xa86>
  40fefa:	e76e      	b.n	40fdda <_dtoa_r+0x962>
  40fefc:	4615      	mov	r5, r2
  40fefe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ff02:	1e6a      	subs	r2, r5, #1
  40ff04:	2b30      	cmp	r3, #48	; 0x30
  40ff06:	d0f9      	beq.n	40fefc <_dtoa_r+0xa84>
  40ff08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ff0a:	9302      	str	r3, [sp, #8]
  40ff0c:	e4b7      	b.n	40f87e <_dtoa_r+0x406>
  40ff0e:	bf00      	nop
  40ff10:	40240000 	.word	0x40240000
  40ff14:	401c0000 	.word	0x401c0000
  40ff18:	40140000 	.word	0x40140000
  40ff1c:	00414078 	.word	0x00414078
  40ff20:	00414150 	.word	0x00414150
  40ff24:	3fe00000 	.word	0x3fe00000
  40ff28:	9807      	ldr	r0, [sp, #28]
  40ff2a:	4631      	mov	r1, r6
  40ff2c:	f001 fdde 	bl	411aec <__mcmp>
  40ff30:	2800      	cmp	r0, #0
  40ff32:	f6bf ac7a 	bge.w	40f82a <_dtoa_r+0x3b2>
  40ff36:	9f02      	ldr	r7, [sp, #8]
  40ff38:	2300      	movs	r3, #0
  40ff3a:	9907      	ldr	r1, [sp, #28]
  40ff3c:	4620      	mov	r0, r4
  40ff3e:	3f01      	subs	r7, #1
  40ff40:	220a      	movs	r2, #10
  40ff42:	9702      	str	r7, [sp, #8]
  40ff44:	f001 fb9c 	bl	411680 <__multadd>
  40ff48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ff4a:	9007      	str	r0, [sp, #28]
  40ff4c:	bb1b      	cbnz	r3, 40ff96 <_dtoa_r+0xb1e>
  40ff4e:	9b01      	ldr	r3, [sp, #4]
  40ff50:	2b02      	cmp	r3, #2
  40ff52:	f340 81cb 	ble.w	4102ec <_dtoa_r+0xe74>
  40ff56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ff58:	2b00      	cmp	r3, #0
  40ff5a:	f300 81c7 	bgt.w	4102ec <_dtoa_r+0xe74>
  40ff5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ff60:	9306      	str	r3, [sp, #24]
  40ff62:	e46a      	b.n	40f83a <_dtoa_r+0x3c2>
  40ff64:	f1ba 0f00 	cmp.w	sl, #0
  40ff68:	f47f aea1 	bne.w	40fcae <_dtoa_r+0x836>
  40ff6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40ff70:	2b00      	cmp	r3, #0
  40ff72:	f47f ae9c 	bne.w	40fcae <_dtoa_r+0x836>
  40ff76:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40ff7a:	0d3f      	lsrs	r7, r7, #20
  40ff7c:	053f      	lsls	r7, r7, #20
  40ff7e:	2f00      	cmp	r7, #0
  40ff80:	f000 8187 	beq.w	410292 <_dtoa_r+0xe1a>
  40ff84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ff86:	f04f 0801 	mov.w	r8, #1
  40ff8a:	3301      	adds	r3, #1
  40ff8c:	930a      	str	r3, [sp, #40]	; 0x28
  40ff8e:	9b04      	ldr	r3, [sp, #16]
  40ff90:	3301      	adds	r3, #1
  40ff92:	9304      	str	r3, [sp, #16]
  40ff94:	e68d      	b.n	40fcb2 <_dtoa_r+0x83a>
  40ff96:	2300      	movs	r3, #0
  40ff98:	9908      	ldr	r1, [sp, #32]
  40ff9a:	4620      	mov	r0, r4
  40ff9c:	220a      	movs	r2, #10
  40ff9e:	f001 fb6f 	bl	411680 <__multadd>
  40ffa2:	9b01      	ldr	r3, [sp, #4]
  40ffa4:	9008      	str	r0, [sp, #32]
  40ffa6:	2b02      	cmp	r3, #2
  40ffa8:	dd02      	ble.n	40ffb0 <_dtoa_r+0xb38>
  40ffaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ffac:	2b00      	cmp	r3, #0
  40ffae:	ddd6      	ble.n	40ff5e <_dtoa_r+0xae6>
  40ffb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ffb2:	9306      	str	r3, [sp, #24]
  40ffb4:	2d00      	cmp	r5, #0
  40ffb6:	dd05      	ble.n	40ffc4 <_dtoa_r+0xb4c>
  40ffb8:	9908      	ldr	r1, [sp, #32]
  40ffba:	462a      	mov	r2, r5
  40ffbc:	4620      	mov	r0, r4
  40ffbe:	f001 fd3b 	bl	411a38 <__lshift>
  40ffc2:	9008      	str	r0, [sp, #32]
  40ffc4:	f1b8 0f00 	cmp.w	r8, #0
  40ffc8:	f040 812f 	bne.w	41022a <_dtoa_r+0xdb2>
  40ffcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40ffd0:	9b01      	ldr	r3, [sp, #4]
  40ffd2:	f00a 0101 	and.w	r1, sl, #1
  40ffd6:	960a      	str	r6, [sp, #40]	; 0x28
  40ffd8:	fab3 f383 	clz	r3, r3
  40ffdc:	910b      	str	r1, [sp, #44]	; 0x2c
  40ffde:	9905      	ldr	r1, [sp, #20]
  40ffe0:	461a      	mov	r2, r3
  40ffe2:	9b06      	ldr	r3, [sp, #24]
  40ffe4:	460f      	mov	r7, r1
  40ffe6:	f8dd b020 	ldr.w	fp, [sp, #32]
  40ffea:	3b01      	subs	r3, #1
  40ffec:	0952      	lsrs	r2, r2, #5
  40ffee:	9e07      	ldr	r6, [sp, #28]
  40fff0:	18cb      	adds	r3, r1, r3
  40fff2:	9201      	str	r2, [sp, #4]
  40fff4:	930c      	str	r3, [sp, #48]	; 0x30
  40fff6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40fff8:	4630      	mov	r0, r6
  40fffa:	4629      	mov	r1, r5
  40fffc:	f7ff f99a 	bl	40f334 <quorem>
  410000:	4659      	mov	r1, fp
  410002:	4680      	mov	r8, r0
  410004:	4630      	mov	r0, r6
  410006:	f001 fd71 	bl	411aec <__mcmp>
  41000a:	4629      	mov	r1, r5
  41000c:	464a      	mov	r2, r9
  41000e:	4682      	mov	sl, r0
  410010:	4620      	mov	r0, r4
  410012:	f001 fd8f 	bl	411b34 <__mdiff>
  410016:	68c2      	ldr	r2, [r0, #12]
  410018:	4605      	mov	r5, r0
  41001a:	f108 0c30 	add.w	ip, r8, #48	; 0x30
  41001e:	9206      	str	r2, [sp, #24]
  410020:	2a00      	cmp	r2, #0
  410022:	d150      	bne.n	4100c6 <_dtoa_r+0xc4e>
  410024:	4629      	mov	r1, r5
  410026:	4630      	mov	r0, r6
  410028:	f8cd c010 	str.w	ip, [sp, #16]
  41002c:	f001 fd5e 	bl	411aec <__mcmp>
  410030:	4629      	mov	r1, r5
  410032:	9003      	str	r0, [sp, #12]
  410034:	4620      	mov	r0, r4
  410036:	f001 fb19 	bl	41166c <_Bfree>
  41003a:	9a01      	ldr	r2, [sp, #4]
  41003c:	9b03      	ldr	r3, [sp, #12]
  41003e:	f8dd c010 	ldr.w	ip, [sp, #16]
  410042:	b132      	cbz	r2, 410052 <_dtoa_r+0xbda>
  410044:	b92b      	cbnz	r3, 410052 <_dtoa_r+0xbda>
  410046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410048:	9a06      	ldr	r2, [sp, #24]
  41004a:	2b00      	cmp	r3, #0
  41004c:	f000 8123 	beq.w	410296 <_dtoa_r+0xe1e>
  410050:	4613      	mov	r3, r2
  410052:	f1ba 0f00 	cmp.w	sl, #0
  410056:	f2c0 80b5 	blt.w	4101c4 <_dtoa_r+0xd4c>
  41005a:	9a01      	ldr	r2, [sp, #4]
  41005c:	b132      	cbz	r2, 41006c <_dtoa_r+0xbf4>
  41005e:	f1ba 0f00 	cmp.w	sl, #0
  410062:	d103      	bne.n	41006c <_dtoa_r+0xbf4>
  410064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410066:	2a00      	cmp	r2, #0
  410068:	f000 80ac 	beq.w	4101c4 <_dtoa_r+0xd4c>
  41006c:	2b00      	cmp	r3, #0
  41006e:	f300 80f8 	bgt.w	410262 <_dtoa_r+0xdea>
  410072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410074:	f107 0801 	add.w	r8, r7, #1
  410078:	f887 c000 	strb.w	ip, [r7]
  41007c:	429f      	cmp	r7, r3
  41007e:	4645      	mov	r5, r8
  410080:	f000 8100 	beq.w	410284 <_dtoa_r+0xe0c>
  410084:	4631      	mov	r1, r6
  410086:	220a      	movs	r2, #10
  410088:	2300      	movs	r3, #0
  41008a:	4620      	mov	r0, r4
  41008c:	f001 faf8 	bl	411680 <__multadd>
  410090:	45cb      	cmp	fp, r9
  410092:	4606      	mov	r6, r0
  410094:	4659      	mov	r1, fp
  410096:	4620      	mov	r0, r4
  410098:	f04f 020a 	mov.w	r2, #10
  41009c:	f04f 0300 	mov.w	r3, #0
  4100a0:	d00b      	beq.n	4100ba <_dtoa_r+0xc42>
  4100a2:	f001 faed 	bl	411680 <__multadd>
  4100a6:	4649      	mov	r1, r9
  4100a8:	4683      	mov	fp, r0
  4100aa:	220a      	movs	r2, #10
  4100ac:	4620      	mov	r0, r4
  4100ae:	2300      	movs	r3, #0
  4100b0:	f001 fae6 	bl	411680 <__multadd>
  4100b4:	4647      	mov	r7, r8
  4100b6:	4681      	mov	r9, r0
  4100b8:	e79d      	b.n	40fff6 <_dtoa_r+0xb7e>
  4100ba:	f001 fae1 	bl	411680 <__multadd>
  4100be:	4647      	mov	r7, r8
  4100c0:	4683      	mov	fp, r0
  4100c2:	4681      	mov	r9, r0
  4100c4:	e797      	b.n	40fff6 <_dtoa_r+0xb7e>
  4100c6:	4601      	mov	r1, r0
  4100c8:	4620      	mov	r0, r4
  4100ca:	f8cd c00c 	str.w	ip, [sp, #12]
  4100ce:	f001 facd 	bl	41166c <_Bfree>
  4100d2:	2301      	movs	r3, #1
  4100d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
  4100d8:	e7bb      	b.n	410052 <_dtoa_r+0xbda>
  4100da:	2301      	movs	r3, #1
  4100dc:	930f      	str	r3, [sp, #60]	; 0x3c
  4100de:	9306      	str	r3, [sp, #24]
  4100e0:	9303      	str	r3, [sp, #12]
  4100e2:	2100      	movs	r1, #0
  4100e4:	401d      	ands	r5, r3
  4100e6:	6461      	str	r1, [r4, #68]	; 0x44
  4100e8:	e440      	b.n	40f96c <_dtoa_r+0x4f4>
  4100ea:	2b0e      	cmp	r3, #14
  4100ec:	bf8c      	ite	hi
  4100ee:	2300      	movhi	r3, #0
  4100f0:	2301      	movls	r3, #1
  4100f2:	e7f6      	b.n	4100e2 <_dtoa_r+0xc6a>
  4100f4:	9907      	ldr	r1, [sp, #28]
  4100f6:	4620      	mov	r0, r4
  4100f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4100fa:	f001 fc4d 	bl	411998 <__pow5mult>
  4100fe:	9007      	str	r0, [sp, #28]
  410100:	f7ff bb4c 	b.w	40f79c <_dtoa_r+0x324>
  410104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  410108:	1af3      	subs	r3, r6, r3
  41010a:	960b      	str	r6, [sp, #44]	; 0x2c
  41010c:	2600      	movs	r6, #0
  41010e:	441a      	add	r2, r3
  410110:	920d      	str	r2, [sp, #52]	; 0x34
  410112:	f7ff bbfd 	b.w	40f910 <_dtoa_r+0x498>
  410116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  410118:	2130      	movs	r1, #48	; 0x30
  41011a:	3301      	adds	r3, #1
  41011c:	7011      	strb	r1, [r2, #0]
  41011e:	9302      	str	r3, [sp, #8]
  410120:	2331      	movs	r3, #49	; 0x31
  410122:	7013      	strb	r3, [r2, #0]
  410124:	f7ff bbab 	b.w	40f87e <_dtoa_r+0x406>
  410128:	9b06      	ldr	r3, [sp, #24]
  41012a:	2b00      	cmp	r3, #0
  41012c:	f43f adc7 	beq.w	40fcbe <_dtoa_r+0x846>
  410130:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  410132:	2f00      	cmp	r7, #0
  410134:	f77f ae51 	ble.w	40fdda <_dtoa_r+0x962>
  410138:	9b02      	ldr	r3, [sp, #8]
  41013a:	2200      	movs	r2, #0
  41013c:	3b01      	subs	r3, #1
  41013e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  410142:	9313      	str	r3, [sp, #76]	; 0x4c
  410144:	4b7c      	ldr	r3, [pc, #496]	; (410338 <_dtoa_r+0xec0>)
  410146:	f7fa fdd5 	bl	40acf4 <__aeabi_dmul>
  41014a:	4682      	mov	sl, r0
  41014c:	468b      	mov	fp, r1
  41014e:	f108 0001 	add.w	r0, r8, #1
  410152:	e9cd ab08 	strd	sl, fp, [sp, #32]
  410156:	f7fa fd67 	bl	40ac28 <__aeabi_i2d>
  41015a:	4602      	mov	r2, r0
  41015c:	460b      	mov	r3, r1
  41015e:	4650      	mov	r0, sl
  410160:	4659      	mov	r1, fp
  410162:	f7fa fdc7 	bl	40acf4 <__aeabi_dmul>
  410166:	2200      	movs	r2, #0
  410168:	4b74      	ldr	r3, [pc, #464]	; (41033c <_dtoa_r+0xec4>)
  41016a:	f7fa fc11 	bl	40a990 <__adddf3>
  41016e:	4680      	mov	r8, r0
  410170:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  410174:	e45c      	b.n	40fa30 <_dtoa_r+0x5b8>
  410176:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
  41017a:	f04f 0802 	mov.w	r8, #2
  41017e:	ed8d 7b08 	vstr	d7, [sp, #32]
  410182:	e435      	b.n	40f9f0 <_dtoa_r+0x578>
  410184:	9907      	ldr	r1, [sp, #28]
  410186:	4620      	mov	r0, r4
  410188:	f001 fc06 	bl	411998 <__pow5mult>
  41018c:	9007      	str	r0, [sp, #28]
  41018e:	f7ff bb05 	b.w	40f79c <_dtoa_r+0x324>
  410192:	f1ba 0f00 	cmp.w	sl, #0
  410196:	f43f aee9 	beq.w	40ff6c <_dtoa_r+0xaf4>
  41019a:	f7ff bb12 	b.w	40f7c2 <_dtoa_r+0x34a>
  41019e:	9a02      	ldr	r2, [sp, #8]
  4101a0:	2331      	movs	r3, #49	; 0x31
  4101a2:	3201      	adds	r2, #1
  4101a4:	9202      	str	r2, [sp, #8]
  4101a6:	9a05      	ldr	r2, [sp, #20]
  4101a8:	7013      	strb	r3, [r2, #0]
  4101aa:	e5f7      	b.n	40fd9c <_dtoa_r+0x924>
  4101ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4101ae:	2a00      	cmp	r2, #0
  4101b0:	d050      	beq.n	410254 <_dtoa_r+0xddc>
  4101b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4101b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4101b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4101ba:	f7ff bbaf 	b.w	40f91c <_dtoa_r+0x4a4>
  4101be:	9c01      	ldr	r4, [sp, #4]
  4101c0:	f7ff bb5d 	b.w	40f87e <_dtoa_r+0x406>
  4101c4:	2b00      	cmp	r3, #0
  4101c6:	9607      	str	r6, [sp, #28]
  4101c8:	46e0      	mov	r8, ip
  4101ca:	f8cd b020 	str.w	fp, [sp, #32]
  4101ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4101d0:	4665      	mov	r5, ip
  4101d2:	dd0f      	ble.n	4101f4 <_dtoa_r+0xd7c>
  4101d4:	9907      	ldr	r1, [sp, #28]
  4101d6:	2201      	movs	r2, #1
  4101d8:	4620      	mov	r0, r4
  4101da:	f001 fc2d 	bl	411a38 <__lshift>
  4101de:	4631      	mov	r1, r6
  4101e0:	9007      	str	r0, [sp, #28]
  4101e2:	f001 fc83 	bl	411aec <__mcmp>
  4101e6:	2800      	cmp	r0, #0
  4101e8:	dd77      	ble.n	4102da <_dtoa_r+0xe62>
  4101ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4101ee:	d068      	beq.n	4102c2 <_dtoa_r+0xe4a>
  4101f0:	f108 0501 	add.w	r5, r8, #1
  4101f4:	f8dd a020 	ldr.w	sl, [sp, #32]
  4101f8:	703d      	strb	r5, [r7, #0]
  4101fa:	1c7d      	adds	r5, r7, #1
  4101fc:	f8cd 9020 	str.w	r9, [sp, #32]
  410200:	e5cc      	b.n	40fd9c <_dtoa_r+0x924>
  410202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410204:	9a06      	ldr	r2, [sp, #24]
  410206:	1a9d      	subs	r5, r3, r2
  410208:	2300      	movs	r3, #0
  41020a:	f7ff bb87 	b.w	40f91c <_dtoa_r+0x4a4>
  41020e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  410210:	e537      	b.n	40fc82 <_dtoa_r+0x80a>
  410212:	d104      	bne.n	41021e <_dtoa_r+0xda6>
  410214:	f018 0f01 	tst.w	r8, #1
  410218:	d001      	beq.n	41021e <_dtoa_r+0xda6>
  41021a:	e5af      	b.n	40fd7c <_dtoa_r+0x904>
  41021c:	4615      	mov	r5, r2
  41021e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  410222:	1e6a      	subs	r2, r5, #1
  410224:	2b30      	cmp	r3, #48	; 0x30
  410226:	d0f9      	beq.n	41021c <_dtoa_r+0xda4>
  410228:	e5b8      	b.n	40fd9c <_dtoa_r+0x924>
  41022a:	9f08      	ldr	r7, [sp, #32]
  41022c:	4620      	mov	r0, r4
  41022e:	6879      	ldr	r1, [r7, #4]
  410230:	f001 f9f4 	bl	41161c <_Balloc>
  410234:	693b      	ldr	r3, [r7, #16]
  410236:	4605      	mov	r5, r0
  410238:	f107 010c 	add.w	r1, r7, #12
  41023c:	1c9a      	adds	r2, r3, #2
  41023e:	300c      	adds	r0, #12
  410240:	0092      	lsls	r2, r2, #2
  410242:	f7fb fb99 	bl	40b978 <memcpy>
  410246:	4620      	mov	r0, r4
  410248:	4629      	mov	r1, r5
  41024a:	2201      	movs	r2, #1
  41024c:	f001 fbf4 	bl	411a38 <__lshift>
  410250:	4681      	mov	r9, r0
  410252:	e6bd      	b.n	40ffd0 <_dtoa_r+0xb58>
  410254:	9b16      	ldr	r3, [sp, #88]	; 0x58
  410256:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  410258:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  41025a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  41025e:	f7ff bb5d 	b.w	40f91c <_dtoa_r+0x4a4>
  410262:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  410266:	9607      	str	r6, [sp, #28]
  410268:	f8cd b020 	str.w	fp, [sp, #32]
  41026c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41026e:	d030      	beq.n	4102d2 <_dtoa_r+0xe5a>
  410270:	f10c 0801 	add.w	r8, ip, #1
  410274:	f8dd a020 	ldr.w	sl, [sp, #32]
  410278:	1c7d      	adds	r5, r7, #1
  41027a:	f8cd 9020 	str.w	r9, [sp, #32]
  41027e:	f887 8000 	strb.w	r8, [r7]
  410282:	e58b      	b.n	40fd9c <_dtoa_r+0x924>
  410284:	9607      	str	r6, [sp, #28]
  410286:	46e0      	mov	r8, ip
  410288:	46da      	mov	sl, fp
  41028a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  41028c:	f8cd 9020 	str.w	r9, [sp, #32]
  410290:	e568      	b.n	40fd64 <_dtoa_r+0x8ec>
  410292:	46b8      	mov	r8, r7
  410294:	e50d      	b.n	40fcb2 <_dtoa_r+0x83a>
  410296:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  41029a:	9607      	str	r6, [sp, #28]
  41029c:	f8cd b020 	str.w	fp, [sp, #32]
  4102a0:	4655      	mov	r5, sl
  4102a2:	46c3      	mov	fp, r8
  4102a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4102a6:	46e0      	mov	r8, ip
  4102a8:	d00b      	beq.n	4102c2 <_dtoa_r+0xe4a>
  4102aa:	2d00      	cmp	r5, #0
  4102ac:	dd01      	ble.n	4102b2 <_dtoa_r+0xe3a>
  4102ae:	f10b 0831 	add.w	r8, fp, #49	; 0x31
  4102b2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4102b6:	1c7d      	adds	r5, r7, #1
  4102b8:	f887 8000 	strb.w	r8, [r7]
  4102bc:	f8cd 9020 	str.w	r9, [sp, #32]
  4102c0:	e56c      	b.n	40fd9c <_dtoa_r+0x924>
  4102c2:	f8dd a020 	ldr.w	sl, [sp, #32]
  4102c6:	f8cd 9020 	str.w	r9, [sp, #32]
  4102ca:	2239      	movs	r2, #57	; 0x39
  4102cc:	1c7d      	adds	r5, r7, #1
  4102ce:	703a      	strb	r2, [r7, #0]
  4102d0:	e556      	b.n	40fd80 <_dtoa_r+0x908>
  4102d2:	46da      	mov	sl, fp
  4102d4:	f8cd 9020 	str.w	r9, [sp, #32]
  4102d8:	e7f7      	b.n	4102ca <_dtoa_r+0xe52>
  4102da:	d18b      	bne.n	4101f4 <_dtoa_r+0xd7c>
  4102dc:	f018 0f01 	tst.w	r8, #1
  4102e0:	d088      	beq.n	4101f4 <_dtoa_r+0xd7c>
  4102e2:	e782      	b.n	4101ea <_dtoa_r+0xd72>
  4102e4:	f04f 0802 	mov.w	r8, #2
  4102e8:	f7ff bb82 	b.w	40f9f0 <_dtoa_r+0x578>
  4102ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4102ee:	9306      	str	r3, [sp, #24]
  4102f0:	e514      	b.n	40fd1c <_dtoa_r+0x8a4>
  4102f2:	f43f aa84 	beq.w	40f7fe <_dtoa_r+0x386>
  4102f6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4102fa:	f7ff ba79 	b.w	40f7f0 <_dtoa_r+0x378>
  4102fe:	2501      	movs	r5, #1
  410300:	f7ff b993 	b.w	40f62a <_dtoa_r+0x1b2>
  410304:	2500      	movs	r5, #0
  410306:	4620      	mov	r0, r4
  410308:	6465      	str	r5, [r4, #68]	; 0x44
  41030a:	4629      	mov	r1, r5
  41030c:	f001 f986 	bl	41161c <_Balloc>
  410310:	9a02      	ldr	r2, [sp, #8]
  410312:	9005      	str	r0, [sp, #20]
  410314:	2a0e      	cmp	r2, #14
  410316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  410318:	6420      	str	r0, [r4, #64]	; 0x40
  41031a:	f73f aae6 	bgt.w	40f8ea <_dtoa_r+0x472>
  41031e:	42ab      	cmp	r3, r5
  410320:	f6ff aae3 	blt.w	40f8ea <_dtoa_r+0x472>
  410324:	f04f 33ff 	mov.w	r3, #4294967295
  410328:	9503      	str	r5, [sp, #12]
  41032a:	9306      	str	r3, [sp, #24]
  41032c:	f7ff b9ba 	b.w	40f6a4 <_dtoa_r+0x22c>
  410330:	2301      	movs	r3, #1
  410332:	930c      	str	r3, [sp, #48]	; 0x30
  410334:	e404      	b.n	40fb40 <_dtoa_r+0x6c8>
  410336:	bf00      	nop
  410338:	40240000 	.word	0x40240000
  41033c:	401c0000 	.word	0x401c0000

00410340 <__sflush_r>:
  410340:	898b      	ldrh	r3, [r1, #12]
  410342:	b29a      	uxth	r2, r3
  410344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410348:	460d      	mov	r5, r1
  41034a:	0711      	lsls	r1, r2, #28
  41034c:	4680      	mov	r8, r0
  41034e:	d43c      	bmi.n	4103ca <__sflush_r+0x8a>
  410350:	686a      	ldr	r2, [r5, #4]
  410352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  410356:	2a00      	cmp	r2, #0
  410358:	81ab      	strh	r3, [r5, #12]
  41035a:	dd76      	ble.n	41044a <__sflush_r+0x10a>
  41035c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  41035e:	2e00      	cmp	r6, #0
  410360:	d04b      	beq.n	4103fa <__sflush_r+0xba>
  410362:	b29b      	uxth	r3, r3
  410364:	2100      	movs	r1, #0
  410366:	f8d8 4000 	ldr.w	r4, [r8]
  41036a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  41036e:	f8c8 1000 	str.w	r1, [r8]
  410372:	b292      	uxth	r2, r2
  410374:	2a00      	cmp	r2, #0
  410376:	d06c      	beq.n	410452 <__sflush_r+0x112>
  410378:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  41037a:	075f      	lsls	r7, r3, #29
  41037c:	d505      	bpl.n	41038a <__sflush_r+0x4a>
  41037e:	6869      	ldr	r1, [r5, #4]
  410380:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  410382:	1a52      	subs	r2, r2, r1
  410384:	b10b      	cbz	r3, 41038a <__sflush_r+0x4a>
  410386:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  410388:	1ad2      	subs	r2, r2, r3
  41038a:	4640      	mov	r0, r8
  41038c:	69e9      	ldr	r1, [r5, #28]
  41038e:	2300      	movs	r3, #0
  410390:	47b0      	blx	r6
  410392:	1c46      	adds	r6, r0, #1
  410394:	d03e      	beq.n	410414 <__sflush_r+0xd4>
  410396:	89ab      	ldrh	r3, [r5, #12]
  410398:	2100      	movs	r1, #0
  41039a:	692a      	ldr	r2, [r5, #16]
  41039c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4103a0:	6069      	str	r1, [r5, #4]
  4103a2:	602a      	str	r2, [r5, #0]
  4103a4:	b29b      	uxth	r3, r3
  4103a6:	04da      	lsls	r2, r3, #19
  4103a8:	81ab      	strh	r3, [r5, #12]
  4103aa:	d44c      	bmi.n	410446 <__sflush_r+0x106>
  4103ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4103ae:	f8c8 4000 	str.w	r4, [r8]
  4103b2:	b311      	cbz	r1, 4103fa <__sflush_r+0xba>
  4103b4:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4103b8:	4299      	cmp	r1, r3
  4103ba:	d002      	beq.n	4103c2 <__sflush_r+0x82>
  4103bc:	4640      	mov	r0, r8
  4103be:	f000 f9d5 	bl	41076c <_free_r>
  4103c2:	2000      	movs	r0, #0
  4103c4:	6328      	str	r0, [r5, #48]	; 0x30
  4103c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4103ca:	692e      	ldr	r6, [r5, #16]
  4103cc:	b1ae      	cbz	r6, 4103fa <__sflush_r+0xba>
  4103ce:	682c      	ldr	r4, [r5, #0]
  4103d0:	0791      	lsls	r1, r2, #30
  4103d2:	602e      	str	r6, [r5, #0]
  4103d4:	eba4 0406 	sub.w	r4, r4, r6
  4103d8:	d11a      	bne.n	410410 <__sflush_r+0xd0>
  4103da:	696b      	ldr	r3, [r5, #20]
  4103dc:	60ab      	str	r3, [r5, #8]
  4103de:	e00a      	b.n	4103f6 <__sflush_r+0xb6>
  4103e0:	4632      	mov	r2, r6
  4103e2:	4623      	mov	r3, r4
  4103e4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4103e6:	4640      	mov	r0, r8
  4103e8:	69e9      	ldr	r1, [r5, #28]
  4103ea:	47b8      	blx	r7
  4103ec:	2800      	cmp	r0, #0
  4103ee:	eba4 0400 	sub.w	r4, r4, r0
  4103f2:	4406      	add	r6, r0
  4103f4:	dd04      	ble.n	410400 <__sflush_r+0xc0>
  4103f6:	2c00      	cmp	r4, #0
  4103f8:	dcf2      	bgt.n	4103e0 <__sflush_r+0xa0>
  4103fa:	2000      	movs	r0, #0
  4103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410400:	89ab      	ldrh	r3, [r5, #12]
  410402:	f04f 30ff 	mov.w	r0, #4294967295
  410406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41040a:	81ab      	strh	r3, [r5, #12]
  41040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410410:	2300      	movs	r3, #0
  410412:	e7e3      	b.n	4103dc <__sflush_r+0x9c>
  410414:	f8d8 3000 	ldr.w	r3, [r8]
  410418:	fab3 f283 	clz	r2, r3
  41041c:	2b00      	cmp	r3, #0
  41041e:	bf18      	it	ne
  410420:	2b1d      	cmpne	r3, #29
  410422:	ea4f 1252 	mov.w	r2, r2, lsr #5
  410426:	d001      	beq.n	41042c <__sflush_r+0xec>
  410428:	2b16      	cmp	r3, #22
  41042a:	d127      	bne.n	41047c <__sflush_r+0x13c>
  41042c:	89ab      	ldrh	r3, [r5, #12]
  41042e:	2600      	movs	r6, #0
  410430:	6929      	ldr	r1, [r5, #16]
  410432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  410436:	b29b      	uxth	r3, r3
  410438:	81ab      	strh	r3, [r5, #12]
  41043a:	04db      	lsls	r3, r3, #19
  41043c:	e885 0042 	stmia.w	r5, {r1, r6}
  410440:	d5b4      	bpl.n	4103ac <__sflush_r+0x6c>
  410442:	2a00      	cmp	r2, #0
  410444:	d0b2      	beq.n	4103ac <__sflush_r+0x6c>
  410446:	6528      	str	r0, [r5, #80]	; 0x50
  410448:	e7b0      	b.n	4103ac <__sflush_r+0x6c>
  41044a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  41044c:	2a00      	cmp	r2, #0
  41044e:	dc85      	bgt.n	41035c <__sflush_r+0x1c>
  410450:	e7d3      	b.n	4103fa <__sflush_r+0xba>
  410452:	2301      	movs	r3, #1
  410454:	4640      	mov	r0, r8
  410456:	69e9      	ldr	r1, [r5, #28]
  410458:	47b0      	blx	r6
  41045a:	1c43      	adds	r3, r0, #1
  41045c:	4602      	mov	r2, r0
  41045e:	d002      	beq.n	410466 <__sflush_r+0x126>
  410460:	89ab      	ldrh	r3, [r5, #12]
  410462:	6aae      	ldr	r6, [r5, #40]	; 0x28
  410464:	e789      	b.n	41037a <__sflush_r+0x3a>
  410466:	f8d8 3000 	ldr.w	r3, [r8]
  41046a:	2b00      	cmp	r3, #0
  41046c:	d0f8      	beq.n	410460 <__sflush_r+0x120>
  41046e:	2b16      	cmp	r3, #22
  410470:	d001      	beq.n	410476 <__sflush_r+0x136>
  410472:	2b1d      	cmp	r3, #29
  410474:	d1c4      	bne.n	410400 <__sflush_r+0xc0>
  410476:	f8c8 4000 	str.w	r4, [r8]
  41047a:	e7be      	b.n	4103fa <__sflush_r+0xba>
  41047c:	89ab      	ldrh	r3, [r5, #12]
  41047e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410482:	81ab      	strh	r3, [r5, #12]
  410484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00410488 <_fflush_r>:
  410488:	b510      	push	{r4, lr}
  41048a:	4604      	mov	r4, r0
  41048c:	b082      	sub	sp, #8
  41048e:	b108      	cbz	r0, 410494 <_fflush_r+0xc>
  410490:	6b83      	ldr	r3, [r0, #56]	; 0x38
  410492:	b153      	cbz	r3, 4104aa <_fflush_r+0x22>
  410494:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  410498:	b908      	cbnz	r0, 41049e <_fflush_r+0x16>
  41049a:	b002      	add	sp, #8
  41049c:	bd10      	pop	{r4, pc}
  41049e:	4620      	mov	r0, r4
  4104a0:	b002      	add	sp, #8
  4104a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4104a6:	f7ff bf4b 	b.w	410340 <__sflush_r>
  4104aa:	9101      	str	r1, [sp, #4]
  4104ac:	f000 f886 	bl	4105bc <__sinit>
  4104b0:	9901      	ldr	r1, [sp, #4]
  4104b2:	e7ef      	b.n	410494 <_fflush_r+0xc>

004104b4 <_cleanup_r>:
  4104b4:	4901      	ldr	r1, [pc, #4]	; (4104bc <_cleanup_r+0x8>)
  4104b6:	f000 bbc3 	b.w	410c40 <_fwalk_reent>
  4104ba:	bf00      	nop
  4104bc:	00412825 	.word	0x00412825

004104c0 <__sinit.part.1>:
  4104c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4104c4:	4682      	mov	sl, r0
  4104c6:	2400      	movs	r4, #0
  4104c8:	4837      	ldr	r0, [pc, #220]	; (4105a8 <__sinit.part.1+0xe8>)
  4104ca:	2103      	movs	r1, #3
  4104cc:	f8da 5004 	ldr.w	r5, [sl, #4]
  4104d0:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  4104d4:	2604      	movs	r6, #4
  4104d6:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  4104da:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  4104de:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4104e2:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  4104e6:	4621      	mov	r1, r4
  4104e8:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  4104ec:	2208      	movs	r2, #8
  4104ee:	81ae      	strh	r6, [r5, #12]
  4104f0:	602c      	str	r4, [r5, #0]
  4104f2:	606c      	str	r4, [r5, #4]
  4104f4:	60ac      	str	r4, [r5, #8]
  4104f6:	666c      	str	r4, [r5, #100]	; 0x64
  4104f8:	81ec      	strh	r4, [r5, #14]
  4104fa:	612c      	str	r4, [r5, #16]
  4104fc:	616c      	str	r4, [r5, #20]
  4104fe:	61ac      	str	r4, [r5, #24]
  410500:	f7fb fad4 	bl	40baac <memset>
  410504:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4105b0 <__sinit.part.1+0xf0>
  410508:	f8da 6008 	ldr.w	r6, [sl, #8]
  41050c:	f04f 0301 	mov.w	r3, #1
  410510:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4105b4 <__sinit.part.1+0xf4>
  410514:	f04f 0e09 	mov.w	lr, #9
  410518:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4105b8 <__sinit.part.1+0xf8>
  41051c:	4621      	mov	r1, r4
  41051e:	4f23      	ldr	r7, [pc, #140]	; (4105ac <__sinit.part.1+0xec>)
  410520:	2208      	movs	r2, #8
  410522:	61ed      	str	r5, [r5, #28]
  410524:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  410528:	f8c5 b020 	str.w	fp, [r5, #32]
  41052c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  410530:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  410534:	62ef      	str	r7, [r5, #44]	; 0x2c
  410536:	81f3      	strh	r3, [r6, #14]
  410538:	f8a6 e00c 	strh.w	lr, [r6, #12]
  41053c:	6034      	str	r4, [r6, #0]
  41053e:	6074      	str	r4, [r6, #4]
  410540:	60b4      	str	r4, [r6, #8]
  410542:	6674      	str	r4, [r6, #100]	; 0x64
  410544:	6134      	str	r4, [r6, #16]
  410546:	6174      	str	r4, [r6, #20]
  410548:	61b4      	str	r4, [r6, #24]
  41054a:	f7fb faaf 	bl	40baac <memset>
  41054e:	f8da 500c 	ldr.w	r5, [sl, #12]
  410552:	f04f 0c12 	mov.w	ip, #18
  410556:	f04f 0e02 	mov.w	lr, #2
  41055a:	61f6      	str	r6, [r6, #28]
  41055c:	4621      	mov	r1, r4
  41055e:	f8c6 b020 	str.w	fp, [r6, #32]
  410562:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  410566:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  41056a:	2208      	movs	r2, #8
  41056c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  410570:	62f7      	str	r7, [r6, #44]	; 0x2c
  410572:	602c      	str	r4, [r5, #0]
  410574:	606c      	str	r4, [r5, #4]
  410576:	60ac      	str	r4, [r5, #8]
  410578:	666c      	str	r4, [r5, #100]	; 0x64
  41057a:	612c      	str	r4, [r5, #16]
  41057c:	616c      	str	r4, [r5, #20]
  41057e:	61ac      	str	r4, [r5, #24]
  410580:	f8a5 c00c 	strh.w	ip, [r5, #12]
  410584:	f8a5 e00e 	strh.w	lr, [r5, #14]
  410588:	f7fb fa90 	bl	40baac <memset>
  41058c:	2301      	movs	r3, #1
  41058e:	61ed      	str	r5, [r5, #28]
  410590:	f8c5 b020 	str.w	fp, [r5, #32]
  410594:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  410598:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  41059c:	62ef      	str	r7, [r5, #44]	; 0x2c
  41059e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  4105a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4105a6:	bf00      	nop
  4105a8:	004104b5 	.word	0x004104b5
  4105ac:	0041240d 	.word	0x0041240d
  4105b0:	0041238d 	.word	0x0041238d
  4105b4:	004123b1 	.word	0x004123b1
  4105b8:	004123e9 	.word	0x004123e9

004105bc <__sinit>:
  4105bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4105be:	b103      	cbz	r3, 4105c2 <__sinit+0x6>
  4105c0:	4770      	bx	lr
  4105c2:	f7ff bf7d 	b.w	4104c0 <__sinit.part.1>
  4105c6:	bf00      	nop

004105c8 <__sfp_lock_acquire>:
  4105c8:	4770      	bx	lr
  4105ca:	bf00      	nop

004105cc <__sfp_lock_release>:
  4105cc:	4770      	bx	lr
  4105ce:	bf00      	nop

004105d0 <__libc_fini_array>:
  4105d0:	b538      	push	{r3, r4, r5, lr}
  4105d2:	4b08      	ldr	r3, [pc, #32]	; (4105f4 <__libc_fini_array+0x24>)
  4105d4:	4d08      	ldr	r5, [pc, #32]	; (4105f8 <__libc_fini_array+0x28>)
  4105d6:	1aed      	subs	r5, r5, r3
  4105d8:	10ac      	asrs	r4, r5, #2
  4105da:	bf18      	it	ne
  4105dc:	18ed      	addne	r5, r5, r3
  4105de:	d005      	beq.n	4105ec <__libc_fini_array+0x1c>
  4105e0:	3c01      	subs	r4, #1
  4105e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4105e6:	4798      	blx	r3
  4105e8:	2c00      	cmp	r4, #0
  4105ea:	d1f9      	bne.n	4105e0 <__libc_fini_array+0x10>
  4105ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4105f0:	f003 bdcc 	b.w	41418c <_fini>
  4105f4:	00414198 	.word	0x00414198
  4105f8:	0041419c 	.word	0x0041419c

004105fc <__fputwc>:
  4105fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410600:	b082      	sub	sp, #8
  410602:	4607      	mov	r7, r0
  410604:	460e      	mov	r6, r1
  410606:	4614      	mov	r4, r2
  410608:	f000 fee2 	bl	4113d0 <__locale_mb_cur_max>
  41060c:	2801      	cmp	r0, #1
  41060e:	d040      	beq.n	410692 <__fputwc+0x96>
  410610:	4638      	mov	r0, r7
  410612:	a901      	add	r1, sp, #4
  410614:	4632      	mov	r2, r6
  410616:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  41061a:	f002 f823 	bl	412664 <_wcrtomb_r>
  41061e:	f1b0 3fff 	cmp.w	r0, #4294967295
  410622:	4680      	mov	r8, r0
  410624:	d02e      	beq.n	410684 <__fputwc+0x88>
  410626:	2800      	cmp	r0, #0
  410628:	d03b      	beq.n	4106a2 <__fputwc+0xa6>
  41062a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  41062e:	2500      	movs	r5, #0
  410630:	e009      	b.n	410646 <__fputwc+0x4a>
  410632:	6823      	ldr	r3, [r4, #0]
  410634:	7019      	strb	r1, [r3, #0]
  410636:	6823      	ldr	r3, [r4, #0]
  410638:	3301      	adds	r3, #1
  41063a:	6023      	str	r3, [r4, #0]
  41063c:	3501      	adds	r5, #1
  41063e:	45a8      	cmp	r8, r5
  410640:	d92f      	bls.n	4106a2 <__fputwc+0xa6>
  410642:	ab01      	add	r3, sp, #4
  410644:	5d59      	ldrb	r1, [r3, r5]
  410646:	68a3      	ldr	r3, [r4, #8]
  410648:	3b01      	subs	r3, #1
  41064a:	2b00      	cmp	r3, #0
  41064c:	60a3      	str	r3, [r4, #8]
  41064e:	daf0      	bge.n	410632 <__fputwc+0x36>
  410650:	69a2      	ldr	r2, [r4, #24]
  410652:	4293      	cmp	r3, r2
  410654:	db06      	blt.n	410664 <__fputwc+0x68>
  410656:	6823      	ldr	r3, [r4, #0]
  410658:	7019      	strb	r1, [r3, #0]
  41065a:	6823      	ldr	r3, [r4, #0]
  41065c:	7819      	ldrb	r1, [r3, #0]
  41065e:	3301      	adds	r3, #1
  410660:	290a      	cmp	r1, #10
  410662:	d1ea      	bne.n	41063a <__fputwc+0x3e>
  410664:	4638      	mov	r0, r7
  410666:	4622      	mov	r2, r4
  410668:	f001 ffa8 	bl	4125bc <__swbuf_r>
  41066c:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  410670:	fab0 f080 	clz	r0, r0
  410674:	0940      	lsrs	r0, r0, #5
  410676:	2800      	cmp	r0, #0
  410678:	d0e0      	beq.n	41063c <__fputwc+0x40>
  41067a:	f04f 30ff 	mov.w	r0, #4294967295
  41067e:	b002      	add	sp, #8
  410680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410684:	89a3      	ldrh	r3, [r4, #12]
  410686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41068a:	81a3      	strh	r3, [r4, #12]
  41068c:	b002      	add	sp, #8
  41068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410692:	1e73      	subs	r3, r6, #1
  410694:	2bfe      	cmp	r3, #254	; 0xfe
  410696:	d8bb      	bhi.n	410610 <__fputwc+0x14>
  410698:	b2f1      	uxtb	r1, r6
  41069a:	4680      	mov	r8, r0
  41069c:	f88d 1004 	strb.w	r1, [sp, #4]
  4106a0:	e7c5      	b.n	41062e <__fputwc+0x32>
  4106a2:	4630      	mov	r0, r6
  4106a4:	b002      	add	sp, #8
  4106a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4106aa:	bf00      	nop

004106ac <_fputwc_r>:
  4106ac:	8993      	ldrh	r3, [r2, #12]
  4106ae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4106b2:	d10b      	bne.n	4106cc <_fputwc_r+0x20>
  4106b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4106b8:	b410      	push	{r4}
  4106ba:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4106bc:	8193      	strh	r3, [r2, #12]
  4106be:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4106c2:	6654      	str	r4, [r2, #100]	; 0x64
  4106c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4106c8:	f7ff bf98 	b.w	4105fc <__fputwc>
  4106cc:	f7ff bf96 	b.w	4105fc <__fputwc>

004106d0 <_malloc_trim_r>:
  4106d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4106d2:	4f22      	ldr	r7, [pc, #136]	; (41075c <_malloc_trim_r+0x8c>)
  4106d4:	460c      	mov	r4, r1
  4106d6:	4606      	mov	r6, r0
  4106d8:	f7fb fa38 	bl	40bb4c <__malloc_lock>
  4106dc:	68ba      	ldr	r2, [r7, #8]
  4106de:	4b20      	ldr	r3, [pc, #128]	; (410760 <_malloc_trim_r+0x90>)
  4106e0:	6855      	ldr	r5, [r2, #4]
  4106e2:	f025 0503 	bic.w	r5, r5, #3
  4106e6:	1b2c      	subs	r4, r5, r4
  4106e8:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  4106ec:	4023      	ands	r3, r4
  4106ee:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  4106f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4106f6:	db07      	blt.n	410708 <_malloc_trim_r+0x38>
  4106f8:	4630      	mov	r0, r6
  4106fa:	2100      	movs	r1, #0
  4106fc:	f7fb fa2a 	bl	40bb54 <_sbrk_r>
  410700:	68bb      	ldr	r3, [r7, #8]
  410702:	442b      	add	r3, r5
  410704:	4298      	cmp	r0, r3
  410706:	d004      	beq.n	410712 <_malloc_trim_r+0x42>
  410708:	4630      	mov	r0, r6
  41070a:	f7fb fa21 	bl	40bb50 <__malloc_unlock>
  41070e:	2000      	movs	r0, #0
  410710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  410712:	4630      	mov	r0, r6
  410714:	4261      	negs	r1, r4
  410716:	f7fb fa1d 	bl	40bb54 <_sbrk_r>
  41071a:	3001      	adds	r0, #1
  41071c:	d00d      	beq.n	41073a <_malloc_trim_r+0x6a>
  41071e:	4a11      	ldr	r2, [pc, #68]	; (410764 <_malloc_trim_r+0x94>)
  410720:	1b2d      	subs	r5, r5, r4
  410722:	68b9      	ldr	r1, [r7, #8]
  410724:	4630      	mov	r0, r6
  410726:	6813      	ldr	r3, [r2, #0]
  410728:	f045 0501 	orr.w	r5, r5, #1
  41072c:	1b1b      	subs	r3, r3, r4
  41072e:	604d      	str	r5, [r1, #4]
  410730:	6013      	str	r3, [r2, #0]
  410732:	f7fb fa0d 	bl	40bb50 <__malloc_unlock>
  410736:	2001      	movs	r0, #1
  410738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41073a:	4630      	mov	r0, r6
  41073c:	2100      	movs	r1, #0
  41073e:	f7fb fa09 	bl	40bb54 <_sbrk_r>
  410742:	68ba      	ldr	r2, [r7, #8]
  410744:	1a83      	subs	r3, r0, r2
  410746:	2b0f      	cmp	r3, #15
  410748:	ddde      	ble.n	410708 <_malloc_trim_r+0x38>
  41074a:	4c07      	ldr	r4, [pc, #28]	; (410768 <_malloc_trim_r+0x98>)
  41074c:	f043 0301 	orr.w	r3, r3, #1
  410750:	4904      	ldr	r1, [pc, #16]	; (410764 <_malloc_trim_r+0x94>)
  410752:	6824      	ldr	r4, [r4, #0]
  410754:	6053      	str	r3, [r2, #4]
  410756:	1b00      	subs	r0, r0, r4
  410758:	6008      	str	r0, [r1, #0]
  41075a:	e7d5      	b.n	410708 <_malloc_trim_r+0x38>
  41075c:	204004dc 	.word	0x204004dc
  410760:	fffff000 	.word	0xfffff000
  410764:	2040c4f0 	.word	0x2040c4f0
  410768:	204008e8 	.word	0x204008e8

0041076c <_free_r>:
  41076c:	2900      	cmp	r1, #0
  41076e:	d04d      	beq.n	41080c <_free_r+0xa0>
  410770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410774:	460c      	mov	r4, r1
  410776:	4680      	mov	r8, r0
  410778:	f7fb f9e8 	bl	40bb4c <__malloc_lock>
  41077c:	4963      	ldr	r1, [pc, #396]	; (41090c <_free_r+0x1a0>)
  41077e:	f854 7c04 	ldr.w	r7, [r4, #-4]
  410782:	f1a4 0508 	sub.w	r5, r4, #8
  410786:	688e      	ldr	r6, [r1, #8]
  410788:	f027 0301 	bic.w	r3, r7, #1
  41078c:	18ea      	adds	r2, r5, r3
  41078e:	6850      	ldr	r0, [r2, #4]
  410790:	4296      	cmp	r6, r2
  410792:	f020 0003 	bic.w	r0, r0, #3
  410796:	d059      	beq.n	41084c <_free_r+0xe0>
  410798:	07fe      	lsls	r6, r7, #31
  41079a:	6050      	str	r0, [r2, #4]
  41079c:	d40b      	bmi.n	4107b6 <_free_r+0x4a>
  41079e:	f854 4c08 	ldr.w	r4, [r4, #-8]
  4107a2:	f101 0708 	add.w	r7, r1, #8
  4107a6:	1b2d      	subs	r5, r5, r4
  4107a8:	4423      	add	r3, r4
  4107aa:	68ac      	ldr	r4, [r5, #8]
  4107ac:	42bc      	cmp	r4, r7
  4107ae:	d066      	beq.n	41087e <_free_r+0x112>
  4107b0:	68ef      	ldr	r7, [r5, #12]
  4107b2:	60e7      	str	r7, [r4, #12]
  4107b4:	60bc      	str	r4, [r7, #8]
  4107b6:	1814      	adds	r4, r2, r0
  4107b8:	6864      	ldr	r4, [r4, #4]
  4107ba:	07e4      	lsls	r4, r4, #31
  4107bc:	d40c      	bmi.n	4107d8 <_free_r+0x6c>
  4107be:	4c54      	ldr	r4, [pc, #336]	; (410910 <_free_r+0x1a4>)
  4107c0:	4403      	add	r3, r0
  4107c2:	6890      	ldr	r0, [r2, #8]
  4107c4:	42a0      	cmp	r0, r4
  4107c6:	d07c      	beq.n	4108c2 <_free_r+0x156>
  4107c8:	68d4      	ldr	r4, [r2, #12]
  4107ca:	f043 0201 	orr.w	r2, r3, #1
  4107ce:	60c4      	str	r4, [r0, #12]
  4107d0:	60a0      	str	r0, [r4, #8]
  4107d2:	606a      	str	r2, [r5, #4]
  4107d4:	50eb      	str	r3, [r5, r3]
  4107d6:	e003      	b.n	4107e0 <_free_r+0x74>
  4107d8:	f043 0201 	orr.w	r2, r3, #1
  4107dc:	606a      	str	r2, [r5, #4]
  4107de:	50eb      	str	r3, [r5, r3]
  4107e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4107e4:	d213      	bcs.n	41080e <_free_r+0xa2>
  4107e6:	08db      	lsrs	r3, r3, #3
  4107e8:	2001      	movs	r0, #1
  4107ea:	684a      	ldr	r2, [r1, #4]
  4107ec:	109c      	asrs	r4, r3, #2
  4107ee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  4107f2:	40a0      	lsls	r0, r4
  4107f4:	689c      	ldr	r4, [r3, #8]
  4107f6:	4302      	orrs	r2, r0
  4107f8:	60eb      	str	r3, [r5, #12]
  4107fa:	60ac      	str	r4, [r5, #8]
  4107fc:	604a      	str	r2, [r1, #4]
  4107fe:	609d      	str	r5, [r3, #8]
  410800:	60e5      	str	r5, [r4, #12]
  410802:	4640      	mov	r0, r8
  410804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  410808:	f7fb b9a2 	b.w	40bb50 <__malloc_unlock>
  41080c:	4770      	bx	lr
  41080e:	0a5a      	lsrs	r2, r3, #9
  410810:	2a04      	cmp	r2, #4
  410812:	d847      	bhi.n	4108a4 <_free_r+0x138>
  410814:	099a      	lsrs	r2, r3, #6
  410816:	f102 0438 	add.w	r4, r2, #56	; 0x38
  41081a:	0060      	lsls	r0, r4, #1
  41081c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  410820:	493a      	ldr	r1, [pc, #232]	; (41090c <_free_r+0x1a0>)
  410822:	6882      	ldr	r2, [r0, #8]
  410824:	4282      	cmp	r2, r0
  410826:	d043      	beq.n	4108b0 <_free_r+0x144>
  410828:	6851      	ldr	r1, [r2, #4]
  41082a:	f021 0103 	bic.w	r1, r1, #3
  41082e:	4299      	cmp	r1, r3
  410830:	d902      	bls.n	410838 <_free_r+0xcc>
  410832:	6892      	ldr	r2, [r2, #8]
  410834:	4290      	cmp	r0, r2
  410836:	d1f7      	bne.n	410828 <_free_r+0xbc>
  410838:	68d3      	ldr	r3, [r2, #12]
  41083a:	60eb      	str	r3, [r5, #12]
  41083c:	4640      	mov	r0, r8
  41083e:	60aa      	str	r2, [r5, #8]
  410840:	609d      	str	r5, [r3, #8]
  410842:	60d5      	str	r5, [r2, #12]
  410844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  410848:	f7fb b982 	b.w	40bb50 <__malloc_unlock>
  41084c:	07ff      	lsls	r7, r7, #31
  41084e:	4403      	add	r3, r0
  410850:	d407      	bmi.n	410862 <_free_r+0xf6>
  410852:	f854 2c08 	ldr.w	r2, [r4, #-8]
  410856:	1aad      	subs	r5, r5, r2
  410858:	4413      	add	r3, r2
  41085a:	68a8      	ldr	r0, [r5, #8]
  41085c:	68ea      	ldr	r2, [r5, #12]
  41085e:	60c2      	str	r2, [r0, #12]
  410860:	6090      	str	r0, [r2, #8]
  410862:	4a2c      	ldr	r2, [pc, #176]	; (410914 <_free_r+0x1a8>)
  410864:	f043 0001 	orr.w	r0, r3, #1
  410868:	6812      	ldr	r2, [r2, #0]
  41086a:	6068      	str	r0, [r5, #4]
  41086c:	4293      	cmp	r3, r2
  41086e:	608d      	str	r5, [r1, #8]
  410870:	d3c7      	bcc.n	410802 <_free_r+0x96>
  410872:	4b29      	ldr	r3, [pc, #164]	; (410918 <_free_r+0x1ac>)
  410874:	4640      	mov	r0, r8
  410876:	6819      	ldr	r1, [r3, #0]
  410878:	f7ff ff2a 	bl	4106d0 <_malloc_trim_r>
  41087c:	e7c1      	b.n	410802 <_free_r+0x96>
  41087e:	1811      	adds	r1, r2, r0
  410880:	6849      	ldr	r1, [r1, #4]
  410882:	07c9      	lsls	r1, r1, #31
  410884:	d409      	bmi.n	41089a <_free_r+0x12e>
  410886:	4403      	add	r3, r0
  410888:	68d1      	ldr	r1, [r2, #12]
  41088a:	6892      	ldr	r2, [r2, #8]
  41088c:	f043 0001 	orr.w	r0, r3, #1
  410890:	60d1      	str	r1, [r2, #12]
  410892:	608a      	str	r2, [r1, #8]
  410894:	6068      	str	r0, [r5, #4]
  410896:	50eb      	str	r3, [r5, r3]
  410898:	e7b3      	b.n	410802 <_free_r+0x96>
  41089a:	f043 0201 	orr.w	r2, r3, #1
  41089e:	606a      	str	r2, [r5, #4]
  4108a0:	50eb      	str	r3, [r5, r3]
  4108a2:	e7ae      	b.n	410802 <_free_r+0x96>
  4108a4:	2a14      	cmp	r2, #20
  4108a6:	d815      	bhi.n	4108d4 <_free_r+0x168>
  4108a8:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  4108ac:	0060      	lsls	r0, r4, #1
  4108ae:	e7b5      	b.n	41081c <_free_r+0xb0>
  4108b0:	10a4      	asrs	r4, r4, #2
  4108b2:	2701      	movs	r7, #1
  4108b4:	6848      	ldr	r0, [r1, #4]
  4108b6:	4613      	mov	r3, r2
  4108b8:	fa07 f404 	lsl.w	r4, r7, r4
  4108bc:	4320      	orrs	r0, r4
  4108be:	6048      	str	r0, [r1, #4]
  4108c0:	e7bb      	b.n	41083a <_free_r+0xce>
  4108c2:	f043 0201 	orr.w	r2, r3, #1
  4108c6:	614d      	str	r5, [r1, #20]
  4108c8:	610d      	str	r5, [r1, #16]
  4108ca:	60e8      	str	r0, [r5, #12]
  4108cc:	60a8      	str	r0, [r5, #8]
  4108ce:	606a      	str	r2, [r5, #4]
  4108d0:	50eb      	str	r3, [r5, r3]
  4108d2:	e796      	b.n	410802 <_free_r+0x96>
  4108d4:	2a54      	cmp	r2, #84	; 0x54
  4108d6:	d804      	bhi.n	4108e2 <_free_r+0x176>
  4108d8:	0b1a      	lsrs	r2, r3, #12
  4108da:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  4108de:	0060      	lsls	r0, r4, #1
  4108e0:	e79c      	b.n	41081c <_free_r+0xb0>
  4108e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4108e6:	d804      	bhi.n	4108f2 <_free_r+0x186>
  4108e8:	0bda      	lsrs	r2, r3, #15
  4108ea:	f102 0477 	add.w	r4, r2, #119	; 0x77
  4108ee:	0060      	lsls	r0, r4, #1
  4108f0:	e794      	b.n	41081c <_free_r+0xb0>
  4108f2:	f240 5054 	movw	r0, #1364	; 0x554
  4108f6:	4282      	cmp	r2, r0
  4108f8:	d804      	bhi.n	410904 <_free_r+0x198>
  4108fa:	0c9a      	lsrs	r2, r3, #18
  4108fc:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  410900:	0060      	lsls	r0, r4, #1
  410902:	e78b      	b.n	41081c <_free_r+0xb0>
  410904:	20fc      	movs	r0, #252	; 0xfc
  410906:	247e      	movs	r4, #126	; 0x7e
  410908:	e788      	b.n	41081c <_free_r+0xb0>
  41090a:	bf00      	nop
  41090c:	204004dc 	.word	0x204004dc
  410910:	204004e4 	.word	0x204004e4
  410914:	204008e4 	.word	0x204008e4
  410918:	2040c4ec 	.word	0x2040c4ec

0041091c <__sfvwrite_r>:
  41091c:	6893      	ldr	r3, [r2, #8]
  41091e:	2b00      	cmp	r3, #0
  410920:	d07a      	beq.n	410a18 <__sfvwrite_r+0xfc>
  410922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410926:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  41092a:	b083      	sub	sp, #12
  41092c:	460c      	mov	r4, r1
  41092e:	4681      	mov	r9, r0
  410930:	f01e 0f08 	tst.w	lr, #8
  410934:	4616      	mov	r6, r2
  410936:	d026      	beq.n	410986 <__sfvwrite_r+0x6a>
  410938:	690b      	ldr	r3, [r1, #16]
  41093a:	b323      	cbz	r3, 410986 <__sfvwrite_r+0x6a>
  41093c:	f00e 0802 	and.w	r8, lr, #2
  410940:	6835      	ldr	r5, [r6, #0]
  410942:	fa1f f088 	uxth.w	r0, r8
  410946:	b370      	cbz	r0, 4109a6 <__sfvwrite_r+0x8a>
  410948:	f04f 0a00 	mov.w	sl, #0
  41094c:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 410c3c <__sfvwrite_r+0x320>
  410950:	46d0      	mov	r8, sl
  410952:	45d8      	cmp	r8, fp
  410954:	4643      	mov	r3, r8
  410956:	4652      	mov	r2, sl
  410958:	4648      	mov	r0, r9
  41095a:	bf28      	it	cs
  41095c:	465b      	movcs	r3, fp
  41095e:	f1b8 0f00 	cmp.w	r8, #0
  410962:	d053      	beq.n	410a0c <__sfvwrite_r+0xf0>
  410964:	69e1      	ldr	r1, [r4, #28]
  410966:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410968:	47b8      	blx	r7
  41096a:	2800      	cmp	r0, #0
  41096c:	dd73      	ble.n	410a56 <__sfvwrite_r+0x13a>
  41096e:	68b3      	ldr	r3, [r6, #8]
  410970:	4482      	add	sl, r0
  410972:	ebc0 0808 	rsb	r8, r0, r8
  410976:	1a18      	subs	r0, r3, r0
  410978:	60b0      	str	r0, [r6, #8]
  41097a:	2800      	cmp	r0, #0
  41097c:	d1e9      	bne.n	410952 <__sfvwrite_r+0x36>
  41097e:	2000      	movs	r0, #0
  410980:	b003      	add	sp, #12
  410982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410986:	4648      	mov	r0, r9
  410988:	4621      	mov	r1, r4
  41098a:	f7fe fc59 	bl	40f240 <__swsetup_r>
  41098e:	2800      	cmp	r0, #0
  410990:	f040 814c 	bne.w	410c2c <__sfvwrite_r+0x310>
  410994:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  410998:	6835      	ldr	r5, [r6, #0]
  41099a:	f00e 0802 	and.w	r8, lr, #2
  41099e:	fa1f f088 	uxth.w	r0, r8
  4109a2:	2800      	cmp	r0, #0
  4109a4:	d1d0      	bne.n	410948 <__sfvwrite_r+0x2c>
  4109a6:	f01e 0b01 	ands.w	fp, lr, #1
  4109aa:	d15d      	bne.n	410a68 <__sfvwrite_r+0x14c>
  4109ac:	46d8      	mov	r8, fp
  4109ae:	f1b8 0f00 	cmp.w	r8, #0
  4109b2:	d025      	beq.n	410a00 <__sfvwrite_r+0xe4>
  4109b4:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4109b8:	68a7      	ldr	r7, [r4, #8]
  4109ba:	d02f      	beq.n	410a1c <__sfvwrite_r+0x100>
  4109bc:	45b8      	cmp	r8, r7
  4109be:	46ba      	mov	sl, r7
  4109c0:	f0c0 80a8 	bcc.w	410b14 <__sfvwrite_r+0x1f8>
  4109c4:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4109c8:	f040 80b5 	bne.w	410b36 <__sfvwrite_r+0x21a>
  4109cc:	6820      	ldr	r0, [r4, #0]
  4109ce:	4659      	mov	r1, fp
  4109d0:	4652      	mov	r2, sl
  4109d2:	f000 fdc1 	bl	411558 <memmove>
  4109d6:	68a2      	ldr	r2, [r4, #8]
  4109d8:	6821      	ldr	r1, [r4, #0]
  4109da:	4640      	mov	r0, r8
  4109dc:	1bd7      	subs	r7, r2, r7
  4109de:	eb01 030a 	add.w	r3, r1, sl
  4109e2:	60a7      	str	r7, [r4, #8]
  4109e4:	6023      	str	r3, [r4, #0]
  4109e6:	68b3      	ldr	r3, [r6, #8]
  4109e8:	4483      	add	fp, r0
  4109ea:	ebc0 0808 	rsb	r8, r0, r8
  4109ee:	1a18      	subs	r0, r3, r0
  4109f0:	60b0      	str	r0, [r6, #8]
  4109f2:	2800      	cmp	r0, #0
  4109f4:	d0c3      	beq.n	41097e <__sfvwrite_r+0x62>
  4109f6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4109fa:	f1b8 0f00 	cmp.w	r8, #0
  4109fe:	d1d9      	bne.n	4109b4 <__sfvwrite_r+0x98>
  410a00:	f8d5 b000 	ldr.w	fp, [r5]
  410a04:	3508      	adds	r5, #8
  410a06:	f855 8c04 	ldr.w	r8, [r5, #-4]
  410a0a:	e7d0      	b.n	4109ae <__sfvwrite_r+0x92>
  410a0c:	f8d5 a000 	ldr.w	sl, [r5]
  410a10:	3508      	adds	r5, #8
  410a12:	f855 8c04 	ldr.w	r8, [r5, #-4]
  410a16:	e79c      	b.n	410952 <__sfvwrite_r+0x36>
  410a18:	2000      	movs	r0, #0
  410a1a:	4770      	bx	lr
  410a1c:	6820      	ldr	r0, [r4, #0]
  410a1e:	6923      	ldr	r3, [r4, #16]
  410a20:	4298      	cmp	r0, r3
  410a22:	d803      	bhi.n	410a2c <__sfvwrite_r+0x110>
  410a24:	6963      	ldr	r3, [r4, #20]
  410a26:	4598      	cmp	r8, r3
  410a28:	f080 80bf 	bcs.w	410baa <__sfvwrite_r+0x28e>
  410a2c:	4547      	cmp	r7, r8
  410a2e:	4659      	mov	r1, fp
  410a30:	bf28      	it	cs
  410a32:	4647      	movcs	r7, r8
  410a34:	463a      	mov	r2, r7
  410a36:	f000 fd8f 	bl	411558 <memmove>
  410a3a:	68a3      	ldr	r3, [r4, #8]
  410a3c:	6822      	ldr	r2, [r4, #0]
  410a3e:	1bdb      	subs	r3, r3, r7
  410a40:	443a      	add	r2, r7
  410a42:	60a3      	str	r3, [r4, #8]
  410a44:	6022      	str	r2, [r4, #0]
  410a46:	2b00      	cmp	r3, #0
  410a48:	d149      	bne.n	410ade <__sfvwrite_r+0x1c2>
  410a4a:	4648      	mov	r0, r9
  410a4c:	4621      	mov	r1, r4
  410a4e:	f7ff fd1b 	bl	410488 <_fflush_r>
  410a52:	2800      	cmp	r0, #0
  410a54:	d043      	beq.n	410ade <__sfvwrite_r+0x1c2>
  410a56:	89a3      	ldrh	r3, [r4, #12]
  410a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  410a5c:	f04f 30ff 	mov.w	r0, #4294967295
  410a60:	81a3      	strh	r3, [r4, #12]
  410a62:	b003      	add	sp, #12
  410a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410a68:	4680      	mov	r8, r0
  410a6a:	4683      	mov	fp, r0
  410a6c:	4682      	mov	sl, r0
  410a6e:	9000      	str	r0, [sp, #0]
  410a70:	f1ba 0f00 	cmp.w	sl, #0
  410a74:	d02b      	beq.n	410ace <__sfvwrite_r+0x1b2>
  410a76:	9b00      	ldr	r3, [sp, #0]
  410a78:	2b00      	cmp	r3, #0
  410a7a:	d04f      	beq.n	410b1c <__sfvwrite_r+0x200>
  410a7c:	45d0      	cmp	r8, sl
  410a7e:	6962      	ldr	r2, [r4, #20]
  410a80:	68a1      	ldr	r1, [r4, #8]
  410a82:	4643      	mov	r3, r8
  410a84:	bf28      	it	cs
  410a86:	4653      	movcs	r3, sl
  410a88:	6820      	ldr	r0, [r4, #0]
  410a8a:	eb02 0c01 	add.w	ip, r2, r1
  410a8e:	461f      	mov	r7, r3
  410a90:	4563      	cmp	r3, ip
  410a92:	dd03      	ble.n	410a9c <__sfvwrite_r+0x180>
  410a94:	6921      	ldr	r1, [r4, #16]
  410a96:	4288      	cmp	r0, r1
  410a98:	f200 8099 	bhi.w	410bce <__sfvwrite_r+0x2b2>
  410a9c:	4293      	cmp	r3, r2
  410a9e:	db20      	blt.n	410ae2 <__sfvwrite_r+0x1c6>
  410aa0:	4613      	mov	r3, r2
  410aa2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410aa4:	4648      	mov	r0, r9
  410aa6:	69e1      	ldr	r1, [r4, #28]
  410aa8:	465a      	mov	r2, fp
  410aaa:	47b8      	blx	r7
  410aac:	1e07      	subs	r7, r0, #0
  410aae:	ddd2      	ble.n	410a56 <__sfvwrite_r+0x13a>
  410ab0:	ebb8 0807 	subs.w	r8, r8, r7
  410ab4:	d025      	beq.n	410b02 <__sfvwrite_r+0x1e6>
  410ab6:	68b3      	ldr	r3, [r6, #8]
  410ab8:	44bb      	add	fp, r7
  410aba:	ebc7 0a0a 	rsb	sl, r7, sl
  410abe:	1bdf      	subs	r7, r3, r7
  410ac0:	60b7      	str	r7, [r6, #8]
  410ac2:	2f00      	cmp	r7, #0
  410ac4:	f43f af5b 	beq.w	41097e <__sfvwrite_r+0x62>
  410ac8:	f1ba 0f00 	cmp.w	sl, #0
  410acc:	d1d3      	bne.n	410a76 <__sfvwrite_r+0x15a>
  410ace:	2300      	movs	r3, #0
  410ad0:	f8d5 b000 	ldr.w	fp, [r5]
  410ad4:	f8d5 a004 	ldr.w	sl, [r5, #4]
  410ad8:	3508      	adds	r5, #8
  410ada:	9300      	str	r3, [sp, #0]
  410adc:	e7c8      	b.n	410a70 <__sfvwrite_r+0x154>
  410ade:	4638      	mov	r0, r7
  410ae0:	e781      	b.n	4109e6 <__sfvwrite_r+0xca>
  410ae2:	461a      	mov	r2, r3
  410ae4:	4659      	mov	r1, fp
  410ae6:	9301      	str	r3, [sp, #4]
  410ae8:	f000 fd36 	bl	411558 <memmove>
  410aec:	68a2      	ldr	r2, [r4, #8]
  410aee:	ebb8 0807 	subs.w	r8, r8, r7
  410af2:	6821      	ldr	r1, [r4, #0]
  410af4:	9b01      	ldr	r3, [sp, #4]
  410af6:	eba2 0203 	sub.w	r2, r2, r3
  410afa:	440b      	add	r3, r1
  410afc:	60a2      	str	r2, [r4, #8]
  410afe:	6023      	str	r3, [r4, #0]
  410b00:	d1d9      	bne.n	410ab6 <__sfvwrite_r+0x19a>
  410b02:	4648      	mov	r0, r9
  410b04:	4621      	mov	r1, r4
  410b06:	f7ff fcbf 	bl	410488 <_fflush_r>
  410b0a:	2800      	cmp	r0, #0
  410b0c:	d1a3      	bne.n	410a56 <__sfvwrite_r+0x13a>
  410b0e:	f8cd 8000 	str.w	r8, [sp]
  410b12:	e7d0      	b.n	410ab6 <__sfvwrite_r+0x19a>
  410b14:	4647      	mov	r7, r8
  410b16:	6820      	ldr	r0, [r4, #0]
  410b18:	46c2      	mov	sl, r8
  410b1a:	e758      	b.n	4109ce <__sfvwrite_r+0xb2>
  410b1c:	4658      	mov	r0, fp
  410b1e:	210a      	movs	r1, #10
  410b20:	4652      	mov	r2, sl
  410b22:	f000 fcd1 	bl	4114c8 <memchr>
  410b26:	2800      	cmp	r0, #0
  410b28:	d07b      	beq.n	410c22 <__sfvwrite_r+0x306>
  410b2a:	3001      	adds	r0, #1
  410b2c:	2301      	movs	r3, #1
  410b2e:	ebcb 0800 	rsb	r8, fp, r0
  410b32:	9300      	str	r3, [sp, #0]
  410b34:	e7a2      	b.n	410a7c <__sfvwrite_r+0x160>
  410b36:	6963      	ldr	r3, [r4, #20]
  410b38:	6921      	ldr	r1, [r4, #16]
  410b3a:	6827      	ldr	r7, [r4, #0]
  410b3c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  410b40:	1a7f      	subs	r7, r7, r1
  410b42:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  410b46:	1c7b      	adds	r3, r7, #1
  410b48:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  410b4c:	4443      	add	r3, r8
  410b4e:	4662      	mov	r2, ip
  410b50:	459c      	cmp	ip, r3
  410b52:	d201      	bcs.n	410b58 <__sfvwrite_r+0x23c>
  410b54:	469c      	mov	ip, r3
  410b56:	461a      	mov	r2, r3
  410b58:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  410b5c:	f8cd c000 	str.w	ip, [sp]
  410b60:	d04b      	beq.n	410bfa <__sfvwrite_r+0x2de>
  410b62:	4611      	mov	r1, r2
  410b64:	4648      	mov	r0, r9
  410b66:	f7fa fc5b 	bl	40b420 <_malloc_r>
  410b6a:	f8dd c000 	ldr.w	ip, [sp]
  410b6e:	4682      	mov	sl, r0
  410b70:	2800      	cmp	r0, #0
  410b72:	d05e      	beq.n	410c32 <__sfvwrite_r+0x316>
  410b74:	463a      	mov	r2, r7
  410b76:	6921      	ldr	r1, [r4, #16]
  410b78:	f8cd c000 	str.w	ip, [sp]
  410b7c:	f7fa fefc 	bl	40b978 <memcpy>
  410b80:	89a2      	ldrh	r2, [r4, #12]
  410b82:	f8dd c000 	ldr.w	ip, [sp]
  410b86:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  410b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  410b8e:	81a2      	strh	r2, [r4, #12]
  410b90:	eb0a 0007 	add.w	r0, sl, r7
  410b94:	ebc7 020c 	rsb	r2, r7, ip
  410b98:	f8c4 a010 	str.w	sl, [r4, #16]
  410b9c:	4647      	mov	r7, r8
  410b9e:	6020      	str	r0, [r4, #0]
  410ba0:	46c2      	mov	sl, r8
  410ba2:	60a2      	str	r2, [r4, #8]
  410ba4:	f8c4 c014 	str.w	ip, [r4, #20]
  410ba8:	e711      	b.n	4109ce <__sfvwrite_r+0xb2>
  410baa:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  410bae:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410bb0:	4648      	mov	r0, r9
  410bb2:	69e1      	ldr	r1, [r4, #28]
  410bb4:	45c6      	cmp	lr, r8
  410bb6:	465a      	mov	r2, fp
  410bb8:	bf28      	it	cs
  410bba:	46c6      	movcs	lr, r8
  410bbc:	fb9e fef3 	sdiv	lr, lr, r3
  410bc0:	fb0e f303 	mul.w	r3, lr, r3
  410bc4:	47b8      	blx	r7
  410bc6:	2800      	cmp	r0, #0
  410bc8:	f73f af0d 	bgt.w	4109e6 <__sfvwrite_r+0xca>
  410bcc:	e743      	b.n	410a56 <__sfvwrite_r+0x13a>
  410bce:	4662      	mov	r2, ip
  410bd0:	4659      	mov	r1, fp
  410bd2:	f8cd c004 	str.w	ip, [sp, #4]
  410bd6:	f000 fcbf 	bl	411558 <memmove>
  410bda:	6823      	ldr	r3, [r4, #0]
  410bdc:	4648      	mov	r0, r9
  410bde:	f8dd c004 	ldr.w	ip, [sp, #4]
  410be2:	4621      	mov	r1, r4
  410be4:	4463      	add	r3, ip
  410be6:	6023      	str	r3, [r4, #0]
  410be8:	f7ff fc4e 	bl	410488 <_fflush_r>
  410bec:	f8dd c004 	ldr.w	ip, [sp, #4]
  410bf0:	2800      	cmp	r0, #0
  410bf2:	f47f af30 	bne.w	410a56 <__sfvwrite_r+0x13a>
  410bf6:	4667      	mov	r7, ip
  410bf8:	e75a      	b.n	410ab0 <__sfvwrite_r+0x194>
  410bfa:	4648      	mov	r0, r9
  410bfc:	f001 f97e 	bl	411efc <_realloc_r>
  410c00:	f8dd c000 	ldr.w	ip, [sp]
  410c04:	4682      	mov	sl, r0
  410c06:	2800      	cmp	r0, #0
  410c08:	d1c2      	bne.n	410b90 <__sfvwrite_r+0x274>
  410c0a:	4648      	mov	r0, r9
  410c0c:	6921      	ldr	r1, [r4, #16]
  410c0e:	f7ff fdad 	bl	41076c <_free_r>
  410c12:	89a3      	ldrh	r3, [r4, #12]
  410c14:	220c      	movs	r2, #12
  410c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  410c1a:	f8c9 2000 	str.w	r2, [r9]
  410c1e:	b29b      	uxth	r3, r3
  410c20:	e71a      	b.n	410a58 <__sfvwrite_r+0x13c>
  410c22:	2301      	movs	r3, #1
  410c24:	f10a 0801 	add.w	r8, sl, #1
  410c28:	9300      	str	r3, [sp, #0]
  410c2a:	e727      	b.n	410a7c <__sfvwrite_r+0x160>
  410c2c:	f04f 30ff 	mov.w	r0, #4294967295
  410c30:	e6a6      	b.n	410980 <__sfvwrite_r+0x64>
  410c32:	220c      	movs	r2, #12
  410c34:	89a3      	ldrh	r3, [r4, #12]
  410c36:	f8c9 2000 	str.w	r2, [r9]
  410c3a:	e70d      	b.n	410a58 <__sfvwrite_r+0x13c>
  410c3c:	7ffffc00 	.word	0x7ffffc00

00410c40 <_fwalk_reent>:
  410c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  410c44:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  410c48:	d01e      	beq.n	410c88 <_fwalk_reent+0x48>
  410c4a:	4688      	mov	r8, r1
  410c4c:	4606      	mov	r6, r0
  410c4e:	f04f 0900 	mov.w	r9, #0
  410c52:	687d      	ldr	r5, [r7, #4]
  410c54:	68bc      	ldr	r4, [r7, #8]
  410c56:	3d01      	subs	r5, #1
  410c58:	d410      	bmi.n	410c7c <_fwalk_reent+0x3c>
  410c5a:	89a3      	ldrh	r3, [r4, #12]
  410c5c:	3d01      	subs	r5, #1
  410c5e:	2b01      	cmp	r3, #1
  410c60:	d908      	bls.n	410c74 <_fwalk_reent+0x34>
  410c62:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  410c66:	4621      	mov	r1, r4
  410c68:	4630      	mov	r0, r6
  410c6a:	3301      	adds	r3, #1
  410c6c:	d002      	beq.n	410c74 <_fwalk_reent+0x34>
  410c6e:	47c0      	blx	r8
  410c70:	ea49 0900 	orr.w	r9, r9, r0
  410c74:	1c6b      	adds	r3, r5, #1
  410c76:	f104 0468 	add.w	r4, r4, #104	; 0x68
  410c7a:	d1ee      	bne.n	410c5a <_fwalk_reent+0x1a>
  410c7c:	683f      	ldr	r7, [r7, #0]
  410c7e:	2f00      	cmp	r7, #0
  410c80:	d1e7      	bne.n	410c52 <_fwalk_reent+0x12>
  410c82:	4648      	mov	r0, r9
  410c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410c88:	46b9      	mov	r9, r7
  410c8a:	4648      	mov	r0, r9
  410c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410c90 <rshift>:
  410c90:	6902      	ldr	r2, [r0, #16]
  410c92:	114b      	asrs	r3, r1, #5
  410c94:	4293      	cmp	r3, r2
  410c96:	b5f0      	push	{r4, r5, r6, r7, lr}
  410c98:	f100 0614 	add.w	r6, r0, #20
  410c9c:	da2b      	bge.n	410cf6 <rshift+0x66>
  410c9e:	f011 011f 	ands.w	r1, r1, #31
  410ca2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  410ca6:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
  410caa:	d029      	beq.n	410d00 <rshift+0x70>
  410cac:	f10e 0504 	add.w	r5, lr, #4
  410cb0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  410cb4:	f1c1 0c20 	rsb	ip, r1, #32
  410cb8:	42aa      	cmp	r2, r5
  410cba:	fa23 f401 	lsr.w	r4, r3, r1
  410cbe:	d935      	bls.n	410d2c <rshift+0x9c>
  410cc0:	f100 0710 	add.w	r7, r0, #16
  410cc4:	682b      	ldr	r3, [r5, #0]
  410cc6:	fa03 f30c 	lsl.w	r3, r3, ip
  410cca:	4323      	orrs	r3, r4
  410ccc:	f847 3f04 	str.w	r3, [r7, #4]!
  410cd0:	f855 3b04 	ldr.w	r3, [r5], #4
  410cd4:	42aa      	cmp	r2, r5
  410cd6:	fa23 f401 	lsr.w	r4, r3, r1
  410cda:	d8f3      	bhi.n	410cc4 <rshift+0x34>
  410cdc:	ebce 0202 	rsb	r2, lr, r2
  410ce0:	3a05      	subs	r2, #5
  410ce2:	f022 0203 	bic.w	r2, r2, #3
  410ce6:	3204      	adds	r2, #4
  410ce8:	4432      	add	r2, r6
  410cea:	6014      	str	r4, [r2, #0]
  410cec:	b104      	cbz	r4, 410cf0 <rshift+0x60>
  410cee:	3204      	adds	r2, #4
  410cf0:	1b93      	subs	r3, r2, r6
  410cf2:	109b      	asrs	r3, r3, #2
  410cf4:	e016      	b.n	410d24 <rshift+0x94>
  410cf6:	2300      	movs	r3, #0
  410cf8:	6103      	str	r3, [r0, #16]
  410cfa:	2300      	movs	r3, #0
  410cfc:	6143      	str	r3, [r0, #20]
  410cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410d00:	4572      	cmp	r2, lr
  410d02:	d9f8      	bls.n	410cf6 <rshift+0x66>
  410d04:	f100 0410 	add.w	r4, r0, #16
  410d08:	4671      	mov	r1, lr
  410d0a:	f851 5b04 	ldr.w	r5, [r1], #4
  410d0e:	428a      	cmp	r2, r1
  410d10:	f844 5f04 	str.w	r5, [r4, #4]!
  410d14:	d8f9      	bhi.n	410d0a <rshift+0x7a>
  410d16:	ea6f 030e 	mvn.w	r3, lr
  410d1a:	4413      	add	r3, r2
  410d1c:	f023 0303 	bic.w	r3, r3, #3
  410d20:	3304      	adds	r3, #4
  410d22:	109b      	asrs	r3, r3, #2
  410d24:	6103      	str	r3, [r0, #16]
  410d26:	2b00      	cmp	r3, #0
  410d28:	d0e7      	beq.n	410cfa <rshift+0x6a>
  410d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410d2c:	4632      	mov	r2, r6
  410d2e:	e7dc      	b.n	410cea <rshift+0x5a>

00410d30 <__gethex>:
  410d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410d34:	b08b      	sub	sp, #44	; 0x2c
  410d36:	4688      	mov	r8, r1
  410d38:	9202      	str	r2, [sp, #8]
  410d3a:	9307      	str	r3, [sp, #28]
  410d3c:	9005      	str	r0, [sp, #20]
  410d3e:	f000 fb4d 	bl	4113dc <_localeconv_r>
  410d42:	6803      	ldr	r3, [r0, #0]
  410d44:	4618      	mov	r0, r3
  410d46:	461c      	mov	r4, r3
  410d48:	9303      	str	r3, [sp, #12]
  410d4a:	f7fb f8b7 	bl	40bebc <strlen>
  410d4e:	f8d8 3000 	ldr.w	r3, [r8]
  410d52:	1821      	adds	r1, r4, r0
  410d54:	9000      	str	r0, [sp, #0]
  410d56:	789a      	ldrb	r2, [r3, #2]
  410d58:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  410d5c:	2a30      	cmp	r2, #48	; 0x30
  410d5e:	f040 819f 	bne.w	4110a0 <__gethex+0x370>
  410d62:	3303      	adds	r3, #3
  410d64:	f04f 0900 	mov.w	r9, #0
  410d68:	461c      	mov	r4, r3
  410d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
  410d6e:	f109 0901 	add.w	r9, r9, #1
  410d72:	2a30      	cmp	r2, #48	; 0x30
  410d74:	d0f8      	beq.n	410d68 <__gethex+0x38>
  410d76:	4eae      	ldr	r6, [pc, #696]	; (411030 <__gethex+0x300>)
  410d78:	5cb3      	ldrb	r3, [r6, r2]
  410d7a:	2b00      	cmp	r3, #0
  410d7c:	f000 80ec 	beq.w	410f58 <__gethex+0x228>
  410d80:	7823      	ldrb	r3, [r4, #0]
  410d82:	f04f 0a00 	mov.w	sl, #0
  410d86:	5cf3      	ldrb	r3, [r6, r3]
  410d88:	4655      	mov	r5, sl
  410d8a:	4627      	mov	r7, r4
  410d8c:	b123      	cbz	r3, 410d98 <__gethex+0x68>
  410d8e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  410d92:	5cf3      	ldrb	r3, [r6, r3]
  410d94:	2b00      	cmp	r3, #0
  410d96:	d1fa      	bne.n	410d8e <__gethex+0x5e>
  410d98:	4638      	mov	r0, r7
  410d9a:	9903      	ldr	r1, [sp, #12]
  410d9c:	9a00      	ldr	r2, [sp, #0]
  410d9e:	f001 fb39 	bl	412414 <strncmp>
  410da2:	b1c0      	cbz	r0, 410dd6 <__gethex+0xa6>
  410da4:	783b      	ldrb	r3, [r7, #0]
  410da6:	2d00      	cmp	r5, #0
  410da8:	f000 816a 	beq.w	411080 <__gethex+0x350>
  410dac:	1bed      	subs	r5, r5, r7
  410dae:	00aa      	lsls	r2, r5, #2
  410db0:	9201      	str	r2, [sp, #4]
  410db2:	2b50      	cmp	r3, #80	; 0x50
  410db4:	d018      	beq.n	410de8 <__gethex+0xb8>
  410db6:	2b70      	cmp	r3, #112	; 0x70
  410db8:	d016      	beq.n	410de8 <__gethex+0xb8>
  410dba:	463d      	mov	r5, r7
  410dbc:	f8c8 7000 	str.w	r7, [r8]
  410dc0:	f1ba 0f00 	cmp.w	sl, #0
  410dc4:	d03f      	beq.n	410e46 <__gethex+0x116>
  410dc6:	f1b9 0f00 	cmp.w	r9, #0
  410dca:	bf14      	ite	ne
  410dcc:	2000      	movne	r0, #0
  410dce:	2006      	moveq	r0, #6
  410dd0:	b00b      	add	sp, #44	; 0x2c
  410dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410dd6:	2d00      	cmp	r5, #0
  410dd8:	f000 818a 	beq.w	4110f0 <__gethex+0x3c0>
  410ddc:	783b      	ldrb	r3, [r7, #0]
  410dde:	e7e5      	b.n	410dac <__gethex+0x7c>
  410de0:	2300      	movs	r3, #0
  410de2:	f04f 0a01 	mov.w	sl, #1
  410de6:	9301      	str	r3, [sp, #4]
  410de8:	787b      	ldrb	r3, [r7, #1]
  410dea:	2b2b      	cmp	r3, #43	; 0x2b
  410dec:	f000 811d 	beq.w	41102a <__gethex+0x2fa>
  410df0:	2b2d      	cmp	r3, #45	; 0x2d
  410df2:	f000 80e4 	beq.w	410fbe <__gethex+0x28e>
  410df6:	1c79      	adds	r1, r7, #1
  410df8:	f04f 0e00 	mov.w	lr, #0
  410dfc:	5cf3      	ldrb	r3, [r6, r3]
  410dfe:	4a8c      	ldr	r2, [pc, #560]	; (411030 <__gethex+0x300>)
  410e00:	1e58      	subs	r0, r3, #1
  410e02:	2818      	cmp	r0, #24
  410e04:	d8d9      	bhi.n	410dba <__gethex+0x8a>
  410e06:	7848      	ldrb	r0, [r1, #1]
  410e08:	3b10      	subs	r3, #16
  410e0a:	3101      	adds	r1, #1
  410e0c:	5c12      	ldrb	r2, [r2, r0]
  410e0e:	1e50      	subs	r0, r2, #1
  410e10:	2818      	cmp	r0, #24
  410e12:	d80a      	bhi.n	410e2a <__gethex+0xfa>
  410e14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  410e18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  410e1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  410e20:	5c32      	ldrb	r2, [r6, r0]
  410e22:	1e50      	subs	r0, r2, #1
  410e24:	3b10      	subs	r3, #16
  410e26:	2818      	cmp	r0, #24
  410e28:	d9f4      	bls.n	410e14 <__gethex+0xe4>
  410e2a:	f1ce 0200 	rsb	r2, lr, #0
  410e2e:	463d      	mov	r5, r7
  410e30:	460f      	mov	r7, r1
  410e32:	4053      	eors	r3, r2
  410e34:	f8c8 7000 	str.w	r7, [r8]
  410e38:	449e      	add	lr, r3
  410e3a:	9b01      	ldr	r3, [sp, #4]
  410e3c:	4473      	add	r3, lr
  410e3e:	9301      	str	r3, [sp, #4]
  410e40:	f1ba 0f00 	cmp.w	sl, #0
  410e44:	d1bf      	bne.n	410dc6 <__gethex+0x96>
  410e46:	1b2b      	subs	r3, r5, r4
  410e48:	4651      	mov	r1, sl
  410e4a:	3b01      	subs	r3, #1
  410e4c:	2b07      	cmp	r3, #7
  410e4e:	dd03      	ble.n	410e58 <__gethex+0x128>
  410e50:	105b      	asrs	r3, r3, #1
  410e52:	3101      	adds	r1, #1
  410e54:	2b07      	cmp	r3, #7
  410e56:	dcfb      	bgt.n	410e50 <__gethex+0x120>
  410e58:	9805      	ldr	r0, [sp, #20]
  410e5a:	f000 fbdf 	bl	41161c <_Balloc>
  410e5e:	4603      	mov	r3, r0
  410e60:	42a5      	cmp	r5, r4
  410e62:	9004      	str	r0, [sp, #16]
  410e64:	f103 0314 	add.w	r3, r3, #20
  410e68:	9306      	str	r3, [sp, #24]
  410e6a:	f240 8193 	bls.w	411194 <__gethex+0x464>
  410e6e:	f04f 0800 	mov.w	r8, #0
  410e72:	469a      	mov	sl, r3
  410e74:	9b00      	ldr	r3, [sp, #0]
  410e76:	4647      	mov	r7, r8
  410e78:	46a0      	mov	r8, r4
  410e7a:	f1c3 0c01 	rsb	ip, r3, #1
  410e7e:	463c      	mov	r4, r7
  410e80:	46e1      	mov	r9, ip
  410e82:	e00f      	b.n	410ea4 <__gethex+0x174>
  410e84:	2f20      	cmp	r7, #32
  410e86:	d05f      	beq.n	410f48 <__gethex+0x218>
  410e88:	463a      	mov	r2, r7
  410e8a:	3704      	adds	r7, #4
  410e8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
  410e90:	461d      	mov	r5, r3
  410e92:	5c73      	ldrb	r3, [r6, r1]
  410e94:	4545      	cmp	r5, r8
  410e96:	f003 030f 	and.w	r3, r3, #15
  410e9a:	fa03 f302 	lsl.w	r3, r3, r2
  410e9e:	ea44 0403 	orr.w	r4, r4, r3
  410ea2:	d918      	bls.n	410ed6 <__gethex+0x1a6>
  410ea4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  410ea8:	1e6b      	subs	r3, r5, #1
  410eaa:	455a      	cmp	r2, fp
  410eac:	d1ea      	bne.n	410e84 <__gethex+0x154>
  410eae:	eb03 0c09 	add.w	ip, r3, r9
  410eb2:	45c4      	cmp	ip, r8
  410eb4:	d3e6      	bcc.n	410e84 <__gethex+0x154>
  410eb6:	4660      	mov	r0, ip
  410eb8:	9903      	ldr	r1, [sp, #12]
  410eba:	9a00      	ldr	r2, [sp, #0]
  410ebc:	9309      	str	r3, [sp, #36]	; 0x24
  410ebe:	f8cd c020 	str.w	ip, [sp, #32]
  410ec2:	f001 faa7 	bl	412414 <strncmp>
  410ec6:	f8dd c020 	ldr.w	ip, [sp, #32]
  410eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410ecc:	2800      	cmp	r0, #0
  410ece:	d1d9      	bne.n	410e84 <__gethex+0x154>
  410ed0:	4665      	mov	r5, ip
  410ed2:	4545      	cmp	r5, r8
  410ed4:	d8e6      	bhi.n	410ea4 <__gethex+0x174>
  410ed6:	46a0      	mov	r8, r4
  410ed8:	9b06      	ldr	r3, [sp, #24]
  410eda:	4640      	mov	r0, r8
  410edc:	f84a 8b04 	str.w	r8, [sl], #4
  410ee0:	ebc3 0a0a 	rsb	sl, r3, sl
  410ee4:	9a04      	ldr	r2, [sp, #16]
  410ee6:	ea4f 03aa 	mov.w	r3, sl, asr #2
  410eea:	6113      	str	r3, [r2, #16]
  410eec:	015c      	lsls	r4, r3, #5
  410eee:	f000 fc53 	bl	411798 <__hi0bits>
  410ef2:	9b02      	ldr	r3, [sp, #8]
  410ef4:	1a20      	subs	r0, r4, r0
  410ef6:	681e      	ldr	r6, [r3, #0]
  410ef8:	42b0      	cmp	r0, r6
  410efa:	f300 809b 	bgt.w	411034 <__gethex+0x304>
  410efe:	f2c0 80c1 	blt.w	411084 <__gethex+0x354>
  410f02:	2700      	movs	r7, #0
  410f04:	9b02      	ldr	r3, [sp, #8]
  410f06:	9a01      	ldr	r2, [sp, #4]
  410f08:	689b      	ldr	r3, [r3, #8]
  410f0a:	429a      	cmp	r2, r3
  410f0c:	dc4c      	bgt.n	410fa8 <__gethex+0x278>
  410f0e:	9b02      	ldr	r3, [sp, #8]
  410f10:	9a01      	ldr	r2, [sp, #4]
  410f12:	685b      	ldr	r3, [r3, #4]
  410f14:	429a      	cmp	r2, r3
  410f16:	da6d      	bge.n	410ff4 <__gethex+0x2c4>
  410f18:	1a9d      	subs	r5, r3, r2
  410f1a:	42ae      	cmp	r6, r5
  410f1c:	f300 80c8 	bgt.w	4110b0 <__gethex+0x380>
  410f20:	9a02      	ldr	r2, [sp, #8]
  410f22:	68d2      	ldr	r2, [r2, #12]
  410f24:	2a02      	cmp	r2, #2
  410f26:	f000 814b 	beq.w	4111c0 <__gethex+0x490>
  410f2a:	2a03      	cmp	r2, #3
  410f2c:	f000 8119 	beq.w	411162 <__gethex+0x432>
  410f30:	2a01      	cmp	r2, #1
  410f32:	f000 8136 	beq.w	4111a2 <__gethex+0x472>
  410f36:	9805      	ldr	r0, [sp, #20]
  410f38:	9904      	ldr	r1, [sp, #16]
  410f3a:	f000 fb97 	bl	41166c <_Bfree>
  410f3e:	2300      	movs	r3, #0
  410f40:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410f42:	2050      	movs	r0, #80	; 0x50
  410f44:	6013      	str	r3, [r2, #0]
  410f46:	e743      	b.n	410dd0 <__gethex+0xa0>
  410f48:	f8ca 4000 	str.w	r4, [sl]
  410f4c:	2400      	movs	r4, #0
  410f4e:	f10a 0a04 	add.w	sl, sl, #4
  410f52:	2704      	movs	r7, #4
  410f54:	4622      	mov	r2, r4
  410f56:	e799      	b.n	410e8c <__gethex+0x15c>
  410f58:	4620      	mov	r0, r4
  410f5a:	9903      	ldr	r1, [sp, #12]
  410f5c:	9a00      	ldr	r2, [sp, #0]
  410f5e:	f001 fa59 	bl	412414 <strncmp>
  410f62:	b388      	cbz	r0, 410fc8 <__gethex+0x298>
  410f64:	7823      	ldrb	r3, [r4, #0]
  410f66:	4627      	mov	r7, r4
  410f68:	2b50      	cmp	r3, #80	; 0x50
  410f6a:	f43f af39 	beq.w	410de0 <__gethex+0xb0>
  410f6e:	2b70      	cmp	r3, #112	; 0x70
  410f70:	f43f af36 	beq.w	410de0 <__gethex+0xb0>
  410f74:	f8c8 7000 	str.w	r7, [r8]
  410f78:	e725      	b.n	410dc6 <__gethex+0x96>
  410f7a:	4445      	add	r5, r8
  410f7c:	f1c6 0620 	rsb	r6, r6, #32
  410f80:	f855 0c04 	ldr.w	r0, [r5, #-4]
  410f84:	f000 fc08 	bl	411798 <__hi0bits>
  410f88:	42b0      	cmp	r0, r6
  410f8a:	f280 80e6 	bge.w	41115a <__gethex+0x42a>
  410f8e:	9b01      	ldr	r3, [sp, #4]
  410f90:	2101      	movs	r1, #1
  410f92:	9804      	ldr	r0, [sp, #16]
  410f94:	440b      	add	r3, r1
  410f96:	461c      	mov	r4, r3
  410f98:	9301      	str	r3, [sp, #4]
  410f9a:	f7ff fe79 	bl	410c90 <rshift>
  410f9e:	9b02      	ldr	r3, [sp, #8]
  410fa0:	689b      	ldr	r3, [r3, #8]
  410fa2:	429c      	cmp	r4, r3
  410fa4:	f340 80d9 	ble.w	41115a <__gethex+0x42a>
  410fa8:	9805      	ldr	r0, [sp, #20]
  410faa:	9904      	ldr	r1, [sp, #16]
  410fac:	f000 fb5e 	bl	41166c <_Bfree>
  410fb0:	2300      	movs	r3, #0
  410fb2:	20a3      	movs	r0, #163	; 0xa3
  410fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410fb6:	6013      	str	r3, [r2, #0]
  410fb8:	b00b      	add	sp, #44	; 0x2c
  410fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410fbe:	f04f 0e01 	mov.w	lr, #1
  410fc2:	1cb9      	adds	r1, r7, #2
  410fc4:	78bb      	ldrb	r3, [r7, #2]
  410fc6:	e719      	b.n	410dfc <__gethex+0xcc>
  410fc8:	9900      	ldr	r1, [sp, #0]
  410fca:	5c62      	ldrb	r2, [r4, r1]
  410fcc:	1867      	adds	r7, r4, r1
  410fce:	5cb3      	ldrb	r3, [r6, r2]
  410fd0:	2b00      	cmp	r3, #0
  410fd2:	d069      	beq.n	4110a8 <__gethex+0x378>
  410fd4:	2a30      	cmp	r2, #48	; 0x30
  410fd6:	463c      	mov	r4, r7
  410fd8:	d104      	bne.n	410fe4 <__gethex+0x2b4>
  410fda:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  410fde:	2b30      	cmp	r3, #48	; 0x30
  410fe0:	d0fb      	beq.n	410fda <__gethex+0x2aa>
  410fe2:	5cf3      	ldrb	r3, [r6, r3]
  410fe4:	fab3 fa83 	clz	sl, r3
  410fe8:	463d      	mov	r5, r7
  410fea:	f04f 0901 	mov.w	r9, #1
  410fee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  410ff2:	e6ca      	b.n	410d8a <__gethex+0x5a>
  410ff4:	2401      	movs	r4, #1
  410ff6:	b167      	cbz	r7, 411012 <__gethex+0x2e2>
  410ff8:	9b02      	ldr	r3, [sp, #8]
  410ffa:	68db      	ldr	r3, [r3, #12]
  410ffc:	2b02      	cmp	r3, #2
  410ffe:	f000 8085 	beq.w	41110c <__gethex+0x3dc>
  411002:	2b03      	cmp	r3, #3
  411004:	f000 8086 	beq.w	411114 <__gethex+0x3e4>
  411008:	2b01      	cmp	r3, #1
  41100a:	f000 80ba 	beq.w	411182 <__gethex+0x452>
  41100e:	f044 0410 	orr.w	r4, r4, #16
  411012:	9b14      	ldr	r3, [sp, #80]	; 0x50
  411014:	4620      	mov	r0, r4
  411016:	461a      	mov	r2, r3
  411018:	9b04      	ldr	r3, [sp, #16]
  41101a:	6013      	str	r3, [r2, #0]
  41101c:	9b07      	ldr	r3, [sp, #28]
  41101e:	461a      	mov	r2, r3
  411020:	9b01      	ldr	r3, [sp, #4]
  411022:	6013      	str	r3, [r2, #0]
  411024:	b00b      	add	sp, #44	; 0x2c
  411026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41102a:	f04f 0e00 	mov.w	lr, #0
  41102e:	e7c8      	b.n	410fc2 <__gethex+0x292>
  411030:	00413f68 	.word	0x00413f68
  411034:	1b84      	subs	r4, r0, r6
  411036:	9804      	ldr	r0, [sp, #16]
  411038:	4621      	mov	r1, r4
  41103a:	f000 ff31 	bl	411ea0 <__any_on>
  41103e:	2800      	cmp	r0, #0
  411040:	d034      	beq.n	4110ac <__gethex+0x37c>
  411042:	1e63      	subs	r3, r4, #1
  411044:	2701      	movs	r7, #1
  411046:	9806      	ldr	r0, [sp, #24]
  411048:	115a      	asrs	r2, r3, #5
  41104a:	f003 011f 	and.w	r1, r3, #31
  41104e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  411052:	fa07 f101 	lsl.w	r1, r7, r1
  411056:	4211      	tst	r1, r2
  411058:	d00a      	beq.n	411070 <__gethex+0x340>
  41105a:	42bb      	cmp	r3, r7
  41105c:	f340 809f 	ble.w	41119e <__gethex+0x46e>
  411060:	9804      	ldr	r0, [sp, #16]
  411062:	1ea1      	subs	r1, r4, #2
  411064:	f000 ff1c 	bl	411ea0 <__any_on>
  411068:	2800      	cmp	r0, #0
  41106a:	f000 8098 	beq.w	41119e <__gethex+0x46e>
  41106e:	2703      	movs	r7, #3
  411070:	9b01      	ldr	r3, [sp, #4]
  411072:	4621      	mov	r1, r4
  411074:	9804      	ldr	r0, [sp, #16]
  411076:	4423      	add	r3, r4
  411078:	9301      	str	r3, [sp, #4]
  41107a:	f7ff fe09 	bl	410c90 <rshift>
  41107e:	e741      	b.n	410f04 <__gethex+0x1d4>
  411080:	9501      	str	r5, [sp, #4]
  411082:	e696      	b.n	410db2 <__gethex+0x82>
  411084:	1a32      	subs	r2, r6, r0
  411086:	9b01      	ldr	r3, [sp, #4]
  411088:	9904      	ldr	r1, [sp, #16]
  41108a:	2700      	movs	r7, #0
  41108c:	1a9b      	subs	r3, r3, r2
  41108e:	9805      	ldr	r0, [sp, #20]
  411090:	9301      	str	r3, [sp, #4]
  411092:	f000 fcd1 	bl	411a38 <__lshift>
  411096:	4603      	mov	r3, r0
  411098:	9004      	str	r0, [sp, #16]
  41109a:	3314      	adds	r3, #20
  41109c:	9306      	str	r3, [sp, #24]
  41109e:	e731      	b.n	410f04 <__gethex+0x1d4>
  4110a0:	1c9c      	adds	r4, r3, #2
  4110a2:	f04f 0900 	mov.w	r9, #0
  4110a6:	e666      	b.n	410d76 <__gethex+0x46>
  4110a8:	4613      	mov	r3, r2
  4110aa:	e75d      	b.n	410f68 <__gethex+0x238>
  4110ac:	4607      	mov	r7, r0
  4110ae:	e7df      	b.n	411070 <__gethex+0x340>
  4110b0:	1e6c      	subs	r4, r5, #1
  4110b2:	2f00      	cmp	r7, #0
  4110b4:	d153      	bne.n	41115e <__gethex+0x42e>
  4110b6:	2c00      	cmp	r4, #0
  4110b8:	dd04      	ble.n	4110c4 <__gethex+0x394>
  4110ba:	9804      	ldr	r0, [sp, #16]
  4110bc:	4621      	mov	r1, r4
  4110be:	f000 feef 	bl	411ea0 <__any_on>
  4110c2:	4607      	mov	r7, r0
  4110c4:	1162      	asrs	r2, r4, #5
  4110c6:	2301      	movs	r3, #1
  4110c8:	f004 041f 	and.w	r4, r4, #31
  4110cc:	9906      	ldr	r1, [sp, #24]
  4110ce:	40a3      	lsls	r3, r4
  4110d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  4110d4:	4213      	tst	r3, r2
  4110d6:	d001      	beq.n	4110dc <__gethex+0x3ac>
  4110d8:	f047 0702 	orr.w	r7, r7, #2
  4110dc:	4629      	mov	r1, r5
  4110de:	9804      	ldr	r0, [sp, #16]
  4110e0:	f7ff fdd6 	bl	410c90 <rshift>
  4110e4:	9b02      	ldr	r3, [sp, #8]
  4110e6:	1b76      	subs	r6, r6, r5
  4110e8:	2402      	movs	r4, #2
  4110ea:	685b      	ldr	r3, [r3, #4]
  4110ec:	9301      	str	r3, [sp, #4]
  4110ee:	e782      	b.n	410ff6 <__gethex+0x2c6>
  4110f0:	9a00      	ldr	r2, [sp, #0]
  4110f2:	5cbb      	ldrb	r3, [r7, r2]
  4110f4:	18bd      	adds	r5, r7, r2
  4110f6:	5cf2      	ldrb	r2, [r6, r3]
  4110f8:	462f      	mov	r7, r5
  4110fa:	2a00      	cmp	r2, #0
  4110fc:	f43f ae56 	beq.w	410dac <__gethex+0x7c>
  411100:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  411104:	5cf2      	ldrb	r2, [r6, r3]
  411106:	2a00      	cmp	r2, #0
  411108:	d1fa      	bne.n	411100 <__gethex+0x3d0>
  41110a:	e64f      	b.n	410dac <__gethex+0x7c>
  41110c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41110e:	f1c3 0301 	rsb	r3, r3, #1
  411112:	9315      	str	r3, [sp, #84]	; 0x54
  411114:	9b15      	ldr	r3, [sp, #84]	; 0x54
  411116:	2b00      	cmp	r3, #0
  411118:	f43f af79 	beq.w	41100e <__gethex+0x2de>
  41111c:	9b04      	ldr	r3, [sp, #16]
  41111e:	2000      	movs	r0, #0
  411120:	9a06      	ldr	r2, [sp, #24]
  411122:	691f      	ldr	r7, [r3, #16]
  411124:	4613      	mov	r3, r2
  411126:	00bd      	lsls	r5, r7, #2
  411128:	1951      	adds	r1, r2, r5
  41112a:	e003      	b.n	411134 <__gethex+0x404>
  41112c:	f843 0b04 	str.w	r0, [r3], #4
  411130:	4299      	cmp	r1, r3
  411132:	d949      	bls.n	4111c8 <__gethex+0x498>
  411134:	681a      	ldr	r2, [r3, #0]
  411136:	f1b2 3fff 	cmp.w	r2, #4294967295
  41113a:	d0f7      	beq.n	41112c <__gethex+0x3fc>
  41113c:	3201      	adds	r2, #1
  41113e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  411142:	601a      	str	r2, [r3, #0]
  411144:	2c02      	cmp	r4, #2
  411146:	d04e      	beq.n	4111e6 <__gethex+0x4b6>
  411148:	9b04      	ldr	r3, [sp, #16]
  41114a:	691b      	ldr	r3, [r3, #16]
  41114c:	429f      	cmp	r7, r3
  41114e:	f6ff af1e 	blt.w	410f8e <__gethex+0x25e>
  411152:	f016 061f 	ands.w	r6, r6, #31
  411156:	f47f af10 	bne.w	410f7a <__gethex+0x24a>
  41115a:	2421      	movs	r4, #33	; 0x21
  41115c:	e759      	b.n	411012 <__gethex+0x2e2>
  41115e:	2701      	movs	r7, #1
  411160:	e7b0      	b.n	4110c4 <__gethex+0x394>
  411162:	9a15      	ldr	r2, [sp, #84]	; 0x54
  411164:	2a00      	cmp	r2, #0
  411166:	f43f aee6 	beq.w	410f36 <__gethex+0x206>
  41116a:	9907      	ldr	r1, [sp, #28]
  41116c:	2201      	movs	r2, #1
  41116e:	2062      	movs	r0, #98	; 0x62
  411170:	600b      	str	r3, [r1, #0]
  411172:	9b06      	ldr	r3, [sp, #24]
  411174:	9904      	ldr	r1, [sp, #16]
  411176:	610a      	str	r2, [r1, #16]
  411178:	601a      	str	r2, [r3, #0]
  41117a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41117c:	461a      	mov	r2, r3
  41117e:	6011      	str	r1, [r2, #0]
  411180:	e626      	b.n	410dd0 <__gethex+0xa0>
  411182:	07ba      	lsls	r2, r7, #30
  411184:	f57f af43 	bpl.w	41100e <__gethex+0x2de>
  411188:	9b06      	ldr	r3, [sp, #24]
  41118a:	681b      	ldr	r3, [r3, #0]
  41118c:	433b      	orrs	r3, r7
  41118e:	07db      	lsls	r3, r3, #31
  411190:	d4c4      	bmi.n	41111c <__gethex+0x3ec>
  411192:	e73c      	b.n	41100e <__gethex+0x2de>
  411194:	f8dd a018 	ldr.w	sl, [sp, #24]
  411198:	f04f 0800 	mov.w	r8, #0
  41119c:	e69c      	b.n	410ed8 <__gethex+0x1a8>
  41119e:	2702      	movs	r7, #2
  4111a0:	e766      	b.n	411070 <__gethex+0x340>
  4111a2:	42b5      	cmp	r5, r6
  4111a4:	f47f aec7 	bne.w	410f36 <__gethex+0x206>
  4111a8:	2e01      	cmp	r6, #1
  4111aa:	ddde      	ble.n	41116a <__gethex+0x43a>
  4111ac:	1e71      	subs	r1, r6, #1
  4111ae:	9804      	ldr	r0, [sp, #16]
  4111b0:	f000 fe76 	bl	411ea0 <__any_on>
  4111b4:	2800      	cmp	r0, #0
  4111b6:	f43f aebe 	beq.w	410f36 <__gethex+0x206>
  4111ba:	9b02      	ldr	r3, [sp, #8]
  4111bc:	685b      	ldr	r3, [r3, #4]
  4111be:	e7d4      	b.n	41116a <__gethex+0x43a>
  4111c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4111c2:	2a00      	cmp	r2, #0
  4111c4:	d0d1      	beq.n	41116a <__gethex+0x43a>
  4111c6:	e6b6      	b.n	410f36 <__gethex+0x206>
  4111c8:	9b04      	ldr	r3, [sp, #16]
  4111ca:	689b      	ldr	r3, [r3, #8]
  4111cc:	429f      	cmp	r7, r3
  4111ce:	da11      	bge.n	4111f4 <__gethex+0x4c4>
  4111d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4111d4:	463b      	mov	r3, r7
  4111d6:	9804      	ldr	r0, [sp, #16]
  4111d8:	1c59      	adds	r1, r3, #1
  4111da:	2201      	movs	r2, #1
  4111dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  4111e0:	6101      	str	r1, [r0, #16]
  4111e2:	615a      	str	r2, [r3, #20]
  4111e4:	e7ae      	b.n	411144 <__gethex+0x414>
  4111e6:	9b02      	ldr	r3, [sp, #8]
  4111e8:	681b      	ldr	r3, [r3, #0]
  4111ea:	3b01      	subs	r3, #1
  4111ec:	42b3      	cmp	r3, r6
  4111ee:	d01e      	beq.n	41122e <__gethex+0x4fe>
  4111f0:	2422      	movs	r4, #34	; 0x22
  4111f2:	e70e      	b.n	411012 <__gethex+0x2e2>
  4111f4:	9b04      	ldr	r3, [sp, #16]
  4111f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4111fa:	6859      	ldr	r1, [r3, #4]
  4111fc:	4648      	mov	r0, r9
  4111fe:	3101      	adds	r1, #1
  411200:	f000 fa0c 	bl	41161c <_Balloc>
  411204:	9a04      	ldr	r2, [sp, #16]
  411206:	4680      	mov	r8, r0
  411208:	300c      	adds	r0, #12
  41120a:	6913      	ldr	r3, [r2, #16]
  41120c:	f102 010c 	add.w	r1, r2, #12
  411210:	1c9a      	adds	r2, r3, #2
  411212:	0092      	lsls	r2, r2, #2
  411214:	f7fa fbb0 	bl	40b978 <memcpy>
  411218:	9904      	ldr	r1, [sp, #16]
  41121a:	4648      	mov	r0, r9
  41121c:	f8cd 8010 	str.w	r8, [sp, #16]
  411220:	f000 fa24 	bl	41166c <_Bfree>
  411224:	f108 0814 	add.w	r8, r8, #20
  411228:	f858 3c04 	ldr.w	r3, [r8, #-4]
  41122c:	e7d3      	b.n	4111d6 <__gethex+0x4a6>
  41122e:	1172      	asrs	r2, r6, #5
  411230:	2301      	movs	r3, #1
  411232:	f006 061f 	and.w	r6, r6, #31
  411236:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  41123a:	40b3      	lsls	r3, r6
  41123c:	4213      	tst	r3, r2
  41123e:	bf0c      	ite	eq
  411240:	2422      	moveq	r4, #34	; 0x22
  411242:	2421      	movne	r4, #33	; 0x21
  411244:	e6e5      	b.n	411012 <__gethex+0x2e2>
  411246:	bf00      	nop

00411248 <__hexnan>:
  411248:	680b      	ldr	r3, [r1, #0]
  41124a:	1159      	asrs	r1, r3, #5
  41124c:	f013 031f 	ands.w	r3, r3, #31
  411250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411254:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  411258:	b085      	sub	sp, #20
  41125a:	9002      	str	r0, [sp, #8]
  41125c:	9101      	str	r1, [sp, #4]
  41125e:	9303      	str	r3, [sp, #12]
  411260:	d002      	beq.n	411268 <__hexnan+0x20>
  411262:	460b      	mov	r3, r1
  411264:	3304      	adds	r3, #4
  411266:	9301      	str	r3, [sp, #4]
  411268:	9c01      	ldr	r4, [sp, #4]
  41126a:	2300      	movs	r3, #0
  41126c:	9902      	ldr	r1, [sp, #8]
  41126e:	f1a4 0804 	sub.w	r8, r4, #4
  411272:	4618      	mov	r0, r3
  411274:	469a      	mov	sl, r3
  411276:	469c      	mov	ip, r3
  411278:	46c6      	mov	lr, r8
  41127a:	4646      	mov	r6, r8
  41127c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4113c4 <__hexnan+0x17c>
  411280:	680f      	ldr	r7, [r1, #0]
  411282:	f844 3c04 	str.w	r3, [r4, #-4]
  411286:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  41128a:	b323      	cbz	r3, 4112d6 <__hexnan+0x8e>
  41128c:	f819 1003 	ldrb.w	r1, [r9, r3]
  411290:	2900      	cmp	r1, #0
  411292:	d155      	bne.n	411340 <__hexnan+0xf8>
  411294:	2b20      	cmp	r3, #32
  411296:	d86f      	bhi.n	411378 <__hexnan+0x130>
  411298:	45d4      	cmp	ip, sl
  41129a:	ddf4      	ble.n	411286 <__hexnan+0x3e>
  41129c:	2807      	cmp	r0, #7
  41129e:	dc13      	bgt.n	4112c8 <__hexnan+0x80>
  4112a0:	4576      	cmp	r6, lr
  4112a2:	d211      	bcs.n	4112c8 <__hexnan+0x80>
  4112a4:	f1c0 0008 	rsb	r0, r0, #8
  4112a8:	6834      	ldr	r4, [r6, #0]
  4112aa:	4633      	mov	r3, r6
  4112ac:	0080      	lsls	r0, r0, #2
  4112ae:	f1c0 0b20 	rsb	fp, r0, #32
  4112b2:	685d      	ldr	r5, [r3, #4]
  4112b4:	fa05 f10b 	lsl.w	r1, r5, fp
  4112b8:	4321      	orrs	r1, r4
  4112ba:	fa25 f400 	lsr.w	r4, r5, r0
  4112be:	6019      	str	r1, [r3, #0]
  4112c0:	f843 4f04 	str.w	r4, [r3, #4]!
  4112c4:	459e      	cmp	lr, r3
  4112c6:	d8f4      	bhi.n	4112b2 <__hexnan+0x6a>
  4112c8:	4296      	cmp	r6, r2
  4112ca:	d84c      	bhi.n	411366 <__hexnan+0x11e>
  4112cc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  4112d0:	2008      	movs	r0, #8
  4112d2:	2b00      	cmp	r3, #0
  4112d4:	d1da      	bne.n	41128c <__hexnan+0x44>
  4112d6:	f1bc 0f00 	cmp.w	ip, #0
  4112da:	d04f      	beq.n	41137c <__hexnan+0x134>
  4112dc:	2807      	cmp	r0, #7
  4112de:	dc13      	bgt.n	411308 <__hexnan+0xc0>
  4112e0:	4576      	cmp	r6, lr
  4112e2:	d211      	bcs.n	411308 <__hexnan+0xc0>
  4112e4:	f1c0 0308 	rsb	r3, r0, #8
  4112e8:	6834      	ldr	r4, [r6, #0]
  4112ea:	4631      	mov	r1, r6
  4112ec:	009b      	lsls	r3, r3, #2
  4112ee:	f1c3 0720 	rsb	r7, r3, #32
  4112f2:	684d      	ldr	r5, [r1, #4]
  4112f4:	fa05 f007 	lsl.w	r0, r5, r7
  4112f8:	4320      	orrs	r0, r4
  4112fa:	fa25 f403 	lsr.w	r4, r5, r3
  4112fe:	6008      	str	r0, [r1, #0]
  411300:	f841 4f04 	str.w	r4, [r1, #4]!
  411304:	4571      	cmp	r1, lr
  411306:	d3f4      	bcc.n	4112f2 <__hexnan+0xaa>
  411308:	42b2      	cmp	r2, r6
  41130a:	d23b      	bcs.n	411384 <__hexnan+0x13c>
  41130c:	4613      	mov	r3, r2
  41130e:	f856 1b04 	ldr.w	r1, [r6], #4
  411312:	45b0      	cmp	r8, r6
  411314:	f843 1b04 	str.w	r1, [r3], #4
  411318:	d2f9      	bcs.n	41130e <__hexnan+0xc6>
  41131a:	2100      	movs	r1, #0
  41131c:	f843 1b04 	str.w	r1, [r3], #4
  411320:	4598      	cmp	r8, r3
  411322:	d2fb      	bcs.n	41131c <__hexnan+0xd4>
  411324:	9b01      	ldr	r3, [sp, #4]
  411326:	f853 3c04 	ldr.w	r3, [r3, #-4]
  41132a:	b92b      	cbnz	r3, 411338 <__hexnan+0xf0>
  41132c:	4542      	cmp	r2, r8
  41132e:	d03a      	beq.n	4113a6 <__hexnan+0x15e>
  411330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  411334:	2b00      	cmp	r3, #0
  411336:	d0f9      	beq.n	41132c <__hexnan+0xe4>
  411338:	2005      	movs	r0, #5
  41133a:	b005      	add	sp, #20
  41133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411340:	3001      	adds	r0, #1
  411342:	f10c 0c01 	add.w	ip, ip, #1
  411346:	2808      	cmp	r0, #8
  411348:	dc06      	bgt.n	411358 <__hexnan+0x110>
  41134a:	6833      	ldr	r3, [r6, #0]
  41134c:	011b      	lsls	r3, r3, #4
  41134e:	f001 010f 	and.w	r1, r1, #15
  411352:	4319      	orrs	r1, r3
  411354:	6031      	str	r1, [r6, #0]
  411356:	e796      	b.n	411286 <__hexnan+0x3e>
  411358:	4296      	cmp	r6, r2
  41135a:	d994      	bls.n	411286 <__hexnan+0x3e>
  41135c:	2300      	movs	r3, #0
  41135e:	3e04      	subs	r6, #4
  411360:	2001      	movs	r0, #1
  411362:	6033      	str	r3, [r6, #0]
  411364:	e7f3      	b.n	41134e <__hexnan+0x106>
  411366:	2300      	movs	r3, #0
  411368:	f1a6 0e04 	sub.w	lr, r6, #4
  41136c:	46e2      	mov	sl, ip
  41136e:	f846 3c04 	str.w	r3, [r6, #-4]
  411372:	4618      	mov	r0, r3
  411374:	4676      	mov	r6, lr
  411376:	e786      	b.n	411286 <__hexnan+0x3e>
  411378:	2b29      	cmp	r3, #41	; 0x29
  41137a:	d01b      	beq.n	4113b4 <__hexnan+0x16c>
  41137c:	2004      	movs	r0, #4
  41137e:	b005      	add	sp, #20
  411380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411384:	9b03      	ldr	r3, [sp, #12]
  411386:	2b00      	cmp	r3, #0
  411388:	d0cc      	beq.n	411324 <__hexnan+0xdc>
  41138a:	9b03      	ldr	r3, [sp, #12]
  41138c:	f04f 30ff 	mov.w	r0, #4294967295
  411390:	9c01      	ldr	r4, [sp, #4]
  411392:	f1c3 0320 	rsb	r3, r3, #32
  411396:	f854 1c04 	ldr.w	r1, [r4, #-4]
  41139a:	fa20 f303 	lsr.w	r3, r0, r3
  41139e:	400b      	ands	r3, r1
  4113a0:	f844 3c04 	str.w	r3, [r4, #-4]
  4113a4:	e7c1      	b.n	41132a <__hexnan+0xe2>
  4113a6:	2301      	movs	r3, #1
  4113a8:	2005      	movs	r0, #5
  4113aa:	f8c8 3000 	str.w	r3, [r8]
  4113ae:	b005      	add	sp, #20
  4113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4113b4:	3701      	adds	r7, #1
  4113b6:	9b02      	ldr	r3, [sp, #8]
  4113b8:	601f      	str	r7, [r3, #0]
  4113ba:	f1bc 0f00 	cmp.w	ip, #0
  4113be:	d18d      	bne.n	4112dc <__hexnan+0x94>
  4113c0:	e7dc      	b.n	41137c <__hexnan+0x134>
  4113c2:	bf00      	nop
  4113c4:	00413f68 	.word	0x00413f68

004113c8 <__locale_charset>:
  4113c8:	4800      	ldr	r0, [pc, #0]	; (4113cc <__locale_charset+0x4>)
  4113ca:	4770      	bx	lr
  4113cc:	20400928 	.word	0x20400928

004113d0 <__locale_mb_cur_max>:
  4113d0:	4b01      	ldr	r3, [pc, #4]	; (4113d8 <__locale_mb_cur_max+0x8>)
  4113d2:	6818      	ldr	r0, [r3, #0]
  4113d4:	4770      	bx	lr
  4113d6:	bf00      	nop
  4113d8:	20400948 	.word	0x20400948

004113dc <_localeconv_r>:
  4113dc:	4800      	ldr	r0, [pc, #0]	; (4113e0 <_localeconv_r+0x4>)
  4113de:	4770      	bx	lr
  4113e0:	204008f0 	.word	0x204008f0

004113e4 <__smakebuf_r>:
  4113e4:	898b      	ldrh	r3, [r1, #12]
  4113e6:	b29a      	uxth	r2, r3
  4113e8:	f012 0f02 	tst.w	r2, #2
  4113ec:	d13d      	bne.n	41146a <__smakebuf_r+0x86>
  4113ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4113f0:	460c      	mov	r4, r1
  4113f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4113f6:	b091      	sub	sp, #68	; 0x44
  4113f8:	4605      	mov	r5, r0
  4113fa:	2900      	cmp	r1, #0
  4113fc:	db19      	blt.n	411432 <__smakebuf_r+0x4e>
  4113fe:	aa01      	add	r2, sp, #4
  411400:	f001 fa52 	bl	4128a8 <_fstat_r>
  411404:	2800      	cmp	r0, #0
  411406:	db12      	blt.n	41142e <__smakebuf_r+0x4a>
  411408:	9b02      	ldr	r3, [sp, #8]
  41140a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  41140e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  411412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  411416:	fab7 f787 	clz	r7, r7
  41141a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  41141e:	d02b      	beq.n	411478 <__smakebuf_r+0x94>
  411420:	89a3      	ldrh	r3, [r4, #12]
  411422:	f44f 6680 	mov.w	r6, #1024	; 0x400
  411426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41142a:	81a3      	strh	r3, [r4, #12]
  41142c:	e00c      	b.n	411448 <__smakebuf_r+0x64>
  41142e:	89a3      	ldrh	r3, [r4, #12]
  411430:	b29a      	uxth	r2, r3
  411432:	f012 0f80 	tst.w	r2, #128	; 0x80
  411436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41143a:	f04f 0700 	mov.w	r7, #0
  41143e:	bf0c      	ite	eq
  411440:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  411444:	2640      	movne	r6, #64	; 0x40
  411446:	81a3      	strh	r3, [r4, #12]
  411448:	4628      	mov	r0, r5
  41144a:	4631      	mov	r1, r6
  41144c:	f7f9 ffe8 	bl	40b420 <_malloc_r>
  411450:	89a3      	ldrh	r3, [r4, #12]
  411452:	b340      	cbz	r0, 4114a6 <__smakebuf_r+0xc2>
  411454:	4a1a      	ldr	r2, [pc, #104]	; (4114c0 <__smakebuf_r+0xdc>)
  411456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41145a:	63ea      	str	r2, [r5, #60]	; 0x3c
  41145c:	81a3      	strh	r3, [r4, #12]
  41145e:	6020      	str	r0, [r4, #0]
  411460:	6120      	str	r0, [r4, #16]
  411462:	6166      	str	r6, [r4, #20]
  411464:	b99f      	cbnz	r7, 41148e <__smakebuf_r+0xaa>
  411466:	b011      	add	sp, #68	; 0x44
  411468:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41146a:	f101 0343 	add.w	r3, r1, #67	; 0x43
  41146e:	2201      	movs	r2, #1
  411470:	600b      	str	r3, [r1, #0]
  411472:	610b      	str	r3, [r1, #16]
  411474:	614a      	str	r2, [r1, #20]
  411476:	4770      	bx	lr
  411478:	4b12      	ldr	r3, [pc, #72]	; (4114c4 <__smakebuf_r+0xe0>)
  41147a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  41147c:	429a      	cmp	r2, r3
  41147e:	d1cf      	bne.n	411420 <__smakebuf_r+0x3c>
  411480:	89a3      	ldrh	r3, [r4, #12]
  411482:	f44f 6680 	mov.w	r6, #1024	; 0x400
  411486:	4333      	orrs	r3, r6
  411488:	64e6      	str	r6, [r4, #76]	; 0x4c
  41148a:	81a3      	strh	r3, [r4, #12]
  41148c:	e7dc      	b.n	411448 <__smakebuf_r+0x64>
  41148e:	4628      	mov	r0, r5
  411490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  411494:	f001 fa1c 	bl	4128d0 <_isatty_r>
  411498:	2800      	cmp	r0, #0
  41149a:	d0e4      	beq.n	411466 <__smakebuf_r+0x82>
  41149c:	89a3      	ldrh	r3, [r4, #12]
  41149e:	f043 0301 	orr.w	r3, r3, #1
  4114a2:	81a3      	strh	r3, [r4, #12]
  4114a4:	e7df      	b.n	411466 <__smakebuf_r+0x82>
  4114a6:	059a      	lsls	r2, r3, #22
  4114a8:	d4dd      	bmi.n	411466 <__smakebuf_r+0x82>
  4114aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4114ae:	f043 0302 	orr.w	r3, r3, #2
  4114b2:	2101      	movs	r1, #1
  4114b4:	81a3      	strh	r3, [r4, #12]
  4114b6:	6022      	str	r2, [r4, #0]
  4114b8:	6122      	str	r2, [r4, #16]
  4114ba:	6161      	str	r1, [r4, #20]
  4114bc:	e7d3      	b.n	411466 <__smakebuf_r+0x82>
  4114be:	bf00      	nop
  4114c0:	004104b5 	.word	0x004104b5
  4114c4:	004123e9 	.word	0x004123e9

004114c8 <memchr>:
  4114c8:	0783      	lsls	r3, r0, #30
  4114ca:	b2c9      	uxtb	r1, r1
  4114cc:	b470      	push	{r4, r5, r6}
  4114ce:	d03f      	beq.n	411550 <memchr+0x88>
  4114d0:	1e54      	subs	r4, r2, #1
  4114d2:	2a00      	cmp	r2, #0
  4114d4:	d03e      	beq.n	411554 <memchr+0x8c>
  4114d6:	7803      	ldrb	r3, [r0, #0]
  4114d8:	428b      	cmp	r3, r1
  4114da:	bf18      	it	ne
  4114dc:	1c43      	addne	r3, r0, #1
  4114de:	d105      	bne.n	4114ec <memchr+0x24>
  4114e0:	e01c      	b.n	41151c <memchr+0x54>
  4114e2:	b1ec      	cbz	r4, 411520 <memchr+0x58>
  4114e4:	7802      	ldrb	r2, [r0, #0]
  4114e6:	3c01      	subs	r4, #1
  4114e8:	428a      	cmp	r2, r1
  4114ea:	d017      	beq.n	41151c <memchr+0x54>
  4114ec:	f013 0f03 	tst.w	r3, #3
  4114f0:	4618      	mov	r0, r3
  4114f2:	f103 0301 	add.w	r3, r3, #1
  4114f6:	d1f4      	bne.n	4114e2 <memchr+0x1a>
  4114f8:	2c03      	cmp	r4, #3
  4114fa:	d814      	bhi.n	411526 <memchr+0x5e>
  4114fc:	b184      	cbz	r4, 411520 <memchr+0x58>
  4114fe:	7803      	ldrb	r3, [r0, #0]
  411500:	428b      	cmp	r3, r1
  411502:	d00b      	beq.n	41151c <memchr+0x54>
  411504:	1905      	adds	r5, r0, r4
  411506:	1c43      	adds	r3, r0, #1
  411508:	e002      	b.n	411510 <memchr+0x48>
  41150a:	7802      	ldrb	r2, [r0, #0]
  41150c:	428a      	cmp	r2, r1
  41150e:	d005      	beq.n	41151c <memchr+0x54>
  411510:	42ab      	cmp	r3, r5
  411512:	4618      	mov	r0, r3
  411514:	f103 0301 	add.w	r3, r3, #1
  411518:	d1f7      	bne.n	41150a <memchr+0x42>
  41151a:	2000      	movs	r0, #0
  41151c:	bc70      	pop	{r4, r5, r6}
  41151e:	4770      	bx	lr
  411520:	4620      	mov	r0, r4
  411522:	bc70      	pop	{r4, r5, r6}
  411524:	4770      	bx	lr
  411526:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  41152a:	4602      	mov	r2, r0
  41152c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  411530:	4610      	mov	r0, r2
  411532:	3204      	adds	r2, #4
  411534:	6803      	ldr	r3, [r0, #0]
  411536:	4073      	eors	r3, r6
  411538:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  41153c:	ea25 0303 	bic.w	r3, r5, r3
  411540:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  411544:	d1da      	bne.n	4114fc <memchr+0x34>
  411546:	3c04      	subs	r4, #4
  411548:	4610      	mov	r0, r2
  41154a:	2c03      	cmp	r4, #3
  41154c:	d8f0      	bhi.n	411530 <memchr+0x68>
  41154e:	e7d5      	b.n	4114fc <memchr+0x34>
  411550:	4614      	mov	r4, r2
  411552:	e7d1      	b.n	4114f8 <memchr+0x30>
  411554:	4610      	mov	r0, r2
  411556:	e7e1      	b.n	41151c <memchr+0x54>

00411558 <memmove>:
  411558:	4288      	cmp	r0, r1
  41155a:	b5f0      	push	{r4, r5, r6, r7, lr}
  41155c:	d90d      	bls.n	41157a <memmove+0x22>
  41155e:	188b      	adds	r3, r1, r2
  411560:	4298      	cmp	r0, r3
  411562:	d20a      	bcs.n	41157a <memmove+0x22>
  411564:	1881      	adds	r1, r0, r2
  411566:	2a00      	cmp	r2, #0
  411568:	d053      	beq.n	411612 <memmove+0xba>
  41156a:	1a9a      	subs	r2, r3, r2
  41156c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  411570:	4293      	cmp	r3, r2
  411572:	f801 4d01 	strb.w	r4, [r1, #-1]!
  411576:	d1f9      	bne.n	41156c <memmove+0x14>
  411578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41157a:	2a0f      	cmp	r2, #15
  41157c:	d947      	bls.n	41160e <memmove+0xb6>
  41157e:	ea40 0301 	orr.w	r3, r0, r1
  411582:	079b      	lsls	r3, r3, #30
  411584:	d146      	bne.n	411614 <memmove+0xbc>
  411586:	f100 0410 	add.w	r4, r0, #16
  41158a:	f101 0310 	add.w	r3, r1, #16
  41158e:	4615      	mov	r5, r2
  411590:	f853 6c10 	ldr.w	r6, [r3, #-16]
  411594:	3d10      	subs	r5, #16
  411596:	3310      	adds	r3, #16
  411598:	3410      	adds	r4, #16
  41159a:	f844 6c20 	str.w	r6, [r4, #-32]
  41159e:	2d0f      	cmp	r5, #15
  4115a0:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  4115a4:	f844 6c1c 	str.w	r6, [r4, #-28]
  4115a8:	f853 6c18 	ldr.w	r6, [r3, #-24]
  4115ac:	f844 6c18 	str.w	r6, [r4, #-24]
  4115b0:	f853 6c14 	ldr.w	r6, [r3, #-20]
  4115b4:	f844 6c14 	str.w	r6, [r4, #-20]
  4115b8:	d8ea      	bhi.n	411590 <memmove+0x38>
  4115ba:	f1a2 0310 	sub.w	r3, r2, #16
  4115be:	f002 0e0f 	and.w	lr, r2, #15
  4115c2:	f023 030f 	bic.w	r3, r3, #15
  4115c6:	f1be 0f03 	cmp.w	lr, #3
  4115ca:	f103 0310 	add.w	r3, r3, #16
  4115ce:	4419      	add	r1, r3
  4115d0:	4403      	add	r3, r0
  4115d2:	d921      	bls.n	411618 <memmove+0xc0>
  4115d4:	1f1e      	subs	r6, r3, #4
  4115d6:	460d      	mov	r5, r1
  4115d8:	4674      	mov	r4, lr
  4115da:	3c04      	subs	r4, #4
  4115dc:	f855 7b04 	ldr.w	r7, [r5], #4
  4115e0:	2c03      	cmp	r4, #3
  4115e2:	f846 7f04 	str.w	r7, [r6, #4]!
  4115e6:	d8f8      	bhi.n	4115da <memmove+0x82>
  4115e8:	f1ae 0404 	sub.w	r4, lr, #4
  4115ec:	f002 0203 	and.w	r2, r2, #3
  4115f0:	f024 0403 	bic.w	r4, r4, #3
  4115f4:	3404      	adds	r4, #4
  4115f6:	4423      	add	r3, r4
  4115f8:	4421      	add	r1, r4
  4115fa:	b152      	cbz	r2, 411612 <memmove+0xba>
  4115fc:	3b01      	subs	r3, #1
  4115fe:	440a      	add	r2, r1
  411600:	f811 4b01 	ldrb.w	r4, [r1], #1
  411604:	4291      	cmp	r1, r2
  411606:	f803 4f01 	strb.w	r4, [r3, #1]!
  41160a:	d1f9      	bne.n	411600 <memmove+0xa8>
  41160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41160e:	4603      	mov	r3, r0
  411610:	e7f3      	b.n	4115fa <memmove+0xa2>
  411612:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411614:	4603      	mov	r3, r0
  411616:	e7f1      	b.n	4115fc <memmove+0xa4>
  411618:	4672      	mov	r2, lr
  41161a:	e7ee      	b.n	4115fa <memmove+0xa2>

0041161c <_Balloc>:
  41161c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  41161e:	b538      	push	{r3, r4, r5, lr}
  411620:	4605      	mov	r5, r0
  411622:	460c      	mov	r4, r1
  411624:	b152      	cbz	r2, 41163c <_Balloc+0x20>
  411626:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  41162a:	b18b      	cbz	r3, 411650 <_Balloc+0x34>
  41162c:	6819      	ldr	r1, [r3, #0]
  41162e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  411632:	2200      	movs	r2, #0
  411634:	4618      	mov	r0, r3
  411636:	611a      	str	r2, [r3, #16]
  411638:	60da      	str	r2, [r3, #12]
  41163a:	bd38      	pop	{r3, r4, r5, pc}
  41163c:	2221      	movs	r2, #33	; 0x21
  41163e:	2104      	movs	r1, #4
  411640:	f001 f8ae 	bl	4127a0 <_calloc_r>
  411644:	64e8      	str	r0, [r5, #76]	; 0x4c
  411646:	4602      	mov	r2, r0
  411648:	2800      	cmp	r0, #0
  41164a:	d1ec      	bne.n	411626 <_Balloc+0xa>
  41164c:	2000      	movs	r0, #0
  41164e:	bd38      	pop	{r3, r4, r5, pc}
  411650:	2101      	movs	r1, #1
  411652:	4628      	mov	r0, r5
  411654:	fa01 f504 	lsl.w	r5, r1, r4
  411658:	1d6a      	adds	r2, r5, #5
  41165a:	0092      	lsls	r2, r2, #2
  41165c:	f001 f8a0 	bl	4127a0 <_calloc_r>
  411660:	4603      	mov	r3, r0
  411662:	2800      	cmp	r0, #0
  411664:	d0f2      	beq.n	41164c <_Balloc+0x30>
  411666:	6044      	str	r4, [r0, #4]
  411668:	6085      	str	r5, [r0, #8]
  41166a:	e7e2      	b.n	411632 <_Balloc+0x16>

0041166c <_Bfree>:
  41166c:	b131      	cbz	r1, 41167c <_Bfree+0x10>
  41166e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  411670:	684a      	ldr	r2, [r1, #4]
  411672:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  411676:	6008      	str	r0, [r1, #0]
  411678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  41167c:	4770      	bx	lr
  41167e:	bf00      	nop

00411680 <__multadd>:
  411680:	b5f0      	push	{r4, r5, r6, r7, lr}
  411682:	460c      	mov	r4, r1
  411684:	b083      	sub	sp, #12
  411686:	4605      	mov	r5, r0
  411688:	690e      	ldr	r6, [r1, #16]
  41168a:	f101 0e14 	add.w	lr, r1, #20
  41168e:	2700      	movs	r7, #0
  411690:	f8de 1000 	ldr.w	r1, [lr]
  411694:	3701      	adds	r7, #1
  411696:	b288      	uxth	r0, r1
  411698:	42be      	cmp	r6, r7
  41169a:	ea4f 4111 	mov.w	r1, r1, lsr #16
  41169e:	fb02 3300 	mla	r3, r2, r0, r3
  4116a2:	fb02 f101 	mul.w	r1, r2, r1
  4116a6:	b298      	uxth	r0, r3
  4116a8:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  4116ac:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  4116b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4116b4:	f84e 1b04 	str.w	r1, [lr], #4
  4116b8:	dcea      	bgt.n	411690 <__multadd+0x10>
  4116ba:	b13b      	cbz	r3, 4116cc <__multadd+0x4c>
  4116bc:	68a2      	ldr	r2, [r4, #8]
  4116be:	4296      	cmp	r6, r2
  4116c0:	da07      	bge.n	4116d2 <__multadd+0x52>
  4116c2:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  4116c6:	3601      	adds	r6, #1
  4116c8:	6153      	str	r3, [r2, #20]
  4116ca:	6126      	str	r6, [r4, #16]
  4116cc:	4620      	mov	r0, r4
  4116ce:	b003      	add	sp, #12
  4116d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4116d2:	6861      	ldr	r1, [r4, #4]
  4116d4:	4628      	mov	r0, r5
  4116d6:	9301      	str	r3, [sp, #4]
  4116d8:	3101      	adds	r1, #1
  4116da:	f7ff ff9f 	bl	41161c <_Balloc>
  4116de:	6922      	ldr	r2, [r4, #16]
  4116e0:	f104 010c 	add.w	r1, r4, #12
  4116e4:	4607      	mov	r7, r0
  4116e6:	3202      	adds	r2, #2
  4116e8:	300c      	adds	r0, #12
  4116ea:	0092      	lsls	r2, r2, #2
  4116ec:	f7fa f944 	bl	40b978 <memcpy>
  4116f0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  4116f2:	6861      	ldr	r1, [r4, #4]
  4116f4:	9b01      	ldr	r3, [sp, #4]
  4116f6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4116fa:	6020      	str	r0, [r4, #0]
  4116fc:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  411700:	463c      	mov	r4, r7
  411702:	e7de      	b.n	4116c2 <__multadd+0x42>

00411704 <__s2b>:
  411704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411708:	461f      	mov	r7, r3
  41170a:	4d22      	ldr	r5, [pc, #136]	; (411794 <__s2b+0x90>)
  41170c:	3308      	adds	r3, #8
  41170e:	460c      	mov	r4, r1
  411710:	4690      	mov	r8, r2
  411712:	4606      	mov	r6, r0
  411714:	fb85 1203 	smull	r1, r2, r5, r3
  411718:	17db      	asrs	r3, r3, #31
  41171a:	ebc3 0262 	rsb	r2, r3, r2, asr #1
  41171e:	2a01      	cmp	r2, #1
  411720:	dd35      	ble.n	41178e <__s2b+0x8a>
  411722:	2301      	movs	r3, #1
  411724:	2100      	movs	r1, #0
  411726:	005b      	lsls	r3, r3, #1
  411728:	3101      	adds	r1, #1
  41172a:	429a      	cmp	r2, r3
  41172c:	dcfb      	bgt.n	411726 <__s2b+0x22>
  41172e:	4630      	mov	r0, r6
  411730:	f7ff ff74 	bl	41161c <_Balloc>
  411734:	2301      	movs	r3, #1
  411736:	9a08      	ldr	r2, [sp, #32]
  411738:	f1b8 0f09 	cmp.w	r8, #9
  41173c:	6103      	str	r3, [r0, #16]
  41173e:	6142      	str	r2, [r0, #20]
  411740:	dd21      	ble.n	411786 <__s2b+0x82>
  411742:	f104 0909 	add.w	r9, r4, #9
  411746:	4444      	add	r4, r8
  411748:	464d      	mov	r5, r9
  41174a:	f815 3b01 	ldrb.w	r3, [r5], #1
  41174e:	4601      	mov	r1, r0
  411750:	220a      	movs	r2, #10
  411752:	4630      	mov	r0, r6
  411754:	3b30      	subs	r3, #48	; 0x30
  411756:	f7ff ff93 	bl	411680 <__multadd>
  41175a:	42a5      	cmp	r5, r4
  41175c:	d1f5      	bne.n	41174a <__s2b+0x46>
  41175e:	eb09 0408 	add.w	r4, r9, r8
  411762:	3c08      	subs	r4, #8
  411764:	4547      	cmp	r7, r8
  411766:	dd0c      	ble.n	411782 <__s2b+0x7e>
  411768:	ebc8 0707 	rsb	r7, r8, r7
  41176c:	4427      	add	r7, r4
  41176e:	f814 3b01 	ldrb.w	r3, [r4], #1
  411772:	4601      	mov	r1, r0
  411774:	220a      	movs	r2, #10
  411776:	4630      	mov	r0, r6
  411778:	3b30      	subs	r3, #48	; 0x30
  41177a:	f7ff ff81 	bl	411680 <__multadd>
  41177e:	42bc      	cmp	r4, r7
  411780:	d1f5      	bne.n	41176e <__s2b+0x6a>
  411782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411786:	340a      	adds	r4, #10
  411788:	f04f 0809 	mov.w	r8, #9
  41178c:	e7ea      	b.n	411764 <__s2b+0x60>
  41178e:	2100      	movs	r1, #0
  411790:	e7cd      	b.n	41172e <__s2b+0x2a>
  411792:	bf00      	nop
  411794:	38e38e39 	.word	0x38e38e39

00411798 <__hi0bits>:
  411798:	4b0f      	ldr	r3, [pc, #60]	; (4117d8 <__hi0bits+0x40>)
  41179a:	4003      	ands	r3, r0
  41179c:	b9b3      	cbnz	r3, 4117cc <__hi0bits+0x34>
  41179e:	0400      	lsls	r0, r0, #16
  4117a0:	2310      	movs	r3, #16
  4117a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4117a6:	d101      	bne.n	4117ac <__hi0bits+0x14>
  4117a8:	3308      	adds	r3, #8
  4117aa:	0200      	lsls	r0, r0, #8
  4117ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4117b0:	d101      	bne.n	4117b6 <__hi0bits+0x1e>
  4117b2:	3304      	adds	r3, #4
  4117b4:	0100      	lsls	r0, r0, #4
  4117b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4117ba:	d101      	bne.n	4117c0 <__hi0bits+0x28>
  4117bc:	3302      	adds	r3, #2
  4117be:	0080      	lsls	r0, r0, #2
  4117c0:	2800      	cmp	r0, #0
  4117c2:	db07      	blt.n	4117d4 <__hi0bits+0x3c>
  4117c4:	0042      	lsls	r2, r0, #1
  4117c6:	d403      	bmi.n	4117d0 <__hi0bits+0x38>
  4117c8:	2020      	movs	r0, #32
  4117ca:	4770      	bx	lr
  4117cc:	2300      	movs	r3, #0
  4117ce:	e7e8      	b.n	4117a2 <__hi0bits+0xa>
  4117d0:	1c58      	adds	r0, r3, #1
  4117d2:	4770      	bx	lr
  4117d4:	4618      	mov	r0, r3
  4117d6:	4770      	bx	lr
  4117d8:	ffff0000 	.word	0xffff0000

004117dc <__lo0bits>:
  4117dc:	6803      	ldr	r3, [r0, #0]
  4117de:	f013 0207 	ands.w	r2, r3, #7
  4117e2:	d008      	beq.n	4117f6 <__lo0bits+0x1a>
  4117e4:	07d9      	lsls	r1, r3, #31
  4117e6:	d422      	bmi.n	41182e <__lo0bits+0x52>
  4117e8:	079a      	lsls	r2, r3, #30
  4117ea:	d423      	bmi.n	411834 <__lo0bits+0x58>
  4117ec:	089b      	lsrs	r3, r3, #2
  4117ee:	2202      	movs	r2, #2
  4117f0:	6003      	str	r3, [r0, #0]
  4117f2:	4610      	mov	r0, r2
  4117f4:	4770      	bx	lr
  4117f6:	b299      	uxth	r1, r3
  4117f8:	b909      	cbnz	r1, 4117fe <__lo0bits+0x22>
  4117fa:	0c1b      	lsrs	r3, r3, #16
  4117fc:	2210      	movs	r2, #16
  4117fe:	f013 0fff 	tst.w	r3, #255	; 0xff
  411802:	d101      	bne.n	411808 <__lo0bits+0x2c>
  411804:	3208      	adds	r2, #8
  411806:	0a1b      	lsrs	r3, r3, #8
  411808:	0719      	lsls	r1, r3, #28
  41180a:	d101      	bne.n	411810 <__lo0bits+0x34>
  41180c:	3204      	adds	r2, #4
  41180e:	091b      	lsrs	r3, r3, #4
  411810:	0799      	lsls	r1, r3, #30
  411812:	d101      	bne.n	411818 <__lo0bits+0x3c>
  411814:	3202      	adds	r2, #2
  411816:	089b      	lsrs	r3, r3, #2
  411818:	07d9      	lsls	r1, r3, #31
  41181a:	d405      	bmi.n	411828 <__lo0bits+0x4c>
  41181c:	085b      	lsrs	r3, r3, #1
  41181e:	d102      	bne.n	411826 <__lo0bits+0x4a>
  411820:	2220      	movs	r2, #32
  411822:	4610      	mov	r0, r2
  411824:	4770      	bx	lr
  411826:	3201      	adds	r2, #1
  411828:	6003      	str	r3, [r0, #0]
  41182a:	4610      	mov	r0, r2
  41182c:	4770      	bx	lr
  41182e:	2200      	movs	r2, #0
  411830:	4610      	mov	r0, r2
  411832:	4770      	bx	lr
  411834:	085b      	lsrs	r3, r3, #1
  411836:	2201      	movs	r2, #1
  411838:	6003      	str	r3, [r0, #0]
  41183a:	4610      	mov	r0, r2
  41183c:	4770      	bx	lr
  41183e:	bf00      	nop

00411840 <__i2b>:
  411840:	b510      	push	{r4, lr}
  411842:	460c      	mov	r4, r1
  411844:	2101      	movs	r1, #1
  411846:	f7ff fee9 	bl	41161c <_Balloc>
  41184a:	2201      	movs	r2, #1
  41184c:	6144      	str	r4, [r0, #20]
  41184e:	6102      	str	r2, [r0, #16]
  411850:	bd10      	pop	{r4, pc}
  411852:	bf00      	nop

00411854 <__multiply>:
  411854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411858:	690e      	ldr	r6, [r1, #16]
  41185a:	b085      	sub	sp, #20
  41185c:	6915      	ldr	r5, [r2, #16]
  41185e:	460c      	mov	r4, r1
  411860:	4691      	mov	r9, r2
  411862:	42ae      	cmp	r6, r5
  411864:	f2c0 8094 	blt.w	411990 <__multiply+0x13c>
  411868:	462b      	mov	r3, r5
  41186a:	4635      	mov	r5, r6
  41186c:	461e      	mov	r6, r3
  41186e:	eb05 0806 	add.w	r8, r5, r6
  411872:	68a3      	ldr	r3, [r4, #8]
  411874:	6861      	ldr	r1, [r4, #4]
  411876:	4598      	cmp	r8, r3
  411878:	dd00      	ble.n	41187c <__multiply+0x28>
  41187a:	3101      	adds	r1, #1
  41187c:	f7ff fece 	bl	41161c <_Balloc>
  411880:	f100 0a14 	add.w	sl, r0, #20
  411884:	9001      	str	r0, [sp, #4]
  411886:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  41188a:	45da      	cmp	sl, fp
  41188c:	d205      	bcs.n	41189a <__multiply+0x46>
  41188e:	4653      	mov	r3, sl
  411890:	2100      	movs	r1, #0
  411892:	f843 1b04 	str.w	r1, [r3], #4
  411896:	459b      	cmp	fp, r3
  411898:	d8fb      	bhi.n	411892 <__multiply+0x3e>
  41189a:	f109 0914 	add.w	r9, r9, #20
  41189e:	f104 0314 	add.w	r3, r4, #20
  4118a2:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  4118a6:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  4118aa:	4591      	cmp	r9, r2
  4118ac:	d25b      	bcs.n	411966 <__multiply+0x112>
  4118ae:	f8cd b008 	str.w	fp, [sp, #8]
  4118b2:	4693      	mov	fp, r2
  4118b4:	f8cd 800c 	str.w	r8, [sp, #12]
  4118b8:	4698      	mov	r8, r3
  4118ba:	f859 6b04 	ldr.w	r6, [r9], #4
  4118be:	fa1f fe86 	uxth.w	lr, r6
  4118c2:	f1be 0f00 	cmp.w	lr, #0
  4118c6:	d021      	beq.n	41190c <__multiply+0xb8>
  4118c8:	4647      	mov	r7, r8
  4118ca:	4656      	mov	r6, sl
  4118cc:	2100      	movs	r1, #0
  4118ce:	e000      	b.n	4118d2 <__multiply+0x7e>
  4118d0:	4626      	mov	r6, r4
  4118d2:	f857 2b04 	ldr.w	r2, [r7], #4
  4118d6:	4634      	mov	r4, r6
  4118d8:	6835      	ldr	r5, [r6, #0]
  4118da:	b290      	uxth	r0, r2
  4118dc:	45bc      	cmp	ip, r7
  4118de:	b2ab      	uxth	r3, r5
  4118e0:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4118e4:	fb0e 3000 	mla	r0, lr, r0, r3
  4118e8:	ea4f 4315 	mov.w	r3, r5, lsr #16
  4118ec:	4401      	add	r1, r0
  4118ee:	fb0e 3302 	mla	r3, lr, r2, r3
  4118f2:	b28a      	uxth	r2, r1
  4118f4:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  4118f8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  4118fc:	ea4f 4111 	mov.w	r1, r1, lsr #16
  411900:	f844 3b04 	str.w	r3, [r4], #4
  411904:	d8e4      	bhi.n	4118d0 <__multiply+0x7c>
  411906:	6071      	str	r1, [r6, #4]
  411908:	f859 6c04 	ldr.w	r6, [r9, #-4]
  41190c:	0c36      	lsrs	r6, r6, #16
  41190e:	d022      	beq.n	411956 <__multiply+0x102>
  411910:	f8da 3000 	ldr.w	r3, [sl]
  411914:	2700      	movs	r7, #0
  411916:	4655      	mov	r5, sl
  411918:	4640      	mov	r0, r8
  41191a:	461a      	mov	r2, r3
  41191c:	46be      	mov	lr, r7
  41191e:	e000      	b.n	411922 <__multiply+0xce>
  411920:	4625      	mov	r5, r4
  411922:	8807      	ldrh	r7, [r0, #0]
  411924:	0c12      	lsrs	r2, r2, #16
  411926:	b299      	uxth	r1, r3
  411928:	462c      	mov	r4, r5
  41192a:	fb06 2207 	mla	r2, r6, r7, r2
  41192e:	eb02 070e 	add.w	r7, r2, lr
  411932:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  411936:	f844 3b04 	str.w	r3, [r4], #4
  41193a:	f850 1b04 	ldr.w	r1, [r0], #4
  41193e:	686a      	ldr	r2, [r5, #4]
  411940:	0c09      	lsrs	r1, r1, #16
  411942:	4584      	cmp	ip, r0
  411944:	b293      	uxth	r3, r2
  411946:	fb06 3101 	mla	r1, r6, r1, r3
  41194a:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  41194e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  411952:	d8e5      	bhi.n	411920 <__multiply+0xcc>
  411954:	606b      	str	r3, [r5, #4]
  411956:	45cb      	cmp	fp, r9
  411958:	f10a 0a04 	add.w	sl, sl, #4
  41195c:	d8ad      	bhi.n	4118ba <__multiply+0x66>
  41195e:	f8dd b008 	ldr.w	fp, [sp, #8]
  411962:	f8dd 800c 	ldr.w	r8, [sp, #12]
  411966:	f1b8 0f00 	cmp.w	r8, #0
  41196a:	dd0b      	ble.n	411984 <__multiply+0x130>
  41196c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  411970:	f1ab 0b04 	sub.w	fp, fp, #4
  411974:	b11b      	cbz	r3, 41197e <__multiply+0x12a>
  411976:	e005      	b.n	411984 <__multiply+0x130>
  411978:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  41197c:	b913      	cbnz	r3, 411984 <__multiply+0x130>
  41197e:	f1b8 0801 	subs.w	r8, r8, #1
  411982:	d1f9      	bne.n	411978 <__multiply+0x124>
  411984:	9801      	ldr	r0, [sp, #4]
  411986:	f8c0 8010 	str.w	r8, [r0, #16]
  41198a:	b005      	add	sp, #20
  41198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411990:	4614      	mov	r4, r2
  411992:	4689      	mov	r9, r1
  411994:	e76b      	b.n	41186e <__multiply+0x1a>
  411996:	bf00      	nop

00411998 <__pow5mult>:
  411998:	f012 0303 	ands.w	r3, r2, #3
  41199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4119a0:	4614      	mov	r4, r2
  4119a2:	4607      	mov	r7, r0
  4119a4:	460e      	mov	r6, r1
  4119a6:	d12d      	bne.n	411a04 <__pow5mult+0x6c>
  4119a8:	10a4      	asrs	r4, r4, #2
  4119aa:	d01c      	beq.n	4119e6 <__pow5mult+0x4e>
  4119ac:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4119ae:	b395      	cbz	r5, 411a16 <__pow5mult+0x7e>
  4119b0:	07e3      	lsls	r3, r4, #31
  4119b2:	f04f 0800 	mov.w	r8, #0
  4119b6:	d406      	bmi.n	4119c6 <__pow5mult+0x2e>
  4119b8:	1064      	asrs	r4, r4, #1
  4119ba:	d014      	beq.n	4119e6 <__pow5mult+0x4e>
  4119bc:	6828      	ldr	r0, [r5, #0]
  4119be:	b1a8      	cbz	r0, 4119ec <__pow5mult+0x54>
  4119c0:	4605      	mov	r5, r0
  4119c2:	07e3      	lsls	r3, r4, #31
  4119c4:	d5f8      	bpl.n	4119b8 <__pow5mult+0x20>
  4119c6:	4638      	mov	r0, r7
  4119c8:	4631      	mov	r1, r6
  4119ca:	462a      	mov	r2, r5
  4119cc:	f7ff ff42 	bl	411854 <__multiply>
  4119d0:	b1b6      	cbz	r6, 411a00 <__pow5mult+0x68>
  4119d2:	6872      	ldr	r2, [r6, #4]
  4119d4:	1064      	asrs	r4, r4, #1
  4119d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4119d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4119dc:	6031      	str	r1, [r6, #0]
  4119de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4119e2:	4606      	mov	r6, r0
  4119e4:	d1ea      	bne.n	4119bc <__pow5mult+0x24>
  4119e6:	4630      	mov	r0, r6
  4119e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4119ec:	4629      	mov	r1, r5
  4119ee:	462a      	mov	r2, r5
  4119f0:	4638      	mov	r0, r7
  4119f2:	f7ff ff2f 	bl	411854 <__multiply>
  4119f6:	6028      	str	r0, [r5, #0]
  4119f8:	f8c0 8000 	str.w	r8, [r0]
  4119fc:	4605      	mov	r5, r0
  4119fe:	e7e0      	b.n	4119c2 <__pow5mult+0x2a>
  411a00:	4606      	mov	r6, r0
  411a02:	e7d9      	b.n	4119b8 <__pow5mult+0x20>
  411a04:	1e5a      	subs	r2, r3, #1
  411a06:	4d0b      	ldr	r5, [pc, #44]	; (411a34 <__pow5mult+0x9c>)
  411a08:	2300      	movs	r3, #0
  411a0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  411a0e:	f7ff fe37 	bl	411680 <__multadd>
  411a12:	4606      	mov	r6, r0
  411a14:	e7c8      	b.n	4119a8 <__pow5mult+0x10>
  411a16:	2101      	movs	r1, #1
  411a18:	4638      	mov	r0, r7
  411a1a:	f7ff fdff 	bl	41161c <_Balloc>
  411a1e:	f240 2171 	movw	r1, #625	; 0x271
  411a22:	2201      	movs	r2, #1
  411a24:	2300      	movs	r3, #0
  411a26:	6141      	str	r1, [r0, #20]
  411a28:	4605      	mov	r5, r0
  411a2a:	6102      	str	r2, [r0, #16]
  411a2c:	64b8      	str	r0, [r7, #72]	; 0x48
  411a2e:	6003      	str	r3, [r0, #0]
  411a30:	e7be      	b.n	4119b0 <__pow5mult+0x18>
  411a32:	bf00      	nop
  411a34:	00414140 	.word	0x00414140

00411a38 <__lshift>:
  411a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  411a3c:	690e      	ldr	r6, [r1, #16]
  411a3e:	ea4f 1962 	mov.w	r9, r2, asr #5
  411a42:	688b      	ldr	r3, [r1, #8]
  411a44:	460d      	mov	r5, r1
  411a46:	444e      	add	r6, r9
  411a48:	4690      	mov	r8, r2
  411a4a:	4607      	mov	r7, r0
  411a4c:	6849      	ldr	r1, [r1, #4]
  411a4e:	1c74      	adds	r4, r6, #1
  411a50:	429c      	cmp	r4, r3
  411a52:	dd03      	ble.n	411a5c <__lshift+0x24>
  411a54:	005b      	lsls	r3, r3, #1
  411a56:	3101      	adds	r1, #1
  411a58:	429c      	cmp	r4, r3
  411a5a:	dcfb      	bgt.n	411a54 <__lshift+0x1c>
  411a5c:	4638      	mov	r0, r7
  411a5e:	f7ff fddd 	bl	41161c <_Balloc>
  411a62:	f1b9 0f00 	cmp.w	r9, #0
  411a66:	4684      	mov	ip, r0
  411a68:	f100 0114 	add.w	r1, r0, #20
  411a6c:	dd09      	ble.n	411a82 <__lshift+0x4a>
  411a6e:	2300      	movs	r3, #0
  411a70:	460a      	mov	r2, r1
  411a72:	4618      	mov	r0, r3
  411a74:	3301      	adds	r3, #1
  411a76:	f842 0b04 	str.w	r0, [r2], #4
  411a7a:	454b      	cmp	r3, r9
  411a7c:	d1fa      	bne.n	411a74 <__lshift+0x3c>
  411a7e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  411a82:	692a      	ldr	r2, [r5, #16]
  411a84:	f105 0314 	add.w	r3, r5, #20
  411a88:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  411a8c:	f018 021f 	ands.w	r2, r8, #31
  411a90:	d023      	beq.n	411ada <__lshift+0xa2>
  411a92:	f1c2 0920 	rsb	r9, r2, #32
  411a96:	f04f 0a00 	mov.w	sl, #0
  411a9a:	6818      	ldr	r0, [r3, #0]
  411a9c:	4688      	mov	r8, r1
  411a9e:	4090      	lsls	r0, r2
  411aa0:	ea4a 0000 	orr.w	r0, sl, r0
  411aa4:	f841 0b04 	str.w	r0, [r1], #4
  411aa8:	f853 0b04 	ldr.w	r0, [r3], #4
  411aac:	459e      	cmp	lr, r3
  411aae:	fa20 fa09 	lsr.w	sl, r0, r9
  411ab2:	d8f2      	bhi.n	411a9a <__lshift+0x62>
  411ab4:	f8c8 a004 	str.w	sl, [r8, #4]
  411ab8:	f1ba 0f00 	cmp.w	sl, #0
  411abc:	d000      	beq.n	411ac0 <__lshift+0x88>
  411abe:	1cb4      	adds	r4, r6, #2
  411ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  411ac2:	3c01      	subs	r4, #1
  411ac4:	686a      	ldr	r2, [r5, #4]
  411ac6:	4660      	mov	r0, ip
  411ac8:	f8cc 4010 	str.w	r4, [ip, #16]
  411acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  411ad0:	6029      	str	r1, [r5, #0]
  411ad2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  411ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411ada:	3904      	subs	r1, #4
  411adc:	f853 2b04 	ldr.w	r2, [r3], #4
  411ae0:	459e      	cmp	lr, r3
  411ae2:	f841 2f04 	str.w	r2, [r1, #4]!
  411ae6:	d8f9      	bhi.n	411adc <__lshift+0xa4>
  411ae8:	e7ea      	b.n	411ac0 <__lshift+0x88>
  411aea:	bf00      	nop

00411aec <__mcmp>:
  411aec:	6902      	ldr	r2, [r0, #16]
  411aee:	690b      	ldr	r3, [r1, #16]
  411af0:	1ad2      	subs	r2, r2, r3
  411af2:	d113      	bne.n	411b1c <__mcmp+0x30>
  411af4:	009a      	lsls	r2, r3, #2
  411af6:	3014      	adds	r0, #20
  411af8:	3114      	adds	r1, #20
  411afa:	1883      	adds	r3, r0, r2
  411afc:	4411      	add	r1, r2
  411afe:	b410      	push	{r4}
  411b00:	e001      	b.n	411b06 <__mcmp+0x1a>
  411b02:	4298      	cmp	r0, r3
  411b04:	d20c      	bcs.n	411b20 <__mcmp+0x34>
  411b06:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  411b0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  411b0e:	4294      	cmp	r4, r2
  411b10:	d0f7      	beq.n	411b02 <__mcmp+0x16>
  411b12:	d309      	bcc.n	411b28 <__mcmp+0x3c>
  411b14:	2001      	movs	r0, #1
  411b16:	f85d 4b04 	ldr.w	r4, [sp], #4
  411b1a:	4770      	bx	lr
  411b1c:	4610      	mov	r0, r2
  411b1e:	4770      	bx	lr
  411b20:	2000      	movs	r0, #0
  411b22:	f85d 4b04 	ldr.w	r4, [sp], #4
  411b26:	4770      	bx	lr
  411b28:	f04f 30ff 	mov.w	r0, #4294967295
  411b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  411b30:	4770      	bx	lr
  411b32:	bf00      	nop

00411b34 <__mdiff>:
  411b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411b38:	460c      	mov	r4, r1
  411b3a:	4605      	mov	r5, r0
  411b3c:	4611      	mov	r1, r2
  411b3e:	4617      	mov	r7, r2
  411b40:	4620      	mov	r0, r4
  411b42:	f7ff ffd3 	bl	411aec <__mcmp>
  411b46:	1e06      	subs	r6, r0, #0
  411b48:	d05c      	beq.n	411c04 <__mdiff+0xd0>
  411b4a:	db55      	blt.n	411bf8 <__mdiff+0xc4>
  411b4c:	f04f 0800 	mov.w	r8, #0
  411b50:	6861      	ldr	r1, [r4, #4]
  411b52:	4628      	mov	r0, r5
  411b54:	f7ff fd62 	bl	41161c <_Balloc>
  411b58:	f107 0514 	add.w	r5, r7, #20
  411b5c:	693b      	ldr	r3, [r7, #16]
  411b5e:	f104 0114 	add.w	r1, r4, #20
  411b62:	6926      	ldr	r6, [r4, #16]
  411b64:	4684      	mov	ip, r0
  411b66:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  411b6a:	f100 0414 	add.w	r4, r0, #20
  411b6e:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  411b72:	2300      	movs	r3, #0
  411b74:	f8c0 800c 	str.w	r8, [r0, #12]
  411b78:	f851 9b04 	ldr.w	r9, [r1], #4
  411b7c:	f855 2b04 	ldr.w	r2, [r5], #4
  411b80:	fa13 f889 	uxtah	r8, r3, r9
  411b84:	4608      	mov	r0, r1
  411b86:	b293      	uxth	r3, r2
  411b88:	45ae      	cmp	lr, r5
  411b8a:	ea4f 4212 	mov.w	r2, r2, lsr #16
  411b8e:	ebc3 0308 	rsb	r3, r3, r8
  411b92:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  411b96:	fa1f f883 	uxth.w	r8, r3
  411b9a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  411b9e:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  411ba2:	ea4f 4323 	mov.w	r3, r3, asr #16
  411ba6:	f844 2b04 	str.w	r2, [r4], #4
  411baa:	d8e5      	bhi.n	411b78 <__mdiff+0x44>
  411bac:	428f      	cmp	r7, r1
  411bae:	4625      	mov	r5, r4
  411bb0:	d916      	bls.n	411be0 <__mdiff+0xac>
  411bb2:	f850 2b04 	ldr.w	r2, [r0], #4
  411bb6:	fa13 f382 	uxtah	r3, r3, r2
  411bba:	0c12      	lsrs	r2, r2, #16
  411bbc:	4287      	cmp	r7, r0
  411bbe:	fa1f fe83 	uxth.w	lr, r3
  411bc2:	eb02 4323 	add.w	r3, r2, r3, asr #16
  411bc6:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  411bca:	ea4f 4323 	mov.w	r3, r3, asr #16
  411bce:	f844 2b04 	str.w	r2, [r4], #4
  411bd2:	d8ee      	bhi.n	411bb2 <__mdiff+0x7e>
  411bd4:	43c9      	mvns	r1, r1
  411bd6:	4439      	add	r1, r7
  411bd8:	f021 0403 	bic.w	r4, r1, #3
  411bdc:	3404      	adds	r4, #4
  411bde:	442c      	add	r4, r5
  411be0:	3c04      	subs	r4, #4
  411be2:	b922      	cbnz	r2, 411bee <__mdiff+0xba>
  411be4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  411be8:	3e01      	subs	r6, #1
  411bea:	2b00      	cmp	r3, #0
  411bec:	d0fa      	beq.n	411be4 <__mdiff+0xb0>
  411bee:	4660      	mov	r0, ip
  411bf0:	f8cc 6010 	str.w	r6, [ip, #16]
  411bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411bf8:	4623      	mov	r3, r4
  411bfa:	f04f 0801 	mov.w	r8, #1
  411bfe:	463c      	mov	r4, r7
  411c00:	461f      	mov	r7, r3
  411c02:	e7a5      	b.n	411b50 <__mdiff+0x1c>
  411c04:	4628      	mov	r0, r5
  411c06:	4631      	mov	r1, r6
  411c08:	f7ff fd08 	bl	41161c <_Balloc>
  411c0c:	2201      	movs	r2, #1
  411c0e:	4603      	mov	r3, r0
  411c10:	6146      	str	r6, [r0, #20]
  411c12:	611a      	str	r2, [r3, #16]
  411c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411c18 <__ulp>:
  411c18:	4b14      	ldr	r3, [pc, #80]	; (411c6c <__ulp+0x54>)
  411c1a:	ee10 2a90 	vmov	r2, s1
  411c1e:	401a      	ands	r2, r3
  411c20:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
  411c24:	2b00      	cmp	r3, #0
  411c26:	dd04      	ble.n	411c32 <__ulp+0x1a>
  411c28:	2000      	movs	r0, #0
  411c2a:	4619      	mov	r1, r3
  411c2c:	ec41 0b10 	vmov	d0, r0, r1
  411c30:	4770      	bx	lr
  411c32:	425b      	negs	r3, r3
  411c34:	151b      	asrs	r3, r3, #20
  411c36:	2b13      	cmp	r3, #19
  411c38:	dd0f      	ble.n	411c5a <__ulp+0x42>
  411c3a:	2b32      	cmp	r3, #50	; 0x32
  411c3c:	f04f 0100 	mov.w	r1, #0
  411c40:	dc08      	bgt.n	411c54 <__ulp+0x3c>
  411c42:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
  411c46:	2201      	movs	r2, #1
  411c48:	fa02 f303 	lsl.w	r3, r2, r3
  411c4c:	4618      	mov	r0, r3
  411c4e:	ec41 0b10 	vmov	d0, r0, r1
  411c52:	4770      	bx	lr
  411c54:	2301      	movs	r3, #1
  411c56:	4618      	mov	r0, r3
  411c58:	e7f9      	b.n	411c4e <__ulp+0x36>
  411c5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  411c5e:	2000      	movs	r0, #0
  411c60:	fa42 f103 	asr.w	r1, r2, r3
  411c64:	ec41 0b10 	vmov	d0, r0, r1
  411c68:	4770      	bx	lr
  411c6a:	bf00      	nop
  411c6c:	7ff00000 	.word	0x7ff00000

00411c70 <__b2d>:
  411c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411c74:	6904      	ldr	r4, [r0, #16]
  411c76:	f100 0814 	add.w	r8, r0, #20
  411c7a:	460e      	mov	r6, r1
  411c7c:	eb08 0484 	add.w	r4, r8, r4, lsl #2
  411c80:	f854 7c04 	ldr.w	r7, [r4, #-4]
  411c84:	1f25      	subs	r5, r4, #4
  411c86:	4638      	mov	r0, r7
  411c88:	f7ff fd86 	bl	411798 <__hi0bits>
  411c8c:	f1c0 0320 	rsb	r3, r0, #32
  411c90:	280a      	cmp	r0, #10
  411c92:	6033      	str	r3, [r6, #0]
  411c94:	dc14      	bgt.n	411cc0 <__b2d+0x50>
  411c96:	f1c0 060b 	rsb	r6, r0, #11
  411c9a:	45a8      	cmp	r8, r5
  411c9c:	fa27 f106 	lsr.w	r1, r7, r6
  411ca0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  411ca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411ca8:	d242      	bcs.n	411d30 <__b2d+0xc0>
  411caa:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411cae:	40f1      	lsrs	r1, r6
  411cb0:	3015      	adds	r0, #21
  411cb2:	4087      	lsls	r7, r0
  411cb4:	ea41 0207 	orr.w	r2, r1, r7
  411cb8:	ec43 2b10 	vmov	d0, r2, r3
  411cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411cc0:	45a8      	cmp	r8, r5
  411cc2:	d21f      	bcs.n	411d04 <__b2d+0x94>
  411cc4:	f1b0 0e0b 	subs.w	lr, r0, #11
  411cc8:	f1a4 0c08 	sub.w	ip, r4, #8
  411ccc:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411cd0:	d025      	beq.n	411d1e <__b2d+0xae>
  411cd2:	f1c0 062b 	rsb	r6, r0, #43	; 0x2b
  411cd6:	fa07 f70e 	lsl.w	r7, r7, lr
  411cda:	45e0      	cmp	r8, ip
  411cdc:	fa21 f506 	lsr.w	r5, r1, r6
  411ce0:	ea47 0705 	orr.w	r7, r7, r5
  411ce4:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411ce8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411cec:	d222      	bcs.n	411d34 <__b2d+0xc4>
  411cee:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  411cf2:	40f0      	lsrs	r0, r6
  411cf4:	fa01 f10e 	lsl.w	r1, r1, lr
  411cf8:	ea41 0200 	orr.w	r2, r1, r0
  411cfc:	ec43 2b10 	vmov	d0, r2, r3
  411d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411d04:	f1b0 0e0b 	subs.w	lr, r0, #11
  411d08:	d008      	beq.n	411d1c <__b2d+0xac>
  411d0a:	fa07 f70e 	lsl.w	r7, r7, lr
  411d0e:	2000      	movs	r0, #0
  411d10:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411d14:	4601      	mov	r1, r0
  411d16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411d1a:	e7eb      	b.n	411cf4 <__b2d+0x84>
  411d1c:	4671      	mov	r1, lr
  411d1e:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411d22:	460a      	mov	r2, r1
  411d24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411d28:	ec43 2b10 	vmov	d0, r2, r3
  411d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411d30:	2100      	movs	r1, #0
  411d32:	e7bd      	b.n	411cb0 <__b2d+0x40>
  411d34:	2000      	movs	r0, #0
  411d36:	e7dd      	b.n	411cf4 <__b2d+0x84>

00411d38 <__d2b>:
  411d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411d3c:	ec57 6b10 	vmov	r6, r7, d0
  411d40:	463c      	mov	r4, r7
  411d42:	b083      	sub	sp, #12
  411d44:	4688      	mov	r8, r1
  411d46:	2101      	movs	r1, #1
  411d48:	f3c4 550a 	ubfx	r5, r4, #20, #11
  411d4c:	4617      	mov	r7, r2
  411d4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  411d52:	f7ff fc63 	bl	41161c <_Balloc>
  411d56:	4681      	mov	r9, r0
  411d58:	b10d      	cbz	r5, 411d5e <__d2b+0x26>
  411d5a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  411d5e:	9401      	str	r4, [sp, #4]
  411d60:	b31e      	cbz	r6, 411daa <__d2b+0x72>
  411d62:	a802      	add	r0, sp, #8
  411d64:	f840 6d08 	str.w	r6, [r0, #-8]!
  411d68:	f7ff fd38 	bl	4117dc <__lo0bits>
  411d6c:	2800      	cmp	r0, #0
  411d6e:	d135      	bne.n	411ddc <__d2b+0xa4>
  411d70:	e89d 000c 	ldmia.w	sp, {r2, r3}
  411d74:	f8c9 2014 	str.w	r2, [r9, #20]
  411d78:	2b00      	cmp	r3, #0
  411d7a:	f8c9 3018 	str.w	r3, [r9, #24]
  411d7e:	bf14      	ite	ne
  411d80:	2402      	movne	r4, #2
  411d82:	2401      	moveq	r4, #1
  411d84:	f8c9 4010 	str.w	r4, [r9, #16]
  411d88:	b9e5      	cbnz	r5, 411dc4 <__d2b+0x8c>
  411d8a:	eb09 0384 	add.w	r3, r9, r4, lsl #2
  411d8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  411d92:	f8c8 0000 	str.w	r0, [r8]
  411d96:	6918      	ldr	r0, [r3, #16]
  411d98:	f7ff fcfe 	bl	411798 <__hi0bits>
  411d9c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  411da0:	6038      	str	r0, [r7, #0]
  411da2:	4648      	mov	r0, r9
  411da4:	b003      	add	sp, #12
  411da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411daa:	a801      	add	r0, sp, #4
  411dac:	f7ff fd16 	bl	4117dc <__lo0bits>
  411db0:	2301      	movs	r3, #1
  411db2:	9a01      	ldr	r2, [sp, #4]
  411db4:	3020      	adds	r0, #32
  411db6:	461c      	mov	r4, r3
  411db8:	f8c9 3010 	str.w	r3, [r9, #16]
  411dbc:	f8c9 2014 	str.w	r2, [r9, #20]
  411dc0:	2d00      	cmp	r5, #0
  411dc2:	d0e2      	beq.n	411d8a <__d2b+0x52>
  411dc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
  411dc8:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  411dcc:	4428      	add	r0, r5
  411dce:	f8c8 0000 	str.w	r0, [r8]
  411dd2:	4648      	mov	r0, r9
  411dd4:	603b      	str	r3, [r7, #0]
  411dd6:	b003      	add	sp, #12
  411dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411ddc:	9b01      	ldr	r3, [sp, #4]
  411dde:	f1c0 0120 	rsb	r1, r0, #32
  411de2:	9a00      	ldr	r2, [sp, #0]
  411de4:	fa03 f101 	lsl.w	r1, r3, r1
  411de8:	40c3      	lsrs	r3, r0
  411dea:	430a      	orrs	r2, r1
  411dec:	9301      	str	r3, [sp, #4]
  411dee:	f8c9 2014 	str.w	r2, [r9, #20]
  411df2:	e7c1      	b.n	411d78 <__d2b+0x40>

00411df4 <__ratio>:
  411df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411df8:	b083      	sub	sp, #12
  411dfa:	4688      	mov	r8, r1
  411dfc:	4681      	mov	r9, r0
  411dfe:	4669      	mov	r1, sp
  411e00:	f7ff ff36 	bl	411c70 <__b2d>
  411e04:	4640      	mov	r0, r8
  411e06:	a901      	add	r1, sp, #4
  411e08:	ec55 4b10 	vmov	r4, r5, d0
  411e0c:	f7ff ff30 	bl	411c70 <__b2d>
  411e10:	f8d9 2010 	ldr.w	r2, [r9, #16]
  411e14:	f8d8 3010 	ldr.w	r3, [r8, #16]
  411e18:	ebc3 0e02 	rsb	lr, r3, r2
  411e1c:	9b00      	ldr	r3, [sp, #0]
  411e1e:	9a01      	ldr	r2, [sp, #4]
  411e20:	1a9b      	subs	r3, r3, r2
  411e22:	eb03 134e 	add.w	r3, r3, lr, lsl #5
  411e26:	2b00      	cmp	r3, #0
  411e28:	ec57 6b10 	vmov	r6, r7, d0
  411e2c:	dd0d      	ble.n	411e4a <__ratio+0x56>
  411e2e:	eb05 5103 	add.w	r1, r5, r3, lsl #20
  411e32:	460d      	mov	r5, r1
  411e34:	4620      	mov	r0, r4
  411e36:	4629      	mov	r1, r5
  411e38:	4632      	mov	r2, r6
  411e3a:	463b      	mov	r3, r7
  411e3c:	f7f9 f884 	bl	40af48 <__aeabi_ddiv>
  411e40:	ec41 0b10 	vmov	d0, r0, r1
  411e44:	b003      	add	sp, #12
  411e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411e4a:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
  411e4e:	ee10 6a10 	vmov	r6, s0
  411e52:	464f      	mov	r7, r9
  411e54:	e7ee      	b.n	411e34 <__ratio+0x40>
  411e56:	bf00      	nop

00411e58 <__copybits>:
  411e58:	b470      	push	{r4, r5, r6}
  411e5a:	f102 0314 	add.w	r3, r2, #20
  411e5e:	3901      	subs	r1, #1
  411e60:	6914      	ldr	r4, [r2, #16]
  411e62:	114e      	asrs	r6, r1, #5
  411e64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  411e68:	3601      	adds	r6, #1
  411e6a:	42a3      	cmp	r3, r4
  411e6c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  411e70:	d20c      	bcs.n	411e8c <__copybits+0x34>
  411e72:	1f01      	subs	r1, r0, #4
  411e74:	f853 5b04 	ldr.w	r5, [r3], #4
  411e78:	429c      	cmp	r4, r3
  411e7a:	f841 5f04 	str.w	r5, [r1, #4]!
  411e7e:	d8f9      	bhi.n	411e74 <__copybits+0x1c>
  411e80:	1aa3      	subs	r3, r4, r2
  411e82:	3b15      	subs	r3, #21
  411e84:	f023 0303 	bic.w	r3, r3, #3
  411e88:	3304      	adds	r3, #4
  411e8a:	4418      	add	r0, r3
  411e8c:	4286      	cmp	r6, r0
  411e8e:	d904      	bls.n	411e9a <__copybits+0x42>
  411e90:	2300      	movs	r3, #0
  411e92:	f840 3b04 	str.w	r3, [r0], #4
  411e96:	4286      	cmp	r6, r0
  411e98:	d8fb      	bhi.n	411e92 <__copybits+0x3a>
  411e9a:	bc70      	pop	{r4, r5, r6}
  411e9c:	4770      	bx	lr
  411e9e:	bf00      	nop

00411ea0 <__any_on>:
  411ea0:	6903      	ldr	r3, [r0, #16]
  411ea2:	114a      	asrs	r2, r1, #5
  411ea4:	4293      	cmp	r3, r2
  411ea6:	b410      	push	{r4}
  411ea8:	f100 0414 	add.w	r4, r0, #20
  411eac:	da10      	bge.n	411ed0 <__any_on+0x30>
  411eae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  411eb2:	429c      	cmp	r4, r3
  411eb4:	d220      	bcs.n	411ef8 <__any_on+0x58>
  411eb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
  411eba:	3b04      	subs	r3, #4
  411ebc:	b118      	cbz	r0, 411ec6 <__any_on+0x26>
  411ebe:	e014      	b.n	411eea <__any_on+0x4a>
  411ec0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  411ec4:	b98a      	cbnz	r2, 411eea <__any_on+0x4a>
  411ec6:	429c      	cmp	r4, r3
  411ec8:	d3fa      	bcc.n	411ec0 <__any_on+0x20>
  411eca:	f85d 4b04 	ldr.w	r4, [sp], #4
  411ece:	4770      	bx	lr
  411ed0:	dd0f      	ble.n	411ef2 <__any_on+0x52>
  411ed2:	f011 011f 	ands.w	r1, r1, #31
  411ed6:	d00c      	beq.n	411ef2 <__any_on+0x52>
  411ed8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  411edc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  411ee0:	fa20 f201 	lsr.w	r2, r0, r1
  411ee4:	408a      	lsls	r2, r1
  411ee6:	4282      	cmp	r2, r0
  411ee8:	d0e3      	beq.n	411eb2 <__any_on+0x12>
  411eea:	2001      	movs	r0, #1
  411eec:	f85d 4b04 	ldr.w	r4, [sp], #4
  411ef0:	4770      	bx	lr
  411ef2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  411ef6:	e7dc      	b.n	411eb2 <__any_on+0x12>
  411ef8:	2000      	movs	r0, #0
  411efa:	e7e6      	b.n	411eca <__any_on+0x2a>

00411efc <_realloc_r>:
  411efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411f00:	4617      	mov	r7, r2
  411f02:	b083      	sub	sp, #12
  411f04:	460e      	mov	r6, r1
  411f06:	2900      	cmp	r1, #0
  411f08:	f000 80e2 	beq.w	4120d0 <_realloc_r+0x1d4>
  411f0c:	f107 040b 	add.w	r4, r7, #11
  411f10:	4681      	mov	r9, r0
  411f12:	f7f9 fe1b 	bl	40bb4c <__malloc_lock>
  411f16:	f856 3c04 	ldr.w	r3, [r6, #-4]
  411f1a:	2c16      	cmp	r4, #22
  411f1c:	f1a6 0808 	sub.w	r8, r6, #8
  411f20:	f023 0503 	bic.w	r5, r3, #3
  411f24:	d850      	bhi.n	411fc8 <_realloc_r+0xcc>
  411f26:	2210      	movs	r2, #16
  411f28:	2100      	movs	r1, #0
  411f2a:	4614      	mov	r4, r2
  411f2c:	42bc      	cmp	r4, r7
  411f2e:	f0c0 80dc 	bcc.w	4120ea <_realloc_r+0x1ee>
  411f32:	2900      	cmp	r1, #0
  411f34:	f040 80d9 	bne.w	4120ea <_realloc_r+0x1ee>
  411f38:	4295      	cmp	r5, r2
  411f3a:	da4a      	bge.n	411fd2 <_realloc_r+0xd6>
  411f3c:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 4122e8 <_realloc_r+0x3ec>
  411f40:	eb08 0105 	add.w	r1, r8, r5
  411f44:	f8db 0008 	ldr.w	r0, [fp, #8]
  411f48:	4288      	cmp	r0, r1
  411f4a:	f000 80d3 	beq.w	4120f4 <_realloc_r+0x1f8>
  411f4e:	6848      	ldr	r0, [r1, #4]
  411f50:	f020 0e01 	bic.w	lr, r0, #1
  411f54:	448e      	add	lr, r1
  411f56:	f8de e004 	ldr.w	lr, [lr, #4]
  411f5a:	f01e 0f01 	tst.w	lr, #1
  411f5e:	d14e      	bne.n	411ffe <_realloc_r+0x102>
  411f60:	f020 0003 	bic.w	r0, r0, #3
  411f64:	4428      	add	r0, r5
  411f66:	4290      	cmp	r0, r2
  411f68:	f280 80b8 	bge.w	4120dc <_realloc_r+0x1e0>
  411f6c:	07db      	lsls	r3, r3, #31
  411f6e:	f100 808b 	bmi.w	412088 <_realloc_r+0x18c>
  411f72:	f856 3c08 	ldr.w	r3, [r6, #-8]
  411f76:	ebc3 0a08 	rsb	sl, r3, r8
  411f7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  411f7e:	f023 0303 	bic.w	r3, r3, #3
  411f82:	eb00 0e03 	add.w	lr, r0, r3
  411f86:	4596      	cmp	lr, r2
  411f88:	db43      	blt.n	412012 <_realloc_r+0x116>
  411f8a:	68cb      	ldr	r3, [r1, #12]
  411f8c:	4657      	mov	r7, sl
  411f8e:	6889      	ldr	r1, [r1, #8]
  411f90:	1f2a      	subs	r2, r5, #4
  411f92:	60cb      	str	r3, [r1, #12]
  411f94:	2a24      	cmp	r2, #36	; 0x24
  411f96:	6099      	str	r1, [r3, #8]
  411f98:	f857 1f08 	ldr.w	r1, [r7, #8]!
  411f9c:	f8da 300c 	ldr.w	r3, [sl, #12]
  411fa0:	60cb      	str	r3, [r1, #12]
  411fa2:	6099      	str	r1, [r3, #8]
  411fa4:	f200 813c 	bhi.w	412220 <_realloc_r+0x324>
  411fa8:	2a13      	cmp	r2, #19
  411faa:	f240 80fa 	bls.w	4121a2 <_realloc_r+0x2a6>
  411fae:	6833      	ldr	r3, [r6, #0]
  411fb0:	2a1b      	cmp	r2, #27
  411fb2:	f8ca 3008 	str.w	r3, [sl, #8]
  411fb6:	6873      	ldr	r3, [r6, #4]
  411fb8:	f8ca 300c 	str.w	r3, [sl, #12]
  411fbc:	f200 813b 	bhi.w	412236 <_realloc_r+0x33a>
  411fc0:	3608      	adds	r6, #8
  411fc2:	f10a 0310 	add.w	r3, sl, #16
  411fc6:	e0ed      	b.n	4121a4 <_realloc_r+0x2a8>
  411fc8:	f024 0407 	bic.w	r4, r4, #7
  411fcc:	4622      	mov	r2, r4
  411fce:	0fe1      	lsrs	r1, r4, #31
  411fd0:	e7ac      	b.n	411f2c <_realloc_r+0x30>
  411fd2:	4637      	mov	r7, r6
  411fd4:	1b2a      	subs	r2, r5, r4
  411fd6:	f003 0301 	and.w	r3, r3, #1
  411fda:	2a0f      	cmp	r2, #15
  411fdc:	d841      	bhi.n	412062 <_realloc_r+0x166>
  411fde:	eb08 0205 	add.w	r2, r8, r5
  411fe2:	431d      	orrs	r5, r3
  411fe4:	f8c8 5004 	str.w	r5, [r8, #4]
  411fe8:	6853      	ldr	r3, [r2, #4]
  411fea:	f043 0301 	orr.w	r3, r3, #1
  411fee:	6053      	str	r3, [r2, #4]
  411ff0:	4648      	mov	r0, r9
  411ff2:	f7f9 fdad 	bl	40bb50 <__malloc_unlock>
  411ff6:	4638      	mov	r0, r7
  411ff8:	b003      	add	sp, #12
  411ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411ffe:	07d9      	lsls	r1, r3, #31
  412000:	d442      	bmi.n	412088 <_realloc_r+0x18c>
  412002:	f856 3c08 	ldr.w	r3, [r6, #-8]
  412006:	ebc3 0a08 	rsb	sl, r3, r8
  41200a:	f8da 3004 	ldr.w	r3, [sl, #4]
  41200e:	f023 0303 	bic.w	r3, r3, #3
  412012:	442b      	add	r3, r5
  412014:	4293      	cmp	r3, r2
  412016:	db37      	blt.n	412088 <_realloc_r+0x18c>
  412018:	4657      	mov	r7, sl
  41201a:	1f2a      	subs	r2, r5, #4
  41201c:	f8da 100c 	ldr.w	r1, [sl, #12]
  412020:	f857 0f08 	ldr.w	r0, [r7, #8]!
  412024:	2a24      	cmp	r2, #36	; 0x24
  412026:	60c1      	str	r1, [r0, #12]
  412028:	6088      	str	r0, [r1, #8]
  41202a:	f200 80c6 	bhi.w	4121ba <_realloc_r+0x2be>
  41202e:	2a13      	cmp	r2, #19
  412030:	f240 80ff 	bls.w	412232 <_realloc_r+0x336>
  412034:	6831      	ldr	r1, [r6, #0]
  412036:	2a1b      	cmp	r2, #27
  412038:	f8ca 1008 	str.w	r1, [sl, #8]
  41203c:	6871      	ldr	r1, [r6, #4]
  41203e:	f8ca 100c 	str.w	r1, [sl, #12]
  412042:	f200 810d 	bhi.w	412260 <_realloc_r+0x364>
  412046:	3608      	adds	r6, #8
  412048:	f10a 0210 	add.w	r2, sl, #16
  41204c:	6831      	ldr	r1, [r6, #0]
  41204e:	461d      	mov	r5, r3
  412050:	46d0      	mov	r8, sl
  412052:	6011      	str	r1, [r2, #0]
  412054:	6873      	ldr	r3, [r6, #4]
  412056:	6053      	str	r3, [r2, #4]
  412058:	68b3      	ldr	r3, [r6, #8]
  41205a:	6093      	str	r3, [r2, #8]
  41205c:	f8da 3004 	ldr.w	r3, [sl, #4]
  412060:	e7b8      	b.n	411fd4 <_realloc_r+0xd8>
  412062:	eb08 0504 	add.w	r5, r8, r4
  412066:	f042 0601 	orr.w	r6, r2, #1
  41206a:	431c      	orrs	r4, r3
  41206c:	4648      	mov	r0, r9
  41206e:	442a      	add	r2, r5
  412070:	f105 0108 	add.w	r1, r5, #8
  412074:	f8c8 4004 	str.w	r4, [r8, #4]
  412078:	606e      	str	r6, [r5, #4]
  41207a:	6853      	ldr	r3, [r2, #4]
  41207c:	f043 0301 	orr.w	r3, r3, #1
  412080:	6053      	str	r3, [r2, #4]
  412082:	f7fe fb73 	bl	41076c <_free_r>
  412086:	e7b3      	b.n	411ff0 <_realloc_r+0xf4>
  412088:	4639      	mov	r1, r7
  41208a:	4648      	mov	r0, r9
  41208c:	f7f9 f9c8 	bl	40b420 <_malloc_r>
  412090:	4607      	mov	r7, r0
  412092:	2800      	cmp	r0, #0
  412094:	d0ac      	beq.n	411ff0 <_realloc_r+0xf4>
  412096:	f856 3c04 	ldr.w	r3, [r6, #-4]
  41209a:	f1a0 0108 	sub.w	r1, r0, #8
  41209e:	f023 0201 	bic.w	r2, r3, #1
  4120a2:	4442      	add	r2, r8
  4120a4:	4291      	cmp	r1, r2
  4120a6:	f000 80b4 	beq.w	412212 <_realloc_r+0x316>
  4120aa:	1f2a      	subs	r2, r5, #4
  4120ac:	2a24      	cmp	r2, #36	; 0x24
  4120ae:	f200 80a1 	bhi.w	4121f4 <_realloc_r+0x2f8>
  4120b2:	2a13      	cmp	r2, #19
  4120b4:	d86a      	bhi.n	41218c <_realloc_r+0x290>
  4120b6:	4603      	mov	r3, r0
  4120b8:	4632      	mov	r2, r6
  4120ba:	6811      	ldr	r1, [r2, #0]
  4120bc:	6019      	str	r1, [r3, #0]
  4120be:	6851      	ldr	r1, [r2, #4]
  4120c0:	6059      	str	r1, [r3, #4]
  4120c2:	6892      	ldr	r2, [r2, #8]
  4120c4:	609a      	str	r2, [r3, #8]
  4120c6:	4631      	mov	r1, r6
  4120c8:	4648      	mov	r0, r9
  4120ca:	f7fe fb4f 	bl	41076c <_free_r>
  4120ce:	e78f      	b.n	411ff0 <_realloc_r+0xf4>
  4120d0:	4611      	mov	r1, r2
  4120d2:	b003      	add	sp, #12
  4120d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4120d8:	f7f9 b9a2 	b.w	40b420 <_malloc_r>
  4120dc:	68ca      	ldr	r2, [r1, #12]
  4120de:	4637      	mov	r7, r6
  4120e0:	6889      	ldr	r1, [r1, #8]
  4120e2:	4605      	mov	r5, r0
  4120e4:	60ca      	str	r2, [r1, #12]
  4120e6:	6091      	str	r1, [r2, #8]
  4120e8:	e774      	b.n	411fd4 <_realloc_r+0xd8>
  4120ea:	230c      	movs	r3, #12
  4120ec:	2000      	movs	r0, #0
  4120ee:	f8c9 3000 	str.w	r3, [r9]
  4120f2:	e781      	b.n	411ff8 <_realloc_r+0xfc>
  4120f4:	6841      	ldr	r1, [r0, #4]
  4120f6:	f104 0010 	add.w	r0, r4, #16
  4120fa:	f021 0103 	bic.w	r1, r1, #3
  4120fe:	4429      	add	r1, r5
  412100:	4281      	cmp	r1, r0
  412102:	da63      	bge.n	4121cc <_realloc_r+0x2d0>
  412104:	07db      	lsls	r3, r3, #31
  412106:	d4bf      	bmi.n	412088 <_realloc_r+0x18c>
  412108:	f856 3c08 	ldr.w	r3, [r6, #-8]
  41210c:	ebc3 0a08 	rsb	sl, r3, r8
  412110:	f8da 3004 	ldr.w	r3, [sl, #4]
  412114:	f023 0303 	bic.w	r3, r3, #3
  412118:	eb01 0c03 	add.w	ip, r1, r3
  41211c:	4560      	cmp	r0, ip
  41211e:	f73f af78 	bgt.w	412012 <_realloc_r+0x116>
  412122:	4657      	mov	r7, sl
  412124:	1f2a      	subs	r2, r5, #4
  412126:	f8da 300c 	ldr.w	r3, [sl, #12]
  41212a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  41212e:	2a24      	cmp	r2, #36	; 0x24
  412130:	60cb      	str	r3, [r1, #12]
  412132:	6099      	str	r1, [r3, #8]
  412134:	f200 80b8 	bhi.w	4122a8 <_realloc_r+0x3ac>
  412138:	2a13      	cmp	r2, #19
  41213a:	f240 80a8 	bls.w	41228e <_realloc_r+0x392>
  41213e:	6833      	ldr	r3, [r6, #0]
  412140:	2a1b      	cmp	r2, #27
  412142:	f8ca 3008 	str.w	r3, [sl, #8]
  412146:	6873      	ldr	r3, [r6, #4]
  412148:	f8ca 300c 	str.w	r3, [sl, #12]
  41214c:	f200 80b5 	bhi.w	4122ba <_realloc_r+0x3be>
  412150:	3608      	adds	r6, #8
  412152:	f10a 0310 	add.w	r3, sl, #16
  412156:	6832      	ldr	r2, [r6, #0]
  412158:	601a      	str	r2, [r3, #0]
  41215a:	6872      	ldr	r2, [r6, #4]
  41215c:	605a      	str	r2, [r3, #4]
  41215e:	68b2      	ldr	r2, [r6, #8]
  412160:	609a      	str	r2, [r3, #8]
  412162:	ebc4 030c 	rsb	r3, r4, ip
  412166:	eb0a 0204 	add.w	r2, sl, r4
  41216a:	4648      	mov	r0, r9
  41216c:	f043 0301 	orr.w	r3, r3, #1
  412170:	f8cb 2008 	str.w	r2, [fp, #8]
  412174:	6053      	str	r3, [r2, #4]
  412176:	f8da 3004 	ldr.w	r3, [sl, #4]
  41217a:	f003 0301 	and.w	r3, r3, #1
  41217e:	431c      	orrs	r4, r3
  412180:	f8ca 4004 	str.w	r4, [sl, #4]
  412184:	f7f9 fce4 	bl	40bb50 <__malloc_unlock>
  412188:	4638      	mov	r0, r7
  41218a:	e735      	b.n	411ff8 <_realloc_r+0xfc>
  41218c:	6833      	ldr	r3, [r6, #0]
  41218e:	2a1b      	cmp	r2, #27
  412190:	6003      	str	r3, [r0, #0]
  412192:	6873      	ldr	r3, [r6, #4]
  412194:	6043      	str	r3, [r0, #4]
  412196:	d831      	bhi.n	4121fc <_realloc_r+0x300>
  412198:	f100 0308 	add.w	r3, r0, #8
  41219c:	f106 0208 	add.w	r2, r6, #8
  4121a0:	e78b      	b.n	4120ba <_realloc_r+0x1be>
  4121a2:	463b      	mov	r3, r7
  4121a4:	6832      	ldr	r2, [r6, #0]
  4121a6:	4675      	mov	r5, lr
  4121a8:	46d0      	mov	r8, sl
  4121aa:	601a      	str	r2, [r3, #0]
  4121ac:	6872      	ldr	r2, [r6, #4]
  4121ae:	605a      	str	r2, [r3, #4]
  4121b0:	68b2      	ldr	r2, [r6, #8]
  4121b2:	609a      	str	r2, [r3, #8]
  4121b4:	f8da 3004 	ldr.w	r3, [sl, #4]
  4121b8:	e70c      	b.n	411fd4 <_realloc_r+0xd8>
  4121ba:	4631      	mov	r1, r6
  4121bc:	4638      	mov	r0, r7
  4121be:	461d      	mov	r5, r3
  4121c0:	46d0      	mov	r8, sl
  4121c2:	f7ff f9c9 	bl	411558 <memmove>
  4121c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4121ca:	e703      	b.n	411fd4 <_realloc_r+0xd8>
  4121cc:	1b0b      	subs	r3, r1, r4
  4121ce:	eb08 0204 	add.w	r2, r8, r4
  4121d2:	4648      	mov	r0, r9
  4121d4:	f043 0301 	orr.w	r3, r3, #1
  4121d8:	f8cb 2008 	str.w	r2, [fp, #8]
  4121dc:	6053      	str	r3, [r2, #4]
  4121de:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4121e2:	f003 0301 	and.w	r3, r3, #1
  4121e6:	431c      	orrs	r4, r3
  4121e8:	f846 4c04 	str.w	r4, [r6, #-4]
  4121ec:	f7f9 fcb0 	bl	40bb50 <__malloc_unlock>
  4121f0:	4630      	mov	r0, r6
  4121f2:	e701      	b.n	411ff8 <_realloc_r+0xfc>
  4121f4:	4631      	mov	r1, r6
  4121f6:	f7ff f9af 	bl	411558 <memmove>
  4121fa:	e764      	b.n	4120c6 <_realloc_r+0x1ca>
  4121fc:	68b3      	ldr	r3, [r6, #8]
  4121fe:	2a24      	cmp	r2, #36	; 0x24
  412200:	6083      	str	r3, [r0, #8]
  412202:	68f3      	ldr	r3, [r6, #12]
  412204:	60c3      	str	r3, [r0, #12]
  412206:	d022      	beq.n	41224e <_realloc_r+0x352>
  412208:	f100 0310 	add.w	r3, r0, #16
  41220c:	f106 0210 	add.w	r2, r6, #16
  412210:	e753      	b.n	4120ba <_realloc_r+0x1be>
  412212:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412216:	4637      	mov	r7, r6
  412218:	f022 0203 	bic.w	r2, r2, #3
  41221c:	4415      	add	r5, r2
  41221e:	e6d9      	b.n	411fd4 <_realloc_r+0xd8>
  412220:	4631      	mov	r1, r6
  412222:	4638      	mov	r0, r7
  412224:	4675      	mov	r5, lr
  412226:	46d0      	mov	r8, sl
  412228:	f7ff f996 	bl	411558 <memmove>
  41222c:	f8da 3004 	ldr.w	r3, [sl, #4]
  412230:	e6d0      	b.n	411fd4 <_realloc_r+0xd8>
  412232:	463a      	mov	r2, r7
  412234:	e70a      	b.n	41204c <_realloc_r+0x150>
  412236:	68b3      	ldr	r3, [r6, #8]
  412238:	2a24      	cmp	r2, #36	; 0x24
  41223a:	f8ca 3010 	str.w	r3, [sl, #16]
  41223e:	68f3      	ldr	r3, [r6, #12]
  412240:	f8ca 3014 	str.w	r3, [sl, #20]
  412244:	d018      	beq.n	412278 <_realloc_r+0x37c>
  412246:	3610      	adds	r6, #16
  412248:	f10a 0318 	add.w	r3, sl, #24
  41224c:	e7aa      	b.n	4121a4 <_realloc_r+0x2a8>
  41224e:	6931      	ldr	r1, [r6, #16]
  412250:	f100 0318 	add.w	r3, r0, #24
  412254:	f106 0218 	add.w	r2, r6, #24
  412258:	6101      	str	r1, [r0, #16]
  41225a:	6971      	ldr	r1, [r6, #20]
  41225c:	6141      	str	r1, [r0, #20]
  41225e:	e72c      	b.n	4120ba <_realloc_r+0x1be>
  412260:	68b1      	ldr	r1, [r6, #8]
  412262:	2a24      	cmp	r2, #36	; 0x24
  412264:	f8ca 1010 	str.w	r1, [sl, #16]
  412268:	68f1      	ldr	r1, [r6, #12]
  41226a:	f8ca 1014 	str.w	r1, [sl, #20]
  41226e:	d010      	beq.n	412292 <_realloc_r+0x396>
  412270:	3610      	adds	r6, #16
  412272:	f10a 0218 	add.w	r2, sl, #24
  412276:	e6e9      	b.n	41204c <_realloc_r+0x150>
  412278:	6932      	ldr	r2, [r6, #16]
  41227a:	f10a 0320 	add.w	r3, sl, #32
  41227e:	3618      	adds	r6, #24
  412280:	f8ca 2018 	str.w	r2, [sl, #24]
  412284:	f856 2c04 	ldr.w	r2, [r6, #-4]
  412288:	f8ca 201c 	str.w	r2, [sl, #28]
  41228c:	e78a      	b.n	4121a4 <_realloc_r+0x2a8>
  41228e:	463b      	mov	r3, r7
  412290:	e761      	b.n	412156 <_realloc_r+0x25a>
  412292:	6931      	ldr	r1, [r6, #16]
  412294:	f10a 0220 	add.w	r2, sl, #32
  412298:	3618      	adds	r6, #24
  41229a:	f8ca 1018 	str.w	r1, [sl, #24]
  41229e:	f856 1c04 	ldr.w	r1, [r6, #-4]
  4122a2:	f8ca 101c 	str.w	r1, [sl, #28]
  4122a6:	e6d1      	b.n	41204c <_realloc_r+0x150>
  4122a8:	4631      	mov	r1, r6
  4122aa:	4638      	mov	r0, r7
  4122ac:	f8cd c004 	str.w	ip, [sp, #4]
  4122b0:	f7ff f952 	bl	411558 <memmove>
  4122b4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4122b8:	e753      	b.n	412162 <_realloc_r+0x266>
  4122ba:	68b3      	ldr	r3, [r6, #8]
  4122bc:	2a24      	cmp	r2, #36	; 0x24
  4122be:	f8ca 3010 	str.w	r3, [sl, #16]
  4122c2:	68f3      	ldr	r3, [r6, #12]
  4122c4:	f8ca 3014 	str.w	r3, [sl, #20]
  4122c8:	d003      	beq.n	4122d2 <_realloc_r+0x3d6>
  4122ca:	3610      	adds	r6, #16
  4122cc:	f10a 0318 	add.w	r3, sl, #24
  4122d0:	e741      	b.n	412156 <_realloc_r+0x25a>
  4122d2:	6932      	ldr	r2, [r6, #16]
  4122d4:	f10a 0320 	add.w	r3, sl, #32
  4122d8:	3618      	adds	r6, #24
  4122da:	f8ca 2018 	str.w	r2, [sl, #24]
  4122de:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4122e2:	f8ca 201c 	str.w	r2, [sl, #28]
  4122e6:	e736      	b.n	412156 <_realloc_r+0x25a>
  4122e8:	204004dc 	.word	0x204004dc

004122ec <nanf>:
  4122ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 4122f4 <nanf+0x8>
  4122f0:	4770      	bx	lr
  4122f2:	bf00      	nop
  4122f4:	7fc00000 	.word	0x7fc00000

004122f8 <_raise_r>:
  4122f8:	291f      	cmp	r1, #31
  4122fa:	b538      	push	{r3, r4, r5, lr}
  4122fc:	4605      	mov	r5, r0
  4122fe:	d821      	bhi.n	412344 <_raise_r+0x4c>
  412300:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  412304:	460c      	mov	r4, r1
  412306:	b19a      	cbz	r2, 412330 <_raise_r+0x38>
  412308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  41230c:	b183      	cbz	r3, 412330 <_raise_r+0x38>
  41230e:	2b01      	cmp	r3, #1
  412310:	d00c      	beq.n	41232c <_raise_r+0x34>
  412312:	1c59      	adds	r1, r3, #1
  412314:	d006      	beq.n	412324 <_raise_r+0x2c>
  412316:	2500      	movs	r5, #0
  412318:	4620      	mov	r0, r4
  41231a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  41231e:	4798      	blx	r3
  412320:	4628      	mov	r0, r5
  412322:	bd38      	pop	{r3, r4, r5, pc}
  412324:	2316      	movs	r3, #22
  412326:	2001      	movs	r0, #1
  412328:	602b      	str	r3, [r5, #0]
  41232a:	bd38      	pop	{r3, r4, r5, pc}
  41232c:	2000      	movs	r0, #0
  41232e:	bd38      	pop	{r3, r4, r5, pc}
  412330:	4628      	mov	r0, r5
  412332:	f000 f829 	bl	412388 <_getpid_r>
  412336:	4622      	mov	r2, r4
  412338:	4601      	mov	r1, r0
  41233a:	4628      	mov	r0, r5
  41233c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  412340:	f000 b80e 	b.w	412360 <_kill_r>
  412344:	2316      	movs	r3, #22
  412346:	f04f 30ff 	mov.w	r0, #4294967295
  41234a:	602b      	str	r3, [r5, #0]
  41234c:	bd38      	pop	{r3, r4, r5, pc}
  41234e:	bf00      	nop

00412350 <raise>:
  412350:	4b02      	ldr	r3, [pc, #8]	; (41235c <raise+0xc>)
  412352:	4601      	mov	r1, r0
  412354:	6818      	ldr	r0, [r3, #0]
  412356:	f7ff bfcf 	b.w	4122f8 <_raise_r>
  41235a:	bf00      	nop
  41235c:	204004d8 	.word	0x204004d8

00412360 <_kill_r>:
  412360:	b538      	push	{r3, r4, r5, lr}
  412362:	2300      	movs	r3, #0
  412364:	4c07      	ldr	r4, [pc, #28]	; (412384 <_kill_r+0x24>)
  412366:	4605      	mov	r5, r0
  412368:	4608      	mov	r0, r1
  41236a:	4611      	mov	r1, r2
  41236c:	6023      	str	r3, [r4, #0]
  41236e:	f7f1 fa01 	bl	403774 <_kill>
  412372:	1c43      	adds	r3, r0, #1
  412374:	d000      	beq.n	412378 <_kill_r+0x18>
  412376:	bd38      	pop	{r3, r4, r5, pc}
  412378:	6823      	ldr	r3, [r4, #0]
  41237a:	2b00      	cmp	r3, #0
  41237c:	d0fb      	beq.n	412376 <_kill_r+0x16>
  41237e:	602b      	str	r3, [r5, #0]
  412380:	bd38      	pop	{r3, r4, r5, pc}
  412382:	bf00      	nop
  412384:	2040cec4 	.word	0x2040cec4

00412388 <_getpid_r>:
  412388:	f7f1 b9f6 	b.w	403778 <_getpid>

0041238c <__sread>:
  41238c:	b510      	push	{r4, lr}
  41238e:	460c      	mov	r4, r1
  412390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412394:	f000 fac2 	bl	41291c <_read_r>
  412398:	2800      	cmp	r0, #0
  41239a:	db03      	blt.n	4123a4 <__sread+0x18>
  41239c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  41239e:	4403      	add	r3, r0
  4123a0:	6523      	str	r3, [r4, #80]	; 0x50
  4123a2:	bd10      	pop	{r4, pc}
  4123a4:	89a3      	ldrh	r3, [r4, #12]
  4123a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4123aa:	81a3      	strh	r3, [r4, #12]
  4123ac:	bd10      	pop	{r4, pc}
  4123ae:	bf00      	nop

004123b0 <__swrite>:
  4123b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4123b4:	461d      	mov	r5, r3
  4123b6:	898b      	ldrh	r3, [r1, #12]
  4123b8:	4616      	mov	r6, r2
  4123ba:	460c      	mov	r4, r1
  4123bc:	05da      	lsls	r2, r3, #23
  4123be:	4607      	mov	r7, r0
  4123c0:	d506      	bpl.n	4123d0 <__swrite+0x20>
  4123c2:	2302      	movs	r3, #2
  4123c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4123c8:	2200      	movs	r2, #0
  4123ca:	f000 fa93 	bl	4128f4 <_lseek_r>
  4123ce:	89a3      	ldrh	r3, [r4, #12]
  4123d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4123d4:	4638      	mov	r0, r7
  4123d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4123da:	4632      	mov	r2, r6
  4123dc:	81a3      	strh	r3, [r4, #12]
  4123de:	462b      	mov	r3, r5
  4123e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4123e4:	f000 b974 	b.w	4126d0 <_write_r>

004123e8 <__sseek>:
  4123e8:	b510      	push	{r4, lr}
  4123ea:	460c      	mov	r4, r1
  4123ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4123f0:	f000 fa80 	bl	4128f4 <_lseek_r>
  4123f4:	1c42      	adds	r2, r0, #1
  4123f6:	89a3      	ldrh	r3, [r4, #12]
  4123f8:	d004      	beq.n	412404 <__sseek+0x1c>
  4123fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4123fe:	6520      	str	r0, [r4, #80]	; 0x50
  412400:	81a3      	strh	r3, [r4, #12]
  412402:	bd10      	pop	{r4, pc}
  412404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  412408:	81a3      	strh	r3, [r4, #12]
  41240a:	bd10      	pop	{r4, pc}

0041240c <__sclose>:
  41240c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412410:	f000 b9f6 	b.w	412800 <_close_r>

00412414 <strncmp>:
  412414:	2a00      	cmp	r2, #0
  412416:	d03f      	beq.n	412498 <strncmp+0x84>
  412418:	ea40 0301 	orr.w	r3, r0, r1
  41241c:	f013 0303 	ands.w	r3, r3, #3
  412420:	b4f0      	push	{r4, r5, r6, r7}
  412422:	d125      	bne.n	412470 <strncmp+0x5c>
  412424:	2a03      	cmp	r2, #3
  412426:	d923      	bls.n	412470 <strncmp+0x5c>
  412428:	6804      	ldr	r4, [r0, #0]
  41242a:	680d      	ldr	r5, [r1, #0]
  41242c:	42ac      	cmp	r4, r5
  41242e:	d11f      	bne.n	412470 <strncmp+0x5c>
  412430:	3a04      	subs	r2, #4
  412432:	d036      	beq.n	4124a2 <strncmp+0x8e>
  412434:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  412438:	ea25 0404 	bic.w	r4, r5, r4
  41243c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  412440:	d131      	bne.n	4124a6 <strncmp+0x92>
  412442:	1d06      	adds	r6, r0, #4
  412444:	1d0d      	adds	r5, r1, #4
  412446:	e00d      	b.n	412464 <strncmp+0x50>
  412448:	f856 3b04 	ldr.w	r3, [r6], #4
  41244c:	680f      	ldr	r7, [r1, #0]
  41244e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  412452:	42bb      	cmp	r3, r7
  412454:	ea24 0303 	bic.w	r3, r4, r3
  412458:	d10a      	bne.n	412470 <strncmp+0x5c>
  41245a:	3a04      	subs	r2, #4
  41245c:	d021      	beq.n	4124a2 <strncmp+0x8e>
  41245e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  412462:	d11b      	bne.n	41249c <strncmp+0x88>
  412464:	2a03      	cmp	r2, #3
  412466:	4629      	mov	r1, r5
  412468:	4630      	mov	r0, r6
  41246a:	f105 0504 	add.w	r5, r5, #4
  41246e:	d8eb      	bhi.n	412448 <strncmp+0x34>
  412470:	7803      	ldrb	r3, [r0, #0]
  412472:	3a01      	subs	r2, #1
  412474:	780c      	ldrb	r4, [r1, #0]
  412476:	42a3      	cmp	r3, r4
  412478:	d10b      	bne.n	412492 <strncmp+0x7e>
  41247a:	b17a      	cbz	r2, 41249c <strncmp+0x88>
  41247c:	b913      	cbnz	r3, 412484 <strncmp+0x70>
  41247e:	e00d      	b.n	41249c <strncmp+0x88>
  412480:	b163      	cbz	r3, 41249c <strncmp+0x88>
  412482:	b15a      	cbz	r2, 41249c <strncmp+0x88>
  412484:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  412488:	3a01      	subs	r2, #1
  41248a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  41248e:	42a3      	cmp	r3, r4
  412490:	d0f6      	beq.n	412480 <strncmp+0x6c>
  412492:	1b18      	subs	r0, r3, r4
  412494:	bcf0      	pop	{r4, r5, r6, r7}
  412496:	4770      	bx	lr
  412498:	4610      	mov	r0, r2
  41249a:	4770      	bx	lr
  41249c:	2000      	movs	r0, #0
  41249e:	bcf0      	pop	{r4, r5, r6, r7}
  4124a0:	4770      	bx	lr
  4124a2:	4610      	mov	r0, r2
  4124a4:	e7f6      	b.n	412494 <strncmp+0x80>
  4124a6:	4618      	mov	r0, r3
  4124a8:	e7f4      	b.n	412494 <strncmp+0x80>
  4124aa:	bf00      	nop

004124ac <__ssprint_r>:
  4124ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4124b0:	6893      	ldr	r3, [r2, #8]
  4124b2:	b083      	sub	sp, #12
  4124b4:	4691      	mov	r9, r2
  4124b6:	f8d2 8000 	ldr.w	r8, [r2]
  4124ba:	9001      	str	r0, [sp, #4]
  4124bc:	2b00      	cmp	r3, #0
  4124be:	d073      	beq.n	4125a8 <__ssprint_r+0xfc>
  4124c0:	f04f 0b00 	mov.w	fp, #0
  4124c4:	460d      	mov	r5, r1
  4124c6:	6808      	ldr	r0, [r1, #0]
  4124c8:	688b      	ldr	r3, [r1, #8]
  4124ca:	465c      	mov	r4, fp
  4124cc:	2c00      	cmp	r4, #0
  4124ce:	d046      	beq.n	41255e <__ssprint_r+0xb2>
  4124d0:	429c      	cmp	r4, r3
  4124d2:	461e      	mov	r6, r3
  4124d4:	469a      	mov	sl, r3
  4124d6:	d349      	bcc.n	41256c <__ssprint_r+0xc0>
  4124d8:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  4124dc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4124e0:	d02d      	beq.n	41253e <__ssprint_r+0x92>
  4124e2:	696b      	ldr	r3, [r5, #20]
  4124e4:	1c62      	adds	r2, r4, #1
  4124e6:	6929      	ldr	r1, [r5, #16]
  4124e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4124ec:	1a46      	subs	r6, r0, r1
  4124ee:	4610      	mov	r0, r2
  4124f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  4124f4:	4430      	add	r0, r6
  4124f6:	105f      	asrs	r7, r3, #1
  4124f8:	4287      	cmp	r7, r0
  4124fa:	463a      	mov	r2, r7
  4124fc:	d201      	bcs.n	412502 <__ssprint_r+0x56>
  4124fe:	4607      	mov	r7, r0
  412500:	4602      	mov	r2, r0
  412502:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  412506:	d034      	beq.n	412572 <__ssprint_r+0xc6>
  412508:	4611      	mov	r1, r2
  41250a:	9801      	ldr	r0, [sp, #4]
  41250c:	f7f8 ff88 	bl	40b420 <_malloc_r>
  412510:	4682      	mov	sl, r0
  412512:	2800      	cmp	r0, #0
  412514:	d04e      	beq.n	4125b4 <__ssprint_r+0x108>
  412516:	4632      	mov	r2, r6
  412518:	6929      	ldr	r1, [r5, #16]
  41251a:	f7f9 fa2d 	bl	40b978 <memcpy>
  41251e:	89aa      	ldrh	r2, [r5, #12]
  412520:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  412524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  412528:	81aa      	strh	r2, [r5, #12]
  41252a:	eb0a 0006 	add.w	r0, sl, r6
  41252e:	1bba      	subs	r2, r7, r6
  412530:	f8c5 a010 	str.w	sl, [r5, #16]
  412534:	4626      	mov	r6, r4
  412536:	46a2      	mov	sl, r4
  412538:	6028      	str	r0, [r5, #0]
  41253a:	60aa      	str	r2, [r5, #8]
  41253c:	616f      	str	r7, [r5, #20]
  41253e:	4652      	mov	r2, sl
  412540:	4659      	mov	r1, fp
  412542:	f7ff f809 	bl	411558 <memmove>
  412546:	f8d9 2008 	ldr.w	r2, [r9, #8]
  41254a:	68ab      	ldr	r3, [r5, #8]
  41254c:	6828      	ldr	r0, [r5, #0]
  41254e:	1b14      	subs	r4, r2, r4
  412550:	1b9b      	subs	r3, r3, r6
  412552:	4450      	add	r0, sl
  412554:	60ab      	str	r3, [r5, #8]
  412556:	6028      	str	r0, [r5, #0]
  412558:	f8c9 4008 	str.w	r4, [r9, #8]
  41255c:	b324      	cbz	r4, 4125a8 <__ssprint_r+0xfc>
  41255e:	f8d8 b000 	ldr.w	fp, [r8]
  412562:	f108 0808 	add.w	r8, r8, #8
  412566:	f858 4c04 	ldr.w	r4, [r8, #-4]
  41256a:	e7af      	b.n	4124cc <__ssprint_r+0x20>
  41256c:	4626      	mov	r6, r4
  41256e:	46a2      	mov	sl, r4
  412570:	e7e5      	b.n	41253e <__ssprint_r+0x92>
  412572:	9801      	ldr	r0, [sp, #4]
  412574:	f7ff fcc2 	bl	411efc <_realloc_r>
  412578:	4682      	mov	sl, r0
  41257a:	2800      	cmp	r0, #0
  41257c:	d1d5      	bne.n	41252a <__ssprint_r+0x7e>
  41257e:	9c01      	ldr	r4, [sp, #4]
  412580:	6929      	ldr	r1, [r5, #16]
  412582:	4620      	mov	r0, r4
  412584:	f7fe f8f2 	bl	41076c <_free_r>
  412588:	230c      	movs	r3, #12
  41258a:	6023      	str	r3, [r4, #0]
  41258c:	89ab      	ldrh	r3, [r5, #12]
  41258e:	2200      	movs	r2, #0
  412590:	f04f 30ff 	mov.w	r0, #4294967295
  412594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  412598:	81ab      	strh	r3, [r5, #12]
  41259a:	f8c9 2008 	str.w	r2, [r9, #8]
  41259e:	f8c9 2004 	str.w	r2, [r9, #4]
  4125a2:	b003      	add	sp, #12
  4125a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4125a8:	2000      	movs	r0, #0
  4125aa:	f8c9 0004 	str.w	r0, [r9, #4]
  4125ae:	b003      	add	sp, #12
  4125b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4125b4:	230c      	movs	r3, #12
  4125b6:	9a01      	ldr	r2, [sp, #4]
  4125b8:	6013      	str	r3, [r2, #0]
  4125ba:	e7e7      	b.n	41258c <__ssprint_r+0xe0>

004125bc <__swbuf_r>:
  4125bc:	b570      	push	{r4, r5, r6, lr}
  4125be:	460d      	mov	r5, r1
  4125c0:	4614      	mov	r4, r2
  4125c2:	4606      	mov	r6, r0
  4125c4:	b110      	cbz	r0, 4125cc <__swbuf_r+0x10>
  4125c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4125c8:	2b00      	cmp	r3, #0
  4125ca:	d048      	beq.n	41265e <__swbuf_r+0xa2>
  4125cc:	89a2      	ldrh	r2, [r4, #12]
  4125ce:	69a3      	ldr	r3, [r4, #24]
  4125d0:	b291      	uxth	r1, r2
  4125d2:	60a3      	str	r3, [r4, #8]
  4125d4:	0708      	lsls	r0, r1, #28
  4125d6:	d538      	bpl.n	41264a <__swbuf_r+0x8e>
  4125d8:	6923      	ldr	r3, [r4, #16]
  4125da:	2b00      	cmp	r3, #0
  4125dc:	d035      	beq.n	41264a <__swbuf_r+0x8e>
  4125de:	0489      	lsls	r1, r1, #18
  4125e0:	b2ed      	uxtb	r5, r5
  4125e2:	d515      	bpl.n	412610 <__swbuf_r+0x54>
  4125e4:	6822      	ldr	r2, [r4, #0]
  4125e6:	6961      	ldr	r1, [r4, #20]
  4125e8:	1ad3      	subs	r3, r2, r3
  4125ea:	428b      	cmp	r3, r1
  4125ec:	da1c      	bge.n	412628 <__swbuf_r+0x6c>
  4125ee:	3301      	adds	r3, #1
  4125f0:	68a1      	ldr	r1, [r4, #8]
  4125f2:	1c50      	adds	r0, r2, #1
  4125f4:	3901      	subs	r1, #1
  4125f6:	6020      	str	r0, [r4, #0]
  4125f8:	60a1      	str	r1, [r4, #8]
  4125fa:	7015      	strb	r5, [r2, #0]
  4125fc:	6962      	ldr	r2, [r4, #20]
  4125fe:	429a      	cmp	r2, r3
  412600:	d01a      	beq.n	412638 <__swbuf_r+0x7c>
  412602:	2d0a      	cmp	r5, #10
  412604:	d102      	bne.n	41260c <__swbuf_r+0x50>
  412606:	7b23      	ldrb	r3, [r4, #12]
  412608:	07db      	lsls	r3, r3, #31
  41260a:	d415      	bmi.n	412638 <__swbuf_r+0x7c>
  41260c:	4628      	mov	r0, r5
  41260e:	bd70      	pop	{r4, r5, r6, pc}
  412610:	6e61      	ldr	r1, [r4, #100]	; 0x64
  412612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  412616:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  41261a:	81a2      	strh	r2, [r4, #12]
  41261c:	6822      	ldr	r2, [r4, #0]
  41261e:	6661      	str	r1, [r4, #100]	; 0x64
  412620:	1ad3      	subs	r3, r2, r3
  412622:	6961      	ldr	r1, [r4, #20]
  412624:	428b      	cmp	r3, r1
  412626:	dbe2      	blt.n	4125ee <__swbuf_r+0x32>
  412628:	4630      	mov	r0, r6
  41262a:	4621      	mov	r1, r4
  41262c:	f7fd ff2c 	bl	410488 <_fflush_r>
  412630:	b940      	cbnz	r0, 412644 <__swbuf_r+0x88>
  412632:	6822      	ldr	r2, [r4, #0]
  412634:	2301      	movs	r3, #1
  412636:	e7db      	b.n	4125f0 <__swbuf_r+0x34>
  412638:	4630      	mov	r0, r6
  41263a:	4621      	mov	r1, r4
  41263c:	f7fd ff24 	bl	410488 <_fflush_r>
  412640:	2800      	cmp	r0, #0
  412642:	d0e3      	beq.n	41260c <__swbuf_r+0x50>
  412644:	f04f 30ff 	mov.w	r0, #4294967295
  412648:	bd70      	pop	{r4, r5, r6, pc}
  41264a:	4630      	mov	r0, r6
  41264c:	4621      	mov	r1, r4
  41264e:	f7fc fdf7 	bl	40f240 <__swsetup_r>
  412652:	2800      	cmp	r0, #0
  412654:	d1f6      	bne.n	412644 <__swbuf_r+0x88>
  412656:	89a2      	ldrh	r2, [r4, #12]
  412658:	6923      	ldr	r3, [r4, #16]
  41265a:	b291      	uxth	r1, r2
  41265c:	e7bf      	b.n	4125de <__swbuf_r+0x22>
  41265e:	f7fd ffad 	bl	4105bc <__sinit>
  412662:	e7b3      	b.n	4125cc <__swbuf_r+0x10>

00412664 <_wcrtomb_r>:
  412664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412668:	4605      	mov	r5, r0
  41266a:	b086      	sub	sp, #24
  41266c:	461e      	mov	r6, r3
  41266e:	460c      	mov	r4, r1
  412670:	b1a1      	cbz	r1, 41269c <_wcrtomb_r+0x38>
  412672:	4b10      	ldr	r3, [pc, #64]	; (4126b4 <_wcrtomb_r+0x50>)
  412674:	4617      	mov	r7, r2
  412676:	f8d3 8000 	ldr.w	r8, [r3]
  41267a:	f7fe fea5 	bl	4113c8 <__locale_charset>
  41267e:	9600      	str	r6, [sp, #0]
  412680:	4603      	mov	r3, r0
  412682:	4621      	mov	r1, r4
  412684:	4628      	mov	r0, r5
  412686:	463a      	mov	r2, r7
  412688:	47c0      	blx	r8
  41268a:	1c43      	adds	r3, r0, #1
  41268c:	d103      	bne.n	412696 <_wcrtomb_r+0x32>
  41268e:	2200      	movs	r2, #0
  412690:	238a      	movs	r3, #138	; 0x8a
  412692:	6032      	str	r2, [r6, #0]
  412694:	602b      	str	r3, [r5, #0]
  412696:	b006      	add	sp, #24
  412698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41269c:	4b05      	ldr	r3, [pc, #20]	; (4126b4 <_wcrtomb_r+0x50>)
  41269e:	681f      	ldr	r7, [r3, #0]
  4126a0:	f7fe fe92 	bl	4113c8 <__locale_charset>
  4126a4:	9600      	str	r6, [sp, #0]
  4126a6:	4603      	mov	r3, r0
  4126a8:	4622      	mov	r2, r4
  4126aa:	4628      	mov	r0, r5
  4126ac:	a903      	add	r1, sp, #12
  4126ae:	47b8      	blx	r7
  4126b0:	e7eb      	b.n	41268a <_wcrtomb_r+0x26>
  4126b2:	bf00      	nop
  4126b4:	2040094c 	.word	0x2040094c

004126b8 <__ascii_wctomb>:
  4126b8:	b119      	cbz	r1, 4126c2 <__ascii_wctomb+0xa>
  4126ba:	2aff      	cmp	r2, #255	; 0xff
  4126bc:	d803      	bhi.n	4126c6 <__ascii_wctomb+0xe>
  4126be:	700a      	strb	r2, [r1, #0]
  4126c0:	2101      	movs	r1, #1
  4126c2:	4608      	mov	r0, r1
  4126c4:	4770      	bx	lr
  4126c6:	238a      	movs	r3, #138	; 0x8a
  4126c8:	f04f 31ff 	mov.w	r1, #4294967295
  4126cc:	6003      	str	r3, [r0, #0]
  4126ce:	e7f8      	b.n	4126c2 <__ascii_wctomb+0xa>

004126d0 <_write_r>:
  4126d0:	b570      	push	{r4, r5, r6, lr}
  4126d2:	4c08      	ldr	r4, [pc, #32]	; (4126f4 <_write_r+0x24>)
  4126d4:	2500      	movs	r5, #0
  4126d6:	4606      	mov	r6, r0
  4126d8:	4608      	mov	r0, r1
  4126da:	4611      	mov	r1, r2
  4126dc:	461a      	mov	r2, r3
  4126de:	6025      	str	r5, [r4, #0]
  4126e0:	f7f1 f82c 	bl	40373c <_write>
  4126e4:	1c43      	adds	r3, r0, #1
  4126e6:	d000      	beq.n	4126ea <_write_r+0x1a>
  4126e8:	bd70      	pop	{r4, r5, r6, pc}
  4126ea:	6823      	ldr	r3, [r4, #0]
  4126ec:	2b00      	cmp	r3, #0
  4126ee:	d0fb      	beq.n	4126e8 <_write_r+0x18>
  4126f0:	6033      	str	r3, [r6, #0]
  4126f2:	bd70      	pop	{r4, r5, r6, pc}
  4126f4:	2040cec4 	.word	0x2040cec4

004126f8 <__register_exitproc>:
  4126f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4126fc:	4c26      	ldr	r4, [pc, #152]	; (412798 <__register_exitproc+0xa0>)
  4126fe:	4606      	mov	r6, r0
  412700:	4688      	mov	r8, r1
  412702:	4691      	mov	r9, r2
  412704:	6825      	ldr	r5, [r4, #0]
  412706:	469a      	mov	sl, r3
  412708:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  41270c:	2c00      	cmp	r4, #0
  41270e:	d03a      	beq.n	412786 <__register_exitproc+0x8e>
  412710:	6860      	ldr	r0, [r4, #4]
  412712:	281f      	cmp	r0, #31
  412714:	dc19      	bgt.n	41274a <__register_exitproc+0x52>
  412716:	1c41      	adds	r1, r0, #1
  412718:	b186      	cbz	r6, 41273c <__register_exitproc+0x44>
  41271a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  41271e:	2201      	movs	r2, #1
  412720:	2e02      	cmp	r6, #2
  412722:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  412726:	fa02 f200 	lsl.w	r2, r2, r0
  41272a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  41272e:	ea43 0302 	orr.w	r3, r3, r2
  412732:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  412736:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  41273a:	d01e      	beq.n	41277a <__register_exitproc+0x82>
  41273c:	1c83      	adds	r3, r0, #2
  41273e:	6061      	str	r1, [r4, #4]
  412740:	2000      	movs	r0, #0
  412742:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  412746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41274a:	4b14      	ldr	r3, [pc, #80]	; (41279c <__register_exitproc+0xa4>)
  41274c:	b303      	cbz	r3, 412790 <__register_exitproc+0x98>
  41274e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  412752:	f7f8 fe5d 	bl	40b410 <malloc>
  412756:	4604      	mov	r4, r0
  412758:	b1d0      	cbz	r0, 412790 <__register_exitproc+0x98>
  41275a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  41275e:	2700      	movs	r7, #0
  412760:	2101      	movs	r1, #1
  412762:	6003      	str	r3, [r0, #0]
  412764:	4638      	mov	r0, r7
  412766:	6067      	str	r7, [r4, #4]
  412768:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41276c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  412770:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  412774:	2e00      	cmp	r6, #0
  412776:	d0e1      	beq.n	41273c <__register_exitproc+0x44>
  412778:	e7cf      	b.n	41271a <__register_exitproc+0x22>
  41277a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  41277e:	431a      	orrs	r2, r3
  412780:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  412784:	e7da      	b.n	41273c <__register_exitproc+0x44>
  412786:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  41278a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  41278e:	e7bf      	b.n	412710 <__register_exitproc+0x18>
  412790:	f04f 30ff 	mov.w	r0, #4294967295
  412794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412798:	00413d6c 	.word	0x00413d6c
  41279c:	0040b411 	.word	0x0040b411

004127a0 <_calloc_r>:
  4127a0:	b510      	push	{r4, lr}
  4127a2:	fb02 f101 	mul.w	r1, r2, r1
  4127a6:	f7f8 fe3b 	bl	40b420 <_malloc_r>
  4127aa:	4604      	mov	r4, r0
  4127ac:	b168      	cbz	r0, 4127ca <_calloc_r+0x2a>
  4127ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4127b2:	f022 0203 	bic.w	r2, r2, #3
  4127b6:	3a04      	subs	r2, #4
  4127b8:	2a24      	cmp	r2, #36	; 0x24
  4127ba:	d814      	bhi.n	4127e6 <_calloc_r+0x46>
  4127bc:	2a13      	cmp	r2, #19
  4127be:	d806      	bhi.n	4127ce <_calloc_r+0x2e>
  4127c0:	4603      	mov	r3, r0
  4127c2:	2200      	movs	r2, #0
  4127c4:	601a      	str	r2, [r3, #0]
  4127c6:	605a      	str	r2, [r3, #4]
  4127c8:	609a      	str	r2, [r3, #8]
  4127ca:	4620      	mov	r0, r4
  4127cc:	bd10      	pop	{r4, pc}
  4127ce:	2100      	movs	r1, #0
  4127d0:	2a1b      	cmp	r2, #27
  4127d2:	6001      	str	r1, [r0, #0]
  4127d4:	6041      	str	r1, [r0, #4]
  4127d6:	d90b      	bls.n	4127f0 <_calloc_r+0x50>
  4127d8:	2a24      	cmp	r2, #36	; 0x24
  4127da:	6081      	str	r1, [r0, #8]
  4127dc:	60c1      	str	r1, [r0, #12]
  4127de:	d00a      	beq.n	4127f6 <_calloc_r+0x56>
  4127e0:	f100 0310 	add.w	r3, r0, #16
  4127e4:	e7ed      	b.n	4127c2 <_calloc_r+0x22>
  4127e6:	2100      	movs	r1, #0
  4127e8:	f7f9 f960 	bl	40baac <memset>
  4127ec:	4620      	mov	r0, r4
  4127ee:	bd10      	pop	{r4, pc}
  4127f0:	f100 0308 	add.w	r3, r0, #8
  4127f4:	e7e5      	b.n	4127c2 <_calloc_r+0x22>
  4127f6:	6101      	str	r1, [r0, #16]
  4127f8:	f100 0318 	add.w	r3, r0, #24
  4127fc:	6141      	str	r1, [r0, #20]
  4127fe:	e7e0      	b.n	4127c2 <_calloc_r+0x22>

00412800 <_close_r>:
  412800:	b538      	push	{r3, r4, r5, lr}
  412802:	2300      	movs	r3, #0
  412804:	4c06      	ldr	r4, [pc, #24]	; (412820 <_close_r+0x20>)
  412806:	4605      	mov	r5, r0
  412808:	4608      	mov	r0, r1
  41280a:	6023      	str	r3, [r4, #0]
  41280c:	f7f0 ff92 	bl	403734 <_close>
  412810:	1c43      	adds	r3, r0, #1
  412812:	d000      	beq.n	412816 <_close_r+0x16>
  412814:	bd38      	pop	{r3, r4, r5, pc}
  412816:	6823      	ldr	r3, [r4, #0]
  412818:	2b00      	cmp	r3, #0
  41281a:	d0fb      	beq.n	412814 <_close_r+0x14>
  41281c:	602b      	str	r3, [r5, #0]
  41281e:	bd38      	pop	{r3, r4, r5, pc}
  412820:	2040cec4 	.word	0x2040cec4

00412824 <_fclose_r>:
  412824:	2900      	cmp	r1, #0
  412826:	d03d      	beq.n	4128a4 <_fclose_r+0x80>
  412828:	b570      	push	{r4, r5, r6, lr}
  41282a:	4605      	mov	r5, r0
  41282c:	460c      	mov	r4, r1
  41282e:	b108      	cbz	r0, 412834 <_fclose_r+0x10>
  412830:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412832:	b37b      	cbz	r3, 412894 <_fclose_r+0x70>
  412834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412838:	b90b      	cbnz	r3, 41283e <_fclose_r+0x1a>
  41283a:	2000      	movs	r0, #0
  41283c:	bd70      	pop	{r4, r5, r6, pc}
  41283e:	4628      	mov	r0, r5
  412840:	4621      	mov	r1, r4
  412842:	f7fd fd7d 	bl	410340 <__sflush_r>
  412846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  412848:	4606      	mov	r6, r0
  41284a:	b133      	cbz	r3, 41285a <_fclose_r+0x36>
  41284c:	4628      	mov	r0, r5
  41284e:	69e1      	ldr	r1, [r4, #28]
  412850:	4798      	blx	r3
  412852:	2800      	cmp	r0, #0
  412854:	bfb8      	it	lt
  412856:	f04f 36ff 	movlt.w	r6, #4294967295
  41285a:	89a3      	ldrh	r3, [r4, #12]
  41285c:	061b      	lsls	r3, r3, #24
  41285e:	d41c      	bmi.n	41289a <_fclose_r+0x76>
  412860:	6b21      	ldr	r1, [r4, #48]	; 0x30
  412862:	b141      	cbz	r1, 412876 <_fclose_r+0x52>
  412864:	f104 0340 	add.w	r3, r4, #64	; 0x40
  412868:	4299      	cmp	r1, r3
  41286a:	d002      	beq.n	412872 <_fclose_r+0x4e>
  41286c:	4628      	mov	r0, r5
  41286e:	f7fd ff7d 	bl	41076c <_free_r>
  412872:	2300      	movs	r3, #0
  412874:	6323      	str	r3, [r4, #48]	; 0x30
  412876:	6c61      	ldr	r1, [r4, #68]	; 0x44
  412878:	b121      	cbz	r1, 412884 <_fclose_r+0x60>
  41287a:	4628      	mov	r0, r5
  41287c:	f7fd ff76 	bl	41076c <_free_r>
  412880:	2300      	movs	r3, #0
  412882:	6463      	str	r3, [r4, #68]	; 0x44
  412884:	f7fd fea0 	bl	4105c8 <__sfp_lock_acquire>
  412888:	2300      	movs	r3, #0
  41288a:	81a3      	strh	r3, [r4, #12]
  41288c:	f7fd fe9e 	bl	4105cc <__sfp_lock_release>
  412890:	4630      	mov	r0, r6
  412892:	bd70      	pop	{r4, r5, r6, pc}
  412894:	f7fd fe92 	bl	4105bc <__sinit>
  412898:	e7cc      	b.n	412834 <_fclose_r+0x10>
  41289a:	4628      	mov	r0, r5
  41289c:	6921      	ldr	r1, [r4, #16]
  41289e:	f7fd ff65 	bl	41076c <_free_r>
  4128a2:	e7dd      	b.n	412860 <_fclose_r+0x3c>
  4128a4:	2000      	movs	r0, #0
  4128a6:	4770      	bx	lr

004128a8 <_fstat_r>:
  4128a8:	b538      	push	{r3, r4, r5, lr}
  4128aa:	2300      	movs	r3, #0
  4128ac:	4c07      	ldr	r4, [pc, #28]	; (4128cc <_fstat_r+0x24>)
  4128ae:	4605      	mov	r5, r0
  4128b0:	4608      	mov	r0, r1
  4128b2:	4611      	mov	r1, r2
  4128b4:	6023      	str	r3, [r4, #0]
  4128b6:	f7f0 ff49 	bl	40374c <_fstat>
  4128ba:	1c43      	adds	r3, r0, #1
  4128bc:	d000      	beq.n	4128c0 <_fstat_r+0x18>
  4128be:	bd38      	pop	{r3, r4, r5, pc}
  4128c0:	6823      	ldr	r3, [r4, #0]
  4128c2:	2b00      	cmp	r3, #0
  4128c4:	d0fb      	beq.n	4128be <_fstat_r+0x16>
  4128c6:	602b      	str	r3, [r5, #0]
  4128c8:	bd38      	pop	{r3, r4, r5, pc}
  4128ca:	bf00      	nop
  4128cc:	2040cec4 	.word	0x2040cec4

004128d0 <_isatty_r>:
  4128d0:	b538      	push	{r3, r4, r5, lr}
  4128d2:	2300      	movs	r3, #0
  4128d4:	4c06      	ldr	r4, [pc, #24]	; (4128f0 <_isatty_r+0x20>)
  4128d6:	4605      	mov	r5, r0
  4128d8:	4608      	mov	r0, r1
  4128da:	6023      	str	r3, [r4, #0]
  4128dc:	f7f0 ff3c 	bl	403758 <_isatty>
  4128e0:	1c43      	adds	r3, r0, #1
  4128e2:	d000      	beq.n	4128e6 <_isatty_r+0x16>
  4128e4:	bd38      	pop	{r3, r4, r5, pc}
  4128e6:	6823      	ldr	r3, [r4, #0]
  4128e8:	2b00      	cmp	r3, #0
  4128ea:	d0fb      	beq.n	4128e4 <_isatty_r+0x14>
  4128ec:	602b      	str	r3, [r5, #0]
  4128ee:	bd38      	pop	{r3, r4, r5, pc}
  4128f0:	2040cec4 	.word	0x2040cec4

004128f4 <_lseek_r>:
  4128f4:	b570      	push	{r4, r5, r6, lr}
  4128f6:	4c08      	ldr	r4, [pc, #32]	; (412918 <_lseek_r+0x24>)
  4128f8:	2500      	movs	r5, #0
  4128fa:	4606      	mov	r6, r0
  4128fc:	4608      	mov	r0, r1
  4128fe:	4611      	mov	r1, r2
  412900:	461a      	mov	r2, r3
  412902:	6025      	str	r5, [r4, #0]
  412904:	f7f0 ff2a 	bl	40375c <_lseek>
  412908:	1c43      	adds	r3, r0, #1
  41290a:	d000      	beq.n	41290e <_lseek_r+0x1a>
  41290c:	bd70      	pop	{r4, r5, r6, pc}
  41290e:	6823      	ldr	r3, [r4, #0]
  412910:	2b00      	cmp	r3, #0
  412912:	d0fb      	beq.n	41290c <_lseek_r+0x18>
  412914:	6033      	str	r3, [r6, #0]
  412916:	bd70      	pop	{r4, r5, r6, pc}
  412918:	2040cec4 	.word	0x2040cec4

0041291c <_read_r>:
  41291c:	b570      	push	{r4, r5, r6, lr}
  41291e:	4c08      	ldr	r4, [pc, #32]	; (412940 <_read_r+0x24>)
  412920:	2500      	movs	r5, #0
  412922:	4606      	mov	r6, r0
  412924:	4608      	mov	r0, r1
  412926:	4611      	mov	r1, r2
  412928:	461a      	mov	r2, r3
  41292a:	6025      	str	r5, [r4, #0]
  41292c:	f7f0 ff0a 	bl	403744 <_read>
  412930:	1c43      	adds	r3, r0, #1
  412932:	d000      	beq.n	412936 <_read_r+0x1a>
  412934:	bd70      	pop	{r4, r5, r6, pc}
  412936:	6823      	ldr	r3, [r4, #0]
  412938:	2b00      	cmp	r3, #0
  41293a:	d0fb      	beq.n	412934 <_read_r+0x18>
  41293c:	6033      	str	r3, [r6, #0]
  41293e:	bd70      	pop	{r4, r5, r6, pc}
  412940:	2040cec4 	.word	0x2040cec4

00412944 <__aeabi_d2uiz>:
  412944:	004a      	lsls	r2, r1, #1
  412946:	d211      	bcs.n	41296c <__aeabi_d2uiz+0x28>
  412948:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41294c:	d211      	bcs.n	412972 <__aeabi_d2uiz+0x2e>
  41294e:	d50d      	bpl.n	41296c <__aeabi_d2uiz+0x28>
  412950:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  412954:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  412958:	d40e      	bmi.n	412978 <__aeabi_d2uiz+0x34>
  41295a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41295e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  412962:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  412966:	fa23 f002 	lsr.w	r0, r3, r2
  41296a:	4770      	bx	lr
  41296c:	f04f 0000 	mov.w	r0, #0
  412970:	4770      	bx	lr
  412972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  412976:	d102      	bne.n	41297e <__aeabi_d2uiz+0x3a>
  412978:	f04f 30ff 	mov.w	r0, #4294967295
  41297c:	4770      	bx	lr
  41297e:	f04f 0000 	mov.w	r0, #0
  412982:	4770      	bx	lr

00412984 <__aeabi_uldivmod>:
  412984:	b953      	cbnz	r3, 41299c <__aeabi_uldivmod+0x18>
  412986:	b94a      	cbnz	r2, 41299c <__aeabi_uldivmod+0x18>
  412988:	2900      	cmp	r1, #0
  41298a:	bf08      	it	eq
  41298c:	2800      	cmpeq	r0, #0
  41298e:	bf1c      	itt	ne
  412990:	f04f 31ff 	movne.w	r1, #4294967295
  412994:	f04f 30ff 	movne.w	r0, #4294967295
  412998:	f000 b83c 	b.w	412a14 <__aeabi_idiv0>
  41299c:	b082      	sub	sp, #8
  41299e:	46ec      	mov	ip, sp
  4129a0:	e92d 5000 	stmdb	sp!, {ip, lr}
  4129a4:	f000 f81e 	bl	4129e4 <__gnu_uldivmod_helper>
  4129a8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4129ac:	b002      	add	sp, #8
  4129ae:	bc0c      	pop	{r2, r3}
  4129b0:	4770      	bx	lr
  4129b2:	bf00      	nop

004129b4 <__gnu_ldivmod_helper>:
  4129b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4129b8:	4690      	mov	r8, r2
  4129ba:	4606      	mov	r6, r0
  4129bc:	460f      	mov	r7, r1
  4129be:	461d      	mov	r5, r3
  4129c0:	9c06      	ldr	r4, [sp, #24]
  4129c2:	f000 f829 	bl	412a18 <__divdi3>
  4129c6:	fb08 fc01 	mul.w	ip, r8, r1
  4129ca:	4686      	mov	lr, r0
  4129cc:	fba8 2300 	umull	r2, r3, r8, r0
  4129d0:	fb00 c505 	mla	r5, r0, r5, ip
  4129d4:	1ab2      	subs	r2, r6, r2
  4129d6:	442b      	add	r3, r5
  4129d8:	eb67 0303 	sbc.w	r3, r7, r3
  4129dc:	e9c4 2300 	strd	r2, r3, [r4]
  4129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004129e4 <__gnu_uldivmod_helper>:
  4129e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4129e8:	461d      	mov	r5, r3
  4129ea:	4617      	mov	r7, r2
  4129ec:	4680      	mov	r8, r0
  4129ee:	4689      	mov	r9, r1
  4129f0:	9e08      	ldr	r6, [sp, #32]
  4129f2:	f000 f953 	bl	412c9c <__udivdi3>
  4129f6:	fb00 f305 	mul.w	r3, r0, r5
  4129fa:	fba0 4507 	umull	r4, r5, r0, r7
  4129fe:	fb07 3701 	mla	r7, r7, r1, r3
  412a02:	ebb8 0404 	subs.w	r4, r8, r4
  412a06:	443d      	add	r5, r7
  412a08:	eb69 0505 	sbc.w	r5, r9, r5
  412a0c:	e9c6 4500 	strd	r4, r5, [r6]
  412a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00412a14 <__aeabi_idiv0>:
  412a14:	4770      	bx	lr
  412a16:	bf00      	nop

00412a18 <__divdi3>:
  412a18:	2900      	cmp	r1, #0
  412a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412a1e:	f2c0 80a2 	blt.w	412b66 <__divdi3+0x14e>
  412a22:	2600      	movs	r6, #0
  412a24:	2b00      	cmp	r3, #0
  412a26:	f2c0 8098 	blt.w	412b5a <__divdi3+0x142>
  412a2a:	468c      	mov	ip, r1
  412a2c:	4690      	mov	r8, r2
  412a2e:	469e      	mov	lr, r3
  412a30:	4615      	mov	r5, r2
  412a32:	4604      	mov	r4, r0
  412a34:	460f      	mov	r7, r1
  412a36:	bbcb      	cbnz	r3, 412aac <__divdi3+0x94>
  412a38:	428a      	cmp	r2, r1
  412a3a:	d956      	bls.n	412aea <__divdi3+0xd2>
  412a3c:	fab2 f382 	clz	r3, r2
  412a40:	b13b      	cbz	r3, 412a52 <__divdi3+0x3a>
  412a42:	f1c3 0220 	rsb	r2, r3, #32
  412a46:	409f      	lsls	r7, r3
  412a48:	409d      	lsls	r5, r3
  412a4a:	409c      	lsls	r4, r3
  412a4c:	fa20 f202 	lsr.w	r2, r0, r2
  412a50:	4317      	orrs	r7, r2
  412a52:	0c28      	lsrs	r0, r5, #16
  412a54:	0c22      	lsrs	r2, r4, #16
  412a56:	fa1f fe85 	uxth.w	lr, r5
  412a5a:	fbb7 f1f0 	udiv	r1, r7, r0
  412a5e:	fb00 7711 	mls	r7, r0, r1, r7
  412a62:	fb0e f301 	mul.w	r3, lr, r1
  412a66:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  412a6a:	42bb      	cmp	r3, r7
  412a6c:	d907      	bls.n	412a7e <__divdi3+0x66>
  412a6e:	197f      	adds	r7, r7, r5
  412a70:	f080 8101 	bcs.w	412c76 <__divdi3+0x25e>
  412a74:	42bb      	cmp	r3, r7
  412a76:	f240 80fe 	bls.w	412c76 <__divdi3+0x25e>
  412a7a:	3902      	subs	r1, #2
  412a7c:	442f      	add	r7, r5
  412a7e:	1aff      	subs	r7, r7, r3
  412a80:	b2a4      	uxth	r4, r4
  412a82:	fbb7 f3f0 	udiv	r3, r7, r0
  412a86:	fb00 7713 	mls	r7, r0, r3, r7
  412a8a:	fb0e fe03 	mul.w	lr, lr, r3
  412a8e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  412a92:	45be      	cmp	lr, r7
  412a94:	d906      	bls.n	412aa4 <__divdi3+0x8c>
  412a96:	197f      	adds	r7, r7, r5
  412a98:	f080 80eb 	bcs.w	412c72 <__divdi3+0x25a>
  412a9c:	45be      	cmp	lr, r7
  412a9e:	f240 80e8 	bls.w	412c72 <__divdi3+0x25a>
  412aa2:	3b02      	subs	r3, #2
  412aa4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  412aa8:	2200      	movs	r2, #0
  412aaa:	e003      	b.n	412ab4 <__divdi3+0x9c>
  412aac:	428b      	cmp	r3, r1
  412aae:	d90f      	bls.n	412ad0 <__divdi3+0xb8>
  412ab0:	2200      	movs	r2, #0
  412ab2:	4613      	mov	r3, r2
  412ab4:	1c34      	adds	r4, r6, #0
  412ab6:	f04f 0500 	mov.w	r5, #0
  412aba:	bf18      	it	ne
  412abc:	2401      	movne	r4, #1
  412abe:	4260      	negs	r0, r4
  412ac0:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  412ac4:	4058      	eors	r0, r3
  412ac6:	4051      	eors	r1, r2
  412ac8:	1900      	adds	r0, r0, r4
  412aca:	4169      	adcs	r1, r5
  412acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412ad0:	fab3 f283 	clz	r2, r3
  412ad4:	2a00      	cmp	r2, #0
  412ad6:	f040 8083 	bne.w	412be0 <__divdi3+0x1c8>
  412ada:	4580      	cmp	r8, r0
  412adc:	f240 80cd 	bls.w	412c7a <__divdi3+0x262>
  412ae0:	428b      	cmp	r3, r1
  412ae2:	f0c0 80ca 	bcc.w	412c7a <__divdi3+0x262>
  412ae6:	4613      	mov	r3, r2
  412ae8:	e7e4      	b.n	412ab4 <__divdi3+0x9c>
  412aea:	b912      	cbnz	r2, 412af2 <__divdi3+0xda>
  412aec:	2301      	movs	r3, #1
  412aee:	fbb3 f5f2 	udiv	r5, r3, r2
  412af2:	fab5 f285 	clz	r2, r5
  412af6:	2a00      	cmp	r2, #0
  412af8:	d13b      	bne.n	412b72 <__divdi3+0x15a>
  412afa:	1b78      	subs	r0, r7, r5
  412afc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412b00:	fa1f fc85 	uxth.w	ip, r5
  412b04:	2201      	movs	r2, #1
  412b06:	0c21      	lsrs	r1, r4, #16
  412b08:	fbb0 f8fe 	udiv	r8, r0, lr
  412b0c:	fb0e 0018 	mls	r0, lr, r8, r0
  412b10:	fb0c f308 	mul.w	r3, ip, r8
  412b14:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  412b18:	42bb      	cmp	r3, r7
  412b1a:	d908      	bls.n	412b2e <__divdi3+0x116>
  412b1c:	197f      	adds	r7, r7, r5
  412b1e:	f080 80b0 	bcs.w	412c82 <__divdi3+0x26a>
  412b22:	42bb      	cmp	r3, r7
  412b24:	f240 80ad 	bls.w	412c82 <__divdi3+0x26a>
  412b28:	f1a8 0802 	sub.w	r8, r8, #2
  412b2c:	442f      	add	r7, r5
  412b2e:	1aff      	subs	r7, r7, r3
  412b30:	b2a4      	uxth	r4, r4
  412b32:	fbb7 f3fe 	udiv	r3, r7, lr
  412b36:	fb0e 7713 	mls	r7, lr, r3, r7
  412b3a:	fb0c fc03 	mul.w	ip, ip, r3
  412b3e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  412b42:	45bc      	cmp	ip, r7
  412b44:	d906      	bls.n	412b54 <__divdi3+0x13c>
  412b46:	197f      	adds	r7, r7, r5
  412b48:	f080 8099 	bcs.w	412c7e <__divdi3+0x266>
  412b4c:	45bc      	cmp	ip, r7
  412b4e:	f240 8096 	bls.w	412c7e <__divdi3+0x266>
  412b52:	3b02      	subs	r3, #2
  412b54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  412b58:	e7ac      	b.n	412ab4 <__divdi3+0x9c>
  412b5a:	4252      	negs	r2, r2
  412b5c:	ea6f 0606 	mvn.w	r6, r6
  412b60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  412b64:	e761      	b.n	412a2a <__divdi3+0x12>
  412b66:	4240      	negs	r0, r0
  412b68:	f04f 36ff 	mov.w	r6, #4294967295
  412b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  412b70:	e758      	b.n	412a24 <__divdi3+0xc>
  412b72:	4095      	lsls	r5, r2
  412b74:	f1c2 0120 	rsb	r1, r2, #32
  412b78:	fa07 f302 	lsl.w	r3, r7, r2
  412b7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412b80:	40cf      	lsrs	r7, r1
  412b82:	fa24 f101 	lsr.w	r1, r4, r1
  412b86:	4094      	lsls	r4, r2
  412b88:	fa1f fc85 	uxth.w	ip, r5
  412b8c:	4319      	orrs	r1, r3
  412b8e:	fbb7 f2fe 	udiv	r2, r7, lr
  412b92:	ea4f 4811 	mov.w	r8, r1, lsr #16
  412b96:	fb0e 7712 	mls	r7, lr, r2, r7
  412b9a:	fb0c f302 	mul.w	r3, ip, r2
  412b9e:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  412ba2:	42bb      	cmp	r3, r7
  412ba4:	d905      	bls.n	412bb2 <__divdi3+0x19a>
  412ba6:	197f      	adds	r7, r7, r5
  412ba8:	d271      	bcs.n	412c8e <__divdi3+0x276>
  412baa:	42bb      	cmp	r3, r7
  412bac:	d96f      	bls.n	412c8e <__divdi3+0x276>
  412bae:	3a02      	subs	r2, #2
  412bb0:	442f      	add	r7, r5
  412bb2:	1aff      	subs	r7, r7, r3
  412bb4:	b289      	uxth	r1, r1
  412bb6:	fbb7 f8fe 	udiv	r8, r7, lr
  412bba:	fb0e 7718 	mls	r7, lr, r8, r7
  412bbe:	fb0c f008 	mul.w	r0, ip, r8
  412bc2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  412bc6:	4298      	cmp	r0, r3
  412bc8:	d906      	bls.n	412bd8 <__divdi3+0x1c0>
  412bca:	195b      	adds	r3, r3, r5
  412bcc:	d261      	bcs.n	412c92 <__divdi3+0x27a>
  412bce:	4298      	cmp	r0, r3
  412bd0:	d95f      	bls.n	412c92 <__divdi3+0x27a>
  412bd2:	f1a8 0802 	sub.w	r8, r8, #2
  412bd6:	442b      	add	r3, r5
  412bd8:	1a18      	subs	r0, r3, r0
  412bda:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  412bde:	e792      	b.n	412b06 <__divdi3+0xee>
  412be0:	f1c2 0720 	rsb	r7, r2, #32
  412be4:	fa03 fe02 	lsl.w	lr, r3, r2
  412be8:	fa08 f502 	lsl.w	r5, r8, r2
  412bec:	4091      	lsls	r1, r2
  412bee:	fa28 f307 	lsr.w	r3, r8, r7
  412bf2:	fa2c fc07 	lsr.w	ip, ip, r7
  412bf6:	40f8      	lsrs	r0, r7
  412bf8:	ea43 0e0e 	orr.w	lr, r3, lr
  412bfc:	4308      	orrs	r0, r1
  412bfe:	ea4f 481e 	mov.w	r8, lr, lsr #16
  412c02:	0c07      	lsrs	r7, r0, #16
  412c04:	fa1f fa8e 	uxth.w	sl, lr
  412c08:	fbbc f9f8 	udiv	r9, ip, r8
  412c0c:	fb08 cc19 	mls	ip, r8, r9, ip
  412c10:	fb0a f109 	mul.w	r1, sl, r9
  412c14:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  412c18:	4561      	cmp	r1, ip
  412c1a:	d907      	bls.n	412c2c <__divdi3+0x214>
  412c1c:	eb1c 0c0e 	adds.w	ip, ip, lr
  412c20:	d232      	bcs.n	412c88 <__divdi3+0x270>
  412c22:	4561      	cmp	r1, ip
  412c24:	d930      	bls.n	412c88 <__divdi3+0x270>
  412c26:	f1a9 0902 	sub.w	r9, r9, #2
  412c2a:	44f4      	add	ip, lr
  412c2c:	ebc1 0c0c 	rsb	ip, r1, ip
  412c30:	b280      	uxth	r0, r0
  412c32:	fbbc f3f8 	udiv	r3, ip, r8
  412c36:	fb08 cc13 	mls	ip, r8, r3, ip
  412c3a:	fb0a fa03 	mul.w	sl, sl, r3
  412c3e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  412c42:	458a      	cmp	sl, r1
  412c44:	d906      	bls.n	412c54 <__divdi3+0x23c>
  412c46:	eb11 010e 	adds.w	r1, r1, lr
  412c4a:	d225      	bcs.n	412c98 <__divdi3+0x280>
  412c4c:	458a      	cmp	sl, r1
  412c4e:	d923      	bls.n	412c98 <__divdi3+0x280>
  412c50:	3b02      	subs	r3, #2
  412c52:	4471      	add	r1, lr
  412c54:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  412c58:	ebca 0101 	rsb	r1, sl, r1
  412c5c:	fba3 8905 	umull	r8, r9, r3, r5
  412c60:	4549      	cmp	r1, r9
  412c62:	d303      	bcc.n	412c6c <__divdi3+0x254>
  412c64:	d103      	bne.n	412c6e <__divdi3+0x256>
  412c66:	4094      	lsls	r4, r2
  412c68:	4544      	cmp	r4, r8
  412c6a:	d200      	bcs.n	412c6e <__divdi3+0x256>
  412c6c:	3b01      	subs	r3, #1
  412c6e:	2200      	movs	r2, #0
  412c70:	e720      	b.n	412ab4 <__divdi3+0x9c>
  412c72:	3b01      	subs	r3, #1
  412c74:	e716      	b.n	412aa4 <__divdi3+0x8c>
  412c76:	3901      	subs	r1, #1
  412c78:	e701      	b.n	412a7e <__divdi3+0x66>
  412c7a:	2301      	movs	r3, #1
  412c7c:	e71a      	b.n	412ab4 <__divdi3+0x9c>
  412c7e:	3b01      	subs	r3, #1
  412c80:	e768      	b.n	412b54 <__divdi3+0x13c>
  412c82:	f108 38ff 	add.w	r8, r8, #4294967295
  412c86:	e752      	b.n	412b2e <__divdi3+0x116>
  412c88:	f109 39ff 	add.w	r9, r9, #4294967295
  412c8c:	e7ce      	b.n	412c2c <__divdi3+0x214>
  412c8e:	3a01      	subs	r2, #1
  412c90:	e78f      	b.n	412bb2 <__divdi3+0x19a>
  412c92:	f108 38ff 	add.w	r8, r8, #4294967295
  412c96:	e79f      	b.n	412bd8 <__divdi3+0x1c0>
  412c98:	3b01      	subs	r3, #1
  412c9a:	e7db      	b.n	412c54 <__divdi3+0x23c>

00412c9c <__udivdi3>:
  412c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412ca0:	2b00      	cmp	r3, #0
  412ca2:	d140      	bne.n	412d26 <__udivdi3+0x8a>
  412ca4:	428a      	cmp	r2, r1
  412ca6:	4604      	mov	r4, r0
  412ca8:	4615      	mov	r5, r2
  412caa:	d94a      	bls.n	412d42 <__udivdi3+0xa6>
  412cac:	fab2 f382 	clz	r3, r2
  412cb0:	460f      	mov	r7, r1
  412cb2:	b14b      	cbz	r3, 412cc8 <__udivdi3+0x2c>
  412cb4:	f1c3 0620 	rsb	r6, r3, #32
  412cb8:	4099      	lsls	r1, r3
  412cba:	fa00 f403 	lsl.w	r4, r0, r3
  412cbe:	fa02 f503 	lsl.w	r5, r2, r3
  412cc2:	40f0      	lsrs	r0, r6
  412cc4:	ea40 0701 	orr.w	r7, r0, r1
  412cc8:	0c29      	lsrs	r1, r5, #16
  412cca:	0c26      	lsrs	r6, r4, #16
  412ccc:	fa1f fe85 	uxth.w	lr, r5
  412cd0:	fbb7 f0f1 	udiv	r0, r7, r1
  412cd4:	fb01 7710 	mls	r7, r1, r0, r7
  412cd8:	fb0e f200 	mul.w	r2, lr, r0
  412cdc:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  412ce0:	429a      	cmp	r2, r3
  412ce2:	d907      	bls.n	412cf4 <__udivdi3+0x58>
  412ce4:	195b      	adds	r3, r3, r5
  412ce6:	f080 80ea 	bcs.w	412ebe <__udivdi3+0x222>
  412cea:	429a      	cmp	r2, r3
  412cec:	f240 80e7 	bls.w	412ebe <__udivdi3+0x222>
  412cf0:	3802      	subs	r0, #2
  412cf2:	442b      	add	r3, r5
  412cf4:	1a9a      	subs	r2, r3, r2
  412cf6:	b2a4      	uxth	r4, r4
  412cf8:	fbb2 f3f1 	udiv	r3, r2, r1
  412cfc:	fb01 2213 	mls	r2, r1, r3, r2
  412d00:	fb0e fe03 	mul.w	lr, lr, r3
  412d04:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  412d08:	4596      	cmp	lr, r2
  412d0a:	d906      	bls.n	412d1a <__udivdi3+0x7e>
  412d0c:	1952      	adds	r2, r2, r5
  412d0e:	f080 80da 	bcs.w	412ec6 <__udivdi3+0x22a>
  412d12:	4596      	cmp	lr, r2
  412d14:	f240 80d7 	bls.w	412ec6 <__udivdi3+0x22a>
  412d18:	3b02      	subs	r3, #2
  412d1a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  412d1e:	2600      	movs	r6, #0
  412d20:	4631      	mov	r1, r6
  412d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412d26:	428b      	cmp	r3, r1
  412d28:	d844      	bhi.n	412db4 <__udivdi3+0x118>
  412d2a:	fab3 f683 	clz	r6, r3
  412d2e:	2e00      	cmp	r6, #0
  412d30:	d145      	bne.n	412dbe <__udivdi3+0x122>
  412d32:	4282      	cmp	r2, r0
  412d34:	f240 80bf 	bls.w	412eb6 <__udivdi3+0x21a>
  412d38:	428b      	cmp	r3, r1
  412d3a:	f0c0 80bc 	bcc.w	412eb6 <__udivdi3+0x21a>
  412d3e:	4630      	mov	r0, r6
  412d40:	e7ee      	b.n	412d20 <__udivdi3+0x84>
  412d42:	b912      	cbnz	r2, 412d4a <__udivdi3+0xae>
  412d44:	2501      	movs	r5, #1
  412d46:	fbb5 f5f2 	udiv	r5, r5, r2
  412d4a:	fab5 f285 	clz	r2, r5
  412d4e:	2a00      	cmp	r2, #0
  412d50:	d17b      	bne.n	412e4a <__udivdi3+0x1ae>
  412d52:	1b4a      	subs	r2, r1, r5
  412d54:	0c2f      	lsrs	r7, r5, #16
  412d56:	fa1f fe85 	uxth.w	lr, r5
  412d5a:	2601      	movs	r6, #1
  412d5c:	0c23      	lsrs	r3, r4, #16
  412d5e:	fbb2 f0f7 	udiv	r0, r2, r7
  412d62:	fb07 2210 	mls	r2, r7, r0, r2
  412d66:	fb0e fc00 	mul.w	ip, lr, r0
  412d6a:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  412d6e:	458c      	cmp	ip, r1
  412d70:	d907      	bls.n	412d82 <__udivdi3+0xe6>
  412d72:	1949      	adds	r1, r1, r5
  412d74:	f080 80a1 	bcs.w	412eba <__udivdi3+0x21e>
  412d78:	458c      	cmp	ip, r1
  412d7a:	f240 809e 	bls.w	412eba <__udivdi3+0x21e>
  412d7e:	3802      	subs	r0, #2
  412d80:	4429      	add	r1, r5
  412d82:	ebcc 0101 	rsb	r1, ip, r1
  412d86:	b2a4      	uxth	r4, r4
  412d88:	fbb1 f3f7 	udiv	r3, r1, r7
  412d8c:	fb07 1113 	mls	r1, r7, r3, r1
  412d90:	fb0e fe03 	mul.w	lr, lr, r3
  412d94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  412d98:	45a6      	cmp	lr, r4
  412d9a:	d906      	bls.n	412daa <__udivdi3+0x10e>
  412d9c:	1964      	adds	r4, r4, r5
  412d9e:	f080 8090 	bcs.w	412ec2 <__udivdi3+0x226>
  412da2:	45a6      	cmp	lr, r4
  412da4:	f240 808d 	bls.w	412ec2 <__udivdi3+0x226>
  412da8:	3b02      	subs	r3, #2
  412daa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  412dae:	4631      	mov	r1, r6
  412db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412db4:	2600      	movs	r6, #0
  412db6:	4630      	mov	r0, r6
  412db8:	4631      	mov	r1, r6
  412dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412dbe:	f1c6 0520 	rsb	r5, r6, #32
  412dc2:	40b3      	lsls	r3, r6
  412dc4:	fa02 f706 	lsl.w	r7, r2, r6
  412dc8:	fa01 f406 	lsl.w	r4, r1, r6
  412dcc:	40ea      	lsrs	r2, r5
  412dce:	40e9      	lsrs	r1, r5
  412dd0:	fa20 f505 	lsr.w	r5, r0, r5
  412dd4:	431a      	orrs	r2, r3
  412dd6:	4325      	orrs	r5, r4
  412dd8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  412ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412de0:	b293      	uxth	r3, r2
  412de2:	fbb1 f8fc 	udiv	r8, r1, ip
  412de6:	fb0c 1118 	mls	r1, ip, r8, r1
  412dea:	fb03 f408 	mul.w	r4, r3, r8
  412dee:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  412df2:	428c      	cmp	r4, r1
  412df4:	d906      	bls.n	412e04 <__udivdi3+0x168>
  412df6:	1889      	adds	r1, r1, r2
  412df8:	d269      	bcs.n	412ece <__udivdi3+0x232>
  412dfa:	428c      	cmp	r4, r1
  412dfc:	d967      	bls.n	412ece <__udivdi3+0x232>
  412dfe:	f1a8 0802 	sub.w	r8, r8, #2
  412e02:	4411      	add	r1, r2
  412e04:	1b09      	subs	r1, r1, r4
  412e06:	b2ad      	uxth	r5, r5
  412e08:	fbb1 f4fc 	udiv	r4, r1, ip
  412e0c:	fb0c 1114 	mls	r1, ip, r4, r1
  412e10:	fb03 fe04 	mul.w	lr, r3, r4
  412e14:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  412e18:	459e      	cmp	lr, r3
  412e1a:	d905      	bls.n	412e28 <__udivdi3+0x18c>
  412e1c:	189b      	adds	r3, r3, r2
  412e1e:	d254      	bcs.n	412eca <__udivdi3+0x22e>
  412e20:	459e      	cmp	lr, r3
  412e22:	d952      	bls.n	412eca <__udivdi3+0x22e>
  412e24:	3c02      	subs	r4, #2
  412e26:	4413      	add	r3, r2
  412e28:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  412e2c:	ebce 0303 	rsb	r3, lr, r3
  412e30:	fba4 8907 	umull	r8, r9, r4, r7
  412e34:	454b      	cmp	r3, r9
  412e36:	d303      	bcc.n	412e40 <__udivdi3+0x1a4>
  412e38:	d151      	bne.n	412ede <__udivdi3+0x242>
  412e3a:	40b0      	lsls	r0, r6
  412e3c:	4540      	cmp	r0, r8
  412e3e:	d24e      	bcs.n	412ede <__udivdi3+0x242>
  412e40:	2600      	movs	r6, #0
  412e42:	1e60      	subs	r0, r4, #1
  412e44:	4631      	mov	r1, r6
  412e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412e4a:	f1c2 0620 	rsb	r6, r2, #32
  412e4e:	4095      	lsls	r5, r2
  412e50:	fa01 f302 	lsl.w	r3, r1, r2
  412e54:	fa00 f402 	lsl.w	r4, r0, r2
  412e58:	0c2f      	lsrs	r7, r5, #16
  412e5a:	40f1      	lsrs	r1, r6
  412e5c:	40f0      	lsrs	r0, r6
  412e5e:	fa1f fe85 	uxth.w	lr, r5
  412e62:	fbb1 f6f7 	udiv	r6, r1, r7
  412e66:	4318      	orrs	r0, r3
  412e68:	fb07 1116 	mls	r1, r7, r6, r1
  412e6c:	fb0e f206 	mul.w	r2, lr, r6
  412e70:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  412e74:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  412e78:	429a      	cmp	r2, r3
  412e7a:	d905      	bls.n	412e88 <__udivdi3+0x1ec>
  412e7c:	195b      	adds	r3, r3, r5
  412e7e:	d229      	bcs.n	412ed4 <__udivdi3+0x238>
  412e80:	429a      	cmp	r2, r3
  412e82:	d927      	bls.n	412ed4 <__udivdi3+0x238>
  412e84:	3e02      	subs	r6, #2
  412e86:	442b      	add	r3, r5
  412e88:	1a9b      	subs	r3, r3, r2
  412e8a:	b280      	uxth	r0, r0
  412e8c:	fbb3 fcf7 	udiv	ip, r3, r7
  412e90:	fb07 331c 	mls	r3, r7, ip, r3
  412e94:	fb0e f10c 	mul.w	r1, lr, ip
  412e98:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  412e9c:	4299      	cmp	r1, r3
  412e9e:	d906      	bls.n	412eae <__udivdi3+0x212>
  412ea0:	195b      	adds	r3, r3, r5
  412ea2:	d219      	bcs.n	412ed8 <__udivdi3+0x23c>
  412ea4:	4299      	cmp	r1, r3
  412ea6:	d917      	bls.n	412ed8 <__udivdi3+0x23c>
  412ea8:	f1ac 0c02 	sub.w	ip, ip, #2
  412eac:	442b      	add	r3, r5
  412eae:	1a5a      	subs	r2, r3, r1
  412eb0:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  412eb4:	e752      	b.n	412d5c <__udivdi3+0xc0>
  412eb6:	2001      	movs	r0, #1
  412eb8:	e732      	b.n	412d20 <__udivdi3+0x84>
  412eba:	3801      	subs	r0, #1
  412ebc:	e761      	b.n	412d82 <__udivdi3+0xe6>
  412ebe:	3801      	subs	r0, #1
  412ec0:	e718      	b.n	412cf4 <__udivdi3+0x58>
  412ec2:	3b01      	subs	r3, #1
  412ec4:	e771      	b.n	412daa <__udivdi3+0x10e>
  412ec6:	3b01      	subs	r3, #1
  412ec8:	e727      	b.n	412d1a <__udivdi3+0x7e>
  412eca:	3c01      	subs	r4, #1
  412ecc:	e7ac      	b.n	412e28 <__udivdi3+0x18c>
  412ece:	f108 38ff 	add.w	r8, r8, #4294967295
  412ed2:	e797      	b.n	412e04 <__udivdi3+0x168>
  412ed4:	3e01      	subs	r6, #1
  412ed6:	e7d7      	b.n	412e88 <__udivdi3+0x1ec>
  412ed8:	f10c 3cff 	add.w	ip, ip, #4294967295
  412edc:	e7e7      	b.n	412eae <__udivdi3+0x212>
  412ede:	4620      	mov	r0, r4
  412ee0:	2600      	movs	r6, #0
  412ee2:	e71d      	b.n	412d20 <__udivdi3+0x84>

00412ee4 <__func__.8182>:
  412ee4:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  412ef4:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  412f04:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  412f14:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  412f24:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  412f34:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  412f44:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  412f54:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  412f64:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  412f74:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  412f84:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  412f94:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  412fa4:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  412fb4:	7274 6575 203a 6166 736c 0065               true: false.

00412fc0 <__func__.8348>:
  412fc0:	7371 6970 725f 6165 0064 0000               qspi_read...

00412fcc <__func__.8364>:
  412fcc:	7371 6970 775f 6972 6574 0000 4449 454c     qspi_write..IDLE
  412fdc:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  412fec:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  412ffc:	7653 0063 5754 4849 2053 4552 492d 494e     Svc.TWIHS RE-INI
  41300c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  41301c:	5241 4554 0a44 0000 5754 4849 2053 4552     ARTED...TWIHS RE
  41302c:	492d 494e 4954 4c41 5a49 5441 4f49 204e     -INITIALIZATION 
  41303c:	202d 4946 494e 4853 4445 000a 2580 0000     - FINISHED...%..
  41304c:	00c0 0000 0800 0000 0019 0000 8040 0000     ............@...
  41305c:	c5d9 c855 454d 4c4c 5441 4f52 394e 3030     ..U.MELLATRON900
  41306c:	2030 4f42 544f 5320 5145 4555 434e 0a45     0 BOOT SEQUENCE.
  41307c:	4155 5452 4320 4e4f 4f53 454c 5320 4154     UART CONSOLE STA
  41308c:	5452 4445 4f20 204e 4155 5452 0a34 6142     RTED ON UART4.Ba
  41309c:	6475 6152 6574 203a 3131 3235 3030 420a     udRate: 115200.B
  4130ac:	7469 3a73 3820 4e0a 206f 7473 706f 6220     its: 8.No stop b
  4130bc:	7469 2073 000a 0000 454c 2044 4e49 5449     its ....LED INIT
  4130cc:	4149 494c 415a 4954 4e4f 2d20 5320 4154     IALIZATION - STA
  4130dc:	5452 4445 000a 0000 454c 2044 4e49 5449     RTED....LED INIT
  4130ec:	4149 494c 415a 4954 4e4f 2d20 4620 4e49     IALIZATION - FIN
  4130fc:	5349 4548 0a44 0000 4157 4354 4448 474f     ISHED...WATCHDOG
  41310c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41311c:	202d 5453 5241 4554 0a44 0000 4157 4354     - STARTED...WATC
  41312c:	4448 474f 4920 494e 4954 4c41 5a49 5441     HDOG INITIALIZAT
  41313c:	4f49 204e 202d 4946 494e 4853 4445 000a     ION - FINISHED..
  41314c:	4c47 424f 4c41 4920 5152 4920 494e 4954     GLOBAL IRQ INITI
  41315c:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  41316c:	4554 0a44 0000 0000 4c47 424f 4c41 4920     TED.....GLOBAL I
  41317c:	5152 4920 494e 4954 4c41 5a49 5441 4f49     RQ INITIALIZATIO
  41318c:	204e 202d 4946 494e 4853 4445 000a 0000     N - FINISHED....
  41319c:	4453 4152 204d 4e49 5449 4149 494c 415a     SDRAM INITIALIZA
  4131ac:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  4131bc:	4453 4152 204d 4f43 544e 4f52 4c4c 5245     SDRAM CONTROLLER
  4131cc:	5320 4154 5452 4445 000a 0000 4453 4152      STARTED....SDRA
  4131dc:	204d 4e49 5449 4149 494c 415a 4954 4e4f     M INITIALIZATION
  4131ec:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  4131fc:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  41320c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  41321c:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  41322c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  41323c:	0000 0000 4553 5652 204f 5244 5649 5245     ....SERVO DRIVER
  41324c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41325c:	202d 5453 5241 4554 0a44 0000 4553 5652     - STARTED...SERV
  41326c:	204f 5244 5649 5245 4920 494e 4954 4c41     O DRIVER INITIAL
  41327c:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  41328c:	4445 000a 4143 454d 4152 4920 494e 4954     ED..CAMERA INITI
  41329c:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  4132ac:	4554 0a44 0000 0000 4143 454d 4152 4920     TED.....CAMERA I
  4132bc:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  4132cc:	4946 494e 4853 4445 000a 0000 5351 4950     FINISHED....QSPI
  4132dc:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  4132ec:	202d 5453 5241 4554 0a44 0000 5351 4950     - STARTED...QSPI
  4132fc:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41330c:	202d 4946 494e 4853 4445 000a 5744 314d     - FINISHED..DWM1
  41331c:	3030 2030 4e49 5449 4149 494c 415a 4954     000 INITIALIZATI
  41332c:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  41333c:	5744 314d 3030 2030 4e49 5449 4149 494c     DWM1000 INITIALI
  41334c:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  41335c:	0a44 0000 4441 2043 4e49 5449 4149 494c     D...ADC INITIALI
  41336c:	415a 4954 4e4f 2d20 5320 4154 5452 4445     ZATION - STARTED
  41337c:	000a 0000 4441 2043 4e49 5449 4149 494c     ....ADC INITIALI
  41338c:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  41339c:	0a44 0000 5753 5449 4843 4920 494e 4954     D...SWITCH INITI
  4133ac:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  4133bc:	4554 0a44 0000 0000 5753 5449 4843 4920     TED.....SWITCH I
  4133cc:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  4133dc:	4946 494e 4853 4445 000a 0000 4550 4952     FINISHED....PERI
  4133ec:	4546 4152 204c 5249 2051 4e49 5449 4149     FERAL IRQ INITIA
  4133fc:	494c 415a 4954 4e4f 2d20 5320 4154 5452     LIZATION - START
  41340c:	4445 000a 4550 4952 4546 4152 204c 5249     ED..PERIFERAL IR
  41341c:	2051 4e49 5449 4149 494c 415a 4954 4e4f     Q INITIALIZATION
  41342c:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  41343c:	7845 7469 6e69 2067 6977 6874 7320 6174     Exiting with sta
  41344c:	7574 2073 6425 0a2e 0000 0000 454d 204d     tus %d......MEM 
  41345c:	5245 4f52 2052 5441 3020 2578 2078 203a     ERROR AT 0x%x : 
  41346c:	5845 3a50 7830 7825 2c20 5220 5643 203a     EXP:0x%x , RCV: 
  41347c:	7830 7825 0a20 0000 4453 4152 204d 5546     0x%x ...SDRAM FU
  41348c:	4c4c 4320 4548 4b43 4320 4d4f 4c50 5445     LL CHECK COMPLET
  41349c:	0045 0000 3249 2043 5245 2152 000a 0000     E...I2C ERR!....
  4134ac:	7825 202c 0000 0000 4553 5652 204f 5244     %x, ....SERVO DR
  4134bc:	5649 5245 5320 5445 5055 4320 4d4f 4c50     IVER SETUP COMPL
  4134cc:	4145 4554 000a 0000 4d49 3a47 0000 0000     EATE....IMG:....
  4134dc:	453a 444e 4d49 0a47 0000 0000 6946 696e     :ENDIMG.....Fini
  4134ec:	6873 6465 7320 7265 6f76 6320 6c61 6420     shed servo cal d
  4134fc:	7461 2061 6f46 6c6c 776f 3a73 000a 0000     ata Follows:....
  41350c:	007b 0000 6625 252c 2c66 0000 0a7d 0000     {...%f,%f,..}...
  41351c:	7453 7261 6574 2064 6573 7672 206f 6163     Started servo ca
  41352c:	0a6c 0000 454c 2544 2064 4553 2054 4f54     l...LED%d SET TO
  41353c:	2520 0a64 0000 0000 4553 5652 204f 454c      %d.....SERVO LE
  41354c:	3a47 6425 532c 5245 4f56 253a 2064 4f4d     G:%d,SERVO:%d MO
  41355c:	4556 2044 4f54 2520 0a64 0000 6142 7474     VED TO %d...Batt
  41356c:	7265 2079 6f56 746c 6761 3a65 6625 000a     ery Voltage:%f..
  41357c:	6554 7473 6544 4976 3a44 3020 2578 3830     TestDevID: 0x%08
  41358c:	0a78 0000 7953 5373 6174 7574 3a73 3020     x...SysStatus: 0
  41359c:	2578 3830 0a78 0000 5852 735f 6174 7574     x%08x...RX_statu
  4135ac:	3a73 3020 2578 3830 0a78 0000 4449 5720     s: 0x%08x...ID W
  4135bc:	4952 5454 4e45 520a 4145 2044 4142 4b43     RITTEN.READ BACK
  4135cc:	203a 7830 7825 000a 4154 4b53 2031 4e49     : 0x%x..TASK1 IN
  4135dc:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  4135ec:	4154 5452 4445 000a 4154 4b53 2031 4e49     TARTED..TASK1 IN
  4135fc:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  41360c:	4e49 5349 4548 2044 207c 4e45 4554 4952     INISHED | ENTERI
  41361c:	474e 4920 464e 4e49 5449 2045 4f4c 504f     NG INFINITE LOOP
  41362c:	000a 0000 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ....************
  41363c:	2a2a 2a2a 2a2a 2a2a 000a 0000 4157 4e52     ********....WARN
  41364c:	4e49 3a47 4220 5441 5620 4c4f 2054 5441     ING: BAT VOLT AT
  41365c:	4320 4952 4954 4143 204c 454c 4556 534c      CRITICAL LEVELS
  41366c:	000a 0000 4944 4153 4c42 4e49 2047 4553     ....DISABLING SE
  41367c:	5652 204f 5257 5449 2045 554f 0a54 0000     RVO WRITE OUT...
  41368c:	4c50 4145 4553 4420 5349 4f43 4e4e 4345     PLEASE DISCONNEC
  41369c:	2054 4142 5454 5245 2059 4f4e 2157 000a     T BATTERY NOW!..
  4136ac:	454c 2047 4f43 544e 4f52 204c 4154 4b53     LEG CONTROL TASK
  4136bc:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  4136cc:	202d 5453 5241 4554 0a44 0000 454c 2047     - STARTED...LEG 
  4136dc:	4f43 544e 4f52 204c 4154 4b53 4920 494e     CONTROL TASK INI
  4136ec:	4954 4c41 5a49 5441 4f49 204e 202d 4946     TIALIZATION - FI
  4136fc:	494e 4853 4445 7c20 4520 544e 5245 4e49     NISHED | ENTERIN
  41370c:	2047 4e49 4946 494e 4554 4c20 4f4f 0a50     G INFINITE LOOP.
  41371c:	0000 0000 4143 454d 4152 5020 4f52 4543     ....CAMERA PROCE
  41372c:	5353 4e49 2047 4154 4b53 4920 494e 4954     SSING TASK INITI
  41373c:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  41374c:	4554 0a44 0000 0000 4143 454d 4152 5020     TED.....CAMERA P
  41375c:	4f52 4543 5353 4e49 2047 4154 4b53 4920     ROCESSING TASK I
  41376c:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  41377c:	4946 494e 4853 4445 000a 0000 6863 6e61     FINISHED....chan
  41378c:	6567 2064 6970 3a78 2520 0a64 6162 646e     ged pix: %d.band
  41379c:	6977 6874 203a 6625 0a25 0000 4c43 2049     with: %f%...CLI 
  4137ac:	4154 4b53 4920 494e 4954 4c41 5a49 5441     TASK INITIALIZAT
  4137bc:	4f49 204e 202d 5453 5241 4554 0a44 0000     ION - STARTED...
  4137cc:	4c43 2049 4154 4b53 4920 494e 4954 4c41     CLI TASK INITIAL
  4137dc:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  4137ec:	4445 7c20 4520 544e 5245 4e49 2047 4e49     ED | ENTERING IN
  4137fc:	4946 494e 4554 4c20 4f4f 0a50 0000 0000     FINITE LOOP.....
  41380c:	4f43 4d4d 4e41 2044 494c 454e 5320 4154     COMMAND LINE STA
  41381c:	5452 4445 000a 0000 5946 5f50 6548 6178     RTED....FYP_Hexa
  41382c:	6f62 5f74 5441 4153 534d 3037 4d5f 4c45     bot_ATSAMS70_MEL
  41383c:	414c 5254 4e4f 3039 3030 003e 0020 0000     LATRON9000>. ...
  41384c:	656c 0064 616d 756e 7673 006f 6162 7674     led.manusvo.batv
  41385c:	6c6f 0a74 0000 0000 7564 706d 6d69 0067     olt.....dumpimg.
  41386c:	6177 6b6c 0000 0000 6177 6b6c 7963 6974     walk....walkcyti
  41387c:	656d 0000 6576 6272 736f 0065 5744 2d4d     me..verbose.DWM-
  41388c:	6574 7473 000a 0000 5744 2d4d 6573 646e     test....DWM-send
  41389c:	0000 0000 5744 2d4d 726f 654c 0a64 0000     ....DWM-orLed...
  4138ac:	5744 2d4d 5752 6574 7473 0000 5744 2d4d     DWM-RWtest..DWM-
  4138bc:	6e49 7469 000a 0000 5744 2d4d 454c 6944     Init....DWM-LEDi
  4138cc:	696e 0a74 0000 0000 5744 2d4d 5852 4e45     nit.....DWM-RXEN
  4138dc:	000a 0000 5744 2d4d 6552 6461 5852 000a     ....DWM-ReadRX..
  4138ec:	654c 676e 6874 203a 6425 000a 6f53 656d     Length: %d..Some
  4138fc:	6144 6174 203a 7325 000a 0000 6163 646d     Data: %s....camd
  41390c:	7374 0068 656d 746d 7365 0a74 0000 0000     tsh.memtest.....
  41391c:	5744 2d4d 6c63 5372 6174 7574 0a73 0000     DWM-clrStatus...
  41392c:	7673 436f 6c61 000a 7673 436f 6c61 7053     svoCal..svoCalSp
  41393c:	6365 0000 7573 7072 6972 6573 000a 0000     ec..surprise....
  41394c:	6572 616c 5378 6f76 0000 0000 7453 6e61     relaxSvo....Stan
  41395c:	5564 0a70 0000 0000 6953 4474 776f 0a6e     dUp.....SitDown.
  41396c:	0000 0000 6572 616c 4178 6c6c 000a 0000     ....relaxAll....
  41397c:	6167 7469 7554 6e72 0000 0000 6167 7469     gaitTurn....gait
  41398c:	6944 0072 6167 7469 7453 6e61 6563 0000     Dir.gaitStance..
  41399c:	6167 7469 6748 0074 6167 7469 7550 0070     gaitHgt.gaitPup.
  4139ac:	6167 7469 7453 6972 6564 0000 6167 7469     gaitStride..gait
  4139bc:	7453 6c79 0065 0000 7673 696f 686e 6269     Style...svoinhib
  4139cc:	0000 0000 7463 6c72 6d43 0064 4552 4553     ....ctrlCmd.RESE
  4139dc:	0a54 0000 5245 4f52 3a52 4320 6d6f 616d     T...ERROR: Comma
  4139ec:	646e 6e20 746f 6620 756f 646e 000a 0000     nd not found....
  4139fc:	4f42 5241 2044 4e49 5449 4149 494c 415a     BOARD INITIALIZA
  413a0c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  413a1c:	0000 0000 5452 534f 5420 5341 204b 4e49     ....RTOS TASK IN
  413a2c:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  413a3c:	4154 5452 4445 000a 4154 4b53 0031 0000     TARTED..TASK1...
  413a4c:	454c 4347 5254 544c 5341 004b 4d49 5447     LEGCTRLTASK.IMGT
  413a5c:	5341 004b 4c43 5449 5341 004b 5452 534f     ASK.CLITASK.RTOS
  413a6c:	5420 5341 204b 4e49 5449 4149 494c 415a      TASK INITIALIZA
  413a7c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  413a8c:	0000 0000 5453 5241 4954 474e 5220 4f54     ....STARTING RTO
  413a9c:	0a53 0000 5452 534f 4820 5341 5220 5445     S...RTOS HAS RET
  413aac:	5255 454e 2e44 5420 4948 2053 4853 554f     URNED. THIS SHOU
  413abc:	444c 4520 4556 2052 4148 5050 4e45 202e     LD EVER HAPPEN. 
  413acc:	5845 5254 4d45 2045 5245 4f52 0a52 0000     EXTREME ERROR...
  413adc:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
  413aec:	6d66 646f 0000 0000 7173 7472 0000 0000     fmod....sqrt....
  413afc:	0000 0000                                   ....

00413b00 <Zero>:
	...
  413b0c:	0000 8000                                   ....

00413b10 <npio2_hw>:
  413b10:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
  413b20:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
  413b30:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
  413b40:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
  413b50:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
  413b60:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
  413b70:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
  413b80:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00413b90 <two_over_pi>:
  413b90:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
  413ba0:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
  413bb0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
  413bc0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
  413bd0:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
  413be0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
  413bf0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
  413c00:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
  413c10:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
  413c20:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
  413c30:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
  413c40:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
  413c50:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
  413c60:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
  413c70:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
  413c80:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
  413c90:	e27b 0060 8c6b 00c0                         {.`.k...

00413c98 <init_jk>:
  413c98:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00413ca8 <PIo2>:
  413ca8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
  413cb8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
  413cc8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
  413cd8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

00413ce8 <atanlo>:
  413ce8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
  413cf8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

00413d08 <atanhi>:
  413d08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
  413d18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
  413d28:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  413d38:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  413d48:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  413d58:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  413d68:	0043 0000                                   C...

00413d6c <_global_impure_ptr>:
  413d6c:	00b0 2040                                   ..@ 

00413d70 <tinytens>:
  413d70:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  413d80:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  413d90:	6f43 64ac 0628 1168                         Co.d(.h.

00413d98 <fpinan.5307>:
  413d98:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
  413da8:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  413db8:	6e61 0000                                   an..

00413dbc <fpi.5271>:
  413dbc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  413dcc:	0000 0000                                   ....

00413dd0 <zeroes.6911>:
  413dd0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413de0 <blanks.6910>:
  413de0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413df0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  413e00:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  413e10:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  413e20:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  413e30:	0030 0000                                   0...

00413e34 <zeroes.6869>:
  413e34:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413e44 <blanks.6868>:
  413e44:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413e54 <_ctype_>:
  413e54:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  413e64:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413e74:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  413e84:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  413e94:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  413ea4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  413eb4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  413ec4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  413ed4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  413f58:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00413f68 <__hexdig>:
	...
  413f98:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  413fa8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413fc8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  414068:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00414078 <__mprec_tens>:
  414078:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  414088:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  414098:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4140a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4140b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4140c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4140d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4140e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4140f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  414108:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  414118:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  414128:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  414138:	9db4 79d9 7843 44ea                         ...yCx.D

00414140 <p05.5302>:
  414140:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00414150 <__mprec_bigtens>:
  414150:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  414160:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  414170:	bf3c 7f73 4fdd 7515                         <.s..O.u

00414178 <_init>:
  414178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41417a:	bf00      	nop
  41417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41417e:	bc08      	pop	{r3}
  414180:	469e      	mov	lr, r3
  414182:	4770      	bx	lr

00414184 <__init_array_start>:
  414184:	0040f305 	.word	0x0040f305

00414188 <__frame_dummy_init_array_entry>:
  414188:	00400165                                e.@.

0041418c <_fini>:
  41418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41418e:	bf00      	nop
  414190:	bcf8      	pop	{r3, r4, r5, r6, r7}
  414192:	bc08      	pop	{r3}
  414194:	469e      	mov	lr, r3
  414196:	4770      	bx	lr

00414198 <__fini_array_start>:
  414198:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <SvoCal>:
20400018:	4a08 c166 0f49 3fd7 3bb0 c09b 3394 3ff2     .Jf.I..?.;...3.?
20400028:	cbf0 c15c bf4d 3fd8 65a8 c13e 26d5 3fde     ..\.M..?.e>..&.?
20400038:	9903 bf19 4b1b 3ffe 65e0 4086 f927 4005     .....K.?.e.@'..@
20400048:	cccd 3ecc a32b 3c11 fffc c08f cccd bdcc     ...>+..<........
20400058:	ccc9 c06c 6402 bda8 665e c0c6 15ad be0d     ..l..d..^f......
20400068:	0000 bfc0 882f bd08 0000 bf00 0ae9 bc36     ..../.........6.
20400078:	ff40 413f 10fd 3f91 4884 bfca 8141 3f7b     @.?A...?.H..A.{?
20400088:	fefc bfff 4fa9 3f7a 3505 bf5c 8d9b 3f7d     .....Oz?.5\...}?
20400098:	e3ef c0eb 0835 3f6b cbcf c0fc 8783 3f69     ....5.k?......i?

204000a8 <cam_dif_tsh>:
204000a8:	0019 0000                                   ....

204000ac <__fdlib_version>:
204000ac:	0001 0000                                   ....

204000b0 <impure_data>:
204000b0:	0000 0000 039c 2040 0404 2040 046c 2040     ......@ ..@ l.@ 
	...
204000e4:	3d68 0041 0000 0000 0000 0000 0000 0000     h=A.............
	...
20400158:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400168:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004d8 <_impure_ptr>:
204004d8:	00b0 2040                                   ..@ 

204004dc <__malloc_av_>:
	...
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 
204008b4:	08ac 2040 08ac 2040 08b4 2040 08b4 2040     ..@ ..@ ..@ ..@ 
204008c4:	08bc 2040 08bc 2040 08c4 2040 08c4 2040     ..@ ..@ ..@ ..@ 
204008d4:	08cc 2040 08cc 2040 08d4 2040 08d4 2040     ..@ ..@ ..@ ..@ 

204008e4 <__malloc_trim_threshold>:
204008e4:	0000 0002                                   ....

204008e8 <__malloc_sbrk_base>:
204008e8:	ffff ffff                                   ....

204008ec <__ctype_ptr__>:
204008ec:	3e54 0041                                   T>A.

204008f0 <lconv>:
204008f0:	4070 0041 3454 0041 3454 0041 3454 0041     p@A.T4A.T4A.T4A.
20400900:	3454 0041 3454 0041 3454 0041 3454 0041     T4A.T4A.T4A.T4A.
20400910:	3454 0041 3454 0041 ffff ffff ffff ffff     T4A.T4A.........
20400920:	ffff ffff ffff 0000                         ........

20400928 <lc_ctype_charset>:
20400928:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20400948 <__mb_cur_max>:
20400948:	0001 0000                                   ....

2040094c <__wctomb>:
2040094c:	26b9 0041                                   .&A.
