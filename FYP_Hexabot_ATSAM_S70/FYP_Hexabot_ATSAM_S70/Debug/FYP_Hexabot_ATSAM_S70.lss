
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009fc4  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409fc4  00409fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008b4  20400000  00409fcc  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000ba58  204008b4  0040a880  000188b4  2**2
                  ALLOC
  4 .stack        00002004  2040c30c  004162d8  000188b4  2**0
                  ALLOC
  5 .heap         00000200  2040e310  004182dc  000188b4  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  000188b4  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  000188e7  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001504b  00000000  00000000  00018942  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003368  00000000  00000000  0002d98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009c5a  00000000  00000000  00030cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e78  00000000  00000000  0003a94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f80  00000000  00000000  0003b7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020f6d  00000000  00000000  0003c747  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013c56  00000000  00000000  0005d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00083c8c  00000000  00000000  0007130a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003418  00000000  00000000  000f4f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e310 	.word	0x2040e310
  400004:	00402cf9 	.word	0x00402cf9
  400008:	00402cf5 	.word	0x00402cf5
  40000c:	00402cf5 	.word	0x00402cf5
  400010:	00402cf5 	.word	0x00402cf5
  400014:	00402cf5 	.word	0x00402cf5
  400018:	00402cf5 	.word	0x00402cf5
	...
  40002c:	004007ed 	.word	0x004007ed
  400030:	00402cf5 	.word	0x00402cf5
  400034:	00000000 	.word	0x00000000
  400038:	00400889 	.word	0x00400889
  40003c:	004008ed 	.word	0x004008ed
  400040:	00402cf5 	.word	0x00402cf5
  400044:	00402cf5 	.word	0x00402cf5
  400048:	00402cf5 	.word	0x00402cf5
  40004c:	00402cf5 	.word	0x00402cf5
  400050:	00402cf5 	.word	0x00402cf5
  400054:	00402cf5 	.word	0x00402cf5
  400058:	00402cf5 	.word	0x00402cf5
  40005c:	00402cf5 	.word	0x00402cf5
  400060:	00402cf5 	.word	0x00402cf5
  400064:	00000000 	.word	0x00000000
  400068:	00400235 	.word	0x00400235
  40006c:	00400249 	.word	0x00400249
  400070:	0040025d 	.word	0x0040025d
  400074:	00402cf5 	.word	0x00402cf5
  400078:	00402cf5 	.word	0x00402cf5
  40007c:	00402cf5 	.word	0x00402cf5
  400080:	00400271 	.word	0x00400271
  400084:	00400285 	.word	0x00400285
  400088:	00402cf5 	.word	0x00402cf5
  40008c:	00402cf5 	.word	0x00402cf5
  400090:	00402cf5 	.word	0x00402cf5
  400094:	00402cf5 	.word	0x00402cf5
  400098:	00402cf5 	.word	0x00402cf5
  40009c:	00402cf5 	.word	0x00402cf5
  4000a0:	00402cf5 	.word	0x00402cf5
  4000a4:	00402cf5 	.word	0x00402cf5
  4000a8:	00402cf5 	.word	0x00402cf5
  4000ac:	00402cf5 	.word	0x00402cf5
  4000b0:	00402cf5 	.word	0x00402cf5
  4000b4:	00402cf5 	.word	0x00402cf5
  4000b8:	00402cf5 	.word	0x00402cf5
  4000bc:	00402cf5 	.word	0x00402cf5
  4000c0:	00402cf5 	.word	0x00402cf5
  4000c4:	00402cf5 	.word	0x00402cf5
  4000c8:	00402cf5 	.word	0x00402cf5
	...
  4000e0:	00402cf5 	.word	0x00402cf5
  4000e4:	00402cf5 	.word	0x00402cf5
  4000e8:	00402cf5 	.word	0x00402cf5
  4000ec:	00402cf5 	.word	0x00402cf5
  4000f0:	00402cf5 	.word	0x00402cf5
  4000f4:	00402cf5 	.word	0x00402cf5
  4000f8:	00402cf5 	.word	0x00402cf5
  4000fc:	00402cf5 	.word	0x00402cf5
  400100:	00402cf5 	.word	0x00402cf5
  400104:	00402cf5 	.word	0x00402cf5
  400108:	00402cf5 	.word	0x00402cf5
  40010c:	00402cf5 	.word	0x00402cf5
  400110:	00402cf5 	.word	0x00402cf5
	...
  400120:	00402cf5 	.word	0x00402cf5
  400124:	00402cf5 	.word	0x00402cf5
  400128:	00402cf5 	.word	0x00402cf5
  40012c:	00402cf5 	.word	0x00402cf5
  400130:	00402cf5 	.word	0x00402cf5
  400134:	00000000 	.word	0x00000000
  400138:	00402cf5 	.word	0x00402cf5
  40013c:	00402cf5 	.word	0x00402cf5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008b4 	.word	0x204008b4
  40015c:	00000000 	.word	0x00000000
  400160:	00409fcc 	.word	0x00409fcc

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00409fcc 	.word	0x00409fcc
  400190:	204008b8 	.word	0x204008b8
  400194:	00409fcc 	.word	0x00409fcc
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402871 	.word	0x00402871
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040414d 	.word	0x0040414d
  4001e0:	0040287d 	.word	0x0040287d

004001e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4001e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001e8:	4604      	mov	r4, r0
  4001ea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <pio_handler_process+0x44>)
  4001ee:	4798      	blx	r3
  4001f0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4001f2:	4620      	mov	r0, r4
  4001f4:	4b0d      	ldr	r3, [pc, #52]	; (40022c <pio_handler_process+0x48>)
  4001f6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4001f8:	4005      	ands	r5, r0
  4001fa:	d013      	beq.n	400224 <pio_handler_process+0x40>
  4001fc:	4c0c      	ldr	r4, [pc, #48]	; (400230 <pio_handler_process+0x4c>)
  4001fe:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400202:	6823      	ldr	r3, [r4, #0]
  400204:	4543      	cmp	r3, r8
  400206:	d108      	bne.n	40021a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400208:	6861      	ldr	r1, [r4, #4]
  40020a:	4229      	tst	r1, r5
  40020c:	d005      	beq.n	40021a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40020e:	68e3      	ldr	r3, [r4, #12]
  400210:	4640      	mov	r0, r8
  400212:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400214:	6863      	ldr	r3, [r4, #4]
  400216:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40021a:	42b4      	cmp	r4, r6
  40021c:	d002      	beq.n	400224 <pio_handler_process+0x40>
  40021e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400220:	2d00      	cmp	r5, #0
  400222:	d1ee      	bne.n	400202 <pio_handler_process+0x1e>
  400224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400228:	004024c9 	.word	0x004024c9
  40022c:	004024cd 	.word	0x004024cd
  400230:	204008d0 	.word	0x204008d0

00400234 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400234:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400236:	4802      	ldr	r0, [pc, #8]	; (400240 <PIOA_Handler+0xc>)
  400238:	210a      	movs	r1, #10
  40023a:	4b02      	ldr	r3, [pc, #8]	; (400244 <PIOA_Handler+0x10>)
  40023c:	4798      	blx	r3
  40023e:	bd08      	pop	{r3, pc}
  400240:	400e0e00 	.word	0x400e0e00
  400244:	004001e5 	.word	0x004001e5

00400248 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400248:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40024a:	4802      	ldr	r0, [pc, #8]	; (400254 <PIOB_Handler+0xc>)
  40024c:	210b      	movs	r1, #11
  40024e:	4b02      	ldr	r3, [pc, #8]	; (400258 <PIOB_Handler+0x10>)
  400250:	4798      	blx	r3
  400252:	bd08      	pop	{r3, pc}
  400254:	400e1000 	.word	0x400e1000
  400258:	004001e5 	.word	0x004001e5

0040025c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40025c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40025e:	4802      	ldr	r0, [pc, #8]	; (400268 <PIOC_Handler+0xc>)
  400260:	210c      	movs	r1, #12
  400262:	4b02      	ldr	r3, [pc, #8]	; (40026c <PIOC_Handler+0x10>)
  400264:	4798      	blx	r3
  400266:	bd08      	pop	{r3, pc}
  400268:	400e1200 	.word	0x400e1200
  40026c:	004001e5 	.word	0x004001e5

00400270 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400270:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400272:	4802      	ldr	r0, [pc, #8]	; (40027c <PIOD_Handler+0xc>)
  400274:	2110      	movs	r1, #16
  400276:	4b02      	ldr	r3, [pc, #8]	; (400280 <PIOD_Handler+0x10>)
  400278:	4798      	blx	r3
  40027a:	bd08      	pop	{r3, pc}
  40027c:	400e1400 	.word	0x400e1400
  400280:	004001e5 	.word	0x004001e5

00400284 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400284:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400286:	4802      	ldr	r0, [pc, #8]	; (400290 <PIOE_Handler+0xc>)
  400288:	2111      	movs	r1, #17
  40028a:	4b02      	ldr	r3, [pc, #8]	; (400294 <PIOE_Handler+0x10>)
  40028c:	4798      	blx	r3
  40028e:	bd08      	pop	{r3, pc}
  400290:	400e1600 	.word	0x400e1600
  400294:	004001e5 	.word	0x004001e5

00400298 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400298:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  40029a:	b930      	cbnz	r0, 4002aa <qspi_initialize+0x12>
  40029c:	4859      	ldr	r0, [pc, #356]	; (400404 <qspi_initialize+0x16c>)
  40029e:	f240 1117 	movw	r1, #279	; 0x117
  4002a2:	4a59      	ldr	r2, [pc, #356]	; (400408 <qspi_initialize+0x170>)
  4002a4:	4b59      	ldr	r3, [pc, #356]	; (40040c <qspi_initialize+0x174>)
  4002a6:	4c5a      	ldr	r4, [pc, #360]	; (400410 <qspi_initialize+0x178>)
  4002a8:	47a0      	blx	r4
  4002aa:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4002ac:	2202      	movs	r2, #2
  4002ae:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4002b0:	691a      	ldr	r2, [r3, #16]
  4002b2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002b6:	d1fb      	bne.n	4002b0 <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4002b8:	2280      	movs	r2, #128	; 0x80
  4002ba:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  4002bc:	780a      	ldrb	r2, [r1, #0]
  4002be:	2a01      	cmp	r2, #1
  4002c0:	d104      	bne.n	4002cc <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  4002c2:	685a      	ldr	r2, [r3, #4]
  4002c4:	f042 0201 	orr.w	r2, r2, #1
  4002c8:	605a      	str	r2, [r3, #4]
  4002ca:	e001      	b.n	4002d0 <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  4002cc:	685a      	ldr	r2, [r3, #4]
  4002ce:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  4002d0:	784a      	ldrb	r2, [r1, #1]
  4002d2:	b122      	cbz	r2, 4002de <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  4002d4:	685a      	ldr	r2, [r3, #4]
  4002d6:	f042 0202 	orr.w	r2, r2, #2
  4002da:	605a      	str	r2, [r3, #4]
  4002dc:	e003      	b.n	4002e6 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  4002de:	685a      	ldr	r2, [r3, #4]
  4002e0:	f022 0202 	bic.w	r2, r2, #2
  4002e4:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  4002e6:	788a      	ldrb	r2, [r1, #2]
  4002e8:	b122      	cbz	r2, 4002f4 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  4002ea:	685a      	ldr	r2, [r3, #4]
  4002ec:	f042 0204 	orr.w	r2, r2, #4
  4002f0:	605a      	str	r2, [r3, #4]
  4002f2:	e03c      	b.n	40036e <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  4002f4:	685a      	ldr	r2, [r3, #4]
  4002f6:	f022 0204 	bic.w	r2, r2, #4
  4002fa:	605a      	str	r2, [r3, #4]
  4002fc:	e037      	b.n	40036e <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  4002fe:	6a1a      	ldr	r2, [r3, #32]
  400300:	f042 0201 	orr.w	r2, r2, #1
  400304:	621a      	str	r2, [r3, #32]
  400306:	e053      	b.n	4003b0 <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400308:	6a1a      	ldr	r2, [r3, #32]
  40030a:	f022 0201 	bic.w	r2, r2, #1
  40030e:	621a      	str	r2, [r3, #32]
  400310:	e04e      	b.n	4003b0 <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  400312:	6a1a      	ldr	r2, [r3, #32]
  400314:	f042 0202 	orr.w	r2, r2, #2
  400318:	621a      	str	r2, [r3, #32]
  40031a:	e04d      	b.n	4003b8 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  40031c:	6a1a      	ldr	r2, [r3, #32]
  40031e:	f022 0202 	bic.w	r2, r2, #2
  400322:	621a      	str	r2, [r3, #32]
  400324:	e048      	b.n	4003b8 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  400326:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  400328:	0212      	lsls	r2, r2, #8
  40032a:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  40032c:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  400330:	4302      	orrs	r2, r0
  400332:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e047      	b.n	4003c8 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  400338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40033a:	f042 0201 	orr.w	r2, r2, #1
  40033e:	641a      	str	r2, [r3, #64]	; 0x40
  400340:	e003      	b.n	40034a <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  400342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  400344:	f022 0201 	bic.w	r2, r2, #1
  400348:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  40034a:	b124      	cbz	r4, 400356 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  40034c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40034e:	f042 0202 	orr.w	r2, r2, #2
  400352:	641a      	str	r2, [r3, #64]	; 0x40
  400354:	e04a      	b.n	4003ec <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  400356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  400358:	f022 0202 	bic.w	r2, r2, #2
  40035c:	641a      	str	r2, [r3, #64]	; 0x40
  40035e:	e045      	b.n	4003ec <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  400360:	6459      	str	r1, [r3, #68]	; 0x44
  400362:	e049      	b.n	4003f8 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  400364:	691a      	ldr	r2, [r3, #16]
  400366:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  40036a:	d0fb      	beq.n	400364 <qspi_initialize+0xcc>
  40036c:	e047      	b.n	4003fe <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  40036e:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  400370:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  400372:	0100      	lsls	r0, r0, #4
  400374:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  400378:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  40037c:	4302      	orrs	r2, r0
  40037e:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  400380:	685a      	ldr	r2, [r3, #4]
  400382:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400386:	684a      	ldr	r2, [r1, #4]
  400388:	4302      	orrs	r2, r0
  40038a:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  40038c:	685a      	ldr	r2, [r3, #4]
  40038e:	7a08      	ldrb	r0, [r1, #8]
  400390:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400394:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400398:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40039a:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40039c:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40039e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  4003a2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  4003a6:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  4003a8:	690a      	ldr	r2, [r1, #16]
  4003aa:	2a00      	cmp	r2, #0
  4003ac:	d0ac      	beq.n	400308 <qspi_initialize+0x70>
  4003ae:	e7a6      	b.n	4002fe <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  4003b0:	694a      	ldr	r2, [r1, #20]
  4003b2:	2a00      	cmp	r2, #0
  4003b4:	d0b2      	beq.n	40031c <qspi_initialize+0x84>
  4003b6:	e7ac      	b.n	400312 <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  4003b8:	6988      	ldr	r0, [r1, #24]
  4003ba:	4a16      	ldr	r2, [pc, #88]	; (400414 <qspi_initialize+0x17c>)
  4003bc:	fbb2 f2f0 	udiv	r2, r2, r0
  4003c0:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  4003c2:	2aff      	cmp	r2, #255	; 0xff
  4003c4:	d9af      	bls.n	400326 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  4003c6:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  4003c8:	6a1a      	ldr	r2, [r3, #32]
  4003ca:	7f0c      	ldrb	r4, [r1, #28]
  4003cc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  4003d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4003d4:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  4003d6:	f891 5020 	ldrb.w	r5, [r1, #32]
  4003da:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  4003de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4003e0:	f022 0203 	bic.w	r2, r2, #3
  4003e4:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  4003e6:	2d00      	cmp	r5, #0
  4003e8:	d1a6      	bne.n	400338 <qspi_initialize+0xa0>
  4003ea:	e7aa      	b.n	400342 <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  4003ec:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  4003ee:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  4003f2:	f012 0f01 	tst.w	r2, #1
  4003f6:	d0b3      	beq.n	400360 <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4003f8:	2201      	movs	r2, #1
  4003fa:	601a      	str	r2, [r3, #0]
  4003fc:	e7b2      	b.n	400364 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  4003fe:	b240      	sxtb	r0, r0
}
  400400:	bd38      	pop	{r3, r4, r5, pc}
  400402:	bf00      	nop
  400404:	00409b14 	.word	0x00409b14
  400408:	00409b04 	.word	0x00409b04
  40040c:	00409b38 	.word	0x00409b38
  400410:	00403e51 	.word	0x00403e51
  400414:	08f0d180 	.word	0x08f0d180

00400418 <qspi_read>:
 * \param us_data      Pointer to read data.
 * \param num_of_bytes Read data numbers.
 * \return status Read option result.
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  40041a:	b930      	cbnz	r0, 40042a <qspi_read+0x12>
  40041c:	4844      	ldr	r0, [pc, #272]	; (400530 <qspi_read+0x118>)
  40041e:	f44f 719f 	mov.w	r1, #318	; 0x13e
  400422:	4a44      	ldr	r2, [pc, #272]	; (400534 <qspi_read+0x11c>)
  400424:	4b44      	ldr	r3, [pc, #272]	; (400538 <qspi_read+0x120>)
  400426:	4c45      	ldr	r4, [pc, #276]	; (40053c <qspi_read+0x124>)
  400428:	47a0      	blx	r4
  40042a:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  40042c:	2a00      	cmp	r2, #0
  40042e:	d078      	beq.n	400522 <qspi_read+0x10a>
	uint32_t num_of_bytes_read = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
  400430:	2a01      	cmp	r2, #1
  400432:	d126      	bne.n	400482 <qspi_read+0x6a>
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  400434:	6902      	ldr	r2, [r0, #16]
  400436:	f012 0f01 	tst.w	r2, #1
  40043a:	bf08      	it	eq
  40043c:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
  400440:	d01a      	beq.n	400478 <qspi_read+0x60>
 * \return status Data value read from QSPI.
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
  400442:	691a      	ldr	r2, [r3, #16]
  400444:	f012 0f01 	tst.w	r2, #1
  400448:	d0fb      	beq.n	400442 <qspi_read+0x2a>
	return  qspi->QSPI_RDR;
  40044a:	689a      	ldr	r2, [r3, #8]
  40044c:	800a      	strh	r2, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40044e:	691a      	ldr	r2, [r3, #16]
  400450:	f012 0f04 	tst.w	r2, #4
  400454:	d0fb      	beq.n	40044e <qspi_read+0x36>
	qspi->QSPI_TDR = w_data ;
  400456:	22ff      	movs	r2, #255	; 0xff
  400458:	60da      	str	r2, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40045a:	691a      	ldr	r2, [r3, #16]
  40045c:	f012 0f02 	tst.w	r2, #2
  400460:	d0fb      	beq.n	40045a <qspi_read+0x42>
 * \return status Data value read from QSPI.
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
  400462:	691a      	ldr	r2, [r3, #16]
  400464:	f012 0f01 	tst.w	r2, #1
  400468:	d0fb      	beq.n	400462 <qspi_read+0x4a>
	return  qspi->QSPI_RDR;
  40046a:	689b      	ldr	r3, [r3, #8]
  40046c:	800b      	strh	r3, [r1, #0]
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
				*us_data = qspi_read_spi(qspi);
				qspi_write_spi(qspi, dummy);
				*us_data = qspi_read_spi(qspi);
				num_of_attempt = 0;
				status = STATUS_OK;
  40046e:	2000      	movs	r0, #0
				break;
  400470:	e05c      	b.n	40052c <qspi_read+0x114>
			} else {
				if(num_of_attempt > 0xFFFF) {
  400472:	3a01      	subs	r2, #1
  400474:	d100      	bne.n	400478 <qspi_read+0x60>
  400476:	e056      	b.n	400526 <qspi_read+0x10e>
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  400478:	6918      	ldr	r0, [r3, #16]
  40047a:	f010 0f01 	tst.w	r0, #1
  40047e:	d0f8      	beq.n	400472 <qspi_read+0x5a>
  400480:	e7df      	b.n	400442 <qspi_read+0x2a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400482:	6918      	ldr	r0, [r3, #16]
  400484:	f010 0f04 	tst.w	r0, #4
  400488:	d0fb      	beq.n	400482 <qspi_read+0x6a>
	qspi->QSPI_TDR = w_data ;
  40048a:	2000      	movs	r0, #0
  40048c:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40048e:	6918      	ldr	r0, [r3, #16]
  400490:	f010 0f02 	tst.w	r0, #2
  400494:	d0fb      	beq.n	40048e <qspi_read+0x76>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400496:	6918      	ldr	r0, [r3, #16]
  400498:	f010 0f04 	tst.w	r0, #4
  40049c:	d0fb      	beq.n	400496 <qspi_read+0x7e>
	qspi->QSPI_TDR = w_data ;
  40049e:	2000      	movs	r0, #0
  4004a0:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4004a2:	6918      	ldr	r0, [r3, #16]
  4004a4:	f010 0f02 	tst.w	r0, #2
  4004a8:	d0fb      	beq.n	4004a2 <qspi_read+0x8a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4004aa:	6918      	ldr	r0, [r3, #16]
  4004ac:	f010 0f04 	tst.w	r0, #4
  4004b0:	d0fb      	beq.n	4004aa <qspi_read+0x92>
	qspi->QSPI_TDR = w_data ;
  4004b2:	2000      	movs	r0, #0
  4004b4:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4004b6:	6918      	ldr	r0, [r3, #16]
  4004b8:	f010 0f02 	tst.w	r0, #2
  4004bc:	d0fb      	beq.n	4004b6 <qspi_read+0x9e>
  4004be:	2400      	movs	r4, #0
  4004c0:	4625      	mov	r5, r4
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
				if(num_of_bytes_read <num_of_bytes-2) qspi_write_spi(qspi, 0x00);
  4004c2:	f1a2 0e02 	sub.w	lr, r2, #2
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
	qspi->QSPI_TDR = w_data ;
  4004c6:	4627      	mov	r7, r4
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
  4004c8:	46a4      	mov	ip, r4
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  4004ca:	2619      	movs	r6, #25
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
  4004cc:	6918      	ldr	r0, [r3, #16]
  4004ce:	f010 0f02 	tst.w	r0, #2
  4004d2:	d01b      	beq.n	40050c <qspi_read+0xf4>
 * \return status Data value read from QSPI.
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
  4004d4:	6918      	ldr	r0, [r3, #16]
  4004d6:	f010 0f01 	tst.w	r0, #1
  4004da:	d0fb      	beq.n	4004d4 <qspi_read+0xbc>
	return  qspi->QSPI_RDR;
  4004dc:	6898      	ldr	r0, [r3, #8]
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
				*pw_data= qspi_read_spi(qspi);
  4004de:	7008      	strb	r0, [r1, #0]
				if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  4004e0:	6858      	ldr	r0, [r3, #4]
  4004e2:	f410 6f70 	tst.w	r0, #3840	; 0xf00
  4004e6:	d001      	beq.n	4004ec <qspi_read+0xd4>
					pw_data += sizeof(uint16_t);
  4004e8:	3102      	adds	r1, #2
  4004ea:	e000      	b.n	4004ee <qspi_read+0xd6>
				} else {
					pw_data += sizeof(uint8_t);
  4004ec:	3101      	adds	r1, #1
				}
				num_of_bytes_read++;
  4004ee:	3501      	adds	r5, #1
				num_of_attempt = 0;
				status = STATUS_OK;
				if(num_of_bytes_read <num_of_bytes-2) qspi_write_spi(qspi, 0x00);
  4004f0:	4575      	cmp	r5, lr
  4004f2:	d211      	bcs.n	400518 <qspi_read+0x100>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4004f4:	6918      	ldr	r0, [r3, #16]
  4004f6:	f010 0f04 	tst.w	r0, #4
  4004fa:	d0fb      	beq.n	4004f4 <qspi_read+0xdc>
	qspi->QSPI_TDR = w_data ;
  4004fc:	60df      	str	r7, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4004fe:	6918      	ldr	r0, [r3, #16]
  400500:	f010 0f02 	tst.w	r0, #2
  400504:	d0fb      	beq.n	4004fe <qspi_read+0xe6>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400506:	463c      	mov	r4, r7
				status = STATUS_OK;
  400508:	4660      	mov	r0, ip
  40050a:	e007      	b.n	40051c <qspi_read+0x104>
				if(num_of_bytes_read <num_of_bytes-2) qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
  40050c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  400510:	d20b      	bcs.n	40052a <qspi_read+0x112>
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
					num_of_attempt++;
  400512:	3401      	adds	r4, #1
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  400514:	4630      	mov	r0, r6
  400516:	e001      	b.n	40051c <qspi_read+0x104>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400518:	463c      	mov	r4, r7
				status = STATUS_OK;
  40051a:	4660      	mov	r0, ip
		//qspi_read_spi(qspi);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
  40051c:	42aa      	cmp	r2, r5
  40051e:	d8d5      	bhi.n	4004cc <qspi_read+0xb4>
  400520:	e004      	b.n	40052c <qspi_read+0x114>
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  400522:	2000      	movs	r0, #0
  400524:	e002      	b.n	40052c <qspi_read+0x114>
				num_of_attempt = 0;
				status = STATUS_OK;
				break;
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  400526:	20fd      	movs	r0, #253	; 0xfd
  400528:	e000      	b.n	40052c <qspi_read+0x114>
				num_of_attempt = 0;
				status = STATUS_OK;
				if(num_of_bytes_read <num_of_bytes-2) qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40052a:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  40052c:	b240      	sxtb	r0, r0
  40052e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400530:	00409b40 	.word	0x00409b40
  400534:	00409be0 	.word	0x00409be0
  400538:	00409b38 	.word	0x00409b38
  40053c:	00403e51 	.word	0x00403e51

00400540 <qspi_write>:
 * \param us_data      Pointer to data to be written.
 * \param num_of_bytes Write data numbers.
 * \return status      Write option result.
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400542:	b930      	cbnz	r0, 400552 <qspi_write+0x12>
  400544:	4823      	ldr	r0, [pc, #140]	; (4005d4 <qspi_write+0x94>)
  400546:	f44f 71c5 	mov.w	r1, #394	; 0x18a
  40054a:	4a23      	ldr	r2, [pc, #140]	; (4005d8 <qspi_write+0x98>)
  40054c:	4b23      	ldr	r3, [pc, #140]	; (4005dc <qspi_write+0x9c>)
  40054e:	4c24      	ldr	r4, [pc, #144]	; (4005e0 <qspi_write+0xa0>)
  400550:	47a0      	blx	r4
  400552:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  400554:	2a00      	cmp	r2, #0
  400556:	d038      	beq.n	4005ca <qspi_write+0x8a>
	uint32_t num_of_bytes_write = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint8_t Addr_Inc = 0;

	if (num_of_bytes == 1) {
  400558:	2a01      	cmp	r2, #1
  40055a:	d114      	bne.n	400586 <qspi_write+0x46>
  40055c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
  400560:	6918      	ldr	r0, [r3, #16]
  400562:	f010 0f02 	tst.w	r0, #2
  400566:	d00b      	beq.n	400580 <qspi_write+0x40>
				qspi_write_spi(qspi, (uint16_t)(*us_data));
  400568:	8809      	ldrh	r1, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40056a:	691a      	ldr	r2, [r3, #16]
  40056c:	f012 0f04 	tst.w	r2, #4
  400570:	d0fb      	beq.n	40056a <qspi_write+0x2a>
	qspi->QSPI_TDR = w_data ;
  400572:	60d9      	str	r1, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  400574:	691a      	ldr	r2, [r3, #16]
  400576:	f012 0f02 	tst.w	r2, #2
  40057a:	d0fb      	beq.n	400574 <qspi_write+0x34>
	if (num_of_bytes == 1) {
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
				qspi_write_spi(qspi, (uint16_t)(*us_data));
				num_of_attempt = 0;
				status = STATUS_OK;
  40057c:	2000      	movs	r0, #0
  40057e:	e027      	b.n	4005d0 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
  400580:	3a01      	subs	r2, #1
  400582:	d1ed      	bne.n	400560 <qspi_write+0x20>
  400584:	e023      	b.n	4005ce <qspi_write+0x8e>
					break;
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  400586:	6840      	ldr	r0, [r0, #4]
  400588:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
  40058c:	2800      	cmp	r0, #0
  40058e:	bf14      	ite	ne
  400590:	f04f 0e02 	movne.w	lr, #2
  400594:	f04f 0e01 	moveq.w	lr, #1
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
			Addr_Inc = sizeof(uint16_t);
  400598:	2400      	movs	r4, #0
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
			} else {
				status = STATUS_ERR_BUSY;
  40059a:	2519      	movs	r5, #25
		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
  40059c:	4627      	mov	r7, r4
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
  40059e:	6918      	ldr	r0, [r3, #16]
  4005a0:	f010 0f04 	tst.w	r0, #4
  4005a4:	d00c      	beq.n	4005c0 <qspi_write+0x80>
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
  4005a6:	780e      	ldrb	r6, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4005a8:	6918      	ldr	r0, [r3, #16]
  4005aa:	f010 0f04 	tst.w	r0, #4
  4005ae:	d0fb      	beq.n	4005a8 <qspi_write+0x68>
	qspi->QSPI_TDR = w_data ;
  4005b0:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4005b2:	6918      	ldr	r0, [r3, #16]
  4005b4:	f010 0f02 	tst.w	r0, #2
  4005b8:	d0fb      	beq.n	4005b2 <qspi_write+0x72>
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
  4005ba:	4471      	add	r1, lr
				num_of_attempt = 0;
				status = STATUS_OK;
  4005bc:	4638      	mov	r0, r7
  4005be:	e000      	b.n	4005c2 <qspi_write+0x82>
			} else {
				status = STATUS_ERR_BUSY;
  4005c0:	4628      	mov	r0, r5
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
  4005c2:	3401      	adds	r4, #1
  4005c4:	42a2      	cmp	r2, r4
  4005c6:	d2ea      	bcs.n	40059e <qspi_write+0x5e>
  4005c8:	e002      	b.n	4005d0 <qspi_write+0x90>
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  4005ca:	2000      	movs	r0, #0
  4005cc:	e000      	b.n	4005d0 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  4005ce:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  4005d0:	b240      	sxtb	r0, r0
  4005d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4005d4:	00409b40 	.word	0x00409b40
  4005d8:	00409bec 	.word	0x00409bec
  4005dc:	00409b38 	.word	0x00409b38
  4005e0:	00403e51 	.word	0x00403e51

004005e4 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4005e4:	4b48      	ldr	r3, [pc, #288]	; (400708 <sdramc_init+0x124>)
  4005e6:	781b      	ldrb	r3, [r3, #0]
  4005e8:	2bff      	cmp	r3, #255	; 0xff
  4005ea:	d100      	bne.n	4005ee <sdramc_init+0xa>
  4005ec:	e7fe      	b.n	4005ec <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  4005ee:	b470      	push	{r4, r5, r6}
  4005f0:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005f2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4005f6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005f8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4005fc:	2400      	movs	r4, #0
  4005fe:	4a43      	ldr	r2, [pc, #268]	; (40070c <sdramc_init+0x128>)
  400600:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400602:	4c41      	ldr	r4, [pc, #260]	; (400708 <sdramc_init+0x124>)
  400604:	7822      	ldrb	r2, [r4, #0]
  400606:	3201      	adds	r2, #1
  400608:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40060a:	b92b      	cbnz	r3, 400618 <sdramc_init+0x34>
		cpu_irq_enable();
  40060c:	2201      	movs	r2, #1
  40060e:	4b3f      	ldr	r3, [pc, #252]	; (40070c <sdramc_init+0x128>)
  400610:	701a      	strb	r2, [r3, #0]
  400612:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400616:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  400618:	6883      	ldr	r3, [r0, #8]
  40061a:	4a3d      	ldr	r2, [pc, #244]	; (400710 <sdramc_init+0x12c>)
  40061c:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  40061e:	2300      	movs	r3, #0
  400620:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  400622:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400624:	9301      	str	r3, [sp, #4]
  400626:	4b3b      	ldr	r3, [pc, #236]	; (400714 <sdramc_init+0x130>)
  400628:	fba3 2301 	umull	r2, r3, r3, r1
  40062c:	0c9a      	lsrs	r2, r3, #18
  40062e:	23c8      	movs	r3, #200	; 0xc8
  400630:	fb03 f302 	mul.w	r3, r3, r2
  400634:	4a38      	ldr	r2, [pc, #224]	; (400718 <sdramc_init+0x134>)
  400636:	fba2 2303 	umull	r2, r3, r2, r3
  40063a:	089b      	lsrs	r3, r3, #2
  40063c:	9a01      	ldr	r2, [sp, #4]
  40063e:	4293      	cmp	r3, r2
  400640:	d905      	bls.n	40064e <sdramc_init+0x6a>
  400642:	9a01      	ldr	r2, [sp, #4]
  400644:	3201      	adds	r2, #1
  400646:	9201      	str	r2, [sp, #4]
  400648:	9a01      	ldr	r2, [sp, #4]
  40064a:	429a      	cmp	r2, r3
  40064c:	d3f9      	bcc.n	400642 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  40064e:	4d30      	ldr	r5, [pc, #192]	; (400710 <sdramc_init+0x12c>)
  400650:	2201      	movs	r2, #1
  400652:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  400654:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  400658:	2200      	movs	r2, #0
  40065a:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  40065c:	2602      	movs	r6, #2
  40065e:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  400660:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400662:	9201      	str	r2, [sp, #4]
  400664:	9a01      	ldr	r2, [sp, #4]
  400666:	429a      	cmp	r2, r3
  400668:	d205      	bcs.n	400676 <sdramc_init+0x92>
  40066a:	9a01      	ldr	r2, [sp, #4]
  40066c:	3201      	adds	r2, #1
  40066e:	9201      	str	r2, [sp, #4]
  400670:	9a01      	ldr	r2, [sp, #4]
  400672:	429a      	cmp	r2, r3
  400674:	d3f9      	bcc.n	40066a <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400676:	4b26      	ldr	r3, [pc, #152]	; (400710 <sdramc_init+0x12c>)
  400678:	2404      	movs	r4, #4
  40067a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  40067c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  400680:	2501      	movs	r5, #1
  400682:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400684:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  400686:	2502      	movs	r5, #2
  400688:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40068a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  40068c:	2503      	movs	r5, #3
  40068e:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400690:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  400692:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  400694:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  400696:	2605      	movs	r6, #5
  400698:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  40069a:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  40069c:	2606      	movs	r6, #6
  40069e:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4006a0:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  4006a2:	2607      	movs	r6, #7
  4006a4:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4006a6:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  4006a8:	2408      	movs	r4, #8
  4006aa:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4006ac:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4006ae:	6844      	ldr	r4, [r0, #4]
  4006b0:	0064      	lsls	r4, r4, #1
  4006b2:	4414      	add	r4, r2
  4006b4:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  4006b8:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4006ba:	6844      	ldr	r4, [r0, #4]
  4006bc:	0064      	lsls	r4, r4, #1
  4006be:	4414      	add	r4, r2
  4006c0:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4006c2:	6844      	ldr	r4, [r0, #4]
  4006c4:	0064      	lsls	r4, r4, #1
  4006c6:	4414      	add	r4, r2
  4006c8:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4006ca:	6840      	ldr	r0, [r0, #4]
  4006cc:	0040      	lsls	r0, r0, #1
  4006ce:	4410      	add	r0, r2
  4006d0:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  4006d2:	2000      	movs	r0, #0
  4006d4:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  4006d6:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  4006d8:	4a10      	ldr	r2, [pc, #64]	; (40071c <sdramc_init+0x138>)
  4006da:	fba2 1201 	umull	r1, r2, r2, r1
  4006de:	0992      	lsrs	r2, r2, #6
  4006e0:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  4006e2:	9901      	ldr	r1, [sp, #4]
  4006e4:	f641 6278 	movw	r2, #7800	; 0x1e78
  4006e8:	fb02 f201 	mul.w	r2, r2, r1
  4006ec:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  4006ee:	9a01      	ldr	r2, [sp, #4]
  4006f0:	4908      	ldr	r1, [pc, #32]	; (400714 <sdramc_init+0x130>)
  4006f2:	fba1 1202 	umull	r1, r2, r1, r2
  4006f6:	0c92      	lsrs	r2, r2, #18
  4006f8:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  4006fa:	9a01      	ldr	r2, [sp, #4]
  4006fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400700:	605a      	str	r2, [r3, #4]
}
  400702:	b003      	add	sp, #12
  400704:	bc70      	pop	{r4, r5, r6}
  400706:	4770      	bx	lr
  400708:	2040c2c0 	.word	0x2040c2c0
  40070c:	20400010 	.word	0x20400010
  400710:	40084000 	.word	0x40084000
  400714:	431bde83 	.word	0x431bde83
  400718:	aaaaaaab 	.word	0xaaaaaaab
  40071c:	10624dd3 	.word	0x10624dd3

00400720 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400720:	2901      	cmp	r1, #1
  400722:	d104      	bne.n	40072e <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400724:	6882      	ldr	r2, [r0, #8]
  400726:	4b06      	ldr	r3, [pc, #24]	; (400740 <supc_switch_sclk_to_32kxtal+0x20>)
  400728:	4313      	orrs	r3, r2
  40072a:	6083      	str	r3, [r0, #8]
  40072c:	e003      	b.n	400736 <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  40072e:	6882      	ldr	r2, [r0, #8]
  400730:	4b04      	ldr	r3, [pc, #16]	; (400744 <supc_switch_sclk_to_32kxtal+0x24>)
  400732:	4013      	ands	r3, r2
  400734:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400736:	6802      	ldr	r2, [r0, #0]
  400738:	4b03      	ldr	r3, [pc, #12]	; (400748 <supc_switch_sclk_to_32kxtal+0x28>)
  40073a:	4313      	orrs	r3, r2
  40073c:	6003      	str	r3, [r0, #0]
  40073e:	4770      	bx	lr
  400740:	a5100000 	.word	0xa5100000
  400744:	5aefffff 	.word	0x5aefffff
  400748:	a5000008 	.word	0xa5000008

0040074c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40074c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400750:	6043      	str	r3, [r0, #4]
  400752:	4770      	bx	lr

00400754 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400754:	4b0d      	ldr	r3, [pc, #52]	; (40078c <prvTaskExitError+0x38>)
  400756:	681b      	ldr	r3, [r3, #0]
  400758:	f1b3 3fff 	cmp.w	r3, #4294967295
  40075c:	d00a      	beq.n	400774 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40075e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400762:	b672      	cpsid	i
  400764:	f383 8811 	msr	BASEPRI, r3
  400768:	f3bf 8f6f 	isb	sy
  40076c:	f3bf 8f4f 	dsb	sy
  400770:	b662      	cpsie	i
  400772:	e7fe      	b.n	400772 <prvTaskExitError+0x1e>
  400774:	f04f 0380 	mov.w	r3, #128	; 0x80
  400778:	b672      	cpsid	i
  40077a:	f383 8811 	msr	BASEPRI, r3
  40077e:	f3bf 8f6f 	isb	sy
  400782:	f3bf 8f4f 	dsb	sy
  400786:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400788:	e7fe      	b.n	400788 <prvTaskExitError+0x34>
  40078a:	bf00      	nop
  40078c:	2040000c 	.word	0x2040000c

00400790 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400790:	4806      	ldr	r0, [pc, #24]	; (4007ac <prvPortStartFirstTask+0x1c>)
  400792:	6800      	ldr	r0, [r0, #0]
  400794:	6800      	ldr	r0, [r0, #0]
  400796:	f380 8808 	msr	MSP, r0
  40079a:	b662      	cpsie	i
  40079c:	b661      	cpsie	f
  40079e:	f3bf 8f4f 	dsb	sy
  4007a2:	f3bf 8f6f 	isb	sy
  4007a6:	df00      	svc	0
  4007a8:	bf00      	nop
  4007aa:	0000      	.short	0x0000
  4007ac:	e000ed08 	.word	0xe000ed08

004007b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4007b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4007c0 <vPortEnableVFP+0x10>
  4007b4:	6801      	ldr	r1, [r0, #0]
  4007b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4007ba:	6001      	str	r1, [r0, #0]
  4007bc:	4770      	bx	lr
  4007be:	0000      	.short	0x0000
  4007c0:	e000ed88 	.word	0xe000ed88

004007c4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4007c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4007c8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4007cc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4007d0:	4b05      	ldr	r3, [pc, #20]	; (4007e8 <pxPortInitialiseStack+0x24>)
  4007d2:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4007d6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4007da:	f06f 0302 	mvn.w	r3, #2
  4007de:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4007e2:	3844      	subs	r0, #68	; 0x44
  4007e4:	4770      	bx	lr
  4007e6:	bf00      	nop
  4007e8:	00400755 	.word	0x00400755

004007ec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4007ec:	4b06      	ldr	r3, [pc, #24]	; (400808 <pxCurrentTCBConst2>)
  4007ee:	6819      	ldr	r1, [r3, #0]
  4007f0:	6808      	ldr	r0, [r1, #0]
  4007f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007f6:	f380 8809 	msr	PSP, r0
  4007fa:	f3bf 8f6f 	isb	sy
  4007fe:	f04f 0000 	mov.w	r0, #0
  400802:	f380 8811 	msr	BASEPRI, r0
  400806:	4770      	bx	lr

00400808 <pxCurrentTCBConst2>:
  400808:	2040c1f4 	.word	0x2040c1f4

0040080c <vPortEnterCritical>:
  40080c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400810:	b672      	cpsid	i
  400812:	f383 8811 	msr	BASEPRI, r3
  400816:	f3bf 8f6f 	isb	sy
  40081a:	f3bf 8f4f 	dsb	sy
  40081e:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400820:	4a0b      	ldr	r2, [pc, #44]	; (400850 <vPortEnterCritical+0x44>)
  400822:	6813      	ldr	r3, [r2, #0]
  400824:	3301      	adds	r3, #1
  400826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400828:	2b01      	cmp	r3, #1
  40082a:	d10f      	bne.n	40084c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40082c:	4b09      	ldr	r3, [pc, #36]	; (400854 <vPortEnterCritical+0x48>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	f013 0fff 	tst.w	r3, #255	; 0xff
  400834:	d00a      	beq.n	40084c <vPortEnterCritical+0x40>
  400836:	f04f 0380 	mov.w	r3, #128	; 0x80
  40083a:	b672      	cpsid	i
  40083c:	f383 8811 	msr	BASEPRI, r3
  400840:	f3bf 8f6f 	isb	sy
  400844:	f3bf 8f4f 	dsb	sy
  400848:	b662      	cpsie	i
  40084a:	e7fe      	b.n	40084a <vPortEnterCritical+0x3e>
  40084c:	4770      	bx	lr
  40084e:	bf00      	nop
  400850:	2040000c 	.word	0x2040000c
  400854:	e000ed04 	.word	0xe000ed04

00400858 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400858:	4b0a      	ldr	r3, [pc, #40]	; (400884 <vPortExitCritical+0x2c>)
  40085a:	681b      	ldr	r3, [r3, #0]
  40085c:	b953      	cbnz	r3, 400874 <vPortExitCritical+0x1c>
  40085e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400862:	b672      	cpsid	i
  400864:	f383 8811 	msr	BASEPRI, r3
  400868:	f3bf 8f6f 	isb	sy
  40086c:	f3bf 8f4f 	dsb	sy
  400870:	b662      	cpsie	i
  400872:	e7fe      	b.n	400872 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400874:	3b01      	subs	r3, #1
  400876:	4a03      	ldr	r2, [pc, #12]	; (400884 <vPortExitCritical+0x2c>)
  400878:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40087a:	b90b      	cbnz	r3, 400880 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40087c:	f383 8811 	msr	BASEPRI, r3
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	2040000c 	.word	0x2040000c

00400888 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400888:	f3ef 8009 	mrs	r0, PSP
  40088c:	f3bf 8f6f 	isb	sy
  400890:	4b15      	ldr	r3, [pc, #84]	; (4008e8 <pxCurrentTCBConst>)
  400892:	681a      	ldr	r2, [r3, #0]
  400894:	f01e 0f10 	tst.w	lr, #16
  400898:	bf08      	it	eq
  40089a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40089e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008a2:	6010      	str	r0, [r2, #0]
  4008a4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4008a8:	f04f 0080 	mov.w	r0, #128	; 0x80
  4008ac:	b672      	cpsid	i
  4008ae:	f380 8811 	msr	BASEPRI, r0
  4008b2:	f3bf 8f4f 	dsb	sy
  4008b6:	f3bf 8f6f 	isb	sy
  4008ba:	b662      	cpsie	i
  4008bc:	f001 f8ea 	bl	401a94 <vTaskSwitchContext>
  4008c0:	f04f 0000 	mov.w	r0, #0
  4008c4:	f380 8811 	msr	BASEPRI, r0
  4008c8:	bc08      	pop	{r3}
  4008ca:	6819      	ldr	r1, [r3, #0]
  4008cc:	6808      	ldr	r0, [r1, #0]
  4008ce:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008d2:	f01e 0f10 	tst.w	lr, #16
  4008d6:	bf08      	it	eq
  4008d8:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4008dc:	f380 8809 	msr	PSP, r0
  4008e0:	f3bf 8f6f 	isb	sy
  4008e4:	4770      	bx	lr
  4008e6:	bf00      	nop

004008e8 <pxCurrentTCBConst>:
  4008e8:	2040c1f4 	.word	0x2040c1f4

004008ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4008ec:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4008ee:	f3ef 8311 	mrs	r3, BASEPRI
  4008f2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4008f6:	b672      	cpsid	i
  4008f8:	f382 8811 	msr	BASEPRI, r2
  4008fc:	f3bf 8f6f 	isb	sy
  400900:	f3bf 8f4f 	dsb	sy
  400904:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400906:	4b05      	ldr	r3, [pc, #20]	; (40091c <SysTick_Handler+0x30>)
  400908:	4798      	blx	r3
  40090a:	b118      	cbz	r0, 400914 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40090c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400910:	4b03      	ldr	r3, [pc, #12]	; (400920 <SysTick_Handler+0x34>)
  400912:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400914:	2300      	movs	r3, #0
  400916:	f383 8811 	msr	BASEPRI, r3
  40091a:	bd08      	pop	{r3, pc}
  40091c:	004016cd 	.word	0x004016cd
  400920:	e000ed04 	.word	0xe000ed04

00400924 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400924:	4a03      	ldr	r2, [pc, #12]	; (400934 <vPortSetupTimerInterrupt+0x10>)
  400926:	4b04      	ldr	r3, [pc, #16]	; (400938 <vPortSetupTimerInterrupt+0x14>)
  400928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40092a:	2207      	movs	r2, #7
  40092c:	3b04      	subs	r3, #4
  40092e:	601a      	str	r2, [r3, #0]
  400930:	4770      	bx	lr
  400932:	bf00      	nop
  400934:	000493df 	.word	0x000493df
  400938:	e000e014 	.word	0xe000e014

0040093c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  40093c:	b500      	push	{lr}
  40093e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400940:	4b25      	ldr	r3, [pc, #148]	; (4009d8 <xPortStartScheduler+0x9c>)
  400942:	781a      	ldrb	r2, [r3, #0]
  400944:	b2d2      	uxtb	r2, r2
  400946:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400948:	22ff      	movs	r2, #255	; 0xff
  40094a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40094c:	781b      	ldrb	r3, [r3, #0]
  40094e:	b2db      	uxtb	r3, r3
  400950:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400954:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400958:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40095c:	4a1f      	ldr	r2, [pc, #124]	; (4009dc <xPortStartScheduler+0xa0>)
  40095e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400960:	2207      	movs	r2, #7
  400962:	4b1f      	ldr	r3, [pc, #124]	; (4009e0 <xPortStartScheduler+0xa4>)
  400964:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400966:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40096a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40096e:	d010      	beq.n	400992 <xPortStartScheduler+0x56>
  400970:	2206      	movs	r2, #6
  400972:	e000      	b.n	400976 <xPortStartScheduler+0x3a>
  400974:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400976:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40097a:	005b      	lsls	r3, r3, #1
  40097c:	b2db      	uxtb	r3, r3
  40097e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400982:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400986:	1e51      	subs	r1, r2, #1
  400988:	f013 0f80 	tst.w	r3, #128	; 0x80
  40098c:	d1f2      	bne.n	400974 <xPortStartScheduler+0x38>
  40098e:	4b14      	ldr	r3, [pc, #80]	; (4009e0 <xPortStartScheduler+0xa4>)
  400990:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400992:	4a13      	ldr	r2, [pc, #76]	; (4009e0 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400994:	6813      	ldr	r3, [r2, #0]
  400996:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40099c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40099e:	9b01      	ldr	r3, [sp, #4]
  4009a0:	b2db      	uxtb	r3, r3
  4009a2:	4a0d      	ldr	r2, [pc, #52]	; (4009d8 <xPortStartScheduler+0x9c>)
  4009a4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4009a6:	4b0f      	ldr	r3, [pc, #60]	; (4009e4 <xPortStartScheduler+0xa8>)
  4009a8:	681a      	ldr	r2, [r3, #0]
  4009aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4009ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4009b0:	681a      	ldr	r2, [r3, #0]
  4009b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4009b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4009b8:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <xPortStartScheduler+0xac>)
  4009ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4009bc:	2200      	movs	r2, #0
  4009be:	4b0b      	ldr	r3, [pc, #44]	; (4009ec <xPortStartScheduler+0xb0>)
  4009c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4009c2:	4b0b      	ldr	r3, [pc, #44]	; (4009f0 <xPortStartScheduler+0xb4>)
  4009c4:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4009c6:	4a0b      	ldr	r2, [pc, #44]	; (4009f4 <xPortStartScheduler+0xb8>)
  4009c8:	6813      	ldr	r3, [r2, #0]
  4009ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4009ce:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4009d0:	4b09      	ldr	r3, [pc, #36]	; (4009f8 <xPortStartScheduler+0xbc>)
  4009d2:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4009d4:	4b09      	ldr	r3, [pc, #36]	; (4009fc <xPortStartScheduler+0xc0>)
  4009d6:	4798      	blx	r3
  4009d8:	e000e400 	.word	0xe000e400
  4009dc:	20400940 	.word	0x20400940
  4009e0:	20400944 	.word	0x20400944
  4009e4:	e000ed20 	.word	0xe000ed20
  4009e8:	00400925 	.word	0x00400925
  4009ec:	2040000c 	.word	0x2040000c
  4009f0:	004007b1 	.word	0x004007b1
  4009f4:	e000ef34 	.word	0xe000ef34
  4009f8:	00400791 	.word	0x00400791
  4009fc:	00400755 	.word	0x00400755

00400a00 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400a00:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400a04:	2b0f      	cmp	r3, #15
  400a06:	d911      	bls.n	400a2c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400a08:	4a12      	ldr	r2, [pc, #72]	; (400a54 <vPortValidateInterruptPriority+0x54>)
  400a0a:	5c9b      	ldrb	r3, [r3, r2]
  400a0c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400a0e:	4a12      	ldr	r2, [pc, #72]	; (400a58 <vPortValidateInterruptPriority+0x58>)
  400a10:	7812      	ldrb	r2, [r2, #0]
  400a12:	429a      	cmp	r2, r3
  400a14:	d90a      	bls.n	400a2c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a1a:	b672      	cpsid	i
  400a1c:	f383 8811 	msr	BASEPRI, r3
  400a20:	f3bf 8f6f 	isb	sy
  400a24:	f3bf 8f4f 	dsb	sy
  400a28:	b662      	cpsie	i
  400a2a:	e7fe      	b.n	400a2a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400a2c:	4b0b      	ldr	r3, [pc, #44]	; (400a5c <vPortValidateInterruptPriority+0x5c>)
  400a2e:	681b      	ldr	r3, [r3, #0]
  400a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400a34:	4a0a      	ldr	r2, [pc, #40]	; (400a60 <vPortValidateInterruptPriority+0x60>)
  400a36:	6812      	ldr	r2, [r2, #0]
  400a38:	4293      	cmp	r3, r2
  400a3a:	d90a      	bls.n	400a52 <vPortValidateInterruptPriority+0x52>
  400a3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a40:	b672      	cpsid	i
  400a42:	f383 8811 	msr	BASEPRI, r3
  400a46:	f3bf 8f6f 	isb	sy
  400a4a:	f3bf 8f4f 	dsb	sy
  400a4e:	b662      	cpsie	i
  400a50:	e7fe      	b.n	400a50 <vPortValidateInterruptPriority+0x50>
  400a52:	4770      	bx	lr
  400a54:	e000e3f0 	.word	0xe000e3f0
  400a58:	20400940 	.word	0x20400940
  400a5c:	e000ed0c 	.word	0xe000ed0c
  400a60:	20400944 	.word	0x20400944

00400a64 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400a64:	b538      	push	{r3, r4, r5, lr}
  400a66:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400a68:	f010 0f07 	tst.w	r0, #7
  400a6c:	d002      	beq.n	400a74 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400a6e:	f020 0407 	bic.w	r4, r0, #7
  400a72:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400a74:	4b0e      	ldr	r3, [pc, #56]	; (400ab0 <pvPortMalloc+0x4c>)
  400a76:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400a78:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <pvPortMalloc+0x50>)
  400a7a:	681b      	ldr	r3, [r3, #0]
  400a7c:	b923      	cbnz	r3, 400a88 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400a7e:	4b0e      	ldr	r3, [pc, #56]	; (400ab8 <pvPortMalloc+0x54>)
  400a80:	f023 0307 	bic.w	r3, r3, #7
  400a84:	4a0b      	ldr	r2, [pc, #44]	; (400ab4 <pvPortMalloc+0x50>)
  400a86:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400a88:	4b0c      	ldr	r3, [pc, #48]	; (400abc <pvPortMalloc+0x58>)
  400a8a:	681b      	ldr	r3, [r3, #0]
  400a8c:	441c      	add	r4, r3
  400a8e:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400a92:	4294      	cmp	r4, r2
  400a94:	d807      	bhi.n	400aa6 <pvPortMalloc+0x42>
  400a96:	42a3      	cmp	r3, r4
  400a98:	d205      	bcs.n	400aa6 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400a9a:	4a06      	ldr	r2, [pc, #24]	; (400ab4 <pvPortMalloc+0x50>)
  400a9c:	6815      	ldr	r5, [r2, #0]
  400a9e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400aa0:	4b06      	ldr	r3, [pc, #24]	; (400abc <pvPortMalloc+0x58>)
  400aa2:	601c      	str	r4, [r3, #0]
  400aa4:	e000      	b.n	400aa8 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400aa6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400aa8:	4b05      	ldr	r3, [pc, #20]	; (400ac0 <pvPortMalloc+0x5c>)
  400aaa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400aac:	4628      	mov	r0, r5
  400aae:	bd38      	pop	{r3, r4, r5, pc}
  400ab0:	004016b1 	.word	0x004016b1
  400ab4:	2040c14c 	.word	0x2040c14c
  400ab8:	20400954 	.word	0x20400954
  400abc:	20400948 	.word	0x20400948
  400ac0:	00401801 	.word	0x00401801

00400ac4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400ac4:	b150      	cbz	r0, 400adc <vPortFree+0x18>
  400ac6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aca:	b672      	cpsid	i
  400acc:	f383 8811 	msr	BASEPRI, r3
  400ad0:	f3bf 8f6f 	isb	sy
  400ad4:	f3bf 8f4f 	dsb	sy
  400ad8:	b662      	cpsie	i
  400ada:	e7fe      	b.n	400ada <vPortFree+0x16>
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop

00400ae0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ae0:	f100 0308 	add.w	r3, r0, #8
  400ae4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400ae6:	f04f 32ff 	mov.w	r2, #4294967295
  400aea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400aee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400af0:	2300      	movs	r3, #0
  400af2:	6003      	str	r3, [r0, #0]
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop

00400af8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400af8:	2300      	movs	r3, #0
  400afa:	6103      	str	r3, [r0, #16]
  400afc:	4770      	bx	lr
  400afe:	bf00      	nop

00400b00 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400b00:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400b02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400b04:	689a      	ldr	r2, [r3, #8]
  400b06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400b08:	689a      	ldr	r2, [r3, #8]
  400b0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400b0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b10:	6803      	ldr	r3, [r0, #0]
  400b12:	3301      	adds	r3, #1
  400b14:	6003      	str	r3, [r0, #0]
  400b16:	4770      	bx	lr

00400b18 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400b18:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b1a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400b1c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400b20:	d101      	bne.n	400b26 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400b22:	6902      	ldr	r2, [r0, #16]
  400b24:	e007      	b.n	400b36 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b26:	f100 0208 	add.w	r2, r0, #8
  400b2a:	e000      	b.n	400b2e <vListInsert+0x16>
  400b2c:	461a      	mov	r2, r3
  400b2e:	6853      	ldr	r3, [r2, #4]
  400b30:	681c      	ldr	r4, [r3, #0]
  400b32:	42a5      	cmp	r5, r4
  400b34:	d2fa      	bcs.n	400b2c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400b36:	6853      	ldr	r3, [r2, #4]
  400b38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400b3c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400b3e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b42:	6803      	ldr	r3, [r0, #0]
  400b44:	3301      	adds	r3, #1
  400b46:	6003      	str	r3, [r0, #0]
}
  400b48:	bc30      	pop	{r4, r5}
  400b4a:	4770      	bx	lr

00400b4c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b4c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b4e:	6842      	ldr	r2, [r0, #4]
  400b50:	6881      	ldr	r1, [r0, #8]
  400b52:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b54:	6882      	ldr	r2, [r0, #8]
  400b56:	6841      	ldr	r1, [r0, #4]
  400b58:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b5a:	685a      	ldr	r2, [r3, #4]
  400b5c:	4282      	cmp	r2, r0
  400b5e:	d101      	bne.n	400b64 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b60:	6892      	ldr	r2, [r2, #8]
  400b62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b64:	2200      	movs	r2, #0
  400b66:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b68:	6818      	ldr	r0, [r3, #0]
  400b6a:	3801      	subs	r0, #1
  400b6c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400b6e:	4770      	bx	lr

00400b70 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400b70:	b538      	push	{r3, r4, r5, lr}
  400b72:	4604      	mov	r4, r0
  400b74:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400b76:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b78:	b942      	cbnz	r2, 400b8c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400b7a:	6803      	ldr	r3, [r0, #0]
  400b7c:	2b00      	cmp	r3, #0
  400b7e:	d12b      	bne.n	400bd8 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400b80:	6840      	ldr	r0, [r0, #4]
  400b82:	4b1b      	ldr	r3, [pc, #108]	; (400bf0 <prvCopyDataToQueue+0x80>)
  400b84:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400b86:	2300      	movs	r3, #0
  400b88:	6063      	str	r3, [r4, #4]
  400b8a:	e02c      	b.n	400be6 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400b8c:	b96d      	cbnz	r5, 400baa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400b8e:	6880      	ldr	r0, [r0, #8]
  400b90:	4b18      	ldr	r3, [pc, #96]	; (400bf4 <prvCopyDataToQueue+0x84>)
  400b92:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400b94:	68a2      	ldr	r2, [r4, #8]
  400b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b98:	4413      	add	r3, r2
  400b9a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400b9c:	6862      	ldr	r2, [r4, #4]
  400b9e:	4293      	cmp	r3, r2
  400ba0:	d31c      	bcc.n	400bdc <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ba2:	6823      	ldr	r3, [r4, #0]
  400ba4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400ba6:	2000      	movs	r0, #0
  400ba8:	e01d      	b.n	400be6 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400baa:	68c0      	ldr	r0, [r0, #12]
  400bac:	4b11      	ldr	r3, [pc, #68]	; (400bf4 <prvCopyDataToQueue+0x84>)
  400bae:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400bb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400bb2:	425b      	negs	r3, r3
  400bb4:	68e2      	ldr	r2, [r4, #12]
  400bb6:	441a      	add	r2, r3
  400bb8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400bba:	6821      	ldr	r1, [r4, #0]
  400bbc:	428a      	cmp	r2, r1
  400bbe:	d202      	bcs.n	400bc6 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400bc0:	6862      	ldr	r2, [r4, #4]
  400bc2:	4413      	add	r3, r2
  400bc4:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400bc6:	2d02      	cmp	r5, #2
  400bc8:	d10a      	bne.n	400be0 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400bcc:	b153      	cbz	r3, 400be4 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400bd0:	3b01      	subs	r3, #1
  400bd2:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400bd4:	2000      	movs	r0, #0
  400bd6:	e006      	b.n	400be6 <prvCopyDataToQueue+0x76>
  400bd8:	2000      	movs	r0, #0
  400bda:	e004      	b.n	400be6 <prvCopyDataToQueue+0x76>
  400bdc:	2000      	movs	r0, #0
  400bde:	e002      	b.n	400be6 <prvCopyDataToQueue+0x76>
  400be0:	2000      	movs	r0, #0
  400be2:	e000      	b.n	400be6 <prvCopyDataToQueue+0x76>
  400be4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400be8:	3301      	adds	r3, #1
  400bea:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400bec:	bd38      	pop	{r3, r4, r5, pc}
  400bee:	bf00      	nop
  400bf0:	00401e61 	.word	0x00401e61
  400bf4:	00403f2d 	.word	0x00403f2d

00400bf8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400bf8:	b530      	push	{r4, r5, lr}
  400bfa:	b083      	sub	sp, #12
  400bfc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400bfe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400c00:	b954      	cbnz	r4, 400c18 <prvNotifyQueueSetContainer+0x20>
  400c02:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c06:	b672      	cpsid	i
  400c08:	f383 8811 	msr	BASEPRI, r3
  400c0c:	f3bf 8f6f 	isb	sy
  400c10:	f3bf 8f4f 	dsb	sy
  400c14:	b662      	cpsie	i
  400c16:	e7fe      	b.n	400c16 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c1c:	429a      	cmp	r2, r3
  400c1e:	d30a      	bcc.n	400c36 <prvNotifyQueueSetContainer+0x3e>
  400c20:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c24:	b672      	cpsid	i
  400c26:	f383 8811 	msr	BASEPRI, r3
  400c2a:	f3bf 8f6f 	isb	sy
  400c2e:	f3bf 8f4f 	dsb	sy
  400c32:	b662      	cpsie	i
  400c34:	e7fe      	b.n	400c34 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400c36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c38:	4293      	cmp	r3, r2
  400c3a:	d917      	bls.n	400c6c <prvNotifyQueueSetContainer+0x74>
  400c3c:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400c3e:	4620      	mov	r0, r4
  400c40:	a901      	add	r1, sp, #4
  400c42:	4b0c      	ldr	r3, [pc, #48]	; (400c74 <prvNotifyQueueSetContainer+0x7c>)
  400c44:	4798      	blx	r3
  400c46:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400c48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c4e:	d109      	bne.n	400c64 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c52:	b163      	cbz	r3, 400c6e <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400c54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c58:	4b07      	ldr	r3, [pc, #28]	; (400c78 <prvNotifyQueueSetContainer+0x80>)
  400c5a:	4798      	blx	r3
  400c5c:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400c5e:	bf18      	it	ne
  400c60:	2501      	movne	r5, #1
  400c62:	e004      	b.n	400c6e <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400c64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c66:	3301      	adds	r3, #1
  400c68:	64a3      	str	r3, [r4, #72]	; 0x48
  400c6a:	e000      	b.n	400c6e <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400c6c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400c6e:	4628      	mov	r0, r5
  400c70:	b003      	add	sp, #12
  400c72:	bd30      	pop	{r4, r5, pc}
  400c74:	00400b71 	.word	0x00400b71
  400c78:	00401c31 	.word	0x00401c31

00400c7c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400c7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c7e:	b172      	cbz	r2, 400c9e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400c80:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400c82:	68c3      	ldr	r3, [r0, #12]
  400c84:	4413      	add	r3, r2
  400c86:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400c88:	6844      	ldr	r4, [r0, #4]
  400c8a:	42a3      	cmp	r3, r4
  400c8c:	d301      	bcc.n	400c92 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400c8e:	6803      	ldr	r3, [r0, #0]
  400c90:	60c3      	str	r3, [r0, #12]
  400c92:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400c94:	4608      	mov	r0, r1
  400c96:	68d9      	ldr	r1, [r3, #12]
  400c98:	4b01      	ldr	r3, [pc, #4]	; (400ca0 <prvCopyDataFromQueue+0x24>)
  400c9a:	4798      	blx	r3
  400c9c:	bd10      	pop	{r4, pc}
  400c9e:	4770      	bx	lr
  400ca0:	00403f2d 	.word	0x00403f2d

00400ca4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ca6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400ca8:	4b20      	ldr	r3, [pc, #128]	; (400d2c <prvUnlockQueue+0x88>)
  400caa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400cac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cae:	2b00      	cmp	r3, #0
  400cb0:	dd18      	ble.n	400ce4 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400cb2:	4d1f      	ldr	r5, [pc, #124]	; (400d30 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400cb4:	4f1f      	ldr	r7, [pc, #124]	; (400d34 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cb6:	4e20      	ldr	r6, [pc, #128]	; (400d38 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400cba:	b133      	cbz	r3, 400cca <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400cbc:	4620      	mov	r0, r4
  400cbe:	2100      	movs	r1, #0
  400cc0:	47a8      	blx	r5
  400cc2:	2801      	cmp	r0, #1
  400cc4:	d108      	bne.n	400cd8 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400cc6:	47b8      	blx	r7
  400cc8:	e006      	b.n	400cd8 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ccc:	b153      	cbz	r3, 400ce4 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400cce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cd2:	47b0      	blx	r6
  400cd4:	b100      	cbz	r0, 400cd8 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400cd6:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400cd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cda:	3b01      	subs	r3, #1
  400cdc:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400cde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	dce9      	bgt.n	400cb8 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400ce4:	f04f 33ff 	mov.w	r3, #4294967295
  400ce8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400cea:	4b14      	ldr	r3, [pc, #80]	; (400d3c <prvUnlockQueue+0x98>)
  400cec:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400cee:	4b0f      	ldr	r3, [pc, #60]	; (400d2c <prvUnlockQueue+0x88>)
  400cf0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	dd13      	ble.n	400d20 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400cf8:	6923      	ldr	r3, [r4, #16]
  400cfa:	b91b      	cbnz	r3, 400d04 <prvUnlockQueue+0x60>
  400cfc:	e010      	b.n	400d20 <prvUnlockQueue+0x7c>
  400cfe:	6923      	ldr	r3, [r4, #16]
  400d00:	b923      	cbnz	r3, 400d0c <prvUnlockQueue+0x68>
  400d02:	e00d      	b.n	400d20 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d04:	f104 0610 	add.w	r6, r4, #16
  400d08:	4d0b      	ldr	r5, [pc, #44]	; (400d38 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400d0a:	4f0a      	ldr	r7, [pc, #40]	; (400d34 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400d0c:	4630      	mov	r0, r6
  400d0e:	47a8      	blx	r5
  400d10:	b100      	cbz	r0, 400d14 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400d12:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400d14:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d16:	3b01      	subs	r3, #1
  400d18:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	dcee      	bgt.n	400cfe <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400d20:	f04f 33ff 	mov.w	r3, #4294967295
  400d24:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400d26:	4b05      	ldr	r3, [pc, #20]	; (400d3c <prvUnlockQueue+0x98>)
  400d28:	4798      	blx	r3
  400d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d2c:	0040080d 	.word	0x0040080d
  400d30:	00400bf9 	.word	0x00400bf9
  400d34:	00401d8d 	.word	0x00401d8d
  400d38:	00401c31 	.word	0x00401c31
  400d3c:	00400859 	.word	0x00400859

00400d40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400d40:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400d42:	b950      	cbnz	r0, 400d5a <xQueueGenericReset+0x1a>
  400d44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d48:	b672      	cpsid	i
  400d4a:	f383 8811 	msr	BASEPRI, r3
  400d4e:	f3bf 8f6f 	isb	sy
  400d52:	f3bf 8f4f 	dsb	sy
  400d56:	b662      	cpsie	i
  400d58:	e7fe      	b.n	400d58 <xQueueGenericReset+0x18>
  400d5a:	4604      	mov	r4, r0
  400d5c:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400d5e:	4b18      	ldr	r3, [pc, #96]	; (400dc0 <xQueueGenericReset+0x80>)
  400d60:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400d62:	6822      	ldr	r2, [r4, #0]
  400d64:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400d66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d68:	fb03 f301 	mul.w	r3, r3, r1
  400d6c:	18d0      	adds	r0, r2, r3
  400d6e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400d70:	2000      	movs	r0, #0
  400d72:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400d74:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400d76:	1a5b      	subs	r3, r3, r1
  400d78:	4413      	add	r3, r2
  400d7a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400d7c:	f04f 33ff 	mov.w	r3, #4294967295
  400d80:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400d82:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400d84:	b985      	cbnz	r5, 400da8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d86:	6923      	ldr	r3, [r4, #16]
  400d88:	b1ab      	cbz	r3, 400db6 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d8a:	f104 0010 	add.w	r0, r4, #16
  400d8e:	4b0d      	ldr	r3, [pc, #52]	; (400dc4 <xQueueGenericReset+0x84>)
  400d90:	4798      	blx	r3
  400d92:	2801      	cmp	r0, #1
  400d94:	d10f      	bne.n	400db6 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d9a:	4b0b      	ldr	r3, [pc, #44]	; (400dc8 <xQueueGenericReset+0x88>)
  400d9c:	601a      	str	r2, [r3, #0]
  400d9e:	f3bf 8f4f 	dsb	sy
  400da2:	f3bf 8f6f 	isb	sy
  400da6:	e006      	b.n	400db6 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400da8:	f104 0010 	add.w	r0, r4, #16
  400dac:	4d07      	ldr	r5, [pc, #28]	; (400dcc <xQueueGenericReset+0x8c>)
  400dae:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400db0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400db4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400db6:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <xQueueGenericReset+0x90>)
  400db8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400dba:	2001      	movs	r0, #1
  400dbc:	bd38      	pop	{r3, r4, r5, pc}
  400dbe:	bf00      	nop
  400dc0:	0040080d 	.word	0x0040080d
  400dc4:	00401c31 	.word	0x00401c31
  400dc8:	e000ed04 	.word	0xe000ed04
  400dcc:	00400ae1 	.word	0x00400ae1
  400dd0:	00400859 	.word	0x00400859

00400dd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400dd6:	b950      	cbnz	r0, 400dee <xQueueGenericCreate+0x1a>
  400dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ddc:	b672      	cpsid	i
  400dde:	f383 8811 	msr	BASEPRI, r3
  400de2:	f3bf 8f6f 	isb	sy
  400de6:	f3bf 8f4f 	dsb	sy
  400dea:	b662      	cpsie	i
  400dec:	e7fe      	b.n	400dec <xQueueGenericCreate+0x18>
  400dee:	460d      	mov	r5, r1
  400df0:	4617      	mov	r7, r2
  400df2:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  400df4:	b1c1      	cbz	r1, 400e28 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400df6:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400dfa:	3059      	adds	r0, #89	; 0x59
  400dfc:	4b14      	ldr	r3, [pc, #80]	; (400e50 <xQueueGenericCreate+0x7c>)
  400dfe:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400e00:	4604      	mov	r4, r0
  400e02:	b910      	cbnz	r0, 400e0a <xQueueGenericCreate+0x36>
  400e04:	e005      	b.n	400e12 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400e06:	6024      	str	r4, [r4, #0]
  400e08:	e015      	b.n	400e36 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400e0a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400e0e:	6003      	str	r3, [r0, #0]
  400e10:	e011      	b.n	400e36 <xQueueGenericCreate+0x62>
  400e12:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e16:	b672      	cpsid	i
  400e18:	f383 8811 	msr	BASEPRI, r3
  400e1c:	f3bf 8f6f 	isb	sy
  400e20:	f3bf 8f4f 	dsb	sy
  400e24:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  400e26:	e7fe      	b.n	400e26 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400e28:	2058      	movs	r0, #88	; 0x58
  400e2a:	4b09      	ldr	r3, [pc, #36]	; (400e50 <xQueueGenericCreate+0x7c>)
  400e2c:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400e2e:	4604      	mov	r4, r0
  400e30:	2800      	cmp	r0, #0
  400e32:	d1e8      	bne.n	400e06 <xQueueGenericCreate+0x32>
  400e34:	e7ed      	b.n	400e12 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400e36:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400e38:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400e3a:	4620      	mov	r0, r4
  400e3c:	2101      	movs	r1, #1
  400e3e:	4b05      	ldr	r3, [pc, #20]	; (400e54 <xQueueGenericCreate+0x80>)
  400e40:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400e42:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400e46:	2300      	movs	r3, #0
  400e48:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400e4a:	4620      	mov	r0, r4
  400e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e4e:	bf00      	nop
  400e50:	00400a65 	.word	0x00400a65
  400e54:	00400d41 	.word	0x00400d41

00400e58 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e5c:	b085      	sub	sp, #20
  400e5e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400e60:	b950      	cbnz	r0, 400e78 <xQueueGenericSend+0x20>
  400e62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e66:	b672      	cpsid	i
  400e68:	f383 8811 	msr	BASEPRI, r3
  400e6c:	f3bf 8f6f 	isb	sy
  400e70:	f3bf 8f4f 	dsb	sy
  400e74:	b662      	cpsie	i
  400e76:	e7fe      	b.n	400e76 <xQueueGenericSend+0x1e>
  400e78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e7a:	b961      	cbnz	r1, 400e96 <xQueueGenericSend+0x3e>
  400e7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400e7e:	b152      	cbz	r2, 400e96 <xQueueGenericSend+0x3e>
  400e80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e84:	b672      	cpsid	i
  400e86:	f383 8811 	msr	BASEPRI, r3
  400e8a:	f3bf 8f6f 	isb	sy
  400e8e:	f3bf 8f4f 	dsb	sy
  400e92:	b662      	cpsie	i
  400e94:	e7fe      	b.n	400e94 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e96:	2b02      	cmp	r3, #2
  400e98:	d10d      	bne.n	400eb6 <xQueueGenericSend+0x5e>
  400e9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400e9c:	2a01      	cmp	r2, #1
  400e9e:	d00a      	beq.n	400eb6 <xQueueGenericSend+0x5e>
  400ea0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ea4:	b672      	cpsid	i
  400ea6:	f383 8811 	msr	BASEPRI, r3
  400eaa:	f3bf 8f6f 	isb	sy
  400eae:	f3bf 8f4f 	dsb	sy
  400eb2:	b662      	cpsie	i
  400eb4:	e7fe      	b.n	400eb4 <xQueueGenericSend+0x5c>
  400eb6:	461d      	mov	r5, r3
  400eb8:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400eba:	4b51      	ldr	r3, [pc, #324]	; (401000 <xQueueGenericSend+0x1a8>)
  400ebc:	4798      	blx	r3
  400ebe:	b960      	cbnz	r0, 400eda <xQueueGenericSend+0x82>
  400ec0:	9b01      	ldr	r3, [sp, #4]
  400ec2:	b163      	cbz	r3, 400ede <xQueueGenericSend+0x86>
  400ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ec8:	b672      	cpsid	i
  400eca:	f383 8811 	msr	BASEPRI, r3
  400ece:	f3bf 8f6f 	isb	sy
  400ed2:	f3bf 8f4f 	dsb	sy
  400ed6:	b662      	cpsie	i
  400ed8:	e7fe      	b.n	400ed8 <xQueueGenericSend+0x80>
  400eda:	2700      	movs	r7, #0
  400edc:	e000      	b.n	400ee0 <xQueueGenericSend+0x88>
  400ede:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ee0:	4e48      	ldr	r6, [pc, #288]	; (401004 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ee2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401030 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400ee6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401010 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400eea:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400eec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400eee:	2d02      	cmp	r5, #2
  400ef0:	d002      	beq.n	400ef8 <xQueueGenericSend+0xa0>
  400ef2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ef4:	429a      	cmp	r2, r3
  400ef6:	d233      	bcs.n	400f60 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ef8:	4620      	mov	r0, r4
  400efa:	9900      	ldr	r1, [sp, #0]
  400efc:	462a      	mov	r2, r5
  400efe:	4b42      	ldr	r3, [pc, #264]	; (401008 <xQueueGenericSend+0x1b0>)
  400f00:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400f02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f04:	b173      	cbz	r3, 400f24 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400f06:	4620      	mov	r0, r4
  400f08:	4629      	mov	r1, r5
  400f0a:	4b40      	ldr	r3, [pc, #256]	; (40100c <xQueueGenericSend+0x1b4>)
  400f0c:	4798      	blx	r3
  400f0e:	2801      	cmp	r0, #1
  400f10:	d122      	bne.n	400f58 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f16:	4b3e      	ldr	r3, [pc, #248]	; (401010 <xQueueGenericSend+0x1b8>)
  400f18:	601a      	str	r2, [r3, #0]
  400f1a:	f3bf 8f4f 	dsb	sy
  400f1e:	f3bf 8f6f 	isb	sy
  400f22:	e019      	b.n	400f58 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f26:	b173      	cbz	r3, 400f46 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400f28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f2c:	4b39      	ldr	r3, [pc, #228]	; (401014 <xQueueGenericSend+0x1bc>)
  400f2e:	4798      	blx	r3
  400f30:	2801      	cmp	r0, #1
  400f32:	d111      	bne.n	400f58 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f38:	4b35      	ldr	r3, [pc, #212]	; (401010 <xQueueGenericSend+0x1b8>)
  400f3a:	601a      	str	r2, [r3, #0]
  400f3c:	f3bf 8f4f 	dsb	sy
  400f40:	f3bf 8f6f 	isb	sy
  400f44:	e008      	b.n	400f58 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400f46:	b138      	cbz	r0, 400f58 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f4c:	4b30      	ldr	r3, [pc, #192]	; (401010 <xQueueGenericSend+0x1b8>)
  400f4e:	601a      	str	r2, [r3, #0]
  400f50:	f3bf 8f4f 	dsb	sy
  400f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400f58:	4b2f      	ldr	r3, [pc, #188]	; (401018 <xQueueGenericSend+0x1c0>)
  400f5a:	4798      	blx	r3
				return pdPASS;
  400f5c:	2001      	movs	r0, #1
  400f5e:	e04b      	b.n	400ff8 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400f60:	9b01      	ldr	r3, [sp, #4]
  400f62:	b91b      	cbnz	r3, 400f6c <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400f64:	4b2c      	ldr	r3, [pc, #176]	; (401018 <xQueueGenericSend+0x1c0>)
  400f66:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400f68:	2000      	movs	r0, #0
  400f6a:	e045      	b.n	400ff8 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  400f6c:	b917      	cbnz	r7, 400f74 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400f6e:	a802      	add	r0, sp, #8
  400f70:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  400f72:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400f74:	4b28      	ldr	r3, [pc, #160]	; (401018 <xQueueGenericSend+0x1c0>)
  400f76:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400f78:	4b28      	ldr	r3, [pc, #160]	; (40101c <xQueueGenericSend+0x1c4>)
  400f7a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f7c:	47b0      	blx	r6
  400f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f80:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f84:	d101      	bne.n	400f8a <xQueueGenericSend+0x132>
  400f86:	2300      	movs	r3, #0
  400f88:	6463      	str	r3, [r4, #68]	; 0x44
  400f8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f90:	d101      	bne.n	400f96 <xQueueGenericSend+0x13e>
  400f92:	2300      	movs	r3, #0
  400f94:	64a3      	str	r3, [r4, #72]	; 0x48
  400f96:	4b20      	ldr	r3, [pc, #128]	; (401018 <xQueueGenericSend+0x1c0>)
  400f98:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f9a:	a802      	add	r0, sp, #8
  400f9c:	a901      	add	r1, sp, #4
  400f9e:	4b20      	ldr	r3, [pc, #128]	; (401020 <xQueueGenericSend+0x1c8>)
  400fa0:	4798      	blx	r3
  400fa2:	bb18      	cbnz	r0, 400fec <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400fa4:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400fa6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400faa:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400fae:	4b1a      	ldr	r3, [pc, #104]	; (401018 <xQueueGenericSend+0x1c0>)
  400fb0:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400fb2:	45d3      	cmp	fp, sl
  400fb4:	d114      	bne.n	400fe0 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400fb6:	f104 0010 	add.w	r0, r4, #16
  400fba:	9901      	ldr	r1, [sp, #4]
  400fbc:	4b19      	ldr	r3, [pc, #100]	; (401024 <xQueueGenericSend+0x1cc>)
  400fbe:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b19      	ldr	r3, [pc, #100]	; (401028 <xQueueGenericSend+0x1d0>)
  400fc4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400fc6:	4b19      	ldr	r3, [pc, #100]	; (40102c <xQueueGenericSend+0x1d4>)
  400fc8:	4798      	blx	r3
  400fca:	2800      	cmp	r0, #0
  400fcc:	d18d      	bne.n	400eea <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400fce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400fd2:	f8c8 3000 	str.w	r3, [r8]
  400fd6:	f3bf 8f4f 	dsb	sy
  400fda:	f3bf 8f6f 	isb	sy
  400fde:	e784      	b.n	400eea <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400fe0:	4620      	mov	r0, r4
  400fe2:	4b11      	ldr	r3, [pc, #68]	; (401028 <xQueueGenericSend+0x1d0>)
  400fe4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400fe6:	4b11      	ldr	r3, [pc, #68]	; (40102c <xQueueGenericSend+0x1d4>)
  400fe8:	4798      	blx	r3
  400fea:	e77e      	b.n	400eea <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400fec:	4620      	mov	r0, r4
  400fee:	4b0e      	ldr	r3, [pc, #56]	; (401028 <xQueueGenericSend+0x1d0>)
  400ff0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ff2:	4b0e      	ldr	r3, [pc, #56]	; (40102c <xQueueGenericSend+0x1d4>)
  400ff4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400ff6:	2000      	movs	r0, #0
		}
	}
}
  400ff8:	b005      	add	sp, #20
  400ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ffe:	bf00      	nop
  401000:	00401d99 	.word	0x00401d99
  401004:	0040080d 	.word	0x0040080d
  401008:	00400b71 	.word	0x00400b71
  40100c:	00400bf9 	.word	0x00400bf9
  401010:	e000ed04 	.word	0xe000ed04
  401014:	00401c31 	.word	0x00401c31
  401018:	00400859 	.word	0x00400859
  40101c:	004016b1 	.word	0x004016b1
  401020:	00401cf9 	.word	0x00401cf9
  401024:	00401b2d 	.word	0x00401b2d
  401028:	00400ca5 	.word	0x00400ca5
  40102c:	00401801 	.word	0x00401801
  401030:	00401cc9 	.word	0x00401cc9

00401034 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401034:	b950      	cbnz	r0, 40104c <xQueueGenericSendFromISR+0x18>
  401036:	f04f 0380 	mov.w	r3, #128	; 0x80
  40103a:	b672      	cpsid	i
  40103c:	f383 8811 	msr	BASEPRI, r3
  401040:	f3bf 8f6f 	isb	sy
  401044:	f3bf 8f4f 	dsb	sy
  401048:	b662      	cpsie	i
  40104a:	e7fe      	b.n	40104a <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  40104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401050:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401052:	b961      	cbnz	r1, 40106e <xQueueGenericSendFromISR+0x3a>
  401054:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401056:	b150      	cbz	r0, 40106e <xQueueGenericSendFromISR+0x3a>
  401058:	f04f 0380 	mov.w	r3, #128	; 0x80
  40105c:	b672      	cpsid	i
  40105e:	f383 8811 	msr	BASEPRI, r3
  401062:	f3bf 8f6f 	isb	sy
  401066:	f3bf 8f4f 	dsb	sy
  40106a:	b662      	cpsie	i
  40106c:	e7fe      	b.n	40106c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40106e:	2b02      	cmp	r3, #2
  401070:	d10d      	bne.n	40108e <xQueueGenericSendFromISR+0x5a>
  401072:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401074:	2801      	cmp	r0, #1
  401076:	d00a      	beq.n	40108e <xQueueGenericSendFromISR+0x5a>
  401078:	f04f 0380 	mov.w	r3, #128	; 0x80
  40107c:	b672      	cpsid	i
  40107e:	f383 8811 	msr	BASEPRI, r3
  401082:	f3bf 8f6f 	isb	sy
  401086:	f3bf 8f4f 	dsb	sy
  40108a:	b662      	cpsie	i
  40108c:	e7fe      	b.n	40108c <xQueueGenericSendFromISR+0x58>
  40108e:	461e      	mov	r6, r3
  401090:	4615      	mov	r5, r2
  401092:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401094:	4b21      	ldr	r3, [pc, #132]	; (40111c <xQueueGenericSendFromISR+0xe8>)
  401096:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401098:	f3ef 8711 	mrs	r7, BASEPRI
  40109c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010a0:	b672      	cpsid	i
  4010a2:	f383 8811 	msr	BASEPRI, r3
  4010a6:	f3bf 8f6f 	isb	sy
  4010aa:	f3bf 8f4f 	dsb	sy
  4010ae:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4010b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010b2:	2e02      	cmp	r6, #2
  4010b4:	d002      	beq.n	4010bc <xQueueGenericSendFromISR+0x88>
  4010b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010b8:	429a      	cmp	r2, r3
  4010ba:	d223      	bcs.n	401104 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4010bc:	4620      	mov	r0, r4
  4010be:	4641      	mov	r1, r8
  4010c0:	4632      	mov	r2, r6
  4010c2:	4b17      	ldr	r3, [pc, #92]	; (401120 <xQueueGenericSendFromISR+0xec>)
  4010c4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4010c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010cc:	d115      	bne.n	4010fa <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4010ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4010d0:	b143      	cbz	r3, 4010e4 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4010d2:	4620      	mov	r0, r4
  4010d4:	4631      	mov	r1, r6
  4010d6:	4b13      	ldr	r3, [pc, #76]	; (401124 <xQueueGenericSendFromISR+0xf0>)
  4010d8:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  4010da:	2801      	cmp	r0, #1
  4010dc:	d114      	bne.n	401108 <xQueueGenericSendFromISR+0xd4>
  4010de:	b19d      	cbz	r5, 401108 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  4010e0:	6028      	str	r0, [r5, #0]
  4010e2:	e016      	b.n	401112 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010e6:	b18b      	cbz	r3, 40110c <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010ec:	4b0e      	ldr	r3, [pc, #56]	; (401128 <xQueueGenericSendFromISR+0xf4>)
  4010ee:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  4010f0:	b170      	cbz	r0, 401110 <xQueueGenericSendFromISR+0xdc>
  4010f2:	b16d      	cbz	r5, 401110 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  4010f4:	2001      	movs	r0, #1
  4010f6:	6028      	str	r0, [r5, #0]
  4010f8:	e00b      	b.n	401112 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  4010fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010fc:	3301      	adds	r3, #1
  4010fe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401100:	2001      	movs	r0, #1
  401102:	e006      	b.n	401112 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401104:	2000      	movs	r0, #0
  401106:	e004      	b.n	401112 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401108:	2001      	movs	r0, #1
  40110a:	e002      	b.n	401112 <xQueueGenericSendFromISR+0xde>
  40110c:	2001      	movs	r0, #1
  40110e:	e000      	b.n	401112 <xQueueGenericSendFromISR+0xde>
  401110:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401112:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40111a:	bf00      	nop
  40111c:	00400a01 	.word	0x00400a01
  401120:	00400b71 	.word	0x00400b71
  401124:	00400bf9 	.word	0x00400bf9
  401128:	00401c31 	.word	0x00401c31

0040112c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  40112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401130:	b085      	sub	sp, #20
  401132:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401134:	b950      	cbnz	r0, 40114c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401136:	f04f 0380 	mov.w	r3, #128	; 0x80
  40113a:	b672      	cpsid	i
  40113c:	f383 8811 	msr	BASEPRI, r3
  401140:	f3bf 8f6f 	isb	sy
  401144:	f3bf 8f4f 	dsb	sy
  401148:	b662      	cpsie	i
  40114a:	e7fe      	b.n	40114a <xQueueGenericReceive+0x1e>
  40114c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40114e:	b961      	cbnz	r1, 40116a <xQueueGenericReceive+0x3e>
  401150:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401152:	b152      	cbz	r2, 40116a <xQueueGenericReceive+0x3e>
  401154:	f04f 0380 	mov.w	r3, #128	; 0x80
  401158:	b672      	cpsid	i
  40115a:	f383 8811 	msr	BASEPRI, r3
  40115e:	f3bf 8f6f 	isb	sy
  401162:	f3bf 8f4f 	dsb	sy
  401166:	b662      	cpsie	i
  401168:	e7fe      	b.n	401168 <xQueueGenericReceive+0x3c>
  40116a:	4698      	mov	r8, r3
  40116c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40116e:	4b52      	ldr	r3, [pc, #328]	; (4012b8 <xQueueGenericReceive+0x18c>)
  401170:	4798      	blx	r3
  401172:	b960      	cbnz	r0, 40118e <xQueueGenericReceive+0x62>
  401174:	9b01      	ldr	r3, [sp, #4]
  401176:	b163      	cbz	r3, 401192 <xQueueGenericReceive+0x66>
  401178:	f04f 0380 	mov.w	r3, #128	; 0x80
  40117c:	b672      	cpsid	i
  40117e:	f383 8811 	msr	BASEPRI, r3
  401182:	f3bf 8f6f 	isb	sy
  401186:	f3bf 8f4f 	dsb	sy
  40118a:	b662      	cpsie	i
  40118c:	e7fe      	b.n	40118c <xQueueGenericReceive+0x60>
  40118e:	2600      	movs	r6, #0
  401190:	e000      	b.n	401194 <xQueueGenericReceive+0x68>
  401192:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401194:	4d49      	ldr	r5, [pc, #292]	; (4012bc <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401196:	f8df a154 	ldr.w	sl, [pc, #340]	; 4012ec <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40119a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4012cc <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40119e:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4011a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d034      	beq.n	401210 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4011a6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4011a8:	4620      	mov	r0, r4
  4011aa:	4659      	mov	r1, fp
  4011ac:	4b44      	ldr	r3, [pc, #272]	; (4012c0 <xQueueGenericReceive+0x194>)
  4011ae:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4011b0:	f1b8 0f00 	cmp.w	r8, #0
  4011b4:	d118      	bne.n	4011e8 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4011b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011b8:	3b01      	subs	r3, #1
  4011ba:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4011bc:	6823      	ldr	r3, [r4, #0]
  4011be:	b913      	cbnz	r3, 4011c6 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4011c0:	4b40      	ldr	r3, [pc, #256]	; (4012c4 <xQueueGenericReceive+0x198>)
  4011c2:	4798      	blx	r3
  4011c4:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4011c6:	6923      	ldr	r3, [r4, #16]
  4011c8:	b1f3      	cbz	r3, 401208 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4011ca:	f104 0010 	add.w	r0, r4, #16
  4011ce:	4b3e      	ldr	r3, [pc, #248]	; (4012c8 <xQueueGenericReceive+0x19c>)
  4011d0:	4798      	blx	r3
  4011d2:	2801      	cmp	r0, #1
  4011d4:	d118      	bne.n	401208 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4011d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011da:	4b3c      	ldr	r3, [pc, #240]	; (4012cc <xQueueGenericReceive+0x1a0>)
  4011dc:	601a      	str	r2, [r3, #0]
  4011de:	f3bf 8f4f 	dsb	sy
  4011e2:	f3bf 8f6f 	isb	sy
  4011e6:	e00f      	b.n	401208 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4011e8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011ec:	b163      	cbz	r3, 401208 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011f2:	4b35      	ldr	r3, [pc, #212]	; (4012c8 <xQueueGenericReceive+0x19c>)
  4011f4:	4798      	blx	r3
  4011f6:	b138      	cbz	r0, 401208 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011fc:	4b33      	ldr	r3, [pc, #204]	; (4012cc <xQueueGenericReceive+0x1a0>)
  4011fe:	601a      	str	r2, [r3, #0]
  401200:	f3bf 8f4f 	dsb	sy
  401204:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401208:	4b31      	ldr	r3, [pc, #196]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  40120a:	4798      	blx	r3
				return pdPASS;
  40120c:	2001      	movs	r0, #1
  40120e:	e04f      	b.n	4012b0 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401210:	9b01      	ldr	r3, [sp, #4]
  401212:	b91b      	cbnz	r3, 40121c <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401214:	4b2e      	ldr	r3, [pc, #184]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  401216:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401218:	2000      	movs	r0, #0
  40121a:	e049      	b.n	4012b0 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  40121c:	b916      	cbnz	r6, 401224 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40121e:	a802      	add	r0, sp, #8
  401220:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401222:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401224:	4b2a      	ldr	r3, [pc, #168]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  401226:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401228:	4b2a      	ldr	r3, [pc, #168]	; (4012d4 <xQueueGenericReceive+0x1a8>)
  40122a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40122c:	47a8      	blx	r5
  40122e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401230:	f1b3 3fff 	cmp.w	r3, #4294967295
  401234:	d101      	bne.n	40123a <xQueueGenericReceive+0x10e>
  401236:	2300      	movs	r3, #0
  401238:	6463      	str	r3, [r4, #68]	; 0x44
  40123a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40123c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401240:	d101      	bne.n	401246 <xQueueGenericReceive+0x11a>
  401242:	2300      	movs	r3, #0
  401244:	64a3      	str	r3, [r4, #72]	; 0x48
  401246:	4b22      	ldr	r3, [pc, #136]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  401248:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40124a:	a802      	add	r0, sp, #8
  40124c:	a901      	add	r1, sp, #4
  40124e:	4b22      	ldr	r3, [pc, #136]	; (4012d8 <xQueueGenericReceive+0x1ac>)
  401250:	4798      	blx	r3
  401252:	bb38      	cbnz	r0, 4012a4 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401254:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401256:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401258:	4b1d      	ldr	r3, [pc, #116]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  40125a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40125c:	b9e7      	cbnz	r7, 401298 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40125e:	6823      	ldr	r3, [r4, #0]
  401260:	b92b      	cbnz	r3, 40126e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401262:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401264:	6860      	ldr	r0, [r4, #4]
  401266:	4b1d      	ldr	r3, [pc, #116]	; (4012dc <xQueueGenericReceive+0x1b0>)
  401268:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40126a:	4b19      	ldr	r3, [pc, #100]	; (4012d0 <xQueueGenericReceive+0x1a4>)
  40126c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40126e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401272:	9901      	ldr	r1, [sp, #4]
  401274:	4b1a      	ldr	r3, [pc, #104]	; (4012e0 <xQueueGenericReceive+0x1b4>)
  401276:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401278:	4620      	mov	r0, r4
  40127a:	4b1a      	ldr	r3, [pc, #104]	; (4012e4 <xQueueGenericReceive+0x1b8>)
  40127c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40127e:	4b1a      	ldr	r3, [pc, #104]	; (4012e8 <xQueueGenericReceive+0x1bc>)
  401280:	4798      	blx	r3
  401282:	2800      	cmp	r0, #0
  401284:	d18b      	bne.n	40119e <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401286:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40128a:	f8c9 3000 	str.w	r3, [r9]
  40128e:	f3bf 8f4f 	dsb	sy
  401292:	f3bf 8f6f 	isb	sy
  401296:	e782      	b.n	40119e <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401298:	4620      	mov	r0, r4
  40129a:	4b12      	ldr	r3, [pc, #72]	; (4012e4 <xQueueGenericReceive+0x1b8>)
  40129c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40129e:	4b12      	ldr	r3, [pc, #72]	; (4012e8 <xQueueGenericReceive+0x1bc>)
  4012a0:	4798      	blx	r3
  4012a2:	e77c      	b.n	40119e <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4012a4:	4620      	mov	r0, r4
  4012a6:	4b0f      	ldr	r3, [pc, #60]	; (4012e4 <xQueueGenericReceive+0x1b8>)
  4012a8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4012aa:	4b0f      	ldr	r3, [pc, #60]	; (4012e8 <xQueueGenericReceive+0x1bc>)
  4012ac:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4012ae:	2000      	movs	r0, #0
		}
	}
}
  4012b0:	b005      	add	sp, #20
  4012b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012b6:	bf00      	nop
  4012b8:	00401d99 	.word	0x00401d99
  4012bc:	0040080d 	.word	0x0040080d
  4012c0:	00400c7d 	.word	0x00400c7d
  4012c4:	00401f21 	.word	0x00401f21
  4012c8:	00401c31 	.word	0x00401c31
  4012cc:	e000ed04 	.word	0xe000ed04
  4012d0:	00400859 	.word	0x00400859
  4012d4:	004016b1 	.word	0x004016b1
  4012d8:	00401cf9 	.word	0x00401cf9
  4012dc:	00401db9 	.word	0x00401db9
  4012e0:	00401b2d 	.word	0x00401b2d
  4012e4:	00400ca5 	.word	0x00400ca5
  4012e8:	00401801 	.word	0x00401801
  4012ec:	00401cc9 	.word	0x00401cc9

004012f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4012f0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4012f2:	4b0b      	ldr	r3, [pc, #44]	; (401320 <vQueueAddToRegistry+0x30>)
  4012f4:	681b      	ldr	r3, [r3, #0]
  4012f6:	b12b      	cbz	r3, 401304 <vQueueAddToRegistry+0x14>
  4012f8:	2301      	movs	r3, #1
  4012fa:	4c09      	ldr	r4, [pc, #36]	; (401320 <vQueueAddToRegistry+0x30>)
  4012fc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401300:	b942      	cbnz	r2, 401314 <vQueueAddToRegistry+0x24>
  401302:	e000      	b.n	401306 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401304:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401306:	4a06      	ldr	r2, [pc, #24]	; (401320 <vQueueAddToRegistry+0x30>)
  401308:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40130c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401310:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401312:	e002      	b.n	40131a <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401314:	3301      	adds	r3, #1
  401316:	2b08      	cmp	r3, #8
  401318:	d1f0      	bne.n	4012fc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40131a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40131e:	4770      	bx	lr
  401320:	2040c2c8 	.word	0x2040c2c8

00401324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401324:	b570      	push	{r4, r5, r6, lr}
  401326:	4604      	mov	r4, r0
  401328:	460e      	mov	r6, r1
  40132a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40132c:	4b0d      	ldr	r3, [pc, #52]	; (401364 <vQueueWaitForMessageRestricted+0x40>)
  40132e:	4798      	blx	r3
  401330:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401332:	f1b3 3fff 	cmp.w	r3, #4294967295
  401336:	d101      	bne.n	40133c <vQueueWaitForMessageRestricted+0x18>
  401338:	2300      	movs	r3, #0
  40133a:	6463      	str	r3, [r4, #68]	; 0x44
  40133c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40133e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401342:	d101      	bne.n	401348 <vQueueWaitForMessageRestricted+0x24>
  401344:	2300      	movs	r3, #0
  401346:	64a3      	str	r3, [r4, #72]	; 0x48
  401348:	4b07      	ldr	r3, [pc, #28]	; (401368 <vQueueWaitForMessageRestricted+0x44>)
  40134a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40134c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40134e:	b92b      	cbnz	r3, 40135c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401350:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401354:	4631      	mov	r1, r6
  401356:	462a      	mov	r2, r5
  401358:	4b04      	ldr	r3, [pc, #16]	; (40136c <vQueueWaitForMessageRestricted+0x48>)
  40135a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40135c:	4620      	mov	r0, r4
  40135e:	4b04      	ldr	r3, [pc, #16]	; (401370 <vQueueWaitForMessageRestricted+0x4c>)
  401360:	4798      	blx	r3
  401362:	bd70      	pop	{r4, r5, r6, pc}
  401364:	0040080d 	.word	0x0040080d
  401368:	00400859 	.word	0x00400859
  40136c:	00401bb1 	.word	0x00401bb1
  401370:	00400ca5 	.word	0x00400ca5

00401374 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401374:	4b08      	ldr	r3, [pc, #32]	; (401398 <prvResetNextTaskUnblockTime+0x24>)
  401376:	681b      	ldr	r3, [r3, #0]
  401378:	681b      	ldr	r3, [r3, #0]
  40137a:	b923      	cbnz	r3, 401386 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  40137c:	f04f 32ff 	mov.w	r2, #4294967295
  401380:	4b06      	ldr	r3, [pc, #24]	; (40139c <prvResetNextTaskUnblockTime+0x28>)
  401382:	601a      	str	r2, [r3, #0]
  401384:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401386:	4b04      	ldr	r3, [pc, #16]	; (401398 <prvResetNextTaskUnblockTime+0x24>)
  401388:	681b      	ldr	r3, [r3, #0]
  40138a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40138c:	68db      	ldr	r3, [r3, #12]
  40138e:	685a      	ldr	r2, [r3, #4]
  401390:	4b02      	ldr	r3, [pc, #8]	; (40139c <prvResetNextTaskUnblockTime+0x28>)
  401392:	601a      	str	r2, [r3, #0]
  401394:	4770      	bx	lr
  401396:	bf00      	nop
  401398:	2040c154 	.word	0x2040c154
  40139c:	2040c214 	.word	0x2040c214

004013a0 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4013a0:	b510      	push	{r4, lr}
  4013a2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4013a4:	4b0e      	ldr	r3, [pc, #56]	; (4013e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4013aa:	4b0e      	ldr	r3, [pc, #56]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x44>)
  4013ac:	681b      	ldr	r3, [r3, #0]
  4013ae:	4298      	cmp	r0, r3
  4013b0:	d207      	bcs.n	4013c2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4013b2:	4b0d      	ldr	r3, [pc, #52]	; (4013e8 <prvAddCurrentTaskToDelayedList+0x48>)
  4013b4:	6818      	ldr	r0, [r3, #0]
  4013b6:	4b0a      	ldr	r3, [pc, #40]	; (4013e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4013b8:	6819      	ldr	r1, [r3, #0]
  4013ba:	3104      	adds	r1, #4
  4013bc:	4b0b      	ldr	r3, [pc, #44]	; (4013ec <prvAddCurrentTaskToDelayedList+0x4c>)
  4013be:	4798      	blx	r3
  4013c0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4013c2:	4b0b      	ldr	r3, [pc, #44]	; (4013f0 <prvAddCurrentTaskToDelayedList+0x50>)
  4013c4:	6818      	ldr	r0, [r3, #0]
  4013c6:	4b06      	ldr	r3, [pc, #24]	; (4013e0 <prvAddCurrentTaskToDelayedList+0x40>)
  4013c8:	6819      	ldr	r1, [r3, #0]
  4013ca:	3104      	adds	r1, #4
  4013cc:	4b07      	ldr	r3, [pc, #28]	; (4013ec <prvAddCurrentTaskToDelayedList+0x4c>)
  4013ce:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4013d0:	4b08      	ldr	r3, [pc, #32]	; (4013f4 <prvAddCurrentTaskToDelayedList+0x54>)
  4013d2:	681b      	ldr	r3, [r3, #0]
  4013d4:	429c      	cmp	r4, r3
  4013d6:	d201      	bcs.n	4013dc <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4013d8:	4b06      	ldr	r3, [pc, #24]	; (4013f4 <prvAddCurrentTaskToDelayedList+0x54>)
  4013da:	601c      	str	r4, [r3, #0]
  4013dc:	bd10      	pop	{r4, pc}
  4013de:	bf00      	nop
  4013e0:	2040c1f4 	.word	0x2040c1f4
  4013e4:	2040c210 	.word	0x2040c210
  4013e8:	2040c174 	.word	0x2040c174
  4013ec:	00400b19 	.word	0x00400b19
  4013f0:	2040c154 	.word	0x2040c154
  4013f4:	2040c214 	.word	0x2040c214

004013f8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4013f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013fc:	b083      	sub	sp, #12
  4013fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401400:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401404:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  401406:	b950      	cbnz	r0, 40141e <xTaskGenericCreate+0x26>
  401408:	f04f 0380 	mov.w	r3, #128	; 0x80
  40140c:	b672      	cpsid	i
  40140e:	f383 8811 	msr	BASEPRI, r3
  401412:	f3bf 8f6f 	isb	sy
  401416:	f3bf 8f4f 	dsb	sy
  40141a:	b662      	cpsie	i
  40141c:	e7fe      	b.n	40141c <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40141e:	2f04      	cmp	r7, #4
  401420:	d90a      	bls.n	401438 <xTaskGenericCreate+0x40>
  401422:	f04f 0380 	mov.w	r3, #128	; 0x80
  401426:	b672      	cpsid	i
  401428:	f383 8811 	msr	BASEPRI, r3
  40142c:	f3bf 8f6f 	isb	sy
  401430:	f3bf 8f4f 	dsb	sy
  401434:	b662      	cpsie	i
  401436:	e7fe      	b.n	401436 <xTaskGenericCreate+0x3e>
  401438:	9001      	str	r0, [sp, #4]
  40143a:	9300      	str	r3, [sp, #0]
  40143c:	4690      	mov	r8, r2
  40143e:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401440:	b935      	cbnz	r5, 401450 <xTaskGenericCreate+0x58>
  401442:	0090      	lsls	r0, r2, #2
  401444:	4b5f      	ldr	r3, [pc, #380]	; (4015c4 <xTaskGenericCreate+0x1cc>)
  401446:	4798      	blx	r3

		if( pxStack != NULL )
  401448:	4605      	mov	r5, r0
  40144a:	2800      	cmp	r0, #0
  40144c:	f000 80b4 	beq.w	4015b8 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401450:	2058      	movs	r0, #88	; 0x58
  401452:	4b5c      	ldr	r3, [pc, #368]	; (4015c4 <xTaskGenericCreate+0x1cc>)
  401454:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401456:	4604      	mov	r4, r0
  401458:	b1a0      	cbz	r0, 401484 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40145a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40145c:	4628      	mov	r0, r5
  40145e:	21a5      	movs	r1, #165	; 0xa5
  401460:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401464:	4b58      	ldr	r3, [pc, #352]	; (4015c8 <xTaskGenericCreate+0x1d0>)
  401466:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401468:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40146c:	4445      	add	r5, r8
  40146e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401470:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401474:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401478:	7833      	ldrb	r3, [r6, #0]
  40147a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40147e:	7833      	ldrb	r3, [r6, #0]
  401480:	b923      	cbnz	r3, 40148c <xTaskGenericCreate+0x94>
  401482:	e00f      	b.n	4014a4 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401484:	4628      	mov	r0, r5
  401486:	4b51      	ldr	r3, [pc, #324]	; (4015cc <xTaskGenericCreate+0x1d4>)
  401488:	4798      	blx	r3
  40148a:	e095      	b.n	4015b8 <xTaskGenericCreate+0x1c0>
  40148c:	4633      	mov	r3, r6
  40148e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401492:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401494:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401498:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40149c:	7819      	ldrb	r1, [r3, #0]
  40149e:	b109      	cbz	r1, 4014a4 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4014a0:	42b3      	cmp	r3, r6
  4014a2:	d1f7      	bne.n	401494 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4014a4:	f04f 0800 	mov.w	r8, #0
  4014a8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4014ac:	463e      	mov	r6, r7
  4014ae:	2f04      	cmp	r7, #4
  4014b0:	bf28      	it	cs
  4014b2:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4014b4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4014b6:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4014b8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4014bc:	f104 0904 	add.w	r9, r4, #4
  4014c0:	4648      	mov	r0, r9
  4014c2:	f8df b154 	ldr.w	fp, [pc, #340]	; 401618 <xTaskGenericCreate+0x220>
  4014c6:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4014c8:	f104 0018 	add.w	r0, r4, #24
  4014cc:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4014ce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014d0:	f1c6 0605 	rsb	r6, r6, #5
  4014d4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4014d6:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4014d8:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4014dc:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4014e0:	4628      	mov	r0, r5
  4014e2:	9901      	ldr	r1, [sp, #4]
  4014e4:	9a00      	ldr	r2, [sp, #0]
  4014e6:	4b3a      	ldr	r3, [pc, #232]	; (4015d0 <xTaskGenericCreate+0x1d8>)
  4014e8:	4798      	blx	r3
  4014ea:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  4014ec:	f1ba 0f00 	cmp.w	sl, #0
  4014f0:	d001      	beq.n	4014f6 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4014f2:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4014f6:	4b37      	ldr	r3, [pc, #220]	; (4015d4 <xTaskGenericCreate+0x1dc>)
  4014f8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4014fa:	4a37      	ldr	r2, [pc, #220]	; (4015d8 <xTaskGenericCreate+0x1e0>)
  4014fc:	6813      	ldr	r3, [r2, #0]
  4014fe:	3301      	adds	r3, #1
  401500:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401502:	4b36      	ldr	r3, [pc, #216]	; (4015dc <xTaskGenericCreate+0x1e4>)
  401504:	681b      	ldr	r3, [r3, #0]
  401506:	bb0b      	cbnz	r3, 40154c <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401508:	4b34      	ldr	r3, [pc, #208]	; (4015dc <xTaskGenericCreate+0x1e4>)
  40150a:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40150c:	6813      	ldr	r3, [r2, #0]
  40150e:	2b01      	cmp	r3, #1
  401510:	d126      	bne.n	401560 <xTaskGenericCreate+0x168>
  401512:	4d33      	ldr	r5, [pc, #204]	; (4015e0 <xTaskGenericCreate+0x1e8>)
  401514:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401518:	4e32      	ldr	r6, [pc, #200]	; (4015e4 <xTaskGenericCreate+0x1ec>)
  40151a:	4628      	mov	r0, r5
  40151c:	47b0      	blx	r6
  40151e:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401520:	4545      	cmp	r5, r8
  401522:	d1fa      	bne.n	40151a <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401524:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 40161c <xTaskGenericCreate+0x224>
  401528:	4640      	mov	r0, r8
  40152a:	4d2e      	ldr	r5, [pc, #184]	; (4015e4 <xTaskGenericCreate+0x1ec>)
  40152c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40152e:	4e2e      	ldr	r6, [pc, #184]	; (4015e8 <xTaskGenericCreate+0x1f0>)
  401530:	4630      	mov	r0, r6
  401532:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401534:	482d      	ldr	r0, [pc, #180]	; (4015ec <xTaskGenericCreate+0x1f4>)
  401536:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401538:	482d      	ldr	r0, [pc, #180]	; (4015f0 <xTaskGenericCreate+0x1f8>)
  40153a:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  40153c:	482d      	ldr	r0, [pc, #180]	; (4015f4 <xTaskGenericCreate+0x1fc>)
  40153e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401540:	4b2d      	ldr	r3, [pc, #180]	; (4015f8 <xTaskGenericCreate+0x200>)
  401542:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401546:	4b2d      	ldr	r3, [pc, #180]	; (4015fc <xTaskGenericCreate+0x204>)
  401548:	601e      	str	r6, [r3, #0]
  40154a:	e009      	b.n	401560 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40154c:	4b2c      	ldr	r3, [pc, #176]	; (401600 <xTaskGenericCreate+0x208>)
  40154e:	681b      	ldr	r3, [r3, #0]
  401550:	b933      	cbnz	r3, 401560 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401552:	4b22      	ldr	r3, [pc, #136]	; (4015dc <xTaskGenericCreate+0x1e4>)
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401558:	429f      	cmp	r7, r3
  40155a:	d301      	bcc.n	401560 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40155c:	4b1f      	ldr	r3, [pc, #124]	; (4015dc <xTaskGenericCreate+0x1e4>)
  40155e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401560:	4a28      	ldr	r2, [pc, #160]	; (401604 <xTaskGenericCreate+0x20c>)
  401562:	6813      	ldr	r3, [r2, #0]
  401564:	3301      	adds	r3, #1
  401566:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401568:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40156a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40156c:	4926      	ldr	r1, [pc, #152]	; (401608 <xTaskGenericCreate+0x210>)
  40156e:	680b      	ldr	r3, [r1, #0]
  401570:	2201      	movs	r2, #1
  401572:	4082      	lsls	r2, r0
  401574:	4313      	orrs	r3, r2
  401576:	600b      	str	r3, [r1, #0]
  401578:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40157c:	4b18      	ldr	r3, [pc, #96]	; (4015e0 <xTaskGenericCreate+0x1e8>)
  40157e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401582:	4649      	mov	r1, r9
  401584:	4b21      	ldr	r3, [pc, #132]	; (40160c <xTaskGenericCreate+0x214>)
  401586:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401588:	4b21      	ldr	r3, [pc, #132]	; (401610 <xTaskGenericCreate+0x218>)
  40158a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40158c:	4b1c      	ldr	r3, [pc, #112]	; (401600 <xTaskGenericCreate+0x208>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	b173      	cbz	r3, 4015b0 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401592:	4b12      	ldr	r3, [pc, #72]	; (4015dc <xTaskGenericCreate+0x1e4>)
  401594:	681b      	ldr	r3, [r3, #0]
  401596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401598:	429f      	cmp	r7, r3
  40159a:	d90b      	bls.n	4015b4 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40159c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015a0:	4b1c      	ldr	r3, [pc, #112]	; (401614 <xTaskGenericCreate+0x21c>)
  4015a2:	601a      	str	r2, [r3, #0]
  4015a4:	f3bf 8f4f 	dsb	sy
  4015a8:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4015ac:	2001      	movs	r0, #1
  4015ae:	e005      	b.n	4015bc <xTaskGenericCreate+0x1c4>
  4015b0:	2001      	movs	r0, #1
  4015b2:	e003      	b.n	4015bc <xTaskGenericCreate+0x1c4>
  4015b4:	2001      	movs	r0, #1
  4015b6:	e001      	b.n	4015bc <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4015b8:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4015bc:	b003      	add	sp, #12
  4015be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015c2:	bf00      	nop
  4015c4:	00400a65 	.word	0x00400a65
  4015c8:	00404061 	.word	0x00404061
  4015cc:	00400ac5 	.word	0x00400ac5
  4015d0:	004007c5 	.word	0x004007c5
  4015d4:	0040080d 	.word	0x0040080d
  4015d8:	2040c21c 	.word	0x2040c21c
  4015dc:	2040c1f4 	.word	0x2040c1f4
  4015e0:	2040c17c 	.word	0x2040c17c
  4015e4:	00400ae1 	.word	0x00400ae1
  4015e8:	2040c220 	.word	0x2040c220
  4015ec:	2040c1f8 	.word	0x2040c1f8
  4015f0:	2040c1e0 	.word	0x2040c1e0
  4015f4:	2040c234 	.word	0x2040c234
  4015f8:	2040c154 	.word	0x2040c154
  4015fc:	2040c174 	.word	0x2040c174
  401600:	2040c158 	.word	0x2040c158
  401604:	2040c218 	.word	0x2040c218
  401608:	2040c248 	.word	0x2040c248
  40160c:	00400b01 	.word	0x00400b01
  401610:	00400859 	.word	0x00400859
  401614:	e000ed04 	.word	0xe000ed04
  401618:	00400af9 	.word	0x00400af9
  40161c:	2040c160 	.word	0x2040c160

00401620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401620:	b510      	push	{r4, lr}
  401622:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401624:	2300      	movs	r3, #0
  401626:	9300      	str	r3, [sp, #0]
  401628:	9301      	str	r3, [sp, #4]
  40162a:	9302      	str	r3, [sp, #8]
  40162c:	9303      	str	r3, [sp, #12]
  40162e:	4818      	ldr	r0, [pc, #96]	; (401690 <vTaskStartScheduler+0x70>)
  401630:	4918      	ldr	r1, [pc, #96]	; (401694 <vTaskStartScheduler+0x74>)
  401632:	2282      	movs	r2, #130	; 0x82
  401634:	4c18      	ldr	r4, [pc, #96]	; (401698 <vTaskStartScheduler+0x78>)
  401636:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401638:	2801      	cmp	r0, #1
  40163a:	d11a      	bne.n	401672 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  40163c:	4b17      	ldr	r3, [pc, #92]	; (40169c <vTaskStartScheduler+0x7c>)
  40163e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401640:	2801      	cmp	r0, #1
  401642:	d116      	bne.n	401672 <vTaskStartScheduler+0x52>
  401644:	f04f 0380 	mov.w	r3, #128	; 0x80
  401648:	b672      	cpsid	i
  40164a:	f383 8811 	msr	BASEPRI, r3
  40164e:	f3bf 8f6f 	isb	sy
  401652:	f3bf 8f4f 	dsb	sy
  401656:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401658:	f04f 32ff 	mov.w	r2, #4294967295
  40165c:	4b10      	ldr	r3, [pc, #64]	; (4016a0 <vTaskStartScheduler+0x80>)
  40165e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401660:	2201      	movs	r2, #1
  401662:	4b10      	ldr	r3, [pc, #64]	; (4016a4 <vTaskStartScheduler+0x84>)
  401664:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401666:	2200      	movs	r2, #0
  401668:	4b0f      	ldr	r3, [pc, #60]	; (4016a8 <vTaskStartScheduler+0x88>)
  40166a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40166c:	4b0f      	ldr	r3, [pc, #60]	; (4016ac <vTaskStartScheduler+0x8c>)
  40166e:	4798      	blx	r3
  401670:	e00b      	b.n	40168a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401672:	b950      	cbnz	r0, 40168a <vTaskStartScheduler+0x6a>
  401674:	f04f 0380 	mov.w	r3, #128	; 0x80
  401678:	b672      	cpsid	i
  40167a:	f383 8811 	msr	BASEPRI, r3
  40167e:	f3bf 8f6f 	isb	sy
  401682:	f3bf 8f4f 	dsb	sy
  401686:	b662      	cpsie	i
  401688:	e7fe      	b.n	401688 <vTaskStartScheduler+0x68>
	}
}
  40168a:	b004      	add	sp, #16
  40168c:	bd10      	pop	{r4, pc}
  40168e:	bf00      	nop
  401690:	00401a05 	.word	0x00401a05
  401694:	00409bf8 	.word	0x00409bf8
  401698:	004013f9 	.word	0x004013f9
  40169c:	00402009 	.word	0x00402009
  4016a0:	2040c214 	.word	0x2040c214
  4016a4:	2040c158 	.word	0x2040c158
  4016a8:	2040c210 	.word	0x2040c210
  4016ac:	0040093d 	.word	0x0040093d

004016b0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4016b0:	4a02      	ldr	r2, [pc, #8]	; (4016bc <vTaskSuspendAll+0xc>)
  4016b2:	6813      	ldr	r3, [r2, #0]
  4016b4:	3301      	adds	r3, #1
  4016b6:	6013      	str	r3, [r2, #0]
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop
  4016bc:	2040c20c 	.word	0x2040c20c

004016c0 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  4016c0:	4b01      	ldr	r3, [pc, #4]	; (4016c8 <xTaskGetTickCount+0x8>)
  4016c2:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4016c4:	4770      	bx	lr
  4016c6:	bf00      	nop
  4016c8:	2040c210 	.word	0x2040c210

004016cc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4016cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016d0:	4b3d      	ldr	r3, [pc, #244]	; (4017c8 <xTaskIncrementTick+0xfc>)
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	2b00      	cmp	r3, #0
  4016d6:	d16a      	bne.n	4017ae <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  4016d8:	4b3c      	ldr	r3, [pc, #240]	; (4017cc <xTaskIncrementTick+0x100>)
  4016da:	681a      	ldr	r2, [r3, #0]
  4016dc:	3201      	adds	r2, #1
  4016de:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  4016e0:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  4016e2:	b9d6      	cbnz	r6, 40171a <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  4016e4:	4b3a      	ldr	r3, [pc, #232]	; (4017d0 <xTaskIncrementTick+0x104>)
  4016e6:	681b      	ldr	r3, [r3, #0]
  4016e8:	681b      	ldr	r3, [r3, #0]
  4016ea:	b153      	cbz	r3, 401702 <xTaskIncrementTick+0x36>
  4016ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f0:	b672      	cpsid	i
  4016f2:	f383 8811 	msr	BASEPRI, r3
  4016f6:	f3bf 8f6f 	isb	sy
  4016fa:	f3bf 8f4f 	dsb	sy
  4016fe:	b662      	cpsie	i
  401700:	e7fe      	b.n	401700 <xTaskIncrementTick+0x34>
  401702:	4a33      	ldr	r2, [pc, #204]	; (4017d0 <xTaskIncrementTick+0x104>)
  401704:	6811      	ldr	r1, [r2, #0]
  401706:	4b33      	ldr	r3, [pc, #204]	; (4017d4 <xTaskIncrementTick+0x108>)
  401708:	6818      	ldr	r0, [r3, #0]
  40170a:	6010      	str	r0, [r2, #0]
  40170c:	6019      	str	r1, [r3, #0]
  40170e:	4a32      	ldr	r2, [pc, #200]	; (4017d8 <xTaskIncrementTick+0x10c>)
  401710:	6813      	ldr	r3, [r2, #0]
  401712:	3301      	adds	r3, #1
  401714:	6013      	str	r3, [r2, #0]
  401716:	4b31      	ldr	r3, [pc, #196]	; (4017dc <xTaskIncrementTick+0x110>)
  401718:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  40171a:	4b31      	ldr	r3, [pc, #196]	; (4017e0 <xTaskIncrementTick+0x114>)
  40171c:	681b      	ldr	r3, [r3, #0]
  40171e:	429e      	cmp	r6, r3
  401720:	d201      	bcs.n	401726 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401722:	2400      	movs	r4, #0
  401724:	e037      	b.n	401796 <xTaskIncrementTick+0xca>
  401726:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401728:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4017d0 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40172c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4017fc <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401730:	4f2c      	ldr	r7, [pc, #176]	; (4017e4 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401732:	f8d9 3000 	ldr.w	r3, [r9]
  401736:	681b      	ldr	r3, [r3, #0]
  401738:	b923      	cbnz	r3, 401744 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  40173a:	f04f 32ff 	mov.w	r2, #4294967295
  40173e:	4b28      	ldr	r3, [pc, #160]	; (4017e0 <xTaskIncrementTick+0x114>)
  401740:	601a      	str	r2, [r3, #0]
						break;
  401742:	e028      	b.n	401796 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401744:	f8d9 3000 	ldr.w	r3, [r9]
  401748:	68db      	ldr	r3, [r3, #12]
  40174a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40174c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  40174e:	429e      	cmp	r6, r3
  401750:	d202      	bcs.n	401758 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401752:	4a23      	ldr	r2, [pc, #140]	; (4017e0 <xTaskIncrementTick+0x114>)
  401754:	6013      	str	r3, [r2, #0]
							break;
  401756:	e01e      	b.n	401796 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401758:	f105 0a04 	add.w	sl, r5, #4
  40175c:	4650      	mov	r0, sl
  40175e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401760:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401762:	b113      	cbz	r3, 40176a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401764:	f105 0018 	add.w	r0, r5, #24
  401768:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40176a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40176c:	683b      	ldr	r3, [r7, #0]
  40176e:	2201      	movs	r2, #1
  401770:	4082      	lsls	r2, r0
  401772:	4313      	orrs	r3, r2
  401774:	603b      	str	r3, [r7, #0]
  401776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40177a:	4b1b      	ldr	r3, [pc, #108]	; (4017e8 <xTaskIncrementTick+0x11c>)
  40177c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401780:	4651      	mov	r1, sl
  401782:	4b1a      	ldr	r3, [pc, #104]	; (4017ec <xTaskIncrementTick+0x120>)
  401784:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401786:	4b1a      	ldr	r3, [pc, #104]	; (4017f0 <xTaskIncrementTick+0x124>)
  401788:	681b      	ldr	r3, [r3, #0]
  40178a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  40178e:	429a      	cmp	r2, r3
  401790:	bf28      	it	cs
  401792:	2401      	movcs	r4, #1
  401794:	e7cd      	b.n	401732 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401796:	4b16      	ldr	r3, [pc, #88]	; (4017f0 <xTaskIncrementTick+0x124>)
  401798:	681b      	ldr	r3, [r3, #0]
  40179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40179c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4017a0:	4a11      	ldr	r2, [pc, #68]	; (4017e8 <xTaskIncrementTick+0x11c>)
  4017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4017a6:	2b02      	cmp	r3, #2
  4017a8:	bf28      	it	cs
  4017aa:	2401      	movcs	r4, #1
  4017ac:	e004      	b.n	4017b8 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4017ae:	4a11      	ldr	r2, [pc, #68]	; (4017f4 <xTaskIncrementTick+0x128>)
  4017b0:	6813      	ldr	r3, [r2, #0]
  4017b2:	3301      	adds	r3, #1
  4017b4:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4017b6:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4017b8:	4b0f      	ldr	r3, [pc, #60]	; (4017f8 <xTaskIncrementTick+0x12c>)
  4017ba:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  4017bc:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  4017be:	bf0c      	ite	eq
  4017c0:	4620      	moveq	r0, r4
  4017c2:	2001      	movne	r0, #1
  4017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4017c8:	2040c20c 	.word	0x2040c20c
  4017cc:	2040c210 	.word	0x2040c210
  4017d0:	2040c154 	.word	0x2040c154
  4017d4:	2040c174 	.word	0x2040c174
  4017d8:	2040c150 	.word	0x2040c150
  4017dc:	00401375 	.word	0x00401375
  4017e0:	2040c214 	.word	0x2040c214
  4017e4:	2040c248 	.word	0x2040c248
  4017e8:	2040c17c 	.word	0x2040c17c
  4017ec:	00400b01 	.word	0x00400b01
  4017f0:	2040c1f4 	.word	0x2040c1f4
  4017f4:	2040c178 	.word	0x2040c178
  4017f8:	2040c24c 	.word	0x2040c24c
  4017fc:	00400b4d 	.word	0x00400b4d

00401800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401804:	4b36      	ldr	r3, [pc, #216]	; (4018e0 <xTaskResumeAll+0xe0>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	b953      	cbnz	r3, 401820 <xTaskResumeAll+0x20>
  40180a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40180e:	b672      	cpsid	i
  401810:	f383 8811 	msr	BASEPRI, r3
  401814:	f3bf 8f6f 	isb	sy
  401818:	f3bf 8f4f 	dsb	sy
  40181c:	b662      	cpsie	i
  40181e:	e7fe      	b.n	40181e <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401820:	4b30      	ldr	r3, [pc, #192]	; (4018e4 <xTaskResumeAll+0xe4>)
  401822:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401824:	4b2e      	ldr	r3, [pc, #184]	; (4018e0 <xTaskResumeAll+0xe0>)
  401826:	681a      	ldr	r2, [r3, #0]
  401828:	3a01      	subs	r2, #1
  40182a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40182c:	681b      	ldr	r3, [r3, #0]
  40182e:	2b00      	cmp	r3, #0
  401830:	d14d      	bne.n	4018ce <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401832:	4b2d      	ldr	r3, [pc, #180]	; (4018e8 <xTaskResumeAll+0xe8>)
  401834:	681b      	ldr	r3, [r3, #0]
  401836:	bb0b      	cbnz	r3, 40187c <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401838:	2400      	movs	r4, #0
  40183a:	e04b      	b.n	4018d4 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40183c:	68fb      	ldr	r3, [r7, #12]
  40183e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401840:	f104 0018 	add.w	r0, r4, #24
  401844:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401846:	f104 0804 	add.w	r8, r4, #4
  40184a:	4640      	mov	r0, r8
  40184c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40184e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401850:	682b      	ldr	r3, [r5, #0]
  401852:	2201      	movs	r2, #1
  401854:	4082      	lsls	r2, r0
  401856:	4313      	orrs	r3, r2
  401858:	602b      	str	r3, [r5, #0]
  40185a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40185e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401862:	4641      	mov	r1, r8
  401864:	4b21      	ldr	r3, [pc, #132]	; (4018ec <xTaskResumeAll+0xec>)
  401866:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401868:	4b21      	ldr	r3, [pc, #132]	; (4018f0 <xTaskResumeAll+0xf0>)
  40186a:	681b      	ldr	r3, [r3, #0]
  40186c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401870:	429a      	cmp	r2, r3
  401872:	d308      	bcc.n	401886 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401874:	2201      	movs	r2, #1
  401876:	4b1f      	ldr	r3, [pc, #124]	; (4018f4 <xTaskResumeAll+0xf4>)
  401878:	601a      	str	r2, [r3, #0]
  40187a:	e004      	b.n	401886 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40187c:	4f1e      	ldr	r7, [pc, #120]	; (4018f8 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40187e:	4e1f      	ldr	r6, [pc, #124]	; (4018fc <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401880:	4d1f      	ldr	r5, [pc, #124]	; (401900 <xTaskResumeAll+0x100>)
  401882:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401914 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401886:	683b      	ldr	r3, [r7, #0]
  401888:	2b00      	cmp	r3, #0
  40188a:	d1d7      	bne.n	40183c <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40188c:	4b1d      	ldr	r3, [pc, #116]	; (401904 <xTaskResumeAll+0x104>)
  40188e:	681b      	ldr	r3, [r3, #0]
  401890:	b17b      	cbz	r3, 4018b2 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401892:	4b1c      	ldr	r3, [pc, #112]	; (401904 <xTaskResumeAll+0x104>)
  401894:	681b      	ldr	r3, [r3, #0]
  401896:	b163      	cbz	r3, 4018b2 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401898:	4e1b      	ldr	r6, [pc, #108]	; (401908 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  40189a:	4d16      	ldr	r5, [pc, #88]	; (4018f4 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  40189c:	4c19      	ldr	r4, [pc, #100]	; (401904 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  40189e:	47b0      	blx	r6
  4018a0:	b108      	cbz	r0, 4018a6 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  4018a2:	2301      	movs	r3, #1
  4018a4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4018a6:	6823      	ldr	r3, [r4, #0]
  4018a8:	3b01      	subs	r3, #1
  4018aa:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4018ac:	6823      	ldr	r3, [r4, #0]
  4018ae:	2b00      	cmp	r3, #0
  4018b0:	d1f5      	bne.n	40189e <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4018b2:	4b10      	ldr	r3, [pc, #64]	; (4018f4 <xTaskResumeAll+0xf4>)
  4018b4:	681b      	ldr	r3, [r3, #0]
  4018b6:	2b01      	cmp	r3, #1
  4018b8:	d10b      	bne.n	4018d2 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4018ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018be:	4b13      	ldr	r3, [pc, #76]	; (40190c <xTaskResumeAll+0x10c>)
  4018c0:	601a      	str	r2, [r3, #0]
  4018c2:	f3bf 8f4f 	dsb	sy
  4018c6:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4018ca:	2401      	movs	r4, #1
  4018cc:	e002      	b.n	4018d4 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4018ce:	2400      	movs	r4, #0
  4018d0:	e000      	b.n	4018d4 <xTaskResumeAll+0xd4>
  4018d2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4018d4:	4b0e      	ldr	r3, [pc, #56]	; (401910 <xTaskResumeAll+0x110>)
  4018d6:	4798      	blx	r3

	return xAlreadyYielded;
}
  4018d8:	4620      	mov	r0, r4
  4018da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4018de:	bf00      	nop
  4018e0:	2040c20c 	.word	0x2040c20c
  4018e4:	0040080d 	.word	0x0040080d
  4018e8:	2040c21c 	.word	0x2040c21c
  4018ec:	00400b01 	.word	0x00400b01
  4018f0:	2040c1f4 	.word	0x2040c1f4
  4018f4:	2040c24c 	.word	0x2040c24c
  4018f8:	2040c1f8 	.word	0x2040c1f8
  4018fc:	00400b4d 	.word	0x00400b4d
  401900:	2040c248 	.word	0x2040c248
  401904:	2040c178 	.word	0x2040c178
  401908:	004016cd 	.word	0x004016cd
  40190c:	e000ed04 	.word	0xe000ed04
  401910:	00400859 	.word	0x00400859
  401914:	2040c17c 	.word	0x2040c17c

00401918 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
  401918:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
  40191a:	b950      	cbnz	r0, 401932 <vTaskDelayUntil+0x1a>
  40191c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401920:	b672      	cpsid	i
  401922:	f383 8811 	msr	BASEPRI, r3
  401926:	f3bf 8f6f 	isb	sy
  40192a:	f3bf 8f4f 	dsb	sy
  40192e:	b662      	cpsie	i
  401930:	e7fe      	b.n	401930 <vTaskDelayUntil+0x18>
  401932:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
  401934:	b951      	cbnz	r1, 40194c <vTaskDelayUntil+0x34>
  401936:	f04f 0380 	mov.w	r3, #128	; 0x80
  40193a:	b672      	cpsid	i
  40193c:	f383 8811 	msr	BASEPRI, r3
  401940:	f3bf 8f6f 	isb	sy
  401944:	f3bf 8f4f 	dsb	sy
  401948:	b662      	cpsie	i
  40194a:	e7fe      	b.n	40194a <vTaskDelayUntil+0x32>
		configASSERT( uxSchedulerSuspended == 0 );
  40194c:	4b24      	ldr	r3, [pc, #144]	; (4019e0 <vTaskDelayUntil+0xc8>)
  40194e:	681b      	ldr	r3, [r3, #0]
  401950:	b153      	cbz	r3, 401968 <vTaskDelayUntil+0x50>
  401952:	f04f 0380 	mov.w	r3, #128	; 0x80
  401956:	b672      	cpsid	i
  401958:	f383 8811 	msr	BASEPRI, r3
  40195c:	f3bf 8f6f 	isb	sy
  401960:	f3bf 8f4f 	dsb	sy
  401964:	b662      	cpsie	i
  401966:	e7fe      	b.n	401966 <vTaskDelayUntil+0x4e>
  401968:	460c      	mov	r4, r1

		vTaskSuspendAll();
  40196a:	4b1e      	ldr	r3, [pc, #120]	; (4019e4 <vTaskDelayUntil+0xcc>)
  40196c:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  40196e:	4b1e      	ldr	r3, [pc, #120]	; (4019e8 <vTaskDelayUntil+0xd0>)
  401970:	681a      	ldr	r2, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
  401972:	682b      	ldr	r3, [r5, #0]
  401974:	441c      	add	r4, r3

			if( xConstTickCount < *pxPreviousWakeTime )
  401976:	429a      	cmp	r2, r3
  401978:	d207      	bcs.n	40198a <vTaskDelayUntil+0x72>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  40197a:	42a3      	cmp	r3, r4
  40197c:	bf94      	ite	ls
  40197e:	2300      	movls	r3, #0
  401980:	2301      	movhi	r3, #1
  401982:	42a2      	cmp	r2, r4
  401984:	bf28      	it	cs
  401986:	2300      	movcs	r3, #0
  401988:	e008      	b.n	40199c <vTaskDelayUntil+0x84>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
  40198a:	42a2      	cmp	r2, r4
  40198c:	bf2c      	ite	cs
  40198e:	2200      	movcs	r2, #0
  401990:	2201      	movcc	r2, #1
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
  401992:	42a3      	cmp	r3, r4
  401994:	bf94      	ite	ls
  401996:	4613      	movls	r3, r2
  401998:	f042 0301 	orrhi.w	r3, r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
  40199c:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
  40199e:	b193      	cbz	r3, 4019c6 <vTaskDelayUntil+0xae>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019a0:	4b12      	ldr	r3, [pc, #72]	; (4019ec <vTaskDelayUntil+0xd4>)
  4019a2:	6818      	ldr	r0, [r3, #0]
  4019a4:	3004      	adds	r0, #4
  4019a6:	4b12      	ldr	r3, [pc, #72]	; (4019f0 <vTaskDelayUntil+0xd8>)
  4019a8:	4798      	blx	r3
  4019aa:	b948      	cbnz	r0, 4019c0 <vTaskDelayUntil+0xa8>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019ac:	4b0f      	ldr	r3, [pc, #60]	; (4019ec <vTaskDelayUntil+0xd4>)
  4019ae:	681a      	ldr	r2, [r3, #0]
  4019b0:	4910      	ldr	r1, [pc, #64]	; (4019f4 <vTaskDelayUntil+0xdc>)
  4019b2:	680b      	ldr	r3, [r1, #0]
  4019b4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019b6:	2201      	movs	r2, #1
  4019b8:	4082      	lsls	r2, r0
  4019ba:	ea23 0302 	bic.w	r3, r3, r2
  4019be:	600b      	str	r3, [r1, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4019c0:	4620      	mov	r0, r4
  4019c2:	4b0d      	ldr	r3, [pc, #52]	; (4019f8 <vTaskDelayUntil+0xe0>)
  4019c4:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
  4019c6:	4b0d      	ldr	r3, [pc, #52]	; (4019fc <vTaskDelayUntil+0xe4>)
  4019c8:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4019ca:	b938      	cbnz	r0, 4019dc <vTaskDelayUntil+0xc4>
		{
			portYIELD_WITHIN_API();
  4019cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019d0:	4b0b      	ldr	r3, [pc, #44]	; (401a00 <vTaskDelayUntil+0xe8>)
  4019d2:	601a      	str	r2, [r3, #0]
  4019d4:	f3bf 8f4f 	dsb	sy
  4019d8:	f3bf 8f6f 	isb	sy
  4019dc:	bd38      	pop	{r3, r4, r5, pc}
  4019de:	bf00      	nop
  4019e0:	2040c20c 	.word	0x2040c20c
  4019e4:	004016b1 	.word	0x004016b1
  4019e8:	2040c210 	.word	0x2040c210
  4019ec:	2040c1f4 	.word	0x2040c1f4
  4019f0:	00400b4d 	.word	0x00400b4d
  4019f4:	2040c248 	.word	0x2040c248
  4019f8:	004013a1 	.word	0x004013a1
  4019fc:	00401801 	.word	0x00401801
  401a00:	e000ed04 	.word	0xe000ed04

00401a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401a04:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401a06:	4d18      	ldr	r5, [pc, #96]	; (401a68 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401a08:	4e18      	ldr	r6, [pc, #96]	; (401a6c <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401a0a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401a8c <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401a0e:	4f18      	ldr	r7, [pc, #96]	; (401a70 <prvIdleTask+0x6c>)
  401a10:	e019      	b.n	401a46 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401a12:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401a14:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401a16:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401a18:	b1ac      	cbz	r4, 401a46 <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401a1a:	4b16      	ldr	r3, [pc, #88]	; (401a74 <prvIdleTask+0x70>)
  401a1c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401a1e:	68f3      	ldr	r3, [r6, #12]
  401a20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401a22:	1d20      	adds	r0, r4, #4
  401a24:	4b14      	ldr	r3, [pc, #80]	; (401a78 <prvIdleTask+0x74>)
  401a26:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401a28:	4a14      	ldr	r2, [pc, #80]	; (401a7c <prvIdleTask+0x78>)
  401a2a:	6813      	ldr	r3, [r2, #0]
  401a2c:	3b01      	subs	r3, #1
  401a2e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401a30:	682b      	ldr	r3, [r5, #0]
  401a32:	3b01      	subs	r3, #1
  401a34:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401a36:	4b12      	ldr	r3, [pc, #72]	; (401a80 <prvIdleTask+0x7c>)
  401a38:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401a3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401a3c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401a90 <prvIdleTask+0x8c>
  401a40:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401a42:	4620      	mov	r0, r4
  401a44:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401a46:	682b      	ldr	r3, [r5, #0]
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d1e2      	bne.n	401a12 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401a4c:	4b0d      	ldr	r3, [pc, #52]	; (401a84 <prvIdleTask+0x80>)
  401a4e:	681b      	ldr	r3, [r3, #0]
  401a50:	2b01      	cmp	r3, #1
  401a52:	d9f8      	bls.n	401a46 <prvIdleTask+0x42>
			{
				taskYIELD();
  401a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a58:	4b0b      	ldr	r3, [pc, #44]	; (401a88 <prvIdleTask+0x84>)
  401a5a:	601a      	str	r2, [r3, #0]
  401a5c:	f3bf 8f4f 	dsb	sy
  401a60:	f3bf 8f6f 	isb	sy
  401a64:	e7d1      	b.n	401a0a <prvIdleTask+0x6>
  401a66:	bf00      	nop
  401a68:	2040c15c 	.word	0x2040c15c
  401a6c:	2040c1e0 	.word	0x2040c1e0
  401a70:	00401801 	.word	0x00401801
  401a74:	0040080d 	.word	0x0040080d
  401a78:	00400b4d 	.word	0x00400b4d
  401a7c:	2040c21c 	.word	0x2040c21c
  401a80:	00400859 	.word	0x00400859
  401a84:	2040c17c 	.word	0x2040c17c
  401a88:	e000ed04 	.word	0xe000ed04
  401a8c:	004016b1 	.word	0x004016b1
  401a90:	00400ac5 	.word	0x00400ac5

00401a94 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401a94:	4b20      	ldr	r3, [pc, #128]	; (401b18 <vTaskSwitchContext+0x84>)
  401a96:	681b      	ldr	r3, [r3, #0]
  401a98:	b11b      	cbz	r3, 401aa2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401a9a:	2201      	movs	r2, #1
  401a9c:	4b1f      	ldr	r3, [pc, #124]	; (401b1c <vTaskSwitchContext+0x88>)
  401a9e:	601a      	str	r2, [r3, #0]
  401aa0:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401aa2:	2200      	movs	r2, #0
  401aa4:	4b1d      	ldr	r3, [pc, #116]	; (401b1c <vTaskSwitchContext+0x88>)
  401aa6:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401aa8:	4b1d      	ldr	r3, [pc, #116]	; (401b20 <vTaskSwitchContext+0x8c>)
  401aaa:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401aac:	fab3 f383 	clz	r3, r3
  401ab0:	b2db      	uxtb	r3, r3
  401ab2:	f1c3 031f 	rsb	r3, r3, #31
  401ab6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401aba:	4a1a      	ldr	r2, [pc, #104]	; (401b24 <vTaskSwitchContext+0x90>)
  401abc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401ac0:	b952      	cbnz	r2, 401ad8 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac6:	b672      	cpsid	i
  401ac8:	f383 8811 	msr	BASEPRI, r3
  401acc:	f3bf 8f6f 	isb	sy
  401ad0:	f3bf 8f4f 	dsb	sy
  401ad4:	b662      	cpsie	i
  401ad6:	e7fe      	b.n	401ad6 <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401ad8:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401ada:	4a12      	ldr	r2, [pc, #72]	; (401b24 <vTaskSwitchContext+0x90>)
  401adc:	0099      	lsls	r1, r3, #2
  401ade:	18c8      	adds	r0, r1, r3
  401ae0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401ae4:	6844      	ldr	r4, [r0, #4]
  401ae6:	6864      	ldr	r4, [r4, #4]
  401ae8:	6044      	str	r4, [r0, #4]
  401aea:	4602      	mov	r2, r0
  401aec:	3208      	adds	r2, #8
  401aee:	4294      	cmp	r4, r2
  401af0:	d106      	bne.n	401b00 <vTaskSwitchContext+0x6c>
  401af2:	6860      	ldr	r0, [r4, #4]
  401af4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401af8:	4a0a      	ldr	r2, [pc, #40]	; (401b24 <vTaskSwitchContext+0x90>)
  401afa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401afe:	6050      	str	r0, [r2, #4]
  401b00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401b04:	4a07      	ldr	r2, [pc, #28]	; (401b24 <vTaskSwitchContext+0x90>)
  401b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401b0a:	685b      	ldr	r3, [r3, #4]
  401b0c:	68da      	ldr	r2, [r3, #12]
  401b0e:	4b06      	ldr	r3, [pc, #24]	; (401b28 <vTaskSwitchContext+0x94>)
  401b10:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401b12:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b16:	4770      	bx	lr
  401b18:	2040c20c 	.word	0x2040c20c
  401b1c:	2040c24c 	.word	0x2040c24c
  401b20:	2040c248 	.word	0x2040c248
  401b24:	2040c17c 	.word	0x2040c17c
  401b28:	2040c1f4 	.word	0x2040c1f4

00401b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401b2c:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401b2e:	b950      	cbnz	r0, 401b46 <vTaskPlaceOnEventList+0x1a>
  401b30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b34:	b672      	cpsid	i
  401b36:	f383 8811 	msr	BASEPRI, r3
  401b3a:	f3bf 8f6f 	isb	sy
  401b3e:	f3bf 8f4f 	dsb	sy
  401b42:	b662      	cpsie	i
  401b44:	e7fe      	b.n	401b44 <vTaskPlaceOnEventList+0x18>
  401b46:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401b48:	4d11      	ldr	r5, [pc, #68]	; (401b90 <vTaskPlaceOnEventList+0x64>)
  401b4a:	6829      	ldr	r1, [r5, #0]
  401b4c:	3118      	adds	r1, #24
  401b4e:	4b11      	ldr	r3, [pc, #68]	; (401b94 <vTaskPlaceOnEventList+0x68>)
  401b50:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401b52:	6828      	ldr	r0, [r5, #0]
  401b54:	3004      	adds	r0, #4
  401b56:	4b10      	ldr	r3, [pc, #64]	; (401b98 <vTaskPlaceOnEventList+0x6c>)
  401b58:	4798      	blx	r3
  401b5a:	b940      	cbnz	r0, 401b6e <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401b5c:	682a      	ldr	r2, [r5, #0]
  401b5e:	490f      	ldr	r1, [pc, #60]	; (401b9c <vTaskPlaceOnEventList+0x70>)
  401b60:	680b      	ldr	r3, [r1, #0]
  401b62:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401b64:	2201      	movs	r2, #1
  401b66:	4082      	lsls	r2, r0
  401b68:	ea23 0302 	bic.w	r3, r3, r2
  401b6c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401b6e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b72:	d106      	bne.n	401b82 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401b74:	4b06      	ldr	r3, [pc, #24]	; (401b90 <vTaskPlaceOnEventList+0x64>)
  401b76:	6819      	ldr	r1, [r3, #0]
  401b78:	4809      	ldr	r0, [pc, #36]	; (401ba0 <vTaskPlaceOnEventList+0x74>)
  401b7a:	3104      	adds	r1, #4
  401b7c:	4b09      	ldr	r3, [pc, #36]	; (401ba4 <vTaskPlaceOnEventList+0x78>)
  401b7e:	4798      	blx	r3
  401b80:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401b82:	4b09      	ldr	r3, [pc, #36]	; (401ba8 <vTaskPlaceOnEventList+0x7c>)
  401b84:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b86:	4420      	add	r0, r4
  401b88:	4b08      	ldr	r3, [pc, #32]	; (401bac <vTaskPlaceOnEventList+0x80>)
  401b8a:	4798      	blx	r3
  401b8c:	bd38      	pop	{r3, r4, r5, pc}
  401b8e:	bf00      	nop
  401b90:	2040c1f4 	.word	0x2040c1f4
  401b94:	00400b19 	.word	0x00400b19
  401b98:	00400b4d 	.word	0x00400b4d
  401b9c:	2040c248 	.word	0x2040c248
  401ba0:	2040c234 	.word	0x2040c234
  401ba4:	00400b01 	.word	0x00400b01
  401ba8:	2040c210 	.word	0x2040c210
  401bac:	004013a1 	.word	0x004013a1

00401bb0 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401bb0:	b950      	cbnz	r0, 401bc8 <vTaskPlaceOnEventListRestricted+0x18>
  401bb2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bb6:	b672      	cpsid	i
  401bb8:	f383 8811 	msr	BASEPRI, r3
  401bbc:	f3bf 8f6f 	isb	sy
  401bc0:	f3bf 8f4f 	dsb	sy
  401bc4:	b662      	cpsie	i
  401bc6:	e7fe      	b.n	401bc6 <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401bc8:	b570      	push	{r4, r5, r6, lr}
  401bca:	4615      	mov	r5, r2
  401bcc:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401bce:	4e11      	ldr	r6, [pc, #68]	; (401c14 <vTaskPlaceOnEventListRestricted+0x64>)
  401bd0:	6831      	ldr	r1, [r6, #0]
  401bd2:	3118      	adds	r1, #24
  401bd4:	4b10      	ldr	r3, [pc, #64]	; (401c18 <vTaskPlaceOnEventListRestricted+0x68>)
  401bd6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401bd8:	6830      	ldr	r0, [r6, #0]
  401bda:	3004      	adds	r0, #4
  401bdc:	4b0f      	ldr	r3, [pc, #60]	; (401c1c <vTaskPlaceOnEventListRestricted+0x6c>)
  401bde:	4798      	blx	r3
  401be0:	b940      	cbnz	r0, 401bf4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401be2:	6832      	ldr	r2, [r6, #0]
  401be4:	490e      	ldr	r1, [pc, #56]	; (401c20 <vTaskPlaceOnEventListRestricted+0x70>)
  401be6:	680b      	ldr	r3, [r1, #0]
  401be8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401bea:	2201      	movs	r2, #1
  401bec:	4082      	lsls	r2, r0
  401bee:	ea23 0302 	bic.w	r3, r3, r2
  401bf2:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401bf4:	2d01      	cmp	r5, #1
  401bf6:	d106      	bne.n	401c06 <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401bf8:	4b06      	ldr	r3, [pc, #24]	; (401c14 <vTaskPlaceOnEventListRestricted+0x64>)
  401bfa:	6819      	ldr	r1, [r3, #0]
  401bfc:	4809      	ldr	r0, [pc, #36]	; (401c24 <vTaskPlaceOnEventListRestricted+0x74>)
  401bfe:	3104      	adds	r1, #4
  401c00:	4b05      	ldr	r3, [pc, #20]	; (401c18 <vTaskPlaceOnEventListRestricted+0x68>)
  401c02:	4798      	blx	r3
  401c04:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401c06:	4b08      	ldr	r3, [pc, #32]	; (401c28 <vTaskPlaceOnEventListRestricted+0x78>)
  401c08:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401c0a:	4420      	add	r0, r4
  401c0c:	4b07      	ldr	r3, [pc, #28]	; (401c2c <vTaskPlaceOnEventListRestricted+0x7c>)
  401c0e:	4798      	blx	r3
  401c10:	bd70      	pop	{r4, r5, r6, pc}
  401c12:	bf00      	nop
  401c14:	2040c1f4 	.word	0x2040c1f4
  401c18:	00400b01 	.word	0x00400b01
  401c1c:	00400b4d 	.word	0x00400b4d
  401c20:	2040c248 	.word	0x2040c248
  401c24:	2040c234 	.word	0x2040c234
  401c28:	2040c210 	.word	0x2040c210
  401c2c:	004013a1 	.word	0x004013a1

00401c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401c30:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401c32:	68c3      	ldr	r3, [r0, #12]
  401c34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401c36:	b954      	cbnz	r4, 401c4e <xTaskRemoveFromEventList+0x1e>
  401c38:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c3c:	b672      	cpsid	i
  401c3e:	f383 8811 	msr	BASEPRI, r3
  401c42:	f3bf 8f6f 	isb	sy
  401c46:	f3bf 8f4f 	dsb	sy
  401c4a:	b662      	cpsie	i
  401c4c:	e7fe      	b.n	401c4c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401c4e:	f104 0518 	add.w	r5, r4, #24
  401c52:	4628      	mov	r0, r5
  401c54:	4b14      	ldr	r3, [pc, #80]	; (401ca8 <xTaskRemoveFromEventList+0x78>)
  401c56:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c58:	4b14      	ldr	r3, [pc, #80]	; (401cac <xTaskRemoveFromEventList+0x7c>)
  401c5a:	681b      	ldr	r3, [r3, #0]
  401c5c:	b99b      	cbnz	r3, 401c86 <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401c5e:	1d25      	adds	r5, r4, #4
  401c60:	4628      	mov	r0, r5
  401c62:	4b11      	ldr	r3, [pc, #68]	; (401ca8 <xTaskRemoveFromEventList+0x78>)
  401c64:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401c66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c68:	4911      	ldr	r1, [pc, #68]	; (401cb0 <xTaskRemoveFromEventList+0x80>)
  401c6a:	680b      	ldr	r3, [r1, #0]
  401c6c:	2201      	movs	r2, #1
  401c6e:	4082      	lsls	r2, r0
  401c70:	4313      	orrs	r3, r2
  401c72:	600b      	str	r3, [r1, #0]
  401c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c78:	4b0e      	ldr	r3, [pc, #56]	; (401cb4 <xTaskRemoveFromEventList+0x84>)
  401c7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c7e:	4629      	mov	r1, r5
  401c80:	4b0d      	ldr	r3, [pc, #52]	; (401cb8 <xTaskRemoveFromEventList+0x88>)
  401c82:	4798      	blx	r3
  401c84:	e003      	b.n	401c8e <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401c86:	480d      	ldr	r0, [pc, #52]	; (401cbc <xTaskRemoveFromEventList+0x8c>)
  401c88:	4629      	mov	r1, r5
  401c8a:	4b0b      	ldr	r3, [pc, #44]	; (401cb8 <xTaskRemoveFromEventList+0x88>)
  401c8c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401c8e:	4b0c      	ldr	r3, [pc, #48]	; (401cc0 <xTaskRemoveFromEventList+0x90>)
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c96:	429a      	cmp	r2, r3
  401c98:	d903      	bls.n	401ca2 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401c9a:	2001      	movs	r0, #1
  401c9c:	4b09      	ldr	r3, [pc, #36]	; (401cc4 <xTaskRemoveFromEventList+0x94>)
  401c9e:	6018      	str	r0, [r3, #0]
  401ca0:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401ca2:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401ca4:	bd38      	pop	{r3, r4, r5, pc}
  401ca6:	bf00      	nop
  401ca8:	00400b4d 	.word	0x00400b4d
  401cac:	2040c20c 	.word	0x2040c20c
  401cb0:	2040c248 	.word	0x2040c248
  401cb4:	2040c17c 	.word	0x2040c17c
  401cb8:	00400b01 	.word	0x00400b01
  401cbc:	2040c1f8 	.word	0x2040c1f8
  401cc0:	2040c1f4 	.word	0x2040c1f4
  401cc4:	2040c24c 	.word	0x2040c24c

00401cc8 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401cc8:	b950      	cbnz	r0, 401ce0 <vTaskSetTimeOutState+0x18>
  401cca:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cce:	b672      	cpsid	i
  401cd0:	f383 8811 	msr	BASEPRI, r3
  401cd4:	f3bf 8f6f 	isb	sy
  401cd8:	f3bf 8f4f 	dsb	sy
  401cdc:	b662      	cpsie	i
  401cde:	e7fe      	b.n	401cde <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401ce0:	4a03      	ldr	r2, [pc, #12]	; (401cf0 <vTaskSetTimeOutState+0x28>)
  401ce2:	6812      	ldr	r2, [r2, #0]
  401ce4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401ce6:	4a03      	ldr	r2, [pc, #12]	; (401cf4 <vTaskSetTimeOutState+0x2c>)
  401ce8:	6812      	ldr	r2, [r2, #0]
  401cea:	6042      	str	r2, [r0, #4]
  401cec:	4770      	bx	lr
  401cee:	bf00      	nop
  401cf0:	2040c150 	.word	0x2040c150
  401cf4:	2040c210 	.word	0x2040c210

00401cf8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401cf8:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401cfa:	b950      	cbnz	r0, 401d12 <xTaskCheckForTimeOut+0x1a>
  401cfc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d00:	b672      	cpsid	i
  401d02:	f383 8811 	msr	BASEPRI, r3
  401d06:	f3bf 8f6f 	isb	sy
  401d0a:	f3bf 8f4f 	dsb	sy
  401d0e:	b662      	cpsie	i
  401d10:	e7fe      	b.n	401d10 <xTaskCheckForTimeOut+0x18>
  401d12:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401d14:	b951      	cbnz	r1, 401d2c <xTaskCheckForTimeOut+0x34>
  401d16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d1a:	b672      	cpsid	i
  401d1c:	f383 8811 	msr	BASEPRI, r3
  401d20:	f3bf 8f6f 	isb	sy
  401d24:	f3bf 8f4f 	dsb	sy
  401d28:	b662      	cpsie	i
  401d2a:	e7fe      	b.n	401d2a <xTaskCheckForTimeOut+0x32>
  401d2c:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401d2e:	4b12      	ldr	r3, [pc, #72]	; (401d78 <xTaskCheckForTimeOut+0x80>)
  401d30:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401d32:	4b12      	ldr	r3, [pc, #72]	; (401d7c <xTaskCheckForTimeOut+0x84>)
  401d34:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401d36:	682b      	ldr	r3, [r5, #0]
  401d38:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d3c:	d013      	beq.n	401d66 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401d3e:	4a10      	ldr	r2, [pc, #64]	; (401d80 <xTaskCheckForTimeOut+0x88>)
  401d40:	6812      	ldr	r2, [r2, #0]
  401d42:	6820      	ldr	r0, [r4, #0]
  401d44:	4290      	cmp	r0, r2
  401d46:	d002      	beq.n	401d4e <xTaskCheckForTimeOut+0x56>
  401d48:	6862      	ldr	r2, [r4, #4]
  401d4a:	4291      	cmp	r1, r2
  401d4c:	d20d      	bcs.n	401d6a <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401d4e:	6862      	ldr	r2, [r4, #4]
  401d50:	1a88      	subs	r0, r1, r2
  401d52:	4283      	cmp	r3, r0
  401d54:	d90b      	bls.n	401d6e <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401d56:	1a52      	subs	r2, r2, r1
  401d58:	4413      	add	r3, r2
  401d5a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401d5c:	4620      	mov	r0, r4
  401d5e:	4b09      	ldr	r3, [pc, #36]	; (401d84 <xTaskCheckForTimeOut+0x8c>)
  401d60:	4798      	blx	r3
			xReturn = pdFALSE;
  401d62:	2400      	movs	r4, #0
  401d64:	e004      	b.n	401d70 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401d66:	2400      	movs	r4, #0
  401d68:	e002      	b.n	401d70 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401d6a:	2401      	movs	r4, #1
  401d6c:	e000      	b.n	401d70 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401d6e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401d70:	4b05      	ldr	r3, [pc, #20]	; (401d88 <xTaskCheckForTimeOut+0x90>)
  401d72:	4798      	blx	r3

	return xReturn;
}
  401d74:	4620      	mov	r0, r4
  401d76:	bd38      	pop	{r3, r4, r5, pc}
  401d78:	0040080d 	.word	0x0040080d
  401d7c:	2040c210 	.word	0x2040c210
  401d80:	2040c150 	.word	0x2040c150
  401d84:	00401cc9 	.word	0x00401cc9
  401d88:	00400859 	.word	0x00400859

00401d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401d8c:	2201      	movs	r2, #1
  401d8e:	4b01      	ldr	r3, [pc, #4]	; (401d94 <vTaskMissedYield+0x8>)
  401d90:	601a      	str	r2, [r3, #0]
  401d92:	4770      	bx	lr
  401d94:	2040c24c 	.word	0x2040c24c

00401d98 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401d98:	4b05      	ldr	r3, [pc, #20]	; (401db0 <xTaskGetSchedulerState+0x18>)
  401d9a:	681b      	ldr	r3, [r3, #0]
  401d9c:	b133      	cbz	r3, 401dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401d9e:	4b05      	ldr	r3, [pc, #20]	; (401db4 <xTaskGetSchedulerState+0x1c>)
  401da0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401da2:	2b00      	cmp	r3, #0
  401da4:	bf0c      	ite	eq
  401da6:	2002      	moveq	r0, #2
  401da8:	2000      	movne	r0, #0
  401daa:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401dac:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401dae:	4770      	bx	lr
  401db0:	2040c158 	.word	0x2040c158
  401db4:	2040c20c 	.word	0x2040c20c

00401db8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401db8:	2800      	cmp	r0, #0
  401dba:	d045      	beq.n	401e48 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401dbc:	b538      	push	{r3, r4, r5, lr}
  401dbe:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401dc0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401dc2:	4922      	ldr	r1, [pc, #136]	; (401e4c <vTaskPriorityInherit+0x94>)
  401dc4:	6809      	ldr	r1, [r1, #0]
  401dc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401dc8:	428a      	cmp	r2, r1
  401dca:	d23c      	bcs.n	401e46 <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401dcc:	6981      	ldr	r1, [r0, #24]
  401dce:	2900      	cmp	r1, #0
  401dd0:	db05      	blt.n	401dde <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dd2:	491e      	ldr	r1, [pc, #120]	; (401e4c <vTaskPriorityInherit+0x94>)
  401dd4:	6809      	ldr	r1, [r1, #0]
  401dd6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401dd8:	f1c1 0105 	rsb	r1, r1, #5
  401ddc:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401dde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401de2:	491b      	ldr	r1, [pc, #108]	; (401e50 <vTaskPriorityInherit+0x98>)
  401de4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401de8:	6959      	ldr	r1, [r3, #20]
  401dea:	4291      	cmp	r1, r2
  401dec:	d127      	bne.n	401e3e <vTaskPriorityInherit+0x86>
  401dee:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401df0:	1d1d      	adds	r5, r3, #4
  401df2:	4628      	mov	r0, r5
  401df4:	4b17      	ldr	r3, [pc, #92]	; (401e54 <vTaskPriorityInherit+0x9c>)
  401df6:	4798      	blx	r3
  401df8:	b970      	cbnz	r0, 401e18 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401dfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401dfc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e00:	4a13      	ldr	r2, [pc, #76]	; (401e50 <vTaskPriorityInherit+0x98>)
  401e02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e06:	b93a      	cbnz	r2, 401e18 <vTaskPriorityInherit+0x60>
  401e08:	4813      	ldr	r0, [pc, #76]	; (401e58 <vTaskPriorityInherit+0xa0>)
  401e0a:	6802      	ldr	r2, [r0, #0]
  401e0c:	2101      	movs	r1, #1
  401e0e:	fa01 f303 	lsl.w	r3, r1, r3
  401e12:	ea22 0303 	bic.w	r3, r2, r3
  401e16:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401e18:	4b0c      	ldr	r3, [pc, #48]	; (401e4c <vTaskPriorityInherit+0x94>)
  401e1a:	681b      	ldr	r3, [r3, #0]
  401e1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e1e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401e20:	490d      	ldr	r1, [pc, #52]	; (401e58 <vTaskPriorityInherit+0xa0>)
  401e22:	680a      	ldr	r2, [r1, #0]
  401e24:	2301      	movs	r3, #1
  401e26:	4083      	lsls	r3, r0
  401e28:	4313      	orrs	r3, r2
  401e2a:	600b      	str	r3, [r1, #0]
  401e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e30:	4b07      	ldr	r3, [pc, #28]	; (401e50 <vTaskPriorityInherit+0x98>)
  401e32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e36:	4629      	mov	r1, r5
  401e38:	4b08      	ldr	r3, [pc, #32]	; (401e5c <vTaskPriorityInherit+0xa4>)
  401e3a:	4798      	blx	r3
  401e3c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401e3e:	4a03      	ldr	r2, [pc, #12]	; (401e4c <vTaskPriorityInherit+0x94>)
  401e40:	6812      	ldr	r2, [r2, #0]
  401e42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401e44:	62da      	str	r2, [r3, #44]	; 0x2c
  401e46:	bd38      	pop	{r3, r4, r5, pc}
  401e48:	4770      	bx	lr
  401e4a:	bf00      	nop
  401e4c:	2040c1f4 	.word	0x2040c1f4
  401e50:	2040c17c 	.word	0x2040c17c
  401e54:	00400b4d 	.word	0x00400b4d
  401e58:	2040c248 	.word	0x2040c248
  401e5c:	00400b01 	.word	0x00400b01

00401e60 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401e60:	2800      	cmp	r0, #0
  401e62:	d04e      	beq.n	401f02 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401e64:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401e66:	4a29      	ldr	r2, [pc, #164]	; (401f0c <xTaskPriorityDisinherit+0xac>)
  401e68:	6812      	ldr	r2, [r2, #0]
  401e6a:	4290      	cmp	r0, r2
  401e6c:	d00a      	beq.n	401e84 <xTaskPriorityDisinherit+0x24>
  401e6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e72:	b672      	cpsid	i
  401e74:	f383 8811 	msr	BASEPRI, r3
  401e78:	f3bf 8f6f 	isb	sy
  401e7c:	f3bf 8f4f 	dsb	sy
  401e80:	b662      	cpsie	i
  401e82:	e7fe      	b.n	401e82 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  401e84:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401e86:	b952      	cbnz	r2, 401e9e <xTaskPriorityDisinherit+0x3e>
  401e88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e8c:	b672      	cpsid	i
  401e8e:	f383 8811 	msr	BASEPRI, r3
  401e92:	f3bf 8f6f 	isb	sy
  401e96:	f3bf 8f4f 	dsb	sy
  401e9a:	b662      	cpsie	i
  401e9c:	e7fe      	b.n	401e9c <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  401e9e:	3a01      	subs	r2, #1
  401ea0:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401ea2:	2a00      	cmp	r2, #0
  401ea4:	d12f      	bne.n	401f06 <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401ea6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401ea8:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401eaa:	4291      	cmp	r1, r2
  401eac:	d02b      	beq.n	401f06 <xTaskPriorityDisinherit+0xa6>
  401eae:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401eb0:	1d05      	adds	r5, r0, #4
  401eb2:	4628      	mov	r0, r5
  401eb4:	4b16      	ldr	r3, [pc, #88]	; (401f10 <xTaskPriorityDisinherit+0xb0>)
  401eb6:	4798      	blx	r3
  401eb8:	b968      	cbnz	r0, 401ed6 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401eba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401ebc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401ec0:	4b14      	ldr	r3, [pc, #80]	; (401f14 <xTaskPriorityDisinherit+0xb4>)
  401ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401ec6:	b933      	cbnz	r3, 401ed6 <xTaskPriorityDisinherit+0x76>
  401ec8:	4813      	ldr	r0, [pc, #76]	; (401f18 <xTaskPriorityDisinherit+0xb8>)
  401eca:	6803      	ldr	r3, [r0, #0]
  401ecc:	2201      	movs	r2, #1
  401ece:	408a      	lsls	r2, r1
  401ed0:	ea23 0302 	bic.w	r3, r3, r2
  401ed4:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401ed6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401ed8:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401eda:	f1c0 0305 	rsb	r3, r0, #5
  401ede:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401ee0:	4a0d      	ldr	r2, [pc, #52]	; (401f18 <xTaskPriorityDisinherit+0xb8>)
  401ee2:	6813      	ldr	r3, [r2, #0]
  401ee4:	2401      	movs	r4, #1
  401ee6:	fa04 f100 	lsl.w	r1, r4, r0
  401eea:	430b      	orrs	r3, r1
  401eec:	6013      	str	r3, [r2, #0]
  401eee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ef2:	4b08      	ldr	r3, [pc, #32]	; (401f14 <xTaskPriorityDisinherit+0xb4>)
  401ef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ef8:	4629      	mov	r1, r5
  401efa:	4b08      	ldr	r3, [pc, #32]	; (401f1c <xTaskPriorityDisinherit+0xbc>)
  401efc:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401efe:	4620      	mov	r0, r4
  401f00:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401f02:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401f04:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401f06:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401f08:	bd38      	pop	{r3, r4, r5, pc}
  401f0a:	bf00      	nop
  401f0c:	2040c1f4 	.word	0x2040c1f4
  401f10:	00400b4d 	.word	0x00400b4d
  401f14:	2040c17c 	.word	0x2040c17c
  401f18:	2040c248 	.word	0x2040c248
  401f1c:	00400b01 	.word	0x00400b01

00401f20 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401f20:	4b05      	ldr	r3, [pc, #20]	; (401f38 <pvTaskIncrementMutexHeldCount+0x18>)
  401f22:	681b      	ldr	r3, [r3, #0]
  401f24:	b123      	cbz	r3, 401f30 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401f26:	4b04      	ldr	r3, [pc, #16]	; (401f38 <pvTaskIncrementMutexHeldCount+0x18>)
  401f28:	681a      	ldr	r2, [r3, #0]
  401f2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401f2c:	3301      	adds	r3, #1
  401f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401f30:	4b01      	ldr	r3, [pc, #4]	; (401f38 <pvTaskIncrementMutexHeldCount+0x18>)
  401f32:	6818      	ldr	r0, [r3, #0]
	}
  401f34:	4770      	bx	lr
  401f36:	bf00      	nop
  401f38:	2040c1f4 	.word	0x2040c1f4

00401f3c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401f3c:	b510      	push	{r4, lr}
  401f3e:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401f40:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f42:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  401f44:	4291      	cmp	r1, r2
  401f46:	d80a      	bhi.n	401f5e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401f48:	1ad2      	subs	r2, r2, r3
  401f4a:	6983      	ldr	r3, [r0, #24]
  401f4c:	429a      	cmp	r2, r3
  401f4e:	d211      	bcs.n	401f74 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401f50:	4b0a      	ldr	r3, [pc, #40]	; (401f7c <prvInsertTimerInActiveList+0x40>)
  401f52:	6818      	ldr	r0, [r3, #0]
  401f54:	1d21      	adds	r1, r4, #4
  401f56:	4b0a      	ldr	r3, [pc, #40]	; (401f80 <prvInsertTimerInActiveList+0x44>)
  401f58:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401f5a:	2000      	movs	r0, #0
  401f5c:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401f5e:	4299      	cmp	r1, r3
  401f60:	d301      	bcc.n	401f66 <prvInsertTimerInActiveList+0x2a>
  401f62:	429a      	cmp	r2, r3
  401f64:	d308      	bcc.n	401f78 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f66:	4b07      	ldr	r3, [pc, #28]	; (401f84 <prvInsertTimerInActiveList+0x48>)
  401f68:	6818      	ldr	r0, [r3, #0]
  401f6a:	1d21      	adds	r1, r4, #4
  401f6c:	4b04      	ldr	r3, [pc, #16]	; (401f80 <prvInsertTimerInActiveList+0x44>)
  401f6e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401f70:	2000      	movs	r0, #0
  401f72:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401f74:	2001      	movs	r0, #1
  401f76:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401f78:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401f7a:	bd10      	pop	{r4, pc}
  401f7c:	2040c284 	.word	0x2040c284
  401f80:	00400b19 	.word	0x00400b19
  401f84:	2040c250 	.word	0x2040c250

00401f88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401f88:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401f8a:	4b14      	ldr	r3, [pc, #80]	; (401fdc <prvCheckForValidListAndQueue+0x54>)
  401f8c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401f8e:	4b14      	ldr	r3, [pc, #80]	; (401fe0 <prvCheckForValidListAndQueue+0x58>)
  401f90:	681b      	ldr	r3, [r3, #0]
  401f92:	bb03      	cbnz	r3, 401fd6 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401f94:	4d13      	ldr	r5, [pc, #76]	; (401fe4 <prvCheckForValidListAndQueue+0x5c>)
  401f96:	4628      	mov	r0, r5
  401f98:	4e13      	ldr	r6, [pc, #76]	; (401fe8 <prvCheckForValidListAndQueue+0x60>)
  401f9a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401f9c:	4c13      	ldr	r4, [pc, #76]	; (401fec <prvCheckForValidListAndQueue+0x64>)
  401f9e:	4620      	mov	r0, r4
  401fa0:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401fa2:	4b13      	ldr	r3, [pc, #76]	; (401ff0 <prvCheckForValidListAndQueue+0x68>)
  401fa4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401fa6:	4b13      	ldr	r3, [pc, #76]	; (401ff4 <prvCheckForValidListAndQueue+0x6c>)
  401fa8:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401faa:	2005      	movs	r0, #5
  401fac:	2110      	movs	r1, #16
  401fae:	2200      	movs	r2, #0
  401fb0:	4b11      	ldr	r3, [pc, #68]	; (401ff8 <prvCheckForValidListAndQueue+0x70>)
  401fb2:	4798      	blx	r3
  401fb4:	4b0a      	ldr	r3, [pc, #40]	; (401fe0 <prvCheckForValidListAndQueue+0x58>)
  401fb6:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401fb8:	b950      	cbnz	r0, 401fd0 <prvCheckForValidListAndQueue+0x48>
  401fba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fbe:	b672      	cpsid	i
  401fc0:	f383 8811 	msr	BASEPRI, r3
  401fc4:	f3bf 8f6f 	isb	sy
  401fc8:	f3bf 8f4f 	dsb	sy
  401fcc:	b662      	cpsie	i
  401fce:	e7fe      	b.n	401fce <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401fd0:	490a      	ldr	r1, [pc, #40]	; (401ffc <prvCheckForValidListAndQueue+0x74>)
  401fd2:	4b0b      	ldr	r3, [pc, #44]	; (402000 <prvCheckForValidListAndQueue+0x78>)
  401fd4:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401fd6:	4b0b      	ldr	r3, [pc, #44]	; (402004 <prvCheckForValidListAndQueue+0x7c>)
  401fd8:	4798      	blx	r3
  401fda:	bd70      	pop	{r4, r5, r6, pc}
  401fdc:	0040080d 	.word	0x0040080d
  401fe0:	2040c280 	.word	0x2040c280
  401fe4:	2040c254 	.word	0x2040c254
  401fe8:	00400ae1 	.word	0x00400ae1
  401fec:	2040c268 	.word	0x2040c268
  401ff0:	2040c250 	.word	0x2040c250
  401ff4:	2040c284 	.word	0x2040c284
  401ff8:	00400dd5 	.word	0x00400dd5
  401ffc:	00409c10 	.word	0x00409c10
  402000:	004012f1 	.word	0x004012f1
  402004:	00400859 	.word	0x00400859

00402008 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  402008:	b510      	push	{r4, lr}
  40200a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  40200c:	4b0f      	ldr	r3, [pc, #60]	; (40204c <xTimerCreateTimerTask+0x44>)
  40200e:	4798      	blx	r3

	if( xTimerQueue != NULL )
  402010:	4b0f      	ldr	r3, [pc, #60]	; (402050 <xTimerCreateTimerTask+0x48>)
  402012:	681b      	ldr	r3, [r3, #0]
  402014:	b163      	cbz	r3, 402030 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402016:	2304      	movs	r3, #4
  402018:	9300      	str	r3, [sp, #0]
  40201a:	2300      	movs	r3, #0
  40201c:	9301      	str	r3, [sp, #4]
  40201e:	9302      	str	r3, [sp, #8]
  402020:	9303      	str	r3, [sp, #12]
  402022:	480c      	ldr	r0, [pc, #48]	; (402054 <xTimerCreateTimerTask+0x4c>)
  402024:	490c      	ldr	r1, [pc, #48]	; (402058 <xTimerCreateTimerTask+0x50>)
  402026:	f44f 7282 	mov.w	r2, #260	; 0x104
  40202a:	4c0c      	ldr	r4, [pc, #48]	; (40205c <xTimerCreateTimerTask+0x54>)
  40202c:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  40202e:	b950      	cbnz	r0, 402046 <xTimerCreateTimerTask+0x3e>
  402030:	f04f 0380 	mov.w	r3, #128	; 0x80
  402034:	b672      	cpsid	i
  402036:	f383 8811 	msr	BASEPRI, r3
  40203a:	f3bf 8f6f 	isb	sy
  40203e:	f3bf 8f4f 	dsb	sy
  402042:	b662      	cpsie	i
  402044:	e7fe      	b.n	402044 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  402046:	b004      	add	sp, #16
  402048:	bd10      	pop	{r4, pc}
  40204a:	bf00      	nop
  40204c:	00401f89 	.word	0x00401f89
  402050:	2040c280 	.word	0x2040c280
  402054:	00402199 	.word	0x00402199
  402058:	00409c18 	.word	0x00409c18
  40205c:	004013f9 	.word	0x004013f9

00402060 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402060:	b950      	cbnz	r0, 402078 <xTimerGenericCommand+0x18>
  402062:	f04f 0380 	mov.w	r3, #128	; 0x80
  402066:	b672      	cpsid	i
  402068:	f383 8811 	msr	BASEPRI, r3
  40206c:	f3bf 8f6f 	isb	sy
  402070:	f3bf 8f4f 	dsb	sy
  402074:	b662      	cpsie	i
  402076:	e7fe      	b.n	402076 <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402078:	b530      	push	{r4, r5, lr}
  40207a:	b085      	sub	sp, #20
  40207c:	4615      	mov	r5, r2
  40207e:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402080:	4a12      	ldr	r2, [pc, #72]	; (4020cc <xTimerGenericCommand+0x6c>)
  402082:	6810      	ldr	r0, [r2, #0]
  402084:	b1f0      	cbz	r0, 4020c4 <xTimerGenericCommand+0x64>
  402086:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402088:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40208a:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40208c:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40208e:	2905      	cmp	r1, #5
  402090:	dc13      	bgt.n	4020ba <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402092:	4b0f      	ldr	r3, [pc, #60]	; (4020d0 <xTimerGenericCommand+0x70>)
  402094:	4798      	blx	r3
  402096:	2802      	cmp	r0, #2
  402098:	d107      	bne.n	4020aa <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40209a:	4b0c      	ldr	r3, [pc, #48]	; (4020cc <xTimerGenericCommand+0x6c>)
  40209c:	6818      	ldr	r0, [r3, #0]
  40209e:	4669      	mov	r1, sp
  4020a0:	9a08      	ldr	r2, [sp, #32]
  4020a2:	2300      	movs	r3, #0
  4020a4:	4c0b      	ldr	r4, [pc, #44]	; (4020d4 <xTimerGenericCommand+0x74>)
  4020a6:	47a0      	blx	r4
  4020a8:	e00d      	b.n	4020c6 <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4020aa:	4b08      	ldr	r3, [pc, #32]	; (4020cc <xTimerGenericCommand+0x6c>)
  4020ac:	6818      	ldr	r0, [r3, #0]
  4020ae:	4669      	mov	r1, sp
  4020b0:	2200      	movs	r2, #0
  4020b2:	4613      	mov	r3, r2
  4020b4:	4c07      	ldr	r4, [pc, #28]	; (4020d4 <xTimerGenericCommand+0x74>)
  4020b6:	47a0      	blx	r4
  4020b8:	e005      	b.n	4020c6 <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4020ba:	4669      	mov	r1, sp
  4020bc:	2300      	movs	r3, #0
  4020be:	4c06      	ldr	r4, [pc, #24]	; (4020d8 <xTimerGenericCommand+0x78>)
  4020c0:	47a0      	blx	r4
  4020c2:	e000      	b.n	4020c6 <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  4020c4:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  4020c6:	b005      	add	sp, #20
  4020c8:	bd30      	pop	{r4, r5, pc}
  4020ca:	bf00      	nop
  4020cc:	2040c280 	.word	0x2040c280
  4020d0:	00401d99 	.word	0x00401d99
  4020d4:	00400e59 	.word	0x00400e59
  4020d8:	00401035 	.word	0x00401035

004020dc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4020dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020e0:	b082      	sub	sp, #8
  4020e2:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4020e4:	4b25      	ldr	r3, [pc, #148]	; (40217c <prvSampleTimeNow+0xa0>)
  4020e6:	4798      	blx	r3
  4020e8:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4020ea:	4b25      	ldr	r3, [pc, #148]	; (402180 <prvSampleTimeNow+0xa4>)
  4020ec:	681b      	ldr	r3, [r3, #0]
  4020ee:	4298      	cmp	r0, r3
  4020f0:	d23b      	bcs.n	40216a <prvSampleTimeNow+0x8e>
  4020f2:	e02b      	b.n	40214c <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020f4:	68db      	ldr	r3, [r3, #12]
  4020f6:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020fa:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020fc:	f104 0904 	add.w	r9, r4, #4
  402100:	4648      	mov	r0, r9
  402102:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402104:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402106:	4620      	mov	r0, r4
  402108:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40210a:	69e3      	ldr	r3, [r4, #28]
  40210c:	2b01      	cmp	r3, #1
  40210e:	d11f      	bne.n	402150 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402110:	69a3      	ldr	r3, [r4, #24]
  402112:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402114:	4553      	cmp	r3, sl
  402116:	d906      	bls.n	402126 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402118:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40211a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40211c:	6828      	ldr	r0, [r5, #0]
  40211e:	4649      	mov	r1, r9
  402120:	4b18      	ldr	r3, [pc, #96]	; (402184 <prvSampleTimeNow+0xa8>)
  402122:	4798      	blx	r3
  402124:	e014      	b.n	402150 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402126:	2300      	movs	r3, #0
  402128:	9300      	str	r3, [sp, #0]
  40212a:	4620      	mov	r0, r4
  40212c:	4619      	mov	r1, r3
  40212e:	4652      	mov	r2, sl
  402130:	4c15      	ldr	r4, [pc, #84]	; (402188 <prvSampleTimeNow+0xac>)
  402132:	47a0      	blx	r4
				configASSERT( xResult );
  402134:	b960      	cbnz	r0, 402150 <prvSampleTimeNow+0x74>
  402136:	f04f 0380 	mov.w	r3, #128	; 0x80
  40213a:	b672      	cpsid	i
  40213c:	f383 8811 	msr	BASEPRI, r3
  402140:	f3bf 8f6f 	isb	sy
  402144:	f3bf 8f4f 	dsb	sy
  402148:	b662      	cpsie	i
  40214a:	e7fe      	b.n	40214a <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40214c:	4d0f      	ldr	r5, [pc, #60]	; (40218c <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40214e:	4e10      	ldr	r6, [pc, #64]	; (402190 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402150:	682b      	ldr	r3, [r5, #0]
  402152:	681a      	ldr	r2, [r3, #0]
  402154:	2a00      	cmp	r2, #0
  402156:	d1cd      	bne.n	4020f4 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402158:	4a0e      	ldr	r2, [pc, #56]	; (402194 <prvSampleTimeNow+0xb8>)
  40215a:	6810      	ldr	r0, [r2, #0]
  40215c:	490b      	ldr	r1, [pc, #44]	; (40218c <prvSampleTimeNow+0xb0>)
  40215e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402160:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402162:	2301      	movs	r3, #1
  402164:	f8c8 3000 	str.w	r3, [r8]
  402168:	e002      	b.n	402170 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40216a:	2300      	movs	r3, #0
  40216c:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402170:	4b03      	ldr	r3, [pc, #12]	; (402180 <prvSampleTimeNow+0xa4>)
  402172:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402174:	4638      	mov	r0, r7
  402176:	b002      	add	sp, #8
  402178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40217c:	004016c1 	.word	0x004016c1
  402180:	2040c27c 	.word	0x2040c27c
  402184:	00400b19 	.word	0x00400b19
  402188:	00402061 	.word	0x00402061
  40218c:	2040c250 	.word	0x2040c250
  402190:	00400b4d 	.word	0x00400b4d
  402194:	2040c284 	.word	0x2040c284

00402198 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40219c:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40219e:	4c69      	ldr	r4, [pc, #420]	; (402344 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4021a0:	4f69      	ldr	r7, [pc, #420]	; (402348 <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4021a2:	4d6a      	ldr	r5, [pc, #424]	; (40234c <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4021a4:	4b6a      	ldr	r3, [pc, #424]	; (402350 <prvTimerTask+0x1b8>)
  4021a6:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4021a8:	681a      	ldr	r2, [r3, #0]
  4021aa:	2a00      	cmp	r2, #0
  4021ac:	f000 80bf 	beq.w	40232e <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021b0:	68db      	ldr	r3, [r3, #12]
  4021b2:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4021b4:	4b67      	ldr	r3, [pc, #412]	; (402354 <prvTimerTask+0x1bc>)
  4021b6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4021b8:	a804      	add	r0, sp, #16
  4021ba:	4b67      	ldr	r3, [pc, #412]	; (402358 <prvTimerTask+0x1c0>)
  4021bc:	4798      	blx	r3
  4021be:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4021c0:	9b04      	ldr	r3, [sp, #16]
  4021c2:	2b00      	cmp	r3, #0
  4021c4:	d14d      	bne.n	402262 <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4021c6:	42b0      	cmp	r0, r6
  4021c8:	d339      	bcc.n	40223e <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  4021ca:	4b64      	ldr	r3, [pc, #400]	; (40235c <prvTimerTask+0x1c4>)
  4021cc:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021ce:	4b60      	ldr	r3, [pc, #384]	; (402350 <prvTimerTask+0x1b8>)
  4021d0:	681b      	ldr	r3, [r3, #0]
  4021d2:	68db      	ldr	r3, [r3, #12]
  4021d4:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4021d8:	f109 0004 	add.w	r0, r9, #4
  4021dc:	4b60      	ldr	r3, [pc, #384]	; (402360 <prvTimerTask+0x1c8>)
  4021de:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4021e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4021e4:	2b01      	cmp	r3, #1
  4021e6:	d11d      	bne.n	402224 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4021e8:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4021ec:	4648      	mov	r0, r9
  4021ee:	4431      	add	r1, r6
  4021f0:	4642      	mov	r2, r8
  4021f2:	4633      	mov	r3, r6
  4021f4:	f8df c178 	ldr.w	ip, [pc, #376]	; 402370 <prvTimerTask+0x1d8>
  4021f8:	47e0      	blx	ip
  4021fa:	2801      	cmp	r0, #1
  4021fc:	d112      	bne.n	402224 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4021fe:	2300      	movs	r3, #0
  402200:	9300      	str	r3, [sp, #0]
  402202:	4648      	mov	r0, r9
  402204:	4619      	mov	r1, r3
  402206:	4632      	mov	r2, r6
  402208:	4e56      	ldr	r6, [pc, #344]	; (402364 <prvTimerTask+0x1cc>)
  40220a:	47b0      	blx	r6
			configASSERT( xResult );
  40220c:	b950      	cbnz	r0, 402224 <prvTimerTask+0x8c>
  40220e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402212:	b672      	cpsid	i
  402214:	f383 8811 	msr	BASEPRI, r3
  402218:	f3bf 8f6f 	isb	sy
  40221c:	f3bf 8f4f 	dsb	sy
  402220:	b662      	cpsie	i
  402222:	e7fe      	b.n	402222 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402224:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  402228:	4648      	mov	r0, r9
  40222a:	4798      	blx	r3
  40222c:	e077      	b.n	40231e <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40222e:	4b4e      	ldr	r3, [pc, #312]	; (402368 <prvTimerTask+0x1d0>)
  402230:	681b      	ldr	r3, [r3, #0]
  402232:	681a      	ldr	r2, [r3, #0]
  402234:	fab2 f282 	clz	r2, r2
  402238:	0952      	lsrs	r2, r2, #5
  40223a:	2600      	movs	r6, #0
  40223c:	e000      	b.n	402240 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40223e:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402240:	6820      	ldr	r0, [r4, #0]
  402242:	ebc8 0106 	rsb	r1, r8, r6
  402246:	4b49      	ldr	r3, [pc, #292]	; (40236c <prvTimerTask+0x1d4>)
  402248:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40224a:	4b44      	ldr	r3, [pc, #272]	; (40235c <prvTimerTask+0x1c4>)
  40224c:	4798      	blx	r3
  40224e:	2800      	cmp	r0, #0
  402250:	d165      	bne.n	40231e <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402252:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402256:	603b      	str	r3, [r7, #0]
  402258:	f3bf 8f4f 	dsb	sy
  40225c:	f3bf 8f6f 	isb	sy
  402260:	e05d      	b.n	40231e <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  402262:	4b3e      	ldr	r3, [pc, #248]	; (40235c <prvTimerTask+0x1c4>)
  402264:	4798      	blx	r3
  402266:	e05a      	b.n	40231e <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402268:	9b04      	ldr	r3, [sp, #16]
  40226a:	2b00      	cmp	r3, #0
  40226c:	da06      	bge.n	40227c <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40226e:	9806      	ldr	r0, [sp, #24]
  402270:	9907      	ldr	r1, [sp, #28]
  402272:	9b05      	ldr	r3, [sp, #20]
  402274:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402276:	9b04      	ldr	r3, [sp, #16]
  402278:	2b00      	cmp	r3, #0
  40227a:	db50      	blt.n	40231e <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40227c:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40227e:	6973      	ldr	r3, [r6, #20]
  402280:	b113      	cbz	r3, 402288 <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402282:	1d30      	adds	r0, r6, #4
  402284:	4b36      	ldr	r3, [pc, #216]	; (402360 <prvTimerTask+0x1c8>)
  402286:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402288:	a803      	add	r0, sp, #12
  40228a:	4b33      	ldr	r3, [pc, #204]	; (402358 <prvTimerTask+0x1c0>)
  40228c:	4798      	blx	r3
  40228e:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402290:	9a04      	ldr	r2, [sp, #16]
  402292:	2a09      	cmp	r2, #9
  402294:	d843      	bhi.n	40231e <prvTimerTask+0x186>
  402296:	e8df f002 	tbb	[pc, r2]
  40229a:	0505      	.short	0x0505
  40229c:	3f2a4205 	.word	0x3f2a4205
  4022a0:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4022a4:	9b05      	ldr	r3, [sp, #20]
  4022a6:	69b1      	ldr	r1, [r6, #24]
  4022a8:	4630      	mov	r0, r6
  4022aa:	4419      	add	r1, r3
  4022ac:	4672      	mov	r2, lr
  4022ae:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 402370 <prvTimerTask+0x1d8>
  4022b2:	47e0      	blx	ip
  4022b4:	2801      	cmp	r0, #1
  4022b6:	d132      	bne.n	40231e <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4022b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4022ba:	4630      	mov	r0, r6
  4022bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4022be:	69f3      	ldr	r3, [r6, #28]
  4022c0:	2b01      	cmp	r3, #1
  4022c2:	d12c      	bne.n	40231e <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4022c4:	69b2      	ldr	r2, [r6, #24]
  4022c6:	2300      	movs	r3, #0
  4022c8:	9300      	str	r3, [sp, #0]
  4022ca:	4630      	mov	r0, r6
  4022cc:	4619      	mov	r1, r3
  4022ce:	9e05      	ldr	r6, [sp, #20]
  4022d0:	4432      	add	r2, r6
  4022d2:	4e24      	ldr	r6, [pc, #144]	; (402364 <prvTimerTask+0x1cc>)
  4022d4:	47b0      	blx	r6
							configASSERT( xResult );
  4022d6:	bb10      	cbnz	r0, 40231e <prvTimerTask+0x186>
  4022d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022dc:	b672      	cpsid	i
  4022de:	f383 8811 	msr	BASEPRI, r3
  4022e2:	f3bf 8f6f 	isb	sy
  4022e6:	f3bf 8f4f 	dsb	sy
  4022ea:	b662      	cpsie	i
  4022ec:	e7fe      	b.n	4022ec <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4022ee:	9905      	ldr	r1, [sp, #20]
  4022f0:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4022f2:	b951      	cbnz	r1, 40230a <prvTimerTask+0x172>
  4022f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022f8:	b672      	cpsid	i
  4022fa:	f383 8811 	msr	BASEPRI, r3
  4022fe:	f3bf 8f6f 	isb	sy
  402302:	f3bf 8f4f 	dsb	sy
  402306:	b662      	cpsie	i
  402308:	e7fe      	b.n	402308 <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40230a:	4630      	mov	r0, r6
  40230c:	4471      	add	r1, lr
  40230e:	4672      	mov	r2, lr
  402310:	4673      	mov	r3, lr
  402312:	4e17      	ldr	r6, [pc, #92]	; (402370 <prvTimerTask+0x1d8>)
  402314:	47b0      	blx	r6
  402316:	e002      	b.n	40231e <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  402318:	4630      	mov	r0, r6
  40231a:	4b16      	ldr	r3, [pc, #88]	; (402374 <prvTimerTask+0x1dc>)
  40231c:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40231e:	6820      	ldr	r0, [r4, #0]
  402320:	a904      	add	r1, sp, #16
  402322:	2200      	movs	r2, #0
  402324:	4613      	mov	r3, r2
  402326:	47a8      	blx	r5
  402328:	2800      	cmp	r0, #0
  40232a:	d19d      	bne.n	402268 <prvTimerTask+0xd0>
  40232c:	e73a      	b.n	4021a4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  40232e:	4b09      	ldr	r3, [pc, #36]	; (402354 <prvTimerTask+0x1bc>)
  402330:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402332:	a804      	add	r0, sp, #16
  402334:	4b08      	ldr	r3, [pc, #32]	; (402358 <prvTimerTask+0x1c0>)
  402336:	4798      	blx	r3
  402338:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40233a:	9b04      	ldr	r3, [sp, #16]
  40233c:	2b00      	cmp	r3, #0
  40233e:	f43f af76 	beq.w	40222e <prvTimerTask+0x96>
  402342:	e78e      	b.n	402262 <prvTimerTask+0xca>
  402344:	2040c280 	.word	0x2040c280
  402348:	e000ed04 	.word	0xe000ed04
  40234c:	0040112d 	.word	0x0040112d
  402350:	2040c250 	.word	0x2040c250
  402354:	004016b1 	.word	0x004016b1
  402358:	004020dd 	.word	0x004020dd
  40235c:	00401801 	.word	0x00401801
  402360:	00400b4d 	.word	0x00400b4d
  402364:	00402061 	.word	0x00402061
  402368:	2040c284 	.word	0x2040c284
  40236c:	00401325 	.word	0x00401325
  402370:	00401f3d 	.word	0x00401f3d
  402374:	00400ac5 	.word	0x00400ac5

00402378 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402378:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40237a:	4810      	ldr	r0, [pc, #64]	; (4023bc <sysclk_init+0x44>)
  40237c:	4b10      	ldr	r3, [pc, #64]	; (4023c0 <sysclk_init+0x48>)
  40237e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402380:	2000      	movs	r0, #0
  402382:	213e      	movs	r1, #62	; 0x3e
  402384:	4b0f      	ldr	r3, [pc, #60]	; (4023c4 <sysclk_init+0x4c>)
  402386:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402388:	4c0f      	ldr	r4, [pc, #60]	; (4023c8 <sysclk_init+0x50>)
  40238a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40238c:	2800      	cmp	r0, #0
  40238e:	d0fc      	beq.n	40238a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402390:	4b0e      	ldr	r3, [pc, #56]	; (4023cc <sysclk_init+0x54>)
  402392:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402394:	4a0e      	ldr	r2, [pc, #56]	; (4023d0 <sysclk_init+0x58>)
  402396:	4b0f      	ldr	r3, [pc, #60]	; (4023d4 <sysclk_init+0x5c>)
  402398:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40239a:	4c0f      	ldr	r4, [pc, #60]	; (4023d8 <sysclk_init+0x60>)
  40239c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40239e:	2800      	cmp	r0, #0
  4023a0:	d0fc      	beq.n	40239c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4023a2:	2002      	movs	r0, #2
  4023a4:	4b0d      	ldr	r3, [pc, #52]	; (4023dc <sysclk_init+0x64>)
  4023a6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4023a8:	2000      	movs	r0, #0
  4023aa:	4b0d      	ldr	r3, [pc, #52]	; (4023e0 <sysclk_init+0x68>)
  4023ac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4023ae:	4b0d      	ldr	r3, [pc, #52]	; (4023e4 <sysclk_init+0x6c>)
  4023b0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4023b2:	4802      	ldr	r0, [pc, #8]	; (4023bc <sysclk_init+0x44>)
  4023b4:	4b02      	ldr	r3, [pc, #8]	; (4023c0 <sysclk_init+0x48>)
  4023b6:	4798      	blx	r3
  4023b8:	bd10      	pop	{r4, pc}
  4023ba:	bf00      	nop
  4023bc:	11e1a300 	.word	0x11e1a300
  4023c0:	00402ea5 	.word	0x00402ea5
  4023c4:	00402571 	.word	0x00402571
  4023c8:	004025c5 	.word	0x004025c5
  4023cc:	004025d5 	.word	0x004025d5
  4023d0:	20183f01 	.word	0x20183f01
  4023d4:	400e0600 	.word	0x400e0600
  4023d8:	004025e5 	.word	0x004025e5
  4023dc:	004024d1 	.word	0x004024d1
  4023e0:	00402509 	.word	0x00402509
  4023e4:	00402d91 	.word	0x00402d91

004023e8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4023e8:	b10a      	cbz	r2, 4023ee <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4023ea:	6641      	str	r1, [r0, #100]	; 0x64
  4023ec:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4023ee:	6601      	str	r1, [r0, #96]	; 0x60
  4023f0:	4770      	bx	lr
  4023f2:	bf00      	nop

004023f4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4023f4:	6301      	str	r1, [r0, #48]	; 0x30
  4023f6:	4770      	bx	lr

004023f8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4023f8:	6341      	str	r1, [r0, #52]	; 0x34
  4023fa:	4770      	bx	lr

004023fc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4023fc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4023fe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402402:	d02f      	beq.n	402464 <pio_set_peripheral+0x68>
  402404:	d807      	bhi.n	402416 <pio_set_peripheral+0x1a>
  402406:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40240a:	d014      	beq.n	402436 <pio_set_peripheral+0x3a>
  40240c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402410:	d01e      	beq.n	402450 <pio_set_peripheral+0x54>
  402412:	b939      	cbnz	r1, 402424 <pio_set_peripheral+0x28>
  402414:	4770      	bx	lr
  402416:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40241a:	d037      	beq.n	40248c <pio_set_peripheral+0x90>
  40241c:	d804      	bhi.n	402428 <pio_set_peripheral+0x2c>
  40241e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402422:	d029      	beq.n	402478 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402424:	6042      	str	r2, [r0, #4]
  402426:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402428:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40242c:	d02e      	beq.n	40248c <pio_set_peripheral+0x90>
  40242e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402432:	d02b      	beq.n	40248c <pio_set_peripheral+0x90>
  402434:	e7f6      	b.n	402424 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402436:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402438:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40243a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40243c:	43d3      	mvns	r3, r2
  40243e:	4021      	ands	r1, r4
  402440:	4019      	ands	r1, r3
  402442:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402444:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402446:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402448:	4021      	ands	r1, r4
  40244a:	400b      	ands	r3, r1
  40244c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40244e:	e01a      	b.n	402486 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402450:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402452:	4313      	orrs	r3, r2
  402454:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402456:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402458:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40245a:	400b      	ands	r3, r1
  40245c:	ea23 0302 	bic.w	r3, r3, r2
  402460:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402462:	e7df      	b.n	402424 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402464:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402466:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402468:	400b      	ands	r3, r1
  40246a:	ea23 0302 	bic.w	r3, r3, r2
  40246e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402470:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402472:	4313      	orrs	r3, r2
  402474:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402476:	e7d5      	b.n	402424 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402478:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40247a:	4313      	orrs	r3, r2
  40247c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40247e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402480:	4313      	orrs	r3, r2
  402482:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402484:	e7ce      	b.n	402424 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402486:	6042      	str	r2, [r0, #4]
}
  402488:	f85d 4b04 	ldr.w	r4, [sp], #4
  40248c:	4770      	bx	lr
  40248e:	bf00      	nop

00402490 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402490:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402492:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402494:	9c01      	ldr	r4, [sp, #4]
  402496:	b10c      	cbz	r4, 40249c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402498:	6641      	str	r1, [r0, #100]	; 0x64
  40249a:	e000      	b.n	40249e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40249c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40249e:	b10b      	cbz	r3, 4024a4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4024a0:	6501      	str	r1, [r0, #80]	; 0x50
  4024a2:	e000      	b.n	4024a6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4024a4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4024a6:	b10a      	cbz	r2, 4024ac <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4024a8:	6301      	str	r1, [r0, #48]	; 0x30
  4024aa:	e000      	b.n	4024ae <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4024ac:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4024ae:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4024b0:	6001      	str	r1, [r0, #0]
}
  4024b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024b6:	4770      	bx	lr

004024b8 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  4024b8:	b112      	cbz	r2, 4024c0 <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  4024ba:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  4024be:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  4024c0:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  4024c4:	4770      	bx	lr
  4024c6:	bf00      	nop

004024c8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4024c8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4024ca:	4770      	bx	lr

004024cc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4024cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4024ce:	4770      	bx	lr

004024d0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4024d0:	2803      	cmp	r0, #3
  4024d2:	d007      	beq.n	4024e4 <pmc_mck_set_division+0x14>
  4024d4:	2804      	cmp	r0, #4
  4024d6:	d008      	beq.n	4024ea <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4024d8:	2802      	cmp	r0, #2
  4024da:	bf0c      	ite	eq
  4024dc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4024e0:	2100      	movne	r1, #0
  4024e2:	e004      	b.n	4024ee <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4024e4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4024e8:	e001      	b.n	4024ee <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4024ea:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4024ee:	4a05      	ldr	r2, [pc, #20]	; (402504 <pmc_mck_set_division+0x34>)
  4024f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4024f6:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4024f8:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4024fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4024fc:	f013 0f08 	tst.w	r3, #8
  402500:	d0fb      	beq.n	4024fa <pmc_mck_set_division+0x2a>
}
  402502:	4770      	bx	lr
  402504:	400e0600 	.word	0x400e0600

00402508 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402508:	4a18      	ldr	r2, [pc, #96]	; (40256c <pmc_switch_mck_to_pllack+0x64>)
  40250a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402510:	4318      	orrs	r0, r3
  402512:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402514:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402516:	f013 0f08 	tst.w	r3, #8
  40251a:	d003      	beq.n	402524 <pmc_switch_mck_to_pllack+0x1c>
  40251c:	e009      	b.n	402532 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40251e:	3b01      	subs	r3, #1
  402520:	d103      	bne.n	40252a <pmc_switch_mck_to_pllack+0x22>
  402522:	e01e      	b.n	402562 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402524:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402528:	4910      	ldr	r1, [pc, #64]	; (40256c <pmc_switch_mck_to_pllack+0x64>)
  40252a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40252c:	f012 0f08 	tst.w	r2, #8
  402530:	d0f5      	beq.n	40251e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402532:	4a0e      	ldr	r2, [pc, #56]	; (40256c <pmc_switch_mck_to_pllack+0x64>)
  402534:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402536:	f023 0303 	bic.w	r3, r3, #3
  40253a:	f043 0302 	orr.w	r3, r3, #2
  40253e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402540:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402542:	f010 0008 	ands.w	r0, r0, #8
  402546:	d004      	beq.n	402552 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402548:	2000      	movs	r0, #0
  40254a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40254c:	3b01      	subs	r3, #1
  40254e:	d103      	bne.n	402558 <pmc_switch_mck_to_pllack+0x50>
  402550:	e009      	b.n	402566 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402552:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402556:	4905      	ldr	r1, [pc, #20]	; (40256c <pmc_switch_mck_to_pllack+0x64>)
  402558:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40255a:	f012 0f08 	tst.w	r2, #8
  40255e:	d0f5      	beq.n	40254c <pmc_switch_mck_to_pllack+0x44>
  402560:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402562:	2001      	movs	r0, #1
  402564:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402566:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402568:	4770      	bx	lr
  40256a:	bf00      	nop
  40256c:	400e0600 	.word	0x400e0600

00402570 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402570:	b138      	cbz	r0, 402582 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402572:	490e      	ldr	r1, [pc, #56]	; (4025ac <pmc_switch_mainck_to_xtal+0x3c>)
  402574:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402576:	4a0e      	ldr	r2, [pc, #56]	; (4025b0 <pmc_switch_mainck_to_xtal+0x40>)
  402578:	401a      	ands	r2, r3
  40257a:	4b0e      	ldr	r3, [pc, #56]	; (4025b4 <pmc_switch_mainck_to_xtal+0x44>)
  40257c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40257e:	620b      	str	r3, [r1, #32]
  402580:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402582:	480a      	ldr	r0, [pc, #40]	; (4025ac <pmc_switch_mainck_to_xtal+0x3c>)
  402584:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402586:	4a0c      	ldr	r2, [pc, #48]	; (4025b8 <pmc_switch_mainck_to_xtal+0x48>)
  402588:	401a      	ands	r2, r3
  40258a:	4b0c      	ldr	r3, [pc, #48]	; (4025bc <pmc_switch_mainck_to_xtal+0x4c>)
  40258c:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40258e:	0209      	lsls	r1, r1, #8
  402590:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402592:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402594:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402596:	4602      	mov	r2, r0
  402598:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40259a:	f013 0f01 	tst.w	r3, #1
  40259e:	d0fb      	beq.n	402598 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4025a0:	4a02      	ldr	r2, [pc, #8]	; (4025ac <pmc_switch_mainck_to_xtal+0x3c>)
  4025a2:	6a11      	ldr	r1, [r2, #32]
  4025a4:	4b06      	ldr	r3, [pc, #24]	; (4025c0 <pmc_switch_mainck_to_xtal+0x50>)
  4025a6:	430b      	orrs	r3, r1
  4025a8:	6213      	str	r3, [r2, #32]
  4025aa:	4770      	bx	lr
  4025ac:	400e0600 	.word	0x400e0600
  4025b0:	fec8fffc 	.word	0xfec8fffc
  4025b4:	01370002 	.word	0x01370002
  4025b8:	ffc8fffc 	.word	0xffc8fffc
  4025bc:	00370001 	.word	0x00370001
  4025c0:	01370000 	.word	0x01370000

004025c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4025c4:	4b02      	ldr	r3, [pc, #8]	; (4025d0 <pmc_osc_is_ready_mainck+0xc>)
  4025c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4025cc:	4770      	bx	lr
  4025ce:	bf00      	nop
  4025d0:	400e0600 	.word	0x400e0600

004025d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4025d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4025d8:	4b01      	ldr	r3, [pc, #4]	; (4025e0 <pmc_disable_pllack+0xc>)
  4025da:	629a      	str	r2, [r3, #40]	; 0x28
  4025dc:	4770      	bx	lr
  4025de:	bf00      	nop
  4025e0:	400e0600 	.word	0x400e0600

004025e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4025e4:	4b02      	ldr	r3, [pc, #8]	; (4025f0 <pmc_is_locked_pllack+0xc>)
  4025e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4025e8:	f000 0002 	and.w	r0, r0, #2
  4025ec:	4770      	bx	lr
  4025ee:	bf00      	nop
  4025f0:	400e0600 	.word	0x400e0600

004025f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4025f4:	283f      	cmp	r0, #63	; 0x3f
  4025f6:	d81e      	bhi.n	402636 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4025f8:	281f      	cmp	r0, #31
  4025fa:	d80c      	bhi.n	402616 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4025fc:	4b11      	ldr	r3, [pc, #68]	; (402644 <pmc_enable_periph_clk+0x50>)
  4025fe:	699a      	ldr	r2, [r3, #24]
  402600:	2301      	movs	r3, #1
  402602:	4083      	lsls	r3, r0
  402604:	401a      	ands	r2, r3
  402606:	4293      	cmp	r3, r2
  402608:	d017      	beq.n	40263a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40260a:	2301      	movs	r3, #1
  40260c:	4083      	lsls	r3, r0
  40260e:	4a0d      	ldr	r2, [pc, #52]	; (402644 <pmc_enable_periph_clk+0x50>)
  402610:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402612:	2000      	movs	r0, #0
  402614:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402616:	4b0b      	ldr	r3, [pc, #44]	; (402644 <pmc_enable_periph_clk+0x50>)
  402618:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40261c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40261e:	2301      	movs	r3, #1
  402620:	4083      	lsls	r3, r0
  402622:	401a      	ands	r2, r3
  402624:	4293      	cmp	r3, r2
  402626:	d00a      	beq.n	40263e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402628:	2301      	movs	r3, #1
  40262a:	4083      	lsls	r3, r0
  40262c:	4a05      	ldr	r2, [pc, #20]	; (402644 <pmc_enable_periph_clk+0x50>)
  40262e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402632:	2000      	movs	r0, #0
  402634:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402636:	2001      	movs	r0, #1
  402638:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40263a:	2000      	movs	r0, #0
  40263c:	4770      	bx	lr
  40263e:	2000      	movs	r0, #0
}
  402640:	4770      	bx	lr
  402642:	bf00      	nop
  402644:	400e0600 	.word	0x400e0600

00402648 <twihs_enable_master_mode>:
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402648:	2308      	movs	r3, #8
  40264a:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  40264c:	2320      	movs	r3, #32
  40264e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402650:	2304      	movs	r3, #4
  402652:	6003      	str	r3, [r0, #0]
  402654:	4770      	bx	lr
  402656:	bf00      	nop

00402658 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402658:	4b0f      	ldr	r3, [pc, #60]	; (402698 <twihs_set_speed+0x40>)
  40265a:	4299      	cmp	r1, r3
  40265c:	d819      	bhi.n	402692 <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40265e:	0049      	lsls	r1, r1, #1
  402660:	fbb2 f2f1 	udiv	r2, r2, r1
  402664:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402666:	2aff      	cmp	r2, #255	; 0xff
  402668:	d907      	bls.n	40267a <twihs_set_speed+0x22>
  40266a:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  40266c:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  40266e:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402670:	2b06      	cmp	r3, #6
  402672:	d803      	bhi.n	40267c <twihs_set_speed+0x24>
  402674:	2aff      	cmp	r2, #255	; 0xff
  402676:	d8f9      	bhi.n	40266c <twihs_set_speed+0x14>
  402678:	e000      	b.n	40267c <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40267a:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40267c:	0211      	lsls	r1, r2, #8
  40267e:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  402680:	041b      	lsls	r3, r3, #16
  402682:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402686:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402688:	b2d2      	uxtb	r2, r2
  40268a:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  40268c:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  40268e:	2000      	movs	r0, #0
  402690:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402692:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402694:	4770      	bx	lr
  402696:	bf00      	nop
  402698:	00061a80 	.word	0x00061a80

0040269c <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  40269c:	b508      	push	{r3, lr}
  40269e:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  4026a0:	f04f 31ff 	mov.w	r1, #4294967295
  4026a4:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  4026a6:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4026a8:	2180      	movs	r1, #128	; 0x80
  4026aa:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  4026ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4026ae:	2108      	movs	r1, #8
  4026b0:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4026b2:	2120      	movs	r1, #32
  4026b4:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4026b6:	2104      	movs	r1, #4
  4026b8:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4026ba:	6851      	ldr	r1, [r2, #4]
  4026bc:	6812      	ldr	r2, [r2, #0]
  4026be:	4b03      	ldr	r3, [pc, #12]	; (4026cc <twihs_master_init+0x30>)
  4026c0:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  4026c2:	2801      	cmp	r0, #1
  4026c4:	bf14      	ite	ne
  4026c6:	2000      	movne	r0, #0
  4026c8:	2001      	moveq	r0, #1
  4026ca:	bd08      	pop	{r3, pc}
  4026cc:	00402659 	.word	0x00402659

004026d0 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  4026d0:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  4026d2:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4026d4:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  4026d6:	2a00      	cmp	r2, #0
  4026d8:	d047      	beq.n	40276a <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  4026da:	2600      	movs	r6, #0
  4026dc:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4026de:	684b      	ldr	r3, [r1, #4]
  4026e0:	021b      	lsls	r3, r3, #8
  4026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4026e6:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4026ea:	7c0b      	ldrb	r3, [r1, #16]
  4026ec:	041b      	lsls	r3, r3, #16
  4026ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4026f2:	432b      	orrs	r3, r5
  4026f4:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  4026f6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4026f8:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4026fa:	b15d      	cbz	r5, 402714 <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  4026fc:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4026fe:	2d01      	cmp	r5, #1
  402700:	dd02      	ble.n	402708 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  402702:	784e      	ldrb	r6, [r1, #1]
  402704:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402708:	2d02      	cmp	r5, #2
  40270a:	dd04      	ble.n	402716 <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  40270c:	7889      	ldrb	r1, [r1, #2]
  40270e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402712:	e000      	b.n	402716 <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402714:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402716:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402718:	2301      	movs	r3, #1
  40271a:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  40271c:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402720:	2702      	movs	r7, #2
  402722:	e014      	b.n	40274e <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402724:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402726:	f413 7f80 	tst.w	r3, #256	; 0x100
  40272a:	d120      	bne.n	40276e <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  40272c:	3901      	subs	r1, #1
  40272e:	d020      	beq.n	402772 <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  402730:	2a01      	cmp	r2, #1
  402732:	d104      	bne.n	40273e <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402734:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  402736:	f013 0f02 	tst.w	r3, #2
  40273a:	d0f3      	beq.n	402724 <twihs_master_read+0x54>
  40273c:	e01d      	b.n	40277a <twihs_master_read+0xaa>
  40273e:	f013 0f02 	tst.w	r3, #2
  402742:	d00a      	beq.n	40275a <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402744:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402746:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  40274a:	3a01      	subs	r2, #1
  40274c:	d007      	beq.n	40275e <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  40274e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402750:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  402754:	d10f      	bne.n	402776 <twihs_master_read+0xa6>
  402756:	4631      	mov	r1, r6
  402758:	e7ea      	b.n	402730 <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  40275a:	2a00      	cmp	r2, #0
  40275c:	d1e2      	bne.n	402724 <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40275e:	6a03      	ldr	r3, [r0, #32]
  402760:	f013 0f01 	tst.w	r3, #1
  402764:	d0fb      	beq.n	40275e <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  402766:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  402768:	e00a      	b.n	402780 <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  40276a:	2501      	movs	r5, #1
  40276c:	e008      	b.n	402780 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  40276e:	2505      	movs	r5, #5
  402770:	e006      	b.n	402780 <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  402772:	2509      	movs	r5, #9
  402774:	e004      	b.n	402780 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402776:	2505      	movs	r5, #5
  402778:	e002      	b.n	402780 <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  40277a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40277c:	7023      	strb	r3, [r4, #0]
  40277e:	e7ee      	b.n	40275e <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  402780:	4628      	mov	r0, r5
  402782:	bcf0      	pop	{r4, r5, r6, r7}
  402784:	4770      	bx	lr
  402786:	bf00      	nop

00402788 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402788:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
  40278a:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  40278c:	6888      	ldr	r0, [r1, #8]

	/* Check argument */
	if (cnt == 0) {
  40278e:	2a00      	cmp	r2, #0
  402790:	d040      	beq.n	402814 <twihs_master_write+0x8c>
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402792:	b470      	push	{r4, r5, r6}
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402794:	2600      	movs	r6, #0
  402796:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402798:	7c0c      	ldrb	r4, [r1, #16]
  40279a:	0424      	lsls	r4, r4, #16
  40279c:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4027a0:	684c      	ldr	r4, [r1, #4]
  4027a2:	0224      	lsls	r4, r4, #8
  4027a4:	f404 7440 	and.w	r4, r4, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4027a8:	432c      	orrs	r4, r5
  4027aa:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  4027ac:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4027ae:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4027b0:	b15d      	cbz	r5, 4027ca <twihs_master_write+0x42>
		return 0;

	val = addr[0];
  4027b2:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  4027b4:	2d01      	cmp	r5, #1
  4027b6:	dd02      	ble.n	4027be <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  4027b8:	784e      	ldrb	r6, [r1, #1]
  4027ba:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  4027be:	2d02      	cmp	r5, #2
  4027c0:	dd04      	ble.n	4027cc <twihs_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  4027c2:	7889      	ldrb	r1, [r1, #2]
  4027c4:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  4027c8:	e000      	b.n	4027cc <twihs_master_write+0x44>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4027ca:	2400      	movs	r4, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4027cc:	60dc      	str	r4, [r3, #12]
  4027ce:	e00b      	b.n	4027e8 <twihs_master_write+0x60>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  4027d0:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4027d2:	f411 7f80 	tst.w	r1, #256	; 0x100
  4027d6:	d11f      	bne.n	402818 <twihs_master_write+0x90>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  4027d8:	f011 0f04 	tst.w	r1, #4
  4027dc:	d0f8      	beq.n	4027d0 <twihs_master_write+0x48>
			continue;
		}
		p_twihs->TWIHS_THR = *buffer++;
  4027de:	f810 1b01 	ldrb.w	r1, [r0], #1
  4027e2:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4027e4:	3a01      	subs	r2, #1
  4027e6:	d007      	beq.n	4027f8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4027e8:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4027ea:	f411 7f80 	tst.w	r1, #256	; 0x100
  4027ee:	d115      	bne.n	40281c <twihs_master_write+0x94>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  4027f0:	f011 0f04 	tst.w	r1, #4
  4027f4:	d0ec      	beq.n	4027d0 <twihs_master_write+0x48>
  4027f6:	e7f2      	b.n	4027de <twihs_master_write+0x56>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  4027f8:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  4027fa:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  4027fe:	d10f      	bne.n	402820 <twihs_master_write+0x98>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402800:	f012 0f04 	tst.w	r2, #4
  402804:	d0f8      	beq.n	4027f8 <twihs_master_write+0x70>
			break;
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402806:	2202      	movs	r2, #2
  402808:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40280a:	6a1a      	ldr	r2, [r3, #32]
  40280c:	f012 0f01 	tst.w	r2, #1
  402810:	d0fb      	beq.n	40280a <twihs_master_write+0x82>
  402812:	e006      	b.n	402822 <twihs_master_write+0x9a>
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402814:	2001      	movs	r0, #1

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  402816:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402818:	2005      	movs	r0, #5
  40281a:	e002      	b.n	402822 <twihs_master_write+0x9a>
  40281c:	2005      	movs	r0, #5
  40281e:	e000      	b.n	402822 <twihs_master_write+0x9a>
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402820:	2005      	movs	r0, #5

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  402822:	bc70      	pop	{r4, r5, r6}
  402824:	4770      	bx	lr
  402826:	bf00      	nop

00402828 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402828:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40282a:	23ac      	movs	r3, #172	; 0xac
  40282c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40282e:	680b      	ldr	r3, [r1, #0]
  402830:	684a      	ldr	r2, [r1, #4]
  402832:	fbb3 f3f2 	udiv	r3, r3, r2
  402836:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402838:	1e5c      	subs	r4, r3, #1
  40283a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40283e:	4294      	cmp	r4, r2
  402840:	d806      	bhi.n	402850 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402842:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402844:	688b      	ldr	r3, [r1, #8]
  402846:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402848:	2350      	movs	r3, #80	; 0x50
  40284a:	6003      	str	r3, [r0, #0]

	return 0;
  40284c:	2000      	movs	r0, #0
  40284e:	e000      	b.n	402852 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402850:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402852:	f85d 4b04 	ldr.w	r4, [sp], #4
  402856:	4770      	bx	lr

00402858 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402858:	2340      	movs	r3, #64	; 0x40
  40285a:	6003      	str	r3, [r0, #0]
  40285c:	4770      	bx	lr
  40285e:	bf00      	nop

00402860 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402860:	2310      	movs	r3, #16
  402862:	6003      	str	r3, [r0, #0]
  402864:	4770      	bx	lr
  402866:	bf00      	nop

00402868 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402868:	2350      	movs	r3, #80	; 0x50
  40286a:	6003      	str	r3, [r0, #0]
  40286c:	4770      	bx	lr
  40286e:	bf00      	nop

00402870 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402870:	6940      	ldr	r0, [r0, #20]
}
  402872:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402876:	4770      	bx	lr

00402878 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402878:	6201      	str	r1, [r0, #32]
  40287a:	4770      	bx	lr

0040287c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40287c:	6943      	ldr	r3, [r0, #20]
  40287e:	f013 0f02 	tst.w	r3, #2
  402882:	d002      	beq.n	40288a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402884:	61c1      	str	r1, [r0, #28]
	return 0;
  402886:	2000      	movs	r0, #0
  402888:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40288a:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40288c:	4770      	bx	lr
  40288e:	bf00      	nop

00402890 <board_init>:
#define USART_SERIAL_STOP_BIT        US_MR_NBSTOP_1_BIT



void board_init(void)
{
  402890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402894:	b097      	sub	sp, #92	; 0x5c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402896:	48ad      	ldr	r0, [pc, #692]	; (402b4c <board_init+0x2bc>)
  402898:	2100      	movs	r1, #0
  40289a:	4bad      	ldr	r3, [pc, #692]	; (402b50 <board_init+0x2c0>)
  40289c:	4798      	blx	r3
	sysclk_init();
  40289e:	4bad      	ldr	r3, [pc, #692]	; (402b54 <board_init+0x2c4>)
  4028a0:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  4028a2:	f8df 8330 	ldr.w	r8, [pc, #816]	; 402bd4 <board_init+0x344>
  4028a6:	ad13      	add	r5, sp, #76	; 0x4c
  4028a8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
  4028ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4028b0:	202e      	movs	r0, #46	; 0x2e
  4028b2:	4fa9      	ldr	r7, [pc, #676]	; (402b58 <board_init+0x2c8>)
  4028b4:	47b8      	blx	r7
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  4028b6:	202e      	movs	r0, #46	; 0x2e
  4028b8:	47b8      	blx	r7
	uart_init(USART_SERIAL, &usart_console_settings);
  4028ba:	4ca8      	ldr	r4, [pc, #672]	; (402b5c <board_init+0x2cc>)
  4028bc:	4620      	mov	r0, r4
  4028be:	4629      	mov	r1, r5
  4028c0:	4ba7      	ldr	r3, [pc, #668]	; (402b60 <board_init+0x2d0>)
  4028c2:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  4028c4:	4620      	mov	r0, r4
  4028c6:	4ba7      	ldr	r3, [pc, #668]	; (402b64 <board_init+0x2d4>)
  4028c8:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  4028ca:	4620      	mov	r0, r4
  4028cc:	4ba6      	ldr	r3, [pc, #664]	; (402b68 <board_init+0x2d8>)
  4028ce:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  4028d0:	4620      	mov	r0, r4
  4028d2:	4ba6      	ldr	r3, [pc, #664]	; (402b6c <board_init+0x2dc>)
  4028d4:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(1000/GLOBAL_SLOWDOWN));
  4028d6:	4620      	mov	r0, r4
  4028d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4028dc:	4ba4      	ldr	r3, [pc, #656]	; (402b70 <board_init+0x2e0>)
  4028de:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  4028e0:	2010      	movs	r0, #16
  4028e2:	47b8      	blx	r7
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  4028e4:	48a3      	ldr	r0, [pc, #652]	; (402b74 <board_init+0x2e4>)
  4028e6:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4028ea:	4aa3      	ldr	r2, [pc, #652]	; (402b78 <board_init+0x2e8>)
  4028ec:	4ea3      	ldr	r6, [pc, #652]	; (402b7c <board_init+0x2ec>)
  4028ee:	47b0      	blx	r6
	//Test UART
	sendDebugString("UART CONSOLE STARTED ON UART4\n\n");
  4028f0:	48a3      	ldr	r0, [pc, #652]	; (402b80 <board_init+0x2f0>)
  4028f2:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 402bd8 <board_init+0x348>
  4028f6:	47d0      	blx	sl
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  4028f8:	48a2      	ldr	r0, [pc, #648]	; (402b84 <board_init+0x2f4>)
  4028fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402902:	47b0      	blx	r6
	
		pmc_enable_periph_clk(ID_PIOA);
  402904:	200a      	movs	r0, #10
  402906:	47b8      	blx	r7
		pmc_enable_periph_clk(ID_PIOB);
  402908:	200b      	movs	r0, #11
  40290a:	47b8      	blx	r7
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  40290c:	2400      	movs	r4, #0
  40290e:	9400      	str	r4, [sp, #0]
  402910:	489d      	ldr	r0, [pc, #628]	; (402b88 <board_init+0x2f8>)
  402912:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402916:	4622      	mov	r2, r4
  402918:	4623      	mov	r3, r4
  40291a:	4d9c      	ldr	r5, [pc, #624]	; (402b8c <board_init+0x2fc>)
  40291c:	47a8      	blx	r5
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  40291e:	9400      	str	r4, [sp, #0]
  402920:	4899      	ldr	r0, [pc, #612]	; (402b88 <board_init+0x2f8>)
  402922:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402926:	4622      	mov	r2, r4
  402928:	4623      	mov	r3, r4
  40292a:	47a8      	blx	r5
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  40292c:	9400      	str	r4, [sp, #0]
  40292e:	4896      	ldr	r0, [pc, #600]	; (402b88 <board_init+0x2f8>)
  402930:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402934:	4622      	mov	r2, r4
  402936:	4623      	mov	r3, r4
  402938:	47a8      	blx	r5
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  40293a:	9400      	str	r4, [sp, #0]
  40293c:	4892      	ldr	r0, [pc, #584]	; (402b88 <board_init+0x2f8>)
  40293e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402942:	4622      	mov	r2, r4
  402944:	4623      	mov	r3, r4
  402946:	47a8      	blx	r5
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402948:	9400      	str	r4, [sp, #0]
  40294a:	488e      	ldr	r0, [pc, #568]	; (402b84 <board_init+0x2f4>)
  40294c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402950:	4622      	mov	r2, r4
  402952:	4623      	mov	r3, r4
  402954:	47a8      	blx	r5
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402956:	9400      	str	r4, [sp, #0]
  402958:	488b      	ldr	r0, [pc, #556]	; (402b88 <board_init+0x2f8>)
  40295a:	2104      	movs	r1, #4
  40295c:	4622      	mov	r2, r4
  40295e:	4623      	mov	r3, r4
  402960:	47a8      	blx	r5
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402962:	9400      	str	r4, [sp, #0]
  402964:	4888      	ldr	r0, [pc, #544]	; (402b88 <board_init+0x2f8>)
  402966:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40296a:	4622      	mov	r2, r4
  40296c:	4623      	mov	r3, r4
  40296e:	47a8      	blx	r5
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402970:	9400      	str	r4, [sp, #0]
  402972:	4885      	ldr	r0, [pc, #532]	; (402b88 <board_init+0x2f8>)
  402974:	2140      	movs	r1, #64	; 0x40
  402976:	4622      	mov	r2, r4
  402978:	4623      	mov	r3, r4
  40297a:	47a8      	blx	r5
		
		sendDebugString("LED INIT COMPLETE\n");
  40297c:	4884      	ldr	r0, [pc, #528]	; (402b90 <board_init+0x300>)
  40297e:	47d0      	blx	sl
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		
		wdt_disable(WDT);
  402980:	4884      	ldr	r0, [pc, #528]	; (402b94 <board_init+0x304>)
  402982:	4b85      	ldr	r3, [pc, #532]	; (402b98 <board_init+0x308>)
  402984:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		cpu_irq_enable();
  402986:	f04f 0b01 	mov.w	fp, #1
  40298a:	4b84      	ldr	r3, [pc, #528]	; (402b9c <board_init+0x30c>)
  40298c:	f883 b000 	strb.w	fp, [r3]
  402990:	f3bf 8f5f 	dmb	sy
  402994:	b662      	cpsie	i
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("BEGINING SDRAM INIT\n");
  402996:	4882      	ldr	r0, [pc, #520]	; (402ba0 <board_init+0x310>)
  402998:	47d0      	blx	sl
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  40299a:	f108 080c 	add.w	r8, r8, #12
  40299e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
  4029a2:	ab10      	add	r3, sp, #64	; 0x40
  4029a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(9)		|
			SDRAMC_CR_TXSR(10)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  4029a8:	203e      	movs	r0, #62	; 0x3e
  4029aa:	47b8      	blx	r7
	
	pmc_enable_periph_clk(ID_PIOC);
  4029ac:	200c      	movs	r0, #12
  4029ae:	47b8      	blx	r7
	pmc_enable_periph_clk(ID_PIOD);
  4029b0:	2010      	movs	r0, #16
  4029b2:	47b8      	blx	r7
	pmc_enable_periph_clk(ID_PIOE);
  4029b4:	2011      	movs	r0, #17
  4029b6:	47b8      	blx	r7
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  4029b8:	f8df 8220 	ldr.w	r8, [pc, #544]	; 402bdc <board_init+0x34c>
  4029bc:	4879      	ldr	r0, [pc, #484]	; (402ba4 <board_init+0x314>)
  4029be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4029c2:	4642      	mov	r2, r8
  4029c4:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  4029c6:	4877      	ldr	r0, [pc, #476]	; (402ba4 <board_init+0x314>)
  4029c8:	4641      	mov	r1, r8
  4029ca:	465a      	mov	r2, fp
  4029cc:	f8df 9210 	ldr.w	r9, [pc, #528]	; 402be0 <board_init+0x350>
  4029d0:	47c8      	blx	r9
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  4029d2:	4874      	ldr	r0, [pc, #464]	; (402ba4 <board_init+0x314>)
  4029d4:	4974      	ldr	r1, [pc, #464]	; (402ba8 <board_init+0x318>)
  4029d6:	4622      	mov	r2, r4
  4029d8:	f8df 8208 	ldr.w	r8, [pc, #520]	; 402be4 <board_init+0x354>
  4029dc:	47c0      	blx	r8
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  4029de:	486a      	ldr	r0, [pc, #424]	; (402b88 <board_init+0x2f8>)
  4029e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4029e4:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4029e8:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  4029ea:	4867      	ldr	r0, [pc, #412]	; (402b88 <board_init+0x2f8>)
  4029ec:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  4029f0:	4622      	mov	r2, r4
  4029f2:	47c8      	blx	r9
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  4029f4:	4864      	ldr	r0, [pc, #400]	; (402b88 <board_init+0x2f8>)
  4029f6:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  4029fa:	465a      	mov	r2, fp
  4029fc:	47c0      	blx	r8
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  4029fe:	4862      	ldr	r0, [pc, #392]	; (402b88 <board_init+0x2f8>)
  402a00:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402a04:	4a69      	ldr	r2, [pc, #420]	; (402bac <board_init+0x31c>)
  402a06:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402a08:	485f      	ldr	r0, [pc, #380]	; (402b88 <board_init+0x2f8>)
  402a0a:	4968      	ldr	r1, [pc, #416]	; (402bac <board_init+0x31c>)
  402a0c:	465a      	mov	r2, fp
  402a0e:	47c8      	blx	r9
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402a10:	485d      	ldr	r0, [pc, #372]	; (402b88 <board_init+0x2f8>)
  402a12:	4966      	ldr	r1, [pc, #408]	; (402bac <board_init+0x31c>)
  402a14:	4622      	mov	r2, r4
  402a16:	47c0      	blx	r8
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402a18:	4856      	ldr	r0, [pc, #344]	; (402b74 <board_init+0x2e4>)
  402a1a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402a1e:	4a64      	ldr	r2, [pc, #400]	; (402bb0 <board_init+0x320>)
  402a20:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402a22:	4854      	ldr	r0, [pc, #336]	; (402b74 <board_init+0x2e4>)
  402a24:	4962      	ldr	r1, [pc, #392]	; (402bb0 <board_init+0x320>)
  402a26:	465a      	mov	r2, fp
  402a28:	47c8      	blx	r9
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402a2a:	4852      	ldr	r0, [pc, #328]	; (402b74 <board_init+0x2e4>)
  402a2c:	4960      	ldr	r1, [pc, #384]	; (402bb0 <board_init+0x320>)
  402a2e:	4622      	mov	r2, r4
  402a30:	47c0      	blx	r8
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402a32:	4860      	ldr	r0, [pc, #384]	; (402bb4 <board_init+0x324>)
  402a34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a38:	223f      	movs	r2, #63	; 0x3f
  402a3a:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402a3c:	485d      	ldr	r0, [pc, #372]	; (402bb4 <board_init+0x324>)
  402a3e:	213f      	movs	r1, #63	; 0x3f
  402a40:	465a      	mov	r2, fp
  402a42:	47c8      	blx	r9
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402a44:	485b      	ldr	r0, [pc, #364]	; (402bb4 <board_init+0x324>)
  402a46:	213f      	movs	r1, #63	; 0x3f
  402a48:	4622      	mov	r2, r4
  402a4a:	47c0      	blx	r8
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402a4c:	4a5a      	ldr	r2, [pc, #360]	; (402bb8 <board_init+0x328>)
  402a4e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402a52:	f043 0310 	orr.w	r3, r3, #16
  402a56:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402a5a:	4852      	ldr	r0, [pc, #328]	; (402ba4 <board_init+0x314>)
  402a5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402a64:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402a66:	f8df b180 	ldr.w	fp, [pc, #384]	; 402be8 <board_init+0x358>
  402a6a:	a810      	add	r0, sp, #64	; 0x40
  402a6c:	4659      	mov	r1, fp
  402a6e:	4b53      	ldr	r3, [pc, #332]	; (402bbc <board_init+0x32c>)
  402a70:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402a72:	4853      	ldr	r0, [pc, #332]	; (402bc0 <board_init+0x330>)
  402a74:	47d0      	blx	sl
	/* ######################################
	   ######################################
			  Setup SERVO DRIVERS/i2c
	   ######################################
	   ###################################### */
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402a76:	9400      	str	r4, [sp, #0]
  402a78:	483e      	ldr	r0, [pc, #248]	; (402b74 <board_init+0x2e4>)
  402a7a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402a7e:	4622      	mov	r2, r4
  402a80:	4623      	mov	r3, r4
  402a82:	47a8      	blx	r5
	pio_set(PIOD,PIO_PD26);
  402a84:	483b      	ldr	r0, [pc, #236]	; (402b74 <board_init+0x2e4>)
  402a86:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402a8a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 402bec <board_init+0x35c>
  402a8e:	47c8      	blx	r9

	
	//setup I2C
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402a90:	9400      	str	r4, [sp, #0]
  402a92:	483d      	ldr	r0, [pc, #244]	; (402b88 <board_init+0x2f8>)
  402a94:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402a98:	4622      	mov	r2, r4
  402a9a:	4623      	mov	r3, r4
  402a9c:	47a8      	blx	r5
	pio_clear(PIOA,PIO_PA26);
  402a9e:	483a      	ldr	r0, [pc, #232]	; (402b88 <board_init+0x2f8>)
  402aa0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402aa4:	4b47      	ldr	r3, [pc, #284]	; (402bc4 <board_init+0x334>)
  402aa6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TWIHS0);
  402aa8:	2013      	movs	r0, #19
  402aaa:	47b8      	blx	r7
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402aac:	4836      	ldr	r0, [pc, #216]	; (402b88 <board_init+0x2f8>)
  402aae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ab2:	2218      	movs	r2, #24
  402ab4:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402ab6:	9400      	str	r4, [sp, #0]
  402ab8:	482e      	ldr	r0, [pc, #184]	; (402b74 <board_init+0x2e4>)
  402aba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402abe:	4622      	mov	r2, r4
  402ac0:	4623      	mov	r3, r4
  402ac2:	47a8      	blx	r5
	pio_set(PIOD,PIO_PD26);
  402ac4:	482b      	ldr	r0, [pc, #172]	; (402b74 <board_init+0x2e4>)
  402ac6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402aca:	47c8      	blx	r9
	
	twihs_enable_master_mode(TWIHS0);
  402acc:	f8df a120 	ldr.w	sl, [pc, #288]	; 402bf0 <board_init+0x360>
  402ad0:	4650      	mov	r0, sl
  402ad2:	4b3d      	ldr	r3, [pc, #244]	; (402bc8 <board_init+0x338>)
  402ad4:	4798      	blx	r3
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402ad6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	twihs_opts.speed = 10000;
  402ada:	f242 7310 	movw	r3, #10000	; 0x2710
  402ade:	930e      	str	r3, [sp, #56]	; 0x38
	twihs_master_init(TWIHS0,&twihs_opts);
  402ae0:	4650      	mov	r0, sl
  402ae2:	a90d      	add	r1, sp, #52	; 0x34
  402ae4:	4b39      	ldr	r3, [pc, #228]	; (402bcc <board_init+0x33c>)
  402ae6:	4798      	blx	r3
	
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  402ae8:	2040      	movs	r0, #64	; 0x40
  402aea:	f8df a108 	ldr.w	sl, [pc, #264]	; 402bf4 <board_init+0x364>
  402aee:	47d0      	blx	sl
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  402af0:	2041      	movs	r0, #65	; 0x41
  402af2:	47d0      	blx	sl
	   ######################################
	   ###################################### */
	
	//pio_set(PIOD,PIO_PD10);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  402af4:	f8df a100 	ldr.w	sl, [pc, #256]	; 402bf8 <board_init+0x368>
  402af8:	481e      	ldr	r0, [pc, #120]	; (402b74 <board_init+0x2e4>)
  402afa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402afe:	4652      	mov	r2, sl
  402b00:	47b0      	blx	r6
	1<<12	|
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	pio_pull_up(PIOD,
  402b02:	481c      	ldr	r0, [pc, #112]	; (402b74 <board_init+0x2e4>)
  402b04:	4651      	mov	r1, sl
  402b06:	4622      	mov	r2, r4
  402b08:	47c0      	blx	r8
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  402b0a:	481e      	ldr	r0, [pc, #120]	; (402b84 <board_init+0x2f4>)
  402b0c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402b10:	2208      	movs	r2, #8
  402b12:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  402b14:	481b      	ldr	r0, [pc, #108]	; (402b84 <board_init+0x2f4>)
  402b16:	2108      	movs	r1, #8
  402b18:	4622      	mov	r2, r4
  402b1a:	47c0      	blx	r8
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  402b1c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 402bfc <board_init+0x36c>
  402b20:	4819      	ldr	r0, [pc, #100]	; (402b88 <board_init+0x2f8>)
  402b22:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402b26:	4652      	mov	r2, sl
  402b28:	47b0      	blx	r6
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	);
	
	pio_pull_up(PIOA,
  402b2a:	4817      	ldr	r0, [pc, #92]	; (402b88 <board_init+0x2f8>)
  402b2c:	4651      	mov	r1, sl
  402b2e:	4622      	mov	r2, r4
  402b30:	47c0      	blx	r8
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pmc_enable_periph_clk(ID_ISI);
  402b32:	203b      	movs	r0, #59	; 0x3b
  402b34:	47b8      	blx	r7
	
	//set camera to 640x480
	SetupCameraRAW();
  402b36:	4b26      	ldr	r3, [pc, #152]	; (402bd0 <board_init+0x340>)
  402b38:	4798      	blx	r3
	
	
	
	
	
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  402b3a:	9400      	str	r4, [sp, #0]
  402b3c:	480d      	ldr	r0, [pc, #52]	; (402b74 <board_init+0x2e4>)
  402b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402b42:	4622      	mov	r2, r4
  402b44:	4623      	mov	r3, r4
  402b46:	47a8      	blx	r5
  402b48:	e05a      	b.n	402c00 <board_init+0x370>
  402b4a:	bf00      	nop
  402b4c:	400e1810 	.word	0x400e1810
  402b50:	00400721 	.word	0x00400721
  402b54:	00402379 	.word	0x00402379
  402b58:	004025f5 	.word	0x004025f5
  402b5c:	400e1e00 	.word	0x400e1e00
  402b60:	00402829 	.word	0x00402829
  402b64:	00402869 	.word	0x00402869
  402b68:	00402859 	.word	0x00402859
  402b6c:	00402861 	.word	0x00402861
  402b70:	00402879 	.word	0x00402879
  402b74:	400e1400 	.word	0x400e1400
  402b78:	00040008 	.word	0x00040008
  402b7c:	004023fd 	.word	0x004023fd
  402b80:	00409c38 	.word	0x00409c38
  402b84:	400e1000 	.word	0x400e1000
  402b88:	400e0e00 	.word	0x400e0e00
  402b8c:	00402491 	.word	0x00402491
  402b90:	00409c58 	.word	0x00409c58
  402b94:	400e1850 	.word	0x400e1850
  402b98:	0040074d 	.word	0x0040074d
  402b9c:	20400010 	.word	0x20400010
  402ba0:	00409c6c 	.word	0x00409c6c
  402ba4:	400e1200 	.word	0x400e1200
  402ba8:	fffc80ff 	.word	0xfffc80ff
  402bac:	001c0001 	.word	0x001c0001
  402bb0:	2083e000 	.word	0x2083e000
  402bb4:	400e1600 	.word	0x400e1600
  402bb8:	40088000 	.word	0x40088000
  402bbc:	004005e5 	.word	0x004005e5
  402bc0:	00409c84 	.word	0x00409c84
  402bc4:	004023f9 	.word	0x004023f9
  402bc8:	00402649 	.word	0x00402649
  402bcc:	0040269d 	.word	0x0040269d
  402bd0:	004030f9 	.word	0x004030f9
  402bd4:	00409c20 	.word	0x00409c20
  402bd8:	0040019d 	.word	0x0040019d
  402bdc:	fffc00ff 	.word	0xfffc00ff
  402be0:	004024b9 	.word	0x004024b9
  402be4:	004023e9 	.word	0x004023e9
  402be8:	11e1a300 	.word	0x11e1a300
  402bec:	004023f5 	.word	0x004023f5
  402bf0:	40018000 	.word	0x40018000
  402bf4:	00403021 	.word	0x00403021
  402bf8:	1b601800 	.word	0x1b601800
  402bfc:	09000220 	.word	0x09000220
	pio_set(PIOD,PIO_PD10);
  402c00:	4831      	ldr	r0, [pc, #196]	; (402cc8 <board_init+0x438>)
  402c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402c06:	47c8      	blx	r9
  402c08:	4b30      	ldr	r3, [pc, #192]	; (402ccc <board_init+0x43c>)
	for(int i =0;i<10000000;i++);
  402c0a:	3b01      	subs	r3, #1
  402c0c:	d1fd      	bne.n	402c0a <board_init+0x37a>
	   ######################################
	   ###################################### */
	
	
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  402c0e:	2300      	movs	r3, #0
  402c10:	f88d 300c 	strb.w	r3, [sp, #12]
	    qspiConf.loopback_en = 0;
  402c14:	f88d 300d 	strb.w	r3, [sp, #13]
	    qspiConf.wait_data_for_transfer = 0;
  402c18:	f88d 300e 	strb.w	r3, [sp, #14]
	    qspiConf.csmode = 0;
  402c1c:	f88d 300f 	strb.w	r3, [sp, #15]
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  402c20:	9304      	str	r3, [sp, #16]
	    qspiConf.baudrate = 1000000;
  402c22:	4a2b      	ldr	r2, [pc, #172]	; (402cd0 <board_init+0x440>)
  402c24:	9209      	str	r2, [sp, #36]	; 0x24
		qspiConf.min_delay_qcs = 1;
  402c26:	2401      	movs	r4, #1
  402c28:	9405      	str	r4, [sp, #20]
		qspiConf.delay_between_ct = 1;
  402c2a:	9406      	str	r4, [sp, #24]
		qspiConf.clock_polarity = 0;
  402c2c:	9307      	str	r3, [sp, #28]
		qspiConf.clock_phase = 0;
  402c2e:	9308      	str	r3, [sp, #32]
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402c30:	4e28      	ldr	r6, [pc, #160]	; (402cd4 <board_init+0x444>)
  402c32:	4630      	mov	r0, r6
  402c34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c38:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  402c3c:	4d26      	ldr	r5, [pc, #152]	; (402cd8 <board_init+0x448>)
  402c3e:	47a8      	blx	r5
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  402c40:	4630      	mov	r0, r6
  402c42:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  402c46:	4622      	mov	r2, r4
  402c48:	4b24      	ldr	r3, [pc, #144]	; (402cdc <board_init+0x44c>)
  402c4a:	4798      	blx	r3
		1<<13	|
		1<<14	|
		1<<11,1);
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  402c4c:	481e      	ldr	r0, [pc, #120]	; (402cc8 <board_init+0x438>)
  402c4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402c56:	47a8      	blx	r5
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  402c58:	202b      	movs	r0, #43	; 0x2b
  402c5a:	4b21      	ldr	r3, [pc, #132]	; (402ce0 <board_init+0x450>)
  402c5c:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  402c5e:	2202      	movs	r2, #2
  402c60:	4b20      	ldr	r3, [pc, #128]	; (402ce4 <board_init+0x454>)
  402c62:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  402c64:	461a      	mov	r2, r3
  402c66:	6913      	ldr	r3, [r2, #16]
  402c68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c6c:	d1fb      	bne.n	402c66 <board_init+0x3d6>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  402c6e:	4c1d      	ldr	r4, [pc, #116]	; (402ce4 <board_init+0x454>)
  402c70:	2380      	movs	r3, #128	; 0x80
  402c72:	6023      	str	r3, [r4, #0]
		//test
		
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  402c74:	4620      	mov	r0, r4
  402c76:	a903      	add	r1, sp, #12
  402c78:	4b1b      	ldr	r3, [pc, #108]	; (402ce8 <board_init+0x458>)
  402c7a:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  402c7c:	2301      	movs	r3, #1
  402c7e:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  402c80:	4622      	mov	r2, r4
  402c82:	6913      	ldr	r3, [r2, #16]
  402c84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c88:	d0fb      	beq.n	402c82 <board_init+0x3f2>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  402c8a:	2202      	movs	r2, #2
  402c8c:	4b15      	ldr	r3, [pc, #84]	; (402ce4 <board_init+0x454>)
  402c8e:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  402c90:	461a      	mov	r2, r3
  402c92:	6913      	ldr	r3, [r2, #16]
  402c94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c98:	d1fb      	bne.n	402c92 <board_init+0x402>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  402c9a:	4c12      	ldr	r4, [pc, #72]	; (402ce4 <board_init+0x454>)
  402c9c:	2380      	movs	r3, #128	; 0x80
  402c9e:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  402ca0:	4620      	mov	r0, r4
  402ca2:	a903      	add	r1, sp, #12
  402ca4:	4b10      	ldr	r3, [pc, #64]	; (402ce8 <board_init+0x458>)
  402ca6:	4798      	blx	r3
		delay_ms(100);
  402ca8:	4810      	ldr	r0, [pc, #64]	; (402cec <board_init+0x45c>)
  402caa:	4b11      	ldr	r3, [pc, #68]	; (402cf0 <board_init+0x460>)
  402cac:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  402cae:	2301      	movs	r3, #1
  402cb0:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  402cb2:	4622      	mov	r2, r4
  402cb4:	6913      	ldr	r3, [r2, #16]
  402cb6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402cba:	d0fb      	beq.n	402cb4 <board_init+0x424>
		qspi_enable(QSPI);
		delay_ms(100);
  402cbc:	480b      	ldr	r0, [pc, #44]	; (402cec <board_init+0x45c>)
  402cbe:	4b0c      	ldr	r3, [pc, #48]	; (402cf0 <board_init+0x460>)
  402cc0:	4798      	blx	r3
		//DW1000_initialise();
		
}
  402cc2:	b017      	add	sp, #92	; 0x5c
  402cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cc8:	400e1400 	.word	0x400e1400
  402ccc:	00989680 	.word	0x00989680
  402cd0:	000f4240 	.word	0x000f4240
  402cd4:	400e0e00 	.word	0x400e0e00
  402cd8:	004023fd 	.word	0x004023fd
  402cdc:	004023e9 	.word	0x004023e9
  402ce0:	004025f5 	.word	0x004025f5
  402ce4:	4007c000 	.word	0x4007c000
  402ce8:	00400299 	.word	0x00400299
  402cec:	004d2b25 	.word	0x004d2b25
  402cf0:	20400001 	.word	0x20400001

00402cf4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  402cf4:	e7fe      	b.n	402cf4 <Dummy_Handler>
  402cf6:	bf00      	nop

00402cf8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402cf8:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  402cfa:	4b19      	ldr	r3, [pc, #100]	; (402d60 <Reset_Handler+0x68>)
  402cfc:	4a19      	ldr	r2, [pc, #100]	; (402d64 <Reset_Handler+0x6c>)
  402cfe:	429a      	cmp	r2, r3
  402d00:	d003      	beq.n	402d0a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  402d02:	4b19      	ldr	r3, [pc, #100]	; (402d68 <Reset_Handler+0x70>)
  402d04:	4a16      	ldr	r2, [pc, #88]	; (402d60 <Reset_Handler+0x68>)
  402d06:	429a      	cmp	r2, r3
  402d08:	d304      	bcc.n	402d14 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402d0a:	4b18      	ldr	r3, [pc, #96]	; (402d6c <Reset_Handler+0x74>)
  402d0c:	4a18      	ldr	r2, [pc, #96]	; (402d70 <Reset_Handler+0x78>)
  402d0e:	429a      	cmp	r2, r3
  402d10:	d310      	bcc.n	402d34 <Reset_Handler+0x3c>
  402d12:	e01b      	b.n	402d4c <Reset_Handler+0x54>
  402d14:	4912      	ldr	r1, [pc, #72]	; (402d60 <Reset_Handler+0x68>)
  402d16:	1d0a      	adds	r2, r1, #4
  402d18:	4b16      	ldr	r3, [pc, #88]	; (402d74 <Reset_Handler+0x7c>)
  402d1a:	1a9b      	subs	r3, r3, r2
  402d1c:	f023 0303 	bic.w	r3, r3, #3
  402d20:	3304      	adds	r3, #4
  402d22:	4a10      	ldr	r2, [pc, #64]	; (402d64 <Reset_Handler+0x6c>)
  402d24:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  402d26:	f852 0b04 	ldr.w	r0, [r2], #4
  402d2a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  402d2e:	429a      	cmp	r2, r3
  402d30:	d1f9      	bne.n	402d26 <Reset_Handler+0x2e>
  402d32:	e7ea      	b.n	402d0a <Reset_Handler+0x12>
  402d34:	4b10      	ldr	r3, [pc, #64]	; (402d78 <Reset_Handler+0x80>)
  402d36:	4a11      	ldr	r2, [pc, #68]	; (402d7c <Reset_Handler+0x84>)
  402d38:	1ad2      	subs	r2, r2, r3
  402d3a:	f022 0203 	bic.w	r2, r2, #3
  402d3e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402d40:	3b04      	subs	r3, #4
                *pDest++ = 0;
  402d42:	2100      	movs	r1, #0
  402d44:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402d48:	4293      	cmp	r3, r2
  402d4a:	d1fb      	bne.n	402d44 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402d4c:	4a0c      	ldr	r2, [pc, #48]	; (402d80 <Reset_Handler+0x88>)
  402d4e:	4b0d      	ldr	r3, [pc, #52]	; (402d84 <Reset_Handler+0x8c>)
  402d50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402d54:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  402d56:	4b0c      	ldr	r3, [pc, #48]	; (402d88 <Reset_Handler+0x90>)
  402d58:	4798      	blx	r3

        /* Branch to main function */
        main();
  402d5a:	4b0c      	ldr	r3, [pc, #48]	; (402d8c <Reset_Handler+0x94>)
  402d5c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402d5e:	e7fe      	b.n	402d5e <Reset_Handler+0x66>
  402d60:	20400000 	.word	0x20400000
  402d64:	00409fcc 	.word	0x00409fcc
  402d68:	204008b4 	.word	0x204008b4
  402d6c:	2040c30c 	.word	0x2040c30c
  402d70:	204008b4 	.word	0x204008b4
  402d74:	204008b7 	.word	0x204008b7
  402d78:	204008b8 	.word	0x204008b8
  402d7c:	2040c30f 	.word	0x2040c30f
  402d80:	e000ed00 	.word	0xe000ed00
  402d84:	00400000 	.word	0x00400000
  402d88:	00403eb5 	.word	0x00403eb5
  402d8c:	004034b9 	.word	0x004034b9

00402d90 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402d90:	4b3d      	ldr	r3, [pc, #244]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402d94:	f003 0303 	and.w	r3, r3, #3
  402d98:	2b01      	cmp	r3, #1
  402d9a:	d012      	beq.n	402dc2 <SystemCoreClockUpdate+0x32>
  402d9c:	b113      	cbz	r3, 402da4 <SystemCoreClockUpdate+0x14>
  402d9e:	2b02      	cmp	r3, #2
  402da0:	d02c      	beq.n	402dfc <SystemCoreClockUpdate+0x6c>
  402da2:	e05a      	b.n	402e5a <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402da4:	4b39      	ldr	r3, [pc, #228]	; (402e8c <SystemCoreClockUpdate+0xfc>)
  402da6:	695b      	ldr	r3, [r3, #20]
  402da8:	f013 0f80 	tst.w	r3, #128	; 0x80
  402dac:	d004      	beq.n	402db8 <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402dae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402db2:	4b37      	ldr	r3, [pc, #220]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402db4:	601a      	str	r2, [r3, #0]
  402db6:	e050      	b.n	402e5a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402db8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402dbc:	4b34      	ldr	r3, [pc, #208]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402dbe:	601a      	str	r2, [r3, #0]
  402dc0:	e04b      	b.n	402e5a <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402dc2:	4b31      	ldr	r3, [pc, #196]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402dc4:	6a1b      	ldr	r3, [r3, #32]
  402dc6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402dca:	d003      	beq.n	402dd4 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402dcc:	4a31      	ldr	r2, [pc, #196]	; (402e94 <SystemCoreClockUpdate+0x104>)
  402dce:	4b30      	ldr	r3, [pc, #192]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402dd0:	601a      	str	r2, [r3, #0]
  402dd2:	e042      	b.n	402e5a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402dd4:	4a30      	ldr	r2, [pc, #192]	; (402e98 <SystemCoreClockUpdate+0x108>)
  402dd6:	4b2e      	ldr	r3, [pc, #184]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402dd8:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402dda:	4b2b      	ldr	r3, [pc, #172]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402ddc:	6a1b      	ldr	r3, [r3, #32]
  402dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402de2:	2b10      	cmp	r3, #16
  402de4:	d002      	beq.n	402dec <SystemCoreClockUpdate+0x5c>
  402de6:	2b20      	cmp	r3, #32
  402de8:	d004      	beq.n	402df4 <SystemCoreClockUpdate+0x64>
  402dea:	e036      	b.n	402e5a <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402dec:	4a2b      	ldr	r2, [pc, #172]	; (402e9c <SystemCoreClockUpdate+0x10c>)
  402dee:	4b28      	ldr	r3, [pc, #160]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402df0:	601a      	str	r2, [r3, #0]
          break;
  402df2:	e032      	b.n	402e5a <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402df4:	4a27      	ldr	r2, [pc, #156]	; (402e94 <SystemCoreClockUpdate+0x104>)
  402df6:	4b26      	ldr	r3, [pc, #152]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402df8:	601a      	str	r2, [r3, #0]
          break;
  402dfa:	e02e      	b.n	402e5a <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402dfc:	4b22      	ldr	r3, [pc, #136]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402dfe:	6a1b      	ldr	r3, [r3, #32]
  402e00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402e04:	d003      	beq.n	402e0e <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402e06:	4a23      	ldr	r2, [pc, #140]	; (402e94 <SystemCoreClockUpdate+0x104>)
  402e08:	4b21      	ldr	r3, [pc, #132]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e0a:	601a      	str	r2, [r3, #0]
  402e0c:	e012      	b.n	402e34 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402e0e:	4a22      	ldr	r2, [pc, #136]	; (402e98 <SystemCoreClockUpdate+0x108>)
  402e10:	4b1f      	ldr	r3, [pc, #124]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e12:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402e14:	4b1c      	ldr	r3, [pc, #112]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402e16:	6a1b      	ldr	r3, [r3, #32]
  402e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e1c:	2b10      	cmp	r3, #16
  402e1e:	d002      	beq.n	402e26 <SystemCoreClockUpdate+0x96>
  402e20:	2b20      	cmp	r3, #32
  402e22:	d004      	beq.n	402e2e <SystemCoreClockUpdate+0x9e>
  402e24:	e006      	b.n	402e34 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402e26:	4a1d      	ldr	r2, [pc, #116]	; (402e9c <SystemCoreClockUpdate+0x10c>)
  402e28:	4b19      	ldr	r3, [pc, #100]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e2a:	601a      	str	r2, [r3, #0]
          break;
  402e2c:	e002      	b.n	402e34 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402e2e:	4a19      	ldr	r2, [pc, #100]	; (402e94 <SystemCoreClockUpdate+0x104>)
  402e30:	4b17      	ldr	r3, [pc, #92]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e32:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402e34:	4b14      	ldr	r3, [pc, #80]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e38:	f003 0303 	and.w	r3, r3, #3
  402e3c:	2b02      	cmp	r3, #2
  402e3e:	d10c      	bne.n	402e5a <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402e40:	4a11      	ldr	r2, [pc, #68]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402e42:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402e44:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402e46:	4812      	ldr	r0, [pc, #72]	; (402e90 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402e48:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402e4c:	6803      	ldr	r3, [r0, #0]
  402e4e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402e52:	b2d2      	uxtb	r2, r2
  402e54:	fbb3 f3f2 	udiv	r3, r3, r2
  402e58:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402e5a:	4b0b      	ldr	r3, [pc, #44]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e62:	2b70      	cmp	r3, #112	; 0x70
  402e64:	d107      	bne.n	402e76 <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  402e66:	4a0a      	ldr	r2, [pc, #40]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e68:	6813      	ldr	r3, [r2, #0]
  402e6a:	490d      	ldr	r1, [pc, #52]	; (402ea0 <SystemCoreClockUpdate+0x110>)
  402e6c:	fba1 1303 	umull	r1, r3, r1, r3
  402e70:	085b      	lsrs	r3, r3, #1
  402e72:	6013      	str	r3, [r2, #0]
  402e74:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402e76:	4b04      	ldr	r3, [pc, #16]	; (402e88 <SystemCoreClockUpdate+0xf8>)
  402e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e7a:	4905      	ldr	r1, [pc, #20]	; (402e90 <SystemCoreClockUpdate+0x100>)
  402e7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402e80:	680b      	ldr	r3, [r1, #0]
  402e82:	40d3      	lsrs	r3, r2
  402e84:	600b      	str	r3, [r1, #0]
  402e86:	4770      	bx	lr
  402e88:	400e0600 	.word	0x400e0600
  402e8c:	400e1810 	.word	0x400e1810
  402e90:	20400014 	.word	0x20400014
  402e94:	00b71b00 	.word	0x00b71b00
  402e98:	003d0900 	.word	0x003d0900
  402e9c:	007a1200 	.word	0x007a1200
  402ea0:	aaaaaaab 	.word	0xaaaaaaab

00402ea4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402ea4:	4b14      	ldr	r3, [pc, #80]	; (402ef8 <system_init_flash+0x54>)
  402ea6:	4298      	cmp	r0, r3
  402ea8:	d804      	bhi.n	402eb4 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402eaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402eae:	4b13      	ldr	r3, [pc, #76]	; (402efc <system_init_flash+0x58>)
  402eb0:	601a      	str	r2, [r3, #0]
  402eb2:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402eb4:	4b12      	ldr	r3, [pc, #72]	; (402f00 <system_init_flash+0x5c>)
  402eb6:	4298      	cmp	r0, r3
  402eb8:	d803      	bhi.n	402ec2 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402eba:	4a12      	ldr	r2, [pc, #72]	; (402f04 <system_init_flash+0x60>)
  402ebc:	4b0f      	ldr	r3, [pc, #60]	; (402efc <system_init_flash+0x58>)
  402ebe:	601a      	str	r2, [r3, #0]
  402ec0:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402ec2:	4b11      	ldr	r3, [pc, #68]	; (402f08 <system_init_flash+0x64>)
  402ec4:	4298      	cmp	r0, r3
  402ec6:	d803      	bhi.n	402ed0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ec8:	4a10      	ldr	r2, [pc, #64]	; (402f0c <system_init_flash+0x68>)
  402eca:	4b0c      	ldr	r3, [pc, #48]	; (402efc <system_init_flash+0x58>)
  402ecc:	601a      	str	r2, [r3, #0]
  402ece:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402ed0:	4b0f      	ldr	r3, [pc, #60]	; (402f10 <system_init_flash+0x6c>)
  402ed2:	4298      	cmp	r0, r3
  402ed4:	d803      	bhi.n	402ede <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402ed6:	4a0f      	ldr	r2, [pc, #60]	; (402f14 <system_init_flash+0x70>)
  402ed8:	4b08      	ldr	r3, [pc, #32]	; (402efc <system_init_flash+0x58>)
  402eda:	601a      	str	r2, [r3, #0]
  402edc:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402ede:	4b0e      	ldr	r3, [pc, #56]	; (402f18 <system_init_flash+0x74>)
  402ee0:	4298      	cmp	r0, r3
  402ee2:	d804      	bhi.n	402eee <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402ee4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402ee8:	4b04      	ldr	r3, [pc, #16]	; (402efc <system_init_flash+0x58>)
  402eea:	601a      	str	r2, [r3, #0]
  402eec:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402eee:	4a0b      	ldr	r2, [pc, #44]	; (402f1c <system_init_flash+0x78>)
  402ef0:	4b02      	ldr	r3, [pc, #8]	; (402efc <system_init_flash+0x58>)
  402ef2:	601a      	str	r2, [r3, #0]
  402ef4:	4770      	bx	lr
  402ef6:	bf00      	nop
  402ef8:	01312cff 	.word	0x01312cff
  402efc:	400e0c00 	.word	0x400e0c00
  402f00:	026259ff 	.word	0x026259ff
  402f04:	04000100 	.word	0x04000100
  402f08:	039386ff 	.word	0x039386ff
  402f0c:	04000200 	.word	0x04000200
  402f10:	04c4b3ff 	.word	0x04c4b3ff
  402f14:	04000300 	.word	0x04000300
  402f18:	05f5e0ff 	.word	0x05f5e0ff
  402f1c:	04000500 	.word	0x04000500

00402f20 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402f20:	4b09      	ldr	r3, [pc, #36]	; (402f48 <_sbrk+0x28>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	b913      	cbnz	r3, 402f2c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402f26:	4a09      	ldr	r2, [pc, #36]	; (402f4c <_sbrk+0x2c>)
  402f28:	4b07      	ldr	r3, [pc, #28]	; (402f48 <_sbrk+0x28>)
  402f2a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402f2c:	4b06      	ldr	r3, [pc, #24]	; (402f48 <_sbrk+0x28>)
  402f2e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402f30:	181a      	adds	r2, r3, r0
  402f32:	4907      	ldr	r1, [pc, #28]	; (402f50 <_sbrk+0x30>)
  402f34:	4291      	cmp	r1, r2
  402f36:	db04      	blt.n	402f42 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402f38:	4610      	mov	r0, r2
  402f3a:	4a03      	ldr	r2, [pc, #12]	; (402f48 <_sbrk+0x28>)
  402f3c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402f3e:	4618      	mov	r0, r3
  402f40:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402f42:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402f46:	4770      	bx	lr
  402f48:	2040c288 	.word	0x2040c288
  402f4c:	2040e510 	.word	0x2040e510
  402f50:	2045fffc 	.word	0x2045fffc

00402f54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402f54:	f04f 30ff 	mov.w	r0, #4294967295
  402f58:	4770      	bx	lr
  402f5a:	bf00      	nop

00402f5c <_write>:

extern int _write(int file)
{
	return -1;
}
  402f5c:	f04f 30ff 	mov.w	r0, #4294967295
  402f60:	4770      	bx	lr
  402f62:	bf00      	nop

00402f64 <_read>:

extern int _read(int file)
{
	return -1;
}
  402f64:	f04f 30ff 	mov.w	r0, #4294967295
  402f68:	4770      	bx	lr
  402f6a:	bf00      	nop

00402f6c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402f70:	604b      	str	r3, [r1, #4]

	return 0;
}
  402f72:	2000      	movs	r0, #0
  402f74:	4770      	bx	lr
  402f76:	bf00      	nop

00402f78 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402f78:	2001      	movs	r0, #1
  402f7a:	4770      	bx	lr

00402f7c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402f7c:	2000      	movs	r0, #0
  402f7e:	4770      	bx	lr

00402f80 <_exit>:

extern void _exit(int status)
{
  402f80:	b508      	push	{r3, lr}
  402f82:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  402f84:	4801      	ldr	r0, [pc, #4]	; (402f8c <_exit+0xc>)
  402f86:	4b02      	ldr	r3, [pc, #8]	; (402f90 <_exit+0x10>)
  402f88:	4798      	blx	r3

	for (;;);
  402f8a:	e7fe      	b.n	402f8a <_exit+0xa>
  402f8c:	00409ca0 	.word	0x00409ca0
  402f90:	00403f05 	.word	0x00403f05

00402f94 <_kill>:
}

extern void _kill(int pid, int sig)
{
  402f94:	4770      	bx	lr
  402f96:	bf00      	nop

00402f98 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  402f98:	f04f 30ff 	mov.w	r0, #4294967295
  402f9c:	4770      	bx	lr
  402f9e:	bf00      	nop

00402fa0 <i2cWriteReg>:
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
}

void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  402fa0:	b500      	push	{lr}
  402fa2:	b089      	sub	sp, #36	; 0x24
  402fa4:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  402fa8:	2300      	movs	r3, #0
  402faa:	9303      	str	r3, [sp, #12]
  402fac:	9307      	str	r3, [sp, #28]
  402fae:	f88d 100c 	strb.w	r1, [sp, #12]
  402fb2:	2301      	movs	r3, #1
  402fb4:	9304      	str	r3, [sp, #16]
  402fb6:	f10d 0207 	add.w	r2, sp, #7
  402fba:	9205      	str	r2, [sp, #20]
  402fbc:	9306      	str	r3, [sp, #24]
  402fbe:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  402fc2:	4805      	ldr	r0, [pc, #20]	; (402fd8 <i2cWriteReg+0x38>)
  402fc4:	a903      	add	r1, sp, #12
  402fc6:	4b05      	ldr	r3, [pc, #20]	; (402fdc <i2cWriteReg+0x3c>)
  402fc8:	4798      	blx	r3
  402fca:	b110      	cbz	r0, 402fd2 <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  402fcc:	4804      	ldr	r0, [pc, #16]	; (402fe0 <i2cWriteReg+0x40>)
  402fce:	4b05      	ldr	r3, [pc, #20]	; (402fe4 <i2cWriteReg+0x44>)
  402fd0:	4798      	blx	r3
	}
}
  402fd2:	b009      	add	sp, #36	; 0x24
  402fd4:	f85d fb04 	ldr.w	pc, [sp], #4
  402fd8:	40018000 	.word	0x40018000
  402fdc:	00402789 	.word	0x00402789
  402fe0:	00409cec 	.word	0x00409cec
  402fe4:	0040019d 	.word	0x0040019d

00402fe8 <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  402fe8:	b500      	push	{lr}
  402fea:	b087      	sub	sp, #28
	int retVal = 0;
  402fec:	2300      	movs	r3, #0
  402fee:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  402ff0:	9300      	str	r3, [sp, #0]
  402ff2:	9304      	str	r3, [sp, #16]
  402ff4:	f88d 1000 	strb.w	r1, [sp]
  402ff8:	2301      	movs	r3, #1
  402ffa:	9301      	str	r3, [sp, #4]
  402ffc:	aa05      	add	r2, sp, #20
  402ffe:	9202      	str	r2, [sp, #8]
  403000:	9303      	str	r3, [sp, #12]
  403002:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  403006:	4804      	ldr	r0, [pc, #16]	; (403018 <i2cReadReg+0x30>)
  403008:	4669      	mov	r1, sp
  40300a:	4b04      	ldr	r3, [pc, #16]	; (40301c <i2cReadReg+0x34>)
  40300c:	4798      	blx	r3
	return retVal;
}
  40300e:	9805      	ldr	r0, [sp, #20]
  403010:	b007      	add	sp, #28
  403012:	f85d fb04 	ldr.w	pc, [sp], #4
  403016:	bf00      	nop
  403018:	40018000 	.word	0x40018000
  40301c:	004026d1 	.word	0x004026d1

00403020 <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  403020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403024:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  403026:	b2c4      	uxtb	r4, r0
  403028:	4620      	mov	r0, r4
  40302a:	2100      	movs	r1, #0
  40302c:	4f2a      	ldr	r7, [pc, #168]	; (4030d8 <ServoDriverInit+0xb8>)
  40302e:	47b8      	blx	r7
  403030:	4602      	mov	r2, r0
  403032:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4030f0 <ServoDriverInit+0xd0>
  403036:	a801      	add	r0, sp, #4
  403038:	4641      	mov	r1, r8
  40303a:	4d28      	ldr	r5, [pc, #160]	; (4030dc <ServoDriverInit+0xbc>)
  40303c:	47a8      	blx	r5
	sendDebugString(buf);
  40303e:	a801      	add	r0, sp, #4
  403040:	4e27      	ldr	r6, [pc, #156]	; (4030e0 <ServoDriverInit+0xc0>)
  403042:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  403044:	4620      	mov	r0, r4
  403046:	2101      	movs	r1, #1
  403048:	47b8      	blx	r7
  40304a:	4602      	mov	r2, r0
  40304c:	a801      	add	r0, sp, #4
  40304e:	4641      	mov	r1, r8
  403050:	47a8      	blx	r5
	sendDebugString(buf);
  403052:	a801      	add	r0, sp, #4
  403054:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  403056:	4620      	mov	r0, r4
  403058:	211e      	movs	r1, #30
  40305a:	47b8      	blx	r7
  40305c:	4602      	mov	r2, r0
  40305e:	a801      	add	r0, sp, #4
  403060:	4641      	mov	r1, r8
  403062:	47a8      	blx	r5
	sendDebugString(buf);
  403064:	a801      	add	r0, sp, #4
  403066:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  403068:	4620      	mov	r0, r4
  40306a:	21fe      	movs	r1, #254	; 0xfe
  40306c:	47b8      	blx	r7
  40306e:	4602      	mov	r2, r0
  403070:	a801      	add	r0, sp, #4
  403072:	4641      	mov	r1, r8
  403074:	47a8      	blx	r5
	sendDebugString(buf);
  403076:	a801      	add	r0, sp, #4
  403078:	47b0      	blx	r6
	
	delay_ms(1);
  40307a:	f24c 508e 	movw	r0, #50574	; 0xc58e
  40307e:	4f19      	ldr	r7, [pc, #100]	; (4030e4 <ServoDriverInit+0xc4>)
  403080:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  403082:	4620      	mov	r0, r4
  403084:	2100      	movs	r1, #0
  403086:	2210      	movs	r2, #16
  403088:	4d17      	ldr	r5, [pc, #92]	; (4030e8 <ServoDriverInit+0xc8>)
  40308a:	47a8      	blx	r5
	delay_ms(2);
  40308c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4030f4 <ServoDriverInit+0xd4>
  403090:	4640      	mov	r0, r8
  403092:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0xFE,0x80);
  403094:	4620      	mov	r0, r4
  403096:	21fe      	movs	r1, #254	; 0xfe
  403098:	2280      	movs	r2, #128	; 0x80
  40309a:	47a8      	blx	r5
	delay_ms(2);
  40309c:	4640      	mov	r0, r8
  40309e:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  4030a0:	4620      	mov	r0, r4
  4030a2:	2100      	movs	r1, #0
  4030a4:	460a      	mov	r2, r1
  4030a6:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  4030a8:	4620      	mov	r0, r4
  4030aa:	2100      	movs	r1, #0
  4030ac:	2210      	movs	r2, #16
  4030ae:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  4030b0:	4620      	mov	r0, r4
  4030b2:	2101      	movs	r1, #1
  4030b4:	2204      	movs	r2, #4
  4030b6:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  4030b8:	4620      	mov	r0, r4
  4030ba:	2100      	movs	r1, #0
  4030bc:	460a      	mov	r2, r1
  4030be:	47a8      	blx	r5
	delay_ms(2);
  4030c0:	4640      	mov	r0, r8
  4030c2:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  4030c4:	4620      	mov	r0, r4
  4030c6:	2100      	movs	r1, #0
  4030c8:	2280      	movs	r2, #128	; 0x80
  4030ca:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  4030cc:	4807      	ldr	r0, [pc, #28]	; (4030ec <ServoDriverInit+0xcc>)
  4030ce:	47b0      	blx	r6
}
  4030d0:	b006      	add	sp, #24
  4030d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4030d6:	bf00      	nop
  4030d8:	00402fe9 	.word	0x00402fe9
  4030dc:	00404101 	.word	0x00404101
  4030e0:	0040019d 	.word	0x0040019d
  4030e4:	20400001 	.word	0x20400001
  4030e8:	00402fa1 	.word	0x00402fa1
  4030ec:	00409d00 	.word	0x00409d00
  4030f0:	00409cf8 	.word	0x00409cf8
  4030f4:	00018b1b 	.word	0x00018b1b

004030f8 <SetupCameraRAW>:
	write_SCCB(0x09, 0x01);

	
}

void SetupCameraRAW() {
  4030f8:	b510      	push	{r4, lr}
	write_SCCB(0x12, 0x80);
  4030fa:	2030      	movs	r0, #48	; 0x30
  4030fc:	2112      	movs	r1, #18
  4030fe:	2280      	movs	r2, #128	; 0x80
  403100:	4c6d      	ldr	r4, [pc, #436]	; (4032b8 <SetupCameraRAW+0x1c0>)
  403102:	47a0      	blx	r4
	write_SCCB(0x11, 0x81);
  403104:	2030      	movs	r0, #48	; 0x30
  403106:	2111      	movs	r1, #17
  403108:	2281      	movs	r2, #129	; 0x81
  40310a:	47a0      	blx	r4
	write_SCCB(0x6b, 0x4a);
  40310c:	2030      	movs	r0, #48	; 0x30
  40310e:	216b      	movs	r1, #107	; 0x6b
  403110:	224a      	movs	r2, #74	; 0x4a
  403112:	47a0      	blx	r4
	write_SCCB(0x3b, 0x01);
  403114:	2030      	movs	r0, #48	; 0x30
  403116:	213b      	movs	r1, #59	; 0x3b
  403118:	2201      	movs	r2, #1
  40311a:	47a0      	blx	r4
	write_SCCB(0x6a, 0x83);
  40311c:	2030      	movs	r0, #48	; 0x30
  40311e:	216a      	movs	r1, #106	; 0x6a
  403120:	2283      	movs	r2, #131	; 0x83
  403122:	47a0      	blx	r4
	write_SCCB(0x13, 0xe2);
  403124:	2030      	movs	r0, #48	; 0x30
  403126:	2113      	movs	r1, #19
  403128:	22e2      	movs	r2, #226	; 0xe2
  40312a:	47a0      	blx	r4
	write_SCCB(0x10, 0x00);
  40312c:	2030      	movs	r0, #48	; 0x30
  40312e:	2110      	movs	r1, #16
  403130:	2200      	movs	r2, #0
  403132:	47a0      	blx	r4
	write_SCCB(0x00, 0x00);
  403134:	2030      	movs	r0, #48	; 0x30
  403136:	2100      	movs	r1, #0
  403138:	460a      	mov	r2, r1
  40313a:	47a0      	blx	r4
	write_SCCB(0x01, 0x80);
  40313c:	2030      	movs	r0, #48	; 0x30
  40313e:	2101      	movs	r1, #1
  403140:	2280      	movs	r2, #128	; 0x80
  403142:	47a0      	blx	r4
	write_SCCB(0x02, 0x80);
  403144:	2030      	movs	r0, #48	; 0x30
  403146:	2102      	movs	r1, #2
  403148:	2280      	movs	r2, #128	; 0x80
  40314a:	47a0      	blx	r4
	write_SCCB(0x13, 0xe7);
  40314c:	2030      	movs	r0, #48	; 0x30
  40314e:	2113      	movs	r1, #19
  403150:	22e7      	movs	r2, #231	; 0xe7
  403152:	47a0      	blx	r4
	write_SCCB(0x39, 0x50);
  403154:	2030      	movs	r0, #48	; 0x30
  403156:	2139      	movs	r1, #57	; 0x39
  403158:	2250      	movs	r2, #80	; 0x50
  40315a:	47a0      	blx	r4
	write_SCCB(0x38, 0x93);
  40315c:	2030      	movs	r0, #48	; 0x30
  40315e:	2138      	movs	r1, #56	; 0x38
  403160:	2293      	movs	r2, #147	; 0x93
  403162:	47a0      	blx	r4
	write_SCCB(0x37, 0x00);
  403164:	2030      	movs	r0, #48	; 0x30
  403166:	2137      	movs	r1, #55	; 0x37
  403168:	2200      	movs	r2, #0
  40316a:	47a0      	blx	r4
	write_SCCB(0x35, 0x81);
  40316c:	2030      	movs	r0, #48	; 0x30
  40316e:	2135      	movs	r1, #53	; 0x35
  403170:	2281      	movs	r2, #129	; 0x81
  403172:	47a0      	blx	r4
	write_SCCB(0x0e, 0xa0);
  403174:	2030      	movs	r0, #48	; 0x30
  403176:	210e      	movs	r1, #14
  403178:	22a0      	movs	r2, #160	; 0xa0
  40317a:	47a0      	blx	r4
	//
	write_SCCB(0xa8, 0x80);
  40317c:	2030      	movs	r0, #48	; 0x30
  40317e:	21a8      	movs	r1, #168	; 0xa8
  403180:	2280      	movs	r2, #128	; 0x80
  403182:	47a0      	blx	r4
	write_SCCB(0x12, 0x05);
  403184:	2030      	movs	r0, #48	; 0x30
  403186:	2112      	movs	r1, #18
  403188:	2205      	movs	r2, #5
  40318a:	47a0      	blx	r4
	write_SCCB(0x04, 0x00);
  40318c:	2030      	movs	r0, #48	; 0x30
  40318e:	2104      	movs	r1, #4
  403190:	2200      	movs	r2, #0
  403192:	47a0      	blx	r4
	write_SCCB(0x0c, 0x00);
  403194:	2030      	movs	r0, #48	; 0x30
  403196:	210c      	movs	r1, #12
  403198:	2200      	movs	r2, #0
  40319a:	47a0      	blx	r4
	write_SCCB(0x0d, 0x00);
  40319c:	2030      	movs	r0, #48	; 0x30
  40319e:	210d      	movs	r1, #13
  4031a0:	2200      	movs	r2, #0
  4031a2:	47a0      	blx	r4
	write_SCCB(0x18, 0xbb);
  4031a4:	2030      	movs	r0, #48	; 0x30
  4031a6:	2118      	movs	r1, #24
  4031a8:	22bb      	movs	r2, #187	; 0xbb
  4031aa:	47a0      	blx	r4
	write_SCCB(0x17, 0x1b);
  4031ac:	2030      	movs	r0, #48	; 0x30
  4031ae:	2117      	movs	r1, #23
  4031b0:	221b      	movs	r2, #27
  4031b2:	47a0      	blx	r4
	write_SCCB(0x32, 0xa4);
  4031b4:	2030      	movs	r0, #48	; 0x30
  4031b6:	2132      	movs	r1, #50	; 0x32
  4031b8:	22a4      	movs	r2, #164	; 0xa4
  4031ba:	47a0      	blx	r4
	write_SCCB(0x19, 0x01);
  4031bc:	2030      	movs	r0, #48	; 0x30
  4031be:	2119      	movs	r1, #25
  4031c0:	2201      	movs	r2, #1
  4031c2:	47a0      	blx	r4
	write_SCCB(0x1a, 0x81);
  4031c4:	2030      	movs	r0, #48	; 0x30
  4031c6:	211a      	movs	r1, #26
  4031c8:	2281      	movs	r2, #129	; 0x81
  4031ca:	47a0      	blx	r4
	write_SCCB(0x03, 0x12);
  4031cc:	2030      	movs	r0, #48	; 0x30
  4031ce:	2103      	movs	r1, #3
  4031d0:	2212      	movs	r2, #18
  4031d2:	47a0      	blx	r4
	//
	write_SCCB(0x1b, 0x00);
  4031d4:	2030      	movs	r0, #48	; 0x30
  4031d6:	211b      	movs	r1, #27
  4031d8:	2200      	movs	r2, #0
  4031da:	47a0      	blx	r4
	write_SCCB(0x16, 0x07);
  4031dc:	2030      	movs	r0, #48	; 0x30
  4031de:	2116      	movs	r1, #22
  4031e0:	2207      	movs	r2, #7
  4031e2:	47a0      	blx	r4
	write_SCCB(0x33, 0xe2); //c0 for internal regulator
  4031e4:	2030      	movs	r0, #48	; 0x30
  4031e6:	2133      	movs	r1, #51	; 0x33
  4031e8:	22e2      	movs	r2, #226	; 0xe2
  4031ea:	47a0      	blx	r4
	write_SCCB(0x34, 0xbf);
  4031ec:	2030      	movs	r0, #48	; 0x30
  4031ee:	2134      	movs	r1, #52	; 0x34
  4031f0:	22bf      	movs	r2, #191	; 0xbf
  4031f2:	47a0      	blx	r4
	write_SCCB(0x41, 0x00);
  4031f4:	2030      	movs	r0, #48	; 0x30
  4031f6:	2141      	movs	r1, #65	; 0x41
  4031f8:	2200      	movs	r2, #0
  4031fa:	47a0      	blx	r4
	write_SCCB(0x96, 0x04);
  4031fc:	2030      	movs	r0, #48	; 0x30
  4031fe:	2196      	movs	r1, #150	; 0x96
  403200:	2204      	movs	r2, #4
  403202:	47a0      	blx	r4
	//
	write_SCCB(0x3d, 0x19);
  403204:	2030      	movs	r0, #48	; 0x30
  403206:	213d      	movs	r1, #61	; 0x3d
  403208:	2219      	movs	r2, #25
  40320a:	47a0      	blx	r4
	write_SCCB(0x69, 0x40);
  40320c:	2030      	movs	r0, #48	; 0x30
  40320e:	2169      	movs	r1, #105	; 0x69
  403210:	2240      	movs	r2, #64	; 0x40
  403212:	47a0      	blx	r4
	write_SCCB(0x3a, 0x0d);
  403214:	2030      	movs	r0, #48	; 0x30
  403216:	213a      	movs	r1, #58	; 0x3a
  403218:	220d      	movs	r2, #13
  40321a:	47a0      	blx	r4
	write_SCCB(0x8e, 0x00);
  40321c:	2030      	movs	r0, #48	; 0x30
  40321e:	218e      	movs	r1, #142	; 0x8e
  403220:	2200      	movs	r2, #0
  403222:	47a0      	blx	r4
	//
	write_SCCB(0x3c, 0x73);
  403224:	2030      	movs	r0, #48	; 0x30
  403226:	213c      	movs	r1, #60	; 0x3c
  403228:	2273      	movs	r2, #115	; 0x73
  40322a:	47a0      	blx	r4
	write_SCCB(0x8f, 0xdf);
  40322c:	2030      	movs	r0, #48	; 0x30
  40322e:	218f      	movs	r1, #143	; 0x8f
  403230:	22df      	movs	r2, #223	; 0xdf
  403232:	47a0      	blx	r4
	write_SCCB(0x8b, 0x06);
  403234:	2030      	movs	r0, #48	; 0x30
  403236:	218b      	movs	r1, #139	; 0x8b
  403238:	2206      	movs	r2, #6
  40323a:	47a0      	blx	r4
	write_SCCB(0x8c, 0x20);
  40323c:	2030      	movs	r0, #48	; 0x30
  40323e:	218c      	movs	r1, #140	; 0x8c
  403240:	2220      	movs	r2, #32
  403242:	47a0      	blx	r4
	write_SCCB(0x94, 0x88);
  403244:	2030      	movs	r0, #48	; 0x30
  403246:	2194      	movs	r1, #148	; 0x94
  403248:	2288      	movs	r2, #136	; 0x88
  40324a:	47a0      	blx	r4
	write_SCCB(0x95, 0x88);
  40324c:	2030      	movs	r0, #48	; 0x30
  40324e:	2195      	movs	r1, #149	; 0x95
  403250:	2288      	movs	r2, #136	; 0x88
  403252:	47a0      	blx	r4
	write_SCCB(0x40, 0xc1);
  403254:	2030      	movs	r0, #48	; 0x30
  403256:	2140      	movs	r1, #64	; 0x40
  403258:	22c1      	movs	r2, #193	; 0xc1
  40325a:	47a0      	blx	r4
	write_SCCB(0x29, 0x3f); //2f for internal regulator
  40325c:	2030      	movs	r0, #48	; 0x30
  40325e:	2129      	movs	r1, #41	; 0x29
  403260:	223f      	movs	r2, #63	; 0x3f
  403262:	47a0      	blx	r4
	write_SCCB(0x0f, 0x42);
  403264:	2030      	movs	r0, #48	; 0x30
  403266:	210f      	movs	r1, #15
  403268:	2242      	movs	r2, #66	; 0x42
  40326a:	47a0      	blx	r4
	write_SCCB(0xa5, 0x80);
  40326c:	2030      	movs	r0, #48	; 0x30
  40326e:	21a5      	movs	r1, #165	; 0xa5
  403270:	2280      	movs	r2, #128	; 0x80
  403272:	47a0      	blx	r4
	write_SCCB(0x1e, 0x04);
  403274:	2030      	movs	r0, #48	; 0x30
  403276:	211e      	movs	r1, #30
  403278:	2204      	movs	r2, #4
  40327a:	47a0      	blx	r4
	write_SCCB(0xa9, 0xb8);
  40327c:	2030      	movs	r0, #48	; 0x30
  40327e:	21a9      	movs	r1, #169	; 0xa9
  403280:	22b8      	movs	r2, #184	; 0xb8
  403282:	47a0      	blx	r4
	write_SCCB(0xaa, 0x92);
  403284:	2030      	movs	r0, #48	; 0x30
  403286:	21aa      	movs	r1, #170	; 0xaa
  403288:	2292      	movs	r2, #146	; 0x92
  40328a:	47a0      	blx	r4
	write_SCCB(0xab, 0x0a);
  40328c:	2030      	movs	r0, #48	; 0x30
  40328e:	21ab      	movs	r1, #171	; 0xab
  403290:	220a      	movs	r2, #10
  403292:	47a0      	blx	r4
	//
	write_SCCB(0x24, 0x68);
  403294:	2030      	movs	r0, #48	; 0x30
  403296:	2124      	movs	r1, #36	; 0x24
  403298:	2268      	movs	r2, #104	; 0x68
  40329a:	47a0      	blx	r4
	write_SCCB(0x25, 0x5c);
  40329c:	2030      	movs	r0, #48	; 0x30
  40329e:	2125      	movs	r1, #37	; 0x25
  4032a0:	225c      	movs	r2, #92	; 0x5c
  4032a2:	47a0      	blx	r4
	write_SCCB(0x26, 0xc3);
  4032a4:	2030      	movs	r0, #48	; 0x30
  4032a6:	2126      	movs	r1, #38	; 0x26
  4032a8:	22c3      	movs	r2, #195	; 0xc3
  4032aa:	47a0      	blx	r4
	write_SCCB(0x14, 0x2e);
  4032ac:	2030      	movs	r0, #48	; 0x30
  4032ae:	2114      	movs	r1, #20
  4032b0:	222e      	movs	r2, #46	; 0x2e
  4032b2:	47a0      	blx	r4
  4032b4:	bd10      	pop	{r4, pc}
  4032b6:	bf00      	nop
  4032b8:	00402fa1 	.word	0x00402fa1

004032bc <vTask1>:
	sendDebugString("MEMORY ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  4032bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032c0:	b08f      	sub	sp, #60	; 0x3c
	
	sendDebugString("STARTED TASK 1\n");
  4032c2:	486d      	ldr	r0, [pc, #436]	; (403478 <vTask1+0x1bc>)
  4032c4:	4b6d      	ldr	r3, [pc, #436]	; (40347c <vTask1+0x1c0>)
  4032c6:	4798      	blx	r3
	TickType_t xLastWakeTime = xTaskGetTickCount();
  4032c8:	4b6d      	ldr	r3, [pc, #436]	; (403480 <vTask1+0x1c4>)
  4032ca:	4798      	blx	r3
  4032cc:	900d      	str	r0, [sp, #52]	; 0x34
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  4032ce:	486d      	ldr	r0, [pc, #436]	; (403484 <vTask1+0x1c8>)
  4032d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032d4:	4b6c      	ldr	r3, [pc, #432]	; (403488 <vTask1+0x1cc>)
  4032d6:	4798      	blx	r3
void vTask1 (void* pvParameters) {
	
	sendDebugString("STARTED TASK 1\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
	uint8_t T = 0;
  4032d8:	f04f 0800 	mov.w	r8, #0

void vTask1 (void* pvParameters) {
	
	sendDebugString("STARTED TASK 1\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  4032dc:	2401      	movs	r4, #1
				}
				
				
				
				else {
				pio_clear(LED0);	
  4032de:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 403484 <vTask1+0x1c8>
  4032e2:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 4034b4 <vTask1+0x1f8>
	pio_set(LED0);
	int testCountFail = 0;
	for(;;) {
		//sendDebugString("TASK1 RUNNING\n");
		
				if(tg) {
  4032e6:	2c00      	cmp	r4, #0
  4032e8:	d05f      	beq.n	4033aa <vTask1+0xee>
				pio_set(LED0);
  4032ea:	4650      	mov	r0, sl
  4032ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032f0:	4b65      	ldr	r3, [pc, #404]	; (403488 <vTask1+0x1cc>)
  4032f2:	4798      	blx	r3
				
				
				
				//DW1000_writeReg(0x26,DW1000_SUB,0x08,0xF0,1);
			//	DW1000_writeReg(0x26,DW1000_SUB,0x0C,0xFF,1);
				Qbuf[0] = 0x26 | 1<<7 | 1<<6;
  4032f4:	23e6      	movs	r3, #230	; 0xe6
  4032f6:	f88d 3020 	strb.w	r3, [sp, #32]
				Qbuf[1] = 0x08;
  4032fa:	2708      	movs	r7, #8
  4032fc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
				Qbuf[2] = 0xF0;
  403300:	23f0      	movs	r3, #240	; 0xf0
  403302:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				Qbuf[3] = 0x00;
  403306:	2400      	movs	r4, #0
  403308:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
				Qbuf[4] = 0x00;
  40330c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
				Qbuf[5] = 0x00;
  403310:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
				qspi_write(QSPI,Qbuf,1);
  403314:	4d5d      	ldr	r5, [pc, #372]	; (40348c <vTask1+0x1d0>)
  403316:	4628      	mov	r0, r5
  403318:	a908      	add	r1, sp, #32
  40331a:	2201      	movs	r2, #1
  40331c:	4e5c      	ldr	r6, [pc, #368]	; (403490 <vTask1+0x1d4>)
  40331e:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+1,1);
  403320:	4628      	mov	r0, r5
  403322:	f10d 0121 	add.w	r1, sp, #33	; 0x21
  403326:	2201      	movs	r2, #1
  403328:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+2,1);
  40332a:	4628      	mov	r0, r5
  40332c:	f10d 0122 	add.w	r1, sp, #34	; 0x22
  403330:	2201      	movs	r2, #1
  403332:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+3,1);
  403334:	4628      	mov	r0, r5
  403336:	f10d 0123 	add.w	r1, sp, #35	; 0x23
  40333a:	2201      	movs	r2, #1
  40333c:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+4,1);
  40333e:	4628      	mov	r0, r5
  403340:	a909      	add	r1, sp, #36	; 0x24
  403342:	2201      	movs	r2, #1
  403344:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+5,1);
  403346:	4628      	mov	r0, r5
  403348:	f10d 0125 	add.w	r1, sp, #37	; 0x25
  40334c:	2201      	movs	r2, #1
  40334e:	47b0      	blx	r6
				delay_ms(100);
  403350:	4850      	ldr	r0, [pc, #320]	; (403494 <vTask1+0x1d8>)
  403352:	4b51      	ldr	r3, [pc, #324]	; (403498 <vTask1+0x1dc>)
  403354:	4798      	blx	r3
			
				
				
				memset(Qbuf,0,20);
  403356:	9408      	str	r4, [sp, #32]
  403358:	9409      	str	r4, [sp, #36]	; 0x24
  40335a:	940a      	str	r4, [sp, #40]	; 0x28
  40335c:	940b      	str	r4, [sp, #44]	; 0x2c
  40335e:	940c      	str	r4, [sp, #48]	; 0x30
				Qbuf[0] = 0x26 | 1<<6;
  403360:	2366      	movs	r3, #102	; 0x66
  403362:	f88d 3020 	strb.w	r3, [sp, #32]
				Qbuf[1] = 0x08;
  403366:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
				qspi_write(QSPI,Qbuf,1);
  40336a:	4628      	mov	r0, r5
  40336c:	a908      	add	r1, sp, #32
  40336e:	2201      	movs	r2, #1
  403370:	47b0      	blx	r6
				qspi_write(QSPI,Qbuf+1,1);
  403372:	4628      	mov	r0, r5
  403374:	f10d 0121 	add.w	r1, sp, #33	; 0x21
  403378:	2201      	movs	r2, #1
  40337a:	47b0      	blx	r6
				qspi_read(QSPI,Qbuf,4);
  40337c:	4628      	mov	r0, r5
  40337e:	a908      	add	r1, sp, #32
  403380:	2204      	movs	r2, #4
  403382:	4b46      	ldr	r3, [pc, #280]	; (40349c <vTask1+0x1e0>)
  403384:	4798      	blx	r3
				sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
  403386:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
  40338a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  40338e:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  403392:	9100      	str	r1, [sp, #0]
  403394:	f89d 1020 	ldrb.w	r1, [sp, #32]
  403398:	9101      	str	r1, [sp, #4]
  40339a:	a803      	add	r0, sp, #12
  40339c:	4940      	ldr	r1, [pc, #256]	; (4034a0 <vTask1+0x1e4>)
  40339e:	4d41      	ldr	r5, [pc, #260]	; (4034a4 <vTask1+0x1e8>)
  4033a0:	47a8      	blx	r5
				sendDebugString(buf);
  4033a2:	a803      	add	r0, sp, #12
  4033a4:	4b35      	ldr	r3, [pc, #212]	; (40347c <vTask1+0x1c0>)
  4033a6:	4798      	blx	r3
  4033a8:	e05f      	b.n	40346a <vTask1+0x1ae>
				}
				
				
				
				else {
				pio_clear(LED0);	
  4033aa:	4650      	mov	r0, sl
  4033ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4033b0:	47d8      	blx	fp
				T++;
  4033b2:	f108 0801 	add.w	r8, r8, #1
  4033b6:	fa5f f888 	uxtb.w	r8, r8
				memset(Qbuf,0,20);
  4033ba:	2500      	movs	r5, #0
  4033bc:	9508      	str	r5, [sp, #32]
  4033be:	9509      	str	r5, [sp, #36]	; 0x24
  4033c0:	950a      	str	r5, [sp, #40]	; 0x28
  4033c2:	950b      	str	r5, [sp, #44]	; 0x2c
  4033c4:	950c      	str	r5, [sp, #48]	; 0x30
				Qbuf[0] = 0x26 | 1<<7 | 1<<6;
  4033c6:	23e6      	movs	r3, #230	; 0xe6
  4033c8:	f88d 3020 	strb.w	r3, [sp, #32]
				Qbuf[1] = 0x0C;
  4033cc:	230c      	movs	r3, #12
  4033ce:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
				Qbuf[2] = 0xF0 | (1<<(0x3&T));
  4033d2:	f008 0303 	and.w	r3, r8, #3
  4033d6:	2401      	movs	r4, #1
  4033d8:	fa04 f303 	lsl.w	r3, r4, r3
  4033dc:	f063 030f 	orn	r3, r3, #15
  4033e0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				Qbuf[3] = 0x00;
				Qbuf[4] = 0x00;
				Qbuf[5] = 0x00;
				qspi_write(QSPI,Qbuf,1);
  4033e4:	4e29      	ldr	r6, [pc, #164]	; (40348c <vTask1+0x1d0>)
  4033e6:	4630      	mov	r0, r6
  4033e8:	a908      	add	r1, sp, #32
  4033ea:	4622      	mov	r2, r4
  4033ec:	4f28      	ldr	r7, [pc, #160]	; (403490 <vTask1+0x1d4>)
  4033ee:	47b8      	blx	r7
				qspi_write(QSPI,Qbuf+1,1);
  4033f0:	4630      	mov	r0, r6
  4033f2:	f10d 0121 	add.w	r1, sp, #33	; 0x21
  4033f6:	4622      	mov	r2, r4
  4033f8:	47b8      	blx	r7
				qspi_write(QSPI,Qbuf+2,1);
  4033fa:	4630      	mov	r0, r6
  4033fc:	f10d 0122 	add.w	r1, sp, #34	; 0x22
  403400:	4622      	mov	r2, r4
  403402:	47b8      	blx	r7
				qspi_write(QSPI,Qbuf+3,1);
  403404:	4630      	mov	r0, r6
  403406:	f10d 0123 	add.w	r1, sp, #35	; 0x23
  40340a:	4622      	mov	r2, r4
  40340c:	47b8      	blx	r7
				qspi_write(QSPI,Qbuf+4,1);
  40340e:	4630      	mov	r0, r6
  403410:	a909      	add	r1, sp, #36	; 0x24
  403412:	4622      	mov	r2, r4
  403414:	47b8      	blx	r7
				qspi_write(QSPI,Qbuf+5,1);
  403416:	4630      	mov	r0, r6
  403418:	f10d 0125 	add.w	r1, sp, #37	; 0x25
  40341c:	4622      	mov	r2, r4
  40341e:	47b8      	blx	r7
				delay_ms(100);
  403420:	481c      	ldr	r0, [pc, #112]	; (403494 <vTask1+0x1d8>)
  403422:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403498 <vTask1+0x1dc>
  403426:	47c8      	blx	r9
				
				
				memset(Qbuf,0,20);
  403428:	9508      	str	r5, [sp, #32]
  40342a:	9509      	str	r5, [sp, #36]	; 0x24
  40342c:	950a      	str	r5, [sp, #40]	; 0x28
  40342e:	950b      	str	r5, [sp, #44]	; 0x2c
  403430:	950c      	str	r5, [sp, #48]	; 0x30
				Qbuf[0] = 0x00;
				delay_ms(25);
  403432:	481d      	ldr	r0, [pc, #116]	; (4034a8 <vTask1+0x1ec>)
  403434:	47c8      	blx	r9
				qspi_write(QSPI,Qbuf,1);
  403436:	4630      	mov	r0, r6
  403438:	a908      	add	r1, sp, #32
  40343a:	4622      	mov	r2, r4
  40343c:	47b8      	blx	r7
				qspi_read(QSPI,Qbuf,4);
  40343e:	4630      	mov	r0, r6
  403440:	a908      	add	r1, sp, #32
  403442:	2204      	movs	r2, #4
  403444:	4b15      	ldr	r3, [pc, #84]	; (40349c <vTask1+0x1e0>)
  403446:	4798      	blx	r3
				sprintf(buf,"recived Base: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
  403448:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
  40344c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
  403450:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
  403454:	9100      	str	r1, [sp, #0]
  403456:	f89d 1020 	ldrb.w	r1, [sp, #32]
  40345a:	9101      	str	r1, [sp, #4]
  40345c:	a803      	add	r0, sp, #12
  40345e:	4913      	ldr	r1, [pc, #76]	; (4034ac <vTask1+0x1f0>)
  403460:	4d10      	ldr	r5, [pc, #64]	; (4034a4 <vTask1+0x1e8>)
  403462:	47a8      	blx	r5
				sendDebugString(buf);
  403464:	a803      	add	r0, sp, #12
  403466:	4b05      	ldr	r3, [pc, #20]	; (40347c <vTask1+0x1c0>)
  403468:	4798      	blx	r3
				//sendDebugString("\n");
				tg = !tg;
				}
				
				vTaskDelayUntil(&xLastWakeTime,400);
  40346a:	a80d      	add	r0, sp, #52	; 0x34
  40346c:	f44f 71c8 	mov.w	r1, #400	; 0x190
  403470:	4b0f      	ldr	r3, [pc, #60]	; (4034b0 <vTask1+0x1f4>)
  403472:	4798      	blx	r3
	}
  403474:	e737      	b.n	4032e6 <vTask1+0x2a>
  403476:	bf00      	nop
  403478:	00409d20 	.word	0x00409d20
  40347c:	0040019d 	.word	0x0040019d
  403480:	004016c1 	.word	0x004016c1
  403484:	400e0e00 	.word	0x400e0e00
  403488:	004023f5 	.word	0x004023f5
  40348c:	4007c000 	.word	0x4007c000
  403490:	00400541 	.word	0x00400541
  403494:	004d2b25 	.word	0x004d2b25
  403498:	20400001 	.word	0x20400001
  40349c:	00400419 	.word	0x00400419
  4034a0:	00409d30 	.word	0x00409d30
  4034a4:	00404101 	.word	0x00404101
  4034a8:	00134aca 	.word	0x00134aca
  4034ac:	00409d54 	.word	0x00409d54
  4034b0:	00401919 	.word	0x00401919
  4034b4:	004023f9 	.word	0x004023f9

004034b8 <main>:
volatile uint16_t* SDRAMstart = (uint16_t*)BOARD_SDRAM_ADDR;

void vTask1 (void*);

int main (void)
{
  4034b8:	b570      	push	{r4, r5, r6, lr}
  4034ba:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	//*SYST_RVR = 2;
	//final i2C init
		
	
	board_init();
  4034bc:	4b0d      	ldr	r3, [pc, #52]	; (4034f4 <main+0x3c>)
  4034be:	4798      	blx	r3
	sendDebugString("BOARD INIT COMPLETE\n");
  4034c0:	480d      	ldr	r0, [pc, #52]	; (4034f8 <main+0x40>)
  4034c2:	4d0e      	ldr	r5, [pc, #56]	; (4034fc <main+0x44>)
  4034c4:	47a8      	blx	r5
	//DW1000_writeReg(0x26,DW1000_SUB,0x08,0xF0,1);
	//DW1000_writeReg(0x26,DW1000_SUB,0x0C,0xFF,1);
	xTaskCreate(vTask1,"TASK1",400,NULL,2,NULL);
  4034c6:	2302      	movs	r3, #2
  4034c8:	9300      	str	r3, [sp, #0]
  4034ca:	2400      	movs	r4, #0
  4034cc:	9401      	str	r4, [sp, #4]
  4034ce:	9402      	str	r4, [sp, #8]
  4034d0:	9403      	str	r4, [sp, #12]
  4034d2:	480b      	ldr	r0, [pc, #44]	; (403500 <main+0x48>)
  4034d4:	490b      	ldr	r1, [pc, #44]	; (403504 <main+0x4c>)
  4034d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
  4034da:	4623      	mov	r3, r4
  4034dc:	4e0a      	ldr	r6, [pc, #40]	; (403508 <main+0x50>)
  4034de:	47b0      	blx	r6
	sendDebugString("STARTING RTOS\n");
  4034e0:	480a      	ldr	r0, [pc, #40]	; (40350c <main+0x54>)
  4034e2:	47a8      	blx	r5
	vTaskStartScheduler();
  4034e4:	4b0a      	ldr	r3, [pc, #40]	; (403510 <main+0x58>)
  4034e6:	4798      	blx	r3
	sendDebugString("MEMORY ERROR\n");
  4034e8:	480a      	ldr	r0, [pc, #40]	; (403514 <main+0x5c>)
  4034ea:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  4034ec:	4620      	mov	r0, r4
  4034ee:	b004      	add	sp, #16
  4034f0:	bd70      	pop	{r4, r5, r6, pc}
  4034f2:	bf00      	nop
  4034f4:	00402891 	.word	0x00402891
  4034f8:	00409d78 	.word	0x00409d78
  4034fc:	0040019d 	.word	0x0040019d
  403500:	004032bd 	.word	0x004032bd
  403504:	00409d90 	.word	0x00409d90
  403508:	004013f9 	.word	0x004013f9
  40350c:	00409d98 	.word	0x00409d98
  403510:	00401621 	.word	0x00401621
  403514:	00409da8 	.word	0x00409da8

00403518 <__fpclassifyd>:
  403518:	fab0 f080 	clz	r0, r0
  40351c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  403520:	ea4f 1050 	mov.w	r0, r0, lsr #5
  403524:	d102      	bne.n	40352c <__fpclassifyd+0x14>
  403526:	b108      	cbz	r0, 40352c <__fpclassifyd+0x14>
  403528:	2002      	movs	r0, #2
  40352a:	4770      	bx	lr
  40352c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  403530:	4b08      	ldr	r3, [pc, #32]	; (403554 <__fpclassifyd+0x3c>)
  403532:	429a      	cmp	r2, r3
  403534:	d801      	bhi.n	40353a <__fpclassifyd+0x22>
  403536:	2004      	movs	r0, #4
  403538:	4770      	bx	lr
  40353a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40353e:	d201      	bcs.n	403544 <__fpclassifyd+0x2c>
  403540:	2003      	movs	r0, #3
  403542:	4770      	bx	lr
  403544:	4b04      	ldr	r3, [pc, #16]	; (403558 <__fpclassifyd+0x40>)
  403546:	4299      	cmp	r1, r3
  403548:	bf14      	ite	ne
  40354a:	2000      	movne	r0, #0
  40354c:	f000 0001 	andeq.w	r0, r0, #1
  403550:	4770      	bx	lr
  403552:	bf00      	nop
  403554:	7fdfffff 	.word	0x7fdfffff
  403558:	7ff00000 	.word	0x7ff00000

0040355c <__aeabi_drsub>:
  40355c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403560:	e002      	b.n	403568 <__adddf3>
  403562:	bf00      	nop

00403564 <__aeabi_dsub>:
  403564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403568 <__adddf3>:
  403568:	b530      	push	{r4, r5, lr}
  40356a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40356e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403572:	ea94 0f05 	teq	r4, r5
  403576:	bf08      	it	eq
  403578:	ea90 0f02 	teqeq	r0, r2
  40357c:	bf1f      	itttt	ne
  40357e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403582:	ea55 0c02 	orrsne.w	ip, r5, r2
  403586:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40358a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40358e:	f000 80e2 	beq.w	403756 <__adddf3+0x1ee>
  403592:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403596:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40359a:	bfb8      	it	lt
  40359c:	426d      	neglt	r5, r5
  40359e:	dd0c      	ble.n	4035ba <__adddf3+0x52>
  4035a0:	442c      	add	r4, r5
  4035a2:	ea80 0202 	eor.w	r2, r0, r2
  4035a6:	ea81 0303 	eor.w	r3, r1, r3
  4035aa:	ea82 0000 	eor.w	r0, r2, r0
  4035ae:	ea83 0101 	eor.w	r1, r3, r1
  4035b2:	ea80 0202 	eor.w	r2, r0, r2
  4035b6:	ea81 0303 	eor.w	r3, r1, r3
  4035ba:	2d36      	cmp	r5, #54	; 0x36
  4035bc:	bf88      	it	hi
  4035be:	bd30      	pophi	{r4, r5, pc}
  4035c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4035c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4035c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4035cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4035d0:	d002      	beq.n	4035d8 <__adddf3+0x70>
  4035d2:	4240      	negs	r0, r0
  4035d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4035d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4035dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4035e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4035e4:	d002      	beq.n	4035ec <__adddf3+0x84>
  4035e6:	4252      	negs	r2, r2
  4035e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4035ec:	ea94 0f05 	teq	r4, r5
  4035f0:	f000 80a7 	beq.w	403742 <__adddf3+0x1da>
  4035f4:	f1a4 0401 	sub.w	r4, r4, #1
  4035f8:	f1d5 0e20 	rsbs	lr, r5, #32
  4035fc:	db0d      	blt.n	40361a <__adddf3+0xb2>
  4035fe:	fa02 fc0e 	lsl.w	ip, r2, lr
  403602:	fa22 f205 	lsr.w	r2, r2, r5
  403606:	1880      	adds	r0, r0, r2
  403608:	f141 0100 	adc.w	r1, r1, #0
  40360c:	fa03 f20e 	lsl.w	r2, r3, lr
  403610:	1880      	adds	r0, r0, r2
  403612:	fa43 f305 	asr.w	r3, r3, r5
  403616:	4159      	adcs	r1, r3
  403618:	e00e      	b.n	403638 <__adddf3+0xd0>
  40361a:	f1a5 0520 	sub.w	r5, r5, #32
  40361e:	f10e 0e20 	add.w	lr, lr, #32
  403622:	2a01      	cmp	r2, #1
  403624:	fa03 fc0e 	lsl.w	ip, r3, lr
  403628:	bf28      	it	cs
  40362a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40362e:	fa43 f305 	asr.w	r3, r3, r5
  403632:	18c0      	adds	r0, r0, r3
  403634:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40363c:	d507      	bpl.n	40364e <__adddf3+0xe6>
  40363e:	f04f 0e00 	mov.w	lr, #0
  403642:	f1dc 0c00 	rsbs	ip, ip, #0
  403646:	eb7e 0000 	sbcs.w	r0, lr, r0
  40364a:	eb6e 0101 	sbc.w	r1, lr, r1
  40364e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403652:	d31b      	bcc.n	40368c <__adddf3+0x124>
  403654:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403658:	d30c      	bcc.n	403674 <__adddf3+0x10c>
  40365a:	0849      	lsrs	r1, r1, #1
  40365c:	ea5f 0030 	movs.w	r0, r0, rrx
  403660:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403664:	f104 0401 	add.w	r4, r4, #1
  403668:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40366c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403670:	f080 809a 	bcs.w	4037a8 <__adddf3+0x240>
  403674:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403678:	bf08      	it	eq
  40367a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40367e:	f150 0000 	adcs.w	r0, r0, #0
  403682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403686:	ea41 0105 	orr.w	r1, r1, r5
  40368a:	bd30      	pop	{r4, r5, pc}
  40368c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403690:	4140      	adcs	r0, r0
  403692:	eb41 0101 	adc.w	r1, r1, r1
  403696:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40369a:	f1a4 0401 	sub.w	r4, r4, #1
  40369e:	d1e9      	bne.n	403674 <__adddf3+0x10c>
  4036a0:	f091 0f00 	teq	r1, #0
  4036a4:	bf04      	itt	eq
  4036a6:	4601      	moveq	r1, r0
  4036a8:	2000      	moveq	r0, #0
  4036aa:	fab1 f381 	clz	r3, r1
  4036ae:	bf08      	it	eq
  4036b0:	3320      	addeq	r3, #32
  4036b2:	f1a3 030b 	sub.w	r3, r3, #11
  4036b6:	f1b3 0220 	subs.w	r2, r3, #32
  4036ba:	da0c      	bge.n	4036d6 <__adddf3+0x16e>
  4036bc:	320c      	adds	r2, #12
  4036be:	dd08      	ble.n	4036d2 <__adddf3+0x16a>
  4036c0:	f102 0c14 	add.w	ip, r2, #20
  4036c4:	f1c2 020c 	rsb	r2, r2, #12
  4036c8:	fa01 f00c 	lsl.w	r0, r1, ip
  4036cc:	fa21 f102 	lsr.w	r1, r1, r2
  4036d0:	e00c      	b.n	4036ec <__adddf3+0x184>
  4036d2:	f102 0214 	add.w	r2, r2, #20
  4036d6:	bfd8      	it	le
  4036d8:	f1c2 0c20 	rsble	ip, r2, #32
  4036dc:	fa01 f102 	lsl.w	r1, r1, r2
  4036e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4036e4:	bfdc      	itt	le
  4036e6:	ea41 010c 	orrle.w	r1, r1, ip
  4036ea:	4090      	lslle	r0, r2
  4036ec:	1ae4      	subs	r4, r4, r3
  4036ee:	bfa2      	ittt	ge
  4036f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4036f4:	4329      	orrge	r1, r5
  4036f6:	bd30      	popge	{r4, r5, pc}
  4036f8:	ea6f 0404 	mvn.w	r4, r4
  4036fc:	3c1f      	subs	r4, #31
  4036fe:	da1c      	bge.n	40373a <__adddf3+0x1d2>
  403700:	340c      	adds	r4, #12
  403702:	dc0e      	bgt.n	403722 <__adddf3+0x1ba>
  403704:	f104 0414 	add.w	r4, r4, #20
  403708:	f1c4 0220 	rsb	r2, r4, #32
  40370c:	fa20 f004 	lsr.w	r0, r0, r4
  403710:	fa01 f302 	lsl.w	r3, r1, r2
  403714:	ea40 0003 	orr.w	r0, r0, r3
  403718:	fa21 f304 	lsr.w	r3, r1, r4
  40371c:	ea45 0103 	orr.w	r1, r5, r3
  403720:	bd30      	pop	{r4, r5, pc}
  403722:	f1c4 040c 	rsb	r4, r4, #12
  403726:	f1c4 0220 	rsb	r2, r4, #32
  40372a:	fa20 f002 	lsr.w	r0, r0, r2
  40372e:	fa01 f304 	lsl.w	r3, r1, r4
  403732:	ea40 0003 	orr.w	r0, r0, r3
  403736:	4629      	mov	r1, r5
  403738:	bd30      	pop	{r4, r5, pc}
  40373a:	fa21 f004 	lsr.w	r0, r1, r4
  40373e:	4629      	mov	r1, r5
  403740:	bd30      	pop	{r4, r5, pc}
  403742:	f094 0f00 	teq	r4, #0
  403746:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40374a:	bf06      	itte	eq
  40374c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403750:	3401      	addeq	r4, #1
  403752:	3d01      	subne	r5, #1
  403754:	e74e      	b.n	4035f4 <__adddf3+0x8c>
  403756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40375a:	bf18      	it	ne
  40375c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403760:	d029      	beq.n	4037b6 <__adddf3+0x24e>
  403762:	ea94 0f05 	teq	r4, r5
  403766:	bf08      	it	eq
  403768:	ea90 0f02 	teqeq	r0, r2
  40376c:	d005      	beq.n	40377a <__adddf3+0x212>
  40376e:	ea54 0c00 	orrs.w	ip, r4, r0
  403772:	bf04      	itt	eq
  403774:	4619      	moveq	r1, r3
  403776:	4610      	moveq	r0, r2
  403778:	bd30      	pop	{r4, r5, pc}
  40377a:	ea91 0f03 	teq	r1, r3
  40377e:	bf1e      	ittt	ne
  403780:	2100      	movne	r1, #0
  403782:	2000      	movne	r0, #0
  403784:	bd30      	popne	{r4, r5, pc}
  403786:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40378a:	d105      	bne.n	403798 <__adddf3+0x230>
  40378c:	0040      	lsls	r0, r0, #1
  40378e:	4149      	adcs	r1, r1
  403790:	bf28      	it	cs
  403792:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403796:	bd30      	pop	{r4, r5, pc}
  403798:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40379c:	bf3c      	itt	cc
  40379e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4037a2:	bd30      	popcc	{r4, r5, pc}
  4037a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4037a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4037ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4037b0:	f04f 0000 	mov.w	r0, #0
  4037b4:	bd30      	pop	{r4, r5, pc}
  4037b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4037ba:	bf1a      	itte	ne
  4037bc:	4619      	movne	r1, r3
  4037be:	4610      	movne	r0, r2
  4037c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4037c4:	bf1c      	itt	ne
  4037c6:	460b      	movne	r3, r1
  4037c8:	4602      	movne	r2, r0
  4037ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4037ce:	bf06      	itte	eq
  4037d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4037d4:	ea91 0f03 	teqeq	r1, r3
  4037d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4037dc:	bd30      	pop	{r4, r5, pc}
  4037de:	bf00      	nop

004037e0 <__aeabi_ui2d>:
  4037e0:	f090 0f00 	teq	r0, #0
  4037e4:	bf04      	itt	eq
  4037e6:	2100      	moveq	r1, #0
  4037e8:	4770      	bxeq	lr
  4037ea:	b530      	push	{r4, r5, lr}
  4037ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4037f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4037f4:	f04f 0500 	mov.w	r5, #0
  4037f8:	f04f 0100 	mov.w	r1, #0
  4037fc:	e750      	b.n	4036a0 <__adddf3+0x138>
  4037fe:	bf00      	nop

00403800 <__aeabi_i2d>:
  403800:	f090 0f00 	teq	r0, #0
  403804:	bf04      	itt	eq
  403806:	2100      	moveq	r1, #0
  403808:	4770      	bxeq	lr
  40380a:	b530      	push	{r4, r5, lr}
  40380c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403810:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403814:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403818:	bf48      	it	mi
  40381a:	4240      	negmi	r0, r0
  40381c:	f04f 0100 	mov.w	r1, #0
  403820:	e73e      	b.n	4036a0 <__adddf3+0x138>
  403822:	bf00      	nop

00403824 <__aeabi_f2d>:
  403824:	0042      	lsls	r2, r0, #1
  403826:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40382a:	ea4f 0131 	mov.w	r1, r1, rrx
  40382e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403832:	bf1f      	itttt	ne
  403834:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403838:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40383c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403840:	4770      	bxne	lr
  403842:	f092 0f00 	teq	r2, #0
  403846:	bf14      	ite	ne
  403848:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40384c:	4770      	bxeq	lr
  40384e:	b530      	push	{r4, r5, lr}
  403850:	f44f 7460 	mov.w	r4, #896	; 0x380
  403854:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40385c:	e720      	b.n	4036a0 <__adddf3+0x138>
  40385e:	bf00      	nop

00403860 <__aeabi_ul2d>:
  403860:	ea50 0201 	orrs.w	r2, r0, r1
  403864:	bf08      	it	eq
  403866:	4770      	bxeq	lr
  403868:	b530      	push	{r4, r5, lr}
  40386a:	f04f 0500 	mov.w	r5, #0
  40386e:	e00a      	b.n	403886 <__aeabi_l2d+0x16>

00403870 <__aeabi_l2d>:
  403870:	ea50 0201 	orrs.w	r2, r0, r1
  403874:	bf08      	it	eq
  403876:	4770      	bxeq	lr
  403878:	b530      	push	{r4, r5, lr}
  40387a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40387e:	d502      	bpl.n	403886 <__aeabi_l2d+0x16>
  403880:	4240      	negs	r0, r0
  403882:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403886:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40388a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40388e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403892:	f43f aedc 	beq.w	40364e <__adddf3+0xe6>
  403896:	f04f 0203 	mov.w	r2, #3
  40389a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40389e:	bf18      	it	ne
  4038a0:	3203      	addne	r2, #3
  4038a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4038a6:	bf18      	it	ne
  4038a8:	3203      	addne	r2, #3
  4038aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4038ae:	f1c2 0320 	rsb	r3, r2, #32
  4038b2:	fa00 fc03 	lsl.w	ip, r0, r3
  4038b6:	fa20 f002 	lsr.w	r0, r0, r2
  4038ba:	fa01 fe03 	lsl.w	lr, r1, r3
  4038be:	ea40 000e 	orr.w	r0, r0, lr
  4038c2:	fa21 f102 	lsr.w	r1, r1, r2
  4038c6:	4414      	add	r4, r2
  4038c8:	e6c1      	b.n	40364e <__adddf3+0xe6>
  4038ca:	bf00      	nop

004038cc <__aeabi_dmul>:
  4038cc:	b570      	push	{r4, r5, r6, lr}
  4038ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4038d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4038d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4038da:	bf1d      	ittte	ne
  4038dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4038e0:	ea94 0f0c 	teqne	r4, ip
  4038e4:	ea95 0f0c 	teqne	r5, ip
  4038e8:	f000 f8de 	bleq	403aa8 <__aeabi_dmul+0x1dc>
  4038ec:	442c      	add	r4, r5
  4038ee:	ea81 0603 	eor.w	r6, r1, r3
  4038f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4038f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4038fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4038fe:	bf18      	it	ne
  403900:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40390c:	d038      	beq.n	403980 <__aeabi_dmul+0xb4>
  40390e:	fba0 ce02 	umull	ip, lr, r0, r2
  403912:	f04f 0500 	mov.w	r5, #0
  403916:	fbe1 e502 	umlal	lr, r5, r1, r2
  40391a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40391e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403922:	f04f 0600 	mov.w	r6, #0
  403926:	fbe1 5603 	umlal	r5, r6, r1, r3
  40392a:	f09c 0f00 	teq	ip, #0
  40392e:	bf18      	it	ne
  403930:	f04e 0e01 	orrne.w	lr, lr, #1
  403934:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403938:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40393c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403940:	d204      	bcs.n	40394c <__aeabi_dmul+0x80>
  403942:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403946:	416d      	adcs	r5, r5
  403948:	eb46 0606 	adc.w	r6, r6, r6
  40394c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403950:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403954:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403958:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40395c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403960:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403964:	bf88      	it	hi
  403966:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40396a:	d81e      	bhi.n	4039aa <__aeabi_dmul+0xde>
  40396c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403970:	bf08      	it	eq
  403972:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403976:	f150 0000 	adcs.w	r0, r0, #0
  40397a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40397e:	bd70      	pop	{r4, r5, r6, pc}
  403980:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403984:	ea46 0101 	orr.w	r1, r6, r1
  403988:	ea40 0002 	orr.w	r0, r0, r2
  40398c:	ea81 0103 	eor.w	r1, r1, r3
  403990:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403994:	bfc2      	ittt	gt
  403996:	ebd4 050c 	rsbsgt	r5, r4, ip
  40399a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40399e:	bd70      	popgt	{r4, r5, r6, pc}
  4039a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4039a4:	f04f 0e00 	mov.w	lr, #0
  4039a8:	3c01      	subs	r4, #1
  4039aa:	f300 80ab 	bgt.w	403b04 <__aeabi_dmul+0x238>
  4039ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4039b2:	bfde      	ittt	le
  4039b4:	2000      	movle	r0, #0
  4039b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4039ba:	bd70      	pople	{r4, r5, r6, pc}
  4039bc:	f1c4 0400 	rsb	r4, r4, #0
  4039c0:	3c20      	subs	r4, #32
  4039c2:	da35      	bge.n	403a30 <__aeabi_dmul+0x164>
  4039c4:	340c      	adds	r4, #12
  4039c6:	dc1b      	bgt.n	403a00 <__aeabi_dmul+0x134>
  4039c8:	f104 0414 	add.w	r4, r4, #20
  4039cc:	f1c4 0520 	rsb	r5, r4, #32
  4039d0:	fa00 f305 	lsl.w	r3, r0, r5
  4039d4:	fa20 f004 	lsr.w	r0, r0, r4
  4039d8:	fa01 f205 	lsl.w	r2, r1, r5
  4039dc:	ea40 0002 	orr.w	r0, r0, r2
  4039e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4039e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4039e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4039ec:	fa21 f604 	lsr.w	r6, r1, r4
  4039f0:	eb42 0106 	adc.w	r1, r2, r6
  4039f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4039f8:	bf08      	it	eq
  4039fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4039fe:	bd70      	pop	{r4, r5, r6, pc}
  403a00:	f1c4 040c 	rsb	r4, r4, #12
  403a04:	f1c4 0520 	rsb	r5, r4, #32
  403a08:	fa00 f304 	lsl.w	r3, r0, r4
  403a0c:	fa20 f005 	lsr.w	r0, r0, r5
  403a10:	fa01 f204 	lsl.w	r2, r1, r4
  403a14:	ea40 0002 	orr.w	r0, r0, r2
  403a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403a1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403a20:	f141 0100 	adc.w	r1, r1, #0
  403a24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403a28:	bf08      	it	eq
  403a2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403a2e:	bd70      	pop	{r4, r5, r6, pc}
  403a30:	f1c4 0520 	rsb	r5, r4, #32
  403a34:	fa00 f205 	lsl.w	r2, r0, r5
  403a38:	ea4e 0e02 	orr.w	lr, lr, r2
  403a3c:	fa20 f304 	lsr.w	r3, r0, r4
  403a40:	fa01 f205 	lsl.w	r2, r1, r5
  403a44:	ea43 0302 	orr.w	r3, r3, r2
  403a48:	fa21 f004 	lsr.w	r0, r1, r4
  403a4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403a50:	fa21 f204 	lsr.w	r2, r1, r4
  403a54:	ea20 0002 	bic.w	r0, r0, r2
  403a58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403a60:	bf08      	it	eq
  403a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403a66:	bd70      	pop	{r4, r5, r6, pc}
  403a68:	f094 0f00 	teq	r4, #0
  403a6c:	d10f      	bne.n	403a8e <__aeabi_dmul+0x1c2>
  403a6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403a72:	0040      	lsls	r0, r0, #1
  403a74:	eb41 0101 	adc.w	r1, r1, r1
  403a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a7c:	bf08      	it	eq
  403a7e:	3c01      	subeq	r4, #1
  403a80:	d0f7      	beq.n	403a72 <__aeabi_dmul+0x1a6>
  403a82:	ea41 0106 	orr.w	r1, r1, r6
  403a86:	f095 0f00 	teq	r5, #0
  403a8a:	bf18      	it	ne
  403a8c:	4770      	bxne	lr
  403a8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403a92:	0052      	lsls	r2, r2, #1
  403a94:	eb43 0303 	adc.w	r3, r3, r3
  403a98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403a9c:	bf08      	it	eq
  403a9e:	3d01      	subeq	r5, #1
  403aa0:	d0f7      	beq.n	403a92 <__aeabi_dmul+0x1c6>
  403aa2:	ea43 0306 	orr.w	r3, r3, r6
  403aa6:	4770      	bx	lr
  403aa8:	ea94 0f0c 	teq	r4, ip
  403aac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403ab0:	bf18      	it	ne
  403ab2:	ea95 0f0c 	teqne	r5, ip
  403ab6:	d00c      	beq.n	403ad2 <__aeabi_dmul+0x206>
  403ab8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403abc:	bf18      	it	ne
  403abe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403ac2:	d1d1      	bne.n	403a68 <__aeabi_dmul+0x19c>
  403ac4:	ea81 0103 	eor.w	r1, r1, r3
  403ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403acc:	f04f 0000 	mov.w	r0, #0
  403ad0:	bd70      	pop	{r4, r5, r6, pc}
  403ad2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ad6:	bf06      	itte	eq
  403ad8:	4610      	moveq	r0, r2
  403ada:	4619      	moveq	r1, r3
  403adc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403ae0:	d019      	beq.n	403b16 <__aeabi_dmul+0x24a>
  403ae2:	ea94 0f0c 	teq	r4, ip
  403ae6:	d102      	bne.n	403aee <__aeabi_dmul+0x222>
  403ae8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403aec:	d113      	bne.n	403b16 <__aeabi_dmul+0x24a>
  403aee:	ea95 0f0c 	teq	r5, ip
  403af2:	d105      	bne.n	403b00 <__aeabi_dmul+0x234>
  403af4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403af8:	bf1c      	itt	ne
  403afa:	4610      	movne	r0, r2
  403afc:	4619      	movne	r1, r3
  403afe:	d10a      	bne.n	403b16 <__aeabi_dmul+0x24a>
  403b00:	ea81 0103 	eor.w	r1, r1, r3
  403b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403b08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403b0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403b10:	f04f 0000 	mov.w	r0, #0
  403b14:	bd70      	pop	{r4, r5, r6, pc}
  403b16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403b1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403b1e:	bd70      	pop	{r4, r5, r6, pc}

00403b20 <__aeabi_ddiv>:
  403b20:	b570      	push	{r4, r5, r6, lr}
  403b22:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403b26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403b2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403b2e:	bf1d      	ittte	ne
  403b30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403b34:	ea94 0f0c 	teqne	r4, ip
  403b38:	ea95 0f0c 	teqne	r5, ip
  403b3c:	f000 f8a7 	bleq	403c8e <__aeabi_ddiv+0x16e>
  403b40:	eba4 0405 	sub.w	r4, r4, r5
  403b44:	ea81 0e03 	eor.w	lr, r1, r3
  403b48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403b4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403b50:	f000 8088 	beq.w	403c64 <__aeabi_ddiv+0x144>
  403b54:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403b58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403b5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403b60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403b64:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403b68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403b6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403b70:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403b74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403b78:	429d      	cmp	r5, r3
  403b7a:	bf08      	it	eq
  403b7c:	4296      	cmpeq	r6, r2
  403b7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403b82:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403b86:	d202      	bcs.n	403b8e <__aeabi_ddiv+0x6e>
  403b88:	085b      	lsrs	r3, r3, #1
  403b8a:	ea4f 0232 	mov.w	r2, r2, rrx
  403b8e:	1ab6      	subs	r6, r6, r2
  403b90:	eb65 0503 	sbc.w	r5, r5, r3
  403b94:	085b      	lsrs	r3, r3, #1
  403b96:	ea4f 0232 	mov.w	r2, r2, rrx
  403b9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403b9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403ba2:	ebb6 0e02 	subs.w	lr, r6, r2
  403ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
  403baa:	bf22      	ittt	cs
  403bac:	1ab6      	subcs	r6, r6, r2
  403bae:	4675      	movcs	r5, lr
  403bb0:	ea40 000c 	orrcs.w	r0, r0, ip
  403bb4:	085b      	lsrs	r3, r3, #1
  403bb6:	ea4f 0232 	mov.w	r2, r2, rrx
  403bba:	ebb6 0e02 	subs.w	lr, r6, r2
  403bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403bc2:	bf22      	ittt	cs
  403bc4:	1ab6      	subcs	r6, r6, r2
  403bc6:	4675      	movcs	r5, lr
  403bc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403bcc:	085b      	lsrs	r3, r3, #1
  403bce:	ea4f 0232 	mov.w	r2, r2, rrx
  403bd2:	ebb6 0e02 	subs.w	lr, r6, r2
  403bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
  403bda:	bf22      	ittt	cs
  403bdc:	1ab6      	subcs	r6, r6, r2
  403bde:	4675      	movcs	r5, lr
  403be0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403be4:	085b      	lsrs	r3, r3, #1
  403be6:	ea4f 0232 	mov.w	r2, r2, rrx
  403bea:	ebb6 0e02 	subs.w	lr, r6, r2
  403bee:	eb75 0e03 	sbcs.w	lr, r5, r3
  403bf2:	bf22      	ittt	cs
  403bf4:	1ab6      	subcs	r6, r6, r2
  403bf6:	4675      	movcs	r5, lr
  403bf8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403bfc:	ea55 0e06 	orrs.w	lr, r5, r6
  403c00:	d018      	beq.n	403c34 <__aeabi_ddiv+0x114>
  403c02:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403c06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403c0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403c0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403c12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403c16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403c1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403c1e:	d1c0      	bne.n	403ba2 <__aeabi_ddiv+0x82>
  403c20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403c24:	d10b      	bne.n	403c3e <__aeabi_ddiv+0x11e>
  403c26:	ea41 0100 	orr.w	r1, r1, r0
  403c2a:	f04f 0000 	mov.w	r0, #0
  403c2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403c32:	e7b6      	b.n	403ba2 <__aeabi_ddiv+0x82>
  403c34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403c38:	bf04      	itt	eq
  403c3a:	4301      	orreq	r1, r0
  403c3c:	2000      	moveq	r0, #0
  403c3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403c42:	bf88      	it	hi
  403c44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403c48:	f63f aeaf 	bhi.w	4039aa <__aeabi_dmul+0xde>
  403c4c:	ebb5 0c03 	subs.w	ip, r5, r3
  403c50:	bf04      	itt	eq
  403c52:	ebb6 0c02 	subseq.w	ip, r6, r2
  403c56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403c5a:	f150 0000 	adcs.w	r0, r0, #0
  403c5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403c62:	bd70      	pop	{r4, r5, r6, pc}
  403c64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403c68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403c6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403c70:	bfc2      	ittt	gt
  403c72:	ebd4 050c 	rsbsgt	r5, r4, ip
  403c76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403c7a:	bd70      	popgt	{r4, r5, r6, pc}
  403c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403c80:	f04f 0e00 	mov.w	lr, #0
  403c84:	3c01      	subs	r4, #1
  403c86:	e690      	b.n	4039aa <__aeabi_dmul+0xde>
  403c88:	ea45 0e06 	orr.w	lr, r5, r6
  403c8c:	e68d      	b.n	4039aa <__aeabi_dmul+0xde>
  403c8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403c92:	ea94 0f0c 	teq	r4, ip
  403c96:	bf08      	it	eq
  403c98:	ea95 0f0c 	teqeq	r5, ip
  403c9c:	f43f af3b 	beq.w	403b16 <__aeabi_dmul+0x24a>
  403ca0:	ea94 0f0c 	teq	r4, ip
  403ca4:	d10a      	bne.n	403cbc <__aeabi_ddiv+0x19c>
  403ca6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403caa:	f47f af34 	bne.w	403b16 <__aeabi_dmul+0x24a>
  403cae:	ea95 0f0c 	teq	r5, ip
  403cb2:	f47f af25 	bne.w	403b00 <__aeabi_dmul+0x234>
  403cb6:	4610      	mov	r0, r2
  403cb8:	4619      	mov	r1, r3
  403cba:	e72c      	b.n	403b16 <__aeabi_dmul+0x24a>
  403cbc:	ea95 0f0c 	teq	r5, ip
  403cc0:	d106      	bne.n	403cd0 <__aeabi_ddiv+0x1b0>
  403cc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403cc6:	f43f aefd 	beq.w	403ac4 <__aeabi_dmul+0x1f8>
  403cca:	4610      	mov	r0, r2
  403ccc:	4619      	mov	r1, r3
  403cce:	e722      	b.n	403b16 <__aeabi_dmul+0x24a>
  403cd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403cd4:	bf18      	it	ne
  403cd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403cda:	f47f aec5 	bne.w	403a68 <__aeabi_dmul+0x19c>
  403cde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403ce2:	f47f af0d 	bne.w	403b00 <__aeabi_dmul+0x234>
  403ce6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403cea:	f47f aeeb 	bne.w	403ac4 <__aeabi_dmul+0x1f8>
  403cee:	e712      	b.n	403b16 <__aeabi_dmul+0x24a>

00403cf0 <__gedf2>:
  403cf0:	f04f 3cff 	mov.w	ip, #4294967295
  403cf4:	e006      	b.n	403d04 <__cmpdf2+0x4>
  403cf6:	bf00      	nop

00403cf8 <__ledf2>:
  403cf8:	f04f 0c01 	mov.w	ip, #1
  403cfc:	e002      	b.n	403d04 <__cmpdf2+0x4>
  403cfe:	bf00      	nop

00403d00 <__cmpdf2>:
  403d00:	f04f 0c01 	mov.w	ip, #1
  403d04:	f84d cd04 	str.w	ip, [sp, #-4]!
  403d08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403d14:	bf18      	it	ne
  403d16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403d1a:	d01b      	beq.n	403d54 <__cmpdf2+0x54>
  403d1c:	b001      	add	sp, #4
  403d1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403d22:	bf0c      	ite	eq
  403d24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403d28:	ea91 0f03 	teqne	r1, r3
  403d2c:	bf02      	ittt	eq
  403d2e:	ea90 0f02 	teqeq	r0, r2
  403d32:	2000      	moveq	r0, #0
  403d34:	4770      	bxeq	lr
  403d36:	f110 0f00 	cmn.w	r0, #0
  403d3a:	ea91 0f03 	teq	r1, r3
  403d3e:	bf58      	it	pl
  403d40:	4299      	cmppl	r1, r3
  403d42:	bf08      	it	eq
  403d44:	4290      	cmpeq	r0, r2
  403d46:	bf2c      	ite	cs
  403d48:	17d8      	asrcs	r0, r3, #31
  403d4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403d4e:	f040 0001 	orr.w	r0, r0, #1
  403d52:	4770      	bx	lr
  403d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403d5c:	d102      	bne.n	403d64 <__cmpdf2+0x64>
  403d5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403d62:	d107      	bne.n	403d74 <__cmpdf2+0x74>
  403d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403d6c:	d1d6      	bne.n	403d1c <__cmpdf2+0x1c>
  403d6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403d72:	d0d3      	beq.n	403d1c <__cmpdf2+0x1c>
  403d74:	f85d 0b04 	ldr.w	r0, [sp], #4
  403d78:	4770      	bx	lr
  403d7a:	bf00      	nop

00403d7c <__aeabi_cdrcmple>:
  403d7c:	4684      	mov	ip, r0
  403d7e:	4610      	mov	r0, r2
  403d80:	4662      	mov	r2, ip
  403d82:	468c      	mov	ip, r1
  403d84:	4619      	mov	r1, r3
  403d86:	4663      	mov	r3, ip
  403d88:	e000      	b.n	403d8c <__aeabi_cdcmpeq>
  403d8a:	bf00      	nop

00403d8c <__aeabi_cdcmpeq>:
  403d8c:	b501      	push	{r0, lr}
  403d8e:	f7ff ffb7 	bl	403d00 <__cmpdf2>
  403d92:	2800      	cmp	r0, #0
  403d94:	bf48      	it	mi
  403d96:	f110 0f00 	cmnmi.w	r0, #0
  403d9a:	bd01      	pop	{r0, pc}

00403d9c <__aeabi_dcmpeq>:
  403d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403da0:	f7ff fff4 	bl	403d8c <__aeabi_cdcmpeq>
  403da4:	bf0c      	ite	eq
  403da6:	2001      	moveq	r0, #1
  403da8:	2000      	movne	r0, #0
  403daa:	f85d fb08 	ldr.w	pc, [sp], #8
  403dae:	bf00      	nop

00403db0 <__aeabi_dcmplt>:
  403db0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403db4:	f7ff ffea 	bl	403d8c <__aeabi_cdcmpeq>
  403db8:	bf34      	ite	cc
  403dba:	2001      	movcc	r0, #1
  403dbc:	2000      	movcs	r0, #0
  403dbe:	f85d fb08 	ldr.w	pc, [sp], #8
  403dc2:	bf00      	nop

00403dc4 <__aeabi_dcmple>:
  403dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  403dc8:	f7ff ffe0 	bl	403d8c <__aeabi_cdcmpeq>
  403dcc:	bf94      	ite	ls
  403dce:	2001      	movls	r0, #1
  403dd0:	2000      	movhi	r0, #0
  403dd2:	f85d fb08 	ldr.w	pc, [sp], #8
  403dd6:	bf00      	nop

00403dd8 <__aeabi_dcmpge>:
  403dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ddc:	f7ff ffce 	bl	403d7c <__aeabi_cdrcmple>
  403de0:	bf94      	ite	ls
  403de2:	2001      	movls	r0, #1
  403de4:	2000      	movhi	r0, #0
  403de6:	f85d fb08 	ldr.w	pc, [sp], #8
  403dea:	bf00      	nop

00403dec <__aeabi_dcmpgt>:
  403dec:	f84d ed08 	str.w	lr, [sp, #-8]!
  403df0:	f7ff ffc4 	bl	403d7c <__aeabi_cdrcmple>
  403df4:	bf34      	ite	cc
  403df6:	2001      	movcc	r0, #1
  403df8:	2000      	movcs	r0, #0
  403dfa:	f85d fb08 	ldr.w	pc, [sp], #8
  403dfe:	bf00      	nop

00403e00 <__aeabi_d2iz>:
  403e00:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403e04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403e08:	d215      	bcs.n	403e36 <__aeabi_d2iz+0x36>
  403e0a:	d511      	bpl.n	403e30 <__aeabi_d2iz+0x30>
  403e0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403e10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403e14:	d912      	bls.n	403e3c <__aeabi_d2iz+0x3c>
  403e16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403e1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403e22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403e26:	fa23 f002 	lsr.w	r0, r3, r2
  403e2a:	bf18      	it	ne
  403e2c:	4240      	negne	r0, r0
  403e2e:	4770      	bx	lr
  403e30:	f04f 0000 	mov.w	r0, #0
  403e34:	4770      	bx	lr
  403e36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403e3a:	d105      	bne.n	403e48 <__aeabi_d2iz+0x48>
  403e3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403e40:	bf08      	it	eq
  403e42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403e46:	4770      	bx	lr
  403e48:	f04f 0000 	mov.w	r0, #0
  403e4c:	4770      	bx	lr
  403e4e:	bf00      	nop

00403e50 <__assert_func>:
  403e50:	4c0a      	ldr	r4, [pc, #40]	; (403e7c <__assert_func+0x2c>)
  403e52:	4605      	mov	r5, r0
  403e54:	6820      	ldr	r0, [r4, #0]
  403e56:	b500      	push	{lr}
  403e58:	68c0      	ldr	r0, [r0, #12]
  403e5a:	b085      	sub	sp, #20
  403e5c:	b15a      	cbz	r2, 403e76 <__assert_func+0x26>
  403e5e:	4614      	mov	r4, r2
  403e60:	4a07      	ldr	r2, [pc, #28]	; (403e80 <__assert_func+0x30>)
  403e62:	9402      	str	r4, [sp, #8]
  403e64:	e88d 0006 	stmia.w	sp, {r1, r2}
  403e68:	461a      	mov	r2, r3
  403e6a:	4906      	ldr	r1, [pc, #24]	; (403e84 <__assert_func+0x34>)
  403e6c:	462b      	mov	r3, r5
  403e6e:	f000 f80d 	bl	403e8c <fiprintf>
  403e72:	f002 fb03 	bl	40647c <abort>
  403e76:	4a04      	ldr	r2, [pc, #16]	; (403e88 <__assert_func+0x38>)
  403e78:	4614      	mov	r4, r2
  403e7a:	e7f2      	b.n	403e62 <__assert_func+0x12>
  403e7c:	20400440 	.word	0x20400440
  403e80:	00409db8 	.word	0x00409db8
  403e84:	00409dc8 	.word	0x00409dc8
  403e88:	00409cb8 	.word	0x00409cb8

00403e8c <fiprintf>:
  403e8c:	b40e      	push	{r1, r2, r3}
  403e8e:	b510      	push	{r4, lr}
  403e90:	b083      	sub	sp, #12
  403e92:	4b07      	ldr	r3, [pc, #28]	; (403eb0 <fiprintf+0x24>)
  403e94:	4601      	mov	r1, r0
  403e96:	ac05      	add	r4, sp, #20
  403e98:	6818      	ldr	r0, [r3, #0]
  403e9a:	f854 2b04 	ldr.w	r2, [r4], #4
  403e9e:	4623      	mov	r3, r4
  403ea0:	9401      	str	r4, [sp, #4]
  403ea2:	f001 fc45 	bl	405730 <_vfiprintf_r>
  403ea6:	b003      	add	sp, #12
  403ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403eac:	b003      	add	sp, #12
  403eae:	4770      	bx	lr
  403eb0:	20400440 	.word	0x20400440

00403eb4 <__libc_init_array>:
  403eb4:	b570      	push	{r4, r5, r6, lr}
  403eb6:	4e0f      	ldr	r6, [pc, #60]	; (403ef4 <__libc_init_array+0x40>)
  403eb8:	4d0f      	ldr	r5, [pc, #60]	; (403ef8 <__libc_init_array+0x44>)
  403eba:	1b76      	subs	r6, r6, r5
  403ebc:	10b6      	asrs	r6, r6, #2
  403ebe:	bf18      	it	ne
  403ec0:	2400      	movne	r4, #0
  403ec2:	d005      	beq.n	403ed0 <__libc_init_array+0x1c>
  403ec4:	3401      	adds	r4, #1
  403ec6:	f855 3b04 	ldr.w	r3, [r5], #4
  403eca:	4798      	blx	r3
  403ecc:	42a6      	cmp	r6, r4
  403ece:	d1f9      	bne.n	403ec4 <__libc_init_array+0x10>
  403ed0:	4e0a      	ldr	r6, [pc, #40]	; (403efc <__libc_init_array+0x48>)
  403ed2:	f006 f865 	bl	409fa0 <_init>
  403ed6:	4d0a      	ldr	r5, [pc, #40]	; (403f00 <__libc_init_array+0x4c>)
  403ed8:	1b76      	subs	r6, r6, r5
  403eda:	10b6      	asrs	r6, r6, #2
  403edc:	bf18      	it	ne
  403ede:	2400      	movne	r4, #0
  403ee0:	d006      	beq.n	403ef0 <__libc_init_array+0x3c>
  403ee2:	3401      	adds	r4, #1
  403ee4:	f855 3b04 	ldr.w	r3, [r5], #4
  403ee8:	4798      	blx	r3
  403eea:	42a6      	cmp	r6, r4
  403eec:	d1f9      	bne.n	403ee2 <__libc_init_array+0x2e>
  403eee:	bd70      	pop	{r4, r5, r6, pc}
  403ef0:	bd70      	pop	{r4, r5, r6, pc}
  403ef2:	bf00      	nop
  403ef4:	00409fac 	.word	0x00409fac
  403ef8:	00409fac 	.word	0x00409fac
  403efc:	00409fb4 	.word	0x00409fb4
  403f00:	00409fac 	.word	0x00409fac

00403f04 <iprintf>:
  403f04:	b40f      	push	{r0, r1, r2, r3}
  403f06:	b510      	push	{r4, lr}
  403f08:	b082      	sub	sp, #8
  403f0a:	4b07      	ldr	r3, [pc, #28]	; (403f28 <iprintf+0x24>)
  403f0c:	ac04      	add	r4, sp, #16
  403f0e:	6818      	ldr	r0, [r3, #0]
  403f10:	f854 2b04 	ldr.w	r2, [r4], #4
  403f14:	6881      	ldr	r1, [r0, #8]
  403f16:	4623      	mov	r3, r4
  403f18:	9401      	str	r4, [sp, #4]
  403f1a:	f001 fc09 	bl	405730 <_vfiprintf_r>
  403f1e:	b002      	add	sp, #8
  403f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403f24:	b004      	add	sp, #16
  403f26:	4770      	bx	lr
  403f28:	20400440 	.word	0x20400440

00403f2c <memcpy>:
  403f2c:	4684      	mov	ip, r0
  403f2e:	ea41 0300 	orr.w	r3, r1, r0
  403f32:	f013 0303 	ands.w	r3, r3, #3
  403f36:	d16d      	bne.n	404014 <memcpy+0xe8>
  403f38:	3a40      	subs	r2, #64	; 0x40
  403f3a:	d341      	bcc.n	403fc0 <memcpy+0x94>
  403f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f40:	f840 3b04 	str.w	r3, [r0], #4
  403f44:	f851 3b04 	ldr.w	r3, [r1], #4
  403f48:	f840 3b04 	str.w	r3, [r0], #4
  403f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f50:	f840 3b04 	str.w	r3, [r0], #4
  403f54:	f851 3b04 	ldr.w	r3, [r1], #4
  403f58:	f840 3b04 	str.w	r3, [r0], #4
  403f5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f60:	f840 3b04 	str.w	r3, [r0], #4
  403f64:	f851 3b04 	ldr.w	r3, [r1], #4
  403f68:	f840 3b04 	str.w	r3, [r0], #4
  403f6c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f70:	f840 3b04 	str.w	r3, [r0], #4
  403f74:	f851 3b04 	ldr.w	r3, [r1], #4
  403f78:	f840 3b04 	str.w	r3, [r0], #4
  403f7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f80:	f840 3b04 	str.w	r3, [r0], #4
  403f84:	f851 3b04 	ldr.w	r3, [r1], #4
  403f88:	f840 3b04 	str.w	r3, [r0], #4
  403f8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f90:	f840 3b04 	str.w	r3, [r0], #4
  403f94:	f851 3b04 	ldr.w	r3, [r1], #4
  403f98:	f840 3b04 	str.w	r3, [r0], #4
  403f9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa0:	f840 3b04 	str.w	r3, [r0], #4
  403fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa8:	f840 3b04 	str.w	r3, [r0], #4
  403fac:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb0:	f840 3b04 	str.w	r3, [r0], #4
  403fb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb8:	f840 3b04 	str.w	r3, [r0], #4
  403fbc:	3a40      	subs	r2, #64	; 0x40
  403fbe:	d2bd      	bcs.n	403f3c <memcpy+0x10>
  403fc0:	3230      	adds	r2, #48	; 0x30
  403fc2:	d311      	bcc.n	403fe8 <memcpy+0xbc>
  403fc4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc8:	f840 3b04 	str.w	r3, [r0], #4
  403fcc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd0:	f840 3b04 	str.w	r3, [r0], #4
  403fd4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd8:	f840 3b04 	str.w	r3, [r0], #4
  403fdc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe0:	f840 3b04 	str.w	r3, [r0], #4
  403fe4:	3a10      	subs	r2, #16
  403fe6:	d2ed      	bcs.n	403fc4 <memcpy+0x98>
  403fe8:	320c      	adds	r2, #12
  403fea:	d305      	bcc.n	403ff8 <memcpy+0xcc>
  403fec:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff0:	f840 3b04 	str.w	r3, [r0], #4
  403ff4:	3a04      	subs	r2, #4
  403ff6:	d2f9      	bcs.n	403fec <memcpy+0xc0>
  403ff8:	3204      	adds	r2, #4
  403ffa:	d008      	beq.n	40400e <memcpy+0xe2>
  403ffc:	07d2      	lsls	r2, r2, #31
  403ffe:	bf1c      	itt	ne
  404000:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404004:	f800 3b01 	strbne.w	r3, [r0], #1
  404008:	d301      	bcc.n	40400e <memcpy+0xe2>
  40400a:	880b      	ldrh	r3, [r1, #0]
  40400c:	8003      	strh	r3, [r0, #0]
  40400e:	4660      	mov	r0, ip
  404010:	4770      	bx	lr
  404012:	bf00      	nop
  404014:	2a08      	cmp	r2, #8
  404016:	d313      	bcc.n	404040 <memcpy+0x114>
  404018:	078b      	lsls	r3, r1, #30
  40401a:	d08d      	beq.n	403f38 <memcpy+0xc>
  40401c:	f010 0303 	ands.w	r3, r0, #3
  404020:	d08a      	beq.n	403f38 <memcpy+0xc>
  404022:	f1c3 0304 	rsb	r3, r3, #4
  404026:	1ad2      	subs	r2, r2, r3
  404028:	07db      	lsls	r3, r3, #31
  40402a:	bf1c      	itt	ne
  40402c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404030:	f800 3b01 	strbne.w	r3, [r0], #1
  404034:	d380      	bcc.n	403f38 <memcpy+0xc>
  404036:	f831 3b02 	ldrh.w	r3, [r1], #2
  40403a:	f820 3b02 	strh.w	r3, [r0], #2
  40403e:	e77b      	b.n	403f38 <memcpy+0xc>
  404040:	3a04      	subs	r2, #4
  404042:	d3d9      	bcc.n	403ff8 <memcpy+0xcc>
  404044:	3a01      	subs	r2, #1
  404046:	f811 3b01 	ldrb.w	r3, [r1], #1
  40404a:	f800 3b01 	strb.w	r3, [r0], #1
  40404e:	d2f9      	bcs.n	404044 <memcpy+0x118>
  404050:	780b      	ldrb	r3, [r1, #0]
  404052:	7003      	strb	r3, [r0, #0]
  404054:	784b      	ldrb	r3, [r1, #1]
  404056:	7043      	strb	r3, [r0, #1]
  404058:	788b      	ldrb	r3, [r1, #2]
  40405a:	7083      	strb	r3, [r0, #2]
  40405c:	4660      	mov	r0, ip
  40405e:	4770      	bx	lr

00404060 <memset>:
  404060:	0783      	lsls	r3, r0, #30
  404062:	b470      	push	{r4, r5, r6}
  404064:	d049      	beq.n	4040fa <memset+0x9a>
  404066:	1e54      	subs	r4, r2, #1
  404068:	2a00      	cmp	r2, #0
  40406a:	d044      	beq.n	4040f6 <memset+0x96>
  40406c:	b2cd      	uxtb	r5, r1
  40406e:	4603      	mov	r3, r0
  404070:	e002      	b.n	404078 <memset+0x18>
  404072:	2c00      	cmp	r4, #0
  404074:	d03f      	beq.n	4040f6 <memset+0x96>
  404076:	4614      	mov	r4, r2
  404078:	f803 5b01 	strb.w	r5, [r3], #1
  40407c:	f013 0f03 	tst.w	r3, #3
  404080:	f104 32ff 	add.w	r2, r4, #4294967295
  404084:	d1f5      	bne.n	404072 <memset+0x12>
  404086:	2c03      	cmp	r4, #3
  404088:	d92e      	bls.n	4040e8 <memset+0x88>
  40408a:	b2cd      	uxtb	r5, r1
  40408c:	2c0f      	cmp	r4, #15
  40408e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404092:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404096:	d919      	bls.n	4040cc <memset+0x6c>
  404098:	f103 0210 	add.w	r2, r3, #16
  40409c:	4626      	mov	r6, r4
  40409e:	3e10      	subs	r6, #16
  4040a0:	f842 5c10 	str.w	r5, [r2, #-16]
  4040a4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4040a8:	3210      	adds	r2, #16
  4040aa:	2e0f      	cmp	r6, #15
  4040ac:	f842 5c18 	str.w	r5, [r2, #-24]
  4040b0:	f842 5c14 	str.w	r5, [r2, #-20]
  4040b4:	d8f3      	bhi.n	40409e <memset+0x3e>
  4040b6:	f1a4 0210 	sub.w	r2, r4, #16
  4040ba:	f004 040f 	and.w	r4, r4, #15
  4040be:	f022 020f 	bic.w	r2, r2, #15
  4040c2:	2c03      	cmp	r4, #3
  4040c4:	f102 0210 	add.w	r2, r2, #16
  4040c8:	4413      	add	r3, r2
  4040ca:	d90d      	bls.n	4040e8 <memset+0x88>
  4040cc:	461e      	mov	r6, r3
  4040ce:	4622      	mov	r2, r4
  4040d0:	3a04      	subs	r2, #4
  4040d2:	f846 5b04 	str.w	r5, [r6], #4
  4040d6:	2a03      	cmp	r2, #3
  4040d8:	d8fa      	bhi.n	4040d0 <memset+0x70>
  4040da:	1f22      	subs	r2, r4, #4
  4040dc:	f004 0403 	and.w	r4, r4, #3
  4040e0:	f022 0203 	bic.w	r2, r2, #3
  4040e4:	3204      	adds	r2, #4
  4040e6:	4413      	add	r3, r2
  4040e8:	b12c      	cbz	r4, 4040f6 <memset+0x96>
  4040ea:	b2c9      	uxtb	r1, r1
  4040ec:	441c      	add	r4, r3
  4040ee:	f803 1b01 	strb.w	r1, [r3], #1
  4040f2:	42a3      	cmp	r3, r4
  4040f4:	d1fb      	bne.n	4040ee <memset+0x8e>
  4040f6:	bc70      	pop	{r4, r5, r6}
  4040f8:	4770      	bx	lr
  4040fa:	4614      	mov	r4, r2
  4040fc:	4603      	mov	r3, r0
  4040fe:	e7c2      	b.n	404086 <memset+0x26>

00404100 <sprintf>:
  404100:	b40e      	push	{r1, r2, r3}
  404102:	b5f0      	push	{r4, r5, r6, r7, lr}
  404104:	b09c      	sub	sp, #112	; 0x70
  404106:	4b10      	ldr	r3, [pc, #64]	; (404148 <sprintf+0x48>)
  404108:	4606      	mov	r6, r0
  40410a:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40410e:	ac21      	add	r4, sp, #132	; 0x84
  404110:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  404114:	f64f 77ff 	movw	r7, #65535	; 0xffff
  404118:	6818      	ldr	r0, [r3, #0]
  40411a:	f854 2b04 	ldr.w	r2, [r4], #4
  40411e:	a902      	add	r1, sp, #8
  404120:	9602      	str	r6, [sp, #8]
  404122:	4623      	mov	r3, r4
  404124:	9606      	str	r6, [sp, #24]
  404126:	9401      	str	r4, [sp, #4]
  404128:	f8ad e014 	strh.w	lr, [sp, #20]
  40412c:	9504      	str	r5, [sp, #16]
  40412e:	9507      	str	r5, [sp, #28]
  404130:	f8ad 7016 	strh.w	r7, [sp, #22]
  404134:	f000 f838 	bl	4041a8 <_svfprintf_r>
  404138:	9b02      	ldr	r3, [sp, #8]
  40413a:	2200      	movs	r2, #0
  40413c:	701a      	strb	r2, [r3, #0]
  40413e:	b01c      	add	sp, #112	; 0x70
  404140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404144:	b003      	add	sp, #12
  404146:	4770      	bx	lr
  404148:	20400440 	.word	0x20400440

0040414c <strlen>:
  40414c:	f020 0103 	bic.w	r1, r0, #3
  404150:	f010 0003 	ands.w	r0, r0, #3
  404154:	f1c0 0000 	rsb	r0, r0, #0
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f100 0c04 	add.w	ip, r0, #4
  404160:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  404164:	f06f 0200 	mvn.w	r2, #0
  404168:	bf1c      	itt	ne
  40416a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40416e:	4313      	orrne	r3, r2
  404170:	f04f 0c01 	mov.w	ip, #1
  404174:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  404178:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40417c:	eba3 020c 	sub.w	r2, r3, ip
  404180:	ea22 0203 	bic.w	r2, r2, r3
  404184:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  404188:	bf04      	itt	eq
  40418a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40418e:	3004      	addeq	r0, #4
  404190:	d0f4      	beq.n	40417c <strlen+0x30>
  404192:	f1c2 0100 	rsb	r1, r2, #0
  404196:	ea02 0201 	and.w	r2, r2, r1
  40419a:	fab2 f282 	clz	r2, r2
  40419e:	f1c2 021f 	rsb	r2, r2, #31
  4041a2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4041a6:	4770      	bx	lr

004041a8 <_svfprintf_r>:
  4041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041ac:	b0c1      	sub	sp, #260	; 0x104
  4041ae:	4689      	mov	r9, r1
  4041b0:	9208      	str	r2, [sp, #32]
  4041b2:	930c      	str	r3, [sp, #48]	; 0x30
  4041b4:	9009      	str	r0, [sp, #36]	; 0x24
  4041b6:	f003 fe35 	bl	407e24 <_localeconv_r>
  4041ba:	6803      	ldr	r3, [r0, #0]
  4041bc:	4618      	mov	r0, r3
  4041be:	9316      	str	r3, [sp, #88]	; 0x58
  4041c0:	f7ff ffc4 	bl	40414c <strlen>
  4041c4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4041c8:	9017      	str	r0, [sp, #92]	; 0x5c
  4041ca:	061d      	lsls	r5, r3, #24
  4041cc:	d504      	bpl.n	4041d8 <_svfprintf_r+0x30>
  4041ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4041d2:	2b00      	cmp	r3, #0
  4041d4:	f001 8080 	beq.w	4052d8 <_svfprintf_r+0x1130>
  4041d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4041dc:	2300      	movs	r3, #0
  4041de:	46c3      	mov	fp, r8
  4041e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4041e2:	9314      	str	r3, [sp, #80]	; 0x50
  4041e4:	9312      	str	r3, [sp, #72]	; 0x48
  4041e6:	9315      	str	r3, [sp, #84]	; 0x54
  4041e8:	9319      	str	r3, [sp, #100]	; 0x64
  4041ea:	930a      	str	r3, [sp, #40]	; 0x28
  4041ec:	9325      	str	r3, [sp, #148]	; 0x94
  4041ee:	9324      	str	r3, [sp, #144]	; 0x90
  4041f0:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  4041f4:	9a08      	ldr	r2, [sp, #32]
  4041f6:	7813      	ldrb	r3, [r2, #0]
  4041f8:	2b25      	cmp	r3, #37	; 0x25
  4041fa:	f000 80a6 	beq.w	40434a <_svfprintf_r+0x1a2>
  4041fe:	b90b      	cbnz	r3, 404204 <_svfprintf_r+0x5c>
  404200:	e0a3      	b.n	40434a <_svfprintf_r+0x1a2>
  404202:	b11b      	cbz	r3, 40420c <_svfprintf_r+0x64>
  404204:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  404208:	2b25      	cmp	r3, #37	; 0x25
  40420a:	d1fa      	bne.n	404202 <_svfprintf_r+0x5a>
  40420c:	9908      	ldr	r1, [sp, #32]
  40420e:	4614      	mov	r4, r2
  404210:	1a55      	subs	r5, r2, r1
  404212:	d010      	beq.n	404236 <_svfprintf_r+0x8e>
  404214:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404216:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404218:	3301      	adds	r3, #1
  40421a:	f8cb 1000 	str.w	r1, [fp]
  40421e:	442a      	add	r2, r5
  404220:	f8cb 5004 	str.w	r5, [fp, #4]
  404224:	2b07      	cmp	r3, #7
  404226:	9324      	str	r3, [sp, #144]	; 0x90
  404228:	9225      	str	r2, [sp, #148]	; 0x94
  40422a:	dc73      	bgt.n	404314 <_svfprintf_r+0x16c>
  40422c:	f10b 0b08 	add.w	fp, fp, #8
  404230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404232:	442b      	add	r3, r5
  404234:	930a      	str	r3, [sp, #40]	; 0x28
  404236:	7823      	ldrb	r3, [r4, #0]
  404238:	2b00      	cmp	r3, #0
  40423a:	d073      	beq.n	404324 <_svfprintf_r+0x17c>
  40423c:	2300      	movs	r3, #0
  40423e:	f04f 3cff 	mov.w	ip, #4294967295
  404242:	1c61      	adds	r1, r4, #1
  404244:	7866      	ldrb	r6, [r4, #1]
  404246:	461a      	mov	r2, r3
  404248:	4664      	mov	r4, ip
  40424a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40424e:	930b      	str	r3, [sp, #44]	; 0x2c
  404250:	9306      	str	r3, [sp, #24]
  404252:	1c4b      	adds	r3, r1, #1
  404254:	f1a6 0120 	sub.w	r1, r6, #32
  404258:	2958      	cmp	r1, #88	; 0x58
  40425a:	f200 83b2 	bhi.w	4049c2 <_svfprintf_r+0x81a>
  40425e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404262:	0319      	.short	0x0319
  404264:	03b003b0 	.word	0x03b003b0
  404268:	03b00320 	.word	0x03b00320
  40426c:	03b003b0 	.word	0x03b003b0
  404270:	03b003b0 	.word	0x03b003b0
  404274:	024003b0 	.word	0x024003b0
  404278:	03b001fb 	.word	0x03b001fb
  40427c:	01ff01e2 	.word	0x01ff01e2
  404280:	032703b0 	.word	0x032703b0
  404284:	032e032e 	.word	0x032e032e
  404288:	032e032e 	.word	0x032e032e
  40428c:	032e032e 	.word	0x032e032e
  404290:	032e032e 	.word	0x032e032e
  404294:	03b0032e 	.word	0x03b0032e
  404298:	03b003b0 	.word	0x03b003b0
  40429c:	03b003b0 	.word	0x03b003b0
  4042a0:	03b003b0 	.word	0x03b003b0
  4042a4:	03b003b0 	.word	0x03b003b0
  4042a8:	033d03b0 	.word	0x033d03b0
  4042ac:	03b00365 	.word	0x03b00365
  4042b0:	03b00365 	.word	0x03b00365
  4042b4:	03b003b0 	.word	0x03b003b0
  4042b8:	02fe03b0 	.word	0x02fe03b0
  4042bc:	03b003b0 	.word	0x03b003b0
  4042c0:	03b00293 	.word	0x03b00293
  4042c4:	03b003b0 	.word	0x03b003b0
  4042c8:	03b003b0 	.word	0x03b003b0
  4042cc:	03b002b0 	.word	0x03b002b0
  4042d0:	02c603b0 	.word	0x02c603b0
  4042d4:	03b003b0 	.word	0x03b003b0
  4042d8:	03b003b0 	.word	0x03b003b0
  4042dc:	03b003b0 	.word	0x03b003b0
  4042e0:	03b003b0 	.word	0x03b003b0
  4042e4:	03b003b0 	.word	0x03b003b0
  4042e8:	021802eb 	.word	0x021802eb
  4042ec:	03650365 	.word	0x03650365
  4042f0:	024e0365 	.word	0x024e0365
  4042f4:	03b00218 	.word	0x03b00218
  4042f8:	023603b0 	.word	0x023603b0
  4042fc:	026003b0 	.word	0x026003b0
  404300:	039901e9 	.word	0x039901e9
  404304:	03b00259 	.word	0x03b00259
  404308:	03b00272 	.word	0x03b00272
  40430c:	03b00076 	.word	0x03b00076
  404310:	030503b0 	.word	0x030503b0
  404314:	9809      	ldr	r0, [sp, #36]	; 0x24
  404316:	4649      	mov	r1, r9
  404318:	aa23      	add	r2, sp, #140	; 0x8c
  40431a:	f004 fef7 	bl	40910c <__ssprint_r>
  40431e:	b940      	cbnz	r0, 404332 <_svfprintf_r+0x18a>
  404320:	46c3      	mov	fp, r8
  404322:	e785      	b.n	404230 <_svfprintf_r+0x88>
  404324:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404326:	b123      	cbz	r3, 404332 <_svfprintf_r+0x18a>
  404328:	9809      	ldr	r0, [sp, #36]	; 0x24
  40432a:	4649      	mov	r1, r9
  40432c:	aa23      	add	r2, sp, #140	; 0x8c
  40432e:	f004 feed 	bl	40910c <__ssprint_r>
  404332:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  404336:	f013 0f40 	tst.w	r3, #64	; 0x40
  40433a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40433c:	bf18      	it	ne
  40433e:	f04f 33ff 	movne.w	r3, #4294967295
  404342:	4618      	mov	r0, r3
  404344:	b041      	add	sp, #260	; 0x104
  404346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40434a:	9c08      	ldr	r4, [sp, #32]
  40434c:	e773      	b.n	404236 <_svfprintf_r+0x8e>
  40434e:	9308      	str	r3, [sp, #32]
  404350:	46a4      	mov	ip, r4
  404352:	9b06      	ldr	r3, [sp, #24]
  404354:	0698      	lsls	r0, r3, #26
  404356:	f140 823e 	bpl.w	4047d6 <_svfprintf_r+0x62e>
  40435a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40435c:	2301      	movs	r3, #1
  40435e:	3707      	adds	r7, #7
  404360:	f027 0207 	bic.w	r2, r7, #7
  404364:	f102 0108 	add.w	r1, r2, #8
  404368:	e9d2 4500 	ldrd	r4, r5, [r2]
  40436c:	910c      	str	r1, [sp, #48]	; 0x30
  40436e:	2200      	movs	r2, #0
  404370:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404374:	4617      	mov	r7, r2
  404376:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40437a:	f1bc 0f00 	cmp.w	ip, #0
  40437e:	db03      	blt.n	404388 <_svfprintf_r+0x1e0>
  404380:	9a06      	ldr	r2, [sp, #24]
  404382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404386:	9206      	str	r2, [sp, #24]
  404388:	f1bc 0f00 	cmp.w	ip, #0
  40438c:	f040 83ac 	bne.w	404ae8 <_svfprintf_r+0x940>
  404390:	ea54 0205 	orrs.w	r2, r4, r5
  404394:	bf14      	ite	ne
  404396:	2201      	movne	r2, #1
  404398:	2200      	moveq	r2, #0
  40439a:	2a00      	cmp	r2, #0
  40439c:	f040 83a4 	bne.w	404ae8 <_svfprintf_r+0x940>
  4043a0:	2b00      	cmp	r3, #0
  4043a2:	f040 8460 	bne.w	404c66 <_svfprintf_r+0xabe>
  4043a6:	9a06      	ldr	r2, [sp, #24]
  4043a8:	07d2      	lsls	r2, r2, #31
  4043aa:	f140 84fd 	bpl.w	404da8 <_svfprintf_r+0xc00>
  4043ae:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4043b2:	2330      	movs	r3, #48	; 0x30
  4043b4:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  4043b8:	ebca 0408 	rsb	r4, sl, r8
  4043bc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4043c0:	45a4      	cmp	ip, r4
  4043c2:	4663      	mov	r3, ip
  4043c4:	bfb8      	it	lt
  4043c6:	4623      	movlt	r3, r4
  4043c8:	9307      	str	r3, [sp, #28]
  4043ca:	2300      	movs	r3, #0
  4043cc:	9311      	str	r3, [sp, #68]	; 0x44
  4043ce:	b117      	cbz	r7, 4043d6 <_svfprintf_r+0x22e>
  4043d0:	9b07      	ldr	r3, [sp, #28]
  4043d2:	3301      	adds	r3, #1
  4043d4:	9307      	str	r3, [sp, #28]
  4043d6:	9b06      	ldr	r3, [sp, #24]
  4043d8:	f013 0302 	ands.w	r3, r3, #2
  4043dc:	930d      	str	r3, [sp, #52]	; 0x34
  4043de:	d002      	beq.n	4043e6 <_svfprintf_r+0x23e>
  4043e0:	9b07      	ldr	r3, [sp, #28]
  4043e2:	3302      	adds	r3, #2
  4043e4:	9307      	str	r3, [sp, #28]
  4043e6:	9b06      	ldr	r3, [sp, #24]
  4043e8:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4043ec:	930e      	str	r3, [sp, #56]	; 0x38
  4043ee:	f040 8307 	bne.w	404a00 <_svfprintf_r+0x858>
  4043f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4043f4:	9a07      	ldr	r2, [sp, #28]
  4043f6:	ebc2 0a03 	rsb	sl, r2, r3
  4043fa:	f1ba 0f00 	cmp.w	sl, #0
  4043fe:	f340 82ff 	ble.w	404a00 <_svfprintf_r+0x858>
  404402:	f1ba 0f10 	cmp.w	sl, #16
  404406:	9925      	ldr	r1, [sp, #148]	; 0x94
  404408:	f340 87dd 	ble.w	4053c6 <_svfprintf_r+0x121e>
  40440c:	4fbf      	ldr	r7, [pc, #764]	; (40470c <_svfprintf_r+0x564>)
  40440e:	2510      	movs	r5, #16
  404410:	9618      	str	r6, [sp, #96]	; 0x60
  404412:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404414:	463e      	mov	r6, r7
  404416:	4627      	mov	r7, r4
  404418:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40441a:	e004      	b.n	404426 <_svfprintf_r+0x27e>
  40441c:	f1aa 0a10 	sub.w	sl, sl, #16
  404420:	f1ba 0f10 	cmp.w	sl, #16
  404424:	dd1b      	ble.n	40445e <_svfprintf_r+0x2b6>
  404426:	3201      	adds	r2, #1
  404428:	3110      	adds	r1, #16
  40442a:	f8cb 6000 	str.w	r6, [fp]
  40442e:	f10b 0b08 	add.w	fp, fp, #8
  404432:	2a07      	cmp	r2, #7
  404434:	f84b 5c04 	str.w	r5, [fp, #-4]
  404438:	9125      	str	r1, [sp, #148]	; 0x94
  40443a:	9224      	str	r2, [sp, #144]	; 0x90
  40443c:	ddee      	ble.n	40441c <_svfprintf_r+0x274>
  40443e:	4620      	mov	r0, r4
  404440:	4649      	mov	r1, r9
  404442:	aa23      	add	r2, sp, #140	; 0x8c
  404444:	46c3      	mov	fp, r8
  404446:	f004 fe61 	bl	40910c <__ssprint_r>
  40444a:	2800      	cmp	r0, #0
  40444c:	f47f af71 	bne.w	404332 <_svfprintf_r+0x18a>
  404450:	f1aa 0a10 	sub.w	sl, sl, #16
  404454:	9925      	ldr	r1, [sp, #148]	; 0x94
  404456:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404458:	f1ba 0f10 	cmp.w	sl, #16
  40445c:	dce3      	bgt.n	404426 <_svfprintf_r+0x27e>
  40445e:	463c      	mov	r4, r7
  404460:	4637      	mov	r7, r6
  404462:	9e18      	ldr	r6, [sp, #96]	; 0x60
  404464:	3201      	adds	r2, #1
  404466:	eb0a 0c01 	add.w	ip, sl, r1
  40446a:	f8cb 7000 	str.w	r7, [fp]
  40446e:	2a07      	cmp	r2, #7
  404470:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404474:	9224      	str	r2, [sp, #144]	; 0x90
  404476:	f8cb a004 	str.w	sl, [fp, #4]
  40447a:	f300 82b6 	bgt.w	4049ea <_svfprintf_r+0x842>
  40447e:	f10b 0b08 	add.w	fp, fp, #8
  404482:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404486:	b197      	cbz	r7, 4044ae <_svfprintf_r+0x306>
  404488:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40448a:	2201      	movs	r2, #1
  40448c:	f10c 0c01 	add.w	ip, ip, #1
  404490:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404494:	4413      	add	r3, r2
  404496:	f8cb 2004 	str.w	r2, [fp, #4]
  40449a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40449e:	2b07      	cmp	r3, #7
  4044a0:	f8cb 1000 	str.w	r1, [fp]
  4044a4:	9324      	str	r3, [sp, #144]	; 0x90
  4044a6:	f300 83fb 	bgt.w	404ca0 <_svfprintf_r+0xaf8>
  4044aa:	f10b 0b08 	add.w	fp, fp, #8
  4044ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4044b0:	b18b      	cbz	r3, 4044d6 <_svfprintf_r+0x32e>
  4044b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044b4:	f10c 0c02 	add.w	ip, ip, #2
  4044b8:	a91c      	add	r1, sp, #112	; 0x70
  4044ba:	2202      	movs	r2, #2
  4044bc:	3301      	adds	r3, #1
  4044be:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4044c2:	f8cb 1000 	str.w	r1, [fp]
  4044c6:	2b07      	cmp	r3, #7
  4044c8:	9324      	str	r3, [sp, #144]	; 0x90
  4044ca:	f8cb 2004 	str.w	r2, [fp, #4]
  4044ce:	f300 83db 	bgt.w	404c88 <_svfprintf_r+0xae0>
  4044d2:	f10b 0b08 	add.w	fp, fp, #8
  4044d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044d8:	2b80      	cmp	r3, #128	; 0x80
  4044da:	f000 8321 	beq.w	404b20 <_svfprintf_r+0x978>
  4044de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4044e0:	1b1f      	subs	r7, r3, r4
  4044e2:	2f00      	cmp	r7, #0
  4044e4:	dd37      	ble.n	404556 <_svfprintf_r+0x3ae>
  4044e6:	2f10      	cmp	r7, #16
  4044e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044ea:	f340 85ec 	ble.w	4050c6 <_svfprintf_r+0xf1e>
  4044ee:	940d      	str	r4, [sp, #52]	; 0x34
  4044f0:	f04f 0a10 	mov.w	sl, #16
  4044f4:	4d86      	ldr	r5, [pc, #536]	; (404710 <_svfprintf_r+0x568>)
  4044f6:	4662      	mov	r2, ip
  4044f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4044fa:	e002      	b.n	404502 <_svfprintf_r+0x35a>
  4044fc:	3f10      	subs	r7, #16
  4044fe:	2f10      	cmp	r7, #16
  404500:	dd19      	ble.n	404536 <_svfprintf_r+0x38e>
  404502:	3301      	adds	r3, #1
  404504:	3210      	adds	r2, #16
  404506:	f8cb 5000 	str.w	r5, [fp]
  40450a:	f10b 0b08 	add.w	fp, fp, #8
  40450e:	2b07      	cmp	r3, #7
  404510:	f84b ac04 	str.w	sl, [fp, #-4]
  404514:	9225      	str	r2, [sp, #148]	; 0x94
  404516:	9324      	str	r3, [sp, #144]	; 0x90
  404518:	ddf0      	ble.n	4044fc <_svfprintf_r+0x354>
  40451a:	4620      	mov	r0, r4
  40451c:	4649      	mov	r1, r9
  40451e:	aa23      	add	r2, sp, #140	; 0x8c
  404520:	46c3      	mov	fp, r8
  404522:	f004 fdf3 	bl	40910c <__ssprint_r>
  404526:	2800      	cmp	r0, #0
  404528:	f47f af03 	bne.w	404332 <_svfprintf_r+0x18a>
  40452c:	3f10      	subs	r7, #16
  40452e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404530:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404532:	2f10      	cmp	r7, #16
  404534:	dce5      	bgt.n	404502 <_svfprintf_r+0x35a>
  404536:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404538:	4694      	mov	ip, r2
  40453a:	3301      	adds	r3, #1
  40453c:	44bc      	add	ip, r7
  40453e:	f8cb 5000 	str.w	r5, [fp]
  404542:	2b07      	cmp	r3, #7
  404544:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404548:	9324      	str	r3, [sp, #144]	; 0x90
  40454a:	f8cb 7004 	str.w	r7, [fp, #4]
  40454e:	f300 838f 	bgt.w	404c70 <_svfprintf_r+0xac8>
  404552:	f10b 0b08 	add.w	fp, fp, #8
  404556:	9b06      	ldr	r3, [sp, #24]
  404558:	05df      	lsls	r7, r3, #23
  40455a:	f100 8254 	bmi.w	404a06 <_svfprintf_r+0x85e>
  40455e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404560:	44a4      	add	ip, r4
  404562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404564:	3301      	adds	r3, #1
  404566:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40456a:	f8cb 2000 	str.w	r2, [fp]
  40456e:	2b07      	cmp	r3, #7
  404570:	f8cb 4004 	str.w	r4, [fp, #4]
  404574:	9324      	str	r3, [sp, #144]	; 0x90
  404576:	f300 8360 	bgt.w	404c3a <_svfprintf_r+0xa92>
  40457a:	f10b 0b08 	add.w	fp, fp, #8
  40457e:	9b06      	ldr	r3, [sp, #24]
  404580:	075a      	lsls	r2, r3, #29
  404582:	d540      	bpl.n	404606 <_svfprintf_r+0x45e>
  404584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404586:	9a07      	ldr	r2, [sp, #28]
  404588:	1a9c      	subs	r4, r3, r2
  40458a:	2c00      	cmp	r4, #0
  40458c:	dd3b      	ble.n	404606 <_svfprintf_r+0x45e>
  40458e:	2c10      	cmp	r4, #16
  404590:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404592:	f340 876b 	ble.w	40546c <_svfprintf_r+0x12c4>
  404596:	2510      	movs	r5, #16
  404598:	4f5c      	ldr	r7, [pc, #368]	; (40470c <_svfprintf_r+0x564>)
  40459a:	4662      	mov	r2, ip
  40459c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40459e:	e002      	b.n	4045a6 <_svfprintf_r+0x3fe>
  4045a0:	3c10      	subs	r4, #16
  4045a2:	2c10      	cmp	r4, #16
  4045a4:	dd19      	ble.n	4045da <_svfprintf_r+0x432>
  4045a6:	3301      	adds	r3, #1
  4045a8:	3210      	adds	r2, #16
  4045aa:	f8cb 7000 	str.w	r7, [fp]
  4045ae:	f10b 0b08 	add.w	fp, fp, #8
  4045b2:	2b07      	cmp	r3, #7
  4045b4:	f84b 5c04 	str.w	r5, [fp, #-4]
  4045b8:	9225      	str	r2, [sp, #148]	; 0x94
  4045ba:	9324      	str	r3, [sp, #144]	; 0x90
  4045bc:	ddf0      	ble.n	4045a0 <_svfprintf_r+0x3f8>
  4045be:	4630      	mov	r0, r6
  4045c0:	4649      	mov	r1, r9
  4045c2:	aa23      	add	r2, sp, #140	; 0x8c
  4045c4:	46c3      	mov	fp, r8
  4045c6:	f004 fda1 	bl	40910c <__ssprint_r>
  4045ca:	2800      	cmp	r0, #0
  4045cc:	f47f aeb1 	bne.w	404332 <_svfprintf_r+0x18a>
  4045d0:	3c10      	subs	r4, #16
  4045d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4045d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4045d6:	2c10      	cmp	r4, #16
  4045d8:	dce5      	bgt.n	4045a6 <_svfprintf_r+0x3fe>
  4045da:	4694      	mov	ip, r2
  4045dc:	3301      	adds	r3, #1
  4045de:	44a4      	add	ip, r4
  4045e0:	f8cb 7000 	str.w	r7, [fp]
  4045e4:	2b07      	cmp	r3, #7
  4045e6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4045ea:	9324      	str	r3, [sp, #144]	; 0x90
  4045ec:	f8cb 4004 	str.w	r4, [fp, #4]
  4045f0:	dd09      	ble.n	404606 <_svfprintf_r+0x45e>
  4045f2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4045f4:	4649      	mov	r1, r9
  4045f6:	aa23      	add	r2, sp, #140	; 0x8c
  4045f8:	f004 fd88 	bl	40910c <__ssprint_r>
  4045fc:	2800      	cmp	r0, #0
  4045fe:	f47f ae98 	bne.w	404332 <_svfprintf_r+0x18a>
  404602:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404608:	9a07      	ldr	r2, [sp, #28]
  40460a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40460c:	428a      	cmp	r2, r1
  40460e:	bfac      	ite	ge
  404610:	189b      	addge	r3, r3, r2
  404612:	185b      	addlt	r3, r3, r1
  404614:	930a      	str	r3, [sp, #40]	; 0x28
  404616:	f1bc 0f00 	cmp.w	ip, #0
  40461a:	f040 831a 	bne.w	404c52 <_svfprintf_r+0xaaa>
  40461e:	2300      	movs	r3, #0
  404620:	46c3      	mov	fp, r8
  404622:	9324      	str	r3, [sp, #144]	; 0x90
  404624:	e5e6      	b.n	4041f4 <_svfprintf_r+0x4c>
  404626:	4619      	mov	r1, r3
  404628:	9806      	ldr	r0, [sp, #24]
  40462a:	781e      	ldrb	r6, [r3, #0]
  40462c:	f040 0004 	orr.w	r0, r0, #4
  404630:	9006      	str	r0, [sp, #24]
  404632:	e60e      	b.n	404252 <_svfprintf_r+0xaa>
  404634:	9308      	str	r3, [sp, #32]
  404636:	46a4      	mov	ip, r4
  404638:	9b06      	ldr	r3, [sp, #24]
  40463a:	f013 0320 	ands.w	r3, r3, #32
  40463e:	f000 80ae 	beq.w	40479e <_svfprintf_r+0x5f6>
  404642:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404644:	2300      	movs	r3, #0
  404646:	3707      	adds	r7, #7
  404648:	f027 0207 	bic.w	r2, r7, #7
  40464c:	f102 0108 	add.w	r1, r2, #8
  404650:	e9d2 4500 	ldrd	r4, r5, [r2]
  404654:	910c      	str	r1, [sp, #48]	; 0x30
  404656:	e68a      	b.n	40436e <_svfprintf_r+0x1c6>
  404658:	781e      	ldrb	r6, [r3, #0]
  40465a:	4619      	mov	r1, r3
  40465c:	222b      	movs	r2, #43	; 0x2b
  40465e:	e5f8      	b.n	404252 <_svfprintf_r+0xaa>
  404660:	781e      	ldrb	r6, [r3, #0]
  404662:	1c59      	adds	r1, r3, #1
  404664:	2e2a      	cmp	r6, #42	; 0x2a
  404666:	f001 8006 	beq.w	405676 <_svfprintf_r+0x14ce>
  40466a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40466e:	460b      	mov	r3, r1
  404670:	2400      	movs	r4, #0
  404672:	2809      	cmp	r0, #9
  404674:	f63f adee 	bhi.w	404254 <_svfprintf_r+0xac>
  404678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40467c:	f813 6b01 	ldrb.w	r6, [r3], #1
  404680:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404684:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  404688:	2809      	cmp	r0, #9
  40468a:	d9f5      	bls.n	404678 <_svfprintf_r+0x4d0>
  40468c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404690:	e5e0      	b.n	404254 <_svfprintf_r+0xac>
  404692:	9308      	str	r3, [sp, #32]
  404694:	46a4      	mov	ip, r4
  404696:	9b06      	ldr	r3, [sp, #24]
  404698:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40469c:	069c      	lsls	r4, r3, #26
  40469e:	f140 8129 	bpl.w	4048f4 <_svfprintf_r+0x74c>
  4046a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4046a4:	3707      	adds	r7, #7
  4046a6:	f027 0707 	bic.w	r7, r7, #7
  4046aa:	e9d7 2300 	ldrd	r2, r3, [r7]
  4046ae:	f107 0108 	add.w	r1, r7, #8
  4046b2:	4614      	mov	r4, r2
  4046b4:	461d      	mov	r5, r3
  4046b6:	910c      	str	r1, [sp, #48]	; 0x30
  4046b8:	2a00      	cmp	r2, #0
  4046ba:	f173 0300 	sbcs.w	r3, r3, #0
  4046be:	f2c0 812a 	blt.w	404916 <_svfprintf_r+0x76e>
  4046c2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4046c6:	2301      	movs	r3, #1
  4046c8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4046cc:	e655      	b.n	40437a <_svfprintf_r+0x1d2>
  4046ce:	781e      	ldrb	r6, [r3, #0]
  4046d0:	9906      	ldr	r1, [sp, #24]
  4046d2:	2e6c      	cmp	r6, #108	; 0x6c
  4046d4:	f000 8557 	beq.w	405186 <_svfprintf_r+0xfde>
  4046d8:	f041 0110 	orr.w	r1, r1, #16
  4046dc:	9106      	str	r1, [sp, #24]
  4046de:	4619      	mov	r1, r3
  4046e0:	e5b7      	b.n	404252 <_svfprintf_r+0xaa>
  4046e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4046e4:	6829      	ldr	r1, [r5, #0]
  4046e6:	4608      	mov	r0, r1
  4046e8:	910b      	str	r1, [sp, #44]	; 0x2c
  4046ea:	4629      	mov	r1, r5
  4046ec:	2800      	cmp	r0, #0
  4046ee:	f101 0104 	add.w	r1, r1, #4
  4046f2:	f2c0 854f 	blt.w	405194 <_svfprintf_r+0xfec>
  4046f6:	910c      	str	r1, [sp, #48]	; 0x30
  4046f8:	4619      	mov	r1, r3
  4046fa:	781e      	ldrb	r6, [r3, #0]
  4046fc:	e5a9      	b.n	404252 <_svfprintf_r+0xaa>
  4046fe:	9906      	ldr	r1, [sp, #24]
  404700:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  404704:	9106      	str	r1, [sp, #24]
  404706:	4619      	mov	r1, r3
  404708:	781e      	ldrb	r6, [r3, #0]
  40470a:	e5a2      	b.n	404252 <_svfprintf_r+0xaa>
  40470c:	00409e10 	.word	0x00409e10
  404710:	00409e00 	.word	0x00409e00
  404714:	9906      	ldr	r1, [sp, #24]
  404716:	f041 0120 	orr.w	r1, r1, #32
  40471a:	9106      	str	r1, [sp, #24]
  40471c:	4619      	mov	r1, r3
  40471e:	781e      	ldrb	r6, [r3, #0]
  404720:	e597      	b.n	404252 <_svfprintf_r+0xaa>
  404722:	9308      	str	r3, [sp, #32]
  404724:	9b06      	ldr	r3, [sp, #24]
  404726:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40472a:	069e      	lsls	r6, r3, #26
  40472c:	f140 84a4 	bpl.w	405078 <_svfprintf_r+0xed0>
  404730:	990a      	ldr	r1, [sp, #40]	; 0x28
  404732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404734:	17cd      	asrs	r5, r1, #31
  404736:	4608      	mov	r0, r1
  404738:	6813      	ldr	r3, [r2, #0]
  40473a:	3204      	adds	r2, #4
  40473c:	4629      	mov	r1, r5
  40473e:	920c      	str	r2, [sp, #48]	; 0x30
  404740:	e9c3 0100 	strd	r0, r1, [r3]
  404744:	e556      	b.n	4041f4 <_svfprintf_r+0x4c>
  404746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404748:	2500      	movs	r5, #0
  40474a:	9308      	str	r3, [sp, #32]
  40474c:	6813      	ldr	r3, [r2, #0]
  40474e:	1d17      	adds	r7, r2, #4
  404750:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  404754:	930f      	str	r3, [sp, #60]	; 0x3c
  404756:	2b00      	cmp	r3, #0
  404758:	f000 867a 	beq.w	405450 <_svfprintf_r+0x12a8>
  40475c:	2c00      	cmp	r4, #0
  40475e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404760:	f2c0 8624 	blt.w	4053ac <_svfprintf_r+0x1204>
  404764:	4629      	mov	r1, r5
  404766:	4622      	mov	r2, r4
  404768:	f003 fe7e 	bl	408468 <memchr>
  40476c:	2800      	cmp	r0, #0
  40476e:	f000 86df 	beq.w	405530 <_svfprintf_r+0x1388>
  404772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404774:	970c      	str	r7, [sp, #48]	; 0x30
  404776:	1ac4      	subs	r4, r0, r3
  404778:	9510      	str	r5, [sp, #64]	; 0x40
  40477a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40477e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404782:	9511      	str	r5, [sp, #68]	; 0x44
  404784:	9307      	str	r3, [sp, #28]
  404786:	e622      	b.n	4043ce <_svfprintf_r+0x226>
  404788:	9308      	str	r3, [sp, #32]
  40478a:	46a4      	mov	ip, r4
  40478c:	9b06      	ldr	r3, [sp, #24]
  40478e:	f043 0310 	orr.w	r3, r3, #16
  404792:	9306      	str	r3, [sp, #24]
  404794:	9b06      	ldr	r3, [sp, #24]
  404796:	f013 0320 	ands.w	r3, r3, #32
  40479a:	f47f af52 	bne.w	404642 <_svfprintf_r+0x49a>
  40479e:	9a06      	ldr	r2, [sp, #24]
  4047a0:	f012 0210 	ands.w	r2, r2, #16
  4047a4:	f040 8352 	bne.w	404e4c <_svfprintf_r+0xca4>
  4047a8:	9b06      	ldr	r3, [sp, #24]
  4047aa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  4047ae:	f000 834d 	beq.w	404e4c <_svfprintf_r+0xca4>
  4047b2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4047b4:	4613      	mov	r3, r2
  4047b6:	2500      	movs	r5, #0
  4047b8:	460a      	mov	r2, r1
  4047ba:	880c      	ldrh	r4, [r1, #0]
  4047bc:	3204      	adds	r2, #4
  4047be:	920c      	str	r2, [sp, #48]	; 0x30
  4047c0:	e5d5      	b.n	40436e <_svfprintf_r+0x1c6>
  4047c2:	9308      	str	r3, [sp, #32]
  4047c4:	46a4      	mov	ip, r4
  4047c6:	9b06      	ldr	r3, [sp, #24]
  4047c8:	f043 0310 	orr.w	r3, r3, #16
  4047cc:	9306      	str	r3, [sp, #24]
  4047ce:	9b06      	ldr	r3, [sp, #24]
  4047d0:	0698      	lsls	r0, r3, #26
  4047d2:	f53f adc2 	bmi.w	40435a <_svfprintf_r+0x1b2>
  4047d6:	9b06      	ldr	r3, [sp, #24]
  4047d8:	06d9      	lsls	r1, r3, #27
  4047da:	f140 8432 	bpl.w	405042 <_svfprintf_r+0xe9a>
  4047de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4047e0:	4613      	mov	r3, r2
  4047e2:	3204      	adds	r2, #4
  4047e4:	681c      	ldr	r4, [r3, #0]
  4047e6:	2500      	movs	r5, #0
  4047e8:	2301      	movs	r3, #1
  4047ea:	920c      	str	r2, [sp, #48]	; 0x30
  4047ec:	e5bf      	b.n	40436e <_svfprintf_r+0x1c6>
  4047ee:	9308      	str	r3, [sp, #32]
  4047f0:	46a4      	mov	ip, r4
  4047f2:	4bb7      	ldr	r3, [pc, #732]	; (404ad0 <_svfprintf_r+0x928>)
  4047f4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4047f8:	9315      	str	r3, [sp, #84]	; 0x54
  4047fa:	9b06      	ldr	r3, [sp, #24]
  4047fc:	069a      	lsls	r2, r3, #26
  4047fe:	d53e      	bpl.n	40487e <_svfprintf_r+0x6d6>
  404800:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404802:	3707      	adds	r7, #7
  404804:	f027 0307 	bic.w	r3, r7, #7
  404808:	f103 0208 	add.w	r2, r3, #8
  40480c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404810:	920c      	str	r2, [sp, #48]	; 0x30
  404812:	9b06      	ldr	r3, [sp, #24]
  404814:	07df      	lsls	r7, r3, #31
  404816:	f140 8268 	bpl.w	404cea <_svfprintf_r+0xb42>
  40481a:	ea54 0305 	orrs.w	r3, r4, r5
  40481e:	f000 8264 	beq.w	404cea <_svfprintf_r+0xb42>
  404822:	9b06      	ldr	r3, [sp, #24]
  404824:	2230      	movs	r2, #48	; 0x30
  404826:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40482a:	f043 0302 	orr.w	r3, r3, #2
  40482e:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  404832:	9306      	str	r3, [sp, #24]
  404834:	2302      	movs	r3, #2
  404836:	e59a      	b.n	40436e <_svfprintf_r+0x1c6>
  404838:	990c      	ldr	r1, [sp, #48]	; 0x30
  40483a:	2001      	movs	r0, #1
  40483c:	9308      	str	r3, [sp, #32]
  40483e:	2300      	movs	r3, #0
  404840:	680a      	ldr	r2, [r1, #0]
  404842:	3104      	adds	r1, #4
  404844:	461f      	mov	r7, r3
  404846:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40484a:	9310      	str	r3, [sp, #64]	; 0x40
  40484c:	4604      	mov	r4, r0
  40484e:	9311      	str	r3, [sp, #68]	; 0x44
  404850:	ab26      	add	r3, sp, #152	; 0x98
  404852:	9007      	str	r0, [sp, #28]
  404854:	910c      	str	r1, [sp, #48]	; 0x30
  404856:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40485a:	930f      	str	r3, [sp, #60]	; 0x3c
  40485c:	e5bb      	b.n	4043d6 <_svfprintf_r+0x22e>
  40485e:	9906      	ldr	r1, [sp, #24]
  404860:	f041 0108 	orr.w	r1, r1, #8
  404864:	9106      	str	r1, [sp, #24]
  404866:	4619      	mov	r1, r3
  404868:	781e      	ldrb	r6, [r3, #0]
  40486a:	e4f2      	b.n	404252 <_svfprintf_r+0xaa>
  40486c:	9308      	str	r3, [sp, #32]
  40486e:	46a4      	mov	ip, r4
  404870:	4b98      	ldr	r3, [pc, #608]	; (404ad4 <_svfprintf_r+0x92c>)
  404872:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404876:	9315      	str	r3, [sp, #84]	; 0x54
  404878:	9b06      	ldr	r3, [sp, #24]
  40487a:	069a      	lsls	r2, r3, #26
  40487c:	d4c0      	bmi.n	404800 <_svfprintf_r+0x658>
  40487e:	9b06      	ldr	r3, [sp, #24]
  404880:	06db      	lsls	r3, r3, #27
  404882:	f140 83ec 	bpl.w	40505e <_svfprintf_r+0xeb6>
  404886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404888:	2500      	movs	r5, #0
  40488a:	4613      	mov	r3, r2
  40488c:	6814      	ldr	r4, [r2, #0]
  40488e:	3304      	adds	r3, #4
  404890:	930c      	str	r3, [sp, #48]	; 0x30
  404892:	e7be      	b.n	404812 <_svfprintf_r+0x66a>
  404894:	781e      	ldrb	r6, [r3, #0]
  404896:	4619      	mov	r1, r3
  404898:	2a00      	cmp	r2, #0
  40489a:	f47f acda 	bne.w	404252 <_svfprintf_r+0xaa>
  40489e:	2220      	movs	r2, #32
  4048a0:	e4d7      	b.n	404252 <_svfprintf_r+0xaa>
  4048a2:	9906      	ldr	r1, [sp, #24]
  4048a4:	f041 0101 	orr.w	r1, r1, #1
  4048a8:	9106      	str	r1, [sp, #24]
  4048aa:	4619      	mov	r1, r3
  4048ac:	781e      	ldrb	r6, [r3, #0]
  4048ae:	e4d0      	b.n	404252 <_svfprintf_r+0xaa>
  4048b0:	9906      	ldr	r1, [sp, #24]
  4048b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4048b6:	9106      	str	r1, [sp, #24]
  4048b8:	4619      	mov	r1, r3
  4048ba:	781e      	ldrb	r6, [r3, #0]
  4048bc:	e4c9      	b.n	404252 <_svfprintf_r+0xaa>
  4048be:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4048c2:	2100      	movs	r1, #0
  4048c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4048c8:	f813 6b01 	ldrb.w	r6, [r3], #1
  4048cc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4048d0:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  4048d4:	2809      	cmp	r0, #9
  4048d6:	d9f5      	bls.n	4048c4 <_svfprintf_r+0x71c>
  4048d8:	910b      	str	r1, [sp, #44]	; 0x2c
  4048da:	e4bb      	b.n	404254 <_svfprintf_r+0xac>
  4048dc:	9308      	str	r3, [sp, #32]
  4048de:	46a4      	mov	ip, r4
  4048e0:	9b06      	ldr	r3, [sp, #24]
  4048e2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4048e6:	f043 0310 	orr.w	r3, r3, #16
  4048ea:	9306      	str	r3, [sp, #24]
  4048ec:	9b06      	ldr	r3, [sp, #24]
  4048ee:	069c      	lsls	r4, r3, #26
  4048f0:	f53f aed7 	bmi.w	4046a2 <_svfprintf_r+0x4fa>
  4048f4:	9b06      	ldr	r3, [sp, #24]
  4048f6:	06d8      	lsls	r0, r3, #27
  4048f8:	f140 83d5 	bpl.w	4050a6 <_svfprintf_r+0xefe>
  4048fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4048fe:	4613      	mov	r3, r2
  404900:	681c      	ldr	r4, [r3, #0]
  404902:	3304      	adds	r3, #4
  404904:	17e5      	asrs	r5, r4, #31
  404906:	4622      	mov	r2, r4
  404908:	930c      	str	r3, [sp, #48]	; 0x30
  40490a:	2a00      	cmp	r2, #0
  40490c:	462b      	mov	r3, r5
  40490e:	f173 0300 	sbcs.w	r3, r3, #0
  404912:	f6bf aed6 	bge.w	4046c2 <_svfprintf_r+0x51a>
  404916:	272d      	movs	r7, #45	; 0x2d
  404918:	4264      	negs	r4, r4
  40491a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40491e:	f04f 0301 	mov.w	r3, #1
  404922:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404926:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40492a:	e526      	b.n	40437a <_svfprintf_r+0x1d2>
  40492c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40492e:	9308      	str	r3, [sp, #32]
  404930:	3707      	adds	r7, #7
  404932:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404936:	f027 0307 	bic.w	r3, r7, #7
  40493a:	f103 0208 	add.w	r2, r3, #8
  40493e:	920c      	str	r2, [sp, #48]	; 0x30
  404940:	681a      	ldr	r2, [r3, #0]
  404942:	9213      	str	r2, [sp, #76]	; 0x4c
  404944:	685b      	ldr	r3, [r3, #4]
  404946:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404948:	9314      	str	r3, [sp, #80]	; 0x50
  40494a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40494c:	9407      	str	r4, [sp, #28]
  40494e:	f7fe fde3 	bl	403518 <__fpclassifyd>
  404952:	2801      	cmp	r0, #1
  404954:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404958:	f040 8355 	bne.w	405006 <_svfprintf_r+0xe5e>
  40495c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40495e:	2200      	movs	r2, #0
  404960:	2300      	movs	r3, #0
  404962:	9914      	ldr	r1, [sp, #80]	; 0x50
  404964:	f7ff fa24 	bl	403db0 <__aeabi_dcmplt>
  404968:	2800      	cmp	r0, #0
  40496a:	f040 8582 	bne.w	405472 <_svfprintf_r+0x12ca>
  40496e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404972:	2303      	movs	r3, #3
  404974:	9806      	ldr	r0, [sp, #24]
  404976:	4a58      	ldr	r2, [pc, #352]	; (404ad8 <_svfprintf_r+0x930>)
  404978:	2100      	movs	r1, #0
  40497a:	461c      	mov	r4, r3
  40497c:	9307      	str	r3, [sp, #28]
  40497e:	4b57      	ldr	r3, [pc, #348]	; (404adc <_svfprintf_r+0x934>)
  404980:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  404984:	9110      	str	r1, [sp, #64]	; 0x40
  404986:	2e47      	cmp	r6, #71	; 0x47
  404988:	bfd8      	it	le
  40498a:	461a      	movle	r2, r3
  40498c:	9006      	str	r0, [sp, #24]
  40498e:	9111      	str	r1, [sp, #68]	; 0x44
  404990:	920f      	str	r2, [sp, #60]	; 0x3c
  404992:	e51c      	b.n	4043ce <_svfprintf_r+0x226>
  404994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404996:	2230      	movs	r2, #48	; 0x30
  404998:	9806      	ldr	r0, [sp, #24]
  40499a:	46a4      	mov	ip, r4
  40499c:	4629      	mov	r1, r5
  40499e:	9308      	str	r3, [sp, #32]
  4049a0:	2378      	movs	r3, #120	; 0x78
  4049a2:	f040 0002 	orr.w	r0, r0, #2
  4049a6:	3104      	adds	r1, #4
  4049a8:	682c      	ldr	r4, [r5, #0]
  4049aa:	461e      	mov	r6, r3
  4049ac:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  4049b0:	4b48      	ldr	r3, [pc, #288]	; (404ad4 <_svfprintf_r+0x92c>)
  4049b2:	2500      	movs	r5, #0
  4049b4:	9006      	str	r0, [sp, #24]
  4049b6:	9315      	str	r3, [sp, #84]	; 0x54
  4049b8:	2302      	movs	r3, #2
  4049ba:	910c      	str	r1, [sp, #48]	; 0x30
  4049bc:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  4049c0:	e4d5      	b.n	40436e <_svfprintf_r+0x1c6>
  4049c2:	9308      	str	r3, [sp, #32]
  4049c4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4049c8:	2e00      	cmp	r6, #0
  4049ca:	f43f acab 	beq.w	404324 <_svfprintf_r+0x17c>
  4049ce:	2300      	movs	r3, #0
  4049d0:	2201      	movs	r2, #1
  4049d2:	a926      	add	r1, sp, #152	; 0x98
  4049d4:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4049d8:	9207      	str	r2, [sp, #28]
  4049da:	461f      	mov	r7, r3
  4049dc:	910f      	str	r1, [sp, #60]	; 0x3c
  4049de:	4614      	mov	r4, r2
  4049e0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4049e4:	9310      	str	r3, [sp, #64]	; 0x40
  4049e6:	9311      	str	r3, [sp, #68]	; 0x44
  4049e8:	e4f5      	b.n	4043d6 <_svfprintf_r+0x22e>
  4049ea:	9809      	ldr	r0, [sp, #36]	; 0x24
  4049ec:	4649      	mov	r1, r9
  4049ee:	aa23      	add	r2, sp, #140	; 0x8c
  4049f0:	f004 fb8c 	bl	40910c <__ssprint_r>
  4049f4:	2800      	cmp	r0, #0
  4049f6:	f47f ac9c 	bne.w	404332 <_svfprintf_r+0x18a>
  4049fa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4049fe:	46c3      	mov	fp, r8
  404a00:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404a04:	e53f      	b.n	404486 <_svfprintf_r+0x2de>
  404a06:	2e65      	cmp	r6, #101	; 0x65
  404a08:	f340 80c9 	ble.w	404b9e <_svfprintf_r+0x9f6>
  404a0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404a0e:	2200      	movs	r2, #0
  404a10:	2300      	movs	r3, #0
  404a12:	9914      	ldr	r1, [sp, #80]	; 0x50
  404a14:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  404a18:	f7ff f9c0 	bl	403d9c <__aeabi_dcmpeq>
  404a1c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  404a20:	2800      	cmp	r0, #0
  404a22:	f000 8165 	beq.w	404cf0 <_svfprintf_r+0xb48>
  404a26:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a28:	2201      	movs	r2, #1
  404a2a:	f10c 0c01 	add.w	ip, ip, #1
  404a2e:	492c      	ldr	r1, [pc, #176]	; (404ae0 <_svfprintf_r+0x938>)
  404a30:	4413      	add	r3, r2
  404a32:	f8cb 2004 	str.w	r2, [fp, #4]
  404a36:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a3a:	2b07      	cmp	r3, #7
  404a3c:	f8cb 1000 	str.w	r1, [fp]
  404a40:	9324      	str	r3, [sp, #144]	; 0x90
  404a42:	f300 8343 	bgt.w	4050cc <_svfprintf_r+0xf24>
  404a46:	f10b 0b08 	add.w	fp, fp, #8
  404a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404a4e:	4293      	cmp	r3, r2
  404a50:	db03      	blt.n	404a5a <_svfprintf_r+0x8b2>
  404a52:	9b06      	ldr	r3, [sp, #24]
  404a54:	07de      	lsls	r6, r3, #31
  404a56:	f57f ad92 	bpl.w	40457e <_svfprintf_r+0x3d6>
  404a5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a5c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404a5e:	3301      	adds	r3, #1
  404a60:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a62:	448c      	add	ip, r1
  404a64:	f8cb 1004 	str.w	r1, [fp, #4]
  404a68:	2b07      	cmp	r3, #7
  404a6a:	f8cb 2000 	str.w	r2, [fp]
  404a6e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404a72:	9324      	str	r3, [sp, #144]	; 0x90
  404a74:	f300 841d 	bgt.w	4052b2 <_svfprintf_r+0x110a>
  404a78:	f10b 0b08 	add.w	fp, fp, #8
  404a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a7e:	1e5c      	subs	r4, r3, #1
  404a80:	2c00      	cmp	r4, #0
  404a82:	f77f ad7c 	ble.w	40457e <_svfprintf_r+0x3d6>
  404a86:	2c10      	cmp	r4, #16
  404a88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a8a:	f340 85bc 	ble.w	405606 <_svfprintf_r+0x145e>
  404a8e:	2610      	movs	r6, #16
  404a90:	4d14      	ldr	r5, [pc, #80]	; (404ae4 <_svfprintf_r+0x93c>)
  404a92:	4662      	mov	r2, ip
  404a94:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404a96:	e003      	b.n	404aa0 <_svfprintf_r+0x8f8>
  404a98:	3c10      	subs	r4, #16
  404a9a:	2c10      	cmp	r4, #16
  404a9c:	f340 81c8 	ble.w	404e30 <_svfprintf_r+0xc88>
  404aa0:	3301      	adds	r3, #1
  404aa2:	3210      	adds	r2, #16
  404aa4:	f8cb 5000 	str.w	r5, [fp]
  404aa8:	f10b 0b08 	add.w	fp, fp, #8
  404aac:	2b07      	cmp	r3, #7
  404aae:	f84b 6c04 	str.w	r6, [fp, #-4]
  404ab2:	9225      	str	r2, [sp, #148]	; 0x94
  404ab4:	9324      	str	r3, [sp, #144]	; 0x90
  404ab6:	ddef      	ble.n	404a98 <_svfprintf_r+0x8f0>
  404ab8:	4638      	mov	r0, r7
  404aba:	4649      	mov	r1, r9
  404abc:	aa23      	add	r2, sp, #140	; 0x8c
  404abe:	46c3      	mov	fp, r8
  404ac0:	f004 fb24 	bl	40910c <__ssprint_r>
  404ac4:	2800      	cmp	r0, #0
  404ac6:	f47f ac34 	bne.w	404332 <_svfprintf_r+0x18a>
  404aca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ace:	e7e3      	b.n	404a98 <_svfprintf_r+0x8f0>
  404ad0:	00409e30 	.word	0x00409e30
  404ad4:	00409e44 	.word	0x00409e44
  404ad8:	00409e24 	.word	0x00409e24
  404adc:	00409e20 	.word	0x00409e20
  404ae0:	00409e60 	.word	0x00409e60
  404ae4:	00409e00 	.word	0x00409e00
  404ae8:	2b01      	cmp	r3, #1
  404aea:	f000 814d 	beq.w	404d88 <_svfprintf_r+0xbe0>
  404aee:	2b02      	cmp	r3, #2
  404af0:	f040 80e3 	bne.w	404cba <_svfprintf_r+0xb12>
  404af4:	46c2      	mov	sl, r8
  404af6:	9815      	ldr	r0, [sp, #84]	; 0x54
  404af8:	0923      	lsrs	r3, r4, #4
  404afa:	f004 010f 	and.w	r1, r4, #15
  404afe:	092a      	lsrs	r2, r5, #4
  404b00:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404b04:	4615      	mov	r5, r2
  404b06:	461c      	mov	r4, r3
  404b08:	5c43      	ldrb	r3, [r0, r1]
  404b0a:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  404b0e:	ea54 0305 	orrs.w	r3, r4, r5
  404b12:	d1f1      	bne.n	404af8 <_svfprintf_r+0x950>
  404b14:	4653      	mov	r3, sl
  404b16:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404b1a:	ebc3 0408 	rsb	r4, r3, r8
  404b1e:	e44f      	b.n	4043c0 <_svfprintf_r+0x218>
  404b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404b22:	9a07      	ldr	r2, [sp, #28]
  404b24:	1a9f      	subs	r7, r3, r2
  404b26:	2f00      	cmp	r7, #0
  404b28:	f77f acd9 	ble.w	4044de <_svfprintf_r+0x336>
  404b2c:	2f10      	cmp	r7, #16
  404b2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b30:	f340 84f9 	ble.w	405526 <_svfprintf_r+0x137e>
  404b34:	940d      	str	r4, [sp, #52]	; 0x34
  404b36:	f04f 0a10 	mov.w	sl, #16
  404b3a:	4dc8      	ldr	r5, [pc, #800]	; (404e5c <_svfprintf_r+0xcb4>)
  404b3c:	4662      	mov	r2, ip
  404b3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404b40:	e002      	b.n	404b48 <_svfprintf_r+0x9a0>
  404b42:	3f10      	subs	r7, #16
  404b44:	2f10      	cmp	r7, #16
  404b46:	dd19      	ble.n	404b7c <_svfprintf_r+0x9d4>
  404b48:	3301      	adds	r3, #1
  404b4a:	3210      	adds	r2, #16
  404b4c:	f8cb 5000 	str.w	r5, [fp]
  404b50:	f10b 0b08 	add.w	fp, fp, #8
  404b54:	2b07      	cmp	r3, #7
  404b56:	f84b ac04 	str.w	sl, [fp, #-4]
  404b5a:	9225      	str	r2, [sp, #148]	; 0x94
  404b5c:	9324      	str	r3, [sp, #144]	; 0x90
  404b5e:	ddf0      	ble.n	404b42 <_svfprintf_r+0x99a>
  404b60:	4620      	mov	r0, r4
  404b62:	4649      	mov	r1, r9
  404b64:	aa23      	add	r2, sp, #140	; 0x8c
  404b66:	46c3      	mov	fp, r8
  404b68:	f004 fad0 	bl	40910c <__ssprint_r>
  404b6c:	2800      	cmp	r0, #0
  404b6e:	f47f abe0 	bne.w	404332 <_svfprintf_r+0x18a>
  404b72:	3f10      	subs	r7, #16
  404b74:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404b76:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404b78:	2f10      	cmp	r7, #16
  404b7a:	dce5      	bgt.n	404b48 <_svfprintf_r+0x9a0>
  404b7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404b7e:	4694      	mov	ip, r2
  404b80:	3301      	adds	r3, #1
  404b82:	44bc      	add	ip, r7
  404b84:	f8cb 5000 	str.w	r5, [fp]
  404b88:	2b07      	cmp	r3, #7
  404b8a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404b8e:	9324      	str	r3, [sp, #144]	; 0x90
  404b90:	f8cb 7004 	str.w	r7, [fp, #4]
  404b94:	f300 81fc 	bgt.w	404f90 <_svfprintf_r+0xde8>
  404b98:	f10b 0b08 	add.w	fp, fp, #8
  404b9c:	e49f      	b.n	4044de <_svfprintf_r+0x336>
  404b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ba0:	f10c 0601 	add.w	r6, ip, #1
  404ba4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404ba6:	2b01      	cmp	r3, #1
  404ba8:	f340 81c9 	ble.w	404f3e <_svfprintf_r+0xd96>
  404bac:	2301      	movs	r3, #1
  404bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bb0:	9625      	str	r6, [sp, #148]	; 0x94
  404bb2:	441c      	add	r4, r3
  404bb4:	f8cb 2000 	str.w	r2, [fp]
  404bb8:	f8cb 3004 	str.w	r3, [fp, #4]
  404bbc:	2c07      	cmp	r4, #7
  404bbe:	9424      	str	r4, [sp, #144]	; 0x90
  404bc0:	f300 81da 	bgt.w	404f78 <_svfprintf_r+0xdd0>
  404bc4:	f10b 0b08 	add.w	fp, fp, #8
  404bc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404bca:	3401      	adds	r4, #1
  404bcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  404bce:	4416      	add	r6, r2
  404bd0:	2c07      	cmp	r4, #7
  404bd2:	f8cb 3000 	str.w	r3, [fp]
  404bd6:	9625      	str	r6, [sp, #148]	; 0x94
  404bd8:	9424      	str	r4, [sp, #144]	; 0x90
  404bda:	f8cb 2004 	str.w	r2, [fp, #4]
  404bde:	f300 81bf 	bgt.w	404f60 <_svfprintf_r+0xdb8>
  404be2:	f10b 0b08 	add.w	fp, fp, #8
  404be6:	2300      	movs	r3, #0
  404be8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404bea:	2200      	movs	r2, #0
  404bec:	9914      	ldr	r1, [sp, #80]	; 0x50
  404bee:	f7ff f8d5 	bl	403d9c <__aeabi_dcmpeq>
  404bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404bf4:	2800      	cmp	r0, #0
  404bf6:	f040 80dc 	bne.w	404db2 <_svfprintf_r+0xc0a>
  404bfa:	3b01      	subs	r3, #1
  404bfc:	3401      	adds	r4, #1
  404bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c00:	441e      	add	r6, r3
  404c02:	2c07      	cmp	r4, #7
  404c04:	f102 0201 	add.w	r2, r2, #1
  404c08:	9424      	str	r4, [sp, #144]	; 0x90
  404c0a:	9625      	str	r6, [sp, #148]	; 0x94
  404c0c:	f8cb 2000 	str.w	r2, [fp]
  404c10:	f8cb 3004 	str.w	r3, [fp, #4]
  404c14:	f300 8100 	bgt.w	404e18 <_svfprintf_r+0xc70>
  404c18:	f10b 0b08 	add.w	fp, fp, #8
  404c1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404c1e:	3401      	adds	r4, #1
  404c20:	ab1f      	add	r3, sp, #124	; 0x7c
  404c22:	eb06 0c02 	add.w	ip, r6, r2
  404c26:	2c07      	cmp	r4, #7
  404c28:	f8cb 2004 	str.w	r2, [fp, #4]
  404c2c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404c30:	9424      	str	r4, [sp, #144]	; 0x90
  404c32:	f8cb 3000 	str.w	r3, [fp]
  404c36:	f77f aca0 	ble.w	40457a <_svfprintf_r+0x3d2>
  404c3a:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c3c:	4649      	mov	r1, r9
  404c3e:	aa23      	add	r2, sp, #140	; 0x8c
  404c40:	f004 fa64 	bl	40910c <__ssprint_r>
  404c44:	2800      	cmp	r0, #0
  404c46:	f47f ab74 	bne.w	404332 <_svfprintf_r+0x18a>
  404c4a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404c4e:	46c3      	mov	fp, r8
  404c50:	e495      	b.n	40457e <_svfprintf_r+0x3d6>
  404c52:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c54:	4649      	mov	r1, r9
  404c56:	aa23      	add	r2, sp, #140	; 0x8c
  404c58:	f004 fa58 	bl	40910c <__ssprint_r>
  404c5c:	2800      	cmp	r0, #0
  404c5e:	f43f acde 	beq.w	40461e <_svfprintf_r+0x476>
  404c62:	f7ff bb66 	b.w	404332 <_svfprintf_r+0x18a>
  404c66:	4614      	mov	r4, r2
  404c68:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  404c6c:	f7ff bba8 	b.w	4043c0 <_svfprintf_r+0x218>
  404c70:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c72:	4649      	mov	r1, r9
  404c74:	aa23      	add	r2, sp, #140	; 0x8c
  404c76:	f004 fa49 	bl	40910c <__ssprint_r>
  404c7a:	2800      	cmp	r0, #0
  404c7c:	f47f ab59 	bne.w	404332 <_svfprintf_r+0x18a>
  404c80:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404c84:	46c3      	mov	fp, r8
  404c86:	e466      	b.n	404556 <_svfprintf_r+0x3ae>
  404c88:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c8a:	4649      	mov	r1, r9
  404c8c:	aa23      	add	r2, sp, #140	; 0x8c
  404c8e:	f004 fa3d 	bl	40910c <__ssprint_r>
  404c92:	2800      	cmp	r0, #0
  404c94:	f47f ab4d 	bne.w	404332 <_svfprintf_r+0x18a>
  404c98:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404c9c:	46c3      	mov	fp, r8
  404c9e:	e41a      	b.n	4044d6 <_svfprintf_r+0x32e>
  404ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
  404ca2:	4649      	mov	r1, r9
  404ca4:	aa23      	add	r2, sp, #140	; 0x8c
  404ca6:	f004 fa31 	bl	40910c <__ssprint_r>
  404caa:	2800      	cmp	r0, #0
  404cac:	f47f ab41 	bne.w	404332 <_svfprintf_r+0x18a>
  404cb0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404cb4:	46c3      	mov	fp, r8
  404cb6:	f7ff bbfa 	b.w	4044ae <_svfprintf_r+0x306>
  404cba:	4641      	mov	r1, r8
  404cbc:	08e2      	lsrs	r2, r4, #3
  404cbe:	f004 0307 	and.w	r3, r4, #7
  404cc2:	08e8      	lsrs	r0, r5, #3
  404cc4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404cc8:	3330      	adds	r3, #48	; 0x30
  404cca:	4605      	mov	r5, r0
  404ccc:	4614      	mov	r4, r2
  404cce:	f801 3d01 	strb.w	r3, [r1, #-1]!
  404cd2:	ea54 0205 	orrs.w	r2, r4, r5
  404cd6:	d1f1      	bne.n	404cbc <_svfprintf_r+0xb14>
  404cd8:	9a06      	ldr	r2, [sp, #24]
  404cda:	910f      	str	r1, [sp, #60]	; 0x3c
  404cdc:	07d0      	lsls	r0, r2, #31
  404cde:	f100 8164 	bmi.w	404faa <_svfprintf_r+0xe02>
  404ce2:	ebc1 0408 	rsb	r4, r1, r8
  404ce6:	f7ff bb6b 	b.w	4043c0 <_svfprintf_r+0x218>
  404cea:	2302      	movs	r3, #2
  404cec:	f7ff bb3f 	b.w	40436e <_svfprintf_r+0x1c6>
  404cf0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  404cf2:	2c00      	cmp	r4, #0
  404cf4:	f340 81f6 	ble.w	4050e4 <_svfprintf_r+0xf3c>
  404cf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404cfa:	9911      	ldr	r1, [sp, #68]	; 0x44
  404cfc:	4613      	mov	r3, r2
  404cfe:	428a      	cmp	r2, r1
  404d00:	bfa8      	it	ge
  404d02:	460b      	movge	r3, r1
  404d04:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d06:	461c      	mov	r4, r3
  404d08:	188f      	adds	r7, r1, r2
  404d0a:	2c00      	cmp	r4, #0
  404d0c:	dd0e      	ble.n	404d2c <_svfprintf_r+0xb84>
  404d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d10:	44a4      	add	ip, r4
  404d12:	f8cb 1000 	str.w	r1, [fp]
  404d16:	3301      	adds	r3, #1
  404d18:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404d1c:	f8cb 4004 	str.w	r4, [fp, #4]
  404d20:	2b07      	cmp	r3, #7
  404d22:	9324      	str	r3, [sp, #144]	; 0x90
  404d24:	f300 8353 	bgt.w	4053ce <_svfprintf_r+0x1226>
  404d28:	f10b 0b08 	add.w	fp, fp, #8
  404d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d2e:	2c00      	cmp	r4, #0
  404d30:	bfa8      	it	ge
  404d32:	1b1b      	subge	r3, r3, r4
  404d34:	2b00      	cmp	r3, #0
  404d36:	461c      	mov	r4, r3
  404d38:	f340 80a1 	ble.w	404e7e <_svfprintf_r+0xcd6>
  404d3c:	2c10      	cmp	r4, #16
  404d3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d40:	f340 846c 	ble.w	40561c <_svfprintf_r+0x1474>
  404d44:	2610      	movs	r6, #16
  404d46:	4d45      	ldr	r5, [pc, #276]	; (404e5c <_svfprintf_r+0xcb4>)
  404d48:	4662      	mov	r2, ip
  404d4a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  404d4e:	e003      	b.n	404d58 <_svfprintf_r+0xbb0>
  404d50:	3c10      	subs	r4, #16
  404d52:	2c10      	cmp	r4, #16
  404d54:	f340 8084 	ble.w	404e60 <_svfprintf_r+0xcb8>
  404d58:	3301      	adds	r3, #1
  404d5a:	3210      	adds	r2, #16
  404d5c:	f8cb 5000 	str.w	r5, [fp]
  404d60:	f10b 0b08 	add.w	fp, fp, #8
  404d64:	2b07      	cmp	r3, #7
  404d66:	f84b 6c04 	str.w	r6, [fp, #-4]
  404d6a:	9225      	str	r2, [sp, #148]	; 0x94
  404d6c:	9324      	str	r3, [sp, #144]	; 0x90
  404d6e:	ddef      	ble.n	404d50 <_svfprintf_r+0xba8>
  404d70:	4650      	mov	r0, sl
  404d72:	4649      	mov	r1, r9
  404d74:	aa23      	add	r2, sp, #140	; 0x8c
  404d76:	46c3      	mov	fp, r8
  404d78:	f004 f9c8 	bl	40910c <__ssprint_r>
  404d7c:	2800      	cmp	r0, #0
  404d7e:	f47f aad8 	bne.w	404332 <_svfprintf_r+0x18a>
  404d82:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d84:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d86:	e7e3      	b.n	404d50 <_svfprintf_r+0xba8>
  404d88:	2d00      	cmp	r5, #0
  404d8a:	bf08      	it	eq
  404d8c:	2c0a      	cmpeq	r4, #10
  404d8e:	f080 811a 	bcs.w	404fc6 <_svfprintf_r+0xe1e>
  404d92:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  404d96:	3430      	adds	r4, #48	; 0x30
  404d98:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  404d9c:	ebca 0408 	rsb	r4, sl, r8
  404da0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  404da4:	f7ff bb0c 	b.w	4043c0 <_svfprintf_r+0x218>
  404da8:	461c      	mov	r4, r3
  404daa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  404dae:	f7ff bb07 	b.w	4043c0 <_svfprintf_r+0x218>
  404db2:	1e5f      	subs	r7, r3, #1
  404db4:	2f00      	cmp	r7, #0
  404db6:	f77f af31 	ble.w	404c1c <_svfprintf_r+0xa74>
  404dba:	2f10      	cmp	r7, #16
  404dbc:	4d27      	ldr	r5, [pc, #156]	; (404e5c <_svfprintf_r+0xcb4>)
  404dbe:	bfc8      	it	gt
  404dc0:	f04f 0a10 	movgt.w	sl, #16
  404dc4:	dc03      	bgt.n	404dce <_svfprintf_r+0xc26>
  404dc6:	e01c      	b.n	404e02 <_svfprintf_r+0xc5a>
  404dc8:	3f10      	subs	r7, #16
  404dca:	2f10      	cmp	r7, #16
  404dcc:	dd19      	ble.n	404e02 <_svfprintf_r+0xc5a>
  404dce:	3401      	adds	r4, #1
  404dd0:	3610      	adds	r6, #16
  404dd2:	f8cb 5000 	str.w	r5, [fp]
  404dd6:	f10b 0b08 	add.w	fp, fp, #8
  404dda:	2c07      	cmp	r4, #7
  404ddc:	f84b ac04 	str.w	sl, [fp, #-4]
  404de0:	9625      	str	r6, [sp, #148]	; 0x94
  404de2:	9424      	str	r4, [sp, #144]	; 0x90
  404de4:	ddf0      	ble.n	404dc8 <_svfprintf_r+0xc20>
  404de6:	9809      	ldr	r0, [sp, #36]	; 0x24
  404de8:	4649      	mov	r1, r9
  404dea:	aa23      	add	r2, sp, #140	; 0x8c
  404dec:	46c3      	mov	fp, r8
  404dee:	f004 f98d 	bl	40910c <__ssprint_r>
  404df2:	2800      	cmp	r0, #0
  404df4:	f47f aa9d 	bne.w	404332 <_svfprintf_r+0x18a>
  404df8:	3f10      	subs	r7, #16
  404dfa:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404dfc:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404dfe:	2f10      	cmp	r7, #16
  404e00:	dce5      	bgt.n	404dce <_svfprintf_r+0xc26>
  404e02:	3401      	adds	r4, #1
  404e04:	443e      	add	r6, r7
  404e06:	f8cb 5000 	str.w	r5, [fp]
  404e0a:	2c07      	cmp	r4, #7
  404e0c:	9625      	str	r6, [sp, #148]	; 0x94
  404e0e:	9424      	str	r4, [sp, #144]	; 0x90
  404e10:	f8cb 7004 	str.w	r7, [fp, #4]
  404e14:	f77f af00 	ble.w	404c18 <_svfprintf_r+0xa70>
  404e18:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e1a:	4649      	mov	r1, r9
  404e1c:	aa23      	add	r2, sp, #140	; 0x8c
  404e1e:	f004 f975 	bl	40910c <__ssprint_r>
  404e22:	2800      	cmp	r0, #0
  404e24:	f47f aa85 	bne.w	404332 <_svfprintf_r+0x18a>
  404e28:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404e2a:	46c3      	mov	fp, r8
  404e2c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404e2e:	e6f5      	b.n	404c1c <_svfprintf_r+0xa74>
  404e30:	4694      	mov	ip, r2
  404e32:	3301      	adds	r3, #1
  404e34:	44a4      	add	ip, r4
  404e36:	f8cb 5000 	str.w	r5, [fp]
  404e3a:	2b07      	cmp	r3, #7
  404e3c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404e40:	9324      	str	r3, [sp, #144]	; 0x90
  404e42:	f8cb 4004 	str.w	r4, [fp, #4]
  404e46:	f77f ab98 	ble.w	40457a <_svfprintf_r+0x3d2>
  404e4a:	e6f6      	b.n	404c3a <_svfprintf_r+0xa92>
  404e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
  404e4e:	2500      	movs	r5, #0
  404e50:	460a      	mov	r2, r1
  404e52:	680c      	ldr	r4, [r1, #0]
  404e54:	3204      	adds	r2, #4
  404e56:	920c      	str	r2, [sp, #48]	; 0x30
  404e58:	f7ff ba89 	b.w	40436e <_svfprintf_r+0x1c6>
  404e5c:	00409e00 	.word	0x00409e00
  404e60:	4694      	mov	ip, r2
  404e62:	3301      	adds	r3, #1
  404e64:	44a4      	add	ip, r4
  404e66:	f8cb 5000 	str.w	r5, [fp]
  404e6a:	2b07      	cmp	r3, #7
  404e6c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404e70:	9324      	str	r3, [sp, #144]	; 0x90
  404e72:	f8cb 4004 	str.w	r4, [fp, #4]
  404e76:	f300 82df 	bgt.w	405438 <_svfprintf_r+0x1290>
  404e7a:	f10b 0b08 	add.w	fp, fp, #8
  404e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e80:	9911      	ldr	r1, [sp, #68]	; 0x44
  404e82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404e84:	440a      	add	r2, r1
  404e86:	4616      	mov	r6, r2
  404e88:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404e8a:	4293      	cmp	r3, r2
  404e8c:	db45      	blt.n	404f1a <_svfprintf_r+0xd72>
  404e8e:	9a06      	ldr	r2, [sp, #24]
  404e90:	07d0      	lsls	r0, r2, #31
  404e92:	d442      	bmi.n	404f1a <_svfprintf_r+0xd72>
  404e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404e96:	1bbc      	subs	r4, r7, r6
  404e98:	1ad3      	subs	r3, r2, r3
  404e9a:	429c      	cmp	r4, r3
  404e9c:	bfa8      	it	ge
  404e9e:	461c      	movge	r4, r3
  404ea0:	2c00      	cmp	r4, #0
  404ea2:	4625      	mov	r5, r4
  404ea4:	dd0e      	ble.n	404ec4 <_svfprintf_r+0xd1c>
  404ea6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404ea8:	44a4      	add	ip, r4
  404eaa:	f8cb 6000 	str.w	r6, [fp]
  404eae:	3201      	adds	r2, #1
  404eb0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404eb4:	f8cb 4004 	str.w	r4, [fp, #4]
  404eb8:	2a07      	cmp	r2, #7
  404eba:	9224      	str	r2, [sp, #144]	; 0x90
  404ebc:	f300 82a0 	bgt.w	405400 <_svfprintf_r+0x1258>
  404ec0:	f10b 0b08 	add.w	fp, fp, #8
  404ec4:	2d00      	cmp	r5, #0
  404ec6:	bfac      	ite	ge
  404ec8:	1b5c      	subge	r4, r3, r5
  404eca:	461c      	movlt	r4, r3
  404ecc:	2c00      	cmp	r4, #0
  404ece:	f77f ab56 	ble.w	40457e <_svfprintf_r+0x3d6>
  404ed2:	2c10      	cmp	r4, #16
  404ed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ed6:	f340 8396 	ble.w	405606 <_svfprintf_r+0x145e>
  404eda:	2610      	movs	r6, #16
  404edc:	4db1      	ldr	r5, [pc, #708]	; (4051a4 <_svfprintf_r+0xffc>)
  404ede:	4662      	mov	r2, ip
  404ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404ee2:	e002      	b.n	404eea <_svfprintf_r+0xd42>
  404ee4:	3c10      	subs	r4, #16
  404ee6:	2c10      	cmp	r4, #16
  404ee8:	dda2      	ble.n	404e30 <_svfprintf_r+0xc88>
  404eea:	3301      	adds	r3, #1
  404eec:	3210      	adds	r2, #16
  404eee:	f8cb 5000 	str.w	r5, [fp]
  404ef2:	f10b 0b08 	add.w	fp, fp, #8
  404ef6:	2b07      	cmp	r3, #7
  404ef8:	f84b 6c04 	str.w	r6, [fp, #-4]
  404efc:	9225      	str	r2, [sp, #148]	; 0x94
  404efe:	9324      	str	r3, [sp, #144]	; 0x90
  404f00:	ddf0      	ble.n	404ee4 <_svfprintf_r+0xd3c>
  404f02:	4638      	mov	r0, r7
  404f04:	4649      	mov	r1, r9
  404f06:	aa23      	add	r2, sp, #140	; 0x8c
  404f08:	46c3      	mov	fp, r8
  404f0a:	f004 f8ff 	bl	40910c <__ssprint_r>
  404f0e:	2800      	cmp	r0, #0
  404f10:	f47f aa0f 	bne.w	404332 <_svfprintf_r+0x18a>
  404f14:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f18:	e7e4      	b.n	404ee4 <_svfprintf_r+0xd3c>
  404f1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
  404f1e:	3201      	adds	r2, #1
  404f20:	9916      	ldr	r1, [sp, #88]	; 0x58
  404f22:	4484      	add	ip, r0
  404f24:	f8cb 0004 	str.w	r0, [fp, #4]
  404f28:	2a07      	cmp	r2, #7
  404f2a:	f8cb 1000 	str.w	r1, [fp]
  404f2e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  404f32:	9224      	str	r2, [sp, #144]	; 0x90
  404f34:	f300 8273 	bgt.w	40541e <_svfprintf_r+0x1276>
  404f38:	f10b 0b08 	add.w	fp, fp, #8
  404f3c:	e7aa      	b.n	404e94 <_svfprintf_r+0xcec>
  404f3e:	9b06      	ldr	r3, [sp, #24]
  404f40:	07d9      	lsls	r1, r3, #31
  404f42:	f53f ae33 	bmi.w	404bac <_svfprintf_r+0xa04>
  404f46:	2301      	movs	r3, #1
  404f48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404f4a:	9625      	str	r6, [sp, #148]	; 0x94
  404f4c:	441c      	add	r4, r3
  404f4e:	f8cb 2000 	str.w	r2, [fp]
  404f52:	f8cb 3004 	str.w	r3, [fp, #4]
  404f56:	2c07      	cmp	r4, #7
  404f58:	9424      	str	r4, [sp, #144]	; 0x90
  404f5a:	f77f ae5d 	ble.w	404c18 <_svfprintf_r+0xa70>
  404f5e:	e75b      	b.n	404e18 <_svfprintf_r+0xc70>
  404f60:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f62:	4649      	mov	r1, r9
  404f64:	aa23      	add	r2, sp, #140	; 0x8c
  404f66:	f004 f8d1 	bl	40910c <__ssprint_r>
  404f6a:	2800      	cmp	r0, #0
  404f6c:	f47f a9e1 	bne.w	404332 <_svfprintf_r+0x18a>
  404f70:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404f72:	46c3      	mov	fp, r8
  404f74:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404f76:	e636      	b.n	404be6 <_svfprintf_r+0xa3e>
  404f78:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f7a:	4649      	mov	r1, r9
  404f7c:	aa23      	add	r2, sp, #140	; 0x8c
  404f7e:	f004 f8c5 	bl	40910c <__ssprint_r>
  404f82:	2800      	cmp	r0, #0
  404f84:	f47f a9d5 	bne.w	404332 <_svfprintf_r+0x18a>
  404f88:	9e25      	ldr	r6, [sp, #148]	; 0x94
  404f8a:	46c3      	mov	fp, r8
  404f8c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  404f8e:	e61b      	b.n	404bc8 <_svfprintf_r+0xa20>
  404f90:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f92:	4649      	mov	r1, r9
  404f94:	aa23      	add	r2, sp, #140	; 0x8c
  404f96:	f004 f8b9 	bl	40910c <__ssprint_r>
  404f9a:	2800      	cmp	r0, #0
  404f9c:	f47f a9c9 	bne.w	404332 <_svfprintf_r+0x18a>
  404fa0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  404fa4:	46c3      	mov	fp, r8
  404fa6:	f7ff ba9a 	b.w	4044de <_svfprintf_r+0x336>
  404faa:	2b30      	cmp	r3, #48	; 0x30
  404fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404fae:	f43f adb4 	beq.w	404b1a <_svfprintf_r+0x972>
  404fb2:	3b01      	subs	r3, #1
  404fb4:	461a      	mov	r2, r3
  404fb6:	930f      	str	r3, [sp, #60]	; 0x3c
  404fb8:	2330      	movs	r3, #48	; 0x30
  404fba:	ebc2 0408 	rsb	r4, r2, r8
  404fbe:	f801 3c01 	strb.w	r3, [r1, #-1]
  404fc2:	f7ff b9fd 	b.w	4043c0 <_svfprintf_r+0x218>
  404fc6:	46c2      	mov	sl, r8
  404fc8:	f8cd c01c 	str.w	ip, [sp, #28]
  404fcc:	4620      	mov	r0, r4
  404fce:	4629      	mov	r1, r5
  404fd0:	220a      	movs	r2, #10
  404fd2:	2300      	movs	r3, #0
  404fd4:	f004 fae6 	bl	4095a4 <__aeabi_uldivmod>
  404fd8:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  404fdc:	4620      	mov	r0, r4
  404fde:	4629      	mov	r1, r5
  404fe0:	2300      	movs	r3, #0
  404fe2:	220a      	movs	r2, #10
  404fe4:	f80a ed01 	strb.w	lr, [sl, #-1]!
  404fe8:	f004 fadc 	bl	4095a4 <__aeabi_uldivmod>
  404fec:	4604      	mov	r4, r0
  404fee:	460d      	mov	r5, r1
  404ff0:	ea54 0305 	orrs.w	r3, r4, r5
  404ff4:	d1ea      	bne.n	404fcc <_svfprintf_r+0xe24>
  404ff6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404ffa:	ebca 0408 	rsb	r4, sl, r8
  404ffe:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  405002:	f7ff b9dd 	b.w	4043c0 <_svfprintf_r+0x218>
  405006:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405008:	9914      	ldr	r1, [sp, #80]	; 0x50
  40500a:	f8cd c01c 	str.w	ip, [sp, #28]
  40500e:	f7fe fa83 	bl	403518 <__fpclassifyd>
  405012:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405016:	2800      	cmp	r0, #0
  405018:	f040 80cc 	bne.w	4051b4 <_svfprintf_r+0x100c>
  40501c:	9c06      	ldr	r4, [sp, #24]
  40501e:	2103      	movs	r1, #3
  405020:	4a61      	ldr	r2, [pc, #388]	; (4051a8 <_svfprintf_r+0x1000>)
  405022:	4b62      	ldr	r3, [pc, #392]	; (4051ac <_svfprintf_r+0x1004>)
  405024:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  405028:	9010      	str	r0, [sp, #64]	; 0x40
  40502a:	2e47      	cmp	r6, #71	; 0x47
  40502c:	bfd8      	it	le
  40502e:	461a      	movle	r2, r3
  405030:	9406      	str	r4, [sp, #24]
  405032:	9107      	str	r1, [sp, #28]
  405034:	460c      	mov	r4, r1
  405036:	9011      	str	r0, [sp, #68]	; 0x44
  405038:	920f      	str	r2, [sp, #60]	; 0x3c
  40503a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40503e:	f7ff b9c6 	b.w	4043ce <_svfprintf_r+0x226>
  405042:	9b06      	ldr	r3, [sp, #24]
  405044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405046:	f013 0f40 	tst.w	r3, #64	; 0x40
  40504a:	4613      	mov	r3, r2
  40504c:	f43f abc9 	beq.w	4047e2 <_svfprintf_r+0x63a>
  405050:	8814      	ldrh	r4, [r2, #0]
  405052:	3204      	adds	r2, #4
  405054:	2500      	movs	r5, #0
  405056:	2301      	movs	r3, #1
  405058:	920c      	str	r2, [sp, #48]	; 0x30
  40505a:	f7ff b988 	b.w	40436e <_svfprintf_r+0x1c6>
  40505e:	9b06      	ldr	r3, [sp, #24]
  405060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405062:	f013 0f40 	tst.w	r3, #64	; 0x40
  405066:	4613      	mov	r3, r2
  405068:	f000 8130 	beq.w	4052cc <_svfprintf_r+0x1124>
  40506c:	3304      	adds	r3, #4
  40506e:	8814      	ldrh	r4, [r2, #0]
  405070:	2500      	movs	r5, #0
  405072:	930c      	str	r3, [sp, #48]	; 0x30
  405074:	f7ff bbcd 	b.w	404812 <_svfprintf_r+0x66a>
  405078:	9b06      	ldr	r3, [sp, #24]
  40507a:	06dd      	lsls	r5, r3, #27
  40507c:	d40b      	bmi.n	405096 <_svfprintf_r+0xeee>
  40507e:	9b06      	ldr	r3, [sp, #24]
  405080:	065c      	lsls	r4, r3, #25
  405082:	d508      	bpl.n	405096 <_svfprintf_r+0xeee>
  405084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405086:	6813      	ldr	r3, [r2, #0]
  405088:	3204      	adds	r2, #4
  40508a:	920c      	str	r2, [sp, #48]	; 0x30
  40508c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  405090:	801a      	strh	r2, [r3, #0]
  405092:	f7ff b8af 	b.w	4041f4 <_svfprintf_r+0x4c>
  405096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405098:	6813      	ldr	r3, [r2, #0]
  40509a:	3204      	adds	r2, #4
  40509c:	920c      	str	r2, [sp, #48]	; 0x30
  40509e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4050a0:	601a      	str	r2, [r3, #0]
  4050a2:	f7ff b8a7 	b.w	4041f4 <_svfprintf_r+0x4c>
  4050a6:	9b06      	ldr	r3, [sp, #24]
  4050a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4050aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4050ae:	4613      	mov	r3, r2
  4050b0:	f43f ac26 	beq.w	404900 <_svfprintf_r+0x758>
  4050b4:	f9b2 4000 	ldrsh.w	r4, [r2]
  4050b8:	3304      	adds	r3, #4
  4050ba:	17e5      	asrs	r5, r4, #31
  4050bc:	930c      	str	r3, [sp, #48]	; 0x30
  4050be:	4622      	mov	r2, r4
  4050c0:	462b      	mov	r3, r5
  4050c2:	f7ff baf9 	b.w	4046b8 <_svfprintf_r+0x510>
  4050c6:	4d37      	ldr	r5, [pc, #220]	; (4051a4 <_svfprintf_r+0xffc>)
  4050c8:	f7ff ba37 	b.w	40453a <_svfprintf_r+0x392>
  4050cc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4050ce:	4649      	mov	r1, r9
  4050d0:	aa23      	add	r2, sp, #140	; 0x8c
  4050d2:	f004 f81b 	bl	40910c <__ssprint_r>
  4050d6:	2800      	cmp	r0, #0
  4050d8:	f47f a92b 	bne.w	404332 <_svfprintf_r+0x18a>
  4050dc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4050e0:	46c3      	mov	fp, r8
  4050e2:	e4b2      	b.n	404a4a <_svfprintf_r+0x8a2>
  4050e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050e6:	2201      	movs	r2, #1
  4050e8:	f10c 0c01 	add.w	ip, ip, #1
  4050ec:	4930      	ldr	r1, [pc, #192]	; (4051b0 <_svfprintf_r+0x1008>)
  4050ee:	4413      	add	r3, r2
  4050f0:	f8cb 2004 	str.w	r2, [fp, #4]
  4050f4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4050f8:	2b07      	cmp	r3, #7
  4050fa:	f8cb 1000 	str.w	r1, [fp]
  4050fe:	9324      	str	r3, [sp, #144]	; 0x90
  405100:	f300 80fa 	bgt.w	4052f8 <_svfprintf_r+0x1150>
  405104:	f10b 0b08 	add.w	fp, fp, #8
  405108:	b92c      	cbnz	r4, 405116 <_svfprintf_r+0xf6e>
  40510a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40510c:	b91b      	cbnz	r3, 405116 <_svfprintf_r+0xf6e>
  40510e:	9b06      	ldr	r3, [sp, #24]
  405110:	07dd      	lsls	r5, r3, #31
  405112:	f57f aa34 	bpl.w	40457e <_svfprintf_r+0x3d6>
  405116:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405118:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40511a:	3301      	adds	r3, #1
  40511c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40511e:	eb0c 0201 	add.w	r2, ip, r1
  405122:	f8cb 1004 	str.w	r1, [fp, #4]
  405126:	2b07      	cmp	r3, #7
  405128:	f8cb 0000 	str.w	r0, [fp]
  40512c:	9225      	str	r2, [sp, #148]	; 0x94
  40512e:	9324      	str	r3, [sp, #144]	; 0x90
  405130:	f300 824c 	bgt.w	4055cc <_svfprintf_r+0x1424>
  405134:	f10b 0b08 	add.w	fp, fp, #8
  405138:	4264      	negs	r4, r4
  40513a:	2c00      	cmp	r4, #0
  40513c:	f340 8126 	ble.w	40538c <_svfprintf_r+0x11e4>
  405140:	2c10      	cmp	r4, #16
  405142:	4d18      	ldr	r5, [pc, #96]	; (4051a4 <_svfprintf_r+0xffc>)
  405144:	f340 814f 	ble.w	4053e6 <_svfprintf_r+0x123e>
  405148:	2610      	movs	r6, #16
  40514a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40514c:	e003      	b.n	405156 <_svfprintf_r+0xfae>
  40514e:	3c10      	subs	r4, #16
  405150:	2c10      	cmp	r4, #16
  405152:	f340 8148 	ble.w	4053e6 <_svfprintf_r+0x123e>
  405156:	3301      	adds	r3, #1
  405158:	3210      	adds	r2, #16
  40515a:	f8cb 5000 	str.w	r5, [fp]
  40515e:	f10b 0b08 	add.w	fp, fp, #8
  405162:	2b07      	cmp	r3, #7
  405164:	f84b 6c04 	str.w	r6, [fp, #-4]
  405168:	9225      	str	r2, [sp, #148]	; 0x94
  40516a:	9324      	str	r3, [sp, #144]	; 0x90
  40516c:	ddef      	ble.n	40514e <_svfprintf_r+0xfa6>
  40516e:	4638      	mov	r0, r7
  405170:	4649      	mov	r1, r9
  405172:	aa23      	add	r2, sp, #140	; 0x8c
  405174:	46c3      	mov	fp, r8
  405176:	f003 ffc9 	bl	40910c <__ssprint_r>
  40517a:	2800      	cmp	r0, #0
  40517c:	f47f a8d9 	bne.w	404332 <_svfprintf_r+0x18a>
  405180:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405182:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405184:	e7e3      	b.n	40514e <_svfprintf_r+0xfa6>
  405186:	f041 0120 	orr.w	r1, r1, #32
  40518a:	785e      	ldrb	r6, [r3, #1]
  40518c:	9106      	str	r1, [sp, #24]
  40518e:	1c59      	adds	r1, r3, #1
  405190:	f7ff b85f 	b.w	404252 <_svfprintf_r+0xaa>
  405194:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405196:	910c      	str	r1, [sp, #48]	; 0x30
  405198:	4619      	mov	r1, r3
  40519a:	4240      	negs	r0, r0
  40519c:	900b      	str	r0, [sp, #44]	; 0x2c
  40519e:	f7ff ba43 	b.w	404628 <_svfprintf_r+0x480>
  4051a2:	bf00      	nop
  4051a4:	00409e00 	.word	0x00409e00
  4051a8:	00409e2c 	.word	0x00409e2c
  4051ac:	00409e28 	.word	0x00409e28
  4051b0:	00409e60 	.word	0x00409e60
  4051b4:	f1bc 3fff 	cmp.w	ip, #4294967295
  4051b8:	f026 0a20 	bic.w	sl, r6, #32
  4051bc:	f000 80a9 	beq.w	405312 <_svfprintf_r+0x116a>
  4051c0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4051c4:	f040 80a7 	bne.w	405316 <_svfprintf_r+0x116e>
  4051c8:	f1bc 0f00 	cmp.w	ip, #0
  4051cc:	f040 80a3 	bne.w	405316 <_svfprintf_r+0x116e>
  4051d0:	9b06      	ldr	r3, [sp, #24]
  4051d2:	f04f 0a47 	mov.w	sl, #71	; 0x47
  4051d6:	f04f 0c01 	mov.w	ip, #1
  4051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4051de:	930e      	str	r3, [sp, #56]	; 0x38
  4051e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4051e2:	2b00      	cmp	r3, #0
  4051e4:	f2c0 81ff 	blt.w	4055e6 <_svfprintf_r+0x143e>
  4051e8:	461d      	mov	r5, r3
  4051ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4051ec:	2300      	movs	r3, #0
  4051ee:	930d      	str	r3, [sp, #52]	; 0x34
  4051f0:	2002      	movs	r0, #2
  4051f2:	a91d      	add	r1, sp, #116	; 0x74
  4051f4:	f8cd c004 	str.w	ip, [sp, #4]
  4051f8:	463a      	mov	r2, r7
  4051fa:	9000      	str	r0, [sp, #0]
  4051fc:	a81e      	add	r0, sp, #120	; 0x78
  4051fe:	9102      	str	r1, [sp, #8]
  405200:	a921      	add	r1, sp, #132	; 0x84
  405202:	9003      	str	r0, [sp, #12]
  405204:	462b      	mov	r3, r5
  405206:	9809      	ldr	r0, [sp, #36]	; 0x24
  405208:	9104      	str	r1, [sp, #16]
  40520a:	f8cd c01c 	str.w	ip, [sp, #28]
  40520e:	f001 f9e3 	bl	4065d8 <_dtoa_r>
  405212:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  405216:	900f      	str	r0, [sp, #60]	; 0x3c
  405218:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40521c:	f040 8242 	bne.w	4056a4 <_svfprintf_r+0x14fc>
  405220:	9b06      	ldr	r3, [sp, #24]
  405222:	07db      	lsls	r3, r3, #31
  405224:	f140 81f3 	bpl.w	40560e <_svfprintf_r+0x1466>
  405228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40522a:	eb03 040c 	add.w	r4, r3, ip
  40522e:	4638      	mov	r0, r7
  405230:	2200      	movs	r2, #0
  405232:	2300      	movs	r3, #0
  405234:	4629      	mov	r1, r5
  405236:	f8cd c01c 	str.w	ip, [sp, #28]
  40523a:	f7fe fdaf 	bl	403d9c <__aeabi_dcmpeq>
  40523e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  405242:	2800      	cmp	r0, #0
  405244:	f040 8172 	bne.w	40552c <_svfprintf_r+0x1384>
  405248:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40524a:	429c      	cmp	r4, r3
  40524c:	d906      	bls.n	40525c <_svfprintf_r+0x10b4>
  40524e:	2130      	movs	r1, #48	; 0x30
  405250:	1c5a      	adds	r2, r3, #1
  405252:	9221      	str	r2, [sp, #132]	; 0x84
  405254:	7019      	strb	r1, [r3, #0]
  405256:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405258:	429c      	cmp	r4, r3
  40525a:	d8f9      	bhi.n	405250 <_svfprintf_r+0x10a8>
  40525c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40525e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  405262:	eba3 0302 	sub.w	r3, r3, r2
  405266:	9312      	str	r3, [sp, #72]	; 0x48
  405268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40526a:	f040 8113 	bne.w	405494 <_svfprintf_r+0x12ec>
  40526e:	459c      	cmp	ip, r3
  405270:	f2c0 8168 	blt.w	405544 <_svfprintf_r+0x139c>
  405274:	1cd9      	adds	r1, r3, #3
  405276:	f2c0 8165 	blt.w	405544 <_svfprintf_r+0x139c>
  40527a:	2667      	movs	r6, #103	; 0x67
  40527c:	9311      	str	r3, [sp, #68]	; 0x44
  40527e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405280:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405282:	4293      	cmp	r3, r2
  405284:	f300 81b6 	bgt.w	4055f4 <_svfprintf_r+0x144c>
  405288:	9b06      	ldr	r3, [sp, #24]
  40528a:	07df      	lsls	r7, r3, #31
  40528c:	f100 81c1 	bmi.w	405612 <_svfprintf_r+0x146a>
  405290:	4614      	mov	r4, r2
  405292:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  405296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405298:	2b00      	cmp	r3, #0
  40529a:	f040 80f0 	bne.w	40547e <_svfprintf_r+0x12d6>
  40529e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4052a0:	f8cd c01c 	str.w	ip, [sp, #28]
  4052a4:	9306      	str	r3, [sp, #24]
  4052a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4052a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4052ac:	9310      	str	r3, [sp, #64]	; 0x40
  4052ae:	f7ff b88e 	b.w	4043ce <_svfprintf_r+0x226>
  4052b2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4052b4:	4649      	mov	r1, r9
  4052b6:	aa23      	add	r2, sp, #140	; 0x8c
  4052b8:	f003 ff28 	bl	40910c <__ssprint_r>
  4052bc:	2800      	cmp	r0, #0
  4052be:	f47f a838 	bne.w	404332 <_svfprintf_r+0x18a>
  4052c2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4052c6:	46c3      	mov	fp, r8
  4052c8:	f7ff bbd8 	b.w	404a7c <_svfprintf_r+0x8d4>
  4052cc:	3304      	adds	r3, #4
  4052ce:	6814      	ldr	r4, [r2, #0]
  4052d0:	2500      	movs	r5, #0
  4052d2:	930c      	str	r3, [sp, #48]	; 0x30
  4052d4:	f7ff ba9d 	b.w	404812 <_svfprintf_r+0x66a>
  4052d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4052da:	2140      	movs	r1, #64	; 0x40
  4052dc:	f002 fe18 	bl	407f10 <_malloc_r>
  4052e0:	f8c9 0000 	str.w	r0, [r9]
  4052e4:	f8c9 0010 	str.w	r0, [r9, #16]
  4052e8:	2800      	cmp	r0, #0
  4052ea:	f000 81d4 	beq.w	405696 <_svfprintf_r+0x14ee>
  4052ee:	2340      	movs	r3, #64	; 0x40
  4052f0:	f8c9 3014 	str.w	r3, [r9, #20]
  4052f4:	f7fe bf70 	b.w	4041d8 <_svfprintf_r+0x30>
  4052f8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4052fa:	4649      	mov	r1, r9
  4052fc:	aa23      	add	r2, sp, #140	; 0x8c
  4052fe:	f003 ff05 	bl	40910c <__ssprint_r>
  405302:	2800      	cmp	r0, #0
  405304:	f47f a815 	bne.w	404332 <_svfprintf_r+0x18a>
  405308:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40530a:	46c3      	mov	fp, r8
  40530c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405310:	e6fa      	b.n	405108 <_svfprintf_r+0xf60>
  405312:	f04f 0c06 	mov.w	ip, #6
  405316:	9b06      	ldr	r3, [sp, #24]
  405318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40531c:	930e      	str	r3, [sp, #56]	; 0x38
  40531e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405320:	2b00      	cmp	r3, #0
  405322:	f2c0 8160 	blt.w	4055e6 <_svfprintf_r+0x143e>
  405326:	461d      	mov	r5, r3
  405328:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40532a:	2300      	movs	r3, #0
  40532c:	930d      	str	r3, [sp, #52]	; 0x34
  40532e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  405332:	f000 80c4 	beq.w	4054be <_svfprintf_r+0x1316>
  405336:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40533a:	f47f af59 	bne.w	4051f0 <_svfprintf_r+0x1048>
  40533e:	f10c 0401 	add.w	r4, ip, #1
  405342:	f8cd c01c 	str.w	ip, [sp, #28]
  405346:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  40534a:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  40534e:	a81e      	add	r0, sp, #120	; 0x78
  405350:	2102      	movs	r1, #2
  405352:	f8cd c010 	str.w	ip, [sp, #16]
  405356:	463a      	mov	r2, r7
  405358:	9003      	str	r0, [sp, #12]
  40535a:	462b      	mov	r3, r5
  40535c:	9401      	str	r4, [sp, #4]
  40535e:	9100      	str	r1, [sp, #0]
  405360:	f8cd e008 	str.w	lr, [sp, #8]
  405364:	9809      	ldr	r0, [sp, #36]	; 0x24
  405366:	f001 f937 	bl	4065d8 <_dtoa_r>
  40536a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40536e:	900f      	str	r0, [sp, #60]	; 0x3c
  405370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405372:	441c      	add	r4, r3
  405374:	e75b      	b.n	40522e <_svfprintf_r+0x1086>
  405376:	9809      	ldr	r0, [sp, #36]	; 0x24
  405378:	4649      	mov	r1, r9
  40537a:	aa23      	add	r2, sp, #140	; 0x8c
  40537c:	f003 fec6 	bl	40910c <__ssprint_r>
  405380:	2800      	cmp	r0, #0
  405382:	f47e afd6 	bne.w	404332 <_svfprintf_r+0x18a>
  405386:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405388:	46c3      	mov	fp, r8
  40538a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40538c:	9812      	ldr	r0, [sp, #72]	; 0x48
  40538e:	3301      	adds	r3, #1
  405390:	eb02 0c00 	add.w	ip, r2, r0
  405394:	2b07      	cmp	r3, #7
  405396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405398:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40539c:	f8cb 2000 	str.w	r2, [fp]
  4053a0:	9324      	str	r3, [sp, #144]	; 0x90
  4053a2:	f8cb 0004 	str.w	r0, [fp, #4]
  4053a6:	f77f a8e8 	ble.w	40457a <_svfprintf_r+0x3d2>
  4053aa:	e446      	b.n	404c3a <_svfprintf_r+0xa92>
  4053ac:	9510      	str	r5, [sp, #64]	; 0x40
  4053ae:	f7fe fecd 	bl	40414c <strlen>
  4053b2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  4053b6:	970c      	str	r7, [sp, #48]	; 0x30
  4053b8:	4604      	mov	r4, r0
  4053ba:	9511      	str	r5, [sp, #68]	; 0x44
  4053bc:	9307      	str	r3, [sp, #28]
  4053be:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4053c2:	f7ff b804 	b.w	4043ce <_svfprintf_r+0x226>
  4053c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4053c8:	4fb7      	ldr	r7, [pc, #732]	; (4056a8 <_svfprintf_r+0x1500>)
  4053ca:	f7ff b84b 	b.w	404464 <_svfprintf_r+0x2bc>
  4053ce:	9809      	ldr	r0, [sp, #36]	; 0x24
  4053d0:	4649      	mov	r1, r9
  4053d2:	aa23      	add	r2, sp, #140	; 0x8c
  4053d4:	f003 fe9a 	bl	40910c <__ssprint_r>
  4053d8:	2800      	cmp	r0, #0
  4053da:	f47e afaa 	bne.w	404332 <_svfprintf_r+0x18a>
  4053de:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4053e2:	46c3      	mov	fp, r8
  4053e4:	e4a2      	b.n	404d2c <_svfprintf_r+0xb84>
  4053e6:	3301      	adds	r3, #1
  4053e8:	4422      	add	r2, r4
  4053ea:	f8cb 5000 	str.w	r5, [fp]
  4053ee:	2b07      	cmp	r3, #7
  4053f0:	9225      	str	r2, [sp, #148]	; 0x94
  4053f2:	9324      	str	r3, [sp, #144]	; 0x90
  4053f4:	f8cb 4004 	str.w	r4, [fp, #4]
  4053f8:	dcbd      	bgt.n	405376 <_svfprintf_r+0x11ce>
  4053fa:	f10b 0b08 	add.w	fp, fp, #8
  4053fe:	e7c5      	b.n	40538c <_svfprintf_r+0x11e4>
  405400:	9809      	ldr	r0, [sp, #36]	; 0x24
  405402:	4649      	mov	r1, r9
  405404:	aa23      	add	r2, sp, #140	; 0x8c
  405406:	f003 fe81 	bl	40910c <__ssprint_r>
  40540a:	2800      	cmp	r0, #0
  40540c:	f47e af91 	bne.w	404332 <_svfprintf_r+0x18a>
  405410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405412:	46c3      	mov	fp, r8
  405414:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405416:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40541a:	1ad3      	subs	r3, r2, r3
  40541c:	e552      	b.n	404ec4 <_svfprintf_r+0xd1c>
  40541e:	9809      	ldr	r0, [sp, #36]	; 0x24
  405420:	4649      	mov	r1, r9
  405422:	aa23      	add	r2, sp, #140	; 0x8c
  405424:	f003 fe72 	bl	40910c <__ssprint_r>
  405428:	2800      	cmp	r0, #0
  40542a:	f47e af82 	bne.w	404332 <_svfprintf_r+0x18a>
  40542e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405430:	46c3      	mov	fp, r8
  405432:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  405436:	e52d      	b.n	404e94 <_svfprintf_r+0xcec>
  405438:	9809      	ldr	r0, [sp, #36]	; 0x24
  40543a:	4649      	mov	r1, r9
  40543c:	aa23      	add	r2, sp, #140	; 0x8c
  40543e:	f003 fe65 	bl	40910c <__ssprint_r>
  405442:	2800      	cmp	r0, #0
  405444:	f47e af75 	bne.w	404332 <_svfprintf_r+0x18a>
  405448:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40544c:	46c3      	mov	fp, r8
  40544e:	e516      	b.n	404e7e <_svfprintf_r+0xcd6>
  405450:	2c06      	cmp	r4, #6
  405452:	970c      	str	r7, [sp, #48]	; 0x30
  405454:	9310      	str	r3, [sp, #64]	; 0x40
  405456:	461f      	mov	r7, r3
  405458:	bf28      	it	cs
  40545a:	2406      	movcs	r4, #6
  40545c:	9711      	str	r7, [sp, #68]	; 0x44
  40545e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  405462:	9307      	str	r3, [sp, #28]
  405464:	4b91      	ldr	r3, [pc, #580]	; (4056ac <_svfprintf_r+0x1504>)
  405466:	930f      	str	r3, [sp, #60]	; 0x3c
  405468:	f7fe bfb1 	b.w	4043ce <_svfprintf_r+0x226>
  40546c:	4f8e      	ldr	r7, [pc, #568]	; (4056a8 <_svfprintf_r+0x1500>)
  40546e:	f7ff b8b5 	b.w	4045dc <_svfprintf_r+0x434>
  405472:	232d      	movs	r3, #45	; 0x2d
  405474:	461f      	mov	r7, r3
  405476:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40547a:	f7ff ba7a 	b.w	404972 <_svfprintf_r+0x7ca>
  40547e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405480:	272d      	movs	r7, #45	; 0x2d
  405482:	f8cd c01c 	str.w	ip, [sp, #28]
  405486:	9306      	str	r3, [sp, #24]
  405488:	2300      	movs	r3, #0
  40548a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40548e:	9310      	str	r3, [sp, #64]	; 0x40
  405490:	f7fe bf9e 	b.w	4043d0 <_svfprintf_r+0x228>
  405494:	2e65      	cmp	r6, #101	; 0x65
  405496:	dd56      	ble.n	405546 <_svfprintf_r+0x139e>
  405498:	2e66      	cmp	r6, #102	; 0x66
  40549a:	9311      	str	r3, [sp, #68]	; 0x44
  40549c:	f47f aeef 	bne.w	40527e <_svfprintf_r+0x10d6>
  4054a0:	2b00      	cmp	r3, #0
  4054a2:	f340 80d6 	ble.w	405652 <_svfprintf_r+0x14aa>
  4054a6:	f1bc 0f00 	cmp.w	ip, #0
  4054aa:	f040 80c1 	bne.w	405630 <_svfprintf_r+0x1488>
  4054ae:	9b06      	ldr	r3, [sp, #24]
  4054b0:	07da      	lsls	r2, r3, #31
  4054b2:	f100 80bd 	bmi.w	405630 <_svfprintf_r+0x1488>
  4054b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4054b8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4054bc:	e6eb      	b.n	405296 <_svfprintf_r+0x10ee>
  4054be:	2003      	movs	r0, #3
  4054c0:	a91d      	add	r1, sp, #116	; 0x74
  4054c2:	463a      	mov	r2, r7
  4054c4:	f8cd c004 	str.w	ip, [sp, #4]
  4054c8:	9000      	str	r0, [sp, #0]
  4054ca:	a81e      	add	r0, sp, #120	; 0x78
  4054cc:	9102      	str	r1, [sp, #8]
  4054ce:	a921      	add	r1, sp, #132	; 0x84
  4054d0:	462b      	mov	r3, r5
  4054d2:	9003      	str	r0, [sp, #12]
  4054d4:	9104      	str	r1, [sp, #16]
  4054d6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4054d8:	f8cd c01c 	str.w	ip, [sp, #28]
  4054dc:	f001 f87c 	bl	4065d8 <_dtoa_r>
  4054e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4054e4:	4602      	mov	r2, r0
  4054e6:	7803      	ldrb	r3, [r0, #0]
  4054e8:	4462      	add	r2, ip
  4054ea:	900f      	str	r0, [sp, #60]	; 0x3c
  4054ec:	2b30      	cmp	r3, #48	; 0x30
  4054ee:	9207      	str	r2, [sp, #28]
  4054f0:	f040 808b 	bne.w	40560a <_svfprintf_r+0x1462>
  4054f4:	4638      	mov	r0, r7
  4054f6:	2200      	movs	r2, #0
  4054f8:	2300      	movs	r3, #0
  4054fa:	4629      	mov	r1, r5
  4054fc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  405500:	f04f 0401 	mov.w	r4, #1
  405504:	f7fe fc4a 	bl	403d9c <__aeabi_dcmpeq>
  405508:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40550c:	b108      	cbz	r0, 405512 <_svfprintf_r+0x136a>
  40550e:	f04f 0400 	mov.w	r4, #0
  405512:	f014 0fff 	tst.w	r4, #255	; 0xff
  405516:	d078      	beq.n	40560a <_svfprintf_r+0x1462>
  405518:	f1cc 0401 	rsb	r4, ip, #1
  40551c:	941d      	str	r4, [sp, #116]	; 0x74
  40551e:	9b07      	ldr	r3, [sp, #28]
  405520:	4423      	add	r3, r4
  405522:	461c      	mov	r4, r3
  405524:	e683      	b.n	40522e <_svfprintf_r+0x1086>
  405526:	4d62      	ldr	r5, [pc, #392]	; (4056b0 <_svfprintf_r+0x1508>)
  405528:	f7ff bb2a 	b.w	404b80 <_svfprintf_r+0x9d8>
  40552c:	4623      	mov	r3, r4
  40552e:	e695      	b.n	40525c <_svfprintf_r+0x10b4>
  405530:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  405534:	970c      	str	r7, [sp, #48]	; 0x30
  405536:	9010      	str	r0, [sp, #64]	; 0x40
  405538:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40553c:	9307      	str	r3, [sp, #28]
  40553e:	9011      	str	r0, [sp, #68]	; 0x44
  405540:	f7fe bf45 	b.w	4043ce <_svfprintf_r+0x226>
  405544:	3e02      	subs	r6, #2
  405546:	3b01      	subs	r3, #1
  405548:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  40554c:	2b00      	cmp	r3, #0
  40554e:	931d      	str	r3, [sp, #116]	; 0x74
  405550:	db75      	blt.n	40563e <_svfprintf_r+0x1496>
  405552:	222b      	movs	r2, #43	; 0x2b
  405554:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405558:	2b09      	cmp	r3, #9
  40555a:	dd61      	ble.n	405620 <_svfprintf_r+0x1478>
  40555c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405560:	4601      	mov	r1, r0
  405562:	4a54      	ldr	r2, [pc, #336]	; (4056b4 <_svfprintf_r+0x150c>)
  405564:	fb82 2403 	smull	r2, r4, r2, r3
  405568:	17da      	asrs	r2, r3, #31
  40556a:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40556e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  405572:	2c09      	cmp	r4, #9
  405574:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405578:	4623      	mov	r3, r4
  40557a:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40557e:	f801 2d01 	strb.w	r2, [r1, #-1]!
  405582:	dcee      	bgt.n	405562 <_svfprintf_r+0x13ba>
  405584:	3330      	adds	r3, #48	; 0x30
  405586:	460a      	mov	r2, r1
  405588:	b2db      	uxtb	r3, r3
  40558a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40558e:	4290      	cmp	r0, r2
  405590:	d97e      	bls.n	405690 <_svfprintf_r+0x14e8>
  405592:	460a      	mov	r2, r1
  405594:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  405598:	e001      	b.n	40559e <_svfprintf_r+0x13f6>
  40559a:	f812 3b01 	ldrb.w	r3, [r2], #1
  40559e:	4282      	cmp	r2, r0
  4055a0:	f804 3b01 	strb.w	r3, [r4], #1
  4055a4:	d1f9      	bne.n	40559a <_svfprintf_r+0x13f2>
  4055a6:	ab23      	add	r3, sp, #140	; 0x8c
  4055a8:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4055ac:	1a5b      	subs	r3, r3, r1
  4055ae:	4413      	add	r3, r2
  4055b0:	aa1f      	add	r2, sp, #124	; 0x7c
  4055b2:	1a9b      	subs	r3, r3, r2
  4055b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4055b6:	2a01      	cmp	r2, #1
  4055b8:	9319      	str	r3, [sp, #100]	; 0x64
  4055ba:	eb02 0403 	add.w	r4, r2, r3
  4055be:	dd43      	ble.n	405648 <_svfprintf_r+0x14a0>
  4055c0:	3401      	adds	r4, #1
  4055c2:	2300      	movs	r3, #0
  4055c4:	9311      	str	r3, [sp, #68]	; 0x44
  4055c6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4055ca:	e664      	b.n	405296 <_svfprintf_r+0x10ee>
  4055cc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4055ce:	4649      	mov	r1, r9
  4055d0:	aa23      	add	r2, sp, #140	; 0x8c
  4055d2:	f003 fd9b 	bl	40910c <__ssprint_r>
  4055d6:	2800      	cmp	r0, #0
  4055d8:	f47e aeab 	bne.w	404332 <_svfprintf_r+0x18a>
  4055dc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4055de:	46c3      	mov	fp, r8
  4055e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4055e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055e4:	e5a8      	b.n	405138 <_svfprintf_r+0xf90>
  4055e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4055e8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4055ea:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  4055ee:	232d      	movs	r3, #45	; 0x2d
  4055f0:	930d      	str	r3, [sp, #52]	; 0x34
  4055f2:	e69c      	b.n	40532e <_svfprintf_r+0x1186>
  4055f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055f6:	2b00      	cmp	r3, #0
  4055f8:	dd35      	ble.n	405666 <_svfprintf_r+0x14be>
  4055fa:	2401      	movs	r4, #1
  4055fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4055fe:	441c      	add	r4, r3
  405600:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405604:	e647      	b.n	405296 <_svfprintf_r+0x10ee>
  405606:	4d2a      	ldr	r5, [pc, #168]	; (4056b0 <_svfprintf_r+0x1508>)
  405608:	e413      	b.n	404e32 <_svfprintf_r+0xc8a>
  40560a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40560c:	e787      	b.n	40551e <_svfprintf_r+0x1376>
  40560e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405610:	e624      	b.n	40525c <_svfprintf_r+0x10b4>
  405612:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405614:	1c5c      	adds	r4, r3, #1
  405616:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40561a:	e63c      	b.n	405296 <_svfprintf_r+0x10ee>
  40561c:	4d24      	ldr	r5, [pc, #144]	; (4056b0 <_svfprintf_r+0x1508>)
  40561e:	e420      	b.n	404e62 <_svfprintf_r+0xcba>
  405620:	3330      	adds	r3, #48	; 0x30
  405622:	2230      	movs	r2, #48	; 0x30
  405624:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405628:	ab20      	add	r3, sp, #128	; 0x80
  40562a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40562e:	e7bf      	b.n	4055b0 <_svfprintf_r+0x1408>
  405630:	f10c 0401 	add.w	r4, ip, #1
  405634:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405636:	441c      	add	r4, r3
  405638:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40563c:	e62b      	b.n	405296 <_svfprintf_r+0x10ee>
  40563e:	222d      	movs	r2, #45	; 0x2d
  405640:	425b      	negs	r3, r3
  405642:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405646:	e787      	b.n	405558 <_svfprintf_r+0x13b0>
  405648:	9b06      	ldr	r3, [sp, #24]
  40564a:	f013 0301 	ands.w	r3, r3, #1
  40564e:	d0b9      	beq.n	4055c4 <_svfprintf_r+0x141c>
  405650:	e7b6      	b.n	4055c0 <_svfprintf_r+0x1418>
  405652:	f1bc 0f00 	cmp.w	ip, #0
  405656:	d109      	bne.n	40566c <_svfprintf_r+0x14c4>
  405658:	9b06      	ldr	r3, [sp, #24]
  40565a:	07db      	lsls	r3, r3, #31
  40565c:	d406      	bmi.n	40566c <_svfprintf_r+0x14c4>
  40565e:	f04f 0c01 	mov.w	ip, #1
  405662:	4664      	mov	r4, ip
  405664:	e617      	b.n	405296 <_svfprintf_r+0x10ee>
  405666:	f1c3 0402 	rsb	r4, r3, #2
  40566a:	e7c7      	b.n	4055fc <_svfprintf_r+0x1454>
  40566c:	f10c 0402 	add.w	r4, ip, #2
  405670:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  405674:	e60f      	b.n	405296 <_svfprintf_r+0x10ee>
  405676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405678:	785e      	ldrb	r6, [r3, #1]
  40567a:	4628      	mov	r0, r5
  40567c:	682c      	ldr	r4, [r5, #0]
  40567e:	3004      	adds	r0, #4
  405680:	2c00      	cmp	r4, #0
  405682:	900c      	str	r0, [sp, #48]	; 0x30
  405684:	f6be ade5 	bge.w	404252 <_svfprintf_r+0xaa>
  405688:	f04f 34ff 	mov.w	r4, #4294967295
  40568c:	f7fe bde1 	b.w	404252 <_svfprintf_r+0xaa>
  405690:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405694:	e78c      	b.n	4055b0 <_svfprintf_r+0x1408>
  405696:	230c      	movs	r3, #12
  405698:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40569a:	f04f 30ff 	mov.w	r0, #4294967295
  40569e:	6013      	str	r3, [r2, #0]
  4056a0:	f7fe be50 	b.w	404344 <_svfprintf_r+0x19c>
  4056a4:	4664      	mov	r4, ip
  4056a6:	e663      	b.n	405370 <_svfprintf_r+0x11c8>
  4056a8:	00409e10 	.word	0x00409e10
  4056ac:	00409e58 	.word	0x00409e58
  4056b0:	00409e00 	.word	0x00409e00
  4056b4:	66666667 	.word	0x66666667

004056b8 <__sprint_r.part.0>:
  4056b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4056ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4056be:	049c      	lsls	r4, r3, #18
  4056c0:	460f      	mov	r7, r1
  4056c2:	4692      	mov	sl, r2
  4056c4:	d52a      	bpl.n	40571c <__sprint_r.part.0+0x64>
  4056c6:	6893      	ldr	r3, [r2, #8]
  4056c8:	6812      	ldr	r2, [r2, #0]
  4056ca:	b32b      	cbz	r3, 405718 <__sprint_r.part.0+0x60>
  4056cc:	4680      	mov	r8, r0
  4056ce:	f102 0908 	add.w	r9, r2, #8
  4056d2:	e919 0060 	ldmdb	r9, {r5, r6}
  4056d6:	08b6      	lsrs	r6, r6, #2
  4056d8:	d016      	beq.n	405708 <__sprint_r.part.0+0x50>
  4056da:	3d04      	subs	r5, #4
  4056dc:	2400      	movs	r4, #0
  4056de:	e001      	b.n	4056e4 <__sprint_r.part.0+0x2c>
  4056e0:	42a6      	cmp	r6, r4
  4056e2:	d00f      	beq.n	405704 <__sprint_r.part.0+0x4c>
  4056e4:	4640      	mov	r0, r8
  4056e6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4056ea:	463a      	mov	r2, r7
  4056ec:	3401      	adds	r4, #1
  4056ee:	f002 f89d 	bl	40782c <_fputwc_r>
  4056f2:	1c43      	adds	r3, r0, #1
  4056f4:	d1f4      	bne.n	4056e0 <__sprint_r.part.0+0x28>
  4056f6:	2300      	movs	r3, #0
  4056f8:	f8ca 3008 	str.w	r3, [sl, #8]
  4056fc:	f8ca 3004 	str.w	r3, [sl, #4]
  405700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405704:	f8da 3008 	ldr.w	r3, [sl, #8]
  405708:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40570c:	f109 0908 	add.w	r9, r9, #8
  405710:	f8ca 3008 	str.w	r3, [sl, #8]
  405714:	2b00      	cmp	r3, #0
  405716:	d1dc      	bne.n	4056d2 <__sprint_r.part.0+0x1a>
  405718:	2000      	movs	r0, #0
  40571a:	e7ec      	b.n	4056f6 <__sprint_r.part.0+0x3e>
  40571c:	f002 f9be 	bl	407a9c <__sfvwrite_r>
  405720:	2300      	movs	r3, #0
  405722:	f8ca 3008 	str.w	r3, [sl, #8]
  405726:	f8ca 3004 	str.w	r3, [sl, #4]
  40572a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40572e:	bf00      	nop

00405730 <_vfiprintf_r>:
  405730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405734:	461c      	mov	r4, r3
  405736:	b0ad      	sub	sp, #180	; 0xb4
  405738:	4692      	mov	sl, r2
  40573a:	9101      	str	r1, [sp, #4]
  40573c:	9002      	str	r0, [sp, #8]
  40573e:	9406      	str	r4, [sp, #24]
  405740:	b118      	cbz	r0, 40574a <_vfiprintf_r+0x1a>
  405742:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405744:	2b00      	cmp	r3, #0
  405746:	f000 80de 	beq.w	405906 <_vfiprintf_r+0x1d6>
  40574a:	9b01      	ldr	r3, [sp, #4]
  40574c:	8999      	ldrh	r1, [r3, #12]
  40574e:	b28a      	uxth	r2, r1
  405750:	0490      	lsls	r0, r2, #18
  405752:	d408      	bmi.n	405766 <_vfiprintf_r+0x36>
  405754:	461d      	mov	r5, r3
  405756:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40575c:	b28a      	uxth	r2, r1
  40575e:	81a9      	strh	r1, [r5, #12]
  405760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405764:	666b      	str	r3, [r5, #100]	; 0x64
  405766:	0711      	lsls	r1, r2, #28
  405768:	f140 80ad 	bpl.w	4058c6 <_vfiprintf_r+0x196>
  40576c:	9b01      	ldr	r3, [sp, #4]
  40576e:	691b      	ldr	r3, [r3, #16]
  405770:	2b00      	cmp	r3, #0
  405772:	f000 80a8 	beq.w	4058c6 <_vfiprintf_r+0x196>
  405776:	f002 021a 	and.w	r2, r2, #26
  40577a:	2a0a      	cmp	r2, #10
  40577c:	f000 80af 	beq.w	4058de <_vfiprintf_r+0x1ae>
  405780:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  405784:	2300      	movs	r3, #0
  405786:	465c      	mov	r4, fp
  405788:	930a      	str	r3, [sp, #40]	; 0x28
  40578a:	9311      	str	r3, [sp, #68]	; 0x44
  40578c:	9303      	str	r3, [sp, #12]
  40578e:	9310      	str	r3, [sp, #64]	; 0x40
  405790:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  405794:	f89a 3000 	ldrb.w	r3, [sl]
  405798:	4655      	mov	r5, sl
  40579a:	2b25      	cmp	r3, #37	; 0x25
  40579c:	d01c      	beq.n	4057d8 <_vfiprintf_r+0xa8>
  40579e:	b90b      	cbnz	r3, 4057a4 <_vfiprintf_r+0x74>
  4057a0:	e01a      	b.n	4057d8 <_vfiprintf_r+0xa8>
  4057a2:	b11b      	cbz	r3, 4057ac <_vfiprintf_r+0x7c>
  4057a4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  4057a8:	2b25      	cmp	r3, #37	; 0x25
  4057aa:	d1fa      	bne.n	4057a2 <_vfiprintf_r+0x72>
  4057ac:	ebb5 060a 	subs.w	r6, r5, sl
  4057b0:	d012      	beq.n	4057d8 <_vfiprintf_r+0xa8>
  4057b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4057b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057b6:	3301      	adds	r3, #1
  4057b8:	f8c4 a000 	str.w	sl, [r4]
  4057bc:	4432      	add	r2, r6
  4057be:	6066      	str	r6, [r4, #4]
  4057c0:	2b07      	cmp	r3, #7
  4057c2:	9310      	str	r3, [sp, #64]	; 0x40
  4057c4:	9211      	str	r2, [sp, #68]	; 0x44
  4057c6:	dd79      	ble.n	4058bc <_vfiprintf_r+0x18c>
  4057c8:	2a00      	cmp	r2, #0
  4057ca:	f040 84a5 	bne.w	406118 <_vfiprintf_r+0x9e8>
  4057ce:	9b03      	ldr	r3, [sp, #12]
  4057d0:	465c      	mov	r4, fp
  4057d2:	9210      	str	r2, [sp, #64]	; 0x40
  4057d4:	4433      	add	r3, r6
  4057d6:	9303      	str	r3, [sp, #12]
  4057d8:	782b      	ldrb	r3, [r5, #0]
  4057da:	2b00      	cmp	r3, #0
  4057dc:	f000 833a 	beq.w	405e54 <_vfiprintf_r+0x724>
  4057e0:	2100      	movs	r1, #0
  4057e2:	f04f 0300 	mov.w	r3, #0
  4057e6:	f04f 38ff 	mov.w	r8, #4294967295
  4057ea:	1c68      	adds	r0, r5, #1
  4057ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4057f0:	4689      	mov	r9, r1
  4057f2:	786b      	ldrb	r3, [r5, #1]
  4057f4:	4646      	mov	r6, r8
  4057f6:	460d      	mov	r5, r1
  4057f8:	f100 0a01 	add.w	sl, r0, #1
  4057fc:	f1a3 0220 	sub.w	r2, r3, #32
  405800:	2a58      	cmp	r2, #88	; 0x58
  405802:	f200 8301 	bhi.w	405e08 <_vfiprintf_r+0x6d8>
  405806:	e8df f012 	tbh	[pc, r2, lsl #1]
  40580a:	0247      	.short	0x0247
  40580c:	02ff02ff 	.word	0x02ff02ff
  405810:	02ff0255 	.word	0x02ff0255
  405814:	02ff02ff 	.word	0x02ff02ff
  405818:	02ff02ff 	.word	0x02ff02ff
  40581c:	025b02ff 	.word	0x025b02ff
  405820:	02ff0268 	.word	0x02ff0268
  405824:	01ba0181 	.word	0x01ba0181
  405828:	028702ff 	.word	0x028702ff
  40582c:	028d028d 	.word	0x028d028d
  405830:	028d028d 	.word	0x028d028d
  405834:	028d028d 	.word	0x028d028d
  405838:	028d028d 	.word	0x028d028d
  40583c:	02ff028d 	.word	0x02ff028d
  405840:	02ff02ff 	.word	0x02ff02ff
  405844:	02ff02ff 	.word	0x02ff02ff
  405848:	02ff02ff 	.word	0x02ff02ff
  40584c:	02ff02ff 	.word	0x02ff02ff
  405850:	029b02ff 	.word	0x029b02ff
  405854:	02ff02ff 	.word	0x02ff02ff
  405858:	02ff02ff 	.word	0x02ff02ff
  40585c:	02ff02ff 	.word	0x02ff02ff
  405860:	02ff02ff 	.word	0x02ff02ff
  405864:	02ff02ff 	.word	0x02ff02ff
  405868:	02ff02b6 	.word	0x02ff02b6
  40586c:	02ff02ff 	.word	0x02ff02ff
  405870:	02ff02ff 	.word	0x02ff02ff
  405874:	02ff02ce 	.word	0x02ff02ce
  405878:	02e602ff 	.word	0x02e602ff
  40587c:	02ff02ff 	.word	0x02ff02ff
  405880:	02ff02ff 	.word	0x02ff02ff
  405884:	02ff02ff 	.word	0x02ff02ff
  405888:	02ff02ff 	.word	0x02ff02ff
  40588c:	02ff02ff 	.word	0x02ff02ff
  405890:	022b0219 	.word	0x022b0219
  405894:	02ff02ff 	.word	0x02ff02ff
  405898:	021302ff 	.word	0x021302ff
  40589c:	02ff022b 	.word	0x02ff022b
  4058a0:	01f902ff 	.word	0x01f902ff
  4058a4:	020202ff 	.word	0x020202ff
  4058a8:	026d0187 	.word	0x026d0187
  4058ac:	02ff0281 	.word	0x02ff0281
  4058b0:	02ff0198 	.word	0x02ff0198
  4058b4:	02ff0081 	.word	0x02ff0081
  4058b8:	01d502ff 	.word	0x01d502ff
  4058bc:	3408      	adds	r4, #8
  4058be:	9b03      	ldr	r3, [sp, #12]
  4058c0:	4433      	add	r3, r6
  4058c2:	9303      	str	r3, [sp, #12]
  4058c4:	e788      	b.n	4057d8 <_vfiprintf_r+0xa8>
  4058c6:	9802      	ldr	r0, [sp, #8]
  4058c8:	9901      	ldr	r1, [sp, #4]
  4058ca:	f000 fd6b 	bl	4063a4 <__swsetup_r>
  4058ce:	b9a8      	cbnz	r0, 4058fc <_vfiprintf_r+0x1cc>
  4058d0:	9b01      	ldr	r3, [sp, #4]
  4058d2:	899a      	ldrh	r2, [r3, #12]
  4058d4:	f002 021a 	and.w	r2, r2, #26
  4058d8:	2a0a      	cmp	r2, #10
  4058da:	f47f af51 	bne.w	405780 <_vfiprintf_r+0x50>
  4058de:	9b01      	ldr	r3, [sp, #4]
  4058e0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4058e4:	2b00      	cmp	r3, #0
  4058e6:	f6ff af4b 	blt.w	405780 <_vfiprintf_r+0x50>
  4058ea:	9901      	ldr	r1, [sp, #4]
  4058ec:	4652      	mov	r2, sl
  4058ee:	4623      	mov	r3, r4
  4058f0:	9802      	ldr	r0, [sp, #8]
  4058f2:	f000 fd17 	bl	406324 <__sbprintf>
  4058f6:	b02d      	add	sp, #180	; 0xb4
  4058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058fc:	f04f 30ff 	mov.w	r0, #4294967295
  405900:	b02d      	add	sp, #180	; 0xb4
  405902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405906:	f001 ff19 	bl	40773c <__sinit>
  40590a:	e71e      	b.n	40574a <_vfiprintf_r+0x1a>
  40590c:	f019 0f20 	tst.w	r9, #32
  405910:	9505      	str	r5, [sp, #20]
  405912:	46b0      	mov	r8, r6
  405914:	9a06      	ldr	r2, [sp, #24]
  405916:	f000 824f 	beq.w	405db8 <_vfiprintf_r+0x688>
  40591a:	3207      	adds	r2, #7
  40591c:	2301      	movs	r3, #1
  40591e:	f022 0207 	bic.w	r2, r2, #7
  405922:	f102 0108 	add.w	r1, r2, #8
  405926:	e9d2 6700 	ldrd	r6, r7, [r2]
  40592a:	9106      	str	r1, [sp, #24]
  40592c:	f04f 0200 	mov.w	r2, #0
  405930:	2500      	movs	r5, #0
  405932:	f8cd 8010 	str.w	r8, [sp, #16]
  405936:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40593a:	f1b8 0f00 	cmp.w	r8, #0
  40593e:	db01      	blt.n	405944 <_vfiprintf_r+0x214>
  405940:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  405944:	f1b8 0f00 	cmp.w	r8, #0
  405948:	f040 8294 	bne.w	405e74 <_vfiprintf_r+0x744>
  40594c:	ea56 0207 	orrs.w	r2, r6, r7
  405950:	bf14      	ite	ne
  405952:	2201      	movne	r2, #1
  405954:	2200      	moveq	r2, #0
  405956:	2a00      	cmp	r2, #0
  405958:	f040 828c 	bne.w	405e74 <_vfiprintf_r+0x744>
  40595c:	2b00      	cmp	r3, #0
  40595e:	f040 8372 	bne.w	406046 <_vfiprintf_r+0x916>
  405962:	f019 0f01 	tst.w	r9, #1
  405966:	f000 83a3 	beq.w	4060b0 <_vfiprintf_r+0x980>
  40596a:	ab2c      	add	r3, sp, #176	; 0xb0
  40596c:	2230      	movs	r2, #48	; 0x30
  40596e:	f803 2d41 	strb.w	r2, [r3, #-65]!
  405972:	ebc3 080b 	rsb	r8, r3, fp
  405976:	9308      	str	r3, [sp, #32]
  405978:	9b04      	ldr	r3, [sp, #16]
  40597a:	4543      	cmp	r3, r8
  40597c:	bfb8      	it	lt
  40597e:	4643      	movlt	r3, r8
  405980:	461f      	mov	r7, r3
  405982:	b105      	cbz	r5, 405986 <_vfiprintf_r+0x256>
  405984:	3701      	adds	r7, #1
  405986:	f019 0c02 	ands.w	ip, r9, #2
  40598a:	d000      	beq.n	40598e <_vfiprintf_r+0x25e>
  40598c:	3702      	adds	r7, #2
  40598e:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  405992:	9307      	str	r3, [sp, #28]
  405994:	f040 8247 	bne.w	405e26 <_vfiprintf_r+0x6f6>
  405998:	9b05      	ldr	r3, [sp, #20]
  40599a:	1bdd      	subs	r5, r3, r7
  40599c:	2d00      	cmp	r5, #0
  40599e:	f340 8242 	ble.w	405e26 <_vfiprintf_r+0x6f6>
  4059a2:	2d10      	cmp	r5, #16
  4059a4:	f340 848b 	ble.w	4062be <_vfiprintf_r+0xb8e>
  4059a8:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  4059ac:	2310      	movs	r3, #16
  4059ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4059b0:	4ebd      	ldr	r6, [pc, #756]	; (405ca8 <_vfiprintf_r+0x578>)
  4059b2:	4671      	mov	r1, lr
  4059b4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4059b8:	e006      	b.n	4059c8 <_vfiprintf_r+0x298>
  4059ba:	4611      	mov	r1, r2
  4059bc:	f04f 0e01 	mov.w	lr, #1
  4059c0:	465c      	mov	r4, fp
  4059c2:	3d10      	subs	r5, #16
  4059c4:	2d10      	cmp	r5, #16
  4059c6:	dd20      	ble.n	405a0a <_vfiprintf_r+0x2da>
  4059c8:	1c48      	adds	r0, r1, #1
  4059ca:	3210      	adds	r2, #16
  4059cc:	6026      	str	r6, [r4, #0]
  4059ce:	f101 0e02 	add.w	lr, r1, #2
  4059d2:	2807      	cmp	r0, #7
  4059d4:	6063      	str	r3, [r4, #4]
  4059d6:	9211      	str	r2, [sp, #68]	; 0x44
  4059d8:	4601      	mov	r1, r0
  4059da:	f104 0408 	add.w	r4, r4, #8
  4059de:	9010      	str	r0, [sp, #64]	; 0x40
  4059e0:	ddef      	ble.n	4059c2 <_vfiprintf_r+0x292>
  4059e2:	2a00      	cmp	r2, #0
  4059e4:	d0e9      	beq.n	4059ba <_vfiprintf_r+0x28a>
  4059e6:	9802      	ldr	r0, [sp, #8]
  4059e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4059ea:	9901      	ldr	r1, [sp, #4]
  4059ec:	465c      	mov	r4, fp
  4059ee:	9309      	str	r3, [sp, #36]	; 0x24
  4059f0:	f7ff fe62 	bl	4056b8 <__sprint_r.part.0>
  4059f4:	2800      	cmp	r0, #0
  4059f6:	f040 8234 	bne.w	405e62 <_vfiprintf_r+0x732>
  4059fa:	3d10      	subs	r5, #16
  4059fc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4059fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a00:	2d10      	cmp	r5, #16
  405a02:	f101 0e01 	add.w	lr, r1, #1
  405a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a08:	dcde      	bgt.n	4059c8 <_vfiprintf_r+0x298>
  405a0a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  405a0e:	4671      	mov	r1, lr
  405a10:	442a      	add	r2, r5
  405a12:	2907      	cmp	r1, #7
  405a14:	6026      	str	r6, [r4, #0]
  405a16:	6065      	str	r5, [r4, #4]
  405a18:	9211      	str	r2, [sp, #68]	; 0x44
  405a1a:	9110      	str	r1, [sp, #64]	; 0x40
  405a1c:	f300 8330 	bgt.w	406080 <_vfiprintf_r+0x950>
  405a20:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405a24:	3408      	adds	r4, #8
  405a26:	1c48      	adds	r0, r1, #1
  405a28:	2b00      	cmp	r3, #0
  405a2a:	f040 8204 	bne.w	405e36 <_vfiprintf_r+0x706>
  405a2e:	f1bc 0f00 	cmp.w	ip, #0
  405a32:	d00c      	beq.n	405a4e <_vfiprintf_r+0x31e>
  405a34:	3202      	adds	r2, #2
  405a36:	a90e      	add	r1, sp, #56	; 0x38
  405a38:	2302      	movs	r3, #2
  405a3a:	2807      	cmp	r0, #7
  405a3c:	9010      	str	r0, [sp, #64]	; 0x40
  405a3e:	9211      	str	r2, [sp, #68]	; 0x44
  405a40:	e884 000a 	stmia.w	r4, {r1, r3}
  405a44:	f300 82f8 	bgt.w	406038 <_vfiprintf_r+0x908>
  405a48:	4601      	mov	r1, r0
  405a4a:	3408      	adds	r4, #8
  405a4c:	3001      	adds	r0, #1
  405a4e:	9b07      	ldr	r3, [sp, #28]
  405a50:	2b80      	cmp	r3, #128	; 0x80
  405a52:	f000 8298 	beq.w	405f86 <_vfiprintf_r+0x856>
  405a56:	9b04      	ldr	r3, [sp, #16]
  405a58:	ebc8 0503 	rsb	r5, r8, r3
  405a5c:	2d00      	cmp	r5, #0
  405a5e:	dd38      	ble.n	405ad2 <_vfiprintf_r+0x3a2>
  405a60:	2d10      	cmp	r5, #16
  405a62:	4e92      	ldr	r6, [pc, #584]	; (405cac <_vfiprintf_r+0x57c>)
  405a64:	bfc8      	it	gt
  405a66:	2310      	movgt	r3, #16
  405a68:	dc07      	bgt.n	405a7a <_vfiprintf_r+0x34a>
  405a6a:	e028      	b.n	405abe <_vfiprintf_r+0x38e>
  405a6c:	f04f 0e01 	mov.w	lr, #1
  405a70:	4611      	mov	r1, r2
  405a72:	465c      	mov	r4, fp
  405a74:	3d10      	subs	r5, #16
  405a76:	2d10      	cmp	r5, #16
  405a78:	dd20      	ble.n	405abc <_vfiprintf_r+0x38c>
  405a7a:	1c48      	adds	r0, r1, #1
  405a7c:	3210      	adds	r2, #16
  405a7e:	6026      	str	r6, [r4, #0]
  405a80:	f101 0e02 	add.w	lr, r1, #2
  405a84:	2807      	cmp	r0, #7
  405a86:	6063      	str	r3, [r4, #4]
  405a88:	9211      	str	r2, [sp, #68]	; 0x44
  405a8a:	4601      	mov	r1, r0
  405a8c:	f104 0408 	add.w	r4, r4, #8
  405a90:	9010      	str	r0, [sp, #64]	; 0x40
  405a92:	ddef      	ble.n	405a74 <_vfiprintf_r+0x344>
  405a94:	2a00      	cmp	r2, #0
  405a96:	d0e9      	beq.n	405a6c <_vfiprintf_r+0x33c>
  405a98:	9802      	ldr	r0, [sp, #8]
  405a9a:	aa0f      	add	r2, sp, #60	; 0x3c
  405a9c:	9901      	ldr	r1, [sp, #4]
  405a9e:	465c      	mov	r4, fp
  405aa0:	9304      	str	r3, [sp, #16]
  405aa2:	f7ff fe09 	bl	4056b8 <__sprint_r.part.0>
  405aa6:	2800      	cmp	r0, #0
  405aa8:	f040 81db 	bne.w	405e62 <_vfiprintf_r+0x732>
  405aac:	3d10      	subs	r5, #16
  405aae:	9910      	ldr	r1, [sp, #64]	; 0x40
  405ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ab2:	2d10      	cmp	r5, #16
  405ab4:	f101 0e01 	add.w	lr, r1, #1
  405ab8:	9b04      	ldr	r3, [sp, #16]
  405aba:	dcde      	bgt.n	405a7a <_vfiprintf_r+0x34a>
  405abc:	4670      	mov	r0, lr
  405abe:	442a      	add	r2, r5
  405ac0:	2807      	cmp	r0, #7
  405ac2:	6026      	str	r6, [r4, #0]
  405ac4:	6065      	str	r5, [r4, #4]
  405ac6:	9211      	str	r2, [sp, #68]	; 0x44
  405ac8:	9010      	str	r0, [sp, #64]	; 0x40
  405aca:	f300 81ef 	bgt.w	405eac <_vfiprintf_r+0x77c>
  405ace:	3408      	adds	r4, #8
  405ad0:	3001      	adds	r0, #1
  405ad2:	eb02 0308 	add.w	r3, r2, r8
  405ad6:	2807      	cmp	r0, #7
  405ad8:	9a08      	ldr	r2, [sp, #32]
  405ada:	9311      	str	r3, [sp, #68]	; 0x44
  405adc:	9010      	str	r0, [sp, #64]	; 0x40
  405ade:	e884 0104 	stmia.w	r4, {r2, r8}
  405ae2:	f340 81f0 	ble.w	405ec6 <_vfiprintf_r+0x796>
  405ae6:	2b00      	cmp	r3, #0
  405ae8:	f040 82f2 	bne.w	4060d0 <_vfiprintf_r+0x9a0>
  405aec:	f019 0f04 	tst.w	r9, #4
  405af0:	9310      	str	r3, [sp, #64]	; 0x40
  405af2:	f040 82d6 	bne.w	4060a2 <_vfiprintf_r+0x972>
  405af6:	9b03      	ldr	r3, [sp, #12]
  405af8:	9a05      	ldr	r2, [sp, #20]
  405afa:	4297      	cmp	r7, r2
  405afc:	bfac      	ite	ge
  405afe:	19db      	addge	r3, r3, r7
  405b00:	189b      	addlt	r3, r3, r2
  405b02:	9303      	str	r3, [sp, #12]
  405b04:	2300      	movs	r3, #0
  405b06:	465c      	mov	r4, fp
  405b08:	9310      	str	r3, [sp, #64]	; 0x40
  405b0a:	e643      	b.n	405794 <_vfiprintf_r+0x64>
  405b0c:	4650      	mov	r0, sl
  405b0e:	f049 0904 	orr.w	r9, r9, #4
  405b12:	f89a 3000 	ldrb.w	r3, [sl]
  405b16:	e66f      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405b18:	f019 0320 	ands.w	r3, r9, #32
  405b1c:	9505      	str	r5, [sp, #20]
  405b1e:	46b0      	mov	r8, r6
  405b20:	f000 8131 	beq.w	405d86 <_vfiprintf_r+0x656>
  405b24:	9a06      	ldr	r2, [sp, #24]
  405b26:	2300      	movs	r3, #0
  405b28:	3207      	adds	r2, #7
  405b2a:	f022 0207 	bic.w	r2, r2, #7
  405b2e:	f102 0108 	add.w	r1, r2, #8
  405b32:	e9d2 6700 	ldrd	r6, r7, [r2]
  405b36:	9106      	str	r1, [sp, #24]
  405b38:	e6f8      	b.n	40592c <_vfiprintf_r+0x1fc>
  405b3a:	9a06      	ldr	r2, [sp, #24]
  405b3c:	46b0      	mov	r8, r6
  405b3e:	9505      	str	r5, [sp, #20]
  405b40:	6813      	ldr	r3, [r2, #0]
  405b42:	1d16      	adds	r6, r2, #4
  405b44:	f04f 0200 	mov.w	r2, #0
  405b48:	9308      	str	r3, [sp, #32]
  405b4a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405b4e:	2b00      	cmp	r3, #0
  405b50:	f000 83bb 	beq.w	4062ca <_vfiprintf_r+0xb9a>
  405b54:	f1b8 0f00 	cmp.w	r8, #0
  405b58:	f2c0 8398 	blt.w	40628c <_vfiprintf_r+0xb5c>
  405b5c:	9d08      	ldr	r5, [sp, #32]
  405b5e:	2100      	movs	r1, #0
  405b60:	4642      	mov	r2, r8
  405b62:	4628      	mov	r0, r5
  405b64:	f002 fc80 	bl	408468 <memchr>
  405b68:	2800      	cmp	r0, #0
  405b6a:	f000 83be 	beq.w	4062ea <_vfiprintf_r+0xbba>
  405b6e:	2300      	movs	r3, #0
  405b70:	ebc5 0800 	rsb	r8, r5, r0
  405b74:	9606      	str	r6, [sp, #24]
  405b76:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405b7a:	9304      	str	r3, [sp, #16]
  405b7c:	e6fc      	b.n	405978 <_vfiprintf_r+0x248>
  405b7e:	f89a 3000 	ldrb.w	r3, [sl]
  405b82:	f10a 0001 	add.w	r0, sl, #1
  405b86:	2b2a      	cmp	r3, #42	; 0x2a
  405b88:	f000 83b8 	beq.w	4062fc <_vfiprintf_r+0xbcc>
  405b8c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405b90:	4682      	mov	sl, r0
  405b92:	2600      	movs	r6, #0
  405b94:	2a09      	cmp	r2, #9
  405b96:	f63f ae31 	bhi.w	4057fc <_vfiprintf_r+0xcc>
  405b9a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405b9e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405ba2:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  405ba6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405baa:	2a09      	cmp	r2, #9
  405bac:	d9f5      	bls.n	405b9a <_vfiprintf_r+0x46a>
  405bae:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  405bb2:	e623      	b.n	4057fc <_vfiprintf_r+0xcc>
  405bb4:	4a3e      	ldr	r2, [pc, #248]	; (405cb0 <_vfiprintf_r+0x580>)
  405bb6:	f019 0f20 	tst.w	r9, #32
  405bba:	9505      	str	r5, [sp, #20]
  405bbc:	46b0      	mov	r8, r6
  405bbe:	920a      	str	r2, [sp, #40]	; 0x28
  405bc0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405bc4:	f000 8111 	beq.w	405dea <_vfiprintf_r+0x6ba>
  405bc8:	9a06      	ldr	r2, [sp, #24]
  405bca:	3207      	adds	r2, #7
  405bcc:	f022 0207 	bic.w	r2, r2, #7
  405bd0:	f102 0108 	add.w	r1, r2, #8
  405bd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  405bd8:	9106      	str	r1, [sp, #24]
  405bda:	f019 0f01 	tst.w	r9, #1
  405bde:	f000 824d 	beq.w	40607c <_vfiprintf_r+0x94c>
  405be2:	ea56 0207 	orrs.w	r2, r6, r7
  405be6:	f000 8249 	beq.w	40607c <_vfiprintf_r+0x94c>
  405bea:	2230      	movs	r2, #48	; 0x30
  405bec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  405bf0:	f049 0902 	orr.w	r9, r9, #2
  405bf4:	2302      	movs	r3, #2
  405bf6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  405bfa:	e697      	b.n	40592c <_vfiprintf_r+0x1fc>
  405bfc:	f89a 3000 	ldrb.w	r3, [sl]
  405c00:	2b6c      	cmp	r3, #108	; 0x6c
  405c02:	f000 8337 	beq.w	406274 <_vfiprintf_r+0xb44>
  405c06:	f049 0910 	orr.w	r9, r9, #16
  405c0a:	4650      	mov	r0, sl
  405c0c:	e5f4      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405c0e:	f019 0f20 	tst.w	r9, #32
  405c12:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405c16:	f000 8305 	beq.w	406224 <_vfiprintf_r+0xaf4>
  405c1a:	9903      	ldr	r1, [sp, #12]
  405c1c:	9a06      	ldr	r2, [sp, #24]
  405c1e:	17cf      	asrs	r7, r1, #31
  405c20:	4608      	mov	r0, r1
  405c22:	6813      	ldr	r3, [r2, #0]
  405c24:	3204      	adds	r2, #4
  405c26:	4639      	mov	r1, r7
  405c28:	9206      	str	r2, [sp, #24]
  405c2a:	e9c3 0100 	strd	r0, r1, [r3]
  405c2e:	e5b1      	b.n	405794 <_vfiprintf_r+0x64>
  405c30:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  405c34:	f89a 3000 	ldrb.w	r3, [sl]
  405c38:	4650      	mov	r0, sl
  405c3a:	e5dd      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405c3c:	9a06      	ldr	r2, [sp, #24]
  405c3e:	2701      	movs	r7, #1
  405c40:	f04f 0100 	mov.w	r1, #0
  405c44:	9505      	str	r5, [sp, #20]
  405c46:	6813      	ldr	r3, [r2, #0]
  405c48:	3204      	adds	r2, #4
  405c4a:	46b8      	mov	r8, r7
  405c4c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405c50:	9206      	str	r2, [sp, #24]
  405c52:	aa12      	add	r2, sp, #72	; 0x48
  405c54:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  405c58:	9208      	str	r2, [sp, #32]
  405c5a:	2300      	movs	r3, #0
  405c5c:	9304      	str	r3, [sp, #16]
  405c5e:	e692      	b.n	405986 <_vfiprintf_r+0x256>
  405c60:	f019 0f20 	tst.w	r9, #32
  405c64:	9505      	str	r5, [sp, #20]
  405c66:	46b0      	mov	r8, r6
  405c68:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405c6c:	d071      	beq.n	405d52 <_vfiprintf_r+0x622>
  405c6e:	9906      	ldr	r1, [sp, #24]
  405c70:	3107      	adds	r1, #7
  405c72:	f021 0107 	bic.w	r1, r1, #7
  405c76:	e9d1 2300 	ldrd	r2, r3, [r1]
  405c7a:	3108      	adds	r1, #8
  405c7c:	4616      	mov	r6, r2
  405c7e:	461f      	mov	r7, r3
  405c80:	9106      	str	r1, [sp, #24]
  405c82:	2a00      	cmp	r2, #0
  405c84:	f173 0300 	sbcs.w	r3, r3, #0
  405c88:	f2c0 82b1 	blt.w	4061ee <_vfiprintf_r+0xabe>
  405c8c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405c90:	2301      	movs	r3, #1
  405c92:	f8cd 8010 	str.w	r8, [sp, #16]
  405c96:	e650      	b.n	40593a <_vfiprintf_r+0x20a>
  405c98:	f89a 3000 	ldrb.w	r3, [sl]
  405c9c:	4650      	mov	r0, sl
  405c9e:	2900      	cmp	r1, #0
  405ca0:	f47f adaa 	bne.w	4057f8 <_vfiprintf_r+0xc8>
  405ca4:	2120      	movs	r1, #32
  405ca6:	e5a7      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405ca8:	00409e74 	.word	0x00409e74
  405cac:	00409e64 	.word	0x00409e64
  405cb0:	00409e44 	.word	0x00409e44
  405cb4:	f049 0901 	orr.w	r9, r9, #1
  405cb8:	f89a 3000 	ldrb.w	r3, [sl]
  405cbc:	4650      	mov	r0, sl
  405cbe:	e59b      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405cc0:	9a06      	ldr	r2, [sp, #24]
  405cc2:	6815      	ldr	r5, [r2, #0]
  405cc4:	4613      	mov	r3, r2
  405cc6:	2d00      	cmp	r5, #0
  405cc8:	f103 0304 	add.w	r3, r3, #4
  405ccc:	f2c0 82da 	blt.w	406284 <_vfiprintf_r+0xb54>
  405cd0:	9306      	str	r3, [sp, #24]
  405cd2:	4650      	mov	r0, sl
  405cd4:	f89a 3000 	ldrb.w	r3, [sl]
  405cd8:	e58e      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405cda:	f89a 3000 	ldrb.w	r3, [sl]
  405cde:	4650      	mov	r0, sl
  405ce0:	212b      	movs	r1, #43	; 0x2b
  405ce2:	e589      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405ce4:	9806      	ldr	r0, [sp, #24]
  405ce6:	2278      	movs	r2, #120	; 0x78
  405ce8:	2330      	movs	r3, #48	; 0x30
  405cea:	46b0      	mov	r8, r6
  405cec:	4601      	mov	r1, r0
  405cee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405cf2:	4aaa      	ldr	r2, [pc, #680]	; (405f9c <_vfiprintf_r+0x86c>)
  405cf4:	f049 0902 	orr.w	r9, r9, #2
  405cf8:	3104      	adds	r1, #4
  405cfa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  405cfe:	9505      	str	r5, [sp, #20]
  405d00:	2302      	movs	r3, #2
  405d02:	6806      	ldr	r6, [r0, #0]
  405d04:	2700      	movs	r7, #0
  405d06:	9106      	str	r1, [sp, #24]
  405d08:	920a      	str	r2, [sp, #40]	; 0x28
  405d0a:	e60f      	b.n	40592c <_vfiprintf_r+0x1fc>
  405d0c:	f049 0920 	orr.w	r9, r9, #32
  405d10:	f89a 3000 	ldrb.w	r3, [sl]
  405d14:	4650      	mov	r0, sl
  405d16:	e56f      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405d18:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  405d1c:	f89a 3000 	ldrb.w	r3, [sl]
  405d20:	4650      	mov	r0, sl
  405d22:	e569      	b.n	4057f8 <_vfiprintf_r+0xc8>
  405d24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405d28:	2500      	movs	r5, #0
  405d2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  405d2e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  405d32:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405d36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405d3a:	2a09      	cmp	r2, #9
  405d3c:	d9f5      	bls.n	405d2a <_vfiprintf_r+0x5fa>
  405d3e:	e55d      	b.n	4057fc <_vfiprintf_r+0xcc>
  405d40:	f049 0910 	orr.w	r9, r9, #16
  405d44:	9505      	str	r5, [sp, #20]
  405d46:	46b0      	mov	r8, r6
  405d48:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405d4c:	f019 0f20 	tst.w	r9, #32
  405d50:	d18d      	bne.n	405c6e <_vfiprintf_r+0x53e>
  405d52:	9a06      	ldr	r2, [sp, #24]
  405d54:	f019 0f10 	tst.w	r9, #16
  405d58:	4613      	mov	r3, r2
  405d5a:	f040 81c4 	bne.w	4060e6 <_vfiprintf_r+0x9b6>
  405d5e:	f019 0f40 	tst.w	r9, #64	; 0x40
  405d62:	f000 81c0 	beq.w	4060e6 <_vfiprintf_r+0x9b6>
  405d66:	f9b2 6000 	ldrsh.w	r6, [r2]
  405d6a:	3304      	adds	r3, #4
  405d6c:	17f7      	asrs	r7, r6, #31
  405d6e:	9306      	str	r3, [sp, #24]
  405d70:	4632      	mov	r2, r6
  405d72:	463b      	mov	r3, r7
  405d74:	e785      	b.n	405c82 <_vfiprintf_r+0x552>
  405d76:	f049 0910 	orr.w	r9, r9, #16
  405d7a:	9505      	str	r5, [sp, #20]
  405d7c:	46b0      	mov	r8, r6
  405d7e:	f019 0320 	ands.w	r3, r9, #32
  405d82:	f47f aecf 	bne.w	405b24 <_vfiprintf_r+0x3f4>
  405d86:	f019 0210 	ands.w	r2, r9, #16
  405d8a:	f040 81b3 	bne.w	4060f4 <_vfiprintf_r+0x9c4>
  405d8e:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  405d92:	f000 81af 	beq.w	4060f4 <_vfiprintf_r+0x9c4>
  405d96:	9906      	ldr	r1, [sp, #24]
  405d98:	4613      	mov	r3, r2
  405d9a:	2700      	movs	r7, #0
  405d9c:	460a      	mov	r2, r1
  405d9e:	880e      	ldrh	r6, [r1, #0]
  405da0:	3204      	adds	r2, #4
  405da2:	9206      	str	r2, [sp, #24]
  405da4:	e5c2      	b.n	40592c <_vfiprintf_r+0x1fc>
  405da6:	f049 0910 	orr.w	r9, r9, #16
  405daa:	9505      	str	r5, [sp, #20]
  405dac:	46b0      	mov	r8, r6
  405dae:	9a06      	ldr	r2, [sp, #24]
  405db0:	f019 0f20 	tst.w	r9, #32
  405db4:	f47f adb1 	bne.w	40591a <_vfiprintf_r+0x1ea>
  405db8:	f019 0f10 	tst.w	r9, #16
  405dbc:	4613      	mov	r3, r2
  405dbe:	f040 81a5 	bne.w	40610c <_vfiprintf_r+0x9dc>
  405dc2:	f019 0f40 	tst.w	r9, #64	; 0x40
  405dc6:	f000 81a1 	beq.w	40610c <_vfiprintf_r+0x9dc>
  405dca:	8816      	ldrh	r6, [r2, #0]
  405dcc:	3204      	adds	r2, #4
  405dce:	2700      	movs	r7, #0
  405dd0:	2301      	movs	r3, #1
  405dd2:	9206      	str	r2, [sp, #24]
  405dd4:	e5aa      	b.n	40592c <_vfiprintf_r+0x1fc>
  405dd6:	4a72      	ldr	r2, [pc, #456]	; (405fa0 <_vfiprintf_r+0x870>)
  405dd8:	f019 0f20 	tst.w	r9, #32
  405ddc:	9505      	str	r5, [sp, #20]
  405dde:	46b0      	mov	r8, r6
  405de0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405de4:	920a      	str	r2, [sp, #40]	; 0x28
  405de6:	f47f aeef 	bne.w	405bc8 <_vfiprintf_r+0x498>
  405dea:	9906      	ldr	r1, [sp, #24]
  405dec:	f019 0f10 	tst.w	r9, #16
  405df0:	460a      	mov	r2, r1
  405df2:	f040 8186 	bne.w	406102 <_vfiprintf_r+0x9d2>
  405df6:	f019 0f40 	tst.w	r9, #64	; 0x40
  405dfa:	f000 8182 	beq.w	406102 <_vfiprintf_r+0x9d2>
  405dfe:	3204      	adds	r2, #4
  405e00:	880e      	ldrh	r6, [r1, #0]
  405e02:	2700      	movs	r7, #0
  405e04:	9206      	str	r2, [sp, #24]
  405e06:	e6e8      	b.n	405bda <_vfiprintf_r+0x4aa>
  405e08:	9505      	str	r5, [sp, #20]
  405e0a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405e0e:	b30b      	cbz	r3, 405e54 <_vfiprintf_r+0x724>
  405e10:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  405e14:	f04f 0300 	mov.w	r3, #0
  405e18:	2701      	movs	r7, #1
  405e1a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405e1e:	ab12      	add	r3, sp, #72	; 0x48
  405e20:	46b8      	mov	r8, r7
  405e22:	9308      	str	r3, [sp, #32]
  405e24:	e719      	b.n	405c5a <_vfiprintf_r+0x52a>
  405e26:	9910      	ldr	r1, [sp, #64]	; 0x40
  405e28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e2a:	1c48      	adds	r0, r1, #1
  405e2c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  405e30:	2b00      	cmp	r3, #0
  405e32:	f43f adfc 	beq.w	405a2e <_vfiprintf_r+0x2fe>
  405e36:	3201      	adds	r2, #1
  405e38:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405e3c:	2301      	movs	r3, #1
  405e3e:	2807      	cmp	r0, #7
  405e40:	9010      	str	r0, [sp, #64]	; 0x40
  405e42:	9211      	str	r2, [sp, #68]	; 0x44
  405e44:	e884 000a 	stmia.w	r4, {r1, r3}
  405e48:	f300 80e7 	bgt.w	40601a <_vfiprintf_r+0x8ea>
  405e4c:	4601      	mov	r1, r0
  405e4e:	3408      	adds	r4, #8
  405e50:	3001      	adds	r0, #1
  405e52:	e5ec      	b.n	405a2e <_vfiprintf_r+0x2fe>
  405e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405e56:	b123      	cbz	r3, 405e62 <_vfiprintf_r+0x732>
  405e58:	9802      	ldr	r0, [sp, #8]
  405e5a:	aa0f      	add	r2, sp, #60	; 0x3c
  405e5c:	9901      	ldr	r1, [sp, #4]
  405e5e:	f7ff fc2b 	bl	4056b8 <__sprint_r.part.0>
  405e62:	9b01      	ldr	r3, [sp, #4]
  405e64:	899b      	ldrh	r3, [r3, #12]
  405e66:	065b      	lsls	r3, r3, #25
  405e68:	f53f ad48 	bmi.w	4058fc <_vfiprintf_r+0x1cc>
  405e6c:	9803      	ldr	r0, [sp, #12]
  405e6e:	b02d      	add	sp, #180	; 0xb4
  405e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e74:	2b01      	cmp	r3, #1
  405e76:	f000 811f 	beq.w	4060b8 <_vfiprintf_r+0x988>
  405e7a:	2b02      	cmp	r3, #2
  405e7c:	f040 80e7 	bne.w	40604e <_vfiprintf_r+0x91e>
  405e80:	465a      	mov	r2, fp
  405e82:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  405e86:	0933      	lsrs	r3, r6, #4
  405e88:	f006 000f 	and.w	r0, r6, #15
  405e8c:	0939      	lsrs	r1, r7, #4
  405e8e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405e92:	460f      	mov	r7, r1
  405e94:	461e      	mov	r6, r3
  405e96:	f81e 3000 	ldrb.w	r3, [lr, r0]
  405e9a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  405e9e:	ea56 0307 	orrs.w	r3, r6, r7
  405ea2:	d1f0      	bne.n	405e86 <_vfiprintf_r+0x756>
  405ea4:	9208      	str	r2, [sp, #32]
  405ea6:	ebc2 080b 	rsb	r8, r2, fp
  405eaa:	e565      	b.n	405978 <_vfiprintf_r+0x248>
  405eac:	2a00      	cmp	r2, #0
  405eae:	f040 8167 	bne.w	406180 <_vfiprintf_r+0xa50>
  405eb2:	2201      	movs	r2, #1
  405eb4:	9908      	ldr	r1, [sp, #32]
  405eb6:	4643      	mov	r3, r8
  405eb8:	465c      	mov	r4, fp
  405eba:	911c      	str	r1, [sp, #112]	; 0x70
  405ebc:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  405ec0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  405ec4:	9210      	str	r2, [sp, #64]	; 0x40
  405ec6:	f104 0208 	add.w	r2, r4, #8
  405eca:	f019 0f04 	tst.w	r9, #4
  405ece:	d047      	beq.n	405f60 <_vfiprintf_r+0x830>
  405ed0:	9905      	ldr	r1, [sp, #20]
  405ed2:	1bcd      	subs	r5, r1, r7
  405ed4:	2d00      	cmp	r5, #0
  405ed6:	dd43      	ble.n	405f60 <_vfiprintf_r+0x830>
  405ed8:	2d10      	cmp	r5, #16
  405eda:	f340 8201 	ble.w	4062e0 <_vfiprintf_r+0xbb0>
  405ede:	9810      	ldr	r0, [sp, #64]	; 0x40
  405ee0:	2410      	movs	r4, #16
  405ee2:	4e30      	ldr	r6, [pc, #192]	; (405fa4 <_vfiprintf_r+0x874>)
  405ee4:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405ee8:	f8dd 9004 	ldr.w	r9, [sp, #4]
  405eec:	e006      	b.n	405efc <_vfiprintf_r+0x7cc>
  405eee:	f04f 0e01 	mov.w	lr, #1
  405ef2:	4618      	mov	r0, r3
  405ef4:	465a      	mov	r2, fp
  405ef6:	3d10      	subs	r5, #16
  405ef8:	2d10      	cmp	r5, #16
  405efa:	dd1d      	ble.n	405f38 <_vfiprintf_r+0x808>
  405efc:	1c41      	adds	r1, r0, #1
  405efe:	3310      	adds	r3, #16
  405f00:	6016      	str	r6, [r2, #0]
  405f02:	f100 0e02 	add.w	lr, r0, #2
  405f06:	2907      	cmp	r1, #7
  405f08:	6054      	str	r4, [r2, #4]
  405f0a:	9311      	str	r3, [sp, #68]	; 0x44
  405f0c:	4608      	mov	r0, r1
  405f0e:	f102 0208 	add.w	r2, r2, #8
  405f12:	9110      	str	r1, [sp, #64]	; 0x40
  405f14:	ddef      	ble.n	405ef6 <_vfiprintf_r+0x7c6>
  405f16:	2b00      	cmp	r3, #0
  405f18:	d0e9      	beq.n	405eee <_vfiprintf_r+0x7be>
  405f1a:	aa0f      	add	r2, sp, #60	; 0x3c
  405f1c:	4640      	mov	r0, r8
  405f1e:	4649      	mov	r1, r9
  405f20:	f7ff fbca 	bl	4056b8 <__sprint_r.part.0>
  405f24:	465a      	mov	r2, fp
  405f26:	2800      	cmp	r0, #0
  405f28:	d19b      	bne.n	405e62 <_vfiprintf_r+0x732>
  405f2a:	3d10      	subs	r5, #16
  405f2c:	9810      	ldr	r0, [sp, #64]	; 0x40
  405f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f30:	2d10      	cmp	r5, #16
  405f32:	f100 0e01 	add.w	lr, r0, #1
  405f36:	dce1      	bgt.n	405efc <_vfiprintf_r+0x7cc>
  405f38:	442b      	add	r3, r5
  405f3a:	f1be 0f07 	cmp.w	lr, #7
  405f3e:	6016      	str	r6, [r2, #0]
  405f40:	6055      	str	r5, [r2, #4]
  405f42:	9311      	str	r3, [sp, #68]	; 0x44
  405f44:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405f48:	dd0a      	ble.n	405f60 <_vfiprintf_r+0x830>
  405f4a:	2b00      	cmp	r3, #0
  405f4c:	f43f add3 	beq.w	405af6 <_vfiprintf_r+0x3c6>
  405f50:	9802      	ldr	r0, [sp, #8]
  405f52:	aa0f      	add	r2, sp, #60	; 0x3c
  405f54:	9901      	ldr	r1, [sp, #4]
  405f56:	f7ff fbaf 	bl	4056b8 <__sprint_r.part.0>
  405f5a:	2800      	cmp	r0, #0
  405f5c:	d181      	bne.n	405e62 <_vfiprintf_r+0x732>
  405f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f60:	9a03      	ldr	r2, [sp, #12]
  405f62:	9905      	ldr	r1, [sp, #20]
  405f64:	428f      	cmp	r7, r1
  405f66:	bfac      	ite	ge
  405f68:	19d2      	addge	r2, r2, r7
  405f6a:	1852      	addlt	r2, r2, r1
  405f6c:	9203      	str	r2, [sp, #12]
  405f6e:	2b00      	cmp	r3, #0
  405f70:	f43f adc8 	beq.w	405b04 <_vfiprintf_r+0x3d4>
  405f74:	9802      	ldr	r0, [sp, #8]
  405f76:	aa0f      	add	r2, sp, #60	; 0x3c
  405f78:	9901      	ldr	r1, [sp, #4]
  405f7a:	f7ff fb9d 	bl	4056b8 <__sprint_r.part.0>
  405f7e:	2800      	cmp	r0, #0
  405f80:	f43f adc0 	beq.w	405b04 <_vfiprintf_r+0x3d4>
  405f84:	e76d      	b.n	405e62 <_vfiprintf_r+0x732>
  405f86:	9b05      	ldr	r3, [sp, #20]
  405f88:	1bdd      	subs	r5, r3, r7
  405f8a:	2d00      	cmp	r5, #0
  405f8c:	f77f ad63 	ble.w	405a56 <_vfiprintf_r+0x326>
  405f90:	2d10      	cmp	r5, #16
  405f92:	f340 81b0 	ble.w	4062f6 <_vfiprintf_r+0xbc6>
  405f96:	4e04      	ldr	r6, [pc, #16]	; (405fa8 <_vfiprintf_r+0x878>)
  405f98:	2310      	movs	r3, #16
  405f9a:	e00e      	b.n	405fba <_vfiprintf_r+0x88a>
  405f9c:	00409e44 	.word	0x00409e44
  405fa0:	00409e30 	.word	0x00409e30
  405fa4:	00409e74 	.word	0x00409e74
  405fa8:	00409e64 	.word	0x00409e64
  405fac:	f04f 0e01 	mov.w	lr, #1
  405fb0:	4611      	mov	r1, r2
  405fb2:	465c      	mov	r4, fp
  405fb4:	3d10      	subs	r5, #16
  405fb6:	2d10      	cmp	r5, #16
  405fb8:	dd20      	ble.n	405ffc <_vfiprintf_r+0x8cc>
  405fba:	1c48      	adds	r0, r1, #1
  405fbc:	3210      	adds	r2, #16
  405fbe:	6026      	str	r6, [r4, #0]
  405fc0:	f101 0e02 	add.w	lr, r1, #2
  405fc4:	2807      	cmp	r0, #7
  405fc6:	6063      	str	r3, [r4, #4]
  405fc8:	9211      	str	r2, [sp, #68]	; 0x44
  405fca:	4601      	mov	r1, r0
  405fcc:	f104 0408 	add.w	r4, r4, #8
  405fd0:	9010      	str	r0, [sp, #64]	; 0x40
  405fd2:	ddef      	ble.n	405fb4 <_vfiprintf_r+0x884>
  405fd4:	2a00      	cmp	r2, #0
  405fd6:	d0e9      	beq.n	405fac <_vfiprintf_r+0x87c>
  405fd8:	9802      	ldr	r0, [sp, #8]
  405fda:	aa0f      	add	r2, sp, #60	; 0x3c
  405fdc:	9901      	ldr	r1, [sp, #4]
  405fde:	465c      	mov	r4, fp
  405fe0:	9307      	str	r3, [sp, #28]
  405fe2:	f7ff fb69 	bl	4056b8 <__sprint_r.part.0>
  405fe6:	2800      	cmp	r0, #0
  405fe8:	f47f af3b 	bne.w	405e62 <_vfiprintf_r+0x732>
  405fec:	3d10      	subs	r5, #16
  405fee:	9910      	ldr	r1, [sp, #64]	; 0x40
  405ff0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ff2:	2d10      	cmp	r5, #16
  405ff4:	f101 0e01 	add.w	lr, r1, #1
  405ff8:	9b07      	ldr	r3, [sp, #28]
  405ffa:	dcde      	bgt.n	405fba <_vfiprintf_r+0x88a>
  405ffc:	442a      	add	r2, r5
  405ffe:	f1be 0f07 	cmp.w	lr, #7
  406002:	6026      	str	r6, [r4, #0]
  406004:	6065      	str	r5, [r4, #4]
  406006:	9211      	str	r2, [sp, #68]	; 0x44
  406008:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40600c:	f300 80b1 	bgt.w	406172 <_vfiprintf_r+0xa42>
  406010:	3408      	adds	r4, #8
  406012:	f10e 0001 	add.w	r0, lr, #1
  406016:	4671      	mov	r1, lr
  406018:	e51d      	b.n	405a56 <_vfiprintf_r+0x326>
  40601a:	2a00      	cmp	r2, #0
  40601c:	f040 808b 	bne.w	406136 <_vfiprintf_r+0xa06>
  406020:	f1bc 0f00 	cmp.w	ip, #0
  406024:	f000 8083 	beq.w	40612e <_vfiprintf_r+0x9fe>
  406028:	aa0e      	add	r2, sp, #56	; 0x38
  40602a:	2102      	movs	r1, #2
  40602c:	4618      	mov	r0, r3
  40602e:	465c      	mov	r4, fp
  406030:	921c      	str	r2, [sp, #112]	; 0x70
  406032:	460a      	mov	r2, r1
  406034:	911d      	str	r1, [sp, #116]	; 0x74
  406036:	e507      	b.n	405a48 <_vfiprintf_r+0x318>
  406038:	2a00      	cmp	r2, #0
  40603a:	f040 808d 	bne.w	406158 <_vfiprintf_r+0xa28>
  40603e:	2001      	movs	r0, #1
  406040:	4611      	mov	r1, r2
  406042:	465c      	mov	r4, fp
  406044:	e503      	b.n	405a4e <_vfiprintf_r+0x31e>
  406046:	4690      	mov	r8, r2
  406048:	f8cd b020 	str.w	fp, [sp, #32]
  40604c:	e494      	b.n	405978 <_vfiprintf_r+0x248>
  40604e:	4659      	mov	r1, fp
  406050:	08f2      	lsrs	r2, r6, #3
  406052:	f006 0307 	and.w	r3, r6, #7
  406056:	08f8      	lsrs	r0, r7, #3
  406058:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40605c:	3330      	adds	r3, #48	; 0x30
  40605e:	4607      	mov	r7, r0
  406060:	4616      	mov	r6, r2
  406062:	f801 3d01 	strb.w	r3, [r1, #-1]!
  406066:	ea56 0207 	orrs.w	r2, r6, r7
  40606a:	d1f1      	bne.n	406050 <_vfiprintf_r+0x920>
  40606c:	f019 0f01 	tst.w	r9, #1
  406070:	9108      	str	r1, [sp, #32]
  406072:	f040 8092 	bne.w	40619a <_vfiprintf_r+0xa6a>
  406076:	ebc1 080b 	rsb	r8, r1, fp
  40607a:	e47d      	b.n	405978 <_vfiprintf_r+0x248>
  40607c:	2302      	movs	r3, #2
  40607e:	e455      	b.n	40592c <_vfiprintf_r+0x1fc>
  406080:	2a00      	cmp	r2, #0
  406082:	f040 80e6 	bne.w	406252 <_vfiprintf_r+0xb22>
  406086:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40608a:	2b00      	cmp	r3, #0
  40608c:	f000 80bb 	beq.w	406206 <_vfiprintf_r+0xad6>
  406090:	2301      	movs	r3, #1
  406092:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  406096:	465c      	mov	r4, fp
  406098:	921c      	str	r2, [sp, #112]	; 0x70
  40609a:	4618      	mov	r0, r3
  40609c:	931d      	str	r3, [sp, #116]	; 0x74
  40609e:	461a      	mov	r2, r3
  4060a0:	e6d4      	b.n	405e4c <_vfiprintf_r+0x71c>
  4060a2:	9a05      	ldr	r2, [sp, #20]
  4060a4:	1bd5      	subs	r5, r2, r7
  4060a6:	465a      	mov	r2, fp
  4060a8:	2d00      	cmp	r5, #0
  4060aa:	f73f af15 	bgt.w	405ed8 <_vfiprintf_r+0x7a8>
  4060ae:	e522      	b.n	405af6 <_vfiprintf_r+0x3c6>
  4060b0:	4698      	mov	r8, r3
  4060b2:	f8cd b020 	str.w	fp, [sp, #32]
  4060b6:	e45f      	b.n	405978 <_vfiprintf_r+0x248>
  4060b8:	2f00      	cmp	r7, #0
  4060ba:	bf08      	it	eq
  4060bc:	2e0a      	cmpeq	r6, #10
  4060be:	d279      	bcs.n	4061b4 <_vfiprintf_r+0xa84>
  4060c0:	ab2c      	add	r3, sp, #176	; 0xb0
  4060c2:	3630      	adds	r6, #48	; 0x30
  4060c4:	f803 6d41 	strb.w	r6, [r3, #-65]!
  4060c8:	ebc3 080b 	rsb	r8, r3, fp
  4060cc:	9308      	str	r3, [sp, #32]
  4060ce:	e453      	b.n	405978 <_vfiprintf_r+0x248>
  4060d0:	9802      	ldr	r0, [sp, #8]
  4060d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4060d4:	9901      	ldr	r1, [sp, #4]
  4060d6:	f7ff faef 	bl	4056b8 <__sprint_r.part.0>
  4060da:	2800      	cmp	r0, #0
  4060dc:	f47f aec1 	bne.w	405e62 <_vfiprintf_r+0x732>
  4060e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4060e2:	465a      	mov	r2, fp
  4060e4:	e6f1      	b.n	405eca <_vfiprintf_r+0x79a>
  4060e6:	681e      	ldr	r6, [r3, #0]
  4060e8:	3304      	adds	r3, #4
  4060ea:	17f7      	asrs	r7, r6, #31
  4060ec:	9306      	str	r3, [sp, #24]
  4060ee:	4632      	mov	r2, r6
  4060f0:	463b      	mov	r3, r7
  4060f2:	e5c6      	b.n	405c82 <_vfiprintf_r+0x552>
  4060f4:	9906      	ldr	r1, [sp, #24]
  4060f6:	2700      	movs	r7, #0
  4060f8:	460a      	mov	r2, r1
  4060fa:	680e      	ldr	r6, [r1, #0]
  4060fc:	3204      	adds	r2, #4
  4060fe:	9206      	str	r2, [sp, #24]
  406100:	e414      	b.n	40592c <_vfiprintf_r+0x1fc>
  406102:	6816      	ldr	r6, [r2, #0]
  406104:	3204      	adds	r2, #4
  406106:	2700      	movs	r7, #0
  406108:	9206      	str	r2, [sp, #24]
  40610a:	e566      	b.n	405bda <_vfiprintf_r+0x4aa>
  40610c:	3204      	adds	r2, #4
  40610e:	681e      	ldr	r6, [r3, #0]
  406110:	2700      	movs	r7, #0
  406112:	2301      	movs	r3, #1
  406114:	9206      	str	r2, [sp, #24]
  406116:	e409      	b.n	40592c <_vfiprintf_r+0x1fc>
  406118:	9802      	ldr	r0, [sp, #8]
  40611a:	aa0f      	add	r2, sp, #60	; 0x3c
  40611c:	9901      	ldr	r1, [sp, #4]
  40611e:	f7ff facb 	bl	4056b8 <__sprint_r.part.0>
  406122:	2800      	cmp	r0, #0
  406124:	f47f ae9d 	bne.w	405e62 <_vfiprintf_r+0x732>
  406128:	465c      	mov	r4, fp
  40612a:	f7ff bbc8 	b.w	4058be <_vfiprintf_r+0x18e>
  40612e:	4618      	mov	r0, r3
  406130:	4611      	mov	r1, r2
  406132:	465c      	mov	r4, fp
  406134:	e48b      	b.n	405a4e <_vfiprintf_r+0x31e>
  406136:	9802      	ldr	r0, [sp, #8]
  406138:	aa0f      	add	r2, sp, #60	; 0x3c
  40613a:	9901      	ldr	r1, [sp, #4]
  40613c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  406140:	f7ff faba 	bl	4056b8 <__sprint_r.part.0>
  406144:	2800      	cmp	r0, #0
  406146:	f47f ae8c 	bne.w	405e62 <_vfiprintf_r+0x732>
  40614a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40614c:	465c      	mov	r4, fp
  40614e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406150:	1c48      	adds	r0, r1, #1
  406152:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  406156:	e46a      	b.n	405a2e <_vfiprintf_r+0x2fe>
  406158:	9802      	ldr	r0, [sp, #8]
  40615a:	aa0f      	add	r2, sp, #60	; 0x3c
  40615c:	9901      	ldr	r1, [sp, #4]
  40615e:	f7ff faab 	bl	4056b8 <__sprint_r.part.0>
  406162:	2800      	cmp	r0, #0
  406164:	f47f ae7d 	bne.w	405e62 <_vfiprintf_r+0x732>
  406168:	9910      	ldr	r1, [sp, #64]	; 0x40
  40616a:	465c      	mov	r4, fp
  40616c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40616e:	1c48      	adds	r0, r1, #1
  406170:	e46d      	b.n	405a4e <_vfiprintf_r+0x31e>
  406172:	2a00      	cmp	r2, #0
  406174:	f040 8095 	bne.w	4062a2 <_vfiprintf_r+0xb72>
  406178:	2001      	movs	r0, #1
  40617a:	4611      	mov	r1, r2
  40617c:	465c      	mov	r4, fp
  40617e:	e46a      	b.n	405a56 <_vfiprintf_r+0x326>
  406180:	9802      	ldr	r0, [sp, #8]
  406182:	aa0f      	add	r2, sp, #60	; 0x3c
  406184:	9901      	ldr	r1, [sp, #4]
  406186:	f7ff fa97 	bl	4056b8 <__sprint_r.part.0>
  40618a:	2800      	cmp	r0, #0
  40618c:	f47f ae69 	bne.w	405e62 <_vfiprintf_r+0x732>
  406190:	9810      	ldr	r0, [sp, #64]	; 0x40
  406192:	465c      	mov	r4, fp
  406194:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406196:	3001      	adds	r0, #1
  406198:	e49b      	b.n	405ad2 <_vfiprintf_r+0x3a2>
  40619a:	2b30      	cmp	r3, #48	; 0x30
  40619c:	9b08      	ldr	r3, [sp, #32]
  40619e:	d022      	beq.n	4061e6 <_vfiprintf_r+0xab6>
  4061a0:	3b01      	subs	r3, #1
  4061a2:	461a      	mov	r2, r3
  4061a4:	9308      	str	r3, [sp, #32]
  4061a6:	2330      	movs	r3, #48	; 0x30
  4061a8:	ebc2 080b 	rsb	r8, r2, fp
  4061ac:	f801 3c01 	strb.w	r3, [r1, #-1]
  4061b0:	f7ff bbe2 	b.w	405978 <_vfiprintf_r+0x248>
  4061b4:	46d8      	mov	r8, fp
  4061b6:	4630      	mov	r0, r6
  4061b8:	4639      	mov	r1, r7
  4061ba:	220a      	movs	r2, #10
  4061bc:	2300      	movs	r3, #0
  4061be:	f003 f9f1 	bl	4095a4 <__aeabi_uldivmod>
  4061c2:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  4061c6:	4630      	mov	r0, r6
  4061c8:	4639      	mov	r1, r7
  4061ca:	2300      	movs	r3, #0
  4061cc:	220a      	movs	r2, #10
  4061ce:	f808 ed01 	strb.w	lr, [r8, #-1]!
  4061d2:	f003 f9e7 	bl	4095a4 <__aeabi_uldivmod>
  4061d6:	4606      	mov	r6, r0
  4061d8:	460f      	mov	r7, r1
  4061da:	ea56 0307 	orrs.w	r3, r6, r7
  4061de:	d1ea      	bne.n	4061b6 <_vfiprintf_r+0xa86>
  4061e0:	4643      	mov	r3, r8
  4061e2:	f8cd 8020 	str.w	r8, [sp, #32]
  4061e6:	ebc3 080b 	rsb	r8, r3, fp
  4061ea:	f7ff bbc5 	b.w	405978 <_vfiprintf_r+0x248>
  4061ee:	252d      	movs	r5, #45	; 0x2d
  4061f0:	4276      	negs	r6, r6
  4061f2:	f8cd 8010 	str.w	r8, [sp, #16]
  4061f6:	f04f 0301 	mov.w	r3, #1
  4061fa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4061fe:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406202:	f7ff bb9a 	b.w	40593a <_vfiprintf_r+0x20a>
  406206:	4611      	mov	r1, r2
  406208:	2001      	movs	r0, #1
  40620a:	465c      	mov	r4, fp
  40620c:	f1bc 0f00 	cmp.w	ip, #0
  406210:	f43f ac21 	beq.w	405a56 <_vfiprintf_r+0x326>
  406214:	aa0e      	add	r2, sp, #56	; 0x38
  406216:	2302      	movs	r3, #2
  406218:	f8cb 2000 	str.w	r2, [fp]
  40621c:	461a      	mov	r2, r3
  40621e:	f8cb 3004 	str.w	r3, [fp, #4]
  406222:	e411      	b.n	405a48 <_vfiprintf_r+0x318>
  406224:	f019 0f10 	tst.w	r9, #16
  406228:	d10b      	bne.n	406242 <_vfiprintf_r+0xb12>
  40622a:	f019 0f40 	tst.w	r9, #64	; 0x40
  40622e:	d008      	beq.n	406242 <_vfiprintf_r+0xb12>
  406230:	9a06      	ldr	r2, [sp, #24]
  406232:	6813      	ldr	r3, [r2, #0]
  406234:	3204      	adds	r2, #4
  406236:	9206      	str	r2, [sp, #24]
  406238:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40623c:	801a      	strh	r2, [r3, #0]
  40623e:	f7ff baa9 	b.w	405794 <_vfiprintf_r+0x64>
  406242:	9a06      	ldr	r2, [sp, #24]
  406244:	6813      	ldr	r3, [r2, #0]
  406246:	3204      	adds	r2, #4
  406248:	9206      	str	r2, [sp, #24]
  40624a:	9a03      	ldr	r2, [sp, #12]
  40624c:	601a      	str	r2, [r3, #0]
  40624e:	f7ff baa1 	b.w	405794 <_vfiprintf_r+0x64>
  406252:	9802      	ldr	r0, [sp, #8]
  406254:	aa0f      	add	r2, sp, #60	; 0x3c
  406256:	9901      	ldr	r1, [sp, #4]
  406258:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40625c:	f7ff fa2c 	bl	4056b8 <__sprint_r.part.0>
  406260:	2800      	cmp	r0, #0
  406262:	f47f adfe 	bne.w	405e62 <_vfiprintf_r+0x732>
  406266:	9910      	ldr	r1, [sp, #64]	; 0x40
  406268:	465c      	mov	r4, fp
  40626a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40626c:	1c48      	adds	r0, r1, #1
  40626e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  406272:	e5db      	b.n	405e2c <_vfiprintf_r+0x6fc>
  406274:	f049 0920 	orr.w	r9, r9, #32
  406278:	f10a 0001 	add.w	r0, sl, #1
  40627c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406280:	f7ff baba 	b.w	4057f8 <_vfiprintf_r+0xc8>
  406284:	426d      	negs	r5, r5
  406286:	9306      	str	r3, [sp, #24]
  406288:	4650      	mov	r0, sl
  40628a:	e440      	b.n	405b0e <_vfiprintf_r+0x3de>
  40628c:	9808      	ldr	r0, [sp, #32]
  40628e:	9606      	str	r6, [sp, #24]
  406290:	f7fd ff5c 	bl	40414c <strlen>
  406294:	2300      	movs	r3, #0
  406296:	4680      	mov	r8, r0
  406298:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40629c:	9304      	str	r3, [sp, #16]
  40629e:	f7ff bb6b 	b.w	405978 <_vfiprintf_r+0x248>
  4062a2:	9802      	ldr	r0, [sp, #8]
  4062a4:	aa0f      	add	r2, sp, #60	; 0x3c
  4062a6:	9901      	ldr	r1, [sp, #4]
  4062a8:	f7ff fa06 	bl	4056b8 <__sprint_r.part.0>
  4062ac:	2800      	cmp	r0, #0
  4062ae:	f47f add8 	bne.w	405e62 <_vfiprintf_r+0x732>
  4062b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062b4:	465c      	mov	r4, fp
  4062b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062b8:	1c48      	adds	r0, r1, #1
  4062ba:	f7ff bbcc 	b.w	405a56 <_vfiprintf_r+0x326>
  4062be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062c2:	3101      	adds	r1, #1
  4062c4:	4e14      	ldr	r6, [pc, #80]	; (406318 <_vfiprintf_r+0xbe8>)
  4062c6:	f7ff bba3 	b.w	405a10 <_vfiprintf_r+0x2e0>
  4062ca:	f1b8 0f06 	cmp.w	r8, #6
  4062ce:	4b13      	ldr	r3, [pc, #76]	; (40631c <_vfiprintf_r+0xbec>)
  4062d0:	9606      	str	r6, [sp, #24]
  4062d2:	bf28      	it	cs
  4062d4:	f04f 0806 	movcs.w	r8, #6
  4062d8:	9308      	str	r3, [sp, #32]
  4062da:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  4062de:	e4bc      	b.n	405c5a <_vfiprintf_r+0x52a>
  4062e0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062e2:	4e0d      	ldr	r6, [pc, #52]	; (406318 <_vfiprintf_r+0xbe8>)
  4062e4:	f101 0e01 	add.w	lr, r1, #1
  4062e8:	e626      	b.n	405f38 <_vfiprintf_r+0x808>
  4062ea:	9606      	str	r6, [sp, #24]
  4062ec:	9004      	str	r0, [sp, #16]
  4062ee:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4062f2:	f7ff bb41 	b.w	405978 <_vfiprintf_r+0x248>
  4062f6:	4686      	mov	lr, r0
  4062f8:	4e09      	ldr	r6, [pc, #36]	; (406320 <_vfiprintf_r+0xbf0>)
  4062fa:	e67f      	b.n	405ffc <_vfiprintf_r+0x8cc>
  4062fc:	9a06      	ldr	r2, [sp, #24]
  4062fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406302:	6816      	ldr	r6, [r2, #0]
  406304:	3204      	adds	r2, #4
  406306:	2e00      	cmp	r6, #0
  406308:	9206      	str	r2, [sp, #24]
  40630a:	f6bf aa75 	bge.w	4057f8 <_vfiprintf_r+0xc8>
  40630e:	f04f 36ff 	mov.w	r6, #4294967295
  406312:	f7ff ba71 	b.w	4057f8 <_vfiprintf_r+0xc8>
  406316:	bf00      	nop
  406318:	00409e74 	.word	0x00409e74
  40631c:	00409e58 	.word	0x00409e58
  406320:	00409e64 	.word	0x00409e64

00406324 <__sbprintf>:
  406324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406328:	898d      	ldrh	r5, [r1, #12]
  40632a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40632e:	4688      	mov	r8, r1
  406330:	f44f 6680 	mov.w	r6, #1024	; 0x400
  406334:	f025 0502 	bic.w	r5, r5, #2
  406338:	ac1c      	add	r4, sp, #112	; 0x70
  40633a:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40633e:	2700      	movs	r7, #0
  406340:	f8ad 5014 	strh.w	r5, [sp, #20]
  406344:	a902      	add	r1, sp, #8
  406346:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40634a:	4681      	mov	r9, r0
  40634c:	9402      	str	r4, [sp, #8]
  40634e:	9501      	str	r5, [sp, #4]
  406350:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  406354:	9406      	str	r4, [sp, #24]
  406356:	951b      	str	r5, [sp, #108]	; 0x6c
  406358:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40635c:	f8ad a016 	strh.w	sl, [sp, #22]
  406360:	9509      	str	r5, [sp, #36]	; 0x24
  406362:	9d01      	ldr	r5, [sp, #4]
  406364:	9708      	str	r7, [sp, #32]
  406366:	950b      	str	r5, [sp, #44]	; 0x2c
  406368:	9604      	str	r6, [sp, #16]
  40636a:	9607      	str	r6, [sp, #28]
  40636c:	f7ff f9e0 	bl	405730 <_vfiprintf_r>
  406370:	1e04      	subs	r4, r0, #0
  406372:	db07      	blt.n	406384 <__sbprintf+0x60>
  406374:	4648      	mov	r0, r9
  406376:	a902      	add	r1, sp, #8
  406378:	f001 f946 	bl	407608 <_fflush_r>
  40637c:	42b8      	cmp	r0, r7
  40637e:	bf18      	it	ne
  406380:	f04f 34ff 	movne.w	r4, #4294967295
  406384:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  406388:	065b      	lsls	r3, r3, #25
  40638a:	d505      	bpl.n	406398 <__sbprintf+0x74>
  40638c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  406390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406394:	f8a8 300c 	strh.w	r3, [r8, #12]
  406398:	4620      	mov	r0, r4
  40639a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40639e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4063a2:	bf00      	nop

004063a4 <__swsetup_r>:
  4063a4:	b538      	push	{r3, r4, r5, lr}
  4063a6:	4b2f      	ldr	r3, [pc, #188]	; (406464 <__swsetup_r+0xc0>)
  4063a8:	4605      	mov	r5, r0
  4063aa:	460c      	mov	r4, r1
  4063ac:	6818      	ldr	r0, [r3, #0]
  4063ae:	b110      	cbz	r0, 4063b6 <__swsetup_r+0x12>
  4063b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063b2:	2b00      	cmp	r3, #0
  4063b4:	d036      	beq.n	406424 <__swsetup_r+0x80>
  4063b6:	89a2      	ldrh	r2, [r4, #12]
  4063b8:	b293      	uxth	r3, r2
  4063ba:	0718      	lsls	r0, r3, #28
  4063bc:	d50b      	bpl.n	4063d6 <__swsetup_r+0x32>
  4063be:	6920      	ldr	r0, [r4, #16]
  4063c0:	b1a0      	cbz	r0, 4063ec <__swsetup_r+0x48>
  4063c2:	f013 0201 	ands.w	r2, r3, #1
  4063c6:	d11d      	bne.n	406404 <__swsetup_r+0x60>
  4063c8:	0799      	lsls	r1, r3, #30
  4063ca:	d400      	bmi.n	4063ce <__swsetup_r+0x2a>
  4063cc:	6962      	ldr	r2, [r4, #20]
  4063ce:	60a2      	str	r2, [r4, #8]
  4063d0:	b1f8      	cbz	r0, 406412 <__swsetup_r+0x6e>
  4063d2:	2000      	movs	r0, #0
  4063d4:	bd38      	pop	{r3, r4, r5, pc}
  4063d6:	06d9      	lsls	r1, r3, #27
  4063d8:	d53b      	bpl.n	406452 <__swsetup_r+0xae>
  4063da:	0758      	lsls	r0, r3, #29
  4063dc:	d425      	bmi.n	40642a <__swsetup_r+0x86>
  4063de:	6920      	ldr	r0, [r4, #16]
  4063e0:	f042 0208 	orr.w	r2, r2, #8
  4063e4:	b293      	uxth	r3, r2
  4063e6:	81a2      	strh	r2, [r4, #12]
  4063e8:	2800      	cmp	r0, #0
  4063ea:	d1ea      	bne.n	4063c2 <__swsetup_r+0x1e>
  4063ec:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4063f0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4063f4:	d0e5      	beq.n	4063c2 <__swsetup_r+0x1e>
  4063f6:	4628      	mov	r0, r5
  4063f8:	4621      	mov	r1, r4
  4063fa:	f001 fd17 	bl	407e2c <__smakebuf_r>
  4063fe:	89a3      	ldrh	r3, [r4, #12]
  406400:	6920      	ldr	r0, [r4, #16]
  406402:	e7de      	b.n	4063c2 <__swsetup_r+0x1e>
  406404:	6963      	ldr	r3, [r4, #20]
  406406:	2200      	movs	r2, #0
  406408:	425b      	negs	r3, r3
  40640a:	60a2      	str	r2, [r4, #8]
  40640c:	61a3      	str	r3, [r4, #24]
  40640e:	2800      	cmp	r0, #0
  406410:	d1df      	bne.n	4063d2 <__swsetup_r+0x2e>
  406412:	89a3      	ldrh	r3, [r4, #12]
  406414:	061a      	lsls	r2, r3, #24
  406416:	d5dd      	bpl.n	4063d4 <__swsetup_r+0x30>
  406418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40641c:	f04f 30ff 	mov.w	r0, #4294967295
  406420:	81a3      	strh	r3, [r4, #12]
  406422:	bd38      	pop	{r3, r4, r5, pc}
  406424:	f001 f98a 	bl	40773c <__sinit>
  406428:	e7c5      	b.n	4063b6 <__swsetup_r+0x12>
  40642a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40642c:	b149      	cbz	r1, 406442 <__swsetup_r+0x9e>
  40642e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406432:	4299      	cmp	r1, r3
  406434:	d003      	beq.n	40643e <__swsetup_r+0x9a>
  406436:	4628      	mov	r0, r5
  406438:	f001 fa58 	bl	4078ec <_free_r>
  40643c:	89a2      	ldrh	r2, [r4, #12]
  40643e:	2300      	movs	r3, #0
  406440:	6323      	str	r3, [r4, #48]	; 0x30
  406442:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406446:	2300      	movs	r3, #0
  406448:	6920      	ldr	r0, [r4, #16]
  40644a:	b292      	uxth	r2, r2
  40644c:	e884 0009 	stmia.w	r4, {r0, r3}
  406450:	e7c6      	b.n	4063e0 <__swsetup_r+0x3c>
  406452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406456:	2309      	movs	r3, #9
  406458:	f04f 30ff 	mov.w	r0, #4294967295
  40645c:	602b      	str	r3, [r5, #0]
  40645e:	81a2      	strh	r2, [r4, #12]
  406460:	bd38      	pop	{r3, r4, r5, pc}
  406462:	bf00      	nop
  406464:	20400440 	.word	0x20400440

00406468 <register_fini>:
  406468:	4b02      	ldr	r3, [pc, #8]	; (406474 <register_fini+0xc>)
  40646a:	b113      	cbz	r3, 406472 <register_fini+0xa>
  40646c:	4802      	ldr	r0, [pc, #8]	; (406478 <register_fini+0x10>)
  40646e:	f000 b80d 	b.w	40648c <atexit>
  406472:	4770      	bx	lr
  406474:	00000000 	.word	0x00000000
  406478:	00407751 	.word	0x00407751

0040647c <abort>:
  40647c:	b508      	push	{r3, lr}
  40647e:	2006      	movs	r0, #6
  406480:	f002 fde2 	bl	409048 <raise>
  406484:	2001      	movs	r0, #1
  406486:	f7fc fd7b 	bl	402f80 <_exit>
  40648a:	bf00      	nop

0040648c <atexit>:
  40648c:	4601      	mov	r1, r0
  40648e:	2000      	movs	r0, #0
  406490:	4602      	mov	r2, r0
  406492:	4603      	mov	r3, r0
  406494:	f002 bf60 	b.w	409358 <__register_exitproc>

00406498 <quorem>:
  406498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40649c:	6903      	ldr	r3, [r0, #16]
  40649e:	b083      	sub	sp, #12
  4064a0:	690f      	ldr	r7, [r1, #16]
  4064a2:	429f      	cmp	r7, r3
  4064a4:	f300 8093 	bgt.w	4065ce <quorem+0x136>
  4064a8:	3f01      	subs	r7, #1
  4064aa:	f101 0614 	add.w	r6, r1, #20
  4064ae:	f100 0a14 	add.w	sl, r0, #20
  4064b2:	00bb      	lsls	r3, r7, #2
  4064b4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  4064b8:	461d      	mov	r5, r3
  4064ba:	9300      	str	r3, [sp, #0]
  4064bc:	3201      	adds	r2, #1
  4064be:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  4064c2:	eb0a 0405 	add.w	r4, sl, r5
  4064c6:	eb06 0905 	add.w	r9, r6, r5
  4064ca:	fbb3 f8f2 	udiv	r8, r3, r2
  4064ce:	9401      	str	r4, [sp, #4]
  4064d0:	f1b8 0f00 	cmp.w	r8, #0
  4064d4:	d040      	beq.n	406558 <quorem+0xc0>
  4064d6:	2500      	movs	r5, #0
  4064d8:	46b4      	mov	ip, r6
  4064da:	46d6      	mov	lr, sl
  4064dc:	462b      	mov	r3, r5
  4064de:	f85c bb04 	ldr.w	fp, [ip], #4
  4064e2:	f8de 2000 	ldr.w	r2, [lr]
  4064e6:	fa1f f48b 	uxth.w	r4, fp
  4064ea:	45e1      	cmp	r9, ip
  4064ec:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  4064f0:	fb04 5508 	mla	r5, r4, r8, r5
  4064f4:	fb0b fb08 	mul.w	fp, fp, r8
  4064f8:	b2ac      	uxth	r4, r5
  4064fa:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  4064fe:	eba3 0304 	sub.w	r3, r3, r4
  406502:	fa1f fb85 	uxth.w	fp, r5
  406506:	fa13 f482 	uxtah	r4, r3, r2
  40650a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40650e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  406512:	fa1f fb84 	uxth.w	fp, r4
  406516:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40651a:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40651e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406522:	f84e 2b04 	str.w	r2, [lr], #4
  406526:	d2da      	bcs.n	4064de <quorem+0x46>
  406528:	9b00      	ldr	r3, [sp, #0]
  40652a:	f85a 3003 	ldr.w	r3, [sl, r3]
  40652e:	b99b      	cbnz	r3, 406558 <quorem+0xc0>
  406530:	9c01      	ldr	r4, [sp, #4]
  406532:	1f23      	subs	r3, r4, #4
  406534:	459a      	cmp	sl, r3
  406536:	d20e      	bcs.n	406556 <quorem+0xbe>
  406538:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40653c:	b95b      	cbnz	r3, 406556 <quorem+0xbe>
  40653e:	f1a4 0308 	sub.w	r3, r4, #8
  406542:	e001      	b.n	406548 <quorem+0xb0>
  406544:	6812      	ldr	r2, [r2, #0]
  406546:	b932      	cbnz	r2, 406556 <quorem+0xbe>
  406548:	459a      	cmp	sl, r3
  40654a:	461a      	mov	r2, r3
  40654c:	f107 37ff 	add.w	r7, r7, #4294967295
  406550:	f1a3 0304 	sub.w	r3, r3, #4
  406554:	d3f6      	bcc.n	406544 <quorem+0xac>
  406556:	6107      	str	r7, [r0, #16]
  406558:	4604      	mov	r4, r0
  40655a:	f002 fa51 	bl	408a00 <__mcmp>
  40655e:	2800      	cmp	r0, #0
  406560:	db31      	blt.n	4065c6 <quorem+0x12e>
  406562:	f108 0801 	add.w	r8, r8, #1
  406566:	4655      	mov	r5, sl
  406568:	2000      	movs	r0, #0
  40656a:	f856 1b04 	ldr.w	r1, [r6], #4
  40656e:	682a      	ldr	r2, [r5, #0]
  406570:	b28b      	uxth	r3, r1
  406572:	45b1      	cmp	r9, r6
  406574:	ea4f 4111 	mov.w	r1, r1, lsr #16
  406578:	eba0 0303 	sub.w	r3, r0, r3
  40657c:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  406580:	fa13 f382 	uxtah	r3, r3, r2
  406584:	eb01 4223 	add.w	r2, r1, r3, asr #16
  406588:	b29b      	uxth	r3, r3
  40658a:	ea4f 4022 	mov.w	r0, r2, asr #16
  40658e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406592:	f845 3b04 	str.w	r3, [r5], #4
  406596:	d2e8      	bcs.n	40656a <quorem+0xd2>
  406598:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40659c:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  4065a0:	b98a      	cbnz	r2, 4065c6 <quorem+0x12e>
  4065a2:	1f1a      	subs	r2, r3, #4
  4065a4:	4592      	cmp	sl, r2
  4065a6:	d20d      	bcs.n	4065c4 <quorem+0x12c>
  4065a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4065ac:	b952      	cbnz	r2, 4065c4 <quorem+0x12c>
  4065ae:	3b08      	subs	r3, #8
  4065b0:	e001      	b.n	4065b6 <quorem+0x11e>
  4065b2:	6812      	ldr	r2, [r2, #0]
  4065b4:	b932      	cbnz	r2, 4065c4 <quorem+0x12c>
  4065b6:	459a      	cmp	sl, r3
  4065b8:	461a      	mov	r2, r3
  4065ba:	f107 37ff 	add.w	r7, r7, #4294967295
  4065be:	f1a3 0304 	sub.w	r3, r3, #4
  4065c2:	d3f6      	bcc.n	4065b2 <quorem+0x11a>
  4065c4:	6127      	str	r7, [r4, #16]
  4065c6:	4640      	mov	r0, r8
  4065c8:	b003      	add	sp, #12
  4065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065ce:	2000      	movs	r0, #0
  4065d0:	b003      	add	sp, #12
  4065d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065d6:	bf00      	nop

004065d8 <_dtoa_r>:
  4065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065dc:	469b      	mov	fp, r3
  4065de:	b099      	sub	sp, #100	; 0x64
  4065e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4065e2:	4604      	mov	r4, r0
  4065e4:	4692      	mov	sl, r2
  4065e6:	9d25      	ldr	r5, [sp, #148]	; 0x94
  4065e8:	b14b      	cbz	r3, 4065fe <_dtoa_r+0x26>
  4065ea:	6c46      	ldr	r6, [r0, #68]	; 0x44
  4065ec:	2201      	movs	r2, #1
  4065ee:	4619      	mov	r1, r3
  4065f0:	40b2      	lsls	r2, r6
  4065f2:	605e      	str	r6, [r3, #4]
  4065f4:	609a      	str	r2, [r3, #8]
  4065f6:	f002 f80d 	bl	408614 <_Bfree>
  4065fa:	2300      	movs	r3, #0
  4065fc:	6423      	str	r3, [r4, #64]	; 0x40
  4065fe:	f1bb 0f00 	cmp.w	fp, #0
  406602:	46d9      	mov	r9, fp
  406604:	db33      	blt.n	40666e <_dtoa_r+0x96>
  406606:	2300      	movs	r3, #0
  406608:	602b      	str	r3, [r5, #0]
  40660a:	4b99      	ldr	r3, [pc, #612]	; (406870 <_dtoa_r+0x298>)
  40660c:	461a      	mov	r2, r3
  40660e:	ea09 0303 	and.w	r3, r9, r3
  406612:	4293      	cmp	r3, r2
  406614:	d014      	beq.n	406640 <_dtoa_r+0x68>
  406616:	2200      	movs	r2, #0
  406618:	2300      	movs	r3, #0
  40661a:	4650      	mov	r0, sl
  40661c:	4659      	mov	r1, fp
  40661e:	f7fd fbbd 	bl	403d9c <__aeabi_dcmpeq>
  406622:	4680      	mov	r8, r0
  406624:	b348      	cbz	r0, 40667a <_dtoa_r+0xa2>
  406626:	2301      	movs	r3, #1
  406628:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40662a:	6013      	str	r3, [r2, #0]
  40662c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40662e:	2b00      	cmp	r3, #0
  406630:	f000 80cb 	beq.w	4067ca <_dtoa_r+0x1f2>
  406634:	488f      	ldr	r0, [pc, #572]	; (406874 <_dtoa_r+0x29c>)
  406636:	6018      	str	r0, [r3, #0]
  406638:	3801      	subs	r0, #1
  40663a:	b019      	add	sp, #100	; 0x64
  40663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406640:	f242 730f 	movw	r3, #9999	; 0x270f
  406644:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406646:	6013      	str	r3, [r2, #0]
  406648:	f1ba 0f00 	cmp.w	sl, #0
  40664c:	f000 80a6 	beq.w	40679c <_dtoa_r+0x1c4>
  406650:	4889      	ldr	r0, [pc, #548]	; (406878 <_dtoa_r+0x2a0>)
  406652:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406654:	2b00      	cmp	r3, #0
  406656:	d0f0      	beq.n	40663a <_dtoa_r+0x62>
  406658:	78c3      	ldrb	r3, [r0, #3]
  40665a:	2b00      	cmp	r3, #0
  40665c:	f000 80b7 	beq.w	4067ce <_dtoa_r+0x1f6>
  406660:	f100 0308 	add.w	r3, r0, #8
  406664:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406666:	6013      	str	r3, [r2, #0]
  406668:	b019      	add	sp, #100	; 0x64
  40666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40666e:	2301      	movs	r3, #1
  406670:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  406674:	602b      	str	r3, [r5, #0]
  406676:	46cb      	mov	fp, r9
  406678:	e7c7      	b.n	40660a <_dtoa_r+0x32>
  40667a:	ad17      	add	r5, sp, #92	; 0x5c
  40667c:	a916      	add	r1, sp, #88	; 0x58
  40667e:	4620      	mov	r0, r4
  406680:	4652      	mov	r2, sl
  406682:	9500      	str	r5, [sp, #0]
  406684:	465b      	mov	r3, fp
  406686:	9101      	str	r1, [sp, #4]
  406688:	f002 fa50 	bl	408b2c <__d2b>
  40668c:	9006      	str	r0, [sp, #24]
  40668e:	ea5f 5519 	movs.w	r5, r9, lsr #20
  406692:	f040 808c 	bne.w	4067ae <_dtoa_r+0x1d6>
  406696:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40669a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40669e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  4066a0:	4445      	add	r5, r8
  4066a2:	429d      	cmp	r5, r3
  4066a4:	f2c0 81cc 	blt.w	406a40 <_dtoa_r+0x468>
  4066a8:	331f      	adds	r3, #31
  4066aa:	f205 4212 	addw	r2, r5, #1042	; 0x412
  4066ae:	1b5b      	subs	r3, r3, r5
  4066b0:	fa2a f002 	lsr.w	r0, sl, r2
  4066b4:	fa09 f903 	lsl.w	r9, r9, r3
  4066b8:	ea49 0000 	orr.w	r0, r9, r0
  4066bc:	f7fd f890 	bl	4037e0 <__aeabi_ui2d>
  4066c0:	3d01      	subs	r5, #1
  4066c2:	2301      	movs	r3, #1
  4066c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4066c8:	9311      	str	r3, [sp, #68]	; 0x44
  4066ca:	2200      	movs	r2, #0
  4066cc:	4b6b      	ldr	r3, [pc, #428]	; (40687c <_dtoa_r+0x2a4>)
  4066ce:	f7fc ff49 	bl	403564 <__aeabi_dsub>
  4066d2:	a361      	add	r3, pc, #388	; (adr r3, 406858 <_dtoa_r+0x280>)
  4066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066d8:	f7fd f8f8 	bl	4038cc <__aeabi_dmul>
  4066dc:	a360      	add	r3, pc, #384	; (adr r3, 406860 <_dtoa_r+0x288>)
  4066de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066e2:	f7fc ff41 	bl	403568 <__adddf3>
  4066e6:	4606      	mov	r6, r0
  4066e8:	460f      	mov	r7, r1
  4066ea:	4628      	mov	r0, r5
  4066ec:	f7fd f888 	bl	403800 <__aeabi_i2d>
  4066f0:	a35d      	add	r3, pc, #372	; (adr r3, 406868 <_dtoa_r+0x290>)
  4066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066f6:	f7fd f8e9 	bl	4038cc <__aeabi_dmul>
  4066fa:	4602      	mov	r2, r0
  4066fc:	460b      	mov	r3, r1
  4066fe:	4630      	mov	r0, r6
  406700:	4639      	mov	r1, r7
  406702:	f7fc ff31 	bl	403568 <__adddf3>
  406706:	4606      	mov	r6, r0
  406708:	460f      	mov	r7, r1
  40670a:	f7fd fb79 	bl	403e00 <__aeabi_d2iz>
  40670e:	2200      	movs	r2, #0
  406710:	9002      	str	r0, [sp, #8]
  406712:	4639      	mov	r1, r7
  406714:	4630      	mov	r0, r6
  406716:	2300      	movs	r3, #0
  406718:	f7fd fb4a 	bl	403db0 <__aeabi_dcmplt>
  40671c:	2800      	cmp	r0, #0
  40671e:	f040 8171 	bne.w	406a04 <_dtoa_r+0x42c>
  406722:	9b02      	ldr	r3, [sp, #8]
  406724:	2b16      	cmp	r3, #22
  406726:	f200 8091 	bhi.w	40684c <_dtoa_r+0x274>
  40672a:	9802      	ldr	r0, [sp, #8]
  40672c:	4652      	mov	r2, sl
  40672e:	4954      	ldr	r1, [pc, #336]	; (406880 <_dtoa_r+0x2a8>)
  406730:	465b      	mov	r3, fp
  406732:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  406736:	e9d1 0100 	ldrd	r0, r1, [r1]
  40673a:	f7fd fb57 	bl	403dec <__aeabi_dcmpgt>
  40673e:	2800      	cmp	r0, #0
  406740:	f000 817c 	beq.w	406a3c <_dtoa_r+0x464>
  406744:	9b02      	ldr	r3, [sp, #8]
  406746:	3b01      	subs	r3, #1
  406748:	9302      	str	r3, [sp, #8]
  40674a:	2300      	movs	r3, #0
  40674c:	930d      	str	r3, [sp, #52]	; 0x34
  40674e:	ebc5 0508 	rsb	r5, r5, r8
  406752:	1e6b      	subs	r3, r5, #1
  406754:	9303      	str	r3, [sp, #12]
  406756:	f100 816c 	bmi.w	406a32 <_dtoa_r+0x45a>
  40675a:	2300      	movs	r3, #0
  40675c:	9307      	str	r3, [sp, #28]
  40675e:	9b02      	ldr	r3, [sp, #8]
  406760:	2b00      	cmp	r3, #0
  406762:	f2c0 815d 	blt.w	406a20 <_dtoa_r+0x448>
  406766:	9a03      	ldr	r2, [sp, #12]
  406768:	930c      	str	r3, [sp, #48]	; 0x30
  40676a:	4611      	mov	r1, r2
  40676c:	4419      	add	r1, r3
  40676e:	2300      	movs	r3, #0
  406770:	9103      	str	r1, [sp, #12]
  406772:	930a      	str	r3, [sp, #40]	; 0x28
  406774:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406776:	2b09      	cmp	r3, #9
  406778:	d82b      	bhi.n	4067d2 <_dtoa_r+0x1fa>
  40677a:	2b05      	cmp	r3, #5
  40677c:	f340 867e 	ble.w	40747c <_dtoa_r+0xea4>
  406780:	3b04      	subs	r3, #4
  406782:	2500      	movs	r5, #0
  406784:	9322      	str	r3, [sp, #136]	; 0x88
  406786:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406788:	3b02      	subs	r3, #2
  40678a:	2b03      	cmp	r3, #3
  40678c:	f200 8679 	bhi.w	407482 <_dtoa_r+0xeaa>
  406790:	e8df f013 	tbh	[pc, r3, lsl #1]
  406794:	0289029b 	.word	0x0289029b
  406798:	068d0180 	.word	0x068d0180
  40679c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  4067a0:	4b35      	ldr	r3, [pc, #212]	; (406878 <_dtoa_r+0x2a0>)
  4067a2:	4a38      	ldr	r2, [pc, #224]	; (406884 <_dtoa_r+0x2ac>)
  4067a4:	2800      	cmp	r0, #0
  4067a6:	bf14      	ite	ne
  4067a8:	4618      	movne	r0, r3
  4067aa:	4610      	moveq	r0, r2
  4067ac:	e751      	b.n	406652 <_dtoa_r+0x7a>
  4067ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4067b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  4067b6:	4650      	mov	r0, sl
  4067b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  4067bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4067c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  4067c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4067c8:	e77f      	b.n	4066ca <_dtoa_r+0xf2>
  4067ca:	482f      	ldr	r0, [pc, #188]	; (406888 <_dtoa_r+0x2b0>)
  4067cc:	e735      	b.n	40663a <_dtoa_r+0x62>
  4067ce:	1cc3      	adds	r3, r0, #3
  4067d0:	e748      	b.n	406664 <_dtoa_r+0x8c>
  4067d2:	f04f 33ff 	mov.w	r3, #4294967295
  4067d6:	2100      	movs	r1, #0
  4067d8:	4620      	mov	r0, r4
  4067da:	461d      	mov	r5, r3
  4067dc:	9310      	str	r3, [sp, #64]	; 0x40
  4067de:	2301      	movs	r3, #1
  4067e0:	6461      	str	r1, [r4, #68]	; 0x44
  4067e2:	9123      	str	r1, [sp, #140]	; 0x8c
  4067e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4067e6:	f001 feed 	bl	4085c4 <_Balloc>
  4067ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4067ec:	9005      	str	r0, [sp, #20]
  4067ee:	9322      	str	r3, [sp, #136]	; 0x88
  4067f0:	9504      	str	r5, [sp, #16]
  4067f2:	6420      	str	r0, [r4, #64]	; 0x40
  4067f4:	9a02      	ldr	r2, [sp, #8]
  4067f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4067f8:	2a0e      	cmp	r2, #14
  4067fa:	dc49      	bgt.n	406890 <_dtoa_r+0x2b8>
  4067fc:	2b00      	cmp	r3, #0
  4067fe:	db47      	blt.n	406890 <_dtoa_r+0x2b8>
  406800:	4b1f      	ldr	r3, [pc, #124]	; (406880 <_dtoa_r+0x2a8>)
  406802:	9a02      	ldr	r2, [sp, #8]
  406804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406808:	e9d3 8900 	ldrd	r8, r9, [r3]
  40680c:	9b04      	ldr	r3, [sp, #16]
  40680e:	2b00      	cmp	r3, #0
  406810:	f300 825e 	bgt.w	406cd0 <_dtoa_r+0x6f8>
  406814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406816:	2b00      	cmp	r3, #0
  406818:	f280 825a 	bge.w	406cd0 <_dtoa_r+0x6f8>
  40681c:	9b04      	ldr	r3, [sp, #16]
  40681e:	2b00      	cmp	r3, #0
  406820:	f040 85bf 	bne.w	4073a2 <_dtoa_r+0xdca>
  406824:	2200      	movs	r2, #0
  406826:	4b19      	ldr	r3, [pc, #100]	; (40688c <_dtoa_r+0x2b4>)
  406828:	4640      	mov	r0, r8
  40682a:	4649      	mov	r1, r9
  40682c:	f7fd f84e 	bl	4038cc <__aeabi_dmul>
  406830:	4652      	mov	r2, sl
  406832:	465b      	mov	r3, fp
  406834:	f7fd fad0 	bl	403dd8 <__aeabi_dcmpge>
  406838:	9f04      	ldr	r7, [sp, #16]
  40683a:	9708      	str	r7, [sp, #32]
  40683c:	2800      	cmp	r0, #0
  40683e:	f000 80bd 	beq.w	4069bc <_dtoa_r+0x3e4>
  406842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406844:	9d05      	ldr	r5, [sp, #20]
  406846:	43db      	mvns	r3, r3
  406848:	9302      	str	r3, [sp, #8]
  40684a:	e0be      	b.n	4069ca <_dtoa_r+0x3f2>
  40684c:	2301      	movs	r3, #1
  40684e:	930d      	str	r3, [sp, #52]	; 0x34
  406850:	e77d      	b.n	40674e <_dtoa_r+0x176>
  406852:	bf00      	nop
  406854:	f3af 8000 	nop.w
  406858:	636f4361 	.word	0x636f4361
  40685c:	3fd287a7 	.word	0x3fd287a7
  406860:	8b60c8b3 	.word	0x8b60c8b3
  406864:	3fc68a28 	.word	0x3fc68a28
  406868:	509f79fb 	.word	0x509f79fb
  40686c:	3fd34413 	.word	0x3fd34413
  406870:	7ff00000 	.word	0x7ff00000
  406874:	00409e61 	.word	0x00409e61
  406878:	00409e90 	.word	0x00409e90
  40687c:	3ff80000 	.word	0x3ff80000
  406880:	00409ea0 	.word	0x00409ea0
  406884:	00409e84 	.word	0x00409e84
  406888:	00409e60 	.word	0x00409e60
  40688c:	40140000 	.word	0x40140000
  406890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406892:	2a00      	cmp	r2, #0
  406894:	f040 80e1 	bne.w	406a5a <_dtoa_r+0x482>
  406898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40689a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40689c:	9d07      	ldr	r5, [sp, #28]
  40689e:	9308      	str	r3, [sp, #32]
  4068a0:	9903      	ldr	r1, [sp, #12]
  4068a2:	2900      	cmp	r1, #0
  4068a4:	460b      	mov	r3, r1
  4068a6:	dd0a      	ble.n	4068be <_dtoa_r+0x2e6>
  4068a8:	2d00      	cmp	r5, #0
  4068aa:	dd08      	ble.n	4068be <_dtoa_r+0x2e6>
  4068ac:	42a9      	cmp	r1, r5
  4068ae:	9a07      	ldr	r2, [sp, #28]
  4068b0:	bfa8      	it	ge
  4068b2:	462b      	movge	r3, r5
  4068b4:	1ad2      	subs	r2, r2, r3
  4068b6:	1aed      	subs	r5, r5, r3
  4068b8:	1acb      	subs	r3, r1, r3
  4068ba:	9207      	str	r2, [sp, #28]
  4068bc:	9303      	str	r3, [sp, #12]
  4068be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068c0:	2b00      	cmp	r3, #0
  4068c2:	dd1b      	ble.n	4068fc <_dtoa_r+0x324>
  4068c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068c6:	2b00      	cmp	r3, #0
  4068c8:	f000 84ce 	beq.w	407268 <_dtoa_r+0xc90>
  4068cc:	2e00      	cmp	r6, #0
  4068ce:	dd11      	ble.n	4068f4 <_dtoa_r+0x31c>
  4068d0:	9908      	ldr	r1, [sp, #32]
  4068d2:	4632      	mov	r2, r6
  4068d4:	4620      	mov	r0, r4
  4068d6:	f001 ffe9 	bl	4088ac <__pow5mult>
  4068da:	9f06      	ldr	r7, [sp, #24]
  4068dc:	4601      	mov	r1, r0
  4068de:	9008      	str	r0, [sp, #32]
  4068e0:	463a      	mov	r2, r7
  4068e2:	4620      	mov	r0, r4
  4068e4:	f001 ff40 	bl	408768 <__multiply>
  4068e8:	4603      	mov	r3, r0
  4068ea:	4639      	mov	r1, r7
  4068ec:	4620      	mov	r0, r4
  4068ee:	9306      	str	r3, [sp, #24]
  4068f0:	f001 fe90 	bl	408614 <_Bfree>
  4068f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068f6:	1b9a      	subs	r2, r3, r6
  4068f8:	f040 84ff 	bne.w	4072fa <_dtoa_r+0xd22>
  4068fc:	4620      	mov	r0, r4
  4068fe:	2101      	movs	r1, #1
  406900:	f001 ff28 	bl	408754 <__i2b>
  406904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406906:	4607      	mov	r7, r0
  406908:	2b00      	cmp	r3, #0
  40690a:	f340 8282 	ble.w	406e12 <_dtoa_r+0x83a>
  40690e:	4601      	mov	r1, r0
  406910:	461a      	mov	r2, r3
  406912:	4620      	mov	r0, r4
  406914:	f001 ffca 	bl	4088ac <__pow5mult>
  406918:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40691a:	4607      	mov	r7, r0
  40691c:	2b01      	cmp	r3, #1
  40691e:	f340 84f3 	ble.w	407308 <_dtoa_r+0xd30>
  406922:	f04f 0800 	mov.w	r8, #0
  406926:	693b      	ldr	r3, [r7, #16]
  406928:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40692c:	6918      	ldr	r0, [r3, #16]
  40692e:	f001 febd 	bl	4086ac <__hi0bits>
  406932:	f1c0 0020 	rsb	r0, r0, #32
  406936:	9b03      	ldr	r3, [sp, #12]
  406938:	4418      	add	r0, r3
  40693a:	f010 001f 	ands.w	r0, r0, #31
  40693e:	f000 82a0 	beq.w	406e82 <_dtoa_r+0x8aa>
  406942:	f1c0 0320 	rsb	r3, r0, #32
  406946:	2b04      	cmp	r3, #4
  406948:	f340 8592 	ble.w	407470 <_dtoa_r+0xe98>
  40694c:	f1c0 001c 	rsb	r0, r0, #28
  406950:	9b07      	ldr	r3, [sp, #28]
  406952:	4405      	add	r5, r0
  406954:	4403      	add	r3, r0
  406956:	9307      	str	r3, [sp, #28]
  406958:	9b03      	ldr	r3, [sp, #12]
  40695a:	4403      	add	r3, r0
  40695c:	9303      	str	r3, [sp, #12]
  40695e:	9b07      	ldr	r3, [sp, #28]
  406960:	2b00      	cmp	r3, #0
  406962:	dd05      	ble.n	406970 <_dtoa_r+0x398>
  406964:	9906      	ldr	r1, [sp, #24]
  406966:	461a      	mov	r2, r3
  406968:	4620      	mov	r0, r4
  40696a:	f001 ffef 	bl	40894c <__lshift>
  40696e:	9006      	str	r0, [sp, #24]
  406970:	9b03      	ldr	r3, [sp, #12]
  406972:	2b00      	cmp	r3, #0
  406974:	dd05      	ble.n	406982 <_dtoa_r+0x3aa>
  406976:	4639      	mov	r1, r7
  406978:	461a      	mov	r2, r3
  40697a:	4620      	mov	r0, r4
  40697c:	f001 ffe6 	bl	40894c <__lshift>
  406980:	4607      	mov	r7, r0
  406982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406984:	2b00      	cmp	r3, #0
  406986:	f040 838b 	bne.w	4070a0 <_dtoa_r+0xac8>
  40698a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40698c:	2b02      	cmp	r3, #2
  40698e:	f340 827a 	ble.w	406e86 <_dtoa_r+0x8ae>
  406992:	9b04      	ldr	r3, [sp, #16]
  406994:	2b00      	cmp	r3, #0
  406996:	f300 8276 	bgt.w	406e86 <_dtoa_r+0x8ae>
  40699a:	9b04      	ldr	r3, [sp, #16]
  40699c:	2b00      	cmp	r3, #0
  40699e:	f47f af50 	bne.w	406842 <_dtoa_r+0x26a>
  4069a2:	4639      	mov	r1, r7
  4069a4:	2205      	movs	r2, #5
  4069a6:	4620      	mov	r0, r4
  4069a8:	f001 fe3e 	bl	408628 <__multadd>
  4069ac:	4607      	mov	r7, r0
  4069ae:	9806      	ldr	r0, [sp, #24]
  4069b0:	4639      	mov	r1, r7
  4069b2:	f002 f825 	bl	408a00 <__mcmp>
  4069b6:	2800      	cmp	r0, #0
  4069b8:	f77f af43 	ble.w	406842 <_dtoa_r+0x26a>
  4069bc:	9a02      	ldr	r2, [sp, #8]
  4069be:	2331      	movs	r3, #49	; 0x31
  4069c0:	3201      	adds	r2, #1
  4069c2:	9202      	str	r2, [sp, #8]
  4069c4:	9a05      	ldr	r2, [sp, #20]
  4069c6:	1c55      	adds	r5, r2, #1
  4069c8:	7013      	strb	r3, [r2, #0]
  4069ca:	4639      	mov	r1, r7
  4069cc:	4620      	mov	r0, r4
  4069ce:	f001 fe21 	bl	408614 <_Bfree>
  4069d2:	9b08      	ldr	r3, [sp, #32]
  4069d4:	b11b      	cbz	r3, 4069de <_dtoa_r+0x406>
  4069d6:	9908      	ldr	r1, [sp, #32]
  4069d8:	4620      	mov	r0, r4
  4069da:	f001 fe1b 	bl	408614 <_Bfree>
  4069de:	4620      	mov	r0, r4
  4069e0:	9906      	ldr	r1, [sp, #24]
  4069e2:	f001 fe17 	bl	408614 <_Bfree>
  4069e6:	2200      	movs	r2, #0
  4069e8:	9b02      	ldr	r3, [sp, #8]
  4069ea:	702a      	strb	r2, [r5, #0]
  4069ec:	3301      	adds	r3, #1
  4069ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4069f0:	6013      	str	r3, [r2, #0]
  4069f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4069f4:	2b00      	cmp	r3, #0
  4069f6:	f000 82a3 	beq.w	406f40 <_dtoa_r+0x968>
  4069fa:	9805      	ldr	r0, [sp, #20]
  4069fc:	601d      	str	r5, [r3, #0]
  4069fe:	b019      	add	sp, #100	; 0x64
  406a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a04:	9802      	ldr	r0, [sp, #8]
  406a06:	f7fc fefb 	bl	403800 <__aeabi_i2d>
  406a0a:	4632      	mov	r2, r6
  406a0c:	463b      	mov	r3, r7
  406a0e:	f7fd f9c5 	bl	403d9c <__aeabi_dcmpeq>
  406a12:	2800      	cmp	r0, #0
  406a14:	f47f ae85 	bne.w	406722 <_dtoa_r+0x14a>
  406a18:	9b02      	ldr	r3, [sp, #8]
  406a1a:	3b01      	subs	r3, #1
  406a1c:	9302      	str	r3, [sp, #8]
  406a1e:	e680      	b.n	406722 <_dtoa_r+0x14a>
  406a20:	9a07      	ldr	r2, [sp, #28]
  406a22:	9b02      	ldr	r3, [sp, #8]
  406a24:	1ad2      	subs	r2, r2, r3
  406a26:	425b      	negs	r3, r3
  406a28:	930a      	str	r3, [sp, #40]	; 0x28
  406a2a:	2300      	movs	r3, #0
  406a2c:	9207      	str	r2, [sp, #28]
  406a2e:	930c      	str	r3, [sp, #48]	; 0x30
  406a30:	e6a0      	b.n	406774 <_dtoa_r+0x19c>
  406a32:	425b      	negs	r3, r3
  406a34:	9307      	str	r3, [sp, #28]
  406a36:	2300      	movs	r3, #0
  406a38:	9303      	str	r3, [sp, #12]
  406a3a:	e690      	b.n	40675e <_dtoa_r+0x186>
  406a3c:	900d      	str	r0, [sp, #52]	; 0x34
  406a3e:	e686      	b.n	40674e <_dtoa_r+0x176>
  406a40:	4bbd      	ldr	r3, [pc, #756]	; (406d38 <_dtoa_r+0x760>)
  406a42:	1b5b      	subs	r3, r3, r5
  406a44:	fa0a f003 	lsl.w	r0, sl, r3
  406a48:	e638      	b.n	4066bc <_dtoa_r+0xe4>
  406a4a:	2100      	movs	r1, #0
  406a4c:	f04f 32ff 	mov.w	r2, #4294967295
  406a50:	9123      	str	r1, [sp, #140]	; 0x8c
  406a52:	2101      	movs	r1, #1
  406a54:	9204      	str	r2, [sp, #16]
  406a56:	910b      	str	r1, [sp, #44]	; 0x2c
  406a58:	9210      	str	r2, [sp, #64]	; 0x40
  406a5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406a5c:	2a01      	cmp	r2, #1
  406a5e:	f340 8460 	ble.w	407322 <_dtoa_r+0xd4a>
  406a62:	9b04      	ldr	r3, [sp, #16]
  406a64:	1e5e      	subs	r6, r3, #1
  406a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a68:	42b3      	cmp	r3, r6
  406a6a:	f2c0 8405 	blt.w	407278 <_dtoa_r+0xca0>
  406a6e:	1b9e      	subs	r6, r3, r6
  406a70:	9b04      	ldr	r3, [sp, #16]
  406a72:	2b00      	cmp	r3, #0
  406a74:	f2c0 8461 	blt.w	40733a <_dtoa_r+0xd62>
  406a78:	9d07      	ldr	r5, [sp, #28]
  406a7a:	9b04      	ldr	r3, [sp, #16]
  406a7c:	9a07      	ldr	r2, [sp, #28]
  406a7e:	4620      	mov	r0, r4
  406a80:	2101      	movs	r1, #1
  406a82:	441a      	add	r2, r3
  406a84:	9207      	str	r2, [sp, #28]
  406a86:	9a03      	ldr	r2, [sp, #12]
  406a88:	441a      	add	r2, r3
  406a8a:	9203      	str	r2, [sp, #12]
  406a8c:	f001 fe62 	bl	408754 <__i2b>
  406a90:	9008      	str	r0, [sp, #32]
  406a92:	e705      	b.n	4068a0 <_dtoa_r+0x2c8>
  406a94:	2301      	movs	r3, #1
  406a96:	930b      	str	r3, [sp, #44]	; 0x2c
  406a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406a9a:	2b00      	cmp	r3, #0
  406a9c:	f340 83df 	ble.w	40725e <_dtoa_r+0xc86>
  406aa0:	2b0e      	cmp	r3, #14
  406aa2:	bf8c      	ite	hi
  406aa4:	2500      	movhi	r5, #0
  406aa6:	f005 0501 	andls.w	r5, r5, #1
  406aaa:	461e      	mov	r6, r3
  406aac:	9310      	str	r3, [sp, #64]	; 0x40
  406aae:	9304      	str	r3, [sp, #16]
  406ab0:	2100      	movs	r1, #0
  406ab2:	2e17      	cmp	r6, #23
  406ab4:	6461      	str	r1, [r4, #68]	; 0x44
  406ab6:	d909      	bls.n	406acc <_dtoa_r+0x4f4>
  406ab8:	2201      	movs	r2, #1
  406aba:	2304      	movs	r3, #4
  406abc:	005b      	lsls	r3, r3, #1
  406abe:	4611      	mov	r1, r2
  406ac0:	3201      	adds	r2, #1
  406ac2:	f103 0014 	add.w	r0, r3, #20
  406ac6:	42b0      	cmp	r0, r6
  406ac8:	d9f8      	bls.n	406abc <_dtoa_r+0x4e4>
  406aca:	6461      	str	r1, [r4, #68]	; 0x44
  406acc:	4620      	mov	r0, r4
  406ace:	f001 fd79 	bl	4085c4 <_Balloc>
  406ad2:	9005      	str	r0, [sp, #20]
  406ad4:	6420      	str	r0, [r4, #64]	; 0x40
  406ad6:	2d00      	cmp	r5, #0
  406ad8:	f43f ae8c 	beq.w	4067f4 <_dtoa_r+0x21c>
  406adc:	9802      	ldr	r0, [sp, #8]
  406ade:	2800      	cmp	r0, #0
  406ae0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  406ae4:	f340 8233 	ble.w	406f4e <_dtoa_r+0x976>
  406ae8:	4a94      	ldr	r2, [pc, #592]	; (406d3c <_dtoa_r+0x764>)
  406aea:	f000 030f 	and.w	r3, r0, #15
  406aee:	1105      	asrs	r5, r0, #4
  406af0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  406af4:	06ea      	lsls	r2, r5, #27
  406af6:	e9d3 6700 	ldrd	r6, r7, [r3]
  406afa:	f140 821c 	bpl.w	406f36 <_dtoa_r+0x95e>
  406afe:	4b90      	ldr	r3, [pc, #576]	; (406d40 <_dtoa_r+0x768>)
  406b00:	4650      	mov	r0, sl
  406b02:	4659      	mov	r1, fp
  406b04:	f005 050f 	and.w	r5, r5, #15
  406b08:	f04f 0803 	mov.w	r8, #3
  406b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406b10:	f7fd f806 	bl	403b20 <__aeabi_ddiv>
  406b14:	4682      	mov	sl, r0
  406b16:	468b      	mov	fp, r1
  406b18:	b18d      	cbz	r5, 406b3e <_dtoa_r+0x566>
  406b1a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 406d40 <_dtoa_r+0x768>
  406b1e:	07eb      	lsls	r3, r5, #31
  406b20:	4630      	mov	r0, r6
  406b22:	4639      	mov	r1, r7
  406b24:	d507      	bpl.n	406b36 <_dtoa_r+0x55e>
  406b26:	f108 0801 	add.w	r8, r8, #1
  406b2a:	e9d9 2300 	ldrd	r2, r3, [r9]
  406b2e:	f7fc fecd 	bl	4038cc <__aeabi_dmul>
  406b32:	4606      	mov	r6, r0
  406b34:	460f      	mov	r7, r1
  406b36:	106d      	asrs	r5, r5, #1
  406b38:	f109 0908 	add.w	r9, r9, #8
  406b3c:	d1ef      	bne.n	406b1e <_dtoa_r+0x546>
  406b3e:	4650      	mov	r0, sl
  406b40:	4659      	mov	r1, fp
  406b42:	4632      	mov	r2, r6
  406b44:	463b      	mov	r3, r7
  406b46:	f7fc ffeb 	bl	403b20 <__aeabi_ddiv>
  406b4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  406b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406b50:	b143      	cbz	r3, 406b64 <_dtoa_r+0x58c>
  406b52:	2200      	movs	r2, #0
  406b54:	4b7b      	ldr	r3, [pc, #492]	; (406d44 <_dtoa_r+0x76c>)
  406b56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406b5a:	f7fd f929 	bl	403db0 <__aeabi_dcmplt>
  406b5e:	2800      	cmp	r0, #0
  406b60:	f040 8393 	bne.w	40728a <_dtoa_r+0xcb2>
  406b64:	4640      	mov	r0, r8
  406b66:	f7fc fe4b 	bl	403800 <__aeabi_i2d>
  406b6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  406b6e:	f7fc fead 	bl	4038cc <__aeabi_dmul>
  406b72:	4b75      	ldr	r3, [pc, #468]	; (406d48 <_dtoa_r+0x770>)
  406b74:	2200      	movs	r2, #0
  406b76:	f7fc fcf7 	bl	403568 <__adddf3>
  406b7a:	9b04      	ldr	r3, [sp, #16]
  406b7c:	4606      	mov	r6, r0
  406b7e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406b82:	2b00      	cmp	r3, #0
  406b84:	f000 8161 	beq.w	406e4a <_dtoa_r+0x872>
  406b88:	9b02      	ldr	r3, [sp, #8]
  406b8a:	f8dd c010 	ldr.w	ip, [sp, #16]
  406b8e:	9314      	str	r3, [sp, #80]	; 0x50
  406b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406b92:	2b00      	cmp	r3, #0
  406b94:	f000 820b 	beq.w	406fae <_dtoa_r+0x9d6>
  406b98:	4b68      	ldr	r3, [pc, #416]	; (406d3c <_dtoa_r+0x764>)
  406b9a:	2000      	movs	r0, #0
  406b9c:	9a05      	ldr	r2, [sp, #20]
  406b9e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  406ba2:	496a      	ldr	r1, [pc, #424]	; (406d4c <_dtoa_r+0x774>)
  406ba4:	1c55      	adds	r5, r2, #1
  406ba6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  406baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406bae:	f7fc ffb7 	bl	403b20 <__aeabi_ddiv>
  406bb2:	4632      	mov	r2, r6
  406bb4:	463b      	mov	r3, r7
  406bb6:	f7fc fcd5 	bl	403564 <__aeabi_dsub>
  406bba:	4682      	mov	sl, r0
  406bbc:	468b      	mov	fp, r1
  406bbe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406bc2:	4649      	mov	r1, r9
  406bc4:	4640      	mov	r0, r8
  406bc6:	f7fd f91b 	bl	403e00 <__aeabi_d2iz>
  406bca:	4606      	mov	r6, r0
  406bcc:	f7fc fe18 	bl	403800 <__aeabi_i2d>
  406bd0:	4602      	mov	r2, r0
  406bd2:	3630      	adds	r6, #48	; 0x30
  406bd4:	460b      	mov	r3, r1
  406bd6:	4640      	mov	r0, r8
  406bd8:	4649      	mov	r1, r9
  406bda:	f7fc fcc3 	bl	403564 <__aeabi_dsub>
  406bde:	9f05      	ldr	r7, [sp, #20]
  406be0:	4680      	mov	r8, r0
  406be2:	4689      	mov	r9, r1
  406be4:	b2f6      	uxtb	r6, r6
  406be6:	4650      	mov	r0, sl
  406be8:	4659      	mov	r1, fp
  406bea:	4642      	mov	r2, r8
  406bec:	464b      	mov	r3, r9
  406bee:	703e      	strb	r6, [r7, #0]
  406bf0:	f7fd f8fc 	bl	403dec <__aeabi_dcmpgt>
  406bf4:	2800      	cmp	r0, #0
  406bf6:	f040 8243 	bne.w	407080 <_dtoa_r+0xaa8>
  406bfa:	4642      	mov	r2, r8
  406bfc:	464b      	mov	r3, r9
  406bfe:	2000      	movs	r0, #0
  406c00:	4950      	ldr	r1, [pc, #320]	; (406d44 <_dtoa_r+0x76c>)
  406c02:	f7fc fcaf 	bl	403564 <__aeabi_dsub>
  406c06:	4602      	mov	r2, r0
  406c08:	460b      	mov	r3, r1
  406c0a:	4650      	mov	r0, sl
  406c0c:	4659      	mov	r1, fp
  406c0e:	f7fd f8ed 	bl	403dec <__aeabi_dcmpgt>
  406c12:	2800      	cmp	r0, #0
  406c14:	f040 80eb 	bne.w	406dee <_dtoa_r+0x816>
  406c18:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  406c1c:	f1bc 0f01 	cmp.w	ip, #1
  406c20:	f340 8192 	ble.w	406f48 <_dtoa_r+0x970>
  406c24:	9f05      	ldr	r7, [sp, #20]
  406c26:	9412      	str	r4, [sp, #72]	; 0x48
  406c28:	4467      	add	r7, ip
  406c2a:	9708      	str	r7, [sp, #32]
  406c2c:	e00e      	b.n	406c4c <_dtoa_r+0x674>
  406c2e:	2000      	movs	r0, #0
  406c30:	4944      	ldr	r1, [pc, #272]	; (406d44 <_dtoa_r+0x76c>)
  406c32:	f7fc fc97 	bl	403564 <__aeabi_dsub>
  406c36:	4652      	mov	r2, sl
  406c38:	465b      	mov	r3, fp
  406c3a:	f7fd f8b9 	bl	403db0 <__aeabi_dcmplt>
  406c3e:	2800      	cmp	r0, #0
  406c40:	f040 83a1 	bne.w	407386 <_dtoa_r+0xdae>
  406c44:	9b08      	ldr	r3, [sp, #32]
  406c46:	429d      	cmp	r5, r3
  406c48:	f000 817d 	beq.w	406f46 <_dtoa_r+0x96e>
  406c4c:	4650      	mov	r0, sl
  406c4e:	4659      	mov	r1, fp
  406c50:	2200      	movs	r2, #0
  406c52:	4b3f      	ldr	r3, [pc, #252]	; (406d50 <_dtoa_r+0x778>)
  406c54:	f7fc fe3a 	bl	4038cc <__aeabi_dmul>
  406c58:	2200      	movs	r2, #0
  406c5a:	4b3d      	ldr	r3, [pc, #244]	; (406d50 <_dtoa_r+0x778>)
  406c5c:	4682      	mov	sl, r0
  406c5e:	468b      	mov	fp, r1
  406c60:	4640      	mov	r0, r8
  406c62:	4649      	mov	r1, r9
  406c64:	f7fc fe32 	bl	4038cc <__aeabi_dmul>
  406c68:	4606      	mov	r6, r0
  406c6a:	460f      	mov	r7, r1
  406c6c:	f7fd f8c8 	bl	403e00 <__aeabi_d2iz>
  406c70:	4604      	mov	r4, r0
  406c72:	f7fc fdc5 	bl	403800 <__aeabi_i2d>
  406c76:	4602      	mov	r2, r0
  406c78:	460b      	mov	r3, r1
  406c7a:	3430      	adds	r4, #48	; 0x30
  406c7c:	4630      	mov	r0, r6
  406c7e:	4639      	mov	r1, r7
  406c80:	b2e6      	uxtb	r6, r4
  406c82:	f7fc fc6f 	bl	403564 <__aeabi_dsub>
  406c86:	4680      	mov	r8, r0
  406c88:	4689      	mov	r9, r1
  406c8a:	4652      	mov	r2, sl
  406c8c:	465b      	mov	r3, fp
  406c8e:	f805 6b01 	strb.w	r6, [r5], #1
  406c92:	f7fd f88d 	bl	403db0 <__aeabi_dcmplt>
  406c96:	4642      	mov	r2, r8
  406c98:	464b      	mov	r3, r9
  406c9a:	2800      	cmp	r0, #0
  406c9c:	d0c7      	beq.n	406c2e <_dtoa_r+0x656>
  406c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406ca0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406ca2:	9302      	str	r3, [sp, #8]
  406ca4:	e69b      	b.n	4069de <_dtoa_r+0x406>
  406ca6:	2300      	movs	r3, #0
  406ca8:	930b      	str	r3, [sp, #44]	; 0x2c
  406caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406cac:	9a02      	ldr	r2, [sp, #8]
  406cae:	4413      	add	r3, r2
  406cb0:	9310      	str	r3, [sp, #64]	; 0x40
  406cb2:	3301      	adds	r3, #1
  406cb4:	2b00      	cmp	r3, #0
  406cb6:	9304      	str	r3, [sp, #16]
  406cb8:	f340 82c9 	ble.w	40724e <_dtoa_r+0xc76>
  406cbc:	9e04      	ldr	r6, [sp, #16]
  406cbe:	2e0e      	cmp	r6, #14
  406cc0:	bf8c      	ite	hi
  406cc2:	2500      	movhi	r5, #0
  406cc4:	f005 0501 	andls.w	r5, r5, #1
  406cc8:	e6f2      	b.n	406ab0 <_dtoa_r+0x4d8>
  406cca:	2300      	movs	r3, #0
  406ccc:	930b      	str	r3, [sp, #44]	; 0x2c
  406cce:	e6e3      	b.n	406a98 <_dtoa_r+0x4c0>
  406cd0:	9905      	ldr	r1, [sp, #20]
  406cd2:	4642      	mov	r2, r8
  406cd4:	464b      	mov	r3, r9
  406cd6:	4650      	mov	r0, sl
  406cd8:	1c4d      	adds	r5, r1, #1
  406cda:	4659      	mov	r1, fp
  406cdc:	f7fc ff20 	bl	403b20 <__aeabi_ddiv>
  406ce0:	4656      	mov	r6, sl
  406ce2:	f7fd f88d 	bl	403e00 <__aeabi_d2iz>
  406ce6:	4682      	mov	sl, r0
  406ce8:	f7fc fd8a 	bl	403800 <__aeabi_i2d>
  406cec:	4642      	mov	r2, r8
  406cee:	464b      	mov	r3, r9
  406cf0:	f7fc fdec 	bl	4038cc <__aeabi_dmul>
  406cf4:	4602      	mov	r2, r0
  406cf6:	460b      	mov	r3, r1
  406cf8:	4630      	mov	r0, r6
  406cfa:	4659      	mov	r1, fp
  406cfc:	f7fc fc32 	bl	403564 <__aeabi_dsub>
  406d00:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  406d04:	9a05      	ldr	r2, [sp, #20]
  406d06:	4606      	mov	r6, r0
  406d08:	460f      	mov	r7, r1
  406d0a:	7013      	strb	r3, [r2, #0]
  406d0c:	9b04      	ldr	r3, [sp, #16]
  406d0e:	2b01      	cmp	r3, #1
  406d10:	d04d      	beq.n	406dae <_dtoa_r+0x7d6>
  406d12:	2200      	movs	r2, #0
  406d14:	4b0e      	ldr	r3, [pc, #56]	; (406d50 <_dtoa_r+0x778>)
  406d16:	f7fc fdd9 	bl	4038cc <__aeabi_dmul>
  406d1a:	2200      	movs	r2, #0
  406d1c:	2300      	movs	r3, #0
  406d1e:	4606      	mov	r6, r0
  406d20:	460f      	mov	r7, r1
  406d22:	f7fd f83b 	bl	403d9c <__aeabi_dcmpeq>
  406d26:	2800      	cmp	r0, #0
  406d28:	f47f ae59 	bne.w	4069de <_dtoa_r+0x406>
  406d2c:	9403      	str	r4, [sp, #12]
  406d2e:	f8dd b014 	ldr.w	fp, [sp, #20]
  406d32:	9c04      	ldr	r4, [sp, #16]
  406d34:	e019      	b.n	406d6a <_dtoa_r+0x792>
  406d36:	bf00      	nop
  406d38:	fffffbee 	.word	0xfffffbee
  406d3c:	00409ea0 	.word	0x00409ea0
  406d40:	00409f78 	.word	0x00409f78
  406d44:	3ff00000 	.word	0x3ff00000
  406d48:	401c0000 	.word	0x401c0000
  406d4c:	3fe00000 	.word	0x3fe00000
  406d50:	40240000 	.word	0x40240000
  406d54:	f7fc fdba 	bl	4038cc <__aeabi_dmul>
  406d58:	2200      	movs	r2, #0
  406d5a:	2300      	movs	r3, #0
  406d5c:	4606      	mov	r6, r0
  406d5e:	460f      	mov	r7, r1
  406d60:	f7fd f81c 	bl	403d9c <__aeabi_dcmpeq>
  406d64:	2800      	cmp	r0, #0
  406d66:	f040 82e5 	bne.w	407334 <_dtoa_r+0xd5c>
  406d6a:	4642      	mov	r2, r8
  406d6c:	464b      	mov	r3, r9
  406d6e:	4630      	mov	r0, r6
  406d70:	4639      	mov	r1, r7
  406d72:	f7fc fed5 	bl	403b20 <__aeabi_ddiv>
  406d76:	f7fd f843 	bl	403e00 <__aeabi_d2iz>
  406d7a:	4682      	mov	sl, r0
  406d7c:	f7fc fd40 	bl	403800 <__aeabi_i2d>
  406d80:	4642      	mov	r2, r8
  406d82:	464b      	mov	r3, r9
  406d84:	f7fc fda2 	bl	4038cc <__aeabi_dmul>
  406d88:	4602      	mov	r2, r0
  406d8a:	460b      	mov	r3, r1
  406d8c:	4630      	mov	r0, r6
  406d8e:	4639      	mov	r1, r7
  406d90:	f7fc fbe8 	bl	403564 <__aeabi_dsub>
  406d94:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  406d98:	4606      	mov	r6, r0
  406d9a:	460f      	mov	r7, r1
  406d9c:	f805 eb01 	strb.w	lr, [r5], #1
  406da0:	ebcb 0e05 	rsb	lr, fp, r5
  406da4:	2200      	movs	r2, #0
  406da6:	4bb8      	ldr	r3, [pc, #736]	; (407088 <_dtoa_r+0xab0>)
  406da8:	4574      	cmp	r4, lr
  406daa:	d1d3      	bne.n	406d54 <_dtoa_r+0x77c>
  406dac:	9c03      	ldr	r4, [sp, #12]
  406dae:	4632      	mov	r2, r6
  406db0:	463b      	mov	r3, r7
  406db2:	4630      	mov	r0, r6
  406db4:	4639      	mov	r1, r7
  406db6:	f7fc fbd7 	bl	403568 <__adddf3>
  406dba:	4606      	mov	r6, r0
  406dbc:	460f      	mov	r7, r1
  406dbe:	4640      	mov	r0, r8
  406dc0:	4649      	mov	r1, r9
  406dc2:	4632      	mov	r2, r6
  406dc4:	463b      	mov	r3, r7
  406dc6:	f7fc fff3 	bl	403db0 <__aeabi_dcmplt>
  406dca:	b960      	cbnz	r0, 406de6 <_dtoa_r+0x80e>
  406dcc:	4640      	mov	r0, r8
  406dce:	4649      	mov	r1, r9
  406dd0:	4632      	mov	r2, r6
  406dd2:	463b      	mov	r3, r7
  406dd4:	f7fc ffe2 	bl	403d9c <__aeabi_dcmpeq>
  406dd8:	2800      	cmp	r0, #0
  406dda:	f43f ae00 	beq.w	4069de <_dtoa_r+0x406>
  406dde:	f01a 0f01 	tst.w	sl, #1
  406de2:	f43f adfc 	beq.w	4069de <_dtoa_r+0x406>
  406de6:	9b02      	ldr	r3, [sp, #8]
  406de8:	9314      	str	r3, [sp, #80]	; 0x50
  406dea:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  406dee:	1e6a      	subs	r2, r5, #1
  406df0:	9b05      	ldr	r3, [sp, #20]
  406df2:	e004      	b.n	406dfe <_dtoa_r+0x826>
  406df4:	429a      	cmp	r2, r3
  406df6:	f000 8277 	beq.w	4072e8 <_dtoa_r+0xd10>
  406dfa:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  406dfe:	2e39      	cmp	r6, #57	; 0x39
  406e00:	f102 0501 	add.w	r5, r2, #1
  406e04:	d0f6      	beq.n	406df4 <_dtoa_r+0x81c>
  406e06:	1c73      	adds	r3, r6, #1
  406e08:	9914      	ldr	r1, [sp, #80]	; 0x50
  406e0a:	b2db      	uxtb	r3, r3
  406e0c:	9102      	str	r1, [sp, #8]
  406e0e:	7013      	strb	r3, [r2, #0]
  406e10:	e5e5      	b.n	4069de <_dtoa_r+0x406>
  406e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406e14:	2b01      	cmp	r3, #1
  406e16:	f340 8161 	ble.w	4070dc <_dtoa_r+0xb04>
  406e1a:	f04f 0800 	mov.w	r8, #0
  406e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406e20:	2b00      	cmp	r3, #0
  406e22:	f47f ad80 	bne.w	406926 <_dtoa_r+0x34e>
  406e26:	2001      	movs	r0, #1
  406e28:	e585      	b.n	406936 <_dtoa_r+0x35e>
  406e2a:	4640      	mov	r0, r8
  406e2c:	f7fc fce8 	bl	403800 <__aeabi_i2d>
  406e30:	4602      	mov	r2, r0
  406e32:	460b      	mov	r3, r1
  406e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e38:	f7fc fd48 	bl	4038cc <__aeabi_dmul>
  406e3c:	2200      	movs	r2, #0
  406e3e:	4b93      	ldr	r3, [pc, #588]	; (40708c <_dtoa_r+0xab4>)
  406e40:	f7fc fb92 	bl	403568 <__adddf3>
  406e44:	4606      	mov	r6, r0
  406e46:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  406e4a:	2200      	movs	r2, #0
  406e4c:	4b90      	ldr	r3, [pc, #576]	; (407090 <_dtoa_r+0xab8>)
  406e4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e52:	f7fc fb87 	bl	403564 <__aeabi_dsub>
  406e56:	4632      	mov	r2, r6
  406e58:	463b      	mov	r3, r7
  406e5a:	4680      	mov	r8, r0
  406e5c:	4689      	mov	r9, r1
  406e5e:	f7fc ffc5 	bl	403dec <__aeabi_dcmpgt>
  406e62:	4605      	mov	r5, r0
  406e64:	2800      	cmp	r0, #0
  406e66:	f040 809f 	bne.w	406fa8 <_dtoa_r+0x9d0>
  406e6a:	4632      	mov	r2, r6
  406e6c:	4640      	mov	r0, r8
  406e6e:	4649      	mov	r1, r9
  406e70:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  406e74:	f7fc ff9c 	bl	403db0 <__aeabi_dcmplt>
  406e78:	2800      	cmp	r0, #0
  406e7a:	d065      	beq.n	406f48 <_dtoa_r+0x970>
  406e7c:	462f      	mov	r7, r5
  406e7e:	9508      	str	r5, [sp, #32]
  406e80:	e4df      	b.n	406842 <_dtoa_r+0x26a>
  406e82:	201c      	movs	r0, #28
  406e84:	e564      	b.n	406950 <_dtoa_r+0x378>
  406e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406e88:	2b00      	cmp	r3, #0
  406e8a:	f040 814f 	bne.w	40712c <_dtoa_r+0xb54>
  406e8e:	f8dd a014 	ldr.w	sl, [sp, #20]
  406e92:	9e06      	ldr	r6, [sp, #24]
  406e94:	4655      	mov	r5, sl
  406e96:	f8dd 8010 	ldr.w	r8, [sp, #16]
  406e9a:	e002      	b.n	406ea2 <_dtoa_r+0x8ca>
  406e9c:	f001 fbc4 	bl	408628 <__multadd>
  406ea0:	4606      	mov	r6, r0
  406ea2:	4639      	mov	r1, r7
  406ea4:	4630      	mov	r0, r6
  406ea6:	f7ff faf7 	bl	406498 <quorem>
  406eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
  406eae:	4631      	mov	r1, r6
  406eb0:	4620      	mov	r0, r4
  406eb2:	f805 9b01 	strb.w	r9, [r5], #1
  406eb6:	ebca 0e05 	rsb	lr, sl, r5
  406eba:	220a      	movs	r2, #10
  406ebc:	2300      	movs	r3, #0
  406ebe:	45c6      	cmp	lr, r8
  406ec0:	dbec      	blt.n	406e9c <_dtoa_r+0x8c4>
  406ec2:	9b05      	ldr	r3, [sp, #20]
  406ec4:	f04f 0a00 	mov.w	sl, #0
  406ec8:	9a04      	ldr	r2, [sp, #16]
  406eca:	9606      	str	r6, [sp, #24]
  406ecc:	2a01      	cmp	r2, #1
  406ece:	bfac      	ite	ge
  406ed0:	189b      	addge	r3, r3, r2
  406ed2:	3301      	addlt	r3, #1
  406ed4:	461d      	mov	r5, r3
  406ed6:	9906      	ldr	r1, [sp, #24]
  406ed8:	2201      	movs	r2, #1
  406eda:	4620      	mov	r0, r4
  406edc:	f001 fd36 	bl	40894c <__lshift>
  406ee0:	4639      	mov	r1, r7
  406ee2:	9006      	str	r0, [sp, #24]
  406ee4:	f001 fd8c 	bl	408a00 <__mcmp>
  406ee8:	2800      	cmp	r0, #0
  406eea:	f340 824e 	ble.w	40738a <_dtoa_r+0xdb2>
  406eee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406ef2:	1e6b      	subs	r3, r5, #1
  406ef4:	9905      	ldr	r1, [sp, #20]
  406ef6:	e004      	b.n	406f02 <_dtoa_r+0x92a>
  406ef8:	428b      	cmp	r3, r1
  406efa:	f000 820b 	beq.w	407314 <_dtoa_r+0xd3c>
  406efe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406f02:	2a39      	cmp	r2, #57	; 0x39
  406f04:	f103 0501 	add.w	r5, r3, #1
  406f08:	d0f6      	beq.n	406ef8 <_dtoa_r+0x920>
  406f0a:	3201      	adds	r2, #1
  406f0c:	701a      	strb	r2, [r3, #0]
  406f0e:	4639      	mov	r1, r7
  406f10:	4620      	mov	r0, r4
  406f12:	f001 fb7f 	bl	408614 <_Bfree>
  406f16:	9b08      	ldr	r3, [sp, #32]
  406f18:	2b00      	cmp	r3, #0
  406f1a:	f43f ad60 	beq.w	4069de <_dtoa_r+0x406>
  406f1e:	459a      	cmp	sl, r3
  406f20:	f43f ad59 	beq.w	4069d6 <_dtoa_r+0x3fe>
  406f24:	f1ba 0f00 	cmp.w	sl, #0
  406f28:	f43f ad55 	beq.w	4069d6 <_dtoa_r+0x3fe>
  406f2c:	4651      	mov	r1, sl
  406f2e:	4620      	mov	r0, r4
  406f30:	f001 fb70 	bl	408614 <_Bfree>
  406f34:	e54f      	b.n	4069d6 <_dtoa_r+0x3fe>
  406f36:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406f3a:	f04f 0802 	mov.w	r8, #2
  406f3e:	e5eb      	b.n	406b18 <_dtoa_r+0x540>
  406f40:	9805      	ldr	r0, [sp, #20]
  406f42:	f7ff bb7a 	b.w	40663a <_dtoa_r+0x62>
  406f46:	9c12      	ldr	r4, [sp, #72]	; 0x48
  406f48:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406f4c:	e452      	b.n	4067f4 <_dtoa_r+0x21c>
  406f4e:	9b02      	ldr	r3, [sp, #8]
  406f50:	425d      	negs	r5, r3
  406f52:	2d00      	cmp	r5, #0
  406f54:	f000 81c1 	beq.w	4072da <_dtoa_r+0xd02>
  406f58:	f005 020f 	and.w	r2, r5, #15
  406f5c:	4b4d      	ldr	r3, [pc, #308]	; (407094 <_dtoa_r+0xabc>)
  406f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406f62:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406f66:	e9d3 2300 	ldrd	r2, r3, [r3]
  406f6a:	f7fc fcaf 	bl	4038cc <__aeabi_dmul>
  406f6e:	112d      	asrs	r5, r5, #4
  406f70:	e9cd 0108 	strd	r0, r1, [sp, #32]
  406f74:	f000 8275 	beq.w	407462 <_dtoa_r+0xe8a>
  406f78:	4e47      	ldr	r6, [pc, #284]	; (407098 <_dtoa_r+0xac0>)
  406f7a:	f04f 0802 	mov.w	r8, #2
  406f7e:	4602      	mov	r2, r0
  406f80:	460b      	mov	r3, r1
  406f82:	07ef      	lsls	r7, r5, #31
  406f84:	4610      	mov	r0, r2
  406f86:	4619      	mov	r1, r3
  406f88:	d507      	bpl.n	406f9a <_dtoa_r+0x9c2>
  406f8a:	f108 0801 	add.w	r8, r8, #1
  406f8e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406f92:	f7fc fc9b 	bl	4038cc <__aeabi_dmul>
  406f96:	4602      	mov	r2, r0
  406f98:	460b      	mov	r3, r1
  406f9a:	106d      	asrs	r5, r5, #1
  406f9c:	f106 0608 	add.w	r6, r6, #8
  406fa0:	d1ef      	bne.n	406f82 <_dtoa_r+0x9aa>
  406fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406fa6:	e5d2      	b.n	406b4e <_dtoa_r+0x576>
  406fa8:	2700      	movs	r7, #0
  406faa:	9708      	str	r7, [sp, #32]
  406fac:	e506      	b.n	4069bc <_dtoa_r+0x3e4>
  406fae:	f10c 3bff 	add.w	fp, ip, #4294967295
  406fb2:	4938      	ldr	r1, [pc, #224]	; (407094 <_dtoa_r+0xabc>)
  406fb4:	4632      	mov	r2, r6
  406fb6:	463b      	mov	r3, r7
  406fb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  406fbc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  406fc0:	9f05      	ldr	r7, [sp, #20]
  406fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
  406fc6:	f7fc fc81 	bl	4038cc <__aeabi_dmul>
  406fca:	1c7d      	adds	r5, r7, #1
  406fcc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406fd0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406fd4:	4649      	mov	r1, r9
  406fd6:	4640      	mov	r0, r8
  406fd8:	f7fc ff12 	bl	403e00 <__aeabi_d2iz>
  406fdc:	4606      	mov	r6, r0
  406fde:	f7fc fc0f 	bl	403800 <__aeabi_i2d>
  406fe2:	4602      	mov	r2, r0
  406fe4:	460b      	mov	r3, r1
  406fe6:	4640      	mov	r0, r8
  406fe8:	4649      	mov	r1, r9
  406fea:	3630      	adds	r6, #48	; 0x30
  406fec:	f7fc faba 	bl	403564 <__aeabi_dsub>
  406ff0:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  406ff4:	4680      	mov	r8, r0
  406ff6:	4689      	mov	r9, r1
  406ff8:	f1bc 0f01 	cmp.w	ip, #1
  406ffc:	703e      	strb	r6, [r7, #0]
  406ffe:	d020      	beq.n	407042 <_dtoa_r+0xa6a>
  407000:	9b05      	ldr	r3, [sp, #20]
  407002:	4640      	mov	r0, r8
  407004:	46aa      	mov	sl, r5
  407006:	46a8      	mov	r8, r5
  407008:	eb03 070c 	add.w	r7, r3, ip
  40700c:	46b9      	mov	r9, r7
  40700e:	2200      	movs	r2, #0
  407010:	4b1d      	ldr	r3, [pc, #116]	; (407088 <_dtoa_r+0xab0>)
  407012:	f7fc fc5b 	bl	4038cc <__aeabi_dmul>
  407016:	460f      	mov	r7, r1
  407018:	4606      	mov	r6, r0
  40701a:	f7fc fef1 	bl	403e00 <__aeabi_d2iz>
  40701e:	4605      	mov	r5, r0
  407020:	f7fc fbee 	bl	403800 <__aeabi_i2d>
  407024:	4602      	mov	r2, r0
  407026:	460b      	mov	r3, r1
  407028:	3530      	adds	r5, #48	; 0x30
  40702a:	4630      	mov	r0, r6
  40702c:	4639      	mov	r1, r7
  40702e:	f7fc fa99 	bl	403564 <__aeabi_dsub>
  407032:	f80a 5b01 	strb.w	r5, [sl], #1
  407036:	45ca      	cmp	sl, r9
  407038:	d1e9      	bne.n	40700e <_dtoa_r+0xa36>
  40703a:	4645      	mov	r5, r8
  40703c:	4689      	mov	r9, r1
  40703e:	4680      	mov	r8, r0
  407040:	445d      	add	r5, fp
  407042:	2200      	movs	r2, #0
  407044:	4b15      	ldr	r3, [pc, #84]	; (40709c <_dtoa_r+0xac4>)
  407046:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40704a:	f7fc fa8d 	bl	403568 <__adddf3>
  40704e:	4642      	mov	r2, r8
  407050:	464b      	mov	r3, r9
  407052:	f7fc fead 	bl	403db0 <__aeabi_dcmplt>
  407056:	2800      	cmp	r0, #0
  407058:	f47f aec7 	bne.w	406dea <_dtoa_r+0x812>
  40705c:	2000      	movs	r0, #0
  40705e:	490f      	ldr	r1, [pc, #60]	; (40709c <_dtoa_r+0xac4>)
  407060:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  407064:	f7fc fa7e 	bl	403564 <__aeabi_dsub>
  407068:	4642      	mov	r2, r8
  40706a:	464b      	mov	r3, r9
  40706c:	f7fc febe 	bl	403dec <__aeabi_dcmpgt>
  407070:	b908      	cbnz	r0, 407076 <_dtoa_r+0xa9e>
  407072:	e769      	b.n	406f48 <_dtoa_r+0x970>
  407074:	4615      	mov	r5, r2
  407076:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40707a:	1e6a      	subs	r2, r5, #1
  40707c:	2b30      	cmp	r3, #48	; 0x30
  40707e:	d0f9      	beq.n	407074 <_dtoa_r+0xa9c>
  407080:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407082:	9302      	str	r3, [sp, #8]
  407084:	e4ab      	b.n	4069de <_dtoa_r+0x406>
  407086:	bf00      	nop
  407088:	40240000 	.word	0x40240000
  40708c:	401c0000 	.word	0x401c0000
  407090:	40140000 	.word	0x40140000
  407094:	00409ea0 	.word	0x00409ea0
  407098:	00409f78 	.word	0x00409f78
  40709c:	3fe00000 	.word	0x3fe00000
  4070a0:	9806      	ldr	r0, [sp, #24]
  4070a2:	4639      	mov	r1, r7
  4070a4:	f001 fcac 	bl	408a00 <__mcmp>
  4070a8:	2800      	cmp	r0, #0
  4070aa:	f6bf ac6e 	bge.w	40698a <_dtoa_r+0x3b2>
  4070ae:	9e02      	ldr	r6, [sp, #8]
  4070b0:	2300      	movs	r3, #0
  4070b2:	9906      	ldr	r1, [sp, #24]
  4070b4:	4620      	mov	r0, r4
  4070b6:	3e01      	subs	r6, #1
  4070b8:	220a      	movs	r2, #10
  4070ba:	9602      	str	r6, [sp, #8]
  4070bc:	f001 fab4 	bl	408628 <__multadd>
  4070c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4070c2:	9006      	str	r0, [sp, #24]
  4070c4:	bb1b      	cbnz	r3, 40710e <_dtoa_r+0xb36>
  4070c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4070c8:	2b02      	cmp	r3, #2
  4070ca:	f340 81ce 	ble.w	40746a <_dtoa_r+0xe92>
  4070ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4070d0:	2b00      	cmp	r3, #0
  4070d2:	f300 81ca 	bgt.w	40746a <_dtoa_r+0xe92>
  4070d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4070d8:	9304      	str	r3, [sp, #16]
  4070da:	e45e      	b.n	40699a <_dtoa_r+0x3c2>
  4070dc:	f1ba 0f00 	cmp.w	sl, #0
  4070e0:	f47f ae9b 	bne.w	406e1a <_dtoa_r+0x842>
  4070e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4070e8:	2b00      	cmp	r3, #0
  4070ea:	f47f ae96 	bne.w	406e1a <_dtoa_r+0x842>
  4070ee:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  4070f2:	0d36      	lsrs	r6, r6, #20
  4070f4:	0536      	lsls	r6, r6, #20
  4070f6:	2e00      	cmp	r6, #0
  4070f8:	f000 818a 	beq.w	407410 <_dtoa_r+0xe38>
  4070fc:	9b07      	ldr	r3, [sp, #28]
  4070fe:	f04f 0801 	mov.w	r8, #1
  407102:	3301      	adds	r3, #1
  407104:	9307      	str	r3, [sp, #28]
  407106:	9b03      	ldr	r3, [sp, #12]
  407108:	3301      	adds	r3, #1
  40710a:	9303      	str	r3, [sp, #12]
  40710c:	e687      	b.n	406e1e <_dtoa_r+0x846>
  40710e:	2300      	movs	r3, #0
  407110:	9908      	ldr	r1, [sp, #32]
  407112:	4620      	mov	r0, r4
  407114:	220a      	movs	r2, #10
  407116:	f001 fa87 	bl	408628 <__multadd>
  40711a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40711c:	9008      	str	r0, [sp, #32]
  40711e:	2b02      	cmp	r3, #2
  407120:	dd02      	ble.n	407128 <_dtoa_r+0xb50>
  407122:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407124:	2b00      	cmp	r3, #0
  407126:	ddd6      	ble.n	4070d6 <_dtoa_r+0xafe>
  407128:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40712a:	9304      	str	r3, [sp, #16]
  40712c:	2d00      	cmp	r5, #0
  40712e:	dd05      	ble.n	40713c <_dtoa_r+0xb64>
  407130:	9908      	ldr	r1, [sp, #32]
  407132:	462a      	mov	r2, r5
  407134:	4620      	mov	r0, r4
  407136:	f001 fc09 	bl	40894c <__lshift>
  40713a:	9008      	str	r0, [sp, #32]
  40713c:	f1b8 0f00 	cmp.w	r8, #0
  407140:	f040 8133 	bne.w	4073aa <_dtoa_r+0xdd2>
  407144:	9e08      	ldr	r6, [sp, #32]
  407146:	f00a 0101 	and.w	r1, sl, #1
  40714a:	9b04      	ldr	r3, [sp, #16]
  40714c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40714e:	3b01      	subs	r3, #1
  407150:	910b      	str	r1, [sp, #44]	; 0x2c
  407152:	9905      	ldr	r1, [sp, #20]
  407154:	fab2 f282 	clz	r2, r2
  407158:	970a      	str	r7, [sp, #40]	; 0x28
  40715a:	18cb      	adds	r3, r1, r3
  40715c:	4688      	mov	r8, r1
  40715e:	f8dd b020 	ldr.w	fp, [sp, #32]
  407162:	930c      	str	r3, [sp, #48]	; 0x30
  407164:	0953      	lsrs	r3, r2, #5
  407166:	9f06      	ldr	r7, [sp, #24]
  407168:	9303      	str	r3, [sp, #12]
  40716a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40716c:	4638      	mov	r0, r7
  40716e:	4629      	mov	r1, r5
  407170:	f7ff f992 	bl	406498 <quorem>
  407174:	4659      	mov	r1, fp
  407176:	4681      	mov	r9, r0
  407178:	4638      	mov	r0, r7
  40717a:	f001 fc41 	bl	408a00 <__mcmp>
  40717e:	4629      	mov	r1, r5
  407180:	4632      	mov	r2, r6
  407182:	4682      	mov	sl, r0
  407184:	4620      	mov	r0, r4
  407186:	f001 fc5f 	bl	408a48 <__mdiff>
  40718a:	68c2      	ldr	r2, [r0, #12]
  40718c:	4605      	mov	r5, r0
  40718e:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  407192:	9207      	str	r2, [sp, #28]
  407194:	2a00      	cmp	r2, #0
  407196:	d150      	bne.n	40723a <_dtoa_r+0xc62>
  407198:	4629      	mov	r1, r5
  40719a:	4638      	mov	r0, r7
  40719c:	f8cd c018 	str.w	ip, [sp, #24]
  4071a0:	f001 fc2e 	bl	408a00 <__mcmp>
  4071a4:	4629      	mov	r1, r5
  4071a6:	9004      	str	r0, [sp, #16]
  4071a8:	4620      	mov	r0, r4
  4071aa:	f001 fa33 	bl	408614 <_Bfree>
  4071ae:	9a03      	ldr	r2, [sp, #12]
  4071b0:	9b04      	ldr	r3, [sp, #16]
  4071b2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4071b6:	b132      	cbz	r2, 4071c6 <_dtoa_r+0xbee>
  4071b8:	b92b      	cbnz	r3, 4071c6 <_dtoa_r+0xbee>
  4071ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4071bc:	9a07      	ldr	r2, [sp, #28]
  4071be:	2b00      	cmp	r3, #0
  4071c0:	f000 8128 	beq.w	407414 <_dtoa_r+0xe3c>
  4071c4:	4613      	mov	r3, r2
  4071c6:	f1ba 0f00 	cmp.w	sl, #0
  4071ca:	f2c0 80bc 	blt.w	407346 <_dtoa_r+0xd6e>
  4071ce:	9a03      	ldr	r2, [sp, #12]
  4071d0:	b132      	cbz	r2, 4071e0 <_dtoa_r+0xc08>
  4071d2:	f1ba 0f00 	cmp.w	sl, #0
  4071d6:	d103      	bne.n	4071e0 <_dtoa_r+0xc08>
  4071d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4071da:	2a00      	cmp	r2, #0
  4071dc:	f000 80b3 	beq.w	407346 <_dtoa_r+0xd6e>
  4071e0:	2b00      	cmp	r3, #0
  4071e2:	f300 80fe 	bgt.w	4073e2 <_dtoa_r+0xe0a>
  4071e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4071e8:	f108 0901 	add.w	r9, r8, #1
  4071ec:	f888 c000 	strb.w	ip, [r8]
  4071f0:	4598      	cmp	r8, r3
  4071f2:	464d      	mov	r5, r9
  4071f4:	f000 8106 	beq.w	407404 <_dtoa_r+0xe2c>
  4071f8:	4639      	mov	r1, r7
  4071fa:	220a      	movs	r2, #10
  4071fc:	2300      	movs	r3, #0
  4071fe:	4620      	mov	r0, r4
  407200:	f001 fa12 	bl	408628 <__multadd>
  407204:	45b3      	cmp	fp, r6
  407206:	4607      	mov	r7, r0
  407208:	4659      	mov	r1, fp
  40720a:	4620      	mov	r0, r4
  40720c:	f04f 020a 	mov.w	r2, #10
  407210:	f04f 0300 	mov.w	r3, #0
  407214:	d00b      	beq.n	40722e <_dtoa_r+0xc56>
  407216:	f001 fa07 	bl	408628 <__multadd>
  40721a:	4631      	mov	r1, r6
  40721c:	4683      	mov	fp, r0
  40721e:	220a      	movs	r2, #10
  407220:	4620      	mov	r0, r4
  407222:	2300      	movs	r3, #0
  407224:	f001 fa00 	bl	408628 <__multadd>
  407228:	46c8      	mov	r8, r9
  40722a:	4606      	mov	r6, r0
  40722c:	e79d      	b.n	40716a <_dtoa_r+0xb92>
  40722e:	f001 f9fb 	bl	408628 <__multadd>
  407232:	46c8      	mov	r8, r9
  407234:	4683      	mov	fp, r0
  407236:	4606      	mov	r6, r0
  407238:	e797      	b.n	40716a <_dtoa_r+0xb92>
  40723a:	4601      	mov	r1, r0
  40723c:	4620      	mov	r0, r4
  40723e:	f8cd c010 	str.w	ip, [sp, #16]
  407242:	f001 f9e7 	bl	408614 <_Bfree>
  407246:	2301      	movs	r3, #1
  407248:	f8dd c010 	ldr.w	ip, [sp, #16]
  40724c:	e7bb      	b.n	4071c6 <_dtoa_r+0xbee>
  40724e:	2b0e      	cmp	r3, #14
  407250:	bf8c      	ite	hi
  407252:	2300      	movhi	r3, #0
  407254:	2301      	movls	r3, #1
  407256:	2100      	movs	r1, #0
  407258:	401d      	ands	r5, r3
  40725a:	6461      	str	r1, [r4, #68]	; 0x44
  40725c:	e436      	b.n	406acc <_dtoa_r+0x4f4>
  40725e:	2301      	movs	r3, #1
  407260:	9323      	str	r3, [sp, #140]	; 0x8c
  407262:	9310      	str	r3, [sp, #64]	; 0x40
  407264:	9304      	str	r3, [sp, #16]
  407266:	e7f6      	b.n	407256 <_dtoa_r+0xc7e>
  407268:	9906      	ldr	r1, [sp, #24]
  40726a:	4620      	mov	r0, r4
  40726c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40726e:	f001 fb1d 	bl	4088ac <__pow5mult>
  407272:	9006      	str	r0, [sp, #24]
  407274:	f7ff bb42 	b.w	4068fc <_dtoa_r+0x324>
  407278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40727a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40727c:	1af3      	subs	r3, r6, r3
  40727e:	960a      	str	r6, [sp, #40]	; 0x28
  407280:	2600      	movs	r6, #0
  407282:	441a      	add	r2, r3
  407284:	920c      	str	r2, [sp, #48]	; 0x30
  407286:	f7ff bbf3 	b.w	406a70 <_dtoa_r+0x498>
  40728a:	9b04      	ldr	r3, [sp, #16]
  40728c:	2b00      	cmp	r3, #0
  40728e:	f43f adcc 	beq.w	406e2a <_dtoa_r+0x852>
  407292:	9d10      	ldr	r5, [sp, #64]	; 0x40
  407294:	2d00      	cmp	r5, #0
  407296:	f77f ae57 	ble.w	406f48 <_dtoa_r+0x970>
  40729a:	2200      	movs	r2, #0
  40729c:	4b86      	ldr	r3, [pc, #536]	; (4074b8 <_dtoa_r+0xee0>)
  40729e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4072a2:	f7fc fb13 	bl	4038cc <__aeabi_dmul>
  4072a6:	9b02      	ldr	r3, [sp, #8]
  4072a8:	4606      	mov	r6, r0
  4072aa:	460f      	mov	r7, r1
  4072ac:	3b01      	subs	r3, #1
  4072ae:	f108 0001 	add.w	r0, r8, #1
  4072b2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  4072b6:	9314      	str	r3, [sp, #80]	; 0x50
  4072b8:	f7fc faa2 	bl	403800 <__aeabi_i2d>
  4072bc:	4602      	mov	r2, r0
  4072be:	460b      	mov	r3, r1
  4072c0:	4630      	mov	r0, r6
  4072c2:	4639      	mov	r1, r7
  4072c4:	f7fc fb02 	bl	4038cc <__aeabi_dmul>
  4072c8:	2200      	movs	r2, #0
  4072ca:	4b7c      	ldr	r3, [pc, #496]	; (4074bc <_dtoa_r+0xee4>)
  4072cc:	f7fc f94c 	bl	403568 <__adddf3>
  4072d0:	46ac      	mov	ip, r5
  4072d2:	4606      	mov	r6, r0
  4072d4:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4072d8:	e45a      	b.n	406b90 <_dtoa_r+0x5b8>
  4072da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4072de:	f04f 0802 	mov.w	r8, #2
  4072e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4072e6:	e432      	b.n	406b4e <_dtoa_r+0x576>
  4072e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4072ea:	2130      	movs	r1, #48	; 0x30
  4072ec:	3301      	adds	r3, #1
  4072ee:	7011      	strb	r1, [r2, #0]
  4072f0:	9302      	str	r3, [sp, #8]
  4072f2:	2331      	movs	r3, #49	; 0x31
  4072f4:	7013      	strb	r3, [r2, #0]
  4072f6:	f7ff bb72 	b.w	4069de <_dtoa_r+0x406>
  4072fa:	9906      	ldr	r1, [sp, #24]
  4072fc:	4620      	mov	r0, r4
  4072fe:	f001 fad5 	bl	4088ac <__pow5mult>
  407302:	9006      	str	r0, [sp, #24]
  407304:	f7ff bafa 	b.w	4068fc <_dtoa_r+0x324>
  407308:	f1ba 0f00 	cmp.w	sl, #0
  40730c:	f43f aeea 	beq.w	4070e4 <_dtoa_r+0xb0c>
  407310:	f7ff bb07 	b.w	406922 <_dtoa_r+0x34a>
  407314:	9a02      	ldr	r2, [sp, #8]
  407316:	2331      	movs	r3, #49	; 0x31
  407318:	3201      	adds	r2, #1
  40731a:	9202      	str	r2, [sp, #8]
  40731c:	9a05      	ldr	r2, [sp, #20]
  40731e:	7013      	strb	r3, [r2, #0]
  407320:	e5f5      	b.n	406f0e <_dtoa_r+0x936>
  407322:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407324:	2a00      	cmp	r2, #0
  407326:	d055      	beq.n	4073d4 <_dtoa_r+0xdfc>
  407328:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40732c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40732e:	9d07      	ldr	r5, [sp, #28]
  407330:	f7ff bba4 	b.w	406a7c <_dtoa_r+0x4a4>
  407334:	9c03      	ldr	r4, [sp, #12]
  407336:	f7ff bb52 	b.w	4069de <_dtoa_r+0x406>
  40733a:	9b07      	ldr	r3, [sp, #28]
  40733c:	9a04      	ldr	r2, [sp, #16]
  40733e:	1a9d      	subs	r5, r3, r2
  407340:	2300      	movs	r3, #0
  407342:	f7ff bb9b 	b.w	406a7c <_dtoa_r+0x4a4>
  407346:	2b00      	cmp	r3, #0
  407348:	9706      	str	r7, [sp, #24]
  40734a:	46e1      	mov	r9, ip
  40734c:	f8cd b020 	str.w	fp, [sp, #32]
  407350:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407352:	4665      	mov	r5, ip
  407354:	dd0f      	ble.n	407376 <_dtoa_r+0xd9e>
  407356:	9906      	ldr	r1, [sp, #24]
  407358:	2201      	movs	r2, #1
  40735a:	4620      	mov	r0, r4
  40735c:	f001 faf6 	bl	40894c <__lshift>
  407360:	4639      	mov	r1, r7
  407362:	9006      	str	r0, [sp, #24]
  407364:	f001 fb4c 	bl	408a00 <__mcmp>
  407368:	2800      	cmp	r0, #0
  40736a:	dd75      	ble.n	407458 <_dtoa_r+0xe80>
  40736c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  407370:	d066      	beq.n	407440 <_dtoa_r+0xe68>
  407372:	f109 0501 	add.w	r5, r9, #1
  407376:	f8dd a020 	ldr.w	sl, [sp, #32]
  40737a:	f888 5000 	strb.w	r5, [r8]
  40737e:	f108 0501 	add.w	r5, r8, #1
  407382:	9608      	str	r6, [sp, #32]
  407384:	e5c3      	b.n	406f0e <_dtoa_r+0x936>
  407386:	9c12      	ldr	r4, [sp, #72]	; 0x48
  407388:	e531      	b.n	406dee <_dtoa_r+0x816>
  40738a:	d104      	bne.n	407396 <_dtoa_r+0xdbe>
  40738c:	f019 0f01 	tst.w	r9, #1
  407390:	d001      	beq.n	407396 <_dtoa_r+0xdbe>
  407392:	e5ac      	b.n	406eee <_dtoa_r+0x916>
  407394:	4615      	mov	r5, r2
  407396:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40739a:	1e6a      	subs	r2, r5, #1
  40739c:	2b30      	cmp	r3, #48	; 0x30
  40739e:	d0f9      	beq.n	407394 <_dtoa_r+0xdbc>
  4073a0:	e5b5      	b.n	406f0e <_dtoa_r+0x936>
  4073a2:	2700      	movs	r7, #0
  4073a4:	9708      	str	r7, [sp, #32]
  4073a6:	f7ff ba4c 	b.w	406842 <_dtoa_r+0x26a>
  4073aa:	9e08      	ldr	r6, [sp, #32]
  4073ac:	4620      	mov	r0, r4
  4073ae:	6871      	ldr	r1, [r6, #4]
  4073b0:	f001 f908 	bl	4085c4 <_Balloc>
  4073b4:	6933      	ldr	r3, [r6, #16]
  4073b6:	4605      	mov	r5, r0
  4073b8:	f106 010c 	add.w	r1, r6, #12
  4073bc:	1c9a      	adds	r2, r3, #2
  4073be:	300c      	adds	r0, #12
  4073c0:	0092      	lsls	r2, r2, #2
  4073c2:	f7fc fdb3 	bl	403f2c <memcpy>
  4073c6:	4620      	mov	r0, r4
  4073c8:	4629      	mov	r1, r5
  4073ca:	2201      	movs	r2, #1
  4073cc:	f001 fabe 	bl	40894c <__lshift>
  4073d0:	4606      	mov	r6, r0
  4073d2:	e6b8      	b.n	407146 <_dtoa_r+0xb6e>
  4073d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4073d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4073d8:	9d07      	ldr	r5, [sp, #28]
  4073da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4073de:	f7ff bb4d 	b.w	406a7c <_dtoa_r+0x4a4>
  4073e2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4073e6:	9706      	str	r7, [sp, #24]
  4073e8:	f8cd b020 	str.w	fp, [sp, #32]
  4073ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4073ee:	d030      	beq.n	407452 <_dtoa_r+0xe7a>
  4073f0:	f10c 0901 	add.w	r9, ip, #1
  4073f4:	f8dd a020 	ldr.w	sl, [sp, #32]
  4073f8:	f108 0501 	add.w	r5, r8, #1
  4073fc:	9608      	str	r6, [sp, #32]
  4073fe:	f888 9000 	strb.w	r9, [r8]
  407402:	e584      	b.n	406f0e <_dtoa_r+0x936>
  407404:	9706      	str	r7, [sp, #24]
  407406:	46e1      	mov	r9, ip
  407408:	46da      	mov	sl, fp
  40740a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40740c:	9608      	str	r6, [sp, #32]
  40740e:	e562      	b.n	406ed6 <_dtoa_r+0x8fe>
  407410:	46b0      	mov	r8, r6
  407412:	e504      	b.n	406e1e <_dtoa_r+0x846>
  407414:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  407418:	9706      	str	r7, [sp, #24]
  40741a:	f8cd b020 	str.w	fp, [sp, #32]
  40741e:	4655      	mov	r5, sl
  407420:	46cb      	mov	fp, r9
  407422:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407424:	46e1      	mov	r9, ip
  407426:	d00b      	beq.n	407440 <_dtoa_r+0xe68>
  407428:	2d00      	cmp	r5, #0
  40742a:	dd01      	ble.n	407430 <_dtoa_r+0xe58>
  40742c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  407430:	f8dd a020 	ldr.w	sl, [sp, #32]
  407434:	f108 0501 	add.w	r5, r8, #1
  407438:	f888 9000 	strb.w	r9, [r8]
  40743c:	9608      	str	r6, [sp, #32]
  40743e:	e566      	b.n	406f0e <_dtoa_r+0x936>
  407440:	f8dd a020 	ldr.w	sl, [sp, #32]
  407444:	9608      	str	r6, [sp, #32]
  407446:	2239      	movs	r2, #57	; 0x39
  407448:	f108 0501 	add.w	r5, r8, #1
  40744c:	f888 2000 	strb.w	r2, [r8]
  407450:	e54f      	b.n	406ef2 <_dtoa_r+0x91a>
  407452:	46da      	mov	sl, fp
  407454:	9608      	str	r6, [sp, #32]
  407456:	e7f6      	b.n	407446 <_dtoa_r+0xe6e>
  407458:	d18d      	bne.n	407376 <_dtoa_r+0xd9e>
  40745a:	f019 0f01 	tst.w	r9, #1
  40745e:	d08a      	beq.n	407376 <_dtoa_r+0xd9e>
  407460:	e784      	b.n	40736c <_dtoa_r+0xd94>
  407462:	f04f 0802 	mov.w	r8, #2
  407466:	f7ff bb72 	b.w	406b4e <_dtoa_r+0x576>
  40746a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40746c:	9304      	str	r3, [sp, #16]
  40746e:	e50e      	b.n	406e8e <_dtoa_r+0x8b6>
  407470:	f43f aa75 	beq.w	40695e <_dtoa_r+0x386>
  407474:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407478:	f7ff ba6a 	b.w	406950 <_dtoa_r+0x378>
  40747c:	2501      	movs	r5, #1
  40747e:	f7ff b982 	b.w	406786 <_dtoa_r+0x1ae>
  407482:	2500      	movs	r5, #0
  407484:	4620      	mov	r0, r4
  407486:	6465      	str	r5, [r4, #68]	; 0x44
  407488:	4629      	mov	r1, r5
  40748a:	f001 f89b 	bl	4085c4 <_Balloc>
  40748e:	9a02      	ldr	r2, [sp, #8]
  407490:	9005      	str	r0, [sp, #20]
  407492:	2a0e      	cmp	r2, #14
  407494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407496:	6420      	str	r0, [r4, #64]	; 0x40
  407498:	f73f aad7 	bgt.w	406a4a <_dtoa_r+0x472>
  40749c:	42ab      	cmp	r3, r5
  40749e:	f6ff aad4 	blt.w	406a4a <_dtoa_r+0x472>
  4074a2:	f04f 33ff 	mov.w	r3, #4294967295
  4074a6:	9523      	str	r5, [sp, #140]	; 0x8c
  4074a8:	9304      	str	r3, [sp, #16]
  4074aa:	f7ff b9a9 	b.w	406800 <_dtoa_r+0x228>
  4074ae:	2301      	movs	r3, #1
  4074b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4074b2:	f7ff bbfa 	b.w	406caa <_dtoa_r+0x6d2>
  4074b6:	bf00      	nop
  4074b8:	40240000 	.word	0x40240000
  4074bc:	401c0000 	.word	0x401c0000

004074c0 <__sflush_r>:
  4074c0:	898b      	ldrh	r3, [r1, #12]
  4074c2:	b29a      	uxth	r2, r3
  4074c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074c8:	460d      	mov	r5, r1
  4074ca:	0711      	lsls	r1, r2, #28
  4074cc:	4680      	mov	r8, r0
  4074ce:	d43c      	bmi.n	40754a <__sflush_r+0x8a>
  4074d0:	686a      	ldr	r2, [r5, #4]
  4074d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4074d6:	2a00      	cmp	r2, #0
  4074d8:	81ab      	strh	r3, [r5, #12]
  4074da:	dd76      	ble.n	4075ca <__sflush_r+0x10a>
  4074dc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4074de:	2e00      	cmp	r6, #0
  4074e0:	d04b      	beq.n	40757a <__sflush_r+0xba>
  4074e2:	b29b      	uxth	r3, r3
  4074e4:	2100      	movs	r1, #0
  4074e6:	f8d8 4000 	ldr.w	r4, [r8]
  4074ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4074ee:	f8c8 1000 	str.w	r1, [r8]
  4074f2:	b292      	uxth	r2, r2
  4074f4:	2a00      	cmp	r2, #0
  4074f6:	d06c      	beq.n	4075d2 <__sflush_r+0x112>
  4074f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4074fa:	075f      	lsls	r7, r3, #29
  4074fc:	d505      	bpl.n	40750a <__sflush_r+0x4a>
  4074fe:	6869      	ldr	r1, [r5, #4]
  407500:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407502:	1a52      	subs	r2, r2, r1
  407504:	b10b      	cbz	r3, 40750a <__sflush_r+0x4a>
  407506:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407508:	1ad2      	subs	r2, r2, r3
  40750a:	4640      	mov	r0, r8
  40750c:	69e9      	ldr	r1, [r5, #28]
  40750e:	2300      	movs	r3, #0
  407510:	47b0      	blx	r6
  407512:	1c46      	adds	r6, r0, #1
  407514:	d03e      	beq.n	407594 <__sflush_r+0xd4>
  407516:	89ab      	ldrh	r3, [r5, #12]
  407518:	2100      	movs	r1, #0
  40751a:	692a      	ldr	r2, [r5, #16]
  40751c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407520:	6069      	str	r1, [r5, #4]
  407522:	602a      	str	r2, [r5, #0]
  407524:	b29b      	uxth	r3, r3
  407526:	04da      	lsls	r2, r3, #19
  407528:	81ab      	strh	r3, [r5, #12]
  40752a:	d44c      	bmi.n	4075c6 <__sflush_r+0x106>
  40752c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40752e:	f8c8 4000 	str.w	r4, [r8]
  407532:	b311      	cbz	r1, 40757a <__sflush_r+0xba>
  407534:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407538:	4299      	cmp	r1, r3
  40753a:	d002      	beq.n	407542 <__sflush_r+0x82>
  40753c:	4640      	mov	r0, r8
  40753e:	f000 f9d5 	bl	4078ec <_free_r>
  407542:	2000      	movs	r0, #0
  407544:	6328      	str	r0, [r5, #48]	; 0x30
  407546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40754a:	692e      	ldr	r6, [r5, #16]
  40754c:	b1ae      	cbz	r6, 40757a <__sflush_r+0xba>
  40754e:	682c      	ldr	r4, [r5, #0]
  407550:	0791      	lsls	r1, r2, #30
  407552:	602e      	str	r6, [r5, #0]
  407554:	eba4 0406 	sub.w	r4, r4, r6
  407558:	d11a      	bne.n	407590 <__sflush_r+0xd0>
  40755a:	696b      	ldr	r3, [r5, #20]
  40755c:	60ab      	str	r3, [r5, #8]
  40755e:	e00a      	b.n	407576 <__sflush_r+0xb6>
  407560:	4632      	mov	r2, r6
  407562:	4623      	mov	r3, r4
  407564:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407566:	4640      	mov	r0, r8
  407568:	69e9      	ldr	r1, [r5, #28]
  40756a:	47b8      	blx	r7
  40756c:	2800      	cmp	r0, #0
  40756e:	eba4 0400 	sub.w	r4, r4, r0
  407572:	4406      	add	r6, r0
  407574:	dd04      	ble.n	407580 <__sflush_r+0xc0>
  407576:	2c00      	cmp	r4, #0
  407578:	dcf2      	bgt.n	407560 <__sflush_r+0xa0>
  40757a:	2000      	movs	r0, #0
  40757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407580:	89ab      	ldrh	r3, [r5, #12]
  407582:	f04f 30ff 	mov.w	r0, #4294967295
  407586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40758a:	81ab      	strh	r3, [r5, #12]
  40758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407590:	2300      	movs	r3, #0
  407592:	e7e3      	b.n	40755c <__sflush_r+0x9c>
  407594:	f8d8 3000 	ldr.w	r3, [r8]
  407598:	fab3 f283 	clz	r2, r3
  40759c:	2b00      	cmp	r3, #0
  40759e:	bf18      	it	ne
  4075a0:	2b1d      	cmpne	r3, #29
  4075a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
  4075a6:	d001      	beq.n	4075ac <__sflush_r+0xec>
  4075a8:	2b16      	cmp	r3, #22
  4075aa:	d127      	bne.n	4075fc <__sflush_r+0x13c>
  4075ac:	89ab      	ldrh	r3, [r5, #12]
  4075ae:	2600      	movs	r6, #0
  4075b0:	6929      	ldr	r1, [r5, #16]
  4075b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4075b6:	b29b      	uxth	r3, r3
  4075b8:	81ab      	strh	r3, [r5, #12]
  4075ba:	04db      	lsls	r3, r3, #19
  4075bc:	e885 0042 	stmia.w	r5, {r1, r6}
  4075c0:	d5b4      	bpl.n	40752c <__sflush_r+0x6c>
  4075c2:	2a00      	cmp	r2, #0
  4075c4:	d0b2      	beq.n	40752c <__sflush_r+0x6c>
  4075c6:	6528      	str	r0, [r5, #80]	; 0x50
  4075c8:	e7b0      	b.n	40752c <__sflush_r+0x6c>
  4075ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4075cc:	2a00      	cmp	r2, #0
  4075ce:	dc85      	bgt.n	4074dc <__sflush_r+0x1c>
  4075d0:	e7d3      	b.n	40757a <__sflush_r+0xba>
  4075d2:	2301      	movs	r3, #1
  4075d4:	4640      	mov	r0, r8
  4075d6:	69e9      	ldr	r1, [r5, #28]
  4075d8:	47b0      	blx	r6
  4075da:	1c43      	adds	r3, r0, #1
  4075dc:	4602      	mov	r2, r0
  4075de:	d002      	beq.n	4075e6 <__sflush_r+0x126>
  4075e0:	89ab      	ldrh	r3, [r5, #12]
  4075e2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4075e4:	e789      	b.n	4074fa <__sflush_r+0x3a>
  4075e6:	f8d8 3000 	ldr.w	r3, [r8]
  4075ea:	2b00      	cmp	r3, #0
  4075ec:	d0f8      	beq.n	4075e0 <__sflush_r+0x120>
  4075ee:	2b16      	cmp	r3, #22
  4075f0:	d001      	beq.n	4075f6 <__sflush_r+0x136>
  4075f2:	2b1d      	cmp	r3, #29
  4075f4:	d1c4      	bne.n	407580 <__sflush_r+0xc0>
  4075f6:	f8c8 4000 	str.w	r4, [r8]
  4075fa:	e7be      	b.n	40757a <__sflush_r+0xba>
  4075fc:	89ab      	ldrh	r3, [r5, #12]
  4075fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407602:	81ab      	strh	r3, [r5, #12]
  407604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407608 <_fflush_r>:
  407608:	b510      	push	{r4, lr}
  40760a:	4604      	mov	r4, r0
  40760c:	b082      	sub	sp, #8
  40760e:	b108      	cbz	r0, 407614 <_fflush_r+0xc>
  407610:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407612:	b153      	cbz	r3, 40762a <_fflush_r+0x22>
  407614:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  407618:	b908      	cbnz	r0, 40761e <_fflush_r+0x16>
  40761a:	b002      	add	sp, #8
  40761c:	bd10      	pop	{r4, pc}
  40761e:	4620      	mov	r0, r4
  407620:	b002      	add	sp, #8
  407622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407626:	f7ff bf4b 	b.w	4074c0 <__sflush_r>
  40762a:	9101      	str	r1, [sp, #4]
  40762c:	f000 f886 	bl	40773c <__sinit>
  407630:	9901      	ldr	r1, [sp, #4]
  407632:	e7ef      	b.n	407614 <_fflush_r+0xc>

00407634 <_cleanup_r>:
  407634:	4901      	ldr	r1, [pc, #4]	; (40763c <_cleanup_r+0x8>)
  407636:	f000 bbc3 	b.w	407dc0 <_fwalk_reent>
  40763a:	bf00      	nop
  40763c:	00409485 	.word	0x00409485

00407640 <__sinit.part.1>:
  407640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407644:	4682      	mov	sl, r0
  407646:	2400      	movs	r4, #0
  407648:	4837      	ldr	r0, [pc, #220]	; (407728 <__sinit.part.1+0xe8>)
  40764a:	2103      	movs	r1, #3
  40764c:	f8da 5004 	ldr.w	r5, [sl, #4]
  407650:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  407654:	2604      	movs	r6, #4
  407656:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40765a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40765e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  407662:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  407666:	4621      	mov	r1, r4
  407668:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40766c:	2208      	movs	r2, #8
  40766e:	81ae      	strh	r6, [r5, #12]
  407670:	602c      	str	r4, [r5, #0]
  407672:	606c      	str	r4, [r5, #4]
  407674:	60ac      	str	r4, [r5, #8]
  407676:	666c      	str	r4, [r5, #100]	; 0x64
  407678:	81ec      	strh	r4, [r5, #14]
  40767a:	612c      	str	r4, [r5, #16]
  40767c:	616c      	str	r4, [r5, #20]
  40767e:	61ac      	str	r4, [r5, #24]
  407680:	f7fc fcee 	bl	404060 <memset>
  407684:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 407730 <__sinit.part.1+0xf0>
  407688:	f8da 6008 	ldr.w	r6, [sl, #8]
  40768c:	f04f 0301 	mov.w	r3, #1
  407690:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 407734 <__sinit.part.1+0xf4>
  407694:	f04f 0e09 	mov.w	lr, #9
  407698:	f8df 809c 	ldr.w	r8, [pc, #156]	; 407738 <__sinit.part.1+0xf8>
  40769c:	4621      	mov	r1, r4
  40769e:	4f23      	ldr	r7, [pc, #140]	; (40772c <__sinit.part.1+0xec>)
  4076a0:	2208      	movs	r2, #8
  4076a2:	61ed      	str	r5, [r5, #28]
  4076a4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4076a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4076ac:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4076b0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4076b4:	62ef      	str	r7, [r5, #44]	; 0x2c
  4076b6:	81f3      	strh	r3, [r6, #14]
  4076b8:	f8a6 e00c 	strh.w	lr, [r6, #12]
  4076bc:	6034      	str	r4, [r6, #0]
  4076be:	6074      	str	r4, [r6, #4]
  4076c0:	60b4      	str	r4, [r6, #8]
  4076c2:	6674      	str	r4, [r6, #100]	; 0x64
  4076c4:	6134      	str	r4, [r6, #16]
  4076c6:	6174      	str	r4, [r6, #20]
  4076c8:	61b4      	str	r4, [r6, #24]
  4076ca:	f7fc fcc9 	bl	404060 <memset>
  4076ce:	f8da 500c 	ldr.w	r5, [sl, #12]
  4076d2:	f04f 0c12 	mov.w	ip, #18
  4076d6:	f04f 0e02 	mov.w	lr, #2
  4076da:	61f6      	str	r6, [r6, #28]
  4076dc:	4621      	mov	r1, r4
  4076de:	f8c6 b020 	str.w	fp, [r6, #32]
  4076e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4076e6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  4076ea:	2208      	movs	r2, #8
  4076ec:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  4076f0:	62f7      	str	r7, [r6, #44]	; 0x2c
  4076f2:	602c      	str	r4, [r5, #0]
  4076f4:	606c      	str	r4, [r5, #4]
  4076f6:	60ac      	str	r4, [r5, #8]
  4076f8:	666c      	str	r4, [r5, #100]	; 0x64
  4076fa:	612c      	str	r4, [r5, #16]
  4076fc:	616c      	str	r4, [r5, #20]
  4076fe:	61ac      	str	r4, [r5, #24]
  407700:	f8a5 c00c 	strh.w	ip, [r5, #12]
  407704:	f8a5 e00e 	strh.w	lr, [r5, #14]
  407708:	f7fc fcaa 	bl	404060 <memset>
  40770c:	2301      	movs	r3, #1
  40770e:	61ed      	str	r5, [r5, #28]
  407710:	f8c5 b020 	str.w	fp, [r5, #32]
  407714:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  407718:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40771c:	62ef      	str	r7, [r5, #44]	; 0x2c
  40771e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  407722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407726:	bf00      	nop
  407728:	00407635 	.word	0x00407635
  40772c:	00409105 	.word	0x00409105
  407730:	00409085 	.word	0x00409085
  407734:	004090a9 	.word	0x004090a9
  407738:	004090e1 	.word	0x004090e1

0040773c <__sinit>:
  40773c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40773e:	b103      	cbz	r3, 407742 <__sinit+0x6>
  407740:	4770      	bx	lr
  407742:	f7ff bf7d 	b.w	407640 <__sinit.part.1>
  407746:	bf00      	nop

00407748 <__sfp_lock_acquire>:
  407748:	4770      	bx	lr
  40774a:	bf00      	nop

0040774c <__sfp_lock_release>:
  40774c:	4770      	bx	lr
  40774e:	bf00      	nop

00407750 <__libc_fini_array>:
  407750:	b538      	push	{r3, r4, r5, lr}
  407752:	4b08      	ldr	r3, [pc, #32]	; (407774 <__libc_fini_array+0x24>)
  407754:	4d08      	ldr	r5, [pc, #32]	; (407778 <__libc_fini_array+0x28>)
  407756:	1aed      	subs	r5, r5, r3
  407758:	10ac      	asrs	r4, r5, #2
  40775a:	bf18      	it	ne
  40775c:	18ed      	addne	r5, r5, r3
  40775e:	d005      	beq.n	40776c <__libc_fini_array+0x1c>
  407760:	3c01      	subs	r4, #1
  407762:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407766:	4798      	blx	r3
  407768:	2c00      	cmp	r4, #0
  40776a:	d1f9      	bne.n	407760 <__libc_fini_array+0x10>
  40776c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407770:	f002 bc20 	b.w	409fb4 <_fini>
  407774:	00409fc0 	.word	0x00409fc0
  407778:	00409fc4 	.word	0x00409fc4

0040777c <__fputwc>:
  40777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407780:	b082      	sub	sp, #8
  407782:	4607      	mov	r7, r0
  407784:	460e      	mov	r6, r1
  407786:	4614      	mov	r4, r2
  407788:	f000 fb46 	bl	407e18 <__locale_mb_cur_max>
  40778c:	2801      	cmp	r0, #1
  40778e:	d040      	beq.n	407812 <__fputwc+0x96>
  407790:	4638      	mov	r0, r7
  407792:	a901      	add	r1, sp, #4
  407794:	4632      	mov	r2, r6
  407796:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40779a:	f001 fd93 	bl	4092c4 <_wcrtomb_r>
  40779e:	f1b0 3fff 	cmp.w	r0, #4294967295
  4077a2:	4680      	mov	r8, r0
  4077a4:	d02e      	beq.n	407804 <__fputwc+0x88>
  4077a6:	2800      	cmp	r0, #0
  4077a8:	d03b      	beq.n	407822 <__fputwc+0xa6>
  4077aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4077ae:	2500      	movs	r5, #0
  4077b0:	e009      	b.n	4077c6 <__fputwc+0x4a>
  4077b2:	6823      	ldr	r3, [r4, #0]
  4077b4:	7019      	strb	r1, [r3, #0]
  4077b6:	6823      	ldr	r3, [r4, #0]
  4077b8:	3301      	adds	r3, #1
  4077ba:	6023      	str	r3, [r4, #0]
  4077bc:	3501      	adds	r5, #1
  4077be:	45a8      	cmp	r8, r5
  4077c0:	d92f      	bls.n	407822 <__fputwc+0xa6>
  4077c2:	ab01      	add	r3, sp, #4
  4077c4:	5d59      	ldrb	r1, [r3, r5]
  4077c6:	68a3      	ldr	r3, [r4, #8]
  4077c8:	3b01      	subs	r3, #1
  4077ca:	2b00      	cmp	r3, #0
  4077cc:	60a3      	str	r3, [r4, #8]
  4077ce:	daf0      	bge.n	4077b2 <__fputwc+0x36>
  4077d0:	69a2      	ldr	r2, [r4, #24]
  4077d2:	4293      	cmp	r3, r2
  4077d4:	db06      	blt.n	4077e4 <__fputwc+0x68>
  4077d6:	6823      	ldr	r3, [r4, #0]
  4077d8:	7019      	strb	r1, [r3, #0]
  4077da:	6823      	ldr	r3, [r4, #0]
  4077dc:	7819      	ldrb	r1, [r3, #0]
  4077de:	3301      	adds	r3, #1
  4077e0:	290a      	cmp	r1, #10
  4077e2:	d1ea      	bne.n	4077ba <__fputwc+0x3e>
  4077e4:	4638      	mov	r0, r7
  4077e6:	4622      	mov	r2, r4
  4077e8:	f001 fd18 	bl	40921c <__swbuf_r>
  4077ec:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  4077f0:	fab0 f080 	clz	r0, r0
  4077f4:	0940      	lsrs	r0, r0, #5
  4077f6:	2800      	cmp	r0, #0
  4077f8:	d0e0      	beq.n	4077bc <__fputwc+0x40>
  4077fa:	f04f 30ff 	mov.w	r0, #4294967295
  4077fe:	b002      	add	sp, #8
  407800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407804:	89a3      	ldrh	r3, [r4, #12]
  407806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40780a:	81a3      	strh	r3, [r4, #12]
  40780c:	b002      	add	sp, #8
  40780e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407812:	1e73      	subs	r3, r6, #1
  407814:	2bfe      	cmp	r3, #254	; 0xfe
  407816:	d8bb      	bhi.n	407790 <__fputwc+0x14>
  407818:	b2f1      	uxtb	r1, r6
  40781a:	4680      	mov	r8, r0
  40781c:	f88d 1004 	strb.w	r1, [sp, #4]
  407820:	e7c5      	b.n	4077ae <__fputwc+0x32>
  407822:	4630      	mov	r0, r6
  407824:	b002      	add	sp, #8
  407826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40782a:	bf00      	nop

0040782c <_fputwc_r>:
  40782c:	8993      	ldrh	r3, [r2, #12]
  40782e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  407832:	d10b      	bne.n	40784c <_fputwc_r+0x20>
  407834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407838:	b410      	push	{r4}
  40783a:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40783c:	8193      	strh	r3, [r2, #12]
  40783e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  407842:	6654      	str	r4, [r2, #100]	; 0x64
  407844:	f85d 4b04 	ldr.w	r4, [sp], #4
  407848:	f7ff bf98 	b.w	40777c <__fputwc>
  40784c:	f7ff bf96 	b.w	40777c <__fputwc>

00407850 <_malloc_trim_r>:
  407850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407852:	4f22      	ldr	r7, [pc, #136]	; (4078dc <_malloc_trim_r+0x8c>)
  407854:	460c      	mov	r4, r1
  407856:	4606      	mov	r6, r0
  407858:	f000 feb0 	bl	4085bc <__malloc_lock>
  40785c:	68ba      	ldr	r2, [r7, #8]
  40785e:	4b20      	ldr	r3, [pc, #128]	; (4078e0 <_malloc_trim_r+0x90>)
  407860:	6855      	ldr	r5, [r2, #4]
  407862:	f025 0503 	bic.w	r5, r5, #3
  407866:	1b2c      	subs	r4, r5, r4
  407868:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40786c:	4023      	ands	r3, r4
  40786e:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  407872:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407876:	db07      	blt.n	407888 <_malloc_trim_r+0x38>
  407878:	4630      	mov	r0, r6
  40787a:	2100      	movs	r1, #0
  40787c:	f001 fba6 	bl	408fcc <_sbrk_r>
  407880:	68bb      	ldr	r3, [r7, #8]
  407882:	442b      	add	r3, r5
  407884:	4298      	cmp	r0, r3
  407886:	d004      	beq.n	407892 <_malloc_trim_r+0x42>
  407888:	4630      	mov	r0, r6
  40788a:	f000 fe99 	bl	4085c0 <__malloc_unlock>
  40788e:	2000      	movs	r0, #0
  407890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407892:	4630      	mov	r0, r6
  407894:	4261      	negs	r1, r4
  407896:	f001 fb99 	bl	408fcc <_sbrk_r>
  40789a:	3001      	adds	r0, #1
  40789c:	d00d      	beq.n	4078ba <_malloc_trim_r+0x6a>
  40789e:	4a11      	ldr	r2, [pc, #68]	; (4078e4 <_malloc_trim_r+0x94>)
  4078a0:	1b2d      	subs	r5, r5, r4
  4078a2:	68b9      	ldr	r1, [r7, #8]
  4078a4:	4630      	mov	r0, r6
  4078a6:	6813      	ldr	r3, [r2, #0]
  4078a8:	f045 0501 	orr.w	r5, r5, #1
  4078ac:	1b1b      	subs	r3, r3, r4
  4078ae:	604d      	str	r5, [r1, #4]
  4078b0:	6013      	str	r3, [r2, #0]
  4078b2:	f000 fe85 	bl	4085c0 <__malloc_unlock>
  4078b6:	2001      	movs	r0, #1
  4078b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4078ba:	4630      	mov	r0, r6
  4078bc:	2100      	movs	r1, #0
  4078be:	f001 fb85 	bl	408fcc <_sbrk_r>
  4078c2:	68ba      	ldr	r2, [r7, #8]
  4078c4:	1a83      	subs	r3, r0, r2
  4078c6:	2b0f      	cmp	r3, #15
  4078c8:	ddde      	ble.n	407888 <_malloc_trim_r+0x38>
  4078ca:	4c07      	ldr	r4, [pc, #28]	; (4078e8 <_malloc_trim_r+0x98>)
  4078cc:	f043 0301 	orr.w	r3, r3, #1
  4078d0:	4904      	ldr	r1, [pc, #16]	; (4078e4 <_malloc_trim_r+0x94>)
  4078d2:	6824      	ldr	r4, [r4, #0]
  4078d4:	6053      	str	r3, [r2, #4]
  4078d6:	1b00      	subs	r0, r0, r4
  4078d8:	6008      	str	r0, [r1, #0]
  4078da:	e7d5      	b.n	407888 <_malloc_trim_r+0x38>
  4078dc:	204004a0 	.word	0x204004a0
  4078e0:	fffff000 	.word	0xfffff000
  4078e4:	2040c298 	.word	0x2040c298
  4078e8:	204008ac 	.word	0x204008ac

004078ec <_free_r>:
  4078ec:	2900      	cmp	r1, #0
  4078ee:	d04d      	beq.n	40798c <_free_r+0xa0>
  4078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4078f4:	460c      	mov	r4, r1
  4078f6:	4680      	mov	r8, r0
  4078f8:	f000 fe60 	bl	4085bc <__malloc_lock>
  4078fc:	4963      	ldr	r1, [pc, #396]	; (407a8c <_free_r+0x1a0>)
  4078fe:	f854 7c04 	ldr.w	r7, [r4, #-4]
  407902:	f1a4 0508 	sub.w	r5, r4, #8
  407906:	688e      	ldr	r6, [r1, #8]
  407908:	f027 0301 	bic.w	r3, r7, #1
  40790c:	18ea      	adds	r2, r5, r3
  40790e:	6850      	ldr	r0, [r2, #4]
  407910:	4296      	cmp	r6, r2
  407912:	f020 0003 	bic.w	r0, r0, #3
  407916:	d059      	beq.n	4079cc <_free_r+0xe0>
  407918:	07fe      	lsls	r6, r7, #31
  40791a:	6050      	str	r0, [r2, #4]
  40791c:	d40b      	bmi.n	407936 <_free_r+0x4a>
  40791e:	f854 4c08 	ldr.w	r4, [r4, #-8]
  407922:	f101 0708 	add.w	r7, r1, #8
  407926:	1b2d      	subs	r5, r5, r4
  407928:	4423      	add	r3, r4
  40792a:	68ac      	ldr	r4, [r5, #8]
  40792c:	42bc      	cmp	r4, r7
  40792e:	d066      	beq.n	4079fe <_free_r+0x112>
  407930:	68ef      	ldr	r7, [r5, #12]
  407932:	60e7      	str	r7, [r4, #12]
  407934:	60bc      	str	r4, [r7, #8]
  407936:	1814      	adds	r4, r2, r0
  407938:	6864      	ldr	r4, [r4, #4]
  40793a:	07e4      	lsls	r4, r4, #31
  40793c:	d40c      	bmi.n	407958 <_free_r+0x6c>
  40793e:	4c54      	ldr	r4, [pc, #336]	; (407a90 <_free_r+0x1a4>)
  407940:	4403      	add	r3, r0
  407942:	6890      	ldr	r0, [r2, #8]
  407944:	42a0      	cmp	r0, r4
  407946:	d07c      	beq.n	407a42 <_free_r+0x156>
  407948:	68d4      	ldr	r4, [r2, #12]
  40794a:	f043 0201 	orr.w	r2, r3, #1
  40794e:	60c4      	str	r4, [r0, #12]
  407950:	60a0      	str	r0, [r4, #8]
  407952:	606a      	str	r2, [r5, #4]
  407954:	50eb      	str	r3, [r5, r3]
  407956:	e003      	b.n	407960 <_free_r+0x74>
  407958:	f043 0201 	orr.w	r2, r3, #1
  40795c:	606a      	str	r2, [r5, #4]
  40795e:	50eb      	str	r3, [r5, r3]
  407960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407964:	d213      	bcs.n	40798e <_free_r+0xa2>
  407966:	08db      	lsrs	r3, r3, #3
  407968:	2001      	movs	r0, #1
  40796a:	684a      	ldr	r2, [r1, #4]
  40796c:	109c      	asrs	r4, r3, #2
  40796e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  407972:	40a0      	lsls	r0, r4
  407974:	689c      	ldr	r4, [r3, #8]
  407976:	4302      	orrs	r2, r0
  407978:	60eb      	str	r3, [r5, #12]
  40797a:	60ac      	str	r4, [r5, #8]
  40797c:	604a      	str	r2, [r1, #4]
  40797e:	609d      	str	r5, [r3, #8]
  407980:	60e5      	str	r5, [r4, #12]
  407982:	4640      	mov	r0, r8
  407984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407988:	f000 be1a 	b.w	4085c0 <__malloc_unlock>
  40798c:	4770      	bx	lr
  40798e:	0a5a      	lsrs	r2, r3, #9
  407990:	2a04      	cmp	r2, #4
  407992:	d847      	bhi.n	407a24 <_free_r+0x138>
  407994:	099a      	lsrs	r2, r3, #6
  407996:	f102 0438 	add.w	r4, r2, #56	; 0x38
  40799a:	0060      	lsls	r0, r4, #1
  40799c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4079a0:	493a      	ldr	r1, [pc, #232]	; (407a8c <_free_r+0x1a0>)
  4079a2:	6882      	ldr	r2, [r0, #8]
  4079a4:	4282      	cmp	r2, r0
  4079a6:	d043      	beq.n	407a30 <_free_r+0x144>
  4079a8:	6851      	ldr	r1, [r2, #4]
  4079aa:	f021 0103 	bic.w	r1, r1, #3
  4079ae:	4299      	cmp	r1, r3
  4079b0:	d902      	bls.n	4079b8 <_free_r+0xcc>
  4079b2:	6892      	ldr	r2, [r2, #8]
  4079b4:	4290      	cmp	r0, r2
  4079b6:	d1f7      	bne.n	4079a8 <_free_r+0xbc>
  4079b8:	68d3      	ldr	r3, [r2, #12]
  4079ba:	60eb      	str	r3, [r5, #12]
  4079bc:	4640      	mov	r0, r8
  4079be:	60aa      	str	r2, [r5, #8]
  4079c0:	609d      	str	r5, [r3, #8]
  4079c2:	60d5      	str	r5, [r2, #12]
  4079c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4079c8:	f000 bdfa 	b.w	4085c0 <__malloc_unlock>
  4079cc:	07ff      	lsls	r7, r7, #31
  4079ce:	4403      	add	r3, r0
  4079d0:	d407      	bmi.n	4079e2 <_free_r+0xf6>
  4079d2:	f854 2c08 	ldr.w	r2, [r4, #-8]
  4079d6:	1aad      	subs	r5, r5, r2
  4079d8:	4413      	add	r3, r2
  4079da:	68a8      	ldr	r0, [r5, #8]
  4079dc:	68ea      	ldr	r2, [r5, #12]
  4079de:	60c2      	str	r2, [r0, #12]
  4079e0:	6090      	str	r0, [r2, #8]
  4079e2:	4a2c      	ldr	r2, [pc, #176]	; (407a94 <_free_r+0x1a8>)
  4079e4:	f043 0001 	orr.w	r0, r3, #1
  4079e8:	6812      	ldr	r2, [r2, #0]
  4079ea:	6068      	str	r0, [r5, #4]
  4079ec:	4293      	cmp	r3, r2
  4079ee:	608d      	str	r5, [r1, #8]
  4079f0:	d3c7      	bcc.n	407982 <_free_r+0x96>
  4079f2:	4b29      	ldr	r3, [pc, #164]	; (407a98 <_free_r+0x1ac>)
  4079f4:	4640      	mov	r0, r8
  4079f6:	6819      	ldr	r1, [r3, #0]
  4079f8:	f7ff ff2a 	bl	407850 <_malloc_trim_r>
  4079fc:	e7c1      	b.n	407982 <_free_r+0x96>
  4079fe:	1811      	adds	r1, r2, r0
  407a00:	6849      	ldr	r1, [r1, #4]
  407a02:	07c9      	lsls	r1, r1, #31
  407a04:	d409      	bmi.n	407a1a <_free_r+0x12e>
  407a06:	4403      	add	r3, r0
  407a08:	68d1      	ldr	r1, [r2, #12]
  407a0a:	6892      	ldr	r2, [r2, #8]
  407a0c:	f043 0001 	orr.w	r0, r3, #1
  407a10:	60d1      	str	r1, [r2, #12]
  407a12:	608a      	str	r2, [r1, #8]
  407a14:	6068      	str	r0, [r5, #4]
  407a16:	50eb      	str	r3, [r5, r3]
  407a18:	e7b3      	b.n	407982 <_free_r+0x96>
  407a1a:	f043 0201 	orr.w	r2, r3, #1
  407a1e:	606a      	str	r2, [r5, #4]
  407a20:	50eb      	str	r3, [r5, r3]
  407a22:	e7ae      	b.n	407982 <_free_r+0x96>
  407a24:	2a14      	cmp	r2, #20
  407a26:	d815      	bhi.n	407a54 <_free_r+0x168>
  407a28:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  407a2c:	0060      	lsls	r0, r4, #1
  407a2e:	e7b5      	b.n	40799c <_free_r+0xb0>
  407a30:	10a4      	asrs	r4, r4, #2
  407a32:	2701      	movs	r7, #1
  407a34:	6848      	ldr	r0, [r1, #4]
  407a36:	4613      	mov	r3, r2
  407a38:	fa07 f404 	lsl.w	r4, r7, r4
  407a3c:	4320      	orrs	r0, r4
  407a3e:	6048      	str	r0, [r1, #4]
  407a40:	e7bb      	b.n	4079ba <_free_r+0xce>
  407a42:	f043 0201 	orr.w	r2, r3, #1
  407a46:	614d      	str	r5, [r1, #20]
  407a48:	610d      	str	r5, [r1, #16]
  407a4a:	60e8      	str	r0, [r5, #12]
  407a4c:	60a8      	str	r0, [r5, #8]
  407a4e:	606a      	str	r2, [r5, #4]
  407a50:	50eb      	str	r3, [r5, r3]
  407a52:	e796      	b.n	407982 <_free_r+0x96>
  407a54:	2a54      	cmp	r2, #84	; 0x54
  407a56:	d804      	bhi.n	407a62 <_free_r+0x176>
  407a58:	0b1a      	lsrs	r2, r3, #12
  407a5a:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  407a5e:	0060      	lsls	r0, r4, #1
  407a60:	e79c      	b.n	40799c <_free_r+0xb0>
  407a62:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407a66:	d804      	bhi.n	407a72 <_free_r+0x186>
  407a68:	0bda      	lsrs	r2, r3, #15
  407a6a:	f102 0477 	add.w	r4, r2, #119	; 0x77
  407a6e:	0060      	lsls	r0, r4, #1
  407a70:	e794      	b.n	40799c <_free_r+0xb0>
  407a72:	f240 5054 	movw	r0, #1364	; 0x554
  407a76:	4282      	cmp	r2, r0
  407a78:	d804      	bhi.n	407a84 <_free_r+0x198>
  407a7a:	0c9a      	lsrs	r2, r3, #18
  407a7c:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  407a80:	0060      	lsls	r0, r4, #1
  407a82:	e78b      	b.n	40799c <_free_r+0xb0>
  407a84:	20fc      	movs	r0, #252	; 0xfc
  407a86:	247e      	movs	r4, #126	; 0x7e
  407a88:	e788      	b.n	40799c <_free_r+0xb0>
  407a8a:	bf00      	nop
  407a8c:	204004a0 	.word	0x204004a0
  407a90:	204004a8 	.word	0x204004a8
  407a94:	204008a8 	.word	0x204008a8
  407a98:	2040c294 	.word	0x2040c294

00407a9c <__sfvwrite_r>:
  407a9c:	6893      	ldr	r3, [r2, #8]
  407a9e:	2b00      	cmp	r3, #0
  407aa0:	d07a      	beq.n	407b98 <__sfvwrite_r+0xfc>
  407aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407aa6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  407aaa:	b083      	sub	sp, #12
  407aac:	460c      	mov	r4, r1
  407aae:	4681      	mov	r9, r0
  407ab0:	f01e 0f08 	tst.w	lr, #8
  407ab4:	4616      	mov	r6, r2
  407ab6:	d026      	beq.n	407b06 <__sfvwrite_r+0x6a>
  407ab8:	690b      	ldr	r3, [r1, #16]
  407aba:	b323      	cbz	r3, 407b06 <__sfvwrite_r+0x6a>
  407abc:	f00e 0802 	and.w	r8, lr, #2
  407ac0:	6835      	ldr	r5, [r6, #0]
  407ac2:	fa1f f088 	uxth.w	r0, r8
  407ac6:	b370      	cbz	r0, 407b26 <__sfvwrite_r+0x8a>
  407ac8:	f04f 0a00 	mov.w	sl, #0
  407acc:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 407dbc <__sfvwrite_r+0x320>
  407ad0:	46d0      	mov	r8, sl
  407ad2:	45d8      	cmp	r8, fp
  407ad4:	4643      	mov	r3, r8
  407ad6:	4652      	mov	r2, sl
  407ad8:	4648      	mov	r0, r9
  407ada:	bf28      	it	cs
  407adc:	465b      	movcs	r3, fp
  407ade:	f1b8 0f00 	cmp.w	r8, #0
  407ae2:	d053      	beq.n	407b8c <__sfvwrite_r+0xf0>
  407ae4:	69e1      	ldr	r1, [r4, #28]
  407ae6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407ae8:	47b8      	blx	r7
  407aea:	2800      	cmp	r0, #0
  407aec:	dd73      	ble.n	407bd6 <__sfvwrite_r+0x13a>
  407aee:	68b3      	ldr	r3, [r6, #8]
  407af0:	4482      	add	sl, r0
  407af2:	ebc0 0808 	rsb	r8, r0, r8
  407af6:	1a18      	subs	r0, r3, r0
  407af8:	60b0      	str	r0, [r6, #8]
  407afa:	2800      	cmp	r0, #0
  407afc:	d1e9      	bne.n	407ad2 <__sfvwrite_r+0x36>
  407afe:	2000      	movs	r0, #0
  407b00:	b003      	add	sp, #12
  407b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b06:	4648      	mov	r0, r9
  407b08:	4621      	mov	r1, r4
  407b0a:	f7fe fc4b 	bl	4063a4 <__swsetup_r>
  407b0e:	2800      	cmp	r0, #0
  407b10:	f040 814c 	bne.w	407dac <__sfvwrite_r+0x310>
  407b14:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  407b18:	6835      	ldr	r5, [r6, #0]
  407b1a:	f00e 0802 	and.w	r8, lr, #2
  407b1e:	fa1f f088 	uxth.w	r0, r8
  407b22:	2800      	cmp	r0, #0
  407b24:	d1d0      	bne.n	407ac8 <__sfvwrite_r+0x2c>
  407b26:	f01e 0b01 	ands.w	fp, lr, #1
  407b2a:	d15d      	bne.n	407be8 <__sfvwrite_r+0x14c>
  407b2c:	46d8      	mov	r8, fp
  407b2e:	f1b8 0f00 	cmp.w	r8, #0
  407b32:	d025      	beq.n	407b80 <__sfvwrite_r+0xe4>
  407b34:	f41e 7f00 	tst.w	lr, #512	; 0x200
  407b38:	68a7      	ldr	r7, [r4, #8]
  407b3a:	d02f      	beq.n	407b9c <__sfvwrite_r+0x100>
  407b3c:	45b8      	cmp	r8, r7
  407b3e:	46ba      	mov	sl, r7
  407b40:	f0c0 80a8 	bcc.w	407c94 <__sfvwrite_r+0x1f8>
  407b44:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  407b48:	f040 80b5 	bne.w	407cb6 <__sfvwrite_r+0x21a>
  407b4c:	6820      	ldr	r0, [r4, #0]
  407b4e:	4659      	mov	r1, fp
  407b50:	4652      	mov	r2, sl
  407b52:	f000 fcd1 	bl	4084f8 <memmove>
  407b56:	68a2      	ldr	r2, [r4, #8]
  407b58:	6821      	ldr	r1, [r4, #0]
  407b5a:	4640      	mov	r0, r8
  407b5c:	1bd7      	subs	r7, r2, r7
  407b5e:	eb01 030a 	add.w	r3, r1, sl
  407b62:	60a7      	str	r7, [r4, #8]
  407b64:	6023      	str	r3, [r4, #0]
  407b66:	68b3      	ldr	r3, [r6, #8]
  407b68:	4483      	add	fp, r0
  407b6a:	ebc0 0808 	rsb	r8, r0, r8
  407b6e:	1a18      	subs	r0, r3, r0
  407b70:	60b0      	str	r0, [r6, #8]
  407b72:	2800      	cmp	r0, #0
  407b74:	d0c3      	beq.n	407afe <__sfvwrite_r+0x62>
  407b76:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  407b7a:	f1b8 0f00 	cmp.w	r8, #0
  407b7e:	d1d9      	bne.n	407b34 <__sfvwrite_r+0x98>
  407b80:	f8d5 b000 	ldr.w	fp, [r5]
  407b84:	3508      	adds	r5, #8
  407b86:	f855 8c04 	ldr.w	r8, [r5, #-4]
  407b8a:	e7d0      	b.n	407b2e <__sfvwrite_r+0x92>
  407b8c:	f8d5 a000 	ldr.w	sl, [r5]
  407b90:	3508      	adds	r5, #8
  407b92:	f855 8c04 	ldr.w	r8, [r5, #-4]
  407b96:	e79c      	b.n	407ad2 <__sfvwrite_r+0x36>
  407b98:	2000      	movs	r0, #0
  407b9a:	4770      	bx	lr
  407b9c:	6820      	ldr	r0, [r4, #0]
  407b9e:	6923      	ldr	r3, [r4, #16]
  407ba0:	4298      	cmp	r0, r3
  407ba2:	d803      	bhi.n	407bac <__sfvwrite_r+0x110>
  407ba4:	6963      	ldr	r3, [r4, #20]
  407ba6:	4598      	cmp	r8, r3
  407ba8:	f080 80bf 	bcs.w	407d2a <__sfvwrite_r+0x28e>
  407bac:	4547      	cmp	r7, r8
  407bae:	4659      	mov	r1, fp
  407bb0:	bf28      	it	cs
  407bb2:	4647      	movcs	r7, r8
  407bb4:	463a      	mov	r2, r7
  407bb6:	f000 fc9f 	bl	4084f8 <memmove>
  407bba:	68a3      	ldr	r3, [r4, #8]
  407bbc:	6822      	ldr	r2, [r4, #0]
  407bbe:	1bdb      	subs	r3, r3, r7
  407bc0:	443a      	add	r2, r7
  407bc2:	60a3      	str	r3, [r4, #8]
  407bc4:	6022      	str	r2, [r4, #0]
  407bc6:	2b00      	cmp	r3, #0
  407bc8:	d149      	bne.n	407c5e <__sfvwrite_r+0x1c2>
  407bca:	4648      	mov	r0, r9
  407bcc:	4621      	mov	r1, r4
  407bce:	f7ff fd1b 	bl	407608 <_fflush_r>
  407bd2:	2800      	cmp	r0, #0
  407bd4:	d043      	beq.n	407c5e <__sfvwrite_r+0x1c2>
  407bd6:	89a3      	ldrh	r3, [r4, #12]
  407bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407bdc:	f04f 30ff 	mov.w	r0, #4294967295
  407be0:	81a3      	strh	r3, [r4, #12]
  407be2:	b003      	add	sp, #12
  407be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be8:	4680      	mov	r8, r0
  407bea:	4683      	mov	fp, r0
  407bec:	4682      	mov	sl, r0
  407bee:	9000      	str	r0, [sp, #0]
  407bf0:	f1ba 0f00 	cmp.w	sl, #0
  407bf4:	d02b      	beq.n	407c4e <__sfvwrite_r+0x1b2>
  407bf6:	9b00      	ldr	r3, [sp, #0]
  407bf8:	2b00      	cmp	r3, #0
  407bfa:	d04f      	beq.n	407c9c <__sfvwrite_r+0x200>
  407bfc:	45d0      	cmp	r8, sl
  407bfe:	6962      	ldr	r2, [r4, #20]
  407c00:	68a1      	ldr	r1, [r4, #8]
  407c02:	4643      	mov	r3, r8
  407c04:	bf28      	it	cs
  407c06:	4653      	movcs	r3, sl
  407c08:	6820      	ldr	r0, [r4, #0]
  407c0a:	eb02 0c01 	add.w	ip, r2, r1
  407c0e:	461f      	mov	r7, r3
  407c10:	4563      	cmp	r3, ip
  407c12:	dd03      	ble.n	407c1c <__sfvwrite_r+0x180>
  407c14:	6921      	ldr	r1, [r4, #16]
  407c16:	4288      	cmp	r0, r1
  407c18:	f200 8099 	bhi.w	407d4e <__sfvwrite_r+0x2b2>
  407c1c:	4293      	cmp	r3, r2
  407c1e:	db20      	blt.n	407c62 <__sfvwrite_r+0x1c6>
  407c20:	4613      	mov	r3, r2
  407c22:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407c24:	4648      	mov	r0, r9
  407c26:	69e1      	ldr	r1, [r4, #28]
  407c28:	465a      	mov	r2, fp
  407c2a:	47b8      	blx	r7
  407c2c:	1e07      	subs	r7, r0, #0
  407c2e:	ddd2      	ble.n	407bd6 <__sfvwrite_r+0x13a>
  407c30:	ebb8 0807 	subs.w	r8, r8, r7
  407c34:	d025      	beq.n	407c82 <__sfvwrite_r+0x1e6>
  407c36:	68b3      	ldr	r3, [r6, #8]
  407c38:	44bb      	add	fp, r7
  407c3a:	ebc7 0a0a 	rsb	sl, r7, sl
  407c3e:	1bdf      	subs	r7, r3, r7
  407c40:	60b7      	str	r7, [r6, #8]
  407c42:	2f00      	cmp	r7, #0
  407c44:	f43f af5b 	beq.w	407afe <__sfvwrite_r+0x62>
  407c48:	f1ba 0f00 	cmp.w	sl, #0
  407c4c:	d1d3      	bne.n	407bf6 <__sfvwrite_r+0x15a>
  407c4e:	2300      	movs	r3, #0
  407c50:	f8d5 b000 	ldr.w	fp, [r5]
  407c54:	f8d5 a004 	ldr.w	sl, [r5, #4]
  407c58:	3508      	adds	r5, #8
  407c5a:	9300      	str	r3, [sp, #0]
  407c5c:	e7c8      	b.n	407bf0 <__sfvwrite_r+0x154>
  407c5e:	4638      	mov	r0, r7
  407c60:	e781      	b.n	407b66 <__sfvwrite_r+0xca>
  407c62:	461a      	mov	r2, r3
  407c64:	4659      	mov	r1, fp
  407c66:	9301      	str	r3, [sp, #4]
  407c68:	f000 fc46 	bl	4084f8 <memmove>
  407c6c:	68a2      	ldr	r2, [r4, #8]
  407c6e:	ebb8 0807 	subs.w	r8, r8, r7
  407c72:	6821      	ldr	r1, [r4, #0]
  407c74:	9b01      	ldr	r3, [sp, #4]
  407c76:	eba2 0203 	sub.w	r2, r2, r3
  407c7a:	440b      	add	r3, r1
  407c7c:	60a2      	str	r2, [r4, #8]
  407c7e:	6023      	str	r3, [r4, #0]
  407c80:	d1d9      	bne.n	407c36 <__sfvwrite_r+0x19a>
  407c82:	4648      	mov	r0, r9
  407c84:	4621      	mov	r1, r4
  407c86:	f7ff fcbf 	bl	407608 <_fflush_r>
  407c8a:	2800      	cmp	r0, #0
  407c8c:	d1a3      	bne.n	407bd6 <__sfvwrite_r+0x13a>
  407c8e:	f8cd 8000 	str.w	r8, [sp]
  407c92:	e7d0      	b.n	407c36 <__sfvwrite_r+0x19a>
  407c94:	4647      	mov	r7, r8
  407c96:	6820      	ldr	r0, [r4, #0]
  407c98:	46c2      	mov	sl, r8
  407c9a:	e758      	b.n	407b4e <__sfvwrite_r+0xb2>
  407c9c:	4658      	mov	r0, fp
  407c9e:	210a      	movs	r1, #10
  407ca0:	4652      	mov	r2, sl
  407ca2:	f000 fbe1 	bl	408468 <memchr>
  407ca6:	2800      	cmp	r0, #0
  407ca8:	d07b      	beq.n	407da2 <__sfvwrite_r+0x306>
  407caa:	3001      	adds	r0, #1
  407cac:	2301      	movs	r3, #1
  407cae:	ebcb 0800 	rsb	r8, fp, r0
  407cb2:	9300      	str	r3, [sp, #0]
  407cb4:	e7a2      	b.n	407bfc <__sfvwrite_r+0x160>
  407cb6:	6963      	ldr	r3, [r4, #20]
  407cb8:	6921      	ldr	r1, [r4, #16]
  407cba:	6827      	ldr	r7, [r4, #0]
  407cbc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  407cc0:	1a7f      	subs	r7, r7, r1
  407cc2:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  407cc6:	1c7b      	adds	r3, r7, #1
  407cc8:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  407ccc:	4443      	add	r3, r8
  407cce:	4662      	mov	r2, ip
  407cd0:	459c      	cmp	ip, r3
  407cd2:	d201      	bcs.n	407cd8 <__sfvwrite_r+0x23c>
  407cd4:	469c      	mov	ip, r3
  407cd6:	461a      	mov	r2, r3
  407cd8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  407cdc:	f8cd c000 	str.w	ip, [sp]
  407ce0:	d04b      	beq.n	407d7a <__sfvwrite_r+0x2de>
  407ce2:	4611      	mov	r1, r2
  407ce4:	4648      	mov	r0, r9
  407ce6:	f000 f913 	bl	407f10 <_malloc_r>
  407cea:	f8dd c000 	ldr.w	ip, [sp]
  407cee:	4682      	mov	sl, r0
  407cf0:	2800      	cmp	r0, #0
  407cf2:	d05e      	beq.n	407db2 <__sfvwrite_r+0x316>
  407cf4:	463a      	mov	r2, r7
  407cf6:	6921      	ldr	r1, [r4, #16]
  407cf8:	f8cd c000 	str.w	ip, [sp]
  407cfc:	f7fc f916 	bl	403f2c <memcpy>
  407d00:	89a2      	ldrh	r2, [r4, #12]
  407d02:	f8dd c000 	ldr.w	ip, [sp]
  407d06:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407d0e:	81a2      	strh	r2, [r4, #12]
  407d10:	eb0a 0007 	add.w	r0, sl, r7
  407d14:	ebc7 020c 	rsb	r2, r7, ip
  407d18:	f8c4 a010 	str.w	sl, [r4, #16]
  407d1c:	4647      	mov	r7, r8
  407d1e:	6020      	str	r0, [r4, #0]
  407d20:	46c2      	mov	sl, r8
  407d22:	60a2      	str	r2, [r4, #8]
  407d24:	f8c4 c014 	str.w	ip, [r4, #20]
  407d28:	e711      	b.n	407b4e <__sfvwrite_r+0xb2>
  407d2a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  407d2e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407d30:	4648      	mov	r0, r9
  407d32:	69e1      	ldr	r1, [r4, #28]
  407d34:	45c6      	cmp	lr, r8
  407d36:	465a      	mov	r2, fp
  407d38:	bf28      	it	cs
  407d3a:	46c6      	movcs	lr, r8
  407d3c:	fb9e fef3 	sdiv	lr, lr, r3
  407d40:	fb0e f303 	mul.w	r3, lr, r3
  407d44:	47b8      	blx	r7
  407d46:	2800      	cmp	r0, #0
  407d48:	f73f af0d 	bgt.w	407b66 <__sfvwrite_r+0xca>
  407d4c:	e743      	b.n	407bd6 <__sfvwrite_r+0x13a>
  407d4e:	4662      	mov	r2, ip
  407d50:	4659      	mov	r1, fp
  407d52:	f8cd c004 	str.w	ip, [sp, #4]
  407d56:	f000 fbcf 	bl	4084f8 <memmove>
  407d5a:	6823      	ldr	r3, [r4, #0]
  407d5c:	4648      	mov	r0, r9
  407d5e:	f8dd c004 	ldr.w	ip, [sp, #4]
  407d62:	4621      	mov	r1, r4
  407d64:	4463      	add	r3, ip
  407d66:	6023      	str	r3, [r4, #0]
  407d68:	f7ff fc4e 	bl	407608 <_fflush_r>
  407d6c:	f8dd c004 	ldr.w	ip, [sp, #4]
  407d70:	2800      	cmp	r0, #0
  407d72:	f47f af30 	bne.w	407bd6 <__sfvwrite_r+0x13a>
  407d76:	4667      	mov	r7, ip
  407d78:	e75a      	b.n	407c30 <__sfvwrite_r+0x194>
  407d7a:	4648      	mov	r0, r9
  407d7c:	f000 ff2e 	bl	408bdc <_realloc_r>
  407d80:	f8dd c000 	ldr.w	ip, [sp]
  407d84:	4682      	mov	sl, r0
  407d86:	2800      	cmp	r0, #0
  407d88:	d1c2      	bne.n	407d10 <__sfvwrite_r+0x274>
  407d8a:	4648      	mov	r0, r9
  407d8c:	6921      	ldr	r1, [r4, #16]
  407d8e:	f7ff fdad 	bl	4078ec <_free_r>
  407d92:	89a3      	ldrh	r3, [r4, #12]
  407d94:	220c      	movs	r2, #12
  407d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407d9a:	f8c9 2000 	str.w	r2, [r9]
  407d9e:	b29b      	uxth	r3, r3
  407da0:	e71a      	b.n	407bd8 <__sfvwrite_r+0x13c>
  407da2:	2301      	movs	r3, #1
  407da4:	f10a 0801 	add.w	r8, sl, #1
  407da8:	9300      	str	r3, [sp, #0]
  407daa:	e727      	b.n	407bfc <__sfvwrite_r+0x160>
  407dac:	f04f 30ff 	mov.w	r0, #4294967295
  407db0:	e6a6      	b.n	407b00 <__sfvwrite_r+0x64>
  407db2:	220c      	movs	r2, #12
  407db4:	89a3      	ldrh	r3, [r4, #12]
  407db6:	f8c9 2000 	str.w	r2, [r9]
  407dba:	e70d      	b.n	407bd8 <__sfvwrite_r+0x13c>
  407dbc:	7ffffc00 	.word	0x7ffffc00

00407dc0 <_fwalk_reent>:
  407dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407dc4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407dc8:	d01e      	beq.n	407e08 <_fwalk_reent+0x48>
  407dca:	4688      	mov	r8, r1
  407dcc:	4606      	mov	r6, r0
  407dce:	f04f 0900 	mov.w	r9, #0
  407dd2:	687d      	ldr	r5, [r7, #4]
  407dd4:	68bc      	ldr	r4, [r7, #8]
  407dd6:	3d01      	subs	r5, #1
  407dd8:	d410      	bmi.n	407dfc <_fwalk_reent+0x3c>
  407dda:	89a3      	ldrh	r3, [r4, #12]
  407ddc:	3d01      	subs	r5, #1
  407dde:	2b01      	cmp	r3, #1
  407de0:	d908      	bls.n	407df4 <_fwalk_reent+0x34>
  407de2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407de6:	4621      	mov	r1, r4
  407de8:	4630      	mov	r0, r6
  407dea:	3301      	adds	r3, #1
  407dec:	d002      	beq.n	407df4 <_fwalk_reent+0x34>
  407dee:	47c0      	blx	r8
  407df0:	ea49 0900 	orr.w	r9, r9, r0
  407df4:	1c6b      	adds	r3, r5, #1
  407df6:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407dfa:	d1ee      	bne.n	407dda <_fwalk_reent+0x1a>
  407dfc:	683f      	ldr	r7, [r7, #0]
  407dfe:	2f00      	cmp	r7, #0
  407e00:	d1e7      	bne.n	407dd2 <_fwalk_reent+0x12>
  407e02:	4648      	mov	r0, r9
  407e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407e08:	46b9      	mov	r9, r7
  407e0a:	4648      	mov	r0, r9
  407e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407e10 <__locale_charset>:
  407e10:	4800      	ldr	r0, [pc, #0]	; (407e14 <__locale_charset+0x4>)
  407e12:	4770      	bx	lr
  407e14:	2040047c 	.word	0x2040047c

00407e18 <__locale_mb_cur_max>:
  407e18:	4b01      	ldr	r3, [pc, #4]	; (407e20 <__locale_mb_cur_max+0x8>)
  407e1a:	6818      	ldr	r0, [r3, #0]
  407e1c:	4770      	bx	lr
  407e1e:	bf00      	nop
  407e20:	2040049c 	.word	0x2040049c

00407e24 <_localeconv_r>:
  407e24:	4800      	ldr	r0, [pc, #0]	; (407e28 <_localeconv_r+0x4>)
  407e26:	4770      	bx	lr
  407e28:	20400444 	.word	0x20400444

00407e2c <__smakebuf_r>:
  407e2c:	898b      	ldrh	r3, [r1, #12]
  407e2e:	b29a      	uxth	r2, r3
  407e30:	f012 0f02 	tst.w	r2, #2
  407e34:	d13d      	bne.n	407eb2 <__smakebuf_r+0x86>
  407e36:	b5f0      	push	{r4, r5, r6, r7, lr}
  407e38:	460c      	mov	r4, r1
  407e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407e3e:	b091      	sub	sp, #68	; 0x44
  407e40:	4605      	mov	r5, r0
  407e42:	2900      	cmp	r1, #0
  407e44:	db19      	blt.n	407e7a <__smakebuf_r+0x4e>
  407e46:	aa01      	add	r2, sp, #4
  407e48:	f001 fb5e 	bl	409508 <_fstat_r>
  407e4c:	2800      	cmp	r0, #0
  407e4e:	db12      	blt.n	407e76 <__smakebuf_r+0x4a>
  407e50:	9b02      	ldr	r3, [sp, #8]
  407e52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  407e56:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  407e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  407e5e:	fab7 f787 	clz	r7, r7
  407e62:	ea4f 1757 	mov.w	r7, r7, lsr #5
  407e66:	d02b      	beq.n	407ec0 <__smakebuf_r+0x94>
  407e68:	89a3      	ldrh	r3, [r4, #12]
  407e6a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407e6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407e72:	81a3      	strh	r3, [r4, #12]
  407e74:	e00c      	b.n	407e90 <__smakebuf_r+0x64>
  407e76:	89a3      	ldrh	r3, [r4, #12]
  407e78:	b29a      	uxth	r2, r3
  407e7a:	f012 0f80 	tst.w	r2, #128	; 0x80
  407e7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407e82:	f04f 0700 	mov.w	r7, #0
  407e86:	bf0c      	ite	eq
  407e88:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  407e8c:	2640      	movne	r6, #64	; 0x40
  407e8e:	81a3      	strh	r3, [r4, #12]
  407e90:	4628      	mov	r0, r5
  407e92:	4631      	mov	r1, r6
  407e94:	f000 f83c 	bl	407f10 <_malloc_r>
  407e98:	89a3      	ldrh	r3, [r4, #12]
  407e9a:	b340      	cbz	r0, 407eee <__smakebuf_r+0xc2>
  407e9c:	4a1a      	ldr	r2, [pc, #104]	; (407f08 <__smakebuf_r+0xdc>)
  407e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407ea2:	63ea      	str	r2, [r5, #60]	; 0x3c
  407ea4:	81a3      	strh	r3, [r4, #12]
  407ea6:	6020      	str	r0, [r4, #0]
  407ea8:	6120      	str	r0, [r4, #16]
  407eaa:	6166      	str	r6, [r4, #20]
  407eac:	b99f      	cbnz	r7, 407ed6 <__smakebuf_r+0xaa>
  407eae:	b011      	add	sp, #68	; 0x44
  407eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407eb2:	f101 0343 	add.w	r3, r1, #67	; 0x43
  407eb6:	2201      	movs	r2, #1
  407eb8:	600b      	str	r3, [r1, #0]
  407eba:	610b      	str	r3, [r1, #16]
  407ebc:	614a      	str	r2, [r1, #20]
  407ebe:	4770      	bx	lr
  407ec0:	4b12      	ldr	r3, [pc, #72]	; (407f0c <__smakebuf_r+0xe0>)
  407ec2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  407ec4:	429a      	cmp	r2, r3
  407ec6:	d1cf      	bne.n	407e68 <__smakebuf_r+0x3c>
  407ec8:	89a3      	ldrh	r3, [r4, #12]
  407eca:	f44f 6680 	mov.w	r6, #1024	; 0x400
  407ece:	4333      	orrs	r3, r6
  407ed0:	64e6      	str	r6, [r4, #76]	; 0x4c
  407ed2:	81a3      	strh	r3, [r4, #12]
  407ed4:	e7dc      	b.n	407e90 <__smakebuf_r+0x64>
  407ed6:	4628      	mov	r0, r5
  407ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407edc:	f001 fb28 	bl	409530 <_isatty_r>
  407ee0:	2800      	cmp	r0, #0
  407ee2:	d0e4      	beq.n	407eae <__smakebuf_r+0x82>
  407ee4:	89a3      	ldrh	r3, [r4, #12]
  407ee6:	f043 0301 	orr.w	r3, r3, #1
  407eea:	81a3      	strh	r3, [r4, #12]
  407eec:	e7df      	b.n	407eae <__smakebuf_r+0x82>
  407eee:	059a      	lsls	r2, r3, #22
  407ef0:	d4dd      	bmi.n	407eae <__smakebuf_r+0x82>
  407ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407ef6:	f043 0302 	orr.w	r3, r3, #2
  407efa:	2101      	movs	r1, #1
  407efc:	81a3      	strh	r3, [r4, #12]
  407efe:	6022      	str	r2, [r4, #0]
  407f00:	6122      	str	r2, [r4, #16]
  407f02:	6161      	str	r1, [r4, #20]
  407f04:	e7d3      	b.n	407eae <__smakebuf_r+0x82>
  407f06:	bf00      	nop
  407f08:	00407635 	.word	0x00407635
  407f0c:	004090e1 	.word	0x004090e1

00407f10 <_malloc_r>:
  407f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f14:	f101 040b 	add.w	r4, r1, #11
  407f18:	b083      	sub	sp, #12
  407f1a:	4605      	mov	r5, r0
  407f1c:	2c16      	cmp	r4, #22
  407f1e:	d927      	bls.n	407f70 <_malloc_r+0x60>
  407f20:	f034 0407 	bics.w	r4, r4, #7
  407f24:	d42a      	bmi.n	407f7c <_malloc_r+0x6c>
  407f26:	42a1      	cmp	r1, r4
  407f28:	d828      	bhi.n	407f7c <_malloc_r+0x6c>
  407f2a:	f000 fb47 	bl	4085bc <__malloc_lock>
  407f2e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  407f32:	d22b      	bcs.n	407f8c <_malloc_r+0x7c>
  407f34:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  407f38:	4ec0      	ldr	r6, [pc, #768]	; (40823c <_malloc_r+0x32c>)
  407f3a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  407f3e:	68d3      	ldr	r3, [r2, #12]
  407f40:	4293      	cmp	r3, r2
  407f42:	f000 8171 	beq.w	408228 <_malloc_r+0x318>
  407f46:	685a      	ldr	r2, [r3, #4]
  407f48:	f103 0808 	add.w	r8, r3, #8
  407f4c:	68d9      	ldr	r1, [r3, #12]
  407f4e:	4628      	mov	r0, r5
  407f50:	f022 0203 	bic.w	r2, r2, #3
  407f54:	689c      	ldr	r4, [r3, #8]
  407f56:	4413      	add	r3, r2
  407f58:	60e1      	str	r1, [r4, #12]
  407f5a:	608c      	str	r4, [r1, #8]
  407f5c:	685a      	ldr	r2, [r3, #4]
  407f5e:	f042 0201 	orr.w	r2, r2, #1
  407f62:	605a      	str	r2, [r3, #4]
  407f64:	f000 fb2c 	bl	4085c0 <__malloc_unlock>
  407f68:	4640      	mov	r0, r8
  407f6a:	b003      	add	sp, #12
  407f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f70:	2910      	cmp	r1, #16
  407f72:	d803      	bhi.n	407f7c <_malloc_r+0x6c>
  407f74:	f000 fb22 	bl	4085bc <__malloc_lock>
  407f78:	2410      	movs	r4, #16
  407f7a:	e7db      	b.n	407f34 <_malloc_r+0x24>
  407f7c:	f04f 0800 	mov.w	r8, #0
  407f80:	230c      	movs	r3, #12
  407f82:	4640      	mov	r0, r8
  407f84:	602b      	str	r3, [r5, #0]
  407f86:	b003      	add	sp, #12
  407f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f8c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  407f90:	f000 8089 	beq.w	4080a6 <_malloc_r+0x196>
  407f94:	f1bc 0f04 	cmp.w	ip, #4
  407f98:	f200 80c4 	bhi.w	408124 <_malloc_r+0x214>
  407f9c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  407fa0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  407fa4:	ea4f 004c 	mov.w	r0, ip, lsl #1
  407fa8:	4ea4      	ldr	r6, [pc, #656]	; (40823c <_malloc_r+0x32c>)
  407faa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  407fae:	68c3      	ldr	r3, [r0, #12]
  407fb0:	4298      	cmp	r0, r3
  407fb2:	d105      	bne.n	407fc0 <_malloc_r+0xb0>
  407fb4:	e00c      	b.n	407fd0 <_malloc_r+0xc0>
  407fb6:	2900      	cmp	r1, #0
  407fb8:	da79      	bge.n	4080ae <_malloc_r+0x19e>
  407fba:	68db      	ldr	r3, [r3, #12]
  407fbc:	4298      	cmp	r0, r3
  407fbe:	d007      	beq.n	407fd0 <_malloc_r+0xc0>
  407fc0:	685a      	ldr	r2, [r3, #4]
  407fc2:	f022 0203 	bic.w	r2, r2, #3
  407fc6:	1b11      	subs	r1, r2, r4
  407fc8:	290f      	cmp	r1, #15
  407fca:	ddf4      	ble.n	407fb6 <_malloc_r+0xa6>
  407fcc:	f10c 3cff 	add.w	ip, ip, #4294967295
  407fd0:	f10c 0c01 	add.w	ip, ip, #1
  407fd4:	4f99      	ldr	r7, [pc, #612]	; (40823c <_malloc_r+0x32c>)
  407fd6:	6933      	ldr	r3, [r6, #16]
  407fd8:	f107 0e08 	add.w	lr, r7, #8
  407fdc:	4573      	cmp	r3, lr
  407fde:	f000 8119 	beq.w	408214 <_malloc_r+0x304>
  407fe2:	685a      	ldr	r2, [r3, #4]
  407fe4:	f022 0203 	bic.w	r2, r2, #3
  407fe8:	1b11      	subs	r1, r2, r4
  407fea:	290f      	cmp	r1, #15
  407fec:	f300 80ca 	bgt.w	408184 <_malloc_r+0x274>
  407ff0:	2900      	cmp	r1, #0
  407ff2:	f8c7 e014 	str.w	lr, [r7, #20]
  407ff6:	f8c7 e010 	str.w	lr, [r7, #16]
  407ffa:	da6a      	bge.n	4080d2 <_malloc_r+0x1c2>
  407ffc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408000:	f080 809f 	bcs.w	408142 <_malloc_r+0x232>
  408004:	08d2      	lsrs	r2, r2, #3
  408006:	2001      	movs	r0, #1
  408008:	6879      	ldr	r1, [r7, #4]
  40800a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40800e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  408012:	fa00 f008 	lsl.w	r0, r0, r8
  408016:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40801a:	4308      	orrs	r0, r1
  40801c:	60da      	str	r2, [r3, #12]
  40801e:	f8c3 8008 	str.w	r8, [r3, #8]
  408022:	6078      	str	r0, [r7, #4]
  408024:	6093      	str	r3, [r2, #8]
  408026:	f8c8 300c 	str.w	r3, [r8, #12]
  40802a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40802e:	2101      	movs	r1, #1
  408030:	4099      	lsls	r1, r3
  408032:	4281      	cmp	r1, r0
  408034:	d85b      	bhi.n	4080ee <_malloc_r+0x1de>
  408036:	4208      	tst	r0, r1
  408038:	d106      	bne.n	408048 <_malloc_r+0x138>
  40803a:	f02c 0c03 	bic.w	ip, ip, #3
  40803e:	0049      	lsls	r1, r1, #1
  408040:	f10c 0c04 	add.w	ip, ip, #4
  408044:	4208      	tst	r0, r1
  408046:	d0fa      	beq.n	40803e <_malloc_r+0x12e>
  408048:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40804c:	46e1      	mov	r9, ip
  40804e:	4640      	mov	r0, r8
  408050:	68c7      	ldr	r7, [r0, #12]
  408052:	42b8      	cmp	r0, r7
  408054:	d107      	bne.n	408066 <_malloc_r+0x156>
  408056:	e0df      	b.n	408218 <_malloc_r+0x308>
  408058:	2a00      	cmp	r2, #0
  40805a:	f280 80f7 	bge.w	40824c <_malloc_r+0x33c>
  40805e:	68ff      	ldr	r7, [r7, #12]
  408060:	42b8      	cmp	r0, r7
  408062:	f000 80d9 	beq.w	408218 <_malloc_r+0x308>
  408066:	687b      	ldr	r3, [r7, #4]
  408068:	f023 0303 	bic.w	r3, r3, #3
  40806c:	1b1a      	subs	r2, r3, r4
  40806e:	2a0f      	cmp	r2, #15
  408070:	ddf2      	ble.n	408058 <_malloc_r+0x148>
  408072:	46b8      	mov	r8, r7
  408074:	68fb      	ldr	r3, [r7, #12]
  408076:	f044 0901 	orr.w	r9, r4, #1
  40807a:	f042 0c01 	orr.w	ip, r2, #1
  40807e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  408082:	443c      	add	r4, r7
  408084:	f8c7 9004 	str.w	r9, [r7, #4]
  408088:	4628      	mov	r0, r5
  40808a:	60cb      	str	r3, [r1, #12]
  40808c:	6099      	str	r1, [r3, #8]
  40808e:	6174      	str	r4, [r6, #20]
  408090:	6134      	str	r4, [r6, #16]
  408092:	f8c4 e00c 	str.w	lr, [r4, #12]
  408096:	f8c4 e008 	str.w	lr, [r4, #8]
  40809a:	f8c4 c004 	str.w	ip, [r4, #4]
  40809e:	50a2      	str	r2, [r4, r2]
  4080a0:	f000 fa8e 	bl	4085c0 <__malloc_unlock>
  4080a4:	e760      	b.n	407f68 <_malloc_r+0x58>
  4080a6:	207e      	movs	r0, #126	; 0x7e
  4080a8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  4080ac:	e77c      	b.n	407fa8 <_malloc_r+0x98>
  4080ae:	441a      	add	r2, r3
  4080b0:	68dc      	ldr	r4, [r3, #12]
  4080b2:	689e      	ldr	r6, [r3, #8]
  4080b4:	f103 0808 	add.w	r8, r3, #8
  4080b8:	6851      	ldr	r1, [r2, #4]
  4080ba:	4628      	mov	r0, r5
  4080bc:	60f4      	str	r4, [r6, #12]
  4080be:	f041 0301 	orr.w	r3, r1, #1
  4080c2:	60a6      	str	r6, [r4, #8]
  4080c4:	6053      	str	r3, [r2, #4]
  4080c6:	f000 fa7b 	bl	4085c0 <__malloc_unlock>
  4080ca:	4640      	mov	r0, r8
  4080cc:	b003      	add	sp, #12
  4080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080d2:	441a      	add	r2, r3
  4080d4:	f103 0808 	add.w	r8, r3, #8
  4080d8:	4628      	mov	r0, r5
  4080da:	6853      	ldr	r3, [r2, #4]
  4080dc:	f043 0301 	orr.w	r3, r3, #1
  4080e0:	6053      	str	r3, [r2, #4]
  4080e2:	f000 fa6d 	bl	4085c0 <__malloc_unlock>
  4080e6:	4640      	mov	r0, r8
  4080e8:	b003      	add	sp, #12
  4080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080ee:	68b7      	ldr	r7, [r6, #8]
  4080f0:	687a      	ldr	r2, [r7, #4]
  4080f2:	f022 0803 	bic.w	r8, r2, #3
  4080f6:	ebc4 0208 	rsb	r2, r4, r8
  4080fa:	2a0f      	cmp	r2, #15
  4080fc:	dd56      	ble.n	4081ac <_malloc_r+0x29c>
  4080fe:	45a0      	cmp	r8, r4
  408100:	d354      	bcc.n	4081ac <_malloc_r+0x29c>
  408102:	f044 0301 	orr.w	r3, r4, #1
  408106:	f042 0201 	orr.w	r2, r2, #1
  40810a:	443c      	add	r4, r7
  40810c:	f107 0808 	add.w	r8, r7, #8
  408110:	607b      	str	r3, [r7, #4]
  408112:	4628      	mov	r0, r5
  408114:	60b4      	str	r4, [r6, #8]
  408116:	6062      	str	r2, [r4, #4]
  408118:	f000 fa52 	bl	4085c0 <__malloc_unlock>
  40811c:	4640      	mov	r0, r8
  40811e:	b003      	add	sp, #12
  408120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408124:	f1bc 0f14 	cmp.w	ip, #20
  408128:	f240 809f 	bls.w	40826a <_malloc_r+0x35a>
  40812c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  408130:	f200 8127 	bhi.w	408382 <_malloc_r+0x472>
  408134:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  408138:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40813c:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408140:	e732      	b.n	407fa8 <_malloc_r+0x98>
  408142:	0a51      	lsrs	r1, r2, #9
  408144:	2904      	cmp	r1, #4
  408146:	f240 8095 	bls.w	408274 <_malloc_r+0x364>
  40814a:	2914      	cmp	r1, #20
  40814c:	f200 8142 	bhi.w	4083d4 <_malloc_r+0x4c4>
  408150:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  408154:	0078      	lsls	r0, r7, #1
  408156:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40815a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40823c <_malloc_r+0x32c>
  40815e:	6881      	ldr	r1, [r0, #8]
  408160:	4281      	cmp	r1, r0
  408162:	f000 811b 	beq.w	40839c <_malloc_r+0x48c>
  408166:	684f      	ldr	r7, [r1, #4]
  408168:	f027 0703 	bic.w	r7, r7, #3
  40816c:	42ba      	cmp	r2, r7
  40816e:	d202      	bcs.n	408176 <_malloc_r+0x266>
  408170:	6889      	ldr	r1, [r1, #8]
  408172:	4288      	cmp	r0, r1
  408174:	d1f7      	bne.n	408166 <_malloc_r+0x256>
  408176:	68ca      	ldr	r2, [r1, #12]
  408178:	6870      	ldr	r0, [r6, #4]
  40817a:	60da      	str	r2, [r3, #12]
  40817c:	6099      	str	r1, [r3, #8]
  40817e:	6093      	str	r3, [r2, #8]
  408180:	60cb      	str	r3, [r1, #12]
  408182:	e752      	b.n	40802a <_malloc_r+0x11a>
  408184:	f044 0601 	orr.w	r6, r4, #1
  408188:	f041 0201 	orr.w	r2, r1, #1
  40818c:	441c      	add	r4, r3
  40818e:	4628      	mov	r0, r5
  408190:	605e      	str	r6, [r3, #4]
  408192:	f103 0808 	add.w	r8, r3, #8
  408196:	617c      	str	r4, [r7, #20]
  408198:	613c      	str	r4, [r7, #16]
  40819a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40819e:	f8c4 e008 	str.w	lr, [r4, #8]
  4081a2:	6062      	str	r2, [r4, #4]
  4081a4:	5061      	str	r1, [r4, r1]
  4081a6:	f000 fa0b 	bl	4085c0 <__malloc_unlock>
  4081aa:	e6dd      	b.n	407f68 <_malloc_r+0x58>
  4081ac:	4a24      	ldr	r2, [pc, #144]	; (408240 <_malloc_r+0x330>)
  4081ae:	4b25      	ldr	r3, [pc, #148]	; (408244 <_malloc_r+0x334>)
  4081b0:	6811      	ldr	r1, [r2, #0]
  4081b2:	681b      	ldr	r3, [r3, #0]
  4081b4:	3101      	adds	r1, #1
  4081b6:	4423      	add	r3, r4
  4081b8:	f000 8109 	beq.w	4083ce <_malloc_r+0x4be>
  4081bc:	f241 010f 	movw	r1, #4111	; 0x100f
  4081c0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 408248 <_malloc_r+0x338>
  4081c4:	4419      	add	r1, r3
  4081c6:	ea01 0909 	and.w	r9, r1, r9
  4081ca:	4628      	mov	r0, r5
  4081cc:	4649      	mov	r1, r9
  4081ce:	9201      	str	r2, [sp, #4]
  4081d0:	f000 fefc 	bl	408fcc <_sbrk_r>
  4081d4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4081d8:	4682      	mov	sl, r0
  4081da:	9a01      	ldr	r2, [sp, #4]
  4081dc:	f000 8101 	beq.w	4083e2 <_malloc_r+0x4d2>
  4081e0:	1bbb      	subs	r3, r7, r6
  4081e2:	eb07 0108 	add.w	r1, r7, r8
  4081e6:	4815      	ldr	r0, [pc, #84]	; (40823c <_malloc_r+0x32c>)
  4081e8:	bf18      	it	ne
  4081ea:	2301      	movne	r3, #1
  4081ec:	4551      	cmp	r1, sl
  4081ee:	d967      	bls.n	4082c0 <_malloc_r+0x3b0>
  4081f0:	2b00      	cmp	r3, #0
  4081f2:	d065      	beq.n	4082c0 <_malloc_r+0x3b0>
  4081f4:	6887      	ldr	r7, [r0, #8]
  4081f6:	687b      	ldr	r3, [r7, #4]
  4081f8:	f023 0303 	bic.w	r3, r3, #3
  4081fc:	1b1a      	subs	r2, r3, r4
  4081fe:	2a0f      	cmp	r2, #15
  408200:	dd02      	ble.n	408208 <_malloc_r+0x2f8>
  408202:	429c      	cmp	r4, r3
  408204:	f67f af7d 	bls.w	408102 <_malloc_r+0x1f2>
  408208:	4628      	mov	r0, r5
  40820a:	f04f 0800 	mov.w	r8, #0
  40820e:	f000 f9d7 	bl	4085c0 <__malloc_unlock>
  408212:	e6a9      	b.n	407f68 <_malloc_r+0x58>
  408214:	6878      	ldr	r0, [r7, #4]
  408216:	e708      	b.n	40802a <_malloc_r+0x11a>
  408218:	f109 0901 	add.w	r9, r9, #1
  40821c:	3008      	adds	r0, #8
  40821e:	f019 0f03 	tst.w	r9, #3
  408222:	f47f af15 	bne.w	408050 <_malloc_r+0x140>
  408226:	e02f      	b.n	408288 <_malloc_r+0x378>
  408228:	f103 0208 	add.w	r2, r3, #8
  40822c:	695b      	ldr	r3, [r3, #20]
  40822e:	429a      	cmp	r2, r3
  408230:	bf08      	it	eq
  408232:	f10c 0c02 	addeq.w	ip, ip, #2
  408236:	f43f aecd 	beq.w	407fd4 <_malloc_r+0xc4>
  40823a:	e684      	b.n	407f46 <_malloc_r+0x36>
  40823c:	204004a0 	.word	0x204004a0
  408240:	204008ac 	.word	0x204008ac
  408244:	2040c294 	.word	0x2040c294
  408248:	fffff000 	.word	0xfffff000
  40824c:	18fa      	adds	r2, r7, r3
  40824e:	46b8      	mov	r8, r7
  408250:	68f9      	ldr	r1, [r7, #12]
  408252:	4628      	mov	r0, r5
  408254:	6853      	ldr	r3, [r2, #4]
  408256:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40825a:	f043 0301 	orr.w	r3, r3, #1
  40825e:	6053      	str	r3, [r2, #4]
  408260:	60e1      	str	r1, [r4, #12]
  408262:	608c      	str	r4, [r1, #8]
  408264:	f000 f9ac 	bl	4085c0 <__malloc_unlock>
  408268:	e67e      	b.n	407f68 <_malloc_r+0x58>
  40826a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40826e:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408272:	e699      	b.n	407fa8 <_malloc_r+0x98>
  408274:	0991      	lsrs	r1, r2, #6
  408276:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40827a:	0078      	lsls	r0, r7, #1
  40827c:	e76b      	b.n	408156 <_malloc_r+0x246>
  40827e:	f8d8 8000 	ldr.w	r8, [r8]
  408282:	4598      	cmp	r8, r3
  408284:	f040 80e6 	bne.w	408454 <_malloc_r+0x544>
  408288:	f01c 0f03 	tst.w	ip, #3
  40828c:	f1a8 0308 	sub.w	r3, r8, #8
  408290:	f10c 3cff 	add.w	ip, ip, #4294967295
  408294:	d1f3      	bne.n	40827e <_malloc_r+0x36e>
  408296:	6873      	ldr	r3, [r6, #4]
  408298:	ea23 0301 	bic.w	r3, r3, r1
  40829c:	6073      	str	r3, [r6, #4]
  40829e:	0049      	lsls	r1, r1, #1
  4082a0:	4299      	cmp	r1, r3
  4082a2:	f63f af24 	bhi.w	4080ee <_malloc_r+0x1de>
  4082a6:	2900      	cmp	r1, #0
  4082a8:	f43f af21 	beq.w	4080ee <_malloc_r+0x1de>
  4082ac:	420b      	tst	r3, r1
  4082ae:	46cc      	mov	ip, r9
  4082b0:	f47f aeca 	bne.w	408048 <_malloc_r+0x138>
  4082b4:	0049      	lsls	r1, r1, #1
  4082b6:	f10c 0c04 	add.w	ip, ip, #4
  4082ba:	420b      	tst	r3, r1
  4082bc:	d0fa      	beq.n	4082b4 <_malloc_r+0x3a4>
  4082be:	e6c3      	b.n	408048 <_malloc_r+0x138>
  4082c0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 408460 <_malloc_r+0x550>
  4082c4:	4551      	cmp	r1, sl
  4082c6:	f8db 0000 	ldr.w	r0, [fp]
  4082ca:	4448      	add	r0, r9
  4082cc:	f8cb 0000 	str.w	r0, [fp]
  4082d0:	f000 808c 	beq.w	4083ec <_malloc_r+0x4dc>
  4082d4:	6812      	ldr	r2, [r2, #0]
  4082d6:	f8df e18c 	ldr.w	lr, [pc, #396]	; 408464 <_malloc_r+0x554>
  4082da:	3201      	adds	r2, #1
  4082dc:	f000 80a3 	beq.w	408426 <_malloc_r+0x516>
  4082e0:	ebc1 010a 	rsb	r1, r1, sl
  4082e4:	4408      	add	r0, r1
  4082e6:	f8cb 0000 	str.w	r0, [fp]
  4082ea:	f01a 0107 	ands.w	r1, sl, #7
  4082ee:	d052      	beq.n	408396 <_malloc_r+0x486>
  4082f0:	f1c1 0008 	rsb	r0, r1, #8
  4082f4:	f241 0208 	movw	r2, #4104	; 0x1008
  4082f8:	4482      	add	sl, r0
  4082fa:	1a52      	subs	r2, r2, r1
  4082fc:	eb0a 0109 	add.w	r1, sl, r9
  408300:	4628      	mov	r0, r5
  408302:	9301      	str	r3, [sp, #4]
  408304:	f3c1 010b 	ubfx	r1, r1, #0, #12
  408308:	ebc1 0902 	rsb	r9, r1, r2
  40830c:	4649      	mov	r1, r9
  40830e:	f000 fe5d 	bl	408fcc <_sbrk_r>
  408312:	1c43      	adds	r3, r0, #1
  408314:	9b01      	ldr	r3, [sp, #4]
  408316:	d07a      	beq.n	40840e <_malloc_r+0x4fe>
  408318:	ebca 0200 	rsb	r2, sl, r0
  40831c:	444a      	add	r2, r9
  40831e:	f042 0201 	orr.w	r2, r2, #1
  408322:	f8db 0000 	ldr.w	r0, [fp]
  408326:	f8c6 a008 	str.w	sl, [r6, #8]
  40832a:	4448      	add	r0, r9
  40832c:	f8ca 2004 	str.w	r2, [sl, #4]
  408330:	f8df 912c 	ldr.w	r9, [pc, #300]	; 408460 <_malloc_r+0x550>
  408334:	f8cb 0000 	str.w	r0, [fp]
  408338:	b1a3      	cbz	r3, 408364 <_malloc_r+0x454>
  40833a:	f1b8 0f0f 	cmp.w	r8, #15
  40833e:	d937      	bls.n	4083b0 <_malloc_r+0x4a0>
  408340:	687b      	ldr	r3, [r7, #4]
  408342:	f1a8 020c 	sub.w	r2, r8, #12
  408346:	f04f 0e05 	mov.w	lr, #5
  40834a:	f022 0207 	bic.w	r2, r2, #7
  40834e:	f003 0301 	and.w	r3, r3, #1
  408352:	18b9      	adds	r1, r7, r2
  408354:	4313      	orrs	r3, r2
  408356:	2a0f      	cmp	r2, #15
  408358:	607b      	str	r3, [r7, #4]
  40835a:	f8c1 e004 	str.w	lr, [r1, #4]
  40835e:	f8c1 e008 	str.w	lr, [r1, #8]
  408362:	d858      	bhi.n	408416 <_malloc_r+0x506>
  408364:	4b3c      	ldr	r3, [pc, #240]	; (408458 <_malloc_r+0x548>)
  408366:	681a      	ldr	r2, [r3, #0]
  408368:	4290      	cmp	r0, r2
  40836a:	d900      	bls.n	40836e <_malloc_r+0x45e>
  40836c:	6018      	str	r0, [r3, #0]
  40836e:	4b3b      	ldr	r3, [pc, #236]	; (40845c <_malloc_r+0x54c>)
  408370:	68b7      	ldr	r7, [r6, #8]
  408372:	681a      	ldr	r2, [r3, #0]
  408374:	4290      	cmp	r0, r2
  408376:	d900      	bls.n	40837a <_malloc_r+0x46a>
  408378:	6018      	str	r0, [r3, #0]
  40837a:	687b      	ldr	r3, [r7, #4]
  40837c:	f023 0303 	bic.w	r3, r3, #3
  408380:	e73c      	b.n	4081fc <_malloc_r+0x2ec>
  408382:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  408386:	d817      	bhi.n	4083b8 <_malloc_r+0x4a8>
  408388:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40838c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  408390:	ea4f 004c 	mov.w	r0, ip, lsl #1
  408394:	e608      	b.n	407fa8 <_malloc_r+0x98>
  408396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40839a:	e7af      	b.n	4082fc <_malloc_r+0x3ec>
  40839c:	10bf      	asrs	r7, r7, #2
  40839e:	2001      	movs	r0, #1
  4083a0:	460a      	mov	r2, r1
  4083a2:	40b8      	lsls	r0, r7
  4083a4:	f8d9 7004 	ldr.w	r7, [r9, #4]
  4083a8:	4338      	orrs	r0, r7
  4083aa:	f8c9 0004 	str.w	r0, [r9, #4]
  4083ae:	e6e4      	b.n	40817a <_malloc_r+0x26a>
  4083b0:	2301      	movs	r3, #1
  4083b2:	f8ca 3004 	str.w	r3, [sl, #4]
  4083b6:	e727      	b.n	408208 <_malloc_r+0x2f8>
  4083b8:	f240 5354 	movw	r3, #1364	; 0x554
  4083bc:	459c      	cmp	ip, r3
  4083be:	d822      	bhi.n	408406 <_malloc_r+0x4f6>
  4083c0:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  4083c4:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  4083c8:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4083cc:	e5ec      	b.n	407fa8 <_malloc_r+0x98>
  4083ce:	f103 0910 	add.w	r9, r3, #16
  4083d2:	e6fa      	b.n	4081ca <_malloc_r+0x2ba>
  4083d4:	2954      	cmp	r1, #84	; 0x54
  4083d6:	d829      	bhi.n	40842c <_malloc_r+0x51c>
  4083d8:	0b11      	lsrs	r1, r2, #12
  4083da:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  4083de:	0078      	lsls	r0, r7, #1
  4083e0:	e6b9      	b.n	408156 <_malloc_r+0x246>
  4083e2:	68b7      	ldr	r7, [r6, #8]
  4083e4:	687b      	ldr	r3, [r7, #4]
  4083e6:	f023 0303 	bic.w	r3, r3, #3
  4083ea:	e707      	b.n	4081fc <_malloc_r+0x2ec>
  4083ec:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  4083f0:	f1be 0f00 	cmp.w	lr, #0
  4083f4:	f47f af6e 	bne.w	4082d4 <_malloc_r+0x3c4>
  4083f8:	eb09 0308 	add.w	r3, r9, r8
  4083fc:	68b2      	ldr	r2, [r6, #8]
  4083fe:	f043 0301 	orr.w	r3, r3, #1
  408402:	6053      	str	r3, [r2, #4]
  408404:	e7ae      	b.n	408364 <_malloc_r+0x454>
  408406:	20fc      	movs	r0, #252	; 0xfc
  408408:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40840c:	e5cc      	b.n	407fa8 <_malloc_r+0x98>
  40840e:	2201      	movs	r2, #1
  408410:	f04f 0900 	mov.w	r9, #0
  408414:	e785      	b.n	408322 <_malloc_r+0x412>
  408416:	4628      	mov	r0, r5
  408418:	f107 0108 	add.w	r1, r7, #8
  40841c:	f7ff fa66 	bl	4078ec <_free_r>
  408420:	f8d9 0000 	ldr.w	r0, [r9]
  408424:	e79e      	b.n	408364 <_malloc_r+0x454>
  408426:	f8ce a000 	str.w	sl, [lr]
  40842a:	e75e      	b.n	4082ea <_malloc_r+0x3da>
  40842c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  408430:	d804      	bhi.n	40843c <_malloc_r+0x52c>
  408432:	0bd1      	lsrs	r1, r2, #15
  408434:	f101 0777 	add.w	r7, r1, #119	; 0x77
  408438:	0078      	lsls	r0, r7, #1
  40843a:	e68c      	b.n	408156 <_malloc_r+0x246>
  40843c:	f240 5054 	movw	r0, #1364	; 0x554
  408440:	4281      	cmp	r1, r0
  408442:	d804      	bhi.n	40844e <_malloc_r+0x53e>
  408444:	0c91      	lsrs	r1, r2, #18
  408446:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40844a:	0078      	lsls	r0, r7, #1
  40844c:	e683      	b.n	408156 <_malloc_r+0x246>
  40844e:	20fc      	movs	r0, #252	; 0xfc
  408450:	277e      	movs	r7, #126	; 0x7e
  408452:	e680      	b.n	408156 <_malloc_r+0x246>
  408454:	6873      	ldr	r3, [r6, #4]
  408456:	e722      	b.n	40829e <_malloc_r+0x38e>
  408458:	2040c290 	.word	0x2040c290
  40845c:	2040c28c 	.word	0x2040c28c
  408460:	2040c298 	.word	0x2040c298
  408464:	204008ac 	.word	0x204008ac

00408468 <memchr>:
  408468:	0783      	lsls	r3, r0, #30
  40846a:	b2c9      	uxtb	r1, r1
  40846c:	b470      	push	{r4, r5, r6}
  40846e:	d03f      	beq.n	4084f0 <memchr+0x88>
  408470:	1e54      	subs	r4, r2, #1
  408472:	2a00      	cmp	r2, #0
  408474:	d03e      	beq.n	4084f4 <memchr+0x8c>
  408476:	7803      	ldrb	r3, [r0, #0]
  408478:	428b      	cmp	r3, r1
  40847a:	bf18      	it	ne
  40847c:	1c43      	addne	r3, r0, #1
  40847e:	d105      	bne.n	40848c <memchr+0x24>
  408480:	e01c      	b.n	4084bc <memchr+0x54>
  408482:	b1ec      	cbz	r4, 4084c0 <memchr+0x58>
  408484:	7802      	ldrb	r2, [r0, #0]
  408486:	3c01      	subs	r4, #1
  408488:	428a      	cmp	r2, r1
  40848a:	d017      	beq.n	4084bc <memchr+0x54>
  40848c:	f013 0f03 	tst.w	r3, #3
  408490:	4618      	mov	r0, r3
  408492:	f103 0301 	add.w	r3, r3, #1
  408496:	d1f4      	bne.n	408482 <memchr+0x1a>
  408498:	2c03      	cmp	r4, #3
  40849a:	d814      	bhi.n	4084c6 <memchr+0x5e>
  40849c:	b184      	cbz	r4, 4084c0 <memchr+0x58>
  40849e:	7803      	ldrb	r3, [r0, #0]
  4084a0:	428b      	cmp	r3, r1
  4084a2:	d00b      	beq.n	4084bc <memchr+0x54>
  4084a4:	1905      	adds	r5, r0, r4
  4084a6:	1c43      	adds	r3, r0, #1
  4084a8:	e002      	b.n	4084b0 <memchr+0x48>
  4084aa:	7802      	ldrb	r2, [r0, #0]
  4084ac:	428a      	cmp	r2, r1
  4084ae:	d005      	beq.n	4084bc <memchr+0x54>
  4084b0:	42ab      	cmp	r3, r5
  4084b2:	4618      	mov	r0, r3
  4084b4:	f103 0301 	add.w	r3, r3, #1
  4084b8:	d1f7      	bne.n	4084aa <memchr+0x42>
  4084ba:	2000      	movs	r0, #0
  4084bc:	bc70      	pop	{r4, r5, r6}
  4084be:	4770      	bx	lr
  4084c0:	4620      	mov	r0, r4
  4084c2:	bc70      	pop	{r4, r5, r6}
  4084c4:	4770      	bx	lr
  4084c6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4084ca:	4602      	mov	r2, r0
  4084cc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4084d0:	4610      	mov	r0, r2
  4084d2:	3204      	adds	r2, #4
  4084d4:	6803      	ldr	r3, [r0, #0]
  4084d6:	4073      	eors	r3, r6
  4084d8:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  4084dc:	ea25 0303 	bic.w	r3, r5, r3
  4084e0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4084e4:	d1da      	bne.n	40849c <memchr+0x34>
  4084e6:	3c04      	subs	r4, #4
  4084e8:	4610      	mov	r0, r2
  4084ea:	2c03      	cmp	r4, #3
  4084ec:	d8f0      	bhi.n	4084d0 <memchr+0x68>
  4084ee:	e7d5      	b.n	40849c <memchr+0x34>
  4084f0:	4614      	mov	r4, r2
  4084f2:	e7d1      	b.n	408498 <memchr+0x30>
  4084f4:	4610      	mov	r0, r2
  4084f6:	e7e1      	b.n	4084bc <memchr+0x54>

004084f8 <memmove>:
  4084f8:	4288      	cmp	r0, r1
  4084fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4084fc:	d90d      	bls.n	40851a <memmove+0x22>
  4084fe:	188b      	adds	r3, r1, r2
  408500:	4298      	cmp	r0, r3
  408502:	d20a      	bcs.n	40851a <memmove+0x22>
  408504:	1881      	adds	r1, r0, r2
  408506:	2a00      	cmp	r2, #0
  408508:	d053      	beq.n	4085b2 <memmove+0xba>
  40850a:	1a9a      	subs	r2, r3, r2
  40850c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408510:	4293      	cmp	r3, r2
  408512:	f801 4d01 	strb.w	r4, [r1, #-1]!
  408516:	d1f9      	bne.n	40850c <memmove+0x14>
  408518:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40851a:	2a0f      	cmp	r2, #15
  40851c:	d947      	bls.n	4085ae <memmove+0xb6>
  40851e:	ea40 0301 	orr.w	r3, r0, r1
  408522:	079b      	lsls	r3, r3, #30
  408524:	d146      	bne.n	4085b4 <memmove+0xbc>
  408526:	f100 0410 	add.w	r4, r0, #16
  40852a:	f101 0310 	add.w	r3, r1, #16
  40852e:	4615      	mov	r5, r2
  408530:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408534:	3d10      	subs	r5, #16
  408536:	3310      	adds	r3, #16
  408538:	3410      	adds	r4, #16
  40853a:	f844 6c20 	str.w	r6, [r4, #-32]
  40853e:	2d0f      	cmp	r5, #15
  408540:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  408544:	f844 6c1c 	str.w	r6, [r4, #-28]
  408548:	f853 6c18 	ldr.w	r6, [r3, #-24]
  40854c:	f844 6c18 	str.w	r6, [r4, #-24]
  408550:	f853 6c14 	ldr.w	r6, [r3, #-20]
  408554:	f844 6c14 	str.w	r6, [r4, #-20]
  408558:	d8ea      	bhi.n	408530 <memmove+0x38>
  40855a:	f1a2 0310 	sub.w	r3, r2, #16
  40855e:	f002 0e0f 	and.w	lr, r2, #15
  408562:	f023 030f 	bic.w	r3, r3, #15
  408566:	f1be 0f03 	cmp.w	lr, #3
  40856a:	f103 0310 	add.w	r3, r3, #16
  40856e:	4419      	add	r1, r3
  408570:	4403      	add	r3, r0
  408572:	d921      	bls.n	4085b8 <memmove+0xc0>
  408574:	1f1e      	subs	r6, r3, #4
  408576:	460d      	mov	r5, r1
  408578:	4674      	mov	r4, lr
  40857a:	3c04      	subs	r4, #4
  40857c:	f855 7b04 	ldr.w	r7, [r5], #4
  408580:	2c03      	cmp	r4, #3
  408582:	f846 7f04 	str.w	r7, [r6, #4]!
  408586:	d8f8      	bhi.n	40857a <memmove+0x82>
  408588:	f1ae 0404 	sub.w	r4, lr, #4
  40858c:	f002 0203 	and.w	r2, r2, #3
  408590:	f024 0403 	bic.w	r4, r4, #3
  408594:	3404      	adds	r4, #4
  408596:	4423      	add	r3, r4
  408598:	4421      	add	r1, r4
  40859a:	b152      	cbz	r2, 4085b2 <memmove+0xba>
  40859c:	3b01      	subs	r3, #1
  40859e:	440a      	add	r2, r1
  4085a0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4085a4:	4291      	cmp	r1, r2
  4085a6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4085aa:	d1f9      	bne.n	4085a0 <memmove+0xa8>
  4085ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4085ae:	4603      	mov	r3, r0
  4085b0:	e7f3      	b.n	40859a <memmove+0xa2>
  4085b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4085b4:	4603      	mov	r3, r0
  4085b6:	e7f1      	b.n	40859c <memmove+0xa4>
  4085b8:	4672      	mov	r2, lr
  4085ba:	e7ee      	b.n	40859a <memmove+0xa2>

004085bc <__malloc_lock>:
  4085bc:	4770      	bx	lr
  4085be:	bf00      	nop

004085c0 <__malloc_unlock>:
  4085c0:	4770      	bx	lr
  4085c2:	bf00      	nop

004085c4 <_Balloc>:
  4085c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4085c6:	b538      	push	{r3, r4, r5, lr}
  4085c8:	4605      	mov	r5, r0
  4085ca:	460c      	mov	r4, r1
  4085cc:	b152      	cbz	r2, 4085e4 <_Balloc+0x20>
  4085ce:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  4085d2:	b18b      	cbz	r3, 4085f8 <_Balloc+0x34>
  4085d4:	6819      	ldr	r1, [r3, #0]
  4085d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  4085da:	2200      	movs	r2, #0
  4085dc:	4618      	mov	r0, r3
  4085de:	611a      	str	r2, [r3, #16]
  4085e0:	60da      	str	r2, [r3, #12]
  4085e2:	bd38      	pop	{r3, r4, r5, pc}
  4085e4:	2221      	movs	r2, #33	; 0x21
  4085e6:	2104      	movs	r1, #4
  4085e8:	f000 ff0a 	bl	409400 <_calloc_r>
  4085ec:	64e8      	str	r0, [r5, #76]	; 0x4c
  4085ee:	4602      	mov	r2, r0
  4085f0:	2800      	cmp	r0, #0
  4085f2:	d1ec      	bne.n	4085ce <_Balloc+0xa>
  4085f4:	2000      	movs	r0, #0
  4085f6:	bd38      	pop	{r3, r4, r5, pc}
  4085f8:	2101      	movs	r1, #1
  4085fa:	4628      	mov	r0, r5
  4085fc:	fa01 f504 	lsl.w	r5, r1, r4
  408600:	1d6a      	adds	r2, r5, #5
  408602:	0092      	lsls	r2, r2, #2
  408604:	f000 fefc 	bl	409400 <_calloc_r>
  408608:	4603      	mov	r3, r0
  40860a:	2800      	cmp	r0, #0
  40860c:	d0f2      	beq.n	4085f4 <_Balloc+0x30>
  40860e:	6044      	str	r4, [r0, #4]
  408610:	6085      	str	r5, [r0, #8]
  408612:	e7e2      	b.n	4085da <_Balloc+0x16>

00408614 <_Bfree>:
  408614:	b131      	cbz	r1, 408624 <_Bfree+0x10>
  408616:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408618:	684a      	ldr	r2, [r1, #4]
  40861a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40861e:	6008      	str	r0, [r1, #0]
  408620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  408624:	4770      	bx	lr
  408626:	bf00      	nop

00408628 <__multadd>:
  408628:	b5f0      	push	{r4, r5, r6, r7, lr}
  40862a:	460c      	mov	r4, r1
  40862c:	b083      	sub	sp, #12
  40862e:	4605      	mov	r5, r0
  408630:	690e      	ldr	r6, [r1, #16]
  408632:	f101 0e14 	add.w	lr, r1, #20
  408636:	2700      	movs	r7, #0
  408638:	f8de 1000 	ldr.w	r1, [lr]
  40863c:	3701      	adds	r7, #1
  40863e:	b288      	uxth	r0, r1
  408640:	42be      	cmp	r6, r7
  408642:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408646:	fb02 3300 	mla	r3, r2, r0, r3
  40864a:	fb02 f101 	mul.w	r1, r2, r1
  40864e:	b298      	uxth	r0, r3
  408650:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  408654:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  408658:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40865c:	f84e 1b04 	str.w	r1, [lr], #4
  408660:	dcea      	bgt.n	408638 <__multadd+0x10>
  408662:	b13b      	cbz	r3, 408674 <__multadd+0x4c>
  408664:	68a2      	ldr	r2, [r4, #8]
  408666:	4296      	cmp	r6, r2
  408668:	da07      	bge.n	40867a <__multadd+0x52>
  40866a:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  40866e:	3601      	adds	r6, #1
  408670:	6153      	str	r3, [r2, #20]
  408672:	6126      	str	r6, [r4, #16]
  408674:	4620      	mov	r0, r4
  408676:	b003      	add	sp, #12
  408678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40867a:	6861      	ldr	r1, [r4, #4]
  40867c:	4628      	mov	r0, r5
  40867e:	9301      	str	r3, [sp, #4]
  408680:	3101      	adds	r1, #1
  408682:	f7ff ff9f 	bl	4085c4 <_Balloc>
  408686:	6922      	ldr	r2, [r4, #16]
  408688:	f104 010c 	add.w	r1, r4, #12
  40868c:	4607      	mov	r7, r0
  40868e:	3202      	adds	r2, #2
  408690:	300c      	adds	r0, #12
  408692:	0092      	lsls	r2, r2, #2
  408694:	f7fb fc4a 	bl	403f2c <memcpy>
  408698:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40869a:	6861      	ldr	r1, [r4, #4]
  40869c:	9b01      	ldr	r3, [sp, #4]
  40869e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4086a2:	6020      	str	r0, [r4, #0]
  4086a4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  4086a8:	463c      	mov	r4, r7
  4086aa:	e7de      	b.n	40866a <__multadd+0x42>

004086ac <__hi0bits>:
  4086ac:	4b0f      	ldr	r3, [pc, #60]	; (4086ec <__hi0bits+0x40>)
  4086ae:	4003      	ands	r3, r0
  4086b0:	b9b3      	cbnz	r3, 4086e0 <__hi0bits+0x34>
  4086b2:	0400      	lsls	r0, r0, #16
  4086b4:	2310      	movs	r3, #16
  4086b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4086ba:	d101      	bne.n	4086c0 <__hi0bits+0x14>
  4086bc:	3308      	adds	r3, #8
  4086be:	0200      	lsls	r0, r0, #8
  4086c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4086c4:	d101      	bne.n	4086ca <__hi0bits+0x1e>
  4086c6:	3304      	adds	r3, #4
  4086c8:	0100      	lsls	r0, r0, #4
  4086ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4086ce:	d101      	bne.n	4086d4 <__hi0bits+0x28>
  4086d0:	3302      	adds	r3, #2
  4086d2:	0080      	lsls	r0, r0, #2
  4086d4:	2800      	cmp	r0, #0
  4086d6:	db07      	blt.n	4086e8 <__hi0bits+0x3c>
  4086d8:	0042      	lsls	r2, r0, #1
  4086da:	d403      	bmi.n	4086e4 <__hi0bits+0x38>
  4086dc:	2020      	movs	r0, #32
  4086de:	4770      	bx	lr
  4086e0:	2300      	movs	r3, #0
  4086e2:	e7e8      	b.n	4086b6 <__hi0bits+0xa>
  4086e4:	1c58      	adds	r0, r3, #1
  4086e6:	4770      	bx	lr
  4086e8:	4618      	mov	r0, r3
  4086ea:	4770      	bx	lr
  4086ec:	ffff0000 	.word	0xffff0000

004086f0 <__lo0bits>:
  4086f0:	6803      	ldr	r3, [r0, #0]
  4086f2:	f013 0207 	ands.w	r2, r3, #7
  4086f6:	d008      	beq.n	40870a <__lo0bits+0x1a>
  4086f8:	07d9      	lsls	r1, r3, #31
  4086fa:	d422      	bmi.n	408742 <__lo0bits+0x52>
  4086fc:	079a      	lsls	r2, r3, #30
  4086fe:	d423      	bmi.n	408748 <__lo0bits+0x58>
  408700:	089b      	lsrs	r3, r3, #2
  408702:	2202      	movs	r2, #2
  408704:	6003      	str	r3, [r0, #0]
  408706:	4610      	mov	r0, r2
  408708:	4770      	bx	lr
  40870a:	b299      	uxth	r1, r3
  40870c:	b909      	cbnz	r1, 408712 <__lo0bits+0x22>
  40870e:	0c1b      	lsrs	r3, r3, #16
  408710:	2210      	movs	r2, #16
  408712:	f013 0fff 	tst.w	r3, #255	; 0xff
  408716:	d101      	bne.n	40871c <__lo0bits+0x2c>
  408718:	3208      	adds	r2, #8
  40871a:	0a1b      	lsrs	r3, r3, #8
  40871c:	0719      	lsls	r1, r3, #28
  40871e:	d101      	bne.n	408724 <__lo0bits+0x34>
  408720:	3204      	adds	r2, #4
  408722:	091b      	lsrs	r3, r3, #4
  408724:	0799      	lsls	r1, r3, #30
  408726:	d101      	bne.n	40872c <__lo0bits+0x3c>
  408728:	3202      	adds	r2, #2
  40872a:	089b      	lsrs	r3, r3, #2
  40872c:	07d9      	lsls	r1, r3, #31
  40872e:	d405      	bmi.n	40873c <__lo0bits+0x4c>
  408730:	085b      	lsrs	r3, r3, #1
  408732:	d102      	bne.n	40873a <__lo0bits+0x4a>
  408734:	2220      	movs	r2, #32
  408736:	4610      	mov	r0, r2
  408738:	4770      	bx	lr
  40873a:	3201      	adds	r2, #1
  40873c:	6003      	str	r3, [r0, #0]
  40873e:	4610      	mov	r0, r2
  408740:	4770      	bx	lr
  408742:	2200      	movs	r2, #0
  408744:	4610      	mov	r0, r2
  408746:	4770      	bx	lr
  408748:	085b      	lsrs	r3, r3, #1
  40874a:	2201      	movs	r2, #1
  40874c:	6003      	str	r3, [r0, #0]
  40874e:	4610      	mov	r0, r2
  408750:	4770      	bx	lr
  408752:	bf00      	nop

00408754 <__i2b>:
  408754:	b510      	push	{r4, lr}
  408756:	460c      	mov	r4, r1
  408758:	2101      	movs	r1, #1
  40875a:	f7ff ff33 	bl	4085c4 <_Balloc>
  40875e:	2201      	movs	r2, #1
  408760:	6144      	str	r4, [r0, #20]
  408762:	6102      	str	r2, [r0, #16]
  408764:	bd10      	pop	{r4, pc}
  408766:	bf00      	nop

00408768 <__multiply>:
  408768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40876c:	690e      	ldr	r6, [r1, #16]
  40876e:	b085      	sub	sp, #20
  408770:	6915      	ldr	r5, [r2, #16]
  408772:	460c      	mov	r4, r1
  408774:	4691      	mov	r9, r2
  408776:	42ae      	cmp	r6, r5
  408778:	f2c0 8094 	blt.w	4088a4 <__multiply+0x13c>
  40877c:	462b      	mov	r3, r5
  40877e:	4635      	mov	r5, r6
  408780:	461e      	mov	r6, r3
  408782:	eb05 0806 	add.w	r8, r5, r6
  408786:	68a3      	ldr	r3, [r4, #8]
  408788:	6861      	ldr	r1, [r4, #4]
  40878a:	4598      	cmp	r8, r3
  40878c:	dd00      	ble.n	408790 <__multiply+0x28>
  40878e:	3101      	adds	r1, #1
  408790:	f7ff ff18 	bl	4085c4 <_Balloc>
  408794:	f100 0a14 	add.w	sl, r0, #20
  408798:	9001      	str	r0, [sp, #4]
  40879a:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40879e:	45da      	cmp	sl, fp
  4087a0:	d205      	bcs.n	4087ae <__multiply+0x46>
  4087a2:	4653      	mov	r3, sl
  4087a4:	2100      	movs	r1, #0
  4087a6:	f843 1b04 	str.w	r1, [r3], #4
  4087aa:	459b      	cmp	fp, r3
  4087ac:	d8fb      	bhi.n	4087a6 <__multiply+0x3e>
  4087ae:	f109 0914 	add.w	r9, r9, #20
  4087b2:	f104 0314 	add.w	r3, r4, #20
  4087b6:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  4087ba:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  4087be:	4591      	cmp	r9, r2
  4087c0:	d25b      	bcs.n	40887a <__multiply+0x112>
  4087c2:	f8cd b008 	str.w	fp, [sp, #8]
  4087c6:	4693      	mov	fp, r2
  4087c8:	f8cd 800c 	str.w	r8, [sp, #12]
  4087cc:	4698      	mov	r8, r3
  4087ce:	f859 6b04 	ldr.w	r6, [r9], #4
  4087d2:	fa1f fe86 	uxth.w	lr, r6
  4087d6:	f1be 0f00 	cmp.w	lr, #0
  4087da:	d021      	beq.n	408820 <__multiply+0xb8>
  4087dc:	4647      	mov	r7, r8
  4087de:	4656      	mov	r6, sl
  4087e0:	2100      	movs	r1, #0
  4087e2:	e000      	b.n	4087e6 <__multiply+0x7e>
  4087e4:	4626      	mov	r6, r4
  4087e6:	f857 2b04 	ldr.w	r2, [r7], #4
  4087ea:	4634      	mov	r4, r6
  4087ec:	6835      	ldr	r5, [r6, #0]
  4087ee:	b290      	uxth	r0, r2
  4087f0:	45bc      	cmp	ip, r7
  4087f2:	b2ab      	uxth	r3, r5
  4087f4:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4087f8:	fb0e 3000 	mla	r0, lr, r0, r3
  4087fc:	ea4f 4315 	mov.w	r3, r5, lsr #16
  408800:	4401      	add	r1, r0
  408802:	fb0e 3302 	mla	r3, lr, r2, r3
  408806:	b28a      	uxth	r2, r1
  408808:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40880c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  408810:	ea4f 4111 	mov.w	r1, r1, lsr #16
  408814:	f844 3b04 	str.w	r3, [r4], #4
  408818:	d8e4      	bhi.n	4087e4 <__multiply+0x7c>
  40881a:	6071      	str	r1, [r6, #4]
  40881c:	f859 6c04 	ldr.w	r6, [r9, #-4]
  408820:	0c36      	lsrs	r6, r6, #16
  408822:	d022      	beq.n	40886a <__multiply+0x102>
  408824:	f8da 3000 	ldr.w	r3, [sl]
  408828:	2700      	movs	r7, #0
  40882a:	4655      	mov	r5, sl
  40882c:	4640      	mov	r0, r8
  40882e:	461a      	mov	r2, r3
  408830:	46be      	mov	lr, r7
  408832:	e000      	b.n	408836 <__multiply+0xce>
  408834:	4625      	mov	r5, r4
  408836:	8807      	ldrh	r7, [r0, #0]
  408838:	0c12      	lsrs	r2, r2, #16
  40883a:	b299      	uxth	r1, r3
  40883c:	462c      	mov	r4, r5
  40883e:	fb06 2207 	mla	r2, r6, r7, r2
  408842:	eb02 070e 	add.w	r7, r2, lr
  408846:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40884a:	f844 3b04 	str.w	r3, [r4], #4
  40884e:	f850 1b04 	ldr.w	r1, [r0], #4
  408852:	686a      	ldr	r2, [r5, #4]
  408854:	0c09      	lsrs	r1, r1, #16
  408856:	4584      	cmp	ip, r0
  408858:	b293      	uxth	r3, r2
  40885a:	fb06 3101 	mla	r1, r6, r1, r3
  40885e:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  408862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  408866:	d8e5      	bhi.n	408834 <__multiply+0xcc>
  408868:	606b      	str	r3, [r5, #4]
  40886a:	45cb      	cmp	fp, r9
  40886c:	f10a 0a04 	add.w	sl, sl, #4
  408870:	d8ad      	bhi.n	4087ce <__multiply+0x66>
  408872:	f8dd b008 	ldr.w	fp, [sp, #8]
  408876:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40887a:	f1b8 0f00 	cmp.w	r8, #0
  40887e:	dd0b      	ble.n	408898 <__multiply+0x130>
  408880:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  408884:	f1ab 0b04 	sub.w	fp, fp, #4
  408888:	b11b      	cbz	r3, 408892 <__multiply+0x12a>
  40888a:	e005      	b.n	408898 <__multiply+0x130>
  40888c:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  408890:	b913      	cbnz	r3, 408898 <__multiply+0x130>
  408892:	f1b8 0801 	subs.w	r8, r8, #1
  408896:	d1f9      	bne.n	40888c <__multiply+0x124>
  408898:	9801      	ldr	r0, [sp, #4]
  40889a:	f8c0 8010 	str.w	r8, [r0, #16]
  40889e:	b005      	add	sp, #20
  4088a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088a4:	4614      	mov	r4, r2
  4088a6:	4689      	mov	r9, r1
  4088a8:	e76b      	b.n	408782 <__multiply+0x1a>
  4088aa:	bf00      	nop

004088ac <__pow5mult>:
  4088ac:	f012 0303 	ands.w	r3, r2, #3
  4088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4088b4:	4614      	mov	r4, r2
  4088b6:	4607      	mov	r7, r0
  4088b8:	460e      	mov	r6, r1
  4088ba:	d12d      	bne.n	408918 <__pow5mult+0x6c>
  4088bc:	10a4      	asrs	r4, r4, #2
  4088be:	d01c      	beq.n	4088fa <__pow5mult+0x4e>
  4088c0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4088c2:	b395      	cbz	r5, 40892a <__pow5mult+0x7e>
  4088c4:	07e3      	lsls	r3, r4, #31
  4088c6:	f04f 0800 	mov.w	r8, #0
  4088ca:	d406      	bmi.n	4088da <__pow5mult+0x2e>
  4088cc:	1064      	asrs	r4, r4, #1
  4088ce:	d014      	beq.n	4088fa <__pow5mult+0x4e>
  4088d0:	6828      	ldr	r0, [r5, #0]
  4088d2:	b1a8      	cbz	r0, 408900 <__pow5mult+0x54>
  4088d4:	4605      	mov	r5, r0
  4088d6:	07e3      	lsls	r3, r4, #31
  4088d8:	d5f8      	bpl.n	4088cc <__pow5mult+0x20>
  4088da:	4638      	mov	r0, r7
  4088dc:	4631      	mov	r1, r6
  4088de:	462a      	mov	r2, r5
  4088e0:	f7ff ff42 	bl	408768 <__multiply>
  4088e4:	b1b6      	cbz	r6, 408914 <__pow5mult+0x68>
  4088e6:	6872      	ldr	r2, [r6, #4]
  4088e8:	1064      	asrs	r4, r4, #1
  4088ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4088ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4088f0:	6031      	str	r1, [r6, #0]
  4088f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4088f6:	4606      	mov	r6, r0
  4088f8:	d1ea      	bne.n	4088d0 <__pow5mult+0x24>
  4088fa:	4630      	mov	r0, r6
  4088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408900:	4629      	mov	r1, r5
  408902:	462a      	mov	r2, r5
  408904:	4638      	mov	r0, r7
  408906:	f7ff ff2f 	bl	408768 <__multiply>
  40890a:	6028      	str	r0, [r5, #0]
  40890c:	f8c0 8000 	str.w	r8, [r0]
  408910:	4605      	mov	r5, r0
  408912:	e7e0      	b.n	4088d6 <__pow5mult+0x2a>
  408914:	4606      	mov	r6, r0
  408916:	e7d9      	b.n	4088cc <__pow5mult+0x20>
  408918:	1e5a      	subs	r2, r3, #1
  40891a:	4d0b      	ldr	r5, [pc, #44]	; (408948 <__pow5mult+0x9c>)
  40891c:	2300      	movs	r3, #0
  40891e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408922:	f7ff fe81 	bl	408628 <__multadd>
  408926:	4606      	mov	r6, r0
  408928:	e7c8      	b.n	4088bc <__pow5mult+0x10>
  40892a:	2101      	movs	r1, #1
  40892c:	4638      	mov	r0, r7
  40892e:	f7ff fe49 	bl	4085c4 <_Balloc>
  408932:	f240 2171 	movw	r1, #625	; 0x271
  408936:	2201      	movs	r2, #1
  408938:	2300      	movs	r3, #0
  40893a:	6141      	str	r1, [r0, #20]
  40893c:	4605      	mov	r5, r0
  40893e:	6102      	str	r2, [r0, #16]
  408940:	64b8      	str	r0, [r7, #72]	; 0x48
  408942:	6003      	str	r3, [r0, #0]
  408944:	e7be      	b.n	4088c4 <__pow5mult+0x18>
  408946:	bf00      	nop
  408948:	00409f68 	.word	0x00409f68

0040894c <__lshift>:
  40894c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408950:	690e      	ldr	r6, [r1, #16]
  408952:	ea4f 1962 	mov.w	r9, r2, asr #5
  408956:	688b      	ldr	r3, [r1, #8]
  408958:	460d      	mov	r5, r1
  40895a:	444e      	add	r6, r9
  40895c:	4690      	mov	r8, r2
  40895e:	4607      	mov	r7, r0
  408960:	6849      	ldr	r1, [r1, #4]
  408962:	1c74      	adds	r4, r6, #1
  408964:	429c      	cmp	r4, r3
  408966:	dd03      	ble.n	408970 <__lshift+0x24>
  408968:	005b      	lsls	r3, r3, #1
  40896a:	3101      	adds	r1, #1
  40896c:	429c      	cmp	r4, r3
  40896e:	dcfb      	bgt.n	408968 <__lshift+0x1c>
  408970:	4638      	mov	r0, r7
  408972:	f7ff fe27 	bl	4085c4 <_Balloc>
  408976:	f1b9 0f00 	cmp.w	r9, #0
  40897a:	4684      	mov	ip, r0
  40897c:	f100 0114 	add.w	r1, r0, #20
  408980:	dd09      	ble.n	408996 <__lshift+0x4a>
  408982:	2300      	movs	r3, #0
  408984:	460a      	mov	r2, r1
  408986:	4618      	mov	r0, r3
  408988:	3301      	adds	r3, #1
  40898a:	f842 0b04 	str.w	r0, [r2], #4
  40898e:	454b      	cmp	r3, r9
  408990:	d1fa      	bne.n	408988 <__lshift+0x3c>
  408992:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  408996:	692a      	ldr	r2, [r5, #16]
  408998:	f105 0314 	add.w	r3, r5, #20
  40899c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  4089a0:	f018 021f 	ands.w	r2, r8, #31
  4089a4:	d023      	beq.n	4089ee <__lshift+0xa2>
  4089a6:	f1c2 0920 	rsb	r9, r2, #32
  4089aa:	f04f 0a00 	mov.w	sl, #0
  4089ae:	6818      	ldr	r0, [r3, #0]
  4089b0:	4688      	mov	r8, r1
  4089b2:	4090      	lsls	r0, r2
  4089b4:	ea4a 0000 	orr.w	r0, sl, r0
  4089b8:	f841 0b04 	str.w	r0, [r1], #4
  4089bc:	f853 0b04 	ldr.w	r0, [r3], #4
  4089c0:	459e      	cmp	lr, r3
  4089c2:	fa20 fa09 	lsr.w	sl, r0, r9
  4089c6:	d8f2      	bhi.n	4089ae <__lshift+0x62>
  4089c8:	f8c8 a004 	str.w	sl, [r8, #4]
  4089cc:	f1ba 0f00 	cmp.w	sl, #0
  4089d0:	d000      	beq.n	4089d4 <__lshift+0x88>
  4089d2:	1cb4      	adds	r4, r6, #2
  4089d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4089d6:	3c01      	subs	r4, #1
  4089d8:	686a      	ldr	r2, [r5, #4]
  4089da:	4660      	mov	r0, ip
  4089dc:	f8cc 4010 	str.w	r4, [ip, #16]
  4089e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4089e4:	6029      	str	r1, [r5, #0]
  4089e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4089ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4089ee:	3904      	subs	r1, #4
  4089f0:	f853 2b04 	ldr.w	r2, [r3], #4
  4089f4:	459e      	cmp	lr, r3
  4089f6:	f841 2f04 	str.w	r2, [r1, #4]!
  4089fa:	d8f9      	bhi.n	4089f0 <__lshift+0xa4>
  4089fc:	e7ea      	b.n	4089d4 <__lshift+0x88>
  4089fe:	bf00      	nop

00408a00 <__mcmp>:
  408a00:	6902      	ldr	r2, [r0, #16]
  408a02:	690b      	ldr	r3, [r1, #16]
  408a04:	1ad2      	subs	r2, r2, r3
  408a06:	d113      	bne.n	408a30 <__mcmp+0x30>
  408a08:	009a      	lsls	r2, r3, #2
  408a0a:	3014      	adds	r0, #20
  408a0c:	3114      	adds	r1, #20
  408a0e:	1883      	adds	r3, r0, r2
  408a10:	4411      	add	r1, r2
  408a12:	b410      	push	{r4}
  408a14:	e001      	b.n	408a1a <__mcmp+0x1a>
  408a16:	4298      	cmp	r0, r3
  408a18:	d20c      	bcs.n	408a34 <__mcmp+0x34>
  408a1a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408a1e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408a22:	4294      	cmp	r4, r2
  408a24:	d0f7      	beq.n	408a16 <__mcmp+0x16>
  408a26:	d309      	bcc.n	408a3c <__mcmp+0x3c>
  408a28:	2001      	movs	r0, #1
  408a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  408a2e:	4770      	bx	lr
  408a30:	4610      	mov	r0, r2
  408a32:	4770      	bx	lr
  408a34:	2000      	movs	r0, #0
  408a36:	f85d 4b04 	ldr.w	r4, [sp], #4
  408a3a:	4770      	bx	lr
  408a3c:	f04f 30ff 	mov.w	r0, #4294967295
  408a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  408a44:	4770      	bx	lr
  408a46:	bf00      	nop

00408a48 <__mdiff>:
  408a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408a4c:	460c      	mov	r4, r1
  408a4e:	4605      	mov	r5, r0
  408a50:	4611      	mov	r1, r2
  408a52:	4617      	mov	r7, r2
  408a54:	4620      	mov	r0, r4
  408a56:	f7ff ffd3 	bl	408a00 <__mcmp>
  408a5a:	1e06      	subs	r6, r0, #0
  408a5c:	d05c      	beq.n	408b18 <__mdiff+0xd0>
  408a5e:	db55      	blt.n	408b0c <__mdiff+0xc4>
  408a60:	f04f 0800 	mov.w	r8, #0
  408a64:	6861      	ldr	r1, [r4, #4]
  408a66:	4628      	mov	r0, r5
  408a68:	f7ff fdac 	bl	4085c4 <_Balloc>
  408a6c:	f107 0514 	add.w	r5, r7, #20
  408a70:	693b      	ldr	r3, [r7, #16]
  408a72:	f104 0114 	add.w	r1, r4, #20
  408a76:	6926      	ldr	r6, [r4, #16]
  408a78:	4684      	mov	ip, r0
  408a7a:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  408a7e:	f100 0414 	add.w	r4, r0, #20
  408a82:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  408a86:	2300      	movs	r3, #0
  408a88:	f8c0 800c 	str.w	r8, [r0, #12]
  408a8c:	f851 9b04 	ldr.w	r9, [r1], #4
  408a90:	f855 2b04 	ldr.w	r2, [r5], #4
  408a94:	fa13 f889 	uxtah	r8, r3, r9
  408a98:	4608      	mov	r0, r1
  408a9a:	b293      	uxth	r3, r2
  408a9c:	45ae      	cmp	lr, r5
  408a9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  408aa2:	ebc3 0308 	rsb	r3, r3, r8
  408aa6:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  408aaa:	fa1f f883 	uxth.w	r8, r3
  408aae:	eb02 4323 	add.w	r3, r2, r3, asr #16
  408ab2:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  408ab6:	ea4f 4323 	mov.w	r3, r3, asr #16
  408aba:	f844 2b04 	str.w	r2, [r4], #4
  408abe:	d8e5      	bhi.n	408a8c <__mdiff+0x44>
  408ac0:	428f      	cmp	r7, r1
  408ac2:	4625      	mov	r5, r4
  408ac4:	d916      	bls.n	408af4 <__mdiff+0xac>
  408ac6:	f850 2b04 	ldr.w	r2, [r0], #4
  408aca:	fa13 f382 	uxtah	r3, r3, r2
  408ace:	0c12      	lsrs	r2, r2, #16
  408ad0:	4287      	cmp	r7, r0
  408ad2:	fa1f fe83 	uxth.w	lr, r3
  408ad6:	eb02 4323 	add.w	r3, r2, r3, asr #16
  408ada:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  408ade:	ea4f 4323 	mov.w	r3, r3, asr #16
  408ae2:	f844 2b04 	str.w	r2, [r4], #4
  408ae6:	d8ee      	bhi.n	408ac6 <__mdiff+0x7e>
  408ae8:	43c9      	mvns	r1, r1
  408aea:	4439      	add	r1, r7
  408aec:	f021 0403 	bic.w	r4, r1, #3
  408af0:	3404      	adds	r4, #4
  408af2:	442c      	add	r4, r5
  408af4:	3c04      	subs	r4, #4
  408af6:	b922      	cbnz	r2, 408b02 <__mdiff+0xba>
  408af8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408afc:	3e01      	subs	r6, #1
  408afe:	2b00      	cmp	r3, #0
  408b00:	d0fa      	beq.n	408af8 <__mdiff+0xb0>
  408b02:	4660      	mov	r0, ip
  408b04:	f8cc 6010 	str.w	r6, [ip, #16]
  408b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408b0c:	4623      	mov	r3, r4
  408b0e:	f04f 0801 	mov.w	r8, #1
  408b12:	463c      	mov	r4, r7
  408b14:	461f      	mov	r7, r3
  408b16:	e7a5      	b.n	408a64 <__mdiff+0x1c>
  408b18:	4628      	mov	r0, r5
  408b1a:	4631      	mov	r1, r6
  408b1c:	f7ff fd52 	bl	4085c4 <_Balloc>
  408b20:	2201      	movs	r2, #1
  408b22:	4603      	mov	r3, r0
  408b24:	6146      	str	r6, [r0, #20]
  408b26:	611a      	str	r2, [r3, #16]
  408b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00408b2c <__d2b>:
  408b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b30:	461c      	mov	r4, r3
  408b32:	b082      	sub	sp, #8
  408b34:	2101      	movs	r1, #1
  408b36:	4616      	mov	r6, r2
  408b38:	f3c4 550a 	ubfx	r5, r4, #20, #11
  408b3c:	f7ff fd42 	bl	4085c4 <_Balloc>
  408b40:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408b44:	4607      	mov	r7, r0
  408b46:	b10d      	cbz	r5, 408b4c <__d2b+0x20>
  408b48:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408b4c:	9401      	str	r4, [sp, #4]
  408b4e:	b30e      	cbz	r6, 408b94 <__d2b+0x68>
  408b50:	a802      	add	r0, sp, #8
  408b52:	f840 6d08 	str.w	r6, [r0, #-8]!
  408b56:	f7ff fdcb 	bl	4086f0 <__lo0bits>
  408b5a:	2800      	cmp	r0, #0
  408b5c:	d132      	bne.n	408bc4 <__d2b+0x98>
  408b5e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408b62:	617a      	str	r2, [r7, #20]
  408b64:	2b00      	cmp	r3, #0
  408b66:	61bb      	str	r3, [r7, #24]
  408b68:	bf14      	ite	ne
  408b6a:	2402      	movne	r4, #2
  408b6c:	2401      	moveq	r4, #1
  408b6e:	613c      	str	r4, [r7, #16]
  408b70:	b9dd      	cbnz	r5, 408baa <__d2b+0x7e>
  408b72:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  408b76:	9a08      	ldr	r2, [sp, #32]
  408b78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408b7c:	6010      	str	r0, [r2, #0]
  408b7e:	6918      	ldr	r0, [r3, #16]
  408b80:	f7ff fd94 	bl	4086ac <__hi0bits>
  408b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408b86:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  408b8a:	6018      	str	r0, [r3, #0]
  408b8c:	4638      	mov	r0, r7
  408b8e:	b002      	add	sp, #8
  408b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b94:	a801      	add	r0, sp, #4
  408b96:	f7ff fdab 	bl	4086f0 <__lo0bits>
  408b9a:	2301      	movs	r3, #1
  408b9c:	9a01      	ldr	r2, [sp, #4]
  408b9e:	3020      	adds	r0, #32
  408ba0:	461c      	mov	r4, r3
  408ba2:	613b      	str	r3, [r7, #16]
  408ba4:	617a      	str	r2, [r7, #20]
  408ba6:	2d00      	cmp	r5, #0
  408ba8:	d0e3      	beq.n	408b72 <__d2b+0x46>
  408baa:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  408bae:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  408bb2:	9a08      	ldr	r2, [sp, #32]
  408bb4:	4440      	add	r0, r8
  408bb6:	6010      	str	r0, [r2, #0]
  408bb8:	4638      	mov	r0, r7
  408bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408bbc:	6013      	str	r3, [r2, #0]
  408bbe:	b002      	add	sp, #8
  408bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408bc4:	9b01      	ldr	r3, [sp, #4]
  408bc6:	f1c0 0120 	rsb	r1, r0, #32
  408bca:	9a00      	ldr	r2, [sp, #0]
  408bcc:	fa03 f101 	lsl.w	r1, r3, r1
  408bd0:	40c3      	lsrs	r3, r0
  408bd2:	430a      	orrs	r2, r1
  408bd4:	9301      	str	r3, [sp, #4]
  408bd6:	617a      	str	r2, [r7, #20]
  408bd8:	e7c4      	b.n	408b64 <__d2b+0x38>
  408bda:	bf00      	nop

00408bdc <_realloc_r>:
  408bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408be0:	4617      	mov	r7, r2
  408be2:	b083      	sub	sp, #12
  408be4:	460e      	mov	r6, r1
  408be6:	2900      	cmp	r1, #0
  408be8:	f000 80e2 	beq.w	408db0 <_realloc_r+0x1d4>
  408bec:	f107 040b 	add.w	r4, r7, #11
  408bf0:	4681      	mov	r9, r0
  408bf2:	f7ff fce3 	bl	4085bc <__malloc_lock>
  408bf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408bfa:	2c16      	cmp	r4, #22
  408bfc:	f1a6 0808 	sub.w	r8, r6, #8
  408c00:	f023 0503 	bic.w	r5, r3, #3
  408c04:	d850      	bhi.n	408ca8 <_realloc_r+0xcc>
  408c06:	2210      	movs	r2, #16
  408c08:	2100      	movs	r1, #0
  408c0a:	4614      	mov	r4, r2
  408c0c:	42bc      	cmp	r4, r7
  408c0e:	f0c0 80dc 	bcc.w	408dca <_realloc_r+0x1ee>
  408c12:	2900      	cmp	r1, #0
  408c14:	f040 80d9 	bne.w	408dca <_realloc_r+0x1ee>
  408c18:	4295      	cmp	r5, r2
  408c1a:	da4a      	bge.n	408cb2 <_realloc_r+0xd6>
  408c1c:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 408fc8 <_realloc_r+0x3ec>
  408c20:	eb08 0105 	add.w	r1, r8, r5
  408c24:	f8db 0008 	ldr.w	r0, [fp, #8]
  408c28:	4288      	cmp	r0, r1
  408c2a:	f000 80d3 	beq.w	408dd4 <_realloc_r+0x1f8>
  408c2e:	6848      	ldr	r0, [r1, #4]
  408c30:	f020 0e01 	bic.w	lr, r0, #1
  408c34:	448e      	add	lr, r1
  408c36:	f8de e004 	ldr.w	lr, [lr, #4]
  408c3a:	f01e 0f01 	tst.w	lr, #1
  408c3e:	d14e      	bne.n	408cde <_realloc_r+0x102>
  408c40:	f020 0003 	bic.w	r0, r0, #3
  408c44:	4428      	add	r0, r5
  408c46:	4290      	cmp	r0, r2
  408c48:	f280 80b8 	bge.w	408dbc <_realloc_r+0x1e0>
  408c4c:	07db      	lsls	r3, r3, #31
  408c4e:	f100 808b 	bmi.w	408d68 <_realloc_r+0x18c>
  408c52:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408c56:	ebc3 0a08 	rsb	sl, r3, r8
  408c5a:	f8da 3004 	ldr.w	r3, [sl, #4]
  408c5e:	f023 0303 	bic.w	r3, r3, #3
  408c62:	eb00 0e03 	add.w	lr, r0, r3
  408c66:	4596      	cmp	lr, r2
  408c68:	db43      	blt.n	408cf2 <_realloc_r+0x116>
  408c6a:	68cb      	ldr	r3, [r1, #12]
  408c6c:	4657      	mov	r7, sl
  408c6e:	6889      	ldr	r1, [r1, #8]
  408c70:	1f2a      	subs	r2, r5, #4
  408c72:	60cb      	str	r3, [r1, #12]
  408c74:	2a24      	cmp	r2, #36	; 0x24
  408c76:	6099      	str	r1, [r3, #8]
  408c78:	f857 1f08 	ldr.w	r1, [r7, #8]!
  408c7c:	f8da 300c 	ldr.w	r3, [sl, #12]
  408c80:	60cb      	str	r3, [r1, #12]
  408c82:	6099      	str	r1, [r3, #8]
  408c84:	f200 813c 	bhi.w	408f00 <_realloc_r+0x324>
  408c88:	2a13      	cmp	r2, #19
  408c8a:	f240 80fa 	bls.w	408e82 <_realloc_r+0x2a6>
  408c8e:	6833      	ldr	r3, [r6, #0]
  408c90:	2a1b      	cmp	r2, #27
  408c92:	f8ca 3008 	str.w	r3, [sl, #8]
  408c96:	6873      	ldr	r3, [r6, #4]
  408c98:	f8ca 300c 	str.w	r3, [sl, #12]
  408c9c:	f200 813b 	bhi.w	408f16 <_realloc_r+0x33a>
  408ca0:	3608      	adds	r6, #8
  408ca2:	f10a 0310 	add.w	r3, sl, #16
  408ca6:	e0ed      	b.n	408e84 <_realloc_r+0x2a8>
  408ca8:	f024 0407 	bic.w	r4, r4, #7
  408cac:	4622      	mov	r2, r4
  408cae:	0fe1      	lsrs	r1, r4, #31
  408cb0:	e7ac      	b.n	408c0c <_realloc_r+0x30>
  408cb2:	4637      	mov	r7, r6
  408cb4:	1b2a      	subs	r2, r5, r4
  408cb6:	f003 0301 	and.w	r3, r3, #1
  408cba:	2a0f      	cmp	r2, #15
  408cbc:	d841      	bhi.n	408d42 <_realloc_r+0x166>
  408cbe:	eb08 0205 	add.w	r2, r8, r5
  408cc2:	431d      	orrs	r5, r3
  408cc4:	f8c8 5004 	str.w	r5, [r8, #4]
  408cc8:	6853      	ldr	r3, [r2, #4]
  408cca:	f043 0301 	orr.w	r3, r3, #1
  408cce:	6053      	str	r3, [r2, #4]
  408cd0:	4648      	mov	r0, r9
  408cd2:	f7ff fc75 	bl	4085c0 <__malloc_unlock>
  408cd6:	4638      	mov	r0, r7
  408cd8:	b003      	add	sp, #12
  408cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408cde:	07d9      	lsls	r1, r3, #31
  408ce0:	d442      	bmi.n	408d68 <_realloc_r+0x18c>
  408ce2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408ce6:	ebc3 0a08 	rsb	sl, r3, r8
  408cea:	f8da 3004 	ldr.w	r3, [sl, #4]
  408cee:	f023 0303 	bic.w	r3, r3, #3
  408cf2:	442b      	add	r3, r5
  408cf4:	4293      	cmp	r3, r2
  408cf6:	db37      	blt.n	408d68 <_realloc_r+0x18c>
  408cf8:	4657      	mov	r7, sl
  408cfa:	1f2a      	subs	r2, r5, #4
  408cfc:	f8da 100c 	ldr.w	r1, [sl, #12]
  408d00:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408d04:	2a24      	cmp	r2, #36	; 0x24
  408d06:	60c1      	str	r1, [r0, #12]
  408d08:	6088      	str	r0, [r1, #8]
  408d0a:	f200 80c6 	bhi.w	408e9a <_realloc_r+0x2be>
  408d0e:	2a13      	cmp	r2, #19
  408d10:	f240 80ff 	bls.w	408f12 <_realloc_r+0x336>
  408d14:	6831      	ldr	r1, [r6, #0]
  408d16:	2a1b      	cmp	r2, #27
  408d18:	f8ca 1008 	str.w	r1, [sl, #8]
  408d1c:	6871      	ldr	r1, [r6, #4]
  408d1e:	f8ca 100c 	str.w	r1, [sl, #12]
  408d22:	f200 810d 	bhi.w	408f40 <_realloc_r+0x364>
  408d26:	3608      	adds	r6, #8
  408d28:	f10a 0210 	add.w	r2, sl, #16
  408d2c:	6831      	ldr	r1, [r6, #0]
  408d2e:	461d      	mov	r5, r3
  408d30:	46d0      	mov	r8, sl
  408d32:	6011      	str	r1, [r2, #0]
  408d34:	6873      	ldr	r3, [r6, #4]
  408d36:	6053      	str	r3, [r2, #4]
  408d38:	68b3      	ldr	r3, [r6, #8]
  408d3a:	6093      	str	r3, [r2, #8]
  408d3c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408d40:	e7b8      	b.n	408cb4 <_realloc_r+0xd8>
  408d42:	eb08 0504 	add.w	r5, r8, r4
  408d46:	f042 0601 	orr.w	r6, r2, #1
  408d4a:	431c      	orrs	r4, r3
  408d4c:	4648      	mov	r0, r9
  408d4e:	442a      	add	r2, r5
  408d50:	f105 0108 	add.w	r1, r5, #8
  408d54:	f8c8 4004 	str.w	r4, [r8, #4]
  408d58:	606e      	str	r6, [r5, #4]
  408d5a:	6853      	ldr	r3, [r2, #4]
  408d5c:	f043 0301 	orr.w	r3, r3, #1
  408d60:	6053      	str	r3, [r2, #4]
  408d62:	f7fe fdc3 	bl	4078ec <_free_r>
  408d66:	e7b3      	b.n	408cd0 <_realloc_r+0xf4>
  408d68:	4639      	mov	r1, r7
  408d6a:	4648      	mov	r0, r9
  408d6c:	f7ff f8d0 	bl	407f10 <_malloc_r>
  408d70:	4607      	mov	r7, r0
  408d72:	2800      	cmp	r0, #0
  408d74:	d0ac      	beq.n	408cd0 <_realloc_r+0xf4>
  408d76:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408d7a:	f1a0 0108 	sub.w	r1, r0, #8
  408d7e:	f023 0201 	bic.w	r2, r3, #1
  408d82:	4442      	add	r2, r8
  408d84:	4291      	cmp	r1, r2
  408d86:	f000 80b4 	beq.w	408ef2 <_realloc_r+0x316>
  408d8a:	1f2a      	subs	r2, r5, #4
  408d8c:	2a24      	cmp	r2, #36	; 0x24
  408d8e:	f200 80a1 	bhi.w	408ed4 <_realloc_r+0x2f8>
  408d92:	2a13      	cmp	r2, #19
  408d94:	d86a      	bhi.n	408e6c <_realloc_r+0x290>
  408d96:	4603      	mov	r3, r0
  408d98:	4632      	mov	r2, r6
  408d9a:	6811      	ldr	r1, [r2, #0]
  408d9c:	6019      	str	r1, [r3, #0]
  408d9e:	6851      	ldr	r1, [r2, #4]
  408da0:	6059      	str	r1, [r3, #4]
  408da2:	6892      	ldr	r2, [r2, #8]
  408da4:	609a      	str	r2, [r3, #8]
  408da6:	4631      	mov	r1, r6
  408da8:	4648      	mov	r0, r9
  408daa:	f7fe fd9f 	bl	4078ec <_free_r>
  408dae:	e78f      	b.n	408cd0 <_realloc_r+0xf4>
  408db0:	4611      	mov	r1, r2
  408db2:	b003      	add	sp, #12
  408db4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408db8:	f7ff b8aa 	b.w	407f10 <_malloc_r>
  408dbc:	68ca      	ldr	r2, [r1, #12]
  408dbe:	4637      	mov	r7, r6
  408dc0:	6889      	ldr	r1, [r1, #8]
  408dc2:	4605      	mov	r5, r0
  408dc4:	60ca      	str	r2, [r1, #12]
  408dc6:	6091      	str	r1, [r2, #8]
  408dc8:	e774      	b.n	408cb4 <_realloc_r+0xd8>
  408dca:	230c      	movs	r3, #12
  408dcc:	2000      	movs	r0, #0
  408dce:	f8c9 3000 	str.w	r3, [r9]
  408dd2:	e781      	b.n	408cd8 <_realloc_r+0xfc>
  408dd4:	6841      	ldr	r1, [r0, #4]
  408dd6:	f104 0010 	add.w	r0, r4, #16
  408dda:	f021 0103 	bic.w	r1, r1, #3
  408dde:	4429      	add	r1, r5
  408de0:	4281      	cmp	r1, r0
  408de2:	da63      	bge.n	408eac <_realloc_r+0x2d0>
  408de4:	07db      	lsls	r3, r3, #31
  408de6:	d4bf      	bmi.n	408d68 <_realloc_r+0x18c>
  408de8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  408dec:	ebc3 0a08 	rsb	sl, r3, r8
  408df0:	f8da 3004 	ldr.w	r3, [sl, #4]
  408df4:	f023 0303 	bic.w	r3, r3, #3
  408df8:	eb01 0c03 	add.w	ip, r1, r3
  408dfc:	4560      	cmp	r0, ip
  408dfe:	f73f af78 	bgt.w	408cf2 <_realloc_r+0x116>
  408e02:	4657      	mov	r7, sl
  408e04:	1f2a      	subs	r2, r5, #4
  408e06:	f8da 300c 	ldr.w	r3, [sl, #12]
  408e0a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  408e0e:	2a24      	cmp	r2, #36	; 0x24
  408e10:	60cb      	str	r3, [r1, #12]
  408e12:	6099      	str	r1, [r3, #8]
  408e14:	f200 80b8 	bhi.w	408f88 <_realloc_r+0x3ac>
  408e18:	2a13      	cmp	r2, #19
  408e1a:	f240 80a8 	bls.w	408f6e <_realloc_r+0x392>
  408e1e:	6833      	ldr	r3, [r6, #0]
  408e20:	2a1b      	cmp	r2, #27
  408e22:	f8ca 3008 	str.w	r3, [sl, #8]
  408e26:	6873      	ldr	r3, [r6, #4]
  408e28:	f8ca 300c 	str.w	r3, [sl, #12]
  408e2c:	f200 80b5 	bhi.w	408f9a <_realloc_r+0x3be>
  408e30:	3608      	adds	r6, #8
  408e32:	f10a 0310 	add.w	r3, sl, #16
  408e36:	6832      	ldr	r2, [r6, #0]
  408e38:	601a      	str	r2, [r3, #0]
  408e3a:	6872      	ldr	r2, [r6, #4]
  408e3c:	605a      	str	r2, [r3, #4]
  408e3e:	68b2      	ldr	r2, [r6, #8]
  408e40:	609a      	str	r2, [r3, #8]
  408e42:	ebc4 030c 	rsb	r3, r4, ip
  408e46:	eb0a 0204 	add.w	r2, sl, r4
  408e4a:	4648      	mov	r0, r9
  408e4c:	f043 0301 	orr.w	r3, r3, #1
  408e50:	f8cb 2008 	str.w	r2, [fp, #8]
  408e54:	6053      	str	r3, [r2, #4]
  408e56:	f8da 3004 	ldr.w	r3, [sl, #4]
  408e5a:	f003 0301 	and.w	r3, r3, #1
  408e5e:	431c      	orrs	r4, r3
  408e60:	f8ca 4004 	str.w	r4, [sl, #4]
  408e64:	f7ff fbac 	bl	4085c0 <__malloc_unlock>
  408e68:	4638      	mov	r0, r7
  408e6a:	e735      	b.n	408cd8 <_realloc_r+0xfc>
  408e6c:	6833      	ldr	r3, [r6, #0]
  408e6e:	2a1b      	cmp	r2, #27
  408e70:	6003      	str	r3, [r0, #0]
  408e72:	6873      	ldr	r3, [r6, #4]
  408e74:	6043      	str	r3, [r0, #4]
  408e76:	d831      	bhi.n	408edc <_realloc_r+0x300>
  408e78:	f100 0308 	add.w	r3, r0, #8
  408e7c:	f106 0208 	add.w	r2, r6, #8
  408e80:	e78b      	b.n	408d9a <_realloc_r+0x1be>
  408e82:	463b      	mov	r3, r7
  408e84:	6832      	ldr	r2, [r6, #0]
  408e86:	4675      	mov	r5, lr
  408e88:	46d0      	mov	r8, sl
  408e8a:	601a      	str	r2, [r3, #0]
  408e8c:	6872      	ldr	r2, [r6, #4]
  408e8e:	605a      	str	r2, [r3, #4]
  408e90:	68b2      	ldr	r2, [r6, #8]
  408e92:	609a      	str	r2, [r3, #8]
  408e94:	f8da 3004 	ldr.w	r3, [sl, #4]
  408e98:	e70c      	b.n	408cb4 <_realloc_r+0xd8>
  408e9a:	4631      	mov	r1, r6
  408e9c:	4638      	mov	r0, r7
  408e9e:	461d      	mov	r5, r3
  408ea0:	46d0      	mov	r8, sl
  408ea2:	f7ff fb29 	bl	4084f8 <memmove>
  408ea6:	f8da 3004 	ldr.w	r3, [sl, #4]
  408eaa:	e703      	b.n	408cb4 <_realloc_r+0xd8>
  408eac:	1b0b      	subs	r3, r1, r4
  408eae:	eb08 0204 	add.w	r2, r8, r4
  408eb2:	4648      	mov	r0, r9
  408eb4:	f043 0301 	orr.w	r3, r3, #1
  408eb8:	f8cb 2008 	str.w	r2, [fp, #8]
  408ebc:	6053      	str	r3, [r2, #4]
  408ebe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408ec2:	f003 0301 	and.w	r3, r3, #1
  408ec6:	431c      	orrs	r4, r3
  408ec8:	f846 4c04 	str.w	r4, [r6, #-4]
  408ecc:	f7ff fb78 	bl	4085c0 <__malloc_unlock>
  408ed0:	4630      	mov	r0, r6
  408ed2:	e701      	b.n	408cd8 <_realloc_r+0xfc>
  408ed4:	4631      	mov	r1, r6
  408ed6:	f7ff fb0f 	bl	4084f8 <memmove>
  408eda:	e764      	b.n	408da6 <_realloc_r+0x1ca>
  408edc:	68b3      	ldr	r3, [r6, #8]
  408ede:	2a24      	cmp	r2, #36	; 0x24
  408ee0:	6083      	str	r3, [r0, #8]
  408ee2:	68f3      	ldr	r3, [r6, #12]
  408ee4:	60c3      	str	r3, [r0, #12]
  408ee6:	d022      	beq.n	408f2e <_realloc_r+0x352>
  408ee8:	f100 0310 	add.w	r3, r0, #16
  408eec:	f106 0210 	add.w	r2, r6, #16
  408ef0:	e753      	b.n	408d9a <_realloc_r+0x1be>
  408ef2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408ef6:	4637      	mov	r7, r6
  408ef8:	f022 0203 	bic.w	r2, r2, #3
  408efc:	4415      	add	r5, r2
  408efe:	e6d9      	b.n	408cb4 <_realloc_r+0xd8>
  408f00:	4631      	mov	r1, r6
  408f02:	4638      	mov	r0, r7
  408f04:	4675      	mov	r5, lr
  408f06:	46d0      	mov	r8, sl
  408f08:	f7ff faf6 	bl	4084f8 <memmove>
  408f0c:	f8da 3004 	ldr.w	r3, [sl, #4]
  408f10:	e6d0      	b.n	408cb4 <_realloc_r+0xd8>
  408f12:	463a      	mov	r2, r7
  408f14:	e70a      	b.n	408d2c <_realloc_r+0x150>
  408f16:	68b3      	ldr	r3, [r6, #8]
  408f18:	2a24      	cmp	r2, #36	; 0x24
  408f1a:	f8ca 3010 	str.w	r3, [sl, #16]
  408f1e:	68f3      	ldr	r3, [r6, #12]
  408f20:	f8ca 3014 	str.w	r3, [sl, #20]
  408f24:	d018      	beq.n	408f58 <_realloc_r+0x37c>
  408f26:	3610      	adds	r6, #16
  408f28:	f10a 0318 	add.w	r3, sl, #24
  408f2c:	e7aa      	b.n	408e84 <_realloc_r+0x2a8>
  408f2e:	6931      	ldr	r1, [r6, #16]
  408f30:	f100 0318 	add.w	r3, r0, #24
  408f34:	f106 0218 	add.w	r2, r6, #24
  408f38:	6101      	str	r1, [r0, #16]
  408f3a:	6971      	ldr	r1, [r6, #20]
  408f3c:	6141      	str	r1, [r0, #20]
  408f3e:	e72c      	b.n	408d9a <_realloc_r+0x1be>
  408f40:	68b1      	ldr	r1, [r6, #8]
  408f42:	2a24      	cmp	r2, #36	; 0x24
  408f44:	f8ca 1010 	str.w	r1, [sl, #16]
  408f48:	68f1      	ldr	r1, [r6, #12]
  408f4a:	f8ca 1014 	str.w	r1, [sl, #20]
  408f4e:	d010      	beq.n	408f72 <_realloc_r+0x396>
  408f50:	3610      	adds	r6, #16
  408f52:	f10a 0218 	add.w	r2, sl, #24
  408f56:	e6e9      	b.n	408d2c <_realloc_r+0x150>
  408f58:	6932      	ldr	r2, [r6, #16]
  408f5a:	f10a 0320 	add.w	r3, sl, #32
  408f5e:	3618      	adds	r6, #24
  408f60:	f8ca 2018 	str.w	r2, [sl, #24]
  408f64:	f856 2c04 	ldr.w	r2, [r6, #-4]
  408f68:	f8ca 201c 	str.w	r2, [sl, #28]
  408f6c:	e78a      	b.n	408e84 <_realloc_r+0x2a8>
  408f6e:	463b      	mov	r3, r7
  408f70:	e761      	b.n	408e36 <_realloc_r+0x25a>
  408f72:	6931      	ldr	r1, [r6, #16]
  408f74:	f10a 0220 	add.w	r2, sl, #32
  408f78:	3618      	adds	r6, #24
  408f7a:	f8ca 1018 	str.w	r1, [sl, #24]
  408f7e:	f856 1c04 	ldr.w	r1, [r6, #-4]
  408f82:	f8ca 101c 	str.w	r1, [sl, #28]
  408f86:	e6d1      	b.n	408d2c <_realloc_r+0x150>
  408f88:	4631      	mov	r1, r6
  408f8a:	4638      	mov	r0, r7
  408f8c:	f8cd c004 	str.w	ip, [sp, #4]
  408f90:	f7ff fab2 	bl	4084f8 <memmove>
  408f94:	f8dd c004 	ldr.w	ip, [sp, #4]
  408f98:	e753      	b.n	408e42 <_realloc_r+0x266>
  408f9a:	68b3      	ldr	r3, [r6, #8]
  408f9c:	2a24      	cmp	r2, #36	; 0x24
  408f9e:	f8ca 3010 	str.w	r3, [sl, #16]
  408fa2:	68f3      	ldr	r3, [r6, #12]
  408fa4:	f8ca 3014 	str.w	r3, [sl, #20]
  408fa8:	d003      	beq.n	408fb2 <_realloc_r+0x3d6>
  408faa:	3610      	adds	r6, #16
  408fac:	f10a 0318 	add.w	r3, sl, #24
  408fb0:	e741      	b.n	408e36 <_realloc_r+0x25a>
  408fb2:	6932      	ldr	r2, [r6, #16]
  408fb4:	f10a 0320 	add.w	r3, sl, #32
  408fb8:	3618      	adds	r6, #24
  408fba:	f8ca 2018 	str.w	r2, [sl, #24]
  408fbe:	f856 2c04 	ldr.w	r2, [r6, #-4]
  408fc2:	f8ca 201c 	str.w	r2, [sl, #28]
  408fc6:	e736      	b.n	408e36 <_realloc_r+0x25a>
  408fc8:	204004a0 	.word	0x204004a0

00408fcc <_sbrk_r>:
  408fcc:	b538      	push	{r3, r4, r5, lr}
  408fce:	2300      	movs	r3, #0
  408fd0:	4c06      	ldr	r4, [pc, #24]	; (408fec <_sbrk_r+0x20>)
  408fd2:	4605      	mov	r5, r0
  408fd4:	4608      	mov	r0, r1
  408fd6:	6023      	str	r3, [r4, #0]
  408fd8:	f7f9 ffa2 	bl	402f20 <_sbrk>
  408fdc:	1c43      	adds	r3, r0, #1
  408fde:	d000      	beq.n	408fe2 <_sbrk_r+0x16>
  408fe0:	bd38      	pop	{r3, r4, r5, pc}
  408fe2:	6823      	ldr	r3, [r4, #0]
  408fe4:	2b00      	cmp	r3, #0
  408fe6:	d0fb      	beq.n	408fe0 <_sbrk_r+0x14>
  408fe8:	602b      	str	r3, [r5, #0]
  408fea:	bd38      	pop	{r3, r4, r5, pc}
  408fec:	2040c308 	.word	0x2040c308

00408ff0 <_raise_r>:
  408ff0:	291f      	cmp	r1, #31
  408ff2:	b538      	push	{r3, r4, r5, lr}
  408ff4:	4605      	mov	r5, r0
  408ff6:	d821      	bhi.n	40903c <_raise_r+0x4c>
  408ff8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  408ffc:	460c      	mov	r4, r1
  408ffe:	b19a      	cbz	r2, 409028 <_raise_r+0x38>
  409000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  409004:	b183      	cbz	r3, 409028 <_raise_r+0x38>
  409006:	2b01      	cmp	r3, #1
  409008:	d00c      	beq.n	409024 <_raise_r+0x34>
  40900a:	1c59      	adds	r1, r3, #1
  40900c:	d006      	beq.n	40901c <_raise_r+0x2c>
  40900e:	2500      	movs	r5, #0
  409010:	4620      	mov	r0, r4
  409012:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  409016:	4798      	blx	r3
  409018:	4628      	mov	r0, r5
  40901a:	bd38      	pop	{r3, r4, r5, pc}
  40901c:	2316      	movs	r3, #22
  40901e:	2001      	movs	r0, #1
  409020:	602b      	str	r3, [r5, #0]
  409022:	bd38      	pop	{r3, r4, r5, pc}
  409024:	2000      	movs	r0, #0
  409026:	bd38      	pop	{r3, r4, r5, pc}
  409028:	4628      	mov	r0, r5
  40902a:	f000 f829 	bl	409080 <_getpid_r>
  40902e:	4622      	mov	r2, r4
  409030:	4601      	mov	r1, r0
  409032:	4628      	mov	r0, r5
  409034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409038:	f000 b80e 	b.w	409058 <_kill_r>
  40903c:	2316      	movs	r3, #22
  40903e:	f04f 30ff 	mov.w	r0, #4294967295
  409042:	602b      	str	r3, [r5, #0]
  409044:	bd38      	pop	{r3, r4, r5, pc}
  409046:	bf00      	nop

00409048 <raise>:
  409048:	4b02      	ldr	r3, [pc, #8]	; (409054 <raise+0xc>)
  40904a:	4601      	mov	r1, r0
  40904c:	6818      	ldr	r0, [r3, #0]
  40904e:	f7ff bfcf 	b.w	408ff0 <_raise_r>
  409052:	bf00      	nop
  409054:	20400440 	.word	0x20400440

00409058 <_kill_r>:
  409058:	b538      	push	{r3, r4, r5, lr}
  40905a:	2300      	movs	r3, #0
  40905c:	4c07      	ldr	r4, [pc, #28]	; (40907c <_kill_r+0x24>)
  40905e:	4605      	mov	r5, r0
  409060:	4608      	mov	r0, r1
  409062:	4611      	mov	r1, r2
  409064:	6023      	str	r3, [r4, #0]
  409066:	f7f9 ff95 	bl	402f94 <_kill>
  40906a:	1c43      	adds	r3, r0, #1
  40906c:	d000      	beq.n	409070 <_kill_r+0x18>
  40906e:	bd38      	pop	{r3, r4, r5, pc}
  409070:	6823      	ldr	r3, [r4, #0]
  409072:	2b00      	cmp	r3, #0
  409074:	d0fb      	beq.n	40906e <_kill_r+0x16>
  409076:	602b      	str	r3, [r5, #0]
  409078:	bd38      	pop	{r3, r4, r5, pc}
  40907a:	bf00      	nop
  40907c:	2040c308 	.word	0x2040c308

00409080 <_getpid_r>:
  409080:	f7f9 bf8a 	b.w	402f98 <_getpid>

00409084 <__sread>:
  409084:	b510      	push	{r4, lr}
  409086:	460c      	mov	r4, r1
  409088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40908c:	f000 fa76 	bl	40957c <_read_r>
  409090:	2800      	cmp	r0, #0
  409092:	db03      	blt.n	40909c <__sread+0x18>
  409094:	6d23      	ldr	r3, [r4, #80]	; 0x50
  409096:	4403      	add	r3, r0
  409098:	6523      	str	r3, [r4, #80]	; 0x50
  40909a:	bd10      	pop	{r4, pc}
  40909c:	89a3      	ldrh	r3, [r4, #12]
  40909e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4090a2:	81a3      	strh	r3, [r4, #12]
  4090a4:	bd10      	pop	{r4, pc}
  4090a6:	bf00      	nop

004090a8 <__swrite>:
  4090a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4090ac:	461d      	mov	r5, r3
  4090ae:	898b      	ldrh	r3, [r1, #12]
  4090b0:	4616      	mov	r6, r2
  4090b2:	460c      	mov	r4, r1
  4090b4:	05da      	lsls	r2, r3, #23
  4090b6:	4607      	mov	r7, r0
  4090b8:	d506      	bpl.n	4090c8 <__swrite+0x20>
  4090ba:	2302      	movs	r3, #2
  4090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4090c0:	2200      	movs	r2, #0
  4090c2:	f000 fa47 	bl	409554 <_lseek_r>
  4090c6:	89a3      	ldrh	r3, [r4, #12]
  4090c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4090cc:	4638      	mov	r0, r7
  4090ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4090d2:	4632      	mov	r2, r6
  4090d4:	81a3      	strh	r3, [r4, #12]
  4090d6:	462b      	mov	r3, r5
  4090d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4090dc:	f000 b928 	b.w	409330 <_write_r>

004090e0 <__sseek>:
  4090e0:	b510      	push	{r4, lr}
  4090e2:	460c      	mov	r4, r1
  4090e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4090e8:	f000 fa34 	bl	409554 <_lseek_r>
  4090ec:	1c42      	adds	r2, r0, #1
  4090ee:	89a3      	ldrh	r3, [r4, #12]
  4090f0:	d004      	beq.n	4090fc <__sseek+0x1c>
  4090f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4090f6:	6520      	str	r0, [r4, #80]	; 0x50
  4090f8:	81a3      	strh	r3, [r4, #12]
  4090fa:	bd10      	pop	{r4, pc}
  4090fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409100:	81a3      	strh	r3, [r4, #12]
  409102:	bd10      	pop	{r4, pc}

00409104 <__sclose>:
  409104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409108:	f000 b9aa 	b.w	409460 <_close_r>

0040910c <__ssprint_r>:
  40910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409110:	6893      	ldr	r3, [r2, #8]
  409112:	b083      	sub	sp, #12
  409114:	4691      	mov	r9, r2
  409116:	f8d2 8000 	ldr.w	r8, [r2]
  40911a:	9001      	str	r0, [sp, #4]
  40911c:	2b00      	cmp	r3, #0
  40911e:	d073      	beq.n	409208 <__ssprint_r+0xfc>
  409120:	f04f 0b00 	mov.w	fp, #0
  409124:	460d      	mov	r5, r1
  409126:	6808      	ldr	r0, [r1, #0]
  409128:	688b      	ldr	r3, [r1, #8]
  40912a:	465c      	mov	r4, fp
  40912c:	2c00      	cmp	r4, #0
  40912e:	d046      	beq.n	4091be <__ssprint_r+0xb2>
  409130:	429c      	cmp	r4, r3
  409132:	461e      	mov	r6, r3
  409134:	469a      	mov	sl, r3
  409136:	d349      	bcc.n	4091cc <__ssprint_r+0xc0>
  409138:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40913c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  409140:	d02d      	beq.n	40919e <__ssprint_r+0x92>
  409142:	696b      	ldr	r3, [r5, #20]
  409144:	1c62      	adds	r2, r4, #1
  409146:	6929      	ldr	r1, [r5, #16]
  409148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40914c:	1a46      	subs	r6, r0, r1
  40914e:	4610      	mov	r0, r2
  409150:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  409154:	4430      	add	r0, r6
  409156:	105f      	asrs	r7, r3, #1
  409158:	4287      	cmp	r7, r0
  40915a:	463a      	mov	r2, r7
  40915c:	d201      	bcs.n	409162 <__ssprint_r+0x56>
  40915e:	4607      	mov	r7, r0
  409160:	4602      	mov	r2, r0
  409162:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  409166:	d034      	beq.n	4091d2 <__ssprint_r+0xc6>
  409168:	4611      	mov	r1, r2
  40916a:	9801      	ldr	r0, [sp, #4]
  40916c:	f7fe fed0 	bl	407f10 <_malloc_r>
  409170:	4682      	mov	sl, r0
  409172:	2800      	cmp	r0, #0
  409174:	d04e      	beq.n	409214 <__ssprint_r+0x108>
  409176:	4632      	mov	r2, r6
  409178:	6929      	ldr	r1, [r5, #16]
  40917a:	f7fa fed7 	bl	403f2c <memcpy>
  40917e:	89aa      	ldrh	r2, [r5, #12]
  409180:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409184:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409188:	81aa      	strh	r2, [r5, #12]
  40918a:	eb0a 0006 	add.w	r0, sl, r6
  40918e:	1bba      	subs	r2, r7, r6
  409190:	f8c5 a010 	str.w	sl, [r5, #16]
  409194:	4626      	mov	r6, r4
  409196:	46a2      	mov	sl, r4
  409198:	6028      	str	r0, [r5, #0]
  40919a:	60aa      	str	r2, [r5, #8]
  40919c:	616f      	str	r7, [r5, #20]
  40919e:	4652      	mov	r2, sl
  4091a0:	4659      	mov	r1, fp
  4091a2:	f7ff f9a9 	bl	4084f8 <memmove>
  4091a6:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4091aa:	68ab      	ldr	r3, [r5, #8]
  4091ac:	6828      	ldr	r0, [r5, #0]
  4091ae:	1b14      	subs	r4, r2, r4
  4091b0:	1b9b      	subs	r3, r3, r6
  4091b2:	4450      	add	r0, sl
  4091b4:	60ab      	str	r3, [r5, #8]
  4091b6:	6028      	str	r0, [r5, #0]
  4091b8:	f8c9 4008 	str.w	r4, [r9, #8]
  4091bc:	b324      	cbz	r4, 409208 <__ssprint_r+0xfc>
  4091be:	f8d8 b000 	ldr.w	fp, [r8]
  4091c2:	f108 0808 	add.w	r8, r8, #8
  4091c6:	f858 4c04 	ldr.w	r4, [r8, #-4]
  4091ca:	e7af      	b.n	40912c <__ssprint_r+0x20>
  4091cc:	4626      	mov	r6, r4
  4091ce:	46a2      	mov	sl, r4
  4091d0:	e7e5      	b.n	40919e <__ssprint_r+0x92>
  4091d2:	9801      	ldr	r0, [sp, #4]
  4091d4:	f7ff fd02 	bl	408bdc <_realloc_r>
  4091d8:	4682      	mov	sl, r0
  4091da:	2800      	cmp	r0, #0
  4091dc:	d1d5      	bne.n	40918a <__ssprint_r+0x7e>
  4091de:	9c01      	ldr	r4, [sp, #4]
  4091e0:	6929      	ldr	r1, [r5, #16]
  4091e2:	4620      	mov	r0, r4
  4091e4:	f7fe fb82 	bl	4078ec <_free_r>
  4091e8:	230c      	movs	r3, #12
  4091ea:	6023      	str	r3, [r4, #0]
  4091ec:	89ab      	ldrh	r3, [r5, #12]
  4091ee:	2200      	movs	r2, #0
  4091f0:	f04f 30ff 	mov.w	r0, #4294967295
  4091f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4091f8:	81ab      	strh	r3, [r5, #12]
  4091fa:	f8c9 2008 	str.w	r2, [r9, #8]
  4091fe:	f8c9 2004 	str.w	r2, [r9, #4]
  409202:	b003      	add	sp, #12
  409204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409208:	2000      	movs	r0, #0
  40920a:	f8c9 0004 	str.w	r0, [r9, #4]
  40920e:	b003      	add	sp, #12
  409210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409214:	230c      	movs	r3, #12
  409216:	9a01      	ldr	r2, [sp, #4]
  409218:	6013      	str	r3, [r2, #0]
  40921a:	e7e7      	b.n	4091ec <__ssprint_r+0xe0>

0040921c <__swbuf_r>:
  40921c:	b570      	push	{r4, r5, r6, lr}
  40921e:	460d      	mov	r5, r1
  409220:	4614      	mov	r4, r2
  409222:	4606      	mov	r6, r0
  409224:	b110      	cbz	r0, 40922c <__swbuf_r+0x10>
  409226:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409228:	2b00      	cmp	r3, #0
  40922a:	d048      	beq.n	4092be <__swbuf_r+0xa2>
  40922c:	89a2      	ldrh	r2, [r4, #12]
  40922e:	69a3      	ldr	r3, [r4, #24]
  409230:	b291      	uxth	r1, r2
  409232:	60a3      	str	r3, [r4, #8]
  409234:	0708      	lsls	r0, r1, #28
  409236:	d538      	bpl.n	4092aa <__swbuf_r+0x8e>
  409238:	6923      	ldr	r3, [r4, #16]
  40923a:	2b00      	cmp	r3, #0
  40923c:	d035      	beq.n	4092aa <__swbuf_r+0x8e>
  40923e:	0489      	lsls	r1, r1, #18
  409240:	b2ed      	uxtb	r5, r5
  409242:	d515      	bpl.n	409270 <__swbuf_r+0x54>
  409244:	6822      	ldr	r2, [r4, #0]
  409246:	6961      	ldr	r1, [r4, #20]
  409248:	1ad3      	subs	r3, r2, r3
  40924a:	428b      	cmp	r3, r1
  40924c:	da1c      	bge.n	409288 <__swbuf_r+0x6c>
  40924e:	3301      	adds	r3, #1
  409250:	68a1      	ldr	r1, [r4, #8]
  409252:	1c50      	adds	r0, r2, #1
  409254:	3901      	subs	r1, #1
  409256:	6020      	str	r0, [r4, #0]
  409258:	60a1      	str	r1, [r4, #8]
  40925a:	7015      	strb	r5, [r2, #0]
  40925c:	6962      	ldr	r2, [r4, #20]
  40925e:	429a      	cmp	r2, r3
  409260:	d01a      	beq.n	409298 <__swbuf_r+0x7c>
  409262:	2d0a      	cmp	r5, #10
  409264:	d102      	bne.n	40926c <__swbuf_r+0x50>
  409266:	7b23      	ldrb	r3, [r4, #12]
  409268:	07db      	lsls	r3, r3, #31
  40926a:	d415      	bmi.n	409298 <__swbuf_r+0x7c>
  40926c:	4628      	mov	r0, r5
  40926e:	bd70      	pop	{r4, r5, r6, pc}
  409270:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409276:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40927a:	81a2      	strh	r2, [r4, #12]
  40927c:	6822      	ldr	r2, [r4, #0]
  40927e:	6661      	str	r1, [r4, #100]	; 0x64
  409280:	1ad3      	subs	r3, r2, r3
  409282:	6961      	ldr	r1, [r4, #20]
  409284:	428b      	cmp	r3, r1
  409286:	dbe2      	blt.n	40924e <__swbuf_r+0x32>
  409288:	4630      	mov	r0, r6
  40928a:	4621      	mov	r1, r4
  40928c:	f7fe f9bc 	bl	407608 <_fflush_r>
  409290:	b940      	cbnz	r0, 4092a4 <__swbuf_r+0x88>
  409292:	6822      	ldr	r2, [r4, #0]
  409294:	2301      	movs	r3, #1
  409296:	e7db      	b.n	409250 <__swbuf_r+0x34>
  409298:	4630      	mov	r0, r6
  40929a:	4621      	mov	r1, r4
  40929c:	f7fe f9b4 	bl	407608 <_fflush_r>
  4092a0:	2800      	cmp	r0, #0
  4092a2:	d0e3      	beq.n	40926c <__swbuf_r+0x50>
  4092a4:	f04f 30ff 	mov.w	r0, #4294967295
  4092a8:	bd70      	pop	{r4, r5, r6, pc}
  4092aa:	4630      	mov	r0, r6
  4092ac:	4621      	mov	r1, r4
  4092ae:	f7fd f879 	bl	4063a4 <__swsetup_r>
  4092b2:	2800      	cmp	r0, #0
  4092b4:	d1f6      	bne.n	4092a4 <__swbuf_r+0x88>
  4092b6:	89a2      	ldrh	r2, [r4, #12]
  4092b8:	6923      	ldr	r3, [r4, #16]
  4092ba:	b291      	uxth	r1, r2
  4092bc:	e7bf      	b.n	40923e <__swbuf_r+0x22>
  4092be:	f7fe fa3d 	bl	40773c <__sinit>
  4092c2:	e7b3      	b.n	40922c <__swbuf_r+0x10>

004092c4 <_wcrtomb_r>:
  4092c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4092c8:	4605      	mov	r5, r0
  4092ca:	b086      	sub	sp, #24
  4092cc:	461e      	mov	r6, r3
  4092ce:	460c      	mov	r4, r1
  4092d0:	b1a1      	cbz	r1, 4092fc <_wcrtomb_r+0x38>
  4092d2:	4b10      	ldr	r3, [pc, #64]	; (409314 <_wcrtomb_r+0x50>)
  4092d4:	4617      	mov	r7, r2
  4092d6:	f8d3 8000 	ldr.w	r8, [r3]
  4092da:	f7fe fd99 	bl	407e10 <__locale_charset>
  4092de:	9600      	str	r6, [sp, #0]
  4092e0:	4603      	mov	r3, r0
  4092e2:	4621      	mov	r1, r4
  4092e4:	4628      	mov	r0, r5
  4092e6:	463a      	mov	r2, r7
  4092e8:	47c0      	blx	r8
  4092ea:	1c43      	adds	r3, r0, #1
  4092ec:	d103      	bne.n	4092f6 <_wcrtomb_r+0x32>
  4092ee:	2200      	movs	r2, #0
  4092f0:	238a      	movs	r3, #138	; 0x8a
  4092f2:	6032      	str	r2, [r6, #0]
  4092f4:	602b      	str	r3, [r5, #0]
  4092f6:	b006      	add	sp, #24
  4092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4092fc:	4b05      	ldr	r3, [pc, #20]	; (409314 <_wcrtomb_r+0x50>)
  4092fe:	681f      	ldr	r7, [r3, #0]
  409300:	f7fe fd86 	bl	407e10 <__locale_charset>
  409304:	9600      	str	r6, [sp, #0]
  409306:	4603      	mov	r3, r0
  409308:	4622      	mov	r2, r4
  40930a:	4628      	mov	r0, r5
  40930c:	a903      	add	r1, sp, #12
  40930e:	47b8      	blx	r7
  409310:	e7eb      	b.n	4092ea <_wcrtomb_r+0x26>
  409312:	bf00      	nop
  409314:	204008b0 	.word	0x204008b0

00409318 <__ascii_wctomb>:
  409318:	b119      	cbz	r1, 409322 <__ascii_wctomb+0xa>
  40931a:	2aff      	cmp	r2, #255	; 0xff
  40931c:	d803      	bhi.n	409326 <__ascii_wctomb+0xe>
  40931e:	700a      	strb	r2, [r1, #0]
  409320:	2101      	movs	r1, #1
  409322:	4608      	mov	r0, r1
  409324:	4770      	bx	lr
  409326:	238a      	movs	r3, #138	; 0x8a
  409328:	f04f 31ff 	mov.w	r1, #4294967295
  40932c:	6003      	str	r3, [r0, #0]
  40932e:	e7f8      	b.n	409322 <__ascii_wctomb+0xa>

00409330 <_write_r>:
  409330:	b570      	push	{r4, r5, r6, lr}
  409332:	4c08      	ldr	r4, [pc, #32]	; (409354 <_write_r+0x24>)
  409334:	2500      	movs	r5, #0
  409336:	4606      	mov	r6, r0
  409338:	4608      	mov	r0, r1
  40933a:	4611      	mov	r1, r2
  40933c:	461a      	mov	r2, r3
  40933e:	6025      	str	r5, [r4, #0]
  409340:	f7f9 fe0c 	bl	402f5c <_write>
  409344:	1c43      	adds	r3, r0, #1
  409346:	d000      	beq.n	40934a <_write_r+0x1a>
  409348:	bd70      	pop	{r4, r5, r6, pc}
  40934a:	6823      	ldr	r3, [r4, #0]
  40934c:	2b00      	cmp	r3, #0
  40934e:	d0fb      	beq.n	409348 <_write_r+0x18>
  409350:	6033      	str	r3, [r6, #0]
  409352:	bd70      	pop	{r4, r5, r6, pc}
  409354:	2040c308 	.word	0x2040c308

00409358 <__register_exitproc>:
  409358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40935c:	4c26      	ldr	r4, [pc, #152]	; (4093f8 <__register_exitproc+0xa0>)
  40935e:	4606      	mov	r6, r0
  409360:	4688      	mov	r8, r1
  409362:	4691      	mov	r9, r2
  409364:	6825      	ldr	r5, [r4, #0]
  409366:	469a      	mov	sl, r3
  409368:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40936c:	2c00      	cmp	r4, #0
  40936e:	d03a      	beq.n	4093e6 <__register_exitproc+0x8e>
  409370:	6860      	ldr	r0, [r4, #4]
  409372:	281f      	cmp	r0, #31
  409374:	dc19      	bgt.n	4093aa <__register_exitproc+0x52>
  409376:	1c41      	adds	r1, r0, #1
  409378:	b186      	cbz	r6, 40939c <__register_exitproc+0x44>
  40937a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40937e:	2201      	movs	r2, #1
  409380:	2e02      	cmp	r6, #2
  409382:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  409386:	fa02 f200 	lsl.w	r2, r2, r0
  40938a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40938e:	ea43 0302 	orr.w	r3, r3, r2
  409392:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  409396:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40939a:	d01e      	beq.n	4093da <__register_exitproc+0x82>
  40939c:	1c83      	adds	r3, r0, #2
  40939e:	6061      	str	r1, [r4, #4]
  4093a0:	2000      	movs	r0, #0
  4093a2:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  4093a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4093aa:	4b14      	ldr	r3, [pc, #80]	; (4093fc <__register_exitproc+0xa4>)
  4093ac:	b303      	cbz	r3, 4093f0 <__register_exitproc+0x98>
  4093ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4093b2:	f3af 8000 	nop.w
  4093b6:	4604      	mov	r4, r0
  4093b8:	b1d0      	cbz	r0, 4093f0 <__register_exitproc+0x98>
  4093ba:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4093be:	2700      	movs	r7, #0
  4093c0:	2101      	movs	r1, #1
  4093c2:	6003      	str	r3, [r0, #0]
  4093c4:	4638      	mov	r0, r7
  4093c6:	6067      	str	r7, [r4, #4]
  4093c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4093cc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4093d0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4093d4:	2e00      	cmp	r6, #0
  4093d6:	d0e1      	beq.n	40939c <__register_exitproc+0x44>
  4093d8:	e7cf      	b.n	40937a <__register_exitproc+0x22>
  4093da:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4093de:	431a      	orrs	r2, r3
  4093e0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4093e4:	e7da      	b.n	40939c <__register_exitproc+0x44>
  4093e6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4093ea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4093ee:	e7bf      	b.n	409370 <__register_exitproc+0x18>
  4093f0:	f04f 30ff 	mov.w	r0, #4294967295
  4093f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4093f8:	00409dfc 	.word	0x00409dfc
  4093fc:	00000000 	.word	0x00000000

00409400 <_calloc_r>:
  409400:	b510      	push	{r4, lr}
  409402:	fb02 f101 	mul.w	r1, r2, r1
  409406:	f7fe fd83 	bl	407f10 <_malloc_r>
  40940a:	4604      	mov	r4, r0
  40940c:	b168      	cbz	r0, 40942a <_calloc_r+0x2a>
  40940e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409412:	f022 0203 	bic.w	r2, r2, #3
  409416:	3a04      	subs	r2, #4
  409418:	2a24      	cmp	r2, #36	; 0x24
  40941a:	d814      	bhi.n	409446 <_calloc_r+0x46>
  40941c:	2a13      	cmp	r2, #19
  40941e:	d806      	bhi.n	40942e <_calloc_r+0x2e>
  409420:	4603      	mov	r3, r0
  409422:	2200      	movs	r2, #0
  409424:	601a      	str	r2, [r3, #0]
  409426:	605a      	str	r2, [r3, #4]
  409428:	609a      	str	r2, [r3, #8]
  40942a:	4620      	mov	r0, r4
  40942c:	bd10      	pop	{r4, pc}
  40942e:	2100      	movs	r1, #0
  409430:	2a1b      	cmp	r2, #27
  409432:	6001      	str	r1, [r0, #0]
  409434:	6041      	str	r1, [r0, #4]
  409436:	d90b      	bls.n	409450 <_calloc_r+0x50>
  409438:	2a24      	cmp	r2, #36	; 0x24
  40943a:	6081      	str	r1, [r0, #8]
  40943c:	60c1      	str	r1, [r0, #12]
  40943e:	d00a      	beq.n	409456 <_calloc_r+0x56>
  409440:	f100 0310 	add.w	r3, r0, #16
  409444:	e7ed      	b.n	409422 <_calloc_r+0x22>
  409446:	2100      	movs	r1, #0
  409448:	f7fa fe0a 	bl	404060 <memset>
  40944c:	4620      	mov	r0, r4
  40944e:	bd10      	pop	{r4, pc}
  409450:	f100 0308 	add.w	r3, r0, #8
  409454:	e7e5      	b.n	409422 <_calloc_r+0x22>
  409456:	6101      	str	r1, [r0, #16]
  409458:	f100 0318 	add.w	r3, r0, #24
  40945c:	6141      	str	r1, [r0, #20]
  40945e:	e7e0      	b.n	409422 <_calloc_r+0x22>

00409460 <_close_r>:
  409460:	b538      	push	{r3, r4, r5, lr}
  409462:	2300      	movs	r3, #0
  409464:	4c06      	ldr	r4, [pc, #24]	; (409480 <_close_r+0x20>)
  409466:	4605      	mov	r5, r0
  409468:	4608      	mov	r0, r1
  40946a:	6023      	str	r3, [r4, #0]
  40946c:	f7f9 fd72 	bl	402f54 <_close>
  409470:	1c43      	adds	r3, r0, #1
  409472:	d000      	beq.n	409476 <_close_r+0x16>
  409474:	bd38      	pop	{r3, r4, r5, pc}
  409476:	6823      	ldr	r3, [r4, #0]
  409478:	2b00      	cmp	r3, #0
  40947a:	d0fb      	beq.n	409474 <_close_r+0x14>
  40947c:	602b      	str	r3, [r5, #0]
  40947e:	bd38      	pop	{r3, r4, r5, pc}
  409480:	2040c308 	.word	0x2040c308

00409484 <_fclose_r>:
  409484:	2900      	cmp	r1, #0
  409486:	d03d      	beq.n	409504 <_fclose_r+0x80>
  409488:	b570      	push	{r4, r5, r6, lr}
  40948a:	4605      	mov	r5, r0
  40948c:	460c      	mov	r4, r1
  40948e:	b108      	cbz	r0, 409494 <_fclose_r+0x10>
  409490:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409492:	b37b      	cbz	r3, 4094f4 <_fclose_r+0x70>
  409494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409498:	b90b      	cbnz	r3, 40949e <_fclose_r+0x1a>
  40949a:	2000      	movs	r0, #0
  40949c:	bd70      	pop	{r4, r5, r6, pc}
  40949e:	4628      	mov	r0, r5
  4094a0:	4621      	mov	r1, r4
  4094a2:	f7fe f80d 	bl	4074c0 <__sflush_r>
  4094a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4094a8:	4606      	mov	r6, r0
  4094aa:	b133      	cbz	r3, 4094ba <_fclose_r+0x36>
  4094ac:	4628      	mov	r0, r5
  4094ae:	69e1      	ldr	r1, [r4, #28]
  4094b0:	4798      	blx	r3
  4094b2:	2800      	cmp	r0, #0
  4094b4:	bfb8      	it	lt
  4094b6:	f04f 36ff 	movlt.w	r6, #4294967295
  4094ba:	89a3      	ldrh	r3, [r4, #12]
  4094bc:	061b      	lsls	r3, r3, #24
  4094be:	d41c      	bmi.n	4094fa <_fclose_r+0x76>
  4094c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4094c2:	b141      	cbz	r1, 4094d6 <_fclose_r+0x52>
  4094c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4094c8:	4299      	cmp	r1, r3
  4094ca:	d002      	beq.n	4094d2 <_fclose_r+0x4e>
  4094cc:	4628      	mov	r0, r5
  4094ce:	f7fe fa0d 	bl	4078ec <_free_r>
  4094d2:	2300      	movs	r3, #0
  4094d4:	6323      	str	r3, [r4, #48]	; 0x30
  4094d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4094d8:	b121      	cbz	r1, 4094e4 <_fclose_r+0x60>
  4094da:	4628      	mov	r0, r5
  4094dc:	f7fe fa06 	bl	4078ec <_free_r>
  4094e0:	2300      	movs	r3, #0
  4094e2:	6463      	str	r3, [r4, #68]	; 0x44
  4094e4:	f7fe f930 	bl	407748 <__sfp_lock_acquire>
  4094e8:	2300      	movs	r3, #0
  4094ea:	81a3      	strh	r3, [r4, #12]
  4094ec:	f7fe f92e 	bl	40774c <__sfp_lock_release>
  4094f0:	4630      	mov	r0, r6
  4094f2:	bd70      	pop	{r4, r5, r6, pc}
  4094f4:	f7fe f922 	bl	40773c <__sinit>
  4094f8:	e7cc      	b.n	409494 <_fclose_r+0x10>
  4094fa:	4628      	mov	r0, r5
  4094fc:	6921      	ldr	r1, [r4, #16]
  4094fe:	f7fe f9f5 	bl	4078ec <_free_r>
  409502:	e7dd      	b.n	4094c0 <_fclose_r+0x3c>
  409504:	2000      	movs	r0, #0
  409506:	4770      	bx	lr

00409508 <_fstat_r>:
  409508:	b538      	push	{r3, r4, r5, lr}
  40950a:	2300      	movs	r3, #0
  40950c:	4c07      	ldr	r4, [pc, #28]	; (40952c <_fstat_r+0x24>)
  40950e:	4605      	mov	r5, r0
  409510:	4608      	mov	r0, r1
  409512:	4611      	mov	r1, r2
  409514:	6023      	str	r3, [r4, #0]
  409516:	f7f9 fd29 	bl	402f6c <_fstat>
  40951a:	1c43      	adds	r3, r0, #1
  40951c:	d000      	beq.n	409520 <_fstat_r+0x18>
  40951e:	bd38      	pop	{r3, r4, r5, pc}
  409520:	6823      	ldr	r3, [r4, #0]
  409522:	2b00      	cmp	r3, #0
  409524:	d0fb      	beq.n	40951e <_fstat_r+0x16>
  409526:	602b      	str	r3, [r5, #0]
  409528:	bd38      	pop	{r3, r4, r5, pc}
  40952a:	bf00      	nop
  40952c:	2040c308 	.word	0x2040c308

00409530 <_isatty_r>:
  409530:	b538      	push	{r3, r4, r5, lr}
  409532:	2300      	movs	r3, #0
  409534:	4c06      	ldr	r4, [pc, #24]	; (409550 <_isatty_r+0x20>)
  409536:	4605      	mov	r5, r0
  409538:	4608      	mov	r0, r1
  40953a:	6023      	str	r3, [r4, #0]
  40953c:	f7f9 fd1c 	bl	402f78 <_isatty>
  409540:	1c43      	adds	r3, r0, #1
  409542:	d000      	beq.n	409546 <_isatty_r+0x16>
  409544:	bd38      	pop	{r3, r4, r5, pc}
  409546:	6823      	ldr	r3, [r4, #0]
  409548:	2b00      	cmp	r3, #0
  40954a:	d0fb      	beq.n	409544 <_isatty_r+0x14>
  40954c:	602b      	str	r3, [r5, #0]
  40954e:	bd38      	pop	{r3, r4, r5, pc}
  409550:	2040c308 	.word	0x2040c308

00409554 <_lseek_r>:
  409554:	b570      	push	{r4, r5, r6, lr}
  409556:	4c08      	ldr	r4, [pc, #32]	; (409578 <_lseek_r+0x24>)
  409558:	2500      	movs	r5, #0
  40955a:	4606      	mov	r6, r0
  40955c:	4608      	mov	r0, r1
  40955e:	4611      	mov	r1, r2
  409560:	461a      	mov	r2, r3
  409562:	6025      	str	r5, [r4, #0]
  409564:	f7f9 fd0a 	bl	402f7c <_lseek>
  409568:	1c43      	adds	r3, r0, #1
  40956a:	d000      	beq.n	40956e <_lseek_r+0x1a>
  40956c:	bd70      	pop	{r4, r5, r6, pc}
  40956e:	6823      	ldr	r3, [r4, #0]
  409570:	2b00      	cmp	r3, #0
  409572:	d0fb      	beq.n	40956c <_lseek_r+0x18>
  409574:	6033      	str	r3, [r6, #0]
  409576:	bd70      	pop	{r4, r5, r6, pc}
  409578:	2040c308 	.word	0x2040c308

0040957c <_read_r>:
  40957c:	b570      	push	{r4, r5, r6, lr}
  40957e:	4c08      	ldr	r4, [pc, #32]	; (4095a0 <_read_r+0x24>)
  409580:	2500      	movs	r5, #0
  409582:	4606      	mov	r6, r0
  409584:	4608      	mov	r0, r1
  409586:	4611      	mov	r1, r2
  409588:	461a      	mov	r2, r3
  40958a:	6025      	str	r5, [r4, #0]
  40958c:	f7f9 fcea 	bl	402f64 <_read>
  409590:	1c43      	adds	r3, r0, #1
  409592:	d000      	beq.n	409596 <_read_r+0x1a>
  409594:	bd70      	pop	{r4, r5, r6, pc}
  409596:	6823      	ldr	r3, [r4, #0]
  409598:	2b00      	cmp	r3, #0
  40959a:	d0fb      	beq.n	409594 <_read_r+0x18>
  40959c:	6033      	str	r3, [r6, #0]
  40959e:	bd70      	pop	{r4, r5, r6, pc}
  4095a0:	2040c308 	.word	0x2040c308

004095a4 <__aeabi_uldivmod>:
  4095a4:	b953      	cbnz	r3, 4095bc <__aeabi_uldivmod+0x18>
  4095a6:	b94a      	cbnz	r2, 4095bc <__aeabi_uldivmod+0x18>
  4095a8:	2900      	cmp	r1, #0
  4095aa:	bf08      	it	eq
  4095ac:	2800      	cmpeq	r0, #0
  4095ae:	bf1c      	itt	ne
  4095b0:	f04f 31ff 	movne.w	r1, #4294967295
  4095b4:	f04f 30ff 	movne.w	r0, #4294967295
  4095b8:	f000 b83c 	b.w	409634 <__aeabi_idiv0>
  4095bc:	b082      	sub	sp, #8
  4095be:	46ec      	mov	ip, sp
  4095c0:	e92d 5000 	stmdb	sp!, {ip, lr}
  4095c4:	f000 f81e 	bl	409604 <__gnu_uldivmod_helper>
  4095c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4095cc:	b002      	add	sp, #8
  4095ce:	bc0c      	pop	{r2, r3}
  4095d0:	4770      	bx	lr
  4095d2:	bf00      	nop

004095d4 <__gnu_ldivmod_helper>:
  4095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4095d8:	4690      	mov	r8, r2
  4095da:	4606      	mov	r6, r0
  4095dc:	460f      	mov	r7, r1
  4095de:	461d      	mov	r5, r3
  4095e0:	9c06      	ldr	r4, [sp, #24]
  4095e2:	f000 f829 	bl	409638 <__divdi3>
  4095e6:	fb08 fc01 	mul.w	ip, r8, r1
  4095ea:	4686      	mov	lr, r0
  4095ec:	fba8 2300 	umull	r2, r3, r8, r0
  4095f0:	fb00 c505 	mla	r5, r0, r5, ip
  4095f4:	1ab2      	subs	r2, r6, r2
  4095f6:	442b      	add	r3, r5
  4095f8:	eb67 0303 	sbc.w	r3, r7, r3
  4095fc:	e9c4 2300 	strd	r2, r3, [r4]
  409600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409604 <__gnu_uldivmod_helper>:
  409604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409608:	461d      	mov	r5, r3
  40960a:	4617      	mov	r7, r2
  40960c:	4680      	mov	r8, r0
  40960e:	4689      	mov	r9, r1
  409610:	9e08      	ldr	r6, [sp, #32]
  409612:	f000 f953 	bl	4098bc <__udivdi3>
  409616:	fb00 f305 	mul.w	r3, r0, r5
  40961a:	fba0 4507 	umull	r4, r5, r0, r7
  40961e:	fb07 3701 	mla	r7, r7, r1, r3
  409622:	ebb8 0404 	subs.w	r4, r8, r4
  409626:	443d      	add	r5, r7
  409628:	eb69 0505 	sbc.w	r5, r9, r5
  40962c:	e9c6 4500 	strd	r4, r5, [r6]
  409630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409634 <__aeabi_idiv0>:
  409634:	4770      	bx	lr
  409636:	bf00      	nop

00409638 <__divdi3>:
  409638:	2900      	cmp	r1, #0
  40963a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40963e:	f2c0 80a2 	blt.w	409786 <__divdi3+0x14e>
  409642:	2600      	movs	r6, #0
  409644:	2b00      	cmp	r3, #0
  409646:	f2c0 8098 	blt.w	40977a <__divdi3+0x142>
  40964a:	468c      	mov	ip, r1
  40964c:	4690      	mov	r8, r2
  40964e:	469e      	mov	lr, r3
  409650:	4615      	mov	r5, r2
  409652:	4604      	mov	r4, r0
  409654:	460f      	mov	r7, r1
  409656:	bbcb      	cbnz	r3, 4096cc <__divdi3+0x94>
  409658:	428a      	cmp	r2, r1
  40965a:	d956      	bls.n	40970a <__divdi3+0xd2>
  40965c:	fab2 f382 	clz	r3, r2
  409660:	b13b      	cbz	r3, 409672 <__divdi3+0x3a>
  409662:	f1c3 0220 	rsb	r2, r3, #32
  409666:	409f      	lsls	r7, r3
  409668:	409d      	lsls	r5, r3
  40966a:	409c      	lsls	r4, r3
  40966c:	fa20 f202 	lsr.w	r2, r0, r2
  409670:	4317      	orrs	r7, r2
  409672:	0c28      	lsrs	r0, r5, #16
  409674:	0c22      	lsrs	r2, r4, #16
  409676:	fa1f fe85 	uxth.w	lr, r5
  40967a:	fbb7 f1f0 	udiv	r1, r7, r0
  40967e:	fb00 7711 	mls	r7, r0, r1, r7
  409682:	fb0e f301 	mul.w	r3, lr, r1
  409686:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40968a:	42bb      	cmp	r3, r7
  40968c:	d907      	bls.n	40969e <__divdi3+0x66>
  40968e:	197f      	adds	r7, r7, r5
  409690:	f080 8101 	bcs.w	409896 <__divdi3+0x25e>
  409694:	42bb      	cmp	r3, r7
  409696:	f240 80fe 	bls.w	409896 <__divdi3+0x25e>
  40969a:	3902      	subs	r1, #2
  40969c:	442f      	add	r7, r5
  40969e:	1aff      	subs	r7, r7, r3
  4096a0:	b2a4      	uxth	r4, r4
  4096a2:	fbb7 f3f0 	udiv	r3, r7, r0
  4096a6:	fb00 7713 	mls	r7, r0, r3, r7
  4096aa:	fb0e fe03 	mul.w	lr, lr, r3
  4096ae:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4096b2:	45be      	cmp	lr, r7
  4096b4:	d906      	bls.n	4096c4 <__divdi3+0x8c>
  4096b6:	197f      	adds	r7, r7, r5
  4096b8:	f080 80eb 	bcs.w	409892 <__divdi3+0x25a>
  4096bc:	45be      	cmp	lr, r7
  4096be:	f240 80e8 	bls.w	409892 <__divdi3+0x25a>
  4096c2:	3b02      	subs	r3, #2
  4096c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4096c8:	2200      	movs	r2, #0
  4096ca:	e003      	b.n	4096d4 <__divdi3+0x9c>
  4096cc:	428b      	cmp	r3, r1
  4096ce:	d90f      	bls.n	4096f0 <__divdi3+0xb8>
  4096d0:	2200      	movs	r2, #0
  4096d2:	4613      	mov	r3, r2
  4096d4:	1c34      	adds	r4, r6, #0
  4096d6:	f04f 0500 	mov.w	r5, #0
  4096da:	bf18      	it	ne
  4096dc:	2401      	movne	r4, #1
  4096de:	4260      	negs	r0, r4
  4096e0:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  4096e4:	4058      	eors	r0, r3
  4096e6:	4051      	eors	r1, r2
  4096e8:	1900      	adds	r0, r0, r4
  4096ea:	4169      	adcs	r1, r5
  4096ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4096f0:	fab3 f283 	clz	r2, r3
  4096f4:	2a00      	cmp	r2, #0
  4096f6:	f040 8083 	bne.w	409800 <__divdi3+0x1c8>
  4096fa:	4580      	cmp	r8, r0
  4096fc:	f240 80cd 	bls.w	40989a <__divdi3+0x262>
  409700:	428b      	cmp	r3, r1
  409702:	f0c0 80ca 	bcc.w	40989a <__divdi3+0x262>
  409706:	4613      	mov	r3, r2
  409708:	e7e4      	b.n	4096d4 <__divdi3+0x9c>
  40970a:	b912      	cbnz	r2, 409712 <__divdi3+0xda>
  40970c:	2301      	movs	r3, #1
  40970e:	fbb3 f5f2 	udiv	r5, r3, r2
  409712:	fab5 f285 	clz	r2, r5
  409716:	2a00      	cmp	r2, #0
  409718:	d13b      	bne.n	409792 <__divdi3+0x15a>
  40971a:	1b78      	subs	r0, r7, r5
  40971c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409720:	fa1f fc85 	uxth.w	ip, r5
  409724:	2201      	movs	r2, #1
  409726:	0c21      	lsrs	r1, r4, #16
  409728:	fbb0 f8fe 	udiv	r8, r0, lr
  40972c:	fb0e 0018 	mls	r0, lr, r8, r0
  409730:	fb0c f308 	mul.w	r3, ip, r8
  409734:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  409738:	42bb      	cmp	r3, r7
  40973a:	d908      	bls.n	40974e <__divdi3+0x116>
  40973c:	197f      	adds	r7, r7, r5
  40973e:	f080 80b0 	bcs.w	4098a2 <__divdi3+0x26a>
  409742:	42bb      	cmp	r3, r7
  409744:	f240 80ad 	bls.w	4098a2 <__divdi3+0x26a>
  409748:	f1a8 0802 	sub.w	r8, r8, #2
  40974c:	442f      	add	r7, r5
  40974e:	1aff      	subs	r7, r7, r3
  409750:	b2a4      	uxth	r4, r4
  409752:	fbb7 f3fe 	udiv	r3, r7, lr
  409756:	fb0e 7713 	mls	r7, lr, r3, r7
  40975a:	fb0c fc03 	mul.w	ip, ip, r3
  40975e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  409762:	45bc      	cmp	ip, r7
  409764:	d906      	bls.n	409774 <__divdi3+0x13c>
  409766:	197f      	adds	r7, r7, r5
  409768:	f080 8099 	bcs.w	40989e <__divdi3+0x266>
  40976c:	45bc      	cmp	ip, r7
  40976e:	f240 8096 	bls.w	40989e <__divdi3+0x266>
  409772:	3b02      	subs	r3, #2
  409774:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  409778:	e7ac      	b.n	4096d4 <__divdi3+0x9c>
  40977a:	4252      	negs	r2, r2
  40977c:	ea6f 0606 	mvn.w	r6, r6
  409780:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  409784:	e761      	b.n	40964a <__divdi3+0x12>
  409786:	4240      	negs	r0, r0
  409788:	f04f 36ff 	mov.w	r6, #4294967295
  40978c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409790:	e758      	b.n	409644 <__divdi3+0xc>
  409792:	4095      	lsls	r5, r2
  409794:	f1c2 0120 	rsb	r1, r2, #32
  409798:	fa07 f302 	lsl.w	r3, r7, r2
  40979c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4097a0:	40cf      	lsrs	r7, r1
  4097a2:	fa24 f101 	lsr.w	r1, r4, r1
  4097a6:	4094      	lsls	r4, r2
  4097a8:	fa1f fc85 	uxth.w	ip, r5
  4097ac:	4319      	orrs	r1, r3
  4097ae:	fbb7 f2fe 	udiv	r2, r7, lr
  4097b2:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4097b6:	fb0e 7712 	mls	r7, lr, r2, r7
  4097ba:	fb0c f302 	mul.w	r3, ip, r2
  4097be:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4097c2:	42bb      	cmp	r3, r7
  4097c4:	d905      	bls.n	4097d2 <__divdi3+0x19a>
  4097c6:	197f      	adds	r7, r7, r5
  4097c8:	d271      	bcs.n	4098ae <__divdi3+0x276>
  4097ca:	42bb      	cmp	r3, r7
  4097cc:	d96f      	bls.n	4098ae <__divdi3+0x276>
  4097ce:	3a02      	subs	r2, #2
  4097d0:	442f      	add	r7, r5
  4097d2:	1aff      	subs	r7, r7, r3
  4097d4:	b289      	uxth	r1, r1
  4097d6:	fbb7 f8fe 	udiv	r8, r7, lr
  4097da:	fb0e 7718 	mls	r7, lr, r8, r7
  4097de:	fb0c f008 	mul.w	r0, ip, r8
  4097e2:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4097e6:	4298      	cmp	r0, r3
  4097e8:	d906      	bls.n	4097f8 <__divdi3+0x1c0>
  4097ea:	195b      	adds	r3, r3, r5
  4097ec:	d261      	bcs.n	4098b2 <__divdi3+0x27a>
  4097ee:	4298      	cmp	r0, r3
  4097f0:	d95f      	bls.n	4098b2 <__divdi3+0x27a>
  4097f2:	f1a8 0802 	sub.w	r8, r8, #2
  4097f6:	442b      	add	r3, r5
  4097f8:	1a18      	subs	r0, r3, r0
  4097fa:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  4097fe:	e792      	b.n	409726 <__divdi3+0xee>
  409800:	f1c2 0720 	rsb	r7, r2, #32
  409804:	fa03 fe02 	lsl.w	lr, r3, r2
  409808:	fa08 f502 	lsl.w	r5, r8, r2
  40980c:	4091      	lsls	r1, r2
  40980e:	fa28 f307 	lsr.w	r3, r8, r7
  409812:	fa2c fc07 	lsr.w	ip, ip, r7
  409816:	40f8      	lsrs	r0, r7
  409818:	ea43 0e0e 	orr.w	lr, r3, lr
  40981c:	4308      	orrs	r0, r1
  40981e:	ea4f 481e 	mov.w	r8, lr, lsr #16
  409822:	0c07      	lsrs	r7, r0, #16
  409824:	fa1f fa8e 	uxth.w	sl, lr
  409828:	fbbc f9f8 	udiv	r9, ip, r8
  40982c:	fb08 cc19 	mls	ip, r8, r9, ip
  409830:	fb0a f109 	mul.w	r1, sl, r9
  409834:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  409838:	4561      	cmp	r1, ip
  40983a:	d907      	bls.n	40984c <__divdi3+0x214>
  40983c:	eb1c 0c0e 	adds.w	ip, ip, lr
  409840:	d232      	bcs.n	4098a8 <__divdi3+0x270>
  409842:	4561      	cmp	r1, ip
  409844:	d930      	bls.n	4098a8 <__divdi3+0x270>
  409846:	f1a9 0902 	sub.w	r9, r9, #2
  40984a:	44f4      	add	ip, lr
  40984c:	ebc1 0c0c 	rsb	ip, r1, ip
  409850:	b280      	uxth	r0, r0
  409852:	fbbc f3f8 	udiv	r3, ip, r8
  409856:	fb08 cc13 	mls	ip, r8, r3, ip
  40985a:	fb0a fa03 	mul.w	sl, sl, r3
  40985e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  409862:	458a      	cmp	sl, r1
  409864:	d906      	bls.n	409874 <__divdi3+0x23c>
  409866:	eb11 010e 	adds.w	r1, r1, lr
  40986a:	d225      	bcs.n	4098b8 <__divdi3+0x280>
  40986c:	458a      	cmp	sl, r1
  40986e:	d923      	bls.n	4098b8 <__divdi3+0x280>
  409870:	3b02      	subs	r3, #2
  409872:	4471      	add	r1, lr
  409874:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  409878:	ebca 0101 	rsb	r1, sl, r1
  40987c:	fba3 8905 	umull	r8, r9, r3, r5
  409880:	4549      	cmp	r1, r9
  409882:	d303      	bcc.n	40988c <__divdi3+0x254>
  409884:	d103      	bne.n	40988e <__divdi3+0x256>
  409886:	4094      	lsls	r4, r2
  409888:	4544      	cmp	r4, r8
  40988a:	d200      	bcs.n	40988e <__divdi3+0x256>
  40988c:	3b01      	subs	r3, #1
  40988e:	2200      	movs	r2, #0
  409890:	e720      	b.n	4096d4 <__divdi3+0x9c>
  409892:	3b01      	subs	r3, #1
  409894:	e716      	b.n	4096c4 <__divdi3+0x8c>
  409896:	3901      	subs	r1, #1
  409898:	e701      	b.n	40969e <__divdi3+0x66>
  40989a:	2301      	movs	r3, #1
  40989c:	e71a      	b.n	4096d4 <__divdi3+0x9c>
  40989e:	3b01      	subs	r3, #1
  4098a0:	e768      	b.n	409774 <__divdi3+0x13c>
  4098a2:	f108 38ff 	add.w	r8, r8, #4294967295
  4098a6:	e752      	b.n	40974e <__divdi3+0x116>
  4098a8:	f109 39ff 	add.w	r9, r9, #4294967295
  4098ac:	e7ce      	b.n	40984c <__divdi3+0x214>
  4098ae:	3a01      	subs	r2, #1
  4098b0:	e78f      	b.n	4097d2 <__divdi3+0x19a>
  4098b2:	f108 38ff 	add.w	r8, r8, #4294967295
  4098b6:	e79f      	b.n	4097f8 <__divdi3+0x1c0>
  4098b8:	3b01      	subs	r3, #1
  4098ba:	e7db      	b.n	409874 <__divdi3+0x23c>

004098bc <__udivdi3>:
  4098bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4098c0:	2b00      	cmp	r3, #0
  4098c2:	d140      	bne.n	409946 <__udivdi3+0x8a>
  4098c4:	428a      	cmp	r2, r1
  4098c6:	4604      	mov	r4, r0
  4098c8:	4615      	mov	r5, r2
  4098ca:	d94a      	bls.n	409962 <__udivdi3+0xa6>
  4098cc:	fab2 f382 	clz	r3, r2
  4098d0:	460f      	mov	r7, r1
  4098d2:	b14b      	cbz	r3, 4098e8 <__udivdi3+0x2c>
  4098d4:	f1c3 0620 	rsb	r6, r3, #32
  4098d8:	4099      	lsls	r1, r3
  4098da:	fa00 f403 	lsl.w	r4, r0, r3
  4098de:	fa02 f503 	lsl.w	r5, r2, r3
  4098e2:	40f0      	lsrs	r0, r6
  4098e4:	ea40 0701 	orr.w	r7, r0, r1
  4098e8:	0c29      	lsrs	r1, r5, #16
  4098ea:	0c26      	lsrs	r6, r4, #16
  4098ec:	fa1f fe85 	uxth.w	lr, r5
  4098f0:	fbb7 f0f1 	udiv	r0, r7, r1
  4098f4:	fb01 7710 	mls	r7, r1, r0, r7
  4098f8:	fb0e f200 	mul.w	r2, lr, r0
  4098fc:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  409900:	429a      	cmp	r2, r3
  409902:	d907      	bls.n	409914 <__udivdi3+0x58>
  409904:	195b      	adds	r3, r3, r5
  409906:	f080 80ea 	bcs.w	409ade <__udivdi3+0x222>
  40990a:	429a      	cmp	r2, r3
  40990c:	f240 80e7 	bls.w	409ade <__udivdi3+0x222>
  409910:	3802      	subs	r0, #2
  409912:	442b      	add	r3, r5
  409914:	1a9a      	subs	r2, r3, r2
  409916:	b2a4      	uxth	r4, r4
  409918:	fbb2 f3f1 	udiv	r3, r2, r1
  40991c:	fb01 2213 	mls	r2, r1, r3, r2
  409920:	fb0e fe03 	mul.w	lr, lr, r3
  409924:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  409928:	4596      	cmp	lr, r2
  40992a:	d906      	bls.n	40993a <__udivdi3+0x7e>
  40992c:	1952      	adds	r2, r2, r5
  40992e:	f080 80da 	bcs.w	409ae6 <__udivdi3+0x22a>
  409932:	4596      	cmp	lr, r2
  409934:	f240 80d7 	bls.w	409ae6 <__udivdi3+0x22a>
  409938:	3b02      	subs	r3, #2
  40993a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40993e:	2600      	movs	r6, #0
  409940:	4631      	mov	r1, r6
  409942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409946:	428b      	cmp	r3, r1
  409948:	d844      	bhi.n	4099d4 <__udivdi3+0x118>
  40994a:	fab3 f683 	clz	r6, r3
  40994e:	2e00      	cmp	r6, #0
  409950:	d145      	bne.n	4099de <__udivdi3+0x122>
  409952:	4282      	cmp	r2, r0
  409954:	f240 80bf 	bls.w	409ad6 <__udivdi3+0x21a>
  409958:	428b      	cmp	r3, r1
  40995a:	f0c0 80bc 	bcc.w	409ad6 <__udivdi3+0x21a>
  40995e:	4630      	mov	r0, r6
  409960:	e7ee      	b.n	409940 <__udivdi3+0x84>
  409962:	b912      	cbnz	r2, 40996a <__udivdi3+0xae>
  409964:	2501      	movs	r5, #1
  409966:	fbb5 f5f2 	udiv	r5, r5, r2
  40996a:	fab5 f285 	clz	r2, r5
  40996e:	2a00      	cmp	r2, #0
  409970:	d17b      	bne.n	409a6a <__udivdi3+0x1ae>
  409972:	1b4a      	subs	r2, r1, r5
  409974:	0c2f      	lsrs	r7, r5, #16
  409976:	fa1f fe85 	uxth.w	lr, r5
  40997a:	2601      	movs	r6, #1
  40997c:	0c23      	lsrs	r3, r4, #16
  40997e:	fbb2 f0f7 	udiv	r0, r2, r7
  409982:	fb07 2210 	mls	r2, r7, r0, r2
  409986:	fb0e fc00 	mul.w	ip, lr, r0
  40998a:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40998e:	458c      	cmp	ip, r1
  409990:	d907      	bls.n	4099a2 <__udivdi3+0xe6>
  409992:	1949      	adds	r1, r1, r5
  409994:	f080 80a1 	bcs.w	409ada <__udivdi3+0x21e>
  409998:	458c      	cmp	ip, r1
  40999a:	f240 809e 	bls.w	409ada <__udivdi3+0x21e>
  40999e:	3802      	subs	r0, #2
  4099a0:	4429      	add	r1, r5
  4099a2:	ebcc 0101 	rsb	r1, ip, r1
  4099a6:	b2a4      	uxth	r4, r4
  4099a8:	fbb1 f3f7 	udiv	r3, r1, r7
  4099ac:	fb07 1113 	mls	r1, r7, r3, r1
  4099b0:	fb0e fe03 	mul.w	lr, lr, r3
  4099b4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4099b8:	45a6      	cmp	lr, r4
  4099ba:	d906      	bls.n	4099ca <__udivdi3+0x10e>
  4099bc:	1964      	adds	r4, r4, r5
  4099be:	f080 8090 	bcs.w	409ae2 <__udivdi3+0x226>
  4099c2:	45a6      	cmp	lr, r4
  4099c4:	f240 808d 	bls.w	409ae2 <__udivdi3+0x226>
  4099c8:	3b02      	subs	r3, #2
  4099ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4099ce:	4631      	mov	r1, r6
  4099d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4099d4:	2600      	movs	r6, #0
  4099d6:	4630      	mov	r0, r6
  4099d8:	4631      	mov	r1, r6
  4099da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4099de:	f1c6 0520 	rsb	r5, r6, #32
  4099e2:	40b3      	lsls	r3, r6
  4099e4:	fa02 f706 	lsl.w	r7, r2, r6
  4099e8:	fa01 f406 	lsl.w	r4, r1, r6
  4099ec:	40ea      	lsrs	r2, r5
  4099ee:	40e9      	lsrs	r1, r5
  4099f0:	fa20 f505 	lsr.w	r5, r0, r5
  4099f4:	431a      	orrs	r2, r3
  4099f6:	4325      	orrs	r5, r4
  4099f8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  4099fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  409a00:	b293      	uxth	r3, r2
  409a02:	fbb1 f8fc 	udiv	r8, r1, ip
  409a06:	fb0c 1118 	mls	r1, ip, r8, r1
  409a0a:	fb03 f408 	mul.w	r4, r3, r8
  409a0e:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  409a12:	428c      	cmp	r4, r1
  409a14:	d906      	bls.n	409a24 <__udivdi3+0x168>
  409a16:	1889      	adds	r1, r1, r2
  409a18:	d269      	bcs.n	409aee <__udivdi3+0x232>
  409a1a:	428c      	cmp	r4, r1
  409a1c:	d967      	bls.n	409aee <__udivdi3+0x232>
  409a1e:	f1a8 0802 	sub.w	r8, r8, #2
  409a22:	4411      	add	r1, r2
  409a24:	1b09      	subs	r1, r1, r4
  409a26:	b2ad      	uxth	r5, r5
  409a28:	fbb1 f4fc 	udiv	r4, r1, ip
  409a2c:	fb0c 1114 	mls	r1, ip, r4, r1
  409a30:	fb03 fe04 	mul.w	lr, r3, r4
  409a34:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  409a38:	459e      	cmp	lr, r3
  409a3a:	d905      	bls.n	409a48 <__udivdi3+0x18c>
  409a3c:	189b      	adds	r3, r3, r2
  409a3e:	d254      	bcs.n	409aea <__udivdi3+0x22e>
  409a40:	459e      	cmp	lr, r3
  409a42:	d952      	bls.n	409aea <__udivdi3+0x22e>
  409a44:	3c02      	subs	r4, #2
  409a46:	4413      	add	r3, r2
  409a48:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  409a4c:	ebce 0303 	rsb	r3, lr, r3
  409a50:	fba4 8907 	umull	r8, r9, r4, r7
  409a54:	454b      	cmp	r3, r9
  409a56:	d303      	bcc.n	409a60 <__udivdi3+0x1a4>
  409a58:	d151      	bne.n	409afe <__udivdi3+0x242>
  409a5a:	40b0      	lsls	r0, r6
  409a5c:	4540      	cmp	r0, r8
  409a5e:	d24e      	bcs.n	409afe <__udivdi3+0x242>
  409a60:	2600      	movs	r6, #0
  409a62:	1e60      	subs	r0, r4, #1
  409a64:	4631      	mov	r1, r6
  409a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409a6a:	f1c2 0620 	rsb	r6, r2, #32
  409a6e:	4095      	lsls	r5, r2
  409a70:	fa01 f302 	lsl.w	r3, r1, r2
  409a74:	fa00 f402 	lsl.w	r4, r0, r2
  409a78:	0c2f      	lsrs	r7, r5, #16
  409a7a:	40f1      	lsrs	r1, r6
  409a7c:	40f0      	lsrs	r0, r6
  409a7e:	fa1f fe85 	uxth.w	lr, r5
  409a82:	fbb1 f6f7 	udiv	r6, r1, r7
  409a86:	4318      	orrs	r0, r3
  409a88:	fb07 1116 	mls	r1, r7, r6, r1
  409a8c:	fb0e f206 	mul.w	r2, lr, r6
  409a90:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  409a94:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  409a98:	429a      	cmp	r2, r3
  409a9a:	d905      	bls.n	409aa8 <__udivdi3+0x1ec>
  409a9c:	195b      	adds	r3, r3, r5
  409a9e:	d229      	bcs.n	409af4 <__udivdi3+0x238>
  409aa0:	429a      	cmp	r2, r3
  409aa2:	d927      	bls.n	409af4 <__udivdi3+0x238>
  409aa4:	3e02      	subs	r6, #2
  409aa6:	442b      	add	r3, r5
  409aa8:	1a9b      	subs	r3, r3, r2
  409aaa:	b280      	uxth	r0, r0
  409aac:	fbb3 fcf7 	udiv	ip, r3, r7
  409ab0:	fb07 331c 	mls	r3, r7, ip, r3
  409ab4:	fb0e f10c 	mul.w	r1, lr, ip
  409ab8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  409abc:	4299      	cmp	r1, r3
  409abe:	d906      	bls.n	409ace <__udivdi3+0x212>
  409ac0:	195b      	adds	r3, r3, r5
  409ac2:	d219      	bcs.n	409af8 <__udivdi3+0x23c>
  409ac4:	4299      	cmp	r1, r3
  409ac6:	d917      	bls.n	409af8 <__udivdi3+0x23c>
  409ac8:	f1ac 0c02 	sub.w	ip, ip, #2
  409acc:	442b      	add	r3, r5
  409ace:	1a5a      	subs	r2, r3, r1
  409ad0:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  409ad4:	e752      	b.n	40997c <__udivdi3+0xc0>
  409ad6:	2001      	movs	r0, #1
  409ad8:	e732      	b.n	409940 <__udivdi3+0x84>
  409ada:	3801      	subs	r0, #1
  409adc:	e761      	b.n	4099a2 <__udivdi3+0xe6>
  409ade:	3801      	subs	r0, #1
  409ae0:	e718      	b.n	409914 <__udivdi3+0x58>
  409ae2:	3b01      	subs	r3, #1
  409ae4:	e771      	b.n	4099ca <__udivdi3+0x10e>
  409ae6:	3b01      	subs	r3, #1
  409ae8:	e727      	b.n	40993a <__udivdi3+0x7e>
  409aea:	3c01      	subs	r4, #1
  409aec:	e7ac      	b.n	409a48 <__udivdi3+0x18c>
  409aee:	f108 38ff 	add.w	r8, r8, #4294967295
  409af2:	e797      	b.n	409a24 <__udivdi3+0x168>
  409af4:	3e01      	subs	r6, #1
  409af6:	e7d7      	b.n	409aa8 <__udivdi3+0x1ec>
  409af8:	f10c 3cff 	add.w	ip, ip, #4294967295
  409afc:	e7e7      	b.n	409ace <__udivdi3+0x212>
  409afe:	4620      	mov	r0, r4
  409b00:	2600      	movs	r6, #0
  409b02:	e71d      	b.n	409940 <__udivdi3+0x84>

00409b04 <__func__.8182>:
  409b04:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  409b14:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  409b24:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  409b34:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  409b44:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  409b54:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  409b64:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  409b74:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  409b84:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  409b94:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  409ba4:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  409bb4:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  409bc4:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  409bd4:	7274 6575 203a 6166 736c 0065               true: false.

00409be0 <__func__.8351>:
  409be0:	7371 6970 725f 6165 0064 0000               qspi_read...

00409bec <__func__.8367>:
  409bec:	7371 6970 775f 6972 6574 0000 4449 454c     qspi_write..IDLE
  409bfc:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  409c0c:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  409c1c:	7653 0063 2580 0000 00c0 0000 0800 0000     Svc..%..........
  409c2c:	0018 0000 9c4e 0000 a5d9 a955 4155 5452     ....N.....U.UART
  409c3c:	4320 4e4f 4f53 454c 5320 4154 5452 4445      CONSOLE STARTED
  409c4c:	4f20 204e 4155 5452 0a34 000a 454c 2044      ON UART4...LED 
  409c5c:	4e49 5449 4320 4d4f 4c50 5445 0a45 0000     INIT COMPLETE...
  409c6c:	4542 4947 494e 474e 5320 5244 4d41 4920     BEGINING SDRAM I
  409c7c:	494e 0a54 0000 0000 4453 4152 204d 4f43     NIT.....SDRAM CO
  409c8c:	544e 4f52 4c4c 5245 5320 4154 5452 4445     NTROLLER STARTED
  409c9c:	000a 0000 7845 7469 6e69 2067 6977 6874     ....Exiting with
  409cac:	7320 6174 7574 2073 6425 0a2e 0000 0000      status %d......
  409cbc:	454d 204d 5245 4f52 2052 5441 3020 2578     MEM ERROR AT 0x%
  409ccc:	0a78 0000 4453 4152 204d 5546 4c4c 4320     x...SDRAM FULL C
  409cdc:	4548 4b43 4320 4d4f 4c50 5445 0045 0000     HECK COMPLETE...
  409cec:	3249 2043 5245 2152 000a 0000 7825 202c     I2C ERR!....%x, 
  409cfc:	0000 0000 4553 5652 204f 5244 5649 5245     ....SERVO DRIVER
  409d0c:	5320 5445 5055 4320 4d4f 4c50 4145 4554      SETUP COMPLEATE
  409d1c:	000a 0000 5453 5241 4554 2044 4154 4b53     ....STARTED TASK
  409d2c:	3120 000a 6572 6963 6576 2064 6554 7473      1..recived Test
  409d3c:	203a 7830 3025 7832 3025 7832 3025 7832     : 0x%02x%02x%02x
  409d4c:	3025 7832 000a 0000 6572 6963 6576 2064     %02x....recived 
  409d5c:	6142 6573 203a 7830 3025 7832 3025 7832     Base: 0x%02x%02x
  409d6c:	3025 7832 3025 7832 000a 0000 4f42 5241     %02x%02x....BOAR
  409d7c:	2044 4e49 5449 4320 4d4f 4c50 5445 0a45     D INIT COMPLETE.
  409d8c:	0000 0000 4154 4b53 0031 0000 5453 5241     ....TASK1...STAR
  409d9c:	4954 474e 5220 4f54 0a53 0000 454d 4f4d     TING RTOS...MEMO
  409dac:	5952 4520 5252 524f 000a 0000 202c 7566     RY ERROR...., fu
  409dbc:	636e 6974 6e6f 203a 0000 0000 7361 6573     nction: ....asse
  409dcc:	7472 6f69 206e 2522 2273 6620 6961 656c     rtion "%s" faile
  409ddc:	3a64 6620 6c69 2065 2522 2273 202c 696c     d: file "%s", li
  409dec:	656e 2520 2564 2573 0a73 0000 0043 0000     ne %d%s%s...C...

00409dfc <_global_impure_ptr>:
  409dfc:	0018 2040                                   ..@ 

00409e00 <zeroes.6911>:
  409e00:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00409e10 <blanks.6910>:
  409e10:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409e20:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  409e30:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  409e40:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  409e50:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  409e60:	0030 0000                                   0...

00409e64 <zeroes.6869>:
  409e64:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00409e74 <blanks.6868>:
  409e74:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409e84:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409e94:	4f50 4953 0058 0000 002e 0000               POSIX.......

00409ea0 <__mprec_tens>:
  409ea0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409eb0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409ec0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409ed0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409ee0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409ef0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409f00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409f10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409f20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409f30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409f40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409f50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409f60:	9db4 79d9 7843 44ea                         ...yCx.D

00409f68 <p05.5302>:
  409f68:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00409f78 <__mprec_bigtens>:
  409f78:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409f88:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409f98:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409fa0 <_init>:
  409fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409fa2:	bf00      	nop
  409fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409fa6:	bc08      	pop	{r3}
  409fa8:	469e      	mov	lr, r3
  409faa:	4770      	bx	lr

00409fac <__init_array_start>:
  409fac:	00406469 	.word	0x00406469

00409fb0 <__frame_dummy_init_array_entry>:
  409fb0:	00400165                                e.@.

00409fb4 <_fini>:
  409fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409fb6:	bf00      	nop
  409fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409fba:	bc08      	pop	{r3}
  409fbc:	469e      	mov	lr, r3
  409fbe:	4770      	bx	lr

00409fc0 <__fini_array_start>:
  409fc0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
2040004c:	9df8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <_impure_ptr>:
20400440:	0018 2040                                   ..@ 

20400444 <lconv>:
20400444:	9e9c 0040 9cb8 0040 9cb8 0040 9cb8 0040     ..@...@...@...@.
20400454:	9cb8 0040 9cb8 0040 9cb8 0040 9cb8 0040     ..@...@...@...@.
20400464:	9cb8 0040 9cb8 0040 ffff ffff ffff ffff     ..@...@.........
20400474:	ffff ffff ffff 0000                         ........

2040047c <lc_ctype_charset>:
2040047c:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2040049c <__mb_cur_max>:
2040049c:	0001 0000                                   ....

204004a0 <__malloc_av_>:
	...
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 

204008a8 <__malloc_trim_threshold>:
204008a8:	0000 0002                                   ....

204008ac <__malloc_sbrk_base>:
204008ac:	ffff ffff                                   ....

204008b0 <__wctomb>:
204008b0:	9319 0040                                   ..@.
