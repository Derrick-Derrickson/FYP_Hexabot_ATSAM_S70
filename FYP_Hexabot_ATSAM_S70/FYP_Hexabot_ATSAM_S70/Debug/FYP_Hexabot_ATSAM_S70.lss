
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013f9c  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413f9c  00413f9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000950  20400000  00413fa4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bd58  20400950  004148f4  00020950  2**2
                  ALLOC
  4 .stack        00002000  2040c6a8  0042064c  00020950  2**0
                  ALLOC
  5 .heap         00000200  2040e6a8  0042264c  00020950  2**0
                  ALLOC
  6 .ARM.attributes 00000035  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00020985  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023977  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000458e  00000000  00000000  00044357  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e5ee  00000000  00000000  000488e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001240  00000000  00000000  00056ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001370  00000000  00000000  00058113  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002549b  00000000  00000000  00059483  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019ae6  00000000  00000000  0007e91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00086567  00000000  00000000  00098404  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004b14  00000000  00000000  0011e96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e6a8 	.word	0x2040e6a8
  400004:	004034cd 	.word	0x004034cd
  400008:	004034c9 	.word	0x004034c9
  40000c:	004034c9 	.word	0x004034c9
  400010:	004034c9 	.word	0x004034c9
  400014:	004034c9 	.word	0x004034c9
  400018:	004034c9 	.word	0x004034c9
	...
  40002c:	00400b31 	.word	0x00400b31
  400030:	004034c9 	.word	0x004034c9
  400034:	00000000 	.word	0x00000000
  400038:	00400bcd 	.word	0x00400bcd
  40003c:	00400c31 	.word	0x00400c31
  400040:	004034c9 	.word	0x004034c9
  400044:	004034c9 	.word	0x004034c9
  400048:	004034c9 	.word	0x004034c9
  40004c:	004034c9 	.word	0x004034c9
  400050:	004034c9 	.word	0x004034c9
  400054:	004034c9 	.word	0x004034c9
  400058:	004034c9 	.word	0x004034c9
  40005c:	004034c9 	.word	0x004034c9
  400060:	004034c9 	.word	0x004034c9
  400064:	00000000 	.word	0x00000000
  400068:	004005b1 	.word	0x004005b1
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005d9 	.word	0x004005d9
  400074:	004034c9 	.word	0x004034c9
  400078:	004034c9 	.word	0x004034c9
  40007c:	004034c9 	.word	0x004034c9
  400080:	004005ed 	.word	0x004005ed
  400084:	00400601 	.word	0x00400601
  400088:	004034c9 	.word	0x004034c9
  40008c:	004034c9 	.word	0x004034c9
  400090:	004034c9 	.word	0x004034c9
  400094:	004034c9 	.word	0x004034c9
  400098:	004034c9 	.word	0x004034c9
  40009c:	004034c9 	.word	0x004034c9
  4000a0:	004034c9 	.word	0x004034c9
  4000a4:	004034c9 	.word	0x004034c9
  4000a8:	004034c9 	.word	0x004034c9
  4000ac:	004034c9 	.word	0x004034c9
  4000b0:	004034c9 	.word	0x004034c9
  4000b4:	00400365 	.word	0x00400365
  4000b8:	004034c9 	.word	0x004034c9
  4000bc:	004034c9 	.word	0x004034c9
  4000c0:	004034c9 	.word	0x004034c9
  4000c4:	004034c9 	.word	0x004034c9
  4000c8:	004034c9 	.word	0x004034c9
	...
  4000e0:	00400379 	.word	0x00400379
  4000e4:	004034c9 	.word	0x004034c9
  4000e8:	004034c9 	.word	0x004034c9
  4000ec:	004034c9 	.word	0x004034c9
  4000f0:	004034c9 	.word	0x004034c9
  4000f4:	004034c9 	.word	0x004034c9
  4000f8:	00407c89 	.word	0x00407c89
  4000fc:	004034c9 	.word	0x004034c9
  400100:	004034c9 	.word	0x004034c9
  400104:	004034c9 	.word	0x004034c9
  400108:	004034c9 	.word	0x004034c9
  40010c:	004034c9 	.word	0x004034c9
  400110:	004034c9 	.word	0x004034c9
	...
  400120:	004034c9 	.word	0x004034c9
  400124:	004034c9 	.word	0x004034c9
  400128:	004034c9 	.word	0x004034c9
  40012c:	00407c51 	.word	0x00407c51
  400130:	004034c9 	.word	0x004034c9
  400134:	00000000 	.word	0x00000000
  400138:	004034c9 	.word	0x004034c9
  40013c:	004034c9 	.word	0x004034c9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400950 	.word	0x20400950
  40015c:	00000000 	.word	0x00000000
  400160:	00413fa4 	.word	0x00413fa4

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	00413fa4 	.word	0x00413fa4
  400190:	20400954 	.word	0x20400954
  400194:	00413fa4 	.word	0x00413fa4
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402d6d 	.word	0x00402d6d
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040bd1d 	.word	0x0040bd1d
  4001e0:	00402d79 	.word	0x00402d79

004001e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
  4001e6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001ec:	4013      	ands	r3, r2
  4001ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4001f2:	4e1a      	ldr	r6, [pc, #104]	; (40025c <afec_process_callback+0x78>)
  4001f4:	4d1a      	ldr	r5, [pc, #104]	; (400260 <afec_process_callback+0x7c>)
  4001f6:	42a8      	cmp	r0, r5
  4001f8:	bf14      	ite	ne
  4001fa:	2000      	movne	r0, #0
  4001fc:	2001      	moveq	r0, #1
  4001fe:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400200:	2c0b      	cmp	r4, #11
  400202:	d80a      	bhi.n	40021a <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400204:	9a01      	ldr	r2, [sp, #4]
  400206:	2301      	movs	r3, #1
  400208:	40a3      	lsls	r3, r4
  40020a:	4213      	tst	r3, r2
  40020c:	d020      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40020e:	192b      	adds	r3, r5, r4
  400210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400214:	b1e3      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400216:	4798      	blx	r3
  400218:	e01a      	b.n	400250 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40021a:	2c0e      	cmp	r4, #14
  40021c:	d80c      	bhi.n	400238 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40021e:	9a01      	ldr	r2, [sp, #4]
  400220:	f104 010c 	add.w	r1, r4, #12
  400224:	2301      	movs	r3, #1
  400226:	408b      	lsls	r3, r1
  400228:	4213      	tst	r3, r2
  40022a:	d011      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	b16b      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400234:	4798      	blx	r3
  400236:	e00b      	b.n	400250 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400238:	9a01      	ldr	r2, [sp, #4]
  40023a:	f104 010f 	add.w	r1, r4, #15
  40023e:	2301      	movs	r3, #1
  400240:	408b      	lsls	r3, r1
  400242:	4213      	tst	r3, r2
  400244:	d004      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400246:	192b      	adds	r3, r5, r4
  400248:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40024c:	b103      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40024e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400250:	3401      	adds	r4, #1
  400252:	2c10      	cmp	r4, #16
  400254:	d1d4      	bne.n	400200 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400256:	b002      	add	sp, #8
  400258:	bd70      	pop	{r4, r5, r6, pc}
  40025a:	bf00      	nop
  40025c:	2040c520 	.word	0x2040c520
  400260:	40064000 	.word	0x40064000

00400264 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400296:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40029a:	d14d      	bne.n	400338 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40029c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40029e:	2201      	movs	r2, #1
  4002a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002a2:	7cca      	ldrb	r2, [r1, #19]
  4002a4:	2a00      	cmp	r2, #0
  4002a6:	bf18      	it	ne
  4002a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4002ac:	68ca      	ldr	r2, [r1, #12]
  4002ae:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002b2:	684a      	ldr	r2, [r1, #4]
  4002b4:	688d      	ldr	r5, [r1, #8]
  4002b6:	fbb2 f2f5 	udiv	r2, r2, r5
  4002ba:	3a01      	subs	r2, #1
  4002bc:	0212      	lsls	r2, r2, #8
  4002be:	b292      	uxth	r2, r2
  4002c0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002c2:	7c0c      	ldrb	r4, [r1, #16]
  4002c4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4002c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4002ca:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4002cc:	7c4c      	ldrb	r4, [r1, #17]
  4002ce:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4002d4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4002d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002da:	7d0b      	ldrb	r3, [r1, #20]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf14      	ite	ne
  4002e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4002e4:	2200      	moveq	r2, #0
  4002e6:	680b      	ldr	r3, [r1, #0]
  4002e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4002ea:	7d4b      	ldrb	r3, [r1, #21]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4002f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4002f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4002fa:	7d8b      	ldrb	r3, [r1, #22]
  4002fc:	021b      	lsls	r3, r3, #8
  4002fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400302:	f043 030c 	orr.w	r3, r3, #12
  400306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40030a:	4b12      	ldr	r3, [pc, #72]	; (400354 <afec_init+0xc0>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d106      	bne.n	40031e <afec_init+0x8a>
  400310:	e017      	b.n	400342 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400312:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400316:	428b      	cmp	r3, r1
  400318:	d1fb      	bne.n	400312 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40031a:	2000      	movs	r0, #0
  40031c:	e016      	b.n	40034c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <afec_init+0xc4>)
  400320:	4298      	cmp	r0, r3
  400322:	d10c      	bne.n	40033e <afec_init+0xaa>
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <afec_init+0xc8>)
  400326:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40032a:	2200      	movs	r2, #0
  40032c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400330:	428b      	cmp	r3, r1
  400332:	d1fb      	bne.n	40032c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e009      	b.n	40034c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400338:	2019      	movs	r0, #25
  40033a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40033c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e004      	b.n	40034c <afec_init+0xb8>
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <afec_init+0xcc>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	e7e2      	b.n	400312 <afec_init+0x7e>
  40034c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40034e:	bc30      	pop	{r4, r5}
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	4003c000 	.word	0x4003c000
  400358:	40064000 	.word	0x40064000
  40035c:	2040c55c 	.word	0x2040c55c
  400360:	2040c51c 	.word	0x2040c51c

00400364 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400364:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400366:	4802      	ldr	r0, [pc, #8]	; (400370 <AFEC0_Handler+0xc>)
  400368:	4b02      	ldr	r3, [pc, #8]	; (400374 <AFEC0_Handler+0x10>)
  40036a:	4798      	blx	r3
  40036c:	bd08      	pop	{r3, pc}
  40036e:	bf00      	nop
  400370:	4003c000 	.word	0x4003c000
  400374:	004001e5 	.word	0x004001e5

00400378 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400378:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40037a:	4802      	ldr	r0, [pc, #8]	; (400384 <AFEC1_Handler+0xc>)
  40037c:	4b02      	ldr	r3, [pc, #8]	; (400388 <AFEC1_Handler+0x10>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	40064000 	.word	0x40064000
  400388:	004001e5 	.word	0x004001e5

0040038c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40038c:	b508      	push	{r3, lr}
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <afec_enable+0x44>)
  400390:	4298      	cmp	r0, r3
  400392:	bf0c      	ite	eq
  400394:	2028      	moveq	r0, #40	; 0x28
  400396:	201d      	movne	r0, #29
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <afec_enable+0x48>)
  40039a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40039c:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <afec_enable+0x4c>)
  40039e:	789b      	ldrb	r3, [r3, #2]
  4003a0:	2bff      	cmp	r3, #255	; 0xff
  4003a2:	d100      	bne.n	4003a6 <afec_enable+0x1a>
  4003a4:	e7fe      	b.n	4003a4 <afec_enable+0x18>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003b0:	2100      	movs	r1, #0
  4003b2:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <afec_enable+0x50>)
  4003b4:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003b6:	4908      	ldr	r1, [pc, #32]	; (4003d8 <afec_enable+0x4c>)
  4003b8:	788a      	ldrb	r2, [r1, #2]
  4003ba:	3201      	adds	r2, #1
  4003bc:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003be:	b92b      	cbnz	r3, 4003cc <afec_enable+0x40>
		cpu_irq_enable();
  4003c0:	2201      	movs	r2, #1
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <afec_enable+0x50>)
  4003c4:	701a      	strb	r2, [r3, #0]
  4003c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003ca:	b662      	cpsie	i
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	40064000 	.word	0x40064000
  4003d4:	00402a11 	.word	0x00402a11
  4003d8:	2040c518 	.word	0x2040c518
  4003dc:	20400010 	.word	0x20400010

004003e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4003e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4003e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	bf0c      	ite	eq
  4003e8:	2400      	moveq	r4, #0
  4003ea:	2404      	movne	r4, #4
	}
	if(isi_cfg->vpol) {
  4003ec:	784b      	ldrb	r3, [r1, #1]
  4003ee:	b10b      	cbz	r3, 4003f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4003f0:	f044 0408 	orr.w	r4, r4, #8
	}
	if(isi_cfg->pck_plo) {
  4003f4:	788b      	ldrb	r3, [r1, #2]
  4003f6:	b10b      	cbz	r3, 4003fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4003f8:	f044 0410 	orr.w	r4, r4, #16
	}
	if(isi_cfg->emb_sync) {
  4003fc:	78cb      	ldrb	r3, [r1, #3]
  4003fe:	b10b      	cbz	r3, 400404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  400400:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  400404:	790b      	ldrb	r3, [r1, #4]
  400406:	b10b      	cbz	r3, 40040c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  400408:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40040c:	794a      	ldrb	r2, [r1, #5]
  40040e:	0352      	lsls	r2, r2, #13
  400410:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
  400414:	798b      	ldrb	r3, [r1, #6]
  400416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40041a:	79cb      	ldrb	r3, [r1, #7]
  40041c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
		reg |= ISI_CFG1_EMB_SYNC;
	}
	if(isi_cfg->crc_sync) {
		reg |= ISI_CFG1_CRC_SYNC;
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  400420:	4323      	orrs	r3, r4
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;
  400422:	6003      	str	r3, [r0, #0]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400424:	4b18      	ldr	r3, [pc, #96]	; (400488 <isi_init+0xa8>)
  400426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400428:	685b      	ldr	r3, [r3, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40042a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  400430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  400434:	7a0a      	ldrb	r2, [r1, #8]
  400436:	2a04      	cmp	r2, #4
  400438:	d816      	bhi.n	400468 <isi_init+0x88>
  40043a:	e8df f002 	tbb	[pc, r2]
  40043e:	0603      	.short	0x0603
  400440:	0e09      	.short	0x0e09
  400442:	11          	.byte	0x11
  400443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  400444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
  400448:	e00e      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB565:
			reg |= ISI_CFG2_COL_SPACE;
			reg |= ISI_CFG2_RGB_MODE;
  40044a:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40044e:	e00b      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB888:
			reg |= ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_RGB_MODE;
  400450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  400458:	e006      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_12BIT:
			reg |= ISI_CFG2_GRAYSCALE;
  40045a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40045e:	e003      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_8BIT:
			reg &= ~ISI_CFG2_GRAYSCALE;
			reg &= ~ISI_CFG2_RGB_SWAP;
			reg &= ~ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  400460:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  400464:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  400468:	68ca      	ldr	r2, [r1, #12]
  40046a:	3a01      	subs	r2, #1
  40046c:	4c07      	ldr	r4, [pc, #28]	; (40048c <isi_init+0xac>)
  40046e:	ea04 4402 	and.w	r4, r4, r2, lsl #16
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  400472:	690a      	ldr	r2, [r1, #16]
  400474:	3a01      	subs	r2, #1
  400476:	f3c2 020a 	ubfx	r2, r2, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40047a:	4322      	orrs	r2, r4
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40047c:	4313      	orrs	r3, r2
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
	p_isi->ISI_CFG2 = reg;
  40047e:	6043      	str	r3, [r0, #4]
}
  400480:	f85d 4b04 	ldr.w	r4, [sp], #4
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	4004c000 	.word	0x4004c000
  40048c:	07ff0000 	.word	0x07ff0000

00400490 <isi_size_configure>:
 * \param preview_hsize  Horizontal Preview size  (640 max only in RGB mode).
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
  400490:	b470      	push	{r4, r5, r6}
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400492:	4c23      	ldr	r4, [pc, #140]	; (400520 <isi_size_configure+0x90>)
  400494:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400496:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400498:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40049a:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
  40049e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
  4004a2:	4e20      	ldr	r6, [pc, #128]	; (400524 <isi_size_configure+0x94>)
  4004a4:	402e      	ands	r6, r5
  4004a6:	6046      	str	r6, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004a8:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004aa:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ac:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004ae:	b2ad      	uxth	r5, r5
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
  4004b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
  4004b4:	6045      	str	r5, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004b6:	6865      	ldr	r5, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004b8:	6864      	ldr	r4, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ba:	0eed      	lsrs	r5, r5, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004bc:	f024 4478 	bic.w	r4, r4, #4160749568	; 0xf8000000
  4004c0:	ea44 7505 	orr.w	r5, r4, r5, lsl #28
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround() | ISI_CFG2_IM_VSIZE(image_vsize - 1) | ISI_CFG2_IM_HSIZE(image_hsize - 1);
  4004c4:	3a01      	subs	r2, #1
  4004c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4004ca:	4315      	orrs	r5, r2
  4004cc:	1e4a      	subs	r2, r1, #1
  4004ce:	4c16      	ldr	r4, [pc, #88]	; (400528 <isi_size_configure+0x98>)
  4004d0:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004d4:	ea45 0204 	orr.w	r2, r5, r4
  4004d8:	6042      	str	r2, [r0, #4]

	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_VSIZE_Msk);
  4004da:	6884      	ldr	r4, [r0, #8]
  4004dc:	4a13      	ldr	r2, [pc, #76]	; (40052c <isi_size_configure+0x9c>)
  4004de:	4022      	ands	r2, r4
  4004e0:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_HSIZE_Msk);
  4004e2:	6884      	ldr	r4, [r0, #8]
  4004e4:	4a12      	ldr	r2, [pc, #72]	; (400530 <isi_size_configure+0xa0>)
  4004e6:	4022      	ands	r2, r4
  4004e8:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE |= ISI_PSIZE_PREV_VSIZE(preview_hsize - 1) | ISI_PSIZE_PREV_HSIZE(preview_vsize - 1);
  4004ea:	6885      	ldr	r5, [r0, #8]
  4004ec:	1e5a      	subs	r2, r3, #1
  4004ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
  4004f2:	9a03      	ldr	r2, [sp, #12]
  4004f4:	3a01      	subs	r2, #1
  4004f6:	4c0f      	ldr	r4, [pc, #60]	; (400534 <isi_size_configure+0xa4>)
  4004f8:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004fc:	ea46 0204 	orr.w	r2, r6, r4
  400500:	432a      	orrs	r2, r5
  400502:	6082      	str	r2, [r0, #8]

	uint32_t hRatio;
	hRatio = 1600 * image_hsize / preview_hsize;
  400504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  400508:	fb02 f101 	mul.w	r1, r2, r1
  40050c:	fbb1 f3f3 	udiv	r3, r1, r3
	p_isi->ISI_PDECF = (hRatio / 100);
  400510:	4909      	ldr	r1, [pc, #36]	; (400538 <isi_size_configure+0xa8>)
  400512:	fba1 2303 	umull	r2, r3, r1, r3
  400516:	095b      	lsrs	r3, r3, #5
  400518:	60c3      	str	r3, [r0, #12]
}
  40051a:	bc70      	pop	{r4, r5, r6}
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	4004c000 	.word	0x4004c000
  400524:	f7fff800 	.word	0xf7fff800
  400528:	07ff0000 	.word	0x07ff0000
  40052c:	fffffc00 	.word	0xfffffc00
  400530:	fc00ffff 	.word	0xfc00ffff
  400534:	03ff0000 	.word	0x03ff0000
  400538:	51eb851f 	.word	0x51eb851f

0040053c <isi_set_dma_preview_path>:
 * \param dma_ctrl  DMA preview control.
 * \param frame_buf_start_addr  DMA preview base address.
 */
void isi_set_dma_preview_path(Isi *p_isi, uint8_t frate,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
  40053c:	b410      	push	{r4}
	if(frate > 7) {
		frate = 7;
	}
	p_isi->ISI_CFG1 |= ISI_CFG1_FRATE(frate);
  40053e:	6804      	ldr	r4, [r0, #0]
  400540:	2907      	cmp	r1, #7
  400542:	bf28      	it	cs
  400544:	2107      	movcs	r1, #7
  400546:	0209      	lsls	r1, r1, #8
  400548:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  40054c:	4321      	orrs	r1, r4
  40054e:	6001      	str	r1, [r0, #0]

	p_isi->ISI_DMA_P_DSCR = base_buf_desc;
  400550:	64c2      	str	r2, [r0, #76]	; 0x4c
	p_isi->ISI_DMA_P_CTRL = dma_ctrl;
  400552:	6483      	str	r3, [r0, #72]	; 0x48
	p_isi->ISI_DMA_P_ADDR = frame_buf_start_addr;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	6443      	str	r3, [r0, #68]	; 0x44

}
  400558:	f85d 4b04 	ldr.w	r4, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400564:	4604      	mov	r4, r0
  400566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <pio_handler_process+0x44>)
  40056a:	4798      	blx	r3
  40056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40056e:	4620      	mov	r0, r4
  400570:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <pio_handler_process+0x48>)
  400572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400574:	4005      	ands	r5, r0
  400576:	d013      	beq.n	4005a0 <pio_handler_process+0x40>
  400578:	4c0c      	ldr	r4, [pc, #48]	; (4005ac <pio_handler_process+0x4c>)
  40057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	4543      	cmp	r3, r8
  400582:	d108      	bne.n	400596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400584:	6861      	ldr	r1, [r4, #4]
  400586:	4229      	tst	r1, r5
  400588:	d005      	beq.n	400596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40058a:	68e3      	ldr	r3, [r4, #12]
  40058c:	4640      	mov	r0, r8
  40058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400590:	6863      	ldr	r3, [r4, #4]
  400592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400596:	42b4      	cmp	r4, r6
  400598:	d002      	beq.n	4005a0 <pio_handler_process+0x40>
  40059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40059c:	2d00      	cmp	r5, #0
  40059e:	d1ee      	bne.n	40057e <pio_handler_process+0x1e>
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	004028e5 	.word	0x004028e5
  4005a8:	004028e9 	.word	0x004028e9
  4005ac:	2040096c 	.word	0x2040096c

004005b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005b2:	4802      	ldr	r0, [pc, #8]	; (4005bc <PIOA_Handler+0xc>)
  4005b4:	210a      	movs	r1, #10
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOA_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e0e00 	.word	0x400e0e00
  4005c0:	00400561 	.word	0x00400561

004005c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOB_Handler+0xc>)
  4005c8:	210b      	movs	r1, #11
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOB_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1000 	.word	0x400e1000
  4005d4:	00400561 	.word	0x00400561

004005d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005da:	4802      	ldr	r0, [pc, #8]	; (4005e4 <PIOC_Handler+0xc>)
  4005dc:	210c      	movs	r1, #12
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <PIOC_Handler+0x10>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	400e1200 	.word	0x400e1200
  4005e8:	00400561 	.word	0x00400561

004005ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOD_Handler+0xc>)
  4005f0:	2110      	movs	r1, #16
  4005f2:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOD_Handler+0x10>)
  4005f4:	4798      	blx	r3
  4005f6:	bd08      	pop	{r3, pc}
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00400561 	.word	0x00400561

00400600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400602:	4802      	ldr	r0, [pc, #8]	; (40060c <PIOE_Handler+0xc>)
  400604:	2111      	movs	r1, #17
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOE_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e1600 	.word	0x400e1600
  400610:	00400561 	.word	0x00400561

00400614 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400614:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  400616:	b930      	cbnz	r0, 400626 <qspi_initialize+0x12>
  400618:	4859      	ldr	r0, [pc, #356]	; (400780 <qspi_initialize+0x16c>)
  40061a:	f240 1117 	movw	r1, #279	; 0x117
  40061e:	4a59      	ldr	r2, [pc, #356]	; (400784 <qspi_initialize+0x170>)
  400620:	4b59      	ldr	r3, [pc, #356]	; (400788 <qspi_initialize+0x174>)
  400622:	4c5a      	ldr	r4, [pc, #360]	; (40078c <qspi_initialize+0x178>)
  400624:	47a0      	blx	r4
  400626:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  400628:	2202      	movs	r2, #2
  40062a:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  40062c:	691a      	ldr	r2, [r3, #16]
  40062e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400632:	d1fb      	bne.n	40062c <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  400634:	2280      	movs	r2, #128	; 0x80
  400636:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  400638:	780a      	ldrb	r2, [r1, #0]
  40063a:	2a01      	cmp	r2, #1
  40063c:	d104      	bne.n	400648 <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  40063e:	685a      	ldr	r2, [r3, #4]
  400640:	f042 0201 	orr.w	r2, r2, #1
  400644:	605a      	str	r2, [r3, #4]
  400646:	e001      	b.n	40064c <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  400648:	685a      	ldr	r2, [r3, #4]
  40064a:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  40064c:	784a      	ldrb	r2, [r1, #1]
  40064e:	b122      	cbz	r2, 40065a <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  400650:	685a      	ldr	r2, [r3, #4]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	605a      	str	r2, [r3, #4]
  400658:	e003      	b.n	400662 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  40065a:	685a      	ldr	r2, [r3, #4]
  40065c:	f022 0202 	bic.w	r2, r2, #2
  400660:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  400662:	788a      	ldrb	r2, [r1, #2]
  400664:	b122      	cbz	r2, 400670 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  400666:	685a      	ldr	r2, [r3, #4]
  400668:	f042 0204 	orr.w	r2, r2, #4
  40066c:	605a      	str	r2, [r3, #4]
  40066e:	e03c      	b.n	4006ea <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	f022 0204 	bic.w	r2, r2, #4
  400676:	605a      	str	r2, [r3, #4]
  400678:	e037      	b.n	4006ea <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  40067a:	6a1a      	ldr	r2, [r3, #32]
  40067c:	f042 0201 	orr.w	r2, r2, #1
  400680:	621a      	str	r2, [r3, #32]
  400682:	e053      	b.n	40072c <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400684:	6a1a      	ldr	r2, [r3, #32]
  400686:	f022 0201 	bic.w	r2, r2, #1
  40068a:	621a      	str	r2, [r3, #32]
  40068c:	e04e      	b.n	40072c <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  40068e:	6a1a      	ldr	r2, [r3, #32]
  400690:	f042 0202 	orr.w	r2, r2, #2
  400694:	621a      	str	r2, [r3, #32]
  400696:	e04d      	b.n	400734 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  400698:	6a1a      	ldr	r2, [r3, #32]
  40069a:	f022 0202 	bic.w	r2, r2, #2
  40069e:	621a      	str	r2, [r3, #32]
  4006a0:	e048      	b.n	400734 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a2:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006a4:	0212      	lsls	r2, r2, #8
  4006a6:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006ac:	4302      	orrs	r2, r0
  4006ae:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e047      	b.n	400744 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  4006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006b6:	f042 0201 	orr.w	r2, r2, #1
  4006ba:	641a      	str	r2, [r3, #64]	; 0x40
  4006bc:	e003      	b.n	4006c6 <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  4006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006c0:	f022 0201 	bic.w	r2, r2, #1
  4006c4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  4006c6:	b124      	cbz	r4, 4006d2 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  4006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006ca:	f042 0202 	orr.w	r2, r2, #2
  4006ce:	641a      	str	r2, [r3, #64]	; 0x40
  4006d0:	e04a      	b.n	400768 <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  4006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006d4:	f022 0202 	bic.w	r2, r2, #2
  4006d8:	641a      	str	r2, [r3, #64]	; 0x40
  4006da:	e045      	b.n	400768 <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  4006dc:	6459      	str	r1, [r3, #68]	; 0x44
  4006de:	e049      	b.n	400774 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4006e0:	691a      	ldr	r2, [r3, #16]
  4006e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4006e6:	d0fb      	beq.n	4006e0 <qspi_initialize+0xcc>
  4006e8:	e047      	b.n	40077a <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006ea:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  4006ec:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006ee:	0100      	lsls	r0, r0, #4
  4006f0:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006f8:	4302      	orrs	r2, r0
  4006fa:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  4006fc:	685a      	ldr	r2, [r3, #4]
  4006fe:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400702:	684a      	ldr	r2, [r1, #4]
  400704:	4302      	orrs	r2, r0
  400706:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  400708:	685a      	ldr	r2, [r3, #4]
  40070a:	7a08      	ldrb	r0, [r1, #8]
  40070c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400710:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400714:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  400716:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  400718:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40071a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40071e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  400722:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  400724:	690a      	ldr	r2, [r1, #16]
  400726:	2a00      	cmp	r2, #0
  400728:	d0ac      	beq.n	400684 <qspi_initialize+0x70>
  40072a:	e7a6      	b.n	40067a <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  40072c:	694a      	ldr	r2, [r1, #20]
  40072e:	2a00      	cmp	r2, #0
  400730:	d0b2      	beq.n	400698 <qspi_initialize+0x84>
  400732:	e7ac      	b.n	40068e <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  400734:	6988      	ldr	r0, [r1, #24]
  400736:	4a16      	ldr	r2, [pc, #88]	; (400790 <qspi_initialize+0x17c>)
  400738:	fbb2 f2f0 	udiv	r2, r2, r0
  40073c:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  40073e:	2aff      	cmp	r2, #255	; 0xff
  400740:	d9af      	bls.n	4006a2 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  400742:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  400744:	6a1a      	ldr	r2, [r3, #32]
  400746:	7f0c      	ldrb	r4, [r1, #28]
  400748:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  40074c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400750:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  400752:	f891 5020 	ldrb.w	r5, [r1, #32]
  400756:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  40075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40075c:	f022 0203 	bic.w	r2, r2, #3
  400760:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  400762:	2d00      	cmp	r5, #0
  400764:	d1a6      	bne.n	4006b4 <qspi_initialize+0xa0>
  400766:	e7aa      	b.n	4006be <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  400768:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  40076a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40076e:	f012 0f01 	tst.w	r2, #1
  400772:	d0b3      	beq.n	4006dc <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  400774:	2201      	movs	r2, #1
  400776:	601a      	str	r2, [r3, #0]
  400778:	e7b2      	b.n	4006e0 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  40077a:	b240      	sxtb	r0, r0
}
  40077c:	bd38      	pop	{r3, r4, r5, pc}
  40077e:	bf00      	nop
  400780:	00412d54 	.word	0x00412d54
  400784:	00412d44 	.word	0x00412d44
  400788:	00412d78 	.word	0x00412d78
  40078c:	0040b189 	.word	0x0040b189
  400790:	08f0d180 	.word	0x08f0d180

00400794 <qspi_read>:
 * \param us_data      Pointer to read data.
 * \param num_of_bytes Read data numbers.
 * \return status Read option result.
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400796:	b930      	cbnz	r0, 4007a6 <qspi_read+0x12>
  400798:	4836      	ldr	r0, [pc, #216]	; (400874 <qspi_read+0xe0>)
  40079a:	f44f 719f 	mov.w	r1, #318	; 0x13e
  40079e:	4a36      	ldr	r2, [pc, #216]	; (400878 <qspi_read+0xe4>)
  4007a0:	4b36      	ldr	r3, [pc, #216]	; (40087c <qspi_read+0xe8>)
  4007a2:	4c37      	ldr	r4, [pc, #220]	; (400880 <qspi_read+0xec>)
  4007a4:	47a0      	blx	r4
  4007a6:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  4007a8:	2a00      	cmp	r2, #0
  4007aa:	d05c      	beq.n	400866 <qspi_read+0xd2>
	uint32_t num_of_bytes_read = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
  4007ac:	2a01      	cmp	r2, #1
  4007ae:	d11e      	bne.n	4007ee <qspi_read+0x5a>
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007b0:	6902      	ldr	r2, [r0, #16]
  4007b2:	f012 0f01 	tst.w	r2, #1
  4007b6:	bf08      	it	eq
  4007b8:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
  4007bc:	d012      	beq.n	4007e4 <qspi_read+0x50>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007be:	689a      	ldr	r2, [r3, #8]
  4007c0:	800a      	strh	r2, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007c2:	691a      	ldr	r2, [r3, #16]
  4007c4:	f012 0f04 	tst.w	r2, #4
  4007c8:	d0fb      	beq.n	4007c2 <qspi_read+0x2e>
	qspi->QSPI_TDR = w_data ;
  4007ca:	22ff      	movs	r2, #255	; 0xff
  4007cc:	60da      	str	r2, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007ce:	691a      	ldr	r2, [r3, #16]
  4007d0:	f012 0f02 	tst.w	r2, #2
  4007d4:	d0fb      	beq.n	4007ce <qspi_read+0x3a>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007d6:	689b      	ldr	r3, [r3, #8]
  4007d8:	800b      	strh	r3, [r1, #0]
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
				*us_data = qspi_read_spi(qspi);
				qspi_write_spi(qspi, dummy);
				*us_data = qspi_read_spi(qspi);
				num_of_attempt = 0;
				status = STATUS_OK;
  4007da:	2000      	movs	r0, #0
				break;
  4007dc:	e048      	b.n	400870 <qspi_read+0xdc>
			} else {
				if(num_of_attempt > 0xFFFF) {
  4007de:	3a01      	subs	r2, #1
  4007e0:	d100      	bne.n	4007e4 <qspi_read+0x50>
  4007e2:	e042      	b.n	40086a <qspi_read+0xd6>
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007e4:	6918      	ldr	r0, [r3, #16]
  4007e6:	f010 0f01 	tst.w	r0, #1
  4007ea:	d0f8      	beq.n	4007de <qspi_read+0x4a>
  4007ec:	e7e7      	b.n	4007be <qspi_read+0x2a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007ee:	6918      	ldr	r0, [r3, #16]
  4007f0:	f010 0f04 	tst.w	r0, #4
  4007f4:	d0fb      	beq.n	4007ee <qspi_read+0x5a>
	qspi->QSPI_TDR = w_data ;
  4007f6:	2000      	movs	r0, #0
  4007f8:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007fa:	6918      	ldr	r0, [r3, #16]
  4007fc:	f010 0f02 	tst.w	r0, #2
  400800:	d0fb      	beq.n	4007fa <qspi_read+0x66>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400802:	6918      	ldr	r0, [r3, #16]
  400804:	f010 0f04 	tst.w	r0, #4
  400808:	d0fb      	beq.n	400802 <qspi_read+0x6e>
	qspi->QSPI_TDR = w_data ;
  40080a:	2000      	movs	r0, #0
  40080c:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40080e:	6918      	ldr	r0, [r3, #16]
  400810:	f010 0f02 	tst.w	r0, #2
  400814:	d0fb      	beq.n	40080e <qspi_read+0x7a>
  400816:	2400      	movs	r4, #0
  400818:	4625      	mov	r5, r4
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40081a:	f04f 0e19 	mov.w	lr, #25
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
	qspi->QSPI_TDR = w_data ;
  40081e:	4626      	mov	r6, r4
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
  400820:	4627      	mov	r7, r4
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
  400822:	6918      	ldr	r0, [r3, #16]
  400824:	f010 0f02 	tst.w	r0, #2
  400828:	d015      	beq.n	400856 <qspi_read+0xc2>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  40082a:	6898      	ldr	r0, [r3, #8]
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
				*pw_data= qspi_read_spi(qspi);
  40082c:	7008      	strb	r0, [r1, #0]
				if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  40082e:	6858      	ldr	r0, [r3, #4]
  400830:	f410 6f70 	tst.w	r0, #3840	; 0xf00
  400834:	d001      	beq.n	40083a <qspi_read+0xa6>
					pw_data += sizeof(uint16_t);
  400836:	3102      	adds	r1, #2
  400838:	e000      	b.n	40083c <qspi_read+0xa8>
				} else {
					pw_data += sizeof(uint8_t);
  40083a:	3101      	adds	r1, #1
				}
				num_of_bytes_read++;
  40083c:	3501      	adds	r5, #1
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40083e:	6918      	ldr	r0, [r3, #16]
  400840:	f010 0f04 	tst.w	r0, #4
  400844:	d0fb      	beq.n	40083e <qspi_read+0xaa>
	qspi->QSPI_TDR = w_data ;
  400846:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  400848:	6918      	ldr	r0, [r3, #16]
  40084a:	f010 0f02 	tst.w	r0, #2
  40084e:	d0fb      	beq.n	400848 <qspi_read+0xb4>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400850:	4634      	mov	r4, r6
				status = STATUS_OK;
  400852:	4638      	mov	r0, r7
  400854:	e004      	b.n	400860 <qspi_read+0xcc>
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
  400856:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40085a:	d208      	bcs.n	40086e <qspi_read+0xda>
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
					num_of_attempt++;
  40085c:	3401      	adds	r4, #1
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40085e:	4670      	mov	r0, lr
		//qspi_read_spi(qspi);
		//qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
  400860:	42aa      	cmp	r2, r5
  400862:	d8de      	bhi.n	400822 <qspi_read+0x8e>
  400864:	e004      	b.n	400870 <qspi_read+0xdc>
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  400866:	2000      	movs	r0, #0
  400868:	e002      	b.n	400870 <qspi_read+0xdc>
				num_of_attempt = 0;
				status = STATUS_OK;
				break;
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086a:	20fd      	movs	r0, #253	; 0xfd
  40086c:	e000      	b.n	400870 <qspi_read+0xdc>
				status = STATUS_OK;
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086e:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400870:	b240      	sxtb	r0, r0
  400872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400874:	00412d80 	.word	0x00412d80
  400878:	00412e20 	.word	0x00412e20
  40087c:	00412d78 	.word	0x00412d78
  400880:	0040b189 	.word	0x0040b189

00400884 <qspi_write>:
 * \param us_data      Pointer to data to be written.
 * \param num_of_bytes Write data numbers.
 * \return status      Write option result.
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400886:	b930      	cbnz	r0, 400896 <qspi_write+0x12>
  400888:	4823      	ldr	r0, [pc, #140]	; (400918 <qspi_write+0x94>)
  40088a:	f240 118b 	movw	r1, #395	; 0x18b
  40088e:	4a23      	ldr	r2, [pc, #140]	; (40091c <qspi_write+0x98>)
  400890:	4b23      	ldr	r3, [pc, #140]	; (400920 <qspi_write+0x9c>)
  400892:	4c24      	ldr	r4, [pc, #144]	; (400924 <qspi_write+0xa0>)
  400894:	47a0      	blx	r4
  400896:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  400898:	2a00      	cmp	r2, #0
  40089a:	d038      	beq.n	40090e <qspi_write+0x8a>
	uint32_t num_of_bytes_write = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint8_t Addr_Inc = 0;

	if (num_of_bytes == 1) {
  40089c:	2a01      	cmp	r2, #1
  40089e:	d114      	bne.n	4008ca <qspi_write+0x46>
  4008a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
  4008a4:	6918      	ldr	r0, [r3, #16]
  4008a6:	f010 0f02 	tst.w	r0, #2
  4008aa:	d00b      	beq.n	4008c4 <qspi_write+0x40>
				qspi_write_spi(qspi, (uint16_t)(*us_data));
  4008ac:	8809      	ldrh	r1, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ae:	691a      	ldr	r2, [r3, #16]
  4008b0:	f012 0f04 	tst.w	r2, #4
  4008b4:	d0fb      	beq.n	4008ae <qspi_write+0x2a>
	qspi->QSPI_TDR = w_data ;
  4008b6:	60d9      	str	r1, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008b8:	691a      	ldr	r2, [r3, #16]
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d0fb      	beq.n	4008b8 <qspi_write+0x34>
	if (num_of_bytes == 1) {
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
				qspi_write_spi(qspi, (uint16_t)(*us_data));
				num_of_attempt = 0;
				status = STATUS_OK;
  4008c0:	2000      	movs	r0, #0
  4008c2:	e027      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
  4008c4:	3a01      	subs	r2, #1
  4008c6:	d1ed      	bne.n	4008a4 <qspi_write+0x20>
  4008c8:	e023      	b.n	400912 <qspi_write+0x8e>
					break;
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  4008ca:	6840      	ldr	r0, [r0, #4]
  4008cc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
  4008d0:	2800      	cmp	r0, #0
  4008d2:	bf14      	ite	ne
  4008d4:	f04f 0e02 	movne.w	lr, #2
  4008d8:	f04f 0e01 	moveq.w	lr, #1
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
			Addr_Inc = sizeof(uint16_t);
  4008dc:	2400      	movs	r4, #0
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
			} else {
				status = STATUS_ERR_BUSY;
  4008de:	2519      	movs	r5, #25
		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
  4008e0:	4627      	mov	r7, r4
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
  4008e2:	6918      	ldr	r0, [r3, #16]
  4008e4:	f010 0f04 	tst.w	r0, #4
  4008e8:	d00c      	beq.n	400904 <qspi_write+0x80>
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
  4008ea:	780e      	ldrb	r6, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ec:	6918      	ldr	r0, [r3, #16]
  4008ee:	f010 0f04 	tst.w	r0, #4
  4008f2:	d0fb      	beq.n	4008ec <qspi_write+0x68>
	qspi->QSPI_TDR = w_data ;
  4008f4:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008f6:	6918      	ldr	r0, [r3, #16]
  4008f8:	f010 0f02 	tst.w	r0, #2
  4008fc:	d0fb      	beq.n	4008f6 <qspi_write+0x72>
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
  4008fe:	4471      	add	r1, lr
				num_of_attempt = 0;
				status = STATUS_OK;
  400900:	4638      	mov	r0, r7
  400902:	e000      	b.n	400906 <qspi_write+0x82>
			} else {
				status = STATUS_ERR_BUSY;
  400904:	4628      	mov	r0, r5
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
  400906:	3401      	adds	r4, #1
  400908:	42a2      	cmp	r2, r4
  40090a:	d2ea      	bcs.n	4008e2 <qspi_write+0x5e>
  40090c:	e002      	b.n	400914 <qspi_write+0x90>
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  40090e:	2000      	movs	r0, #0
  400910:	e000      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  400912:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400914:	b240      	sxtb	r0, r0
  400916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400918:	00412d80 	.word	0x00412d80
  40091c:	00412e2c 	.word	0x00412e2c
  400920:	00412d78 	.word	0x00412d78
  400924:	0040b189 	.word	0x0040b189

00400928 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400928:	4b48      	ldr	r3, [pc, #288]	; (400a4c <sdramc_init+0x124>)
  40092a:	781b      	ldrb	r3, [r3, #0]
  40092c:	2bff      	cmp	r3, #255	; 0xff
  40092e:	d100      	bne.n	400932 <sdramc_init+0xa>
  400930:	e7fe      	b.n	400930 <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  400932:	b470      	push	{r4, r5, r6}
  400934:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400936:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40093a:	b672      	cpsid	i
  40093c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400940:	2400      	movs	r4, #0
  400942:	4a43      	ldr	r2, [pc, #268]	; (400a50 <sdramc_init+0x128>)
  400944:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400946:	4c41      	ldr	r4, [pc, #260]	; (400a4c <sdramc_init+0x124>)
  400948:	7822      	ldrb	r2, [r4, #0]
  40094a:	3201      	adds	r2, #1
  40094c:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40094e:	b92b      	cbnz	r3, 40095c <sdramc_init+0x34>
		cpu_irq_enable();
  400950:	2201      	movs	r2, #1
  400952:	4b3f      	ldr	r3, [pc, #252]	; (400a50 <sdramc_init+0x128>)
  400954:	701a      	strb	r2, [r3, #0]
  400956:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40095a:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  40095c:	6883      	ldr	r3, [r0, #8]
  40095e:	4a3d      	ldr	r2, [pc, #244]	; (400a54 <sdramc_init+0x12c>)
  400960:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  400962:	2300      	movs	r3, #0
  400964:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  400966:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400968:	9301      	str	r3, [sp, #4]
  40096a:	4b3b      	ldr	r3, [pc, #236]	; (400a58 <sdramc_init+0x130>)
  40096c:	fba3 2301 	umull	r2, r3, r3, r1
  400970:	0c9a      	lsrs	r2, r3, #18
  400972:	23c8      	movs	r3, #200	; 0xc8
  400974:	fb03 f302 	mul.w	r3, r3, r2
  400978:	4a38      	ldr	r2, [pc, #224]	; (400a5c <sdramc_init+0x134>)
  40097a:	fba2 2303 	umull	r2, r3, r2, r3
  40097e:	089b      	lsrs	r3, r3, #2
  400980:	9a01      	ldr	r2, [sp, #4]
  400982:	4293      	cmp	r3, r2
  400984:	d905      	bls.n	400992 <sdramc_init+0x6a>
  400986:	9a01      	ldr	r2, [sp, #4]
  400988:	3201      	adds	r2, #1
  40098a:	9201      	str	r2, [sp, #4]
  40098c:	9a01      	ldr	r2, [sp, #4]
  40098e:	429a      	cmp	r2, r3
  400990:	d3f9      	bcc.n	400986 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  400992:	4d30      	ldr	r5, [pc, #192]	; (400a54 <sdramc_init+0x12c>)
  400994:	2201      	movs	r2, #1
  400996:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  400998:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  40099c:	2200      	movs	r2, #0
  40099e:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  4009a0:	2602      	movs	r6, #2
  4009a2:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  4009a4:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  4009a6:	9201      	str	r2, [sp, #4]
  4009a8:	9a01      	ldr	r2, [sp, #4]
  4009aa:	429a      	cmp	r2, r3
  4009ac:	d205      	bcs.n	4009ba <sdramc_init+0x92>
  4009ae:	9a01      	ldr	r2, [sp, #4]
  4009b0:	3201      	adds	r2, #1
  4009b2:	9201      	str	r2, [sp, #4]
  4009b4:	9a01      	ldr	r2, [sp, #4]
  4009b6:	429a      	cmp	r2, r3
  4009b8:	d3f9      	bcc.n	4009ae <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ba:	4b26      	ldr	r3, [pc, #152]	; (400a54 <sdramc_init+0x12c>)
  4009bc:	2404      	movs	r4, #4
  4009be:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  4009c0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  4009c4:	2501      	movs	r5, #1
  4009c6:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009c8:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  4009ca:	2502      	movs	r5, #2
  4009cc:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ce:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  4009d0:	2503      	movs	r5, #3
  4009d2:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  4009d6:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d8:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  4009da:	2605      	movs	r6, #5
  4009dc:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009de:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  4009e0:	2606      	movs	r6, #6
  4009e2:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  4009e6:	2607      	movs	r6, #7
  4009e8:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ea:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  4009ec:	2408      	movs	r4, #8
  4009ee:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4009f0:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009f2:	6844      	ldr	r4, [r0, #4]
  4009f4:	0064      	lsls	r4, r4, #1
  4009f6:	4414      	add	r4, r2
  4009f8:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  4009fc:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009fe:	6844      	ldr	r4, [r0, #4]
  400a00:	0064      	lsls	r4, r4, #1
  400a02:	4414      	add	r4, r2
  400a04:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a06:	6844      	ldr	r4, [r0, #4]
  400a08:	0064      	lsls	r4, r4, #1
  400a0a:	4414      	add	r4, r2
  400a0c:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a0e:	6840      	ldr	r0, [r0, #4]
  400a10:	0040      	lsls	r0, r0, #1
  400a12:	4410      	add	r0, r2
  400a14:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  400a16:	2000      	movs	r0, #0
  400a18:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  400a1a:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  400a1c:	4a10      	ldr	r2, [pc, #64]	; (400a60 <sdramc_init+0x138>)
  400a1e:	fba2 1201 	umull	r1, r2, r2, r1
  400a22:	0992      	lsrs	r2, r2, #6
  400a24:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  400a26:	9901      	ldr	r1, [sp, #4]
  400a28:	f641 6278 	movw	r2, #7800	; 0x1e78
  400a2c:	fb02 f201 	mul.w	r2, r2, r1
  400a30:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  400a32:	9a01      	ldr	r2, [sp, #4]
  400a34:	4908      	ldr	r1, [pc, #32]	; (400a58 <sdramc_init+0x130>)
  400a36:	fba1 1202 	umull	r1, r2, r1, r2
  400a3a:	0c92      	lsrs	r2, r2, #18
  400a3c:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  400a3e:	9a01      	ldr	r2, [sp, #4]
  400a40:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400a44:	605a      	str	r2, [r3, #4]
}
  400a46:	b003      	add	sp, #12
  400a48:	bc70      	pop	{r4, r5, r6}
  400a4a:	4770      	bx	lr
  400a4c:	2040c518 	.word	0x2040c518
  400a50:	20400010 	.word	0x20400010
  400a54:	40084000 	.word	0x40084000
  400a58:	431bde83 	.word	0x431bde83
  400a5c:	aaaaaaab 	.word	0xaaaaaaab
  400a60:	10624dd3 	.word	0x10624dd3

00400a64 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400a64:	2901      	cmp	r1, #1
  400a66:	d104      	bne.n	400a72 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400a68:	6882      	ldr	r2, [r0, #8]
  400a6a:	4b06      	ldr	r3, [pc, #24]	; (400a84 <supc_switch_sclk_to_32kxtal+0x20>)
  400a6c:	4313      	orrs	r3, r2
  400a6e:	6083      	str	r3, [r0, #8]
  400a70:	e003      	b.n	400a7a <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400a72:	6882      	ldr	r2, [r0, #8]
  400a74:	4b04      	ldr	r3, [pc, #16]	; (400a88 <supc_switch_sclk_to_32kxtal+0x24>)
  400a76:	4013      	ands	r3, r2
  400a78:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400a7a:	6802      	ldr	r2, [r0, #0]
  400a7c:	4b03      	ldr	r3, [pc, #12]	; (400a8c <supc_switch_sclk_to_32kxtal+0x28>)
  400a7e:	4313      	orrs	r3, r2
  400a80:	6003      	str	r3, [r0, #0]
  400a82:	4770      	bx	lr
  400a84:	a5100000 	.word	0xa5100000
  400a88:	5aefffff 	.word	0x5aefffff
  400a8c:	a5000008 	.word	0xa5000008

00400a90 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a94:	6043      	str	r3, [r0, #4]
  400a96:	4770      	bx	lr

00400a98 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400a98:	4b0d      	ldr	r3, [pc, #52]	; (400ad0 <prvTaskExitError+0x38>)
  400a9a:	681b      	ldr	r3, [r3, #0]
  400a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aa0:	d00a      	beq.n	400ab8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400aa2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aa6:	b672      	cpsid	i
  400aa8:	f383 8811 	msr	BASEPRI, r3
  400aac:	f3bf 8f6f 	isb	sy
  400ab0:	f3bf 8f4f 	dsb	sy
  400ab4:	b662      	cpsie	i
  400ab6:	e7fe      	b.n	400ab6 <prvTaskExitError+0x1e>
  400ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400abc:	b672      	cpsid	i
  400abe:	f383 8811 	msr	BASEPRI, r3
  400ac2:	f3bf 8f6f 	isb	sy
  400ac6:	f3bf 8f4f 	dsb	sy
  400aca:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400acc:	e7fe      	b.n	400acc <prvTaskExitError+0x34>
  400ace:	bf00      	nop
  400ad0:	2040000c 	.word	0x2040000c

00400ad4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400ad4:	4806      	ldr	r0, [pc, #24]	; (400af0 <prvPortStartFirstTask+0x1c>)
  400ad6:	6800      	ldr	r0, [r0, #0]
  400ad8:	6800      	ldr	r0, [r0, #0]
  400ada:	f380 8808 	msr	MSP, r0
  400ade:	b662      	cpsie	i
  400ae0:	b661      	cpsie	f
  400ae2:	f3bf 8f4f 	dsb	sy
  400ae6:	f3bf 8f6f 	isb	sy
  400aea:	df00      	svc	0
  400aec:	bf00      	nop
  400aee:	0000      	.short	0x0000
  400af0:	e000ed08 	.word	0xe000ed08

00400af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b04 <vPortEnableVFP+0x10>
  400af8:	6801      	ldr	r1, [r0, #0]
  400afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400afe:	6001      	str	r1, [r0, #0]
  400b00:	4770      	bx	lr
  400b02:	0000      	.short	0x0000
  400b04:	e000ed88 	.word	0xe000ed88

00400b08 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b0c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400b10:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400b14:	4b05      	ldr	r3, [pc, #20]	; (400b2c <pxPortInitialiseStack+0x24>)
  400b16:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400b1a:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400b1e:	f06f 0302 	mvn.w	r3, #2
  400b22:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400b26:	3844      	subs	r0, #68	; 0x44
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	00400a99 	.word	0x00400a99

00400b30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400b30:	4b06      	ldr	r3, [pc, #24]	; (400b4c <pxCurrentTCBConst2>)
  400b32:	6819      	ldr	r1, [r3, #0]
  400b34:	6808      	ldr	r0, [r1, #0]
  400b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b3a:	f380 8809 	msr	PSP, r0
  400b3e:	f3bf 8f6f 	isb	sy
  400b42:	f04f 0000 	mov.w	r0, #0
  400b46:	f380 8811 	msr	BASEPRI, r0
  400b4a:	4770      	bx	lr

00400b4c <pxCurrentTCBConst2>:
  400b4c:	2040c420 	.word	0x2040c420

00400b50 <vPortEnterCritical>:
  400b50:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b54:	b672      	cpsid	i
  400b56:	f383 8811 	msr	BASEPRI, r3
  400b5a:	f3bf 8f6f 	isb	sy
  400b5e:	f3bf 8f4f 	dsb	sy
  400b62:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400b64:	4a0b      	ldr	r2, [pc, #44]	; (400b94 <vPortEnterCritical+0x44>)
  400b66:	6813      	ldr	r3, [r2, #0]
  400b68:	3301      	adds	r3, #1
  400b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400b6c:	2b01      	cmp	r3, #1
  400b6e:	d10f      	bne.n	400b90 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400b70:	4b09      	ldr	r3, [pc, #36]	; (400b98 <vPortEnterCritical+0x48>)
  400b72:	681b      	ldr	r3, [r3, #0]
  400b74:	f013 0fff 	tst.w	r3, #255	; 0xff
  400b78:	d00a      	beq.n	400b90 <vPortEnterCritical+0x40>
  400b7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b7e:	b672      	cpsid	i
  400b80:	f383 8811 	msr	BASEPRI, r3
  400b84:	f3bf 8f6f 	isb	sy
  400b88:	f3bf 8f4f 	dsb	sy
  400b8c:	b662      	cpsie	i
  400b8e:	e7fe      	b.n	400b8e <vPortEnterCritical+0x3e>
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop
  400b94:	2040000c 	.word	0x2040000c
  400b98:	e000ed04 	.word	0xe000ed04

00400b9c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400b9c:	4b0a      	ldr	r3, [pc, #40]	; (400bc8 <vPortExitCritical+0x2c>)
  400b9e:	681b      	ldr	r3, [r3, #0]
  400ba0:	b953      	cbnz	r3, 400bb8 <vPortExitCritical+0x1c>
  400ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba6:	b672      	cpsid	i
  400ba8:	f383 8811 	msr	BASEPRI, r3
  400bac:	f3bf 8f6f 	isb	sy
  400bb0:	f3bf 8f4f 	dsb	sy
  400bb4:	b662      	cpsie	i
  400bb6:	e7fe      	b.n	400bb6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400bb8:	3b01      	subs	r3, #1
  400bba:	4a03      	ldr	r2, [pc, #12]	; (400bc8 <vPortExitCritical+0x2c>)
  400bbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400bbe:	b90b      	cbnz	r3, 400bc4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400bc0:	f383 8811 	msr	BASEPRI, r3
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	2040000c 	.word	0x2040000c

00400bcc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400bcc:	f3ef 8009 	mrs	r0, PSP
  400bd0:	f3bf 8f6f 	isb	sy
  400bd4:	4b15      	ldr	r3, [pc, #84]	; (400c2c <pxCurrentTCBConst>)
  400bd6:	681a      	ldr	r2, [r3, #0]
  400bd8:	f01e 0f10 	tst.w	lr, #16
  400bdc:	bf08      	it	eq
  400bde:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400be2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400be6:	6010      	str	r0, [r2, #0]
  400be8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400bec:	f04f 0080 	mov.w	r0, #128	; 0x80
  400bf0:	b672      	cpsid	i
  400bf2:	f380 8811 	msr	BASEPRI, r0
  400bf6:	f3bf 8f4f 	dsb	sy
  400bfa:	f3bf 8f6f 	isb	sy
  400bfe:	b662      	cpsie	i
  400c00:	f001 f92c 	bl	401e5c <vTaskSwitchContext>
  400c04:	f04f 0000 	mov.w	r0, #0
  400c08:	f380 8811 	msr	BASEPRI, r0
  400c0c:	bc08      	pop	{r3}
  400c0e:	6819      	ldr	r1, [r3, #0]
  400c10:	6808      	ldr	r0, [r1, #0]
  400c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c16:	f01e 0f10 	tst.w	lr, #16
  400c1a:	bf08      	it	eq
  400c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400c20:	f380 8809 	msr	PSP, r0
  400c24:	f3bf 8f6f 	isb	sy
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop

00400c2c <pxCurrentTCBConst>:
  400c2c:	2040c420 	.word	0x2040c420

00400c30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400c30:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400c32:	f3ef 8311 	mrs	r3, BASEPRI
  400c36:	f04f 0280 	mov.w	r2, #128	; 0x80
  400c3a:	b672      	cpsid	i
  400c3c:	f382 8811 	msr	BASEPRI, r2
  400c40:	f3bf 8f6f 	isb	sy
  400c44:	f3bf 8f4f 	dsb	sy
  400c48:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400c4a:	4b05      	ldr	r3, [pc, #20]	; (400c60 <SysTick_Handler+0x30>)
  400c4c:	4798      	blx	r3
  400c4e:	b118      	cbz	r0, 400c58 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c54:	4b03      	ldr	r3, [pc, #12]	; (400c64 <SysTick_Handler+0x34>)
  400c56:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c58:	2300      	movs	r3, #0
  400c5a:	f383 8811 	msr	BASEPRI, r3
  400c5e:	bd08      	pop	{r3, pc}
  400c60:	00401af1 	.word	0x00401af1
  400c64:	e000ed04 	.word	0xe000ed04

00400c68 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400c68:	4a03      	ldr	r2, [pc, #12]	; (400c78 <vPortSetupTimerInterrupt+0x10>)
  400c6a:	4b04      	ldr	r3, [pc, #16]	; (400c7c <vPortSetupTimerInterrupt+0x14>)
  400c6c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400c6e:	2207      	movs	r2, #7
  400c70:	3b04      	subs	r3, #4
  400c72:	601a      	str	r2, [r3, #0]
  400c74:	4770      	bx	lr
  400c76:	bf00      	nop
  400c78:	000493df 	.word	0x000493df
  400c7c:	e000e014 	.word	0xe000e014

00400c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400c80:	b500      	push	{lr}
  400c82:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400c84:	4b25      	ldr	r3, [pc, #148]	; (400d1c <xPortStartScheduler+0x9c>)
  400c86:	781a      	ldrb	r2, [r3, #0]
  400c88:	b2d2      	uxtb	r2, r2
  400c8a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400c8c:	22ff      	movs	r2, #255	; 0xff
  400c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400c90:	781b      	ldrb	r3, [r3, #0]
  400c92:	b2db      	uxtb	r3, r3
  400c94:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400c98:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ca0:	4a1f      	ldr	r2, [pc, #124]	; (400d20 <xPortStartScheduler+0xa0>)
  400ca2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400ca4:	2207      	movs	r2, #7
  400ca6:	4b1f      	ldr	r3, [pc, #124]	; (400d24 <xPortStartScheduler+0xa4>)
  400ca8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400caa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cae:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cb2:	d010      	beq.n	400cd6 <xPortStartScheduler+0x56>
  400cb4:	2206      	movs	r2, #6
  400cb6:	e000      	b.n	400cba <xPortStartScheduler+0x3a>
  400cb8:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400cba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cbe:	005b      	lsls	r3, r3, #1
  400cc0:	b2db      	uxtb	r3, r3
  400cc2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cca:	1e51      	subs	r1, r2, #1
  400ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cd0:	d1f2      	bne.n	400cb8 <xPortStartScheduler+0x38>
  400cd2:	4b14      	ldr	r3, [pc, #80]	; (400d24 <xPortStartScheduler+0xa4>)
  400cd4:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cd6:	4a13      	ldr	r2, [pc, #76]	; (400d24 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400cd8:	6813      	ldr	r3, [r2, #0]
  400cda:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400ce0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400ce2:	9b01      	ldr	r3, [sp, #4]
  400ce4:	b2db      	uxtb	r3, r3
  400ce6:	4a0d      	ldr	r2, [pc, #52]	; (400d1c <xPortStartScheduler+0x9c>)
  400ce8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400cea:	4b0f      	ldr	r3, [pc, #60]	; (400d28 <xPortStartScheduler+0xa8>)
  400cec:	681a      	ldr	r2, [r3, #0]
  400cee:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400cf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400cf4:	681a      	ldr	r2, [r3, #0]
  400cf6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400cfa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400cfc:	4b0b      	ldr	r3, [pc, #44]	; (400d2c <xPortStartScheduler+0xac>)
  400cfe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400d00:	2200      	movs	r2, #0
  400d02:	4b0b      	ldr	r3, [pc, #44]	; (400d30 <xPortStartScheduler+0xb0>)
  400d04:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400d06:	4b0b      	ldr	r3, [pc, #44]	; (400d34 <xPortStartScheduler+0xb4>)
  400d08:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400d0a:	4a0b      	ldr	r2, [pc, #44]	; (400d38 <xPortStartScheduler+0xb8>)
  400d0c:	6813      	ldr	r3, [r2, #0]
  400d0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400d12:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400d14:	4b09      	ldr	r3, [pc, #36]	; (400d3c <xPortStartScheduler+0xbc>)
  400d16:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400d18:	4b09      	ldr	r3, [pc, #36]	; (400d40 <xPortStartScheduler+0xc0>)
  400d1a:	4798      	blx	r3
  400d1c:	e000e400 	.word	0xe000e400
  400d20:	204009dc 	.word	0x204009dc
  400d24:	204009e0 	.word	0x204009e0
  400d28:	e000ed20 	.word	0xe000ed20
  400d2c:	00400c69 	.word	0x00400c69
  400d30:	2040000c 	.word	0x2040000c
  400d34:	00400af5 	.word	0x00400af5
  400d38:	e000ef34 	.word	0xe000ef34
  400d3c:	00400ad5 	.word	0x00400ad5
  400d40:	00400a99 	.word	0x00400a99

00400d44 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400d44:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400d48:	2b0f      	cmp	r3, #15
  400d4a:	d911      	bls.n	400d70 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400d4c:	4a12      	ldr	r2, [pc, #72]	; (400d98 <vPortValidateInterruptPriority+0x54>)
  400d4e:	5c9b      	ldrb	r3, [r3, r2]
  400d50:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400d52:	4a12      	ldr	r2, [pc, #72]	; (400d9c <vPortValidateInterruptPriority+0x58>)
  400d54:	7812      	ldrb	r2, [r2, #0]
  400d56:	429a      	cmp	r2, r3
  400d58:	d90a      	bls.n	400d70 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d5e:	b672      	cpsid	i
  400d60:	f383 8811 	msr	BASEPRI, r3
  400d64:	f3bf 8f6f 	isb	sy
  400d68:	f3bf 8f4f 	dsb	sy
  400d6c:	b662      	cpsie	i
  400d6e:	e7fe      	b.n	400d6e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400d70:	4b0b      	ldr	r3, [pc, #44]	; (400da0 <vPortValidateInterruptPriority+0x5c>)
  400d72:	681b      	ldr	r3, [r3, #0]
  400d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d78:	4a0a      	ldr	r2, [pc, #40]	; (400da4 <vPortValidateInterruptPriority+0x60>)
  400d7a:	6812      	ldr	r2, [r2, #0]
  400d7c:	4293      	cmp	r3, r2
  400d7e:	d90a      	bls.n	400d96 <vPortValidateInterruptPriority+0x52>
  400d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d84:	b672      	cpsid	i
  400d86:	f383 8811 	msr	BASEPRI, r3
  400d8a:	f3bf 8f6f 	isb	sy
  400d8e:	f3bf 8f4f 	dsb	sy
  400d92:	b662      	cpsie	i
  400d94:	e7fe      	b.n	400d94 <vPortValidateInterruptPriority+0x50>
  400d96:	4770      	bx	lr
  400d98:	e000e3f0 	.word	0xe000e3f0
  400d9c:	204009dc 	.word	0x204009dc
  400da0:	e000ed0c 	.word	0xe000ed0c
  400da4:	204009e0 	.word	0x204009e0

00400da8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400da8:	b538      	push	{r3, r4, r5, lr}
  400daa:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400dac:	f010 0f07 	tst.w	r0, #7
  400db0:	d002      	beq.n	400db8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400db2:	f020 0407 	bic.w	r4, r0, #7
  400db6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400db8:	4b0e      	ldr	r3, [pc, #56]	; (400df4 <pvPortMalloc+0x4c>)
  400dba:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400dbc:	4b0e      	ldr	r3, [pc, #56]	; (400df8 <pvPortMalloc+0x50>)
  400dbe:	681b      	ldr	r3, [r3, #0]
  400dc0:	b923      	cbnz	r3, 400dcc <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400dc2:	4b0e      	ldr	r3, [pc, #56]	; (400dfc <pvPortMalloc+0x54>)
  400dc4:	f023 0307 	bic.w	r3, r3, #7
  400dc8:	4a0b      	ldr	r2, [pc, #44]	; (400df8 <pvPortMalloc+0x50>)
  400dca:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400dcc:	4b0c      	ldr	r3, [pc, #48]	; (400e00 <pvPortMalloc+0x58>)
  400dce:	681b      	ldr	r3, [r3, #0]
  400dd0:	441c      	add	r4, r3
  400dd2:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400dd6:	4294      	cmp	r4, r2
  400dd8:	d807      	bhi.n	400dea <pvPortMalloc+0x42>
  400dda:	42a3      	cmp	r3, r4
  400ddc:	d205      	bcs.n	400dea <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400dde:	4a06      	ldr	r2, [pc, #24]	; (400df8 <pvPortMalloc+0x50>)
  400de0:	6815      	ldr	r5, [r2, #0]
  400de2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400de4:	4b06      	ldr	r3, [pc, #24]	; (400e00 <pvPortMalloc+0x58>)
  400de6:	601c      	str	r4, [r3, #0]
  400de8:	e000      	b.n	400dec <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400dea:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400dec:	4b05      	ldr	r3, [pc, #20]	; (400e04 <pvPortMalloc+0x5c>)
  400dee:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400df0:	4628      	mov	r0, r5
  400df2:	bd38      	pop	{r3, r4, r5, pc}
  400df4:	00401ad5 	.word	0x00401ad5
  400df8:	2040c1e8 	.word	0x2040c1e8
  400dfc:	204009f0 	.word	0x204009f0
  400e00:	204009e4 	.word	0x204009e4
  400e04:	00401c25 	.word	0x00401c25

00400e08 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400e08:	b150      	cbz	r0, 400e20 <vPortFree+0x18>
  400e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e0e:	b672      	cpsid	i
  400e10:	f383 8811 	msr	BASEPRI, r3
  400e14:	f3bf 8f6f 	isb	sy
  400e18:	f3bf 8f4f 	dsb	sy
  400e1c:	b662      	cpsie	i
  400e1e:	e7fe      	b.n	400e1e <vPortFree+0x16>
  400e20:	4770      	bx	lr
  400e22:	bf00      	nop

00400e24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e24:	f100 0308 	add.w	r3, r0, #8
  400e28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e2a:	f04f 32ff 	mov.w	r2, #4294967295
  400e2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e34:	2300      	movs	r3, #0
  400e36:	6003      	str	r3, [r0, #0]
  400e38:	4770      	bx	lr
  400e3a:	bf00      	nop

00400e3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e3c:	2300      	movs	r3, #0
  400e3e:	6103      	str	r3, [r0, #16]
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop

00400e44 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e44:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e46:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e48:	689a      	ldr	r2, [r3, #8]
  400e4a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e4c:	689a      	ldr	r2, [r3, #8]
  400e4e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e50:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e52:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e54:	6803      	ldr	r3, [r0, #0]
  400e56:	3301      	adds	r3, #1
  400e58:	6003      	str	r3, [r0, #0]
  400e5a:	4770      	bx	lr

00400e5c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e5c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e5e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e60:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e64:	d101      	bne.n	400e6a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400e66:	6902      	ldr	r2, [r0, #16]
  400e68:	e007      	b.n	400e7a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e6a:	f100 0208 	add.w	r2, r0, #8
  400e6e:	e000      	b.n	400e72 <vListInsert+0x16>
  400e70:	461a      	mov	r2, r3
  400e72:	6853      	ldr	r3, [r2, #4]
  400e74:	681c      	ldr	r4, [r3, #0]
  400e76:	42a5      	cmp	r5, r4
  400e78:	d2fa      	bcs.n	400e70 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e7a:	6853      	ldr	r3, [r2, #4]
  400e7c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e7e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e80:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e82:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e86:	6803      	ldr	r3, [r0, #0]
  400e88:	3301      	adds	r3, #1
  400e8a:	6003      	str	r3, [r0, #0]
}
  400e8c:	bc30      	pop	{r4, r5}
  400e8e:	4770      	bx	lr

00400e90 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e90:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e92:	6842      	ldr	r2, [r0, #4]
  400e94:	6881      	ldr	r1, [r0, #8]
  400e96:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e98:	6882      	ldr	r2, [r0, #8]
  400e9a:	6841      	ldr	r1, [r0, #4]
  400e9c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e9e:	685a      	ldr	r2, [r3, #4]
  400ea0:	4282      	cmp	r2, r0
  400ea2:	d101      	bne.n	400ea8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400ea4:	6892      	ldr	r2, [r2, #8]
  400ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400ea8:	2200      	movs	r2, #0
  400eaa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400eac:	6818      	ldr	r0, [r3, #0]
  400eae:	3801      	subs	r0, #1
  400eb0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400eb2:	4770      	bx	lr

00400eb4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400eb4:	b538      	push	{r3, r4, r5, lr}
  400eb6:	4604      	mov	r4, r0
  400eb8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400eba:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ebc:	b942      	cbnz	r2, 400ed0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ebe:	6803      	ldr	r3, [r0, #0]
  400ec0:	2b00      	cmp	r3, #0
  400ec2:	d12b      	bne.n	400f1c <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ec4:	6840      	ldr	r0, [r0, #4]
  400ec6:	4b1b      	ldr	r3, [pc, #108]	; (400f34 <prvCopyDataToQueue+0x80>)
  400ec8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400eca:	2300      	movs	r3, #0
  400ecc:	6063      	str	r3, [r4, #4]
  400ece:	e02c      	b.n	400f2a <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400ed0:	b96d      	cbnz	r5, 400eee <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400ed2:	6880      	ldr	r0, [r0, #8]
  400ed4:	4b18      	ldr	r3, [pc, #96]	; (400f38 <prvCopyDataToQueue+0x84>)
  400ed6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ed8:	68a2      	ldr	r2, [r4, #8]
  400eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400edc:	4413      	add	r3, r2
  400ede:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400ee0:	6862      	ldr	r2, [r4, #4]
  400ee2:	4293      	cmp	r3, r2
  400ee4:	d31c      	bcc.n	400f20 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ee6:	6823      	ldr	r3, [r4, #0]
  400ee8:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400eea:	2000      	movs	r0, #0
  400eec:	e01d      	b.n	400f2a <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400eee:	68c0      	ldr	r0, [r0, #12]
  400ef0:	4b11      	ldr	r3, [pc, #68]	; (400f38 <prvCopyDataToQueue+0x84>)
  400ef2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400ef6:	425b      	negs	r3, r3
  400ef8:	68e2      	ldr	r2, [r4, #12]
  400efa:	441a      	add	r2, r3
  400efc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400efe:	6821      	ldr	r1, [r4, #0]
  400f00:	428a      	cmp	r2, r1
  400f02:	d202      	bcs.n	400f0a <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f04:	6862      	ldr	r2, [r4, #4]
  400f06:	4413      	add	r3, r2
  400f08:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f0a:	2d02      	cmp	r5, #2
  400f0c:	d10a      	bne.n	400f24 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f10:	b153      	cbz	r3, 400f28 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f14:	3b01      	subs	r3, #1
  400f16:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f18:	2000      	movs	r0, #0
  400f1a:	e006      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f1c:	2000      	movs	r0, #0
  400f1e:	e004      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f20:	2000      	movs	r0, #0
  400f22:	e002      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f24:	2000      	movs	r0, #0
  400f26:	e000      	b.n	400f2a <prvCopyDataToQueue+0x76>
  400f28:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f2c:	3301      	adds	r3, #1
  400f2e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f30:	bd38      	pop	{r3, r4, r5, pc}
  400f32:	bf00      	nop
  400f34:	00402229 	.word	0x00402229
  400f38:	0040b7e9 	.word	0x0040b7e9

00400f3c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f3c:	b530      	push	{r4, r5, lr}
  400f3e:	b083      	sub	sp, #12
  400f40:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f42:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f44:	b954      	cbnz	r4, 400f5c <prvNotifyQueueSetContainer+0x20>
  400f46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f4a:	b672      	cpsid	i
  400f4c:	f383 8811 	msr	BASEPRI, r3
  400f50:	f3bf 8f6f 	isb	sy
  400f54:	f3bf 8f4f 	dsb	sy
  400f58:	b662      	cpsie	i
  400f5a:	e7fe      	b.n	400f5a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f60:	429a      	cmp	r2, r3
  400f62:	d30a      	bcc.n	400f7a <prvNotifyQueueSetContainer+0x3e>
  400f64:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f68:	b672      	cpsid	i
  400f6a:	f383 8811 	msr	BASEPRI, r3
  400f6e:	f3bf 8f6f 	isb	sy
  400f72:	f3bf 8f4f 	dsb	sy
  400f76:	b662      	cpsie	i
  400f78:	e7fe      	b.n	400f78 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f7c:	4293      	cmp	r3, r2
  400f7e:	d917      	bls.n	400fb0 <prvNotifyQueueSetContainer+0x74>
  400f80:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400f82:	4620      	mov	r0, r4
  400f84:	a901      	add	r1, sp, #4
  400f86:	4b0c      	ldr	r3, [pc, #48]	; (400fb8 <prvNotifyQueueSetContainer+0x7c>)
  400f88:	4798      	blx	r3
  400f8a:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400f8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f92:	d109      	bne.n	400fa8 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f96:	b163      	cbz	r3, 400fb2 <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f9c:	4b07      	ldr	r3, [pc, #28]	; (400fbc <prvNotifyQueueSetContainer+0x80>)
  400f9e:	4798      	blx	r3
  400fa0:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fa2:	bf18      	it	ne
  400fa4:	2501      	movne	r5, #1
  400fa6:	e004      	b.n	400fb2 <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400faa:	3301      	adds	r3, #1
  400fac:	64a3      	str	r3, [r4, #72]	; 0x48
  400fae:	e000      	b.n	400fb2 <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fb0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fb2:	4628      	mov	r0, r5
  400fb4:	b003      	add	sp, #12
  400fb6:	bd30      	pop	{r4, r5, pc}
  400fb8:	00400eb5 	.word	0x00400eb5
  400fbc:	00401ff9 	.word	0x00401ff9

00400fc0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400fc0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fc2:	b172      	cbz	r2, 400fe2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400fc4:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400fc6:	68c3      	ldr	r3, [r0, #12]
  400fc8:	4413      	add	r3, r2
  400fca:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400fcc:	6844      	ldr	r4, [r0, #4]
  400fce:	42a3      	cmp	r3, r4
  400fd0:	d301      	bcc.n	400fd6 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400fd2:	6803      	ldr	r3, [r0, #0]
  400fd4:	60c3      	str	r3, [r0, #12]
  400fd6:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400fd8:	4608      	mov	r0, r1
  400fda:	68d9      	ldr	r1, [r3, #12]
  400fdc:	4b01      	ldr	r3, [pc, #4]	; (400fe4 <prvCopyDataFromQueue+0x24>)
  400fde:	4798      	blx	r3
  400fe0:	bd10      	pop	{r4, pc}
  400fe2:	4770      	bx	lr
  400fe4:	0040b7e9 	.word	0x0040b7e9

00400fe8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400fea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400fec:	4b20      	ldr	r3, [pc, #128]	; (401070 <prvUnlockQueue+0x88>)
  400fee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	dd18      	ble.n	401028 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ff6:	4d1f      	ldr	r5, [pc, #124]	; (401074 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ff8:	4f1f      	ldr	r7, [pc, #124]	; (401078 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ffa:	4e20      	ldr	r6, [pc, #128]	; (40107c <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ffe:	b133      	cbz	r3, 40100e <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401000:	4620      	mov	r0, r4
  401002:	2100      	movs	r1, #0
  401004:	47a8      	blx	r5
  401006:	2801      	cmp	r0, #1
  401008:	d108      	bne.n	40101c <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  40100a:	47b8      	blx	r7
  40100c:	e006      	b.n	40101c <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40100e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401010:	b153      	cbz	r3, 401028 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401012:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401016:	47b0      	blx	r6
  401018:	b100      	cbz	r0, 40101c <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  40101a:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  40101c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40101e:	3b01      	subs	r3, #1
  401020:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401022:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401024:	2b00      	cmp	r3, #0
  401026:	dce9      	bgt.n	400ffc <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401028:	f04f 33ff 	mov.w	r3, #4294967295
  40102c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40102e:	4b14      	ldr	r3, [pc, #80]	; (401080 <prvUnlockQueue+0x98>)
  401030:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401032:	4b0f      	ldr	r3, [pc, #60]	; (401070 <prvUnlockQueue+0x88>)
  401034:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401036:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401038:	2b00      	cmp	r3, #0
  40103a:	dd13      	ble.n	401064 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40103c:	6923      	ldr	r3, [r4, #16]
  40103e:	b91b      	cbnz	r3, 401048 <prvUnlockQueue+0x60>
  401040:	e010      	b.n	401064 <prvUnlockQueue+0x7c>
  401042:	6923      	ldr	r3, [r4, #16]
  401044:	b923      	cbnz	r3, 401050 <prvUnlockQueue+0x68>
  401046:	e00d      	b.n	401064 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401048:	f104 0610 	add.w	r6, r4, #16
  40104c:	4d0b      	ldr	r5, [pc, #44]	; (40107c <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40104e:	4f0a      	ldr	r7, [pc, #40]	; (401078 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401050:	4630      	mov	r0, r6
  401052:	47a8      	blx	r5
  401054:	b100      	cbz	r0, 401058 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401056:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401058:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40105a:	3b01      	subs	r3, #1
  40105c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40105e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401060:	2b00      	cmp	r3, #0
  401062:	dcee      	bgt.n	401042 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401064:	f04f 33ff 	mov.w	r3, #4294967295
  401068:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40106a:	4b05      	ldr	r3, [pc, #20]	; (401080 <prvUnlockQueue+0x98>)
  40106c:	4798      	blx	r3
  40106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401070:	00400b51 	.word	0x00400b51
  401074:	00400f3d 	.word	0x00400f3d
  401078:	00402155 	.word	0x00402155
  40107c:	00401ff9 	.word	0x00401ff9
  401080:	00400b9d 	.word	0x00400b9d

00401084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  401084:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401086:	b950      	cbnz	r0, 40109e <xQueueGenericReset+0x1a>
  401088:	f04f 0380 	mov.w	r3, #128	; 0x80
  40108c:	b672      	cpsid	i
  40108e:	f383 8811 	msr	BASEPRI, r3
  401092:	f3bf 8f6f 	isb	sy
  401096:	f3bf 8f4f 	dsb	sy
  40109a:	b662      	cpsie	i
  40109c:	e7fe      	b.n	40109c <xQueueGenericReset+0x18>
  40109e:	4604      	mov	r4, r0
  4010a0:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010a2:	4b18      	ldr	r3, [pc, #96]	; (401104 <xQueueGenericReset+0x80>)
  4010a4:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010a6:	6822      	ldr	r2, [r4, #0]
  4010a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010ac:	fb03 f301 	mul.w	r3, r3, r1
  4010b0:	18d0      	adds	r0, r2, r3
  4010b2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010b4:	2000      	movs	r0, #0
  4010b6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010b8:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010ba:	1a5b      	subs	r3, r3, r1
  4010bc:	4413      	add	r3, r2
  4010be:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010c0:	f04f 33ff 	mov.w	r3, #4294967295
  4010c4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010c6:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4010c8:	b985      	cbnz	r5, 4010ec <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010ca:	6923      	ldr	r3, [r4, #16]
  4010cc:	b1ab      	cbz	r3, 4010fa <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010ce:	f104 0010 	add.w	r0, r4, #16
  4010d2:	4b0d      	ldr	r3, [pc, #52]	; (401108 <xQueueGenericReset+0x84>)
  4010d4:	4798      	blx	r3
  4010d6:	2801      	cmp	r0, #1
  4010d8:	d10f      	bne.n	4010fa <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010de:	4b0b      	ldr	r3, [pc, #44]	; (40110c <xQueueGenericReset+0x88>)
  4010e0:	601a      	str	r2, [r3, #0]
  4010e2:	f3bf 8f4f 	dsb	sy
  4010e6:	f3bf 8f6f 	isb	sy
  4010ea:	e006      	b.n	4010fa <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4010ec:	f104 0010 	add.w	r0, r4, #16
  4010f0:	4d07      	ldr	r5, [pc, #28]	; (401110 <xQueueGenericReset+0x8c>)
  4010f2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4010f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010f8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4010fa:	4b06      	ldr	r3, [pc, #24]	; (401114 <xQueueGenericReset+0x90>)
  4010fc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4010fe:	2001      	movs	r0, #1
  401100:	bd38      	pop	{r3, r4, r5, pc}
  401102:	bf00      	nop
  401104:	00400b51 	.word	0x00400b51
  401108:	00401ff9 	.word	0x00401ff9
  40110c:	e000ed04 	.word	0xe000ed04
  401110:	00400e25 	.word	0x00400e25
  401114:	00400b9d 	.word	0x00400b9d

00401118 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40111a:	b950      	cbnz	r0, 401132 <xQueueGenericCreate+0x1a>
  40111c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401120:	b672      	cpsid	i
  401122:	f383 8811 	msr	BASEPRI, r3
  401126:	f3bf 8f6f 	isb	sy
  40112a:	f3bf 8f4f 	dsb	sy
  40112e:	b662      	cpsie	i
  401130:	e7fe      	b.n	401130 <xQueueGenericCreate+0x18>
  401132:	460d      	mov	r5, r1
  401134:	4617      	mov	r7, r2
  401136:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401138:	b1c1      	cbz	r1, 40116c <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40113a:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40113e:	3059      	adds	r0, #89	; 0x59
  401140:	4b14      	ldr	r3, [pc, #80]	; (401194 <xQueueGenericCreate+0x7c>)
  401142:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401144:	4604      	mov	r4, r0
  401146:	b910      	cbnz	r0, 40114e <xQueueGenericCreate+0x36>
  401148:	e005      	b.n	401156 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40114a:	6024      	str	r4, [r4, #0]
  40114c:	e015      	b.n	40117a <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40114e:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401152:	6003      	str	r3, [r0, #0]
  401154:	e011      	b.n	40117a <xQueueGenericCreate+0x62>
  401156:	f04f 0380 	mov.w	r3, #128	; 0x80
  40115a:	b672      	cpsid	i
  40115c:	f383 8811 	msr	BASEPRI, r3
  401160:	f3bf 8f6f 	isb	sy
  401164:	f3bf 8f4f 	dsb	sy
  401168:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  40116a:	e7fe      	b.n	40116a <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40116c:	2058      	movs	r0, #88	; 0x58
  40116e:	4b09      	ldr	r3, [pc, #36]	; (401194 <xQueueGenericCreate+0x7c>)
  401170:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401172:	4604      	mov	r4, r0
  401174:	2800      	cmp	r0, #0
  401176:	d1e8      	bne.n	40114a <xQueueGenericCreate+0x32>
  401178:	e7ed      	b.n	401156 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  40117a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40117c:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40117e:	4620      	mov	r0, r4
  401180:	2101      	movs	r1, #1
  401182:	4b05      	ldr	r3, [pc, #20]	; (401198 <xQueueGenericCreate+0x80>)
  401184:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  401186:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  40118a:	2300      	movs	r3, #0
  40118c:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  40118e:	4620      	mov	r0, r4
  401190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401192:	bf00      	nop
  401194:	00400da9 	.word	0x00400da9
  401198:	00401085 	.word	0x00401085

0040119c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  40119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011a0:	b085      	sub	sp, #20
  4011a2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011a4:	b950      	cbnz	r0, 4011bc <xQueueGenericSend+0x20>
  4011a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011aa:	b672      	cpsid	i
  4011ac:	f383 8811 	msr	BASEPRI, r3
  4011b0:	f3bf 8f6f 	isb	sy
  4011b4:	f3bf 8f4f 	dsb	sy
  4011b8:	b662      	cpsie	i
  4011ba:	e7fe      	b.n	4011ba <xQueueGenericSend+0x1e>
  4011bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011be:	b961      	cbnz	r1, 4011da <xQueueGenericSend+0x3e>
  4011c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011c2:	b152      	cbz	r2, 4011da <xQueueGenericSend+0x3e>
  4011c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011c8:	b672      	cpsid	i
  4011ca:	f383 8811 	msr	BASEPRI, r3
  4011ce:	f3bf 8f6f 	isb	sy
  4011d2:	f3bf 8f4f 	dsb	sy
  4011d6:	b662      	cpsie	i
  4011d8:	e7fe      	b.n	4011d8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011da:	2b02      	cmp	r3, #2
  4011dc:	d10d      	bne.n	4011fa <xQueueGenericSend+0x5e>
  4011de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4011e0:	2a01      	cmp	r2, #1
  4011e2:	d00a      	beq.n	4011fa <xQueueGenericSend+0x5e>
  4011e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011e8:	b672      	cpsid	i
  4011ea:	f383 8811 	msr	BASEPRI, r3
  4011ee:	f3bf 8f6f 	isb	sy
  4011f2:	f3bf 8f4f 	dsb	sy
  4011f6:	b662      	cpsie	i
  4011f8:	e7fe      	b.n	4011f8 <xQueueGenericSend+0x5c>
  4011fa:	461d      	mov	r5, r3
  4011fc:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4011fe:	4b51      	ldr	r3, [pc, #324]	; (401344 <xQueueGenericSend+0x1a8>)
  401200:	4798      	blx	r3
  401202:	b960      	cbnz	r0, 40121e <xQueueGenericSend+0x82>
  401204:	9b01      	ldr	r3, [sp, #4]
  401206:	b163      	cbz	r3, 401222 <xQueueGenericSend+0x86>
  401208:	f04f 0380 	mov.w	r3, #128	; 0x80
  40120c:	b672      	cpsid	i
  40120e:	f383 8811 	msr	BASEPRI, r3
  401212:	f3bf 8f6f 	isb	sy
  401216:	f3bf 8f4f 	dsb	sy
  40121a:	b662      	cpsie	i
  40121c:	e7fe      	b.n	40121c <xQueueGenericSend+0x80>
  40121e:	2700      	movs	r7, #0
  401220:	e000      	b.n	401224 <xQueueGenericSend+0x88>
  401222:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401224:	4e48      	ldr	r6, [pc, #288]	; (401348 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401226:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401374 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40122a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401354 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40122e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401230:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401232:	2d02      	cmp	r5, #2
  401234:	d002      	beq.n	40123c <xQueueGenericSend+0xa0>
  401236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401238:	429a      	cmp	r2, r3
  40123a:	d233      	bcs.n	4012a4 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40123c:	4620      	mov	r0, r4
  40123e:	9900      	ldr	r1, [sp, #0]
  401240:	462a      	mov	r2, r5
  401242:	4b42      	ldr	r3, [pc, #264]	; (40134c <xQueueGenericSend+0x1b0>)
  401244:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401246:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401248:	b173      	cbz	r3, 401268 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40124a:	4620      	mov	r0, r4
  40124c:	4629      	mov	r1, r5
  40124e:	4b40      	ldr	r3, [pc, #256]	; (401350 <xQueueGenericSend+0x1b4>)
  401250:	4798      	blx	r3
  401252:	2801      	cmp	r0, #1
  401254:	d122      	bne.n	40129c <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40125a:	4b3e      	ldr	r3, [pc, #248]	; (401354 <xQueueGenericSend+0x1b8>)
  40125c:	601a      	str	r2, [r3, #0]
  40125e:	f3bf 8f4f 	dsb	sy
  401262:	f3bf 8f6f 	isb	sy
  401266:	e019      	b.n	40129c <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401268:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40126a:	b173      	cbz	r3, 40128a <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40126c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401270:	4b39      	ldr	r3, [pc, #228]	; (401358 <xQueueGenericSend+0x1bc>)
  401272:	4798      	blx	r3
  401274:	2801      	cmp	r0, #1
  401276:	d111      	bne.n	40129c <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40127c:	4b35      	ldr	r3, [pc, #212]	; (401354 <xQueueGenericSend+0x1b8>)
  40127e:	601a      	str	r2, [r3, #0]
  401280:	f3bf 8f4f 	dsb	sy
  401284:	f3bf 8f6f 	isb	sy
  401288:	e008      	b.n	40129c <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  40128a:	b138      	cbz	r0, 40129c <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  40128c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401290:	4b30      	ldr	r3, [pc, #192]	; (401354 <xQueueGenericSend+0x1b8>)
  401292:	601a      	str	r2, [r3, #0]
  401294:	f3bf 8f4f 	dsb	sy
  401298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  40129c:	4b2f      	ldr	r3, [pc, #188]	; (40135c <xQueueGenericSend+0x1c0>)
  40129e:	4798      	blx	r3
				return pdPASS;
  4012a0:	2001      	movs	r0, #1
  4012a2:	e04b      	b.n	40133c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012a4:	9b01      	ldr	r3, [sp, #4]
  4012a6:	b91b      	cbnz	r3, 4012b0 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012a8:	4b2c      	ldr	r3, [pc, #176]	; (40135c <xQueueGenericSend+0x1c0>)
  4012aa:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012ac:	2000      	movs	r0, #0
  4012ae:	e045      	b.n	40133c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012b0:	b917      	cbnz	r7, 4012b8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012b2:	a802      	add	r0, sp, #8
  4012b4:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012b6:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012b8:	4b28      	ldr	r3, [pc, #160]	; (40135c <xQueueGenericSend+0x1c0>)
  4012ba:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012bc:	4b28      	ldr	r3, [pc, #160]	; (401360 <xQueueGenericSend+0x1c4>)
  4012be:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012c0:	47b0      	blx	r6
  4012c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012c8:	d101      	bne.n	4012ce <xQueueGenericSend+0x132>
  4012ca:	2300      	movs	r3, #0
  4012cc:	6463      	str	r3, [r4, #68]	; 0x44
  4012ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012d4:	d101      	bne.n	4012da <xQueueGenericSend+0x13e>
  4012d6:	2300      	movs	r3, #0
  4012d8:	64a3      	str	r3, [r4, #72]	; 0x48
  4012da:	4b20      	ldr	r3, [pc, #128]	; (40135c <xQueueGenericSend+0x1c0>)
  4012dc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4012de:	a802      	add	r0, sp, #8
  4012e0:	a901      	add	r1, sp, #4
  4012e2:	4b20      	ldr	r3, [pc, #128]	; (401364 <xQueueGenericSend+0x1c8>)
  4012e4:	4798      	blx	r3
  4012e6:	bb18      	cbnz	r0, 401330 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4012e8:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4012ea:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4012ee:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4012f2:	4b1a      	ldr	r3, [pc, #104]	; (40135c <xQueueGenericSend+0x1c0>)
  4012f4:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4012f6:	45d3      	cmp	fp, sl
  4012f8:	d114      	bne.n	401324 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4012fa:	f104 0010 	add.w	r0, r4, #16
  4012fe:	9901      	ldr	r1, [sp, #4]
  401300:	4b19      	ldr	r3, [pc, #100]	; (401368 <xQueueGenericSend+0x1cc>)
  401302:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401304:	4620      	mov	r0, r4
  401306:	4b19      	ldr	r3, [pc, #100]	; (40136c <xQueueGenericSend+0x1d0>)
  401308:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  40130a:	4b19      	ldr	r3, [pc, #100]	; (401370 <xQueueGenericSend+0x1d4>)
  40130c:	4798      	blx	r3
  40130e:	2800      	cmp	r0, #0
  401310:	d18d      	bne.n	40122e <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  401312:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401316:	f8c8 3000 	str.w	r3, [r8]
  40131a:	f3bf 8f4f 	dsb	sy
  40131e:	f3bf 8f6f 	isb	sy
  401322:	e784      	b.n	40122e <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401324:	4620      	mov	r0, r4
  401326:	4b11      	ldr	r3, [pc, #68]	; (40136c <xQueueGenericSend+0x1d0>)
  401328:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40132a:	4b11      	ldr	r3, [pc, #68]	; (401370 <xQueueGenericSend+0x1d4>)
  40132c:	4798      	blx	r3
  40132e:	e77e      	b.n	40122e <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  401330:	4620      	mov	r0, r4
  401332:	4b0e      	ldr	r3, [pc, #56]	; (40136c <xQueueGenericSend+0x1d0>)
  401334:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401336:	4b0e      	ldr	r3, [pc, #56]	; (401370 <xQueueGenericSend+0x1d4>)
  401338:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  40133a:	2000      	movs	r0, #0
		}
	}
}
  40133c:	b005      	add	sp, #20
  40133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401342:	bf00      	nop
  401344:	00402161 	.word	0x00402161
  401348:	00400b51 	.word	0x00400b51
  40134c:	00400eb5 	.word	0x00400eb5
  401350:	00400f3d 	.word	0x00400f3d
  401354:	e000ed04 	.word	0xe000ed04
  401358:	00401ff9 	.word	0x00401ff9
  40135c:	00400b9d 	.word	0x00400b9d
  401360:	00401ad5 	.word	0x00401ad5
  401364:	004020c1 	.word	0x004020c1
  401368:	00401ef5 	.word	0x00401ef5
  40136c:	00400fe9 	.word	0x00400fe9
  401370:	00401c25 	.word	0x00401c25
  401374:	00402091 	.word	0x00402091

00401378 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401378:	b950      	cbnz	r0, 401390 <xQueueGenericSendFromISR+0x18>
  40137a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40137e:	b672      	cpsid	i
  401380:	f383 8811 	msr	BASEPRI, r3
  401384:	f3bf 8f6f 	isb	sy
  401388:	f3bf 8f4f 	dsb	sy
  40138c:	b662      	cpsie	i
  40138e:	e7fe      	b.n	40138e <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  401390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401394:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401396:	b961      	cbnz	r1, 4013b2 <xQueueGenericSendFromISR+0x3a>
  401398:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40139a:	b150      	cbz	r0, 4013b2 <xQueueGenericSendFromISR+0x3a>
  40139c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013a0:	b672      	cpsid	i
  4013a2:	f383 8811 	msr	BASEPRI, r3
  4013a6:	f3bf 8f6f 	isb	sy
  4013aa:	f3bf 8f4f 	dsb	sy
  4013ae:	b662      	cpsie	i
  4013b0:	e7fe      	b.n	4013b0 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013b2:	2b02      	cmp	r3, #2
  4013b4:	d10d      	bne.n	4013d2 <xQueueGenericSendFromISR+0x5a>
  4013b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4013b8:	2801      	cmp	r0, #1
  4013ba:	d00a      	beq.n	4013d2 <xQueueGenericSendFromISR+0x5a>
  4013bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013c0:	b672      	cpsid	i
  4013c2:	f383 8811 	msr	BASEPRI, r3
  4013c6:	f3bf 8f6f 	isb	sy
  4013ca:	f3bf 8f4f 	dsb	sy
  4013ce:	b662      	cpsie	i
  4013d0:	e7fe      	b.n	4013d0 <xQueueGenericSendFromISR+0x58>
  4013d2:	461e      	mov	r6, r3
  4013d4:	4615      	mov	r5, r2
  4013d6:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013d8:	4b21      	ldr	r3, [pc, #132]	; (401460 <xQueueGenericSendFromISR+0xe8>)
  4013da:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4013dc:	f3ef 8711 	mrs	r7, BASEPRI
  4013e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013e4:	b672      	cpsid	i
  4013e6:	f383 8811 	msr	BASEPRI, r3
  4013ea:	f3bf 8f6f 	isb	sy
  4013ee:	f3bf 8f4f 	dsb	sy
  4013f2:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4013f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4013f6:	2e02      	cmp	r6, #2
  4013f8:	d002      	beq.n	401400 <xQueueGenericSendFromISR+0x88>
  4013fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4013fc:	429a      	cmp	r2, r3
  4013fe:	d223      	bcs.n	401448 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401400:	4620      	mov	r0, r4
  401402:	4641      	mov	r1, r8
  401404:	4632      	mov	r2, r6
  401406:	4b17      	ldr	r3, [pc, #92]	; (401464 <xQueueGenericSendFromISR+0xec>)
  401408:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  40140a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40140c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401410:	d115      	bne.n	40143e <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401412:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401414:	b143      	cbz	r3, 401428 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401416:	4620      	mov	r0, r4
  401418:	4631      	mov	r1, r6
  40141a:	4b13      	ldr	r3, [pc, #76]	; (401468 <xQueueGenericSendFromISR+0xf0>)
  40141c:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40141e:	2801      	cmp	r0, #1
  401420:	d114      	bne.n	40144c <xQueueGenericSendFromISR+0xd4>
  401422:	b19d      	cbz	r5, 40144c <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401424:	6028      	str	r0, [r5, #0]
  401426:	e016      	b.n	401456 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401428:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40142a:	b18b      	cbz	r3, 401450 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40142c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401430:	4b0e      	ldr	r3, [pc, #56]	; (40146c <xQueueGenericSendFromISR+0xf4>)
  401432:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401434:	b170      	cbz	r0, 401454 <xQueueGenericSendFromISR+0xdc>
  401436:	b16d      	cbz	r5, 401454 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401438:	2001      	movs	r0, #1
  40143a:	6028      	str	r0, [r5, #0]
  40143c:	e00b      	b.n	401456 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40143e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401440:	3301      	adds	r3, #1
  401442:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401444:	2001      	movs	r0, #1
  401446:	e006      	b.n	401456 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401448:	2000      	movs	r0, #0
  40144a:	e004      	b.n	401456 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  40144c:	2001      	movs	r0, #1
  40144e:	e002      	b.n	401456 <xQueueGenericSendFromISR+0xde>
  401450:	2001      	movs	r0, #1
  401452:	e000      	b.n	401456 <xQueueGenericSendFromISR+0xde>
  401454:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401456:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  40145a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40145e:	bf00      	nop
  401460:	00400d45 	.word	0x00400d45
  401464:	00400eb5 	.word	0x00400eb5
  401468:	00400f3d 	.word	0x00400f3d
  40146c:	00401ff9 	.word	0x00401ff9

00401470 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  401470:	b950      	cbnz	r0, 401488 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401472:	f04f 0380 	mov.w	r3, #128	; 0x80
  401476:	b672      	cpsid	i
  401478:	f383 8811 	msr	BASEPRI, r3
  40147c:	f3bf 8f6f 	isb	sy
  401480:	f3bf 8f4f 	dsb	sy
  401484:	b662      	cpsie	i
  401486:	e7fe      	b.n	401486 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  401488:	b570      	push	{r4, r5, r6, lr}
  40148a:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  40148c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40148e:	b153      	cbz	r3, 4014a6 <xQueueGiveFromISR+0x36>
  401490:	f04f 0380 	mov.w	r3, #128	; 0x80
  401494:	b672      	cpsid	i
  401496:	f383 8811 	msr	BASEPRI, r3
  40149a:	f3bf 8f6f 	isb	sy
  40149e:	f3bf 8f4f 	dsb	sy
  4014a2:	b662      	cpsie	i
  4014a4:	e7fe      	b.n	4014a4 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4014a6:	6803      	ldr	r3, [r0, #0]
  4014a8:	b963      	cbnz	r3, 4014c4 <xQueueGiveFromISR+0x54>
  4014aa:	6843      	ldr	r3, [r0, #4]
  4014ac:	b153      	cbz	r3, 4014c4 <xQueueGiveFromISR+0x54>
  4014ae:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014b2:	b672      	cpsid	i
  4014b4:	f383 8811 	msr	BASEPRI, r3
  4014b8:	f3bf 8f6f 	isb	sy
  4014bc:	f3bf 8f4f 	dsb	sy
  4014c0:	b662      	cpsie	i
  4014c2:	e7fe      	b.n	4014c2 <xQueueGiveFromISR+0x52>
  4014c4:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4014c6:	4b1f      	ldr	r3, [pc, #124]	; (401544 <xQueueGiveFromISR+0xd4>)
  4014c8:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4014ca:	f3ef 8611 	mrs	r6, BASEPRI
  4014ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d2:	b672      	cpsid	i
  4014d4:	f383 8811 	msr	BASEPRI, r3
  4014d8:	f3bf 8f6f 	isb	sy
  4014dc:	f3bf 8f4f 	dsb	sy
  4014e0:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4014e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014e6:	429a      	cmp	r2, r3
  4014e8:	d221      	bcs.n	40152e <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  4014ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014ec:	3301      	adds	r3, #1
  4014ee:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014f6:	d115      	bne.n	401524 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  4014f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4014fa:	b143      	cbz	r3, 40150e <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4014fc:	4620      	mov	r0, r4
  4014fe:	2100      	movs	r1, #0
  401500:	4b11      	ldr	r3, [pc, #68]	; (401548 <xQueueGiveFromISR+0xd8>)
  401502:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401504:	2801      	cmp	r0, #1
  401506:	d114      	bne.n	401532 <xQueueGiveFromISR+0xc2>
  401508:	b19d      	cbz	r5, 401532 <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  40150a:	6028      	str	r0, [r5, #0]
  40150c:	e016      	b.n	40153c <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40150e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401510:	b18b      	cbz	r3, 401536 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401512:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401516:	4b0d      	ldr	r3, [pc, #52]	; (40154c <xQueueGiveFromISR+0xdc>)
  401518:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  40151a:	b170      	cbz	r0, 40153a <xQueueGiveFromISR+0xca>
  40151c:	b16d      	cbz	r5, 40153a <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  40151e:	2001      	movs	r0, #1
  401520:	6028      	str	r0, [r5, #0]
  401522:	e00b      	b.n	40153c <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401524:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401526:	3301      	adds	r3, #1
  401528:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  40152a:	2001      	movs	r0, #1
  40152c:	e006      	b.n	40153c <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40152e:	2000      	movs	r0, #0
  401530:	e004      	b.n	40153c <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401532:	2001      	movs	r0, #1
  401534:	e002      	b.n	40153c <xQueueGiveFromISR+0xcc>
  401536:	2001      	movs	r0, #1
  401538:	e000      	b.n	40153c <xQueueGiveFromISR+0xcc>
  40153a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40153c:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401540:	bd70      	pop	{r4, r5, r6, pc}
  401542:	bf00      	nop
  401544:	00400d45 	.word	0x00400d45
  401548:	00400f3d 	.word	0x00400f3d
  40154c:	00401ff9 	.word	0x00401ff9

00401550 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401554:	b085      	sub	sp, #20
  401556:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401558:	b950      	cbnz	r0, 401570 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40155a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40155e:	b672      	cpsid	i
  401560:	f383 8811 	msr	BASEPRI, r3
  401564:	f3bf 8f6f 	isb	sy
  401568:	f3bf 8f4f 	dsb	sy
  40156c:	b662      	cpsie	i
  40156e:	e7fe      	b.n	40156e <xQueueGenericReceive+0x1e>
  401570:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401572:	b961      	cbnz	r1, 40158e <xQueueGenericReceive+0x3e>
  401574:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401576:	b152      	cbz	r2, 40158e <xQueueGenericReceive+0x3e>
  401578:	f04f 0380 	mov.w	r3, #128	; 0x80
  40157c:	b672      	cpsid	i
  40157e:	f383 8811 	msr	BASEPRI, r3
  401582:	f3bf 8f6f 	isb	sy
  401586:	f3bf 8f4f 	dsb	sy
  40158a:	b662      	cpsie	i
  40158c:	e7fe      	b.n	40158c <xQueueGenericReceive+0x3c>
  40158e:	4698      	mov	r8, r3
  401590:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401592:	4b52      	ldr	r3, [pc, #328]	; (4016dc <xQueueGenericReceive+0x18c>)
  401594:	4798      	blx	r3
  401596:	b960      	cbnz	r0, 4015b2 <xQueueGenericReceive+0x62>
  401598:	9b01      	ldr	r3, [sp, #4]
  40159a:	b163      	cbz	r3, 4015b6 <xQueueGenericReceive+0x66>
  40159c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015a0:	b672      	cpsid	i
  4015a2:	f383 8811 	msr	BASEPRI, r3
  4015a6:	f3bf 8f6f 	isb	sy
  4015aa:	f3bf 8f4f 	dsb	sy
  4015ae:	b662      	cpsie	i
  4015b0:	e7fe      	b.n	4015b0 <xQueueGenericReceive+0x60>
  4015b2:	2600      	movs	r6, #0
  4015b4:	e000      	b.n	4015b8 <xQueueGenericReceive+0x68>
  4015b6:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015b8:	4d49      	ldr	r5, [pc, #292]	; (4016e0 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015ba:	f8df a154 	ldr.w	sl, [pc, #340]	; 401710 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4015be:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4016f0 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015c2:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	d034      	beq.n	401634 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4015ca:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4015cc:	4620      	mov	r0, r4
  4015ce:	4659      	mov	r1, fp
  4015d0:	4b44      	ldr	r3, [pc, #272]	; (4016e4 <xQueueGenericReceive+0x194>)
  4015d2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4015d4:	f1b8 0f00 	cmp.w	r8, #0
  4015d8:	d118      	bne.n	40160c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4015da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015dc:	3b01      	subs	r3, #1
  4015de:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015e0:	6823      	ldr	r3, [r4, #0]
  4015e2:	b913      	cbnz	r3, 4015ea <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4015e4:	4b40      	ldr	r3, [pc, #256]	; (4016e8 <xQueueGenericReceive+0x198>)
  4015e6:	4798      	blx	r3
  4015e8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015ea:	6923      	ldr	r3, [r4, #16]
  4015ec:	b1f3      	cbz	r3, 40162c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015ee:	f104 0010 	add.w	r0, r4, #16
  4015f2:	4b3e      	ldr	r3, [pc, #248]	; (4016ec <xQueueGenericReceive+0x19c>)
  4015f4:	4798      	blx	r3
  4015f6:	2801      	cmp	r0, #1
  4015f8:	d118      	bne.n	40162c <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4015fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015fe:	4b3c      	ldr	r3, [pc, #240]	; (4016f0 <xQueueGenericReceive+0x1a0>)
  401600:	601a      	str	r2, [r3, #0]
  401602:	f3bf 8f4f 	dsb	sy
  401606:	f3bf 8f6f 	isb	sy
  40160a:	e00f      	b.n	40162c <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40160c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40160e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401610:	b163      	cbz	r3, 40162c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401612:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401616:	4b35      	ldr	r3, [pc, #212]	; (4016ec <xQueueGenericReceive+0x19c>)
  401618:	4798      	blx	r3
  40161a:	b138      	cbz	r0, 40162c <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  40161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401620:	4b33      	ldr	r3, [pc, #204]	; (4016f0 <xQueueGenericReceive+0x1a0>)
  401622:	601a      	str	r2, [r3, #0]
  401624:	f3bf 8f4f 	dsb	sy
  401628:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  40162c:	4b31      	ldr	r3, [pc, #196]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40162e:	4798      	blx	r3
				return pdPASS;
  401630:	2001      	movs	r0, #1
  401632:	e04f      	b.n	4016d4 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401634:	9b01      	ldr	r3, [sp, #4]
  401636:	b91b      	cbnz	r3, 401640 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401638:	4b2e      	ldr	r3, [pc, #184]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40163a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40163c:	2000      	movs	r0, #0
  40163e:	e049      	b.n	4016d4 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  401640:	b916      	cbnz	r6, 401648 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401642:	a802      	add	r0, sp, #8
  401644:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401646:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401648:	4b2a      	ldr	r3, [pc, #168]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40164a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40164c:	4b2a      	ldr	r3, [pc, #168]	; (4016f8 <xQueueGenericReceive+0x1a8>)
  40164e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401650:	47a8      	blx	r5
  401652:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401654:	f1b3 3fff 	cmp.w	r3, #4294967295
  401658:	d101      	bne.n	40165e <xQueueGenericReceive+0x10e>
  40165a:	2300      	movs	r3, #0
  40165c:	6463      	str	r3, [r4, #68]	; 0x44
  40165e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401660:	f1b3 3fff 	cmp.w	r3, #4294967295
  401664:	d101      	bne.n	40166a <xQueueGenericReceive+0x11a>
  401666:	2300      	movs	r3, #0
  401668:	64a3      	str	r3, [r4, #72]	; 0x48
  40166a:	4b22      	ldr	r3, [pc, #136]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40166c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40166e:	a802      	add	r0, sp, #8
  401670:	a901      	add	r1, sp, #4
  401672:	4b22      	ldr	r3, [pc, #136]	; (4016fc <xQueueGenericReceive+0x1ac>)
  401674:	4798      	blx	r3
  401676:	bb38      	cbnz	r0, 4016c8 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401678:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40167a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40167c:	4b1d      	ldr	r3, [pc, #116]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  40167e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401680:	b9e7      	cbnz	r7, 4016bc <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401682:	6823      	ldr	r3, [r4, #0]
  401684:	b92b      	cbnz	r3, 401692 <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401686:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401688:	6860      	ldr	r0, [r4, #4]
  40168a:	4b1d      	ldr	r3, [pc, #116]	; (401700 <xQueueGenericReceive+0x1b0>)
  40168c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40168e:	4b19      	ldr	r3, [pc, #100]	; (4016f4 <xQueueGenericReceive+0x1a4>)
  401690:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401692:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401696:	9901      	ldr	r1, [sp, #4]
  401698:	4b1a      	ldr	r3, [pc, #104]	; (401704 <xQueueGenericReceive+0x1b4>)
  40169a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40169c:	4620      	mov	r0, r4
  40169e:	4b1a      	ldr	r3, [pc, #104]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016a0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016a2:	4b1a      	ldr	r3, [pc, #104]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016a4:	4798      	blx	r3
  4016a6:	2800      	cmp	r0, #0
  4016a8:	d18b      	bne.n	4015c2 <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  4016aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016ae:	f8c9 3000 	str.w	r3, [r9]
  4016b2:	f3bf 8f4f 	dsb	sy
  4016b6:	f3bf 8f6f 	isb	sy
  4016ba:	e782      	b.n	4015c2 <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4016bc:	4620      	mov	r0, r4
  4016be:	4b12      	ldr	r3, [pc, #72]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016c2:	4b12      	ldr	r3, [pc, #72]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016c4:	4798      	blx	r3
  4016c6:	e77c      	b.n	4015c2 <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4016c8:	4620      	mov	r0, r4
  4016ca:	4b0f      	ldr	r3, [pc, #60]	; (401708 <xQueueGenericReceive+0x1b8>)
  4016cc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016ce:	4b0f      	ldr	r3, [pc, #60]	; (40170c <xQueueGenericReceive+0x1bc>)
  4016d0:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4016d2:	2000      	movs	r0, #0
		}
	}
}
  4016d4:	b005      	add	sp, #20
  4016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016da:	bf00      	nop
  4016dc:	00402161 	.word	0x00402161
  4016e0:	00400b51 	.word	0x00400b51
  4016e4:	00400fc1 	.word	0x00400fc1
  4016e8:	004022e9 	.word	0x004022e9
  4016ec:	00401ff9 	.word	0x00401ff9
  4016f0:	e000ed04 	.word	0xe000ed04
  4016f4:	00400b9d 	.word	0x00400b9d
  4016f8:	00401ad5 	.word	0x00401ad5
  4016fc:	004020c1 	.word	0x004020c1
  401700:	00402181 	.word	0x00402181
  401704:	00401ef5 	.word	0x00401ef5
  401708:	00400fe9 	.word	0x00400fe9
  40170c:	00401c25 	.word	0x00401c25
  401710:	00402091 	.word	0x00402091

00401714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401714:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <vQueueAddToRegistry+0x30>)
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	b12b      	cbz	r3, 401728 <vQueueAddToRegistry+0x14>
  40171c:	2301      	movs	r3, #1
  40171e:	4c09      	ldr	r4, [pc, #36]	; (401744 <vQueueAddToRegistry+0x30>)
  401720:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401724:	b942      	cbnz	r2, 401738 <vQueueAddToRegistry+0x24>
  401726:	e000      	b.n	40172a <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401728:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40172a:	4a06      	ldr	r2, [pc, #24]	; (401744 <vQueueAddToRegistry+0x30>)
  40172c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401734:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401736:	e002      	b.n	40173e <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401738:	3301      	adds	r3, #1
  40173a:	2b08      	cmp	r3, #8
  40173c:	d1f0      	bne.n	401720 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40173e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401742:	4770      	bx	lr
  401744:	2040c5a0 	.word	0x2040c5a0

00401748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401748:	b570      	push	{r4, r5, r6, lr}
  40174a:	4604      	mov	r4, r0
  40174c:	460e      	mov	r6, r1
  40174e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401750:	4b0d      	ldr	r3, [pc, #52]	; (401788 <vQueueWaitForMessageRestricted+0x40>)
  401752:	4798      	blx	r3
  401754:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401756:	f1b3 3fff 	cmp.w	r3, #4294967295
  40175a:	d101      	bne.n	401760 <vQueueWaitForMessageRestricted+0x18>
  40175c:	2300      	movs	r3, #0
  40175e:	6463      	str	r3, [r4, #68]	; 0x44
  401760:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401762:	f1b3 3fff 	cmp.w	r3, #4294967295
  401766:	d101      	bne.n	40176c <vQueueWaitForMessageRestricted+0x24>
  401768:	2300      	movs	r3, #0
  40176a:	64a3      	str	r3, [r4, #72]	; 0x48
  40176c:	4b07      	ldr	r3, [pc, #28]	; (40178c <vQueueWaitForMessageRestricted+0x44>)
  40176e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401772:	b92b      	cbnz	r3, 401780 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401774:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401778:	4631      	mov	r1, r6
  40177a:	462a      	mov	r2, r5
  40177c:	4b04      	ldr	r3, [pc, #16]	; (401790 <vQueueWaitForMessageRestricted+0x48>)
  40177e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401780:	4620      	mov	r0, r4
  401782:	4b04      	ldr	r3, [pc, #16]	; (401794 <vQueueWaitForMessageRestricted+0x4c>)
  401784:	4798      	blx	r3
  401786:	bd70      	pop	{r4, r5, r6, pc}
  401788:	00400b51 	.word	0x00400b51
  40178c:	00400b9d 	.word	0x00400b9d
  401790:	00401f79 	.word	0x00401f79
  401794:	00400fe9 	.word	0x00400fe9

00401798 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <prvResetNextTaskUnblockTime+0x24>)
  40179a:	681b      	ldr	r3, [r3, #0]
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	b923      	cbnz	r3, 4017aa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4017a0:	f04f 32ff 	mov.w	r2, #4294967295
  4017a4:	4b06      	ldr	r3, [pc, #24]	; (4017c0 <prvResetNextTaskUnblockTime+0x28>)
  4017a6:	601a      	str	r2, [r3, #0]
  4017a8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017aa:	4b04      	ldr	r3, [pc, #16]	; (4017bc <prvResetNextTaskUnblockTime+0x24>)
  4017ac:	681b      	ldr	r3, [r3, #0]
  4017ae:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017b0:	68db      	ldr	r3, [r3, #12]
  4017b2:	685a      	ldr	r2, [r3, #4]
  4017b4:	4b02      	ldr	r3, [pc, #8]	; (4017c0 <prvResetNextTaskUnblockTime+0x28>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	4770      	bx	lr
  4017ba:	bf00      	nop
  4017bc:	2040c1f0 	.word	0x2040c1f0
  4017c0:	2040c440 	.word	0x2040c440

004017c4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4017c4:	b510      	push	{r4, lr}
  4017c6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017c8:	4b0e      	ldr	r3, [pc, #56]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4017ce:	4b0e      	ldr	r3, [pc, #56]	; (401808 <prvAddCurrentTaskToDelayedList+0x44>)
  4017d0:	681b      	ldr	r3, [r3, #0]
  4017d2:	4298      	cmp	r0, r3
  4017d4:	d207      	bcs.n	4017e6 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017d6:	4b0d      	ldr	r3, [pc, #52]	; (40180c <prvAddCurrentTaskToDelayedList+0x48>)
  4017d8:	6818      	ldr	r0, [r3, #0]
  4017da:	4b0a      	ldr	r3, [pc, #40]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017dc:	6819      	ldr	r1, [r3, #0]
  4017de:	3104      	adds	r1, #4
  4017e0:	4b0b      	ldr	r3, [pc, #44]	; (401810 <prvAddCurrentTaskToDelayedList+0x4c>)
  4017e2:	4798      	blx	r3
  4017e4:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017e6:	4b0b      	ldr	r3, [pc, #44]	; (401814 <prvAddCurrentTaskToDelayedList+0x50>)
  4017e8:	6818      	ldr	r0, [r3, #0]
  4017ea:	4b06      	ldr	r3, [pc, #24]	; (401804 <prvAddCurrentTaskToDelayedList+0x40>)
  4017ec:	6819      	ldr	r1, [r3, #0]
  4017ee:	3104      	adds	r1, #4
  4017f0:	4b07      	ldr	r3, [pc, #28]	; (401810 <prvAddCurrentTaskToDelayedList+0x4c>)
  4017f2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4017f4:	4b08      	ldr	r3, [pc, #32]	; (401818 <prvAddCurrentTaskToDelayedList+0x54>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	429c      	cmp	r4, r3
  4017fa:	d201      	bcs.n	401800 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4017fc:	4b06      	ldr	r3, [pc, #24]	; (401818 <prvAddCurrentTaskToDelayedList+0x54>)
  4017fe:	601c      	str	r4, [r3, #0]
  401800:	bd10      	pop	{r4, pc}
  401802:	bf00      	nop
  401804:	2040c420 	.word	0x2040c420
  401808:	2040c43c 	.word	0x2040c43c
  40180c:	2040c210 	.word	0x2040c210
  401810:	00400e5d 	.word	0x00400e5d
  401814:	2040c1f0 	.word	0x2040c1f0
  401818:	2040c440 	.word	0x2040c440

0040181c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  40181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401820:	b083      	sub	sp, #12
  401822:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401824:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401828:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  40182a:	b950      	cbnz	r0, 401842 <xTaskGenericCreate+0x26>
  40182c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401830:	b672      	cpsid	i
  401832:	f383 8811 	msr	BASEPRI, r3
  401836:	f3bf 8f6f 	isb	sy
  40183a:	f3bf 8f4f 	dsb	sy
  40183e:	b662      	cpsie	i
  401840:	e7fe      	b.n	401840 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401842:	2f18      	cmp	r7, #24
  401844:	d90a      	bls.n	40185c <xTaskGenericCreate+0x40>
  401846:	f04f 0380 	mov.w	r3, #128	; 0x80
  40184a:	b672      	cpsid	i
  40184c:	f383 8811 	msr	BASEPRI, r3
  401850:	f3bf 8f6f 	isb	sy
  401854:	f3bf 8f4f 	dsb	sy
  401858:	b662      	cpsie	i
  40185a:	e7fe      	b.n	40185a <xTaskGenericCreate+0x3e>
  40185c:	9001      	str	r0, [sp, #4]
  40185e:	9300      	str	r3, [sp, #0]
  401860:	4690      	mov	r8, r2
  401862:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401864:	b935      	cbnz	r5, 401874 <xTaskGenericCreate+0x58>
  401866:	0090      	lsls	r0, r2, #2
  401868:	4b5f      	ldr	r3, [pc, #380]	; (4019e8 <xTaskGenericCreate+0x1cc>)
  40186a:	4798      	blx	r3

		if( pxStack != NULL )
  40186c:	4605      	mov	r5, r0
  40186e:	2800      	cmp	r0, #0
  401870:	f000 80b4 	beq.w	4019dc <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401874:	2058      	movs	r0, #88	; 0x58
  401876:	4b5c      	ldr	r3, [pc, #368]	; (4019e8 <xTaskGenericCreate+0x1cc>)
  401878:	4798      	blx	r3

			if( pxNewTCB != NULL )
  40187a:	4604      	mov	r4, r0
  40187c:	b1a0      	cbz	r0, 4018a8 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40187e:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401880:	4628      	mov	r0, r5
  401882:	21a5      	movs	r1, #165	; 0xa5
  401884:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401888:	4b58      	ldr	r3, [pc, #352]	; (4019ec <xTaskGenericCreate+0x1d0>)
  40188a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40188c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  401890:	4445      	add	r5, r8
  401892:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401894:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401898:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40189c:	7833      	ldrb	r3, [r6, #0]
  40189e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018a2:	7833      	ldrb	r3, [r6, #0]
  4018a4:	b923      	cbnz	r3, 4018b0 <xTaskGenericCreate+0x94>
  4018a6:	e00f      	b.n	4018c8 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4018a8:	4628      	mov	r0, r5
  4018aa:	4b51      	ldr	r3, [pc, #324]	; (4019f0 <xTaskGenericCreate+0x1d4>)
  4018ac:	4798      	blx	r3
  4018ae:	e095      	b.n	4019dc <xTaskGenericCreate+0x1c0>
  4018b0:	4633      	mov	r3, r6
  4018b2:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018b6:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4018bc:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018c0:	7819      	ldrb	r1, [r3, #0]
  4018c2:	b109      	cbz	r1, 4018c8 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4018c4:	42b3      	cmp	r3, r6
  4018c6:	d1f7      	bne.n	4018b8 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018c8:	f04f 0800 	mov.w	r8, #0
  4018cc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4018d0:	463e      	mov	r6, r7
  4018d2:	2f18      	cmp	r7, #24
  4018d4:	bf28      	it	cs
  4018d6:	2618      	movcs	r6, #24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4018d8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018da:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018dc:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018e0:	f104 0904 	add.w	r9, r4, #4
  4018e4:	4648      	mov	r0, r9
  4018e6:	f8df b154 	ldr.w	fp, [pc, #340]	; 401a3c <xTaskGenericCreate+0x220>
  4018ea:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018ec:	f104 0018 	add.w	r0, r4, #24
  4018f0:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018f2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018f4:	f1c6 0619 	rsb	r6, r6, #25
  4018f8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4018fa:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4018fc:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401900:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401904:	4628      	mov	r0, r5
  401906:	9901      	ldr	r1, [sp, #4]
  401908:	9a00      	ldr	r2, [sp, #0]
  40190a:	4b3a      	ldr	r3, [pc, #232]	; (4019f4 <xTaskGenericCreate+0x1d8>)
  40190c:	4798      	blx	r3
  40190e:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  401910:	f1ba 0f00 	cmp.w	sl, #0
  401914:	d001      	beq.n	40191a <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401916:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  40191a:	4b37      	ldr	r3, [pc, #220]	; (4019f8 <xTaskGenericCreate+0x1dc>)
  40191c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40191e:	4a37      	ldr	r2, [pc, #220]	; (4019fc <xTaskGenericCreate+0x1e0>)
  401920:	6813      	ldr	r3, [r2, #0]
  401922:	3301      	adds	r3, #1
  401924:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401926:	4b36      	ldr	r3, [pc, #216]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401928:	681b      	ldr	r3, [r3, #0]
  40192a:	bb0b      	cbnz	r3, 401970 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40192c:	4b34      	ldr	r3, [pc, #208]	; (401a00 <xTaskGenericCreate+0x1e4>)
  40192e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401930:	6813      	ldr	r3, [r2, #0]
  401932:	2b01      	cmp	r3, #1
  401934:	d126      	bne.n	401984 <xTaskGenericCreate+0x168>
  401936:	4d33      	ldr	r5, [pc, #204]	; (401a04 <xTaskGenericCreate+0x1e8>)
  401938:	f505 78fa 	add.w	r8, r5, #500	; 0x1f4
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40193c:	4e32      	ldr	r6, [pc, #200]	; (401a08 <xTaskGenericCreate+0x1ec>)
  40193e:	4628      	mov	r0, r5
  401940:	47b0      	blx	r6
  401942:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401944:	4545      	cmp	r5, r8
  401946:	d1fa      	bne.n	40193e <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401948:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401a40 <xTaskGenericCreate+0x224>
  40194c:	4640      	mov	r0, r8
  40194e:	4d2e      	ldr	r5, [pc, #184]	; (401a08 <xTaskGenericCreate+0x1ec>)
  401950:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401952:	4e2e      	ldr	r6, [pc, #184]	; (401a0c <xTaskGenericCreate+0x1f0>)
  401954:	4630      	mov	r0, r6
  401956:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401958:	482d      	ldr	r0, [pc, #180]	; (401a10 <xTaskGenericCreate+0x1f4>)
  40195a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  40195c:	482d      	ldr	r0, [pc, #180]	; (401a14 <xTaskGenericCreate+0x1f8>)
  40195e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401960:	482d      	ldr	r0, [pc, #180]	; (401a18 <xTaskGenericCreate+0x1fc>)
  401962:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401964:	4b2d      	ldr	r3, [pc, #180]	; (401a1c <xTaskGenericCreate+0x200>)
  401966:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40196a:	4b2d      	ldr	r3, [pc, #180]	; (401a20 <xTaskGenericCreate+0x204>)
  40196c:	601e      	str	r6, [r3, #0]
  40196e:	e009      	b.n	401984 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401970:	4b2c      	ldr	r3, [pc, #176]	; (401a24 <xTaskGenericCreate+0x208>)
  401972:	681b      	ldr	r3, [r3, #0]
  401974:	b933      	cbnz	r3, 401984 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401976:	4b22      	ldr	r3, [pc, #136]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401978:	681b      	ldr	r3, [r3, #0]
  40197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40197c:	429f      	cmp	r7, r3
  40197e:	d301      	bcc.n	401984 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401980:	4b1f      	ldr	r3, [pc, #124]	; (401a00 <xTaskGenericCreate+0x1e4>)
  401982:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401984:	4a28      	ldr	r2, [pc, #160]	; (401a28 <xTaskGenericCreate+0x20c>)
  401986:	6813      	ldr	r3, [r2, #0]
  401988:	3301      	adds	r3, #1
  40198a:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40198c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40198e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401990:	4926      	ldr	r1, [pc, #152]	; (401a2c <xTaskGenericCreate+0x210>)
  401992:	680b      	ldr	r3, [r1, #0]
  401994:	2201      	movs	r2, #1
  401996:	4082      	lsls	r2, r0
  401998:	4313      	orrs	r3, r2
  40199a:	600b      	str	r3, [r1, #0]
  40199c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019a0:	4b18      	ldr	r3, [pc, #96]	; (401a04 <xTaskGenericCreate+0x1e8>)
  4019a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019a6:	4649      	mov	r1, r9
  4019a8:	4b21      	ldr	r3, [pc, #132]	; (401a30 <xTaskGenericCreate+0x214>)
  4019aa:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4019ac:	4b21      	ldr	r3, [pc, #132]	; (401a34 <xTaskGenericCreate+0x218>)
  4019ae:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4019b0:	4b1c      	ldr	r3, [pc, #112]	; (401a24 <xTaskGenericCreate+0x208>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	b173      	cbz	r3, 4019d4 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019b6:	4b12      	ldr	r3, [pc, #72]	; (401a00 <xTaskGenericCreate+0x1e4>)
  4019b8:	681b      	ldr	r3, [r3, #0]
  4019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019bc:	429f      	cmp	r7, r3
  4019be:	d90b      	bls.n	4019d8 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4019c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019c4:	4b1c      	ldr	r3, [pc, #112]	; (401a38 <xTaskGenericCreate+0x21c>)
  4019c6:	601a      	str	r2, [r3, #0]
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4019d0:	2001      	movs	r0, #1
  4019d2:	e005      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
  4019d4:	2001      	movs	r0, #1
  4019d6:	e003      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
  4019d8:	2001      	movs	r0, #1
  4019da:	e001      	b.n	4019e0 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019dc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4019e0:	b003      	add	sp, #12
  4019e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019e6:	bf00      	nop
  4019e8:	00400da9 	.word	0x00400da9
  4019ec:	0040b91d 	.word	0x0040b91d
  4019f0:	00400e09 	.word	0x00400e09
  4019f4:	00400b09 	.word	0x00400b09
  4019f8:	00400b51 	.word	0x00400b51
  4019fc:	2040c448 	.word	0x2040c448
  401a00:	2040c420 	.word	0x2040c420
  401a04:	2040c218 	.word	0x2040c218
  401a08:	00400e25 	.word	0x00400e25
  401a0c:	2040c44c 	.word	0x2040c44c
  401a10:	2040c424 	.word	0x2040c424
  401a14:	2040c40c 	.word	0x2040c40c
  401a18:	2040c460 	.word	0x2040c460
  401a1c:	2040c1f0 	.word	0x2040c1f0
  401a20:	2040c210 	.word	0x2040c210
  401a24:	2040c1f4 	.word	0x2040c1f4
  401a28:	2040c444 	.word	0x2040c444
  401a2c:	2040c474 	.word	0x2040c474
  401a30:	00400e45 	.word	0x00400e45
  401a34:	00400b9d 	.word	0x00400b9d
  401a38:	e000ed04 	.word	0xe000ed04
  401a3c:	00400e3d 	.word	0x00400e3d
  401a40:	2040c1fc 	.word	0x2040c1fc

00401a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401a44:	b510      	push	{r4, lr}
  401a46:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a48:	2300      	movs	r3, #0
  401a4a:	9300      	str	r3, [sp, #0]
  401a4c:	9301      	str	r3, [sp, #4]
  401a4e:	9302      	str	r3, [sp, #8]
  401a50:	9303      	str	r3, [sp, #12]
  401a52:	4818      	ldr	r0, [pc, #96]	; (401ab4 <vTaskStartScheduler+0x70>)
  401a54:	4918      	ldr	r1, [pc, #96]	; (401ab8 <vTaskStartScheduler+0x74>)
  401a56:	2282      	movs	r2, #130	; 0x82
  401a58:	4c18      	ldr	r4, [pc, #96]	; (401abc <vTaskStartScheduler+0x78>)
  401a5a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401a5c:	2801      	cmp	r0, #1
  401a5e:	d11a      	bne.n	401a96 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401a60:	4b17      	ldr	r3, [pc, #92]	; (401ac0 <vTaskStartScheduler+0x7c>)
  401a62:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a64:	2801      	cmp	r0, #1
  401a66:	d116      	bne.n	401a96 <vTaskStartScheduler+0x52>
  401a68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a6c:	b672      	cpsid	i
  401a6e:	f383 8811 	msr	BASEPRI, r3
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	f3bf 8f4f 	dsb	sy
  401a7a:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a7c:	f04f 32ff 	mov.w	r2, #4294967295
  401a80:	4b10      	ldr	r3, [pc, #64]	; (401ac4 <vTaskStartScheduler+0x80>)
  401a82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a84:	2201      	movs	r2, #1
  401a86:	4b10      	ldr	r3, [pc, #64]	; (401ac8 <vTaskStartScheduler+0x84>)
  401a88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a8a:	2200      	movs	r2, #0
  401a8c:	4b0f      	ldr	r3, [pc, #60]	; (401acc <vTaskStartScheduler+0x88>)
  401a8e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a90:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <vTaskStartScheduler+0x8c>)
  401a92:	4798      	blx	r3
  401a94:	e00b      	b.n	401aae <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401a96:	b950      	cbnz	r0, 401aae <vTaskStartScheduler+0x6a>
  401a98:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9c:	b672      	cpsid	i
  401a9e:	f383 8811 	msr	BASEPRI, r3
  401aa2:	f3bf 8f6f 	isb	sy
  401aa6:	f3bf 8f4f 	dsb	sy
  401aaa:	b662      	cpsie	i
  401aac:	e7fe      	b.n	401aac <vTaskStartScheduler+0x68>
	}
}
  401aae:	b004      	add	sp, #16
  401ab0:	bd10      	pop	{r4, pc}
  401ab2:	bf00      	nop
  401ab4:	00401dcd 	.word	0x00401dcd
  401ab8:	00412e38 	.word	0x00412e38
  401abc:	0040181d 	.word	0x0040181d
  401ac0:	004023d1 	.word	0x004023d1
  401ac4:	2040c440 	.word	0x2040c440
  401ac8:	2040c1f4 	.word	0x2040c1f4
  401acc:	2040c43c 	.word	0x2040c43c
  401ad0:	00400c81 	.word	0x00400c81

00401ad4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ad4:	4a02      	ldr	r2, [pc, #8]	; (401ae0 <vTaskSuspendAll+0xc>)
  401ad6:	6813      	ldr	r3, [r2, #0]
  401ad8:	3301      	adds	r3, #1
  401ada:	6013      	str	r3, [r2, #0]
  401adc:	4770      	bx	lr
  401ade:	bf00      	nop
  401ae0:	2040c438 	.word	0x2040c438

00401ae4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401ae4:	4b01      	ldr	r3, [pc, #4]	; (401aec <xTaskGetTickCount+0x8>)
  401ae6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401ae8:	4770      	bx	lr
  401aea:	bf00      	nop
  401aec:	2040c43c 	.word	0x2040c43c

00401af0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401af4:	4b3d      	ldr	r3, [pc, #244]	; (401bec <xTaskIncrementTick+0xfc>)
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	2b00      	cmp	r3, #0
  401afa:	d16a      	bne.n	401bd2 <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401afc:	4b3c      	ldr	r3, [pc, #240]	; (401bf0 <xTaskIncrementTick+0x100>)
  401afe:	681a      	ldr	r2, [r3, #0]
  401b00:	3201      	adds	r2, #1
  401b02:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b04:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401b06:	b9d6      	cbnz	r6, 401b3e <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401b08:	4b3a      	ldr	r3, [pc, #232]	; (401bf4 <xTaskIncrementTick+0x104>)
  401b0a:	681b      	ldr	r3, [r3, #0]
  401b0c:	681b      	ldr	r3, [r3, #0]
  401b0e:	b153      	cbz	r3, 401b26 <xTaskIncrementTick+0x36>
  401b10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b14:	b672      	cpsid	i
  401b16:	f383 8811 	msr	BASEPRI, r3
  401b1a:	f3bf 8f6f 	isb	sy
  401b1e:	f3bf 8f4f 	dsb	sy
  401b22:	b662      	cpsie	i
  401b24:	e7fe      	b.n	401b24 <xTaskIncrementTick+0x34>
  401b26:	4a33      	ldr	r2, [pc, #204]	; (401bf4 <xTaskIncrementTick+0x104>)
  401b28:	6811      	ldr	r1, [r2, #0]
  401b2a:	4b33      	ldr	r3, [pc, #204]	; (401bf8 <xTaskIncrementTick+0x108>)
  401b2c:	6818      	ldr	r0, [r3, #0]
  401b2e:	6010      	str	r0, [r2, #0]
  401b30:	6019      	str	r1, [r3, #0]
  401b32:	4a32      	ldr	r2, [pc, #200]	; (401bfc <xTaskIncrementTick+0x10c>)
  401b34:	6813      	ldr	r3, [r2, #0]
  401b36:	3301      	adds	r3, #1
  401b38:	6013      	str	r3, [r2, #0]
  401b3a:	4b31      	ldr	r3, [pc, #196]	; (401c00 <xTaskIncrementTick+0x110>)
  401b3c:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b3e:	4b31      	ldr	r3, [pc, #196]	; (401c04 <xTaskIncrementTick+0x114>)
  401b40:	681b      	ldr	r3, [r3, #0]
  401b42:	429e      	cmp	r6, r3
  401b44:	d201      	bcs.n	401b4a <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b46:	2400      	movs	r4, #0
  401b48:	e037      	b.n	401bba <xTaskIncrementTick+0xca>
  401b4a:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b4c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401bf4 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b50:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401c20 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b54:	4f2c      	ldr	r7, [pc, #176]	; (401c08 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b56:	f8d9 3000 	ldr.w	r3, [r9]
  401b5a:	681b      	ldr	r3, [r3, #0]
  401b5c:	b923      	cbnz	r3, 401b68 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401b5e:	f04f 32ff 	mov.w	r2, #4294967295
  401b62:	4b28      	ldr	r3, [pc, #160]	; (401c04 <xTaskIncrementTick+0x114>)
  401b64:	601a      	str	r2, [r3, #0]
						break;
  401b66:	e028      	b.n	401bba <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b68:	f8d9 3000 	ldr.w	r3, [r9]
  401b6c:	68db      	ldr	r3, [r3, #12]
  401b6e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b70:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b72:	429e      	cmp	r6, r3
  401b74:	d202      	bcs.n	401b7c <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b76:	4a23      	ldr	r2, [pc, #140]	; (401c04 <xTaskIncrementTick+0x114>)
  401b78:	6013      	str	r3, [r2, #0]
							break;
  401b7a:	e01e      	b.n	401bba <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b7c:	f105 0a04 	add.w	sl, r5, #4
  401b80:	4650      	mov	r0, sl
  401b82:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b84:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b86:	b113      	cbz	r3, 401b8e <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b88:	f105 0018 	add.w	r0, r5, #24
  401b8c:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b90:	683b      	ldr	r3, [r7, #0]
  401b92:	2201      	movs	r2, #1
  401b94:	4082      	lsls	r2, r0
  401b96:	4313      	orrs	r3, r2
  401b98:	603b      	str	r3, [r7, #0]
  401b9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b9e:	4b1b      	ldr	r3, [pc, #108]	; (401c0c <xTaskIncrementTick+0x11c>)
  401ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ba4:	4651      	mov	r1, sl
  401ba6:	4b1a      	ldr	r3, [pc, #104]	; (401c10 <xTaskIncrementTick+0x120>)
  401ba8:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401baa:	4b1a      	ldr	r3, [pc, #104]	; (401c14 <xTaskIncrementTick+0x124>)
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401bb2:	429a      	cmp	r2, r3
  401bb4:	bf28      	it	cs
  401bb6:	2401      	movcs	r4, #1
  401bb8:	e7cd      	b.n	401b56 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401bba:	4b16      	ldr	r3, [pc, #88]	; (401c14 <xTaskIncrementTick+0x124>)
  401bbc:	681b      	ldr	r3, [r3, #0]
  401bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bc4:	4a11      	ldr	r2, [pc, #68]	; (401c0c <xTaskIncrementTick+0x11c>)
  401bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401bca:	2b02      	cmp	r3, #2
  401bcc:	bf28      	it	cs
  401bce:	2401      	movcs	r4, #1
  401bd0:	e004      	b.n	401bdc <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401bd2:	4a11      	ldr	r2, [pc, #68]	; (401c18 <xTaskIncrementTick+0x128>)
  401bd4:	6813      	ldr	r3, [r2, #0]
  401bd6:	3301      	adds	r3, #1
  401bd8:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401bda:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401bdc:	4b0f      	ldr	r3, [pc, #60]	; (401c1c <xTaskIncrementTick+0x12c>)
  401bde:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401be0:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401be2:	bf0c      	ite	eq
  401be4:	4620      	moveq	r0, r4
  401be6:	2001      	movne	r0, #1
  401be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bec:	2040c438 	.word	0x2040c438
  401bf0:	2040c43c 	.word	0x2040c43c
  401bf4:	2040c1f0 	.word	0x2040c1f0
  401bf8:	2040c210 	.word	0x2040c210
  401bfc:	2040c1ec 	.word	0x2040c1ec
  401c00:	00401799 	.word	0x00401799
  401c04:	2040c440 	.word	0x2040c440
  401c08:	2040c474 	.word	0x2040c474
  401c0c:	2040c218 	.word	0x2040c218
  401c10:	00400e45 	.word	0x00400e45
  401c14:	2040c420 	.word	0x2040c420
  401c18:	2040c214 	.word	0x2040c214
  401c1c:	2040c478 	.word	0x2040c478
  401c20:	00400e91 	.word	0x00400e91

00401c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401c28:	4b36      	ldr	r3, [pc, #216]	; (401d04 <xTaskResumeAll+0xe0>)
  401c2a:	681b      	ldr	r3, [r3, #0]
  401c2c:	b953      	cbnz	r3, 401c44 <xTaskResumeAll+0x20>
  401c2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c32:	b672      	cpsid	i
  401c34:	f383 8811 	msr	BASEPRI, r3
  401c38:	f3bf 8f6f 	isb	sy
  401c3c:	f3bf 8f4f 	dsb	sy
  401c40:	b662      	cpsie	i
  401c42:	e7fe      	b.n	401c42 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401c44:	4b30      	ldr	r3, [pc, #192]	; (401d08 <xTaskResumeAll+0xe4>)
  401c46:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401c48:	4b2e      	ldr	r3, [pc, #184]	; (401d04 <xTaskResumeAll+0xe0>)
  401c4a:	681a      	ldr	r2, [r3, #0]
  401c4c:	3a01      	subs	r2, #1
  401c4e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c50:	681b      	ldr	r3, [r3, #0]
  401c52:	2b00      	cmp	r3, #0
  401c54:	d14d      	bne.n	401cf2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c56:	4b2d      	ldr	r3, [pc, #180]	; (401d0c <xTaskResumeAll+0xe8>)
  401c58:	681b      	ldr	r3, [r3, #0]
  401c5a:	bb0b      	cbnz	r3, 401ca0 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c5c:	2400      	movs	r4, #0
  401c5e:	e04b      	b.n	401cf8 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c60:	68fb      	ldr	r3, [r7, #12]
  401c62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c64:	f104 0018 	add.w	r0, r4, #24
  401c68:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c6a:	f104 0804 	add.w	r8, r4, #4
  401c6e:	4640      	mov	r0, r8
  401c70:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c74:	682b      	ldr	r3, [r5, #0]
  401c76:	2201      	movs	r2, #1
  401c78:	4082      	lsls	r2, r0
  401c7a:	4313      	orrs	r3, r2
  401c7c:	602b      	str	r3, [r5, #0]
  401c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c82:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c86:	4641      	mov	r1, r8
  401c88:	4b21      	ldr	r3, [pc, #132]	; (401d10 <xTaskResumeAll+0xec>)
  401c8a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c8c:	4b21      	ldr	r3, [pc, #132]	; (401d14 <xTaskResumeAll+0xf0>)
  401c8e:	681b      	ldr	r3, [r3, #0]
  401c90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c94:	429a      	cmp	r2, r3
  401c96:	d308      	bcc.n	401caa <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401c98:	2201      	movs	r2, #1
  401c9a:	4b1f      	ldr	r3, [pc, #124]	; (401d18 <xTaskResumeAll+0xf4>)
  401c9c:	601a      	str	r2, [r3, #0]
  401c9e:	e004      	b.n	401caa <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401ca0:	4f1e      	ldr	r7, [pc, #120]	; (401d1c <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ca2:	4e1f      	ldr	r6, [pc, #124]	; (401d20 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401ca4:	4d1f      	ldr	r5, [pc, #124]	; (401d24 <xTaskResumeAll+0x100>)
  401ca6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401d38 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401caa:	683b      	ldr	r3, [r7, #0]
  401cac:	2b00      	cmp	r3, #0
  401cae:	d1d7      	bne.n	401c60 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401cb0:	4b1d      	ldr	r3, [pc, #116]	; (401d28 <xTaskResumeAll+0x104>)
  401cb2:	681b      	ldr	r3, [r3, #0]
  401cb4:	b17b      	cbz	r3, 401cd6 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cb6:	4b1c      	ldr	r3, [pc, #112]	; (401d28 <xTaskResumeAll+0x104>)
  401cb8:	681b      	ldr	r3, [r3, #0]
  401cba:	b163      	cbz	r3, 401cd6 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cbc:	4e1b      	ldr	r6, [pc, #108]	; (401d2c <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401cbe:	4d16      	ldr	r5, [pc, #88]	; (401d18 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cc0:	4c19      	ldr	r4, [pc, #100]	; (401d28 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cc2:	47b0      	blx	r6
  401cc4:	b108      	cbz	r0, 401cca <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401cc6:	2301      	movs	r3, #1
  401cc8:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cca:	6823      	ldr	r3, [r4, #0]
  401ccc:	3b01      	subs	r3, #1
  401cce:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cd0:	6823      	ldr	r3, [r4, #0]
  401cd2:	2b00      	cmp	r3, #0
  401cd4:	d1f5      	bne.n	401cc2 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401cd6:	4b10      	ldr	r3, [pc, #64]	; (401d18 <xTaskResumeAll+0xf4>)
  401cd8:	681b      	ldr	r3, [r3, #0]
  401cda:	2b01      	cmp	r3, #1
  401cdc:	d10b      	bne.n	401cf6 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ce2:	4b13      	ldr	r3, [pc, #76]	; (401d30 <xTaskResumeAll+0x10c>)
  401ce4:	601a      	str	r2, [r3, #0]
  401ce6:	f3bf 8f4f 	dsb	sy
  401cea:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401cee:	2401      	movs	r4, #1
  401cf0:	e002      	b.n	401cf8 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401cf2:	2400      	movs	r4, #0
  401cf4:	e000      	b.n	401cf8 <xTaskResumeAll+0xd4>
  401cf6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401cf8:	4b0e      	ldr	r3, [pc, #56]	; (401d34 <xTaskResumeAll+0x110>)
  401cfa:	4798      	blx	r3

	return xAlreadyYielded;
}
  401cfc:	4620      	mov	r0, r4
  401cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d02:	bf00      	nop
  401d04:	2040c438 	.word	0x2040c438
  401d08:	00400b51 	.word	0x00400b51
  401d0c:	2040c448 	.word	0x2040c448
  401d10:	00400e45 	.word	0x00400e45
  401d14:	2040c420 	.word	0x2040c420
  401d18:	2040c478 	.word	0x2040c478
  401d1c:	2040c424 	.word	0x2040c424
  401d20:	00400e91 	.word	0x00400e91
  401d24:	2040c474 	.word	0x2040c474
  401d28:	2040c214 	.word	0x2040c214
  401d2c:	00401af1 	.word	0x00401af1
  401d30:	e000ed04 	.word	0xe000ed04
  401d34:	00400b9d 	.word	0x00400b9d
  401d38:	2040c218 	.word	0x2040c218

00401d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401d3c:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d3e:	2800      	cmp	r0, #0
  401d40:	d029      	beq.n	401d96 <vTaskDelay+0x5a>
  401d42:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401d44:	4b18      	ldr	r3, [pc, #96]	; (401da8 <vTaskDelay+0x6c>)
  401d46:	681b      	ldr	r3, [r3, #0]
  401d48:	b153      	cbz	r3, 401d60 <vTaskDelay+0x24>
  401d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d4e:	b672      	cpsid	i
  401d50:	f383 8811 	msr	BASEPRI, r3
  401d54:	f3bf 8f6f 	isb	sy
  401d58:	f3bf 8f4f 	dsb	sy
  401d5c:	b662      	cpsie	i
  401d5e:	e7fe      	b.n	401d5e <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d60:	4b12      	ldr	r3, [pc, #72]	; (401dac <vTaskDelay+0x70>)
  401d62:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d64:	4b12      	ldr	r3, [pc, #72]	; (401db0 <vTaskDelay+0x74>)
  401d66:	681b      	ldr	r3, [r3, #0]
  401d68:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d6a:	4b12      	ldr	r3, [pc, #72]	; (401db4 <vTaskDelay+0x78>)
  401d6c:	6818      	ldr	r0, [r3, #0]
  401d6e:	3004      	adds	r0, #4
  401d70:	4b11      	ldr	r3, [pc, #68]	; (401db8 <vTaskDelay+0x7c>)
  401d72:	4798      	blx	r3
  401d74:	b948      	cbnz	r0, 401d8a <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d76:	4b0f      	ldr	r3, [pc, #60]	; (401db4 <vTaskDelay+0x78>)
  401d78:	681a      	ldr	r2, [r3, #0]
  401d7a:	4910      	ldr	r1, [pc, #64]	; (401dbc <vTaskDelay+0x80>)
  401d7c:	680b      	ldr	r3, [r1, #0]
  401d7e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d80:	2201      	movs	r2, #1
  401d82:	4082      	lsls	r2, r0
  401d84:	ea23 0302 	bic.w	r3, r3, r2
  401d88:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d8a:	4620      	mov	r0, r4
  401d8c:	4b0c      	ldr	r3, [pc, #48]	; (401dc0 <vTaskDelay+0x84>)
  401d8e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d90:	4b0c      	ldr	r3, [pc, #48]	; (401dc4 <vTaskDelay+0x88>)
  401d92:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401d94:	b938      	cbnz	r0, 401da6 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d9a:	4b0b      	ldr	r3, [pc, #44]	; (401dc8 <vTaskDelay+0x8c>)
  401d9c:	601a      	str	r2, [r3, #0]
  401d9e:	f3bf 8f4f 	dsb	sy
  401da2:	f3bf 8f6f 	isb	sy
  401da6:	bd10      	pop	{r4, pc}
  401da8:	2040c438 	.word	0x2040c438
  401dac:	00401ad5 	.word	0x00401ad5
  401db0:	2040c43c 	.word	0x2040c43c
  401db4:	2040c420 	.word	0x2040c420
  401db8:	00400e91 	.word	0x00400e91
  401dbc:	2040c474 	.word	0x2040c474
  401dc0:	004017c5 	.word	0x004017c5
  401dc4:	00401c25 	.word	0x00401c25
  401dc8:	e000ed04 	.word	0xe000ed04

00401dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401dcc:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dce:	4d18      	ldr	r5, [pc, #96]	; (401e30 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401dd0:	4e18      	ldr	r6, [pc, #96]	; (401e34 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dd2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e54 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401dd6:	4f18      	ldr	r7, [pc, #96]	; (401e38 <prvIdleTask+0x6c>)
  401dd8:	e019      	b.n	401e0e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dda:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ddc:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401dde:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401de0:	b1ac      	cbz	r4, 401e0e <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401de2:	4b16      	ldr	r3, [pc, #88]	; (401e3c <prvIdleTask+0x70>)
  401de4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401de6:	68f3      	ldr	r3, [r6, #12]
  401de8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401dea:	1d20      	adds	r0, r4, #4
  401dec:	4b14      	ldr	r3, [pc, #80]	; (401e40 <prvIdleTask+0x74>)
  401dee:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401df0:	4a14      	ldr	r2, [pc, #80]	; (401e44 <prvIdleTask+0x78>)
  401df2:	6813      	ldr	r3, [r2, #0]
  401df4:	3b01      	subs	r3, #1
  401df6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401df8:	682b      	ldr	r3, [r5, #0]
  401dfa:	3b01      	subs	r3, #1
  401dfc:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401dfe:	4b12      	ldr	r3, [pc, #72]	; (401e48 <prvIdleTask+0x7c>)
  401e00:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401e02:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e04:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e58 <prvIdleTask+0x8c>
  401e08:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401e0a:	4620      	mov	r0, r4
  401e0c:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e0e:	682b      	ldr	r3, [r5, #0]
  401e10:	2b00      	cmp	r3, #0
  401e12:	d1e2      	bne.n	401dda <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e14:	4b0d      	ldr	r3, [pc, #52]	; (401e4c <prvIdleTask+0x80>)
  401e16:	681b      	ldr	r3, [r3, #0]
  401e18:	2b01      	cmp	r3, #1
  401e1a:	d9f8      	bls.n	401e0e <prvIdleTask+0x42>
			{
				taskYIELD();
  401e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e20:	4b0b      	ldr	r3, [pc, #44]	; (401e50 <prvIdleTask+0x84>)
  401e22:	601a      	str	r2, [r3, #0]
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	f3bf 8f6f 	isb	sy
  401e2c:	e7d1      	b.n	401dd2 <prvIdleTask+0x6>
  401e2e:	bf00      	nop
  401e30:	2040c1f8 	.word	0x2040c1f8
  401e34:	2040c40c 	.word	0x2040c40c
  401e38:	00401c25 	.word	0x00401c25
  401e3c:	00400b51 	.word	0x00400b51
  401e40:	00400e91 	.word	0x00400e91
  401e44:	2040c448 	.word	0x2040c448
  401e48:	00400b9d 	.word	0x00400b9d
  401e4c:	2040c218 	.word	0x2040c218
  401e50:	e000ed04 	.word	0xe000ed04
  401e54:	00401ad5 	.word	0x00401ad5
  401e58:	00400e09 	.word	0x00400e09

00401e5c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401e5c:	4b20      	ldr	r3, [pc, #128]	; (401ee0 <vTaskSwitchContext+0x84>)
  401e5e:	681b      	ldr	r3, [r3, #0]
  401e60:	b11b      	cbz	r3, 401e6a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401e62:	2201      	movs	r2, #1
  401e64:	4b1f      	ldr	r3, [pc, #124]	; (401ee4 <vTaskSwitchContext+0x88>)
  401e66:	601a      	str	r2, [r3, #0]
  401e68:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401e6a:	2200      	movs	r2, #0
  401e6c:	4b1d      	ldr	r3, [pc, #116]	; (401ee4 <vTaskSwitchContext+0x88>)
  401e6e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e70:	4b1d      	ldr	r3, [pc, #116]	; (401ee8 <vTaskSwitchContext+0x8c>)
  401e72:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401e74:	fab3 f383 	clz	r3, r3
  401e78:	b2db      	uxtb	r3, r3
  401e7a:	f1c3 031f 	rsb	r3, r3, #31
  401e7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e82:	4a1a      	ldr	r2, [pc, #104]	; (401eec <vTaskSwitchContext+0x90>)
  401e84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e88:	b952      	cbnz	r2, 401ea0 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e8e:	b672      	cpsid	i
  401e90:	f383 8811 	msr	BASEPRI, r3
  401e94:	f3bf 8f6f 	isb	sy
  401e98:	f3bf 8f4f 	dsb	sy
  401e9c:	b662      	cpsie	i
  401e9e:	e7fe      	b.n	401e9e <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401ea0:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401ea2:	4a12      	ldr	r2, [pc, #72]	; (401eec <vTaskSwitchContext+0x90>)
  401ea4:	0099      	lsls	r1, r3, #2
  401ea6:	18c8      	adds	r0, r1, r3
  401ea8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401eac:	6844      	ldr	r4, [r0, #4]
  401eae:	6864      	ldr	r4, [r4, #4]
  401eb0:	6044      	str	r4, [r0, #4]
  401eb2:	4602      	mov	r2, r0
  401eb4:	3208      	adds	r2, #8
  401eb6:	4294      	cmp	r4, r2
  401eb8:	d106      	bne.n	401ec8 <vTaskSwitchContext+0x6c>
  401eba:	6860      	ldr	r0, [r4, #4]
  401ebc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ec0:	4a0a      	ldr	r2, [pc, #40]	; (401eec <vTaskSwitchContext+0x90>)
  401ec2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401ec6:	6050      	str	r0, [r2, #4]
  401ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ecc:	4a07      	ldr	r2, [pc, #28]	; (401eec <vTaskSwitchContext+0x90>)
  401ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ed2:	685b      	ldr	r3, [r3, #4]
  401ed4:	68da      	ldr	r2, [r3, #12]
  401ed6:	4b06      	ldr	r3, [pc, #24]	; (401ef0 <vTaskSwitchContext+0x94>)
  401ed8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401eda:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ede:	4770      	bx	lr
  401ee0:	2040c438 	.word	0x2040c438
  401ee4:	2040c478 	.word	0x2040c478
  401ee8:	2040c474 	.word	0x2040c474
  401eec:	2040c218 	.word	0x2040c218
  401ef0:	2040c420 	.word	0x2040c420

00401ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401ef4:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401ef6:	b950      	cbnz	r0, 401f0e <vTaskPlaceOnEventList+0x1a>
  401ef8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401efc:	b672      	cpsid	i
  401efe:	f383 8811 	msr	BASEPRI, r3
  401f02:	f3bf 8f6f 	isb	sy
  401f06:	f3bf 8f4f 	dsb	sy
  401f0a:	b662      	cpsie	i
  401f0c:	e7fe      	b.n	401f0c <vTaskPlaceOnEventList+0x18>
  401f0e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f10:	4d11      	ldr	r5, [pc, #68]	; (401f58 <vTaskPlaceOnEventList+0x64>)
  401f12:	6829      	ldr	r1, [r5, #0]
  401f14:	3118      	adds	r1, #24
  401f16:	4b11      	ldr	r3, [pc, #68]	; (401f5c <vTaskPlaceOnEventList+0x68>)
  401f18:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f1a:	6828      	ldr	r0, [r5, #0]
  401f1c:	3004      	adds	r0, #4
  401f1e:	4b10      	ldr	r3, [pc, #64]	; (401f60 <vTaskPlaceOnEventList+0x6c>)
  401f20:	4798      	blx	r3
  401f22:	b940      	cbnz	r0, 401f36 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f24:	682a      	ldr	r2, [r5, #0]
  401f26:	490f      	ldr	r1, [pc, #60]	; (401f64 <vTaskPlaceOnEventList+0x70>)
  401f28:	680b      	ldr	r3, [r1, #0]
  401f2a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f2c:	2201      	movs	r2, #1
  401f2e:	4082      	lsls	r2, r0
  401f30:	ea23 0302 	bic.w	r3, r3, r2
  401f34:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401f36:	f1b4 3fff 	cmp.w	r4, #4294967295
  401f3a:	d106      	bne.n	401f4a <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f3c:	4b06      	ldr	r3, [pc, #24]	; (401f58 <vTaskPlaceOnEventList+0x64>)
  401f3e:	6819      	ldr	r1, [r3, #0]
  401f40:	4809      	ldr	r0, [pc, #36]	; (401f68 <vTaskPlaceOnEventList+0x74>)
  401f42:	3104      	adds	r1, #4
  401f44:	4b09      	ldr	r3, [pc, #36]	; (401f6c <vTaskPlaceOnEventList+0x78>)
  401f46:	4798      	blx	r3
  401f48:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401f4a:	4b09      	ldr	r3, [pc, #36]	; (401f70 <vTaskPlaceOnEventList+0x7c>)
  401f4c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f4e:	4420      	add	r0, r4
  401f50:	4b08      	ldr	r3, [pc, #32]	; (401f74 <vTaskPlaceOnEventList+0x80>)
  401f52:	4798      	blx	r3
  401f54:	bd38      	pop	{r3, r4, r5, pc}
  401f56:	bf00      	nop
  401f58:	2040c420 	.word	0x2040c420
  401f5c:	00400e5d 	.word	0x00400e5d
  401f60:	00400e91 	.word	0x00400e91
  401f64:	2040c474 	.word	0x2040c474
  401f68:	2040c460 	.word	0x2040c460
  401f6c:	00400e45 	.word	0x00400e45
  401f70:	2040c43c 	.word	0x2040c43c
  401f74:	004017c5 	.word	0x004017c5

00401f78 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401f78:	b950      	cbnz	r0, 401f90 <vTaskPlaceOnEventListRestricted+0x18>
  401f7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f7e:	b672      	cpsid	i
  401f80:	f383 8811 	msr	BASEPRI, r3
  401f84:	f3bf 8f6f 	isb	sy
  401f88:	f3bf 8f4f 	dsb	sy
  401f8c:	b662      	cpsie	i
  401f8e:	e7fe      	b.n	401f8e <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401f90:	b570      	push	{r4, r5, r6, lr}
  401f92:	4615      	mov	r5, r2
  401f94:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f96:	4e11      	ldr	r6, [pc, #68]	; (401fdc <vTaskPlaceOnEventListRestricted+0x64>)
  401f98:	6831      	ldr	r1, [r6, #0]
  401f9a:	3118      	adds	r1, #24
  401f9c:	4b10      	ldr	r3, [pc, #64]	; (401fe0 <vTaskPlaceOnEventListRestricted+0x68>)
  401f9e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fa0:	6830      	ldr	r0, [r6, #0]
  401fa2:	3004      	adds	r0, #4
  401fa4:	4b0f      	ldr	r3, [pc, #60]	; (401fe4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401fa6:	4798      	blx	r3
  401fa8:	b940      	cbnz	r0, 401fbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401faa:	6832      	ldr	r2, [r6, #0]
  401fac:	490e      	ldr	r1, [pc, #56]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x70>)
  401fae:	680b      	ldr	r3, [r1, #0]
  401fb0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401fb2:	2201      	movs	r2, #1
  401fb4:	4082      	lsls	r2, r0
  401fb6:	ea23 0302 	bic.w	r3, r3, r2
  401fba:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401fbc:	2d01      	cmp	r5, #1
  401fbe:	d106      	bne.n	401fce <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fc0:	4b06      	ldr	r3, [pc, #24]	; (401fdc <vTaskPlaceOnEventListRestricted+0x64>)
  401fc2:	6819      	ldr	r1, [r3, #0]
  401fc4:	4809      	ldr	r0, [pc, #36]	; (401fec <vTaskPlaceOnEventListRestricted+0x74>)
  401fc6:	3104      	adds	r1, #4
  401fc8:	4b05      	ldr	r3, [pc, #20]	; (401fe0 <vTaskPlaceOnEventListRestricted+0x68>)
  401fca:	4798      	blx	r3
  401fcc:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401fce:	4b08      	ldr	r3, [pc, #32]	; (401ff0 <vTaskPlaceOnEventListRestricted+0x78>)
  401fd0:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fd2:	4420      	add	r0, r4
  401fd4:	4b07      	ldr	r3, [pc, #28]	; (401ff4 <vTaskPlaceOnEventListRestricted+0x7c>)
  401fd6:	4798      	blx	r3
  401fd8:	bd70      	pop	{r4, r5, r6, pc}
  401fda:	bf00      	nop
  401fdc:	2040c420 	.word	0x2040c420
  401fe0:	00400e45 	.word	0x00400e45
  401fe4:	00400e91 	.word	0x00400e91
  401fe8:	2040c474 	.word	0x2040c474
  401fec:	2040c460 	.word	0x2040c460
  401ff0:	2040c43c 	.word	0x2040c43c
  401ff4:	004017c5 	.word	0x004017c5

00401ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401ff8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ffa:	68c3      	ldr	r3, [r0, #12]
  401ffc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ffe:	b954      	cbnz	r4, 402016 <xTaskRemoveFromEventList+0x1e>
  402000:	f04f 0380 	mov.w	r3, #128	; 0x80
  402004:	b672      	cpsid	i
  402006:	f383 8811 	msr	BASEPRI, r3
  40200a:	f3bf 8f6f 	isb	sy
  40200e:	f3bf 8f4f 	dsb	sy
  402012:	b662      	cpsie	i
  402014:	e7fe      	b.n	402014 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402016:	f104 0518 	add.w	r5, r4, #24
  40201a:	4628      	mov	r0, r5
  40201c:	4b14      	ldr	r3, [pc, #80]	; (402070 <xTaskRemoveFromEventList+0x78>)
  40201e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402020:	4b14      	ldr	r3, [pc, #80]	; (402074 <xTaskRemoveFromEventList+0x7c>)
  402022:	681b      	ldr	r3, [r3, #0]
  402024:	b99b      	cbnz	r3, 40204e <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402026:	1d25      	adds	r5, r4, #4
  402028:	4628      	mov	r0, r5
  40202a:	4b11      	ldr	r3, [pc, #68]	; (402070 <xTaskRemoveFromEventList+0x78>)
  40202c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40202e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402030:	4911      	ldr	r1, [pc, #68]	; (402078 <xTaskRemoveFromEventList+0x80>)
  402032:	680b      	ldr	r3, [r1, #0]
  402034:	2201      	movs	r2, #1
  402036:	4082      	lsls	r2, r0
  402038:	4313      	orrs	r3, r2
  40203a:	600b      	str	r3, [r1, #0]
  40203c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402040:	4b0e      	ldr	r3, [pc, #56]	; (40207c <xTaskRemoveFromEventList+0x84>)
  402042:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402046:	4629      	mov	r1, r5
  402048:	4b0d      	ldr	r3, [pc, #52]	; (402080 <xTaskRemoveFromEventList+0x88>)
  40204a:	4798      	blx	r3
  40204c:	e003      	b.n	402056 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40204e:	480d      	ldr	r0, [pc, #52]	; (402084 <xTaskRemoveFromEventList+0x8c>)
  402050:	4629      	mov	r1, r5
  402052:	4b0b      	ldr	r3, [pc, #44]	; (402080 <xTaskRemoveFromEventList+0x88>)
  402054:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402056:	4b0c      	ldr	r3, [pc, #48]	; (402088 <xTaskRemoveFromEventList+0x90>)
  402058:	681b      	ldr	r3, [r3, #0]
  40205a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40205e:	429a      	cmp	r2, r3
  402060:	d903      	bls.n	40206a <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402062:	2001      	movs	r0, #1
  402064:	4b09      	ldr	r3, [pc, #36]	; (40208c <xTaskRemoveFromEventList+0x94>)
  402066:	6018      	str	r0, [r3, #0]
  402068:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  40206a:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  40206c:	bd38      	pop	{r3, r4, r5, pc}
  40206e:	bf00      	nop
  402070:	00400e91 	.word	0x00400e91
  402074:	2040c438 	.word	0x2040c438
  402078:	2040c474 	.word	0x2040c474
  40207c:	2040c218 	.word	0x2040c218
  402080:	00400e45 	.word	0x00400e45
  402084:	2040c424 	.word	0x2040c424
  402088:	2040c420 	.word	0x2040c420
  40208c:	2040c478 	.word	0x2040c478

00402090 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  402090:	b950      	cbnz	r0, 4020a8 <vTaskSetTimeOutState+0x18>
  402092:	f04f 0380 	mov.w	r3, #128	; 0x80
  402096:	b672      	cpsid	i
  402098:	f383 8811 	msr	BASEPRI, r3
  40209c:	f3bf 8f6f 	isb	sy
  4020a0:	f3bf 8f4f 	dsb	sy
  4020a4:	b662      	cpsie	i
  4020a6:	e7fe      	b.n	4020a6 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4020a8:	4a03      	ldr	r2, [pc, #12]	; (4020b8 <vTaskSetTimeOutState+0x28>)
  4020aa:	6812      	ldr	r2, [r2, #0]
  4020ac:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4020ae:	4a03      	ldr	r2, [pc, #12]	; (4020bc <vTaskSetTimeOutState+0x2c>)
  4020b0:	6812      	ldr	r2, [r2, #0]
  4020b2:	6042      	str	r2, [r0, #4]
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	2040c1ec 	.word	0x2040c1ec
  4020bc:	2040c43c 	.word	0x2040c43c

004020c0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4020c0:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4020c2:	b950      	cbnz	r0, 4020da <xTaskCheckForTimeOut+0x1a>
  4020c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c8:	b672      	cpsid	i
  4020ca:	f383 8811 	msr	BASEPRI, r3
  4020ce:	f3bf 8f6f 	isb	sy
  4020d2:	f3bf 8f4f 	dsb	sy
  4020d6:	b662      	cpsie	i
  4020d8:	e7fe      	b.n	4020d8 <xTaskCheckForTimeOut+0x18>
  4020da:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4020dc:	b951      	cbnz	r1, 4020f4 <xTaskCheckForTimeOut+0x34>
  4020de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020e2:	b672      	cpsid	i
  4020e4:	f383 8811 	msr	BASEPRI, r3
  4020e8:	f3bf 8f6f 	isb	sy
  4020ec:	f3bf 8f4f 	dsb	sy
  4020f0:	b662      	cpsie	i
  4020f2:	e7fe      	b.n	4020f2 <xTaskCheckForTimeOut+0x32>
  4020f4:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4020f6:	4b12      	ldr	r3, [pc, #72]	; (402140 <xTaskCheckForTimeOut+0x80>)
  4020f8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4020fa:	4b12      	ldr	r3, [pc, #72]	; (402144 <xTaskCheckForTimeOut+0x84>)
  4020fc:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4020fe:	682b      	ldr	r3, [r5, #0]
  402100:	f1b3 3fff 	cmp.w	r3, #4294967295
  402104:	d013      	beq.n	40212e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402106:	4a10      	ldr	r2, [pc, #64]	; (402148 <xTaskCheckForTimeOut+0x88>)
  402108:	6812      	ldr	r2, [r2, #0]
  40210a:	6820      	ldr	r0, [r4, #0]
  40210c:	4290      	cmp	r0, r2
  40210e:	d002      	beq.n	402116 <xTaskCheckForTimeOut+0x56>
  402110:	6862      	ldr	r2, [r4, #4]
  402112:	4291      	cmp	r1, r2
  402114:	d20d      	bcs.n	402132 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402116:	6862      	ldr	r2, [r4, #4]
  402118:	1a88      	subs	r0, r1, r2
  40211a:	4283      	cmp	r3, r0
  40211c:	d90b      	bls.n	402136 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40211e:	1a52      	subs	r2, r2, r1
  402120:	4413      	add	r3, r2
  402122:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402124:	4620      	mov	r0, r4
  402126:	4b09      	ldr	r3, [pc, #36]	; (40214c <xTaskCheckForTimeOut+0x8c>)
  402128:	4798      	blx	r3
			xReturn = pdFALSE;
  40212a:	2400      	movs	r4, #0
  40212c:	e004      	b.n	402138 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40212e:	2400      	movs	r4, #0
  402130:	e002      	b.n	402138 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402132:	2401      	movs	r4, #1
  402134:	e000      	b.n	402138 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402136:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402138:	4b05      	ldr	r3, [pc, #20]	; (402150 <xTaskCheckForTimeOut+0x90>)
  40213a:	4798      	blx	r3

	return xReturn;
}
  40213c:	4620      	mov	r0, r4
  40213e:	bd38      	pop	{r3, r4, r5, pc}
  402140:	00400b51 	.word	0x00400b51
  402144:	2040c43c 	.word	0x2040c43c
  402148:	2040c1ec 	.word	0x2040c1ec
  40214c:	00402091 	.word	0x00402091
  402150:	00400b9d 	.word	0x00400b9d

00402154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402154:	2201      	movs	r2, #1
  402156:	4b01      	ldr	r3, [pc, #4]	; (40215c <vTaskMissedYield+0x8>)
  402158:	601a      	str	r2, [r3, #0]
  40215a:	4770      	bx	lr
  40215c:	2040c478 	.word	0x2040c478

00402160 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402160:	4b05      	ldr	r3, [pc, #20]	; (402178 <xTaskGetSchedulerState+0x18>)
  402162:	681b      	ldr	r3, [r3, #0]
  402164:	b133      	cbz	r3, 402174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402166:	4b05      	ldr	r3, [pc, #20]	; (40217c <xTaskGetSchedulerState+0x1c>)
  402168:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40216a:	2b00      	cmp	r3, #0
  40216c:	bf0c      	ite	eq
  40216e:	2002      	moveq	r0, #2
  402170:	2000      	movne	r0, #0
  402172:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402174:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402176:	4770      	bx	lr
  402178:	2040c1f4 	.word	0x2040c1f4
  40217c:	2040c438 	.word	0x2040c438

00402180 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402180:	2800      	cmp	r0, #0
  402182:	d045      	beq.n	402210 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402184:	b538      	push	{r3, r4, r5, lr}
  402186:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402188:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40218a:	4922      	ldr	r1, [pc, #136]	; (402214 <vTaskPriorityInherit+0x94>)
  40218c:	6809      	ldr	r1, [r1, #0]
  40218e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402190:	428a      	cmp	r2, r1
  402192:	d23c      	bcs.n	40220e <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402194:	6981      	ldr	r1, [r0, #24]
  402196:	2900      	cmp	r1, #0
  402198:	db05      	blt.n	4021a6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40219a:	491e      	ldr	r1, [pc, #120]	; (402214 <vTaskPriorityInherit+0x94>)
  40219c:	6809      	ldr	r1, [r1, #0]
  40219e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4021a0:	f1c1 0119 	rsb	r1, r1, #25
  4021a4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4021a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4021aa:	491b      	ldr	r1, [pc, #108]	; (402218 <vTaskPriorityInherit+0x98>)
  4021ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4021b0:	6959      	ldr	r1, [r3, #20]
  4021b2:	4291      	cmp	r1, r2
  4021b4:	d127      	bne.n	402206 <vTaskPriorityInherit+0x86>
  4021b6:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021b8:	1d1d      	adds	r5, r3, #4
  4021ba:	4628      	mov	r0, r5
  4021bc:	4b17      	ldr	r3, [pc, #92]	; (40221c <vTaskPriorityInherit+0x9c>)
  4021be:	4798      	blx	r3
  4021c0:	b970      	cbnz	r0, 4021e0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4021c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4021c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021c8:	4a13      	ldr	r2, [pc, #76]	; (402218 <vTaskPriorityInherit+0x98>)
  4021ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021ce:	b93a      	cbnz	r2, 4021e0 <vTaskPriorityInherit+0x60>
  4021d0:	4813      	ldr	r0, [pc, #76]	; (402220 <vTaskPriorityInherit+0xa0>)
  4021d2:	6802      	ldr	r2, [r0, #0]
  4021d4:	2101      	movs	r1, #1
  4021d6:	fa01 f303 	lsl.w	r3, r1, r3
  4021da:	ea22 0303 	bic.w	r3, r2, r3
  4021de:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021e0:	4b0c      	ldr	r3, [pc, #48]	; (402214 <vTaskPriorityInherit+0x94>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4021e8:	490d      	ldr	r1, [pc, #52]	; (402220 <vTaskPriorityInherit+0xa0>)
  4021ea:	680a      	ldr	r2, [r1, #0]
  4021ec:	2301      	movs	r3, #1
  4021ee:	4083      	lsls	r3, r0
  4021f0:	4313      	orrs	r3, r2
  4021f2:	600b      	str	r3, [r1, #0]
  4021f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021f8:	4b07      	ldr	r3, [pc, #28]	; (402218 <vTaskPriorityInherit+0x98>)
  4021fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021fe:	4629      	mov	r1, r5
  402200:	4b08      	ldr	r3, [pc, #32]	; (402224 <vTaskPriorityInherit+0xa4>)
  402202:	4798      	blx	r3
  402204:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402206:	4a03      	ldr	r2, [pc, #12]	; (402214 <vTaskPriorityInherit+0x94>)
  402208:	6812      	ldr	r2, [r2, #0]
  40220a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40220c:	62da      	str	r2, [r3, #44]	; 0x2c
  40220e:	bd38      	pop	{r3, r4, r5, pc}
  402210:	4770      	bx	lr
  402212:	bf00      	nop
  402214:	2040c420 	.word	0x2040c420
  402218:	2040c218 	.word	0x2040c218
  40221c:	00400e91 	.word	0x00400e91
  402220:	2040c474 	.word	0x2040c474
  402224:	00400e45 	.word	0x00400e45

00402228 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402228:	2800      	cmp	r0, #0
  40222a:	d04e      	beq.n	4022ca <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  40222c:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40222e:	4a29      	ldr	r2, [pc, #164]	; (4022d4 <xTaskPriorityDisinherit+0xac>)
  402230:	6812      	ldr	r2, [r2, #0]
  402232:	4290      	cmp	r0, r2
  402234:	d00a      	beq.n	40224c <xTaskPriorityDisinherit+0x24>
  402236:	f04f 0380 	mov.w	r3, #128	; 0x80
  40223a:	b672      	cpsid	i
  40223c:	f383 8811 	msr	BASEPRI, r3
  402240:	f3bf 8f6f 	isb	sy
  402244:	f3bf 8f4f 	dsb	sy
  402248:	b662      	cpsie	i
  40224a:	e7fe      	b.n	40224a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  40224c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40224e:	b952      	cbnz	r2, 402266 <xTaskPriorityDisinherit+0x3e>
  402250:	f04f 0380 	mov.w	r3, #128	; 0x80
  402254:	b672      	cpsid	i
  402256:	f383 8811 	msr	BASEPRI, r3
  40225a:	f3bf 8f6f 	isb	sy
  40225e:	f3bf 8f4f 	dsb	sy
  402262:	b662      	cpsie	i
  402264:	e7fe      	b.n	402264 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  402266:	3a01      	subs	r2, #1
  402268:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40226a:	2a00      	cmp	r2, #0
  40226c:	d12f      	bne.n	4022ce <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40226e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  402270:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402272:	4291      	cmp	r1, r2
  402274:	d02b      	beq.n	4022ce <xTaskPriorityDisinherit+0xa6>
  402276:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402278:	1d05      	adds	r5, r0, #4
  40227a:	4628      	mov	r0, r5
  40227c:	4b16      	ldr	r3, [pc, #88]	; (4022d8 <xTaskPriorityDisinherit+0xb0>)
  40227e:	4798      	blx	r3
  402280:	b968      	cbnz	r0, 40229e <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402282:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402284:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402288:	4b14      	ldr	r3, [pc, #80]	; (4022dc <xTaskPriorityDisinherit+0xb4>)
  40228a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40228e:	b933      	cbnz	r3, 40229e <xTaskPriorityDisinherit+0x76>
  402290:	4813      	ldr	r0, [pc, #76]	; (4022e0 <xTaskPriorityDisinherit+0xb8>)
  402292:	6803      	ldr	r3, [r0, #0]
  402294:	2201      	movs	r2, #1
  402296:	408a      	lsls	r2, r1
  402298:	ea23 0302 	bic.w	r3, r3, r2
  40229c:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40229e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4022a0:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022a2:	f1c0 0319 	rsb	r3, r0, #25
  4022a6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4022a8:	4a0d      	ldr	r2, [pc, #52]	; (4022e0 <xTaskPriorityDisinherit+0xb8>)
  4022aa:	6813      	ldr	r3, [r2, #0]
  4022ac:	2401      	movs	r4, #1
  4022ae:	fa04 f100 	lsl.w	r1, r4, r0
  4022b2:	430b      	orrs	r3, r1
  4022b4:	6013      	str	r3, [r2, #0]
  4022b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022ba:	4b08      	ldr	r3, [pc, #32]	; (4022dc <xTaskPriorityDisinherit+0xb4>)
  4022bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022c0:	4629      	mov	r1, r5
  4022c2:	4b08      	ldr	r3, [pc, #32]	; (4022e4 <xTaskPriorityDisinherit+0xbc>)
  4022c4:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4022c6:	4620      	mov	r0, r4
  4022c8:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022ca:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022cc:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022ce:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022d0:	bd38      	pop	{r3, r4, r5, pc}
  4022d2:	bf00      	nop
  4022d4:	2040c420 	.word	0x2040c420
  4022d8:	00400e91 	.word	0x00400e91
  4022dc:	2040c218 	.word	0x2040c218
  4022e0:	2040c474 	.word	0x2040c474
  4022e4:	00400e45 	.word	0x00400e45

004022e8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4022e8:	4b05      	ldr	r3, [pc, #20]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022ea:	681b      	ldr	r3, [r3, #0]
  4022ec:	b123      	cbz	r3, 4022f8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4022ee:	4b04      	ldr	r3, [pc, #16]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022f0:	681a      	ldr	r2, [r3, #0]
  4022f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4022f4:	3301      	adds	r3, #1
  4022f6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4022f8:	4b01      	ldr	r3, [pc, #4]	; (402300 <pvTaskIncrementMutexHeldCount+0x18>)
  4022fa:	6818      	ldr	r0, [r3, #0]
	}
  4022fc:	4770      	bx	lr
  4022fe:	bf00      	nop
  402300:	2040c420 	.word	0x2040c420

00402304 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402304:	b510      	push	{r4, lr}
  402306:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402308:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40230a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  40230c:	4291      	cmp	r1, r2
  40230e:	d80a      	bhi.n	402326 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402310:	1ad2      	subs	r2, r2, r3
  402312:	6983      	ldr	r3, [r0, #24]
  402314:	429a      	cmp	r2, r3
  402316:	d211      	bcs.n	40233c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402318:	4b0a      	ldr	r3, [pc, #40]	; (402344 <prvInsertTimerInActiveList+0x40>)
  40231a:	6818      	ldr	r0, [r3, #0]
  40231c:	1d21      	adds	r1, r4, #4
  40231e:	4b0a      	ldr	r3, [pc, #40]	; (402348 <prvInsertTimerInActiveList+0x44>)
  402320:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402322:	2000      	movs	r0, #0
  402324:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402326:	4299      	cmp	r1, r3
  402328:	d301      	bcc.n	40232e <prvInsertTimerInActiveList+0x2a>
  40232a:	429a      	cmp	r2, r3
  40232c:	d308      	bcc.n	402340 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40232e:	4b07      	ldr	r3, [pc, #28]	; (40234c <prvInsertTimerInActiveList+0x48>)
  402330:	6818      	ldr	r0, [r3, #0]
  402332:	1d21      	adds	r1, r4, #4
  402334:	4b04      	ldr	r3, [pc, #16]	; (402348 <prvInsertTimerInActiveList+0x44>)
  402336:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402338:	2000      	movs	r0, #0
  40233a:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40233c:	2001      	movs	r0, #1
  40233e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402340:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402342:	bd10      	pop	{r4, pc}
  402344:	2040c4b0 	.word	0x2040c4b0
  402348:	00400e5d 	.word	0x00400e5d
  40234c:	2040c47c 	.word	0x2040c47c

00402350 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402350:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402352:	4b14      	ldr	r3, [pc, #80]	; (4023a4 <prvCheckForValidListAndQueue+0x54>)
  402354:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402356:	4b14      	ldr	r3, [pc, #80]	; (4023a8 <prvCheckForValidListAndQueue+0x58>)
  402358:	681b      	ldr	r3, [r3, #0]
  40235a:	bb03      	cbnz	r3, 40239e <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  40235c:	4d13      	ldr	r5, [pc, #76]	; (4023ac <prvCheckForValidListAndQueue+0x5c>)
  40235e:	4628      	mov	r0, r5
  402360:	4e13      	ldr	r6, [pc, #76]	; (4023b0 <prvCheckForValidListAndQueue+0x60>)
  402362:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402364:	4c13      	ldr	r4, [pc, #76]	; (4023b4 <prvCheckForValidListAndQueue+0x64>)
  402366:	4620      	mov	r0, r4
  402368:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40236a:	4b13      	ldr	r3, [pc, #76]	; (4023b8 <prvCheckForValidListAndQueue+0x68>)
  40236c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40236e:	4b13      	ldr	r3, [pc, #76]	; (4023bc <prvCheckForValidListAndQueue+0x6c>)
  402370:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402372:	2005      	movs	r0, #5
  402374:	2110      	movs	r1, #16
  402376:	2200      	movs	r2, #0
  402378:	4b11      	ldr	r3, [pc, #68]	; (4023c0 <prvCheckForValidListAndQueue+0x70>)
  40237a:	4798      	blx	r3
  40237c:	4b0a      	ldr	r3, [pc, #40]	; (4023a8 <prvCheckForValidListAndQueue+0x58>)
  40237e:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402380:	b950      	cbnz	r0, 402398 <prvCheckForValidListAndQueue+0x48>
  402382:	f04f 0380 	mov.w	r3, #128	; 0x80
  402386:	b672      	cpsid	i
  402388:	f383 8811 	msr	BASEPRI, r3
  40238c:	f3bf 8f6f 	isb	sy
  402390:	f3bf 8f4f 	dsb	sy
  402394:	b662      	cpsie	i
  402396:	e7fe      	b.n	402396 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402398:	490a      	ldr	r1, [pc, #40]	; (4023c4 <prvCheckForValidListAndQueue+0x74>)
  40239a:	4b0b      	ldr	r3, [pc, #44]	; (4023c8 <prvCheckForValidListAndQueue+0x78>)
  40239c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40239e:	4b0b      	ldr	r3, [pc, #44]	; (4023cc <prvCheckForValidListAndQueue+0x7c>)
  4023a0:	4798      	blx	r3
  4023a2:	bd70      	pop	{r4, r5, r6, pc}
  4023a4:	00400b51 	.word	0x00400b51
  4023a8:	2040c4ac 	.word	0x2040c4ac
  4023ac:	2040c480 	.word	0x2040c480
  4023b0:	00400e25 	.word	0x00400e25
  4023b4:	2040c494 	.word	0x2040c494
  4023b8:	2040c47c 	.word	0x2040c47c
  4023bc:	2040c4b0 	.word	0x2040c4b0
  4023c0:	00401119 	.word	0x00401119
  4023c4:	00412e50 	.word	0x00412e50
  4023c8:	00401715 	.word	0x00401715
  4023cc:	00400b9d 	.word	0x00400b9d

004023d0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4023d0:	b510      	push	{r4, lr}
  4023d2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4023d4:	4b0f      	ldr	r3, [pc, #60]	; (402414 <xTimerCreateTimerTask+0x44>)
  4023d6:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4023d8:	4b0f      	ldr	r3, [pc, #60]	; (402418 <xTimerCreateTimerTask+0x48>)
  4023da:	681b      	ldr	r3, [r3, #0]
  4023dc:	b163      	cbz	r3, 4023f8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4023de:	2318      	movs	r3, #24
  4023e0:	9300      	str	r3, [sp, #0]
  4023e2:	2300      	movs	r3, #0
  4023e4:	9301      	str	r3, [sp, #4]
  4023e6:	9302      	str	r3, [sp, #8]
  4023e8:	9303      	str	r3, [sp, #12]
  4023ea:	480c      	ldr	r0, [pc, #48]	; (40241c <xTimerCreateTimerTask+0x4c>)
  4023ec:	490c      	ldr	r1, [pc, #48]	; (402420 <xTimerCreateTimerTask+0x50>)
  4023ee:	f44f 7282 	mov.w	r2, #260	; 0x104
  4023f2:	4c0c      	ldr	r4, [pc, #48]	; (402424 <xTimerCreateTimerTask+0x54>)
  4023f4:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  4023f6:	b950      	cbnz	r0, 40240e <xTimerCreateTimerTask+0x3e>
  4023f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023fc:	b672      	cpsid	i
  4023fe:	f383 8811 	msr	BASEPRI, r3
  402402:	f3bf 8f6f 	isb	sy
  402406:	f3bf 8f4f 	dsb	sy
  40240a:	b662      	cpsie	i
  40240c:	e7fe      	b.n	40240c <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40240e:	b004      	add	sp, #16
  402410:	bd10      	pop	{r4, pc}
  402412:	bf00      	nop
  402414:	00402351 	.word	0x00402351
  402418:	2040c4ac 	.word	0x2040c4ac
  40241c:	00402561 	.word	0x00402561
  402420:	00412e58 	.word	0x00412e58
  402424:	0040181d 	.word	0x0040181d

00402428 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402428:	b950      	cbnz	r0, 402440 <xTimerGenericCommand+0x18>
  40242a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40242e:	b672      	cpsid	i
  402430:	f383 8811 	msr	BASEPRI, r3
  402434:	f3bf 8f6f 	isb	sy
  402438:	f3bf 8f4f 	dsb	sy
  40243c:	b662      	cpsie	i
  40243e:	e7fe      	b.n	40243e <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402440:	b530      	push	{r4, r5, lr}
  402442:	b085      	sub	sp, #20
  402444:	4615      	mov	r5, r2
  402446:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402448:	4a12      	ldr	r2, [pc, #72]	; (402494 <xTimerGenericCommand+0x6c>)
  40244a:	6810      	ldr	r0, [r2, #0]
  40244c:	b1f0      	cbz	r0, 40248c <xTimerGenericCommand+0x64>
  40244e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402450:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402452:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402454:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402456:	2905      	cmp	r1, #5
  402458:	dc13      	bgt.n	402482 <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40245a:	4b0f      	ldr	r3, [pc, #60]	; (402498 <xTimerGenericCommand+0x70>)
  40245c:	4798      	blx	r3
  40245e:	2802      	cmp	r0, #2
  402460:	d107      	bne.n	402472 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402462:	4b0c      	ldr	r3, [pc, #48]	; (402494 <xTimerGenericCommand+0x6c>)
  402464:	6818      	ldr	r0, [r3, #0]
  402466:	4669      	mov	r1, sp
  402468:	9a08      	ldr	r2, [sp, #32]
  40246a:	2300      	movs	r3, #0
  40246c:	4c0b      	ldr	r4, [pc, #44]	; (40249c <xTimerGenericCommand+0x74>)
  40246e:	47a0      	blx	r4
  402470:	e00d      	b.n	40248e <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402472:	4b08      	ldr	r3, [pc, #32]	; (402494 <xTimerGenericCommand+0x6c>)
  402474:	6818      	ldr	r0, [r3, #0]
  402476:	4669      	mov	r1, sp
  402478:	2200      	movs	r2, #0
  40247a:	4613      	mov	r3, r2
  40247c:	4c07      	ldr	r4, [pc, #28]	; (40249c <xTimerGenericCommand+0x74>)
  40247e:	47a0      	blx	r4
  402480:	e005      	b.n	40248e <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402482:	4669      	mov	r1, sp
  402484:	2300      	movs	r3, #0
  402486:	4c06      	ldr	r4, [pc, #24]	; (4024a0 <xTimerGenericCommand+0x78>)
  402488:	47a0      	blx	r4
  40248a:	e000      	b.n	40248e <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  40248c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40248e:	b005      	add	sp, #20
  402490:	bd30      	pop	{r4, r5, pc}
  402492:	bf00      	nop
  402494:	2040c4ac 	.word	0x2040c4ac
  402498:	00402161 	.word	0x00402161
  40249c:	0040119d 	.word	0x0040119d
  4024a0:	00401379 	.word	0x00401379

004024a4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4024a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024a8:	b082      	sub	sp, #8
  4024aa:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4024ac:	4b25      	ldr	r3, [pc, #148]	; (402544 <prvSampleTimeNow+0xa0>)
  4024ae:	4798      	blx	r3
  4024b0:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4024b2:	4b25      	ldr	r3, [pc, #148]	; (402548 <prvSampleTimeNow+0xa4>)
  4024b4:	681b      	ldr	r3, [r3, #0]
  4024b6:	4298      	cmp	r0, r3
  4024b8:	d23b      	bcs.n	402532 <prvSampleTimeNow+0x8e>
  4024ba:	e02b      	b.n	402514 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024bc:	68db      	ldr	r3, [r3, #12]
  4024be:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024c2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024c4:	f104 0904 	add.w	r9, r4, #4
  4024c8:	4648      	mov	r0, r9
  4024ca:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024ce:	4620      	mov	r0, r4
  4024d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024d2:	69e3      	ldr	r3, [r4, #28]
  4024d4:	2b01      	cmp	r3, #1
  4024d6:	d11f      	bne.n	402518 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024d8:	69a3      	ldr	r3, [r4, #24]
  4024da:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024dc:	4553      	cmp	r3, sl
  4024de:	d906      	bls.n	4024ee <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024e0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024e2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024e4:	6828      	ldr	r0, [r5, #0]
  4024e6:	4649      	mov	r1, r9
  4024e8:	4b18      	ldr	r3, [pc, #96]	; (40254c <prvSampleTimeNow+0xa8>)
  4024ea:	4798      	blx	r3
  4024ec:	e014      	b.n	402518 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4024ee:	2300      	movs	r3, #0
  4024f0:	9300      	str	r3, [sp, #0]
  4024f2:	4620      	mov	r0, r4
  4024f4:	4619      	mov	r1, r3
  4024f6:	4652      	mov	r2, sl
  4024f8:	4c15      	ldr	r4, [pc, #84]	; (402550 <prvSampleTimeNow+0xac>)
  4024fa:	47a0      	blx	r4
				configASSERT( xResult );
  4024fc:	b960      	cbnz	r0, 402518 <prvSampleTimeNow+0x74>
  4024fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402502:	b672      	cpsid	i
  402504:	f383 8811 	msr	BASEPRI, r3
  402508:	f3bf 8f6f 	isb	sy
  40250c:	f3bf 8f4f 	dsb	sy
  402510:	b662      	cpsie	i
  402512:	e7fe      	b.n	402512 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402514:	4d0f      	ldr	r5, [pc, #60]	; (402554 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402516:	4e10      	ldr	r6, [pc, #64]	; (402558 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402518:	682b      	ldr	r3, [r5, #0]
  40251a:	681a      	ldr	r2, [r3, #0]
  40251c:	2a00      	cmp	r2, #0
  40251e:	d1cd      	bne.n	4024bc <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402520:	4a0e      	ldr	r2, [pc, #56]	; (40255c <prvSampleTimeNow+0xb8>)
  402522:	6810      	ldr	r0, [r2, #0]
  402524:	490b      	ldr	r1, [pc, #44]	; (402554 <prvSampleTimeNow+0xb0>)
  402526:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402528:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  40252a:	2301      	movs	r3, #1
  40252c:	f8c8 3000 	str.w	r3, [r8]
  402530:	e002      	b.n	402538 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402532:	2300      	movs	r3, #0
  402534:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402538:	4b03      	ldr	r3, [pc, #12]	; (402548 <prvSampleTimeNow+0xa4>)
  40253a:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  40253c:	4638      	mov	r0, r7
  40253e:	b002      	add	sp, #8
  402540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402544:	00401ae5 	.word	0x00401ae5
  402548:	2040c4a8 	.word	0x2040c4a8
  40254c:	00400e5d 	.word	0x00400e5d
  402550:	00402429 	.word	0x00402429
  402554:	2040c47c 	.word	0x2040c47c
  402558:	00400e91 	.word	0x00400e91
  40255c:	2040c4b0 	.word	0x2040c4b0

00402560 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402564:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402566:	4c69      	ldr	r4, [pc, #420]	; (40270c <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402568:	4f69      	ldr	r7, [pc, #420]	; (402710 <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40256a:	4d6a      	ldr	r5, [pc, #424]	; (402714 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40256c:	4b6a      	ldr	r3, [pc, #424]	; (402718 <prvTimerTask+0x1b8>)
  40256e:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402570:	681a      	ldr	r2, [r3, #0]
  402572:	2a00      	cmp	r2, #0
  402574:	f000 80bf 	beq.w	4026f6 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402578:	68db      	ldr	r3, [r3, #12]
  40257a:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  40257c:	4b67      	ldr	r3, [pc, #412]	; (40271c <prvTimerTask+0x1bc>)
  40257e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402580:	a804      	add	r0, sp, #16
  402582:	4b67      	ldr	r3, [pc, #412]	; (402720 <prvTimerTask+0x1c0>)
  402584:	4798      	blx	r3
  402586:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402588:	9b04      	ldr	r3, [sp, #16]
  40258a:	2b00      	cmp	r3, #0
  40258c:	d14d      	bne.n	40262a <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40258e:	42b0      	cmp	r0, r6
  402590:	d339      	bcc.n	402606 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  402592:	4b64      	ldr	r3, [pc, #400]	; (402724 <prvTimerTask+0x1c4>)
  402594:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402596:	4b60      	ldr	r3, [pc, #384]	; (402718 <prvTimerTask+0x1b8>)
  402598:	681b      	ldr	r3, [r3, #0]
  40259a:	68db      	ldr	r3, [r3, #12]
  40259c:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025a0:	f109 0004 	add.w	r0, r9, #4
  4025a4:	4b60      	ldr	r3, [pc, #384]	; (402728 <prvTimerTask+0x1c8>)
  4025a6:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4025ac:	2b01      	cmp	r3, #1
  4025ae:	d11d      	bne.n	4025ec <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4025b0:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4025b4:	4648      	mov	r0, r9
  4025b6:	4431      	add	r1, r6
  4025b8:	4642      	mov	r2, r8
  4025ba:	4633      	mov	r3, r6
  4025bc:	f8df c178 	ldr.w	ip, [pc, #376]	; 402738 <prvTimerTask+0x1d8>
  4025c0:	47e0      	blx	ip
  4025c2:	2801      	cmp	r0, #1
  4025c4:	d112      	bne.n	4025ec <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4025c6:	2300      	movs	r3, #0
  4025c8:	9300      	str	r3, [sp, #0]
  4025ca:	4648      	mov	r0, r9
  4025cc:	4619      	mov	r1, r3
  4025ce:	4632      	mov	r2, r6
  4025d0:	4e56      	ldr	r6, [pc, #344]	; (40272c <prvTimerTask+0x1cc>)
  4025d2:	47b0      	blx	r6
			configASSERT( xResult );
  4025d4:	b950      	cbnz	r0, 4025ec <prvTimerTask+0x8c>
  4025d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025da:	b672      	cpsid	i
  4025dc:	f383 8811 	msr	BASEPRI, r3
  4025e0:	f3bf 8f6f 	isb	sy
  4025e4:	f3bf 8f4f 	dsb	sy
  4025e8:	b662      	cpsie	i
  4025ea:	e7fe      	b.n	4025ea <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025ec:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4025f0:	4648      	mov	r0, r9
  4025f2:	4798      	blx	r3
  4025f4:	e077      	b.n	4026e6 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4025f6:	4b4e      	ldr	r3, [pc, #312]	; (402730 <prvTimerTask+0x1d0>)
  4025f8:	681b      	ldr	r3, [r3, #0]
  4025fa:	681a      	ldr	r2, [r3, #0]
  4025fc:	fab2 f282 	clz	r2, r2
  402600:	0952      	lsrs	r2, r2, #5
  402602:	2600      	movs	r6, #0
  402604:	e000      	b.n	402608 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402606:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402608:	6820      	ldr	r0, [r4, #0]
  40260a:	ebc8 0106 	rsb	r1, r8, r6
  40260e:	4b49      	ldr	r3, [pc, #292]	; (402734 <prvTimerTask+0x1d4>)
  402610:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402612:	4b44      	ldr	r3, [pc, #272]	; (402724 <prvTimerTask+0x1c4>)
  402614:	4798      	blx	r3
  402616:	2800      	cmp	r0, #0
  402618:	d165      	bne.n	4026e6 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40261a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40261e:	603b      	str	r3, [r7, #0]
  402620:	f3bf 8f4f 	dsb	sy
  402624:	f3bf 8f6f 	isb	sy
  402628:	e05d      	b.n	4026e6 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  40262a:	4b3e      	ldr	r3, [pc, #248]	; (402724 <prvTimerTask+0x1c4>)
  40262c:	4798      	blx	r3
  40262e:	e05a      	b.n	4026e6 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402630:	9b04      	ldr	r3, [sp, #16]
  402632:	2b00      	cmp	r3, #0
  402634:	da06      	bge.n	402644 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402636:	9806      	ldr	r0, [sp, #24]
  402638:	9907      	ldr	r1, [sp, #28]
  40263a:	9b05      	ldr	r3, [sp, #20]
  40263c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40263e:	9b04      	ldr	r3, [sp, #16]
  402640:	2b00      	cmp	r3, #0
  402642:	db50      	blt.n	4026e6 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402644:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402646:	6973      	ldr	r3, [r6, #20]
  402648:	b113      	cbz	r3, 402650 <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40264a:	1d30      	adds	r0, r6, #4
  40264c:	4b36      	ldr	r3, [pc, #216]	; (402728 <prvTimerTask+0x1c8>)
  40264e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402650:	a803      	add	r0, sp, #12
  402652:	4b33      	ldr	r3, [pc, #204]	; (402720 <prvTimerTask+0x1c0>)
  402654:	4798      	blx	r3
  402656:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402658:	9a04      	ldr	r2, [sp, #16]
  40265a:	2a09      	cmp	r2, #9
  40265c:	d843      	bhi.n	4026e6 <prvTimerTask+0x186>
  40265e:	e8df f002 	tbb	[pc, r2]
  402662:	0505      	.short	0x0505
  402664:	3f2a4205 	.word	0x3f2a4205
  402668:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40266c:	9b05      	ldr	r3, [sp, #20]
  40266e:	69b1      	ldr	r1, [r6, #24]
  402670:	4630      	mov	r0, r6
  402672:	4419      	add	r1, r3
  402674:	4672      	mov	r2, lr
  402676:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 402738 <prvTimerTask+0x1d8>
  40267a:	47e0      	blx	ip
  40267c:	2801      	cmp	r0, #1
  40267e:	d132      	bne.n	4026e6 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402680:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402682:	4630      	mov	r0, r6
  402684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402686:	69f3      	ldr	r3, [r6, #28]
  402688:	2b01      	cmp	r3, #1
  40268a:	d12c      	bne.n	4026e6 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40268c:	69b2      	ldr	r2, [r6, #24]
  40268e:	2300      	movs	r3, #0
  402690:	9300      	str	r3, [sp, #0]
  402692:	4630      	mov	r0, r6
  402694:	4619      	mov	r1, r3
  402696:	9e05      	ldr	r6, [sp, #20]
  402698:	4432      	add	r2, r6
  40269a:	4e24      	ldr	r6, [pc, #144]	; (40272c <prvTimerTask+0x1cc>)
  40269c:	47b0      	blx	r6
							configASSERT( xResult );
  40269e:	bb10      	cbnz	r0, 4026e6 <prvTimerTask+0x186>
  4026a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a4:	b672      	cpsid	i
  4026a6:	f383 8811 	msr	BASEPRI, r3
  4026aa:	f3bf 8f6f 	isb	sy
  4026ae:	f3bf 8f4f 	dsb	sy
  4026b2:	b662      	cpsie	i
  4026b4:	e7fe      	b.n	4026b4 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4026b6:	9905      	ldr	r1, [sp, #20]
  4026b8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4026ba:	b951      	cbnz	r1, 4026d2 <prvTimerTask+0x172>
  4026bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c0:	b672      	cpsid	i
  4026c2:	f383 8811 	msr	BASEPRI, r3
  4026c6:	f3bf 8f6f 	isb	sy
  4026ca:	f3bf 8f4f 	dsb	sy
  4026ce:	b662      	cpsie	i
  4026d0:	e7fe      	b.n	4026d0 <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4026d2:	4630      	mov	r0, r6
  4026d4:	4471      	add	r1, lr
  4026d6:	4672      	mov	r2, lr
  4026d8:	4673      	mov	r3, lr
  4026da:	4e17      	ldr	r6, [pc, #92]	; (402738 <prvTimerTask+0x1d8>)
  4026dc:	47b0      	blx	r6
  4026de:	e002      	b.n	4026e6 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4026e0:	4630      	mov	r0, r6
  4026e2:	4b16      	ldr	r3, [pc, #88]	; (40273c <prvTimerTask+0x1dc>)
  4026e4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026e6:	6820      	ldr	r0, [r4, #0]
  4026e8:	a904      	add	r1, sp, #16
  4026ea:	2200      	movs	r2, #0
  4026ec:	4613      	mov	r3, r2
  4026ee:	47a8      	blx	r5
  4026f0:	2800      	cmp	r0, #0
  4026f2:	d19d      	bne.n	402630 <prvTimerTask+0xd0>
  4026f4:	e73a      	b.n	40256c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4026f6:	4b09      	ldr	r3, [pc, #36]	; (40271c <prvTimerTask+0x1bc>)
  4026f8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4026fa:	a804      	add	r0, sp, #16
  4026fc:	4b08      	ldr	r3, [pc, #32]	; (402720 <prvTimerTask+0x1c0>)
  4026fe:	4798      	blx	r3
  402700:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402702:	9b04      	ldr	r3, [sp, #16]
  402704:	2b00      	cmp	r3, #0
  402706:	f43f af76 	beq.w	4025f6 <prvTimerTask+0x96>
  40270a:	e78e      	b.n	40262a <prvTimerTask+0xca>
  40270c:	2040c4ac 	.word	0x2040c4ac
  402710:	e000ed04 	.word	0xe000ed04
  402714:	00401551 	.word	0x00401551
  402718:	2040c47c 	.word	0x2040c47c
  40271c:	00401ad5 	.word	0x00401ad5
  402720:	004024a5 	.word	0x004024a5
  402724:	00401c25 	.word	0x00401c25
  402728:	00400e91 	.word	0x00400e91
  40272c:	00402429 	.word	0x00402429
  402730:	2040c4b0 	.word	0x2040c4b0
  402734:	00401749 	.word	0x00401749
  402738:	00402305 	.word	0x00402305
  40273c:	00400e09 	.word	0x00400e09

00402740 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402740:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402742:	4810      	ldr	r0, [pc, #64]	; (402784 <sysclk_init+0x44>)
  402744:	4b10      	ldr	r3, [pc, #64]	; (402788 <sysclk_init+0x48>)
  402746:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402748:	2000      	movs	r0, #0
  40274a:	213e      	movs	r1, #62	; 0x3e
  40274c:	4b0f      	ldr	r3, [pc, #60]	; (40278c <sysclk_init+0x4c>)
  40274e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402750:	4c0f      	ldr	r4, [pc, #60]	; (402790 <sysclk_init+0x50>)
  402752:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402754:	2800      	cmp	r0, #0
  402756:	d0fc      	beq.n	402752 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402758:	4b0e      	ldr	r3, [pc, #56]	; (402794 <sysclk_init+0x54>)
  40275a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40275c:	4a0e      	ldr	r2, [pc, #56]	; (402798 <sysclk_init+0x58>)
  40275e:	4b0f      	ldr	r3, [pc, #60]	; (40279c <sysclk_init+0x5c>)
  402760:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402762:	4c0f      	ldr	r4, [pc, #60]	; (4027a0 <sysclk_init+0x60>)
  402764:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402766:	2800      	cmp	r0, #0
  402768:	d0fc      	beq.n	402764 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40276a:	2002      	movs	r0, #2
  40276c:	4b0d      	ldr	r3, [pc, #52]	; (4027a4 <sysclk_init+0x64>)
  40276e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402770:	2000      	movs	r0, #0
  402772:	4b0d      	ldr	r3, [pc, #52]	; (4027a8 <sysclk_init+0x68>)
  402774:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402776:	4b0d      	ldr	r3, [pc, #52]	; (4027ac <sysclk_init+0x6c>)
  402778:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40277a:	4802      	ldr	r0, [pc, #8]	; (402784 <sysclk_init+0x44>)
  40277c:	4b02      	ldr	r3, [pc, #8]	; (402788 <sysclk_init+0x48>)
  40277e:	4798      	blx	r3
  402780:	bd10      	pop	{r4, pc}
  402782:	bf00      	nop
  402784:	11e1a300 	.word	0x11e1a300
  402788:	00403679 	.word	0x00403679
  40278c:	0040298d 	.word	0x0040298d
  402790:	004029e1 	.word	0x004029e1
  402794:	004029f1 	.word	0x004029f1
  402798:	20183f01 	.word	0x20183f01
  40279c:	400e0600 	.word	0x400e0600
  4027a0:	00402a01 	.word	0x00402a01
  4027a4:	004028ed 	.word	0x004028ed
  4027a8:	00402925 	.word	0x00402925
  4027ac:	00403565 	.word	0x00403565

004027b0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4027b0:	b10a      	cbz	r2, 4027b6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4027b2:	6641      	str	r1, [r0, #100]	; 0x64
  4027b4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4027b6:	6601      	str	r1, [r0, #96]	; 0x60
  4027b8:	4770      	bx	lr
  4027ba:	bf00      	nop

004027bc <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4027bc:	6301      	str	r1, [r0, #48]	; 0x30
  4027be:	4770      	bx	lr

004027c0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4027c0:	6341      	str	r1, [r0, #52]	; 0x34
  4027c2:	4770      	bx	lr

004027c4 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4027c4:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4027c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4027cc:	d101      	bne.n	4027d2 <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  4027ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4027d0:	e000      	b.n	4027d4 <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4027d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  4027d4:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4027d6:	bf14      	ite	ne
  4027d8:	2001      	movne	r0, #1
  4027da:	2000      	moveq	r0, #0
  4027dc:	4770      	bx	lr
  4027de:	bf00      	nop

004027e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4027e0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4027e2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4027e6:	d02f      	beq.n	402848 <pio_set_peripheral+0x68>
  4027e8:	d807      	bhi.n	4027fa <pio_set_peripheral+0x1a>
  4027ea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4027ee:	d014      	beq.n	40281a <pio_set_peripheral+0x3a>
  4027f0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4027f4:	d01e      	beq.n	402834 <pio_set_peripheral+0x54>
  4027f6:	b939      	cbnz	r1, 402808 <pio_set_peripheral+0x28>
  4027f8:	4770      	bx	lr
  4027fa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4027fe:	d037      	beq.n	402870 <pio_set_peripheral+0x90>
  402800:	d804      	bhi.n	40280c <pio_set_peripheral+0x2c>
  402802:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402806:	d029      	beq.n	40285c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402808:	6042      	str	r2, [r0, #4]
  40280a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40280c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402810:	d02e      	beq.n	402870 <pio_set_peripheral+0x90>
  402812:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402816:	d02b      	beq.n	402870 <pio_set_peripheral+0x90>
  402818:	e7f6      	b.n	402808 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40281a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40281c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40281e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402820:	43d3      	mvns	r3, r2
  402822:	4021      	ands	r1, r4
  402824:	4019      	ands	r1, r3
  402826:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402828:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40282a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  40282c:	4021      	ands	r1, r4
  40282e:	400b      	ands	r3, r1
  402830:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402832:	e01a      	b.n	40286a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402834:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402836:	4313      	orrs	r3, r2
  402838:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40283a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40283c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40283e:	400b      	ands	r3, r1
  402840:	ea23 0302 	bic.w	r3, r3, r2
  402844:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402846:	e7df      	b.n	402808 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402848:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40284a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40284c:	400b      	ands	r3, r1
  40284e:	ea23 0302 	bic.w	r3, r3, r2
  402852:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402854:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402856:	4313      	orrs	r3, r2
  402858:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40285a:	e7d5      	b.n	402808 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40285c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40285e:	4313      	orrs	r3, r2
  402860:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402862:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402864:	4313      	orrs	r3, r2
  402866:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402868:	e7ce      	b.n	402808 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40286a:	6042      	str	r2, [r0, #4]
}
  40286c:	f85d 4b04 	ldr.w	r4, [sp], #4
  402870:	4770      	bx	lr
  402872:	bf00      	nop

00402874 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402874:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402876:	f012 0f01 	tst.w	r2, #1
  40287a:	d001      	beq.n	402880 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  40287c:	6641      	str	r1, [r0, #100]	; 0x64
  40287e:	e000      	b.n	402882 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402880:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402882:	f012 0f0a 	tst.w	r2, #10
  402886:	d001      	beq.n	40288c <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402888:	6201      	str	r1, [r0, #32]
  40288a:	e000      	b.n	40288e <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40288c:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40288e:	f012 0f02 	tst.w	r2, #2
  402892:	d002      	beq.n	40289a <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402894:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402898:	e004      	b.n	4028a4 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40289a:	f012 0f08 	tst.w	r2, #8
  40289e:	d001      	beq.n	4028a4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4028a0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4028a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4028a6:	6001      	str	r1, [r0, #0]
  4028a8:	4770      	bx	lr
  4028aa:	bf00      	nop

004028ac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4028ac:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028ae:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4028b0:	9c01      	ldr	r4, [sp, #4]
  4028b2:	b10c      	cbz	r4, 4028b8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028b4:	6641      	str	r1, [r0, #100]	; 0x64
  4028b6:	e000      	b.n	4028ba <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028b8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4028ba:	b10b      	cbz	r3, 4028c0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4028bc:	6501      	str	r1, [r0, #80]	; 0x50
  4028be:	e000      	b.n	4028c2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028c0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028c2:	b10a      	cbz	r2, 4028c8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4028c4:	6301      	str	r1, [r0, #48]	; 0x30
  4028c6:	e000      	b.n	4028ca <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028c8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028ca:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4028cc:	6001      	str	r1, [r0, #0]
}
  4028ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028d2:	4770      	bx	lr

004028d4 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  4028d4:	b112      	cbz	r2, 4028dc <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  4028d6:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  4028da:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  4028dc:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  4028e0:	4770      	bx	lr
  4028e2:	bf00      	nop

004028e4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4028e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4028e6:	4770      	bx	lr

004028e8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4028e8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4028ea:	4770      	bx	lr

004028ec <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4028ec:	2803      	cmp	r0, #3
  4028ee:	d007      	beq.n	402900 <pmc_mck_set_division+0x14>
  4028f0:	2804      	cmp	r0, #4
  4028f2:	d008      	beq.n	402906 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4028f4:	2802      	cmp	r0, #2
  4028f6:	bf0c      	ite	eq
  4028f8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4028fc:	2100      	movne	r1, #0
  4028fe:	e004      	b.n	40290a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402900:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402904:	e001      	b.n	40290a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402906:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40290a:	4a05      	ldr	r2, [pc, #20]	; (402920 <pmc_mck_set_division+0x34>)
  40290c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40290e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402912:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402914:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402916:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402918:	f013 0f08 	tst.w	r3, #8
  40291c:	d0fb      	beq.n	402916 <pmc_mck_set_division+0x2a>
}
  40291e:	4770      	bx	lr
  402920:	400e0600 	.word	0x400e0600

00402924 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402924:	4a18      	ldr	r2, [pc, #96]	; (402988 <pmc_switch_mck_to_pllack+0x64>)
  402926:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40292c:	4318      	orrs	r0, r3
  40292e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402930:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402932:	f013 0f08 	tst.w	r3, #8
  402936:	d003      	beq.n	402940 <pmc_switch_mck_to_pllack+0x1c>
  402938:	e009      	b.n	40294e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40293a:	3b01      	subs	r3, #1
  40293c:	d103      	bne.n	402946 <pmc_switch_mck_to_pllack+0x22>
  40293e:	e01e      	b.n	40297e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402940:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402944:	4910      	ldr	r1, [pc, #64]	; (402988 <pmc_switch_mck_to_pllack+0x64>)
  402946:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402948:	f012 0f08 	tst.w	r2, #8
  40294c:	d0f5      	beq.n	40293a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40294e:	4a0e      	ldr	r2, [pc, #56]	; (402988 <pmc_switch_mck_to_pllack+0x64>)
  402950:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402952:	f023 0303 	bic.w	r3, r3, #3
  402956:	f043 0302 	orr.w	r3, r3, #2
  40295a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40295c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40295e:	f010 0008 	ands.w	r0, r0, #8
  402962:	d004      	beq.n	40296e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402964:	2000      	movs	r0, #0
  402966:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402968:	3b01      	subs	r3, #1
  40296a:	d103      	bne.n	402974 <pmc_switch_mck_to_pllack+0x50>
  40296c:	e009      	b.n	402982 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40296e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402972:	4905      	ldr	r1, [pc, #20]	; (402988 <pmc_switch_mck_to_pllack+0x64>)
  402974:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402976:	f012 0f08 	tst.w	r2, #8
  40297a:	d0f5      	beq.n	402968 <pmc_switch_mck_to_pllack+0x44>
  40297c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40297e:	2001      	movs	r0, #1
  402980:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402982:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	400e0600 	.word	0x400e0600

0040298c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40298c:	b138      	cbz	r0, 40299e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40298e:	490e      	ldr	r1, [pc, #56]	; (4029c8 <pmc_switch_mainck_to_xtal+0x3c>)
  402990:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402992:	4a0e      	ldr	r2, [pc, #56]	; (4029cc <pmc_switch_mainck_to_xtal+0x40>)
  402994:	401a      	ands	r2, r3
  402996:	4b0e      	ldr	r3, [pc, #56]	; (4029d0 <pmc_switch_mainck_to_xtal+0x44>)
  402998:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40299a:	620b      	str	r3, [r1, #32]
  40299c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40299e:	480a      	ldr	r0, [pc, #40]	; (4029c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4029a0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029a2:	4a0c      	ldr	r2, [pc, #48]	; (4029d4 <pmc_switch_mainck_to_xtal+0x48>)
  4029a4:	401a      	ands	r2, r3
  4029a6:	4b0c      	ldr	r3, [pc, #48]	; (4029d8 <pmc_switch_mainck_to_xtal+0x4c>)
  4029a8:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4029aa:	0209      	lsls	r1, r1, #8
  4029ac:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029ae:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4029b0:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4029b2:	4602      	mov	r2, r0
  4029b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4029b6:	f013 0f01 	tst.w	r3, #1
  4029ba:	d0fb      	beq.n	4029b4 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4029bc:	4a02      	ldr	r2, [pc, #8]	; (4029c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4029be:	6a11      	ldr	r1, [r2, #32]
  4029c0:	4b06      	ldr	r3, [pc, #24]	; (4029dc <pmc_switch_mainck_to_xtal+0x50>)
  4029c2:	430b      	orrs	r3, r1
  4029c4:	6213      	str	r3, [r2, #32]
  4029c6:	4770      	bx	lr
  4029c8:	400e0600 	.word	0x400e0600
  4029cc:	fec8fffc 	.word	0xfec8fffc
  4029d0:	01370002 	.word	0x01370002
  4029d4:	ffc8fffc 	.word	0xffc8fffc
  4029d8:	00370001 	.word	0x00370001
  4029dc:	01370000 	.word	0x01370000

004029e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4029e0:	4b02      	ldr	r3, [pc, #8]	; (4029ec <pmc_osc_is_ready_mainck+0xc>)
  4029e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4029e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4029e8:	4770      	bx	lr
  4029ea:	bf00      	nop
  4029ec:	400e0600 	.word	0x400e0600

004029f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4029f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4029f4:	4b01      	ldr	r3, [pc, #4]	; (4029fc <pmc_disable_pllack+0xc>)
  4029f6:	629a      	str	r2, [r3, #40]	; 0x28
  4029f8:	4770      	bx	lr
  4029fa:	bf00      	nop
  4029fc:	400e0600 	.word	0x400e0600

00402a00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402a00:	4b02      	ldr	r3, [pc, #8]	; (402a0c <pmc_is_locked_pllack+0xc>)
  402a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402a04:	f000 0002 	and.w	r0, r0, #2
  402a08:	4770      	bx	lr
  402a0a:	bf00      	nop
  402a0c:	400e0600 	.word	0x400e0600

00402a10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402a10:	283f      	cmp	r0, #63	; 0x3f
  402a12:	d81e      	bhi.n	402a52 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402a14:	281f      	cmp	r0, #31
  402a16:	d80c      	bhi.n	402a32 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402a18:	4b11      	ldr	r3, [pc, #68]	; (402a60 <pmc_enable_periph_clk+0x50>)
  402a1a:	699a      	ldr	r2, [r3, #24]
  402a1c:	2301      	movs	r3, #1
  402a1e:	4083      	lsls	r3, r0
  402a20:	401a      	ands	r2, r3
  402a22:	4293      	cmp	r3, r2
  402a24:	d017      	beq.n	402a56 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402a26:	2301      	movs	r3, #1
  402a28:	4083      	lsls	r3, r0
  402a2a:	4a0d      	ldr	r2, [pc, #52]	; (402a60 <pmc_enable_periph_clk+0x50>)
  402a2c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a2e:	2000      	movs	r0, #0
  402a30:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a32:	4b0b      	ldr	r3, [pc, #44]	; (402a60 <pmc_enable_periph_clk+0x50>)
  402a34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402a38:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a3a:	2301      	movs	r3, #1
  402a3c:	4083      	lsls	r3, r0
  402a3e:	401a      	ands	r2, r3
  402a40:	4293      	cmp	r3, r2
  402a42:	d00a      	beq.n	402a5a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402a44:	2301      	movs	r3, #1
  402a46:	4083      	lsls	r3, r0
  402a48:	4a05      	ldr	r2, [pc, #20]	; (402a60 <pmc_enable_periph_clk+0x50>)
  402a4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402a4e:	2000      	movs	r0, #0
  402a50:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402a52:	2001      	movs	r0, #1
  402a54:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a56:	2000      	movs	r0, #0
  402a58:	4770      	bx	lr
  402a5a:	2000      	movs	r0, #0
}
  402a5c:	4770      	bx	lr
  402a5e:	bf00      	nop
  402a60:	400e0600 	.word	0x400e0600

00402a64 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402a64:	4b0f      	ldr	r3, [pc, #60]	; (402aa4 <twihs_set_speed+0x40>)
  402a66:	4299      	cmp	r1, r3
  402a68:	d819      	bhi.n	402a9e <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402a6a:	0049      	lsls	r1, r1, #1
  402a6c:	fbb2 f2f1 	udiv	r2, r2, r1
  402a70:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a72:	2aff      	cmp	r2, #255	; 0xff
  402a74:	d907      	bls.n	402a86 <twihs_set_speed+0x22>
  402a76:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  402a78:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  402a7a:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a7c:	2b06      	cmp	r3, #6
  402a7e:	d803      	bhi.n	402a88 <twihs_set_speed+0x24>
  402a80:	2aff      	cmp	r2, #255	; 0xff
  402a82:	d8f9      	bhi.n	402a78 <twihs_set_speed+0x14>
  402a84:	e000      	b.n	402a88 <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a86:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a88:	0211      	lsls	r1, r2, #8
  402a8a:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  402a8c:	041b      	lsls	r3, r3, #16
  402a8e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402a92:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a94:	b2d2      	uxtb	r2, r2
  402a96:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  402a98:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  402a9a:	2000      	movs	r0, #0
  402a9c:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402a9e:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402aa0:	4770      	bx	lr
  402aa2:	bf00      	nop
  402aa4:	00061a80 	.word	0x00061a80

00402aa8 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402aa8:	b508      	push	{r3, lr}
  402aaa:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  402aac:	f04f 31ff 	mov.w	r1, #4294967295
  402ab0:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  402ab2:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402ab4:	2180      	movs	r1, #128	; 0x80
  402ab6:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  402ab8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402aba:	2108      	movs	r1, #8
  402abc:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402abe:	2120      	movs	r1, #32
  402ac0:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402ac2:	2104      	movs	r1, #4
  402ac4:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402ac6:	6851      	ldr	r1, [r2, #4]
  402ac8:	6812      	ldr	r2, [r2, #0]
  402aca:	4b03      	ldr	r3, [pc, #12]	; (402ad8 <twihs_master_init+0x30>)
  402acc:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  402ace:	2801      	cmp	r0, #1
  402ad0:	bf14      	ite	ne
  402ad2:	2000      	movne	r0, #0
  402ad4:	2001      	moveq	r0, #1
  402ad6:	bd08      	pop	{r3, pc}
  402ad8:	00402a65 	.word	0x00402a65

00402adc <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402adc:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  402ade:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402ae0:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  402ae2:	2a00      	cmp	r2, #0
  402ae4:	d047      	beq.n	402b76 <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402ae6:	2600      	movs	r6, #0
  402ae8:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402aea:	684b      	ldr	r3, [r1, #4]
  402aec:	021b      	lsls	r3, r3, #8
  402aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402af2:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402af6:	7c0b      	ldrb	r3, [r1, #16]
  402af8:	041b      	lsls	r3, r3, #16
  402afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402afe:	432b      	orrs	r3, r5
  402b00:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402b02:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b04:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402b06:	b15d      	cbz	r5, 402b20 <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  402b08:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402b0a:	2d01      	cmp	r5, #1
  402b0c:	dd02      	ble.n	402b14 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  402b0e:	784e      	ldrb	r6, [r1, #1]
  402b10:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402b14:	2d02      	cmp	r5, #2
  402b16:	dd04      	ble.n	402b22 <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  402b18:	7889      	ldrb	r1, [r1, #2]
  402b1a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402b1e:	e000      	b.n	402b22 <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402b20:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b22:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402b24:	2301      	movs	r3, #1
  402b26:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  402b28:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b2c:	2702      	movs	r7, #2
  402b2e:	e014      	b.n	402b5a <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402b30:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b32:	f413 7f80 	tst.w	r3, #256	; 0x100
  402b36:	d120      	bne.n	402b7a <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  402b38:	3901      	subs	r1, #1
  402b3a:	d020      	beq.n	402b7e <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  402b3c:	2a01      	cmp	r2, #1
  402b3e:	d104      	bne.n	402b4a <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b40:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  402b42:	f013 0f02 	tst.w	r3, #2
  402b46:	d0f3      	beq.n	402b30 <twihs_master_read+0x54>
  402b48:	e01d      	b.n	402b86 <twihs_master_read+0xaa>
  402b4a:	f013 0f02 	tst.w	r3, #2
  402b4e:	d00a      	beq.n	402b66 <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b50:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b52:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b56:	3a01      	subs	r2, #1
  402b58:	d007      	beq.n	402b6a <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  402b5a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b5c:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  402b60:	d10f      	bne.n	402b82 <twihs_master_read+0xa6>
  402b62:	4631      	mov	r1, r6
  402b64:	e7ea      	b.n	402b3c <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b66:	2a00      	cmp	r2, #0
  402b68:	d1e2      	bne.n	402b30 <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402b6a:	6a03      	ldr	r3, [r0, #32]
  402b6c:	f013 0f01 	tst.w	r3, #1
  402b70:	d0fb      	beq.n	402b6a <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  402b72:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  402b74:	e00a      	b.n	402b8c <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402b76:	2501      	movs	r5, #1
  402b78:	e008      	b.n	402b8c <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b7a:	2505      	movs	r5, #5
  402b7c:	e006      	b.n	402b8c <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  402b7e:	2509      	movs	r5, #9
  402b80:	e004      	b.n	402b8c <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b82:	2505      	movs	r5, #5
  402b84:	e002      	b.n	402b8c <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b86:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b88:	7023      	strb	r3, [r4, #0]
  402b8a:	e7ee      	b.n	402b6a <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  402b8c:	4628      	mov	r0, r5
  402b8e:	bcf0      	pop	{r4, r5, r6, r7}
  402b90:	4770      	bx	lr
  402b92:	bf00      	nop

00402b94 <Twihs_reinit>:

void Twihs_reinit() {
  402b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b98:	b086      	sub	sp, #24
	sendDebugString("TWIHS RE-INITIALIZATION - STARTED\n");
  402b9a:	481c      	ldr	r0, [pc, #112]	; (402c0c <Twihs_reinit+0x78>)
  402b9c:	4e1c      	ldr	r6, [pc, #112]	; (402c10 <Twihs_reinit+0x7c>)
  402b9e:	47b0      	blx	r6
	pio_set_output(PIOA,1<<3 | 1<<4,LOW,DISABLE,DISABLE);
  402ba0:	4d1c      	ldr	r5, [pc, #112]	; (402c14 <Twihs_reinit+0x80>)
  402ba2:	2400      	movs	r4, #0
  402ba4:	9400      	str	r4, [sp, #0]
  402ba6:	4628      	mov	r0, r5
  402ba8:	2118      	movs	r1, #24
  402baa:	4622      	mov	r2, r4
  402bac:	4623      	mov	r3, r4
  402bae:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402c34 <Twihs_reinit+0xa0>
  402bb2:	47c0      	blx	r8
	pio_clear(PIOA,1<<3 | 1<<4);
  402bb4:	4628      	mov	r0, r5
  402bb6:	2118      	movs	r1, #24
  402bb8:	4f17      	ldr	r7, [pc, #92]	; (402c18 <Twihs_reinit+0x84>)
  402bba:	47b8      	blx	r7
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402bbc:	4628      	mov	r0, r5
  402bbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bc2:	2218      	movs	r2, #24
  402bc4:	4b15      	ldr	r3, [pc, #84]	; (402c1c <Twihs_reinit+0x88>)
  402bc6:	4798      	blx	r3
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402bc8:	9400      	str	r4, [sp, #0]
  402bca:	4628      	mov	r0, r5
  402bcc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bd0:	4622      	mov	r2, r4
  402bd2:	4623      	mov	r3, r4
  402bd4:	47c0      	blx	r8
	pio_clear(PIOA,PIO_PA26);
  402bd6:	4628      	mov	r0, r5
  402bd8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bdc:	47b8      	blx	r7
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402bde:	4810      	ldr	r0, [pc, #64]	; (402c20 <Twihs_reinit+0x8c>)
  402be0:	2380      	movs	r3, #128	; 0x80
  402be2:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_RHR;
  402be4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402be6:	2308      	movs	r3, #8
  402be8:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402bea:	2320      	movs	r3, #32
  402bec:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402bee:	2304      	movs	r3, #4
  402bf0:	6003      	str	r3, [r0, #0]
	pio_clear(PIOA,PIO_PA26);
	
	twihs_reset(TWIHS0);
	twihs_enable_master_mode(TWIHS0);
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402bf2:	4b0c      	ldr	r3, [pc, #48]	; (402c24 <Twihs_reinit+0x90>)
  402bf4:	9303      	str	r3, [sp, #12]
	twihs_opts.speed = 200000;
  402bf6:	4b0c      	ldr	r3, [pc, #48]	; (402c28 <Twihs_reinit+0x94>)
  402bf8:	9304      	str	r3, [sp, #16]
	twihs_master_init(TWIHS0,&twihs_opts);
  402bfa:	a903      	add	r1, sp, #12
  402bfc:	4b0b      	ldr	r3, [pc, #44]	; (402c2c <Twihs_reinit+0x98>)
  402bfe:	4798      	blx	r3
	sendDebugString("TWIHS RE-INITIALIZATION - FINISHED\n");
  402c00:	480b      	ldr	r0, [pc, #44]	; (402c30 <Twihs_reinit+0x9c>)
  402c02:	47b0      	blx	r6
}
  402c04:	b006      	add	sp, #24
  402c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c0a:	bf00      	nop
  402c0c:	00412e60 	.word	0x00412e60
  402c10:	0040019d 	.word	0x0040019d
  402c14:	400e0e00 	.word	0x400e0e00
  402c18:	004027c1 	.word	0x004027c1
  402c1c:	004027e1 	.word	0x004027e1
  402c20:	40018000 	.word	0x40018000
  402c24:	11e1a300 	.word	0x11e1a300
  402c28:	00030d40 	.word	0x00030d40
  402c2c:	00402aa9 	.word	0x00402aa9
  402c30:	00412e84 	.word	0x00412e84
  402c34:	004028ad 	.word	0x004028ad

00402c38 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402c38:	b570      	push	{r4, r5, r6, lr}
	uint32_t status, cnt = p_packet->length;
  402c3a:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402c3c:	688d      	ldr	r5, [r1, #8]
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
  402c3e:	2c00      	cmp	r4, #0
  402c40:	d055      	beq.n	402cee <twihs_master_write+0xb6>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402c42:	2600      	movs	r6, #0
  402c44:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c46:	7c0b      	ldrb	r3, [r1, #16]
  402c48:	041b      	lsls	r3, r3, #16
  402c4a:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402c4e:	684b      	ldr	r3, [r1, #4]
  402c50:	021b      	lsls	r3, r3, #8
  402c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c56:	4313      	orrs	r3, r2
  402c58:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402c5a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402c5c:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402c5e:	2a00      	cmp	r2, #0
  402c60:	d051      	beq.n	402d06 <twihs_master_write+0xce>
		return 0;

	val = addr[0];
  402c62:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402c64:	2a01      	cmp	r2, #1
  402c66:	dd02      	ble.n	402c6e <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  402c68:	784e      	ldrb	r6, [r1, #1]
  402c6a:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402c6e:	2a02      	cmp	r2, #2
  402c70:	dd4a      	ble.n	402d08 <twihs_master_write+0xd0>
		val <<= 8;
		val |= addr[2];
  402c72:	788a      	ldrb	r2, [r1, #2]
  402c74:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402c78:	e046      	b.n	402d08 <twihs_master_write+0xd0>
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402c7a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402c7c:	f413 7f80 	tst.w	r3, #256	; 0x100
  402c80:	d137      	bne.n	402cf2 <twihs_master_write+0xba>
			return TWIHS_RECEIVE_NACK;
		}
		timeout++;
		if(timeout > 0xFFFF) { 
  402c82:	3a01      	subs	r2, #1
  402c84:	d103      	bne.n	402c8e <twihs_master_write+0x56>
			Twihs_reinit();
  402c86:	4b25      	ldr	r3, [pc, #148]	; (402d1c <twihs_master_write+0xe4>)
  402c88:	4798      	blx	r3
			return TWIHS_RECEIVE_NACK;
  402c8a:	2105      	movs	r1, #5
  402c8c:	e044      	b.n	402d18 <twihs_master_write+0xe0>
		}
		if (!(status & TWIHS_SR_TXRDY)) {
  402c8e:	f013 0f04 	tst.w	r3, #4
  402c92:	d003      	beq.n	402c9c <twihs_master_write+0x64>
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402c94:	782b      	ldrb	r3, [r5, #0]
  402c96:	6343      	str	r3, [r0, #52]	; 0x34

		cnt--;
  402c98:	3c01      	subs	r4, #1
		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402c9a:	3501      	adds	r5, #1
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  402c9c:	2c00      	cmp	r4, #0
  402c9e:	d1ec      	bne.n	402c7a <twihs_master_write+0x42>

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402ca0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402ca2:	f413 7480 	ands.w	r4, r3, #256	; 0x100
  402ca6:	d126      	bne.n	402cf6 <twihs_master_write+0xbe>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402ca8:	f013 0f04 	tst.w	r3, #4
  402cac:	d10e      	bne.n	402ccc <twihs_master_write+0x94>
  402cae:	2300      	movs	r3, #0
		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402cb4:	e002      	b.n	402cbc <twihs_master_write+0x84>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402cb6:	f012 0f04 	tst.w	r2, #4
  402cba:	d107      	bne.n	402ccc <twihs_master_write+0x94>
			break;
		}
		timeout++;
  402cbc:	3301      	adds	r3, #1

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402cbe:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cc0:	f412 7f80 	tst.w	r2, #256	; 0x100
  402cc4:	d119      	bne.n	402cfa <twihs_master_write+0xc2>
  402cc6:	428b      	cmp	r3, r1
  402cc8:	d9f5      	bls.n	402cb6 <twihs_master_write+0x7e>
  402cca:	e016      	b.n	402cfa <twihs_master_write+0xc2>
			break;
		}
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402ccc:	2302      	movs	r3, #2
  402cce:	6003      	str	r3, [r0, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cd0:	6a01      	ldr	r1, [r0, #32]
  402cd2:	f011 0101 	ands.w	r1, r1, #1
  402cd6:	d112      	bne.n	402cfe <twihs_master_write+0xc6>
  402cd8:	2300      	movs	r3, #0
  402cda:	f64f 74fe 	movw	r4, #65534	; 0xfffe
		timeout++;
  402cde:	3301      	adds	r3, #1
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402ce0:	6a02      	ldr	r2, [r0, #32]
  402ce2:	f012 0f01 	tst.w	r2, #1
  402ce6:	d117      	bne.n	402d18 <twihs_master_write+0xe0>
  402ce8:	42a3      	cmp	r3, r4
  402cea:	d9f8      	bls.n	402cde <twihs_master_write+0xa6>
  402cec:	e014      	b.n	402d18 <twihs_master_write+0xe0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402cee:	2101      	movs	r1, #1
  402cf0:	e012      	b.n	402d18 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402cf2:	2105      	movs	r1, #5
  402cf4:	e010      	b.n	402d18 <twihs_master_write+0xe0>
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
			return TWIHS_RECEIVE_NACK;
  402cf6:	2105      	movs	r1, #5
  402cf8:	e00e      	b.n	402d18 <twihs_master_write+0xe0>
  402cfa:	2105      	movs	r1, #5
  402cfc:	e00c      	b.n	402d18 <twihs_master_write+0xe0>

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
  402cfe:	4621      	mov	r1, r4
  402d00:	e00a      	b.n	402d18 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402d02:	2105      	movs	r1, #5
  402d04:	e008      	b.n	402d18 <twihs_master_write+0xe0>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402d06:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402d08:	60c3      	str	r3, [r0, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402d0a:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402d0c:	f413 7f80 	tst.w	r3, #256	; 0x100
  402d10:	d1f7      	bne.n	402d02 <twihs_master_write+0xca>
  402d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d16:	e7ba      	b.n	402c8e <twihs_master_write+0x56>
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
}
  402d18:	4608      	mov	r0, r1
  402d1a:	bd70      	pop	{r4, r5, r6, pc}
  402d1c:	00402b95 	.word	0x00402b95

00402d20 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402d20:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402d22:	23ac      	movs	r3, #172	; 0xac
  402d24:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402d26:	680b      	ldr	r3, [r1, #0]
  402d28:	684a      	ldr	r2, [r1, #4]
  402d2a:	fbb3 f3f2 	udiv	r3, r3, r2
  402d2e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402d30:	1e5c      	subs	r4, r3, #1
  402d32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402d36:	4294      	cmp	r4, r2
  402d38:	d806      	bhi.n	402d48 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402d3a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402d3c:	688b      	ldr	r3, [r1, #8]
  402d3e:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d40:	2350      	movs	r3, #80	; 0x50
  402d42:	6003      	str	r3, [r0, #0]

	return 0;
  402d44:	2000      	movs	r0, #0
  402d46:	e000      	b.n	402d4a <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402d48:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d4e:	4770      	bx	lr

00402d50 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402d50:	2340      	movs	r3, #64	; 0x40
  402d52:	6003      	str	r3, [r0, #0]
  402d54:	4770      	bx	lr
  402d56:	bf00      	nop

00402d58 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402d58:	2310      	movs	r3, #16
  402d5a:	6003      	str	r3, [r0, #0]
  402d5c:	4770      	bx	lr
  402d5e:	bf00      	nop

00402d60 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d60:	2350      	movs	r3, #80	; 0x50
  402d62:	6003      	str	r3, [r0, #0]
  402d64:	4770      	bx	lr
  402d66:	bf00      	nop

00402d68 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402d68:	6081      	str	r1, [r0, #8]
  402d6a:	4770      	bx	lr

00402d6c <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402d6c:	6940      	ldr	r0, [r0, #20]
}
  402d6e:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402d72:	4770      	bx	lr

00402d74 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402d74:	6201      	str	r1, [r0, #32]
  402d76:	4770      	bx	lr

00402d78 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402d78:	6943      	ldr	r3, [r0, #20]
  402d7a:	f013 0f02 	tst.w	r3, #2
  402d7e:	d002      	beq.n	402d86 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402d80:	61c1      	str	r1, [r0, #28]
	return 0;
  402d82:	2000      	movs	r0, #0
  402d84:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402d86:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402d88:	4770      	bx	lr
  402d8a:	bf00      	nop

00402d8c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402d8c:	6943      	ldr	r3, [r0, #20]
  402d8e:	f013 0f01 	tst.w	r3, #1
  402d92:	d003      	beq.n	402d9c <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402d94:	6983      	ldr	r3, [r0, #24]
  402d96:	700b      	strb	r3, [r1, #0]
	return 0;
  402d98:	2000      	movs	r0, #0
  402d9a:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402d9c:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402d9e:	4770      	bx	lr

00402da0 <board_init>:
#define USART_SERIAL_PARITY          US_MR_PAR_NO
#define USART_SERIAL_STOP_BIT        US_MR_NBSTOP_1_BIT


void board_init(void)
{
  402da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402da4:	b09f      	sub	sp, #124	; 0x7c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402da6:	48a9      	ldr	r0, [pc, #676]	; (40304c <board_init+0x2ac>)
  402da8:	2100      	movs	r1, #0
  402daa:	4ba9      	ldr	r3, [pc, #676]	; (403050 <board_init+0x2b0>)
  402dac:	4798      	blx	r3
	sysclk_init();
  402dae:	4ba9      	ldr	r3, [pc, #676]	; (403054 <board_init+0x2b4>)
  402db0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402db2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402db6:	b672      	cpsid	i
  402db8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402dbc:	2100      	movs	r1, #0
  402dbe:	4aa6      	ldr	r2, [pc, #664]	; (403058 <board_init+0x2b8>)
  402dc0:	7011      	strb	r1, [r2, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402dc2:	49a6      	ldr	r1, [pc, #664]	; (40305c <board_init+0x2bc>)
  402dc4:	680a      	ldr	r2, [r1, #0]
  402dc6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  402dca:	600a      	str	r2, [r1, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402dcc:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402dd0:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402dd4:	b92b      	cbnz	r3, 402de2 <board_init+0x42>
		cpu_irq_enable();
  402dd6:	2201      	movs	r2, #1
  402dd8:	4b9f      	ldr	r3, [pc, #636]	; (403058 <board_init+0x2b8>)
  402dda:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402ddc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402de0:	b662      	cpsie	i
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402de2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 403100 <board_init+0x360>
  402de6:	ad1b      	add	r5, sp, #108	; 0x6c
  402de8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402dec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402df0:	202e      	movs	r0, #46	; 0x2e
  402df2:	f8df 8310 	ldr.w	r8, [pc, #784]	; 403104 <board_init+0x364>
  402df6:	47c0      	blx	r8
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  402df8:	202e      	movs	r0, #46	; 0x2e
  402dfa:	47c0      	blx	r8
	uart_init(USART_SERIAL, &usart_console_settings);
  402dfc:	4c98      	ldr	r4, [pc, #608]	; (403060 <board_init+0x2c0>)
  402dfe:	4620      	mov	r0, r4
  402e00:	4629      	mov	r1, r5
  402e02:	4b98      	ldr	r3, [pc, #608]	; (403064 <board_init+0x2c4>)
  402e04:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  402e06:	4620      	mov	r0, r4
  402e08:	4b97      	ldr	r3, [pc, #604]	; (403068 <board_init+0x2c8>)
  402e0a:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  402e0c:	4620      	mov	r0, r4
  402e0e:	4b97      	ldr	r3, [pc, #604]	; (40306c <board_init+0x2cc>)
  402e10:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  402e12:	4620      	mov	r0, r4
  402e14:	4b96      	ldr	r3, [pc, #600]	; (403070 <board_init+0x2d0>)
  402e16:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(1000));
  402e18:	4620      	mov	r0, r4
  402e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402e1e:	4b95      	ldr	r3, [pc, #596]	; (403074 <board_init+0x2d4>)
  402e20:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  402e22:	2010      	movs	r0, #16
  402e24:	47c0      	blx	r8
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  402e26:	4894      	ldr	r0, [pc, #592]	; (403078 <board_init+0x2d8>)
  402e28:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402e2c:	4a93      	ldr	r2, [pc, #588]	; (40307c <board_init+0x2dc>)
  402e2e:	4e94      	ldr	r6, [pc, #592]	; (403080 <board_init+0x2e0>)
  402e30:	47b0      	blx	r6
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  402e32:	4894      	ldr	r0, [pc, #592]	; (403084 <board_init+0x2e4>)
  402e34:	4d94      	ldr	r5, [pc, #592]	; (403088 <board_init+0x2e8>)
  402e36:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	sendDebugString("LED INITIALIZATION - STARTED\n");
  402e38:	4894      	ldr	r0, [pc, #592]	; (40308c <board_init+0x2ec>)
  402e3a:	47a8      	blx	r5
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  402e3c:	4894      	ldr	r0, [pc, #592]	; (403090 <board_init+0x2f0>)
  402e3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402e46:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
  402e48:	200a      	movs	r0, #10
  402e4a:	47c0      	blx	r8
		pmc_enable_periph_clk(ID_PIOB);
  402e4c:	200b      	movs	r0, #11
  402e4e:	47c0      	blx	r8
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  402e50:	2400      	movs	r4, #0
  402e52:	9400      	str	r4, [sp, #0]
  402e54:	488f      	ldr	r0, [pc, #572]	; (403094 <board_init+0x2f4>)
  402e56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e5a:	4622      	mov	r2, r4
  402e5c:	4623      	mov	r3, r4
  402e5e:	4f8e      	ldr	r7, [pc, #568]	; (403098 <board_init+0x2f8>)
  402e60:	47b8      	blx	r7
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402e62:	9400      	str	r4, [sp, #0]
  402e64:	488b      	ldr	r0, [pc, #556]	; (403094 <board_init+0x2f4>)
  402e66:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e6a:	4622      	mov	r2, r4
  402e6c:	4623      	mov	r3, r4
  402e6e:	47b8      	blx	r7
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  402e70:	9400      	str	r4, [sp, #0]
  402e72:	4888      	ldr	r0, [pc, #544]	; (403094 <board_init+0x2f4>)
  402e74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e78:	4622      	mov	r2, r4
  402e7a:	4623      	mov	r3, r4
  402e7c:	47b8      	blx	r7
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  402e7e:	9400      	str	r4, [sp, #0]
  402e80:	4884      	ldr	r0, [pc, #528]	; (403094 <board_init+0x2f4>)
  402e82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402e86:	4622      	mov	r2, r4
  402e88:	4623      	mov	r3, r4
  402e8a:	47b8      	blx	r7
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402e8c:	9400      	str	r4, [sp, #0]
  402e8e:	4880      	ldr	r0, [pc, #512]	; (403090 <board_init+0x2f0>)
  402e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e94:	4622      	mov	r2, r4
  402e96:	4623      	mov	r3, r4
  402e98:	47b8      	blx	r7
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402e9a:	9400      	str	r4, [sp, #0]
  402e9c:	487d      	ldr	r0, [pc, #500]	; (403094 <board_init+0x2f4>)
  402e9e:	2104      	movs	r1, #4
  402ea0:	4622      	mov	r2, r4
  402ea2:	4623      	mov	r3, r4
  402ea4:	47b8      	blx	r7
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402ea6:	9400      	str	r4, [sp, #0]
  402ea8:	487a      	ldr	r0, [pc, #488]	; (403094 <board_init+0x2f4>)
  402eaa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402eae:	4622      	mov	r2, r4
  402eb0:	4623      	mov	r3, r4
  402eb2:	47b8      	blx	r7
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402eb4:	9400      	str	r4, [sp, #0]
  402eb6:	4877      	ldr	r0, [pc, #476]	; (403094 <board_init+0x2f4>)
  402eb8:	2140      	movs	r1, #64	; 0x40
  402eba:	4622      	mov	r2, r4
  402ebc:	4623      	mov	r3, r4
  402ebe:	47b8      	blx	r7
		
		sendDebugString("LED INITIALIZATION - FINISHED\n");
  402ec0:	4876      	ldr	r0, [pc, #472]	; (40309c <board_init+0x2fc>)
  402ec2:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402ec4:	4876      	ldr	r0, [pc, #472]	; (4030a0 <board_init+0x300>)
  402ec6:	47a8      	blx	r5
		wdt_disable(WDT);
  402ec8:	4876      	ldr	r0, [pc, #472]	; (4030a4 <board_init+0x304>)
  402eca:	4b77      	ldr	r3, [pc, #476]	; (4030a8 <board_init+0x308>)
  402ecc:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402ece:	4877      	ldr	r0, [pc, #476]	; (4030ac <board_init+0x30c>)
  402ed0:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402ed2:	4877      	ldr	r0, [pc, #476]	; (4030b0 <board_init+0x310>)
  402ed4:	47a8      	blx	r5
		cpu_irq_enable();
  402ed6:	4b60      	ldr	r3, [pc, #384]	; (403058 <board_init+0x2b8>)
  402ed8:	f04f 0201 	mov.w	r2, #1
  402edc:	701a      	strb	r2, [r3, #0]
  402ede:	f3bf 8f5f 	dmb	sy
  402ee2:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402ee4:	4873      	ldr	r0, [pc, #460]	; (4030b4 <board_init+0x314>)
  402ee6:	47a8      	blx	r5
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("SDRAM INITIALIZATION - STARTED\n");
  402ee8:	4873      	ldr	r0, [pc, #460]	; (4030b8 <board_init+0x318>)
  402eea:	47a8      	blx	r5
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  402eec:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  402ef0:	f109 090c 	add.w	r9, r9, #12
  402ef4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402ef8:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(8)		|
			SDRAMC_CR_TXSR(12)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  402efc:	203e      	movs	r0, #62	; 0x3e
  402efe:	47c0      	blx	r8
	
	pmc_enable_periph_clk(ID_PIOC);
  402f00:	200c      	movs	r0, #12
  402f02:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOD);
  402f04:	2010      	movs	r0, #16
  402f06:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOE);
  402f08:	2011      	movs	r0, #17
  402f0a:	47c0      	blx	r8
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  402f0c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 403108 <board_init+0x368>
  402f10:	486a      	ldr	r0, [pc, #424]	; (4030bc <board_init+0x31c>)
  402f12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f16:	464a      	mov	r2, r9
  402f18:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  402f1a:	4868      	ldr	r0, [pc, #416]	; (4030bc <board_init+0x31c>)
  402f1c:	4649      	mov	r1, r9
  402f1e:	2201      	movs	r2, #1
  402f20:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 40310c <board_init+0x36c>
  402f24:	47d8      	blx	fp
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  402f26:	4865      	ldr	r0, [pc, #404]	; (4030bc <board_init+0x31c>)
  402f28:	4965      	ldr	r1, [pc, #404]	; (4030c0 <board_init+0x320>)
  402f2a:	4622      	mov	r2, r4
  402f2c:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 403110 <board_init+0x370>
  402f30:	47c8      	blx	r9
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402f32:	4858      	ldr	r0, [pc, #352]	; (403094 <board_init+0x2f4>)
  402f34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f38:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402f3c:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  402f3e:	4855      	ldr	r0, [pc, #340]	; (403094 <board_init+0x2f4>)
  402f40:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f44:	4622      	mov	r2, r4
  402f46:	47d8      	blx	fp
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  402f48:	4852      	ldr	r0, [pc, #328]	; (403094 <board_init+0x2f4>)
  402f4a:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f4e:	2201      	movs	r2, #1
  402f50:	47c8      	blx	r9
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  402f52:	4850      	ldr	r0, [pc, #320]	; (403094 <board_init+0x2f4>)
  402f54:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f58:	4a5a      	ldr	r2, [pc, #360]	; (4030c4 <board_init+0x324>)
  402f5a:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402f5c:	484d      	ldr	r0, [pc, #308]	; (403094 <board_init+0x2f4>)
  402f5e:	4959      	ldr	r1, [pc, #356]	; (4030c4 <board_init+0x324>)
  402f60:	2201      	movs	r2, #1
  402f62:	47d8      	blx	fp
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402f64:	484b      	ldr	r0, [pc, #300]	; (403094 <board_init+0x2f4>)
  402f66:	4957      	ldr	r1, [pc, #348]	; (4030c4 <board_init+0x324>)
  402f68:	4622      	mov	r2, r4
  402f6a:	47c8      	blx	r9
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402f6c:	4842      	ldr	r0, [pc, #264]	; (403078 <board_init+0x2d8>)
  402f6e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f72:	4a55      	ldr	r2, [pc, #340]	; (4030c8 <board_init+0x328>)
  402f74:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402f76:	4840      	ldr	r0, [pc, #256]	; (403078 <board_init+0x2d8>)
  402f78:	4953      	ldr	r1, [pc, #332]	; (4030c8 <board_init+0x328>)
  402f7a:	2201      	movs	r2, #1
  402f7c:	47d8      	blx	fp
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402f7e:	483e      	ldr	r0, [pc, #248]	; (403078 <board_init+0x2d8>)
  402f80:	4951      	ldr	r1, [pc, #324]	; (4030c8 <board_init+0x328>)
  402f82:	4622      	mov	r2, r4
  402f84:	47c8      	blx	r9
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402f86:	4851      	ldr	r0, [pc, #324]	; (4030cc <board_init+0x32c>)
  402f88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f8c:	223f      	movs	r2, #63	; 0x3f
  402f8e:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402f90:	484e      	ldr	r0, [pc, #312]	; (4030cc <board_init+0x32c>)
  402f92:	213f      	movs	r1, #63	; 0x3f
  402f94:	2201      	movs	r2, #1
  402f96:	47d8      	blx	fp
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402f98:	484c      	ldr	r0, [pc, #304]	; (4030cc <board_init+0x32c>)
  402f9a:	213f      	movs	r1, #63	; 0x3f
  402f9c:	4622      	mov	r2, r4
  402f9e:	47c8      	blx	r9
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402fa0:	4a4b      	ldr	r2, [pc, #300]	; (4030d0 <board_init+0x330>)
  402fa2:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402fa6:	f043 0310 	orr.w	r3, r3, #16
  402faa:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402fae:	4843      	ldr	r0, [pc, #268]	; (4030bc <board_init+0x31c>)
  402fb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402fb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402fb8:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402fba:	4650      	mov	r0, sl
  402fbc:	4945      	ldr	r1, [pc, #276]	; (4030d4 <board_init+0x334>)
  402fbe:	4b46      	ldr	r3, [pc, #280]	; (4030d8 <board_init+0x338>)
  402fc0:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402fc2:	4846      	ldr	r0, [pc, #280]	; (4030dc <board_init+0x33c>)
  402fc4:	47a8      	blx	r5
	//checkSDRAM
	//SdramCheck();
	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402fc6:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  402fca:	4621      	mov	r1, r4
  402fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402fd0:	4b43      	ldr	r3, [pc, #268]	; (4030e0 <board_init+0x340>)
  402fd2:	4798      	blx	r3
	sendDebugString("SDRAM INITIALIZATION - FINISHED\n");
  402fd4:	4843      	ldr	r0, [pc, #268]	; (4030e4 <board_init+0x344>)
  402fd6:	47a8      	blx	r5
	/* ######################################
	   ######################################
					 Setup i2c
	   ######################################
	   ###################################### */
	sendDebugString("TWIHS INITIALIZATION - STARTED\n");
  402fd8:	4843      	ldr	r0, [pc, #268]	; (4030e8 <board_init+0x348>)
  402fda:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402fdc:	9400      	str	r4, [sp, #0]
  402fde:	4826      	ldr	r0, [pc, #152]	; (403078 <board_init+0x2d8>)
  402fe0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fe4:	4622      	mov	r2, r4
  402fe6:	4623      	mov	r3, r4
  402fe8:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402fea:	4823      	ldr	r0, [pc, #140]	; (403078 <board_init+0x2d8>)
  402fec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ff0:	f8df a120 	ldr.w	sl, [pc, #288]	; 403114 <board_init+0x374>
  402ff4:	47d0      	blx	sl
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402ff6:	9400      	str	r4, [sp, #0]
  402ff8:	4826      	ldr	r0, [pc, #152]	; (403094 <board_init+0x2f4>)
  402ffa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ffe:	4622      	mov	r2, r4
  403000:	4623      	mov	r3, r4
  403002:	47b8      	blx	r7
	pio_clear(PIOA,PIO_PA26);
  403004:	4823      	ldr	r0, [pc, #140]	; (403094 <board_init+0x2f4>)
  403006:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40300a:	4b38      	ldr	r3, [pc, #224]	; (4030ec <board_init+0x34c>)
  40300c:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TWIHS0);
  40300e:	2013      	movs	r0, #19
  403010:	47c0      	blx	r8
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  403012:	4820      	ldr	r0, [pc, #128]	; (403094 <board_init+0x2f4>)
  403014:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403018:	2218      	movs	r2, #24
  40301a:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  40301c:	9400      	str	r4, [sp, #0]
  40301e:	4816      	ldr	r0, [pc, #88]	; (403078 <board_init+0x2d8>)
  403020:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403024:	4622      	mov	r2, r4
  403026:	4623      	mov	r3, r4
  403028:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  40302a:	4813      	ldr	r0, [pc, #76]	; (403078 <board_init+0x2d8>)
  40302c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403030:	47d0      	blx	sl
	
	Twihs_reinit();
  403032:	4b2f      	ldr	r3, [pc, #188]	; (4030f0 <board_init+0x350>)
  403034:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS0);
	//twihs_options_t twihs_opts;
	//twihs_opts.master_clk = sysclk_get_cpu_hz();
	//twihs_opts.speed = 200000;
	//twihs_master_init(TWIHS0,&twihs_opts);
	sendDebugString("TWIHS INITIALIZATION - FINISHED\n");
  403036:	482f      	ldr	r0, [pc, #188]	; (4030f4 <board_init+0x354>)
  403038:	47a8      	blx	r5
	/* ######################################
	   ######################################
				 Setup Servo Driver
	   ######################################
	   ###################################### */
	sendDebugString("SERVO DRIVER INITIALIZATION - STARTED\n");
  40303a:	482f      	ldr	r0, [pc, #188]	; (4030f8 <board_init+0x358>)
  40303c:	47a8      	blx	r5
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  40303e:	2040      	movs	r0, #64	; 0x40
  403040:	4b2e      	ldr	r3, [pc, #184]	; (4030fc <board_init+0x35c>)
  403042:	4798      	blx	r3
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  403044:	2041      	movs	r0, #65	; 0x41
  403046:	4b2d      	ldr	r3, [pc, #180]	; (4030fc <board_init+0x35c>)
  403048:	4798      	blx	r3
  40304a:	e065      	b.n	403118 <board_init+0x378>
  40304c:	400e1810 	.word	0x400e1810
  403050:	00400a65 	.word	0x00400a65
  403054:	00402741 	.word	0x00402741
  403058:	20400010 	.word	0x20400010
  40305c:	e000ed88 	.word	0xe000ed88
  403060:	400e1e00 	.word	0x400e1e00
  403064:	00402d21 	.word	0x00402d21
  403068:	00402d61 	.word	0x00402d61
  40306c:	00402d51 	.word	0x00402d51
  403070:	00402d59 	.word	0x00402d59
  403074:	00402d75 	.word	0x00402d75
  403078:	400e1400 	.word	0x400e1400
  40307c:	00040008 	.word	0x00040008
  403080:	004027e1 	.word	0x004027e1
  403084:	00412ec0 	.word	0x00412ec0
  403088:	0040019d 	.word	0x0040019d
  40308c:	00412f24 	.word	0x00412f24
  403090:	400e1000 	.word	0x400e1000
  403094:	400e0e00 	.word	0x400e0e00
  403098:	004028ad 	.word	0x004028ad
  40309c:	00412f44 	.word	0x00412f44
  4030a0:	00412f64 	.word	0x00412f64
  4030a4:	400e1850 	.word	0x400e1850
  4030a8:	00400a91 	.word	0x00400a91
  4030ac:	00412f88 	.word	0x00412f88
  4030b0:	00412fac 	.word	0x00412fac
  4030b4:	00412fd4 	.word	0x00412fd4
  4030b8:	00412ffc 	.word	0x00412ffc
  4030bc:	400e1200 	.word	0x400e1200
  4030c0:	fffc80ff 	.word	0xfffc80ff
  4030c4:	001c0001 	.word	0x001c0001
  4030c8:	2083e000 	.word	0x2083e000
  4030cc:	400e1600 	.word	0x400e1600
  4030d0:	40088000 	.word	0x40088000
  4030d4:	11e1a300 	.word	0x11e1a300
  4030d8:	00400929 	.word	0x00400929
  4030dc:	0041301c 	.word	0x0041301c
  4030e0:	0040b91d 	.word	0x0040b91d
  4030e4:	00413038 	.word	0x00413038
  4030e8:	0041305c 	.word	0x0041305c
  4030ec:	004027c1 	.word	0x004027c1
  4030f0:	00402b95 	.word	0x00402b95
  4030f4:	0041307c 	.word	0x0041307c
  4030f8:	004130a0 	.word	0x004130a0
  4030fc:	00405185 	.word	0x00405185
  403100:	00412ea8 	.word	0x00412ea8
  403104:	00402a11 	.word	0x00402a11
  403108:	fffc00ff 	.word	0xfffc00ff
  40310c:	004028d5 	.word	0x004028d5
  403110:	004027b1 	.word	0x004027b1
  403114:	004027bd 	.word	0x004027bd
	sendDebugString("SERVO DRIVER INITIALIZATION - FINISHED\n");
  403118:	48ac      	ldr	r0, [pc, #688]	; (4033cc <board_init+0x62c>)
  40311a:	47a8      	blx	r5
	   ######################################
			 		Setup Camera
	   ######################################
	   ###################################### */

	sendDebugString("CAMERA INITIALIZATION - STARTED\n");
  40311c:	48ac      	ldr	r0, [pc, #688]	; (4033d0 <board_init+0x630>)
  40311e:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  403120:	9400      	str	r4, [sp, #0]
  403122:	48ac      	ldr	r0, [pc, #688]	; (4033d4 <board_init+0x634>)
  403124:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403128:	4622      	mov	r2, r4
  40312a:	4623      	mov	r3, r4
  40312c:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD10);
  40312e:	48a9      	ldr	r0, [pc, #676]	; (4033d4 <board_init+0x634>)
  403130:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403134:	47d0      	blx	sl
	delay_ms(10);
  403136:	48a8      	ldr	r0, [pc, #672]	; (4033d8 <board_init+0x638>)
  403138:	4ba8      	ldr	r3, [pc, #672]	; (4033dc <board_init+0x63c>)
  40313a:	4798      	blx	r3
	//pio_clear(PIOD,PIO_PD10);
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  40313c:	4da8      	ldr	r5, [pc, #672]	; (4033e0 <board_init+0x640>)
  40313e:	48a5      	ldr	r0, [pc, #660]	; (4033d4 <board_init+0x634>)
  403140:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403144:	462a      	mov	r2, r5
  403146:	47b0      	blx	r6
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	
	pio_pull_up(PIOD,
  403148:	48a2      	ldr	r0, [pc, #648]	; (4033d4 <board_init+0x634>)
  40314a:	4629      	mov	r1, r5
  40314c:	4622      	mov	r2, r4
  40314e:	47c8      	blx	r9
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_pull_down(PIOD,
  403150:	48a0      	ldr	r0, [pc, #640]	; (4033d4 <board_init+0x634>)
  403152:	4629      	mov	r1, r5
  403154:	2201      	movs	r2, #1
  403156:	47d8      	blx	fp
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,1);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  403158:	48a2      	ldr	r0, [pc, #648]	; (4033e4 <board_init+0x644>)
  40315a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40315e:	2208      	movs	r2, #8
  403160:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  403162:	48a0      	ldr	r0, [pc, #640]	; (4033e4 <board_init+0x644>)
  403164:	2108      	movs	r1, #8
  403166:	4622      	mov	r2, r4
  403168:	47c8      	blx	r9
	pio_pull_down(PIOB,1<<3,1);
  40316a:	489e      	ldr	r0, [pc, #632]	; (4033e4 <board_init+0x644>)
  40316c:	2108      	movs	r1, #8
  40316e:	2201      	movs	r2, #1
  403170:	47d8      	blx	fp
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  403172:	489d      	ldr	r0, [pc, #628]	; (4033e8 <board_init+0x648>)
  403174:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403178:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  40317c:	47b0      	blx	r6
	1<<27	|
	1<<24	);
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_B,
  40317e:	489a      	ldr	r0, [pc, #616]	; (4033e8 <board_init+0x648>)
  403180:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403184:	f44f 7208 	mov.w	r2, #544	; 0x220
  403188:	47b0      	blx	r6
		1<<9	|
		1<<5	);
	
	pio_pull_up(PIOA,
  40318a:	4d98      	ldr	r5, [pc, #608]	; (4033ec <board_init+0x64c>)
  40318c:	4896      	ldr	r0, [pc, #600]	; (4033e8 <board_init+0x648>)
  40318e:	4629      	mov	r1, r5
  403190:	4622      	mov	r2, r4
  403192:	47c8      	blx	r9
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pio_pull_down(PIOA,
  403194:	4894      	ldr	r0, [pc, #592]	; (4033e8 <board_init+0x648>)
  403196:	4629      	mov	r1, r5
  403198:	2201      	movs	r2, #1
  40319a:	47d8      	blx	fp
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,1);
	
	pmc_enable_periph_clk(ID_ISI);
  40319c:	203b      	movs	r0, #59	; 0x3b
  40319e:	47c0      	blx	r8
	
	//set camera to 640x480
	//SetupCameraYUVVGA();
	SetupCameraYUVVGA_OV7670();
  4031a0:	4b93      	ldr	r3, [pc, #588]	; (4033f0 <board_init+0x650>)
  4031a2:	4798      	blx	r3
 */
static inline void isi_reset(Isi *p_isi)
{
	/* Resets the image sensor interface.
	   Finish capturing the current frame and then shut down the module. */
	p_isi->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  4031a4:	2206      	movs	r2, #6
  4031a6:	4b93      	ldr	r3, [pc, #588]	; (4033f4 <board_init+0x654>)
  4031a8:	625a      	str	r2, [r3, #36]	; 0x24
	/* wait Software reset has completed successfully. */
	while((p_isi->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST);
  4031aa:	461a      	mov	r2, r3
  4031ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4031ae:	f013 0f04 	tst.w	r3, #4
  4031b2:	d0fb      	beq.n	4031ac <board_init+0x40c>
	//Optional Test Mode
	//write_SCCB(0x8D,1<<4);
	isi_reset(ISI);
	
	struct isi_config_t isiConf;
	isiConf.hpol = 1;
  4031b4:	2601      	movs	r6, #1
  4031b6:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
	isiConf.vpol = 1;
  4031ba:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
	isiConf.pck_plo = 0;
  4031be:	2500      	movs	r5, #0
  4031c0:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
	isiConf.emb_sync = 0;
  4031c4:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	isiConf.crc_sync = 0;
  4031c8:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	isiConf.sld = 1;
  4031cc:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
	isiConf.sfd =0;
  4031d0:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
	isiConf.image_fmt = ISI_INPUT_YUV;
  4031d4:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	isiConf.image_hsize = 640;
  4031d8:	f44f 7820 	mov.w	r8, #640	; 0x280
  4031dc:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	isiConf.image_vsize = 480;
  4031e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4031e4:	9317      	str	r3, [sp, #92]	; 0x5c
	isiConf.thmask = 2;
  4031e6:	2302      	movs	r3, #2
  4031e8:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
	

	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  4031ec:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4031f0:	4620      	mov	r0, r4
  4031f2:	4629      	mov	r1, r5
  4031f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4031f8:	4b7f      	ldr	r3, [pc, #508]	; (4033f8 <board_init+0x658>)
  4031fa:	4798      	blx	r3
	struct isi_frame_buffer_descriptors* isiFBD0 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  4031fc:	200c      	movs	r0, #12
  4031fe:	f8df 925c 	ldr.w	r9, [pc, #604]	; 40345c <board_init+0x6bc>
  403202:	47c8      	blx	r9
  403204:	4607      	mov	r7, r0
	struct isi_frame_buffer_descriptors* isiFBD1 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  403206:	200c      	movs	r0, #12
  403208:	47c8      	blx	r9
	
	isiFBD0->next = isiFBD1;
  40320a:	60b8      	str	r0, [r7, #8]
	isiFBD0->current =CAM_FRAME0_ADDR;
  40320c:	603c      	str	r4, [r7, #0]
	isiFBD0->control =0x1;
  40320e:	607e      	str	r6, [r7, #4]
	
	isiFBD1->next = isiFBD0;
  403210:	6087      	str	r7, [r0, #8]
	isiFBD1->current =CAM_FRAME0_ADDR;
  403212:	6004      	str	r4, [r0, #0]
	isiFBD1->control =0x1;
  403214:	6046      	str	r6, [r0, #4]
	
	isi_init(ISI,&isiConf);
  403216:	4c77      	ldr	r4, [pc, #476]	; (4033f4 <board_init+0x654>)
  403218:	4620      	mov	r0, r4
  40321a:	a913      	add	r1, sp, #76	; 0x4c
  40321c:	4b77      	ldr	r3, [pc, #476]	; (4033fc <board_init+0x65c>)
  40321e:	4798      	blx	r3
	//isi_set_dma_codec_path(ISI,0,1,0,0,0);
	//ISI->ISI_PDECF = 2*16;
	isi_set_dma_preview_path(ISI,0,isiFBD0,0x01,isiFBD0->current);
  403220:	683b      	ldr	r3, [r7, #0]
  403222:	9300      	str	r3, [sp, #0]
  403224:	4620      	mov	r0, r4
  403226:	4629      	mov	r1, r5
  403228:	463a      	mov	r2, r7
  40322a:	4633      	mov	r3, r6
  40322c:	4d74      	ldr	r5, [pc, #464]	; (403400 <board_init+0x660>)
  40322e:	47a8      	blx	r5
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  403230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403232:	4333      	orrs	r3, r6
  403234:	63a3      	str	r3, [r4, #56]	; 0x38
	isi_dma_channel_enable(ISI,1);
	
	isi_size_configure(ISI,640,640,320,320);
  403236:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40323a:	9300      	str	r3, [sp, #0]
  40323c:	4620      	mov	r0, r4
  40323e:	4641      	mov	r1, r8
  403240:	4642      	mov	r2, r8
  403242:	4d70      	ldr	r5, [pc, #448]	; (403404 <board_init+0x664>)
  403244:	47a8      	blx	r5
	ISI->ISI_CFG2 = ISI->ISI_CFG2 | ISI_CFG2_YCC_SWAP_MODE1;
  403246:	6863      	ldr	r3, [r4, #4]
  403248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  40324c:	6063      	str	r3, [r4, #4]
 *
 * \param p_isi  Pointer to a ISI instance.
 */
static inline void isi_enable(Isi *p_isi)
{
	p_isi->ISI_CR |= ISI_CR_ISI_EN;
  40324e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403250:	4333      	orrs	r3, r6
  403252:	6263      	str	r3, [r4, #36]	; 0x24
	while((p_isi->ISI_SR & ISI_CR_ISI_EN) != ISI_CR_ISI_EN);
  403254:	4622      	mov	r2, r4
  403256:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403258:	f013 0f01 	tst.w	r3, #1
  40325c:	d0fb      	beq.n	403256 <board_init+0x4b6>
	//ISI->ISI_PDECF = 32;
	isi_enable(ISI);
	sendDebugString("CAMERA INITIALIZATION - FINISHED\n");
  40325e:	486a      	ldr	r0, [pc, #424]	; (403408 <board_init+0x668>)
  403260:	4c6a      	ldr	r4, [pc, #424]	; (40340c <board_init+0x66c>)
  403262:	47a0      	blx	r4
	   ######################################
			 	Setup Wireless Module
	   ######################################
	   ###################################### */
	
		sendDebugString("QSPI INITIALIZATION - STARTED\n");
  403264:	486a      	ldr	r0, [pc, #424]	; (403410 <board_init+0x670>)
  403266:	47a0      	blx	r4
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  403268:	2300      	movs	r3, #0
  40326a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	    qspiConf.loopback_en = 0;
  40326e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	    qspiConf.wait_data_for_transfer = 0;
  403272:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	    qspiConf.csmode = 0;
  403276:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  40327a:	930a      	str	r3, [sp, #40]	; 0x28
	    qspiConf.baudrate = 16000000;
  40327c:	4a65      	ldr	r2, [pc, #404]	; (403414 <board_init+0x674>)
  40327e:	920f      	str	r2, [sp, #60]	; 0x3c
		qspiConf.min_delay_qcs = 4;
  403280:	2204      	movs	r2, #4
  403282:	920b      	str	r2, [sp, #44]	; 0x2c
		qspiConf.delay_between_ct = 10;
  403284:	220a      	movs	r2, #10
  403286:	920c      	str	r2, [sp, #48]	; 0x30
		qspiConf.clock_polarity = 0;
  403288:	930d      	str	r3, [sp, #52]	; 0x34
		qspiConf.clock_phase = 0;
  40328a:	930e      	str	r3, [sp, #56]	; 0x38
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  40328c:	4d56      	ldr	r5, [pc, #344]	; (4033e8 <board_init+0x648>)
  40328e:	4628      	mov	r0, r5
  403290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403294:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  403298:	4c5f      	ldr	r4, [pc, #380]	; (403418 <board_init+0x678>)
  40329a:	47a0      	blx	r4
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  40329c:	4628      	mov	r0, r5
  40329e:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  4032a2:	2201      	movs	r2, #1
  4032a4:	4b5d      	ldr	r3, [pc, #372]	; (40341c <board_init+0x67c>)
  4032a6:	4798      	blx	r3
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11,1);
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  4032a8:	484a      	ldr	r0, [pc, #296]	; (4033d4 <board_init+0x634>)
  4032aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4032ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4032b2:	47a0      	blx	r4
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  4032b4:	202b      	movs	r0, #43	; 0x2b
  4032b6:	4b5a      	ldr	r3, [pc, #360]	; (403420 <board_init+0x680>)
  4032b8:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032ba:	2202      	movs	r2, #2
  4032bc:	4b59      	ldr	r3, [pc, #356]	; (403424 <board_init+0x684>)
  4032be:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032c0:	461a      	mov	r2, r3
  4032c2:	6913      	ldr	r3, [r2, #16]
  4032c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032c8:	d1fb      	bne.n	4032c2 <board_init+0x522>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032ca:	4c56      	ldr	r4, [pc, #344]	; (403424 <board_init+0x684>)
  4032cc:	2380      	movs	r3, #128	; 0x80
  4032ce:	6023      	str	r3, [r4, #0]

		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032d0:	4620      	mov	r0, r4
  4032d2:	a909      	add	r1, sp, #36	; 0x24
  4032d4:	4b54      	ldr	r3, [pc, #336]	; (403428 <board_init+0x688>)
  4032d6:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4032d8:	2301      	movs	r3, #1
  4032da:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032dc:	4622      	mov	r2, r4
  4032de:	6913      	ldr	r3, [r2, #16]
  4032e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032e4:	d0fb      	beq.n	4032de <board_init+0x53e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032e6:	2202      	movs	r2, #2
  4032e8:	4b4e      	ldr	r3, [pc, #312]	; (403424 <board_init+0x684>)
  4032ea:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032ec:	461a      	mov	r2, r3
  4032ee:	6913      	ldr	r3, [r2, #16]
  4032f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032f4:	d1fb      	bne.n	4032ee <board_init+0x54e>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032f6:	4c4b      	ldr	r4, [pc, #300]	; (403424 <board_init+0x684>)
  4032f8:	2380      	movs	r3, #128	; 0x80
  4032fa:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032fc:	4620      	mov	r0, r4
  4032fe:	a909      	add	r1, sp, #36	; 0x24
  403300:	4b49      	ldr	r3, [pc, #292]	; (403428 <board_init+0x688>)
  403302:	4798      	blx	r3
		delay_ms(100);
  403304:	4849      	ldr	r0, [pc, #292]	; (40342c <board_init+0x68c>)
  403306:	4b35      	ldr	r3, [pc, #212]	; (4033dc <board_init+0x63c>)
  403308:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  40330a:	2301      	movs	r3, #1
  40330c:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  40330e:	4622      	mov	r2, r4
  403310:	6913      	ldr	r3, [r2, #16]
  403312:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403316:	d0fb      	beq.n	403310 <board_init+0x570>
		qspi_enable(QSPI);
		delay_ms(100);
  403318:	4844      	ldr	r0, [pc, #272]	; (40342c <board_init+0x68c>)
  40331a:	4b30      	ldr	r3, [pc, #192]	; (4033dc <board_init+0x63c>)
  40331c:	4798      	blx	r3
		//DW1000_initialise();
		sendDebugString("QSPI INITIALIZATION - FINISHED\n");
  40331e:	4844      	ldr	r0, [pc, #272]	; (403430 <board_init+0x690>)
  403320:	4c3a      	ldr	r4, [pc, #232]	; (40340c <board_init+0x66c>)
  403322:	47a0      	blx	r4
		
		//Initalize the dwm1000 module 
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  403324:	4843      	ldr	r0, [pc, #268]	; (403434 <board_init+0x694>)
  403326:	47a0      	blx	r4
		//DW1000_initialise2();
		//DW1000_toggleGPIO_MODE();
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  403328:	4843      	ldr	r0, [pc, #268]	; (403438 <board_init+0x698>)
  40332a:	47a0      	blx	r4
	/* ######################################
	   ######################################
			 		Setup ADC
	   ######################################
	   ###################################### */
		sendDebugString("ADC INITIALIZATION - STARTED\n");
  40332c:	4843      	ldr	r0, [pc, #268]	; (40343c <board_init+0x69c>)
  40332e:	47a0      	blx	r4
		struct afec_config confDefaults;
		pmc_enable_periph_clk(AFEC0);
  403330:	4d43      	ldr	r5, [pc, #268]	; (403440 <board_init+0x6a0>)
  403332:	4628      	mov	r0, r5
  403334:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 403420 <board_init+0x680>
  403338:	47c8      	blx	r9
		
		afec_enable(AFEC0);
  40333a:	4628      	mov	r0, r5
  40333c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 403460 <board_init+0x6c0>
  403340:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403342:	a803      	add	r0, sp, #12
  403344:	4f3f      	ldr	r7, [pc, #252]	; (403444 <board_init+0x6a4>)
  403346:	47b8      	blx	r7
		afec_init(AFEC0,&confDefaults);
  403348:	4628      	mov	r0, r5
  40334a:	a903      	add	r1, sp, #12
  40334c:	4e3e      	ldr	r6, [pc, #248]	; (403448 <board_init+0x6a8>)
  40334e:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  403350:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403352:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403356:	606b      	str	r3, [r5, #4]
		afec_set_trigger(AFEC0,AFEC_TRIG_SW);
		
		pmc_enable_periph_clk(AFEC1);
  403358:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  40335c:	4628      	mov	r0, r5
  40335e:	47c8      	blx	r9
		
		afec_enable(AFEC1);
  403360:	4628      	mov	r0, r5
  403362:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403364:	a803      	add	r0, sp, #12
  403366:	47b8      	blx	r7
		afec_init(AFEC1,&confDefaults);
  403368:	4628      	mov	r0, r5
  40336a:	a903      	add	r1, sp, #12
  40336c:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  40336e:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403370:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403374:	606b      	str	r3, [r5, #4]
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403376:	2701      	movs	r7, #1
  403378:	616f      	str	r7, [r5, #20]
		afec_set_trigger(AFEC1,AFEC_TRIG_SW);
		
		afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
		
		pio_pull_up(PIOB,1<<1,0);
  40337a:	f505 25fa 	add.w	r5, r5, #512000	; 0x7d000
  40337e:	4628      	mov	r0, r5
  403380:	2102      	movs	r1, #2
  403382:	2200      	movs	r2, #0
  403384:	4b25      	ldr	r3, [pc, #148]	; (40341c <board_init+0x67c>)
  403386:	4798      	blx	r3
		pio_pull_down(PIOB,1<<1,0);
  403388:	4628      	mov	r0, r5
  40338a:	2102      	movs	r1, #2
  40338c:	2200      	movs	r2, #0
  40338e:	4b2f      	ldr	r3, [pc, #188]	; (40344c <board_init+0x6ac>)
  403390:	4798      	blx	r3
		sendDebugString("ADC INITIALIZATION - FINISHED\n");
  403392:	482f      	ldr	r0, [pc, #188]	; (403450 <board_init+0x6b0>)
  403394:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup SWITCHES
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  403396:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 403464 <board_init+0x6c4>
  40339a:	4640      	mov	r0, r8
  40339c:	47a0      	blx	r4
		pio_set_input(PIOC,1<<12,PIO_PULLUP | PIO_DEBOUNCE);
  40339e:	4e2d      	ldr	r6, [pc, #180]	; (403454 <board_init+0x6b4>)
  4033a0:	4630      	mov	r0, r6
  4033a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4033a6:	2209      	movs	r2, #9
  4033a8:	4d2b      	ldr	r5, [pc, #172]	; (403458 <board_init+0x6b8>)
  4033aa:	47a8      	blx	r5
		pio_set_input(PIOC,1<<11,PIO_PULLUP | PIO_DEBOUNCE);
  4033ac:	4630      	mov	r0, r6
  4033ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4033b2:	2209      	movs	r2, #9
  4033b4:	47a8      	blx	r5
		pio_set_input(PIOC,1<<10,PIO_PULLUP | PIO_DEBOUNCE);
  4033b6:	4630      	mov	r0, r6
  4033b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4033bc:	2209      	movs	r2, #9
  4033be:	47a8      	blx	r5
		pio_set_input(PIOC,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  4033c0:	4630      	mov	r0, r6
  4033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4033c6:	2209      	movs	r2, #9
  4033c8:	e04e      	b.n	403468 <board_init+0x6c8>
  4033ca:	bf00      	nop
  4033cc:	004130c8 	.word	0x004130c8
  4033d0:	004130f0 	.word	0x004130f0
  4033d4:	400e1400 	.word	0x400e1400
  4033d8:	0007b784 	.word	0x0007b784
  4033dc:	20400001 	.word	0x20400001
  4033e0:	1b601800 	.word	0x1b601800
  4033e4:	400e1000 	.word	0x400e1000
  4033e8:	400e0e00 	.word	0x400e0e00
  4033ec:	09000220 	.word	0x09000220
  4033f0:	004054ad 	.word	0x004054ad
  4033f4:	4004c000 	.word	0x4004c000
  4033f8:	0040b91d 	.word	0x0040b91d
  4033fc:	004003e1 	.word	0x004003e1
  403400:	0040053d 	.word	0x0040053d
  403404:	00400491 	.word	0x00400491
  403408:	00413114 	.word	0x00413114
  40340c:	0040019d 	.word	0x0040019d
  403410:	00413138 	.word	0x00413138
  403414:	00f42400 	.word	0x00f42400
  403418:	004027e1 	.word	0x004027e1
  40341c:	004027b1 	.word	0x004027b1
  403420:	00402a11 	.word	0x00402a11
  403424:	4007c000 	.word	0x4007c000
  403428:	00400615 	.word	0x00400615
  40342c:	004d2b25 	.word	0x004d2b25
  403430:	00413158 	.word	0x00413158
  403434:	00413178 	.word	0x00413178
  403438:	0041319c 	.word	0x0041319c
  40343c:	004131c0 	.word	0x004131c0
  403440:	4003c000 	.word	0x4003c000
  403444:	00400265 	.word	0x00400265
  403448:	00400295 	.word	0x00400295
  40344c:	004028d5 	.word	0x004028d5
  403450:	004131e0 	.word	0x004131e0
  403454:	400e1200 	.word	0x400e1200
  403458:	00402875 	.word	0x00402875
  40345c:	0040b281 	.word	0x0040b281
  403460:	0040038d 	.word	0x0040038d
  403464:	00413200 	.word	0x00413200
  403468:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  40346a:	4e10      	ldr	r6, [pc, #64]	; (4034ac <board_init+0x70c>)
  40346c:	4630      	mov	r0, r6
  40346e:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup USB POWER
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  403470:	4640      	mov	r0, r8
  403472:	47a0      	blx	r4
		pio_set_input(PIOD,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  403474:	480e      	ldr	r0, [pc, #56]	; (4034b0 <board_init+0x710>)
  403476:	f44f 7100 	mov.w	r1, #512	; 0x200
  40347a:	2209      	movs	r2, #9
  40347c:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  40347e:	4630      	mov	r0, r6
  403480:	47a0      	blx	r4
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIFERAL IRQ INITIALIZATION - STARTED\n");
  403482:	480c      	ldr	r0, [pc, #48]	; (4034b4 <board_init+0x714>)
  403484:	47a0      	blx	r4
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART4,UART_IER_RXRDY);
  403486:	480c      	ldr	r0, [pc, #48]	; (4034b8 <board_init+0x718>)
  403488:	4639      	mov	r1, r7
  40348a:	4b0c      	ldr	r3, [pc, #48]	; (4034bc <board_init+0x71c>)
  40348c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40348e:	4b0c      	ldr	r3, [pc, #48]	; (4034c0 <board_init+0x720>)
  403490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403494:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403498:	21c0      	movs	r1, #192	; 0xc0
  40349a:	f883 132e 	strb.w	r1, [r3, #814]	; 0x32e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40349e:	605a      	str	r2, [r3, #4]
		NVIC_ClearPendingIRQ(UART4_IRQn);
		NVIC_SetPriority(UART4_IRQn,6);
		NVIC_EnableIRQ(UART4_IRQn);
		sendDebugString("PERIFERAL IRQ INITIALIZATION - FINISHED\n");
  4034a0:	4808      	ldr	r0, [pc, #32]	; (4034c4 <board_init+0x724>)
  4034a2:	47a0      	blx	r4
}
  4034a4:	b01f      	add	sp, #124	; 0x7c
  4034a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034aa:	bf00      	nop
  4034ac:	00413224 	.word	0x00413224
  4034b0:	400e1400 	.word	0x400e1400
  4034b4:	00413248 	.word	0x00413248
  4034b8:	400e1e00 	.word	0x400e1e00
  4034bc:	00402d69 	.word	0x00402d69
  4034c0:	e000e100 	.word	0xe000e100
  4034c4:	00413270 	.word	0x00413270

004034c8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  4034c8:	e7fe      	b.n	4034c8 <Dummy_Handler>
  4034ca:	bf00      	nop

004034cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4034cc:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4034ce:	4b19      	ldr	r3, [pc, #100]	; (403534 <Reset_Handler+0x68>)
  4034d0:	4a19      	ldr	r2, [pc, #100]	; (403538 <Reset_Handler+0x6c>)
  4034d2:	429a      	cmp	r2, r3
  4034d4:	d003      	beq.n	4034de <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  4034d6:	4b19      	ldr	r3, [pc, #100]	; (40353c <Reset_Handler+0x70>)
  4034d8:	4a16      	ldr	r2, [pc, #88]	; (403534 <Reset_Handler+0x68>)
  4034da:	429a      	cmp	r2, r3
  4034dc:	d304      	bcc.n	4034e8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034de:	4b18      	ldr	r3, [pc, #96]	; (403540 <Reset_Handler+0x74>)
  4034e0:	4a18      	ldr	r2, [pc, #96]	; (403544 <Reset_Handler+0x78>)
  4034e2:	429a      	cmp	r2, r3
  4034e4:	d310      	bcc.n	403508 <Reset_Handler+0x3c>
  4034e6:	e01b      	b.n	403520 <Reset_Handler+0x54>
  4034e8:	4912      	ldr	r1, [pc, #72]	; (403534 <Reset_Handler+0x68>)
  4034ea:	1d0a      	adds	r2, r1, #4
  4034ec:	4b16      	ldr	r3, [pc, #88]	; (403548 <Reset_Handler+0x7c>)
  4034ee:	1a9b      	subs	r3, r3, r2
  4034f0:	f023 0303 	bic.w	r3, r3, #3
  4034f4:	3304      	adds	r3, #4
  4034f6:	4a10      	ldr	r2, [pc, #64]	; (403538 <Reset_Handler+0x6c>)
  4034f8:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4034fa:	f852 0b04 	ldr.w	r0, [r2], #4
  4034fe:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  403502:	429a      	cmp	r2, r3
  403504:	d1f9      	bne.n	4034fa <Reset_Handler+0x2e>
  403506:	e7ea      	b.n	4034de <Reset_Handler+0x12>
  403508:	4b10      	ldr	r3, [pc, #64]	; (40354c <Reset_Handler+0x80>)
  40350a:	4a11      	ldr	r2, [pc, #68]	; (403550 <Reset_Handler+0x84>)
  40350c:	1ad2      	subs	r2, r2, r3
  40350e:	f022 0203 	bic.w	r2, r2, #3
  403512:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  403514:	3b04      	subs	r3, #4
                *pDest++ = 0;
  403516:	2100      	movs	r1, #0
  403518:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40351c:	4293      	cmp	r3, r2
  40351e:	d1fb      	bne.n	403518 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403520:	4a0c      	ldr	r2, [pc, #48]	; (403554 <Reset_Handler+0x88>)
  403522:	4b0d      	ldr	r3, [pc, #52]	; (403558 <Reset_Handler+0x8c>)
  403524:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403528:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40352a:	4b0c      	ldr	r3, [pc, #48]	; (40355c <Reset_Handler+0x90>)
  40352c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40352e:	4b0c      	ldr	r3, [pc, #48]	; (403560 <Reset_Handler+0x94>)
  403530:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  403532:	e7fe      	b.n	403532 <Reset_Handler+0x66>
  403534:	20400000 	.word	0x20400000
  403538:	00413fa4 	.word	0x00413fa4
  40353c:	20400950 	.word	0x20400950
  403540:	2040c6a8 	.word	0x2040c6a8
  403544:	20400950 	.word	0x20400950
  403548:	20400953 	.word	0x20400953
  40354c:	20400954 	.word	0x20400954
  403550:	2040c6ab 	.word	0x2040c6ab
  403554:	e000ed00 	.word	0xe000ed00
  403558:	00400000 	.word	0x00400000
  40355c:	0040b209 	.word	0x0040b209
  403560:	00407b75 	.word	0x00407b75

00403564 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403564:	4b3d      	ldr	r3, [pc, #244]	; (40365c <SystemCoreClockUpdate+0xf8>)
  403566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403568:	f003 0303 	and.w	r3, r3, #3
  40356c:	2b01      	cmp	r3, #1
  40356e:	d012      	beq.n	403596 <SystemCoreClockUpdate+0x32>
  403570:	b113      	cbz	r3, 403578 <SystemCoreClockUpdate+0x14>
  403572:	2b02      	cmp	r3, #2
  403574:	d02c      	beq.n	4035d0 <SystemCoreClockUpdate+0x6c>
  403576:	e05a      	b.n	40362e <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403578:	4b39      	ldr	r3, [pc, #228]	; (403660 <SystemCoreClockUpdate+0xfc>)
  40357a:	695b      	ldr	r3, [r3, #20]
  40357c:	f013 0f80 	tst.w	r3, #128	; 0x80
  403580:	d004      	beq.n	40358c <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403586:	4b37      	ldr	r3, [pc, #220]	; (403664 <SystemCoreClockUpdate+0x100>)
  403588:	601a      	str	r2, [r3, #0]
  40358a:	e050      	b.n	40362e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40358c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  403590:	4b34      	ldr	r3, [pc, #208]	; (403664 <SystemCoreClockUpdate+0x100>)
  403592:	601a      	str	r2, [r3, #0]
  403594:	e04b      	b.n	40362e <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403596:	4b31      	ldr	r3, [pc, #196]	; (40365c <SystemCoreClockUpdate+0xf8>)
  403598:	6a1b      	ldr	r3, [r3, #32]
  40359a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40359e:	d003      	beq.n	4035a8 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4035a0:	4a31      	ldr	r2, [pc, #196]	; (403668 <SystemCoreClockUpdate+0x104>)
  4035a2:	4b30      	ldr	r3, [pc, #192]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035a4:	601a      	str	r2, [r3, #0]
  4035a6:	e042      	b.n	40362e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035a8:	4a30      	ldr	r2, [pc, #192]	; (40366c <SystemCoreClockUpdate+0x108>)
  4035aa:	4b2e      	ldr	r3, [pc, #184]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035ac:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4035ae:	4b2b      	ldr	r3, [pc, #172]	; (40365c <SystemCoreClockUpdate+0xf8>)
  4035b0:	6a1b      	ldr	r3, [r3, #32]
  4035b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035b6:	2b10      	cmp	r3, #16
  4035b8:	d002      	beq.n	4035c0 <SystemCoreClockUpdate+0x5c>
  4035ba:	2b20      	cmp	r3, #32
  4035bc:	d004      	beq.n	4035c8 <SystemCoreClockUpdate+0x64>
  4035be:	e036      	b.n	40362e <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4035c0:	4a2b      	ldr	r2, [pc, #172]	; (403670 <SystemCoreClockUpdate+0x10c>)
  4035c2:	4b28      	ldr	r3, [pc, #160]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035c4:	601a      	str	r2, [r3, #0]
          break;
  4035c6:	e032      	b.n	40362e <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4035c8:	4a27      	ldr	r2, [pc, #156]	; (403668 <SystemCoreClockUpdate+0x104>)
  4035ca:	4b26      	ldr	r3, [pc, #152]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035cc:	601a      	str	r2, [r3, #0]
          break;
  4035ce:	e02e      	b.n	40362e <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4035d0:	4b22      	ldr	r3, [pc, #136]	; (40365c <SystemCoreClockUpdate+0xf8>)
  4035d2:	6a1b      	ldr	r3, [r3, #32]
  4035d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4035d8:	d003      	beq.n	4035e2 <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4035da:	4a23      	ldr	r2, [pc, #140]	; (403668 <SystemCoreClockUpdate+0x104>)
  4035dc:	4b21      	ldr	r3, [pc, #132]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035de:	601a      	str	r2, [r3, #0]
  4035e0:	e012      	b.n	403608 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035e2:	4a22      	ldr	r2, [pc, #136]	; (40366c <SystemCoreClockUpdate+0x108>)
  4035e4:	4b1f      	ldr	r3, [pc, #124]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035e6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4035e8:	4b1c      	ldr	r3, [pc, #112]	; (40365c <SystemCoreClockUpdate+0xf8>)
  4035ea:	6a1b      	ldr	r3, [r3, #32]
  4035ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035f0:	2b10      	cmp	r3, #16
  4035f2:	d002      	beq.n	4035fa <SystemCoreClockUpdate+0x96>
  4035f4:	2b20      	cmp	r3, #32
  4035f6:	d004      	beq.n	403602 <SystemCoreClockUpdate+0x9e>
  4035f8:	e006      	b.n	403608 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4035fa:	4a1d      	ldr	r2, [pc, #116]	; (403670 <SystemCoreClockUpdate+0x10c>)
  4035fc:	4b19      	ldr	r3, [pc, #100]	; (403664 <SystemCoreClockUpdate+0x100>)
  4035fe:	601a      	str	r2, [r3, #0]
          break;
  403600:	e002      	b.n	403608 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403602:	4a19      	ldr	r2, [pc, #100]	; (403668 <SystemCoreClockUpdate+0x104>)
  403604:	4b17      	ldr	r3, [pc, #92]	; (403664 <SystemCoreClockUpdate+0x100>)
  403606:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403608:	4b14      	ldr	r3, [pc, #80]	; (40365c <SystemCoreClockUpdate+0xf8>)
  40360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40360c:	f003 0303 	and.w	r3, r3, #3
  403610:	2b02      	cmp	r3, #2
  403612:	d10c      	bne.n	40362e <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403614:	4a11      	ldr	r2, [pc, #68]	; (40365c <SystemCoreClockUpdate+0xf8>)
  403616:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403618:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40361a:	4812      	ldr	r0, [pc, #72]	; (403664 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40361c:	f3c3 410a 	ubfx	r1, r3, #16, #11
  403620:	6803      	ldr	r3, [r0, #0]
  403622:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403626:	b2d2      	uxtb	r2, r2
  403628:	fbb3 f3f2 	udiv	r3, r3, r2
  40362c:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40362e:	4b0b      	ldr	r3, [pc, #44]	; (40365c <SystemCoreClockUpdate+0xf8>)
  403630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403632:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403636:	2b70      	cmp	r3, #112	; 0x70
  403638:	d107      	bne.n	40364a <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  40363a:	4a0a      	ldr	r2, [pc, #40]	; (403664 <SystemCoreClockUpdate+0x100>)
  40363c:	6813      	ldr	r3, [r2, #0]
  40363e:	490d      	ldr	r1, [pc, #52]	; (403674 <SystemCoreClockUpdate+0x110>)
  403640:	fba1 1303 	umull	r1, r3, r1, r3
  403644:	085b      	lsrs	r3, r3, #1
  403646:	6013      	str	r3, [r2, #0]
  403648:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40364a:	4b04      	ldr	r3, [pc, #16]	; (40365c <SystemCoreClockUpdate+0xf8>)
  40364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40364e:	4905      	ldr	r1, [pc, #20]	; (403664 <SystemCoreClockUpdate+0x100>)
  403650:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403654:	680b      	ldr	r3, [r1, #0]
  403656:	40d3      	lsrs	r3, r2
  403658:	600b      	str	r3, [r1, #0]
  40365a:	4770      	bx	lr
  40365c:	400e0600 	.word	0x400e0600
  403660:	400e1810 	.word	0x400e1810
  403664:	20400014 	.word	0x20400014
  403668:	00b71b00 	.word	0x00b71b00
  40366c:	003d0900 	.word	0x003d0900
  403670:	007a1200 	.word	0x007a1200
  403674:	aaaaaaab 	.word	0xaaaaaaab

00403678 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403678:	4b14      	ldr	r3, [pc, #80]	; (4036cc <system_init_flash+0x54>)
  40367a:	4298      	cmp	r0, r3
  40367c:	d804      	bhi.n	403688 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40367e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403682:	4b13      	ldr	r3, [pc, #76]	; (4036d0 <system_init_flash+0x58>)
  403684:	601a      	str	r2, [r3, #0]
  403686:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403688:	4b12      	ldr	r3, [pc, #72]	; (4036d4 <system_init_flash+0x5c>)
  40368a:	4298      	cmp	r0, r3
  40368c:	d803      	bhi.n	403696 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40368e:	4a12      	ldr	r2, [pc, #72]	; (4036d8 <system_init_flash+0x60>)
  403690:	4b0f      	ldr	r3, [pc, #60]	; (4036d0 <system_init_flash+0x58>)
  403692:	601a      	str	r2, [r3, #0]
  403694:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403696:	4b11      	ldr	r3, [pc, #68]	; (4036dc <system_init_flash+0x64>)
  403698:	4298      	cmp	r0, r3
  40369a:	d803      	bhi.n	4036a4 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40369c:	4a10      	ldr	r2, [pc, #64]	; (4036e0 <system_init_flash+0x68>)
  40369e:	4b0c      	ldr	r3, [pc, #48]	; (4036d0 <system_init_flash+0x58>)
  4036a0:	601a      	str	r2, [r3, #0]
  4036a2:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4036a4:	4b0f      	ldr	r3, [pc, #60]	; (4036e4 <system_init_flash+0x6c>)
  4036a6:	4298      	cmp	r0, r3
  4036a8:	d803      	bhi.n	4036b2 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4036aa:	4a0f      	ldr	r2, [pc, #60]	; (4036e8 <system_init_flash+0x70>)
  4036ac:	4b08      	ldr	r3, [pc, #32]	; (4036d0 <system_init_flash+0x58>)
  4036ae:	601a      	str	r2, [r3, #0]
  4036b0:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4036b2:	4b0e      	ldr	r3, [pc, #56]	; (4036ec <system_init_flash+0x74>)
  4036b4:	4298      	cmp	r0, r3
  4036b6:	d804      	bhi.n	4036c2 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4036b8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4036bc:	4b04      	ldr	r3, [pc, #16]	; (4036d0 <system_init_flash+0x58>)
  4036be:	601a      	str	r2, [r3, #0]
  4036c0:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4036c2:	4a0b      	ldr	r2, [pc, #44]	; (4036f0 <system_init_flash+0x78>)
  4036c4:	4b02      	ldr	r3, [pc, #8]	; (4036d0 <system_init_flash+0x58>)
  4036c6:	601a      	str	r2, [r3, #0]
  4036c8:	4770      	bx	lr
  4036ca:	bf00      	nop
  4036cc:	01312cff 	.word	0x01312cff
  4036d0:	400e0c00 	.word	0x400e0c00
  4036d4:	026259ff 	.word	0x026259ff
  4036d8:	04000100 	.word	0x04000100
  4036dc:	039386ff 	.word	0x039386ff
  4036e0:	04000200 	.word	0x04000200
  4036e4:	04c4b3ff 	.word	0x04c4b3ff
  4036e8:	04000300 	.word	0x04000300
  4036ec:	05f5e0ff 	.word	0x05f5e0ff
  4036f0:	04000500 	.word	0x04000500

004036f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4036f4:	4b09      	ldr	r3, [pc, #36]	; (40371c <_sbrk+0x28>)
  4036f6:	681b      	ldr	r3, [r3, #0]
  4036f8:	b913      	cbnz	r3, 403700 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4036fa:	4a09      	ldr	r2, [pc, #36]	; (403720 <_sbrk+0x2c>)
  4036fc:	4b07      	ldr	r3, [pc, #28]	; (40371c <_sbrk+0x28>)
  4036fe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403700:	4b06      	ldr	r3, [pc, #24]	; (40371c <_sbrk+0x28>)
  403702:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403704:	181a      	adds	r2, r3, r0
  403706:	4907      	ldr	r1, [pc, #28]	; (403724 <_sbrk+0x30>)
  403708:	4291      	cmp	r1, r2
  40370a:	db04      	blt.n	403716 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40370c:	4610      	mov	r0, r2
  40370e:	4a03      	ldr	r2, [pc, #12]	; (40371c <_sbrk+0x28>)
  403710:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403712:	4618      	mov	r0, r3
  403714:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403716:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40371a:	4770      	bx	lr
  40371c:	2040c4b4 	.word	0x2040c4b4
  403720:	2040e8a8 	.word	0x2040e8a8
  403724:	2045fffc 	.word	0x2045fffc

00403728 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403728:	f04f 30ff 	mov.w	r0, #4294967295
  40372c:	4770      	bx	lr
  40372e:	bf00      	nop

00403730 <_write>:

extern int _write(int file)
{
	return -1;
}
  403730:	f04f 30ff 	mov.w	r0, #4294967295
  403734:	4770      	bx	lr
  403736:	bf00      	nop

00403738 <_read>:

extern int _read(int file)
{
	return -1;
}
  403738:	f04f 30ff 	mov.w	r0, #4294967295
  40373c:	4770      	bx	lr
  40373e:	bf00      	nop

00403740 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403744:	604b      	str	r3, [r1, #4]

	return 0;
}
  403746:	2000      	movs	r0, #0
  403748:	4770      	bx	lr
  40374a:	bf00      	nop

0040374c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40374c:	2001      	movs	r0, #1
  40374e:	4770      	bx	lr

00403750 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403750:	2000      	movs	r0, #0
  403752:	4770      	bx	lr

00403754 <_exit>:

extern void _exit(int status)
{
  403754:	b508      	push	{r3, lr}
  403756:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  403758:	4801      	ldr	r0, [pc, #4]	; (403760 <_exit+0xc>)
  40375a:	4b02      	ldr	r3, [pc, #8]	; (403764 <_exit+0x10>)
  40375c:	4798      	blx	r3

	for (;;);
  40375e:	e7fe      	b.n	40375e <_exit+0xa>
  403760:	0041329c 	.word	0x0041329c
  403764:	0040b259 	.word	0x0040b259

00403768 <_kill>:
}

extern void _kill(int pid, int sig)
{
  403768:	4770      	bx	lr
  40376a:	bf00      	nop

0040376c <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  40376c:	f04f 30ff 	mov.w	r0, #4294967295
  403770:	4770      	bx	lr
  403772:	bf00      	nop

00403774 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  403774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403778:	b087      	sub	sp, #28
  40377a:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  40377c:	f103 0e07 	add.w	lr, r3, #7
  403780:	f02e 0e07 	bic.w	lr, lr, #7
  403784:	ebad 0d0e 	sub.w	sp, sp, lr
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
  403788:	2b08      	cmp	r3, #8
  40378a:	dc41      	bgt.n	403810 <DW1000_readReg+0x9c>
  40378c:	466e      	mov	r6, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  40378e:	b919      	cbnz	r1, 403798 <DW1000_readReg+0x24>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  403790:	60f8      	str	r0, [r7, #12]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  403792:	f04f 0b01 	mov.w	fp, #1
  403796:	e03e      	b.n	403816 <DW1000_readReg+0xa2>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  403798:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  40379c:	60f8      	str	r0, [r7, #12]
    	if (offset < 128) {							// Check if extended sub-index is needed
  40379e:	2a7f      	cmp	r2, #127	; 0x7f
  4037a0:	d803      	bhi.n	4037aa <DW1000_readReg+0x36>
    		header[1] = offset;						
  4037a2:	613a      	str	r2, [r7, #16]
    		headerLen = 2;
  4037a4:	f04f 0b02 	mov.w	fp, #2
  4037a8:	e035      	b.n	403816 <DW1000_readReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  4037aa:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  4037ae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4037b2:	6139      	str	r1, [r7, #16]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  4037b4:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  4037b8:	617a      	str	r2, [r7, #20]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  4037ba:	f04f 0b03 	mov.w	fp, #3
  4037be:	e02a      	b.n	403816 <DW1000_readReg+0xa2>
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  4037c0:	481b      	ldr	r0, [pc, #108]	; (403830 <DW1000_readReg+0xbc>)
  4037c2:	4649      	mov	r1, r9
  4037c4:	2201      	movs	r2, #1
  4037c6:	47b0      	blx	r6
  4037c8:	f108 0801 	add.w	r8, r8, #1
  4037cc:	f109 0904 	add.w	r9, r9, #4
  4037d0:	45c3      	cmp	fp, r8
  4037d2:	dcf5      	bgt.n	4037c0 <DW1000_readReg+0x4c>
	qspi_read(QSPI,data,n);
  4037d4:	4816      	ldr	r0, [pc, #88]	; (403830 <DW1000_readReg+0xbc>)
  4037d6:	687e      	ldr	r6, [r7, #4]
  4037d8:	4631      	mov	r1, r6
  4037da:	4652      	mov	r2, sl
  4037dc:	4b15      	ldr	r3, [pc, #84]	; (403834 <DW1000_readReg+0xc0>)
  4037de:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  4037e0:	f1ba 0f01 	cmp.w	sl, #1
  4037e4:	d40f      	bmi.n	403806 <DW1000_readReg+0x92>
  4037e6:	4631      	mov	r1, r6
  4037e8:	4456      	add	r6, sl
  4037ea:	2200      	movs	r2, #0
  4037ec:	2300      	movs	r3, #0
		result = (result << 8) | data[i];
  4037ee:	021d      	lsls	r5, r3, #8
  4037f0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
  4037f4:	0214      	lsls	r4, r2, #8
  4037f6:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
  4037fa:	2300      	movs	r3, #0
  4037fc:	4322      	orrs	r2, r4
  4037fe:	432b      	orrs	r3, r5
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  403800:	428e      	cmp	r6, r1
  403802:	d1f4      	bne.n	4037ee <DW1000_readReg+0x7a>
  403804:	e001      	b.n	40380a <DW1000_readReg+0x96>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  403806:	2200      	movs	r2, #0
  403808:	2300      	movs	r3, #0
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
  40380a:	4610      	mov	r0, r2
  40380c:	4619      	mov	r1, r3
  40380e:	e00a      	b.n	403826 <DW1000_readReg+0xb2>
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  403810:	2000      	movs	r0, #0
  403812:	4601      	mov	r1, r0
  403814:	e007      	b.n	403826 <DW1000_readReg+0xb2>
  403816:	607e      	str	r6, [r7, #4]
  403818:	469a      	mov	sl, r3
  40381a:	f107 090c 	add.w	r9, r7, #12
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  40381e:	f04f 0800 	mov.w	r8, #0
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  403822:	4e05      	ldr	r6, [pc, #20]	; (403838 <DW1000_readReg+0xc4>)
  403824:	e7cc      	b.n	4037c0 <DW1000_readReg+0x4c>
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
}
  403826:	371c      	adds	r7, #28
  403828:	46bd      	mov	sp, r7
  40382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40382e:	bf00      	nop
  403830:	4007c000 	.word	0x4007c000
  403834:	00400795 	.word	0x00400795
  403838:	00400885 	.word	0x00400885

0040383c <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  40383c:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  40383e:	2000      	movs	r0, #0
  403840:	4601      	mov	r1, r0
  403842:	4602      	mov	r2, r0
  403844:	2304      	movs	r3, #4
  403846:	4c01      	ldr	r4, [pc, #4]	; (40384c <DW1000_readDeviceIdentifier+0x10>)
  403848:	47a0      	blx	r4
	return result;
}
  40384a:	bd10      	pop	{r4, pc}
  40384c:	00403775 	.word	0x00403775

00403850 <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  403850:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  403852:	200f      	movs	r0, #15
  403854:	2100      	movs	r1, #0
  403856:	460a      	mov	r2, r1
  403858:	2305      	movs	r3, #5
  40385a:	4c03      	ldr	r4, [pc, #12]	; (403868 <DW1000_readSystemStatus+0x18>)
  40385c:	47a0      	blx	r4
  40385e:	4b03      	ldr	r3, [pc, #12]	; (40386c <DW1000_readSystemStatus+0x1c>)
  403860:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  403862:	17c1      	asrs	r1, r0, #31
  403864:	bd10      	pop	{r4, pc}
  403866:	bf00      	nop
  403868:	00403775 	.word	0x00403775
  40386c:	2040c5e4 	.word	0x2040c5e4

00403870 <DW1000_writeReg>:
	}

	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  403870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403874:	b087      	sub	sp, #28
  403876:	af00      	add	r7, sp, #0
  403878:	60f8      	str	r0, [r7, #12]
  40387a:	60b9      	str	r1, [r7, #8]
  40387c:	4615      	mov	r5, r2
  40387e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  403882:	6cbc      	ldr	r4, [r7, #72]	; 0x48
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
  403884:	1de3      	adds	r3, r4, #7
  403886:	f023 0307 	bic.w	r3, r3, #7
  40388a:	ebad 0d03 	sub.w	sp, sp, r3
  40388e:	f8c7 d004 	str.w	sp, [r7, #4]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  403892:	2c00      	cmp	r4, #0
  403894:	dd25      	ble.n	4038e2 <DW1000_writeReg+0x72>
  403896:	eb0d 0b04 	add.w	fp, sp, r4
  40389a:	2600      	movs	r6, #0
  40389c:	22ff      	movs	r2, #255	; 0xff
  40389e:	2300      	movs	r3, #0
  4038a0:	46ee      	mov	lr, sp
  4038a2:	46dc      	mov	ip, fp
  4038a4:	46c2      	mov	sl, r8
  4038a6:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  4038a8:	ea02 080a 	and.w	r8, r2, sl
  4038ac:	ea03 090b 	and.w	r9, r3, fp
  4038b0:	f1c6 0020 	rsb	r0, r6, #32
  4038b4:	f1a6 0120 	sub.w	r1, r6, #32
  4038b8:	fa28 f806 	lsr.w	r8, r8, r6
  4038bc:	fa09 f000 	lsl.w	r0, r9, r0
  4038c0:	ea48 0800 	orr.w	r8, r8, r0
  4038c4:	fa29 f101 	lsr.w	r1, r9, r1
  4038c8:	ea48 0801 	orr.w	r8, r8, r1
  4038cc:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  4038d0:	0219      	lsls	r1, r3, #8
  4038d2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
  4038d6:	0210      	lsls	r0, r2, #8
  4038d8:	4602      	mov	r2, r0
  4038da:	460b      	mov	r3, r1
  4038dc:	3608      	adds	r6, #8
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  4038de:	45e6      	cmp	lr, ip
  4038e0:	d1e2      	bne.n	4038a8 <DW1000_writeReg+0x38>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  4038e2:	68bb      	ldr	r3, [r7, #8]
  4038e4:	b92b      	cbnz	r3, 4038f2 <DW1000_writeReg+0x82>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	f063 007f 	orn	r0, r3, #127	; 0x7f
  4038ec:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  4038ee:	2201      	movs	r2, #1
  4038f0:	e00f      	b.n	403912 <DW1000_writeReg+0xa2>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  4038f2:	68fb      	ldr	r3, [r7, #12]
  4038f4:	f063 003f 	orn	r0, r3, #63	; 0x3f
  4038f8:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  4038fa:	2d7f      	cmp	r5, #127	; 0x7f
  4038fc:	d802      	bhi.n	403904 <DW1000_writeReg+0x94>
    		header[1] = offset;						
  4038fe:	757d      	strb	r5, [r7, #21]
    		headerLen = 2;
  403900:	2202      	movs	r2, #2
  403902:	e006      	b.n	403912 <DW1000_writeReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  403904:	f065 037f 	orn	r3, r5, #127	; 0x7f
  403908:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  40390a:	f3c5 12c7 	ubfx	r2, r5, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  40390e:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  403910:	2203      	movs	r2, #3
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
  403912:	4916      	ldr	r1, [pc, #88]	; (40396c <DW1000_writeReg+0xfc>)
  403914:	690b      	ldr	r3, [r1, #16]
  403916:	f013 0f04 	tst.w	r3, #4
  40391a:	d0fb      	beq.n	403914 <DW1000_writeReg+0xa4>
	for(int i = 0;i<headerLen;i++){
  40391c:	b17a      	cbz	r2, 40393e <DW1000_writeReg+0xce>
  40391e:	f107 0614 	add.w	r6, r7, #20
  403922:	eb06 0802 	add.w	r8, r6, r2
		 qspi_write(QSPI,header+i,1);
  403926:	f8df b044 	ldr.w	fp, [pc, #68]	; 40396c <DW1000_writeReg+0xfc>
  40392a:	f04f 0a01 	mov.w	sl, #1
  40392e:	4d10      	ldr	r5, [pc, #64]	; (403970 <DW1000_writeReg+0x100>)
  403930:	4658      	mov	r0, fp
  403932:	4631      	mov	r1, r6
  403934:	4652      	mov	r2, sl
  403936:	47a8      	blx	r5
  403938:	3601      	adds	r6, #1
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
  40393a:	4546      	cmp	r6, r8
  40393c:	d1f8      	bne.n	403930 <DW1000_writeReg+0xc0>
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  40393e:	2c00      	cmp	r4, #0
  403940:	dd0f      	ble.n	403962 <DW1000_writeReg+0xf2>
  403942:	687b      	ldr	r3, [r7, #4]
  403944:	461e      	mov	r6, r3
  403946:	4423      	add	r3, r4
  403948:	461c      	mov	r4, r3
	{
		 qspi_write(QSPI,data+i,1);
  40394a:	f8df 9020 	ldr.w	r9, [pc, #32]	; 40396c <DW1000_writeReg+0xfc>
  40394e:	f04f 0801 	mov.w	r8, #1
  403952:	4d07      	ldr	r5, [pc, #28]	; (403970 <DW1000_writeReg+0x100>)
  403954:	4648      	mov	r0, r9
  403956:	4631      	mov	r1, r6
  403958:	4642      	mov	r2, r8
  40395a:	47a8      	blx	r5
  40395c:	3601      	adds	r6, #1
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  40395e:	42a6      	cmp	r6, r4
  403960:	d1f8      	bne.n	403954 <DW1000_writeReg+0xe4>
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  403962:	371c      	adds	r7, #28
  403964:	46bd      	mov	sp, r7
  403966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40396a:	bf00      	nop
  40396c:	4007c000 	.word	0x4007c000
  403970:	00400885 	.word	0x00400885
  403974:	00000000 	.word	0x00000000

00403978 <DW1000_initialise>:
 * Preamble code:		5
 * Preamble length:		2048 (changed from 128)
 * PAC size:			64 (changed from 8)
 * SFD length:			64 (changed from 8 (standard))
 */
void DW1000_initialise() {
  403978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40397c:	b085      	sub	sp, #20
	//delay(5);
	//digitalWrite(DW1000__rst, HIGH);
	//delay(5);

	// Channel, preamble, bitrate selection
	 DW1000_writeReg(CHAN_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x29460033, CHAN_CTRL_LEN);
  40397e:	a379      	add	r3, pc, #484	; (adr r3, 403b64 <DW1000_initialise+0x1ec>)
  403980:	e9d3 2300 	ldrd	r2, r3, [r3]
  403984:	e9cd 2300 	strd	r2, r3, [sp]
  403988:	2604      	movs	r6, #4
  40398a:	9602      	str	r6, [sp, #8]
  40398c:	201f      	movs	r0, #31
  40398e:	2100      	movs	r1, #0
  403990:	460a      	mov	r2, r1
  403992:	4c6f      	ldr	r4, [pc, #444]	; (403b50 <DW1000_initialise+0x1d8>)
  403994:	47a0      	blx	r4
	// DW1000_writeReg(TX_FCTRL_ID, NO_SUB, NO_OFFSET, 0x0015400C, TX_FCTRL_LEN);
	 DW1000_writeReg(ACK_RESP_T_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00000000, ACK_RESP_T_LEN); // changed
  403996:	f04f 0800 	mov.w	r8, #0
  40399a:	f04f 0900 	mov.w	r9, #0
  40399e:	e9cd 8900 	strd	r8, r9, [sp]
  4039a2:	9602      	str	r6, [sp, #8]
  4039a4:	201a      	movs	r0, #26
  4039a6:	2100      	movs	r1, #0
  4039a8:	460a      	mov	r2, r1
  4039aa:	47a0      	blx	r4
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00441200, SYS_CFG_LEN); // changed
  4039ac:	4a69      	ldr	r2, [pc, #420]	; (403b54 <DW1000_initialise+0x1dc>)
  4039ae:	2300      	movs	r3, #0
  4039b0:	e9cd 2300 	strd	r2, r3, [sp]
  4039b4:	9602      	str	r6, [sp, #8]
  4039b6:	4630      	mov	r0, r6
  4039b8:	2100      	movs	r1, #0
  4039ba:	460a      	mov	r2, r1
  4039bc:	47a0      	blx	r4
	 DW1000_writeReg(TX_POWER_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x6F6F6F6F, TX_POWER_LEN);
  4039be:	f04f 326f 	mov.w	r2, #1869573999	; 0x6f6f6f6f
  4039c2:	2300      	movs	r3, #0
  4039c4:	e9cd 2300 	strd	r2, r3, [sp]
  4039c8:	9602      	str	r6, [sp, #8]
  4039ca:	201e      	movs	r0, #30
  4039cc:	2100      	movs	r1, #0
  4039ce:	460a      	mov	r2, r1
  4039d0:	47a0      	blx	r4

	// Default values that should be modified
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE1_OFFSET, (AGC_TUNE1_16M & AGC_TUNE1_MASK), AGC_TUNE1_LEN);
  4039d2:	f648 0270 	movw	r2, #34928	; 0x8870
  4039d6:	2300      	movs	r3, #0
  4039d8:	e9cd 2300 	strd	r2, r3, [sp]
  4039dc:	2702      	movs	r7, #2
  4039de:	9702      	str	r7, [sp, #8]
  4039e0:	2023      	movs	r0, #35	; 0x23
  4039e2:	2101      	movs	r1, #1
  4039e4:	4632      	mov	r2, r6
  4039e6:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE2_OFFSET, (AGC_TUNE2_VAL & AGC_TUNE2_MASK), AGC_TUNE2_LEN);
  4039e8:	a353      	add	r3, pc, #332	; (adr r3, 403b38 <DW1000_initialise+0x1c0>)
  4039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039ee:	e9cd 2300 	strd	r2, r3, [sp]
  4039f2:	9602      	str	r6, [sp, #8]
  4039f4:	2023      	movs	r0, #35	; 0x23
  4039f6:	2101      	movs	r1, #1
  4039f8:	220c      	movs	r2, #12
  4039fa:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE3_OFFSET, (AGC_TUNE3_VAL & AGC_TUNE3_MASK), AGC_TUNE3_LEN);
  4039fc:	2255      	movs	r2, #85	; 0x55
  4039fe:	2300      	movs	r3, #0
  403a00:	e9cd 2300 	strd	r2, r3, [sp]
  403a04:	9702      	str	r7, [sp, #8]
  403a06:	2023      	movs	r0, #35	; 0x23
  403a08:	2101      	movs	r1, #1
  403a0a:	2212      	movs	r2, #18
  403a0c:	47a0      	blx	r4

	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE0b_OFFSET, 0x0016, DRX_TUNE0b_LEN); // changed
  403a0e:	2216      	movs	r2, #22
  403a10:	2300      	movs	r3, #0
  403a12:	e9cd 2300 	strd	r2, r3, [sp]
  403a16:	9702      	str	r7, [sp, #8]
  403a18:	2027      	movs	r0, #39	; 0x27
  403a1a:	2101      	movs	r1, #1
  403a1c:	463a      	mov	r2, r7
  403a1e:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1a_OFFSET, 0x0087, DRX_TUNE1a_LEN);
  403a20:	2287      	movs	r2, #135	; 0x87
  403a22:	2300      	movs	r3, #0
  403a24:	e9cd 2300 	strd	r2, r3, [sp]
  403a28:	9702      	str	r7, [sp, #8]
  403a2a:	2027      	movs	r0, #39	; 0x27
  403a2c:	2101      	movs	r1, #1
  403a2e:	4632      	mov	r2, r6
  403a30:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1b_OFFSET, 0x0064, DRX_TUNE1b_LEN); // changed
  403a32:	2264      	movs	r2, #100	; 0x64
  403a34:	2300      	movs	r3, #0
  403a36:	e9cd 2300 	strd	r2, r3, [sp]
  403a3a:	9702      	str	r7, [sp, #8]
  403a3c:	2027      	movs	r0, #39	; 0x27
  403a3e:	2101      	movs	r1, #1
  403a40:	2206      	movs	r2, #6
  403a42:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE2_OFFSET, 0x371A011D, DRX_TUNE2_LEN); // changed
  403a44:	a33e      	add	r3, pc, #248	; (adr r3, 403b40 <DW1000_initialise+0x1c8>)
  403a46:	e9d3 2300 	ldrd	r2, r3, [r3]
  403a4a:	e9cd 2300 	strd	r2, r3, [sp]
  403a4e:	9602      	str	r6, [sp, #8]
  403a50:	2027      	movs	r0, #39	; 0x27
  403a52:	2101      	movs	r1, #1
  403a54:	2208      	movs	r2, #8
  403a56:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE4H_OFFSET, 0x0028, DRX_TUNE4H_LEN); // changed
  403a58:	2228      	movs	r2, #40	; 0x28
  403a5a:	2300      	movs	r3, #0
  403a5c:	e9cd 2300 	strd	r2, r3, [sp]
  403a60:	9702      	str	r7, [sp, #8]
  403a62:	2027      	movs	r0, #39	; 0x27
  403a64:	2101      	movs	r1, #1
  403a66:	2226      	movs	r2, #38	; 0x26
  403a68:	47a0      	blx	r4

	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_RXCTRLH_OFFSET, 0xD8, 1);
  403a6a:	22d8      	movs	r2, #216	; 0xd8
  403a6c:	2300      	movs	r3, #0
  403a6e:	e9cd 2300 	strd	r2, r3, [sp]
  403a72:	2501      	movs	r5, #1
  403a74:	9502      	str	r5, [sp, #8]
  403a76:	2028      	movs	r0, #40	; 0x28
  403a78:	4629      	mov	r1, r5
  403a7a:	220b      	movs	r2, #11
  403a7c:	47a0      	blx	r4
	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_TXCTRL_OFFSET, RF_TXCTRL_CH3, RF_TXCTRL_LEN);
  403a7e:	4a36      	ldr	r2, [pc, #216]	; (403b58 <DW1000_initialise+0x1e0>)
  403a80:	2300      	movs	r3, #0
  403a82:	e9cd 2300 	strd	r2, r3, [sp]
  403a86:	9602      	str	r6, [sp, #8]
  403a88:	2028      	movs	r0, #40	; 0x28
  403a8a:	4629      	mov	r1, r5
  403a8c:	220c      	movs	r2, #12
  403a8e:	47a0      	blx	r4

	 DW1000_writeReg(TX_CAL_ID, DW1000_SUB, TC_PGDELAY_OFFSET, TC_PGDELAY_CH3, TC_PGDELAY_LEN);
  403a90:	22c5      	movs	r2, #197	; 0xc5
  403a92:	2300      	movs	r3, #0
  403a94:	e9cd 2300 	strd	r2, r3, [sp]
  403a98:	9502      	str	r5, [sp, #8]
  403a9a:	202a      	movs	r0, #42	; 0x2a
  403a9c:	4629      	mov	r1, r5
  403a9e:	220b      	movs	r2, #11
  403aa0:	47a0      	blx	r4

	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLCFG_OFFSET, FS_PLLCFG_CH3, FS_PLLCFG_LEN);
  403aa2:	a329      	add	r3, pc, #164	; (adr r3, 403b48 <DW1000_initialise+0x1d0>)
  403aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403aa8:	e9cd 2300 	strd	r2, r3, [sp]
  403aac:	2305      	movs	r3, #5
  403aae:	9302      	str	r3, [sp, #8]
  403ab0:	202b      	movs	r0, #43	; 0x2b
  403ab2:	4629      	mov	r1, r5
  403ab4:	2207      	movs	r2, #7
  403ab6:	47a0      	blx	r4
	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLTUNE_OFFSET, FS_PLLTUNE_CH3, FS_PLLTUNE_LEN);
  403ab8:	225e      	movs	r2, #94	; 0x5e
  403aba:	2300      	movs	r3, #0
  403abc:	e9cd 2300 	strd	r2, r3, [sp]
  403ac0:	9502      	str	r5, [sp, #8]
  403ac2:	202b      	movs	r0, #43	; 0x2b
  403ac4:	4629      	mov	r1, r5
  403ac6:	220b      	movs	r2, #11
  403ac8:	47a0      	blx	r4

	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG1_OFFSET, 0x6D, LDE_CFG1_LEN);
  403aca:	226d      	movs	r2, #109	; 0x6d
  403acc:	2300      	movs	r3, #0
  403ace:	e9cd 2300 	strd	r2, r3, [sp]
  403ad2:	9502      	str	r5, [sp, #8]
  403ad4:	202e      	movs	r0, #46	; 0x2e
  403ad6:	4629      	mov	r1, r5
  403ad8:	f640 0206 	movw	r2, #2054	; 0x806
  403adc:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG2_OFFSET, 0x1607, LDE_CFG2_LEN);
  403ade:	f241 6207 	movw	r2, #5639	; 0x1607
  403ae2:	2300      	movs	r3, #0
  403ae4:	e9cd 2300 	strd	r2, r3, [sp]
  403ae8:	9702      	str	r7, [sp, #8]
  403aea:	202e      	movs	r0, #46	; 0x2e
  403aec:	4629      	mov	r1, r5
  403aee:	f641 0206 	movw	r2, #6150	; 0x1806
  403af2:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_REPC_OFFSET, (0x451E/8), LDE_REPC_LEN); // changed
  403af4:	f640 02a3 	movw	r2, #2211	; 0x8a3
  403af8:	2300      	movs	r3, #0
  403afa:	e9cd 2300 	strd	r2, r3, [sp]
  403afe:	9702      	str	r7, [sp, #8]
  403b00:	202e      	movs	r0, #46	; 0x2e
  403b02:	4629      	mov	r1, r5
  403b04:	f642 0204 	movw	r2, #10244	; 0x2804
  403b08:	47a0      	blx	r4

	// Ensure CPLOCK and CPLL_LL flags are working correctly
	 DW1000_writeReg(EXT_SYNC_ID, DW1000_SUB, EC_CTRL_OFFSET, 0x4, EC_CTRL_LEN);
  403b0a:	2204      	movs	r2, #4
  403b0c:	2300      	movs	r3, #0
  403b0e:	e9cd 2300 	strd	r2, r3, [sp]
  403b12:	9602      	str	r6, [sp, #8]
  403b14:	2024      	movs	r0, #36	; 0x24
  403b16:	4629      	mov	r1, r5
  403b18:	2200      	movs	r2, #0
  403b1a:	47a0      	blx	r4

	// DW1000_writeReg(AON_ID, SUB, AON_WCFG_OFFSET, 0, AON_WCFG_LEN);

	// Load LDE microcode from ROM to RAM
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, 0x0000, 2);
  403b1c:	e9cd 8900 	strd	r8, r9, [sp]
  403b20:	9702      	str	r7, [sp, #8]
  403b22:	2036      	movs	r0, #54	; 0x36
  403b24:	4629      	mov	r1, r5
  403b26:	2200      	movs	r2, #0
  403b28:	47a0      	blx	r4
	 //DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, OTP_CTRL_LDELOAD, 2);
	 delay_ms(150);
  403b2a:	480c      	ldr	r0, [pc, #48]	; (403b5c <DW1000_initialise+0x1e4>)
  403b2c:	4b0c      	ldr	r3, [pc, #48]	; (403b60 <DW1000_initialise+0x1e8>)
  403b2e:	4798      	blx	r3
	// long temp = DW1000_readReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, PMSC_CTRL1_LEN);
	// DW1000_writeReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, (temp & 0xFFFDFFFF), PMSC_CTRL1_LEN);
	// DW1000_writeReg(OTP_IF_ID, SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	// delayMicroseconds(150);
	// DW1000_writeReg(PMSC_ID, SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}
  403b30:	b005      	add	sp, #20
  403b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403b36:	bf00      	nop
  403b38:	2502a907 	.word	0x2502a907
  403b3c:	00000000 	.word	0x00000000
  403b40:	371a011d 	.word	0x371a011d
  403b44:	00000000 	.word	0x00000000
  403b48:	08401009 	.word	0x08401009
  403b4c:	00000000 	.word	0x00000000
  403b50:	00403871 	.word	0x00403871
  403b54:	00441200 	.word	0x00441200
  403b58:	00086cc0 	.word	0x00086cc0
  403b5c:	0073c0b7 	.word	0x0073c0b7
  403b60:	20400001 	.word	0x20400001
  403b64:	29460033 	.word	0x29460033
  403b68:	00000000 	.word	0x00000000

00403b6c <DW1000_toggleGPIO_MODE>:

void DW1000_setSystemConfig(uint64_t buffer) {
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}

void DW1000_toggleGPIO_MODE() {
  403b6c:	b530      	push	{r4, r5, lr}
  403b6e:	b085      	sub	sp, #20
	 DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x001540, GPIO_MODE_LEN);
  403b70:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  403b74:	2300      	movs	r3, #0
  403b76:	e9cd 2300 	strd	r2, r3, [sp]
  403b7a:	2504      	movs	r5, #4
  403b7c:	9502      	str	r5, [sp, #8]
  403b7e:	2026      	movs	r0, #38	; 0x26
  403b80:	2101      	movs	r1, #1
  403b82:	2200      	movs	r2, #0
  403b84:	4c06      	ldr	r4, [pc, #24]	; (403ba0 <DW1000_toggleGPIO_MODE+0x34>)
  403b86:	47a0      	blx	r4
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x00000120, PMSC_LEDC_LEN);
  403b88:	f44f 7290 	mov.w	r2, #288	; 0x120
  403b8c:	2300      	movs	r3, #0
  403b8e:	e9cd 2300 	strd	r2, r3, [sp]
  403b92:	9502      	str	r5, [sp, #8]
  403b94:	2036      	movs	r0, #54	; 0x36
  403b96:	2101      	movs	r1, #1
  403b98:	2228      	movs	r2, #40	; 0x28
  403b9a:	47a0      	blx	r4
}
  403b9c:	b005      	add	sp, #20
  403b9e:	bd30      	pop	{r4, r5, pc}
  403ba0:	00403871 	.word	0x00403871

00403ba4 <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  403ba4:	b500      	push	{lr}
  403ba6:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403ba8:	17c1      	asrs	r1, r0, #31
  403baa:	e9cd 0100 	strd	r0, r1, [sp]
  403bae:	2305      	movs	r3, #5
  403bb0:	9302      	str	r3, [sp, #8]
  403bb2:	2008      	movs	r0, #8
  403bb4:	2100      	movs	r1, #0
  403bb6:	460a      	mov	r2, r1
  403bb8:	4b02      	ldr	r3, [pc, #8]	; (403bc4 <DW1000_setTxFrameControl+0x20>)
  403bba:	4798      	blx	r3
}
  403bbc:	b005      	add	sp, #20
  403bbe:	f85d fb04 	ldr.w	pc, [sp], #4
  403bc2:	bf00      	nop
  403bc4:	00403871 	.word	0x00403871

00403bc8 <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403bc8:	b510      	push	{r4, lr}
  403bca:	b084      	sub	sp, #16
  403bcc:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  403bce:	e9cd 2300 	strd	r2, r3, [sp]
  403bd2:	9b06      	ldr	r3, [sp, #24]
  403bd4:	9302      	str	r3, [sp, #8]
  403bd6:	2009      	movs	r0, #9
  403bd8:	2101      	movs	r1, #1
  403bda:	4622      	mov	r2, r4
  403bdc:	4b01      	ldr	r3, [pc, #4]	; (403be4 <DW1000_writeTxBuffer+0x1c>)
  403bde:	4798      	blx	r3
}
  403be0:	b004      	add	sp, #16
  403be2:	bd10      	pop	{r4, pc}
  403be4:	00403871 	.word	0x00403871

00403be8 <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  403be8:	b500      	push	{lr}
  403bea:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  403bec:	2202      	movs	r2, #2
  403bee:	2300      	movs	r3, #0
  403bf0:	e9cd 2300 	strd	r2, r3, [sp]
  403bf4:	2304      	movs	r3, #4
  403bf6:	9302      	str	r3, [sp, #8]
  403bf8:	200d      	movs	r0, #13
  403bfa:	2100      	movs	r1, #0
  403bfc:	460a      	mov	r2, r1
  403bfe:	4b02      	ldr	r3, [pc, #8]	; (403c08 <DW1000_startTx+0x20>)
  403c00:	4798      	blx	r3
}
  403c02:	b005      	add	sp, #20
  403c04:	f85d fb04 	ldr.w	pc, [sp], #4
  403c08:	00403871 	.word	0x00403871
  403c0c:	00000000 	.word	0x00000000

00403c10 <standUp>:
*  Author: to300
*/
#include "Gait.h"

//Stand up
void standUp( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  403c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c14:	ed2d 8b02 	vpush	{d8}
  403c18:	b085      	sub	sp, #20
  403c1a:	460d      	mov	r5, r1
  403c1c:	4614      	mov	r4, r2
  403c1e:	4698      	mov	r8, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403c20:	edd3 7a02 	vldr	s15, [r3, #8]
  403c24:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403c28:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 403f50 <standUp+0x340>
  403c2c:	eeb0 0a41 	vmov.f32	s0, s2
  403c30:	eef0 0a48 	vmov.f32	s1, s16
  403c34:	eef0 1a48 	vmov.f32	s3, s16
  403c38:	eeb0 2a48 	vmov.f32	s4, s16
  403c3c:	2001      	movs	r0, #1
  403c3e:	eef0 2a48 	vmov.f32	s5, s16
  403c42:	4ec4      	ldr	r6, [pc, #784]	; (403f54 <standUp+0x344>)
  403c44:	47b0      	blx	r6
  403c46:	ed85 0a00 	vstr	s0, [r5]
  403c4a:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403c4e:	edd8 7a02 	vldr	s15, [r8, #8]
  403c52:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403c56:	eeb0 0a41 	vmov.f32	s0, s2
  403c5a:	eef0 0a48 	vmov.f32	s1, s16
  403c5e:	eef0 1a48 	vmov.f32	s3, s16
  403c62:	eeb0 2a48 	vmov.f32	s4, s16
  403c66:	2000      	movs	r0, #0
  403c68:	eef0 2a48 	vmov.f32	s5, s16
  403c6c:	47b0      	blx	r6
  403c6e:	ed85 0a02 	vstr	s0, [r5, #8]
  403c72:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403c76:	edd8 7a02 	vldr	s15, [r8, #8]
  403c7a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403c7e:	eeb0 0a41 	vmov.f32	s0, s2
  403c82:	eef0 0a48 	vmov.f32	s1, s16
  403c86:	eef0 1a48 	vmov.f32	s3, s16
  403c8a:	eeb0 2a48 	vmov.f32	s4, s16
  403c8e:	2001      	movs	r0, #1
  403c90:	eef0 2a48 	vmov.f32	s5, s16
  403c94:	47b0      	blx	r6
  403c96:	ed85 0a04 	vstr	s0, [r5, #16]
  403c9a:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403c9e:	edd8 7a02 	vldr	s15, [r8, #8]
  403ca2:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403ca6:	eeb0 0a41 	vmov.f32	s0, s2
  403caa:	eef0 0a48 	vmov.f32	s1, s16
  403cae:	eef0 1a48 	vmov.f32	s3, s16
  403cb2:	eeb0 2a48 	vmov.f32	s4, s16
  403cb6:	2000      	movs	r0, #0
  403cb8:	eef0 2a48 	vmov.f32	s5, s16
  403cbc:	47b0      	blx	r6
  403cbe:	ed85 0a06 	vstr	s0, [r5, #24]
  403cc2:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403cc6:	edd8 7a02 	vldr	s15, [r8, #8]
  403cca:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403cce:	eeb0 0a41 	vmov.f32	s0, s2
  403cd2:	eef0 0a48 	vmov.f32	s1, s16
  403cd6:	eef0 1a48 	vmov.f32	s3, s16
  403cda:	eeb0 2a48 	vmov.f32	s4, s16
  403cde:	2001      	movs	r0, #1
  403ce0:	eef0 2a48 	vmov.f32	s5, s16
  403ce4:	47b0      	blx	r6
  403ce6:	ed85 0a08 	vstr	s0, [r5, #32]
  403cea:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403cee:	edd8 7a02 	vldr	s15, [r8, #8]
  403cf2:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  403cf6:	eeb0 0a41 	vmov.f32	s0, s2
  403cfa:	eef0 0a48 	vmov.f32	s1, s16
  403cfe:	eef0 1a48 	vmov.f32	s3, s16
  403d02:	eeb0 2a48 	vmov.f32	s4, s16
  403d06:	2000      	movs	r0, #0
  403d08:	eef0 2a48 	vmov.f32	s5, s16
  403d0c:	47b0      	blx	r6
  403d0e:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  403d12:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[0].Z);
  403d16:	9501      	str	r5, [sp, #4]
  403d18:	ed95 8a00 	vldr	s16, [r5]
  403d1c:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  403d20:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403d24:	f8df a248 	ldr.w	sl, [pc, #584]	; 403f70 <standUp+0x360>
  403d28:	ebc0 000b 	rsb	r0, r0, fp
  403d2c:	47d0      	blx	sl
  403d2e:	4606      	mov	r6, r0
  403d30:	460f      	mov	r7, r1
  403d32:	f8df 9240 	ldr.w	r9, [pc, #576]	; 403f74 <standUp+0x364>
  403d36:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403d3e:	ee17 0a90 	vmov	r0, s15
  403d42:	47c8      	blx	r9
  403d44:	2200      	movs	r2, #0
  403d46:	4b84      	ldr	r3, [pc, #528]	; (403f58 <standUp+0x348>)
  403d48:	4d84      	ldr	r5, [pc, #528]	; (403f5c <standUp+0x34c>)
  403d4a:	47a8      	blx	r5
  403d4c:	4602      	mov	r2, r0
  403d4e:	460b      	mov	r3, r1
  403d50:	4630      	mov	r0, r6
  403d52:	4639      	mov	r1, r7
  403d54:	4d82      	ldr	r5, [pc, #520]	; (403f60 <standUp+0x350>)
  403d56:	47a8      	blx	r5
  403d58:	a37b      	add	r3, pc, #492	; (adr r3, 403f48 <standUp+0x338>)
  403d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d5e:	4d81      	ldr	r5, [pc, #516]	; (403f64 <standUp+0x354>)
  403d60:	47a8      	blx	r5
  403d62:	4f81      	ldr	r7, [pc, #516]	; (403f68 <standUp+0x358>)
  403d64:	47b8      	blx	r7
  403d66:	eeb0 0a48 	vmov.f32	s0, s16
  403d6a:	ee00 0a90 	vmov	s1, r0
  403d6e:	9d01      	ldr	r5, [sp, #4]
  403d70:	ed95 1a01 	vldr	s2, [r5, #4]
  403d74:	4e7d      	ldr	r6, [pc, #500]	; (403f6c <standUp+0x35c>)
  403d76:	47b0      	blx	r6
  403d78:	ed84 0a00 	vstr	s0, [r4]
  403d7c:	edc4 0a01 	vstr	s1, [r4, #4]
  403d80:	ed84 1a02 	vstr	s2, [r4, #8]
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[1].Z);
  403d84:	9501      	str	r5, [sp, #4]
  403d86:	ed95 8a02 	vldr	s16, [r5, #8]
  403d8a:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403d8e:	ebc0 000b 	rsb	r0, r0, fp
  403d92:	47d0      	blx	sl
  403d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d98:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403da0:	ee17 0a90 	vmov	r0, s15
  403da4:	47c8      	blx	r9
  403da6:	2200      	movs	r2, #0
  403da8:	4b6b      	ldr	r3, [pc, #428]	; (403f58 <standUp+0x348>)
  403daa:	4d6c      	ldr	r5, [pc, #432]	; (403f5c <standUp+0x34c>)
  403dac:	47a8      	blx	r5
  403dae:	4602      	mov	r2, r0
  403db0:	460b      	mov	r3, r1
  403db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403db6:	4d6a      	ldr	r5, [pc, #424]	; (403f60 <standUp+0x350>)
  403db8:	47a8      	blx	r5
  403dba:	a363      	add	r3, pc, #396	; (adr r3, 403f48 <standUp+0x338>)
  403dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dc0:	4d68      	ldr	r5, [pc, #416]	; (403f64 <standUp+0x354>)
  403dc2:	47a8      	blx	r5
  403dc4:	47b8      	blx	r7
  403dc6:	eeb0 0a48 	vmov.f32	s0, s16
  403dca:	ee00 0a90 	vmov	s1, r0
  403dce:	9d01      	ldr	r5, [sp, #4]
  403dd0:	ed95 1a03 	vldr	s2, [r5, #12]
  403dd4:	47b0      	blx	r6
  403dd6:	ed84 0a03 	vstr	s0, [r4, #12]
  403dda:	edc4 0a04 	vstr	s1, [r4, #16]
  403dde:	ed84 1a05 	vstr	s2, [r4, #20]
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[2].Z);
  403de2:	9501      	str	r5, [sp, #4]
  403de4:	ed95 8a04 	vldr	s16, [r5, #16]
  403de8:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403dec:	ebc0 000b 	rsb	r0, r0, fp
  403df0:	47d0      	blx	sl
  403df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403df6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403dfe:	ee17 0a90 	vmov	r0, s15
  403e02:	47c8      	blx	r9
  403e04:	2200      	movs	r2, #0
  403e06:	4b54      	ldr	r3, [pc, #336]	; (403f58 <standUp+0x348>)
  403e08:	4d54      	ldr	r5, [pc, #336]	; (403f5c <standUp+0x34c>)
  403e0a:	47a8      	blx	r5
  403e0c:	4602      	mov	r2, r0
  403e0e:	460b      	mov	r3, r1
  403e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e14:	4d52      	ldr	r5, [pc, #328]	; (403f60 <standUp+0x350>)
  403e16:	47a8      	blx	r5
  403e18:	a34b      	add	r3, pc, #300	; (adr r3, 403f48 <standUp+0x338>)
  403e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e1e:	4d51      	ldr	r5, [pc, #324]	; (403f64 <standUp+0x354>)
  403e20:	47a8      	blx	r5
  403e22:	47b8      	blx	r7
  403e24:	eeb0 0a48 	vmov.f32	s0, s16
  403e28:	ee00 0a90 	vmov	s1, r0
  403e2c:	9d01      	ldr	r5, [sp, #4]
  403e2e:	ed95 1a05 	vldr	s2, [r5, #20]
  403e32:	47b0      	blx	r6
  403e34:	ed84 0a06 	vstr	s0, [r4, #24]
  403e38:	edc4 0a07 	vstr	s1, [r4, #28]
  403e3c:	ed84 1a08 	vstr	s2, [r4, #32]
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[3].Z);
  403e40:	9501      	str	r5, [sp, #4]
  403e42:	ed95 8a06 	vldr	s16, [r5, #24]
  403e46:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403e4a:	ebc0 000b 	rsb	r0, r0, fp
  403e4e:	47d0      	blx	sl
  403e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e54:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e5c:	ee17 0a90 	vmov	r0, s15
  403e60:	47c8      	blx	r9
  403e62:	2200      	movs	r2, #0
  403e64:	4b3c      	ldr	r3, [pc, #240]	; (403f58 <standUp+0x348>)
  403e66:	4d3d      	ldr	r5, [pc, #244]	; (403f5c <standUp+0x34c>)
  403e68:	47a8      	blx	r5
  403e6a:	4602      	mov	r2, r0
  403e6c:	460b      	mov	r3, r1
  403e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e72:	4d3b      	ldr	r5, [pc, #236]	; (403f60 <standUp+0x350>)
  403e74:	47a8      	blx	r5
  403e76:	a334      	add	r3, pc, #208	; (adr r3, 403f48 <standUp+0x338>)
  403e78:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e7c:	4d39      	ldr	r5, [pc, #228]	; (403f64 <standUp+0x354>)
  403e7e:	47a8      	blx	r5
  403e80:	47b8      	blx	r7
  403e82:	eeb0 0a48 	vmov.f32	s0, s16
  403e86:	ee00 0a90 	vmov	s1, r0
  403e8a:	9d01      	ldr	r5, [sp, #4]
  403e8c:	ed95 1a07 	vldr	s2, [r5, #28]
  403e90:	47b0      	blx	r6
  403e92:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  403e96:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
  403e9a:	ed84 1a0b 	vstr	s2, [r4, #44]	; 0x2c
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[4].Z);
  403e9e:	9501      	str	r5, [sp, #4]
  403ea0:	ed95 8a08 	vldr	s16, [r5, #32]
  403ea4:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403ea8:	ebc0 000b 	rsb	r0, r0, fp
  403eac:	47d0      	blx	sl
  403eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403eb2:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  403eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403eba:	ee17 0a90 	vmov	r0, s15
  403ebe:	47c8      	blx	r9
  403ec0:	2200      	movs	r2, #0
  403ec2:	4b25      	ldr	r3, [pc, #148]	; (403f58 <standUp+0x348>)
  403ec4:	4d25      	ldr	r5, [pc, #148]	; (403f5c <standUp+0x34c>)
  403ec6:	47a8      	blx	r5
  403ec8:	4602      	mov	r2, r0
  403eca:	460b      	mov	r3, r1
  403ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ed0:	4d23      	ldr	r5, [pc, #140]	; (403f60 <standUp+0x350>)
  403ed2:	47a8      	blx	r5
  403ed4:	a31c      	add	r3, pc, #112	; (adr r3, 403f48 <standUp+0x338>)
  403ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403eda:	4d22      	ldr	r5, [pc, #136]	; (403f64 <standUp+0x354>)
  403edc:	47a8      	blx	r5
  403ede:	47b8      	blx	r7
  403ee0:	eeb0 0a48 	vmov.f32	s0, s16
  403ee4:	ee00 0a90 	vmov	s1, r0
  403ee8:	9d01      	ldr	r5, [sp, #4]
  403eea:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  403eee:	47b0      	blx	r6
  403ef0:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  403ef4:	edc4 0a0d 	vstr	s1, [r4, #52]	; 0x34
  403ef8:	ed84 1a0e 	vstr	s2, [r4, #56]	; 0x38
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[5].Z);
  403efc:	9501      	str	r5, [sp, #4]
  403efe:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  403f02:	f8d8 000c 	ldr.w	r0, [r8, #12]
  403f06:	ebc0 000b 	rsb	r0, r0, fp
  403f0a:	47d0      	blx	sl
  403f0c:	4682      	mov	sl, r0
  403f0e:	468b      	mov	fp, r1
  403f10:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  403f14:	ee07 0a90 	vmov	s15, r0
  403f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403f1c:	ee17 0a90 	vmov	r0, s15
  403f20:	47c8      	blx	r9
  403f22:	2200      	movs	r2, #0
  403f24:	4b0c      	ldr	r3, [pc, #48]	; (403f58 <standUp+0x348>)
  403f26:	4d0d      	ldr	r5, [pc, #52]	; (403f5c <standUp+0x34c>)
  403f28:	47a8      	blx	r5
  403f2a:	4602      	mov	r2, r0
  403f2c:	460b      	mov	r3, r1
  403f2e:	4650      	mov	r0, sl
  403f30:	4659      	mov	r1, fp
  403f32:	4d0b      	ldr	r5, [pc, #44]	; (403f60 <standUp+0x350>)
  403f34:	47a8      	blx	r5
  403f36:	a304      	add	r3, pc, #16	; (adr r3, 403f48 <standUp+0x338>)
  403f38:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f3c:	4d09      	ldr	r5, [pc, #36]	; (403f64 <standUp+0x354>)
  403f3e:	47a8      	blx	r5
  403f40:	e01a      	b.n	403f78 <standUp+0x368>
  403f42:	bf00      	nop
  403f44:	f3af 8000 	nop.w
  403f48:	00000000 	.word	0x00000000
  403f4c:	4052c000 	.word	0x4052c000
  403f50:	00000000 	.word	0x00000000
  403f54:	00405ae1 	.word	0x00405ae1
  403f58:	40590000 	.word	0x40590000
  403f5c:	0040adb9 	.word	0x0040adb9
  403f60:	0040ab65 	.word	0x0040ab65
  403f64:	0040a801 	.word	0x0040a801
  403f68:	0040b0e9 	.word	0x0040b0e9
  403f6c:	00405d29 	.word	0x00405d29
  403f70:	0040aa99 	.word	0x0040aa99
  403f74:	0040aabd 	.word	0x0040aabd
  403f78:	47b8      	blx	r7
  403f7a:	eeb0 0a48 	vmov.f32	s0, s16
  403f7e:	ee00 0a90 	vmov	s1, r0
  403f82:	9b01      	ldr	r3, [sp, #4]
  403f84:	ed93 1a0b 	vldr	s2, [r3, #44]	; 0x2c
  403f88:	47b0      	blx	r6
  403f8a:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
  403f8e:	edc4 0a10 	vstr	s1, [r4, #64]	; 0x40
  403f92:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  403f96:	2000      	movs	r0, #0
  403f98:	ed94 0a00 	vldr	s0, [r4]
  403f9c:	edd4 0a01 	vldr	s1, [r4, #4]
  403fa0:	ed94 1a02 	vldr	s2, [r4, #8]
  403fa4:	4d17      	ldr	r5, [pc, #92]	; (404004 <standUp+0x3f4>)
  403fa6:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  403fa8:	2001      	movs	r0, #1
  403faa:	ed94 0a03 	vldr	s0, [r4, #12]
  403fae:	edd4 0a04 	vldr	s1, [r4, #16]
  403fb2:	ed94 1a05 	vldr	s2, [r4, #20]
  403fb6:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  403fb8:	2002      	movs	r0, #2
  403fba:	ed94 0a06 	vldr	s0, [r4, #24]
  403fbe:	edd4 0a07 	vldr	s1, [r4, #28]
  403fc2:	ed94 1a08 	vldr	s2, [r4, #32]
  403fc6:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  403fc8:	2003      	movs	r0, #3
  403fca:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  403fce:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
  403fd2:	ed94 1a0b 	vldr	s2, [r4, #44]	; 0x2c
  403fd6:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  403fd8:	2004      	movs	r0, #4
  403fda:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
  403fde:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
  403fe2:	ed94 1a0e 	vldr	s2, [r4, #56]	; 0x38
  403fe6:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  403fe8:	2005      	movs	r0, #5
  403fea:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
  403fee:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
  403ff2:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
  403ff6:	47a8      	blx	r5
}
  403ff8:	b005      	add	sp, #20
  403ffa:	ecbd 8b02 	vpop	{d8}
  403ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404002:	bf00      	nop
  404004:	00405f55 	.word	0x00405f55

00404008 <sitDown>:

void sitDown( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40400c:	ed2d 8b02 	vpush	{d8}
  404010:	b083      	sub	sp, #12
  404012:	460d      	mov	r5, r1
  404014:	4614      	mov	r4, r2
  404016:	4698      	mov	r8, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  404018:	edd3 7a02 	vldr	s15, [r3, #8]
  40401c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404020:	ed9f 8ac7 	vldr	s16, [pc, #796]	; 404340 <sitDown+0x338>
  404024:	eeb0 0a41 	vmov.f32	s0, s2
  404028:	eef0 0a48 	vmov.f32	s1, s16
  40402c:	eef0 1a48 	vmov.f32	s3, s16
  404030:	eeb0 2a48 	vmov.f32	s4, s16
  404034:	2001      	movs	r0, #1
  404036:	eef0 2a48 	vmov.f32	s5, s16
  40403a:	4ec2      	ldr	r6, [pc, #776]	; (404344 <sitDown+0x33c>)
  40403c:	47b0      	blx	r6
  40403e:	ed85 0a00 	vstr	s0, [r5]
  404042:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  404046:	edd8 7a02 	vldr	s15, [r8, #8]
  40404a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  40404e:	eeb0 0a41 	vmov.f32	s0, s2
  404052:	eef0 0a48 	vmov.f32	s1, s16
  404056:	eef0 1a48 	vmov.f32	s3, s16
  40405a:	eeb0 2a48 	vmov.f32	s4, s16
  40405e:	2000      	movs	r0, #0
  404060:	eef0 2a48 	vmov.f32	s5, s16
  404064:	47b0      	blx	r6
  404066:	ed85 0a02 	vstr	s0, [r5, #8]
  40406a:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  40406e:	edd8 7a02 	vldr	s15, [r8, #8]
  404072:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404076:	eeb0 0a41 	vmov.f32	s0, s2
  40407a:	eef0 0a48 	vmov.f32	s1, s16
  40407e:	eef0 1a48 	vmov.f32	s3, s16
  404082:	eeb0 2a48 	vmov.f32	s4, s16
  404086:	2001      	movs	r0, #1
  404088:	eef0 2a48 	vmov.f32	s5, s16
  40408c:	47b0      	blx	r6
  40408e:	ed85 0a04 	vstr	s0, [r5, #16]
  404092:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  404096:	edd8 7a02 	vldr	s15, [r8, #8]
  40409a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  40409e:	eeb0 0a41 	vmov.f32	s0, s2
  4040a2:	eef0 0a48 	vmov.f32	s1, s16
  4040a6:	eef0 1a48 	vmov.f32	s3, s16
  4040aa:	eeb0 2a48 	vmov.f32	s4, s16
  4040ae:	2000      	movs	r0, #0
  4040b0:	eef0 2a48 	vmov.f32	s5, s16
  4040b4:	47b0      	blx	r6
  4040b6:	ed85 0a06 	vstr	s0, [r5, #24]
  4040ba:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  4040be:	edd8 7a02 	vldr	s15, [r8, #8]
  4040c2:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4040c6:	eeb0 0a41 	vmov.f32	s0, s2
  4040ca:	eef0 0a48 	vmov.f32	s1, s16
  4040ce:	eef0 1a48 	vmov.f32	s3, s16
  4040d2:	eeb0 2a48 	vmov.f32	s4, s16
  4040d6:	2001      	movs	r0, #1
  4040d8:	eef0 2a48 	vmov.f32	s5, s16
  4040dc:	47b0      	blx	r6
  4040de:	ed85 0a08 	vstr	s0, [r5, #32]
  4040e2:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  4040e6:	edd8 7a02 	vldr	s15, [r8, #8]
  4040ea:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4040ee:	eeb0 0a41 	vmov.f32	s0, s2
  4040f2:	eef0 0a48 	vmov.f32	s1, s16
  4040f6:	eef0 1a48 	vmov.f32	s3, s16
  4040fa:	eeb0 2a48 	vmov.f32	s4, s16
  4040fe:	2000      	movs	r0, #0
  404100:	eef0 2a48 	vmov.f32	s5, s16
  404104:	47b0      	blx	r6
  404106:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  40410a:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[0].Z);
  40410e:	ed95 8a00 	vldr	s16, [r5]
  404112:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  404116:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40411a:	ebc0 000b 	rsb	r0, r0, fp
  40411e:	4b8a      	ldr	r3, [pc, #552]	; (404348 <sitDown+0x340>)
  404120:	4798      	blx	r3
  404122:	e9cd 0100 	strd	r0, r1, [sp]
  404126:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  40412a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40412e:	ee17 0a90 	vmov	r0, s15
  404132:	4b86      	ldr	r3, [pc, #536]	; (40434c <sitDown+0x344>)
  404134:	4798      	blx	r3
  404136:	4602      	mov	r2, r0
  404138:	460b      	mov	r3, r1
  40413a:	2000      	movs	r0, #0
  40413c:	4984      	ldr	r1, [pc, #528]	; (404350 <sitDown+0x348>)
  40413e:	4e85      	ldr	r6, [pc, #532]	; (404354 <sitDown+0x34c>)
  404140:	47b0      	blx	r6
  404142:	2200      	movs	r2, #0
  404144:	4b82      	ldr	r3, [pc, #520]	; (404350 <sitDown+0x348>)
  404146:	4e84      	ldr	r6, [pc, #528]	; (404358 <sitDown+0x350>)
  404148:	47b0      	blx	r6
  40414a:	4602      	mov	r2, r0
  40414c:	460b      	mov	r3, r1
  40414e:	f8df a214 	ldr.w	sl, [pc, #532]	; 404364 <sitDown+0x35c>
  404152:	e9dd 0100 	ldrd	r0, r1, [sp]
  404156:	47d0      	blx	sl
  404158:	f8df 920c 	ldr.w	r9, [pc, #524]	; 404368 <sitDown+0x360>
  40415c:	a376      	add	r3, pc, #472	; (adr r3, 404338 <sitDown+0x330>)
  40415e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404162:	47c8      	blx	r9
  404164:	4f7d      	ldr	r7, [pc, #500]	; (40435c <sitDown+0x354>)
  404166:	47b8      	blx	r7
  404168:	eeb0 0a48 	vmov.f32	s0, s16
  40416c:	ee00 0a90 	vmov	s1, r0
  404170:	ed95 1a01 	vldr	s2, [r5, #4]
  404174:	4b7a      	ldr	r3, [pc, #488]	; (404360 <sitDown+0x358>)
  404176:	4798      	blx	r3
  404178:	ed84 0a00 	vstr	s0, [r4]
  40417c:	edc4 0a01 	vstr	s1, [r4, #4]
  404180:	ed84 1a02 	vstr	s2, [r4, #8]
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[1].Z);
  404184:	ed95 8a02 	vldr	s16, [r5, #8]
  404188:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40418c:	ebc0 000b 	rsb	r0, r0, fp
  404190:	4b6d      	ldr	r3, [pc, #436]	; (404348 <sitDown+0x340>)
  404192:	4798      	blx	r3
  404194:	e9cd 0100 	strd	r0, r1, [sp]
  404198:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  40419c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041a0:	ee17 0a90 	vmov	r0, s15
  4041a4:	4b69      	ldr	r3, [pc, #420]	; (40434c <sitDown+0x344>)
  4041a6:	4798      	blx	r3
  4041a8:	4602      	mov	r2, r0
  4041aa:	460b      	mov	r3, r1
  4041ac:	2000      	movs	r0, #0
  4041ae:	4968      	ldr	r1, [pc, #416]	; (404350 <sitDown+0x348>)
  4041b0:	4e68      	ldr	r6, [pc, #416]	; (404354 <sitDown+0x34c>)
  4041b2:	47b0      	blx	r6
  4041b4:	2200      	movs	r2, #0
  4041b6:	4b66      	ldr	r3, [pc, #408]	; (404350 <sitDown+0x348>)
  4041b8:	4e67      	ldr	r6, [pc, #412]	; (404358 <sitDown+0x350>)
  4041ba:	47b0      	blx	r6
  4041bc:	4602      	mov	r2, r0
  4041be:	460b      	mov	r3, r1
  4041c0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4041c4:	47d0      	blx	sl
  4041c6:	a35c      	add	r3, pc, #368	; (adr r3, 404338 <sitDown+0x330>)
  4041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041cc:	47c8      	blx	r9
  4041ce:	47b8      	blx	r7
  4041d0:	eeb0 0a48 	vmov.f32	s0, s16
  4041d4:	ee00 0a90 	vmov	s1, r0
  4041d8:	ed95 1a03 	vldr	s2, [r5, #12]
  4041dc:	4b60      	ldr	r3, [pc, #384]	; (404360 <sitDown+0x358>)
  4041de:	4798      	blx	r3
  4041e0:	ed84 0a03 	vstr	s0, [r4, #12]
  4041e4:	edc4 0a04 	vstr	s1, [r4, #16]
  4041e8:	ed84 1a05 	vstr	s2, [r4, #20]
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[2].Z);
  4041ec:	ed95 8a04 	vldr	s16, [r5, #16]
  4041f0:	f8d8 000c 	ldr.w	r0, [r8, #12]
  4041f4:	ebc0 000b 	rsb	r0, r0, fp
  4041f8:	4b53      	ldr	r3, [pc, #332]	; (404348 <sitDown+0x340>)
  4041fa:	4798      	blx	r3
  4041fc:	e9cd 0100 	strd	r0, r1, [sp]
  404200:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  404204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404208:	ee17 0a90 	vmov	r0, s15
  40420c:	4b4f      	ldr	r3, [pc, #316]	; (40434c <sitDown+0x344>)
  40420e:	4798      	blx	r3
  404210:	4602      	mov	r2, r0
  404212:	460b      	mov	r3, r1
  404214:	2000      	movs	r0, #0
  404216:	494e      	ldr	r1, [pc, #312]	; (404350 <sitDown+0x348>)
  404218:	4e4e      	ldr	r6, [pc, #312]	; (404354 <sitDown+0x34c>)
  40421a:	47b0      	blx	r6
  40421c:	2200      	movs	r2, #0
  40421e:	4b4c      	ldr	r3, [pc, #304]	; (404350 <sitDown+0x348>)
  404220:	4e4d      	ldr	r6, [pc, #308]	; (404358 <sitDown+0x350>)
  404222:	47b0      	blx	r6
  404224:	4602      	mov	r2, r0
  404226:	460b      	mov	r3, r1
  404228:	e9dd 0100 	ldrd	r0, r1, [sp]
  40422c:	47d0      	blx	sl
  40422e:	a342      	add	r3, pc, #264	; (adr r3, 404338 <sitDown+0x330>)
  404230:	e9d3 2300 	ldrd	r2, r3, [r3]
  404234:	47c8      	blx	r9
  404236:	47b8      	blx	r7
  404238:	eeb0 0a48 	vmov.f32	s0, s16
  40423c:	ee00 0a90 	vmov	s1, r0
  404240:	ed95 1a05 	vldr	s2, [r5, #20]
  404244:	4b46      	ldr	r3, [pc, #280]	; (404360 <sitDown+0x358>)
  404246:	4798      	blx	r3
  404248:	ed84 0a06 	vstr	s0, [r4, #24]
  40424c:	edc4 0a07 	vstr	s1, [r4, #28]
  404250:	ed84 1a08 	vstr	s2, [r4, #32]
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[3].Z);
  404254:	ed95 8a06 	vldr	s16, [r5, #24]
  404258:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40425c:	ebc0 000b 	rsb	r0, r0, fp
  404260:	4b39      	ldr	r3, [pc, #228]	; (404348 <sitDown+0x340>)
  404262:	4798      	blx	r3
  404264:	e9cd 0100 	strd	r0, r1, [sp]
  404268:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  40426c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404270:	ee17 0a90 	vmov	r0, s15
  404274:	4b35      	ldr	r3, [pc, #212]	; (40434c <sitDown+0x344>)
  404276:	4798      	blx	r3
  404278:	4602      	mov	r2, r0
  40427a:	460b      	mov	r3, r1
  40427c:	2000      	movs	r0, #0
  40427e:	4934      	ldr	r1, [pc, #208]	; (404350 <sitDown+0x348>)
  404280:	4e34      	ldr	r6, [pc, #208]	; (404354 <sitDown+0x34c>)
  404282:	47b0      	blx	r6
  404284:	2200      	movs	r2, #0
  404286:	4b32      	ldr	r3, [pc, #200]	; (404350 <sitDown+0x348>)
  404288:	4e33      	ldr	r6, [pc, #204]	; (404358 <sitDown+0x350>)
  40428a:	47b0      	blx	r6
  40428c:	4602      	mov	r2, r0
  40428e:	460b      	mov	r3, r1
  404290:	e9dd 0100 	ldrd	r0, r1, [sp]
  404294:	47d0      	blx	sl
  404296:	a328      	add	r3, pc, #160	; (adr r3, 404338 <sitDown+0x330>)
  404298:	e9d3 2300 	ldrd	r2, r3, [r3]
  40429c:	47c8      	blx	r9
  40429e:	47b8      	blx	r7
  4042a0:	eeb0 0a48 	vmov.f32	s0, s16
  4042a4:	ee00 0a90 	vmov	s1, r0
  4042a8:	ed95 1a07 	vldr	s2, [r5, #28]
  4042ac:	4b2c      	ldr	r3, [pc, #176]	; (404360 <sitDown+0x358>)
  4042ae:	4798      	blx	r3
  4042b0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  4042b4:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
  4042b8:	ed84 1a0b 	vstr	s2, [r4, #44]	; 0x2c
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[4].Z);
  4042bc:	ed95 8a08 	vldr	s16, [r5, #32]
  4042c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
  4042c4:	ebc0 000b 	rsb	r0, r0, fp
  4042c8:	4b1f      	ldr	r3, [pc, #124]	; (404348 <sitDown+0x340>)
  4042ca:	4798      	blx	r3
  4042cc:	e9cd 0100 	strd	r0, r1, [sp]
  4042d0:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
  4042d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4042d8:	ee17 0a90 	vmov	r0, s15
  4042dc:	4b1b      	ldr	r3, [pc, #108]	; (40434c <sitDown+0x344>)
  4042de:	4798      	blx	r3
  4042e0:	4602      	mov	r2, r0
  4042e2:	460b      	mov	r3, r1
  4042e4:	2000      	movs	r0, #0
  4042e6:	491a      	ldr	r1, [pc, #104]	; (404350 <sitDown+0x348>)
  4042e8:	4e1a      	ldr	r6, [pc, #104]	; (404354 <sitDown+0x34c>)
  4042ea:	47b0      	blx	r6
  4042ec:	2200      	movs	r2, #0
  4042ee:	4b18      	ldr	r3, [pc, #96]	; (404350 <sitDown+0x348>)
  4042f0:	4e19      	ldr	r6, [pc, #100]	; (404358 <sitDown+0x350>)
  4042f2:	47b0      	blx	r6
  4042f4:	4602      	mov	r2, r0
  4042f6:	460b      	mov	r3, r1
  4042f8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4042fc:	47d0      	blx	sl
  4042fe:	a30e      	add	r3, pc, #56	; (adr r3, 404338 <sitDown+0x330>)
  404300:	e9d3 2300 	ldrd	r2, r3, [r3]
  404304:	47c8      	blx	r9
  404306:	47b8      	blx	r7
  404308:	eeb0 0a48 	vmov.f32	s0, s16
  40430c:	ee00 0a90 	vmov	s1, r0
  404310:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  404314:	4b12      	ldr	r3, [pc, #72]	; (404360 <sitDown+0x358>)
  404316:	4798      	blx	r3
  404318:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  40431c:	edc4 0a0d 	vstr	s1, [r4, #52]	; 0x34
  404320:	ed84 1a0e 	vstr	s2, [r4, #56]	; 0x38
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[5].Z);
  404324:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  404328:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40432c:	ebc0 000b 	rsb	r0, r0, fp
  404330:	e01c      	b.n	40436c <sitDown+0x364>
  404332:	bf00      	nop
  404334:	f3af 8000 	nop.w
  404338:	00000000 	.word	0x00000000
  40433c:	4052c000 	.word	0x4052c000
  404340:	00000000 	.word	0x00000000
  404344:	00405ae1 	.word	0x00405ae1
  404348:	0040aa99 	.word	0x0040aa99
  40434c:	0040aabd 	.word	0x0040aabd
  404350:	40590000 	.word	0x40590000
  404354:	0040a7fd 	.word	0x0040a7fd
  404358:	0040adb9 	.word	0x0040adb9
  40435c:	0040b0e9 	.word	0x0040b0e9
  404360:	00405d29 	.word	0x00405d29
  404364:	0040ab65 	.word	0x0040ab65
  404368:	0040a801 	.word	0x0040a801
  40436c:	4b34      	ldr	r3, [pc, #208]	; (404440 <sitDown+0x438>)
  40436e:	4798      	blx	r3
  404370:	e9cd 0100 	strd	r0, r1, [sp]
  404374:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  404378:	ee07 0a90 	vmov	s15, r0
  40437c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404380:	ee17 0a90 	vmov	r0, s15
  404384:	4b2f      	ldr	r3, [pc, #188]	; (404444 <sitDown+0x43c>)
  404386:	4798      	blx	r3
  404388:	4602      	mov	r2, r0
  40438a:	460b      	mov	r3, r1
  40438c:	2000      	movs	r0, #0
  40438e:	492e      	ldr	r1, [pc, #184]	; (404448 <sitDown+0x440>)
  404390:	4e2e      	ldr	r6, [pc, #184]	; (40444c <sitDown+0x444>)
  404392:	47b0      	blx	r6
  404394:	2200      	movs	r2, #0
  404396:	4b2c      	ldr	r3, [pc, #176]	; (404448 <sitDown+0x440>)
  404398:	4e2d      	ldr	r6, [pc, #180]	; (404450 <sitDown+0x448>)
  40439a:	47b0      	blx	r6
  40439c:	4602      	mov	r2, r0
  40439e:	460b      	mov	r3, r1
  4043a0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4043a4:	47d0      	blx	sl
  4043a6:	a324      	add	r3, pc, #144	; (adr r3, 404438 <sitDown+0x430>)
  4043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043ac:	47c8      	blx	r9
  4043ae:	47b8      	blx	r7
  4043b0:	eeb0 0a48 	vmov.f32	s0, s16
  4043b4:	ee00 0a90 	vmov	s1, r0
  4043b8:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
  4043bc:	4b25      	ldr	r3, [pc, #148]	; (404454 <sitDown+0x44c>)
  4043be:	4798      	blx	r3
  4043c0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
  4043c4:	edc4 0a10 	vstr	s1, [r4, #64]	; 0x40
  4043c8:	ed84 1a11 	vstr	s2, [r4, #68]	; 0x44
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  4043cc:	2000      	movs	r0, #0
  4043ce:	ed94 0a00 	vldr	s0, [r4]
  4043d2:	edd4 0a01 	vldr	s1, [r4, #4]
  4043d6:	ed94 1a02 	vldr	s2, [r4, #8]
  4043da:	4d1f      	ldr	r5, [pc, #124]	; (404458 <sitDown+0x450>)
  4043dc:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  4043de:	2001      	movs	r0, #1
  4043e0:	ed94 0a03 	vldr	s0, [r4, #12]
  4043e4:	edd4 0a04 	vldr	s1, [r4, #16]
  4043e8:	ed94 1a05 	vldr	s2, [r4, #20]
  4043ec:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  4043ee:	2002      	movs	r0, #2
  4043f0:	ed94 0a06 	vldr	s0, [r4, #24]
  4043f4:	edd4 0a07 	vldr	s1, [r4, #28]
  4043f8:	ed94 1a08 	vldr	s2, [r4, #32]
  4043fc:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  4043fe:	2003      	movs	r0, #3
  404400:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
  404404:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
  404408:	ed94 1a0b 	vldr	s2, [r4, #44]	; 0x2c
  40440c:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  40440e:	2004      	movs	r0, #4
  404410:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
  404414:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
  404418:	ed94 1a0e 	vldr	s2, [r4, #56]	; 0x38
  40441c:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  40441e:	2005      	movs	r0, #5
  404420:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
  404424:	edd4 0a10 	vldr	s1, [r4, #64]	; 0x40
  404428:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
  40442c:	47a8      	blx	r5
}
  40442e:	b003      	add	sp, #12
  404430:	ecbd 8b02 	vpop	{d8}
  404434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404438:	00000000 	.word	0x00000000
  40443c:	4052c000 	.word	0x4052c000
  404440:	0040aa99 	.word	0x0040aa99
  404444:	0040aabd 	.word	0x0040aabd
  404448:	40590000 	.word	0x40590000
  40444c:	0040a7fd 	.word	0x0040a7fd
  404450:	0040adb9 	.word	0x0040adb9
  404454:	00405d29 	.word	0x00405d29
  404458:	00405f55 	.word	0x00405f55
  40445c:	00000000 	.word	0x00000000

00404460 <Gait0>:

//default, sinusoid based paten
void Gait0( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404464:	ed2d 8b04 	vpush	{d8-d9}
  404468:	b083      	sub	sp, #12
  40446a:	4681      	mov	r9, r0
  40446c:	460d      	mov	r5, r1
  40446e:	4690      	mov	r8, r2
  404470:	461c      	mov	r4, r3

	ofst[0] = ((float)hexabot_walk->i+(0*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404472:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
  404476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40447a:	ed9f 8acf 	vldr	s16, [pc, #828]	; 4047b8 <Gait0+0x358>
  40447e:	ee77 7a88 	vadd.f32	s15, s15, s16
  404482:	ed93 7a06 	vldr	s14, [r3, #24]
  404486:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  40448a:	4ecc      	ldr	r6, [pc, #816]	; (4047bc <Gait0+0x35c>)
  40448c:	eec7 7a87 	vdiv.f32	s15, s15, s14
  404490:	ee17 0a90 	vmov	r0, s15
  404494:	47b0      	blx	r6
  404496:	4602      	mov	r2, r0
  404498:	460b      	mov	r3, r1
  40449a:	4fc9      	ldr	r7, [pc, #804]	; (4047c0 <Gait0+0x360>)
  40449c:	47b8      	blx	r7
  40449e:	f8df a330 	ldr.w	sl, [pc, #816]	; 4047d0 <Gait0+0x370>
  4044a2:	a3c3      	add	r3, pc, #780	; (adr r3, 4047b0 <Gait0+0x350>)
  4044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044a8:	47d0      	blx	sl
  4044aa:	4bc6      	ldr	r3, [pc, #792]	; (4047c4 <Gait0+0x364>)
  4044ac:	4798      	blx	r3
  4044ae:	ee08 0a90 	vmov	s17, r0
  4044b2:	f8c9 0000 	str.w	r0, [r9]
	ofst[1] = ((float)hexabot_walk->i+(1*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4044b6:	69a3      	ldr	r3, [r4, #24]
  4044b8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4044bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4044c0:	f8df b310 	ldr.w	fp, [pc, #784]	; 4047d4 <Gait0+0x374>
  4044c4:	fb8b 1203 	smull	r1, r2, fp, r3
  4044c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  4044cc:	ee07 2a10 	vmov	s14, r2
  4044d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4044d4:	ee37 7a87 	vadd.f32	s14, s15, s14
  4044d8:	ee07 3a90 	vmov	s15, r3
  4044dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4044e0:	eec7 7a27 	vdiv.f32	s15, s14, s15
  4044e4:	ee17 0a90 	vmov	r0, s15
  4044e8:	47b0      	blx	r6
  4044ea:	4602      	mov	r2, r0
  4044ec:	460b      	mov	r3, r1
  4044ee:	47b8      	blx	r7
  4044f0:	a3af      	add	r3, pc, #700	; (adr r3, 4047b0 <Gait0+0x350>)
  4044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4044f6:	47d0      	blx	sl
  4044f8:	4bb2      	ldr	r3, [pc, #712]	; (4047c4 <Gait0+0x364>)
  4044fa:	4798      	blx	r3
  4044fc:	f8c9 0004 	str.w	r0, [r9, #4]
	ofst[2] = ((float)hexabot_walk->i+(2*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404500:	69a2      	ldr	r2, [r4, #24]
  404502:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  40450a:	fb8b 1302 	smull	r1, r3, fp, r2
  40450e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  404512:	005b      	lsls	r3, r3, #1
  404514:	ee07 3a90 	vmov	s15, r3
  404518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40451c:	ee77 7a27 	vadd.f32	s15, s14, s15
  404520:	ee07 2a10 	vmov	s14, r2
  404524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404528:	eec7 7a87 	vdiv.f32	s15, s15, s14
  40452c:	ee17 0a90 	vmov	r0, s15
  404530:	47b0      	blx	r6
  404532:	4602      	mov	r2, r0
  404534:	460b      	mov	r3, r1
  404536:	47b8      	blx	r7
  404538:	a39d      	add	r3, pc, #628	; (adr r3, 4047b0 <Gait0+0x350>)
  40453a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40453e:	47d0      	blx	sl
  404540:	4ba0      	ldr	r3, [pc, #640]	; (4047c4 <Gait0+0x364>)
  404542:	4798      	blx	r3
  404544:	f8c9 0008 	str.w	r0, [r9, #8]
	ofst[3] = ((float)hexabot_walk->i+(3*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404548:	69a2      	ldr	r2, [r4, #24]
  40454a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  40454e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404552:	fb8b 1302 	smull	r1, r3, fp, r2
  404556:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  40455a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40455e:	ee07 3a90 	vmov	s15, r3
  404562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404566:	ee77 7a27 	vadd.f32	s15, s14, s15
  40456a:	ee07 2a10 	vmov	s14, r2
  40456e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404572:	eec7 7a87 	vdiv.f32	s15, s15, s14
  404576:	ee17 0a90 	vmov	r0, s15
  40457a:	47b0      	blx	r6
  40457c:	4602      	mov	r2, r0
  40457e:	460b      	mov	r3, r1
  404580:	47b8      	blx	r7
  404582:	a38b      	add	r3, pc, #556	; (adr r3, 4047b0 <Gait0+0x350>)
  404584:	e9d3 2300 	ldrd	r2, r3, [r3]
  404588:	47d0      	blx	sl
  40458a:	4b8e      	ldr	r3, [pc, #568]	; (4047c4 <Gait0+0x364>)
  40458c:	4798      	blx	r3
  40458e:	f8c9 000c 	str.w	r0, [r9, #12]
	ofst[4] = ((float)hexabot_walk->i+(4*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404592:	69a2      	ldr	r2, [r4, #24]
  404594:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  40459c:	fb8b 1302 	smull	r1, r3, fp, r2
  4045a0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  4045a4:	009b      	lsls	r3, r3, #2
  4045a6:	ee07 3a90 	vmov	s15, r3
  4045aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4045ae:	ee77 7a27 	vadd.f32	s15, s14, s15
  4045b2:	ee07 2a10 	vmov	s14, r2
  4045b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4045ba:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4045be:	ee17 0a90 	vmov	r0, s15
  4045c2:	47b0      	blx	r6
  4045c4:	4602      	mov	r2, r0
  4045c6:	460b      	mov	r3, r1
  4045c8:	47b8      	blx	r7
  4045ca:	a379      	add	r3, pc, #484	; (adr r3, 4047b0 <Gait0+0x350>)
  4045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045d0:	47d0      	blx	sl
  4045d2:	4b7c      	ldr	r3, [pc, #496]	; (4047c4 <Gait0+0x364>)
  4045d4:	4798      	blx	r3
  4045d6:	f8c9 0010 	str.w	r0, [r9, #16]
	ofst[5] = ((float)hexabot_walk->i+(5*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4045da:	69a2      	ldr	r2, [r4, #24]
  4045dc:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4045e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4045e4:	fb8b 1302 	smull	r1, r3, fp, r2
  4045e8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  4045ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4045f0:	ee07 3a90 	vmov	s15, r3
  4045f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4045f8:	ee77 7a27 	vadd.f32	s15, s14, s15
  4045fc:	ee07 2a10 	vmov	s14, r2
  404600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404604:	eec7 7a87 	vdiv.f32	s15, s15, s14
  404608:	ee17 0a90 	vmov	r0, s15
  40460c:	47b0      	blx	r6
  40460e:	4602      	mov	r2, r0
  404610:	460b      	mov	r3, r1
  404612:	47b8      	blx	r7
  404614:	a366      	add	r3, pc, #408	; (adr r3, 4047b0 <Gait0+0x350>)
  404616:	e9d3 2300 	ldrd	r2, r3, [r3]
  40461a:	47d0      	blx	sl
  40461c:	4b69      	ldr	r3, [pc, #420]	; (4047c4 <Gait0+0x364>)
  40461e:	4798      	blx	r3
  404620:	f8c9 0014 	str.w	r0, [r9, #20]
	
	xzS[0] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[0]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  404624:	ee18 0a90 	vmov	r0, s17
  404628:	47b0      	blx	r6
  40462a:	ec41 0b10 	vmov	d0, r0, r1
  40462e:	4b66      	ldr	r3, [pc, #408]	; (4047c8 <Gait0+0x368>)
  404630:	4798      	blx	r3
  404632:	eeb0 9a40 	vmov.f32	s18, s0
  404636:	eef0 9a60 	vmov.f32	s19, s1
  40463a:	edd4 7a02 	vldr	s15, [r4, #8]
  40463e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404642:	6960      	ldr	r0, [r4, #20]
  404644:	4b61      	ldr	r3, [pc, #388]	; (4047cc <Gait0+0x36c>)
  404646:	4798      	blx	r3
  404648:	ec53 2b19 	vmov	r2, r3, d9
  40464c:	47d0      	blx	sl
  40464e:	4b5d      	ldr	r3, [pc, #372]	; (4047c4 <Gait0+0x364>)
  404650:	4798      	blx	r3
  404652:	eeb0 0a68 	vmov.f32	s0, s17
  404656:	ee00 0a90 	vmov	s1, r0
  40465a:	eeb0 1a68 	vmov.f32	s2, s17
  40465e:	eef0 1a48 	vmov.f32	s3, s16
  404662:	ed94 2a01 	vldr	s4, [r4, #4]
  404666:	2001      	movs	r0, #1
  404668:	edd4 2a00 	vldr	s5, [r4]
  40466c:	f8df b168 	ldr.w	fp, [pc, #360]	; 4047d8 <Gait0+0x378>
  404670:	47d8      	blx	fp
  404672:	ed85 0a00 	vstr	s0, [r5]
  404676:	edc5 0a01 	vstr	s1, [r5, #4]
	xzS[1] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[1]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  40467a:	f8d9 0004 	ldr.w	r0, [r9, #4]
  40467e:	47b0      	blx	r6
  404680:	ec41 0b10 	vmov	d0, r0, r1
  404684:	4b50      	ldr	r3, [pc, #320]	; (4047c8 <Gait0+0x368>)
  404686:	4798      	blx	r3
  404688:	eeb0 9a40 	vmov.f32	s18, s0
  40468c:	eef0 9a60 	vmov.f32	s19, s1
  404690:	edd4 7a02 	vldr	s15, [r4, #8]
  404694:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404698:	6960      	ldr	r0, [r4, #20]
  40469a:	4b4c      	ldr	r3, [pc, #304]	; (4047cc <Gait0+0x36c>)
  40469c:	4798      	blx	r3
  40469e:	ec53 2b19 	vmov	r2, r3, d9
  4046a2:	47d0      	blx	sl
  4046a4:	4b47      	ldr	r3, [pc, #284]	; (4047c4 <Gait0+0x364>)
  4046a6:	4798      	blx	r3
  4046a8:	eeb0 0a68 	vmov.f32	s0, s17
  4046ac:	ee00 0a90 	vmov	s1, r0
  4046b0:	eeb0 1a68 	vmov.f32	s2, s17
  4046b4:	eef0 1a48 	vmov.f32	s3, s16
  4046b8:	ed94 2a01 	vldr	s4, [r4, #4]
  4046bc:	2000      	movs	r0, #0
  4046be:	edd4 2a00 	vldr	s5, [r4]
  4046c2:	47d8      	blx	fp
  4046c4:	ed85 0a02 	vstr	s0, [r5, #8]
  4046c8:	edc5 0a03 	vstr	s1, [r5, #12]
	xzS[2] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[2]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  4046cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4046d0:	47b0      	blx	r6
  4046d2:	ec41 0b10 	vmov	d0, r0, r1
  4046d6:	4b3c      	ldr	r3, [pc, #240]	; (4047c8 <Gait0+0x368>)
  4046d8:	4798      	blx	r3
  4046da:	eeb0 9a40 	vmov.f32	s18, s0
  4046de:	eef0 9a60 	vmov.f32	s19, s1
  4046e2:	edd4 7a02 	vldr	s15, [r4, #8]
  4046e6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4046ea:	6960      	ldr	r0, [r4, #20]
  4046ec:	4b37      	ldr	r3, [pc, #220]	; (4047cc <Gait0+0x36c>)
  4046ee:	4798      	blx	r3
  4046f0:	ec53 2b19 	vmov	r2, r3, d9
  4046f4:	47d0      	blx	sl
  4046f6:	4b33      	ldr	r3, [pc, #204]	; (4047c4 <Gait0+0x364>)
  4046f8:	4798      	blx	r3
  4046fa:	eeb0 0a68 	vmov.f32	s0, s17
  4046fe:	ee00 0a90 	vmov	s1, r0
  404702:	eeb0 1a68 	vmov.f32	s2, s17
  404706:	eef0 1a48 	vmov.f32	s3, s16
  40470a:	ed94 2a01 	vldr	s4, [r4, #4]
  40470e:	2001      	movs	r0, #1
  404710:	edd4 2a00 	vldr	s5, [r4]
  404714:	47d8      	blx	fp
  404716:	ed85 0a04 	vstr	s0, [r5, #16]
  40471a:	edc5 0a05 	vstr	s1, [r5, #20]
	xzS[3] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[3]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  40471e:	f8d9 000c 	ldr.w	r0, [r9, #12]
  404722:	47b0      	blx	r6
  404724:	ec41 0b10 	vmov	d0, r0, r1
  404728:	4b27      	ldr	r3, [pc, #156]	; (4047c8 <Gait0+0x368>)
  40472a:	4798      	blx	r3
  40472c:	eeb0 9a40 	vmov.f32	s18, s0
  404730:	eef0 9a60 	vmov.f32	s19, s1
  404734:	edd4 7a02 	vldr	s15, [r4, #8]
  404738:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40473c:	6960      	ldr	r0, [r4, #20]
  40473e:	4b23      	ldr	r3, [pc, #140]	; (4047cc <Gait0+0x36c>)
  404740:	4798      	blx	r3
  404742:	ec53 2b19 	vmov	r2, r3, d9
  404746:	47d0      	blx	sl
  404748:	4b1e      	ldr	r3, [pc, #120]	; (4047c4 <Gait0+0x364>)
  40474a:	4798      	blx	r3
  40474c:	eeb0 0a68 	vmov.f32	s0, s17
  404750:	ee00 0a90 	vmov	s1, r0
  404754:	eeb0 1a68 	vmov.f32	s2, s17
  404758:	eef0 1a48 	vmov.f32	s3, s16
  40475c:	ed94 2a01 	vldr	s4, [r4, #4]
  404760:	2000      	movs	r0, #0
  404762:	edd4 2a00 	vldr	s5, [r4]
  404766:	47d8      	blx	fp
  404768:	ed85 0a06 	vstr	s0, [r5, #24]
  40476c:	edc5 0a07 	vstr	s1, [r5, #28]
	xzS[4] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[4]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  404770:	f8d9 0010 	ldr.w	r0, [r9, #16]
  404774:	47b0      	blx	r6
  404776:	ec41 0b10 	vmov	d0, r0, r1
  40477a:	4b13      	ldr	r3, [pc, #76]	; (4047c8 <Gait0+0x368>)
  40477c:	4798      	blx	r3
  40477e:	eeb0 9a40 	vmov.f32	s18, s0
  404782:	eef0 9a60 	vmov.f32	s19, s1
  404786:	edd4 7a02 	vldr	s15, [r4, #8]
  40478a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40478e:	6960      	ldr	r0, [r4, #20]
  404790:	4b0e      	ldr	r3, [pc, #56]	; (4047cc <Gait0+0x36c>)
  404792:	4798      	blx	r3
  404794:	ec53 2b19 	vmov	r2, r3, d9
  404798:	47d0      	blx	sl
  40479a:	4b0a      	ldr	r3, [pc, #40]	; (4047c4 <Gait0+0x364>)
  40479c:	4798      	blx	r3
  40479e:	eeb0 0a68 	vmov.f32	s0, s17
  4047a2:	ee00 0a90 	vmov	s1, r0
  4047a6:	eeb0 1a68 	vmov.f32	s2, s17
  4047aa:	eef0 1a48 	vmov.f32	s3, s16
  4047ae:	e015      	b.n	4047dc <Gait0+0x37c>
  4047b0:	54442d18 	.word	0x54442d18
  4047b4:	400921fb 	.word	0x400921fb
  4047b8:	00000000 	.word	0x00000000
  4047bc:	0040aabd 	.word	0x0040aabd
  4047c0:	0040a801 	.word	0x0040a801
  4047c4:	0040b0e9 	.word	0x0040b0e9
  4047c8:	00407d19 	.word	0x00407d19
  4047cc:	0040aa99 	.word	0x0040aa99
  4047d0:	0040ab65 	.word	0x0040ab65
  4047d4:	2aaaaaab 	.word	0x2aaaaaab
  4047d8:	00405ae1 	.word	0x00405ae1
  4047dc:	ed94 2a01 	vldr	s4, [r4, #4]
  4047e0:	2001      	movs	r0, #1
  4047e2:	edd4 2a00 	vldr	s5, [r4]
  4047e6:	47d8      	blx	fp
  4047e8:	ed85 0a08 	vstr	s0, [r5, #32]
  4047ec:	edc5 0a09 	vstr	s1, [r5, #36]	; 0x24
	xzS[5] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[5]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  4047f0:	f8d9 0014 	ldr.w	r0, [r9, #20]
  4047f4:	47b0      	blx	r6
  4047f6:	ec41 0b10 	vmov	d0, r0, r1
  4047fa:	4b98      	ldr	r3, [pc, #608]	; (404a5c <Gait0+0x5fc>)
  4047fc:	4798      	blx	r3
  4047fe:	eeb0 9a40 	vmov.f32	s18, s0
  404802:	eef0 9a60 	vmov.f32	s19, s1
  404806:	edd4 7a02 	vldr	s15, [r4, #8]
  40480a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40480e:	6960      	ldr	r0, [r4, #20]
  404810:	4b93      	ldr	r3, [pc, #588]	; (404a60 <Gait0+0x600>)
  404812:	4798      	blx	r3
  404814:	ec53 2b19 	vmov	r2, r3, d9
  404818:	47d0      	blx	sl
  40481a:	4b92      	ldr	r3, [pc, #584]	; (404a64 <Gait0+0x604>)
  40481c:	4798      	blx	r3
  40481e:	eeb0 0a68 	vmov.f32	s0, s17
  404822:	ee00 0a90 	vmov	s1, r0
  404826:	eeb0 1a68 	vmov.f32	s2, s17
  40482a:	eef0 1a48 	vmov.f32	s3, s16
  40482e:	ed94 2a01 	vldr	s4, [r4, #4]
  404832:	2000      	movs	r0, #0
  404834:	edd4 2a00 	vldr	s5, [r4]
  404838:	47d8      	blx	fp
  40483a:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
  40483e:	edc5 0a0b 	vstr	s1, [r5, #44]	; 0x2c

	Ang[0] = legAngCalc(xzS[0].X,  (sin(ofst[0]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[0])-hexabot_walk->hgt)  ,xzS[0].Z);
  404842:	ed95 8a00 	vldr	s16, [r5]
  404846:	f8d9 0000 	ldr.w	r0, [r9]
  40484a:	47b0      	blx	r6
  40484c:	ec41 0b10 	vmov	d0, r0, r1
  404850:	4b85      	ldr	r3, [pc, #532]	; (404a68 <Gait0+0x608>)
  404852:	4798      	blx	r3
  404854:	ec5b ab10 	vmov	sl, fp, d0
  404858:	ee10 0a10 	vmov	r0, s0
  40485c:	4659      	mov	r1, fp
  40485e:	2200      	movs	r2, #0
  404860:	2300      	movs	r3, #0
  404862:	4e82      	ldr	r6, [pc, #520]	; (404a6c <Gait0+0x60c>)
  404864:	47b0      	blx	r6
  404866:	b120      	cbz	r0, 404872 <Gait0+0x412>
  404868:	68e0      	ldr	r0, [r4, #12]
  40486a:	4240      	negs	r0, r0
  40486c:	4b7c      	ldr	r3, [pc, #496]	; (404a60 <Gait0+0x600>)
  40486e:	4798      	blx	r3
  404870:	e012      	b.n	404898 <Gait0+0x438>
  404872:	4f7b      	ldr	r7, [pc, #492]	; (404a60 <Gait0+0x600>)
  404874:	6920      	ldr	r0, [r4, #16]
  404876:	47b8      	blx	r7
  404878:	4602      	mov	r2, r0
  40487a:	460b      	mov	r3, r1
  40487c:	4650      	mov	r0, sl
  40487e:	4659      	mov	r1, fp
  404880:	4e7b      	ldr	r6, [pc, #492]	; (404a70 <Gait0+0x610>)
  404882:	47b0      	blx	r6
  404884:	4682      	mov	sl, r0
  404886:	468b      	mov	fp, r1
  404888:	68e0      	ldr	r0, [r4, #12]
  40488a:	47b8      	blx	r7
  40488c:	4602      	mov	r2, r0
  40488e:	460b      	mov	r3, r1
  404890:	4650      	mov	r0, sl
  404892:	4659      	mov	r1, fp
  404894:	4e77      	ldr	r6, [pc, #476]	; (404a74 <Gait0+0x614>)
  404896:	47b0      	blx	r6
  404898:	4b72      	ldr	r3, [pc, #456]	; (404a64 <Gait0+0x604>)
  40489a:	4798      	blx	r3
  40489c:	eeb0 0a48 	vmov.f32	s0, s16
  4048a0:	ee00 0a90 	vmov	s1, r0
  4048a4:	ed95 1a01 	vldr	s2, [r5, #4]
  4048a8:	4b73      	ldr	r3, [pc, #460]	; (404a78 <Gait0+0x618>)
  4048aa:	4798      	blx	r3
  4048ac:	ed88 0a00 	vstr	s0, [r8]
  4048b0:	edc8 0a01 	vstr	s1, [r8, #4]
  4048b4:	ed88 1a02 	vstr	s2, [r8, #8]
	Ang[1] = legAngCalc(xzS[1].X,  (sin(ofst[1]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[1])-hexabot_walk->hgt)  ,xzS[1].Z);
  4048b8:	f108 0a0c 	add.w	sl, r8, #12
  4048bc:	ed95 8a02 	vldr	s16, [r5, #8]
  4048c0:	f8d9 0004 	ldr.w	r0, [r9, #4]
  4048c4:	4b6d      	ldr	r3, [pc, #436]	; (404a7c <Gait0+0x61c>)
  4048c6:	4798      	blx	r3
  4048c8:	ec41 0b10 	vmov	d0, r0, r1
  4048cc:	4b66      	ldr	r3, [pc, #408]	; (404a68 <Gait0+0x608>)
  4048ce:	4798      	blx	r3
  4048d0:	ec51 0b10 	vmov	r0, r1, d0
  4048d4:	ed8d 0b00 	vstr	d0, [sp]
  4048d8:	2200      	movs	r2, #0
  4048da:	2300      	movs	r3, #0
  4048dc:	4e63      	ldr	r6, [pc, #396]	; (404a6c <Gait0+0x60c>)
  4048de:	47b0      	blx	r6
  4048e0:	b120      	cbz	r0, 4048ec <Gait0+0x48c>
  4048e2:	68e0      	ldr	r0, [r4, #12]
  4048e4:	4240      	negs	r0, r0
  4048e6:	4b5e      	ldr	r3, [pc, #376]	; (404a60 <Gait0+0x600>)
  4048e8:	4798      	blx	r3
  4048ea:	e012      	b.n	404912 <Gait0+0x4b2>
  4048ec:	4f5c      	ldr	r7, [pc, #368]	; (404a60 <Gait0+0x600>)
  4048ee:	6920      	ldr	r0, [r4, #16]
  4048f0:	47b8      	blx	r7
  4048f2:	4602      	mov	r2, r0
  4048f4:	460b      	mov	r3, r1
  4048f6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4048fa:	4e5d      	ldr	r6, [pc, #372]	; (404a70 <Gait0+0x610>)
  4048fc:	47b0      	blx	r6
  4048fe:	e9cd 0100 	strd	r0, r1, [sp]
  404902:	68e0      	ldr	r0, [r4, #12]
  404904:	47b8      	blx	r7
  404906:	4602      	mov	r2, r0
  404908:	460b      	mov	r3, r1
  40490a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40490e:	4e59      	ldr	r6, [pc, #356]	; (404a74 <Gait0+0x614>)
  404910:	47b0      	blx	r6
  404912:	4b54      	ldr	r3, [pc, #336]	; (404a64 <Gait0+0x604>)
  404914:	4798      	blx	r3
  404916:	eeb0 0a48 	vmov.f32	s0, s16
  40491a:	ee00 0a90 	vmov	s1, r0
  40491e:	ed95 1a03 	vldr	s2, [r5, #12]
  404922:	4b55      	ldr	r3, [pc, #340]	; (404a78 <Gait0+0x618>)
  404924:	4798      	blx	r3
  404926:	ed88 0a03 	vstr	s0, [r8, #12]
  40492a:	edca 0a01 	vstr	s1, [sl, #4]
  40492e:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[2] = legAngCalc(xzS[2].X,  (sin(ofst[2]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[2])-hexabot_walk->hgt)  ,xzS[2].Z);
  404932:	f108 0a18 	add.w	sl, r8, #24
  404936:	ed95 8a04 	vldr	s16, [r5, #16]
  40493a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40493e:	4b4f      	ldr	r3, [pc, #316]	; (404a7c <Gait0+0x61c>)
  404940:	4798      	blx	r3
  404942:	ec41 0b10 	vmov	d0, r0, r1
  404946:	4b48      	ldr	r3, [pc, #288]	; (404a68 <Gait0+0x608>)
  404948:	4798      	blx	r3
  40494a:	ec51 0b10 	vmov	r0, r1, d0
  40494e:	ed8d 0b00 	vstr	d0, [sp]
  404952:	2200      	movs	r2, #0
  404954:	2300      	movs	r3, #0
  404956:	4e45      	ldr	r6, [pc, #276]	; (404a6c <Gait0+0x60c>)
  404958:	47b0      	blx	r6
  40495a:	b120      	cbz	r0, 404966 <Gait0+0x506>
  40495c:	68e0      	ldr	r0, [r4, #12]
  40495e:	4240      	negs	r0, r0
  404960:	4b3f      	ldr	r3, [pc, #252]	; (404a60 <Gait0+0x600>)
  404962:	4798      	blx	r3
  404964:	e012      	b.n	40498c <Gait0+0x52c>
  404966:	4f3e      	ldr	r7, [pc, #248]	; (404a60 <Gait0+0x600>)
  404968:	6920      	ldr	r0, [r4, #16]
  40496a:	47b8      	blx	r7
  40496c:	4602      	mov	r2, r0
  40496e:	460b      	mov	r3, r1
  404970:	e9dd 0100 	ldrd	r0, r1, [sp]
  404974:	4e3e      	ldr	r6, [pc, #248]	; (404a70 <Gait0+0x610>)
  404976:	47b0      	blx	r6
  404978:	e9cd 0100 	strd	r0, r1, [sp]
  40497c:	68e0      	ldr	r0, [r4, #12]
  40497e:	47b8      	blx	r7
  404980:	4602      	mov	r2, r0
  404982:	460b      	mov	r3, r1
  404984:	e9dd 0100 	ldrd	r0, r1, [sp]
  404988:	4e3a      	ldr	r6, [pc, #232]	; (404a74 <Gait0+0x614>)
  40498a:	47b0      	blx	r6
  40498c:	4b35      	ldr	r3, [pc, #212]	; (404a64 <Gait0+0x604>)
  40498e:	4798      	blx	r3
  404990:	eeb0 0a48 	vmov.f32	s0, s16
  404994:	ee00 0a90 	vmov	s1, r0
  404998:	ed95 1a05 	vldr	s2, [r5, #20]
  40499c:	4b36      	ldr	r3, [pc, #216]	; (404a78 <Gait0+0x618>)
  40499e:	4798      	blx	r3
  4049a0:	ed88 0a06 	vstr	s0, [r8, #24]
  4049a4:	edca 0a01 	vstr	s1, [sl, #4]
  4049a8:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[3] = legAngCalc(xzS[3].X,  (sin(ofst[3]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[3])-hexabot_walk->hgt)  ,xzS[3].Z);
  4049ac:	f108 0a24 	add.w	sl, r8, #36	; 0x24
  4049b0:	ed95 8a06 	vldr	s16, [r5, #24]
  4049b4:	f8d9 000c 	ldr.w	r0, [r9, #12]
  4049b8:	4b30      	ldr	r3, [pc, #192]	; (404a7c <Gait0+0x61c>)
  4049ba:	4798      	blx	r3
  4049bc:	ec41 0b10 	vmov	d0, r0, r1
  4049c0:	4b29      	ldr	r3, [pc, #164]	; (404a68 <Gait0+0x608>)
  4049c2:	4798      	blx	r3
  4049c4:	ec51 0b10 	vmov	r0, r1, d0
  4049c8:	ed8d 0b00 	vstr	d0, [sp]
  4049cc:	2200      	movs	r2, #0
  4049ce:	2300      	movs	r3, #0
  4049d0:	4e26      	ldr	r6, [pc, #152]	; (404a6c <Gait0+0x60c>)
  4049d2:	47b0      	blx	r6
  4049d4:	b120      	cbz	r0, 4049e0 <Gait0+0x580>
  4049d6:	68e0      	ldr	r0, [r4, #12]
  4049d8:	4240      	negs	r0, r0
  4049da:	4b21      	ldr	r3, [pc, #132]	; (404a60 <Gait0+0x600>)
  4049dc:	4798      	blx	r3
  4049de:	e012      	b.n	404a06 <Gait0+0x5a6>
  4049e0:	4f1f      	ldr	r7, [pc, #124]	; (404a60 <Gait0+0x600>)
  4049e2:	6920      	ldr	r0, [r4, #16]
  4049e4:	47b8      	blx	r7
  4049e6:	4602      	mov	r2, r0
  4049e8:	460b      	mov	r3, r1
  4049ea:	e9dd 0100 	ldrd	r0, r1, [sp]
  4049ee:	4e20      	ldr	r6, [pc, #128]	; (404a70 <Gait0+0x610>)
  4049f0:	47b0      	blx	r6
  4049f2:	e9cd 0100 	strd	r0, r1, [sp]
  4049f6:	68e0      	ldr	r0, [r4, #12]
  4049f8:	47b8      	blx	r7
  4049fa:	4602      	mov	r2, r0
  4049fc:	460b      	mov	r3, r1
  4049fe:	e9dd 0100 	ldrd	r0, r1, [sp]
  404a02:	4e1c      	ldr	r6, [pc, #112]	; (404a74 <Gait0+0x614>)
  404a04:	47b0      	blx	r6
  404a06:	4b17      	ldr	r3, [pc, #92]	; (404a64 <Gait0+0x604>)
  404a08:	4798      	blx	r3
  404a0a:	eeb0 0a48 	vmov.f32	s0, s16
  404a0e:	ee00 0a90 	vmov	s1, r0
  404a12:	ed95 1a07 	vldr	s2, [r5, #28]
  404a16:	4b18      	ldr	r3, [pc, #96]	; (404a78 <Gait0+0x618>)
  404a18:	4798      	blx	r3
  404a1a:	ed88 0a09 	vstr	s0, [r8, #36]	; 0x24
  404a1e:	edca 0a01 	vstr	s1, [sl, #4]
  404a22:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[4] = legAngCalc(xzS[4].X,  (sin(ofst[4]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[4])-hexabot_walk->hgt)  ,xzS[4].Z);
  404a26:	f108 0a30 	add.w	sl, r8, #48	; 0x30
  404a2a:	ed95 8a08 	vldr	s16, [r5, #32]
  404a2e:	f8d9 0010 	ldr.w	r0, [r9, #16]
  404a32:	4b12      	ldr	r3, [pc, #72]	; (404a7c <Gait0+0x61c>)
  404a34:	4798      	blx	r3
  404a36:	ec41 0b10 	vmov	d0, r0, r1
  404a3a:	4b0b      	ldr	r3, [pc, #44]	; (404a68 <Gait0+0x608>)
  404a3c:	4798      	blx	r3
  404a3e:	ec51 0b10 	vmov	r0, r1, d0
  404a42:	ed8d 0b00 	vstr	d0, [sp]
  404a46:	2200      	movs	r2, #0
  404a48:	2300      	movs	r3, #0
  404a4a:	4e08      	ldr	r6, [pc, #32]	; (404a6c <Gait0+0x60c>)
  404a4c:	47b0      	blx	r6
  404a4e:	b1b8      	cbz	r0, 404a80 <Gait0+0x620>
  404a50:	68e0      	ldr	r0, [r4, #12]
  404a52:	4240      	negs	r0, r0
  404a54:	4b02      	ldr	r3, [pc, #8]	; (404a60 <Gait0+0x600>)
  404a56:	4798      	blx	r3
  404a58:	e025      	b.n	404aa6 <Gait0+0x646>
  404a5a:	bf00      	nop
  404a5c:	00407d19 	.word	0x00407d19
  404a60:	0040aa99 	.word	0x0040aa99
  404a64:	0040b0e9 	.word	0x0040b0e9
  404a68:	00407dc1 	.word	0x00407dc1
  404a6c:	0040b049 	.word	0x0040b049
  404a70:	0040ab65 	.word	0x0040ab65
  404a74:	0040a7fd 	.word	0x0040a7fd
  404a78:	00405d29 	.word	0x00405d29
  404a7c:	0040aabd 	.word	0x0040aabd
  404a80:	4f32      	ldr	r7, [pc, #200]	; (404b4c <Gait0+0x6ec>)
  404a82:	6920      	ldr	r0, [r4, #16]
  404a84:	47b8      	blx	r7
  404a86:	4602      	mov	r2, r0
  404a88:	460b      	mov	r3, r1
  404a8a:	e9dd 0100 	ldrd	r0, r1, [sp]
  404a8e:	4e30      	ldr	r6, [pc, #192]	; (404b50 <Gait0+0x6f0>)
  404a90:	47b0      	blx	r6
  404a92:	e9cd 0100 	strd	r0, r1, [sp]
  404a96:	68e0      	ldr	r0, [r4, #12]
  404a98:	47b8      	blx	r7
  404a9a:	4602      	mov	r2, r0
  404a9c:	460b      	mov	r3, r1
  404a9e:	e9dd 0100 	ldrd	r0, r1, [sp]
  404aa2:	4e2c      	ldr	r6, [pc, #176]	; (404b54 <Gait0+0x6f4>)
  404aa4:	47b0      	blx	r6
  404aa6:	4b2c      	ldr	r3, [pc, #176]	; (404b58 <Gait0+0x6f8>)
  404aa8:	4798      	blx	r3
  404aaa:	eeb0 0a48 	vmov.f32	s0, s16
  404aae:	ee00 0a90 	vmov	s1, r0
  404ab2:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
  404ab6:	4b29      	ldr	r3, [pc, #164]	; (404b5c <Gait0+0x6fc>)
  404ab8:	4798      	blx	r3
  404aba:	ed88 0a0c 	vstr	s0, [r8, #48]	; 0x30
  404abe:	edca 0a01 	vstr	s1, [sl, #4]
  404ac2:	ed8a 1a02 	vstr	s2, [sl, #8]
	Ang[5] = legAngCalc(xzS[5].X,  (sin(ofst[5]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[5])-hexabot_walk->hgt)  ,xzS[5].Z);
  404ac6:	f108 0a3c 	add.w	sl, r8, #60	; 0x3c
  404aca:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
  404ace:	f8d9 0014 	ldr.w	r0, [r9, #20]
  404ad2:	4b23      	ldr	r3, [pc, #140]	; (404b60 <Gait0+0x700>)
  404ad4:	4798      	blx	r3
  404ad6:	ec41 0b10 	vmov	d0, r0, r1
  404ada:	4b22      	ldr	r3, [pc, #136]	; (404b64 <Gait0+0x704>)
  404adc:	4798      	blx	r3
  404ade:	ec51 0b10 	vmov	r0, r1, d0
  404ae2:	ed8d 0b00 	vstr	d0, [sp]
  404ae6:	2200      	movs	r2, #0
  404ae8:	2300      	movs	r3, #0
  404aea:	4e1f      	ldr	r6, [pc, #124]	; (404b68 <Gait0+0x708>)
  404aec:	47b0      	blx	r6
  404aee:	b120      	cbz	r0, 404afa <Gait0+0x69a>
  404af0:	68e0      	ldr	r0, [r4, #12]
  404af2:	4240      	negs	r0, r0
  404af4:	4b15      	ldr	r3, [pc, #84]	; (404b4c <Gait0+0x6ec>)
  404af6:	4798      	blx	r3
  404af8:	e012      	b.n	404b20 <Gait0+0x6c0>
  404afa:	4f14      	ldr	r7, [pc, #80]	; (404b4c <Gait0+0x6ec>)
  404afc:	6920      	ldr	r0, [r4, #16]
  404afe:	47b8      	blx	r7
  404b00:	4602      	mov	r2, r0
  404b02:	460b      	mov	r3, r1
  404b04:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b08:	4e11      	ldr	r6, [pc, #68]	; (404b50 <Gait0+0x6f0>)
  404b0a:	47b0      	blx	r6
  404b0c:	e9cd 0100 	strd	r0, r1, [sp]
  404b10:	68e0      	ldr	r0, [r4, #12]
  404b12:	47b8      	blx	r7
  404b14:	4602      	mov	r2, r0
  404b16:	460b      	mov	r3, r1
  404b18:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b1c:	4c0d      	ldr	r4, [pc, #52]	; (404b54 <Gait0+0x6f4>)
  404b1e:	47a0      	blx	r4
  404b20:	4b0d      	ldr	r3, [pc, #52]	; (404b58 <Gait0+0x6f8>)
  404b22:	4798      	blx	r3
  404b24:	eeb0 0a48 	vmov.f32	s0, s16
  404b28:	ee00 0a90 	vmov	s1, r0
  404b2c:	ed95 1a0b 	vldr	s2, [r5, #44]	; 0x2c
  404b30:	4b0a      	ldr	r3, [pc, #40]	; (404b5c <Gait0+0x6fc>)
  404b32:	4798      	blx	r3
  404b34:	ed88 0a0f 	vstr	s0, [r8, #60]	; 0x3c
  404b38:	edca 0a01 	vstr	s1, [sl, #4]
  404b3c:	ed8a 1a02 	vstr	s2, [sl, #8]
	
}
  404b40:	b003      	add	sp, #12
  404b42:	ecbd 8b04 	vpop	{d8-d9}
  404b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b4a:	bf00      	nop
  404b4c:	0040aa99 	.word	0x0040aa99
  404b50:	0040ab65 	.word	0x0040ab65
  404b54:	0040a7fd 	.word	0x0040a7fd
  404b58:	0040b0e9 	.word	0x0040b0e9
  404b5c:	00405d29 	.word	0x00405d29
  404b60:	0040aabd 	.word	0x0040aabd
  404b64:	00407dc1 	.word	0x00407dc1
  404b68:	0040b049 	.word	0x0040b049
  404b6c:	00000000 	.word	0x00000000

00404b70 <Gait1>:

//Second gait function
//Shannon its pretty

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b74:	ed2d 8b08 	vpush	{d8-d11}
  404b78:	b087      	sub	sp, #28
  404b7a:	4682      	mov	sl, r0
  404b7c:	4689      	mov	r9, r1
  404b7e:	4690      	mov	r8, r2
  404b80:	461c      	mov	r4, r3
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
  404b82:	6958      	ldr	r0, [r3, #20]
  404b84:	4b8e      	ldr	r3, [pc, #568]	; (404dc0 <Gait1+0x250>)
  404b86:	4798      	blx	r3
  404b88:	e9cd 0100 	strd	r0, r1, [sp]
  404b8c:	4e8d      	ldr	r6, [pc, #564]	; (404dc4 <Gait1+0x254>)
  404b8e:	a386      	add	r3, pc, #536	; (adr r3, 404da8 <Gait1+0x238>)
  404b90:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b94:	47b0      	blx	r6
  404b96:	4d8c      	ldr	r5, [pc, #560]	; (404dc8 <Gait1+0x258>)
  404b98:	47a8      	blx	r5
  404b9a:	ee0b 0a10 	vmov	s22, r0
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
  404b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
  404ba2:	2200      	movs	r2, #0
  404ba4:	4b89      	ldr	r3, [pc, #548]	; (404dcc <Gait1+0x25c>)
  404ba6:	47b0      	blx	r6
  404ba8:	47a8      	blx	r5
  404baa:	9005      	str	r0, [sp, #20]
  404bac:	4657      	mov	r7, sl
  404bae:	46ca      	mov	sl, r9
  404bb0:	46c3      	mov	fp, r8
	
	for(int i = 0; i < 6; i++) {
  404bb2:	f04f 0900 	mov.w	r9, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404bb6:	4d86      	ldr	r5, [pc, #536]	; (404dd0 <Gait1+0x260>)
		if( ofst[i] < (5.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404bb8:	eddf 8a86 	vldr	s17, [pc, #536]	; 404dd4 <Gait1+0x264>
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  404bbc:	ed9f 9b7c 	vldr	d9, [pc, #496]	; 404db0 <Gait1+0x240>
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404bc0:	edd4 7a06 	vldr	s15, [r4, #24]
  404bc4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  404bc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
  404bca:	4b7d      	ldr	r3, [pc, #500]	; (404dc0 <Gait1+0x250>)
  404bcc:	4798      	blx	r3
  404bce:	e9cd 0100 	strd	r0, r1, [sp]
  404bd2:	ee07 9a90 	vmov	s15, r9
  404bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404bda:	ee67 7a88 	vmul.f32	s15, s15, s16
  404bde:	ee17 0a90 	vmov	r0, s15
  404be2:	47a8      	blx	r5
  404be4:	f8df 820c 	ldr.w	r8, [pc, #524]	; 404df4 <Gait1+0x284>
  404be8:	2200      	movs	r2, #0
  404bea:	4b7b      	ldr	r3, [pc, #492]	; (404dd8 <Gait1+0x268>)
  404bec:	47c0      	blx	r8
  404bee:	4602      	mov	r2, r0
  404bf0:	460b      	mov	r3, r1
  404bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
  404bf6:	4e79      	ldr	r6, [pc, #484]	; (404ddc <Gait1+0x26c>)
  404bf8:	47b0      	blx	r6
  404bfa:	4e73      	ldr	r6, [pc, #460]	; (404dc8 <Gait1+0x258>)
  404bfc:	47b0      	blx	r6
  404bfe:	47a8      	blx	r5
  404c00:	ec41 0b1a 	vmov	d10, r0, r1
  404c04:	ee18 0a10 	vmov	r0, s16
  404c08:	47a8      	blx	r5
  404c0a:	eeb0 0a4a 	vmov.f32	s0, s20
  404c0e:	eef0 0a6a 	vmov.f32	s1, s21
  404c12:	ec41 0b11 	vmov	d1, r0, r1
  404c16:	4b72      	ldr	r3, [pc, #456]	; (404de0 <Gait1+0x270>)
  404c18:	4798      	blx	r3
  404c1a:	eeb0 aa40 	vmov.f32	s20, s0
  404c1e:	eef0 aa60 	vmov.f32	s21, s1
  404c22:	edd4 7a06 	vldr	s15, [r4, #24]
  404c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404c2a:	ee17 0a90 	vmov	r0, s15
  404c2e:	47a8      	blx	r5
  404c30:	4602      	mov	r2, r0
  404c32:	460b      	mov	r3, r1
  404c34:	ec51 0b1a 	vmov	r0, r1, d10
  404c38:	47c0      	blx	r8
  404c3a:	47b0      	blx	r6
  404c3c:	ee08 0a10 	vmov	s16, r0
  404c40:	f847 0b04 	str.w	r0, [r7], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (5.00/6.00) ) {
  404c44:	47a8      	blx	r5
  404c46:	e9cd 0100 	strd	r0, r1, [sp]
  404c4a:	a35b      	add	r3, pc, #364	; (adr r3, 404db8 <Gait1+0x248>)
  404c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c50:	4e64      	ldr	r6, [pc, #400]	; (404de4 <Gait1+0x274>)
  404c52:	47b0      	blx	r6
  404c54:	b360      	cbz	r0, 404cb0 <Gait1+0x140>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404c56:	edd4 7a02 	vldr	s15, [r4, #8]
  404c5a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404c5e:	ee2b 8a08 	vmul.f32	s16, s22, s16
  404c62:	edd4 7a05 	vldr	s15, [r4, #20]
  404c66:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  404c6a:	eeb0 0a41 	vmov.f32	s0, s2
  404c6e:	ee78 0a60 	vsub.f32	s1, s16, s1
  404c72:	eef0 1a68 	vmov.f32	s3, s17
  404c76:	ed94 2a01 	vldr	s4, [r4, #4]
  404c7a:	f009 0001 	and.w	r0, r9, #1
  404c7e:	edd4 2a00 	vldr	s5, [r4]
  404c82:	4b59      	ldr	r3, [pc, #356]	; (404de8 <Gait1+0x278>)
  404c84:	4798      	blx	r3
  404c86:	eeb0 1a60 	vmov.f32	s2, s1
  404c8a:	ed8a 0a00 	vstr	s0, [sl]
  404c8e:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404c92:	68e3      	ldr	r3, [r4, #12]
  404c94:	425b      	negs	r3, r3
  404c96:	ee00 3a90 	vmov	s1, r3
  404c9a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  404c9e:	4b53      	ldr	r3, [pc, #332]	; (404dec <Gait1+0x27c>)
  404ca0:	4798      	blx	r3
  404ca2:	ed8b 0a00 	vstr	s0, [fp]
  404ca6:	edcb 0a01 	vstr	s1, [fp, #4]
  404caa:	ed8b 1a02 	vstr	s2, [fp, #8]
  404cae:	e06c      	b.n	404d8a <Gait1+0x21a>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404cb0:	edd4 7a02 	vldr	s15, [r4, #8]
  404cb4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  404cb8:	edd4 7a05 	vldr	s15, [r4, #20]
  404cbc:	eeb8 aae7 	vcvt.f32.s32	s20, s15
  404cc0:	9805      	ldr	r0, [sp, #20]
  404cc2:	47a8      	blx	r5
  404cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cc8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 404df8 <Gait1+0x288>
  404ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
  404cd0:	a339      	add	r3, pc, #228	; (adr r3, 404db8 <Gait1+0x248>)
  404cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cd6:	47c0      	blx	r8
  404cd8:	4602      	mov	r2, r0
  404cda:	460b      	mov	r3, r1
  404cdc:	4e39      	ldr	r6, [pc, #228]	; (404dc4 <Gait1+0x254>)
  404cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ce2:	47b0      	blx	r6
  404ce4:	4b38      	ldr	r3, [pc, #224]	; (404dc8 <Gait1+0x258>)
  404ce6:	4798      	blx	r3
  404ce8:	eeb0 0a48 	vmov.f32	s0, s16
  404cec:	ee07 0a90 	vmov	s15, r0
  404cf0:	ee7a 0a67 	vsub.f32	s1, s20, s15
  404cf4:	eeb0 1a48 	vmov.f32	s2, s16
  404cf8:	eef0 1a68 	vmov.f32	s3, s17
  404cfc:	ed94 2a01 	vldr	s4, [r4, #4]
  404d00:	f009 0001 	and.w	r0, r9, #1
  404d04:	edd4 2a00 	vldr	s5, [r4]
  404d08:	4b37      	ldr	r3, [pc, #220]	; (404de8 <Gait1+0x278>)
  404d0a:	4798      	blx	r3
  404d0c:	eef0 ba40 	vmov.f32	s23, s0
  404d10:	eeb0 8a60 	vmov.f32	s16, s1
  404d14:	ed8a 0a00 	vstr	s0, [sl]
  404d18:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  404d1c:	f857 0c04 	ldr.w	r0, [r7, #-4]
  404d20:	47a8      	blx	r5
  404d22:	a325      	add	r3, pc, #148	; (adr r3, 404db8 <Gait1+0x248>)
  404d24:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d28:	47c0      	blx	r8
  404d2a:	2200      	movs	r2, #0
  404d2c:	4b2a      	ldr	r3, [pc, #168]	; (404dd8 <Gait1+0x268>)
  404d2e:	47b0      	blx	r6
  404d30:	ec53 2b19 	vmov	r2, r3, d9
  404d34:	47b0      	blx	r6
  404d36:	ec41 0b10 	vmov	d0, r0, r1
  404d3a:	4b2d      	ldr	r3, [pc, #180]	; (404df0 <Gait1+0x280>)
  404d3c:	4798      	blx	r3
  404d3e:	eeb0 aa40 	vmov.f32	s20, s0
  404d42:	eef0 aa60 	vmov.f32	s21, s1
  404d46:	68e0      	ldr	r0, [r4, #12]
  404d48:	4240      	negs	r0, r0
  404d4a:	4b1d      	ldr	r3, [pc, #116]	; (404dc0 <Gait1+0x250>)
  404d4c:	4798      	blx	r3
  404d4e:	e9cd 0100 	strd	r0, r1, [sp]
  404d52:	6920      	ldr	r0, [r4, #16]
  404d54:	4b1a      	ldr	r3, [pc, #104]	; (404dc0 <Gait1+0x250>)
  404d56:	4798      	blx	r3
  404d58:	ec53 2b1a 	vmov	r2, r3, d10
  404d5c:	47b0      	blx	r6
  404d5e:	4602      	mov	r2, r0
  404d60:	460b      	mov	r3, r1
  404d62:	e9dd 0100 	ldrd	r0, r1, [sp]
  404d66:	4e1d      	ldr	r6, [pc, #116]	; (404ddc <Gait1+0x26c>)
  404d68:	47b0      	blx	r6
  404d6a:	4b17      	ldr	r3, [pc, #92]	; (404dc8 <Gait1+0x258>)
  404d6c:	4798      	blx	r3
  404d6e:	eeb0 0a6b 	vmov.f32	s0, s23
  404d72:	ee00 0a90 	vmov	s1, r0
  404d76:	eeb0 1a48 	vmov.f32	s2, s16
  404d7a:	4b1c      	ldr	r3, [pc, #112]	; (404dec <Gait1+0x27c>)
  404d7c:	4798      	blx	r3
  404d7e:	ed8b 0a00 	vstr	s0, [fp]
  404d82:	edcb 0a01 	vstr	s1, [fp, #4]
  404d86:	ed8b 1a02 	vstr	s2, [fp, #8]

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404d8a:	f109 0901 	add.w	r9, r9, #1
  404d8e:	f10a 0a08 	add.w	sl, sl, #8
  404d92:	f10b 0b0c 	add.w	fp, fp, #12
  404d96:	f1b9 0f06 	cmp.w	r9, #6
  404d9a:	f47f af11 	bne.w	404bc0 <Gait1+0x50>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  404d9e:	b007      	add	sp, #28
  404da0:	ecbd 8b08 	vpop	{d8-d11}
  404da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404da8:	33333333 	.word	0x33333333
  404dac:	40033333 	.word	0x40033333
  404db0:	54442d18 	.word	0x54442d18
  404db4:	400921fb 	.word	0x400921fb
  404db8:	aaaaaaab 	.word	0xaaaaaaab
  404dbc:	3feaaaaa 	.word	0x3feaaaaa
  404dc0:	0040aa99 	.word	0x0040aa99
  404dc4:	0040ab65 	.word	0x0040ab65
  404dc8:	0040b0e9 	.word	0x0040b0e9
  404dcc:	40280000 	.word	0x40280000
  404dd0:	0040aabd 	.word	0x0040aabd
  404dd4:	00000000 	.word	0x00000000
  404dd8:	40180000 	.word	0x40180000
  404ddc:	0040a801 	.word	0x0040a801
  404de0:	00408081 	.word	0x00408081
  404de4:	0040b049 	.word	0x0040b049
  404de8:	00405ae1 	.word	0x00405ae1
  404dec:	00405d29 	.word	0x00405d29
  404df0:	00407dc1 	.word	0x00407dc1
  404df4:	0040adb9 	.word	0x0040adb9
  404df8:	0040a7fd 	.word	0x0040a7fd
  404dfc:	00000000 	.word	0x00000000

00404e00 <Gait2>:

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e04:	ed2d 8b0a 	vpush	{d8-d12}
  404e08:	b083      	sub	sp, #12
  404e0a:	4680      	mov	r8, r0
  404e0c:	460f      	mov	r7, r1
  404e0e:	4616      	mov	r6, r2
  404e10:	461c      	mov	r4, r3
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
  404e12:	6958      	ldr	r0, [r3, #20]
  404e14:	4b8a      	ldr	r3, [pc, #552]	; (405040 <Gait2+0x240>)
  404e16:	4798      	blx	r3
  404e18:	2200      	movs	r2, #0
  404e1a:	4b8a      	ldr	r3, [pc, #552]	; (405044 <Gait2+0x244>)
  404e1c:	4d8a      	ldr	r5, [pc, #552]	; (405048 <Gait2+0x248>)
  404e1e:	47a8      	blx	r5
  404e20:	4b8a      	ldr	r3, [pc, #552]	; (40504c <Gait2+0x24c>)
  404e22:	4798      	blx	r3
  404e24:	ee0b 0a90 	vmov	s23, r0
  404e28:	46ba      	mov	sl, r7
  404e2a:	46b1      	mov	r9, r6
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404e2c:	2500      	movs	r5, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404e2e:	4f88      	ldr	r7, [pc, #544]	; (405050 <Gait2+0x250>)
  404e30:	ed9f ab7f 	vldr	d10, [pc, #508]	; 405030 <Gait2+0x230>
		if( ofst[i] < (3.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404e34:	ed9f ba87 	vldr	s22, [pc, #540]	; 405054 <Gait2+0x254>
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  404e38:	ed9f 9b7f 	vldr	d9, [pc, #508]	; 405038 <Gait2+0x238>
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404e3c:	46ab      	mov	fp, r5
  404e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  404e40:	4b7f      	ldr	r3, [pc, #508]	; (405040 <Gait2+0x240>)
  404e42:	4798      	blx	r3
  404e44:	e9cd 0100 	strd	r0, r1, [sp]
  404e48:	1eeb      	subs	r3, r5, #3
  404e4a:	2b01      	cmp	r3, #1
  404e4c:	d902      	bls.n	404e54 <Gait2+0x54>
  404e4e:	ec53 2b1a 	vmov	r2, r3, d10
  404e52:	b96d      	cbnz	r5, 404e70 <Gait2+0x70>
  404e54:	edd4 7a06 	vldr	s15, [r4, #24]
  404e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404e5c:	ee17 0a90 	vmov	r0, s15
  404e60:	47b8      	blx	r7
  404e62:	2200      	movs	r2, #0
  404e64:	4b7c      	ldr	r3, [pc, #496]	; (405058 <Gait2+0x258>)
  404e66:	4e78      	ldr	r6, [pc, #480]	; (405048 <Gait2+0x248>)
  404e68:	47b0      	blx	r6
  404e6a:	4602      	mov	r2, r0
  404e6c:	460b      	mov	r3, r1
  404e6e:	e7ff      	b.n	404e70 <Gait2+0x70>
  404e70:	e9dd 0100 	ldrd	r0, r1, [sp]
  404e74:	4e79      	ldr	r6, [pc, #484]	; (40505c <Gait2+0x25c>)
  404e76:	47b0      	blx	r6
  404e78:	4e74      	ldr	r6, [pc, #464]	; (40504c <Gait2+0x24c>)
  404e7a:	47b0      	blx	r6
  404e7c:	47b8      	blx	r7
  404e7e:	ec41 0b18 	vmov	d8, r0, r1
  404e82:	edd4 7a06 	vldr	s15, [r4, #24]
  404e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404e8a:	ee17 0a90 	vmov	r0, s15
  404e8e:	47b8      	blx	r7
  404e90:	eeb0 0a48 	vmov.f32	s0, s16
  404e94:	eef0 0a68 	vmov.f32	s1, s17
  404e98:	ec41 0b11 	vmov	d1, r0, r1
  404e9c:	4b70      	ldr	r3, [pc, #448]	; (405060 <Gait2+0x260>)
  404e9e:	4798      	blx	r3
  404ea0:	eeb0 8a40 	vmov.f32	s16, s0
  404ea4:	eef0 8a60 	vmov.f32	s17, s1
  404ea8:	edd4 7a06 	vldr	s15, [r4, #24]
  404eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404eb0:	ee17 0a90 	vmov	r0, s15
  404eb4:	47b8      	blx	r7
  404eb6:	4602      	mov	r2, r0
  404eb8:	460b      	mov	r3, r1
  404eba:	ec51 0b18 	vmov	r0, r1, d8
  404ebe:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 405074 <Gait2+0x274>
  404ec2:	47e0      	blx	ip
  404ec4:	47b0      	blx	r6
  404ec6:	ee08 0a10 	vmov	s16, r0
  404eca:	f848 0b04 	str.w	r0, [r8], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (3.00/6.00) ) {
  404ece:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
  404ed2:	eeb4 8ae7 	vcmpe.f32	s16, s15
  404ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404eda:	d52c      	bpl.n	404f36 <Gait2+0x136>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404edc:	edd4 7a02 	vldr	s15, [r4, #8]
  404ee0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  404ee4:	ee2b 8a88 	vmul.f32	s16, s23, s16
  404ee8:	edd4 7a05 	vldr	s15, [r4, #20]
  404eec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
  404ef0:	eeb0 0a41 	vmov.f32	s0, s2
  404ef4:	ee78 0a60 	vsub.f32	s1, s16, s1
  404ef8:	eef0 1a4b 	vmov.f32	s3, s22
  404efc:	ed94 2a01 	vldr	s4, [r4, #4]
  404f00:	f00b 0001 	and.w	r0, fp, #1
  404f04:	edd4 2a00 	vldr	s5, [r4]
  404f08:	4b56      	ldr	r3, [pc, #344]	; (405064 <Gait2+0x264>)
  404f0a:	4798      	blx	r3
  404f0c:	eeb0 1a60 	vmov.f32	s2, s1
  404f10:	ed8a 0a00 	vstr	s0, [sl]
  404f14:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404f18:	68e3      	ldr	r3, [r4, #12]
  404f1a:	425b      	negs	r3, r3
  404f1c:	ee00 3a90 	vmov	s1, r3
  404f20:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  404f24:	4b50      	ldr	r3, [pc, #320]	; (405068 <Gait2+0x268>)
  404f26:	4798      	blx	r3
  404f28:	ed89 0a00 	vstr	s0, [r9]
  404f2c:	edc9 0a01 	vstr	s1, [r9, #4]
  404f30:	ed89 1a02 	vstr	s2, [r9, #8]
  404f34:	e06e      	b.n	405014 <Gait2+0x214>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404f36:	edd4 7a02 	vldr	s15, [r4, #8]
  404f3a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404f3e:	edd4 7a05 	vldr	s15, [r4, #20]
  404f42:	eeb8 cae7 	vcvt.f32.s32	s24, s15
  404f46:	ee1b 0a90 	vmov	r0, s23
  404f4a:	47b8      	blx	r7
  404f4c:	e9cd 0100 	strd	r0, r1, [sp]
  404f50:	ee18 0a10 	vmov	r0, s16
  404f54:	47b8      	blx	r7
  404f56:	2200      	movs	r2, #0
  404f58:	4b3f      	ldr	r3, [pc, #252]	; (405058 <Gait2+0x258>)
  404f5a:	4e44      	ldr	r6, [pc, #272]	; (40506c <Gait2+0x26c>)
  404f5c:	47b0      	blx	r6
  404f5e:	4602      	mov	r2, r0
  404f60:	460b      	mov	r3, r1
  404f62:	e9dd 0100 	ldrd	r0, r1, [sp]
  404f66:	4e38      	ldr	r6, [pc, #224]	; (405048 <Gait2+0x248>)
  404f68:	47b0      	blx	r6
  404f6a:	4b38      	ldr	r3, [pc, #224]	; (40504c <Gait2+0x24c>)
  404f6c:	4798      	blx	r3
  404f6e:	eeb0 0a68 	vmov.f32	s0, s17
  404f72:	ee07 0a90 	vmov	s15, r0
  404f76:	ee7c 0a67 	vsub.f32	s1, s24, s15
  404f7a:	eeb0 1a68 	vmov.f32	s2, s17
  404f7e:	eef0 1a4b 	vmov.f32	s3, s22
  404f82:	ed94 2a01 	vldr	s4, [r4, #4]
  404f86:	f00b 0001 	and.w	r0, fp, #1
  404f8a:	edd4 2a00 	vldr	s5, [r4]
  404f8e:	4b35      	ldr	r3, [pc, #212]	; (405064 <Gait2+0x264>)
  404f90:	4798      	blx	r3
  404f92:	eef0 ca40 	vmov.f32	s25, s0
  404f96:	eeb0 ca60 	vmov.f32	s24, s1
  404f9a:	ed8a 0a00 	vstr	s0, [sl]
  404f9e:	edca 0a01 	vstr	s1, [sl, #4]
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  404fa2:	f858 0c04 	ldr.w	r0, [r8, #-4]
  404fa6:	47b8      	blx	r7
  404fa8:	2200      	movs	r2, #0
  404faa:	4b2b      	ldr	r3, [pc, #172]	; (405058 <Gait2+0x258>)
  404fac:	4e2f      	ldr	r6, [pc, #188]	; (40506c <Gait2+0x26c>)
  404fae:	47b0      	blx	r6
  404fb0:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40505c <Gait2+0x25c>
  404fb4:	4602      	mov	r2, r0
  404fb6:	460b      	mov	r3, r1
  404fb8:	47d8      	blx	fp
  404fba:	ec53 2b19 	vmov	r2, r3, d9
  404fbe:	4e22      	ldr	r6, [pc, #136]	; (405048 <Gait2+0x248>)
  404fc0:	47b0      	blx	r6
  404fc2:	ec41 0b10 	vmov	d0, r0, r1
  404fc6:	4b2a      	ldr	r3, [pc, #168]	; (405070 <Gait2+0x270>)
  404fc8:	4798      	blx	r3
  404fca:	eeb0 8a40 	vmov.f32	s16, s0
  404fce:	eef0 8a60 	vmov.f32	s17, s1
  404fd2:	68e0      	ldr	r0, [r4, #12]
  404fd4:	4240      	negs	r0, r0
  404fd6:	4b1a      	ldr	r3, [pc, #104]	; (405040 <Gait2+0x240>)
  404fd8:	4798      	blx	r3
  404fda:	e9cd 0100 	strd	r0, r1, [sp]
  404fde:	6920      	ldr	r0, [r4, #16]
  404fe0:	4b17      	ldr	r3, [pc, #92]	; (405040 <Gait2+0x240>)
  404fe2:	4798      	blx	r3
  404fe4:	ec53 2b18 	vmov	r2, r3, d8
  404fe8:	47b0      	blx	r6
  404fea:	4602      	mov	r2, r0
  404fec:	460b      	mov	r3, r1
  404fee:	e9dd 0100 	ldrd	r0, r1, [sp]
  404ff2:	47d8      	blx	fp
  404ff4:	4b15      	ldr	r3, [pc, #84]	; (40504c <Gait2+0x24c>)
  404ff6:	4798      	blx	r3
  404ff8:	eeb0 0a6c 	vmov.f32	s0, s25
  404ffc:	ee00 0a90 	vmov	s1, r0
  405000:	eeb0 1a4c 	vmov.f32	s2, s24
  405004:	4b18      	ldr	r3, [pc, #96]	; (405068 <Gait2+0x268>)
  405006:	4798      	blx	r3
  405008:	ed89 0a00 	vstr	s0, [r9]
  40500c:	edc9 0a01 	vstr	s1, [r9, #4]
  405010:	ed89 1a02 	vstr	s2, [r9, #8]

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  405014:	3501      	adds	r5, #1
  405016:	f10a 0a08 	add.w	sl, sl, #8
  40501a:	f109 090c 	add.w	r9, r9, #12
  40501e:	2d06      	cmp	r5, #6
  405020:	f47f af0c 	bne.w	404e3c <Gait2+0x3c>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  405024:	b003      	add	sp, #12
  405026:	ecbd 8b0a 	vpop	{d8-d12}
  40502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40502e:	bf00      	nop
	...
  405038:	54442d18 	.word	0x54442d18
  40503c:	400921fb 	.word	0x400921fb
  405040:	0040aa99 	.word	0x0040aa99
  405044:	40100000 	.word	0x40100000
  405048:	0040ab65 	.word	0x0040ab65
  40504c:	0040b0e9 	.word	0x0040b0e9
  405050:	0040aabd 	.word	0x0040aabd
  405054:	00000000 	.word	0x00000000
  405058:	3fe00000 	.word	0x3fe00000
  40505c:	0040a801 	.word	0x0040a801
  405060:	00408081 	.word	0x00408081
  405064:	00405ae1 	.word	0x00405ae1
  405068:	00405d29 	.word	0x00405d29
  40506c:	0040a7fd 	.word	0x0040a7fd
  405070:	00407dc1 	.word	0x00407dc1
  405074:	0040adb9 	.word	0x0040adb9

00405078 <SdramCheck>:
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to disable
 */
static inline void isi_disable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IDR = flag;
  405078:	4b1c      	ldr	r3, [pc, #112]	; (4050ec <SdramCheck+0x74>)
  40507a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  40507e:	631a      	str	r2, [r3, #48]	; 0x30
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  405080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  405082:	f042 0201 	orr.w	r2, r2, #1
  405086:	63da      	str	r2, [r3, #60]	; 0x3c
  405088:	4a19      	ldr	r2, [pc, #100]	; (4050f0 <SdramCheck+0x78>)

//SDRAM CHECK
void SdramCheck() {
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
  40508a:	2300      	movs	r3, #0
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
  40508c:	f822 3f02 	strh.w	r3, [r2, #2]!
		T++;
  405090:	3301      	adds	r3, #1
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  405092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  405096:	d1f9      	bne.n	40508c <SdramCheck+0x14>
#define REG_AECHM		0xa1	/* Exposure value - bits AEC[15:10] */
#define REG_BD50ST		0xa2	/* Banding filter value for 50Hz */
#define REG_BD60ST		0xa3	/* Banding filter value for 60Hz */

//SDRAM CHECK
void SdramCheck() {
  405098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40509c:	b088      	sub	sp, #32
  40509e:	4d14      	ldr	r5, [pc, #80]	; (4050f0 <SdramCheck+0x78>)
  4050a0:	2101      	movs	r1, #1
  4050a2:	2400      	movs	r4, #0
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  4050a4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 405100 <SdramCheck+0x88>
  4050a8:	4f12      	ldr	r7, [pc, #72]	; (4050f4 <SdramCheck+0x7c>)
			sendDebugString(buf);
  4050aa:	4e13      	ldr	r6, [pc, #76]	; (4050f8 <SdramCheck+0x80>)
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
  4050ac:	f835 2f02 	ldrh.w	r2, [r5, #2]!
  4050b0:	b2a3      	uxth	r3, r4
  4050b2:	429a      	cmp	r2, r3
  4050b4:	d007      	beq.n	4050c6 <SdramCheck+0x4e>
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  4050b6:	9200      	str	r2, [sp, #0]
  4050b8:	a803      	add	r0, sp, #12
  4050ba:	4641      	mov	r1, r8
  4050bc:	4622      	mov	r2, r4
  4050be:	47b8      	blx	r7
			sendDebugString(buf);
  4050c0:	a803      	add	r0, sp, #12
  4050c2:	47b0      	blx	r6
			cleanTest = 0;
  4050c4:	2100      	movs	r1, #0
		}
		T++;
  4050c6:	3401      	adds	r4, #1
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  4050c8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
  4050cc:	d1ee      	bne.n	4050ac <SdramCheck+0x34>
			sendDebugString(buf);
			cleanTest = 0;
		}
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
  4050ce:	b111      	cbz	r1, 4050d6 <SdramCheck+0x5e>
  4050d0:	480a      	ldr	r0, [pc, #40]	; (4050fc <SdramCheck+0x84>)
  4050d2:	4b09      	ldr	r3, [pc, #36]	; (4050f8 <SdramCheck+0x80>)
  4050d4:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  4050d6:	4b05      	ldr	r3, [pc, #20]	; (4050ec <SdramCheck+0x74>)
  4050d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  4050dc:	62da      	str	r2, [r3, #44]	; 0x2c
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  4050de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4050e0:	f042 0201 	orr.w	r2, r2, #1
  4050e4:	639a      	str	r2, [r3, #56]	; 0x38
	isi_enable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_enable(ISI,1);
}
  4050e6:	b008      	add	sp, #32
  4050e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050ec:	4004c000 	.word	0x4004c000
  4050f0:	6ffffffe 	.word	0x6ffffffe
  4050f4:	0040b9e9 	.word	0x0040b9e9
  4050f8:	0040019d 	.word	0x0040019d
  4050fc:	004132e4 	.word	0x004132e4
  405100:	004132b8 	.word	0x004132b8

00405104 <i2cWriteReg>:

//I2C interfacing
void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  405104:	b500      	push	{lr}
  405106:	b089      	sub	sp, #36	; 0x24
  405108:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  40510c:	2300      	movs	r3, #0
  40510e:	9303      	str	r3, [sp, #12]
  405110:	9307      	str	r3, [sp, #28]
  405112:	f88d 100c 	strb.w	r1, [sp, #12]
  405116:	2301      	movs	r3, #1
  405118:	9304      	str	r3, [sp, #16]
  40511a:	f10d 0207 	add.w	r2, sp, #7
  40511e:	9205      	str	r2, [sp, #20]
  405120:	9306      	str	r3, [sp, #24]
  405122:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  405126:	4805      	ldr	r0, [pc, #20]	; (40513c <i2cWriteReg+0x38>)
  405128:	a903      	add	r1, sp, #12
  40512a:	4b05      	ldr	r3, [pc, #20]	; (405140 <i2cWriteReg+0x3c>)
  40512c:	4798      	blx	r3
  40512e:	b110      	cbz	r0, 405136 <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  405130:	4804      	ldr	r0, [pc, #16]	; (405144 <i2cWriteReg+0x40>)
  405132:	4b05      	ldr	r3, [pc, #20]	; (405148 <i2cWriteReg+0x44>)
  405134:	4798      	blx	r3
	}
}
  405136:	b009      	add	sp, #36	; 0x24
  405138:	f85d fb04 	ldr.w	pc, [sp], #4
  40513c:	40018000 	.word	0x40018000
  405140:	00402c39 	.word	0x00402c39
  405144:	00413300 	.word	0x00413300
  405148:	0040019d 	.word	0x0040019d

0040514c <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  40514c:	b500      	push	{lr}
  40514e:	b087      	sub	sp, #28
	int retVal = 0;
  405150:	2300      	movs	r3, #0
  405152:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  405154:	9300      	str	r3, [sp, #0]
  405156:	9304      	str	r3, [sp, #16]
  405158:	f88d 1000 	strb.w	r1, [sp]
  40515c:	2301      	movs	r3, #1
  40515e:	9301      	str	r3, [sp, #4]
  405160:	aa05      	add	r2, sp, #20
  405162:	9202      	str	r2, [sp, #8]
  405164:	9303      	str	r3, [sp, #12]
  405166:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  40516a:	4804      	ldr	r0, [pc, #16]	; (40517c <i2cReadReg+0x30>)
  40516c:	4669      	mov	r1, sp
  40516e:	4b04      	ldr	r3, [pc, #16]	; (405180 <i2cReadReg+0x34>)
  405170:	4798      	blx	r3
	return retVal;
}
  405172:	9805      	ldr	r0, [sp, #20]
  405174:	b007      	add	sp, #28
  405176:	f85d fb04 	ldr.w	pc, [sp], #4
  40517a:	bf00      	nop
  40517c:	40018000 	.word	0x40018000
  405180:	00402add 	.word	0x00402add

00405184 <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  405184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405188:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  40518a:	b2c4      	uxtb	r4, r0
  40518c:	4620      	mov	r0, r4
  40518e:	2100      	movs	r1, #0
  405190:	4f2a      	ldr	r7, [pc, #168]	; (40523c <ServoDriverInit+0xb8>)
  405192:	47b8      	blx	r7
  405194:	4602      	mov	r2, r0
  405196:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 405254 <ServoDriverInit+0xd0>
  40519a:	a801      	add	r0, sp, #4
  40519c:	4641      	mov	r1, r8
  40519e:	4d28      	ldr	r5, [pc, #160]	; (405240 <ServoDriverInit+0xbc>)
  4051a0:	47a8      	blx	r5
	sendDebugString(buf);
  4051a2:	a801      	add	r0, sp, #4
  4051a4:	4e27      	ldr	r6, [pc, #156]	; (405244 <ServoDriverInit+0xc0>)
  4051a6:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  4051a8:	4620      	mov	r0, r4
  4051aa:	2101      	movs	r1, #1
  4051ac:	47b8      	blx	r7
  4051ae:	4602      	mov	r2, r0
  4051b0:	a801      	add	r0, sp, #4
  4051b2:	4641      	mov	r1, r8
  4051b4:	47a8      	blx	r5
	sendDebugString(buf);
  4051b6:	a801      	add	r0, sp, #4
  4051b8:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  4051ba:	4620      	mov	r0, r4
  4051bc:	211e      	movs	r1, #30
  4051be:	47b8      	blx	r7
  4051c0:	4602      	mov	r2, r0
  4051c2:	a801      	add	r0, sp, #4
  4051c4:	4641      	mov	r1, r8
  4051c6:	47a8      	blx	r5
	sendDebugString(buf);
  4051c8:	a801      	add	r0, sp, #4
  4051ca:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  4051cc:	4620      	mov	r0, r4
  4051ce:	21fe      	movs	r1, #254	; 0xfe
  4051d0:	47b8      	blx	r7
  4051d2:	4602      	mov	r2, r0
  4051d4:	a801      	add	r0, sp, #4
  4051d6:	4641      	mov	r1, r8
  4051d8:	47a8      	blx	r5
	sendDebugString(buf);
  4051da:	a801      	add	r0, sp, #4
  4051dc:	47b0      	blx	r6
	
	delay_ms(1);
  4051de:	f24c 508e 	movw	r0, #50574	; 0xc58e
  4051e2:	4f19      	ldr	r7, [pc, #100]	; (405248 <ServoDriverInit+0xc4>)
  4051e4:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  4051e6:	4620      	mov	r0, r4
  4051e8:	2100      	movs	r1, #0
  4051ea:	2210      	movs	r2, #16
  4051ec:	4d17      	ldr	r5, [pc, #92]	; (40524c <ServoDriverInit+0xc8>)
  4051ee:	47a8      	blx	r5
	delay_ms(2);
  4051f0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 405258 <ServoDriverInit+0xd4>
  4051f4:	4640      	mov	r0, r8
  4051f6:	47b8      	blx	r7
	//The following line was changed from a reg value of 0x80 to 0x1E, resulting in a longest pulse of 5ms from 20ms
	i2cWriteReg(ServoAddr,0xFE,0x1E);
  4051f8:	4620      	mov	r0, r4
  4051fa:	21fe      	movs	r1, #254	; 0xfe
  4051fc:	221e      	movs	r2, #30
  4051fe:	47a8      	blx	r5
	delay_ms(2);
  405200:	4640      	mov	r0, r8
  405202:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  405204:	4620      	mov	r0, r4
  405206:	2100      	movs	r1, #0
  405208:	460a      	mov	r2, r1
  40520a:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  40520c:	4620      	mov	r0, r4
  40520e:	2100      	movs	r1, #0
  405210:	2210      	movs	r2, #16
  405212:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  405214:	4620      	mov	r0, r4
  405216:	2101      	movs	r1, #1
  405218:	2204      	movs	r2, #4
  40521a:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  40521c:	4620      	mov	r0, r4
  40521e:	2100      	movs	r1, #0
  405220:	460a      	mov	r2, r1
  405222:	47a8      	blx	r5
	delay_ms(2);
  405224:	4640      	mov	r0, r8
  405226:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  405228:	4620      	mov	r0, r4
  40522a:	2100      	movs	r1, #0
  40522c:	2280      	movs	r2, #128	; 0x80
  40522e:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  405230:	4807      	ldr	r0, [pc, #28]	; (405250 <ServoDriverInit+0xcc>)
  405232:	47b0      	blx	r6
}
  405234:	b006      	add	sp, #24
  405236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40523a:	bf00      	nop
  40523c:	0040514d 	.word	0x0040514d
  405240:	0040b9e9 	.word	0x0040b9e9
  405244:	0040019d 	.word	0x0040019d
  405248:	20400001 	.word	0x20400001
  40524c:	00405105 	.word	0x00405105
  405250:	00413314 	.word	0x00413314
  405254:	0041330c 	.word	0x0041330c
  405258:	00018b1b 	.word	0x00018b1b

0040525c <legGetI2Caddr>:
	memaddr[0] = Ain;
	memaddr[1] = Bin;
}

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
  40525c:	2805      	cmp	r0, #5
  40525e:	d87b      	bhi.n	405358 <legGetI2Caddr+0xfc>
  405260:	e8df f000 	tbb	[pc, r0]
  405264:	3f2b1703 	.word	0x3f2b1703
  405268:	6753      	.short	0x6753
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
  40526a:	b921      	cbnz	r1, 405276 <legGetI2Caddr+0x1a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40526c:	2340      	movs	r3, #64	; 0x40
  40526e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405270:	231e      	movs	r3, #30
  405272:	6053      	str	r3, [r2, #4]
  405274:	4770      	bx	lr

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
  405276:	2901      	cmp	r1, #1
  405278:	d104      	bne.n	405284 <legGetI2Caddr+0x28>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40527a:	2340      	movs	r3, #64	; 0x40
  40527c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40527e:	2322      	movs	r3, #34	; 0x22
  405280:	6053      	str	r3, [r2, #4]
  405282:	4770      	bx	lr
void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
  405284:	2902      	cmp	r1, #2
  405286:	d167      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405288:	2340      	movs	r3, #64	; 0x40
  40528a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40528c:	2326      	movs	r3, #38	; 0x26
  40528e:	6053      	str	r3, [r2, #4]
  405290:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
  405292:	b921      	cbnz	r1, 40529e <legGetI2Caddr+0x42>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405294:	2341      	movs	r3, #65	; 0x41
  405296:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405298:	2306      	movs	r3, #6
  40529a:	6053      	str	r3, [r2, #4]
  40529c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
  40529e:	2901      	cmp	r1, #1
  4052a0:	d104      	bne.n	4052ac <legGetI2Caddr+0x50>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052a2:	2341      	movs	r3, #65	; 0x41
  4052a4:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052a6:	230a      	movs	r3, #10
  4052a8:	6053      	str	r3, [r2, #4]
  4052aa:	4770      	bx	lr
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
  4052ac:	2902      	cmp	r1, #2
  4052ae:	d153      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052b0:	2341      	movs	r3, #65	; 0x41
  4052b2:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052b4:	230e      	movs	r3, #14
  4052b6:	6053      	str	r3, [r2, #4]
  4052b8:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
  4052ba:	b921      	cbnz	r1, 4052c6 <legGetI2Caddr+0x6a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052bc:	2340      	movs	r3, #64	; 0x40
  4052be:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052c0:	2312      	movs	r3, #18
  4052c2:	6053      	str	r3, [r2, #4]
  4052c4:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
  4052c6:	2901      	cmp	r1, #1
  4052c8:	d104      	bne.n	4052d4 <legGetI2Caddr+0x78>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052ca:	2340      	movs	r3, #64	; 0x40
  4052cc:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052ce:	2316      	movs	r3, #22
  4052d0:	6053      	str	r3, [r2, #4]
  4052d2:	4770      	bx	lr
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
  4052d4:	2902      	cmp	r1, #2
  4052d6:	d13f      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052d8:	2340      	movs	r3, #64	; 0x40
  4052da:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052dc:	231a      	movs	r3, #26
  4052de:	6053      	str	r3, [r2, #4]
  4052e0:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
  4052e2:	b921      	cbnz	r1, 4052ee <legGetI2Caddr+0x92>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052e4:	2341      	movs	r3, #65	; 0x41
  4052e6:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052e8:	2312      	movs	r3, #18
  4052ea:	6053      	str	r3, [r2, #4]
  4052ec:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
  4052ee:	2901      	cmp	r1, #1
  4052f0:	d104      	bne.n	4052fc <legGetI2Caddr+0xa0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  4052f2:	2341      	movs	r3, #65	; 0x41
  4052f4:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  4052f6:	2316      	movs	r3, #22
  4052f8:	6053      	str	r3, [r2, #4]
  4052fa:	4770      	bx	lr
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
  4052fc:	2902      	cmp	r1, #2
  4052fe:	d12b      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405300:	2341      	movs	r3, #65	; 0x41
  405302:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405304:	231a      	movs	r3, #26
  405306:	6053      	str	r3, [r2, #4]
  405308:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
  40530a:	b921      	cbnz	r1, 405316 <legGetI2Caddr+0xba>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40530c:	2340      	movs	r3, #64	; 0x40
  40530e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405310:	2306      	movs	r3, #6
  405312:	6053      	str	r3, [r2, #4]
  405314:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
  405316:	2901      	cmp	r1, #1
  405318:	d104      	bne.n	405324 <legGetI2Caddr+0xc8>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40531a:	2340      	movs	r3, #64	; 0x40
  40531c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40531e:	230a      	movs	r3, #10
  405320:	6053      	str	r3, [r2, #4]
  405322:	4770      	bx	lr
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
  405324:	2902      	cmp	r1, #2
  405326:	d117      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405328:	2340      	movs	r3, #64	; 0x40
  40532a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40532c:	230e      	movs	r3, #14
  40532e:	6053      	str	r3, [r2, #4]
  405330:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
  405332:	b921      	cbnz	r1, 40533e <legGetI2Caddr+0xe2>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405334:	2341      	movs	r3, #65	; 0x41
  405336:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405338:	231e      	movs	r3, #30
  40533a:	6053      	str	r3, [r2, #4]
  40533c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
  40533e:	2901      	cmp	r1, #1
  405340:	d104      	bne.n	40534c <legGetI2Caddr+0xf0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405342:	2341      	movs	r3, #65	; 0x41
  405344:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405346:	2322      	movs	r3, #34	; 0x22
  405348:	6053      	str	r3, [r2, #4]
  40534a:	4770      	bx	lr
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L5_S2_ADDR,addr);
  40534c:	2902      	cmp	r1, #2
  40534e:	d103      	bne.n	405358 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405350:	2341      	movs	r3, #65	; 0x41
  405352:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405354:	2326      	movs	r3, #38	; 0x26
  405356:	6053      	str	r3, [r2, #4]
  405358:	4770      	bx	lr
  40535a:	bf00      	nop

0040535c <relaxServo>:
	}
}

//Servo controller wrapper
void relaxServo(int Leg, int svo)
{
  40535c:	b510      	push	{r4, lr}
  40535e:	b082      	sub	sp, #8
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  405360:	466a      	mov	r2, sp
  405362:	4b10      	ldr	r3, [pc, #64]	; (4053a4 <relaxServo+0x48>)
  405364:	4798      	blx	r3
	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  405366:	f89d 0000 	ldrb.w	r0, [sp]
  40536a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40536e:	2200      	movs	r2, #0
  405370:	4c0d      	ldr	r4, [pc, #52]	; (4053a8 <relaxServo+0x4c>)
  405372:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  405374:	9901      	ldr	r1, [sp, #4]
  405376:	3101      	adds	r1, #1
  405378:	f89d 0000 	ldrb.w	r0, [sp]
  40537c:	b2c9      	uxtb	r1, r1
  40537e:	2200      	movs	r2, #0
  405380:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,0x00);
  405382:	9901      	ldr	r1, [sp, #4]
  405384:	3102      	adds	r1, #2
  405386:	f89d 0000 	ldrb.w	r0, [sp]
  40538a:	b2c9      	uxtb	r1, r1
  40538c:	2200      	movs	r2, #0
  40538e:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,0x00);
  405390:	9901      	ldr	r1, [sp, #4]
  405392:	3103      	adds	r1, #3
  405394:	f89d 0000 	ldrb.w	r0, [sp]
  405398:	b2c9      	uxtb	r1, r1
  40539a:	2200      	movs	r2, #0
  40539c:	47a0      	blx	r4
	
	
}
  40539e:	b002      	add	sp, #8
  4053a0:	bd10      	pop	{r4, pc}
  4053a2:	bf00      	nop
  4053a4:	0040525d 	.word	0x0040525d
  4053a8:	00405105 	.word	0x00405105
  4053ac:	00000000 	.word	0x00000000

004053b0 <WriteServo>:

void WriteServo(int Leg,int svo,float angle)
{
  4053b0:	b530      	push	{r4, r5, lr}
  4053b2:	ed2d 8b02 	vpush	{d8}
  4053b6:	b083      	sub	sp, #12
  4053b8:	4605      	mov	r5, r0
  4053ba:	460c      	mov	r4, r1
  4053bc:	eeb0 8a40 	vmov.f32	s16, s0
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  4053c0:	466a      	mov	r2, sp
  4053c2:	4b2f      	ldr	r3, [pc, #188]	; (405480 <WriteServo+0xd0>)
  4053c4:	4798      	blx	r3
	extern float SvoCal[];
	
	angle = angle - SvoCal[svo*12+2*Leg];
  4053c6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  4053ca:	eb05 0040 	add.w	r0, r5, r0, lsl #1
  4053ce:	4b2d      	ldr	r3, [pc, #180]	; (405484 <WriteServo+0xd4>)
  4053d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  4053d4:	ed90 0a00 	vldr	s0, [r0]
  4053d8:	ee38 0a40 	vsub.f32	s0, s16, s0
	
	if(svo == 2) angle = 180-angle;
  4053dc:	2c02      	cmp	r4, #2
  4053de:	d103      	bne.n	4053e8 <WriteServo+0x38>
  4053e0:	eddf 7a29 	vldr	s15, [pc, #164]	; 405488 <WriteServo+0xd8>
  4053e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
	
	uint16_t stop = (uint16_t)lroundf( (4095.00/(5.00))*(0.550 + 1.900*(angle/180.00)) );
  4053e8:	ee10 0a10 	vmov	r0, s0
  4053ec:	4b27      	ldr	r3, [pc, #156]	; (40548c <WriteServo+0xdc>)
  4053ee:	4798      	blx	r3
  4053f0:	2200      	movs	r2, #0
  4053f2:	4b27      	ldr	r3, [pc, #156]	; (405490 <WriteServo+0xe0>)
  4053f4:	4c27      	ldr	r4, [pc, #156]	; (405494 <WriteServo+0xe4>)
  4053f6:	47a0      	blx	r4
  4053f8:	4c27      	ldr	r4, [pc, #156]	; (405498 <WriteServo+0xe8>)
  4053fa:	a31b      	add	r3, pc, #108	; (adr r3, 405468 <WriteServo+0xb8>)
  4053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405400:	47a0      	blx	r4
  405402:	a31b      	add	r3, pc, #108	; (adr r3, 405470 <WriteServo+0xc0>)
  405404:	e9d3 2300 	ldrd	r2, r3, [r3]
  405408:	4d24      	ldr	r5, [pc, #144]	; (40549c <WriteServo+0xec>)
  40540a:	47a8      	blx	r5
  40540c:	a31a      	add	r3, pc, #104	; (adr r3, 405478 <WriteServo+0xc8>)
  40540e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405412:	47a0      	blx	r4
  405414:	4b22      	ldr	r3, [pc, #136]	; (4054a0 <WriteServo+0xf0>)
  405416:	4798      	blx	r3
  405418:	ee00 0a10 	vmov	s0, r0
  40541c:	4b21      	ldr	r3, [pc, #132]	; (4054a4 <WriteServo+0xf4>)
  40541e:	4798      	blx	r3
  405420:	4605      	mov	r5, r0
	//sendDebugString(buf);	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  405422:	f89d 0000 	ldrb.w	r0, [sp]
  405426:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40542a:	2200      	movs	r2, #0
  40542c:	4c1e      	ldr	r4, [pc, #120]	; (4054a8 <WriteServo+0xf8>)
  40542e:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  405430:	9901      	ldr	r1, [sp, #4]
  405432:	3101      	adds	r1, #1
  405434:	f89d 0000 	ldrb.w	r0, [sp]
  405438:	b2c9      	uxtb	r1, r1
  40543a:	2200      	movs	r2, #0
  40543c:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,stop);
  40543e:	9901      	ldr	r1, [sp, #4]
  405440:	3102      	adds	r1, #2
  405442:	f89d 0000 	ldrb.w	r0, [sp]
  405446:	b2c9      	uxtb	r1, r1
  405448:	b2ea      	uxtb	r2, r5
  40544a:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,stop >> 8);
  40544c:	9901      	ldr	r1, [sp, #4]
  40544e:	3103      	adds	r1, #3
  405450:	f89d 0000 	ldrb.w	r0, [sp]
  405454:	b2c9      	uxtb	r1, r1
  405456:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40545a:	47a0      	blx	r4
	
}
  40545c:	b003      	add	sp, #12
  40545e:	ecbd 8b02 	vpop	{d8}
  405462:	bd30      	pop	{r4, r5, pc}
  405464:	f3af 8000 	nop.w
  405468:	66666666 	.word	0x66666666
  40546c:	3ffe6666 	.word	0x3ffe6666
  405470:	9999999a 	.word	0x9999999a
  405474:	3fe19999 	.word	0x3fe19999
  405478:	00000000 	.word	0x00000000
  40547c:	40899800 	.word	0x40899800
  405480:	0040525d 	.word	0x0040525d
  405484:	20400018 	.word	0x20400018
  405488:	43340000 	.word	0x43340000
  40548c:	0040aabd 	.word	0x0040aabd
  405490:	40668000 	.word	0x40668000
  405494:	0040adb9 	.word	0x0040adb9
  405498:	0040ab65 	.word	0x0040ab65
  40549c:	0040a801 	.word	0x0040a801
  4054a0:	0040b0e9 	.word	0x0040b0e9
  4054a4:	00407e81 	.word	0x00407e81
  4054a8:	00405105 	.word	0x00405105

004054ac <SetupCameraYUVVGA_OV7670>:
	for(int i = 0;  ov_settings[i][0] != 0xff;i++ ) write_SCCB(ov_settings[i][0],ov_settings[i][1]);
	for(int i = 0; ov_format[i] != 0xff;i++ ) write_SCCB(ov_format[i],ov_vga[1]);
	
}

void SetupCameraYUVVGA_OV7670() {
  4054ac:	b510      	push	{r4, lr}
	//Input clock 24Mhz,0x25fps
	write_SCCB_76(0x12,0x80);
  4054ae:	2021      	movs	r0, #33	; 0x21
  4054b0:	2112      	movs	r1, #18
  4054b2:	2280      	movs	r2, #128	; 0x80
  4054b4:	4cca      	ldr	r4, [pc, #808]	; (4057e0 <SetupCameraYUVVGA_OV7670+0x334>)
  4054b6:	47a0      	blx	r4
	write_SCCB_76(0x11,0x00);
  4054b8:	2021      	movs	r0, #33	; 0x21
  4054ba:	2111      	movs	r1, #17
  4054bc:	2200      	movs	r2, #0
  4054be:	47a0      	blx	r4
	write_SCCB_76(0x3a,0x04);
  4054c0:	2021      	movs	r0, #33	; 0x21
  4054c2:	213a      	movs	r1, #58	; 0x3a
  4054c4:	2204      	movs	r2, #4
  4054c6:	47a0      	blx	r4
	write_SCCB_76(0x12,0x00);
  4054c8:	2021      	movs	r0, #33	; 0x21
  4054ca:	2112      	movs	r1, #18
  4054cc:	2200      	movs	r2, #0
  4054ce:	47a0      	blx	r4
	write_SCCB_76(0x17,0x13);
  4054d0:	2021      	movs	r0, #33	; 0x21
  4054d2:	2117      	movs	r1, #23
  4054d4:	2213      	movs	r2, #19
  4054d6:	47a0      	blx	r4
	write_SCCB_76(0x18,0x01);
  4054d8:	2021      	movs	r0, #33	; 0x21
  4054da:	2118      	movs	r1, #24
  4054dc:	2201      	movs	r2, #1
  4054de:	47a0      	blx	r4
	write_SCCB_76(0x32,0xb6);
  4054e0:	2021      	movs	r0, #33	; 0x21
  4054e2:	2132      	movs	r1, #50	; 0x32
  4054e4:	22b6      	movs	r2, #182	; 0xb6
  4054e6:	47a0      	blx	r4
	write_SCCB_76(0x19,0x02);
  4054e8:	2021      	movs	r0, #33	; 0x21
  4054ea:	2119      	movs	r1, #25
  4054ec:	2202      	movs	r2, #2
  4054ee:	47a0      	blx	r4
	write_SCCB_76(0x1a,0x7a);
  4054f0:	2021      	movs	r0, #33	; 0x21
  4054f2:	211a      	movs	r1, #26
  4054f4:	227a      	movs	r2, #122	; 0x7a
  4054f6:	47a0      	blx	r4
	write_SCCB_76(0x03,0x0a);
  4054f8:	2021      	movs	r0, #33	; 0x21
  4054fa:	2103      	movs	r1, #3
  4054fc:	220a      	movs	r2, #10
  4054fe:	47a0      	blx	r4
	write_SCCB_76(0x0c,0x00);
  405500:	2021      	movs	r0, #33	; 0x21
  405502:	210c      	movs	r1, #12
  405504:	2200      	movs	r2, #0
  405506:	47a0      	blx	r4
	write_SCCB_76(0x3e,0x00);
  405508:	2021      	movs	r0, #33	; 0x21
  40550a:	213e      	movs	r1, #62	; 0x3e
  40550c:	2200      	movs	r2, #0
  40550e:	47a0      	blx	r4
	write_SCCB_76(0x70,0x3a);
  405510:	2021      	movs	r0, #33	; 0x21
  405512:	2170      	movs	r1, #112	; 0x70
  405514:	223a      	movs	r2, #58	; 0x3a
  405516:	47a0      	blx	r4
	write_SCCB_76(0x71,0x35);
  405518:	2021      	movs	r0, #33	; 0x21
  40551a:	2171      	movs	r1, #113	; 0x71
  40551c:	2235      	movs	r2, #53	; 0x35
  40551e:	47a0      	blx	r4
	write_SCCB_76(0x72,0x11);
  405520:	2021      	movs	r0, #33	; 0x21
  405522:	2172      	movs	r1, #114	; 0x72
  405524:	2211      	movs	r2, #17
  405526:	47a0      	blx	r4
	write_SCCB_76(0x73,0xf0);
  405528:	2021      	movs	r0, #33	; 0x21
  40552a:	2173      	movs	r1, #115	; 0x73
  40552c:	22f0      	movs	r2, #240	; 0xf0
  40552e:	47a0      	blx	r4
	write_SCCB_76(0xa2,0x02);
  405530:	2021      	movs	r0, #33	; 0x21
  405532:	21a2      	movs	r1, #162	; 0xa2
  405534:	2202      	movs	r2, #2
  405536:	47a0      	blx	r4
	write_SCCB_76(0x7a,0x20);
  405538:	2021      	movs	r0, #33	; 0x21
  40553a:	217a      	movs	r1, #122	; 0x7a
  40553c:	2220      	movs	r2, #32
  40553e:	47a0      	blx	r4
	write_SCCB_76(0x7b,0x10);
  405540:	2021      	movs	r0, #33	; 0x21
  405542:	217b      	movs	r1, #123	; 0x7b
  405544:	2210      	movs	r2, #16
  405546:	47a0      	blx	r4
	write_SCCB_76(0x7c,0x1e);
  405548:	2021      	movs	r0, #33	; 0x21
  40554a:	217c      	movs	r1, #124	; 0x7c
  40554c:	221e      	movs	r2, #30
  40554e:	47a0      	blx	r4
	write_SCCB_76(0x7d,0x35);
  405550:	2021      	movs	r0, #33	; 0x21
  405552:	217d      	movs	r1, #125	; 0x7d
  405554:	2235      	movs	r2, #53	; 0x35
  405556:	47a0      	blx	r4
	write_SCCB_76(0x7e,0x5a);
  405558:	2021      	movs	r0, #33	; 0x21
  40555a:	217e      	movs	r1, #126	; 0x7e
  40555c:	225a      	movs	r2, #90	; 0x5a
  40555e:	47a0      	blx	r4
	write_SCCB_76(0x7f,0x69);
  405560:	2021      	movs	r0, #33	; 0x21
  405562:	217f      	movs	r1, #127	; 0x7f
  405564:	2269      	movs	r2, #105	; 0x69
  405566:	47a0      	blx	r4
	write_SCCB_76(0x80,0x76);
  405568:	2021      	movs	r0, #33	; 0x21
  40556a:	2180      	movs	r1, #128	; 0x80
  40556c:	2276      	movs	r2, #118	; 0x76
  40556e:	47a0      	blx	r4
	write_SCCB_76(0x81,0x80);
  405570:	2021      	movs	r0, #33	; 0x21
  405572:	2181      	movs	r1, #129	; 0x81
  405574:	2280      	movs	r2, #128	; 0x80
  405576:	47a0      	blx	r4
	write_SCCB_76(0x82,0x88);
  405578:	2021      	movs	r0, #33	; 0x21
  40557a:	2182      	movs	r1, #130	; 0x82
  40557c:	2288      	movs	r2, #136	; 0x88
  40557e:	47a0      	blx	r4
	write_SCCB_76(0x83,0x8f);
  405580:	2021      	movs	r0, #33	; 0x21
  405582:	2183      	movs	r1, #131	; 0x83
  405584:	228f      	movs	r2, #143	; 0x8f
  405586:	47a0      	blx	r4
	write_SCCB_76(0x84,0x96);
  405588:	2021      	movs	r0, #33	; 0x21
  40558a:	2184      	movs	r1, #132	; 0x84
  40558c:	2296      	movs	r2, #150	; 0x96
  40558e:	47a0      	blx	r4
	write_SCCB_76(0x85,0xa3);
  405590:	2021      	movs	r0, #33	; 0x21
  405592:	2185      	movs	r1, #133	; 0x85
  405594:	22a3      	movs	r2, #163	; 0xa3
  405596:	47a0      	blx	r4
	write_SCCB_76(0x86,0xaf);
  405598:	2021      	movs	r0, #33	; 0x21
  40559a:	2186      	movs	r1, #134	; 0x86
  40559c:	22af      	movs	r2, #175	; 0xaf
  40559e:	47a0      	blx	r4
	write_SCCB_76(0x87,0xc4);
  4055a0:	2021      	movs	r0, #33	; 0x21
  4055a2:	2187      	movs	r1, #135	; 0x87
  4055a4:	22c4      	movs	r2, #196	; 0xc4
  4055a6:	47a0      	blx	r4
	write_SCCB_76(0x88,0xd7);
  4055a8:	2021      	movs	r0, #33	; 0x21
  4055aa:	2188      	movs	r1, #136	; 0x88
  4055ac:	22d7      	movs	r2, #215	; 0xd7
  4055ae:	47a0      	blx	r4
	write_SCCB_76(0x89,0xe8);
  4055b0:	2021      	movs	r0, #33	; 0x21
  4055b2:	2189      	movs	r1, #137	; 0x89
  4055b4:	22e8      	movs	r2, #232	; 0xe8
  4055b6:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  4055b8:	2021      	movs	r0, #33	; 0x21
  4055ba:	2113      	movs	r1, #19
  4055bc:	22e7      	movs	r2, #231	; 0xe7
  4055be:	47a0      	blx	r4
	write_SCCB_76(0x01,0x28);
  4055c0:	2021      	movs	r0, #33	; 0x21
  4055c2:	2101      	movs	r1, #1
  4055c4:	2228      	movs	r2, #40	; 0x28
  4055c6:	47a0      	blx	r4
	write_SCCB_76(0x02,0x30);
  4055c8:	2021      	movs	r0, #33	; 0x21
  4055ca:	2102      	movs	r1, #2
  4055cc:	2230      	movs	r2, #48	; 0x30
  4055ce:	47a0      	blx	r4
	write_SCCB_76(0x00,0x00);
  4055d0:	2021      	movs	r0, #33	; 0x21
  4055d2:	2100      	movs	r1, #0
  4055d4:	460a      	mov	r2, r1
  4055d6:	47a0      	blx	r4
	write_SCCB_76(0x10,0x00);
  4055d8:	2021      	movs	r0, #33	; 0x21
  4055da:	2110      	movs	r1, #16
  4055dc:	2200      	movs	r2, #0
  4055de:	47a0      	blx	r4
	write_SCCB_76(0x0d,0x40);
  4055e0:	2021      	movs	r0, #33	; 0x21
  4055e2:	210d      	movs	r1, #13
  4055e4:	2240      	movs	r2, #64	; 0x40
  4055e6:	47a0      	blx	r4
	write_SCCB_76(0x14,0x18);
  4055e8:	2021      	movs	r0, #33	; 0x21
  4055ea:	2114      	movs	r1, #20
  4055ec:	2218      	movs	r2, #24
  4055ee:	47a0      	blx	r4
	write_SCCB_76(0xa5,0x07);
  4055f0:	2021      	movs	r0, #33	; 0x21
  4055f2:	21a5      	movs	r1, #165	; 0xa5
  4055f4:	2207      	movs	r2, #7
  4055f6:	47a0      	blx	r4
	write_SCCB_76(0xab,0x08);
  4055f8:	2021      	movs	r0, #33	; 0x21
  4055fa:	21ab      	movs	r1, #171	; 0xab
  4055fc:	2208      	movs	r2, #8
  4055fe:	47a0      	blx	r4
	write_SCCB_76(0x24,0x95);
  405600:	2021      	movs	r0, #33	; 0x21
  405602:	2124      	movs	r1, #36	; 0x24
  405604:	2295      	movs	r2, #149	; 0x95
  405606:	47a0      	blx	r4
	write_SCCB_76(0x25,0x33);
  405608:	2021      	movs	r0, #33	; 0x21
  40560a:	2125      	movs	r1, #37	; 0x25
  40560c:	2233      	movs	r2, #51	; 0x33
  40560e:	47a0      	blx	r4
	write_SCCB_76(0x26,0xe3);
  405610:	2021      	movs	r0, #33	; 0x21
  405612:	2126      	movs	r1, #38	; 0x26
  405614:	22e3      	movs	r2, #227	; 0xe3
  405616:	47a0      	blx	r4
	write_SCCB_76(0x9f,0x78);
  405618:	2021      	movs	r0, #33	; 0x21
  40561a:	219f      	movs	r1, #159	; 0x9f
  40561c:	2278      	movs	r2, #120	; 0x78
  40561e:	47a0      	blx	r4
	write_SCCB_76(0xa0,0x68);
  405620:	2021      	movs	r0, #33	; 0x21
  405622:	21a0      	movs	r1, #160	; 0xa0
  405624:	2268      	movs	r2, #104	; 0x68
  405626:	47a0      	blx	r4
	write_SCCB_76(0xa1,0x03);
  405628:	2021      	movs	r0, #33	; 0x21
  40562a:	21a1      	movs	r1, #161	; 0xa1
  40562c:	2203      	movs	r2, #3
  40562e:	47a0      	blx	r4
	write_SCCB_76(0xa6,0xd8);
  405630:	2021      	movs	r0, #33	; 0x21
  405632:	21a6      	movs	r1, #166	; 0xa6
  405634:	22d8      	movs	r2, #216	; 0xd8
  405636:	47a0      	blx	r4
	write_SCCB_76(0xa7,0xd8);
  405638:	2021      	movs	r0, #33	; 0x21
  40563a:	21a7      	movs	r1, #167	; 0xa7
  40563c:	22d8      	movs	r2, #216	; 0xd8
  40563e:	47a0      	blx	r4
	write_SCCB_76(0xa8,0xf0);
  405640:	2021      	movs	r0, #33	; 0x21
  405642:	21a8      	movs	r1, #168	; 0xa8
  405644:	22f0      	movs	r2, #240	; 0xf0
  405646:	47a0      	blx	r4
	write_SCCB_76(0xa9,0x90);
  405648:	2021      	movs	r0, #33	; 0x21
  40564a:	21a9      	movs	r1, #169	; 0xa9
  40564c:	2290      	movs	r2, #144	; 0x90
  40564e:	47a0      	blx	r4
	write_SCCB_76(0xaa,0x94);
  405650:	2021      	movs	r0, #33	; 0x21
  405652:	21aa      	movs	r1, #170	; 0xaa
  405654:	2294      	movs	r2, #148	; 0x94
  405656:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  405658:	2021      	movs	r0, #33	; 0x21
  40565a:	2113      	movs	r1, #19
  40565c:	22e7      	movs	r2, #231	; 0xe7
  40565e:	47a0      	blx	r4
	write_SCCB_76(0x0e,0x61);
  405660:	2021      	movs	r0, #33	; 0x21
  405662:	210e      	movs	r1, #14
  405664:	2261      	movs	r2, #97	; 0x61
  405666:	47a0      	blx	r4
	write_SCCB_76(0x0f,0x4b);
  405668:	2021      	movs	r0, #33	; 0x21
  40566a:	210f      	movs	r1, #15
  40566c:	224b      	movs	r2, #75	; 0x4b
  40566e:	47a0      	blx	r4
	write_SCCB_76(0x16,0x02);
  405670:	2021      	movs	r0, #33	; 0x21
  405672:	2116      	movs	r1, #22
  405674:	2202      	movs	r2, #2
  405676:	47a0      	blx	r4
	write_SCCB_76(0x1e,0x07);
  405678:	2021      	movs	r0, #33	; 0x21
  40567a:	211e      	movs	r1, #30
  40567c:	2207      	movs	r2, #7
  40567e:	47a0      	blx	r4
	write_SCCB_76(0x21,0x02);
  405680:	2021      	movs	r0, #33	; 0x21
  405682:	4601      	mov	r1, r0
  405684:	2202      	movs	r2, #2
  405686:	47a0      	blx	r4
	write_SCCB_76(0x22,0x91);
  405688:	2021      	movs	r0, #33	; 0x21
  40568a:	2122      	movs	r1, #34	; 0x22
  40568c:	2291      	movs	r2, #145	; 0x91
  40568e:	47a0      	blx	r4
	write_SCCB_76(0x29,0x07);
  405690:	2021      	movs	r0, #33	; 0x21
  405692:	2129      	movs	r1, #41	; 0x29
  405694:	2207      	movs	r2, #7
  405696:	47a0      	blx	r4
	write_SCCB_76(0x33,0x0b);
  405698:	2021      	movs	r0, #33	; 0x21
  40569a:	2133      	movs	r1, #51	; 0x33
  40569c:	220b      	movs	r2, #11
  40569e:	47a0      	blx	r4
	write_SCCB_76(0x35,0x0b);
  4056a0:	2021      	movs	r0, #33	; 0x21
  4056a2:	2135      	movs	r1, #53	; 0x35
  4056a4:	220b      	movs	r2, #11
  4056a6:	47a0      	blx	r4
	write_SCCB_76(0x37,0x1d);
  4056a8:	2021      	movs	r0, #33	; 0x21
  4056aa:	2137      	movs	r1, #55	; 0x37
  4056ac:	221d      	movs	r2, #29
  4056ae:	47a0      	blx	r4
	write_SCCB_76(0x38,0x71);
  4056b0:	2021      	movs	r0, #33	; 0x21
  4056b2:	2138      	movs	r1, #56	; 0x38
  4056b4:	2271      	movs	r2, #113	; 0x71
  4056b6:	47a0      	blx	r4
	write_SCCB_76(0x39,0x2a);
  4056b8:	2021      	movs	r0, #33	; 0x21
  4056ba:	2139      	movs	r1, #57	; 0x39
  4056bc:	222a      	movs	r2, #42	; 0x2a
  4056be:	47a0      	blx	r4
	write_SCCB_76(0x3c,0x78);
  4056c0:	2021      	movs	r0, #33	; 0x21
  4056c2:	213c      	movs	r1, #60	; 0x3c
  4056c4:	2278      	movs	r2, #120	; 0x78
  4056c6:	47a0      	blx	r4
	write_SCCB_76(0x4d,0x40);
  4056c8:	2021      	movs	r0, #33	; 0x21
  4056ca:	214d      	movs	r1, #77	; 0x4d
  4056cc:	2240      	movs	r2, #64	; 0x40
  4056ce:	47a0      	blx	r4
	write_SCCB_76(0x4e,0x20);
  4056d0:	2021      	movs	r0, #33	; 0x21
  4056d2:	214e      	movs	r1, #78	; 0x4e
  4056d4:	2220      	movs	r2, #32
  4056d6:	47a0      	blx	r4
	write_SCCB_76(0x69,0x00);
  4056d8:	2021      	movs	r0, #33	; 0x21
  4056da:	2169      	movs	r1, #105	; 0x69
  4056dc:	2200      	movs	r2, #0
  4056de:	47a0      	blx	r4
	write_SCCB_76(0x6b,0x0a);
  4056e0:	2021      	movs	r0, #33	; 0x21
  4056e2:	216b      	movs	r1, #107	; 0x6b
  4056e4:	220a      	movs	r2, #10
  4056e6:	47a0      	blx	r4
	write_SCCB_76(0x74,0x10);
  4056e8:	2021      	movs	r0, #33	; 0x21
  4056ea:	2174      	movs	r1, #116	; 0x74
  4056ec:	2210      	movs	r2, #16
  4056ee:	47a0      	blx	r4
	write_SCCB_76(0x8d,0x4f);
  4056f0:	2021      	movs	r0, #33	; 0x21
  4056f2:	218d      	movs	r1, #141	; 0x8d
  4056f4:	224f      	movs	r2, #79	; 0x4f
  4056f6:	47a0      	blx	r4
	write_SCCB_76(0x8e,0x00);
  4056f8:	2021      	movs	r0, #33	; 0x21
  4056fa:	218e      	movs	r1, #142	; 0x8e
  4056fc:	2200      	movs	r2, #0
  4056fe:	47a0      	blx	r4
	write_SCCB_76(0x8f,0x00);
  405700:	2021      	movs	r0, #33	; 0x21
  405702:	218f      	movs	r1, #143	; 0x8f
  405704:	2200      	movs	r2, #0
  405706:	47a0      	blx	r4
	write_SCCB_76(0x90,0x00);
  405708:	2021      	movs	r0, #33	; 0x21
  40570a:	2190      	movs	r1, #144	; 0x90
  40570c:	2200      	movs	r2, #0
  40570e:	47a0      	blx	r4
	write_SCCB_76(0x91,0x00);
  405710:	2021      	movs	r0, #33	; 0x21
  405712:	2191      	movs	r1, #145	; 0x91
  405714:	2200      	movs	r2, #0
  405716:	47a0      	blx	r4
	write_SCCB_76(0x92,0x66);
  405718:	2021      	movs	r0, #33	; 0x21
  40571a:	2192      	movs	r1, #146	; 0x92
  40571c:	2266      	movs	r2, #102	; 0x66
  40571e:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  405720:	2021      	movs	r0, #33	; 0x21
  405722:	2196      	movs	r1, #150	; 0x96
  405724:	2200      	movs	r2, #0
  405726:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x80);
  405728:	2021      	movs	r0, #33	; 0x21
  40572a:	219a      	movs	r1, #154	; 0x9a
  40572c:	2280      	movs	r2, #128	; 0x80
  40572e:	47a0      	blx	r4
	write_SCCB_76(0xb0,0x84);
  405730:	2021      	movs	r0, #33	; 0x21
  405732:	21b0      	movs	r1, #176	; 0xb0
  405734:	2284      	movs	r2, #132	; 0x84
  405736:	47a0      	blx	r4
	write_SCCB_76(0xb1,0x0c);
  405738:	2021      	movs	r0, #33	; 0x21
  40573a:	21b1      	movs	r1, #177	; 0xb1
  40573c:	220c      	movs	r2, #12
  40573e:	47a0      	blx	r4
	write_SCCB_76(0xb2,0x0e);
  405740:	2021      	movs	r0, #33	; 0x21
  405742:	21b2      	movs	r1, #178	; 0xb2
  405744:	220e      	movs	r2, #14
  405746:	47a0      	blx	r4
	write_SCCB_76(0xb3,0x82);
  405748:	2021      	movs	r0, #33	; 0x21
  40574a:	21b3      	movs	r1, #179	; 0xb3
  40574c:	2282      	movs	r2, #130	; 0x82
  40574e:	47a0      	blx	r4
	write_SCCB_76(0xb8,0x0a);
  405750:	2021      	movs	r0, #33	; 0x21
  405752:	21b8      	movs	r1, #184	; 0xb8
  405754:	220a      	movs	r2, #10
  405756:	47a0      	blx	r4
	write_SCCB_76(0x43,0x14);
  405758:	2021      	movs	r0, #33	; 0x21
  40575a:	2143      	movs	r1, #67	; 0x43
  40575c:	2214      	movs	r2, #20
  40575e:	47a0      	blx	r4
	write_SCCB_76(0x44,0xf0);
  405760:	2021      	movs	r0, #33	; 0x21
  405762:	2144      	movs	r1, #68	; 0x44
  405764:	22f0      	movs	r2, #240	; 0xf0
  405766:	47a0      	blx	r4
	write_SCCB_76(0x45,0x34);
  405768:	2021      	movs	r0, #33	; 0x21
  40576a:	2145      	movs	r1, #69	; 0x45
  40576c:	2234      	movs	r2, #52	; 0x34
  40576e:	47a0      	blx	r4
	write_SCCB_76(0x46,0x58);
  405770:	2021      	movs	r0, #33	; 0x21
  405772:	2146      	movs	r1, #70	; 0x46
  405774:	2258      	movs	r2, #88	; 0x58
  405776:	47a0      	blx	r4
	write_SCCB_76(0x47,0x28);
  405778:	2021      	movs	r0, #33	; 0x21
  40577a:	2147      	movs	r1, #71	; 0x47
  40577c:	2228      	movs	r2, #40	; 0x28
  40577e:	47a0      	blx	r4
	write_SCCB_76(0x48,0x3a);
  405780:	2021      	movs	r0, #33	; 0x21
  405782:	2148      	movs	r1, #72	; 0x48
  405784:	223a      	movs	r2, #58	; 0x3a
  405786:	47a0      	blx	r4
	write_SCCB_76(0x59,0x88);
  405788:	2021      	movs	r0, #33	; 0x21
  40578a:	2159      	movs	r1, #89	; 0x59
  40578c:	2288      	movs	r2, #136	; 0x88
  40578e:	47a0      	blx	r4
	write_SCCB_76(0x5a,0x88);
  405790:	2021      	movs	r0, #33	; 0x21
  405792:	215a      	movs	r1, #90	; 0x5a
  405794:	2288      	movs	r2, #136	; 0x88
  405796:	47a0      	blx	r4
	write_SCCB_76(0x5b,0x44);
  405798:	2021      	movs	r0, #33	; 0x21
  40579a:	215b      	movs	r1, #91	; 0x5b
  40579c:	2244      	movs	r2, #68	; 0x44
  40579e:	47a0      	blx	r4
	write_SCCB_76(0x5c,0x67);
  4057a0:	2021      	movs	r0, #33	; 0x21
  4057a2:	215c      	movs	r1, #92	; 0x5c
  4057a4:	2267      	movs	r2, #103	; 0x67
  4057a6:	47a0      	blx	r4
	write_SCCB_76(0x5d,0x49);
  4057a8:	2021      	movs	r0, #33	; 0x21
  4057aa:	215d      	movs	r1, #93	; 0x5d
  4057ac:	2249      	movs	r2, #73	; 0x49
  4057ae:	47a0      	blx	r4
	write_SCCB_76(0x5e,0x0e);
  4057b0:	2021      	movs	r0, #33	; 0x21
  4057b2:	215e      	movs	r1, #94	; 0x5e
  4057b4:	220e      	movs	r2, #14
  4057b6:	47a0      	blx	r4
	write_SCCB_76(0x64,0x04);
  4057b8:	2021      	movs	r0, #33	; 0x21
  4057ba:	2164      	movs	r1, #100	; 0x64
  4057bc:	2204      	movs	r2, #4
  4057be:	47a0      	blx	r4
	write_SCCB_76(0x65,0x20);
  4057c0:	2021      	movs	r0, #33	; 0x21
  4057c2:	2165      	movs	r1, #101	; 0x65
  4057c4:	2220      	movs	r2, #32
  4057c6:	47a0      	blx	r4
	write_SCCB_76(0x66,0x05);
  4057c8:	2021      	movs	r0, #33	; 0x21
  4057ca:	2166      	movs	r1, #102	; 0x66
  4057cc:	2205      	movs	r2, #5
  4057ce:	47a0      	blx	r4
	write_SCCB_76(0x94,0x04);
  4057d0:	2021      	movs	r0, #33	; 0x21
  4057d2:	2194      	movs	r1, #148	; 0x94
  4057d4:	2204      	movs	r2, #4
  4057d6:	47a0      	blx	r4
	write_SCCB_76(0x95,0x08);
  4057d8:	2021      	movs	r0, #33	; 0x21
  4057da:	2195      	movs	r1, #149	; 0x95
  4057dc:	2208      	movs	r2, #8
  4057de:	e001      	b.n	4057e4 <SetupCameraYUVVGA_OV7670+0x338>
  4057e0:	00405105 	.word	0x00405105
  4057e4:	47a0      	blx	r4
	write_SCCB_76(0x6c,0x0a);
  4057e6:	2021      	movs	r0, #33	; 0x21
  4057e8:	216c      	movs	r1, #108	; 0x6c
  4057ea:	220a      	movs	r2, #10
  4057ec:	47a0      	blx	r4
	write_SCCB_76(0x6d,0x55);
  4057ee:	2021      	movs	r0, #33	; 0x21
  4057f0:	216d      	movs	r1, #109	; 0x6d
  4057f2:	2255      	movs	r2, #85	; 0x55
  4057f4:	47a0      	blx	r4
	write_SCCB_76(0x6e,0x11);
  4057f6:	2021      	movs	r0, #33	; 0x21
  4057f8:	216e      	movs	r1, #110	; 0x6e
  4057fa:	2211      	movs	r2, #17
  4057fc:	47a0      	blx	r4
	write_SCCB_76(0x6f,0x9e);
  4057fe:	2021      	movs	r0, #33	; 0x21
  405800:	216f      	movs	r1, #111	; 0x6f
  405802:	229e      	movs	r2, #158	; 0x9e
  405804:	47a0      	blx	r4
	write_SCCB_76(0x6a,0x40);
  405806:	2021      	movs	r0, #33	; 0x21
  405808:	216a      	movs	r1, #106	; 0x6a
  40580a:	2240      	movs	r2, #64	; 0x40
  40580c:	47a0      	blx	r4
	write_SCCB_76(0x01,0x20);
  40580e:	2021      	movs	r0, #33	; 0x21
  405810:	2101      	movs	r1, #1
  405812:	2220      	movs	r2, #32
  405814:	47a0      	blx	r4
	write_SCCB_76(0x02,0x20);
  405816:	2021      	movs	r0, #33	; 0x21
  405818:	2102      	movs	r1, #2
  40581a:	2220      	movs	r2, #32
  40581c:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  40581e:	2021      	movs	r0, #33	; 0x21
  405820:	2113      	movs	r1, #19
  405822:	22e7      	movs	r2, #231	; 0xe7
  405824:	47a0      	blx	r4
	write_SCCB_76(0x4f,0x80);
  405826:	2021      	movs	r0, #33	; 0x21
  405828:	214f      	movs	r1, #79	; 0x4f
  40582a:	2280      	movs	r2, #128	; 0x80
  40582c:	47a0      	blx	r4
	write_SCCB_76(0x50,0x80);
  40582e:	2021      	movs	r0, #33	; 0x21
  405830:	2150      	movs	r1, #80	; 0x50
  405832:	2280      	movs	r2, #128	; 0x80
  405834:	47a0      	blx	r4
	write_SCCB_76(0x51,0x00);
  405836:	2021      	movs	r0, #33	; 0x21
  405838:	2151      	movs	r1, #81	; 0x51
  40583a:	2200      	movs	r2, #0
  40583c:	47a0      	blx	r4
	write_SCCB_76(0x52,0x22);
  40583e:	2021      	movs	r0, #33	; 0x21
  405840:	2152      	movs	r1, #82	; 0x52
  405842:	2222      	movs	r2, #34	; 0x22
  405844:	47a0      	blx	r4
	write_SCCB_76(0x53,0x5e);
  405846:	2021      	movs	r0, #33	; 0x21
  405848:	2153      	movs	r1, #83	; 0x53
  40584a:	225e      	movs	r2, #94	; 0x5e
  40584c:	47a0      	blx	r4
	write_SCCB_76(0x54,0x80);
  40584e:	2021      	movs	r0, #33	; 0x21
  405850:	2154      	movs	r1, #84	; 0x54
  405852:	2280      	movs	r2, #128	; 0x80
  405854:	47a0      	blx	r4
	write_SCCB_76(0x58,0x9e);
  405856:	2021      	movs	r0, #33	; 0x21
  405858:	2158      	movs	r1, #88	; 0x58
  40585a:	229e      	movs	r2, #158	; 0x9e
  40585c:	47a0      	blx	r4
	write_SCCB_76(0x41,0x08);
  40585e:	2021      	movs	r0, #33	; 0x21
  405860:	2141      	movs	r1, #65	; 0x41
  405862:	2208      	movs	r2, #8
  405864:	47a0      	blx	r4
	write_SCCB_76(0x3f,0x00);
  405866:	2021      	movs	r0, #33	; 0x21
  405868:	213f      	movs	r1, #63	; 0x3f
  40586a:	2200      	movs	r2, #0
  40586c:	47a0      	blx	r4
	write_SCCB_76(0x75,0x03);
  40586e:	2021      	movs	r0, #33	; 0x21
  405870:	2175      	movs	r1, #117	; 0x75
  405872:	2203      	movs	r2, #3
  405874:	47a0      	blx	r4
	write_SCCB_76(0x76,0xe1);
  405876:	2021      	movs	r0, #33	; 0x21
  405878:	2176      	movs	r1, #118	; 0x76
  40587a:	22e1      	movs	r2, #225	; 0xe1
  40587c:	47a0      	blx	r4
	write_SCCB_76(0x4c,0x00);
  40587e:	2021      	movs	r0, #33	; 0x21
  405880:	214c      	movs	r1, #76	; 0x4c
  405882:	2200      	movs	r2, #0
  405884:	47a0      	blx	r4
	write_SCCB_76(0x77,0x00);
  405886:	2021      	movs	r0, #33	; 0x21
  405888:	2177      	movs	r1, #119	; 0x77
  40588a:	2200      	movs	r2, #0
  40588c:	47a0      	blx	r4
	write_SCCB_76(0x3d,0x00);
  40588e:	2021      	movs	r0, #33	; 0x21
  405890:	213d      	movs	r1, #61	; 0x3d
  405892:	2200      	movs	r2, #0
  405894:	47a0      	blx	r4
	write_SCCB_76(0x4b,0x09);
  405896:	2021      	movs	r0, #33	; 0x21
  405898:	214b      	movs	r1, #75	; 0x4b
  40589a:	2209      	movs	r2, #9
  40589c:	47a0      	blx	r4
	write_SCCB_76(0xc9,0x60);
  40589e:	2021      	movs	r0, #33	; 0x21
  4058a0:	21c9      	movs	r1, #201	; 0xc9
  4058a2:	2260      	movs	r2, #96	; 0x60
  4058a4:	47a0      	blx	r4
	write_SCCB_76(0x41,0x38);
  4058a6:	2021      	movs	r0, #33	; 0x21
  4058a8:	2141      	movs	r1, #65	; 0x41
  4058aa:	2238      	movs	r2, #56	; 0x38
  4058ac:	47a0      	blx	r4
	write_SCCB_76(0x56,0x40);
  4058ae:	2021      	movs	r0, #33	; 0x21
  4058b0:	2156      	movs	r1, #86	; 0x56
  4058b2:	2240      	movs	r2, #64	; 0x40
  4058b4:	47a0      	blx	r4
	write_SCCB_76(0x34,0x11);
  4058b6:	2021      	movs	r0, #33	; 0x21
  4058b8:	2134      	movs	r1, #52	; 0x34
  4058ba:	2211      	movs	r2, #17
  4058bc:	47a0      	blx	r4
	write_SCCB_76(0x3b,0x0a);
  4058be:	2021      	movs	r0, #33	; 0x21
  4058c0:	213b      	movs	r1, #59	; 0x3b
  4058c2:	220a      	movs	r2, #10
  4058c4:	47a0      	blx	r4
	write_SCCB_76(0xa4,0x88);
  4058c6:	2021      	movs	r0, #33	; 0x21
  4058c8:	21a4      	movs	r1, #164	; 0xa4
  4058ca:	2288      	movs	r2, #136	; 0x88
  4058cc:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  4058ce:	2021      	movs	r0, #33	; 0x21
  4058d0:	2196      	movs	r1, #150	; 0x96
  4058d2:	2200      	movs	r2, #0
  4058d4:	47a0      	blx	r4
	write_SCCB_76(0x97,0x30);
  4058d6:	2021      	movs	r0, #33	; 0x21
  4058d8:	2197      	movs	r1, #151	; 0x97
  4058da:	2230      	movs	r2, #48	; 0x30
  4058dc:	47a0      	blx	r4
	write_SCCB_76(0x98,0x20);
  4058de:	2021      	movs	r0, #33	; 0x21
  4058e0:	2198      	movs	r1, #152	; 0x98
  4058e2:	2220      	movs	r2, #32
  4058e4:	47a0      	blx	r4
	write_SCCB_76(0x99,0x30);
  4058e6:	2021      	movs	r0, #33	; 0x21
  4058e8:	2199      	movs	r1, #153	; 0x99
  4058ea:	2230      	movs	r2, #48	; 0x30
  4058ec:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x84);
  4058ee:	2021      	movs	r0, #33	; 0x21
  4058f0:	219a      	movs	r1, #154	; 0x9a
  4058f2:	2284      	movs	r2, #132	; 0x84
  4058f4:	47a0      	blx	r4
	write_SCCB_76(0x9b,0x29);
  4058f6:	2021      	movs	r0, #33	; 0x21
  4058f8:	219b      	movs	r1, #155	; 0x9b
  4058fa:	2229      	movs	r2, #41	; 0x29
  4058fc:	47a0      	blx	r4
	write_SCCB_76(0x9c,0x03);
  4058fe:	2021      	movs	r0, #33	; 0x21
  405900:	219c      	movs	r1, #156	; 0x9c
  405902:	2203      	movs	r2, #3
  405904:	47a0      	blx	r4
	write_SCCB_76(0x9d,0x98);
  405906:	2021      	movs	r0, #33	; 0x21
  405908:	219d      	movs	r1, #157	; 0x9d
  40590a:	2298      	movs	r2, #152	; 0x98
  40590c:	47a0      	blx	r4
	write_SCCB_76(0x9e,0x3f);
  40590e:	2021      	movs	r0, #33	; 0x21
  405910:	219e      	movs	r1, #158	; 0x9e
  405912:	223f      	movs	r2, #63	; 0x3f
  405914:	47a0      	blx	r4
	write_SCCB_76(0x78,0x04);
  405916:	2021      	movs	r0, #33	; 0x21
  405918:	2178      	movs	r1, #120	; 0x78
  40591a:	2204      	movs	r2, #4
  40591c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x01);
  40591e:	2021      	movs	r0, #33	; 0x21
  405920:	2179      	movs	r1, #121	; 0x79
  405922:	2201      	movs	r2, #1
  405924:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xf0);
  405926:	2021      	movs	r0, #33	; 0x21
  405928:	21c8      	movs	r1, #200	; 0xc8
  40592a:	22f0      	movs	r2, #240	; 0xf0
  40592c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0f);
  40592e:	2021      	movs	r0, #33	; 0x21
  405930:	2179      	movs	r1, #121	; 0x79
  405932:	220f      	movs	r2, #15
  405934:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x00);
  405936:	2021      	movs	r0, #33	; 0x21
  405938:	21c8      	movs	r1, #200	; 0xc8
  40593a:	2200      	movs	r2, #0
  40593c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x10);
  40593e:	2021      	movs	r0, #33	; 0x21
  405940:	2179      	movs	r1, #121	; 0x79
  405942:	2210      	movs	r2, #16
  405944:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x7e);
  405946:	2021      	movs	r0, #33	; 0x21
  405948:	21c8      	movs	r1, #200	; 0xc8
  40594a:	227e      	movs	r2, #126	; 0x7e
  40594c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0a);
  40594e:	2021      	movs	r0, #33	; 0x21
  405950:	2179      	movs	r1, #121	; 0x79
  405952:	220a      	movs	r2, #10
  405954:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  405956:	2021      	movs	r0, #33	; 0x21
  405958:	21c8      	movs	r1, #200	; 0xc8
  40595a:	2280      	movs	r2, #128	; 0x80
  40595c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0b);
  40595e:	2021      	movs	r0, #33	; 0x21
  405960:	2179      	movs	r1, #121	; 0x79
  405962:	220b      	movs	r2, #11
  405964:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x01);
  405966:	2021      	movs	r0, #33	; 0x21
  405968:	21c8      	movs	r1, #200	; 0xc8
  40596a:	2201      	movs	r2, #1
  40596c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0c);
  40596e:	2021      	movs	r0, #33	; 0x21
  405970:	2179      	movs	r1, #121	; 0x79
  405972:	220c      	movs	r2, #12
  405974:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x0f);
  405976:	2021      	movs	r0, #33	; 0x21
  405978:	21c8      	movs	r1, #200	; 0xc8
  40597a:	220f      	movs	r2, #15
  40597c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0d);
  40597e:	2021      	movs	r0, #33	; 0x21
  405980:	2179      	movs	r1, #121	; 0x79
  405982:	220d      	movs	r2, #13
  405984:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x20);
  405986:	2021      	movs	r0, #33	; 0x21
  405988:	21c8      	movs	r1, #200	; 0xc8
  40598a:	2220      	movs	r2, #32
  40598c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x09);
  40598e:	2021      	movs	r0, #33	; 0x21
  405990:	2179      	movs	r1, #121	; 0x79
  405992:	2209      	movs	r2, #9
  405994:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  405996:	2021      	movs	r0, #33	; 0x21
  405998:	21c8      	movs	r1, #200	; 0xc8
  40599a:	2280      	movs	r2, #128	; 0x80
  40599c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x02);
  40599e:	2021      	movs	r0, #33	; 0x21
  4059a0:	2179      	movs	r1, #121	; 0x79
  4059a2:	2202      	movs	r2, #2
  4059a4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xc0);
  4059a6:	2021      	movs	r0, #33	; 0x21
  4059a8:	21c8      	movs	r1, #200	; 0xc8
  4059aa:	22c0      	movs	r2, #192	; 0xc0
  4059ac:	47a0      	blx	r4
	write_SCCB_76(0x79,0x03);
  4059ae:	2021      	movs	r0, #33	; 0x21
  4059b0:	2179      	movs	r1, #121	; 0x79
  4059b2:	2203      	movs	r2, #3
  4059b4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x40);
  4059b6:	2021      	movs	r0, #33	; 0x21
  4059b8:	21c8      	movs	r1, #200	; 0xc8
  4059ba:	2240      	movs	r2, #64	; 0x40
  4059bc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x05);
  4059be:	2021      	movs	r0, #33	; 0x21
  4059c0:	2179      	movs	r1, #121	; 0x79
  4059c2:	2205      	movs	r2, #5
  4059c4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x30);
  4059c6:	2021      	movs	r0, #33	; 0x21
  4059c8:	21c8      	movs	r1, #200	; 0xc8
  4059ca:	2230      	movs	r2, #48	; 0x30
  4059cc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x26);
  4059ce:	2021      	movs	r0, #33	; 0x21
  4059d0:	2179      	movs	r1, #121	; 0x79
  4059d2:	2226      	movs	r2, #38	; 0x26
  4059d4:	47a0      	blx	r4
	write_SCCB_76(0x2d,0x00);
  4059d6:	2021      	movs	r0, #33	; 0x21
  4059d8:	212d      	movs	r1, #45	; 0x2d
  4059da:	2200      	movs	r2, #0
  4059dc:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  4059de:	2021      	movs	r0, #33	; 0x21
  4059e0:	212e      	movs	r1, #46	; 0x2e
  4059e2:	2200      	movs	r2, #0
  4059e4:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  4059e6:	2021      	movs	r0, #33	; 0x21
  4059e8:	212e      	movs	r1, #46	; 0x2e
  4059ea:	2200      	movs	r2, #0
  4059ec:	47a0      	blx	r4
	write_SCCB_76(0x1b,0x00);
  4059ee:	2021      	movs	r0, #33	; 0x21
  4059f0:	211b      	movs	r1, #27
  4059f2:	2200      	movs	r2, #0
  4059f4:	47a0      	blx	r4
	write_SCCB_76(0x15,1<<3|1<<1);
  4059f6:	2021      	movs	r0, #33	; 0x21
  4059f8:	2115      	movs	r1, #21
  4059fa:	220a      	movs	r2, #10
  4059fc:	47a0      	blx	r4
  4059fe:	bd10      	pop	{r4, pc}

00405a00 <getBatVoltage>:
	*/
}


//get battery voltage
float getBatVoltage() {
  405a00:	b538      	push	{r3, r4, r5, lr}
  405a02:	4b19      	ldr	r3, [pc, #100]	; (405a68 <getBatVoltage+0x68>)
  405a04:	2201      	movs	r2, #1
  405a06:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  405a08:	2202      	movs	r2, #2
  405a0a:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  405a0c:	461a      	mov	r2, r3
  405a0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
	afec_start_software_conversion(AFEC1);
	
	while(!(afec_get_interrupt_status(AFEC1) & (1<<AFEC_CHANNEL_0)));
  405a10:	f013 0f01 	tst.w	r3, #1
  405a14:	d0fb      	beq.n	405a0e <getBatVoltage+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  405a16:	4b14      	ldr	r3, [pc, #80]	; (405a68 <getBatVoltage+0x68>)
  405a18:	2200      	movs	r2, #0
  405a1a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  405a1c:	6e98      	ldr	r0, [r3, #104]	; 0x68

	uint16_t convRes = afec_channel_get_value(AFEC1,AFEC_CHANNEL_0) - 0x7f0;
  405a1e:	f5a0 60fe 	sub.w	r0, r0, #2032	; 0x7f0
	return (3.3*convRes/4095.00)*((140.00+960.00)/105.00);
  405a22:	b280      	uxth	r0, r0
  405a24:	4b11      	ldr	r3, [pc, #68]	; (405a6c <getBatVoltage+0x6c>)
  405a26:	4798      	blx	r3
  405a28:	4c11      	ldr	r4, [pc, #68]	; (405a70 <getBatVoltage+0x70>)
  405a2a:	a309      	add	r3, pc, #36	; (adr r3, 405a50 <getBatVoltage+0x50>)
  405a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a30:	47a0      	blx	r4
  405a32:	a309      	add	r3, pc, #36	; (adr r3, 405a58 <getBatVoltage+0x58>)
  405a34:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a38:	4d0e      	ldr	r5, [pc, #56]	; (405a74 <getBatVoltage+0x74>)
  405a3a:	47a8      	blx	r5
  405a3c:	a308      	add	r3, pc, #32	; (adr r3, 405a60 <getBatVoltage+0x60>)
  405a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a42:	47a0      	blx	r4
  405a44:	4b0c      	ldr	r3, [pc, #48]	; (405a78 <getBatVoltage+0x78>)
  405a46:	4798      	blx	r3
}
  405a48:	ee00 0a10 	vmov	s0, r0
  405a4c:	bd38      	pop	{r3, r4, r5, pc}
  405a4e:	bf00      	nop
  405a50:	66666666 	.word	0x66666666
  405a54:	400a6666 	.word	0x400a6666
  405a58:	00000000 	.word	0x00000000
  405a5c:	40affe00 	.word	0x40affe00
  405a60:	3cf3cf3d 	.word	0x3cf3cf3d
  405a64:	4024f3cf 	.word	0x4024f3cf
  405a68:	40064000 	.word	0x40064000
  405a6c:	0040aa99 	.word	0x0040aa99
  405a70:	0040ab65 	.word	0x0040ab65
  405a74:	0040adb9 	.word	0x0040adb9
  405a78:	0040b0e9 	.word	0x0040b0e9

00405a7c <dumpFrame>:
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
  405a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a7e:	4607      	mov	r7, r0
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  405a80:	4a10      	ldr	r2, [pc, #64]	; (405ac4 <dumpFrame+0x48>)
  405a82:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  405a84:	f043 0301 	orr.w	r3, r3, #1
  405a88:	63d3      	str	r3, [r2, #60]	; 0x3c
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
  405a8a:	480f      	ldr	r0, [pc, #60]	; (405ac8 <dumpFrame+0x4c>)
  405a8c:	4b0f      	ldr	r3, [pc, #60]	; (405acc <dumpFrame+0x50>)
  405a8e:	4798      	blx	r3
  405a90:	463e      	mov	r6, r7
  405a92:	f507 3716 	add.w	r7, r7, #153600	; 0x25800
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
		while(!uart_is_tx_ready(UART4));
  405a96:	4d0e      	ldr	r5, [pc, #56]	; (405ad0 <dumpFrame+0x54>)
  405a98:	4c0e      	ldr	r4, [pc, #56]	; (405ad4 <dumpFrame+0x58>)
  405a9a:	4620      	mov	r0, r4
  405a9c:	47a8      	blx	r5
  405a9e:	2800      	cmp	r0, #0
  405aa0:	d0fb      	beq.n	405a9a <dumpFrame+0x1e>
		uart_write(UART4,imgData[i]);
  405aa2:	f816 1b01 	ldrb.w	r1, [r6], #1
  405aa6:	4620      	mov	r0, r4
  405aa8:	4b0b      	ldr	r3, [pc, #44]	; (405ad8 <dumpFrame+0x5c>)
  405aaa:	4798      	blx	r3
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
  405aac:	42be      	cmp	r6, r7
  405aae:	d1f4      	bne.n	405a9a <dumpFrame+0x1e>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,imgData[i]);
	}
	sendDebugString(":ENDIMG\n");
  405ab0:	480a      	ldr	r0, [pc, #40]	; (405adc <dumpFrame+0x60>)
  405ab2:	4b06      	ldr	r3, [pc, #24]	; (405acc <dumpFrame+0x50>)
  405ab4:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  405ab6:	4a03      	ldr	r2, [pc, #12]	; (405ac4 <dumpFrame+0x48>)
  405ab8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  405aba:	f043 0301 	orr.w	r3, r3, #1
  405abe:	6393      	str	r3, [r2, #56]	; 0x38
  405ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ac2:	bf00      	nop
  405ac4:	4004c000 	.word	0x4004c000
  405ac8:	00413334 	.word	0x00413334
  405acc:	0040019d 	.word	0x0040019d
  405ad0:	00402d6d 	.word	0x00402d6d
  405ad4:	400e1e00 	.word	0x400e1e00
  405ad8:	00402d79 	.word	0x00402d79
  405adc:	0041333c 	.word	0x0041333c

00405ae0 <calcRotation>:
	isi_dma_channel_enable(ISI,1);
	//memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
}

//Inverse Kinamatic functions
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
  405ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ae4:	ed2d 8b0a 	vpush	{d8-d12}
  405ae8:	b08b      	sub	sp, #44	; 0x2c
  405aea:	eef0 9a41 	vmov.f32	s19, s2
  405aee:	eeb0 aa61 	vmov.f32	s20, s3
  405af2:	eeb0 8a42 	vmov.f32	s16, s4
  405af6:	4604      	mov	r4, r0
  405af8:	eef0 aa62 	vmov.f32	s21, s5
	inX = inX - cenX;
	inZ = inZ - cenZ;
  405afc:	ee30 9ae1 	vsub.f32	s18, s1, s3
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405b00:	ee70 7a41 	vsub.f32	s15, s0, s2
  405b04:	ee17 0a90 	vmov	r0, s15
  405b08:	4b80      	ldr	r3, [pc, #512]	; (405d0c <calcRotation+0x22c>)
  405b0a:	4798      	blx	r3
  405b0c:	e9cd 0100 	strd	r0, r1, [sp]
  405b10:	2c01      	cmp	r4, #1
  405b12:	f040 809e 	bne.w	405c52 <calcRotation+0x172>
  405b16:	eef1 7a48 	vneg.f32	s15, s16
  405b1a:	ee17 aa90 	vmov	sl, s15
  405b1e:	4f7b      	ldr	r7, [pc, #492]	; (405d0c <calcRotation+0x22c>)
  405b20:	ee17 0a90 	vmov	r0, s15
  405b24:	47b8      	blx	r7
  405b26:	ec41 0b18 	vmov	d8, r0, r1
  405b2a:	ec41 0b10 	vmov	d0, r0, r1
  405b2e:	4d78      	ldr	r5, [pc, #480]	; (405d10 <calcRotation+0x230>)
  405b30:	47a8      	blx	r5
  405b32:	eeb0 ca40 	vmov.f32	s24, s0
  405b36:	eef0 ca60 	vmov.f32	s25, s1
  405b3a:	ee19 0a10 	vmov	r0, s18
  405b3e:	47b8      	blx	r7
  405b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405b44:	eeb0 0a48 	vmov.f32	s0, s16
  405b48:	eef0 0a68 	vmov.f32	s1, s17
  405b4c:	4e71      	ldr	r6, [pc, #452]	; (405d14 <calcRotation+0x234>)
  405b4e:	47b0      	blx	r6
  405b50:	eeb0 ba40 	vmov.f32	s22, s0
  405b54:	eef0 ba60 	vmov.f32	s23, s1
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  405b58:	4650      	mov	r0, sl
  405b5a:	47b8      	blx	r7
  405b5c:	ec41 0b18 	vmov	d8, r0, r1
  405b60:	ec41 0b10 	vmov	d0, r0, r1
  405b64:	47b0      	blx	r6
  405b66:	ec59 8b10 	vmov	r8, r9, d0
  405b6a:	eeb0 0a48 	vmov.f32	s0, s16
  405b6e:	eef0 0a68 	vmov.f32	s1, s17
  405b72:	47a8      	blx	r5
  405b74:	ec5b ab10 	vmov	sl, fp, d0
  405b78:	4d67      	ldr	r5, [pc, #412]	; (405d18 <calcRotation+0x238>)
  405b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
  405b7e:	4642      	mov	r2, r8
  405b80:	464b      	mov	r3, r9
  405b82:	47a8      	blx	r5
  405b84:	4680      	mov	r8, r0
  405b86:	4689      	mov	r9, r1
  405b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b8c:	4652      	mov	r2, sl
  405b8e:	465b      	mov	r3, fp
  405b90:	47a8      	blx	r5
  405b92:	4602      	mov	r2, r0
  405b94:	460b      	mov	r3, r1
  405b96:	4640      	mov	r0, r8
  405b98:	4649      	mov	r1, r9
  405b9a:	4e60      	ldr	r6, [pc, #384]	; (405d1c <calcRotation+0x23c>)
  405b9c:	47b0      	blx	r6
  405b9e:	4e60      	ldr	r6, [pc, #384]	; (405d20 <calcRotation+0x240>)
  405ba0:	47b0      	blx	r6
  405ba2:	ee08 0a10 	vmov	s16, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
  405baa:	ec53 2b1c 	vmov	r2, r3, d12
  405bae:	47a8      	blx	r5
  405bb0:	4680      	mov	r8, r0
  405bb2:	4689      	mov	r9, r1
  405bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bb8:	ec53 2b1b 	vmov	r2, r3, d11
  405bbc:	47a8      	blx	r5
  405bbe:	4602      	mov	r2, r0
  405bc0:	460b      	mov	r3, r1
  405bc2:	4640      	mov	r0, r8
  405bc4:	4649      	mov	r1, r9
  405bc6:	4d57      	ldr	r5, [pc, #348]	; (405d24 <calcRotation+0x244>)
  405bc8:	47a8      	blx	r5
  405bca:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  405bcc:	ee07 0a90 	vmov	s15, r0
  405bd0:	ee39 0aa7 	vadd.f32	s0, s19, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405bd4:	2c01      	cmp	r4, #1
  405bd6:	bf14      	ite	ne
  405bd8:	2400      	movne	r4, #0
  405bda:	2401      	moveq	r4, #1
  405bdc:	b3a4      	cbz	r4, 405c48 <calcRotation+0x168>
  405bde:	eef5 aa40 	vcmp.f32	s21, #0.0
  405be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405be6:	d118      	bne.n	405c1a <calcRotation+0x13a>
  405be8:	e02e      	b.n	405c48 <calcRotation+0x168>
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  405bea:	eefd 7aea 	vcvt.s32.f32	s15, s21
  405bee:	ee17 3a90 	vmov	r3, s15
  405bf2:	2b00      	cmp	r3, #0
  405bf4:	bfb8      	it	lt
  405bf6:	425b      	neglt	r3, r3
  405bf8:	f1c3 0301 	rsb	r3, r3, #1
  405bfc:	ee07 3a90 	vmov	s15, r3
  405c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405c04:	ee28 8a27 	vmul.f32	s16, s16, s15
  405c08:	ee39 9a0a 	vadd.f32	s18, s18, s20
  405c0c:	ee69 aa2a 	vmul.f32	s21, s18, s21
  405c10:	ee38 8a2a 	vadd.f32	s16, s16, s21
  405c14:	ee38 8a0a 	vadd.f32	s16, s16, s20
  405c18:	e06b      	b.n	405cf2 <calcRotation+0x212>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405c1a:	eefd 7aea 	vcvt.s32.f32	s15, s21
  405c1e:	ee17 3a90 	vmov	r3, s15
  405c22:	2b00      	cmp	r3, #0
  405c24:	bfb8      	it	lt
  405c26:	425b      	neglt	r3, r3
  405c28:	f1c3 0301 	rsb	r3, r3, #1
  405c2c:	ee07 3a90 	vmov	s15, r3
  405c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405c34:	ee27 8a88 	vmul.f32	s16, s15, s16
  405c38:	ee39 9a0a 	vadd.f32	s18, s18, s20
  405c3c:	ee69 aa2a 	vmul.f32	s21, s18, s21
  405c40:	ee38 8a6a 	vsub.f32	s16, s16, s21
  405c44:	ee38 8a0a 	vadd.f32	s16, s16, s20
	if(opside == 1) out.Z = -out.Z;
  405c48:	2c00      	cmp	r4, #0
  405c4a:	d057      	beq.n	405cfc <calcRotation+0x21c>
  405c4c:	eeb1 8a48 	vneg.f32	s16, s16
  405c50:	e054      	b.n	405cfc <calcRotation+0x21c>
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405c52:	4d2e      	ldr	r5, [pc, #184]	; (405d0c <calcRotation+0x22c>)
  405c54:	ee18 0a10 	vmov	r0, s16
  405c58:	47a8      	blx	r5
  405c5a:	ec41 0b18 	vmov	d8, r0, r1
  405c5e:	ec41 0b10 	vmov	d0, r0, r1
  405c62:	4b2b      	ldr	r3, [pc, #172]	; (405d10 <calcRotation+0x230>)
  405c64:	4798      	blx	r3
  405c66:	ec57 6b10 	vmov	r6, r7, d0
  405c6a:	ee19 0a10 	vmov	r0, s18
  405c6e:	47a8      	blx	r5
  405c70:	4682      	mov	sl, r0
  405c72:	468b      	mov	fp, r1
  405c74:	eeb0 0a48 	vmov.f32	s0, s16
  405c78:	eef0 0a68 	vmov.f32	s1, s17
  405c7c:	4b25      	ldr	r3, [pc, #148]	; (405d14 <calcRotation+0x234>)
  405c7e:	4798      	blx	r3
  405c80:	ec53 2b10 	vmov	r2, r3, d0
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  405c84:	4d24      	ldr	r5, [pc, #144]	; (405d18 <calcRotation+0x238>)
  405c86:	e9dd 0100 	ldrd	r0, r1, [sp]
  405c8a:	ed8d 0b02 	vstr	d0, [sp, #8]
  405c8e:	47a8      	blx	r5
  405c90:	4680      	mov	r8, r0
  405c92:	4689      	mov	r9, r1
  405c94:	e9cd 6704 	strd	r6, r7, [sp, #16]
  405c98:	4630      	mov	r0, r6
  405c9a:	4639      	mov	r1, r7
  405c9c:	4652      	mov	r2, sl
  405c9e:	465b      	mov	r3, fp
  405ca0:	47a8      	blx	r5
  405ca2:	4602      	mov	r2, r0
  405ca4:	460b      	mov	r3, r1
  405ca6:	4640      	mov	r0, r8
  405ca8:	4649      	mov	r1, r9
  405caa:	4e1c      	ldr	r6, [pc, #112]	; (405d1c <calcRotation+0x23c>)
  405cac:	47b0      	blx	r6
  405cae:	4e1c      	ldr	r6, [pc, #112]	; (405d20 <calcRotation+0x240>)
  405cb0:	47b0      	blx	r6
  405cb2:	ee08 0a10 	vmov	s16, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405cb6:	e9dd 0100 	ldrd	r0, r1, [sp]
  405cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  405cbe:	47a8      	blx	r5
  405cc0:	4680      	mov	r8, r0
  405cc2:	4689      	mov	r9, r1
  405cc4:	4650      	mov	r0, sl
  405cc6:	4659      	mov	r1, fp
  405cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405ccc:	47a8      	blx	r5
  405cce:	4602      	mov	r2, r0
  405cd0:	460b      	mov	r3, r1
  405cd2:	4640      	mov	r0, r8
  405cd4:	4649      	mov	r1, r9
  405cd6:	4d13      	ldr	r5, [pc, #76]	; (405d24 <calcRotation+0x244>)
  405cd8:	47a8      	blx	r5
  405cda:	47b0      	blx	r6
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  405cdc:	ee07 0a90 	vmov	s15, r0
  405ce0:	ee39 0aa7 	vadd.f32	s0, s19, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  405ce4:	b92c      	cbnz	r4, 405cf2 <calcRotation+0x212>
  405ce6:	eef5 aa40 	vcmp.f32	s21, #0.0
  405cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405cee:	f47f af7c 	bne.w	405bea <calcRotation+0x10a>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405cf2:	2c01      	cmp	r4, #1
  405cf4:	bf14      	ite	ne
  405cf6:	2400      	movne	r4, #0
  405cf8:	2401      	moveq	r4, #1
  405cfa:	e7a5      	b.n	405c48 <calcRotation+0x168>
	if(opside == 1) out.Z = -out.Z;
	return out;
}
  405cfc:	eef0 0a48 	vmov.f32	s1, s16
  405d00:	b00b      	add	sp, #44	; 0x2c
  405d02:	ecbd 8b0a 	vpop	{d8-d12}
  405d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d0a:	bf00      	nop
  405d0c:	0040aabd 	.word	0x0040aabd
  405d10:	00407d19 	.word	0x00407d19
  405d14:	00407dc1 	.word	0x00407dc1
  405d18:	0040ab65 	.word	0x0040ab65
  405d1c:	0040a801 	.word	0x0040a801
  405d20:	0040b0e9 	.word	0x0040b0e9
  405d24:	0040a7fd 	.word	0x0040a7fd

00405d28 <legAngCalc>:
int sign(float in) {
	if(in<0) return -1;
	else return 1;
}

angles legAngCalc(float x, float y, float z) {
  405d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d2c:	ed2d 8b06 	vpush	{d8-d10}
  405d30:	b089      	sub	sp, #36	; 0x24
  405d32:	eeb0 9a40 	vmov.f32	s18, s0
  405d36:	eeb0 aa60 	vmov.f32	s20, s1
  405d3a:	eef0 8a41 	vmov.f32	s17, s2
	
	*/
	
	//Begin old code
	
	float G = sqrt(x*x + z*z) - C;
  405d3e:	ee60 7a00 	vmul.f32	s15, s0, s0
  405d42:	ee21 8a01 	vmul.f32	s16, s2, s2
  405d46:	ee37 8a88 	vadd.f32	s16, s15, s16
  405d4a:	4f71      	ldr	r7, [pc, #452]	; (405f10 <legAngCalc+0x1e8>)
  405d4c:	ee18 0a10 	vmov	r0, s16
  405d50:	47b8      	blx	r7
  405d52:	ec41 0b10 	vmov	d0, r0, r1
  405d56:	4e6f      	ldr	r6, [pc, #444]	; (405f14 <legAngCalc+0x1ec>)
  405d58:	47b0      	blx	r6
  405d5a:	4d6f      	ldr	r5, [pc, #444]	; (405f18 <legAngCalc+0x1f0>)
  405d5c:	ec51 0b10 	vmov	r0, r1, d0
  405d60:	2200      	movs	r2, #0
  405d62:	4b6e      	ldr	r3, [pc, #440]	; (405f1c <legAngCalc+0x1f4>)
  405d64:	47a8      	blx	r5
  405d66:	4c6e      	ldr	r4, [pc, #440]	; (405f20 <legAngCalc+0x1f8>)
  405d68:	47a0      	blx	r4
  405d6a:	ee09 0a90 	vmov	s19, r0
	float H = sqrt(y*y+G*G);
  405d6e:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  405d72:	ee29 8aa9 	vmul.f32	s16, s19, s19
  405d76:	ee37 8a88 	vadd.f32	s16, s15, s16
  405d7a:	ee18 0a10 	vmov	r0, s16
  405d7e:	47b8      	blx	r7
  405d80:	ec41 0b10 	vmov	d0, r0, r1
  405d84:	47b0      	blx	r6
  405d86:	ec51 0b10 	vmov	r0, r1, d0
  405d8a:	47a0      	blx	r4
	float b = acos((A*A + H*H - B*B)/(2*A*H));
  405d8c:	ee07 0a90 	vmov	s15, r0
  405d90:	ee27 8aa7 	vmul.f32	s16, s15, s15
  405d94:	47b8      	blx	r7
  405d96:	4682      	mov	sl, r0
  405d98:	468b      	mov	fp, r1
  405d9a:	ee18 0a10 	vmov	r0, s16
  405d9e:	47b8      	blx	r7
  405da0:	a355      	add	r3, pc, #340	; (adr r3, 405ef8 <legAngCalc+0x1d0>)
  405da2:	e9d3 2300 	ldrd	r2, r3, [r3]
  405da6:	4e5f      	ldr	r6, [pc, #380]	; (405f24 <legAngCalc+0x1fc>)
  405da8:	47b0      	blx	r6
  405daa:	a355      	add	r3, pc, #340	; (adr r3, 405f00 <legAngCalc+0x1d8>)
  405dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  405db0:	47a8      	blx	r5
  405db2:	4680      	mov	r8, r0
  405db4:	4689      	mov	r9, r1
  405db6:	4e5c      	ldr	r6, [pc, #368]	; (405f28 <legAngCalc+0x200>)
  405db8:	4650      	mov	r0, sl
  405dba:	4659      	mov	r1, fp
  405dbc:	2200      	movs	r2, #0
  405dbe:	4b5b      	ldr	r3, [pc, #364]	; (405f2c <legAngCalc+0x204>)
  405dc0:	47b0      	blx	r6
  405dc2:	4602      	mov	r2, r0
  405dc4:	460b      	mov	r3, r1
  405dc6:	4d5a      	ldr	r5, [pc, #360]	; (405f30 <legAngCalc+0x208>)
  405dc8:	4640      	mov	r0, r8
  405dca:	4649      	mov	r1, r9
  405dcc:	47a8      	blx	r5
  405dce:	ec41 0b10 	vmov	d0, r0, r1
  405dd2:	4b58      	ldr	r3, [pc, #352]	; (405f34 <legAngCalc+0x20c>)
  405dd4:	4798      	blx	r3
  405dd6:	ec51 0b10 	vmov	r0, r1, d0
  405dda:	47a0      	blx	r4
	
	float h = asin(H*(sin(b))/B);
  405ddc:	47b8      	blx	r7
  405dde:	4680      	mov	r8, r0
  405de0:	4689      	mov	r9, r1
  405de2:	ec49 8b10 	vmov	d0, r8, r9
  405de6:	4b54      	ldr	r3, [pc, #336]	; (405f38 <legAngCalc+0x210>)
  405de8:	4798      	blx	r3
  405dea:	4650      	mov	r0, sl
  405dec:	4659      	mov	r1, fp
  405dee:	ec53 2b10 	vmov	r2, r3, d0
  405df2:	47b0      	blx	r6
  405df4:	2200      	movs	r2, #0
  405df6:	4b51      	ldr	r3, [pc, #324]	; (405f3c <legAngCalc+0x214>)
  405df8:	47a8      	blx	r5
  405dfa:	ec41 0b10 	vmov	d0, r0, r1
  405dfe:	4b50      	ldr	r3, [pc, #320]	; (405f40 <legAngCalc+0x218>)
  405e00:	4798      	blx	r3
  405e02:	ec51 0b10 	vmov	r0, r1, d0
  405e06:	47a0      	blx	r4
  405e08:	4682      	mov	sl, r0
	
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
  405e0a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 405f44 <legAngCalc+0x21c>
  405e0e:	eeb4 8ae7 	vcmpe.f32	s16, s15
  405e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405e16:	da0a      	bge.n	405e2e <legAngCalc+0x106>
	else Ang.S3 = (M_PI)-h;
  405e18:	47b8      	blx	r7
  405e1a:	4602      	mov	r2, r0
  405e1c:	460b      	mov	r3, r1
  405e1e:	a13a      	add	r1, pc, #232	; (adr r1, 405f08 <legAngCalc+0x1e0>)
  405e20:	e9d1 0100 	ldrd	r0, r1, [r1]
  405e24:	4c3c      	ldr	r4, [pc, #240]	; (405f18 <legAngCalc+0x1f0>)
  405e26:	47a0      	blx	r4
  405e28:	4b3d      	ldr	r3, [pc, #244]	; (405f20 <legAngCalc+0x1f8>)
  405e2a:	4798      	blx	r3
  405e2c:	4682      	mov	sl, r0
	Ang.S2 = (atan2(y,G))+b;
  405e2e:	4c38      	ldr	r4, [pc, #224]	; (405f10 <legAngCalc+0x1e8>)
  405e30:	ee1a 0a10 	vmov	r0, s20
  405e34:	47a0      	blx	r4
  405e36:	4606      	mov	r6, r0
  405e38:	460f      	mov	r7, r1
  405e3a:	ee19 0a90 	vmov	r0, s19
  405e3e:	47a0      	blx	r4
  405e40:	ec47 6b10 	vmov	d0, r6, r7
  405e44:	ec41 0b11 	vmov	d1, r0, r1
  405e48:	4d3f      	ldr	r5, [pc, #252]	; (405f48 <legAngCalc+0x220>)
  405e4a:	47a8      	blx	r5
  405e4c:	eeb0 aa40 	vmov.f32	s20, s0
  405e50:	eef0 aa60 	vmov.f32	s21, s1
	Ang.S1 = atan2(x,z);
  405e54:	ee19 0a10 	vmov	r0, s18
  405e58:	47a0      	blx	r4
  405e5a:	4606      	mov	r6, r0
  405e5c:	460f      	mov	r7, r1
  405e5e:	ee18 0a90 	vmov	r0, s17
  405e62:	47a0      	blx	r4
  405e64:	ec47 6b10 	vmov	d0, r6, r7
  405e68:	ec41 0b11 	vmov	d1, r0, r1
  405e6c:	47a8      	blx	r5
  405e6e:	4d2c      	ldr	r5, [pc, #176]	; (405f20 <legAngCalc+0x1f8>)
  405e70:	ec51 0b10 	vmov	r0, r1, d0
  405e74:	47a8      	blx	r5
	
	Ang.S1 = Ang.S1*180.00/M_PI;
  405e76:	47a0      	blx	r4
  405e78:	4f2b      	ldr	r7, [pc, #172]	; (405f28 <legAngCalc+0x200>)
  405e7a:	2200      	movs	r2, #0
  405e7c:	4b33      	ldr	r3, [pc, #204]	; (405f4c <legAngCalc+0x224>)
  405e7e:	47b8      	blx	r7
  405e80:	4e2b      	ldr	r6, [pc, #172]	; (405f30 <legAngCalc+0x208>)
  405e82:	a321      	add	r3, pc, #132	; (adr r3, 405f08 <legAngCalc+0x1e0>)
  405e84:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e88:	47b0      	blx	r6
  405e8a:	47a8      	blx	r5
  405e8c:	4683      	mov	fp, r0
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
	else Ang.S3 = (M_PI)-h;
	Ang.S2 = (atan2(y,G))+b;
  405e8e:	4640      	mov	r0, r8
  405e90:	4649      	mov	r1, r9
  405e92:	ec53 2b1a 	vmov	r2, r3, d10
  405e96:	f8df c08c 	ldr.w	ip, [pc, #140]	; 405f24 <legAngCalc+0x1fc>
  405e9a:	47e0      	blx	ip
  405e9c:	47a8      	blx	r5
	Ang.S1 = atan2(x,z);
	
	Ang.S1 = Ang.S1*180.00/M_PI;
	Ang.S2 = 90 - Ang.S2*180.00/M_PI;
  405e9e:	47a0      	blx	r4
  405ea0:	2200      	movs	r2, #0
  405ea2:	4b2a      	ldr	r3, [pc, #168]	; (405f4c <legAngCalc+0x224>)
  405ea4:	47b8      	blx	r7
  405ea6:	a318      	add	r3, pc, #96	; (adr r3, 405f08 <legAngCalc+0x1e0>)
  405ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
  405eac:	47b0      	blx	r6
  405eae:	4602      	mov	r2, r0
  405eb0:	460b      	mov	r3, r1
  405eb2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 405f18 <legAngCalc+0x1f0>
  405eb6:	2000      	movs	r0, #0
  405eb8:	4925      	ldr	r1, [pc, #148]	; (405f50 <legAngCalc+0x228>)
  405eba:	47c0      	blx	r8
  405ebc:	47a8      	blx	r5
  405ebe:	4681      	mov	r9, r0
	Ang.S3 = 180 - Ang.S3*180.00/M_PI;
  405ec0:	4650      	mov	r0, sl
  405ec2:	47a0      	blx	r4
  405ec4:	2200      	movs	r2, #0
  405ec6:	4b21      	ldr	r3, [pc, #132]	; (405f4c <legAngCalc+0x224>)
  405ec8:	47b8      	blx	r7
  405eca:	a30f      	add	r3, pc, #60	; (adr r3, 405f08 <legAngCalc+0x1e0>)
  405ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ed0:	47b0      	blx	r6
  405ed2:	4602      	mov	r2, r0
  405ed4:	460b      	mov	r3, r1
  405ed6:	2000      	movs	r0, #0
  405ed8:	491c      	ldr	r1, [pc, #112]	; (405f4c <legAngCalc+0x224>)
  405eda:	47c0      	blx	r8
  405edc:	47a8      	blx	r5
	
	
	return Ang;
}
  405ede:	ee00 ba10 	vmov	s0, fp
  405ee2:	ee00 9a90 	vmov	s1, r9
  405ee6:	ee01 0a10 	vmov	s2, r0
  405eea:	b009      	add	sp, #36	; 0x24
  405eec:	ecbd 8b06 	vpop	{d8-d10}
  405ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ef4:	f3af 8000 	nop.w
  405ef8:	00000000 	.word	0x00000000
  405efc:	40cc2000 	.word	0x40cc2000
  405f00:	00000000 	.word	0x00000000
  405f04:	40b08100 	.word	0x40b08100
  405f08:	54442d18 	.word	0x54442d18
  405f0c:	400921fb 	.word	0x400921fb
  405f10:	0040aabd 	.word	0x0040aabd
  405f14:	00408159 	.word	0x00408159
  405f18:	0040a7fd 	.word	0x0040a7fd
  405f1c:	40518000 	.word	0x40518000
  405f20:	0040b0e9 	.word	0x0040b0e9
  405f24:	0040a801 	.word	0x0040a801
  405f28:	0040ab65 	.word	0x0040ab65
  405f2c:	406e0000 	.word	0x406e0000
  405f30:	0040adb9 	.word	0x0040adb9
  405f34:	00407ef5 	.word	0x00407ef5
  405f38:	00407dc1 	.word	0x00407dc1
  405f3c:	40504000 	.word	0x40504000
  405f40:	00407fb9 	.word	0x00407fb9
  405f44:	46918200 	.word	0x46918200
  405f48:	0040807d 	.word	0x0040807d
  405f4c:	40668000 	.word	0x40668000
  405f50:	40568000 	.word	0x40568000

00405f54 <writeLegOut>:

//Leg interface
void writeLegOut(int leg, float S0, float S1, float S2) {
  405f54:	b510      	push	{r4, lr}
  405f56:	ed2d 8b02 	vpush	{d8}
  405f5a:	eef0 8a60 	vmov.f32	s17, s1
  405f5e:	eeb0 8a41 	vmov.f32	s16, s2
	
	switch (leg) {
  405f62:	2805      	cmp	r0, #5
  405f64:	d85d      	bhi.n	406022 <writeLegOut+0xce>
  405f66:	e8df f000 	tbb	[pc, r0]
  405f6a:	1203      	.short	0x1203
  405f6c:	4e3f3021 	.word	0x4e3f3021
		
		case 0:
		WriteServo(L0_S0,S0);
  405f70:	2000      	movs	r0, #0
  405f72:	4601      	mov	r1, r0
  405f74:	4c2c      	ldr	r4, [pc, #176]	; (406028 <writeLegOut+0xd4>)
  405f76:	47a0      	blx	r4
		WriteServo(L0_S1,S1);
  405f78:	2000      	movs	r0, #0
  405f7a:	2101      	movs	r1, #1
  405f7c:	eeb0 0a68 	vmov.f32	s0, s17
  405f80:	47a0      	blx	r4
		WriteServo(L0_S2,S2);
  405f82:	2000      	movs	r0, #0
  405f84:	2102      	movs	r1, #2
  405f86:	eeb0 0a48 	vmov.f32	s0, s16
  405f8a:	47a0      	blx	r4
		break;
  405f8c:	e049      	b.n	406022 <writeLegOut+0xce>
		
		case 1:
		WriteServo(L1_S0,S0);
  405f8e:	2001      	movs	r0, #1
  405f90:	2100      	movs	r1, #0
  405f92:	4c25      	ldr	r4, [pc, #148]	; (406028 <writeLegOut+0xd4>)
  405f94:	47a0      	blx	r4
		WriteServo(L1_S1,S1);
  405f96:	2001      	movs	r0, #1
  405f98:	4601      	mov	r1, r0
  405f9a:	eeb0 0a68 	vmov.f32	s0, s17
  405f9e:	47a0      	blx	r4
		WriteServo(L1_S2,S2);
  405fa0:	2001      	movs	r0, #1
  405fa2:	2102      	movs	r1, #2
  405fa4:	eeb0 0a48 	vmov.f32	s0, s16
  405fa8:	47a0      	blx	r4
		break;
  405faa:	e03a      	b.n	406022 <writeLegOut+0xce>

		case 2:
		WriteServo(L2_S0,S0);
  405fac:	2002      	movs	r0, #2
  405fae:	2100      	movs	r1, #0
  405fb0:	4c1d      	ldr	r4, [pc, #116]	; (406028 <writeLegOut+0xd4>)
  405fb2:	47a0      	blx	r4
		WriteServo(L2_S1,S1);
  405fb4:	2002      	movs	r0, #2
  405fb6:	2101      	movs	r1, #1
  405fb8:	eeb0 0a68 	vmov.f32	s0, s17
  405fbc:	47a0      	blx	r4
		WriteServo(L2_S2,S2);
  405fbe:	2002      	movs	r0, #2
  405fc0:	4601      	mov	r1, r0
  405fc2:	eeb0 0a48 	vmov.f32	s0, s16
  405fc6:	47a0      	blx	r4
		break;
  405fc8:	e02b      	b.n	406022 <writeLegOut+0xce>

		case 3:
		WriteServo(L3_S0,S0);
  405fca:	2003      	movs	r0, #3
  405fcc:	2100      	movs	r1, #0
  405fce:	4c16      	ldr	r4, [pc, #88]	; (406028 <writeLegOut+0xd4>)
  405fd0:	47a0      	blx	r4
		WriteServo(L3_S1,S1);
  405fd2:	2003      	movs	r0, #3
  405fd4:	2101      	movs	r1, #1
  405fd6:	eeb0 0a68 	vmov.f32	s0, s17
  405fda:	47a0      	blx	r4
		WriteServo(L3_S2,S2);
  405fdc:	2003      	movs	r0, #3
  405fde:	2102      	movs	r1, #2
  405fe0:	eeb0 0a48 	vmov.f32	s0, s16
  405fe4:	47a0      	blx	r4
		break;
  405fe6:	e01c      	b.n	406022 <writeLegOut+0xce>

		case 4:
		WriteServo(L4_S0,S0);
  405fe8:	2004      	movs	r0, #4
  405fea:	2100      	movs	r1, #0
  405fec:	4c0e      	ldr	r4, [pc, #56]	; (406028 <writeLegOut+0xd4>)
  405fee:	47a0      	blx	r4
		WriteServo(L4_S1,S1);
  405ff0:	2004      	movs	r0, #4
  405ff2:	2101      	movs	r1, #1
  405ff4:	eeb0 0a68 	vmov.f32	s0, s17
  405ff8:	47a0      	blx	r4
		WriteServo(L4_S2,S2);
  405ffa:	2004      	movs	r0, #4
  405ffc:	2102      	movs	r1, #2
  405ffe:	eeb0 0a48 	vmov.f32	s0, s16
  406002:	47a0      	blx	r4
		break;
  406004:	e00d      	b.n	406022 <writeLegOut+0xce>

		case 5:
		WriteServo(L5_S0,S0);
  406006:	2005      	movs	r0, #5
  406008:	2100      	movs	r1, #0
  40600a:	4c07      	ldr	r4, [pc, #28]	; (406028 <writeLegOut+0xd4>)
  40600c:	47a0      	blx	r4
		WriteServo(L5_S1,S1);
  40600e:	2005      	movs	r0, #5
  406010:	2101      	movs	r1, #1
  406012:	eeb0 0a68 	vmov.f32	s0, s17
  406016:	47a0      	blx	r4
		WriteServo(L5_S2,S2);
  406018:	2005      	movs	r0, #5
  40601a:	2102      	movs	r1, #2
  40601c:	eeb0 0a48 	vmov.f32	s0, s16
  406020:	47a0      	blx	r4
		break;
		
		
	}

}
  406022:	ecbd 8b02 	vpop	{d8}
  406026:	bd10      	pop	{r4, pc}
  406028:	004053b1 	.word	0x004053b1
  40602c:	00000000 	.word	0x00000000

00406030 <getS0cal>:

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
  406030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406034:	ed2d 8b02 	vpush	{d8}
  406038:	4680      	mov	r8, r0
  40603a:	468a      	mov	sl, r1
  40603c:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  40603e:	2006      	movs	r0, #6
  406040:	2100      	movs	r1, #0
  406042:	225a      	movs	r2, #90	; 0x5a
  406044:	4c52      	ldr	r4, [pc, #328]	; (406190 <getS0cal+0x160>)
  406046:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406048:	2006      	movs	r0, #6
  40604a:	2101      	movs	r1, #1
  40604c:	2200      	movs	r2, #0
  40604e:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406050:	2006      	movs	r0, #6
  406052:	2102      	movs	r1, #2
  406054:	225a      	movs	r2, #90	; 0x5a
  406056:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  406058:	484e      	ldr	r0, [pc, #312]	; (406194 <getS0cal+0x164>)
  40605a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40605e:	f44f 7200 	mov.w	r2, #512	; 0x200
  406062:	4b4d      	ldr	r3, [pc, #308]	; (406198 <getS0cal+0x168>)
  406064:	4798      	blx	r3
}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  406066:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 40619c <getS0cal+0x16c>

}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  40606a:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40606c:	4d49      	ldr	r5, [pc, #292]	; (406194 <getS0cal+0x164>)
  40606e:	4c4a      	ldr	r4, [pc, #296]	; (406198 <getS0cal+0x168>)
  406070:	4f4b      	ldr	r7, [pc, #300]	; (4061a0 <getS0cal+0x170>)
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  406072:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  406076:	f8df 9144 	ldr.w	r9, [pc, #324]	; 4061bc <getS0cal+0x18c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40607a:	4628      	mov	r0, r5
  40607c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406080:	f44f 7200 	mov.w	r2, #512	; 0x200
  406084:	47a0      	blx	r4
  406086:	b958      	cbnz	r0, 4060a0 <getS0cal+0x70>
  406088:	683b      	ldr	r3, [r7, #0]
  40608a:	b94b      	cbnz	r3, 4060a0 <getS0cal+0x70>
			if(calState == 0){
  40608c:	b91e      	cbnz	r6, 406096 <getS0cal+0x66>
				*angOff = 90 - ang;
  40608e:	ee38 8ac8 	vsub.f32	s16, s17, s16
  406092:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  406096:	3601      	adds	r6, #1
			ang = 90;
			But_Up = 1;
  406098:	2301      	movs	r3, #1
  40609a:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  40609c:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  4060a0:	4628      	mov	r0, r5
  4060a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060a6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4060aa:	47a0      	blx	r4
  4060ac:	b108      	cbz	r0, 4060b2 <getS0cal+0x82>
  4060ae:	2300      	movs	r3, #0
  4060b0:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  4060b2:	4628      	mov	r0, r5
  4060b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4060bc:	47a0      	blx	r4
  4060be:	b968      	cbnz	r0, 4060dc <getS0cal+0xac>
			ang += 0.01;
  4060c0:	ee18 0a10 	vmov	r0, s16
  4060c4:	4b37      	ldr	r3, [pc, #220]	; (4061a4 <getS0cal+0x174>)
  4060c6:	4798      	blx	r3
  4060c8:	a32f      	add	r3, pc, #188	; (adr r3, 406188 <getS0cal+0x158>)
  4060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060ce:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 4061c0 <getS0cal+0x190>
  4060d2:	47e0      	blx	ip
  4060d4:	4b34      	ldr	r3, [pc, #208]	; (4061a8 <getS0cal+0x178>)
  4060d6:	4798      	blx	r3
  4060d8:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  4060dc:	4628      	mov	r0, r5
  4060de:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4060e6:	47a0      	blx	r4
  4060e8:	b968      	cbnz	r0, 406106 <getS0cal+0xd6>
			ang -= 0.01;
  4060ea:	ee18 0a10 	vmov	r0, s16
  4060ee:	4b2d      	ldr	r3, [pc, #180]	; (4061a4 <getS0cal+0x174>)
  4060f0:	4798      	blx	r3
  4060f2:	a325      	add	r3, pc, #148	; (adr r3, 406188 <getS0cal+0x158>)
  4060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060f8:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 4061c4 <getS0cal+0x194>
  4060fc:	47e0      	blx	ip
  4060fe:	4b2a      	ldr	r3, [pc, #168]	; (4061a8 <getS0cal+0x178>)
  406100:	4798      	blx	r3
  406102:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  406106:	2e01      	cmp	r6, #1
  406108:	d105      	bne.n	406116 <getS0cal+0xe6>
  40610a:	4648      	mov	r0, r9
  40610c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406110:	4b26      	ldr	r3, [pc, #152]	; (4061ac <getS0cal+0x17c>)
  406112:	4798      	blx	r3
  406114:	e004      	b.n	406120 <getS0cal+0xf0>
		else pio_clear(LED3);
  406116:	4648      	mov	r0, r9
  406118:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40611c:	4b24      	ldr	r3, [pc, #144]	; (4061b0 <getS0cal+0x180>)
  40611e:	4798      	blx	r3
		
		WriteServo(Leg,0,ang);
  406120:	4640      	mov	r0, r8
  406122:	2100      	movs	r1, #0
  406124:	eeb0 0a48 	vmov.f32	s0, s16
  406128:	4b22      	ldr	r3, [pc, #136]	; (4061b4 <getS0cal+0x184>)
  40612a:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  40612c:	4628      	mov	r0, r5
  40612e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406132:	f44f 7200 	mov.w	r2, #512	; 0x200
  406136:	47a0      	blx	r4
  406138:	2e00      	cmp	r6, #0
  40613a:	dd9e      	ble.n	40607a <getS0cal+0x4a>
  40613c:	2800      	cmp	r0, #0
  40613e:	d19c      	bne.n	40607a <getS0cal+0x4a>
  406140:	683b      	ldr	r3, [r7, #0]
  406142:	2b00      	cmp	r3, #0
  406144:	d199      	bne.n	40607a <getS0cal+0x4a>
		else pio_clear(LED3);
		
		WriteServo(Leg,0,ang);
		
	}
	But_Up = 1;
  406146:	2501      	movs	r5, #1
  406148:	4b15      	ldr	r3, [pc, #84]	; (4061a0 <getS0cal+0x170>)
  40614a:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  40614c:	edda 7a00 	vldr	s15, [sl]
  406150:	ee38 8a27 	vadd.f32	s16, s16, s15
  406154:	eddf 7a18 	vldr	s15, [pc, #96]	; 4061b8 <getS0cal+0x188>
  406158:	ee88 8a27 	vdiv.f32	s16, s16, s15
  40615c:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  406160:	2006      	movs	r0, #6
  406162:	2100      	movs	r1, #0
  406164:	225a      	movs	r2, #90	; 0x5a
  406166:	4c0a      	ldr	r4, [pc, #40]	; (406190 <getS0cal+0x160>)
  406168:	47a0      	blx	r4
	cmdServoMan(6,1,90.00);
  40616a:	2006      	movs	r0, #6
  40616c:	4629      	mov	r1, r5
  40616e:	225a      	movs	r2, #90	; 0x5a
  406170:	47a0      	blx	r4
	cmdServoMan(6,2,180.00);
  406172:	2006      	movs	r0, #6
  406174:	2102      	movs	r1, #2
  406176:	22b4      	movs	r2, #180	; 0xb4
  406178:	47a0      	blx	r4
}
  40617a:	ecbd 8b02 	vpop	{d8}
  40617e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406182:	bf00      	nop
  406184:	f3af 8000 	nop.w
  406188:	47ae147b 	.word	0x47ae147b
  40618c:	3f847ae1 	.word	0x3f847ae1
  406190:	00406ad9 	.word	0x00406ad9
  406194:	400e1200 	.word	0x400e1200
  406198:	004027c5 	.word	0x004027c5
  40619c:	42b40000 	.word	0x42b40000
  4061a0:	2040c4c4 	.word	0x2040c4c4
  4061a4:	0040aabd 	.word	0x0040aabd
  4061a8:	0040b0e9 	.word	0x0040b0e9
  4061ac:	004027bd 	.word	0x004027bd
  4061b0:	004027c1 	.word	0x004027c1
  4061b4:	004053b1 	.word	0x004053b1
  4061b8:	42340000 	.word	0x42340000
  4061bc:	400e0e00 	.word	0x400e0e00
  4061c0:	0040a801 	.word	0x0040a801
  4061c4:	0040a7fd 	.word	0x0040a7fd

004061c8 <getS1cal>:


void getS1cal(int Leg, float* angOff, float* Lin) {
  4061c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061cc:	ed2d 8b02 	vpush	{d8}
  4061d0:	4680      	mov	r8, r0
  4061d2:	468a      	mov	sl, r1
  4061d4:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 0;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  4061d6:	2006      	movs	r0, #6
  4061d8:	2100      	movs	r1, #0
  4061da:	225a      	movs	r2, #90	; 0x5a
  4061dc:	4c52      	ldr	r4, [pc, #328]	; (406328 <getS1cal+0x160>)
  4061de:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  4061e0:	2006      	movs	r0, #6
  4061e2:	2101      	movs	r1, #1
  4061e4:	2200      	movs	r2, #0
  4061e6:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  4061e8:	2006      	movs	r0, #6
  4061ea:	2102      	movs	r1, #2
  4061ec:	225a      	movs	r2, #90	; 0x5a
  4061ee:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  4061f0:	484e      	ldr	r0, [pc, #312]	; (40632c <getS1cal+0x164>)
  4061f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4061f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4061fa:	4b4d      	ldr	r3, [pc, #308]	; (406330 <getS1cal+0x168>)
  4061fc:	4798      	blx	r3
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 0;
  4061fe:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 406334 <getS1cal+0x16c>
	cmdServoMan(6,2,180.00);
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  406202:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  406204:	4d49      	ldr	r5, [pc, #292]	; (40632c <getS1cal+0x164>)
  406206:	4c4a      	ldr	r4, [pc, #296]	; (406330 <getS1cal+0x168>)
  406208:	4f4b      	ldr	r7, [pc, #300]	; (406338 <getS1cal+0x170>)
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  40620a:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  40620e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 406354 <getS1cal+0x18c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  406212:	4628      	mov	r0, r5
  406214:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406218:	f44f 7200 	mov.w	r2, #512	; 0x200
  40621c:	47a0      	blx	r4
  40621e:	b958      	cbnz	r0, 406238 <getS1cal+0x70>
  406220:	683b      	ldr	r3, [r7, #0]
  406222:	b94b      	cbnz	r3, 406238 <getS1cal+0x70>
			if(calState == 0){
  406224:	b91e      	cbnz	r6, 40622e <getS1cal+0x66>
				*angOff = 0 - ang;
  406226:	ee38 8ac8 	vsub.f32	s16, s17, s16
  40622a:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  40622e:	3601      	adds	r6, #1
			ang = 0;
			But_Up = 1;
  406230:	2301      	movs	r3, #1
  406232:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  406234:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  406238:	4628      	mov	r0, r5
  40623a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40623e:	f44f 7200 	mov.w	r2, #512	; 0x200
  406242:	47a0      	blx	r4
  406244:	b108      	cbz	r0, 40624a <getS1cal+0x82>
  406246:	2300      	movs	r3, #0
  406248:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  40624a:	4628      	mov	r0, r5
  40624c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406250:	f44f 6280 	mov.w	r2, #1024	; 0x400
  406254:	47a0      	blx	r4
  406256:	b968      	cbnz	r0, 406274 <getS1cal+0xac>
			ang += 0.01;
  406258:	ee18 0a10 	vmov	r0, s16
  40625c:	4b37      	ldr	r3, [pc, #220]	; (40633c <getS1cal+0x174>)
  40625e:	4798      	blx	r3
  406260:	a32f      	add	r3, pc, #188	; (adr r3, 406320 <getS1cal+0x158>)
  406262:	e9d3 2300 	ldrd	r2, r3, [r3]
  406266:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 406358 <getS1cal+0x190>
  40626a:	47e0      	blx	ip
  40626c:	4b34      	ldr	r3, [pc, #208]	; (406340 <getS1cal+0x178>)
  40626e:	4798      	blx	r3
  406270:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  406274:	4628      	mov	r0, r5
  406276:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40627a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40627e:	47a0      	blx	r4
  406280:	b968      	cbnz	r0, 40629e <getS1cal+0xd6>
			ang -= 0.01;
  406282:	ee18 0a10 	vmov	r0, s16
  406286:	4b2d      	ldr	r3, [pc, #180]	; (40633c <getS1cal+0x174>)
  406288:	4798      	blx	r3
  40628a:	a325      	add	r3, pc, #148	; (adr r3, 406320 <getS1cal+0x158>)
  40628c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406290:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 40635c <getS1cal+0x194>
  406294:	47e0      	blx	ip
  406296:	4b2a      	ldr	r3, [pc, #168]	; (406340 <getS1cal+0x178>)
  406298:	4798      	blx	r3
  40629a:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  40629e:	2e01      	cmp	r6, #1
  4062a0:	d105      	bne.n	4062ae <getS1cal+0xe6>
  4062a2:	4648      	mov	r0, r9
  4062a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4062a8:	4b26      	ldr	r3, [pc, #152]	; (406344 <getS1cal+0x17c>)
  4062aa:	4798      	blx	r3
  4062ac:	e004      	b.n	4062b8 <getS1cal+0xf0>
		else pio_clear(LED3);
  4062ae:	4648      	mov	r0, r9
  4062b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4062b4:	4b24      	ldr	r3, [pc, #144]	; (406348 <getS1cal+0x180>)
  4062b6:	4798      	blx	r3
		
		WriteServo(Leg,1,ang);
  4062b8:	4640      	mov	r0, r8
  4062ba:	2101      	movs	r1, #1
  4062bc:	eeb0 0a48 	vmov.f32	s0, s16
  4062c0:	4b22      	ldr	r3, [pc, #136]	; (40634c <getS1cal+0x184>)
  4062c2:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  4062c4:	4628      	mov	r0, r5
  4062c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4062ca:	f44f 7200 	mov.w	r2, #512	; 0x200
  4062ce:	47a0      	blx	r4
  4062d0:	2e00      	cmp	r6, #0
  4062d2:	dd9e      	ble.n	406212 <getS1cal+0x4a>
  4062d4:	2800      	cmp	r0, #0
  4062d6:	d19c      	bne.n	406212 <getS1cal+0x4a>
  4062d8:	683b      	ldr	r3, [r7, #0]
  4062da:	2b00      	cmp	r3, #0
  4062dc:	d199      	bne.n	406212 <getS1cal+0x4a>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,1,ang);
	}
	But_Up = 1;
  4062de:	2501      	movs	r5, #1
  4062e0:	4b15      	ldr	r3, [pc, #84]	; (406338 <getS1cal+0x170>)
  4062e2:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  4062e4:	edda 7a00 	vldr	s15, [sl]
  4062e8:	ee38 8a27 	vadd.f32	s16, s16, s15
  4062ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 406350 <getS1cal+0x188>
  4062f0:	ee88 8a27 	vdiv.f32	s16, s16, s15
  4062f4:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  4062f8:	2006      	movs	r0, #6
  4062fa:	2100      	movs	r1, #0
  4062fc:	225a      	movs	r2, #90	; 0x5a
  4062fe:	4c0a      	ldr	r4, [pc, #40]	; (406328 <getS1cal+0x160>)
  406300:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406302:	2006      	movs	r0, #6
  406304:	4629      	mov	r1, r5
  406306:	2200      	movs	r2, #0
  406308:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  40630a:	2006      	movs	r0, #6
  40630c:	2102      	movs	r1, #2
  40630e:	225a      	movs	r2, #90	; 0x5a
  406310:	47a0      	blx	r4
}
  406312:	ecbd 8b02 	vpop	{d8}
  406316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40631a:	bf00      	nop
  40631c:	f3af 8000 	nop.w
  406320:	47ae147b 	.word	0x47ae147b
  406324:	3f847ae1 	.word	0x3f847ae1
  406328:	00406ad9 	.word	0x00406ad9
  40632c:	400e1200 	.word	0x400e1200
  406330:	004027c5 	.word	0x004027c5
  406334:	00000000 	.word	0x00000000
  406338:	2040c4c4 	.word	0x2040c4c4
  40633c:	0040aabd 	.word	0x0040aabd
  406340:	0040b0e9 	.word	0x0040b0e9
  406344:	004027bd 	.word	0x004027bd
  406348:	004027c1 	.word	0x004027c1
  40634c:	004053b1 	.word	0x004053b1
  406350:	42340000 	.word	0x42340000
  406354:	400e0e00 	.word	0x400e0e00
  406358:	0040a801 	.word	0x0040a801
  40635c:	0040a7fd 	.word	0x0040a7fd

00406360 <getS2cal>:

void getS2cal(int Leg, float* angOff, float* Lin) {
  406360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406364:	ed2d 8b02 	vpush	{d8}
  406368:	4680      	mov	r8, r0
  40636a:	468a      	mov	sl, r1
  40636c:	4693      	mov	fp, r2
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  40636e:	2006      	movs	r0, #6
  406370:	2100      	movs	r1, #0
  406372:	225a      	movs	r2, #90	; 0x5a
  406374:	4c52      	ldr	r4, [pc, #328]	; (4064c0 <getS2cal+0x160>)
  406376:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406378:	2006      	movs	r0, #6
  40637a:	2101      	movs	r1, #1
  40637c:	2200      	movs	r2, #0
  40637e:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406380:	2006      	movs	r0, #6
  406382:	2102      	movs	r1, #2
  406384:	225a      	movs	r2, #90	; 0x5a
  406386:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  406388:	484e      	ldr	r0, [pc, #312]	; (4064c4 <getS2cal+0x164>)
  40638a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40638e:	f44f 7200 	mov.w	r2, #512	; 0x200
  406392:	4b4d      	ldr	r3, [pc, #308]	; (4064c8 <getS2cal+0x168>)
  406394:	4798      	blx	r3
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  406396:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 4064cc <getS2cal+0x16c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  40639a:	2600      	movs	r6, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40639c:	4d49      	ldr	r5, [pc, #292]	; (4064c4 <getS2cal+0x164>)
  40639e:	4c4a      	ldr	r4, [pc, #296]	; (4064c8 <getS2cal+0x168>)
  4063a0:	4f4b      	ldr	r7, [pc, #300]	; (4064d0 <getS2cal+0x170>)
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  4063a2:	eef0 8a48 	vmov.f32	s17, s16
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  4063a6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 4064e8 <getS2cal+0x188>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  4063aa:	4628      	mov	r0, r5
  4063ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4063b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4063b4:	47a0      	blx	r4
  4063b6:	b958      	cbnz	r0, 4063d0 <getS2cal+0x70>
  4063b8:	683b      	ldr	r3, [r7, #0]
  4063ba:	b94b      	cbnz	r3, 4063d0 <getS2cal+0x70>
			if(calState == 0){
  4063bc:	b91e      	cbnz	r6, 4063c6 <getS2cal+0x66>
				*angOff = 90 - ang;
  4063be:	ee38 8ac8 	vsub.f32	s16, s17, s16
  4063c2:	ed8a 8a00 	vstr	s16, [sl]
			}
			calState++;
  4063c6:	3601      	adds	r6, #1
			ang = 90;
			But_Up = 1;
  4063c8:	2301      	movs	r3, #1
  4063ca:	603b      	str	r3, [r7, #0]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  4063cc:	eeb0 8a68 	vmov.f32	s16, s17
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  4063d0:	4628      	mov	r0, r5
  4063d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4063d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4063da:	47a0      	blx	r4
  4063dc:	b108      	cbz	r0, 4063e2 <getS2cal+0x82>
  4063de:	2300      	movs	r3, #0
  4063e0:	603b      	str	r3, [r7, #0]
		
		if(!pio_get(SW3)) {
  4063e2:	4628      	mov	r0, r5
  4063e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4063e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4063ec:	47a0      	blx	r4
  4063ee:	b968      	cbnz	r0, 40640c <getS2cal+0xac>
			ang += 0.01;
  4063f0:	ee18 0a10 	vmov	r0, s16
  4063f4:	4b37      	ldr	r3, [pc, #220]	; (4064d4 <getS2cal+0x174>)
  4063f6:	4798      	blx	r3
  4063f8:	a32f      	add	r3, pc, #188	; (adr r3, 4064b8 <getS2cal+0x158>)
  4063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063fe:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 4064ec <getS2cal+0x18c>
  406402:	47e0      	blx	ip
  406404:	4b34      	ldr	r3, [pc, #208]	; (4064d8 <getS2cal+0x178>)
  406406:	4798      	blx	r3
  406408:	ee08 0a10 	vmov	s16, r0
		}
		
		if(!pio_get(SW2)) {
  40640c:	4628      	mov	r0, r5
  40640e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406412:	f44f 6200 	mov.w	r2, #2048	; 0x800
  406416:	47a0      	blx	r4
  406418:	b968      	cbnz	r0, 406436 <getS2cal+0xd6>
			ang -= 0.01;
  40641a:	ee18 0a10 	vmov	r0, s16
  40641e:	4b2d      	ldr	r3, [pc, #180]	; (4064d4 <getS2cal+0x174>)
  406420:	4798      	blx	r3
  406422:	a325      	add	r3, pc, #148	; (adr r3, 4064b8 <getS2cal+0x158>)
  406424:	e9d3 2300 	ldrd	r2, r3, [r3]
  406428:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 4064f0 <getS2cal+0x190>
  40642c:	47e0      	blx	ip
  40642e:	4b2a      	ldr	r3, [pc, #168]	; (4064d8 <getS2cal+0x178>)
  406430:	4798      	blx	r3
  406432:	ee08 0a10 	vmov	s16, r0
		}
		
		if(calState == 1) pio_set(LED3);
  406436:	2e01      	cmp	r6, #1
  406438:	d105      	bne.n	406446 <getS2cal+0xe6>
  40643a:	4648      	mov	r0, r9
  40643c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406440:	4b26      	ldr	r3, [pc, #152]	; (4064dc <getS2cal+0x17c>)
  406442:	4798      	blx	r3
  406444:	e004      	b.n	406450 <getS2cal+0xf0>
		else pio_clear(LED3);
  406446:	4648      	mov	r0, r9
  406448:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40644c:	4b24      	ldr	r3, [pc, #144]	; (4064e0 <getS2cal+0x180>)
  40644e:	4798      	blx	r3
		
		WriteServo(Leg,2,ang);
  406450:	4640      	mov	r0, r8
  406452:	2102      	movs	r1, #2
  406454:	eeb0 0a48 	vmov.f32	s0, s16
  406458:	4b22      	ldr	r3, [pc, #136]	; (4064e4 <getS2cal+0x184>)
  40645a:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  40645c:	4628      	mov	r0, r5
  40645e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406462:	f44f 7200 	mov.w	r2, #512	; 0x200
  406466:	47a0      	blx	r4
  406468:	2e00      	cmp	r6, #0
  40646a:	dd9e      	ble.n	4063aa <getS2cal+0x4a>
  40646c:	2800      	cmp	r0, #0
  40646e:	d19c      	bne.n	4063aa <getS2cal+0x4a>
  406470:	683b      	ldr	r3, [r7, #0]
  406472:	2b00      	cmp	r3, #0
  406474:	d199      	bne.n	4063aa <getS2cal+0x4a>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,2,ang);
	}
	But_Up = 1;
  406476:	2501      	movs	r5, #1
  406478:	4b15      	ldr	r3, [pc, #84]	; (4064d0 <getS2cal+0x170>)
  40647a:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/90.00;
  40647c:	edda 7a00 	vldr	s15, [sl]
  406480:	ee38 8a27 	vadd.f32	s16, s16, s15
  406484:	eddf 7a11 	vldr	s15, [pc, #68]	; 4064cc <getS2cal+0x16c>
  406488:	ee88 8a27 	vdiv.f32	s16, s16, s15
  40648c:	ed8b 8a00 	vstr	s16, [fp]
	cmdServoMan(6,0,90.00);
  406490:	2006      	movs	r0, #6
  406492:	2100      	movs	r1, #0
  406494:	225a      	movs	r2, #90	; 0x5a
  406496:	4c0a      	ldr	r4, [pc, #40]	; (4064c0 <getS2cal+0x160>)
  406498:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  40649a:	2006      	movs	r0, #6
  40649c:	4629      	mov	r1, r5
  40649e:	2200      	movs	r2, #0
  4064a0:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  4064a2:	2006      	movs	r0, #6
  4064a4:	2102      	movs	r1, #2
  4064a6:	225a      	movs	r2, #90	; 0x5a
  4064a8:	47a0      	blx	r4
}
  4064aa:	ecbd 8b02 	vpop	{d8}
  4064ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064b2:	bf00      	nop
  4064b4:	f3af 8000 	nop.w
  4064b8:	47ae147b 	.word	0x47ae147b
  4064bc:	3f847ae1 	.word	0x3f847ae1
  4064c0:	00406ad9 	.word	0x00406ad9
  4064c4:	400e1200 	.word	0x400e1200
  4064c8:	004027c5 	.word	0x004027c5
  4064cc:	42b40000 	.word	0x42b40000
  4064d0:	2040c4c4 	.word	0x2040c4c4
  4064d4:	0040aabd 	.word	0x0040aabd
  4064d8:	0040b0e9 	.word	0x0040b0e9
  4064dc:	004027bd 	.word	0x004027bd
  4064e0:	004027c1 	.word	0x004027c1
  4064e4:	004053b1 	.word	0x004053b1
  4064e8:	400e0e00 	.word	0x400e0e00
  4064ec:	0040a801 	.word	0x0040a801
  4064f0:	0040a7fd 	.word	0x0040a7fd

004064f4 <calibServoSpec>:

void calibServoSpec(float* calData,int Leg,int Svo) {
  4064f4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  4064f8:	b09c      	sub	sp, #112	; 0x70
  4064fa:	4680      	mov	r8, r0

		if(Svo == 0) {
  4064fc:	b962      	cbnz	r2, 406518 <calibServoSpec+0x24>
			calData[Leg*2] = 0;
  4064fe:	00cb      	lsls	r3, r1, #3
  406500:	18c4      	adds	r4, r0, r3
  406502:	2000      	movs	r0, #0
  406504:	6020      	str	r0, [r4, #0]
			calData[Leg*2+1] = 0;
  406506:	3304      	adds	r3, #4
  406508:	eb08 0203 	add.w	r2, r8, r3
  40650c:	6010      	str	r0, [r2, #0]
			getS0cal(Leg,&calData[Leg*2],&calData[Leg*2+1]);
  40650e:	4608      	mov	r0, r1
  406510:	4621      	mov	r1, r4
  406512:	4b24      	ldr	r3, [pc, #144]	; (4065a4 <calibServoSpec+0xb0>)
  406514:	4798      	blx	r3
  406516:	e020      	b.n	40655a <calibServoSpec+0x66>
		}
		else if(Svo == 1) {
  406518:	2a01      	cmp	r2, #1
  40651a:	d10e      	bne.n	40653a <calibServoSpec+0x46>
			calData[Leg*2+12] = 0;
  40651c:	00cb      	lsls	r3, r1, #3
  40651e:	f103 0430 	add.w	r4, r3, #48	; 0x30
  406522:	4404      	add	r4, r0
  406524:	2000      	movs	r0, #0
  406526:	6020      	str	r0, [r4, #0]
			calData[Leg*2+13] = 0;
  406528:	3334      	adds	r3, #52	; 0x34
  40652a:	eb08 0203 	add.w	r2, r8, r3
  40652e:	6010      	str	r0, [r2, #0]
			getS1cal(Leg,&calData[Leg*2+12],&calData[Leg*2+13]);
  406530:	4608      	mov	r0, r1
  406532:	4621      	mov	r1, r4
  406534:	4b1c      	ldr	r3, [pc, #112]	; (4065a8 <calibServoSpec+0xb4>)
  406536:	4798      	blx	r3
  406538:	e00f      	b.n	40655a <calibServoSpec+0x66>
		}
		else if(Svo == 2) {
  40653a:	2a02      	cmp	r2, #2
  40653c:	d10d      	bne.n	40655a <calibServoSpec+0x66>
			calData[Leg*2+24] = 0;
  40653e:	00cb      	lsls	r3, r1, #3
  406540:	f103 0460 	add.w	r4, r3, #96	; 0x60
  406544:	4404      	add	r4, r0
  406546:	2000      	movs	r0, #0
  406548:	6020      	str	r0, [r4, #0]
			calData[Leg*2+25] = 0;
  40654a:	3364      	adds	r3, #100	; 0x64
  40654c:	eb08 0203 	add.w	r2, r8, r3
  406550:	6010      	str	r0, [r2, #0]
			getS2cal(Leg,&calData[Leg*2+24],&calData[Leg*2+25]);
  406552:	4608      	mov	r0, r1
  406554:	4621      	mov	r1, r4
  406556:	4b15      	ldr	r3, [pc, #84]	; (4065ac <calibServoSpec+0xb8>)
  406558:	4798      	blx	r3
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
  40655a:	4815      	ldr	r0, [pc, #84]	; (4065b0 <calibServoSpec+0xbc>)
  40655c:	4c15      	ldr	r4, [pc, #84]	; (4065b4 <calibServoSpec+0xc0>)
  40655e:	47a0      	blx	r4
		char buf[100];
		sendDebugString("{");
  406560:	4815      	ldr	r0, [pc, #84]	; (4065b8 <calibServoSpec+0xc4>)
  406562:	47a0      	blx	r4
  406564:	4644      	mov	r4, r8
  406566:	f108 0890 	add.w	r8, r8, #144	; 0x90
			for(int i =0; i<18; i++) {
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  40656a:	4f14      	ldr	r7, [pc, #80]	; (4065bc <calibServoSpec+0xc8>)
  40656c:	4d14      	ldr	r5, [pc, #80]	; (4065c0 <calibServoSpec+0xcc>)
  40656e:	4e15      	ldr	r6, [pc, #84]	; (4065c4 <calibServoSpec+0xd0>)
  406570:	6820      	ldr	r0, [r4, #0]
  406572:	47a8      	blx	r5
  406574:	4682      	mov	sl, r0
  406576:	468b      	mov	fp, r1
  406578:	6860      	ldr	r0, [r4, #4]
  40657a:	47a8      	blx	r5
  40657c:	e9cd 0100 	strd	r0, r1, [sp]
  406580:	a803      	add	r0, sp, #12
  406582:	4639      	mov	r1, r7
  406584:	4652      	mov	r2, sl
  406586:	465b      	mov	r3, fp
  406588:	47b0      	blx	r6
				sendDebugString(buf);
  40658a:	a803      	add	r0, sp, #12
  40658c:	4b09      	ldr	r3, [pc, #36]	; (4065b4 <calibServoSpec+0xc0>)
  40658e:	4798      	blx	r3
  406590:	3408      	adds	r4, #8
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
		char buf[100];
		sendDebugString("{");
			for(int i =0; i<18; i++) {
  406592:	4544      	cmp	r4, r8
  406594:	d1ec      	bne.n	406570 <calibServoSpec+0x7c>
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
				sendDebugString(buf);
			}
		sendDebugString("}\n");
  406596:	480c      	ldr	r0, [pc, #48]	; (4065c8 <calibServoSpec+0xd4>)
  406598:	4b06      	ldr	r3, [pc, #24]	; (4065b4 <calibServoSpec+0xc0>)
  40659a:	4798      	blx	r3
}
  40659c:	b01c      	add	sp, #112	; 0x70
  40659e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  4065a2:	bf00      	nop
  4065a4:	00406031 	.word	0x00406031
  4065a8:	004061c9 	.word	0x004061c9
  4065ac:	00406361 	.word	0x00406361
  4065b0:	00413348 	.word	0x00413348
  4065b4:	0040019d 	.word	0x0040019d
  4065b8:	0041336c 	.word	0x0041336c
  4065bc:	00413370 	.word	0x00413370
  4065c0:	0040aabd 	.word	0x0040aabd
  4065c4:	0040b9e9 	.word	0x0040b9e9
  4065c8:	00413378 	.word	0x00413378

004065cc <byteToLEDs>:
		}
	sendDebugString("}\n");
}

//Misc
void byteToLEDs(uint8_t disp,uint8_t mask) {
  4065cc:	b538      	push	{r3, r4, r5, lr}
  4065ce:	4605      	mov	r5, r0
  4065d0:	460c      	mov	r4, r1
	if(mask&(1<<0) && disp&(1<<0)) pio_set(LED0);
  4065d2:	f011 0f01 	tst.w	r1, #1
  4065d6:	d00d      	beq.n	4065f4 <byteToLEDs+0x28>
  4065d8:	f010 0f01 	tst.w	r0, #1
  4065dc:	d005      	beq.n	4065ea <byteToLEDs+0x1e>
  4065de:	483f      	ldr	r0, [pc, #252]	; (4066dc <byteToLEDs+0x110>)
  4065e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4065e4:	4b3e      	ldr	r3, [pc, #248]	; (4066e0 <byteToLEDs+0x114>)
  4065e6:	4798      	blx	r3
  4065e8:	e004      	b.n	4065f4 <byteToLEDs+0x28>
	else if(mask&(1<<0)) pio_clear(LED0);
  4065ea:	483c      	ldr	r0, [pc, #240]	; (4066dc <byteToLEDs+0x110>)
  4065ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4065f0:	4b3c      	ldr	r3, [pc, #240]	; (4066e4 <byteToLEDs+0x118>)
  4065f2:	4798      	blx	r3
	
	if(mask&(1<<1) && disp&(1<<1)) pio_set(LED1);
  4065f4:	f014 0f02 	tst.w	r4, #2
  4065f8:	d00d      	beq.n	406616 <byteToLEDs+0x4a>
  4065fa:	f015 0f02 	tst.w	r5, #2
  4065fe:	d005      	beq.n	40660c <byteToLEDs+0x40>
  406600:	4836      	ldr	r0, [pc, #216]	; (4066dc <byteToLEDs+0x110>)
  406602:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406606:	4b36      	ldr	r3, [pc, #216]	; (4066e0 <byteToLEDs+0x114>)
  406608:	4798      	blx	r3
  40660a:	e004      	b.n	406616 <byteToLEDs+0x4a>
	else if(mask&(1<<1)) pio_clear(LED1);
  40660c:	4833      	ldr	r0, [pc, #204]	; (4066dc <byteToLEDs+0x110>)
  40660e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406612:	4b34      	ldr	r3, [pc, #208]	; (4066e4 <byteToLEDs+0x118>)
  406614:	4798      	blx	r3
	
	if(mask&(1<<2) && disp&(1<<2)) pio_set(LED2);
  406616:	f014 0f04 	tst.w	r4, #4
  40661a:	d00d      	beq.n	406638 <byteToLEDs+0x6c>
  40661c:	f015 0f04 	tst.w	r5, #4
  406620:	d005      	beq.n	40662e <byteToLEDs+0x62>
  406622:	482e      	ldr	r0, [pc, #184]	; (4066dc <byteToLEDs+0x110>)
  406624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406628:	4b2d      	ldr	r3, [pc, #180]	; (4066e0 <byteToLEDs+0x114>)
  40662a:	4798      	blx	r3
  40662c:	e004      	b.n	406638 <byteToLEDs+0x6c>
	else if(mask&(1<<2)) pio_clear(LED2);
  40662e:	482b      	ldr	r0, [pc, #172]	; (4066dc <byteToLEDs+0x110>)
  406630:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406634:	4b2b      	ldr	r3, [pc, #172]	; (4066e4 <byteToLEDs+0x118>)
  406636:	4798      	blx	r3
	
	if(mask&(1<<3) && disp&(1<<3)) pio_set(LED3);
  406638:	f014 0f08 	tst.w	r4, #8
  40663c:	d00d      	beq.n	40665a <byteToLEDs+0x8e>
  40663e:	f015 0f08 	tst.w	r5, #8
  406642:	d005      	beq.n	406650 <byteToLEDs+0x84>
  406644:	4825      	ldr	r0, [pc, #148]	; (4066dc <byteToLEDs+0x110>)
  406646:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40664a:	4b25      	ldr	r3, [pc, #148]	; (4066e0 <byteToLEDs+0x114>)
  40664c:	4798      	blx	r3
  40664e:	e004      	b.n	40665a <byteToLEDs+0x8e>
	else if(mask&(1<<3)) pio_clear(LED3);
  406650:	4822      	ldr	r0, [pc, #136]	; (4066dc <byteToLEDs+0x110>)
  406652:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406656:	4b23      	ldr	r3, [pc, #140]	; (4066e4 <byteToLEDs+0x118>)
  406658:	4798      	blx	r3
	
	if(mask&(1<<4) && disp&(1<<4)) pio_set(LED4);
  40665a:	f014 0f10 	tst.w	r4, #16
  40665e:	d00d      	beq.n	40667c <byteToLEDs+0xb0>
  406660:	f015 0f10 	tst.w	r5, #16
  406664:	d005      	beq.n	406672 <byteToLEDs+0xa6>
  406666:	4820      	ldr	r0, [pc, #128]	; (4066e8 <byteToLEDs+0x11c>)
  406668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40666c:	4b1c      	ldr	r3, [pc, #112]	; (4066e0 <byteToLEDs+0x114>)
  40666e:	4798      	blx	r3
  406670:	e004      	b.n	40667c <byteToLEDs+0xb0>
	else if(mask&(1<<4)) pio_clear(LED4);
  406672:	481d      	ldr	r0, [pc, #116]	; (4066e8 <byteToLEDs+0x11c>)
  406674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406678:	4b1a      	ldr	r3, [pc, #104]	; (4066e4 <byteToLEDs+0x118>)
  40667a:	4798      	blx	r3
	
	if(mask&(1<<5) && disp&(1<<5)) pio_set(LED5);
  40667c:	f014 0f20 	tst.w	r4, #32
  406680:	d00b      	beq.n	40669a <byteToLEDs+0xce>
  406682:	f015 0f20 	tst.w	r5, #32
  406686:	d004      	beq.n	406692 <byteToLEDs+0xc6>
  406688:	4814      	ldr	r0, [pc, #80]	; (4066dc <byteToLEDs+0x110>)
  40668a:	2104      	movs	r1, #4
  40668c:	4b14      	ldr	r3, [pc, #80]	; (4066e0 <byteToLEDs+0x114>)
  40668e:	4798      	blx	r3
  406690:	e003      	b.n	40669a <byteToLEDs+0xce>
	else if(mask&(1<<5)) pio_clear(LED5);
  406692:	4812      	ldr	r0, [pc, #72]	; (4066dc <byteToLEDs+0x110>)
  406694:	2104      	movs	r1, #4
  406696:	4b13      	ldr	r3, [pc, #76]	; (4066e4 <byteToLEDs+0x118>)
  406698:	4798      	blx	r3
	
	if(mask&(1<<6) && disp&(1<<6)) pio_set(LED6);
  40669a:	f014 0f40 	tst.w	r4, #64	; 0x40
  40669e:	d00d      	beq.n	4066bc <byteToLEDs+0xf0>
  4066a0:	f015 0f40 	tst.w	r5, #64	; 0x40
  4066a4:	d005      	beq.n	4066b2 <byteToLEDs+0xe6>
  4066a6:	480d      	ldr	r0, [pc, #52]	; (4066dc <byteToLEDs+0x110>)
  4066a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4066ac:	4b0c      	ldr	r3, [pc, #48]	; (4066e0 <byteToLEDs+0x114>)
  4066ae:	4798      	blx	r3
  4066b0:	e004      	b.n	4066bc <byteToLEDs+0xf0>
	else if(mask&(1<<6)) pio_clear(LED6);
  4066b2:	480a      	ldr	r0, [pc, #40]	; (4066dc <byteToLEDs+0x110>)
  4066b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4066b8:	4b0a      	ldr	r3, [pc, #40]	; (4066e4 <byteToLEDs+0x118>)
  4066ba:	4798      	blx	r3
	
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
  4066bc:	09e4      	lsrs	r4, r4, #7
  4066be:	d006      	beq.n	4066ce <byteToLEDs+0x102>
  4066c0:	09eb      	lsrs	r3, r5, #7
  4066c2:	d004      	beq.n	4066ce <byteToLEDs+0x102>
  4066c4:	4805      	ldr	r0, [pc, #20]	; (4066dc <byteToLEDs+0x110>)
  4066c6:	2140      	movs	r1, #64	; 0x40
  4066c8:	4b05      	ldr	r3, [pc, #20]	; (4066e0 <byteToLEDs+0x114>)
  4066ca:	4798      	blx	r3
  4066cc:	bd38      	pop	{r3, r4, r5, pc}
	else if(mask&(1<<7)) pio_clear(LED7);
  4066ce:	b11c      	cbz	r4, 4066d8 <byteToLEDs+0x10c>
  4066d0:	4802      	ldr	r0, [pc, #8]	; (4066dc <byteToLEDs+0x110>)
  4066d2:	2140      	movs	r1, #64	; 0x40
  4066d4:	4b03      	ldr	r3, [pc, #12]	; (4066e4 <byteToLEDs+0x118>)
  4066d6:	4798      	blx	r3
  4066d8:	bd38      	pop	{r3, r4, r5, pc}
  4066da:	bf00      	nop
  4066dc:	400e0e00 	.word	0x400e0e00
  4066e0:	004027bd 	.word	0x004027bd
  4066e4:	004027c1 	.word	0x004027c1
  4066e8:	400e1000 	.word	0x400e1000

004066ec <calibServos>:
				sendDebugString(buf);
			}
		sendDebugString("}\n");
}

void calibServos(float* calData) {
  4066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066f0:	b09d      	sub	sp, #116	; 0x74
  4066f2:	4606      	mov	r6, r0
	sendDebugString("Started servo cal\n");
  4066f4:	4849      	ldr	r0, [pc, #292]	; (40681c <calibServos+0x130>)
  4066f6:	4b4a      	ldr	r3, [pc, #296]	; (406820 <calibServos+0x134>)
  4066f8:	4798      	blx	r3
  4066fa:	4634      	mov	r4, r6
  4066fc:	f106 0590 	add.w	r5, r6, #144	; 0x90
  406700:	4633      	mov	r3, r6
	for(int i = 0;i<36;i++) calData[i] = 0;
  406702:	2200      	movs	r2, #0
  406704:	f843 2b04 	str.w	r2, [r3], #4
  406708:	42ab      	cmp	r3, r5
  40670a:	d1fb      	bne.n	406704 <calibServos+0x18>
  40670c:	46b0      	mov	r8, r6
  40670e:	2700      	movs	r7, #0
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  406710:	f8df b124 	ldr.w	fp, [pc, #292]	; 406838 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  406714:	f8df 9124 	ldr.w	r9, [pc, #292]	; 40683c <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  406718:	f8df a124 	ldr.w	sl, [pc, #292]	; 406840 <calibServos+0x154>

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  40671c:	f3c7 1007 	ubfx	r0, r7, #4, #8
  406720:	21f0      	movs	r1, #240	; 0xf0
  406722:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  406724:	2006      	movs	r0, #6
  406726:	2100      	movs	r1, #0
  406728:	225a      	movs	r2, #90	; 0x5a
  40672a:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  40672c:	2006      	movs	r0, #6
  40672e:	2101      	movs	r1, #1
  406730:	225a      	movs	r2, #90	; 0x5a
  406732:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  406734:	2006      	movs	r0, #6
  406736:	2102      	movs	r1, #2
  406738:	22b4      	movs	r2, #180	; 0xb4
  40673a:	47c8      	blx	r9
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  40673c:	4638      	mov	r0, r7
  40673e:	4641      	mov	r1, r8
  406740:	f108 0204 	add.w	r2, r8, #4
  406744:	47d0      	blx	sl
}

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
  406746:	3701      	adds	r7, #1
  406748:	f108 0808 	add.w	r8, r8, #8
  40674c:	2f06      	cmp	r7, #6
  40674e:	d1e5      	bne.n	40671c <calibServos+0x30>
  406750:	f106 0830 	add.w	r8, r6, #48	; 0x30
  406754:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  406756:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 406838 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  40675a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40683c <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  40675e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 406844 <calibServos+0x158>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  406762:	f3c7 1007 	ubfx	r0, r7, #4, #8
  406766:	21f0      	movs	r1, #240	; 0xf0
  406768:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  40676a:	2006      	movs	r0, #6
  40676c:	2100      	movs	r1, #0
  40676e:	225a      	movs	r2, #90	; 0x5a
  406770:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  406772:	2006      	movs	r0, #6
  406774:	2101      	movs	r1, #1
  406776:	225a      	movs	r2, #90	; 0x5a
  406778:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  40677a:	2006      	movs	r0, #6
  40677c:	2102      	movs	r1, #2
  40677e:	22b4      	movs	r2, #180	; 0xb4
  406780:	47c8      	blx	r9
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  406782:	4638      	mov	r0, r7
  406784:	4641      	mov	r1, r8
  406786:	f108 0204 	add.w	r2, r8, #4
  40678a:	47d0      	blx	sl
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
  40678c:	3701      	adds	r7, #1
  40678e:	f108 0808 	add.w	r8, r8, #8
  406792:	2f06      	cmp	r7, #6
  406794:	d1e5      	bne.n	406762 <calibServos+0x76>
  406796:	3660      	adds	r6, #96	; 0x60
  406798:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  40679a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 406838 <calibServos+0x14c>
	cmdServoMan(6,0,90.00);
  40679e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40683c <calibServos+0x150>
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  4067a2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406848 <calibServos+0x15c>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  4067a6:	f3c7 1007 	ubfx	r0, r7, #4, #8
  4067aa:	21f0      	movs	r1, #240	; 0xf0
  4067ac:	47d0      	blx	sl
	cmdServoMan(6,0,90.00);
  4067ae:	2006      	movs	r0, #6
  4067b0:	2100      	movs	r1, #0
  4067b2:	225a      	movs	r2, #90	; 0x5a
  4067b4:	47c0      	blx	r8
	cmdServoMan(6,1,90.00);
  4067b6:	2006      	movs	r0, #6
  4067b8:	2101      	movs	r1, #1
  4067ba:	225a      	movs	r2, #90	; 0x5a
  4067bc:	47c0      	blx	r8
	cmdServoMan(6,2,180.00);
  4067be:	2006      	movs	r0, #6
  4067c0:	2102      	movs	r1, #2
  4067c2:	22b4      	movs	r2, #180	; 0xb4
  4067c4:	47c0      	blx	r8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  4067c6:	4638      	mov	r0, r7
  4067c8:	4631      	mov	r1, r6
  4067ca:	1d32      	adds	r2, r6, #4
  4067cc:	47c8      	blx	r9
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
  4067ce:	3701      	adds	r7, #1
  4067d0:	3608      	adds	r6, #8
  4067d2:	2f06      	cmp	r7, #6
  4067d4:	d1e7      	bne.n	4067a6 <calibServos+0xba>
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
  4067d6:	4813      	ldr	r0, [pc, #76]	; (406824 <calibServos+0x138>)
  4067d8:	4e11      	ldr	r6, [pc, #68]	; (406820 <calibServos+0x134>)
  4067da:	47b0      	blx	r6
	char buf[100];
	sendDebugString("{");
  4067dc:	4812      	ldr	r0, [pc, #72]	; (406828 <calibServos+0x13c>)
  4067de:	47b0      	blx	r6
		for(int i =0; i<18; i++) {
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  4067e0:	f8df a068 	ldr.w	sl, [pc, #104]	; 40684c <calibServos+0x160>
  4067e4:	4f11      	ldr	r7, [pc, #68]	; (40682c <calibServos+0x140>)
  4067e6:	4e12      	ldr	r6, [pc, #72]	; (406830 <calibServos+0x144>)
  4067e8:	6820      	ldr	r0, [r4, #0]
  4067ea:	47b8      	blx	r7
  4067ec:	4680      	mov	r8, r0
  4067ee:	4689      	mov	r9, r1
  4067f0:	6860      	ldr	r0, [r4, #4]
  4067f2:	47b8      	blx	r7
  4067f4:	e9cd 0100 	strd	r0, r1, [sp]
  4067f8:	a803      	add	r0, sp, #12
  4067fa:	4651      	mov	r1, sl
  4067fc:	4642      	mov	r2, r8
  4067fe:	464b      	mov	r3, r9
  406800:	47b0      	blx	r6
			sendDebugString(buf);
  406802:	a803      	add	r0, sp, #12
  406804:	4b06      	ldr	r3, [pc, #24]	; (406820 <calibServos+0x134>)
  406806:	4798      	blx	r3
  406808:	3408      	adds	r4, #8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
	char buf[100];
	sendDebugString("{");
		for(int i =0; i<18; i++) {
  40680a:	42a5      	cmp	r5, r4
  40680c:	d1ec      	bne.n	4067e8 <calibServos+0xfc>
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
			sendDebugString(buf);
		}
	sendDebugString("}\n");
  40680e:	4809      	ldr	r0, [pc, #36]	; (406834 <calibServos+0x148>)
  406810:	4b03      	ldr	r3, [pc, #12]	; (406820 <calibServos+0x134>)
  406812:	4798      	blx	r3
}
  406814:	b01d      	add	sp, #116	; 0x74
  406816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40681a:	bf00      	nop
  40681c:	0041337c 	.word	0x0041337c
  406820:	0040019d 	.word	0x0040019d
  406824:	00413348 	.word	0x00413348
  406828:	0041336c 	.word	0x0041336c
  40682c:	0040aabd 	.word	0x0040aabd
  406830:	0040b9e9 	.word	0x0040b9e9
  406834:	00413378 	.word	0x00413378
  406838:	004065cd 	.word	0x004065cd
  40683c:	00406ad9 	.word	0x00406ad9
  406840:	00406031 	.word	0x00406031
  406844:	004061c9 	.word	0x004061c9
  406848:	00406361 	.word	0x00406361
  40684c:	00413370 	.word	0x00413370

00406850 <surprise>:
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
	else if(mask&(1<<7)) pio_clear(LED7);
	
}

void surprise() {
  406850:	b510      	push	{r4, lr}
  406852:	ed2d 8b02 	vpush	{d8}
	WriteServo(2,0,120);
  406856:	ed9f 8a18 	vldr	s16, [pc, #96]	; 4068b8 <surprise+0x68>
  40685a:	2002      	movs	r0, #2
  40685c:	2100      	movs	r1, #0
  40685e:	eeb0 0a48 	vmov.f32	s0, s16
  406862:	4c16      	ldr	r4, [pc, #88]	; (4068bc <surprise+0x6c>)
  406864:	47a0      	blx	r4
	WriteServo(3,0,60);
  406866:	eddf 8a16 	vldr	s17, [pc, #88]	; 4068c0 <surprise+0x70>
  40686a:	2003      	movs	r0, #3
  40686c:	2100      	movs	r1, #0
  40686e:	eeb0 0a68 	vmov.f32	s0, s17
  406872:	47a0      	blx	r4
	WriteServo(4,0,60);
  406874:	2004      	movs	r0, #4
  406876:	2100      	movs	r1, #0
  406878:	eeb0 0a68 	vmov.f32	s0, s17
  40687c:	47a0      	blx	r4
	WriteServo(5,0,120);
  40687e:	2005      	movs	r0, #5
  406880:	2100      	movs	r1, #0
  406882:	eeb0 0a48 	vmov.f32	s0, s16
  406886:	47a0      	blx	r4
	WriteServo(0,1,30);
  406888:	2000      	movs	r0, #0
  40688a:	2101      	movs	r1, #1
  40688c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x3e
  406890:	47a0      	blx	r4
	WriteServo(1,1,30);
  406892:	2001      	movs	r0, #1
  406894:	4601      	mov	r1, r0
  406896:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x3e
  40689a:	47a0      	blx	r4
	WriteServo(0,0,170);
  40689c:	2000      	movs	r0, #0
  40689e:	4601      	mov	r1, r0
  4068a0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 4068c4 <surprise+0x74>
  4068a4:	47a0      	blx	r4
	WriteServo(1,0,10);
  4068a6:	2001      	movs	r0, #1
  4068a8:	2100      	movs	r1, #0
  4068aa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x24
  4068ae:	47a0      	blx	r4
	
}
  4068b0:	ecbd 8b02 	vpop	{d8}
  4068b4:	bd10      	pop	{r4, pc}
  4068b6:	bf00      	nop
  4068b8:	42f00000 	.word	0x42f00000
  4068bc:	004053b1 	.word	0x004053b1
  4068c0:	42700000 	.word	0x42700000
  4068c4:	432a0000 	.word	0x432a0000

004068c8 <cmdInterp>:
		// 14	max_i addition amount byte 1
		// 15	max_i addition amount byte 2
		// 16	max_i addition amount byte 3
		// 17   walk EN
		
		switch(cmd[0]) {
  4068c8:	7803      	ldrb	r3, [r0, #0]
  4068ca:	2b02      	cmp	r3, #2
  4068cc:	d002      	beq.n	4068d4 <cmdInterp+0xc>
  4068ce:	2b03      	cmp	r3, #3
  4068d0:	d01e      	beq.n	406910 <cmdInterp+0x48>
  4068d2:	4770      	bx	lr
		case 01:
		
		break;
		
		case 02:
				if(cmdLen != 34) break;
  4068d4:	2922      	cmp	r1, #34	; 0x22
  4068d6:	d12b      	bne.n	406930 <cmdInterp+0x68>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  4068d8:	1c43      	adds	r3, r0, #1
  4068da:	681b      	ldr	r3, [r3, #0]
  4068dc:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  4068de:	1d43      	adds	r3, r0, #5
  4068e0:	681b      	ldr	r3, [r3, #0]
  4068e2:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  4068e4:	7a43      	ldrb	r3, [r0, #9]
  4068e6:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += *(uint32_t*)&cmd[13];
  4068e8:	6a11      	ldr	r1, [r2, #32]
  4068ea:	f8d0 300d 	ldr.w	r3, [r0, #13]
  4068ee:	440b      	add	r3, r1
  4068f0:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  4068f2:	7c43      	ldrb	r3, [r0, #17]
  4068f4:	61d3      	str	r3, [r2, #28]
				//stance
				hexabot_walk->stance = *(uint32_t*)&cmd[18];
  4068f6:	f8d0 3012 	ldr.w	r3, [r0, #18]
  4068fa:	6093      	str	r3, [r2, #8]
				//height
				hexabot_walk->hgt = *(uint32_t*)&cmd[22];
  4068fc:	f8d0 3016 	ldr.w	r3, [r0, #22]
  406900:	60d3      	str	r3, [r2, #12]
				//pull up
				hexabot_walk->pup = *(uint32_t*)&cmd[26];
  406902:	f8d0 301a 	ldr.w	r3, [r0, #26]
  406906:	6113      	str	r3, [r2, #16]
				//stride
				hexabot_walk->stride = *(uint32_t*)&cmd[30];
  406908:	f8d0 301e 	ldr.w	r3, [r0, #30]
  40690c:	6153      	str	r3, [r2, #20]
				
		break;
  40690e:	4770      	bx	lr
		
		//Critical walking pattern update
		case 03:
				if(cmdLen != 18) break;
  406910:	2912      	cmp	r1, #18
  406912:	d10d      	bne.n	406930 <cmdInterp+0x68>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  406914:	1c43      	adds	r3, r0, #1
  406916:	681b      	ldr	r3, [r3, #0]
  406918:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  40691a:	1d43      	adds	r3, r0, #5
  40691c:	681b      	ldr	r3, [r3, #0]
  40691e:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  406920:	7a43      	ldrb	r3, [r0, #9]
  406922:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += cmd[13];
  406924:	7b43      	ldrb	r3, [r0, #13]
  406926:	6a11      	ldr	r1, [r2, #32]
  406928:	440b      	add	r3, r1
  40692a:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  40692c:	7c43      	ldrb	r3, [r0, #17]
  40692e:	61d3      	str	r3, [r2, #28]
  406930:	4770      	bx	lr
  406932:	bf00      	nop

00406934 <cmdLED>:
 */ 
#include <Hexabot/Hexabot_Cmd.h>
#include <Hexabot/Hexabot.h>
#include <DW1000.h>

void cmdLED(int L, int onOff) {
  406934:	b5f0      	push	{r4, r5, r6, r7, lr}
  406936:	b09b      	sub	sp, #108	; 0x6c
  406938:	4604      	mov	r4, r0
  40693a:	460d      	mov	r5, r1
	extern int VerboseMode;
	char buf[100];
	
	switch(L) {
  40693c:	2809      	cmp	r0, #9
  40693e:	f200 80ad 	bhi.w	406a9c <cmdLED+0x168>
  406942:	e8df f000 	tbb	[pc, r0]
  406946:	1205      	.short	0x1205
  406948:	46392c1f 	.word	0x46392c1f
  40694c:	69ab5e51 	.word	0x69ab5e51
		case 0:
			if(onOff) pio_set(LED0);
  406950:	b129      	cbz	r1, 40695e <cmdLED+0x2a>
  406952:	4859      	ldr	r0, [pc, #356]	; (406ab8 <cmdLED+0x184>)
  406954:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406958:	4b58      	ldr	r3, [pc, #352]	; (406abc <cmdLED+0x188>)
  40695a:	4798      	blx	r3
  40695c:	e09e      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED0);
  40695e:	4856      	ldr	r0, [pc, #344]	; (406ab8 <cmdLED+0x184>)
  406960:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406964:	4b56      	ldr	r3, [pc, #344]	; (406ac0 <cmdLED+0x18c>)
  406966:	4798      	blx	r3
  406968:	e098      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 1:
			if(onOff) pio_set(LED1);
  40696a:	b129      	cbz	r1, 406978 <cmdLED+0x44>
  40696c:	4852      	ldr	r0, [pc, #328]	; (406ab8 <cmdLED+0x184>)
  40696e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406972:	4b52      	ldr	r3, [pc, #328]	; (406abc <cmdLED+0x188>)
  406974:	4798      	blx	r3
  406976:	e091      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED1);
  406978:	484f      	ldr	r0, [pc, #316]	; (406ab8 <cmdLED+0x184>)
  40697a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40697e:	4b50      	ldr	r3, [pc, #320]	; (406ac0 <cmdLED+0x18c>)
  406980:	4798      	blx	r3
  406982:	e08b      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 2:
			if(onOff) pio_set(LED2);
  406984:	b129      	cbz	r1, 406992 <cmdLED+0x5e>
  406986:	484c      	ldr	r0, [pc, #304]	; (406ab8 <cmdLED+0x184>)
  406988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40698c:	4b4b      	ldr	r3, [pc, #300]	; (406abc <cmdLED+0x188>)
  40698e:	4798      	blx	r3
  406990:	e084      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED2);
  406992:	4849      	ldr	r0, [pc, #292]	; (406ab8 <cmdLED+0x184>)
  406994:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406998:	4b49      	ldr	r3, [pc, #292]	; (406ac0 <cmdLED+0x18c>)
  40699a:	4798      	blx	r3
  40699c:	e07e      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 3:
			if(onOff) pio_set(LED3);
  40699e:	b129      	cbz	r1, 4069ac <cmdLED+0x78>
  4069a0:	4845      	ldr	r0, [pc, #276]	; (406ab8 <cmdLED+0x184>)
  4069a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4069a6:	4b45      	ldr	r3, [pc, #276]	; (406abc <cmdLED+0x188>)
  4069a8:	4798      	blx	r3
  4069aa:	e077      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED3);
  4069ac:	4842      	ldr	r0, [pc, #264]	; (406ab8 <cmdLED+0x184>)
  4069ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4069b2:	4b43      	ldr	r3, [pc, #268]	; (406ac0 <cmdLED+0x18c>)
  4069b4:	4798      	blx	r3
  4069b6:	e071      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 4:
			if(onOff) pio_set(LED4);
  4069b8:	b129      	cbz	r1, 4069c6 <cmdLED+0x92>
  4069ba:	4842      	ldr	r0, [pc, #264]	; (406ac4 <cmdLED+0x190>)
  4069bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4069c0:	4b3e      	ldr	r3, [pc, #248]	; (406abc <cmdLED+0x188>)
  4069c2:	4798      	blx	r3
  4069c4:	e06a      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED4);
  4069c6:	483f      	ldr	r0, [pc, #252]	; (406ac4 <cmdLED+0x190>)
  4069c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4069cc:	4b3c      	ldr	r3, [pc, #240]	; (406ac0 <cmdLED+0x18c>)
  4069ce:	4798      	blx	r3
  4069d0:	e064      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 5:
			if(onOff) pio_set(LED5);
  4069d2:	b121      	cbz	r1, 4069de <cmdLED+0xaa>
  4069d4:	4838      	ldr	r0, [pc, #224]	; (406ab8 <cmdLED+0x184>)
  4069d6:	2104      	movs	r1, #4
  4069d8:	4b38      	ldr	r3, [pc, #224]	; (406abc <cmdLED+0x188>)
  4069da:	4798      	blx	r3
  4069dc:	e05e      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED5);
  4069de:	4836      	ldr	r0, [pc, #216]	; (406ab8 <cmdLED+0x184>)
  4069e0:	2104      	movs	r1, #4
  4069e2:	4b37      	ldr	r3, [pc, #220]	; (406ac0 <cmdLED+0x18c>)
  4069e4:	4798      	blx	r3
  4069e6:	e059      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 6:
			if(onOff) pio_set(LED6);
  4069e8:	b129      	cbz	r1, 4069f6 <cmdLED+0xc2>
  4069ea:	4833      	ldr	r0, [pc, #204]	; (406ab8 <cmdLED+0x184>)
  4069ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4069f0:	4b32      	ldr	r3, [pc, #200]	; (406abc <cmdLED+0x188>)
  4069f2:	4798      	blx	r3
  4069f4:	e052      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED6);
  4069f6:	4830      	ldr	r0, [pc, #192]	; (406ab8 <cmdLED+0x184>)
  4069f8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4069fc:	4b30      	ldr	r3, [pc, #192]	; (406ac0 <cmdLED+0x18c>)
  4069fe:	4798      	blx	r3
  406a00:	e04c      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 7:
			if(onOff) pio_set(LED7);
  406a02:	b121      	cbz	r1, 406a0e <cmdLED+0xda>
  406a04:	482c      	ldr	r0, [pc, #176]	; (406ab8 <cmdLED+0x184>)
  406a06:	2140      	movs	r1, #64	; 0x40
  406a08:	4b2c      	ldr	r3, [pc, #176]	; (406abc <cmdLED+0x188>)
  406a0a:	4798      	blx	r3
  406a0c:	e046      	b.n	406a9c <cmdLED+0x168>
			else pio_clear(LED7);
  406a0e:	482a      	ldr	r0, [pc, #168]	; (406ab8 <cmdLED+0x184>)
  406a10:	2140      	movs	r1, #64	; 0x40
  406a12:	4b2b      	ldr	r3, [pc, #172]	; (406ac0 <cmdLED+0x18c>)
  406a14:	4798      	blx	r3
  406a16:	e041      	b.n	406a9c <cmdLED+0x168>
		break;
		
		case 9:
			if(onOff) {
  406a18:	b301      	cbz	r1, 406a5c <cmdLED+0x128>
				pio_set(LED0);
  406a1a:	4f27      	ldr	r7, [pc, #156]	; (406ab8 <cmdLED+0x184>)
  406a1c:	4638      	mov	r0, r7
  406a1e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406a22:	4e26      	ldr	r6, [pc, #152]	; (406abc <cmdLED+0x188>)
  406a24:	47b0      	blx	r6
				pio_set(LED1);
  406a26:	4638      	mov	r0, r7
  406a28:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406a2c:	47b0      	blx	r6
				pio_set(LED2);
  406a2e:	4638      	mov	r0, r7
  406a30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406a34:	47b0      	blx	r6
				pio_set(LED3);
  406a36:	4638      	mov	r0, r7
  406a38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406a3c:	47b0      	blx	r6
				pio_set(LED4);
  406a3e:	4821      	ldr	r0, [pc, #132]	; (406ac4 <cmdLED+0x190>)
  406a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406a44:	47b0      	blx	r6
				pio_set(LED5);
  406a46:	4638      	mov	r0, r7
  406a48:	2104      	movs	r1, #4
  406a4a:	47b0      	blx	r6
				pio_set(LED6);
  406a4c:	4638      	mov	r0, r7
  406a4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406a52:	47b0      	blx	r6
				pio_set(LED7);
  406a54:	4638      	mov	r0, r7
  406a56:	2140      	movs	r1, #64	; 0x40
  406a58:	47b0      	blx	r6
  406a5a:	e01f      	b.n	406a9c <cmdLED+0x168>
			}
			else
			{
				 pio_clear(LED0);
  406a5c:	4f16      	ldr	r7, [pc, #88]	; (406ab8 <cmdLED+0x184>)
  406a5e:	4638      	mov	r0, r7
  406a60:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406a64:	4e16      	ldr	r6, [pc, #88]	; (406ac0 <cmdLED+0x18c>)
  406a66:	47b0      	blx	r6
				 pio_clear(LED1);
  406a68:	4638      	mov	r0, r7
  406a6a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406a6e:	47b0      	blx	r6
				 pio_clear(LED2);
  406a70:	4638      	mov	r0, r7
  406a72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406a76:	47b0      	blx	r6
				 pio_clear(LED3);
  406a78:	4638      	mov	r0, r7
  406a7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406a7e:	47b0      	blx	r6
				 pio_clear(LED4);
  406a80:	4810      	ldr	r0, [pc, #64]	; (406ac4 <cmdLED+0x190>)
  406a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406a86:	47b0      	blx	r6
				 pio_clear(LED5);
  406a88:	4638      	mov	r0, r7
  406a8a:	2104      	movs	r1, #4
  406a8c:	47b0      	blx	r6
				 pio_clear(LED6);
  406a8e:	4638      	mov	r0, r7
  406a90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406a94:	47b0      	blx	r6
				 pio_clear(LED7); 
  406a96:	4638      	mov	r0, r7
  406a98:	2140      	movs	r1, #64	; 0x40
  406a9a:	47b0      	blx	r6
			}
		break;
		
	}
		if(VerboseMode) {
  406a9c:	4b0a      	ldr	r3, [pc, #40]	; (406ac8 <cmdLED+0x194>)
  406a9e:	681b      	ldr	r3, [r3, #0]
  406aa0:	b143      	cbz	r3, 406ab4 <cmdLED+0x180>
		sprintf(buf,"LED%d SET TO %d\n",L,onOff);
  406aa2:	a801      	add	r0, sp, #4
  406aa4:	4909      	ldr	r1, [pc, #36]	; (406acc <cmdLED+0x198>)
  406aa6:	4622      	mov	r2, r4
  406aa8:	462b      	mov	r3, r5
  406aaa:	4c09      	ldr	r4, [pc, #36]	; (406ad0 <cmdLED+0x19c>)
  406aac:	47a0      	blx	r4
		sendDebugString(buf);
  406aae:	a801      	add	r0, sp, #4
  406ab0:	4b08      	ldr	r3, [pc, #32]	; (406ad4 <cmdLED+0x1a0>)
  406ab2:	4798      	blx	r3
	}

}
  406ab4:	b01b      	add	sp, #108	; 0x6c
  406ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ab8:	400e0e00 	.word	0x400e0e00
  406abc:	004027bd 	.word	0x004027bd
  406ac0:	004027c1 	.word	0x004027c1
  406ac4:	400e1000 	.word	0x400e1000
  406ac8:	2040c4c8 	.word	0x2040c4c8
  406acc:	00413390 	.word	0x00413390
  406ad0:	0040b9e9 	.word	0x0040b9e9
  406ad4:	0040019d 	.word	0x0040019d

00406ad8 <cmdServoMan>:

void cmdServoMan(int L,int S ,int angle) {
  406ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ada:	ed2d 8b02 	vpush	{d8}
  406ade:	b09d      	sub	sp, #116	; 0x74
  406ae0:	4604      	mov	r4, r0
  406ae2:	460d      	mov	r5, r1
  406ae4:	4616      	mov	r6, r2
	extern int VerboseMode;
	char buf[100];
	
	switch (L) {
  406ae6:	2806      	cmp	r0, #6
  406ae8:	d857      	bhi.n	406b9a <cmdServoMan+0xc2>
  406aea:	e8df f000 	tbb	[pc, r0]
  406aee:	0c04      	.short	0x0c04
  406af0:	2c241c14 	.word	0x2c241c14
  406af4:	34          	.byte	0x34
  406af5:	00          	.byte	0x00
		
	case 0:
	WriteServo(L0_S0+S,angle);
  406af6:	2000      	movs	r0, #0
  406af8:	ee07 2a90 	vmov	s15, r2
  406afc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b00:	4b2e      	ldr	r3, [pc, #184]	; (406bbc <cmdServoMan+0xe4>)
  406b02:	4798      	blx	r3
	break;
  406b04:	e049      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 1:
	WriteServo(L1_S0+S,angle);
  406b06:	2001      	movs	r0, #1
  406b08:	ee07 2a90 	vmov	s15, r2
  406b0c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b10:	4b2a      	ldr	r3, [pc, #168]	; (406bbc <cmdServoMan+0xe4>)
  406b12:	4798      	blx	r3
	break;
  406b14:	e041      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 2:
	WriteServo(L2_S0+S,angle);
  406b16:	2002      	movs	r0, #2
  406b18:	ee07 2a90 	vmov	s15, r2
  406b1c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b20:	4b26      	ldr	r3, [pc, #152]	; (406bbc <cmdServoMan+0xe4>)
  406b22:	4798      	blx	r3
	break;
  406b24:	e039      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 3:
	WriteServo(L3_S0+S,angle);
  406b26:	2003      	movs	r0, #3
  406b28:	ee07 2a90 	vmov	s15, r2
  406b2c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b30:	4b22      	ldr	r3, [pc, #136]	; (406bbc <cmdServoMan+0xe4>)
  406b32:	4798      	blx	r3
	break;
  406b34:	e031      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 4:
	WriteServo(L4_S0+S,angle);
  406b36:	2004      	movs	r0, #4
  406b38:	ee07 2a90 	vmov	s15, r2
  406b3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b40:	4b1e      	ldr	r3, [pc, #120]	; (406bbc <cmdServoMan+0xe4>)
  406b42:	4798      	blx	r3
	break;
  406b44:	e029      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 5:
	WriteServo(L5_S0+S,angle);
  406b46:	2005      	movs	r0, #5
  406b48:	ee07 2a90 	vmov	s15, r2
  406b4c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  406b50:	4b1a      	ldr	r3, [pc, #104]	; (406bbc <cmdServoMan+0xe4>)
  406b52:	4798      	blx	r3
	break;
  406b54:	e021      	b.n	406b9a <cmdServoMan+0xc2>
	
	case 6:
	WriteServo(L0_S0+S,angle);
  406b56:	ee07 2a90 	vmov	s15, r2
  406b5a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  406b5e:	2000      	movs	r0, #0
  406b60:	eeb0 0a48 	vmov.f32	s0, s16
  406b64:	4f15      	ldr	r7, [pc, #84]	; (406bbc <cmdServoMan+0xe4>)
  406b66:	47b8      	blx	r7
	WriteServo(L1_S0+S,angle);
  406b68:	2001      	movs	r0, #1
  406b6a:	4629      	mov	r1, r5
  406b6c:	eeb0 0a48 	vmov.f32	s0, s16
  406b70:	47b8      	blx	r7
	WriteServo(L2_S0+S,angle);
  406b72:	2002      	movs	r0, #2
  406b74:	4629      	mov	r1, r5
  406b76:	eeb0 0a48 	vmov.f32	s0, s16
  406b7a:	47b8      	blx	r7
	WriteServo(L3_S0+S,angle);
  406b7c:	2003      	movs	r0, #3
  406b7e:	4629      	mov	r1, r5
  406b80:	eeb0 0a48 	vmov.f32	s0, s16
  406b84:	47b8      	blx	r7
	WriteServo(L4_S0+S,angle);
  406b86:	2004      	movs	r0, #4
  406b88:	4629      	mov	r1, r5
  406b8a:	eeb0 0a48 	vmov.f32	s0, s16
  406b8e:	47b8      	blx	r7
	WriteServo(L5_S0+S,angle);
  406b90:	2005      	movs	r0, #5
  406b92:	4629      	mov	r1, r5
  406b94:	eeb0 0a48 	vmov.f32	s0, s16
  406b98:	47b8      	blx	r7
	break;
	}
	
	if(VerboseMode) {
  406b9a:	4b09      	ldr	r3, [pc, #36]	; (406bc0 <cmdServoMan+0xe8>)
  406b9c:	681b      	ldr	r3, [r3, #0]
  406b9e:	b14b      	cbz	r3, 406bb4 <cmdServoMan+0xdc>
		sprintf(buf,"SERVO LEG:%d,SERVO:%d MOVED TO %d\n",L,S,angle);
  406ba0:	9600      	str	r6, [sp, #0]
  406ba2:	a803      	add	r0, sp, #12
  406ba4:	4907      	ldr	r1, [pc, #28]	; (406bc4 <cmdServoMan+0xec>)
  406ba6:	4622      	mov	r2, r4
  406ba8:	462b      	mov	r3, r5
  406baa:	4c07      	ldr	r4, [pc, #28]	; (406bc8 <cmdServoMan+0xf0>)
  406bac:	47a0      	blx	r4
		sendDebugString(buf);
  406bae:	a803      	add	r0, sp, #12
  406bb0:	4b06      	ldr	r3, [pc, #24]	; (406bcc <cmdServoMan+0xf4>)
  406bb2:	4798      	blx	r3
	}
	
}
  406bb4:	b01d      	add	sp, #116	; 0x74
  406bb6:	ecbd 8b02 	vpop	{d8}
  406bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406bbc:	004053b1 	.word	0x004053b1
  406bc0:	2040c4c8 	.word	0x2040c4c8
  406bc4:	004133a4 	.word	0x004133a4
  406bc8:	0040b9e9 	.word	0x0040b9e9
  406bcc:	0040019d 	.word	0x0040019d

00406bd0 <cmdBatVolt>:

void cmdBatVolt() {
  406bd0:	b510      	push	{r4, lr}
  406bd2:	b09a      	sub	sp, #104	; 0x68
	char buf[100];
	sprintf(buf,"Battery Voltage:%f\n",getBatVoltage());
  406bd4:	4b08      	ldr	r3, [pc, #32]	; (406bf8 <cmdBatVolt+0x28>)
  406bd6:	4798      	blx	r3
  406bd8:	ee10 0a10 	vmov	r0, s0
  406bdc:	4b07      	ldr	r3, [pc, #28]	; (406bfc <cmdBatVolt+0x2c>)
  406bde:	4798      	blx	r3
  406be0:	4602      	mov	r2, r0
  406be2:	460b      	mov	r3, r1
  406be4:	a801      	add	r0, sp, #4
  406be6:	4906      	ldr	r1, [pc, #24]	; (406c00 <cmdBatVolt+0x30>)
  406be8:	4c06      	ldr	r4, [pc, #24]	; (406c04 <cmdBatVolt+0x34>)
  406bea:	47a0      	blx	r4
	sendDebugString(buf);
  406bec:	a801      	add	r0, sp, #4
  406bee:	4b06      	ldr	r3, [pc, #24]	; (406c08 <cmdBatVolt+0x38>)
  406bf0:	4798      	blx	r3
}
  406bf2:	b01a      	add	sp, #104	; 0x68
  406bf4:	bd10      	pop	{r4, pc}
  406bf6:	bf00      	nop
  406bf8:	00405a01 	.word	0x00405a01
  406bfc:	0040aabd 	.word	0x0040aabd
  406c00:	004133c8 	.word	0x004133c8
  406c04:	0040b9e9 	.word	0x0040b9e9
  406c08:	0040019d 	.word	0x0040019d

00406c0c <cmdWalk>:
	dumpFrame(dumploc);
}

void cmdWalk(int maxi) {
	extern walk_data hexabot_walk;
	hexabot_walk.i = 0;
  406c0c:	4b03      	ldr	r3, [pc, #12]	; (406c1c <cmdWalk+0x10>)
  406c0e:	2200      	movs	r2, #0
  406c10:	625a      	str	r2, [r3, #36]	; 0x24
	hexabot_walk.max_i = maxi;
  406c12:	6218      	str	r0, [r3, #32]
	hexabot_walk.Walk_EN = 1;
  406c14:	2201      	movs	r2, #1
  406c16:	61da      	str	r2, [r3, #28]
  406c18:	4770      	bx	lr
  406c1a:	bf00      	nop
  406c1c:	2040c5f8 	.word	0x2040c5f8

00406c20 <cmdTestDW1000>:
}

void cmdTestDW1000() {
  406c20:	b570      	push	{r4, r5, r6, lr}
  406c22:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_toggleGPIO_MODE();
  406c24:	4b15      	ldr	r3, [pc, #84]	; (406c7c <cmdTestDW1000+0x5c>)
  406c26:	4798      	blx	r3
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x000FFFFF, PMSC_LEDC_LEN);
  406c28:	4a15      	ldr	r2, [pc, #84]	; (406c80 <cmdTestDW1000+0x60>)
  406c2a:	2300      	movs	r3, #0
  406c2c:	e9cd 2300 	strd	r2, r3, [sp]
  406c30:	2304      	movs	r3, #4
  406c32:	9302      	str	r3, [sp, #8]
  406c34:	2036      	movs	r0, #54	; 0x36
  406c36:	2101      	movs	r1, #1
  406c38:	2228      	movs	r2, #40	; 0x28
  406c3a:	4b12      	ldr	r3, [pc, #72]	; (406c84 <cmdTestDW1000+0x64>)
  406c3c:	4798      	blx	r3

	delay_us(1);
  406c3e:	2033      	movs	r0, #51	; 0x33
  406c40:	4b11      	ldr	r3, [pc, #68]	; (406c88 <cmdTestDW1000+0x68>)
  406c42:	4798      	blx	r3
	sprintf(buf,"TestDevID: 0x%x\n",DW1000_readDeviceIdentifier());
  406c44:	4b11      	ldr	r3, [pc, #68]	; (406c8c <cmdTestDW1000+0x6c>)
  406c46:	4798      	blx	r3
  406c48:	4602      	mov	r2, r0
  406c4a:	460b      	mov	r3, r1
  406c4c:	a804      	add	r0, sp, #16
  406c4e:	4910      	ldr	r1, [pc, #64]	; (406c90 <cmdTestDW1000+0x70>)
  406c50:	4e10      	ldr	r6, [pc, #64]	; (406c94 <cmdTestDW1000+0x74>)
  406c52:	47b0      	blx	r6
	sendDebugString(buf);
  406c54:	a804      	add	r0, sp, #16
  406c56:	4c10      	ldr	r4, [pc, #64]	; (406c98 <cmdTestDW1000+0x78>)
  406c58:	47a0      	blx	r4
	sendDebugString("\n");
  406c5a:	4d10      	ldr	r5, [pc, #64]	; (406c9c <cmdTestDW1000+0x7c>)
  406c5c:	4628      	mov	r0, r5
  406c5e:	47a0      	blx	r4
	sprintf(buf,"SysStatus: 0x%x\n", DW1000_readSystemStatus());
  406c60:	4b0f      	ldr	r3, [pc, #60]	; (406ca0 <cmdTestDW1000+0x80>)
  406c62:	4798      	blx	r3
  406c64:	4602      	mov	r2, r0
  406c66:	460b      	mov	r3, r1
  406c68:	a804      	add	r0, sp, #16
  406c6a:	490e      	ldr	r1, [pc, #56]	; (406ca4 <cmdTestDW1000+0x84>)
  406c6c:	47b0      	blx	r6
	sendDebugString(buf);
  406c6e:	a804      	add	r0, sp, #16
  406c70:	47a0      	blx	r4
	sendDebugString("\n");
  406c72:	4628      	mov	r0, r5
  406c74:	47a0      	blx	r4
	
	
}
  406c76:	b00e      	add	sp, #56	; 0x38
  406c78:	bd70      	pop	{r4, r5, r6, pc}
  406c7a:	bf00      	nop
  406c7c:	00403b6d 	.word	0x00403b6d
  406c80:	000fffff 	.word	0x000fffff
  406c84:	00403871 	.word	0x00403871
  406c88:	20400001 	.word	0x20400001
  406c8c:	0040383d 	.word	0x0040383d
  406c90:	004133dc 	.word	0x004133dc
  406c94:	0040b9e9 	.word	0x0040b9e9
  406c98:	0040019d 	.word	0x0040019d
  406c9c:	00412f20 	.word	0x00412f20
  406ca0:	00403851 	.word	0x00403851
  406ca4:	004133f0 	.word	0x004133f0

00406ca8 <cmdDWMsend>:

void cmdDWMsend(char* tosend) {
  406ca8:	b530      	push	{r4, r5, lr}
  406caa:	b083      	sub	sp, #12
  406cac:	4605      	mov	r5, r0
	DW1000_writeTxBuffer(0,tosend,strlen(tosend));
  406cae:	4c08      	ldr	r4, [pc, #32]	; (406cd0 <cmdDWMsend+0x28>)
  406cb0:	47a0      	blx	r4
  406cb2:	9000      	str	r0, [sp, #0]
  406cb4:	2000      	movs	r0, #0
  406cb6:	462a      	mov	r2, r5
  406cb8:	17eb      	asrs	r3, r5, #31
  406cba:	4906      	ldr	r1, [pc, #24]	; (406cd4 <cmdDWMsend+0x2c>)
  406cbc:	4788      	blx	r1
	DW1000_setTxFrameControl(strlen(tosend));
  406cbe:	4628      	mov	r0, r5
  406cc0:	47a0      	blx	r4
  406cc2:	4b05      	ldr	r3, [pc, #20]	; (406cd8 <cmdDWMsend+0x30>)
  406cc4:	4798      	blx	r3
	DW1000_startTx();
  406cc6:	4b05      	ldr	r3, [pc, #20]	; (406cdc <cmdDWMsend+0x34>)
  406cc8:	4798      	blx	r3
}
  406cca:	b003      	add	sp, #12
  406ccc:	bd30      	pop	{r4, r5, pc}
  406cce:	bf00      	nop
  406cd0:	0040bd1d 	.word	0x0040bd1d
  406cd4:	00403bc9 	.word	0x00403bc9
  406cd8:	00403ba5 	.word	0x00403ba5
  406cdc:	00403be9 	.word	0x00403be9

00406ce0 <cmdOverrideLEDDWM1000>:

void cmdOverrideLEDDWM1000() {
  406ce0:	b530      	push	{r4, r5, lr}
  406ce2:	b085      	sub	sp, #20
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, 0x00000000, GPIO_MODE_LEN);
  406ce4:	2200      	movs	r2, #0
  406ce6:	2300      	movs	r3, #0
  406ce8:	e9cd 2300 	strd	r2, r3, [sp]
  406cec:	2504      	movs	r5, #4
  406cee:	9502      	str	r5, [sp, #8]
  406cf0:	2026      	movs	r0, #38	; 0x26
  406cf2:	2101      	movs	r1, #1
  406cf4:	4c0a      	ldr	r4, [pc, #40]	; (406d20 <cmdOverrideLEDDWM1000+0x40>)
  406cf6:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0x8, 0x000000F0, GPIO_MODE_LEN);
  406cf8:	22f0      	movs	r2, #240	; 0xf0
  406cfa:	2300      	movs	r3, #0
  406cfc:	e9cd 2300 	strd	r2, r3, [sp]
  406d00:	9502      	str	r5, [sp, #8]
  406d02:	2026      	movs	r0, #38	; 0x26
  406d04:	2101      	movs	r1, #1
  406d06:	2208      	movs	r2, #8
  406d08:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0xC, 0x000000FF, GPIO_MODE_LEN);
  406d0a:	22ff      	movs	r2, #255	; 0xff
  406d0c:	2300      	movs	r3, #0
  406d0e:	e9cd 2300 	strd	r2, r3, [sp]
  406d12:	9502      	str	r5, [sp, #8]
  406d14:	2026      	movs	r0, #38	; 0x26
  406d16:	2101      	movs	r1, #1
  406d18:	220c      	movs	r2, #12
  406d1a:	47a0      	blx	r4
}
  406d1c:	b005      	add	sp, #20
  406d1e:	bd30      	pop	{r4, r5, pc}
  406d20:	00403871 	.word	0x00403871

00406d24 <cmdWriteTestDW1000>:

void cmdWriteTestDW1000(uint64_t toRW) {
  406d24:	b510      	push	{r4, lr}
  406d26:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,toRW,PANADR_LEN);
  406d28:	e9cd 0100 	strd	r0, r1, [sp]
  406d2c:	2404      	movs	r4, #4
  406d2e:	9402      	str	r4, [sp, #8]
  406d30:	2003      	movs	r0, #3
  406d32:	2100      	movs	r1, #0
  406d34:	460a      	mov	r2, r1
  406d36:	4b09      	ldr	r3, [pc, #36]	; (406d5c <cmdWriteTestDW1000+0x38>)
  406d38:	4798      	blx	r3
	sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  406d3a:	2003      	movs	r0, #3
  406d3c:	2100      	movs	r1, #0
  406d3e:	460a      	mov	r2, r1
  406d40:	4623      	mov	r3, r4
  406d42:	4c07      	ldr	r4, [pc, #28]	; (406d60 <cmdWriteTestDW1000+0x3c>)
  406d44:	47a0      	blx	r4
  406d46:	4602      	mov	r2, r0
  406d48:	460b      	mov	r3, r1
  406d4a:	a804      	add	r0, sp, #16
  406d4c:	4905      	ldr	r1, [pc, #20]	; (406d64 <cmdWriteTestDW1000+0x40>)
  406d4e:	4c06      	ldr	r4, [pc, #24]	; (406d68 <cmdWriteTestDW1000+0x44>)
  406d50:	47a0      	blx	r4
	sendDebugString(buf);	
  406d52:	a804      	add	r0, sp, #16
  406d54:	4b05      	ldr	r3, [pc, #20]	; (406d6c <cmdWriteTestDW1000+0x48>)
  406d56:	4798      	blx	r3
}
  406d58:	b00e      	add	sp, #56	; 0x38
  406d5a:	bd10      	pop	{r4, pc}
  406d5c:	00403871 	.word	0x00403871
  406d60:	00403775 	.word	0x00403775
  406d64:	00413404 	.word	0x00413404
  406d68:	0040b9e9 	.word	0x0040b9e9
  406d6c:	0040019d 	.word	0x0040019d

00406d70 <cmdRelaxSvo>:

void cmdRelaxSvo(int Leg,int Svo) {
  406d70:	b570      	push	{r4, r5, r6, lr}
  406d72:	460c      	mov	r4, r1
	if(Leg == 6) {
  406d74:	2806      	cmp	r0, #6
  406d76:	d122      	bne.n	406dbe <cmdRelaxSvo+0x4e>
		relaxServo(0,Svo);
  406d78:	2000      	movs	r0, #0
  406d7a:	4d12      	ldr	r5, [pc, #72]	; (406dc4 <cmdRelaxSvo+0x54>)
  406d7c:	47a8      	blx	r5
		delay_ms(1);
  406d7e:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406d82:	4e11      	ldr	r6, [pc, #68]	; (406dc8 <cmdRelaxSvo+0x58>)
  406d84:	47b0      	blx	r6
		relaxServo(1,Svo);
  406d86:	2001      	movs	r0, #1
  406d88:	4621      	mov	r1, r4
  406d8a:	47a8      	blx	r5
		delay_ms(1);
  406d8c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406d90:	47b0      	blx	r6
		relaxServo(2,Svo);
  406d92:	2002      	movs	r0, #2
  406d94:	4621      	mov	r1, r4
  406d96:	47a8      	blx	r5
		delay_ms(1);
  406d98:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406d9c:	47b0      	blx	r6
		relaxServo(3,Svo);
  406d9e:	2003      	movs	r0, #3
  406da0:	4621      	mov	r1, r4
  406da2:	47a8      	blx	r5
		delay_ms(1);
  406da4:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406da8:	47b0      	blx	r6
		relaxServo(4,Svo);
  406daa:	2004      	movs	r0, #4
  406dac:	4621      	mov	r1, r4
  406dae:	47a8      	blx	r5
		delay_ms(1);
  406db0:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406db4:	47b0      	blx	r6
		relaxServo(5,Svo);
  406db6:	2005      	movs	r0, #5
  406db8:	4621      	mov	r1, r4
  406dba:	47a8      	blx	r5
  406dbc:	bd70      	pop	{r4, r5, r6, pc}
	}
	else relaxServo(Leg,Svo);
  406dbe:	4b01      	ldr	r3, [pc, #4]	; (406dc4 <cmdRelaxSvo+0x54>)
  406dc0:	4798      	blx	r3
  406dc2:	bd70      	pop	{r4, r5, r6, pc}
  406dc4:	0040535d 	.word	0x0040535d
  406dc8:	20400001 	.word	0x20400001

00406dcc <cmdRelaxAll>:
}

void cmdRelaxAll() {
  406dcc:	b510      	push	{r4, lr}
			//SvoA
			relaxServo(0,0);
  406dce:	2000      	movs	r0, #0
  406dd0:	4601      	mov	r1, r0
  406dd2:	4c1b      	ldr	r4, [pc, #108]	; (406e40 <cmdRelaxAll+0x74>)
  406dd4:	47a0      	blx	r4
			relaxServo(1,0);
  406dd6:	2001      	movs	r0, #1
  406dd8:	2100      	movs	r1, #0
  406dda:	47a0      	blx	r4
			relaxServo(2,0);
  406ddc:	2002      	movs	r0, #2
  406dde:	2100      	movs	r1, #0
  406de0:	47a0      	blx	r4
			relaxServo(3,0);
  406de2:	2003      	movs	r0, #3
  406de4:	2100      	movs	r1, #0
  406de6:	47a0      	blx	r4
			relaxServo(4,0);
  406de8:	2004      	movs	r0, #4
  406dea:	2100      	movs	r1, #0
  406dec:	47a0      	blx	r4
			relaxServo(5,0);
  406dee:	2005      	movs	r0, #5
  406df0:	2100      	movs	r1, #0
  406df2:	47a0      	blx	r4
			//SvoB
			relaxServo(0,1);
  406df4:	2000      	movs	r0, #0
  406df6:	2101      	movs	r1, #1
  406df8:	47a0      	blx	r4
			relaxServo(1,1);
  406dfa:	2001      	movs	r0, #1
  406dfc:	4601      	mov	r1, r0
  406dfe:	47a0      	blx	r4
			relaxServo(2,1);
  406e00:	2002      	movs	r0, #2
  406e02:	2101      	movs	r1, #1
  406e04:	47a0      	blx	r4
			relaxServo(3,1);
  406e06:	2003      	movs	r0, #3
  406e08:	2101      	movs	r1, #1
  406e0a:	47a0      	blx	r4
			relaxServo(4,1);
  406e0c:	2004      	movs	r0, #4
  406e0e:	2101      	movs	r1, #1
  406e10:	47a0      	blx	r4
			relaxServo(5,1);
  406e12:	2005      	movs	r0, #5
  406e14:	2101      	movs	r1, #1
  406e16:	47a0      	blx	r4
			//SvoC
			relaxServo(0,2);
  406e18:	2000      	movs	r0, #0
  406e1a:	2102      	movs	r1, #2
  406e1c:	47a0      	blx	r4
			relaxServo(1,2);
  406e1e:	2001      	movs	r0, #1
  406e20:	2102      	movs	r1, #2
  406e22:	47a0      	blx	r4
			relaxServo(2,2);
  406e24:	2002      	movs	r0, #2
  406e26:	4601      	mov	r1, r0
  406e28:	47a0      	blx	r4
			relaxServo(3,2);
  406e2a:	2003      	movs	r0, #3
  406e2c:	2102      	movs	r1, #2
  406e2e:	47a0      	blx	r4
			relaxServo(4,2);
  406e30:	2004      	movs	r0, #4
  406e32:	2102      	movs	r1, #2
  406e34:	47a0      	blx	r4
			relaxServo(5,2);
  406e36:	2005      	movs	r0, #5
  406e38:	2102      	movs	r1, #2
  406e3a:	47a0      	blx	r4
  406e3c:	bd10      	pop	{r4, pc}
  406e3e:	bf00      	nop
  406e40:	0040535d 	.word	0x0040535d

00406e44 <vTask1>:
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  406e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
  406e48:	484e      	ldr	r0, [pc, #312]	; (406f84 <vTask1+0x140>)
  406e4a:	4c4f      	ldr	r4, [pc, #316]	; (406f88 <vTask1+0x144>)
  406e4c:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
  406e4e:	4b4f      	ldr	r3, [pc, #316]	; (406f8c <vTask1+0x148>)
  406e50:	4798      	blx	r3
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  406e52:	484f      	ldr	r0, [pc, #316]	; (406f90 <vTask1+0x14c>)
  406e54:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406e58:	4b4e      	ldr	r3, [pc, #312]	; (406f94 <vTask1+0x150>)
  406e5a:	4798      	blx	r3
	int testCountFail = 0;
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  406e5c:	484e      	ldr	r0, [pc, #312]	; (406f98 <vTask1+0x154>)
  406e5e:	47a0      	blx	r4
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
	int testCountFail = 0;
	
	int batLowCount = 0;
  406e60:	2700      	movs	r7, #0
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  406e62:	2501      	movs	r5, #1
						pio_set(LED7);
					}
					tg = !tg;
				}
				else {
					pio_clear(LED0);	
  406e64:	4c4a      	ldr	r4, [pc, #296]	; (406f90 <vTask1+0x14c>)
  406e66:	4e4d      	ldr	r6, [pc, #308]	; (406f9c <vTask1+0x158>)
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
					pio_set(LED0);
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25 && !pio_get(PIOD,PIO_INPUT,1<<9))  batLowCount++;
  406e68:	f8df 8154 	ldr.w	r8, [pc, #340]	; 406fc0 <vTask1+0x17c>
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
  406e6c:	2d00      	cmp	r5, #0
  406e6e:	d053      	beq.n	406f18 <vTask1+0xd4>
					pio_set(LED0);
  406e70:	4620      	mov	r0, r4
  406e72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406e76:	4b47      	ldr	r3, [pc, #284]	; (406f94 <vTask1+0x150>)
  406e78:	4798      	blx	r3
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25 && !pio_get(PIOD,PIO_INPUT,1<<9))  batLowCount++;
  406e7a:	4b49      	ldr	r3, [pc, #292]	; (406fa0 <vTask1+0x15c>)
  406e7c:	69db      	ldr	r3, [r3, #28]
  406e7e:	2b00      	cmp	r3, #0
  406e80:	d17d      	bne.n	406f7e <vTask1+0x13a>
  406e82:	4b48      	ldr	r3, [pc, #288]	; (406fa4 <vTask1+0x160>)
  406e84:	4798      	blx	r3
  406e86:	eef1 7a09 	vmov.f32	s15, #25
  406e8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
  406e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406e92:	d574      	bpl.n	406f7e <vTask1+0x13a>
  406e94:	4640      	mov	r0, r8
  406e96:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
  406e9e:	4b42      	ldr	r3, [pc, #264]	; (406fa8 <vTask1+0x164>)
  406ea0:	4798      	blx	r3
  406ea2:	2800      	cmp	r0, #0
  406ea4:	d16b      	bne.n	406f7e <vTask1+0x13a>
  406ea6:	3701      	adds	r7, #1
					else batLowCount = 0;
					if(batLowCount > 10) {
  406ea8:	2f0a      	cmp	r7, #10
  406eaa:	dd33      	ble.n	406f14 <vTask1+0xd0>
						sendDebugString("********************\n");
  406eac:	f8df 9114 	ldr.w	r9, [pc, #276]	; 406fc4 <vTask1+0x180>
  406eb0:	4648      	mov	r0, r9
  406eb2:	4d35      	ldr	r5, [pc, #212]	; (406f88 <vTask1+0x144>)
  406eb4:	47a8      	blx	r5
						sendDebugString("********************\n");
  406eb6:	4648      	mov	r0, r9
  406eb8:	47a8      	blx	r5
						sendDebugString("WARNING: BAT VOLT AT CRITICAL LEVELS\n");
  406eba:	483c      	ldr	r0, [pc, #240]	; (406fac <vTask1+0x168>)
  406ebc:	47a8      	blx	r5
						sendDebugString("DISABLING SERVO WRITE OUT\n");
  406ebe:	483c      	ldr	r0, [pc, #240]	; (406fb0 <vTask1+0x16c>)
  406ec0:	47a8      	blx	r5
						sendDebugString("PLEASE DISCONNECT BATTERY NOW!\n");
  406ec2:	483c      	ldr	r0, [pc, #240]	; (406fb4 <vTask1+0x170>)
  406ec4:	47a8      	blx	r5
						sendDebugString("********************\n");
  406ec6:	4648      	mov	r0, r9
  406ec8:	47a8      	blx	r5
						sendDebugString("********************\n");
  406eca:	4648      	mov	r0, r9
  406ecc:	47a8      	blx	r5
						pio_set(PIOA,PIO_PA26);
  406ece:	4620      	mov	r0, r4
  406ed0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  406ed4:	4d2f      	ldr	r5, [pc, #188]	; (406f94 <vTask1+0x150>)
  406ed6:	47a8      	blx	r5
						
						pio_set(LED0);
  406ed8:	4620      	mov	r0, r4
  406eda:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406ede:	47a8      	blx	r5
						pio_set(LED1);
  406ee0:	4620      	mov	r0, r4
  406ee2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406ee6:	47a8      	blx	r5
						pio_set(LED2);
  406ee8:	4620      	mov	r0, r4
  406eea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406eee:	47a8      	blx	r5
						pio_set(LED3);
  406ef0:	4620      	mov	r0, r4
  406ef2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406ef6:	47a8      	blx	r5
						pio_set(LED4);
  406ef8:	482f      	ldr	r0, [pc, #188]	; (406fb8 <vTask1+0x174>)
  406efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406efe:	47a8      	blx	r5
						pio_set(LED5);
  406f00:	4620      	mov	r0, r4
  406f02:	2104      	movs	r1, #4
  406f04:	47a8      	blx	r5
						pio_set(LED6);
  406f06:	4620      	mov	r0, r4
  406f08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406f0c:	47a8      	blx	r5
						pio_set(LED7);
  406f0e:	4620      	mov	r0, r4
  406f10:	2140      	movs	r1, #64	; 0x40
  406f12:	47a8      	blx	r5
					}
					tg = !tg;
  406f14:	2500      	movs	r5, #0
  406f16:	e02e      	b.n	406f76 <vTask1+0x132>
				}
				else {
					pio_clear(LED0);	
  406f18:	4620      	mov	r0, r4
  406f1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406f1e:	47b0      	blx	r6
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25) {
  406f20:	4b1f      	ldr	r3, [pc, #124]	; (406fa0 <vTask1+0x15c>)
  406f22:	69db      	ldr	r3, [r3, #28]
  406f24:	bb33      	cbnz	r3, 406f74 <vTask1+0x130>
  406f26:	4b1f      	ldr	r3, [pc, #124]	; (406fa4 <vTask1+0x160>)
  406f28:	4798      	blx	r3
  406f2a:	eef1 7a09 	vmov.f32	s15, #25
  406f2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
  406f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406f36:	d51d      	bpl.n	406f74 <vTask1+0x130>
						pio_clear(LED0);
  406f38:	4620      	mov	r0, r4
  406f3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406f3e:	47b0      	blx	r6
						pio_clear(LED1);
  406f40:	4620      	mov	r0, r4
  406f42:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406f46:	47b0      	blx	r6
						pio_clear(LED2);
  406f48:	4620      	mov	r0, r4
  406f4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406f4e:	47b0      	blx	r6
						pio_clear(LED3);
  406f50:	4620      	mov	r0, r4
  406f52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406f56:	47b0      	blx	r6
						pio_clear(LED4);
  406f58:	4817      	ldr	r0, [pc, #92]	; (406fb8 <vTask1+0x174>)
  406f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406f5e:	47b0      	blx	r6
						pio_clear(LED5);
  406f60:	4620      	mov	r0, r4
  406f62:	2104      	movs	r1, #4
  406f64:	47b0      	blx	r6
						pio_clear(LED6);
  406f66:	4620      	mov	r0, r4
  406f68:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406f6c:	47b0      	blx	r6
						pio_clear(LED7);
  406f6e:	4620      	mov	r0, r4
  406f70:	2140      	movs	r1, #64	; 0x40
  406f72:	47b0      	blx	r6
					}
					tg = !tg;
  406f74:	2501      	movs	r5, #1
				}	
				vTaskDelay(250);
  406f76:	20fa      	movs	r0, #250	; 0xfa
  406f78:	4b10      	ldr	r3, [pc, #64]	; (406fbc <vTask1+0x178>)
  406f7a:	4798      	blx	r3
	}
  406f7c:	e776      	b.n	406e6c <vTask1+0x28>
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  406f7e:	2700      	movs	r7, #0
  406f80:	e7c8      	b.n	406f14 <vTask1+0xd0>
  406f82:	bf00      	nop
  406f84:	00413420 	.word	0x00413420
  406f88:	0040019d 	.word	0x0040019d
  406f8c:	00401ae5 	.word	0x00401ae5
  406f90:	400e0e00 	.word	0x400e0e00
  406f94:	004027bd 	.word	0x004027bd
  406f98:	00413440 	.word	0x00413440
  406f9c:	004027c1 	.word	0x004027c1
  406fa0:	2040c5f8 	.word	0x2040c5f8
  406fa4:	00405a01 	.word	0x00405a01
  406fa8:	004027c5 	.word	0x004027c5
  406fac:	00413494 	.word	0x00413494
  406fb0:	004134bc 	.word	0x004134bc
  406fb4:	004134d8 	.word	0x004134d8
  406fb8:	400e1000 	.word	0x400e1000
  406fbc:	00401d3d 	.word	0x00401d3d
  406fc0:	400e1400 	.word	0x400e1400
  406fc4:	0041347c 	.word	0x0041347c

00406fc8 <LegControlTask>:
				}	
				vTaskDelay(250);
	}
}

void LegControlTask (void* pvParameters) {
  406fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  406fca:	ed2d 8b02 	vpush	{d8}
  406fce:	b0ab      	sub	sp, #172	; 0xac
	sendDebugString("LEG CONTROL TASK INITIALIZATION - STARTED\n");
  406fd0:	484f      	ldr	r0, [pc, #316]	; (407110 <LegControlTask+0x148>)
  406fd2:	4e50      	ldr	r6, [pc, #320]	; (407114 <LegControlTask+0x14c>)
  406fd4:	47b0      	blx	r6
	
	float	ofst[7];
	XZ		xzS[7];
	angles	Ang[7];
	
	hexabot_walk.movTurn = 0;
  406fd6:	4b50      	ldr	r3, [pc, #320]	; (407118 <LegControlTask+0x150>)
  406fd8:	2200      	movs	r2, #0
  406fda:	601a      	str	r2, [r3, #0]
	hexabot_walk.movDir = 0;
  406fdc:	605a      	str	r2, [r3, #4]
	hexabot_walk.stance = 185;
  406fde:	22b9      	movs	r2, #185	; 0xb9
  406fe0:	609a      	str	r2, [r3, #8]
	hexabot_walk.hgt = 100;
  406fe2:	2264      	movs	r2, #100	; 0x64
  406fe4:	60da      	str	r2, [r3, #12]
	hexabot_walk.pup = 80;
  406fe6:	2250      	movs	r2, #80	; 0x50
  406fe8:	611a      	str	r2, [r3, #16]
	hexabot_walk.stride = 65;
  406fea:	2241      	movs	r2, #65	; 0x41
  406fec:	615a      	str	r2, [r3, #20]
	hexabot_walk.Walk_EN = 0;
  406fee:	2400      	movs	r4, #0
  406ff0:	61dc      	str	r4, [r3, #28]
	hexabot_walk.Hexabot_leg_cycle_t = 150;
  406ff2:	2296      	movs	r2, #150	; 0x96
  406ff4:	619a      	str	r2, [r3, #24]
	hexabot_walk.ret = 0;
  406ff6:	629c      	str	r4, [r3, #40]	; 0x28
	hexabot_walk.gaitIndex = 2;
  406ff8:	2702      	movs	r7, #2
  406ffa:	62df      	str	r7, [r3, #44]	; 0x2c
	
	cmdServoMan(6,0,90.00);
  406ffc:	2006      	movs	r0, #6
  406ffe:	4621      	mov	r1, r4
  407000:	225a      	movs	r2, #90	; 0x5a
  407002:	4d46      	ldr	r5, [pc, #280]	; (40711c <LegControlTask+0x154>)
  407004:	47a8      	blx	r5
	cmdServoMan(6,1,0.00);
  407006:	2006      	movs	r0, #6
  407008:	2101      	movs	r1, #1
  40700a:	4622      	mov	r2, r4
  40700c:	47a8      	blx	r5
	cmdServoMan(6,2,90.00);
  40700e:	2006      	movs	r0, #6
  407010:	4639      	mov	r1, r7
  407012:	225a      	movs	r2, #90	; 0x5a
  407014:	47a8      	blx	r5
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  407016:	4842      	ldr	r0, [pc, #264]	; (407120 <LegControlTask+0x158>)
  407018:	47b0      	blx	r6
	
	for(;;) {
		pio_set(LED7);
  40701a:	4d42      	ldr	r5, [pc, #264]	; (407124 <LegControlTask+0x15c>)
  40701c:	4e42      	ldr	r6, [pc, #264]	; (407128 <LegControlTask+0x160>)
		  
		}
		else {
			if(hexabot_walk.ret){
				if(!resting) {
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  40701e:	ed9f 8a43 	vldr	s16, [pc, #268]	; 40712c <LegControlTask+0x164>
	cmdServoMan(6,2,90.00);
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
  407022:	4628      	mov	r0, r5
  407024:	2140      	movs	r1, #64	; 0x40
  407026:	47b0      	blx	r6
		if(hexabot_walk.Walk_EN) {
  407028:	4b3b      	ldr	r3, [pc, #236]	; (407118 <LegControlTask+0x150>)
  40702a:	69db      	ldr	r3, [r3, #28]
  40702c:	2b00      	cmp	r3, #0
  40702e:	f000 808b 	beq.w	407148 <LegControlTask+0x180>
			
		switch(hexabot_walk.gaitIndex) {
  407032:	4b39      	ldr	r3, [pc, #228]	; (407118 <LegControlTask+0x150>)
  407034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407036:	2b02      	cmp	r3, #2
  407038:	d017      	beq.n	40706a <LegControlTask+0xa2>
  40703a:	dc03      	bgt.n	407044 <LegControlTask+0x7c>
  40703c:	b13b      	cbz	r3, 40704e <LegControlTask+0x86>
  40703e:	2b01      	cmp	r3, #1
  407040:	d00c      	beq.n	40705c <LegControlTask+0x94>
  407042:	e026      	b.n	407092 <LegControlTask+0xca>
  407044:	2b62      	cmp	r3, #98	; 0x62
  407046:	d017      	beq.n	407078 <LegControlTask+0xb0>
  407048:	2b63      	cmp	r3, #99	; 0x63
  40704a:	d01c      	beq.n	407086 <LegControlTask+0xbe>
  40704c:	e021      	b.n	407092 <LegControlTask+0xca>
			
			case 0:	
			Gait0(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  40704e:	a823      	add	r0, sp, #140	; 0x8c
  407050:	a915      	add	r1, sp, #84	; 0x54
  407052:	466a      	mov	r2, sp
  407054:	4b30      	ldr	r3, [pc, #192]	; (407118 <LegControlTask+0x150>)
  407056:	4c36      	ldr	r4, [pc, #216]	; (407130 <LegControlTask+0x168>)
  407058:	47a0      	blx	r4
			break;
  40705a:	e01a      	b.n	407092 <LegControlTask+0xca>
			
			case 1:
			Gait1(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  40705c:	a823      	add	r0, sp, #140	; 0x8c
  40705e:	a915      	add	r1, sp, #84	; 0x54
  407060:	466a      	mov	r2, sp
  407062:	4b2d      	ldr	r3, [pc, #180]	; (407118 <LegControlTask+0x150>)
  407064:	4c33      	ldr	r4, [pc, #204]	; (407134 <LegControlTask+0x16c>)
  407066:	47a0      	blx	r4
			break;
  407068:	e013      	b.n	407092 <LegControlTask+0xca>
			
			case 2:
			Gait2(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  40706a:	a823      	add	r0, sp, #140	; 0x8c
  40706c:	a915      	add	r1, sp, #84	; 0x54
  40706e:	466a      	mov	r2, sp
  407070:	4b29      	ldr	r3, [pc, #164]	; (407118 <LegControlTask+0x150>)
  407072:	4c31      	ldr	r4, [pc, #196]	; (407138 <LegControlTask+0x170>)
  407074:	47a0      	blx	r4
			break;
  407076:	e00c      	b.n	407092 <LegControlTask+0xca>
			
			case 98:
			sitDown(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407078:	a823      	add	r0, sp, #140	; 0x8c
  40707a:	a915      	add	r1, sp, #84	; 0x54
  40707c:	466a      	mov	r2, sp
  40707e:	4b26      	ldr	r3, [pc, #152]	; (407118 <LegControlTask+0x150>)
  407080:	4c2e      	ldr	r4, [pc, #184]	; (40713c <LegControlTask+0x174>)
  407082:	47a0      	blx	r4
			break;
  407084:	e005      	b.n	407092 <LegControlTask+0xca>
			
			case 99:
			standUp(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  407086:	a823      	add	r0, sp, #140	; 0x8c
  407088:	a915      	add	r1, sp, #84	; 0x54
  40708a:	466a      	mov	r2, sp
  40708c:	4b22      	ldr	r3, [pc, #136]	; (407118 <LegControlTask+0x150>)
  40708e:	4c2c      	ldr	r4, [pc, #176]	; (407140 <LegControlTask+0x178>)
  407090:	47a0      	blx	r4
			break;
		}
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  407092:	2000      	movs	r0, #0
  407094:	ed9d 0a00 	vldr	s0, [sp]
  407098:	eddd 0a01 	vldr	s1, [sp, #4]
  40709c:	ed9d 1a02 	vldr	s2, [sp, #8]
  4070a0:	4c28      	ldr	r4, [pc, #160]	; (407144 <LegControlTask+0x17c>)
  4070a2:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  4070a4:	2001      	movs	r0, #1
  4070a6:	ed9d 0a03 	vldr	s0, [sp, #12]
  4070aa:	eddd 0a04 	vldr	s1, [sp, #16]
  4070ae:	ed9d 1a05 	vldr	s2, [sp, #20]
  4070b2:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  4070b4:	2002      	movs	r0, #2
  4070b6:	ed9d 0a06 	vldr	s0, [sp, #24]
  4070ba:	eddd 0a07 	vldr	s1, [sp, #28]
  4070be:	ed9d 1a08 	vldr	s2, [sp, #32]
  4070c2:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  4070c4:	2003      	movs	r0, #3
  4070c6:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
  4070ca:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
  4070ce:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
  4070d2:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  4070d4:	2004      	movs	r0, #4
  4070d6:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
  4070da:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
  4070de:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
  4070e2:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  4070e4:	2005      	movs	r0, #5
  4070e6:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
  4070ea:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
  4070ee:	ed9d 1a11 	vldr	s2, [sp, #68]	; 0x44
  4070f2:	47a0      	blx	r4
		  hexabot_walk.i++;
  4070f4:	4a08      	ldr	r2, [pc, #32]	; (407118 <LegControlTask+0x150>)
  4070f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4070f8:	3301      	adds	r3, #1
  4070fa:	6253      	str	r3, [r2, #36]	; 0x24
		 hexabot_walk. ret = 1;
  4070fc:	2101      	movs	r1, #1
  4070fe:	6291      	str	r1, [r2, #40]	; 0x28
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
  407100:	6a12      	ldr	r2, [r2, #32]
  407102:	4293      	cmp	r3, r2
  407104:	f340 8149 	ble.w	40739a <LegControlTask+0x3d2>
  407108:	2200      	movs	r2, #0
  40710a:	4b03      	ldr	r3, [pc, #12]	; (407118 <LegControlTask+0x150>)
  40710c:	61da      	str	r2, [r3, #28]
  40710e:	e144      	b.n	40739a <LegControlTask+0x3d2>
  407110:	004134f8 	.word	0x004134f8
  407114:	0040019d 	.word	0x0040019d
  407118:	2040c5f8 	.word	0x2040c5f8
  40711c:	00406ad9 	.word	0x00406ad9
  407120:	00413524 	.word	0x00413524
  407124:	400e0e00 	.word	0x400e0e00
  407128:	004027bd 	.word	0x004027bd
  40712c:	00000000 	.word	0x00000000
  407130:	00404461 	.word	0x00404461
  407134:	00404b71 	.word	0x00404b71
  407138:	00404e01 	.word	0x00404e01
  40713c:	00404009 	.word	0x00404009
  407140:	00403c11 	.word	0x00403c11
  407144:	00405f55 	.word	0x00405f55
		  
		}
		else {
			if(hexabot_walk.ret){
  407148:	4b98      	ldr	r3, [pc, #608]	; (4073ac <LegControlTask+0x3e4>)
  40714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40714c:	2b00      	cmp	r3, #0
  40714e:	f000 8121 	beq.w	407394 <LegControlTask+0x3cc>
				if(!resting) {
  407152:	4b97      	ldr	r3, [pc, #604]	; (4073b0 <LegControlTask+0x3e8>)
  407154:	681b      	ldr	r3, [r3, #0]
  407156:	2b00      	cmp	r3, #0
  407158:	f040 8112 	bne.w	407380 <LegControlTask+0x3b8>
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  40715c:	4c93      	ldr	r4, [pc, #588]	; (4073ac <LegControlTask+0x3e4>)
  40715e:	edd4 7a02 	vldr	s15, [r4, #8]
  407162:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407166:	eeb0 0a41 	vmov.f32	s0, s2
  40716a:	eef0 0a48 	vmov.f32	s1, s16
  40716e:	eef0 1a48 	vmov.f32	s3, s16
  407172:	eeb0 2a48 	vmov.f32	s4, s16
  407176:	2001      	movs	r0, #1
  407178:	eef0 2a48 	vmov.f32	s5, s16
  40717c:	4f8d      	ldr	r7, [pc, #564]	; (4073b4 <LegControlTask+0x3ec>)
  40717e:	47b8      	blx	r7
  407180:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
  407184:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
		  xzS[1] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  407188:	edd4 7a02 	vldr	s15, [r4, #8]
  40718c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407190:	eeb0 0a41 	vmov.f32	s0, s2
  407194:	eef0 0a48 	vmov.f32	s1, s16
  407198:	eef0 1a48 	vmov.f32	s3, s16
  40719c:	eeb0 2a48 	vmov.f32	s4, s16
  4071a0:	2000      	movs	r0, #0
  4071a2:	eef0 2a48 	vmov.f32	s5, s16
  4071a6:	47b8      	blx	r7
  4071a8:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
  4071ac:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
		  xzS[2] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  4071b0:	edd4 7a02 	vldr	s15, [r4, #8]
  4071b4:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4071b8:	eeb0 0a41 	vmov.f32	s0, s2
  4071bc:	eef0 0a48 	vmov.f32	s1, s16
  4071c0:	eef0 1a48 	vmov.f32	s3, s16
  4071c4:	eeb0 2a48 	vmov.f32	s4, s16
  4071c8:	2001      	movs	r0, #1
  4071ca:	eef0 2a48 	vmov.f32	s5, s16
  4071ce:	47b8      	blx	r7
  4071d0:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
  4071d4:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
		  xzS[3] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  4071d8:	edd4 7a02 	vldr	s15, [r4, #8]
  4071dc:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  4071e0:	eeb0 0a41 	vmov.f32	s0, s2
  4071e4:	eef0 0a48 	vmov.f32	s1, s16
  4071e8:	eef0 1a48 	vmov.f32	s3, s16
  4071ec:	eeb0 2a48 	vmov.f32	s4, s16
  4071f0:	2000      	movs	r0, #0
  4071f2:	eef0 2a48 	vmov.f32	s5, s16
  4071f6:	47b8      	blx	r7
  4071f8:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
  4071fc:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
		  xzS[4] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  407200:	edd4 7a02 	vldr	s15, [r4, #8]
  407204:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407208:	eeb0 0a41 	vmov.f32	s0, s2
  40720c:	eef0 0a48 	vmov.f32	s1, s16
  407210:	eef0 1a48 	vmov.f32	s3, s16
  407214:	eeb0 2a48 	vmov.f32	s4, s16
  407218:	2001      	movs	r0, #1
  40721a:	eef0 2a48 	vmov.f32	s5, s16
  40721e:	47b8      	blx	r7
  407220:	ed8d 0a1d 	vstr	s0, [sp, #116]	; 0x74
  407224:	edcd 0a1e 	vstr	s1, [sp, #120]	; 0x78
		  xzS[5] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  407228:	edd4 7a02 	vldr	s15, [r4, #8]
  40722c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
  407230:	eeb0 0a41 	vmov.f32	s0, s2
  407234:	eef0 0a48 	vmov.f32	s1, s16
  407238:	eef0 1a48 	vmov.f32	s3, s16
  40723c:	eeb0 2a48 	vmov.f32	s4, s16
  407240:	2000      	movs	r0, #0
  407242:	eef0 2a48 	vmov.f32	s5, s16
  407246:	47b8      	blx	r7
  407248:	ed8d 0a1f 	vstr	s0, [sp, #124]	; 0x7c
  40724c:	edcd 0a20 	vstr	s1, [sp, #128]	; 0x80

		  Ang[0] = legAngCalc(xzS[0].X,  -hexabot_walk.hgt  ,xzS[0].Z);
  407250:	68e3      	ldr	r3, [r4, #12]
  407252:	425b      	negs	r3, r3
  407254:	ee00 3a90 	vmov	s1, r3
  407258:	ed9d 0a15 	vldr	s0, [sp, #84]	; 0x54
  40725c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  407260:	ed9d 1a16 	vldr	s2, [sp, #88]	; 0x58
  407264:	4f54      	ldr	r7, [pc, #336]	; (4073b8 <LegControlTask+0x3f0>)
  407266:	47b8      	blx	r7
  407268:	ed8d 0a00 	vstr	s0, [sp]
  40726c:	edcd 0a01 	vstr	s1, [sp, #4]
  407270:	ed8d 1a02 	vstr	s2, [sp, #8]
		  Ang[1] = legAngCalc(xzS[1].X,  -hexabot_walk.hgt  ,xzS[1].Z);
  407274:	68e3      	ldr	r3, [r4, #12]
  407276:	425b      	negs	r3, r3
  407278:	ee00 3a90 	vmov	s1, r3
  40727c:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
  407280:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  407284:	ed9d 1a18 	vldr	s2, [sp, #96]	; 0x60
  407288:	47b8      	blx	r7
  40728a:	ed8d 0a03 	vstr	s0, [sp, #12]
  40728e:	edcd 0a04 	vstr	s1, [sp, #16]
  407292:	ed8d 1a05 	vstr	s2, [sp, #20]
		  Ang[2] = legAngCalc(xzS[2].X,  -hexabot_walk.hgt  ,xzS[2].Z);
  407296:	68e3      	ldr	r3, [r4, #12]
  407298:	425b      	negs	r3, r3
  40729a:	ee00 3a90 	vmov	s1, r3
  40729e:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
  4072a2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  4072a6:	ed9d 1a1a 	vldr	s2, [sp, #104]	; 0x68
  4072aa:	47b8      	blx	r7
  4072ac:	ed8d 0a06 	vstr	s0, [sp, #24]
  4072b0:	edcd 0a07 	vstr	s1, [sp, #28]
  4072b4:	ed8d 1a08 	vstr	s2, [sp, #32]
		  Ang[3] = legAngCalc(xzS[3].X,  -hexabot_walk.hgt  ,xzS[3].Z);
  4072b8:	68e3      	ldr	r3, [r4, #12]
  4072ba:	425b      	negs	r3, r3
  4072bc:	ee00 3a90 	vmov	s1, r3
  4072c0:	ed9d 0a1b 	vldr	s0, [sp, #108]	; 0x6c
  4072c4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  4072c8:	ed9d 1a1c 	vldr	s2, [sp, #112]	; 0x70
  4072cc:	47b8      	blx	r7
  4072ce:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
  4072d2:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
  4072d6:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
		  Ang[4] = legAngCalc(xzS[4].X,  -hexabot_walk.hgt  ,xzS[4].Z);
  4072da:	68e3      	ldr	r3, [r4, #12]
  4072dc:	425b      	negs	r3, r3
  4072de:	ee00 3a90 	vmov	s1, r3
  4072e2:	ed9d 0a1d 	vldr	s0, [sp, #116]	; 0x74
  4072e6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  4072ea:	ed9d 1a1e 	vldr	s2, [sp, #120]	; 0x78
  4072ee:	47b8      	blx	r7
  4072f0:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
  4072f4:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
  4072f8:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
		  Ang[5] = legAngCalc(xzS[5].X,  -hexabot_walk.hgt  ,xzS[5].Z);
  4072fc:	68e3      	ldr	r3, [r4, #12]
  4072fe:	425b      	negs	r3, r3
  407300:	ee00 3a90 	vmov	s1, r3
  407304:	ed9d 0a1f 	vldr	s0, [sp, #124]	; 0x7c
  407308:	eef8 0ae0 	vcvt.f32.s32	s1, s1
  40730c:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
  407310:	47b8      	blx	r7
  407312:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
  407316:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
  40731a:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  40731e:	2000      	movs	r0, #0
  407320:	ed9d 0a00 	vldr	s0, [sp]
  407324:	eddd 0a01 	vldr	s1, [sp, #4]
  407328:	ed9d 1a02 	vldr	s2, [sp, #8]
  40732c:	4c23      	ldr	r4, [pc, #140]	; (4073bc <LegControlTask+0x3f4>)
  40732e:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  407330:	2001      	movs	r0, #1
  407332:	ed9d 0a03 	vldr	s0, [sp, #12]
  407336:	eddd 0a04 	vldr	s1, [sp, #16]
  40733a:	ed9d 1a05 	vldr	s2, [sp, #20]
  40733e:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  407340:	2002      	movs	r0, #2
  407342:	ed9d 0a06 	vldr	s0, [sp, #24]
  407346:	eddd 0a07 	vldr	s1, [sp, #28]
  40734a:	ed9d 1a08 	vldr	s2, [sp, #32]
  40734e:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  407350:	2003      	movs	r0, #3
  407352:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
  407356:	eddd 0a0a 	vldr	s1, [sp, #40]	; 0x28
  40735a:	ed9d 1a0b 	vldr	s2, [sp, #44]	; 0x2c
  40735e:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  407360:	2004      	movs	r0, #4
  407362:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
  407366:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
  40736a:	ed9d 1a0e 	vldr	s2, [sp, #56]	; 0x38
  40736e:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  407370:	2005      	movs	r0, #5
  407372:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
  407376:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
  40737a:	ed9d 1a11 	vldr	s2, [sp, #68]	; 0x44
  40737e:	47a0      	blx	r4
				}
		  hexabot_walk.ret = 0;
  407380:	4b0a      	ldr	r3, [pc, #40]	; (4073ac <LegControlTask+0x3e4>)
  407382:	2200      	movs	r2, #0
  407384:	629a      	str	r2, [r3, #40]	; 0x28
		  if(hexabot_walk.gaitIndex == 99 || hexabot_walk.gaitIndex == 98) hexabot_walk.gaitIndex = 2;
  407386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407388:	3b62      	subs	r3, #98	; 0x62
  40738a:	2b01      	cmp	r3, #1
  40738c:	d802      	bhi.n	407394 <LegControlTask+0x3cc>
  40738e:	2202      	movs	r2, #2
  407390:	4b06      	ldr	r3, [pc, #24]	; (4073ac <LegControlTask+0x3e4>)
  407392:	62da      	str	r2, [r3, #44]	; 0x2c
		}
			hexabot_walk.i = 0;
  407394:	2200      	movs	r2, #0
  407396:	4b05      	ldr	r3, [pc, #20]	; (4073ac <LegControlTask+0x3e4>)
  407398:	625a      	str	r2, [r3, #36]	; 0x24
			//return to idle state (legs in middle) 
		}
		pio_clear(LED7);
  40739a:	4628      	mov	r0, r5
  40739c:	2140      	movs	r1, #64	; 0x40
  40739e:	4b08      	ldr	r3, [pc, #32]	; (4073c0 <LegControlTask+0x3f8>)
  4073a0:	4798      	blx	r3
		  vTaskDelay(5);
  4073a2:	2005      	movs	r0, #5
  4073a4:	4b07      	ldr	r3, [pc, #28]	; (4073c4 <LegControlTask+0x3fc>)
  4073a6:	4798      	blx	r3
	}
  4073a8:	e63b      	b.n	407022 <LegControlTask+0x5a>
  4073aa:	bf00      	nop
  4073ac:	2040c5f8 	.word	0x2040c5f8
  4073b0:	2040c4b8 	.word	0x2040c4b8
  4073b4:	00405ae1 	.word	0x00405ae1
  4073b8:	00405d29 	.word	0x00405d29
  4073bc:	00405f55 	.word	0x00405f55
  4073c0:	004027c1 	.word	0x004027c1
  4073c4:	00401d3d 	.word	0x00401d3d

004073c8 <CLItask>:
}

void CLItask(void* pvParameters) {
  4073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4073cc:	b085      	sub	sp, #20
	sendDebugString("CLI TASK INITIALIZATION - STARTED\n");
  4073ce:	4880      	ldr	r0, [pc, #512]	; (4075d0 <CLItask+0x208>)
  4073d0:	4c80      	ldr	r4, [pc, #512]	; (4075d4 <CLItask+0x20c>)
  4073d2:	47a0      	blx	r4
	memset(CLIbuf,0,100);
  4073d4:	4880      	ldr	r0, [pc, #512]	; (4075d8 <CLItask+0x210>)
  4073d6:	2100      	movs	r1, #0
  4073d8:	2264      	movs	r2, #100	; 0x64
  4073da:	4b80      	ldr	r3, [pc, #512]	; (4075dc <CLItask+0x214>)
  4073dc:	4798      	blx	r3
	char* BaseCmd;
	sendDebugString("CLI TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  4073de:	4880      	ldr	r0, [pc, #512]	; (4075e0 <CLItask+0x218>)
  4073e0:	47a0      	blx	r4
	sendDebugString("COMMAND LINE STARTED\n");
  4073e2:	4880      	ldr	r0, [pc, #512]	; (4075e4 <CLItask+0x21c>)
  4073e4:	47a0      	blx	r4
	sendDebugString("\n");
  4073e6:	4d80      	ldr	r5, [pc, #512]	; (4075e8 <CLItask+0x220>)
  4073e8:	4628      	mov	r0, r5
  4073ea:	47a0      	blx	r4
	sendDebugString("\n");
  4073ec:	4628      	mov	r0, r5
  4073ee:	47a0      	blx	r4
	UARTsem = xSemaphoreCreateBinary();
  4073f0:	2001      	movs	r0, #1
  4073f2:	2100      	movs	r1, #0
  4073f4:	2203      	movs	r2, #3
  4073f6:	4b7d      	ldr	r3, [pc, #500]	; (4075ec <CLItask+0x224>)
  4073f8:	4798      	blx	r3
  4073fa:	4b7d      	ldr	r3, [pc, #500]	; (4075f0 <CLItask+0x228>)
  4073fc:	6018      	str	r0, [r3, #0]
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4073fe:	487d      	ldr	r0, [pc, #500]	; (4075f4 <CLItask+0x22c>)
  407400:	47a0      	blx	r4
	for(;;) {
			if(xSemaphoreTake(UARTsem,0xFFFF) == pdTRUE) {
  407402:	4d7b      	ldr	r5, [pc, #492]	; (4075f0 <CLItask+0x228>)
  407404:	4c7c      	ldr	r4, [pc, #496]	; (4075f8 <CLItask+0x230>)
  407406:	6828      	ldr	r0, [r5, #0]
  407408:	2100      	movs	r1, #0
  40740a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40740e:	460b      	mov	r3, r1
  407410:	47a0      	blx	r4
  407412:	2801      	cmp	r0, #1
  407414:	d1f7      	bne.n	407406 <CLItask+0x3e>
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  407416:	4b79      	ldr	r3, [pc, #484]	; (4075fc <CLItask+0x234>)
  407418:	681b      	ldr	r3, [r3, #0]
  40741a:	4a6f      	ldr	r2, [pc, #444]	; (4075d8 <CLItask+0x210>)
  40741c:	4413      	add	r3, r2
  40741e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  407422:	2b0a      	cmp	r3, #10
  407424:	d1ef      	bne.n	407406 <CLItask+0x3e>
			CLIbufIndex=0;
  407426:	2200      	movs	r2, #0
  407428:	4b74      	ldr	r3, [pc, #464]	; (4075fc <CLItask+0x234>)
  40742a:	601a      	str	r2, [r3, #0]
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  40742c:	486a      	ldr	r0, [pc, #424]	; (4075d8 <CLItask+0x210>)
  40742e:	4974      	ldr	r1, [pc, #464]	; (407600 <CLItask+0x238>)
  407430:	4b74      	ldr	r3, [pc, #464]	; (407604 <CLItask+0x23c>)
  407432:	4798      	blx	r3
  407434:	4607      	mov	r7, r0
			
			if(UART_Ctrl_EN) {
  407436:	4b74      	ldr	r3, [pc, #464]	; (407608 <CLItask+0x240>)
  407438:	681b      	ldr	r3, [r3, #0]
  40743a:	b183      	cbz	r3, 40745e <CLItask+0x96>
				UART_Ctrl_EN = 0;
  40743c:	2300      	movs	r3, #0
  40743e:	4a72      	ldr	r2, [pc, #456]	; (407608 <CLItask+0x240>)
  407440:	6013      	str	r3, [r2, #0]
				UART_Ctrl_Cnt = 0;
  407442:	4a72      	ldr	r2, [pc, #456]	; (40760c <CLItask+0x244>)
  407444:	6013      	str	r3, [r2, #0]
				pio_clear(LED6);
  407446:	4872      	ldr	r0, [pc, #456]	; (407610 <CLItask+0x248>)
  407448:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40744c:	4b71      	ldr	r3, [pc, #452]	; (407614 <CLItask+0x24c>)
  40744e:	4798      	blx	r3
				cmdInterp(CLIbuf,UART_Ctrl_Max,&hexabot_walk);
  407450:	4861      	ldr	r0, [pc, #388]	; (4075d8 <CLItask+0x210>)
  407452:	4b71      	ldr	r3, [pc, #452]	; (407618 <CLItask+0x250>)
  407454:	6819      	ldr	r1, [r3, #0]
  407456:	4a71      	ldr	r2, [pc, #452]	; (40761c <CLItask+0x254>)
  407458:	4b71      	ldr	r3, [pc, #452]	; (407620 <CLItask+0x258>)
  40745a:	4798      	blx	r3
  40745c:	e27b      	b.n	407956 <CLItask+0x58e>
			}
			else { 
			if(!strcmp(BaseCmd,"led")) cmdLED( atoi(strtok(NULL," "))  , atoi(strtok(NULL," ")) );
  40745e:	4971      	ldr	r1, [pc, #452]	; (407624 <CLItask+0x25c>)
  407460:	4b71      	ldr	r3, [pc, #452]	; (407628 <CLItask+0x260>)
  407462:	4798      	blx	r3
  407464:	b980      	cbnz	r0, 407488 <CLItask+0xc0>
  407466:	f8df 9198 	ldr.w	r9, [pc, #408]	; 407600 <CLItask+0x238>
  40746a:	4649      	mov	r1, r9
  40746c:	4e65      	ldr	r6, [pc, #404]	; (407604 <CLItask+0x23c>)
  40746e:	47b0      	blx	r6
  407470:	4f6e      	ldr	r7, [pc, #440]	; (40762c <CLItask+0x264>)
  407472:	47b8      	blx	r7
  407474:	4682      	mov	sl, r0
  407476:	2000      	movs	r0, #0
  407478:	4649      	mov	r1, r9
  40747a:	47b0      	blx	r6
  40747c:	47b8      	blx	r7
  40747e:	4601      	mov	r1, r0
  407480:	4650      	mov	r0, sl
  407482:	4b6b      	ldr	r3, [pc, #428]	; (407630 <CLItask+0x268>)
  407484:	4798      	blx	r3
  407486:	e263      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"manusvo"))  cmdServoMan(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  407488:	4638      	mov	r0, r7
  40748a:	496a      	ldr	r1, [pc, #424]	; (407634 <CLItask+0x26c>)
  40748c:	4b66      	ldr	r3, [pc, #408]	; (407628 <CLItask+0x260>)
  40748e:	4798      	blx	r3
  407490:	b9b0      	cbnz	r0, 4074c0 <CLItask+0xf8>
  407492:	f8df 916c 	ldr.w	r9, [pc, #364]	; 407600 <CLItask+0x238>
  407496:	4649      	mov	r1, r9
  407498:	4e5a      	ldr	r6, [pc, #360]	; (407604 <CLItask+0x23c>)
  40749a:	47b0      	blx	r6
  40749c:	4f63      	ldr	r7, [pc, #396]	; (40762c <CLItask+0x264>)
  40749e:	47b8      	blx	r7
  4074a0:	4683      	mov	fp, r0
  4074a2:	2000      	movs	r0, #0
  4074a4:	4649      	mov	r1, r9
  4074a6:	47b0      	blx	r6
  4074a8:	47b8      	blx	r7
  4074aa:	4682      	mov	sl, r0
  4074ac:	2000      	movs	r0, #0
  4074ae:	4649      	mov	r1, r9
  4074b0:	47b0      	blx	r6
  4074b2:	47b8      	blx	r7
  4074b4:	4602      	mov	r2, r0
  4074b6:	4658      	mov	r0, fp
  4074b8:	4651      	mov	r1, sl
  4074ba:	4b5f      	ldr	r3, [pc, #380]	; (407638 <CLItask+0x270>)
  4074bc:	4798      	blx	r3
  4074be:	e247      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"batvolt\n")) cmdBatVolt();
  4074c0:	4638      	mov	r0, r7
  4074c2:	495e      	ldr	r1, [pc, #376]	; (40763c <CLItask+0x274>)
  4074c4:	4b58      	ldr	r3, [pc, #352]	; (407628 <CLItask+0x260>)
  4074c6:	4798      	blx	r3
  4074c8:	b910      	cbnz	r0, 4074d0 <CLItask+0x108>
  4074ca:	4b5d      	ldr	r3, [pc, #372]	; (407640 <CLItask+0x278>)
  4074cc:	4798      	blx	r3
  4074ce:	e23f      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"dumpimg")) dumpFrame( strtol(strtok(NULL," "),NULL,16));
  4074d0:	4638      	mov	r0, r7
  4074d2:	495c      	ldr	r1, [pc, #368]	; (407644 <CLItask+0x27c>)
  4074d4:	4b54      	ldr	r3, [pc, #336]	; (407628 <CLItask+0x260>)
  4074d6:	4798      	blx	r3
  4074d8:	b948      	cbnz	r0, 4074ee <CLItask+0x126>
  4074da:	4949      	ldr	r1, [pc, #292]	; (407600 <CLItask+0x238>)
  4074dc:	4b49      	ldr	r3, [pc, #292]	; (407604 <CLItask+0x23c>)
  4074de:	4798      	blx	r3
  4074e0:	2100      	movs	r1, #0
  4074e2:	2210      	movs	r2, #16
  4074e4:	4b58      	ldr	r3, [pc, #352]	; (407648 <CLItask+0x280>)
  4074e6:	4798      	blx	r3
  4074e8:	4b58      	ldr	r3, [pc, #352]	; (40764c <CLItask+0x284>)
  4074ea:	4798      	blx	r3
  4074ec:	e230      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"walk")) cmdWalk(atoi(strtok(NULL," ")));
  4074ee:	4638      	mov	r0, r7
  4074f0:	4957      	ldr	r1, [pc, #348]	; (407650 <CLItask+0x288>)
  4074f2:	4b4d      	ldr	r3, [pc, #308]	; (407628 <CLItask+0x260>)
  4074f4:	4798      	blx	r3
  4074f6:	b938      	cbnz	r0, 407508 <CLItask+0x140>
  4074f8:	4941      	ldr	r1, [pc, #260]	; (407600 <CLItask+0x238>)
  4074fa:	4b42      	ldr	r3, [pc, #264]	; (407604 <CLItask+0x23c>)
  4074fc:	4798      	blx	r3
  4074fe:	4b4b      	ldr	r3, [pc, #300]	; (40762c <CLItask+0x264>)
  407500:	4798      	blx	r3
  407502:	4b54      	ldr	r3, [pc, #336]	; (407654 <CLItask+0x28c>)
  407504:	4798      	blx	r3
  407506:	e223      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"walkcytime")) hexabot_walk.Hexabot_leg_cycle_t = atoi(strtok(NULL," "));
  407508:	4638      	mov	r0, r7
  40750a:	4953      	ldr	r1, [pc, #332]	; (407658 <CLItask+0x290>)
  40750c:	4b46      	ldr	r3, [pc, #280]	; (407628 <CLItask+0x260>)
  40750e:	4798      	blx	r3
  407510:	b938      	cbnz	r0, 407522 <CLItask+0x15a>
  407512:	493b      	ldr	r1, [pc, #236]	; (407600 <CLItask+0x238>)
  407514:	4b3b      	ldr	r3, [pc, #236]	; (407604 <CLItask+0x23c>)
  407516:	4798      	blx	r3
  407518:	4b44      	ldr	r3, [pc, #272]	; (40762c <CLItask+0x264>)
  40751a:	4798      	blx	r3
  40751c:	4b3f      	ldr	r3, [pc, #252]	; (40761c <CLItask+0x254>)
  40751e:	6198      	str	r0, [r3, #24]
  407520:	e216      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"verbose")) VerboseMode = atoi(strtok(NULL," "));
  407522:	4638      	mov	r0, r7
  407524:	494d      	ldr	r1, [pc, #308]	; (40765c <CLItask+0x294>)
  407526:	4b40      	ldr	r3, [pc, #256]	; (407628 <CLItask+0x260>)
  407528:	4798      	blx	r3
  40752a:	b938      	cbnz	r0, 40753c <CLItask+0x174>
  40752c:	4934      	ldr	r1, [pc, #208]	; (407600 <CLItask+0x238>)
  40752e:	4b35      	ldr	r3, [pc, #212]	; (407604 <CLItask+0x23c>)
  407530:	4798      	blx	r3
  407532:	4b3e      	ldr	r3, [pc, #248]	; (40762c <CLItask+0x264>)
  407534:	4798      	blx	r3
  407536:	4b4a      	ldr	r3, [pc, #296]	; (407660 <CLItask+0x298>)
  407538:	6018      	str	r0, [r3, #0]
  40753a:	e209      	b.n	407950 <CLItask+0x588>
			
			//DWM THINGS
			else if(!strcmp(BaseCmd,"DWM-test\n")) cmdTestDW1000();
  40753c:	4638      	mov	r0, r7
  40753e:	4949      	ldr	r1, [pc, #292]	; (407664 <CLItask+0x29c>)
  407540:	4b39      	ldr	r3, [pc, #228]	; (407628 <CLItask+0x260>)
  407542:	4798      	blx	r3
  407544:	b910      	cbnz	r0, 40754c <CLItask+0x184>
  407546:	4b48      	ldr	r3, [pc, #288]	; (407668 <CLItask+0x2a0>)
  407548:	4798      	blx	r3
  40754a:	e201      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"DWM-send")) cmdDWMsend(strtok(NULL," "));
  40754c:	4638      	mov	r0, r7
  40754e:	4947      	ldr	r1, [pc, #284]	; (40766c <CLItask+0x2a4>)
  407550:	4b35      	ldr	r3, [pc, #212]	; (407628 <CLItask+0x260>)
  407552:	4798      	blx	r3
  407554:	b928      	cbnz	r0, 407562 <CLItask+0x19a>
  407556:	492a      	ldr	r1, [pc, #168]	; (407600 <CLItask+0x238>)
  407558:	4b2a      	ldr	r3, [pc, #168]	; (407604 <CLItask+0x23c>)
  40755a:	4798      	blx	r3
  40755c:	4b44      	ldr	r3, [pc, #272]	; (407670 <CLItask+0x2a8>)
  40755e:	4798      	blx	r3
  407560:	e1f6      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"DWM-orLed\n")) cmdOverrideLEDDWM1000();
  407562:	4638      	mov	r0, r7
  407564:	4943      	ldr	r1, [pc, #268]	; (407674 <CLItask+0x2ac>)
  407566:	4b30      	ldr	r3, [pc, #192]	; (407628 <CLItask+0x260>)
  407568:	4798      	blx	r3
  40756a:	b910      	cbnz	r0, 407572 <CLItask+0x1aa>
  40756c:	4b42      	ldr	r3, [pc, #264]	; (407678 <CLItask+0x2b0>)
  40756e:	4798      	blx	r3
  407570:	e1ee      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"DWM-RWtest")) cmdWriteTestDW1000( strtol(strtok(NULL," "),NULL,16));
  407572:	4638      	mov	r0, r7
  407574:	4941      	ldr	r1, [pc, #260]	; (40767c <CLItask+0x2b4>)
  407576:	4b2c      	ldr	r3, [pc, #176]	; (407628 <CLItask+0x260>)
  407578:	4798      	blx	r3
  40757a:	b950      	cbnz	r0, 407592 <CLItask+0x1ca>
  40757c:	4920      	ldr	r1, [pc, #128]	; (407600 <CLItask+0x238>)
  40757e:	4b21      	ldr	r3, [pc, #132]	; (407604 <CLItask+0x23c>)
  407580:	4798      	blx	r3
  407582:	2100      	movs	r1, #0
  407584:	2210      	movs	r2, #16
  407586:	4b30      	ldr	r3, [pc, #192]	; (407648 <CLItask+0x280>)
  407588:	4798      	blx	r3
  40758a:	17c1      	asrs	r1, r0, #31
  40758c:	4b3c      	ldr	r3, [pc, #240]	; (407680 <CLItask+0x2b8>)
  40758e:	4798      	blx	r3
  407590:	e1de      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"DWM-Init\n")) DW1000_initialise();
  407592:	4638      	mov	r0, r7
  407594:	493b      	ldr	r1, [pc, #236]	; (407684 <CLItask+0x2bc>)
  407596:	4b24      	ldr	r3, [pc, #144]	; (407628 <CLItask+0x260>)
  407598:	4798      	blx	r3
  40759a:	b910      	cbnz	r0, 4075a2 <CLItask+0x1da>
  40759c:	4b3a      	ldr	r3, [pc, #232]	; (407688 <CLItask+0x2c0>)
  40759e:	4798      	blx	r3
  4075a0:	e1d6      	b.n	407950 <CLItask+0x588>
			//END OF DWM THINGS
			
			
			
			else if(!strcmp(BaseCmd,"camdtsh")) cam_dif_tsh = atoi(strtok(NULL," "));
  4075a2:	4638      	mov	r0, r7
  4075a4:	4939      	ldr	r1, [pc, #228]	; (40768c <CLItask+0x2c4>)
  4075a6:	4b20      	ldr	r3, [pc, #128]	; (407628 <CLItask+0x260>)
  4075a8:	4798      	blx	r3
  4075aa:	b938      	cbnz	r0, 4075bc <CLItask+0x1f4>
  4075ac:	4914      	ldr	r1, [pc, #80]	; (407600 <CLItask+0x238>)
  4075ae:	4b15      	ldr	r3, [pc, #84]	; (407604 <CLItask+0x23c>)
  4075b0:	4798      	blx	r3
  4075b2:	4b1e      	ldr	r3, [pc, #120]	; (40762c <CLItask+0x264>)
  4075b4:	4798      	blx	r3
  4075b6:	4b36      	ldr	r3, [pc, #216]	; (407690 <CLItask+0x2c8>)
  4075b8:	6018      	str	r0, [r3, #0]
  4075ba:	e1c9      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"memtest\n")) SdramCheck();
  4075bc:	4638      	mov	r0, r7
  4075be:	4935      	ldr	r1, [pc, #212]	; (407694 <CLItask+0x2cc>)
  4075c0:	4b19      	ldr	r3, [pc, #100]	; (407628 <CLItask+0x260>)
  4075c2:	4798      	blx	r3
  4075c4:	2800      	cmp	r0, #0
  4075c6:	d169      	bne.n	40769c <CLItask+0x2d4>
  4075c8:	4b33      	ldr	r3, [pc, #204]	; (407698 <CLItask+0x2d0>)
  4075ca:	4798      	blx	r3
  4075cc:	e1c0      	b.n	407950 <CLItask+0x588>
  4075ce:	bf00      	nop
  4075d0:	0041356c 	.word	0x0041356c
  4075d4:	0040019d 	.word	0x0040019d
  4075d8:	2040c628 	.word	0x2040c628
  4075dc:	0040b91d 	.word	0x0040b91d
  4075e0:	00413590 	.word	0x00413590
  4075e4:	004135d0 	.word	0x004135d0
  4075e8:	00412f20 	.word	0x00412f20
  4075ec:	00401119 	.word	0x00401119
  4075f0:	2040c4e0 	.word	0x2040c4e0
  4075f4:	004135e8 	.word	0x004135e8
  4075f8:	00401551 	.word	0x00401551
  4075fc:	2040c4d4 	.word	0x2040c4d4
  407600:	0041360c 	.word	0x0041360c
  407604:	0040cd31 	.word	0x0040cd31
  407608:	2040c4bc 	.word	0x2040c4bc
  40760c:	2040c4cc 	.word	0x2040c4cc
  407610:	400e0e00 	.word	0x400e0e00
  407614:	004027c1 	.word	0x004027c1
  407618:	2040c4d0 	.word	0x2040c4d0
  40761c:	2040c5f8 	.word	0x2040c5f8
  407620:	004068c9 	.word	0x004068c9
  407624:	00413610 	.word	0x00413610
  407628:	0040ba49 	.word	0x0040ba49
  40762c:	0040b1cd 	.word	0x0040b1cd
  407630:	00406935 	.word	0x00406935
  407634:	00413614 	.word	0x00413614
  407638:	00406ad9 	.word	0x00406ad9
  40763c:	0041361c 	.word	0x0041361c
  407640:	00406bd1 	.word	0x00406bd1
  407644:	00413628 	.word	0x00413628
  407648:	0040cec1 	.word	0x0040cec1
  40764c:	00405a7d 	.word	0x00405a7d
  407650:	00413630 	.word	0x00413630
  407654:	00406c0d 	.word	0x00406c0d
  407658:	00413638 	.word	0x00413638
  40765c:	00413644 	.word	0x00413644
  407660:	2040c4c8 	.word	0x2040c4c8
  407664:	0041364c 	.word	0x0041364c
  407668:	00406c21 	.word	0x00406c21
  40766c:	00413658 	.word	0x00413658
  407670:	00406ca9 	.word	0x00406ca9
  407674:	00413664 	.word	0x00413664
  407678:	00406ce1 	.word	0x00406ce1
  40767c:	00413670 	.word	0x00413670
  407680:	00406d25 	.word	0x00406d25
  407684:	0041367c 	.word	0x0041367c
  407688:	00403979 	.word	0x00403979
  40768c:	00413688 	.word	0x00413688
  407690:	204000a8 	.word	0x204000a8
  407694:	00413690 	.word	0x00413690
  407698:	00405079 	.word	0x00405079
			
			else if(!strcmp(BaseCmd,"DWM-clrStatus\n")) DW1000_writeReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0xFFFFFFFF, SYS_STATUS_LEN);
  40769c:	4638      	mov	r0, r7
  40769e:	497f      	ldr	r1, [pc, #508]	; (40789c <CLItask+0x4d4>)
  4076a0:	4b7f      	ldr	r3, [pc, #508]	; (4078a0 <CLItask+0x4d8>)
  4076a2:	4798      	blx	r3
  4076a4:	b960      	cbnz	r0, 4076c0 <CLItask+0x2f8>
  4076a6:	f04f 32ff 	mov.w	r2, #4294967295
  4076aa:	2300      	movs	r3, #0
  4076ac:	e9cd 2300 	strd	r2, r3, [sp]
  4076b0:	2305      	movs	r3, #5
  4076b2:	9302      	str	r3, [sp, #8]
  4076b4:	200f      	movs	r0, #15
  4076b6:	2100      	movs	r1, #0
  4076b8:	460a      	mov	r2, r1
  4076ba:	4b7a      	ldr	r3, [pc, #488]	; (4078a4 <CLItask+0x4dc>)
  4076bc:	4798      	blx	r3
  4076be:	e147      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"svoCal\n")) calibServos(SvoCal);
  4076c0:	4638      	mov	r0, r7
  4076c2:	4979      	ldr	r1, [pc, #484]	; (4078a8 <CLItask+0x4e0>)
  4076c4:	4b76      	ldr	r3, [pc, #472]	; (4078a0 <CLItask+0x4d8>)
  4076c6:	4798      	blx	r3
  4076c8:	b918      	cbnz	r0, 4076d2 <CLItask+0x30a>
  4076ca:	4878      	ldr	r0, [pc, #480]	; (4078ac <CLItask+0x4e4>)
  4076cc:	4b78      	ldr	r3, [pc, #480]	; (4078b0 <CLItask+0x4e8>)
  4076ce:	4798      	blx	r3
  4076d0:	e13e      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"svoCalSpec")) calibServoSpec(SvoCal,atoi(strtok(NULL," ")),atoi(strtok(NULL," ")));
  4076d2:	4638      	mov	r0, r7
  4076d4:	4977      	ldr	r1, [pc, #476]	; (4078b4 <CLItask+0x4ec>)
  4076d6:	4b72      	ldr	r3, [pc, #456]	; (4078a0 <CLItask+0x4d8>)
  4076d8:	4798      	blx	r3
  4076da:	b990      	cbnz	r0, 407702 <CLItask+0x33a>
  4076dc:	f8df 920c 	ldr.w	r9, [pc, #524]	; 4078ec <CLItask+0x524>
  4076e0:	4649      	mov	r1, r9
  4076e2:	f8df 820c 	ldr.w	r8, [pc, #524]	; 4078f0 <CLItask+0x528>
  4076e6:	47c0      	blx	r8
  4076e8:	4f73      	ldr	r7, [pc, #460]	; (4078b8 <CLItask+0x4f0>)
  4076ea:	47b8      	blx	r7
  4076ec:	4682      	mov	sl, r0
  4076ee:	2000      	movs	r0, #0
  4076f0:	4649      	mov	r1, r9
  4076f2:	47c0      	blx	r8
  4076f4:	47b8      	blx	r7
  4076f6:	4602      	mov	r2, r0
  4076f8:	486c      	ldr	r0, [pc, #432]	; (4078ac <CLItask+0x4e4>)
  4076fa:	4651      	mov	r1, sl
  4076fc:	4b6f      	ldr	r3, [pc, #444]	; (4078bc <CLItask+0x4f4>)
  4076fe:	4798      	blx	r3
  407700:	e126      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"surprise\n")) surprise();
  407702:	4638      	mov	r0, r7
  407704:	496e      	ldr	r1, [pc, #440]	; (4078c0 <CLItask+0x4f8>)
  407706:	4b66      	ldr	r3, [pc, #408]	; (4078a0 <CLItask+0x4d8>)
  407708:	4798      	blx	r3
  40770a:	b910      	cbnz	r0, 407712 <CLItask+0x34a>
  40770c:	4b6d      	ldr	r3, [pc, #436]	; (4078c4 <CLItask+0x4fc>)
  40770e:	4798      	blx	r3
  407710:	e11e      	b.n	407950 <CLItask+0x588>
			
			//walk patern settings
			else if(!strcmp(BaseCmd,"relaxSvo")) cmdRelaxSvo(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  407712:	4638      	mov	r0, r7
  407714:	496c      	ldr	r1, [pc, #432]	; (4078c8 <CLItask+0x500>)
  407716:	4b62      	ldr	r3, [pc, #392]	; (4078a0 <CLItask+0x4d8>)
  407718:	4798      	blx	r3
  40771a:	b988      	cbnz	r0, 407740 <CLItask+0x378>
  40771c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 4078ec <CLItask+0x524>
  407720:	4649      	mov	r1, r9
  407722:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 4078f0 <CLItask+0x528>
  407726:	47c0      	blx	r8
  407728:	4f63      	ldr	r7, [pc, #396]	; (4078b8 <CLItask+0x4f0>)
  40772a:	47b8      	blx	r7
  40772c:	4682      	mov	sl, r0
  40772e:	2000      	movs	r0, #0
  407730:	4649      	mov	r1, r9
  407732:	47c0      	blx	r8
  407734:	47b8      	blx	r7
  407736:	4601      	mov	r1, r0
  407738:	4650      	mov	r0, sl
  40773a:	4b64      	ldr	r3, [pc, #400]	; (4078cc <CLItask+0x504>)
  40773c:	4798      	blx	r3
  40773e:	e107      	b.n	407950 <CLItask+0x588>
			
			else if(!strcmp(BaseCmd,"StandUp\n")) {
  407740:	4638      	mov	r0, r7
  407742:	4963      	ldr	r1, [pc, #396]	; (4078d0 <CLItask+0x508>)
  407744:	4b56      	ldr	r3, [pc, #344]	; (4078a0 <CLItask+0x4d8>)
  407746:	4798      	blx	r3
  407748:	b958      	cbnz	r0, 407762 <CLItask+0x39a>
				hexabot_walk.gaitIndex = 99;
  40774a:	4b62      	ldr	r3, [pc, #392]	; (4078d4 <CLItask+0x50c>)
  40774c:	2263      	movs	r2, #99	; 0x63
  40774e:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  407750:	2200      	movs	r2, #0
  407752:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  407754:	2164      	movs	r1, #100	; 0x64
  407756:	6219      	str	r1, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  407758:	2101      	movs	r1, #1
  40775a:	61d9      	str	r1, [r3, #28]
				resting = 0;
  40775c:	4b5e      	ldr	r3, [pc, #376]	; (4078d8 <CLItask+0x510>)
  40775e:	601a      	str	r2, [r3, #0]
  407760:	e0f6      	b.n	407950 <CLItask+0x588>
			}
			
			else if(!strcmp(BaseCmd,"SitDown\n")) {
  407762:	4638      	mov	r0, r7
  407764:	495d      	ldr	r1, [pc, #372]	; (4078dc <CLItask+0x514>)
  407766:	4b4e      	ldr	r3, [pc, #312]	; (4078a0 <CLItask+0x4d8>)
  407768:	4798      	blx	r3
  40776a:	b958      	cbnz	r0, 407784 <CLItask+0x3bc>
				hexabot_walk.gaitIndex = 98;
  40776c:	4b59      	ldr	r3, [pc, #356]	; (4078d4 <CLItask+0x50c>)
  40776e:	2262      	movs	r2, #98	; 0x62
  407770:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  407772:	2200      	movs	r2, #0
  407774:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  407776:	2264      	movs	r2, #100	; 0x64
  407778:	621a      	str	r2, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  40777a:	2201      	movs	r2, #1
  40777c:	61da      	str	r2, [r3, #28]
				resting = 1;
  40777e:	4b56      	ldr	r3, [pc, #344]	; (4078d8 <CLItask+0x510>)
  407780:	601a      	str	r2, [r3, #0]
  407782:	e0e5      	b.n	407950 <CLItask+0x588>
				
			}
			
			else if(!strcmp(BaseCmd,"relaxAll\n")) cmdRelaxAll();
  407784:	4638      	mov	r0, r7
  407786:	4956      	ldr	r1, [pc, #344]	; (4078e0 <CLItask+0x518>)
  407788:	4b45      	ldr	r3, [pc, #276]	; (4078a0 <CLItask+0x4d8>)
  40778a:	4798      	blx	r3
  40778c:	b910      	cbnz	r0, 407794 <CLItask+0x3cc>
  40778e:	4b55      	ldr	r3, [pc, #340]	; (4078e4 <CLItask+0x51c>)
  407790:	4798      	blx	r3
  407792:	e0dd      	b.n	407950 <CLItask+0x588>
			//walk patern settings
			
			else if(!strcmp(BaseCmd,"gaitTurn")){
  407794:	4638      	mov	r0, r7
  407796:	4954      	ldr	r1, [pc, #336]	; (4078e8 <CLItask+0x520>)
  407798:	4b41      	ldr	r3, [pc, #260]	; (4078a0 <CLItask+0x4d8>)
  40779a:	4798      	blx	r3
  40779c:	b950      	cbnz	r0, 4077b4 <CLItask+0x3ec>
				hexabot_walk.movTurn = atoff(strtok(NULL," "));
  40779e:	4953      	ldr	r1, [pc, #332]	; (4078ec <CLItask+0x524>)
  4077a0:	4b53      	ldr	r3, [pc, #332]	; (4078f0 <CLItask+0x528>)
  4077a2:	4798      	blx	r3
  4077a4:	4b53      	ldr	r3, [pc, #332]	; (4078f4 <CLItask+0x52c>)
  4077a6:	4798      	blx	r3
  4077a8:	4b4a      	ldr	r3, [pc, #296]	; (4078d4 <CLItask+0x50c>)
  4077aa:	ed83 0a00 	vstr	s0, [r3]
				hexabot_walk.ret = 1;
  4077ae:	2201      	movs	r2, #1
  4077b0:	629a      	str	r2, [r3, #40]	; 0x28
  4077b2:	e0cd      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitDir")){
  4077b4:	4638      	mov	r0, r7
  4077b6:	4950      	ldr	r1, [pc, #320]	; (4078f8 <CLItask+0x530>)
  4077b8:	4b39      	ldr	r3, [pc, #228]	; (4078a0 <CLItask+0x4d8>)
  4077ba:	4798      	blx	r3
  4077bc:	b950      	cbnz	r0, 4077d4 <CLItask+0x40c>
				hexabot_walk.movDir = atoff(strtok(NULL," "));
  4077be:	494b      	ldr	r1, [pc, #300]	; (4078ec <CLItask+0x524>)
  4077c0:	4b4b      	ldr	r3, [pc, #300]	; (4078f0 <CLItask+0x528>)
  4077c2:	4798      	blx	r3
  4077c4:	4b4b      	ldr	r3, [pc, #300]	; (4078f4 <CLItask+0x52c>)
  4077c6:	4798      	blx	r3
  4077c8:	4b42      	ldr	r3, [pc, #264]	; (4078d4 <CLItask+0x50c>)
  4077ca:	ed83 0a01 	vstr	s0, [r3, #4]
				hexabot_walk.ret = 1;
  4077ce:	2201      	movs	r2, #1
  4077d0:	629a      	str	r2, [r3, #40]	; 0x28
  4077d2:	e0bd      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitStance")){
  4077d4:	4638      	mov	r0, r7
  4077d6:	4949      	ldr	r1, [pc, #292]	; (4078fc <CLItask+0x534>)
  4077d8:	4b31      	ldr	r3, [pc, #196]	; (4078a0 <CLItask+0x4d8>)
  4077da:	4798      	blx	r3
  4077dc:	b948      	cbnz	r0, 4077f2 <CLItask+0x42a>
				hexabot_walk.stance = atoi(strtok(NULL," "));
  4077de:	4943      	ldr	r1, [pc, #268]	; (4078ec <CLItask+0x524>)
  4077e0:	4b43      	ldr	r3, [pc, #268]	; (4078f0 <CLItask+0x528>)
  4077e2:	4798      	blx	r3
  4077e4:	4b34      	ldr	r3, [pc, #208]	; (4078b8 <CLItask+0x4f0>)
  4077e6:	4798      	blx	r3
  4077e8:	4b3a      	ldr	r3, [pc, #232]	; (4078d4 <CLItask+0x50c>)
  4077ea:	6098      	str	r0, [r3, #8]
				hexabot_walk.ret = 1;
  4077ec:	2201      	movs	r2, #1
  4077ee:	629a      	str	r2, [r3, #40]	; 0x28
  4077f0:	e0ae      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitHgt")){
  4077f2:	4638      	mov	r0, r7
  4077f4:	4942      	ldr	r1, [pc, #264]	; (407900 <CLItask+0x538>)
  4077f6:	4b2a      	ldr	r3, [pc, #168]	; (4078a0 <CLItask+0x4d8>)
  4077f8:	4798      	blx	r3
  4077fa:	b948      	cbnz	r0, 407810 <CLItask+0x448>
				hexabot_walk.hgt = atoi(strtok(NULL," "));
  4077fc:	493b      	ldr	r1, [pc, #236]	; (4078ec <CLItask+0x524>)
  4077fe:	4b3c      	ldr	r3, [pc, #240]	; (4078f0 <CLItask+0x528>)
  407800:	4798      	blx	r3
  407802:	4b2d      	ldr	r3, [pc, #180]	; (4078b8 <CLItask+0x4f0>)
  407804:	4798      	blx	r3
  407806:	4b33      	ldr	r3, [pc, #204]	; (4078d4 <CLItask+0x50c>)
  407808:	60d8      	str	r0, [r3, #12]
				hexabot_walk.ret = 1;
  40780a:	2201      	movs	r2, #1
  40780c:	629a      	str	r2, [r3, #40]	; 0x28
  40780e:	e09f      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitPup")){
  407810:	4638      	mov	r0, r7
  407812:	493c      	ldr	r1, [pc, #240]	; (407904 <CLItask+0x53c>)
  407814:	4b22      	ldr	r3, [pc, #136]	; (4078a0 <CLItask+0x4d8>)
  407816:	4798      	blx	r3
  407818:	b948      	cbnz	r0, 40782e <CLItask+0x466>
				hexabot_walk.pup = atoi(strtok(NULL," "));
  40781a:	4934      	ldr	r1, [pc, #208]	; (4078ec <CLItask+0x524>)
  40781c:	4b34      	ldr	r3, [pc, #208]	; (4078f0 <CLItask+0x528>)
  40781e:	4798      	blx	r3
  407820:	4b25      	ldr	r3, [pc, #148]	; (4078b8 <CLItask+0x4f0>)
  407822:	4798      	blx	r3
  407824:	4b2b      	ldr	r3, [pc, #172]	; (4078d4 <CLItask+0x50c>)
  407826:	6118      	str	r0, [r3, #16]
				hexabot_walk.ret = 1;
  407828:	2201      	movs	r2, #1
  40782a:	629a      	str	r2, [r3, #40]	; 0x28
  40782c:	e090      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitStride")){
  40782e:	4638      	mov	r0, r7
  407830:	4935      	ldr	r1, [pc, #212]	; (407908 <CLItask+0x540>)
  407832:	4b1b      	ldr	r3, [pc, #108]	; (4078a0 <CLItask+0x4d8>)
  407834:	4798      	blx	r3
  407836:	b948      	cbnz	r0, 40784c <CLItask+0x484>
				hexabot_walk.stride = atoi(strtok(NULL," "));
  407838:	492c      	ldr	r1, [pc, #176]	; (4078ec <CLItask+0x524>)
  40783a:	4b2d      	ldr	r3, [pc, #180]	; (4078f0 <CLItask+0x528>)
  40783c:	4798      	blx	r3
  40783e:	4b1e      	ldr	r3, [pc, #120]	; (4078b8 <CLItask+0x4f0>)
  407840:	4798      	blx	r3
  407842:	4b24      	ldr	r3, [pc, #144]	; (4078d4 <CLItask+0x50c>)
  407844:	6158      	str	r0, [r3, #20]
				hexabot_walk.ret = 1;
  407846:	2201      	movs	r2, #1
  407848:	629a      	str	r2, [r3, #40]	; 0x28
  40784a:	e081      	b.n	407950 <CLItask+0x588>
			}
			else if(!strcmp(BaseCmd,"gaitStyle")){
  40784c:	4638      	mov	r0, r7
  40784e:	492f      	ldr	r1, [pc, #188]	; (40790c <CLItask+0x544>)
  407850:	4b13      	ldr	r3, [pc, #76]	; (4078a0 <CLItask+0x4d8>)
  407852:	4798      	blx	r3
  407854:	b948      	cbnz	r0, 40786a <CLItask+0x4a2>
				hexabot_walk.gaitIndex = atoi(strtok(NULL," "));
  407856:	4925      	ldr	r1, [pc, #148]	; (4078ec <CLItask+0x524>)
  407858:	4b25      	ldr	r3, [pc, #148]	; (4078f0 <CLItask+0x528>)
  40785a:	4798      	blx	r3
  40785c:	4b16      	ldr	r3, [pc, #88]	; (4078b8 <CLItask+0x4f0>)
  40785e:	4798      	blx	r3
  407860:	4b1c      	ldr	r3, [pc, #112]	; (4078d4 <CLItask+0x50c>)
  407862:	62d8      	str	r0, [r3, #44]	; 0x2c
				hexabot_walk.ret = 1;
  407864:	2201      	movs	r2, #1
  407866:	629a      	str	r2, [r3, #40]	; 0x28
  407868:	e072      	b.n	407950 <CLItask+0x588>
			}
			
			else if(!strcmp(BaseCmd,"svoinhib")) {
  40786a:	4638      	mov	r0, r7
  40786c:	4928      	ldr	r1, [pc, #160]	; (407910 <CLItask+0x548>)
  40786e:	4b0c      	ldr	r3, [pc, #48]	; (4078a0 <CLItask+0x4d8>)
  407870:	4798      	blx	r3
  407872:	2800      	cmp	r0, #0
  407874:	d154      	bne.n	407920 <CLItask+0x558>
				if(atoi(strtok(NULL," "))) pio_set(PIOA,PIO_PA26);
  407876:	491d      	ldr	r1, [pc, #116]	; (4078ec <CLItask+0x524>)
  407878:	4b1d      	ldr	r3, [pc, #116]	; (4078f0 <CLItask+0x528>)
  40787a:	4798      	blx	r3
  40787c:	4b0e      	ldr	r3, [pc, #56]	; (4078b8 <CLItask+0x4f0>)
  40787e:	4798      	blx	r3
  407880:	b128      	cbz	r0, 40788e <CLItask+0x4c6>
  407882:	4824      	ldr	r0, [pc, #144]	; (407914 <CLItask+0x54c>)
  407884:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407888:	4b23      	ldr	r3, [pc, #140]	; (407918 <CLItask+0x550>)
  40788a:	4798      	blx	r3
  40788c:	e060      	b.n	407950 <CLItask+0x588>
				else pio_clear(PIOA,PIO_PA26);
  40788e:	4821      	ldr	r0, [pc, #132]	; (407914 <CLItask+0x54c>)
  407890:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  407894:	4b21      	ldr	r3, [pc, #132]	; (40791c <CLItask+0x554>)
  407896:	4798      	blx	r3
  407898:	e05a      	b.n	407950 <CLItask+0x588>
  40789a:	bf00      	nop
  40789c:	0041369c 	.word	0x0041369c
  4078a0:	0040ba49 	.word	0x0040ba49
  4078a4:	00403871 	.word	0x00403871
  4078a8:	004136ac 	.word	0x004136ac
  4078ac:	20400018 	.word	0x20400018
  4078b0:	004066ed 	.word	0x004066ed
  4078b4:	004136b4 	.word	0x004136b4
  4078b8:	0040b1cd 	.word	0x0040b1cd
  4078bc:	004064f5 	.word	0x004064f5
  4078c0:	004136c0 	.word	0x004136c0
  4078c4:	00406851 	.word	0x00406851
  4078c8:	004136cc 	.word	0x004136cc
  4078cc:	00406d71 	.word	0x00406d71
  4078d0:	004136d8 	.word	0x004136d8
  4078d4:	2040c5f8 	.word	0x2040c5f8
  4078d8:	2040c4b8 	.word	0x2040c4b8
  4078dc:	004136e4 	.word	0x004136e4
  4078e0:	004136f0 	.word	0x004136f0
  4078e4:	00406dcd 	.word	0x00406dcd
  4078e8:	004136fc 	.word	0x004136fc
  4078ec:	0041360c 	.word	0x0041360c
  4078f0:	0040cd31 	.word	0x0040cd31
  4078f4:	0040b1c5 	.word	0x0040b1c5
  4078f8:	00413708 	.word	0x00413708
  4078fc:	00413710 	.word	0x00413710
  407900:	0041371c 	.word	0x0041371c
  407904:	00413724 	.word	0x00413724
  407908:	0041372c 	.word	0x0041372c
  40790c:	00413738 	.word	0x00413738
  407910:	00413744 	.word	0x00413744
  407914:	400e0e00 	.word	0x400e0e00
  407918:	004027bd 	.word	0x004027bd
  40791c:	004027c1 	.word	0x004027c1
			}
			
			//controller command
			else if(!strcmp(BaseCmd,"ctrlCmd")) {
  407920:	4638      	mov	r0, r7
  407922:	4910      	ldr	r1, [pc, #64]	; (407964 <CLItask+0x59c>)
  407924:	4b10      	ldr	r3, [pc, #64]	; (407968 <CLItask+0x5a0>)
  407926:	4798      	blx	r3
  407928:	b978      	cbnz	r0, 40794a <CLItask+0x582>
				UART_Ctrl_EN = 1;
  40792a:	2201      	movs	r2, #1
  40792c:	4b0f      	ldr	r3, [pc, #60]	; (40796c <CLItask+0x5a4>)
  40792e:	601a      	str	r2, [r3, #0]
				UART_Ctrl_Max = atoi(strtok(NULL," "));
  407930:	490f      	ldr	r1, [pc, #60]	; (407970 <CLItask+0x5a8>)
  407932:	4b10      	ldr	r3, [pc, #64]	; (407974 <CLItask+0x5ac>)
  407934:	4798      	blx	r3
  407936:	4b10      	ldr	r3, [pc, #64]	; (407978 <CLItask+0x5b0>)
  407938:	4798      	blx	r3
  40793a:	4b10      	ldr	r3, [pc, #64]	; (40797c <CLItask+0x5b4>)
  40793c:	6018      	str	r0, [r3, #0]
				pio_set(LED6);
  40793e:	4810      	ldr	r0, [pc, #64]	; (407980 <CLItask+0x5b8>)
  407940:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407944:	4b0f      	ldr	r3, [pc, #60]	; (407984 <CLItask+0x5bc>)
  407946:	4798      	blx	r3
  407948:	e002      	b.n	407950 <CLItask+0x588>
			}
			
			else sendDebugString("ERROR: Command not found\n");
  40794a:	480f      	ldr	r0, [pc, #60]	; (407988 <CLItask+0x5c0>)
  40794c:	4b0f      	ldr	r3, [pc, #60]	; (40798c <CLItask+0x5c4>)
  40794e:	4798      	blx	r3
			
			sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  407950:	480f      	ldr	r0, [pc, #60]	; (407990 <CLItask+0x5c8>)
  407952:	4b0e      	ldr	r3, [pc, #56]	; (40798c <CLItask+0x5c4>)
  407954:	4798      	blx	r3
			}
			memset(CLIbuf,0,100);
  407956:	480f      	ldr	r0, [pc, #60]	; (407994 <CLItask+0x5cc>)
  407958:	2100      	movs	r1, #0
  40795a:	2264      	movs	r2, #100	; 0x64
  40795c:	4b0e      	ldr	r3, [pc, #56]	; (407998 <CLItask+0x5d0>)
  40795e:	4798      	blx	r3
  407960:	e551      	b.n	407406 <CLItask+0x3e>
  407962:	bf00      	nop
  407964:	00413750 	.word	0x00413750
  407968:	0040ba49 	.word	0x0040ba49
  40796c:	2040c4bc 	.word	0x2040c4bc
  407970:	0041360c 	.word	0x0041360c
  407974:	0040cd31 	.word	0x0040cd31
  407978:	0040b1cd 	.word	0x0040b1cd
  40797c:	2040c4d0 	.word	0x2040c4d0
  407980:	400e0e00 	.word	0x400e0e00
  407984:	004027bd 	.word	0x004027bd
  407988:	00413758 	.word	0x00413758
  40798c:	0040019d 	.word	0x0040019d
  407990:	004135e8 	.word	0x004135e8
  407994:	2040c628 	.word	0x2040c628
  407998:	0040b91d 	.word	0x0040b91d
  40799c:	00000000 	.word	0x00000000

004079a0 <ImageProTask>:
			}
		}
	}
}

void ImageProTask(void* pvParams) {
  4079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079a4:	ed2d 8b04 	vpush	{d8-d9}
  4079a8:	b083      	sub	sp, #12
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - STARTED\n");
  4079aa:	485b      	ldr	r0, [pc, #364]	; (407b18 <ImageProTask+0x178>)
  4079ac:	4c5b      	ldr	r4, [pc, #364]	; (407b1c <ImageProTask+0x17c>)
  4079ae:	47a0      	blx	r4
	
	ISIsem = xSemaphoreCreateBinary();
  4079b0:	2001      	movs	r0, #1
  4079b2:	2100      	movs	r1, #0
  4079b4:	2203      	movs	r2, #3
  4079b6:	4b5a      	ldr	r3, [pc, #360]	; (407b20 <ImageProTask+0x180>)
  4079b8:	4798      	blx	r3
  4079ba:	4b5a      	ldr	r3, [pc, #360]	; (407b24 <ImageProTask+0x184>)
  4079bc:	6018      	str	r0, [r3, #0]
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  4079be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  4079c2:	4b59      	ldr	r3, [pc, #356]	; (407b28 <ImageProTask+0x188>)
  4079c4:	62da      	str	r2, [r3, #44]	; 0x2c

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4079c6:	4b59      	ldr	r3, [pc, #356]	; (407b2c <ImageProTask+0x18c>)
  4079c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4079cc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4079d0:	21e0      	movs	r1, #224	; 0xe0
  4079d2:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4079d6:	605a      	str	r2, [r3, #4]
	isi_enable_interrupt(ISI,1<<16|1<<17);
	NVIC_ClearPendingIRQ(ISI_IRQn);
	NVIC_SetPriority(ISI_IRQn,7);
	NVIC_EnableIRQ(ISI_IRQn);
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
  4079d8:	4855      	ldr	r0, [pc, #340]	; (407b30 <ImageProTask+0x190>)
  4079da:	47a0      	blx	r4
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
  4079dc:	4b55      	ldr	r3, [pc, #340]	; (407b34 <ImageProTask+0x194>)
  4079de:	681d      	ldr	r5, [r3, #0]
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  4079e0:	4f50      	ldr	r7, [pc, #320]	; (407b24 <ImageProTask+0x184>)
  4079e2:	4e55      	ldr	r6, [pc, #340]	; (407b38 <ImageProTask+0x198>)
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  4079e4:	ed9f 9b48 	vldr	d9, [pc, #288]	; 407b08 <ImageProTask+0x168>
  4079e8:	ed9f 8b49 	vldr	d8, [pc, #292]	; 407b10 <ImageProTask+0x170>
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  4079ec:	2400      	movs	r4, #0
  4079ee:	6838      	ldr	r0, [r7, #0]
  4079f0:	4621      	mov	r1, r4
  4079f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4079f6:	4623      	mov	r3, r4
  4079f8:	47b0      	blx	r6
  4079fa:	2801      	cmp	r0, #1
  4079fc:	d1f7      	bne.n	4079ee <ImageProTask+0x4e>
				//do dif here	
				pio_set(LED3);
  4079fe:	484f      	ldr	r0, [pc, #316]	; (407b3c <ImageProTask+0x19c>)
  407a00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407a04:	4b4e      	ldr	r3, [pc, #312]	; (407b40 <ImageProTask+0x1a0>)
  407a06:	4798      	blx	r3
				diffPix=0;
  407a08:	2200      	movs	r2, #0
  407a0a:	4b4e      	ldr	r3, [pc, #312]	; (407b44 <ImageProTask+0x1a4>)
  407a0c:	601a      	str	r2, [r3, #0]
  407a0e:	f04f 40e2 	mov.w	r0, #1895825408	; 0x71000000
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a12:	f8df 814c 	ldr.w	r8, [pc, #332]	; 407b60 <ImageProTask+0x1c0>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
						}
						else dif1[i] = 0x0000;
  407a16:	4691      	mov	r9, r2
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
  407a18:	469c      	mov	ip, r3
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  407a1a:	f8df e148 	ldr.w	lr, [pc, #328]	; 407b64 <ImageProTask+0x1c4>
  407a1e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
					tempframe0 = frame0[i];
  407a22:	881a      	ldrh	r2, [r3, #0]
  407a24:	b292      	uxth	r2, r2
  407a26:	f100 410f 	add.w	r1, r0, #2399141888	; 0x8f000000
					tempframe1 = frame1[i];
  407a2a:	5a6b      	ldrh	r3, [r5, r1]
  407a2c:	b29b      	uxth	r3, r3
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a2e:	f8d8 a000 	ldr.w	sl, [r8]
  407a32:	0adc      	lsrs	r4, r3, #11
  407a34:	ebc4 24d2 	rsb	r4, r4, r2, lsr #11
  407a38:	4554      	cmp	r4, sl
  407a3a:	dc08      	bgt.n	407a4e <ImageProTask+0xae>
  407a3c:	f403 64fc 	and.w	r4, r3, #2016	; 0x7e0
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  407a40:	f3c2 1b45 	ubfx	fp, r2, #5, #6
  407a44:	ebab 1464 	sub.w	r4, fp, r4, asr #5
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a48:	45a2      	cmp	sl, r4
  407a4a:	db10      	blt.n	407a6e <ImageProTask+0xce>
  407a4c:	e007      	b.n	407a5e <ImageProTask+0xbe>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  407a4e:	f3c3 1345 	ubfx	r3, r3, #5, #6
  407a52:	f3c2 1445 	ubfx	r4, r2, #5, #6
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a56:	1b1b      	subs	r3, r3, r4
  407a58:	bf18      	it	ne
  407a5a:	2301      	movne	r3, #1
  407a5c:	e015      	b.n	407a8a <ImageProTask+0xea>
  407a5e:	f003 0b1f 	and.w	fp, r3, #31
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  407a62:	2a1e      	cmp	r2, #30
  407a64:	bf8c      	ite	hi
  407a66:	2400      	movhi	r4, #0
  407a68:	f00b 0401 	andls.w	r4, fp, #1
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  407a6c:	b12c      	cbz	r4, 407a7a <ImageProTask+0xda>
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a6e:	4053      	eors	r3, r2
  407a70:	f013 031f 	ands.w	r3, r3, #31
  407a74:	bf18      	it	ne
  407a76:	2301      	movne	r3, #1
  407a78:	e007      	b.n	407a8a <ImageProTask+0xea>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  407a7a:	f002 041f 	and.w	r4, r2, #31
  407a7e:	ebcb 0304 	rsb	r3, fp, r4
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407a82:	459a      	cmp	sl, r3
  407a84:	bfac      	ite	ge
  407a86:	2300      	movge	r3, #0
  407a88:	2301      	movlt	r3, #1
  407a8a:	b133      	cbz	r3, 407a9a <ImageProTask+0xfa>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
  407a8c:	8002      	strh	r2, [r0, #0]
							diffPix++;
  407a8e:	f8dc 3000 	ldr.w	r3, [ip]
  407a92:	3301      	adds	r3, #1
  407a94:	f8cc 3000 	str.w	r3, [ip]
  407a98:	e001      	b.n	407a9e <ImageProTask+0xfe>
						}
						else dif1[i] = 0x0000;
  407a9a:	f8a0 9000 	strh.w	r9, [r0]
						//for(int d =0;d<20;d++) ((volatile uint16_t*)(0x7F000000))[0] = 0x0000; //for(int d =0;d<50;d++)	asm volatile ("nop");
						//((volatile uint8_t*)frame1)[2*i] = (tempframe0&0xFF00)>>8;
						//((volatile uint8_t*)frame1)[2*i+1] = tempframe0&0x00FF;
						frame1[i] = tempframe0;
  407a9e:	526a      	strh	r2, [r5, r1]
  407aa0:	3002      	adds	r0, #2
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  407aa2:	4570      	cmp	r0, lr
  407aa4:	d1bb      	bne.n	407a1e <ImageProTask+0x7e>
						frame1[i] = tempframe0;
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
  407aa6:	4b28      	ldr	r3, [pc, #160]	; (407b48 <ImageProTask+0x1a8>)
  407aa8:	681b      	ldr	r3, [r3, #0]
  407aaa:	b323      	cbz	r3, 407af6 <ImageProTask+0x156>
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  407aac:	4b25      	ldr	r3, [pc, #148]	; (407b44 <ImageProTask+0x1a4>)
  407aae:	f8d3 8000 	ldr.w	r8, [r3]
  407ab2:	4c26      	ldr	r4, [pc, #152]	; (407b4c <ImageProTask+0x1ac>)
  407ab4:	ee07 8a90 	vmov	s15, r8
  407ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  407abc:	ee17 0a90 	vmov	r0, s15
  407ac0:	4b23      	ldr	r3, [pc, #140]	; (407b50 <ImageProTask+0x1b0>)
  407ac2:	4798      	blx	r3
  407ac4:	4602      	mov	r2, r0
  407ac6:	460b      	mov	r3, r1
  407ac8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 407b68 <ImageProTask+0x1c8>
  407acc:	47e0      	blx	ip
  407ace:	ec53 2b19 	vmov	r2, r3, d9
  407ad2:	f8df c098 	ldr.w	ip, [pc, #152]	; 407b6c <ImageProTask+0x1cc>
  407ad6:	47e0      	blx	ip
  407ad8:	ec53 2b18 	vmov	r2, r3, d8
  407adc:	f8df c090 	ldr.w	ip, [pc, #144]	; 407b70 <ImageProTask+0x1d0>
  407ae0:	47e0      	blx	ip
  407ae2:	e9cd 0100 	strd	r0, r1, [sp]
  407ae6:	4620      	mov	r0, r4
  407ae8:	491a      	ldr	r1, [pc, #104]	; (407b54 <ImageProTask+0x1b4>)
  407aea:	4642      	mov	r2, r8
  407aec:	4b1a      	ldr	r3, [pc, #104]	; (407b58 <ImageProTask+0x1b8>)
  407aee:	4798      	blx	r3
					sendDebugString(buf);
  407af0:	4620      	mov	r0, r4
  407af2:	4b0a      	ldr	r3, [pc, #40]	; (407b1c <ImageProTask+0x17c>)
  407af4:	4798      	blx	r3
				}		
				pio_clear(LED3);
  407af6:	4811      	ldr	r0, [pc, #68]	; (407b3c <ImageProTask+0x19c>)
  407af8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407afc:	4b17      	ldr	r3, [pc, #92]	; (407b5c <ImageProTask+0x1bc>)
  407afe:	4798      	blx	r3
  407b00:	e774      	b.n	4079ec <ImageProTask+0x4c>
  407b02:	bf00      	nop
  407b04:	f3af 8000 	nop.w
  407b08:	00000000 	.word	0x00000000
  407b0c:	40f2c000 	.word	0x40f2c000
  407b10:	00000000 	.word	0x00000000
  407b14:	40590000 	.word	0x40590000
  407b18:	00413774 	.word	0x00413774
  407b1c:	0040019d 	.word	0x0040019d
  407b20:	00401119 	.word	0x00401119
  407b24:	2040c4c0 	.word	0x2040c4c0
  407b28:	4004c000 	.word	0x4004c000
  407b2c:	e000e100 	.word	0xe000e100
  407b30:	004137a8 	.word	0x004137a8
  407b34:	2040c6a0 	.word	0x2040c6a0
  407b38:	00401551 	.word	0x00401551
  407b3c:	400e0e00 	.word	0x400e0e00
  407b40:	004027bd 	.word	0x004027bd
  407b44:	2040c4d8 	.word	0x2040c4d8
  407b48:	2040c4c8 	.word	0x2040c4c8
  407b4c:	2040c68c 	.word	0x2040c68c
  407b50:	0040aabd 	.word	0x0040aabd
  407b54:	004137dc 	.word	0x004137dc
  407b58:	0040b9e9 	.word	0x0040b9e9
  407b5c:	004027c1 	.word	0x004027c1
  407b60:	204000a8 	.word	0x204000a8
  407b64:	71025800 	.word	0x71025800
  407b68:	0040a801 	.word	0x0040a801
  407b6c:	0040adb9 	.word	0x0040adb9
  407b70:	0040ab65 	.word	0x0040ab65

00407b74 <main>:
//semaphores!
SemaphoreHandle_t ISIsem = NULL;
SemaphoreHandle_t UARTsem = NULL;

int main (void)
{
  407b74:	b570      	push	{r4, r5, r6, lr}
  407b76:	b084      	sub	sp, #16
		
	
	board_init();
  407b78:	4b22      	ldr	r3, [pc, #136]	; (407c04 <main+0x90>)
  407b7a:	4798      	blx	r3
	sendDebugString("BOARD INITIALIZATION - FINISHED\n");
  407b7c:	4822      	ldr	r0, [pc, #136]	; (407c08 <main+0x94>)
  407b7e:	4d23      	ldr	r5, [pc, #140]	; (407c0c <main+0x98>)
  407b80:	47a8      	blx	r5
	intl_frame = (uint16_t*)malloc(240*320*2); //assign
  407b82:	f44f 3016 	mov.w	r0, #153600	; 0x25800
  407b86:	4b22      	ldr	r3, [pc, #136]	; (407c10 <main+0x9c>)
  407b88:	4798      	blx	r3
  407b8a:	4b22      	ldr	r3, [pc, #136]	; (407c14 <main+0xa0>)
  407b8c:	6018      	str	r0, [r3, #0]
	//SvoCal = (float*)malloc(sizeof(float)*2*18);
	
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	
	sendDebugString("RTOS TASK INITIALIZATION - STARTED\n");
  407b8e:	4822      	ldr	r0, [pc, #136]	; (407c18 <main+0xa4>)
  407b90:	47a8      	blx	r5
	
	xTaskCreate(vTask1,"TASK1",400,NULL,10,NULL);
  407b92:	230a      	movs	r3, #10
  407b94:	9300      	str	r3, [sp, #0]
  407b96:	2400      	movs	r4, #0
  407b98:	9401      	str	r4, [sp, #4]
  407b9a:	9402      	str	r4, [sp, #8]
  407b9c:	9403      	str	r4, [sp, #12]
  407b9e:	481f      	ldr	r0, [pc, #124]	; (407c1c <main+0xa8>)
  407ba0:	491f      	ldr	r1, [pc, #124]	; (407c20 <main+0xac>)
  407ba2:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407ba6:	4623      	mov	r3, r4
  407ba8:	4e1e      	ldr	r6, [pc, #120]	; (407c24 <main+0xb0>)
  407baa:	47b0      	blx	r6
	xTaskCreate(LegControlTask,"LEGCTRLTASK",1600,NULL,4,NULL);
  407bac:	2304      	movs	r3, #4
  407bae:	9300      	str	r3, [sp, #0]
  407bb0:	9401      	str	r4, [sp, #4]
  407bb2:	9402      	str	r4, [sp, #8]
  407bb4:	9403      	str	r4, [sp, #12]
  407bb6:	481c      	ldr	r0, [pc, #112]	; (407c28 <main+0xb4>)
  407bb8:	491c      	ldr	r1, [pc, #112]	; (407c2c <main+0xb8>)
  407bba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  407bbe:	4623      	mov	r3, r4
  407bc0:	47b0      	blx	r6
	xTaskCreate(ImageProTask,"IMGTASK",400,NULL,3,NULL);
  407bc2:	2303      	movs	r3, #3
  407bc4:	9300      	str	r3, [sp, #0]
  407bc6:	9401      	str	r4, [sp, #4]
  407bc8:	9402      	str	r4, [sp, #8]
  407bca:	9403      	str	r4, [sp, #12]
  407bcc:	4818      	ldr	r0, [pc, #96]	; (407c30 <main+0xbc>)
  407bce:	4919      	ldr	r1, [pc, #100]	; (407c34 <main+0xc0>)
  407bd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407bd4:	4623      	mov	r3, r4
  407bd6:	47b0      	blx	r6
	xTaskCreate(CLItask,"CLITASK",1600,NULL,5,NULL);
  407bd8:	2305      	movs	r3, #5
  407bda:	9300      	str	r3, [sp, #0]
  407bdc:	9401      	str	r4, [sp, #4]
  407bde:	9402      	str	r4, [sp, #8]
  407be0:	9403      	str	r4, [sp, #12]
  407be2:	4815      	ldr	r0, [pc, #84]	; (407c38 <main+0xc4>)
  407be4:	4915      	ldr	r1, [pc, #84]	; (407c3c <main+0xc8>)
  407be6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  407bea:	4623      	mov	r3, r4
  407bec:	47b0      	blx	r6
	
	sendDebugString("RTOS TASK INITIALIZATION - FINISHED\n");
  407bee:	4814      	ldr	r0, [pc, #80]	; (407c40 <main+0xcc>)
  407bf0:	47a8      	blx	r5
	
	sendDebugString("STARTING RTOS\n");
  407bf2:	4814      	ldr	r0, [pc, #80]	; (407c44 <main+0xd0>)
  407bf4:	47a8      	blx	r5
	vTaskStartScheduler();
  407bf6:	4b14      	ldr	r3, [pc, #80]	; (407c48 <main+0xd4>)
  407bf8:	4798      	blx	r3
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
  407bfa:	4814      	ldr	r0, [pc, #80]	; (407c4c <main+0xd8>)
  407bfc:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  407bfe:	4620      	mov	r0, r4
  407c00:	b004      	add	sp, #16
  407c02:	bd70      	pop	{r4, r5, r6, pc}
  407c04:	00402da1 	.word	0x00402da1
  407c08:	004137fc 	.word	0x004137fc
  407c0c:	0040019d 	.word	0x0040019d
  407c10:	0040b281 	.word	0x0040b281
  407c14:	2040c6a0 	.word	0x2040c6a0
  407c18:	00413820 	.word	0x00413820
  407c1c:	00406e45 	.word	0x00406e45
  407c20:	00413844 	.word	0x00413844
  407c24:	0040181d 	.word	0x0040181d
  407c28:	00406fc9 	.word	0x00406fc9
  407c2c:	0041384c 	.word	0x0041384c
  407c30:	004079a1 	.word	0x004079a1
  407c34:	00413858 	.word	0x00413858
  407c38:	004073c9 	.word	0x004073c9
  407c3c:	00413860 	.word	0x00413860
  407c40:	00413868 	.word	0x00413868
  407c44:	00413890 	.word	0x00413890
  407c48:	00401a45 	.word	0x00401a45
  407c4c:	004138a0 	.word	0x004138a0

00407c50 <ISI_Handler>:
	   ######################################
			 	INTERUPT HANDLERS
	   ######################################
	   ###################################### */
	
void ISI_Handler(void) {
  407c50:	b508      	push	{r3, lr}
	uint32_t status,imr;
	status = ISI->ISI_SR;
  407c52:	4b09      	ldr	r3, [pc, #36]	; (407c78 <ISI_Handler+0x28>)
  407c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  407c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	//pio_set(LED3);
	isi_frames_done++;
  407c58:	4a08      	ldr	r2, [pc, #32]	; (407c7c <ISI_Handler+0x2c>)
  407c5a:	6813      	ldr	r3, [r2, #0]
  407c5c:	3301      	adds	r3, #1
  407c5e:	6013      	str	r3, [r2, #0]
	if(isi_frames_done >= 1) {
  407c60:	2b00      	cmp	r3, #0
  407c62:	dd07      	ble.n	407c74 <ISI_Handler+0x24>
		xSemaphoreGiveFromISR(ISIsem,NULL);
  407c64:	4b06      	ldr	r3, [pc, #24]	; (407c80 <ISI_Handler+0x30>)
  407c66:	6818      	ldr	r0, [r3, #0]
  407c68:	2100      	movs	r1, #0
  407c6a:	4b06      	ldr	r3, [pc, #24]	; (407c84 <ISI_Handler+0x34>)
  407c6c:	4798      	blx	r3
		isi_frames_done = 0;
  407c6e:	2200      	movs	r2, #0
  407c70:	4b02      	ldr	r3, [pc, #8]	; (407c7c <ISI_Handler+0x2c>)
  407c72:	601a      	str	r2, [r3, #0]
  407c74:	bd08      	pop	{r3, pc}
  407c76:	bf00      	nop
  407c78:	4004c000 	.word	0x4004c000
  407c7c:	2040c4dc 	.word	0x2040c4dc
  407c80:	2040c4c0 	.word	0x2040c4c0
  407c84:	00401471 	.word	0x00401471

00407c88 <UART4_Handler>:
	}
}


void UART4_Handler(void) {
  407c88:	b500      	push	{lr}
  407c8a:	b083      	sub	sp, #12
	uint32_t imr = ISI->ISI_IMR;
  407c8c:	4b16      	ldr	r3, [pc, #88]	; (407ce8 <UART4_Handler+0x60>)
  407c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	char temp;
	uart_read(UART4,&temp);
  407c90:	4816      	ldr	r0, [pc, #88]	; (407cec <UART4_Handler+0x64>)
  407c92:	f10d 0107 	add.w	r1, sp, #7
  407c96:	4b16      	ldr	r3, [pc, #88]	; (407cf0 <UART4_Handler+0x68>)
  407c98:	4798      	blx	r3
	CLIbuf[CLIbufIndex] = temp;
  407c9a:	4a16      	ldr	r2, [pc, #88]	; (407cf4 <UART4_Handler+0x6c>)
  407c9c:	6813      	ldr	r3, [r2, #0]
  407c9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  407ca2:	4915      	ldr	r1, [pc, #84]	; (407cf8 <UART4_Handler+0x70>)
  407ca4:	54c8      	strb	r0, [r1, r3]
	CLIbufIndex++;
  407ca6:	3301      	adds	r3, #1
  407ca8:	6013      	str	r3, [r2, #0]
	
	if(UART_Ctrl_EN) {
  407caa:	4b14      	ldr	r3, [pc, #80]	; (407cfc <UART4_Handler+0x74>)
  407cac:	681b      	ldr	r3, [r3, #0]
  407cae:	b16b      	cbz	r3, 407ccc <UART4_Handler+0x44>
		UART_Ctrl_Cnt++;
  407cb0:	4a13      	ldr	r2, [pc, #76]	; (407d00 <UART4_Handler+0x78>)
  407cb2:	6813      	ldr	r3, [r2, #0]
  407cb4:	3301      	adds	r3, #1
  407cb6:	6013      	str	r3, [r2, #0]
		if(UART_Ctrl_Max <= UART_Ctrl_Cnt) {
  407cb8:	4a12      	ldr	r2, [pc, #72]	; (407d04 <UART4_Handler+0x7c>)
  407cba:	6812      	ldr	r2, [r2, #0]
  407cbc:	4293      	cmp	r3, r2
  407cbe:	db0f      	blt.n	407ce0 <UART4_Handler+0x58>
			xSemaphoreGiveFromISR(UARTsem,NULL);
  407cc0:	4b11      	ldr	r3, [pc, #68]	; (407d08 <UART4_Handler+0x80>)
  407cc2:	6818      	ldr	r0, [r3, #0]
  407cc4:	2100      	movs	r1, #0
  407cc6:	4b11      	ldr	r3, [pc, #68]	; (407d0c <UART4_Handler+0x84>)
  407cc8:	4798      	blx	r3
  407cca:	e009      	b.n	407ce0 <UART4_Handler+0x58>
		}
	}
	else {
	if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
  407ccc:	4b10      	ldr	r3, [pc, #64]	; (407d10 <UART4_Handler+0x88>)
  407cce:	b2db      	uxtb	r3, r3
  407cd0:	f88d 3007 	strb.w	r3, [sp, #7]
  407cd4:	b123      	cbz	r3, 407ce0 <UART4_Handler+0x58>
  407cd6:	4b0c      	ldr	r3, [pc, #48]	; (407d08 <UART4_Handler+0x80>)
  407cd8:	6818      	ldr	r0, [r3, #0]
  407cda:	2100      	movs	r1, #0
  407cdc:	4b0b      	ldr	r3, [pc, #44]	; (407d0c <UART4_Handler+0x84>)
  407cde:	4798      	blx	r3
	}
}
  407ce0:	b003      	add	sp, #12
  407ce2:	f85d fb04 	ldr.w	pc, [sp], #4
  407ce6:	bf00      	nop
  407ce8:	4004c000 	.word	0x4004c000
  407cec:	400e1e00 	.word	0x400e1e00
  407cf0:	00402d8d 	.word	0x00402d8d
  407cf4:	2040c4d4 	.word	0x2040c4d4
  407cf8:	2040c628 	.word	0x2040c628
  407cfc:	2040c4bc 	.word	0x2040c4bc
  407d00:	2040c4cc 	.word	0x2040c4cc
  407d04:	2040c4d0 	.word	0x2040c4d0
  407d08:	2040c4e0 	.word	0x2040c4e0
  407d0c:	00401471 	.word	0x00401471
  407d10:	00412f20 	.word	0x00412f20
  407d14:	00000000 	.word	0x00000000

00407d18 <cos>:
  407d18:	ec51 0b10 	vmov	r0, r1, d0
  407d1c:	4a26      	ldr	r2, [pc, #152]	; (407db8 <cos+0xa0>)
  407d1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407d22:	4293      	cmp	r3, r2
  407d24:	b500      	push	{lr}
  407d26:	b085      	sub	sp, #20
  407d28:	dd20      	ble.n	407d6c <cos+0x54>
  407d2a:	4a24      	ldr	r2, [pc, #144]	; (407dbc <cos+0xa4>)
  407d2c:	4293      	cmp	r3, r2
  407d2e:	dd09      	ble.n	407d44 <cos+0x2c>
  407d30:	ee10 2a10 	vmov	r2, s0
  407d34:	460b      	mov	r3, r1
  407d36:	f002 fd61 	bl	40a7fc <__aeabi_dsub>
  407d3a:	ec41 0b10 	vmov	d0, r0, r1
  407d3e:	b005      	add	sp, #20
  407d40:	f85d fb04 	ldr.w	pc, [sp], #4
  407d44:	4668      	mov	r0, sp
  407d46:	f001 f96b 	bl	409020 <__ieee754_rem_pio2>
  407d4a:	f000 0003 	and.w	r0, r0, #3
  407d4e:	2801      	cmp	r0, #1
  407d50:	ed9d 0b00 	vldr	d0, [sp]
  407d54:	ed9d 1b02 	vldr	d1, [sp, #8]
  407d58:	d020      	beq.n	407d9c <cos+0x84>
  407d5a:	2802      	cmp	r0, #2
  407d5c:	d011      	beq.n	407d82 <cos+0x6a>
  407d5e:	b300      	cbz	r0, 407da2 <cos+0x8a>
  407d60:	2001      	movs	r0, #1
  407d62:	f002 f981 	bl	40a068 <__kernel_sin>
  407d66:	ec51 0b10 	vmov	r0, r1, d0
  407d6a:	e7e6      	b.n	407d3a <cos+0x22>
  407d6c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 407db0 <cos+0x98>
  407d70:	f001 fc3a 	bl	4095e8 <__kernel_cos>
  407d74:	ec51 0b10 	vmov	r0, r1, d0
  407d78:	ec41 0b10 	vmov	d0, r0, r1
  407d7c:	b005      	add	sp, #20
  407d7e:	f85d fb04 	ldr.w	pc, [sp], #4
  407d82:	f001 fc31 	bl	4095e8 <__kernel_cos>
  407d86:	ee10 0a10 	vmov	r0, s0
  407d8a:	ec53 2b10 	vmov	r2, r3, d0
  407d8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  407d92:	ec41 0b10 	vmov	d0, r0, r1
  407d96:	b005      	add	sp, #20
  407d98:	f85d fb04 	ldr.w	pc, [sp], #4
  407d9c:	f002 f964 	bl	40a068 <__kernel_sin>
  407da0:	e7f1      	b.n	407d86 <cos+0x6e>
  407da2:	f001 fc21 	bl	4095e8 <__kernel_cos>
  407da6:	ec51 0b10 	vmov	r0, r1, d0
  407daa:	e7c6      	b.n	407d3a <cos+0x22>
  407dac:	f3af 8000 	nop.w
	...
  407db8:	3fe921fb 	.word	0x3fe921fb
  407dbc:	7fefffff 	.word	0x7fefffff

00407dc0 <sin>:
  407dc0:	ec51 0b10 	vmov	r0, r1, d0
  407dc4:	4a2c      	ldr	r2, [pc, #176]	; (407e78 <sin+0xb8>)
  407dc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407dca:	4293      	cmp	r3, r2
  407dcc:	b500      	push	{lr}
  407dce:	b085      	sub	sp, #20
  407dd0:	dd27      	ble.n	407e22 <sin+0x62>
  407dd2:	4a2a      	ldr	r2, [pc, #168]	; (407e7c <sin+0xbc>)
  407dd4:	4293      	cmp	r3, r2
  407dd6:	dd09      	ble.n	407dec <sin+0x2c>
  407dd8:	ee10 2a10 	vmov	r2, s0
  407ddc:	460b      	mov	r3, r1
  407dde:	f002 fd0d 	bl	40a7fc <__aeabi_dsub>
  407de2:	ec41 0b10 	vmov	d0, r0, r1
  407de6:	b005      	add	sp, #20
  407de8:	f85d fb04 	ldr.w	pc, [sp], #4
  407dec:	4668      	mov	r0, sp
  407dee:	f001 f917 	bl	409020 <__ieee754_rem_pio2>
  407df2:	f000 0003 	and.w	r0, r0, #3
  407df6:	2801      	cmp	r0, #1
  407df8:	d027      	beq.n	407e4a <sin+0x8a>
  407dfa:	2802      	cmp	r0, #2
  407dfc:	d01d      	beq.n	407e3a <sin+0x7a>
  407dfe:	b368      	cbz	r0, 407e5c <sin+0x9c>
  407e00:	ed9d 0b00 	vldr	d0, [sp]
  407e04:	ed9d 1b02 	vldr	d1, [sp, #8]
  407e08:	f001 fbee 	bl	4095e8 <__kernel_cos>
  407e0c:	ee10 0a10 	vmov	r0, s0
  407e10:	ec53 2b10 	vmov	r2, r3, d0
  407e14:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  407e18:	ec41 0b10 	vmov	d0, r0, r1
  407e1c:	b005      	add	sp, #20
  407e1e:	f85d fb04 	ldr.w	pc, [sp], #4
  407e22:	2000      	movs	r0, #0
  407e24:	ed9f 1b12 	vldr	d1, [pc, #72]	; 407e70 <sin+0xb0>
  407e28:	f002 f91e 	bl	40a068 <__kernel_sin>
  407e2c:	ec51 0b10 	vmov	r0, r1, d0
  407e30:	ec41 0b10 	vmov	d0, r0, r1
  407e34:	b005      	add	sp, #20
  407e36:	f85d fb04 	ldr.w	pc, [sp], #4
  407e3a:	ed9d 0b00 	vldr	d0, [sp]
  407e3e:	ed9d 1b02 	vldr	d1, [sp, #8]
  407e42:	2001      	movs	r0, #1
  407e44:	f002 f910 	bl	40a068 <__kernel_sin>
  407e48:	e7e0      	b.n	407e0c <sin+0x4c>
  407e4a:	ed9d 0b00 	vldr	d0, [sp]
  407e4e:	ed9d 1b02 	vldr	d1, [sp, #8]
  407e52:	f001 fbc9 	bl	4095e8 <__kernel_cos>
  407e56:	ec51 0b10 	vmov	r0, r1, d0
  407e5a:	e7c2      	b.n	407de2 <sin+0x22>
  407e5c:	2001      	movs	r0, #1
  407e5e:	ed9d 0b00 	vldr	d0, [sp]
  407e62:	ed9d 1b02 	vldr	d1, [sp, #8]
  407e66:	f002 f8ff 	bl	40a068 <__kernel_sin>
  407e6a:	ec51 0b10 	vmov	r0, r1, d0
  407e6e:	e7b8      	b.n	407de2 <sin+0x22>
	...
  407e78:	3fe921fb 	.word	0x3fe921fb
  407e7c:	7fefffff 	.word	0x7fefffff

00407e80 <lroundf>:
  407e80:	b410      	push	{r4}
  407e82:	b083      	sub	sp, #12
  407e84:	ed8d 0a01 	vstr	s0, [sp, #4]
  407e88:	9b01      	ldr	r3, [sp, #4]
  407e8a:	f3c3 51c7 	ubfx	r1, r3, #23, #8
  407e8e:	2b00      	cmp	r3, #0
  407e90:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
  407e94:	bfb4      	ite	lt
  407e96:	f04f 30ff 	movlt.w	r0, #4294967295
  407e9a:	2001      	movge	r0, #1
  407e9c:	2a1e      	cmp	r2, #30
  407e9e:	dc0f      	bgt.n	407ec0 <lroundf+0x40>
  407ea0:	2a00      	cmp	r2, #0
  407ea2:	db20      	blt.n	407ee6 <lroundf+0x66>
  407ea4:	f3c3 0316 	ubfx	r3, r3, #0, #23
  407ea8:	2a16      	cmp	r2, #22
  407eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  407eae:	dd11      	ble.n	407ed4 <lroundf+0x54>
  407eb0:	3996      	subs	r1, #150	; 0x96
  407eb2:	408b      	lsls	r3, r1
  407eb4:	fb00 f003 	mul.w	r0, r0, r3
  407eb8:	b003      	add	sp, #12
  407eba:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ebe:	4770      	bx	lr
  407ec0:	eddd 7a01 	vldr	s15, [sp, #4]
  407ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  407ec8:	ee17 0a90 	vmov	r0, s15
  407ecc:	b003      	add	sp, #12
  407ece:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ed2:	4770      	bx	lr
  407ed4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  407ed8:	f1c2 0417 	rsb	r4, r2, #23
  407edc:	fa41 f202 	asr.w	r2, r1, r2
  407ee0:	4413      	add	r3, r2
  407ee2:	40e3      	lsrs	r3, r4
  407ee4:	e7e6      	b.n	407eb4 <lroundf+0x34>
  407ee6:	3201      	adds	r2, #1
  407ee8:	bf18      	it	ne
  407eea:	2000      	movne	r0, #0
  407eec:	b003      	add	sp, #12
  407eee:	f85d 4b04 	ldr.w	r4, [sp], #4
  407ef2:	4770      	bx	lr

00407ef4 <acos>:
  407ef4:	b510      	push	{r4, lr}
  407ef6:	4c2c      	ldr	r4, [pc, #176]	; (407fa8 <acos+0xb4>)
  407ef8:	ed2d 8b04 	vpush	{d8-d9}
  407efc:	b08a      	sub	sp, #40	; 0x28
  407efe:	eeb0 9a40 	vmov.f32	s18, s0
  407f02:	eef0 9a60 	vmov.f32	s19, s1
  407f06:	f000 f98b 	bl	408220 <__ieee754_acos>
  407f0a:	f994 3000 	ldrsb.w	r3, [r4]
  407f0e:	eeb0 8a40 	vmov.f32	s16, s0
  407f12:	eef0 8a60 	vmov.f32	s17, s1
  407f16:	3301      	adds	r3, #1
  407f18:	d006      	beq.n	407f28 <acos+0x34>
  407f1a:	eeb0 0a49 	vmov.f32	s0, s18
  407f1e:	eef0 0a69 	vmov.f32	s1, s19
  407f22:	f002 fba5 	bl	40a670 <__fpclassifyd>
  407f26:	b938      	cbnz	r0, 407f38 <acos+0x44>
  407f28:	eeb0 0a48 	vmov.f32	s0, s16
  407f2c:	eef0 0a68 	vmov.f32	s1, s17
  407f30:	b00a      	add	sp, #40	; 0x28
  407f32:	ecbd 8b04 	vpop	{d8-d9}
  407f36:	bd10      	pop	{r4, pc}
  407f38:	eeb0 0a49 	vmov.f32	s0, s18
  407f3c:	eef0 0a69 	vmov.f32	s1, s19
  407f40:	f002 fafe 	bl	40a540 <fabs>
  407f44:	2200      	movs	r2, #0
  407f46:	4b19      	ldr	r3, [pc, #100]	; (407fac <acos+0xb8>)
  407f48:	ec51 0b10 	vmov	r0, r1, d0
  407f4c:	f003 f89a 	bl	40b084 <__aeabi_dcmpgt>
  407f50:	2800      	cmp	r0, #0
  407f52:	d0e9      	beq.n	407f28 <acos+0x34>
  407f54:	2300      	movs	r3, #0
  407f56:	2101      	movs	r1, #1
  407f58:	4a15      	ldr	r2, [pc, #84]	; (407fb0 <acos+0xbc>)
  407f5a:	4816      	ldr	r0, [pc, #88]	; (407fb4 <acos+0xc0>)
  407f5c:	9308      	str	r3, [sp, #32]
  407f5e:	e88d 0006 	stmia.w	sp, {r1, r2}
  407f62:	ed8d 9b04 	vstr	d9, [sp, #16]
  407f66:	ed8d 9b02 	vstr	d9, [sp, #8]
  407f6a:	f002 fba9 	bl	40a6c0 <nan>
  407f6e:	f994 3000 	ldrsb.w	r3, [r4]
  407f72:	2b02      	cmp	r3, #2
  407f74:	ed8d 0b06 	vstr	d0, [sp, #24]
  407f78:	d00b      	beq.n	407f92 <acos+0x9e>
  407f7a:	4668      	mov	r0, sp
  407f7c:	f002 fb9e 	bl	40a6bc <matherr>
  407f80:	b138      	cbz	r0, 407f92 <acos+0x9e>
  407f82:	9b08      	ldr	r3, [sp, #32]
  407f84:	b953      	cbnz	r3, 407f9c <acos+0xa8>
  407f86:	ed9d 0b06 	vldr	d0, [sp, #24]
  407f8a:	b00a      	add	sp, #40	; 0x28
  407f8c:	ecbd 8b04 	vpop	{d8-d9}
  407f90:	bd10      	pop	{r4, pc}
  407f92:	f003 f91f 	bl	40b1d4 <__errno>
  407f96:	2321      	movs	r3, #33	; 0x21
  407f98:	6003      	str	r3, [r0, #0]
  407f9a:	e7f2      	b.n	407f82 <acos+0x8e>
  407f9c:	f003 f91a 	bl	40b1d4 <__errno>
  407fa0:	9b08      	ldr	r3, [sp, #32]
  407fa2:	6003      	str	r3, [r0, #0]
  407fa4:	e7ef      	b.n	407f86 <acos+0x92>
  407fa6:	bf00      	nop
  407fa8:	204000ac 	.word	0x204000ac
  407fac:	3ff00000 	.word	0x3ff00000
  407fb0:	004138dc 	.word	0x004138dc
  407fb4:	004132b4 	.word	0x004132b4

00407fb8 <asin>:
  407fb8:	b510      	push	{r4, lr}
  407fba:	4c2c      	ldr	r4, [pc, #176]	; (40806c <asin+0xb4>)
  407fbc:	ed2d 8b04 	vpush	{d8-d9}
  407fc0:	b08a      	sub	sp, #40	; 0x28
  407fc2:	eeb0 9a40 	vmov.f32	s18, s0
  407fc6:	eef0 9a60 	vmov.f32	s19, s1
  407fca:	f000 fba1 	bl	408710 <__ieee754_asin>
  407fce:	f994 3000 	ldrsb.w	r3, [r4]
  407fd2:	eeb0 8a40 	vmov.f32	s16, s0
  407fd6:	eef0 8a60 	vmov.f32	s17, s1
  407fda:	3301      	adds	r3, #1
  407fdc:	d006      	beq.n	407fec <asin+0x34>
  407fde:	eeb0 0a49 	vmov.f32	s0, s18
  407fe2:	eef0 0a69 	vmov.f32	s1, s19
  407fe6:	f002 fb43 	bl	40a670 <__fpclassifyd>
  407fea:	b938      	cbnz	r0, 407ffc <asin+0x44>
  407fec:	eeb0 0a48 	vmov.f32	s0, s16
  407ff0:	eef0 0a68 	vmov.f32	s1, s17
  407ff4:	b00a      	add	sp, #40	; 0x28
  407ff6:	ecbd 8b04 	vpop	{d8-d9}
  407ffa:	bd10      	pop	{r4, pc}
  407ffc:	eeb0 0a49 	vmov.f32	s0, s18
  408000:	eef0 0a69 	vmov.f32	s1, s19
  408004:	f002 fa9c 	bl	40a540 <fabs>
  408008:	2200      	movs	r2, #0
  40800a:	4b19      	ldr	r3, [pc, #100]	; (408070 <asin+0xb8>)
  40800c:	ec51 0b10 	vmov	r0, r1, d0
  408010:	f003 f838 	bl	40b084 <__aeabi_dcmpgt>
  408014:	2800      	cmp	r0, #0
  408016:	d0e9      	beq.n	407fec <asin+0x34>
  408018:	2300      	movs	r3, #0
  40801a:	2101      	movs	r1, #1
  40801c:	4a15      	ldr	r2, [pc, #84]	; (408074 <asin+0xbc>)
  40801e:	4816      	ldr	r0, [pc, #88]	; (408078 <asin+0xc0>)
  408020:	9308      	str	r3, [sp, #32]
  408022:	e88d 0006 	stmia.w	sp, {r1, r2}
  408026:	ed8d 9b04 	vstr	d9, [sp, #16]
  40802a:	ed8d 9b02 	vstr	d9, [sp, #8]
  40802e:	f002 fb47 	bl	40a6c0 <nan>
  408032:	f994 3000 	ldrsb.w	r3, [r4]
  408036:	2b02      	cmp	r3, #2
  408038:	ed8d 0b06 	vstr	d0, [sp, #24]
  40803c:	d00b      	beq.n	408056 <asin+0x9e>
  40803e:	4668      	mov	r0, sp
  408040:	f002 fb3c 	bl	40a6bc <matherr>
  408044:	b138      	cbz	r0, 408056 <asin+0x9e>
  408046:	9b08      	ldr	r3, [sp, #32]
  408048:	b953      	cbnz	r3, 408060 <asin+0xa8>
  40804a:	ed9d 0b06 	vldr	d0, [sp, #24]
  40804e:	b00a      	add	sp, #40	; 0x28
  408050:	ecbd 8b04 	vpop	{d8-d9}
  408054:	bd10      	pop	{r4, pc}
  408056:	f003 f8bd 	bl	40b1d4 <__errno>
  40805a:	2321      	movs	r3, #33	; 0x21
  40805c:	6003      	str	r3, [r0, #0]
  40805e:	e7f2      	b.n	408046 <asin+0x8e>
  408060:	f003 f8b8 	bl	40b1d4 <__errno>
  408064:	9b08      	ldr	r3, [sp, #32]
  408066:	6003      	str	r3, [r0, #0]
  408068:	e7ef      	b.n	40804a <asin+0x92>
  40806a:	bf00      	nop
  40806c:	204000ac 	.word	0x204000ac
  408070:	3ff00000 	.word	0x3ff00000
  408074:	004138e4 	.word	0x004138e4
  408078:	004132b4 	.word	0x004132b4

0040807c <atan2>:
  40807c:	f000 bd90 	b.w	408ba0 <__ieee754_atan2>

00408080 <fmod>:
  408080:	b530      	push	{r4, r5, lr}
  408082:	4c33      	ldr	r4, [pc, #204]	; (408150 <fmod+0xd0>)
  408084:	ed2d 8b06 	vpush	{d8-d10}
  408088:	b08b      	sub	sp, #44	; 0x2c
  40808a:	eeb0 aa40 	vmov.f32	s20, s0
  40808e:	eef0 aa60 	vmov.f32	s21, s1
  408092:	eeb0 9a41 	vmov.f32	s18, s2
  408096:	eef0 9a61 	vmov.f32	s19, s3
  40809a:	f000 fe8d 	bl	408db8 <__ieee754_fmod>
  40809e:	f994 3000 	ldrsb.w	r3, [r4]
  4080a2:	eeb0 8a40 	vmov.f32	s16, s0
  4080a6:	eef0 8a60 	vmov.f32	s17, s1
  4080aa:	3301      	adds	r3, #1
  4080ac:	d006      	beq.n	4080bc <fmod+0x3c>
  4080ae:	eeb0 0a49 	vmov.f32	s0, s18
  4080b2:	eef0 0a69 	vmov.f32	s1, s19
  4080b6:	f002 fadb 	bl	40a670 <__fpclassifyd>
  4080ba:	b938      	cbnz	r0, 4080cc <fmod+0x4c>
  4080bc:	eeb0 0a48 	vmov.f32	s0, s16
  4080c0:	eef0 0a68 	vmov.f32	s1, s17
  4080c4:	b00b      	add	sp, #44	; 0x2c
  4080c6:	ecbd 8b06 	vpop	{d8-d10}
  4080ca:	bd30      	pop	{r4, r5, pc}
  4080cc:	eeb0 0a4a 	vmov.f32	s0, s20
  4080d0:	eef0 0a6a 	vmov.f32	s1, s21
  4080d4:	f002 facc 	bl	40a670 <__fpclassifyd>
  4080d8:	2800      	cmp	r0, #0
  4080da:	d0ef      	beq.n	4080bc <fmod+0x3c>
  4080dc:	2200      	movs	r2, #0
  4080de:	2300      	movs	r3, #0
  4080e0:	f04f 0501 	mov.w	r5, #1
  4080e4:	ec51 0b19 	vmov	r0, r1, d9
  4080e8:	f002 ffa4 	bl	40b034 <__aeabi_dcmpeq>
  4080ec:	b900      	cbnz	r0, 4080f0 <fmod+0x70>
  4080ee:	4605      	mov	r5, r0
  4080f0:	f015 0fff 	tst.w	r5, #255	; 0xff
  4080f4:	d0e2      	beq.n	4080bc <fmod+0x3c>
  4080f6:	2101      	movs	r1, #1
  4080f8:	4a16      	ldr	r2, [pc, #88]	; (408154 <fmod+0xd4>)
  4080fa:	2300      	movs	r3, #0
  4080fc:	7824      	ldrb	r4, [r4, #0]
  4080fe:	e88d 0006 	stmia.w	sp, {r1, r2}
  408102:	9308      	str	r3, [sp, #32]
  408104:	ed8d ab02 	vstr	d10, [sp, #8]
  408108:	ed8d 9b04 	vstr	d9, [sp, #16]
  40810c:	b194      	cbz	r4, 408134 <fmod+0xb4>
  40810e:	2000      	movs	r0, #0
  408110:	2100      	movs	r1, #0
  408112:	4602      	mov	r2, r0
  408114:	460b      	mov	r3, r1
  408116:	f002 fe4f 	bl	40adb8 <__aeabi_ddiv>
  40811a:	2c02      	cmp	r4, #2
  40811c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408120:	d10a      	bne.n	408138 <fmod+0xb8>
  408122:	f003 f857 	bl	40b1d4 <__errno>
  408126:	2321      	movs	r3, #33	; 0x21
  408128:	6003      	str	r3, [r0, #0]
  40812a:	9b08      	ldr	r3, [sp, #32]
  40812c:	b953      	cbnz	r3, 408144 <fmod+0xc4>
  40812e:	ed9d 0b06 	vldr	d0, [sp, #24]
  408132:	e7c7      	b.n	4080c4 <fmod+0x44>
  408134:	ed8d ab06 	vstr	d10, [sp, #24]
  408138:	4668      	mov	r0, sp
  40813a:	f002 fabf 	bl	40a6bc <matherr>
  40813e:	2800      	cmp	r0, #0
  408140:	d1f3      	bne.n	40812a <fmod+0xaa>
  408142:	e7ee      	b.n	408122 <fmod+0xa2>
  408144:	f003 f846 	bl	40b1d4 <__errno>
  408148:	9b08      	ldr	r3, [sp, #32]
  40814a:	6003      	str	r3, [r0, #0]
  40814c:	e7ef      	b.n	40812e <fmod+0xae>
  40814e:	bf00      	nop
  408150:	204000ac 	.word	0x204000ac
  408154:	004138ec 	.word	0x004138ec

00408158 <sqrt>:
  408158:	b530      	push	{r4, r5, lr}
  40815a:	4c2f      	ldr	r4, [pc, #188]	; (408218 <sqrt+0xc0>)
  40815c:	ed2d 8b04 	vpush	{d8-d9}
  408160:	b08b      	sub	sp, #44	; 0x2c
  408162:	eeb0 9a40 	vmov.f32	s18, s0
  408166:	eef0 9a60 	vmov.f32	s19, s1
  40816a:	f001 f97f 	bl	40946c <__ieee754_sqrt>
  40816e:	f994 3000 	ldrsb.w	r3, [r4]
  408172:	eeb0 8a40 	vmov.f32	s16, s0
  408176:	eef0 8a60 	vmov.f32	s17, s1
  40817a:	3301      	adds	r3, #1
  40817c:	d02f      	beq.n	4081de <sqrt+0x86>
  40817e:	eeb0 0a49 	vmov.f32	s0, s18
  408182:	eef0 0a69 	vmov.f32	s1, s19
  408186:	f002 fa73 	bl	40a670 <__fpclassifyd>
  40818a:	b340      	cbz	r0, 4081de <sqrt+0x86>
  40818c:	2200      	movs	r2, #0
  40818e:	2300      	movs	r3, #0
  408190:	f04f 0501 	mov.w	r5, #1
  408194:	ec51 0b19 	vmov	r0, r1, d9
  408198:	f002 ff56 	bl	40b048 <__aeabi_dcmplt>
  40819c:	b900      	cbnz	r0, 4081a0 <sqrt+0x48>
  40819e:	4605      	mov	r5, r0
  4081a0:	f015 0fff 	tst.w	r5, #255	; 0xff
  4081a4:	d01b      	beq.n	4081de <sqrt+0x86>
  4081a6:	2101      	movs	r1, #1
  4081a8:	4a1c      	ldr	r2, [pc, #112]	; (40821c <sqrt+0xc4>)
  4081aa:	2300      	movs	r3, #0
  4081ac:	7824      	ldrb	r4, [r4, #0]
  4081ae:	e88d 0006 	stmia.w	sp, {r1, r2}
  4081b2:	9308      	str	r3, [sp, #32]
  4081b4:	ed8d 9b04 	vstr	d9, [sp, #16]
  4081b8:	ed8d 9b02 	vstr	d9, [sp, #8]
  4081bc:	b9bc      	cbnz	r4, 4081ee <sqrt+0x96>
  4081be:	2200      	movs	r2, #0
  4081c0:	2300      	movs	r3, #0
  4081c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  4081c6:	4668      	mov	r0, sp
  4081c8:	f002 fa78 	bl	40a6bc <matherr>
  4081cc:	b1c8      	cbz	r0, 408202 <sqrt+0xaa>
  4081ce:	9b08      	ldr	r3, [sp, #32]
  4081d0:	b9e3      	cbnz	r3, 40820c <sqrt+0xb4>
  4081d2:	ed9d 0b06 	vldr	d0, [sp, #24]
  4081d6:	b00b      	add	sp, #44	; 0x2c
  4081d8:	ecbd 8b04 	vpop	{d8-d9}
  4081dc:	bd30      	pop	{r4, r5, pc}
  4081de:	eeb0 0a48 	vmov.f32	s0, s16
  4081e2:	eef0 0a68 	vmov.f32	s1, s17
  4081e6:	b00b      	add	sp, #44	; 0x2c
  4081e8:	ecbd 8b04 	vpop	{d8-d9}
  4081ec:	bd30      	pop	{r4, r5, pc}
  4081ee:	2000      	movs	r0, #0
  4081f0:	2100      	movs	r1, #0
  4081f2:	4602      	mov	r2, r0
  4081f4:	460b      	mov	r3, r1
  4081f6:	f002 fddf 	bl	40adb8 <__aeabi_ddiv>
  4081fa:	2c02      	cmp	r4, #2
  4081fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408200:	d1e1      	bne.n	4081c6 <sqrt+0x6e>
  408202:	f002 ffe7 	bl	40b1d4 <__errno>
  408206:	2321      	movs	r3, #33	; 0x21
  408208:	6003      	str	r3, [r0, #0]
  40820a:	e7e0      	b.n	4081ce <sqrt+0x76>
  40820c:	f002 ffe2 	bl	40b1d4 <__errno>
  408210:	9b08      	ldr	r3, [sp, #32]
  408212:	6003      	str	r3, [r0, #0]
  408214:	e7dd      	b.n	4081d2 <sqrt+0x7a>
  408216:	bf00      	nop
  408218:	204000ac 	.word	0x204000ac
  40821c:	004138f4 	.word	0x004138f4

00408220 <__ieee754_acos>:
  408220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408224:	ec55 4b10 	vmov	r4, r5, d0
  408228:	49cf      	ldr	r1, [pc, #828]	; (408568 <__ieee754_acos+0x348>)
  40822a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  40822e:	428b      	cmp	r3, r1
  408230:	dd0c      	ble.n	40824c <__ieee754_acos+0x2c>
  408232:	48ce      	ldr	r0, [pc, #824]	; (40856c <__ieee754_acos+0x34c>)
  408234:	4418      	add	r0, r3
  408236:	4623      	mov	r3, r4
  408238:	4303      	orrs	r3, r0
  40823a:	f040 80bf 	bne.w	4083bc <__ieee754_acos+0x19c>
  40823e:	2d00      	cmp	r5, #0
  408240:	f340 8153 	ble.w	4084ea <__ieee754_acos+0x2ca>
  408244:	ed9f 0bac 	vldr	d0, [pc, #688]	; 4084f8 <__ieee754_acos+0x2d8>
  408248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40824c:	49c8      	ldr	r1, [pc, #800]	; (408570 <__ieee754_acos+0x350>)
  40824e:	428b      	cmp	r3, r1
  408250:	f340 80ad 	ble.w	4083ae <__ieee754_acos+0x18e>
  408254:	2d00      	cmp	r5, #0
  408256:	f2c0 8193 	blt.w	408580 <__ieee754_acos+0x360>
  40825a:	ee10 2a10 	vmov	r2, s0
  40825e:	462b      	mov	r3, r5
  408260:	2000      	movs	r0, #0
  408262:	49c4      	ldr	r1, [pc, #784]	; (408574 <__ieee754_acos+0x354>)
  408264:	f002 faca 	bl	40a7fc <__aeabi_dsub>
  408268:	2200      	movs	r2, #0
  40826a:	4bc3      	ldr	r3, [pc, #780]	; (408578 <__ieee754_acos+0x358>)
  40826c:	2600      	movs	r6, #0
  40826e:	f002 fc79 	bl	40ab64 <__aeabi_dmul>
  408272:	4604      	mov	r4, r0
  408274:	460d      	mov	r5, r1
  408276:	ec45 4b10 	vmov	d0, r4, r5
  40827a:	f001 f8f7 	bl	40946c <__ieee754_sqrt>
  40827e:	4620      	mov	r0, r4
  408280:	4629      	mov	r1, r5
  408282:	a39f      	add	r3, pc, #636	; (adr r3, 408500 <__ieee754_acos+0x2e0>)
  408284:	e9d3 2300 	ldrd	r2, r3, [r3]
  408288:	ec59 8b10 	vmov	r8, r9, d0
  40828c:	f002 fc6a 	bl	40ab64 <__aeabi_dmul>
  408290:	a39d      	add	r3, pc, #628	; (adr r3, 408508 <__ieee754_acos+0x2e8>)
  408292:	e9d3 2300 	ldrd	r2, r3, [r3]
  408296:	f002 fab3 	bl	40a800 <__adddf3>
  40829a:	4622      	mov	r2, r4
  40829c:	462b      	mov	r3, r5
  40829e:	f002 fc61 	bl	40ab64 <__aeabi_dmul>
  4082a2:	a39b      	add	r3, pc, #620	; (adr r3, 408510 <__ieee754_acos+0x2f0>)
  4082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082a8:	f002 faa8 	bl	40a7fc <__aeabi_dsub>
  4082ac:	4622      	mov	r2, r4
  4082ae:	462b      	mov	r3, r5
  4082b0:	f002 fc58 	bl	40ab64 <__aeabi_dmul>
  4082b4:	a398      	add	r3, pc, #608	; (adr r3, 408518 <__ieee754_acos+0x2f8>)
  4082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082ba:	f002 faa1 	bl	40a800 <__adddf3>
  4082be:	4622      	mov	r2, r4
  4082c0:	462b      	mov	r3, r5
  4082c2:	f002 fc4f 	bl	40ab64 <__aeabi_dmul>
  4082c6:	a396      	add	r3, pc, #600	; (adr r3, 408520 <__ieee754_acos+0x300>)
  4082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082cc:	f002 fa96 	bl	40a7fc <__aeabi_dsub>
  4082d0:	4622      	mov	r2, r4
  4082d2:	462b      	mov	r3, r5
  4082d4:	f002 fc46 	bl	40ab64 <__aeabi_dmul>
  4082d8:	a393      	add	r3, pc, #588	; (adr r3, 408528 <__ieee754_acos+0x308>)
  4082da:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082de:	f002 fa8f 	bl	40a800 <__adddf3>
  4082e2:	4622      	mov	r2, r4
  4082e4:	462b      	mov	r3, r5
  4082e6:	f002 fc3d 	bl	40ab64 <__aeabi_dmul>
  4082ea:	4682      	mov	sl, r0
  4082ec:	468b      	mov	fp, r1
  4082ee:	4620      	mov	r0, r4
  4082f0:	4629      	mov	r1, r5
  4082f2:	a38f      	add	r3, pc, #572	; (adr r3, 408530 <__ieee754_acos+0x310>)
  4082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082f8:	f002 fc34 	bl	40ab64 <__aeabi_dmul>
  4082fc:	a38e      	add	r3, pc, #568	; (adr r3, 408538 <__ieee754_acos+0x318>)
  4082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408302:	f002 fa7b 	bl	40a7fc <__aeabi_dsub>
  408306:	4622      	mov	r2, r4
  408308:	462b      	mov	r3, r5
  40830a:	f002 fc2b 	bl	40ab64 <__aeabi_dmul>
  40830e:	a38c      	add	r3, pc, #560	; (adr r3, 408540 <__ieee754_acos+0x320>)
  408310:	e9d3 2300 	ldrd	r2, r3, [r3]
  408314:	f002 fa74 	bl	40a800 <__adddf3>
  408318:	4622      	mov	r2, r4
  40831a:	462b      	mov	r3, r5
  40831c:	f002 fc22 	bl	40ab64 <__aeabi_dmul>
  408320:	a389      	add	r3, pc, #548	; (adr r3, 408548 <__ieee754_acos+0x328>)
  408322:	e9d3 2300 	ldrd	r2, r3, [r3]
  408326:	f002 fa69 	bl	40a7fc <__aeabi_dsub>
  40832a:	4622      	mov	r2, r4
  40832c:	462b      	mov	r3, r5
  40832e:	f002 fc19 	bl	40ab64 <__aeabi_dmul>
  408332:	2200      	movs	r2, #0
  408334:	4b8f      	ldr	r3, [pc, #572]	; (408574 <__ieee754_acos+0x354>)
  408336:	f002 fa63 	bl	40a800 <__adddf3>
  40833a:	4602      	mov	r2, r0
  40833c:	460b      	mov	r3, r1
  40833e:	4650      	mov	r0, sl
  408340:	4659      	mov	r1, fp
  408342:	f002 fd39 	bl	40adb8 <__aeabi_ddiv>
  408346:	4642      	mov	r2, r8
  408348:	464b      	mov	r3, r9
  40834a:	f002 fc0b 	bl	40ab64 <__aeabi_dmul>
  40834e:	4632      	mov	r2, r6
  408350:	4682      	mov	sl, r0
  408352:	468b      	mov	fp, r1
  408354:	464b      	mov	r3, r9
  408356:	4630      	mov	r0, r6
  408358:	4649      	mov	r1, r9
  40835a:	f002 fc03 	bl	40ab64 <__aeabi_dmul>
  40835e:	4602      	mov	r2, r0
  408360:	460b      	mov	r3, r1
  408362:	4620      	mov	r0, r4
  408364:	4629      	mov	r1, r5
  408366:	f002 fa49 	bl	40a7fc <__aeabi_dsub>
  40836a:	4604      	mov	r4, r0
  40836c:	460d      	mov	r5, r1
  40836e:	4632      	mov	r2, r6
  408370:	464b      	mov	r3, r9
  408372:	4640      	mov	r0, r8
  408374:	4649      	mov	r1, r9
  408376:	f002 fa43 	bl	40a800 <__adddf3>
  40837a:	4602      	mov	r2, r0
  40837c:	460b      	mov	r3, r1
  40837e:	4620      	mov	r0, r4
  408380:	4629      	mov	r1, r5
  408382:	f002 fd19 	bl	40adb8 <__aeabi_ddiv>
  408386:	4602      	mov	r2, r0
  408388:	460b      	mov	r3, r1
  40838a:	4650      	mov	r0, sl
  40838c:	4659      	mov	r1, fp
  40838e:	f002 fa37 	bl	40a800 <__adddf3>
  408392:	4602      	mov	r2, r0
  408394:	460b      	mov	r3, r1
  408396:	4630      	mov	r0, r6
  408398:	4649      	mov	r1, r9
  40839a:	f002 fa31 	bl	40a800 <__adddf3>
  40839e:	4602      	mov	r2, r0
  4083a0:	460b      	mov	r3, r1
  4083a2:	f002 fa2d 	bl	40a800 <__adddf3>
  4083a6:	ec41 0b10 	vmov	d0, r0, r1
  4083aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083ae:	4a73      	ldr	r2, [pc, #460]	; (40857c <__ieee754_acos+0x35c>)
  4083b0:	4293      	cmp	r3, r2
  4083b2:	dc12      	bgt.n	4083da <__ieee754_acos+0x1ba>
  4083b4:	ed9f 0b66 	vldr	d0, [pc, #408]	; 408550 <__ieee754_acos+0x330>
  4083b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083bc:	ee10 0a10 	vmov	r0, s0
  4083c0:	4622      	mov	r2, r4
  4083c2:	462b      	mov	r3, r5
  4083c4:	4629      	mov	r1, r5
  4083c6:	f002 fa19 	bl	40a7fc <__aeabi_dsub>
  4083ca:	4602      	mov	r2, r0
  4083cc:	460b      	mov	r3, r1
  4083ce:	f002 fcf3 	bl	40adb8 <__aeabi_ddiv>
  4083d2:	ec41 0b10 	vmov	d0, r0, r1
  4083d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083da:	ee10 2a10 	vmov	r2, s0
  4083de:	ee10 0a10 	vmov	r0, s0
  4083e2:	462b      	mov	r3, r5
  4083e4:	4629      	mov	r1, r5
  4083e6:	f002 fbbd 	bl	40ab64 <__aeabi_dmul>
  4083ea:	4606      	mov	r6, r0
  4083ec:	460f      	mov	r7, r1
  4083ee:	a344      	add	r3, pc, #272	; (adr r3, 408500 <__ieee754_acos+0x2e0>)
  4083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083f4:	f002 fbb6 	bl	40ab64 <__aeabi_dmul>
  4083f8:	a343      	add	r3, pc, #268	; (adr r3, 408508 <__ieee754_acos+0x2e8>)
  4083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083fe:	f002 f9ff 	bl	40a800 <__adddf3>
  408402:	4632      	mov	r2, r6
  408404:	463b      	mov	r3, r7
  408406:	f002 fbad 	bl	40ab64 <__aeabi_dmul>
  40840a:	a341      	add	r3, pc, #260	; (adr r3, 408510 <__ieee754_acos+0x2f0>)
  40840c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408410:	f002 f9f4 	bl	40a7fc <__aeabi_dsub>
  408414:	4632      	mov	r2, r6
  408416:	463b      	mov	r3, r7
  408418:	f002 fba4 	bl	40ab64 <__aeabi_dmul>
  40841c:	a33e      	add	r3, pc, #248	; (adr r3, 408518 <__ieee754_acos+0x2f8>)
  40841e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408422:	f002 f9ed 	bl	40a800 <__adddf3>
  408426:	4632      	mov	r2, r6
  408428:	463b      	mov	r3, r7
  40842a:	f002 fb9b 	bl	40ab64 <__aeabi_dmul>
  40842e:	a33c      	add	r3, pc, #240	; (adr r3, 408520 <__ieee754_acos+0x300>)
  408430:	e9d3 2300 	ldrd	r2, r3, [r3]
  408434:	f002 f9e2 	bl	40a7fc <__aeabi_dsub>
  408438:	4632      	mov	r2, r6
  40843a:	463b      	mov	r3, r7
  40843c:	f002 fb92 	bl	40ab64 <__aeabi_dmul>
  408440:	a339      	add	r3, pc, #228	; (adr r3, 408528 <__ieee754_acos+0x308>)
  408442:	e9d3 2300 	ldrd	r2, r3, [r3]
  408446:	f002 f9db 	bl	40a800 <__adddf3>
  40844a:	4632      	mov	r2, r6
  40844c:	463b      	mov	r3, r7
  40844e:	f002 fb89 	bl	40ab64 <__aeabi_dmul>
  408452:	4680      	mov	r8, r0
  408454:	4689      	mov	r9, r1
  408456:	4630      	mov	r0, r6
  408458:	4639      	mov	r1, r7
  40845a:	a335      	add	r3, pc, #212	; (adr r3, 408530 <__ieee754_acos+0x310>)
  40845c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408460:	f002 fb80 	bl	40ab64 <__aeabi_dmul>
  408464:	a334      	add	r3, pc, #208	; (adr r3, 408538 <__ieee754_acos+0x318>)
  408466:	e9d3 2300 	ldrd	r2, r3, [r3]
  40846a:	f002 f9c7 	bl	40a7fc <__aeabi_dsub>
  40846e:	4632      	mov	r2, r6
  408470:	463b      	mov	r3, r7
  408472:	f002 fb77 	bl	40ab64 <__aeabi_dmul>
  408476:	a332      	add	r3, pc, #200	; (adr r3, 408540 <__ieee754_acos+0x320>)
  408478:	e9d3 2300 	ldrd	r2, r3, [r3]
  40847c:	f002 f9c0 	bl	40a800 <__adddf3>
  408480:	4632      	mov	r2, r6
  408482:	463b      	mov	r3, r7
  408484:	f002 fb6e 	bl	40ab64 <__aeabi_dmul>
  408488:	a32f      	add	r3, pc, #188	; (adr r3, 408548 <__ieee754_acos+0x328>)
  40848a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40848e:	f002 f9b5 	bl	40a7fc <__aeabi_dsub>
  408492:	4632      	mov	r2, r6
  408494:	463b      	mov	r3, r7
  408496:	f002 fb65 	bl	40ab64 <__aeabi_dmul>
  40849a:	2200      	movs	r2, #0
  40849c:	4b35      	ldr	r3, [pc, #212]	; (408574 <__ieee754_acos+0x354>)
  40849e:	f002 f9af 	bl	40a800 <__adddf3>
  4084a2:	4602      	mov	r2, r0
  4084a4:	460b      	mov	r3, r1
  4084a6:	4640      	mov	r0, r8
  4084a8:	4649      	mov	r1, r9
  4084aa:	f002 fc85 	bl	40adb8 <__aeabi_ddiv>
  4084ae:	4602      	mov	r2, r0
  4084b0:	460b      	mov	r3, r1
  4084b2:	4620      	mov	r0, r4
  4084b4:	4629      	mov	r1, r5
  4084b6:	f002 fb55 	bl	40ab64 <__aeabi_dmul>
  4084ba:	4602      	mov	r2, r0
  4084bc:	460b      	mov	r3, r1
  4084be:	a126      	add	r1, pc, #152	; (adr r1, 408558 <__ieee754_acos+0x338>)
  4084c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4084c4:	f002 f99a 	bl	40a7fc <__aeabi_dsub>
  4084c8:	4602      	mov	r2, r0
  4084ca:	460b      	mov	r3, r1
  4084cc:	4620      	mov	r0, r4
  4084ce:	4629      	mov	r1, r5
  4084d0:	f002 f994 	bl	40a7fc <__aeabi_dsub>
  4084d4:	4602      	mov	r2, r0
  4084d6:	460b      	mov	r3, r1
  4084d8:	a11d      	add	r1, pc, #116	; (adr r1, 408550 <__ieee754_acos+0x330>)
  4084da:	e9d1 0100 	ldrd	r0, r1, [r1]
  4084de:	f002 f98d 	bl	40a7fc <__aeabi_dsub>
  4084e2:	ec41 0b10 	vmov	d0, r0, r1
  4084e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084ea:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 408560 <__ieee754_acos+0x340>
  4084ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084f2:	bf00      	nop
  4084f4:	f3af 8000 	nop.w
	...
  408500:	0dfdf709 	.word	0x0dfdf709
  408504:	3f023de1 	.word	0x3f023de1
  408508:	7501b288 	.word	0x7501b288
  40850c:	3f49efe0 	.word	0x3f49efe0
  408510:	b5688f3b 	.word	0xb5688f3b
  408514:	3fa48228 	.word	0x3fa48228
  408518:	0e884455 	.word	0x0e884455
  40851c:	3fc9c155 	.word	0x3fc9c155
  408520:	03eb6f7d 	.word	0x03eb6f7d
  408524:	3fd4d612 	.word	0x3fd4d612
  408528:	55555555 	.word	0x55555555
  40852c:	3fc55555 	.word	0x3fc55555
  408530:	b12e9282 	.word	0xb12e9282
  408534:	3fb3b8c5 	.word	0x3fb3b8c5
  408538:	1b8d0159 	.word	0x1b8d0159
  40853c:	3fe6066c 	.word	0x3fe6066c
  408540:	9c598ac8 	.word	0x9c598ac8
  408544:	40002ae5 	.word	0x40002ae5
  408548:	1c8a2d4b 	.word	0x1c8a2d4b
  40854c:	40033a27 	.word	0x40033a27
  408550:	54442d18 	.word	0x54442d18
  408554:	3ff921fb 	.word	0x3ff921fb
  408558:	33145c07 	.word	0x33145c07
  40855c:	3c91a626 	.word	0x3c91a626
  408560:	54442d18 	.word	0x54442d18
  408564:	400921fb 	.word	0x400921fb
  408568:	3fefffff 	.word	0x3fefffff
  40856c:	c0100000 	.word	0xc0100000
  408570:	3fdfffff 	.word	0x3fdfffff
  408574:	3ff00000 	.word	0x3ff00000
  408578:	3fe00000 	.word	0x3fe00000
  40857c:	3c600000 	.word	0x3c600000
  408580:	ee10 0a10 	vmov	r0, s0
  408584:	4629      	mov	r1, r5
  408586:	2200      	movs	r2, #0
  408588:	4b5f      	ldr	r3, [pc, #380]	; (408708 <__ieee754_acos+0x4e8>)
  40858a:	f002 f939 	bl	40a800 <__adddf3>
  40858e:	2200      	movs	r2, #0
  408590:	4b5e      	ldr	r3, [pc, #376]	; (40870c <__ieee754_acos+0x4ec>)
  408592:	f002 fae7 	bl	40ab64 <__aeabi_dmul>
  408596:	4604      	mov	r4, r0
  408598:	460d      	mov	r5, r1
  40859a:	a343      	add	r3, pc, #268	; (adr r3, 4086a8 <__ieee754_acos+0x488>)
  40859c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085a0:	f002 fae0 	bl	40ab64 <__aeabi_dmul>
  4085a4:	a342      	add	r3, pc, #264	; (adr r3, 4086b0 <__ieee754_acos+0x490>)
  4085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085aa:	f002 f929 	bl	40a800 <__adddf3>
  4085ae:	4622      	mov	r2, r4
  4085b0:	462b      	mov	r3, r5
  4085b2:	f002 fad7 	bl	40ab64 <__aeabi_dmul>
  4085b6:	a340      	add	r3, pc, #256	; (adr r3, 4086b8 <__ieee754_acos+0x498>)
  4085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085bc:	f002 f91e 	bl	40a7fc <__aeabi_dsub>
  4085c0:	4622      	mov	r2, r4
  4085c2:	462b      	mov	r3, r5
  4085c4:	f002 face 	bl	40ab64 <__aeabi_dmul>
  4085c8:	a33d      	add	r3, pc, #244	; (adr r3, 4086c0 <__ieee754_acos+0x4a0>)
  4085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085ce:	f002 f917 	bl	40a800 <__adddf3>
  4085d2:	4622      	mov	r2, r4
  4085d4:	462b      	mov	r3, r5
  4085d6:	f002 fac5 	bl	40ab64 <__aeabi_dmul>
  4085da:	a33b      	add	r3, pc, #236	; (adr r3, 4086c8 <__ieee754_acos+0x4a8>)
  4085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085e0:	f002 f90c 	bl	40a7fc <__aeabi_dsub>
  4085e4:	4622      	mov	r2, r4
  4085e6:	462b      	mov	r3, r5
  4085e8:	f002 fabc 	bl	40ab64 <__aeabi_dmul>
  4085ec:	a338      	add	r3, pc, #224	; (adr r3, 4086d0 <__ieee754_acos+0x4b0>)
  4085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085f2:	f002 f905 	bl	40a800 <__adddf3>
  4085f6:	4622      	mov	r2, r4
  4085f8:	462b      	mov	r3, r5
  4085fa:	f002 fab3 	bl	40ab64 <__aeabi_dmul>
  4085fe:	4680      	mov	r8, r0
  408600:	4689      	mov	r9, r1
  408602:	ec45 4b10 	vmov	d0, r4, r5
  408606:	f000 ff31 	bl	40946c <__ieee754_sqrt>
  40860a:	4620      	mov	r0, r4
  40860c:	4629      	mov	r1, r5
  40860e:	a332      	add	r3, pc, #200	; (adr r3, 4086d8 <__ieee754_acos+0x4b8>)
  408610:	e9d3 2300 	ldrd	r2, r3, [r3]
  408614:	ec57 6b10 	vmov	r6, r7, d0
  408618:	f002 faa4 	bl	40ab64 <__aeabi_dmul>
  40861c:	a330      	add	r3, pc, #192	; (adr r3, 4086e0 <__ieee754_acos+0x4c0>)
  40861e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408622:	f002 f8eb 	bl	40a7fc <__aeabi_dsub>
  408626:	4622      	mov	r2, r4
  408628:	462b      	mov	r3, r5
  40862a:	f002 fa9b 	bl	40ab64 <__aeabi_dmul>
  40862e:	a32e      	add	r3, pc, #184	; (adr r3, 4086e8 <__ieee754_acos+0x4c8>)
  408630:	e9d3 2300 	ldrd	r2, r3, [r3]
  408634:	f002 f8e4 	bl	40a800 <__adddf3>
  408638:	4622      	mov	r2, r4
  40863a:	462b      	mov	r3, r5
  40863c:	f002 fa92 	bl	40ab64 <__aeabi_dmul>
  408640:	a32b      	add	r3, pc, #172	; (adr r3, 4086f0 <__ieee754_acos+0x4d0>)
  408642:	e9d3 2300 	ldrd	r2, r3, [r3]
  408646:	f002 f8d9 	bl	40a7fc <__aeabi_dsub>
  40864a:	4622      	mov	r2, r4
  40864c:	462b      	mov	r3, r5
  40864e:	f002 fa89 	bl	40ab64 <__aeabi_dmul>
  408652:	2200      	movs	r2, #0
  408654:	4b2c      	ldr	r3, [pc, #176]	; (408708 <__ieee754_acos+0x4e8>)
  408656:	f002 f8d3 	bl	40a800 <__adddf3>
  40865a:	4602      	mov	r2, r0
  40865c:	460b      	mov	r3, r1
  40865e:	4640      	mov	r0, r8
  408660:	4649      	mov	r1, r9
  408662:	f002 fba9 	bl	40adb8 <__aeabi_ddiv>
  408666:	4632      	mov	r2, r6
  408668:	463b      	mov	r3, r7
  40866a:	f002 fa7b 	bl	40ab64 <__aeabi_dmul>
  40866e:	a322      	add	r3, pc, #136	; (adr r3, 4086f8 <__ieee754_acos+0x4d8>)
  408670:	e9d3 2300 	ldrd	r2, r3, [r3]
  408674:	f002 f8c2 	bl	40a7fc <__aeabi_dsub>
  408678:	4602      	mov	r2, r0
  40867a:	460b      	mov	r3, r1
  40867c:	4630      	mov	r0, r6
  40867e:	4639      	mov	r1, r7
  408680:	f002 f8be 	bl	40a800 <__adddf3>
  408684:	4602      	mov	r2, r0
  408686:	460b      	mov	r3, r1
  408688:	f002 f8ba 	bl	40a800 <__adddf3>
  40868c:	4602      	mov	r2, r0
  40868e:	460b      	mov	r3, r1
  408690:	a11b      	add	r1, pc, #108	; (adr r1, 408700 <__ieee754_acos+0x4e0>)
  408692:	e9d1 0100 	ldrd	r0, r1, [r1]
  408696:	f002 f8b1 	bl	40a7fc <__aeabi_dsub>
  40869a:	ec41 0b10 	vmov	d0, r0, r1
  40869e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4086a2:	bf00      	nop
  4086a4:	f3af 8000 	nop.w
  4086a8:	0dfdf709 	.word	0x0dfdf709
  4086ac:	3f023de1 	.word	0x3f023de1
  4086b0:	7501b288 	.word	0x7501b288
  4086b4:	3f49efe0 	.word	0x3f49efe0
  4086b8:	b5688f3b 	.word	0xb5688f3b
  4086bc:	3fa48228 	.word	0x3fa48228
  4086c0:	0e884455 	.word	0x0e884455
  4086c4:	3fc9c155 	.word	0x3fc9c155
  4086c8:	03eb6f7d 	.word	0x03eb6f7d
  4086cc:	3fd4d612 	.word	0x3fd4d612
  4086d0:	55555555 	.word	0x55555555
  4086d4:	3fc55555 	.word	0x3fc55555
  4086d8:	b12e9282 	.word	0xb12e9282
  4086dc:	3fb3b8c5 	.word	0x3fb3b8c5
  4086e0:	1b8d0159 	.word	0x1b8d0159
  4086e4:	3fe6066c 	.word	0x3fe6066c
  4086e8:	9c598ac8 	.word	0x9c598ac8
  4086ec:	40002ae5 	.word	0x40002ae5
  4086f0:	1c8a2d4b 	.word	0x1c8a2d4b
  4086f4:	40033a27 	.word	0x40033a27
  4086f8:	33145c07 	.word	0x33145c07
  4086fc:	3c91a626 	.word	0x3c91a626
  408700:	54442d18 	.word	0x54442d18
  408704:	400921fb 	.word	0x400921fb
  408708:	3ff00000 	.word	0x3ff00000
  40870c:	3fe00000 	.word	0x3fe00000

00408710 <__ieee754_asin>:
  408710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408714:	ec55 4b10 	vmov	r4, r5, d0
  408718:	4bc7      	ldr	r3, [pc, #796]	; (408a38 <__ieee754_asin+0x328>)
  40871a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
  40871e:	b086      	sub	sp, #24
  408720:	46aa      	mov	sl, r5
  408722:	429e      	cmp	r6, r3
  408724:	dd15      	ble.n	408752 <__ieee754_asin+0x42>
  408726:	4ac5      	ldr	r2, [pc, #788]	; (408a3c <__ieee754_asin+0x32c>)
  408728:	ee10 3a10 	vmov	r3, s0
  40872c:	ee10 0a10 	vmov	r0, s0
  408730:	4629      	mov	r1, r5
  408732:	4432      	add	r2, r6
  408734:	4313      	orrs	r3, r2
  408736:	d027      	beq.n	408788 <__ieee754_asin+0x78>
  408738:	4622      	mov	r2, r4
  40873a:	462b      	mov	r3, r5
  40873c:	f002 f85e 	bl	40a7fc <__aeabi_dsub>
  408740:	4602      	mov	r2, r0
  408742:	460b      	mov	r3, r1
  408744:	f002 fb38 	bl	40adb8 <__aeabi_ddiv>
  408748:	ec41 0b10 	vmov	d0, r0, r1
  40874c:	b006      	add	sp, #24
  40874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408752:	4bbb      	ldr	r3, [pc, #748]	; (408a40 <__ieee754_asin+0x330>)
  408754:	429e      	cmp	r6, r3
  408756:	dc30      	bgt.n	4087ba <__ieee754_asin+0xaa>
  408758:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  40875c:	ee10 0a10 	vmov	r0, s0
  408760:	4629      	mov	r1, r5
  408762:	f280 8175 	bge.w	408a50 <__ieee754_asin+0x340>
  408766:	a398      	add	r3, pc, #608	; (adr r3, 4089c8 <__ieee754_asin+0x2b8>)
  408768:	e9d3 2300 	ldrd	r2, r3, [r3]
  40876c:	f002 f848 	bl	40a800 <__adddf3>
  408770:	2200      	movs	r2, #0
  408772:	4bb4      	ldr	r3, [pc, #720]	; (408a44 <__ieee754_asin+0x334>)
  408774:	f002 fc86 	bl	40b084 <__aeabi_dcmpgt>
  408778:	b1f8      	cbz	r0, 4087ba <__ieee754_asin+0xaa>
  40877a:	4620      	mov	r0, r4
  40877c:	4629      	mov	r1, r5
  40877e:	ec41 0b10 	vmov	d0, r0, r1
  408782:	b006      	add	sp, #24
  408784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408788:	a391      	add	r3, pc, #580	; (adr r3, 4089d0 <__ieee754_asin+0x2c0>)
  40878a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40878e:	f002 f9e9 	bl	40ab64 <__aeabi_dmul>
  408792:	4606      	mov	r6, r0
  408794:	460f      	mov	r7, r1
  408796:	4620      	mov	r0, r4
  408798:	4629      	mov	r1, r5
  40879a:	a38f      	add	r3, pc, #572	; (adr r3, 4089d8 <__ieee754_asin+0x2c8>)
  40879c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087a0:	f002 f9e0 	bl	40ab64 <__aeabi_dmul>
  4087a4:	4602      	mov	r2, r0
  4087a6:	460b      	mov	r3, r1
  4087a8:	4630      	mov	r0, r6
  4087aa:	4639      	mov	r1, r7
  4087ac:	f002 f828 	bl	40a800 <__adddf3>
  4087b0:	ec41 0b10 	vmov	d0, r0, r1
  4087b4:	b006      	add	sp, #24
  4087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4087ba:	ec45 4b10 	vmov	d0, r4, r5
  4087be:	f001 febf 	bl	40a540 <fabs>
  4087c2:	2000      	movs	r0, #0
  4087c4:	499f      	ldr	r1, [pc, #636]	; (408a44 <__ieee754_asin+0x334>)
  4087c6:	ec53 2b10 	vmov	r2, r3, d0
  4087ca:	f002 f817 	bl	40a7fc <__aeabi_dsub>
  4087ce:	2200      	movs	r2, #0
  4087d0:	4b9d      	ldr	r3, [pc, #628]	; (408a48 <__ieee754_asin+0x338>)
  4087d2:	f002 f9c7 	bl	40ab64 <__aeabi_dmul>
  4087d6:	4604      	mov	r4, r0
  4087d8:	460d      	mov	r5, r1
  4087da:	a381      	add	r3, pc, #516	; (adr r3, 4089e0 <__ieee754_asin+0x2d0>)
  4087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087e0:	f002 f9c0 	bl	40ab64 <__aeabi_dmul>
  4087e4:	a380      	add	r3, pc, #512	; (adr r3, 4089e8 <__ieee754_asin+0x2d8>)
  4087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087ea:	f002 f809 	bl	40a800 <__adddf3>
  4087ee:	4622      	mov	r2, r4
  4087f0:	462b      	mov	r3, r5
  4087f2:	f002 f9b7 	bl	40ab64 <__aeabi_dmul>
  4087f6:	a37e      	add	r3, pc, #504	; (adr r3, 4089f0 <__ieee754_asin+0x2e0>)
  4087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087fc:	f001 fffe 	bl	40a7fc <__aeabi_dsub>
  408800:	4622      	mov	r2, r4
  408802:	462b      	mov	r3, r5
  408804:	f002 f9ae 	bl	40ab64 <__aeabi_dmul>
  408808:	a37b      	add	r3, pc, #492	; (adr r3, 4089f8 <__ieee754_asin+0x2e8>)
  40880a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40880e:	f001 fff7 	bl	40a800 <__adddf3>
  408812:	4622      	mov	r2, r4
  408814:	462b      	mov	r3, r5
  408816:	f002 f9a5 	bl	40ab64 <__aeabi_dmul>
  40881a:	a379      	add	r3, pc, #484	; (adr r3, 408a00 <__ieee754_asin+0x2f0>)
  40881c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408820:	f001 ffec 	bl	40a7fc <__aeabi_dsub>
  408824:	4622      	mov	r2, r4
  408826:	462b      	mov	r3, r5
  408828:	f002 f99c 	bl	40ab64 <__aeabi_dmul>
  40882c:	a376      	add	r3, pc, #472	; (adr r3, 408a08 <__ieee754_asin+0x2f8>)
  40882e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408832:	f001 ffe5 	bl	40a800 <__adddf3>
  408836:	4622      	mov	r2, r4
  408838:	462b      	mov	r3, r5
  40883a:	f002 f993 	bl	40ab64 <__aeabi_dmul>
  40883e:	a374      	add	r3, pc, #464	; (adr r3, 408a10 <__ieee754_asin+0x300>)
  408840:	e9d3 2300 	ldrd	r2, r3, [r3]
  408844:	e9cd 0100 	strd	r0, r1, [sp]
  408848:	4620      	mov	r0, r4
  40884a:	4629      	mov	r1, r5
  40884c:	f002 f98a 	bl	40ab64 <__aeabi_dmul>
  408850:	a371      	add	r3, pc, #452	; (adr r3, 408a18 <__ieee754_asin+0x308>)
  408852:	e9d3 2300 	ldrd	r2, r3, [r3]
  408856:	f001 ffd1 	bl	40a7fc <__aeabi_dsub>
  40885a:	4622      	mov	r2, r4
  40885c:	462b      	mov	r3, r5
  40885e:	f002 f981 	bl	40ab64 <__aeabi_dmul>
  408862:	a36f      	add	r3, pc, #444	; (adr r3, 408a20 <__ieee754_asin+0x310>)
  408864:	e9d3 2300 	ldrd	r2, r3, [r3]
  408868:	f001 ffca 	bl	40a800 <__adddf3>
  40886c:	4622      	mov	r2, r4
  40886e:	462b      	mov	r3, r5
  408870:	f002 f978 	bl	40ab64 <__aeabi_dmul>
  408874:	a36c      	add	r3, pc, #432	; (adr r3, 408a28 <__ieee754_asin+0x318>)
  408876:	e9d3 2300 	ldrd	r2, r3, [r3]
  40887a:	f001 ffbf 	bl	40a7fc <__aeabi_dsub>
  40887e:	4622      	mov	r2, r4
  408880:	462b      	mov	r3, r5
  408882:	f002 f96f 	bl	40ab64 <__aeabi_dmul>
  408886:	4b6f      	ldr	r3, [pc, #444]	; (408a44 <__ieee754_asin+0x334>)
  408888:	2200      	movs	r2, #0
  40888a:	f001 ffb9 	bl	40a800 <__adddf3>
  40888e:	ec45 4b10 	vmov	d0, r4, r5
  408892:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408896:	f000 fde9 	bl	40946c <__ieee754_sqrt>
  40889a:	4b6c      	ldr	r3, [pc, #432]	; (408a4c <__ieee754_asin+0x33c>)
  40889c:	429e      	cmp	r6, r3
  40889e:	ec59 8b10 	vmov	r8, r9, d0
  4088a2:	dc6d      	bgt.n	408980 <__ieee754_asin+0x270>
  4088a4:	ee10 2a10 	vmov	r2, s0
  4088a8:	ee10 0a10 	vmov	r0, s0
  4088ac:	464b      	mov	r3, r9
  4088ae:	4649      	mov	r1, r9
  4088b0:	2600      	movs	r6, #0
  4088b2:	f001 ffa5 	bl	40a800 <__adddf3>
  4088b6:	464f      	mov	r7, r9
  4088b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4088bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4088c0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4088c4:	f002 fa78 	bl	40adb8 <__aeabi_ddiv>
  4088c8:	4602      	mov	r2, r0
  4088ca:	460b      	mov	r3, r1
  4088cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4088d0:	f002 f948 	bl	40ab64 <__aeabi_dmul>
  4088d4:	4632      	mov	r2, r6
  4088d6:	464b      	mov	r3, r9
  4088d8:	e9cd 0100 	strd	r0, r1, [sp]
  4088dc:	4630      	mov	r0, r6
  4088de:	4649      	mov	r1, r9
  4088e0:	f002 f940 	bl	40ab64 <__aeabi_dmul>
  4088e4:	4602      	mov	r2, r0
  4088e6:	460b      	mov	r3, r1
  4088e8:	4620      	mov	r0, r4
  4088ea:	4629      	mov	r1, r5
  4088ec:	f001 ff86 	bl	40a7fc <__aeabi_dsub>
  4088f0:	4604      	mov	r4, r0
  4088f2:	460d      	mov	r5, r1
  4088f4:	4632      	mov	r2, r6
  4088f6:	464b      	mov	r3, r9
  4088f8:	4640      	mov	r0, r8
  4088fa:	4649      	mov	r1, r9
  4088fc:	f001 ff80 	bl	40a800 <__adddf3>
  408900:	4602      	mov	r2, r0
  408902:	460b      	mov	r3, r1
  408904:	4620      	mov	r0, r4
  408906:	4629      	mov	r1, r5
  408908:	f002 fa56 	bl	40adb8 <__aeabi_ddiv>
  40890c:	4602      	mov	r2, r0
  40890e:	460b      	mov	r3, r1
  408910:	f001 ff76 	bl	40a800 <__adddf3>
  408914:	4602      	mov	r2, r0
  408916:	460b      	mov	r3, r1
  408918:	a12f      	add	r1, pc, #188	; (adr r1, 4089d8 <__ieee754_asin+0x2c8>)
  40891a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40891e:	f001 ff6d 	bl	40a7fc <__aeabi_dsub>
  408922:	4602      	mov	r2, r0
  408924:	460b      	mov	r3, r1
  408926:	e9dd 0100 	ldrd	r0, r1, [sp]
  40892a:	f001 ff67 	bl	40a7fc <__aeabi_dsub>
  40892e:	4632      	mov	r2, r6
  408930:	4604      	mov	r4, r0
  408932:	460d      	mov	r5, r1
  408934:	463b      	mov	r3, r7
  408936:	4630      	mov	r0, r6
  408938:	4649      	mov	r1, r9
  40893a:	f001 ff61 	bl	40a800 <__adddf3>
  40893e:	4602      	mov	r2, r0
  408940:	460b      	mov	r3, r1
  408942:	a13b      	add	r1, pc, #236	; (adr r1, 408a30 <__ieee754_asin+0x320>)
  408944:	e9d1 0100 	ldrd	r0, r1, [r1]
  408948:	f001 ff58 	bl	40a7fc <__aeabi_dsub>
  40894c:	4602      	mov	r2, r0
  40894e:	460b      	mov	r3, r1
  408950:	4620      	mov	r0, r4
  408952:	4629      	mov	r1, r5
  408954:	f001 ff52 	bl	40a7fc <__aeabi_dsub>
  408958:	4602      	mov	r2, r0
  40895a:	460b      	mov	r3, r1
  40895c:	a134      	add	r1, pc, #208	; (adr r1, 408a30 <__ieee754_asin+0x320>)
  40895e:	e9d1 0100 	ldrd	r0, r1, [r1]
  408962:	f001 ff4b 	bl	40a7fc <__aeabi_dsub>
  408966:	4602      	mov	r2, r0
  408968:	460b      	mov	r3, r1
  40896a:	f1ba 0f00 	cmp.w	sl, #0
  40896e:	f340 80e5 	ble.w	408b3c <__ieee754_asin+0x42c>
  408972:	4610      	mov	r0, r2
  408974:	4619      	mov	r1, r3
  408976:	ec41 0b10 	vmov	d0, r0, r1
  40897a:	b006      	add	sp, #24
  40897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408984:	e9dd 0100 	ldrd	r0, r1, [sp]
  408988:	f002 fa16 	bl	40adb8 <__aeabi_ddiv>
  40898c:	4602      	mov	r2, r0
  40898e:	460b      	mov	r3, r1
  408990:	4640      	mov	r0, r8
  408992:	4649      	mov	r1, r9
  408994:	f002 f8e6 	bl	40ab64 <__aeabi_dmul>
  408998:	4642      	mov	r2, r8
  40899a:	464b      	mov	r3, r9
  40899c:	f001 ff30 	bl	40a800 <__adddf3>
  4089a0:	4602      	mov	r2, r0
  4089a2:	460b      	mov	r3, r1
  4089a4:	f001 ff2c 	bl	40a800 <__adddf3>
  4089a8:	a30b      	add	r3, pc, #44	; (adr r3, 4089d8 <__ieee754_asin+0x2c8>)
  4089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4089ae:	f001 ff25 	bl	40a7fc <__aeabi_dsub>
  4089b2:	4602      	mov	r2, r0
  4089b4:	460b      	mov	r3, r1
  4089b6:	a106      	add	r1, pc, #24	; (adr r1, 4089d0 <__ieee754_asin+0x2c0>)
  4089b8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4089bc:	f001 ff1e 	bl	40a7fc <__aeabi_dsub>
  4089c0:	4602      	mov	r2, r0
  4089c2:	460b      	mov	r3, r1
  4089c4:	e7d1      	b.n	40896a <__ieee754_asin+0x25a>
  4089c6:	bf00      	nop
  4089c8:	8800759c 	.word	0x8800759c
  4089cc:	7e37e43c 	.word	0x7e37e43c
  4089d0:	54442d18 	.word	0x54442d18
  4089d4:	3ff921fb 	.word	0x3ff921fb
  4089d8:	33145c07 	.word	0x33145c07
  4089dc:	3c91a626 	.word	0x3c91a626
  4089e0:	0dfdf709 	.word	0x0dfdf709
  4089e4:	3f023de1 	.word	0x3f023de1
  4089e8:	7501b288 	.word	0x7501b288
  4089ec:	3f49efe0 	.word	0x3f49efe0
  4089f0:	b5688f3b 	.word	0xb5688f3b
  4089f4:	3fa48228 	.word	0x3fa48228
  4089f8:	0e884455 	.word	0x0e884455
  4089fc:	3fc9c155 	.word	0x3fc9c155
  408a00:	03eb6f7d 	.word	0x03eb6f7d
  408a04:	3fd4d612 	.word	0x3fd4d612
  408a08:	55555555 	.word	0x55555555
  408a0c:	3fc55555 	.word	0x3fc55555
  408a10:	b12e9282 	.word	0xb12e9282
  408a14:	3fb3b8c5 	.word	0x3fb3b8c5
  408a18:	1b8d0159 	.word	0x1b8d0159
  408a1c:	3fe6066c 	.word	0x3fe6066c
  408a20:	9c598ac8 	.word	0x9c598ac8
  408a24:	40002ae5 	.word	0x40002ae5
  408a28:	1c8a2d4b 	.word	0x1c8a2d4b
  408a2c:	40033a27 	.word	0x40033a27
  408a30:	54442d18 	.word	0x54442d18
  408a34:	3fe921fb 	.word	0x3fe921fb
  408a38:	3fefffff 	.word	0x3fefffff
  408a3c:	c0100000 	.word	0xc0100000
  408a40:	3fdfffff 	.word	0x3fdfffff
  408a44:	3ff00000 	.word	0x3ff00000
  408a48:	3fe00000 	.word	0x3fe00000
  408a4c:	3fef3332 	.word	0x3fef3332
  408a50:	ee10 2a10 	vmov	r2, s0
  408a54:	462b      	mov	r3, r5
  408a56:	f002 f885 	bl	40ab64 <__aeabi_dmul>
  408a5a:	4606      	mov	r6, r0
  408a5c:	460f      	mov	r7, r1
  408a5e:	a33b      	add	r3, pc, #236	; (adr r3, 408b4c <__ieee754_asin+0x43c>)
  408a60:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a64:	f002 f87e 	bl	40ab64 <__aeabi_dmul>
  408a68:	a33a      	add	r3, pc, #232	; (adr r3, 408b54 <__ieee754_asin+0x444>)
  408a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a6e:	f001 fec7 	bl	40a800 <__adddf3>
  408a72:	4632      	mov	r2, r6
  408a74:	463b      	mov	r3, r7
  408a76:	f002 f875 	bl	40ab64 <__aeabi_dmul>
  408a7a:	a338      	add	r3, pc, #224	; (adr r3, 408b5c <__ieee754_asin+0x44c>)
  408a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a80:	f001 febc 	bl	40a7fc <__aeabi_dsub>
  408a84:	4632      	mov	r2, r6
  408a86:	463b      	mov	r3, r7
  408a88:	f002 f86c 	bl	40ab64 <__aeabi_dmul>
  408a8c:	a335      	add	r3, pc, #212	; (adr r3, 408b64 <__ieee754_asin+0x454>)
  408a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a92:	f001 feb5 	bl	40a800 <__adddf3>
  408a96:	4632      	mov	r2, r6
  408a98:	463b      	mov	r3, r7
  408a9a:	f002 f863 	bl	40ab64 <__aeabi_dmul>
  408a9e:	a333      	add	r3, pc, #204	; (adr r3, 408b6c <__ieee754_asin+0x45c>)
  408aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
  408aa4:	f001 feaa 	bl	40a7fc <__aeabi_dsub>
  408aa8:	4632      	mov	r2, r6
  408aaa:	463b      	mov	r3, r7
  408aac:	f002 f85a 	bl	40ab64 <__aeabi_dmul>
  408ab0:	a330      	add	r3, pc, #192	; (adr r3, 408b74 <__ieee754_asin+0x464>)
  408ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ab6:	f001 fea3 	bl	40a800 <__adddf3>
  408aba:	4632      	mov	r2, r6
  408abc:	463b      	mov	r3, r7
  408abe:	f002 f851 	bl	40ab64 <__aeabi_dmul>
  408ac2:	4680      	mov	r8, r0
  408ac4:	4689      	mov	r9, r1
  408ac6:	4630      	mov	r0, r6
  408ac8:	4639      	mov	r1, r7
  408aca:	a32c      	add	r3, pc, #176	; (adr r3, 408b7c <__ieee754_asin+0x46c>)
  408acc:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ad0:	f002 f848 	bl	40ab64 <__aeabi_dmul>
  408ad4:	a32b      	add	r3, pc, #172	; (adr r3, 408b84 <__ieee754_asin+0x474>)
  408ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ada:	f001 fe8f 	bl	40a7fc <__aeabi_dsub>
  408ade:	4632      	mov	r2, r6
  408ae0:	463b      	mov	r3, r7
  408ae2:	f002 f83f 	bl	40ab64 <__aeabi_dmul>
  408ae6:	a329      	add	r3, pc, #164	; (adr r3, 408b8c <__ieee754_asin+0x47c>)
  408ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
  408aec:	f001 fe88 	bl	40a800 <__adddf3>
  408af0:	4632      	mov	r2, r6
  408af2:	463b      	mov	r3, r7
  408af4:	f002 f836 	bl	40ab64 <__aeabi_dmul>
  408af8:	a326      	add	r3, pc, #152	; (adr r3, 408b94 <__ieee754_asin+0x484>)
  408afa:	e9d3 2300 	ldrd	r2, r3, [r3]
  408afe:	f001 fe7d 	bl	40a7fc <__aeabi_dsub>
  408b02:	4632      	mov	r2, r6
  408b04:	463b      	mov	r3, r7
  408b06:	f002 f82d 	bl	40ab64 <__aeabi_dmul>
  408b0a:	2200      	movs	r2, #0
  408b0c:	4b0e      	ldr	r3, [pc, #56]	; (408b48 <__ieee754_asin+0x438>)
  408b0e:	f001 fe77 	bl	40a800 <__adddf3>
  408b12:	4602      	mov	r2, r0
  408b14:	460b      	mov	r3, r1
  408b16:	4640      	mov	r0, r8
  408b18:	4649      	mov	r1, r9
  408b1a:	f002 f94d 	bl	40adb8 <__aeabi_ddiv>
  408b1e:	4602      	mov	r2, r0
  408b20:	460b      	mov	r3, r1
  408b22:	4620      	mov	r0, r4
  408b24:	4629      	mov	r1, r5
  408b26:	f002 f81d 	bl	40ab64 <__aeabi_dmul>
  408b2a:	4622      	mov	r2, r4
  408b2c:	462b      	mov	r3, r5
  408b2e:	f001 fe67 	bl	40a800 <__adddf3>
  408b32:	ec41 0b10 	vmov	d0, r0, r1
  408b36:	b006      	add	sp, #24
  408b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b3c:	4610      	mov	r0, r2
  408b3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
  408b42:	e601      	b.n	408748 <__ieee754_asin+0x38>
  408b44:	f3af 8000 	nop.w
  408b48:	3ff00000 	.word	0x3ff00000
  408b4c:	0dfdf709 	.word	0x0dfdf709
  408b50:	3f023de1 	.word	0x3f023de1
  408b54:	7501b288 	.word	0x7501b288
  408b58:	3f49efe0 	.word	0x3f49efe0
  408b5c:	b5688f3b 	.word	0xb5688f3b
  408b60:	3fa48228 	.word	0x3fa48228
  408b64:	0e884455 	.word	0x0e884455
  408b68:	3fc9c155 	.word	0x3fc9c155
  408b6c:	03eb6f7d 	.word	0x03eb6f7d
  408b70:	3fd4d612 	.word	0x3fd4d612
  408b74:	55555555 	.word	0x55555555
  408b78:	3fc55555 	.word	0x3fc55555
  408b7c:	b12e9282 	.word	0xb12e9282
  408b80:	3fb3b8c5 	.word	0x3fb3b8c5
  408b84:	1b8d0159 	.word	0x1b8d0159
  408b88:	3fe6066c 	.word	0x3fe6066c
  408b8c:	9c598ac8 	.word	0x9c598ac8
  408b90:	40002ae5 	.word	0x40002ae5
  408b94:	1c8a2d4b 	.word	0x1c8a2d4b
  408b98:	40033a27 	.word	0x40033a27
  408b9c:	00000000 	.word	0x00000000

00408ba0 <__ieee754_atan2>:
  408ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408ba4:	ec57 6b11 	vmov	r6, r7, d1
  408ba8:	4273      	negs	r3, r6
  408baa:	f027 4e00 	bic.w	lr, r7, #2147483648	; 0x80000000
  408bae:	4880      	ldr	r0, [pc, #512]	; (408db0 <__ieee754_atan2+0x210>)
  408bb0:	ee11 2a10 	vmov	r2, s2
  408bb4:	4333      	orrs	r3, r6
  408bb6:	4639      	mov	r1, r7
  408bb8:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
  408bbc:	4283      	cmp	r3, r0
  408bbe:	ec55 4b10 	vmov	r4, r5, d0
  408bc2:	d843      	bhi.n	408c4c <__ieee754_atan2+0xac>
  408bc4:	4263      	negs	r3, r4
  408bc6:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
  408bca:	46a9      	mov	r9, r5
  408bcc:	4323      	orrs	r3, r4
  408bce:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
  408bd2:	4283      	cmp	r3, r0
  408bd4:	d83a      	bhi.n	408c4c <__ieee754_atan2+0xac>
  408bd6:	4b77      	ldr	r3, [pc, #476]	; (408db4 <__ieee754_atan2+0x214>)
  408bd8:	443b      	add	r3, r7
  408bda:	4333      	orrs	r3, r6
  408bdc:	d052      	beq.n	408c84 <__ieee754_atan2+0xe4>
  408bde:	ea4f 78a7 	mov.w	r8, r7, asr #30
  408be2:	ea5a 0304 	orrs.w	r3, sl, r4
  408be6:	f008 0802 	and.w	r8, r8, #2
  408bea:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
  408bee:	d037      	beq.n	408c60 <__ieee754_atan2+0xc0>
  408bf0:	ea5e 0302 	orrs.w	r3, lr, r2
  408bf4:	d03f      	beq.n	408c76 <__ieee754_atan2+0xd6>
  408bf6:	4b6e      	ldr	r3, [pc, #440]	; (408db0 <__ieee754_atan2+0x210>)
  408bf8:	459e      	cmp	lr, r3
  408bfa:	d051      	beq.n	408ca0 <__ieee754_atan2+0x100>
  408bfc:	4b6c      	ldr	r3, [pc, #432]	; (408db0 <__ieee754_atan2+0x210>)
  408bfe:	459a      	cmp	sl, r3
  408c00:	d039      	beq.n	408c76 <__ieee754_atan2+0xd6>
  408c02:	ebce 0e0a 	rsb	lr, lr, sl
  408c06:	ea4f 5e2e 	mov.w	lr, lr, asr #20
  408c0a:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
  408c0e:	dc43      	bgt.n	408c98 <__ieee754_atan2+0xf8>
  408c10:	f11e 0f3c 	cmn.w	lr, #60	; 0x3c
  408c14:	da7a      	bge.n	408d0c <__ieee754_atan2+0x16c>
  408c16:	2900      	cmp	r1, #0
  408c18:	da78      	bge.n	408d0c <__ieee754_atan2+0x16c>
  408c1a:	2000      	movs	r0, #0
  408c1c:	2100      	movs	r1, #0
  408c1e:	f1b8 0f01 	cmp.w	r8, #1
  408c22:	d06d      	beq.n	408d00 <__ieee754_atan2+0x160>
  408c24:	f1b8 0f02 	cmp.w	r8, #2
  408c28:	d05a      	beq.n	408ce0 <__ieee754_atan2+0x140>
  408c2a:	f1b8 0f00 	cmp.w	r8, #0
  408c2e:	d053      	beq.n	408cd8 <__ieee754_atan2+0x138>
  408c30:	a349      	add	r3, pc, #292	; (adr r3, 408d58 <__ieee754_atan2+0x1b8>)
  408c32:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c36:	f001 fde1 	bl	40a7fc <__aeabi_dsub>
  408c3a:	a349      	add	r3, pc, #292	; (adr r3, 408d60 <__ieee754_atan2+0x1c0>)
  408c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c40:	f001 fddc 	bl	40a7fc <__aeabi_dsub>
  408c44:	ec41 0b10 	vmov	d0, r0, r1
  408c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c4c:	4630      	mov	r0, r6
  408c4e:	4639      	mov	r1, r7
  408c50:	4622      	mov	r2, r4
  408c52:	462b      	mov	r3, r5
  408c54:	f001 fdd4 	bl	40a800 <__adddf3>
  408c58:	ec41 0b10 	vmov	d0, r0, r1
  408c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c60:	f1b8 0f03 	cmp.w	r8, #3
  408c64:	d8c4      	bhi.n	408bf0 <__ieee754_atan2+0x50>
  408c66:	e8df f008 	tbb	[pc, r8]
  408c6a:	1515      	.short	0x1515
  408c6c:	1102      	.short	0x1102
  408c6e:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 408d60 <__ieee754_atan2+0x1c0>
  408c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c76:	f1b9 0f00 	cmp.w	r9, #0
  408c7a:	db29      	blt.n	408cd0 <__ieee754_atan2+0x130>
  408c7c:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 408d68 <__ieee754_atan2+0x1c8>
  408c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408c88:	f001 bab6 	b.w	40a1f8 <atan>
  408c8c:	ed9f 0b38 	vldr	d0, [pc, #224]	; 408d70 <__ieee754_atan2+0x1d0>
  408c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c98:	a133      	add	r1, pc, #204	; (adr r1, 408d68 <__ieee754_atan2+0x1c8>)
  408c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
  408c9e:	e7be      	b.n	408c1e <__ieee754_atan2+0x7e>
  408ca0:	45f2      	cmp	sl, lr
  408ca2:	d042      	beq.n	408d2a <__ieee754_atan2+0x18a>
  408ca4:	f1b8 0f03 	cmp.w	r8, #3
  408ca8:	d8a8      	bhi.n	408bfc <__ieee754_atan2+0x5c>
  408caa:	a301      	add	r3, pc, #4	; (adr r3, 408cb0 <__ieee754_atan2+0x110>)
  408cac:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
  408cb0:	00408cc1 	.word	0x00408cc1
  408cb4:	00408cc9 	.word	0x00408cc9
  408cb8:	00408c6f 	.word	0x00408c6f
  408cbc:	00408c8d 	.word	0x00408c8d
  408cc0:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408d78 <__ieee754_atan2+0x1d8>
  408cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cc8:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408d80 <__ieee754_atan2+0x1e0>
  408ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cd0:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 408d88 <__ieee754_atan2+0x1e8>
  408cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cd8:	ec41 0b10 	vmov	d0, r0, r1
  408cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ce0:	a31d      	add	r3, pc, #116	; (adr r3, 408d58 <__ieee754_atan2+0x1b8>)
  408ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ce6:	f001 fd89 	bl	40a7fc <__aeabi_dsub>
  408cea:	4602      	mov	r2, r0
  408cec:	460b      	mov	r3, r1
  408cee:	a11c      	add	r1, pc, #112	; (adr r1, 408d60 <__ieee754_atan2+0x1c0>)
  408cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
  408cf4:	f001 fd82 	bl	40a7fc <__aeabi_dsub>
  408cf8:	ec41 0b10 	vmov	d0, r0, r1
  408cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d00:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408d04:	ec41 0b10 	vmov	d0, r0, r1
  408d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d0c:	4632      	mov	r2, r6
  408d0e:	463b      	mov	r3, r7
  408d10:	4620      	mov	r0, r4
  408d12:	4629      	mov	r1, r5
  408d14:	f002 f850 	bl	40adb8 <__aeabi_ddiv>
  408d18:	ec41 0b10 	vmov	d0, r0, r1
  408d1c:	f001 fc10 	bl	40a540 <fabs>
  408d20:	f001 fa6a 	bl	40a1f8 <atan>
  408d24:	ec51 0b10 	vmov	r0, r1, d0
  408d28:	e779      	b.n	408c1e <__ieee754_atan2+0x7e>
  408d2a:	f1b8 0f03 	cmp.w	r8, #3
  408d2e:	d8a2      	bhi.n	408c76 <__ieee754_atan2+0xd6>
  408d30:	e8df f008 	tbb	[pc, r8]
  408d34:	060a0e02 	.word	0x060a0e02
  408d38:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408d90 <__ieee754_atan2+0x1f0>
  408d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d40:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408d98 <__ieee754_atan2+0x1f8>
  408d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d48:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408da0 <__ieee754_atan2+0x200>
  408d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d50:	ed9f 0b15 	vldr	d0, [pc, #84]	; 408da8 <__ieee754_atan2+0x208>
  408d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d58:	33145c07 	.word	0x33145c07
  408d5c:	3ca1a626 	.word	0x3ca1a626
  408d60:	54442d18 	.word	0x54442d18
  408d64:	400921fb 	.word	0x400921fb
  408d68:	54442d18 	.word	0x54442d18
  408d6c:	3ff921fb 	.word	0x3ff921fb
  408d70:	54442d18 	.word	0x54442d18
  408d74:	c00921fb 	.word	0xc00921fb
	...
  408d84:	80000000 	.word	0x80000000
  408d88:	54442d18 	.word	0x54442d18
  408d8c:	bff921fb 	.word	0xbff921fb
  408d90:	54442d18 	.word	0x54442d18
  408d94:	3fe921fb 	.word	0x3fe921fb
  408d98:	7f3321d2 	.word	0x7f3321d2
  408d9c:	c002d97c 	.word	0xc002d97c
  408da0:	7f3321d2 	.word	0x7f3321d2
  408da4:	4002d97c 	.word	0x4002d97c
  408da8:	54442d18 	.word	0x54442d18
  408dac:	bfe921fb 	.word	0xbfe921fb
  408db0:	7ff00000 	.word	0x7ff00000
  408db4:	c0100000 	.word	0xc0100000

00408db8 <__ieee754_fmod>:
  408db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dbc:	ec55 4b11 	vmov	r4, r5, d1
  408dc0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  408dc4:	46ac      	mov	ip, r5
  408dc6:	ee11 1a10 	vmov	r1, s2
  408dca:	ea52 0004 	orrs.w	r0, r2, r4
  408dce:	ec59 8b10 	vmov	r8, r9, d0
  408dd2:	f009 4700 	and.w	r7, r9, #2147483648	; 0x80000000
  408dd6:	ea87 0b09 	eor.w	fp, r7, r9
  408dda:	d028      	beq.n	408e2e <__ieee754_fmod+0x76>
  408ddc:	4888      	ldr	r0, [pc, #544]	; (409000 <__ieee754_fmod+0x248>)
  408dde:	4583      	cmp	fp, r0
  408de0:	dc25      	bgt.n	408e2e <__ieee754_fmod+0x76>
  408de2:	4260      	negs	r0, r4
  408de4:	f8df e230 	ldr.w	lr, [pc, #560]	; 409018 <__ieee754_fmod+0x260>
  408de8:	4320      	orrs	r0, r4
  408dea:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
  408dee:	4570      	cmp	r0, lr
  408df0:	d81d      	bhi.n	408e2e <__ieee754_fmod+0x76>
  408df2:	4593      	cmp	fp, r2
  408df4:	ee10 aa10 	vmov	sl, s0
  408df8:	4643      	mov	r3, r8
  408dfa:	4626      	mov	r6, r4
  408dfc:	dc06      	bgt.n	408e0c <__ieee754_fmod+0x54>
  408dfe:	f2c0 80e9 	blt.w	408fd4 <__ieee754_fmod+0x21c>
  408e02:	45a0      	cmp	r8, r4
  408e04:	f0c0 80e6 	bcc.w	408fd4 <__ieee754_fmod+0x21c>
  408e08:	f000 80dc 	beq.w	408fc4 <__ieee754_fmod+0x20c>
  408e0c:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
  408e10:	da1b      	bge.n	408e4a <__ieee754_fmod+0x92>
  408e12:	f1bb 0f00 	cmp.w	fp, #0
  408e16:	f040 80b2 	bne.w	408f7e <__ieee754_fmod+0x1c6>
  408e1a:	f1ba 0f00 	cmp.w	sl, #0
  408e1e:	4654      	mov	r4, sl
  408e20:	4878      	ldr	r0, [pc, #480]	; (409004 <__ieee754_fmod+0x24c>)
  408e22:	dd16      	ble.n	408e52 <__ieee754_fmod+0x9a>
  408e24:	0064      	lsls	r4, r4, #1
  408e26:	3801      	subs	r0, #1
  408e28:	2c00      	cmp	r4, #0
  408e2a:	dcfb      	bgt.n	408e24 <__ieee754_fmod+0x6c>
  408e2c:	e011      	b.n	408e52 <__ieee754_fmod+0x9a>
  408e2e:	4622      	mov	r2, r4
  408e30:	462b      	mov	r3, r5
  408e32:	4640      	mov	r0, r8
  408e34:	4649      	mov	r1, r9
  408e36:	f001 fe95 	bl	40ab64 <__aeabi_dmul>
  408e3a:	4602      	mov	r2, r0
  408e3c:	460b      	mov	r3, r1
  408e3e:	f001 ffbb 	bl	40adb8 <__aeabi_ddiv>
  408e42:	ec41 0b10 	vmov	d0, r0, r1
  408e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408e4a:	ea4f 502b 	mov.w	r0, fp, asr #20
  408e4e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
  408e52:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
  408e56:	da0d      	bge.n	408e74 <__ieee754_fmod+0xbc>
  408e58:	2a00      	cmp	r2, #0
  408e5a:	f040 8087 	bne.w	408f6c <__ieee754_fmod+0x1b4>
  408e5e:	2900      	cmp	r1, #0
  408e60:	460c      	mov	r4, r1
  408e62:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 409004 <__ieee754_fmod+0x24c>
  408e66:	dd09      	ble.n	408e7c <__ieee754_fmod+0xc4>
  408e68:	0064      	lsls	r4, r4, #1
  408e6a:	f10e 3eff 	add.w	lr, lr, #4294967295
  408e6e:	2c00      	cmp	r4, #0
  408e70:	dcfa      	bgt.n	408e68 <__ieee754_fmod+0xb0>
  408e72:	e003      	b.n	408e7c <__ieee754_fmod+0xc4>
  408e74:	ea4f 5e22 	mov.w	lr, r2, asr #20
  408e78:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
  408e7c:	4c62      	ldr	r4, [pc, #392]	; (409008 <__ieee754_fmod+0x250>)
  408e7e:	42a0      	cmp	r0, r4
  408e80:	db63      	blt.n	408f4a <__ieee754_fmod+0x192>
  408e82:	f3cb 0513 	ubfx	r5, fp, #0, #20
  408e86:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
  408e8a:	4c5f      	ldr	r4, [pc, #380]	; (409008 <__ieee754_fmod+0x250>)
  408e8c:	45a6      	cmp	lr, r4
  408e8e:	db4e      	blt.n	408f2e <__ieee754_fmod+0x176>
  408e90:	f3cc 0113 	ubfx	r1, ip, #0, #20
  408e94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408e98:	ebce 0000 	rsb	r0, lr, r0
  408e9c:	e005      	b.n	408eaa <__ieee754_fmod+0xf2>
  408e9e:	0063      	lsls	r3, r4, #1
  408ea0:	4314      	orrs	r4, r2
  408ea2:	eb0c 0542 	add.w	r5, ip, r2, lsl #1
  408ea6:	d00f      	beq.n	408ec8 <__ieee754_fmod+0x110>
  408ea8:	3801      	subs	r0, #1
  408eaa:	1b9c      	subs	r4, r3, r6
  408eac:	1a6a      	subs	r2, r5, r1
  408eae:	b198      	cbz	r0, 408ed8 <__ieee754_fmod+0x120>
  408eb0:	42b3      	cmp	r3, r6
  408eb2:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
  408eb6:	d200      	bcs.n	408eba <__ieee754_fmod+0x102>
  408eb8:	3a01      	subs	r2, #1
  408eba:	2a00      	cmp	r2, #0
  408ebc:	daef      	bge.n	408e9e <__ieee754_fmod+0xe6>
  408ebe:	0fda      	lsrs	r2, r3, #31
  408ec0:	005b      	lsls	r3, r3, #1
  408ec2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  408ec6:	e7ef      	b.n	408ea8 <__ieee754_fmod+0xf0>
  408ec8:	4b50      	ldr	r3, [pc, #320]	; (40900c <__ieee754_fmod+0x254>)
  408eca:	0fff      	lsrs	r7, r7, #31
  408ecc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
  408ed0:	ed97 0b00 	vldr	d0, [r7]
  408ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ed8:	429e      	cmp	r6, r3
  408eda:	4611      	mov	r1, r2
  408edc:	d844      	bhi.n	408f68 <__ieee754_fmod+0x1b0>
  408ede:	2900      	cmp	r1, #0
  408ee0:	db7c      	blt.n	408fdc <__ieee754_fmod+0x224>
  408ee2:	1b9b      	subs	r3, r3, r6
  408ee4:	ea51 0203 	orrs.w	r2, r1, r3
  408ee8:	d0ee      	beq.n	408ec8 <__ieee754_fmod+0x110>
  408eea:	4849      	ldr	r0, [pc, #292]	; (409010 <__ieee754_fmod+0x258>)
  408eec:	4281      	cmp	r1, r0
  408eee:	dc07      	bgt.n	408f00 <__ieee754_fmod+0x148>
  408ef0:	0fda      	lsrs	r2, r3, #31
  408ef2:	f10e 3eff 	add.w	lr, lr, #4294967295
  408ef6:	005b      	lsls	r3, r3, #1
  408ef8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  408efc:	4281      	cmp	r1, r0
  408efe:	ddf7      	ble.n	408ef0 <__ieee754_fmod+0x138>
  408f00:	4a41      	ldr	r2, [pc, #260]	; (409008 <__ieee754_fmod+0x250>)
  408f02:	4596      	cmp	lr, r2
  408f04:	da52      	bge.n	408fac <__ieee754_fmod+0x1f4>
  408f06:	4a40      	ldr	r2, [pc, #256]	; (409008 <__ieee754_fmod+0x250>)
  408f08:	ebce 0202 	rsb	r2, lr, r2
  408f0c:	2a14      	cmp	r2, #20
  408f0e:	dc67      	bgt.n	408fe0 <__ieee754_fmod+0x228>
  408f10:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  408f14:	40d3      	lsrs	r3, r2
  408f16:	fa41 f002 	asr.w	r0, r1, r2
  408f1a:	fa01 f10e 	lsl.w	r1, r1, lr
  408f1e:	4319      	orrs	r1, r3
  408f20:	ea40 0307 	orr.w	r3, r0, r7
  408f24:	460a      	mov	r2, r1
  408f26:	ec43 2b10 	vmov	d0, r2, r3
  408f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f2e:	4c36      	ldr	r4, [pc, #216]	; (409008 <__ieee754_fmod+0x250>)
  408f30:	ebce 0404 	rsb	r4, lr, r4
  408f34:	2c1f      	cmp	r4, #31
  408f36:	dc33      	bgt.n	408fa0 <__ieee754_fmod+0x1e8>
  408f38:	f20e 4c1e 	addw	ip, lr, #1054	; 0x41e
  408f3c:	40a2      	lsls	r2, r4
  408f3e:	fa01 f604 	lsl.w	r6, r1, r4
  408f42:	4664      	mov	r4, ip
  408f44:	40e1      	lsrs	r1, r4
  408f46:	4311      	orrs	r1, r2
  408f48:	e7a6      	b.n	408e98 <__ieee754_fmod+0xe0>
  408f4a:	4b2f      	ldr	r3, [pc, #188]	; (409008 <__ieee754_fmod+0x250>)
  408f4c:	1a1b      	subs	r3, r3, r0
  408f4e:	2b1f      	cmp	r3, #31
  408f50:	dc20      	bgt.n	408f94 <__ieee754_fmod+0x1dc>
  408f52:	f200 441e 	addw	r4, r0, #1054	; 0x41e
  408f56:	fa0b fb03 	lsl.w	fp, fp, r3
  408f5a:	fa0a f303 	lsl.w	r3, sl, r3
  408f5e:	fa2a f504 	lsr.w	r5, sl, r4
  408f62:	ea4b 0505 	orr.w	r5, fp, r5
  408f66:	e790      	b.n	408e8a <__ieee754_fmod+0xd2>
  408f68:	1e51      	subs	r1, r2, #1
  408f6a:	e7b8      	b.n	408ede <__ieee754_fmod+0x126>
  408f6c:	02d4      	lsls	r4, r2, #11
  408f6e:	f8df e098 	ldr.w	lr, [pc, #152]	; 409008 <__ieee754_fmod+0x250>
  408f72:	0064      	lsls	r4, r4, #1
  408f74:	f10e 3eff 	add.w	lr, lr, #4294967295
  408f78:	2c00      	cmp	r4, #0
  408f7a:	dcfa      	bgt.n	408f72 <__ieee754_fmod+0x1ba>
  408f7c:	e77e      	b.n	408e7c <__ieee754_fmod+0xc4>
  408f7e:	ea4f 24cb 	mov.w	r4, fp, lsl #11
  408f82:	4821      	ldr	r0, [pc, #132]	; (409008 <__ieee754_fmod+0x250>)
  408f84:	2c00      	cmp	r4, #0
  408f86:	f77f af64 	ble.w	408e52 <__ieee754_fmod+0x9a>
  408f8a:	0064      	lsls	r4, r4, #1
  408f8c:	3801      	subs	r0, #1
  408f8e:	2c00      	cmp	r4, #0
  408f90:	dcfb      	bgt.n	408f8a <__ieee754_fmod+0x1d2>
  408f92:	e75e      	b.n	408e52 <__ieee754_fmod+0x9a>
  408f94:	4c1f      	ldr	r4, [pc, #124]	; (409014 <__ieee754_fmod+0x25c>)
  408f96:	2300      	movs	r3, #0
  408f98:	1a24      	subs	r4, r4, r0
  408f9a:	fa0a f504 	lsl.w	r5, sl, r4
  408f9e:	e774      	b.n	408e8a <__ieee754_fmod+0xd2>
  408fa0:	4a1c      	ldr	r2, [pc, #112]	; (409014 <__ieee754_fmod+0x25c>)
  408fa2:	2600      	movs	r6, #0
  408fa4:	ebce 0202 	rsb	r2, lr, r2
  408fa8:	4091      	lsls	r1, r2
  408faa:	e775      	b.n	408e98 <__ieee754_fmod+0xe0>
  408fac:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  408fb0:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
  408fb4:	4618      	mov	r0, r3
  408fb6:	4317      	orrs	r7, r2
  408fb8:	ea47 510e 	orr.w	r1, r7, lr, lsl #20
  408fbc:	ec41 0b10 	vmov	d0, r0, r1
  408fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fc4:	0fff      	lsrs	r7, r7, #31
  408fc6:	4b11      	ldr	r3, [pc, #68]	; (40900c <__ieee754_fmod+0x254>)
  408fc8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  408fcc:	ed93 0b00 	vldr	d0, [r3]
  408fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fd4:	ec49 8b10 	vmov	d0, r8, r9
  408fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fdc:	4629      	mov	r1, r5
  408fde:	e781      	b.n	408ee4 <__ieee754_fmod+0x12c>
  408fe0:	2a1f      	cmp	r2, #31
  408fe2:	dc07      	bgt.n	408ff4 <__ieee754_fmod+0x23c>
  408fe4:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  408fe8:	40d3      	lsrs	r3, r2
  408fea:	4638      	mov	r0, r7
  408fec:	fa01 f10e 	lsl.w	r1, r1, lr
  408ff0:	4319      	orrs	r1, r3
  408ff2:	e795      	b.n	408f20 <__ieee754_fmod+0x168>
  408ff4:	4b07      	ldr	r3, [pc, #28]	; (409014 <__ieee754_fmod+0x25c>)
  408ff6:	4638      	mov	r0, r7
  408ff8:	ebce 0303 	rsb	r3, lr, r3
  408ffc:	4119      	asrs	r1, r3
  408ffe:	e78f      	b.n	408f20 <__ieee754_fmod+0x168>
  409000:	7fefffff 	.word	0x7fefffff
  409004:	fffffbed 	.word	0xfffffbed
  409008:	fffffc02 	.word	0xfffffc02
  40900c:	00413900 	.word	0x00413900
  409010:	000fffff 	.word	0x000fffff
  409014:	fffffbe2 	.word	0xfffffbe2
  409018:	7ff00000 	.word	0x7ff00000
  40901c:	00000000 	.word	0x00000000

00409020 <__ieee754_rem_pio2>:
  409020:	ec53 2b10 	vmov	r2, r3, d0
  409024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409028:	4999      	ldr	r1, [pc, #612]	; (409290 <__ieee754_rem_pio2+0x270>)
  40902a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
  40902e:	b08f      	sub	sp, #60	; 0x3c
  409030:	461d      	mov	r5, r3
  409032:	458b      	cmp	fp, r1
  409034:	4604      	mov	r4, r0
  409036:	f340 8086 	ble.w	409146 <__ieee754_rem_pio2+0x126>
  40903a:	4996      	ldr	r1, [pc, #600]	; (409294 <__ieee754_rem_pio2+0x274>)
  40903c:	458b      	cmp	fp, r1
  40903e:	dc2a      	bgt.n	409096 <__ieee754_rem_pio2+0x76>
  409040:	2d00      	cmp	r5, #0
  409042:	4619      	mov	r1, r3
  409044:	ee10 0a10 	vmov	r0, s0
  409048:	a387      	add	r3, pc, #540	; (adr r3, 409268 <__ieee754_rem_pio2+0x248>)
  40904a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40904e:	f340 81a9 	ble.w	4093a4 <__ieee754_rem_pio2+0x384>
  409052:	f001 fbd3 	bl	40a7fc <__aeabi_dsub>
  409056:	4b90      	ldr	r3, [pc, #576]	; (409298 <__ieee754_rem_pio2+0x278>)
  409058:	4606      	mov	r6, r0
  40905a:	460f      	mov	r7, r1
  40905c:	459b      	cmp	fp, r3
  40905e:	f000 808a 	beq.w	409176 <__ieee754_rem_pio2+0x156>
  409062:	f04f 0a01 	mov.w	sl, #1
  409066:	a382      	add	r3, pc, #520	; (adr r3, 409270 <__ieee754_rem_pio2+0x250>)
  409068:	e9d3 2300 	ldrd	r2, r3, [r3]
  40906c:	f001 fbc6 	bl	40a7fc <__aeabi_dsub>
  409070:	4602      	mov	r2, r0
  409072:	460b      	mov	r3, r1
  409074:	4630      	mov	r0, r6
  409076:	4639      	mov	r1, r7
  409078:	e9c4 2300 	strd	r2, r3, [r4]
  40907c:	f001 fbbe 	bl	40a7fc <__aeabi_dsub>
  409080:	a37b      	add	r3, pc, #492	; (adr r3, 409270 <__ieee754_rem_pio2+0x250>)
  409082:	e9d3 2300 	ldrd	r2, r3, [r3]
  409086:	f001 fbb9 	bl	40a7fc <__aeabi_dsub>
  40908a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40908e:	4650      	mov	r0, sl
  409090:	b00f      	add	sp, #60	; 0x3c
  409092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409096:	4981      	ldr	r1, [pc, #516]	; (40929c <__ieee754_rem_pio2+0x27c>)
  409098:	458b      	cmp	fp, r1
  40909a:	f340 808a 	ble.w	4091b2 <__ieee754_rem_pio2+0x192>
  40909e:	4980      	ldr	r1, [pc, #512]	; (4092a0 <__ieee754_rem_pio2+0x280>)
  4090a0:	458b      	cmp	fp, r1
  4090a2:	dc5c      	bgt.n	40915e <__ieee754_rem_pio2+0x13e>
  4090a4:	ea4f 5a2b 	mov.w	sl, fp, asr #20
  4090a8:	4610      	mov	r0, r2
  4090aa:	ee10 6a10 	vmov	r6, s0
  4090ae:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
  4090b2:	ebab 570a 	sub.w	r7, fp, sl, lsl #20
  4090b6:	4639      	mov	r1, r7
  4090b8:	f001 ffee 	bl	40b098 <__aeabi_d2iz>
  4090bc:	f001 fcec 	bl	40aa98 <__aeabi_i2d>
  4090c0:	4680      	mov	r8, r0
  4090c2:	4689      	mov	r9, r1
  4090c4:	4602      	mov	r2, r0
  4090c6:	460b      	mov	r3, r1
  4090c8:	4630      	mov	r0, r6
  4090ca:	4639      	mov	r1, r7
  4090cc:	e9cd 8908 	strd	r8, r9, [sp, #32]
  4090d0:	f001 fb94 	bl	40a7fc <__aeabi_dsub>
  4090d4:	2200      	movs	r2, #0
  4090d6:	4b73      	ldr	r3, [pc, #460]	; (4092a4 <__ieee754_rem_pio2+0x284>)
  4090d8:	f001 fd44 	bl	40ab64 <__aeabi_dmul>
  4090dc:	4689      	mov	r9, r1
  4090de:	4680      	mov	r8, r0
  4090e0:	f001 ffda 	bl	40b098 <__aeabi_d2iz>
  4090e4:	f001 fcd8 	bl	40aa98 <__aeabi_i2d>
  4090e8:	4606      	mov	r6, r0
  4090ea:	460f      	mov	r7, r1
  4090ec:	4602      	mov	r2, r0
  4090ee:	460b      	mov	r3, r1
  4090f0:	4640      	mov	r0, r8
  4090f2:	4649      	mov	r1, r9
  4090f4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  4090f8:	f001 fb80 	bl	40a7fc <__aeabi_dsub>
  4090fc:	2200      	movs	r2, #0
  4090fe:	4b69      	ldr	r3, [pc, #420]	; (4092a4 <__ieee754_rem_pio2+0x284>)
  409100:	f001 fd30 	bl	40ab64 <__aeabi_dmul>
  409104:	2200      	movs	r2, #0
  409106:	2300      	movs	r3, #0
  409108:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40910c:	f001 ff92 	bl	40b034 <__aeabi_dcmpeq>
  409110:	2800      	cmp	r0, #0
  409112:	f000 8170 	beq.w	4093f6 <__ieee754_rem_pio2+0x3d6>
  409116:	2300      	movs	r3, #0
  409118:	4630      	mov	r0, r6
  40911a:	4639      	mov	r1, r7
  40911c:	2200      	movs	r2, #0
  40911e:	f001 ff89 	bl	40b034 <__aeabi_dcmpeq>
  409122:	2800      	cmp	r0, #0
  409124:	bf14      	ite	ne
  409126:	2301      	movne	r3, #1
  409128:	2302      	moveq	r3, #2
  40912a:	2002      	movs	r0, #2
  40912c:	495e      	ldr	r1, [pc, #376]	; (4092a8 <__ieee754_rem_pio2+0x288>)
  40912e:	4652      	mov	r2, sl
  409130:	9000      	str	r0, [sp, #0]
  409132:	a808      	add	r0, sp, #32
  409134:	9101      	str	r1, [sp, #4]
  409136:	4621      	mov	r1, r4
  409138:	f000 fb96 	bl	409868 <__kernel_rem_pio2>
  40913c:	2d00      	cmp	r5, #0
  40913e:	f2c0 814f 	blt.w	4093e0 <__ieee754_rem_pio2+0x3c0>
  409142:	4682      	mov	sl, r0
  409144:	e007      	b.n	409156 <__ieee754_rem_pio2+0x136>
  409146:	2000      	movs	r0, #0
  409148:	2100      	movs	r1, #0
  40914a:	f04f 0a00 	mov.w	sl, #0
  40914e:	ed84 0b00 	vstr	d0, [r4]
  409152:	e9c4 0102 	strd	r0, r1, [r4, #8]
  409156:	4650      	mov	r0, sl
  409158:	b00f      	add	sp, #60	; 0x3c
  40915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40915e:	ee10 0a10 	vmov	r0, s0
  409162:	4619      	mov	r1, r3
  409164:	f001 fb4a 	bl	40a7fc <__aeabi_dsub>
  409168:	f04f 0a00 	mov.w	sl, #0
  40916c:	e9c4 0102 	strd	r0, r1, [r4, #8]
  409170:	e9c4 0100 	strd	r0, r1, [r4]
  409174:	e7ef      	b.n	409156 <__ieee754_rem_pio2+0x136>
  409176:	a340      	add	r3, pc, #256	; (adr r3, 409278 <__ieee754_rem_pio2+0x258>)
  409178:	e9d3 2300 	ldrd	r2, r3, [r3]
  40917c:	f001 fb3e 	bl	40a7fc <__aeabi_dsub>
  409180:	4606      	mov	r6, r0
  409182:	460f      	mov	r7, r1
  409184:	f04f 0a01 	mov.w	sl, #1
  409188:	a33d      	add	r3, pc, #244	; (adr r3, 409280 <__ieee754_rem_pio2+0x260>)
  40918a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40918e:	f001 fb35 	bl	40a7fc <__aeabi_dsub>
  409192:	4602      	mov	r2, r0
  409194:	460b      	mov	r3, r1
  409196:	4630      	mov	r0, r6
  409198:	4639      	mov	r1, r7
  40919a:	e9c4 2300 	strd	r2, r3, [r4]
  40919e:	f001 fb2d 	bl	40a7fc <__aeabi_dsub>
  4091a2:	a337      	add	r3, pc, #220	; (adr r3, 409280 <__ieee754_rem_pio2+0x260>)
  4091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091a8:	f001 fb28 	bl	40a7fc <__aeabi_dsub>
  4091ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4091b0:	e7d1      	b.n	409156 <__ieee754_rem_pio2+0x136>
  4091b2:	f001 f9c5 	bl	40a540 <fabs>
  4091b6:	ee10 0a10 	vmov	r0, s0
  4091ba:	ec57 6b10 	vmov	r6, r7, d0
  4091be:	a332      	add	r3, pc, #200	; (adr r3, 409288 <__ieee754_rem_pio2+0x268>)
  4091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091c4:	4639      	mov	r1, r7
  4091c6:	f001 fccd 	bl	40ab64 <__aeabi_dmul>
  4091ca:	2200      	movs	r2, #0
  4091cc:	4b37      	ldr	r3, [pc, #220]	; (4092ac <__ieee754_rem_pio2+0x28c>)
  4091ce:	f001 fb17 	bl	40a800 <__adddf3>
  4091d2:	f001 ff61 	bl	40b098 <__aeabi_d2iz>
  4091d6:	4682      	mov	sl, r0
  4091d8:	f001 fc5e 	bl	40aa98 <__aeabi_i2d>
  4091dc:	a322      	add	r3, pc, #136	; (adr r3, 409268 <__ieee754_rem_pio2+0x248>)
  4091de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4091e6:	f001 fcbd 	bl	40ab64 <__aeabi_dmul>
  4091ea:	4602      	mov	r2, r0
  4091ec:	460b      	mov	r3, r1
  4091ee:	4630      	mov	r0, r6
  4091f0:	4639      	mov	r1, r7
  4091f2:	f001 fb03 	bl	40a7fc <__aeabi_dsub>
  4091f6:	4606      	mov	r6, r0
  4091f8:	460f      	mov	r7, r1
  4091fa:	a31d      	add	r3, pc, #116	; (adr r3, 409270 <__ieee754_rem_pio2+0x250>)
  4091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409204:	f001 fcae 	bl	40ab64 <__aeabi_dmul>
  409208:	f1ba 0f1f 	cmp.w	sl, #31
  40920c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409210:	4630      	mov	r0, r6
  409212:	4639      	mov	r1, r7
  409214:	dc4e      	bgt.n	4092b4 <__ieee754_rem_pio2+0x294>
  409216:	4b26      	ldr	r3, [pc, #152]	; (4092b0 <__ieee754_rem_pio2+0x290>)
  409218:	f10a 32ff 	add.w	r2, sl, #4294967295
  40921c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409220:	455b      	cmp	r3, fp
  409222:	d047      	beq.n	4092b4 <__ieee754_rem_pio2+0x294>
  409224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409228:	f001 fae8 	bl	40a7fc <__aeabi_dsub>
  40922c:	4680      	mov	r8, r0
  40922e:	4689      	mov	r9, r1
  409230:	e9c4 8900 	strd	r8, r9, [r4]
  409234:	4642      	mov	r2, r8
  409236:	464b      	mov	r3, r9
  409238:	4630      	mov	r0, r6
  40923a:	4639      	mov	r1, r7
  40923c:	f001 fade 	bl	40a7fc <__aeabi_dsub>
  409240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409244:	f001 fada 	bl	40a7fc <__aeabi_dsub>
  409248:	2d00      	cmp	r5, #0
  40924a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40924e:	da82      	bge.n	409156 <__ieee754_rem_pio2+0x136>
  409250:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
  409254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409258:	f1ca 0a00 	rsb	sl, sl, #0
  40925c:	f8c4 8000 	str.w	r8, [r4]
  409260:	6065      	str	r5, [r4, #4]
  409262:	60a0      	str	r0, [r4, #8]
  409264:	60e3      	str	r3, [r4, #12]
  409266:	e776      	b.n	409156 <__ieee754_rem_pio2+0x136>
  409268:	54400000 	.word	0x54400000
  40926c:	3ff921fb 	.word	0x3ff921fb
  409270:	1a626331 	.word	0x1a626331
  409274:	3dd0b461 	.word	0x3dd0b461
  409278:	1a600000 	.word	0x1a600000
  40927c:	3dd0b461 	.word	0x3dd0b461
  409280:	2e037073 	.word	0x2e037073
  409284:	3ba3198a 	.word	0x3ba3198a
  409288:	6dc9c883 	.word	0x6dc9c883
  40928c:	3fe45f30 	.word	0x3fe45f30
  409290:	3fe921fb 	.word	0x3fe921fb
  409294:	4002d97b 	.word	0x4002d97b
  409298:	3ff921fb 	.word	0x3ff921fb
  40929c:	413921fb 	.word	0x413921fb
  4092a0:	7fefffff 	.word	0x7fefffff
  4092a4:	41700000 	.word	0x41700000
  4092a8:	00413990 	.word	0x00413990
  4092ac:	3fe00000 	.word	0x3fe00000
  4092b0:	00413910 	.word	0x00413910
  4092b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4092b8:	f001 faa0 	bl	40a7fc <__aeabi_dsub>
  4092bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
  4092c0:	ea4f 5b2b 	mov.w	fp, fp, asr #20
  4092c4:	4680      	mov	r8, r0
  4092c6:	4689      	mov	r9, r1
  4092c8:	ebc3 030b 	rsb	r3, r3, fp
  4092cc:	2b10      	cmp	r3, #16
  4092ce:	e9c4 8900 	strd	r8, r9, [r4]
  4092d2:	ddaf      	ble.n	409234 <__ieee754_rem_pio2+0x214>
  4092d4:	a35c      	add	r3, pc, #368	; (adr r3, 409448 <__ieee754_rem_pio2+0x428>)
  4092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4092da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4092de:	f001 fc41 	bl	40ab64 <__aeabi_dmul>
  4092e2:	4680      	mov	r8, r0
  4092e4:	4689      	mov	r9, r1
  4092e6:	4630      	mov	r0, r6
  4092e8:	4642      	mov	r2, r8
  4092ea:	4639      	mov	r1, r7
  4092ec:	464b      	mov	r3, r9
  4092ee:	f001 fa85 	bl	40a7fc <__aeabi_dsub>
  4092f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4092f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4092fa:	4630      	mov	r0, r6
  4092fc:	4639      	mov	r1, r7
  4092fe:	f001 fa7d 	bl	40a7fc <__aeabi_dsub>
  409302:	4642      	mov	r2, r8
  409304:	464b      	mov	r3, r9
  409306:	f001 fa79 	bl	40a7fc <__aeabi_dsub>
  40930a:	4606      	mov	r6, r0
  40930c:	460f      	mov	r7, r1
  40930e:	a350      	add	r3, pc, #320	; (adr r3, 409450 <__ieee754_rem_pio2+0x430>)
  409310:	e9d3 2300 	ldrd	r2, r3, [r3]
  409314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409318:	f001 fc24 	bl	40ab64 <__aeabi_dmul>
  40931c:	4632      	mov	r2, r6
  40931e:	463b      	mov	r3, r7
  409320:	f001 fa6c 	bl	40a7fc <__aeabi_dsub>
  409324:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409328:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40932c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  409330:	f001 fa64 	bl	40a7fc <__aeabi_dsub>
  409334:	f3c1 530a 	ubfx	r3, r1, #20, #11
  409338:	4680      	mov	r8, r0
  40933a:	4689      	mov	r9, r1
  40933c:	ebc3 0b0b 	rsb	fp, r3, fp
  409340:	f1bb 0f31 	cmp.w	fp, #49	; 0x31
  409344:	e9c4 8900 	strd	r8, r9, [r4]
  409348:	dd75      	ble.n	409436 <__ieee754_rem_pio2+0x416>
  40934a:	a344      	add	r3, pc, #272	; (adr r3, 40945c <__ieee754_rem_pio2+0x43c>)
  40934c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409354:	f001 fc06 	bl	40ab64 <__aeabi_dmul>
  409358:	4680      	mov	r8, r0
  40935a:	4689      	mov	r9, r1
  40935c:	4642      	mov	r2, r8
  40935e:	464b      	mov	r3, r9
  409360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  409364:	f001 fa4a 	bl	40a7fc <__aeabi_dsub>
  409368:	4606      	mov	r6, r0
  40936a:	460f      	mov	r7, r1
  40936c:	4632      	mov	r2, r6
  40936e:	463b      	mov	r3, r7
  409370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  409374:	f001 fa42 	bl	40a7fc <__aeabi_dsub>
  409378:	4642      	mov	r2, r8
  40937a:	464b      	mov	r3, r9
  40937c:	f001 fa3e 	bl	40a7fc <__aeabi_dsub>
  409380:	4680      	mov	r8, r0
  409382:	4689      	mov	r9, r1
  409384:	a337      	add	r3, pc, #220	; (adr r3, 409464 <__ieee754_rem_pio2+0x444>)
  409386:	e9d3 2300 	ldrd	r2, r3, [r3]
  40938a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40938e:	f001 fbe9 	bl	40ab64 <__aeabi_dmul>
  409392:	4642      	mov	r2, r8
  409394:	464b      	mov	r3, r9
  409396:	f001 fa31 	bl	40a7fc <__aeabi_dsub>
  40939a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40939e:	4630      	mov	r0, r6
  4093a0:	4639      	mov	r1, r7
  4093a2:	e73f      	b.n	409224 <__ieee754_rem_pio2+0x204>
  4093a4:	f001 fa2c 	bl	40a800 <__adddf3>
  4093a8:	4b2b      	ldr	r3, [pc, #172]	; (409458 <__ieee754_rem_pio2+0x438>)
  4093aa:	4606      	mov	r6, r0
  4093ac:	460f      	mov	r7, r1
  4093ae:	459b      	cmp	fp, r3
  4093b0:	d023      	beq.n	4093fa <__ieee754_rem_pio2+0x3da>
  4093b2:	f04f 3aff 	mov.w	sl, #4294967295
  4093b6:	a322      	add	r3, pc, #136	; (adr r3, 409440 <__ieee754_rem_pio2+0x420>)
  4093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4093bc:	f001 fa20 	bl	40a800 <__adddf3>
  4093c0:	4602      	mov	r2, r0
  4093c2:	460b      	mov	r3, r1
  4093c4:	4630      	mov	r0, r6
  4093c6:	4639      	mov	r1, r7
  4093c8:	e9c4 2300 	strd	r2, r3, [r4]
  4093cc:	f001 fa16 	bl	40a7fc <__aeabi_dsub>
  4093d0:	a31b      	add	r3, pc, #108	; (adr r3, 409440 <__ieee754_rem_pio2+0x420>)
  4093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4093d6:	f001 fa13 	bl	40a800 <__adddf3>
  4093da:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4093de:	e6ba      	b.n	409156 <__ieee754_rem_pio2+0x136>
  4093e0:	6862      	ldr	r2, [r4, #4]
  4093e2:	f1c0 0a00 	rsb	sl, r0, #0
  4093e6:	68e3      	ldr	r3, [r4, #12]
  4093e8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4093ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4093f0:	6062      	str	r2, [r4, #4]
  4093f2:	60e3      	str	r3, [r4, #12]
  4093f4:	e6af      	b.n	409156 <__ieee754_rem_pio2+0x136>
  4093f6:	2303      	movs	r3, #3
  4093f8:	e697      	b.n	40912a <__ieee754_rem_pio2+0x10a>
  4093fa:	a313      	add	r3, pc, #76	; (adr r3, 409448 <__ieee754_rem_pio2+0x428>)
  4093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409400:	f001 f9fe 	bl	40a800 <__adddf3>
  409404:	4606      	mov	r6, r0
  409406:	460f      	mov	r7, r1
  409408:	f04f 3aff 	mov.w	sl, #4294967295
  40940c:	a310      	add	r3, pc, #64	; (adr r3, 409450 <__ieee754_rem_pio2+0x430>)
  40940e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409412:	f001 f9f5 	bl	40a800 <__adddf3>
  409416:	4602      	mov	r2, r0
  409418:	460b      	mov	r3, r1
  40941a:	4630      	mov	r0, r6
  40941c:	4639      	mov	r1, r7
  40941e:	e9c4 2300 	strd	r2, r3, [r4]
  409422:	f001 f9eb 	bl	40a7fc <__aeabi_dsub>
  409426:	a30a      	add	r3, pc, #40	; (adr r3, 409450 <__ieee754_rem_pio2+0x430>)
  409428:	e9d3 2300 	ldrd	r2, r3, [r3]
  40942c:	f001 f9e8 	bl	40a800 <__adddf3>
  409430:	e9c4 0102 	strd	r0, r1, [r4, #8]
  409434:	e68f      	b.n	409156 <__ieee754_rem_pio2+0x136>
  409436:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40943a:	e6fb      	b.n	409234 <__ieee754_rem_pio2+0x214>
  40943c:	f3af 8000 	nop.w
  409440:	1a626331 	.word	0x1a626331
  409444:	3dd0b461 	.word	0x3dd0b461
  409448:	1a600000 	.word	0x1a600000
  40944c:	3dd0b461 	.word	0x3dd0b461
  409450:	2e037073 	.word	0x2e037073
  409454:	3ba3198a 	.word	0x3ba3198a
  409458:	3ff921fb 	.word	0x3ff921fb
  40945c:	2e000000 	.word	0x2e000000
  409460:	3ba3198a 	.word	0x3ba3198a
  409464:	252049c1 	.word	0x252049c1
  409468:	397b839a 	.word	0x397b839a

0040946c <__ieee754_sqrt>:
  40946c:	495c      	ldr	r1, [pc, #368]	; (4095e0 <__ieee754_sqrt+0x174>)
  40946e:	ee10 0a10 	vmov	r0, s0
  409472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409476:	ec55 4b10 	vmov	r4, r5, d0
  40947a:	460e      	mov	r6, r1
  40947c:	4029      	ands	r1, r5
  40947e:	462b      	mov	r3, r5
  409480:	42b1      	cmp	r1, r6
  409482:	f000 8086 	beq.w	409592 <__ieee754_sqrt+0x126>
  409486:	2d00      	cmp	r5, #0
  409488:	4622      	mov	r2, r4
  40948a:	dd66      	ble.n	40955a <__ieee754_sqrt+0xee>
  40948c:	152f      	asrs	r7, r5, #20
  40948e:	d071      	beq.n	409574 <__ieee754_sqrt+0x108>
  409490:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  409494:	f3c3 0313 	ubfx	r3, r3, #0, #20
  409498:	07f9      	lsls	r1, r7, #31
  40949a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40949e:	d457      	bmi.n	409550 <__ieee754_sqrt+0xe4>
  4094a0:	0fd1      	lsrs	r1, r2, #31
  4094a2:	2600      	movs	r6, #0
  4094a4:	107f      	asrs	r7, r7, #1
  4094a6:	2016      	movs	r0, #22
  4094a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  4094ac:	46b6      	mov	lr, r6
  4094ae:	0052      	lsls	r2, r2, #1
  4094b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4094b4:	eb0e 0401 	add.w	r4, lr, r1
  4094b8:	0fd5      	lsrs	r5, r2, #31
  4094ba:	0052      	lsls	r2, r2, #1
  4094bc:	429c      	cmp	r4, r3
  4094be:	dc03      	bgt.n	4094c8 <__ieee754_sqrt+0x5c>
  4094c0:	1b1b      	subs	r3, r3, r4
  4094c2:	eb04 0e01 	add.w	lr, r4, r1
  4094c6:	440e      	add	r6, r1
  4094c8:	3801      	subs	r0, #1
  4094ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4094ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4094d2:	d1ef      	bne.n	4094b4 <__ieee754_sqrt+0x48>
  4094d4:	2520      	movs	r5, #32
  4094d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4094da:	4684      	mov	ip, r0
  4094dc:	4573      	cmp	r3, lr
  4094de:	eb01 040c 	add.w	r4, r1, ip
  4094e2:	dc03      	bgt.n	4094ec <__ieee754_sqrt+0x80>
  4094e4:	4294      	cmp	r4, r2
  4094e6:	d80e      	bhi.n	409506 <__ieee754_sqrt+0x9a>
  4094e8:	4573      	cmp	r3, lr
  4094ea:	d10c      	bne.n	409506 <__ieee754_sqrt+0x9a>
  4094ec:	2c00      	cmp	r4, #0
  4094ee:	eb04 0c01 	add.w	ip, r4, r1
  4094f2:	db27      	blt.n	409544 <__ieee754_sqrt+0xd8>
  4094f4:	46f0      	mov	r8, lr
  4094f6:	4294      	cmp	r4, r2
  4094f8:	ebce 0303 	rsb	r3, lr, r3
  4094fc:	d900      	bls.n	409500 <__ieee754_sqrt+0x94>
  4094fe:	3b01      	subs	r3, #1
  409500:	1b12      	subs	r2, r2, r4
  409502:	4408      	add	r0, r1
  409504:	46c6      	mov	lr, r8
  409506:	0fd4      	lsrs	r4, r2, #31
  409508:	3d01      	subs	r5, #1
  40950a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40950e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  409512:	ea4f 0242 	mov.w	r2, r2, lsl #1
  409516:	d1e1      	bne.n	4094dc <__ieee754_sqrt+0x70>
  409518:	4313      	orrs	r3, r2
  40951a:	d004      	beq.n	409526 <__ieee754_sqrt+0xba>
  40951c:	1c42      	adds	r2, r0, #1
  40951e:	d048      	beq.n	4095b2 <__ieee754_sqrt+0x146>
  409520:	f000 0301 	and.w	r3, r0, #1
  409524:	4418      	add	r0, r3
  409526:	0840      	lsrs	r0, r0, #1
  409528:	1073      	asrs	r3, r6, #1
  40952a:	492e      	ldr	r1, [pc, #184]	; (4095e4 <__ieee754_sqrt+0x178>)
  40952c:	4419      	add	r1, r3
  40952e:	07f3      	lsls	r3, r6, #31
  409530:	d501      	bpl.n	409536 <__ieee754_sqrt+0xca>
  409532:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  409536:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  40953a:	4602      	mov	r2, r0
  40953c:	ec43 2b10 	vmov	d0, r2, r3
  409540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409544:	f1bc 0f00 	cmp.w	ip, #0
  409548:	dbd4      	blt.n	4094f4 <__ieee754_sqrt+0x88>
  40954a:	f10e 0801 	add.w	r8, lr, #1
  40954e:	e7d2      	b.n	4094f6 <__ieee754_sqrt+0x8a>
  409550:	0fd1      	lsrs	r1, r2, #31
  409552:	0052      	lsls	r2, r2, #1
  409554:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  409558:	e7a2      	b.n	4094a0 <__ieee754_sqrt+0x34>
  40955a:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
  40955e:	4321      	orrs	r1, r4
  409560:	d025      	beq.n	4095ae <__ieee754_sqrt+0x142>
  409562:	bb6d      	cbnz	r5, 4095c0 <__ieee754_sqrt+0x154>
  409564:	462f      	mov	r7, r5
  409566:	0ad3      	lsrs	r3, r2, #11
  409568:	3f15      	subs	r7, #21
  40956a:	0552      	lsls	r2, r2, #21
  40956c:	2b00      	cmp	r3, #0
  40956e:	d0fa      	beq.n	409566 <__ieee754_sqrt+0xfa>
  409570:	02dc      	lsls	r4, r3, #11
  409572:	d421      	bmi.n	4095b8 <__ieee754_sqrt+0x14c>
  409574:	2100      	movs	r1, #0
  409576:	005b      	lsls	r3, r3, #1
  409578:	3101      	adds	r1, #1
  40957a:	02d8      	lsls	r0, r3, #11
  40957c:	d5fb      	bpl.n	409576 <__ieee754_sqrt+0x10a>
  40957e:	f1c1 0401 	rsb	r4, r1, #1
  409582:	f1c1 0020 	rsb	r0, r1, #32
  409586:	fa22 f000 	lsr.w	r0, r2, r0
  40958a:	4427      	add	r7, r4
  40958c:	408a      	lsls	r2, r1
  40958e:	4303      	orrs	r3, r0
  409590:	e77e      	b.n	409490 <__ieee754_sqrt+0x24>
  409592:	ee10 2a10 	vmov	r2, s0
  409596:	462b      	mov	r3, r5
  409598:	4629      	mov	r1, r5
  40959a:	f001 fae3 	bl	40ab64 <__aeabi_dmul>
  40959e:	4622      	mov	r2, r4
  4095a0:	462b      	mov	r3, r5
  4095a2:	f001 f92d 	bl	40a800 <__adddf3>
  4095a6:	ec41 0b10 	vmov	d0, r0, r1
  4095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095b2:	3601      	adds	r6, #1
  4095b4:	4628      	mov	r0, r5
  4095b6:	e7b7      	b.n	409528 <__ieee754_sqrt+0xbc>
  4095b8:	2020      	movs	r0, #32
  4095ba:	2401      	movs	r4, #1
  4095bc:	2100      	movs	r1, #0
  4095be:	e7e2      	b.n	409586 <__ieee754_sqrt+0x11a>
  4095c0:	ee10 0a10 	vmov	r0, s0
  4095c4:	4622      	mov	r2, r4
  4095c6:	462b      	mov	r3, r5
  4095c8:	4629      	mov	r1, r5
  4095ca:	f001 f917 	bl	40a7fc <__aeabi_dsub>
  4095ce:	4602      	mov	r2, r0
  4095d0:	460b      	mov	r3, r1
  4095d2:	f001 fbf1 	bl	40adb8 <__aeabi_ddiv>
  4095d6:	ec41 0b10 	vmov	d0, r0, r1
  4095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4095de:	bf00      	nop
  4095e0:	7ff00000 	.word	0x7ff00000
  4095e4:	3fe00000 	.word	0x3fe00000

004095e8 <__kernel_cos>:
  4095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4095ec:	ec57 6b10 	vmov	r6, r7, d0
  4095f0:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
  4095f4:	ee10 0a10 	vmov	r0, s0
  4095f8:	4639      	mov	r1, r7
  4095fa:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
  4095fe:	ed2d 8b02 	vpush	{d8}
  409602:	eeb0 8a41 	vmov.f32	s16, s2
  409606:	eef0 8a61 	vmov.f32	s17, s3
  40960a:	b083      	sub	sp, #12
  40960c:	da6f      	bge.n	4096ee <__kernel_cos+0x106>
  40960e:	f001 fd43 	bl	40b098 <__aeabi_d2iz>
  409612:	2800      	cmp	r0, #0
  409614:	f000 80f3 	beq.w	4097fe <__kernel_cos+0x216>
  409618:	4632      	mov	r2, r6
  40961a:	463b      	mov	r3, r7
  40961c:	4630      	mov	r0, r6
  40961e:	4639      	mov	r1, r7
  409620:	f001 faa0 	bl	40ab64 <__aeabi_dmul>
  409624:	4604      	mov	r4, r0
  409626:	460d      	mov	r5, r1
  409628:	a379      	add	r3, pc, #484	; (adr r3, 409810 <__kernel_cos+0x228>)
  40962a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40962e:	f001 fa99 	bl	40ab64 <__aeabi_dmul>
  409632:	a379      	add	r3, pc, #484	; (adr r3, 409818 <__kernel_cos+0x230>)
  409634:	e9d3 2300 	ldrd	r2, r3, [r3]
  409638:	f001 f8e2 	bl	40a800 <__adddf3>
  40963c:	4622      	mov	r2, r4
  40963e:	462b      	mov	r3, r5
  409640:	f001 fa90 	bl	40ab64 <__aeabi_dmul>
  409644:	a376      	add	r3, pc, #472	; (adr r3, 409820 <__kernel_cos+0x238>)
  409646:	e9d3 2300 	ldrd	r2, r3, [r3]
  40964a:	f001 f8d7 	bl	40a7fc <__aeabi_dsub>
  40964e:	4622      	mov	r2, r4
  409650:	462b      	mov	r3, r5
  409652:	f001 fa87 	bl	40ab64 <__aeabi_dmul>
  409656:	a374      	add	r3, pc, #464	; (adr r3, 409828 <__kernel_cos+0x240>)
  409658:	e9d3 2300 	ldrd	r2, r3, [r3]
  40965c:	f001 f8d0 	bl	40a800 <__adddf3>
  409660:	4622      	mov	r2, r4
  409662:	462b      	mov	r3, r5
  409664:	f001 fa7e 	bl	40ab64 <__aeabi_dmul>
  409668:	a371      	add	r3, pc, #452	; (adr r3, 409830 <__kernel_cos+0x248>)
  40966a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40966e:	f001 f8c5 	bl	40a7fc <__aeabi_dsub>
  409672:	4622      	mov	r2, r4
  409674:	462b      	mov	r3, r5
  409676:	f001 fa75 	bl	40ab64 <__aeabi_dmul>
  40967a:	a36f      	add	r3, pc, #444	; (adr r3, 409838 <__kernel_cos+0x250>)
  40967c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409680:	f001 f8be 	bl	40a800 <__adddf3>
  409684:	4622      	mov	r2, r4
  409686:	462b      	mov	r3, r5
  409688:	f001 fa6c 	bl	40ab64 <__aeabi_dmul>
  40968c:	4682      	mov	sl, r0
  40968e:	468b      	mov	fp, r1
  409690:	4620      	mov	r0, r4
  409692:	4629      	mov	r1, r5
  409694:	2200      	movs	r2, #0
  409696:	4b6e      	ldr	r3, [pc, #440]	; (409850 <__kernel_cos+0x268>)
  409698:	f001 fa64 	bl	40ab64 <__aeabi_dmul>
  40969c:	4652      	mov	r2, sl
  40969e:	4680      	mov	r8, r0
  4096a0:	4689      	mov	r9, r1
  4096a2:	465b      	mov	r3, fp
  4096a4:	4620      	mov	r0, r4
  4096a6:	4629      	mov	r1, r5
  4096a8:	f001 fa5c 	bl	40ab64 <__aeabi_dmul>
  4096ac:	4604      	mov	r4, r0
  4096ae:	460d      	mov	r5, r1
  4096b0:	4630      	mov	r0, r6
  4096b2:	4639      	mov	r1, r7
  4096b4:	ec53 2b18 	vmov	r2, r3, d8
  4096b8:	f001 fa54 	bl	40ab64 <__aeabi_dmul>
  4096bc:	4602      	mov	r2, r0
  4096be:	460b      	mov	r3, r1
  4096c0:	4620      	mov	r0, r4
  4096c2:	4629      	mov	r1, r5
  4096c4:	f001 f89a 	bl	40a7fc <__aeabi_dsub>
  4096c8:	4602      	mov	r2, r0
  4096ca:	460b      	mov	r3, r1
  4096cc:	4640      	mov	r0, r8
  4096ce:	4649      	mov	r1, r9
  4096d0:	f001 f894 	bl	40a7fc <__aeabi_dsub>
  4096d4:	4602      	mov	r2, r0
  4096d6:	460b      	mov	r3, r1
  4096d8:	2000      	movs	r0, #0
  4096da:	495e      	ldr	r1, [pc, #376]	; (409854 <__kernel_cos+0x26c>)
  4096dc:	f001 f88e 	bl	40a7fc <__aeabi_dsub>
  4096e0:	ec41 0b10 	vmov	d0, r0, r1
  4096e4:	b003      	add	sp, #12
  4096e6:	ecbd 8b02 	vpop	{d8}
  4096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4096ee:	ee10 2a10 	vmov	r2, s0
  4096f2:	463b      	mov	r3, r7
  4096f4:	f001 fa36 	bl	40ab64 <__aeabi_dmul>
  4096f8:	4604      	mov	r4, r0
  4096fa:	460d      	mov	r5, r1
  4096fc:	a344      	add	r3, pc, #272	; (adr r3, 409810 <__kernel_cos+0x228>)
  4096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  409702:	f001 fa2f 	bl	40ab64 <__aeabi_dmul>
  409706:	a344      	add	r3, pc, #272	; (adr r3, 409818 <__kernel_cos+0x230>)
  409708:	e9d3 2300 	ldrd	r2, r3, [r3]
  40970c:	f001 f878 	bl	40a800 <__adddf3>
  409710:	4622      	mov	r2, r4
  409712:	462b      	mov	r3, r5
  409714:	f001 fa26 	bl	40ab64 <__aeabi_dmul>
  409718:	a341      	add	r3, pc, #260	; (adr r3, 409820 <__kernel_cos+0x238>)
  40971a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40971e:	f001 f86d 	bl	40a7fc <__aeabi_dsub>
  409722:	4622      	mov	r2, r4
  409724:	462b      	mov	r3, r5
  409726:	f001 fa1d 	bl	40ab64 <__aeabi_dmul>
  40972a:	a33f      	add	r3, pc, #252	; (adr r3, 409828 <__kernel_cos+0x240>)
  40972c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409730:	f001 f866 	bl	40a800 <__adddf3>
  409734:	4622      	mov	r2, r4
  409736:	462b      	mov	r3, r5
  409738:	f001 fa14 	bl	40ab64 <__aeabi_dmul>
  40973c:	a33c      	add	r3, pc, #240	; (adr r3, 409830 <__kernel_cos+0x248>)
  40973e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409742:	f001 f85b 	bl	40a7fc <__aeabi_dsub>
  409746:	4622      	mov	r2, r4
  409748:	462b      	mov	r3, r5
  40974a:	f001 fa0b 	bl	40ab64 <__aeabi_dmul>
  40974e:	a33a      	add	r3, pc, #232	; (adr r3, 409838 <__kernel_cos+0x250>)
  409750:	e9d3 2300 	ldrd	r2, r3, [r3]
  409754:	f001 f854 	bl	40a800 <__adddf3>
  409758:	462b      	mov	r3, r5
  40975a:	4622      	mov	r2, r4
  40975c:	f001 fa02 	bl	40ab64 <__aeabi_dmul>
  409760:	4b3d      	ldr	r3, [pc, #244]	; (409858 <__kernel_cos+0x270>)
  409762:	4682      	mov	sl, r0
  409764:	468b      	mov	fp, r1
  409766:	4599      	cmp	r9, r3
  409768:	dd92      	ble.n	409690 <__kernel_cos+0xa8>
  40976a:	4b3c      	ldr	r3, [pc, #240]	; (40985c <__kernel_cos+0x274>)
  40976c:	4599      	cmp	r9, r3
  40976e:	dc3d      	bgt.n	4097ec <__kernel_cos+0x204>
  409770:	2200      	movs	r2, #0
  409772:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
  409776:	2000      	movs	r0, #0
  409778:	4936      	ldr	r1, [pc, #216]	; (409854 <__kernel_cos+0x26c>)
  40977a:	4690      	mov	r8, r2
  40977c:	4699      	mov	r9, r3
  40977e:	f001 f83d 	bl	40a7fc <__aeabi_dsub>
  409782:	e9cd 0100 	strd	r0, r1, [sp]
  409786:	4620      	mov	r0, r4
  409788:	4629      	mov	r1, r5
  40978a:	2200      	movs	r2, #0
  40978c:	4b30      	ldr	r3, [pc, #192]	; (409850 <__kernel_cos+0x268>)
  40978e:	f001 f9e9 	bl	40ab64 <__aeabi_dmul>
  409792:	4642      	mov	r2, r8
  409794:	464b      	mov	r3, r9
  409796:	f001 f831 	bl	40a7fc <__aeabi_dsub>
  40979a:	4652      	mov	r2, sl
  40979c:	4680      	mov	r8, r0
  40979e:	4689      	mov	r9, r1
  4097a0:	465b      	mov	r3, fp
  4097a2:	4620      	mov	r0, r4
  4097a4:	4629      	mov	r1, r5
  4097a6:	f001 f9dd 	bl	40ab64 <__aeabi_dmul>
  4097aa:	4604      	mov	r4, r0
  4097ac:	460d      	mov	r5, r1
  4097ae:	4630      	mov	r0, r6
  4097b0:	4639      	mov	r1, r7
  4097b2:	ec53 2b18 	vmov	r2, r3, d8
  4097b6:	f001 f9d5 	bl	40ab64 <__aeabi_dmul>
  4097ba:	4602      	mov	r2, r0
  4097bc:	460b      	mov	r3, r1
  4097be:	4620      	mov	r0, r4
  4097c0:	4629      	mov	r1, r5
  4097c2:	f001 f81b 	bl	40a7fc <__aeabi_dsub>
  4097c6:	4602      	mov	r2, r0
  4097c8:	460b      	mov	r3, r1
  4097ca:	4640      	mov	r0, r8
  4097cc:	4649      	mov	r1, r9
  4097ce:	f001 f815 	bl	40a7fc <__aeabi_dsub>
  4097d2:	4602      	mov	r2, r0
  4097d4:	460b      	mov	r3, r1
  4097d6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4097da:	f001 f80f 	bl	40a7fc <__aeabi_dsub>
  4097de:	ec41 0b10 	vmov	d0, r0, r1
  4097e2:	b003      	add	sp, #12
  4097e4:	ecbd 8b02 	vpop	{d8}
  4097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4097ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 409840 <__kernel_cos+0x258>
  4097f0:	f04f 0800 	mov.w	r8, #0
  4097f4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 409860 <__kernel_cos+0x278>
  4097f8:	ed8d 7b00 	vstr	d7, [sp]
  4097fc:	e7c3      	b.n	409786 <__kernel_cos+0x19e>
  4097fe:	ed9f 0b12 	vldr	d0, [pc, #72]	; 409848 <__kernel_cos+0x260>
  409802:	b003      	add	sp, #12
  409804:	ecbd 8b02 	vpop	{d8}
  409808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40980c:	f3af 8000 	nop.w
  409810:	be8838d4 	.word	0xbe8838d4
  409814:	bda8fae9 	.word	0xbda8fae9
  409818:	bdb4b1c4 	.word	0xbdb4b1c4
  40981c:	3e21ee9e 	.word	0x3e21ee9e
  409820:	809c52ad 	.word	0x809c52ad
  409824:	3e927e4f 	.word	0x3e927e4f
  409828:	19cb1590 	.word	0x19cb1590
  40982c:	3efa01a0 	.word	0x3efa01a0
  409830:	16c15177 	.word	0x16c15177
  409834:	3f56c16c 	.word	0x3f56c16c
  409838:	5555554c 	.word	0x5555554c
  40983c:	3fa55555 	.word	0x3fa55555
  409840:	00000000 	.word	0x00000000
  409844:	3fe70000 	.word	0x3fe70000
  409848:	00000000 	.word	0x00000000
  40984c:	3ff00000 	.word	0x3ff00000
  409850:	3fe00000 	.word	0x3fe00000
  409854:	3ff00000 	.word	0x3ff00000
  409858:	3fd33332 	.word	0x3fd33332
  40985c:	3fe90000 	.word	0x3fe90000
  409860:	3fd20000 	.word	0x3fd20000
  409864:	00000000 	.word	0x00000000

00409868 <__kernel_rem_pio2>:
  409868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40986c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
  409870:	461e      	mov	r6, r3
  409872:	4cc4      	ldr	r4, [pc, #784]	; (409b84 <__kernel_rem_pio2+0x31c>)
  409874:	930a      	str	r3, [sp, #40]	; 0x28
  409876:	1ed3      	subs	r3, r2, #3
  409878:	9003      	str	r0, [sp, #12]
  40987a:	3e01      	subs	r6, #1
  40987c:	fb84 0403 	smull	r0, r4, r4, r3
  409880:	17db      	asrs	r3, r3, #31
  409882:	4dc1      	ldr	r5, [pc, #772]	; (409b88 <__kernel_rem_pio2+0x320>)
  409884:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  409888:	98a4      	ldr	r0, [sp, #656]	; 0x290
  40988a:	9108      	str	r1, [sp, #32]
  40988c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409890:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  409894:	9600      	str	r6, [sp, #0]
  409896:	4619      	mov	r1, r3
  409898:	930b      	str	r3, [sp, #44]	; 0x2c
  40989a:	43db      	mvns	r3, r3
  40989c:	1834      	adds	r4, r6, r0
  40989e:	9007      	str	r0, [sp, #28]
  4098a0:	eba1 0506 	sub.w	r5, r1, r6
  4098a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4098a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4098ac:	9306      	str	r3, [sp, #24]
  4098ae:	d416      	bmi.n	4098de <__kernel_rem_pio2+0x76>
  4098b0:	442c      	add	r4, r5
  4098b2:	ae22      	add	r6, sp, #136	; 0x88
  4098b4:	9fa5      	ldr	r7, [sp, #660]	; 0x294
  4098b6:	3401      	adds	r4, #1
  4098b8:	e008      	b.n	4098cc <__kernel_rem_pio2+0x64>
  4098ba:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  4098be:	3501      	adds	r5, #1
  4098c0:	f001 f8ea 	bl	40aa98 <__aeabi_i2d>
  4098c4:	42a5      	cmp	r5, r4
  4098c6:	e8e6 0102 	strd	r0, r1, [r6], #8
  4098ca:	d008      	beq.n	4098de <__kernel_rem_pio2+0x76>
  4098cc:	2d00      	cmp	r5, #0
  4098ce:	daf4      	bge.n	4098ba <__kernel_rem_pio2+0x52>
  4098d0:	3501      	adds	r5, #1
  4098d2:	2000      	movs	r0, #0
  4098d4:	2100      	movs	r1, #0
  4098d6:	42a5      	cmp	r5, r4
  4098d8:	e8e6 0102 	strd	r0, r1, [r6], #8
  4098dc:	d1f6      	bne.n	4098cc <__kernel_rem_pio2+0x64>
  4098de:	9b07      	ldr	r3, [sp, #28]
  4098e0:	2b00      	cmp	r3, #0
  4098e2:	db2a      	blt.n	40993a <__kernel_rem_pio2+0xd2>
  4098e4:	9b07      	ldr	r3, [sp, #28]
  4098e6:	af22      	add	r7, sp, #136	; 0x88
  4098e8:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
  4098ec:	f103 0b01 	add.w	fp, r3, #1
  4098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4098f2:	463d      	mov	r5, r7
  4098f4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  4098f8:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
  4098fc:	9b00      	ldr	r3, [sp, #0]
  4098fe:	2b00      	cmp	r3, #0
  409900:	f2c0 818d 	blt.w	409c1e <__kernel_rem_pio2+0x3b6>
  409904:	f8dd 900c 	ldr.w	r9, [sp, #12]
  409908:	eb05 040a 	add.w	r4, r5, sl
  40990c:	2600      	movs	r6, #0
  40990e:	2700      	movs	r7, #0
  409910:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409914:	e8f9 0102 	ldrd	r0, r1, [r9], #8
  409918:	f001 f924 	bl	40ab64 <__aeabi_dmul>
  40991c:	4602      	mov	r2, r0
  40991e:	460b      	mov	r3, r1
  409920:	4630      	mov	r0, r6
  409922:	4639      	mov	r1, r7
  409924:	f000 ff6c 	bl	40a800 <__adddf3>
  409928:	42a5      	cmp	r5, r4
  40992a:	4606      	mov	r6, r0
  40992c:	460f      	mov	r7, r1
  40992e:	d1ef      	bne.n	409910 <__kernel_rem_pio2+0xa8>
  409930:	3508      	adds	r5, #8
  409932:	455d      	cmp	r5, fp
  409934:	e8e8 6702 	strd	r6, r7, [r8], #8
  409938:	d1e0      	bne.n	4098fc <__kernel_rem_pio2+0x94>
  40993a:	9907      	ldr	r1, [sp, #28]
  40993c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  409940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409942:	440b      	add	r3, r1
  409944:	460d      	mov	r5, r1
  409946:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
  40994a:	a90e      	add	r1, sp, #56	; 0x38
  40994c:	009b      	lsls	r3, r3, #2
  40994e:	00d2      	lsls	r2, r2, #3
  409950:	9205      	str	r2, [sp, #20]
  409952:	1d1a      	adds	r2, r3, #4
  409954:	440b      	add	r3, r1
  409956:	930c      	str	r3, [sp, #48]	; 0x30
  409958:	460b      	mov	r3, r1
  40995a:	4413      	add	r3, r2
  40995c:	930d      	str	r3, [sp, #52]	; 0x34
  40995e:	00ec      	lsls	r4, r5, #3
  409960:	ab9a      	add	r3, sp, #616	; 0x268
  409962:	2d00      	cmp	r5, #0
  409964:	4423      	add	r3, r4
  409966:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
  40996a:	dd28      	ble.n	4099be <__kernel_rem_pio2+0x156>
  40996c:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
  409970:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
  409974:	445c      	add	r4, fp
  409976:	2200      	movs	r2, #0
  409978:	4b84      	ldr	r3, [pc, #528]	; (409b8c <__kernel_rem_pio2+0x324>)
  40997a:	4630      	mov	r0, r6
  40997c:	4639      	mov	r1, r7
  40997e:	f001 f8f1 	bl	40ab64 <__aeabi_dmul>
  409982:	f001 fb89 	bl	40b098 <__aeabi_d2iz>
  409986:	f001 f887 	bl	40aa98 <__aeabi_i2d>
  40998a:	2200      	movs	r2, #0
  40998c:	4b80      	ldr	r3, [pc, #512]	; (409b90 <__kernel_rem_pio2+0x328>)
  40998e:	4680      	mov	r8, r0
  409990:	4689      	mov	r9, r1
  409992:	f001 f8e7 	bl	40ab64 <__aeabi_dmul>
  409996:	4602      	mov	r2, r0
  409998:	460b      	mov	r3, r1
  40999a:	4630      	mov	r0, r6
  40999c:	4639      	mov	r1, r7
  40999e:	f000 ff2d 	bl	40a7fc <__aeabi_dsub>
  4099a2:	f001 fb79 	bl	40b098 <__aeabi_d2iz>
  4099a6:	4649      	mov	r1, r9
  4099a8:	f84a 0f04 	str.w	r0, [sl, #4]!
  4099ac:	4640      	mov	r0, r8
  4099ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  4099b2:	f000 ff25 	bl	40a800 <__adddf3>
  4099b6:	4606      	mov	r6, r0
  4099b8:	455c      	cmp	r4, fp
  4099ba:	460f      	mov	r7, r1
  4099bc:	d1db      	bne.n	409976 <__kernel_rem_pio2+0x10e>
  4099be:	9c06      	ldr	r4, [sp, #24]
  4099c0:	ec47 6b10 	vmov	d0, r6, r7
  4099c4:	4620      	mov	r0, r4
  4099c6:	f000 fe83 	bl	40a6d0 <scalbn>
  4099ca:	2200      	movs	r2, #0
  4099cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4099d0:	ee10 0a10 	vmov	r0, s0
  4099d4:	ec57 6b10 	vmov	r6, r7, d0
  4099d8:	4639      	mov	r1, r7
  4099da:	f001 f8c3 	bl	40ab64 <__aeabi_dmul>
  4099de:	ec41 0b10 	vmov	d0, r0, r1
  4099e2:	f000 fdb5 	bl	40a550 <floor>
  4099e6:	2200      	movs	r2, #0
  4099e8:	4b6a      	ldr	r3, [pc, #424]	; (409b94 <__kernel_rem_pio2+0x32c>)
  4099ea:	ec51 0b10 	vmov	r0, r1, d0
  4099ee:	f001 f8b9 	bl	40ab64 <__aeabi_dmul>
  4099f2:	4602      	mov	r2, r0
  4099f4:	460b      	mov	r3, r1
  4099f6:	4630      	mov	r0, r6
  4099f8:	4639      	mov	r1, r7
  4099fa:	f000 feff 	bl	40a7fc <__aeabi_dsub>
  4099fe:	460f      	mov	r7, r1
  409a00:	4606      	mov	r6, r0
  409a02:	f001 fb49 	bl	40b098 <__aeabi_d2iz>
  409a06:	4680      	mov	r8, r0
  409a08:	f001 f846 	bl	40aa98 <__aeabi_i2d>
  409a0c:	4602      	mov	r2, r0
  409a0e:	460b      	mov	r3, r1
  409a10:	4630      	mov	r0, r6
  409a12:	4639      	mov	r1, r7
  409a14:	f000 fef2 	bl	40a7fc <__aeabi_dsub>
  409a18:	2c00      	cmp	r4, #0
  409a1a:	4606      	mov	r6, r0
  409a1c:	460f      	mov	r7, r1
  409a1e:	f340 80eb 	ble.w	409bf8 <__kernel_rem_pio2+0x390>
  409a22:	1e68      	subs	r0, r5, #1
  409a24:	ab0e      	add	r3, sp, #56	; 0x38
  409a26:	f1c4 0218 	rsb	r2, r4, #24
  409a2a:	f1c4 0117 	rsb	r1, r4, #23
  409a2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  409a32:	fa43 f402 	asr.w	r4, r3, r2
  409a36:	fa04 f902 	lsl.w	r9, r4, r2
  409a3a:	44a0      	add	r8, r4
  409a3c:	aa0e      	add	r2, sp, #56	; 0x38
  409a3e:	ebc9 0303 	rsb	r3, r9, r3
  409a42:	fa43 f901 	asr.w	r9, r3, r1
  409a46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  409a4a:	f1b9 0f00 	cmp.w	r9, #0
  409a4e:	dd21      	ble.n	409a94 <__kernel_rem_pio2+0x22c>
  409a50:	2d00      	cmp	r5, #0
  409a52:	f108 0801 	add.w	r8, r8, #1
  409a56:	f340 80a1 	ble.w	409b9c <__kernel_rem_pio2+0x334>
  409a5a:	2300      	movs	r3, #0
  409a5c:	aa0d      	add	r2, sp, #52	; 0x34
  409a5e:	461c      	mov	r4, r3
  409a60:	e008      	b.n	409a74 <__kernel_rem_pio2+0x20c>
  409a62:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  409a66:	b108      	cbz	r0, 409a6c <__kernel_rem_pio2+0x204>
  409a68:	2401      	movs	r4, #1
  409a6a:	6011      	str	r1, [r2, #0]
  409a6c:	3301      	adds	r3, #1
  409a6e:	429d      	cmp	r5, r3
  409a70:	f340 8095 	ble.w	409b9e <__kernel_rem_pio2+0x336>
  409a74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  409a78:	f852 0f04 	ldr.w	r0, [r2, #4]!
  409a7c:	2c00      	cmp	r4, #0
  409a7e:	d0f0      	beq.n	409a62 <__kernel_rem_pio2+0x1fa>
  409a80:	1a09      	subs	r1, r1, r0
  409a82:	e7f1      	b.n	409a68 <__kernel_rem_pio2+0x200>
  409a84:	2200      	movs	r2, #0
  409a86:	4b44      	ldr	r3, [pc, #272]	; (409b98 <__kernel_rem_pio2+0x330>)
  409a88:	f001 faf2 	bl	40b070 <__aeabi_dcmpge>
  409a8c:	2800      	cmp	r0, #0
  409a8e:	f040 80cf 	bne.w	409c30 <__kernel_rem_pio2+0x3c8>
  409a92:	4681      	mov	r9, r0
  409a94:	4630      	mov	r0, r6
  409a96:	4639      	mov	r1, r7
  409a98:	2200      	movs	r2, #0
  409a9a:	2300      	movs	r3, #0
  409a9c:	f001 faca 	bl	40b034 <__aeabi_dcmpeq>
  409aa0:	2800      	cmp	r0, #0
  409aa2:	f000 80d8 	beq.w	409c56 <__kernel_rem_pio2+0x3ee>
  409aa6:	f105 3aff 	add.w	sl, r5, #4294967295
  409aaa:	9b07      	ldr	r3, [sp, #28]
  409aac:	4553      	cmp	r3, sl
  409aae:	dc0d      	bgt.n	409acc <__kernel_rem_pio2+0x264>
  409ab0:	ab0e      	add	r3, sp, #56	; 0x38
  409ab2:	2200      	movs	r2, #0
  409ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
  409ab6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  409aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  409abe:	4283      	cmp	r3, r0
  409ac0:	ea42 0201 	orr.w	r2, r2, r1
  409ac4:	d1f9      	bne.n	409aba <__kernel_rem_pio2+0x252>
  409ac6:	2a00      	cmp	r2, #0
  409ac8:	f040 8228 	bne.w	409f1c <__kernel_rem_pio2+0x6b4>
  409acc:	9b07      	ldr	r3, [sp, #28]
  409ace:	aa0e      	add	r2, sp, #56	; 0x38
  409ad0:	3b01      	subs	r3, #1
  409ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409ad6:	2b00      	cmp	r3, #0
  409ad8:	f040 8239 	bne.w	409f4e <__kernel_rem_pio2+0x6e6>
  409adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409ade:	2301      	movs	r3, #1
  409ae0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  409ae4:	3301      	adds	r3, #1
  409ae6:	2900      	cmp	r1, #0
  409ae8:	d0fa      	beq.n	409ae0 <__kernel_rem_pio2+0x278>
  409aea:	18eb      	adds	r3, r5, r3
  409aec:	f105 0a01 	add.w	sl, r5, #1
  409af0:	459a      	cmp	sl, r3
  409af2:	9309      	str	r3, [sp, #36]	; 0x24
  409af4:	dc3c      	bgt.n	409b70 <__kernel_rem_pio2+0x308>
  409af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409af8:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  409afc:	990a      	ldr	r1, [sp, #40]	; 0x28
  409afe:	4453      	add	r3, sl
  409b00:	440d      	add	r5, r1
  409b02:	4499      	add	r9, r3
  409b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b06:	eb03 0b01 	add.w	fp, r3, r1
  409b0a:	ab22      	add	r3, sp, #136	; 0x88
  409b0c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
  409b10:	9ba5      	ldr	r3, [sp, #660]	; 0x294
  409b12:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  409b16:	ab22      	add	r3, sp, #136	; 0x88
  409b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  409b1c:	9304      	str	r3, [sp, #16]
  409b1e:	ab72      	add	r3, sp, #456	; 0x1c8
  409b20:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
  409b24:	f859 0f04 	ldr.w	r0, [r9, #4]!
  409b28:	f000 ffb6 	bl	40aa98 <__aeabi_i2d>
  409b2c:	9b00      	ldr	r3, [sp, #0]
  409b2e:	2b00      	cmp	r3, #0
  409b30:	e8e8 0102 	strd	r0, r1, [r8], #8
  409b34:	db1e      	blt.n	409b74 <__kernel_rem_pio2+0x30c>
  409b36:	9b05      	ldr	r3, [sp, #20]
  409b38:	4644      	mov	r4, r8
  409b3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  409b3e:	2600      	movs	r6, #0
  409b40:	eb08 0503 	add.w	r5, r8, r3
  409b44:	2700      	movs	r7, #0
  409b46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409b4a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
  409b4e:	f001 f809 	bl	40ab64 <__aeabi_dmul>
  409b52:	4602      	mov	r2, r0
  409b54:	460b      	mov	r3, r1
  409b56:	4630      	mov	r0, r6
  409b58:	4639      	mov	r1, r7
  409b5a:	f000 fe51 	bl	40a800 <__adddf3>
  409b5e:	42ac      	cmp	r4, r5
  409b60:	4606      	mov	r6, r0
  409b62:	460f      	mov	r7, r1
  409b64:	d1ef      	bne.n	409b46 <__kernel_rem_pio2+0x2de>
  409b66:	9b04      	ldr	r3, [sp, #16]
  409b68:	4598      	cmp	r8, r3
  409b6a:	e8ea 6702 	strd	r6, r7, [sl], #8
  409b6e:	d1d9      	bne.n	409b24 <__kernel_rem_pio2+0x2bc>
  409b70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409b72:	e6f4      	b.n	40995e <__kernel_rem_pio2+0xf6>
  409b74:	9b04      	ldr	r3, [sp, #16]
  409b76:	2600      	movs	r6, #0
  409b78:	2700      	movs	r7, #0
  409b7a:	4598      	cmp	r8, r3
  409b7c:	e8ea 6702 	strd	r6, r7, [sl], #8
  409b80:	d1d0      	bne.n	409b24 <__kernel_rem_pio2+0x2bc>
  409b82:	e7f5      	b.n	409b70 <__kernel_rem_pio2+0x308>
  409b84:	2aaaaaab 	.word	0x2aaaaaab
  409b88:	00413a98 	.word	0x00413a98
  409b8c:	3e700000 	.word	0x3e700000
  409b90:	41700000 	.word	0x41700000
  409b94:	40200000 	.word	0x40200000
  409b98:	3fe00000 	.word	0x3fe00000
  409b9c:	2400      	movs	r4, #0
  409b9e:	9b06      	ldr	r3, [sp, #24]
  409ba0:	2b00      	cmp	r3, #0
  409ba2:	dd0c      	ble.n	409bbe <__kernel_rem_pio2+0x356>
  409ba4:	2b01      	cmp	r3, #1
  409ba6:	d030      	beq.n	409c0a <__kernel_rem_pio2+0x3a2>
  409ba8:	2b02      	cmp	r3, #2
  409baa:	d108      	bne.n	409bbe <__kernel_rem_pio2+0x356>
  409bac:	1e6a      	subs	r2, r5, #1
  409bae:	ab0e      	add	r3, sp, #56	; 0x38
  409bb0:	a90e      	add	r1, sp, #56	; 0x38
  409bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409bb6:	f3c3 0315 	ubfx	r3, r3, #0, #22
  409bba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409bbe:	f1b9 0f02 	cmp.w	r9, #2
  409bc2:	f47f af67 	bne.w	409a94 <__kernel_rem_pio2+0x22c>
  409bc6:	4632      	mov	r2, r6
  409bc8:	463b      	mov	r3, r7
  409bca:	2000      	movs	r0, #0
  409bcc:	49bc      	ldr	r1, [pc, #752]	; (409ec0 <__kernel_rem_pio2+0x658>)
  409bce:	f000 fe15 	bl	40a7fc <__aeabi_dsub>
  409bd2:	4606      	mov	r6, r0
  409bd4:	460f      	mov	r7, r1
  409bd6:	2c00      	cmp	r4, #0
  409bd8:	f43f af5c 	beq.w	409a94 <__kernel_rem_pio2+0x22c>
  409bdc:	9806      	ldr	r0, [sp, #24]
  409bde:	ed9f 0bb6 	vldr	d0, [pc, #728]	; 409eb8 <__kernel_rem_pio2+0x650>
  409be2:	f000 fd75 	bl	40a6d0 <scalbn>
  409be6:	4630      	mov	r0, r6
  409be8:	4639      	mov	r1, r7
  409bea:	ec53 2b10 	vmov	r2, r3, d0
  409bee:	f000 fe05 	bl	40a7fc <__aeabi_dsub>
  409bf2:	4606      	mov	r6, r0
  409bf4:	460f      	mov	r7, r1
  409bf6:	e74d      	b.n	409a94 <__kernel_rem_pio2+0x22c>
  409bf8:	f47f af44 	bne.w	409a84 <__kernel_rem_pio2+0x21c>
  409bfc:	1e6b      	subs	r3, r5, #1
  409bfe:	aa0e      	add	r2, sp, #56	; 0x38
  409c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409c04:	ea4f 59e3 	mov.w	r9, r3, asr #23
  409c08:	e71f      	b.n	409a4a <__kernel_rem_pio2+0x1e2>
  409c0a:	1e6a      	subs	r2, r5, #1
  409c0c:	ab0e      	add	r3, sp, #56	; 0x38
  409c0e:	a90e      	add	r1, sp, #56	; 0x38
  409c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409c14:	f3c3 0316 	ubfx	r3, r3, #0, #23
  409c18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  409c1c:	e7cf      	b.n	409bbe <__kernel_rem_pio2+0x356>
  409c1e:	3508      	adds	r5, #8
  409c20:	2600      	movs	r6, #0
  409c22:	2700      	movs	r7, #0
  409c24:	455d      	cmp	r5, fp
  409c26:	e8e8 6702 	strd	r6, r7, [r8], #8
  409c2a:	f47f ae67 	bne.w	4098fc <__kernel_rem_pio2+0x94>
  409c2e:	e684      	b.n	40993a <__kernel_rem_pio2+0xd2>
  409c30:	2d00      	cmp	r5, #0
  409c32:	f108 0801 	add.w	r8, r8, #1
  409c36:	bfc8      	it	gt
  409c38:	f04f 0902 	movgt.w	r9, #2
  409c3c:	f73f af0d 	bgt.w	409a5a <__kernel_rem_pio2+0x1f2>
  409c40:	4632      	mov	r2, r6
  409c42:	463b      	mov	r3, r7
  409c44:	2000      	movs	r0, #0
  409c46:	499e      	ldr	r1, [pc, #632]	; (409ec0 <__kernel_rem_pio2+0x658>)
  409c48:	f000 fdd8 	bl	40a7fc <__aeabi_dsub>
  409c4c:	f04f 0902 	mov.w	r9, #2
  409c50:	4606      	mov	r6, r0
  409c52:	460f      	mov	r7, r1
  409c54:	e71e      	b.n	409a94 <__kernel_rem_pio2+0x22c>
  409c56:	9b06      	ldr	r3, [sp, #24]
  409c58:	f8cd 900c 	str.w	r9, [sp, #12]
  409c5c:	4258      	negs	r0, r3
  409c5e:	f8cd 8014 	str.w	r8, [sp, #20]
  409c62:	ec47 6b10 	vmov	d0, r6, r7
  409c66:	f000 fd33 	bl	40a6d0 <scalbn>
  409c6a:	2200      	movs	r2, #0
  409c6c:	ee10 0a10 	vmov	r0, s0
  409c70:	4b94      	ldr	r3, [pc, #592]	; (409ec4 <__kernel_rem_pio2+0x65c>)
  409c72:	ec57 6b10 	vmov	r6, r7, d0
  409c76:	4639      	mov	r1, r7
  409c78:	f001 f9fa 	bl	40b070 <__aeabi_dcmpge>
  409c7c:	2800      	cmp	r0, #0
  409c7e:	f000 81e8 	beq.w	40a052 <__kernel_rem_pio2+0x7ea>
  409c82:	2200      	movs	r2, #0
  409c84:	4b90      	ldr	r3, [pc, #576]	; (409ec8 <__kernel_rem_pio2+0x660>)
  409c86:	4630      	mov	r0, r6
  409c88:	4639      	mov	r1, r7
  409c8a:	f000 ff6b 	bl	40ab64 <__aeabi_dmul>
  409c8e:	9b06      	ldr	r3, [sp, #24]
  409c90:	f105 0a01 	add.w	sl, r5, #1
  409c94:	3318      	adds	r3, #24
  409c96:	9306      	str	r3, [sp, #24]
  409c98:	f001 f9fe 	bl	40b098 <__aeabi_d2iz>
  409c9c:	4604      	mov	r4, r0
  409c9e:	f000 fefb 	bl	40aa98 <__aeabi_i2d>
  409ca2:	2200      	movs	r2, #0
  409ca4:	4b87      	ldr	r3, [pc, #540]	; (409ec4 <__kernel_rem_pio2+0x65c>)
  409ca6:	f000 ff5d 	bl	40ab64 <__aeabi_dmul>
  409caa:	460b      	mov	r3, r1
  409cac:	4602      	mov	r2, r0
  409cae:	4639      	mov	r1, r7
  409cb0:	4630      	mov	r0, r6
  409cb2:	f000 fda3 	bl	40a7fc <__aeabi_dsub>
  409cb6:	f001 f9ef 	bl	40b098 <__aeabi_d2iz>
  409cba:	ab0e      	add	r3, sp, #56	; 0x38
  409cbc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  409cc0:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
  409cc4:	9806      	ldr	r0, [sp, #24]
  409cc6:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 409eb8 <__kernel_rem_pio2+0x650>
  409cca:	f000 fd01 	bl	40a6d0 <scalbn>
  409cce:	f1ba 0f00 	cmp.w	sl, #0
  409cd2:	ec55 4b10 	vmov	r4, r5, d0
  409cd6:	f2c0 80c1 	blt.w	409e5c <__kernel_rem_pio2+0x5f4>
  409cda:	f10a 0301 	add.w	r3, sl, #1
  409cde:	af72      	add	r7, sp, #456	; 0x1c8
  409ce0:	aa0e      	add	r2, sp, #56	; 0x38
  409ce2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  409ce6:	9300      	str	r3, [sp, #0]
  409ce8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  409cec:	eb07 0608 	add.w	r6, r7, r8
  409cf0:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  409cf4:	f000 fed0 	bl	40aa98 <__aeabi_i2d>
  409cf8:	4622      	mov	r2, r4
  409cfa:	462b      	mov	r3, r5
  409cfc:	f000 ff32 	bl	40ab64 <__aeabi_dmul>
  409d00:	2200      	movs	r2, #0
  409d02:	4b71      	ldr	r3, [pc, #452]	; (409ec8 <__kernel_rem_pio2+0x660>)
  409d04:	e966 0102 	strd	r0, r1, [r6, #-8]!
  409d08:	4620      	mov	r0, r4
  409d0a:	4629      	mov	r1, r5
  409d0c:	f000 ff2a 	bl	40ab64 <__aeabi_dmul>
  409d10:	42be      	cmp	r6, r7
  409d12:	4604      	mov	r4, r0
  409d14:	460d      	mov	r5, r1
  409d16:	d1eb      	bne.n	409cf0 <__kernel_rem_pio2+0x488>
  409d18:	f1a8 0b08 	sub.w	fp, r8, #8
  409d1c:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  409d20:	f8cd a018 	str.w	sl, [sp, #24]
  409d24:	f04f 0800 	mov.w	r8, #0
  409d28:	eb06 030b 	add.w	r3, r6, fp
  409d2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  409d30:	f8cd 9010 	str.w	r9, [sp, #16]
  409d34:	469b      	mov	fp, r3
  409d36:	f1ba 0f00 	cmp.w	sl, #0
  409d3a:	f2c0 808c 	blt.w	409e56 <__kernel_rem_pio2+0x5ee>
  409d3e:	f1b8 0f00 	cmp.w	r8, #0
  409d42:	f2c0 8088 	blt.w	409e56 <__kernel_rem_pio2+0x5ee>
  409d46:	f8df 9184 	ldr.w	r9, [pc, #388]	; 409ecc <__kernel_rem_pio2+0x664>
  409d4a:	465d      	mov	r5, fp
  409d4c:	2400      	movs	r4, #0
  409d4e:	2600      	movs	r6, #0
  409d50:	2700      	movs	r7, #0
  409d52:	e001      	b.n	409d58 <__kernel_rem_pio2+0x4f0>
  409d54:	4544      	cmp	r4, r8
  409d56:	dc10      	bgt.n	409d7a <__kernel_rem_pio2+0x512>
  409d58:	3401      	adds	r4, #1
  409d5a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  409d5e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
  409d62:	f000 feff 	bl	40ab64 <__aeabi_dmul>
  409d66:	4602      	mov	r2, r0
  409d68:	460b      	mov	r3, r1
  409d6a:	4630      	mov	r0, r6
  409d6c:	4639      	mov	r1, r7
  409d6e:	f000 fd47 	bl	40a800 <__adddf3>
  409d72:	45a2      	cmp	sl, r4
  409d74:	4606      	mov	r6, r0
  409d76:	460f      	mov	r7, r1
  409d78:	daec      	bge.n	409d54 <__kernel_rem_pio2+0x4ec>
  409d7a:	9b04      	ldr	r3, [sp, #16]
  409d7c:	f1ab 0b08 	sub.w	fp, fp, #8
  409d80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  409d84:	f108 0801 	add.w	r8, r8, #1
  409d88:	e9c3 6700 	strd	r6, r7, [r3]
  409d8c:	9b00      	ldr	r3, [sp, #0]
  409d8e:	4598      	cmp	r8, r3
  409d90:	d1d1      	bne.n	409d36 <__kernel_rem_pio2+0x4ce>
  409d92:	9ba4      	ldr	r3, [sp, #656]	; 0x290
  409d94:	f8dd a018 	ldr.w	sl, [sp, #24]
  409d98:	f8dd 9010 	ldr.w	r9, [sp, #16]
  409d9c:	2b03      	cmp	r3, #3
  409d9e:	d835      	bhi.n	409e0c <__kernel_rem_pio2+0x5a4>
  409da0:	e8df f013 	tbh	[pc, r3, lsl #1]
  409da4:	0004003b 	.word	0x0004003b
  409da8:	00d70004 	.word	0x00d70004
  409dac:	9b00      	ldr	r3, [sp, #0]
  409dae:	2000      	movs	r0, #0
  409db0:	2100      	movs	r1, #0
  409db2:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
  409db6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409dba:	f000 fd21 	bl	40a800 <__adddf3>
  409dbe:	454c      	cmp	r4, r9
  409dc0:	d1f9      	bne.n	409db6 <__kernel_rem_pio2+0x54e>
  409dc2:	9b03      	ldr	r3, [sp, #12]
  409dc4:	2b00      	cmp	r3, #0
  409dc6:	f000 808b 	beq.w	409ee0 <__kernel_rem_pio2+0x678>
  409dca:	4602      	mov	r2, r0
  409dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409dd0:	9d08      	ldr	r5, [sp, #32]
  409dd2:	e885 000c 	stmia.w	r5, {r2, r3}
  409dd6:	4602      	mov	r2, r0
  409dd8:	460b      	mov	r3, r1
  409dda:	e9d9 0100 	ldrd	r0, r1, [r9]
  409dde:	f000 fd0d 	bl	40a7fc <__aeabi_dsub>
  409de2:	f1ba 0f00 	cmp.w	sl, #0
  409de6:	dd0b      	ble.n	409e00 <__kernel_rem_pio2+0x598>
  409de8:	ad4c      	add	r5, sp, #304	; 0x130
  409dea:	2401      	movs	r4, #1
  409dec:	3401      	adds	r4, #1
  409dee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  409df2:	f000 fd05 	bl	40a800 <__adddf3>
  409df6:	45a2      	cmp	sl, r4
  409df8:	daf8      	bge.n	409dec <__kernel_rem_pio2+0x584>
  409dfa:	9b03      	ldr	r3, [sp, #12]
  409dfc:	2b00      	cmp	r3, #0
  409dfe:	d07c      	beq.n	409efa <__kernel_rem_pio2+0x692>
  409e00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409e04:	4602      	mov	r2, r0
  409e06:	9908      	ldr	r1, [sp, #32]
  409e08:	e9c1 2302 	strd	r2, r3, [r1, #8]
  409e0c:	9b05      	ldr	r3, [sp, #20]
  409e0e:	f003 0007 	and.w	r0, r3, #7
  409e12:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e1a:	9b00      	ldr	r3, [sp, #0]
  409e1c:	2000      	movs	r0, #0
  409e1e:	2100      	movs	r1, #0
  409e20:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  409e24:	f10a 3aff 	add.w	sl, sl, #4294967295
  409e28:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  409e2c:	f000 fce8 	bl	40a800 <__adddf3>
  409e30:	f1ba 3fff 	cmp.w	sl, #4294967295
  409e34:	d1f6      	bne.n	409e24 <__kernel_rem_pio2+0x5bc>
  409e36:	9b03      	ldr	r3, [sp, #12]
  409e38:	2b00      	cmp	r3, #0
  409e3a:	d069      	beq.n	409f10 <__kernel_rem_pio2+0x6a8>
  409e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  409e40:	4602      	mov	r2, r0
  409e42:	9908      	ldr	r1, [sp, #32]
  409e44:	e9c1 2300 	strd	r2, r3, [r1]
  409e48:	9b05      	ldr	r3, [sp, #20]
  409e4a:	f003 0007 	and.w	r0, r3, #7
  409e4e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e56:	2600      	movs	r6, #0
  409e58:	2700      	movs	r7, #0
  409e5a:	e78e      	b.n	409d7a <__kernel_rem_pio2+0x512>
  409e5c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
  409e5e:	2b03      	cmp	r3, #3
  409e60:	d8d4      	bhi.n	409e0c <__kernel_rem_pio2+0x5a4>
  409e62:	e8df f003 	tbb	[pc, r3]
  409e66:	3550      	.short	0x3550
  409e68:	0235      	.short	0x0235
  409e6a:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  409e6e:	9b03      	ldr	r3, [sp, #12]
  409e70:	2000      	movs	r0, #0
  409e72:	2100      	movs	r1, #0
  409e74:	2b00      	cmp	r3, #0
  409e76:	f000 80da 	beq.w	40a02e <__kernel_rem_pio2+0x7c6>
  409e7a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  409e7e:	4604      	mov	r4, r0
  409e80:	9f08      	ldr	r7, [sp, #32]
  409e82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409e86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  409e8a:	f8d9 0000 	ldr.w	r0, [r9]
  409e8e:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409e92:	60fb      	str	r3, [r7, #12]
  409e94:	9b05      	ldr	r3, [sp, #20]
  409e96:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  409e9a:	f8d9 5008 	ldr.w	r5, [r9, #8]
  409e9e:	6038      	str	r0, [r7, #0]
  409ea0:	f003 0007 	and.w	r0, r3, #7
  409ea4:	607a      	str	r2, [r7, #4]
  409ea6:	60bd      	str	r5, [r7, #8]
  409ea8:	613c      	str	r4, [r7, #16]
  409eaa:	6179      	str	r1, [r7, #20]
  409eac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  409eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409eb4:	f3af 8000 	nop.w
  409eb8:	00000000 	.word	0x00000000
  409ebc:	3ff00000 	.word	0x3ff00000
  409ec0:	3ff00000 	.word	0x3ff00000
  409ec4:	41700000 	.word	0x41700000
  409ec8:	3e700000 	.word	0x3e700000
  409ecc:	00413aa8 	.word	0x00413aa8
  409ed0:	9b03      	ldr	r3, [sp, #12]
  409ed2:	2000      	movs	r0, #0
  409ed4:	2100      	movs	r1, #0
  409ed6:	f50d 7994 	add.w	r9, sp, #296	; 0x128
  409eda:	2b00      	cmp	r3, #0
  409edc:	f47f af75 	bne.w	409dca <__kernel_rem_pio2+0x562>
  409ee0:	9b08      	ldr	r3, [sp, #32]
  409ee2:	4602      	mov	r2, r0
  409ee4:	e9c3 0100 	strd	r0, r1, [r3]
  409ee8:	460b      	mov	r3, r1
  409eea:	e9d9 0100 	ldrd	r0, r1, [r9]
  409eee:	f000 fc85 	bl	40a7fc <__aeabi_dsub>
  409ef2:	f1ba 0f00 	cmp.w	sl, #0
  409ef6:	f73f af77 	bgt.w	409de8 <__kernel_rem_pio2+0x580>
  409efa:	460b      	mov	r3, r1
  409efc:	4602      	mov	r2, r0
  409efe:	9908      	ldr	r1, [sp, #32]
  409f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
  409f04:	e782      	b.n	409e0c <__kernel_rem_pio2+0x5a4>
  409f06:	9b03      	ldr	r3, [sp, #12]
  409f08:	2000      	movs	r0, #0
  409f0a:	2100      	movs	r1, #0
  409f0c:	2b00      	cmp	r3, #0
  409f0e:	d195      	bne.n	409e3c <__kernel_rem_pio2+0x5d4>
  409f10:	460b      	mov	r3, r1
  409f12:	4602      	mov	r2, r0
  409f14:	9908      	ldr	r1, [sp, #32]
  409f16:	e9c1 2300 	strd	r2, r3, [r1]
  409f1a:	e795      	b.n	409e48 <__kernel_rem_pio2+0x5e0>
  409f1c:	9a06      	ldr	r2, [sp, #24]
  409f1e:	ab0e      	add	r3, sp, #56	; 0x38
  409f20:	f8cd 900c 	str.w	r9, [sp, #12]
  409f24:	3a18      	subs	r2, #24
  409f26:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  409f2a:	f8cd 8014 	str.w	r8, [sp, #20]
  409f2e:	9206      	str	r2, [sp, #24]
  409f30:	2b00      	cmp	r3, #0
  409f32:	f47f aec7 	bne.w	409cc4 <__kernel_rem_pio2+0x45c>
  409f36:	ab0e      	add	r3, sp, #56	; 0x38
  409f38:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  409f3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  409f40:	f10a 3aff 	add.w	sl, sl, #4294967295
  409f44:	3a18      	subs	r2, #24
  409f46:	2900      	cmp	r1, #0
  409f48:	d0f8      	beq.n	409f3c <__kernel_rem_pio2+0x6d4>
  409f4a:	9206      	str	r2, [sp, #24]
  409f4c:	e6ba      	b.n	409cc4 <__kernel_rem_pio2+0x45c>
  409f4e:	2301      	movs	r3, #1
  409f50:	e5cb      	b.n	409aea <__kernel_rem_pio2+0x282>
  409f52:	f1ba 0f00 	cmp.w	sl, #0
  409f56:	dd8a      	ble.n	409e6e <__kernel_rem_pio2+0x606>
  409f58:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  409f5c:	f108 0c08 	add.w	ip, r8, #8
  409f60:	eb09 0b08 	add.w	fp, r9, r8
  409f64:	f8cd 8010 	str.w	r8, [sp, #16]
  409f68:	44cc      	add	ip, r9
  409f6a:	e9db 6700 	ldrd	r6, r7, [fp]
  409f6e:	46e0      	mov	r8, ip
  409f70:	4630      	mov	r0, r6
  409f72:	4639      	mov	r1, r7
  409f74:	ed3b 7b02 	vldmdb	fp!, {d7}
  409f78:	ec53 2b17 	vmov	r2, r3, d7
  409f7c:	ed8d 7b00 	vstr	d7, [sp]
  409f80:	f000 fc3e 	bl	40a800 <__adddf3>
  409f84:	4604      	mov	r4, r0
  409f86:	460d      	mov	r5, r1
  409f88:	4622      	mov	r2, r4
  409f8a:	462b      	mov	r3, r5
  409f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
  409f90:	f000 fc34 	bl	40a7fc <__aeabi_dsub>
  409f94:	4602      	mov	r2, r0
  409f96:	460b      	mov	r3, r1
  409f98:	4630      	mov	r0, r6
  409f9a:	4639      	mov	r1, r7
  409f9c:	4626      	mov	r6, r4
  409f9e:	f000 fc2f 	bl	40a800 <__adddf3>
  409fa2:	45cb      	cmp	fp, r9
  409fa4:	462f      	mov	r7, r5
  409fa6:	e968 0102 	strd	r0, r1, [r8, #-8]!
  409faa:	e9cb 4500 	strd	r4, r5, [fp]
  409fae:	d1df      	bne.n	409f70 <__kernel_rem_pio2+0x708>
  409fb0:	f1ba 0f01 	cmp.w	sl, #1
  409fb4:	f8dd 8010 	ldr.w	r8, [sp, #16]
  409fb8:	f77f af59 	ble.w	409e6e <__kernel_rem_pio2+0x606>
  409fbc:	f108 0408 	add.w	r4, r8, #8
  409fc0:	44c8      	add	r8, r9
  409fc2:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
  409fc6:	444c      	add	r4, r9
  409fc8:	4645      	mov	r5, r8
  409fca:	e9d8 ab00 	ldrd	sl, fp, [r8]
  409fce:	46a0      	mov	r8, r4
  409fd0:	4652      	mov	r2, sl
  409fd2:	465b      	mov	r3, fp
  409fd4:	f8cd c010 	str.w	ip, [sp, #16]
  409fd8:	ed35 7b02 	vldmdb	r5!, {d7}
  409fdc:	ec51 0b17 	vmov	r0, r1, d7
  409fe0:	ed8d 7b00 	vstr	d7, [sp]
  409fe4:	f000 fc0c 	bl	40a800 <__adddf3>
  409fe8:	4606      	mov	r6, r0
  409fea:	460f      	mov	r7, r1
  409fec:	4632      	mov	r2, r6
  409fee:	463b      	mov	r3, r7
  409ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
  409ff4:	f000 fc02 	bl	40a7fc <__aeabi_dsub>
  409ff8:	4652      	mov	r2, sl
  409ffa:	465b      	mov	r3, fp
  409ffc:	46b2      	mov	sl, r6
  409ffe:	f000 fbff 	bl	40a800 <__adddf3>
  40a002:	f8dd c010 	ldr.w	ip, [sp, #16]
  40a006:	46bb      	mov	fp, r7
  40a008:	4565      	cmp	r5, ip
  40a00a:	e968 0102 	strd	r0, r1, [r8, #-8]!
  40a00e:	e9c5 6700 	strd	r6, r7, [r5]
  40a012:	d1dd      	bne.n	409fd0 <__kernel_rem_pio2+0x768>
  40a014:	2000      	movs	r0, #0
  40a016:	2100      	movs	r1, #0
  40a018:	ad4e      	add	r5, sp, #312	; 0x138
  40a01a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  40a01e:	f000 fbef 	bl	40a800 <__adddf3>
  40a022:	42ac      	cmp	r4, r5
  40a024:	d1f9      	bne.n	40a01a <__kernel_rem_pio2+0x7b2>
  40a026:	9b03      	ldr	r3, [sp, #12]
  40a028:	2b00      	cmp	r3, #0
  40a02a:	f47f af26 	bne.w	409e7a <__kernel_rem_pio2+0x612>
  40a02e:	9f08      	ldr	r7, [sp, #32]
  40a030:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
  40a034:	e9d9 4500 	ldrd	r4, r5, [r9]
  40a038:	e9c7 2302 	strd	r2, r3, [r7, #8]
  40a03c:	9b05      	ldr	r3, [sp, #20]
  40a03e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  40a042:	f003 0007 	and.w	r0, r3, #7
  40a046:	e9c7 4500 	strd	r4, r5, [r7]
  40a04a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
  40a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a052:	4630      	mov	r0, r6
  40a054:	4639      	mov	r1, r7
  40a056:	f001 f81f 	bl	40b098 <__aeabi_d2iz>
  40a05a:	ab0e      	add	r3, sp, #56	; 0x38
  40a05c:	46aa      	mov	sl, r5
  40a05e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
  40a062:	e62f      	b.n	409cc4 <__kernel_rem_pio2+0x45c>
  40a064:	0000      	movs	r0, r0
	...

0040a068 <__kernel_sin>:
  40a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a06c:	ec55 4b10 	vmov	r4, r5, d0
  40a070:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  40a074:	4682      	mov	sl, r0
  40a076:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  40a07a:	ed2d 8b02 	vpush	{d8}
  40a07e:	eeb0 8a41 	vmov.f32	s16, s2
  40a082:	eef0 8a61 	vmov.f32	s17, s3
  40a086:	b083      	sub	sp, #12
  40a088:	da07      	bge.n	40a09a <__kernel_sin+0x32>
  40a08a:	ee10 0a10 	vmov	r0, s0
  40a08e:	4629      	mov	r1, r5
  40a090:	f001 f802 	bl	40b098 <__aeabi_d2iz>
  40a094:	2800      	cmp	r0, #0
  40a096:	f000 808c 	beq.w	40a1b2 <__kernel_sin+0x14a>
  40a09a:	4622      	mov	r2, r4
  40a09c:	462b      	mov	r3, r5
  40a09e:	4620      	mov	r0, r4
  40a0a0:	4629      	mov	r1, r5
  40a0a2:	f000 fd5f 	bl	40ab64 <__aeabi_dmul>
  40a0a6:	4606      	mov	r6, r0
  40a0a8:	460f      	mov	r7, r1
  40a0aa:	4622      	mov	r2, r4
  40a0ac:	462b      	mov	r3, r5
  40a0ae:	f000 fd59 	bl	40ab64 <__aeabi_dmul>
  40a0b2:	4680      	mov	r8, r0
  40a0b4:	4689      	mov	r9, r1
  40a0b6:	4630      	mov	r0, r6
  40a0b8:	4639      	mov	r1, r7
  40a0ba:	a344      	add	r3, pc, #272	; (adr r3, 40a1cc <__kernel_sin+0x164>)
  40a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0c0:	f000 fd50 	bl	40ab64 <__aeabi_dmul>
  40a0c4:	a343      	add	r3, pc, #268	; (adr r3, 40a1d4 <__kernel_sin+0x16c>)
  40a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0ca:	f000 fb97 	bl	40a7fc <__aeabi_dsub>
  40a0ce:	4632      	mov	r2, r6
  40a0d0:	463b      	mov	r3, r7
  40a0d2:	f000 fd47 	bl	40ab64 <__aeabi_dmul>
  40a0d6:	a341      	add	r3, pc, #260	; (adr r3, 40a1dc <__kernel_sin+0x174>)
  40a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0dc:	f000 fb90 	bl	40a800 <__adddf3>
  40a0e0:	4632      	mov	r2, r6
  40a0e2:	463b      	mov	r3, r7
  40a0e4:	f000 fd3e 	bl	40ab64 <__aeabi_dmul>
  40a0e8:	a33e      	add	r3, pc, #248	; (adr r3, 40a1e4 <__kernel_sin+0x17c>)
  40a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0ee:	f000 fb85 	bl	40a7fc <__aeabi_dsub>
  40a0f2:	4632      	mov	r2, r6
  40a0f4:	463b      	mov	r3, r7
  40a0f6:	f000 fd35 	bl	40ab64 <__aeabi_dmul>
  40a0fa:	a33c      	add	r3, pc, #240	; (adr r3, 40a1ec <__kernel_sin+0x184>)
  40a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a100:	f000 fb7e 	bl	40a800 <__adddf3>
  40a104:	e9cd 0100 	strd	r0, r1, [sp]
  40a108:	f1ba 0f00 	cmp.w	sl, #0
  40a10c:	d037      	beq.n	40a17e <__kernel_sin+0x116>
  40a10e:	2200      	movs	r2, #0
  40a110:	4b2d      	ldr	r3, [pc, #180]	; (40a1c8 <__kernel_sin+0x160>)
  40a112:	ec51 0b18 	vmov	r0, r1, d8
  40a116:	f000 fd25 	bl	40ab64 <__aeabi_dmul>
  40a11a:	4682      	mov	sl, r0
  40a11c:	468b      	mov	fp, r1
  40a11e:	4640      	mov	r0, r8
  40a120:	4649      	mov	r1, r9
  40a122:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a126:	f000 fd1d 	bl	40ab64 <__aeabi_dmul>
  40a12a:	4602      	mov	r2, r0
  40a12c:	460b      	mov	r3, r1
  40a12e:	4650      	mov	r0, sl
  40a130:	4659      	mov	r1, fp
  40a132:	f000 fb63 	bl	40a7fc <__aeabi_dsub>
  40a136:	4632      	mov	r2, r6
  40a138:	463b      	mov	r3, r7
  40a13a:	f000 fd13 	bl	40ab64 <__aeabi_dmul>
  40a13e:	ec53 2b18 	vmov	r2, r3, d8
  40a142:	f000 fb5b 	bl	40a7fc <__aeabi_dsub>
  40a146:	4606      	mov	r6, r0
  40a148:	460f      	mov	r7, r1
  40a14a:	4640      	mov	r0, r8
  40a14c:	4649      	mov	r1, r9
  40a14e:	a31c      	add	r3, pc, #112	; (adr r3, 40a1c0 <__kernel_sin+0x158>)
  40a150:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a154:	f000 fd06 	bl	40ab64 <__aeabi_dmul>
  40a158:	4602      	mov	r2, r0
  40a15a:	460b      	mov	r3, r1
  40a15c:	4630      	mov	r0, r6
  40a15e:	4639      	mov	r1, r7
  40a160:	f000 fb4e 	bl	40a800 <__adddf3>
  40a164:	4602      	mov	r2, r0
  40a166:	460b      	mov	r3, r1
  40a168:	4620      	mov	r0, r4
  40a16a:	4629      	mov	r1, r5
  40a16c:	f000 fb46 	bl	40a7fc <__aeabi_dsub>
  40a170:	ec41 0b10 	vmov	d0, r0, r1
  40a174:	b003      	add	sp, #12
  40a176:	ecbd 8b02 	vpop	{d8}
  40a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a17e:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a182:	4630      	mov	r0, r6
  40a184:	4639      	mov	r1, r7
  40a186:	f000 fced 	bl	40ab64 <__aeabi_dmul>
  40a18a:	a30d      	add	r3, pc, #52	; (adr r3, 40a1c0 <__kernel_sin+0x158>)
  40a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a190:	f000 fb34 	bl	40a7fc <__aeabi_dsub>
  40a194:	4642      	mov	r2, r8
  40a196:	464b      	mov	r3, r9
  40a198:	f000 fce4 	bl	40ab64 <__aeabi_dmul>
  40a19c:	4622      	mov	r2, r4
  40a19e:	462b      	mov	r3, r5
  40a1a0:	f000 fb2e 	bl	40a800 <__adddf3>
  40a1a4:	ec41 0b10 	vmov	d0, r0, r1
  40a1a8:	b003      	add	sp, #12
  40a1aa:	ecbd 8b02 	vpop	{d8}
  40a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1b2:	ec45 4b10 	vmov	d0, r4, r5
  40a1b6:	b003      	add	sp, #12
  40a1b8:	ecbd 8b02 	vpop	{d8}
  40a1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a1c0:	55555549 	.word	0x55555549
  40a1c4:	3fc55555 	.word	0x3fc55555
  40a1c8:	3fe00000 	.word	0x3fe00000
  40a1cc:	5acfd57c 	.word	0x5acfd57c
  40a1d0:	3de5d93a 	.word	0x3de5d93a
  40a1d4:	8a2b9ceb 	.word	0x8a2b9ceb
  40a1d8:	3e5ae5e6 	.word	0x3e5ae5e6
  40a1dc:	57b1fe7d 	.word	0x57b1fe7d
  40a1e0:	3ec71de3 	.word	0x3ec71de3
  40a1e4:	19c161d5 	.word	0x19c161d5
  40a1e8:	3f2a01a0 	.word	0x3f2a01a0
  40a1ec:	1110f8a6 	.word	0x1110f8a6
  40a1f0:	3f811111 	.word	0x3f811111
  40a1f4:	00000000 	.word	0x00000000

0040a1f8 <atan>:
  40a1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a1fc:	ec55 4b10 	vmov	r4, r5, d0
  40a200:	4bc5      	ldr	r3, [pc, #788]	; (40a518 <atan+0x320>)
  40a202:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
  40a206:	46ab      	mov	fp, r5
  40a208:	4598      	cmp	r8, r3
  40a20a:	dd11      	ble.n	40a230 <atan+0x38>
  40a20c:	4bc3      	ldr	r3, [pc, #780]	; (40a51c <atan+0x324>)
  40a20e:	4598      	cmp	r8, r3
  40a210:	dc04      	bgt.n	40a21c <atan+0x24>
  40a212:	f040 80e3 	bne.w	40a3dc <atan+0x1e4>
  40a216:	2c00      	cmp	r4, #0
  40a218:	f000 80e0 	beq.w	40a3dc <atan+0x1e4>
  40a21c:	4620      	mov	r0, r4
  40a21e:	4629      	mov	r1, r5
  40a220:	4622      	mov	r2, r4
  40a222:	462b      	mov	r3, r5
  40a224:	f000 faec 	bl	40a800 <__adddf3>
  40a228:	ec41 0b10 	vmov	d0, r0, r1
  40a22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a230:	4bbb      	ldr	r3, [pc, #748]	; (40a520 <atan+0x328>)
  40a232:	4598      	cmp	r8, r3
  40a234:	f300 80b1 	bgt.w	40a39a <atan+0x1a2>
  40a238:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  40a23c:	4598      	cmp	r8, r3
  40a23e:	f340 8097 	ble.w	40a370 <atan+0x178>
  40a242:	f04f 3aff 	mov.w	sl, #4294967295
  40a246:	4622      	mov	r2, r4
  40a248:	462b      	mov	r3, r5
  40a24a:	4620      	mov	r0, r4
  40a24c:	4629      	mov	r1, r5
  40a24e:	f000 fc89 	bl	40ab64 <__aeabi_dmul>
  40a252:	4602      	mov	r2, r0
  40a254:	460b      	mov	r3, r1
  40a256:	4680      	mov	r8, r0
  40a258:	4689      	mov	r9, r1
  40a25a:	f000 fc83 	bl	40ab64 <__aeabi_dmul>
  40a25e:	4606      	mov	r6, r0
  40a260:	460f      	mov	r7, r1
  40a262:	a391      	add	r3, pc, #580	; (adr r3, 40a4a8 <atan+0x2b0>)
  40a264:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a268:	f000 fc7c 	bl	40ab64 <__aeabi_dmul>
  40a26c:	a390      	add	r3, pc, #576	; (adr r3, 40a4b0 <atan+0x2b8>)
  40a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a272:	f000 fac5 	bl	40a800 <__adddf3>
  40a276:	4632      	mov	r2, r6
  40a278:	463b      	mov	r3, r7
  40a27a:	f000 fc73 	bl	40ab64 <__aeabi_dmul>
  40a27e:	a38e      	add	r3, pc, #568	; (adr r3, 40a4b8 <atan+0x2c0>)
  40a280:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a284:	f000 fabc 	bl	40a800 <__adddf3>
  40a288:	4632      	mov	r2, r6
  40a28a:	463b      	mov	r3, r7
  40a28c:	f000 fc6a 	bl	40ab64 <__aeabi_dmul>
  40a290:	a38b      	add	r3, pc, #556	; (adr r3, 40a4c0 <atan+0x2c8>)
  40a292:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a296:	f000 fab3 	bl	40a800 <__adddf3>
  40a29a:	4632      	mov	r2, r6
  40a29c:	463b      	mov	r3, r7
  40a29e:	f000 fc61 	bl	40ab64 <__aeabi_dmul>
  40a2a2:	a389      	add	r3, pc, #548	; (adr r3, 40a4c8 <atan+0x2d0>)
  40a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2a8:	f000 faaa 	bl	40a800 <__adddf3>
  40a2ac:	4632      	mov	r2, r6
  40a2ae:	463b      	mov	r3, r7
  40a2b0:	f000 fc58 	bl	40ab64 <__aeabi_dmul>
  40a2b4:	a386      	add	r3, pc, #536	; (adr r3, 40a4d0 <atan+0x2d8>)
  40a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2ba:	f000 faa1 	bl	40a800 <__adddf3>
  40a2be:	4642      	mov	r2, r8
  40a2c0:	464b      	mov	r3, r9
  40a2c2:	f000 fc4f 	bl	40ab64 <__aeabi_dmul>
  40a2c6:	4680      	mov	r8, r0
  40a2c8:	4689      	mov	r9, r1
  40a2ca:	4630      	mov	r0, r6
  40a2cc:	4639      	mov	r1, r7
  40a2ce:	a382      	add	r3, pc, #520	; (adr r3, 40a4d8 <atan+0x2e0>)
  40a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2d4:	f000 fc46 	bl	40ab64 <__aeabi_dmul>
  40a2d8:	a381      	add	r3, pc, #516	; (adr r3, 40a4e0 <atan+0x2e8>)
  40a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2de:	f000 fa8d 	bl	40a7fc <__aeabi_dsub>
  40a2e2:	4632      	mov	r2, r6
  40a2e4:	463b      	mov	r3, r7
  40a2e6:	f000 fc3d 	bl	40ab64 <__aeabi_dmul>
  40a2ea:	a37f      	add	r3, pc, #508	; (adr r3, 40a4e8 <atan+0x2f0>)
  40a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2f0:	f000 fa84 	bl	40a7fc <__aeabi_dsub>
  40a2f4:	4632      	mov	r2, r6
  40a2f6:	463b      	mov	r3, r7
  40a2f8:	f000 fc34 	bl	40ab64 <__aeabi_dmul>
  40a2fc:	a37c      	add	r3, pc, #496	; (adr r3, 40a4f0 <atan+0x2f8>)
  40a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a302:	f000 fa7b 	bl	40a7fc <__aeabi_dsub>
  40a306:	4632      	mov	r2, r6
  40a308:	463b      	mov	r3, r7
  40a30a:	f000 fc2b 	bl	40ab64 <__aeabi_dmul>
  40a30e:	a37a      	add	r3, pc, #488	; (adr r3, 40a4f8 <atan+0x300>)
  40a310:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a314:	f000 fa72 	bl	40a7fc <__aeabi_dsub>
  40a318:	4632      	mov	r2, r6
  40a31a:	463b      	mov	r3, r7
  40a31c:	f000 fc22 	bl	40ab64 <__aeabi_dmul>
  40a320:	f1ba 3fff 	cmp.w	sl, #4294967295
  40a324:	4602      	mov	r2, r0
  40a326:	460b      	mov	r3, r1
  40a328:	d062      	beq.n	40a3f0 <atan+0x1f8>
  40a32a:	4640      	mov	r0, r8
  40a32c:	4649      	mov	r1, r9
  40a32e:	f000 fa67 	bl	40a800 <__adddf3>
  40a332:	4622      	mov	r2, r4
  40a334:	462b      	mov	r3, r5
  40a336:	ea4f 0aca 	mov.w	sl, sl, lsl #3
  40a33a:	f000 fc13 	bl	40ab64 <__aeabi_dmul>
  40a33e:	4e79      	ldr	r6, [pc, #484]	; (40a524 <atan+0x32c>)
  40a340:	4b79      	ldr	r3, [pc, #484]	; (40a528 <atan+0x330>)
  40a342:	4456      	add	r6, sl
  40a344:	449a      	add	sl, r3
  40a346:	e9da 2300 	ldrd	r2, r3, [sl]
  40a34a:	f000 fa57 	bl	40a7fc <__aeabi_dsub>
  40a34e:	4622      	mov	r2, r4
  40a350:	462b      	mov	r3, r5
  40a352:	f000 fa53 	bl	40a7fc <__aeabi_dsub>
  40a356:	4602      	mov	r2, r0
  40a358:	460b      	mov	r3, r1
  40a35a:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a35e:	f000 fa4d 	bl	40a7fc <__aeabi_dsub>
  40a362:	f1bb 0f00 	cmp.w	fp, #0
  40a366:	f6bf af5f 	bge.w	40a228 <atan+0x30>
  40a36a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a36e:	e75b      	b.n	40a228 <atan+0x30>
  40a370:	a363      	add	r3, pc, #396	; (adr r3, 40a500 <atan+0x308>)
  40a372:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a376:	ee10 0a10 	vmov	r0, s0
  40a37a:	4629      	mov	r1, r5
  40a37c:	f000 fa40 	bl	40a800 <__adddf3>
  40a380:	2200      	movs	r2, #0
  40a382:	4b6a      	ldr	r3, [pc, #424]	; (40a52c <atan+0x334>)
  40a384:	f000 fe7e 	bl	40b084 <__aeabi_dcmpgt>
  40a388:	2800      	cmp	r0, #0
  40a38a:	f43f af5a 	beq.w	40a242 <atan+0x4a>
  40a38e:	4620      	mov	r0, r4
  40a390:	4629      	mov	r1, r5
  40a392:	ec41 0b10 	vmov	d0, r0, r1
  40a396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a39a:	f000 f8d1 	bl	40a540 <fabs>
  40a39e:	4b64      	ldr	r3, [pc, #400]	; (40a530 <atan+0x338>)
  40a3a0:	4598      	cmp	r8, r3
  40a3a2:	ec57 6b10 	vmov	r6, r7, d0
  40a3a6:	dc32      	bgt.n	40a40e <atan+0x216>
  40a3a8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40a3ac:	4598      	cmp	r8, r3
  40a3ae:	dc5f      	bgt.n	40a470 <atan+0x278>
  40a3b0:	ee10 2a10 	vmov	r2, s0
  40a3b4:	ee10 0a10 	vmov	r0, s0
  40a3b8:	463b      	mov	r3, r7
  40a3ba:	4639      	mov	r1, r7
  40a3bc:	f000 fa20 	bl	40a800 <__adddf3>
  40a3c0:	2200      	movs	r2, #0
  40a3c2:	4b5a      	ldr	r3, [pc, #360]	; (40a52c <atan+0x334>)
  40a3c4:	f04f 0a00 	mov.w	sl, #0
  40a3c8:	f000 fa18 	bl	40a7fc <__aeabi_dsub>
  40a3cc:	2200      	movs	r2, #0
  40a3ce:	4604      	mov	r4, r0
  40a3d0:	460d      	mov	r5, r1
  40a3d2:	4630      	mov	r0, r6
  40a3d4:	4639      	mov	r1, r7
  40a3d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a3da:	e02e      	b.n	40a43a <atan+0x242>
  40a3dc:	f1bb 0f00 	cmp.w	fp, #0
  40a3e0:	dd36      	ble.n	40a450 <atan+0x258>
  40a3e2:	a149      	add	r1, pc, #292	; (adr r1, 40a508 <atan+0x310>)
  40a3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a3e8:	ec41 0b10 	vmov	d0, r0, r1
  40a3ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3f0:	4640      	mov	r0, r8
  40a3f2:	4649      	mov	r1, r9
  40a3f4:	f000 fa04 	bl	40a800 <__adddf3>
  40a3f8:	4622      	mov	r2, r4
  40a3fa:	462b      	mov	r3, r5
  40a3fc:	f000 fbb2 	bl	40ab64 <__aeabi_dmul>
  40a400:	4602      	mov	r2, r0
  40a402:	460b      	mov	r3, r1
  40a404:	4620      	mov	r0, r4
  40a406:	4629      	mov	r1, r5
  40a408:	f000 f9f8 	bl	40a7fc <__aeabi_dsub>
  40a40c:	e70c      	b.n	40a228 <atan+0x30>
  40a40e:	4b49      	ldr	r3, [pc, #292]	; (40a534 <atan+0x33c>)
  40a410:	4598      	cmp	r8, r3
  40a412:	dc21      	bgt.n	40a458 <atan+0x260>
  40a414:	ee10 0a10 	vmov	r0, s0
  40a418:	2200      	movs	r2, #0
  40a41a:	4b47      	ldr	r3, [pc, #284]	; (40a538 <atan+0x340>)
  40a41c:	4639      	mov	r1, r7
  40a41e:	f000 f9ed 	bl	40a7fc <__aeabi_dsub>
  40a422:	2200      	movs	r2, #0
  40a424:	4b44      	ldr	r3, [pc, #272]	; (40a538 <atan+0x340>)
  40a426:	4604      	mov	r4, r0
  40a428:	460d      	mov	r5, r1
  40a42a:	4630      	mov	r0, r6
  40a42c:	4639      	mov	r1, r7
  40a42e:	f04f 0a02 	mov.w	sl, #2
  40a432:	f000 fb97 	bl	40ab64 <__aeabi_dmul>
  40a436:	2200      	movs	r2, #0
  40a438:	4b3c      	ldr	r3, [pc, #240]	; (40a52c <atan+0x334>)
  40a43a:	f000 f9e1 	bl	40a800 <__adddf3>
  40a43e:	4602      	mov	r2, r0
  40a440:	460b      	mov	r3, r1
  40a442:	4620      	mov	r0, r4
  40a444:	4629      	mov	r1, r5
  40a446:	f000 fcb7 	bl	40adb8 <__aeabi_ddiv>
  40a44a:	4604      	mov	r4, r0
  40a44c:	460d      	mov	r5, r1
  40a44e:	e6fa      	b.n	40a246 <atan+0x4e>
  40a450:	a12f      	add	r1, pc, #188	; (adr r1, 40a510 <atan+0x318>)
  40a452:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a456:	e6e7      	b.n	40a228 <atan+0x30>
  40a458:	ee10 2a10 	vmov	r2, s0
  40a45c:	463b      	mov	r3, r7
  40a45e:	2000      	movs	r0, #0
  40a460:	4936      	ldr	r1, [pc, #216]	; (40a53c <atan+0x344>)
  40a462:	f000 fca9 	bl	40adb8 <__aeabi_ddiv>
  40a466:	f04f 0a03 	mov.w	sl, #3
  40a46a:	4604      	mov	r4, r0
  40a46c:	460d      	mov	r5, r1
  40a46e:	e6ea      	b.n	40a246 <atan+0x4e>
  40a470:	ee10 0a10 	vmov	r0, s0
  40a474:	2200      	movs	r2, #0
  40a476:	4b2d      	ldr	r3, [pc, #180]	; (40a52c <atan+0x334>)
  40a478:	4639      	mov	r1, r7
  40a47a:	f000 f9bf 	bl	40a7fc <__aeabi_dsub>
  40a47e:	4604      	mov	r4, r0
  40a480:	460d      	mov	r5, r1
  40a482:	2200      	movs	r2, #0
  40a484:	4b29      	ldr	r3, [pc, #164]	; (40a52c <atan+0x334>)
  40a486:	4630      	mov	r0, r6
  40a488:	4639      	mov	r1, r7
  40a48a:	f04f 0a01 	mov.w	sl, #1
  40a48e:	f000 f9b7 	bl	40a800 <__adddf3>
  40a492:	4602      	mov	r2, r0
  40a494:	460b      	mov	r3, r1
  40a496:	4620      	mov	r0, r4
  40a498:	4629      	mov	r1, r5
  40a49a:	f000 fc8d 	bl	40adb8 <__aeabi_ddiv>
  40a49e:	4604      	mov	r4, r0
  40a4a0:	460d      	mov	r5, r1
  40a4a2:	e6d0      	b.n	40a246 <atan+0x4e>
  40a4a4:	f3af 8000 	nop.w
  40a4a8:	e322da11 	.word	0xe322da11
  40a4ac:	3f90ad3a 	.word	0x3f90ad3a
  40a4b0:	24760deb 	.word	0x24760deb
  40a4b4:	3fa97b4b 	.word	0x3fa97b4b
  40a4b8:	a0d03d51 	.word	0xa0d03d51
  40a4bc:	3fb10d66 	.word	0x3fb10d66
  40a4c0:	c54c206e 	.word	0xc54c206e
  40a4c4:	3fb745cd 	.word	0x3fb745cd
  40a4c8:	920083ff 	.word	0x920083ff
  40a4cc:	3fc24924 	.word	0x3fc24924
  40a4d0:	5555550d 	.word	0x5555550d
  40a4d4:	3fd55555 	.word	0x3fd55555
  40a4d8:	2c6a6c2f 	.word	0x2c6a6c2f
  40a4dc:	bfa2b444 	.word	0xbfa2b444
  40a4e0:	52defd9a 	.word	0x52defd9a
  40a4e4:	3fadde2d 	.word	0x3fadde2d
  40a4e8:	af749a6d 	.word	0xaf749a6d
  40a4ec:	3fb3b0f2 	.word	0x3fb3b0f2
  40a4f0:	fe231671 	.word	0xfe231671
  40a4f4:	3fbc71c6 	.word	0x3fbc71c6
  40a4f8:	9998ebc4 	.word	0x9998ebc4
  40a4fc:	3fc99999 	.word	0x3fc99999
  40a500:	8800759c 	.word	0x8800759c
  40a504:	7e37e43c 	.word	0x7e37e43c
  40a508:	54442d18 	.word	0x54442d18
  40a50c:	3ff921fb 	.word	0x3ff921fb
  40a510:	54442d18 	.word	0x54442d18
  40a514:	bff921fb 	.word	0xbff921fb
  40a518:	440fffff 	.word	0x440fffff
  40a51c:	7ff00000 	.word	0x7ff00000
  40a520:	3fdbffff 	.word	0x3fdbffff
  40a524:	00413b08 	.word	0x00413b08
  40a528:	00413ae8 	.word	0x00413ae8
  40a52c:	3ff00000 	.word	0x3ff00000
  40a530:	3ff2ffff 	.word	0x3ff2ffff
  40a534:	40037fff 	.word	0x40037fff
  40a538:	3ff80000 	.word	0x3ff80000
  40a53c:	bff00000 	.word	0xbff00000

0040a540 <fabs>:
  40a540:	ec53 2b10 	vmov	r2, r3, d0
  40a544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40a548:	ec43 2b10 	vmov	d0, r2, r3
  40a54c:	4770      	bx	lr
  40a54e:	bf00      	nop

0040a550 <floor>:
  40a550:	ec51 0b10 	vmov	r0, r1, d0
  40a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a558:	f3c1 570a 	ubfx	r7, r1, #20, #11
  40a55c:	460c      	mov	r4, r1
  40a55e:	ee10 3a10 	vmov	r3, s0
  40a562:	4688      	mov	r8, r1
  40a564:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
  40a568:	4606      	mov	r6, r0
  40a56a:	2d13      	cmp	r5, #19
  40a56c:	dc1c      	bgt.n	40a5a8 <floor+0x58>
  40a56e:	2d00      	cmp	r5, #0
  40a570:	db42      	blt.n	40a5f8 <floor+0xa8>
  40a572:	4f3d      	ldr	r7, [pc, #244]	; (40a668 <floor+0x118>)
  40a574:	412f      	asrs	r7, r5
  40a576:	ea07 0201 	and.w	r2, r7, r1
  40a57a:	4313      	orrs	r3, r2
  40a57c:	d019      	beq.n	40a5b2 <floor+0x62>
  40a57e:	a338      	add	r3, pc, #224	; (adr r3, 40a660 <floor+0x110>)
  40a580:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a584:	f000 f93c 	bl	40a800 <__adddf3>
  40a588:	2200      	movs	r2, #0
  40a58a:	2300      	movs	r3, #0
  40a58c:	f000 fd7a 	bl	40b084 <__aeabi_dcmpgt>
  40a590:	b120      	cbz	r0, 40a59c <floor+0x4c>
  40a592:	2c00      	cmp	r4, #0
  40a594:	db49      	blt.n	40a62a <floor+0xda>
  40a596:	ea28 0407 	bic.w	r4, r8, r7
  40a59a:	2600      	movs	r6, #0
  40a59c:	4623      	mov	r3, r4
  40a59e:	4632      	mov	r2, r6
  40a5a0:	ec43 2b10 	vmov	d0, r2, r3
  40a5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5a8:	2d33      	cmp	r5, #51	; 0x33
  40a5aa:	dd06      	ble.n	40a5ba <floor+0x6a>
  40a5ac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  40a5b0:	d032      	beq.n	40a618 <floor+0xc8>
  40a5b2:	ec41 0b10 	vmov	d0, r0, r1
  40a5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5ba:	f2a7 4313 	subw	r3, r7, #1043	; 0x413
  40a5be:	f04f 39ff 	mov.w	r9, #4294967295
  40a5c2:	fa29 f903 	lsr.w	r9, r9, r3
  40a5c6:	ea19 0f00 	tst.w	r9, r0
  40a5ca:	d0f2      	beq.n	40a5b2 <floor+0x62>
  40a5cc:	a324      	add	r3, pc, #144	; (adr r3, 40a660 <floor+0x110>)
  40a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5d2:	f000 f915 	bl	40a800 <__adddf3>
  40a5d6:	2200      	movs	r2, #0
  40a5d8:	2300      	movs	r3, #0
  40a5da:	f000 fd53 	bl	40b084 <__aeabi_dcmpgt>
  40a5de:	2800      	cmp	r0, #0
  40a5e0:	d0dc      	beq.n	40a59c <floor+0x4c>
  40a5e2:	2c00      	cmp	r4, #0
  40a5e4:	db26      	blt.n	40a634 <floor+0xe4>
  40a5e6:	4644      	mov	r4, r8
  40a5e8:	ea26 0609 	bic.w	r6, r6, r9
  40a5ec:	4623      	mov	r3, r4
  40a5ee:	4632      	mov	r2, r6
  40a5f0:	ec43 2b10 	vmov	d0, r2, r3
  40a5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a5f8:	a319      	add	r3, pc, #100	; (adr r3, 40a660 <floor+0x110>)
  40a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5fe:	f000 f8ff 	bl	40a800 <__adddf3>
  40a602:	2200      	movs	r2, #0
  40a604:	2300      	movs	r3, #0
  40a606:	f000 fd3d 	bl	40b084 <__aeabi_dcmpgt>
  40a60a:	2800      	cmp	r0, #0
  40a60c:	d0c6      	beq.n	40a59c <floor+0x4c>
  40a60e:	2c00      	cmp	r4, #0
  40a610:	db1c      	blt.n	40a64c <floor+0xfc>
  40a612:	2600      	movs	r6, #0
  40a614:	4634      	mov	r4, r6
  40a616:	e7c1      	b.n	40a59c <floor+0x4c>
  40a618:	ee10 2a10 	vmov	r2, s0
  40a61c:	460b      	mov	r3, r1
  40a61e:	f000 f8ef 	bl	40a800 <__adddf3>
  40a622:	ec41 0b10 	vmov	d0, r0, r1
  40a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a62a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40a62e:	412b      	asrs	r3, r5
  40a630:	4498      	add	r8, r3
  40a632:	e7b0      	b.n	40a596 <floor+0x46>
  40a634:	2d14      	cmp	r5, #20
  40a636:	d006      	beq.n	40a646 <floor+0xf6>
  40a638:	f240 4233 	movw	r2, #1075	; 0x433
  40a63c:	2301      	movs	r3, #1
  40a63e:	1bd2      	subs	r2, r2, r7
  40a640:	4093      	lsls	r3, r2
  40a642:	199e      	adds	r6, r3, r6
  40a644:	d3cf      	bcc.n	40a5e6 <floor+0x96>
  40a646:	f108 0801 	add.w	r8, r8, #1
  40a64a:	e7cc      	b.n	40a5e6 <floor+0x96>
  40a64c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
  40a650:	431e      	orrs	r6, r3
  40a652:	d0a3      	beq.n	40a59c <floor+0x4c>
  40a654:	2600      	movs	r6, #0
  40a656:	4c05      	ldr	r4, [pc, #20]	; (40a66c <floor+0x11c>)
  40a658:	e7a0      	b.n	40a59c <floor+0x4c>
  40a65a:	bf00      	nop
  40a65c:	f3af 8000 	nop.w
  40a660:	8800759c 	.word	0x8800759c
  40a664:	7e37e43c 	.word	0x7e37e43c
  40a668:	000fffff 	.word	0x000fffff
  40a66c:	bff00000 	.word	0xbff00000

0040a670 <__fpclassifyd>:
  40a670:	ee10 3a10 	vmov	r3, s0
  40a674:	ec51 0b10 	vmov	r0, r1, d0
  40a678:	fab3 f383 	clz	r3, r3
  40a67c:	f031 4000 	bics.w	r0, r1, #2147483648	; 0x80000000
  40a680:	ea4f 1353 	mov.w	r3, r3, lsr #5
  40a684:	d102      	bne.n	40a68c <__fpclassifyd+0x1c>
  40a686:	b10b      	cbz	r3, 40a68c <__fpclassifyd+0x1c>
  40a688:	2002      	movs	r0, #2
  40a68a:	4770      	bx	lr
  40a68c:	f5a0 1180 	sub.w	r1, r0, #1048576	; 0x100000
  40a690:	4a08      	ldr	r2, [pc, #32]	; (40a6b4 <__fpclassifyd+0x44>)
  40a692:	4291      	cmp	r1, r2
  40a694:	d801      	bhi.n	40a69a <__fpclassifyd+0x2a>
  40a696:	2004      	movs	r0, #4
  40a698:	4770      	bx	lr
  40a69a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  40a69e:	d201      	bcs.n	40a6a4 <__fpclassifyd+0x34>
  40a6a0:	2003      	movs	r0, #3
  40a6a2:	4770      	bx	lr
  40a6a4:	4a04      	ldr	r2, [pc, #16]	; (40a6b8 <__fpclassifyd+0x48>)
  40a6a6:	4290      	cmp	r0, r2
  40a6a8:	bf14      	ite	ne
  40a6aa:	2000      	movne	r0, #0
  40a6ac:	f003 0001 	andeq.w	r0, r3, #1
  40a6b0:	4770      	bx	lr
  40a6b2:	bf00      	nop
  40a6b4:	7fdfffff 	.word	0x7fdfffff
  40a6b8:	7ff00000 	.word	0x7ff00000

0040a6bc <matherr>:
  40a6bc:	2000      	movs	r0, #0
  40a6be:	4770      	bx	lr

0040a6c0 <nan>:
  40a6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 40a6c8 <nan+0x8>
  40a6c4:	4770      	bx	lr
  40a6c6:	bf00      	nop
  40a6c8:	00000000 	.word	0x00000000
  40a6cc:	7ff80000 	.word	0x7ff80000

0040a6d0 <scalbn>:
  40a6d0:	ec53 2b10 	vmov	r2, r3, d0
  40a6d4:	f3c3 510a 	ubfx	r1, r3, #20, #11
  40a6d8:	b570      	push	{r4, r5, r6, lr}
  40a6da:	461c      	mov	r4, r3
  40a6dc:	4605      	mov	r5, r0
  40a6de:	bb49      	cbnz	r1, 40a734 <scalbn+0x64>
  40a6e0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40a6e4:	ea54 0102 	orrs.w	r1, r4, r2
  40a6e8:	d036      	beq.n	40a758 <scalbn+0x88>
  40a6ea:	4e37      	ldr	r6, [pc, #220]	; (40a7c8 <scalbn+0xf8>)
  40a6ec:	4619      	mov	r1, r3
  40a6ee:	2200      	movs	r2, #0
  40a6f0:	4b36      	ldr	r3, [pc, #216]	; (40a7cc <scalbn+0xfc>)
  40a6f2:	ee10 0a10 	vmov	r0, s0
  40a6f6:	f000 fa35 	bl	40ab64 <__aeabi_dmul>
  40a6fa:	42b5      	cmp	r5, r6
  40a6fc:	4602      	mov	r2, r0
  40a6fe:	460b      	mov	r3, r1
  40a700:	460c      	mov	r4, r1
  40a702:	db39      	blt.n	40a778 <scalbn+0xa8>
  40a704:	f3c1 510a 	ubfx	r1, r1, #20, #11
  40a708:	f240 70fe 	movw	r0, #2046	; 0x7fe
  40a70c:	3936      	subs	r1, #54	; 0x36
  40a70e:	4429      	add	r1, r5
  40a710:	4281      	cmp	r1, r0
  40a712:	dd18      	ble.n	40a746 <scalbn+0x76>
  40a714:	ec43 2b11 	vmov	d1, r2, r3
  40a718:	ed9f 0b27 	vldr	d0, [pc, #156]	; 40a7b8 <scalbn+0xe8>
  40a71c:	f000 f85c 	bl	40a7d8 <copysign>
  40a720:	a325      	add	r3, pc, #148	; (adr r3, 40a7b8 <scalbn+0xe8>)
  40a722:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a726:	ec51 0b10 	vmov	r0, r1, d0
  40a72a:	f000 fa1b 	bl	40ab64 <__aeabi_dmul>
  40a72e:	ec41 0b10 	vmov	d0, r0, r1
  40a732:	bd70      	pop	{r4, r5, r6, pc}
  40a734:	f240 70ff 	movw	r0, #2047	; 0x7ff
  40a738:	4281      	cmp	r1, r0
  40a73a:	d025      	beq.n	40a788 <scalbn+0xb8>
  40a73c:	4429      	add	r1, r5
  40a73e:	f240 70fe 	movw	r0, #2046	; 0x7fe
  40a742:	4281      	cmp	r1, r0
  40a744:	dce6      	bgt.n	40a714 <scalbn+0x44>
  40a746:	2900      	cmp	r1, #0
  40a748:	dd07      	ble.n	40a75a <scalbn+0x8a>
  40a74a:	4821      	ldr	r0, [pc, #132]	; (40a7d0 <scalbn+0x100>)
  40a74c:	4020      	ands	r0, r4
  40a74e:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
  40a752:	ec43 2b10 	vmov	d0, r2, r3
  40a756:	bd70      	pop	{r4, r5, r6, pc}
  40a758:	bd70      	pop	{r4, r5, r6, pc}
  40a75a:	f111 0f35 	cmn.w	r1, #53	; 0x35
  40a75e:	da1b      	bge.n	40a798 <scalbn+0xc8>
  40a760:	f24c 3150 	movw	r1, #50000	; 0xc350
  40a764:	428d      	cmp	r5, r1
  40a766:	dcd5      	bgt.n	40a714 <scalbn+0x44>
  40a768:	ed9f 0b15 	vldr	d0, [pc, #84]	; 40a7c0 <scalbn+0xf0>
  40a76c:	ec43 2b11 	vmov	d1, r2, r3
  40a770:	f000 f832 	bl	40a7d8 <copysign>
  40a774:	ec51 0b10 	vmov	r0, r1, d0
  40a778:	a311      	add	r3, pc, #68	; (adr r3, 40a7c0 <scalbn+0xf0>)
  40a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a77e:	f000 f9f1 	bl	40ab64 <__aeabi_dmul>
  40a782:	ec41 0b10 	vmov	d0, r0, r1
  40a786:	bd70      	pop	{r4, r5, r6, pc}
  40a788:	ee10 0a10 	vmov	r0, s0
  40a78c:	4619      	mov	r1, r3
  40a78e:	f000 f837 	bl	40a800 <__adddf3>
  40a792:	ec41 0b10 	vmov	d0, r0, r1
  40a796:	bd70      	pop	{r4, r5, r6, pc}
  40a798:	480d      	ldr	r0, [pc, #52]	; (40a7d0 <scalbn+0x100>)
  40a79a:	3136      	adds	r1, #54	; 0x36
  40a79c:	4020      	ands	r0, r4
  40a79e:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
  40a7a2:	4610      	mov	r0, r2
  40a7a4:	2200      	movs	r2, #0
  40a7a6:	4619      	mov	r1, r3
  40a7a8:	4b0a      	ldr	r3, [pc, #40]	; (40a7d4 <scalbn+0x104>)
  40a7aa:	f000 f9db 	bl	40ab64 <__aeabi_dmul>
  40a7ae:	ec41 0b10 	vmov	d0, r0, r1
  40a7b2:	bd70      	pop	{r4, r5, r6, pc}
  40a7b4:	f3af 8000 	nop.w
  40a7b8:	8800759c 	.word	0x8800759c
  40a7bc:	7e37e43c 	.word	0x7e37e43c
  40a7c0:	c2f8f359 	.word	0xc2f8f359
  40a7c4:	01a56e1f 	.word	0x01a56e1f
  40a7c8:	ffff3cb0 	.word	0xffff3cb0
  40a7cc:	43500000 	.word	0x43500000
  40a7d0:	800fffff 	.word	0x800fffff
  40a7d4:	3c900000 	.word	0x3c900000

0040a7d8 <copysign>:
  40a7d8:	ee11 0a90 	vmov	r0, s3
  40a7dc:	ec53 2b10 	vmov	r2, r3, d0
  40a7e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40a7e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  40a7e8:	ea40 0301 	orr.w	r3, r0, r1
  40a7ec:	ec43 2b10 	vmov	d0, r2, r3
  40a7f0:	4770      	bx	lr
  40a7f2:	bf00      	nop

0040a7f4 <__aeabi_drsub>:
  40a7f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a7f8:	e002      	b.n	40a800 <__adddf3>
  40a7fa:	bf00      	nop

0040a7fc <__aeabi_dsub>:
  40a7fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a800 <__adddf3>:
  40a800:	b530      	push	{r4, r5, lr}
  40a802:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a806:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a80a:	ea94 0f05 	teq	r4, r5
  40a80e:	bf08      	it	eq
  40a810:	ea90 0f02 	teqeq	r0, r2
  40a814:	bf1f      	itttt	ne
  40a816:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a81a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a81e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a822:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a826:	f000 80e2 	beq.w	40a9ee <__adddf3+0x1ee>
  40a82a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a82e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a832:	bfb8      	it	lt
  40a834:	426d      	neglt	r5, r5
  40a836:	dd0c      	ble.n	40a852 <__adddf3+0x52>
  40a838:	442c      	add	r4, r5
  40a83a:	ea80 0202 	eor.w	r2, r0, r2
  40a83e:	ea81 0303 	eor.w	r3, r1, r3
  40a842:	ea82 0000 	eor.w	r0, r2, r0
  40a846:	ea83 0101 	eor.w	r1, r3, r1
  40a84a:	ea80 0202 	eor.w	r2, r0, r2
  40a84e:	ea81 0303 	eor.w	r3, r1, r3
  40a852:	2d36      	cmp	r5, #54	; 0x36
  40a854:	bf88      	it	hi
  40a856:	bd30      	pophi	{r4, r5, pc}
  40a858:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a85c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a860:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a864:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a868:	d002      	beq.n	40a870 <__adddf3+0x70>
  40a86a:	4240      	negs	r0, r0
  40a86c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a870:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a874:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a878:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a87c:	d002      	beq.n	40a884 <__adddf3+0x84>
  40a87e:	4252      	negs	r2, r2
  40a880:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a884:	ea94 0f05 	teq	r4, r5
  40a888:	f000 80a7 	beq.w	40a9da <__adddf3+0x1da>
  40a88c:	f1a4 0401 	sub.w	r4, r4, #1
  40a890:	f1d5 0e20 	rsbs	lr, r5, #32
  40a894:	db0d      	blt.n	40a8b2 <__adddf3+0xb2>
  40a896:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a89a:	fa22 f205 	lsr.w	r2, r2, r5
  40a89e:	1880      	adds	r0, r0, r2
  40a8a0:	f141 0100 	adc.w	r1, r1, #0
  40a8a4:	fa03 f20e 	lsl.w	r2, r3, lr
  40a8a8:	1880      	adds	r0, r0, r2
  40a8aa:	fa43 f305 	asr.w	r3, r3, r5
  40a8ae:	4159      	adcs	r1, r3
  40a8b0:	e00e      	b.n	40a8d0 <__adddf3+0xd0>
  40a8b2:	f1a5 0520 	sub.w	r5, r5, #32
  40a8b6:	f10e 0e20 	add.w	lr, lr, #32
  40a8ba:	2a01      	cmp	r2, #1
  40a8bc:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a8c0:	bf28      	it	cs
  40a8c2:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a8c6:	fa43 f305 	asr.w	r3, r3, r5
  40a8ca:	18c0      	adds	r0, r0, r3
  40a8cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a8d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a8d4:	d507      	bpl.n	40a8e6 <__adddf3+0xe6>
  40a8d6:	f04f 0e00 	mov.w	lr, #0
  40a8da:	f1dc 0c00 	rsbs	ip, ip, #0
  40a8de:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a8e2:	eb6e 0101 	sbc.w	r1, lr, r1
  40a8e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a8ea:	d31b      	bcc.n	40a924 <__adddf3+0x124>
  40a8ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a8f0:	d30c      	bcc.n	40a90c <__adddf3+0x10c>
  40a8f2:	0849      	lsrs	r1, r1, #1
  40a8f4:	ea5f 0030 	movs.w	r0, r0, rrx
  40a8f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a8fc:	f104 0401 	add.w	r4, r4, #1
  40a900:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a904:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a908:	f080 809a 	bcs.w	40aa40 <__adddf3+0x240>
  40a90c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a910:	bf08      	it	eq
  40a912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a916:	f150 0000 	adcs.w	r0, r0, #0
  40a91a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a91e:	ea41 0105 	orr.w	r1, r1, r5
  40a922:	bd30      	pop	{r4, r5, pc}
  40a924:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a928:	4140      	adcs	r0, r0
  40a92a:	eb41 0101 	adc.w	r1, r1, r1
  40a92e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a932:	f1a4 0401 	sub.w	r4, r4, #1
  40a936:	d1e9      	bne.n	40a90c <__adddf3+0x10c>
  40a938:	f091 0f00 	teq	r1, #0
  40a93c:	bf04      	itt	eq
  40a93e:	4601      	moveq	r1, r0
  40a940:	2000      	moveq	r0, #0
  40a942:	fab1 f381 	clz	r3, r1
  40a946:	bf08      	it	eq
  40a948:	3320      	addeq	r3, #32
  40a94a:	f1a3 030b 	sub.w	r3, r3, #11
  40a94e:	f1b3 0220 	subs.w	r2, r3, #32
  40a952:	da0c      	bge.n	40a96e <__adddf3+0x16e>
  40a954:	320c      	adds	r2, #12
  40a956:	dd08      	ble.n	40a96a <__adddf3+0x16a>
  40a958:	f102 0c14 	add.w	ip, r2, #20
  40a95c:	f1c2 020c 	rsb	r2, r2, #12
  40a960:	fa01 f00c 	lsl.w	r0, r1, ip
  40a964:	fa21 f102 	lsr.w	r1, r1, r2
  40a968:	e00c      	b.n	40a984 <__adddf3+0x184>
  40a96a:	f102 0214 	add.w	r2, r2, #20
  40a96e:	bfd8      	it	le
  40a970:	f1c2 0c20 	rsble	ip, r2, #32
  40a974:	fa01 f102 	lsl.w	r1, r1, r2
  40a978:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a97c:	bfdc      	itt	le
  40a97e:	ea41 010c 	orrle.w	r1, r1, ip
  40a982:	4090      	lslle	r0, r2
  40a984:	1ae4      	subs	r4, r4, r3
  40a986:	bfa2      	ittt	ge
  40a988:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a98c:	4329      	orrge	r1, r5
  40a98e:	bd30      	popge	{r4, r5, pc}
  40a990:	ea6f 0404 	mvn.w	r4, r4
  40a994:	3c1f      	subs	r4, #31
  40a996:	da1c      	bge.n	40a9d2 <__adddf3+0x1d2>
  40a998:	340c      	adds	r4, #12
  40a99a:	dc0e      	bgt.n	40a9ba <__adddf3+0x1ba>
  40a99c:	f104 0414 	add.w	r4, r4, #20
  40a9a0:	f1c4 0220 	rsb	r2, r4, #32
  40a9a4:	fa20 f004 	lsr.w	r0, r0, r4
  40a9a8:	fa01 f302 	lsl.w	r3, r1, r2
  40a9ac:	ea40 0003 	orr.w	r0, r0, r3
  40a9b0:	fa21 f304 	lsr.w	r3, r1, r4
  40a9b4:	ea45 0103 	orr.w	r1, r5, r3
  40a9b8:	bd30      	pop	{r4, r5, pc}
  40a9ba:	f1c4 040c 	rsb	r4, r4, #12
  40a9be:	f1c4 0220 	rsb	r2, r4, #32
  40a9c2:	fa20 f002 	lsr.w	r0, r0, r2
  40a9c6:	fa01 f304 	lsl.w	r3, r1, r4
  40a9ca:	ea40 0003 	orr.w	r0, r0, r3
  40a9ce:	4629      	mov	r1, r5
  40a9d0:	bd30      	pop	{r4, r5, pc}
  40a9d2:	fa21 f004 	lsr.w	r0, r1, r4
  40a9d6:	4629      	mov	r1, r5
  40a9d8:	bd30      	pop	{r4, r5, pc}
  40a9da:	f094 0f00 	teq	r4, #0
  40a9de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a9e2:	bf06      	itte	eq
  40a9e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a9e8:	3401      	addeq	r4, #1
  40a9ea:	3d01      	subne	r5, #1
  40a9ec:	e74e      	b.n	40a88c <__adddf3+0x8c>
  40a9ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a9f2:	bf18      	it	ne
  40a9f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a9f8:	d029      	beq.n	40aa4e <__adddf3+0x24e>
  40a9fa:	ea94 0f05 	teq	r4, r5
  40a9fe:	bf08      	it	eq
  40aa00:	ea90 0f02 	teqeq	r0, r2
  40aa04:	d005      	beq.n	40aa12 <__adddf3+0x212>
  40aa06:	ea54 0c00 	orrs.w	ip, r4, r0
  40aa0a:	bf04      	itt	eq
  40aa0c:	4619      	moveq	r1, r3
  40aa0e:	4610      	moveq	r0, r2
  40aa10:	bd30      	pop	{r4, r5, pc}
  40aa12:	ea91 0f03 	teq	r1, r3
  40aa16:	bf1e      	ittt	ne
  40aa18:	2100      	movne	r1, #0
  40aa1a:	2000      	movne	r0, #0
  40aa1c:	bd30      	popne	{r4, r5, pc}
  40aa1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40aa22:	d105      	bne.n	40aa30 <__adddf3+0x230>
  40aa24:	0040      	lsls	r0, r0, #1
  40aa26:	4149      	adcs	r1, r1
  40aa28:	bf28      	it	cs
  40aa2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40aa2e:	bd30      	pop	{r4, r5, pc}
  40aa30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40aa34:	bf3c      	itt	cc
  40aa36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40aa3a:	bd30      	popcc	{r4, r5, pc}
  40aa3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aa40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40aa44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40aa48:	f04f 0000 	mov.w	r0, #0
  40aa4c:	bd30      	pop	{r4, r5, pc}
  40aa4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40aa52:	bf1a      	itte	ne
  40aa54:	4619      	movne	r1, r3
  40aa56:	4610      	movne	r0, r2
  40aa58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40aa5c:	bf1c      	itt	ne
  40aa5e:	460b      	movne	r3, r1
  40aa60:	4602      	movne	r2, r0
  40aa62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40aa66:	bf06      	itte	eq
  40aa68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40aa6c:	ea91 0f03 	teqeq	r1, r3
  40aa70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40aa74:	bd30      	pop	{r4, r5, pc}
  40aa76:	bf00      	nop

0040aa78 <__aeabi_ui2d>:
  40aa78:	f090 0f00 	teq	r0, #0
  40aa7c:	bf04      	itt	eq
  40aa7e:	2100      	moveq	r1, #0
  40aa80:	4770      	bxeq	lr
  40aa82:	b530      	push	{r4, r5, lr}
  40aa84:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40aa88:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40aa8c:	f04f 0500 	mov.w	r5, #0
  40aa90:	f04f 0100 	mov.w	r1, #0
  40aa94:	e750      	b.n	40a938 <__adddf3+0x138>
  40aa96:	bf00      	nop

0040aa98 <__aeabi_i2d>:
  40aa98:	f090 0f00 	teq	r0, #0
  40aa9c:	bf04      	itt	eq
  40aa9e:	2100      	moveq	r1, #0
  40aaa0:	4770      	bxeq	lr
  40aaa2:	b530      	push	{r4, r5, lr}
  40aaa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40aaa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40aaac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40aab0:	bf48      	it	mi
  40aab2:	4240      	negmi	r0, r0
  40aab4:	f04f 0100 	mov.w	r1, #0
  40aab8:	e73e      	b.n	40a938 <__adddf3+0x138>
  40aaba:	bf00      	nop

0040aabc <__aeabi_f2d>:
  40aabc:	0042      	lsls	r2, r0, #1
  40aabe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40aac2:	ea4f 0131 	mov.w	r1, r1, rrx
  40aac6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40aaca:	bf1f      	itttt	ne
  40aacc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40aad0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40aad4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40aad8:	4770      	bxne	lr
  40aada:	f092 0f00 	teq	r2, #0
  40aade:	bf14      	ite	ne
  40aae0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40aae4:	4770      	bxeq	lr
  40aae6:	b530      	push	{r4, r5, lr}
  40aae8:	f44f 7460 	mov.w	r4, #896	; 0x380
  40aaec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40aaf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aaf4:	e720      	b.n	40a938 <__adddf3+0x138>
  40aaf6:	bf00      	nop

0040aaf8 <__aeabi_ul2d>:
  40aaf8:	ea50 0201 	orrs.w	r2, r0, r1
  40aafc:	bf08      	it	eq
  40aafe:	4770      	bxeq	lr
  40ab00:	b530      	push	{r4, r5, lr}
  40ab02:	f04f 0500 	mov.w	r5, #0
  40ab06:	e00a      	b.n	40ab1e <__aeabi_l2d+0x16>

0040ab08 <__aeabi_l2d>:
  40ab08:	ea50 0201 	orrs.w	r2, r0, r1
  40ab0c:	bf08      	it	eq
  40ab0e:	4770      	bxeq	lr
  40ab10:	b530      	push	{r4, r5, lr}
  40ab12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40ab16:	d502      	bpl.n	40ab1e <__aeabi_l2d+0x16>
  40ab18:	4240      	negs	r0, r0
  40ab1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ab1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ab22:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ab26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40ab2a:	f43f aedc 	beq.w	40a8e6 <__adddf3+0xe6>
  40ab2e:	f04f 0203 	mov.w	r2, #3
  40ab32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ab36:	bf18      	it	ne
  40ab38:	3203      	addne	r2, #3
  40ab3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ab3e:	bf18      	it	ne
  40ab40:	3203      	addne	r2, #3
  40ab42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40ab46:	f1c2 0320 	rsb	r3, r2, #32
  40ab4a:	fa00 fc03 	lsl.w	ip, r0, r3
  40ab4e:	fa20 f002 	lsr.w	r0, r0, r2
  40ab52:	fa01 fe03 	lsl.w	lr, r1, r3
  40ab56:	ea40 000e 	orr.w	r0, r0, lr
  40ab5a:	fa21 f102 	lsr.w	r1, r1, r2
  40ab5e:	4414      	add	r4, r2
  40ab60:	e6c1      	b.n	40a8e6 <__adddf3+0xe6>
  40ab62:	bf00      	nop

0040ab64 <__aeabi_dmul>:
  40ab64:	b570      	push	{r4, r5, r6, lr}
  40ab66:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab72:	bf1d      	ittte	ne
  40ab74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab78:	ea94 0f0c 	teqne	r4, ip
  40ab7c:	ea95 0f0c 	teqne	r5, ip
  40ab80:	f000 f8de 	bleq	40ad40 <__aeabi_dmul+0x1dc>
  40ab84:	442c      	add	r4, r5
  40ab86:	ea81 0603 	eor.w	r6, r1, r3
  40ab8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40ab8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40ab92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40ab96:	bf18      	it	ne
  40ab98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40ab9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40aba4:	d038      	beq.n	40ac18 <__aeabi_dmul+0xb4>
  40aba6:	fba0 ce02 	umull	ip, lr, r0, r2
  40abaa:	f04f 0500 	mov.w	r5, #0
  40abae:	fbe1 e502 	umlal	lr, r5, r1, r2
  40abb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40abb6:	fbe0 e503 	umlal	lr, r5, r0, r3
  40abba:	f04f 0600 	mov.w	r6, #0
  40abbe:	fbe1 5603 	umlal	r5, r6, r1, r3
  40abc2:	f09c 0f00 	teq	ip, #0
  40abc6:	bf18      	it	ne
  40abc8:	f04e 0e01 	orrne.w	lr, lr, #1
  40abcc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40abd0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40abd4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40abd8:	d204      	bcs.n	40abe4 <__aeabi_dmul+0x80>
  40abda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40abde:	416d      	adcs	r5, r5
  40abe0:	eb46 0606 	adc.w	r6, r6, r6
  40abe4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40abe8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40abec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40abf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40abf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40abf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40abfc:	bf88      	it	hi
  40abfe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ac02:	d81e      	bhi.n	40ac42 <__aeabi_dmul+0xde>
  40ac04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40ac08:	bf08      	it	eq
  40ac0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40ac0e:	f150 0000 	adcs.w	r0, r0, #0
  40ac12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ac16:	bd70      	pop	{r4, r5, r6, pc}
  40ac18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40ac1c:	ea46 0101 	orr.w	r1, r6, r1
  40ac20:	ea40 0002 	orr.w	r0, r0, r2
  40ac24:	ea81 0103 	eor.w	r1, r1, r3
  40ac28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40ac2c:	bfc2      	ittt	gt
  40ac2e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ac32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ac36:	bd70      	popgt	{r4, r5, r6, pc}
  40ac38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ac3c:	f04f 0e00 	mov.w	lr, #0
  40ac40:	3c01      	subs	r4, #1
  40ac42:	f300 80ab 	bgt.w	40ad9c <__aeabi_dmul+0x238>
  40ac46:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40ac4a:	bfde      	ittt	le
  40ac4c:	2000      	movle	r0, #0
  40ac4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40ac52:	bd70      	pople	{r4, r5, r6, pc}
  40ac54:	f1c4 0400 	rsb	r4, r4, #0
  40ac58:	3c20      	subs	r4, #32
  40ac5a:	da35      	bge.n	40acc8 <__aeabi_dmul+0x164>
  40ac5c:	340c      	adds	r4, #12
  40ac5e:	dc1b      	bgt.n	40ac98 <__aeabi_dmul+0x134>
  40ac60:	f104 0414 	add.w	r4, r4, #20
  40ac64:	f1c4 0520 	rsb	r5, r4, #32
  40ac68:	fa00 f305 	lsl.w	r3, r0, r5
  40ac6c:	fa20 f004 	lsr.w	r0, r0, r4
  40ac70:	fa01 f205 	lsl.w	r2, r1, r5
  40ac74:	ea40 0002 	orr.w	r0, r0, r2
  40ac78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40ac7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40ac80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40ac84:	fa21 f604 	lsr.w	r6, r1, r4
  40ac88:	eb42 0106 	adc.w	r1, r2, r6
  40ac8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40ac90:	bf08      	it	eq
  40ac92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40ac96:	bd70      	pop	{r4, r5, r6, pc}
  40ac98:	f1c4 040c 	rsb	r4, r4, #12
  40ac9c:	f1c4 0520 	rsb	r5, r4, #32
  40aca0:	fa00 f304 	lsl.w	r3, r0, r4
  40aca4:	fa20 f005 	lsr.w	r0, r0, r5
  40aca8:	fa01 f204 	lsl.w	r2, r1, r4
  40acac:	ea40 0002 	orr.w	r0, r0, r2
  40acb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40acb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40acb8:	f141 0100 	adc.w	r1, r1, #0
  40acbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40acc0:	bf08      	it	eq
  40acc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40acc6:	bd70      	pop	{r4, r5, r6, pc}
  40acc8:	f1c4 0520 	rsb	r5, r4, #32
  40accc:	fa00 f205 	lsl.w	r2, r0, r5
  40acd0:	ea4e 0e02 	orr.w	lr, lr, r2
  40acd4:	fa20 f304 	lsr.w	r3, r0, r4
  40acd8:	fa01 f205 	lsl.w	r2, r1, r5
  40acdc:	ea43 0302 	orr.w	r3, r3, r2
  40ace0:	fa21 f004 	lsr.w	r0, r1, r4
  40ace4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ace8:	fa21 f204 	lsr.w	r2, r1, r4
  40acec:	ea20 0002 	bic.w	r0, r0, r2
  40acf0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40acf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40acf8:	bf08      	it	eq
  40acfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40acfe:	bd70      	pop	{r4, r5, r6, pc}
  40ad00:	f094 0f00 	teq	r4, #0
  40ad04:	d10f      	bne.n	40ad26 <__aeabi_dmul+0x1c2>
  40ad06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40ad0a:	0040      	lsls	r0, r0, #1
  40ad0c:	eb41 0101 	adc.w	r1, r1, r1
  40ad10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ad14:	bf08      	it	eq
  40ad16:	3c01      	subeq	r4, #1
  40ad18:	d0f7      	beq.n	40ad0a <__aeabi_dmul+0x1a6>
  40ad1a:	ea41 0106 	orr.w	r1, r1, r6
  40ad1e:	f095 0f00 	teq	r5, #0
  40ad22:	bf18      	it	ne
  40ad24:	4770      	bxne	lr
  40ad26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40ad2a:	0052      	lsls	r2, r2, #1
  40ad2c:	eb43 0303 	adc.w	r3, r3, r3
  40ad30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40ad34:	bf08      	it	eq
  40ad36:	3d01      	subeq	r5, #1
  40ad38:	d0f7      	beq.n	40ad2a <__aeabi_dmul+0x1c6>
  40ad3a:	ea43 0306 	orr.w	r3, r3, r6
  40ad3e:	4770      	bx	lr
  40ad40:	ea94 0f0c 	teq	r4, ip
  40ad44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ad48:	bf18      	it	ne
  40ad4a:	ea95 0f0c 	teqne	r5, ip
  40ad4e:	d00c      	beq.n	40ad6a <__aeabi_dmul+0x206>
  40ad50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad54:	bf18      	it	ne
  40ad56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad5a:	d1d1      	bne.n	40ad00 <__aeabi_dmul+0x19c>
  40ad5c:	ea81 0103 	eor.w	r1, r1, r3
  40ad60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ad64:	f04f 0000 	mov.w	r0, #0
  40ad68:	bd70      	pop	{r4, r5, r6, pc}
  40ad6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad6e:	bf06      	itte	eq
  40ad70:	4610      	moveq	r0, r2
  40ad72:	4619      	moveq	r1, r3
  40ad74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad78:	d019      	beq.n	40adae <__aeabi_dmul+0x24a>
  40ad7a:	ea94 0f0c 	teq	r4, ip
  40ad7e:	d102      	bne.n	40ad86 <__aeabi_dmul+0x222>
  40ad80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ad84:	d113      	bne.n	40adae <__aeabi_dmul+0x24a>
  40ad86:	ea95 0f0c 	teq	r5, ip
  40ad8a:	d105      	bne.n	40ad98 <__aeabi_dmul+0x234>
  40ad8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ad90:	bf1c      	itt	ne
  40ad92:	4610      	movne	r0, r2
  40ad94:	4619      	movne	r1, r3
  40ad96:	d10a      	bne.n	40adae <__aeabi_dmul+0x24a>
  40ad98:	ea81 0103 	eor.w	r1, r1, r3
  40ad9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ada0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ada4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ada8:	f04f 0000 	mov.w	r0, #0
  40adac:	bd70      	pop	{r4, r5, r6, pc}
  40adae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40adb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40adb6:	bd70      	pop	{r4, r5, r6, pc}

0040adb8 <__aeabi_ddiv>:
  40adb8:	b570      	push	{r4, r5, r6, lr}
  40adba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40adbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40adc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40adc6:	bf1d      	ittte	ne
  40adc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40adcc:	ea94 0f0c 	teqne	r4, ip
  40add0:	ea95 0f0c 	teqne	r5, ip
  40add4:	f000 f8a7 	bleq	40af26 <__aeabi_ddiv+0x16e>
  40add8:	eba4 0405 	sub.w	r4, r4, r5
  40addc:	ea81 0e03 	eor.w	lr, r1, r3
  40ade0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ade4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ade8:	f000 8088 	beq.w	40aefc <__aeabi_ddiv+0x144>
  40adec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40adf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40adf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40adf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40adfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ae00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ae04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ae08:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ae0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ae10:	429d      	cmp	r5, r3
  40ae12:	bf08      	it	eq
  40ae14:	4296      	cmpeq	r6, r2
  40ae16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ae1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ae1e:	d202      	bcs.n	40ae26 <__aeabi_ddiv+0x6e>
  40ae20:	085b      	lsrs	r3, r3, #1
  40ae22:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae26:	1ab6      	subs	r6, r6, r2
  40ae28:	eb65 0503 	sbc.w	r5, r5, r3
  40ae2c:	085b      	lsrs	r3, r3, #1
  40ae2e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ae36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ae3a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae3e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae42:	bf22      	ittt	cs
  40ae44:	1ab6      	subcs	r6, r6, r2
  40ae46:	4675      	movcs	r5, lr
  40ae48:	ea40 000c 	orrcs.w	r0, r0, ip
  40ae4c:	085b      	lsrs	r3, r3, #1
  40ae4e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae52:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae56:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae5a:	bf22      	ittt	cs
  40ae5c:	1ab6      	subcs	r6, r6, r2
  40ae5e:	4675      	movcs	r5, lr
  40ae60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ae64:	085b      	lsrs	r3, r3, #1
  40ae66:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae6a:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae72:	bf22      	ittt	cs
  40ae74:	1ab6      	subcs	r6, r6, r2
  40ae76:	4675      	movcs	r5, lr
  40ae78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ae7c:	085b      	lsrs	r3, r3, #1
  40ae7e:	ea4f 0232 	mov.w	r2, r2, rrx
  40ae82:	ebb6 0e02 	subs.w	lr, r6, r2
  40ae86:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ae8a:	bf22      	ittt	cs
  40ae8c:	1ab6      	subcs	r6, r6, r2
  40ae8e:	4675      	movcs	r5, lr
  40ae90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ae94:	ea55 0e06 	orrs.w	lr, r5, r6
  40ae98:	d018      	beq.n	40aecc <__aeabi_ddiv+0x114>
  40ae9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ae9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40aea2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40aea6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40aeaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40aeae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40aeb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40aeb6:	d1c0      	bne.n	40ae3a <__aeabi_ddiv+0x82>
  40aeb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aebc:	d10b      	bne.n	40aed6 <__aeabi_ddiv+0x11e>
  40aebe:	ea41 0100 	orr.w	r1, r1, r0
  40aec2:	f04f 0000 	mov.w	r0, #0
  40aec6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40aeca:	e7b6      	b.n	40ae3a <__aeabi_ddiv+0x82>
  40aecc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aed0:	bf04      	itt	eq
  40aed2:	4301      	orreq	r1, r0
  40aed4:	2000      	moveq	r0, #0
  40aed6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40aeda:	bf88      	it	hi
  40aedc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40aee0:	f63f aeaf 	bhi.w	40ac42 <__aeabi_dmul+0xde>
  40aee4:	ebb5 0c03 	subs.w	ip, r5, r3
  40aee8:	bf04      	itt	eq
  40aeea:	ebb6 0c02 	subseq.w	ip, r6, r2
  40aeee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40aef2:	f150 0000 	adcs.w	r0, r0, #0
  40aef6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40aefa:	bd70      	pop	{r4, r5, r6, pc}
  40aefc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40af00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40af04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40af08:	bfc2      	ittt	gt
  40af0a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40af0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40af12:	bd70      	popgt	{r4, r5, r6, pc}
  40af14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40af18:	f04f 0e00 	mov.w	lr, #0
  40af1c:	3c01      	subs	r4, #1
  40af1e:	e690      	b.n	40ac42 <__aeabi_dmul+0xde>
  40af20:	ea45 0e06 	orr.w	lr, r5, r6
  40af24:	e68d      	b.n	40ac42 <__aeabi_dmul+0xde>
  40af26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40af2a:	ea94 0f0c 	teq	r4, ip
  40af2e:	bf08      	it	eq
  40af30:	ea95 0f0c 	teqeq	r5, ip
  40af34:	f43f af3b 	beq.w	40adae <__aeabi_dmul+0x24a>
  40af38:	ea94 0f0c 	teq	r4, ip
  40af3c:	d10a      	bne.n	40af54 <__aeabi_ddiv+0x19c>
  40af3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40af42:	f47f af34 	bne.w	40adae <__aeabi_dmul+0x24a>
  40af46:	ea95 0f0c 	teq	r5, ip
  40af4a:	f47f af25 	bne.w	40ad98 <__aeabi_dmul+0x234>
  40af4e:	4610      	mov	r0, r2
  40af50:	4619      	mov	r1, r3
  40af52:	e72c      	b.n	40adae <__aeabi_dmul+0x24a>
  40af54:	ea95 0f0c 	teq	r5, ip
  40af58:	d106      	bne.n	40af68 <__aeabi_ddiv+0x1b0>
  40af5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40af5e:	f43f aefd 	beq.w	40ad5c <__aeabi_dmul+0x1f8>
  40af62:	4610      	mov	r0, r2
  40af64:	4619      	mov	r1, r3
  40af66:	e722      	b.n	40adae <__aeabi_dmul+0x24a>
  40af68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40af6c:	bf18      	it	ne
  40af6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40af72:	f47f aec5 	bne.w	40ad00 <__aeabi_dmul+0x19c>
  40af76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40af7a:	f47f af0d 	bne.w	40ad98 <__aeabi_dmul+0x234>
  40af7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40af82:	f47f aeeb 	bne.w	40ad5c <__aeabi_dmul+0x1f8>
  40af86:	e712      	b.n	40adae <__aeabi_dmul+0x24a>

0040af88 <__gedf2>:
  40af88:	f04f 3cff 	mov.w	ip, #4294967295
  40af8c:	e006      	b.n	40af9c <__cmpdf2+0x4>
  40af8e:	bf00      	nop

0040af90 <__ledf2>:
  40af90:	f04f 0c01 	mov.w	ip, #1
  40af94:	e002      	b.n	40af9c <__cmpdf2+0x4>
  40af96:	bf00      	nop

0040af98 <__cmpdf2>:
  40af98:	f04f 0c01 	mov.w	ip, #1
  40af9c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40afa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40afa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40afa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40afac:	bf18      	it	ne
  40afae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40afb2:	d01b      	beq.n	40afec <__cmpdf2+0x54>
  40afb4:	b001      	add	sp, #4
  40afb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40afba:	bf0c      	ite	eq
  40afbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40afc0:	ea91 0f03 	teqne	r1, r3
  40afc4:	bf02      	ittt	eq
  40afc6:	ea90 0f02 	teqeq	r0, r2
  40afca:	2000      	moveq	r0, #0
  40afcc:	4770      	bxeq	lr
  40afce:	f110 0f00 	cmn.w	r0, #0
  40afd2:	ea91 0f03 	teq	r1, r3
  40afd6:	bf58      	it	pl
  40afd8:	4299      	cmppl	r1, r3
  40afda:	bf08      	it	eq
  40afdc:	4290      	cmpeq	r0, r2
  40afde:	bf2c      	ite	cs
  40afe0:	17d8      	asrcs	r0, r3, #31
  40afe2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40afe6:	f040 0001 	orr.w	r0, r0, #1
  40afea:	4770      	bx	lr
  40afec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40aff0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40aff4:	d102      	bne.n	40affc <__cmpdf2+0x64>
  40aff6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40affa:	d107      	bne.n	40b00c <__cmpdf2+0x74>
  40affc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40b000:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40b004:	d1d6      	bne.n	40afb4 <__cmpdf2+0x1c>
  40b006:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40b00a:	d0d3      	beq.n	40afb4 <__cmpdf2+0x1c>
  40b00c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40b010:	4770      	bx	lr
  40b012:	bf00      	nop

0040b014 <__aeabi_cdrcmple>:
  40b014:	4684      	mov	ip, r0
  40b016:	4610      	mov	r0, r2
  40b018:	4662      	mov	r2, ip
  40b01a:	468c      	mov	ip, r1
  40b01c:	4619      	mov	r1, r3
  40b01e:	4663      	mov	r3, ip
  40b020:	e000      	b.n	40b024 <__aeabi_cdcmpeq>
  40b022:	bf00      	nop

0040b024 <__aeabi_cdcmpeq>:
  40b024:	b501      	push	{r0, lr}
  40b026:	f7ff ffb7 	bl	40af98 <__cmpdf2>
  40b02a:	2800      	cmp	r0, #0
  40b02c:	bf48      	it	mi
  40b02e:	f110 0f00 	cmnmi.w	r0, #0
  40b032:	bd01      	pop	{r0, pc}

0040b034 <__aeabi_dcmpeq>:
  40b034:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b038:	f7ff fff4 	bl	40b024 <__aeabi_cdcmpeq>
  40b03c:	bf0c      	ite	eq
  40b03e:	2001      	moveq	r0, #1
  40b040:	2000      	movne	r0, #0
  40b042:	f85d fb08 	ldr.w	pc, [sp], #8
  40b046:	bf00      	nop

0040b048 <__aeabi_dcmplt>:
  40b048:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b04c:	f7ff ffea 	bl	40b024 <__aeabi_cdcmpeq>
  40b050:	bf34      	ite	cc
  40b052:	2001      	movcc	r0, #1
  40b054:	2000      	movcs	r0, #0
  40b056:	f85d fb08 	ldr.w	pc, [sp], #8
  40b05a:	bf00      	nop

0040b05c <__aeabi_dcmple>:
  40b05c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b060:	f7ff ffe0 	bl	40b024 <__aeabi_cdcmpeq>
  40b064:	bf94      	ite	ls
  40b066:	2001      	movls	r0, #1
  40b068:	2000      	movhi	r0, #0
  40b06a:	f85d fb08 	ldr.w	pc, [sp], #8
  40b06e:	bf00      	nop

0040b070 <__aeabi_dcmpge>:
  40b070:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b074:	f7ff ffce 	bl	40b014 <__aeabi_cdrcmple>
  40b078:	bf94      	ite	ls
  40b07a:	2001      	movls	r0, #1
  40b07c:	2000      	movhi	r0, #0
  40b07e:	f85d fb08 	ldr.w	pc, [sp], #8
  40b082:	bf00      	nop

0040b084 <__aeabi_dcmpgt>:
  40b084:	f84d ed08 	str.w	lr, [sp, #-8]!
  40b088:	f7ff ffc4 	bl	40b014 <__aeabi_cdrcmple>
  40b08c:	bf34      	ite	cc
  40b08e:	2001      	movcc	r0, #1
  40b090:	2000      	movcs	r0, #0
  40b092:	f85d fb08 	ldr.w	pc, [sp], #8
  40b096:	bf00      	nop

0040b098 <__aeabi_d2iz>:
  40b098:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b09c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40b0a0:	d215      	bcs.n	40b0ce <__aeabi_d2iz+0x36>
  40b0a2:	d511      	bpl.n	40b0c8 <__aeabi_d2iz+0x30>
  40b0a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40b0a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40b0ac:	d912      	bls.n	40b0d4 <__aeabi_d2iz+0x3c>
  40b0ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b0b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b0b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40b0ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b0be:	fa23 f002 	lsr.w	r0, r3, r2
  40b0c2:	bf18      	it	ne
  40b0c4:	4240      	negne	r0, r0
  40b0c6:	4770      	bx	lr
  40b0c8:	f04f 0000 	mov.w	r0, #0
  40b0cc:	4770      	bx	lr
  40b0ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40b0d2:	d105      	bne.n	40b0e0 <__aeabi_d2iz+0x48>
  40b0d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40b0d8:	bf08      	it	eq
  40b0da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b0de:	4770      	bx	lr
  40b0e0:	f04f 0000 	mov.w	r0, #0
  40b0e4:	4770      	bx	lr
  40b0e6:	bf00      	nop

0040b0e8 <__aeabi_d2f>:
  40b0e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40b0ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40b0f0:	bf24      	itt	cs
  40b0f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40b0f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40b0fa:	d90d      	bls.n	40b118 <__aeabi_d2f+0x30>
  40b0fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b100:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40b104:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40b108:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40b10c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40b110:	bf08      	it	eq
  40b112:	f020 0001 	biceq.w	r0, r0, #1
  40b116:	4770      	bx	lr
  40b118:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40b11c:	d121      	bne.n	40b162 <__aeabi_d2f+0x7a>
  40b11e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40b122:	bfbc      	itt	lt
  40b124:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40b128:	4770      	bxlt	lr
  40b12a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40b12e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40b132:	f1c2 0218 	rsb	r2, r2, #24
  40b136:	f1c2 0c20 	rsb	ip, r2, #32
  40b13a:	fa10 f30c 	lsls.w	r3, r0, ip
  40b13e:	fa20 f002 	lsr.w	r0, r0, r2
  40b142:	bf18      	it	ne
  40b144:	f040 0001 	orrne.w	r0, r0, #1
  40b148:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40b14c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40b150:	fa03 fc0c 	lsl.w	ip, r3, ip
  40b154:	ea40 000c 	orr.w	r0, r0, ip
  40b158:	fa23 f302 	lsr.w	r3, r3, r2
  40b15c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40b160:	e7cc      	b.n	40b0fc <__aeabi_d2f+0x14>
  40b162:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40b166:	d107      	bne.n	40b178 <__aeabi_d2f+0x90>
  40b168:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40b16c:	bf1e      	ittt	ne
  40b16e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40b172:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40b176:	4770      	bxne	lr
  40b178:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40b17c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b180:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b184:	4770      	bx	lr
  40b186:	bf00      	nop

0040b188 <__assert_func>:
  40b188:	4c0a      	ldr	r4, [pc, #40]	; (40b1b4 <__assert_func+0x2c>)
  40b18a:	4605      	mov	r5, r0
  40b18c:	6820      	ldr	r0, [r4, #0]
  40b18e:	b500      	push	{lr}
  40b190:	68c0      	ldr	r0, [r0, #12]
  40b192:	b085      	sub	sp, #20
  40b194:	b15a      	cbz	r2, 40b1ae <__assert_func+0x26>
  40b196:	4614      	mov	r4, r2
  40b198:	4a07      	ldr	r2, [pc, #28]	; (40b1b8 <__assert_func+0x30>)
  40b19a:	9402      	str	r4, [sp, #8]
  40b19c:	e88d 0006 	stmia.w	sp, {r1, r2}
  40b1a0:	461a      	mov	r2, r3
  40b1a2:	4906      	ldr	r1, [pc, #24]	; (40b1bc <__assert_func+0x34>)
  40b1a4:	462b      	mov	r3, r5
  40b1a6:	f000 f81b 	bl	40b1e0 <fiprintf>
  40b1aa:	f003 ffe5 	bl	40f178 <abort>
  40b1ae:	4a04      	ldr	r2, [pc, #16]	; (40b1c0 <__assert_func+0x38>)
  40b1b0:	4614      	mov	r4, r2
  40b1b2:	e7f2      	b.n	40b19a <__assert_func+0x12>
  40b1b4:	204004d8 	.word	0x204004d8
  40b1b8:	00413b28 	.word	0x00413b28
  40b1bc:	00413b38 	.word	0x00413b38
  40b1c0:	004132b4 	.word	0x004132b4

0040b1c4 <atoff>:
  40b1c4:	2100      	movs	r1, #0
  40b1c6:	f001 bd91 	b.w	40ccec <strtof>
  40b1ca:	bf00      	nop

0040b1cc <atoi>:
  40b1cc:	2100      	movs	r1, #0
  40b1ce:	220a      	movs	r2, #10
  40b1d0:	f001 be76 	b.w	40cec0 <strtol>

0040b1d4 <__errno>:
  40b1d4:	4b01      	ldr	r3, [pc, #4]	; (40b1dc <__errno+0x8>)
  40b1d6:	6818      	ldr	r0, [r3, #0]
  40b1d8:	4770      	bx	lr
  40b1da:	bf00      	nop
  40b1dc:	204004d8 	.word	0x204004d8

0040b1e0 <fiprintf>:
  40b1e0:	b40e      	push	{r1, r2, r3}
  40b1e2:	b510      	push	{r4, lr}
  40b1e4:	b083      	sub	sp, #12
  40b1e6:	4b07      	ldr	r3, [pc, #28]	; (40b204 <fiprintf+0x24>)
  40b1e8:	4601      	mov	r1, r0
  40b1ea:	ac05      	add	r4, sp, #20
  40b1ec:	6818      	ldr	r0, [r3, #0]
  40b1ee:	f854 2b04 	ldr.w	r2, [r4], #4
  40b1f2:	4623      	mov	r3, r4
  40b1f4:	9401      	str	r4, [sp, #4]
  40b1f6:	f003 f919 	bl	40e42c <_vfiprintf_r>
  40b1fa:	b003      	add	sp, #12
  40b1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b200:	b003      	add	sp, #12
  40b202:	4770      	bx	lr
  40b204:	204004d8 	.word	0x204004d8

0040b208 <__libc_init_array>:
  40b208:	b570      	push	{r4, r5, r6, lr}
  40b20a:	4e0f      	ldr	r6, [pc, #60]	; (40b248 <__libc_init_array+0x40>)
  40b20c:	4d0f      	ldr	r5, [pc, #60]	; (40b24c <__libc_init_array+0x44>)
  40b20e:	1b76      	subs	r6, r6, r5
  40b210:	10b6      	asrs	r6, r6, #2
  40b212:	bf18      	it	ne
  40b214:	2400      	movne	r4, #0
  40b216:	d005      	beq.n	40b224 <__libc_init_array+0x1c>
  40b218:	3401      	adds	r4, #1
  40b21a:	f855 3b04 	ldr.w	r3, [r5], #4
  40b21e:	4798      	blx	r3
  40b220:	42a6      	cmp	r6, r4
  40b222:	d1f9      	bne.n	40b218 <__libc_init_array+0x10>
  40b224:	4e0a      	ldr	r6, [pc, #40]	; (40b250 <__libc_init_array+0x48>)
  40b226:	f008 fea7 	bl	413f78 <_init>
  40b22a:	4d0a      	ldr	r5, [pc, #40]	; (40b254 <__libc_init_array+0x4c>)
  40b22c:	1b76      	subs	r6, r6, r5
  40b22e:	10b6      	asrs	r6, r6, #2
  40b230:	bf18      	it	ne
  40b232:	2400      	movne	r4, #0
  40b234:	d006      	beq.n	40b244 <__libc_init_array+0x3c>
  40b236:	3401      	adds	r4, #1
  40b238:	f855 3b04 	ldr.w	r3, [r5], #4
  40b23c:	4798      	blx	r3
  40b23e:	42a6      	cmp	r6, r4
  40b240:	d1f9      	bne.n	40b236 <__libc_init_array+0x2e>
  40b242:	bd70      	pop	{r4, r5, r6, pc}
  40b244:	bd70      	pop	{r4, r5, r6, pc}
  40b246:	bf00      	nop
  40b248:	00413f84 	.word	0x00413f84
  40b24c:	00413f84 	.word	0x00413f84
  40b250:	00413f8c 	.word	0x00413f8c
  40b254:	00413f84 	.word	0x00413f84

0040b258 <iprintf>:
  40b258:	b40f      	push	{r0, r1, r2, r3}
  40b25a:	b510      	push	{r4, lr}
  40b25c:	b082      	sub	sp, #8
  40b25e:	4b07      	ldr	r3, [pc, #28]	; (40b27c <iprintf+0x24>)
  40b260:	ac04      	add	r4, sp, #16
  40b262:	6818      	ldr	r0, [r3, #0]
  40b264:	f854 2b04 	ldr.w	r2, [r4], #4
  40b268:	6881      	ldr	r1, [r0, #8]
  40b26a:	4623      	mov	r3, r4
  40b26c:	9401      	str	r4, [sp, #4]
  40b26e:	f003 f8dd 	bl	40e42c <_vfiprintf_r>
  40b272:	b002      	add	sp, #8
  40b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40b278:	b004      	add	sp, #16
  40b27a:	4770      	bx	lr
  40b27c:	204004d8 	.word	0x204004d8

0040b280 <malloc>:
  40b280:	4b02      	ldr	r3, [pc, #8]	; (40b28c <malloc+0xc>)
  40b282:	4601      	mov	r1, r0
  40b284:	6818      	ldr	r0, [r3, #0]
  40b286:	f000 b803 	b.w	40b290 <_malloc_r>
  40b28a:	bf00      	nop
  40b28c:	204004d8 	.word	0x204004d8

0040b290 <_malloc_r>:
  40b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b294:	f101 040b 	add.w	r4, r1, #11
  40b298:	b083      	sub	sp, #12
  40b29a:	4605      	mov	r5, r0
  40b29c:	2c16      	cmp	r4, #22
  40b29e:	d927      	bls.n	40b2f0 <_malloc_r+0x60>
  40b2a0:	f034 0407 	bics.w	r4, r4, #7
  40b2a4:	d42a      	bmi.n	40b2fc <_malloc_r+0x6c>
  40b2a6:	42a1      	cmp	r1, r4
  40b2a8:	d828      	bhi.n	40b2fc <_malloc_r+0x6c>
  40b2aa:	f000 fb87 	bl	40b9bc <__malloc_lock>
  40b2ae:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40b2b2:	d22b      	bcs.n	40b30c <_malloc_r+0x7c>
  40b2b4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40b2b8:	4ec0      	ldr	r6, [pc, #768]	; (40b5bc <_malloc_r+0x32c>)
  40b2ba:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40b2be:	68d3      	ldr	r3, [r2, #12]
  40b2c0:	4293      	cmp	r3, r2
  40b2c2:	f000 8171 	beq.w	40b5a8 <_malloc_r+0x318>
  40b2c6:	685a      	ldr	r2, [r3, #4]
  40b2c8:	f103 0808 	add.w	r8, r3, #8
  40b2cc:	68d9      	ldr	r1, [r3, #12]
  40b2ce:	4628      	mov	r0, r5
  40b2d0:	f022 0203 	bic.w	r2, r2, #3
  40b2d4:	689c      	ldr	r4, [r3, #8]
  40b2d6:	4413      	add	r3, r2
  40b2d8:	60e1      	str	r1, [r4, #12]
  40b2da:	608c      	str	r4, [r1, #8]
  40b2dc:	685a      	ldr	r2, [r3, #4]
  40b2de:	f042 0201 	orr.w	r2, r2, #1
  40b2e2:	605a      	str	r2, [r3, #4]
  40b2e4:	f000 fb6c 	bl	40b9c0 <__malloc_unlock>
  40b2e8:	4640      	mov	r0, r8
  40b2ea:	b003      	add	sp, #12
  40b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2f0:	2910      	cmp	r1, #16
  40b2f2:	d803      	bhi.n	40b2fc <_malloc_r+0x6c>
  40b2f4:	f000 fb62 	bl	40b9bc <__malloc_lock>
  40b2f8:	2410      	movs	r4, #16
  40b2fa:	e7db      	b.n	40b2b4 <_malloc_r+0x24>
  40b2fc:	f04f 0800 	mov.w	r8, #0
  40b300:	230c      	movs	r3, #12
  40b302:	4640      	mov	r0, r8
  40b304:	602b      	str	r3, [r5, #0]
  40b306:	b003      	add	sp, #12
  40b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b30c:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40b310:	f000 8089 	beq.w	40b426 <_malloc_r+0x196>
  40b314:	f1bc 0f04 	cmp.w	ip, #4
  40b318:	f200 80c4 	bhi.w	40b4a4 <_malloc_r+0x214>
  40b31c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40b320:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40b324:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b328:	4ea4      	ldr	r6, [pc, #656]	; (40b5bc <_malloc_r+0x32c>)
  40b32a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40b32e:	68c3      	ldr	r3, [r0, #12]
  40b330:	4298      	cmp	r0, r3
  40b332:	d105      	bne.n	40b340 <_malloc_r+0xb0>
  40b334:	e00c      	b.n	40b350 <_malloc_r+0xc0>
  40b336:	2900      	cmp	r1, #0
  40b338:	da79      	bge.n	40b42e <_malloc_r+0x19e>
  40b33a:	68db      	ldr	r3, [r3, #12]
  40b33c:	4298      	cmp	r0, r3
  40b33e:	d007      	beq.n	40b350 <_malloc_r+0xc0>
  40b340:	685a      	ldr	r2, [r3, #4]
  40b342:	f022 0203 	bic.w	r2, r2, #3
  40b346:	1b11      	subs	r1, r2, r4
  40b348:	290f      	cmp	r1, #15
  40b34a:	ddf4      	ble.n	40b336 <_malloc_r+0xa6>
  40b34c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40b350:	f10c 0c01 	add.w	ip, ip, #1
  40b354:	4f99      	ldr	r7, [pc, #612]	; (40b5bc <_malloc_r+0x32c>)
  40b356:	6933      	ldr	r3, [r6, #16]
  40b358:	f107 0e08 	add.w	lr, r7, #8
  40b35c:	4573      	cmp	r3, lr
  40b35e:	f000 8119 	beq.w	40b594 <_malloc_r+0x304>
  40b362:	685a      	ldr	r2, [r3, #4]
  40b364:	f022 0203 	bic.w	r2, r2, #3
  40b368:	1b11      	subs	r1, r2, r4
  40b36a:	290f      	cmp	r1, #15
  40b36c:	f300 80ca 	bgt.w	40b504 <_malloc_r+0x274>
  40b370:	2900      	cmp	r1, #0
  40b372:	f8c7 e014 	str.w	lr, [r7, #20]
  40b376:	f8c7 e010 	str.w	lr, [r7, #16]
  40b37a:	da6a      	bge.n	40b452 <_malloc_r+0x1c2>
  40b37c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40b380:	f080 809f 	bcs.w	40b4c2 <_malloc_r+0x232>
  40b384:	08d2      	lsrs	r2, r2, #3
  40b386:	2001      	movs	r0, #1
  40b388:	6879      	ldr	r1, [r7, #4]
  40b38a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40b38e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40b392:	fa00 f008 	lsl.w	r0, r0, r8
  40b396:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40b39a:	4308      	orrs	r0, r1
  40b39c:	60da      	str	r2, [r3, #12]
  40b39e:	f8c3 8008 	str.w	r8, [r3, #8]
  40b3a2:	6078      	str	r0, [r7, #4]
  40b3a4:	6093      	str	r3, [r2, #8]
  40b3a6:	f8c8 300c 	str.w	r3, [r8, #12]
  40b3aa:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40b3ae:	2101      	movs	r1, #1
  40b3b0:	4099      	lsls	r1, r3
  40b3b2:	4281      	cmp	r1, r0
  40b3b4:	d85b      	bhi.n	40b46e <_malloc_r+0x1de>
  40b3b6:	4208      	tst	r0, r1
  40b3b8:	d106      	bne.n	40b3c8 <_malloc_r+0x138>
  40b3ba:	f02c 0c03 	bic.w	ip, ip, #3
  40b3be:	0049      	lsls	r1, r1, #1
  40b3c0:	f10c 0c04 	add.w	ip, ip, #4
  40b3c4:	4208      	tst	r0, r1
  40b3c6:	d0fa      	beq.n	40b3be <_malloc_r+0x12e>
  40b3c8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40b3cc:	46e1      	mov	r9, ip
  40b3ce:	4640      	mov	r0, r8
  40b3d0:	68c7      	ldr	r7, [r0, #12]
  40b3d2:	42b8      	cmp	r0, r7
  40b3d4:	d107      	bne.n	40b3e6 <_malloc_r+0x156>
  40b3d6:	e0df      	b.n	40b598 <_malloc_r+0x308>
  40b3d8:	2a00      	cmp	r2, #0
  40b3da:	f280 80f7 	bge.w	40b5cc <_malloc_r+0x33c>
  40b3de:	68ff      	ldr	r7, [r7, #12]
  40b3e0:	42b8      	cmp	r0, r7
  40b3e2:	f000 80d9 	beq.w	40b598 <_malloc_r+0x308>
  40b3e6:	687b      	ldr	r3, [r7, #4]
  40b3e8:	f023 0303 	bic.w	r3, r3, #3
  40b3ec:	1b1a      	subs	r2, r3, r4
  40b3ee:	2a0f      	cmp	r2, #15
  40b3f0:	ddf2      	ble.n	40b3d8 <_malloc_r+0x148>
  40b3f2:	46b8      	mov	r8, r7
  40b3f4:	68fb      	ldr	r3, [r7, #12]
  40b3f6:	f044 0901 	orr.w	r9, r4, #1
  40b3fa:	f042 0c01 	orr.w	ip, r2, #1
  40b3fe:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40b402:	443c      	add	r4, r7
  40b404:	f8c7 9004 	str.w	r9, [r7, #4]
  40b408:	4628      	mov	r0, r5
  40b40a:	60cb      	str	r3, [r1, #12]
  40b40c:	6099      	str	r1, [r3, #8]
  40b40e:	6174      	str	r4, [r6, #20]
  40b410:	6134      	str	r4, [r6, #16]
  40b412:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b416:	f8c4 e008 	str.w	lr, [r4, #8]
  40b41a:	f8c4 c004 	str.w	ip, [r4, #4]
  40b41e:	50a2      	str	r2, [r4, r2]
  40b420:	f000 face 	bl	40b9c0 <__malloc_unlock>
  40b424:	e760      	b.n	40b2e8 <_malloc_r+0x58>
  40b426:	207e      	movs	r0, #126	; 0x7e
  40b428:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40b42c:	e77c      	b.n	40b328 <_malloc_r+0x98>
  40b42e:	441a      	add	r2, r3
  40b430:	68dc      	ldr	r4, [r3, #12]
  40b432:	689e      	ldr	r6, [r3, #8]
  40b434:	f103 0808 	add.w	r8, r3, #8
  40b438:	6851      	ldr	r1, [r2, #4]
  40b43a:	4628      	mov	r0, r5
  40b43c:	60f4      	str	r4, [r6, #12]
  40b43e:	f041 0301 	orr.w	r3, r1, #1
  40b442:	60a6      	str	r6, [r4, #8]
  40b444:	6053      	str	r3, [r2, #4]
  40b446:	f000 fabb 	bl	40b9c0 <__malloc_unlock>
  40b44a:	4640      	mov	r0, r8
  40b44c:	b003      	add	sp, #12
  40b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b452:	441a      	add	r2, r3
  40b454:	f103 0808 	add.w	r8, r3, #8
  40b458:	4628      	mov	r0, r5
  40b45a:	6853      	ldr	r3, [r2, #4]
  40b45c:	f043 0301 	orr.w	r3, r3, #1
  40b460:	6053      	str	r3, [r2, #4]
  40b462:	f000 faad 	bl	40b9c0 <__malloc_unlock>
  40b466:	4640      	mov	r0, r8
  40b468:	b003      	add	sp, #12
  40b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b46e:	68b7      	ldr	r7, [r6, #8]
  40b470:	687a      	ldr	r2, [r7, #4]
  40b472:	f022 0803 	bic.w	r8, r2, #3
  40b476:	ebc4 0208 	rsb	r2, r4, r8
  40b47a:	2a0f      	cmp	r2, #15
  40b47c:	dd56      	ble.n	40b52c <_malloc_r+0x29c>
  40b47e:	45a0      	cmp	r8, r4
  40b480:	d354      	bcc.n	40b52c <_malloc_r+0x29c>
  40b482:	f044 0301 	orr.w	r3, r4, #1
  40b486:	f042 0201 	orr.w	r2, r2, #1
  40b48a:	443c      	add	r4, r7
  40b48c:	f107 0808 	add.w	r8, r7, #8
  40b490:	607b      	str	r3, [r7, #4]
  40b492:	4628      	mov	r0, r5
  40b494:	60b4      	str	r4, [r6, #8]
  40b496:	6062      	str	r2, [r4, #4]
  40b498:	f000 fa92 	bl	40b9c0 <__malloc_unlock>
  40b49c:	4640      	mov	r0, r8
  40b49e:	b003      	add	sp, #12
  40b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4a4:	f1bc 0f14 	cmp.w	ip, #20
  40b4a8:	f240 809f 	bls.w	40b5ea <_malloc_r+0x35a>
  40b4ac:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40b4b0:	f200 8127 	bhi.w	40b702 <_malloc_r+0x472>
  40b4b4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40b4b8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40b4bc:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b4c0:	e732      	b.n	40b328 <_malloc_r+0x98>
  40b4c2:	0a51      	lsrs	r1, r2, #9
  40b4c4:	2904      	cmp	r1, #4
  40b4c6:	f240 8095 	bls.w	40b5f4 <_malloc_r+0x364>
  40b4ca:	2914      	cmp	r1, #20
  40b4cc:	f200 8142 	bhi.w	40b754 <_malloc_r+0x4c4>
  40b4d0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40b4d4:	0078      	lsls	r0, r7, #1
  40b4d6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40b4da:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40b5bc <_malloc_r+0x32c>
  40b4de:	6881      	ldr	r1, [r0, #8]
  40b4e0:	4281      	cmp	r1, r0
  40b4e2:	f000 811b 	beq.w	40b71c <_malloc_r+0x48c>
  40b4e6:	684f      	ldr	r7, [r1, #4]
  40b4e8:	f027 0703 	bic.w	r7, r7, #3
  40b4ec:	42ba      	cmp	r2, r7
  40b4ee:	d202      	bcs.n	40b4f6 <_malloc_r+0x266>
  40b4f0:	6889      	ldr	r1, [r1, #8]
  40b4f2:	4288      	cmp	r0, r1
  40b4f4:	d1f7      	bne.n	40b4e6 <_malloc_r+0x256>
  40b4f6:	68ca      	ldr	r2, [r1, #12]
  40b4f8:	6870      	ldr	r0, [r6, #4]
  40b4fa:	60da      	str	r2, [r3, #12]
  40b4fc:	6099      	str	r1, [r3, #8]
  40b4fe:	6093      	str	r3, [r2, #8]
  40b500:	60cb      	str	r3, [r1, #12]
  40b502:	e752      	b.n	40b3aa <_malloc_r+0x11a>
  40b504:	f044 0601 	orr.w	r6, r4, #1
  40b508:	f041 0201 	orr.w	r2, r1, #1
  40b50c:	441c      	add	r4, r3
  40b50e:	4628      	mov	r0, r5
  40b510:	605e      	str	r6, [r3, #4]
  40b512:	f103 0808 	add.w	r8, r3, #8
  40b516:	617c      	str	r4, [r7, #20]
  40b518:	613c      	str	r4, [r7, #16]
  40b51a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b51e:	f8c4 e008 	str.w	lr, [r4, #8]
  40b522:	6062      	str	r2, [r4, #4]
  40b524:	5061      	str	r1, [r4, r1]
  40b526:	f000 fa4b 	bl	40b9c0 <__malloc_unlock>
  40b52a:	e6dd      	b.n	40b2e8 <_malloc_r+0x58>
  40b52c:	4a24      	ldr	r2, [pc, #144]	; (40b5c0 <_malloc_r+0x330>)
  40b52e:	4b25      	ldr	r3, [pc, #148]	; (40b5c4 <_malloc_r+0x334>)
  40b530:	6811      	ldr	r1, [r2, #0]
  40b532:	681b      	ldr	r3, [r3, #0]
  40b534:	3101      	adds	r1, #1
  40b536:	4423      	add	r3, r4
  40b538:	f000 8109 	beq.w	40b74e <_malloc_r+0x4be>
  40b53c:	f241 010f 	movw	r1, #4111	; 0x100f
  40b540:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40b5c8 <_malloc_r+0x338>
  40b544:	4419      	add	r1, r3
  40b546:	ea01 0909 	and.w	r9, r1, r9
  40b54a:	4628      	mov	r0, r5
  40b54c:	4649      	mov	r1, r9
  40b54e:	9201      	str	r2, [sp, #4]
  40b550:	f000 fa38 	bl	40b9c4 <_sbrk_r>
  40b554:	f1b0 3fff 	cmp.w	r0, #4294967295
  40b558:	4682      	mov	sl, r0
  40b55a:	9a01      	ldr	r2, [sp, #4]
  40b55c:	f000 8101 	beq.w	40b762 <_malloc_r+0x4d2>
  40b560:	1bbb      	subs	r3, r7, r6
  40b562:	eb07 0108 	add.w	r1, r7, r8
  40b566:	4815      	ldr	r0, [pc, #84]	; (40b5bc <_malloc_r+0x32c>)
  40b568:	bf18      	it	ne
  40b56a:	2301      	movne	r3, #1
  40b56c:	4551      	cmp	r1, sl
  40b56e:	d967      	bls.n	40b640 <_malloc_r+0x3b0>
  40b570:	2b00      	cmp	r3, #0
  40b572:	d065      	beq.n	40b640 <_malloc_r+0x3b0>
  40b574:	6887      	ldr	r7, [r0, #8]
  40b576:	687b      	ldr	r3, [r7, #4]
  40b578:	f023 0303 	bic.w	r3, r3, #3
  40b57c:	1b1a      	subs	r2, r3, r4
  40b57e:	2a0f      	cmp	r2, #15
  40b580:	dd02      	ble.n	40b588 <_malloc_r+0x2f8>
  40b582:	429c      	cmp	r4, r3
  40b584:	f67f af7d 	bls.w	40b482 <_malloc_r+0x1f2>
  40b588:	4628      	mov	r0, r5
  40b58a:	f04f 0800 	mov.w	r8, #0
  40b58e:	f000 fa17 	bl	40b9c0 <__malloc_unlock>
  40b592:	e6a9      	b.n	40b2e8 <_malloc_r+0x58>
  40b594:	6878      	ldr	r0, [r7, #4]
  40b596:	e708      	b.n	40b3aa <_malloc_r+0x11a>
  40b598:	f109 0901 	add.w	r9, r9, #1
  40b59c:	3008      	adds	r0, #8
  40b59e:	f019 0f03 	tst.w	r9, #3
  40b5a2:	f47f af15 	bne.w	40b3d0 <_malloc_r+0x140>
  40b5a6:	e02f      	b.n	40b608 <_malloc_r+0x378>
  40b5a8:	f103 0208 	add.w	r2, r3, #8
  40b5ac:	695b      	ldr	r3, [r3, #20]
  40b5ae:	429a      	cmp	r2, r3
  40b5b0:	bf08      	it	eq
  40b5b2:	f10c 0c02 	addeq.w	ip, ip, #2
  40b5b6:	f43f aecd 	beq.w	40b354 <_malloc_r+0xc4>
  40b5ba:	e684      	b.n	40b2c6 <_malloc_r+0x36>
  40b5bc:	204004dc 	.word	0x204004dc
  40b5c0:	204008e8 	.word	0x204008e8
  40b5c4:	2040c4ec 	.word	0x2040c4ec
  40b5c8:	fffff000 	.word	0xfffff000
  40b5cc:	18fa      	adds	r2, r7, r3
  40b5ce:	46b8      	mov	r8, r7
  40b5d0:	68f9      	ldr	r1, [r7, #12]
  40b5d2:	4628      	mov	r0, r5
  40b5d4:	6853      	ldr	r3, [r2, #4]
  40b5d6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40b5da:	f043 0301 	orr.w	r3, r3, #1
  40b5de:	6053      	str	r3, [r2, #4]
  40b5e0:	60e1      	str	r1, [r4, #12]
  40b5e2:	608c      	str	r4, [r1, #8]
  40b5e4:	f000 f9ec 	bl	40b9c0 <__malloc_unlock>
  40b5e8:	e67e      	b.n	40b2e8 <_malloc_r+0x58>
  40b5ea:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40b5ee:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b5f2:	e699      	b.n	40b328 <_malloc_r+0x98>
  40b5f4:	0991      	lsrs	r1, r2, #6
  40b5f6:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40b5fa:	0078      	lsls	r0, r7, #1
  40b5fc:	e76b      	b.n	40b4d6 <_malloc_r+0x246>
  40b5fe:	f8d8 8000 	ldr.w	r8, [r8]
  40b602:	4598      	cmp	r8, r3
  40b604:	f040 80e6 	bne.w	40b7d4 <_malloc_r+0x544>
  40b608:	f01c 0f03 	tst.w	ip, #3
  40b60c:	f1a8 0308 	sub.w	r3, r8, #8
  40b610:	f10c 3cff 	add.w	ip, ip, #4294967295
  40b614:	d1f3      	bne.n	40b5fe <_malloc_r+0x36e>
  40b616:	6873      	ldr	r3, [r6, #4]
  40b618:	ea23 0301 	bic.w	r3, r3, r1
  40b61c:	6073      	str	r3, [r6, #4]
  40b61e:	0049      	lsls	r1, r1, #1
  40b620:	4299      	cmp	r1, r3
  40b622:	f63f af24 	bhi.w	40b46e <_malloc_r+0x1de>
  40b626:	2900      	cmp	r1, #0
  40b628:	f43f af21 	beq.w	40b46e <_malloc_r+0x1de>
  40b62c:	420b      	tst	r3, r1
  40b62e:	46cc      	mov	ip, r9
  40b630:	f47f aeca 	bne.w	40b3c8 <_malloc_r+0x138>
  40b634:	0049      	lsls	r1, r1, #1
  40b636:	f10c 0c04 	add.w	ip, ip, #4
  40b63a:	420b      	tst	r3, r1
  40b63c:	d0fa      	beq.n	40b634 <_malloc_r+0x3a4>
  40b63e:	e6c3      	b.n	40b3c8 <_malloc_r+0x138>
  40b640:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40b7e0 <_malloc_r+0x550>
  40b644:	4551      	cmp	r1, sl
  40b646:	f8db 0000 	ldr.w	r0, [fp]
  40b64a:	4448      	add	r0, r9
  40b64c:	f8cb 0000 	str.w	r0, [fp]
  40b650:	f000 808c 	beq.w	40b76c <_malloc_r+0x4dc>
  40b654:	6812      	ldr	r2, [r2, #0]
  40b656:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40b7e4 <_malloc_r+0x554>
  40b65a:	3201      	adds	r2, #1
  40b65c:	f000 80a3 	beq.w	40b7a6 <_malloc_r+0x516>
  40b660:	ebc1 010a 	rsb	r1, r1, sl
  40b664:	4408      	add	r0, r1
  40b666:	f8cb 0000 	str.w	r0, [fp]
  40b66a:	f01a 0107 	ands.w	r1, sl, #7
  40b66e:	d052      	beq.n	40b716 <_malloc_r+0x486>
  40b670:	f1c1 0008 	rsb	r0, r1, #8
  40b674:	f241 0208 	movw	r2, #4104	; 0x1008
  40b678:	4482      	add	sl, r0
  40b67a:	1a52      	subs	r2, r2, r1
  40b67c:	eb0a 0109 	add.w	r1, sl, r9
  40b680:	4628      	mov	r0, r5
  40b682:	9301      	str	r3, [sp, #4]
  40b684:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40b688:	ebc1 0902 	rsb	r9, r1, r2
  40b68c:	4649      	mov	r1, r9
  40b68e:	f000 f999 	bl	40b9c4 <_sbrk_r>
  40b692:	1c43      	adds	r3, r0, #1
  40b694:	9b01      	ldr	r3, [sp, #4]
  40b696:	d07a      	beq.n	40b78e <_malloc_r+0x4fe>
  40b698:	ebca 0200 	rsb	r2, sl, r0
  40b69c:	444a      	add	r2, r9
  40b69e:	f042 0201 	orr.w	r2, r2, #1
  40b6a2:	f8db 0000 	ldr.w	r0, [fp]
  40b6a6:	f8c6 a008 	str.w	sl, [r6, #8]
  40b6aa:	4448      	add	r0, r9
  40b6ac:	f8ca 2004 	str.w	r2, [sl, #4]
  40b6b0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40b7e0 <_malloc_r+0x550>
  40b6b4:	f8cb 0000 	str.w	r0, [fp]
  40b6b8:	b1a3      	cbz	r3, 40b6e4 <_malloc_r+0x454>
  40b6ba:	f1b8 0f0f 	cmp.w	r8, #15
  40b6be:	d937      	bls.n	40b730 <_malloc_r+0x4a0>
  40b6c0:	687b      	ldr	r3, [r7, #4]
  40b6c2:	f1a8 020c 	sub.w	r2, r8, #12
  40b6c6:	f04f 0e05 	mov.w	lr, #5
  40b6ca:	f022 0207 	bic.w	r2, r2, #7
  40b6ce:	f003 0301 	and.w	r3, r3, #1
  40b6d2:	18b9      	adds	r1, r7, r2
  40b6d4:	4313      	orrs	r3, r2
  40b6d6:	2a0f      	cmp	r2, #15
  40b6d8:	607b      	str	r3, [r7, #4]
  40b6da:	f8c1 e004 	str.w	lr, [r1, #4]
  40b6de:	f8c1 e008 	str.w	lr, [r1, #8]
  40b6e2:	d858      	bhi.n	40b796 <_malloc_r+0x506>
  40b6e4:	4b3c      	ldr	r3, [pc, #240]	; (40b7d8 <_malloc_r+0x548>)
  40b6e6:	681a      	ldr	r2, [r3, #0]
  40b6e8:	4290      	cmp	r0, r2
  40b6ea:	d900      	bls.n	40b6ee <_malloc_r+0x45e>
  40b6ec:	6018      	str	r0, [r3, #0]
  40b6ee:	4b3b      	ldr	r3, [pc, #236]	; (40b7dc <_malloc_r+0x54c>)
  40b6f0:	68b7      	ldr	r7, [r6, #8]
  40b6f2:	681a      	ldr	r2, [r3, #0]
  40b6f4:	4290      	cmp	r0, r2
  40b6f6:	d900      	bls.n	40b6fa <_malloc_r+0x46a>
  40b6f8:	6018      	str	r0, [r3, #0]
  40b6fa:	687b      	ldr	r3, [r7, #4]
  40b6fc:	f023 0303 	bic.w	r3, r3, #3
  40b700:	e73c      	b.n	40b57c <_malloc_r+0x2ec>
  40b702:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40b706:	d817      	bhi.n	40b738 <_malloc_r+0x4a8>
  40b708:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40b70c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40b710:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b714:	e608      	b.n	40b328 <_malloc_r+0x98>
  40b716:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b71a:	e7af      	b.n	40b67c <_malloc_r+0x3ec>
  40b71c:	10bf      	asrs	r7, r7, #2
  40b71e:	2001      	movs	r0, #1
  40b720:	460a      	mov	r2, r1
  40b722:	40b8      	lsls	r0, r7
  40b724:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40b728:	4338      	orrs	r0, r7
  40b72a:	f8c9 0004 	str.w	r0, [r9, #4]
  40b72e:	e6e4      	b.n	40b4fa <_malloc_r+0x26a>
  40b730:	2301      	movs	r3, #1
  40b732:	f8ca 3004 	str.w	r3, [sl, #4]
  40b736:	e727      	b.n	40b588 <_malloc_r+0x2f8>
  40b738:	f240 5354 	movw	r3, #1364	; 0x554
  40b73c:	459c      	cmp	ip, r3
  40b73e:	d822      	bhi.n	40b786 <_malloc_r+0x4f6>
  40b740:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40b744:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40b748:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b74c:	e5ec      	b.n	40b328 <_malloc_r+0x98>
  40b74e:	f103 0910 	add.w	r9, r3, #16
  40b752:	e6fa      	b.n	40b54a <_malloc_r+0x2ba>
  40b754:	2954      	cmp	r1, #84	; 0x54
  40b756:	d829      	bhi.n	40b7ac <_malloc_r+0x51c>
  40b758:	0b11      	lsrs	r1, r2, #12
  40b75a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40b75e:	0078      	lsls	r0, r7, #1
  40b760:	e6b9      	b.n	40b4d6 <_malloc_r+0x246>
  40b762:	68b7      	ldr	r7, [r6, #8]
  40b764:	687b      	ldr	r3, [r7, #4]
  40b766:	f023 0303 	bic.w	r3, r3, #3
  40b76a:	e707      	b.n	40b57c <_malloc_r+0x2ec>
  40b76c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40b770:	f1be 0f00 	cmp.w	lr, #0
  40b774:	f47f af6e 	bne.w	40b654 <_malloc_r+0x3c4>
  40b778:	eb09 0308 	add.w	r3, r9, r8
  40b77c:	68b2      	ldr	r2, [r6, #8]
  40b77e:	f043 0301 	orr.w	r3, r3, #1
  40b782:	6053      	str	r3, [r2, #4]
  40b784:	e7ae      	b.n	40b6e4 <_malloc_r+0x454>
  40b786:	20fc      	movs	r0, #252	; 0xfc
  40b788:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40b78c:	e5cc      	b.n	40b328 <_malloc_r+0x98>
  40b78e:	2201      	movs	r2, #1
  40b790:	f04f 0900 	mov.w	r9, #0
  40b794:	e785      	b.n	40b6a2 <_malloc_r+0x412>
  40b796:	4628      	mov	r0, r5
  40b798:	f107 0108 	add.w	r1, r7, #8
  40b79c:	f004 ff16 	bl	4105cc <_free_r>
  40b7a0:	f8d9 0000 	ldr.w	r0, [r9]
  40b7a4:	e79e      	b.n	40b6e4 <_malloc_r+0x454>
  40b7a6:	f8ce a000 	str.w	sl, [lr]
  40b7aa:	e75e      	b.n	40b66a <_malloc_r+0x3da>
  40b7ac:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40b7b0:	d804      	bhi.n	40b7bc <_malloc_r+0x52c>
  40b7b2:	0bd1      	lsrs	r1, r2, #15
  40b7b4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40b7b8:	0078      	lsls	r0, r7, #1
  40b7ba:	e68c      	b.n	40b4d6 <_malloc_r+0x246>
  40b7bc:	f240 5054 	movw	r0, #1364	; 0x554
  40b7c0:	4281      	cmp	r1, r0
  40b7c2:	d804      	bhi.n	40b7ce <_malloc_r+0x53e>
  40b7c4:	0c91      	lsrs	r1, r2, #18
  40b7c6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40b7ca:	0078      	lsls	r0, r7, #1
  40b7cc:	e683      	b.n	40b4d6 <_malloc_r+0x246>
  40b7ce:	20fc      	movs	r0, #252	; 0xfc
  40b7d0:	277e      	movs	r7, #126	; 0x7e
  40b7d2:	e680      	b.n	40b4d6 <_malloc_r+0x246>
  40b7d4:	6873      	ldr	r3, [r6, #4]
  40b7d6:	e722      	b.n	40b61e <_malloc_r+0x38e>
  40b7d8:	2040c4e8 	.word	0x2040c4e8
  40b7dc:	2040c4e4 	.word	0x2040c4e4
  40b7e0:	2040c4f0 	.word	0x2040c4f0
  40b7e4:	204008e8 	.word	0x204008e8

0040b7e8 <memcpy>:
  40b7e8:	4684      	mov	ip, r0
  40b7ea:	ea41 0300 	orr.w	r3, r1, r0
  40b7ee:	f013 0303 	ands.w	r3, r3, #3
  40b7f2:	d16d      	bne.n	40b8d0 <memcpy+0xe8>
  40b7f4:	3a40      	subs	r2, #64	; 0x40
  40b7f6:	d341      	bcc.n	40b87c <memcpy+0x94>
  40b7f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b7fc:	f840 3b04 	str.w	r3, [r0], #4
  40b800:	f851 3b04 	ldr.w	r3, [r1], #4
  40b804:	f840 3b04 	str.w	r3, [r0], #4
  40b808:	f851 3b04 	ldr.w	r3, [r1], #4
  40b80c:	f840 3b04 	str.w	r3, [r0], #4
  40b810:	f851 3b04 	ldr.w	r3, [r1], #4
  40b814:	f840 3b04 	str.w	r3, [r0], #4
  40b818:	f851 3b04 	ldr.w	r3, [r1], #4
  40b81c:	f840 3b04 	str.w	r3, [r0], #4
  40b820:	f851 3b04 	ldr.w	r3, [r1], #4
  40b824:	f840 3b04 	str.w	r3, [r0], #4
  40b828:	f851 3b04 	ldr.w	r3, [r1], #4
  40b82c:	f840 3b04 	str.w	r3, [r0], #4
  40b830:	f851 3b04 	ldr.w	r3, [r1], #4
  40b834:	f840 3b04 	str.w	r3, [r0], #4
  40b838:	f851 3b04 	ldr.w	r3, [r1], #4
  40b83c:	f840 3b04 	str.w	r3, [r0], #4
  40b840:	f851 3b04 	ldr.w	r3, [r1], #4
  40b844:	f840 3b04 	str.w	r3, [r0], #4
  40b848:	f851 3b04 	ldr.w	r3, [r1], #4
  40b84c:	f840 3b04 	str.w	r3, [r0], #4
  40b850:	f851 3b04 	ldr.w	r3, [r1], #4
  40b854:	f840 3b04 	str.w	r3, [r0], #4
  40b858:	f851 3b04 	ldr.w	r3, [r1], #4
  40b85c:	f840 3b04 	str.w	r3, [r0], #4
  40b860:	f851 3b04 	ldr.w	r3, [r1], #4
  40b864:	f840 3b04 	str.w	r3, [r0], #4
  40b868:	f851 3b04 	ldr.w	r3, [r1], #4
  40b86c:	f840 3b04 	str.w	r3, [r0], #4
  40b870:	f851 3b04 	ldr.w	r3, [r1], #4
  40b874:	f840 3b04 	str.w	r3, [r0], #4
  40b878:	3a40      	subs	r2, #64	; 0x40
  40b87a:	d2bd      	bcs.n	40b7f8 <memcpy+0x10>
  40b87c:	3230      	adds	r2, #48	; 0x30
  40b87e:	d311      	bcc.n	40b8a4 <memcpy+0xbc>
  40b880:	f851 3b04 	ldr.w	r3, [r1], #4
  40b884:	f840 3b04 	str.w	r3, [r0], #4
  40b888:	f851 3b04 	ldr.w	r3, [r1], #4
  40b88c:	f840 3b04 	str.w	r3, [r0], #4
  40b890:	f851 3b04 	ldr.w	r3, [r1], #4
  40b894:	f840 3b04 	str.w	r3, [r0], #4
  40b898:	f851 3b04 	ldr.w	r3, [r1], #4
  40b89c:	f840 3b04 	str.w	r3, [r0], #4
  40b8a0:	3a10      	subs	r2, #16
  40b8a2:	d2ed      	bcs.n	40b880 <memcpy+0x98>
  40b8a4:	320c      	adds	r2, #12
  40b8a6:	d305      	bcc.n	40b8b4 <memcpy+0xcc>
  40b8a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b8ac:	f840 3b04 	str.w	r3, [r0], #4
  40b8b0:	3a04      	subs	r2, #4
  40b8b2:	d2f9      	bcs.n	40b8a8 <memcpy+0xc0>
  40b8b4:	3204      	adds	r2, #4
  40b8b6:	d008      	beq.n	40b8ca <memcpy+0xe2>
  40b8b8:	07d2      	lsls	r2, r2, #31
  40b8ba:	bf1c      	itt	ne
  40b8bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b8c0:	f800 3b01 	strbne.w	r3, [r0], #1
  40b8c4:	d301      	bcc.n	40b8ca <memcpy+0xe2>
  40b8c6:	880b      	ldrh	r3, [r1, #0]
  40b8c8:	8003      	strh	r3, [r0, #0]
  40b8ca:	4660      	mov	r0, ip
  40b8cc:	4770      	bx	lr
  40b8ce:	bf00      	nop
  40b8d0:	2a08      	cmp	r2, #8
  40b8d2:	d313      	bcc.n	40b8fc <memcpy+0x114>
  40b8d4:	078b      	lsls	r3, r1, #30
  40b8d6:	d08d      	beq.n	40b7f4 <memcpy+0xc>
  40b8d8:	f010 0303 	ands.w	r3, r0, #3
  40b8dc:	d08a      	beq.n	40b7f4 <memcpy+0xc>
  40b8de:	f1c3 0304 	rsb	r3, r3, #4
  40b8e2:	1ad2      	subs	r2, r2, r3
  40b8e4:	07db      	lsls	r3, r3, #31
  40b8e6:	bf1c      	itt	ne
  40b8e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b8ec:	f800 3b01 	strbne.w	r3, [r0], #1
  40b8f0:	d380      	bcc.n	40b7f4 <memcpy+0xc>
  40b8f2:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b8f6:	f820 3b02 	strh.w	r3, [r0], #2
  40b8fa:	e77b      	b.n	40b7f4 <memcpy+0xc>
  40b8fc:	3a04      	subs	r2, #4
  40b8fe:	d3d9      	bcc.n	40b8b4 <memcpy+0xcc>
  40b900:	3a01      	subs	r2, #1
  40b902:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b906:	f800 3b01 	strb.w	r3, [r0], #1
  40b90a:	d2f9      	bcs.n	40b900 <memcpy+0x118>
  40b90c:	780b      	ldrb	r3, [r1, #0]
  40b90e:	7003      	strb	r3, [r0, #0]
  40b910:	784b      	ldrb	r3, [r1, #1]
  40b912:	7043      	strb	r3, [r0, #1]
  40b914:	788b      	ldrb	r3, [r1, #2]
  40b916:	7083      	strb	r3, [r0, #2]
  40b918:	4660      	mov	r0, ip
  40b91a:	4770      	bx	lr

0040b91c <memset>:
  40b91c:	0783      	lsls	r3, r0, #30
  40b91e:	b470      	push	{r4, r5, r6}
  40b920:	d049      	beq.n	40b9b6 <memset+0x9a>
  40b922:	1e54      	subs	r4, r2, #1
  40b924:	2a00      	cmp	r2, #0
  40b926:	d044      	beq.n	40b9b2 <memset+0x96>
  40b928:	b2cd      	uxtb	r5, r1
  40b92a:	4603      	mov	r3, r0
  40b92c:	e002      	b.n	40b934 <memset+0x18>
  40b92e:	2c00      	cmp	r4, #0
  40b930:	d03f      	beq.n	40b9b2 <memset+0x96>
  40b932:	4614      	mov	r4, r2
  40b934:	f803 5b01 	strb.w	r5, [r3], #1
  40b938:	f013 0f03 	tst.w	r3, #3
  40b93c:	f104 32ff 	add.w	r2, r4, #4294967295
  40b940:	d1f5      	bne.n	40b92e <memset+0x12>
  40b942:	2c03      	cmp	r4, #3
  40b944:	d92e      	bls.n	40b9a4 <memset+0x88>
  40b946:	b2cd      	uxtb	r5, r1
  40b948:	2c0f      	cmp	r4, #15
  40b94a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b94e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b952:	d919      	bls.n	40b988 <memset+0x6c>
  40b954:	f103 0210 	add.w	r2, r3, #16
  40b958:	4626      	mov	r6, r4
  40b95a:	3e10      	subs	r6, #16
  40b95c:	f842 5c10 	str.w	r5, [r2, #-16]
  40b960:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b964:	3210      	adds	r2, #16
  40b966:	2e0f      	cmp	r6, #15
  40b968:	f842 5c18 	str.w	r5, [r2, #-24]
  40b96c:	f842 5c14 	str.w	r5, [r2, #-20]
  40b970:	d8f3      	bhi.n	40b95a <memset+0x3e>
  40b972:	f1a4 0210 	sub.w	r2, r4, #16
  40b976:	f004 040f 	and.w	r4, r4, #15
  40b97a:	f022 020f 	bic.w	r2, r2, #15
  40b97e:	2c03      	cmp	r4, #3
  40b980:	f102 0210 	add.w	r2, r2, #16
  40b984:	4413      	add	r3, r2
  40b986:	d90d      	bls.n	40b9a4 <memset+0x88>
  40b988:	461e      	mov	r6, r3
  40b98a:	4622      	mov	r2, r4
  40b98c:	3a04      	subs	r2, #4
  40b98e:	f846 5b04 	str.w	r5, [r6], #4
  40b992:	2a03      	cmp	r2, #3
  40b994:	d8fa      	bhi.n	40b98c <memset+0x70>
  40b996:	1f22      	subs	r2, r4, #4
  40b998:	f004 0403 	and.w	r4, r4, #3
  40b99c:	f022 0203 	bic.w	r2, r2, #3
  40b9a0:	3204      	adds	r2, #4
  40b9a2:	4413      	add	r3, r2
  40b9a4:	b12c      	cbz	r4, 40b9b2 <memset+0x96>
  40b9a6:	b2c9      	uxtb	r1, r1
  40b9a8:	441c      	add	r4, r3
  40b9aa:	f803 1b01 	strb.w	r1, [r3], #1
  40b9ae:	42a3      	cmp	r3, r4
  40b9b0:	d1fb      	bne.n	40b9aa <memset+0x8e>
  40b9b2:	bc70      	pop	{r4, r5, r6}
  40b9b4:	4770      	bx	lr
  40b9b6:	4614      	mov	r4, r2
  40b9b8:	4603      	mov	r3, r0
  40b9ba:	e7c2      	b.n	40b942 <memset+0x26>

0040b9bc <__malloc_lock>:
  40b9bc:	4770      	bx	lr
  40b9be:	bf00      	nop

0040b9c0 <__malloc_unlock>:
  40b9c0:	4770      	bx	lr
  40b9c2:	bf00      	nop

0040b9c4 <_sbrk_r>:
  40b9c4:	b538      	push	{r3, r4, r5, lr}
  40b9c6:	2300      	movs	r3, #0
  40b9c8:	4c06      	ldr	r4, [pc, #24]	; (40b9e4 <_sbrk_r+0x20>)
  40b9ca:	4605      	mov	r5, r0
  40b9cc:	4608      	mov	r0, r1
  40b9ce:	6023      	str	r3, [r4, #0]
  40b9d0:	f7f7 fe90 	bl	4036f4 <_sbrk>
  40b9d4:	1c43      	adds	r3, r0, #1
  40b9d6:	d000      	beq.n	40b9da <_sbrk_r+0x16>
  40b9d8:	bd38      	pop	{r3, r4, r5, pc}
  40b9da:	6823      	ldr	r3, [r4, #0]
  40b9dc:	2b00      	cmp	r3, #0
  40b9de:	d0fb      	beq.n	40b9d8 <_sbrk_r+0x14>
  40b9e0:	602b      	str	r3, [r5, #0]
  40b9e2:	bd38      	pop	{r3, r4, r5, pc}
  40b9e4:	2040c6a4 	.word	0x2040c6a4

0040b9e8 <sprintf>:
  40b9e8:	b40e      	push	{r1, r2, r3}
  40b9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b9ec:	b09c      	sub	sp, #112	; 0x70
  40b9ee:	4b10      	ldr	r3, [pc, #64]	; (40ba30 <sprintf+0x48>)
  40b9f0:	4606      	mov	r6, r0
  40b9f2:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40b9f6:	ac21      	add	r4, sp, #132	; 0x84
  40b9f8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  40b9fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40ba00:	6818      	ldr	r0, [r3, #0]
  40ba02:	f854 2b04 	ldr.w	r2, [r4], #4
  40ba06:	a902      	add	r1, sp, #8
  40ba08:	9602      	str	r6, [sp, #8]
  40ba0a:	4623      	mov	r3, r4
  40ba0c:	9606      	str	r6, [sp, #24]
  40ba0e:	9401      	str	r4, [sp, #4]
  40ba10:	f8ad e014 	strh.w	lr, [sp, #20]
  40ba14:	9504      	str	r5, [sp, #16]
  40ba16:	9507      	str	r5, [sp, #28]
  40ba18:	f8ad 7016 	strh.w	r7, [sp, #22]
  40ba1c:	f001 fa5c 	bl	40ced8 <_svfprintf_r>
  40ba20:	9b02      	ldr	r3, [sp, #8]
  40ba22:	2200      	movs	r2, #0
  40ba24:	701a      	strb	r2, [r3, #0]
  40ba26:	b01c      	add	sp, #112	; 0x70
  40ba28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40ba2c:	b003      	add	sp, #12
  40ba2e:	4770      	bx	lr
  40ba30:	204004d8 	.word	0x204004d8
	...
  40ba40:	eba2 0003 	sub.w	r0, r2, r3
  40ba44:	4770      	bx	lr
  40ba46:	bf00      	nop

0040ba48 <strcmp>:
  40ba48:	7802      	ldrb	r2, [r0, #0]
  40ba4a:	780b      	ldrb	r3, [r1, #0]
  40ba4c:	2a01      	cmp	r2, #1
  40ba4e:	bf28      	it	cs
  40ba50:	429a      	cmpcs	r2, r3
  40ba52:	d1f5      	bne.n	40ba40 <sprintf+0x58>
  40ba54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40ba58:	ea40 0401 	orr.w	r4, r0, r1
  40ba5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40ba60:	f06f 0c00 	mvn.w	ip, #0
  40ba64:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40ba68:	b312      	cbz	r2, 40bab0 <strcmp+0x68>
  40ba6a:	ea80 0401 	eor.w	r4, r0, r1
  40ba6e:	f014 0f07 	tst.w	r4, #7
  40ba72:	d16a      	bne.n	40bb4a <strcmp+0x102>
  40ba74:	f000 0407 	and.w	r4, r0, #7
  40ba78:	f020 0007 	bic.w	r0, r0, #7
  40ba7c:	f004 0503 	and.w	r5, r4, #3
  40ba80:	f021 0107 	bic.w	r1, r1, #7
  40ba84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40ba88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40ba8c:	f014 0f04 	tst.w	r4, #4
  40ba90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40ba94:	fa0c f405 	lsl.w	r4, ip, r5
  40ba98:	ea62 0204 	orn	r2, r2, r4
  40ba9c:	ea66 0604 	orn	r6, r6, r4
  40baa0:	d00a      	beq.n	40bab8 <strcmp+0x70>
  40baa2:	ea63 0304 	orn	r3, r3, r4
  40baa6:	4662      	mov	r2, ip
  40baa8:	ea67 0704 	orn	r7, r7, r4
  40baac:	4666      	mov	r6, ip
  40baae:	e003      	b.n	40bab8 <strcmp+0x70>
  40bab0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40bab4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40bab8:	fa82 f54c 	uadd8	r5, r2, ip
  40babc:	ea82 0406 	eor.w	r4, r2, r6
  40bac0:	faa4 f48c 	sel	r4, r4, ip
  40bac4:	bb6c      	cbnz	r4, 40bb22 <strcmp+0xda>
  40bac6:	fa83 f54c 	uadd8	r5, r3, ip
  40baca:	ea83 0507 	eor.w	r5, r3, r7
  40bace:	faa5 f58c 	sel	r5, r5, ip
  40bad2:	b995      	cbnz	r5, 40bafa <strcmp+0xb2>
  40bad4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40bad8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40badc:	fa82 f54c 	uadd8	r5, r2, ip
  40bae0:	ea82 0406 	eor.w	r4, r2, r6
  40bae4:	faa4 f48c 	sel	r4, r4, ip
  40bae8:	fa83 f54c 	uadd8	r5, r3, ip
  40baec:	ea83 0507 	eor.w	r5, r3, r7
  40baf0:	faa5 f58c 	sel	r5, r5, ip
  40baf4:	4325      	orrs	r5, r4
  40baf6:	d0db      	beq.n	40bab0 <strcmp+0x68>
  40baf8:	b99c      	cbnz	r4, 40bb22 <strcmp+0xda>
  40bafa:	ba2d      	rev	r5, r5
  40bafc:	fab5 f485 	clz	r4, r5
  40bb00:	f024 0407 	bic.w	r4, r4, #7
  40bb04:	fa27 f104 	lsr.w	r1, r7, r4
  40bb08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40bb0c:	fa23 f304 	lsr.w	r3, r3, r4
  40bb10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40bb14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bb18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bb1c:	eba0 0001 	sub.w	r0, r0, r1
  40bb20:	4770      	bx	lr
  40bb22:	ba24      	rev	r4, r4
  40bb24:	fab4 f484 	clz	r4, r4
  40bb28:	f024 0407 	bic.w	r4, r4, #7
  40bb2c:	fa26 f104 	lsr.w	r1, r6, r4
  40bb30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40bb34:	fa22 f204 	lsr.w	r2, r2, r4
  40bb38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40bb3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bb40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bb44:	eba0 0001 	sub.w	r0, r0, r1
  40bb48:	4770      	bx	lr
  40bb4a:	f014 0f03 	tst.w	r4, #3
  40bb4e:	d13c      	bne.n	40bbca <strcmp+0x182>
  40bb50:	f010 0403 	ands.w	r4, r0, #3
  40bb54:	d128      	bne.n	40bba8 <strcmp+0x160>
  40bb56:	f850 2b08 	ldr.w	r2, [r0], #8
  40bb5a:	f851 3b08 	ldr.w	r3, [r1], #8
  40bb5e:	fa82 f54c 	uadd8	r5, r2, ip
  40bb62:	ea82 0503 	eor.w	r5, r2, r3
  40bb66:	faa5 f58c 	sel	r5, r5, ip
  40bb6a:	b95d      	cbnz	r5, 40bb84 <strcmp+0x13c>
  40bb6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40bb74:	fa82 f54c 	uadd8	r5, r2, ip
  40bb78:	ea82 0503 	eor.w	r5, r2, r3
  40bb7c:	faa5 f58c 	sel	r5, r5, ip
  40bb80:	2d00      	cmp	r5, #0
  40bb82:	d0e8      	beq.n	40bb56 <strcmp+0x10e>
  40bb84:	ba2d      	rev	r5, r5
  40bb86:	fab5 f485 	clz	r4, r5
  40bb8a:	f024 0407 	bic.w	r4, r4, #7
  40bb8e:	fa23 f104 	lsr.w	r1, r3, r4
  40bb92:	fa22 f204 	lsr.w	r2, r2, r4
  40bb96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40bb9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bb9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bba2:	eba0 0001 	sub.w	r0, r0, r1
  40bba6:	4770      	bx	lr
  40bba8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40bbac:	f020 0003 	bic.w	r0, r0, #3
  40bbb0:	f850 2b08 	ldr.w	r2, [r0], #8
  40bbb4:	f021 0103 	bic.w	r1, r1, #3
  40bbb8:	f851 3b08 	ldr.w	r3, [r1], #8
  40bbbc:	fa0c f404 	lsl.w	r4, ip, r4
  40bbc0:	ea62 0204 	orn	r2, r2, r4
  40bbc4:	ea63 0304 	orn	r3, r3, r4
  40bbc8:	e7c9      	b.n	40bb5e <strcmp+0x116>
  40bbca:	f010 0403 	ands.w	r4, r0, #3
  40bbce:	d01a      	beq.n	40bc06 <strcmp+0x1be>
  40bbd0:	eba1 0104 	sub.w	r1, r1, r4
  40bbd4:	f020 0003 	bic.w	r0, r0, #3
  40bbd8:	07e4      	lsls	r4, r4, #31
  40bbda:	f850 2b04 	ldr.w	r2, [r0], #4
  40bbde:	d006      	beq.n	40bbee <strcmp+0x1a6>
  40bbe0:	d20f      	bcs.n	40bc02 <strcmp+0x1ba>
  40bbe2:	788b      	ldrb	r3, [r1, #2]
  40bbe4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40bbe8:	1ae4      	subs	r4, r4, r3
  40bbea:	d106      	bne.n	40bbfa <strcmp+0x1b2>
  40bbec:	b12b      	cbz	r3, 40bbfa <strcmp+0x1b2>
  40bbee:	78cb      	ldrb	r3, [r1, #3]
  40bbf0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40bbf4:	1ae4      	subs	r4, r4, r3
  40bbf6:	d100      	bne.n	40bbfa <strcmp+0x1b2>
  40bbf8:	b91b      	cbnz	r3, 40bc02 <strcmp+0x1ba>
  40bbfa:	4620      	mov	r0, r4
  40bbfc:	f85d 4b10 	ldr.w	r4, [sp], #16
  40bc00:	4770      	bx	lr
  40bc02:	f101 0104 	add.w	r1, r1, #4
  40bc06:	f850 2b04 	ldr.w	r2, [r0], #4
  40bc0a:	07cc      	lsls	r4, r1, #31
  40bc0c:	f021 0103 	bic.w	r1, r1, #3
  40bc10:	f851 3b04 	ldr.w	r3, [r1], #4
  40bc14:	d848      	bhi.n	40bca8 <strcmp+0x260>
  40bc16:	d224      	bcs.n	40bc62 <strcmp+0x21a>
  40bc18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40bc1c:	fa82 f54c 	uadd8	r5, r2, ip
  40bc20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40bc24:	faa5 f58c 	sel	r5, r5, ip
  40bc28:	d10a      	bne.n	40bc40 <strcmp+0x1f8>
  40bc2a:	b965      	cbnz	r5, 40bc46 <strcmp+0x1fe>
  40bc2c:	f851 3b04 	ldr.w	r3, [r1], #4
  40bc30:	ea84 0402 	eor.w	r4, r4, r2
  40bc34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40bc38:	d10e      	bne.n	40bc58 <strcmp+0x210>
  40bc3a:	f850 2b04 	ldr.w	r2, [r0], #4
  40bc3e:	e7eb      	b.n	40bc18 <strcmp+0x1d0>
  40bc40:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40bc44:	e055      	b.n	40bcf2 <strcmp+0x2aa>
  40bc46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40bc4a:	d14d      	bne.n	40bce8 <strcmp+0x2a0>
  40bc4c:	7808      	ldrb	r0, [r1, #0]
  40bc4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bc52:	f1c0 0000 	rsb	r0, r0, #0
  40bc56:	4770      	bx	lr
  40bc58:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40bc5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40bc60:	e047      	b.n	40bcf2 <strcmp+0x2aa>
  40bc62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40bc66:	fa82 f54c 	uadd8	r5, r2, ip
  40bc6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40bc6e:	faa5 f58c 	sel	r5, r5, ip
  40bc72:	d10a      	bne.n	40bc8a <strcmp+0x242>
  40bc74:	b965      	cbnz	r5, 40bc90 <strcmp+0x248>
  40bc76:	f851 3b04 	ldr.w	r3, [r1], #4
  40bc7a:	ea84 0402 	eor.w	r4, r4, r2
  40bc7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40bc82:	d10c      	bne.n	40bc9e <strcmp+0x256>
  40bc84:	f850 2b04 	ldr.w	r2, [r0], #4
  40bc88:	e7eb      	b.n	40bc62 <strcmp+0x21a>
  40bc8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40bc8e:	e030      	b.n	40bcf2 <strcmp+0x2aa>
  40bc90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40bc94:	d128      	bne.n	40bce8 <strcmp+0x2a0>
  40bc96:	880b      	ldrh	r3, [r1, #0]
  40bc98:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40bc9c:	e029      	b.n	40bcf2 <strcmp+0x2aa>
  40bc9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40bca2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40bca6:	e024      	b.n	40bcf2 <strcmp+0x2aa>
  40bca8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40bcac:	fa82 f54c 	uadd8	r5, r2, ip
  40bcb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40bcb4:	faa5 f58c 	sel	r5, r5, ip
  40bcb8:	d10a      	bne.n	40bcd0 <strcmp+0x288>
  40bcba:	b965      	cbnz	r5, 40bcd6 <strcmp+0x28e>
  40bcbc:	f851 3b04 	ldr.w	r3, [r1], #4
  40bcc0:	ea84 0402 	eor.w	r4, r4, r2
  40bcc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40bcc8:	d109      	bne.n	40bcde <strcmp+0x296>
  40bcca:	f850 2b04 	ldr.w	r2, [r0], #4
  40bcce:	e7eb      	b.n	40bca8 <strcmp+0x260>
  40bcd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40bcd4:	e00d      	b.n	40bcf2 <strcmp+0x2aa>
  40bcd6:	f015 0fff 	tst.w	r5, #255	; 0xff
  40bcda:	d105      	bne.n	40bce8 <strcmp+0x2a0>
  40bcdc:	680b      	ldr	r3, [r1, #0]
  40bcde:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40bce2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40bce6:	e004      	b.n	40bcf2 <strcmp+0x2aa>
  40bce8:	f04f 0000 	mov.w	r0, #0
  40bcec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bcf0:	4770      	bx	lr
  40bcf2:	ba12      	rev	r2, r2
  40bcf4:	ba1b      	rev	r3, r3
  40bcf6:	fa82 f44c 	uadd8	r4, r2, ip
  40bcfa:	ea82 0403 	eor.w	r4, r2, r3
  40bcfe:	faa4 f58c 	sel	r5, r4, ip
  40bd02:	fab5 f485 	clz	r4, r5
  40bd06:	fa02 f204 	lsl.w	r2, r2, r4
  40bd0a:	fa03 f304 	lsl.w	r3, r3, r4
  40bd0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40bd12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40bd16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40bd1a:	4770      	bx	lr

0040bd1c <strlen>:
  40bd1c:	f020 0103 	bic.w	r1, r0, #3
  40bd20:	f010 0003 	ands.w	r0, r0, #3
  40bd24:	f1c0 0000 	rsb	r0, r0, #0
  40bd28:	f851 3b04 	ldr.w	r3, [r1], #4
  40bd2c:	f100 0c04 	add.w	ip, r0, #4
  40bd30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40bd34:	f06f 0200 	mvn.w	r2, #0
  40bd38:	bf1c      	itt	ne
  40bd3a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40bd3e:	4313      	orrne	r3, r2
  40bd40:	f04f 0c01 	mov.w	ip, #1
  40bd44:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40bd48:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40bd4c:	eba3 020c 	sub.w	r2, r3, ip
  40bd50:	ea22 0203 	bic.w	r2, r2, r3
  40bd54:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40bd58:	bf04      	itt	eq
  40bd5a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40bd5e:	3004      	addeq	r0, #4
  40bd60:	d0f4      	beq.n	40bd4c <strlen+0x30>
  40bd62:	f1c2 0100 	rsb	r1, r2, #0
  40bd66:	ea02 0201 	and.w	r2, r2, r1
  40bd6a:	fab2 f282 	clz	r2, r2
  40bd6e:	f1c2 021f 	rsb	r2, r2, #31
  40bd72:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40bd76:	4770      	bx	lr

0040bd78 <sulp>:
  40bd78:	b570      	push	{r4, r5, r6, lr}
  40bd7a:	4604      	mov	r4, r0
  40bd7c:	460d      	mov	r5, r1
  40bd7e:	4616      	mov	r6, r2
  40bd80:	ec45 4b10 	vmov	d0, r4, r5
  40bd84:	f005 fe78 	bl	411a78 <__ulp>
  40bd88:	b196      	cbz	r6, 40bdb0 <sulp+0x38>
  40bd8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
  40bd8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40bd92:	2b00      	cmp	r3, #0
  40bd94:	dd0c      	ble.n	40bdb0 <sulp+0x38>
  40bd96:	051b      	lsls	r3, r3, #20
  40bd98:	2400      	movs	r4, #0
  40bd9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  40bd9e:	4622      	mov	r2, r4
  40bda0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40bda4:	ec51 0b10 	vmov	r0, r1, d0
  40bda8:	462b      	mov	r3, r5
  40bdaa:	f7fe fedb 	bl	40ab64 <__aeabi_dmul>
  40bdae:	bd70      	pop	{r4, r5, r6, pc}
  40bdb0:	ec51 0b10 	vmov	r0, r1, d0
  40bdb4:	bd70      	pop	{r4, r5, r6, pc}
  40bdb6:	bf00      	nop

0040bdb8 <_strtod_r>:
  40bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bdbc:	b09f      	sub	sp, #124	; 0x7c
  40bdbe:	460f      	mov	r7, r1
  40bdc0:	4682      	mov	sl, r0
  40bdc2:	460b      	mov	r3, r1
  40bdc4:	9204      	str	r2, [sp, #16]
  40bdc6:	2000      	movs	r0, #0
  40bdc8:	2200      	movs	r2, #0
  40bdca:	2100      	movs	r1, #0
  40bdcc:	9719      	str	r7, [sp, #100]	; 0x64
  40bdce:	921a      	str	r2, [sp, #104]	; 0x68
  40bdd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bdd4:	461c      	mov	r4, r3
  40bdd6:	f813 6b01 	ldrb.w	r6, [r3], #1
  40bdda:	2e2d      	cmp	r6, #45	; 0x2d
  40bddc:	f200 813a 	bhi.w	40c054 <_strtod_r+0x29c>
  40bde0:	e8df f016 	tbh	[pc, r6, lsl #1]
  40bde4:	01380056 	.word	0x01380056
  40bde8:	01380138 	.word	0x01380138
  40bdec:	01380138 	.word	0x01380138
  40bdf0:	01380138 	.word	0x01380138
  40bdf4:	009d0138 	.word	0x009d0138
  40bdf8:	009d009d 	.word	0x009d009d
  40bdfc:	009d009d 	.word	0x009d009d
  40be00:	01380138 	.word	0x01380138
  40be04:	01380138 	.word	0x01380138
  40be08:	01380138 	.word	0x01380138
  40be0c:	01380138 	.word	0x01380138
  40be10:	01380138 	.word	0x01380138
  40be14:	01380138 	.word	0x01380138
  40be18:	01380138 	.word	0x01380138
  40be1c:	01380138 	.word	0x01380138
  40be20:	01380138 	.word	0x01380138
  40be24:	0138009d 	.word	0x0138009d
  40be28:	01380138 	.word	0x01380138
  40be2c:	01380138 	.word	0x01380138
  40be30:	01380138 	.word	0x01380138
  40be34:	01380138 	.word	0x01380138
  40be38:	006a0138 	.word	0x006a0138
  40be3c:	00990138 	.word	0x00990138
  40be40:	4650      	mov	r0, sl
  40be42:	9306      	str	r3, [sp, #24]
  40be44:	f005 f9fa 	bl	41123c <_localeconv_r>
  40be48:	f8d0 8000 	ldr.w	r8, [r0]
  40be4c:	4650      	mov	r0, sl
  40be4e:	f005 f9f5 	bl	41123c <_localeconv_r>
  40be52:	6800      	ldr	r0, [r0, #0]
  40be54:	f7ff ff62 	bl	40bd1c <strlen>
  40be58:	9b06      	ldr	r3, [sp, #24]
  40be5a:	4602      	mov	r2, r0
  40be5c:	4641      	mov	r1, r8
  40be5e:	4618      	mov	r0, r3
  40be60:	f006 fa08 	bl	412274 <strncmp>
  40be64:	4680      	mov	r8, r0
  40be66:	2800      	cmp	r0, #0
  40be68:	f000 815a 	beq.w	40c120 <_strtod_r+0x368>
  40be6c:	2000      	movs	r0, #0
  40be6e:	46a1      	mov	r9, r4
  40be70:	4684      	mov	ip, r0
  40be72:	4686      	mov	lr, r0
  40be74:	f026 0320 	bic.w	r3, r6, #32
  40be78:	2b45      	cmp	r3, #69	; 0x45
  40be7a:	d152      	bne.n	40bf22 <_strtod_r+0x16a>
  40be7c:	f1b9 0f00 	cmp.w	r9, #0
  40be80:	bf08      	it	eq
  40be82:	2800      	cmpeq	r0, #0
  40be84:	f040 80fd 	bne.w	40c082 <_strtod_r+0x2ca>
  40be88:	9b08      	ldr	r3, [sp, #32]
  40be8a:	2b00      	cmp	r3, #0
  40be8c:	f040 80f9 	bne.w	40c082 <_strtod_r+0x2ca>
  40be90:	9b04      	ldr	r3, [sp, #16]
  40be92:	f04f 0800 	mov.w	r8, #0
  40be96:	f04f 0900 	mov.w	r9, #0
  40be9a:	b143      	cbz	r3, 40beae <_strtod_r+0xf6>
  40be9c:	2300      	movs	r3, #0
  40be9e:	9305      	str	r3, [sp, #20]
  40bea0:	9b04      	ldr	r3, [sp, #16]
  40bea2:	601f      	str	r7, [r3, #0]
  40bea4:	9b05      	ldr	r3, [sp, #20]
  40bea6:	b113      	cbz	r3, 40beae <_strtod_r+0xf6>
  40bea8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  40beac:	4699      	mov	r9, r3
  40beae:	ec49 8b10 	vmov	d0, r8, r9
  40beb2:	b01f      	add	sp, #124	; 0x7c
  40beb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40beb8:	2200      	movs	r2, #0
  40beba:	4623      	mov	r3, r4
  40bebc:	9205      	str	r2, [sp, #20]
  40bebe:	3401      	adds	r4, #1
  40bec0:	9419      	str	r4, [sp, #100]	; 0x64
  40bec2:	785e      	ldrb	r6, [r3, #1]
  40bec4:	2e00      	cmp	r6, #0
  40bec6:	d0e3      	beq.n	40be90 <_strtod_r+0xd8>
  40bec8:	2e30      	cmp	r6, #48	; 0x30
  40beca:	f000 80c8 	beq.w	40c05e <_strtod_r+0x2a6>
  40bece:	2300      	movs	r3, #0
  40bed0:	9409      	str	r4, [sp, #36]	; 0x24
  40bed2:	9308      	str	r3, [sp, #32]
  40bed4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40bed8:	f04f 0b00 	mov.w	fp, #0
  40bedc:	2b09      	cmp	r3, #9
  40bede:	465d      	mov	r5, fp
  40bee0:	4623      	mov	r3, r4
  40bee2:	465c      	mov	r4, fp
  40bee4:	d90a      	bls.n	40befc <_strtod_r+0x144>
  40bee6:	e7ab      	b.n	40be40 <_strtod_r+0x88>
  40bee8:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
  40beec:	3301      	adds	r3, #1
  40beee:	3401      	adds	r4, #1
  40bef0:	9319      	str	r3, [sp, #100]	; 0x64
  40bef2:	781e      	ldrb	r6, [r3, #0]
  40bef4:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40bef8:	2a09      	cmp	r2, #9
  40befa:	d8a1      	bhi.n	40be40 <_strtod_r+0x88>
  40befc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
  40bf00:	2c08      	cmp	r4, #8
  40bf02:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40bf06:	eb06 0242 	add.w	r2, r6, r2, lsl #1
  40bf0a:	eb06 0641 	add.w	r6, r6, r1, lsl #1
  40bf0e:	ddeb      	ble.n	40bee8 <_strtod_r+0x130>
  40bf10:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
  40bf14:	e7ea      	b.n	40beec <_strtod_r+0x134>
  40bf16:	2201      	movs	r2, #1
  40bf18:	4623      	mov	r3, r4
  40bf1a:	9205      	str	r2, [sp, #20]
  40bf1c:	e7cf      	b.n	40bebe <_strtod_r+0x106>
  40bf1e:	9319      	str	r3, [sp, #100]	; 0x64
  40bf20:	e758      	b.n	40bdd4 <_strtod_r+0x1c>
  40bf22:	2300      	movs	r3, #0
  40bf24:	f1b9 0f00 	cmp.w	r9, #0
  40bf28:	d036      	beq.n	40bf98 <_strtod_r+0x1e0>
  40bf2a:	f1b9 0f10 	cmp.w	r9, #16
  40bf2e:	46c8      	mov	r8, r9
  40bf30:	ebcc 0303 	rsb	r3, ip, r3
  40bf34:	4628      	mov	r0, r5
  40bf36:	bfa8      	it	ge
  40bf38:	f04f 0810 	movge.w	r8, #16
  40bf3c:	2c00      	cmp	r4, #0
  40bf3e:	bf08      	it	eq
  40bf40:	464c      	moveq	r4, r9
  40bf42:	9306      	str	r3, [sp, #24]
  40bf44:	f7fe fd98 	bl	40aa78 <__aeabi_ui2d>
  40bf48:	f1b8 0f09 	cmp.w	r8, #9
  40bf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bf50:	dd13      	ble.n	40bf7a <_strtod_r+0x1c2>
  40bf52:	4b87      	ldr	r3, [pc, #540]	; (40c170 <_strtod_r+0x3b8>)
  40bf54:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40bf58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  40bf5c:	f7fe fe02 	bl	40ab64 <__aeabi_dmul>
  40bf60:	4606      	mov	r6, r0
  40bf62:	460f      	mov	r7, r1
  40bf64:	4658      	mov	r0, fp
  40bf66:	f7fe fd87 	bl	40aa78 <__aeabi_ui2d>
  40bf6a:	4602      	mov	r2, r0
  40bf6c:	460b      	mov	r3, r1
  40bf6e:	4630      	mov	r0, r6
  40bf70:	4639      	mov	r1, r7
  40bf72:	f7fe fc45 	bl	40a800 <__adddf3>
  40bf76:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bf7a:	f1b9 0f0f 	cmp.w	r9, #15
  40bf7e:	f300 80f9 	bgt.w	40c174 <_strtod_r+0x3bc>
  40bf82:	9b06      	ldr	r3, [sp, #24]
  40bf84:	2b00      	cmp	r3, #0
  40bf86:	f040 82d8 	bne.w	40c53a <_strtod_r+0x782>
  40bf8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40bf8e:	9b04      	ldr	r3, [sp, #16]
  40bf90:	2b00      	cmp	r3, #0
  40bf92:	d087      	beq.n	40bea4 <_strtod_r+0xec>
  40bf94:	9f19      	ldr	r7, [sp, #100]	; 0x64
  40bf96:	e783      	b.n	40bea0 <_strtod_r+0xe8>
  40bf98:	2800      	cmp	r0, #0
  40bf9a:	f040 80bc 	bne.w	40c116 <_strtod_r+0x35e>
  40bf9e:	9b08      	ldr	r3, [sp, #32]
  40bfa0:	2b00      	cmp	r3, #0
  40bfa2:	f040 80b8 	bne.w	40c116 <_strtod_r+0x35e>
  40bfa6:	f1be 0f00 	cmp.w	lr, #0
  40bfaa:	f47f af71 	bne.w	40be90 <_strtod_r+0xd8>
  40bfae:	3e49      	subs	r6, #73	; 0x49
  40bfb0:	2e25      	cmp	r6, #37	; 0x25
  40bfb2:	f63f af6d 	bhi.w	40be90 <_strtod_r+0xd8>
  40bfb6:	a301      	add	r3, pc, #4	; (adr r3, 40bfbc <_strtod_r+0x204>)
  40bfb8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
  40bfbc:	0040c649 	.word	0x0040c649
  40bfc0:	0040be91 	.word	0x0040be91
  40bfc4:	0040be91 	.word	0x0040be91
  40bfc8:	0040be91 	.word	0x0040be91
  40bfcc:	0040be91 	.word	0x0040be91
  40bfd0:	0040c611 	.word	0x0040c611
  40bfd4:	0040be91 	.word	0x0040be91
  40bfd8:	0040be91 	.word	0x0040be91
  40bfdc:	0040be91 	.word	0x0040be91
  40bfe0:	0040be91 	.word	0x0040be91
  40bfe4:	0040be91 	.word	0x0040be91
  40bfe8:	0040be91 	.word	0x0040be91
  40bfec:	0040be91 	.word	0x0040be91
  40bff0:	0040be91 	.word	0x0040be91
  40bff4:	0040be91 	.word	0x0040be91
  40bff8:	0040be91 	.word	0x0040be91
  40bffc:	0040be91 	.word	0x0040be91
  40c000:	0040be91 	.word	0x0040be91
  40c004:	0040be91 	.word	0x0040be91
  40c008:	0040be91 	.word	0x0040be91
  40c00c:	0040be91 	.word	0x0040be91
  40c010:	0040be91 	.word	0x0040be91
  40c014:	0040be91 	.word	0x0040be91
  40c018:	0040be91 	.word	0x0040be91
  40c01c:	0040be91 	.word	0x0040be91
  40c020:	0040be91 	.word	0x0040be91
  40c024:	0040be91 	.word	0x0040be91
  40c028:	0040be91 	.word	0x0040be91
  40c02c:	0040be91 	.word	0x0040be91
  40c030:	0040be91 	.word	0x0040be91
  40c034:	0040be91 	.word	0x0040be91
  40c038:	0040be91 	.word	0x0040be91
  40c03c:	0040c649 	.word	0x0040c649
  40c040:	0040be91 	.word	0x0040be91
  40c044:	0040be91 	.word	0x0040be91
  40c048:	0040be91 	.word	0x0040be91
  40c04c:	0040be91 	.word	0x0040be91
  40c050:	0040c611 	.word	0x0040c611
  40c054:	2300      	movs	r3, #0
  40c056:	2e30      	cmp	r6, #48	; 0x30
  40c058:	9305      	str	r3, [sp, #20]
  40c05a:	f47f af38 	bne.w	40bece <_strtod_r+0x116>
  40c05e:	7863      	ldrb	r3, [r4, #1]
  40c060:	2b58      	cmp	r3, #88	; 0x58
  40c062:	f000 8348 	beq.w	40c6f6 <_strtod_r+0x93e>
  40c066:	2b78      	cmp	r3, #120	; 0x78
  40c068:	f000 8345 	beq.w	40c6f6 <_strtod_r+0x93e>
  40c06c:	3401      	adds	r4, #1
  40c06e:	9419      	str	r4, [sp, #100]	; 0x64
  40c070:	7826      	ldrb	r6, [r4, #0]
  40c072:	2e30      	cmp	r6, #48	; 0x30
  40c074:	d0fa      	beq.n	40c06c <_strtod_r+0x2b4>
  40c076:	2e00      	cmp	r6, #0
  40c078:	d04d      	beq.n	40c116 <_strtod_r+0x35e>
  40c07a:	2301      	movs	r3, #1
  40c07c:	9409      	str	r4, [sp, #36]	; 0x24
  40c07e:	9308      	str	r3, [sp, #32]
  40c080:	e728      	b.n	40bed4 <_strtod_r+0x11c>
  40c082:	9f19      	ldr	r7, [sp, #100]	; 0x64
  40c084:	1c7b      	adds	r3, r7, #1
  40c086:	9319      	str	r3, [sp, #100]	; 0x64
  40c088:	787e      	ldrb	r6, [r7, #1]
  40c08a:	2e2b      	cmp	r6, #43	; 0x2b
  40c08c:	f000 830d 	beq.w	40c6aa <_strtod_r+0x8f2>
  40c090:	2e2d      	cmp	r6, #45	; 0x2d
  40c092:	f000 8249 	beq.w	40c528 <_strtod_r+0x770>
  40c096:	f04f 0800 	mov.w	r8, #0
  40c09a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40c09e:	2b09      	cmp	r3, #9
  40c0a0:	f200 82fc 	bhi.w	40c69c <_strtod_r+0x8e4>
  40c0a4:	2e30      	cmp	r6, #48	; 0x30
  40c0a6:	d105      	bne.n	40c0b4 <_strtod_r+0x2fc>
  40c0a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c0aa:	3301      	adds	r3, #1
  40c0ac:	9319      	str	r3, [sp, #100]	; 0x64
  40c0ae:	781e      	ldrb	r6, [r3, #0]
  40c0b0:	2e30      	cmp	r6, #48	; 0x30
  40c0b2:	d0fa      	beq.n	40c0aa <_strtod_r+0x2f2>
  40c0b4:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40c0b8:	2b08      	cmp	r3, #8
  40c0ba:	f63f af32 	bhi.w	40bf22 <_strtod_r+0x16a>
  40c0be:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c0c0:	4619      	mov	r1, r3
  40c0c2:	9306      	str	r3, [sp, #24]
  40c0c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40c0c8:	460a      	mov	r2, r1
  40c0ca:	3201      	adds	r2, #1
  40c0cc:	9219      	str	r2, [sp, #100]	; 0x64
  40c0ce:	784e      	ldrb	r6, [r1, #1]
  40c0d0:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40c0d4:	2909      	cmp	r1, #9
  40c0d6:	d80b      	bhi.n	40c0f0 <_strtod_r+0x338>
  40c0d8:	3201      	adds	r2, #1
  40c0da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40c0de:	9219      	str	r2, [sp, #100]	; 0x64
  40c0e0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  40c0e4:	7816      	ldrb	r6, [r2, #0]
  40c0e6:	3b30      	subs	r3, #48	; 0x30
  40c0e8:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40c0ec:	2909      	cmp	r1, #9
  40c0ee:	d9f3      	bls.n	40c0d8 <_strtod_r+0x320>
  40c0f0:	9906      	ldr	r1, [sp, #24]
  40c0f2:	1a52      	subs	r2, r2, r1
  40c0f4:	2a08      	cmp	r2, #8
  40c0f6:	f300 8412 	bgt.w	40c91e <_strtod_r+0xb66>
  40c0fa:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40c0fe:	4293      	cmp	r3, r2
  40c100:	f300 840d 	bgt.w	40c91e <_strtod_r+0xb66>
  40c104:	f1c8 0200 	rsb	r2, r8, #0
  40c108:	4053      	eors	r3, r2
  40c10a:	4443      	add	r3, r8
  40c10c:	f1b9 0f00 	cmp.w	r9, #0
  40c110:	f47f af0b 	bne.w	40bf2a <_strtod_r+0x172>
  40c114:	e740      	b.n	40bf98 <_strtod_r+0x1e0>
  40c116:	f04f 0800 	mov.w	r8, #0
  40c11a:	f04f 0900 	mov.w	r9, #0
  40c11e:	e736      	b.n	40bf8e <_strtod_r+0x1d6>
  40c120:	4650      	mov	r0, sl
  40c122:	f005 f88b 	bl	41123c <_localeconv_r>
  40c126:	6800      	ldr	r0, [r0, #0]
  40c128:	f7ff fdf8 	bl	40bd1c <strlen>
  40c12c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c12e:	181a      	adds	r2, r3, r0
  40c130:	9219      	str	r2, [sp, #100]	; 0x64
  40c132:	5c1e      	ldrb	r6, [r3, r0]
  40c134:	2c00      	cmp	r4, #0
  40c136:	f040 81e5 	bne.w	40c504 <_strtod_r+0x74c>
  40c13a:	2e30      	cmp	r6, #48	; 0x30
  40c13c:	4620      	mov	r0, r4
  40c13e:	d105      	bne.n	40c14c <_strtod_r+0x394>
  40c140:	3201      	adds	r2, #1
  40c142:	3001      	adds	r0, #1
  40c144:	9219      	str	r2, [sp, #100]	; 0x64
  40c146:	7816      	ldrb	r6, [r2, #0]
  40c148:	2e30      	cmp	r6, #48	; 0x30
  40c14a:	d0f9      	beq.n	40c140 <_strtod_r+0x388>
  40c14c:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40c150:	2b08      	cmp	r3, #8
  40c152:	f200 8252 	bhi.w	40c5fa <_strtod_r+0x842>
  40c156:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c158:	3e30      	subs	r6, #48	; 0x30
  40c15a:	f100 0c01 	add.w	ip, r0, #1
  40c15e:	f04f 0901 	mov.w	r9, #1
  40c162:	9309      	str	r3, [sp, #36]	; 0x24
  40c164:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40c168:	2000      	movs	r0, #0
  40c16a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
  40c16e:	e1d7      	b.n	40c520 <_strtod_r+0x768>
  40c170:	00413e78 	.word	0x00413e78
  40c174:	ebc8 0809 	rsb	r8, r8, r9
  40c178:	9b06      	ldr	r3, [sp, #24]
  40c17a:	4498      	add	r8, r3
  40c17c:	f1b8 0f00 	cmp.w	r8, #0
  40c180:	f340 8369 	ble.w	40c856 <_strtod_r+0xa9e>
  40c184:	f018 010f 	ands.w	r1, r8, #15
  40c188:	d00a      	beq.n	40c1a0 <_strtod_r+0x3e8>
  40c18a:	4bbd      	ldr	r3, [pc, #756]	; (40c480 <_strtod_r+0x6c8>)
  40c18c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40c190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c194:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c198:	f7fe fce4 	bl	40ab64 <__aeabi_dmul>
  40c19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c1a0:	f038 060f 	bics.w	r6, r8, #15
  40c1a4:	f040 81db 	bne.w	40c55e <_strtod_r+0x7a6>
  40c1a8:	2300      	movs	r3, #0
  40c1aa:	9308      	str	r3, [sp, #32]
  40c1ac:	9500      	str	r5, [sp, #0]
  40c1ae:	4622      	mov	r2, r4
  40c1b0:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c1b2:	464b      	mov	r3, r9
  40c1b4:	4650      	mov	r0, sl
  40c1b6:	f005 f9d5 	bl	411564 <__s2b>
  40c1ba:	9011      	str	r0, [sp, #68]	; 0x44
  40c1bc:	2800      	cmp	r0, #0
  40c1be:	f000 8307 	beq.w	40c7d0 <_strtod_r+0xa18>
  40c1c2:	9a06      	ldr	r2, [sp, #24]
  40c1c4:	2700      	movs	r7, #0
  40c1c6:	4681      	mov	r9, r0
  40c1c8:	2a00      	cmp	r2, #0
  40c1ca:	f1c2 0300 	rsb	r3, r2, #0
  40c1ce:	46bb      	mov	fp, r7
  40c1d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  40c1d4:	bfa8      	it	ge
  40c1d6:	463b      	movge	r3, r7
  40c1d8:	9209      	str	r2, [sp, #36]	; 0x24
  40c1da:	930c      	str	r3, [sp, #48]	; 0x30
  40c1dc:	4650      	mov	r0, sl
  40c1de:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40c1e2:	f005 f94b 	bl	41147c <_Balloc>
  40c1e6:	4606      	mov	r6, r0
  40c1e8:	2800      	cmp	r0, #0
  40c1ea:	f000 8265 	beq.w	40c6b8 <_strtod_r+0x900>
  40c1ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40c1f2:	f109 010c 	add.w	r1, r9, #12
  40c1f6:	300c      	adds	r0, #12
  40c1f8:	3202      	adds	r2, #2
  40c1fa:	ed9d 7b02 	vldr	d7, [sp, #8]
  40c1fe:	0092      	lsls	r2, r2, #2
  40c200:	ed8d 7b06 	vstr	d7, [sp, #24]
  40c204:	f7ff faf0 	bl	40b7e8 <memcpy>
  40c208:	4650      	mov	r0, sl
  40c20a:	a91b      	add	r1, sp, #108	; 0x6c
  40c20c:	aa1c      	add	r2, sp, #112	; 0x70
  40c20e:	ed9d 0b06 	vldr	d0, [sp, #24]
  40c212:	f005 fcc1 	bl	411b98 <__d2b>
  40c216:	901a      	str	r0, [sp, #104]	; 0x68
  40c218:	2800      	cmp	r0, #0
  40c21a:	f000 824e 	beq.w	40c6ba <_strtod_r+0x902>
  40c21e:	4650      	mov	r0, sl
  40c220:	2101      	movs	r1, #1
  40c222:	f005 fa3d 	bl	4116a0 <__i2b>
  40c226:	4683      	mov	fp, r0
  40c228:	2800      	cmp	r0, #0
  40c22a:	f000 8245 	beq.w	40c6b8 <_strtod_r+0x900>
  40c22e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c230:	2b00      	cmp	r3, #0
  40c232:	f2c0 8118 	blt.w	40c466 <_strtod_r+0x6ae>
  40c236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c238:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c23a:	eb02 0803 	add.w	r8, r2, r3
  40c23e:	9a08      	ldr	r2, [sp, #32]
  40c240:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  40c244:	1a9a      	subs	r2, r3, r2
  40c246:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c248:	441a      	add	r2, r3
  40c24a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40c24e:	428a      	cmp	r2, r1
  40c250:	f280 80f1 	bge.w	40c436 <_strtod_r+0x67e>
  40c254:	1a89      	subs	r1, r1, r2
  40c256:	291f      	cmp	r1, #31
  40c258:	eba3 0301 	sub.w	r3, r3, r1
  40c25c:	f300 811a 	bgt.w	40c494 <_strtod_r+0x6dc>
  40c260:	2201      	movs	r2, #1
  40c262:	2000      	movs	r0, #0
  40c264:	408a      	lsls	r2, r1
  40c266:	900a      	str	r0, [sp, #40]	; 0x28
  40c268:	9210      	str	r2, [sp, #64]	; 0x40
  40c26a:	eb08 0503 	add.w	r5, r8, r3
  40c26e:	441c      	add	r4, r3
  40c270:	9b08      	ldr	r3, [sp, #32]
  40c272:	4545      	cmp	r5, r8
  40c274:	462a      	mov	r2, r5
  40c276:	441c      	add	r4, r3
  40c278:	bfa8      	it	ge
  40c27a:	4642      	movge	r2, r8
  40c27c:	42a2      	cmp	r2, r4
  40c27e:	bfa8      	it	ge
  40c280:	4622      	movge	r2, r4
  40c282:	2a00      	cmp	r2, #0
  40c284:	dd03      	ble.n	40c28e <_strtod_r+0x4d6>
  40c286:	1aad      	subs	r5, r5, r2
  40c288:	1aa4      	subs	r4, r4, r2
  40c28a:	ebc2 0808 	rsb	r8, r2, r8
  40c28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c290:	b1bb      	cbz	r3, 40c2c2 <_strtod_r+0x50a>
  40c292:	4659      	mov	r1, fp
  40c294:	4650      	mov	r0, sl
  40c296:	461a      	mov	r2, r3
  40c298:	f005 faae 	bl	4117f8 <__pow5mult>
  40c29c:	4683      	mov	fp, r0
  40c29e:	2800      	cmp	r0, #0
  40c2a0:	f000 820a 	beq.w	40c6b8 <_strtod_r+0x900>
  40c2a4:	4650      	mov	r0, sl
  40c2a6:	4659      	mov	r1, fp
  40c2a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c2aa:	f005 fa03 	bl	4116b4 <__multiply>
  40c2ae:	2800      	cmp	r0, #0
  40c2b0:	f000 8202 	beq.w	40c6b8 <_strtod_r+0x900>
  40c2b4:	900d      	str	r0, [sp, #52]	; 0x34
  40c2b6:	4650      	mov	r0, sl
  40c2b8:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c2ba:	f005 f907 	bl	4114cc <_Bfree>
  40c2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c2c0:	921a      	str	r2, [sp, #104]	; 0x68
  40c2c2:	2d00      	cmp	r5, #0
  40c2c4:	dd08      	ble.n	40c2d8 <_strtod_r+0x520>
  40c2c6:	462a      	mov	r2, r5
  40c2c8:	4650      	mov	r0, sl
  40c2ca:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c2cc:	f005 fae4 	bl	411898 <__lshift>
  40c2d0:	901a      	str	r0, [sp, #104]	; 0x68
  40c2d2:	2800      	cmp	r0, #0
  40c2d4:	f000 81f1 	beq.w	40c6ba <_strtod_r+0x902>
  40c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c2da:	b143      	cbz	r3, 40c2ee <_strtod_r+0x536>
  40c2dc:	4631      	mov	r1, r6
  40c2de:	4650      	mov	r0, sl
  40c2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c2e2:	f005 fa89 	bl	4117f8 <__pow5mult>
  40c2e6:	4606      	mov	r6, r0
  40c2e8:	2800      	cmp	r0, #0
  40c2ea:	f000 81e5 	beq.w	40c6b8 <_strtod_r+0x900>
  40c2ee:	2c00      	cmp	r4, #0
  40c2f0:	dd08      	ble.n	40c304 <_strtod_r+0x54c>
  40c2f2:	4631      	mov	r1, r6
  40c2f4:	4622      	mov	r2, r4
  40c2f6:	4650      	mov	r0, sl
  40c2f8:	f005 face 	bl	411898 <__lshift>
  40c2fc:	4606      	mov	r6, r0
  40c2fe:	2800      	cmp	r0, #0
  40c300:	f000 81da 	beq.w	40c6b8 <_strtod_r+0x900>
  40c304:	f1b8 0f00 	cmp.w	r8, #0
  40c308:	dd08      	ble.n	40c31c <_strtod_r+0x564>
  40c30a:	4659      	mov	r1, fp
  40c30c:	4642      	mov	r2, r8
  40c30e:	4650      	mov	r0, sl
  40c310:	f005 fac2 	bl	411898 <__lshift>
  40c314:	4683      	mov	fp, r0
  40c316:	2800      	cmp	r0, #0
  40c318:	f000 81ce 	beq.w	40c6b8 <_strtod_r+0x900>
  40c31c:	4650      	mov	r0, sl
  40c31e:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c320:	4632      	mov	r2, r6
  40c322:	f005 fb37 	bl	411994 <__mdiff>
  40c326:	4607      	mov	r7, r0
  40c328:	2800      	cmp	r0, #0
  40c32a:	f000 81c5 	beq.w	40c6b8 <_strtod_r+0x900>
  40c32e:	2300      	movs	r3, #0
  40c330:	68c2      	ldr	r2, [r0, #12]
  40c332:	4659      	mov	r1, fp
  40c334:	60c3      	str	r3, [r0, #12]
  40c336:	920d      	str	r2, [sp, #52]	; 0x34
  40c338:	f005 fb08 	bl	41194c <__mcmp>
  40c33c:	2800      	cmp	r0, #0
  40c33e:	f2c0 83ad 	blt.w	40ca9c <_strtod_r+0xce4>
  40c342:	f000 83fe 	beq.w	40cb42 <_strtod_r+0xd8a>
  40c346:	4638      	mov	r0, r7
  40c348:	4659      	mov	r1, fp
  40c34a:	f005 fc83 	bl	411c54 <__ratio>
  40c34e:	2200      	movs	r2, #0
  40c350:	ee10 0a10 	vmov	r0, s0
  40c354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40c358:	ec55 4b10 	vmov	r4, r5, d0
  40c35c:	4629      	mov	r1, r5
  40c35e:	f7fe fe7d 	bl	40b05c <__aeabi_dcmple>
  40c362:	2800      	cmp	r0, #0
  40c364:	d06c      	beq.n	40c440 <_strtod_r+0x688>
  40c366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c368:	2b00      	cmp	r3, #0
  40c36a:	f000 80a0 	beq.w	40c4ae <_strtod_r+0x6f6>
  40c36e:	2400      	movs	r4, #0
  40c370:	4d44      	ldr	r5, [pc, #272]	; (40c484 <_strtod_r+0x6cc>)
  40c372:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40c376:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 40c470 <_strtod_r+0x6b8>
  40c37a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c37e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 40c48c <_strtod_r+0x6d4>
  40c382:	4b41      	ldr	r3, [pc, #260]	; (40c488 <_strtod_r+0x6d0>)
  40c384:	ea0c 0808 	and.w	r8, ip, r8
  40c388:	4598      	cmp	r8, r3
  40c38a:	f000 81f1 	beq.w	40c770 <_strtod_r+0x9b8>
  40c38e:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  40c392:	d824      	bhi.n	40c3de <_strtod_r+0x626>
  40c394:	9b08      	ldr	r3, [sp, #32]
  40c396:	b313      	cbz	r3, 40c3de <_strtod_r+0x626>
  40c398:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c39c:	a336      	add	r3, pc, #216	; (adr r3, 40c478 <_strtod_r+0x6c0>)
  40c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c3a2:	f7fe fe5b 	bl	40b05c <__aeabi_dcmple>
  40c3a6:	b1b0      	cbz	r0, 40c3d6 <_strtod_r+0x61e>
  40c3a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c3ac:	f006 f9fa 	bl	4127a4 <__aeabi_d2uiz>
  40c3b0:	2800      	cmp	r0, #0
  40c3b2:	f000 8128 	beq.w	40c606 <_strtod_r+0x84e>
  40c3b6:	f7fe fb5f 	bl	40aa78 <__aeabi_ui2d>
  40c3ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c3c0:	2b00      	cmp	r3, #0
  40c3c2:	f040 8243 	bne.w	40c84c <_strtod_r+0xa94>
  40c3c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c3ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c3ce:	9012      	str	r0, [sp, #72]	; 0x48
  40c3d0:	9313      	str	r3, [sp, #76]	; 0x4c
  40c3d2:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
  40c3d6:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  40c3da:	ebc8 0503 	rsb	r5, r8, r3
  40c3de:	ed9d 0b06 	vldr	d0, [sp, #24]
  40c3e2:	f005 fb49 	bl	411a78 <__ulp>
  40c3e6:	4620      	mov	r0, r4
  40c3e8:	4629      	mov	r1, r5
  40c3ea:	ec53 2b10 	vmov	r2, r3, d0
  40c3ee:	f7fe fbb9 	bl	40ab64 <__aeabi_dmul>
  40c3f2:	4602      	mov	r2, r0
  40c3f4:	460b      	mov	r3, r1
  40c3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c3fa:	f7fe fa01 	bl	40a800 <__adddf3>
  40c3fe:	460c      	mov	r4, r1
  40c400:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c404:	4b21      	ldr	r3, [pc, #132]	; (40c48c <_strtod_r+0x6d4>)
  40c406:	4023      	ands	r3, r4
  40c408:	4598      	cmp	r8, r3
  40c40a:	d103      	bne.n	40c414 <_strtod_r+0x65c>
  40c40c:	9b08      	ldr	r3, [sp, #32]
  40c40e:	2b00      	cmp	r3, #0
  40c410:	f000 81e7 	beq.w	40c7e2 <_strtod_r+0xa2a>
  40c414:	4650      	mov	r0, sl
  40c416:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c418:	f005 f858 	bl	4114cc <_Bfree>
  40c41c:	4650      	mov	r0, sl
  40c41e:	4631      	mov	r1, r6
  40c420:	f005 f854 	bl	4114cc <_Bfree>
  40c424:	4650      	mov	r0, sl
  40c426:	4659      	mov	r1, fp
  40c428:	f005 f850 	bl	4114cc <_Bfree>
  40c42c:	4650      	mov	r0, sl
  40c42e:	4639      	mov	r1, r7
  40c430:	f005 f84c 	bl	4114cc <_Bfree>
  40c434:	e6d2      	b.n	40c1dc <_strtod_r+0x424>
  40c436:	2200      	movs	r2, #0
  40c438:	920a      	str	r2, [sp, #40]	; 0x28
  40c43a:	2201      	movs	r2, #1
  40c43c:	9210      	str	r2, [sp, #64]	; 0x40
  40c43e:	e714      	b.n	40c26a <_strtod_r+0x4b2>
  40c440:	4b13      	ldr	r3, [pc, #76]	; (40c490 <_strtod_r+0x6d8>)
  40c442:	4620      	mov	r0, r4
  40c444:	4629      	mov	r1, r5
  40c446:	2200      	movs	r2, #0
  40c448:	f7fe fb8c 	bl	40ab64 <__aeabi_dmul>
  40c44c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c44e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c452:	bb3b      	cbnz	r3, 40c4a4 <_strtod_r+0x6ec>
  40c454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c458:	900e      	str	r0, [sp, #56]	; 0x38
  40c45a:	930f      	str	r3, [sp, #60]	; 0x3c
  40c45c:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40c460:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
  40c464:	e78b      	b.n	40c37e <_strtod_r+0x5c6>
  40c466:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c468:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  40c46c:	1ad4      	subs	r4, r2, r3
  40c46e:	e6e6      	b.n	40c23e <_strtod_r+0x486>
  40c470:	00000000 	.word	0x00000000
  40c474:	3ff00000 	.word	0x3ff00000
  40c478:	ffc00000 	.word	0xffc00000
  40c47c:	41dfffff 	.word	0x41dfffff
  40c480:	00413e78 	.word	0x00413e78
  40c484:	3ff00000 	.word	0x3ff00000
  40c488:	7fe00000 	.word	0x7fe00000
  40c48c:	7ff00000 	.word	0x7ff00000
  40c490:	3fe00000 	.word	0x3fe00000
  40c494:	49a8      	ldr	r1, [pc, #672]	; (40c738 <_strtod_r+0x980>)
  40c496:	2501      	movs	r5, #1
  40c498:	1a89      	subs	r1, r1, r2
  40c49a:	9510      	str	r5, [sp, #64]	; 0x40
  40c49c:	fa05 f201 	lsl.w	r2, r5, r1
  40c4a0:	920a      	str	r2, [sp, #40]	; 0x28
  40c4a2:	e6e2      	b.n	40c26a <_strtod_r+0x4b2>
  40c4a4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
  40c4a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40c4ac:	e7d6      	b.n	40c45c <_strtod_r+0x6a4>
  40c4ae:	9b02      	ldr	r3, [sp, #8]
  40c4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c4b4:	2b00      	cmp	r3, #0
  40c4b6:	f040 8095 	bne.w	40c5e4 <_strtod_r+0x82c>
  40c4ba:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40c4be:	468c      	mov	ip, r1
  40c4c0:	2b00      	cmp	r3, #0
  40c4c2:	f040 8093 	bne.w	40c5ec <_strtod_r+0x834>
  40c4c6:	910a      	str	r1, [sp, #40]	; 0x28
  40c4c8:	4620      	mov	r0, r4
  40c4ca:	4629      	mov	r1, r5
  40c4cc:	2200      	movs	r2, #0
  40c4ce:	4b9b      	ldr	r3, [pc, #620]	; (40c73c <_strtod_r+0x984>)
  40c4d0:	f7fe fdba 	bl	40b048 <__aeabi_dcmplt>
  40c4d4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40c4d8:	2800      	cmp	r0, #0
  40c4da:	f040 8356 	bne.w	40cb8a <_strtod_r+0xdd2>
  40c4de:	4b98      	ldr	r3, [pc, #608]	; (40c740 <_strtod_r+0x988>)
  40c4e0:	4620      	mov	r0, r4
  40c4e2:	4629      	mov	r1, r5
  40c4e4:	2200      	movs	r2, #0
  40c4e6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40c4ea:	f7fe fb3b 	bl	40ab64 <__aeabi_dmul>
  40c4ee:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40c4f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40c4f6:	9016      	str	r0, [sp, #88]	; 0x58
  40c4f8:	9317      	str	r3, [sp, #92]	; 0x5c
  40c4fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  40c4fe:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40c502:	e73c      	b.n	40c37e <_strtod_r+0x5c6>
  40c504:	4640      	mov	r0, r8
  40c506:	46a1      	mov	r9, r4
  40c508:	46c4      	mov	ip, r8
  40c50a:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40c50e:	2a09      	cmp	r2, #9
  40c510:	d810      	bhi.n	40c534 <_strtod_r+0x77c>
  40c512:	1c43      	adds	r3, r0, #1
  40c514:	4616      	mov	r6, r2
  40c516:	2a00      	cmp	r2, #0
  40c518:	f040 8205 	bne.w	40c926 <_strtod_r+0xb6e>
  40c51c:	4618      	mov	r0, r3
  40c51e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c520:	1c5a      	adds	r2, r3, #1
  40c522:	9219      	str	r2, [sp, #100]	; 0x64
  40c524:	785e      	ldrb	r6, [r3, #1]
  40c526:	e7f0      	b.n	40c50a <_strtod_r+0x752>
  40c528:	f04f 0801 	mov.w	r8, #1
  40c52c:	1cbb      	adds	r3, r7, #2
  40c52e:	9319      	str	r3, [sp, #100]	; 0x64
  40c530:	78be      	ldrb	r6, [r7, #2]
  40c532:	e5b2      	b.n	40c09a <_strtod_r+0x2e2>
  40c534:	f04f 0e01 	mov.w	lr, #1
  40c538:	e49c      	b.n	40be74 <_strtod_r+0xbc>
  40c53a:	9b06      	ldr	r3, [sp, #24]
  40c53c:	f340 8296 	ble.w	40ca6c <_strtod_r+0xcb4>
  40c540:	2b16      	cmp	r3, #22
  40c542:	f300 8211 	bgt.w	40c968 <_strtod_r+0xbb0>
  40c546:	497f      	ldr	r1, [pc, #508]	; (40c744 <_strtod_r+0x98c>)
  40c548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40c54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c550:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c554:	f7fe fb06 	bl	40ab64 <__aeabi_dmul>
  40c558:	4680      	mov	r8, r0
  40c55a:	4689      	mov	r9, r1
  40c55c:	e517      	b.n	40bf8e <_strtod_r+0x1d6>
  40c55e:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  40c562:	f300 8135 	bgt.w	40c7d0 <_strtod_r+0xa18>
  40c566:	1136      	asrs	r6, r6, #4
  40c568:	2e01      	cmp	r6, #1
  40c56a:	f340 833b 	ble.w	40cbe4 <_strtod_r+0xe2c>
  40c56e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40c76c <_strtod_r+0x9b4>
  40c572:	f04f 0b00 	mov.w	fp, #0
  40c576:	4647      	mov	r7, r8
  40c578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c57c:	f016 0f01 	tst.w	r6, #1
  40c580:	f10b 0b01 	add.w	fp, fp, #1
  40c584:	ea4f 0666 	mov.w	r6, r6, asr #1
  40c588:	d003      	beq.n	40c592 <_strtod_r+0x7da>
  40c58a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c58e:	f7fe fae9 	bl	40ab64 <__aeabi_dmul>
  40c592:	2e01      	cmp	r6, #1
  40c594:	f107 0708 	add.w	r7, r7, #8
  40c598:	d1f0      	bne.n	40c57c <_strtod_r+0x7c4>
  40c59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c59e:	9b03      	ldr	r3, [sp, #12]
  40c5a0:	eb08 08cb 	add.w	r8, r8, fp, lsl #3
  40c5a4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40c5a8:	9303      	str	r3, [sp, #12]
  40c5aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c5ae:	e9d8 0100 	ldrd	r0, r1, [r8]
  40c5b2:	f7fe fad7 	bl	40ab64 <__aeabi_dmul>
  40c5b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40c5ba:	4a63      	ldr	r2, [pc, #396]	; (40c748 <_strtod_r+0x990>)
  40c5bc:	0d1b      	lsrs	r3, r3, #20
  40c5be:	051b      	lsls	r3, r3, #20
  40c5c0:	4293      	cmp	r3, r2
  40c5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c5c6:	f200 8103 	bhi.w	40c7d0 <_strtod_r+0xa18>
  40c5ca:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  40c5ce:	4293      	cmp	r3, r2
  40c5d0:	f240 82e4 	bls.w	40cb9c <_strtod_r+0xde4>
  40c5d4:	4b5d      	ldr	r3, [pc, #372]	; (40c74c <_strtod_r+0x994>)
  40c5d6:	9303      	str	r3, [sp, #12]
  40c5d8:	2300      	movs	r3, #0
  40c5da:	9308      	str	r3, [sp, #32]
  40c5dc:	f04f 33ff 	mov.w	r3, #4294967295
  40c5e0:	9302      	str	r3, [sp, #8]
  40c5e2:	e5e3      	b.n	40c1ac <_strtod_r+0x3f4>
  40c5e4:	2801      	cmp	r0, #1
  40c5e6:	f000 81dd 	beq.w	40c9a4 <_strtod_r+0xbec>
  40c5ea:	468c      	mov	ip, r1
  40c5ec:	2400      	movs	r4, #0
  40c5ee:	4d58      	ldr	r5, [pc, #352]	; (40c750 <_strtod_r+0x998>)
  40c5f0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 40c730 <_strtod_r+0x978>
  40c5f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c5f8:	e6c1      	b.n	40c37e <_strtod_r+0x5c6>
  40c5fa:	f04f 0900 	mov.w	r9, #0
  40c5fe:	f04f 0e01 	mov.w	lr, #1
  40c602:	46cc      	mov	ip, r9
  40c604:	e436      	b.n	40be74 <_strtod_r+0xbc>
  40c606:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 40c730 <_strtod_r+0x978>
  40c60a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40c60e:	e6d6      	b.n	40c3be <_strtod_r+0x606>
  40c610:	9919      	ldr	r1, [sp, #100]	; 0x64
  40c612:	4850      	ldr	r0, [pc, #320]	; (40c754 <_strtod_r+0x99c>)
  40c614:	e009      	b.n	40c62a <_strtod_r+0x872>
  40c616:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40c61a:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c61e:	2c19      	cmp	r4, #25
  40c620:	d800      	bhi.n	40c624 <_strtod_r+0x86c>
  40c622:	3320      	adds	r3, #32
  40c624:	4293      	cmp	r3, r2
  40c626:	f47f ac33 	bne.w	40be90 <_strtod_r+0xd8>
  40c62a:	f810 2b01 	ldrb.w	r2, [r0], #1
  40c62e:	2a00      	cmp	r2, #0
  40c630:	d1f1      	bne.n	40c616 <_strtod_r+0x85e>
  40c632:	1c4b      	adds	r3, r1, #1
  40c634:	9319      	str	r3, [sp, #100]	; 0x64
  40c636:	784b      	ldrb	r3, [r1, #1]
  40c638:	2b28      	cmp	r3, #40	; 0x28
  40c63a:	f000 82de 	beq.w	40cbfa <_strtod_r+0xe42>
  40c63e:	4b46      	ldr	r3, [pc, #280]	; (40c758 <_strtod_r+0x9a0>)
  40c640:	9303      	str	r3, [sp, #12]
  40c642:	2300      	movs	r3, #0
  40c644:	9302      	str	r3, [sp, #8]
  40c646:	e4a0      	b.n	40bf8a <_strtod_r+0x1d2>
  40c648:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c64a:	4844      	ldr	r0, [pc, #272]	; (40c75c <_strtod_r+0x9a4>)
  40c64c:	e009      	b.n	40c662 <_strtod_r+0x8aa>
  40c64e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c652:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c656:	2c19      	cmp	r4, #25
  40c658:	d800      	bhi.n	40c65c <_strtod_r+0x8a4>
  40c65a:	3320      	adds	r3, #32
  40c65c:	428b      	cmp	r3, r1
  40c65e:	f47f ac17 	bne.w	40be90 <_strtod_r+0xd8>
  40c662:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c666:	2900      	cmp	r1, #0
  40c668:	d1f1      	bne.n	40c64e <_strtod_r+0x896>
  40c66a:	9219      	str	r2, [sp, #100]	; 0x64
  40c66c:	4615      	mov	r5, r2
  40c66e:	483c      	ldr	r0, [pc, #240]	; (40c760 <_strtod_r+0x9a8>)
  40c670:	e009      	b.n	40c686 <_strtod_r+0x8ce>
  40c672:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c676:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c67a:	2c19      	cmp	r4, #25
  40c67c:	d800      	bhi.n	40c680 <_strtod_r+0x8c8>
  40c67e:	3320      	adds	r3, #32
  40c680:	428b      	cmp	r3, r1
  40c682:	f040 8297 	bne.w	40cbb4 <_strtod_r+0xdfc>
  40c686:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c68a:	2900      	cmp	r1, #0
  40c68c:	d1f1      	bne.n	40c672 <_strtod_r+0x8ba>
  40c68e:	3201      	adds	r2, #1
  40c690:	9219      	str	r2, [sp, #100]	; 0x64
  40c692:	4b34      	ldr	r3, [pc, #208]	; (40c764 <_strtod_r+0x9ac>)
  40c694:	9303      	str	r3, [sp, #12]
  40c696:	2300      	movs	r3, #0
  40c698:	9302      	str	r3, [sp, #8]
  40c69a:	e476      	b.n	40bf8a <_strtod_r+0x1d2>
  40c69c:	9719      	str	r7, [sp, #100]	; 0x64
  40c69e:	2300      	movs	r3, #0
  40c6a0:	f1b9 0f00 	cmp.w	r9, #0
  40c6a4:	f47f ac41 	bne.w	40bf2a <_strtod_r+0x172>
  40c6a8:	e476      	b.n	40bf98 <_strtod_r+0x1e0>
  40c6aa:	f04f 0800 	mov.w	r8, #0
  40c6ae:	e73d      	b.n	40c52c <_strtod_r+0x774>
  40c6b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c6b2:	3301      	adds	r3, #1
  40c6b4:	f040 8086 	bne.w	40c7c4 <_strtod_r+0xa0c>
  40c6b8:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c6ba:	4b2a      	ldr	r3, [pc, #168]	; (40c764 <_strtod_r+0x9ac>)
  40c6bc:	2200      	movs	r2, #0
  40c6be:	9303      	str	r3, [sp, #12]
  40c6c0:	2322      	movs	r3, #34	; 0x22
  40c6c2:	9202      	str	r2, [sp, #8]
  40c6c4:	f8ca 3000 	str.w	r3, [sl]
  40c6c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40c6cc:	4601      	mov	r1, r0
  40c6ce:	4650      	mov	r0, sl
  40c6d0:	f004 fefc 	bl	4114cc <_Bfree>
  40c6d4:	4650      	mov	r0, sl
  40c6d6:	4631      	mov	r1, r6
  40c6d8:	f004 fef8 	bl	4114cc <_Bfree>
  40c6dc:	4650      	mov	r0, sl
  40c6de:	4659      	mov	r1, fp
  40c6e0:	f004 fef4 	bl	4114cc <_Bfree>
  40c6e4:	4650      	mov	r0, sl
  40c6e6:	9911      	ldr	r1, [sp, #68]	; 0x44
  40c6e8:	f004 fef0 	bl	4114cc <_Bfree>
  40c6ec:	4650      	mov	r0, sl
  40c6ee:	4639      	mov	r1, r7
  40c6f0:	f004 feec 	bl	4114cc <_Bfree>
  40c6f4:	e44b      	b.n	40bf8e <_strtod_r+0x1d6>
  40c6f6:	9a05      	ldr	r2, [sp, #20]
  40c6f8:	ab1a      	add	r3, sp, #104	; 0x68
  40c6fa:	4650      	mov	r0, sl
  40c6fc:	a919      	add	r1, sp, #100	; 0x64
  40c6fe:	9201      	str	r2, [sp, #4]
  40c700:	9300      	str	r3, [sp, #0]
  40c702:	ab1b      	add	r3, sp, #108	; 0x6c
  40c704:	4a18      	ldr	r2, [pc, #96]	; (40c768 <_strtod_r+0x9b0>)
  40c706:	f004 fa43 	bl	410b90 <__gethex>
  40c70a:	f010 0607 	ands.w	r6, r0, #7
  40c70e:	4605      	mov	r5, r0
  40c710:	f43f ad01 	beq.w	40c116 <_strtod_r+0x35e>
  40c714:	2e06      	cmp	r6, #6
  40c716:	f040 8156 	bne.w	40c9c6 <_strtod_r+0xc0e>
  40c71a:	3401      	adds	r4, #1
  40c71c:	2300      	movs	r3, #0
  40c71e:	f04f 0800 	mov.w	r8, #0
  40c722:	f04f 0900 	mov.w	r9, #0
  40c726:	9305      	str	r3, [sp, #20]
  40c728:	9419      	str	r4, [sp, #100]	; 0x64
  40c72a:	e430      	b.n	40bf8e <_strtod_r+0x1d6>
  40c72c:	f3af 8000 	nop.w
  40c730:	00000000 	.word	0x00000000
  40c734:	3ff00000 	.word	0x3ff00000
  40c738:	fffffbe3 	.word	0xfffffbe3
  40c73c:	3ff00000 	.word	0x3ff00000
  40c740:	3fe00000 	.word	0x3fe00000
  40c744:	00413e78 	.word	0x00413e78
  40c748:	7ca00000 	.word	0x7ca00000
  40c74c:	7fefffff 	.word	0x7fefffff
  40c750:	bff00000 	.word	0xbff00000
  40c754:	00413bb8 	.word	0x00413bb8
  40c758:	fff80000 	.word	0xfff80000
  40c75c:	00413bac 	.word	0x00413bac
  40c760:	00413bb0 	.word	0x00413bb0
  40c764:	7ff00000 	.word	0x7ff00000
  40c768:	00413bbc 	.word	0x00413bbc
  40c76c:	00413f50 	.word	0x00413f50
  40c770:	f1ac 7354 	sub.w	r3, ip, #55574528	; 0x3500000
  40c774:	9303      	str	r3, [sp, #12]
  40c776:	ed9d 7b02 	vldr	d7, [sp, #8]
  40c77a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40c77e:	eeb0 0a47 	vmov.f32	s0, s14
  40c782:	eef0 0a67 	vmov.f32	s1, s15
  40c786:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  40c78a:	f005 f975 	bl	411a78 <__ulp>
  40c78e:	4620      	mov	r0, r4
  40c790:	4629      	mov	r1, r5
  40c792:	ec53 2b10 	vmov	r2, r3, d0
  40c796:	f7fe f9e5 	bl	40ab64 <__aeabi_dmul>
  40c79a:	4602      	mov	r2, r0
  40c79c:	460b      	mov	r3, r1
  40c79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c7a2:	f7fe f82d 	bl	40a800 <__adddf3>
  40c7a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40c7aa:	4aab      	ldr	r2, [pc, #684]	; (40ca58 <_strtod_r+0xca0>)
  40c7ac:	0d1b      	lsrs	r3, r3, #20
  40c7ae:	051b      	lsls	r3, r3, #20
  40c7b0:	4293      	cmp	r3, r2
  40c7b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c7b6:	f240 80ad 	bls.w	40c914 <_strtod_r+0xb5c>
  40c7ba:	4ba8      	ldr	r3, [pc, #672]	; (40ca5c <_strtod_r+0xca4>)
  40c7bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c7be:	429a      	cmp	r2, r3
  40c7c0:	f43f af76 	beq.w	40c6b0 <_strtod_r+0x8f8>
  40c7c4:	4ba5      	ldr	r3, [pc, #660]	; (40ca5c <_strtod_r+0xca4>)
  40c7c6:	9303      	str	r3, [sp, #12]
  40c7c8:	f04f 33ff 	mov.w	r3, #4294967295
  40c7cc:	9302      	str	r3, [sp, #8]
  40c7ce:	e621      	b.n	40c414 <_strtod_r+0x65c>
  40c7d0:	4ba3      	ldr	r3, [pc, #652]	; (40ca60 <_strtod_r+0xca8>)
  40c7d2:	2200      	movs	r2, #0
  40c7d4:	9303      	str	r3, [sp, #12]
  40c7d6:	2322      	movs	r3, #34	; 0x22
  40c7d8:	9202      	str	r2, [sp, #8]
  40c7da:	f8ca 3000 	str.w	r3, [sl]
  40c7de:	f7ff bbd4 	b.w	40bf8a <_strtod_r+0x1d2>
  40c7e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c7e6:	f7fe fc57 	bl	40b098 <__aeabi_d2iz>
  40c7ea:	f7fe f955 	bl	40aa98 <__aeabi_i2d>
  40c7ee:	460b      	mov	r3, r1
  40c7f0:	4602      	mov	r2, r0
  40c7f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40c7f6:	f7fe f801 	bl	40a7fc <__aeabi_dsub>
  40c7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c7fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40c800:	b983      	cbnz	r3, 40c824 <_strtod_r+0xa6c>
  40c802:	9b02      	ldr	r3, [sp, #8]
  40c804:	b973      	cbnz	r3, 40c824 <_strtod_r+0xa6c>
  40c806:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c80a:	b95c      	cbnz	r4, 40c824 <_strtod_r+0xa6c>
  40c80c:	a38c      	add	r3, pc, #560	; (adr r3, 40ca40 <_strtod_r+0xc88>)
  40c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c812:	f7fe fc19 	bl	40b048 <__aeabi_dcmplt>
  40c816:	2800      	cmp	r0, #0
  40c818:	f43f adfc 	beq.w	40c414 <_strtod_r+0x65c>
  40c81c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40c820:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c822:	e753      	b.n	40c6cc <_strtod_r+0x914>
  40c824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c828:	a387      	add	r3, pc, #540	; (adr r3, 40ca48 <_strtod_r+0xc90>)
  40c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c82e:	f7fe fc0b 	bl	40b048 <__aeabi_dcmplt>
  40c832:	2800      	cmp	r0, #0
  40c834:	d1f2      	bne.n	40c81c <_strtod_r+0xa64>
  40c836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40c83a:	a385      	add	r3, pc, #532	; (adr r3, 40ca50 <_strtod_r+0xc98>)
  40c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c840:	f7fe fc20 	bl	40b084 <__aeabi_dcmpgt>
  40c844:	2800      	cmp	r0, #0
  40c846:	f43f ade5 	beq.w	40c414 <_strtod_r+0x65c>
  40c84a:	e7e7      	b.n	40c81c <_strtod_r+0xa64>
  40c84c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
  40c850:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  40c854:	e5bd      	b.n	40c3d2 <_strtod_r+0x61a>
  40c856:	f43f aca7 	beq.w	40c1a8 <_strtod_r+0x3f0>
  40c85a:	f1c8 0600 	rsb	r6, r8, #0
  40c85e:	f016 020f 	ands.w	r2, r6, #15
  40c862:	d00a      	beq.n	40c87a <_strtod_r+0xac2>
  40c864:	4b7f      	ldr	r3, [pc, #508]	; (40ca64 <_strtod_r+0xcac>)
  40c866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c872:	f7fe faa1 	bl	40adb8 <__aeabi_ddiv>
  40c876:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40c87a:	1136      	asrs	r6, r6, #4
  40c87c:	f43f ac94 	beq.w	40c1a8 <_strtod_r+0x3f0>
  40c880:	2e1f      	cmp	r6, #31
  40c882:	dc3e      	bgt.n	40c902 <_strtod_r+0xb4a>
  40c884:	f016 0310 	ands.w	r3, r6, #16
  40c888:	f000 81b1 	beq.w	40cbee <_strtod_r+0xe36>
  40c88c:	236a      	movs	r3, #106	; 0x6a
  40c88e:	2e00      	cmp	r6, #0
  40c890:	bfd8      	it	le
  40c892:	9308      	strle	r3, [sp, #32]
  40c894:	dd18      	ble.n	40c8c8 <_strtod_r+0xb10>
  40c896:	9308      	str	r3, [sp, #32]
  40c898:	4f73      	ldr	r7, [pc, #460]	; (40ca68 <_strtod_r+0xcb0>)
  40c89a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c89e:	f016 0f01 	tst.w	r6, #1
  40c8a2:	4610      	mov	r0, r2
  40c8a4:	ea4f 0666 	mov.w	r6, r6, asr #1
  40c8a8:	4619      	mov	r1, r3
  40c8aa:	d005      	beq.n	40c8b8 <_strtod_r+0xb00>
  40c8ac:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c8b0:	f7fe f958 	bl	40ab64 <__aeabi_dmul>
  40c8b4:	4602      	mov	r2, r0
  40c8b6:	460b      	mov	r3, r1
  40c8b8:	2e00      	cmp	r6, #0
  40c8ba:	f107 0708 	add.w	r7, r7, #8
  40c8be:	dcee      	bgt.n	40c89e <_strtod_r+0xae6>
  40c8c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40c8c4:	9b08      	ldr	r3, [sp, #32]
  40c8c6:	b19b      	cbz	r3, 40c8f0 <_strtod_r+0xb38>
  40c8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c8cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40c8d0:	460a      	mov	r2, r1
  40c8d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40c8d6:	2b00      	cmp	r3, #0
  40c8d8:	dd0a      	ble.n	40c8f0 <_strtod_r+0xb38>
  40c8da:	2b1f      	cmp	r3, #31
  40c8dc:	f340 81e0 	ble.w	40cca0 <_strtod_r+0xee8>
  40c8e0:	2100      	movs	r1, #0
  40c8e2:	2b34      	cmp	r3, #52	; 0x34
  40c8e4:	9102      	str	r1, [sp, #8]
  40c8e6:	f340 81e3 	ble.w	40ccb0 <_strtod_r+0xef8>
  40c8ea:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40c8ee:	9303      	str	r3, [sp, #12]
  40c8f0:	2200      	movs	r2, #0
  40c8f2:	2300      	movs	r3, #0
  40c8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40c8f8:	f7fe fb9c 	bl	40b034 <__aeabi_dcmpeq>
  40c8fc:	2800      	cmp	r0, #0
  40c8fe:	f43f ac55 	beq.w	40c1ac <_strtod_r+0x3f4>
  40c902:	2322      	movs	r3, #34	; 0x22
  40c904:	f04f 0800 	mov.w	r8, #0
  40c908:	f04f 0900 	mov.w	r9, #0
  40c90c:	f8ca 3000 	str.w	r3, [sl]
  40c910:	f7ff bb3d 	b.w	40bf8e <_strtod_r+0x1d6>
  40c914:	9b03      	ldr	r3, [sp, #12]
  40c916:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
  40c91a:	9403      	str	r4, [sp, #12]
  40c91c:	e572      	b.n	40c404 <_strtod_r+0x64c>
  40c91e:	f644 631f 	movw	r3, #19999	; 0x4e1f
  40c922:	f7ff bbef 	b.w	40c104 <_strtod_r+0x34c>
  40c926:	2b01      	cmp	r3, #1
  40c928:	449c      	add	ip, r3
  40c92a:	d014      	beq.n	40c956 <_strtod_r+0xb9e>
  40c92c:	4448      	add	r0, r9
  40c92e:	e002      	b.n	40c936 <_strtod_r+0xb7e>
  40c930:	004d      	lsls	r5, r1, #1
  40c932:	4581      	cmp	r9, r0
  40c934:	d010      	beq.n	40c958 <_strtod_r+0xba0>
  40c936:	f109 0901 	add.w	r9, r9, #1
  40c93a:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40c93e:	f109 33ff 	add.w	r3, r9, #4294967295
  40c942:	2b08      	cmp	r3, #8
  40c944:	ddf4      	ble.n	40c930 <_strtod_r+0xb78>
  40c946:	f1b9 0f10 	cmp.w	r9, #16
  40c94a:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
  40c94e:	dcf0      	bgt.n	40c932 <_strtod_r+0xb7a>
  40c950:	ea4f 0b43 	mov.w	fp, r3, lsl #1
  40c954:	e7ed      	b.n	40c932 <_strtod_r+0xb7a>
  40c956:	4648      	mov	r0, r9
  40c958:	2808      	cmp	r0, #8
  40c95a:	f100 0901 	add.w	r9, r0, #1
  40c95e:	f300 8096 	bgt.w	40ca8e <_strtod_r+0xcd6>
  40c962:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c964:	f7ff bbfe 	b.w	40c164 <_strtod_r+0x3ac>
  40c968:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
  40c96c:	9a06      	ldr	r2, [sp, #24]
  40c96e:	429a      	cmp	r2, r3
  40c970:	f73f ac00 	bgt.w	40c174 <_strtod_r+0x3bc>
  40c974:	f1c9 090f 	rsb	r9, r9, #15
  40c978:	4c3a      	ldr	r4, [pc, #232]	; (40ca64 <_strtod_r+0xcac>)
  40c97a:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
  40c97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c982:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c986:	f7fe f8ed 	bl	40ab64 <__aeabi_dmul>
  40c98a:	9b06      	ldr	r3, [sp, #24]
  40c98c:	ebc9 0903 	rsb	r9, r9, r3
  40c990:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
  40c994:	e9d4 2300 	ldrd	r2, r3, [r4]
  40c998:	f7fe f8e4 	bl	40ab64 <__aeabi_dmul>
  40c99c:	4680      	mov	r8, r0
  40c99e:	4689      	mov	r9, r1
  40c9a0:	f7ff baf5 	b.w	40bf8e <_strtod_r+0x1d6>
  40c9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c9a8:	469c      	mov	ip, r3
  40c9aa:	2b00      	cmp	r3, #0
  40c9ac:	f47f ae1e 	bne.w	40c5ec <_strtod_r+0x834>
  40c9b0:	463c      	mov	r4, r7
  40c9b2:	2322      	movs	r3, #34	; 0x22
  40c9b4:	4627      	mov	r7, r4
  40c9b6:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c9b8:	f04f 0800 	mov.w	r8, #0
  40c9bc:	f8ca 3000 	str.w	r3, [sl]
  40c9c0:	f04f 0900 	mov.w	r9, #0
  40c9c4:	e682      	b.n	40c6cc <_strtod_r+0x914>
  40c9c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c9c8:	b13a      	cbz	r2, 40c9da <_strtod_r+0xc22>
  40c9ca:	a81c      	add	r0, sp, #112	; 0x70
  40c9cc:	2135      	movs	r1, #53	; 0x35
  40c9ce:	f005 f973 	bl	411cb8 <__copybits>
  40c9d2:	4650      	mov	r0, sl
  40c9d4:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c9d6:	f004 fd79 	bl	4114cc <_Bfree>
  40c9da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c9dc:	2e06      	cmp	r6, #6
  40c9de:	d80b      	bhi.n	40c9f8 <_strtod_r+0xc40>
  40c9e0:	e8df f006 	tbb	[pc, r6]
  40c9e4:	13181d28 	.word	0x13181d28
  40c9e8:	1d04      	.short	0x1d04
  40c9ea:	28          	.byte	0x28
  40c9eb:	00          	.byte	0x00
  40c9ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c9f0:	9303      	str	r3, [sp, #12]
  40c9f2:	f04f 33ff 	mov.w	r3, #4294967295
  40c9f6:	9302      	str	r3, [sp, #8]
  40c9f8:	072b      	lsls	r3, r5, #28
  40c9fa:	f57f aac6 	bpl.w	40bf8a <_strtod_r+0x1d2>
  40c9fe:	9b03      	ldr	r3, [sp, #12]
  40ca00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ca04:	9303      	str	r3, [sp, #12]
  40ca06:	f7ff bac0 	b.w	40bf8a <_strtod_r+0x1d2>
  40ca0a:	4b15      	ldr	r3, [pc, #84]	; (40ca60 <_strtod_r+0xca8>)
  40ca0c:	9303      	str	r3, [sp, #12]
  40ca0e:	2300      	movs	r3, #0
  40ca10:	9302      	str	r3, [sp, #8]
  40ca12:	e7f1      	b.n	40c9f8 <_strtod_r+0xc40>
  40ca14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40ca16:	9302      	str	r3, [sp, #8]
  40ca18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ca1a:	9303      	str	r3, [sp, #12]
  40ca1c:	e7ec      	b.n	40c9f8 <_strtod_r+0xc40>
  40ca1e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40ca20:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40ca24:	991c      	ldr	r1, [sp, #112]	; 0x70
  40ca26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40ca2a:	9102      	str	r1, [sp, #8]
  40ca2c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  40ca30:	9303      	str	r3, [sp, #12]
  40ca32:	e7e1      	b.n	40c9f8 <_strtod_r+0xc40>
  40ca34:	2300      	movs	r3, #0
  40ca36:	9303      	str	r3, [sp, #12]
  40ca38:	9302      	str	r3, [sp, #8]
  40ca3a:	e7dd      	b.n	40c9f8 <_strtod_r+0xc40>
  40ca3c:	f3af 8000 	nop.w
  40ca40:	94a03595 	.word	0x94a03595
  40ca44:	3fcfffff 	.word	0x3fcfffff
  40ca48:	94a03595 	.word	0x94a03595
  40ca4c:	3fdfffff 	.word	0x3fdfffff
  40ca50:	35afe535 	.word	0x35afe535
  40ca54:	3fe00000 	.word	0x3fe00000
  40ca58:	7c9fffff 	.word	0x7c9fffff
  40ca5c:	7fefffff 	.word	0x7fefffff
  40ca60:	7ff00000 	.word	0x7ff00000
  40ca64:	00413e78 	.word	0x00413e78
  40ca68:	00413b70 	.word	0x00413b70
  40ca6c:	3316      	adds	r3, #22
  40ca6e:	f6ff ab81 	blt.w	40c174 <_strtod_r+0x3bc>
  40ca72:	9a06      	ldr	r2, [sp, #24]
  40ca74:	4b96      	ldr	r3, [pc, #600]	; (40ccd0 <_strtod_r+0xf18>)
  40ca76:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
  40ca7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ca82:	f7fe f999 	bl	40adb8 <__aeabi_ddiv>
  40ca86:	4680      	mov	r8, r0
  40ca88:	4689      	mov	r9, r1
  40ca8a:	f7ff ba80 	b.w	40bf8e <_strtod_r+0x1d6>
  40ca8e:	f1b9 0f10 	cmp.w	r9, #16
  40ca92:	f340 8088 	ble.w	40cba6 <_strtod_r+0xdee>
  40ca96:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40ca98:	2000      	movs	r0, #0
  40ca9a:	e541      	b.n	40c520 <_strtod_r+0x768>
  40ca9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ca9e:	463c      	mov	r4, r7
  40caa0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40caa4:	bb8b      	cbnz	r3, 40cb0a <_strtod_r+0xd52>
  40caa6:	9b02      	ldr	r3, [sp, #8]
  40caa8:	bb7b      	cbnz	r3, 40cb0a <_strtod_r+0xd52>
  40caaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40caae:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40cab2:	460d      	mov	r5, r1
  40cab4:	bb4b      	cbnz	r3, 40cb0a <_strtod_r+0xd52>
  40cab6:	9b03      	ldr	r3, [sp, #12]
  40cab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40cabc:	0d1b      	lsrs	r3, r3, #20
  40cabe:	051b      	lsls	r3, r3, #20
  40cac0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40cac4:	d921      	bls.n	40cb0a <_strtod_r+0xd52>
  40cac6:	697b      	ldr	r3, [r7, #20]
  40cac8:	b913      	cbnz	r3, 40cad0 <_strtod_r+0xd18>
  40caca:	693b      	ldr	r3, [r7, #16]
  40cacc:	2b01      	cmp	r3, #1
  40cace:	dd1c      	ble.n	40cb0a <_strtod_r+0xd52>
  40cad0:	4639      	mov	r1, r7
  40cad2:	2201      	movs	r2, #1
  40cad4:	4650      	mov	r0, sl
  40cad6:	f004 fedf 	bl	411898 <__lshift>
  40cada:	4659      	mov	r1, fp
  40cadc:	4604      	mov	r4, r0
  40cade:	f004 ff35 	bl	41194c <__mcmp>
  40cae2:	2800      	cmp	r0, #0
  40cae4:	dd11      	ble.n	40cb0a <_strtod_r+0xd52>
  40cae6:	9b08      	ldr	r3, [sp, #32]
  40cae8:	2b00      	cmp	r3, #0
  40caea:	f040 80ce 	bne.w	40cc8a <_strtod_r+0xed2>
  40caee:	4b79      	ldr	r3, [pc, #484]	; (40ccd4 <_strtod_r+0xf1c>)
  40caf0:	402b      	ands	r3, r5
  40caf2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  40caf6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  40cafa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  40cafe:	9303      	str	r3, [sp, #12]
  40cb00:	f04f 33ff 	mov.w	r3, #4294967295
  40cb04:	9302      	str	r3, [sp, #8]
  40cb06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40cb0a:	9b08      	ldr	r3, [sp, #32]
  40cb0c:	b1b3      	cbz	r3, 40cb3c <_strtod_r+0xd84>
  40cb0e:	4b72      	ldr	r3, [pc, #456]	; (40ccd8 <_strtod_r+0xf20>)
  40cb10:	4640      	mov	r0, r8
  40cb12:	4649      	mov	r1, r9
  40cb14:	9315      	str	r3, [sp, #84]	; 0x54
  40cb16:	2300      	movs	r3, #0
  40cb18:	9314      	str	r3, [sp, #80]	; 0x50
  40cb1a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40cb1e:	f7fe f821 	bl	40ab64 <__aeabi_dmul>
  40cb22:	4602      	mov	r2, r0
  40cb24:	460b      	mov	r3, r1
  40cb26:	4680      	mov	r8, r0
  40cb28:	4689      	mov	r9, r1
  40cb2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40cb2e:	b929      	cbnz	r1, 40cb3c <_strtod_r+0xd84>
  40cb30:	9b02      	ldr	r3, [sp, #8]
  40cb32:	4627      	mov	r7, r4
  40cb34:	2b00      	cmp	r3, #0
  40cb36:	d050      	beq.n	40cbda <_strtod_r+0xe22>
  40cb38:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cb3a:	e5c7      	b.n	40c6cc <_strtod_r+0x914>
  40cb3c:	4627      	mov	r7, r4
  40cb3e:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cb40:	e5c4      	b.n	40c6cc <_strtod_r+0x914>
  40cb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cb44:	463c      	mov	r4, r7
  40cb46:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  40cb4a:	2b00      	cmp	r3, #0
  40cb4c:	d035      	beq.n	40cbba <_strtod_r+0xe02>
  40cb4e:	9b03      	ldr	r3, [sp, #12]
  40cb50:	9a03      	ldr	r2, [sp, #12]
  40cb52:	f3c3 0113 	ubfx	r1, r3, #0, #20
  40cb56:	4b61      	ldr	r3, [pc, #388]	; (40ccdc <_strtod_r+0xf24>)
  40cb58:	4299      	cmp	r1, r3
  40cb5a:	d060      	beq.n	40cc1e <_strtod_r+0xe66>
  40cb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cb5e:	2b00      	cmp	r3, #0
  40cb60:	d036      	beq.n	40cbd0 <_strtod_r+0xe18>
  40cb62:	9a03      	ldr	r2, [sp, #12]
  40cb64:	4213      	tst	r3, r2
  40cb66:	d0d0      	beq.n	40cb0a <_strtod_r+0xd52>
  40cb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cb6a:	9a08      	ldr	r2, [sp, #32]
  40cb6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cb70:	2b00      	cmp	r3, #0
  40cb72:	d078      	beq.n	40cc66 <_strtod_r+0xeae>
  40cb74:	f7ff f900 	bl	40bd78 <sulp>
  40cb78:	4602      	mov	r2, r0
  40cb7a:	460b      	mov	r3, r1
  40cb7c:	4640      	mov	r0, r8
  40cb7e:	4649      	mov	r1, r9
  40cb80:	f7fd fe3e 	bl	40a800 <__adddf3>
  40cb84:	4680      	mov	r8, r0
  40cb86:	4689      	mov	r9, r1
  40cb88:	e7bf      	b.n	40cb0a <_strtod_r+0xd52>
  40cb8a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 40ccc0 <_strtod_r+0xf08>
  40cb8e:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  40cb92:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 40ccc8 <_strtod_r+0xf10>
  40cb96:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  40cb9a:	e4b0      	b.n	40c4fe <_strtod_r+0x746>
  40cb9c:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  40cba0:	9303      	str	r3, [sp, #12]
  40cba2:	f7ff bb01 	b.w	40c1a8 <_strtod_r+0x3f0>
  40cba6:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
  40cbaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cbac:	2000      	movs	r0, #0
  40cbae:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
  40cbb2:	e4b5      	b.n	40c520 <_strtod_r+0x768>
  40cbb4:	1c6b      	adds	r3, r5, #1
  40cbb6:	9319      	str	r3, [sp, #100]	; 0x64
  40cbb8:	e56b      	b.n	40c692 <_strtod_r+0x8da>
  40cbba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40cbbe:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40cbc2:	460d      	mov	r5, r1
  40cbc4:	2b00      	cmp	r3, #0
  40cbc6:	d1c9      	bne.n	40cb5c <_strtod_r+0xda4>
  40cbc8:	9b02      	ldr	r3, [sp, #8]
  40cbca:	2b00      	cmp	r3, #0
  40cbcc:	d1c6      	bne.n	40cb5c <_strtod_r+0xda4>
  40cbce:	e78a      	b.n	40cae6 <_strtod_r+0xd2e>
  40cbd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cbd2:	9a02      	ldr	r2, [sp, #8]
  40cbd4:	4213      	tst	r3, r2
  40cbd6:	d098      	beq.n	40cb0a <_strtod_r+0xd52>
  40cbd8:	e7c6      	b.n	40cb68 <_strtod_r+0xdb0>
  40cbda:	2322      	movs	r3, #34	; 0x22
  40cbdc:	981a      	ldr	r0, [sp, #104]	; 0x68
  40cbde:	f8ca 3000 	str.w	r3, [sl]
  40cbe2:	e573      	b.n	40c6cc <_strtod_r+0x914>
  40cbe4:	f04f 0b00 	mov.w	fp, #0
  40cbe8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 40cce8 <_strtod_r+0xf30>
  40cbec:	e4d7      	b.n	40c59e <_strtod_r+0x7e6>
  40cbee:	2e00      	cmp	r6, #0
  40cbf0:	bfd8      	it	le
  40cbf2:	9308      	strle	r3, [sp, #32]
  40cbf4:	f73f ae4f 	bgt.w	40c896 <_strtod_r+0xade>
  40cbf8:	e67a      	b.n	40c8f0 <_strtod_r+0xb38>
  40cbfa:	a819      	add	r0, sp, #100	; 0x64
  40cbfc:	4938      	ldr	r1, [pc, #224]	; (40cce0 <_strtod_r+0xf28>)
  40cbfe:	aa1c      	add	r2, sp, #112	; 0x70
  40cc00:	f004 fa52 	bl	4110a8 <__hexnan>
  40cc04:	2805      	cmp	r0, #5
  40cc06:	f47f ad1a 	bne.w	40c63e <_strtod_r+0x886>
  40cc0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40cc0c:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40cc10:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40cc14:	9303      	str	r3, [sp, #12]
  40cc16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40cc18:	9302      	str	r3, [sp, #8]
  40cc1a:	f7ff b9b6 	b.w	40bf8a <_strtod_r+0x1d2>
  40cc1e:	9b08      	ldr	r3, [sp, #32]
  40cc20:	9902      	ldr	r1, [sp, #8]
  40cc22:	b1eb      	cbz	r3, 40cc60 <_strtod_r+0xea8>
  40cc24:	4b2b      	ldr	r3, [pc, #172]	; (40ccd4 <_strtod_r+0xf1c>)
  40cc26:	4013      	ands	r3, r2
  40cc28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40cc2c:	d818      	bhi.n	40cc60 <_strtod_r+0xea8>
  40cc2e:	0d1b      	lsrs	r3, r3, #20
  40cc30:	f04f 30ff 	mov.w	r0, #4294967295
  40cc34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40cc38:	fa00 f303 	lsl.w	r3, r0, r3
  40cc3c:	4299      	cmp	r1, r3
  40cc3e:	d18d      	bne.n	40cb5c <_strtod_r+0xda4>
  40cc40:	4b28      	ldr	r3, [pc, #160]	; (40cce4 <_strtod_r+0xf2c>)
  40cc42:	429a      	cmp	r2, r3
  40cc44:	d102      	bne.n	40cc4c <_strtod_r+0xe94>
  40cc46:	3101      	adds	r1, #1
  40cc48:	f43f ad36 	beq.w	40c6b8 <_strtod_r+0x900>
  40cc4c:	4b21      	ldr	r3, [pc, #132]	; (40ccd4 <_strtod_r+0xf1c>)
  40cc4e:	4013      	ands	r3, r2
  40cc50:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40cc54:	9303      	str	r3, [sp, #12]
  40cc56:	2300      	movs	r3, #0
  40cc58:	9302      	str	r3, [sp, #8]
  40cc5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40cc5e:	e754      	b.n	40cb0a <_strtod_r+0xd52>
  40cc60:	f04f 33ff 	mov.w	r3, #4294967295
  40cc64:	e7ea      	b.n	40cc3c <_strtod_r+0xe84>
  40cc66:	f7ff f887 	bl	40bd78 <sulp>
  40cc6a:	4602      	mov	r2, r0
  40cc6c:	460b      	mov	r3, r1
  40cc6e:	4640      	mov	r0, r8
  40cc70:	4649      	mov	r1, r9
  40cc72:	f7fd fdc3 	bl	40a7fc <__aeabi_dsub>
  40cc76:	2200      	movs	r2, #0
  40cc78:	2300      	movs	r3, #0
  40cc7a:	4680      	mov	r8, r0
  40cc7c:	4689      	mov	r9, r1
  40cc7e:	f7fe f9d9 	bl	40b034 <__aeabi_dcmpeq>
  40cc82:	2800      	cmp	r0, #0
  40cc84:	f47f ae95 	bne.w	40c9b2 <_strtod_r+0xbfa>
  40cc88:	e73f      	b.n	40cb0a <_strtod_r+0xd52>
  40cc8a:	4b12      	ldr	r3, [pc, #72]	; (40ccd4 <_strtod_r+0xf1c>)
  40cc8c:	402b      	ands	r3, r5
  40cc8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40cc92:	f73f af2e 	bgt.w	40caf2 <_strtod_r+0xd3a>
  40cc96:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  40cc9a:	f73f af38 	bgt.w	40cb0e <_strtod_r+0xd56>
  40cc9e:	e688      	b.n	40c9b2 <_strtod_r+0xbfa>
  40cca0:	f04f 32ff 	mov.w	r2, #4294967295
  40cca4:	fa02 f303 	lsl.w	r3, r2, r3
  40cca8:	9a02      	ldr	r2, [sp, #8]
  40ccaa:	401a      	ands	r2, r3
  40ccac:	9202      	str	r2, [sp, #8]
  40ccae:	e61f      	b.n	40c8f0 <_strtod_r+0xb38>
  40ccb0:	3b20      	subs	r3, #32
  40ccb2:	f04f 31ff 	mov.w	r1, #4294967295
  40ccb6:	fa01 f303 	lsl.w	r3, r1, r3
  40ccba:	4013      	ands	r3, r2
  40ccbc:	9303      	str	r3, [sp, #12]
  40ccbe:	e617      	b.n	40c8f0 <_strtod_r+0xb38>
  40ccc0:	00000000 	.word	0x00000000
  40ccc4:	bfe00000 	.word	0xbfe00000
  40ccc8:	00000000 	.word	0x00000000
  40cccc:	3fe00000 	.word	0x3fe00000
  40ccd0:	00413e78 	.word	0x00413e78
  40ccd4:	7ff00000 	.word	0x7ff00000
  40ccd8:	39500000 	.word	0x39500000
  40ccdc:	000fffff 	.word	0x000fffff
  40cce0:	00413b98 	.word	0x00413b98
  40cce4:	7fefffff 	.word	0x7fefffff
  40cce8:	00413f50 	.word	0x00413f50

0040ccec <strtof>:
  40ccec:	b508      	push	{r3, lr}
  40ccee:	4b0f      	ldr	r3, [pc, #60]	; (40cd2c <strtof+0x40>)
  40ccf0:	460a      	mov	r2, r1
  40ccf2:	4601      	mov	r1, r0
  40ccf4:	6818      	ldr	r0, [r3, #0]
  40ccf6:	ed2d 8b02 	vpush	{d8}
  40ccfa:	f7ff f85d 	bl	40bdb8 <_strtod_r>
  40ccfe:	eeb0 8a40 	vmov.f32	s16, s0
  40cd02:	eef0 8a60 	vmov.f32	s17, s1
  40cd06:	f7fd fcb3 	bl	40a670 <__fpclassifyd>
  40cd0a:	b140      	cbz	r0, 40cd1e <strtof+0x32>
  40cd0c:	ec51 0b18 	vmov	r0, r1, d8
  40cd10:	f7fe f9ea 	bl	40b0e8 <__aeabi_d2f>
  40cd14:	ee00 0a10 	vmov	s0, r0
  40cd18:	ecbd 8b02 	vpop	{d8}
  40cd1c:	bd08      	pop	{r3, pc}
  40cd1e:	ecbd 8b02 	vpop	{d8}
  40cd22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40cd26:	f005 ba11 	b.w	41214c <nanf>
  40cd2a:	bf00      	nop
  40cd2c:	204004d8 	.word	0x204004d8

0040cd30 <strtok>:
  40cd30:	4a02      	ldr	r2, [pc, #8]	; (40cd3c <strtok+0xc>)
  40cd32:	2301      	movs	r3, #1
  40cd34:	6812      	ldr	r2, [r2, #0]
  40cd36:	325c      	adds	r2, #92	; 0x5c
  40cd38:	f000 b802 	b.w	40cd40 <__strtok_r>
  40cd3c:	204004d8 	.word	0x204004d8

0040cd40 <__strtok_r>:
  40cd40:	b4f0      	push	{r4, r5, r6, r7}
  40cd42:	b320      	cbz	r0, 40cd8e <__strtok_r+0x4e>
  40cd44:	4607      	mov	r7, r0
  40cd46:	460d      	mov	r5, r1
  40cd48:	f817 6b01 	ldrb.w	r6, [r7], #1
  40cd4c:	e001      	b.n	40cd52 <__strtok_r+0x12>
  40cd4e:	42a6      	cmp	r6, r4
  40cd50:	d016      	beq.n	40cd80 <__strtok_r+0x40>
  40cd52:	f815 4b01 	ldrb.w	r4, [r5], #1
  40cd56:	2c00      	cmp	r4, #0
  40cd58:	d1f9      	bne.n	40cd4e <__strtok_r+0xe>
  40cd5a:	b1ee      	cbz	r6, 40cd98 <__strtok_r+0x58>
  40cd5c:	463e      	mov	r6, r7
  40cd5e:	460c      	mov	r4, r1
  40cd60:	f816 5b01 	ldrb.w	r5, [r6], #1
  40cd64:	e000      	b.n	40cd68 <__strtok_r+0x28>
  40cd66:	b173      	cbz	r3, 40cd86 <__strtok_r+0x46>
  40cd68:	f814 3b01 	ldrb.w	r3, [r4], #1
  40cd6c:	42ab      	cmp	r3, r5
  40cd6e:	d1fa      	bne.n	40cd66 <__strtok_r+0x26>
  40cd70:	b15d      	cbz	r5, 40cd8a <__strtok_r+0x4a>
  40cd72:	2300      	movs	r3, #0
  40cd74:	703b      	strb	r3, [r7, #0]
  40cd76:	6016      	str	r6, [r2, #0]
  40cd78:	4606      	mov	r6, r0
  40cd7a:	4630      	mov	r0, r6
  40cd7c:	bcf0      	pop	{r4, r5, r6, r7}
  40cd7e:	4770      	bx	lr
  40cd80:	b163      	cbz	r3, 40cd9c <__strtok_r+0x5c>
  40cd82:	4638      	mov	r0, r7
  40cd84:	e7de      	b.n	40cd44 <__strtok_r+0x4>
  40cd86:	4637      	mov	r7, r6
  40cd88:	e7e8      	b.n	40cd5c <__strtok_r+0x1c>
  40cd8a:	462e      	mov	r6, r5
  40cd8c:	e7f3      	b.n	40cd76 <__strtok_r+0x36>
  40cd8e:	6810      	ldr	r0, [r2, #0]
  40cd90:	2800      	cmp	r0, #0
  40cd92:	d1d7      	bne.n	40cd44 <__strtok_r+0x4>
  40cd94:	4606      	mov	r6, r0
  40cd96:	e7f0      	b.n	40cd7a <__strtok_r+0x3a>
  40cd98:	6016      	str	r6, [r2, #0]
  40cd9a:	e7ee      	b.n	40cd7a <__strtok_r+0x3a>
  40cd9c:	6017      	str	r7, [r2, #0]
  40cd9e:	4606      	mov	r6, r0
  40cda0:	7003      	strb	r3, [r0, #0]
  40cda2:	e7ea      	b.n	40cd7a <__strtok_r+0x3a>

0040cda4 <_strtol_r>:
  40cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cda8:	4c44      	ldr	r4, [pc, #272]	; (40cebc <_strtol_r+0x118>)
  40cdaa:	4683      	mov	fp, r0
  40cdac:	460e      	mov	r6, r1
  40cdae:	f8d4 e000 	ldr.w	lr, [r4]
  40cdb2:	e000      	b.n	40cdb6 <_strtol_r+0x12>
  40cdb4:	4626      	mov	r6, r4
  40cdb6:	4634      	mov	r4, r6
  40cdb8:	f814 5b01 	ldrb.w	r5, [r4], #1
  40cdbc:	eb0e 0005 	add.w	r0, lr, r5
  40cdc0:	7840      	ldrb	r0, [r0, #1]
  40cdc2:	f000 0008 	and.w	r0, r0, #8
  40cdc6:	f000 09ff 	and.w	r9, r0, #255	; 0xff
  40cdca:	2800      	cmp	r0, #0
  40cdcc:	d1f2      	bne.n	40cdb4 <_strtol_r+0x10>
  40cdce:	2d2d      	cmp	r5, #45	; 0x2d
  40cdd0:	d052      	beq.n	40ce78 <_strtol_r+0xd4>
  40cdd2:	2d2b      	cmp	r5, #43	; 0x2b
  40cdd4:	d064      	beq.n	40cea0 <_strtol_r+0xfc>
  40cdd6:	f033 0010 	bics.w	r0, r3, #16
  40cdda:	d10b      	bne.n	40cdf4 <_strtol_r+0x50>
  40cddc:	fab3 f083 	clz	r0, r3
  40cde0:	2d30      	cmp	r5, #48	; 0x30
  40cde2:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40cde6:	d05e      	beq.n	40cea6 <_strtol_r+0x102>
  40cde8:	b120      	cbz	r0, 40cdf4 <_strtol_r+0x50>
  40cdea:	230a      	movs	r3, #10
  40cdec:	4618      	mov	r0, r3
  40cdee:	e002      	b.n	40cdf6 <_strtol_r+0x52>
  40cdf0:	b100      	cbz	r0, 40cdf4 <_strtol_r+0x50>
  40cdf2:	2308      	movs	r3, #8
  40cdf4:	4618      	mov	r0, r3
  40cdf6:	f1b9 0f00 	cmp.w	r9, #0
  40cdfa:	f04f 0700 	mov.w	r7, #0
  40cdfe:	bf14      	ite	ne
  40ce00:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40ce04:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  40ce08:	46bc      	mov	ip, r7
  40ce0a:	fbba f8f0 	udiv	r8, sl, r0
  40ce0e:	fb00 aa18 	mls	sl, r0, r8, sl
  40ce12:	e00e      	b.n	40ce32 <_strtol_r+0x8e>
  40ce14:	3d30      	subs	r5, #48	; 0x30
  40ce16:	42ab      	cmp	r3, r5
  40ce18:	dd1b      	ble.n	40ce52 <_strtol_r+0xae>
  40ce1a:	2f00      	cmp	r7, #0
  40ce1c:	db05      	blt.n	40ce2a <_strtol_r+0x86>
  40ce1e:	45c4      	cmp	ip, r8
  40ce20:	d803      	bhi.n	40ce2a <_strtol_r+0x86>
  40ce22:	4555      	cmp	r5, sl
  40ce24:	dd22      	ble.n	40ce6c <_strtol_r+0xc8>
  40ce26:	45c4      	cmp	ip, r8
  40ce28:	d120      	bne.n	40ce6c <_strtol_r+0xc8>
  40ce2a:	f04f 37ff 	mov.w	r7, #4294967295
  40ce2e:	f814 5b01 	ldrb.w	r5, [r4], #1
  40ce32:	eb0e 0605 	add.w	r6, lr, r5
  40ce36:	7876      	ldrb	r6, [r6, #1]
  40ce38:	f016 0f04 	tst.w	r6, #4
  40ce3c:	d1ea      	bne.n	40ce14 <_strtol_r+0x70>
  40ce3e:	f016 0603 	ands.w	r6, r6, #3
  40ce42:	d006      	beq.n	40ce52 <_strtol_r+0xae>
  40ce44:	2e01      	cmp	r6, #1
  40ce46:	bf0c      	ite	eq
  40ce48:	2637      	moveq	r6, #55	; 0x37
  40ce4a:	2657      	movne	r6, #87	; 0x57
  40ce4c:	1bad      	subs	r5, r5, r6
  40ce4e:	42ab      	cmp	r3, r5
  40ce50:	dce3      	bgt.n	40ce1a <_strtol_r+0x76>
  40ce52:	1c7b      	adds	r3, r7, #1
  40ce54:	d015      	beq.n	40ce82 <_strtol_r+0xde>
  40ce56:	f1c9 0000 	rsb	r0, r9, #0
  40ce5a:	ea8c 0000 	eor.w	r0, ip, r0
  40ce5e:	4448      	add	r0, r9
  40ce60:	b142      	cbz	r2, 40ce74 <_strtol_r+0xd0>
  40ce62:	b107      	cbz	r7, 40ce66 <_strtol_r+0xc2>
  40ce64:	1e61      	subs	r1, r4, #1
  40ce66:	6011      	str	r1, [r2, #0]
  40ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ce6c:	fb00 5c0c 	mla	ip, r0, ip, r5
  40ce70:	2701      	movs	r7, #1
  40ce72:	e7dc      	b.n	40ce2e <_strtol_r+0x8a>
  40ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ce78:	1cb4      	adds	r4, r6, #2
  40ce7a:	7875      	ldrb	r5, [r6, #1]
  40ce7c:	f04f 0901 	mov.w	r9, #1
  40ce80:	e7a9      	b.n	40cdd6 <_strtol_r+0x32>
  40ce82:	f1b9 0f00 	cmp.w	r9, #0
  40ce86:	f04f 0322 	mov.w	r3, #34	; 0x22
  40ce8a:	bf14      	ite	ne
  40ce8c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40ce90:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ce94:	f8cb 3000 	str.w	r3, [fp]
  40ce98:	2a00      	cmp	r2, #0
  40ce9a:	d1e3      	bne.n	40ce64 <_strtol_r+0xc0>
  40ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cea0:	1cb4      	adds	r4, r6, #2
  40cea2:	7875      	ldrb	r5, [r6, #1]
  40cea4:	e797      	b.n	40cdd6 <_strtol_r+0x32>
  40cea6:	7826      	ldrb	r6, [r4, #0]
  40cea8:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  40ceac:	2e58      	cmp	r6, #88	; 0x58
  40ceae:	d19f      	bne.n	40cdf0 <_strtol_r+0x4c>
  40ceb0:	2310      	movs	r3, #16
  40ceb2:	7865      	ldrb	r5, [r4, #1]
  40ceb4:	3402      	adds	r4, #2
  40ceb6:	4618      	mov	r0, r3
  40ceb8:	e79d      	b.n	40cdf6 <_strtol_r+0x52>
  40ceba:	bf00      	nop
  40cebc:	204008ec 	.word	0x204008ec

0040cec0 <strtol>:
  40cec0:	b430      	push	{r4, r5}
  40cec2:	460d      	mov	r5, r1
  40cec4:	4c03      	ldr	r4, [pc, #12]	; (40ced4 <strtol+0x14>)
  40cec6:	4613      	mov	r3, r2
  40cec8:	4601      	mov	r1, r0
  40ceca:	462a      	mov	r2, r5
  40cecc:	6820      	ldr	r0, [r4, #0]
  40cece:	bc30      	pop	{r4, r5}
  40ced0:	f7ff bf68 	b.w	40cda4 <_strtol_r>
  40ced4:	204004d8 	.word	0x204004d8

0040ced8 <_svfprintf_r>:
  40ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cedc:	b0bf      	sub	sp, #252	; 0xfc
  40cede:	4689      	mov	r9, r1
  40cee0:	9204      	str	r2, [sp, #16]
  40cee2:	9309      	str	r3, [sp, #36]	; 0x24
  40cee4:	9005      	str	r0, [sp, #20]
  40cee6:	f004 f9a9 	bl	41123c <_localeconv_r>
  40ceea:	6803      	ldr	r3, [r0, #0]
  40ceec:	4618      	mov	r0, r3
  40ceee:	9312      	str	r3, [sp, #72]	; 0x48
  40cef0:	f7fe ff14 	bl	40bd1c <strlen>
  40cef4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40cef8:	9013      	str	r0, [sp, #76]	; 0x4c
  40cefa:	061a      	lsls	r2, r3, #24
  40cefc:	d504      	bpl.n	40cf08 <_svfprintf_r+0x30>
  40cefe:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40cf02:	2b00      	cmp	r3, #0
  40cf04:	f001 806b 	beq.w	40dfde <_svfprintf_r+0x1106>
  40cf08:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
  40cf0c:	2300      	movs	r3, #0
  40cf0e:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 40d148 <_svfprintf_r+0x270>
  40cf12:	46c3      	mov	fp, r8
  40cf14:	9310      	str	r3, [sp, #64]	; 0x40
  40cf16:	9323      	str	r3, [sp, #140]	; 0x8c
  40cf18:	9311      	str	r3, [sp, #68]	; 0x44
  40cf1a:	9315      	str	r3, [sp, #84]	; 0x54
  40cf1c:	9306      	str	r3, [sp, #24]
  40cf1e:	9322      	str	r3, [sp, #136]	; 0x88
  40cf20:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
  40cf24:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40cf28:	9a04      	ldr	r2, [sp, #16]
  40cf2a:	7813      	ldrb	r3, [r2, #0]
  40cf2c:	2b25      	cmp	r3, #37	; 0x25
  40cf2e:	f000 80a5 	beq.w	40d07c <_svfprintf_r+0x1a4>
  40cf32:	b90b      	cbnz	r3, 40cf38 <_svfprintf_r+0x60>
  40cf34:	e0a2      	b.n	40d07c <_svfprintf_r+0x1a4>
  40cf36:	b11b      	cbz	r3, 40cf40 <_svfprintf_r+0x68>
  40cf38:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40cf3c:	2b25      	cmp	r3, #37	; 0x25
  40cf3e:	d1fa      	bne.n	40cf36 <_svfprintf_r+0x5e>
  40cf40:	9904      	ldr	r1, [sp, #16]
  40cf42:	4614      	mov	r4, r2
  40cf44:	1a55      	subs	r5, r2, r1
  40cf46:	d010      	beq.n	40cf6a <_svfprintf_r+0x92>
  40cf48:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40cf4a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40cf4c:	3301      	adds	r3, #1
  40cf4e:	f8cb 1000 	str.w	r1, [fp]
  40cf52:	442a      	add	r2, r5
  40cf54:	f8cb 5004 	str.w	r5, [fp, #4]
  40cf58:	2b07      	cmp	r3, #7
  40cf5a:	9322      	str	r3, [sp, #136]	; 0x88
  40cf5c:	9223      	str	r2, [sp, #140]	; 0x8c
  40cf5e:	dc72      	bgt.n	40d046 <_svfprintf_r+0x16e>
  40cf60:	f10b 0b08 	add.w	fp, fp, #8
  40cf64:	9b06      	ldr	r3, [sp, #24]
  40cf66:	442b      	add	r3, r5
  40cf68:	9306      	str	r3, [sp, #24]
  40cf6a:	7823      	ldrb	r3, [r4, #0]
  40cf6c:	2b00      	cmp	r3, #0
  40cf6e:	d072      	beq.n	40d056 <_svfprintf_r+0x17e>
  40cf70:	2300      	movs	r3, #0
  40cf72:	1c61      	adds	r1, r4, #1
  40cf74:	7866      	ldrb	r6, [r4, #1]
  40cf76:	f04f 37ff 	mov.w	r7, #4294967295
  40cf7a:	461a      	mov	r2, r3
  40cf7c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40cf80:	9308      	str	r3, [sp, #32]
  40cf82:	9302      	str	r3, [sp, #8]
  40cf84:	1c4b      	adds	r3, r1, #1
  40cf86:	f1a6 0120 	sub.w	r1, r6, #32
  40cf8a:	2958      	cmp	r1, #88	; 0x58
  40cf8c:	f200 83af 	bhi.w	40d6ee <_svfprintf_r+0x816>
  40cf90:	e8df f011 	tbh	[pc, r1, lsl #1]
  40cf94:	03ad0314 	.word	0x03ad0314
  40cf98:	031b03ad 	.word	0x031b03ad
  40cf9c:	03ad03ad 	.word	0x03ad03ad
  40cfa0:	03ad03ad 	.word	0x03ad03ad
  40cfa4:	03ad03ad 	.word	0x03ad03ad
  40cfa8:	01fa023c 	.word	0x01fa023c
  40cfac:	01e203ad 	.word	0x01e203ad
  40cfb0:	03ad01fe 	.word	0x03ad01fe
  40cfb4:	03290322 	.word	0x03290322
  40cfb8:	03290329 	.word	0x03290329
  40cfbc:	03290329 	.word	0x03290329
  40cfc0:	03290329 	.word	0x03290329
  40cfc4:	03290329 	.word	0x03290329
  40cfc8:	03ad03ad 	.word	0x03ad03ad
  40cfcc:	03ad03ad 	.word	0x03ad03ad
  40cfd0:	03ad03ad 	.word	0x03ad03ad
  40cfd4:	03ad03ad 	.word	0x03ad03ad
  40cfd8:	03ad03ad 	.word	0x03ad03ad
  40cfdc:	035f0338 	.word	0x035f0338
  40cfe0:	035f03ad 	.word	0x035f03ad
  40cfe4:	03ad03ad 	.word	0x03ad03ad
  40cfe8:	03ad03ad 	.word	0x03ad03ad
  40cfec:	03ad02fa 	.word	0x03ad02fa
  40cff0:	028e03ad 	.word	0x028e03ad
  40cff4:	03ad03ad 	.word	0x03ad03ad
  40cff8:	03ad03ad 	.word	0x03ad03ad
  40cffc:	02ae03ad 	.word	0x02ae03ad
  40d000:	03ad03ad 	.word	0x03ad03ad
  40d004:	03ad02c3 	.word	0x03ad02c3
  40d008:	03ad03ad 	.word	0x03ad03ad
  40d00c:	03ad03ad 	.word	0x03ad03ad
  40d010:	03ad03ad 	.word	0x03ad03ad
  40d014:	03ad03ad 	.word	0x03ad03ad
  40d018:	02e703ad 	.word	0x02e703ad
  40d01c:	035f0217 	.word	0x035f0217
  40d020:	035f035f 	.word	0x035f035f
  40d024:	0217024a 	.word	0x0217024a
  40d028:	03ad03ad 	.word	0x03ad03ad
  40d02c:	03ad0232 	.word	0x03ad0232
  40d030:	01e90258 	.word	0x01e90258
  40d034:	02510397 	.word	0x02510397
  40d038:	026a03ad 	.word	0x026a03ad
  40d03c:	007603ad 	.word	0x007603ad
  40d040:	03ad03ad 	.word	0x03ad03ad
  40d044:	0301      	.short	0x0301
  40d046:	9805      	ldr	r0, [sp, #20]
  40d048:	4649      	mov	r1, r9
  40d04a:	aa21      	add	r2, sp, #132	; 0x84
  40d04c:	f005 f95e 	bl	41230c <__ssprint_r>
  40d050:	b940      	cbnz	r0, 40d064 <_svfprintf_r+0x18c>
  40d052:	46c3      	mov	fp, r8
  40d054:	e786      	b.n	40cf64 <_svfprintf_r+0x8c>
  40d056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d058:	b123      	cbz	r3, 40d064 <_svfprintf_r+0x18c>
  40d05a:	9805      	ldr	r0, [sp, #20]
  40d05c:	4649      	mov	r1, r9
  40d05e:	aa21      	add	r2, sp, #132	; 0x84
  40d060:	f005 f954 	bl	41230c <__ssprint_r>
  40d064:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40d068:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d06c:	9b06      	ldr	r3, [sp, #24]
  40d06e:	bf18      	it	ne
  40d070:	f04f 33ff 	movne.w	r3, #4294967295
  40d074:	4618      	mov	r0, r3
  40d076:	b03f      	add	sp, #252	; 0xfc
  40d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d07c:	9c04      	ldr	r4, [sp, #16]
  40d07e:	e774      	b.n	40cf6a <_svfprintf_r+0x92>
  40d080:	9304      	str	r3, [sp, #16]
  40d082:	9b02      	ldr	r3, [sp, #8]
  40d084:	069c      	lsls	r4, r3, #26
  40d086:	f140 823c 	bpl.w	40d502 <_svfprintf_r+0x62a>
  40d08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d08c:	2301      	movs	r3, #1
  40d08e:	3207      	adds	r2, #7
  40d090:	f022 0207 	bic.w	r2, r2, #7
  40d094:	f102 0108 	add.w	r1, r2, #8
  40d098:	e9d2 4500 	ldrd	r4, r5, [r2]
  40d09c:	9109      	str	r1, [sp, #36]	; 0x24
  40d09e:	2200      	movs	r2, #0
  40d0a0:	970c      	str	r7, [sp, #48]	; 0x30
  40d0a2:	4694      	mov	ip, r2
  40d0a4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d0a8:	2f00      	cmp	r7, #0
  40d0aa:	db03      	blt.n	40d0b4 <_svfprintf_r+0x1dc>
  40d0ac:	9a02      	ldr	r2, [sp, #8]
  40d0ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40d0b2:	9202      	str	r2, [sp, #8]
  40d0b4:	2f00      	cmp	r7, #0
  40d0b6:	f040 83a9 	bne.w	40d80c <_svfprintf_r+0x934>
  40d0ba:	ea54 0205 	orrs.w	r2, r4, r5
  40d0be:	bf14      	ite	ne
  40d0c0:	2201      	movne	r2, #1
  40d0c2:	2200      	moveq	r2, #0
  40d0c4:	2a00      	cmp	r2, #0
  40d0c6:	f040 83a1 	bne.w	40d80c <_svfprintf_r+0x934>
  40d0ca:	2b00      	cmp	r3, #0
  40d0cc:	f040 845c 	bne.w	40d988 <_svfprintf_r+0xab0>
  40d0d0:	9a02      	ldr	r2, [sp, #8]
  40d0d2:	07d2      	lsls	r2, r2, #31
  40d0d4:	f140 84e9 	bpl.w	40daaa <_svfprintf_r+0xbd2>
  40d0d8:	f10d 0af8 	add.w	sl, sp, #248	; 0xf8
  40d0dc:	2330      	movs	r3, #48	; 0x30
  40d0de:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40d0e2:	ebca 0308 	rsb	r3, sl, r8
  40d0e6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40d0ea:	9307      	str	r3, [sp, #28]
  40d0ec:	9a07      	ldr	r2, [sp, #28]
  40d0ee:	463b      	mov	r3, r7
  40d0f0:	4297      	cmp	r7, r2
  40d0f2:	bfb8      	it	lt
  40d0f4:	4613      	movlt	r3, r2
  40d0f6:	9303      	str	r3, [sp, #12]
  40d0f8:	2300      	movs	r3, #0
  40d0fa:	930d      	str	r3, [sp, #52]	; 0x34
  40d0fc:	f1bc 0f00 	cmp.w	ip, #0
  40d100:	d002      	beq.n	40d108 <_svfprintf_r+0x230>
  40d102:	9b03      	ldr	r3, [sp, #12]
  40d104:	3301      	adds	r3, #1
  40d106:	9303      	str	r3, [sp, #12]
  40d108:	9b02      	ldr	r3, [sp, #8]
  40d10a:	f013 0302 	ands.w	r3, r3, #2
  40d10e:	930a      	str	r3, [sp, #40]	; 0x28
  40d110:	d002      	beq.n	40d118 <_svfprintf_r+0x240>
  40d112:	9b03      	ldr	r3, [sp, #12]
  40d114:	3302      	adds	r3, #2
  40d116:	9303      	str	r3, [sp, #12]
  40d118:	9b02      	ldr	r3, [sp, #8]
  40d11a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40d11e:	f040 8305 	bne.w	40d72c <_svfprintf_r+0x854>
  40d122:	9b08      	ldr	r3, [sp, #32]
  40d124:	9a03      	ldr	r2, [sp, #12]
  40d126:	1a9c      	subs	r4, r3, r2
  40d128:	2c00      	cmp	r4, #0
  40d12a:	f340 82ff 	ble.w	40d72c <_svfprintf_r+0x854>
  40d12e:	2c10      	cmp	r4, #16
  40d130:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40d132:	f340 87bf 	ble.w	40e0b4 <_svfprintf_r+0x11dc>
  40d136:	4f06      	ldr	r7, [pc, #24]	; (40d150 <_svfprintf_r+0x278>)
  40d138:	f04f 0a10 	mov.w	sl, #16
  40d13c:	9514      	str	r5, [sp, #80]	; 0x50
  40d13e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d140:	463d      	mov	r5, r7
  40d142:	4627      	mov	r7, r4
  40d144:	9c05      	ldr	r4, [sp, #20]
  40d146:	e008      	b.n	40d15a <_svfprintf_r+0x282>
	...
  40d150:	00413be0 	.word	0x00413be0
  40d154:	3f10      	subs	r7, #16
  40d156:	2f10      	cmp	r7, #16
  40d158:	dd19      	ble.n	40d18e <_svfprintf_r+0x2b6>
  40d15a:	3201      	adds	r2, #1
  40d15c:	3110      	adds	r1, #16
  40d15e:	f8cb 5000 	str.w	r5, [fp]
  40d162:	f10b 0b08 	add.w	fp, fp, #8
  40d166:	2a07      	cmp	r2, #7
  40d168:	f84b ac04 	str.w	sl, [fp, #-4]
  40d16c:	9123      	str	r1, [sp, #140]	; 0x8c
  40d16e:	9222      	str	r2, [sp, #136]	; 0x88
  40d170:	ddf0      	ble.n	40d154 <_svfprintf_r+0x27c>
  40d172:	4620      	mov	r0, r4
  40d174:	4649      	mov	r1, r9
  40d176:	aa21      	add	r2, sp, #132	; 0x84
  40d178:	46c3      	mov	fp, r8
  40d17a:	f005 f8c7 	bl	41230c <__ssprint_r>
  40d17e:	2800      	cmp	r0, #0
  40d180:	f47f af70 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d184:	3f10      	subs	r7, #16
  40d186:	9923      	ldr	r1, [sp, #140]	; 0x8c
  40d188:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d18a:	2f10      	cmp	r7, #16
  40d18c:	dce5      	bgt.n	40d15a <_svfprintf_r+0x282>
  40d18e:	463c      	mov	r4, r7
  40d190:	462f      	mov	r7, r5
  40d192:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40d194:	3201      	adds	r2, #1
  40d196:	eb04 0a01 	add.w	sl, r4, r1
  40d19a:	f8cb 7000 	str.w	r7, [fp]
  40d19e:	2a07      	cmp	r2, #7
  40d1a0:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d1a4:	9222      	str	r2, [sp, #136]	; 0x88
  40d1a6:	f8cb 4004 	str.w	r4, [fp, #4]
  40d1aa:	f300 82b4 	bgt.w	40d716 <_svfprintf_r+0x83e>
  40d1ae:	f10b 0b08 	add.w	fp, fp, #8
  40d1b2:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d1b6:	f1bc 0f00 	cmp.w	ip, #0
  40d1ba:	d012      	beq.n	40d1e2 <_svfprintf_r+0x30a>
  40d1bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d1be:	2201      	movs	r2, #1
  40d1c0:	f10a 0a01 	add.w	sl, sl, #1
  40d1c4:	f10d 0167 	add.w	r1, sp, #103	; 0x67
  40d1c8:	4413      	add	r3, r2
  40d1ca:	f8cb 2004 	str.w	r2, [fp, #4]
  40d1ce:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d1d2:	2b07      	cmp	r3, #7
  40d1d4:	f8cb 1000 	str.w	r1, [fp]
  40d1d8:	9322      	str	r3, [sp, #136]	; 0x88
  40d1da:	f300 83e6 	bgt.w	40d9aa <_svfprintf_r+0xad2>
  40d1de:	f10b 0b08 	add.w	fp, fp, #8
  40d1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d1e4:	b18b      	cbz	r3, 40d20a <_svfprintf_r+0x332>
  40d1e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d1e8:	f10a 0a02 	add.w	sl, sl, #2
  40d1ec:	a91a      	add	r1, sp, #104	; 0x68
  40d1ee:	2202      	movs	r2, #2
  40d1f0:	3301      	adds	r3, #1
  40d1f2:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d1f6:	f8cb 1000 	str.w	r1, [fp]
  40d1fa:	2b07      	cmp	r3, #7
  40d1fc:	9322      	str	r3, [sp, #136]	; 0x88
  40d1fe:	f8cb 2004 	str.w	r2, [fp, #4]
  40d202:	f300 83de 	bgt.w	40d9c2 <_svfprintf_r+0xaea>
  40d206:	f10b 0b08 	add.w	fp, fp, #8
  40d20a:	2d80      	cmp	r5, #128	; 0x80
  40d20c:	f000 831b 	beq.w	40d846 <_svfprintf_r+0x96e>
  40d210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d212:	9a07      	ldr	r2, [sp, #28]
  40d214:	1a9f      	subs	r7, r3, r2
  40d216:	2f00      	cmp	r7, #0
  40d218:	dd35      	ble.n	40d286 <_svfprintf_r+0x3ae>
  40d21a:	2f10      	cmp	r7, #16
  40d21c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d21e:	f340 85e9 	ble.w	40ddf4 <_svfprintf_r+0xf1c>
  40d222:	4653      	mov	r3, sl
  40d224:	2410      	movs	r4, #16
  40d226:	4db0      	ldr	r5, [pc, #704]	; (40d4e8 <_svfprintf_r+0x610>)
  40d228:	f8dd a014 	ldr.w	sl, [sp, #20]
  40d22c:	e002      	b.n	40d234 <_svfprintf_r+0x35c>
  40d22e:	3f10      	subs	r7, #16
  40d230:	2f10      	cmp	r7, #16
  40d232:	dd19      	ble.n	40d268 <_svfprintf_r+0x390>
  40d234:	3201      	adds	r2, #1
  40d236:	3310      	adds	r3, #16
  40d238:	f8cb 5000 	str.w	r5, [fp]
  40d23c:	f10b 0b08 	add.w	fp, fp, #8
  40d240:	2a07      	cmp	r2, #7
  40d242:	f84b 4c04 	str.w	r4, [fp, #-4]
  40d246:	9323      	str	r3, [sp, #140]	; 0x8c
  40d248:	9222      	str	r2, [sp, #136]	; 0x88
  40d24a:	ddf0      	ble.n	40d22e <_svfprintf_r+0x356>
  40d24c:	4650      	mov	r0, sl
  40d24e:	4649      	mov	r1, r9
  40d250:	aa21      	add	r2, sp, #132	; 0x84
  40d252:	46c3      	mov	fp, r8
  40d254:	f005 f85a 	bl	41230c <__ssprint_r>
  40d258:	2800      	cmp	r0, #0
  40d25a:	f47f af03 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d25e:	3f10      	subs	r7, #16
  40d260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d262:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d264:	2f10      	cmp	r7, #16
  40d266:	dce5      	bgt.n	40d234 <_svfprintf_r+0x35c>
  40d268:	469a      	mov	sl, r3
  40d26a:	3201      	adds	r2, #1
  40d26c:	44ba      	add	sl, r7
  40d26e:	f8cb 5000 	str.w	r5, [fp]
  40d272:	2a07      	cmp	r2, #7
  40d274:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d278:	9222      	str	r2, [sp, #136]	; 0x88
  40d27a:	f8cb 7004 	str.w	r7, [fp, #4]
  40d27e:	f300 8388 	bgt.w	40d992 <_svfprintf_r+0xaba>
  40d282:	f10b 0b08 	add.w	fp, fp, #8
  40d286:	9b02      	ldr	r3, [sp, #8]
  40d288:	05df      	lsls	r7, r3, #23
  40d28a:	f100 8252 	bmi.w	40d732 <_svfprintf_r+0x85a>
  40d28e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d290:	9907      	ldr	r1, [sp, #28]
  40d292:	3301      	adds	r3, #1
  40d294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d296:	448a      	add	sl, r1
  40d298:	f8cb 1004 	str.w	r1, [fp, #4]
  40d29c:	2b07      	cmp	r3, #7
  40d29e:	f8cb 2000 	str.w	r2, [fp]
  40d2a2:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d2a6:	9322      	str	r3, [sp, #136]	; 0x88
  40d2a8:	f300 8358 	bgt.w	40d95c <_svfprintf_r+0xa84>
  40d2ac:	f10b 0b08 	add.w	fp, fp, #8
  40d2b0:	9b02      	ldr	r3, [sp, #8]
  40d2b2:	075a      	lsls	r2, r3, #29
  40d2b4:	d540      	bpl.n	40d338 <_svfprintf_r+0x460>
  40d2b6:	9b08      	ldr	r3, [sp, #32]
  40d2b8:	9a03      	ldr	r2, [sp, #12]
  40d2ba:	1a9c      	subs	r4, r3, r2
  40d2bc:	2c00      	cmp	r4, #0
  40d2be:	dd3b      	ble.n	40d338 <_svfprintf_r+0x460>
  40d2c0:	2c10      	cmp	r4, #16
  40d2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d2c4:	f340 874e 	ble.w	40e164 <_svfprintf_r+0x128c>
  40d2c8:	2510      	movs	r5, #16
  40d2ca:	4f88      	ldr	r7, [pc, #544]	; (40d4ec <_svfprintf_r+0x614>)
  40d2cc:	4652      	mov	r2, sl
  40d2ce:	9e05      	ldr	r6, [sp, #20]
  40d2d0:	e002      	b.n	40d2d8 <_svfprintf_r+0x400>
  40d2d2:	3c10      	subs	r4, #16
  40d2d4:	2c10      	cmp	r4, #16
  40d2d6:	dd19      	ble.n	40d30c <_svfprintf_r+0x434>
  40d2d8:	3301      	adds	r3, #1
  40d2da:	3210      	adds	r2, #16
  40d2dc:	f8cb 7000 	str.w	r7, [fp]
  40d2e0:	f10b 0b08 	add.w	fp, fp, #8
  40d2e4:	2b07      	cmp	r3, #7
  40d2e6:	f84b 5c04 	str.w	r5, [fp, #-4]
  40d2ea:	9223      	str	r2, [sp, #140]	; 0x8c
  40d2ec:	9322      	str	r3, [sp, #136]	; 0x88
  40d2ee:	ddf0      	ble.n	40d2d2 <_svfprintf_r+0x3fa>
  40d2f0:	4630      	mov	r0, r6
  40d2f2:	4649      	mov	r1, r9
  40d2f4:	aa21      	add	r2, sp, #132	; 0x84
  40d2f6:	46c3      	mov	fp, r8
  40d2f8:	f005 f808 	bl	41230c <__ssprint_r>
  40d2fc:	2800      	cmp	r0, #0
  40d2fe:	f47f aeb1 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d302:	3c10      	subs	r4, #16
  40d304:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d306:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d308:	2c10      	cmp	r4, #16
  40d30a:	dce5      	bgt.n	40d2d8 <_svfprintf_r+0x400>
  40d30c:	4692      	mov	sl, r2
  40d30e:	3301      	adds	r3, #1
  40d310:	44a2      	add	sl, r4
  40d312:	f8cb 7000 	str.w	r7, [fp]
  40d316:	2b07      	cmp	r3, #7
  40d318:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d31c:	9322      	str	r3, [sp, #136]	; 0x88
  40d31e:	f8cb 4004 	str.w	r4, [fp, #4]
  40d322:	dd09      	ble.n	40d338 <_svfprintf_r+0x460>
  40d324:	9805      	ldr	r0, [sp, #20]
  40d326:	4649      	mov	r1, r9
  40d328:	aa21      	add	r2, sp, #132	; 0x84
  40d32a:	f004 ffef 	bl	41230c <__ssprint_r>
  40d32e:	2800      	cmp	r0, #0
  40d330:	f47f ae98 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d334:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d338:	9b06      	ldr	r3, [sp, #24]
  40d33a:	9a03      	ldr	r2, [sp, #12]
  40d33c:	9908      	ldr	r1, [sp, #32]
  40d33e:	428a      	cmp	r2, r1
  40d340:	bfac      	ite	ge
  40d342:	189b      	addge	r3, r3, r2
  40d344:	185b      	addlt	r3, r3, r1
  40d346:	9306      	str	r3, [sp, #24]
  40d348:	f1ba 0f00 	cmp.w	sl, #0
  40d34c:	f040 8312 	bne.w	40d974 <_svfprintf_r+0xa9c>
  40d350:	2300      	movs	r3, #0
  40d352:	46c3      	mov	fp, r8
  40d354:	9322      	str	r3, [sp, #136]	; 0x88
  40d356:	e5e7      	b.n	40cf28 <_svfprintf_r+0x50>
  40d358:	4619      	mov	r1, r3
  40d35a:	9802      	ldr	r0, [sp, #8]
  40d35c:	781e      	ldrb	r6, [r3, #0]
  40d35e:	f040 0004 	orr.w	r0, r0, #4
  40d362:	9002      	str	r0, [sp, #8]
  40d364:	e60e      	b.n	40cf84 <_svfprintf_r+0xac>
  40d366:	9304      	str	r3, [sp, #16]
  40d368:	9b02      	ldr	r3, [sp, #8]
  40d36a:	f013 0320 	ands.w	r3, r3, #32
  40d36e:	f000 80a9 	beq.w	40d4c4 <_svfprintf_r+0x5ec>
  40d372:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d374:	2300      	movs	r3, #0
  40d376:	3207      	adds	r2, #7
  40d378:	f022 0207 	bic.w	r2, r2, #7
  40d37c:	f102 0108 	add.w	r1, r2, #8
  40d380:	e9d2 4500 	ldrd	r4, r5, [r2]
  40d384:	9109      	str	r1, [sp, #36]	; 0x24
  40d386:	e68a      	b.n	40d09e <_svfprintf_r+0x1c6>
  40d388:	781e      	ldrb	r6, [r3, #0]
  40d38a:	4619      	mov	r1, r3
  40d38c:	222b      	movs	r2, #43	; 0x2b
  40d38e:	e5f9      	b.n	40cf84 <_svfprintf_r+0xac>
  40d390:	781e      	ldrb	r6, [r3, #0]
  40d392:	1c59      	adds	r1, r3, #1
  40d394:	2e2a      	cmp	r6, #42	; 0x2a
  40d396:	f000 87e6 	beq.w	40e366 <_svfprintf_r+0x148e>
  40d39a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d39e:	460b      	mov	r3, r1
  40d3a0:	2700      	movs	r7, #0
  40d3a2:	2809      	cmp	r0, #9
  40d3a4:	f63f adef 	bhi.w	40cf86 <_svfprintf_r+0xae>
  40d3a8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  40d3ac:	f813 6b01 	ldrb.w	r6, [r3], #1
  40d3b0:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  40d3b4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d3b8:	2809      	cmp	r0, #9
  40d3ba:	d9f5      	bls.n	40d3a8 <_svfprintf_r+0x4d0>
  40d3bc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
  40d3c0:	e5e1      	b.n	40cf86 <_svfprintf_r+0xae>
  40d3c2:	9304      	str	r3, [sp, #16]
  40d3c4:	9b02      	ldr	r3, [sp, #8]
  40d3c6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d3ca:	069b      	lsls	r3, r3, #26
  40d3cc:	f140 8125 	bpl.w	40d61a <_svfprintf_r+0x742>
  40d3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d3d2:	3307      	adds	r3, #7
  40d3d4:	f023 0307 	bic.w	r3, r3, #7
  40d3d8:	e9d3 0100 	ldrd	r0, r1, [r3]
  40d3dc:	3308      	adds	r3, #8
  40d3de:	4604      	mov	r4, r0
  40d3e0:	460d      	mov	r5, r1
  40d3e2:	9309      	str	r3, [sp, #36]	; 0x24
  40d3e4:	2800      	cmp	r0, #0
  40d3e6:	f171 0300 	sbcs.w	r3, r1, #0
  40d3ea:	f2c0 8127 	blt.w	40d63c <_svfprintf_r+0x764>
  40d3ee:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d3f2:	2301      	movs	r3, #1
  40d3f4:	970c      	str	r7, [sp, #48]	; 0x30
  40d3f6:	e657      	b.n	40d0a8 <_svfprintf_r+0x1d0>
  40d3f8:	781e      	ldrb	r6, [r3, #0]
  40d3fa:	9902      	ldr	r1, [sp, #8]
  40d3fc:	2e6c      	cmp	r6, #108	; 0x6c
  40d3fe:	f000 8559 	beq.w	40deb4 <_svfprintf_r+0xfdc>
  40d402:	f041 0110 	orr.w	r1, r1, #16
  40d406:	9102      	str	r1, [sp, #8]
  40d408:	4619      	mov	r1, r3
  40d40a:	e5bb      	b.n	40cf84 <_svfprintf_r+0xac>
  40d40c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d40e:	6821      	ldr	r1, [r4, #0]
  40d410:	4608      	mov	r0, r1
  40d412:	9108      	str	r1, [sp, #32]
  40d414:	4621      	mov	r1, r4
  40d416:	2800      	cmp	r0, #0
  40d418:	f101 0104 	add.w	r1, r1, #4
  40d41c:	f2c0 8551 	blt.w	40dec2 <_svfprintf_r+0xfea>
  40d420:	9109      	str	r1, [sp, #36]	; 0x24
  40d422:	4619      	mov	r1, r3
  40d424:	781e      	ldrb	r6, [r3, #0]
  40d426:	e5ad      	b.n	40cf84 <_svfprintf_r+0xac>
  40d428:	9902      	ldr	r1, [sp, #8]
  40d42a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40d42e:	9102      	str	r1, [sp, #8]
  40d430:	4619      	mov	r1, r3
  40d432:	781e      	ldrb	r6, [r3, #0]
  40d434:	e5a6      	b.n	40cf84 <_svfprintf_r+0xac>
  40d436:	9902      	ldr	r1, [sp, #8]
  40d438:	f041 0120 	orr.w	r1, r1, #32
  40d43c:	9102      	str	r1, [sp, #8]
  40d43e:	4619      	mov	r1, r3
  40d440:	781e      	ldrb	r6, [r3, #0]
  40d442:	e59f      	b.n	40cf84 <_svfprintf_r+0xac>
  40d444:	9304      	str	r3, [sp, #16]
  40d446:	9b02      	ldr	r3, [sp, #8]
  40d448:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d44c:	069f      	lsls	r7, r3, #26
  40d44e:	f140 84ac 	bpl.w	40ddaa <_svfprintf_r+0xed2>
  40d452:	9906      	ldr	r1, [sp, #24]
  40d454:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d456:	17cd      	asrs	r5, r1, #31
  40d458:	4608      	mov	r0, r1
  40d45a:	6813      	ldr	r3, [r2, #0]
  40d45c:	3204      	adds	r2, #4
  40d45e:	4629      	mov	r1, r5
  40d460:	9209      	str	r2, [sp, #36]	; 0x24
  40d462:	e9c3 0100 	strd	r0, r1, [r3]
  40d466:	e55f      	b.n	40cf28 <_svfprintf_r+0x50>
  40d468:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d46a:	2500      	movs	r5, #0
  40d46c:	9304      	str	r3, [sp, #16]
  40d46e:	6813      	ldr	r3, [r2, #0]
  40d470:	9707      	str	r7, [sp, #28]
  40d472:	1d17      	adds	r7, r2, #4
  40d474:	930b      	str	r3, [sp, #44]	; 0x2c
  40d476:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
  40d47a:	2b00      	cmp	r3, #0
  40d47c:	f000 865f 	beq.w	40e13e <_svfprintf_r+0x1266>
  40d480:	9b07      	ldr	r3, [sp, #28]
  40d482:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d484:	2b00      	cmp	r3, #0
  40d486:	f2c0 8608 	blt.w	40e09a <_svfprintf_r+0x11c2>
  40d48a:	4629      	mov	r1, r5
  40d48c:	461a      	mov	r2, r3
  40d48e:	f003 ff4b 	bl	411328 <memchr>
  40d492:	2800      	cmp	r0, #0
  40d494:	f000 86bf 	beq.w	40e216 <_svfprintf_r+0x133e>
  40d498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d49a:	950c      	str	r5, [sp, #48]	; 0x30
  40d49c:	1ac3      	subs	r3, r0, r3
  40d49e:	9709      	str	r7, [sp, #36]	; 0x24
  40d4a0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d4a4:	9307      	str	r3, [sp, #28]
  40d4a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40d4aa:	950d      	str	r5, [sp, #52]	; 0x34
  40d4ac:	9303      	str	r3, [sp, #12]
  40d4ae:	e625      	b.n	40d0fc <_svfprintf_r+0x224>
  40d4b0:	9304      	str	r3, [sp, #16]
  40d4b2:	9b02      	ldr	r3, [sp, #8]
  40d4b4:	f043 0310 	orr.w	r3, r3, #16
  40d4b8:	9302      	str	r3, [sp, #8]
  40d4ba:	9b02      	ldr	r3, [sp, #8]
  40d4bc:	f013 0320 	ands.w	r3, r3, #32
  40d4c0:	f47f af57 	bne.w	40d372 <_svfprintf_r+0x49a>
  40d4c4:	9a02      	ldr	r2, [sp, #8]
  40d4c6:	f012 0210 	ands.w	r2, r2, #16
  40d4ca:	f040 8351 	bne.w	40db70 <_svfprintf_r+0xc98>
  40d4ce:	9b02      	ldr	r3, [sp, #8]
  40d4d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40d4d4:	f000 834c 	beq.w	40db70 <_svfprintf_r+0xc98>
  40d4d8:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d4da:	4613      	mov	r3, r2
  40d4dc:	2500      	movs	r5, #0
  40d4de:	460a      	mov	r2, r1
  40d4e0:	880c      	ldrh	r4, [r1, #0]
  40d4e2:	3204      	adds	r2, #4
  40d4e4:	9209      	str	r2, [sp, #36]	; 0x24
  40d4e6:	e5da      	b.n	40d09e <_svfprintf_r+0x1c6>
  40d4e8:	00413bd0 	.word	0x00413bd0
  40d4ec:	00413be0 	.word	0x00413be0
  40d4f0:	9304      	str	r3, [sp, #16]
  40d4f2:	9b02      	ldr	r3, [sp, #8]
  40d4f4:	f043 0310 	orr.w	r3, r3, #16
  40d4f8:	9302      	str	r3, [sp, #8]
  40d4fa:	9b02      	ldr	r3, [sp, #8]
  40d4fc:	069c      	lsls	r4, r3, #26
  40d4fe:	f53f adc4 	bmi.w	40d08a <_svfprintf_r+0x1b2>
  40d502:	9b02      	ldr	r3, [sp, #8]
  40d504:	06d8      	lsls	r0, r3, #27
  40d506:	f140 8467 	bpl.w	40ddd8 <_svfprintf_r+0xf00>
  40d50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d50c:	4613      	mov	r3, r2
  40d50e:	3204      	adds	r2, #4
  40d510:	681c      	ldr	r4, [r3, #0]
  40d512:	2500      	movs	r5, #0
  40d514:	2301      	movs	r3, #1
  40d516:	9209      	str	r2, [sp, #36]	; 0x24
  40d518:	e5c1      	b.n	40d09e <_svfprintf_r+0x1c6>
  40d51a:	9304      	str	r3, [sp, #16]
  40d51c:	4bb5      	ldr	r3, [pc, #724]	; (40d7f4 <_svfprintf_r+0x91c>)
  40d51e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d522:	9311      	str	r3, [sp, #68]	; 0x44
  40d524:	9b02      	ldr	r3, [sp, #8]
  40d526:	0699      	lsls	r1, r3, #26
  40d528:	d53d      	bpl.n	40d5a6 <_svfprintf_r+0x6ce>
  40d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d52c:	3307      	adds	r3, #7
  40d52e:	f023 0307 	bic.w	r3, r3, #7
  40d532:	f103 0208 	add.w	r2, r3, #8
  40d536:	e9d3 4500 	ldrd	r4, r5, [r3]
  40d53a:	9209      	str	r2, [sp, #36]	; 0x24
  40d53c:	9b02      	ldr	r3, [sp, #8]
  40d53e:	07db      	lsls	r3, r3, #31
  40d540:	f140 8264 	bpl.w	40da0c <_svfprintf_r+0xb34>
  40d544:	ea54 0305 	orrs.w	r3, r4, r5
  40d548:	f000 8260 	beq.w	40da0c <_svfprintf_r+0xb34>
  40d54c:	9b02      	ldr	r3, [sp, #8]
  40d54e:	2230      	movs	r2, #48	; 0x30
  40d550:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
  40d554:	f043 0302 	orr.w	r3, r3, #2
  40d558:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
  40d55c:	9302      	str	r3, [sp, #8]
  40d55e:	2302      	movs	r3, #2
  40d560:	e59d      	b.n	40d09e <_svfprintf_r+0x1c6>
  40d562:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d564:	2001      	movs	r0, #1
  40d566:	9304      	str	r3, [sp, #16]
  40d568:	2300      	movs	r3, #0
  40d56a:	680a      	ldr	r2, [r1, #0]
  40d56c:	3104      	adds	r1, #4
  40d56e:	469c      	mov	ip, r3
  40d570:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40d574:	930c      	str	r3, [sp, #48]	; 0x30
  40d576:	930d      	str	r3, [sp, #52]	; 0x34
  40d578:	ab24      	add	r3, sp, #144	; 0x90
  40d57a:	9003      	str	r0, [sp, #12]
  40d57c:	9109      	str	r1, [sp, #36]	; 0x24
  40d57e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  40d582:	9007      	str	r0, [sp, #28]
  40d584:	930b      	str	r3, [sp, #44]	; 0x2c
  40d586:	e5bf      	b.n	40d108 <_svfprintf_r+0x230>
  40d588:	9902      	ldr	r1, [sp, #8]
  40d58a:	f041 0108 	orr.w	r1, r1, #8
  40d58e:	9102      	str	r1, [sp, #8]
  40d590:	4619      	mov	r1, r3
  40d592:	781e      	ldrb	r6, [r3, #0]
  40d594:	e4f6      	b.n	40cf84 <_svfprintf_r+0xac>
  40d596:	9304      	str	r3, [sp, #16]
  40d598:	4b97      	ldr	r3, [pc, #604]	; (40d7f8 <_svfprintf_r+0x920>)
  40d59a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d59e:	9311      	str	r3, [sp, #68]	; 0x44
  40d5a0:	9b02      	ldr	r3, [sp, #8]
  40d5a2:	0699      	lsls	r1, r3, #26
  40d5a4:	d4c1      	bmi.n	40d52a <_svfprintf_r+0x652>
  40d5a6:	9b02      	ldr	r3, [sp, #8]
  40d5a8:	06da      	lsls	r2, r3, #27
  40d5aa:	f140 83e1 	bpl.w	40dd70 <_svfprintf_r+0xe98>
  40d5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d5b0:	2500      	movs	r5, #0
  40d5b2:	4613      	mov	r3, r2
  40d5b4:	6814      	ldr	r4, [r2, #0]
  40d5b6:	3304      	adds	r3, #4
  40d5b8:	9309      	str	r3, [sp, #36]	; 0x24
  40d5ba:	e7bf      	b.n	40d53c <_svfprintf_r+0x664>
  40d5bc:	781e      	ldrb	r6, [r3, #0]
  40d5be:	4619      	mov	r1, r3
  40d5c0:	2a00      	cmp	r2, #0
  40d5c2:	f47f acdf 	bne.w	40cf84 <_svfprintf_r+0xac>
  40d5c6:	2220      	movs	r2, #32
  40d5c8:	e4dc      	b.n	40cf84 <_svfprintf_r+0xac>
  40d5ca:	9902      	ldr	r1, [sp, #8]
  40d5cc:	f041 0101 	orr.w	r1, r1, #1
  40d5d0:	9102      	str	r1, [sp, #8]
  40d5d2:	4619      	mov	r1, r3
  40d5d4:	781e      	ldrb	r6, [r3, #0]
  40d5d6:	e4d5      	b.n	40cf84 <_svfprintf_r+0xac>
  40d5d8:	9902      	ldr	r1, [sp, #8]
  40d5da:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40d5de:	9102      	str	r1, [sp, #8]
  40d5e0:	4619      	mov	r1, r3
  40d5e2:	781e      	ldrb	r6, [r3, #0]
  40d5e4:	e4ce      	b.n	40cf84 <_svfprintf_r+0xac>
  40d5e6:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d5ea:	2100      	movs	r1, #0
  40d5ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40d5f0:	f813 6b01 	ldrb.w	r6, [r3], #1
  40d5f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40d5f8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40d5fc:	2809      	cmp	r0, #9
  40d5fe:	d9f5      	bls.n	40d5ec <_svfprintf_r+0x714>
  40d600:	9108      	str	r1, [sp, #32]
  40d602:	e4c0      	b.n	40cf86 <_svfprintf_r+0xae>
  40d604:	9304      	str	r3, [sp, #16]
  40d606:	9b02      	ldr	r3, [sp, #8]
  40d608:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d60c:	f043 0310 	orr.w	r3, r3, #16
  40d610:	9302      	str	r3, [sp, #8]
  40d612:	9b02      	ldr	r3, [sp, #8]
  40d614:	069b      	lsls	r3, r3, #26
  40d616:	f53f aedb 	bmi.w	40d3d0 <_svfprintf_r+0x4f8>
  40d61a:	9b02      	ldr	r3, [sp, #8]
  40d61c:	06dd      	lsls	r5, r3, #27
  40d61e:	f140 83b4 	bpl.w	40dd8a <_svfprintf_r+0xeb2>
  40d622:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d624:	4613      	mov	r3, r2
  40d626:	681c      	ldr	r4, [r3, #0]
  40d628:	3304      	adds	r3, #4
  40d62a:	17e5      	asrs	r5, r4, #31
  40d62c:	4620      	mov	r0, r4
  40d62e:	9309      	str	r3, [sp, #36]	; 0x24
  40d630:	4629      	mov	r1, r5
  40d632:	2800      	cmp	r0, #0
  40d634:	f171 0300 	sbcs.w	r3, r1, #0
  40d638:	f6bf aed9 	bge.w	40d3ee <_svfprintf_r+0x516>
  40d63c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40d640:	4264      	negs	r4, r4
  40d642:	970c      	str	r7, [sp, #48]	; 0x30
  40d644:	f04f 0301 	mov.w	r3, #1
  40d648:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d64c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40d650:	e52a      	b.n	40d0a8 <_svfprintf_r+0x1d0>
  40d652:	9304      	str	r3, [sp, #16]
  40d654:	9b02      	ldr	r3, [sp, #8]
  40d656:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d65a:	f013 0f08 	tst.w	r3, #8
  40d65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d660:	f103 0307 	add.w	r3, r3, #7
  40d664:	f023 0307 	bic.w	r3, r3, #7
  40d668:	f000 837b 	beq.w	40dd62 <_svfprintf_r+0xe8a>
  40d66c:	f103 0208 	add.w	r2, r3, #8
  40d670:	ed93 7b00 	vldr	d7, [r3]
  40d674:	9209      	str	r2, [sp, #36]	; 0x24
  40d676:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40d67a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
  40d67e:	f7fc fff7 	bl	40a670 <__fpclassifyd>
  40d682:	2801      	cmp	r0, #1
  40d684:	f040 8353 	bne.w	40dd2e <_svfprintf_r+0xe56>
  40d688:	2200      	movs	r2, #0
  40d68a:	2300      	movs	r3, #0
  40d68c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d690:	f7fd fcda 	bl	40b048 <__aeabi_dcmplt>
  40d694:	2800      	cmp	r0, #0
  40d696:	f040 8568 	bne.w	40e16a <_svfprintf_r+0x1292>
  40d69a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d69e:	2303      	movs	r3, #3
  40d6a0:	9c02      	ldr	r4, [sp, #8]
  40d6a2:	4a56      	ldr	r2, [pc, #344]	; (40d7fc <_svfprintf_r+0x924>)
  40d6a4:	2000      	movs	r0, #0
  40d6a6:	4619      	mov	r1, r3
  40d6a8:	9303      	str	r3, [sp, #12]
  40d6aa:	4b55      	ldr	r3, [pc, #340]	; (40d800 <_svfprintf_r+0x928>)
  40d6ac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40d6b0:	900c      	str	r0, [sp, #48]	; 0x30
  40d6b2:	2e47      	cmp	r6, #71	; 0x47
  40d6b4:	bfd8      	it	le
  40d6b6:	461a      	movle	r2, r3
  40d6b8:	9402      	str	r4, [sp, #8]
  40d6ba:	9107      	str	r1, [sp, #28]
  40d6bc:	920b      	str	r2, [sp, #44]	; 0x2c
  40d6be:	900d      	str	r0, [sp, #52]	; 0x34
  40d6c0:	e51c      	b.n	40d0fc <_svfprintf_r+0x224>
  40d6c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40d6c4:	2230      	movs	r2, #48	; 0x30
  40d6c6:	9802      	ldr	r0, [sp, #8]
  40d6c8:	4629      	mov	r1, r5
  40d6ca:	9304      	str	r3, [sp, #16]
  40d6cc:	2378      	movs	r3, #120	; 0x78
  40d6ce:	f040 0002 	orr.w	r0, r0, #2
  40d6d2:	3104      	adds	r1, #4
  40d6d4:	682c      	ldr	r4, [r5, #0]
  40d6d6:	461e      	mov	r6, r3
  40d6d8:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  40d6dc:	4b46      	ldr	r3, [pc, #280]	; (40d7f8 <_svfprintf_r+0x920>)
  40d6de:	2500      	movs	r5, #0
  40d6e0:	9002      	str	r0, [sp, #8]
  40d6e2:	9311      	str	r3, [sp, #68]	; 0x44
  40d6e4:	2302      	movs	r3, #2
  40d6e6:	9109      	str	r1, [sp, #36]	; 0x24
  40d6e8:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
  40d6ec:	e4d7      	b.n	40d09e <_svfprintf_r+0x1c6>
  40d6ee:	9304      	str	r3, [sp, #16]
  40d6f0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
  40d6f4:	2e00      	cmp	r6, #0
  40d6f6:	f43f acae 	beq.w	40d056 <_svfprintf_r+0x17e>
  40d6fa:	2300      	movs	r3, #0
  40d6fc:	2201      	movs	r2, #1
  40d6fe:	a924      	add	r1, sp, #144	; 0x90
  40d700:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
  40d704:	9203      	str	r2, [sp, #12]
  40d706:	469c      	mov	ip, r3
  40d708:	910b      	str	r1, [sp, #44]	; 0x2c
  40d70a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40d70e:	9207      	str	r2, [sp, #28]
  40d710:	930c      	str	r3, [sp, #48]	; 0x30
  40d712:	930d      	str	r3, [sp, #52]	; 0x34
  40d714:	e4f8      	b.n	40d108 <_svfprintf_r+0x230>
  40d716:	9805      	ldr	r0, [sp, #20]
  40d718:	4649      	mov	r1, r9
  40d71a:	aa21      	add	r2, sp, #132	; 0x84
  40d71c:	f004 fdf6 	bl	41230c <__ssprint_r>
  40d720:	2800      	cmp	r0, #0
  40d722:	f47f ac9f 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d726:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40d72a:	46c3      	mov	fp, r8
  40d72c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d730:	e541      	b.n	40d1b6 <_svfprintf_r+0x2de>
  40d732:	2e65      	cmp	r6, #101	; 0x65
  40d734:	f340 80c4 	ble.w	40d8c0 <_svfprintf_r+0x9e8>
  40d738:	2200      	movs	r2, #0
  40d73a:	2300      	movs	r3, #0
  40d73c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d740:	f7fd fc78 	bl	40b034 <__aeabi_dcmpeq>
  40d744:	2800      	cmp	r0, #0
  40d746:	f000 8164 	beq.w	40da12 <_svfprintf_r+0xb3a>
  40d74a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d74c:	2201      	movs	r2, #1
  40d74e:	f10a 0a01 	add.w	sl, sl, #1
  40d752:	492c      	ldr	r1, [pc, #176]	; (40d804 <_svfprintf_r+0x92c>)
  40d754:	4413      	add	r3, r2
  40d756:	f8cb 2004 	str.w	r2, [fp, #4]
  40d75a:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d75e:	2b07      	cmp	r3, #7
  40d760:	f8cb 1000 	str.w	r1, [fp]
  40d764:	9322      	str	r3, [sp, #136]	; 0x88
  40d766:	f300 8348 	bgt.w	40ddfa <_svfprintf_r+0xf22>
  40d76a:	f10b 0b08 	add.w	fp, fp, #8
  40d76e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d770:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d772:	4293      	cmp	r3, r2
  40d774:	db03      	blt.n	40d77e <_svfprintf_r+0x8a6>
  40d776:	9b02      	ldr	r3, [sp, #8]
  40d778:	07de      	lsls	r6, r3, #31
  40d77a:	f57f ad99 	bpl.w	40d2b0 <_svfprintf_r+0x3d8>
  40d77e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d780:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40d782:	3301      	adds	r3, #1
  40d784:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d786:	448a      	add	sl, r1
  40d788:	f8cb 1004 	str.w	r1, [fp, #4]
  40d78c:	2b07      	cmp	r3, #7
  40d78e:	f8cb 2000 	str.w	r2, [fp]
  40d792:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d796:	9322      	str	r3, [sp, #136]	; 0x88
  40d798:	f300 8414 	bgt.w	40dfc4 <_svfprintf_r+0x10ec>
  40d79c:	f10b 0b08 	add.w	fp, fp, #8
  40d7a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d7a2:	1e5c      	subs	r4, r3, #1
  40d7a4:	2c00      	cmp	r4, #0
  40d7a6:	f77f ad83 	ble.w	40d2b0 <_svfprintf_r+0x3d8>
  40d7aa:	2c10      	cmp	r4, #16
  40d7ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d7ae:	f340 85a7 	ble.w	40e300 <_svfprintf_r+0x1428>
  40d7b2:	2610      	movs	r6, #16
  40d7b4:	4d14      	ldr	r5, [pc, #80]	; (40d808 <_svfprintf_r+0x930>)
  40d7b6:	4652      	mov	r2, sl
  40d7b8:	9f05      	ldr	r7, [sp, #20]
  40d7ba:	e003      	b.n	40d7c4 <_svfprintf_r+0x8ec>
  40d7bc:	3c10      	subs	r4, #16
  40d7be:	2c10      	cmp	r4, #16
  40d7c0:	f340 81c8 	ble.w	40db54 <_svfprintf_r+0xc7c>
  40d7c4:	3301      	adds	r3, #1
  40d7c6:	3210      	adds	r2, #16
  40d7c8:	f8cb 5000 	str.w	r5, [fp]
  40d7cc:	f10b 0b08 	add.w	fp, fp, #8
  40d7d0:	2b07      	cmp	r3, #7
  40d7d2:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d7d6:	9223      	str	r2, [sp, #140]	; 0x8c
  40d7d8:	9322      	str	r3, [sp, #136]	; 0x88
  40d7da:	ddef      	ble.n	40d7bc <_svfprintf_r+0x8e4>
  40d7dc:	4638      	mov	r0, r7
  40d7de:	4649      	mov	r1, r9
  40d7e0:	aa21      	add	r2, sp, #132	; 0x84
  40d7e2:	46c3      	mov	fp, r8
  40d7e4:	f004 fd92 	bl	41230c <__ssprint_r>
  40d7e8:	2800      	cmp	r0, #0
  40d7ea:	f47f ac3b 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d7ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40d7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40d7f2:	e7e3      	b.n	40d7bc <_svfprintf_r+0x8e4>
  40d7f4:	00413c00 	.word	0x00413c00
  40d7f8:	00413c14 	.word	0x00413c14
  40d7fc:	00413bf4 	.word	0x00413bf4
  40d800:	00413bf0 	.word	0x00413bf0
  40d804:	00413c30 	.word	0x00413c30
  40d808:	00413bd0 	.word	0x00413bd0
  40d80c:	2b01      	cmp	r3, #1
  40d80e:	f000 8151 	beq.w	40dab4 <_svfprintf_r+0xbdc>
  40d812:	2b02      	cmp	r3, #2
  40d814:	f040 80e1 	bne.w	40d9da <_svfprintf_r+0xb02>
  40d818:	46c2      	mov	sl, r8
  40d81a:	9811      	ldr	r0, [sp, #68]	; 0x44
  40d81c:	0923      	lsrs	r3, r4, #4
  40d81e:	f004 010f 	and.w	r1, r4, #15
  40d822:	092a      	lsrs	r2, r5, #4
  40d824:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40d828:	4615      	mov	r5, r2
  40d82a:	461c      	mov	r4, r3
  40d82c:	5c43      	ldrb	r3, [r0, r1]
  40d82e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  40d832:	ea54 0305 	orrs.w	r3, r4, r5
  40d836:	d1f1      	bne.n	40d81c <_svfprintf_r+0x944>
  40d838:	4653      	mov	r3, sl
  40d83a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40d83e:	ebc3 0308 	rsb	r3, r3, r8
  40d842:	9307      	str	r3, [sp, #28]
  40d844:	e452      	b.n	40d0ec <_svfprintf_r+0x214>
  40d846:	9b08      	ldr	r3, [sp, #32]
  40d848:	9a03      	ldr	r2, [sp, #12]
  40d84a:	1a9f      	subs	r7, r3, r2
  40d84c:	2f00      	cmp	r7, #0
  40d84e:	f77f acdf 	ble.w	40d210 <_svfprintf_r+0x338>
  40d852:	2f10      	cmp	r7, #16
  40d854:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d856:	f340 84d9 	ble.w	40e20c <_svfprintf_r+0x1334>
  40d85a:	4653      	mov	r3, sl
  40d85c:	2410      	movs	r4, #16
  40d85e:	4dc8      	ldr	r5, [pc, #800]	; (40db80 <_svfprintf_r+0xca8>)
  40d860:	f8dd a014 	ldr.w	sl, [sp, #20]
  40d864:	e002      	b.n	40d86c <_svfprintf_r+0x994>
  40d866:	3f10      	subs	r7, #16
  40d868:	2f10      	cmp	r7, #16
  40d86a:	dd19      	ble.n	40d8a0 <_svfprintf_r+0x9c8>
  40d86c:	3201      	adds	r2, #1
  40d86e:	3310      	adds	r3, #16
  40d870:	f8cb 5000 	str.w	r5, [fp]
  40d874:	f10b 0b08 	add.w	fp, fp, #8
  40d878:	2a07      	cmp	r2, #7
  40d87a:	f84b 4c04 	str.w	r4, [fp, #-4]
  40d87e:	9323      	str	r3, [sp, #140]	; 0x8c
  40d880:	9222      	str	r2, [sp, #136]	; 0x88
  40d882:	ddf0      	ble.n	40d866 <_svfprintf_r+0x98e>
  40d884:	4650      	mov	r0, sl
  40d886:	4649      	mov	r1, r9
  40d888:	aa21      	add	r2, sp, #132	; 0x84
  40d88a:	46c3      	mov	fp, r8
  40d88c:	f004 fd3e 	bl	41230c <__ssprint_r>
  40d890:	2800      	cmp	r0, #0
  40d892:	f47f abe7 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d896:	3f10      	subs	r7, #16
  40d898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40d89a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40d89c:	2f10      	cmp	r7, #16
  40d89e:	dce5      	bgt.n	40d86c <_svfprintf_r+0x994>
  40d8a0:	469a      	mov	sl, r3
  40d8a2:	3201      	adds	r2, #1
  40d8a4:	44ba      	add	sl, r7
  40d8a6:	f8cb 5000 	str.w	r5, [fp]
  40d8aa:	2a07      	cmp	r2, #7
  40d8ac:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d8b0:	9222      	str	r2, [sp, #136]	; 0x88
  40d8b2:	f8cb 7004 	str.w	r7, [fp, #4]
  40d8b6:	f300 820c 	bgt.w	40dcd2 <_svfprintf_r+0xdfa>
  40d8ba:	f10b 0b08 	add.w	fp, fp, #8
  40d8be:	e4a7      	b.n	40d210 <_svfprintf_r+0x338>
  40d8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d8c2:	f10a 0601 	add.w	r6, sl, #1
  40d8c6:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40d8c8:	2b01      	cmp	r3, #1
  40d8ca:	f340 81ca 	ble.w	40dc62 <_svfprintf_r+0xd8a>
  40d8ce:	2301      	movs	r3, #1
  40d8d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d8d2:	9623      	str	r6, [sp, #140]	; 0x8c
  40d8d4:	441c      	add	r4, r3
  40d8d6:	f8cb 2000 	str.w	r2, [fp]
  40d8da:	f8cb 3004 	str.w	r3, [fp, #4]
  40d8de:	2c07      	cmp	r4, #7
  40d8e0:	9422      	str	r4, [sp, #136]	; 0x88
  40d8e2:	f300 81cf 	bgt.w	40dc84 <_svfprintf_r+0xdac>
  40d8e6:	f10b 0b08 	add.w	fp, fp, #8
  40d8ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d8ec:	3401      	adds	r4, #1
  40d8ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d8f0:	4416      	add	r6, r2
  40d8f2:	2c07      	cmp	r4, #7
  40d8f4:	f8cb 3000 	str.w	r3, [fp]
  40d8f8:	9623      	str	r6, [sp, #140]	; 0x8c
  40d8fa:	9422      	str	r4, [sp, #136]	; 0x88
  40d8fc:	f8cb 2004 	str.w	r2, [fp, #4]
  40d900:	f300 81cc 	bgt.w	40dc9c <_svfprintf_r+0xdc4>
  40d904:	f10b 0b08 	add.w	fp, fp, #8
  40d908:	2300      	movs	r3, #0
  40d90a:	2200      	movs	r2, #0
  40d90c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40d910:	f7fd fb90 	bl	40b034 <__aeabi_dcmpeq>
  40d914:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d916:	2800      	cmp	r0, #0
  40d918:	f040 80dd 	bne.w	40dad6 <_svfprintf_r+0xbfe>
  40d91c:	3b01      	subs	r3, #1
  40d91e:	3401      	adds	r4, #1
  40d920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d922:	441e      	add	r6, r3
  40d924:	2c07      	cmp	r4, #7
  40d926:	f102 0201 	add.w	r2, r2, #1
  40d92a:	9422      	str	r4, [sp, #136]	; 0x88
  40d92c:	9623      	str	r6, [sp, #140]	; 0x8c
  40d92e:	f8cb 2000 	str.w	r2, [fp]
  40d932:	f8cb 3004 	str.w	r3, [fp, #4]
  40d936:	f300 8101 	bgt.w	40db3c <_svfprintf_r+0xc64>
  40d93a:	f10b 0b08 	add.w	fp, fp, #8
  40d93e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40d940:	3401      	adds	r4, #1
  40d942:	ab1d      	add	r3, sp, #116	; 0x74
  40d944:	eb06 0a02 	add.w	sl, r6, r2
  40d948:	2c07      	cmp	r4, #7
  40d94a:	f8cb 2004 	str.w	r2, [fp, #4]
  40d94e:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40d952:	9422      	str	r4, [sp, #136]	; 0x88
  40d954:	f8cb 3000 	str.w	r3, [fp]
  40d958:	f77f aca8 	ble.w	40d2ac <_svfprintf_r+0x3d4>
  40d95c:	9805      	ldr	r0, [sp, #20]
  40d95e:	4649      	mov	r1, r9
  40d960:	aa21      	add	r2, sp, #132	; 0x84
  40d962:	f004 fcd3 	bl	41230c <__ssprint_r>
  40d966:	2800      	cmp	r0, #0
  40d968:	f47f ab7c 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d96c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d970:	46c3      	mov	fp, r8
  40d972:	e49d      	b.n	40d2b0 <_svfprintf_r+0x3d8>
  40d974:	9805      	ldr	r0, [sp, #20]
  40d976:	4649      	mov	r1, r9
  40d978:	aa21      	add	r2, sp, #132	; 0x84
  40d97a:	f004 fcc7 	bl	41230c <__ssprint_r>
  40d97e:	2800      	cmp	r0, #0
  40d980:	f43f ace6 	beq.w	40d350 <_svfprintf_r+0x478>
  40d984:	f7ff bb6e 	b.w	40d064 <_svfprintf_r+0x18c>
  40d988:	9207      	str	r2, [sp, #28]
  40d98a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  40d98e:	f7ff bbad 	b.w	40d0ec <_svfprintf_r+0x214>
  40d992:	9805      	ldr	r0, [sp, #20]
  40d994:	4649      	mov	r1, r9
  40d996:	aa21      	add	r2, sp, #132	; 0x84
  40d998:	f004 fcb8 	bl	41230c <__ssprint_r>
  40d99c:	2800      	cmp	r0, #0
  40d99e:	f47f ab61 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d9a2:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d9a6:	46c3      	mov	fp, r8
  40d9a8:	e46d      	b.n	40d286 <_svfprintf_r+0x3ae>
  40d9aa:	9805      	ldr	r0, [sp, #20]
  40d9ac:	4649      	mov	r1, r9
  40d9ae:	aa21      	add	r2, sp, #132	; 0x84
  40d9b0:	f004 fcac 	bl	41230c <__ssprint_r>
  40d9b4:	2800      	cmp	r0, #0
  40d9b6:	f47f ab55 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d9ba:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d9be:	46c3      	mov	fp, r8
  40d9c0:	e40f      	b.n	40d1e2 <_svfprintf_r+0x30a>
  40d9c2:	9805      	ldr	r0, [sp, #20]
  40d9c4:	4649      	mov	r1, r9
  40d9c6:	aa21      	add	r2, sp, #132	; 0x84
  40d9c8:	f004 fca0 	bl	41230c <__ssprint_r>
  40d9cc:	2800      	cmp	r0, #0
  40d9ce:	f47f ab49 	bne.w	40d064 <_svfprintf_r+0x18c>
  40d9d2:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40d9d6:	46c3      	mov	fp, r8
  40d9d8:	e417      	b.n	40d20a <_svfprintf_r+0x332>
  40d9da:	4641      	mov	r1, r8
  40d9dc:	08e2      	lsrs	r2, r4, #3
  40d9de:	f004 0307 	and.w	r3, r4, #7
  40d9e2:	08e8      	lsrs	r0, r5, #3
  40d9e4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40d9e8:	3330      	adds	r3, #48	; 0x30
  40d9ea:	4605      	mov	r5, r0
  40d9ec:	4614      	mov	r4, r2
  40d9ee:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40d9f2:	ea54 0205 	orrs.w	r2, r4, r5
  40d9f6:	d1f1      	bne.n	40d9dc <_svfprintf_r+0xb04>
  40d9f8:	9a02      	ldr	r2, [sp, #8]
  40d9fa:	910b      	str	r1, [sp, #44]	; 0x2c
  40d9fc:	07d0      	lsls	r0, r2, #31
  40d9fe:	f100 8159 	bmi.w	40dcb4 <_svfprintf_r+0xddc>
  40da02:	ebc1 0308 	rsb	r3, r1, r8
  40da06:	9307      	str	r3, [sp, #28]
  40da08:	f7ff bb70 	b.w	40d0ec <_svfprintf_r+0x214>
  40da0c:	2302      	movs	r3, #2
  40da0e:	f7ff bb46 	b.w	40d09e <_svfprintf_r+0x1c6>
  40da12:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40da14:	2c00      	cmp	r4, #0
  40da16:	f340 81fc 	ble.w	40de12 <_svfprintf_r+0xf3a>
  40da1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40da1c:	990d      	ldr	r1, [sp, #52]	; 0x34
  40da1e:	4613      	mov	r3, r2
  40da20:	428a      	cmp	r2, r1
  40da22:	bfa8      	it	ge
  40da24:	460b      	movge	r3, r1
  40da26:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40da28:	461c      	mov	r4, r3
  40da2a:	188f      	adds	r7, r1, r2
  40da2c:	2c00      	cmp	r4, #0
  40da2e:	dd0e      	ble.n	40da4e <_svfprintf_r+0xb76>
  40da30:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40da32:	44a2      	add	sl, r4
  40da34:	f8cb 1000 	str.w	r1, [fp]
  40da38:	3301      	adds	r3, #1
  40da3a:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40da3e:	f8cb 4004 	str.w	r4, [fp, #4]
  40da42:	2b07      	cmp	r3, #7
  40da44:	9322      	str	r3, [sp, #136]	; 0x88
  40da46:	f300 8339 	bgt.w	40e0bc <_svfprintf_r+0x11e4>
  40da4a:	f10b 0b08 	add.w	fp, fp, #8
  40da4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40da50:	2c00      	cmp	r4, #0
  40da52:	bfa8      	it	ge
  40da54:	1b1b      	subge	r3, r3, r4
  40da56:	2b00      	cmp	r3, #0
  40da58:	461c      	mov	r4, r3
  40da5a:	f340 80a2 	ble.w	40dba2 <_svfprintf_r+0xcca>
  40da5e:	2c10      	cmp	r4, #16
  40da60:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40da62:	f340 8457 	ble.w	40e314 <_svfprintf_r+0x143c>
  40da66:	4652      	mov	r2, sl
  40da68:	2610      	movs	r6, #16
  40da6a:	4d45      	ldr	r5, [pc, #276]	; (40db80 <_svfprintf_r+0xca8>)
  40da6c:	f8dd a014 	ldr.w	sl, [sp, #20]
  40da70:	e003      	b.n	40da7a <_svfprintf_r+0xba2>
  40da72:	3c10      	subs	r4, #16
  40da74:	2c10      	cmp	r4, #16
  40da76:	f340 8085 	ble.w	40db84 <_svfprintf_r+0xcac>
  40da7a:	3301      	adds	r3, #1
  40da7c:	3210      	adds	r2, #16
  40da7e:	f8cb 5000 	str.w	r5, [fp]
  40da82:	f10b 0b08 	add.w	fp, fp, #8
  40da86:	2b07      	cmp	r3, #7
  40da88:	f84b 6c04 	str.w	r6, [fp, #-4]
  40da8c:	9223      	str	r2, [sp, #140]	; 0x8c
  40da8e:	9322      	str	r3, [sp, #136]	; 0x88
  40da90:	ddef      	ble.n	40da72 <_svfprintf_r+0xb9a>
  40da92:	4650      	mov	r0, sl
  40da94:	4649      	mov	r1, r9
  40da96:	aa21      	add	r2, sp, #132	; 0x84
  40da98:	46c3      	mov	fp, r8
  40da9a:	f004 fc37 	bl	41230c <__ssprint_r>
  40da9e:	2800      	cmp	r0, #0
  40daa0:	f47f aae0 	bne.w	40d064 <_svfprintf_r+0x18c>
  40daa4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40daa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40daa8:	e7e3      	b.n	40da72 <_svfprintf_r+0xb9a>
  40daaa:	9307      	str	r3, [sp, #28]
  40daac:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  40dab0:	f7ff bb1c 	b.w	40d0ec <_svfprintf_r+0x214>
  40dab4:	2d00      	cmp	r5, #0
  40dab6:	bf08      	it	eq
  40dab8:	2c0a      	cmpeq	r4, #10
  40daba:	f080 8117 	bcs.w	40dcec <_svfprintf_r+0xe14>
  40dabe:	f10d 0af8 	add.w	sl, sp, #248	; 0xf8
  40dac2:	3430      	adds	r4, #48	; 0x30
  40dac4:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  40dac8:	ebca 0308 	rsb	r3, sl, r8
  40dacc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40dad0:	9307      	str	r3, [sp, #28]
  40dad2:	f7ff bb0b 	b.w	40d0ec <_svfprintf_r+0x214>
  40dad6:	1e5f      	subs	r7, r3, #1
  40dad8:	2f00      	cmp	r7, #0
  40dada:	f77f af30 	ble.w	40d93e <_svfprintf_r+0xa66>
  40dade:	2f10      	cmp	r7, #16
  40dae0:	4d27      	ldr	r5, [pc, #156]	; (40db80 <_svfprintf_r+0xca8>)
  40dae2:	bfc8      	it	gt
  40dae4:	f04f 0a10 	movgt.w	sl, #16
  40dae8:	dc03      	bgt.n	40daf2 <_svfprintf_r+0xc1a>
  40daea:	e01c      	b.n	40db26 <_svfprintf_r+0xc4e>
  40daec:	3f10      	subs	r7, #16
  40daee:	2f10      	cmp	r7, #16
  40daf0:	dd19      	ble.n	40db26 <_svfprintf_r+0xc4e>
  40daf2:	3401      	adds	r4, #1
  40daf4:	3610      	adds	r6, #16
  40daf6:	f8cb 5000 	str.w	r5, [fp]
  40dafa:	f10b 0b08 	add.w	fp, fp, #8
  40dafe:	2c07      	cmp	r4, #7
  40db00:	f84b ac04 	str.w	sl, [fp, #-4]
  40db04:	9623      	str	r6, [sp, #140]	; 0x8c
  40db06:	9422      	str	r4, [sp, #136]	; 0x88
  40db08:	ddf0      	ble.n	40daec <_svfprintf_r+0xc14>
  40db0a:	9805      	ldr	r0, [sp, #20]
  40db0c:	4649      	mov	r1, r9
  40db0e:	aa21      	add	r2, sp, #132	; 0x84
  40db10:	46c3      	mov	fp, r8
  40db12:	f004 fbfb 	bl	41230c <__ssprint_r>
  40db16:	2800      	cmp	r0, #0
  40db18:	f47f aaa4 	bne.w	40d064 <_svfprintf_r+0x18c>
  40db1c:	3f10      	subs	r7, #16
  40db1e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40db20:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40db22:	2f10      	cmp	r7, #16
  40db24:	dce5      	bgt.n	40daf2 <_svfprintf_r+0xc1a>
  40db26:	3401      	adds	r4, #1
  40db28:	443e      	add	r6, r7
  40db2a:	f8cb 5000 	str.w	r5, [fp]
  40db2e:	2c07      	cmp	r4, #7
  40db30:	9623      	str	r6, [sp, #140]	; 0x8c
  40db32:	9422      	str	r4, [sp, #136]	; 0x88
  40db34:	f8cb 7004 	str.w	r7, [fp, #4]
  40db38:	f77f aeff 	ble.w	40d93a <_svfprintf_r+0xa62>
  40db3c:	9805      	ldr	r0, [sp, #20]
  40db3e:	4649      	mov	r1, r9
  40db40:	aa21      	add	r2, sp, #132	; 0x84
  40db42:	f004 fbe3 	bl	41230c <__ssprint_r>
  40db46:	2800      	cmp	r0, #0
  40db48:	f47f aa8c 	bne.w	40d064 <_svfprintf_r+0x18c>
  40db4c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40db4e:	46c3      	mov	fp, r8
  40db50:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40db52:	e6f4      	b.n	40d93e <_svfprintf_r+0xa66>
  40db54:	4692      	mov	sl, r2
  40db56:	3301      	adds	r3, #1
  40db58:	44a2      	add	sl, r4
  40db5a:	f8cb 5000 	str.w	r5, [fp]
  40db5e:	2b07      	cmp	r3, #7
  40db60:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40db64:	9322      	str	r3, [sp, #136]	; 0x88
  40db66:	f8cb 4004 	str.w	r4, [fp, #4]
  40db6a:	f77f ab9f 	ble.w	40d2ac <_svfprintf_r+0x3d4>
  40db6e:	e6f5      	b.n	40d95c <_svfprintf_r+0xa84>
  40db70:	9909      	ldr	r1, [sp, #36]	; 0x24
  40db72:	2500      	movs	r5, #0
  40db74:	460a      	mov	r2, r1
  40db76:	680c      	ldr	r4, [r1, #0]
  40db78:	3204      	adds	r2, #4
  40db7a:	9209      	str	r2, [sp, #36]	; 0x24
  40db7c:	f7ff ba8f 	b.w	40d09e <_svfprintf_r+0x1c6>
  40db80:	00413bd0 	.word	0x00413bd0
  40db84:	4692      	mov	sl, r2
  40db86:	3301      	adds	r3, #1
  40db88:	44a2      	add	sl, r4
  40db8a:	f8cb 5000 	str.w	r5, [fp]
  40db8e:	2b07      	cmp	r3, #7
  40db90:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40db94:	9322      	str	r3, [sp, #136]	; 0x88
  40db96:	f8cb 4004 	str.w	r4, [fp, #4]
  40db9a:	f300 82c4 	bgt.w	40e126 <_svfprintf_r+0x124e>
  40db9e:	f10b 0b08 	add.w	fp, fp, #8
  40dba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dba4:	990d      	ldr	r1, [sp, #52]	; 0x34
  40dba6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40dba8:	440a      	add	r2, r1
  40dbaa:	4616      	mov	r6, r2
  40dbac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dbae:	4293      	cmp	r3, r2
  40dbb0:	db45      	blt.n	40dc3e <_svfprintf_r+0xd66>
  40dbb2:	9a02      	ldr	r2, [sp, #8]
  40dbb4:	07d0      	lsls	r0, r2, #31
  40dbb6:	d442      	bmi.n	40dc3e <_svfprintf_r+0xd66>
  40dbb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dbba:	1bbc      	subs	r4, r7, r6
  40dbbc:	1ad3      	subs	r3, r2, r3
  40dbbe:	429c      	cmp	r4, r3
  40dbc0:	bfa8      	it	ge
  40dbc2:	461c      	movge	r4, r3
  40dbc4:	2c00      	cmp	r4, #0
  40dbc6:	4625      	mov	r5, r4
  40dbc8:	dd0e      	ble.n	40dbe8 <_svfprintf_r+0xd10>
  40dbca:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dbcc:	44a2      	add	sl, r4
  40dbce:	f8cb 6000 	str.w	r6, [fp]
  40dbd2:	3201      	adds	r2, #1
  40dbd4:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dbd8:	f8cb 4004 	str.w	r4, [fp, #4]
  40dbdc:	2a07      	cmp	r2, #7
  40dbde:	9222      	str	r2, [sp, #136]	; 0x88
  40dbe0:	f300 8285 	bgt.w	40e0ee <_svfprintf_r+0x1216>
  40dbe4:	f10b 0b08 	add.w	fp, fp, #8
  40dbe8:	2d00      	cmp	r5, #0
  40dbea:	bfac      	ite	ge
  40dbec:	1b5c      	subge	r4, r3, r5
  40dbee:	461c      	movlt	r4, r3
  40dbf0:	2c00      	cmp	r4, #0
  40dbf2:	f77f ab5d 	ble.w	40d2b0 <_svfprintf_r+0x3d8>
  40dbf6:	2c10      	cmp	r4, #16
  40dbf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dbfa:	f340 8381 	ble.w	40e300 <_svfprintf_r+0x1428>
  40dbfe:	2610      	movs	r6, #16
  40dc00:	4db6      	ldr	r5, [pc, #728]	; (40dedc <_svfprintf_r+0x1004>)
  40dc02:	4652      	mov	r2, sl
  40dc04:	9f05      	ldr	r7, [sp, #20]
  40dc06:	e002      	b.n	40dc0e <_svfprintf_r+0xd36>
  40dc08:	3c10      	subs	r4, #16
  40dc0a:	2c10      	cmp	r4, #16
  40dc0c:	dda2      	ble.n	40db54 <_svfprintf_r+0xc7c>
  40dc0e:	3301      	adds	r3, #1
  40dc10:	3210      	adds	r2, #16
  40dc12:	f8cb 5000 	str.w	r5, [fp]
  40dc16:	f10b 0b08 	add.w	fp, fp, #8
  40dc1a:	2b07      	cmp	r3, #7
  40dc1c:	f84b 6c04 	str.w	r6, [fp, #-4]
  40dc20:	9223      	str	r2, [sp, #140]	; 0x8c
  40dc22:	9322      	str	r3, [sp, #136]	; 0x88
  40dc24:	ddf0      	ble.n	40dc08 <_svfprintf_r+0xd30>
  40dc26:	4638      	mov	r0, r7
  40dc28:	4649      	mov	r1, r9
  40dc2a:	aa21      	add	r2, sp, #132	; 0x84
  40dc2c:	46c3      	mov	fp, r8
  40dc2e:	f004 fb6d 	bl	41230c <__ssprint_r>
  40dc32:	2800      	cmp	r0, #0
  40dc34:	f47f aa16 	bne.w	40d064 <_svfprintf_r+0x18c>
  40dc38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40dc3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40dc3c:	e7e4      	b.n	40dc08 <_svfprintf_r+0xd30>
  40dc3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40dc40:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40dc42:	3201      	adds	r2, #1
  40dc44:	9912      	ldr	r1, [sp, #72]	; 0x48
  40dc46:	4482      	add	sl, r0
  40dc48:	f8cb 0004 	str.w	r0, [fp, #4]
  40dc4c:	2a07      	cmp	r2, #7
  40dc4e:	f8cb 1000 	str.w	r1, [fp]
  40dc52:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40dc56:	9222      	str	r2, [sp, #136]	; 0x88
  40dc58:	f300 8258 	bgt.w	40e10c <_svfprintf_r+0x1234>
  40dc5c:	f10b 0b08 	add.w	fp, fp, #8
  40dc60:	e7aa      	b.n	40dbb8 <_svfprintf_r+0xce0>
  40dc62:	9b02      	ldr	r3, [sp, #8]
  40dc64:	07d9      	lsls	r1, r3, #31
  40dc66:	f53f ae32 	bmi.w	40d8ce <_svfprintf_r+0x9f6>
  40dc6a:	2301      	movs	r3, #1
  40dc6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40dc6e:	9623      	str	r6, [sp, #140]	; 0x8c
  40dc70:	441c      	add	r4, r3
  40dc72:	f8cb 2000 	str.w	r2, [fp]
  40dc76:	f8cb 3004 	str.w	r3, [fp, #4]
  40dc7a:	2c07      	cmp	r4, #7
  40dc7c:	9422      	str	r4, [sp, #136]	; 0x88
  40dc7e:	f77f ae5c 	ble.w	40d93a <_svfprintf_r+0xa62>
  40dc82:	e75b      	b.n	40db3c <_svfprintf_r+0xc64>
  40dc84:	9805      	ldr	r0, [sp, #20]
  40dc86:	4649      	mov	r1, r9
  40dc88:	aa21      	add	r2, sp, #132	; 0x84
  40dc8a:	f004 fb3f 	bl	41230c <__ssprint_r>
  40dc8e:	2800      	cmp	r0, #0
  40dc90:	f47f a9e8 	bne.w	40d064 <_svfprintf_r+0x18c>
  40dc94:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40dc96:	46c3      	mov	fp, r8
  40dc98:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40dc9a:	e626      	b.n	40d8ea <_svfprintf_r+0xa12>
  40dc9c:	9805      	ldr	r0, [sp, #20]
  40dc9e:	4649      	mov	r1, r9
  40dca0:	aa21      	add	r2, sp, #132	; 0x84
  40dca2:	f004 fb33 	bl	41230c <__ssprint_r>
  40dca6:	2800      	cmp	r0, #0
  40dca8:	f47f a9dc 	bne.w	40d064 <_svfprintf_r+0x18c>
  40dcac:	9e23      	ldr	r6, [sp, #140]	; 0x8c
  40dcae:	46c3      	mov	fp, r8
  40dcb0:	9c22      	ldr	r4, [sp, #136]	; 0x88
  40dcb2:	e629      	b.n	40d908 <_svfprintf_r+0xa30>
  40dcb4:	2b30      	cmp	r3, #48	; 0x30
  40dcb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40dcb8:	f43f adc1 	beq.w	40d83e <_svfprintf_r+0x966>
  40dcbc:	3b01      	subs	r3, #1
  40dcbe:	461a      	mov	r2, r3
  40dcc0:	930b      	str	r3, [sp, #44]	; 0x2c
  40dcc2:	2330      	movs	r3, #48	; 0x30
  40dcc4:	ebc2 0208 	rsb	r2, r2, r8
  40dcc8:	f801 3c01 	strb.w	r3, [r1, #-1]
  40dccc:	9207      	str	r2, [sp, #28]
  40dcce:	f7ff ba0d 	b.w	40d0ec <_svfprintf_r+0x214>
  40dcd2:	9805      	ldr	r0, [sp, #20]
  40dcd4:	4649      	mov	r1, r9
  40dcd6:	aa21      	add	r2, sp, #132	; 0x84
  40dcd8:	f004 fb18 	bl	41230c <__ssprint_r>
  40dcdc:	2800      	cmp	r0, #0
  40dcde:	f47f a9c1 	bne.w	40d064 <_svfprintf_r+0x18c>
  40dce2:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40dce6:	46c3      	mov	fp, r8
  40dce8:	f7ff ba92 	b.w	40d210 <_svfprintf_r+0x338>
  40dcec:	46c2      	mov	sl, r8
  40dcee:	f8cd c00c 	str.w	ip, [sp, #12]
  40dcf2:	4620      	mov	r0, r4
  40dcf4:	4629      	mov	r1, r5
  40dcf6:	220a      	movs	r2, #10
  40dcf8:	2300      	movs	r3, #0
  40dcfa:	f004 fd73 	bl	4127e4 <__aeabi_uldivmod>
  40dcfe:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40dd02:	4620      	mov	r0, r4
  40dd04:	4629      	mov	r1, r5
  40dd06:	2300      	movs	r3, #0
  40dd08:	220a      	movs	r2, #10
  40dd0a:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40dd0e:	f004 fd69 	bl	4127e4 <__aeabi_uldivmod>
  40dd12:	4604      	mov	r4, r0
  40dd14:	460d      	mov	r5, r1
  40dd16:	ea54 0305 	orrs.w	r3, r4, r5
  40dd1a:	d1ea      	bne.n	40dcf2 <_svfprintf_r+0xe1a>
  40dd1c:	ebca 0308 	rsb	r3, sl, r8
  40dd20:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40dd24:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  40dd28:	9307      	str	r3, [sp, #28]
  40dd2a:	f7ff b9df 	b.w	40d0ec <_svfprintf_r+0x214>
  40dd2e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
  40dd32:	f7fc fc9d 	bl	40a670 <__fpclassifyd>
  40dd36:	2800      	cmp	r0, #0
  40dd38:	f040 80d8 	bne.w	40deec <_svfprintf_r+0x1014>
  40dd3c:	9c02      	ldr	r4, [sp, #8]
  40dd3e:	2103      	movs	r1, #3
  40dd40:	4a67      	ldr	r2, [pc, #412]	; (40dee0 <_svfprintf_r+0x1008>)
  40dd42:	4b68      	ldr	r3, [pc, #416]	; (40dee4 <_svfprintf_r+0x100c>)
  40dd44:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40dd48:	900c      	str	r0, [sp, #48]	; 0x30
  40dd4a:	2e47      	cmp	r6, #71	; 0x47
  40dd4c:	bfd8      	it	le
  40dd4e:	461a      	movle	r2, r3
  40dd50:	9103      	str	r1, [sp, #12]
  40dd52:	9402      	str	r4, [sp, #8]
  40dd54:	900d      	str	r0, [sp, #52]	; 0x34
  40dd56:	920b      	str	r2, [sp, #44]	; 0x2c
  40dd58:	9107      	str	r1, [sp, #28]
  40dd5a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40dd5e:	f7ff b9cd 	b.w	40d0fc <_svfprintf_r+0x224>
  40dd62:	ed93 7b00 	vldr	d7, [r3]
  40dd66:	3308      	adds	r3, #8
  40dd68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40dd6c:	9309      	str	r3, [sp, #36]	; 0x24
  40dd6e:	e484      	b.n	40d67a <_svfprintf_r+0x7a2>
  40dd70:	9b02      	ldr	r3, [sp, #8]
  40dd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd74:	f013 0f40 	tst.w	r3, #64	; 0x40
  40dd78:	4613      	mov	r3, r2
  40dd7a:	f000 80a9 	beq.w	40ded0 <_svfprintf_r+0xff8>
  40dd7e:	3304      	adds	r3, #4
  40dd80:	8814      	ldrh	r4, [r2, #0]
  40dd82:	2500      	movs	r5, #0
  40dd84:	9309      	str	r3, [sp, #36]	; 0x24
  40dd86:	f7ff bbd9 	b.w	40d53c <_svfprintf_r+0x664>
  40dd8a:	9b02      	ldr	r3, [sp, #8]
  40dd8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd8e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40dd92:	4613      	mov	r3, r2
  40dd94:	f43f ac47 	beq.w	40d626 <_svfprintf_r+0x74e>
  40dd98:	f9b2 4000 	ldrsh.w	r4, [r2]
  40dd9c:	3304      	adds	r3, #4
  40dd9e:	17e5      	asrs	r5, r4, #31
  40dda0:	9309      	str	r3, [sp, #36]	; 0x24
  40dda2:	4620      	mov	r0, r4
  40dda4:	4629      	mov	r1, r5
  40dda6:	f7ff bb1d 	b.w	40d3e4 <_svfprintf_r+0x50c>
  40ddaa:	9b02      	ldr	r3, [sp, #8]
  40ddac:	06de      	lsls	r6, r3, #27
  40ddae:	d40b      	bmi.n	40ddc8 <_svfprintf_r+0xef0>
  40ddb0:	9b02      	ldr	r3, [sp, #8]
  40ddb2:	065d      	lsls	r5, r3, #25
  40ddb4:	d508      	bpl.n	40ddc8 <_svfprintf_r+0xef0>
  40ddb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ddb8:	6813      	ldr	r3, [r2, #0]
  40ddba:	3204      	adds	r2, #4
  40ddbc:	9209      	str	r2, [sp, #36]	; 0x24
  40ddbe:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40ddc2:	801a      	strh	r2, [r3, #0]
  40ddc4:	f7ff b8b0 	b.w	40cf28 <_svfprintf_r+0x50>
  40ddc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ddca:	6813      	ldr	r3, [r2, #0]
  40ddcc:	3204      	adds	r2, #4
  40ddce:	9209      	str	r2, [sp, #36]	; 0x24
  40ddd0:	9a06      	ldr	r2, [sp, #24]
  40ddd2:	601a      	str	r2, [r3, #0]
  40ddd4:	f7ff b8a8 	b.w	40cf28 <_svfprintf_r+0x50>
  40ddd8:	9b02      	ldr	r3, [sp, #8]
  40ddda:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dddc:	f013 0f40 	tst.w	r3, #64	; 0x40
  40dde0:	4613      	mov	r3, r2
  40dde2:	f43f ab94 	beq.w	40d50e <_svfprintf_r+0x636>
  40dde6:	8814      	ldrh	r4, [r2, #0]
  40dde8:	3204      	adds	r2, #4
  40ddea:	2500      	movs	r5, #0
  40ddec:	2301      	movs	r3, #1
  40ddee:	9209      	str	r2, [sp, #36]	; 0x24
  40ddf0:	f7ff b955 	b.w	40d09e <_svfprintf_r+0x1c6>
  40ddf4:	4d39      	ldr	r5, [pc, #228]	; (40dedc <_svfprintf_r+0x1004>)
  40ddf6:	f7ff ba38 	b.w	40d26a <_svfprintf_r+0x392>
  40ddfa:	9805      	ldr	r0, [sp, #20]
  40ddfc:	4649      	mov	r1, r9
  40ddfe:	aa21      	add	r2, sp, #132	; 0x84
  40de00:	f004 fa84 	bl	41230c <__ssprint_r>
  40de04:	2800      	cmp	r0, #0
  40de06:	f47f a92d 	bne.w	40d064 <_svfprintf_r+0x18c>
  40de0a:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40de0e:	46c3      	mov	fp, r8
  40de10:	e4ad      	b.n	40d76e <_svfprintf_r+0x896>
  40de12:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40de14:	2201      	movs	r2, #1
  40de16:	f10a 0a01 	add.w	sl, sl, #1
  40de1a:	4933      	ldr	r1, [pc, #204]	; (40dee8 <_svfprintf_r+0x1010>)
  40de1c:	4413      	add	r3, r2
  40de1e:	f8cb 2004 	str.w	r2, [fp, #4]
  40de22:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40de26:	2b07      	cmp	r3, #7
  40de28:	f8cb 1000 	str.w	r1, [fp]
  40de2c:	9322      	str	r3, [sp, #136]	; 0x88
  40de2e:	f300 80e6 	bgt.w	40dffe <_svfprintf_r+0x1126>
  40de32:	f10b 0b08 	add.w	fp, fp, #8
  40de36:	b92c      	cbnz	r4, 40de44 <_svfprintf_r+0xf6c>
  40de38:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40de3a:	b91b      	cbnz	r3, 40de44 <_svfprintf_r+0xf6c>
  40de3c:	9b02      	ldr	r3, [sp, #8]
  40de3e:	07dd      	lsls	r5, r3, #31
  40de40:	f57f aa36 	bpl.w	40d2b0 <_svfprintf_r+0x3d8>
  40de44:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40de46:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40de48:	3301      	adds	r3, #1
  40de4a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40de4c:	eb0a 0201 	add.w	r2, sl, r1
  40de50:	f8cb 1004 	str.w	r1, [fp, #4]
  40de54:	2b07      	cmp	r3, #7
  40de56:	f8cb 0000 	str.w	r0, [fp]
  40de5a:	9223      	str	r2, [sp, #140]	; 0x8c
  40de5c:	9322      	str	r3, [sp, #136]	; 0x88
  40de5e:	f300 822c 	bgt.w	40e2ba <_svfprintf_r+0x13e2>
  40de62:	f10b 0b08 	add.w	fp, fp, #8
  40de66:	4264      	negs	r4, r4
  40de68:	2c00      	cmp	r4, #0
  40de6a:	f340 8106 	ble.w	40e07a <_svfprintf_r+0x11a2>
  40de6e:	2c10      	cmp	r4, #16
  40de70:	4d1a      	ldr	r5, [pc, #104]	; (40dedc <_svfprintf_r+0x1004>)
  40de72:	f340 812f 	ble.w	40e0d4 <_svfprintf_r+0x11fc>
  40de76:	2610      	movs	r6, #16
  40de78:	9f05      	ldr	r7, [sp, #20]
  40de7a:	e003      	b.n	40de84 <_svfprintf_r+0xfac>
  40de7c:	3c10      	subs	r4, #16
  40de7e:	2c10      	cmp	r4, #16
  40de80:	f340 8128 	ble.w	40e0d4 <_svfprintf_r+0x11fc>
  40de84:	3301      	adds	r3, #1
  40de86:	3210      	adds	r2, #16
  40de88:	f8cb 5000 	str.w	r5, [fp]
  40de8c:	f10b 0b08 	add.w	fp, fp, #8
  40de90:	2b07      	cmp	r3, #7
  40de92:	f84b 6c04 	str.w	r6, [fp, #-4]
  40de96:	9223      	str	r2, [sp, #140]	; 0x8c
  40de98:	9322      	str	r3, [sp, #136]	; 0x88
  40de9a:	ddef      	ble.n	40de7c <_svfprintf_r+0xfa4>
  40de9c:	4638      	mov	r0, r7
  40de9e:	4649      	mov	r1, r9
  40dea0:	aa21      	add	r2, sp, #132	; 0x84
  40dea2:	46c3      	mov	fp, r8
  40dea4:	f004 fa32 	bl	41230c <__ssprint_r>
  40dea8:	2800      	cmp	r0, #0
  40deaa:	f47f a8db 	bne.w	40d064 <_svfprintf_r+0x18c>
  40deae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40deb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40deb2:	e7e3      	b.n	40de7c <_svfprintf_r+0xfa4>
  40deb4:	f041 0120 	orr.w	r1, r1, #32
  40deb8:	785e      	ldrb	r6, [r3, #1]
  40deba:	9102      	str	r1, [sp, #8]
  40debc:	1c59      	adds	r1, r3, #1
  40debe:	f7ff b861 	b.w	40cf84 <_svfprintf_r+0xac>
  40dec2:	9808      	ldr	r0, [sp, #32]
  40dec4:	9109      	str	r1, [sp, #36]	; 0x24
  40dec6:	4619      	mov	r1, r3
  40dec8:	4240      	negs	r0, r0
  40deca:	9008      	str	r0, [sp, #32]
  40decc:	f7ff ba45 	b.w	40d35a <_svfprintf_r+0x482>
  40ded0:	3304      	adds	r3, #4
  40ded2:	6814      	ldr	r4, [r2, #0]
  40ded4:	2500      	movs	r5, #0
  40ded6:	9309      	str	r3, [sp, #36]	; 0x24
  40ded8:	f7ff bb30 	b.w	40d53c <_svfprintf_r+0x664>
  40dedc:	00413bd0 	.word	0x00413bd0
  40dee0:	00413bfc 	.word	0x00413bfc
  40dee4:	00413bf8 	.word	0x00413bf8
  40dee8:	00413c30 	.word	0x00413c30
  40deec:	1c7c      	adds	r4, r7, #1
  40deee:	f026 0520 	bic.w	r5, r6, #32
  40def2:	f000 8091 	beq.w	40e018 <_svfprintf_r+0x1140>
  40def6:	2d47      	cmp	r5, #71	; 0x47
  40def8:	f040 808f 	bne.w	40e01a <_svfprintf_r+0x1142>
  40defc:	2f00      	cmp	r7, #0
  40defe:	f040 808c 	bne.w	40e01a <_svfprintf_r+0x1142>
  40df02:	9a02      	ldr	r2, [sp, #8]
  40df04:	2547      	movs	r5, #71	; 0x47
  40df06:	2701      	movs	r7, #1
  40df08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40df0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40df10:	920a      	str	r2, [sp, #40]	; 0x28
  40df12:	2900      	cmp	r1, #0
  40df14:	f2c0 81de 	blt.w	40e2d4 <_svfprintf_r+0x13fc>
  40df18:	f04f 0a00 	mov.w	sl, #0
  40df1c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40df20:	aa1c      	add	r2, sp, #112	; 0x70
  40df22:	ab1f      	add	r3, sp, #124	; 0x7c
  40df24:	9805      	ldr	r0, [sp, #20]
  40df26:	2102      	movs	r1, #2
  40df28:	9200      	str	r2, [sp, #0]
  40df2a:	463a      	mov	r2, r7
  40df2c:	9301      	str	r3, [sp, #4]
  40df2e:	ab1b      	add	r3, sp, #108	; 0x6c
  40df30:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40df34:	f001 f9d0 	bl	40f2d8 <_dtoa_r>
  40df38:	2d47      	cmp	r5, #71	; 0x47
  40df3a:	900b      	str	r0, [sp, #44]	; 0x2c
  40df3c:	f040 8225 	bne.w	40e38a <_svfprintf_r+0x14b2>
  40df40:	9b02      	ldr	r3, [sp, #8]
  40df42:	07db      	lsls	r3, r3, #31
  40df44:	f140 81de 	bpl.w	40e304 <_svfprintf_r+0x142c>
  40df48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40df4a:	19dc      	adds	r4, r3, r7
  40df4c:	2200      	movs	r2, #0
  40df4e:	2300      	movs	r3, #0
  40df50:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40df54:	f7fd f86e 	bl	40b034 <__aeabi_dcmpeq>
  40df58:	2800      	cmp	r0, #0
  40df5a:	f040 815a 	bne.w	40e212 <_svfprintf_r+0x133a>
  40df5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40df60:	429c      	cmp	r4, r3
  40df62:	d906      	bls.n	40df72 <_svfprintf_r+0x109a>
  40df64:	2130      	movs	r1, #48	; 0x30
  40df66:	1c5a      	adds	r2, r3, #1
  40df68:	921f      	str	r2, [sp, #124]	; 0x7c
  40df6a:	7019      	strb	r1, [r3, #0]
  40df6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40df6e:	429c      	cmp	r4, r3
  40df70:	d8f9      	bhi.n	40df66 <_svfprintf_r+0x108e>
  40df72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40df74:	2d47      	cmp	r5, #71	; 0x47
  40df76:	eba3 0302 	sub.w	r3, r3, r2
  40df7a:	9310      	str	r3, [sp, #64]	; 0x40
  40df7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40df7e:	f040 8125 	bne.w	40e1cc <_svfprintf_r+0x12f4>
  40df82:	429f      	cmp	r7, r3
  40df84:	f2c0 8152 	blt.w	40e22c <_svfprintf_r+0x1354>
  40df88:	1cd8      	adds	r0, r3, #3
  40df8a:	f2c0 814f 	blt.w	40e22c <_svfprintf_r+0x1354>
  40df8e:	2667      	movs	r6, #103	; 0x67
  40df90:	930d      	str	r3, [sp, #52]	; 0x34
  40df92:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40df94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40df96:	4293      	cmp	r3, r2
  40df98:	f300 81a5 	bgt.w	40e2e6 <_svfprintf_r+0x140e>
  40df9c:	9b02      	ldr	r3, [sp, #8]
  40df9e:	07db      	lsls	r3, r3, #31
  40dfa0:	f100 81b2 	bmi.w	40e308 <_svfprintf_r+0x1430>
  40dfa4:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
  40dfa8:	9207      	str	r2, [sp, #28]
  40dfaa:	f1ba 0f00 	cmp.w	sl, #0
  40dfae:	f040 8122 	bne.w	40e1f6 <_svfprintf_r+0x131e>
  40dfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40dfb4:	9703      	str	r7, [sp, #12]
  40dfb6:	9302      	str	r3, [sp, #8]
  40dfb8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  40dfbc:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40dfc0:	f7ff b89c 	b.w	40d0fc <_svfprintf_r+0x224>
  40dfc4:	9805      	ldr	r0, [sp, #20]
  40dfc6:	4649      	mov	r1, r9
  40dfc8:	aa21      	add	r2, sp, #132	; 0x84
  40dfca:	f004 f99f 	bl	41230c <__ssprint_r>
  40dfce:	2800      	cmp	r0, #0
  40dfd0:	f47f a848 	bne.w	40d064 <_svfprintf_r+0x18c>
  40dfd4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40dfd8:	46c3      	mov	fp, r8
  40dfda:	f7ff bbe1 	b.w	40d7a0 <_svfprintf_r+0x8c8>
  40dfde:	9805      	ldr	r0, [sp, #20]
  40dfe0:	2140      	movs	r1, #64	; 0x40
  40dfe2:	f7fd f955 	bl	40b290 <_malloc_r>
  40dfe6:	f8c9 0000 	str.w	r0, [r9]
  40dfea:	f8c9 0010 	str.w	r0, [r9, #16]
  40dfee:	2800      	cmp	r0, #0
  40dff0:	f000 81d6 	beq.w	40e3a0 <_svfprintf_r+0x14c8>
  40dff4:	2340      	movs	r3, #64	; 0x40
  40dff6:	f8c9 3014 	str.w	r3, [r9, #20]
  40dffa:	f7fe bf85 	b.w	40cf08 <_svfprintf_r+0x30>
  40dffe:	9805      	ldr	r0, [sp, #20]
  40e000:	4649      	mov	r1, r9
  40e002:	aa21      	add	r2, sp, #132	; 0x84
  40e004:	f004 f982 	bl	41230c <__ssprint_r>
  40e008:	2800      	cmp	r0, #0
  40e00a:	f47f a82b 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e00e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e010:	46c3      	mov	fp, r8
  40e012:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e016:	e70e      	b.n	40de36 <_svfprintf_r+0xf5e>
  40e018:	2706      	movs	r7, #6
  40e01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40e01c:	9a02      	ldr	r2, [sp, #8]
  40e01e:	2b00      	cmp	r3, #0
  40e020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40e024:	920a      	str	r2, [sp, #40]	; 0x28
  40e026:	f2c0 8155 	blt.w	40e2d4 <_svfprintf_r+0x13fc>
  40e02a:	f04f 0a00 	mov.w	sl, #0
  40e02e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
  40e032:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
  40e036:	2d46      	cmp	r5, #70	; 0x46
  40e038:	f000 809d 	beq.w	40e176 <_svfprintf_r+0x129e>
  40e03c:	2d45      	cmp	r5, #69	; 0x45
  40e03e:	f47f af6f 	bne.w	40df20 <_svfprintf_r+0x1048>
  40e042:	a91c      	add	r1, sp, #112	; 0x70
  40e044:	ab1f      	add	r3, sp, #124	; 0x7c
  40e046:	1c7c      	adds	r4, r7, #1
  40e048:	9805      	ldr	r0, [sp, #20]
  40e04a:	e88d 000a 	stmia.w	sp, {r1, r3}
  40e04e:	4622      	mov	r2, r4
  40e050:	2102      	movs	r1, #2
  40e052:	ab1b      	add	r3, sp, #108	; 0x6c
  40e054:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40e058:	f001 f93e 	bl	40f2d8 <_dtoa_r>
  40e05c:	900b      	str	r0, [sp, #44]	; 0x2c
  40e05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40e060:	441c      	add	r4, r3
  40e062:	e773      	b.n	40df4c <_svfprintf_r+0x1074>
  40e064:	9805      	ldr	r0, [sp, #20]
  40e066:	4649      	mov	r1, r9
  40e068:	aa21      	add	r2, sp, #132	; 0x84
  40e06a:	f004 f94f 	bl	41230c <__ssprint_r>
  40e06e:	2800      	cmp	r0, #0
  40e070:	f47e aff8 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e074:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40e076:	46c3      	mov	fp, r8
  40e078:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40e07a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e07c:	3301      	adds	r3, #1
  40e07e:	eb02 0a00 	add.w	sl, r2, r0
  40e082:	2b07      	cmp	r3, #7
  40e084:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40e086:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  40e08a:	f8cb 2000 	str.w	r2, [fp]
  40e08e:	9322      	str	r3, [sp, #136]	; 0x88
  40e090:	f8cb 0004 	str.w	r0, [fp, #4]
  40e094:	f77f a90a 	ble.w	40d2ac <_svfprintf_r+0x3d4>
  40e098:	e460      	b.n	40d95c <_svfprintf_r+0xa84>
  40e09a:	950c      	str	r5, [sp, #48]	; 0x30
  40e09c:	f7fd fe3e 	bl	40bd1c <strlen>
  40e0a0:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40e0a4:	9007      	str	r0, [sp, #28]
  40e0a6:	9709      	str	r7, [sp, #36]	; 0x24
  40e0a8:	950d      	str	r5, [sp, #52]	; 0x34
  40e0aa:	9303      	str	r3, [sp, #12]
  40e0ac:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40e0b0:	f7ff b824 	b.w	40d0fc <_svfprintf_r+0x224>
  40e0b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40e0b6:	4fb6      	ldr	r7, [pc, #728]	; (40e390 <_svfprintf_r+0x14b8>)
  40e0b8:	f7ff b86c 	b.w	40d194 <_svfprintf_r+0x2bc>
  40e0bc:	9805      	ldr	r0, [sp, #20]
  40e0be:	4649      	mov	r1, r9
  40e0c0:	aa21      	add	r2, sp, #132	; 0x84
  40e0c2:	f004 f923 	bl	41230c <__ssprint_r>
  40e0c6:	2800      	cmp	r0, #0
  40e0c8:	f47e afcc 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e0cc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e0d0:	46c3      	mov	fp, r8
  40e0d2:	e4bc      	b.n	40da4e <_svfprintf_r+0xb76>
  40e0d4:	3301      	adds	r3, #1
  40e0d6:	4422      	add	r2, r4
  40e0d8:	f8cb 5000 	str.w	r5, [fp]
  40e0dc:	2b07      	cmp	r3, #7
  40e0de:	9223      	str	r2, [sp, #140]	; 0x8c
  40e0e0:	9322      	str	r3, [sp, #136]	; 0x88
  40e0e2:	f8cb 4004 	str.w	r4, [fp, #4]
  40e0e6:	dcbd      	bgt.n	40e064 <_svfprintf_r+0x118c>
  40e0e8:	f10b 0b08 	add.w	fp, fp, #8
  40e0ec:	e7c5      	b.n	40e07a <_svfprintf_r+0x11a2>
  40e0ee:	9805      	ldr	r0, [sp, #20]
  40e0f0:	4649      	mov	r1, r9
  40e0f2:	aa21      	add	r2, sp, #132	; 0x84
  40e0f4:	f004 f90a 	bl	41230c <__ssprint_r>
  40e0f8:	2800      	cmp	r0, #0
  40e0fa:	f47e afb3 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e0fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40e100:	46c3      	mov	fp, r8
  40e102:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e104:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e108:	1ad3      	subs	r3, r2, r3
  40e10a:	e56d      	b.n	40dbe8 <_svfprintf_r+0xd10>
  40e10c:	9805      	ldr	r0, [sp, #20]
  40e10e:	4649      	mov	r1, r9
  40e110:	aa21      	add	r2, sp, #132	; 0x84
  40e112:	f004 f8fb 	bl	41230c <__ssprint_r>
  40e116:	2800      	cmp	r0, #0
  40e118:	f47e afa4 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40e11e:	46c3      	mov	fp, r8
  40e120:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e124:	e548      	b.n	40dbb8 <_svfprintf_r+0xce0>
  40e126:	9805      	ldr	r0, [sp, #20]
  40e128:	4649      	mov	r1, r9
  40e12a:	aa21      	add	r2, sp, #132	; 0x84
  40e12c:	f004 f8ee 	bl	41230c <__ssprint_r>
  40e130:	2800      	cmp	r0, #0
  40e132:	f47e af97 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e136:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
  40e13a:	46c3      	mov	fp, r8
  40e13c:	e531      	b.n	40dba2 <_svfprintf_r+0xcca>
  40e13e:	9b07      	ldr	r3, [sp, #28]
  40e140:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40e144:	2b06      	cmp	r3, #6
  40e146:	9709      	str	r7, [sp, #36]	; 0x24
  40e148:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
  40e14c:	bf28      	it	cs
  40e14e:	2306      	movcs	r3, #6
  40e150:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40e154:	9307      	str	r3, [sp, #28]
  40e156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e15a:	9303      	str	r3, [sp, #12]
  40e15c:	4b8d      	ldr	r3, [pc, #564]	; (40e394 <_svfprintf_r+0x14bc>)
  40e15e:	930b      	str	r3, [sp, #44]	; 0x2c
  40e160:	f7fe bfcc 	b.w	40d0fc <_svfprintf_r+0x224>
  40e164:	4f8a      	ldr	r7, [pc, #552]	; (40e390 <_svfprintf_r+0x14b8>)
  40e166:	f7ff b8d2 	b.w	40d30e <_svfprintf_r+0x436>
  40e16a:	232d      	movs	r3, #45	; 0x2d
  40e16c:	469c      	mov	ip, r3
  40e16e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  40e172:	f7ff ba94 	b.w	40d69e <_svfprintf_r+0x7c6>
  40e176:	aa1c      	add	r2, sp, #112	; 0x70
  40e178:	ab1f      	add	r3, sp, #124	; 0x7c
  40e17a:	9805      	ldr	r0, [sp, #20]
  40e17c:	2103      	movs	r1, #3
  40e17e:	9200      	str	r2, [sp, #0]
  40e180:	463a      	mov	r2, r7
  40e182:	9301      	str	r3, [sp, #4]
  40e184:	ab1b      	add	r3, sp, #108	; 0x6c
  40e186:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
  40e18a:	f001 f8a5 	bl	40f2d8 <_dtoa_r>
  40e18e:	7803      	ldrb	r3, [r0, #0]
  40e190:	900b      	str	r0, [sp, #44]	; 0x2c
  40e192:	eb00 0c07 	add.w	ip, r0, r7
  40e196:	2b30      	cmp	r3, #48	; 0x30
  40e198:	f040 80af 	bne.w	40e2fa <_svfprintf_r+0x1422>
  40e19c:	2200      	movs	r2, #0
  40e19e:	2300      	movs	r3, #0
  40e1a0:	f8cd c00c 	str.w	ip, [sp, #12]
  40e1a4:	f04f 0401 	mov.w	r4, #1
  40e1a8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40e1ac:	f7fc ff42 	bl	40b034 <__aeabi_dcmpeq>
  40e1b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40e1b4:	b108      	cbz	r0, 40e1ba <_svfprintf_r+0x12e2>
  40e1b6:	f04f 0400 	mov.w	r4, #0
  40e1ba:	f014 0fff 	tst.w	r4, #255	; 0xff
  40e1be:	f000 809c 	beq.w	40e2fa <_svfprintf_r+0x1422>
  40e1c2:	f1c7 0401 	rsb	r4, r7, #1
  40e1c6:	941b      	str	r4, [sp, #108]	; 0x6c
  40e1c8:	4464      	add	r4, ip
  40e1ca:	e6bf      	b.n	40df4c <_svfprintf_r+0x1074>
  40e1cc:	2e65      	cmp	r6, #101	; 0x65
  40e1ce:	dd2e      	ble.n	40e22e <_svfprintf_r+0x1356>
  40e1d0:	2e66      	cmp	r6, #102	; 0x66
  40e1d2:	930d      	str	r3, [sp, #52]	; 0x34
  40e1d4:	f47f aedd 	bne.w	40df92 <_svfprintf_r+0x10ba>
  40e1d8:	2b00      	cmp	r3, #0
  40e1da:	f340 80ba 	ble.w	40e352 <_svfprintf_r+0x147a>
  40e1de:	2f00      	cmp	r7, #0
  40e1e0:	f040 80a2 	bne.w	40e328 <_svfprintf_r+0x1450>
  40e1e4:	9b02      	ldr	r3, [sp, #8]
  40e1e6:	07d9      	lsls	r1, r3, #31
  40e1e8:	f100 809e 	bmi.w	40e328 <_svfprintf_r+0x1450>
  40e1ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e1ee:	ea22 77e2 	bic.w	r7, r2, r2, asr #31
  40e1f2:	9207      	str	r2, [sp, #28]
  40e1f4:	e6d9      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40e1f8:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
  40e1fc:	9703      	str	r7, [sp, #12]
  40e1fe:	9302      	str	r3, [sp, #8]
  40e200:	2300      	movs	r3, #0
  40e202:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
  40e206:	930c      	str	r3, [sp, #48]	; 0x30
  40e208:	f7fe bf7b 	b.w	40d102 <_svfprintf_r+0x22a>
  40e20c:	4d62      	ldr	r5, [pc, #392]	; (40e398 <_svfprintf_r+0x14c0>)
  40e20e:	f7ff bb48 	b.w	40d8a2 <_svfprintf_r+0x9ca>
  40e212:	4623      	mov	r3, r4
  40e214:	e6ad      	b.n	40df72 <_svfprintf_r+0x109a>
  40e216:	9b07      	ldr	r3, [sp, #28]
  40e218:	900c      	str	r0, [sp, #48]	; 0x30
  40e21a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40e21e:	9709      	str	r7, [sp, #36]	; 0x24
  40e220:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
  40e224:	9303      	str	r3, [sp, #12]
  40e226:	900d      	str	r0, [sp, #52]	; 0x34
  40e228:	f7fe bf68 	b.w	40d0fc <_svfprintf_r+0x224>
  40e22c:	3e02      	subs	r6, #2
  40e22e:	3b01      	subs	r3, #1
  40e230:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  40e234:	2b00      	cmp	r3, #0
  40e236:	931b      	str	r3, [sp, #108]	; 0x6c
  40e238:	db7d      	blt.n	40e336 <_svfprintf_r+0x145e>
  40e23a:	222b      	movs	r2, #43	; 0x2b
  40e23c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40e240:	2b09      	cmp	r3, #9
  40e242:	dd69      	ble.n	40e318 <_svfprintf_r+0x1440>
  40e244:	f10d 0083 	add.w	r0, sp, #131	; 0x83
  40e248:	4601      	mov	r1, r0
  40e24a:	4a54      	ldr	r2, [pc, #336]	; (40e39c <_svfprintf_r+0x14c4>)
  40e24c:	fb82 2403 	smull	r2, r4, r2, r3
  40e250:	17da      	asrs	r2, r3, #31
  40e252:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40e256:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40e25a:	2c09      	cmp	r4, #9
  40e25c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40e260:	4623      	mov	r3, r4
  40e262:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40e266:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40e26a:	dcee      	bgt.n	40e24a <_svfprintf_r+0x1372>
  40e26c:	3330      	adds	r3, #48	; 0x30
  40e26e:	460a      	mov	r2, r1
  40e270:	b2db      	uxtb	r3, r3
  40e272:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40e276:	4290      	cmp	r0, r2
  40e278:	f240 8099 	bls.w	40e3ae <_svfprintf_r+0x14d6>
  40e27c:	460a      	mov	r2, r1
  40e27e:	f10d 0476 	add.w	r4, sp, #118	; 0x76
  40e282:	e001      	b.n	40e288 <_svfprintf_r+0x13b0>
  40e284:	f812 3b01 	ldrb.w	r3, [r2], #1
  40e288:	4282      	cmp	r2, r0
  40e28a:	f804 3b01 	strb.w	r3, [r4], #1
  40e28e:	d1f9      	bne.n	40e284 <_svfprintf_r+0x13ac>
  40e290:	ab21      	add	r3, sp, #132	; 0x84
  40e292:	f10d 0276 	add.w	r2, sp, #118	; 0x76
  40e296:	1a5b      	subs	r3, r3, r1
  40e298:	4413      	add	r3, r2
  40e29a:	aa1d      	add	r2, sp, #116	; 0x74
  40e29c:	1a9b      	subs	r3, r3, r2
  40e29e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e2a0:	9315      	str	r3, [sp, #84]	; 0x54
  40e2a2:	2a01      	cmp	r2, #1
  40e2a4:	4413      	add	r3, r2
  40e2a6:	9307      	str	r3, [sp, #28]
  40e2a8:	dd4a      	ble.n	40e340 <_svfprintf_r+0x1468>
  40e2aa:	9b07      	ldr	r3, [sp, #28]
  40e2ac:	2200      	movs	r2, #0
  40e2ae:	3301      	adds	r3, #1
  40e2b0:	920d      	str	r2, [sp, #52]	; 0x34
  40e2b2:	9307      	str	r3, [sp, #28]
  40e2b4:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e2b8:	e677      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e2ba:	9805      	ldr	r0, [sp, #20]
  40e2bc:	4649      	mov	r1, r9
  40e2be:	aa21      	add	r2, sp, #132	; 0x84
  40e2c0:	f004 f824 	bl	41230c <__ssprint_r>
  40e2c4:	2800      	cmp	r0, #0
  40e2c6:	f47e aecd 	bne.w	40d064 <_svfprintf_r+0x18c>
  40e2ca:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e2cc:	46c3      	mov	fp, r8
  40e2ce:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40e2d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40e2d2:	e5c8      	b.n	40de66 <_svfprintf_r+0xf8e>
  40e2d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40e2d8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40e2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40e2e0:	9016      	str	r0, [sp, #88]	; 0x58
  40e2e2:	9317      	str	r3, [sp, #92]	; 0x5c
  40e2e4:	e6a7      	b.n	40e036 <_svfprintf_r+0x115e>
  40e2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e2e8:	2b00      	cmp	r3, #0
  40e2ea:	dd39      	ble.n	40e360 <_svfprintf_r+0x1488>
  40e2ec:	2401      	movs	r4, #1
  40e2ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e2f0:	18e3      	adds	r3, r4, r3
  40e2f2:	9307      	str	r3, [sp, #28]
  40e2f4:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e2f8:	e657      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e2fa:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
  40e2fc:	4464      	add	r4, ip
  40e2fe:	e625      	b.n	40df4c <_svfprintf_r+0x1074>
  40e300:	4d25      	ldr	r5, [pc, #148]	; (40e398 <_svfprintf_r+0x14c0>)
  40e302:	e428      	b.n	40db56 <_svfprintf_r+0xc7e>
  40e304:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40e306:	e634      	b.n	40df72 <_svfprintf_r+0x109a>
  40e308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e30a:	3301      	adds	r3, #1
  40e30c:	9307      	str	r3, [sp, #28]
  40e30e:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e312:	e64a      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e314:	4d20      	ldr	r5, [pc, #128]	; (40e398 <_svfprintf_r+0x14c0>)
  40e316:	e436      	b.n	40db86 <_svfprintf_r+0xcae>
  40e318:	3330      	adds	r3, #48	; 0x30
  40e31a:	2230      	movs	r2, #48	; 0x30
  40e31c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40e320:	ab1e      	add	r3, sp, #120	; 0x78
  40e322:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  40e326:	e7b8      	b.n	40e29a <_svfprintf_r+0x13c2>
  40e328:	1c7c      	adds	r4, r7, #1
  40e32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e32c:	4423      	add	r3, r4
  40e32e:	9307      	str	r3, [sp, #28]
  40e330:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e334:	e639      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e336:	222d      	movs	r2, #45	; 0x2d
  40e338:	425b      	negs	r3, r3
  40e33a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  40e33e:	e77f      	b.n	40e240 <_svfprintf_r+0x1368>
  40e340:	9b02      	ldr	r3, [sp, #8]
  40e342:	f013 0301 	ands.w	r3, r3, #1
  40e346:	d1b0      	bne.n	40e2aa <_svfprintf_r+0x13d2>
  40e348:	930d      	str	r3, [sp, #52]	; 0x34
  40e34a:	9b07      	ldr	r3, [sp, #28]
  40e34c:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e350:	e62b      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e352:	b9af      	cbnz	r7, 40e380 <_svfprintf_r+0x14a8>
  40e354:	9b02      	ldr	r3, [sp, #8]
  40e356:	07da      	lsls	r2, r3, #31
  40e358:	d412      	bmi.n	40e380 <_svfprintf_r+0x14a8>
  40e35a:	2701      	movs	r7, #1
  40e35c:	9707      	str	r7, [sp, #28]
  40e35e:	e624      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e360:	f1c3 0402 	rsb	r4, r3, #2
  40e364:	e7c3      	b.n	40e2ee <_svfprintf_r+0x1416>
  40e366:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40e368:	785e      	ldrb	r6, [r3, #1]
  40e36a:	4620      	mov	r0, r4
  40e36c:	6827      	ldr	r7, [r4, #0]
  40e36e:	3004      	adds	r0, #4
  40e370:	2f00      	cmp	r7, #0
  40e372:	9009      	str	r0, [sp, #36]	; 0x24
  40e374:	f6be ae06 	bge.w	40cf84 <_svfprintf_r+0xac>
  40e378:	f04f 37ff 	mov.w	r7, #4294967295
  40e37c:	f7fe be02 	b.w	40cf84 <_svfprintf_r+0xac>
  40e380:	1cbb      	adds	r3, r7, #2
  40e382:	9307      	str	r3, [sp, #28]
  40e384:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
  40e388:	e60f      	b.n	40dfaa <_svfprintf_r+0x10d2>
  40e38a:	463c      	mov	r4, r7
  40e38c:	e667      	b.n	40e05e <_svfprintf_r+0x1186>
  40e38e:	bf00      	nop
  40e390:	00413be0 	.word	0x00413be0
  40e394:	00413c28 	.word	0x00413c28
  40e398:	00413bd0 	.word	0x00413bd0
  40e39c:	66666667 	.word	0x66666667
  40e3a0:	230c      	movs	r3, #12
  40e3a2:	9a05      	ldr	r2, [sp, #20]
  40e3a4:	f04f 30ff 	mov.w	r0, #4294967295
  40e3a8:	6013      	str	r3, [r2, #0]
  40e3aa:	f7fe be64 	b.w	40d076 <_svfprintf_r+0x19e>
  40e3ae:	f10d 0376 	add.w	r3, sp, #118	; 0x76
  40e3b2:	e772      	b.n	40e29a <_svfprintf_r+0x13c2>

0040e3b4 <__sprint_r.part.0>:
  40e3b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40e3b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e3ba:	049c      	lsls	r4, r3, #18
  40e3bc:	460f      	mov	r7, r1
  40e3be:	4692      	mov	sl, r2
  40e3c0:	d52a      	bpl.n	40e418 <__sprint_r.part.0+0x64>
  40e3c2:	6893      	ldr	r3, [r2, #8]
  40e3c4:	6812      	ldr	r2, [r2, #0]
  40e3c6:	b32b      	cbz	r3, 40e414 <__sprint_r.part.0+0x60>
  40e3c8:	4680      	mov	r8, r0
  40e3ca:	f102 0908 	add.w	r9, r2, #8
  40e3ce:	e919 0060 	ldmdb	r9, {r5, r6}
  40e3d2:	08b6      	lsrs	r6, r6, #2
  40e3d4:	d016      	beq.n	40e404 <__sprint_r.part.0+0x50>
  40e3d6:	3d04      	subs	r5, #4
  40e3d8:	2400      	movs	r4, #0
  40e3da:	e001      	b.n	40e3e0 <__sprint_r.part.0+0x2c>
  40e3dc:	42a6      	cmp	r6, r4
  40e3de:	d00f      	beq.n	40e400 <__sprint_r.part.0+0x4c>
  40e3e0:	4640      	mov	r0, r8
  40e3e2:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40e3e6:	463a      	mov	r2, r7
  40e3e8:	3401      	adds	r4, #1
  40e3ea:	f002 f88f 	bl	41050c <_fputwc_r>
  40e3ee:	1c43      	adds	r3, r0, #1
  40e3f0:	d1f4      	bne.n	40e3dc <__sprint_r.part.0+0x28>
  40e3f2:	2300      	movs	r3, #0
  40e3f4:	f8ca 3008 	str.w	r3, [sl, #8]
  40e3f8:	f8ca 3004 	str.w	r3, [sl, #4]
  40e3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e400:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e404:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40e408:	f109 0908 	add.w	r9, r9, #8
  40e40c:	f8ca 3008 	str.w	r3, [sl, #8]
  40e410:	2b00      	cmp	r3, #0
  40e412:	d1dc      	bne.n	40e3ce <__sprint_r.part.0+0x1a>
  40e414:	2000      	movs	r0, #0
  40e416:	e7ec      	b.n	40e3f2 <__sprint_r.part.0+0x3e>
  40e418:	f002 f9b0 	bl	41077c <__sfvwrite_r>
  40e41c:	2300      	movs	r3, #0
  40e41e:	f8ca 3008 	str.w	r3, [sl, #8]
  40e422:	f8ca 3004 	str.w	r3, [sl, #4]
  40e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e42a:	bf00      	nop

0040e42c <_vfiprintf_r>:
  40e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e430:	461c      	mov	r4, r3
  40e432:	b0ad      	sub	sp, #180	; 0xb4
  40e434:	4692      	mov	sl, r2
  40e436:	9101      	str	r1, [sp, #4]
  40e438:	9002      	str	r0, [sp, #8]
  40e43a:	9406      	str	r4, [sp, #24]
  40e43c:	b118      	cbz	r0, 40e446 <_vfiprintf_r+0x1a>
  40e43e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e440:	2b00      	cmp	r3, #0
  40e442:	f000 80de 	beq.w	40e602 <_vfiprintf_r+0x1d6>
  40e446:	9b01      	ldr	r3, [sp, #4]
  40e448:	8999      	ldrh	r1, [r3, #12]
  40e44a:	b28a      	uxth	r2, r1
  40e44c:	0490      	lsls	r0, r2, #18
  40e44e:	d408      	bmi.n	40e462 <_vfiprintf_r+0x36>
  40e450:	461d      	mov	r5, r3
  40e452:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40e456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40e458:	b28a      	uxth	r2, r1
  40e45a:	81a9      	strh	r1, [r5, #12]
  40e45c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40e460:	666b      	str	r3, [r5, #100]	; 0x64
  40e462:	0711      	lsls	r1, r2, #28
  40e464:	f140 80ad 	bpl.w	40e5c2 <_vfiprintf_r+0x196>
  40e468:	9b01      	ldr	r3, [sp, #4]
  40e46a:	691b      	ldr	r3, [r3, #16]
  40e46c:	2b00      	cmp	r3, #0
  40e46e:	f000 80a8 	beq.w	40e5c2 <_vfiprintf_r+0x196>
  40e472:	f002 021a 	and.w	r2, r2, #26
  40e476:	2a0a      	cmp	r2, #10
  40e478:	f000 80af 	beq.w	40e5da <_vfiprintf_r+0x1ae>
  40e47c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40e480:	2300      	movs	r3, #0
  40e482:	465c      	mov	r4, fp
  40e484:	930a      	str	r3, [sp, #40]	; 0x28
  40e486:	9311      	str	r3, [sp, #68]	; 0x44
  40e488:	9303      	str	r3, [sp, #12]
  40e48a:	9310      	str	r3, [sp, #64]	; 0x40
  40e48c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40e490:	f89a 3000 	ldrb.w	r3, [sl]
  40e494:	4655      	mov	r5, sl
  40e496:	2b25      	cmp	r3, #37	; 0x25
  40e498:	d01c      	beq.n	40e4d4 <_vfiprintf_r+0xa8>
  40e49a:	b90b      	cbnz	r3, 40e4a0 <_vfiprintf_r+0x74>
  40e49c:	e01a      	b.n	40e4d4 <_vfiprintf_r+0xa8>
  40e49e:	b11b      	cbz	r3, 40e4a8 <_vfiprintf_r+0x7c>
  40e4a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40e4a4:	2b25      	cmp	r3, #37	; 0x25
  40e4a6:	d1fa      	bne.n	40e49e <_vfiprintf_r+0x72>
  40e4a8:	ebb5 060a 	subs.w	r6, r5, sl
  40e4ac:	d012      	beq.n	40e4d4 <_vfiprintf_r+0xa8>
  40e4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e4b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e4b2:	3301      	adds	r3, #1
  40e4b4:	f8c4 a000 	str.w	sl, [r4]
  40e4b8:	4432      	add	r2, r6
  40e4ba:	6066      	str	r6, [r4, #4]
  40e4bc:	2b07      	cmp	r3, #7
  40e4be:	9310      	str	r3, [sp, #64]	; 0x40
  40e4c0:	9211      	str	r2, [sp, #68]	; 0x44
  40e4c2:	dd79      	ble.n	40e5b8 <_vfiprintf_r+0x18c>
  40e4c4:	2a00      	cmp	r2, #0
  40e4c6:	f040 84a5 	bne.w	40ee14 <_vfiprintf_r+0x9e8>
  40e4ca:	9b03      	ldr	r3, [sp, #12]
  40e4cc:	465c      	mov	r4, fp
  40e4ce:	9210      	str	r2, [sp, #64]	; 0x40
  40e4d0:	4433      	add	r3, r6
  40e4d2:	9303      	str	r3, [sp, #12]
  40e4d4:	782b      	ldrb	r3, [r5, #0]
  40e4d6:	2b00      	cmp	r3, #0
  40e4d8:	f000 833a 	beq.w	40eb50 <_vfiprintf_r+0x724>
  40e4dc:	2100      	movs	r1, #0
  40e4de:	f04f 0300 	mov.w	r3, #0
  40e4e2:	f04f 38ff 	mov.w	r8, #4294967295
  40e4e6:	1c68      	adds	r0, r5, #1
  40e4e8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40e4ec:	4689      	mov	r9, r1
  40e4ee:	786b      	ldrb	r3, [r5, #1]
  40e4f0:	4646      	mov	r6, r8
  40e4f2:	460d      	mov	r5, r1
  40e4f4:	f100 0a01 	add.w	sl, r0, #1
  40e4f8:	f1a3 0220 	sub.w	r2, r3, #32
  40e4fc:	2a58      	cmp	r2, #88	; 0x58
  40e4fe:	f200 8301 	bhi.w	40eb04 <_vfiprintf_r+0x6d8>
  40e502:	e8df f012 	tbh	[pc, r2, lsl #1]
  40e506:	0247      	.short	0x0247
  40e508:	02ff02ff 	.word	0x02ff02ff
  40e50c:	02ff0255 	.word	0x02ff0255
  40e510:	02ff02ff 	.word	0x02ff02ff
  40e514:	02ff02ff 	.word	0x02ff02ff
  40e518:	025b02ff 	.word	0x025b02ff
  40e51c:	02ff0268 	.word	0x02ff0268
  40e520:	01ba0181 	.word	0x01ba0181
  40e524:	028702ff 	.word	0x028702ff
  40e528:	028d028d 	.word	0x028d028d
  40e52c:	028d028d 	.word	0x028d028d
  40e530:	028d028d 	.word	0x028d028d
  40e534:	028d028d 	.word	0x028d028d
  40e538:	02ff028d 	.word	0x02ff028d
  40e53c:	02ff02ff 	.word	0x02ff02ff
  40e540:	02ff02ff 	.word	0x02ff02ff
  40e544:	02ff02ff 	.word	0x02ff02ff
  40e548:	02ff02ff 	.word	0x02ff02ff
  40e54c:	029b02ff 	.word	0x029b02ff
  40e550:	02ff02ff 	.word	0x02ff02ff
  40e554:	02ff02ff 	.word	0x02ff02ff
  40e558:	02ff02ff 	.word	0x02ff02ff
  40e55c:	02ff02ff 	.word	0x02ff02ff
  40e560:	02ff02ff 	.word	0x02ff02ff
  40e564:	02ff02b6 	.word	0x02ff02b6
  40e568:	02ff02ff 	.word	0x02ff02ff
  40e56c:	02ff02ff 	.word	0x02ff02ff
  40e570:	02ff02ce 	.word	0x02ff02ce
  40e574:	02e602ff 	.word	0x02e602ff
  40e578:	02ff02ff 	.word	0x02ff02ff
  40e57c:	02ff02ff 	.word	0x02ff02ff
  40e580:	02ff02ff 	.word	0x02ff02ff
  40e584:	02ff02ff 	.word	0x02ff02ff
  40e588:	02ff02ff 	.word	0x02ff02ff
  40e58c:	022b0219 	.word	0x022b0219
  40e590:	02ff02ff 	.word	0x02ff02ff
  40e594:	021302ff 	.word	0x021302ff
  40e598:	02ff022b 	.word	0x02ff022b
  40e59c:	01f902ff 	.word	0x01f902ff
  40e5a0:	020202ff 	.word	0x020202ff
  40e5a4:	026d0187 	.word	0x026d0187
  40e5a8:	02ff0281 	.word	0x02ff0281
  40e5ac:	02ff0198 	.word	0x02ff0198
  40e5b0:	02ff0081 	.word	0x02ff0081
  40e5b4:	01d502ff 	.word	0x01d502ff
  40e5b8:	3408      	adds	r4, #8
  40e5ba:	9b03      	ldr	r3, [sp, #12]
  40e5bc:	4433      	add	r3, r6
  40e5be:	9303      	str	r3, [sp, #12]
  40e5c0:	e788      	b.n	40e4d4 <_vfiprintf_r+0xa8>
  40e5c2:	9802      	ldr	r0, [sp, #8]
  40e5c4:	9901      	ldr	r1, [sp, #4]
  40e5c6:	f000 fd6b 	bl	40f0a0 <__swsetup_r>
  40e5ca:	b9a8      	cbnz	r0, 40e5f8 <_vfiprintf_r+0x1cc>
  40e5cc:	9b01      	ldr	r3, [sp, #4]
  40e5ce:	899a      	ldrh	r2, [r3, #12]
  40e5d0:	f002 021a 	and.w	r2, r2, #26
  40e5d4:	2a0a      	cmp	r2, #10
  40e5d6:	f47f af51 	bne.w	40e47c <_vfiprintf_r+0x50>
  40e5da:	9b01      	ldr	r3, [sp, #4]
  40e5dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40e5e0:	2b00      	cmp	r3, #0
  40e5e2:	f6ff af4b 	blt.w	40e47c <_vfiprintf_r+0x50>
  40e5e6:	9901      	ldr	r1, [sp, #4]
  40e5e8:	4652      	mov	r2, sl
  40e5ea:	4623      	mov	r3, r4
  40e5ec:	9802      	ldr	r0, [sp, #8]
  40e5ee:	f000 fd17 	bl	40f020 <__sbprintf>
  40e5f2:	b02d      	add	sp, #180	; 0xb4
  40e5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e5f8:	f04f 30ff 	mov.w	r0, #4294967295
  40e5fc:	b02d      	add	sp, #180	; 0xb4
  40e5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e602:	f001 ff0b 	bl	41041c <__sinit>
  40e606:	e71e      	b.n	40e446 <_vfiprintf_r+0x1a>
  40e608:	f019 0f20 	tst.w	r9, #32
  40e60c:	9505      	str	r5, [sp, #20]
  40e60e:	46b0      	mov	r8, r6
  40e610:	9a06      	ldr	r2, [sp, #24]
  40e612:	f000 824f 	beq.w	40eab4 <_vfiprintf_r+0x688>
  40e616:	3207      	adds	r2, #7
  40e618:	2301      	movs	r3, #1
  40e61a:	f022 0207 	bic.w	r2, r2, #7
  40e61e:	f102 0108 	add.w	r1, r2, #8
  40e622:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e626:	9106      	str	r1, [sp, #24]
  40e628:	f04f 0200 	mov.w	r2, #0
  40e62c:	2500      	movs	r5, #0
  40e62e:	f8cd 8010 	str.w	r8, [sp, #16]
  40e632:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e636:	f1b8 0f00 	cmp.w	r8, #0
  40e63a:	db01      	blt.n	40e640 <_vfiprintf_r+0x214>
  40e63c:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  40e640:	f1b8 0f00 	cmp.w	r8, #0
  40e644:	f040 8294 	bne.w	40eb70 <_vfiprintf_r+0x744>
  40e648:	ea56 0207 	orrs.w	r2, r6, r7
  40e64c:	bf14      	ite	ne
  40e64e:	2201      	movne	r2, #1
  40e650:	2200      	moveq	r2, #0
  40e652:	2a00      	cmp	r2, #0
  40e654:	f040 828c 	bne.w	40eb70 <_vfiprintf_r+0x744>
  40e658:	2b00      	cmp	r3, #0
  40e65a:	f040 8372 	bne.w	40ed42 <_vfiprintf_r+0x916>
  40e65e:	f019 0f01 	tst.w	r9, #1
  40e662:	f000 83a3 	beq.w	40edac <_vfiprintf_r+0x980>
  40e666:	ab2c      	add	r3, sp, #176	; 0xb0
  40e668:	2230      	movs	r2, #48	; 0x30
  40e66a:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40e66e:	ebc3 080b 	rsb	r8, r3, fp
  40e672:	9308      	str	r3, [sp, #32]
  40e674:	9b04      	ldr	r3, [sp, #16]
  40e676:	4543      	cmp	r3, r8
  40e678:	bfb8      	it	lt
  40e67a:	4643      	movlt	r3, r8
  40e67c:	461f      	mov	r7, r3
  40e67e:	b105      	cbz	r5, 40e682 <_vfiprintf_r+0x256>
  40e680:	3701      	adds	r7, #1
  40e682:	f019 0c02 	ands.w	ip, r9, #2
  40e686:	d000      	beq.n	40e68a <_vfiprintf_r+0x25e>
  40e688:	3702      	adds	r7, #2
  40e68a:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  40e68e:	9307      	str	r3, [sp, #28]
  40e690:	f040 8247 	bne.w	40eb22 <_vfiprintf_r+0x6f6>
  40e694:	9b05      	ldr	r3, [sp, #20]
  40e696:	1bdd      	subs	r5, r3, r7
  40e698:	2d00      	cmp	r5, #0
  40e69a:	f340 8242 	ble.w	40eb22 <_vfiprintf_r+0x6f6>
  40e69e:	2d10      	cmp	r5, #16
  40e6a0:	f340 848b 	ble.w	40efba <_vfiprintf_r+0xb8e>
  40e6a4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40e6a8:	2310      	movs	r3, #16
  40e6aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e6ac:	4ebd      	ldr	r6, [pc, #756]	; (40e9a4 <_vfiprintf_r+0x578>)
  40e6ae:	4671      	mov	r1, lr
  40e6b0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e6b4:	e006      	b.n	40e6c4 <_vfiprintf_r+0x298>
  40e6b6:	4611      	mov	r1, r2
  40e6b8:	f04f 0e01 	mov.w	lr, #1
  40e6bc:	465c      	mov	r4, fp
  40e6be:	3d10      	subs	r5, #16
  40e6c0:	2d10      	cmp	r5, #16
  40e6c2:	dd20      	ble.n	40e706 <_vfiprintf_r+0x2da>
  40e6c4:	1c48      	adds	r0, r1, #1
  40e6c6:	3210      	adds	r2, #16
  40e6c8:	6026      	str	r6, [r4, #0]
  40e6ca:	f101 0e02 	add.w	lr, r1, #2
  40e6ce:	2807      	cmp	r0, #7
  40e6d0:	6063      	str	r3, [r4, #4]
  40e6d2:	9211      	str	r2, [sp, #68]	; 0x44
  40e6d4:	4601      	mov	r1, r0
  40e6d6:	f104 0408 	add.w	r4, r4, #8
  40e6da:	9010      	str	r0, [sp, #64]	; 0x40
  40e6dc:	ddef      	ble.n	40e6be <_vfiprintf_r+0x292>
  40e6de:	2a00      	cmp	r2, #0
  40e6e0:	d0e9      	beq.n	40e6b6 <_vfiprintf_r+0x28a>
  40e6e2:	9802      	ldr	r0, [sp, #8]
  40e6e4:	aa0f      	add	r2, sp, #60	; 0x3c
  40e6e6:	9901      	ldr	r1, [sp, #4]
  40e6e8:	465c      	mov	r4, fp
  40e6ea:	9309      	str	r3, [sp, #36]	; 0x24
  40e6ec:	f7ff fe62 	bl	40e3b4 <__sprint_r.part.0>
  40e6f0:	2800      	cmp	r0, #0
  40e6f2:	f040 8234 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40e6f6:	3d10      	subs	r5, #16
  40e6f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e6fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e6fc:	2d10      	cmp	r5, #16
  40e6fe:	f101 0e01 	add.w	lr, r1, #1
  40e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e704:	dcde      	bgt.n	40e6c4 <_vfiprintf_r+0x298>
  40e706:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40e70a:	4671      	mov	r1, lr
  40e70c:	442a      	add	r2, r5
  40e70e:	2907      	cmp	r1, #7
  40e710:	6026      	str	r6, [r4, #0]
  40e712:	6065      	str	r5, [r4, #4]
  40e714:	9211      	str	r2, [sp, #68]	; 0x44
  40e716:	9110      	str	r1, [sp, #64]	; 0x40
  40e718:	f300 8330 	bgt.w	40ed7c <_vfiprintf_r+0x950>
  40e71c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40e720:	3408      	adds	r4, #8
  40e722:	1c48      	adds	r0, r1, #1
  40e724:	2b00      	cmp	r3, #0
  40e726:	f040 8204 	bne.w	40eb32 <_vfiprintf_r+0x706>
  40e72a:	f1bc 0f00 	cmp.w	ip, #0
  40e72e:	d00c      	beq.n	40e74a <_vfiprintf_r+0x31e>
  40e730:	3202      	adds	r2, #2
  40e732:	a90e      	add	r1, sp, #56	; 0x38
  40e734:	2302      	movs	r3, #2
  40e736:	2807      	cmp	r0, #7
  40e738:	9010      	str	r0, [sp, #64]	; 0x40
  40e73a:	9211      	str	r2, [sp, #68]	; 0x44
  40e73c:	e884 000a 	stmia.w	r4, {r1, r3}
  40e740:	f300 82f8 	bgt.w	40ed34 <_vfiprintf_r+0x908>
  40e744:	4601      	mov	r1, r0
  40e746:	3408      	adds	r4, #8
  40e748:	3001      	adds	r0, #1
  40e74a:	9b07      	ldr	r3, [sp, #28]
  40e74c:	2b80      	cmp	r3, #128	; 0x80
  40e74e:	f000 8298 	beq.w	40ec82 <_vfiprintf_r+0x856>
  40e752:	9b04      	ldr	r3, [sp, #16]
  40e754:	ebc8 0503 	rsb	r5, r8, r3
  40e758:	2d00      	cmp	r5, #0
  40e75a:	dd38      	ble.n	40e7ce <_vfiprintf_r+0x3a2>
  40e75c:	2d10      	cmp	r5, #16
  40e75e:	4e92      	ldr	r6, [pc, #584]	; (40e9a8 <_vfiprintf_r+0x57c>)
  40e760:	bfc8      	it	gt
  40e762:	2310      	movgt	r3, #16
  40e764:	dc07      	bgt.n	40e776 <_vfiprintf_r+0x34a>
  40e766:	e028      	b.n	40e7ba <_vfiprintf_r+0x38e>
  40e768:	f04f 0e01 	mov.w	lr, #1
  40e76c:	4611      	mov	r1, r2
  40e76e:	465c      	mov	r4, fp
  40e770:	3d10      	subs	r5, #16
  40e772:	2d10      	cmp	r5, #16
  40e774:	dd20      	ble.n	40e7b8 <_vfiprintf_r+0x38c>
  40e776:	1c48      	adds	r0, r1, #1
  40e778:	3210      	adds	r2, #16
  40e77a:	6026      	str	r6, [r4, #0]
  40e77c:	f101 0e02 	add.w	lr, r1, #2
  40e780:	2807      	cmp	r0, #7
  40e782:	6063      	str	r3, [r4, #4]
  40e784:	9211      	str	r2, [sp, #68]	; 0x44
  40e786:	4601      	mov	r1, r0
  40e788:	f104 0408 	add.w	r4, r4, #8
  40e78c:	9010      	str	r0, [sp, #64]	; 0x40
  40e78e:	ddef      	ble.n	40e770 <_vfiprintf_r+0x344>
  40e790:	2a00      	cmp	r2, #0
  40e792:	d0e9      	beq.n	40e768 <_vfiprintf_r+0x33c>
  40e794:	9802      	ldr	r0, [sp, #8]
  40e796:	aa0f      	add	r2, sp, #60	; 0x3c
  40e798:	9901      	ldr	r1, [sp, #4]
  40e79a:	465c      	mov	r4, fp
  40e79c:	9304      	str	r3, [sp, #16]
  40e79e:	f7ff fe09 	bl	40e3b4 <__sprint_r.part.0>
  40e7a2:	2800      	cmp	r0, #0
  40e7a4:	f040 81db 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40e7a8:	3d10      	subs	r5, #16
  40e7aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e7ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e7ae:	2d10      	cmp	r5, #16
  40e7b0:	f101 0e01 	add.w	lr, r1, #1
  40e7b4:	9b04      	ldr	r3, [sp, #16]
  40e7b6:	dcde      	bgt.n	40e776 <_vfiprintf_r+0x34a>
  40e7b8:	4670      	mov	r0, lr
  40e7ba:	442a      	add	r2, r5
  40e7bc:	2807      	cmp	r0, #7
  40e7be:	6026      	str	r6, [r4, #0]
  40e7c0:	6065      	str	r5, [r4, #4]
  40e7c2:	9211      	str	r2, [sp, #68]	; 0x44
  40e7c4:	9010      	str	r0, [sp, #64]	; 0x40
  40e7c6:	f300 81ef 	bgt.w	40eba8 <_vfiprintf_r+0x77c>
  40e7ca:	3408      	adds	r4, #8
  40e7cc:	3001      	adds	r0, #1
  40e7ce:	eb02 0308 	add.w	r3, r2, r8
  40e7d2:	2807      	cmp	r0, #7
  40e7d4:	9a08      	ldr	r2, [sp, #32]
  40e7d6:	9311      	str	r3, [sp, #68]	; 0x44
  40e7d8:	9010      	str	r0, [sp, #64]	; 0x40
  40e7da:	e884 0104 	stmia.w	r4, {r2, r8}
  40e7de:	f340 81f0 	ble.w	40ebc2 <_vfiprintf_r+0x796>
  40e7e2:	2b00      	cmp	r3, #0
  40e7e4:	f040 82f2 	bne.w	40edcc <_vfiprintf_r+0x9a0>
  40e7e8:	f019 0f04 	tst.w	r9, #4
  40e7ec:	9310      	str	r3, [sp, #64]	; 0x40
  40e7ee:	f040 82d6 	bne.w	40ed9e <_vfiprintf_r+0x972>
  40e7f2:	9b03      	ldr	r3, [sp, #12]
  40e7f4:	9a05      	ldr	r2, [sp, #20]
  40e7f6:	4297      	cmp	r7, r2
  40e7f8:	bfac      	ite	ge
  40e7fa:	19db      	addge	r3, r3, r7
  40e7fc:	189b      	addlt	r3, r3, r2
  40e7fe:	9303      	str	r3, [sp, #12]
  40e800:	2300      	movs	r3, #0
  40e802:	465c      	mov	r4, fp
  40e804:	9310      	str	r3, [sp, #64]	; 0x40
  40e806:	e643      	b.n	40e490 <_vfiprintf_r+0x64>
  40e808:	4650      	mov	r0, sl
  40e80a:	f049 0904 	orr.w	r9, r9, #4
  40e80e:	f89a 3000 	ldrb.w	r3, [sl]
  40e812:	e66f      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e814:	f019 0320 	ands.w	r3, r9, #32
  40e818:	9505      	str	r5, [sp, #20]
  40e81a:	46b0      	mov	r8, r6
  40e81c:	f000 8131 	beq.w	40ea82 <_vfiprintf_r+0x656>
  40e820:	9a06      	ldr	r2, [sp, #24]
  40e822:	2300      	movs	r3, #0
  40e824:	3207      	adds	r2, #7
  40e826:	f022 0207 	bic.w	r2, r2, #7
  40e82a:	f102 0108 	add.w	r1, r2, #8
  40e82e:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e832:	9106      	str	r1, [sp, #24]
  40e834:	e6f8      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40e836:	9a06      	ldr	r2, [sp, #24]
  40e838:	46b0      	mov	r8, r6
  40e83a:	9505      	str	r5, [sp, #20]
  40e83c:	6813      	ldr	r3, [r2, #0]
  40e83e:	1d16      	adds	r6, r2, #4
  40e840:	f04f 0200 	mov.w	r2, #0
  40e844:	9308      	str	r3, [sp, #32]
  40e846:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e84a:	2b00      	cmp	r3, #0
  40e84c:	f000 83bb 	beq.w	40efc6 <_vfiprintf_r+0xb9a>
  40e850:	f1b8 0f00 	cmp.w	r8, #0
  40e854:	f2c0 8398 	blt.w	40ef88 <_vfiprintf_r+0xb5c>
  40e858:	9d08      	ldr	r5, [sp, #32]
  40e85a:	2100      	movs	r1, #0
  40e85c:	4642      	mov	r2, r8
  40e85e:	4628      	mov	r0, r5
  40e860:	f002 fd62 	bl	411328 <memchr>
  40e864:	2800      	cmp	r0, #0
  40e866:	f000 83be 	beq.w	40efe6 <_vfiprintf_r+0xbba>
  40e86a:	2300      	movs	r3, #0
  40e86c:	ebc5 0800 	rsb	r8, r5, r0
  40e870:	9606      	str	r6, [sp, #24]
  40e872:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e876:	9304      	str	r3, [sp, #16]
  40e878:	e6fc      	b.n	40e674 <_vfiprintf_r+0x248>
  40e87a:	f89a 3000 	ldrb.w	r3, [sl]
  40e87e:	f10a 0001 	add.w	r0, sl, #1
  40e882:	2b2a      	cmp	r3, #42	; 0x2a
  40e884:	f000 83b8 	beq.w	40eff8 <_vfiprintf_r+0xbcc>
  40e888:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e88c:	4682      	mov	sl, r0
  40e88e:	2600      	movs	r6, #0
  40e890:	2a09      	cmp	r2, #9
  40e892:	f63f ae31 	bhi.w	40e4f8 <_vfiprintf_r+0xcc>
  40e896:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40e89a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e89e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40e8a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e8a6:	2a09      	cmp	r2, #9
  40e8a8:	d9f5      	bls.n	40e896 <_vfiprintf_r+0x46a>
  40e8aa:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40e8ae:	e623      	b.n	40e4f8 <_vfiprintf_r+0xcc>
  40e8b0:	4a3e      	ldr	r2, [pc, #248]	; (40e9ac <_vfiprintf_r+0x580>)
  40e8b2:	f019 0f20 	tst.w	r9, #32
  40e8b6:	9505      	str	r5, [sp, #20]
  40e8b8:	46b0      	mov	r8, r6
  40e8ba:	920a      	str	r2, [sp, #40]	; 0x28
  40e8bc:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e8c0:	f000 8111 	beq.w	40eae6 <_vfiprintf_r+0x6ba>
  40e8c4:	9a06      	ldr	r2, [sp, #24]
  40e8c6:	3207      	adds	r2, #7
  40e8c8:	f022 0207 	bic.w	r2, r2, #7
  40e8cc:	f102 0108 	add.w	r1, r2, #8
  40e8d0:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e8d4:	9106      	str	r1, [sp, #24]
  40e8d6:	f019 0f01 	tst.w	r9, #1
  40e8da:	f000 824d 	beq.w	40ed78 <_vfiprintf_r+0x94c>
  40e8de:	ea56 0207 	orrs.w	r2, r6, r7
  40e8e2:	f000 8249 	beq.w	40ed78 <_vfiprintf_r+0x94c>
  40e8e6:	2230      	movs	r2, #48	; 0x30
  40e8e8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40e8ec:	f049 0902 	orr.w	r9, r9, #2
  40e8f0:	2302      	movs	r3, #2
  40e8f2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  40e8f6:	e697      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40e8f8:	f89a 3000 	ldrb.w	r3, [sl]
  40e8fc:	2b6c      	cmp	r3, #108	; 0x6c
  40e8fe:	f000 8337 	beq.w	40ef70 <_vfiprintf_r+0xb44>
  40e902:	f049 0910 	orr.w	r9, r9, #16
  40e906:	4650      	mov	r0, sl
  40e908:	e5f4      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e90a:	f019 0f20 	tst.w	r9, #32
  40e90e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e912:	f000 8305 	beq.w	40ef20 <_vfiprintf_r+0xaf4>
  40e916:	9903      	ldr	r1, [sp, #12]
  40e918:	9a06      	ldr	r2, [sp, #24]
  40e91a:	17cf      	asrs	r7, r1, #31
  40e91c:	4608      	mov	r0, r1
  40e91e:	6813      	ldr	r3, [r2, #0]
  40e920:	3204      	adds	r2, #4
  40e922:	4639      	mov	r1, r7
  40e924:	9206      	str	r2, [sp, #24]
  40e926:	e9c3 0100 	strd	r0, r1, [r3]
  40e92a:	e5b1      	b.n	40e490 <_vfiprintf_r+0x64>
  40e92c:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  40e930:	f89a 3000 	ldrb.w	r3, [sl]
  40e934:	4650      	mov	r0, sl
  40e936:	e5dd      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e938:	9a06      	ldr	r2, [sp, #24]
  40e93a:	2701      	movs	r7, #1
  40e93c:	f04f 0100 	mov.w	r1, #0
  40e940:	9505      	str	r5, [sp, #20]
  40e942:	6813      	ldr	r3, [r2, #0]
  40e944:	3204      	adds	r2, #4
  40e946:	46b8      	mov	r8, r7
  40e948:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e94c:	9206      	str	r2, [sp, #24]
  40e94e:	aa12      	add	r2, sp, #72	; 0x48
  40e950:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40e954:	9208      	str	r2, [sp, #32]
  40e956:	2300      	movs	r3, #0
  40e958:	9304      	str	r3, [sp, #16]
  40e95a:	e692      	b.n	40e682 <_vfiprintf_r+0x256>
  40e95c:	f019 0f20 	tst.w	r9, #32
  40e960:	9505      	str	r5, [sp, #20]
  40e962:	46b0      	mov	r8, r6
  40e964:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e968:	d071      	beq.n	40ea4e <_vfiprintf_r+0x622>
  40e96a:	9906      	ldr	r1, [sp, #24]
  40e96c:	3107      	adds	r1, #7
  40e96e:	f021 0107 	bic.w	r1, r1, #7
  40e972:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e976:	3108      	adds	r1, #8
  40e978:	4616      	mov	r6, r2
  40e97a:	461f      	mov	r7, r3
  40e97c:	9106      	str	r1, [sp, #24]
  40e97e:	2a00      	cmp	r2, #0
  40e980:	f173 0300 	sbcs.w	r3, r3, #0
  40e984:	f2c0 82b1 	blt.w	40eeea <_vfiprintf_r+0xabe>
  40e988:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e98c:	2301      	movs	r3, #1
  40e98e:	f8cd 8010 	str.w	r8, [sp, #16]
  40e992:	e650      	b.n	40e636 <_vfiprintf_r+0x20a>
  40e994:	f89a 3000 	ldrb.w	r3, [sl]
  40e998:	4650      	mov	r0, sl
  40e99a:	2900      	cmp	r1, #0
  40e99c:	f47f adaa 	bne.w	40e4f4 <_vfiprintf_r+0xc8>
  40e9a0:	2120      	movs	r1, #32
  40e9a2:	e5a7      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e9a4:	00413c44 	.word	0x00413c44
  40e9a8:	00413c34 	.word	0x00413c34
  40e9ac:	00413c14 	.word	0x00413c14
  40e9b0:	f049 0901 	orr.w	r9, r9, #1
  40e9b4:	f89a 3000 	ldrb.w	r3, [sl]
  40e9b8:	4650      	mov	r0, sl
  40e9ba:	e59b      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e9bc:	9a06      	ldr	r2, [sp, #24]
  40e9be:	6815      	ldr	r5, [r2, #0]
  40e9c0:	4613      	mov	r3, r2
  40e9c2:	2d00      	cmp	r5, #0
  40e9c4:	f103 0304 	add.w	r3, r3, #4
  40e9c8:	f2c0 82da 	blt.w	40ef80 <_vfiprintf_r+0xb54>
  40e9cc:	9306      	str	r3, [sp, #24]
  40e9ce:	4650      	mov	r0, sl
  40e9d0:	f89a 3000 	ldrb.w	r3, [sl]
  40e9d4:	e58e      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e9d6:	f89a 3000 	ldrb.w	r3, [sl]
  40e9da:	4650      	mov	r0, sl
  40e9dc:	212b      	movs	r1, #43	; 0x2b
  40e9de:	e589      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40e9e0:	9806      	ldr	r0, [sp, #24]
  40e9e2:	2278      	movs	r2, #120	; 0x78
  40e9e4:	2330      	movs	r3, #48	; 0x30
  40e9e6:	46b0      	mov	r8, r6
  40e9e8:	4601      	mov	r1, r0
  40e9ea:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40e9ee:	4aaa      	ldr	r2, [pc, #680]	; (40ec98 <_vfiprintf_r+0x86c>)
  40e9f0:	f049 0902 	orr.w	r9, r9, #2
  40e9f4:	3104      	adds	r1, #4
  40e9f6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  40e9fa:	9505      	str	r5, [sp, #20]
  40e9fc:	2302      	movs	r3, #2
  40e9fe:	6806      	ldr	r6, [r0, #0]
  40ea00:	2700      	movs	r7, #0
  40ea02:	9106      	str	r1, [sp, #24]
  40ea04:	920a      	str	r2, [sp, #40]	; 0x28
  40ea06:	e60f      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40ea08:	f049 0920 	orr.w	r9, r9, #32
  40ea0c:	f89a 3000 	ldrb.w	r3, [sl]
  40ea10:	4650      	mov	r0, sl
  40ea12:	e56f      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40ea14:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  40ea18:	f89a 3000 	ldrb.w	r3, [sl]
  40ea1c:	4650      	mov	r0, sl
  40ea1e:	e569      	b.n	40e4f4 <_vfiprintf_r+0xc8>
  40ea20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ea24:	2500      	movs	r5, #0
  40ea26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40ea2a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ea2e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40ea32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40ea36:	2a09      	cmp	r2, #9
  40ea38:	d9f5      	bls.n	40ea26 <_vfiprintf_r+0x5fa>
  40ea3a:	e55d      	b.n	40e4f8 <_vfiprintf_r+0xcc>
  40ea3c:	f049 0910 	orr.w	r9, r9, #16
  40ea40:	9505      	str	r5, [sp, #20]
  40ea42:	46b0      	mov	r8, r6
  40ea44:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40ea48:	f019 0f20 	tst.w	r9, #32
  40ea4c:	d18d      	bne.n	40e96a <_vfiprintf_r+0x53e>
  40ea4e:	9a06      	ldr	r2, [sp, #24]
  40ea50:	f019 0f10 	tst.w	r9, #16
  40ea54:	4613      	mov	r3, r2
  40ea56:	f040 81c4 	bne.w	40ede2 <_vfiprintf_r+0x9b6>
  40ea5a:	f019 0f40 	tst.w	r9, #64	; 0x40
  40ea5e:	f000 81c0 	beq.w	40ede2 <_vfiprintf_r+0x9b6>
  40ea62:	f9b2 6000 	ldrsh.w	r6, [r2]
  40ea66:	3304      	adds	r3, #4
  40ea68:	17f7      	asrs	r7, r6, #31
  40ea6a:	9306      	str	r3, [sp, #24]
  40ea6c:	4632      	mov	r2, r6
  40ea6e:	463b      	mov	r3, r7
  40ea70:	e785      	b.n	40e97e <_vfiprintf_r+0x552>
  40ea72:	f049 0910 	orr.w	r9, r9, #16
  40ea76:	9505      	str	r5, [sp, #20]
  40ea78:	46b0      	mov	r8, r6
  40ea7a:	f019 0320 	ands.w	r3, r9, #32
  40ea7e:	f47f aecf 	bne.w	40e820 <_vfiprintf_r+0x3f4>
  40ea82:	f019 0210 	ands.w	r2, r9, #16
  40ea86:	f040 81b3 	bne.w	40edf0 <_vfiprintf_r+0x9c4>
  40ea8a:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  40ea8e:	f000 81af 	beq.w	40edf0 <_vfiprintf_r+0x9c4>
  40ea92:	9906      	ldr	r1, [sp, #24]
  40ea94:	4613      	mov	r3, r2
  40ea96:	2700      	movs	r7, #0
  40ea98:	460a      	mov	r2, r1
  40ea9a:	880e      	ldrh	r6, [r1, #0]
  40ea9c:	3204      	adds	r2, #4
  40ea9e:	9206      	str	r2, [sp, #24]
  40eaa0:	e5c2      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40eaa2:	f049 0910 	orr.w	r9, r9, #16
  40eaa6:	9505      	str	r5, [sp, #20]
  40eaa8:	46b0      	mov	r8, r6
  40eaaa:	9a06      	ldr	r2, [sp, #24]
  40eaac:	f019 0f20 	tst.w	r9, #32
  40eab0:	f47f adb1 	bne.w	40e616 <_vfiprintf_r+0x1ea>
  40eab4:	f019 0f10 	tst.w	r9, #16
  40eab8:	4613      	mov	r3, r2
  40eaba:	f040 81a5 	bne.w	40ee08 <_vfiprintf_r+0x9dc>
  40eabe:	f019 0f40 	tst.w	r9, #64	; 0x40
  40eac2:	f000 81a1 	beq.w	40ee08 <_vfiprintf_r+0x9dc>
  40eac6:	8816      	ldrh	r6, [r2, #0]
  40eac8:	3204      	adds	r2, #4
  40eaca:	2700      	movs	r7, #0
  40eacc:	2301      	movs	r3, #1
  40eace:	9206      	str	r2, [sp, #24]
  40ead0:	e5aa      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40ead2:	4a72      	ldr	r2, [pc, #456]	; (40ec9c <_vfiprintf_r+0x870>)
  40ead4:	f019 0f20 	tst.w	r9, #32
  40ead8:	9505      	str	r5, [sp, #20]
  40eada:	46b0      	mov	r8, r6
  40eadc:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40eae0:	920a      	str	r2, [sp, #40]	; 0x28
  40eae2:	f47f aeef 	bne.w	40e8c4 <_vfiprintf_r+0x498>
  40eae6:	9906      	ldr	r1, [sp, #24]
  40eae8:	f019 0f10 	tst.w	r9, #16
  40eaec:	460a      	mov	r2, r1
  40eaee:	f040 8186 	bne.w	40edfe <_vfiprintf_r+0x9d2>
  40eaf2:	f019 0f40 	tst.w	r9, #64	; 0x40
  40eaf6:	f000 8182 	beq.w	40edfe <_vfiprintf_r+0x9d2>
  40eafa:	3204      	adds	r2, #4
  40eafc:	880e      	ldrh	r6, [r1, #0]
  40eafe:	2700      	movs	r7, #0
  40eb00:	9206      	str	r2, [sp, #24]
  40eb02:	e6e8      	b.n	40e8d6 <_vfiprintf_r+0x4aa>
  40eb04:	9505      	str	r5, [sp, #20]
  40eb06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40eb0a:	b30b      	cbz	r3, 40eb50 <_vfiprintf_r+0x724>
  40eb0c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40eb10:	f04f 0300 	mov.w	r3, #0
  40eb14:	2701      	movs	r7, #1
  40eb16:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40eb1a:	ab12      	add	r3, sp, #72	; 0x48
  40eb1c:	46b8      	mov	r8, r7
  40eb1e:	9308      	str	r3, [sp, #32]
  40eb20:	e719      	b.n	40e956 <_vfiprintf_r+0x52a>
  40eb22:	9910      	ldr	r1, [sp, #64]	; 0x40
  40eb24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40eb26:	1c48      	adds	r0, r1, #1
  40eb28:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40eb2c:	2b00      	cmp	r3, #0
  40eb2e:	f43f adfc 	beq.w	40e72a <_vfiprintf_r+0x2fe>
  40eb32:	3201      	adds	r2, #1
  40eb34:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40eb38:	2301      	movs	r3, #1
  40eb3a:	2807      	cmp	r0, #7
  40eb3c:	9010      	str	r0, [sp, #64]	; 0x40
  40eb3e:	9211      	str	r2, [sp, #68]	; 0x44
  40eb40:	e884 000a 	stmia.w	r4, {r1, r3}
  40eb44:	f300 80e7 	bgt.w	40ed16 <_vfiprintf_r+0x8ea>
  40eb48:	4601      	mov	r1, r0
  40eb4a:	3408      	adds	r4, #8
  40eb4c:	3001      	adds	r0, #1
  40eb4e:	e5ec      	b.n	40e72a <_vfiprintf_r+0x2fe>
  40eb50:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40eb52:	b123      	cbz	r3, 40eb5e <_vfiprintf_r+0x732>
  40eb54:	9802      	ldr	r0, [sp, #8]
  40eb56:	aa0f      	add	r2, sp, #60	; 0x3c
  40eb58:	9901      	ldr	r1, [sp, #4]
  40eb5a:	f7ff fc2b 	bl	40e3b4 <__sprint_r.part.0>
  40eb5e:	9b01      	ldr	r3, [sp, #4]
  40eb60:	899b      	ldrh	r3, [r3, #12]
  40eb62:	065b      	lsls	r3, r3, #25
  40eb64:	f53f ad48 	bmi.w	40e5f8 <_vfiprintf_r+0x1cc>
  40eb68:	9803      	ldr	r0, [sp, #12]
  40eb6a:	b02d      	add	sp, #180	; 0xb4
  40eb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb70:	2b01      	cmp	r3, #1
  40eb72:	f000 811f 	beq.w	40edb4 <_vfiprintf_r+0x988>
  40eb76:	2b02      	cmp	r3, #2
  40eb78:	f040 80e7 	bne.w	40ed4a <_vfiprintf_r+0x91e>
  40eb7c:	465a      	mov	r2, fp
  40eb7e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  40eb82:	0933      	lsrs	r3, r6, #4
  40eb84:	f006 000f 	and.w	r0, r6, #15
  40eb88:	0939      	lsrs	r1, r7, #4
  40eb8a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40eb8e:	460f      	mov	r7, r1
  40eb90:	461e      	mov	r6, r3
  40eb92:	f81e 3000 	ldrb.w	r3, [lr, r0]
  40eb96:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40eb9a:	ea56 0307 	orrs.w	r3, r6, r7
  40eb9e:	d1f0      	bne.n	40eb82 <_vfiprintf_r+0x756>
  40eba0:	9208      	str	r2, [sp, #32]
  40eba2:	ebc2 080b 	rsb	r8, r2, fp
  40eba6:	e565      	b.n	40e674 <_vfiprintf_r+0x248>
  40eba8:	2a00      	cmp	r2, #0
  40ebaa:	f040 8167 	bne.w	40ee7c <_vfiprintf_r+0xa50>
  40ebae:	2201      	movs	r2, #1
  40ebb0:	9908      	ldr	r1, [sp, #32]
  40ebb2:	4643      	mov	r3, r8
  40ebb4:	465c      	mov	r4, fp
  40ebb6:	911c      	str	r1, [sp, #112]	; 0x70
  40ebb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  40ebbc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40ebc0:	9210      	str	r2, [sp, #64]	; 0x40
  40ebc2:	f104 0208 	add.w	r2, r4, #8
  40ebc6:	f019 0f04 	tst.w	r9, #4
  40ebca:	d047      	beq.n	40ec5c <_vfiprintf_r+0x830>
  40ebcc:	9905      	ldr	r1, [sp, #20]
  40ebce:	1bcd      	subs	r5, r1, r7
  40ebd0:	2d00      	cmp	r5, #0
  40ebd2:	dd43      	ble.n	40ec5c <_vfiprintf_r+0x830>
  40ebd4:	2d10      	cmp	r5, #16
  40ebd6:	f340 8201 	ble.w	40efdc <_vfiprintf_r+0xbb0>
  40ebda:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ebdc:	2410      	movs	r4, #16
  40ebde:	4e30      	ldr	r6, [pc, #192]	; (40eca0 <_vfiprintf_r+0x874>)
  40ebe0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40ebe4:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40ebe8:	e006      	b.n	40ebf8 <_vfiprintf_r+0x7cc>
  40ebea:	f04f 0e01 	mov.w	lr, #1
  40ebee:	4618      	mov	r0, r3
  40ebf0:	465a      	mov	r2, fp
  40ebf2:	3d10      	subs	r5, #16
  40ebf4:	2d10      	cmp	r5, #16
  40ebf6:	dd1d      	ble.n	40ec34 <_vfiprintf_r+0x808>
  40ebf8:	1c41      	adds	r1, r0, #1
  40ebfa:	3310      	adds	r3, #16
  40ebfc:	6016      	str	r6, [r2, #0]
  40ebfe:	f100 0e02 	add.w	lr, r0, #2
  40ec02:	2907      	cmp	r1, #7
  40ec04:	6054      	str	r4, [r2, #4]
  40ec06:	9311      	str	r3, [sp, #68]	; 0x44
  40ec08:	4608      	mov	r0, r1
  40ec0a:	f102 0208 	add.w	r2, r2, #8
  40ec0e:	9110      	str	r1, [sp, #64]	; 0x40
  40ec10:	ddef      	ble.n	40ebf2 <_vfiprintf_r+0x7c6>
  40ec12:	2b00      	cmp	r3, #0
  40ec14:	d0e9      	beq.n	40ebea <_vfiprintf_r+0x7be>
  40ec16:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec18:	4640      	mov	r0, r8
  40ec1a:	4649      	mov	r1, r9
  40ec1c:	f7ff fbca 	bl	40e3b4 <__sprint_r.part.0>
  40ec20:	465a      	mov	r2, fp
  40ec22:	2800      	cmp	r0, #0
  40ec24:	d19b      	bne.n	40eb5e <_vfiprintf_r+0x732>
  40ec26:	3d10      	subs	r5, #16
  40ec28:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ec2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ec2c:	2d10      	cmp	r5, #16
  40ec2e:	f100 0e01 	add.w	lr, r0, #1
  40ec32:	dce1      	bgt.n	40ebf8 <_vfiprintf_r+0x7cc>
  40ec34:	442b      	add	r3, r5
  40ec36:	f1be 0f07 	cmp.w	lr, #7
  40ec3a:	6016      	str	r6, [r2, #0]
  40ec3c:	6055      	str	r5, [r2, #4]
  40ec3e:	9311      	str	r3, [sp, #68]	; 0x44
  40ec40:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40ec44:	dd0a      	ble.n	40ec5c <_vfiprintf_r+0x830>
  40ec46:	2b00      	cmp	r3, #0
  40ec48:	f43f add3 	beq.w	40e7f2 <_vfiprintf_r+0x3c6>
  40ec4c:	9802      	ldr	r0, [sp, #8]
  40ec4e:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec50:	9901      	ldr	r1, [sp, #4]
  40ec52:	f7ff fbaf 	bl	40e3b4 <__sprint_r.part.0>
  40ec56:	2800      	cmp	r0, #0
  40ec58:	d181      	bne.n	40eb5e <_vfiprintf_r+0x732>
  40ec5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ec5c:	9a03      	ldr	r2, [sp, #12]
  40ec5e:	9905      	ldr	r1, [sp, #20]
  40ec60:	428f      	cmp	r7, r1
  40ec62:	bfac      	ite	ge
  40ec64:	19d2      	addge	r2, r2, r7
  40ec66:	1852      	addlt	r2, r2, r1
  40ec68:	9203      	str	r2, [sp, #12]
  40ec6a:	2b00      	cmp	r3, #0
  40ec6c:	f43f adc8 	beq.w	40e800 <_vfiprintf_r+0x3d4>
  40ec70:	9802      	ldr	r0, [sp, #8]
  40ec72:	aa0f      	add	r2, sp, #60	; 0x3c
  40ec74:	9901      	ldr	r1, [sp, #4]
  40ec76:	f7ff fb9d 	bl	40e3b4 <__sprint_r.part.0>
  40ec7a:	2800      	cmp	r0, #0
  40ec7c:	f43f adc0 	beq.w	40e800 <_vfiprintf_r+0x3d4>
  40ec80:	e76d      	b.n	40eb5e <_vfiprintf_r+0x732>
  40ec82:	9b05      	ldr	r3, [sp, #20]
  40ec84:	1bdd      	subs	r5, r3, r7
  40ec86:	2d00      	cmp	r5, #0
  40ec88:	f77f ad63 	ble.w	40e752 <_vfiprintf_r+0x326>
  40ec8c:	2d10      	cmp	r5, #16
  40ec8e:	f340 81b0 	ble.w	40eff2 <_vfiprintf_r+0xbc6>
  40ec92:	4e04      	ldr	r6, [pc, #16]	; (40eca4 <_vfiprintf_r+0x878>)
  40ec94:	2310      	movs	r3, #16
  40ec96:	e00e      	b.n	40ecb6 <_vfiprintf_r+0x88a>
  40ec98:	00413c14 	.word	0x00413c14
  40ec9c:	00413c00 	.word	0x00413c00
  40eca0:	00413c44 	.word	0x00413c44
  40eca4:	00413c34 	.word	0x00413c34
  40eca8:	f04f 0e01 	mov.w	lr, #1
  40ecac:	4611      	mov	r1, r2
  40ecae:	465c      	mov	r4, fp
  40ecb0:	3d10      	subs	r5, #16
  40ecb2:	2d10      	cmp	r5, #16
  40ecb4:	dd20      	ble.n	40ecf8 <_vfiprintf_r+0x8cc>
  40ecb6:	1c48      	adds	r0, r1, #1
  40ecb8:	3210      	adds	r2, #16
  40ecba:	6026      	str	r6, [r4, #0]
  40ecbc:	f101 0e02 	add.w	lr, r1, #2
  40ecc0:	2807      	cmp	r0, #7
  40ecc2:	6063      	str	r3, [r4, #4]
  40ecc4:	9211      	str	r2, [sp, #68]	; 0x44
  40ecc6:	4601      	mov	r1, r0
  40ecc8:	f104 0408 	add.w	r4, r4, #8
  40eccc:	9010      	str	r0, [sp, #64]	; 0x40
  40ecce:	ddef      	ble.n	40ecb0 <_vfiprintf_r+0x884>
  40ecd0:	2a00      	cmp	r2, #0
  40ecd2:	d0e9      	beq.n	40eca8 <_vfiprintf_r+0x87c>
  40ecd4:	9802      	ldr	r0, [sp, #8]
  40ecd6:	aa0f      	add	r2, sp, #60	; 0x3c
  40ecd8:	9901      	ldr	r1, [sp, #4]
  40ecda:	465c      	mov	r4, fp
  40ecdc:	9307      	str	r3, [sp, #28]
  40ecde:	f7ff fb69 	bl	40e3b4 <__sprint_r.part.0>
  40ece2:	2800      	cmp	r0, #0
  40ece4:	f47f af3b 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ece8:	3d10      	subs	r5, #16
  40ecea:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ecec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ecee:	2d10      	cmp	r5, #16
  40ecf0:	f101 0e01 	add.w	lr, r1, #1
  40ecf4:	9b07      	ldr	r3, [sp, #28]
  40ecf6:	dcde      	bgt.n	40ecb6 <_vfiprintf_r+0x88a>
  40ecf8:	442a      	add	r2, r5
  40ecfa:	f1be 0f07 	cmp.w	lr, #7
  40ecfe:	6026      	str	r6, [r4, #0]
  40ed00:	6065      	str	r5, [r4, #4]
  40ed02:	9211      	str	r2, [sp, #68]	; 0x44
  40ed04:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40ed08:	f300 80b1 	bgt.w	40ee6e <_vfiprintf_r+0xa42>
  40ed0c:	3408      	adds	r4, #8
  40ed0e:	f10e 0001 	add.w	r0, lr, #1
  40ed12:	4671      	mov	r1, lr
  40ed14:	e51d      	b.n	40e752 <_vfiprintf_r+0x326>
  40ed16:	2a00      	cmp	r2, #0
  40ed18:	f040 808b 	bne.w	40ee32 <_vfiprintf_r+0xa06>
  40ed1c:	f1bc 0f00 	cmp.w	ip, #0
  40ed20:	f000 8083 	beq.w	40ee2a <_vfiprintf_r+0x9fe>
  40ed24:	aa0e      	add	r2, sp, #56	; 0x38
  40ed26:	2102      	movs	r1, #2
  40ed28:	4618      	mov	r0, r3
  40ed2a:	465c      	mov	r4, fp
  40ed2c:	921c      	str	r2, [sp, #112]	; 0x70
  40ed2e:	460a      	mov	r2, r1
  40ed30:	911d      	str	r1, [sp, #116]	; 0x74
  40ed32:	e507      	b.n	40e744 <_vfiprintf_r+0x318>
  40ed34:	2a00      	cmp	r2, #0
  40ed36:	f040 808d 	bne.w	40ee54 <_vfiprintf_r+0xa28>
  40ed3a:	2001      	movs	r0, #1
  40ed3c:	4611      	mov	r1, r2
  40ed3e:	465c      	mov	r4, fp
  40ed40:	e503      	b.n	40e74a <_vfiprintf_r+0x31e>
  40ed42:	4690      	mov	r8, r2
  40ed44:	f8cd b020 	str.w	fp, [sp, #32]
  40ed48:	e494      	b.n	40e674 <_vfiprintf_r+0x248>
  40ed4a:	4659      	mov	r1, fp
  40ed4c:	08f2      	lsrs	r2, r6, #3
  40ed4e:	f006 0307 	and.w	r3, r6, #7
  40ed52:	08f8      	lsrs	r0, r7, #3
  40ed54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40ed58:	3330      	adds	r3, #48	; 0x30
  40ed5a:	4607      	mov	r7, r0
  40ed5c:	4616      	mov	r6, r2
  40ed5e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40ed62:	ea56 0207 	orrs.w	r2, r6, r7
  40ed66:	d1f1      	bne.n	40ed4c <_vfiprintf_r+0x920>
  40ed68:	f019 0f01 	tst.w	r9, #1
  40ed6c:	9108      	str	r1, [sp, #32]
  40ed6e:	f040 8092 	bne.w	40ee96 <_vfiprintf_r+0xa6a>
  40ed72:	ebc1 080b 	rsb	r8, r1, fp
  40ed76:	e47d      	b.n	40e674 <_vfiprintf_r+0x248>
  40ed78:	2302      	movs	r3, #2
  40ed7a:	e455      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40ed7c:	2a00      	cmp	r2, #0
  40ed7e:	f040 80e6 	bne.w	40ef4e <_vfiprintf_r+0xb22>
  40ed82:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40ed86:	2b00      	cmp	r3, #0
  40ed88:	f000 80bb 	beq.w	40ef02 <_vfiprintf_r+0xad6>
  40ed8c:	2301      	movs	r3, #1
  40ed8e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  40ed92:	465c      	mov	r4, fp
  40ed94:	921c      	str	r2, [sp, #112]	; 0x70
  40ed96:	4618      	mov	r0, r3
  40ed98:	931d      	str	r3, [sp, #116]	; 0x74
  40ed9a:	461a      	mov	r2, r3
  40ed9c:	e6d4      	b.n	40eb48 <_vfiprintf_r+0x71c>
  40ed9e:	9a05      	ldr	r2, [sp, #20]
  40eda0:	1bd5      	subs	r5, r2, r7
  40eda2:	465a      	mov	r2, fp
  40eda4:	2d00      	cmp	r5, #0
  40eda6:	f73f af15 	bgt.w	40ebd4 <_vfiprintf_r+0x7a8>
  40edaa:	e522      	b.n	40e7f2 <_vfiprintf_r+0x3c6>
  40edac:	4698      	mov	r8, r3
  40edae:	f8cd b020 	str.w	fp, [sp, #32]
  40edb2:	e45f      	b.n	40e674 <_vfiprintf_r+0x248>
  40edb4:	2f00      	cmp	r7, #0
  40edb6:	bf08      	it	eq
  40edb8:	2e0a      	cmpeq	r6, #10
  40edba:	d279      	bcs.n	40eeb0 <_vfiprintf_r+0xa84>
  40edbc:	ab2c      	add	r3, sp, #176	; 0xb0
  40edbe:	3630      	adds	r6, #48	; 0x30
  40edc0:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40edc4:	ebc3 080b 	rsb	r8, r3, fp
  40edc8:	9308      	str	r3, [sp, #32]
  40edca:	e453      	b.n	40e674 <_vfiprintf_r+0x248>
  40edcc:	9802      	ldr	r0, [sp, #8]
  40edce:	aa0f      	add	r2, sp, #60	; 0x3c
  40edd0:	9901      	ldr	r1, [sp, #4]
  40edd2:	f7ff faef 	bl	40e3b4 <__sprint_r.part.0>
  40edd6:	2800      	cmp	r0, #0
  40edd8:	f47f aec1 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40eddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40edde:	465a      	mov	r2, fp
  40ede0:	e6f1      	b.n	40ebc6 <_vfiprintf_r+0x79a>
  40ede2:	681e      	ldr	r6, [r3, #0]
  40ede4:	3304      	adds	r3, #4
  40ede6:	17f7      	asrs	r7, r6, #31
  40ede8:	9306      	str	r3, [sp, #24]
  40edea:	4632      	mov	r2, r6
  40edec:	463b      	mov	r3, r7
  40edee:	e5c6      	b.n	40e97e <_vfiprintf_r+0x552>
  40edf0:	9906      	ldr	r1, [sp, #24]
  40edf2:	2700      	movs	r7, #0
  40edf4:	460a      	mov	r2, r1
  40edf6:	680e      	ldr	r6, [r1, #0]
  40edf8:	3204      	adds	r2, #4
  40edfa:	9206      	str	r2, [sp, #24]
  40edfc:	e414      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40edfe:	6816      	ldr	r6, [r2, #0]
  40ee00:	3204      	adds	r2, #4
  40ee02:	2700      	movs	r7, #0
  40ee04:	9206      	str	r2, [sp, #24]
  40ee06:	e566      	b.n	40e8d6 <_vfiprintf_r+0x4aa>
  40ee08:	3204      	adds	r2, #4
  40ee0a:	681e      	ldr	r6, [r3, #0]
  40ee0c:	2700      	movs	r7, #0
  40ee0e:	2301      	movs	r3, #1
  40ee10:	9206      	str	r2, [sp, #24]
  40ee12:	e409      	b.n	40e628 <_vfiprintf_r+0x1fc>
  40ee14:	9802      	ldr	r0, [sp, #8]
  40ee16:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee18:	9901      	ldr	r1, [sp, #4]
  40ee1a:	f7ff facb 	bl	40e3b4 <__sprint_r.part.0>
  40ee1e:	2800      	cmp	r0, #0
  40ee20:	f47f ae9d 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ee24:	465c      	mov	r4, fp
  40ee26:	f7ff bbc8 	b.w	40e5ba <_vfiprintf_r+0x18e>
  40ee2a:	4618      	mov	r0, r3
  40ee2c:	4611      	mov	r1, r2
  40ee2e:	465c      	mov	r4, fp
  40ee30:	e48b      	b.n	40e74a <_vfiprintf_r+0x31e>
  40ee32:	9802      	ldr	r0, [sp, #8]
  40ee34:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee36:	9901      	ldr	r1, [sp, #4]
  40ee38:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ee3c:	f7ff faba 	bl	40e3b4 <__sprint_r.part.0>
  40ee40:	2800      	cmp	r0, #0
  40ee42:	f47f ae8c 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ee46:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee48:	465c      	mov	r4, fp
  40ee4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee4c:	1c48      	adds	r0, r1, #1
  40ee4e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ee52:	e46a      	b.n	40e72a <_vfiprintf_r+0x2fe>
  40ee54:	9802      	ldr	r0, [sp, #8]
  40ee56:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee58:	9901      	ldr	r1, [sp, #4]
  40ee5a:	f7ff faab 	bl	40e3b4 <__sprint_r.part.0>
  40ee5e:	2800      	cmp	r0, #0
  40ee60:	f47f ae7d 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ee64:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ee66:	465c      	mov	r4, fp
  40ee68:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee6a:	1c48      	adds	r0, r1, #1
  40ee6c:	e46d      	b.n	40e74a <_vfiprintf_r+0x31e>
  40ee6e:	2a00      	cmp	r2, #0
  40ee70:	f040 8095 	bne.w	40ef9e <_vfiprintf_r+0xb72>
  40ee74:	2001      	movs	r0, #1
  40ee76:	4611      	mov	r1, r2
  40ee78:	465c      	mov	r4, fp
  40ee7a:	e46a      	b.n	40e752 <_vfiprintf_r+0x326>
  40ee7c:	9802      	ldr	r0, [sp, #8]
  40ee7e:	aa0f      	add	r2, sp, #60	; 0x3c
  40ee80:	9901      	ldr	r1, [sp, #4]
  40ee82:	f7ff fa97 	bl	40e3b4 <__sprint_r.part.0>
  40ee86:	2800      	cmp	r0, #0
  40ee88:	f47f ae69 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ee8c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40ee8e:	465c      	mov	r4, fp
  40ee90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ee92:	3001      	adds	r0, #1
  40ee94:	e49b      	b.n	40e7ce <_vfiprintf_r+0x3a2>
  40ee96:	2b30      	cmp	r3, #48	; 0x30
  40ee98:	9b08      	ldr	r3, [sp, #32]
  40ee9a:	d022      	beq.n	40eee2 <_vfiprintf_r+0xab6>
  40ee9c:	3b01      	subs	r3, #1
  40ee9e:	461a      	mov	r2, r3
  40eea0:	9308      	str	r3, [sp, #32]
  40eea2:	2330      	movs	r3, #48	; 0x30
  40eea4:	ebc2 080b 	rsb	r8, r2, fp
  40eea8:	f801 3c01 	strb.w	r3, [r1, #-1]
  40eeac:	f7ff bbe2 	b.w	40e674 <_vfiprintf_r+0x248>
  40eeb0:	46d8      	mov	r8, fp
  40eeb2:	4630      	mov	r0, r6
  40eeb4:	4639      	mov	r1, r7
  40eeb6:	220a      	movs	r2, #10
  40eeb8:	2300      	movs	r3, #0
  40eeba:	f003 fc93 	bl	4127e4 <__aeabi_uldivmod>
  40eebe:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40eec2:	4630      	mov	r0, r6
  40eec4:	4639      	mov	r1, r7
  40eec6:	2300      	movs	r3, #0
  40eec8:	220a      	movs	r2, #10
  40eeca:	f808 ed01 	strb.w	lr, [r8, #-1]!
  40eece:	f003 fc89 	bl	4127e4 <__aeabi_uldivmod>
  40eed2:	4606      	mov	r6, r0
  40eed4:	460f      	mov	r7, r1
  40eed6:	ea56 0307 	orrs.w	r3, r6, r7
  40eeda:	d1ea      	bne.n	40eeb2 <_vfiprintf_r+0xa86>
  40eedc:	4643      	mov	r3, r8
  40eede:	f8cd 8020 	str.w	r8, [sp, #32]
  40eee2:	ebc3 080b 	rsb	r8, r3, fp
  40eee6:	f7ff bbc5 	b.w	40e674 <_vfiprintf_r+0x248>
  40eeea:	252d      	movs	r5, #45	; 0x2d
  40eeec:	4276      	negs	r6, r6
  40eeee:	f8cd 8010 	str.w	r8, [sp, #16]
  40eef2:	f04f 0301 	mov.w	r3, #1
  40eef6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40eefa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40eefe:	f7ff bb9a 	b.w	40e636 <_vfiprintf_r+0x20a>
  40ef02:	4611      	mov	r1, r2
  40ef04:	2001      	movs	r0, #1
  40ef06:	465c      	mov	r4, fp
  40ef08:	f1bc 0f00 	cmp.w	ip, #0
  40ef0c:	f43f ac21 	beq.w	40e752 <_vfiprintf_r+0x326>
  40ef10:	aa0e      	add	r2, sp, #56	; 0x38
  40ef12:	2302      	movs	r3, #2
  40ef14:	f8cb 2000 	str.w	r2, [fp]
  40ef18:	461a      	mov	r2, r3
  40ef1a:	f8cb 3004 	str.w	r3, [fp, #4]
  40ef1e:	e411      	b.n	40e744 <_vfiprintf_r+0x318>
  40ef20:	f019 0f10 	tst.w	r9, #16
  40ef24:	d10b      	bne.n	40ef3e <_vfiprintf_r+0xb12>
  40ef26:	f019 0f40 	tst.w	r9, #64	; 0x40
  40ef2a:	d008      	beq.n	40ef3e <_vfiprintf_r+0xb12>
  40ef2c:	9a06      	ldr	r2, [sp, #24]
  40ef2e:	6813      	ldr	r3, [r2, #0]
  40ef30:	3204      	adds	r2, #4
  40ef32:	9206      	str	r2, [sp, #24]
  40ef34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40ef38:	801a      	strh	r2, [r3, #0]
  40ef3a:	f7ff baa9 	b.w	40e490 <_vfiprintf_r+0x64>
  40ef3e:	9a06      	ldr	r2, [sp, #24]
  40ef40:	6813      	ldr	r3, [r2, #0]
  40ef42:	3204      	adds	r2, #4
  40ef44:	9206      	str	r2, [sp, #24]
  40ef46:	9a03      	ldr	r2, [sp, #12]
  40ef48:	601a      	str	r2, [r3, #0]
  40ef4a:	f7ff baa1 	b.w	40e490 <_vfiprintf_r+0x64>
  40ef4e:	9802      	ldr	r0, [sp, #8]
  40ef50:	aa0f      	add	r2, sp, #60	; 0x3c
  40ef52:	9901      	ldr	r1, [sp, #4]
  40ef54:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40ef58:	f7ff fa2c 	bl	40e3b4 <__sprint_r.part.0>
  40ef5c:	2800      	cmp	r0, #0
  40ef5e:	f47f adfe 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40ef62:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ef64:	465c      	mov	r4, fp
  40ef66:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ef68:	1c48      	adds	r0, r1, #1
  40ef6a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40ef6e:	e5db      	b.n	40eb28 <_vfiprintf_r+0x6fc>
  40ef70:	f049 0920 	orr.w	r9, r9, #32
  40ef74:	f10a 0001 	add.w	r0, sl, #1
  40ef78:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ef7c:	f7ff baba 	b.w	40e4f4 <_vfiprintf_r+0xc8>
  40ef80:	426d      	negs	r5, r5
  40ef82:	9306      	str	r3, [sp, #24]
  40ef84:	4650      	mov	r0, sl
  40ef86:	e440      	b.n	40e80a <_vfiprintf_r+0x3de>
  40ef88:	9808      	ldr	r0, [sp, #32]
  40ef8a:	9606      	str	r6, [sp, #24]
  40ef8c:	f7fc fec6 	bl	40bd1c <strlen>
  40ef90:	2300      	movs	r3, #0
  40ef92:	4680      	mov	r8, r0
  40ef94:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40ef98:	9304      	str	r3, [sp, #16]
  40ef9a:	f7ff bb6b 	b.w	40e674 <_vfiprintf_r+0x248>
  40ef9e:	9802      	ldr	r0, [sp, #8]
  40efa0:	aa0f      	add	r2, sp, #60	; 0x3c
  40efa2:	9901      	ldr	r1, [sp, #4]
  40efa4:	f7ff fa06 	bl	40e3b4 <__sprint_r.part.0>
  40efa8:	2800      	cmp	r0, #0
  40efaa:	f47f add8 	bne.w	40eb5e <_vfiprintf_r+0x732>
  40efae:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efb0:	465c      	mov	r4, fp
  40efb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efb4:	1c48      	adds	r0, r1, #1
  40efb6:	f7ff bbcc 	b.w	40e752 <_vfiprintf_r+0x326>
  40efba:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40efbe:	3101      	adds	r1, #1
  40efc0:	4e14      	ldr	r6, [pc, #80]	; (40f014 <_vfiprintf_r+0xbe8>)
  40efc2:	f7ff bba3 	b.w	40e70c <_vfiprintf_r+0x2e0>
  40efc6:	f1b8 0f06 	cmp.w	r8, #6
  40efca:	4b13      	ldr	r3, [pc, #76]	; (40f018 <_vfiprintf_r+0xbec>)
  40efcc:	9606      	str	r6, [sp, #24]
  40efce:	bf28      	it	cs
  40efd0:	f04f 0806 	movcs.w	r8, #6
  40efd4:	9308      	str	r3, [sp, #32]
  40efd6:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  40efda:	e4bc      	b.n	40e956 <_vfiprintf_r+0x52a>
  40efdc:	9910      	ldr	r1, [sp, #64]	; 0x40
  40efde:	4e0d      	ldr	r6, [pc, #52]	; (40f014 <_vfiprintf_r+0xbe8>)
  40efe0:	f101 0e01 	add.w	lr, r1, #1
  40efe4:	e626      	b.n	40ec34 <_vfiprintf_r+0x808>
  40efe6:	9606      	str	r6, [sp, #24]
  40efe8:	9004      	str	r0, [sp, #16]
  40efea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40efee:	f7ff bb41 	b.w	40e674 <_vfiprintf_r+0x248>
  40eff2:	4686      	mov	lr, r0
  40eff4:	4e09      	ldr	r6, [pc, #36]	; (40f01c <_vfiprintf_r+0xbf0>)
  40eff6:	e67f      	b.n	40ecf8 <_vfiprintf_r+0x8cc>
  40eff8:	9a06      	ldr	r2, [sp, #24]
  40effa:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40effe:	6816      	ldr	r6, [r2, #0]
  40f000:	3204      	adds	r2, #4
  40f002:	2e00      	cmp	r6, #0
  40f004:	9206      	str	r2, [sp, #24]
  40f006:	f6bf aa75 	bge.w	40e4f4 <_vfiprintf_r+0xc8>
  40f00a:	f04f 36ff 	mov.w	r6, #4294967295
  40f00e:	f7ff ba71 	b.w	40e4f4 <_vfiprintf_r+0xc8>
  40f012:	bf00      	nop
  40f014:	00413c44 	.word	0x00413c44
  40f018:	00413c28 	.word	0x00413c28
  40f01c:	00413c34 	.word	0x00413c34

0040f020 <__sbprintf>:
  40f020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f024:	898d      	ldrh	r5, [r1, #12]
  40f026:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40f02a:	4688      	mov	r8, r1
  40f02c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40f030:	f025 0502 	bic.w	r5, r5, #2
  40f034:	ac1c      	add	r4, sp, #112	; 0x70
  40f036:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40f03a:	2700      	movs	r7, #0
  40f03c:	f8ad 5014 	strh.w	r5, [sp, #20]
  40f040:	a902      	add	r1, sp, #8
  40f042:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40f046:	4681      	mov	r9, r0
  40f048:	9402      	str	r4, [sp, #8]
  40f04a:	9501      	str	r5, [sp, #4]
  40f04c:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  40f050:	9406      	str	r4, [sp, #24]
  40f052:	951b      	str	r5, [sp, #108]	; 0x6c
  40f054:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40f058:	f8ad a016 	strh.w	sl, [sp, #22]
  40f05c:	9509      	str	r5, [sp, #36]	; 0x24
  40f05e:	9d01      	ldr	r5, [sp, #4]
  40f060:	9708      	str	r7, [sp, #32]
  40f062:	950b      	str	r5, [sp, #44]	; 0x2c
  40f064:	9604      	str	r6, [sp, #16]
  40f066:	9607      	str	r6, [sp, #28]
  40f068:	f7ff f9e0 	bl	40e42c <_vfiprintf_r>
  40f06c:	1e04      	subs	r4, r0, #0
  40f06e:	db07      	blt.n	40f080 <__sbprintf+0x60>
  40f070:	4648      	mov	r0, r9
  40f072:	a902      	add	r1, sp, #8
  40f074:	f001 f938 	bl	4102e8 <_fflush_r>
  40f078:	42b8      	cmp	r0, r7
  40f07a:	bf18      	it	ne
  40f07c:	f04f 34ff 	movne.w	r4, #4294967295
  40f080:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f084:	065b      	lsls	r3, r3, #25
  40f086:	d505      	bpl.n	40f094 <__sbprintf+0x74>
  40f088:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40f08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f090:	f8a8 300c 	strh.w	r3, [r8, #12]
  40f094:	4620      	mov	r0, r4
  40f096:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40f09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f09e:	bf00      	nop

0040f0a0 <__swsetup_r>:
  40f0a0:	b538      	push	{r3, r4, r5, lr}
  40f0a2:	4b2f      	ldr	r3, [pc, #188]	; (40f160 <__swsetup_r+0xc0>)
  40f0a4:	4605      	mov	r5, r0
  40f0a6:	460c      	mov	r4, r1
  40f0a8:	6818      	ldr	r0, [r3, #0]
  40f0aa:	b110      	cbz	r0, 40f0b2 <__swsetup_r+0x12>
  40f0ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f0ae:	2b00      	cmp	r3, #0
  40f0b0:	d036      	beq.n	40f120 <__swsetup_r+0x80>
  40f0b2:	89a2      	ldrh	r2, [r4, #12]
  40f0b4:	b293      	uxth	r3, r2
  40f0b6:	0718      	lsls	r0, r3, #28
  40f0b8:	d50b      	bpl.n	40f0d2 <__swsetup_r+0x32>
  40f0ba:	6920      	ldr	r0, [r4, #16]
  40f0bc:	b1a0      	cbz	r0, 40f0e8 <__swsetup_r+0x48>
  40f0be:	f013 0201 	ands.w	r2, r3, #1
  40f0c2:	d11d      	bne.n	40f100 <__swsetup_r+0x60>
  40f0c4:	0799      	lsls	r1, r3, #30
  40f0c6:	d400      	bmi.n	40f0ca <__swsetup_r+0x2a>
  40f0c8:	6962      	ldr	r2, [r4, #20]
  40f0ca:	60a2      	str	r2, [r4, #8]
  40f0cc:	b1f8      	cbz	r0, 40f10e <__swsetup_r+0x6e>
  40f0ce:	2000      	movs	r0, #0
  40f0d0:	bd38      	pop	{r3, r4, r5, pc}
  40f0d2:	06d9      	lsls	r1, r3, #27
  40f0d4:	d53b      	bpl.n	40f14e <__swsetup_r+0xae>
  40f0d6:	0758      	lsls	r0, r3, #29
  40f0d8:	d425      	bmi.n	40f126 <__swsetup_r+0x86>
  40f0da:	6920      	ldr	r0, [r4, #16]
  40f0dc:	f042 0208 	orr.w	r2, r2, #8
  40f0e0:	b293      	uxth	r3, r2
  40f0e2:	81a2      	strh	r2, [r4, #12]
  40f0e4:	2800      	cmp	r0, #0
  40f0e6:	d1ea      	bne.n	40f0be <__swsetup_r+0x1e>
  40f0e8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40f0ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40f0f0:	d0e5      	beq.n	40f0be <__swsetup_r+0x1e>
  40f0f2:	4628      	mov	r0, r5
  40f0f4:	4621      	mov	r1, r4
  40f0f6:	f002 f8a5 	bl	411244 <__smakebuf_r>
  40f0fa:	89a3      	ldrh	r3, [r4, #12]
  40f0fc:	6920      	ldr	r0, [r4, #16]
  40f0fe:	e7de      	b.n	40f0be <__swsetup_r+0x1e>
  40f100:	6963      	ldr	r3, [r4, #20]
  40f102:	2200      	movs	r2, #0
  40f104:	425b      	negs	r3, r3
  40f106:	60a2      	str	r2, [r4, #8]
  40f108:	61a3      	str	r3, [r4, #24]
  40f10a:	2800      	cmp	r0, #0
  40f10c:	d1df      	bne.n	40f0ce <__swsetup_r+0x2e>
  40f10e:	89a3      	ldrh	r3, [r4, #12]
  40f110:	061a      	lsls	r2, r3, #24
  40f112:	d5dd      	bpl.n	40f0d0 <__swsetup_r+0x30>
  40f114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f118:	f04f 30ff 	mov.w	r0, #4294967295
  40f11c:	81a3      	strh	r3, [r4, #12]
  40f11e:	bd38      	pop	{r3, r4, r5, pc}
  40f120:	f001 f97c 	bl	41041c <__sinit>
  40f124:	e7c5      	b.n	40f0b2 <__swsetup_r+0x12>
  40f126:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f128:	b149      	cbz	r1, 40f13e <__swsetup_r+0x9e>
  40f12a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f12e:	4299      	cmp	r1, r3
  40f130:	d003      	beq.n	40f13a <__swsetup_r+0x9a>
  40f132:	4628      	mov	r0, r5
  40f134:	f001 fa4a 	bl	4105cc <_free_r>
  40f138:	89a2      	ldrh	r2, [r4, #12]
  40f13a:	2300      	movs	r3, #0
  40f13c:	6323      	str	r3, [r4, #48]	; 0x30
  40f13e:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40f142:	2300      	movs	r3, #0
  40f144:	6920      	ldr	r0, [r4, #16]
  40f146:	b292      	uxth	r2, r2
  40f148:	e884 0009 	stmia.w	r4, {r0, r3}
  40f14c:	e7c6      	b.n	40f0dc <__swsetup_r+0x3c>
  40f14e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40f152:	2309      	movs	r3, #9
  40f154:	f04f 30ff 	mov.w	r0, #4294967295
  40f158:	602b      	str	r3, [r5, #0]
  40f15a:	81a2      	strh	r2, [r4, #12]
  40f15c:	bd38      	pop	{r3, r4, r5, pc}
  40f15e:	bf00      	nop
  40f160:	204004d8 	.word	0x204004d8

0040f164 <register_fini>:
  40f164:	4b02      	ldr	r3, [pc, #8]	; (40f170 <register_fini+0xc>)
  40f166:	b113      	cbz	r3, 40f16e <register_fini+0xa>
  40f168:	4802      	ldr	r0, [pc, #8]	; (40f174 <register_fini+0x10>)
  40f16a:	f000 b80d 	b.w	40f188 <atexit>
  40f16e:	4770      	bx	lr
  40f170:	00000000 	.word	0x00000000
  40f174:	00410431 	.word	0x00410431

0040f178 <abort>:
  40f178:	b508      	push	{r3, lr}
  40f17a:	2006      	movs	r0, #6
  40f17c:	f003 f818 	bl	4121b0 <raise>
  40f180:	2001      	movs	r0, #1
  40f182:	f7f4 fae7 	bl	403754 <_exit>
  40f186:	bf00      	nop

0040f188 <atexit>:
  40f188:	4601      	mov	r1, r0
  40f18a:	2000      	movs	r0, #0
  40f18c:	4602      	mov	r2, r0
  40f18e:	4603      	mov	r3, r0
  40f190:	f003 b9e2 	b.w	412558 <__register_exitproc>

0040f194 <quorem>:
  40f194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f198:	6903      	ldr	r3, [r0, #16]
  40f19a:	b083      	sub	sp, #12
  40f19c:	690f      	ldr	r7, [r1, #16]
  40f19e:	429f      	cmp	r7, r3
  40f1a0:	f300 8093 	bgt.w	40f2ca <quorem+0x136>
  40f1a4:	3f01      	subs	r7, #1
  40f1a6:	f101 0614 	add.w	r6, r1, #20
  40f1aa:	f100 0a14 	add.w	sl, r0, #20
  40f1ae:	00bb      	lsls	r3, r7, #2
  40f1b0:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  40f1b4:	461d      	mov	r5, r3
  40f1b6:	9300      	str	r3, [sp, #0]
  40f1b8:	3201      	adds	r2, #1
  40f1ba:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40f1be:	eb0a 0405 	add.w	r4, sl, r5
  40f1c2:	eb06 0905 	add.w	r9, r6, r5
  40f1c6:	fbb3 f8f2 	udiv	r8, r3, r2
  40f1ca:	9401      	str	r4, [sp, #4]
  40f1cc:	f1b8 0f00 	cmp.w	r8, #0
  40f1d0:	d040      	beq.n	40f254 <quorem+0xc0>
  40f1d2:	2500      	movs	r5, #0
  40f1d4:	46b4      	mov	ip, r6
  40f1d6:	46d6      	mov	lr, sl
  40f1d8:	462b      	mov	r3, r5
  40f1da:	f85c bb04 	ldr.w	fp, [ip], #4
  40f1de:	f8de 2000 	ldr.w	r2, [lr]
  40f1e2:	fa1f f48b 	uxth.w	r4, fp
  40f1e6:	45e1      	cmp	r9, ip
  40f1e8:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  40f1ec:	fb04 5508 	mla	r5, r4, r8, r5
  40f1f0:	fb0b fb08 	mul.w	fp, fp, r8
  40f1f4:	b2ac      	uxth	r4, r5
  40f1f6:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  40f1fa:	eba3 0304 	sub.w	r3, r3, r4
  40f1fe:	fa1f fb85 	uxth.w	fp, r5
  40f202:	fa13 f482 	uxtah	r4, r3, r2
  40f206:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40f20a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40f20e:	fa1f fb84 	uxth.w	fp, r4
  40f212:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40f216:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40f21a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40f21e:	f84e 2b04 	str.w	r2, [lr], #4
  40f222:	d2da      	bcs.n	40f1da <quorem+0x46>
  40f224:	9b00      	ldr	r3, [sp, #0]
  40f226:	f85a 3003 	ldr.w	r3, [sl, r3]
  40f22a:	b99b      	cbnz	r3, 40f254 <quorem+0xc0>
  40f22c:	9c01      	ldr	r4, [sp, #4]
  40f22e:	1f23      	subs	r3, r4, #4
  40f230:	459a      	cmp	sl, r3
  40f232:	d20e      	bcs.n	40f252 <quorem+0xbe>
  40f234:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40f238:	b95b      	cbnz	r3, 40f252 <quorem+0xbe>
  40f23a:	f1a4 0308 	sub.w	r3, r4, #8
  40f23e:	e001      	b.n	40f244 <quorem+0xb0>
  40f240:	6812      	ldr	r2, [r2, #0]
  40f242:	b932      	cbnz	r2, 40f252 <quorem+0xbe>
  40f244:	459a      	cmp	sl, r3
  40f246:	461a      	mov	r2, r3
  40f248:	f107 37ff 	add.w	r7, r7, #4294967295
  40f24c:	f1a3 0304 	sub.w	r3, r3, #4
  40f250:	d3f6      	bcc.n	40f240 <quorem+0xac>
  40f252:	6107      	str	r7, [r0, #16]
  40f254:	4604      	mov	r4, r0
  40f256:	f002 fb79 	bl	41194c <__mcmp>
  40f25a:	2800      	cmp	r0, #0
  40f25c:	db31      	blt.n	40f2c2 <quorem+0x12e>
  40f25e:	f108 0801 	add.w	r8, r8, #1
  40f262:	4655      	mov	r5, sl
  40f264:	2000      	movs	r0, #0
  40f266:	f856 1b04 	ldr.w	r1, [r6], #4
  40f26a:	682a      	ldr	r2, [r5, #0]
  40f26c:	b28b      	uxth	r3, r1
  40f26e:	45b1      	cmp	r9, r6
  40f270:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40f274:	eba0 0303 	sub.w	r3, r0, r3
  40f278:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  40f27c:	fa13 f382 	uxtah	r3, r3, r2
  40f280:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40f284:	b29b      	uxth	r3, r3
  40f286:	ea4f 4022 	mov.w	r0, r2, asr #16
  40f28a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40f28e:	f845 3b04 	str.w	r3, [r5], #4
  40f292:	d2e8      	bcs.n	40f266 <quorem+0xd2>
  40f294:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40f298:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40f29c:	b98a      	cbnz	r2, 40f2c2 <quorem+0x12e>
  40f29e:	1f1a      	subs	r2, r3, #4
  40f2a0:	4592      	cmp	sl, r2
  40f2a2:	d20d      	bcs.n	40f2c0 <quorem+0x12c>
  40f2a4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40f2a8:	b952      	cbnz	r2, 40f2c0 <quorem+0x12c>
  40f2aa:	3b08      	subs	r3, #8
  40f2ac:	e001      	b.n	40f2b2 <quorem+0x11e>
  40f2ae:	6812      	ldr	r2, [r2, #0]
  40f2b0:	b932      	cbnz	r2, 40f2c0 <quorem+0x12c>
  40f2b2:	459a      	cmp	sl, r3
  40f2b4:	461a      	mov	r2, r3
  40f2b6:	f107 37ff 	add.w	r7, r7, #4294967295
  40f2ba:	f1a3 0304 	sub.w	r3, r3, #4
  40f2be:	d3f6      	bcc.n	40f2ae <quorem+0x11a>
  40f2c0:	6127      	str	r7, [r4, #16]
  40f2c2:	4640      	mov	r0, r8
  40f2c4:	b003      	add	sp, #12
  40f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2ca:	2000      	movs	r0, #0
  40f2cc:	b003      	add	sp, #12
  40f2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f2d2:	bf00      	nop
  40f2d4:	0000      	movs	r0, r0
	...

0040f2d8 <_dtoa_r>:
  40f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f2dc:	b099      	sub	sp, #100	; 0x64
  40f2de:	4604      	mov	r4, r0
  40f2e0:	9300      	str	r3, [sp, #0]
  40f2e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40f2e4:	9101      	str	r1, [sp, #4]
  40f2e6:	9203      	str	r2, [sp, #12]
  40f2e8:	9d22      	ldr	r5, [sp, #136]	; 0x88
  40f2ea:	ec5b ab10 	vmov	sl, fp, d0
  40f2ee:	b14b      	cbz	r3, 40f304 <_dtoa_r+0x2c>
  40f2f0:	6c46      	ldr	r6, [r0, #68]	; 0x44
  40f2f2:	2201      	movs	r2, #1
  40f2f4:	4619      	mov	r1, r3
  40f2f6:	40b2      	lsls	r2, r6
  40f2f8:	605e      	str	r6, [r3, #4]
  40f2fa:	609a      	str	r2, [r3, #8]
  40f2fc:	f002 f8e6 	bl	4114cc <_Bfree>
  40f300:	2300      	movs	r3, #0
  40f302:	6423      	str	r3, [r4, #64]	; 0x40
  40f304:	f1bb 0f00 	cmp.w	fp, #0
  40f308:	46d9      	mov	r9, fp
  40f30a:	db35      	blt.n	40f378 <_dtoa_r+0xa0>
  40f30c:	2300      	movs	r3, #0
  40f30e:	602b      	str	r3, [r5, #0]
  40f310:	4b97      	ldr	r3, [pc, #604]	; (40f570 <_dtoa_r+0x298>)
  40f312:	461a      	mov	r2, r3
  40f314:	ea09 0303 	and.w	r3, r9, r3
  40f318:	4293      	cmp	r3, r2
  40f31a:	d016      	beq.n	40f34a <_dtoa_r+0x72>
  40f31c:	4650      	mov	r0, sl
  40f31e:	4659      	mov	r1, fp
  40f320:	2200      	movs	r2, #0
  40f322:	2300      	movs	r3, #0
  40f324:	f7fb fe86 	bl	40b034 <__aeabi_dcmpeq>
  40f328:	4656      	mov	r6, sl
  40f32a:	465f      	mov	r7, fp
  40f32c:	4680      	mov	r8, r0
  40f32e:	b348      	cbz	r0, 40f384 <_dtoa_r+0xac>
  40f330:	2301      	movs	r3, #1
  40f332:	9a00      	ldr	r2, [sp, #0]
  40f334:	6013      	str	r3, [r2, #0]
  40f336:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f338:	2b00      	cmp	r3, #0
  40f33a:	f000 80c8 	beq.w	40f4ce <_dtoa_r+0x1f6>
  40f33e:	488d      	ldr	r0, [pc, #564]	; (40f574 <_dtoa_r+0x29c>)
  40f340:	6018      	str	r0, [r3, #0]
  40f342:	3801      	subs	r0, #1
  40f344:	b019      	add	sp, #100	; 0x64
  40f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f34a:	f242 730f 	movw	r3, #9999	; 0x270f
  40f34e:	9a00      	ldr	r2, [sp, #0]
  40f350:	6013      	str	r3, [r2, #0]
  40f352:	f1ba 0f00 	cmp.w	sl, #0
  40f356:	f000 80a3 	beq.w	40f4a0 <_dtoa_r+0x1c8>
  40f35a:	4887      	ldr	r0, [pc, #540]	; (40f578 <_dtoa_r+0x2a0>)
  40f35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f35e:	2b00      	cmp	r3, #0
  40f360:	d0f0      	beq.n	40f344 <_dtoa_r+0x6c>
  40f362:	78c3      	ldrb	r3, [r0, #3]
  40f364:	2b00      	cmp	r3, #0
  40f366:	f000 80b4 	beq.w	40f4d2 <_dtoa_r+0x1fa>
  40f36a:	f100 0308 	add.w	r3, r0, #8
  40f36e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  40f370:	6013      	str	r3, [r2, #0]
  40f372:	b019      	add	sp, #100	; 0x64
  40f374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f378:	2301      	movs	r3, #1
  40f37a:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40f37e:	602b      	str	r3, [r5, #0]
  40f380:	46cb      	mov	fp, r9
  40f382:	e7c5      	b.n	40f310 <_dtoa_r+0x38>
  40f384:	4620      	mov	r0, r4
  40f386:	a917      	add	r1, sp, #92	; 0x5c
  40f388:	aa16      	add	r2, sp, #88	; 0x58
  40f38a:	ec47 6b10 	vmov	d0, r6, r7
  40f38e:	f002 fc03 	bl	411b98 <__d2b>
  40f392:	9007      	str	r0, [sp, #28]
  40f394:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40f398:	f040 808b 	bne.w	40f4b2 <_dtoa_r+0x1da>
  40f39c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40f3a0:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40f3a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40f3a6:	4445      	add	r5, r8
  40f3a8:	429d      	cmp	r5, r3
  40f3aa:	f2c0 81c9 	blt.w	40f740 <_dtoa_r+0x468>
  40f3ae:	331f      	adds	r3, #31
  40f3b0:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40f3b4:	1b5b      	subs	r3, r3, r5
  40f3b6:	fa2a f002 	lsr.w	r0, sl, r2
  40f3ba:	fa09 f903 	lsl.w	r9, r9, r3
  40f3be:	ea49 0000 	orr.w	r0, r9, r0
  40f3c2:	f7fb fb59 	bl	40aa78 <__aeabi_ui2d>
  40f3c6:	3d01      	subs	r5, #1
  40f3c8:	2301      	movs	r3, #1
  40f3ca:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40f3ce:	9312      	str	r3, [sp, #72]	; 0x48
  40f3d0:	2200      	movs	r2, #0
  40f3d2:	4b6a      	ldr	r3, [pc, #424]	; (40f57c <_dtoa_r+0x2a4>)
  40f3d4:	f7fb fa12 	bl	40a7fc <__aeabi_dsub>
  40f3d8:	a35f      	add	r3, pc, #380	; (adr r3, 40f558 <_dtoa_r+0x280>)
  40f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3de:	f7fb fbc1 	bl	40ab64 <__aeabi_dmul>
  40f3e2:	a35f      	add	r3, pc, #380	; (adr r3, 40f560 <_dtoa_r+0x288>)
  40f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3e8:	f7fb fa0a 	bl	40a800 <__adddf3>
  40f3ec:	4606      	mov	r6, r0
  40f3ee:	460f      	mov	r7, r1
  40f3f0:	4628      	mov	r0, r5
  40f3f2:	f7fb fb51 	bl	40aa98 <__aeabi_i2d>
  40f3f6:	a35c      	add	r3, pc, #368	; (adr r3, 40f568 <_dtoa_r+0x290>)
  40f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f3fc:	f7fb fbb2 	bl	40ab64 <__aeabi_dmul>
  40f400:	4602      	mov	r2, r0
  40f402:	460b      	mov	r3, r1
  40f404:	4630      	mov	r0, r6
  40f406:	4639      	mov	r1, r7
  40f408:	f7fb f9fa 	bl	40a800 <__adddf3>
  40f40c:	4606      	mov	r6, r0
  40f40e:	460f      	mov	r7, r1
  40f410:	f7fb fe42 	bl	40b098 <__aeabi_d2iz>
  40f414:	2200      	movs	r2, #0
  40f416:	9002      	str	r0, [sp, #8]
  40f418:	4639      	mov	r1, r7
  40f41a:	4630      	mov	r0, r6
  40f41c:	2300      	movs	r3, #0
  40f41e:	f7fb fe13 	bl	40b048 <__aeabi_dcmplt>
  40f422:	2800      	cmp	r0, #0
  40f424:	f040 816e 	bne.w	40f704 <_dtoa_r+0x42c>
  40f428:	9b02      	ldr	r3, [sp, #8]
  40f42a:	2b16      	cmp	r3, #22
  40f42c:	f200 8090 	bhi.w	40f550 <_dtoa_r+0x278>
  40f430:	4953      	ldr	r1, [pc, #332]	; (40f580 <_dtoa_r+0x2a8>)
  40f432:	4652      	mov	r2, sl
  40f434:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40f438:	465b      	mov	r3, fp
  40f43a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40f43e:	f7fb fe21 	bl	40b084 <__aeabi_dcmpgt>
  40f442:	2800      	cmp	r0, #0
  40f444:	f000 817a 	beq.w	40f73c <_dtoa_r+0x464>
  40f448:	9b02      	ldr	r3, [sp, #8]
  40f44a:	3b01      	subs	r3, #1
  40f44c:	9302      	str	r3, [sp, #8]
  40f44e:	2300      	movs	r3, #0
  40f450:	930e      	str	r3, [sp, #56]	; 0x38
  40f452:	ebc5 0508 	rsb	r5, r5, r8
  40f456:	1e6b      	subs	r3, r5, #1
  40f458:	9304      	str	r3, [sp, #16]
  40f45a:	f100 816a 	bmi.w	40f732 <_dtoa_r+0x45a>
  40f45e:	2300      	movs	r3, #0
  40f460:	930a      	str	r3, [sp, #40]	; 0x28
  40f462:	9b02      	ldr	r3, [sp, #8]
  40f464:	2b00      	cmp	r3, #0
  40f466:	f2c0 815b 	blt.w	40f720 <_dtoa_r+0x448>
  40f46a:	9a04      	ldr	r2, [sp, #16]
  40f46c:	930d      	str	r3, [sp, #52]	; 0x34
  40f46e:	4611      	mov	r1, r2
  40f470:	4419      	add	r1, r3
  40f472:	2300      	movs	r3, #0
  40f474:	9104      	str	r1, [sp, #16]
  40f476:	930b      	str	r3, [sp, #44]	; 0x2c
  40f478:	9b01      	ldr	r3, [sp, #4]
  40f47a:	2b09      	cmp	r3, #9
  40f47c:	d82b      	bhi.n	40f4d6 <_dtoa_r+0x1fe>
  40f47e:	2b05      	cmp	r3, #5
  40f480:	f340 866d 	ble.w	41015e <_dtoa_r+0xe86>
  40f484:	3b04      	subs	r3, #4
  40f486:	2500      	movs	r5, #0
  40f488:	9301      	str	r3, [sp, #4]
  40f48a:	9b01      	ldr	r3, [sp, #4]
  40f48c:	3b02      	subs	r3, #2
  40f48e:	2b03      	cmp	r3, #3
  40f490:	f200 8668 	bhi.w	410164 <_dtoa_r+0xe8c>
  40f494:	e8df f013 	tbh	[pc, r3, lsl #1]
  40f498:	02820294 	.word	0x02820294
  40f49c:	067c017e 	.word	0x067c017e
  40f4a0:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40f4a4:	4b34      	ldr	r3, [pc, #208]	; (40f578 <_dtoa_r+0x2a0>)
  40f4a6:	4a37      	ldr	r2, [pc, #220]	; (40f584 <_dtoa_r+0x2ac>)
  40f4a8:	2800      	cmp	r0, #0
  40f4aa:	bf14      	ite	ne
  40f4ac:	4618      	movne	r0, r3
  40f4ae:	4610      	moveq	r0, r2
  40f4b0:	e754      	b.n	40f35c <_dtoa_r+0x84>
  40f4b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40f4b6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  40f4ba:	4650      	mov	r0, sl
  40f4bc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40f4c0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40f4c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40f4c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40f4cc:	e780      	b.n	40f3d0 <_dtoa_r+0xf8>
  40f4ce:	482e      	ldr	r0, [pc, #184]	; (40f588 <_dtoa_r+0x2b0>)
  40f4d0:	e738      	b.n	40f344 <_dtoa_r+0x6c>
  40f4d2:	1cc3      	adds	r3, r0, #3
  40f4d4:	e74b      	b.n	40f36e <_dtoa_r+0x96>
  40f4d6:	2100      	movs	r1, #0
  40f4d8:	f04f 33ff 	mov.w	r3, #4294967295
  40f4dc:	4620      	mov	r0, r4
  40f4de:	461d      	mov	r5, r3
  40f4e0:	930f      	str	r3, [sp, #60]	; 0x3c
  40f4e2:	460e      	mov	r6, r1
  40f4e4:	2301      	movs	r3, #1
  40f4e6:	6461      	str	r1, [r4, #68]	; 0x44
  40f4e8:	930c      	str	r3, [sp, #48]	; 0x30
  40f4ea:	9103      	str	r1, [sp, #12]
  40f4ec:	f001 ffc6 	bl	41147c <_Balloc>
  40f4f0:	9601      	str	r6, [sp, #4]
  40f4f2:	9005      	str	r0, [sp, #20]
  40f4f4:	9506      	str	r5, [sp, #24]
  40f4f6:	6420      	str	r0, [r4, #64]	; 0x40
  40f4f8:	9a02      	ldr	r2, [sp, #8]
  40f4fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40f4fc:	2a0e      	cmp	r2, #14
  40f4fe:	dc47      	bgt.n	40f590 <_dtoa_r+0x2b8>
  40f500:	2b00      	cmp	r3, #0
  40f502:	db45      	blt.n	40f590 <_dtoa_r+0x2b8>
  40f504:	4b1e      	ldr	r3, [pc, #120]	; (40f580 <_dtoa_r+0x2a8>)
  40f506:	9a02      	ldr	r2, [sp, #8]
  40f508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f50c:	e9d3 8900 	ldrd	r8, r9, [r3]
  40f510:	9b06      	ldr	r3, [sp, #24]
  40f512:	2b00      	cmp	r3, #0
  40f514:	f300 8257 	bgt.w	40f9c6 <_dtoa_r+0x6ee>
  40f518:	9b03      	ldr	r3, [sp, #12]
  40f51a:	2b00      	cmp	r3, #0
  40f51c:	f280 8253 	bge.w	40f9c6 <_dtoa_r+0x6ee>
  40f520:	9b06      	ldr	r3, [sp, #24]
  40f522:	2b00      	cmp	r3, #0
  40f524:	f040 8323 	bne.w	40fb6e <_dtoa_r+0x896>
  40f528:	2200      	movs	r2, #0
  40f52a:	4b18      	ldr	r3, [pc, #96]	; (40f58c <_dtoa_r+0x2b4>)
  40f52c:	4640      	mov	r0, r8
  40f52e:	4649      	mov	r1, r9
  40f530:	f7fb fb18 	bl	40ab64 <__aeabi_dmul>
  40f534:	4652      	mov	r2, sl
  40f536:	465b      	mov	r3, fp
  40f538:	f7fb fd9a 	bl	40b070 <__aeabi_dcmpge>
  40f53c:	9e06      	ldr	r6, [sp, #24]
  40f53e:	9608      	str	r6, [sp, #32]
  40f540:	2800      	cmp	r0, #0
  40f542:	f000 80bb 	beq.w	40f6bc <_dtoa_r+0x3e4>
  40f546:	9b03      	ldr	r3, [sp, #12]
  40f548:	9d05      	ldr	r5, [sp, #20]
  40f54a:	43db      	mvns	r3, r3
  40f54c:	9302      	str	r3, [sp, #8]
  40f54e:	e0bc      	b.n	40f6ca <_dtoa_r+0x3f2>
  40f550:	2301      	movs	r3, #1
  40f552:	930e      	str	r3, [sp, #56]	; 0x38
  40f554:	e77d      	b.n	40f452 <_dtoa_r+0x17a>
  40f556:	bf00      	nop
  40f558:	636f4361 	.word	0x636f4361
  40f55c:	3fd287a7 	.word	0x3fd287a7
  40f560:	8b60c8b3 	.word	0x8b60c8b3
  40f564:	3fc68a28 	.word	0x3fc68a28
  40f568:	509f79fb 	.word	0x509f79fb
  40f56c:	3fd34413 	.word	0x3fd34413
  40f570:	7ff00000 	.word	0x7ff00000
  40f574:	00413c31 	.word	0x00413c31
  40f578:	00413d64 	.word	0x00413d64
  40f57c:	3ff80000 	.word	0x3ff80000
  40f580:	00413e78 	.word	0x00413e78
  40f584:	00413d58 	.word	0x00413d58
  40f588:	00413c30 	.word	0x00413c30
  40f58c:	40140000 	.word	0x40140000
  40f590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f592:	2a00      	cmp	r2, #0
  40f594:	f040 80e1 	bne.w	40f75a <_dtoa_r+0x482>
  40f598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f59a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40f59c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f59e:	9308      	str	r3, [sp, #32]
  40f5a0:	9904      	ldr	r1, [sp, #16]
  40f5a2:	2900      	cmp	r1, #0
  40f5a4:	460b      	mov	r3, r1
  40f5a6:	dd0a      	ble.n	40f5be <_dtoa_r+0x2e6>
  40f5a8:	2d00      	cmp	r5, #0
  40f5aa:	dd08      	ble.n	40f5be <_dtoa_r+0x2e6>
  40f5ac:	42a9      	cmp	r1, r5
  40f5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f5b0:	bfa8      	it	ge
  40f5b2:	462b      	movge	r3, r5
  40f5b4:	1ad2      	subs	r2, r2, r3
  40f5b6:	1aed      	subs	r5, r5, r3
  40f5b8:	1acb      	subs	r3, r1, r3
  40f5ba:	920a      	str	r2, [sp, #40]	; 0x28
  40f5bc:	9304      	str	r3, [sp, #16]
  40f5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f5c0:	2b00      	cmp	r3, #0
  40f5c2:	dd1b      	ble.n	40f5fc <_dtoa_r+0x324>
  40f5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f5c6:	2b00      	cmp	r3, #0
  40f5c8:	f000 84c4 	beq.w	40ff54 <_dtoa_r+0xc7c>
  40f5cc:	2e00      	cmp	r6, #0
  40f5ce:	dd11      	ble.n	40f5f4 <_dtoa_r+0x31c>
  40f5d0:	9908      	ldr	r1, [sp, #32]
  40f5d2:	4632      	mov	r2, r6
  40f5d4:	4620      	mov	r0, r4
  40f5d6:	f002 f90f 	bl	4117f8 <__pow5mult>
  40f5da:	9f07      	ldr	r7, [sp, #28]
  40f5dc:	4601      	mov	r1, r0
  40f5de:	9008      	str	r0, [sp, #32]
  40f5e0:	463a      	mov	r2, r7
  40f5e2:	4620      	mov	r0, r4
  40f5e4:	f002 f866 	bl	4116b4 <__multiply>
  40f5e8:	4603      	mov	r3, r0
  40f5ea:	4639      	mov	r1, r7
  40f5ec:	4620      	mov	r0, r4
  40f5ee:	9307      	str	r3, [sp, #28]
  40f5f0:	f001 ff6c 	bl	4114cc <_Bfree>
  40f5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f5f6:	1b9a      	subs	r2, r3, r6
  40f5f8:	f040 84f4 	bne.w	40ffe4 <_dtoa_r+0xd0c>
  40f5fc:	4620      	mov	r0, r4
  40f5fe:	2101      	movs	r1, #1
  40f600:	f002 f84e 	bl	4116a0 <__i2b>
  40f604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f606:	4606      	mov	r6, r0
  40f608:	2b00      	cmp	r3, #0
  40f60a:	f340 827c 	ble.w	40fb06 <_dtoa_r+0x82e>
  40f60e:	4601      	mov	r1, r0
  40f610:	461a      	mov	r2, r3
  40f612:	4620      	mov	r0, r4
  40f614:	f002 f8f0 	bl	4117f8 <__pow5mult>
  40f618:	9b01      	ldr	r3, [sp, #4]
  40f61a:	4606      	mov	r6, r0
  40f61c:	2b01      	cmp	r3, #1
  40f61e:	f340 84e8 	ble.w	40fff2 <_dtoa_r+0xd1a>
  40f622:	f04f 0800 	mov.w	r8, #0
  40f626:	6933      	ldr	r3, [r6, #16]
  40f628:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40f62c:	6918      	ldr	r0, [r3, #16]
  40f62e:	f001 ffe3 	bl	4115f8 <__hi0bits>
  40f632:	f1c0 0020 	rsb	r0, r0, #32
  40f636:	9b04      	ldr	r3, [sp, #16]
  40f638:	4418      	add	r0, r3
  40f63a:	f010 001f 	ands.w	r0, r0, #31
  40f63e:	f000 82f1 	beq.w	40fc24 <_dtoa_r+0x94c>
  40f642:	f1c0 0320 	rsb	r3, r0, #32
  40f646:	2b04      	cmp	r3, #4
  40f648:	f340 8583 	ble.w	410152 <_dtoa_r+0xe7a>
  40f64c:	f1c0 001c 	rsb	r0, r0, #28
  40f650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f652:	4405      	add	r5, r0
  40f654:	4403      	add	r3, r0
  40f656:	930a      	str	r3, [sp, #40]	; 0x28
  40f658:	9b04      	ldr	r3, [sp, #16]
  40f65a:	4403      	add	r3, r0
  40f65c:	9304      	str	r3, [sp, #16]
  40f65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f660:	2b00      	cmp	r3, #0
  40f662:	dd05      	ble.n	40f670 <_dtoa_r+0x398>
  40f664:	9907      	ldr	r1, [sp, #28]
  40f666:	461a      	mov	r2, r3
  40f668:	4620      	mov	r0, r4
  40f66a:	f002 f915 	bl	411898 <__lshift>
  40f66e:	9007      	str	r0, [sp, #28]
  40f670:	9b04      	ldr	r3, [sp, #16]
  40f672:	2b00      	cmp	r3, #0
  40f674:	dd05      	ble.n	40f682 <_dtoa_r+0x3aa>
  40f676:	4631      	mov	r1, r6
  40f678:	461a      	mov	r2, r3
  40f67a:	4620      	mov	r0, r4
  40f67c:	f002 f90c 	bl	411898 <__lshift>
  40f680:	4606      	mov	r6, r0
  40f682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f684:	2b00      	cmp	r3, #0
  40f686:	f040 837f 	bne.w	40fd88 <_dtoa_r+0xab0>
  40f68a:	9b01      	ldr	r3, [sp, #4]
  40f68c:	2b02      	cmp	r3, #2
  40f68e:	f340 8271 	ble.w	40fb74 <_dtoa_r+0x89c>
  40f692:	9b06      	ldr	r3, [sp, #24]
  40f694:	2b00      	cmp	r3, #0
  40f696:	f300 826d 	bgt.w	40fb74 <_dtoa_r+0x89c>
  40f69a:	9b06      	ldr	r3, [sp, #24]
  40f69c:	2b00      	cmp	r3, #0
  40f69e:	f47f af52 	bne.w	40f546 <_dtoa_r+0x26e>
  40f6a2:	4631      	mov	r1, r6
  40f6a4:	2205      	movs	r2, #5
  40f6a6:	4620      	mov	r0, r4
  40f6a8:	f001 ff1a 	bl	4114e0 <__multadd>
  40f6ac:	4606      	mov	r6, r0
  40f6ae:	9807      	ldr	r0, [sp, #28]
  40f6b0:	4631      	mov	r1, r6
  40f6b2:	f002 f94b 	bl	41194c <__mcmp>
  40f6b6:	2800      	cmp	r0, #0
  40f6b8:	f77f af45 	ble.w	40f546 <_dtoa_r+0x26e>
  40f6bc:	9a02      	ldr	r2, [sp, #8]
  40f6be:	2331      	movs	r3, #49	; 0x31
  40f6c0:	3201      	adds	r2, #1
  40f6c2:	9202      	str	r2, [sp, #8]
  40f6c4:	9a05      	ldr	r2, [sp, #20]
  40f6c6:	1c55      	adds	r5, r2, #1
  40f6c8:	7013      	strb	r3, [r2, #0]
  40f6ca:	4631      	mov	r1, r6
  40f6cc:	4620      	mov	r0, r4
  40f6ce:	f001 fefd 	bl	4114cc <_Bfree>
  40f6d2:	9b08      	ldr	r3, [sp, #32]
  40f6d4:	b11b      	cbz	r3, 40f6de <_dtoa_r+0x406>
  40f6d6:	9908      	ldr	r1, [sp, #32]
  40f6d8:	4620      	mov	r0, r4
  40f6da:	f001 fef7 	bl	4114cc <_Bfree>
  40f6de:	4620      	mov	r0, r4
  40f6e0:	9907      	ldr	r1, [sp, #28]
  40f6e2:	f001 fef3 	bl	4114cc <_Bfree>
  40f6e6:	2200      	movs	r2, #0
  40f6e8:	9b02      	ldr	r3, [sp, #8]
  40f6ea:	702a      	strb	r2, [r5, #0]
  40f6ec:	3301      	adds	r3, #1
  40f6ee:	9a00      	ldr	r2, [sp, #0]
  40f6f0:	6013      	str	r3, [r2, #0]
  40f6f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f6f4:	2b00      	cmp	r3, #0
  40f6f6:	f000 829c 	beq.w	40fc32 <_dtoa_r+0x95a>
  40f6fa:	9805      	ldr	r0, [sp, #20]
  40f6fc:	601d      	str	r5, [r3, #0]
  40f6fe:	b019      	add	sp, #100	; 0x64
  40f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f704:	9802      	ldr	r0, [sp, #8]
  40f706:	f7fb f9c7 	bl	40aa98 <__aeabi_i2d>
  40f70a:	4632      	mov	r2, r6
  40f70c:	463b      	mov	r3, r7
  40f70e:	f7fb fc91 	bl	40b034 <__aeabi_dcmpeq>
  40f712:	2800      	cmp	r0, #0
  40f714:	f47f ae88 	bne.w	40f428 <_dtoa_r+0x150>
  40f718:	9b02      	ldr	r3, [sp, #8]
  40f71a:	3b01      	subs	r3, #1
  40f71c:	9302      	str	r3, [sp, #8]
  40f71e:	e683      	b.n	40f428 <_dtoa_r+0x150>
  40f720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f722:	9b02      	ldr	r3, [sp, #8]
  40f724:	1ad2      	subs	r2, r2, r3
  40f726:	425b      	negs	r3, r3
  40f728:	930b      	str	r3, [sp, #44]	; 0x2c
  40f72a:	2300      	movs	r3, #0
  40f72c:	920a      	str	r2, [sp, #40]	; 0x28
  40f72e:	930d      	str	r3, [sp, #52]	; 0x34
  40f730:	e6a2      	b.n	40f478 <_dtoa_r+0x1a0>
  40f732:	425b      	negs	r3, r3
  40f734:	930a      	str	r3, [sp, #40]	; 0x28
  40f736:	2300      	movs	r3, #0
  40f738:	9304      	str	r3, [sp, #16]
  40f73a:	e692      	b.n	40f462 <_dtoa_r+0x18a>
  40f73c:	900e      	str	r0, [sp, #56]	; 0x38
  40f73e:	e688      	b.n	40f452 <_dtoa_r+0x17a>
  40f740:	4bba      	ldr	r3, [pc, #744]	; (40fa2c <_dtoa_r+0x754>)
  40f742:	1b5b      	subs	r3, r3, r5
  40f744:	fa0a f003 	lsl.w	r0, sl, r3
  40f748:	e63b      	b.n	40f3c2 <_dtoa_r+0xea>
  40f74a:	2100      	movs	r1, #0
  40f74c:	f04f 32ff 	mov.w	r2, #4294967295
  40f750:	9103      	str	r1, [sp, #12]
  40f752:	2101      	movs	r1, #1
  40f754:	9206      	str	r2, [sp, #24]
  40f756:	910c      	str	r1, [sp, #48]	; 0x30
  40f758:	920f      	str	r2, [sp, #60]	; 0x3c
  40f75a:	9a01      	ldr	r2, [sp, #4]
  40f75c:	2a01      	cmp	r2, #1
  40f75e:	f340 8455 	ble.w	41000c <_dtoa_r+0xd34>
  40f762:	9b06      	ldr	r3, [sp, #24]
  40f764:	1e5e      	subs	r6, r3, #1
  40f766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f768:	42b3      	cmp	r3, r6
  40f76a:	f2c0 83fb 	blt.w	40ff64 <_dtoa_r+0xc8c>
  40f76e:	1b9e      	subs	r6, r3, r6
  40f770:	9b06      	ldr	r3, [sp, #24]
  40f772:	2b00      	cmp	r3, #0
  40f774:	f2c0 8475 	blt.w	410062 <_dtoa_r+0xd8a>
  40f778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f77a:	9b06      	ldr	r3, [sp, #24]
  40f77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f77e:	4620      	mov	r0, r4
  40f780:	2101      	movs	r1, #1
  40f782:	441a      	add	r2, r3
  40f784:	920a      	str	r2, [sp, #40]	; 0x28
  40f786:	9a04      	ldr	r2, [sp, #16]
  40f788:	441a      	add	r2, r3
  40f78a:	9204      	str	r2, [sp, #16]
  40f78c:	f001 ff88 	bl	4116a0 <__i2b>
  40f790:	9008      	str	r0, [sp, #32]
  40f792:	e705      	b.n	40f5a0 <_dtoa_r+0x2c8>
  40f794:	2301      	movs	r3, #1
  40f796:	930c      	str	r3, [sp, #48]	; 0x30
  40f798:	9b03      	ldr	r3, [sp, #12]
  40f79a:	2b00      	cmp	r3, #0
  40f79c:	f340 83cd 	ble.w	40ff3a <_dtoa_r+0xc62>
  40f7a0:	2b0e      	cmp	r3, #14
  40f7a2:	bf8c      	ite	hi
  40f7a4:	2500      	movhi	r5, #0
  40f7a6:	f005 0501 	andls.w	r5, r5, #1
  40f7aa:	461e      	mov	r6, r3
  40f7ac:	930f      	str	r3, [sp, #60]	; 0x3c
  40f7ae:	9306      	str	r3, [sp, #24]
  40f7b0:	2100      	movs	r1, #0
  40f7b2:	2e17      	cmp	r6, #23
  40f7b4:	6461      	str	r1, [r4, #68]	; 0x44
  40f7b6:	d909      	bls.n	40f7cc <_dtoa_r+0x4f4>
  40f7b8:	2201      	movs	r2, #1
  40f7ba:	2304      	movs	r3, #4
  40f7bc:	005b      	lsls	r3, r3, #1
  40f7be:	4611      	mov	r1, r2
  40f7c0:	3201      	adds	r2, #1
  40f7c2:	f103 0014 	add.w	r0, r3, #20
  40f7c6:	42b0      	cmp	r0, r6
  40f7c8:	d9f8      	bls.n	40f7bc <_dtoa_r+0x4e4>
  40f7ca:	6461      	str	r1, [r4, #68]	; 0x44
  40f7cc:	4620      	mov	r0, r4
  40f7ce:	f001 fe55 	bl	41147c <_Balloc>
  40f7d2:	9005      	str	r0, [sp, #20]
  40f7d4:	6420      	str	r0, [r4, #64]	; 0x40
  40f7d6:	2d00      	cmp	r5, #0
  40f7d8:	f43f ae8e 	beq.w	40f4f8 <_dtoa_r+0x220>
  40f7dc:	9802      	ldr	r0, [sp, #8]
  40f7de:	2800      	cmp	r0, #0
  40f7e0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40f7e4:	f340 822c 	ble.w	40fc40 <_dtoa_r+0x968>
  40f7e8:	4a91      	ldr	r2, [pc, #580]	; (40fa30 <_dtoa_r+0x758>)
  40f7ea:	f000 030f 	and.w	r3, r0, #15
  40f7ee:	1105      	asrs	r5, r0, #4
  40f7f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40f7f4:	e9d3 6700 	ldrd	r6, r7, [r3]
  40f7f8:	06eb      	lsls	r3, r5, #27
  40f7fa:	f140 8215 	bpl.w	40fc28 <_dtoa_r+0x950>
  40f7fe:	4b8d      	ldr	r3, [pc, #564]	; (40fa34 <_dtoa_r+0x75c>)
  40f800:	4650      	mov	r0, sl
  40f802:	4659      	mov	r1, fp
  40f804:	f005 050f 	and.w	r5, r5, #15
  40f808:	f04f 0803 	mov.w	r8, #3
  40f80c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40f810:	f7fb fad2 	bl	40adb8 <__aeabi_ddiv>
  40f814:	4682      	mov	sl, r0
  40f816:	468b      	mov	fp, r1
  40f818:	b195      	cbz	r5, 40f840 <_dtoa_r+0x568>
  40f81a:	f8df 9218 	ldr.w	r9, [pc, #536]	; 40fa34 <_dtoa_r+0x75c>
  40f81e:	f015 0f01 	tst.w	r5, #1
  40f822:	4630      	mov	r0, r6
  40f824:	4639      	mov	r1, r7
  40f826:	d007      	beq.n	40f838 <_dtoa_r+0x560>
  40f828:	f108 0801 	add.w	r8, r8, #1
  40f82c:	e9d9 2300 	ldrd	r2, r3, [r9]
  40f830:	f7fb f998 	bl	40ab64 <__aeabi_dmul>
  40f834:	4606      	mov	r6, r0
  40f836:	460f      	mov	r7, r1
  40f838:	106d      	asrs	r5, r5, #1
  40f83a:	f109 0908 	add.w	r9, r9, #8
  40f83e:	d1ee      	bne.n	40f81e <_dtoa_r+0x546>
  40f840:	4650      	mov	r0, sl
  40f842:	4659      	mov	r1, fp
  40f844:	4632      	mov	r2, r6
  40f846:	463b      	mov	r3, r7
  40f848:	f7fb fab6 	bl	40adb8 <__aeabi_ddiv>
  40f84c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40f850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40f852:	b143      	cbz	r3, 40f866 <_dtoa_r+0x58e>
  40f854:	2200      	movs	r2, #0
  40f856:	4b78      	ldr	r3, [pc, #480]	; (40fa38 <_dtoa_r+0x760>)
  40f858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f85c:	f7fb fbf4 	bl	40b048 <__aeabi_dcmplt>
  40f860:	2800      	cmp	r0, #0
  40f862:	f040 8391 	bne.w	40ff88 <_dtoa_r+0xcb0>
  40f866:	4640      	mov	r0, r8
  40f868:	f7fb f916 	bl	40aa98 <__aeabi_i2d>
  40f86c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40f870:	f7fb f978 	bl	40ab64 <__aeabi_dmul>
  40f874:	4b71      	ldr	r3, [pc, #452]	; (40fa3c <_dtoa_r+0x764>)
  40f876:	2200      	movs	r2, #0
  40f878:	f7fa ffc2 	bl	40a800 <__adddf3>
  40f87c:	9b06      	ldr	r3, [sp, #24]
  40f87e:	4680      	mov	r8, r0
  40f880:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  40f884:	2b00      	cmp	r3, #0
  40f886:	f000 815a 	beq.w	40fb3e <_dtoa_r+0x866>
  40f88a:	9b02      	ldr	r3, [sp, #8]
  40f88c:	9f06      	ldr	r7, [sp, #24]
  40f88e:	9313      	str	r3, [sp, #76]	; 0x4c
  40f890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f892:	2b00      	cmp	r3, #0
  40f894:	f000 8205 	beq.w	40fca2 <_dtoa_r+0x9ca>
  40f898:	4b65      	ldr	r3, [pc, #404]	; (40fa30 <_dtoa_r+0x758>)
  40f89a:	2000      	movs	r0, #0
  40f89c:	9a05      	ldr	r2, [sp, #20]
  40f89e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  40f8a2:	4967      	ldr	r1, [pc, #412]	; (40fa40 <_dtoa_r+0x768>)
  40f8a4:	1c55      	adds	r5, r2, #1
  40f8a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40f8aa:	f7fb fa85 	bl	40adb8 <__aeabi_ddiv>
  40f8ae:	4642      	mov	r2, r8
  40f8b0:	464b      	mov	r3, r9
  40f8b2:	f7fa ffa3 	bl	40a7fc <__aeabi_dsub>
  40f8b6:	4682      	mov	sl, r0
  40f8b8:	468b      	mov	fp, r1
  40f8ba:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40f8be:	4649      	mov	r1, r9
  40f8c0:	4640      	mov	r0, r8
  40f8c2:	f7fb fbe9 	bl	40b098 <__aeabi_d2iz>
  40f8c6:	4606      	mov	r6, r0
  40f8c8:	f7fb f8e6 	bl	40aa98 <__aeabi_i2d>
  40f8cc:	4602      	mov	r2, r0
  40f8ce:	3630      	adds	r6, #48	; 0x30
  40f8d0:	460b      	mov	r3, r1
  40f8d2:	4640      	mov	r0, r8
  40f8d4:	4649      	mov	r1, r9
  40f8d6:	f7fa ff91 	bl	40a7fc <__aeabi_dsub>
  40f8da:	9b05      	ldr	r3, [sp, #20]
  40f8dc:	4680      	mov	r8, r0
  40f8de:	4689      	mov	r9, r1
  40f8e0:	b2f6      	uxtb	r6, r6
  40f8e2:	4650      	mov	r0, sl
  40f8e4:	4659      	mov	r1, fp
  40f8e6:	4642      	mov	r2, r8
  40f8e8:	701e      	strb	r6, [r3, #0]
  40f8ea:	464b      	mov	r3, r9
  40f8ec:	f7fb fbca 	bl	40b084 <__aeabi_dcmpgt>
  40f8f0:	2800      	cmp	r0, #0
  40f8f2:	f040 8239 	bne.w	40fd68 <_dtoa_r+0xa90>
  40f8f6:	4642      	mov	r2, r8
  40f8f8:	464b      	mov	r3, r9
  40f8fa:	2000      	movs	r0, #0
  40f8fc:	494e      	ldr	r1, [pc, #312]	; (40fa38 <_dtoa_r+0x760>)
  40f8fe:	f7fa ff7d 	bl	40a7fc <__aeabi_dsub>
  40f902:	4602      	mov	r2, r0
  40f904:	460b      	mov	r3, r1
  40f906:	4650      	mov	r0, sl
  40f908:	4659      	mov	r1, fp
  40f90a:	f7fb fbbb 	bl	40b084 <__aeabi_dcmpgt>
  40f90e:	2800      	cmp	r0, #0
  40f910:	f040 80e7 	bne.w	40fae2 <_dtoa_r+0x80a>
  40f914:	2f01      	cmp	r7, #1
  40f916:	f340 8190 	ble.w	40fc3a <_dtoa_r+0x962>
  40f91a:	9b05      	ldr	r3, [sp, #20]
  40f91c:	9414      	str	r4, [sp, #80]	; 0x50
  40f91e:	441f      	add	r7, r3
  40f920:	9708      	str	r7, [sp, #32]
  40f922:	e010      	b.n	40f946 <_dtoa_r+0x66e>
  40f924:	4642      	mov	r2, r8
  40f926:	464b      	mov	r3, r9
  40f928:	2000      	movs	r0, #0
  40f92a:	4943      	ldr	r1, [pc, #268]	; (40fa38 <_dtoa_r+0x760>)
  40f92c:	f7fa ff66 	bl	40a7fc <__aeabi_dsub>
  40f930:	4652      	mov	r2, sl
  40f932:	465b      	mov	r3, fp
  40f934:	f7fb fb88 	bl	40b048 <__aeabi_dcmplt>
  40f938:	2800      	cmp	r0, #0
  40f93a:	f040 8398 	bne.w	41006e <_dtoa_r+0xd96>
  40f93e:	9b08      	ldr	r3, [sp, #32]
  40f940:	429d      	cmp	r5, r3
  40f942:	f000 8179 	beq.w	40fc38 <_dtoa_r+0x960>
  40f946:	4650      	mov	r0, sl
  40f948:	4659      	mov	r1, fp
  40f94a:	2200      	movs	r2, #0
  40f94c:	4b3d      	ldr	r3, [pc, #244]	; (40fa44 <_dtoa_r+0x76c>)
  40f94e:	f7fb f909 	bl	40ab64 <__aeabi_dmul>
  40f952:	2200      	movs	r2, #0
  40f954:	4b3b      	ldr	r3, [pc, #236]	; (40fa44 <_dtoa_r+0x76c>)
  40f956:	4682      	mov	sl, r0
  40f958:	468b      	mov	fp, r1
  40f95a:	4640      	mov	r0, r8
  40f95c:	4649      	mov	r1, r9
  40f95e:	f7fb f901 	bl	40ab64 <__aeabi_dmul>
  40f962:	4606      	mov	r6, r0
  40f964:	460f      	mov	r7, r1
  40f966:	f7fb fb97 	bl	40b098 <__aeabi_d2iz>
  40f96a:	4604      	mov	r4, r0
  40f96c:	f7fb f894 	bl	40aa98 <__aeabi_i2d>
  40f970:	4602      	mov	r2, r0
  40f972:	4630      	mov	r0, r6
  40f974:	3430      	adds	r4, #48	; 0x30
  40f976:	460b      	mov	r3, r1
  40f978:	4639      	mov	r1, r7
  40f97a:	b2e6      	uxtb	r6, r4
  40f97c:	f7fa ff3e 	bl	40a7fc <__aeabi_dsub>
  40f980:	4652      	mov	r2, sl
  40f982:	465b      	mov	r3, fp
  40f984:	f805 6b01 	strb.w	r6, [r5], #1
  40f988:	4680      	mov	r8, r0
  40f98a:	4689      	mov	r9, r1
  40f98c:	f7fb fb5c 	bl	40b048 <__aeabi_dcmplt>
  40f990:	2800      	cmp	r0, #0
  40f992:	d0c7      	beq.n	40f924 <_dtoa_r+0x64c>
  40f994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40f996:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40f998:	9302      	str	r3, [sp, #8]
  40f99a:	e6a0      	b.n	40f6de <_dtoa_r+0x406>
  40f99c:	2300      	movs	r3, #0
  40f99e:	930c      	str	r3, [sp, #48]	; 0x30
  40f9a0:	9b03      	ldr	r3, [sp, #12]
  40f9a2:	9a02      	ldr	r2, [sp, #8]
  40f9a4:	4413      	add	r3, r2
  40f9a6:	930f      	str	r3, [sp, #60]	; 0x3c
  40f9a8:	3301      	adds	r3, #1
  40f9aa:	2b00      	cmp	r3, #0
  40f9ac:	9306      	str	r3, [sp, #24]
  40f9ae:	f340 82cc 	ble.w	40ff4a <_dtoa_r+0xc72>
  40f9b2:	9e06      	ldr	r6, [sp, #24]
  40f9b4:	2e0e      	cmp	r6, #14
  40f9b6:	bf8c      	ite	hi
  40f9b8:	2500      	movhi	r5, #0
  40f9ba:	f005 0501 	andls.w	r5, r5, #1
  40f9be:	e6f7      	b.n	40f7b0 <_dtoa_r+0x4d8>
  40f9c0:	2300      	movs	r3, #0
  40f9c2:	930c      	str	r3, [sp, #48]	; 0x30
  40f9c4:	e6e8      	b.n	40f798 <_dtoa_r+0x4c0>
  40f9c6:	9b05      	ldr	r3, [sp, #20]
  40f9c8:	4642      	mov	r2, r8
  40f9ca:	4650      	mov	r0, sl
  40f9cc:	4659      	mov	r1, fp
  40f9ce:	1c5d      	adds	r5, r3, #1
  40f9d0:	464b      	mov	r3, r9
  40f9d2:	f7fb f9f1 	bl	40adb8 <__aeabi_ddiv>
  40f9d6:	4656      	mov	r6, sl
  40f9d8:	f7fb fb5e 	bl	40b098 <__aeabi_d2iz>
  40f9dc:	4682      	mov	sl, r0
  40f9de:	f7fb f85b 	bl	40aa98 <__aeabi_i2d>
  40f9e2:	4642      	mov	r2, r8
  40f9e4:	464b      	mov	r3, r9
  40f9e6:	f7fb f8bd 	bl	40ab64 <__aeabi_dmul>
  40f9ea:	4602      	mov	r2, r0
  40f9ec:	460b      	mov	r3, r1
  40f9ee:	4630      	mov	r0, r6
  40f9f0:	4659      	mov	r1, fp
  40f9f2:	f7fa ff03 	bl	40a7fc <__aeabi_dsub>
  40f9f6:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40f9fa:	9a05      	ldr	r2, [sp, #20]
  40f9fc:	4606      	mov	r6, r0
  40f9fe:	460f      	mov	r7, r1
  40fa00:	7013      	strb	r3, [r2, #0]
  40fa02:	9b06      	ldr	r3, [sp, #24]
  40fa04:	2b01      	cmp	r3, #1
  40fa06:	d04c      	beq.n	40faa2 <_dtoa_r+0x7ca>
  40fa08:	2200      	movs	r2, #0
  40fa0a:	4b0e      	ldr	r3, [pc, #56]	; (40fa44 <_dtoa_r+0x76c>)
  40fa0c:	f7fb f8aa 	bl	40ab64 <__aeabi_dmul>
  40fa10:	2200      	movs	r2, #0
  40fa12:	2300      	movs	r3, #0
  40fa14:	4606      	mov	r6, r0
  40fa16:	460f      	mov	r7, r1
  40fa18:	f7fb fb0c 	bl	40b034 <__aeabi_dcmpeq>
  40fa1c:	2800      	cmp	r0, #0
  40fa1e:	f47f ae5e 	bne.w	40f6de <_dtoa_r+0x406>
  40fa22:	9401      	str	r4, [sp, #4]
  40fa24:	f8dd b014 	ldr.w	fp, [sp, #20]
  40fa28:	9c06      	ldr	r4, [sp, #24]
  40fa2a:	e018      	b.n	40fa5e <_dtoa_r+0x786>
  40fa2c:	fffffbee 	.word	0xfffffbee
  40fa30:	00413e78 	.word	0x00413e78
  40fa34:	00413f50 	.word	0x00413f50
  40fa38:	3ff00000 	.word	0x3ff00000
  40fa3c:	401c0000 	.word	0x401c0000
  40fa40:	3fe00000 	.word	0x3fe00000
  40fa44:	40240000 	.word	0x40240000
  40fa48:	f7fb f88c 	bl	40ab64 <__aeabi_dmul>
  40fa4c:	2200      	movs	r2, #0
  40fa4e:	2300      	movs	r3, #0
  40fa50:	4606      	mov	r6, r0
  40fa52:	460f      	mov	r7, r1
  40fa54:	f7fb faee 	bl	40b034 <__aeabi_dcmpeq>
  40fa58:	2800      	cmp	r0, #0
  40fa5a:	f040 82e0 	bne.w	41001e <_dtoa_r+0xd46>
  40fa5e:	4642      	mov	r2, r8
  40fa60:	464b      	mov	r3, r9
  40fa62:	4630      	mov	r0, r6
  40fa64:	4639      	mov	r1, r7
  40fa66:	f7fb f9a7 	bl	40adb8 <__aeabi_ddiv>
  40fa6a:	f7fb fb15 	bl	40b098 <__aeabi_d2iz>
  40fa6e:	4682      	mov	sl, r0
  40fa70:	f7fb f812 	bl	40aa98 <__aeabi_i2d>
  40fa74:	4642      	mov	r2, r8
  40fa76:	464b      	mov	r3, r9
  40fa78:	f7fb f874 	bl	40ab64 <__aeabi_dmul>
  40fa7c:	4602      	mov	r2, r0
  40fa7e:	460b      	mov	r3, r1
  40fa80:	4630      	mov	r0, r6
  40fa82:	4639      	mov	r1, r7
  40fa84:	f7fa feba 	bl	40a7fc <__aeabi_dsub>
  40fa88:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40fa8c:	4606      	mov	r6, r0
  40fa8e:	460f      	mov	r7, r1
  40fa90:	f805 3b01 	strb.w	r3, [r5], #1
  40fa94:	ebcb 0305 	rsb	r3, fp, r5
  40fa98:	2200      	movs	r2, #0
  40fa9a:	429c      	cmp	r4, r3
  40fa9c:	4bb4      	ldr	r3, [pc, #720]	; (40fd70 <_dtoa_r+0xa98>)
  40fa9e:	d1d3      	bne.n	40fa48 <_dtoa_r+0x770>
  40faa0:	9c01      	ldr	r4, [sp, #4]
  40faa2:	4632      	mov	r2, r6
  40faa4:	463b      	mov	r3, r7
  40faa6:	4630      	mov	r0, r6
  40faa8:	4639      	mov	r1, r7
  40faaa:	f7fa fea9 	bl	40a800 <__adddf3>
  40faae:	4606      	mov	r6, r0
  40fab0:	460f      	mov	r7, r1
  40fab2:	4640      	mov	r0, r8
  40fab4:	4649      	mov	r1, r9
  40fab6:	4632      	mov	r2, r6
  40fab8:	463b      	mov	r3, r7
  40faba:	f7fb fac5 	bl	40b048 <__aeabi_dcmplt>
  40fabe:	b960      	cbnz	r0, 40fada <_dtoa_r+0x802>
  40fac0:	4640      	mov	r0, r8
  40fac2:	4649      	mov	r1, r9
  40fac4:	4632      	mov	r2, r6
  40fac6:	463b      	mov	r3, r7
  40fac8:	f7fb fab4 	bl	40b034 <__aeabi_dcmpeq>
  40facc:	2800      	cmp	r0, #0
  40face:	f43f ae06 	beq.w	40f6de <_dtoa_r+0x406>
  40fad2:	f01a 0f01 	tst.w	sl, #1
  40fad6:	f43f ae02 	beq.w	40f6de <_dtoa_r+0x406>
  40fada:	9b02      	ldr	r3, [sp, #8]
  40fadc:	9313      	str	r3, [sp, #76]	; 0x4c
  40fade:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40fae2:	1e6a      	subs	r2, r5, #1
  40fae4:	9b05      	ldr	r3, [sp, #20]
  40fae6:	e004      	b.n	40faf2 <_dtoa_r+0x81a>
  40fae8:	429a      	cmp	r2, r3
  40faea:	f000 8244 	beq.w	40ff76 <_dtoa_r+0xc9e>
  40faee:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40faf2:	2e39      	cmp	r6, #57	; 0x39
  40faf4:	f102 0501 	add.w	r5, r2, #1
  40faf8:	d0f6      	beq.n	40fae8 <_dtoa_r+0x810>
  40fafa:	1c73      	adds	r3, r6, #1
  40fafc:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40fafe:	b2db      	uxtb	r3, r3
  40fb00:	9102      	str	r1, [sp, #8]
  40fb02:	7013      	strb	r3, [r2, #0]
  40fb04:	e5eb      	b.n	40f6de <_dtoa_r+0x406>
  40fb06:	9b01      	ldr	r3, [sp, #4]
  40fb08:	2b01      	cmp	r3, #1
  40fb0a:	f340 815b 	ble.w	40fdc4 <_dtoa_r+0xaec>
  40fb0e:	f04f 0800 	mov.w	r8, #0
  40fb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fb14:	2b00      	cmp	r3, #0
  40fb16:	f47f ad86 	bne.w	40f626 <_dtoa_r+0x34e>
  40fb1a:	2001      	movs	r0, #1
  40fb1c:	e58b      	b.n	40f636 <_dtoa_r+0x35e>
  40fb1e:	4640      	mov	r0, r8
  40fb20:	f7fa ffba 	bl	40aa98 <__aeabi_i2d>
  40fb24:	4602      	mov	r2, r0
  40fb26:	460b      	mov	r3, r1
  40fb28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fb2c:	f7fb f81a 	bl	40ab64 <__aeabi_dmul>
  40fb30:	2200      	movs	r2, #0
  40fb32:	4b90      	ldr	r3, [pc, #576]	; (40fd74 <_dtoa_r+0xa9c>)
  40fb34:	f7fa fe64 	bl	40a800 <__adddf3>
  40fb38:	4680      	mov	r8, r0
  40fb3a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  40fb3e:	2200      	movs	r2, #0
  40fb40:	4b8d      	ldr	r3, [pc, #564]	; (40fd78 <_dtoa_r+0xaa0>)
  40fb42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40fb46:	f7fa fe59 	bl	40a7fc <__aeabi_dsub>
  40fb4a:	4642      	mov	r2, r8
  40fb4c:	464b      	mov	r3, r9
  40fb4e:	4606      	mov	r6, r0
  40fb50:	460f      	mov	r7, r1
  40fb52:	f7fb fa97 	bl	40b084 <__aeabi_dcmpgt>
  40fb56:	2800      	cmp	r0, #0
  40fb58:	f040 80a0 	bne.w	40fc9c <_dtoa_r+0x9c4>
  40fb5c:	4630      	mov	r0, r6
  40fb5e:	4639      	mov	r1, r7
  40fb60:	4642      	mov	r2, r8
  40fb62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  40fb66:	f7fb fa6f 	bl	40b048 <__aeabi_dcmplt>
  40fb6a:	2800      	cmp	r0, #0
  40fb6c:	d065      	beq.n	40fc3a <_dtoa_r+0x962>
  40fb6e:	2600      	movs	r6, #0
  40fb70:	9608      	str	r6, [sp, #32]
  40fb72:	e4e8      	b.n	40f546 <_dtoa_r+0x26e>
  40fb74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fb76:	2b00      	cmp	r3, #0
  40fb78:	f040 814c 	bne.w	40fe14 <_dtoa_r+0xb3c>
  40fb7c:	f8dd a014 	ldr.w	sl, [sp, #20]
  40fb80:	9f07      	ldr	r7, [sp, #28]
  40fb82:	4655      	mov	r5, sl
  40fb84:	f8dd 9018 	ldr.w	r9, [sp, #24]
  40fb88:	e002      	b.n	40fb90 <_dtoa_r+0x8b8>
  40fb8a:	f001 fca9 	bl	4114e0 <__multadd>
  40fb8e:	4607      	mov	r7, r0
  40fb90:	4631      	mov	r1, r6
  40fb92:	4638      	mov	r0, r7
  40fb94:	f7ff fafe 	bl	40f194 <quorem>
  40fb98:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40fb9c:	4639      	mov	r1, r7
  40fb9e:	4620      	mov	r0, r4
  40fba0:	f805 8b01 	strb.w	r8, [r5], #1
  40fba4:	ebca 0e05 	rsb	lr, sl, r5
  40fba8:	220a      	movs	r2, #10
  40fbaa:	2300      	movs	r3, #0
  40fbac:	45ce      	cmp	lr, r9
  40fbae:	dbec      	blt.n	40fb8a <_dtoa_r+0x8b2>
  40fbb0:	9b05      	ldr	r3, [sp, #20]
  40fbb2:	f04f 0a00 	mov.w	sl, #0
  40fbb6:	9a06      	ldr	r2, [sp, #24]
  40fbb8:	9707      	str	r7, [sp, #28]
  40fbba:	2a01      	cmp	r2, #1
  40fbbc:	bfac      	ite	ge
  40fbbe:	189b      	addge	r3, r3, r2
  40fbc0:	3301      	addlt	r3, #1
  40fbc2:	461d      	mov	r5, r3
  40fbc4:	9907      	ldr	r1, [sp, #28]
  40fbc6:	2201      	movs	r2, #1
  40fbc8:	4620      	mov	r0, r4
  40fbca:	f001 fe65 	bl	411898 <__lshift>
  40fbce:	4631      	mov	r1, r6
  40fbd0:	9007      	str	r0, [sp, #28]
  40fbd2:	f001 febb 	bl	41194c <__mcmp>
  40fbd6:	2800      	cmp	r0, #0
  40fbd8:	f340 824b 	ble.w	410072 <_dtoa_r+0xd9a>
  40fbdc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40fbe0:	1e6b      	subs	r3, r5, #1
  40fbe2:	9905      	ldr	r1, [sp, #20]
  40fbe4:	e004      	b.n	40fbf0 <_dtoa_r+0x918>
  40fbe6:	428b      	cmp	r3, r1
  40fbe8:	f000 8209 	beq.w	40fffe <_dtoa_r+0xd26>
  40fbec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40fbf0:	2a39      	cmp	r2, #57	; 0x39
  40fbf2:	f103 0501 	add.w	r5, r3, #1
  40fbf6:	d0f6      	beq.n	40fbe6 <_dtoa_r+0x90e>
  40fbf8:	3201      	adds	r2, #1
  40fbfa:	701a      	strb	r2, [r3, #0]
  40fbfc:	4631      	mov	r1, r6
  40fbfe:	4620      	mov	r0, r4
  40fc00:	f001 fc64 	bl	4114cc <_Bfree>
  40fc04:	9b08      	ldr	r3, [sp, #32]
  40fc06:	2b00      	cmp	r3, #0
  40fc08:	f43f ad69 	beq.w	40f6de <_dtoa_r+0x406>
  40fc0c:	459a      	cmp	sl, r3
  40fc0e:	f43f ad62 	beq.w	40f6d6 <_dtoa_r+0x3fe>
  40fc12:	f1ba 0f00 	cmp.w	sl, #0
  40fc16:	f43f ad5e 	beq.w	40f6d6 <_dtoa_r+0x3fe>
  40fc1a:	4651      	mov	r1, sl
  40fc1c:	4620      	mov	r0, r4
  40fc1e:	f001 fc55 	bl	4114cc <_Bfree>
  40fc22:	e558      	b.n	40f6d6 <_dtoa_r+0x3fe>
  40fc24:	201c      	movs	r0, #28
  40fc26:	e513      	b.n	40f650 <_dtoa_r+0x378>
  40fc28:	f04f 0802 	mov.w	r8, #2
  40fc2c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40fc30:	e5f2      	b.n	40f818 <_dtoa_r+0x540>
  40fc32:	9805      	ldr	r0, [sp, #20]
  40fc34:	f7ff bb86 	b.w	40f344 <_dtoa_r+0x6c>
  40fc38:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40fc3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40fc3e:	e45b      	b.n	40f4f8 <_dtoa_r+0x220>
  40fc40:	9b02      	ldr	r3, [sp, #8]
  40fc42:	425d      	negs	r5, r3
  40fc44:	2d00      	cmp	r5, #0
  40fc46:	f000 81c6 	beq.w	40ffd6 <_dtoa_r+0xcfe>
  40fc4a:	f005 020f 	and.w	r2, r5, #15
  40fc4e:	4b4b      	ldr	r3, [pc, #300]	; (40fd7c <_dtoa_r+0xaa4>)
  40fc50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40fc54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
  40fc5c:	f7fa ff82 	bl	40ab64 <__aeabi_dmul>
  40fc60:	112d      	asrs	r5, r5, #4
  40fc62:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40fc66:	f000 826d 	beq.w	410144 <_dtoa_r+0xe6c>
  40fc6a:	4e45      	ldr	r6, [pc, #276]	; (40fd80 <_dtoa_r+0xaa8>)
  40fc6c:	f04f 0802 	mov.w	r8, #2
  40fc70:	4602      	mov	r2, r0
  40fc72:	460b      	mov	r3, r1
  40fc74:	f015 0f01 	tst.w	r5, #1
  40fc78:	4610      	mov	r0, r2
  40fc7a:	4619      	mov	r1, r3
  40fc7c:	d007      	beq.n	40fc8e <_dtoa_r+0x9b6>
  40fc7e:	f108 0801 	add.w	r8, r8, #1
  40fc82:	e9d6 2300 	ldrd	r2, r3, [r6]
  40fc86:	f7fa ff6d 	bl	40ab64 <__aeabi_dmul>
  40fc8a:	4602      	mov	r2, r0
  40fc8c:	460b      	mov	r3, r1
  40fc8e:	106d      	asrs	r5, r5, #1
  40fc90:	f106 0608 	add.w	r6, r6, #8
  40fc94:	d1ee      	bne.n	40fc74 <_dtoa_r+0x99c>
  40fc96:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40fc9a:	e5d9      	b.n	40f850 <_dtoa_r+0x578>
  40fc9c:	2600      	movs	r6, #0
  40fc9e:	9608      	str	r6, [sp, #32]
  40fca0:	e50c      	b.n	40f6bc <_dtoa_r+0x3e4>
  40fca2:	4936      	ldr	r1, [pc, #216]	; (40fd7c <_dtoa_r+0xaa4>)
  40fca4:	f107 3bff 	add.w	fp, r7, #4294967295
  40fca8:	9b05      	ldr	r3, [sp, #20]
  40fcaa:	4642      	mov	r2, r8
  40fcac:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40fcb0:	1c5d      	adds	r5, r3, #1
  40fcb2:	464b      	mov	r3, r9
  40fcb4:	e9d1 0100 	ldrd	r0, r1, [r1]
  40fcb8:	f7fa ff54 	bl	40ab64 <__aeabi_dmul>
  40fcbc:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40fcc0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40fcc4:	4649      	mov	r1, r9
  40fcc6:	4640      	mov	r0, r8
  40fcc8:	f7fb f9e6 	bl	40b098 <__aeabi_d2iz>
  40fccc:	4606      	mov	r6, r0
  40fcce:	f7fa fee3 	bl	40aa98 <__aeabi_i2d>
  40fcd2:	460b      	mov	r3, r1
  40fcd4:	4602      	mov	r2, r0
  40fcd6:	4649      	mov	r1, r9
  40fcd8:	4640      	mov	r0, r8
  40fcda:	3630      	adds	r6, #48	; 0x30
  40fcdc:	f7fa fd8e 	bl	40a7fc <__aeabi_dsub>
  40fce0:	9b05      	ldr	r3, [sp, #20]
  40fce2:	2f01      	cmp	r7, #1
  40fce4:	4680      	mov	r8, r0
  40fce6:	4689      	mov	r9, r1
  40fce8:	701e      	strb	r6, [r3, #0]
  40fcea:	d01e      	beq.n	40fd2a <_dtoa_r+0xa52>
  40fcec:	9b05      	ldr	r3, [sp, #20]
  40fcee:	46aa      	mov	sl, r5
  40fcf0:	46a8      	mov	r8, r5
  40fcf2:	441f      	add	r7, r3
  40fcf4:	46b9      	mov	r9, r7
  40fcf6:	2200      	movs	r2, #0
  40fcf8:	4b1d      	ldr	r3, [pc, #116]	; (40fd70 <_dtoa_r+0xa98>)
  40fcfa:	f7fa ff33 	bl	40ab64 <__aeabi_dmul>
  40fcfe:	460f      	mov	r7, r1
  40fd00:	4606      	mov	r6, r0
  40fd02:	f7fb f9c9 	bl	40b098 <__aeabi_d2iz>
  40fd06:	4605      	mov	r5, r0
  40fd08:	f7fa fec6 	bl	40aa98 <__aeabi_i2d>
  40fd0c:	4602      	mov	r2, r0
  40fd0e:	460b      	mov	r3, r1
  40fd10:	3530      	adds	r5, #48	; 0x30
  40fd12:	4630      	mov	r0, r6
  40fd14:	4639      	mov	r1, r7
  40fd16:	f7fa fd71 	bl	40a7fc <__aeabi_dsub>
  40fd1a:	f80a 5b01 	strb.w	r5, [sl], #1
  40fd1e:	45ca      	cmp	sl, r9
  40fd20:	d1e9      	bne.n	40fcf6 <_dtoa_r+0xa1e>
  40fd22:	4645      	mov	r5, r8
  40fd24:	4689      	mov	r9, r1
  40fd26:	4680      	mov	r8, r0
  40fd28:	445d      	add	r5, fp
  40fd2a:	2200      	movs	r2, #0
  40fd2c:	4b15      	ldr	r3, [pc, #84]	; (40fd84 <_dtoa_r+0xaac>)
  40fd2e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40fd32:	f7fa fd65 	bl	40a800 <__adddf3>
  40fd36:	4642      	mov	r2, r8
  40fd38:	464b      	mov	r3, r9
  40fd3a:	f7fb f985 	bl	40b048 <__aeabi_dcmplt>
  40fd3e:	2800      	cmp	r0, #0
  40fd40:	f47f aecd 	bne.w	40fade <_dtoa_r+0x806>
  40fd44:	2000      	movs	r0, #0
  40fd46:	490f      	ldr	r1, [pc, #60]	; (40fd84 <_dtoa_r+0xaac>)
  40fd48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40fd4c:	f7fa fd56 	bl	40a7fc <__aeabi_dsub>
  40fd50:	4642      	mov	r2, r8
  40fd52:	464b      	mov	r3, r9
  40fd54:	f7fb f996 	bl	40b084 <__aeabi_dcmpgt>
  40fd58:	b908      	cbnz	r0, 40fd5e <_dtoa_r+0xa86>
  40fd5a:	e76e      	b.n	40fc3a <_dtoa_r+0x962>
  40fd5c:	4615      	mov	r5, r2
  40fd5e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40fd62:	1e6a      	subs	r2, r5, #1
  40fd64:	2b30      	cmp	r3, #48	; 0x30
  40fd66:	d0f9      	beq.n	40fd5c <_dtoa_r+0xa84>
  40fd68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40fd6a:	9302      	str	r3, [sp, #8]
  40fd6c:	e4b7      	b.n	40f6de <_dtoa_r+0x406>
  40fd6e:	bf00      	nop
  40fd70:	40240000 	.word	0x40240000
  40fd74:	401c0000 	.word	0x401c0000
  40fd78:	40140000 	.word	0x40140000
  40fd7c:	00413e78 	.word	0x00413e78
  40fd80:	00413f50 	.word	0x00413f50
  40fd84:	3fe00000 	.word	0x3fe00000
  40fd88:	9807      	ldr	r0, [sp, #28]
  40fd8a:	4631      	mov	r1, r6
  40fd8c:	f001 fdde 	bl	41194c <__mcmp>
  40fd90:	2800      	cmp	r0, #0
  40fd92:	f6bf ac7a 	bge.w	40f68a <_dtoa_r+0x3b2>
  40fd96:	9f02      	ldr	r7, [sp, #8]
  40fd98:	2300      	movs	r3, #0
  40fd9a:	9907      	ldr	r1, [sp, #28]
  40fd9c:	4620      	mov	r0, r4
  40fd9e:	3f01      	subs	r7, #1
  40fda0:	220a      	movs	r2, #10
  40fda2:	9702      	str	r7, [sp, #8]
  40fda4:	f001 fb9c 	bl	4114e0 <__multadd>
  40fda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fdaa:	9007      	str	r0, [sp, #28]
  40fdac:	bb1b      	cbnz	r3, 40fdf6 <_dtoa_r+0xb1e>
  40fdae:	9b01      	ldr	r3, [sp, #4]
  40fdb0:	2b02      	cmp	r3, #2
  40fdb2:	f340 81cb 	ble.w	41014c <_dtoa_r+0xe74>
  40fdb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fdb8:	2b00      	cmp	r3, #0
  40fdba:	f300 81c7 	bgt.w	41014c <_dtoa_r+0xe74>
  40fdbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fdc0:	9306      	str	r3, [sp, #24]
  40fdc2:	e46a      	b.n	40f69a <_dtoa_r+0x3c2>
  40fdc4:	f1ba 0f00 	cmp.w	sl, #0
  40fdc8:	f47f aea1 	bne.w	40fb0e <_dtoa_r+0x836>
  40fdcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40fdd0:	2b00      	cmp	r3, #0
  40fdd2:	f47f ae9c 	bne.w	40fb0e <_dtoa_r+0x836>
  40fdd6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40fdda:	0d3f      	lsrs	r7, r7, #20
  40fddc:	053f      	lsls	r7, r7, #20
  40fdde:	2f00      	cmp	r7, #0
  40fde0:	f000 8187 	beq.w	4100f2 <_dtoa_r+0xe1a>
  40fde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fde6:	f04f 0801 	mov.w	r8, #1
  40fdea:	3301      	adds	r3, #1
  40fdec:	930a      	str	r3, [sp, #40]	; 0x28
  40fdee:	9b04      	ldr	r3, [sp, #16]
  40fdf0:	3301      	adds	r3, #1
  40fdf2:	9304      	str	r3, [sp, #16]
  40fdf4:	e68d      	b.n	40fb12 <_dtoa_r+0x83a>
  40fdf6:	2300      	movs	r3, #0
  40fdf8:	9908      	ldr	r1, [sp, #32]
  40fdfa:	4620      	mov	r0, r4
  40fdfc:	220a      	movs	r2, #10
  40fdfe:	f001 fb6f 	bl	4114e0 <__multadd>
  40fe02:	9b01      	ldr	r3, [sp, #4]
  40fe04:	9008      	str	r0, [sp, #32]
  40fe06:	2b02      	cmp	r3, #2
  40fe08:	dd02      	ble.n	40fe10 <_dtoa_r+0xb38>
  40fe0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fe0c:	2b00      	cmp	r3, #0
  40fe0e:	ddd6      	ble.n	40fdbe <_dtoa_r+0xae6>
  40fe10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40fe12:	9306      	str	r3, [sp, #24]
  40fe14:	2d00      	cmp	r5, #0
  40fe16:	dd05      	ble.n	40fe24 <_dtoa_r+0xb4c>
  40fe18:	9908      	ldr	r1, [sp, #32]
  40fe1a:	462a      	mov	r2, r5
  40fe1c:	4620      	mov	r0, r4
  40fe1e:	f001 fd3b 	bl	411898 <__lshift>
  40fe22:	9008      	str	r0, [sp, #32]
  40fe24:	f1b8 0f00 	cmp.w	r8, #0
  40fe28:	f040 812f 	bne.w	41008a <_dtoa_r+0xdb2>
  40fe2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40fe30:	9b01      	ldr	r3, [sp, #4]
  40fe32:	f00a 0101 	and.w	r1, sl, #1
  40fe36:	960a      	str	r6, [sp, #40]	; 0x28
  40fe38:	fab3 f383 	clz	r3, r3
  40fe3c:	910b      	str	r1, [sp, #44]	; 0x2c
  40fe3e:	9905      	ldr	r1, [sp, #20]
  40fe40:	461a      	mov	r2, r3
  40fe42:	9b06      	ldr	r3, [sp, #24]
  40fe44:	460f      	mov	r7, r1
  40fe46:	f8dd b020 	ldr.w	fp, [sp, #32]
  40fe4a:	3b01      	subs	r3, #1
  40fe4c:	0952      	lsrs	r2, r2, #5
  40fe4e:	9e07      	ldr	r6, [sp, #28]
  40fe50:	18cb      	adds	r3, r1, r3
  40fe52:	9201      	str	r2, [sp, #4]
  40fe54:	930c      	str	r3, [sp, #48]	; 0x30
  40fe56:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40fe58:	4630      	mov	r0, r6
  40fe5a:	4629      	mov	r1, r5
  40fe5c:	f7ff f99a 	bl	40f194 <quorem>
  40fe60:	4659      	mov	r1, fp
  40fe62:	4680      	mov	r8, r0
  40fe64:	4630      	mov	r0, r6
  40fe66:	f001 fd71 	bl	41194c <__mcmp>
  40fe6a:	4629      	mov	r1, r5
  40fe6c:	464a      	mov	r2, r9
  40fe6e:	4682      	mov	sl, r0
  40fe70:	4620      	mov	r0, r4
  40fe72:	f001 fd8f 	bl	411994 <__mdiff>
  40fe76:	68c2      	ldr	r2, [r0, #12]
  40fe78:	4605      	mov	r5, r0
  40fe7a:	f108 0c30 	add.w	ip, r8, #48	; 0x30
  40fe7e:	9206      	str	r2, [sp, #24]
  40fe80:	2a00      	cmp	r2, #0
  40fe82:	d150      	bne.n	40ff26 <_dtoa_r+0xc4e>
  40fe84:	4629      	mov	r1, r5
  40fe86:	4630      	mov	r0, r6
  40fe88:	f8cd c010 	str.w	ip, [sp, #16]
  40fe8c:	f001 fd5e 	bl	41194c <__mcmp>
  40fe90:	4629      	mov	r1, r5
  40fe92:	9003      	str	r0, [sp, #12]
  40fe94:	4620      	mov	r0, r4
  40fe96:	f001 fb19 	bl	4114cc <_Bfree>
  40fe9a:	9a01      	ldr	r2, [sp, #4]
  40fe9c:	9b03      	ldr	r3, [sp, #12]
  40fe9e:	f8dd c010 	ldr.w	ip, [sp, #16]
  40fea2:	b132      	cbz	r2, 40feb2 <_dtoa_r+0xbda>
  40fea4:	b92b      	cbnz	r3, 40feb2 <_dtoa_r+0xbda>
  40fea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40fea8:	9a06      	ldr	r2, [sp, #24]
  40feaa:	2b00      	cmp	r3, #0
  40feac:	f000 8123 	beq.w	4100f6 <_dtoa_r+0xe1e>
  40feb0:	4613      	mov	r3, r2
  40feb2:	f1ba 0f00 	cmp.w	sl, #0
  40feb6:	f2c0 80b5 	blt.w	410024 <_dtoa_r+0xd4c>
  40feba:	9a01      	ldr	r2, [sp, #4]
  40febc:	b132      	cbz	r2, 40fecc <_dtoa_r+0xbf4>
  40febe:	f1ba 0f00 	cmp.w	sl, #0
  40fec2:	d103      	bne.n	40fecc <_dtoa_r+0xbf4>
  40fec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40fec6:	2a00      	cmp	r2, #0
  40fec8:	f000 80ac 	beq.w	410024 <_dtoa_r+0xd4c>
  40fecc:	2b00      	cmp	r3, #0
  40fece:	f300 80f8 	bgt.w	4100c2 <_dtoa_r+0xdea>
  40fed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40fed4:	f107 0801 	add.w	r8, r7, #1
  40fed8:	f887 c000 	strb.w	ip, [r7]
  40fedc:	429f      	cmp	r7, r3
  40fede:	4645      	mov	r5, r8
  40fee0:	f000 8100 	beq.w	4100e4 <_dtoa_r+0xe0c>
  40fee4:	4631      	mov	r1, r6
  40fee6:	220a      	movs	r2, #10
  40fee8:	2300      	movs	r3, #0
  40feea:	4620      	mov	r0, r4
  40feec:	f001 faf8 	bl	4114e0 <__multadd>
  40fef0:	45cb      	cmp	fp, r9
  40fef2:	4606      	mov	r6, r0
  40fef4:	4659      	mov	r1, fp
  40fef6:	4620      	mov	r0, r4
  40fef8:	f04f 020a 	mov.w	r2, #10
  40fefc:	f04f 0300 	mov.w	r3, #0
  40ff00:	d00b      	beq.n	40ff1a <_dtoa_r+0xc42>
  40ff02:	f001 faed 	bl	4114e0 <__multadd>
  40ff06:	4649      	mov	r1, r9
  40ff08:	4683      	mov	fp, r0
  40ff0a:	220a      	movs	r2, #10
  40ff0c:	4620      	mov	r0, r4
  40ff0e:	2300      	movs	r3, #0
  40ff10:	f001 fae6 	bl	4114e0 <__multadd>
  40ff14:	4647      	mov	r7, r8
  40ff16:	4681      	mov	r9, r0
  40ff18:	e79d      	b.n	40fe56 <_dtoa_r+0xb7e>
  40ff1a:	f001 fae1 	bl	4114e0 <__multadd>
  40ff1e:	4647      	mov	r7, r8
  40ff20:	4683      	mov	fp, r0
  40ff22:	4681      	mov	r9, r0
  40ff24:	e797      	b.n	40fe56 <_dtoa_r+0xb7e>
  40ff26:	4601      	mov	r1, r0
  40ff28:	4620      	mov	r0, r4
  40ff2a:	f8cd c00c 	str.w	ip, [sp, #12]
  40ff2e:	f001 facd 	bl	4114cc <_Bfree>
  40ff32:	2301      	movs	r3, #1
  40ff34:	f8dd c00c 	ldr.w	ip, [sp, #12]
  40ff38:	e7bb      	b.n	40feb2 <_dtoa_r+0xbda>
  40ff3a:	2301      	movs	r3, #1
  40ff3c:	930f      	str	r3, [sp, #60]	; 0x3c
  40ff3e:	9306      	str	r3, [sp, #24]
  40ff40:	9303      	str	r3, [sp, #12]
  40ff42:	2100      	movs	r1, #0
  40ff44:	401d      	ands	r5, r3
  40ff46:	6461      	str	r1, [r4, #68]	; 0x44
  40ff48:	e440      	b.n	40f7cc <_dtoa_r+0x4f4>
  40ff4a:	2b0e      	cmp	r3, #14
  40ff4c:	bf8c      	ite	hi
  40ff4e:	2300      	movhi	r3, #0
  40ff50:	2301      	movls	r3, #1
  40ff52:	e7f6      	b.n	40ff42 <_dtoa_r+0xc6a>
  40ff54:	9907      	ldr	r1, [sp, #28]
  40ff56:	4620      	mov	r0, r4
  40ff58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ff5a:	f001 fc4d 	bl	4117f8 <__pow5mult>
  40ff5e:	9007      	str	r0, [sp, #28]
  40ff60:	f7ff bb4c 	b.w	40f5fc <_dtoa_r+0x324>
  40ff64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ff66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ff68:	1af3      	subs	r3, r6, r3
  40ff6a:	960b      	str	r6, [sp, #44]	; 0x2c
  40ff6c:	2600      	movs	r6, #0
  40ff6e:	441a      	add	r2, r3
  40ff70:	920d      	str	r2, [sp, #52]	; 0x34
  40ff72:	f7ff bbfd 	b.w	40f770 <_dtoa_r+0x498>
  40ff76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ff78:	2130      	movs	r1, #48	; 0x30
  40ff7a:	3301      	adds	r3, #1
  40ff7c:	7011      	strb	r1, [r2, #0]
  40ff7e:	9302      	str	r3, [sp, #8]
  40ff80:	2331      	movs	r3, #49	; 0x31
  40ff82:	7013      	strb	r3, [r2, #0]
  40ff84:	f7ff bbab 	b.w	40f6de <_dtoa_r+0x406>
  40ff88:	9b06      	ldr	r3, [sp, #24]
  40ff8a:	2b00      	cmp	r3, #0
  40ff8c:	f43f adc7 	beq.w	40fb1e <_dtoa_r+0x846>
  40ff90:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40ff92:	2f00      	cmp	r7, #0
  40ff94:	f77f ae51 	ble.w	40fc3a <_dtoa_r+0x962>
  40ff98:	9b02      	ldr	r3, [sp, #8]
  40ff9a:	2200      	movs	r2, #0
  40ff9c:	3b01      	subs	r3, #1
  40ff9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40ffa2:	9313      	str	r3, [sp, #76]	; 0x4c
  40ffa4:	4b7c      	ldr	r3, [pc, #496]	; (410198 <_dtoa_r+0xec0>)
  40ffa6:	f7fa fddd 	bl	40ab64 <__aeabi_dmul>
  40ffaa:	4682      	mov	sl, r0
  40ffac:	468b      	mov	fp, r1
  40ffae:	f108 0001 	add.w	r0, r8, #1
  40ffb2:	e9cd ab08 	strd	sl, fp, [sp, #32]
  40ffb6:	f7fa fd6f 	bl	40aa98 <__aeabi_i2d>
  40ffba:	4602      	mov	r2, r0
  40ffbc:	460b      	mov	r3, r1
  40ffbe:	4650      	mov	r0, sl
  40ffc0:	4659      	mov	r1, fp
  40ffc2:	f7fa fdcf 	bl	40ab64 <__aeabi_dmul>
  40ffc6:	2200      	movs	r2, #0
  40ffc8:	4b74      	ldr	r3, [pc, #464]	; (41019c <_dtoa_r+0xec4>)
  40ffca:	f7fa fc19 	bl	40a800 <__adddf3>
  40ffce:	4680      	mov	r8, r0
  40ffd0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
  40ffd4:	e45c      	b.n	40f890 <_dtoa_r+0x5b8>
  40ffd6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
  40ffda:	f04f 0802 	mov.w	r8, #2
  40ffde:	ed8d 7b08 	vstr	d7, [sp, #32]
  40ffe2:	e435      	b.n	40f850 <_dtoa_r+0x578>
  40ffe4:	9907      	ldr	r1, [sp, #28]
  40ffe6:	4620      	mov	r0, r4
  40ffe8:	f001 fc06 	bl	4117f8 <__pow5mult>
  40ffec:	9007      	str	r0, [sp, #28]
  40ffee:	f7ff bb05 	b.w	40f5fc <_dtoa_r+0x324>
  40fff2:	f1ba 0f00 	cmp.w	sl, #0
  40fff6:	f43f aee9 	beq.w	40fdcc <_dtoa_r+0xaf4>
  40fffa:	f7ff bb12 	b.w	40f622 <_dtoa_r+0x34a>
  40fffe:	9a02      	ldr	r2, [sp, #8]
  410000:	2331      	movs	r3, #49	; 0x31
  410002:	3201      	adds	r2, #1
  410004:	9202      	str	r2, [sp, #8]
  410006:	9a05      	ldr	r2, [sp, #20]
  410008:	7013      	strb	r3, [r2, #0]
  41000a:	e5f7      	b.n	40fbfc <_dtoa_r+0x924>
  41000c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  41000e:	2a00      	cmp	r2, #0
  410010:	d050      	beq.n	4100b4 <_dtoa_r+0xddc>
  410012:	f203 4333 	addw	r3, r3, #1075	; 0x433
  410016:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  410018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  41001a:	f7ff bbaf 	b.w	40f77c <_dtoa_r+0x4a4>
  41001e:	9c01      	ldr	r4, [sp, #4]
  410020:	f7ff bb5d 	b.w	40f6de <_dtoa_r+0x406>
  410024:	2b00      	cmp	r3, #0
  410026:	9607      	str	r6, [sp, #28]
  410028:	46e0      	mov	r8, ip
  41002a:	f8cd b020 	str.w	fp, [sp, #32]
  41002e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410030:	4665      	mov	r5, ip
  410032:	dd0f      	ble.n	410054 <_dtoa_r+0xd7c>
  410034:	9907      	ldr	r1, [sp, #28]
  410036:	2201      	movs	r2, #1
  410038:	4620      	mov	r0, r4
  41003a:	f001 fc2d 	bl	411898 <__lshift>
  41003e:	4631      	mov	r1, r6
  410040:	9007      	str	r0, [sp, #28]
  410042:	f001 fc83 	bl	41194c <__mcmp>
  410046:	2800      	cmp	r0, #0
  410048:	dd77      	ble.n	41013a <_dtoa_r+0xe62>
  41004a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  41004e:	d068      	beq.n	410122 <_dtoa_r+0xe4a>
  410050:	f108 0501 	add.w	r5, r8, #1
  410054:	f8dd a020 	ldr.w	sl, [sp, #32]
  410058:	703d      	strb	r5, [r7, #0]
  41005a:	1c7d      	adds	r5, r7, #1
  41005c:	f8cd 9020 	str.w	r9, [sp, #32]
  410060:	e5cc      	b.n	40fbfc <_dtoa_r+0x924>
  410062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410064:	9a06      	ldr	r2, [sp, #24]
  410066:	1a9d      	subs	r5, r3, r2
  410068:	2300      	movs	r3, #0
  41006a:	f7ff bb87 	b.w	40f77c <_dtoa_r+0x4a4>
  41006e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  410070:	e537      	b.n	40fae2 <_dtoa_r+0x80a>
  410072:	d104      	bne.n	41007e <_dtoa_r+0xda6>
  410074:	f018 0f01 	tst.w	r8, #1
  410078:	d001      	beq.n	41007e <_dtoa_r+0xda6>
  41007a:	e5af      	b.n	40fbdc <_dtoa_r+0x904>
  41007c:	4615      	mov	r5, r2
  41007e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  410082:	1e6a      	subs	r2, r5, #1
  410084:	2b30      	cmp	r3, #48	; 0x30
  410086:	d0f9      	beq.n	41007c <_dtoa_r+0xda4>
  410088:	e5b8      	b.n	40fbfc <_dtoa_r+0x924>
  41008a:	9f08      	ldr	r7, [sp, #32]
  41008c:	4620      	mov	r0, r4
  41008e:	6879      	ldr	r1, [r7, #4]
  410090:	f001 f9f4 	bl	41147c <_Balloc>
  410094:	693b      	ldr	r3, [r7, #16]
  410096:	4605      	mov	r5, r0
  410098:	f107 010c 	add.w	r1, r7, #12
  41009c:	1c9a      	adds	r2, r3, #2
  41009e:	300c      	adds	r0, #12
  4100a0:	0092      	lsls	r2, r2, #2
  4100a2:	f7fb fba1 	bl	40b7e8 <memcpy>
  4100a6:	4620      	mov	r0, r4
  4100a8:	4629      	mov	r1, r5
  4100aa:	2201      	movs	r2, #1
  4100ac:	f001 fbf4 	bl	411898 <__lshift>
  4100b0:	4681      	mov	r9, r0
  4100b2:	e6bd      	b.n	40fe30 <_dtoa_r+0xb58>
  4100b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4100b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4100b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4100ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4100be:	f7ff bb5d 	b.w	40f77c <_dtoa_r+0x4a4>
  4100c2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4100c6:	9607      	str	r6, [sp, #28]
  4100c8:	f8cd b020 	str.w	fp, [sp, #32]
  4100cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4100ce:	d030      	beq.n	410132 <_dtoa_r+0xe5a>
  4100d0:	f10c 0801 	add.w	r8, ip, #1
  4100d4:	f8dd a020 	ldr.w	sl, [sp, #32]
  4100d8:	1c7d      	adds	r5, r7, #1
  4100da:	f8cd 9020 	str.w	r9, [sp, #32]
  4100de:	f887 8000 	strb.w	r8, [r7]
  4100e2:	e58b      	b.n	40fbfc <_dtoa_r+0x924>
  4100e4:	9607      	str	r6, [sp, #28]
  4100e6:	46e0      	mov	r8, ip
  4100e8:	46da      	mov	sl, fp
  4100ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4100ec:	f8cd 9020 	str.w	r9, [sp, #32]
  4100f0:	e568      	b.n	40fbc4 <_dtoa_r+0x8ec>
  4100f2:	46b8      	mov	r8, r7
  4100f4:	e50d      	b.n	40fb12 <_dtoa_r+0x83a>
  4100f6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4100fa:	9607      	str	r6, [sp, #28]
  4100fc:	f8cd b020 	str.w	fp, [sp, #32]
  410100:	4655      	mov	r5, sl
  410102:	46c3      	mov	fp, r8
  410104:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410106:	46e0      	mov	r8, ip
  410108:	d00b      	beq.n	410122 <_dtoa_r+0xe4a>
  41010a:	2d00      	cmp	r5, #0
  41010c:	dd01      	ble.n	410112 <_dtoa_r+0xe3a>
  41010e:	f10b 0831 	add.w	r8, fp, #49	; 0x31
  410112:	f8dd a020 	ldr.w	sl, [sp, #32]
  410116:	1c7d      	adds	r5, r7, #1
  410118:	f887 8000 	strb.w	r8, [r7]
  41011c:	f8cd 9020 	str.w	r9, [sp, #32]
  410120:	e56c      	b.n	40fbfc <_dtoa_r+0x924>
  410122:	f8dd a020 	ldr.w	sl, [sp, #32]
  410126:	f8cd 9020 	str.w	r9, [sp, #32]
  41012a:	2239      	movs	r2, #57	; 0x39
  41012c:	1c7d      	adds	r5, r7, #1
  41012e:	703a      	strb	r2, [r7, #0]
  410130:	e556      	b.n	40fbe0 <_dtoa_r+0x908>
  410132:	46da      	mov	sl, fp
  410134:	f8cd 9020 	str.w	r9, [sp, #32]
  410138:	e7f7      	b.n	41012a <_dtoa_r+0xe52>
  41013a:	d18b      	bne.n	410054 <_dtoa_r+0xd7c>
  41013c:	f018 0f01 	tst.w	r8, #1
  410140:	d088      	beq.n	410054 <_dtoa_r+0xd7c>
  410142:	e782      	b.n	41004a <_dtoa_r+0xd72>
  410144:	f04f 0802 	mov.w	r8, #2
  410148:	f7ff bb82 	b.w	40f850 <_dtoa_r+0x578>
  41014c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41014e:	9306      	str	r3, [sp, #24]
  410150:	e514      	b.n	40fb7c <_dtoa_r+0x8a4>
  410152:	f43f aa84 	beq.w	40f65e <_dtoa_r+0x386>
  410156:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  41015a:	f7ff ba79 	b.w	40f650 <_dtoa_r+0x378>
  41015e:	2501      	movs	r5, #1
  410160:	f7ff b993 	b.w	40f48a <_dtoa_r+0x1b2>
  410164:	2500      	movs	r5, #0
  410166:	4620      	mov	r0, r4
  410168:	6465      	str	r5, [r4, #68]	; 0x44
  41016a:	4629      	mov	r1, r5
  41016c:	f001 f986 	bl	41147c <_Balloc>
  410170:	9a02      	ldr	r2, [sp, #8]
  410172:	9005      	str	r0, [sp, #20]
  410174:	2a0e      	cmp	r2, #14
  410176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  410178:	6420      	str	r0, [r4, #64]	; 0x40
  41017a:	f73f aae6 	bgt.w	40f74a <_dtoa_r+0x472>
  41017e:	42ab      	cmp	r3, r5
  410180:	f6ff aae3 	blt.w	40f74a <_dtoa_r+0x472>
  410184:	f04f 33ff 	mov.w	r3, #4294967295
  410188:	9503      	str	r5, [sp, #12]
  41018a:	9306      	str	r3, [sp, #24]
  41018c:	f7ff b9ba 	b.w	40f504 <_dtoa_r+0x22c>
  410190:	2301      	movs	r3, #1
  410192:	930c      	str	r3, [sp, #48]	; 0x30
  410194:	e404      	b.n	40f9a0 <_dtoa_r+0x6c8>
  410196:	bf00      	nop
  410198:	40240000 	.word	0x40240000
  41019c:	401c0000 	.word	0x401c0000

004101a0 <__sflush_r>:
  4101a0:	898b      	ldrh	r3, [r1, #12]
  4101a2:	b29a      	uxth	r2, r3
  4101a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4101a8:	460d      	mov	r5, r1
  4101aa:	0711      	lsls	r1, r2, #28
  4101ac:	4680      	mov	r8, r0
  4101ae:	d43c      	bmi.n	41022a <__sflush_r+0x8a>
  4101b0:	686a      	ldr	r2, [r5, #4]
  4101b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4101b6:	2a00      	cmp	r2, #0
  4101b8:	81ab      	strh	r3, [r5, #12]
  4101ba:	dd76      	ble.n	4102aa <__sflush_r+0x10a>
  4101bc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4101be:	2e00      	cmp	r6, #0
  4101c0:	d04b      	beq.n	41025a <__sflush_r+0xba>
  4101c2:	b29b      	uxth	r3, r3
  4101c4:	2100      	movs	r1, #0
  4101c6:	f8d8 4000 	ldr.w	r4, [r8]
  4101ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4101ce:	f8c8 1000 	str.w	r1, [r8]
  4101d2:	b292      	uxth	r2, r2
  4101d4:	2a00      	cmp	r2, #0
  4101d6:	d06c      	beq.n	4102b2 <__sflush_r+0x112>
  4101d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4101da:	075f      	lsls	r7, r3, #29
  4101dc:	d505      	bpl.n	4101ea <__sflush_r+0x4a>
  4101de:	6869      	ldr	r1, [r5, #4]
  4101e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4101e2:	1a52      	subs	r2, r2, r1
  4101e4:	b10b      	cbz	r3, 4101ea <__sflush_r+0x4a>
  4101e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4101e8:	1ad2      	subs	r2, r2, r3
  4101ea:	4640      	mov	r0, r8
  4101ec:	69e9      	ldr	r1, [r5, #28]
  4101ee:	2300      	movs	r3, #0
  4101f0:	47b0      	blx	r6
  4101f2:	1c46      	adds	r6, r0, #1
  4101f4:	d03e      	beq.n	410274 <__sflush_r+0xd4>
  4101f6:	89ab      	ldrh	r3, [r5, #12]
  4101f8:	2100      	movs	r1, #0
  4101fa:	692a      	ldr	r2, [r5, #16]
  4101fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  410200:	6069      	str	r1, [r5, #4]
  410202:	602a      	str	r2, [r5, #0]
  410204:	b29b      	uxth	r3, r3
  410206:	04da      	lsls	r2, r3, #19
  410208:	81ab      	strh	r3, [r5, #12]
  41020a:	d44c      	bmi.n	4102a6 <__sflush_r+0x106>
  41020c:	6b29      	ldr	r1, [r5, #48]	; 0x30
  41020e:	f8c8 4000 	str.w	r4, [r8]
  410212:	b311      	cbz	r1, 41025a <__sflush_r+0xba>
  410214:	f105 0340 	add.w	r3, r5, #64	; 0x40
  410218:	4299      	cmp	r1, r3
  41021a:	d002      	beq.n	410222 <__sflush_r+0x82>
  41021c:	4640      	mov	r0, r8
  41021e:	f000 f9d5 	bl	4105cc <_free_r>
  410222:	2000      	movs	r0, #0
  410224:	6328      	str	r0, [r5, #48]	; 0x30
  410226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41022a:	692e      	ldr	r6, [r5, #16]
  41022c:	b1ae      	cbz	r6, 41025a <__sflush_r+0xba>
  41022e:	682c      	ldr	r4, [r5, #0]
  410230:	0791      	lsls	r1, r2, #30
  410232:	602e      	str	r6, [r5, #0]
  410234:	eba4 0406 	sub.w	r4, r4, r6
  410238:	d11a      	bne.n	410270 <__sflush_r+0xd0>
  41023a:	696b      	ldr	r3, [r5, #20]
  41023c:	60ab      	str	r3, [r5, #8]
  41023e:	e00a      	b.n	410256 <__sflush_r+0xb6>
  410240:	4632      	mov	r2, r6
  410242:	4623      	mov	r3, r4
  410244:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  410246:	4640      	mov	r0, r8
  410248:	69e9      	ldr	r1, [r5, #28]
  41024a:	47b8      	blx	r7
  41024c:	2800      	cmp	r0, #0
  41024e:	eba4 0400 	sub.w	r4, r4, r0
  410252:	4406      	add	r6, r0
  410254:	dd04      	ble.n	410260 <__sflush_r+0xc0>
  410256:	2c00      	cmp	r4, #0
  410258:	dcf2      	bgt.n	410240 <__sflush_r+0xa0>
  41025a:	2000      	movs	r0, #0
  41025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410260:	89ab      	ldrh	r3, [r5, #12]
  410262:	f04f 30ff 	mov.w	r0, #4294967295
  410266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  41026a:	81ab      	strh	r3, [r5, #12]
  41026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  410270:	2300      	movs	r3, #0
  410272:	e7e3      	b.n	41023c <__sflush_r+0x9c>
  410274:	f8d8 3000 	ldr.w	r3, [r8]
  410278:	fab3 f283 	clz	r2, r3
  41027c:	2b00      	cmp	r3, #0
  41027e:	bf18      	it	ne
  410280:	2b1d      	cmpne	r3, #29
  410282:	ea4f 1252 	mov.w	r2, r2, lsr #5
  410286:	d001      	beq.n	41028c <__sflush_r+0xec>
  410288:	2b16      	cmp	r3, #22
  41028a:	d127      	bne.n	4102dc <__sflush_r+0x13c>
  41028c:	89ab      	ldrh	r3, [r5, #12]
  41028e:	2600      	movs	r6, #0
  410290:	6929      	ldr	r1, [r5, #16]
  410292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  410296:	b29b      	uxth	r3, r3
  410298:	81ab      	strh	r3, [r5, #12]
  41029a:	04db      	lsls	r3, r3, #19
  41029c:	e885 0042 	stmia.w	r5, {r1, r6}
  4102a0:	d5b4      	bpl.n	41020c <__sflush_r+0x6c>
  4102a2:	2a00      	cmp	r2, #0
  4102a4:	d0b2      	beq.n	41020c <__sflush_r+0x6c>
  4102a6:	6528      	str	r0, [r5, #80]	; 0x50
  4102a8:	e7b0      	b.n	41020c <__sflush_r+0x6c>
  4102aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4102ac:	2a00      	cmp	r2, #0
  4102ae:	dc85      	bgt.n	4101bc <__sflush_r+0x1c>
  4102b0:	e7d3      	b.n	41025a <__sflush_r+0xba>
  4102b2:	2301      	movs	r3, #1
  4102b4:	4640      	mov	r0, r8
  4102b6:	69e9      	ldr	r1, [r5, #28]
  4102b8:	47b0      	blx	r6
  4102ba:	1c43      	adds	r3, r0, #1
  4102bc:	4602      	mov	r2, r0
  4102be:	d002      	beq.n	4102c6 <__sflush_r+0x126>
  4102c0:	89ab      	ldrh	r3, [r5, #12]
  4102c2:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4102c4:	e789      	b.n	4101da <__sflush_r+0x3a>
  4102c6:	f8d8 3000 	ldr.w	r3, [r8]
  4102ca:	2b00      	cmp	r3, #0
  4102cc:	d0f8      	beq.n	4102c0 <__sflush_r+0x120>
  4102ce:	2b16      	cmp	r3, #22
  4102d0:	d001      	beq.n	4102d6 <__sflush_r+0x136>
  4102d2:	2b1d      	cmp	r3, #29
  4102d4:	d1c4      	bne.n	410260 <__sflush_r+0xc0>
  4102d6:	f8c8 4000 	str.w	r4, [r8]
  4102da:	e7be      	b.n	41025a <__sflush_r+0xba>
  4102dc:	89ab      	ldrh	r3, [r5, #12]
  4102de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4102e2:	81ab      	strh	r3, [r5, #12]
  4102e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004102e8 <_fflush_r>:
  4102e8:	b510      	push	{r4, lr}
  4102ea:	4604      	mov	r4, r0
  4102ec:	b082      	sub	sp, #8
  4102ee:	b108      	cbz	r0, 4102f4 <_fflush_r+0xc>
  4102f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4102f2:	b153      	cbz	r3, 41030a <_fflush_r+0x22>
  4102f4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4102f8:	b908      	cbnz	r0, 4102fe <_fflush_r+0x16>
  4102fa:	b002      	add	sp, #8
  4102fc:	bd10      	pop	{r4, pc}
  4102fe:	4620      	mov	r0, r4
  410300:	b002      	add	sp, #8
  410302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  410306:	f7ff bf4b 	b.w	4101a0 <__sflush_r>
  41030a:	9101      	str	r1, [sp, #4]
  41030c:	f000 f886 	bl	41041c <__sinit>
  410310:	9901      	ldr	r1, [sp, #4]
  410312:	e7ef      	b.n	4102f4 <_fflush_r+0xc>

00410314 <_cleanup_r>:
  410314:	4901      	ldr	r1, [pc, #4]	; (41031c <_cleanup_r+0x8>)
  410316:	f000 bbc3 	b.w	410aa0 <_fwalk_reent>
  41031a:	bf00      	nop
  41031c:	00412685 	.word	0x00412685

00410320 <__sinit.part.1>:
  410320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410324:	4682      	mov	sl, r0
  410326:	2400      	movs	r4, #0
  410328:	4837      	ldr	r0, [pc, #220]	; (410408 <__sinit.part.1+0xe8>)
  41032a:	2103      	movs	r1, #3
  41032c:	f8da 5004 	ldr.w	r5, [sl, #4]
  410330:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  410334:	2604      	movs	r6, #4
  410336:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  41033a:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  41033e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  410342:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  410346:	4621      	mov	r1, r4
  410348:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  41034c:	2208      	movs	r2, #8
  41034e:	81ae      	strh	r6, [r5, #12]
  410350:	602c      	str	r4, [r5, #0]
  410352:	606c      	str	r4, [r5, #4]
  410354:	60ac      	str	r4, [r5, #8]
  410356:	666c      	str	r4, [r5, #100]	; 0x64
  410358:	81ec      	strh	r4, [r5, #14]
  41035a:	612c      	str	r4, [r5, #16]
  41035c:	616c      	str	r4, [r5, #20]
  41035e:	61ac      	str	r4, [r5, #24]
  410360:	f7fb fadc 	bl	40b91c <memset>
  410364:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 410410 <__sinit.part.1+0xf0>
  410368:	f8da 6008 	ldr.w	r6, [sl, #8]
  41036c:	f04f 0301 	mov.w	r3, #1
  410370:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 410414 <__sinit.part.1+0xf4>
  410374:	f04f 0e09 	mov.w	lr, #9
  410378:	f8df 809c 	ldr.w	r8, [pc, #156]	; 410418 <__sinit.part.1+0xf8>
  41037c:	4621      	mov	r1, r4
  41037e:	4f23      	ldr	r7, [pc, #140]	; (41040c <__sinit.part.1+0xec>)
  410380:	2208      	movs	r2, #8
  410382:	61ed      	str	r5, [r5, #28]
  410384:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  410388:	f8c5 b020 	str.w	fp, [r5, #32]
  41038c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  410390:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  410394:	62ef      	str	r7, [r5, #44]	; 0x2c
  410396:	81f3      	strh	r3, [r6, #14]
  410398:	f8a6 e00c 	strh.w	lr, [r6, #12]
  41039c:	6034      	str	r4, [r6, #0]
  41039e:	6074      	str	r4, [r6, #4]
  4103a0:	60b4      	str	r4, [r6, #8]
  4103a2:	6674      	str	r4, [r6, #100]	; 0x64
  4103a4:	6134      	str	r4, [r6, #16]
  4103a6:	6174      	str	r4, [r6, #20]
  4103a8:	61b4      	str	r4, [r6, #24]
  4103aa:	f7fb fab7 	bl	40b91c <memset>
  4103ae:	f8da 500c 	ldr.w	r5, [sl, #12]
  4103b2:	f04f 0c12 	mov.w	ip, #18
  4103b6:	f04f 0e02 	mov.w	lr, #2
  4103ba:	61f6      	str	r6, [r6, #28]
  4103bc:	4621      	mov	r1, r4
  4103be:	f8c6 b020 	str.w	fp, [r6, #32]
  4103c2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4103c6:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  4103ca:	2208      	movs	r2, #8
  4103cc:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  4103d0:	62f7      	str	r7, [r6, #44]	; 0x2c
  4103d2:	602c      	str	r4, [r5, #0]
  4103d4:	606c      	str	r4, [r5, #4]
  4103d6:	60ac      	str	r4, [r5, #8]
  4103d8:	666c      	str	r4, [r5, #100]	; 0x64
  4103da:	612c      	str	r4, [r5, #16]
  4103dc:	616c      	str	r4, [r5, #20]
  4103de:	61ac      	str	r4, [r5, #24]
  4103e0:	f8a5 c00c 	strh.w	ip, [r5, #12]
  4103e4:	f8a5 e00e 	strh.w	lr, [r5, #14]
  4103e8:	f7fb fa98 	bl	40b91c <memset>
  4103ec:	2301      	movs	r3, #1
  4103ee:	61ed      	str	r5, [r5, #28]
  4103f0:	f8c5 b020 	str.w	fp, [r5, #32]
  4103f4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  4103f8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  4103fc:	62ef      	str	r7, [r5, #44]	; 0x2c
  4103fe:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  410402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410406:	bf00      	nop
  410408:	00410315 	.word	0x00410315
  41040c:	0041226d 	.word	0x0041226d
  410410:	004121ed 	.word	0x004121ed
  410414:	00412211 	.word	0x00412211
  410418:	00412249 	.word	0x00412249

0041041c <__sinit>:
  41041c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  41041e:	b103      	cbz	r3, 410422 <__sinit+0x6>
  410420:	4770      	bx	lr
  410422:	f7ff bf7d 	b.w	410320 <__sinit.part.1>
  410426:	bf00      	nop

00410428 <__sfp_lock_acquire>:
  410428:	4770      	bx	lr
  41042a:	bf00      	nop

0041042c <__sfp_lock_release>:
  41042c:	4770      	bx	lr
  41042e:	bf00      	nop

00410430 <__libc_fini_array>:
  410430:	b538      	push	{r3, r4, r5, lr}
  410432:	4b08      	ldr	r3, [pc, #32]	; (410454 <__libc_fini_array+0x24>)
  410434:	4d08      	ldr	r5, [pc, #32]	; (410458 <__libc_fini_array+0x28>)
  410436:	1aed      	subs	r5, r5, r3
  410438:	10ac      	asrs	r4, r5, #2
  41043a:	bf18      	it	ne
  41043c:	18ed      	addne	r5, r5, r3
  41043e:	d005      	beq.n	41044c <__libc_fini_array+0x1c>
  410440:	3c01      	subs	r4, #1
  410442:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  410446:	4798      	blx	r3
  410448:	2c00      	cmp	r4, #0
  41044a:	d1f9      	bne.n	410440 <__libc_fini_array+0x10>
  41044c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  410450:	f003 bd9c 	b.w	413f8c <_fini>
  410454:	00413f98 	.word	0x00413f98
  410458:	00413f9c 	.word	0x00413f9c

0041045c <__fputwc>:
  41045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  410460:	b082      	sub	sp, #8
  410462:	4607      	mov	r7, r0
  410464:	460e      	mov	r6, r1
  410466:	4614      	mov	r4, r2
  410468:	f000 fee2 	bl	411230 <__locale_mb_cur_max>
  41046c:	2801      	cmp	r0, #1
  41046e:	d040      	beq.n	4104f2 <__fputwc+0x96>
  410470:	4638      	mov	r0, r7
  410472:	a901      	add	r1, sp, #4
  410474:	4632      	mov	r2, r6
  410476:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  41047a:	f002 f823 	bl	4124c4 <_wcrtomb_r>
  41047e:	f1b0 3fff 	cmp.w	r0, #4294967295
  410482:	4680      	mov	r8, r0
  410484:	d02e      	beq.n	4104e4 <__fputwc+0x88>
  410486:	2800      	cmp	r0, #0
  410488:	d03b      	beq.n	410502 <__fputwc+0xa6>
  41048a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  41048e:	2500      	movs	r5, #0
  410490:	e009      	b.n	4104a6 <__fputwc+0x4a>
  410492:	6823      	ldr	r3, [r4, #0]
  410494:	7019      	strb	r1, [r3, #0]
  410496:	6823      	ldr	r3, [r4, #0]
  410498:	3301      	adds	r3, #1
  41049a:	6023      	str	r3, [r4, #0]
  41049c:	3501      	adds	r5, #1
  41049e:	45a8      	cmp	r8, r5
  4104a0:	d92f      	bls.n	410502 <__fputwc+0xa6>
  4104a2:	ab01      	add	r3, sp, #4
  4104a4:	5d59      	ldrb	r1, [r3, r5]
  4104a6:	68a3      	ldr	r3, [r4, #8]
  4104a8:	3b01      	subs	r3, #1
  4104aa:	2b00      	cmp	r3, #0
  4104ac:	60a3      	str	r3, [r4, #8]
  4104ae:	daf0      	bge.n	410492 <__fputwc+0x36>
  4104b0:	69a2      	ldr	r2, [r4, #24]
  4104b2:	4293      	cmp	r3, r2
  4104b4:	db06      	blt.n	4104c4 <__fputwc+0x68>
  4104b6:	6823      	ldr	r3, [r4, #0]
  4104b8:	7019      	strb	r1, [r3, #0]
  4104ba:	6823      	ldr	r3, [r4, #0]
  4104bc:	7819      	ldrb	r1, [r3, #0]
  4104be:	3301      	adds	r3, #1
  4104c0:	290a      	cmp	r1, #10
  4104c2:	d1ea      	bne.n	41049a <__fputwc+0x3e>
  4104c4:	4638      	mov	r0, r7
  4104c6:	4622      	mov	r2, r4
  4104c8:	f001 ffa8 	bl	41241c <__swbuf_r>
  4104cc:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  4104d0:	fab0 f080 	clz	r0, r0
  4104d4:	0940      	lsrs	r0, r0, #5
  4104d6:	2800      	cmp	r0, #0
  4104d8:	d0e0      	beq.n	41049c <__fputwc+0x40>
  4104da:	f04f 30ff 	mov.w	r0, #4294967295
  4104de:	b002      	add	sp, #8
  4104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4104e4:	89a3      	ldrh	r3, [r4, #12]
  4104e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4104ea:	81a3      	strh	r3, [r4, #12]
  4104ec:	b002      	add	sp, #8
  4104ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4104f2:	1e73      	subs	r3, r6, #1
  4104f4:	2bfe      	cmp	r3, #254	; 0xfe
  4104f6:	d8bb      	bhi.n	410470 <__fputwc+0x14>
  4104f8:	b2f1      	uxtb	r1, r6
  4104fa:	4680      	mov	r8, r0
  4104fc:	f88d 1004 	strb.w	r1, [sp, #4]
  410500:	e7c5      	b.n	41048e <__fputwc+0x32>
  410502:	4630      	mov	r0, r6
  410504:	b002      	add	sp, #8
  410506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41050a:	bf00      	nop

0041050c <_fputwc_r>:
  41050c:	8993      	ldrh	r3, [r2, #12]
  41050e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  410512:	d10b      	bne.n	41052c <_fputwc_r+0x20>
  410514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  410518:	b410      	push	{r4}
  41051a:	6e54      	ldr	r4, [r2, #100]	; 0x64
  41051c:	8193      	strh	r3, [r2, #12]
  41051e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  410522:	6654      	str	r4, [r2, #100]	; 0x64
  410524:	f85d 4b04 	ldr.w	r4, [sp], #4
  410528:	f7ff bf98 	b.w	41045c <__fputwc>
  41052c:	f7ff bf96 	b.w	41045c <__fputwc>

00410530 <_malloc_trim_r>:
  410530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  410532:	4f22      	ldr	r7, [pc, #136]	; (4105bc <_malloc_trim_r+0x8c>)
  410534:	460c      	mov	r4, r1
  410536:	4606      	mov	r6, r0
  410538:	f7fb fa40 	bl	40b9bc <__malloc_lock>
  41053c:	68ba      	ldr	r2, [r7, #8]
  41053e:	4b20      	ldr	r3, [pc, #128]	; (4105c0 <_malloc_trim_r+0x90>)
  410540:	6855      	ldr	r5, [r2, #4]
  410542:	f025 0503 	bic.w	r5, r5, #3
  410546:	1b2c      	subs	r4, r5, r4
  410548:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  41054c:	4023      	ands	r3, r4
  41054e:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  410552:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  410556:	db07      	blt.n	410568 <_malloc_trim_r+0x38>
  410558:	4630      	mov	r0, r6
  41055a:	2100      	movs	r1, #0
  41055c:	f7fb fa32 	bl	40b9c4 <_sbrk_r>
  410560:	68bb      	ldr	r3, [r7, #8]
  410562:	442b      	add	r3, r5
  410564:	4298      	cmp	r0, r3
  410566:	d004      	beq.n	410572 <_malloc_trim_r+0x42>
  410568:	4630      	mov	r0, r6
  41056a:	f7fb fa29 	bl	40b9c0 <__malloc_unlock>
  41056e:	2000      	movs	r0, #0
  410570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  410572:	4630      	mov	r0, r6
  410574:	4261      	negs	r1, r4
  410576:	f7fb fa25 	bl	40b9c4 <_sbrk_r>
  41057a:	3001      	adds	r0, #1
  41057c:	d00d      	beq.n	41059a <_malloc_trim_r+0x6a>
  41057e:	4a11      	ldr	r2, [pc, #68]	; (4105c4 <_malloc_trim_r+0x94>)
  410580:	1b2d      	subs	r5, r5, r4
  410582:	68b9      	ldr	r1, [r7, #8]
  410584:	4630      	mov	r0, r6
  410586:	6813      	ldr	r3, [r2, #0]
  410588:	f045 0501 	orr.w	r5, r5, #1
  41058c:	1b1b      	subs	r3, r3, r4
  41058e:	604d      	str	r5, [r1, #4]
  410590:	6013      	str	r3, [r2, #0]
  410592:	f7fb fa15 	bl	40b9c0 <__malloc_unlock>
  410596:	2001      	movs	r0, #1
  410598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41059a:	4630      	mov	r0, r6
  41059c:	2100      	movs	r1, #0
  41059e:	f7fb fa11 	bl	40b9c4 <_sbrk_r>
  4105a2:	68ba      	ldr	r2, [r7, #8]
  4105a4:	1a83      	subs	r3, r0, r2
  4105a6:	2b0f      	cmp	r3, #15
  4105a8:	ddde      	ble.n	410568 <_malloc_trim_r+0x38>
  4105aa:	4c07      	ldr	r4, [pc, #28]	; (4105c8 <_malloc_trim_r+0x98>)
  4105ac:	f043 0301 	orr.w	r3, r3, #1
  4105b0:	4904      	ldr	r1, [pc, #16]	; (4105c4 <_malloc_trim_r+0x94>)
  4105b2:	6824      	ldr	r4, [r4, #0]
  4105b4:	6053      	str	r3, [r2, #4]
  4105b6:	1b00      	subs	r0, r0, r4
  4105b8:	6008      	str	r0, [r1, #0]
  4105ba:	e7d5      	b.n	410568 <_malloc_trim_r+0x38>
  4105bc:	204004dc 	.word	0x204004dc
  4105c0:	fffff000 	.word	0xfffff000
  4105c4:	2040c4f0 	.word	0x2040c4f0
  4105c8:	204008e8 	.word	0x204008e8

004105cc <_free_r>:
  4105cc:	2900      	cmp	r1, #0
  4105ce:	d04d      	beq.n	41066c <_free_r+0xa0>
  4105d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4105d4:	460c      	mov	r4, r1
  4105d6:	4680      	mov	r8, r0
  4105d8:	f7fb f9f0 	bl	40b9bc <__malloc_lock>
  4105dc:	4963      	ldr	r1, [pc, #396]	; (41076c <_free_r+0x1a0>)
  4105de:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4105e2:	f1a4 0508 	sub.w	r5, r4, #8
  4105e6:	688e      	ldr	r6, [r1, #8]
  4105e8:	f027 0301 	bic.w	r3, r7, #1
  4105ec:	18ea      	adds	r2, r5, r3
  4105ee:	6850      	ldr	r0, [r2, #4]
  4105f0:	4296      	cmp	r6, r2
  4105f2:	f020 0003 	bic.w	r0, r0, #3
  4105f6:	d059      	beq.n	4106ac <_free_r+0xe0>
  4105f8:	07fe      	lsls	r6, r7, #31
  4105fa:	6050      	str	r0, [r2, #4]
  4105fc:	d40b      	bmi.n	410616 <_free_r+0x4a>
  4105fe:	f854 4c08 	ldr.w	r4, [r4, #-8]
  410602:	f101 0708 	add.w	r7, r1, #8
  410606:	1b2d      	subs	r5, r5, r4
  410608:	4423      	add	r3, r4
  41060a:	68ac      	ldr	r4, [r5, #8]
  41060c:	42bc      	cmp	r4, r7
  41060e:	d066      	beq.n	4106de <_free_r+0x112>
  410610:	68ef      	ldr	r7, [r5, #12]
  410612:	60e7      	str	r7, [r4, #12]
  410614:	60bc      	str	r4, [r7, #8]
  410616:	1814      	adds	r4, r2, r0
  410618:	6864      	ldr	r4, [r4, #4]
  41061a:	07e4      	lsls	r4, r4, #31
  41061c:	d40c      	bmi.n	410638 <_free_r+0x6c>
  41061e:	4c54      	ldr	r4, [pc, #336]	; (410770 <_free_r+0x1a4>)
  410620:	4403      	add	r3, r0
  410622:	6890      	ldr	r0, [r2, #8]
  410624:	42a0      	cmp	r0, r4
  410626:	d07c      	beq.n	410722 <_free_r+0x156>
  410628:	68d4      	ldr	r4, [r2, #12]
  41062a:	f043 0201 	orr.w	r2, r3, #1
  41062e:	60c4      	str	r4, [r0, #12]
  410630:	60a0      	str	r0, [r4, #8]
  410632:	606a      	str	r2, [r5, #4]
  410634:	50eb      	str	r3, [r5, r3]
  410636:	e003      	b.n	410640 <_free_r+0x74>
  410638:	f043 0201 	orr.w	r2, r3, #1
  41063c:	606a      	str	r2, [r5, #4]
  41063e:	50eb      	str	r3, [r5, r3]
  410640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  410644:	d213      	bcs.n	41066e <_free_r+0xa2>
  410646:	08db      	lsrs	r3, r3, #3
  410648:	2001      	movs	r0, #1
  41064a:	684a      	ldr	r2, [r1, #4]
  41064c:	109c      	asrs	r4, r3, #2
  41064e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  410652:	40a0      	lsls	r0, r4
  410654:	689c      	ldr	r4, [r3, #8]
  410656:	4302      	orrs	r2, r0
  410658:	60eb      	str	r3, [r5, #12]
  41065a:	60ac      	str	r4, [r5, #8]
  41065c:	604a      	str	r2, [r1, #4]
  41065e:	609d      	str	r5, [r3, #8]
  410660:	60e5      	str	r5, [r4, #12]
  410662:	4640      	mov	r0, r8
  410664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  410668:	f7fb b9aa 	b.w	40b9c0 <__malloc_unlock>
  41066c:	4770      	bx	lr
  41066e:	0a5a      	lsrs	r2, r3, #9
  410670:	2a04      	cmp	r2, #4
  410672:	d847      	bhi.n	410704 <_free_r+0x138>
  410674:	099a      	lsrs	r2, r3, #6
  410676:	f102 0438 	add.w	r4, r2, #56	; 0x38
  41067a:	0060      	lsls	r0, r4, #1
  41067c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  410680:	493a      	ldr	r1, [pc, #232]	; (41076c <_free_r+0x1a0>)
  410682:	6882      	ldr	r2, [r0, #8]
  410684:	4282      	cmp	r2, r0
  410686:	d043      	beq.n	410710 <_free_r+0x144>
  410688:	6851      	ldr	r1, [r2, #4]
  41068a:	f021 0103 	bic.w	r1, r1, #3
  41068e:	4299      	cmp	r1, r3
  410690:	d902      	bls.n	410698 <_free_r+0xcc>
  410692:	6892      	ldr	r2, [r2, #8]
  410694:	4290      	cmp	r0, r2
  410696:	d1f7      	bne.n	410688 <_free_r+0xbc>
  410698:	68d3      	ldr	r3, [r2, #12]
  41069a:	60eb      	str	r3, [r5, #12]
  41069c:	4640      	mov	r0, r8
  41069e:	60aa      	str	r2, [r5, #8]
  4106a0:	609d      	str	r5, [r3, #8]
  4106a2:	60d5      	str	r5, [r2, #12]
  4106a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4106a8:	f7fb b98a 	b.w	40b9c0 <__malloc_unlock>
  4106ac:	07ff      	lsls	r7, r7, #31
  4106ae:	4403      	add	r3, r0
  4106b0:	d407      	bmi.n	4106c2 <_free_r+0xf6>
  4106b2:	f854 2c08 	ldr.w	r2, [r4, #-8]
  4106b6:	1aad      	subs	r5, r5, r2
  4106b8:	4413      	add	r3, r2
  4106ba:	68a8      	ldr	r0, [r5, #8]
  4106bc:	68ea      	ldr	r2, [r5, #12]
  4106be:	60c2      	str	r2, [r0, #12]
  4106c0:	6090      	str	r0, [r2, #8]
  4106c2:	4a2c      	ldr	r2, [pc, #176]	; (410774 <_free_r+0x1a8>)
  4106c4:	f043 0001 	orr.w	r0, r3, #1
  4106c8:	6812      	ldr	r2, [r2, #0]
  4106ca:	6068      	str	r0, [r5, #4]
  4106cc:	4293      	cmp	r3, r2
  4106ce:	608d      	str	r5, [r1, #8]
  4106d0:	d3c7      	bcc.n	410662 <_free_r+0x96>
  4106d2:	4b29      	ldr	r3, [pc, #164]	; (410778 <_free_r+0x1ac>)
  4106d4:	4640      	mov	r0, r8
  4106d6:	6819      	ldr	r1, [r3, #0]
  4106d8:	f7ff ff2a 	bl	410530 <_malloc_trim_r>
  4106dc:	e7c1      	b.n	410662 <_free_r+0x96>
  4106de:	1811      	adds	r1, r2, r0
  4106e0:	6849      	ldr	r1, [r1, #4]
  4106e2:	07c9      	lsls	r1, r1, #31
  4106e4:	d409      	bmi.n	4106fa <_free_r+0x12e>
  4106e6:	4403      	add	r3, r0
  4106e8:	68d1      	ldr	r1, [r2, #12]
  4106ea:	6892      	ldr	r2, [r2, #8]
  4106ec:	f043 0001 	orr.w	r0, r3, #1
  4106f0:	60d1      	str	r1, [r2, #12]
  4106f2:	608a      	str	r2, [r1, #8]
  4106f4:	6068      	str	r0, [r5, #4]
  4106f6:	50eb      	str	r3, [r5, r3]
  4106f8:	e7b3      	b.n	410662 <_free_r+0x96>
  4106fa:	f043 0201 	orr.w	r2, r3, #1
  4106fe:	606a      	str	r2, [r5, #4]
  410700:	50eb      	str	r3, [r5, r3]
  410702:	e7ae      	b.n	410662 <_free_r+0x96>
  410704:	2a14      	cmp	r2, #20
  410706:	d815      	bhi.n	410734 <_free_r+0x168>
  410708:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  41070c:	0060      	lsls	r0, r4, #1
  41070e:	e7b5      	b.n	41067c <_free_r+0xb0>
  410710:	10a4      	asrs	r4, r4, #2
  410712:	2701      	movs	r7, #1
  410714:	6848      	ldr	r0, [r1, #4]
  410716:	4613      	mov	r3, r2
  410718:	fa07 f404 	lsl.w	r4, r7, r4
  41071c:	4320      	orrs	r0, r4
  41071e:	6048      	str	r0, [r1, #4]
  410720:	e7bb      	b.n	41069a <_free_r+0xce>
  410722:	f043 0201 	orr.w	r2, r3, #1
  410726:	614d      	str	r5, [r1, #20]
  410728:	610d      	str	r5, [r1, #16]
  41072a:	60e8      	str	r0, [r5, #12]
  41072c:	60a8      	str	r0, [r5, #8]
  41072e:	606a      	str	r2, [r5, #4]
  410730:	50eb      	str	r3, [r5, r3]
  410732:	e796      	b.n	410662 <_free_r+0x96>
  410734:	2a54      	cmp	r2, #84	; 0x54
  410736:	d804      	bhi.n	410742 <_free_r+0x176>
  410738:	0b1a      	lsrs	r2, r3, #12
  41073a:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  41073e:	0060      	lsls	r0, r4, #1
  410740:	e79c      	b.n	41067c <_free_r+0xb0>
  410742:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  410746:	d804      	bhi.n	410752 <_free_r+0x186>
  410748:	0bda      	lsrs	r2, r3, #15
  41074a:	f102 0477 	add.w	r4, r2, #119	; 0x77
  41074e:	0060      	lsls	r0, r4, #1
  410750:	e794      	b.n	41067c <_free_r+0xb0>
  410752:	f240 5054 	movw	r0, #1364	; 0x554
  410756:	4282      	cmp	r2, r0
  410758:	d804      	bhi.n	410764 <_free_r+0x198>
  41075a:	0c9a      	lsrs	r2, r3, #18
  41075c:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  410760:	0060      	lsls	r0, r4, #1
  410762:	e78b      	b.n	41067c <_free_r+0xb0>
  410764:	20fc      	movs	r0, #252	; 0xfc
  410766:	247e      	movs	r4, #126	; 0x7e
  410768:	e788      	b.n	41067c <_free_r+0xb0>
  41076a:	bf00      	nop
  41076c:	204004dc 	.word	0x204004dc
  410770:	204004e4 	.word	0x204004e4
  410774:	204008e4 	.word	0x204008e4
  410778:	2040c4ec 	.word	0x2040c4ec

0041077c <__sfvwrite_r>:
  41077c:	6893      	ldr	r3, [r2, #8]
  41077e:	2b00      	cmp	r3, #0
  410780:	d07a      	beq.n	410878 <__sfvwrite_r+0xfc>
  410782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410786:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  41078a:	b083      	sub	sp, #12
  41078c:	460c      	mov	r4, r1
  41078e:	4681      	mov	r9, r0
  410790:	f01e 0f08 	tst.w	lr, #8
  410794:	4616      	mov	r6, r2
  410796:	d026      	beq.n	4107e6 <__sfvwrite_r+0x6a>
  410798:	690b      	ldr	r3, [r1, #16]
  41079a:	b323      	cbz	r3, 4107e6 <__sfvwrite_r+0x6a>
  41079c:	f00e 0802 	and.w	r8, lr, #2
  4107a0:	6835      	ldr	r5, [r6, #0]
  4107a2:	fa1f f088 	uxth.w	r0, r8
  4107a6:	b370      	cbz	r0, 410806 <__sfvwrite_r+0x8a>
  4107a8:	f04f 0a00 	mov.w	sl, #0
  4107ac:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 410a9c <__sfvwrite_r+0x320>
  4107b0:	46d0      	mov	r8, sl
  4107b2:	45d8      	cmp	r8, fp
  4107b4:	4643      	mov	r3, r8
  4107b6:	4652      	mov	r2, sl
  4107b8:	4648      	mov	r0, r9
  4107ba:	bf28      	it	cs
  4107bc:	465b      	movcs	r3, fp
  4107be:	f1b8 0f00 	cmp.w	r8, #0
  4107c2:	d053      	beq.n	41086c <__sfvwrite_r+0xf0>
  4107c4:	69e1      	ldr	r1, [r4, #28]
  4107c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4107c8:	47b8      	blx	r7
  4107ca:	2800      	cmp	r0, #0
  4107cc:	dd73      	ble.n	4108b6 <__sfvwrite_r+0x13a>
  4107ce:	68b3      	ldr	r3, [r6, #8]
  4107d0:	4482      	add	sl, r0
  4107d2:	ebc0 0808 	rsb	r8, r0, r8
  4107d6:	1a18      	subs	r0, r3, r0
  4107d8:	60b0      	str	r0, [r6, #8]
  4107da:	2800      	cmp	r0, #0
  4107dc:	d1e9      	bne.n	4107b2 <__sfvwrite_r+0x36>
  4107de:	2000      	movs	r0, #0
  4107e0:	b003      	add	sp, #12
  4107e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4107e6:	4648      	mov	r0, r9
  4107e8:	4621      	mov	r1, r4
  4107ea:	f7fe fc59 	bl	40f0a0 <__swsetup_r>
  4107ee:	2800      	cmp	r0, #0
  4107f0:	f040 814c 	bne.w	410a8c <__sfvwrite_r+0x310>
  4107f4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4107f8:	6835      	ldr	r5, [r6, #0]
  4107fa:	f00e 0802 	and.w	r8, lr, #2
  4107fe:	fa1f f088 	uxth.w	r0, r8
  410802:	2800      	cmp	r0, #0
  410804:	d1d0      	bne.n	4107a8 <__sfvwrite_r+0x2c>
  410806:	f01e 0b01 	ands.w	fp, lr, #1
  41080a:	d15d      	bne.n	4108c8 <__sfvwrite_r+0x14c>
  41080c:	46d8      	mov	r8, fp
  41080e:	f1b8 0f00 	cmp.w	r8, #0
  410812:	d025      	beq.n	410860 <__sfvwrite_r+0xe4>
  410814:	f41e 7f00 	tst.w	lr, #512	; 0x200
  410818:	68a7      	ldr	r7, [r4, #8]
  41081a:	d02f      	beq.n	41087c <__sfvwrite_r+0x100>
  41081c:	45b8      	cmp	r8, r7
  41081e:	46ba      	mov	sl, r7
  410820:	f0c0 80a8 	bcc.w	410974 <__sfvwrite_r+0x1f8>
  410824:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  410828:	f040 80b5 	bne.w	410996 <__sfvwrite_r+0x21a>
  41082c:	6820      	ldr	r0, [r4, #0]
  41082e:	4659      	mov	r1, fp
  410830:	4652      	mov	r2, sl
  410832:	f000 fdc1 	bl	4113b8 <memmove>
  410836:	68a2      	ldr	r2, [r4, #8]
  410838:	6821      	ldr	r1, [r4, #0]
  41083a:	4640      	mov	r0, r8
  41083c:	1bd7      	subs	r7, r2, r7
  41083e:	eb01 030a 	add.w	r3, r1, sl
  410842:	60a7      	str	r7, [r4, #8]
  410844:	6023      	str	r3, [r4, #0]
  410846:	68b3      	ldr	r3, [r6, #8]
  410848:	4483      	add	fp, r0
  41084a:	ebc0 0808 	rsb	r8, r0, r8
  41084e:	1a18      	subs	r0, r3, r0
  410850:	60b0      	str	r0, [r6, #8]
  410852:	2800      	cmp	r0, #0
  410854:	d0c3      	beq.n	4107de <__sfvwrite_r+0x62>
  410856:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  41085a:	f1b8 0f00 	cmp.w	r8, #0
  41085e:	d1d9      	bne.n	410814 <__sfvwrite_r+0x98>
  410860:	f8d5 b000 	ldr.w	fp, [r5]
  410864:	3508      	adds	r5, #8
  410866:	f855 8c04 	ldr.w	r8, [r5, #-4]
  41086a:	e7d0      	b.n	41080e <__sfvwrite_r+0x92>
  41086c:	f8d5 a000 	ldr.w	sl, [r5]
  410870:	3508      	adds	r5, #8
  410872:	f855 8c04 	ldr.w	r8, [r5, #-4]
  410876:	e79c      	b.n	4107b2 <__sfvwrite_r+0x36>
  410878:	2000      	movs	r0, #0
  41087a:	4770      	bx	lr
  41087c:	6820      	ldr	r0, [r4, #0]
  41087e:	6923      	ldr	r3, [r4, #16]
  410880:	4298      	cmp	r0, r3
  410882:	d803      	bhi.n	41088c <__sfvwrite_r+0x110>
  410884:	6963      	ldr	r3, [r4, #20]
  410886:	4598      	cmp	r8, r3
  410888:	f080 80bf 	bcs.w	410a0a <__sfvwrite_r+0x28e>
  41088c:	4547      	cmp	r7, r8
  41088e:	4659      	mov	r1, fp
  410890:	bf28      	it	cs
  410892:	4647      	movcs	r7, r8
  410894:	463a      	mov	r2, r7
  410896:	f000 fd8f 	bl	4113b8 <memmove>
  41089a:	68a3      	ldr	r3, [r4, #8]
  41089c:	6822      	ldr	r2, [r4, #0]
  41089e:	1bdb      	subs	r3, r3, r7
  4108a0:	443a      	add	r2, r7
  4108a2:	60a3      	str	r3, [r4, #8]
  4108a4:	6022      	str	r2, [r4, #0]
  4108a6:	2b00      	cmp	r3, #0
  4108a8:	d149      	bne.n	41093e <__sfvwrite_r+0x1c2>
  4108aa:	4648      	mov	r0, r9
  4108ac:	4621      	mov	r1, r4
  4108ae:	f7ff fd1b 	bl	4102e8 <_fflush_r>
  4108b2:	2800      	cmp	r0, #0
  4108b4:	d043      	beq.n	41093e <__sfvwrite_r+0x1c2>
  4108b6:	89a3      	ldrh	r3, [r4, #12]
  4108b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4108bc:	f04f 30ff 	mov.w	r0, #4294967295
  4108c0:	81a3      	strh	r3, [r4, #12]
  4108c2:	b003      	add	sp, #12
  4108c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4108c8:	4680      	mov	r8, r0
  4108ca:	4683      	mov	fp, r0
  4108cc:	4682      	mov	sl, r0
  4108ce:	9000      	str	r0, [sp, #0]
  4108d0:	f1ba 0f00 	cmp.w	sl, #0
  4108d4:	d02b      	beq.n	41092e <__sfvwrite_r+0x1b2>
  4108d6:	9b00      	ldr	r3, [sp, #0]
  4108d8:	2b00      	cmp	r3, #0
  4108da:	d04f      	beq.n	41097c <__sfvwrite_r+0x200>
  4108dc:	45d0      	cmp	r8, sl
  4108de:	6962      	ldr	r2, [r4, #20]
  4108e0:	68a1      	ldr	r1, [r4, #8]
  4108e2:	4643      	mov	r3, r8
  4108e4:	bf28      	it	cs
  4108e6:	4653      	movcs	r3, sl
  4108e8:	6820      	ldr	r0, [r4, #0]
  4108ea:	eb02 0c01 	add.w	ip, r2, r1
  4108ee:	461f      	mov	r7, r3
  4108f0:	4563      	cmp	r3, ip
  4108f2:	dd03      	ble.n	4108fc <__sfvwrite_r+0x180>
  4108f4:	6921      	ldr	r1, [r4, #16]
  4108f6:	4288      	cmp	r0, r1
  4108f8:	f200 8099 	bhi.w	410a2e <__sfvwrite_r+0x2b2>
  4108fc:	4293      	cmp	r3, r2
  4108fe:	db20      	blt.n	410942 <__sfvwrite_r+0x1c6>
  410900:	4613      	mov	r3, r2
  410902:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410904:	4648      	mov	r0, r9
  410906:	69e1      	ldr	r1, [r4, #28]
  410908:	465a      	mov	r2, fp
  41090a:	47b8      	blx	r7
  41090c:	1e07      	subs	r7, r0, #0
  41090e:	ddd2      	ble.n	4108b6 <__sfvwrite_r+0x13a>
  410910:	ebb8 0807 	subs.w	r8, r8, r7
  410914:	d025      	beq.n	410962 <__sfvwrite_r+0x1e6>
  410916:	68b3      	ldr	r3, [r6, #8]
  410918:	44bb      	add	fp, r7
  41091a:	ebc7 0a0a 	rsb	sl, r7, sl
  41091e:	1bdf      	subs	r7, r3, r7
  410920:	60b7      	str	r7, [r6, #8]
  410922:	2f00      	cmp	r7, #0
  410924:	f43f af5b 	beq.w	4107de <__sfvwrite_r+0x62>
  410928:	f1ba 0f00 	cmp.w	sl, #0
  41092c:	d1d3      	bne.n	4108d6 <__sfvwrite_r+0x15a>
  41092e:	2300      	movs	r3, #0
  410930:	f8d5 b000 	ldr.w	fp, [r5]
  410934:	f8d5 a004 	ldr.w	sl, [r5, #4]
  410938:	3508      	adds	r5, #8
  41093a:	9300      	str	r3, [sp, #0]
  41093c:	e7c8      	b.n	4108d0 <__sfvwrite_r+0x154>
  41093e:	4638      	mov	r0, r7
  410940:	e781      	b.n	410846 <__sfvwrite_r+0xca>
  410942:	461a      	mov	r2, r3
  410944:	4659      	mov	r1, fp
  410946:	9301      	str	r3, [sp, #4]
  410948:	f000 fd36 	bl	4113b8 <memmove>
  41094c:	68a2      	ldr	r2, [r4, #8]
  41094e:	ebb8 0807 	subs.w	r8, r8, r7
  410952:	6821      	ldr	r1, [r4, #0]
  410954:	9b01      	ldr	r3, [sp, #4]
  410956:	eba2 0203 	sub.w	r2, r2, r3
  41095a:	440b      	add	r3, r1
  41095c:	60a2      	str	r2, [r4, #8]
  41095e:	6023      	str	r3, [r4, #0]
  410960:	d1d9      	bne.n	410916 <__sfvwrite_r+0x19a>
  410962:	4648      	mov	r0, r9
  410964:	4621      	mov	r1, r4
  410966:	f7ff fcbf 	bl	4102e8 <_fflush_r>
  41096a:	2800      	cmp	r0, #0
  41096c:	d1a3      	bne.n	4108b6 <__sfvwrite_r+0x13a>
  41096e:	f8cd 8000 	str.w	r8, [sp]
  410972:	e7d0      	b.n	410916 <__sfvwrite_r+0x19a>
  410974:	4647      	mov	r7, r8
  410976:	6820      	ldr	r0, [r4, #0]
  410978:	46c2      	mov	sl, r8
  41097a:	e758      	b.n	41082e <__sfvwrite_r+0xb2>
  41097c:	4658      	mov	r0, fp
  41097e:	210a      	movs	r1, #10
  410980:	4652      	mov	r2, sl
  410982:	f000 fcd1 	bl	411328 <memchr>
  410986:	2800      	cmp	r0, #0
  410988:	d07b      	beq.n	410a82 <__sfvwrite_r+0x306>
  41098a:	3001      	adds	r0, #1
  41098c:	2301      	movs	r3, #1
  41098e:	ebcb 0800 	rsb	r8, fp, r0
  410992:	9300      	str	r3, [sp, #0]
  410994:	e7a2      	b.n	4108dc <__sfvwrite_r+0x160>
  410996:	6963      	ldr	r3, [r4, #20]
  410998:	6921      	ldr	r1, [r4, #16]
  41099a:	6827      	ldr	r7, [r4, #0]
  41099c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  4109a0:	1a7f      	subs	r7, r7, r1
  4109a2:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  4109a6:	1c7b      	adds	r3, r7, #1
  4109a8:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  4109ac:	4443      	add	r3, r8
  4109ae:	4662      	mov	r2, ip
  4109b0:	459c      	cmp	ip, r3
  4109b2:	d201      	bcs.n	4109b8 <__sfvwrite_r+0x23c>
  4109b4:	469c      	mov	ip, r3
  4109b6:	461a      	mov	r2, r3
  4109b8:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4109bc:	f8cd c000 	str.w	ip, [sp]
  4109c0:	d04b      	beq.n	410a5a <__sfvwrite_r+0x2de>
  4109c2:	4611      	mov	r1, r2
  4109c4:	4648      	mov	r0, r9
  4109c6:	f7fa fc63 	bl	40b290 <_malloc_r>
  4109ca:	f8dd c000 	ldr.w	ip, [sp]
  4109ce:	4682      	mov	sl, r0
  4109d0:	2800      	cmp	r0, #0
  4109d2:	d05e      	beq.n	410a92 <__sfvwrite_r+0x316>
  4109d4:	463a      	mov	r2, r7
  4109d6:	6921      	ldr	r1, [r4, #16]
  4109d8:	f8cd c000 	str.w	ip, [sp]
  4109dc:	f7fa ff04 	bl	40b7e8 <memcpy>
  4109e0:	89a2      	ldrh	r2, [r4, #12]
  4109e2:	f8dd c000 	ldr.w	ip, [sp]
  4109e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4109ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4109ee:	81a2      	strh	r2, [r4, #12]
  4109f0:	eb0a 0007 	add.w	r0, sl, r7
  4109f4:	ebc7 020c 	rsb	r2, r7, ip
  4109f8:	f8c4 a010 	str.w	sl, [r4, #16]
  4109fc:	4647      	mov	r7, r8
  4109fe:	6020      	str	r0, [r4, #0]
  410a00:	46c2      	mov	sl, r8
  410a02:	60a2      	str	r2, [r4, #8]
  410a04:	f8c4 c014 	str.w	ip, [r4, #20]
  410a08:	e711      	b.n	41082e <__sfvwrite_r+0xb2>
  410a0a:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  410a0e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410a10:	4648      	mov	r0, r9
  410a12:	69e1      	ldr	r1, [r4, #28]
  410a14:	45c6      	cmp	lr, r8
  410a16:	465a      	mov	r2, fp
  410a18:	bf28      	it	cs
  410a1a:	46c6      	movcs	lr, r8
  410a1c:	fb9e fef3 	sdiv	lr, lr, r3
  410a20:	fb0e f303 	mul.w	r3, lr, r3
  410a24:	47b8      	blx	r7
  410a26:	2800      	cmp	r0, #0
  410a28:	f73f af0d 	bgt.w	410846 <__sfvwrite_r+0xca>
  410a2c:	e743      	b.n	4108b6 <__sfvwrite_r+0x13a>
  410a2e:	4662      	mov	r2, ip
  410a30:	4659      	mov	r1, fp
  410a32:	f8cd c004 	str.w	ip, [sp, #4]
  410a36:	f000 fcbf 	bl	4113b8 <memmove>
  410a3a:	6823      	ldr	r3, [r4, #0]
  410a3c:	4648      	mov	r0, r9
  410a3e:	f8dd c004 	ldr.w	ip, [sp, #4]
  410a42:	4621      	mov	r1, r4
  410a44:	4463      	add	r3, ip
  410a46:	6023      	str	r3, [r4, #0]
  410a48:	f7ff fc4e 	bl	4102e8 <_fflush_r>
  410a4c:	f8dd c004 	ldr.w	ip, [sp, #4]
  410a50:	2800      	cmp	r0, #0
  410a52:	f47f af30 	bne.w	4108b6 <__sfvwrite_r+0x13a>
  410a56:	4667      	mov	r7, ip
  410a58:	e75a      	b.n	410910 <__sfvwrite_r+0x194>
  410a5a:	4648      	mov	r0, r9
  410a5c:	f001 f97e 	bl	411d5c <_realloc_r>
  410a60:	f8dd c000 	ldr.w	ip, [sp]
  410a64:	4682      	mov	sl, r0
  410a66:	2800      	cmp	r0, #0
  410a68:	d1c2      	bne.n	4109f0 <__sfvwrite_r+0x274>
  410a6a:	4648      	mov	r0, r9
  410a6c:	6921      	ldr	r1, [r4, #16]
  410a6e:	f7ff fdad 	bl	4105cc <_free_r>
  410a72:	89a3      	ldrh	r3, [r4, #12]
  410a74:	220c      	movs	r2, #12
  410a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  410a7a:	f8c9 2000 	str.w	r2, [r9]
  410a7e:	b29b      	uxth	r3, r3
  410a80:	e71a      	b.n	4108b8 <__sfvwrite_r+0x13c>
  410a82:	2301      	movs	r3, #1
  410a84:	f10a 0801 	add.w	r8, sl, #1
  410a88:	9300      	str	r3, [sp, #0]
  410a8a:	e727      	b.n	4108dc <__sfvwrite_r+0x160>
  410a8c:	f04f 30ff 	mov.w	r0, #4294967295
  410a90:	e6a6      	b.n	4107e0 <__sfvwrite_r+0x64>
  410a92:	220c      	movs	r2, #12
  410a94:	89a3      	ldrh	r3, [r4, #12]
  410a96:	f8c9 2000 	str.w	r2, [r9]
  410a9a:	e70d      	b.n	4108b8 <__sfvwrite_r+0x13c>
  410a9c:	7ffffc00 	.word	0x7ffffc00

00410aa0 <_fwalk_reent>:
  410aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  410aa4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  410aa8:	d01e      	beq.n	410ae8 <_fwalk_reent+0x48>
  410aaa:	4688      	mov	r8, r1
  410aac:	4606      	mov	r6, r0
  410aae:	f04f 0900 	mov.w	r9, #0
  410ab2:	687d      	ldr	r5, [r7, #4]
  410ab4:	68bc      	ldr	r4, [r7, #8]
  410ab6:	3d01      	subs	r5, #1
  410ab8:	d410      	bmi.n	410adc <_fwalk_reent+0x3c>
  410aba:	89a3      	ldrh	r3, [r4, #12]
  410abc:	3d01      	subs	r5, #1
  410abe:	2b01      	cmp	r3, #1
  410ac0:	d908      	bls.n	410ad4 <_fwalk_reent+0x34>
  410ac2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  410ac6:	4621      	mov	r1, r4
  410ac8:	4630      	mov	r0, r6
  410aca:	3301      	adds	r3, #1
  410acc:	d002      	beq.n	410ad4 <_fwalk_reent+0x34>
  410ace:	47c0      	blx	r8
  410ad0:	ea49 0900 	orr.w	r9, r9, r0
  410ad4:	1c6b      	adds	r3, r5, #1
  410ad6:	f104 0468 	add.w	r4, r4, #104	; 0x68
  410ada:	d1ee      	bne.n	410aba <_fwalk_reent+0x1a>
  410adc:	683f      	ldr	r7, [r7, #0]
  410ade:	2f00      	cmp	r7, #0
  410ae0:	d1e7      	bne.n	410ab2 <_fwalk_reent+0x12>
  410ae2:	4648      	mov	r0, r9
  410ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410ae8:	46b9      	mov	r9, r7
  410aea:	4648      	mov	r0, r9
  410aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410af0 <rshift>:
  410af0:	6902      	ldr	r2, [r0, #16]
  410af2:	114b      	asrs	r3, r1, #5
  410af4:	4293      	cmp	r3, r2
  410af6:	b5f0      	push	{r4, r5, r6, r7, lr}
  410af8:	f100 0614 	add.w	r6, r0, #20
  410afc:	da2b      	bge.n	410b56 <rshift+0x66>
  410afe:	f011 011f 	ands.w	r1, r1, #31
  410b02:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  410b06:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
  410b0a:	d029      	beq.n	410b60 <rshift+0x70>
  410b0c:	f10e 0504 	add.w	r5, lr, #4
  410b10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  410b14:	f1c1 0c20 	rsb	ip, r1, #32
  410b18:	42aa      	cmp	r2, r5
  410b1a:	fa23 f401 	lsr.w	r4, r3, r1
  410b1e:	d935      	bls.n	410b8c <rshift+0x9c>
  410b20:	f100 0710 	add.w	r7, r0, #16
  410b24:	682b      	ldr	r3, [r5, #0]
  410b26:	fa03 f30c 	lsl.w	r3, r3, ip
  410b2a:	4323      	orrs	r3, r4
  410b2c:	f847 3f04 	str.w	r3, [r7, #4]!
  410b30:	f855 3b04 	ldr.w	r3, [r5], #4
  410b34:	42aa      	cmp	r2, r5
  410b36:	fa23 f401 	lsr.w	r4, r3, r1
  410b3a:	d8f3      	bhi.n	410b24 <rshift+0x34>
  410b3c:	ebce 0202 	rsb	r2, lr, r2
  410b40:	3a05      	subs	r2, #5
  410b42:	f022 0203 	bic.w	r2, r2, #3
  410b46:	3204      	adds	r2, #4
  410b48:	4432      	add	r2, r6
  410b4a:	6014      	str	r4, [r2, #0]
  410b4c:	b104      	cbz	r4, 410b50 <rshift+0x60>
  410b4e:	3204      	adds	r2, #4
  410b50:	1b93      	subs	r3, r2, r6
  410b52:	109b      	asrs	r3, r3, #2
  410b54:	e016      	b.n	410b84 <rshift+0x94>
  410b56:	2300      	movs	r3, #0
  410b58:	6103      	str	r3, [r0, #16]
  410b5a:	2300      	movs	r3, #0
  410b5c:	6143      	str	r3, [r0, #20]
  410b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410b60:	4572      	cmp	r2, lr
  410b62:	d9f8      	bls.n	410b56 <rshift+0x66>
  410b64:	f100 0410 	add.w	r4, r0, #16
  410b68:	4671      	mov	r1, lr
  410b6a:	f851 5b04 	ldr.w	r5, [r1], #4
  410b6e:	428a      	cmp	r2, r1
  410b70:	f844 5f04 	str.w	r5, [r4, #4]!
  410b74:	d8f9      	bhi.n	410b6a <rshift+0x7a>
  410b76:	ea6f 030e 	mvn.w	r3, lr
  410b7a:	4413      	add	r3, r2
  410b7c:	f023 0303 	bic.w	r3, r3, #3
  410b80:	3304      	adds	r3, #4
  410b82:	109b      	asrs	r3, r3, #2
  410b84:	6103      	str	r3, [r0, #16]
  410b86:	2b00      	cmp	r3, #0
  410b88:	d0e7      	beq.n	410b5a <rshift+0x6a>
  410b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410b8c:	4632      	mov	r2, r6
  410b8e:	e7dc      	b.n	410b4a <rshift+0x5a>

00410b90 <__gethex>:
  410b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410b94:	b08b      	sub	sp, #44	; 0x2c
  410b96:	4688      	mov	r8, r1
  410b98:	9202      	str	r2, [sp, #8]
  410b9a:	9307      	str	r3, [sp, #28]
  410b9c:	9005      	str	r0, [sp, #20]
  410b9e:	f000 fb4d 	bl	41123c <_localeconv_r>
  410ba2:	6803      	ldr	r3, [r0, #0]
  410ba4:	4618      	mov	r0, r3
  410ba6:	461c      	mov	r4, r3
  410ba8:	9303      	str	r3, [sp, #12]
  410baa:	f7fb f8b7 	bl	40bd1c <strlen>
  410bae:	f8d8 3000 	ldr.w	r3, [r8]
  410bb2:	1821      	adds	r1, r4, r0
  410bb4:	9000      	str	r0, [sp, #0]
  410bb6:	789a      	ldrb	r2, [r3, #2]
  410bb8:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  410bbc:	2a30      	cmp	r2, #48	; 0x30
  410bbe:	f040 819f 	bne.w	410f00 <__gethex+0x370>
  410bc2:	3303      	adds	r3, #3
  410bc4:	f04f 0900 	mov.w	r9, #0
  410bc8:	461c      	mov	r4, r3
  410bca:	f813 2b01 	ldrb.w	r2, [r3], #1
  410bce:	f109 0901 	add.w	r9, r9, #1
  410bd2:	2a30      	cmp	r2, #48	; 0x30
  410bd4:	d0f8      	beq.n	410bc8 <__gethex+0x38>
  410bd6:	4eae      	ldr	r6, [pc, #696]	; (410e90 <__gethex+0x300>)
  410bd8:	5cb3      	ldrb	r3, [r6, r2]
  410bda:	2b00      	cmp	r3, #0
  410bdc:	f000 80ec 	beq.w	410db8 <__gethex+0x228>
  410be0:	7823      	ldrb	r3, [r4, #0]
  410be2:	f04f 0a00 	mov.w	sl, #0
  410be6:	5cf3      	ldrb	r3, [r6, r3]
  410be8:	4655      	mov	r5, sl
  410bea:	4627      	mov	r7, r4
  410bec:	b123      	cbz	r3, 410bf8 <__gethex+0x68>
  410bee:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  410bf2:	5cf3      	ldrb	r3, [r6, r3]
  410bf4:	2b00      	cmp	r3, #0
  410bf6:	d1fa      	bne.n	410bee <__gethex+0x5e>
  410bf8:	4638      	mov	r0, r7
  410bfa:	9903      	ldr	r1, [sp, #12]
  410bfc:	9a00      	ldr	r2, [sp, #0]
  410bfe:	f001 fb39 	bl	412274 <strncmp>
  410c02:	b1c0      	cbz	r0, 410c36 <__gethex+0xa6>
  410c04:	783b      	ldrb	r3, [r7, #0]
  410c06:	2d00      	cmp	r5, #0
  410c08:	f000 816a 	beq.w	410ee0 <__gethex+0x350>
  410c0c:	1bed      	subs	r5, r5, r7
  410c0e:	00aa      	lsls	r2, r5, #2
  410c10:	9201      	str	r2, [sp, #4]
  410c12:	2b50      	cmp	r3, #80	; 0x50
  410c14:	d018      	beq.n	410c48 <__gethex+0xb8>
  410c16:	2b70      	cmp	r3, #112	; 0x70
  410c18:	d016      	beq.n	410c48 <__gethex+0xb8>
  410c1a:	463d      	mov	r5, r7
  410c1c:	f8c8 7000 	str.w	r7, [r8]
  410c20:	f1ba 0f00 	cmp.w	sl, #0
  410c24:	d03f      	beq.n	410ca6 <__gethex+0x116>
  410c26:	f1b9 0f00 	cmp.w	r9, #0
  410c2a:	bf14      	ite	ne
  410c2c:	2000      	movne	r0, #0
  410c2e:	2006      	moveq	r0, #6
  410c30:	b00b      	add	sp, #44	; 0x2c
  410c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c36:	2d00      	cmp	r5, #0
  410c38:	f000 818a 	beq.w	410f50 <__gethex+0x3c0>
  410c3c:	783b      	ldrb	r3, [r7, #0]
  410c3e:	e7e5      	b.n	410c0c <__gethex+0x7c>
  410c40:	2300      	movs	r3, #0
  410c42:	f04f 0a01 	mov.w	sl, #1
  410c46:	9301      	str	r3, [sp, #4]
  410c48:	787b      	ldrb	r3, [r7, #1]
  410c4a:	2b2b      	cmp	r3, #43	; 0x2b
  410c4c:	f000 811d 	beq.w	410e8a <__gethex+0x2fa>
  410c50:	2b2d      	cmp	r3, #45	; 0x2d
  410c52:	f000 80e4 	beq.w	410e1e <__gethex+0x28e>
  410c56:	1c79      	adds	r1, r7, #1
  410c58:	f04f 0e00 	mov.w	lr, #0
  410c5c:	5cf3      	ldrb	r3, [r6, r3]
  410c5e:	4a8c      	ldr	r2, [pc, #560]	; (410e90 <__gethex+0x300>)
  410c60:	1e58      	subs	r0, r3, #1
  410c62:	2818      	cmp	r0, #24
  410c64:	d8d9      	bhi.n	410c1a <__gethex+0x8a>
  410c66:	7848      	ldrb	r0, [r1, #1]
  410c68:	3b10      	subs	r3, #16
  410c6a:	3101      	adds	r1, #1
  410c6c:	5c12      	ldrb	r2, [r2, r0]
  410c6e:	1e50      	subs	r0, r2, #1
  410c70:	2818      	cmp	r0, #24
  410c72:	d80a      	bhi.n	410c8a <__gethex+0xfa>
  410c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  410c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  410c7c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  410c80:	5c32      	ldrb	r2, [r6, r0]
  410c82:	1e50      	subs	r0, r2, #1
  410c84:	3b10      	subs	r3, #16
  410c86:	2818      	cmp	r0, #24
  410c88:	d9f4      	bls.n	410c74 <__gethex+0xe4>
  410c8a:	f1ce 0200 	rsb	r2, lr, #0
  410c8e:	463d      	mov	r5, r7
  410c90:	460f      	mov	r7, r1
  410c92:	4053      	eors	r3, r2
  410c94:	f8c8 7000 	str.w	r7, [r8]
  410c98:	449e      	add	lr, r3
  410c9a:	9b01      	ldr	r3, [sp, #4]
  410c9c:	4473      	add	r3, lr
  410c9e:	9301      	str	r3, [sp, #4]
  410ca0:	f1ba 0f00 	cmp.w	sl, #0
  410ca4:	d1bf      	bne.n	410c26 <__gethex+0x96>
  410ca6:	1b2b      	subs	r3, r5, r4
  410ca8:	4651      	mov	r1, sl
  410caa:	3b01      	subs	r3, #1
  410cac:	2b07      	cmp	r3, #7
  410cae:	dd03      	ble.n	410cb8 <__gethex+0x128>
  410cb0:	105b      	asrs	r3, r3, #1
  410cb2:	3101      	adds	r1, #1
  410cb4:	2b07      	cmp	r3, #7
  410cb6:	dcfb      	bgt.n	410cb0 <__gethex+0x120>
  410cb8:	9805      	ldr	r0, [sp, #20]
  410cba:	f000 fbdf 	bl	41147c <_Balloc>
  410cbe:	4603      	mov	r3, r0
  410cc0:	42a5      	cmp	r5, r4
  410cc2:	9004      	str	r0, [sp, #16]
  410cc4:	f103 0314 	add.w	r3, r3, #20
  410cc8:	9306      	str	r3, [sp, #24]
  410cca:	f240 8193 	bls.w	410ff4 <__gethex+0x464>
  410cce:	f04f 0800 	mov.w	r8, #0
  410cd2:	469a      	mov	sl, r3
  410cd4:	9b00      	ldr	r3, [sp, #0]
  410cd6:	4647      	mov	r7, r8
  410cd8:	46a0      	mov	r8, r4
  410cda:	f1c3 0c01 	rsb	ip, r3, #1
  410cde:	463c      	mov	r4, r7
  410ce0:	46e1      	mov	r9, ip
  410ce2:	e00f      	b.n	410d04 <__gethex+0x174>
  410ce4:	2f20      	cmp	r7, #32
  410ce6:	d05f      	beq.n	410da8 <__gethex+0x218>
  410ce8:	463a      	mov	r2, r7
  410cea:	3704      	adds	r7, #4
  410cec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
  410cf0:	461d      	mov	r5, r3
  410cf2:	5c73      	ldrb	r3, [r6, r1]
  410cf4:	4545      	cmp	r5, r8
  410cf6:	f003 030f 	and.w	r3, r3, #15
  410cfa:	fa03 f302 	lsl.w	r3, r3, r2
  410cfe:	ea44 0403 	orr.w	r4, r4, r3
  410d02:	d918      	bls.n	410d36 <__gethex+0x1a6>
  410d04:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  410d08:	1e6b      	subs	r3, r5, #1
  410d0a:	455a      	cmp	r2, fp
  410d0c:	d1ea      	bne.n	410ce4 <__gethex+0x154>
  410d0e:	eb03 0c09 	add.w	ip, r3, r9
  410d12:	45c4      	cmp	ip, r8
  410d14:	d3e6      	bcc.n	410ce4 <__gethex+0x154>
  410d16:	4660      	mov	r0, ip
  410d18:	9903      	ldr	r1, [sp, #12]
  410d1a:	9a00      	ldr	r2, [sp, #0]
  410d1c:	9309      	str	r3, [sp, #36]	; 0x24
  410d1e:	f8cd c020 	str.w	ip, [sp, #32]
  410d22:	f001 faa7 	bl	412274 <strncmp>
  410d26:	f8dd c020 	ldr.w	ip, [sp, #32]
  410d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410d2c:	2800      	cmp	r0, #0
  410d2e:	d1d9      	bne.n	410ce4 <__gethex+0x154>
  410d30:	4665      	mov	r5, ip
  410d32:	4545      	cmp	r5, r8
  410d34:	d8e6      	bhi.n	410d04 <__gethex+0x174>
  410d36:	46a0      	mov	r8, r4
  410d38:	9b06      	ldr	r3, [sp, #24]
  410d3a:	4640      	mov	r0, r8
  410d3c:	f84a 8b04 	str.w	r8, [sl], #4
  410d40:	ebc3 0a0a 	rsb	sl, r3, sl
  410d44:	9a04      	ldr	r2, [sp, #16]
  410d46:	ea4f 03aa 	mov.w	r3, sl, asr #2
  410d4a:	6113      	str	r3, [r2, #16]
  410d4c:	015c      	lsls	r4, r3, #5
  410d4e:	f000 fc53 	bl	4115f8 <__hi0bits>
  410d52:	9b02      	ldr	r3, [sp, #8]
  410d54:	1a20      	subs	r0, r4, r0
  410d56:	681e      	ldr	r6, [r3, #0]
  410d58:	42b0      	cmp	r0, r6
  410d5a:	f300 809b 	bgt.w	410e94 <__gethex+0x304>
  410d5e:	f2c0 80c1 	blt.w	410ee4 <__gethex+0x354>
  410d62:	2700      	movs	r7, #0
  410d64:	9b02      	ldr	r3, [sp, #8]
  410d66:	9a01      	ldr	r2, [sp, #4]
  410d68:	689b      	ldr	r3, [r3, #8]
  410d6a:	429a      	cmp	r2, r3
  410d6c:	dc4c      	bgt.n	410e08 <__gethex+0x278>
  410d6e:	9b02      	ldr	r3, [sp, #8]
  410d70:	9a01      	ldr	r2, [sp, #4]
  410d72:	685b      	ldr	r3, [r3, #4]
  410d74:	429a      	cmp	r2, r3
  410d76:	da6d      	bge.n	410e54 <__gethex+0x2c4>
  410d78:	1a9d      	subs	r5, r3, r2
  410d7a:	42ae      	cmp	r6, r5
  410d7c:	f300 80c8 	bgt.w	410f10 <__gethex+0x380>
  410d80:	9a02      	ldr	r2, [sp, #8]
  410d82:	68d2      	ldr	r2, [r2, #12]
  410d84:	2a02      	cmp	r2, #2
  410d86:	f000 814b 	beq.w	411020 <__gethex+0x490>
  410d8a:	2a03      	cmp	r2, #3
  410d8c:	f000 8119 	beq.w	410fc2 <__gethex+0x432>
  410d90:	2a01      	cmp	r2, #1
  410d92:	f000 8136 	beq.w	411002 <__gethex+0x472>
  410d96:	9805      	ldr	r0, [sp, #20]
  410d98:	9904      	ldr	r1, [sp, #16]
  410d9a:	f000 fb97 	bl	4114cc <_Bfree>
  410d9e:	2300      	movs	r3, #0
  410da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410da2:	2050      	movs	r0, #80	; 0x50
  410da4:	6013      	str	r3, [r2, #0]
  410da6:	e743      	b.n	410c30 <__gethex+0xa0>
  410da8:	f8ca 4000 	str.w	r4, [sl]
  410dac:	2400      	movs	r4, #0
  410dae:	f10a 0a04 	add.w	sl, sl, #4
  410db2:	2704      	movs	r7, #4
  410db4:	4622      	mov	r2, r4
  410db6:	e799      	b.n	410cec <__gethex+0x15c>
  410db8:	4620      	mov	r0, r4
  410dba:	9903      	ldr	r1, [sp, #12]
  410dbc:	9a00      	ldr	r2, [sp, #0]
  410dbe:	f001 fa59 	bl	412274 <strncmp>
  410dc2:	b388      	cbz	r0, 410e28 <__gethex+0x298>
  410dc4:	7823      	ldrb	r3, [r4, #0]
  410dc6:	4627      	mov	r7, r4
  410dc8:	2b50      	cmp	r3, #80	; 0x50
  410dca:	f43f af39 	beq.w	410c40 <__gethex+0xb0>
  410dce:	2b70      	cmp	r3, #112	; 0x70
  410dd0:	f43f af36 	beq.w	410c40 <__gethex+0xb0>
  410dd4:	f8c8 7000 	str.w	r7, [r8]
  410dd8:	e725      	b.n	410c26 <__gethex+0x96>
  410dda:	4445      	add	r5, r8
  410ddc:	f1c6 0620 	rsb	r6, r6, #32
  410de0:	f855 0c04 	ldr.w	r0, [r5, #-4]
  410de4:	f000 fc08 	bl	4115f8 <__hi0bits>
  410de8:	42b0      	cmp	r0, r6
  410dea:	f280 80e6 	bge.w	410fba <__gethex+0x42a>
  410dee:	9b01      	ldr	r3, [sp, #4]
  410df0:	2101      	movs	r1, #1
  410df2:	9804      	ldr	r0, [sp, #16]
  410df4:	440b      	add	r3, r1
  410df6:	461c      	mov	r4, r3
  410df8:	9301      	str	r3, [sp, #4]
  410dfa:	f7ff fe79 	bl	410af0 <rshift>
  410dfe:	9b02      	ldr	r3, [sp, #8]
  410e00:	689b      	ldr	r3, [r3, #8]
  410e02:	429c      	cmp	r4, r3
  410e04:	f340 80d9 	ble.w	410fba <__gethex+0x42a>
  410e08:	9805      	ldr	r0, [sp, #20]
  410e0a:	9904      	ldr	r1, [sp, #16]
  410e0c:	f000 fb5e 	bl	4114cc <_Bfree>
  410e10:	2300      	movs	r3, #0
  410e12:	20a3      	movs	r0, #163	; 0xa3
  410e14:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410e16:	6013      	str	r3, [r2, #0]
  410e18:	b00b      	add	sp, #44	; 0x2c
  410e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410e1e:	f04f 0e01 	mov.w	lr, #1
  410e22:	1cb9      	adds	r1, r7, #2
  410e24:	78bb      	ldrb	r3, [r7, #2]
  410e26:	e719      	b.n	410c5c <__gethex+0xcc>
  410e28:	9900      	ldr	r1, [sp, #0]
  410e2a:	5c62      	ldrb	r2, [r4, r1]
  410e2c:	1867      	adds	r7, r4, r1
  410e2e:	5cb3      	ldrb	r3, [r6, r2]
  410e30:	2b00      	cmp	r3, #0
  410e32:	d069      	beq.n	410f08 <__gethex+0x378>
  410e34:	2a30      	cmp	r2, #48	; 0x30
  410e36:	463c      	mov	r4, r7
  410e38:	d104      	bne.n	410e44 <__gethex+0x2b4>
  410e3a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  410e3e:	2b30      	cmp	r3, #48	; 0x30
  410e40:	d0fb      	beq.n	410e3a <__gethex+0x2aa>
  410e42:	5cf3      	ldrb	r3, [r6, r3]
  410e44:	fab3 fa83 	clz	sl, r3
  410e48:	463d      	mov	r5, r7
  410e4a:	f04f 0901 	mov.w	r9, #1
  410e4e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  410e52:	e6ca      	b.n	410bea <__gethex+0x5a>
  410e54:	2401      	movs	r4, #1
  410e56:	b167      	cbz	r7, 410e72 <__gethex+0x2e2>
  410e58:	9b02      	ldr	r3, [sp, #8]
  410e5a:	68db      	ldr	r3, [r3, #12]
  410e5c:	2b02      	cmp	r3, #2
  410e5e:	f000 8085 	beq.w	410f6c <__gethex+0x3dc>
  410e62:	2b03      	cmp	r3, #3
  410e64:	f000 8086 	beq.w	410f74 <__gethex+0x3e4>
  410e68:	2b01      	cmp	r3, #1
  410e6a:	f000 80ba 	beq.w	410fe2 <__gethex+0x452>
  410e6e:	f044 0410 	orr.w	r4, r4, #16
  410e72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410e74:	4620      	mov	r0, r4
  410e76:	461a      	mov	r2, r3
  410e78:	9b04      	ldr	r3, [sp, #16]
  410e7a:	6013      	str	r3, [r2, #0]
  410e7c:	9b07      	ldr	r3, [sp, #28]
  410e7e:	461a      	mov	r2, r3
  410e80:	9b01      	ldr	r3, [sp, #4]
  410e82:	6013      	str	r3, [r2, #0]
  410e84:	b00b      	add	sp, #44	; 0x2c
  410e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410e8a:	f04f 0e00 	mov.w	lr, #0
  410e8e:	e7c8      	b.n	410e22 <__gethex+0x292>
  410e90:	00413d68 	.word	0x00413d68
  410e94:	1b84      	subs	r4, r0, r6
  410e96:	9804      	ldr	r0, [sp, #16]
  410e98:	4621      	mov	r1, r4
  410e9a:	f000 ff31 	bl	411d00 <__any_on>
  410e9e:	2800      	cmp	r0, #0
  410ea0:	d034      	beq.n	410f0c <__gethex+0x37c>
  410ea2:	1e63      	subs	r3, r4, #1
  410ea4:	2701      	movs	r7, #1
  410ea6:	9806      	ldr	r0, [sp, #24]
  410ea8:	115a      	asrs	r2, r3, #5
  410eaa:	f003 011f 	and.w	r1, r3, #31
  410eae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  410eb2:	fa07 f101 	lsl.w	r1, r7, r1
  410eb6:	4211      	tst	r1, r2
  410eb8:	d00a      	beq.n	410ed0 <__gethex+0x340>
  410eba:	42bb      	cmp	r3, r7
  410ebc:	f340 809f 	ble.w	410ffe <__gethex+0x46e>
  410ec0:	9804      	ldr	r0, [sp, #16]
  410ec2:	1ea1      	subs	r1, r4, #2
  410ec4:	f000 ff1c 	bl	411d00 <__any_on>
  410ec8:	2800      	cmp	r0, #0
  410eca:	f000 8098 	beq.w	410ffe <__gethex+0x46e>
  410ece:	2703      	movs	r7, #3
  410ed0:	9b01      	ldr	r3, [sp, #4]
  410ed2:	4621      	mov	r1, r4
  410ed4:	9804      	ldr	r0, [sp, #16]
  410ed6:	4423      	add	r3, r4
  410ed8:	9301      	str	r3, [sp, #4]
  410eda:	f7ff fe09 	bl	410af0 <rshift>
  410ede:	e741      	b.n	410d64 <__gethex+0x1d4>
  410ee0:	9501      	str	r5, [sp, #4]
  410ee2:	e696      	b.n	410c12 <__gethex+0x82>
  410ee4:	1a32      	subs	r2, r6, r0
  410ee6:	9b01      	ldr	r3, [sp, #4]
  410ee8:	9904      	ldr	r1, [sp, #16]
  410eea:	2700      	movs	r7, #0
  410eec:	1a9b      	subs	r3, r3, r2
  410eee:	9805      	ldr	r0, [sp, #20]
  410ef0:	9301      	str	r3, [sp, #4]
  410ef2:	f000 fcd1 	bl	411898 <__lshift>
  410ef6:	4603      	mov	r3, r0
  410ef8:	9004      	str	r0, [sp, #16]
  410efa:	3314      	adds	r3, #20
  410efc:	9306      	str	r3, [sp, #24]
  410efe:	e731      	b.n	410d64 <__gethex+0x1d4>
  410f00:	1c9c      	adds	r4, r3, #2
  410f02:	f04f 0900 	mov.w	r9, #0
  410f06:	e666      	b.n	410bd6 <__gethex+0x46>
  410f08:	4613      	mov	r3, r2
  410f0a:	e75d      	b.n	410dc8 <__gethex+0x238>
  410f0c:	4607      	mov	r7, r0
  410f0e:	e7df      	b.n	410ed0 <__gethex+0x340>
  410f10:	1e6c      	subs	r4, r5, #1
  410f12:	2f00      	cmp	r7, #0
  410f14:	d153      	bne.n	410fbe <__gethex+0x42e>
  410f16:	2c00      	cmp	r4, #0
  410f18:	dd04      	ble.n	410f24 <__gethex+0x394>
  410f1a:	9804      	ldr	r0, [sp, #16]
  410f1c:	4621      	mov	r1, r4
  410f1e:	f000 feef 	bl	411d00 <__any_on>
  410f22:	4607      	mov	r7, r0
  410f24:	1162      	asrs	r2, r4, #5
  410f26:	2301      	movs	r3, #1
  410f28:	f004 041f 	and.w	r4, r4, #31
  410f2c:	9906      	ldr	r1, [sp, #24]
  410f2e:	40a3      	lsls	r3, r4
  410f30:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  410f34:	4213      	tst	r3, r2
  410f36:	d001      	beq.n	410f3c <__gethex+0x3ac>
  410f38:	f047 0702 	orr.w	r7, r7, #2
  410f3c:	4629      	mov	r1, r5
  410f3e:	9804      	ldr	r0, [sp, #16]
  410f40:	f7ff fdd6 	bl	410af0 <rshift>
  410f44:	9b02      	ldr	r3, [sp, #8]
  410f46:	1b76      	subs	r6, r6, r5
  410f48:	2402      	movs	r4, #2
  410f4a:	685b      	ldr	r3, [r3, #4]
  410f4c:	9301      	str	r3, [sp, #4]
  410f4e:	e782      	b.n	410e56 <__gethex+0x2c6>
  410f50:	9a00      	ldr	r2, [sp, #0]
  410f52:	5cbb      	ldrb	r3, [r7, r2]
  410f54:	18bd      	adds	r5, r7, r2
  410f56:	5cf2      	ldrb	r2, [r6, r3]
  410f58:	462f      	mov	r7, r5
  410f5a:	2a00      	cmp	r2, #0
  410f5c:	f43f ae56 	beq.w	410c0c <__gethex+0x7c>
  410f60:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  410f64:	5cf2      	ldrb	r2, [r6, r3]
  410f66:	2a00      	cmp	r2, #0
  410f68:	d1fa      	bne.n	410f60 <__gethex+0x3d0>
  410f6a:	e64f      	b.n	410c0c <__gethex+0x7c>
  410f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  410f6e:	f1c3 0301 	rsb	r3, r3, #1
  410f72:	9315      	str	r3, [sp, #84]	; 0x54
  410f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  410f76:	2b00      	cmp	r3, #0
  410f78:	f43f af79 	beq.w	410e6e <__gethex+0x2de>
  410f7c:	9b04      	ldr	r3, [sp, #16]
  410f7e:	2000      	movs	r0, #0
  410f80:	9a06      	ldr	r2, [sp, #24]
  410f82:	691f      	ldr	r7, [r3, #16]
  410f84:	4613      	mov	r3, r2
  410f86:	00bd      	lsls	r5, r7, #2
  410f88:	1951      	adds	r1, r2, r5
  410f8a:	e003      	b.n	410f94 <__gethex+0x404>
  410f8c:	f843 0b04 	str.w	r0, [r3], #4
  410f90:	4299      	cmp	r1, r3
  410f92:	d949      	bls.n	411028 <__gethex+0x498>
  410f94:	681a      	ldr	r2, [r3, #0]
  410f96:	f1b2 3fff 	cmp.w	r2, #4294967295
  410f9a:	d0f7      	beq.n	410f8c <__gethex+0x3fc>
  410f9c:	3201      	adds	r2, #1
  410f9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  410fa2:	601a      	str	r2, [r3, #0]
  410fa4:	2c02      	cmp	r4, #2
  410fa6:	d04e      	beq.n	411046 <__gethex+0x4b6>
  410fa8:	9b04      	ldr	r3, [sp, #16]
  410faa:	691b      	ldr	r3, [r3, #16]
  410fac:	429f      	cmp	r7, r3
  410fae:	f6ff af1e 	blt.w	410dee <__gethex+0x25e>
  410fb2:	f016 061f 	ands.w	r6, r6, #31
  410fb6:	f47f af10 	bne.w	410dda <__gethex+0x24a>
  410fba:	2421      	movs	r4, #33	; 0x21
  410fbc:	e759      	b.n	410e72 <__gethex+0x2e2>
  410fbe:	2701      	movs	r7, #1
  410fc0:	e7b0      	b.n	410f24 <__gethex+0x394>
  410fc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410fc4:	2a00      	cmp	r2, #0
  410fc6:	f43f aee6 	beq.w	410d96 <__gethex+0x206>
  410fca:	9907      	ldr	r1, [sp, #28]
  410fcc:	2201      	movs	r2, #1
  410fce:	2062      	movs	r0, #98	; 0x62
  410fd0:	600b      	str	r3, [r1, #0]
  410fd2:	9b06      	ldr	r3, [sp, #24]
  410fd4:	9904      	ldr	r1, [sp, #16]
  410fd6:	610a      	str	r2, [r1, #16]
  410fd8:	601a      	str	r2, [r3, #0]
  410fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410fdc:	461a      	mov	r2, r3
  410fde:	6011      	str	r1, [r2, #0]
  410fe0:	e626      	b.n	410c30 <__gethex+0xa0>
  410fe2:	07ba      	lsls	r2, r7, #30
  410fe4:	f57f af43 	bpl.w	410e6e <__gethex+0x2de>
  410fe8:	9b06      	ldr	r3, [sp, #24]
  410fea:	681b      	ldr	r3, [r3, #0]
  410fec:	433b      	orrs	r3, r7
  410fee:	07db      	lsls	r3, r3, #31
  410ff0:	d4c4      	bmi.n	410f7c <__gethex+0x3ec>
  410ff2:	e73c      	b.n	410e6e <__gethex+0x2de>
  410ff4:	f8dd a018 	ldr.w	sl, [sp, #24]
  410ff8:	f04f 0800 	mov.w	r8, #0
  410ffc:	e69c      	b.n	410d38 <__gethex+0x1a8>
  410ffe:	2702      	movs	r7, #2
  411000:	e766      	b.n	410ed0 <__gethex+0x340>
  411002:	42b5      	cmp	r5, r6
  411004:	f47f aec7 	bne.w	410d96 <__gethex+0x206>
  411008:	2e01      	cmp	r6, #1
  41100a:	ddde      	ble.n	410fca <__gethex+0x43a>
  41100c:	1e71      	subs	r1, r6, #1
  41100e:	9804      	ldr	r0, [sp, #16]
  411010:	f000 fe76 	bl	411d00 <__any_on>
  411014:	2800      	cmp	r0, #0
  411016:	f43f aebe 	beq.w	410d96 <__gethex+0x206>
  41101a:	9b02      	ldr	r3, [sp, #8]
  41101c:	685b      	ldr	r3, [r3, #4]
  41101e:	e7d4      	b.n	410fca <__gethex+0x43a>
  411020:	9a15      	ldr	r2, [sp, #84]	; 0x54
  411022:	2a00      	cmp	r2, #0
  411024:	d0d1      	beq.n	410fca <__gethex+0x43a>
  411026:	e6b6      	b.n	410d96 <__gethex+0x206>
  411028:	9b04      	ldr	r3, [sp, #16]
  41102a:	689b      	ldr	r3, [r3, #8]
  41102c:	429f      	cmp	r7, r3
  41102e:	da11      	bge.n	411054 <__gethex+0x4c4>
  411030:	f8dd 8018 	ldr.w	r8, [sp, #24]
  411034:	463b      	mov	r3, r7
  411036:	9804      	ldr	r0, [sp, #16]
  411038:	1c59      	adds	r1, r3, #1
  41103a:	2201      	movs	r2, #1
  41103c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  411040:	6101      	str	r1, [r0, #16]
  411042:	615a      	str	r2, [r3, #20]
  411044:	e7ae      	b.n	410fa4 <__gethex+0x414>
  411046:	9b02      	ldr	r3, [sp, #8]
  411048:	681b      	ldr	r3, [r3, #0]
  41104a:	3b01      	subs	r3, #1
  41104c:	42b3      	cmp	r3, r6
  41104e:	d01e      	beq.n	41108e <__gethex+0x4fe>
  411050:	2422      	movs	r4, #34	; 0x22
  411052:	e70e      	b.n	410e72 <__gethex+0x2e2>
  411054:	9b04      	ldr	r3, [sp, #16]
  411056:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41105a:	6859      	ldr	r1, [r3, #4]
  41105c:	4648      	mov	r0, r9
  41105e:	3101      	adds	r1, #1
  411060:	f000 fa0c 	bl	41147c <_Balloc>
  411064:	9a04      	ldr	r2, [sp, #16]
  411066:	4680      	mov	r8, r0
  411068:	300c      	adds	r0, #12
  41106a:	6913      	ldr	r3, [r2, #16]
  41106c:	f102 010c 	add.w	r1, r2, #12
  411070:	1c9a      	adds	r2, r3, #2
  411072:	0092      	lsls	r2, r2, #2
  411074:	f7fa fbb8 	bl	40b7e8 <memcpy>
  411078:	9904      	ldr	r1, [sp, #16]
  41107a:	4648      	mov	r0, r9
  41107c:	f8cd 8010 	str.w	r8, [sp, #16]
  411080:	f000 fa24 	bl	4114cc <_Bfree>
  411084:	f108 0814 	add.w	r8, r8, #20
  411088:	f858 3c04 	ldr.w	r3, [r8, #-4]
  41108c:	e7d3      	b.n	411036 <__gethex+0x4a6>
  41108e:	1172      	asrs	r2, r6, #5
  411090:	2301      	movs	r3, #1
  411092:	f006 061f 	and.w	r6, r6, #31
  411096:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  41109a:	40b3      	lsls	r3, r6
  41109c:	4213      	tst	r3, r2
  41109e:	bf0c      	ite	eq
  4110a0:	2422      	moveq	r4, #34	; 0x22
  4110a2:	2421      	movne	r4, #33	; 0x21
  4110a4:	e6e5      	b.n	410e72 <__gethex+0x2e2>
  4110a6:	bf00      	nop

004110a8 <__hexnan>:
  4110a8:	680b      	ldr	r3, [r1, #0]
  4110aa:	1159      	asrs	r1, r3, #5
  4110ac:	f013 031f 	ands.w	r3, r3, #31
  4110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4110b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4110b8:	b085      	sub	sp, #20
  4110ba:	9002      	str	r0, [sp, #8]
  4110bc:	9101      	str	r1, [sp, #4]
  4110be:	9303      	str	r3, [sp, #12]
  4110c0:	d002      	beq.n	4110c8 <__hexnan+0x20>
  4110c2:	460b      	mov	r3, r1
  4110c4:	3304      	adds	r3, #4
  4110c6:	9301      	str	r3, [sp, #4]
  4110c8:	9c01      	ldr	r4, [sp, #4]
  4110ca:	2300      	movs	r3, #0
  4110cc:	9902      	ldr	r1, [sp, #8]
  4110ce:	f1a4 0804 	sub.w	r8, r4, #4
  4110d2:	4618      	mov	r0, r3
  4110d4:	469a      	mov	sl, r3
  4110d6:	469c      	mov	ip, r3
  4110d8:	46c6      	mov	lr, r8
  4110da:	4646      	mov	r6, r8
  4110dc:	f8df 9144 	ldr.w	r9, [pc, #324]	; 411224 <__hexnan+0x17c>
  4110e0:	680f      	ldr	r7, [r1, #0]
  4110e2:	f844 3c04 	str.w	r3, [r4, #-4]
  4110e6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  4110ea:	b323      	cbz	r3, 411136 <__hexnan+0x8e>
  4110ec:	f819 1003 	ldrb.w	r1, [r9, r3]
  4110f0:	2900      	cmp	r1, #0
  4110f2:	d155      	bne.n	4111a0 <__hexnan+0xf8>
  4110f4:	2b20      	cmp	r3, #32
  4110f6:	d86f      	bhi.n	4111d8 <__hexnan+0x130>
  4110f8:	45d4      	cmp	ip, sl
  4110fa:	ddf4      	ble.n	4110e6 <__hexnan+0x3e>
  4110fc:	2807      	cmp	r0, #7
  4110fe:	dc13      	bgt.n	411128 <__hexnan+0x80>
  411100:	4576      	cmp	r6, lr
  411102:	d211      	bcs.n	411128 <__hexnan+0x80>
  411104:	f1c0 0008 	rsb	r0, r0, #8
  411108:	6834      	ldr	r4, [r6, #0]
  41110a:	4633      	mov	r3, r6
  41110c:	0080      	lsls	r0, r0, #2
  41110e:	f1c0 0b20 	rsb	fp, r0, #32
  411112:	685d      	ldr	r5, [r3, #4]
  411114:	fa05 f10b 	lsl.w	r1, r5, fp
  411118:	4321      	orrs	r1, r4
  41111a:	fa25 f400 	lsr.w	r4, r5, r0
  41111e:	6019      	str	r1, [r3, #0]
  411120:	f843 4f04 	str.w	r4, [r3, #4]!
  411124:	459e      	cmp	lr, r3
  411126:	d8f4      	bhi.n	411112 <__hexnan+0x6a>
  411128:	4296      	cmp	r6, r2
  41112a:	d84c      	bhi.n	4111c6 <__hexnan+0x11e>
  41112c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  411130:	2008      	movs	r0, #8
  411132:	2b00      	cmp	r3, #0
  411134:	d1da      	bne.n	4110ec <__hexnan+0x44>
  411136:	f1bc 0f00 	cmp.w	ip, #0
  41113a:	d04f      	beq.n	4111dc <__hexnan+0x134>
  41113c:	2807      	cmp	r0, #7
  41113e:	dc13      	bgt.n	411168 <__hexnan+0xc0>
  411140:	4576      	cmp	r6, lr
  411142:	d211      	bcs.n	411168 <__hexnan+0xc0>
  411144:	f1c0 0308 	rsb	r3, r0, #8
  411148:	6834      	ldr	r4, [r6, #0]
  41114a:	4631      	mov	r1, r6
  41114c:	009b      	lsls	r3, r3, #2
  41114e:	f1c3 0720 	rsb	r7, r3, #32
  411152:	684d      	ldr	r5, [r1, #4]
  411154:	fa05 f007 	lsl.w	r0, r5, r7
  411158:	4320      	orrs	r0, r4
  41115a:	fa25 f403 	lsr.w	r4, r5, r3
  41115e:	6008      	str	r0, [r1, #0]
  411160:	f841 4f04 	str.w	r4, [r1, #4]!
  411164:	4571      	cmp	r1, lr
  411166:	d3f4      	bcc.n	411152 <__hexnan+0xaa>
  411168:	42b2      	cmp	r2, r6
  41116a:	d23b      	bcs.n	4111e4 <__hexnan+0x13c>
  41116c:	4613      	mov	r3, r2
  41116e:	f856 1b04 	ldr.w	r1, [r6], #4
  411172:	45b0      	cmp	r8, r6
  411174:	f843 1b04 	str.w	r1, [r3], #4
  411178:	d2f9      	bcs.n	41116e <__hexnan+0xc6>
  41117a:	2100      	movs	r1, #0
  41117c:	f843 1b04 	str.w	r1, [r3], #4
  411180:	4598      	cmp	r8, r3
  411182:	d2fb      	bcs.n	41117c <__hexnan+0xd4>
  411184:	9b01      	ldr	r3, [sp, #4]
  411186:	f853 3c04 	ldr.w	r3, [r3, #-4]
  41118a:	b92b      	cbnz	r3, 411198 <__hexnan+0xf0>
  41118c:	4542      	cmp	r2, r8
  41118e:	d03a      	beq.n	411206 <__hexnan+0x15e>
  411190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  411194:	2b00      	cmp	r3, #0
  411196:	d0f9      	beq.n	41118c <__hexnan+0xe4>
  411198:	2005      	movs	r0, #5
  41119a:	b005      	add	sp, #20
  41119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4111a0:	3001      	adds	r0, #1
  4111a2:	f10c 0c01 	add.w	ip, ip, #1
  4111a6:	2808      	cmp	r0, #8
  4111a8:	dc06      	bgt.n	4111b8 <__hexnan+0x110>
  4111aa:	6833      	ldr	r3, [r6, #0]
  4111ac:	011b      	lsls	r3, r3, #4
  4111ae:	f001 010f 	and.w	r1, r1, #15
  4111b2:	4319      	orrs	r1, r3
  4111b4:	6031      	str	r1, [r6, #0]
  4111b6:	e796      	b.n	4110e6 <__hexnan+0x3e>
  4111b8:	4296      	cmp	r6, r2
  4111ba:	d994      	bls.n	4110e6 <__hexnan+0x3e>
  4111bc:	2300      	movs	r3, #0
  4111be:	3e04      	subs	r6, #4
  4111c0:	2001      	movs	r0, #1
  4111c2:	6033      	str	r3, [r6, #0]
  4111c4:	e7f3      	b.n	4111ae <__hexnan+0x106>
  4111c6:	2300      	movs	r3, #0
  4111c8:	f1a6 0e04 	sub.w	lr, r6, #4
  4111cc:	46e2      	mov	sl, ip
  4111ce:	f846 3c04 	str.w	r3, [r6, #-4]
  4111d2:	4618      	mov	r0, r3
  4111d4:	4676      	mov	r6, lr
  4111d6:	e786      	b.n	4110e6 <__hexnan+0x3e>
  4111d8:	2b29      	cmp	r3, #41	; 0x29
  4111da:	d01b      	beq.n	411214 <__hexnan+0x16c>
  4111dc:	2004      	movs	r0, #4
  4111de:	b005      	add	sp, #20
  4111e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4111e4:	9b03      	ldr	r3, [sp, #12]
  4111e6:	2b00      	cmp	r3, #0
  4111e8:	d0cc      	beq.n	411184 <__hexnan+0xdc>
  4111ea:	9b03      	ldr	r3, [sp, #12]
  4111ec:	f04f 30ff 	mov.w	r0, #4294967295
  4111f0:	9c01      	ldr	r4, [sp, #4]
  4111f2:	f1c3 0320 	rsb	r3, r3, #32
  4111f6:	f854 1c04 	ldr.w	r1, [r4, #-4]
  4111fa:	fa20 f303 	lsr.w	r3, r0, r3
  4111fe:	400b      	ands	r3, r1
  411200:	f844 3c04 	str.w	r3, [r4, #-4]
  411204:	e7c1      	b.n	41118a <__hexnan+0xe2>
  411206:	2301      	movs	r3, #1
  411208:	2005      	movs	r0, #5
  41120a:	f8c8 3000 	str.w	r3, [r8]
  41120e:	b005      	add	sp, #20
  411210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411214:	3701      	adds	r7, #1
  411216:	9b02      	ldr	r3, [sp, #8]
  411218:	601f      	str	r7, [r3, #0]
  41121a:	f1bc 0f00 	cmp.w	ip, #0
  41121e:	d18d      	bne.n	41113c <__hexnan+0x94>
  411220:	e7dc      	b.n	4111dc <__hexnan+0x134>
  411222:	bf00      	nop
  411224:	00413d68 	.word	0x00413d68

00411228 <__locale_charset>:
  411228:	4800      	ldr	r0, [pc, #0]	; (41122c <__locale_charset+0x4>)
  41122a:	4770      	bx	lr
  41122c:	20400928 	.word	0x20400928

00411230 <__locale_mb_cur_max>:
  411230:	4b01      	ldr	r3, [pc, #4]	; (411238 <__locale_mb_cur_max+0x8>)
  411232:	6818      	ldr	r0, [r3, #0]
  411234:	4770      	bx	lr
  411236:	bf00      	nop
  411238:	20400948 	.word	0x20400948

0041123c <_localeconv_r>:
  41123c:	4800      	ldr	r0, [pc, #0]	; (411240 <_localeconv_r+0x4>)
  41123e:	4770      	bx	lr
  411240:	204008f0 	.word	0x204008f0

00411244 <__smakebuf_r>:
  411244:	898b      	ldrh	r3, [r1, #12]
  411246:	b29a      	uxth	r2, r3
  411248:	f012 0f02 	tst.w	r2, #2
  41124c:	d13d      	bne.n	4112ca <__smakebuf_r+0x86>
  41124e:	b5f0      	push	{r4, r5, r6, r7, lr}
  411250:	460c      	mov	r4, r1
  411252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411256:	b091      	sub	sp, #68	; 0x44
  411258:	4605      	mov	r5, r0
  41125a:	2900      	cmp	r1, #0
  41125c:	db19      	blt.n	411292 <__smakebuf_r+0x4e>
  41125e:	aa01      	add	r2, sp, #4
  411260:	f001 fa52 	bl	412708 <_fstat_r>
  411264:	2800      	cmp	r0, #0
  411266:	db12      	blt.n	41128e <__smakebuf_r+0x4a>
  411268:	9b02      	ldr	r3, [sp, #8]
  41126a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  41126e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  411272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  411276:	fab7 f787 	clz	r7, r7
  41127a:	ea4f 1757 	mov.w	r7, r7, lsr #5
  41127e:	d02b      	beq.n	4112d8 <__smakebuf_r+0x94>
  411280:	89a3      	ldrh	r3, [r4, #12]
  411282:	f44f 6680 	mov.w	r6, #1024	; 0x400
  411286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41128a:	81a3      	strh	r3, [r4, #12]
  41128c:	e00c      	b.n	4112a8 <__smakebuf_r+0x64>
  41128e:	89a3      	ldrh	r3, [r4, #12]
  411290:	b29a      	uxth	r2, r3
  411292:	f012 0f80 	tst.w	r2, #128	; 0x80
  411296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  41129a:	f04f 0700 	mov.w	r7, #0
  41129e:	bf0c      	ite	eq
  4112a0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4112a4:	2640      	movne	r6, #64	; 0x40
  4112a6:	81a3      	strh	r3, [r4, #12]
  4112a8:	4628      	mov	r0, r5
  4112aa:	4631      	mov	r1, r6
  4112ac:	f7f9 fff0 	bl	40b290 <_malloc_r>
  4112b0:	89a3      	ldrh	r3, [r4, #12]
  4112b2:	b340      	cbz	r0, 411306 <__smakebuf_r+0xc2>
  4112b4:	4a1a      	ldr	r2, [pc, #104]	; (411320 <__smakebuf_r+0xdc>)
  4112b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4112ba:	63ea      	str	r2, [r5, #60]	; 0x3c
  4112bc:	81a3      	strh	r3, [r4, #12]
  4112be:	6020      	str	r0, [r4, #0]
  4112c0:	6120      	str	r0, [r4, #16]
  4112c2:	6166      	str	r6, [r4, #20]
  4112c4:	b99f      	cbnz	r7, 4112ee <__smakebuf_r+0xaa>
  4112c6:	b011      	add	sp, #68	; 0x44
  4112c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4112ca:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4112ce:	2201      	movs	r2, #1
  4112d0:	600b      	str	r3, [r1, #0]
  4112d2:	610b      	str	r3, [r1, #16]
  4112d4:	614a      	str	r2, [r1, #20]
  4112d6:	4770      	bx	lr
  4112d8:	4b12      	ldr	r3, [pc, #72]	; (411324 <__smakebuf_r+0xe0>)
  4112da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4112dc:	429a      	cmp	r2, r3
  4112de:	d1cf      	bne.n	411280 <__smakebuf_r+0x3c>
  4112e0:	89a3      	ldrh	r3, [r4, #12]
  4112e2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4112e6:	4333      	orrs	r3, r6
  4112e8:	64e6      	str	r6, [r4, #76]	; 0x4c
  4112ea:	81a3      	strh	r3, [r4, #12]
  4112ec:	e7dc      	b.n	4112a8 <__smakebuf_r+0x64>
  4112ee:	4628      	mov	r0, r5
  4112f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4112f4:	f001 fa1c 	bl	412730 <_isatty_r>
  4112f8:	2800      	cmp	r0, #0
  4112fa:	d0e4      	beq.n	4112c6 <__smakebuf_r+0x82>
  4112fc:	89a3      	ldrh	r3, [r4, #12]
  4112fe:	f043 0301 	orr.w	r3, r3, #1
  411302:	81a3      	strh	r3, [r4, #12]
  411304:	e7df      	b.n	4112c6 <__smakebuf_r+0x82>
  411306:	059a      	lsls	r2, r3, #22
  411308:	d4dd      	bmi.n	4112c6 <__smakebuf_r+0x82>
  41130a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41130e:	f043 0302 	orr.w	r3, r3, #2
  411312:	2101      	movs	r1, #1
  411314:	81a3      	strh	r3, [r4, #12]
  411316:	6022      	str	r2, [r4, #0]
  411318:	6122      	str	r2, [r4, #16]
  41131a:	6161      	str	r1, [r4, #20]
  41131c:	e7d3      	b.n	4112c6 <__smakebuf_r+0x82>
  41131e:	bf00      	nop
  411320:	00410315 	.word	0x00410315
  411324:	00412249 	.word	0x00412249

00411328 <memchr>:
  411328:	0783      	lsls	r3, r0, #30
  41132a:	b2c9      	uxtb	r1, r1
  41132c:	b470      	push	{r4, r5, r6}
  41132e:	d03f      	beq.n	4113b0 <memchr+0x88>
  411330:	1e54      	subs	r4, r2, #1
  411332:	2a00      	cmp	r2, #0
  411334:	d03e      	beq.n	4113b4 <memchr+0x8c>
  411336:	7803      	ldrb	r3, [r0, #0]
  411338:	428b      	cmp	r3, r1
  41133a:	bf18      	it	ne
  41133c:	1c43      	addne	r3, r0, #1
  41133e:	d105      	bne.n	41134c <memchr+0x24>
  411340:	e01c      	b.n	41137c <memchr+0x54>
  411342:	b1ec      	cbz	r4, 411380 <memchr+0x58>
  411344:	7802      	ldrb	r2, [r0, #0]
  411346:	3c01      	subs	r4, #1
  411348:	428a      	cmp	r2, r1
  41134a:	d017      	beq.n	41137c <memchr+0x54>
  41134c:	f013 0f03 	tst.w	r3, #3
  411350:	4618      	mov	r0, r3
  411352:	f103 0301 	add.w	r3, r3, #1
  411356:	d1f4      	bne.n	411342 <memchr+0x1a>
  411358:	2c03      	cmp	r4, #3
  41135a:	d814      	bhi.n	411386 <memchr+0x5e>
  41135c:	b184      	cbz	r4, 411380 <memchr+0x58>
  41135e:	7803      	ldrb	r3, [r0, #0]
  411360:	428b      	cmp	r3, r1
  411362:	d00b      	beq.n	41137c <memchr+0x54>
  411364:	1905      	adds	r5, r0, r4
  411366:	1c43      	adds	r3, r0, #1
  411368:	e002      	b.n	411370 <memchr+0x48>
  41136a:	7802      	ldrb	r2, [r0, #0]
  41136c:	428a      	cmp	r2, r1
  41136e:	d005      	beq.n	41137c <memchr+0x54>
  411370:	42ab      	cmp	r3, r5
  411372:	4618      	mov	r0, r3
  411374:	f103 0301 	add.w	r3, r3, #1
  411378:	d1f7      	bne.n	41136a <memchr+0x42>
  41137a:	2000      	movs	r0, #0
  41137c:	bc70      	pop	{r4, r5, r6}
  41137e:	4770      	bx	lr
  411380:	4620      	mov	r0, r4
  411382:	bc70      	pop	{r4, r5, r6}
  411384:	4770      	bx	lr
  411386:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  41138a:	4602      	mov	r2, r0
  41138c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  411390:	4610      	mov	r0, r2
  411392:	3204      	adds	r2, #4
  411394:	6803      	ldr	r3, [r0, #0]
  411396:	4073      	eors	r3, r6
  411398:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  41139c:	ea25 0303 	bic.w	r3, r5, r3
  4113a0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4113a4:	d1da      	bne.n	41135c <memchr+0x34>
  4113a6:	3c04      	subs	r4, #4
  4113a8:	4610      	mov	r0, r2
  4113aa:	2c03      	cmp	r4, #3
  4113ac:	d8f0      	bhi.n	411390 <memchr+0x68>
  4113ae:	e7d5      	b.n	41135c <memchr+0x34>
  4113b0:	4614      	mov	r4, r2
  4113b2:	e7d1      	b.n	411358 <memchr+0x30>
  4113b4:	4610      	mov	r0, r2
  4113b6:	e7e1      	b.n	41137c <memchr+0x54>

004113b8 <memmove>:
  4113b8:	4288      	cmp	r0, r1
  4113ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  4113bc:	d90d      	bls.n	4113da <memmove+0x22>
  4113be:	188b      	adds	r3, r1, r2
  4113c0:	4298      	cmp	r0, r3
  4113c2:	d20a      	bcs.n	4113da <memmove+0x22>
  4113c4:	1881      	adds	r1, r0, r2
  4113c6:	2a00      	cmp	r2, #0
  4113c8:	d053      	beq.n	411472 <memmove+0xba>
  4113ca:	1a9a      	subs	r2, r3, r2
  4113cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4113d0:	4293      	cmp	r3, r2
  4113d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4113d6:	d1f9      	bne.n	4113cc <memmove+0x14>
  4113d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4113da:	2a0f      	cmp	r2, #15
  4113dc:	d947      	bls.n	41146e <memmove+0xb6>
  4113de:	ea40 0301 	orr.w	r3, r0, r1
  4113e2:	079b      	lsls	r3, r3, #30
  4113e4:	d146      	bne.n	411474 <memmove+0xbc>
  4113e6:	f100 0410 	add.w	r4, r0, #16
  4113ea:	f101 0310 	add.w	r3, r1, #16
  4113ee:	4615      	mov	r5, r2
  4113f0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4113f4:	3d10      	subs	r5, #16
  4113f6:	3310      	adds	r3, #16
  4113f8:	3410      	adds	r4, #16
  4113fa:	f844 6c20 	str.w	r6, [r4, #-32]
  4113fe:	2d0f      	cmp	r5, #15
  411400:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  411404:	f844 6c1c 	str.w	r6, [r4, #-28]
  411408:	f853 6c18 	ldr.w	r6, [r3, #-24]
  41140c:	f844 6c18 	str.w	r6, [r4, #-24]
  411410:	f853 6c14 	ldr.w	r6, [r3, #-20]
  411414:	f844 6c14 	str.w	r6, [r4, #-20]
  411418:	d8ea      	bhi.n	4113f0 <memmove+0x38>
  41141a:	f1a2 0310 	sub.w	r3, r2, #16
  41141e:	f002 0e0f 	and.w	lr, r2, #15
  411422:	f023 030f 	bic.w	r3, r3, #15
  411426:	f1be 0f03 	cmp.w	lr, #3
  41142a:	f103 0310 	add.w	r3, r3, #16
  41142e:	4419      	add	r1, r3
  411430:	4403      	add	r3, r0
  411432:	d921      	bls.n	411478 <memmove+0xc0>
  411434:	1f1e      	subs	r6, r3, #4
  411436:	460d      	mov	r5, r1
  411438:	4674      	mov	r4, lr
  41143a:	3c04      	subs	r4, #4
  41143c:	f855 7b04 	ldr.w	r7, [r5], #4
  411440:	2c03      	cmp	r4, #3
  411442:	f846 7f04 	str.w	r7, [r6, #4]!
  411446:	d8f8      	bhi.n	41143a <memmove+0x82>
  411448:	f1ae 0404 	sub.w	r4, lr, #4
  41144c:	f002 0203 	and.w	r2, r2, #3
  411450:	f024 0403 	bic.w	r4, r4, #3
  411454:	3404      	adds	r4, #4
  411456:	4423      	add	r3, r4
  411458:	4421      	add	r1, r4
  41145a:	b152      	cbz	r2, 411472 <memmove+0xba>
  41145c:	3b01      	subs	r3, #1
  41145e:	440a      	add	r2, r1
  411460:	f811 4b01 	ldrb.w	r4, [r1], #1
  411464:	4291      	cmp	r1, r2
  411466:	f803 4f01 	strb.w	r4, [r3, #1]!
  41146a:	d1f9      	bne.n	411460 <memmove+0xa8>
  41146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41146e:	4603      	mov	r3, r0
  411470:	e7f3      	b.n	41145a <memmove+0xa2>
  411472:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411474:	4603      	mov	r3, r0
  411476:	e7f1      	b.n	41145c <memmove+0xa4>
  411478:	4672      	mov	r2, lr
  41147a:	e7ee      	b.n	41145a <memmove+0xa2>

0041147c <_Balloc>:
  41147c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  41147e:	b538      	push	{r3, r4, r5, lr}
  411480:	4605      	mov	r5, r0
  411482:	460c      	mov	r4, r1
  411484:	b152      	cbz	r2, 41149c <_Balloc+0x20>
  411486:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  41148a:	b18b      	cbz	r3, 4114b0 <_Balloc+0x34>
  41148c:	6819      	ldr	r1, [r3, #0]
  41148e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  411492:	2200      	movs	r2, #0
  411494:	4618      	mov	r0, r3
  411496:	611a      	str	r2, [r3, #16]
  411498:	60da      	str	r2, [r3, #12]
  41149a:	bd38      	pop	{r3, r4, r5, pc}
  41149c:	2221      	movs	r2, #33	; 0x21
  41149e:	2104      	movs	r1, #4
  4114a0:	f001 f8ae 	bl	412600 <_calloc_r>
  4114a4:	64e8      	str	r0, [r5, #76]	; 0x4c
  4114a6:	4602      	mov	r2, r0
  4114a8:	2800      	cmp	r0, #0
  4114aa:	d1ec      	bne.n	411486 <_Balloc+0xa>
  4114ac:	2000      	movs	r0, #0
  4114ae:	bd38      	pop	{r3, r4, r5, pc}
  4114b0:	2101      	movs	r1, #1
  4114b2:	4628      	mov	r0, r5
  4114b4:	fa01 f504 	lsl.w	r5, r1, r4
  4114b8:	1d6a      	adds	r2, r5, #5
  4114ba:	0092      	lsls	r2, r2, #2
  4114bc:	f001 f8a0 	bl	412600 <_calloc_r>
  4114c0:	4603      	mov	r3, r0
  4114c2:	2800      	cmp	r0, #0
  4114c4:	d0f2      	beq.n	4114ac <_Balloc+0x30>
  4114c6:	6044      	str	r4, [r0, #4]
  4114c8:	6085      	str	r5, [r0, #8]
  4114ca:	e7e2      	b.n	411492 <_Balloc+0x16>

004114cc <_Bfree>:
  4114cc:	b131      	cbz	r1, 4114dc <_Bfree+0x10>
  4114ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4114d0:	684a      	ldr	r2, [r1, #4]
  4114d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4114d6:	6008      	str	r0, [r1, #0]
  4114d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4114dc:	4770      	bx	lr
  4114de:	bf00      	nop

004114e0 <__multadd>:
  4114e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4114e2:	460c      	mov	r4, r1
  4114e4:	b083      	sub	sp, #12
  4114e6:	4605      	mov	r5, r0
  4114e8:	690e      	ldr	r6, [r1, #16]
  4114ea:	f101 0e14 	add.w	lr, r1, #20
  4114ee:	2700      	movs	r7, #0
  4114f0:	f8de 1000 	ldr.w	r1, [lr]
  4114f4:	3701      	adds	r7, #1
  4114f6:	b288      	uxth	r0, r1
  4114f8:	42be      	cmp	r6, r7
  4114fa:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4114fe:	fb02 3300 	mla	r3, r2, r0, r3
  411502:	fb02 f101 	mul.w	r1, r2, r1
  411506:	b298      	uxth	r0, r3
  411508:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  41150c:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  411510:	ea4f 4313 	mov.w	r3, r3, lsr #16
  411514:	f84e 1b04 	str.w	r1, [lr], #4
  411518:	dcea      	bgt.n	4114f0 <__multadd+0x10>
  41151a:	b13b      	cbz	r3, 41152c <__multadd+0x4c>
  41151c:	68a2      	ldr	r2, [r4, #8]
  41151e:	4296      	cmp	r6, r2
  411520:	da07      	bge.n	411532 <__multadd+0x52>
  411522:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  411526:	3601      	adds	r6, #1
  411528:	6153      	str	r3, [r2, #20]
  41152a:	6126      	str	r6, [r4, #16]
  41152c:	4620      	mov	r0, r4
  41152e:	b003      	add	sp, #12
  411530:	bdf0      	pop	{r4, r5, r6, r7, pc}
  411532:	6861      	ldr	r1, [r4, #4]
  411534:	4628      	mov	r0, r5
  411536:	9301      	str	r3, [sp, #4]
  411538:	3101      	adds	r1, #1
  41153a:	f7ff ff9f 	bl	41147c <_Balloc>
  41153e:	6922      	ldr	r2, [r4, #16]
  411540:	f104 010c 	add.w	r1, r4, #12
  411544:	4607      	mov	r7, r0
  411546:	3202      	adds	r2, #2
  411548:	300c      	adds	r0, #12
  41154a:	0092      	lsls	r2, r2, #2
  41154c:	f7fa f94c 	bl	40b7e8 <memcpy>
  411550:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  411552:	6861      	ldr	r1, [r4, #4]
  411554:	9b01      	ldr	r3, [sp, #4]
  411556:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41155a:	6020      	str	r0, [r4, #0]
  41155c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  411560:	463c      	mov	r4, r7
  411562:	e7de      	b.n	411522 <__multadd+0x42>

00411564 <__s2b>:
  411564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411568:	461f      	mov	r7, r3
  41156a:	4d22      	ldr	r5, [pc, #136]	; (4115f4 <__s2b+0x90>)
  41156c:	3308      	adds	r3, #8
  41156e:	460c      	mov	r4, r1
  411570:	4690      	mov	r8, r2
  411572:	4606      	mov	r6, r0
  411574:	fb85 1203 	smull	r1, r2, r5, r3
  411578:	17db      	asrs	r3, r3, #31
  41157a:	ebc3 0262 	rsb	r2, r3, r2, asr #1
  41157e:	2a01      	cmp	r2, #1
  411580:	dd35      	ble.n	4115ee <__s2b+0x8a>
  411582:	2301      	movs	r3, #1
  411584:	2100      	movs	r1, #0
  411586:	005b      	lsls	r3, r3, #1
  411588:	3101      	adds	r1, #1
  41158a:	429a      	cmp	r2, r3
  41158c:	dcfb      	bgt.n	411586 <__s2b+0x22>
  41158e:	4630      	mov	r0, r6
  411590:	f7ff ff74 	bl	41147c <_Balloc>
  411594:	2301      	movs	r3, #1
  411596:	9a08      	ldr	r2, [sp, #32]
  411598:	f1b8 0f09 	cmp.w	r8, #9
  41159c:	6103      	str	r3, [r0, #16]
  41159e:	6142      	str	r2, [r0, #20]
  4115a0:	dd21      	ble.n	4115e6 <__s2b+0x82>
  4115a2:	f104 0909 	add.w	r9, r4, #9
  4115a6:	4444      	add	r4, r8
  4115a8:	464d      	mov	r5, r9
  4115aa:	f815 3b01 	ldrb.w	r3, [r5], #1
  4115ae:	4601      	mov	r1, r0
  4115b0:	220a      	movs	r2, #10
  4115b2:	4630      	mov	r0, r6
  4115b4:	3b30      	subs	r3, #48	; 0x30
  4115b6:	f7ff ff93 	bl	4114e0 <__multadd>
  4115ba:	42a5      	cmp	r5, r4
  4115bc:	d1f5      	bne.n	4115aa <__s2b+0x46>
  4115be:	eb09 0408 	add.w	r4, r9, r8
  4115c2:	3c08      	subs	r4, #8
  4115c4:	4547      	cmp	r7, r8
  4115c6:	dd0c      	ble.n	4115e2 <__s2b+0x7e>
  4115c8:	ebc8 0707 	rsb	r7, r8, r7
  4115cc:	4427      	add	r7, r4
  4115ce:	f814 3b01 	ldrb.w	r3, [r4], #1
  4115d2:	4601      	mov	r1, r0
  4115d4:	220a      	movs	r2, #10
  4115d6:	4630      	mov	r0, r6
  4115d8:	3b30      	subs	r3, #48	; 0x30
  4115da:	f7ff ff81 	bl	4114e0 <__multadd>
  4115de:	42bc      	cmp	r4, r7
  4115e0:	d1f5      	bne.n	4115ce <__s2b+0x6a>
  4115e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4115e6:	340a      	adds	r4, #10
  4115e8:	f04f 0809 	mov.w	r8, #9
  4115ec:	e7ea      	b.n	4115c4 <__s2b+0x60>
  4115ee:	2100      	movs	r1, #0
  4115f0:	e7cd      	b.n	41158e <__s2b+0x2a>
  4115f2:	bf00      	nop
  4115f4:	38e38e39 	.word	0x38e38e39

004115f8 <__hi0bits>:
  4115f8:	4b0f      	ldr	r3, [pc, #60]	; (411638 <__hi0bits+0x40>)
  4115fa:	4003      	ands	r3, r0
  4115fc:	b9b3      	cbnz	r3, 41162c <__hi0bits+0x34>
  4115fe:	0400      	lsls	r0, r0, #16
  411600:	2310      	movs	r3, #16
  411602:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  411606:	d101      	bne.n	41160c <__hi0bits+0x14>
  411608:	3308      	adds	r3, #8
  41160a:	0200      	lsls	r0, r0, #8
  41160c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  411610:	d101      	bne.n	411616 <__hi0bits+0x1e>
  411612:	3304      	adds	r3, #4
  411614:	0100      	lsls	r0, r0, #4
  411616:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  41161a:	d101      	bne.n	411620 <__hi0bits+0x28>
  41161c:	3302      	adds	r3, #2
  41161e:	0080      	lsls	r0, r0, #2
  411620:	2800      	cmp	r0, #0
  411622:	db07      	blt.n	411634 <__hi0bits+0x3c>
  411624:	0042      	lsls	r2, r0, #1
  411626:	d403      	bmi.n	411630 <__hi0bits+0x38>
  411628:	2020      	movs	r0, #32
  41162a:	4770      	bx	lr
  41162c:	2300      	movs	r3, #0
  41162e:	e7e8      	b.n	411602 <__hi0bits+0xa>
  411630:	1c58      	adds	r0, r3, #1
  411632:	4770      	bx	lr
  411634:	4618      	mov	r0, r3
  411636:	4770      	bx	lr
  411638:	ffff0000 	.word	0xffff0000

0041163c <__lo0bits>:
  41163c:	6803      	ldr	r3, [r0, #0]
  41163e:	f013 0207 	ands.w	r2, r3, #7
  411642:	d008      	beq.n	411656 <__lo0bits+0x1a>
  411644:	07d9      	lsls	r1, r3, #31
  411646:	d422      	bmi.n	41168e <__lo0bits+0x52>
  411648:	079a      	lsls	r2, r3, #30
  41164a:	d423      	bmi.n	411694 <__lo0bits+0x58>
  41164c:	089b      	lsrs	r3, r3, #2
  41164e:	2202      	movs	r2, #2
  411650:	6003      	str	r3, [r0, #0]
  411652:	4610      	mov	r0, r2
  411654:	4770      	bx	lr
  411656:	b299      	uxth	r1, r3
  411658:	b909      	cbnz	r1, 41165e <__lo0bits+0x22>
  41165a:	0c1b      	lsrs	r3, r3, #16
  41165c:	2210      	movs	r2, #16
  41165e:	f013 0fff 	tst.w	r3, #255	; 0xff
  411662:	d101      	bne.n	411668 <__lo0bits+0x2c>
  411664:	3208      	adds	r2, #8
  411666:	0a1b      	lsrs	r3, r3, #8
  411668:	0719      	lsls	r1, r3, #28
  41166a:	d101      	bne.n	411670 <__lo0bits+0x34>
  41166c:	3204      	adds	r2, #4
  41166e:	091b      	lsrs	r3, r3, #4
  411670:	0799      	lsls	r1, r3, #30
  411672:	d101      	bne.n	411678 <__lo0bits+0x3c>
  411674:	3202      	adds	r2, #2
  411676:	089b      	lsrs	r3, r3, #2
  411678:	07d9      	lsls	r1, r3, #31
  41167a:	d405      	bmi.n	411688 <__lo0bits+0x4c>
  41167c:	085b      	lsrs	r3, r3, #1
  41167e:	d102      	bne.n	411686 <__lo0bits+0x4a>
  411680:	2220      	movs	r2, #32
  411682:	4610      	mov	r0, r2
  411684:	4770      	bx	lr
  411686:	3201      	adds	r2, #1
  411688:	6003      	str	r3, [r0, #0]
  41168a:	4610      	mov	r0, r2
  41168c:	4770      	bx	lr
  41168e:	2200      	movs	r2, #0
  411690:	4610      	mov	r0, r2
  411692:	4770      	bx	lr
  411694:	085b      	lsrs	r3, r3, #1
  411696:	2201      	movs	r2, #1
  411698:	6003      	str	r3, [r0, #0]
  41169a:	4610      	mov	r0, r2
  41169c:	4770      	bx	lr
  41169e:	bf00      	nop

004116a0 <__i2b>:
  4116a0:	b510      	push	{r4, lr}
  4116a2:	460c      	mov	r4, r1
  4116a4:	2101      	movs	r1, #1
  4116a6:	f7ff fee9 	bl	41147c <_Balloc>
  4116aa:	2201      	movs	r2, #1
  4116ac:	6144      	str	r4, [r0, #20]
  4116ae:	6102      	str	r2, [r0, #16]
  4116b0:	bd10      	pop	{r4, pc}
  4116b2:	bf00      	nop

004116b4 <__multiply>:
  4116b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4116b8:	690e      	ldr	r6, [r1, #16]
  4116ba:	b085      	sub	sp, #20
  4116bc:	6915      	ldr	r5, [r2, #16]
  4116be:	460c      	mov	r4, r1
  4116c0:	4691      	mov	r9, r2
  4116c2:	42ae      	cmp	r6, r5
  4116c4:	f2c0 8094 	blt.w	4117f0 <__multiply+0x13c>
  4116c8:	462b      	mov	r3, r5
  4116ca:	4635      	mov	r5, r6
  4116cc:	461e      	mov	r6, r3
  4116ce:	eb05 0806 	add.w	r8, r5, r6
  4116d2:	68a3      	ldr	r3, [r4, #8]
  4116d4:	6861      	ldr	r1, [r4, #4]
  4116d6:	4598      	cmp	r8, r3
  4116d8:	dd00      	ble.n	4116dc <__multiply+0x28>
  4116da:	3101      	adds	r1, #1
  4116dc:	f7ff fece 	bl	41147c <_Balloc>
  4116e0:	f100 0a14 	add.w	sl, r0, #20
  4116e4:	9001      	str	r0, [sp, #4]
  4116e6:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  4116ea:	45da      	cmp	sl, fp
  4116ec:	d205      	bcs.n	4116fa <__multiply+0x46>
  4116ee:	4653      	mov	r3, sl
  4116f0:	2100      	movs	r1, #0
  4116f2:	f843 1b04 	str.w	r1, [r3], #4
  4116f6:	459b      	cmp	fp, r3
  4116f8:	d8fb      	bhi.n	4116f2 <__multiply+0x3e>
  4116fa:	f109 0914 	add.w	r9, r9, #20
  4116fe:	f104 0314 	add.w	r3, r4, #20
  411702:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  411706:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  41170a:	4591      	cmp	r9, r2
  41170c:	d25b      	bcs.n	4117c6 <__multiply+0x112>
  41170e:	f8cd b008 	str.w	fp, [sp, #8]
  411712:	4693      	mov	fp, r2
  411714:	f8cd 800c 	str.w	r8, [sp, #12]
  411718:	4698      	mov	r8, r3
  41171a:	f859 6b04 	ldr.w	r6, [r9], #4
  41171e:	fa1f fe86 	uxth.w	lr, r6
  411722:	f1be 0f00 	cmp.w	lr, #0
  411726:	d021      	beq.n	41176c <__multiply+0xb8>
  411728:	4647      	mov	r7, r8
  41172a:	4656      	mov	r6, sl
  41172c:	2100      	movs	r1, #0
  41172e:	e000      	b.n	411732 <__multiply+0x7e>
  411730:	4626      	mov	r6, r4
  411732:	f857 2b04 	ldr.w	r2, [r7], #4
  411736:	4634      	mov	r4, r6
  411738:	6835      	ldr	r5, [r6, #0]
  41173a:	b290      	uxth	r0, r2
  41173c:	45bc      	cmp	ip, r7
  41173e:	b2ab      	uxth	r3, r5
  411740:	ea4f 4212 	mov.w	r2, r2, lsr #16
  411744:	fb0e 3000 	mla	r0, lr, r0, r3
  411748:	ea4f 4315 	mov.w	r3, r5, lsr #16
  41174c:	4401      	add	r1, r0
  41174e:	fb0e 3302 	mla	r3, lr, r2, r3
  411752:	b28a      	uxth	r2, r1
  411754:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  411758:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  41175c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  411760:	f844 3b04 	str.w	r3, [r4], #4
  411764:	d8e4      	bhi.n	411730 <__multiply+0x7c>
  411766:	6071      	str	r1, [r6, #4]
  411768:	f859 6c04 	ldr.w	r6, [r9, #-4]
  41176c:	0c36      	lsrs	r6, r6, #16
  41176e:	d022      	beq.n	4117b6 <__multiply+0x102>
  411770:	f8da 3000 	ldr.w	r3, [sl]
  411774:	2700      	movs	r7, #0
  411776:	4655      	mov	r5, sl
  411778:	4640      	mov	r0, r8
  41177a:	461a      	mov	r2, r3
  41177c:	46be      	mov	lr, r7
  41177e:	e000      	b.n	411782 <__multiply+0xce>
  411780:	4625      	mov	r5, r4
  411782:	8807      	ldrh	r7, [r0, #0]
  411784:	0c12      	lsrs	r2, r2, #16
  411786:	b299      	uxth	r1, r3
  411788:	462c      	mov	r4, r5
  41178a:	fb06 2207 	mla	r2, r6, r7, r2
  41178e:	eb02 070e 	add.w	r7, r2, lr
  411792:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  411796:	f844 3b04 	str.w	r3, [r4], #4
  41179a:	f850 1b04 	ldr.w	r1, [r0], #4
  41179e:	686a      	ldr	r2, [r5, #4]
  4117a0:	0c09      	lsrs	r1, r1, #16
  4117a2:	4584      	cmp	ip, r0
  4117a4:	b293      	uxth	r3, r2
  4117a6:	fb06 3101 	mla	r1, r6, r1, r3
  4117aa:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  4117ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4117b2:	d8e5      	bhi.n	411780 <__multiply+0xcc>
  4117b4:	606b      	str	r3, [r5, #4]
  4117b6:	45cb      	cmp	fp, r9
  4117b8:	f10a 0a04 	add.w	sl, sl, #4
  4117bc:	d8ad      	bhi.n	41171a <__multiply+0x66>
  4117be:	f8dd b008 	ldr.w	fp, [sp, #8]
  4117c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4117c6:	f1b8 0f00 	cmp.w	r8, #0
  4117ca:	dd0b      	ble.n	4117e4 <__multiply+0x130>
  4117cc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  4117d0:	f1ab 0b04 	sub.w	fp, fp, #4
  4117d4:	b11b      	cbz	r3, 4117de <__multiply+0x12a>
  4117d6:	e005      	b.n	4117e4 <__multiply+0x130>
  4117d8:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  4117dc:	b913      	cbnz	r3, 4117e4 <__multiply+0x130>
  4117de:	f1b8 0801 	subs.w	r8, r8, #1
  4117e2:	d1f9      	bne.n	4117d8 <__multiply+0x124>
  4117e4:	9801      	ldr	r0, [sp, #4]
  4117e6:	f8c0 8010 	str.w	r8, [r0, #16]
  4117ea:	b005      	add	sp, #20
  4117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4117f0:	4614      	mov	r4, r2
  4117f2:	4689      	mov	r9, r1
  4117f4:	e76b      	b.n	4116ce <__multiply+0x1a>
  4117f6:	bf00      	nop

004117f8 <__pow5mult>:
  4117f8:	f012 0303 	ands.w	r3, r2, #3
  4117fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411800:	4614      	mov	r4, r2
  411802:	4607      	mov	r7, r0
  411804:	460e      	mov	r6, r1
  411806:	d12d      	bne.n	411864 <__pow5mult+0x6c>
  411808:	10a4      	asrs	r4, r4, #2
  41180a:	d01c      	beq.n	411846 <__pow5mult+0x4e>
  41180c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  41180e:	b395      	cbz	r5, 411876 <__pow5mult+0x7e>
  411810:	07e3      	lsls	r3, r4, #31
  411812:	f04f 0800 	mov.w	r8, #0
  411816:	d406      	bmi.n	411826 <__pow5mult+0x2e>
  411818:	1064      	asrs	r4, r4, #1
  41181a:	d014      	beq.n	411846 <__pow5mult+0x4e>
  41181c:	6828      	ldr	r0, [r5, #0]
  41181e:	b1a8      	cbz	r0, 41184c <__pow5mult+0x54>
  411820:	4605      	mov	r5, r0
  411822:	07e3      	lsls	r3, r4, #31
  411824:	d5f8      	bpl.n	411818 <__pow5mult+0x20>
  411826:	4638      	mov	r0, r7
  411828:	4631      	mov	r1, r6
  41182a:	462a      	mov	r2, r5
  41182c:	f7ff ff42 	bl	4116b4 <__multiply>
  411830:	b1b6      	cbz	r6, 411860 <__pow5mult+0x68>
  411832:	6872      	ldr	r2, [r6, #4]
  411834:	1064      	asrs	r4, r4, #1
  411836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  411838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  41183c:	6031      	str	r1, [r6, #0]
  41183e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  411842:	4606      	mov	r6, r0
  411844:	d1ea      	bne.n	41181c <__pow5mult+0x24>
  411846:	4630      	mov	r0, r6
  411848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41184c:	4629      	mov	r1, r5
  41184e:	462a      	mov	r2, r5
  411850:	4638      	mov	r0, r7
  411852:	f7ff ff2f 	bl	4116b4 <__multiply>
  411856:	6028      	str	r0, [r5, #0]
  411858:	f8c0 8000 	str.w	r8, [r0]
  41185c:	4605      	mov	r5, r0
  41185e:	e7e0      	b.n	411822 <__pow5mult+0x2a>
  411860:	4606      	mov	r6, r0
  411862:	e7d9      	b.n	411818 <__pow5mult+0x20>
  411864:	1e5a      	subs	r2, r3, #1
  411866:	4d0b      	ldr	r5, [pc, #44]	; (411894 <__pow5mult+0x9c>)
  411868:	2300      	movs	r3, #0
  41186a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  41186e:	f7ff fe37 	bl	4114e0 <__multadd>
  411872:	4606      	mov	r6, r0
  411874:	e7c8      	b.n	411808 <__pow5mult+0x10>
  411876:	2101      	movs	r1, #1
  411878:	4638      	mov	r0, r7
  41187a:	f7ff fdff 	bl	41147c <_Balloc>
  41187e:	f240 2171 	movw	r1, #625	; 0x271
  411882:	2201      	movs	r2, #1
  411884:	2300      	movs	r3, #0
  411886:	6141      	str	r1, [r0, #20]
  411888:	4605      	mov	r5, r0
  41188a:	6102      	str	r2, [r0, #16]
  41188c:	64b8      	str	r0, [r7, #72]	; 0x48
  41188e:	6003      	str	r3, [r0, #0]
  411890:	e7be      	b.n	411810 <__pow5mult+0x18>
  411892:	bf00      	nop
  411894:	00413f40 	.word	0x00413f40

00411898 <__lshift>:
  411898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41189c:	690e      	ldr	r6, [r1, #16]
  41189e:	ea4f 1962 	mov.w	r9, r2, asr #5
  4118a2:	688b      	ldr	r3, [r1, #8]
  4118a4:	460d      	mov	r5, r1
  4118a6:	444e      	add	r6, r9
  4118a8:	4690      	mov	r8, r2
  4118aa:	4607      	mov	r7, r0
  4118ac:	6849      	ldr	r1, [r1, #4]
  4118ae:	1c74      	adds	r4, r6, #1
  4118b0:	429c      	cmp	r4, r3
  4118b2:	dd03      	ble.n	4118bc <__lshift+0x24>
  4118b4:	005b      	lsls	r3, r3, #1
  4118b6:	3101      	adds	r1, #1
  4118b8:	429c      	cmp	r4, r3
  4118ba:	dcfb      	bgt.n	4118b4 <__lshift+0x1c>
  4118bc:	4638      	mov	r0, r7
  4118be:	f7ff fddd 	bl	41147c <_Balloc>
  4118c2:	f1b9 0f00 	cmp.w	r9, #0
  4118c6:	4684      	mov	ip, r0
  4118c8:	f100 0114 	add.w	r1, r0, #20
  4118cc:	dd09      	ble.n	4118e2 <__lshift+0x4a>
  4118ce:	2300      	movs	r3, #0
  4118d0:	460a      	mov	r2, r1
  4118d2:	4618      	mov	r0, r3
  4118d4:	3301      	adds	r3, #1
  4118d6:	f842 0b04 	str.w	r0, [r2], #4
  4118da:	454b      	cmp	r3, r9
  4118dc:	d1fa      	bne.n	4118d4 <__lshift+0x3c>
  4118de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4118e2:	692a      	ldr	r2, [r5, #16]
  4118e4:	f105 0314 	add.w	r3, r5, #20
  4118e8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  4118ec:	f018 021f 	ands.w	r2, r8, #31
  4118f0:	d023      	beq.n	41193a <__lshift+0xa2>
  4118f2:	f1c2 0920 	rsb	r9, r2, #32
  4118f6:	f04f 0a00 	mov.w	sl, #0
  4118fa:	6818      	ldr	r0, [r3, #0]
  4118fc:	4688      	mov	r8, r1
  4118fe:	4090      	lsls	r0, r2
  411900:	ea4a 0000 	orr.w	r0, sl, r0
  411904:	f841 0b04 	str.w	r0, [r1], #4
  411908:	f853 0b04 	ldr.w	r0, [r3], #4
  41190c:	459e      	cmp	lr, r3
  41190e:	fa20 fa09 	lsr.w	sl, r0, r9
  411912:	d8f2      	bhi.n	4118fa <__lshift+0x62>
  411914:	f8c8 a004 	str.w	sl, [r8, #4]
  411918:	f1ba 0f00 	cmp.w	sl, #0
  41191c:	d000      	beq.n	411920 <__lshift+0x88>
  41191e:	1cb4      	adds	r4, r6, #2
  411920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  411922:	3c01      	subs	r4, #1
  411924:	686a      	ldr	r2, [r5, #4]
  411926:	4660      	mov	r0, ip
  411928:	f8cc 4010 	str.w	r4, [ip, #16]
  41192c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  411930:	6029      	str	r1, [r5, #0]
  411932:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  411936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41193a:	3904      	subs	r1, #4
  41193c:	f853 2b04 	ldr.w	r2, [r3], #4
  411940:	459e      	cmp	lr, r3
  411942:	f841 2f04 	str.w	r2, [r1, #4]!
  411946:	d8f9      	bhi.n	41193c <__lshift+0xa4>
  411948:	e7ea      	b.n	411920 <__lshift+0x88>
  41194a:	bf00      	nop

0041194c <__mcmp>:
  41194c:	6902      	ldr	r2, [r0, #16]
  41194e:	690b      	ldr	r3, [r1, #16]
  411950:	1ad2      	subs	r2, r2, r3
  411952:	d113      	bne.n	41197c <__mcmp+0x30>
  411954:	009a      	lsls	r2, r3, #2
  411956:	3014      	adds	r0, #20
  411958:	3114      	adds	r1, #20
  41195a:	1883      	adds	r3, r0, r2
  41195c:	4411      	add	r1, r2
  41195e:	b410      	push	{r4}
  411960:	e001      	b.n	411966 <__mcmp+0x1a>
  411962:	4298      	cmp	r0, r3
  411964:	d20c      	bcs.n	411980 <__mcmp+0x34>
  411966:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  41196a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  41196e:	4294      	cmp	r4, r2
  411970:	d0f7      	beq.n	411962 <__mcmp+0x16>
  411972:	d309      	bcc.n	411988 <__mcmp+0x3c>
  411974:	2001      	movs	r0, #1
  411976:	f85d 4b04 	ldr.w	r4, [sp], #4
  41197a:	4770      	bx	lr
  41197c:	4610      	mov	r0, r2
  41197e:	4770      	bx	lr
  411980:	2000      	movs	r0, #0
  411982:	f85d 4b04 	ldr.w	r4, [sp], #4
  411986:	4770      	bx	lr
  411988:	f04f 30ff 	mov.w	r0, #4294967295
  41198c:	f85d 4b04 	ldr.w	r4, [sp], #4
  411990:	4770      	bx	lr
  411992:	bf00      	nop

00411994 <__mdiff>:
  411994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  411998:	460c      	mov	r4, r1
  41199a:	4605      	mov	r5, r0
  41199c:	4611      	mov	r1, r2
  41199e:	4617      	mov	r7, r2
  4119a0:	4620      	mov	r0, r4
  4119a2:	f7ff ffd3 	bl	41194c <__mcmp>
  4119a6:	1e06      	subs	r6, r0, #0
  4119a8:	d05c      	beq.n	411a64 <__mdiff+0xd0>
  4119aa:	db55      	blt.n	411a58 <__mdiff+0xc4>
  4119ac:	f04f 0800 	mov.w	r8, #0
  4119b0:	6861      	ldr	r1, [r4, #4]
  4119b2:	4628      	mov	r0, r5
  4119b4:	f7ff fd62 	bl	41147c <_Balloc>
  4119b8:	f107 0514 	add.w	r5, r7, #20
  4119bc:	693b      	ldr	r3, [r7, #16]
  4119be:	f104 0114 	add.w	r1, r4, #20
  4119c2:	6926      	ldr	r6, [r4, #16]
  4119c4:	4684      	mov	ip, r0
  4119c6:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  4119ca:	f100 0414 	add.w	r4, r0, #20
  4119ce:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  4119d2:	2300      	movs	r3, #0
  4119d4:	f8c0 800c 	str.w	r8, [r0, #12]
  4119d8:	f851 9b04 	ldr.w	r9, [r1], #4
  4119dc:	f855 2b04 	ldr.w	r2, [r5], #4
  4119e0:	fa13 f889 	uxtah	r8, r3, r9
  4119e4:	4608      	mov	r0, r1
  4119e6:	b293      	uxth	r3, r2
  4119e8:	45ae      	cmp	lr, r5
  4119ea:	ea4f 4212 	mov.w	r2, r2, lsr #16
  4119ee:	ebc3 0308 	rsb	r3, r3, r8
  4119f2:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  4119f6:	fa1f f883 	uxth.w	r8, r3
  4119fa:	eb02 4323 	add.w	r3, r2, r3, asr #16
  4119fe:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  411a02:	ea4f 4323 	mov.w	r3, r3, asr #16
  411a06:	f844 2b04 	str.w	r2, [r4], #4
  411a0a:	d8e5      	bhi.n	4119d8 <__mdiff+0x44>
  411a0c:	428f      	cmp	r7, r1
  411a0e:	4625      	mov	r5, r4
  411a10:	d916      	bls.n	411a40 <__mdiff+0xac>
  411a12:	f850 2b04 	ldr.w	r2, [r0], #4
  411a16:	fa13 f382 	uxtah	r3, r3, r2
  411a1a:	0c12      	lsrs	r2, r2, #16
  411a1c:	4287      	cmp	r7, r0
  411a1e:	fa1f fe83 	uxth.w	lr, r3
  411a22:	eb02 4323 	add.w	r3, r2, r3, asr #16
  411a26:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  411a2a:	ea4f 4323 	mov.w	r3, r3, asr #16
  411a2e:	f844 2b04 	str.w	r2, [r4], #4
  411a32:	d8ee      	bhi.n	411a12 <__mdiff+0x7e>
  411a34:	43c9      	mvns	r1, r1
  411a36:	4439      	add	r1, r7
  411a38:	f021 0403 	bic.w	r4, r1, #3
  411a3c:	3404      	adds	r4, #4
  411a3e:	442c      	add	r4, r5
  411a40:	3c04      	subs	r4, #4
  411a42:	b922      	cbnz	r2, 411a4e <__mdiff+0xba>
  411a44:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  411a48:	3e01      	subs	r6, #1
  411a4a:	2b00      	cmp	r3, #0
  411a4c:	d0fa      	beq.n	411a44 <__mdiff+0xb0>
  411a4e:	4660      	mov	r0, ip
  411a50:	f8cc 6010 	str.w	r6, [ip, #16]
  411a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411a58:	4623      	mov	r3, r4
  411a5a:	f04f 0801 	mov.w	r8, #1
  411a5e:	463c      	mov	r4, r7
  411a60:	461f      	mov	r7, r3
  411a62:	e7a5      	b.n	4119b0 <__mdiff+0x1c>
  411a64:	4628      	mov	r0, r5
  411a66:	4631      	mov	r1, r6
  411a68:	f7ff fd08 	bl	41147c <_Balloc>
  411a6c:	2201      	movs	r2, #1
  411a6e:	4603      	mov	r3, r0
  411a70:	6146      	str	r6, [r0, #20]
  411a72:	611a      	str	r2, [r3, #16]
  411a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00411a78 <__ulp>:
  411a78:	4b14      	ldr	r3, [pc, #80]	; (411acc <__ulp+0x54>)
  411a7a:	ee10 2a90 	vmov	r2, s1
  411a7e:	401a      	ands	r2, r3
  411a80:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
  411a84:	2b00      	cmp	r3, #0
  411a86:	dd04      	ble.n	411a92 <__ulp+0x1a>
  411a88:	2000      	movs	r0, #0
  411a8a:	4619      	mov	r1, r3
  411a8c:	ec41 0b10 	vmov	d0, r0, r1
  411a90:	4770      	bx	lr
  411a92:	425b      	negs	r3, r3
  411a94:	151b      	asrs	r3, r3, #20
  411a96:	2b13      	cmp	r3, #19
  411a98:	dd0f      	ble.n	411aba <__ulp+0x42>
  411a9a:	2b32      	cmp	r3, #50	; 0x32
  411a9c:	f04f 0100 	mov.w	r1, #0
  411aa0:	dc08      	bgt.n	411ab4 <__ulp+0x3c>
  411aa2:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
  411aa6:	2201      	movs	r2, #1
  411aa8:	fa02 f303 	lsl.w	r3, r2, r3
  411aac:	4618      	mov	r0, r3
  411aae:	ec41 0b10 	vmov	d0, r0, r1
  411ab2:	4770      	bx	lr
  411ab4:	2301      	movs	r3, #1
  411ab6:	4618      	mov	r0, r3
  411ab8:	e7f9      	b.n	411aae <__ulp+0x36>
  411aba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  411abe:	2000      	movs	r0, #0
  411ac0:	fa42 f103 	asr.w	r1, r2, r3
  411ac4:	ec41 0b10 	vmov	d0, r0, r1
  411ac8:	4770      	bx	lr
  411aca:	bf00      	nop
  411acc:	7ff00000 	.word	0x7ff00000

00411ad0 <__b2d>:
  411ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411ad4:	6904      	ldr	r4, [r0, #16]
  411ad6:	f100 0814 	add.w	r8, r0, #20
  411ada:	460e      	mov	r6, r1
  411adc:	eb08 0484 	add.w	r4, r8, r4, lsl #2
  411ae0:	f854 7c04 	ldr.w	r7, [r4, #-4]
  411ae4:	1f25      	subs	r5, r4, #4
  411ae6:	4638      	mov	r0, r7
  411ae8:	f7ff fd86 	bl	4115f8 <__hi0bits>
  411aec:	f1c0 0320 	rsb	r3, r0, #32
  411af0:	280a      	cmp	r0, #10
  411af2:	6033      	str	r3, [r6, #0]
  411af4:	dc14      	bgt.n	411b20 <__b2d+0x50>
  411af6:	f1c0 060b 	rsb	r6, r0, #11
  411afa:	45a8      	cmp	r8, r5
  411afc:	fa27 f106 	lsr.w	r1, r7, r6
  411b00:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  411b04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411b08:	d242      	bcs.n	411b90 <__b2d+0xc0>
  411b0a:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411b0e:	40f1      	lsrs	r1, r6
  411b10:	3015      	adds	r0, #21
  411b12:	4087      	lsls	r7, r0
  411b14:	ea41 0207 	orr.w	r2, r1, r7
  411b18:	ec43 2b10 	vmov	d0, r2, r3
  411b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411b20:	45a8      	cmp	r8, r5
  411b22:	d21f      	bcs.n	411b64 <__b2d+0x94>
  411b24:	f1b0 0e0b 	subs.w	lr, r0, #11
  411b28:	f1a4 0c08 	sub.w	ip, r4, #8
  411b2c:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411b30:	d025      	beq.n	411b7e <__b2d+0xae>
  411b32:	f1c0 062b 	rsb	r6, r0, #43	; 0x2b
  411b36:	fa07 f70e 	lsl.w	r7, r7, lr
  411b3a:	45e0      	cmp	r8, ip
  411b3c:	fa21 f506 	lsr.w	r5, r1, r6
  411b40:	ea47 0705 	orr.w	r7, r7, r5
  411b44:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411b48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411b4c:	d222      	bcs.n	411b94 <__b2d+0xc4>
  411b4e:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  411b52:	40f0      	lsrs	r0, r6
  411b54:	fa01 f10e 	lsl.w	r1, r1, lr
  411b58:	ea41 0200 	orr.w	r2, r1, r0
  411b5c:	ec43 2b10 	vmov	d0, r2, r3
  411b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411b64:	f1b0 0e0b 	subs.w	lr, r0, #11
  411b68:	d008      	beq.n	411b7c <__b2d+0xac>
  411b6a:	fa07 f70e 	lsl.w	r7, r7, lr
  411b6e:	2000      	movs	r0, #0
  411b70:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411b74:	4601      	mov	r1, r0
  411b76:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411b7a:	e7eb      	b.n	411b54 <__b2d+0x84>
  411b7c:	4671      	mov	r1, lr
  411b7e:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411b82:	460a      	mov	r2, r1
  411b84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411b88:	ec43 2b10 	vmov	d0, r2, r3
  411b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411b90:	2100      	movs	r1, #0
  411b92:	e7bd      	b.n	411b10 <__b2d+0x40>
  411b94:	2000      	movs	r0, #0
  411b96:	e7dd      	b.n	411b54 <__b2d+0x84>

00411b98 <__d2b>:
  411b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411b9c:	ec57 6b10 	vmov	r6, r7, d0
  411ba0:	463c      	mov	r4, r7
  411ba2:	b083      	sub	sp, #12
  411ba4:	4688      	mov	r8, r1
  411ba6:	2101      	movs	r1, #1
  411ba8:	f3c4 550a 	ubfx	r5, r4, #20, #11
  411bac:	4617      	mov	r7, r2
  411bae:	f3c4 0413 	ubfx	r4, r4, #0, #20
  411bb2:	f7ff fc63 	bl	41147c <_Balloc>
  411bb6:	4681      	mov	r9, r0
  411bb8:	b10d      	cbz	r5, 411bbe <__d2b+0x26>
  411bba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  411bbe:	9401      	str	r4, [sp, #4]
  411bc0:	b31e      	cbz	r6, 411c0a <__d2b+0x72>
  411bc2:	a802      	add	r0, sp, #8
  411bc4:	f840 6d08 	str.w	r6, [r0, #-8]!
  411bc8:	f7ff fd38 	bl	41163c <__lo0bits>
  411bcc:	2800      	cmp	r0, #0
  411bce:	d135      	bne.n	411c3c <__d2b+0xa4>
  411bd0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  411bd4:	f8c9 2014 	str.w	r2, [r9, #20]
  411bd8:	2b00      	cmp	r3, #0
  411bda:	f8c9 3018 	str.w	r3, [r9, #24]
  411bde:	bf14      	ite	ne
  411be0:	2402      	movne	r4, #2
  411be2:	2401      	moveq	r4, #1
  411be4:	f8c9 4010 	str.w	r4, [r9, #16]
  411be8:	b9e5      	cbnz	r5, 411c24 <__d2b+0x8c>
  411bea:	eb09 0384 	add.w	r3, r9, r4, lsl #2
  411bee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  411bf2:	f8c8 0000 	str.w	r0, [r8]
  411bf6:	6918      	ldr	r0, [r3, #16]
  411bf8:	f7ff fcfe 	bl	4115f8 <__hi0bits>
  411bfc:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  411c00:	6038      	str	r0, [r7, #0]
  411c02:	4648      	mov	r0, r9
  411c04:	b003      	add	sp, #12
  411c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411c0a:	a801      	add	r0, sp, #4
  411c0c:	f7ff fd16 	bl	41163c <__lo0bits>
  411c10:	2301      	movs	r3, #1
  411c12:	9a01      	ldr	r2, [sp, #4]
  411c14:	3020      	adds	r0, #32
  411c16:	461c      	mov	r4, r3
  411c18:	f8c9 3010 	str.w	r3, [r9, #16]
  411c1c:	f8c9 2014 	str.w	r2, [r9, #20]
  411c20:	2d00      	cmp	r5, #0
  411c22:	d0e2      	beq.n	411bea <__d2b+0x52>
  411c24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
  411c28:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  411c2c:	4428      	add	r0, r5
  411c2e:	f8c8 0000 	str.w	r0, [r8]
  411c32:	4648      	mov	r0, r9
  411c34:	603b      	str	r3, [r7, #0]
  411c36:	b003      	add	sp, #12
  411c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411c3c:	9b01      	ldr	r3, [sp, #4]
  411c3e:	f1c0 0120 	rsb	r1, r0, #32
  411c42:	9a00      	ldr	r2, [sp, #0]
  411c44:	fa03 f101 	lsl.w	r1, r3, r1
  411c48:	40c3      	lsrs	r3, r0
  411c4a:	430a      	orrs	r2, r1
  411c4c:	9301      	str	r3, [sp, #4]
  411c4e:	f8c9 2014 	str.w	r2, [r9, #20]
  411c52:	e7c1      	b.n	411bd8 <__d2b+0x40>

00411c54 <__ratio>:
  411c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411c58:	b083      	sub	sp, #12
  411c5a:	4688      	mov	r8, r1
  411c5c:	4681      	mov	r9, r0
  411c5e:	4669      	mov	r1, sp
  411c60:	f7ff ff36 	bl	411ad0 <__b2d>
  411c64:	4640      	mov	r0, r8
  411c66:	a901      	add	r1, sp, #4
  411c68:	ec55 4b10 	vmov	r4, r5, d0
  411c6c:	f7ff ff30 	bl	411ad0 <__b2d>
  411c70:	f8d9 2010 	ldr.w	r2, [r9, #16]
  411c74:	f8d8 3010 	ldr.w	r3, [r8, #16]
  411c78:	ebc3 0e02 	rsb	lr, r3, r2
  411c7c:	9b00      	ldr	r3, [sp, #0]
  411c7e:	9a01      	ldr	r2, [sp, #4]
  411c80:	1a9b      	subs	r3, r3, r2
  411c82:	eb03 134e 	add.w	r3, r3, lr, lsl #5
  411c86:	2b00      	cmp	r3, #0
  411c88:	ec57 6b10 	vmov	r6, r7, d0
  411c8c:	dd0d      	ble.n	411caa <__ratio+0x56>
  411c8e:	eb05 5103 	add.w	r1, r5, r3, lsl #20
  411c92:	460d      	mov	r5, r1
  411c94:	4620      	mov	r0, r4
  411c96:	4629      	mov	r1, r5
  411c98:	4632      	mov	r2, r6
  411c9a:	463b      	mov	r3, r7
  411c9c:	f7f9 f88c 	bl	40adb8 <__aeabi_ddiv>
  411ca0:	ec41 0b10 	vmov	d0, r0, r1
  411ca4:	b003      	add	sp, #12
  411ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411caa:	eba7 5903 	sub.w	r9, r7, r3, lsl #20
  411cae:	ee10 6a10 	vmov	r6, s0
  411cb2:	464f      	mov	r7, r9
  411cb4:	e7ee      	b.n	411c94 <__ratio+0x40>
  411cb6:	bf00      	nop

00411cb8 <__copybits>:
  411cb8:	b470      	push	{r4, r5, r6}
  411cba:	f102 0314 	add.w	r3, r2, #20
  411cbe:	3901      	subs	r1, #1
  411cc0:	6914      	ldr	r4, [r2, #16]
  411cc2:	114e      	asrs	r6, r1, #5
  411cc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  411cc8:	3601      	adds	r6, #1
  411cca:	42a3      	cmp	r3, r4
  411ccc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  411cd0:	d20c      	bcs.n	411cec <__copybits+0x34>
  411cd2:	1f01      	subs	r1, r0, #4
  411cd4:	f853 5b04 	ldr.w	r5, [r3], #4
  411cd8:	429c      	cmp	r4, r3
  411cda:	f841 5f04 	str.w	r5, [r1, #4]!
  411cde:	d8f9      	bhi.n	411cd4 <__copybits+0x1c>
  411ce0:	1aa3      	subs	r3, r4, r2
  411ce2:	3b15      	subs	r3, #21
  411ce4:	f023 0303 	bic.w	r3, r3, #3
  411ce8:	3304      	adds	r3, #4
  411cea:	4418      	add	r0, r3
  411cec:	4286      	cmp	r6, r0
  411cee:	d904      	bls.n	411cfa <__copybits+0x42>
  411cf0:	2300      	movs	r3, #0
  411cf2:	f840 3b04 	str.w	r3, [r0], #4
  411cf6:	4286      	cmp	r6, r0
  411cf8:	d8fb      	bhi.n	411cf2 <__copybits+0x3a>
  411cfa:	bc70      	pop	{r4, r5, r6}
  411cfc:	4770      	bx	lr
  411cfe:	bf00      	nop

00411d00 <__any_on>:
  411d00:	6903      	ldr	r3, [r0, #16]
  411d02:	114a      	asrs	r2, r1, #5
  411d04:	4293      	cmp	r3, r2
  411d06:	b410      	push	{r4}
  411d08:	f100 0414 	add.w	r4, r0, #20
  411d0c:	da10      	bge.n	411d30 <__any_on+0x30>
  411d0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  411d12:	429c      	cmp	r4, r3
  411d14:	d220      	bcs.n	411d58 <__any_on+0x58>
  411d16:	f853 0c04 	ldr.w	r0, [r3, #-4]
  411d1a:	3b04      	subs	r3, #4
  411d1c:	b118      	cbz	r0, 411d26 <__any_on+0x26>
  411d1e:	e014      	b.n	411d4a <__any_on+0x4a>
  411d20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  411d24:	b98a      	cbnz	r2, 411d4a <__any_on+0x4a>
  411d26:	429c      	cmp	r4, r3
  411d28:	d3fa      	bcc.n	411d20 <__any_on+0x20>
  411d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  411d2e:	4770      	bx	lr
  411d30:	dd0f      	ble.n	411d52 <__any_on+0x52>
  411d32:	f011 011f 	ands.w	r1, r1, #31
  411d36:	d00c      	beq.n	411d52 <__any_on+0x52>
  411d38:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  411d3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  411d40:	fa20 f201 	lsr.w	r2, r0, r1
  411d44:	408a      	lsls	r2, r1
  411d46:	4282      	cmp	r2, r0
  411d48:	d0e3      	beq.n	411d12 <__any_on+0x12>
  411d4a:	2001      	movs	r0, #1
  411d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  411d50:	4770      	bx	lr
  411d52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  411d56:	e7dc      	b.n	411d12 <__any_on+0x12>
  411d58:	2000      	movs	r0, #0
  411d5a:	e7e6      	b.n	411d2a <__any_on+0x2a>

00411d5c <_realloc_r>:
  411d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d60:	4617      	mov	r7, r2
  411d62:	b083      	sub	sp, #12
  411d64:	460e      	mov	r6, r1
  411d66:	2900      	cmp	r1, #0
  411d68:	f000 80e2 	beq.w	411f30 <_realloc_r+0x1d4>
  411d6c:	f107 040b 	add.w	r4, r7, #11
  411d70:	4681      	mov	r9, r0
  411d72:	f7f9 fe23 	bl	40b9bc <__malloc_lock>
  411d76:	f856 3c04 	ldr.w	r3, [r6, #-4]
  411d7a:	2c16      	cmp	r4, #22
  411d7c:	f1a6 0808 	sub.w	r8, r6, #8
  411d80:	f023 0503 	bic.w	r5, r3, #3
  411d84:	d850      	bhi.n	411e28 <_realloc_r+0xcc>
  411d86:	2210      	movs	r2, #16
  411d88:	2100      	movs	r1, #0
  411d8a:	4614      	mov	r4, r2
  411d8c:	42bc      	cmp	r4, r7
  411d8e:	f0c0 80dc 	bcc.w	411f4a <_realloc_r+0x1ee>
  411d92:	2900      	cmp	r1, #0
  411d94:	f040 80d9 	bne.w	411f4a <_realloc_r+0x1ee>
  411d98:	4295      	cmp	r5, r2
  411d9a:	da4a      	bge.n	411e32 <_realloc_r+0xd6>
  411d9c:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 412148 <_realloc_r+0x3ec>
  411da0:	eb08 0105 	add.w	r1, r8, r5
  411da4:	f8db 0008 	ldr.w	r0, [fp, #8]
  411da8:	4288      	cmp	r0, r1
  411daa:	f000 80d3 	beq.w	411f54 <_realloc_r+0x1f8>
  411dae:	6848      	ldr	r0, [r1, #4]
  411db0:	f020 0e01 	bic.w	lr, r0, #1
  411db4:	448e      	add	lr, r1
  411db6:	f8de e004 	ldr.w	lr, [lr, #4]
  411dba:	f01e 0f01 	tst.w	lr, #1
  411dbe:	d14e      	bne.n	411e5e <_realloc_r+0x102>
  411dc0:	f020 0003 	bic.w	r0, r0, #3
  411dc4:	4428      	add	r0, r5
  411dc6:	4290      	cmp	r0, r2
  411dc8:	f280 80b8 	bge.w	411f3c <_realloc_r+0x1e0>
  411dcc:	07db      	lsls	r3, r3, #31
  411dce:	f100 808b 	bmi.w	411ee8 <_realloc_r+0x18c>
  411dd2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  411dd6:	ebc3 0a08 	rsb	sl, r3, r8
  411dda:	f8da 3004 	ldr.w	r3, [sl, #4]
  411dde:	f023 0303 	bic.w	r3, r3, #3
  411de2:	eb00 0e03 	add.w	lr, r0, r3
  411de6:	4596      	cmp	lr, r2
  411de8:	db43      	blt.n	411e72 <_realloc_r+0x116>
  411dea:	68cb      	ldr	r3, [r1, #12]
  411dec:	4657      	mov	r7, sl
  411dee:	6889      	ldr	r1, [r1, #8]
  411df0:	1f2a      	subs	r2, r5, #4
  411df2:	60cb      	str	r3, [r1, #12]
  411df4:	2a24      	cmp	r2, #36	; 0x24
  411df6:	6099      	str	r1, [r3, #8]
  411df8:	f857 1f08 	ldr.w	r1, [r7, #8]!
  411dfc:	f8da 300c 	ldr.w	r3, [sl, #12]
  411e00:	60cb      	str	r3, [r1, #12]
  411e02:	6099      	str	r1, [r3, #8]
  411e04:	f200 813c 	bhi.w	412080 <_realloc_r+0x324>
  411e08:	2a13      	cmp	r2, #19
  411e0a:	f240 80fa 	bls.w	412002 <_realloc_r+0x2a6>
  411e0e:	6833      	ldr	r3, [r6, #0]
  411e10:	2a1b      	cmp	r2, #27
  411e12:	f8ca 3008 	str.w	r3, [sl, #8]
  411e16:	6873      	ldr	r3, [r6, #4]
  411e18:	f8ca 300c 	str.w	r3, [sl, #12]
  411e1c:	f200 813b 	bhi.w	412096 <_realloc_r+0x33a>
  411e20:	3608      	adds	r6, #8
  411e22:	f10a 0310 	add.w	r3, sl, #16
  411e26:	e0ed      	b.n	412004 <_realloc_r+0x2a8>
  411e28:	f024 0407 	bic.w	r4, r4, #7
  411e2c:	4622      	mov	r2, r4
  411e2e:	0fe1      	lsrs	r1, r4, #31
  411e30:	e7ac      	b.n	411d8c <_realloc_r+0x30>
  411e32:	4637      	mov	r7, r6
  411e34:	1b2a      	subs	r2, r5, r4
  411e36:	f003 0301 	and.w	r3, r3, #1
  411e3a:	2a0f      	cmp	r2, #15
  411e3c:	d841      	bhi.n	411ec2 <_realloc_r+0x166>
  411e3e:	eb08 0205 	add.w	r2, r8, r5
  411e42:	431d      	orrs	r5, r3
  411e44:	f8c8 5004 	str.w	r5, [r8, #4]
  411e48:	6853      	ldr	r3, [r2, #4]
  411e4a:	f043 0301 	orr.w	r3, r3, #1
  411e4e:	6053      	str	r3, [r2, #4]
  411e50:	4648      	mov	r0, r9
  411e52:	f7f9 fdb5 	bl	40b9c0 <__malloc_unlock>
  411e56:	4638      	mov	r0, r7
  411e58:	b003      	add	sp, #12
  411e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411e5e:	07d9      	lsls	r1, r3, #31
  411e60:	d442      	bmi.n	411ee8 <_realloc_r+0x18c>
  411e62:	f856 3c08 	ldr.w	r3, [r6, #-8]
  411e66:	ebc3 0a08 	rsb	sl, r3, r8
  411e6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  411e6e:	f023 0303 	bic.w	r3, r3, #3
  411e72:	442b      	add	r3, r5
  411e74:	4293      	cmp	r3, r2
  411e76:	db37      	blt.n	411ee8 <_realloc_r+0x18c>
  411e78:	4657      	mov	r7, sl
  411e7a:	1f2a      	subs	r2, r5, #4
  411e7c:	f8da 100c 	ldr.w	r1, [sl, #12]
  411e80:	f857 0f08 	ldr.w	r0, [r7, #8]!
  411e84:	2a24      	cmp	r2, #36	; 0x24
  411e86:	60c1      	str	r1, [r0, #12]
  411e88:	6088      	str	r0, [r1, #8]
  411e8a:	f200 80c6 	bhi.w	41201a <_realloc_r+0x2be>
  411e8e:	2a13      	cmp	r2, #19
  411e90:	f240 80ff 	bls.w	412092 <_realloc_r+0x336>
  411e94:	6831      	ldr	r1, [r6, #0]
  411e96:	2a1b      	cmp	r2, #27
  411e98:	f8ca 1008 	str.w	r1, [sl, #8]
  411e9c:	6871      	ldr	r1, [r6, #4]
  411e9e:	f8ca 100c 	str.w	r1, [sl, #12]
  411ea2:	f200 810d 	bhi.w	4120c0 <_realloc_r+0x364>
  411ea6:	3608      	adds	r6, #8
  411ea8:	f10a 0210 	add.w	r2, sl, #16
  411eac:	6831      	ldr	r1, [r6, #0]
  411eae:	461d      	mov	r5, r3
  411eb0:	46d0      	mov	r8, sl
  411eb2:	6011      	str	r1, [r2, #0]
  411eb4:	6873      	ldr	r3, [r6, #4]
  411eb6:	6053      	str	r3, [r2, #4]
  411eb8:	68b3      	ldr	r3, [r6, #8]
  411eba:	6093      	str	r3, [r2, #8]
  411ebc:	f8da 3004 	ldr.w	r3, [sl, #4]
  411ec0:	e7b8      	b.n	411e34 <_realloc_r+0xd8>
  411ec2:	eb08 0504 	add.w	r5, r8, r4
  411ec6:	f042 0601 	orr.w	r6, r2, #1
  411eca:	431c      	orrs	r4, r3
  411ecc:	4648      	mov	r0, r9
  411ece:	442a      	add	r2, r5
  411ed0:	f105 0108 	add.w	r1, r5, #8
  411ed4:	f8c8 4004 	str.w	r4, [r8, #4]
  411ed8:	606e      	str	r6, [r5, #4]
  411eda:	6853      	ldr	r3, [r2, #4]
  411edc:	f043 0301 	orr.w	r3, r3, #1
  411ee0:	6053      	str	r3, [r2, #4]
  411ee2:	f7fe fb73 	bl	4105cc <_free_r>
  411ee6:	e7b3      	b.n	411e50 <_realloc_r+0xf4>
  411ee8:	4639      	mov	r1, r7
  411eea:	4648      	mov	r0, r9
  411eec:	f7f9 f9d0 	bl	40b290 <_malloc_r>
  411ef0:	4607      	mov	r7, r0
  411ef2:	2800      	cmp	r0, #0
  411ef4:	d0ac      	beq.n	411e50 <_realloc_r+0xf4>
  411ef6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  411efa:	f1a0 0108 	sub.w	r1, r0, #8
  411efe:	f023 0201 	bic.w	r2, r3, #1
  411f02:	4442      	add	r2, r8
  411f04:	4291      	cmp	r1, r2
  411f06:	f000 80b4 	beq.w	412072 <_realloc_r+0x316>
  411f0a:	1f2a      	subs	r2, r5, #4
  411f0c:	2a24      	cmp	r2, #36	; 0x24
  411f0e:	f200 80a1 	bhi.w	412054 <_realloc_r+0x2f8>
  411f12:	2a13      	cmp	r2, #19
  411f14:	d86a      	bhi.n	411fec <_realloc_r+0x290>
  411f16:	4603      	mov	r3, r0
  411f18:	4632      	mov	r2, r6
  411f1a:	6811      	ldr	r1, [r2, #0]
  411f1c:	6019      	str	r1, [r3, #0]
  411f1e:	6851      	ldr	r1, [r2, #4]
  411f20:	6059      	str	r1, [r3, #4]
  411f22:	6892      	ldr	r2, [r2, #8]
  411f24:	609a      	str	r2, [r3, #8]
  411f26:	4631      	mov	r1, r6
  411f28:	4648      	mov	r0, r9
  411f2a:	f7fe fb4f 	bl	4105cc <_free_r>
  411f2e:	e78f      	b.n	411e50 <_realloc_r+0xf4>
  411f30:	4611      	mov	r1, r2
  411f32:	b003      	add	sp, #12
  411f34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411f38:	f7f9 b9aa 	b.w	40b290 <_malloc_r>
  411f3c:	68ca      	ldr	r2, [r1, #12]
  411f3e:	4637      	mov	r7, r6
  411f40:	6889      	ldr	r1, [r1, #8]
  411f42:	4605      	mov	r5, r0
  411f44:	60ca      	str	r2, [r1, #12]
  411f46:	6091      	str	r1, [r2, #8]
  411f48:	e774      	b.n	411e34 <_realloc_r+0xd8>
  411f4a:	230c      	movs	r3, #12
  411f4c:	2000      	movs	r0, #0
  411f4e:	f8c9 3000 	str.w	r3, [r9]
  411f52:	e781      	b.n	411e58 <_realloc_r+0xfc>
  411f54:	6841      	ldr	r1, [r0, #4]
  411f56:	f104 0010 	add.w	r0, r4, #16
  411f5a:	f021 0103 	bic.w	r1, r1, #3
  411f5e:	4429      	add	r1, r5
  411f60:	4281      	cmp	r1, r0
  411f62:	da63      	bge.n	41202c <_realloc_r+0x2d0>
  411f64:	07db      	lsls	r3, r3, #31
  411f66:	d4bf      	bmi.n	411ee8 <_realloc_r+0x18c>
  411f68:	f856 3c08 	ldr.w	r3, [r6, #-8]
  411f6c:	ebc3 0a08 	rsb	sl, r3, r8
  411f70:	f8da 3004 	ldr.w	r3, [sl, #4]
  411f74:	f023 0303 	bic.w	r3, r3, #3
  411f78:	eb01 0c03 	add.w	ip, r1, r3
  411f7c:	4560      	cmp	r0, ip
  411f7e:	f73f af78 	bgt.w	411e72 <_realloc_r+0x116>
  411f82:	4657      	mov	r7, sl
  411f84:	1f2a      	subs	r2, r5, #4
  411f86:	f8da 300c 	ldr.w	r3, [sl, #12]
  411f8a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  411f8e:	2a24      	cmp	r2, #36	; 0x24
  411f90:	60cb      	str	r3, [r1, #12]
  411f92:	6099      	str	r1, [r3, #8]
  411f94:	f200 80b8 	bhi.w	412108 <_realloc_r+0x3ac>
  411f98:	2a13      	cmp	r2, #19
  411f9a:	f240 80a8 	bls.w	4120ee <_realloc_r+0x392>
  411f9e:	6833      	ldr	r3, [r6, #0]
  411fa0:	2a1b      	cmp	r2, #27
  411fa2:	f8ca 3008 	str.w	r3, [sl, #8]
  411fa6:	6873      	ldr	r3, [r6, #4]
  411fa8:	f8ca 300c 	str.w	r3, [sl, #12]
  411fac:	f200 80b5 	bhi.w	41211a <_realloc_r+0x3be>
  411fb0:	3608      	adds	r6, #8
  411fb2:	f10a 0310 	add.w	r3, sl, #16
  411fb6:	6832      	ldr	r2, [r6, #0]
  411fb8:	601a      	str	r2, [r3, #0]
  411fba:	6872      	ldr	r2, [r6, #4]
  411fbc:	605a      	str	r2, [r3, #4]
  411fbe:	68b2      	ldr	r2, [r6, #8]
  411fc0:	609a      	str	r2, [r3, #8]
  411fc2:	ebc4 030c 	rsb	r3, r4, ip
  411fc6:	eb0a 0204 	add.w	r2, sl, r4
  411fca:	4648      	mov	r0, r9
  411fcc:	f043 0301 	orr.w	r3, r3, #1
  411fd0:	f8cb 2008 	str.w	r2, [fp, #8]
  411fd4:	6053      	str	r3, [r2, #4]
  411fd6:	f8da 3004 	ldr.w	r3, [sl, #4]
  411fda:	f003 0301 	and.w	r3, r3, #1
  411fde:	431c      	orrs	r4, r3
  411fe0:	f8ca 4004 	str.w	r4, [sl, #4]
  411fe4:	f7f9 fcec 	bl	40b9c0 <__malloc_unlock>
  411fe8:	4638      	mov	r0, r7
  411fea:	e735      	b.n	411e58 <_realloc_r+0xfc>
  411fec:	6833      	ldr	r3, [r6, #0]
  411fee:	2a1b      	cmp	r2, #27
  411ff0:	6003      	str	r3, [r0, #0]
  411ff2:	6873      	ldr	r3, [r6, #4]
  411ff4:	6043      	str	r3, [r0, #4]
  411ff6:	d831      	bhi.n	41205c <_realloc_r+0x300>
  411ff8:	f100 0308 	add.w	r3, r0, #8
  411ffc:	f106 0208 	add.w	r2, r6, #8
  412000:	e78b      	b.n	411f1a <_realloc_r+0x1be>
  412002:	463b      	mov	r3, r7
  412004:	6832      	ldr	r2, [r6, #0]
  412006:	4675      	mov	r5, lr
  412008:	46d0      	mov	r8, sl
  41200a:	601a      	str	r2, [r3, #0]
  41200c:	6872      	ldr	r2, [r6, #4]
  41200e:	605a      	str	r2, [r3, #4]
  412010:	68b2      	ldr	r2, [r6, #8]
  412012:	609a      	str	r2, [r3, #8]
  412014:	f8da 3004 	ldr.w	r3, [sl, #4]
  412018:	e70c      	b.n	411e34 <_realloc_r+0xd8>
  41201a:	4631      	mov	r1, r6
  41201c:	4638      	mov	r0, r7
  41201e:	461d      	mov	r5, r3
  412020:	46d0      	mov	r8, sl
  412022:	f7ff f9c9 	bl	4113b8 <memmove>
  412026:	f8da 3004 	ldr.w	r3, [sl, #4]
  41202a:	e703      	b.n	411e34 <_realloc_r+0xd8>
  41202c:	1b0b      	subs	r3, r1, r4
  41202e:	eb08 0204 	add.w	r2, r8, r4
  412032:	4648      	mov	r0, r9
  412034:	f043 0301 	orr.w	r3, r3, #1
  412038:	f8cb 2008 	str.w	r2, [fp, #8]
  41203c:	6053      	str	r3, [r2, #4]
  41203e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  412042:	f003 0301 	and.w	r3, r3, #1
  412046:	431c      	orrs	r4, r3
  412048:	f846 4c04 	str.w	r4, [r6, #-4]
  41204c:	f7f9 fcb8 	bl	40b9c0 <__malloc_unlock>
  412050:	4630      	mov	r0, r6
  412052:	e701      	b.n	411e58 <_realloc_r+0xfc>
  412054:	4631      	mov	r1, r6
  412056:	f7ff f9af 	bl	4113b8 <memmove>
  41205a:	e764      	b.n	411f26 <_realloc_r+0x1ca>
  41205c:	68b3      	ldr	r3, [r6, #8]
  41205e:	2a24      	cmp	r2, #36	; 0x24
  412060:	6083      	str	r3, [r0, #8]
  412062:	68f3      	ldr	r3, [r6, #12]
  412064:	60c3      	str	r3, [r0, #12]
  412066:	d022      	beq.n	4120ae <_realloc_r+0x352>
  412068:	f100 0310 	add.w	r3, r0, #16
  41206c:	f106 0210 	add.w	r2, r6, #16
  412070:	e753      	b.n	411f1a <_realloc_r+0x1be>
  412072:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412076:	4637      	mov	r7, r6
  412078:	f022 0203 	bic.w	r2, r2, #3
  41207c:	4415      	add	r5, r2
  41207e:	e6d9      	b.n	411e34 <_realloc_r+0xd8>
  412080:	4631      	mov	r1, r6
  412082:	4638      	mov	r0, r7
  412084:	4675      	mov	r5, lr
  412086:	46d0      	mov	r8, sl
  412088:	f7ff f996 	bl	4113b8 <memmove>
  41208c:	f8da 3004 	ldr.w	r3, [sl, #4]
  412090:	e6d0      	b.n	411e34 <_realloc_r+0xd8>
  412092:	463a      	mov	r2, r7
  412094:	e70a      	b.n	411eac <_realloc_r+0x150>
  412096:	68b3      	ldr	r3, [r6, #8]
  412098:	2a24      	cmp	r2, #36	; 0x24
  41209a:	f8ca 3010 	str.w	r3, [sl, #16]
  41209e:	68f3      	ldr	r3, [r6, #12]
  4120a0:	f8ca 3014 	str.w	r3, [sl, #20]
  4120a4:	d018      	beq.n	4120d8 <_realloc_r+0x37c>
  4120a6:	3610      	adds	r6, #16
  4120a8:	f10a 0318 	add.w	r3, sl, #24
  4120ac:	e7aa      	b.n	412004 <_realloc_r+0x2a8>
  4120ae:	6931      	ldr	r1, [r6, #16]
  4120b0:	f100 0318 	add.w	r3, r0, #24
  4120b4:	f106 0218 	add.w	r2, r6, #24
  4120b8:	6101      	str	r1, [r0, #16]
  4120ba:	6971      	ldr	r1, [r6, #20]
  4120bc:	6141      	str	r1, [r0, #20]
  4120be:	e72c      	b.n	411f1a <_realloc_r+0x1be>
  4120c0:	68b1      	ldr	r1, [r6, #8]
  4120c2:	2a24      	cmp	r2, #36	; 0x24
  4120c4:	f8ca 1010 	str.w	r1, [sl, #16]
  4120c8:	68f1      	ldr	r1, [r6, #12]
  4120ca:	f8ca 1014 	str.w	r1, [sl, #20]
  4120ce:	d010      	beq.n	4120f2 <_realloc_r+0x396>
  4120d0:	3610      	adds	r6, #16
  4120d2:	f10a 0218 	add.w	r2, sl, #24
  4120d6:	e6e9      	b.n	411eac <_realloc_r+0x150>
  4120d8:	6932      	ldr	r2, [r6, #16]
  4120da:	f10a 0320 	add.w	r3, sl, #32
  4120de:	3618      	adds	r6, #24
  4120e0:	f8ca 2018 	str.w	r2, [sl, #24]
  4120e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
  4120e8:	f8ca 201c 	str.w	r2, [sl, #28]
  4120ec:	e78a      	b.n	412004 <_realloc_r+0x2a8>
  4120ee:	463b      	mov	r3, r7
  4120f0:	e761      	b.n	411fb6 <_realloc_r+0x25a>
  4120f2:	6931      	ldr	r1, [r6, #16]
  4120f4:	f10a 0220 	add.w	r2, sl, #32
  4120f8:	3618      	adds	r6, #24
  4120fa:	f8ca 1018 	str.w	r1, [sl, #24]
  4120fe:	f856 1c04 	ldr.w	r1, [r6, #-4]
  412102:	f8ca 101c 	str.w	r1, [sl, #28]
  412106:	e6d1      	b.n	411eac <_realloc_r+0x150>
  412108:	4631      	mov	r1, r6
  41210a:	4638      	mov	r0, r7
  41210c:	f8cd c004 	str.w	ip, [sp, #4]
  412110:	f7ff f952 	bl	4113b8 <memmove>
  412114:	f8dd c004 	ldr.w	ip, [sp, #4]
  412118:	e753      	b.n	411fc2 <_realloc_r+0x266>
  41211a:	68b3      	ldr	r3, [r6, #8]
  41211c:	2a24      	cmp	r2, #36	; 0x24
  41211e:	f8ca 3010 	str.w	r3, [sl, #16]
  412122:	68f3      	ldr	r3, [r6, #12]
  412124:	f8ca 3014 	str.w	r3, [sl, #20]
  412128:	d003      	beq.n	412132 <_realloc_r+0x3d6>
  41212a:	3610      	adds	r6, #16
  41212c:	f10a 0318 	add.w	r3, sl, #24
  412130:	e741      	b.n	411fb6 <_realloc_r+0x25a>
  412132:	6932      	ldr	r2, [r6, #16]
  412134:	f10a 0320 	add.w	r3, sl, #32
  412138:	3618      	adds	r6, #24
  41213a:	f8ca 2018 	str.w	r2, [sl, #24]
  41213e:	f856 2c04 	ldr.w	r2, [r6, #-4]
  412142:	f8ca 201c 	str.w	r2, [sl, #28]
  412146:	e736      	b.n	411fb6 <_realloc_r+0x25a>
  412148:	204004dc 	.word	0x204004dc

0041214c <nanf>:
  41214c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 412154 <nanf+0x8>
  412150:	4770      	bx	lr
  412152:	bf00      	nop
  412154:	7fc00000 	.word	0x7fc00000

00412158 <_raise_r>:
  412158:	291f      	cmp	r1, #31
  41215a:	b538      	push	{r3, r4, r5, lr}
  41215c:	4605      	mov	r5, r0
  41215e:	d821      	bhi.n	4121a4 <_raise_r+0x4c>
  412160:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  412164:	460c      	mov	r4, r1
  412166:	b19a      	cbz	r2, 412190 <_raise_r+0x38>
  412168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  41216c:	b183      	cbz	r3, 412190 <_raise_r+0x38>
  41216e:	2b01      	cmp	r3, #1
  412170:	d00c      	beq.n	41218c <_raise_r+0x34>
  412172:	1c59      	adds	r1, r3, #1
  412174:	d006      	beq.n	412184 <_raise_r+0x2c>
  412176:	2500      	movs	r5, #0
  412178:	4620      	mov	r0, r4
  41217a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  41217e:	4798      	blx	r3
  412180:	4628      	mov	r0, r5
  412182:	bd38      	pop	{r3, r4, r5, pc}
  412184:	2316      	movs	r3, #22
  412186:	2001      	movs	r0, #1
  412188:	602b      	str	r3, [r5, #0]
  41218a:	bd38      	pop	{r3, r4, r5, pc}
  41218c:	2000      	movs	r0, #0
  41218e:	bd38      	pop	{r3, r4, r5, pc}
  412190:	4628      	mov	r0, r5
  412192:	f000 f829 	bl	4121e8 <_getpid_r>
  412196:	4622      	mov	r2, r4
  412198:	4601      	mov	r1, r0
  41219a:	4628      	mov	r0, r5
  41219c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4121a0:	f000 b80e 	b.w	4121c0 <_kill_r>
  4121a4:	2316      	movs	r3, #22
  4121a6:	f04f 30ff 	mov.w	r0, #4294967295
  4121aa:	602b      	str	r3, [r5, #0]
  4121ac:	bd38      	pop	{r3, r4, r5, pc}
  4121ae:	bf00      	nop

004121b0 <raise>:
  4121b0:	4b02      	ldr	r3, [pc, #8]	; (4121bc <raise+0xc>)
  4121b2:	4601      	mov	r1, r0
  4121b4:	6818      	ldr	r0, [r3, #0]
  4121b6:	f7ff bfcf 	b.w	412158 <_raise_r>
  4121ba:	bf00      	nop
  4121bc:	204004d8 	.word	0x204004d8

004121c0 <_kill_r>:
  4121c0:	b538      	push	{r3, r4, r5, lr}
  4121c2:	2300      	movs	r3, #0
  4121c4:	4c07      	ldr	r4, [pc, #28]	; (4121e4 <_kill_r+0x24>)
  4121c6:	4605      	mov	r5, r0
  4121c8:	4608      	mov	r0, r1
  4121ca:	4611      	mov	r1, r2
  4121cc:	6023      	str	r3, [r4, #0]
  4121ce:	f7f1 facb 	bl	403768 <_kill>
  4121d2:	1c43      	adds	r3, r0, #1
  4121d4:	d000      	beq.n	4121d8 <_kill_r+0x18>
  4121d6:	bd38      	pop	{r3, r4, r5, pc}
  4121d8:	6823      	ldr	r3, [r4, #0]
  4121da:	2b00      	cmp	r3, #0
  4121dc:	d0fb      	beq.n	4121d6 <_kill_r+0x16>
  4121de:	602b      	str	r3, [r5, #0]
  4121e0:	bd38      	pop	{r3, r4, r5, pc}
  4121e2:	bf00      	nop
  4121e4:	2040c6a4 	.word	0x2040c6a4

004121e8 <_getpid_r>:
  4121e8:	f7f1 bac0 	b.w	40376c <_getpid>

004121ec <__sread>:
  4121ec:	b510      	push	{r4, lr}
  4121ee:	460c      	mov	r4, r1
  4121f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4121f4:	f000 fac2 	bl	41277c <_read_r>
  4121f8:	2800      	cmp	r0, #0
  4121fa:	db03      	blt.n	412204 <__sread+0x18>
  4121fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4121fe:	4403      	add	r3, r0
  412200:	6523      	str	r3, [r4, #80]	; 0x50
  412202:	bd10      	pop	{r4, pc}
  412204:	89a3      	ldrh	r3, [r4, #12]
  412206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  41220a:	81a3      	strh	r3, [r4, #12]
  41220c:	bd10      	pop	{r4, pc}
  41220e:	bf00      	nop

00412210 <__swrite>:
  412210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412214:	461d      	mov	r5, r3
  412216:	898b      	ldrh	r3, [r1, #12]
  412218:	4616      	mov	r6, r2
  41221a:	460c      	mov	r4, r1
  41221c:	05da      	lsls	r2, r3, #23
  41221e:	4607      	mov	r7, r0
  412220:	d506      	bpl.n	412230 <__swrite+0x20>
  412222:	2302      	movs	r3, #2
  412224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412228:	2200      	movs	r2, #0
  41222a:	f000 fa93 	bl	412754 <_lseek_r>
  41222e:	89a3      	ldrh	r3, [r4, #12]
  412230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  412234:	4638      	mov	r0, r7
  412236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  41223a:	4632      	mov	r2, r6
  41223c:	81a3      	strh	r3, [r4, #12]
  41223e:	462b      	mov	r3, r5
  412240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  412244:	f000 b974 	b.w	412530 <_write_r>

00412248 <__sseek>:
  412248:	b510      	push	{r4, lr}
  41224a:	460c      	mov	r4, r1
  41224c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412250:	f000 fa80 	bl	412754 <_lseek_r>
  412254:	1c42      	adds	r2, r0, #1
  412256:	89a3      	ldrh	r3, [r4, #12]
  412258:	d004      	beq.n	412264 <__sseek+0x1c>
  41225a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  41225e:	6520      	str	r0, [r4, #80]	; 0x50
  412260:	81a3      	strh	r3, [r4, #12]
  412262:	bd10      	pop	{r4, pc}
  412264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  412268:	81a3      	strh	r3, [r4, #12]
  41226a:	bd10      	pop	{r4, pc}

0041226c <__sclose>:
  41226c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  412270:	f000 b9f6 	b.w	412660 <_close_r>

00412274 <strncmp>:
  412274:	2a00      	cmp	r2, #0
  412276:	d03f      	beq.n	4122f8 <strncmp+0x84>
  412278:	ea40 0301 	orr.w	r3, r0, r1
  41227c:	f013 0303 	ands.w	r3, r3, #3
  412280:	b4f0      	push	{r4, r5, r6, r7}
  412282:	d125      	bne.n	4122d0 <strncmp+0x5c>
  412284:	2a03      	cmp	r2, #3
  412286:	d923      	bls.n	4122d0 <strncmp+0x5c>
  412288:	6804      	ldr	r4, [r0, #0]
  41228a:	680d      	ldr	r5, [r1, #0]
  41228c:	42ac      	cmp	r4, r5
  41228e:	d11f      	bne.n	4122d0 <strncmp+0x5c>
  412290:	3a04      	subs	r2, #4
  412292:	d036      	beq.n	412302 <strncmp+0x8e>
  412294:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  412298:	ea25 0404 	bic.w	r4, r5, r4
  41229c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4122a0:	d131      	bne.n	412306 <strncmp+0x92>
  4122a2:	1d06      	adds	r6, r0, #4
  4122a4:	1d0d      	adds	r5, r1, #4
  4122a6:	e00d      	b.n	4122c4 <strncmp+0x50>
  4122a8:	f856 3b04 	ldr.w	r3, [r6], #4
  4122ac:	680f      	ldr	r7, [r1, #0]
  4122ae:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  4122b2:	42bb      	cmp	r3, r7
  4122b4:	ea24 0303 	bic.w	r3, r4, r3
  4122b8:	d10a      	bne.n	4122d0 <strncmp+0x5c>
  4122ba:	3a04      	subs	r2, #4
  4122bc:	d021      	beq.n	412302 <strncmp+0x8e>
  4122be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4122c2:	d11b      	bne.n	4122fc <strncmp+0x88>
  4122c4:	2a03      	cmp	r2, #3
  4122c6:	4629      	mov	r1, r5
  4122c8:	4630      	mov	r0, r6
  4122ca:	f105 0504 	add.w	r5, r5, #4
  4122ce:	d8eb      	bhi.n	4122a8 <strncmp+0x34>
  4122d0:	7803      	ldrb	r3, [r0, #0]
  4122d2:	3a01      	subs	r2, #1
  4122d4:	780c      	ldrb	r4, [r1, #0]
  4122d6:	42a3      	cmp	r3, r4
  4122d8:	d10b      	bne.n	4122f2 <strncmp+0x7e>
  4122da:	b17a      	cbz	r2, 4122fc <strncmp+0x88>
  4122dc:	b913      	cbnz	r3, 4122e4 <strncmp+0x70>
  4122de:	e00d      	b.n	4122fc <strncmp+0x88>
  4122e0:	b163      	cbz	r3, 4122fc <strncmp+0x88>
  4122e2:	b15a      	cbz	r2, 4122fc <strncmp+0x88>
  4122e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4122e8:	3a01      	subs	r2, #1
  4122ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4122ee:	42a3      	cmp	r3, r4
  4122f0:	d0f6      	beq.n	4122e0 <strncmp+0x6c>
  4122f2:	1b18      	subs	r0, r3, r4
  4122f4:	bcf0      	pop	{r4, r5, r6, r7}
  4122f6:	4770      	bx	lr
  4122f8:	4610      	mov	r0, r2
  4122fa:	4770      	bx	lr
  4122fc:	2000      	movs	r0, #0
  4122fe:	bcf0      	pop	{r4, r5, r6, r7}
  412300:	4770      	bx	lr
  412302:	4610      	mov	r0, r2
  412304:	e7f6      	b.n	4122f4 <strncmp+0x80>
  412306:	4618      	mov	r0, r3
  412308:	e7f4      	b.n	4122f4 <strncmp+0x80>
  41230a:	bf00      	nop

0041230c <__ssprint_r>:
  41230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412310:	6893      	ldr	r3, [r2, #8]
  412312:	b083      	sub	sp, #12
  412314:	4691      	mov	r9, r2
  412316:	f8d2 8000 	ldr.w	r8, [r2]
  41231a:	9001      	str	r0, [sp, #4]
  41231c:	2b00      	cmp	r3, #0
  41231e:	d073      	beq.n	412408 <__ssprint_r+0xfc>
  412320:	f04f 0b00 	mov.w	fp, #0
  412324:	460d      	mov	r5, r1
  412326:	6808      	ldr	r0, [r1, #0]
  412328:	688b      	ldr	r3, [r1, #8]
  41232a:	465c      	mov	r4, fp
  41232c:	2c00      	cmp	r4, #0
  41232e:	d046      	beq.n	4123be <__ssprint_r+0xb2>
  412330:	429c      	cmp	r4, r3
  412332:	461e      	mov	r6, r3
  412334:	469a      	mov	sl, r3
  412336:	d349      	bcc.n	4123cc <__ssprint_r+0xc0>
  412338:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  41233c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  412340:	d02d      	beq.n	41239e <__ssprint_r+0x92>
  412342:	696b      	ldr	r3, [r5, #20]
  412344:	1c62      	adds	r2, r4, #1
  412346:	6929      	ldr	r1, [r5, #16]
  412348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41234c:	1a46      	subs	r6, r0, r1
  41234e:	4610      	mov	r0, r2
  412350:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  412354:	4430      	add	r0, r6
  412356:	105f      	asrs	r7, r3, #1
  412358:	4287      	cmp	r7, r0
  41235a:	463a      	mov	r2, r7
  41235c:	d201      	bcs.n	412362 <__ssprint_r+0x56>
  41235e:	4607      	mov	r7, r0
  412360:	4602      	mov	r2, r0
  412362:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  412366:	d034      	beq.n	4123d2 <__ssprint_r+0xc6>
  412368:	4611      	mov	r1, r2
  41236a:	9801      	ldr	r0, [sp, #4]
  41236c:	f7f8 ff90 	bl	40b290 <_malloc_r>
  412370:	4682      	mov	sl, r0
  412372:	2800      	cmp	r0, #0
  412374:	d04e      	beq.n	412414 <__ssprint_r+0x108>
  412376:	4632      	mov	r2, r6
  412378:	6929      	ldr	r1, [r5, #16]
  41237a:	f7f9 fa35 	bl	40b7e8 <memcpy>
  41237e:	89aa      	ldrh	r2, [r5, #12]
  412380:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  412384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  412388:	81aa      	strh	r2, [r5, #12]
  41238a:	eb0a 0006 	add.w	r0, sl, r6
  41238e:	1bba      	subs	r2, r7, r6
  412390:	f8c5 a010 	str.w	sl, [r5, #16]
  412394:	4626      	mov	r6, r4
  412396:	46a2      	mov	sl, r4
  412398:	6028      	str	r0, [r5, #0]
  41239a:	60aa      	str	r2, [r5, #8]
  41239c:	616f      	str	r7, [r5, #20]
  41239e:	4652      	mov	r2, sl
  4123a0:	4659      	mov	r1, fp
  4123a2:	f7ff f809 	bl	4113b8 <memmove>
  4123a6:	f8d9 2008 	ldr.w	r2, [r9, #8]
  4123aa:	68ab      	ldr	r3, [r5, #8]
  4123ac:	6828      	ldr	r0, [r5, #0]
  4123ae:	1b14      	subs	r4, r2, r4
  4123b0:	1b9b      	subs	r3, r3, r6
  4123b2:	4450      	add	r0, sl
  4123b4:	60ab      	str	r3, [r5, #8]
  4123b6:	6028      	str	r0, [r5, #0]
  4123b8:	f8c9 4008 	str.w	r4, [r9, #8]
  4123bc:	b324      	cbz	r4, 412408 <__ssprint_r+0xfc>
  4123be:	f8d8 b000 	ldr.w	fp, [r8]
  4123c2:	f108 0808 	add.w	r8, r8, #8
  4123c6:	f858 4c04 	ldr.w	r4, [r8, #-4]
  4123ca:	e7af      	b.n	41232c <__ssprint_r+0x20>
  4123cc:	4626      	mov	r6, r4
  4123ce:	46a2      	mov	sl, r4
  4123d0:	e7e5      	b.n	41239e <__ssprint_r+0x92>
  4123d2:	9801      	ldr	r0, [sp, #4]
  4123d4:	f7ff fcc2 	bl	411d5c <_realloc_r>
  4123d8:	4682      	mov	sl, r0
  4123da:	2800      	cmp	r0, #0
  4123dc:	d1d5      	bne.n	41238a <__ssprint_r+0x7e>
  4123de:	9c01      	ldr	r4, [sp, #4]
  4123e0:	6929      	ldr	r1, [r5, #16]
  4123e2:	4620      	mov	r0, r4
  4123e4:	f7fe f8f2 	bl	4105cc <_free_r>
  4123e8:	230c      	movs	r3, #12
  4123ea:	6023      	str	r3, [r4, #0]
  4123ec:	89ab      	ldrh	r3, [r5, #12]
  4123ee:	2200      	movs	r2, #0
  4123f0:	f04f 30ff 	mov.w	r0, #4294967295
  4123f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4123f8:	81ab      	strh	r3, [r5, #12]
  4123fa:	f8c9 2008 	str.w	r2, [r9, #8]
  4123fe:	f8c9 2004 	str.w	r2, [r9, #4]
  412402:	b003      	add	sp, #12
  412404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412408:	2000      	movs	r0, #0
  41240a:	f8c9 0004 	str.w	r0, [r9, #4]
  41240e:	b003      	add	sp, #12
  412410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412414:	230c      	movs	r3, #12
  412416:	9a01      	ldr	r2, [sp, #4]
  412418:	6013      	str	r3, [r2, #0]
  41241a:	e7e7      	b.n	4123ec <__ssprint_r+0xe0>

0041241c <__swbuf_r>:
  41241c:	b570      	push	{r4, r5, r6, lr}
  41241e:	460d      	mov	r5, r1
  412420:	4614      	mov	r4, r2
  412422:	4606      	mov	r6, r0
  412424:	b110      	cbz	r0, 41242c <__swbuf_r+0x10>
  412426:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412428:	2b00      	cmp	r3, #0
  41242a:	d048      	beq.n	4124be <__swbuf_r+0xa2>
  41242c:	89a2      	ldrh	r2, [r4, #12]
  41242e:	69a3      	ldr	r3, [r4, #24]
  412430:	b291      	uxth	r1, r2
  412432:	60a3      	str	r3, [r4, #8]
  412434:	0708      	lsls	r0, r1, #28
  412436:	d538      	bpl.n	4124aa <__swbuf_r+0x8e>
  412438:	6923      	ldr	r3, [r4, #16]
  41243a:	2b00      	cmp	r3, #0
  41243c:	d035      	beq.n	4124aa <__swbuf_r+0x8e>
  41243e:	0489      	lsls	r1, r1, #18
  412440:	b2ed      	uxtb	r5, r5
  412442:	d515      	bpl.n	412470 <__swbuf_r+0x54>
  412444:	6822      	ldr	r2, [r4, #0]
  412446:	6961      	ldr	r1, [r4, #20]
  412448:	1ad3      	subs	r3, r2, r3
  41244a:	428b      	cmp	r3, r1
  41244c:	da1c      	bge.n	412488 <__swbuf_r+0x6c>
  41244e:	3301      	adds	r3, #1
  412450:	68a1      	ldr	r1, [r4, #8]
  412452:	1c50      	adds	r0, r2, #1
  412454:	3901      	subs	r1, #1
  412456:	6020      	str	r0, [r4, #0]
  412458:	60a1      	str	r1, [r4, #8]
  41245a:	7015      	strb	r5, [r2, #0]
  41245c:	6962      	ldr	r2, [r4, #20]
  41245e:	429a      	cmp	r2, r3
  412460:	d01a      	beq.n	412498 <__swbuf_r+0x7c>
  412462:	2d0a      	cmp	r5, #10
  412464:	d102      	bne.n	41246c <__swbuf_r+0x50>
  412466:	7b23      	ldrb	r3, [r4, #12]
  412468:	07db      	lsls	r3, r3, #31
  41246a:	d415      	bmi.n	412498 <__swbuf_r+0x7c>
  41246c:	4628      	mov	r0, r5
  41246e:	bd70      	pop	{r4, r5, r6, pc}
  412470:	6e61      	ldr	r1, [r4, #100]	; 0x64
  412472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  412476:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  41247a:	81a2      	strh	r2, [r4, #12]
  41247c:	6822      	ldr	r2, [r4, #0]
  41247e:	6661      	str	r1, [r4, #100]	; 0x64
  412480:	1ad3      	subs	r3, r2, r3
  412482:	6961      	ldr	r1, [r4, #20]
  412484:	428b      	cmp	r3, r1
  412486:	dbe2      	blt.n	41244e <__swbuf_r+0x32>
  412488:	4630      	mov	r0, r6
  41248a:	4621      	mov	r1, r4
  41248c:	f7fd ff2c 	bl	4102e8 <_fflush_r>
  412490:	b940      	cbnz	r0, 4124a4 <__swbuf_r+0x88>
  412492:	6822      	ldr	r2, [r4, #0]
  412494:	2301      	movs	r3, #1
  412496:	e7db      	b.n	412450 <__swbuf_r+0x34>
  412498:	4630      	mov	r0, r6
  41249a:	4621      	mov	r1, r4
  41249c:	f7fd ff24 	bl	4102e8 <_fflush_r>
  4124a0:	2800      	cmp	r0, #0
  4124a2:	d0e3      	beq.n	41246c <__swbuf_r+0x50>
  4124a4:	f04f 30ff 	mov.w	r0, #4294967295
  4124a8:	bd70      	pop	{r4, r5, r6, pc}
  4124aa:	4630      	mov	r0, r6
  4124ac:	4621      	mov	r1, r4
  4124ae:	f7fc fdf7 	bl	40f0a0 <__swsetup_r>
  4124b2:	2800      	cmp	r0, #0
  4124b4:	d1f6      	bne.n	4124a4 <__swbuf_r+0x88>
  4124b6:	89a2      	ldrh	r2, [r4, #12]
  4124b8:	6923      	ldr	r3, [r4, #16]
  4124ba:	b291      	uxth	r1, r2
  4124bc:	e7bf      	b.n	41243e <__swbuf_r+0x22>
  4124be:	f7fd ffad 	bl	41041c <__sinit>
  4124c2:	e7b3      	b.n	41242c <__swbuf_r+0x10>

004124c4 <_wcrtomb_r>:
  4124c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4124c8:	4605      	mov	r5, r0
  4124ca:	b086      	sub	sp, #24
  4124cc:	461e      	mov	r6, r3
  4124ce:	460c      	mov	r4, r1
  4124d0:	b1a1      	cbz	r1, 4124fc <_wcrtomb_r+0x38>
  4124d2:	4b10      	ldr	r3, [pc, #64]	; (412514 <_wcrtomb_r+0x50>)
  4124d4:	4617      	mov	r7, r2
  4124d6:	f8d3 8000 	ldr.w	r8, [r3]
  4124da:	f7fe fea5 	bl	411228 <__locale_charset>
  4124de:	9600      	str	r6, [sp, #0]
  4124e0:	4603      	mov	r3, r0
  4124e2:	4621      	mov	r1, r4
  4124e4:	4628      	mov	r0, r5
  4124e6:	463a      	mov	r2, r7
  4124e8:	47c0      	blx	r8
  4124ea:	1c43      	adds	r3, r0, #1
  4124ec:	d103      	bne.n	4124f6 <_wcrtomb_r+0x32>
  4124ee:	2200      	movs	r2, #0
  4124f0:	238a      	movs	r3, #138	; 0x8a
  4124f2:	6032      	str	r2, [r6, #0]
  4124f4:	602b      	str	r3, [r5, #0]
  4124f6:	b006      	add	sp, #24
  4124f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4124fc:	4b05      	ldr	r3, [pc, #20]	; (412514 <_wcrtomb_r+0x50>)
  4124fe:	681f      	ldr	r7, [r3, #0]
  412500:	f7fe fe92 	bl	411228 <__locale_charset>
  412504:	9600      	str	r6, [sp, #0]
  412506:	4603      	mov	r3, r0
  412508:	4622      	mov	r2, r4
  41250a:	4628      	mov	r0, r5
  41250c:	a903      	add	r1, sp, #12
  41250e:	47b8      	blx	r7
  412510:	e7eb      	b.n	4124ea <_wcrtomb_r+0x26>
  412512:	bf00      	nop
  412514:	2040094c 	.word	0x2040094c

00412518 <__ascii_wctomb>:
  412518:	b119      	cbz	r1, 412522 <__ascii_wctomb+0xa>
  41251a:	2aff      	cmp	r2, #255	; 0xff
  41251c:	d803      	bhi.n	412526 <__ascii_wctomb+0xe>
  41251e:	700a      	strb	r2, [r1, #0]
  412520:	2101      	movs	r1, #1
  412522:	4608      	mov	r0, r1
  412524:	4770      	bx	lr
  412526:	238a      	movs	r3, #138	; 0x8a
  412528:	f04f 31ff 	mov.w	r1, #4294967295
  41252c:	6003      	str	r3, [r0, #0]
  41252e:	e7f8      	b.n	412522 <__ascii_wctomb+0xa>

00412530 <_write_r>:
  412530:	b570      	push	{r4, r5, r6, lr}
  412532:	4c08      	ldr	r4, [pc, #32]	; (412554 <_write_r+0x24>)
  412534:	2500      	movs	r5, #0
  412536:	4606      	mov	r6, r0
  412538:	4608      	mov	r0, r1
  41253a:	4611      	mov	r1, r2
  41253c:	461a      	mov	r2, r3
  41253e:	6025      	str	r5, [r4, #0]
  412540:	f7f1 f8f6 	bl	403730 <_write>
  412544:	1c43      	adds	r3, r0, #1
  412546:	d000      	beq.n	41254a <_write_r+0x1a>
  412548:	bd70      	pop	{r4, r5, r6, pc}
  41254a:	6823      	ldr	r3, [r4, #0]
  41254c:	2b00      	cmp	r3, #0
  41254e:	d0fb      	beq.n	412548 <_write_r+0x18>
  412550:	6033      	str	r3, [r6, #0]
  412552:	bd70      	pop	{r4, r5, r6, pc}
  412554:	2040c6a4 	.word	0x2040c6a4

00412558 <__register_exitproc>:
  412558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41255c:	4c26      	ldr	r4, [pc, #152]	; (4125f8 <__register_exitproc+0xa0>)
  41255e:	4606      	mov	r6, r0
  412560:	4688      	mov	r8, r1
  412562:	4691      	mov	r9, r2
  412564:	6825      	ldr	r5, [r4, #0]
  412566:	469a      	mov	sl, r3
  412568:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  41256c:	2c00      	cmp	r4, #0
  41256e:	d03a      	beq.n	4125e6 <__register_exitproc+0x8e>
  412570:	6860      	ldr	r0, [r4, #4]
  412572:	281f      	cmp	r0, #31
  412574:	dc19      	bgt.n	4125aa <__register_exitproc+0x52>
  412576:	1c41      	adds	r1, r0, #1
  412578:	b186      	cbz	r6, 41259c <__register_exitproc+0x44>
  41257a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  41257e:	2201      	movs	r2, #1
  412580:	2e02      	cmp	r6, #2
  412582:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  412586:	fa02 f200 	lsl.w	r2, r2, r0
  41258a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  41258e:	ea43 0302 	orr.w	r3, r3, r2
  412592:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  412596:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  41259a:	d01e      	beq.n	4125da <__register_exitproc+0x82>
  41259c:	1c83      	adds	r3, r0, #2
  41259e:	6061      	str	r1, [r4, #4]
  4125a0:	2000      	movs	r0, #0
  4125a2:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  4125a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4125aa:	4b14      	ldr	r3, [pc, #80]	; (4125fc <__register_exitproc+0xa4>)
  4125ac:	b303      	cbz	r3, 4125f0 <__register_exitproc+0x98>
  4125ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4125b2:	f7f8 fe65 	bl	40b280 <malloc>
  4125b6:	4604      	mov	r4, r0
  4125b8:	b1d0      	cbz	r0, 4125f0 <__register_exitproc+0x98>
  4125ba:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4125be:	2700      	movs	r7, #0
  4125c0:	2101      	movs	r1, #1
  4125c2:	6003      	str	r3, [r0, #0]
  4125c4:	4638      	mov	r0, r7
  4125c6:	6067      	str	r7, [r4, #4]
  4125c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4125cc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4125d0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4125d4:	2e00      	cmp	r6, #0
  4125d6:	d0e1      	beq.n	41259c <__register_exitproc+0x44>
  4125d8:	e7cf      	b.n	41257a <__register_exitproc+0x22>
  4125da:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4125de:	431a      	orrs	r2, r3
  4125e0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4125e4:	e7da      	b.n	41259c <__register_exitproc+0x44>
  4125e6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4125ea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4125ee:	e7bf      	b.n	412570 <__register_exitproc+0x18>
  4125f0:	f04f 30ff 	mov.w	r0, #4294967295
  4125f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4125f8:	00413b6c 	.word	0x00413b6c
  4125fc:	0040b281 	.word	0x0040b281

00412600 <_calloc_r>:
  412600:	b510      	push	{r4, lr}
  412602:	fb02 f101 	mul.w	r1, r2, r1
  412606:	f7f8 fe43 	bl	40b290 <_malloc_r>
  41260a:	4604      	mov	r4, r0
  41260c:	b168      	cbz	r0, 41262a <_calloc_r+0x2a>
  41260e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412612:	f022 0203 	bic.w	r2, r2, #3
  412616:	3a04      	subs	r2, #4
  412618:	2a24      	cmp	r2, #36	; 0x24
  41261a:	d814      	bhi.n	412646 <_calloc_r+0x46>
  41261c:	2a13      	cmp	r2, #19
  41261e:	d806      	bhi.n	41262e <_calloc_r+0x2e>
  412620:	4603      	mov	r3, r0
  412622:	2200      	movs	r2, #0
  412624:	601a      	str	r2, [r3, #0]
  412626:	605a      	str	r2, [r3, #4]
  412628:	609a      	str	r2, [r3, #8]
  41262a:	4620      	mov	r0, r4
  41262c:	bd10      	pop	{r4, pc}
  41262e:	2100      	movs	r1, #0
  412630:	2a1b      	cmp	r2, #27
  412632:	6001      	str	r1, [r0, #0]
  412634:	6041      	str	r1, [r0, #4]
  412636:	d90b      	bls.n	412650 <_calloc_r+0x50>
  412638:	2a24      	cmp	r2, #36	; 0x24
  41263a:	6081      	str	r1, [r0, #8]
  41263c:	60c1      	str	r1, [r0, #12]
  41263e:	d00a      	beq.n	412656 <_calloc_r+0x56>
  412640:	f100 0310 	add.w	r3, r0, #16
  412644:	e7ed      	b.n	412622 <_calloc_r+0x22>
  412646:	2100      	movs	r1, #0
  412648:	f7f9 f968 	bl	40b91c <memset>
  41264c:	4620      	mov	r0, r4
  41264e:	bd10      	pop	{r4, pc}
  412650:	f100 0308 	add.w	r3, r0, #8
  412654:	e7e5      	b.n	412622 <_calloc_r+0x22>
  412656:	6101      	str	r1, [r0, #16]
  412658:	f100 0318 	add.w	r3, r0, #24
  41265c:	6141      	str	r1, [r0, #20]
  41265e:	e7e0      	b.n	412622 <_calloc_r+0x22>

00412660 <_close_r>:
  412660:	b538      	push	{r3, r4, r5, lr}
  412662:	2300      	movs	r3, #0
  412664:	4c06      	ldr	r4, [pc, #24]	; (412680 <_close_r+0x20>)
  412666:	4605      	mov	r5, r0
  412668:	4608      	mov	r0, r1
  41266a:	6023      	str	r3, [r4, #0]
  41266c:	f7f1 f85c 	bl	403728 <_close>
  412670:	1c43      	adds	r3, r0, #1
  412672:	d000      	beq.n	412676 <_close_r+0x16>
  412674:	bd38      	pop	{r3, r4, r5, pc}
  412676:	6823      	ldr	r3, [r4, #0]
  412678:	2b00      	cmp	r3, #0
  41267a:	d0fb      	beq.n	412674 <_close_r+0x14>
  41267c:	602b      	str	r3, [r5, #0]
  41267e:	bd38      	pop	{r3, r4, r5, pc}
  412680:	2040c6a4 	.word	0x2040c6a4

00412684 <_fclose_r>:
  412684:	2900      	cmp	r1, #0
  412686:	d03d      	beq.n	412704 <_fclose_r+0x80>
  412688:	b570      	push	{r4, r5, r6, lr}
  41268a:	4605      	mov	r5, r0
  41268c:	460c      	mov	r4, r1
  41268e:	b108      	cbz	r0, 412694 <_fclose_r+0x10>
  412690:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412692:	b37b      	cbz	r3, 4126f4 <_fclose_r+0x70>
  412694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412698:	b90b      	cbnz	r3, 41269e <_fclose_r+0x1a>
  41269a:	2000      	movs	r0, #0
  41269c:	bd70      	pop	{r4, r5, r6, pc}
  41269e:	4628      	mov	r0, r5
  4126a0:	4621      	mov	r1, r4
  4126a2:	f7fd fd7d 	bl	4101a0 <__sflush_r>
  4126a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4126a8:	4606      	mov	r6, r0
  4126aa:	b133      	cbz	r3, 4126ba <_fclose_r+0x36>
  4126ac:	4628      	mov	r0, r5
  4126ae:	69e1      	ldr	r1, [r4, #28]
  4126b0:	4798      	blx	r3
  4126b2:	2800      	cmp	r0, #0
  4126b4:	bfb8      	it	lt
  4126b6:	f04f 36ff 	movlt.w	r6, #4294967295
  4126ba:	89a3      	ldrh	r3, [r4, #12]
  4126bc:	061b      	lsls	r3, r3, #24
  4126be:	d41c      	bmi.n	4126fa <_fclose_r+0x76>
  4126c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4126c2:	b141      	cbz	r1, 4126d6 <_fclose_r+0x52>
  4126c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4126c8:	4299      	cmp	r1, r3
  4126ca:	d002      	beq.n	4126d2 <_fclose_r+0x4e>
  4126cc:	4628      	mov	r0, r5
  4126ce:	f7fd ff7d 	bl	4105cc <_free_r>
  4126d2:	2300      	movs	r3, #0
  4126d4:	6323      	str	r3, [r4, #48]	; 0x30
  4126d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4126d8:	b121      	cbz	r1, 4126e4 <_fclose_r+0x60>
  4126da:	4628      	mov	r0, r5
  4126dc:	f7fd ff76 	bl	4105cc <_free_r>
  4126e0:	2300      	movs	r3, #0
  4126e2:	6463      	str	r3, [r4, #68]	; 0x44
  4126e4:	f7fd fea0 	bl	410428 <__sfp_lock_acquire>
  4126e8:	2300      	movs	r3, #0
  4126ea:	81a3      	strh	r3, [r4, #12]
  4126ec:	f7fd fe9e 	bl	41042c <__sfp_lock_release>
  4126f0:	4630      	mov	r0, r6
  4126f2:	bd70      	pop	{r4, r5, r6, pc}
  4126f4:	f7fd fe92 	bl	41041c <__sinit>
  4126f8:	e7cc      	b.n	412694 <_fclose_r+0x10>
  4126fa:	4628      	mov	r0, r5
  4126fc:	6921      	ldr	r1, [r4, #16]
  4126fe:	f7fd ff65 	bl	4105cc <_free_r>
  412702:	e7dd      	b.n	4126c0 <_fclose_r+0x3c>
  412704:	2000      	movs	r0, #0
  412706:	4770      	bx	lr

00412708 <_fstat_r>:
  412708:	b538      	push	{r3, r4, r5, lr}
  41270a:	2300      	movs	r3, #0
  41270c:	4c07      	ldr	r4, [pc, #28]	; (41272c <_fstat_r+0x24>)
  41270e:	4605      	mov	r5, r0
  412710:	4608      	mov	r0, r1
  412712:	4611      	mov	r1, r2
  412714:	6023      	str	r3, [r4, #0]
  412716:	f7f1 f813 	bl	403740 <_fstat>
  41271a:	1c43      	adds	r3, r0, #1
  41271c:	d000      	beq.n	412720 <_fstat_r+0x18>
  41271e:	bd38      	pop	{r3, r4, r5, pc}
  412720:	6823      	ldr	r3, [r4, #0]
  412722:	2b00      	cmp	r3, #0
  412724:	d0fb      	beq.n	41271e <_fstat_r+0x16>
  412726:	602b      	str	r3, [r5, #0]
  412728:	bd38      	pop	{r3, r4, r5, pc}
  41272a:	bf00      	nop
  41272c:	2040c6a4 	.word	0x2040c6a4

00412730 <_isatty_r>:
  412730:	b538      	push	{r3, r4, r5, lr}
  412732:	2300      	movs	r3, #0
  412734:	4c06      	ldr	r4, [pc, #24]	; (412750 <_isatty_r+0x20>)
  412736:	4605      	mov	r5, r0
  412738:	4608      	mov	r0, r1
  41273a:	6023      	str	r3, [r4, #0]
  41273c:	f7f1 f806 	bl	40374c <_isatty>
  412740:	1c43      	adds	r3, r0, #1
  412742:	d000      	beq.n	412746 <_isatty_r+0x16>
  412744:	bd38      	pop	{r3, r4, r5, pc}
  412746:	6823      	ldr	r3, [r4, #0]
  412748:	2b00      	cmp	r3, #0
  41274a:	d0fb      	beq.n	412744 <_isatty_r+0x14>
  41274c:	602b      	str	r3, [r5, #0]
  41274e:	bd38      	pop	{r3, r4, r5, pc}
  412750:	2040c6a4 	.word	0x2040c6a4

00412754 <_lseek_r>:
  412754:	b570      	push	{r4, r5, r6, lr}
  412756:	4c08      	ldr	r4, [pc, #32]	; (412778 <_lseek_r+0x24>)
  412758:	2500      	movs	r5, #0
  41275a:	4606      	mov	r6, r0
  41275c:	4608      	mov	r0, r1
  41275e:	4611      	mov	r1, r2
  412760:	461a      	mov	r2, r3
  412762:	6025      	str	r5, [r4, #0]
  412764:	f7f0 fff4 	bl	403750 <_lseek>
  412768:	1c43      	adds	r3, r0, #1
  41276a:	d000      	beq.n	41276e <_lseek_r+0x1a>
  41276c:	bd70      	pop	{r4, r5, r6, pc}
  41276e:	6823      	ldr	r3, [r4, #0]
  412770:	2b00      	cmp	r3, #0
  412772:	d0fb      	beq.n	41276c <_lseek_r+0x18>
  412774:	6033      	str	r3, [r6, #0]
  412776:	bd70      	pop	{r4, r5, r6, pc}
  412778:	2040c6a4 	.word	0x2040c6a4

0041277c <_read_r>:
  41277c:	b570      	push	{r4, r5, r6, lr}
  41277e:	4c08      	ldr	r4, [pc, #32]	; (4127a0 <_read_r+0x24>)
  412780:	2500      	movs	r5, #0
  412782:	4606      	mov	r6, r0
  412784:	4608      	mov	r0, r1
  412786:	4611      	mov	r1, r2
  412788:	461a      	mov	r2, r3
  41278a:	6025      	str	r5, [r4, #0]
  41278c:	f7f0 ffd4 	bl	403738 <_read>
  412790:	1c43      	adds	r3, r0, #1
  412792:	d000      	beq.n	412796 <_read_r+0x1a>
  412794:	bd70      	pop	{r4, r5, r6, pc}
  412796:	6823      	ldr	r3, [r4, #0]
  412798:	2b00      	cmp	r3, #0
  41279a:	d0fb      	beq.n	412794 <_read_r+0x18>
  41279c:	6033      	str	r3, [r6, #0]
  41279e:	bd70      	pop	{r4, r5, r6, pc}
  4127a0:	2040c6a4 	.word	0x2040c6a4

004127a4 <__aeabi_d2uiz>:
  4127a4:	004a      	lsls	r2, r1, #1
  4127a6:	d211      	bcs.n	4127cc <__aeabi_d2uiz+0x28>
  4127a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4127ac:	d211      	bcs.n	4127d2 <__aeabi_d2uiz+0x2e>
  4127ae:	d50d      	bpl.n	4127cc <__aeabi_d2uiz+0x28>
  4127b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4127b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4127b8:	d40e      	bmi.n	4127d8 <__aeabi_d2uiz+0x34>
  4127ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4127be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4127c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4127c6:	fa23 f002 	lsr.w	r0, r3, r2
  4127ca:	4770      	bx	lr
  4127cc:	f04f 0000 	mov.w	r0, #0
  4127d0:	4770      	bx	lr
  4127d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4127d6:	d102      	bne.n	4127de <__aeabi_d2uiz+0x3a>
  4127d8:	f04f 30ff 	mov.w	r0, #4294967295
  4127dc:	4770      	bx	lr
  4127de:	f04f 0000 	mov.w	r0, #0
  4127e2:	4770      	bx	lr

004127e4 <__aeabi_uldivmod>:
  4127e4:	b953      	cbnz	r3, 4127fc <__aeabi_uldivmod+0x18>
  4127e6:	b94a      	cbnz	r2, 4127fc <__aeabi_uldivmod+0x18>
  4127e8:	2900      	cmp	r1, #0
  4127ea:	bf08      	it	eq
  4127ec:	2800      	cmpeq	r0, #0
  4127ee:	bf1c      	itt	ne
  4127f0:	f04f 31ff 	movne.w	r1, #4294967295
  4127f4:	f04f 30ff 	movne.w	r0, #4294967295
  4127f8:	f000 b83c 	b.w	412874 <__aeabi_idiv0>
  4127fc:	b082      	sub	sp, #8
  4127fe:	46ec      	mov	ip, sp
  412800:	e92d 5000 	stmdb	sp!, {ip, lr}
  412804:	f000 f81e 	bl	412844 <__gnu_uldivmod_helper>
  412808:	f8dd e004 	ldr.w	lr, [sp, #4]
  41280c:	b002      	add	sp, #8
  41280e:	bc0c      	pop	{r2, r3}
  412810:	4770      	bx	lr
  412812:	bf00      	nop

00412814 <__gnu_ldivmod_helper>:
  412814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412818:	4690      	mov	r8, r2
  41281a:	4606      	mov	r6, r0
  41281c:	460f      	mov	r7, r1
  41281e:	461d      	mov	r5, r3
  412820:	9c06      	ldr	r4, [sp, #24]
  412822:	f000 f829 	bl	412878 <__divdi3>
  412826:	fb08 fc01 	mul.w	ip, r8, r1
  41282a:	4686      	mov	lr, r0
  41282c:	fba8 2300 	umull	r2, r3, r8, r0
  412830:	fb00 c505 	mla	r5, r0, r5, ip
  412834:	1ab2      	subs	r2, r6, r2
  412836:	442b      	add	r3, r5
  412838:	eb67 0303 	sbc.w	r3, r7, r3
  41283c:	e9c4 2300 	strd	r2, r3, [r4]
  412840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00412844 <__gnu_uldivmod_helper>:
  412844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412848:	461d      	mov	r5, r3
  41284a:	4617      	mov	r7, r2
  41284c:	4680      	mov	r8, r0
  41284e:	4689      	mov	r9, r1
  412850:	9e08      	ldr	r6, [sp, #32]
  412852:	f000 f953 	bl	412afc <__udivdi3>
  412856:	fb00 f305 	mul.w	r3, r0, r5
  41285a:	fba0 4507 	umull	r4, r5, r0, r7
  41285e:	fb07 3701 	mla	r7, r7, r1, r3
  412862:	ebb8 0404 	subs.w	r4, r8, r4
  412866:	443d      	add	r5, r7
  412868:	eb69 0505 	sbc.w	r5, r9, r5
  41286c:	e9c6 4500 	strd	r4, r5, [r6]
  412870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00412874 <__aeabi_idiv0>:
  412874:	4770      	bx	lr
  412876:	bf00      	nop

00412878 <__divdi3>:
  412878:	2900      	cmp	r1, #0
  41287a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41287e:	f2c0 80a2 	blt.w	4129c6 <__divdi3+0x14e>
  412882:	2600      	movs	r6, #0
  412884:	2b00      	cmp	r3, #0
  412886:	f2c0 8098 	blt.w	4129ba <__divdi3+0x142>
  41288a:	468c      	mov	ip, r1
  41288c:	4690      	mov	r8, r2
  41288e:	469e      	mov	lr, r3
  412890:	4615      	mov	r5, r2
  412892:	4604      	mov	r4, r0
  412894:	460f      	mov	r7, r1
  412896:	bbcb      	cbnz	r3, 41290c <__divdi3+0x94>
  412898:	428a      	cmp	r2, r1
  41289a:	d956      	bls.n	41294a <__divdi3+0xd2>
  41289c:	fab2 f382 	clz	r3, r2
  4128a0:	b13b      	cbz	r3, 4128b2 <__divdi3+0x3a>
  4128a2:	f1c3 0220 	rsb	r2, r3, #32
  4128a6:	409f      	lsls	r7, r3
  4128a8:	409d      	lsls	r5, r3
  4128aa:	409c      	lsls	r4, r3
  4128ac:	fa20 f202 	lsr.w	r2, r0, r2
  4128b0:	4317      	orrs	r7, r2
  4128b2:	0c28      	lsrs	r0, r5, #16
  4128b4:	0c22      	lsrs	r2, r4, #16
  4128b6:	fa1f fe85 	uxth.w	lr, r5
  4128ba:	fbb7 f1f0 	udiv	r1, r7, r0
  4128be:	fb00 7711 	mls	r7, r0, r1, r7
  4128c2:	fb0e f301 	mul.w	r3, lr, r1
  4128c6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4128ca:	42bb      	cmp	r3, r7
  4128cc:	d907      	bls.n	4128de <__divdi3+0x66>
  4128ce:	197f      	adds	r7, r7, r5
  4128d0:	f080 8101 	bcs.w	412ad6 <__divdi3+0x25e>
  4128d4:	42bb      	cmp	r3, r7
  4128d6:	f240 80fe 	bls.w	412ad6 <__divdi3+0x25e>
  4128da:	3902      	subs	r1, #2
  4128dc:	442f      	add	r7, r5
  4128de:	1aff      	subs	r7, r7, r3
  4128e0:	b2a4      	uxth	r4, r4
  4128e2:	fbb7 f3f0 	udiv	r3, r7, r0
  4128e6:	fb00 7713 	mls	r7, r0, r3, r7
  4128ea:	fb0e fe03 	mul.w	lr, lr, r3
  4128ee:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4128f2:	45be      	cmp	lr, r7
  4128f4:	d906      	bls.n	412904 <__divdi3+0x8c>
  4128f6:	197f      	adds	r7, r7, r5
  4128f8:	f080 80eb 	bcs.w	412ad2 <__divdi3+0x25a>
  4128fc:	45be      	cmp	lr, r7
  4128fe:	f240 80e8 	bls.w	412ad2 <__divdi3+0x25a>
  412902:	3b02      	subs	r3, #2
  412904:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  412908:	2200      	movs	r2, #0
  41290a:	e003      	b.n	412914 <__divdi3+0x9c>
  41290c:	428b      	cmp	r3, r1
  41290e:	d90f      	bls.n	412930 <__divdi3+0xb8>
  412910:	2200      	movs	r2, #0
  412912:	4613      	mov	r3, r2
  412914:	1c34      	adds	r4, r6, #0
  412916:	f04f 0500 	mov.w	r5, #0
  41291a:	bf18      	it	ne
  41291c:	2401      	movne	r4, #1
  41291e:	4260      	negs	r0, r4
  412920:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  412924:	4058      	eors	r0, r3
  412926:	4051      	eors	r1, r2
  412928:	1900      	adds	r0, r0, r4
  41292a:	4169      	adcs	r1, r5
  41292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412930:	fab3 f283 	clz	r2, r3
  412934:	2a00      	cmp	r2, #0
  412936:	f040 8083 	bne.w	412a40 <__divdi3+0x1c8>
  41293a:	4580      	cmp	r8, r0
  41293c:	f240 80cd 	bls.w	412ada <__divdi3+0x262>
  412940:	428b      	cmp	r3, r1
  412942:	f0c0 80ca 	bcc.w	412ada <__divdi3+0x262>
  412946:	4613      	mov	r3, r2
  412948:	e7e4      	b.n	412914 <__divdi3+0x9c>
  41294a:	b912      	cbnz	r2, 412952 <__divdi3+0xda>
  41294c:	2301      	movs	r3, #1
  41294e:	fbb3 f5f2 	udiv	r5, r3, r2
  412952:	fab5 f285 	clz	r2, r5
  412956:	2a00      	cmp	r2, #0
  412958:	d13b      	bne.n	4129d2 <__divdi3+0x15a>
  41295a:	1b78      	subs	r0, r7, r5
  41295c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412960:	fa1f fc85 	uxth.w	ip, r5
  412964:	2201      	movs	r2, #1
  412966:	0c21      	lsrs	r1, r4, #16
  412968:	fbb0 f8fe 	udiv	r8, r0, lr
  41296c:	fb0e 0018 	mls	r0, lr, r8, r0
  412970:	fb0c f308 	mul.w	r3, ip, r8
  412974:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  412978:	42bb      	cmp	r3, r7
  41297a:	d908      	bls.n	41298e <__divdi3+0x116>
  41297c:	197f      	adds	r7, r7, r5
  41297e:	f080 80b0 	bcs.w	412ae2 <__divdi3+0x26a>
  412982:	42bb      	cmp	r3, r7
  412984:	f240 80ad 	bls.w	412ae2 <__divdi3+0x26a>
  412988:	f1a8 0802 	sub.w	r8, r8, #2
  41298c:	442f      	add	r7, r5
  41298e:	1aff      	subs	r7, r7, r3
  412990:	b2a4      	uxth	r4, r4
  412992:	fbb7 f3fe 	udiv	r3, r7, lr
  412996:	fb0e 7713 	mls	r7, lr, r3, r7
  41299a:	fb0c fc03 	mul.w	ip, ip, r3
  41299e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4129a2:	45bc      	cmp	ip, r7
  4129a4:	d906      	bls.n	4129b4 <__divdi3+0x13c>
  4129a6:	197f      	adds	r7, r7, r5
  4129a8:	f080 8099 	bcs.w	412ade <__divdi3+0x266>
  4129ac:	45bc      	cmp	ip, r7
  4129ae:	f240 8096 	bls.w	412ade <__divdi3+0x266>
  4129b2:	3b02      	subs	r3, #2
  4129b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4129b8:	e7ac      	b.n	412914 <__divdi3+0x9c>
  4129ba:	4252      	negs	r2, r2
  4129bc:	ea6f 0606 	mvn.w	r6, r6
  4129c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4129c4:	e761      	b.n	41288a <__divdi3+0x12>
  4129c6:	4240      	negs	r0, r0
  4129c8:	f04f 36ff 	mov.w	r6, #4294967295
  4129cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4129d0:	e758      	b.n	412884 <__divdi3+0xc>
  4129d2:	4095      	lsls	r5, r2
  4129d4:	f1c2 0120 	rsb	r1, r2, #32
  4129d8:	fa07 f302 	lsl.w	r3, r7, r2
  4129dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4129e0:	40cf      	lsrs	r7, r1
  4129e2:	fa24 f101 	lsr.w	r1, r4, r1
  4129e6:	4094      	lsls	r4, r2
  4129e8:	fa1f fc85 	uxth.w	ip, r5
  4129ec:	4319      	orrs	r1, r3
  4129ee:	fbb7 f2fe 	udiv	r2, r7, lr
  4129f2:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4129f6:	fb0e 7712 	mls	r7, lr, r2, r7
  4129fa:	fb0c f302 	mul.w	r3, ip, r2
  4129fe:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  412a02:	42bb      	cmp	r3, r7
  412a04:	d905      	bls.n	412a12 <__divdi3+0x19a>
  412a06:	197f      	adds	r7, r7, r5
  412a08:	d271      	bcs.n	412aee <__divdi3+0x276>
  412a0a:	42bb      	cmp	r3, r7
  412a0c:	d96f      	bls.n	412aee <__divdi3+0x276>
  412a0e:	3a02      	subs	r2, #2
  412a10:	442f      	add	r7, r5
  412a12:	1aff      	subs	r7, r7, r3
  412a14:	b289      	uxth	r1, r1
  412a16:	fbb7 f8fe 	udiv	r8, r7, lr
  412a1a:	fb0e 7718 	mls	r7, lr, r8, r7
  412a1e:	fb0c f008 	mul.w	r0, ip, r8
  412a22:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  412a26:	4298      	cmp	r0, r3
  412a28:	d906      	bls.n	412a38 <__divdi3+0x1c0>
  412a2a:	195b      	adds	r3, r3, r5
  412a2c:	d261      	bcs.n	412af2 <__divdi3+0x27a>
  412a2e:	4298      	cmp	r0, r3
  412a30:	d95f      	bls.n	412af2 <__divdi3+0x27a>
  412a32:	f1a8 0802 	sub.w	r8, r8, #2
  412a36:	442b      	add	r3, r5
  412a38:	1a18      	subs	r0, r3, r0
  412a3a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  412a3e:	e792      	b.n	412966 <__divdi3+0xee>
  412a40:	f1c2 0720 	rsb	r7, r2, #32
  412a44:	fa03 fe02 	lsl.w	lr, r3, r2
  412a48:	fa08 f502 	lsl.w	r5, r8, r2
  412a4c:	4091      	lsls	r1, r2
  412a4e:	fa28 f307 	lsr.w	r3, r8, r7
  412a52:	fa2c fc07 	lsr.w	ip, ip, r7
  412a56:	40f8      	lsrs	r0, r7
  412a58:	ea43 0e0e 	orr.w	lr, r3, lr
  412a5c:	4308      	orrs	r0, r1
  412a5e:	ea4f 481e 	mov.w	r8, lr, lsr #16
  412a62:	0c07      	lsrs	r7, r0, #16
  412a64:	fa1f fa8e 	uxth.w	sl, lr
  412a68:	fbbc f9f8 	udiv	r9, ip, r8
  412a6c:	fb08 cc19 	mls	ip, r8, r9, ip
  412a70:	fb0a f109 	mul.w	r1, sl, r9
  412a74:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  412a78:	4561      	cmp	r1, ip
  412a7a:	d907      	bls.n	412a8c <__divdi3+0x214>
  412a7c:	eb1c 0c0e 	adds.w	ip, ip, lr
  412a80:	d232      	bcs.n	412ae8 <__divdi3+0x270>
  412a82:	4561      	cmp	r1, ip
  412a84:	d930      	bls.n	412ae8 <__divdi3+0x270>
  412a86:	f1a9 0902 	sub.w	r9, r9, #2
  412a8a:	44f4      	add	ip, lr
  412a8c:	ebc1 0c0c 	rsb	ip, r1, ip
  412a90:	b280      	uxth	r0, r0
  412a92:	fbbc f3f8 	udiv	r3, ip, r8
  412a96:	fb08 cc13 	mls	ip, r8, r3, ip
  412a9a:	fb0a fa03 	mul.w	sl, sl, r3
  412a9e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  412aa2:	458a      	cmp	sl, r1
  412aa4:	d906      	bls.n	412ab4 <__divdi3+0x23c>
  412aa6:	eb11 010e 	adds.w	r1, r1, lr
  412aaa:	d225      	bcs.n	412af8 <__divdi3+0x280>
  412aac:	458a      	cmp	sl, r1
  412aae:	d923      	bls.n	412af8 <__divdi3+0x280>
  412ab0:	3b02      	subs	r3, #2
  412ab2:	4471      	add	r1, lr
  412ab4:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  412ab8:	ebca 0101 	rsb	r1, sl, r1
  412abc:	fba3 8905 	umull	r8, r9, r3, r5
  412ac0:	4549      	cmp	r1, r9
  412ac2:	d303      	bcc.n	412acc <__divdi3+0x254>
  412ac4:	d103      	bne.n	412ace <__divdi3+0x256>
  412ac6:	4094      	lsls	r4, r2
  412ac8:	4544      	cmp	r4, r8
  412aca:	d200      	bcs.n	412ace <__divdi3+0x256>
  412acc:	3b01      	subs	r3, #1
  412ace:	2200      	movs	r2, #0
  412ad0:	e720      	b.n	412914 <__divdi3+0x9c>
  412ad2:	3b01      	subs	r3, #1
  412ad4:	e716      	b.n	412904 <__divdi3+0x8c>
  412ad6:	3901      	subs	r1, #1
  412ad8:	e701      	b.n	4128de <__divdi3+0x66>
  412ada:	2301      	movs	r3, #1
  412adc:	e71a      	b.n	412914 <__divdi3+0x9c>
  412ade:	3b01      	subs	r3, #1
  412ae0:	e768      	b.n	4129b4 <__divdi3+0x13c>
  412ae2:	f108 38ff 	add.w	r8, r8, #4294967295
  412ae6:	e752      	b.n	41298e <__divdi3+0x116>
  412ae8:	f109 39ff 	add.w	r9, r9, #4294967295
  412aec:	e7ce      	b.n	412a8c <__divdi3+0x214>
  412aee:	3a01      	subs	r2, #1
  412af0:	e78f      	b.n	412a12 <__divdi3+0x19a>
  412af2:	f108 38ff 	add.w	r8, r8, #4294967295
  412af6:	e79f      	b.n	412a38 <__divdi3+0x1c0>
  412af8:	3b01      	subs	r3, #1
  412afa:	e7db      	b.n	412ab4 <__divdi3+0x23c>

00412afc <__udivdi3>:
  412afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412b00:	2b00      	cmp	r3, #0
  412b02:	d140      	bne.n	412b86 <__udivdi3+0x8a>
  412b04:	428a      	cmp	r2, r1
  412b06:	4604      	mov	r4, r0
  412b08:	4615      	mov	r5, r2
  412b0a:	d94a      	bls.n	412ba2 <__udivdi3+0xa6>
  412b0c:	fab2 f382 	clz	r3, r2
  412b10:	460f      	mov	r7, r1
  412b12:	b14b      	cbz	r3, 412b28 <__udivdi3+0x2c>
  412b14:	f1c3 0620 	rsb	r6, r3, #32
  412b18:	4099      	lsls	r1, r3
  412b1a:	fa00 f403 	lsl.w	r4, r0, r3
  412b1e:	fa02 f503 	lsl.w	r5, r2, r3
  412b22:	40f0      	lsrs	r0, r6
  412b24:	ea40 0701 	orr.w	r7, r0, r1
  412b28:	0c29      	lsrs	r1, r5, #16
  412b2a:	0c26      	lsrs	r6, r4, #16
  412b2c:	fa1f fe85 	uxth.w	lr, r5
  412b30:	fbb7 f0f1 	udiv	r0, r7, r1
  412b34:	fb01 7710 	mls	r7, r1, r0, r7
  412b38:	fb0e f200 	mul.w	r2, lr, r0
  412b3c:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  412b40:	429a      	cmp	r2, r3
  412b42:	d907      	bls.n	412b54 <__udivdi3+0x58>
  412b44:	195b      	adds	r3, r3, r5
  412b46:	f080 80ea 	bcs.w	412d1e <__udivdi3+0x222>
  412b4a:	429a      	cmp	r2, r3
  412b4c:	f240 80e7 	bls.w	412d1e <__udivdi3+0x222>
  412b50:	3802      	subs	r0, #2
  412b52:	442b      	add	r3, r5
  412b54:	1a9a      	subs	r2, r3, r2
  412b56:	b2a4      	uxth	r4, r4
  412b58:	fbb2 f3f1 	udiv	r3, r2, r1
  412b5c:	fb01 2213 	mls	r2, r1, r3, r2
  412b60:	fb0e fe03 	mul.w	lr, lr, r3
  412b64:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  412b68:	4596      	cmp	lr, r2
  412b6a:	d906      	bls.n	412b7a <__udivdi3+0x7e>
  412b6c:	1952      	adds	r2, r2, r5
  412b6e:	f080 80da 	bcs.w	412d26 <__udivdi3+0x22a>
  412b72:	4596      	cmp	lr, r2
  412b74:	f240 80d7 	bls.w	412d26 <__udivdi3+0x22a>
  412b78:	3b02      	subs	r3, #2
  412b7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  412b7e:	2600      	movs	r6, #0
  412b80:	4631      	mov	r1, r6
  412b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412b86:	428b      	cmp	r3, r1
  412b88:	d844      	bhi.n	412c14 <__udivdi3+0x118>
  412b8a:	fab3 f683 	clz	r6, r3
  412b8e:	2e00      	cmp	r6, #0
  412b90:	d145      	bne.n	412c1e <__udivdi3+0x122>
  412b92:	4282      	cmp	r2, r0
  412b94:	f240 80bf 	bls.w	412d16 <__udivdi3+0x21a>
  412b98:	428b      	cmp	r3, r1
  412b9a:	f0c0 80bc 	bcc.w	412d16 <__udivdi3+0x21a>
  412b9e:	4630      	mov	r0, r6
  412ba0:	e7ee      	b.n	412b80 <__udivdi3+0x84>
  412ba2:	b912      	cbnz	r2, 412baa <__udivdi3+0xae>
  412ba4:	2501      	movs	r5, #1
  412ba6:	fbb5 f5f2 	udiv	r5, r5, r2
  412baa:	fab5 f285 	clz	r2, r5
  412bae:	2a00      	cmp	r2, #0
  412bb0:	d17b      	bne.n	412caa <__udivdi3+0x1ae>
  412bb2:	1b4a      	subs	r2, r1, r5
  412bb4:	0c2f      	lsrs	r7, r5, #16
  412bb6:	fa1f fe85 	uxth.w	lr, r5
  412bba:	2601      	movs	r6, #1
  412bbc:	0c23      	lsrs	r3, r4, #16
  412bbe:	fbb2 f0f7 	udiv	r0, r2, r7
  412bc2:	fb07 2210 	mls	r2, r7, r0, r2
  412bc6:	fb0e fc00 	mul.w	ip, lr, r0
  412bca:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  412bce:	458c      	cmp	ip, r1
  412bd0:	d907      	bls.n	412be2 <__udivdi3+0xe6>
  412bd2:	1949      	adds	r1, r1, r5
  412bd4:	f080 80a1 	bcs.w	412d1a <__udivdi3+0x21e>
  412bd8:	458c      	cmp	ip, r1
  412bda:	f240 809e 	bls.w	412d1a <__udivdi3+0x21e>
  412bde:	3802      	subs	r0, #2
  412be0:	4429      	add	r1, r5
  412be2:	ebcc 0101 	rsb	r1, ip, r1
  412be6:	b2a4      	uxth	r4, r4
  412be8:	fbb1 f3f7 	udiv	r3, r1, r7
  412bec:	fb07 1113 	mls	r1, r7, r3, r1
  412bf0:	fb0e fe03 	mul.w	lr, lr, r3
  412bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  412bf8:	45a6      	cmp	lr, r4
  412bfa:	d906      	bls.n	412c0a <__udivdi3+0x10e>
  412bfc:	1964      	adds	r4, r4, r5
  412bfe:	f080 8090 	bcs.w	412d22 <__udivdi3+0x226>
  412c02:	45a6      	cmp	lr, r4
  412c04:	f240 808d 	bls.w	412d22 <__udivdi3+0x226>
  412c08:	3b02      	subs	r3, #2
  412c0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  412c0e:	4631      	mov	r1, r6
  412c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412c14:	2600      	movs	r6, #0
  412c16:	4630      	mov	r0, r6
  412c18:	4631      	mov	r1, r6
  412c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412c1e:	f1c6 0520 	rsb	r5, r6, #32
  412c22:	40b3      	lsls	r3, r6
  412c24:	fa02 f706 	lsl.w	r7, r2, r6
  412c28:	fa01 f406 	lsl.w	r4, r1, r6
  412c2c:	40ea      	lsrs	r2, r5
  412c2e:	40e9      	lsrs	r1, r5
  412c30:	fa20 f505 	lsr.w	r5, r0, r5
  412c34:	431a      	orrs	r2, r3
  412c36:	4325      	orrs	r5, r4
  412c38:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  412c3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412c40:	b293      	uxth	r3, r2
  412c42:	fbb1 f8fc 	udiv	r8, r1, ip
  412c46:	fb0c 1118 	mls	r1, ip, r8, r1
  412c4a:	fb03 f408 	mul.w	r4, r3, r8
  412c4e:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  412c52:	428c      	cmp	r4, r1
  412c54:	d906      	bls.n	412c64 <__udivdi3+0x168>
  412c56:	1889      	adds	r1, r1, r2
  412c58:	d269      	bcs.n	412d2e <__udivdi3+0x232>
  412c5a:	428c      	cmp	r4, r1
  412c5c:	d967      	bls.n	412d2e <__udivdi3+0x232>
  412c5e:	f1a8 0802 	sub.w	r8, r8, #2
  412c62:	4411      	add	r1, r2
  412c64:	1b09      	subs	r1, r1, r4
  412c66:	b2ad      	uxth	r5, r5
  412c68:	fbb1 f4fc 	udiv	r4, r1, ip
  412c6c:	fb0c 1114 	mls	r1, ip, r4, r1
  412c70:	fb03 fe04 	mul.w	lr, r3, r4
  412c74:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  412c78:	459e      	cmp	lr, r3
  412c7a:	d905      	bls.n	412c88 <__udivdi3+0x18c>
  412c7c:	189b      	adds	r3, r3, r2
  412c7e:	d254      	bcs.n	412d2a <__udivdi3+0x22e>
  412c80:	459e      	cmp	lr, r3
  412c82:	d952      	bls.n	412d2a <__udivdi3+0x22e>
  412c84:	3c02      	subs	r4, #2
  412c86:	4413      	add	r3, r2
  412c88:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  412c8c:	ebce 0303 	rsb	r3, lr, r3
  412c90:	fba4 8907 	umull	r8, r9, r4, r7
  412c94:	454b      	cmp	r3, r9
  412c96:	d303      	bcc.n	412ca0 <__udivdi3+0x1a4>
  412c98:	d151      	bne.n	412d3e <__udivdi3+0x242>
  412c9a:	40b0      	lsls	r0, r6
  412c9c:	4540      	cmp	r0, r8
  412c9e:	d24e      	bcs.n	412d3e <__udivdi3+0x242>
  412ca0:	2600      	movs	r6, #0
  412ca2:	1e60      	subs	r0, r4, #1
  412ca4:	4631      	mov	r1, r6
  412ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412caa:	f1c2 0620 	rsb	r6, r2, #32
  412cae:	4095      	lsls	r5, r2
  412cb0:	fa01 f302 	lsl.w	r3, r1, r2
  412cb4:	fa00 f402 	lsl.w	r4, r0, r2
  412cb8:	0c2f      	lsrs	r7, r5, #16
  412cba:	40f1      	lsrs	r1, r6
  412cbc:	40f0      	lsrs	r0, r6
  412cbe:	fa1f fe85 	uxth.w	lr, r5
  412cc2:	fbb1 f6f7 	udiv	r6, r1, r7
  412cc6:	4318      	orrs	r0, r3
  412cc8:	fb07 1116 	mls	r1, r7, r6, r1
  412ccc:	fb0e f206 	mul.w	r2, lr, r6
  412cd0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  412cd4:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  412cd8:	429a      	cmp	r2, r3
  412cda:	d905      	bls.n	412ce8 <__udivdi3+0x1ec>
  412cdc:	195b      	adds	r3, r3, r5
  412cde:	d229      	bcs.n	412d34 <__udivdi3+0x238>
  412ce0:	429a      	cmp	r2, r3
  412ce2:	d927      	bls.n	412d34 <__udivdi3+0x238>
  412ce4:	3e02      	subs	r6, #2
  412ce6:	442b      	add	r3, r5
  412ce8:	1a9b      	subs	r3, r3, r2
  412cea:	b280      	uxth	r0, r0
  412cec:	fbb3 fcf7 	udiv	ip, r3, r7
  412cf0:	fb07 331c 	mls	r3, r7, ip, r3
  412cf4:	fb0e f10c 	mul.w	r1, lr, ip
  412cf8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  412cfc:	4299      	cmp	r1, r3
  412cfe:	d906      	bls.n	412d0e <__udivdi3+0x212>
  412d00:	195b      	adds	r3, r3, r5
  412d02:	d219      	bcs.n	412d38 <__udivdi3+0x23c>
  412d04:	4299      	cmp	r1, r3
  412d06:	d917      	bls.n	412d38 <__udivdi3+0x23c>
  412d08:	f1ac 0c02 	sub.w	ip, ip, #2
  412d0c:	442b      	add	r3, r5
  412d0e:	1a5a      	subs	r2, r3, r1
  412d10:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  412d14:	e752      	b.n	412bbc <__udivdi3+0xc0>
  412d16:	2001      	movs	r0, #1
  412d18:	e732      	b.n	412b80 <__udivdi3+0x84>
  412d1a:	3801      	subs	r0, #1
  412d1c:	e761      	b.n	412be2 <__udivdi3+0xe6>
  412d1e:	3801      	subs	r0, #1
  412d20:	e718      	b.n	412b54 <__udivdi3+0x58>
  412d22:	3b01      	subs	r3, #1
  412d24:	e771      	b.n	412c0a <__udivdi3+0x10e>
  412d26:	3b01      	subs	r3, #1
  412d28:	e727      	b.n	412b7a <__udivdi3+0x7e>
  412d2a:	3c01      	subs	r4, #1
  412d2c:	e7ac      	b.n	412c88 <__udivdi3+0x18c>
  412d2e:	f108 38ff 	add.w	r8, r8, #4294967295
  412d32:	e797      	b.n	412c64 <__udivdi3+0x168>
  412d34:	3e01      	subs	r6, #1
  412d36:	e7d7      	b.n	412ce8 <__udivdi3+0x1ec>
  412d38:	f10c 3cff 	add.w	ip, ip, #4294967295
  412d3c:	e7e7      	b.n	412d0e <__udivdi3+0x212>
  412d3e:	4620      	mov	r0, r4
  412d40:	2600      	movs	r6, #0
  412d42:	e71d      	b.n	412b80 <__udivdi3+0x84>

00412d44 <__func__.8182>:
  412d44:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  412d54:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  412d64:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  412d74:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  412d84:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  412d94:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  412da4:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  412db4:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  412dc4:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  412dd4:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  412de4:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  412df4:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  412e04:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  412e14:	7274 6575 203a 6166 736c 0065               true: false.

00412e20 <__func__.8348>:
  412e20:	7371 6970 725f 6165 0064 0000               qspi_read...

00412e2c <__func__.8364>:
  412e2c:	7371 6970 775f 6972 6574 0000 4449 454c     qspi_write..IDLE
  412e3c:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  412e4c:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  412e5c:	7653 0063 5754 4849 2053 4552 492d 494e     Svc.TWIHS RE-INI
  412e6c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  412e7c:	5241 4554 0a44 0000 5754 4849 2053 4552     ARTED...TWIHS RE
  412e8c:	492d 494e 4954 4c41 5a49 5441 4f49 204e     -INITIALIZATION 
  412e9c:	202d 4946 494e 4853 4445 000a 2580 0000     - FINISHED...%..
  412eac:	00c0 0000 0800 0000 0019 0000 8040 0000     ............@...
  412ebc:	c5d9 c855 454d 4c4c 5441 4f52 394e 3030     ..U.MELLATRON900
  412ecc:	2030 4f42 544f 5320 5145 4555 434e 0a45     0 BOOT SEQUENCE.
  412edc:	4155 5452 4320 4e4f 4f53 454c 5320 4154     UART CONSOLE STA
  412eec:	5452 4445 4f20 204e 4155 5452 0a34 6142     RTED ON UART4.Ba
  412efc:	6475 6152 6574 203a 3131 3235 3030 420a     udRate: 115200.B
  412f0c:	7469 3a73 3820 4e0a 206f 7473 706f 6220     its: 8.No stop b
  412f1c:	7469 2073 000a 0000 454c 2044 4e49 5449     its ....LED INIT
  412f2c:	4149 494c 415a 4954 4e4f 2d20 5320 4154     IALIZATION - STA
  412f3c:	5452 4445 000a 0000 454c 2044 4e49 5449     RTED....LED INIT
  412f4c:	4149 494c 415a 4954 4e4f 2d20 4620 4e49     IALIZATION - FIN
  412f5c:	5349 4548 0a44 0000 4157 4354 4448 474f     ISHED...WATCHDOG
  412f6c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  412f7c:	202d 5453 5241 4554 0a44 0000 4157 4354     - STARTED...WATC
  412f8c:	4448 474f 4920 494e 4954 4c41 5a49 5441     HDOG INITIALIZAT
  412f9c:	4f49 204e 202d 4946 494e 4853 4445 000a     ION - FINISHED..
  412fac:	4c47 424f 4c41 4920 5152 4920 494e 4954     GLOBAL IRQ INITI
  412fbc:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  412fcc:	4554 0a44 0000 0000 4c47 424f 4c41 4920     TED.....GLOBAL I
  412fdc:	5152 4920 494e 4954 4c41 5a49 5441 4f49     RQ INITIALIZATIO
  412fec:	204e 202d 4946 494e 4853 4445 000a 0000     N - FINISHED....
  412ffc:	4453 4152 204d 4e49 5449 4149 494c 415a     SDRAM INITIALIZA
  41300c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  41301c:	4453 4152 204d 4f43 544e 4f52 4c4c 5245     SDRAM CONTROLLER
  41302c:	5320 4154 5452 4445 000a 0000 4453 4152      STARTED....SDRA
  41303c:	204d 4e49 5449 4149 494c 415a 4954 4e4f     M INITIALIZATION
  41304c:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  41305c:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  41306c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  41307c:	5754 4849 2053 4e49 5449 4149 494c 415a     TWIHS INITIALIZA
  41308c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  41309c:	0000 0000 4553 5652 204f 5244 5649 5245     ....SERVO DRIVER
  4130ac:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  4130bc:	202d 5453 5241 4554 0a44 0000 4553 5652     - STARTED...SERV
  4130cc:	204f 5244 5649 5245 4920 494e 4954 4c41     O DRIVER INITIAL
  4130dc:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  4130ec:	4445 000a 4143 454d 4152 4920 494e 4954     ED..CAMERA INITI
  4130fc:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  41310c:	4554 0a44 0000 0000 4143 454d 4152 4920     TED.....CAMERA I
  41311c:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  41312c:	4946 494e 4853 4445 000a 0000 5351 4950     FINISHED....QSPI
  41313c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41314c:	202d 5453 5241 4554 0a44 0000 5351 4950     - STARTED...QSPI
  41315c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41316c:	202d 4946 494e 4853 4445 000a 5744 314d     - FINISHED..DWM1
  41317c:	3030 2030 4e49 5449 4149 494c 415a 4954     000 INITIALIZATI
  41318c:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  41319c:	5744 314d 3030 2030 4e49 5449 4149 494c     DWM1000 INITIALI
  4131ac:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  4131bc:	0a44 0000 4441 2043 4e49 5449 4149 494c     D...ADC INITIALI
  4131cc:	415a 4954 4e4f 2d20 5320 4154 5452 4445     ZATION - STARTED
  4131dc:	000a 0000 4441 2043 4e49 5449 4149 494c     ....ADC INITIALI
  4131ec:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  4131fc:	0a44 0000 5753 5449 4843 4920 494e 4954     D...SWITCH INITI
  41320c:	4c41 5a49 5441 4f49 204e 202d 5453 5241     ALIZATION - STAR
  41321c:	4554 0a44 0000 0000 5753 5449 4843 4920     TED.....SWITCH I
  41322c:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  41323c:	4946 494e 4853 4445 000a 0000 4550 4952     FINISHED....PERI
  41324c:	4546 4152 204c 5249 2051 4e49 5449 4149     FERAL IRQ INITIA
  41325c:	494c 415a 4954 4e4f 2d20 5320 4154 5452     LIZATION - START
  41326c:	4445 000a 4550 4952 4546 4152 204c 5249     ED..PERIFERAL IR
  41327c:	2051 4e49 5449 4149 494c 415a 4954 4e4f     Q INITIALIZATION
  41328c:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  41329c:	7845 7469 6e69 2067 6977 6874 7320 6174     Exiting with sta
  4132ac:	7574 2073 6425 0a2e 0000 0000 454d 204d     tus %d......MEM 
  4132bc:	5245 4f52 2052 5441 3020 2578 2078 203a     ERROR AT 0x%x : 
  4132cc:	5845 3a50 7830 7825 2c20 5220 5643 203a     EXP:0x%x , RCV: 
  4132dc:	7830 7825 0a20 0000 4453 4152 204d 5546     0x%x ...SDRAM FU
  4132ec:	4c4c 4320 4548 4b43 4320 4d4f 4c50 5445     LL CHECK COMPLET
  4132fc:	0045 0000 3249 2043 5245 2152 000a 0000     E...I2C ERR!....
  41330c:	7825 202c 0000 0000 4553 5652 204f 5244     %x, ....SERVO DR
  41331c:	5649 5245 5320 5445 5055 4320 4d4f 4c50     IVER SETUP COMPL
  41332c:	4145 4554 000a 0000 4d49 3a47 0000 0000     EATE....IMG:....
  41333c:	453a 444e 4d49 0a47 0000 0000 6946 696e     :ENDIMG.....Fini
  41334c:	6873 6465 7320 7265 6f76 6320 6c61 6420     shed servo cal d
  41335c:	7461 2061 6f46 6c6c 776f 3a73 000a 0000     ata Follows:....
  41336c:	007b 0000 6625 252c 2c66 0000 0a7d 0000     {...%f,%f,..}...
  41337c:	7453 7261 6574 2064 6573 7672 206f 6163     Started servo ca
  41338c:	0a6c 0000 454c 2544 2064 4553 2054 4f54     l...LED%d SET TO
  41339c:	2520 0a64 0000 0000 4553 5652 204f 454c      %d.....SERVO LE
  4133ac:	3a47 6425 532c 5245 4f56 253a 2064 4f4d     G:%d,SERVO:%d MO
  4133bc:	4556 2044 4f54 2520 0a64 0000 6142 7474     VED TO %d...Batt
  4133cc:	7265 2079 6f56 746c 6761 3a65 6625 000a     ery Voltage:%f..
  4133dc:	6554 7473 6544 4976 3a44 3020 2578 0a78     TestDevID: 0x%x.
  4133ec:	0000 0000 7953 5373 6174 7574 3a73 3020     ....SysStatus: 0
  4133fc:	2578 0a78 0000 0000 4449 5720 4952 5454     x%x.....ID WRITT
  41340c:	4e45 520a 4145 2044 4142 4b43 203a 7830     EN.READ BACK: 0x
  41341c:	7825 000a 4154 4b53 2031 4e49 5449 4149     %x..TASK1 INITIA
  41342c:	494c 415a 4954 4e4f 2d20 5320 4154 5452     LIZATION - START
  41343c:	4445 000a 4154 4b53 2031 4e49 5449 4149     ED..TASK1 INITIA
  41344c:	494c 415a 4954 4e4f 2d20 4620 4e49 5349     LIZATION - FINIS
  41345c:	4548 2044 207c 4e45 4554 4952 474e 4920     HED | ENTERING I
  41346c:	464e 4e49 5449 2045 4f4c 504f 000a 0000     NFINITE LOOP....
  41347c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
  41348c:	2a2a 2a2a 000a 0000 4157 4e52 4e49 3a47     ****....WARNING:
  41349c:	4220 5441 5620 4c4f 2054 5441 4320 4952      BAT VOLT AT CRI
  4134ac:	4954 4143 204c 454c 4556 534c 000a 0000     TICAL LEVELS....
  4134bc:	4944 4153 4c42 4e49 2047 4553 5652 204f     DISABLING SERVO 
  4134cc:	5257 5449 2045 554f 0a54 0000 4c50 4145     WRITE OUT...PLEA
  4134dc:	4553 4420 5349 4f43 4e4e 4345 2054 4142     SE DISCONNECT BA
  4134ec:	5454 5245 2059 4f4e 2157 000a 454c 2047     TTERY NOW!..LEG 
  4134fc:	4f43 544e 4f52 204c 4154 4b53 4920 494e     CONTROL TASK INI
  41350c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  41351c:	5241 4554 0a44 0000 454c 2047 4f43 544e     ARTED...LEG CONT
  41352c:	4f52 204c 4154 4b53 4920 494e 4954 4c41     ROL TASK INITIAL
  41353c:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  41354c:	4445 7c20 4520 544e 5245 4e49 2047 4e49     ED | ENTERING IN
  41355c:	4946 494e 4554 4c20 4f4f 0a50 0000 0000     FINITE LOOP.....
  41356c:	4c43 2049 4154 4b53 4920 494e 4954 4c41     CLI TASK INITIAL
  41357c:	5a49 5441 4f49 204e 202d 5453 5241 4554     IZATION - STARTE
  41358c:	0a44 0000 4c43 2049 4154 4b53 4920 494e     D...CLI TASK INI
  41359c:	4954 4c41 5a49 5441 4f49 204e 202d 4946     TIALIZATION - FI
  4135ac:	494e 4853 4445 7c20 4520 544e 5245 4e49     NISHED | ENTERIN
  4135bc:	2047 4e49 4946 494e 4554 4c20 4f4f 0a50     G INFINITE LOOP.
  4135cc:	0000 0000 4f43 4d4d 4e41 2044 494c 454e     ....COMMAND LINE
  4135dc:	5320 4154 5452 4445 000a 0000 5946 5f50      STARTED....FYP_
  4135ec:	6548 6178 6f62 5f74 5441 4153 534d 3037     Hexabot_ATSAMS70
  4135fc:	4d5f 4c45 414c 5254 4e4f 3039 3030 003e     _MELLATRON9000>.
  41360c:	0020 0000 656c 0064 616d 756e 7673 006f      ...led.manusvo.
  41361c:	6162 7674 6c6f 0a74 0000 0000 7564 706d     batvolt.....dump
  41362c:	6d69 0067 6177 6b6c 0000 0000 6177 6b6c     img.walk....walk
  41363c:	7963 6974 656d 0000 6576 6272 736f 0065     cytime..verbose.
  41364c:	5744 2d4d 6574 7473 000a 0000 5744 2d4d     DWM-test....DWM-
  41365c:	6573 646e 0000 0000 5744 2d4d 726f 654c     send....DWM-orLe
  41366c:	0a64 0000 5744 2d4d 5752 6574 7473 0000     d...DWM-RWtest..
  41367c:	5744 2d4d 6e49 7469 000a 0000 6163 646d     DWM-Init....camd
  41368c:	7374 0068 656d 746d 7365 0a74 0000 0000     tsh.memtest.....
  41369c:	5744 2d4d 6c63 5372 6174 7574 0a73 0000     DWM-clrStatus...
  4136ac:	7673 436f 6c61 000a 7673 436f 6c61 7053     svoCal..svoCalSp
  4136bc:	6365 0000 7573 7072 6972 6573 000a 0000     ec..surprise....
  4136cc:	6572 616c 5378 6f76 0000 0000 7453 6e61     relaxSvo....Stan
  4136dc:	5564 0a70 0000 0000 6953 4474 776f 0a6e     dUp.....SitDown.
  4136ec:	0000 0000 6572 616c 4178 6c6c 000a 0000     ....relaxAll....
  4136fc:	6167 7469 7554 6e72 0000 0000 6167 7469     gaitTurn....gait
  41370c:	6944 0072 6167 7469 7453 6e61 6563 0000     Dir.gaitStance..
  41371c:	6167 7469 6748 0074 6167 7469 7550 0070     gaitHgt.gaitPup.
  41372c:	6167 7469 7453 6972 6564 0000 6167 7469     gaitStride..gait
  41373c:	7453 6c79 0065 0000 7673 696f 686e 6269     Style...svoinhib
  41374c:	0000 0000 7463 6c72 6d43 0064 5245 4f52     ....ctrlCmd.ERRO
  41375c:	3a52 4320 6d6f 616d 646e 6e20 746f 6620     R: Command not f
  41376c:	756f 646e 000a 0000 4143 454d 4152 5020     ound....CAMERA P
  41377c:	4f52 4543 5353 4e49 2047 4154 4b53 4920     ROCESSING TASK I
  41378c:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  41379c:	5453 5241 4554 0a44 0000 0000 4143 454d     STARTED.....CAME
  4137ac:	4152 5020 4f52 4543 5353 4e49 2047 4154     RA PROCESSING TA
  4137bc:	4b53 4920 494e 4954 4c41 5a49 5441 4f49     SK INITIALIZATIO
  4137cc:	204e 202d 4946 494e 4853 4445 000a 0000     N - FINISHED....
  4137dc:	6863 6e61 6567 2064 6970 3a78 2520 0a64     changed pix: %d.
  4137ec:	6162 646e 6977 6874 203a 6625 0a25 0000     bandwith: %f%...
  4137fc:	4f42 5241 2044 4e49 5449 4149 494c 415a     BOARD INITIALIZA
  41380c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  41381c:	0000 0000 5452 534f 5420 5341 204b 4e49     ....RTOS TASK IN
  41382c:	5449 4149 494c 415a 4954 4e4f 2d20 5320     ITIALIZATION - S
  41383c:	4154 5452 4445 000a 4154 4b53 0031 0000     TARTED..TASK1...
  41384c:	454c 4347 5254 544c 5341 004b 4d49 5447     LEGCTRLTASK.IMGT
  41385c:	5341 004b 4c43 5449 5341 004b 5452 534f     ASK.CLITASK.RTOS
  41386c:	5420 5341 204b 4e49 5449 4149 494c 415a      TASK INITIALIZA
  41387c:	4954 4e4f 2d20 4620 4e49 5349 4548 0a44     TION - FINISHED.
  41388c:	0000 0000 5453 5241 4954 474e 5220 4f54     ....STARTING RTO
  41389c:	0a53 0000 5452 534f 4820 5341 5220 5445     S...RTOS HAS RET
  4138ac:	5255 454e 2e44 5420 4948 2053 4853 554f     URNED. THIS SHOU
  4138bc:	444c 4520 4556 2052 4148 5050 4e45 202e     LD EVER HAPPEN. 
  4138cc:	5845 5254 4d45 2045 5245 4f52 0a52 0000     EXTREME ERROR...
  4138dc:	6361 736f 0000 0000 7361 6e69 0000 0000     acos....asin....
  4138ec:	6d66 646f 0000 0000 7173 7472 0000 0000     fmod....sqrt....
  4138fc:	0000 0000                                   ....

00413900 <Zero>:
	...
  41390c:	0000 8000                                   ....

00413910 <npio2_hw>:
  413910:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
  413920:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
  413930:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
  413940:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
  413950:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
  413960:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
  413970:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
  413980:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00413990 <two_over_pi>:
  413990:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
  4139a0:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
  4139b0:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
  4139c0:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
  4139d0:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
  4139e0:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
  4139f0:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
  413a00:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
  413a10:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
  413a20:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
  413a30:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
  413a40:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
  413a50:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
  413a60:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
  413a70:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
  413a80:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
  413a90:	e27b 0060 8c6b 00c0                         {.`.k...

00413a98 <init_jk>:
  413a98:	0002 0000 0003 0000 0004 0000 0006 0000     ................

00413aa8 <PIo2>:
  413aa8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
  413ab8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
  413ac8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
  413ad8:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

00413ae8 <atanlo>:
  413ae8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
  413af8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

00413b08 <atanhi>:
  413b08:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
  413b18:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
  413b28:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  413b38:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  413b48:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  413b58:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  413b68:	0043 0000                                   C...

00413b6c <_global_impure_ptr>:
  413b6c:	00b0 2040                                   ..@ 

00413b70 <tinytens>:
  413b70:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  413b80:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  413b90:	6f43 64ac 0628 1168                         Co.d(.h.

00413b98 <fpinan.5307>:
  413b98:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
  413ba8:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  413bb8:	6e61 0000                                   an..

00413bbc <fpi.5271>:
  413bbc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  413bcc:	0000 0000                                   ....

00413bd0 <zeroes.6911>:
  413bd0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413be0 <blanks.6910>:
  413be0:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413bf0:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  413c00:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  413c10:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  413c20:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  413c30:	0030 0000                                   0...

00413c34 <zeroes.6869>:
  413c34:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00413c44 <blanks.6868>:
  413c44:	2020 2020 2020 2020 2020 2020 2020 2020                     

00413c54 <_ctype_>:
  413c54:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  413c64:	2020 2020 2020 2020 2020 2020 2020 2020                     
  413c74:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  413c84:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  413c94:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  413ca4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  413cb4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  413cc4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  413cd4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  413d58:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00413d68 <__hexdig>:
	...
  413d98:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  413da8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413dc8:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413e68:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00413e78 <__mprec_tens>:
  413e78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  413e88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  413e98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  413ea8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  413eb8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  413ec8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  413ed8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  413ee8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  413ef8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  413f08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  413f18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413f28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  413f38:	9db4 79d9 7843 44ea                         ...yCx.D

00413f40 <p05.5302>:
  413f40:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00413f50 <__mprec_bigtens>:
  413f50:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  413f60:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  413f70:	bf3c 7f73 4fdd 7515                         <.s..O.u

00413f78 <_init>:
  413f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413f7a:	bf00      	nop
  413f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413f7e:	bc08      	pop	{r3}
  413f80:	469e      	mov	lr, r3
  413f82:	4770      	bx	lr

00413f84 <__init_array_start>:
  413f84:	0040f165 	.word	0x0040f165

00413f88 <__frame_dummy_init_array_entry>:
  413f88:	00400165                                e.@.

00413f8c <_fini>:
  413f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413f8e:	bf00      	nop
  413f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413f92:	bc08      	pop	{r3}
  413f94:	469e      	mov	lr, r3
  413f96:	4770      	bx	lr

00413f98 <__fini_array_start>:
  413f98:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <SvoCal>:
20400018:	4a08 c166 0f49 3fd7 3bb0 c09b 3394 3ff2     .Jf.I..?.;...3.?
20400028:	cbf0 c15c bf4d 3fd8 65a8 c13e 26d5 3fde     ..\.M..?.e>..&.?
20400038:	9903 bf19 4b1b 3ffe 65e0 4086 f927 4005     .....K.?.e.@'..@
20400048:	cccd 3ecc a32b 3c11 fffc c08f cccd bdcc     ...>+..<........
20400058:	ccc9 c06c 6402 bda8 665e c0c6 15ad be0d     ..l..d..^f......
20400068:	0000 bfc0 882f bd08 0000 bf00 0ae9 bc36     ..../.........6.
20400078:	ff40 413f 10fd 3f91 4884 bfca 8141 3f7b     @.?A...?.H..A.{?
20400088:	fefc bfff 4fa9 3f7a 3505 bf5c 8d9b 3f7d     .....Oz?.5\...}?
20400098:	e3ef c0eb 0835 3f6b cbcf c0fc 8783 3f69     ....5.k?......i?

204000a8 <cam_dif_tsh>:
204000a8:	0019 0000                                   ....

204000ac <__fdlib_version>:
204000ac:	0001 0000                                   ....

204000b0 <impure_data>:
204000b0:	0000 0000 039c 2040 0404 2040 046c 2040     ......@ ..@ l.@ 
	...
204000e4:	3b68 0041 0000 0000 0000 0000 0000 0000     h;A.............
	...
20400158:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400168:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004d8 <_impure_ptr>:
204004d8:	00b0 2040                                   ..@ 

204004dc <__malloc_av_>:
	...
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 
204008b4:	08ac 2040 08ac 2040 08b4 2040 08b4 2040     ..@ ..@ ..@ ..@ 
204008c4:	08bc 2040 08bc 2040 08c4 2040 08c4 2040     ..@ ..@ ..@ ..@ 
204008d4:	08cc 2040 08cc 2040 08d4 2040 08d4 2040     ..@ ..@ ..@ ..@ 

204008e4 <__malloc_trim_threshold>:
204008e4:	0000 0002                                   ....

204008e8 <__malloc_sbrk_base>:
204008e8:	ffff ffff                                   ....

204008ec <__ctype_ptr__>:
204008ec:	3c54 0041                                   T<A.

204008f0 <lconv>:
204008f0:	3e70 0041 32b4 0041 32b4 0041 32b4 0041     p>A..2A..2A..2A.
20400900:	32b4 0041 32b4 0041 32b4 0041 32b4 0041     .2A..2A..2A..2A.
20400910:	32b4 0041 32b4 0041 ffff ffff ffff ffff     .2A..2A.........
20400920:	ffff ffff ffff 0000                         ........

20400928 <lc_ctype_charset>:
20400928:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20400948 <__mb_cur_max>:
20400948:	0001 0000                                   ....

2040094c <__wctomb>:
2040094c:	2519 0041                                   .%A.
