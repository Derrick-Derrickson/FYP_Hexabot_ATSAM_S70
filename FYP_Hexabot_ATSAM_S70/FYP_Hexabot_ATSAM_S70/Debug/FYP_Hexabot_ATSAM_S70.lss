
FYP_Hexabot_ATSAM_S70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013994  00400000  00400000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413994  00413994  0001b994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000950  20400000  0041399c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bd58  20400950  004142ec  00020950  2**2
                  ALLOC
  4 .stack        00002000  2040c6a8  00420044  00020950  2**0
                  ALLOC
  5 .heap         00000200  2040e6a8  00422044  00020950  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  00020983  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023bf7  00000000  00000000  000209de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000464e  00000000  00000000  000445d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e650  00000000  00000000  00048c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012a0  00000000  00000000  00057273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  00058513  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002597b  00000000  00000000  000598d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a530  00000000  00000000  0007f24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00086252  00000000  00000000  0009977e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a94  00000000  00000000  0011f9d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e6a8 	.word	0x2040e6a8
  400004:	0040348d 	.word	0x0040348d
  400008:	00403489 	.word	0x00403489
  40000c:	00403489 	.word	0x00403489
  400010:	00403489 	.word	0x00403489
  400014:	00403489 	.word	0x00403489
  400018:	00403489 	.word	0x00403489
	...
  40002c:	00400b3d 	.word	0x00400b3d
  400030:	00403489 	.word	0x00403489
  400034:	00000000 	.word	0x00000000
  400038:	00400bd9 	.word	0x00400bd9
  40003c:	00400c3d 	.word	0x00400c3d
  400040:	00403489 	.word	0x00403489
  400044:	00403489 	.word	0x00403489
  400048:	00403489 	.word	0x00403489
  40004c:	00403489 	.word	0x00403489
  400050:	00403489 	.word	0x00403489
  400054:	00403489 	.word	0x00403489
  400058:	00403489 	.word	0x00403489
  40005c:	00403489 	.word	0x00403489
  400060:	00403489 	.word	0x00403489
  400064:	00000000 	.word	0x00000000
  400068:	004005b1 	.word	0x004005b1
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005d9 	.word	0x004005d9
  400074:	00403489 	.word	0x00403489
  400078:	00403489 	.word	0x00403489
  40007c:	00403489 	.word	0x00403489
  400080:	004005ed 	.word	0x004005ed
  400084:	00400601 	.word	0x00400601
  400088:	00403489 	.word	0x00403489
  40008c:	00403489 	.word	0x00403489
  400090:	00403489 	.word	0x00403489
  400094:	00403489 	.word	0x00403489
  400098:	00403489 	.word	0x00403489
  40009c:	00403489 	.word	0x00403489
  4000a0:	00403489 	.word	0x00403489
  4000a4:	00403489 	.word	0x00403489
  4000a8:	00403489 	.word	0x00403489
  4000ac:	00403489 	.word	0x00403489
  4000b0:	00403489 	.word	0x00403489
  4000b4:	00400365 	.word	0x00400365
  4000b8:	00403489 	.word	0x00403489
  4000bc:	00403489 	.word	0x00403489
  4000c0:	00403489 	.word	0x00403489
  4000c4:	00403489 	.word	0x00403489
  4000c8:	00403489 	.word	0x00403489
	...
  4000e0:	00400379 	.word	0x00400379
  4000e4:	00403489 	.word	0x00403489
  4000e8:	00403489 	.word	0x00403489
  4000ec:	00403489 	.word	0x00403489
  4000f0:	00403489 	.word	0x00403489
  4000f4:	00403489 	.word	0x00403489
  4000f8:	004078e9 	.word	0x004078e9
  4000fc:	00403489 	.word	0x00403489
  400100:	00403489 	.word	0x00403489
  400104:	00403489 	.word	0x00403489
  400108:	00403489 	.word	0x00403489
  40010c:	00403489 	.word	0x00403489
  400110:	00403489 	.word	0x00403489
	...
  400120:	00403489 	.word	0x00403489
  400124:	00403489 	.word	0x00403489
  400128:	00403489 	.word	0x00403489
  40012c:	004078b1 	.word	0x004078b1
  400130:	00403489 	.word	0x00403489
  400134:	00000000 	.word	0x00000000
  400138:	00403489 	.word	0x00403489
  40013c:	00403489 	.word	0x00403489

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400950 	.word	0x20400950
  40015c:	00000000 	.word	0x00000000
  400160:	0041399c 	.word	0x0041399c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0041399c 	.word	0x0041399c
  400190:	20400954 	.word	0x20400954
  400194:	0041399c 	.word	0x0041399c
  400198:	00000000 	.word	0x00000000

0040019c <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  40019c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4001a0:	4680      	mov	r8, r0
  4001a2:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4001a4:	2600      	movs	r6, #0
  4001a6:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4001dc <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART4));
  4001aa:	4d0a      	ldr	r5, [pc, #40]	; (4001d4 <sendDebugString+0x38>)
  4001ac:	4c0a      	ldr	r4, [pc, #40]	; (4001d8 <sendDebugString+0x3c>)
		uart_write(UART4,in[i]);
  4001ae:	f8df a030 	ldr.w	sl, [pc, #48]	; 4001e0 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001b2:	e008      	b.n	4001c6 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART4));
  4001b4:	4620      	mov	r0, r4
  4001b6:	47a8      	blx	r5
  4001b8:	2800      	cmp	r0, #0
  4001ba:	d0fb      	beq.n	4001b4 <sendDebugString+0x18>
		uart_write(UART4,in[i]);
  4001bc:	4620      	mov	r0, r4
  4001be:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4001c2:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4001c4:	3601      	adds	r6, #1
  4001c6:	4640      	mov	r0, r8
  4001c8:	47c8      	blx	r9
  4001ca:	4286      	cmp	r6, r0
  4001cc:	d3f2      	bcc.n	4001b4 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,in[i]);
	}
}
  4001ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4001d2:	bf00      	nop
  4001d4:	00402d79 	.word	0x00402d79
  4001d8:	400e1e00 	.word	0x400e1e00
  4001dc:	0040b71d 	.word	0x0040b71d
  4001e0:	00402d85 	.word	0x00402d85

004001e4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
  4001e6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001ec:	4013      	ands	r3, r2
  4001ee:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001f0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4001f2:	4e1a      	ldr	r6, [pc, #104]	; (40025c <afec_process_callback+0x78>)
  4001f4:	4d1a      	ldr	r5, [pc, #104]	; (400260 <afec_process_callback+0x7c>)
  4001f6:	42a8      	cmp	r0, r5
  4001f8:	bf14      	ite	ne
  4001fa:	2000      	movne	r0, #0
  4001fc:	2001      	moveq	r0, #1
  4001fe:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400200:	2c0b      	cmp	r4, #11
  400202:	d80a      	bhi.n	40021a <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  400204:	9a01      	ldr	r2, [sp, #4]
  400206:	2301      	movs	r3, #1
  400208:	40a3      	lsls	r3, r4
  40020a:	4213      	tst	r3, r2
  40020c:	d020      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40020e:	192b      	adds	r3, r5, r4
  400210:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400214:	b1e3      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400216:	4798      	blx	r3
  400218:	e01a      	b.n	400250 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40021a:	2c0e      	cmp	r4, #14
  40021c:	d80c      	bhi.n	400238 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40021e:	9a01      	ldr	r2, [sp, #4]
  400220:	f104 010c 	add.w	r1, r4, #12
  400224:	2301      	movs	r3, #1
  400226:	408b      	lsls	r3, r1
  400228:	4213      	tst	r3, r2
  40022a:	d011      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40022c:	192b      	adds	r3, r5, r4
  40022e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400232:	b16b      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  400234:	4798      	blx	r3
  400236:	e00b      	b.n	400250 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400238:	9a01      	ldr	r2, [sp, #4]
  40023a:	f104 010f 	add.w	r1, r4, #15
  40023e:	2301      	movs	r3, #1
  400240:	408b      	lsls	r3, r1
  400242:	4213      	tst	r3, r2
  400244:	d004      	beq.n	400250 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  400246:	192b      	adds	r3, r5, r4
  400248:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40024c:	b103      	cbz	r3, 400250 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40024e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400250:	3401      	adds	r4, #1
  400252:	2c10      	cmp	r4, #16
  400254:	d1d4      	bne.n	400200 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400256:	b002      	add	sp, #8
  400258:	bd70      	pop	{r4, r5, r6, pc}
  40025a:	bf00      	nop
  40025c:	2040c520 	.word	0x2040c520
  400260:	40064000 	.word	0x40064000

00400264 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  400264:	2200      	movs	r2, #0
  400266:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400268:	4b08      	ldr	r3, [pc, #32]	; (40028c <afec_get_config_defaults+0x28>)
  40026a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <afec_get_config_defaults+0x2c>)
  40026e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400274:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  400276:	2302      	movs	r3, #2
  400278:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40027a:	2301      	movs	r3, #1
  40027c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40027e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400280:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400282:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400284:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400286:	7583      	strb	r3, [r0, #22]
  400288:	4770      	bx	lr
  40028a:	bf00      	nop
  40028c:	11e1a300 	.word	0x11e1a300
  400290:	005b8d80 	.word	0x005b8d80

00400294 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400294:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400296:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40029a:	d14d      	bne.n	400338 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40029c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40029e:	2201      	movs	r2, #1
  4002a0:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002a2:	7cca      	ldrb	r2, [r1, #19]
  4002a4:	2a00      	cmp	r2, #0
  4002a6:	bf18      	it	ne
  4002a8:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  4002ac:	68ca      	ldr	r2, [r1, #12]
  4002ae:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002b2:	684a      	ldr	r2, [r1, #4]
  4002b4:	688d      	ldr	r5, [r1, #8]
  4002b6:	fbb2 f2f5 	udiv	r2, r2, r5
  4002ba:	3a01      	subs	r2, #1
  4002bc:	0212      	lsls	r2, r2, #8
  4002be:	b292      	uxth	r2, r2
  4002c0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002c2:	7c0c      	ldrb	r4, [r1, #16]
  4002c4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4002c6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4002ca:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4002cc:	7c4c      	ldrb	r4, [r1, #17]
  4002ce:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002d0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4002d4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002d6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4002d8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002da:	7d0b      	ldrb	r3, [r1, #20]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf14      	ite	ne
  4002e0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4002e4:	2200      	moveq	r2, #0
  4002e6:	680b      	ldr	r3, [r1, #0]
  4002e8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4002ea:	7d4b      	ldrb	r3, [r1, #21]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	bf14      	ite	ne
  4002f0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4002f4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4002f6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4002f8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4002fa:	7d8b      	ldrb	r3, [r1, #22]
  4002fc:	021b      	lsls	r3, r3, #8
  4002fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400302:	f043 030c 	orr.w	r3, r3, #12
  400306:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  40030a:	4b12      	ldr	r3, [pc, #72]	; (400354 <afec_init+0xc0>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d106      	bne.n	40031e <afec_init+0x8a>
  400310:	e017      	b.n	400342 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400312:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400316:	428b      	cmp	r3, r1
  400318:	d1fb      	bne.n	400312 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40031a:	2000      	movs	r0, #0
  40031c:	e016      	b.n	40034c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <afec_init+0xc4>)
  400320:	4298      	cmp	r0, r3
  400322:	d10c      	bne.n	40033e <afec_init+0xaa>
  400324:	4b0d      	ldr	r3, [pc, #52]	; (40035c <afec_init+0xc8>)
  400326:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40032a:	2200      	movs	r2, #0
  40032c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400330:	428b      	cmp	r3, r1
  400332:	d1fb      	bne.n	40032c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e009      	b.n	40034c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  400338:	2019      	movs	r0, #25
  40033a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40033c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40033e:	2000      	movs	r0, #0
  400340:	e004      	b.n	40034c <afec_init+0xb8>
  400342:	4b07      	ldr	r3, [pc, #28]	; (400360 <afec_init+0xcc>)
  400344:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  400348:	2200      	movs	r2, #0
  40034a:	e7e2      	b.n	400312 <afec_init+0x7e>
  40034c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40034e:	bc30      	pop	{r4, r5}
  400350:	4770      	bx	lr
  400352:	bf00      	nop
  400354:	4003c000 	.word	0x4003c000
  400358:	40064000 	.word	0x40064000
  40035c:	2040c55c 	.word	0x2040c55c
  400360:	2040c51c 	.word	0x2040c51c

00400364 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400364:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400366:	4802      	ldr	r0, [pc, #8]	; (400370 <AFEC0_Handler+0xc>)
  400368:	4b02      	ldr	r3, [pc, #8]	; (400374 <AFEC0_Handler+0x10>)
  40036a:	4798      	blx	r3
  40036c:	bd08      	pop	{r3, pc}
  40036e:	bf00      	nop
  400370:	4003c000 	.word	0x4003c000
  400374:	004001e5 	.word	0x004001e5

00400378 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400378:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40037a:	4802      	ldr	r0, [pc, #8]	; (400384 <AFEC1_Handler+0xc>)
  40037c:	4b02      	ldr	r3, [pc, #8]	; (400388 <AFEC1_Handler+0x10>)
  40037e:	4798      	blx	r3
  400380:	bd08      	pop	{r3, pc}
  400382:	bf00      	nop
  400384:	40064000 	.word	0x40064000
  400388:	004001e5 	.word	0x004001e5

0040038c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40038c:	b508      	push	{r3, lr}
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40038e:	4b10      	ldr	r3, [pc, #64]	; (4003d0 <afec_enable+0x44>)
  400390:	4298      	cmp	r0, r3
  400392:	bf0c      	ite	eq
  400394:	2028      	moveq	r0, #40	; 0x28
  400396:	201d      	movne	r0, #29
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <afec_enable+0x48>)
  40039a:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40039c:	4b0e      	ldr	r3, [pc, #56]	; (4003d8 <afec_enable+0x4c>)
  40039e:	789b      	ldrb	r3, [r3, #2]
  4003a0:	2bff      	cmp	r3, #255	; 0xff
  4003a2:	d100      	bne.n	4003a6 <afec_enable+0x1a>
  4003a4:	e7fe      	b.n	4003a4 <afec_enable+0x18>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4003a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003aa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4003ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4003b0:	2100      	movs	r1, #0
  4003b2:	4a0a      	ldr	r2, [pc, #40]	; (4003dc <afec_enable+0x50>)
  4003b4:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4003b6:	4908      	ldr	r1, [pc, #32]	; (4003d8 <afec_enable+0x4c>)
  4003b8:	788a      	ldrb	r2, [r1, #2]
  4003ba:	3201      	adds	r2, #1
  4003bc:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4003be:	b92b      	cbnz	r3, 4003cc <afec_enable+0x40>
		cpu_irq_enable();
  4003c0:	2201      	movs	r2, #1
  4003c2:	4b06      	ldr	r3, [pc, #24]	; (4003dc <afec_enable+0x50>)
  4003c4:	701a      	strb	r2, [r3, #0]
  4003c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003ca:	b662      	cpsie	i
  4003cc:	bd08      	pop	{r3, pc}
  4003ce:	bf00      	nop
  4003d0:	40064000 	.word	0x40064000
  4003d4:	00402a1d 	.word	0x00402a1d
  4003d8:	2040c518 	.word	0x2040c518
  4003dc:	20400010 	.word	0x20400010

004003e0 <isi_init>:
 *
 * \param p_isi  Pointer to a ISI instance.
 * \param isi_cfg   Configuration for the ISI
 */
void isi_init(Isi *p_isi, struct isi_config_t *isi_cfg)
{
  4003e0:	b410      	push	{r4}
	uint32_t reg = 0;

	if(isi_cfg->hpol) {
  4003e2:	780b      	ldrb	r3, [r1, #0]
		reg |= ISI_CFG1_HSYNC_POL;
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	bf0c      	ite	eq
  4003e8:	2400      	moveq	r4, #0
  4003ea:	2404      	movne	r4, #4
	}
	if(isi_cfg->vpol) {
  4003ec:	784b      	ldrb	r3, [r1, #1]
  4003ee:	b10b      	cbz	r3, 4003f4 <isi_init+0x14>
		reg |= ISI_CFG1_VSYNC_POL;
  4003f0:	f044 0408 	orr.w	r4, r4, #8
	}
	if(isi_cfg->pck_plo) {
  4003f4:	788b      	ldrb	r3, [r1, #2]
  4003f6:	b10b      	cbz	r3, 4003fc <isi_init+0x1c>
		reg |= ISI_CFG1_PIXCLK_POL;
  4003f8:	f044 0410 	orr.w	r4, r4, #16
	}
	if(isi_cfg->emb_sync) {
  4003fc:	78cb      	ldrb	r3, [r1, #3]
  4003fe:	b10b      	cbz	r3, 400404 <isi_init+0x24>
		reg |= ISI_CFG1_EMB_SYNC;
  400400:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	}
	if(isi_cfg->crc_sync) {
  400404:	790b      	ldrb	r3, [r1, #4]
  400406:	b10b      	cbz	r3, 40040c <isi_init+0x2c>
		reg |= ISI_CFG1_CRC_SYNC;
  400408:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  40040c:	794a      	ldrb	r2, [r1, #5]
  40040e:	0352      	lsls	r2, r2, #13
  400410:	f402 42c0 	and.w	r2, r2, #24576	; 0x6000
  400414:	798b      	ldrb	r3, [r1, #6]
  400416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		| ISI_CFG1_SFD(isi_cfg->sfd);
  40041a:	79cb      	ldrb	r3, [r1, #7]
  40041c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
		reg |= ISI_CFG1_EMB_SYNC;
	}
	if(isi_cfg->crc_sync) {
		reg |= ISI_CFG1_CRC_SYNC;
	}
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
  400420:	4323      	orrs	r3, r4
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;
  400422:	6003      	str	r3, [r0, #0]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400424:	4b18      	ldr	r3, [pc, #96]	; (400488 <isi_init+0xa8>)
  400426:	685a      	ldr	r2, [r3, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400428:	685b      	ldr	r3, [r3, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  40042a:	0ed2      	lsrs	r2, r2, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  400430:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	reg |= ISI_CFG1_THMASK(isi_cfg->thmask) | ISI_CFG1_SLD(isi_cfg->sld)
		| ISI_CFG1_SFD(isi_cfg->sfd);
	p_isi->ISI_CFG1 = reg;

	reg = _isi_get_CFG2_workaround();
	switch(isi_cfg->image_fmt) {
  400434:	7a0a      	ldrb	r2, [r1, #8]
  400436:	2a04      	cmp	r2, #4
  400438:	d816      	bhi.n	400468 <isi_init+0x88>
  40043a:	e8df f002 	tbb	[pc, r2]
  40043e:	0603      	.short	0x0603
  400440:	0e09      	.short	0x0e09
  400442:	11          	.byte	0x11
  400443:	00          	.byte	0x00
		case ISI_INPUT_YUV:
			reg &= ~ISI_CFG2_COL_SPACE;
  400444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
			break;
  400448:	e00e      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB565:
			reg |= ISI_CFG2_COL_SPACE;
			reg |= ISI_CFG2_RGB_MODE;
  40044a:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
			break;
  40044e:	e00b      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_RGB888:
			reg |= ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_RGB_MODE;
  400450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			break;
  400458:	e006      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_12BIT:
			reg |= ISI_CFG2_GRAYSCALE;
  40045a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
			break;
  40045e:	e003      	b.n	400468 <isi_init+0x88>
		case ISI_INPUT_GS_8BIT:
			reg &= ~ISI_CFG2_GRAYSCALE;
			reg &= ~ISI_CFG2_RGB_SWAP;
			reg &= ~ISI_CFG2_COL_SPACE;
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
  400460:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  400464:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  400468:	68ca      	ldr	r2, [r1, #12]
  40046a:	3a01      	subs	r2, #1
  40046c:	4c07      	ldr	r4, [pc, #28]	; (40048c <isi_init+0xac>)
  40046e:	ea04 4402 	and.w	r4, r4, r2, lsl #16
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  400472:	690a      	ldr	r2, [r1, #16]
  400474:	3a01      	subs	r2, #1
  400476:	f3c2 020a 	ubfx	r2, r2, #0, #11
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
  40047a:	4322      	orrs	r2, r4
			reg &= ~ISI_CFG2_YCC_SWAP_Msk;
			break;
		default:
			break;
	}
	reg |= ISI_CFG2_IM_VSIZE(isi_cfg->image_vsize - 1)
  40047c:	4313      	orrs	r3, r2
		| ISI_CFG2_IM_HSIZE(isi_cfg->image_hsize - 1);
	p_isi->ISI_CFG2 = reg;
  40047e:	6043      	str	r3, [r0, #4]
}
  400480:	f85d 4b04 	ldr.w	r4, [sp], #4
  400484:	4770      	bx	lr
  400486:	bf00      	nop
  400488:	4004c000 	.word	0x4004c000
  40048c:	07ff0000 	.word	0x07ff0000

00400490 <isi_size_configure>:
 * \param preview_hsize  Horizontal Preview size  (640 max only in RGB mode).
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
  400490:	b470      	push	{r4, r5, r6}
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400492:	4c23      	ldr	r4, [pc, #140]	; (400520 <isi_size_configure+0x90>)
  400494:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  400496:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  400498:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  40049a:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
  40049e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 * \param preview_vsize  Vertical Preview size  (480 max only in RGB mode).
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
  4004a2:	4e20      	ldr	r6, [pc, #128]	; (400524 <isi_size_configure+0x94>)
  4004a4:	402e      	ands	r6, r5
  4004a6:	6046      	str	r6, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004a8:	6866      	ldr	r6, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004aa:	6865      	ldr	r5, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ac:	0ef6      	lsrs	r6, r6, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004ae:	b2ad      	uxth	r5, r5
 */
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
  4004b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
  4004b4:	6045      	str	r5, [r0, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004b6:	6865      	ldr	r5, [r4, #4]
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004b8:	6864      	ldr	r4, [r4, #4]
 * [31:28] are shift right 1 bit, so [31:27] can be read from [30:27].
 */
static inline uint32_t _isi_get_CFG2_workaround(void)
{
	uint32_t wrongfield;
	wrongfield = ISI->ISI_CFG2 >> (ISI_CFG2_YCC_SWAP_Pos - 1);
  4004ba:	0eed      	lsrs	r5, r5, #27
	return (ISI->ISI_CFG2 & 0x07FFFFFF) | (wrongfield << ISI_CFG2_YCC_SWAP_Pos);
  4004bc:	f024 4478 	bic.w	r4, r4, #4160749568	; 0xf8000000
  4004c0:	ea44 7505 	orr.w	r5, r4, r5, lsl #28
void isi_size_configure(Isi *p_isi, uint32_t image_hsize, uint32_t image_vsize,
						uint32_t preview_hsize, uint32_t preview_vsize)
{
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_VSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround()  & (~ISI_CFG2_IM_HSIZE_Msk);
	p_isi->ISI_CFG2 = _isi_get_CFG2_workaround() | ISI_CFG2_IM_VSIZE(image_vsize - 1) | ISI_CFG2_IM_HSIZE(image_hsize - 1);
  4004c4:	3a01      	subs	r2, #1
  4004c6:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4004ca:	4315      	orrs	r5, r2
  4004cc:	1e4a      	subs	r2, r1, #1
  4004ce:	4c16      	ldr	r4, [pc, #88]	; (400528 <isi_size_configure+0x98>)
  4004d0:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004d4:	ea45 0204 	orr.w	r2, r5, r4
  4004d8:	6042      	str	r2, [r0, #4]

	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_VSIZE_Msk);
  4004da:	6884      	ldr	r4, [r0, #8]
  4004dc:	4a13      	ldr	r2, [pc, #76]	; (40052c <isi_size_configure+0x9c>)
  4004de:	4022      	ands	r2, r4
  4004e0:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE &= (~ISI_PSIZE_PREV_HSIZE_Msk);
  4004e2:	6884      	ldr	r4, [r0, #8]
  4004e4:	4a12      	ldr	r2, [pc, #72]	; (400530 <isi_size_configure+0xa0>)
  4004e6:	4022      	ands	r2, r4
  4004e8:	6082      	str	r2, [r0, #8]
	p_isi->ISI_PSIZE |= ISI_PSIZE_PREV_VSIZE(preview_hsize - 1) | ISI_PSIZE_PREV_HSIZE(preview_vsize - 1);
  4004ea:	6885      	ldr	r5, [r0, #8]
  4004ec:	1e5a      	subs	r2, r3, #1
  4004ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
  4004f2:	9a03      	ldr	r2, [sp, #12]
  4004f4:	3a01      	subs	r2, #1
  4004f6:	4c0f      	ldr	r4, [pc, #60]	; (400534 <isi_size_configure+0xa4>)
  4004f8:	ea04 4402 	and.w	r4, r4, r2, lsl #16
  4004fc:	ea46 0204 	orr.w	r2, r6, r4
  400500:	432a      	orrs	r2, r5
  400502:	6082      	str	r2, [r0, #8]

	uint32_t hRatio;
	hRatio = 1600 * image_hsize / preview_hsize;
  400504:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  400508:	fb02 f101 	mul.w	r1, r2, r1
  40050c:	fbb1 f3f3 	udiv	r3, r1, r3
	p_isi->ISI_PDECF = (hRatio / 100);
  400510:	4909      	ldr	r1, [pc, #36]	; (400538 <isi_size_configure+0xa8>)
  400512:	fba1 2303 	umull	r2, r3, r1, r3
  400516:	095b      	lsrs	r3, r3, #5
  400518:	60c3      	str	r3, [r0, #12]
}
  40051a:	bc70      	pop	{r4, r5, r6}
  40051c:	4770      	bx	lr
  40051e:	bf00      	nop
  400520:	4004c000 	.word	0x4004c000
  400524:	f7fff800 	.word	0xf7fff800
  400528:	07ff0000 	.word	0x07ff0000
  40052c:	fffffc00 	.word	0xfffffc00
  400530:	fc00ffff 	.word	0xfc00ffff
  400534:	03ff0000 	.word	0x03ff0000
  400538:	51eb851f 	.word	0x51eb851f

0040053c <isi_set_dma_preview_path>:
 * \param dma_ctrl  DMA preview control.
 * \param frame_buf_start_addr  DMA preview base address.
 */
void isi_set_dma_preview_path(Isi *p_isi, uint8_t frate,
		uint32_t base_buf_desc, uint32_t dma_ctrl, uint32_t frame_buf_start_addr)
{
  40053c:	b410      	push	{r4}
	if(frate > 7) {
		frate = 7;
	}
	p_isi->ISI_CFG1 |= ISI_CFG1_FRATE(frate);
  40053e:	6804      	ldr	r4, [r0, #0]
  400540:	2907      	cmp	r1, #7
  400542:	bf28      	it	cs
  400544:	2107      	movcs	r1, #7
  400546:	0209      	lsls	r1, r1, #8
  400548:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  40054c:	4321      	orrs	r1, r4
  40054e:	6001      	str	r1, [r0, #0]

	p_isi->ISI_DMA_P_DSCR = base_buf_desc;
  400550:	64c2      	str	r2, [r0, #76]	; 0x4c
	p_isi->ISI_DMA_P_CTRL = dma_ctrl;
  400552:	6483      	str	r3, [r0, #72]	; 0x48
	p_isi->ISI_DMA_P_ADDR = frame_buf_start_addr;
  400554:	9b01      	ldr	r3, [sp, #4]
  400556:	6443      	str	r3, [r0, #68]	; 0x44

}
  400558:	f85d 4b04 	ldr.w	r4, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop

00400560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400564:	4604      	mov	r4, r0
  400566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400568:	4b0e      	ldr	r3, [pc, #56]	; (4005a4 <pio_handler_process+0x44>)
  40056a:	4798      	blx	r3
  40056c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40056e:	4620      	mov	r0, r4
  400570:	4b0d      	ldr	r3, [pc, #52]	; (4005a8 <pio_handler_process+0x48>)
  400572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400574:	4005      	ands	r5, r0
  400576:	d013      	beq.n	4005a0 <pio_handler_process+0x40>
  400578:	4c0c      	ldr	r4, [pc, #48]	; (4005ac <pio_handler_process+0x4c>)
  40057a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40057e:	6823      	ldr	r3, [r4, #0]
  400580:	4543      	cmp	r3, r8
  400582:	d108      	bne.n	400596 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400584:	6861      	ldr	r1, [r4, #4]
  400586:	4229      	tst	r1, r5
  400588:	d005      	beq.n	400596 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40058a:	68e3      	ldr	r3, [r4, #12]
  40058c:	4640      	mov	r0, r8
  40058e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400590:	6863      	ldr	r3, [r4, #4]
  400592:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400596:	42b4      	cmp	r4, r6
  400598:	d002      	beq.n	4005a0 <pio_handler_process+0x40>
  40059a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40059c:	2d00      	cmp	r5, #0
  40059e:	d1ee      	bne.n	40057e <pio_handler_process+0x1e>
  4005a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005a4:	004028f1 	.word	0x004028f1
  4005a8:	004028f5 	.word	0x004028f5
  4005ac:	2040096c 	.word	0x2040096c

004005b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4005b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4005b2:	4802      	ldr	r0, [pc, #8]	; (4005bc <PIOA_Handler+0xc>)
  4005b4:	210a      	movs	r1, #10
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <PIOA_Handler+0x10>)
  4005b8:	4798      	blx	r3
  4005ba:	bd08      	pop	{r3, pc}
  4005bc:	400e0e00 	.word	0x400e0e00
  4005c0:	00400561 	.word	0x00400561

004005c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOB_Handler+0xc>)
  4005c8:	210b      	movs	r1, #11
  4005ca:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOB_Handler+0x10>)
  4005cc:	4798      	blx	r3
  4005ce:	bd08      	pop	{r3, pc}
  4005d0:	400e1000 	.word	0x400e1000
  4005d4:	00400561 	.word	0x00400561

004005d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005da:	4802      	ldr	r0, [pc, #8]	; (4005e4 <PIOC_Handler+0xc>)
  4005dc:	210c      	movs	r1, #12
  4005de:	4b02      	ldr	r3, [pc, #8]	; (4005e8 <PIOC_Handler+0x10>)
  4005e0:	4798      	blx	r3
  4005e2:	bd08      	pop	{r3, pc}
  4005e4:	400e1200 	.word	0x400e1200
  4005e8:	00400561 	.word	0x00400561

004005ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOD_Handler+0xc>)
  4005f0:	2110      	movs	r1, #16
  4005f2:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOD_Handler+0x10>)
  4005f4:	4798      	blx	r3
  4005f6:	bd08      	pop	{r3, pc}
  4005f8:	400e1400 	.word	0x400e1400
  4005fc:	00400561 	.word	0x00400561

00400600 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400602:	4802      	ldr	r0, [pc, #8]	; (40060c <PIOE_Handler+0xc>)
  400604:	2111      	movs	r1, #17
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOE_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e1600 	.word	0x400e1600
  400610:	00400561 	.word	0x00400561

00400614 <qspi_initialize>:
 * \param qspi_config   Pointer to an qspi_config_t struct.
 * \return status       QSPI initialize result.
 *
 */
enum status_code qspi_initialize(Qspi *qspi, struct qspi_config_t *qspi_config)
{
  400614:	b538      	push	{r3, r4, r5, lr}
 *
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
  400616:	b930      	cbnz	r0, 400626 <qspi_initialize+0x12>
  400618:	4859      	ldr	r0, [pc, #356]	; (400780 <qspi_initialize+0x16c>)
  40061a:	f240 1117 	movw	r1, #279	; 0x117
  40061e:	4a59      	ldr	r2, [pc, #356]	; (400784 <qspi_initialize+0x170>)
  400620:	4b59      	ldr	r3, [pc, #356]	; (400788 <qspi_initialize+0x174>)
  400622:	4c5a      	ldr	r4, [pc, #360]	; (40078c <qspi_initialize+0x178>)
  400624:	47a0      	blx	r4
  400626:	4603      	mov	r3, r0
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  400628:	2202      	movs	r2, #2
  40062a:	6002      	str	r2, [r0, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  40062c:	691a      	ldr	r2, [r3, #16]
  40062e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  400632:	d1fb      	bne.n	40062c <qspi_initialize+0x18>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  400634:	2280      	movs	r2, #128	; 0x80
  400636:	601a      	str	r2, [r3, #0]
 *
 */
static enum status_code qspi_set_config(Qspi *qspi, struct qspi_config_t *qspi_config)
{
	enum status_code status = STATUS_OK;
	if(qspi_config->serial_memory_mode == mem_mode) {
  400638:	780a      	ldrb	r2, [r1, #0]
  40063a:	2a01      	cmp	r2, #1
  40063c:	d104      	bne.n	400648 <qspi_initialize+0x34>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_memory_mode(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_SMM_MEMORY;
  40063e:	685a      	ldr	r2, [r3, #4]
  400640:	f042 0201 	orr.w	r2, r2, #1
  400644:	605a      	str	r2, [r3, #4]
  400646:	e001      	b.n	40064c <qspi_initialize+0x38>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_set_spi_mode(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_SMM_SPI);
  400648:	685a      	ldr	r2, [r3, #4]
  40064a:	605a      	str	r2, [r3, #4]
	if(qspi_config->serial_memory_mode == mem_mode) {
		qspi_set_memory_mode(qspi);
	} else {
		qspi_set_spi_mode(qspi);
	}
	if(qspi_config->loopback_en) {
  40064c:	784a      	ldrb	r2, [r1, #1]
  40064e:	b122      	cbz	r2, 40065a <qspi_initialize+0x46>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_LLB;
  400650:	685a      	ldr	r2, [r3, #4]
  400652:	f042 0202 	orr.w	r2, r2, #2
  400656:	605a      	str	r2, [r3, #4]
  400658:	e003      	b.n	400662 <qspi_initialize+0x4e>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_loopback(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_LLB);
  40065a:	685a      	ldr	r2, [r3, #4]
  40065c:	f022 0202 	bic.w	r2, r2, #2
  400660:	605a      	str	r2, [r3, #4]
		qspi_enable_loopback(qspi);
	} else {
		qspi_disable_loopback(qspi);
	}
	if(qspi_config->wait_data_for_transfer) {
  400662:	788a      	ldrb	r2, [r1, #2]
  400664:	b122      	cbz	r2, 400670 <qspi_initialize+0x5c>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_enable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR |= QSPI_MR_WDRBT;
  400666:	685a      	ldr	r2, [r3, #4]
  400668:	f042 0204 	orr.w	r2, r2, #4
  40066c:	605a      	str	r2, [r3, #4]
  40066e:	e03c      	b.n	4006ea <qspi_initialize+0xd6>
 *
 * \param qspi Pointer to an QSPI instance.
 */
static inline void qspi_disable_wait_data_read_before_transfer(Qspi *qspi)
{
	qspi->QSPI_MR &= (~QSPI_MR_WDRBT);
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	f022 0204 	bic.w	r2, r2, #4
  400676:	605a      	str	r2, [r3, #4]
  400678:	e037      	b.n	4006ea <qspi_initialize+0xd6>
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
		qspi->QSPI_SCR |= QSPI_SCR_CPOL;
  40067a:	6a1a      	ldr	r2, [r3, #32]
  40067c:	f042 0201 	orr.w	r2, r2, #1
  400680:	621a      	str	r2, [r3, #32]
  400682:	e053      	b.n	40072c <qspi_initialize+0x118>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPOL);
  400684:	6a1a      	ldr	r2, [r3, #32]
  400686:	f022 0201 	bic.w	r2, r2, #1
  40068a:	621a      	str	r2, [r3, #32]
  40068c:	e04e      	b.n	40072c <qspi_initialize+0x118>
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
		qspi->QSPI_SCR |= QSPI_SCR_CPHA;
  40068e:	6a1a      	ldr	r2, [r3, #32]
  400690:	f042 0202 	orr.w	r2, r2, #2
  400694:	621a      	str	r2, [r3, #32]
  400696:	e04d      	b.n	400734 <qspi_initialize+0x120>
	} else {
		qspi->QSPI_SCR &= (~QSPI_SCR_CPHA);
  400698:	6a1a      	ldr	r2, [r3, #32]
  40069a:	f022 0202 	bic.w	r2, r2, #2
  40069e:	621a      	str	r2, [r3, #32]
  4006a0:	e048      	b.n	400734 <qspi_initialize+0x120>
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a2:	6a18      	ldr	r0, [r3, #32]
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006a4:	0212      	lsls	r2, r2, #8
  4006a6:	b292      	uxth	r2, r2
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;

	if (scbr_value > 255) {
		return ERR_INVALID_ARG;
	}
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_SCBR_Msk);
  4006a8:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
	qspi->QSPI_SCR = mask | QSPI_SCR_SCBR(scbr_value);
  4006ac:	4302      	orrs	r2, r0
  4006ae:	621a      	str	r2, [r3, #32]
	return STATUS_OK;
  4006b0:	2000      	movs	r0, #0
  4006b2:	e047      	b.n	400744 <qspi_initialize+0x130>
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));

	if (scr_enable) {
		qspi->QSPI_SMR |= QSPI_SMR_SCREN;
  4006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006b6:	f042 0201 	orr.w	r2, r2, #1
  4006ba:	641a      	str	r2, [r3, #64]	; 0x40
  4006bc:	e003      	b.n	4006c6 <qspi_initialize+0xb2>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_SCREN);
  4006be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006c0:	f022 0201 	bic.w	r2, r2, #1
  4006c4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (random_mode) {
  4006c6:	b124      	cbz	r4, 4006d2 <qspi_initialize+0xbe>
		qspi->QSPI_SMR |= QSPI_SMR_RVDIS;
  4006c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006ca:	f042 0202 	orr.w	r2, r2, #2
  4006ce:	641a      	str	r2, [r3, #64]	; 0x40
  4006d0:	e04a      	b.n	400768 <qspi_initialize+0x154>
	} else {
		qspi->QSPI_SMR &= (~QSPI_SMR_RVDIS);
  4006d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  4006d4:	f022 0202 	bic.w	r2, r2, #2
  4006d8:	641a      	str	r2, [r3, #64]	; 0x40
  4006da:	e045      	b.n	400768 <qspi_initialize+0x154>
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
		return 1;
	}
	qspi->QSPI_SKR = QSPI_SKR_USRK(key);
  4006dc:	6459      	str	r1, [r3, #68]	; 0x44
  4006de:	e049      	b.n	400774 <qspi_initialize+0x160>
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4006e0:	691a      	ldr	r2, [r3, #16]
  4006e2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4006e6:	d0fb      	beq.n	4006e0 <qspi_initialize+0xcc>
  4006e8:	e047      	b.n	40077a <qspi_initialize+0x166>
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006ea:	685a      	ldr	r2, [r3, #4]
	if(qspi_config->wait_data_for_transfer) {
		qspi_enable_wait_data_read_before_transfer(qspi);
	} else {
		qspi_disable_wait_data_read_before_transfer(qspi);
	}
	qspi_set_chip_select_mode(qspi, qspi_config->csmode);
  4006ec:	78c8      	ldrb	r0, [r1, #3]
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006ee:	0100      	lsls	r0, r0, #4
  4006f0:	f000 0030 	and.w	r0, r0, #48	; 0x30
 * \param qspi    Pointer to an QSPI instance.
 * \param csmode  Chip select mode to be set.
 */
static inline void qspi_set_chip_select_mode(Qspi *qspi, uint32_t csmode)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_CSMODE_Msk);
  4006f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	qspi->QSPI_MR = mask | QSPI_MR_CSMODE(csmode);
  4006f8:	4302      	orrs	r2, r0
  4006fa:	605a      	str	r2, [r3, #4]
 * \param qspi Pointer to an QSPI instance.
 * \param bits Bits per transfer.
 */
static inline void qspi_set_bits_per_transfer(Qspi *qspi, uint32_t bits)
{
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_NBBITS_Msk);
  4006fc:	685a      	ldr	r2, [r3, #4]
  4006fe:	f422 6070 	bic.w	r0, r2, #3840	; 0xf00
	qspi->QSPI_MR = mask | bits;
  400702:	684a      	ldr	r2, [r1, #4]
  400704:	4302      	orrs	r2, r0
  400706:	605a      	str	r2, [r3, #4]
 * \param uc_dlybct Time to be delay.
 */
static inline void qspi_set_minimum_inactive_qcs_delay(Qspi *qspi, uint8_t uc_dlybct)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYBCT_Msk);
  400708:	685a      	ldr	r2, [r3, #4]
  40070a:	7a08      	ldrb	r0, [r1, #8]
  40070c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_MR = mask | QSPI_MR_DLYBCT(uc_dlybct);
  400710:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  400714:	605a      	str	r2, [r3, #4]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  400716:	685a      	ldr	r2, [r3, #4]
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  400718:	68c8      	ldr	r0, [r1, #12]
 * \param uc_dlycs Time to be delay.
 */
static inline void qspi_set_delay_between_consecutive_transfers(Qspi *qspi, uint32_t uc_dlycs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_MR & (~QSPI_MR_DLYCS_Msk);
  40071a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	qspi->QSPI_MR = mask | QSPI_MR_DLYCS(uc_dlycs);
  40071e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  400722:	605a      	str	r2, [r3, #4]
 * \param polarity Polarity to be set.
 */
static inline void qspi_set_clock_polarity(Qspi *qspi, uint32_t polarity)
{
	assert(qspi);
	if (polarity) {
  400724:	690a      	ldr	r2, [r1, #16]
  400726:	2a00      	cmp	r2, #0
  400728:	d0ac      	beq.n	400684 <qspi_initialize+0x70>
  40072a:	e7a6      	b.n	40067a <qspi_initialize+0x66>
 * \param phase Phase to be set.
 */
static inline void qspi_set_clock_phase(Qspi *qspi, uint32_t phase)
{
	assert(qspi);
	if (phase) {
  40072c:	694a      	ldr	r2, [r1, #20]
  40072e:	2a00      	cmp	r2, #0
  400730:	d0b2      	beq.n	400698 <qspi_initialize+0x84>
  400732:	e7ac      	b.n	40068e <qspi_initialize+0x7a>
 * \return status Baud rate set result.
 */
static inline enum status_code qspi_set_baudrate(Qspi *qspi, uint32_t baudrate)
{
	assert(qspi);
	uint32_t scbr_value = sysclk_get_peripheral_hz() / baudrate - 1;
  400734:	6988      	ldr	r0, [r1, #24]
  400736:	4a16      	ldr	r2, [pc, #88]	; (400790 <qspi_initialize+0x17c>)
  400738:	fbb2 f2f0 	udiv	r2, r2, r0
  40073c:	3a01      	subs	r2, #1

	if (scbr_value > 255) {
  40073e:	2aff      	cmp	r2, #255	; 0xff
  400740:	d9af      	bls.n	4006a2 <qspi_initialize+0x8e>
		return ERR_INVALID_ARG;
  400742:	20f8      	movs	r0, #248	; 0xf8
 * \param uc_dlybs Delay before QSCK.
 */
static inline void qspi_set_transfer_delay(Qspi *qspi, uint8_t uc_dlybs)
{
	assert(qspi);
	uint32_t mask = qspi->QSPI_SCR & (~QSPI_SCR_DLYBS_Msk);
  400744:	6a1a      	ldr	r2, [r3, #32]
  400746:	7f0c      	ldrb	r4, [r1, #28]
  400748:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
	qspi->QSPI_SCR = mask | QSPI_SCR_DLYBS(uc_dlybs);
  40074c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  400750:	621a      	str	r2, [r3, #32]
	qspi_set_delay_between_consecutive_transfers(qspi, qspi_config->delay_between_ct);
	qspi_set_clock_polarity(qspi, qspi_config->clock_polarity);
	qspi_set_clock_phase(qspi, qspi_config->clock_phase);
	status = qspi_set_baudrate(qspi, qspi_config->baudrate);
	qspi_set_transfer_delay(qspi, qspi_config->transfer_delay);
	qspi_set_scrambling_mode(qspi, qspi_config->scrambling_en, qspi_config->scrambling_random_value_dis);
  400752:	f891 5020 	ldrb.w	r5, [r1, #32]
  400756:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
 * \param mode  Mode to be set.
 */
static inline void qspi_set_scrambling_mode(Qspi *qspi, uint32_t scr_enable, uint32_t random_mode)
{
	assert(qspi);
	qspi->QSPI_SMR &= (~(QSPI_SMR_SCREN | QSPI_SMR_RVDIS));
  40075a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  40075c:	f022 0203 	bic.w	r2, r2, #3
  400760:	641a      	str	r2, [r3, #64]	; 0x40

	if (scr_enable) {
  400762:	2d00      	cmp	r5, #0
  400764:	d1a6      	bne.n	4006b4 <qspi_initialize+0xa0>
  400766:	e7aa      	b.n	4006be <qspi_initialize+0xaa>
	qspi_set_scrambing_key(qspi, qspi_config->scrambling_user_key);
  400768:	6a49      	ldr	r1, [r1, #36]	; 0x24
 * \return If write succeeded, return 0, else return 1.
 */
static inline uint32_t qspi_set_scrambing_key(Qspi *qspi, uint32_t key)
{
	assert(qspi);
	if (qspi->QSPI_WPMR & QSPI_WPMR_WPEN) {
  40076a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40076e:	f012 0f01 	tst.w	r2, #1
  400772:	d0b3      	beq.n	4006dc <qspi_initialize+0xc8>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  400774:	2201      	movs	r2, #1
  400776:	601a      	str	r2, [r3, #0]
  400778:	e7b2      	b.n	4006e0 <qspi_initialize+0xcc>

	/** Configure an QSPI peripheral. */
	status = qspi_set_config(qspi, qspi_config);

	qspi_enable(qspi);
	return status;
  40077a:	b240      	sxtb	r0, r0
}
  40077c:	bd38      	pop	{r3, r4, r5, pc}
  40077e:	bf00      	nop
  400780:	00412754 	.word	0x00412754
  400784:	00412744 	.word	0x00412744
  400788:	00412778 	.word	0x00412778
  40078c:	0040ab79 	.word	0x0040ab79
  400790:	08f0d180 	.word	0x08f0d180

00400794 <qspi_read>:
 * \param us_data      Pointer to read data.
 * \param num_of_bytes Read data numbers.
 * \return status Read option result.
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400796:	b930      	cbnz	r0, 4007a6 <qspi_read+0x12>
  400798:	4836      	ldr	r0, [pc, #216]	; (400874 <qspi_read+0xe0>)
  40079a:	f44f 719f 	mov.w	r1, #318	; 0x13e
  40079e:	4a36      	ldr	r2, [pc, #216]	; (400878 <qspi_read+0xe4>)
  4007a0:	4b36      	ldr	r3, [pc, #216]	; (40087c <qspi_read+0xe8>)
  4007a2:	4c37      	ldr	r4, [pc, #220]	; (400880 <qspi_read+0xec>)
  4007a4:	47a0      	blx	r4
  4007a6:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  4007a8:	2a00      	cmp	r2, #0
  4007aa:	d05c      	beq.n	400866 <qspi_read+0xd2>
	uint32_t num_of_bytes_read = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
  4007ac:	2a01      	cmp	r2, #1
  4007ae:	d11e      	bne.n	4007ee <qspi_read+0x5a>
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007b0:	6902      	ldr	r2, [r0, #16]
  4007b2:	f012 0f01 	tst.w	r2, #1
  4007b6:	bf08      	it	eq
  4007b8:	f44f 3280 	moveq.w	r2, #65536	; 0x10000
  4007bc:	d012      	beq.n	4007e4 <qspi_read+0x50>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007be:	689a      	ldr	r2, [r3, #8]
  4007c0:	800a      	strh	r2, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007c2:	691a      	ldr	r2, [r3, #16]
  4007c4:	f012 0f04 	tst.w	r2, #4
  4007c8:	d0fb      	beq.n	4007c2 <qspi_read+0x2e>
	qspi->QSPI_TDR = w_data ;
  4007ca:	22ff      	movs	r2, #255	; 0xff
  4007cc:	60da      	str	r2, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007ce:	691a      	ldr	r2, [r3, #16]
  4007d0:	f012 0f02 	tst.w	r2, #2
  4007d4:	d0fb      	beq.n	4007ce <qspi_read+0x3a>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  4007d6:	689b      	ldr	r3, [r3, #8]
  4007d8:	800b      	strh	r3, [r1, #0]
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
				*us_data = qspi_read_spi(qspi);
				qspi_write_spi(qspi, dummy);
				*us_data = qspi_read_spi(qspi);
				num_of_attempt = 0;
				status = STATUS_OK;
  4007da:	2000      	movs	r0, #0
				break;
  4007dc:	e048      	b.n	400870 <qspi_read+0xdc>
			} else {
				if(num_of_attempt > 0xFFFF) {
  4007de:	3a01      	subs	r2, #1
  4007e0:	d100      	bne.n	4007e4 <qspi_read+0x50>
  4007e2:	e042      	b.n	40086a <qspi_read+0xd6>
	uint8_t *pw_data = (uint8_t *)us_data;
	uint16_t dummy = 0xFF;

	if (num_of_bytes == 1) {
		for(; ;) {
			if (qspi->QSPI_SR & QSPI_SR_RDRF) {
  4007e4:	6918      	ldr	r0, [r3, #16]
  4007e6:	f010 0f01 	tst.w	r0, #1
  4007ea:	d0f8      	beq.n	4007de <qspi_read+0x4a>
  4007ec:	e7e7      	b.n	4007be <qspi_read+0x2a>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4007ee:	6918      	ldr	r0, [r3, #16]
  4007f0:	f010 0f04 	tst.w	r0, #4
  4007f4:	d0fb      	beq.n	4007ee <qspi_read+0x5a>
	qspi->QSPI_TDR = w_data ;
  4007f6:	2000      	movs	r0, #0
  4007f8:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4007fa:	6918      	ldr	r0, [r3, #16]
  4007fc:	f010 0f02 	tst.w	r0, #2
  400800:	d0fb      	beq.n	4007fa <qspi_read+0x66>
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  400802:	6918      	ldr	r0, [r3, #16]
  400804:	f010 0f04 	tst.w	r0, #4
  400808:	d0fb      	beq.n	400802 <qspi_read+0x6e>
	qspi->QSPI_TDR = w_data ;
  40080a:	2000      	movs	r0, #0
  40080c:	60d8      	str	r0, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  40080e:	6918      	ldr	r0, [r3, #16]
  400810:	f010 0f02 	tst.w	r0, #2
  400814:	d0fb      	beq.n	40080e <qspi_read+0x7a>
  400816:	2400      	movs	r4, #0
  400818:	4625      	mov	r5, r4
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40081a:	f04f 0e19 	mov.w	lr, #25
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
	qspi->QSPI_TDR = w_data ;
  40081e:	4626      	mov	r6, r4
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
				status = STATUS_OK;
  400820:	4627      	mov	r7, r4
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
  400822:	6918      	ldr	r0, [r3, #16]
  400824:	f010 0f02 	tst.w	r0, #2
  400828:	d015      	beq.n	400856 <qspi_read+0xc2>
 */
static inline uint16_t qspi_read_spi(Qspi *qspi)
{
	assert(qspi);
	//while(!(qspi->QSPI_SR & QSPI_SR_RDRF));
	return  qspi->QSPI_RDR;
  40082a:	6898      	ldr	r0, [r3, #8]
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
			
			if (qspi->QSPI_SR & QSPI_SR_TDRE) {
				*pw_data= qspi_read_spi(qspi);
  40082c:	7008      	strb	r0, [r1, #0]
				if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  40082e:	6858      	ldr	r0, [r3, #4]
  400830:	f410 6f70 	tst.w	r0, #3840	; 0xf00
  400834:	d001      	beq.n	40083a <qspi_read+0xa6>
					pw_data += sizeof(uint16_t);
  400836:	3102      	adds	r1, #2
  400838:	e000      	b.n	40083c <qspi_read+0xa8>
				} else {
					pw_data += sizeof(uint8_t);
  40083a:	3101      	adds	r1, #1
				}
				num_of_bytes_read++;
  40083c:	3501      	adds	r5, #1
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  40083e:	6918      	ldr	r0, [r3, #16]
  400840:	f010 0f04 	tst.w	r0, #4
  400844:	d0fb      	beq.n	40083e <qspi_read+0xaa>
	qspi->QSPI_TDR = w_data ;
  400846:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  400848:	6918      	ldr	r0, [r3, #16]
  40084a:	f010 0f02 	tst.w	r0, #2
  40084e:	d0fb      	beq.n	400848 <qspi_read+0xb4>
					pw_data += sizeof(uint16_t);
				} else {
					pw_data += sizeof(uint8_t);
				}
				num_of_bytes_read++;
				num_of_attempt = 0;
  400850:	4634      	mov	r4, r6
				status = STATUS_OK;
  400852:	4638      	mov	r0, r7
  400854:	e004      	b.n	400860 <qspi_read+0xcc>
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
  400856:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
  40085a:	d208      	bcs.n	40086e <qspi_read+0xda>
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
					num_of_attempt++;
  40085c:	3401      	adds	r4, #1
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
					break;
				} else {
					status = STATUS_ERR_BUSY;
  40085e:	4670      	mov	r0, lr
		//qspi_read_spi(qspi);
		//qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		qspi_write_spi(qspi, 0x00);
		//qspi_write_spi(qspi, dummy);
		for(; num_of_bytes_read < num_of_bytes;) {
  400860:	42aa      	cmp	r2, r5
  400862:	d8de      	bhi.n	400822 <qspi_read+0x8e>
  400864:	e004      	b.n	400870 <qspi_read+0xdc>
 */
enum status_code qspi_read(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  400866:	2000      	movs	r0, #0
  400868:	e002      	b.n	400870 <qspi_read+0xdc>
				num_of_attempt = 0;
				status = STATUS_OK;
				break;
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086a:	20fd      	movs	r0, #253	; 0xfd
  40086c:	e000      	b.n	400870 <qspi_read+0xdc>
				status = STATUS_OK;
				//if(num_of_bytes_read <num_of_bytes-2)
				 qspi_write_spi(qspi, 0x00);
			} else {
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  40086e:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400870:	b240      	sxtb	r0, r0
  400872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400874:	00412780 	.word	0x00412780
  400878:	00412820 	.word	0x00412820
  40087c:	00412778 	.word	0x00412778
  400880:	0040ab79 	.word	0x0040ab79

00400884 <qspi_write>:
 * \param us_data      Pointer to data to be written.
 * \param num_of_bytes Write data numbers.
 * \return status      Write option result.
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
  400884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(qspi);
  400886:	b930      	cbnz	r0, 400896 <qspi_write+0x12>
  400888:	4823      	ldr	r0, [pc, #140]	; (400918 <qspi_write+0x94>)
  40088a:	f240 118b 	movw	r1, #395	; 0x18b
  40088e:	4a23      	ldr	r2, [pc, #140]	; (40091c <qspi_write+0x98>)
  400890:	4b23      	ldr	r3, [pc, #140]	; (400920 <qspi_write+0x9c>)
  400892:	4c24      	ldr	r4, [pc, #144]	; (400924 <qspi_write+0xa0>)
  400894:	47a0      	blx	r4
  400896:	4603      	mov	r3, r0
	if (num_of_bytes == 0) {
  400898:	2a00      	cmp	r2, #0
  40089a:	d038      	beq.n	40090e <qspi_write+0x8a>
	uint32_t num_of_bytes_write = 0;
	uint32_t num_of_attempt = 0;
	uint8_t *pw_data = (uint8_t *)us_data;
	uint8_t Addr_Inc = 0;

	if (num_of_bytes == 1) {
  40089c:	2a01      	cmp	r2, #1
  40089e:	d114      	bne.n	4008ca <qspi_write+0x46>
  4008a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
  4008a4:	6918      	ldr	r0, [r3, #16]
  4008a6:	f010 0f02 	tst.w	r0, #2
  4008aa:	d00b      	beq.n	4008c4 <qspi_write+0x40>
				qspi_write_spi(qspi, (uint16_t)(*us_data));
  4008ac:	8809      	ldrh	r1, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ae:	691a      	ldr	r2, [r3, #16]
  4008b0:	f012 0f04 	tst.w	r2, #4
  4008b4:	d0fb      	beq.n	4008ae <qspi_write+0x2a>
	qspi->QSPI_TDR = w_data ;
  4008b6:	60d9      	str	r1, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008b8:	691a      	ldr	r2, [r3, #16]
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d0fb      	beq.n	4008b8 <qspi_write+0x34>
	if (num_of_bytes == 1) {
		for(;;) {
			if(qspi->QSPI_SR & QSPI_SR_TDRE) {
				qspi_write_spi(qspi, (uint16_t)(*us_data));
				num_of_attempt = 0;
				status = STATUS_OK;
  4008c0:	2000      	movs	r0, #0
  4008c2:	e027      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
  4008c4:	3a01      	subs	r2, #1
  4008c6:	d1ed      	bne.n	4008a4 <qspi_write+0x20>
  4008c8:	e023      	b.n	400912 <qspi_write+0x8e>
					break;
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
  4008ca:	6840      	ldr	r0, [r0, #4]
  4008cc:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
  4008d0:	2800      	cmp	r0, #0
  4008d2:	bf14      	ite	ne
  4008d4:	f04f 0e02 	movne.w	lr, #2
  4008d8:	f04f 0e01 	moveq.w	lr, #1
				}
			}
		}
	} else {
		if(qspi->QSPI_MR & QSPI_MR_NBBITS_Msk) {
			Addr_Inc = sizeof(uint16_t);
  4008dc:	2400      	movs	r4, #0
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
			} else {
				status = STATUS_ERR_BUSY;
  4008de:	2519      	movs	r5, #25
		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
				num_of_attempt = 0;
				status = STATUS_OK;
  4008e0:	4627      	mov	r7, r4
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
  4008e2:	6918      	ldr	r0, [r3, #16]
  4008e4:	f010 0f04 	tst.w	r0, #4
  4008e8:	d00c      	beq.n	400904 <qspi_write+0x80>
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
  4008ea:	780e      	ldrb	r6, [r1, #0]
 */
static inline void qspi_write_spi(Qspi *qspi, uint16_t w_data)
{
	assert(qspi);
	/** Send data */
	while(!(qspi->QSPI_SR & QSPI_SR_TXEMPTY));
  4008ec:	6918      	ldr	r0, [r3, #16]
  4008ee:	f010 0f04 	tst.w	r0, #4
  4008f2:	d0fb      	beq.n	4008ec <qspi_write+0x68>
	qspi->QSPI_TDR = w_data ;
  4008f4:	60de      	str	r6, [r3, #12]
	while(!(qspi->QSPI_SR & QSPI_SR_TDRE));
  4008f6:	6918      	ldr	r0, [r3, #16]
  4008f8:	f010 0f02 	tst.w	r0, #2
  4008fc:	d0fb      	beq.n	4008f6 <qspi_write+0x72>
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
			if (qspi->QSPI_SR & QSPI_SR_TXEMPTY) {
				qspi_write_spi(qspi, (uint16_t)(*pw_data));
				pw_data += Addr_Inc;
  4008fe:	4471      	add	r1, lr
				num_of_attempt = 0;
				status = STATUS_OK;
  400900:	4638      	mov	r0, r7
  400902:	e000      	b.n	400906 <qspi_write+0x82>
			} else {
				status = STATUS_ERR_BUSY;
  400904:	4628      	mov	r0, r5
			Addr_Inc = sizeof(uint16_t);
		} else {
			Addr_Inc = sizeof(uint8_t);
		}

		for(; num_of_bytes_write <= num_of_bytes; num_of_bytes_write++) {
  400906:	3401      	adds	r4, #1
  400908:	42a2      	cmp	r2, r4
  40090a:	d2ea      	bcs.n	4008e2 <qspi_write+0x5e>
  40090c:	e002      	b.n	400914 <qspi_write+0x90>
 */
enum status_code qspi_write(Qspi *qspi, uint16_t *us_data, uint32_t num_of_bytes)
{
	assert(qspi);
	if (num_of_bytes == 0) {
		return STATUS_OK;
  40090e:	2000      	movs	r0, #0
  400910:	e000      	b.n	400914 <qspi_write+0x90>
				break;
			} else {
				status = STATUS_ERR_BUSY;
				num_of_attempt++;
				if(num_of_attempt > 0xFFFF) {
					status = ERR_TIMEOUT;
  400912:	20fd      	movs	r0, #253	; 0xfd
			}
		}
	}

	return status;
}
  400914:	b240      	sxtb	r0, r0
  400916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400918:	00412780 	.word	0x00412780
  40091c:	0041282c 	.word	0x0041282c
  400920:	00412778 	.word	0x00412778
  400924:	0040ab79 	.word	0x0040ab79

00400928 <rstc_start_software_reset>:
 */
void rstc_start_software_reset(
		Rstc *p_rstc)
{
#if (SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_rstc->RSTC_CR = RSTC_KEY | RSTC_CR_PROCRST;
  400928:	4b01      	ldr	r3, [pc, #4]	; (400930 <rstc_start_software_reset+0x8>)
  40092a:	6003      	str	r3, [r0, #0]
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	a5000001 	.word	0xa5000001

00400934 <sdramc_init>:
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400934:	4b48      	ldr	r3, [pc, #288]	; (400a58 <sdramc_init+0x124>)
  400936:	781b      	ldrb	r3, [r3, #0]
  400938:	2bff      	cmp	r3, #255	; 0xff
  40093a:	d100      	bne.n	40093e <sdramc_init+0xa>
  40093c:	e7fe      	b.n	40093c <sdramc_init+0x8>
 *
 * \param p_sdram  Pointer to the sdram memory structure.
 * \param ul_clk  SDRAM clock frequency.
 */
void sdramc_init(sdramc_memory_dev_t *p_sdram, uint32_t ul_clk)
{
  40093e:	b470      	push	{r4, r5, r6}
  400940:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400942:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400946:	b672      	cpsid	i
  400948:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40094c:	2400      	movs	r4, #0
  40094e:	4a43      	ldr	r2, [pc, #268]	; (400a5c <sdramc_init+0x128>)
  400950:	7014      	strb	r4, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400952:	4c41      	ldr	r4, [pc, #260]	; (400a58 <sdramc_init+0x124>)
  400954:	7822      	ldrb	r2, [r4, #0]
  400956:	3201      	adds	r2, #1
  400958:	7022      	strb	r2, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40095a:	b92b      	cbnz	r3, 400968 <sdramc_init+0x34>
		cpu_irq_enable();
  40095c:	2201      	movs	r2, #1
  40095e:	4b3f      	ldr	r3, [pc, #252]	; (400a5c <sdramc_init+0x128>)
  400960:	701a      	strb	r2, [r3, #0]
  400962:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400966:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);

	/* SDRAM device configuration */
	/* Step 1. */
	/* Set the features of SDRAM device into the Configuration Register */
	SDRAMC->SDRAMC_CR = p_sdram->cr.ul_cfg;
  400968:	6883      	ldr	r3, [r0, #8]
  40096a:	4a3d      	ldr	r2, [pc, #244]	; (400a60 <sdramc_init+0x12c>)
  40096c:	6093      	str	r3, [r2, #8]
	/* Step 2. */

	/* For low-power SDRAM, Temperature-Compensated Self Refresh (TCSR),
	   Drive Strength (DS) and Partial Array Self Refresh (PASR) must be set
	   in the Low-power Register. */
	SDRAMC->SDRAMC_LPR = 0;
  40096e:	2300      	movs	r3, #0
  400970:	6113      	str	r3, [r2, #16]

	/* Step 3. */
	/* Program the memory device type into the Memory Device Register */
	SDRAMC->SDRAMC_MDR = SDRAMC_MDR_MD_SDRAM;
  400972:	6253      	str	r3, [r2, #36]	; 0x24

	/* Step 4. */

	/* A minimum pause of 200 µs is provided to precede any signal toggle.
	   (6 core cycles per iteration) */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  400974:	9301      	str	r3, [sp, #4]
  400976:	4b3b      	ldr	r3, [pc, #236]	; (400a64 <sdramc_init+0x130>)
  400978:	fba3 2301 	umull	r2, r3, r3, r1
  40097c:	0c9a      	lsrs	r2, r3, #18
  40097e:	23c8      	movs	r3, #200	; 0xc8
  400980:	fb03 f302 	mul.w	r3, r3, r2
  400984:	4a38      	ldr	r2, [pc, #224]	; (400a68 <sdramc_init+0x134>)
  400986:	fba2 2303 	umull	r2, r3, r2, r3
  40098a:	089b      	lsrs	r3, r3, #2
  40098c:	9a01      	ldr	r2, [sp, #4]
  40098e:	4293      	cmp	r3, r2
  400990:	d905      	bls.n	40099e <sdramc_init+0x6a>
  400992:	9a01      	ldr	r2, [sp, #4]
  400994:	3201      	adds	r2, #1
  400996:	9201      	str	r2, [sp, #4]
  400998:	9a01      	ldr	r2, [sp, #4]
  40099a:	429a      	cmp	r2, r3
  40099c:	d3f9      	bcc.n	400992 <sdramc_init+0x5e>
	/* A NOP command is issued to the SDR-SDRAM. Program NOP command into
	   Mode Register, and the application must set Mode to 1 in the Mode
	   Register. Perform a write access to any SDR-SDRAM address to
	   acknowledge this command. Now the clock which drives SDR-SDRAM
	   device is enabled. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NOP;
  40099e:	4d30      	ldr	r5, [pc, #192]	; (400a60 <sdramc_init+0x12c>)
  4009a0:	2201      	movs	r2, #1
  4009a2:	602a      	str	r2, [r5, #0]
	*pSdram = 0x0;
  4009a4:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4009a8:	2200      	movs	r2, #0
  4009aa:	8022      	strh	r2, [r4, #0]

	/* An all banks precharge command is issued to the SDR-SDRAM. Program
	   all banks precharge command into Mode Register, and the application
	   must set Mode to 2 in the Mode Register. Perform a write access to
	   any SDRSDRAM address to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_ALLBANKS_PRECHARGE;
  4009ac:	2602      	movs	r6, #2
  4009ae:	602e      	str	r6, [r5, #0]
	*pSdram = 0x0;
  4009b0:	8022      	strh	r2, [r4, #0]

	/* Add some delays after precharge */
	for (i = 0; i < ((ul_clk / 1000000) * 200 / 6); i++) {
  4009b2:	9201      	str	r2, [sp, #4]
  4009b4:	9a01      	ldr	r2, [sp, #4]
  4009b6:	429a      	cmp	r2, r3
  4009b8:	d205      	bcs.n	4009c6 <sdramc_init+0x92>
  4009ba:	9a01      	ldr	r2, [sp, #4]
  4009bc:	3201      	adds	r2, #1
  4009be:	9201      	str	r2, [sp, #4]
  4009c0:	9a01      	ldr	r2, [sp, #4]
  4009c2:	429a      	cmp	r2, r3
  4009c4:	d3f9      	bcc.n	4009ba <sdramc_init+0x86>
	/* Step 7. */
	/* Eight auto-refresh (CBR) cycles are provided. Program the auto
	   refresh command (CBR) into Mode Register, and the application
	   must set Mode to 4 in the Mode Register. Once in the idle state,
	   eight AUTO REFRESH cycles must be performed. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009c6:	4b26      	ldr	r3, [pc, #152]	; (400a60 <sdramc_init+0x12c>)
  4009c8:	2404      	movs	r4, #4
  4009ca:	601c      	str	r4, [r3, #0]
	*pSdram = 0x1;
  4009cc:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  4009d0:	2501      	movs	r5, #1
  4009d2:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009d4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x2;
  4009d6:	2502      	movs	r5, #2
  4009d8:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009da:	601c      	str	r4, [r3, #0]
	*pSdram = 0x3;
  4009dc:	2503      	movs	r5, #3
  4009de:	8015      	strh	r5, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e0:	601c      	str	r4, [r3, #0]
	*pSdram = 0x4;
  4009e2:	8014      	strh	r4, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009e4:	601c      	str	r4, [r3, #0]
	*pSdram = 0x5;
  4009e6:	2605      	movs	r6, #5
  4009e8:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009ea:	601c      	str	r4, [r3, #0]
	*pSdram = 0x6;
  4009ec:	2606      	movs	r6, #6
  4009ee:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009f0:	601c      	str	r4, [r3, #0]
	*pSdram = 0x7;
  4009f2:	2607      	movs	r6, #7
  4009f4:	8016      	strh	r6, [r2, #0]

	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_AUTO_REFRESH;
  4009f6:	601c      	str	r4, [r3, #0]
	*pSdram = 0x8;
  4009f8:	2408      	movs	r4, #8
  4009fa:	8014      	strh	r4, [r2, #0]

	/* Step 8. */
	/* A Mode Register Set (MRS) cycle is issued to program the parameters
	   of the SDRAM devices, in particular CAS latency and burst length. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_LOAD_MODEREG;
  4009fc:	601d      	str	r5, [r3, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  4009fe:	6844      	ldr	r4, [r0, #4]
  400a00:	0064      	lsls	r4, r4, #1
  400a02:	4414      	add	r4, r2
  400a04:	f64c 25fe 	movw	r5, #51966	; 0xcafe
  400a08:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a0a:	6844      	ldr	r4, [r0, #4]
  400a0c:	0064      	lsls	r4, r4, #1
  400a0e:	4414      	add	r4, r2
  400a10:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a12:	6844      	ldr	r4, [r0, #4]
  400a14:	0064      	lsls	r4, r4, #1
  400a16:	4414      	add	r4, r2
  400a18:	8025      	strh	r5, [r4, #0]
	*((uint16_t *)(pSdram + p_sdram->ul_mode)) = 0xcafe;
  400a1a:	6840      	ldr	r0, [r0, #4]
  400a1c:	0040      	lsls	r0, r0, #1
  400a1e:	4410      	add	r0, r2
  400a20:	8005      	strh	r5, [r0, #0]

	/* Step 10. */
	/* The application must go into Normal Mode, setting Mode to 0 in the
	   Mode Register and perform a write access at any location in the\
	   SDRAM to acknowledge this command. */
	SDRAMC->SDRAMC_MR = SDRAMC_MR_MODE_NORMAL;
  400a22:	2000      	movs	r0, #0
  400a24:	6018      	str	r0, [r3, #0]
	*pSdram = 0x0;
  400a26:	8010      	strh	r0, [r2, #0]

	/* Step 11. */

	/* Write the refresh rate into the count field in the SDRAMC Refresh
	   Timer register. Set Refresh timer to 15.625 us. */
	i = ul_clk / 1000u;
  400a28:	4a10      	ldr	r2, [pc, #64]	; (400a6c <sdramc_init+0x138>)
  400a2a:	fba2 1201 	umull	r1, r2, r2, r1
  400a2e:	0992      	lsrs	r2, r2, #6
  400a30:	9201      	str	r2, [sp, #4]
	i *= 7800u;
  400a32:	9901      	ldr	r1, [sp, #4]
  400a34:	f641 6278 	movw	r2, #7800	; 0x1e78
  400a38:	fb02 f201 	mul.w	r2, r2, r1
  400a3c:	9201      	str	r2, [sp, #4]
	i /= 1000000u;
  400a3e:	9a01      	ldr	r2, [sp, #4]
  400a40:	4908      	ldr	r1, [pc, #32]	; (400a64 <sdramc_init+0x130>)
  400a42:	fba1 1202 	umull	r1, r2, r1, r2
  400a46:	0c92      	lsrs	r2, r2, #18
  400a48:	9201      	str	r2, [sp, #4]
	SDRAMC->SDRAMC_TR = SDRAMC_TR_COUNT(i);
  400a4a:	9a01      	ldr	r2, [sp, #4]
  400a4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
  400a50:	605a      	str	r2, [r3, #4]
}
  400a52:	b003      	add	sp, #12
  400a54:	bc70      	pop	{r4, r5, r6}
  400a56:	4770      	bx	lr
  400a58:	2040c518 	.word	0x2040c518
  400a5c:	20400010 	.word	0x20400010
  400a60:	40084000 	.word	0x40084000
  400a64:	431bde83 	.word	0x431bde83
  400a68:	aaaaaaab 	.word	0xaaaaaaab
  400a6c:	10624dd3 	.word	0x10624dd3

00400a70 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400a70:	2901      	cmp	r1, #1
  400a72:	d104      	bne.n	400a7e <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400a74:	6882      	ldr	r2, [r0, #8]
  400a76:	4b06      	ldr	r3, [pc, #24]	; (400a90 <supc_switch_sclk_to_32kxtal+0x20>)
  400a78:	4313      	orrs	r3, r2
  400a7a:	6083      	str	r3, [r0, #8]
  400a7c:	e003      	b.n	400a86 <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400a7e:	6882      	ldr	r2, [r0, #8]
  400a80:	4b04      	ldr	r3, [pc, #16]	; (400a94 <supc_switch_sclk_to_32kxtal+0x24>)
  400a82:	4013      	ands	r3, r2
  400a84:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400a86:	6802      	ldr	r2, [r0, #0]
  400a88:	4b03      	ldr	r3, [pc, #12]	; (400a98 <supc_switch_sclk_to_32kxtal+0x28>)
  400a8a:	4313      	orrs	r3, r2
  400a8c:	6003      	str	r3, [r0, #0]
  400a8e:	4770      	bx	lr
  400a90:	a5100000 	.word	0xa5100000
  400a94:	5aefffff 	.word	0x5aefffff
  400a98:	a5000008 	.word	0xa5000008

00400a9c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aa0:	6043      	str	r3, [r0, #4]
  400aa2:	4770      	bx	lr

00400aa4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <prvTaskExitError+0x38>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aac:	d00a      	beq.n	400ac4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400aae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ab2:	b672      	cpsid	i
  400ab4:	f383 8811 	msr	BASEPRI, r3
  400ab8:	f3bf 8f6f 	isb	sy
  400abc:	f3bf 8f4f 	dsb	sy
  400ac0:	b662      	cpsie	i
  400ac2:	e7fe      	b.n	400ac2 <prvTaskExitError+0x1e>
  400ac4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ac8:	b672      	cpsid	i
  400aca:	f383 8811 	msr	BASEPRI, r3
  400ace:	f3bf 8f6f 	isb	sy
  400ad2:	f3bf 8f4f 	dsb	sy
  400ad6:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400ad8:	e7fe      	b.n	400ad8 <prvTaskExitError+0x34>
  400ada:	bf00      	nop
  400adc:	2040000c 	.word	0x2040000c

00400ae0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400ae0:	4806      	ldr	r0, [pc, #24]	; (400afc <prvPortStartFirstTask+0x1c>)
  400ae2:	6800      	ldr	r0, [r0, #0]
  400ae4:	6800      	ldr	r0, [r0, #0]
  400ae6:	f380 8808 	msr	MSP, r0
  400aea:	b662      	cpsie	i
  400aec:	b661      	cpsie	f
  400aee:	f3bf 8f4f 	dsb	sy
  400af2:	f3bf 8f6f 	isb	sy
  400af6:	df00      	svc	0
  400af8:	bf00      	nop
  400afa:	0000      	.short	0x0000
  400afc:	e000ed08 	.word	0xe000ed08

00400b00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400b00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400b10 <vPortEnableVFP+0x10>
  400b04:	6801      	ldr	r1, [r0, #0]
  400b06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400b0a:	6001      	str	r1, [r0, #0]
  400b0c:	4770      	bx	lr
  400b0e:	0000      	.short	0x0000
  400b10:	e000ed88 	.word	0xe000ed88

00400b14 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400b18:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400b1c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400b20:	4b05      	ldr	r3, [pc, #20]	; (400b38 <pxPortInitialiseStack+0x24>)
  400b22:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400b26:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400b2a:	f06f 0302 	mvn.w	r3, #2
  400b2e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400b32:	3844      	subs	r0, #68	; 0x44
  400b34:	4770      	bx	lr
  400b36:	bf00      	nop
  400b38:	00400aa5 	.word	0x00400aa5

00400b3c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <pxCurrentTCBConst2>)
  400b3e:	6819      	ldr	r1, [r3, #0]
  400b40:	6808      	ldr	r0, [r1, #0]
  400b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b46:	f380 8809 	msr	PSP, r0
  400b4a:	f3bf 8f6f 	isb	sy
  400b4e:	f04f 0000 	mov.w	r0, #0
  400b52:	f380 8811 	msr	BASEPRI, r0
  400b56:	4770      	bx	lr

00400b58 <pxCurrentTCBConst2>:
  400b58:	2040c420 	.word	0x2040c420

00400b5c <vPortEnterCritical>:
  400b5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b60:	b672      	cpsid	i
  400b62:	f383 8811 	msr	BASEPRI, r3
  400b66:	f3bf 8f6f 	isb	sy
  400b6a:	f3bf 8f4f 	dsb	sy
  400b6e:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400b70:	4a0b      	ldr	r2, [pc, #44]	; (400ba0 <vPortEnterCritical+0x44>)
  400b72:	6813      	ldr	r3, [r2, #0]
  400b74:	3301      	adds	r3, #1
  400b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400b78:	2b01      	cmp	r3, #1
  400b7a:	d10f      	bne.n	400b9c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400b7c:	4b09      	ldr	r3, [pc, #36]	; (400ba4 <vPortEnterCritical+0x48>)
  400b7e:	681b      	ldr	r3, [r3, #0]
  400b80:	f013 0fff 	tst.w	r3, #255	; 0xff
  400b84:	d00a      	beq.n	400b9c <vPortEnterCritical+0x40>
  400b86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b8a:	b672      	cpsid	i
  400b8c:	f383 8811 	msr	BASEPRI, r3
  400b90:	f3bf 8f6f 	isb	sy
  400b94:	f3bf 8f4f 	dsb	sy
  400b98:	b662      	cpsie	i
  400b9a:	e7fe      	b.n	400b9a <vPortEnterCritical+0x3e>
  400b9c:	4770      	bx	lr
  400b9e:	bf00      	nop
  400ba0:	2040000c 	.word	0x2040000c
  400ba4:	e000ed04 	.word	0xe000ed04

00400ba8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400ba8:	4b0a      	ldr	r3, [pc, #40]	; (400bd4 <vPortExitCritical+0x2c>)
  400baa:	681b      	ldr	r3, [r3, #0]
  400bac:	b953      	cbnz	r3, 400bc4 <vPortExitCritical+0x1c>
  400bae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb2:	b672      	cpsid	i
  400bb4:	f383 8811 	msr	BASEPRI, r3
  400bb8:	f3bf 8f6f 	isb	sy
  400bbc:	f3bf 8f4f 	dsb	sy
  400bc0:	b662      	cpsie	i
  400bc2:	e7fe      	b.n	400bc2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400bc4:	3b01      	subs	r3, #1
  400bc6:	4a03      	ldr	r2, [pc, #12]	; (400bd4 <vPortExitCritical+0x2c>)
  400bc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400bca:	b90b      	cbnz	r3, 400bd0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400bcc:	f383 8811 	msr	BASEPRI, r3
  400bd0:	4770      	bx	lr
  400bd2:	bf00      	nop
  400bd4:	2040000c 	.word	0x2040000c

00400bd8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400bd8:	f3ef 8009 	mrs	r0, PSP
  400bdc:	f3bf 8f6f 	isb	sy
  400be0:	4b15      	ldr	r3, [pc, #84]	; (400c38 <pxCurrentTCBConst>)
  400be2:	681a      	ldr	r2, [r3, #0]
  400be4:	f01e 0f10 	tst.w	lr, #16
  400be8:	bf08      	it	eq
  400bea:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400bee:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf2:	6010      	str	r0, [r2, #0]
  400bf4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400bf8:	f04f 0080 	mov.w	r0, #128	; 0x80
  400bfc:	b672      	cpsid	i
  400bfe:	f380 8811 	msr	BASEPRI, r0
  400c02:	f3bf 8f4f 	dsb	sy
  400c06:	f3bf 8f6f 	isb	sy
  400c0a:	b662      	cpsie	i
  400c0c:	f001 f92c 	bl	401e68 <vTaskSwitchContext>
  400c10:	f04f 0000 	mov.w	r0, #0
  400c14:	f380 8811 	msr	BASEPRI, r0
  400c18:	bc08      	pop	{r3}
  400c1a:	6819      	ldr	r1, [r3, #0]
  400c1c:	6808      	ldr	r0, [r1, #0]
  400c1e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c22:	f01e 0f10 	tst.w	lr, #16
  400c26:	bf08      	it	eq
  400c28:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400c2c:	f380 8809 	msr	PSP, r0
  400c30:	f3bf 8f6f 	isb	sy
  400c34:	4770      	bx	lr
  400c36:	bf00      	nop

00400c38 <pxCurrentTCBConst>:
  400c38:	2040c420 	.word	0x2040c420

00400c3c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400c3c:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400c3e:	f3ef 8311 	mrs	r3, BASEPRI
  400c42:	f04f 0280 	mov.w	r2, #128	; 0x80
  400c46:	b672      	cpsid	i
  400c48:	f382 8811 	msr	BASEPRI, r2
  400c4c:	f3bf 8f6f 	isb	sy
  400c50:	f3bf 8f4f 	dsb	sy
  400c54:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400c56:	4b05      	ldr	r3, [pc, #20]	; (400c6c <SysTick_Handler+0x30>)
  400c58:	4798      	blx	r3
  400c5a:	b118      	cbz	r0, 400c64 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c60:	4b03      	ldr	r3, [pc, #12]	; (400c70 <SysTick_Handler+0x34>)
  400c62:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400c64:	2300      	movs	r3, #0
  400c66:	f383 8811 	msr	BASEPRI, r3
  400c6a:	bd08      	pop	{r3, pc}
  400c6c:	00401afd 	.word	0x00401afd
  400c70:	e000ed04 	.word	0xe000ed04

00400c74 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400c74:	4a03      	ldr	r2, [pc, #12]	; (400c84 <vPortSetupTimerInterrupt+0x10>)
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <vPortSetupTimerInterrupt+0x14>)
  400c78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400c7a:	2207      	movs	r2, #7
  400c7c:	3b04      	subs	r3, #4
  400c7e:	601a      	str	r2, [r3, #0]
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop
  400c84:	000493df 	.word	0x000493df
  400c88:	e000e014 	.word	0xe000e014

00400c8c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400c8c:	b500      	push	{lr}
  400c8e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400c90:	4b25      	ldr	r3, [pc, #148]	; (400d28 <xPortStartScheduler+0x9c>)
  400c92:	781a      	ldrb	r2, [r3, #0]
  400c94:	b2d2      	uxtb	r2, r2
  400c96:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400c98:	22ff      	movs	r2, #255	; 0xff
  400c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400c9c:	781b      	ldrb	r3, [r3, #0]
  400c9e:	b2db      	uxtb	r3, r3
  400ca0:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400ca4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400cac:	4a1f      	ldr	r2, [pc, #124]	; (400d2c <xPortStartScheduler+0xa0>)
  400cae:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400cb0:	2207      	movs	r2, #7
  400cb2:	4b1f      	ldr	r3, [pc, #124]	; (400d30 <xPortStartScheduler+0xa4>)
  400cb4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cba:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cbe:	d010      	beq.n	400ce2 <xPortStartScheduler+0x56>
  400cc0:	2206      	movs	r2, #6
  400cc2:	e000      	b.n	400cc6 <xPortStartScheduler+0x3a>
  400cc4:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400cc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cca:	005b      	lsls	r3, r3, #1
  400ccc:	b2db      	uxtb	r3, r3
  400cce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400cd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cd6:	1e51      	subs	r1, r2, #1
  400cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
  400cdc:	d1f2      	bne.n	400cc4 <xPortStartScheduler+0x38>
  400cde:	4b14      	ldr	r3, [pc, #80]	; (400d30 <xPortStartScheduler+0xa4>)
  400ce0:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400ce2:	4a13      	ldr	r2, [pc, #76]	; (400d30 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400ce4:	6813      	ldr	r3, [r2, #0]
  400ce6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400cee:	9b01      	ldr	r3, [sp, #4]
  400cf0:	b2db      	uxtb	r3, r3
  400cf2:	4a0d      	ldr	r2, [pc, #52]	; (400d28 <xPortStartScheduler+0x9c>)
  400cf4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400cf6:	4b0f      	ldr	r3, [pc, #60]	; (400d34 <xPortStartScheduler+0xa8>)
  400cf8:	681a      	ldr	r2, [r3, #0]
  400cfa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400cfe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400d00:	681a      	ldr	r2, [r3, #0]
  400d02:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400d06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400d08:	4b0b      	ldr	r3, [pc, #44]	; (400d38 <xPortStartScheduler+0xac>)
  400d0a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400d0c:	2200      	movs	r2, #0
  400d0e:	4b0b      	ldr	r3, [pc, #44]	; (400d3c <xPortStartScheduler+0xb0>)
  400d10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400d12:	4b0b      	ldr	r3, [pc, #44]	; (400d40 <xPortStartScheduler+0xb4>)
  400d14:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400d16:	4a0b      	ldr	r2, [pc, #44]	; (400d44 <xPortStartScheduler+0xb8>)
  400d18:	6813      	ldr	r3, [r2, #0]
  400d1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400d1e:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400d20:	4b09      	ldr	r3, [pc, #36]	; (400d48 <xPortStartScheduler+0xbc>)
  400d22:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400d24:	4b09      	ldr	r3, [pc, #36]	; (400d4c <xPortStartScheduler+0xc0>)
  400d26:	4798      	blx	r3
  400d28:	e000e400 	.word	0xe000e400
  400d2c:	204009dc 	.word	0x204009dc
  400d30:	204009e0 	.word	0x204009e0
  400d34:	e000ed20 	.word	0xe000ed20
  400d38:	00400c75 	.word	0x00400c75
  400d3c:	2040000c 	.word	0x2040000c
  400d40:	00400b01 	.word	0x00400b01
  400d44:	e000ef34 	.word	0xe000ef34
  400d48:	00400ae1 	.word	0x00400ae1
  400d4c:	00400aa5 	.word	0x00400aa5

00400d50 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400d50:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400d54:	2b0f      	cmp	r3, #15
  400d56:	d911      	bls.n	400d7c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400d58:	4a12      	ldr	r2, [pc, #72]	; (400da4 <vPortValidateInterruptPriority+0x54>)
  400d5a:	5c9b      	ldrb	r3, [r3, r2]
  400d5c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400d5e:	4a12      	ldr	r2, [pc, #72]	; (400da8 <vPortValidateInterruptPriority+0x58>)
  400d60:	7812      	ldrb	r2, [r2, #0]
  400d62:	429a      	cmp	r2, r3
  400d64:	d90a      	bls.n	400d7c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400d66:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d6a:	b672      	cpsid	i
  400d6c:	f383 8811 	msr	BASEPRI, r3
  400d70:	f3bf 8f6f 	isb	sy
  400d74:	f3bf 8f4f 	dsb	sy
  400d78:	b662      	cpsie	i
  400d7a:	e7fe      	b.n	400d7a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400d7c:	4b0b      	ldr	r3, [pc, #44]	; (400dac <vPortValidateInterruptPriority+0x5c>)
  400d7e:	681b      	ldr	r3, [r3, #0]
  400d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400d84:	4a0a      	ldr	r2, [pc, #40]	; (400db0 <vPortValidateInterruptPriority+0x60>)
  400d86:	6812      	ldr	r2, [r2, #0]
  400d88:	4293      	cmp	r3, r2
  400d8a:	d90a      	bls.n	400da2 <vPortValidateInterruptPriority+0x52>
  400d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d90:	b672      	cpsid	i
  400d92:	f383 8811 	msr	BASEPRI, r3
  400d96:	f3bf 8f6f 	isb	sy
  400d9a:	f3bf 8f4f 	dsb	sy
  400d9e:	b662      	cpsie	i
  400da0:	e7fe      	b.n	400da0 <vPortValidateInterruptPriority+0x50>
  400da2:	4770      	bx	lr
  400da4:	e000e3f0 	.word	0xe000e3f0
  400da8:	204009dc 	.word	0x204009dc
  400dac:	e000ed0c 	.word	0xe000ed0c
  400db0:	204009e0 	.word	0x204009e0

00400db4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400db4:	b538      	push	{r3, r4, r5, lr}
  400db6:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400db8:	f010 0f07 	tst.w	r0, #7
  400dbc:	d002      	beq.n	400dc4 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400dbe:	f020 0407 	bic.w	r4, r0, #7
  400dc2:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400dc4:	4b0e      	ldr	r3, [pc, #56]	; (400e00 <pvPortMalloc+0x4c>)
  400dc6:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400dc8:	4b0e      	ldr	r3, [pc, #56]	; (400e04 <pvPortMalloc+0x50>)
  400dca:	681b      	ldr	r3, [r3, #0]
  400dcc:	b923      	cbnz	r3, 400dd8 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400dce:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <pvPortMalloc+0x54>)
  400dd0:	f023 0307 	bic.w	r3, r3, #7
  400dd4:	4a0b      	ldr	r2, [pc, #44]	; (400e04 <pvPortMalloc+0x50>)
  400dd6:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400dd8:	4b0c      	ldr	r3, [pc, #48]	; (400e0c <pvPortMalloc+0x58>)
  400dda:	681b      	ldr	r3, [r3, #0]
  400ddc:	441c      	add	r4, r3
  400dde:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400de2:	4294      	cmp	r4, r2
  400de4:	d807      	bhi.n	400df6 <pvPortMalloc+0x42>
  400de6:	42a3      	cmp	r3, r4
  400de8:	d205      	bcs.n	400df6 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400dea:	4a06      	ldr	r2, [pc, #24]	; (400e04 <pvPortMalloc+0x50>)
  400dec:	6815      	ldr	r5, [r2, #0]
  400dee:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400df0:	4b06      	ldr	r3, [pc, #24]	; (400e0c <pvPortMalloc+0x58>)
  400df2:	601c      	str	r4, [r3, #0]
  400df4:	e000      	b.n	400df8 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  400df6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400df8:	4b05      	ldr	r3, [pc, #20]	; (400e10 <pvPortMalloc+0x5c>)
  400dfa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400dfc:	4628      	mov	r0, r5
  400dfe:	bd38      	pop	{r3, r4, r5, pc}
  400e00:	00401ae1 	.word	0x00401ae1
  400e04:	2040c1e8 	.word	0x2040c1e8
  400e08:	204009f0 	.word	0x204009f0
  400e0c:	204009e4 	.word	0x204009e4
  400e10:	00401c31 	.word	0x00401c31

00400e14 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400e14:	b150      	cbz	r0, 400e2c <vPortFree+0x18>
  400e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e1a:	b672      	cpsid	i
  400e1c:	f383 8811 	msr	BASEPRI, r3
  400e20:	f3bf 8f6f 	isb	sy
  400e24:	f3bf 8f4f 	dsb	sy
  400e28:	b662      	cpsie	i
  400e2a:	e7fe      	b.n	400e2a <vPortFree+0x16>
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop

00400e30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e30:	f100 0308 	add.w	r3, r0, #8
  400e34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e36:	f04f 32ff 	mov.w	r2, #4294967295
  400e3a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e3e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e40:	2300      	movs	r3, #0
  400e42:	6003      	str	r3, [r0, #0]
  400e44:	4770      	bx	lr
  400e46:	bf00      	nop

00400e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e48:	2300      	movs	r3, #0
  400e4a:	6103      	str	r3, [r0, #16]
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop

00400e50 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e50:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e54:	689a      	ldr	r2, [r3, #8]
  400e56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e58:	689a      	ldr	r2, [r3, #8]
  400e5a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e5c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e5e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e60:	6803      	ldr	r3, [r0, #0]
  400e62:	3301      	adds	r3, #1
  400e64:	6003      	str	r3, [r0, #0]
  400e66:	4770      	bx	lr

00400e68 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e68:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e6a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e6c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e70:	d101      	bne.n	400e76 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400e72:	6902      	ldr	r2, [r0, #16]
  400e74:	e007      	b.n	400e86 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e76:	f100 0208 	add.w	r2, r0, #8
  400e7a:	e000      	b.n	400e7e <vListInsert+0x16>
  400e7c:	461a      	mov	r2, r3
  400e7e:	6853      	ldr	r3, [r2, #4]
  400e80:	681c      	ldr	r4, [r3, #0]
  400e82:	42a5      	cmp	r5, r4
  400e84:	d2fa      	bcs.n	400e7c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e86:	6853      	ldr	r3, [r2, #4]
  400e88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e8a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e8c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e8e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e90:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e92:	6803      	ldr	r3, [r0, #0]
  400e94:	3301      	adds	r3, #1
  400e96:	6003      	str	r3, [r0, #0]
}
  400e98:	bc30      	pop	{r4, r5}
  400e9a:	4770      	bx	lr

00400e9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e9e:	6842      	ldr	r2, [r0, #4]
  400ea0:	6881      	ldr	r1, [r0, #8]
  400ea2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400ea4:	6882      	ldr	r2, [r0, #8]
  400ea6:	6841      	ldr	r1, [r0, #4]
  400ea8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400eaa:	685a      	ldr	r2, [r3, #4]
  400eac:	4282      	cmp	r2, r0
  400eae:	d101      	bne.n	400eb4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400eb0:	6892      	ldr	r2, [r2, #8]
  400eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400eb4:	2200      	movs	r2, #0
  400eb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400eb8:	6818      	ldr	r0, [r3, #0]
  400eba:	3801      	subs	r0, #1
  400ebc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400ebe:	4770      	bx	lr

00400ec0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400ec0:	b538      	push	{r3, r4, r5, lr}
  400ec2:	4604      	mov	r4, r0
  400ec4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400ec6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ec8:	b942      	cbnz	r2, 400edc <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400eca:	6803      	ldr	r3, [r0, #0]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	d12b      	bne.n	400f28 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ed0:	6840      	ldr	r0, [r0, #4]
  400ed2:	4b1b      	ldr	r3, [pc, #108]	; (400f40 <prvCopyDataToQueue+0x80>)
  400ed4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ed6:	2300      	movs	r3, #0
  400ed8:	6063      	str	r3, [r4, #4]
  400eda:	e02c      	b.n	400f36 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400edc:	b96d      	cbnz	r5, 400efa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400ede:	6880      	ldr	r0, [r0, #8]
  400ee0:	4b18      	ldr	r3, [pc, #96]	; (400f44 <prvCopyDataToQueue+0x84>)
  400ee2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ee4:	68a2      	ldr	r2, [r4, #8]
  400ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400ee8:	4413      	add	r3, r2
  400eea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400eec:	6862      	ldr	r2, [r4, #4]
  400eee:	4293      	cmp	r3, r2
  400ef0:	d31c      	bcc.n	400f2c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ef2:	6823      	ldr	r3, [r4, #0]
  400ef4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400ef6:	2000      	movs	r0, #0
  400ef8:	e01d      	b.n	400f36 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400efa:	68c0      	ldr	r0, [r0, #12]
  400efc:	4b11      	ldr	r3, [pc, #68]	; (400f44 <prvCopyDataToQueue+0x84>)
  400efe:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f02:	425b      	negs	r3, r3
  400f04:	68e2      	ldr	r2, [r4, #12]
  400f06:	441a      	add	r2, r3
  400f08:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f0a:	6821      	ldr	r1, [r4, #0]
  400f0c:	428a      	cmp	r2, r1
  400f0e:	d202      	bcs.n	400f16 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f10:	6862      	ldr	r2, [r4, #4]
  400f12:	4413      	add	r3, r2
  400f14:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f16:	2d02      	cmp	r5, #2
  400f18:	d10a      	bne.n	400f30 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f1c:	b153      	cbz	r3, 400f34 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f20:	3b01      	subs	r3, #1
  400f22:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f24:	2000      	movs	r0, #0
  400f26:	e006      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f28:	2000      	movs	r0, #0
  400f2a:	e004      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f2c:	2000      	movs	r0, #0
  400f2e:	e002      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f30:	2000      	movs	r0, #0
  400f32:	e000      	b.n	400f36 <prvCopyDataToQueue+0x76>
  400f34:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f38:	3301      	adds	r3, #1
  400f3a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f3c:	bd38      	pop	{r3, r4, r5, pc}
  400f3e:	bf00      	nop
  400f40:	00402235 	.word	0x00402235
  400f44:	0040b1d9 	.word	0x0040b1d9

00400f48 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f48:	b530      	push	{r4, r5, lr}
  400f4a:	b083      	sub	sp, #12
  400f4c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f4e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f50:	b954      	cbnz	r4, 400f68 <prvNotifyQueueSetContainer+0x20>
  400f52:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f56:	b672      	cpsid	i
  400f58:	f383 8811 	msr	BASEPRI, r3
  400f5c:	f3bf 8f6f 	isb	sy
  400f60:	f3bf 8f4f 	dsb	sy
  400f64:	b662      	cpsie	i
  400f66:	e7fe      	b.n	400f66 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f6c:	429a      	cmp	r2, r3
  400f6e:	d30a      	bcc.n	400f86 <prvNotifyQueueSetContainer+0x3e>
  400f70:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f74:	b672      	cpsid	i
  400f76:	f383 8811 	msr	BASEPRI, r3
  400f7a:	f3bf 8f6f 	isb	sy
  400f7e:	f3bf 8f4f 	dsb	sy
  400f82:	b662      	cpsie	i
  400f84:	e7fe      	b.n	400f84 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400f86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f88:	4293      	cmp	r3, r2
  400f8a:	d917      	bls.n	400fbc <prvNotifyQueueSetContainer+0x74>
  400f8c:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400f8e:	4620      	mov	r0, r4
  400f90:	a901      	add	r1, sp, #4
  400f92:	4b0c      	ldr	r3, [pc, #48]	; (400fc4 <prvNotifyQueueSetContainer+0x7c>)
  400f94:	4798      	blx	r3
  400f96:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400f98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f9e:	d109      	bne.n	400fb4 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fa2:	b163      	cbz	r3, 400fbe <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fa8:	4b07      	ldr	r3, [pc, #28]	; (400fc8 <prvNotifyQueueSetContainer+0x80>)
  400faa:	4798      	blx	r3
  400fac:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fae:	bf18      	it	ne
  400fb0:	2501      	movne	r5, #1
  400fb2:	e004      	b.n	400fbe <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fb6:	3301      	adds	r3, #1
  400fb8:	64a3      	str	r3, [r4, #72]	; 0x48
  400fba:	e000      	b.n	400fbe <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fbc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fbe:	4628      	mov	r0, r5
  400fc0:	b003      	add	sp, #12
  400fc2:	bd30      	pop	{r4, r5, pc}
  400fc4:	00400ec1 	.word	0x00400ec1
  400fc8:	00402005 	.word	0x00402005

00400fcc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400fcc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400fce:	b172      	cbz	r2, 400fee <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400fd0:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400fd2:	68c3      	ldr	r3, [r0, #12]
  400fd4:	4413      	add	r3, r2
  400fd6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400fd8:	6844      	ldr	r4, [r0, #4]
  400fda:	42a3      	cmp	r3, r4
  400fdc:	d301      	bcc.n	400fe2 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400fde:	6803      	ldr	r3, [r0, #0]
  400fe0:	60c3      	str	r3, [r0, #12]
  400fe2:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400fe4:	4608      	mov	r0, r1
  400fe6:	68d9      	ldr	r1, [r3, #12]
  400fe8:	4b01      	ldr	r3, [pc, #4]	; (400ff0 <prvCopyDataFromQueue+0x24>)
  400fea:	4798      	blx	r3
  400fec:	bd10      	pop	{r4, pc}
  400fee:	4770      	bx	lr
  400ff0:	0040b1d9 	.word	0x0040b1d9

00400ff4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ff6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400ff8:	4b20      	ldr	r3, [pc, #128]	; (40107c <prvUnlockQueue+0x88>)
  400ffa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ffe:	2b00      	cmp	r3, #0
  401000:	dd18      	ble.n	401034 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401002:	4d1f      	ldr	r5, [pc, #124]	; (401080 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401004:	4f1f      	ldr	r7, [pc, #124]	; (401084 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401006:	4e20      	ldr	r6, [pc, #128]	; (401088 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401008:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40100a:	b133      	cbz	r3, 40101a <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40100c:	4620      	mov	r0, r4
  40100e:	2100      	movs	r1, #0
  401010:	47a8      	blx	r5
  401012:	2801      	cmp	r0, #1
  401014:	d108      	bne.n	401028 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401016:	47b8      	blx	r7
  401018:	e006      	b.n	401028 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40101a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40101c:	b153      	cbz	r3, 401034 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40101e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401022:	47b0      	blx	r6
  401024:	b100      	cbz	r0, 401028 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401026:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40102a:	3b01      	subs	r3, #1
  40102c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40102e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401030:	2b00      	cmp	r3, #0
  401032:	dce9      	bgt.n	401008 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401034:	f04f 33ff 	mov.w	r3, #4294967295
  401038:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40103a:	4b14      	ldr	r3, [pc, #80]	; (40108c <prvUnlockQueue+0x98>)
  40103c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40103e:	4b0f      	ldr	r3, [pc, #60]	; (40107c <prvUnlockQueue+0x88>)
  401040:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401042:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401044:	2b00      	cmp	r3, #0
  401046:	dd13      	ble.n	401070 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401048:	6923      	ldr	r3, [r4, #16]
  40104a:	b91b      	cbnz	r3, 401054 <prvUnlockQueue+0x60>
  40104c:	e010      	b.n	401070 <prvUnlockQueue+0x7c>
  40104e:	6923      	ldr	r3, [r4, #16]
  401050:	b923      	cbnz	r3, 40105c <prvUnlockQueue+0x68>
  401052:	e00d      	b.n	401070 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401054:	f104 0610 	add.w	r6, r4, #16
  401058:	4d0b      	ldr	r5, [pc, #44]	; (401088 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40105a:	4f0a      	ldr	r7, [pc, #40]	; (401084 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40105c:	4630      	mov	r0, r6
  40105e:	47a8      	blx	r5
  401060:	b100      	cbz	r0, 401064 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401062:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401064:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401066:	3b01      	subs	r3, #1
  401068:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40106a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40106c:	2b00      	cmp	r3, #0
  40106e:	dcee      	bgt.n	40104e <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401070:	f04f 33ff 	mov.w	r3, #4294967295
  401074:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401076:	4b05      	ldr	r3, [pc, #20]	; (40108c <prvUnlockQueue+0x98>)
  401078:	4798      	blx	r3
  40107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40107c:	00400b5d 	.word	0x00400b5d
  401080:	00400f49 	.word	0x00400f49
  401084:	00402161 	.word	0x00402161
  401088:	00402005 	.word	0x00402005
  40108c:	00400ba9 	.word	0x00400ba9

00401090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  401090:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401092:	b950      	cbnz	r0, 4010aa <xQueueGenericReset+0x1a>
  401094:	f04f 0380 	mov.w	r3, #128	; 0x80
  401098:	b672      	cpsid	i
  40109a:	f383 8811 	msr	BASEPRI, r3
  40109e:	f3bf 8f6f 	isb	sy
  4010a2:	f3bf 8f4f 	dsb	sy
  4010a6:	b662      	cpsie	i
  4010a8:	e7fe      	b.n	4010a8 <xQueueGenericReset+0x18>
  4010aa:	4604      	mov	r4, r0
  4010ac:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010ae:	4b18      	ldr	r3, [pc, #96]	; (401110 <xQueueGenericReset+0x80>)
  4010b0:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010b2:	6822      	ldr	r2, [r4, #0]
  4010b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010b8:	fb03 f301 	mul.w	r3, r3, r1
  4010bc:	18d0      	adds	r0, r2, r3
  4010be:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010c0:	2000      	movs	r0, #0
  4010c2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010c4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010c6:	1a5b      	subs	r3, r3, r1
  4010c8:	4413      	add	r3, r2
  4010ca:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010cc:	f04f 33ff 	mov.w	r3, #4294967295
  4010d0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4010d2:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4010d4:	b985      	cbnz	r5, 4010f8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010d6:	6923      	ldr	r3, [r4, #16]
  4010d8:	b1ab      	cbz	r3, 401106 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010da:	f104 0010 	add.w	r0, r4, #16
  4010de:	4b0d      	ldr	r3, [pc, #52]	; (401114 <xQueueGenericReset+0x84>)
  4010e0:	4798      	blx	r3
  4010e2:	2801      	cmp	r0, #1
  4010e4:	d10f      	bne.n	401106 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4010e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010ea:	4b0b      	ldr	r3, [pc, #44]	; (401118 <xQueueGenericReset+0x88>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	f3bf 8f4f 	dsb	sy
  4010f2:	f3bf 8f6f 	isb	sy
  4010f6:	e006      	b.n	401106 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4010f8:	f104 0010 	add.w	r0, r4, #16
  4010fc:	4d07      	ldr	r5, [pc, #28]	; (40111c <xQueueGenericReset+0x8c>)
  4010fe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401100:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401104:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401106:	4b06      	ldr	r3, [pc, #24]	; (401120 <xQueueGenericReset+0x90>)
  401108:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  40110a:	2001      	movs	r0, #1
  40110c:	bd38      	pop	{r3, r4, r5, pc}
  40110e:	bf00      	nop
  401110:	00400b5d 	.word	0x00400b5d
  401114:	00402005 	.word	0x00402005
  401118:	e000ed04 	.word	0xe000ed04
  40111c:	00400e31 	.word	0x00400e31
  401120:	00400ba9 	.word	0x00400ba9

00401124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401126:	b950      	cbnz	r0, 40113e <xQueueGenericCreate+0x1a>
  401128:	f04f 0380 	mov.w	r3, #128	; 0x80
  40112c:	b672      	cpsid	i
  40112e:	f383 8811 	msr	BASEPRI, r3
  401132:	f3bf 8f6f 	isb	sy
  401136:	f3bf 8f4f 	dsb	sy
  40113a:	b662      	cpsie	i
  40113c:	e7fe      	b.n	40113c <xQueueGenericCreate+0x18>
  40113e:	460d      	mov	r5, r1
  401140:	4617      	mov	r7, r2
  401142:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  401144:	b1c1      	cbz	r1, 401178 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401146:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40114a:	3059      	adds	r0, #89	; 0x59
  40114c:	4b14      	ldr	r3, [pc, #80]	; (4011a0 <xQueueGenericCreate+0x7c>)
  40114e:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401150:	4604      	mov	r4, r0
  401152:	b910      	cbnz	r0, 40115a <xQueueGenericCreate+0x36>
  401154:	e005      	b.n	401162 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401156:	6024      	str	r4, [r4, #0]
  401158:	e015      	b.n	401186 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40115a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40115e:	6003      	str	r3, [r0, #0]
  401160:	e011      	b.n	401186 <xQueueGenericCreate+0x62>
  401162:	f04f 0380 	mov.w	r3, #128	; 0x80
  401166:	b672      	cpsid	i
  401168:	f383 8811 	msr	BASEPRI, r3
  40116c:	f3bf 8f6f 	isb	sy
  401170:	f3bf 8f4f 	dsb	sy
  401174:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401176:	e7fe      	b.n	401176 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401178:	2058      	movs	r0, #88	; 0x58
  40117a:	4b09      	ldr	r3, [pc, #36]	; (4011a0 <xQueueGenericCreate+0x7c>)
  40117c:	4798      	blx	r3

	if( pxNewQueue != NULL )
  40117e:	4604      	mov	r4, r0
  401180:	2800      	cmp	r0, #0
  401182:	d1e8      	bne.n	401156 <xQueueGenericCreate+0x32>
  401184:	e7ed      	b.n	401162 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  401186:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401188:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40118a:	4620      	mov	r0, r4
  40118c:	2101      	movs	r1, #1
  40118e:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <xQueueGenericCreate+0x80>)
  401190:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  401192:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  401196:	2300      	movs	r3, #0
  401198:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  40119a:	4620      	mov	r0, r4
  40119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40119e:	bf00      	nop
  4011a0:	00400db5 	.word	0x00400db5
  4011a4:	00401091 	.word	0x00401091

004011a8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  4011a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011ac:	b085      	sub	sp, #20
  4011ae:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011b0:	b950      	cbnz	r0, 4011c8 <xQueueGenericSend+0x20>
  4011b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011b6:	b672      	cpsid	i
  4011b8:	f383 8811 	msr	BASEPRI, r3
  4011bc:	f3bf 8f6f 	isb	sy
  4011c0:	f3bf 8f4f 	dsb	sy
  4011c4:	b662      	cpsie	i
  4011c6:	e7fe      	b.n	4011c6 <xQueueGenericSend+0x1e>
  4011c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011ca:	b961      	cbnz	r1, 4011e6 <xQueueGenericSend+0x3e>
  4011cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011ce:	b152      	cbz	r2, 4011e6 <xQueueGenericSend+0x3e>
  4011d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011d4:	b672      	cpsid	i
  4011d6:	f383 8811 	msr	BASEPRI, r3
  4011da:	f3bf 8f6f 	isb	sy
  4011de:	f3bf 8f4f 	dsb	sy
  4011e2:	b662      	cpsie	i
  4011e4:	e7fe      	b.n	4011e4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4011e6:	2b02      	cmp	r3, #2
  4011e8:	d10d      	bne.n	401206 <xQueueGenericSend+0x5e>
  4011ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4011ec:	2a01      	cmp	r2, #1
  4011ee:	d00a      	beq.n	401206 <xQueueGenericSend+0x5e>
  4011f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011f4:	b672      	cpsid	i
  4011f6:	f383 8811 	msr	BASEPRI, r3
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	f3bf 8f4f 	dsb	sy
  401202:	b662      	cpsie	i
  401204:	e7fe      	b.n	401204 <xQueueGenericSend+0x5c>
  401206:	461d      	mov	r5, r3
  401208:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40120a:	4b51      	ldr	r3, [pc, #324]	; (401350 <xQueueGenericSend+0x1a8>)
  40120c:	4798      	blx	r3
  40120e:	b960      	cbnz	r0, 40122a <xQueueGenericSend+0x82>
  401210:	9b01      	ldr	r3, [sp, #4]
  401212:	b163      	cbz	r3, 40122e <xQueueGenericSend+0x86>
  401214:	f04f 0380 	mov.w	r3, #128	; 0x80
  401218:	b672      	cpsid	i
  40121a:	f383 8811 	msr	BASEPRI, r3
  40121e:	f3bf 8f6f 	isb	sy
  401222:	f3bf 8f4f 	dsb	sy
  401226:	b662      	cpsie	i
  401228:	e7fe      	b.n	401228 <xQueueGenericSend+0x80>
  40122a:	2700      	movs	r7, #0
  40122c:	e000      	b.n	401230 <xQueueGenericSend+0x88>
  40122e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401230:	4e48      	ldr	r6, [pc, #288]	; (401354 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401232:	f8df 914c 	ldr.w	r9, [pc, #332]	; 401380 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401236:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401360 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40123a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40123c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40123e:	2d02      	cmp	r5, #2
  401240:	d002      	beq.n	401248 <xQueueGenericSend+0xa0>
  401242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401244:	429a      	cmp	r2, r3
  401246:	d233      	bcs.n	4012b0 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401248:	4620      	mov	r0, r4
  40124a:	9900      	ldr	r1, [sp, #0]
  40124c:	462a      	mov	r2, r5
  40124e:	4b42      	ldr	r3, [pc, #264]	; (401358 <xQueueGenericSend+0x1b0>)
  401250:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401252:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401254:	b173      	cbz	r3, 401274 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401256:	4620      	mov	r0, r4
  401258:	4629      	mov	r1, r5
  40125a:	4b40      	ldr	r3, [pc, #256]	; (40135c <xQueueGenericSend+0x1b4>)
  40125c:	4798      	blx	r3
  40125e:	2801      	cmp	r0, #1
  401260:	d122      	bne.n	4012a8 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401266:	4b3e      	ldr	r3, [pc, #248]	; (401360 <xQueueGenericSend+0x1b8>)
  401268:	601a      	str	r2, [r3, #0]
  40126a:	f3bf 8f4f 	dsb	sy
  40126e:	f3bf 8f6f 	isb	sy
  401272:	e019      	b.n	4012a8 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401274:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401276:	b173      	cbz	r3, 401296 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401278:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40127c:	4b39      	ldr	r3, [pc, #228]	; (401364 <xQueueGenericSend+0x1bc>)
  40127e:	4798      	blx	r3
  401280:	2801      	cmp	r0, #1
  401282:	d111      	bne.n	4012a8 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  401284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401288:	4b35      	ldr	r3, [pc, #212]	; (401360 <xQueueGenericSend+0x1b8>)
  40128a:	601a      	str	r2, [r3, #0]
  40128c:	f3bf 8f4f 	dsb	sy
  401290:	f3bf 8f6f 	isb	sy
  401294:	e008      	b.n	4012a8 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  401296:	b138      	cbz	r0, 4012a8 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  401298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40129c:	4b30      	ldr	r3, [pc, #192]	; (401360 <xQueueGenericSend+0x1b8>)
  40129e:	601a      	str	r2, [r3, #0]
  4012a0:	f3bf 8f4f 	dsb	sy
  4012a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  4012a8:	4b2f      	ldr	r3, [pc, #188]	; (401368 <xQueueGenericSend+0x1c0>)
  4012aa:	4798      	blx	r3
				return pdPASS;
  4012ac:	2001      	movs	r0, #1
  4012ae:	e04b      	b.n	401348 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012b0:	9b01      	ldr	r3, [sp, #4]
  4012b2:	b91b      	cbnz	r3, 4012bc <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012b4:	4b2c      	ldr	r3, [pc, #176]	; (401368 <xQueueGenericSend+0x1c0>)
  4012b6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012b8:	2000      	movs	r0, #0
  4012ba:	e045      	b.n	401348 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012bc:	b917      	cbnz	r7, 4012c4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012be:	a802      	add	r0, sp, #8
  4012c0:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012c2:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012c4:	4b28      	ldr	r3, [pc, #160]	; (401368 <xQueueGenericSend+0x1c0>)
  4012c6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012c8:	4b28      	ldr	r3, [pc, #160]	; (40136c <xQueueGenericSend+0x1c4>)
  4012ca:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012cc:	47b0      	blx	r6
  4012ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012d4:	d101      	bne.n	4012da <xQueueGenericSend+0x132>
  4012d6:	2300      	movs	r3, #0
  4012d8:	6463      	str	r3, [r4, #68]	; 0x44
  4012da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4012e0:	d101      	bne.n	4012e6 <xQueueGenericSend+0x13e>
  4012e2:	2300      	movs	r3, #0
  4012e4:	64a3      	str	r3, [r4, #72]	; 0x48
  4012e6:	4b20      	ldr	r3, [pc, #128]	; (401368 <xQueueGenericSend+0x1c0>)
  4012e8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4012ea:	a802      	add	r0, sp, #8
  4012ec:	a901      	add	r1, sp, #4
  4012ee:	4b20      	ldr	r3, [pc, #128]	; (401370 <xQueueGenericSend+0x1c8>)
  4012f0:	4798      	blx	r3
  4012f2:	bb18      	cbnz	r0, 40133c <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4012f4:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4012f6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4012fa:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4012fe:	4b1a      	ldr	r3, [pc, #104]	; (401368 <xQueueGenericSend+0x1c0>)
  401300:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401302:	45d3      	cmp	fp, sl
  401304:	d114      	bne.n	401330 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401306:	f104 0010 	add.w	r0, r4, #16
  40130a:	9901      	ldr	r1, [sp, #4]
  40130c:	4b19      	ldr	r3, [pc, #100]	; (401374 <xQueueGenericSend+0x1cc>)
  40130e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401310:	4620      	mov	r0, r4
  401312:	4b19      	ldr	r3, [pc, #100]	; (401378 <xQueueGenericSend+0x1d0>)
  401314:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401316:	4b19      	ldr	r3, [pc, #100]	; (40137c <xQueueGenericSend+0x1d4>)
  401318:	4798      	blx	r3
  40131a:	2800      	cmp	r0, #0
  40131c:	d18d      	bne.n	40123a <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  40131e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401322:	f8c8 3000 	str.w	r3, [r8]
  401326:	f3bf 8f4f 	dsb	sy
  40132a:	f3bf 8f6f 	isb	sy
  40132e:	e784      	b.n	40123a <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401330:	4620      	mov	r0, r4
  401332:	4b11      	ldr	r3, [pc, #68]	; (401378 <xQueueGenericSend+0x1d0>)
  401334:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401336:	4b11      	ldr	r3, [pc, #68]	; (40137c <xQueueGenericSend+0x1d4>)
  401338:	4798      	blx	r3
  40133a:	e77e      	b.n	40123a <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40133c:	4620      	mov	r0, r4
  40133e:	4b0e      	ldr	r3, [pc, #56]	; (401378 <xQueueGenericSend+0x1d0>)
  401340:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401342:	4b0e      	ldr	r3, [pc, #56]	; (40137c <xQueueGenericSend+0x1d4>)
  401344:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401346:	2000      	movs	r0, #0
		}
	}
}
  401348:	b005      	add	sp, #20
  40134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40134e:	bf00      	nop
  401350:	0040216d 	.word	0x0040216d
  401354:	00400b5d 	.word	0x00400b5d
  401358:	00400ec1 	.word	0x00400ec1
  40135c:	00400f49 	.word	0x00400f49
  401360:	e000ed04 	.word	0xe000ed04
  401364:	00402005 	.word	0x00402005
  401368:	00400ba9 	.word	0x00400ba9
  40136c:	00401ae1 	.word	0x00401ae1
  401370:	004020cd 	.word	0x004020cd
  401374:	00401f01 	.word	0x00401f01
  401378:	00400ff5 	.word	0x00400ff5
  40137c:	00401c31 	.word	0x00401c31
  401380:	0040209d 	.word	0x0040209d

00401384 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401384:	b950      	cbnz	r0, 40139c <xQueueGenericSendFromISR+0x18>
  401386:	f04f 0380 	mov.w	r3, #128	; 0x80
  40138a:	b672      	cpsid	i
  40138c:	f383 8811 	msr	BASEPRI, r3
  401390:	f3bf 8f6f 	isb	sy
  401394:	f3bf 8f4f 	dsb	sy
  401398:	b662      	cpsie	i
  40139a:	e7fe      	b.n	40139a <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  40139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013a0:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013a2:	b961      	cbnz	r1, 4013be <xQueueGenericSendFromISR+0x3a>
  4013a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4013a6:	b150      	cbz	r0, 4013be <xQueueGenericSendFromISR+0x3a>
  4013a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013ac:	b672      	cpsid	i
  4013ae:	f383 8811 	msr	BASEPRI, r3
  4013b2:	f3bf 8f6f 	isb	sy
  4013b6:	f3bf 8f4f 	dsb	sy
  4013ba:	b662      	cpsie	i
  4013bc:	e7fe      	b.n	4013bc <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013be:	2b02      	cmp	r3, #2
  4013c0:	d10d      	bne.n	4013de <xQueueGenericSendFromISR+0x5a>
  4013c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4013c4:	2801      	cmp	r0, #1
  4013c6:	d00a      	beq.n	4013de <xQueueGenericSendFromISR+0x5a>
  4013c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013cc:	b672      	cpsid	i
  4013ce:	f383 8811 	msr	BASEPRI, r3
  4013d2:	f3bf 8f6f 	isb	sy
  4013d6:	f3bf 8f4f 	dsb	sy
  4013da:	b662      	cpsie	i
  4013dc:	e7fe      	b.n	4013dc <xQueueGenericSendFromISR+0x58>
  4013de:	461e      	mov	r6, r3
  4013e0:	4615      	mov	r5, r2
  4013e2:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4013e4:	4b21      	ldr	r3, [pc, #132]	; (40146c <xQueueGenericSendFromISR+0xe8>)
  4013e6:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4013e8:	f3ef 8711 	mrs	r7, BASEPRI
  4013ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013f0:	b672      	cpsid	i
  4013f2:	f383 8811 	msr	BASEPRI, r3
  4013f6:	f3bf 8f6f 	isb	sy
  4013fa:	f3bf 8f4f 	dsb	sy
  4013fe:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401400:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401402:	2e02      	cmp	r6, #2
  401404:	d002      	beq.n	40140c <xQueueGenericSendFromISR+0x88>
  401406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401408:	429a      	cmp	r2, r3
  40140a:	d223      	bcs.n	401454 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40140c:	4620      	mov	r0, r4
  40140e:	4641      	mov	r1, r8
  401410:	4632      	mov	r2, r6
  401412:	4b17      	ldr	r3, [pc, #92]	; (401470 <xQueueGenericSendFromISR+0xec>)
  401414:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401416:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401418:	f1b3 3fff 	cmp.w	r3, #4294967295
  40141c:	d115      	bne.n	40144a <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40141e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401420:	b143      	cbz	r3, 401434 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401422:	4620      	mov	r0, r4
  401424:	4631      	mov	r1, r6
  401426:	4b13      	ldr	r3, [pc, #76]	; (401474 <xQueueGenericSendFromISR+0xf0>)
  401428:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40142a:	2801      	cmp	r0, #1
  40142c:	d114      	bne.n	401458 <xQueueGenericSendFromISR+0xd4>
  40142e:	b19d      	cbz	r5, 401458 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401430:	6028      	str	r0, [r5, #0]
  401432:	e016      	b.n	401462 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401434:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401436:	b18b      	cbz	r3, 40145c <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401438:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40143c:	4b0e      	ldr	r3, [pc, #56]	; (401478 <xQueueGenericSendFromISR+0xf4>)
  40143e:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401440:	b170      	cbz	r0, 401460 <xQueueGenericSendFromISR+0xdc>
  401442:	b16d      	cbz	r5, 401460 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401444:	2001      	movs	r0, #1
  401446:	6028      	str	r0, [r5, #0]
  401448:	e00b      	b.n	401462 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40144a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40144c:	3301      	adds	r3, #1
  40144e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401450:	2001      	movs	r0, #1
  401452:	e006      	b.n	401462 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401454:	2000      	movs	r0, #0
  401456:	e004      	b.n	401462 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401458:	2001      	movs	r0, #1
  40145a:	e002      	b.n	401462 <xQueueGenericSendFromISR+0xde>
  40145c:	2001      	movs	r0, #1
  40145e:	e000      	b.n	401462 <xQueueGenericSendFromISR+0xde>
  401460:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401462:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40146a:	bf00      	nop
  40146c:	00400d51 	.word	0x00400d51
  401470:	00400ec1 	.word	0x00400ec1
  401474:	00400f49 	.word	0x00400f49
  401478:	00402005 	.word	0x00402005

0040147c <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  40147c:	b950      	cbnz	r0, 401494 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40147e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401482:	b672      	cpsid	i
  401484:	f383 8811 	msr	BASEPRI, r3
  401488:	f3bf 8f6f 	isb	sy
  40148c:	f3bf 8f4f 	dsb	sy
  401490:	b662      	cpsie	i
  401492:	e7fe      	b.n	401492 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  401494:	b570      	push	{r4, r5, r6, lr}
  401496:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  401498:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40149a:	b153      	cbz	r3, 4014b2 <xQueueGiveFromISR+0x36>
  40149c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014a0:	b672      	cpsid	i
  4014a2:	f383 8811 	msr	BASEPRI, r3
  4014a6:	f3bf 8f6f 	isb	sy
  4014aa:	f3bf 8f4f 	dsb	sy
  4014ae:	b662      	cpsie	i
  4014b0:	e7fe      	b.n	4014b0 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4014b2:	6803      	ldr	r3, [r0, #0]
  4014b4:	b963      	cbnz	r3, 4014d0 <xQueueGiveFromISR+0x54>
  4014b6:	6843      	ldr	r3, [r0, #4]
  4014b8:	b153      	cbz	r3, 4014d0 <xQueueGiveFromISR+0x54>
  4014ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014be:	b672      	cpsid	i
  4014c0:	f383 8811 	msr	BASEPRI, r3
  4014c4:	f3bf 8f6f 	isb	sy
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	b662      	cpsie	i
  4014ce:	e7fe      	b.n	4014ce <xQueueGiveFromISR+0x52>
  4014d0:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4014d2:	4b1f      	ldr	r3, [pc, #124]	; (401550 <xQueueGiveFromISR+0xd4>)
  4014d4:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4014d6:	f3ef 8611 	mrs	r6, BASEPRI
  4014da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014de:	b672      	cpsid	i
  4014e0:	f383 8811 	msr	BASEPRI, r3
  4014e4:	f3bf 8f6f 	isb	sy
  4014e8:	f3bf 8f4f 	dsb	sy
  4014ec:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4014ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4014f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4014f2:	429a      	cmp	r2, r3
  4014f4:	d221      	bcs.n	40153a <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  4014f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014f8:	3301      	adds	r3, #1
  4014fa:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  4014fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401502:	d115      	bne.n	401530 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401504:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401506:	b143      	cbz	r3, 40151a <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401508:	4620      	mov	r0, r4
  40150a:	2100      	movs	r1, #0
  40150c:	4b11      	ldr	r3, [pc, #68]	; (401554 <xQueueGiveFromISR+0xd8>)
  40150e:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401510:	2801      	cmp	r0, #1
  401512:	d114      	bne.n	40153e <xQueueGiveFromISR+0xc2>
  401514:	b19d      	cbz	r5, 40153e <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401516:	6028      	str	r0, [r5, #0]
  401518:	e016      	b.n	401548 <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40151a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40151c:	b18b      	cbz	r3, 401542 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40151e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401522:	4b0d      	ldr	r3, [pc, #52]	; (401558 <xQueueGiveFromISR+0xdc>)
  401524:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401526:	b170      	cbz	r0, 401546 <xQueueGiveFromISR+0xca>
  401528:	b16d      	cbz	r5, 401546 <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  40152a:	2001      	movs	r0, #1
  40152c:	6028      	str	r0, [r5, #0]
  40152e:	e00b      	b.n	401548 <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401530:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401532:	3301      	adds	r3, #1
  401534:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401536:	2001      	movs	r0, #1
  401538:	e006      	b.n	401548 <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40153a:	2000      	movs	r0, #0
  40153c:	e004      	b.n	401548 <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  40153e:	2001      	movs	r0, #1
  401540:	e002      	b.n	401548 <xQueueGiveFromISR+0xcc>
  401542:	2001      	movs	r0, #1
  401544:	e000      	b.n	401548 <xQueueGiveFromISR+0xcc>
  401546:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401548:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  40154c:	bd70      	pop	{r4, r5, r6, pc}
  40154e:	bf00      	nop
  401550:	00400d51 	.word	0x00400d51
  401554:	00400f49 	.word	0x00400f49
  401558:	00402005 	.word	0x00402005

0040155c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  40155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401560:	b085      	sub	sp, #20
  401562:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401564:	b950      	cbnz	r0, 40157c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156a:	b672      	cpsid	i
  40156c:	f383 8811 	msr	BASEPRI, r3
  401570:	f3bf 8f6f 	isb	sy
  401574:	f3bf 8f4f 	dsb	sy
  401578:	b662      	cpsie	i
  40157a:	e7fe      	b.n	40157a <xQueueGenericReceive+0x1e>
  40157c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40157e:	b961      	cbnz	r1, 40159a <xQueueGenericReceive+0x3e>
  401580:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401582:	b152      	cbz	r2, 40159a <xQueueGenericReceive+0x3e>
  401584:	f04f 0380 	mov.w	r3, #128	; 0x80
  401588:	b672      	cpsid	i
  40158a:	f383 8811 	msr	BASEPRI, r3
  40158e:	f3bf 8f6f 	isb	sy
  401592:	f3bf 8f4f 	dsb	sy
  401596:	b662      	cpsie	i
  401598:	e7fe      	b.n	401598 <xQueueGenericReceive+0x3c>
  40159a:	4698      	mov	r8, r3
  40159c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40159e:	4b52      	ldr	r3, [pc, #328]	; (4016e8 <xQueueGenericReceive+0x18c>)
  4015a0:	4798      	blx	r3
  4015a2:	b960      	cbnz	r0, 4015be <xQueueGenericReceive+0x62>
  4015a4:	9b01      	ldr	r3, [sp, #4]
  4015a6:	b163      	cbz	r3, 4015c2 <xQueueGenericReceive+0x66>
  4015a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015ac:	b672      	cpsid	i
  4015ae:	f383 8811 	msr	BASEPRI, r3
  4015b2:	f3bf 8f6f 	isb	sy
  4015b6:	f3bf 8f4f 	dsb	sy
  4015ba:	b662      	cpsie	i
  4015bc:	e7fe      	b.n	4015bc <xQueueGenericReceive+0x60>
  4015be:	2600      	movs	r6, #0
  4015c0:	e000      	b.n	4015c4 <xQueueGenericReceive+0x68>
  4015c2:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015c4:	4d49      	ldr	r5, [pc, #292]	; (4016ec <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4015c6:	f8df a154 	ldr.w	sl, [pc, #340]	; 40171c <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4015ca:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4016fc <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4015ce:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4015d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015d2:	2b00      	cmp	r3, #0
  4015d4:	d034      	beq.n	401640 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4015d6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4015d8:	4620      	mov	r0, r4
  4015da:	4659      	mov	r1, fp
  4015dc:	4b44      	ldr	r3, [pc, #272]	; (4016f0 <xQueueGenericReceive+0x194>)
  4015de:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4015e0:	f1b8 0f00 	cmp.w	r8, #0
  4015e4:	d118      	bne.n	401618 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4015e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015e8:	3b01      	subs	r3, #1
  4015ea:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015ec:	6823      	ldr	r3, [r4, #0]
  4015ee:	b913      	cbnz	r3, 4015f6 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4015f0:	4b40      	ldr	r3, [pc, #256]	; (4016f4 <xQueueGenericReceive+0x198>)
  4015f2:	4798      	blx	r3
  4015f4:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015f6:	6923      	ldr	r3, [r4, #16]
  4015f8:	b1f3      	cbz	r3, 401638 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015fa:	f104 0010 	add.w	r0, r4, #16
  4015fe:	4b3e      	ldr	r3, [pc, #248]	; (4016f8 <xQueueGenericReceive+0x19c>)
  401600:	4798      	blx	r3
  401602:	2801      	cmp	r0, #1
  401604:	d118      	bne.n	401638 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40160a:	4b3c      	ldr	r3, [pc, #240]	; (4016fc <xQueueGenericReceive+0x1a0>)
  40160c:	601a      	str	r2, [r3, #0]
  40160e:	f3bf 8f4f 	dsb	sy
  401612:	f3bf 8f6f 	isb	sy
  401616:	e00f      	b.n	401638 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401618:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40161a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40161c:	b163      	cbz	r3, 401638 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40161e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401622:	4b35      	ldr	r3, [pc, #212]	; (4016f8 <xQueueGenericReceive+0x19c>)
  401624:	4798      	blx	r3
  401626:	b138      	cbz	r0, 401638 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40162c:	4b33      	ldr	r3, [pc, #204]	; (4016fc <xQueueGenericReceive+0x1a0>)
  40162e:	601a      	str	r2, [r3, #0]
  401630:	f3bf 8f4f 	dsb	sy
  401634:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401638:	4b31      	ldr	r3, [pc, #196]	; (401700 <xQueueGenericReceive+0x1a4>)
  40163a:	4798      	blx	r3
				return pdPASS;
  40163c:	2001      	movs	r0, #1
  40163e:	e04f      	b.n	4016e0 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401640:	9b01      	ldr	r3, [sp, #4]
  401642:	b91b      	cbnz	r3, 40164c <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401644:	4b2e      	ldr	r3, [pc, #184]	; (401700 <xQueueGenericReceive+0x1a4>)
  401646:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401648:	2000      	movs	r0, #0
  40164a:	e049      	b.n	4016e0 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  40164c:	b916      	cbnz	r6, 401654 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40164e:	a802      	add	r0, sp, #8
  401650:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401652:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401654:	4b2a      	ldr	r3, [pc, #168]	; (401700 <xQueueGenericReceive+0x1a4>)
  401656:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401658:	4b2a      	ldr	r3, [pc, #168]	; (401704 <xQueueGenericReceive+0x1a8>)
  40165a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40165c:	47a8      	blx	r5
  40165e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401660:	f1b3 3fff 	cmp.w	r3, #4294967295
  401664:	d101      	bne.n	40166a <xQueueGenericReceive+0x10e>
  401666:	2300      	movs	r3, #0
  401668:	6463      	str	r3, [r4, #68]	; 0x44
  40166a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40166c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401670:	d101      	bne.n	401676 <xQueueGenericReceive+0x11a>
  401672:	2300      	movs	r3, #0
  401674:	64a3      	str	r3, [r4, #72]	; 0x48
  401676:	4b22      	ldr	r3, [pc, #136]	; (401700 <xQueueGenericReceive+0x1a4>)
  401678:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40167a:	a802      	add	r0, sp, #8
  40167c:	a901      	add	r1, sp, #4
  40167e:	4b22      	ldr	r3, [pc, #136]	; (401708 <xQueueGenericReceive+0x1ac>)
  401680:	4798      	blx	r3
  401682:	bb38      	cbnz	r0, 4016d4 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401684:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401686:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401688:	4b1d      	ldr	r3, [pc, #116]	; (401700 <xQueueGenericReceive+0x1a4>)
  40168a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40168c:	b9e7      	cbnz	r7, 4016c8 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40168e:	6823      	ldr	r3, [r4, #0]
  401690:	b92b      	cbnz	r3, 40169e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401692:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401694:	6860      	ldr	r0, [r4, #4]
  401696:	4b1d      	ldr	r3, [pc, #116]	; (40170c <xQueueGenericReceive+0x1b0>)
  401698:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40169a:	4b19      	ldr	r3, [pc, #100]	; (401700 <xQueueGenericReceive+0x1a4>)
  40169c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40169e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016a2:	9901      	ldr	r1, [sp, #4]
  4016a4:	4b1a      	ldr	r3, [pc, #104]	; (401710 <xQueueGenericReceive+0x1b4>)
  4016a6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4016a8:	4620      	mov	r0, r4
  4016aa:	4b1a      	ldr	r3, [pc, #104]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016ac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4016ae:	4b1a      	ldr	r3, [pc, #104]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016b0:	4798      	blx	r3
  4016b2:	2800      	cmp	r0, #0
  4016b4:	d18b      	bne.n	4015ce <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  4016b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016ba:	f8c9 3000 	str.w	r3, [r9]
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	f3bf 8f6f 	isb	sy
  4016c6:	e782      	b.n	4015ce <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4016c8:	4620      	mov	r0, r4
  4016ca:	4b12      	ldr	r3, [pc, #72]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016cc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4016ce:	4b12      	ldr	r3, [pc, #72]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016d0:	4798      	blx	r3
  4016d2:	e77c      	b.n	4015ce <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4016d4:	4620      	mov	r0, r4
  4016d6:	4b0f      	ldr	r3, [pc, #60]	; (401714 <xQueueGenericReceive+0x1b8>)
  4016d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016da:	4b0f      	ldr	r3, [pc, #60]	; (401718 <xQueueGenericReceive+0x1bc>)
  4016dc:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4016de:	2000      	movs	r0, #0
		}
	}
}
  4016e0:	b005      	add	sp, #20
  4016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016e6:	bf00      	nop
  4016e8:	0040216d 	.word	0x0040216d
  4016ec:	00400b5d 	.word	0x00400b5d
  4016f0:	00400fcd 	.word	0x00400fcd
  4016f4:	004022f5 	.word	0x004022f5
  4016f8:	00402005 	.word	0x00402005
  4016fc:	e000ed04 	.word	0xe000ed04
  401700:	00400ba9 	.word	0x00400ba9
  401704:	00401ae1 	.word	0x00401ae1
  401708:	004020cd 	.word	0x004020cd
  40170c:	0040218d 	.word	0x0040218d
  401710:	00401f01 	.word	0x00401f01
  401714:	00400ff5 	.word	0x00400ff5
  401718:	00401c31 	.word	0x00401c31
  40171c:	0040209d 	.word	0x0040209d

00401720 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401720:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401722:	4b0b      	ldr	r3, [pc, #44]	; (401750 <vQueueAddToRegistry+0x30>)
  401724:	681b      	ldr	r3, [r3, #0]
  401726:	b12b      	cbz	r3, 401734 <vQueueAddToRegistry+0x14>
  401728:	2301      	movs	r3, #1
  40172a:	4c09      	ldr	r4, [pc, #36]	; (401750 <vQueueAddToRegistry+0x30>)
  40172c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401730:	b942      	cbnz	r2, 401744 <vQueueAddToRegistry+0x24>
  401732:	e000      	b.n	401736 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401734:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401736:	4a06      	ldr	r2, [pc, #24]	; (401750 <vQueueAddToRegistry+0x30>)
  401738:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40173c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401740:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401742:	e002      	b.n	40174a <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401744:	3301      	adds	r3, #1
  401746:	2b08      	cmp	r3, #8
  401748:	d1f0      	bne.n	40172c <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40174a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40174e:	4770      	bx	lr
  401750:	2040c5a0 	.word	0x2040c5a0

00401754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401754:	b570      	push	{r4, r5, r6, lr}
  401756:	4604      	mov	r4, r0
  401758:	460e      	mov	r6, r1
  40175a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40175c:	4b0d      	ldr	r3, [pc, #52]	; (401794 <vQueueWaitForMessageRestricted+0x40>)
  40175e:	4798      	blx	r3
  401760:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401762:	f1b3 3fff 	cmp.w	r3, #4294967295
  401766:	d101      	bne.n	40176c <vQueueWaitForMessageRestricted+0x18>
  401768:	2300      	movs	r3, #0
  40176a:	6463      	str	r3, [r4, #68]	; 0x44
  40176c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40176e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401772:	d101      	bne.n	401778 <vQueueWaitForMessageRestricted+0x24>
  401774:	2300      	movs	r3, #0
  401776:	64a3      	str	r3, [r4, #72]	; 0x48
  401778:	4b07      	ldr	r3, [pc, #28]	; (401798 <vQueueWaitForMessageRestricted+0x44>)
  40177a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40177c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40177e:	b92b      	cbnz	r3, 40178c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401780:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401784:	4631      	mov	r1, r6
  401786:	462a      	mov	r2, r5
  401788:	4b04      	ldr	r3, [pc, #16]	; (40179c <vQueueWaitForMessageRestricted+0x48>)
  40178a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40178c:	4620      	mov	r0, r4
  40178e:	4b04      	ldr	r3, [pc, #16]	; (4017a0 <vQueueWaitForMessageRestricted+0x4c>)
  401790:	4798      	blx	r3
  401792:	bd70      	pop	{r4, r5, r6, pc}
  401794:	00400b5d 	.word	0x00400b5d
  401798:	00400ba9 	.word	0x00400ba9
  40179c:	00401f85 	.word	0x00401f85
  4017a0:	00400ff5 	.word	0x00400ff5

004017a4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4017a4:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <prvResetNextTaskUnblockTime+0x24>)
  4017a6:	681b      	ldr	r3, [r3, #0]
  4017a8:	681b      	ldr	r3, [r3, #0]
  4017aa:	b923      	cbnz	r3, 4017b6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4017ac:	f04f 32ff 	mov.w	r2, #4294967295
  4017b0:	4b06      	ldr	r3, [pc, #24]	; (4017cc <prvResetNextTaskUnblockTime+0x28>)
  4017b2:	601a      	str	r2, [r3, #0]
  4017b4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017b6:	4b04      	ldr	r3, [pc, #16]	; (4017c8 <prvResetNextTaskUnblockTime+0x24>)
  4017b8:	681b      	ldr	r3, [r3, #0]
  4017ba:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017bc:	68db      	ldr	r3, [r3, #12]
  4017be:	685a      	ldr	r2, [r3, #4]
  4017c0:	4b02      	ldr	r3, [pc, #8]	; (4017cc <prvResetNextTaskUnblockTime+0x28>)
  4017c2:	601a      	str	r2, [r3, #0]
  4017c4:	4770      	bx	lr
  4017c6:	bf00      	nop
  4017c8:	2040c1f0 	.word	0x2040c1f0
  4017cc:	2040c440 	.word	0x2040c440

004017d0 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4017d0:	b510      	push	{r4, lr}
  4017d2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017d4:	4b0e      	ldr	r3, [pc, #56]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017d6:	681b      	ldr	r3, [r3, #0]
  4017d8:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4017da:	4b0e      	ldr	r3, [pc, #56]	; (401814 <prvAddCurrentTaskToDelayedList+0x44>)
  4017dc:	681b      	ldr	r3, [r3, #0]
  4017de:	4298      	cmp	r0, r3
  4017e0:	d207      	bcs.n	4017f2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017e2:	4b0d      	ldr	r3, [pc, #52]	; (401818 <prvAddCurrentTaskToDelayedList+0x48>)
  4017e4:	6818      	ldr	r0, [r3, #0]
  4017e6:	4b0a      	ldr	r3, [pc, #40]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017e8:	6819      	ldr	r1, [r3, #0]
  4017ea:	3104      	adds	r1, #4
  4017ec:	4b0b      	ldr	r3, [pc, #44]	; (40181c <prvAddCurrentTaskToDelayedList+0x4c>)
  4017ee:	4798      	blx	r3
  4017f0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017f2:	4b0b      	ldr	r3, [pc, #44]	; (401820 <prvAddCurrentTaskToDelayedList+0x50>)
  4017f4:	6818      	ldr	r0, [r3, #0]
  4017f6:	4b06      	ldr	r3, [pc, #24]	; (401810 <prvAddCurrentTaskToDelayedList+0x40>)
  4017f8:	6819      	ldr	r1, [r3, #0]
  4017fa:	3104      	adds	r1, #4
  4017fc:	4b07      	ldr	r3, [pc, #28]	; (40181c <prvAddCurrentTaskToDelayedList+0x4c>)
  4017fe:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401800:	4b08      	ldr	r3, [pc, #32]	; (401824 <prvAddCurrentTaskToDelayedList+0x54>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	429c      	cmp	r4, r3
  401806:	d201      	bcs.n	40180c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <prvAddCurrentTaskToDelayedList+0x54>)
  40180a:	601c      	str	r4, [r3, #0]
  40180c:	bd10      	pop	{r4, pc}
  40180e:	bf00      	nop
  401810:	2040c420 	.word	0x2040c420
  401814:	2040c43c 	.word	0x2040c43c
  401818:	2040c210 	.word	0x2040c210
  40181c:	00400e69 	.word	0x00400e69
  401820:	2040c1f0 	.word	0x2040c1f0
  401824:	2040c440 	.word	0x2040c440

00401828 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  401828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40182c:	b083      	sub	sp, #12
  40182e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401830:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401834:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  401836:	b950      	cbnz	r0, 40184e <xTaskGenericCreate+0x26>
  401838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40183c:	b672      	cpsid	i
  40183e:	f383 8811 	msr	BASEPRI, r3
  401842:	f3bf 8f6f 	isb	sy
  401846:	f3bf 8f4f 	dsb	sy
  40184a:	b662      	cpsie	i
  40184c:	e7fe      	b.n	40184c <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40184e:	2f18      	cmp	r7, #24
  401850:	d90a      	bls.n	401868 <xTaskGenericCreate+0x40>
  401852:	f04f 0380 	mov.w	r3, #128	; 0x80
  401856:	b672      	cpsid	i
  401858:	f383 8811 	msr	BASEPRI, r3
  40185c:	f3bf 8f6f 	isb	sy
  401860:	f3bf 8f4f 	dsb	sy
  401864:	b662      	cpsie	i
  401866:	e7fe      	b.n	401866 <xTaskGenericCreate+0x3e>
  401868:	9001      	str	r0, [sp, #4]
  40186a:	9300      	str	r3, [sp, #0]
  40186c:	4690      	mov	r8, r2
  40186e:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401870:	b935      	cbnz	r5, 401880 <xTaskGenericCreate+0x58>
  401872:	0090      	lsls	r0, r2, #2
  401874:	4b5f      	ldr	r3, [pc, #380]	; (4019f4 <xTaskGenericCreate+0x1cc>)
  401876:	4798      	blx	r3

		if( pxStack != NULL )
  401878:	4605      	mov	r5, r0
  40187a:	2800      	cmp	r0, #0
  40187c:	f000 80b4 	beq.w	4019e8 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401880:	2058      	movs	r0, #88	; 0x58
  401882:	4b5c      	ldr	r3, [pc, #368]	; (4019f4 <xTaskGenericCreate+0x1cc>)
  401884:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401886:	4604      	mov	r4, r0
  401888:	b1a0      	cbz	r0, 4018b4 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40188a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40188c:	4628      	mov	r0, r5
  40188e:	21a5      	movs	r1, #165	; 0xa5
  401890:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401894:	4b58      	ldr	r3, [pc, #352]	; (4019f8 <xTaskGenericCreate+0x1d0>)
  401896:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401898:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40189c:	4445      	add	r5, r8
  40189e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4018a4:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018a8:	7833      	ldrb	r3, [r6, #0]
  4018aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018ae:	7833      	ldrb	r3, [r6, #0]
  4018b0:	b923      	cbnz	r3, 4018bc <xTaskGenericCreate+0x94>
  4018b2:	e00f      	b.n	4018d4 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4018b4:	4628      	mov	r0, r5
  4018b6:	4b51      	ldr	r3, [pc, #324]	; (4019fc <xTaskGenericCreate+0x1d4>)
  4018b8:	4798      	blx	r3
  4018ba:	e095      	b.n	4019e8 <xTaskGenericCreate+0x1c0>
  4018bc:	4633      	mov	r3, r6
  4018be:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018c2:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4018c8:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018cc:	7819      	ldrb	r1, [r3, #0]
  4018ce:	b109      	cbz	r1, 4018d4 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4018d0:	42b3      	cmp	r3, r6
  4018d2:	d1f7      	bne.n	4018c4 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018d4:	f04f 0800 	mov.w	r8, #0
  4018d8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4018dc:	463e      	mov	r6, r7
  4018de:	2f18      	cmp	r7, #24
  4018e0:	bf28      	it	cs
  4018e2:	2618      	movcs	r6, #24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4018e4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018e6:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018e8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018ec:	f104 0904 	add.w	r9, r4, #4
  4018f0:	4648      	mov	r0, r9
  4018f2:	f8df b154 	ldr.w	fp, [pc, #340]	; 401a48 <xTaskGenericCreate+0x220>
  4018f6:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018f8:	f104 0018 	add.w	r0, r4, #24
  4018fc:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018fe:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401900:	f1c6 0619 	rsb	r6, r6, #25
  401904:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401906:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401908:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40190c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401910:	4628      	mov	r0, r5
  401912:	9901      	ldr	r1, [sp, #4]
  401914:	9a00      	ldr	r2, [sp, #0]
  401916:	4b3a      	ldr	r3, [pc, #232]	; (401a00 <xTaskGenericCreate+0x1d8>)
  401918:	4798      	blx	r3
  40191a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  40191c:	f1ba 0f00 	cmp.w	sl, #0
  401920:	d001      	beq.n	401926 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401922:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  401926:	4b37      	ldr	r3, [pc, #220]	; (401a04 <xTaskGenericCreate+0x1dc>)
  401928:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40192a:	4a37      	ldr	r2, [pc, #220]	; (401a08 <xTaskGenericCreate+0x1e0>)
  40192c:	6813      	ldr	r3, [r2, #0]
  40192e:	3301      	adds	r3, #1
  401930:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401932:	4b36      	ldr	r3, [pc, #216]	; (401a0c <xTaskGenericCreate+0x1e4>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	bb0b      	cbnz	r3, 40197c <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401938:	4b34      	ldr	r3, [pc, #208]	; (401a0c <xTaskGenericCreate+0x1e4>)
  40193a:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40193c:	6813      	ldr	r3, [r2, #0]
  40193e:	2b01      	cmp	r3, #1
  401940:	d126      	bne.n	401990 <xTaskGenericCreate+0x168>
  401942:	4d33      	ldr	r5, [pc, #204]	; (401a10 <xTaskGenericCreate+0x1e8>)
  401944:	f505 78fa 	add.w	r8, r5, #500	; 0x1f4
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401948:	4e32      	ldr	r6, [pc, #200]	; (401a14 <xTaskGenericCreate+0x1ec>)
  40194a:	4628      	mov	r0, r5
  40194c:	47b0      	blx	r6
  40194e:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401950:	4545      	cmp	r5, r8
  401952:	d1fa      	bne.n	40194a <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401954:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401a4c <xTaskGenericCreate+0x224>
  401958:	4640      	mov	r0, r8
  40195a:	4d2e      	ldr	r5, [pc, #184]	; (401a14 <xTaskGenericCreate+0x1ec>)
  40195c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40195e:	4e2e      	ldr	r6, [pc, #184]	; (401a18 <xTaskGenericCreate+0x1f0>)
  401960:	4630      	mov	r0, r6
  401962:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401964:	482d      	ldr	r0, [pc, #180]	; (401a1c <xTaskGenericCreate+0x1f4>)
  401966:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401968:	482d      	ldr	r0, [pc, #180]	; (401a20 <xTaskGenericCreate+0x1f8>)
  40196a:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  40196c:	482d      	ldr	r0, [pc, #180]	; (401a24 <xTaskGenericCreate+0x1fc>)
  40196e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401970:	4b2d      	ldr	r3, [pc, #180]	; (401a28 <xTaskGenericCreate+0x200>)
  401972:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401976:	4b2d      	ldr	r3, [pc, #180]	; (401a2c <xTaskGenericCreate+0x204>)
  401978:	601e      	str	r6, [r3, #0]
  40197a:	e009      	b.n	401990 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40197c:	4b2c      	ldr	r3, [pc, #176]	; (401a30 <xTaskGenericCreate+0x208>)
  40197e:	681b      	ldr	r3, [r3, #0]
  401980:	b933      	cbnz	r3, 401990 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401982:	4b22      	ldr	r3, [pc, #136]	; (401a0c <xTaskGenericCreate+0x1e4>)
  401984:	681b      	ldr	r3, [r3, #0]
  401986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401988:	429f      	cmp	r7, r3
  40198a:	d301      	bcc.n	401990 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40198c:	4b1f      	ldr	r3, [pc, #124]	; (401a0c <xTaskGenericCreate+0x1e4>)
  40198e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401990:	4a28      	ldr	r2, [pc, #160]	; (401a34 <xTaskGenericCreate+0x20c>)
  401992:	6813      	ldr	r3, [r2, #0]
  401994:	3301      	adds	r3, #1
  401996:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401998:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40199a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40199c:	4926      	ldr	r1, [pc, #152]	; (401a38 <xTaskGenericCreate+0x210>)
  40199e:	680b      	ldr	r3, [r1, #0]
  4019a0:	2201      	movs	r2, #1
  4019a2:	4082      	lsls	r2, r0
  4019a4:	4313      	orrs	r3, r2
  4019a6:	600b      	str	r3, [r1, #0]
  4019a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019ac:	4b18      	ldr	r3, [pc, #96]	; (401a10 <xTaskGenericCreate+0x1e8>)
  4019ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019b2:	4649      	mov	r1, r9
  4019b4:	4b21      	ldr	r3, [pc, #132]	; (401a3c <xTaskGenericCreate+0x214>)
  4019b6:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4019b8:	4b21      	ldr	r3, [pc, #132]	; (401a40 <xTaskGenericCreate+0x218>)
  4019ba:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4019bc:	4b1c      	ldr	r3, [pc, #112]	; (401a30 <xTaskGenericCreate+0x208>)
  4019be:	681b      	ldr	r3, [r3, #0]
  4019c0:	b173      	cbz	r3, 4019e0 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019c2:	4b12      	ldr	r3, [pc, #72]	; (401a0c <xTaskGenericCreate+0x1e4>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019c8:	429f      	cmp	r7, r3
  4019ca:	d90b      	bls.n	4019e4 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4019cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019d0:	4b1c      	ldr	r3, [pc, #112]	; (401a44 <xTaskGenericCreate+0x21c>)
  4019d2:	601a      	str	r2, [r3, #0]
  4019d4:	f3bf 8f4f 	dsb	sy
  4019d8:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4019dc:	2001      	movs	r0, #1
  4019de:	e005      	b.n	4019ec <xTaskGenericCreate+0x1c4>
  4019e0:	2001      	movs	r0, #1
  4019e2:	e003      	b.n	4019ec <xTaskGenericCreate+0x1c4>
  4019e4:	2001      	movs	r0, #1
  4019e6:	e001      	b.n	4019ec <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019e8:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4019ec:	b003      	add	sp, #12
  4019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019f2:	bf00      	nop
  4019f4:	00400db5 	.word	0x00400db5
  4019f8:	0040b30d 	.word	0x0040b30d
  4019fc:	00400e15 	.word	0x00400e15
  401a00:	00400b15 	.word	0x00400b15
  401a04:	00400b5d 	.word	0x00400b5d
  401a08:	2040c448 	.word	0x2040c448
  401a0c:	2040c420 	.word	0x2040c420
  401a10:	2040c218 	.word	0x2040c218
  401a14:	00400e31 	.word	0x00400e31
  401a18:	2040c44c 	.word	0x2040c44c
  401a1c:	2040c424 	.word	0x2040c424
  401a20:	2040c40c 	.word	0x2040c40c
  401a24:	2040c460 	.word	0x2040c460
  401a28:	2040c1f0 	.word	0x2040c1f0
  401a2c:	2040c210 	.word	0x2040c210
  401a30:	2040c1f4 	.word	0x2040c1f4
  401a34:	2040c444 	.word	0x2040c444
  401a38:	2040c474 	.word	0x2040c474
  401a3c:	00400e51 	.word	0x00400e51
  401a40:	00400ba9 	.word	0x00400ba9
  401a44:	e000ed04 	.word	0xe000ed04
  401a48:	00400e49 	.word	0x00400e49
  401a4c:	2040c1fc 	.word	0x2040c1fc

00401a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401a50:	b510      	push	{r4, lr}
  401a52:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a54:	2300      	movs	r3, #0
  401a56:	9300      	str	r3, [sp, #0]
  401a58:	9301      	str	r3, [sp, #4]
  401a5a:	9302      	str	r3, [sp, #8]
  401a5c:	9303      	str	r3, [sp, #12]
  401a5e:	4818      	ldr	r0, [pc, #96]	; (401ac0 <vTaskStartScheduler+0x70>)
  401a60:	4918      	ldr	r1, [pc, #96]	; (401ac4 <vTaskStartScheduler+0x74>)
  401a62:	2282      	movs	r2, #130	; 0x82
  401a64:	4c18      	ldr	r4, [pc, #96]	; (401ac8 <vTaskStartScheduler+0x78>)
  401a66:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401a68:	2801      	cmp	r0, #1
  401a6a:	d11a      	bne.n	401aa2 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401a6c:	4b17      	ldr	r3, [pc, #92]	; (401acc <vTaskStartScheduler+0x7c>)
  401a6e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a70:	2801      	cmp	r0, #1
  401a72:	d116      	bne.n	401aa2 <vTaskStartScheduler+0x52>
  401a74:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a78:	b672      	cpsid	i
  401a7a:	f383 8811 	msr	BASEPRI, r3
  401a7e:	f3bf 8f6f 	isb	sy
  401a82:	f3bf 8f4f 	dsb	sy
  401a86:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a88:	f04f 32ff 	mov.w	r2, #4294967295
  401a8c:	4b10      	ldr	r3, [pc, #64]	; (401ad0 <vTaskStartScheduler+0x80>)
  401a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a90:	2201      	movs	r2, #1
  401a92:	4b10      	ldr	r3, [pc, #64]	; (401ad4 <vTaskStartScheduler+0x84>)
  401a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a96:	2200      	movs	r2, #0
  401a98:	4b0f      	ldr	r3, [pc, #60]	; (401ad8 <vTaskStartScheduler+0x88>)
  401a9a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401a9c:	4b0f      	ldr	r3, [pc, #60]	; (401adc <vTaskStartScheduler+0x8c>)
  401a9e:	4798      	blx	r3
  401aa0:	e00b      	b.n	401aba <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401aa2:	b950      	cbnz	r0, 401aba <vTaskStartScheduler+0x6a>
  401aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa8:	b672      	cpsid	i
  401aaa:	f383 8811 	msr	BASEPRI, r3
  401aae:	f3bf 8f6f 	isb	sy
  401ab2:	f3bf 8f4f 	dsb	sy
  401ab6:	b662      	cpsie	i
  401ab8:	e7fe      	b.n	401ab8 <vTaskStartScheduler+0x68>
	}
}
  401aba:	b004      	add	sp, #16
  401abc:	bd10      	pop	{r4, pc}
  401abe:	bf00      	nop
  401ac0:	00401dd9 	.word	0x00401dd9
  401ac4:	00412838 	.word	0x00412838
  401ac8:	00401829 	.word	0x00401829
  401acc:	004023dd 	.word	0x004023dd
  401ad0:	2040c440 	.word	0x2040c440
  401ad4:	2040c1f4 	.word	0x2040c1f4
  401ad8:	2040c43c 	.word	0x2040c43c
  401adc:	00400c8d 	.word	0x00400c8d

00401ae0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ae0:	4a02      	ldr	r2, [pc, #8]	; (401aec <vTaskSuspendAll+0xc>)
  401ae2:	6813      	ldr	r3, [r2, #0]
  401ae4:	3301      	adds	r3, #1
  401ae6:	6013      	str	r3, [r2, #0]
  401ae8:	4770      	bx	lr
  401aea:	bf00      	nop
  401aec:	2040c438 	.word	0x2040c438

00401af0 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401af0:	4b01      	ldr	r3, [pc, #4]	; (401af8 <xTaskGetTickCount+0x8>)
  401af2:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401af4:	4770      	bx	lr
  401af6:	bf00      	nop
  401af8:	2040c43c 	.word	0x2040c43c

00401afc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b00:	4b3d      	ldr	r3, [pc, #244]	; (401bf8 <xTaskIncrementTick+0xfc>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	2b00      	cmp	r3, #0
  401b06:	d16a      	bne.n	401bde <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401b08:	4b3c      	ldr	r3, [pc, #240]	; (401bfc <xTaskIncrementTick+0x100>)
  401b0a:	681a      	ldr	r2, [r3, #0]
  401b0c:	3201      	adds	r2, #1
  401b0e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b10:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401b12:	b9d6      	cbnz	r6, 401b4a <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401b14:	4b3a      	ldr	r3, [pc, #232]	; (401c00 <xTaskIncrementTick+0x104>)
  401b16:	681b      	ldr	r3, [r3, #0]
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	b153      	cbz	r3, 401b32 <xTaskIncrementTick+0x36>
  401b1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b20:	b672      	cpsid	i
  401b22:	f383 8811 	msr	BASEPRI, r3
  401b26:	f3bf 8f6f 	isb	sy
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	b662      	cpsie	i
  401b30:	e7fe      	b.n	401b30 <xTaskIncrementTick+0x34>
  401b32:	4a33      	ldr	r2, [pc, #204]	; (401c00 <xTaskIncrementTick+0x104>)
  401b34:	6811      	ldr	r1, [r2, #0]
  401b36:	4b33      	ldr	r3, [pc, #204]	; (401c04 <xTaskIncrementTick+0x108>)
  401b38:	6818      	ldr	r0, [r3, #0]
  401b3a:	6010      	str	r0, [r2, #0]
  401b3c:	6019      	str	r1, [r3, #0]
  401b3e:	4a32      	ldr	r2, [pc, #200]	; (401c08 <xTaskIncrementTick+0x10c>)
  401b40:	6813      	ldr	r3, [r2, #0]
  401b42:	3301      	adds	r3, #1
  401b44:	6013      	str	r3, [r2, #0]
  401b46:	4b31      	ldr	r3, [pc, #196]	; (401c0c <xTaskIncrementTick+0x110>)
  401b48:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b4a:	4b31      	ldr	r3, [pc, #196]	; (401c10 <xTaskIncrementTick+0x114>)
  401b4c:	681b      	ldr	r3, [r3, #0]
  401b4e:	429e      	cmp	r6, r3
  401b50:	d201      	bcs.n	401b56 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b52:	2400      	movs	r4, #0
  401b54:	e037      	b.n	401bc6 <xTaskIncrementTick+0xca>
  401b56:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b58:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401c00 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b5c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401c2c <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b60:	4f2c      	ldr	r7, [pc, #176]	; (401c14 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b62:	f8d9 3000 	ldr.w	r3, [r9]
  401b66:	681b      	ldr	r3, [r3, #0]
  401b68:	b923      	cbnz	r3, 401b74 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401b6a:	f04f 32ff 	mov.w	r2, #4294967295
  401b6e:	4b28      	ldr	r3, [pc, #160]	; (401c10 <xTaskIncrementTick+0x114>)
  401b70:	601a      	str	r2, [r3, #0]
						break;
  401b72:	e028      	b.n	401bc6 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b74:	f8d9 3000 	ldr.w	r3, [r9]
  401b78:	68db      	ldr	r3, [r3, #12]
  401b7a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b7c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b7e:	429e      	cmp	r6, r3
  401b80:	d202      	bcs.n	401b88 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b82:	4a23      	ldr	r2, [pc, #140]	; (401c10 <xTaskIncrementTick+0x114>)
  401b84:	6013      	str	r3, [r2, #0]
							break;
  401b86:	e01e      	b.n	401bc6 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b88:	f105 0a04 	add.w	sl, r5, #4
  401b8c:	4650      	mov	r0, sl
  401b8e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401b92:	b113      	cbz	r3, 401b9a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401b94:	f105 0018 	add.w	r0, r5, #24
  401b98:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401b9c:	683b      	ldr	r3, [r7, #0]
  401b9e:	2201      	movs	r2, #1
  401ba0:	4082      	lsls	r2, r0
  401ba2:	4313      	orrs	r3, r2
  401ba4:	603b      	str	r3, [r7, #0]
  401ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401baa:	4b1b      	ldr	r3, [pc, #108]	; (401c18 <xTaskIncrementTick+0x11c>)
  401bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401bb0:	4651      	mov	r1, sl
  401bb2:	4b1a      	ldr	r3, [pc, #104]	; (401c1c <xTaskIncrementTick+0x120>)
  401bb4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bb6:	4b1a      	ldr	r3, [pc, #104]	; (401c20 <xTaskIncrementTick+0x124>)
  401bb8:	681b      	ldr	r3, [r3, #0]
  401bba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401bbe:	429a      	cmp	r2, r3
  401bc0:	bf28      	it	cs
  401bc2:	2401      	movcs	r4, #1
  401bc4:	e7cd      	b.n	401b62 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401bc6:	4b16      	ldr	r3, [pc, #88]	; (401c20 <xTaskIncrementTick+0x124>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401bd0:	4a11      	ldr	r2, [pc, #68]	; (401c18 <xTaskIncrementTick+0x11c>)
  401bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401bd6:	2b02      	cmp	r3, #2
  401bd8:	bf28      	it	cs
  401bda:	2401      	movcs	r4, #1
  401bdc:	e004      	b.n	401be8 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401bde:	4a11      	ldr	r2, [pc, #68]	; (401c24 <xTaskIncrementTick+0x128>)
  401be0:	6813      	ldr	r3, [r2, #0]
  401be2:	3301      	adds	r3, #1
  401be4:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401be6:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401be8:	4b0f      	ldr	r3, [pc, #60]	; (401c28 <xTaskIncrementTick+0x12c>)
  401bea:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401bec:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401bee:	bf0c      	ite	eq
  401bf0:	4620      	moveq	r0, r4
  401bf2:	2001      	movne	r0, #1
  401bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bf8:	2040c438 	.word	0x2040c438
  401bfc:	2040c43c 	.word	0x2040c43c
  401c00:	2040c1f0 	.word	0x2040c1f0
  401c04:	2040c210 	.word	0x2040c210
  401c08:	2040c1ec 	.word	0x2040c1ec
  401c0c:	004017a5 	.word	0x004017a5
  401c10:	2040c440 	.word	0x2040c440
  401c14:	2040c474 	.word	0x2040c474
  401c18:	2040c218 	.word	0x2040c218
  401c1c:	00400e51 	.word	0x00400e51
  401c20:	2040c420 	.word	0x2040c420
  401c24:	2040c214 	.word	0x2040c214
  401c28:	2040c478 	.word	0x2040c478
  401c2c:	00400e9d 	.word	0x00400e9d

00401c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401c34:	4b36      	ldr	r3, [pc, #216]	; (401d10 <xTaskResumeAll+0xe0>)
  401c36:	681b      	ldr	r3, [r3, #0]
  401c38:	b953      	cbnz	r3, 401c50 <xTaskResumeAll+0x20>
  401c3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c3e:	b672      	cpsid	i
  401c40:	f383 8811 	msr	BASEPRI, r3
  401c44:	f3bf 8f6f 	isb	sy
  401c48:	f3bf 8f4f 	dsb	sy
  401c4c:	b662      	cpsie	i
  401c4e:	e7fe      	b.n	401c4e <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401c50:	4b30      	ldr	r3, [pc, #192]	; (401d14 <xTaskResumeAll+0xe4>)
  401c52:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401c54:	4b2e      	ldr	r3, [pc, #184]	; (401d10 <xTaskResumeAll+0xe0>)
  401c56:	681a      	ldr	r2, [r3, #0]
  401c58:	3a01      	subs	r2, #1
  401c5a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c5c:	681b      	ldr	r3, [r3, #0]
  401c5e:	2b00      	cmp	r3, #0
  401c60:	d14d      	bne.n	401cfe <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c62:	4b2d      	ldr	r3, [pc, #180]	; (401d18 <xTaskResumeAll+0xe8>)
  401c64:	681b      	ldr	r3, [r3, #0]
  401c66:	bb0b      	cbnz	r3, 401cac <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c68:	2400      	movs	r4, #0
  401c6a:	e04b      	b.n	401d04 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c6c:	68fb      	ldr	r3, [r7, #12]
  401c6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c70:	f104 0018 	add.w	r0, r4, #24
  401c74:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c76:	f104 0804 	add.w	r8, r4, #4
  401c7a:	4640      	mov	r0, r8
  401c7c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401c7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c80:	682b      	ldr	r3, [r5, #0]
  401c82:	2201      	movs	r2, #1
  401c84:	4082      	lsls	r2, r0
  401c86:	4313      	orrs	r3, r2
  401c88:	602b      	str	r3, [r5, #0]
  401c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c8e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401c92:	4641      	mov	r1, r8
  401c94:	4b21      	ldr	r3, [pc, #132]	; (401d1c <xTaskResumeAll+0xec>)
  401c96:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c98:	4b21      	ldr	r3, [pc, #132]	; (401d20 <xTaskResumeAll+0xf0>)
  401c9a:	681b      	ldr	r3, [r3, #0]
  401c9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ca0:	429a      	cmp	r2, r3
  401ca2:	d308      	bcc.n	401cb6 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401ca4:	2201      	movs	r2, #1
  401ca6:	4b1f      	ldr	r3, [pc, #124]	; (401d24 <xTaskResumeAll+0xf4>)
  401ca8:	601a      	str	r2, [r3, #0]
  401caa:	e004      	b.n	401cb6 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cac:	4f1e      	ldr	r7, [pc, #120]	; (401d28 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cae:	4e1f      	ldr	r6, [pc, #124]	; (401d2c <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401cb0:	4d1f      	ldr	r5, [pc, #124]	; (401d30 <xTaskResumeAll+0x100>)
  401cb2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401d44 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cb6:	683b      	ldr	r3, [r7, #0]
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d1d7      	bne.n	401c6c <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401cbc:	4b1d      	ldr	r3, [pc, #116]	; (401d34 <xTaskResumeAll+0x104>)
  401cbe:	681b      	ldr	r3, [r3, #0]
  401cc0:	b17b      	cbz	r3, 401ce2 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cc2:	4b1c      	ldr	r3, [pc, #112]	; (401d34 <xTaskResumeAll+0x104>)
  401cc4:	681b      	ldr	r3, [r3, #0]
  401cc6:	b163      	cbz	r3, 401ce2 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cc8:	4e1b      	ldr	r6, [pc, #108]	; (401d38 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401cca:	4d16      	ldr	r5, [pc, #88]	; (401d24 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401ccc:	4c19      	ldr	r4, [pc, #100]	; (401d34 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cce:	47b0      	blx	r6
  401cd0:	b108      	cbz	r0, 401cd6 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401cd2:	2301      	movs	r3, #1
  401cd4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cd6:	6823      	ldr	r3, [r4, #0]
  401cd8:	3b01      	subs	r3, #1
  401cda:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401cdc:	6823      	ldr	r3, [r4, #0]
  401cde:	2b00      	cmp	r3, #0
  401ce0:	d1f5      	bne.n	401cce <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401ce2:	4b10      	ldr	r3, [pc, #64]	; (401d24 <xTaskResumeAll+0xf4>)
  401ce4:	681b      	ldr	r3, [r3, #0]
  401ce6:	2b01      	cmp	r3, #1
  401ce8:	d10b      	bne.n	401d02 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401cee:	4b13      	ldr	r3, [pc, #76]	; (401d3c <xTaskResumeAll+0x10c>)
  401cf0:	601a      	str	r2, [r3, #0]
  401cf2:	f3bf 8f4f 	dsb	sy
  401cf6:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401cfa:	2401      	movs	r4, #1
  401cfc:	e002      	b.n	401d04 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401cfe:	2400      	movs	r4, #0
  401d00:	e000      	b.n	401d04 <xTaskResumeAll+0xd4>
  401d02:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d04:	4b0e      	ldr	r3, [pc, #56]	; (401d40 <xTaskResumeAll+0x110>)
  401d06:	4798      	blx	r3

	return xAlreadyYielded;
}
  401d08:	4620      	mov	r0, r4
  401d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d0e:	bf00      	nop
  401d10:	2040c438 	.word	0x2040c438
  401d14:	00400b5d 	.word	0x00400b5d
  401d18:	2040c448 	.word	0x2040c448
  401d1c:	00400e51 	.word	0x00400e51
  401d20:	2040c420 	.word	0x2040c420
  401d24:	2040c478 	.word	0x2040c478
  401d28:	2040c424 	.word	0x2040c424
  401d2c:	00400e9d 	.word	0x00400e9d
  401d30:	2040c474 	.word	0x2040c474
  401d34:	2040c214 	.word	0x2040c214
  401d38:	00401afd 	.word	0x00401afd
  401d3c:	e000ed04 	.word	0xe000ed04
  401d40:	00400ba9 	.word	0x00400ba9
  401d44:	2040c218 	.word	0x2040c218

00401d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401d48:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d4a:	2800      	cmp	r0, #0
  401d4c:	d029      	beq.n	401da2 <vTaskDelay+0x5a>
  401d4e:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401d50:	4b18      	ldr	r3, [pc, #96]	; (401db4 <vTaskDelay+0x6c>)
  401d52:	681b      	ldr	r3, [r3, #0]
  401d54:	b153      	cbz	r3, 401d6c <vTaskDelay+0x24>
  401d56:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d5a:	b672      	cpsid	i
  401d5c:	f383 8811 	msr	BASEPRI, r3
  401d60:	f3bf 8f6f 	isb	sy
  401d64:	f3bf 8f4f 	dsb	sy
  401d68:	b662      	cpsie	i
  401d6a:	e7fe      	b.n	401d6a <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d6c:	4b12      	ldr	r3, [pc, #72]	; (401db8 <vTaskDelay+0x70>)
  401d6e:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d70:	4b12      	ldr	r3, [pc, #72]	; (401dbc <vTaskDelay+0x74>)
  401d72:	681b      	ldr	r3, [r3, #0]
  401d74:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d76:	4b12      	ldr	r3, [pc, #72]	; (401dc0 <vTaskDelay+0x78>)
  401d78:	6818      	ldr	r0, [r3, #0]
  401d7a:	3004      	adds	r0, #4
  401d7c:	4b11      	ldr	r3, [pc, #68]	; (401dc4 <vTaskDelay+0x7c>)
  401d7e:	4798      	blx	r3
  401d80:	b948      	cbnz	r0, 401d96 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401d82:	4b0f      	ldr	r3, [pc, #60]	; (401dc0 <vTaskDelay+0x78>)
  401d84:	681a      	ldr	r2, [r3, #0]
  401d86:	4910      	ldr	r1, [pc, #64]	; (401dc8 <vTaskDelay+0x80>)
  401d88:	680b      	ldr	r3, [r1, #0]
  401d8a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401d8c:	2201      	movs	r2, #1
  401d8e:	4082      	lsls	r2, r0
  401d90:	ea23 0302 	bic.w	r3, r3, r2
  401d94:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401d96:	4620      	mov	r0, r4
  401d98:	4b0c      	ldr	r3, [pc, #48]	; (401dcc <vTaskDelay+0x84>)
  401d9a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401d9c:	4b0c      	ldr	r3, [pc, #48]	; (401dd0 <vTaskDelay+0x88>)
  401d9e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401da0:	b938      	cbnz	r0, 401db2 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401da6:	4b0b      	ldr	r3, [pc, #44]	; (401dd4 <vTaskDelay+0x8c>)
  401da8:	601a      	str	r2, [r3, #0]
  401daa:	f3bf 8f4f 	dsb	sy
  401dae:	f3bf 8f6f 	isb	sy
  401db2:	bd10      	pop	{r4, pc}
  401db4:	2040c438 	.word	0x2040c438
  401db8:	00401ae1 	.word	0x00401ae1
  401dbc:	2040c43c 	.word	0x2040c43c
  401dc0:	2040c420 	.word	0x2040c420
  401dc4:	00400e9d 	.word	0x00400e9d
  401dc8:	2040c474 	.word	0x2040c474
  401dcc:	004017d1 	.word	0x004017d1
  401dd0:	00401c31 	.word	0x00401c31
  401dd4:	e000ed04 	.word	0xe000ed04

00401dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401dd8:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dda:	4d18      	ldr	r5, [pc, #96]	; (401e3c <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ddc:	4e18      	ldr	r6, [pc, #96]	; (401e40 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401dde:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e60 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401de2:	4f18      	ldr	r7, [pc, #96]	; (401e44 <prvIdleTask+0x6c>)
  401de4:	e019      	b.n	401e1a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401de6:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401de8:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  401dea:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  401dec:	b1ac      	cbz	r4, 401e1a <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401dee:	4b16      	ldr	r3, [pc, #88]	; (401e48 <prvIdleTask+0x70>)
  401df0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401df2:	68f3      	ldr	r3, [r6, #12]
  401df4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401df6:	1d20      	adds	r0, r4, #4
  401df8:	4b14      	ldr	r3, [pc, #80]	; (401e4c <prvIdleTask+0x74>)
  401dfa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401dfc:	4a14      	ldr	r2, [pc, #80]	; (401e50 <prvIdleTask+0x78>)
  401dfe:	6813      	ldr	r3, [r2, #0]
  401e00:	3b01      	subs	r3, #1
  401e02:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401e04:	682b      	ldr	r3, [r5, #0]
  401e06:	3b01      	subs	r3, #1
  401e08:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401e0a:	4b12      	ldr	r3, [pc, #72]	; (401e54 <prvIdleTask+0x7c>)
  401e0c:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401e0e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e10:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e64 <prvIdleTask+0x8c>
  401e14:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401e16:	4620      	mov	r0, r4
  401e18:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e1a:	682b      	ldr	r3, [r5, #0]
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d1e2      	bne.n	401de6 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e20:	4b0d      	ldr	r3, [pc, #52]	; (401e58 <prvIdleTask+0x80>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	2b01      	cmp	r3, #1
  401e26:	d9f8      	bls.n	401e1a <prvIdleTask+0x42>
			{
				taskYIELD();
  401e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e2c:	4b0b      	ldr	r3, [pc, #44]	; (401e5c <prvIdleTask+0x84>)
  401e2e:	601a      	str	r2, [r3, #0]
  401e30:	f3bf 8f4f 	dsb	sy
  401e34:	f3bf 8f6f 	isb	sy
  401e38:	e7d1      	b.n	401dde <prvIdleTask+0x6>
  401e3a:	bf00      	nop
  401e3c:	2040c1f8 	.word	0x2040c1f8
  401e40:	2040c40c 	.word	0x2040c40c
  401e44:	00401c31 	.word	0x00401c31
  401e48:	00400b5d 	.word	0x00400b5d
  401e4c:	00400e9d 	.word	0x00400e9d
  401e50:	2040c448 	.word	0x2040c448
  401e54:	00400ba9 	.word	0x00400ba9
  401e58:	2040c218 	.word	0x2040c218
  401e5c:	e000ed04 	.word	0xe000ed04
  401e60:	00401ae1 	.word	0x00401ae1
  401e64:	00400e15 	.word	0x00400e15

00401e68 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401e68:	4b20      	ldr	r3, [pc, #128]	; (401eec <vTaskSwitchContext+0x84>)
  401e6a:	681b      	ldr	r3, [r3, #0]
  401e6c:	b11b      	cbz	r3, 401e76 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401e6e:	2201      	movs	r2, #1
  401e70:	4b1f      	ldr	r3, [pc, #124]	; (401ef0 <vTaskSwitchContext+0x88>)
  401e72:	601a      	str	r2, [r3, #0]
  401e74:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401e76:	2200      	movs	r2, #0
  401e78:	4b1d      	ldr	r3, [pc, #116]	; (401ef0 <vTaskSwitchContext+0x88>)
  401e7a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401e7c:	4b1d      	ldr	r3, [pc, #116]	; (401ef4 <vTaskSwitchContext+0x8c>)
  401e7e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401e80:	fab3 f383 	clz	r3, r3
  401e84:	b2db      	uxtb	r3, r3
  401e86:	f1c3 031f 	rsb	r3, r3, #31
  401e8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e8e:	4a1a      	ldr	r2, [pc, #104]	; (401ef8 <vTaskSwitchContext+0x90>)
  401e90:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401e94:	b952      	cbnz	r2, 401eac <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e9a:	b672      	cpsid	i
  401e9c:	f383 8811 	msr	BASEPRI, r3
  401ea0:	f3bf 8f6f 	isb	sy
  401ea4:	f3bf 8f4f 	dsb	sy
  401ea8:	b662      	cpsie	i
  401eaa:	e7fe      	b.n	401eaa <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401eac:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401eae:	4a12      	ldr	r2, [pc, #72]	; (401ef8 <vTaskSwitchContext+0x90>)
  401eb0:	0099      	lsls	r1, r3, #2
  401eb2:	18c8      	adds	r0, r1, r3
  401eb4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401eb8:	6844      	ldr	r4, [r0, #4]
  401eba:	6864      	ldr	r4, [r4, #4]
  401ebc:	6044      	str	r4, [r0, #4]
  401ebe:	4602      	mov	r2, r0
  401ec0:	3208      	adds	r2, #8
  401ec2:	4294      	cmp	r4, r2
  401ec4:	d106      	bne.n	401ed4 <vTaskSwitchContext+0x6c>
  401ec6:	6860      	ldr	r0, [r4, #4]
  401ec8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ecc:	4a0a      	ldr	r2, [pc, #40]	; (401ef8 <vTaskSwitchContext+0x90>)
  401ece:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401ed2:	6050      	str	r0, [r2, #4]
  401ed4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ed8:	4a07      	ldr	r2, [pc, #28]	; (401ef8 <vTaskSwitchContext+0x90>)
  401eda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401ede:	685b      	ldr	r3, [r3, #4]
  401ee0:	68da      	ldr	r2, [r3, #12]
  401ee2:	4b06      	ldr	r3, [pc, #24]	; (401efc <vTaskSwitchContext+0x94>)
  401ee4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
  401eea:	4770      	bx	lr
  401eec:	2040c438 	.word	0x2040c438
  401ef0:	2040c478 	.word	0x2040c478
  401ef4:	2040c474 	.word	0x2040c474
  401ef8:	2040c218 	.word	0x2040c218
  401efc:	2040c420 	.word	0x2040c420

00401f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401f00:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401f02:	b950      	cbnz	r0, 401f1a <vTaskPlaceOnEventList+0x1a>
  401f04:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f08:	b672      	cpsid	i
  401f0a:	f383 8811 	msr	BASEPRI, r3
  401f0e:	f3bf 8f6f 	isb	sy
  401f12:	f3bf 8f4f 	dsb	sy
  401f16:	b662      	cpsie	i
  401f18:	e7fe      	b.n	401f18 <vTaskPlaceOnEventList+0x18>
  401f1a:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401f1c:	4d11      	ldr	r5, [pc, #68]	; (401f64 <vTaskPlaceOnEventList+0x64>)
  401f1e:	6829      	ldr	r1, [r5, #0]
  401f20:	3118      	adds	r1, #24
  401f22:	4b11      	ldr	r3, [pc, #68]	; (401f68 <vTaskPlaceOnEventList+0x68>)
  401f24:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401f26:	6828      	ldr	r0, [r5, #0]
  401f28:	3004      	adds	r0, #4
  401f2a:	4b10      	ldr	r3, [pc, #64]	; (401f6c <vTaskPlaceOnEventList+0x6c>)
  401f2c:	4798      	blx	r3
  401f2e:	b940      	cbnz	r0, 401f42 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401f30:	682a      	ldr	r2, [r5, #0]
  401f32:	490f      	ldr	r1, [pc, #60]	; (401f70 <vTaskPlaceOnEventList+0x70>)
  401f34:	680b      	ldr	r3, [r1, #0]
  401f36:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401f38:	2201      	movs	r2, #1
  401f3a:	4082      	lsls	r2, r0
  401f3c:	ea23 0302 	bic.w	r3, r3, r2
  401f40:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401f42:	f1b4 3fff 	cmp.w	r4, #4294967295
  401f46:	d106      	bne.n	401f56 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401f48:	4b06      	ldr	r3, [pc, #24]	; (401f64 <vTaskPlaceOnEventList+0x64>)
  401f4a:	6819      	ldr	r1, [r3, #0]
  401f4c:	4809      	ldr	r0, [pc, #36]	; (401f74 <vTaskPlaceOnEventList+0x74>)
  401f4e:	3104      	adds	r1, #4
  401f50:	4b09      	ldr	r3, [pc, #36]	; (401f78 <vTaskPlaceOnEventList+0x78>)
  401f52:	4798      	blx	r3
  401f54:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401f56:	4b09      	ldr	r3, [pc, #36]	; (401f7c <vTaskPlaceOnEventList+0x7c>)
  401f58:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401f5a:	4420      	add	r0, r4
  401f5c:	4b08      	ldr	r3, [pc, #32]	; (401f80 <vTaskPlaceOnEventList+0x80>)
  401f5e:	4798      	blx	r3
  401f60:	bd38      	pop	{r3, r4, r5, pc}
  401f62:	bf00      	nop
  401f64:	2040c420 	.word	0x2040c420
  401f68:	00400e69 	.word	0x00400e69
  401f6c:	00400e9d 	.word	0x00400e9d
  401f70:	2040c474 	.word	0x2040c474
  401f74:	2040c460 	.word	0x2040c460
  401f78:	00400e51 	.word	0x00400e51
  401f7c:	2040c43c 	.word	0x2040c43c
  401f80:	004017d1 	.word	0x004017d1

00401f84 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401f84:	b950      	cbnz	r0, 401f9c <vTaskPlaceOnEventListRestricted+0x18>
  401f86:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f8a:	b672      	cpsid	i
  401f8c:	f383 8811 	msr	BASEPRI, r3
  401f90:	f3bf 8f6f 	isb	sy
  401f94:	f3bf 8f4f 	dsb	sy
  401f98:	b662      	cpsie	i
  401f9a:	e7fe      	b.n	401f9a <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401f9c:	b570      	push	{r4, r5, r6, lr}
  401f9e:	4615      	mov	r5, r2
  401fa0:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401fa2:	4e11      	ldr	r6, [pc, #68]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x64>)
  401fa4:	6831      	ldr	r1, [r6, #0]
  401fa6:	3118      	adds	r1, #24
  401fa8:	4b10      	ldr	r3, [pc, #64]	; (401fec <vTaskPlaceOnEventListRestricted+0x68>)
  401faa:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401fac:	6830      	ldr	r0, [r6, #0]
  401fae:	3004      	adds	r0, #4
  401fb0:	4b0f      	ldr	r3, [pc, #60]	; (401ff0 <vTaskPlaceOnEventListRestricted+0x6c>)
  401fb2:	4798      	blx	r3
  401fb4:	b940      	cbnz	r0, 401fc8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401fb6:	6832      	ldr	r2, [r6, #0]
  401fb8:	490e      	ldr	r1, [pc, #56]	; (401ff4 <vTaskPlaceOnEventListRestricted+0x70>)
  401fba:	680b      	ldr	r3, [r1, #0]
  401fbc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401fbe:	2201      	movs	r2, #1
  401fc0:	4082      	lsls	r2, r0
  401fc2:	ea23 0302 	bic.w	r3, r3, r2
  401fc6:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401fc8:	2d01      	cmp	r5, #1
  401fca:	d106      	bne.n	401fda <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401fcc:	4b06      	ldr	r3, [pc, #24]	; (401fe8 <vTaskPlaceOnEventListRestricted+0x64>)
  401fce:	6819      	ldr	r1, [r3, #0]
  401fd0:	4809      	ldr	r0, [pc, #36]	; (401ff8 <vTaskPlaceOnEventListRestricted+0x74>)
  401fd2:	3104      	adds	r1, #4
  401fd4:	4b05      	ldr	r3, [pc, #20]	; (401fec <vTaskPlaceOnEventListRestricted+0x68>)
  401fd6:	4798      	blx	r3
  401fd8:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401fda:	4b08      	ldr	r3, [pc, #32]	; (401ffc <vTaskPlaceOnEventListRestricted+0x78>)
  401fdc:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401fde:	4420      	add	r0, r4
  401fe0:	4b07      	ldr	r3, [pc, #28]	; (402000 <vTaskPlaceOnEventListRestricted+0x7c>)
  401fe2:	4798      	blx	r3
  401fe4:	bd70      	pop	{r4, r5, r6, pc}
  401fe6:	bf00      	nop
  401fe8:	2040c420 	.word	0x2040c420
  401fec:	00400e51 	.word	0x00400e51
  401ff0:	00400e9d 	.word	0x00400e9d
  401ff4:	2040c474 	.word	0x2040c474
  401ff8:	2040c460 	.word	0x2040c460
  401ffc:	2040c43c 	.word	0x2040c43c
  402000:	004017d1 	.word	0x004017d1

00402004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  402004:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402006:	68c3      	ldr	r3, [r0, #12]
  402008:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40200a:	b954      	cbnz	r4, 402022 <xTaskRemoveFromEventList+0x1e>
  40200c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402010:	b672      	cpsid	i
  402012:	f383 8811 	msr	BASEPRI, r3
  402016:	f3bf 8f6f 	isb	sy
  40201a:	f3bf 8f4f 	dsb	sy
  40201e:	b662      	cpsie	i
  402020:	e7fe      	b.n	402020 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402022:	f104 0518 	add.w	r5, r4, #24
  402026:	4628      	mov	r0, r5
  402028:	4b14      	ldr	r3, [pc, #80]	; (40207c <xTaskRemoveFromEventList+0x78>)
  40202a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40202c:	4b14      	ldr	r3, [pc, #80]	; (402080 <xTaskRemoveFromEventList+0x7c>)
  40202e:	681b      	ldr	r3, [r3, #0]
  402030:	b99b      	cbnz	r3, 40205a <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402032:	1d25      	adds	r5, r4, #4
  402034:	4628      	mov	r0, r5
  402036:	4b11      	ldr	r3, [pc, #68]	; (40207c <xTaskRemoveFromEventList+0x78>)
  402038:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40203a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40203c:	4911      	ldr	r1, [pc, #68]	; (402084 <xTaskRemoveFromEventList+0x80>)
  40203e:	680b      	ldr	r3, [r1, #0]
  402040:	2201      	movs	r2, #1
  402042:	4082      	lsls	r2, r0
  402044:	4313      	orrs	r3, r2
  402046:	600b      	str	r3, [r1, #0]
  402048:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40204c:	4b0e      	ldr	r3, [pc, #56]	; (402088 <xTaskRemoveFromEventList+0x84>)
  40204e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402052:	4629      	mov	r1, r5
  402054:	4b0d      	ldr	r3, [pc, #52]	; (40208c <xTaskRemoveFromEventList+0x88>)
  402056:	4798      	blx	r3
  402058:	e003      	b.n	402062 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40205a:	480d      	ldr	r0, [pc, #52]	; (402090 <xTaskRemoveFromEventList+0x8c>)
  40205c:	4629      	mov	r1, r5
  40205e:	4b0b      	ldr	r3, [pc, #44]	; (40208c <xTaskRemoveFromEventList+0x88>)
  402060:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402062:	4b0c      	ldr	r3, [pc, #48]	; (402094 <xTaskRemoveFromEventList+0x90>)
  402064:	681b      	ldr	r3, [r3, #0]
  402066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40206a:	429a      	cmp	r2, r3
  40206c:	d903      	bls.n	402076 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  40206e:	2001      	movs	r0, #1
  402070:	4b09      	ldr	r3, [pc, #36]	; (402098 <xTaskRemoveFromEventList+0x94>)
  402072:	6018      	str	r0, [r3, #0]
  402074:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  402076:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  402078:	bd38      	pop	{r3, r4, r5, pc}
  40207a:	bf00      	nop
  40207c:	00400e9d 	.word	0x00400e9d
  402080:	2040c438 	.word	0x2040c438
  402084:	2040c474 	.word	0x2040c474
  402088:	2040c218 	.word	0x2040c218
  40208c:	00400e51 	.word	0x00400e51
  402090:	2040c424 	.word	0x2040c424
  402094:	2040c420 	.word	0x2040c420
  402098:	2040c478 	.word	0x2040c478

0040209c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  40209c:	b950      	cbnz	r0, 4020b4 <vTaskSetTimeOutState+0x18>
  40209e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a2:	b672      	cpsid	i
  4020a4:	f383 8811 	msr	BASEPRI, r3
  4020a8:	f3bf 8f6f 	isb	sy
  4020ac:	f3bf 8f4f 	dsb	sy
  4020b0:	b662      	cpsie	i
  4020b2:	e7fe      	b.n	4020b2 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4020b4:	4a03      	ldr	r2, [pc, #12]	; (4020c4 <vTaskSetTimeOutState+0x28>)
  4020b6:	6812      	ldr	r2, [r2, #0]
  4020b8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4020ba:	4a03      	ldr	r2, [pc, #12]	; (4020c8 <vTaskSetTimeOutState+0x2c>)
  4020bc:	6812      	ldr	r2, [r2, #0]
  4020be:	6042      	str	r2, [r0, #4]
  4020c0:	4770      	bx	lr
  4020c2:	bf00      	nop
  4020c4:	2040c1ec 	.word	0x2040c1ec
  4020c8:	2040c43c 	.word	0x2040c43c

004020cc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4020cc:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4020ce:	b950      	cbnz	r0, 4020e6 <xTaskCheckForTimeOut+0x1a>
  4020d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d4:	b672      	cpsid	i
  4020d6:	f383 8811 	msr	BASEPRI, r3
  4020da:	f3bf 8f6f 	isb	sy
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	b662      	cpsie	i
  4020e4:	e7fe      	b.n	4020e4 <xTaskCheckForTimeOut+0x18>
  4020e6:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4020e8:	b951      	cbnz	r1, 402100 <xTaskCheckForTimeOut+0x34>
  4020ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ee:	b672      	cpsid	i
  4020f0:	f383 8811 	msr	BASEPRI, r3
  4020f4:	f3bf 8f6f 	isb	sy
  4020f8:	f3bf 8f4f 	dsb	sy
  4020fc:	b662      	cpsie	i
  4020fe:	e7fe      	b.n	4020fe <xTaskCheckForTimeOut+0x32>
  402100:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  402102:	4b12      	ldr	r3, [pc, #72]	; (40214c <xTaskCheckForTimeOut+0x80>)
  402104:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  402106:	4b12      	ldr	r3, [pc, #72]	; (402150 <xTaskCheckForTimeOut+0x84>)
  402108:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40210a:	682b      	ldr	r3, [r5, #0]
  40210c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402110:	d013      	beq.n	40213a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402112:	4a10      	ldr	r2, [pc, #64]	; (402154 <xTaskCheckForTimeOut+0x88>)
  402114:	6812      	ldr	r2, [r2, #0]
  402116:	6820      	ldr	r0, [r4, #0]
  402118:	4290      	cmp	r0, r2
  40211a:	d002      	beq.n	402122 <xTaskCheckForTimeOut+0x56>
  40211c:	6862      	ldr	r2, [r4, #4]
  40211e:	4291      	cmp	r1, r2
  402120:	d20d      	bcs.n	40213e <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402122:	6862      	ldr	r2, [r4, #4]
  402124:	1a88      	subs	r0, r1, r2
  402126:	4283      	cmp	r3, r0
  402128:	d90b      	bls.n	402142 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40212a:	1a52      	subs	r2, r2, r1
  40212c:	4413      	add	r3, r2
  40212e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402130:	4620      	mov	r0, r4
  402132:	4b09      	ldr	r3, [pc, #36]	; (402158 <xTaskCheckForTimeOut+0x8c>)
  402134:	4798      	blx	r3
			xReturn = pdFALSE;
  402136:	2400      	movs	r4, #0
  402138:	e004      	b.n	402144 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40213a:	2400      	movs	r4, #0
  40213c:	e002      	b.n	402144 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40213e:	2401      	movs	r4, #1
  402140:	e000      	b.n	402144 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402142:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402144:	4b05      	ldr	r3, [pc, #20]	; (40215c <xTaskCheckForTimeOut+0x90>)
  402146:	4798      	blx	r3

	return xReturn;
}
  402148:	4620      	mov	r0, r4
  40214a:	bd38      	pop	{r3, r4, r5, pc}
  40214c:	00400b5d 	.word	0x00400b5d
  402150:	2040c43c 	.word	0x2040c43c
  402154:	2040c1ec 	.word	0x2040c1ec
  402158:	0040209d 	.word	0x0040209d
  40215c:	00400ba9 	.word	0x00400ba9

00402160 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402160:	2201      	movs	r2, #1
  402162:	4b01      	ldr	r3, [pc, #4]	; (402168 <vTaskMissedYield+0x8>)
  402164:	601a      	str	r2, [r3, #0]
  402166:	4770      	bx	lr
  402168:	2040c478 	.word	0x2040c478

0040216c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40216c:	4b05      	ldr	r3, [pc, #20]	; (402184 <xTaskGetSchedulerState+0x18>)
  40216e:	681b      	ldr	r3, [r3, #0]
  402170:	b133      	cbz	r3, 402180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402172:	4b05      	ldr	r3, [pc, #20]	; (402188 <xTaskGetSchedulerState+0x1c>)
  402174:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402176:	2b00      	cmp	r3, #0
  402178:	bf0c      	ite	eq
  40217a:	2002      	moveq	r0, #2
  40217c:	2000      	movne	r0, #0
  40217e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402180:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402182:	4770      	bx	lr
  402184:	2040c1f4 	.word	0x2040c1f4
  402188:	2040c438 	.word	0x2040c438

0040218c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40218c:	2800      	cmp	r0, #0
  40218e:	d045      	beq.n	40221c <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402190:	b538      	push	{r3, r4, r5, lr}
  402192:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402194:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402196:	4922      	ldr	r1, [pc, #136]	; (402220 <vTaskPriorityInherit+0x94>)
  402198:	6809      	ldr	r1, [r1, #0]
  40219a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40219c:	428a      	cmp	r2, r1
  40219e:	d23c      	bcs.n	40221a <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4021a0:	6981      	ldr	r1, [r0, #24]
  4021a2:	2900      	cmp	r1, #0
  4021a4:	db05      	blt.n	4021b2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4021a6:	491e      	ldr	r1, [pc, #120]	; (402220 <vTaskPriorityInherit+0x94>)
  4021a8:	6809      	ldr	r1, [r1, #0]
  4021aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4021ac:	f1c1 0119 	rsb	r1, r1, #25
  4021b0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4021b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4021b6:	491b      	ldr	r1, [pc, #108]	; (402224 <vTaskPriorityInherit+0x98>)
  4021b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4021bc:	6959      	ldr	r1, [r3, #20]
  4021be:	4291      	cmp	r1, r2
  4021c0:	d127      	bne.n	402212 <vTaskPriorityInherit+0x86>
  4021c2:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4021c4:	1d1d      	adds	r5, r3, #4
  4021c6:	4628      	mov	r0, r5
  4021c8:	4b17      	ldr	r3, [pc, #92]	; (402228 <vTaskPriorityInherit+0x9c>)
  4021ca:	4798      	blx	r3
  4021cc:	b970      	cbnz	r0, 4021ec <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4021ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4021d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021d4:	4a13      	ldr	r2, [pc, #76]	; (402224 <vTaskPriorityInherit+0x98>)
  4021d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021da:	b93a      	cbnz	r2, 4021ec <vTaskPriorityInherit+0x60>
  4021dc:	4813      	ldr	r0, [pc, #76]	; (40222c <vTaskPriorityInherit+0xa0>)
  4021de:	6802      	ldr	r2, [r0, #0]
  4021e0:	2101      	movs	r1, #1
  4021e2:	fa01 f303 	lsl.w	r3, r1, r3
  4021e6:	ea22 0303 	bic.w	r3, r2, r3
  4021ea:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4021ec:	4b0c      	ldr	r3, [pc, #48]	; (402220 <vTaskPriorityInherit+0x94>)
  4021ee:	681b      	ldr	r3, [r3, #0]
  4021f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4021f2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4021f4:	490d      	ldr	r1, [pc, #52]	; (40222c <vTaskPriorityInherit+0xa0>)
  4021f6:	680a      	ldr	r2, [r1, #0]
  4021f8:	2301      	movs	r3, #1
  4021fa:	4083      	lsls	r3, r0
  4021fc:	4313      	orrs	r3, r2
  4021fe:	600b      	str	r3, [r1, #0]
  402200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402204:	4b07      	ldr	r3, [pc, #28]	; (402224 <vTaskPriorityInherit+0x98>)
  402206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40220a:	4629      	mov	r1, r5
  40220c:	4b08      	ldr	r3, [pc, #32]	; (402230 <vTaskPriorityInherit+0xa4>)
  40220e:	4798      	blx	r3
  402210:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402212:	4a03      	ldr	r2, [pc, #12]	; (402220 <vTaskPriorityInherit+0x94>)
  402214:	6812      	ldr	r2, [r2, #0]
  402216:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402218:	62da      	str	r2, [r3, #44]	; 0x2c
  40221a:	bd38      	pop	{r3, r4, r5, pc}
  40221c:	4770      	bx	lr
  40221e:	bf00      	nop
  402220:	2040c420 	.word	0x2040c420
  402224:	2040c218 	.word	0x2040c218
  402228:	00400e9d 	.word	0x00400e9d
  40222c:	2040c474 	.word	0x2040c474
  402230:	00400e51 	.word	0x00400e51

00402234 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402234:	2800      	cmp	r0, #0
  402236:	d04e      	beq.n	4022d6 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  402238:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  40223a:	4a29      	ldr	r2, [pc, #164]	; (4022e0 <xTaskPriorityDisinherit+0xac>)
  40223c:	6812      	ldr	r2, [r2, #0]
  40223e:	4290      	cmp	r0, r2
  402240:	d00a      	beq.n	402258 <xTaskPriorityDisinherit+0x24>
  402242:	f04f 0380 	mov.w	r3, #128	; 0x80
  402246:	b672      	cpsid	i
  402248:	f383 8811 	msr	BASEPRI, r3
  40224c:	f3bf 8f6f 	isb	sy
  402250:	f3bf 8f4f 	dsb	sy
  402254:	b662      	cpsie	i
  402256:	e7fe      	b.n	402256 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  402258:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40225a:	b952      	cbnz	r2, 402272 <xTaskPriorityDisinherit+0x3e>
  40225c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402260:	b672      	cpsid	i
  402262:	f383 8811 	msr	BASEPRI, r3
  402266:	f3bf 8f6f 	isb	sy
  40226a:	f3bf 8f4f 	dsb	sy
  40226e:	b662      	cpsie	i
  402270:	e7fe      	b.n	402270 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  402272:	3a01      	subs	r2, #1
  402274:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402276:	2a00      	cmp	r2, #0
  402278:	d12f      	bne.n	4022da <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40227a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40227c:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40227e:	4291      	cmp	r1, r2
  402280:	d02b      	beq.n	4022da <xTaskPriorityDisinherit+0xa6>
  402282:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402284:	1d05      	adds	r5, r0, #4
  402286:	4628      	mov	r0, r5
  402288:	4b16      	ldr	r3, [pc, #88]	; (4022e4 <xTaskPriorityDisinherit+0xb0>)
  40228a:	4798      	blx	r3
  40228c:	b968      	cbnz	r0, 4022aa <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40228e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402290:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402294:	4b14      	ldr	r3, [pc, #80]	; (4022e8 <xTaskPriorityDisinherit+0xb4>)
  402296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40229a:	b933      	cbnz	r3, 4022aa <xTaskPriorityDisinherit+0x76>
  40229c:	4813      	ldr	r0, [pc, #76]	; (4022ec <xTaskPriorityDisinherit+0xb8>)
  40229e:	6803      	ldr	r3, [r0, #0]
  4022a0:	2201      	movs	r2, #1
  4022a2:	408a      	lsls	r2, r1
  4022a4:	ea23 0302 	bic.w	r3, r3, r2
  4022a8:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4022aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4022ac:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022ae:	f1c0 0319 	rsb	r3, r0, #25
  4022b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4022b4:	4a0d      	ldr	r2, [pc, #52]	; (4022ec <xTaskPriorityDisinherit+0xb8>)
  4022b6:	6813      	ldr	r3, [r2, #0]
  4022b8:	2401      	movs	r4, #1
  4022ba:	fa04 f100 	lsl.w	r1, r4, r0
  4022be:	430b      	orrs	r3, r1
  4022c0:	6013      	str	r3, [r2, #0]
  4022c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <xTaskPriorityDisinherit+0xb4>)
  4022c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4022cc:	4629      	mov	r1, r5
  4022ce:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <xTaskPriorityDisinherit+0xbc>)
  4022d0:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4022d2:	4620      	mov	r0, r4
  4022d4:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022d6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022d8:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4022da:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022dc:	bd38      	pop	{r3, r4, r5, pc}
  4022de:	bf00      	nop
  4022e0:	2040c420 	.word	0x2040c420
  4022e4:	00400e9d 	.word	0x00400e9d
  4022e8:	2040c218 	.word	0x2040c218
  4022ec:	2040c474 	.word	0x2040c474
  4022f0:	00400e51 	.word	0x00400e51

004022f4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4022f4:	4b05      	ldr	r3, [pc, #20]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  4022f6:	681b      	ldr	r3, [r3, #0]
  4022f8:	b123      	cbz	r3, 402304 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4022fa:	4b04      	ldr	r3, [pc, #16]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  4022fc:	681a      	ldr	r2, [r3, #0]
  4022fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402300:	3301      	adds	r3, #1
  402302:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402304:	4b01      	ldr	r3, [pc, #4]	; (40230c <pvTaskIncrementMutexHeldCount+0x18>)
  402306:	6818      	ldr	r0, [r3, #0]
	}
  402308:	4770      	bx	lr
  40230a:	bf00      	nop
  40230c:	2040c420 	.word	0x2040c420

00402310 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402310:	b510      	push	{r4, lr}
  402312:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402314:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402316:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  402318:	4291      	cmp	r1, r2
  40231a:	d80a      	bhi.n	402332 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40231c:	1ad2      	subs	r2, r2, r3
  40231e:	6983      	ldr	r3, [r0, #24]
  402320:	429a      	cmp	r2, r3
  402322:	d211      	bcs.n	402348 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402324:	4b0a      	ldr	r3, [pc, #40]	; (402350 <prvInsertTimerInActiveList+0x40>)
  402326:	6818      	ldr	r0, [r3, #0]
  402328:	1d21      	adds	r1, r4, #4
  40232a:	4b0a      	ldr	r3, [pc, #40]	; (402354 <prvInsertTimerInActiveList+0x44>)
  40232c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  40232e:	2000      	movs	r0, #0
  402330:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402332:	4299      	cmp	r1, r3
  402334:	d301      	bcc.n	40233a <prvInsertTimerInActiveList+0x2a>
  402336:	429a      	cmp	r2, r3
  402338:	d308      	bcc.n	40234c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40233a:	4b07      	ldr	r3, [pc, #28]	; (402358 <prvInsertTimerInActiveList+0x48>)
  40233c:	6818      	ldr	r0, [r3, #0]
  40233e:	1d21      	adds	r1, r4, #4
  402340:	4b04      	ldr	r3, [pc, #16]	; (402354 <prvInsertTimerInActiveList+0x44>)
  402342:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402344:	2000      	movs	r0, #0
  402346:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402348:	2001      	movs	r0, #1
  40234a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40234c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40234e:	bd10      	pop	{r4, pc}
  402350:	2040c4b0 	.word	0x2040c4b0
  402354:	00400e69 	.word	0x00400e69
  402358:	2040c47c 	.word	0x2040c47c

0040235c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40235c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40235e:	4b14      	ldr	r3, [pc, #80]	; (4023b0 <prvCheckForValidListAndQueue+0x54>)
  402360:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402362:	4b14      	ldr	r3, [pc, #80]	; (4023b4 <prvCheckForValidListAndQueue+0x58>)
  402364:	681b      	ldr	r3, [r3, #0]
  402366:	bb03      	cbnz	r3, 4023aa <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  402368:	4d13      	ldr	r5, [pc, #76]	; (4023b8 <prvCheckForValidListAndQueue+0x5c>)
  40236a:	4628      	mov	r0, r5
  40236c:	4e13      	ldr	r6, [pc, #76]	; (4023bc <prvCheckForValidListAndQueue+0x60>)
  40236e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402370:	4c13      	ldr	r4, [pc, #76]	; (4023c0 <prvCheckForValidListAndQueue+0x64>)
  402372:	4620      	mov	r0, r4
  402374:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402376:	4b13      	ldr	r3, [pc, #76]	; (4023c4 <prvCheckForValidListAndQueue+0x68>)
  402378:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40237a:	4b13      	ldr	r3, [pc, #76]	; (4023c8 <prvCheckForValidListAndQueue+0x6c>)
  40237c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40237e:	2005      	movs	r0, #5
  402380:	2110      	movs	r1, #16
  402382:	2200      	movs	r2, #0
  402384:	4b11      	ldr	r3, [pc, #68]	; (4023cc <prvCheckForValidListAndQueue+0x70>)
  402386:	4798      	blx	r3
  402388:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <prvCheckForValidListAndQueue+0x58>)
  40238a:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40238c:	b950      	cbnz	r0, 4023a4 <prvCheckForValidListAndQueue+0x48>
  40238e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402392:	b672      	cpsid	i
  402394:	f383 8811 	msr	BASEPRI, r3
  402398:	f3bf 8f6f 	isb	sy
  40239c:	f3bf 8f4f 	dsb	sy
  4023a0:	b662      	cpsie	i
  4023a2:	e7fe      	b.n	4023a2 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4023a4:	490a      	ldr	r1, [pc, #40]	; (4023d0 <prvCheckForValidListAndQueue+0x74>)
  4023a6:	4b0b      	ldr	r3, [pc, #44]	; (4023d4 <prvCheckForValidListAndQueue+0x78>)
  4023a8:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4023aa:	4b0b      	ldr	r3, [pc, #44]	; (4023d8 <prvCheckForValidListAndQueue+0x7c>)
  4023ac:	4798      	blx	r3
  4023ae:	bd70      	pop	{r4, r5, r6, pc}
  4023b0:	00400b5d 	.word	0x00400b5d
  4023b4:	2040c4ac 	.word	0x2040c4ac
  4023b8:	2040c480 	.word	0x2040c480
  4023bc:	00400e31 	.word	0x00400e31
  4023c0:	2040c494 	.word	0x2040c494
  4023c4:	2040c47c 	.word	0x2040c47c
  4023c8:	2040c4b0 	.word	0x2040c4b0
  4023cc:	00401125 	.word	0x00401125
  4023d0:	00412850 	.word	0x00412850
  4023d4:	00401721 	.word	0x00401721
  4023d8:	00400ba9 	.word	0x00400ba9

004023dc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4023dc:	b510      	push	{r4, lr}
  4023de:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4023e0:	4b0f      	ldr	r3, [pc, #60]	; (402420 <xTimerCreateTimerTask+0x44>)
  4023e2:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4023e4:	4b0f      	ldr	r3, [pc, #60]	; (402424 <xTimerCreateTimerTask+0x48>)
  4023e6:	681b      	ldr	r3, [r3, #0]
  4023e8:	b163      	cbz	r3, 402404 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4023ea:	2318      	movs	r3, #24
  4023ec:	9300      	str	r3, [sp, #0]
  4023ee:	2300      	movs	r3, #0
  4023f0:	9301      	str	r3, [sp, #4]
  4023f2:	9302      	str	r3, [sp, #8]
  4023f4:	9303      	str	r3, [sp, #12]
  4023f6:	480c      	ldr	r0, [pc, #48]	; (402428 <xTimerCreateTimerTask+0x4c>)
  4023f8:	490c      	ldr	r1, [pc, #48]	; (40242c <xTimerCreateTimerTask+0x50>)
  4023fa:	f44f 7282 	mov.w	r2, #260	; 0x104
  4023fe:	4c0c      	ldr	r4, [pc, #48]	; (402430 <xTimerCreateTimerTask+0x54>)
  402400:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402402:	b950      	cbnz	r0, 40241a <xTimerCreateTimerTask+0x3e>
  402404:	f04f 0380 	mov.w	r3, #128	; 0x80
  402408:	b672      	cpsid	i
  40240a:	f383 8811 	msr	BASEPRI, r3
  40240e:	f3bf 8f6f 	isb	sy
  402412:	f3bf 8f4f 	dsb	sy
  402416:	b662      	cpsie	i
  402418:	e7fe      	b.n	402418 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40241a:	b004      	add	sp, #16
  40241c:	bd10      	pop	{r4, pc}
  40241e:	bf00      	nop
  402420:	0040235d 	.word	0x0040235d
  402424:	2040c4ac 	.word	0x2040c4ac
  402428:	0040256d 	.word	0x0040256d
  40242c:	00412858 	.word	0x00412858
  402430:	00401829 	.word	0x00401829

00402434 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402434:	b950      	cbnz	r0, 40244c <xTimerGenericCommand+0x18>
  402436:	f04f 0380 	mov.w	r3, #128	; 0x80
  40243a:	b672      	cpsid	i
  40243c:	f383 8811 	msr	BASEPRI, r3
  402440:	f3bf 8f6f 	isb	sy
  402444:	f3bf 8f4f 	dsb	sy
  402448:	b662      	cpsie	i
  40244a:	e7fe      	b.n	40244a <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  40244c:	b530      	push	{r4, r5, lr}
  40244e:	b085      	sub	sp, #20
  402450:	4615      	mov	r5, r2
  402452:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402454:	4a12      	ldr	r2, [pc, #72]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402456:	6810      	ldr	r0, [r2, #0]
  402458:	b1f0      	cbz	r0, 402498 <xTimerGenericCommand+0x64>
  40245a:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40245c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40245e:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402460:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402462:	2905      	cmp	r1, #5
  402464:	dc13      	bgt.n	40248e <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402466:	4b0f      	ldr	r3, [pc, #60]	; (4024a4 <xTimerGenericCommand+0x70>)
  402468:	4798      	blx	r3
  40246a:	2802      	cmp	r0, #2
  40246c:	d107      	bne.n	40247e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40246e:	4b0c      	ldr	r3, [pc, #48]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402470:	6818      	ldr	r0, [r3, #0]
  402472:	4669      	mov	r1, sp
  402474:	9a08      	ldr	r2, [sp, #32]
  402476:	2300      	movs	r3, #0
  402478:	4c0b      	ldr	r4, [pc, #44]	; (4024a8 <xTimerGenericCommand+0x74>)
  40247a:	47a0      	blx	r4
  40247c:	e00d      	b.n	40249a <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40247e:	4b08      	ldr	r3, [pc, #32]	; (4024a0 <xTimerGenericCommand+0x6c>)
  402480:	6818      	ldr	r0, [r3, #0]
  402482:	4669      	mov	r1, sp
  402484:	2200      	movs	r2, #0
  402486:	4613      	mov	r3, r2
  402488:	4c07      	ldr	r4, [pc, #28]	; (4024a8 <xTimerGenericCommand+0x74>)
  40248a:	47a0      	blx	r4
  40248c:	e005      	b.n	40249a <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40248e:	4669      	mov	r1, sp
  402490:	2300      	movs	r3, #0
  402492:	4c06      	ldr	r4, [pc, #24]	; (4024ac <xTimerGenericCommand+0x78>)
  402494:	47a0      	blx	r4
  402496:	e000      	b.n	40249a <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402498:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40249a:	b005      	add	sp, #20
  40249c:	bd30      	pop	{r4, r5, pc}
  40249e:	bf00      	nop
  4024a0:	2040c4ac 	.word	0x2040c4ac
  4024a4:	0040216d 	.word	0x0040216d
  4024a8:	004011a9 	.word	0x004011a9
  4024ac:	00401385 	.word	0x00401385

004024b0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024b4:	b082      	sub	sp, #8
  4024b6:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4024b8:	4b25      	ldr	r3, [pc, #148]	; (402550 <prvSampleTimeNow+0xa0>)
  4024ba:	4798      	blx	r3
  4024bc:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4024be:	4b25      	ldr	r3, [pc, #148]	; (402554 <prvSampleTimeNow+0xa4>)
  4024c0:	681b      	ldr	r3, [r3, #0]
  4024c2:	4298      	cmp	r0, r3
  4024c4:	d23b      	bcs.n	40253e <prvSampleTimeNow+0x8e>
  4024c6:	e02b      	b.n	402520 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024c8:	68db      	ldr	r3, [r3, #12]
  4024ca:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4024ce:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4024d0:	f104 0904 	add.w	r9, r4, #4
  4024d4:	4648      	mov	r0, r9
  4024d6:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4024d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4024da:	4620      	mov	r0, r4
  4024dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4024de:	69e3      	ldr	r3, [r4, #28]
  4024e0:	2b01      	cmp	r3, #1
  4024e2:	d11f      	bne.n	402524 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4024e4:	69a3      	ldr	r3, [r4, #24]
  4024e6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4024e8:	4553      	cmp	r3, sl
  4024ea:	d906      	bls.n	4024fa <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4024ec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4024ee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024f0:	6828      	ldr	r0, [r5, #0]
  4024f2:	4649      	mov	r1, r9
  4024f4:	4b18      	ldr	r3, [pc, #96]	; (402558 <prvSampleTimeNow+0xa8>)
  4024f6:	4798      	blx	r3
  4024f8:	e014      	b.n	402524 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4024fa:	2300      	movs	r3, #0
  4024fc:	9300      	str	r3, [sp, #0]
  4024fe:	4620      	mov	r0, r4
  402500:	4619      	mov	r1, r3
  402502:	4652      	mov	r2, sl
  402504:	4c15      	ldr	r4, [pc, #84]	; (40255c <prvSampleTimeNow+0xac>)
  402506:	47a0      	blx	r4
				configASSERT( xResult );
  402508:	b960      	cbnz	r0, 402524 <prvSampleTimeNow+0x74>
  40250a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40250e:	b672      	cpsid	i
  402510:	f383 8811 	msr	BASEPRI, r3
  402514:	f3bf 8f6f 	isb	sy
  402518:	f3bf 8f4f 	dsb	sy
  40251c:	b662      	cpsie	i
  40251e:	e7fe      	b.n	40251e <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402520:	4d0f      	ldr	r5, [pc, #60]	; (402560 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402522:	4e10      	ldr	r6, [pc, #64]	; (402564 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402524:	682b      	ldr	r3, [r5, #0]
  402526:	681a      	ldr	r2, [r3, #0]
  402528:	2a00      	cmp	r2, #0
  40252a:	d1cd      	bne.n	4024c8 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  40252c:	4a0e      	ldr	r2, [pc, #56]	; (402568 <prvSampleTimeNow+0xb8>)
  40252e:	6810      	ldr	r0, [r2, #0]
  402530:	490b      	ldr	r1, [pc, #44]	; (402560 <prvSampleTimeNow+0xb0>)
  402532:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402534:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  402536:	2301      	movs	r3, #1
  402538:	f8c8 3000 	str.w	r3, [r8]
  40253c:	e002      	b.n	402544 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40253e:	2300      	movs	r3, #0
  402540:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  402544:	4b03      	ldr	r3, [pc, #12]	; (402554 <prvSampleTimeNow+0xa4>)
  402546:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402548:	4638      	mov	r0, r7
  40254a:	b002      	add	sp, #8
  40254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402550:	00401af1 	.word	0x00401af1
  402554:	2040c4a8 	.word	0x2040c4a8
  402558:	00400e69 	.word	0x00400e69
  40255c:	00402435 	.word	0x00402435
  402560:	2040c47c 	.word	0x2040c47c
  402564:	00400e9d 	.word	0x00400e9d
  402568:	2040c4b0 	.word	0x2040c4b0

0040256c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40256c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402570:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402572:	4c69      	ldr	r4, [pc, #420]	; (402718 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402574:	4f69      	ldr	r7, [pc, #420]	; (40271c <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402576:	4d6a      	ldr	r5, [pc, #424]	; (402720 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402578:	4b6a      	ldr	r3, [pc, #424]	; (402724 <prvTimerTask+0x1b8>)
  40257a:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40257c:	681a      	ldr	r2, [r3, #0]
  40257e:	2a00      	cmp	r2, #0
  402580:	f000 80bf 	beq.w	402702 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402584:	68db      	ldr	r3, [r3, #12]
  402586:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402588:	4b67      	ldr	r3, [pc, #412]	; (402728 <prvTimerTask+0x1bc>)
  40258a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40258c:	a804      	add	r0, sp, #16
  40258e:	4b67      	ldr	r3, [pc, #412]	; (40272c <prvTimerTask+0x1c0>)
  402590:	4798      	blx	r3
  402592:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402594:	9b04      	ldr	r3, [sp, #16]
  402596:	2b00      	cmp	r3, #0
  402598:	d14d      	bne.n	402636 <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40259a:	42b0      	cmp	r0, r6
  40259c:	d339      	bcc.n	402612 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  40259e:	4b64      	ldr	r3, [pc, #400]	; (402730 <prvTimerTask+0x1c4>)
  4025a0:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025a2:	4b60      	ldr	r3, [pc, #384]	; (402724 <prvTimerTask+0x1b8>)
  4025a4:	681b      	ldr	r3, [r3, #0]
  4025a6:	68db      	ldr	r3, [r3, #12]
  4025a8:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025ac:	f109 0004 	add.w	r0, r9, #4
  4025b0:	4b60      	ldr	r3, [pc, #384]	; (402734 <prvTimerTask+0x1c8>)
  4025b2:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4025b8:	2b01      	cmp	r3, #1
  4025ba:	d11d      	bne.n	4025f8 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4025bc:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4025c0:	4648      	mov	r0, r9
  4025c2:	4431      	add	r1, r6
  4025c4:	4642      	mov	r2, r8
  4025c6:	4633      	mov	r3, r6
  4025c8:	f8df c178 	ldr.w	ip, [pc, #376]	; 402744 <prvTimerTask+0x1d8>
  4025cc:	47e0      	blx	ip
  4025ce:	2801      	cmp	r0, #1
  4025d0:	d112      	bne.n	4025f8 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4025d2:	2300      	movs	r3, #0
  4025d4:	9300      	str	r3, [sp, #0]
  4025d6:	4648      	mov	r0, r9
  4025d8:	4619      	mov	r1, r3
  4025da:	4632      	mov	r2, r6
  4025dc:	4e56      	ldr	r6, [pc, #344]	; (402738 <prvTimerTask+0x1cc>)
  4025de:	47b0      	blx	r6
			configASSERT( xResult );
  4025e0:	b950      	cbnz	r0, 4025f8 <prvTimerTask+0x8c>
  4025e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025e6:	b672      	cpsid	i
  4025e8:	f383 8811 	msr	BASEPRI, r3
  4025ec:	f3bf 8f6f 	isb	sy
  4025f0:	f3bf 8f4f 	dsb	sy
  4025f4:	b662      	cpsie	i
  4025f6:	e7fe      	b.n	4025f6 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025f8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4025fc:	4648      	mov	r0, r9
  4025fe:	4798      	blx	r3
  402600:	e077      	b.n	4026f2 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402602:	4b4e      	ldr	r3, [pc, #312]	; (40273c <prvTimerTask+0x1d0>)
  402604:	681b      	ldr	r3, [r3, #0]
  402606:	681a      	ldr	r2, [r3, #0]
  402608:	fab2 f282 	clz	r2, r2
  40260c:	0952      	lsrs	r2, r2, #5
  40260e:	2600      	movs	r6, #0
  402610:	e000      	b.n	402614 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402612:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402614:	6820      	ldr	r0, [r4, #0]
  402616:	ebc8 0106 	rsb	r1, r8, r6
  40261a:	4b49      	ldr	r3, [pc, #292]	; (402740 <prvTimerTask+0x1d4>)
  40261c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  40261e:	4b44      	ldr	r3, [pc, #272]	; (402730 <prvTimerTask+0x1c4>)
  402620:	4798      	blx	r3
  402622:	2800      	cmp	r0, #0
  402624:	d165      	bne.n	4026f2 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40262a:	603b      	str	r3, [r7, #0]
  40262c:	f3bf 8f4f 	dsb	sy
  402630:	f3bf 8f6f 	isb	sy
  402634:	e05d      	b.n	4026f2 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  402636:	4b3e      	ldr	r3, [pc, #248]	; (402730 <prvTimerTask+0x1c4>)
  402638:	4798      	blx	r3
  40263a:	e05a      	b.n	4026f2 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40263c:	9b04      	ldr	r3, [sp, #16]
  40263e:	2b00      	cmp	r3, #0
  402640:	da06      	bge.n	402650 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402642:	9806      	ldr	r0, [sp, #24]
  402644:	9907      	ldr	r1, [sp, #28]
  402646:	9b05      	ldr	r3, [sp, #20]
  402648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40264a:	9b04      	ldr	r3, [sp, #16]
  40264c:	2b00      	cmp	r3, #0
  40264e:	db50      	blt.n	4026f2 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402650:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402652:	6973      	ldr	r3, [r6, #20]
  402654:	b113      	cbz	r3, 40265c <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402656:	1d30      	adds	r0, r6, #4
  402658:	4b36      	ldr	r3, [pc, #216]	; (402734 <prvTimerTask+0x1c8>)
  40265a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40265c:	a803      	add	r0, sp, #12
  40265e:	4b33      	ldr	r3, [pc, #204]	; (40272c <prvTimerTask+0x1c0>)
  402660:	4798      	blx	r3
  402662:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402664:	9a04      	ldr	r2, [sp, #16]
  402666:	2a09      	cmp	r2, #9
  402668:	d843      	bhi.n	4026f2 <prvTimerTask+0x186>
  40266a:	e8df f002 	tbb	[pc, r2]
  40266e:	0505      	.short	0x0505
  402670:	3f2a4205 	.word	0x3f2a4205
  402674:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402678:	9b05      	ldr	r3, [sp, #20]
  40267a:	69b1      	ldr	r1, [r6, #24]
  40267c:	4630      	mov	r0, r6
  40267e:	4419      	add	r1, r3
  402680:	4672      	mov	r2, lr
  402682:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 402744 <prvTimerTask+0x1d8>
  402686:	47e0      	blx	ip
  402688:	2801      	cmp	r0, #1
  40268a:	d132      	bne.n	4026f2 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40268c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40268e:	4630      	mov	r0, r6
  402690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402692:	69f3      	ldr	r3, [r6, #28]
  402694:	2b01      	cmp	r3, #1
  402696:	d12c      	bne.n	4026f2 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402698:	69b2      	ldr	r2, [r6, #24]
  40269a:	2300      	movs	r3, #0
  40269c:	9300      	str	r3, [sp, #0]
  40269e:	4630      	mov	r0, r6
  4026a0:	4619      	mov	r1, r3
  4026a2:	9e05      	ldr	r6, [sp, #20]
  4026a4:	4432      	add	r2, r6
  4026a6:	4e24      	ldr	r6, [pc, #144]	; (402738 <prvTimerTask+0x1cc>)
  4026a8:	47b0      	blx	r6
							configASSERT( xResult );
  4026aa:	bb10      	cbnz	r0, 4026f2 <prvTimerTask+0x186>
  4026ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026b0:	b672      	cpsid	i
  4026b2:	f383 8811 	msr	BASEPRI, r3
  4026b6:	f3bf 8f6f 	isb	sy
  4026ba:	f3bf 8f4f 	dsb	sy
  4026be:	b662      	cpsie	i
  4026c0:	e7fe      	b.n	4026c0 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4026c2:	9905      	ldr	r1, [sp, #20]
  4026c4:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4026c6:	b951      	cbnz	r1, 4026de <prvTimerTask+0x172>
  4026c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026cc:	b672      	cpsid	i
  4026ce:	f383 8811 	msr	BASEPRI, r3
  4026d2:	f3bf 8f6f 	isb	sy
  4026d6:	f3bf 8f4f 	dsb	sy
  4026da:	b662      	cpsie	i
  4026dc:	e7fe      	b.n	4026dc <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4026de:	4630      	mov	r0, r6
  4026e0:	4471      	add	r1, lr
  4026e2:	4672      	mov	r2, lr
  4026e4:	4673      	mov	r3, lr
  4026e6:	4e17      	ldr	r6, [pc, #92]	; (402744 <prvTimerTask+0x1d8>)
  4026e8:	47b0      	blx	r6
  4026ea:	e002      	b.n	4026f2 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4026ec:	4630      	mov	r0, r6
  4026ee:	4b16      	ldr	r3, [pc, #88]	; (402748 <prvTimerTask+0x1dc>)
  4026f0:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026f2:	6820      	ldr	r0, [r4, #0]
  4026f4:	a904      	add	r1, sp, #16
  4026f6:	2200      	movs	r2, #0
  4026f8:	4613      	mov	r3, r2
  4026fa:	47a8      	blx	r5
  4026fc:	2800      	cmp	r0, #0
  4026fe:	d19d      	bne.n	40263c <prvTimerTask+0xd0>
  402700:	e73a      	b.n	402578 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402702:	4b09      	ldr	r3, [pc, #36]	; (402728 <prvTimerTask+0x1bc>)
  402704:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402706:	a804      	add	r0, sp, #16
  402708:	4b08      	ldr	r3, [pc, #32]	; (40272c <prvTimerTask+0x1c0>)
  40270a:	4798      	blx	r3
  40270c:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40270e:	9b04      	ldr	r3, [sp, #16]
  402710:	2b00      	cmp	r3, #0
  402712:	f43f af76 	beq.w	402602 <prvTimerTask+0x96>
  402716:	e78e      	b.n	402636 <prvTimerTask+0xca>
  402718:	2040c4ac 	.word	0x2040c4ac
  40271c:	e000ed04 	.word	0xe000ed04
  402720:	0040155d 	.word	0x0040155d
  402724:	2040c47c 	.word	0x2040c47c
  402728:	00401ae1 	.word	0x00401ae1
  40272c:	004024b1 	.word	0x004024b1
  402730:	00401c31 	.word	0x00401c31
  402734:	00400e9d 	.word	0x00400e9d
  402738:	00402435 	.word	0x00402435
  40273c:	2040c4b0 	.word	0x2040c4b0
  402740:	00401755 	.word	0x00401755
  402744:	00402311 	.word	0x00402311
  402748:	00400e15 	.word	0x00400e15

0040274c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40274c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40274e:	4810      	ldr	r0, [pc, #64]	; (402790 <sysclk_init+0x44>)
  402750:	4b10      	ldr	r3, [pc, #64]	; (402794 <sysclk_init+0x48>)
  402752:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402754:	2000      	movs	r0, #0
  402756:	213e      	movs	r1, #62	; 0x3e
  402758:	4b0f      	ldr	r3, [pc, #60]	; (402798 <sysclk_init+0x4c>)
  40275a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40275c:	4c0f      	ldr	r4, [pc, #60]	; (40279c <sysclk_init+0x50>)
  40275e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402760:	2800      	cmp	r0, #0
  402762:	d0fc      	beq.n	40275e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402764:	4b0e      	ldr	r3, [pc, #56]	; (4027a0 <sysclk_init+0x54>)
  402766:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402768:	4a0e      	ldr	r2, [pc, #56]	; (4027a4 <sysclk_init+0x58>)
  40276a:	4b0f      	ldr	r3, [pc, #60]	; (4027a8 <sysclk_init+0x5c>)
  40276c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40276e:	4c0f      	ldr	r4, [pc, #60]	; (4027ac <sysclk_init+0x60>)
  402770:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402772:	2800      	cmp	r0, #0
  402774:	d0fc      	beq.n	402770 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402776:	2002      	movs	r0, #2
  402778:	4b0d      	ldr	r3, [pc, #52]	; (4027b0 <sysclk_init+0x64>)
  40277a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40277c:	2000      	movs	r0, #0
  40277e:	4b0d      	ldr	r3, [pc, #52]	; (4027b4 <sysclk_init+0x68>)
  402780:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402782:	4b0d      	ldr	r3, [pc, #52]	; (4027b8 <sysclk_init+0x6c>)
  402784:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402786:	4802      	ldr	r0, [pc, #8]	; (402790 <sysclk_init+0x44>)
  402788:	4b02      	ldr	r3, [pc, #8]	; (402794 <sysclk_init+0x48>)
  40278a:	4798      	blx	r3
  40278c:	bd10      	pop	{r4, pc}
  40278e:	bf00      	nop
  402790:	11e1a300 	.word	0x11e1a300
  402794:	00403639 	.word	0x00403639
  402798:	00402999 	.word	0x00402999
  40279c:	004029ed 	.word	0x004029ed
  4027a0:	004029fd 	.word	0x004029fd
  4027a4:	20183f01 	.word	0x20183f01
  4027a8:	400e0600 	.word	0x400e0600
  4027ac:	00402a0d 	.word	0x00402a0d
  4027b0:	004028f9 	.word	0x004028f9
  4027b4:	00402931 	.word	0x00402931
  4027b8:	00403525 	.word	0x00403525

004027bc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4027bc:	b10a      	cbz	r2, 4027c2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4027be:	6641      	str	r1, [r0, #100]	; 0x64
  4027c0:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4027c2:	6601      	str	r1, [r0, #96]	; 0x60
  4027c4:	4770      	bx	lr
  4027c6:	bf00      	nop

004027c8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4027c8:	6301      	str	r1, [r0, #48]	; 0x30
  4027ca:	4770      	bx	lr

004027cc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4027cc:	6341      	str	r1, [r0, #52]	; 0x34
  4027ce:	4770      	bx	lr

004027d0 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4027d0:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4027d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4027d8:	d101      	bne.n	4027de <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  4027da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4027dc:	e000      	b.n	4027e0 <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4027de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  4027e0:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4027e2:	bf14      	ite	ne
  4027e4:	2001      	movne	r0, #1
  4027e6:	2000      	moveq	r0, #0
  4027e8:	4770      	bx	lr
  4027ea:	bf00      	nop

004027ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4027ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4027ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4027f2:	d02f      	beq.n	402854 <pio_set_peripheral+0x68>
  4027f4:	d807      	bhi.n	402806 <pio_set_peripheral+0x1a>
  4027f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4027fa:	d014      	beq.n	402826 <pio_set_peripheral+0x3a>
  4027fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402800:	d01e      	beq.n	402840 <pio_set_peripheral+0x54>
  402802:	b939      	cbnz	r1, 402814 <pio_set_peripheral+0x28>
  402804:	4770      	bx	lr
  402806:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40280a:	d037      	beq.n	40287c <pio_set_peripheral+0x90>
  40280c:	d804      	bhi.n	402818 <pio_set_peripheral+0x2c>
  40280e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402812:	d029      	beq.n	402868 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402814:	6042      	str	r2, [r0, #4]
  402816:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402818:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40281c:	d02e      	beq.n	40287c <pio_set_peripheral+0x90>
  40281e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402822:	d02b      	beq.n	40287c <pio_set_peripheral+0x90>
  402824:	e7f6      	b.n	402814 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402826:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402828:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40282a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40282c:	43d3      	mvns	r3, r2
  40282e:	4021      	ands	r1, r4
  402830:	4019      	ands	r1, r3
  402832:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402834:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402836:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402838:	4021      	ands	r1, r4
  40283a:	400b      	ands	r3, r1
  40283c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40283e:	e01a      	b.n	402876 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402840:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402842:	4313      	orrs	r3, r2
  402844:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402846:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402848:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40284a:	400b      	ands	r3, r1
  40284c:	ea23 0302 	bic.w	r3, r3, r2
  402850:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402852:	e7df      	b.n	402814 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402854:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402856:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402858:	400b      	ands	r3, r1
  40285a:	ea23 0302 	bic.w	r3, r3, r2
  40285e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402860:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402862:	4313      	orrs	r3, r2
  402864:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402866:	e7d5      	b.n	402814 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402868:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40286a:	4313      	orrs	r3, r2
  40286c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40286e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402870:	4313      	orrs	r3, r2
  402872:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402874:	e7ce      	b.n	402814 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402876:	6042      	str	r2, [r0, #4]
}
  402878:	f85d 4b04 	ldr.w	r4, [sp], #4
  40287c:	4770      	bx	lr
  40287e:	bf00      	nop

00402880 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402880:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402882:	f012 0f01 	tst.w	r2, #1
  402886:	d001      	beq.n	40288c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402888:	6641      	str	r1, [r0, #100]	; 0x64
  40288a:	e000      	b.n	40288e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40288c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40288e:	f012 0f0a 	tst.w	r2, #10
  402892:	d001      	beq.n	402898 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402894:	6201      	str	r1, [r0, #32]
  402896:	e000      	b.n	40289a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402898:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40289a:	f012 0f02 	tst.w	r2, #2
  40289e:	d002      	beq.n	4028a6 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  4028a0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4028a4:	e004      	b.n	4028b0 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4028a6:	f012 0f08 	tst.w	r2, #8
  4028aa:	d001      	beq.n	4028b0 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4028ac:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4028b0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4028b2:	6001      	str	r1, [r0, #0]
  4028b4:	4770      	bx	lr
  4028b6:	bf00      	nop

004028b8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4028b8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028ba:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4028bc:	9c01      	ldr	r4, [sp, #4]
  4028be:	b10c      	cbz	r4, 4028c4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4028c0:	6641      	str	r1, [r0, #100]	; 0x64
  4028c2:	e000      	b.n	4028c6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4028c4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4028c6:	b10b      	cbz	r3, 4028cc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4028c8:	6501      	str	r1, [r0, #80]	; 0x50
  4028ca:	e000      	b.n	4028ce <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028cc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028ce:	b10a      	cbz	r2, 4028d4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4028d0:	6301      	str	r1, [r0, #48]	; 0x30
  4028d2:	e000      	b.n	4028d6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028d4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028d6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4028d8:	6001      	str	r1, [r0, #0]
}
  4028da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4028de:	4770      	bx	lr

004028e0 <pio_pull_down>:
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  4028e0:	b112      	cbz	r2, 4028e8 <pio_pull_down+0x8>
		p_pio->PIO_PPDER = ul_mask;
  4028e2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  4028e6:	4770      	bx	lr
	} else {
		p_pio->PIO_PPDDR = ul_mask;
  4028e8:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  4028ec:	4770      	bx	lr
  4028ee:	bf00      	nop

004028f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4028f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4028f2:	4770      	bx	lr

004028f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4028f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4028f6:	4770      	bx	lr

004028f8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4028f8:	2803      	cmp	r0, #3
  4028fa:	d007      	beq.n	40290c <pmc_mck_set_division+0x14>
  4028fc:	2804      	cmp	r0, #4
  4028fe:	d008      	beq.n	402912 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402900:	2802      	cmp	r0, #2
  402902:	bf0c      	ite	eq
  402904:	f44f 7180 	moveq.w	r1, #256	; 0x100
  402908:	2100      	movne	r1, #0
  40290a:	e004      	b.n	402916 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40290c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402910:	e001      	b.n	402916 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402912:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402916:	4a05      	ldr	r2, [pc, #20]	; (40292c <pmc_mck_set_division+0x34>)
  402918:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40291e:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402920:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402922:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402924:	f013 0f08 	tst.w	r3, #8
  402928:	d0fb      	beq.n	402922 <pmc_mck_set_division+0x2a>
}
  40292a:	4770      	bx	lr
  40292c:	400e0600 	.word	0x400e0600

00402930 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402930:	4a18      	ldr	r2, [pc, #96]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402932:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402938:	4318      	orrs	r0, r3
  40293a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40293c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40293e:	f013 0f08 	tst.w	r3, #8
  402942:	d003      	beq.n	40294c <pmc_switch_mck_to_pllack+0x1c>
  402944:	e009      	b.n	40295a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402946:	3b01      	subs	r3, #1
  402948:	d103      	bne.n	402952 <pmc_switch_mck_to_pllack+0x22>
  40294a:	e01e      	b.n	40298a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40294c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402950:	4910      	ldr	r1, [pc, #64]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402952:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402954:	f012 0f08 	tst.w	r2, #8
  402958:	d0f5      	beq.n	402946 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40295a:	4a0e      	ldr	r2, [pc, #56]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  40295c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40295e:	f023 0303 	bic.w	r3, r3, #3
  402962:	f043 0302 	orr.w	r3, r3, #2
  402966:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402968:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40296a:	f010 0008 	ands.w	r0, r0, #8
  40296e:	d004      	beq.n	40297a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402970:	2000      	movs	r0, #0
  402972:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402974:	3b01      	subs	r3, #1
  402976:	d103      	bne.n	402980 <pmc_switch_mck_to_pllack+0x50>
  402978:	e009      	b.n	40298e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40297a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40297e:	4905      	ldr	r1, [pc, #20]	; (402994 <pmc_switch_mck_to_pllack+0x64>)
  402980:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402982:	f012 0f08 	tst.w	r2, #8
  402986:	d0f5      	beq.n	402974 <pmc_switch_mck_to_pllack+0x44>
  402988:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40298a:	2001      	movs	r0, #1
  40298c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40298e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402990:	4770      	bx	lr
  402992:	bf00      	nop
  402994:	400e0600 	.word	0x400e0600

00402998 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402998:	b138      	cbz	r0, 4029aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40299a:	490e      	ldr	r1, [pc, #56]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  40299c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40299e:	4a0e      	ldr	r2, [pc, #56]	; (4029d8 <pmc_switch_mainck_to_xtal+0x40>)
  4029a0:	401a      	ands	r2, r3
  4029a2:	4b0e      	ldr	r3, [pc, #56]	; (4029dc <pmc_switch_mainck_to_xtal+0x44>)
  4029a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4029a6:	620b      	str	r3, [r1, #32]
  4029a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4029aa:	480a      	ldr	r0, [pc, #40]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4029ac:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029ae:	4a0c      	ldr	r2, [pc, #48]	; (4029e0 <pmc_switch_mainck_to_xtal+0x48>)
  4029b0:	401a      	ands	r2, r3
  4029b2:	4b0c      	ldr	r3, [pc, #48]	; (4029e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4029b4:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4029b6:	0209      	lsls	r1, r1, #8
  4029b8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4029ba:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4029bc:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4029be:	4602      	mov	r2, r0
  4029c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4029c2:	f013 0f01 	tst.w	r3, #1
  4029c6:	d0fb      	beq.n	4029c0 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4029c8:	4a02      	ldr	r2, [pc, #8]	; (4029d4 <pmc_switch_mainck_to_xtal+0x3c>)
  4029ca:	6a11      	ldr	r1, [r2, #32]
  4029cc:	4b06      	ldr	r3, [pc, #24]	; (4029e8 <pmc_switch_mainck_to_xtal+0x50>)
  4029ce:	430b      	orrs	r3, r1
  4029d0:	6213      	str	r3, [r2, #32]
  4029d2:	4770      	bx	lr
  4029d4:	400e0600 	.word	0x400e0600
  4029d8:	fec8fffc 	.word	0xfec8fffc
  4029dc:	01370002 	.word	0x01370002
  4029e0:	ffc8fffc 	.word	0xffc8fffc
  4029e4:	00370001 	.word	0x00370001
  4029e8:	01370000 	.word	0x01370000

004029ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4029ec:	4b02      	ldr	r3, [pc, #8]	; (4029f8 <pmc_osc_is_ready_mainck+0xc>)
  4029ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4029f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4029f4:	4770      	bx	lr
  4029f6:	bf00      	nop
  4029f8:	400e0600 	.word	0x400e0600

004029fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4029fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402a00:	4b01      	ldr	r3, [pc, #4]	; (402a08 <pmc_disable_pllack+0xc>)
  402a02:	629a      	str	r2, [r3, #40]	; 0x28
  402a04:	4770      	bx	lr
  402a06:	bf00      	nop
  402a08:	400e0600 	.word	0x400e0600

00402a0c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402a0c:	4b02      	ldr	r3, [pc, #8]	; (402a18 <pmc_is_locked_pllack+0xc>)
  402a0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402a10:	f000 0002 	and.w	r0, r0, #2
  402a14:	4770      	bx	lr
  402a16:	bf00      	nop
  402a18:	400e0600 	.word	0x400e0600

00402a1c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402a1c:	283f      	cmp	r0, #63	; 0x3f
  402a1e:	d81e      	bhi.n	402a5e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402a20:	281f      	cmp	r0, #31
  402a22:	d80c      	bhi.n	402a3e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402a24:	4b11      	ldr	r3, [pc, #68]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a26:	699a      	ldr	r2, [r3, #24]
  402a28:	2301      	movs	r3, #1
  402a2a:	4083      	lsls	r3, r0
  402a2c:	401a      	ands	r2, r3
  402a2e:	4293      	cmp	r3, r2
  402a30:	d017      	beq.n	402a62 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402a32:	2301      	movs	r3, #1
  402a34:	4083      	lsls	r3, r0
  402a36:	4a0d      	ldr	r2, [pc, #52]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a38:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a3a:	2000      	movs	r0, #0
  402a3c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a3e:	4b0b      	ldr	r3, [pc, #44]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402a44:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402a46:	2301      	movs	r3, #1
  402a48:	4083      	lsls	r3, r0
  402a4a:	401a      	ands	r2, r3
  402a4c:	4293      	cmp	r3, r2
  402a4e:	d00a      	beq.n	402a66 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402a50:	2301      	movs	r3, #1
  402a52:	4083      	lsls	r3, r0
  402a54:	4a05      	ldr	r2, [pc, #20]	; (402a6c <pmc_enable_periph_clk+0x50>)
  402a56:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402a5a:	2000      	movs	r0, #0
  402a5c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402a5e:	2001      	movs	r0, #1
  402a60:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402a62:	2000      	movs	r0, #0
  402a64:	4770      	bx	lr
  402a66:	2000      	movs	r0, #0
}
  402a68:	4770      	bx	lr
  402a6a:	bf00      	nop
  402a6c:	400e0600 	.word	0x400e0600

00402a70 <twihs_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  402a70:	4b0f      	ldr	r3, [pc, #60]	; (402ab0 <twihs_set_speed+0x40>)
  402a72:	4299      	cmp	r1, r3
  402a74:	d819      	bhi.n	402aaa <twihs_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  402a76:	0049      	lsls	r1, r1, #1
  402a78:	fbb2 f2f1 	udiv	r2, r2, r1
  402a7c:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a7e:	2aff      	cmp	r2, #255	; 0xff
  402a80:	d907      	bls.n	402a92 <twihs_set_speed+0x22>
  402a82:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  402a84:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
  402a86:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  402a88:	2b06      	cmp	r3, #6
  402a8a:	d803      	bhi.n	402a94 <twihs_set_speed+0x24>
  402a8c:	2aff      	cmp	r2, #255	; 0xff
  402a8e:	d8f9      	bhi.n	402a84 <twihs_set_speed+0x14>
  402a90:	e000      	b.n	402a94 <twihs_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  402a92:	2300      	movs	r3, #0
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402a94:	0211      	lsls	r1, r2, #8
  402a96:	b289      	uxth	r1, r1
			TWIHS_CWGR_CKDIV(ckdiv);
  402a98:	041b      	lsls	r3, r3, #16
  402a9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  402a9e:	430b      	orrs	r3, r1
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  402aa0:	b2d2      	uxtb	r2, r2
  402aa2:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWIHS_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twihs->TWIHS_CWGR =
  402aa4:	6102      	str	r2, [r0, #16]
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
  402aa6:	2000      	movs	r0, #0
  402aa8:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  402aaa:	2001      	movs	r0, #1
	p_twihs->TWIHS_CWGR =
			TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
			TWIHS_CWGR_CKDIV(ckdiv);

	return PASS;
}
  402aac:	4770      	bx	lr
  402aae:	bf00      	nop
  402ab0:	00061a80 	.word	0x00061a80

00402ab4 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  402ab4:	b508      	push	{r3, lr}
  402ab6:	460a      	mov	r2, r1
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  402ab8:	f04f 31ff 	mov.w	r1, #4294967295
  402abc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  402abe:	6a01      	ldr	r1, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402ac0:	2180      	movs	r1, #128	; 0x80
  402ac2:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_RHR;
  402ac4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402ac6:	2108      	movs	r1, #8
  402ac8:	6001      	str	r1, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402aca:	2120      	movs	r1, #32
  402acc:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402ace:	2104      	movs	r1, #4
  402ad0:	6001      	str	r1, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  402ad2:	6851      	ldr	r1, [r2, #4]
  402ad4:	6812      	ldr	r2, [r2, #0]
  402ad6:	4b03      	ldr	r3, [pc, #12]	; (402ae4 <twihs_master_init+0x30>)
  402ad8:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  402ada:	2801      	cmp	r0, #1
  402adc:	bf14      	ite	ne
  402ade:	2000      	movne	r0, #0
  402ae0:	2001      	moveq	r0, #1
  402ae2:	bd08      	pop	{r3, pc}
  402ae4:	00402a71 	.word	0x00402a71

00402ae8 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402ae8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t status, cnt = p_packet->length;
  402aea:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402aec:	688c      	ldr	r4, [r1, #8]
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  402aee:	2a00      	cmp	r2, #0
  402af0:	d047      	beq.n	402b82 <twihs_master_read+0x9a>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402af2:	2600      	movs	r6, #0
  402af4:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402af6:	684b      	ldr	r3, [r1, #4]
  402af8:	021b      	lsls	r3, r3, #8
  402afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402afe:	f443 5580 	orr.w	r5, r3, #4096	; 0x1000
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  402b02:	7c0b      	ldrb	r3, [r1, #16]
  402b04:	041b      	lsls	r3, r3, #16
  402b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402b0a:	432b      	orrs	r3, r5
  402b0c:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402b0e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b10:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402b12:	b15d      	cbz	r5, 402b2c <twihs_master_read+0x44>
		return 0;

	val = addr[0];
  402b14:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402b16:	2d01      	cmp	r5, #1
  402b18:	dd02      	ble.n	402b20 <twihs_master_read+0x38>
		val <<= 8;
		val |= addr[1];
  402b1a:	784e      	ldrb	r6, [r1, #1]
  402b1c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402b20:	2d02      	cmp	r5, #2
  402b22:	dd04      	ble.n	402b2e <twihs_master_read+0x46>
		val <<= 8;
		val |= addr[2];
  402b24:	7889      	ldrb	r1, [r1, #2]
  402b26:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  402b2a:	e000      	b.n	402b2e <twihs_master_read+0x46>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402b2c:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402b2e:	60c3      	str	r3, [r0, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  402b30:	2301      	movs	r3, #1
  402b32:	6003      	str	r3, [r0, #0]

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
  402b34:	f643 2698 	movw	r6, #15000	; 0x3a98
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b38:	2702      	movs	r7, #2
  402b3a:	e014      	b.n	402b66 <twihs_master_read+0x7e>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402b3c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b3e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402b42:	d120      	bne.n	402b86 <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  402b44:	3901      	subs	r1, #1
  402b46:	d020      	beq.n	402b8a <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  402b48:	2a01      	cmp	r2, #1
  402b4a:	d104      	bne.n	402b56 <twihs_master_read+0x6e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402b4c:	6007      	str	r7, [r0, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  402b4e:	f013 0f02 	tst.w	r3, #2
  402b52:	d0f3      	beq.n	402b3c <twihs_master_read+0x54>
  402b54:	e01d      	b.n	402b92 <twihs_master_read+0xaa>
  402b56:	f013 0f02 	tst.w	r3, #2
  402b5a:	d00a      	beq.n	402b72 <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b5e:	f804 3b01 	strb.w	r3, [r4], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b62:	3a01      	subs	r2, #1
  402b64:	d007      	beq.n	402b76 <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  402b66:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402b68:	f413 7580 	ands.w	r5, r3, #256	; 0x100
  402b6c:	d10f      	bne.n	402b8e <twihs_master_read+0xa6>
  402b6e:	4631      	mov	r1, r6
  402b70:	e7ea      	b.n	402b48 <twihs_master_read+0x60>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  402b72:	2a00      	cmp	r2, #0
  402b74:	d1e2      	bne.n	402b3c <twihs_master_read+0x54>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  402b76:	6a03      	ldr	r3, [r0, #32]
  402b78:	f013 0f01 	tst.w	r3, #1
  402b7c:	d0fb      	beq.n	402b76 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  402b7e:	6a03      	ldr	r3, [r0, #32]

	return TWIHS_SUCCESS;
  402b80:	e00a      	b.n	402b98 <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402b82:	2501      	movs	r5, #1
  402b84:	e008      	b.n	402b98 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b86:	2505      	movs	r5, #5
  402b88:	e006      	b.n	402b98 <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  402b8a:	2509      	movs	r5, #9
  402b8c:	e004      	b.n	402b98 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402b8e:	2505      	movs	r5, #5
  402b90:	e002      	b.n	402b98 <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  402b92:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402b94:	7023      	strb	r3, [r4, #0]
  402b96:	e7ee      	b.n	402b76 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  402b98:	4628      	mov	r0, r5
  402b9a:	bcf0      	pop	{r4, r5, r6, r7}
  402b9c:	4770      	bx	lr
  402b9e:	bf00      	nop

00402ba0 <Twihs_reinit>:

void Twihs_reinit() {
  402ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ba4:	b086      	sub	sp, #24
	sendDebugString("TWIHS RE-INITIALIZATION - STARTED\n");
  402ba6:	481c      	ldr	r0, [pc, #112]	; (402c18 <Twihs_reinit+0x78>)
  402ba8:	4e1c      	ldr	r6, [pc, #112]	; (402c1c <Twihs_reinit+0x7c>)
  402baa:	47b0      	blx	r6
	pio_set_output(PIOA,1<<3 | 1<<4,LOW,DISABLE,DISABLE);
  402bac:	4d1c      	ldr	r5, [pc, #112]	; (402c20 <Twihs_reinit+0x80>)
  402bae:	2400      	movs	r4, #0
  402bb0:	9400      	str	r4, [sp, #0]
  402bb2:	4628      	mov	r0, r5
  402bb4:	2118      	movs	r1, #24
  402bb6:	4622      	mov	r2, r4
  402bb8:	4623      	mov	r3, r4
  402bba:	f8df 8084 	ldr.w	r8, [pc, #132]	; 402c40 <Twihs_reinit+0xa0>
  402bbe:	47c0      	blx	r8
	pio_clear(PIOA,1<<3 | 1<<4);
  402bc0:	4628      	mov	r0, r5
  402bc2:	2118      	movs	r1, #24
  402bc4:	4f17      	ldr	r7, [pc, #92]	; (402c24 <Twihs_reinit+0x84>)
  402bc6:	47b8      	blx	r7
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402bc8:	4628      	mov	r0, r5
  402bca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402bce:	2218      	movs	r2, #24
  402bd0:	4b15      	ldr	r3, [pc, #84]	; (402c28 <Twihs_reinit+0x88>)
  402bd2:	4798      	blx	r3
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402bd4:	9400      	str	r4, [sp, #0]
  402bd6:	4628      	mov	r0, r5
  402bd8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bdc:	4622      	mov	r2, r4
  402bde:	4623      	mov	r3, r4
  402be0:	47c0      	blx	r8
	pio_clear(PIOA,PIO_PA26);
  402be2:	4628      	mov	r0, r5
  402be4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402be8:	47b8      	blx	r7
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  402bea:	4810      	ldr	r0, [pc, #64]	; (402c2c <Twihs_reinit+0x8c>)
  402bec:	2380      	movs	r3, #128	; 0x80
  402bee:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_RHR;
  402bf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  402bf2:	2308      	movs	r3, #8
  402bf4:	6003      	str	r3, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  402bf6:	2320      	movs	r3, #32
  402bf8:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  402bfa:	2304      	movs	r3, #4
  402bfc:	6003      	str	r3, [r0, #0]
	pio_clear(PIOA,PIO_PA26);
	
	twihs_reset(TWIHS0);
	twihs_enable_master_mode(TWIHS0);
	twihs_options_t twihs_opts;
	twihs_opts.master_clk = sysclk_get_cpu_hz();
  402bfe:	4b0c      	ldr	r3, [pc, #48]	; (402c30 <Twihs_reinit+0x90>)
  402c00:	9303      	str	r3, [sp, #12]
	twihs_opts.speed = 200000;
  402c02:	4b0c      	ldr	r3, [pc, #48]	; (402c34 <Twihs_reinit+0x94>)
  402c04:	9304      	str	r3, [sp, #16]
	twihs_master_init(TWIHS0,&twihs_opts);
  402c06:	a903      	add	r1, sp, #12
  402c08:	4b0b      	ldr	r3, [pc, #44]	; (402c38 <Twihs_reinit+0x98>)
  402c0a:	4798      	blx	r3
	sendDebugString("TWIHS RE-INITIALIZATION - FINISHED\n");
  402c0c:	480b      	ldr	r0, [pc, #44]	; (402c3c <Twihs_reinit+0x9c>)
  402c0e:	47b0      	blx	r6
}
  402c10:	b006      	add	sp, #24
  402c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c16:	bf00      	nop
  402c18:	00412860 	.word	0x00412860
  402c1c:	0040019d 	.word	0x0040019d
  402c20:	400e0e00 	.word	0x400e0e00
  402c24:	004027cd 	.word	0x004027cd
  402c28:	004027ed 	.word	0x004027ed
  402c2c:	40018000 	.word	0x40018000
  402c30:	11e1a300 	.word	0x11e1a300
  402c34:	00030d40 	.word	0x00030d40
  402c38:	00402ab5 	.word	0x00402ab5
  402c3c:	00412884 	.word	0x00412884
  402c40:	004028b9 	.word	0x004028b9

00402c44 <twihs_master_write>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  402c44:	b570      	push	{r4, r5, r6, lr}
	uint32_t status, cnt = p_packet->length;
  402c46:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  402c48:	688d      	ldr	r5, [r1, #8]
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
  402c4a:	2c00      	cmp	r4, #0
  402c4c:	d055      	beq.n	402cfa <twihs_master_write+0xb6>
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  402c4e:	2600      	movs	r6, #0
  402c50:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c52:	7c0b      	ldrb	r3, [r1, #16]
  402c54:	041b      	lsls	r3, r3, #16
  402c56:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  402c5a:	684b      	ldr	r3, [r1, #4]
  402c5c:	021b      	lsls	r3, r3, #8
  402c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  402c62:	4313      	orrs	r3, r2
  402c64:	6043      	str	r3, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  402c66:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402c68:	684a      	ldr	r2, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  402c6a:	2a00      	cmp	r2, #0
  402c6c:	d051      	beq.n	402d12 <twihs_master_write+0xce>
		return 0;

	val = addr[0];
  402c6e:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  402c70:	2a01      	cmp	r2, #1
  402c72:	dd02      	ble.n	402c7a <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  402c74:	784e      	ldrb	r6, [r1, #1]
  402c76:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  402c7a:	2a02      	cmp	r2, #2
  402c7c:	dd4a      	ble.n	402d14 <twihs_master_write+0xd0>
		val <<= 8;
		val |= addr[2];
  402c7e:	788a      	ldrb	r2, [r1, #2]
  402c80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  402c84:	e046      	b.n	402d14 <twihs_master_write+0xd0>
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402c86:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402c88:	f413 7f80 	tst.w	r3, #256	; 0x100
  402c8c:	d137      	bne.n	402cfe <twihs_master_write+0xba>
			return TWIHS_RECEIVE_NACK;
		}
		timeout++;
		if(timeout > 0xFFFF) { 
  402c8e:	3a01      	subs	r2, #1
  402c90:	d103      	bne.n	402c9a <twihs_master_write+0x56>
			Twihs_reinit();
  402c92:	4b25      	ldr	r3, [pc, #148]	; (402d28 <twihs_master_write+0xe4>)
  402c94:	4798      	blx	r3
			return TWIHS_RECEIVE_NACK;
  402c96:	2105      	movs	r1, #5
  402c98:	e044      	b.n	402d24 <twihs_master_write+0xe0>
		}
		if (!(status & TWIHS_SR_TXRDY)) {
  402c9a:	f013 0f04 	tst.w	r3, #4
  402c9e:	d003      	beq.n	402ca8 <twihs_master_write+0x64>
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402ca0:	782b      	ldrb	r3, [r5, #0]
  402ca2:	6343      	str	r3, [r0, #52]	; 0x34

		cnt--;
  402ca4:	3c01      	subs	r4, #1
		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		
		
		p_twihs->TWIHS_THR = *buffer++;
  402ca6:	3501      	adds	r5, #1
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  402ca8:	2c00      	cmp	r4, #0
  402caa:	d1ec      	bne.n	402c86 <twihs_master_write+0x42>

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402cac:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cae:	f413 7480 	ands.w	r4, r3, #256	; 0x100
  402cb2:	d126      	bne.n	402d02 <twihs_master_write+0xbe>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402cb4:	f013 0f04 	tst.w	r3, #4
  402cb8:	d10e      	bne.n	402cd8 <twihs_master_write+0x94>
  402cba:	2300      	movs	r3, #0
		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402cc0:	e002      	b.n	402cc8 <twihs_master_write+0x84>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  402cc2:	f012 0f04 	tst.w	r2, #4
  402cc6:	d107      	bne.n	402cd8 <twihs_master_write+0x94>
			break;
		}
		timeout++;
  402cc8:	3301      	adds	r3, #1

		cnt--;
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
  402cca:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
  402ccc:	f412 7f80 	tst.w	r2, #256	; 0x100
  402cd0:	d119      	bne.n	402d06 <twihs_master_write+0xc2>
  402cd2:	428b      	cmp	r3, r1
  402cd4:	d9f5      	bls.n	402cc2 <twihs_master_write+0x7e>
  402cd6:	e016      	b.n	402d06 <twihs_master_write+0xc2>
			break;
		}
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  402cd8:	2302      	movs	r3, #2
  402cda:	6003      	str	r3, [r0, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cdc:	6a01      	ldr	r1, [r0, #32]
  402cde:	f011 0101 	ands.w	r1, r1, #1
  402ce2:	d112      	bne.n	402d0a <twihs_master_write+0xc6>
  402ce4:	2300      	movs	r3, #0
  402ce6:	f64f 74fe 	movw	r4, #65534	; 0xfffe
		timeout++;
  402cea:	3301      	adds	r3, #1
		timeout++;
	}
	timeout = 0;
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
  402cec:	6a02      	ldr	r2, [r0, #32]
  402cee:	f012 0f01 	tst.w	r2, #1
  402cf2:	d117      	bne.n	402d24 <twihs_master_write+0xe0>
  402cf4:	42a3      	cmp	r3, r4
  402cf6:	d9f8      	bls.n	402cea <twihs_master_write+0xa6>
  402cf8:	e014      	b.n	402d24 <twihs_master_write+0xe0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout =0;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  402cfa:	2101      	movs	r1, #1
  402cfc:	e012      	b.n	402d24 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402cfe:	2105      	movs	r1, #5
  402d00:	e010      	b.n	402d24 <twihs_master_write+0xe0>
	}
	timeout = 0;
	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK ||  timeout > 0xFFFF) {
			return TWIHS_RECEIVE_NACK;
  402d02:	2105      	movs	r1, #5
  402d04:	e00e      	b.n	402d24 <twihs_master_write+0xe0>
  402d06:	2105      	movs	r1, #5
  402d08:	e00c      	b.n	402d24 <twihs_master_write+0xe0>

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
  402d0a:	4621      	mov	r1, r4
  402d0c:	e00a      	b.n	402d24 <twihs_master_write+0xe0>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  402d0e:	2105      	movs	r1, #5
  402d10:	e008      	b.n	402d24 <twihs_master_write+0xe0>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  402d12:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  402d14:	60c3      	str	r3, [r0, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  402d16:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  402d18:	f413 7f80 	tst.w	r3, #256	; 0x100
  402d1c:	d1f7      	bne.n	402d0e <twihs_master_write+0xca>
  402d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d22:	e7ba      	b.n	402c9a <twihs_master_write+0x56>
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP) & timeout < 0xFFFF) {
		timeout++;
	}
	
	return TWIHS_SUCCESS;
}
  402d24:	4608      	mov	r0, r1
  402d26:	bd70      	pop	{r4, r5, r6, pc}
  402d28:	00402ba1 	.word	0x00402ba1

00402d2c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402d2c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402d2e:	23ac      	movs	r3, #172	; 0xac
  402d30:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402d32:	680b      	ldr	r3, [r1, #0]
  402d34:	684a      	ldr	r2, [r1, #4]
  402d36:	fbb3 f3f2 	udiv	r3, r3, r2
  402d3a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402d3c:	1e5c      	subs	r4, r3, #1
  402d3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402d42:	4294      	cmp	r4, r2
  402d44:	d806      	bhi.n	402d54 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402d46:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402d48:	688b      	ldr	r3, [r1, #8]
  402d4a:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d4c:	2350      	movs	r3, #80	; 0x50
  402d4e:	6003      	str	r3, [r0, #0]

	return 0;
  402d50:	2000      	movs	r0, #0
  402d52:	e000      	b.n	402d56 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402d54:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402d56:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d5a:	4770      	bx	lr

00402d5c <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402d5c:	2340      	movs	r3, #64	; 0x40
  402d5e:	6003      	str	r3, [r0, #0]
  402d60:	4770      	bx	lr
  402d62:	bf00      	nop

00402d64 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402d64:	2310      	movs	r3, #16
  402d66:	6003      	str	r3, [r0, #0]
  402d68:	4770      	bx	lr
  402d6a:	bf00      	nop

00402d6c <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402d6c:	2350      	movs	r3, #80	; 0x50
  402d6e:	6003      	str	r3, [r0, #0]
  402d70:	4770      	bx	lr
  402d72:	bf00      	nop

00402d74 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402d74:	6081      	str	r1, [r0, #8]
  402d76:	4770      	bx	lr

00402d78 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402d78:	6940      	ldr	r0, [r0, #20]
}
  402d7a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402d7e:	4770      	bx	lr

00402d80 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402d80:	6201      	str	r1, [r0, #32]
  402d82:	4770      	bx	lr

00402d84 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402d84:	6943      	ldr	r3, [r0, #20]
  402d86:	f013 0f02 	tst.w	r3, #2
  402d8a:	d002      	beq.n	402d92 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402d8c:	61c1      	str	r1, [r0, #28]
	return 0;
  402d8e:	2000      	movs	r0, #0
  402d90:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402d92:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402d94:	4770      	bx	lr
  402d96:	bf00      	nop

00402d98 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402d98:	6943      	ldr	r3, [r0, #20]
  402d9a:	f013 0f01 	tst.w	r3, #1
  402d9e:	d003      	beq.n	402da8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402da0:	6983      	ldr	r3, [r0, #24]
  402da2:	700b      	strb	r3, [r1, #0]
	return 0;
  402da4:	2000      	movs	r0, #0
  402da6:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402da8:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402daa:	4770      	bx	lr

00402dac <board_init>:




void board_init(void)
{
  402dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402db0:	b09f      	sub	sp, #124	; 0x7c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402db2:	48a7      	ldr	r0, [pc, #668]	; (403050 <board_init+0x2a4>)
  402db4:	2100      	movs	r1, #0
  402db6:	4ba7      	ldr	r3, [pc, #668]	; (403054 <board_init+0x2a8>)
  402db8:	4798      	blx	r3
	sysclk_init();
  402dba:	4ba7      	ldr	r3, [pc, #668]	; (403058 <board_init+0x2ac>)
  402dbc:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402dbe:	f8df 9354 	ldr.w	r9, [pc, #852]	; 403114 <board_init+0x368>
  402dc2:	ad1b      	add	r5, sp, #108	; 0x6c
  402dc4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402dc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402dcc:	202e      	movs	r0, #46	; 0x2e
  402dce:	f8df 8348 	ldr.w	r8, [pc, #840]	; 403118 <board_init+0x36c>
  402dd2:	47c0      	blx	r8
		USART_SERIAL_PARITY,
		USART_SERIAL_STOP_BIT,
		US_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(USART_SERIAL_ID);
	pmc_enable_periph_clk(ID_UART4);
  402dd4:	202e      	movs	r0, #46	; 0x2e
  402dd6:	47c0      	blx	r8
	uart_init(USART_SERIAL, &usart_console_settings);
  402dd8:	4ca0      	ldr	r4, [pc, #640]	; (40305c <board_init+0x2b0>)
  402dda:	4620      	mov	r0, r4
  402ddc:	4629      	mov	r1, r5
  402dde:	4ba0      	ldr	r3, [pc, #640]	; (403060 <board_init+0x2b4>)
  402de0:	4798      	blx	r3
	uart_enable(USART_SERIAL);
  402de2:	4620      	mov	r0, r4
  402de4:	4b9f      	ldr	r3, [pc, #636]	; (403064 <board_init+0x2b8>)
  402de6:	4798      	blx	r3
	uart_enable_tx(USART_SERIAL);
  402de8:	4620      	mov	r0, r4
  402dea:	4b9f      	ldr	r3, [pc, #636]	; (403068 <board_init+0x2bc>)
  402dec:	4798      	blx	r3
	uart_enable_rx(USART_SERIAL);
  402dee:	4620      	mov	r0, r4
  402df0:	4b9e      	ldr	r3, [pc, #632]	; (40306c <board_init+0x2c0>)
  402df2:	4798      	blx	r3
	uart_set_clock_divisor(UART4,(1000));
  402df4:	4620      	mov	r0, r4
  402df6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402dfa:	4b9d      	ldr	r3, [pc, #628]	; (403070 <board_init+0x2c4>)
  402dfc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
  402dfe:	2010      	movs	r0, #16
  402e00:	47c0      	blx	r8
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,1<<3 | 1<<18);
  402e02:	489c      	ldr	r0, [pc, #624]	; (403074 <board_init+0x2c8>)
  402e04:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402e08:	4a9b      	ldr	r2, [pc, #620]	; (403078 <board_init+0x2cc>)
  402e0a:	4e9c      	ldr	r6, [pc, #624]	; (40307c <board_init+0x2d0>)
  402e0c:	47b0      	blx	r6
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 9600\nBits: 8\nNo stop bits \n");
  402e0e:	489c      	ldr	r0, [pc, #624]	; (403080 <board_init+0x2d4>)
  402e10:	4d9c      	ldr	r5, [pc, #624]	; (403084 <board_init+0x2d8>)
  402e12:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	sendDebugString("LED INITIALIZATION - STARTED\n");
  402e14:	489c      	ldr	r0, [pc, #624]	; (403088 <board_init+0x2dc>)
  402e16:	47a8      	blx	r5
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  402e18:	489c      	ldr	r0, [pc, #624]	; (40308c <board_init+0x2e0>)
  402e1a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402e22:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
  402e24:	200a      	movs	r0, #10
  402e26:	47c0      	blx	r8
		pmc_enable_periph_clk(ID_PIOB);
  402e28:	200b      	movs	r0, #11
  402e2a:	47c0      	blx	r8
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  402e2c:	2400      	movs	r4, #0
  402e2e:	9400      	str	r4, [sp, #0]
  402e30:	4897      	ldr	r0, [pc, #604]	; (403090 <board_init+0x2e4>)
  402e32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402e36:	4622      	mov	r2, r4
  402e38:	4623      	mov	r3, r4
  402e3a:	4f96      	ldr	r7, [pc, #600]	; (403094 <board_init+0x2e8>)
  402e3c:	47b8      	blx	r7
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402e3e:	9400      	str	r4, [sp, #0]
  402e40:	4893      	ldr	r0, [pc, #588]	; (403090 <board_init+0x2e4>)
  402e42:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e46:	4622      	mov	r2, r4
  402e48:	4623      	mov	r3, r4
  402e4a:	47b8      	blx	r7
		pio_set_output(LED2,LOW,DISABLE,DISABLE);		
  402e4c:	9400      	str	r4, [sp, #0]
  402e4e:	4890      	ldr	r0, [pc, #576]	; (403090 <board_init+0x2e4>)
  402e50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e54:	4622      	mov	r2, r4
  402e56:	4623      	mov	r3, r4
  402e58:	47b8      	blx	r7
		pio_set_output(LED3,LOW,DISABLE,DISABLE);
  402e5a:	9400      	str	r4, [sp, #0]
  402e5c:	488c      	ldr	r0, [pc, #560]	; (403090 <board_init+0x2e4>)
  402e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402e62:	4622      	mov	r2, r4
  402e64:	4623      	mov	r3, r4
  402e66:	47b8      	blx	r7
		
		pio_set_output(LED4,LOW,DISABLE,DISABLE);
  402e68:	9400      	str	r4, [sp, #0]
  402e6a:	4888      	ldr	r0, [pc, #544]	; (40308c <board_init+0x2e0>)
  402e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e70:	4622      	mov	r2, r4
  402e72:	4623      	mov	r3, r4
  402e74:	47b8      	blx	r7
		pio_set_output(LED5,LOW,DISABLE,DISABLE);
  402e76:	9400      	str	r4, [sp, #0]
  402e78:	4885      	ldr	r0, [pc, #532]	; (403090 <board_init+0x2e4>)
  402e7a:	2104      	movs	r1, #4
  402e7c:	4622      	mov	r2, r4
  402e7e:	4623      	mov	r3, r4
  402e80:	47b8      	blx	r7
		pio_set_output(LED6,LOW,DISABLE,DISABLE);
  402e82:	9400      	str	r4, [sp, #0]
  402e84:	4882      	ldr	r0, [pc, #520]	; (403090 <board_init+0x2e4>)
  402e86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402e8a:	4622      	mov	r2, r4
  402e8c:	4623      	mov	r3, r4
  402e8e:	47b8      	blx	r7
		pio_set_output(LED7,LOW,DISABLE,DISABLE);
  402e90:	9400      	str	r4, [sp, #0]
  402e92:	487f      	ldr	r0, [pc, #508]	; (403090 <board_init+0x2e4>)
  402e94:	2140      	movs	r1, #64	; 0x40
  402e96:	4622      	mov	r2, r4
  402e98:	4623      	mov	r3, r4
  402e9a:	47b8      	blx	r7
		
		sendDebugString("LED INITIALIZATION - FINISHED\n");
  402e9c:	487e      	ldr	r0, [pc, #504]	; (403098 <board_init+0x2ec>)
  402e9e:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402ea0:	487e      	ldr	r0, [pc, #504]	; (40309c <board_init+0x2f0>)
  402ea2:	47a8      	blx	r5
		wdt_disable(WDT);
  402ea4:	487e      	ldr	r0, [pc, #504]	; (4030a0 <board_init+0x2f4>)
  402ea6:	4b7f      	ldr	r3, [pc, #508]	; (4030a4 <board_init+0x2f8>)
  402ea8:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402eaa:	487f      	ldr	r0, [pc, #508]	; (4030a8 <board_init+0x2fc>)
  402eac:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402eae:	487f      	ldr	r0, [pc, #508]	; (4030ac <board_init+0x300>)
  402eb0:	47a8      	blx	r5
		cpu_irq_enable();
  402eb2:	4b7f      	ldr	r3, [pc, #508]	; (4030b0 <board_init+0x304>)
  402eb4:	f04f 0201 	mov.w	r2, #1
  402eb8:	701a      	strb	r2, [r3, #0]
  402eba:	f3bf 8f5f 	dmb	sy
  402ebe:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402ec0:	487c      	ldr	r0, [pc, #496]	; (4030b4 <board_init+0x308>)
  402ec2:	47a8      	blx	r5
	   ######################################
					Setup SDRAM
	   ######################################
	   ###################################### */
	//Build Memory device settings:
	sendDebugString("SDRAM INITIALIZATION - STARTED\n");
  402ec4:	487c      	ldr	r0, [pc, #496]	; (4030b8 <board_init+0x30c>)
  402ec6:	47a8      	blx	r5
	const sdramc_memory_dev_t SDRAM_ALLIANCE_AS4C = {
  402ec8:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  402ecc:	f109 090c 	add.w	r9, r9, #12
  402ed0:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  402ed4:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
			SDRAMC_CR_TRCD(5)		|
			SDRAMC_CR_TRAS(8)		|
			SDRAMC_CR_TXSR(12)		)
	};
	//enable the clock for the SDRAM Controller
	pmc_enable_periph_clk(ID_SDRAMC);
  402ed8:	203e      	movs	r0, #62	; 0x3e
  402eda:	47c0      	blx	r8
	
	pmc_enable_periph_clk(ID_PIOC);
  402edc:	200c      	movs	r0, #12
  402ede:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOD);
  402ee0:	2010      	movs	r0, #16
  402ee2:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOE);
  402ee4:	2011      	movs	r0, #17
  402ee6:	47c0      	blx	r8
	//set all the SDRAMC pins to SDRAMC Mode (This took way too fucking long)
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,
  402ee8:	f8df 9230 	ldr.w	r9, [pc, #560]	; 40311c <board_init+0x370>
  402eec:	4873      	ldr	r0, [pc, #460]	; (4030bc <board_init+0x310>)
  402eee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ef2:	464a      	mov	r2, r9
  402ef4:	47b0      	blx	r6
	1<<28	|
	1<<29	|
	1<<30	|
	1<<31	);
	
	pio_pull_down(PIOC,
  402ef6:	4871      	ldr	r0, [pc, #452]	; (4030bc <board_init+0x310>)
  402ef8:	4649      	mov	r1, r9
  402efa:	2201      	movs	r2, #1
  402efc:	f8df b220 	ldr.w	fp, [pc, #544]	; 403120 <board_init+0x374>
  402f00:	47d8      	blx	fp
	1<<29	|
	1<<30	|
	1<<31	,
	1);
	
	pio_pull_up(PIOC,
  402f02:	486e      	ldr	r0, [pc, #440]	; (4030bc <board_init+0x310>)
  402f04:	496e      	ldr	r1, [pc, #440]	; (4030c0 <board_init+0x314>)
  402f06:	4622      	mov	r2, r4
  402f08:	f8df 9218 	ldr.w	r9, [pc, #536]	; 403124 <board_init+0x378>
  402f0c:	47c8      	blx	r9
	1<<30	|
	1<<31	,
	0);
	
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  402f0e:	4860      	ldr	r0, [pc, #384]	; (403090 <board_init+0x2e4>)
  402f10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f14:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  402f18:	47b0      	blx	r6
	1<<15	|
	1<<16	);
	
	pio_pull_down(PIOA,1<<15	|	1<<16	,0);
  402f1a:	485d      	ldr	r0, [pc, #372]	; (403090 <board_init+0x2e4>)
  402f1c:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f20:	4622      	mov	r2, r4
  402f22:	47d8      	blx	fp
	pio_pull_up(PIOA,1<<15	|	1<<16	,1);
  402f24:	485a      	ldr	r0, [pc, #360]	; (403090 <board_init+0x2e4>)
  402f26:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  402f2a:	2201      	movs	r2, #1
  402f2c:	47c8      	blx	r9
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,
  402f2e:	4858      	ldr	r0, [pc, #352]	; (403090 <board_init+0x2e4>)
  402f30:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f34:	4a63      	ldr	r2, [pc, #396]	; (4030c4 <board_init+0x318>)
  402f36:	47b0      	blx	r6
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	);
	
	pio_pull_down(PIOA,
  402f38:	4855      	ldr	r0, [pc, #340]	; (403090 <board_init+0x2e4>)
  402f3a:	4962      	ldr	r1, [pc, #392]	; (4030c4 <board_init+0x318>)
  402f3c:	2201      	movs	r2, #1
  402f3e:	47d8      	blx	fp
	1<<18	|
	1<<19	|
	1<<20	|
	1<<0	,
	1);
	pio_pull_up(PIOA,
  402f40:	4853      	ldr	r0, [pc, #332]	; (403090 <board_init+0x2e4>)
  402f42:	4960      	ldr	r1, [pc, #384]	; (4030c4 <board_init+0x318>)
  402f44:	4622      	mov	r2, r4
  402f46:	47c8      	blx	r9
	1<<19	|
	1<<20	|
	1<<0	,
	0);
	
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_C,
  402f48:	484a      	ldr	r0, [pc, #296]	; (403074 <board_init+0x2c8>)
  402f4a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402f4e:	4a5e      	ldr	r2, [pc, #376]	; (4030c8 <board_init+0x31c>)
  402f50:	47b0      	blx	r6
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	);
	
	pio_pull_down(PIOD,1<<15	|
  402f52:	4848      	ldr	r0, [pc, #288]	; (403074 <board_init+0x2c8>)
  402f54:	495c      	ldr	r1, [pc, #368]	; (4030c8 <board_init+0x31c>)
  402f56:	2201      	movs	r2, #1
  402f58:	47d8      	blx	fp
	1<<13	|
	1<<23	|
	1<<14	|
	1<<29	,
	1);
	pio_pull_up(PIOD,1<<15	|
  402f5a:	4846      	ldr	r0, [pc, #280]	; (403074 <board_init+0x2c8>)
  402f5c:	495a      	ldr	r1, [pc, #360]	; (4030c8 <board_init+0x31c>)
  402f5e:	4622      	mov	r2, r4
  402f60:	47c8      	blx	r9
	1<<23	|
	1<<14	|
	1<<29	,
	0);
	
	pio_set_peripheral(PIOE,PIO_TYPE_PIO_PERIPH_A,
  402f62:	485a      	ldr	r0, [pc, #360]	; (4030cc <board_init+0x320>)
  402f64:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f68:	223f      	movs	r2, #63	; 0x3f
  402f6a:	47b0      	blx	r6
	1<<0	|
	1<<1	|
	1<<4	|
	1<<5	);
	
	pio_pull_down(PIOE,
  402f6c:	4857      	ldr	r0, [pc, #348]	; (4030cc <board_init+0x320>)
  402f6e:	213f      	movs	r1, #63	; 0x3f
  402f70:	2201      	movs	r2, #1
  402f72:	47d8      	blx	fp
	1<<1	|
	1<<4	|
	1<<5	,
	1);
	
	pio_pull_up(PIOE,
  402f74:	4855      	ldr	r0, [pc, #340]	; (4030cc <board_init+0x320>)
  402f76:	213f      	movs	r1, #63	; 0x3f
  402f78:	4622      	mov	r2, r4
  402f7a:	47c8      	blx	r9
	1<<4	|
	1<<5	,
	0);
	
	//THIS LINE IS A CUNT
	MATRIX->CCFG_SMCNFCS = MATRIX->CCFG_SMCNFCS | CCFG_SMCNFCS_SDRAMEN;
  402f7c:	4a54      	ldr	r2, [pc, #336]	; (4030d0 <board_init+0x324>)
  402f7e:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
  402f82:	f043 0310 	orr.w	r3, r3, #16
  402f86:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	//WHAT A CUNT, RIGHT?
	
	pio_set_peripheral(PIOC,PIO_TYPE_PIO_PERIPH_A,1<<15);
  402f8a:	484c      	ldr	r0, [pc, #304]	; (4030bc <board_init+0x310>)
  402f8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402f94:	47b0      	blx	r6
	sdramc_init((sdramc_memory_dev_t *)&SDRAM_ALLIANCE_AS4C,sysclk_get_main_hz());
  402f96:	4650      	mov	r0, sl
  402f98:	494e      	ldr	r1, [pc, #312]	; (4030d4 <board_init+0x328>)
  402f9a:	4b4f      	ldr	r3, [pc, #316]	; (4030d8 <board_init+0x32c>)
  402f9c:	4798      	blx	r3
	sendDebugString("SDRAM CONTROLLER STARTED\n");
  402f9e:	484f      	ldr	r0, [pc, #316]	; (4030dc <board_init+0x330>)
  402fa0:	47a8      	blx	r5
	//checkSDRAM
	//SdramCheck();
	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  402fa2:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
  402fa6:	4621      	mov	r1, r4
  402fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  402fac:	4b4c      	ldr	r3, [pc, #304]	; (4030e0 <board_init+0x334>)
  402fae:	4798      	blx	r3
	sendDebugString("SDRAM INITIALIZATION - FINISHED\n");
  402fb0:	484c      	ldr	r0, [pc, #304]	; (4030e4 <board_init+0x338>)
  402fb2:	47a8      	blx	r5
	/* ######################################
	   ######################################
					 Setup i2c
	   ######################################
	   ###################################### */
	sendDebugString("TWIHS INITIALIZATION - STARTED\n");
  402fb4:	484c      	ldr	r0, [pc, #304]	; (4030e8 <board_init+0x33c>)
  402fb6:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402fb8:	9400      	str	r4, [sp, #0]
  402fba:	482e      	ldr	r0, [pc, #184]	; (403074 <board_init+0x2c8>)
  402fbc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fc0:	4622      	mov	r2, r4
  402fc2:	4623      	mov	r3, r4
  402fc4:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  402fc6:	482b      	ldr	r0, [pc, #172]	; (403074 <board_init+0x2c8>)
  402fc8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fcc:	f8df a158 	ldr.w	sl, [pc, #344]	; 403128 <board_init+0x37c>
  402fd0:	47d0      	blx	sl
	pio_set_output(PIOA,PIO_PA26,LOW,DISABLE,DISABLE);
  402fd2:	9400      	str	r4, [sp, #0]
  402fd4:	482e      	ldr	r0, [pc, #184]	; (403090 <board_init+0x2e4>)
  402fd6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fda:	4622      	mov	r2, r4
  402fdc:	4623      	mov	r3, r4
  402fde:	47b8      	blx	r7
	pio_clear(PIOA,PIO_PA26);
  402fe0:	482b      	ldr	r0, [pc, #172]	; (403090 <board_init+0x2e4>)
  402fe2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402fe6:	4b41      	ldr	r3, [pc, #260]	; (4030ec <board_init+0x340>)
  402fe8:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TWIHS0);
  402fea:	2013      	movs	r0, #19
  402fec:	47c0      	blx	r8
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,1<<3 | 1<<4);
  402fee:	4828      	ldr	r0, [pc, #160]	; (403090 <board_init+0x2e4>)
  402ff0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ff4:	2218      	movs	r2, #24
  402ff6:	47b0      	blx	r6
	pio_set_output(PIOD,PIO_PD26,LOW,DISABLE,DISABLE);
  402ff8:	9400      	str	r4, [sp, #0]
  402ffa:	481e      	ldr	r0, [pc, #120]	; (403074 <board_init+0x2c8>)
  402ffc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403000:	4622      	mov	r2, r4
  403002:	4623      	mov	r3, r4
  403004:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD26);
  403006:	481b      	ldr	r0, [pc, #108]	; (403074 <board_init+0x2c8>)
  403008:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40300c:	47d0      	blx	sl
	
	Twihs_reinit();
  40300e:	4b38      	ldr	r3, [pc, #224]	; (4030f0 <board_init+0x344>)
  403010:	4798      	blx	r3
	//twihs_enable_master_mode(TWIHS0);
	//twihs_options_t twihs_opts;
	//twihs_opts.master_clk = sysclk_get_cpu_hz();
	//twihs_opts.speed = 200000;
	//twihs_master_init(TWIHS0,&twihs_opts);
	sendDebugString("TWIHS INITIALIZATION - FINISHED\n");
  403012:	4838      	ldr	r0, [pc, #224]	; (4030f4 <board_init+0x348>)
  403014:	47a8      	blx	r5
	/* ######################################
	   ######################################
				 Setup Servo Driver
	   ######################################
	   ###################################### */
	sendDebugString("SERVO DRIVER INITIALIZATION - STARTED\n");
  403016:	4838      	ldr	r0, [pc, #224]	; (4030f8 <board_init+0x34c>)
  403018:	47a8      	blx	r5
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_A);
  40301a:	2040      	movs	r0, #64	; 0x40
  40301c:	4b37      	ldr	r3, [pc, #220]	; (4030fc <board_init+0x350>)
  40301e:	4798      	blx	r3
	ServoDriverInit(PWM_CTRL_A_I2C_ADDR_B);
  403020:	2041      	movs	r0, #65	; 0x41
  403022:	4b36      	ldr	r3, [pc, #216]	; (4030fc <board_init+0x350>)
  403024:	4798      	blx	r3
	sendDebugString("SERVO DRIVER INITIALIZATION - FINISHED\n");
  403026:	4836      	ldr	r0, [pc, #216]	; (403100 <board_init+0x354>)
  403028:	47a8      	blx	r5
	   ######################################
			 		Setup Camera
	   ######################################
	   ###################################### */

	sendDebugString("CAMERA INITIALIZATION - STARTED\n");
  40302a:	4836      	ldr	r0, [pc, #216]	; (403104 <board_init+0x358>)
  40302c:	47a8      	blx	r5
	pio_set_output(PIOD,PIO_PD10,LOW,DISABLE,DISABLE);
  40302e:	9400      	str	r4, [sp, #0]
  403030:	4810      	ldr	r0, [pc, #64]	; (403074 <board_init+0x2c8>)
  403032:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403036:	4622      	mov	r2, r4
  403038:	4623      	mov	r3, r4
  40303a:	47b8      	blx	r7
	pio_set(PIOD,PIO_PD10);
  40303c:	480d      	ldr	r0, [pc, #52]	; (403074 <board_init+0x2c8>)
  40303e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403042:	47d0      	blx	sl
	delay_ms(10);
  403044:	4830      	ldr	r0, [pc, #192]	; (403108 <board_init+0x35c>)
  403046:	4b31      	ldr	r3, [pc, #196]	; (40310c <board_init+0x360>)
  403048:	4798      	blx	r3
	//pio_clear(PIOD,PIO_PD10);
	pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_D,
  40304a:	4d31      	ldr	r5, [pc, #196]	; (403110 <board_init+0x364>)
  40304c:	e06e      	b.n	40312c <board_init+0x380>
  40304e:	bf00      	nop
  403050:	400e1810 	.word	0x400e1810
  403054:	00400a71 	.word	0x00400a71
  403058:	0040274d 	.word	0x0040274d
  40305c:	400e1e00 	.word	0x400e1e00
  403060:	00402d2d 	.word	0x00402d2d
  403064:	00402d6d 	.word	0x00402d6d
  403068:	00402d5d 	.word	0x00402d5d
  40306c:	00402d65 	.word	0x00402d65
  403070:	00402d81 	.word	0x00402d81
  403074:	400e1400 	.word	0x400e1400
  403078:	00040008 	.word	0x00040008
  40307c:	004027ed 	.word	0x004027ed
  403080:	004128c0 	.word	0x004128c0
  403084:	0040019d 	.word	0x0040019d
  403088:	00412920 	.word	0x00412920
  40308c:	400e1000 	.word	0x400e1000
  403090:	400e0e00 	.word	0x400e0e00
  403094:	004028b9 	.word	0x004028b9
  403098:	00412940 	.word	0x00412940
  40309c:	00412960 	.word	0x00412960
  4030a0:	400e1850 	.word	0x400e1850
  4030a4:	00400a9d 	.word	0x00400a9d
  4030a8:	00412984 	.word	0x00412984
  4030ac:	004129a8 	.word	0x004129a8
  4030b0:	20400010 	.word	0x20400010
  4030b4:	004129d0 	.word	0x004129d0
  4030b8:	004129f8 	.word	0x004129f8
  4030bc:	400e1200 	.word	0x400e1200
  4030c0:	fffc80ff 	.word	0xfffc80ff
  4030c4:	001c0001 	.word	0x001c0001
  4030c8:	2083e000 	.word	0x2083e000
  4030cc:	400e1600 	.word	0x400e1600
  4030d0:	40088000 	.word	0x40088000
  4030d4:	11e1a300 	.word	0x11e1a300
  4030d8:	00400935 	.word	0x00400935
  4030dc:	00412a18 	.word	0x00412a18
  4030e0:	0040b30d 	.word	0x0040b30d
  4030e4:	00412a34 	.word	0x00412a34
  4030e8:	00412a58 	.word	0x00412a58
  4030ec:	004027cd 	.word	0x004027cd
  4030f0:	00402ba1 	.word	0x00402ba1
  4030f4:	00412a78 	.word	0x00412a78
  4030f8:	00412a9c 	.word	0x00412a9c
  4030fc:	00404e8d 	.word	0x00404e8d
  403100:	00412ac4 	.word	0x00412ac4
  403104:	00412aec 	.word	0x00412aec
  403108:	0007b784 	.word	0x0007b784
  40310c:	20400001 	.word	0x20400001
  403110:	1b601800 	.word	0x1b601800
  403114:	004128a8 	.word	0x004128a8
  403118:	00402a1d 	.word	0x00402a1d
  40311c:	fffc00ff 	.word	0xfffc00ff
  403120:	004028e1 	.word	0x004028e1
  403124:	004027bd 	.word	0x004027bd
  403128:	004027c9 	.word	0x004027c9
  40312c:	48ac      	ldr	r0, [pc, #688]	; (4033e0 <board_init+0x634>)
  40312e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403132:	462a      	mov	r2, r5
  403134:	47b0      	blx	r6
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	);
	
	pio_pull_up(PIOD,
  403136:	48aa      	ldr	r0, [pc, #680]	; (4033e0 <board_init+0x634>)
  403138:	4629      	mov	r1, r5
  40313a:	4622      	mov	r2, r4
  40313c:	47c8      	blx	r9
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,0);
	
	pio_pull_down(PIOD,
  40313e:	48a8      	ldr	r0, [pc, #672]	; (4033e0 <board_init+0x634>)
  403140:	4629      	mov	r1, r5
  403142:	2201      	movs	r2, #1
  403144:	47d8      	blx	fp
	1<<27	|
	1<<28	|
	1<<24	|
	1<<25	,1);
	
	pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,
  403146:	48a7      	ldr	r0, [pc, #668]	; (4033e4 <board_init+0x638>)
  403148:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40314c:	2208      	movs	r2, #8
  40314e:	47b0      	blx	r6
	1<<3);
	
	pio_pull_up(PIOB,1<<3,0);
  403150:	48a4      	ldr	r0, [pc, #656]	; (4033e4 <board_init+0x638>)
  403152:	2108      	movs	r1, #8
  403154:	4622      	mov	r2, r4
  403156:	47c8      	blx	r9
	pio_pull_down(PIOB,1<<3,1);
  403158:	48a2      	ldr	r0, [pc, #648]	; (4033e4 <board_init+0x638>)
  40315a:	2108      	movs	r1, #8
  40315c:	2201      	movs	r2, #1
  40315e:	47d8      	blx	fp
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_D,
  403160:	48a1      	ldr	r0, [pc, #644]	; (4033e8 <board_init+0x63c>)
  403162:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403166:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  40316a:	47b0      	blx	r6
	1<<27	|
	1<<24	);
	
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_B,
  40316c:	489e      	ldr	r0, [pc, #632]	; (4033e8 <board_init+0x63c>)
  40316e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403172:	f44f 7208 	mov.w	r2, #544	; 0x220
  403176:	47b0      	blx	r6
		1<<9	|
		1<<5	);
	
	pio_pull_up(PIOA,
  403178:	4d9c      	ldr	r5, [pc, #624]	; (4033ec <board_init+0x640>)
  40317a:	489b      	ldr	r0, [pc, #620]	; (4033e8 <board_init+0x63c>)
  40317c:	4629      	mov	r1, r5
  40317e:	4622      	mov	r2, r4
  403180:	47c8      	blx	r9
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,0);
	
	pio_pull_down(PIOA,
  403182:	4899      	ldr	r0, [pc, #612]	; (4033e8 <board_init+0x63c>)
  403184:	4629      	mov	r1, r5
  403186:	2201      	movs	r2, #1
  403188:	47d8      	blx	fp
	1<<9	|
	1<<5	|
	1<<27	|
	1<<24	,1);
	
	pmc_enable_periph_clk(ID_ISI);
  40318a:	203b      	movs	r0, #59	; 0x3b
  40318c:	47c0      	blx	r8
	
	//set camera to 640x480
	//SetupCameraYUVVGA();
	SetupCameraYUVVGA_OV7670();
  40318e:	4b98      	ldr	r3, [pc, #608]	; (4033f0 <board_init+0x644>)
  403190:	4798      	blx	r3
 */
static inline void isi_reset(Isi *p_isi)
{
	/* Resets the image sensor interface.
	   Finish capturing the current frame and then shut down the module. */
	p_isi->ISI_CR = ISI_CR_ISI_SRST | ISI_CR_ISI_DIS;
  403192:	2206      	movs	r2, #6
  403194:	4b97      	ldr	r3, [pc, #604]	; (4033f4 <board_init+0x648>)
  403196:	625a      	str	r2, [r3, #36]	; 0x24
	/* wait Software reset has completed successfully. */
	while((p_isi->ISI_SR & ISI_SR_SRST) != ISI_SR_SRST);
  403198:	461a      	mov	r2, r3
  40319a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40319c:	f013 0f04 	tst.w	r3, #4
  4031a0:	d0fb      	beq.n	40319a <board_init+0x3ee>
	//Optional Test Mode
	//write_SCCB(0x8D,1<<4);
	isi_reset(ISI);
	
	struct isi_config_t isiConf;
	isiConf.hpol = 1;
  4031a2:	2601      	movs	r6, #1
  4031a4:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
	isiConf.vpol = 1;
  4031a8:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
	isiConf.pck_plo = 0;
  4031ac:	2500      	movs	r5, #0
  4031ae:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
	isiConf.emb_sync = 0;
  4031b2:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	isiConf.crc_sync = 0;
  4031b6:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	isiConf.sld = 1;
  4031ba:	f88d 6052 	strb.w	r6, [sp, #82]	; 0x52
	isiConf.sfd =0;
  4031be:	f88d 5053 	strb.w	r5, [sp, #83]	; 0x53
	isiConf.image_fmt = ISI_INPUT_YUV;
  4031c2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	isiConf.image_hsize = 640;
  4031c6:	f44f 7820 	mov.w	r8, #640	; 0x280
  4031ca:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	isiConf.image_vsize = 480;
  4031ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4031d2:	9317      	str	r3, [sp, #92]	; 0x5c
	isiConf.thmask = 2;
  4031d4:	2302      	movs	r3, #2
  4031d6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
	

	memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
  4031da:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
  4031de:	4620      	mov	r0, r4
  4031e0:	4629      	mov	r1, r5
  4031e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4031e6:	4b84      	ldr	r3, [pc, #528]	; (4033f8 <board_init+0x64c>)
  4031e8:	4798      	blx	r3
	struct isi_frame_buffer_descriptors* isiFBD0 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  4031ea:	200c      	movs	r0, #12
  4031ec:	f8df 928c 	ldr.w	r9, [pc, #652]	; 40347c <board_init+0x6d0>
  4031f0:	47c8      	blx	r9
  4031f2:	4607      	mov	r7, r0
	struct isi_frame_buffer_descriptors* isiFBD1 = (struct isi_frame_buffer_descriptors*) malloc(3*4);
  4031f4:	200c      	movs	r0, #12
  4031f6:	47c8      	blx	r9
	
	isiFBD0->next = isiFBD1;
  4031f8:	60b8      	str	r0, [r7, #8]
	isiFBD0->current =CAM_FRAME0_ADDR;
  4031fa:	603c      	str	r4, [r7, #0]
	isiFBD0->control =0x1;
  4031fc:	607e      	str	r6, [r7, #4]
	
	isiFBD1->next = isiFBD0;
  4031fe:	6087      	str	r7, [r0, #8]
	isiFBD1->current =CAM_FRAME0_ADDR;
  403200:	6004      	str	r4, [r0, #0]
	isiFBD1->control =0x1;
  403202:	6046      	str	r6, [r0, #4]
	
	isi_init(ISI,&isiConf);
  403204:	4c7b      	ldr	r4, [pc, #492]	; (4033f4 <board_init+0x648>)
  403206:	4620      	mov	r0, r4
  403208:	a913      	add	r1, sp, #76	; 0x4c
  40320a:	4b7c      	ldr	r3, [pc, #496]	; (4033fc <board_init+0x650>)
  40320c:	4798      	blx	r3
	//isi_set_dma_codec_path(ISI,0,1,0,0,0);
	//ISI->ISI_PDECF = 2*16;
	isi_set_dma_preview_path(ISI,0,isiFBD0,0x01,isiFBD0->current);
  40320e:	683b      	ldr	r3, [r7, #0]
  403210:	9300      	str	r3, [sp, #0]
  403212:	4620      	mov	r0, r4
  403214:	4629      	mov	r1, r5
  403216:	463a      	mov	r2, r7
  403218:	4633      	mov	r3, r6
  40321a:	4d79      	ldr	r5, [pc, #484]	; (403400 <board_init+0x654>)
  40321c:	47a8      	blx	r5
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  40321e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403220:	4333      	orrs	r3, r6
  403222:	63a3      	str	r3, [r4, #56]	; 0x38
	isi_dma_channel_enable(ISI,1);
	
	isi_size_configure(ISI,640,640,320,320);
  403224:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403228:	9300      	str	r3, [sp, #0]
  40322a:	4620      	mov	r0, r4
  40322c:	4641      	mov	r1, r8
  40322e:	4642      	mov	r2, r8
  403230:	4d74      	ldr	r5, [pc, #464]	; (403404 <board_init+0x658>)
  403232:	47a8      	blx	r5
	ISI->ISI_CFG2 = ISI->ISI_CFG2 | ISI_CFG2_YCC_SWAP_MODE1;
  403234:	6863      	ldr	r3, [r4, #4]
  403236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  40323a:	6063      	str	r3, [r4, #4]
 *
 * \param p_isi  Pointer to a ISI instance.
 */
static inline void isi_enable(Isi *p_isi)
{
	p_isi->ISI_CR |= ISI_CR_ISI_EN;
  40323c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40323e:	4333      	orrs	r3, r6
  403240:	6263      	str	r3, [r4, #36]	; 0x24
	while((p_isi->ISI_SR & ISI_CR_ISI_EN) != ISI_CR_ISI_EN);
  403242:	4622      	mov	r2, r4
  403244:	6a93      	ldr	r3, [r2, #40]	; 0x28
  403246:	f013 0f01 	tst.w	r3, #1
  40324a:	d0fb      	beq.n	403244 <board_init+0x498>
	//ISI->ISI_PDECF = 32;
	isi_enable(ISI);
	sendDebugString("CAMERA INITIALIZATION - FINISHED\n");
  40324c:	486e      	ldr	r0, [pc, #440]	; (403408 <board_init+0x65c>)
  40324e:	4c6f      	ldr	r4, [pc, #444]	; (40340c <board_init+0x660>)
  403250:	47a0      	blx	r4
	   ######################################
			 	Setup Wireless Module
	   ######################################
	   ###################################### */
	
		sendDebugString("QSPI INITIALIZATION - STARTED\n");
  403252:	486f      	ldr	r0, [pc, #444]	; (403410 <board_init+0x664>)
  403254:	47a0      	blx	r4
	    struct qspi_config_t qspiConf;
	    qspiConf.serial_memory_mode = 0;
  403256:	2300      	movs	r3, #0
  403258:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	    qspiConf.loopback_en = 0;
  40325c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	    qspiConf.wait_data_for_transfer = 0;
  403260:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	    qspiConf.csmode = 0;
  403264:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	    qspiConf.bits_per_transfer = QSPI_MR_NBBITS_8_BIT;
  403268:	930a      	str	r3, [sp, #40]	; 0x28
	    qspiConf.baudrate = 16000000;
  40326a:	4a6a      	ldr	r2, [pc, #424]	; (403414 <board_init+0x668>)
  40326c:	920f      	str	r2, [sp, #60]	; 0x3c
		qspiConf.min_delay_qcs = 4;
  40326e:	2204      	movs	r2, #4
  403270:	920b      	str	r2, [sp, #44]	; 0x2c
		qspiConf.delay_between_ct = 10;
  403272:	220a      	movs	r2, #10
  403274:	920c      	str	r2, [sp, #48]	; 0x30
		qspiConf.clock_polarity = 0;
  403276:	930d      	str	r3, [sp, #52]	; 0x34
		qspiConf.clock_phase = 0;
  403278:	930e      	str	r3, [sp, #56]	; 0x38
				
		pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_A,
  40327a:	4d5b      	ldr	r5, [pc, #364]	; (4033e8 <board_init+0x63c>)
  40327c:	4628      	mov	r0, r5
  40327e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403282:	f44f 321e 	mov.w	r2, #161792	; 0x27800
  403286:	4c64      	ldr	r4, [pc, #400]	; (403418 <board_init+0x66c>)
  403288:	47a0      	blx	r4
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11);
		
		pio_pull_up(PIOA,
  40328a:	4628      	mov	r0, r5
  40328c:	f44f 311e 	mov.w	r1, #161792	; 0x27800
  403290:	2201      	movs	r2, #1
  403292:	4b62      	ldr	r3, [pc, #392]	; (40341c <board_init+0x670>)
  403294:	4798      	blx	r3
		1<<12	|
		1<<13	|
		1<<14	|
		1<<11,1);
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_A,
  403296:	4852      	ldr	r0, [pc, #328]	; (4033e0 <board_init+0x634>)
  403298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40329c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4032a0:	47a0      	blx	r4
		1<<31);
		
		pmc_enable_periph_clk(ID_QSPI);
  4032a2:	202b      	movs	r0, #43	; 0x2b
  4032a4:	4b5e      	ldr	r3, [pc, #376]	; (403420 <board_init+0x674>)
  4032a6:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032a8:	2202      	movs	r2, #2
  4032aa:	4b5e      	ldr	r3, [pc, #376]	; (403424 <board_init+0x678>)
  4032ac:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032ae:	461a      	mov	r2, r3
  4032b0:	6913      	ldr	r3, [r2, #16]
  4032b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032b6:	d1fb      	bne.n	4032b0 <board_init+0x504>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032b8:	4c5a      	ldr	r4, [pc, #360]	; (403424 <board_init+0x678>)
  4032ba:	2380      	movs	r3, #128	; 0x80
  4032bc:	6023      	str	r3, [r4, #0]

		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032be:	4620      	mov	r0, r4
  4032c0:	a909      	add	r1, sp, #36	; 0x24
  4032c2:	4b59      	ldr	r3, [pc, #356]	; (403428 <board_init+0x67c>)
  4032c4:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4032c6:	2301      	movs	r3, #1
  4032c8:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032ca:	4622      	mov	r2, r4
  4032cc:	6913      	ldr	r3, [r2, #16]
  4032ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032d2:	d0fb      	beq.n	4032cc <board_init+0x520>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_disable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIDIS ;
  4032d4:	2202      	movs	r2, #2
  4032d6:	4b53      	ldr	r3, [pc, #332]	; (403424 <board_init+0x678>)
  4032d8:	601a      	str	r2, [r3, #0]
	while(qspi->QSPI_SR & QSPI_SR_QSPIENS);
  4032da:	461a      	mov	r2, r3
  4032dc:	6913      	ldr	r3, [r2, #16]
  4032de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4032e2:	d1fb      	bne.n	4032dc <board_init+0x530>
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_reset(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_SWRST ;
  4032e4:	4c4f      	ldr	r4, [pc, #316]	; (403424 <board_init+0x678>)
  4032e6:	2380      	movs	r3, #128	; 0x80
  4032e8:	6023      	str	r3, [r4, #0]
		qspi_enable(QSPI);
		
		qspi_disable(QSPI);
		qspi_reset(QSPI);
		qspi_initialize(QSPI,&qspiConf);
  4032ea:	4620      	mov	r0, r4
  4032ec:	a909      	add	r1, sp, #36	; 0x24
  4032ee:	4b4e      	ldr	r3, [pc, #312]	; (403428 <board_init+0x67c>)
  4032f0:	4798      	blx	r3
		delay_ms(100);
  4032f2:	484e      	ldr	r0, [pc, #312]	; (40342c <board_init+0x680>)
  4032f4:	4b4e      	ldr	r3, [pc, #312]	; (403430 <board_init+0x684>)
  4032f6:	4798      	blx	r3
 * \param qspi  Pointer to a Qspi instance.
 */
static inline void qspi_enable(Qspi *qspi)
{
	assert(qspi);
	qspi->QSPI_CR = QSPI_CR_QSPIEN;
  4032f8:	2301      	movs	r3, #1
  4032fa:	6023      	str	r3, [r4, #0]
	while(!(qspi->QSPI_SR & QSPI_SR_QSPIENS));
  4032fc:	4622      	mov	r2, r4
  4032fe:	6913      	ldr	r3, [r2, #16]
  403300:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403304:	d0fb      	beq.n	4032fe <board_init+0x552>
		qspi_enable(QSPI);
		delay_ms(100);
  403306:	4849      	ldr	r0, [pc, #292]	; (40342c <board_init+0x680>)
  403308:	4b49      	ldr	r3, [pc, #292]	; (403430 <board_init+0x684>)
  40330a:	4798      	blx	r3
		//DW1000_initialise();
		sendDebugString("QSPI INITIALIZATION - FINISHED\n");
  40330c:	4849      	ldr	r0, [pc, #292]	; (403434 <board_init+0x688>)
  40330e:	4c3f      	ldr	r4, [pc, #252]	; (40340c <board_init+0x660>)
  403310:	47a0      	blx	r4
		
		//Initalize the dwm1000 module 
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  403312:	4849      	ldr	r0, [pc, #292]	; (403438 <board_init+0x68c>)
  403314:	47a0      	blx	r4
		//DW1000_initialise2();
		//DW1000_toggleGPIO_MODE();
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  403316:	4849      	ldr	r0, [pc, #292]	; (40343c <board_init+0x690>)
  403318:	47a0      	blx	r4
	/* ######################################
	   ######################################
			 		Setup ADC
	   ######################################
	   ###################################### */
		sendDebugString("ADC INITIALIZATION - STARTED\n");
  40331a:	4849      	ldr	r0, [pc, #292]	; (403440 <board_init+0x694>)
  40331c:	47a0      	blx	r4
		struct afec_config confDefaults;
		pmc_enable_periph_clk(AFEC0);
  40331e:	4d49      	ldr	r5, [pc, #292]	; (403444 <board_init+0x698>)
  403320:	4628      	mov	r0, r5
  403322:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 403420 <board_init+0x674>
  403326:	47c8      	blx	r9
		
		afec_enable(AFEC0);
  403328:	4628      	mov	r0, r5
  40332a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 403480 <board_init+0x6d4>
  40332e:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403330:	a803      	add	r0, sp, #12
  403332:	4f45      	ldr	r7, [pc, #276]	; (403448 <board_init+0x69c>)
  403334:	47b8      	blx	r7
		afec_init(AFEC0,&confDefaults);
  403336:	4628      	mov	r0, r5
  403338:	a903      	add	r1, sp, #12
  40333a:	4e44      	ldr	r6, [pc, #272]	; (40344c <board_init+0x6a0>)
  40333c:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  40333e:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  403340:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403344:	606b      	str	r3, [r5, #4]
		afec_set_trigger(AFEC0,AFEC_TRIG_SW);
		
		pmc_enable_periph_clk(AFEC1);
  403346:	f505 3520 	add.w	r5, r5, #163840	; 0x28000
  40334a:	4628      	mov	r0, r5
  40334c:	47c8      	blx	r9
		
		afec_enable(AFEC1);
  40334e:	4628      	mov	r0, r5
  403350:	47c0      	blx	r8
		afec_get_config_defaults(&confDefaults);
  403352:	a803      	add	r0, sp, #12
  403354:	47b8      	blx	r7
		afec_init(AFEC1,&confDefaults);
  403356:	4628      	mov	r0, r5
  403358:	a903      	add	r1, sp, #12
  40335a:	47b0      	blx	r6
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  40335c:	686b      	ldr	r3, [r5, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40335e:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  403362:	606b      	str	r3, [r5, #4]
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403364:	2701      	movs	r7, #1
  403366:	616f      	str	r7, [r5, #20]
		afec_set_trigger(AFEC1,AFEC_TRIG_SW);
		
		afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
		
		pio_pull_up(PIOB,1<<1,0);
  403368:	f505 25fa 	add.w	r5, r5, #512000	; 0x7d000
  40336c:	4628      	mov	r0, r5
  40336e:	2102      	movs	r1, #2
  403370:	2200      	movs	r2, #0
  403372:	4b2a      	ldr	r3, [pc, #168]	; (40341c <board_init+0x670>)
  403374:	4798      	blx	r3
		pio_pull_down(PIOB,1<<1,0);
  403376:	4628      	mov	r0, r5
  403378:	2102      	movs	r1, #2
  40337a:	2200      	movs	r2, #0
  40337c:	4b34      	ldr	r3, [pc, #208]	; (403450 <board_init+0x6a4>)
  40337e:	4798      	blx	r3
		sendDebugString("ADC INITIALIZATION - FINISHED\n");
  403380:	4834      	ldr	r0, [pc, #208]	; (403454 <board_init+0x6a8>)
  403382:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup SWITCHES
	   ######################################
	   ###################################### */
		sendDebugString("SWITCH INITIALIZATION - STARTED\n");
  403384:	4834      	ldr	r0, [pc, #208]	; (403458 <board_init+0x6ac>)
  403386:	47a0      	blx	r4
		pio_set_input(PIOC,1<<12,PIO_PULLUP | PIO_DEBOUNCE);
  403388:	4e34      	ldr	r6, [pc, #208]	; (40345c <board_init+0x6b0>)
  40338a:	4630      	mov	r0, r6
  40338c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403390:	2209      	movs	r2, #9
  403392:	4d33      	ldr	r5, [pc, #204]	; (403460 <board_init+0x6b4>)
  403394:	47a8      	blx	r5
		pio_set_input(PIOC,1<<11,PIO_PULLUP | PIO_DEBOUNCE);
  403396:	4630      	mov	r0, r6
  403398:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40339c:	2209      	movs	r2, #9
  40339e:	47a8      	blx	r5
		pio_set_input(PIOC,1<<10,PIO_PULLUP | PIO_DEBOUNCE);
  4033a0:	4630      	mov	r0, r6
  4033a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4033a6:	2209      	movs	r2, #9
  4033a8:	47a8      	blx	r5
		pio_set_input(PIOC,1<<9,PIO_PULLUP | PIO_DEBOUNCE);
  4033aa:	4630      	mov	r0, r6
  4033ac:	f44f 7100 	mov.w	r1, #512	; 0x200
  4033b0:	2209      	movs	r2, #9
  4033b2:	47a8      	blx	r5
		sendDebugString("SWITCH INITIALIZATION - FINISHED\n");
  4033b4:	482b      	ldr	r0, [pc, #172]	; (403464 <board_init+0x6b8>)
  4033b6:	47a0      	blx	r4
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIFERAL IRQ INITIALIZATION - STARTED\n");
  4033b8:	482b      	ldr	r0, [pc, #172]	; (403468 <board_init+0x6bc>)
  4033ba:	47a0      	blx	r4
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART4,UART_IER_RXRDY);
  4033bc:	482b      	ldr	r0, [pc, #172]	; (40346c <board_init+0x6c0>)
  4033be:	4639      	mov	r1, r7
  4033c0:	4b2b      	ldr	r3, [pc, #172]	; (403470 <board_init+0x6c4>)
  4033c2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4033c4:	4b2b      	ldr	r3, [pc, #172]	; (403474 <board_init+0x6c8>)
  4033c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4033ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4033ce:	21c0      	movs	r1, #192	; 0xc0
  4033d0:	f883 132e 	strb.w	r1, [r3, #814]	; 0x32e
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4033d4:	605a      	str	r2, [r3, #4]
		NVIC_ClearPendingIRQ(UART4_IRQn);
		NVIC_SetPriority(UART4_IRQn,6);
		NVIC_EnableIRQ(UART4_IRQn);
		sendDebugString("PERIFERAL IRQ INITIALIZATION - FINISHED\n");
  4033d6:	4828      	ldr	r0, [pc, #160]	; (403478 <board_init+0x6cc>)
  4033d8:	47a0      	blx	r4
}
  4033da:	b01f      	add	sp, #124	; 0x7c
  4033dc:	e052      	b.n	403484 <board_init+0x6d8>
  4033de:	bf00      	nop
  4033e0:	400e1400 	.word	0x400e1400
  4033e4:	400e1000 	.word	0x400e1000
  4033e8:	400e0e00 	.word	0x400e0e00
  4033ec:	09000220 	.word	0x09000220
  4033f0:	004051ad 	.word	0x004051ad
  4033f4:	4004c000 	.word	0x4004c000
  4033f8:	0040b30d 	.word	0x0040b30d
  4033fc:	004003e1 	.word	0x004003e1
  403400:	0040053d 	.word	0x0040053d
  403404:	00400491 	.word	0x00400491
  403408:	00412b10 	.word	0x00412b10
  40340c:	0040019d 	.word	0x0040019d
  403410:	00412b34 	.word	0x00412b34
  403414:	00f42400 	.word	0x00f42400
  403418:	004027ed 	.word	0x004027ed
  40341c:	004027bd 	.word	0x004027bd
  403420:	00402a1d 	.word	0x00402a1d
  403424:	4007c000 	.word	0x4007c000
  403428:	00400615 	.word	0x00400615
  40342c:	004d2b25 	.word	0x004d2b25
  403430:	20400001 	.word	0x20400001
  403434:	00412b54 	.word	0x00412b54
  403438:	00412b74 	.word	0x00412b74
  40343c:	00412b98 	.word	0x00412b98
  403440:	00412bbc 	.word	0x00412bbc
  403444:	4003c000 	.word	0x4003c000
  403448:	00400265 	.word	0x00400265
  40344c:	00400295 	.word	0x00400295
  403450:	004028e1 	.word	0x004028e1
  403454:	00412bdc 	.word	0x00412bdc
  403458:	00412bfc 	.word	0x00412bfc
  40345c:	400e1200 	.word	0x400e1200
  403460:	00402881 	.word	0x00402881
  403464:	00412c20 	.word	0x00412c20
  403468:	00412c44 	.word	0x00412c44
  40346c:	400e1e00 	.word	0x400e1e00
  403470:	00402d75 	.word	0x00402d75
  403474:	e000e100 	.word	0xe000e100
  403478:	00412c6c 	.word	0x00412c6c
  40347c:	0040ac71 	.word	0x0040ac71
  403480:	0040038d 	.word	0x0040038d
  403484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403488 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  403488:	e7fe      	b.n	403488 <Dummy_Handler>
  40348a:	bf00      	nop

0040348c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40348c:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40348e:	4b19      	ldr	r3, [pc, #100]	; (4034f4 <Reset_Handler+0x68>)
  403490:	4a19      	ldr	r2, [pc, #100]	; (4034f8 <Reset_Handler+0x6c>)
  403492:	429a      	cmp	r2, r3
  403494:	d003      	beq.n	40349e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  403496:	4b19      	ldr	r3, [pc, #100]	; (4034fc <Reset_Handler+0x70>)
  403498:	4a16      	ldr	r2, [pc, #88]	; (4034f4 <Reset_Handler+0x68>)
  40349a:	429a      	cmp	r2, r3
  40349c:	d304      	bcc.n	4034a8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40349e:	4b18      	ldr	r3, [pc, #96]	; (403500 <Reset_Handler+0x74>)
  4034a0:	4a18      	ldr	r2, [pc, #96]	; (403504 <Reset_Handler+0x78>)
  4034a2:	429a      	cmp	r2, r3
  4034a4:	d310      	bcc.n	4034c8 <Reset_Handler+0x3c>
  4034a6:	e01b      	b.n	4034e0 <Reset_Handler+0x54>
  4034a8:	4912      	ldr	r1, [pc, #72]	; (4034f4 <Reset_Handler+0x68>)
  4034aa:	1d0a      	adds	r2, r1, #4
  4034ac:	4b16      	ldr	r3, [pc, #88]	; (403508 <Reset_Handler+0x7c>)
  4034ae:	1a9b      	subs	r3, r3, r2
  4034b0:	f023 0303 	bic.w	r3, r3, #3
  4034b4:	3304      	adds	r3, #4
  4034b6:	4a10      	ldr	r2, [pc, #64]	; (4034f8 <Reset_Handler+0x6c>)
  4034b8:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4034ba:	f852 0b04 	ldr.w	r0, [r2], #4
  4034be:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4034c2:	429a      	cmp	r2, r3
  4034c4:	d1f9      	bne.n	4034ba <Reset_Handler+0x2e>
  4034c6:	e7ea      	b.n	40349e <Reset_Handler+0x12>
  4034c8:	4b10      	ldr	r3, [pc, #64]	; (40350c <Reset_Handler+0x80>)
  4034ca:	4a11      	ldr	r2, [pc, #68]	; (403510 <Reset_Handler+0x84>)
  4034cc:	1ad2      	subs	r2, r2, r3
  4034ce:	f022 0203 	bic.w	r2, r2, #3
  4034d2:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034d4:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4034d6:	2100      	movs	r1, #0
  4034d8:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4034dc:	4293      	cmp	r3, r2
  4034de:	d1fb      	bne.n	4034d8 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4034e0:	4a0c      	ldr	r2, [pc, #48]	; (403514 <Reset_Handler+0x88>)
  4034e2:	4b0d      	ldr	r3, [pc, #52]	; (403518 <Reset_Handler+0x8c>)
  4034e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4034e8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4034ea:	4b0c      	ldr	r3, [pc, #48]	; (40351c <Reset_Handler+0x90>)
  4034ec:	4798      	blx	r3

        /* Branch to main function */
        main();
  4034ee:	4b0c      	ldr	r3, [pc, #48]	; (403520 <Reset_Handler+0x94>)
  4034f0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4034f2:	e7fe      	b.n	4034f2 <Reset_Handler+0x66>
  4034f4:	20400000 	.word	0x20400000
  4034f8:	0041399c 	.word	0x0041399c
  4034fc:	20400950 	.word	0x20400950
  403500:	2040c6a8 	.word	0x2040c6a8
  403504:	20400950 	.word	0x20400950
  403508:	20400953 	.word	0x20400953
  40350c:	20400954 	.word	0x20400954
  403510:	2040c6ab 	.word	0x2040c6ab
  403514:	e000ed00 	.word	0xe000ed00
  403518:	00400000 	.word	0x00400000
  40351c:	0040abf9 	.word	0x0040abf9
  403520:	004077d5 	.word	0x004077d5

00403524 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403524:	4b3d      	ldr	r3, [pc, #244]	; (40361c <SystemCoreClockUpdate+0xf8>)
  403526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403528:	f003 0303 	and.w	r3, r3, #3
  40352c:	2b01      	cmp	r3, #1
  40352e:	d012      	beq.n	403556 <SystemCoreClockUpdate+0x32>
  403530:	b113      	cbz	r3, 403538 <SystemCoreClockUpdate+0x14>
  403532:	2b02      	cmp	r3, #2
  403534:	d02c      	beq.n	403590 <SystemCoreClockUpdate+0x6c>
  403536:	e05a      	b.n	4035ee <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403538:	4b39      	ldr	r3, [pc, #228]	; (403620 <SystemCoreClockUpdate+0xfc>)
  40353a:	695b      	ldr	r3, [r3, #20]
  40353c:	f013 0f80 	tst.w	r3, #128	; 0x80
  403540:	d004      	beq.n	40354c <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403546:	4b37      	ldr	r3, [pc, #220]	; (403624 <SystemCoreClockUpdate+0x100>)
  403548:	601a      	str	r2, [r3, #0]
  40354a:	e050      	b.n	4035ee <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40354c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  403550:	4b34      	ldr	r3, [pc, #208]	; (403624 <SystemCoreClockUpdate+0x100>)
  403552:	601a      	str	r2, [r3, #0]
  403554:	e04b      	b.n	4035ee <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403556:	4b31      	ldr	r3, [pc, #196]	; (40361c <SystemCoreClockUpdate+0xf8>)
  403558:	6a1b      	ldr	r3, [r3, #32]
  40355a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40355e:	d003      	beq.n	403568 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403560:	4a31      	ldr	r2, [pc, #196]	; (403628 <SystemCoreClockUpdate+0x104>)
  403562:	4b30      	ldr	r3, [pc, #192]	; (403624 <SystemCoreClockUpdate+0x100>)
  403564:	601a      	str	r2, [r3, #0]
  403566:	e042      	b.n	4035ee <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403568:	4a30      	ldr	r2, [pc, #192]	; (40362c <SystemCoreClockUpdate+0x108>)
  40356a:	4b2e      	ldr	r3, [pc, #184]	; (403624 <SystemCoreClockUpdate+0x100>)
  40356c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40356e:	4b2b      	ldr	r3, [pc, #172]	; (40361c <SystemCoreClockUpdate+0xf8>)
  403570:	6a1b      	ldr	r3, [r3, #32]
  403572:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403576:	2b10      	cmp	r3, #16
  403578:	d002      	beq.n	403580 <SystemCoreClockUpdate+0x5c>
  40357a:	2b20      	cmp	r3, #32
  40357c:	d004      	beq.n	403588 <SystemCoreClockUpdate+0x64>
  40357e:	e036      	b.n	4035ee <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  403580:	4a2b      	ldr	r2, [pc, #172]	; (403630 <SystemCoreClockUpdate+0x10c>)
  403582:	4b28      	ldr	r3, [pc, #160]	; (403624 <SystemCoreClockUpdate+0x100>)
  403584:	601a      	str	r2, [r3, #0]
          break;
  403586:	e032      	b.n	4035ee <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  403588:	4a27      	ldr	r2, [pc, #156]	; (403628 <SystemCoreClockUpdate+0x104>)
  40358a:	4b26      	ldr	r3, [pc, #152]	; (403624 <SystemCoreClockUpdate+0x100>)
  40358c:	601a      	str	r2, [r3, #0]
          break;
  40358e:	e02e      	b.n	4035ee <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  403590:	4b22      	ldr	r3, [pc, #136]	; (40361c <SystemCoreClockUpdate+0xf8>)
  403592:	6a1b      	ldr	r3, [r3, #32]
  403594:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403598:	d003      	beq.n	4035a2 <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40359a:	4a23      	ldr	r2, [pc, #140]	; (403628 <SystemCoreClockUpdate+0x104>)
  40359c:	4b21      	ldr	r3, [pc, #132]	; (403624 <SystemCoreClockUpdate+0x100>)
  40359e:	601a      	str	r2, [r3, #0]
  4035a0:	e012      	b.n	4035c8 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035a2:	4a22      	ldr	r2, [pc, #136]	; (40362c <SystemCoreClockUpdate+0x108>)
  4035a4:	4b1f      	ldr	r3, [pc, #124]	; (403624 <SystemCoreClockUpdate+0x100>)
  4035a6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4035a8:	4b1c      	ldr	r3, [pc, #112]	; (40361c <SystemCoreClockUpdate+0xf8>)
  4035aa:	6a1b      	ldr	r3, [r3, #32]
  4035ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035b0:	2b10      	cmp	r3, #16
  4035b2:	d002      	beq.n	4035ba <SystemCoreClockUpdate+0x96>
  4035b4:	2b20      	cmp	r3, #32
  4035b6:	d004      	beq.n	4035c2 <SystemCoreClockUpdate+0x9e>
  4035b8:	e006      	b.n	4035c8 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4035ba:	4a1d      	ldr	r2, [pc, #116]	; (403630 <SystemCoreClockUpdate+0x10c>)
  4035bc:	4b19      	ldr	r3, [pc, #100]	; (403624 <SystemCoreClockUpdate+0x100>)
  4035be:	601a      	str	r2, [r3, #0]
          break;
  4035c0:	e002      	b.n	4035c8 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4035c2:	4a19      	ldr	r2, [pc, #100]	; (403628 <SystemCoreClockUpdate+0x104>)
  4035c4:	4b17      	ldr	r3, [pc, #92]	; (403624 <SystemCoreClockUpdate+0x100>)
  4035c6:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4035c8:	4b14      	ldr	r3, [pc, #80]	; (40361c <SystemCoreClockUpdate+0xf8>)
  4035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035cc:	f003 0303 	and.w	r3, r3, #3
  4035d0:	2b02      	cmp	r3, #2
  4035d2:	d10c      	bne.n	4035ee <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4035d4:	4a11      	ldr	r2, [pc, #68]	; (40361c <SystemCoreClockUpdate+0xf8>)
  4035d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4035d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4035da:	4812      	ldr	r0, [pc, #72]	; (403624 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4035dc:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4035e0:	6803      	ldr	r3, [r0, #0]
  4035e2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4035e6:	b2d2      	uxtb	r2, r2
  4035e8:	fbb3 f3f2 	udiv	r3, r3, r2
  4035ec:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4035ee:	4b0b      	ldr	r3, [pc, #44]	; (40361c <SystemCoreClockUpdate+0xf8>)
  4035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035f6:	2b70      	cmp	r3, #112	; 0x70
  4035f8:	d107      	bne.n	40360a <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  4035fa:	4a0a      	ldr	r2, [pc, #40]	; (403624 <SystemCoreClockUpdate+0x100>)
  4035fc:	6813      	ldr	r3, [r2, #0]
  4035fe:	490d      	ldr	r1, [pc, #52]	; (403634 <SystemCoreClockUpdate+0x110>)
  403600:	fba1 1303 	umull	r1, r3, r1, r3
  403604:	085b      	lsrs	r3, r3, #1
  403606:	6013      	str	r3, [r2, #0]
  403608:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40360a:	4b04      	ldr	r3, [pc, #16]	; (40361c <SystemCoreClockUpdate+0xf8>)
  40360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40360e:	4905      	ldr	r1, [pc, #20]	; (403624 <SystemCoreClockUpdate+0x100>)
  403610:	f3c2 1202 	ubfx	r2, r2, #4, #3
  403614:	680b      	ldr	r3, [r1, #0]
  403616:	40d3      	lsrs	r3, r2
  403618:	600b      	str	r3, [r1, #0]
  40361a:	4770      	bx	lr
  40361c:	400e0600 	.word	0x400e0600
  403620:	400e1810 	.word	0x400e1810
  403624:	20400014 	.word	0x20400014
  403628:	00b71b00 	.word	0x00b71b00
  40362c:	003d0900 	.word	0x003d0900
  403630:	007a1200 	.word	0x007a1200
  403634:	aaaaaaab 	.word	0xaaaaaaab

00403638 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403638:	4b14      	ldr	r3, [pc, #80]	; (40368c <system_init_flash+0x54>)
  40363a:	4298      	cmp	r0, r3
  40363c:	d804      	bhi.n	403648 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40363e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403642:	4b13      	ldr	r3, [pc, #76]	; (403690 <system_init_flash+0x58>)
  403644:	601a      	str	r2, [r3, #0]
  403646:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  403648:	4b12      	ldr	r3, [pc, #72]	; (403694 <system_init_flash+0x5c>)
  40364a:	4298      	cmp	r0, r3
  40364c:	d803      	bhi.n	403656 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40364e:	4a12      	ldr	r2, [pc, #72]	; (403698 <system_init_flash+0x60>)
  403650:	4b0f      	ldr	r3, [pc, #60]	; (403690 <system_init_flash+0x58>)
  403652:	601a      	str	r2, [r3, #0]
  403654:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  403656:	4b11      	ldr	r3, [pc, #68]	; (40369c <system_init_flash+0x64>)
  403658:	4298      	cmp	r0, r3
  40365a:	d803      	bhi.n	403664 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40365c:	4a10      	ldr	r2, [pc, #64]	; (4036a0 <system_init_flash+0x68>)
  40365e:	4b0c      	ldr	r3, [pc, #48]	; (403690 <system_init_flash+0x58>)
  403660:	601a      	str	r2, [r3, #0]
  403662:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403664:	4b0f      	ldr	r3, [pc, #60]	; (4036a4 <system_init_flash+0x6c>)
  403666:	4298      	cmp	r0, r3
  403668:	d803      	bhi.n	403672 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40366a:	4a0f      	ldr	r2, [pc, #60]	; (4036a8 <system_init_flash+0x70>)
  40366c:	4b08      	ldr	r3, [pc, #32]	; (403690 <system_init_flash+0x58>)
  40366e:	601a      	str	r2, [r3, #0]
  403670:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403672:	4b0e      	ldr	r3, [pc, #56]	; (4036ac <system_init_flash+0x74>)
  403674:	4298      	cmp	r0, r3
  403676:	d804      	bhi.n	403682 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403678:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40367c:	4b04      	ldr	r3, [pc, #16]	; (403690 <system_init_flash+0x58>)
  40367e:	601a      	str	r2, [r3, #0]
  403680:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403682:	4a0b      	ldr	r2, [pc, #44]	; (4036b0 <system_init_flash+0x78>)
  403684:	4b02      	ldr	r3, [pc, #8]	; (403690 <system_init_flash+0x58>)
  403686:	601a      	str	r2, [r3, #0]
  403688:	4770      	bx	lr
  40368a:	bf00      	nop
  40368c:	01312cff 	.word	0x01312cff
  403690:	400e0c00 	.word	0x400e0c00
  403694:	026259ff 	.word	0x026259ff
  403698:	04000100 	.word	0x04000100
  40369c:	039386ff 	.word	0x039386ff
  4036a0:	04000200 	.word	0x04000200
  4036a4:	04c4b3ff 	.word	0x04c4b3ff
  4036a8:	04000300 	.word	0x04000300
  4036ac:	05f5e0ff 	.word	0x05f5e0ff
  4036b0:	04000500 	.word	0x04000500

004036b4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4036b4:	4b09      	ldr	r3, [pc, #36]	; (4036dc <_sbrk+0x28>)
  4036b6:	681b      	ldr	r3, [r3, #0]
  4036b8:	b913      	cbnz	r3, 4036c0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4036ba:	4a09      	ldr	r2, [pc, #36]	; (4036e0 <_sbrk+0x2c>)
  4036bc:	4b07      	ldr	r3, [pc, #28]	; (4036dc <_sbrk+0x28>)
  4036be:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4036c0:	4b06      	ldr	r3, [pc, #24]	; (4036dc <_sbrk+0x28>)
  4036c2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4036c4:	181a      	adds	r2, r3, r0
  4036c6:	4907      	ldr	r1, [pc, #28]	; (4036e4 <_sbrk+0x30>)
  4036c8:	4291      	cmp	r1, r2
  4036ca:	db04      	blt.n	4036d6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4036cc:	4610      	mov	r0, r2
  4036ce:	4a03      	ldr	r2, [pc, #12]	; (4036dc <_sbrk+0x28>)
  4036d0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4036d2:	4618      	mov	r0, r3
  4036d4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4036d6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4036da:	4770      	bx	lr
  4036dc:	2040c4b4 	.word	0x2040c4b4
  4036e0:	2040e8a8 	.word	0x2040e8a8
  4036e4:	2045fffc 	.word	0x2045fffc

004036e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4036e8:	f04f 30ff 	mov.w	r0, #4294967295
  4036ec:	4770      	bx	lr
  4036ee:	bf00      	nop

004036f0 <_write>:

extern int _write(int file)
{
	return -1;
}
  4036f0:	f04f 30ff 	mov.w	r0, #4294967295
  4036f4:	4770      	bx	lr
  4036f6:	bf00      	nop

004036f8 <_read>:

extern int _read(int file)
{
	return -1;
}
  4036f8:	f04f 30ff 	mov.w	r0, #4294967295
  4036fc:	4770      	bx	lr
  4036fe:	bf00      	nop

00403700 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403704:	604b      	str	r3, [r1, #4]

	return 0;
}
  403706:	2000      	movs	r0, #0
  403708:	4770      	bx	lr
  40370a:	bf00      	nop

0040370c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40370c:	2001      	movs	r0, #1
  40370e:	4770      	bx	lr

00403710 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403710:	2000      	movs	r0, #0
  403712:	4770      	bx	lr

00403714 <_exit>:

extern void _exit(int status)
{
  403714:	b508      	push	{r3, lr}
  403716:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
  403718:	4801      	ldr	r0, [pc, #4]	; (403720 <_exit+0xc>)
  40371a:	4b02      	ldr	r3, [pc, #8]	; (403724 <_exit+0x10>)
  40371c:	4798      	blx	r3

	for (;;);
  40371e:	e7fe      	b.n	40371e <_exit+0xa>
  403720:	00412c98 	.word	0x00412c98
  403724:	0040ac49 	.word	0x0040ac49

00403728 <_kill>:
}

extern void _kill(int pid, int sig)
{
  403728:	4770      	bx	lr
  40372a:	bf00      	nop

0040372c <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
  40372c:	f04f 30ff 	mov.w	r0, #4294967295
  403730:	4770      	bx	lr
  403732:	bf00      	nop

00403734 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  403734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403738:	b087      	sub	sp, #28
  40373a:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  40373c:	f103 0e07 	add.w	lr, r3, #7
  403740:	f02e 0e07 	bic.w	lr, lr, #7
  403744:	ebad 0d0e 	sub.w	sp, sp, lr
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
  403748:	2b08      	cmp	r3, #8
  40374a:	dc41      	bgt.n	4037d0 <DW1000_readReg+0x9c>
  40374c:	466e      	mov	r6, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  40374e:	b919      	cbnz	r1, 403758 <DW1000_readReg+0x24>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  403750:	60f8      	str	r0, [r7, #12]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  403752:	f04f 0b01 	mov.w	fp, #1
  403756:	e03e      	b.n	4037d6 <DW1000_readReg+0xa2>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  403758:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  40375c:	60f8      	str	r0, [r7, #12]
    	if (offset < 128) {							// Check if extended sub-index is needed
  40375e:	2a7f      	cmp	r2, #127	; 0x7f
  403760:	d803      	bhi.n	40376a <DW1000_readReg+0x36>
    		header[1] = offset;						
  403762:	613a      	str	r2, [r7, #16]
    		headerLen = 2;
  403764:	f04f 0b02 	mov.w	fp, #2
  403768:	e035      	b.n	4037d6 <DW1000_readReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  40376a:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  40376e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403772:	6139      	str	r1, [r7, #16]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  403774:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  403778:	617a      	str	r2, [r7, #20]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  40377a:	f04f 0b03 	mov.w	fp, #3
  40377e:	e02a      	b.n	4037d6 <DW1000_readReg+0xa2>
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  403780:	481b      	ldr	r0, [pc, #108]	; (4037f0 <DW1000_readReg+0xbc>)
  403782:	4649      	mov	r1, r9
  403784:	2201      	movs	r2, #1
  403786:	47b0      	blx	r6
  403788:	f108 0801 	add.w	r8, r8, #1
  40378c:	f109 0904 	add.w	r9, r9, #4
  403790:	45c3      	cmp	fp, r8
  403792:	dcf5      	bgt.n	403780 <DW1000_readReg+0x4c>
	qspi_read(QSPI,data,n);
  403794:	4816      	ldr	r0, [pc, #88]	; (4037f0 <DW1000_readReg+0xbc>)
  403796:	687e      	ldr	r6, [r7, #4]
  403798:	4631      	mov	r1, r6
  40379a:	4652      	mov	r2, sl
  40379c:	4b15      	ldr	r3, [pc, #84]	; (4037f4 <DW1000_readReg+0xc0>)
  40379e:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  4037a0:	f1ba 0f01 	cmp.w	sl, #1
  4037a4:	d40f      	bmi.n	4037c6 <DW1000_readReg+0x92>
  4037a6:	4631      	mov	r1, r6
  4037a8:	4456      	add	r6, sl
  4037aa:	2200      	movs	r2, #0
  4037ac:	2300      	movs	r3, #0
		result = (result << 8) | data[i];
  4037ae:	021d      	lsls	r5, r3, #8
  4037b0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
  4037b4:	0214      	lsls	r4, r2, #8
  4037b6:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
  4037ba:	2300      	movs	r3, #0
  4037bc:	4322      	orrs	r2, r4
  4037be:	432b      	orrs	r3, r5
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  4037c0:	428e      	cmp	r6, r1
  4037c2:	d1f4      	bne.n	4037ae <DW1000_readReg+0x7a>
  4037c4:	e001      	b.n	4037ca <DW1000_readReg+0x96>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  4037c6:	2200      	movs	r2, #0
  4037c8:	2300      	movs	r3, #0
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}
	return result;
  4037ca:	4610      	mov	r0, r2
  4037cc:	4619      	mov	r1, r3
  4037ce:	e00a      	b.n	4037e6 <DW1000_readReg+0xb2>
	uint64_t result = 0;
	int i;

	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  4037d0:	2000      	movs	r0, #0
  4037d2:	4601      	mov	r1, r0
  4037d4:	e007      	b.n	4037e6 <DW1000_readReg+0xb2>
  4037d6:	607e      	str	r6, [r7, #4]
  4037d8:	469a      	mov	sl, r3
  4037da:	f107 090c 	add.w	r9, r7, #12
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  4037de:	f04f 0800 	mov.w	r8, #0
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	for(int i = 0;i<headerLen;i++) qspi_write(QSPI,header+i,1);
  4037e2:	4e05      	ldr	r6, [pc, #20]	; (4037f8 <DW1000_readReg+0xc4>)
  4037e4:	e7cc      	b.n	403780 <DW1000_readReg+0x4c>
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}
	return result;
}
  4037e6:	371c      	adds	r7, #28
  4037e8:	46bd      	mov	sp, r7
  4037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4037ee:	bf00      	nop
  4037f0:	4007c000 	.word	0x4007c000
  4037f4:	00400795 	.word	0x00400795
  4037f8:	00400885 	.word	0x00400885

004037fc <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  4037fc:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  4037fe:	2000      	movs	r0, #0
  403800:	4601      	mov	r1, r0
  403802:	4602      	mov	r2, r0
  403804:	2304      	movs	r3, #4
  403806:	4c01      	ldr	r4, [pc, #4]	; (40380c <DW1000_readDeviceIdentifier+0x10>)
  403808:	47a0      	blx	r4
	return result;
}
  40380a:	bd10      	pop	{r4, pc}
  40380c:	00403735 	.word	0x00403735

00403810 <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  403810:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  403812:	200f      	movs	r0, #15
  403814:	2100      	movs	r1, #0
  403816:	460a      	mov	r2, r1
  403818:	2305      	movs	r3, #5
  40381a:	4c03      	ldr	r4, [pc, #12]	; (403828 <DW1000_readSystemStatus+0x18>)
  40381c:	47a0      	blx	r4
  40381e:	4b03      	ldr	r3, [pc, #12]	; (40382c <DW1000_readSystemStatus+0x1c>)
  403820:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  403822:	17c1      	asrs	r1, r0, #31
  403824:	bd10      	pop	{r4, pc}
  403826:	bf00      	nop
  403828:	00403735 	.word	0x00403735
  40382c:	2040c5e4 	.word	0x2040c5e4

00403830 <DW1000_writeReg>:
		result = (result << 8) | data[i];
	}
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  403830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403834:	b087      	sub	sp, #28
  403836:	af00      	add	r7, sp, #0
  403838:	60f8      	str	r0, [r7, #12]
  40383a:	60b9      	str	r1, [r7, #8]
  40383c:	4615      	mov	r5, r2
  40383e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  403842:	6cbc      	ldr	r4, [r7, #72]	; 0x48
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
  403844:	1de3      	adds	r3, r4, #7
  403846:	f023 0307 	bic.w	r3, r3, #7
  40384a:	ebad 0d03 	sub.w	sp, sp, r3
  40384e:	f8c7 d004 	str.w	sp, [r7, #4]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  403852:	2c00      	cmp	r4, #0
  403854:	dd25      	ble.n	4038a2 <DW1000_writeReg+0x72>
  403856:	eb0d 0b04 	add.w	fp, sp, r4
  40385a:	2600      	movs	r6, #0
  40385c:	22ff      	movs	r2, #255	; 0xff
  40385e:	2300      	movs	r3, #0
  403860:	46ee      	mov	lr, sp
  403862:	46dc      	mov	ip, fp
  403864:	46c2      	mov	sl, r8
  403866:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  403868:	ea02 080a 	and.w	r8, r2, sl
  40386c:	ea03 090b 	and.w	r9, r3, fp
  403870:	f1c6 0020 	rsb	r0, r6, #32
  403874:	f1a6 0120 	sub.w	r1, r6, #32
  403878:	fa28 f806 	lsr.w	r8, r8, r6
  40387c:	fa09 f000 	lsl.w	r0, r9, r0
  403880:	ea48 0800 	orr.w	r8, r8, r0
  403884:	fa29 f101 	lsr.w	r1, r9, r1
  403888:	ea48 0801 	orr.w	r8, r8, r1
  40388c:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  403890:	0219      	lsls	r1, r3, #8
  403892:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
  403896:	0210      	lsls	r0, r2, #8
  403898:	4602      	mov	r2, r0
  40389a:	460b      	mov	r3, r1
  40389c:	3608      	adds	r6, #8
	int i;											// Counter

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  40389e:	45e6      	cmp	lr, ip
  4038a0:	d1e2      	bne.n	403868 <DW1000_writeReg+0x38>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  4038a2:	68bb      	ldr	r3, [r7, #8]
  4038a4:	b92b      	cbnz	r3, 4038b2 <DW1000_writeReg+0x82>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  4038a6:	68fb      	ldr	r3, [r7, #12]
  4038a8:	f063 007f 	orn	r0, r3, #127	; 0x7f
  4038ac:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  4038ae:	2201      	movs	r2, #1
  4038b0:	e00f      	b.n	4038d2 <DW1000_writeReg+0xa2>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  4038b2:	68fb      	ldr	r3, [r7, #12]
  4038b4:	f063 003f 	orn	r0, r3, #63	; 0x3f
  4038b8:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  4038ba:	2d7f      	cmp	r5, #127	; 0x7f
  4038bc:	d802      	bhi.n	4038c4 <DW1000_writeReg+0x94>
    		header[1] = offset;						
  4038be:	757d      	strb	r5, [r7, #21]
    		headerLen = 2;
  4038c0:	2202      	movs	r2, #2
  4038c2:	e006      	b.n	4038d2 <DW1000_writeReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  4038c4:	f065 037f 	orn	r3, r5, #127	; 0x7f
  4038c8:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  4038ca:	f3c5 12c7 	ubfx	r2, r5, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  4038ce:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  4038d0:	2203      	movs	r2, #3
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
  4038d2:	4916      	ldr	r1, [pc, #88]	; (40392c <DW1000_writeReg+0xfc>)
  4038d4:	690b      	ldr	r3, [r1, #16]
  4038d6:	f013 0f04 	tst.w	r3, #4
  4038da:	d0fb      	beq.n	4038d4 <DW1000_writeReg+0xa4>
	for(int i = 0;i<headerLen;i++){
  4038dc:	b17a      	cbz	r2, 4038fe <DW1000_writeReg+0xce>
  4038de:	f107 0614 	add.w	r6, r7, #20
  4038e2:	eb06 0802 	add.w	r8, r6, r2
		 qspi_write(QSPI,header+i,1);
  4038e6:	f8df b044 	ldr.w	fp, [pc, #68]	; 40392c <DW1000_writeReg+0xfc>
  4038ea:	f04f 0a01 	mov.w	sl, #1
  4038ee:	4d10      	ldr	r5, [pc, #64]	; (403930 <DW1000_writeReg+0x100>)
  4038f0:	4658      	mov	r0, fp
  4038f2:	4631      	mov	r1, r6
  4038f4:	4652      	mov	r2, sl
  4038f6:	47a8      	blx	r5
  4038f8:	3601      	adds	r6, #1
    		header[2] = sub2;
    		headerLen = 3;
    	}
    }
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
  4038fa:	4546      	cmp	r6, r8
  4038fc:	d1f8      	bne.n	4038f0 <DW1000_writeReg+0xc0>
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  4038fe:	2c00      	cmp	r4, #0
  403900:	dd0f      	ble.n	403922 <DW1000_writeReg+0xf2>
  403902:	687b      	ldr	r3, [r7, #4]
  403904:	461e      	mov	r6, r3
  403906:	4423      	add	r3, r4
  403908:	461c      	mov	r4, r3
	{
		 qspi_write(QSPI,data+i,1);
  40390a:	f8df 9020 	ldr.w	r9, [pc, #32]	; 40392c <DW1000_writeReg+0xfc>
  40390e:	f04f 0801 	mov.w	r8, #1
  403912:	4d07      	ldr	r5, [pc, #28]	; (403930 <DW1000_writeReg+0x100>)
  403914:	4648      	mov	r0, r9
  403916:	4631      	mov	r1, r6
  403918:	4642      	mov	r2, r8
  40391a:	47a8      	blx	r5
  40391c:	3601      	adds	r6, #1
	while(!(QSPI->QSPI_SR & QSPI_SR_TXEMPTY));
	for(int i = 0;i<headerLen;i++){
		 qspi_write(QSPI,header+i,1);
	}
	
	for(int i = 0;i<n;i++)
  40391e:	42a6      	cmp	r6, r4
  403920:	d1f8      	bne.n	403914 <DW1000_writeReg+0xe4>
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  403922:	371c      	adds	r7, #28
  403924:	46bd      	mov	sp, r7
  403926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40392a:	bf00      	nop
  40392c:	4007c000 	.word	0x4007c000
  403930:	00400885 	.word	0x00400885

00403934 <DW1000_toggleGPIO_MODE>:

void DW1000_setSystemConfig(uint64_t buffer) {
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}

void DW1000_toggleGPIO_MODE() {
  403934:	b530      	push	{r4, r5, lr}
  403936:	b085      	sub	sp, #20
	 DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x001540, GPIO_MODE_LEN);
  403938:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  40393c:	2300      	movs	r3, #0
  40393e:	e9cd 2300 	strd	r2, r3, [sp]
  403942:	2504      	movs	r5, #4
  403944:	9502      	str	r5, [sp, #8]
  403946:	2026      	movs	r0, #38	; 0x26
  403948:	2101      	movs	r1, #1
  40394a:	2200      	movs	r2, #0
  40394c:	4c06      	ldr	r4, [pc, #24]	; (403968 <DW1000_toggleGPIO_MODE+0x34>)
  40394e:	47a0      	blx	r4
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x00000120, PMSC_LEDC_LEN);
  403950:	f44f 7290 	mov.w	r2, #288	; 0x120
  403954:	2300      	movs	r3, #0
  403956:	e9cd 2300 	strd	r2, r3, [sp]
  40395a:	9502      	str	r5, [sp, #8]
  40395c:	2036      	movs	r0, #54	; 0x36
  40395e:	2101      	movs	r1, #1
  403960:	2228      	movs	r2, #40	; 0x28
  403962:	47a0      	blx	r4
}
  403964:	b005      	add	sp, #20
  403966:	bd30      	pop	{r4, r5, pc}
  403968:	00403831 	.word	0x00403831

0040396c <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  40396c:	b500      	push	{lr}
  40396e:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403970:	17c1      	asrs	r1, r0, #31
  403972:	e9cd 0100 	strd	r0, r1, [sp]
  403976:	2305      	movs	r3, #5
  403978:	9302      	str	r3, [sp, #8]
  40397a:	2008      	movs	r0, #8
  40397c:	2100      	movs	r1, #0
  40397e:	460a      	mov	r2, r1
  403980:	4b02      	ldr	r3, [pc, #8]	; (40398c <DW1000_setTxFrameControl+0x20>)
  403982:	4798      	blx	r3
}
  403984:	b005      	add	sp, #20
  403986:	f85d fb04 	ldr.w	pc, [sp], #4
  40398a:	bf00      	nop
  40398c:	00403831 	.word	0x00403831

00403990 <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403990:	b510      	push	{r4, lr}
  403992:	b084      	sub	sp, #16
  403994:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  403996:	e9cd 2300 	strd	r2, r3, [sp]
  40399a:	9b06      	ldr	r3, [sp, #24]
  40399c:	9302      	str	r3, [sp, #8]
  40399e:	2009      	movs	r0, #9
  4039a0:	2101      	movs	r1, #1
  4039a2:	4622      	mov	r2, r4
  4039a4:	4b01      	ldr	r3, [pc, #4]	; (4039ac <DW1000_writeTxBuffer+0x1c>)
  4039a6:	4798      	blx	r3
}
  4039a8:	b004      	add	sp, #16
  4039aa:	bd10      	pop	{r4, pc}
  4039ac:	00403831 	.word	0x00403831

004039b0 <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  4039b0:	b500      	push	{lr}
  4039b2:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  4039b4:	2202      	movs	r2, #2
  4039b6:	2300      	movs	r3, #0
  4039b8:	e9cd 2300 	strd	r2, r3, [sp]
  4039bc:	2304      	movs	r3, #4
  4039be:	9302      	str	r3, [sp, #8]
  4039c0:	200d      	movs	r0, #13
  4039c2:	2100      	movs	r1, #0
  4039c4:	460a      	mov	r2, r1
  4039c6:	4b02      	ldr	r3, [pc, #8]	; (4039d0 <DW1000_startTx+0x20>)
  4039c8:	4798      	blx	r3
}
  4039ca:	b005      	add	sp, #20
  4039cc:	f85d fb04 	ldr.w	pc, [sp], #4
  4039d0:	00403831 	.word	0x00403831
  4039d4:	00000000 	.word	0x00000000

004039d8 <standUp>:
*  Author: to300
*/
#include "Gait.h"

//Stand up
void standUp( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  4039d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039dc:	ed2d 8b02 	vpush	{d8}
  4039e0:	b08d      	sub	sp, #52	; 0x34
  4039e2:	460e      	mov	r6, r1
  4039e4:	4614      	mov	r4, r2
  4039e6:	461f      	mov	r7, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  4039e8:	edd3 7a02 	vldr	s15, [r3, #8]
  4039ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4039f0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  4039f4:	2500      	movs	r5, #0
  4039f6:	9500      	str	r5, [sp, #0]
  4039f8:	9501      	str	r5, [sp, #4]
  4039fa:	2301      	movs	r3, #1
  4039fc:	9302      	str	r3, [sp, #8]
  4039fe:	9503      	str	r5, [sp, #12]
  403a00:	4640      	mov	r0, r8
  403a02:	ee17 1a90 	vmov	r1, s15
  403a06:	462a      	mov	r2, r5
  403a08:	ee17 3a90 	vmov	r3, s15
  403a0c:	f8df 9370 	ldr.w	r9, [pc, #880]	; 403d80 <standUp+0x3a8>
  403a10:	47c8      	blx	r9
  403a12:	e898 0003 	ldmia.w	r8, {r0, r1}
  403a16:	e886 0003 	stmia.w	r6, {r0, r1}
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403a1a:	edd7 7a02 	vldr	s15, [r7, #8]
  403a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403a22:	9500      	str	r5, [sp, #0]
  403a24:	9501      	str	r5, [sp, #4]
  403a26:	2300      	movs	r3, #0
  403a28:	9302      	str	r3, [sp, #8]
  403a2a:	9503      	str	r5, [sp, #12]
  403a2c:	4640      	mov	r0, r8
  403a2e:	ee17 1a90 	vmov	r1, s15
  403a32:	462a      	mov	r2, r5
  403a34:	ee17 3a90 	vmov	r3, s15
  403a38:	47c8      	blx	r9
  403a3a:	f106 0308 	add.w	r3, r6, #8
  403a3e:	e898 0003 	ldmia.w	r8, {r0, r1}
  403a42:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403a46:	edd7 7a02 	vldr	s15, [r7, #8]
  403a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403a4e:	9500      	str	r5, [sp, #0]
  403a50:	9501      	str	r5, [sp, #4]
  403a52:	2301      	movs	r3, #1
  403a54:	9302      	str	r3, [sp, #8]
  403a56:	9503      	str	r5, [sp, #12]
  403a58:	4640      	mov	r0, r8
  403a5a:	ee17 1a90 	vmov	r1, s15
  403a5e:	462a      	mov	r2, r5
  403a60:	ee17 3a90 	vmov	r3, s15
  403a64:	47c8      	blx	r9
  403a66:	f106 0310 	add.w	r3, r6, #16
  403a6a:	e898 0003 	ldmia.w	r8, {r0, r1}
  403a6e:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403a72:	edd7 7a02 	vldr	s15, [r7, #8]
  403a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403a7a:	9500      	str	r5, [sp, #0]
  403a7c:	9501      	str	r5, [sp, #4]
  403a7e:	2300      	movs	r3, #0
  403a80:	9302      	str	r3, [sp, #8]
  403a82:	9503      	str	r5, [sp, #12]
  403a84:	4640      	mov	r0, r8
  403a86:	ee17 1a90 	vmov	r1, s15
  403a8a:	462a      	mov	r2, r5
  403a8c:	ee17 3a90 	vmov	r3, s15
  403a90:	47c8      	blx	r9
  403a92:	f106 0318 	add.w	r3, r6, #24
  403a96:	e898 0003 	ldmia.w	r8, {r0, r1}
  403a9a:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403a9e:	edd7 7a02 	vldr	s15, [r7, #8]
  403aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403aa6:	9500      	str	r5, [sp, #0]
  403aa8:	9501      	str	r5, [sp, #4]
  403aaa:	2301      	movs	r3, #1
  403aac:	9302      	str	r3, [sp, #8]
  403aae:	9503      	str	r5, [sp, #12]
  403ab0:	4640      	mov	r0, r8
  403ab2:	ee17 1a90 	vmov	r1, s15
  403ab6:	462a      	mov	r2, r5
  403ab8:	ee17 3a90 	vmov	r3, s15
  403abc:	47c8      	blx	r9
  403abe:	f106 0320 	add.w	r3, r6, #32
  403ac2:	e898 0003 	ldmia.w	r8, {r0, r1}
  403ac6:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403aca:	edd7 7a02 	vldr	s15, [r7, #8]
  403ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403ad2:	9500      	str	r5, [sp, #0]
  403ad4:	9501      	str	r5, [sp, #4]
  403ad6:	2300      	movs	r3, #0
  403ad8:	9302      	str	r3, [sp, #8]
  403ada:	9503      	str	r5, [sp, #12]
  403adc:	4640      	mov	r0, r8
  403ade:	ee17 1a90 	vmov	r1, s15
  403ae2:	462a      	mov	r2, r5
  403ae4:	ee17 3a90 	vmov	r3, s15
  403ae8:	47c8      	blx	r9
  403aea:	f106 0328 	add.w	r3, r6, #40	; 0x28
  403aee:	e898 0003 	ldmia.w	r8, {r0, r1}
  403af2:	e883 0003 	stmia.w	r3, {r0, r1}

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[0].Z);
  403af6:	ed96 8a00 	vldr	s16, [r6]
  403afa:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  403afe:	68f8      	ldr	r0, [r7, #12]
  403b00:	ebc0 000b 	rsb	r0, r0, fp
  403b04:	4b98      	ldr	r3, [pc, #608]	; (403d68 <standUp+0x390>)
  403b06:	4798      	blx	r3
  403b08:	4680      	mov	r8, r0
  403b0a:	4689      	mov	r9, r1
  403b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403b14:	ee17 0a90 	vmov	r0, s15
  403b18:	4b94      	ldr	r3, [pc, #592]	; (403d6c <standUp+0x394>)
  403b1a:	4798      	blx	r3
  403b1c:	2200      	movs	r2, #0
  403b1e:	4b94      	ldr	r3, [pc, #592]	; (403d70 <standUp+0x398>)
  403b20:	4d94      	ldr	r5, [pc, #592]	; (403d74 <standUp+0x39c>)
  403b22:	47a8      	blx	r5
  403b24:	4602      	mov	r2, r0
  403b26:	460b      	mov	r3, r1
  403b28:	4640      	mov	r0, r8
  403b2a:	4649      	mov	r1, r9
  403b2c:	4d92      	ldr	r5, [pc, #584]	; (403d78 <standUp+0x3a0>)
  403b2e:	47a8      	blx	r5
  403b30:	f8df a250 	ldr.w	sl, [pc, #592]	; 403d84 <standUp+0x3ac>
  403b34:	a38a      	add	r3, pc, #552	; (adr r3, 403d60 <standUp+0x388>)
  403b36:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b3a:	47d0      	blx	sl
  403b3c:	f8df 9248 	ldr.w	r9, [pc, #584]	; 403d88 <standUp+0x3b0>
  403b40:	47c8      	blx	r9
  403b42:	4602      	mov	r2, r0
  403b44:	a806      	add	r0, sp, #24
  403b46:	ee18 1a10 	vmov	r1, s16
  403b4a:	6873      	ldr	r3, [r6, #4]
  403b4c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 403d8c <standUp+0x3b4>
  403b50:	47c0      	blx	r8
  403b52:	ab06      	add	r3, sp, #24
  403b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403b58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[1].Z);
  403b5c:	ed96 8a02 	vldr	s16, [r6, #8]
  403b60:	68f8      	ldr	r0, [r7, #12]
  403b62:	ebc0 000b 	rsb	r0, r0, fp
  403b66:	4b80      	ldr	r3, [pc, #512]	; (403d68 <standUp+0x390>)
  403b68:	4798      	blx	r3
  403b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403b6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403b76:	ee17 0a90 	vmov	r0, s15
  403b7a:	4b7c      	ldr	r3, [pc, #496]	; (403d6c <standUp+0x394>)
  403b7c:	4798      	blx	r3
  403b7e:	2200      	movs	r2, #0
  403b80:	4b7b      	ldr	r3, [pc, #492]	; (403d70 <standUp+0x398>)
  403b82:	4d7c      	ldr	r5, [pc, #496]	; (403d74 <standUp+0x39c>)
  403b84:	47a8      	blx	r5
  403b86:	4602      	mov	r2, r0
  403b88:	460b      	mov	r3, r1
  403b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b8e:	4d7a      	ldr	r5, [pc, #488]	; (403d78 <standUp+0x3a0>)
  403b90:	47a8      	blx	r5
  403b92:	a373      	add	r3, pc, #460	; (adr r3, 403d60 <standUp+0x388>)
  403b94:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b98:	47d0      	blx	sl
  403b9a:	47c8      	blx	r9
  403b9c:	4602      	mov	r2, r0
  403b9e:	a806      	add	r0, sp, #24
  403ba0:	ee18 1a10 	vmov	r1, s16
  403ba4:	68f3      	ldr	r3, [r6, #12]
  403ba6:	47c0      	blx	r8
  403ba8:	f104 030c 	add.w	r3, r4, #12
  403bac:	aa06      	add	r2, sp, #24
  403bae:	ca07      	ldmia	r2, {r0, r1, r2}
  403bb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[2].Z);
  403bb4:	ed96 8a04 	vldr	s16, [r6, #16]
  403bb8:	68f8      	ldr	r0, [r7, #12]
  403bba:	ebc0 000b 	rsb	r0, r0, fp
  403bbe:	4b6a      	ldr	r3, [pc, #424]	; (403d68 <standUp+0x390>)
  403bc0:	4798      	blx	r3
  403bc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403bc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403bce:	ee17 0a90 	vmov	r0, s15
  403bd2:	4b66      	ldr	r3, [pc, #408]	; (403d6c <standUp+0x394>)
  403bd4:	4798      	blx	r3
  403bd6:	2200      	movs	r2, #0
  403bd8:	4b65      	ldr	r3, [pc, #404]	; (403d70 <standUp+0x398>)
  403bda:	4d66      	ldr	r5, [pc, #408]	; (403d74 <standUp+0x39c>)
  403bdc:	47a8      	blx	r5
  403bde:	4602      	mov	r2, r0
  403be0:	460b      	mov	r3, r1
  403be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403be6:	4d64      	ldr	r5, [pc, #400]	; (403d78 <standUp+0x3a0>)
  403be8:	47a8      	blx	r5
  403bea:	a35d      	add	r3, pc, #372	; (adr r3, 403d60 <standUp+0x388>)
  403bec:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bf0:	47d0      	blx	sl
  403bf2:	47c8      	blx	r9
  403bf4:	4602      	mov	r2, r0
  403bf6:	a806      	add	r0, sp, #24
  403bf8:	ee18 1a10 	vmov	r1, s16
  403bfc:	6973      	ldr	r3, [r6, #20]
  403bfe:	47c0      	blx	r8
  403c00:	f104 0318 	add.w	r3, r4, #24
  403c04:	aa06      	add	r2, sp, #24
  403c06:	ca07      	ldmia	r2, {r0, r1, r2}
  403c08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[3].Z);
  403c0c:	ed96 8a06 	vldr	s16, [r6, #24]
  403c10:	68f8      	ldr	r0, [r7, #12]
  403c12:	ebc0 000b 	rsb	r0, r0, fp
  403c16:	4b54      	ldr	r3, [pc, #336]	; (403d68 <standUp+0x390>)
  403c18:	4798      	blx	r3
  403c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403c1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403c26:	ee17 0a90 	vmov	r0, s15
  403c2a:	4b50      	ldr	r3, [pc, #320]	; (403d6c <standUp+0x394>)
  403c2c:	4798      	blx	r3
  403c2e:	2200      	movs	r2, #0
  403c30:	4b4f      	ldr	r3, [pc, #316]	; (403d70 <standUp+0x398>)
  403c32:	4d50      	ldr	r5, [pc, #320]	; (403d74 <standUp+0x39c>)
  403c34:	47a8      	blx	r5
  403c36:	4602      	mov	r2, r0
  403c38:	460b      	mov	r3, r1
  403c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c3e:	4d4e      	ldr	r5, [pc, #312]	; (403d78 <standUp+0x3a0>)
  403c40:	47a8      	blx	r5
  403c42:	a347      	add	r3, pc, #284	; (adr r3, 403d60 <standUp+0x388>)
  403c44:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c48:	47d0      	blx	sl
  403c4a:	47c8      	blx	r9
  403c4c:	4602      	mov	r2, r0
  403c4e:	a806      	add	r0, sp, #24
  403c50:	ee18 1a10 	vmov	r1, s16
  403c54:	69f3      	ldr	r3, [r6, #28]
  403c56:	47c0      	blx	r8
  403c58:	f104 0324 	add.w	r3, r4, #36	; 0x24
  403c5c:	aa06      	add	r2, sp, #24
  403c5e:	ca07      	ldmia	r2, {r0, r1, r2}
  403c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[4].Z);
  403c64:	ed96 8a08 	vldr	s16, [r6, #32]
  403c68:	68f8      	ldr	r0, [r7, #12]
  403c6a:	ebc0 000b 	rsb	r0, r0, fp
  403c6e:	4b3e      	ldr	r3, [pc, #248]	; (403d68 <standUp+0x390>)
  403c70:	4798      	blx	r3
  403c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403c76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403c7e:	ee17 0a90 	vmov	r0, s15
  403c82:	4b3a      	ldr	r3, [pc, #232]	; (403d6c <standUp+0x394>)
  403c84:	4798      	blx	r3
  403c86:	2200      	movs	r2, #0
  403c88:	4b39      	ldr	r3, [pc, #228]	; (403d70 <standUp+0x398>)
  403c8a:	4d3a      	ldr	r5, [pc, #232]	; (403d74 <standUp+0x39c>)
  403c8c:	47a8      	blx	r5
  403c8e:	4602      	mov	r2, r0
  403c90:	460b      	mov	r3, r1
  403c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403c96:	4d38      	ldr	r5, [pc, #224]	; (403d78 <standUp+0x3a0>)
  403c98:	47a8      	blx	r5
  403c9a:	a331      	add	r3, pc, #196	; (adr r3, 403d60 <standUp+0x388>)
  403c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ca0:	47d0      	blx	sl
  403ca2:	47c8      	blx	r9
  403ca4:	4602      	mov	r2, r0
  403ca6:	a806      	add	r0, sp, #24
  403ca8:	ee18 1a10 	vmov	r1, s16
  403cac:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403cae:	47c0      	blx	r8
  403cb0:	f104 0330 	add.w	r3, r4, #48	; 0x30
  403cb4:	aa06      	add	r2, sp, #24
  403cb6:	ca07      	ldmia	r2, {r0, r1, r2}
  403cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((float)hexabot_walk->i/STAND_UP_TIME) ,xzS[5].Z);
  403cbc:	ed96 8a0a 	vldr	s16, [r6, #40]	; 0x28
  403cc0:	68f8      	ldr	r0, [r7, #12]
  403cc2:	ebc0 000b 	rsb	r0, r0, fp
  403cc6:	4b28      	ldr	r3, [pc, #160]	; (403d68 <standUp+0x390>)
  403cc8:	4798      	blx	r3
  403cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
  403cd0:	ee07 0a90 	vmov	s15, r0
  403cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403cd8:	ee17 0a90 	vmov	r0, s15
  403cdc:	4b23      	ldr	r3, [pc, #140]	; (403d6c <standUp+0x394>)
  403cde:	4798      	blx	r3
  403ce0:	2200      	movs	r2, #0
  403ce2:	4b23      	ldr	r3, [pc, #140]	; (403d70 <standUp+0x398>)
  403ce4:	4d23      	ldr	r5, [pc, #140]	; (403d74 <standUp+0x39c>)
  403ce6:	47a8      	blx	r5
  403ce8:	4602      	mov	r2, r0
  403cea:	460b      	mov	r3, r1
  403cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403cf0:	4d21      	ldr	r5, [pc, #132]	; (403d78 <standUp+0x3a0>)
  403cf2:	47a8      	blx	r5
  403cf4:	a31a      	add	r3, pc, #104	; (adr r3, 403d60 <standUp+0x388>)
  403cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403cfa:	47d0      	blx	sl
  403cfc:	47c8      	blx	r9
  403cfe:	4602      	mov	r2, r0
  403d00:	a806      	add	r0, sp, #24
  403d02:	ee18 1a10 	vmov	r1, s16
  403d06:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  403d08:	47c0      	blx	r8
  403d0a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
  403d0e:	aa06      	add	r2, sp, #24
  403d10:	ca07      	ldmia	r2, {r0, r1, r2}
  403d12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  403d16:	2000      	movs	r0, #0
  403d18:	6821      	ldr	r1, [r4, #0]
  403d1a:	6862      	ldr	r2, [r4, #4]
  403d1c:	68a3      	ldr	r3, [r4, #8]
  403d1e:	4d17      	ldr	r5, [pc, #92]	; (403d7c <standUp+0x3a4>)
  403d20:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  403d22:	2001      	movs	r0, #1
  403d24:	68e1      	ldr	r1, [r4, #12]
  403d26:	6922      	ldr	r2, [r4, #16]
  403d28:	6963      	ldr	r3, [r4, #20]
  403d2a:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  403d2c:	2002      	movs	r0, #2
  403d2e:	69a1      	ldr	r1, [r4, #24]
  403d30:	69e2      	ldr	r2, [r4, #28]
  403d32:	6a23      	ldr	r3, [r4, #32]
  403d34:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  403d36:	2003      	movs	r0, #3
  403d38:	6a61      	ldr	r1, [r4, #36]	; 0x24
  403d3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403d3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403d3e:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  403d40:	2004      	movs	r0, #4
  403d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403d44:	6b62      	ldr	r2, [r4, #52]	; 0x34
  403d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403d48:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  403d4a:	2005      	movs	r0, #5
  403d4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  403d4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  403d50:	6c63      	ldr	r3, [r4, #68]	; 0x44
  403d52:	47a8      	blx	r5
}
  403d54:	b00d      	add	sp, #52	; 0x34
  403d56:	ecbd 8b02 	vpop	{d8}
  403d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d5e:	bf00      	nop
  403d60:	00000000 	.word	0x00000000
  403d64:	4052c000 	.word	0x4052c000
  403d68:	0040a43d 	.word	0x0040a43d
  403d6c:	0040a461 	.word	0x0040a461
  403d70:	40590000 	.word	0x40590000
  403d74:	0040a75d 	.word	0x0040a75d
  403d78:	0040a509 	.word	0x0040a509
  403d7c:	00405c0d 	.word	0x00405c0d
  403d80:	004057e1 	.word	0x004057e1
  403d84:	0040a1a5 	.word	0x0040a1a5
  403d88:	0040aa8d 	.word	0x0040aa8d
  403d8c:	00405a11 	.word	0x00405a11

00403d90 <sitDown>:

void sitDown( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  403d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d94:	ed2d 8b02 	vpush	{d8}
  403d98:	b08d      	sub	sp, #52	; 0x34
  403d9a:	460e      	mov	r6, r1
  403d9c:	4614      	mov	r4, r2
  403d9e:	461f      	mov	r7, r3
	xzS[0] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403da0:	edd3 7a02 	vldr	s15, [r3, #8]
  403da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403da8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  403dac:	2500      	movs	r5, #0
  403dae:	9500      	str	r5, [sp, #0]
  403db0:	9501      	str	r5, [sp, #4]
  403db2:	2301      	movs	r3, #1
  403db4:	9302      	str	r3, [sp, #8]
  403db6:	9503      	str	r5, [sp, #12]
  403db8:	4640      	mov	r0, r8
  403dba:	ee17 1a90 	vmov	r1, s15
  403dbe:	462a      	mov	r2, r5
  403dc0:	ee17 3a90 	vmov	r3, s15
  403dc4:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 404174 <sitDown+0x3e4>
  403dc8:	47c8      	blx	r9
  403dca:	e898 0003 	ldmia.w	r8, {r0, r1}
  403dce:	e886 0003 	stmia.w	r6, {r0, r1}
	xzS[1] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403dd2:	edd7 7a02 	vldr	s15, [r7, #8]
  403dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403dda:	9500      	str	r5, [sp, #0]
  403ddc:	9501      	str	r5, [sp, #4]
  403dde:	2300      	movs	r3, #0
  403de0:	9302      	str	r3, [sp, #8]
  403de2:	9503      	str	r5, [sp, #12]
  403de4:	4640      	mov	r0, r8
  403de6:	ee17 1a90 	vmov	r1, s15
  403dea:	462a      	mov	r2, r5
  403dec:	ee17 3a90 	vmov	r3, s15
  403df0:	47c8      	blx	r9
  403df2:	f106 0308 	add.w	r3, r6, #8
  403df6:	e898 0003 	ldmia.w	r8, {r0, r1}
  403dfa:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[2] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403dfe:	edd7 7a02 	vldr	s15, [r7, #8]
  403e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e06:	9500      	str	r5, [sp, #0]
  403e08:	9501      	str	r5, [sp, #4]
  403e0a:	2301      	movs	r3, #1
  403e0c:	9302      	str	r3, [sp, #8]
  403e0e:	9503      	str	r5, [sp, #12]
  403e10:	4640      	mov	r0, r8
  403e12:	ee17 1a90 	vmov	r1, s15
  403e16:	462a      	mov	r2, r5
  403e18:	ee17 3a90 	vmov	r3, s15
  403e1c:	47c8      	blx	r9
  403e1e:	f106 0310 	add.w	r3, r6, #16
  403e22:	e898 0003 	ldmia.w	r8, {r0, r1}
  403e26:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[3] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403e2a:	edd7 7a02 	vldr	s15, [r7, #8]
  403e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e32:	9500      	str	r5, [sp, #0]
  403e34:	9501      	str	r5, [sp, #4]
  403e36:	2300      	movs	r3, #0
  403e38:	9302      	str	r3, [sp, #8]
  403e3a:	9503      	str	r5, [sp, #12]
  403e3c:	4640      	mov	r0, r8
  403e3e:	ee17 1a90 	vmov	r1, s15
  403e42:	462a      	mov	r2, r5
  403e44:	ee17 3a90 	vmov	r3, s15
  403e48:	47c8      	blx	r9
  403e4a:	f106 0318 	add.w	r3, r6, #24
  403e4e:	e898 0003 	ldmia.w	r8, {r0, r1}
  403e52:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[4] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,1,0);
  403e56:	edd7 7a02 	vldr	s15, [r7, #8]
  403e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e5e:	9500      	str	r5, [sp, #0]
  403e60:	9501      	str	r5, [sp, #4]
  403e62:	2301      	movs	r3, #1
  403e64:	9302      	str	r3, [sp, #8]
  403e66:	9503      	str	r5, [sp, #12]
  403e68:	4640      	mov	r0, r8
  403e6a:	ee17 1a90 	vmov	r1, s15
  403e6e:	462a      	mov	r2, r5
  403e70:	ee17 3a90 	vmov	r3, s15
  403e74:	47c8      	blx	r9
  403e76:	f106 0320 	add.w	r3, r6, #32
  403e7a:	e898 0003 	ldmia.w	r8, {r0, r1}
  403e7e:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[5] = calcRotation(hexabot_walk->stance, 0, hexabot_walk->stance, 0, 0,0,0);
  403e82:	edd7 7a02 	vldr	s15, [r7, #8]
  403e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e8a:	9500      	str	r5, [sp, #0]
  403e8c:	9501      	str	r5, [sp, #4]
  403e8e:	2300      	movs	r3, #0
  403e90:	9302      	str	r3, [sp, #8]
  403e92:	9503      	str	r5, [sp, #12]
  403e94:	4640      	mov	r0, r8
  403e96:	ee17 1a90 	vmov	r1, s15
  403e9a:	462a      	mov	r2, r5
  403e9c:	ee17 3a90 	vmov	r3, s15
  403ea0:	47c8      	blx	r9
  403ea2:	f106 0328 	add.w	r3, r6, #40	; 0x28
  403ea6:	e898 0003 	ldmia.w	r8, {r0, r1}
  403eaa:	e883 0003 	stmia.w	r3, {r0, r1}

	Ang[0] = legAngCalc(xzS[0].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[0].Z);
  403eae:	ed96 8a00 	vldr	s16, [r6]
  403eb2:	f06f 0b4a 	mvn.w	fp, #74	; 0x4a
  403eb6:	68f8      	ldr	r0, [r7, #12]
  403eb8:	ebc0 000b 	rsb	r0, r0, fp
  403ebc:	4ba6      	ldr	r3, [pc, #664]	; (404158 <sitDown+0x3c8>)
  403ebe:	4798      	blx	r3
  403ec0:	4680      	mov	r8, r0
  403ec2:	4689      	mov	r9, r1
  403ec4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403ecc:	ee17 0a90 	vmov	r0, s15
  403ed0:	4ba2      	ldr	r3, [pc, #648]	; (40415c <sitDown+0x3cc>)
  403ed2:	4798      	blx	r3
  403ed4:	4602      	mov	r2, r0
  403ed6:	460b      	mov	r3, r1
  403ed8:	2000      	movs	r0, #0
  403eda:	49a1      	ldr	r1, [pc, #644]	; (404160 <sitDown+0x3d0>)
  403edc:	4da1      	ldr	r5, [pc, #644]	; (404164 <sitDown+0x3d4>)
  403ede:	47a8      	blx	r5
  403ee0:	2200      	movs	r2, #0
  403ee2:	4b9f      	ldr	r3, [pc, #636]	; (404160 <sitDown+0x3d0>)
  403ee4:	4da0      	ldr	r5, [pc, #640]	; (404168 <sitDown+0x3d8>)
  403ee6:	47a8      	blx	r5
  403ee8:	4602      	mov	r2, r0
  403eea:	460b      	mov	r3, r1
  403eec:	4640      	mov	r0, r8
  403eee:	4649      	mov	r1, r9
  403ef0:	4d9e      	ldr	r5, [pc, #632]	; (40416c <sitDown+0x3dc>)
  403ef2:	47a8      	blx	r5
  403ef4:	f8df a280 	ldr.w	sl, [pc, #640]	; 404178 <sitDown+0x3e8>
  403ef8:	a395      	add	r3, pc, #596	; (adr r3, 404150 <sitDown+0x3c0>)
  403efa:	e9d3 2300 	ldrd	r2, r3, [r3]
  403efe:	47d0      	blx	sl
  403f00:	f8df 9278 	ldr.w	r9, [pc, #632]	; 40417c <sitDown+0x3ec>
  403f04:	47c8      	blx	r9
  403f06:	4602      	mov	r2, r0
  403f08:	a806      	add	r0, sp, #24
  403f0a:	ee18 1a10 	vmov	r1, s16
  403f0e:	6873      	ldr	r3, [r6, #4]
  403f10:	f8df 826c 	ldr.w	r8, [pc, #620]	; 404180 <sitDown+0x3f0>
  403f14:	47c0      	blx	r8
  403f16:	ab06      	add	r3, sp, #24
  403f18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403f1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ang[1] = legAngCalc(xzS[1].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[1].Z);
  403f20:	ed96 8a02 	vldr	s16, [r6, #8]
  403f24:	68f8      	ldr	r0, [r7, #12]
  403f26:	ebc0 000b 	rsb	r0, r0, fp
  403f2a:	4b8b      	ldr	r3, [pc, #556]	; (404158 <sitDown+0x3c8>)
  403f2c:	4798      	blx	r3
  403f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403f32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403f3a:	ee17 0a90 	vmov	r0, s15
  403f3e:	4b87      	ldr	r3, [pc, #540]	; (40415c <sitDown+0x3cc>)
  403f40:	4798      	blx	r3
  403f42:	4602      	mov	r2, r0
  403f44:	460b      	mov	r3, r1
  403f46:	2000      	movs	r0, #0
  403f48:	4985      	ldr	r1, [pc, #532]	; (404160 <sitDown+0x3d0>)
  403f4a:	4d86      	ldr	r5, [pc, #536]	; (404164 <sitDown+0x3d4>)
  403f4c:	47a8      	blx	r5
  403f4e:	2200      	movs	r2, #0
  403f50:	4b83      	ldr	r3, [pc, #524]	; (404160 <sitDown+0x3d0>)
  403f52:	4d85      	ldr	r5, [pc, #532]	; (404168 <sitDown+0x3d8>)
  403f54:	47a8      	blx	r5
  403f56:	4602      	mov	r2, r0
  403f58:	460b      	mov	r3, r1
  403f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403f5e:	4d83      	ldr	r5, [pc, #524]	; (40416c <sitDown+0x3dc>)
  403f60:	47a8      	blx	r5
  403f62:	a37b      	add	r3, pc, #492	; (adr r3, 404150 <sitDown+0x3c0>)
  403f64:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f68:	47d0      	blx	sl
  403f6a:	47c8      	blx	r9
  403f6c:	4602      	mov	r2, r0
  403f6e:	a806      	add	r0, sp, #24
  403f70:	ee18 1a10 	vmov	r1, s16
  403f74:	68f3      	ldr	r3, [r6, #12]
  403f76:	47c0      	blx	r8
  403f78:	f104 030c 	add.w	r3, r4, #12
  403f7c:	aa06      	add	r2, sp, #24
  403f7e:	ca07      	ldmia	r2, {r0, r1, r2}
  403f80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[2] = legAngCalc(xzS[2].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[2].Z);
  403f84:	ed96 8a04 	vldr	s16, [r6, #16]
  403f88:	68f8      	ldr	r0, [r7, #12]
  403f8a:	ebc0 000b 	rsb	r0, r0, fp
  403f8e:	4b72      	ldr	r3, [pc, #456]	; (404158 <sitDown+0x3c8>)
  403f90:	4798      	blx	r3
  403f92:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403f96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403f9e:	ee17 0a90 	vmov	r0, s15
  403fa2:	4b6e      	ldr	r3, [pc, #440]	; (40415c <sitDown+0x3cc>)
  403fa4:	4798      	blx	r3
  403fa6:	4602      	mov	r2, r0
  403fa8:	460b      	mov	r3, r1
  403faa:	2000      	movs	r0, #0
  403fac:	496c      	ldr	r1, [pc, #432]	; (404160 <sitDown+0x3d0>)
  403fae:	4d6d      	ldr	r5, [pc, #436]	; (404164 <sitDown+0x3d4>)
  403fb0:	47a8      	blx	r5
  403fb2:	2200      	movs	r2, #0
  403fb4:	4b6a      	ldr	r3, [pc, #424]	; (404160 <sitDown+0x3d0>)
  403fb6:	4d6c      	ldr	r5, [pc, #432]	; (404168 <sitDown+0x3d8>)
  403fb8:	47a8      	blx	r5
  403fba:	4602      	mov	r2, r0
  403fbc:	460b      	mov	r3, r1
  403fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403fc2:	4d6a      	ldr	r5, [pc, #424]	; (40416c <sitDown+0x3dc>)
  403fc4:	47a8      	blx	r5
  403fc6:	a362      	add	r3, pc, #392	; (adr r3, 404150 <sitDown+0x3c0>)
  403fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fcc:	47d0      	blx	sl
  403fce:	47c8      	blx	r9
  403fd0:	4602      	mov	r2, r0
  403fd2:	a806      	add	r0, sp, #24
  403fd4:	ee18 1a10 	vmov	r1, s16
  403fd8:	6973      	ldr	r3, [r6, #20]
  403fda:	47c0      	blx	r8
  403fdc:	f104 0318 	add.w	r3, r4, #24
  403fe0:	aa06      	add	r2, sp, #24
  403fe2:	ca07      	ldmia	r2, {r0, r1, r2}
  403fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[3] = legAngCalc(xzS[3].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[3].Z);
  403fe8:	ed96 8a06 	vldr	s16, [r6, #24]
  403fec:	68f8      	ldr	r0, [r7, #12]
  403fee:	ebc0 000b 	rsb	r0, r0, fp
  403ff2:	4b59      	ldr	r3, [pc, #356]	; (404158 <sitDown+0x3c8>)
  403ff4:	4798      	blx	r3
  403ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403ffa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  403ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404002:	ee17 0a90 	vmov	r0, s15
  404006:	4b55      	ldr	r3, [pc, #340]	; (40415c <sitDown+0x3cc>)
  404008:	4798      	blx	r3
  40400a:	4602      	mov	r2, r0
  40400c:	460b      	mov	r3, r1
  40400e:	2000      	movs	r0, #0
  404010:	4953      	ldr	r1, [pc, #332]	; (404160 <sitDown+0x3d0>)
  404012:	4d54      	ldr	r5, [pc, #336]	; (404164 <sitDown+0x3d4>)
  404014:	47a8      	blx	r5
  404016:	2200      	movs	r2, #0
  404018:	4b51      	ldr	r3, [pc, #324]	; (404160 <sitDown+0x3d0>)
  40401a:	4d53      	ldr	r5, [pc, #332]	; (404168 <sitDown+0x3d8>)
  40401c:	47a8      	blx	r5
  40401e:	4602      	mov	r2, r0
  404020:	460b      	mov	r3, r1
  404022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404026:	4d51      	ldr	r5, [pc, #324]	; (40416c <sitDown+0x3dc>)
  404028:	47a8      	blx	r5
  40402a:	a349      	add	r3, pc, #292	; (adr r3, 404150 <sitDown+0x3c0>)
  40402c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404030:	47d0      	blx	sl
  404032:	47c8      	blx	r9
  404034:	4602      	mov	r2, r0
  404036:	a806      	add	r0, sp, #24
  404038:	ee18 1a10 	vmov	r1, s16
  40403c:	69f3      	ldr	r3, [r6, #28]
  40403e:	47c0      	blx	r8
  404040:	f104 0324 	add.w	r3, r4, #36	; 0x24
  404044:	aa06      	add	r2, sp, #24
  404046:	ca07      	ldmia	r2, {r0, r1, r2}
  404048:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[4] = legAngCalc(xzS[4].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[4].Z);
  40404c:	ed96 8a08 	vldr	s16, [r6, #32]
  404050:	68f8      	ldr	r0, [r7, #12]
  404052:	ebc0 000b 	rsb	r0, r0, fp
  404056:	4b40      	ldr	r3, [pc, #256]	; (404158 <sitDown+0x3c8>)
  404058:	4798      	blx	r3
  40405a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40405e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  404062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404066:	ee17 0a90 	vmov	r0, s15
  40406a:	4b3c      	ldr	r3, [pc, #240]	; (40415c <sitDown+0x3cc>)
  40406c:	4798      	blx	r3
  40406e:	4602      	mov	r2, r0
  404070:	460b      	mov	r3, r1
  404072:	2000      	movs	r0, #0
  404074:	493a      	ldr	r1, [pc, #232]	; (404160 <sitDown+0x3d0>)
  404076:	4d3b      	ldr	r5, [pc, #236]	; (404164 <sitDown+0x3d4>)
  404078:	47a8      	blx	r5
  40407a:	2200      	movs	r2, #0
  40407c:	4b38      	ldr	r3, [pc, #224]	; (404160 <sitDown+0x3d0>)
  40407e:	4d3a      	ldr	r5, [pc, #232]	; (404168 <sitDown+0x3d8>)
  404080:	47a8      	blx	r5
  404082:	4602      	mov	r2, r0
  404084:	460b      	mov	r3, r1
  404086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40408a:	4d38      	ldr	r5, [pc, #224]	; (40416c <sitDown+0x3dc>)
  40408c:	47a8      	blx	r5
  40408e:	a330      	add	r3, pc, #192	; (adr r3, 404150 <sitDown+0x3c0>)
  404090:	e9d3 2300 	ldrd	r2, r3, [r3]
  404094:	47d0      	blx	sl
  404096:	47c8      	blx	r9
  404098:	4602      	mov	r2, r0
  40409a:	a806      	add	r0, sp, #24
  40409c:	ee18 1a10 	vmov	r1, s16
  4040a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4040a2:	47c0      	blx	r8
  4040a4:	f104 0330 	add.w	r3, r4, #48	; 0x30
  4040a8:	aa06      	add	r2, sp, #24
  4040aa:	ca07      	ldmia	r2, {r0, r1, r2}
  4040ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Ang[5] = legAngCalc(xzS[5].X, STAND_UP_START_HGT+(-hexabot_walk->hgt-STAND_UP_START_HGT)*((STAND_UP_TIME-(float)hexabot_walk->i)/STAND_UP_TIME) ,xzS[5].Z);
  4040b0:	ed96 8a0a 	vldr	s16, [r6, #40]	; 0x28
  4040b4:	68f8      	ldr	r0, [r7, #12]
  4040b6:	ebc0 000b 	rsb	r0, r0, fp
  4040ba:	4b27      	ldr	r3, [pc, #156]	; (404158 <sitDown+0x3c8>)
  4040bc:	4798      	blx	r3
  4040be:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4040c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4040c4:	ee07 0a90 	vmov	s15, r0
  4040c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4040cc:	ee17 0a90 	vmov	r0, s15
  4040d0:	4b22      	ldr	r3, [pc, #136]	; (40415c <sitDown+0x3cc>)
  4040d2:	4798      	blx	r3
  4040d4:	4602      	mov	r2, r0
  4040d6:	460b      	mov	r3, r1
  4040d8:	2000      	movs	r0, #0
  4040da:	4921      	ldr	r1, [pc, #132]	; (404160 <sitDown+0x3d0>)
  4040dc:	4d21      	ldr	r5, [pc, #132]	; (404164 <sitDown+0x3d4>)
  4040de:	47a8      	blx	r5
  4040e0:	2200      	movs	r2, #0
  4040e2:	4b1f      	ldr	r3, [pc, #124]	; (404160 <sitDown+0x3d0>)
  4040e4:	4d20      	ldr	r5, [pc, #128]	; (404168 <sitDown+0x3d8>)
  4040e6:	47a8      	blx	r5
  4040e8:	4602      	mov	r2, r0
  4040ea:	460b      	mov	r3, r1
  4040ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4040f0:	4d1e      	ldr	r5, [pc, #120]	; (40416c <sitDown+0x3dc>)
  4040f2:	47a8      	blx	r5
  4040f4:	a316      	add	r3, pc, #88	; (adr r3, 404150 <sitDown+0x3c0>)
  4040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040fa:	47d0      	blx	sl
  4040fc:	47c8      	blx	r9
  4040fe:	4602      	mov	r2, r0
  404100:	a806      	add	r0, sp, #24
  404102:	ee18 1a10 	vmov	r1, s16
  404106:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  404108:	47c0      	blx	r8
  40410a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
  40410e:	aa06      	add	r2, sp, #24
  404110:	ca07      	ldmia	r2, {r0, r1, r2}
  404112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	
	writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  404116:	2000      	movs	r0, #0
  404118:	6821      	ldr	r1, [r4, #0]
  40411a:	6862      	ldr	r2, [r4, #4]
  40411c:	68a3      	ldr	r3, [r4, #8]
  40411e:	4d14      	ldr	r5, [pc, #80]	; (404170 <sitDown+0x3e0>)
  404120:	47a8      	blx	r5
	writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  404122:	2001      	movs	r0, #1
  404124:	68e1      	ldr	r1, [r4, #12]
  404126:	6922      	ldr	r2, [r4, #16]
  404128:	6963      	ldr	r3, [r4, #20]
  40412a:	47a8      	blx	r5
	writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  40412c:	2002      	movs	r0, #2
  40412e:	69a1      	ldr	r1, [r4, #24]
  404130:	69e2      	ldr	r2, [r4, #28]
  404132:	6a23      	ldr	r3, [r4, #32]
  404134:	47a8      	blx	r5
	writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  404136:	2003      	movs	r0, #3
  404138:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40413a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40413c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40413e:	47a8      	blx	r5
	writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  404140:	2004      	movs	r0, #4
  404142:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404144:	6b62      	ldr	r2, [r4, #52]	; 0x34
  404146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404148:	47a8      	blx	r5
	writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  40414a:	2005      	movs	r0, #5
  40414c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  40414e:	e019      	b.n	404184 <sitDown+0x3f4>
  404150:	00000000 	.word	0x00000000
  404154:	4052c000 	.word	0x4052c000
  404158:	0040a43d 	.word	0x0040a43d
  40415c:	0040a461 	.word	0x0040a461
  404160:	40590000 	.word	0x40590000
  404164:	0040a1a1 	.word	0x0040a1a1
  404168:	0040a75d 	.word	0x0040a75d
  40416c:	0040a509 	.word	0x0040a509
  404170:	00405c0d 	.word	0x00405c0d
  404174:	004057e1 	.word	0x004057e1
  404178:	0040a1a5 	.word	0x0040a1a5
  40417c:	0040aa8d 	.word	0x0040aa8d
  404180:	00405a11 	.word	0x00405a11
  404184:	6c22      	ldr	r2, [r4, #64]	; 0x40
  404186:	6c63      	ldr	r3, [r4, #68]	; 0x44
  404188:	47a8      	blx	r5
}
  40418a:	b00d      	add	sp, #52	; 0x34
  40418c:	ecbd 8b02 	vpop	{d8}
  404190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404194:	0000      	movs	r0, r0
	...

00404198 <Gait0>:

//default, sinusoid based paten
void Gait0( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40419c:	ed2d 8b02 	vpush	{d8}
  4041a0:	b08f      	sub	sp, #60	; 0x3c
  4041a2:	4682      	mov	sl, r0
  4041a4:	460d      	mov	r5, r1
  4041a6:	9204      	str	r2, [sp, #16]
  4041a8:	461c      	mov	r4, r3

	ofst[0] = ((float)hexabot_walk->i+(0*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4041aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
  4041ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041b2:	ed9f 8ac1 	vldr	s16, [pc, #772]	; 4044b8 <Gait0+0x320>
  4041b6:	ee77 7a88 	vadd.f32	s15, s15, s16
  4041ba:	ed93 7a06 	vldr	s14, [r3, #24]
  4041be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4041c2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 4044d0 <Gait0+0x338>
  4041c6:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4041ca:	ee17 0a90 	vmov	r0, s15
  4041ce:	47c0      	blx	r8
  4041d0:	4fba      	ldr	r7, [pc, #744]	; (4044bc <Gait0+0x324>)
  4041d2:	4602      	mov	r2, r0
  4041d4:	460b      	mov	r3, r1
  4041d6:	47b8      	blx	r7
  4041d8:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 4044d4 <Gait0+0x33c>
  4041dc:	a3b4      	add	r3, pc, #720	; (adr r3, 4044b0 <Gait0+0x318>)
  4041de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041e2:	47d8      	blx	fp
  4041e4:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 4044d8 <Gait0+0x340>
  4041e8:	47c8      	blx	r9
  4041ea:	ee08 0a90 	vmov	s17, r0
  4041ee:	f8ca 0000 	str.w	r0, [sl]
	ofst[1] = ((float)hexabot_walk->i+(1*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4041f2:	69a3      	ldr	r3, [r4, #24]
  4041f4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4041f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4041fc:	4eb0      	ldr	r6, [pc, #704]	; (4044c0 <Gait0+0x328>)
  4041fe:	fb86 1203 	smull	r1, r2, r6, r3
  404202:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  404206:	ee07 2a10 	vmov	s14, r2
  40420a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  40420e:	ee37 7a87 	vadd.f32	s14, s15, s14
  404212:	ee07 3a90 	vmov	s15, r3
  404216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40421a:	eec7 7a27 	vdiv.f32	s15, s14, s15
  40421e:	ee17 0a90 	vmov	r0, s15
  404222:	47c0      	blx	r8
  404224:	4602      	mov	r2, r0
  404226:	460b      	mov	r3, r1
  404228:	47b8      	blx	r7
  40422a:	a3a1      	add	r3, pc, #644	; (adr r3, 4044b0 <Gait0+0x318>)
  40422c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404230:	47d8      	blx	fp
  404232:	47c8      	blx	r9
  404234:	f8ca 0004 	str.w	r0, [sl, #4]
	ofst[2] = ((float)hexabot_walk->i+(2*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  404238:	69a2      	ldr	r2, [r4, #24]
  40423a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  40423e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404242:	fb86 1302 	smull	r1, r3, r6, r2
  404246:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  40424a:	005b      	lsls	r3, r3, #1
  40424c:	ee07 3a90 	vmov	s15, r3
  404250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404254:	ee77 7a27 	vadd.f32	s15, s14, s15
  404258:	ee07 2a10 	vmov	s14, r2
  40425c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404260:	eec7 7a87 	vdiv.f32	s15, s15, s14
  404264:	ee17 0a90 	vmov	r0, s15
  404268:	47c0      	blx	r8
  40426a:	4602      	mov	r2, r0
  40426c:	460b      	mov	r3, r1
  40426e:	47b8      	blx	r7
  404270:	a38f      	add	r3, pc, #572	; (adr r3, 4044b0 <Gait0+0x318>)
  404272:	e9d3 2300 	ldrd	r2, r3, [r3]
  404276:	47d8      	blx	fp
  404278:	47c8      	blx	r9
  40427a:	f8ca 0008 	str.w	r0, [sl, #8]
	ofst[3] = ((float)hexabot_walk->i+(3*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  40427e:	69a2      	ldr	r2, [r4, #24]
  404280:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404288:	fb86 1302 	smull	r1, r3, r6, r2
  40428c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  404290:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404294:	ee07 3a90 	vmov	s15, r3
  404298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40429c:	ee77 7a27 	vadd.f32	s15, s14, s15
  4042a0:	ee07 2a10 	vmov	s14, r2
  4042a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4042a8:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4042ac:	ee17 0a90 	vmov	r0, s15
  4042b0:	47c0      	blx	r8
  4042b2:	4602      	mov	r2, r0
  4042b4:	460b      	mov	r3, r1
  4042b6:	47b8      	blx	r7
  4042b8:	a37d      	add	r3, pc, #500	; (adr r3, 4044b0 <Gait0+0x318>)
  4042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042be:	47d8      	blx	fp
  4042c0:	47c8      	blx	r9
  4042c2:	f8ca 000c 	str.w	r0, [sl, #12]
	ofst[4] = ((float)hexabot_walk->i+(4*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  4042c6:	69a2      	ldr	r2, [r4, #24]
  4042c8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  4042cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4042d0:	fb86 1302 	smull	r1, r3, r6, r2
  4042d4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
  4042d8:	009b      	lsls	r3, r3, #2
  4042da:	ee07 3a90 	vmov	s15, r3
  4042de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4042e2:	ee77 7a27 	vadd.f32	s15, s14, s15
  4042e6:	ee07 2a10 	vmov	s14, r2
  4042ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  4042ee:	eec7 7a87 	vdiv.f32	s15, s15, s14
  4042f2:	ee17 0a90 	vmov	r0, s15
  4042f6:	47c0      	blx	r8
  4042f8:	4602      	mov	r2, r0
  4042fa:	460b      	mov	r3, r1
  4042fc:	47b8      	blx	r7
  4042fe:	a36c      	add	r3, pc, #432	; (adr r3, 4044b0 <Gait0+0x318>)
  404300:	e9d3 2300 	ldrd	r2, r3, [r3]
  404304:	47d8      	blx	fp
  404306:	47c8      	blx	r9
  404308:	f8ca 0010 	str.w	r0, [sl, #16]
	ofst[5] = ((float)hexabot_walk->i+(5*(hexabot_walk->Hexabot_leg_cycle_t/6)))/(hexabot_walk->Hexabot_leg_cycle_t)*2.0*M_PI;
  40430c:	69a3      	ldr	r3, [r4, #24]
  40430e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
  404312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404316:	fb86 2603 	smull	r2, r6, r6, r3
  40431a:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40431e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404322:	ee07 6a90 	vmov	s15, r6
  404326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40432a:	ee77 7a27 	vadd.f32	s15, s14, s15
  40432e:	ee07 3a10 	vmov	s14, r3
  404332:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404336:	eec7 7a87 	vdiv.f32	s15, s15, s14
  40433a:	ee17 0a90 	vmov	r0, s15
  40433e:	47c0      	blx	r8
  404340:	4602      	mov	r2, r0
  404342:	460b      	mov	r3, r1
  404344:	47b8      	blx	r7
  404346:	a35a      	add	r3, pc, #360	; (adr r3, 4044b0 <Gait0+0x318>)
  404348:	e9d3 2300 	ldrd	r2, r3, [r3]
  40434c:	47d8      	blx	fp
  40434e:	47c8      	blx	r9
  404350:	f8ca 0014 	str.w	r0, [sl, #20]
	
	xzS[0] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[0]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  404354:	ee18 0a90 	vmov	r0, s17
  404358:	47c0      	blx	r8
  40435a:	4b5a      	ldr	r3, [pc, #360]	; (4044c4 <Gait0+0x32c>)
  40435c:	4798      	blx	r3
  40435e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404362:	edd4 7a02 	vldr	s15, [r4, #8]
  404366:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  40436a:	ae0c      	add	r6, sp, #48	; 0x30
  40436c:	6960      	ldr	r0, [r4, #20]
  40436e:	4b56      	ldr	r3, [pc, #344]	; (4044c8 <Gait0+0x330>)
  404370:	4798      	blx	r3
  404372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  404376:	47d8      	blx	fp
  404378:	47c8      	blx	r9
  40437a:	4602      	mov	r2, r0
  40437c:	ed8d 8a00 	vstr	s16, [sp]
  404380:	6863      	ldr	r3, [r4, #4]
  404382:	9301      	str	r3, [sp, #4]
  404384:	2301      	movs	r3, #1
  404386:	9302      	str	r3, [sp, #8]
  404388:	6823      	ldr	r3, [r4, #0]
  40438a:	9303      	str	r3, [sp, #12]
  40438c:	4630      	mov	r0, r6
  40438e:	ee18 1a90 	vmov	r1, s17
  404392:	ee18 3a90 	vmov	r3, s17
  404396:	4f4d      	ldr	r7, [pc, #308]	; (4044cc <Gait0+0x334>)
  404398:	47b8      	blx	r7
  40439a:	e896 0003 	ldmia.w	r6, {r0, r1}
  40439e:	e885 0003 	stmia.w	r5, {r0, r1}
	xzS[1] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[1]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  4043a2:	f8da 0004 	ldr.w	r0, [sl, #4]
  4043a6:	47c0      	blx	r8
  4043a8:	4b46      	ldr	r3, [pc, #280]	; (4044c4 <Gait0+0x32c>)
  4043aa:	4798      	blx	r3
  4043ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4043b0:	edd4 7a02 	vldr	s15, [r4, #8]
  4043b4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4043b8:	6960      	ldr	r0, [r4, #20]
  4043ba:	4b43      	ldr	r3, [pc, #268]	; (4044c8 <Gait0+0x330>)
  4043bc:	4798      	blx	r3
  4043be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4043c2:	47d8      	blx	fp
  4043c4:	47c8      	blx	r9
  4043c6:	4602      	mov	r2, r0
  4043c8:	ed8d 8a00 	vstr	s16, [sp]
  4043cc:	6863      	ldr	r3, [r4, #4]
  4043ce:	9301      	str	r3, [sp, #4]
  4043d0:	2300      	movs	r3, #0
  4043d2:	9302      	str	r3, [sp, #8]
  4043d4:	6823      	ldr	r3, [r4, #0]
  4043d6:	9303      	str	r3, [sp, #12]
  4043d8:	4630      	mov	r0, r6
  4043da:	ee18 1a90 	vmov	r1, s17
  4043de:	ee18 3a90 	vmov	r3, s17
  4043e2:	47b8      	blx	r7
  4043e4:	f105 0308 	add.w	r3, r5, #8
  4043e8:	e896 0003 	ldmia.w	r6, {r0, r1}
  4043ec:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[2] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[2]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  4043f0:	f8da 0008 	ldr.w	r0, [sl, #8]
  4043f4:	47c0      	blx	r8
  4043f6:	4b33      	ldr	r3, [pc, #204]	; (4044c4 <Gait0+0x32c>)
  4043f8:	4798      	blx	r3
  4043fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4043fe:	edd4 7a02 	vldr	s15, [r4, #8]
  404402:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404406:	6960      	ldr	r0, [r4, #20]
  404408:	4b2f      	ldr	r3, [pc, #188]	; (4044c8 <Gait0+0x330>)
  40440a:	4798      	blx	r3
  40440c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  404410:	47d8      	blx	fp
  404412:	47c8      	blx	r9
  404414:	4602      	mov	r2, r0
  404416:	ed8d 8a00 	vstr	s16, [sp]
  40441a:	6863      	ldr	r3, [r4, #4]
  40441c:	9301      	str	r3, [sp, #4]
  40441e:	2301      	movs	r3, #1
  404420:	9302      	str	r3, [sp, #8]
  404422:	6823      	ldr	r3, [r4, #0]
  404424:	9303      	str	r3, [sp, #12]
  404426:	4630      	mov	r0, r6
  404428:	ee18 1a90 	vmov	r1, s17
  40442c:	ee18 3a90 	vmov	r3, s17
  404430:	47b8      	blx	r7
  404432:	f105 0310 	add.w	r3, r5, #16
  404436:	e896 0003 	ldmia.w	r6, {r0, r1}
  40443a:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[3] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[3]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  40443e:	f8da 000c 	ldr.w	r0, [sl, #12]
  404442:	47c0      	blx	r8
  404444:	4b1f      	ldr	r3, [pc, #124]	; (4044c4 <Gait0+0x32c>)
  404446:	4798      	blx	r3
  404448:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40444c:	edd4 7a02 	vldr	s15, [r4, #8]
  404450:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404454:	6960      	ldr	r0, [r4, #20]
  404456:	4b1c      	ldr	r3, [pc, #112]	; (4044c8 <Gait0+0x330>)
  404458:	4798      	blx	r3
  40445a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40445e:	47d8      	blx	fp
  404460:	47c8      	blx	r9
  404462:	4602      	mov	r2, r0
  404464:	ed8d 8a00 	vstr	s16, [sp]
  404468:	6863      	ldr	r3, [r4, #4]
  40446a:	9301      	str	r3, [sp, #4]
  40446c:	2300      	movs	r3, #0
  40446e:	9302      	str	r3, [sp, #8]
  404470:	6823      	ldr	r3, [r4, #0]
  404472:	9303      	str	r3, [sp, #12]
  404474:	4630      	mov	r0, r6
  404476:	ee18 1a90 	vmov	r1, s17
  40447a:	ee18 3a90 	vmov	r3, s17
  40447e:	47b8      	blx	r7
  404480:	f105 0318 	add.w	r3, r5, #24
  404484:	e896 0003 	ldmia.w	r6, {r0, r1}
  404488:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[4] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[4]), hexabot_walk->stance, 0, hexabot_walk->movDir,1,hexabot_walk->movTurn);
  40448c:	f8da 0010 	ldr.w	r0, [sl, #16]
  404490:	47c0      	blx	r8
  404492:	4b0c      	ldr	r3, [pc, #48]	; (4044c4 <Gait0+0x32c>)
  404494:	4798      	blx	r3
  404496:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40449a:	edd4 7a02 	vldr	s15, [r4, #8]
  40449e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4044a2:	6960      	ldr	r0, [r4, #20]
  4044a4:	4b08      	ldr	r3, [pc, #32]	; (4044c8 <Gait0+0x330>)
  4044a6:	4798      	blx	r3
  4044a8:	e018      	b.n	4044dc <Gait0+0x344>
  4044aa:	bf00      	nop
  4044ac:	f3af 8000 	nop.w
  4044b0:	54442d18 	.word	0x54442d18
  4044b4:	400921fb 	.word	0x400921fb
  4044b8:	00000000 	.word	0x00000000
  4044bc:	0040a1a5 	.word	0x0040a1a5
  4044c0:	2aaaaaab 	.word	0x2aaaaaab
  4044c4:	00407975 	.word	0x00407975
  4044c8:	0040a43d 	.word	0x0040a43d
  4044cc:	004057e1 	.word	0x004057e1
  4044d0:	0040a461 	.word	0x0040a461
  4044d4:	0040a509 	.word	0x0040a509
  4044d8:	0040aa8d 	.word	0x0040aa8d
  4044dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  4044e0:	47d8      	blx	fp
  4044e2:	47c8      	blx	r9
  4044e4:	4602      	mov	r2, r0
  4044e6:	ed8d 8a00 	vstr	s16, [sp]
  4044ea:	6863      	ldr	r3, [r4, #4]
  4044ec:	9301      	str	r3, [sp, #4]
  4044ee:	2301      	movs	r3, #1
  4044f0:	9302      	str	r3, [sp, #8]
  4044f2:	6823      	ldr	r3, [r4, #0]
  4044f4:	9303      	str	r3, [sp, #12]
  4044f6:	4630      	mov	r0, r6
  4044f8:	ee18 1a90 	vmov	r1, s17
  4044fc:	ee18 3a90 	vmov	r3, s17
  404500:	47b8      	blx	r7
  404502:	f105 0320 	add.w	r3, r5, #32
  404506:	e896 0003 	ldmia.w	r6, {r0, r1}
  40450a:	e883 0003 	stmia.w	r3, {r0, r1}
	xzS[5] = calcRotation(hexabot_walk->stance, hexabot_walk->stride*cos(ofst[5]), hexabot_walk->stance, 0, hexabot_walk->movDir,0,hexabot_walk->movTurn);
  40450e:	f8da 0014 	ldr.w	r0, [sl, #20]
  404512:	47c0      	blx	r8
  404514:	4b89      	ldr	r3, [pc, #548]	; (40473c <Gait0+0x5a4>)
  404516:	4798      	blx	r3
  404518:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40451c:	edd4 7a02 	vldr	s15, [r4, #8]
  404520:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404524:	6960      	ldr	r0, [r4, #20]
  404526:	4b86      	ldr	r3, [pc, #536]	; (404740 <Gait0+0x5a8>)
  404528:	4798      	blx	r3
  40452a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40452e:	47d8      	blx	fp
  404530:	47c8      	blx	r9
  404532:	4602      	mov	r2, r0
  404534:	ed8d 8a00 	vstr	s16, [sp]
  404538:	6863      	ldr	r3, [r4, #4]
  40453a:	9301      	str	r3, [sp, #4]
  40453c:	2300      	movs	r3, #0
  40453e:	9302      	str	r3, [sp, #8]
  404540:	6823      	ldr	r3, [r4, #0]
  404542:	9303      	str	r3, [sp, #12]
  404544:	4630      	mov	r0, r6
  404546:	ee18 1a90 	vmov	r1, s17
  40454a:	ee18 3a90 	vmov	r3, s17
  40454e:	47b8      	blx	r7
  404550:	f105 0328 	add.w	r3, r5, #40	; 0x28
  404554:	e896 0003 	ldmia.w	r6, {r0, r1}
  404558:	e883 0003 	stmia.w	r3, {r0, r1}

	Ang[0] = legAngCalc(xzS[0].X,  (sin(ofst[0]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[0])-hexabot_walk->hgt)  ,xzS[0].Z);
  40455c:	f8d5 9000 	ldr.w	r9, [r5]
  404560:	f8da 0000 	ldr.w	r0, [sl]
  404564:	47c0      	blx	r8
  404566:	4b77      	ldr	r3, [pc, #476]	; (404744 <Gait0+0x5ac>)
  404568:	4798      	blx	r3
  40456a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40456e:	2200      	movs	r2, #0
  404570:	2300      	movs	r3, #0
  404572:	4e75      	ldr	r6, [pc, #468]	; (404748 <Gait0+0x5b0>)
  404574:	47b0      	blx	r6
  404576:	b120      	cbz	r0, 404582 <Gait0+0x3ea>
  404578:	68e0      	ldr	r0, [r4, #12]
  40457a:	4240      	negs	r0, r0
  40457c:	4b70      	ldr	r3, [pc, #448]	; (404740 <Gait0+0x5a8>)
  40457e:	4798      	blx	r3
  404580:	e012      	b.n	4045a8 <Gait0+0x410>
  404582:	4f6f      	ldr	r7, [pc, #444]	; (404740 <Gait0+0x5a8>)
  404584:	6920      	ldr	r0, [r4, #16]
  404586:	47b8      	blx	r7
  404588:	4602      	mov	r2, r0
  40458a:	460b      	mov	r3, r1
  40458c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404590:	4e6e      	ldr	r6, [pc, #440]	; (40474c <Gait0+0x5b4>)
  404592:	47b0      	blx	r6
  404594:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404598:	68e0      	ldr	r0, [r4, #12]
  40459a:	47b8      	blx	r7
  40459c:	4602      	mov	r2, r0
  40459e:	460b      	mov	r3, r1
  4045a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4045a4:	4e6a      	ldr	r6, [pc, #424]	; (404750 <Gait0+0x5b8>)
  4045a6:	47b0      	blx	r6
  4045a8:	ae08      	add	r6, sp, #32
  4045aa:	4b6a      	ldr	r3, [pc, #424]	; (404754 <Gait0+0x5bc>)
  4045ac:	4798      	blx	r3
  4045ae:	4602      	mov	r2, r0
  4045b0:	4630      	mov	r0, r6
  4045b2:	4649      	mov	r1, r9
  4045b4:	686b      	ldr	r3, [r5, #4]
  4045b6:	4f68      	ldr	r7, [pc, #416]	; (404758 <Gait0+0x5c0>)
  4045b8:	47b8      	blx	r7
  4045ba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  4045be:	9e04      	ldr	r6, [sp, #16]
  4045c0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	Ang[1] = legAngCalc(xzS[1].X,  (sin(ofst[1]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[1])-hexabot_walk->hgt)  ,xzS[1].Z);
  4045c4:	f106 080c 	add.w	r8, r6, #12
  4045c8:	f8d5 b008 	ldr.w	fp, [r5, #8]
  4045cc:	f8da 0004 	ldr.w	r0, [sl, #4]
  4045d0:	4b62      	ldr	r3, [pc, #392]	; (40475c <Gait0+0x5c4>)
  4045d2:	4798      	blx	r3
  4045d4:	4b5b      	ldr	r3, [pc, #364]	; (404744 <Gait0+0x5ac>)
  4045d6:	4798      	blx	r3
  4045d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4045dc:	2200      	movs	r2, #0
  4045de:	2300      	movs	r3, #0
  4045e0:	4e59      	ldr	r6, [pc, #356]	; (404748 <Gait0+0x5b0>)
  4045e2:	47b0      	blx	r6
  4045e4:	b120      	cbz	r0, 4045f0 <Gait0+0x458>
  4045e6:	68e0      	ldr	r0, [r4, #12]
  4045e8:	4240      	negs	r0, r0
  4045ea:	4b55      	ldr	r3, [pc, #340]	; (404740 <Gait0+0x5a8>)
  4045ec:	4798      	blx	r3
  4045ee:	e012      	b.n	404616 <Gait0+0x47e>
  4045f0:	4f53      	ldr	r7, [pc, #332]	; (404740 <Gait0+0x5a8>)
  4045f2:	6920      	ldr	r0, [r4, #16]
  4045f4:	47b8      	blx	r7
  4045f6:	4602      	mov	r2, r0
  4045f8:	460b      	mov	r3, r1
  4045fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4045fe:	4e53      	ldr	r6, [pc, #332]	; (40474c <Gait0+0x5b4>)
  404600:	47b0      	blx	r6
  404602:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404606:	68e0      	ldr	r0, [r4, #12]
  404608:	47b8      	blx	r7
  40460a:	4602      	mov	r2, r0
  40460c:	460b      	mov	r3, r1
  40460e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404612:	4e4f      	ldr	r6, [pc, #316]	; (404750 <Gait0+0x5b8>)
  404614:	47b0      	blx	r6
  404616:	ae08      	add	r6, sp, #32
  404618:	4b4e      	ldr	r3, [pc, #312]	; (404754 <Gait0+0x5bc>)
  40461a:	4798      	blx	r3
  40461c:	4602      	mov	r2, r0
  40461e:	4630      	mov	r0, r6
  404620:	4659      	mov	r1, fp
  404622:	68eb      	ldr	r3, [r5, #12]
  404624:	4f4c      	ldr	r7, [pc, #304]	; (404758 <Gait0+0x5c0>)
  404626:	47b8      	blx	r7
  404628:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  40462c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	Ang[2] = legAngCalc(xzS[2].X,  (sin(ofst[2]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[2])-hexabot_walk->hgt)  ,xzS[2].Z);
  404630:	9b04      	ldr	r3, [sp, #16]
  404632:	f103 0818 	add.w	r8, r3, #24
  404636:	f8d5 b010 	ldr.w	fp, [r5, #16]
  40463a:	f8da 0008 	ldr.w	r0, [sl, #8]
  40463e:	4b47      	ldr	r3, [pc, #284]	; (40475c <Gait0+0x5c4>)
  404640:	4798      	blx	r3
  404642:	4b40      	ldr	r3, [pc, #256]	; (404744 <Gait0+0x5ac>)
  404644:	4798      	blx	r3
  404646:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40464a:	2200      	movs	r2, #0
  40464c:	2300      	movs	r3, #0
  40464e:	4e3e      	ldr	r6, [pc, #248]	; (404748 <Gait0+0x5b0>)
  404650:	47b0      	blx	r6
  404652:	b120      	cbz	r0, 40465e <Gait0+0x4c6>
  404654:	68e0      	ldr	r0, [r4, #12]
  404656:	4240      	negs	r0, r0
  404658:	4b39      	ldr	r3, [pc, #228]	; (404740 <Gait0+0x5a8>)
  40465a:	4798      	blx	r3
  40465c:	e012      	b.n	404684 <Gait0+0x4ec>
  40465e:	4f38      	ldr	r7, [pc, #224]	; (404740 <Gait0+0x5a8>)
  404660:	6920      	ldr	r0, [r4, #16]
  404662:	47b8      	blx	r7
  404664:	4602      	mov	r2, r0
  404666:	460b      	mov	r3, r1
  404668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40466c:	4e37      	ldr	r6, [pc, #220]	; (40474c <Gait0+0x5b4>)
  40466e:	47b0      	blx	r6
  404670:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404674:	68e0      	ldr	r0, [r4, #12]
  404676:	47b8      	blx	r7
  404678:	4602      	mov	r2, r0
  40467a:	460b      	mov	r3, r1
  40467c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404680:	4e33      	ldr	r6, [pc, #204]	; (404750 <Gait0+0x5b8>)
  404682:	47b0      	blx	r6
  404684:	ae08      	add	r6, sp, #32
  404686:	4b33      	ldr	r3, [pc, #204]	; (404754 <Gait0+0x5bc>)
  404688:	4798      	blx	r3
  40468a:	4602      	mov	r2, r0
  40468c:	4630      	mov	r0, r6
  40468e:	4659      	mov	r1, fp
  404690:	696b      	ldr	r3, [r5, #20]
  404692:	4f31      	ldr	r7, [pc, #196]	; (404758 <Gait0+0x5c0>)
  404694:	47b8      	blx	r7
  404696:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  40469a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	Ang[3] = legAngCalc(xzS[3].X,  (sin(ofst[3]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[3])-hexabot_walk->hgt)  ,xzS[3].Z);
  40469e:	9b04      	ldr	r3, [sp, #16]
  4046a0:	f103 0824 	add.w	r8, r3, #36	; 0x24
  4046a4:	f8d5 b018 	ldr.w	fp, [r5, #24]
  4046a8:	f8da 000c 	ldr.w	r0, [sl, #12]
  4046ac:	4b2b      	ldr	r3, [pc, #172]	; (40475c <Gait0+0x5c4>)
  4046ae:	4798      	blx	r3
  4046b0:	4b24      	ldr	r3, [pc, #144]	; (404744 <Gait0+0x5ac>)
  4046b2:	4798      	blx	r3
  4046b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4046b8:	2200      	movs	r2, #0
  4046ba:	2300      	movs	r3, #0
  4046bc:	4e22      	ldr	r6, [pc, #136]	; (404748 <Gait0+0x5b0>)
  4046be:	47b0      	blx	r6
  4046c0:	b120      	cbz	r0, 4046cc <Gait0+0x534>
  4046c2:	68e0      	ldr	r0, [r4, #12]
  4046c4:	4240      	negs	r0, r0
  4046c6:	4b1e      	ldr	r3, [pc, #120]	; (404740 <Gait0+0x5a8>)
  4046c8:	4798      	blx	r3
  4046ca:	e012      	b.n	4046f2 <Gait0+0x55a>
  4046cc:	4f1c      	ldr	r7, [pc, #112]	; (404740 <Gait0+0x5a8>)
  4046ce:	6920      	ldr	r0, [r4, #16]
  4046d0:	47b8      	blx	r7
  4046d2:	4602      	mov	r2, r0
  4046d4:	460b      	mov	r3, r1
  4046d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4046da:	4e1c      	ldr	r6, [pc, #112]	; (40474c <Gait0+0x5b4>)
  4046dc:	47b0      	blx	r6
  4046de:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4046e2:	68e0      	ldr	r0, [r4, #12]
  4046e4:	47b8      	blx	r7
  4046e6:	4602      	mov	r2, r0
  4046e8:	460b      	mov	r3, r1
  4046ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4046ee:	4e18      	ldr	r6, [pc, #96]	; (404750 <Gait0+0x5b8>)
  4046f0:	47b0      	blx	r6
  4046f2:	ae08      	add	r6, sp, #32
  4046f4:	4b17      	ldr	r3, [pc, #92]	; (404754 <Gait0+0x5bc>)
  4046f6:	4798      	blx	r3
  4046f8:	4602      	mov	r2, r0
  4046fa:	4630      	mov	r0, r6
  4046fc:	4659      	mov	r1, fp
  4046fe:	69eb      	ldr	r3, [r5, #28]
  404700:	4f15      	ldr	r7, [pc, #84]	; (404758 <Gait0+0x5c0>)
  404702:	47b8      	blx	r7
  404704:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  404708:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	Ang[4] = legAngCalc(xzS[4].X,  (sin(ofst[4]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[4])-hexabot_walk->hgt)  ,xzS[4].Z);
  40470c:	9b04      	ldr	r3, [sp, #16]
  40470e:	f103 0830 	add.w	r8, r3, #48	; 0x30
  404712:	f8d5 b020 	ldr.w	fp, [r5, #32]
  404716:	f8da 0010 	ldr.w	r0, [sl, #16]
  40471a:	4b10      	ldr	r3, [pc, #64]	; (40475c <Gait0+0x5c4>)
  40471c:	4798      	blx	r3
  40471e:	4b09      	ldr	r3, [pc, #36]	; (404744 <Gait0+0x5ac>)
  404720:	4798      	blx	r3
  404722:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404726:	2200      	movs	r2, #0
  404728:	2300      	movs	r3, #0
  40472a:	4e07      	ldr	r6, [pc, #28]	; (404748 <Gait0+0x5b0>)
  40472c:	47b0      	blx	r6
  40472e:	b1b8      	cbz	r0, 404760 <Gait0+0x5c8>
  404730:	68e0      	ldr	r0, [r4, #12]
  404732:	4240      	negs	r0, r0
  404734:	4b02      	ldr	r3, [pc, #8]	; (404740 <Gait0+0x5a8>)
  404736:	4798      	blx	r3
  404738:	e025      	b.n	404786 <Gait0+0x5ee>
  40473a:	bf00      	nop
  40473c:	00407975 	.word	0x00407975
  404740:	0040a43d 	.word	0x0040a43d
  404744:	004079fd 	.word	0x004079fd
  404748:	0040a9ed 	.word	0x0040a9ed
  40474c:	0040a509 	.word	0x0040a509
  404750:	0040a1a1 	.word	0x0040a1a1
  404754:	0040aa8d 	.word	0x0040aa8d
  404758:	00405a11 	.word	0x00405a11
  40475c:	0040a461 	.word	0x0040a461
  404760:	4f2d      	ldr	r7, [pc, #180]	; (404818 <Gait0+0x680>)
  404762:	6920      	ldr	r0, [r4, #16]
  404764:	47b8      	blx	r7
  404766:	4602      	mov	r2, r0
  404768:	460b      	mov	r3, r1
  40476a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40476e:	4e2b      	ldr	r6, [pc, #172]	; (40481c <Gait0+0x684>)
  404770:	47b0      	blx	r6
  404772:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404776:	68e0      	ldr	r0, [r4, #12]
  404778:	47b8      	blx	r7
  40477a:	4602      	mov	r2, r0
  40477c:	460b      	mov	r3, r1
  40477e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404782:	4e27      	ldr	r6, [pc, #156]	; (404820 <Gait0+0x688>)
  404784:	47b0      	blx	r6
  404786:	ae08      	add	r6, sp, #32
  404788:	4b26      	ldr	r3, [pc, #152]	; (404824 <Gait0+0x68c>)
  40478a:	4798      	blx	r3
  40478c:	4602      	mov	r2, r0
  40478e:	4630      	mov	r0, r6
  404790:	4659      	mov	r1, fp
  404792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  404794:	4f24      	ldr	r7, [pc, #144]	; (404828 <Gait0+0x690>)
  404796:	47b8      	blx	r7
  404798:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  40479c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	Ang[5] = legAngCalc(xzS[5].X,  (sin(ofst[5]) < 0)?-hexabot_walk->hgt:(hexabot_walk->pup*sin(ofst[5])-hexabot_walk->hgt)  ,xzS[5].Z);
  4047a0:	9b04      	ldr	r3, [sp, #16]
  4047a2:	f103 083c 	add.w	r8, r3, #60	; 0x3c
  4047a6:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
  4047aa:	f8da 0014 	ldr.w	r0, [sl, #20]
  4047ae:	4b1f      	ldr	r3, [pc, #124]	; (40482c <Gait0+0x694>)
  4047b0:	4798      	blx	r3
  4047b2:	4b1f      	ldr	r3, [pc, #124]	; (404830 <Gait0+0x698>)
  4047b4:	4798      	blx	r3
  4047b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4047ba:	2200      	movs	r2, #0
  4047bc:	2300      	movs	r3, #0
  4047be:	4e1d      	ldr	r6, [pc, #116]	; (404834 <Gait0+0x69c>)
  4047c0:	47b0      	blx	r6
  4047c2:	b120      	cbz	r0, 4047ce <Gait0+0x636>
  4047c4:	68e0      	ldr	r0, [r4, #12]
  4047c6:	4240      	negs	r0, r0
  4047c8:	4b13      	ldr	r3, [pc, #76]	; (404818 <Gait0+0x680>)
  4047ca:	4798      	blx	r3
  4047cc:	e012      	b.n	4047f4 <Gait0+0x65c>
  4047ce:	4f12      	ldr	r7, [pc, #72]	; (404818 <Gait0+0x680>)
  4047d0:	6920      	ldr	r0, [r4, #16]
  4047d2:	47b8      	blx	r7
  4047d4:	4602      	mov	r2, r0
  4047d6:	460b      	mov	r3, r1
  4047d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4047dc:	4e0f      	ldr	r6, [pc, #60]	; (40481c <Gait0+0x684>)
  4047de:	47b0      	blx	r6
  4047e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4047e4:	68e0      	ldr	r0, [r4, #12]
  4047e6:	47b8      	blx	r7
  4047e8:	4602      	mov	r2, r0
  4047ea:	460b      	mov	r3, r1
  4047ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4047f0:	4c0b      	ldr	r4, [pc, #44]	; (404820 <Gait0+0x688>)
  4047f2:	47a0      	blx	r4
  4047f4:	ac08      	add	r4, sp, #32
  4047f6:	4b0b      	ldr	r3, [pc, #44]	; (404824 <Gait0+0x68c>)
  4047f8:	4798      	blx	r3
  4047fa:	4602      	mov	r2, r0
  4047fc:	4620      	mov	r0, r4
  4047fe:	4659      	mov	r1, fp
  404800:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  404802:	4d09      	ldr	r5, [pc, #36]	; (404828 <Gait0+0x690>)
  404804:	47a8      	blx	r5
  404806:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  40480a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
	
}
  40480e:	b00f      	add	sp, #60	; 0x3c
  404810:	ecbd 8b02 	vpop	{d8}
  404814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404818:	0040a43d 	.word	0x0040a43d
  40481c:	0040a509 	.word	0x0040a509
  404820:	0040a1a1 	.word	0x0040a1a1
  404824:	0040aa8d 	.word	0x0040aa8d
  404828:	00405a11 	.word	0x00405a11
  40482c:	0040a461 	.word	0x0040a461
  404830:	004079fd 	.word	0x004079fd
  404834:	0040a9ed 	.word	0x0040a9ed

00404838 <Gait1>:

//Second gait function
//Shannon its pretty

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40483c:	ed2d 8b06 	vpush	{d8-d10}
  404840:	b091      	sub	sp, #68	; 0x44
  404842:	4681      	mov	r9, r0
  404844:	468a      	mov	sl, r1
  404846:	4617      	mov	r7, r2
  404848:	461e      	mov	r6, r3
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
  40484a:	6958      	ldr	r0, [r3, #20]
  40484c:	4b94      	ldr	r3, [pc, #592]	; (404aa0 <Gait1+0x268>)
  40484e:	4798      	blx	r3
  404850:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404854:	4d93      	ldr	r5, [pc, #588]	; (404aa4 <Gait1+0x26c>)
  404856:	a38c      	add	r3, pc, #560	; (adr r3, 404a88 <Gait1+0x250>)
  404858:	e9d3 2300 	ldrd	r2, r3, [r3]
  40485c:	47a8      	blx	r5
  40485e:	4c92      	ldr	r4, [pc, #584]	; (404aa8 <Gait1+0x270>)
  404860:	47a0      	blx	r4
  404862:	ee0a 0a90 	vmov	s21, r0
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
  404866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40486a:	2200      	movs	r2, #0
  40486c:	4b8f      	ldr	r3, [pc, #572]	; (404aac <Gait1+0x274>)
  40486e:	47a8      	blx	r5
  404870:	47a0      	blx	r4
  404872:	9009      	str	r0, [sp, #36]	; 0x24
  404874:	46c8      	mov	r8, r9
  404876:	46d3      	mov	fp, sl
  404878:	46ba      	mov	sl, r7
	
	for(int i = 0; i < 6; i++) {
  40487a:	f04f 0900 	mov.w	r9, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  40487e:	4f8c      	ldr	r7, [pc, #560]	; (404ab0 <Gait1+0x278>)
		if( ofst[i] < (5.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404880:	ed9f aa8c 	vldr	s20, [pc, #560]	; 404ab4 <Gait1+0x27c>
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  404884:	ed9f 9b82 	vldr	d9, [pc, #520]	; 404a90 <Gait1+0x258>
  404888:	4653      	mov	r3, sl
  40488a:	46ca      	mov	sl, r9
  40488c:	4699      	mov	r9, r3
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + i*(float)hexabot_walk->Hexabot_leg_cycle_t/6.00) , ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  40488e:	edd6 7a06 	vldr	s15, [r6, #24]
  404892:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  404896:	6a70      	ldr	r0, [r6, #36]	; 0x24
  404898:	4b81      	ldr	r3, [pc, #516]	; (404aa0 <Gait1+0x268>)
  40489a:	4798      	blx	r3
  40489c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4048a0:	ee07 aa90 	vmov	s15, sl
  4048a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4048a8:	ee67 7a88 	vmul.f32	s15, s15, s16
  4048ac:	ee17 0a90 	vmov	r0, s15
  4048b0:	47b8      	blx	r7
  4048b2:	4d81      	ldr	r5, [pc, #516]	; (404ab8 <Gait1+0x280>)
  4048b4:	2200      	movs	r2, #0
  4048b6:	4b81      	ldr	r3, [pc, #516]	; (404abc <Gait1+0x284>)
  4048b8:	47a8      	blx	r5
  4048ba:	4602      	mov	r2, r0
  4048bc:	460b      	mov	r3, r1
  4048be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048c2:	4c7f      	ldr	r4, [pc, #508]	; (404ac0 <Gait1+0x288>)
  4048c4:	47a0      	blx	r4
  4048c6:	4c78      	ldr	r4, [pc, #480]	; (404aa8 <Gait1+0x270>)
  4048c8:	47a0      	blx	r4
  4048ca:	47b8      	blx	r7
  4048cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4048d0:	ee18 0a10 	vmov	r0, s16
  4048d4:	47b8      	blx	r7
  4048d6:	4602      	mov	r2, r0
  4048d8:	460b      	mov	r3, r1
  4048da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048de:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 404ad8 <Gait1+0x2a0>
  4048e2:	47e0      	blx	ip
  4048e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4048e8:	edd6 7a06 	vldr	s15, [r6, #24]
  4048ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4048f0:	ee17 0a90 	vmov	r0, s15
  4048f4:	47b8      	blx	r7
  4048f6:	4602      	mov	r2, r0
  4048f8:	460b      	mov	r3, r1
  4048fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048fe:	47a8      	blx	r5
  404900:	47a0      	blx	r4
  404902:	ee08 0a10 	vmov	s16, r0
  404906:	f848 0b04 	str.w	r0, [r8], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (5.00/6.00) ) {
  40490a:	47b8      	blx	r7
  40490c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404910:	a361      	add	r3, pc, #388	; (adr r3, 404a98 <Gait1+0x260>)
  404912:	e9d3 2300 	ldrd	r2, r3, [r3]
  404916:	4c6b      	ldr	r4, [pc, #428]	; (404ac4 <Gait1+0x28c>)
  404918:	47a0      	blx	r4
  40491a:	2800      	cmp	r0, #0
  40491c:	d037      	beq.n	40498e <Gait1+0x156>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  40491e:	edd6 7a02 	vldr	s15, [r6, #8]
  404922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404926:	ac0e      	add	r4, sp, #56	; 0x38
  404928:	ee2a 8a88 	vmul.f32	s16, s21, s16
  40492c:	ed96 7a05 	vldr	s14, [r6, #20]
  404930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404934:	ed8d aa00 	vstr	s20, [sp]
  404938:	6873      	ldr	r3, [r6, #4]
  40493a:	9301      	str	r3, [sp, #4]
  40493c:	f00a 0301 	and.w	r3, sl, #1
  404940:	9302      	str	r3, [sp, #8]
  404942:	6833      	ldr	r3, [r6, #0]
  404944:	9303      	str	r3, [sp, #12]
  404946:	4620      	mov	r0, r4
  404948:	ee17 1a90 	vmov	r1, s15
  40494c:	ee38 7a47 	vsub.f32	s14, s16, s14
  404950:	ee17 2a10 	vmov	r2, s14
  404954:	ee17 3a90 	vmov	r3, s15
  404958:	4d5b      	ldr	r5, [pc, #364]	; (404ac8 <Gait1+0x290>)
  40495a:	47a8      	blx	r5
  40495c:	e894 0003 	ldmia.w	r4, {r0, r1}
  404960:	e88b 0003 	stmia.w	fp, {r0, r1}
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404964:	ac0a      	add	r4, sp, #40	; 0x28
  404966:	68f2      	ldr	r2, [r6, #12]
  404968:	4252      	negs	r2, r2
  40496a:	4620      	mov	r0, r4
  40496c:	f8db 1000 	ldr.w	r1, [fp]
  404970:	ee07 2a90 	vmov	s15, r2
  404974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404978:	ee17 2a90 	vmov	r2, s15
  40497c:	f8db 3004 	ldr.w	r3, [fp, #4]
  404980:	4d52      	ldr	r5, [pc, #328]	; (404acc <Gait1+0x294>)
  404982:	47a8      	blx	r5
  404984:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  404988:	e889 0007 	stmia.w	r9, {r0, r1, r2}
  40498c:	e06b      	b.n	404a66 <Gait1+0x22e>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  40498e:	edd6 7a02 	vldr	s15, [r6, #8]
  404992:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404996:	ac0a      	add	r4, sp, #40	; 0x28
  404998:	edd6 7a05 	vldr	s15, [r6, #20]
  40499c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  4049a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4049a2:	47b8      	blx	r7
  4049a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4049a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4049ac:	a33a      	add	r3, pc, #232	; (adr r3, 404a98 <Gait1+0x260>)
  4049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4049b2:	4d47      	ldr	r5, [pc, #284]	; (404ad0 <Gait1+0x298>)
  4049b4:	47a8      	blx	r5
  4049b6:	4602      	mov	r2, r0
  4049b8:	460b      	mov	r3, r1
  4049ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4049be:	4d39      	ldr	r5, [pc, #228]	; (404aa4 <Gait1+0x26c>)
  4049c0:	47a8      	blx	r5
  4049c2:	4b39      	ldr	r3, [pc, #228]	; (404aa8 <Gait1+0x270>)
  4049c4:	4798      	blx	r3
  4049c6:	ee07 0a90 	vmov	s15, r0
  4049ca:	ee38 8a67 	vsub.f32	s16, s16, s15
  4049ce:	ed8d aa00 	vstr	s20, [sp]
  4049d2:	6873      	ldr	r3, [r6, #4]
  4049d4:	9301      	str	r3, [sp, #4]
  4049d6:	f00a 0301 	and.w	r3, sl, #1
  4049da:	9302      	str	r3, [sp, #8]
  4049dc:	6833      	ldr	r3, [r6, #0]
  4049de:	9303      	str	r3, [sp, #12]
  4049e0:	4620      	mov	r0, r4
  4049e2:	ee18 1a90 	vmov	r1, s17
  4049e6:	ee18 2a10 	vmov	r2, s16
  4049ea:	ee18 3a90 	vmov	r3, s17
  4049ee:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 404ac8 <Gait1+0x290>
  4049f2:	47e0      	blx	ip
  4049f4:	e894 0003 	ldmia.w	r4, {r0, r1}
  4049f8:	e88b 0003 	stmia.w	fp, {r0, r1}
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
  4049fc:	f858 0c04 	ldr.w	r0, [r8, #-4]
  404a00:	47b8      	blx	r7
  404a02:	a325      	add	r3, pc, #148	; (adr r3, 404a98 <Gait1+0x260>)
  404a04:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a08:	4d31      	ldr	r5, [pc, #196]	; (404ad0 <Gait1+0x298>)
  404a0a:	47a8      	blx	r5
  404a0c:	2200      	movs	r2, #0
  404a0e:	4b2b      	ldr	r3, [pc, #172]	; (404abc <Gait1+0x284>)
  404a10:	4d24      	ldr	r5, [pc, #144]	; (404aa4 <Gait1+0x26c>)
  404a12:	47a8      	blx	r5
  404a14:	ec53 2b19 	vmov	r2, r3, d9
  404a18:	47a8      	blx	r5
  404a1a:	4b2e      	ldr	r3, [pc, #184]	; (404ad4 <Gait1+0x29c>)
  404a1c:	4798      	blx	r3
  404a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404a22:	ed9b 8a00 	vldr	s16, [fp]
  404a26:	68f0      	ldr	r0, [r6, #12]
  404a28:	4240      	negs	r0, r0
  404a2a:	4b1d      	ldr	r3, [pc, #116]	; (404aa0 <Gait1+0x268>)
  404a2c:	4798      	blx	r3
  404a2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404a32:	6930      	ldr	r0, [r6, #16]
  404a34:	4b1a      	ldr	r3, [pc, #104]	; (404aa0 <Gait1+0x268>)
  404a36:	4798      	blx	r3
  404a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404a3c:	47a8      	blx	r5
  404a3e:	4602      	mov	r2, r0
  404a40:	460b      	mov	r3, r1
  404a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404a46:	4d1e      	ldr	r5, [pc, #120]	; (404ac0 <Gait1+0x288>)
  404a48:	47a8      	blx	r5
  404a4a:	4b17      	ldr	r3, [pc, #92]	; (404aa8 <Gait1+0x270>)
  404a4c:	4798      	blx	r3
  404a4e:	4602      	mov	r2, r0
  404a50:	4620      	mov	r0, r4
  404a52:	ee18 1a10 	vmov	r1, s16
  404a56:	f8db 3004 	ldr.w	r3, [fp, #4]
  404a5a:	4d1c      	ldr	r5, [pc, #112]	; (404acc <Gait1+0x294>)
  404a5c:	47a8      	blx	r5
  404a5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  404a62:	e889 0007 	stmia.w	r9, {r0, r1, r2}

void Gait1( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.40 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(12.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404a66:	f10a 0a01 	add.w	sl, sl, #1
  404a6a:	f10b 0b08 	add.w	fp, fp, #8
  404a6e:	f109 090c 	add.w	r9, r9, #12
  404a72:	f1ba 0f06 	cmp.w	sl, #6
  404a76:	f47f af0a 	bne.w	40488e <Gait1+0x56>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 5.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X, (-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 5.00/6.00)*6*M_PI)) ,xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  404a7a:	b011      	add	sp, #68	; 0x44
  404a7c:	ecbd 8b06 	vpop	{d8-d10}
  404a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a84:	f3af 8000 	nop.w
  404a88:	33333333 	.word	0x33333333
  404a8c:	40033333 	.word	0x40033333
  404a90:	54442d18 	.word	0x54442d18
  404a94:	400921fb 	.word	0x400921fb
  404a98:	aaaaaaab 	.word	0xaaaaaaab
  404a9c:	3feaaaaa 	.word	0x3feaaaaa
  404aa0:	0040a43d 	.word	0x0040a43d
  404aa4:	0040a509 	.word	0x0040a509
  404aa8:	0040aa8d 	.word	0x0040aa8d
  404aac:	40280000 	.word	0x40280000
  404ab0:	0040a461 	.word	0x0040a461
  404ab4:	00000000 	.word	0x00000000
  404ab8:	0040a75d 	.word	0x0040a75d
  404abc:	40180000 	.word	0x40180000
  404ac0:	0040a1a5 	.word	0x0040a1a5
  404ac4:	0040a9ed 	.word	0x0040a9ed
  404ac8:	004057e1 	.word	0x004057e1
  404acc:	00405a11 	.word	0x00405a11
  404ad0:	0040a1a1 	.word	0x0040a1a1
  404ad4:	004079fd 	.word	0x004079fd
  404ad8:	00407c3d 	.word	0x00407c3d
  404adc:	00000000 	.word	0x00000000

00404ae0 <Gait2>:

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
  404ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ae4:	ed2d 8b0c 	vpush	{d8-d13}
  404ae8:	b08f      	sub	sp, #60	; 0x3c
  404aea:	4604      	mov	r4, r0
  404aec:	460e      	mov	r6, r1
  404aee:	4615      	mov	r5, r2
  404af0:	4699      	mov	r9, r3
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
  404af2:	6958      	ldr	r0, [r3, #20]
  404af4:	4b94      	ldr	r3, [pc, #592]	; (404d48 <Gait2+0x268>)
  404af6:	4798      	blx	r3
  404af8:	2200      	movs	r2, #0
  404afa:	4b94      	ldr	r3, [pc, #592]	; (404d4c <Gait2+0x26c>)
  404afc:	4f94      	ldr	r7, [pc, #592]	; (404d50 <Gait2+0x270>)
  404afe:	47b8      	blx	r7
  404b00:	4b94      	ldr	r3, [pc, #592]	; (404d54 <Gait2+0x274>)
  404b02:	4798      	blx	r3
  404b04:	ee0c 0a10 	vmov	s24, r0
  404b08:	46a8      	mov	r8, r5
  404b0a:	4623      	mov	r3, r4
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404b0c:	f04f 0b00 	mov.w	fp, #0
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404b10:	4f91      	ldr	r7, [pc, #580]	; (404d58 <Gait2+0x278>)
  404b12:	ed9f bb89 	vldr	d11, [pc, #548]	; 404d38 <Gait2+0x258>
		if( ofst[i] < (3.00/6.00) ) {
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404b16:	eddf aa91 	vldr	s21, [pc, #580]	; 404d5c <Gait2+0x27c>
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  404b1a:	ed9f 9b89 	vldr	d9, [pc, #548]	; 404d40 <Gait2+0x260>
  404b1e:	465c      	mov	r4, fp
  404b20:	469a      	mov	sl, r3
  404b22:	eeb0 da49 	vmov.f32	s26, s18
  404b26:	eef0 da69 	vmov.f32	s27, s19
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
		//calculate the cycling offset
		ofst[i] = fmod( (float)(hexabot_walk->i + ((i == 0 || i== 3 || i ==4)?((float)hexabot_walk->Hexabot_leg_cycle_t/2.00):0)), ((float)hexabot_walk->Hexabot_leg_cycle_t))/(float)hexabot_walk->Hexabot_leg_cycle_t;
  404b2a:	46a3      	mov	fp, r4
  404b2c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
  404b30:	4b85      	ldr	r3, [pc, #532]	; (404d48 <Gait2+0x268>)
  404b32:	4798      	blx	r3
  404b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404b38:	1ee3      	subs	r3, r4, #3
  404b3a:	2b01      	cmp	r3, #1
  404b3c:	d902      	bls.n	404b44 <Gait2+0x64>
  404b3e:	ec53 2b1b 	vmov	r2, r3, d11
  404b42:	b96c      	cbnz	r4, 404b60 <Gait2+0x80>
  404b44:	edd9 7a06 	vldr	s15, [r9, #24]
  404b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404b4c:	ee17 0a90 	vmov	r0, s15
  404b50:	47b8      	blx	r7
  404b52:	2200      	movs	r2, #0
  404b54:	4b82      	ldr	r3, [pc, #520]	; (404d60 <Gait2+0x280>)
  404b56:	4d7e      	ldr	r5, [pc, #504]	; (404d50 <Gait2+0x270>)
  404b58:	47a8      	blx	r5
  404b5a:	4602      	mov	r2, r0
  404b5c:	460b      	mov	r3, r1
  404b5e:	e7ff      	b.n	404b60 <Gait2+0x80>
  404b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b64:	4d7f      	ldr	r5, [pc, #508]	; (404d64 <Gait2+0x284>)
  404b66:	47a8      	blx	r5
  404b68:	4d7a      	ldr	r5, [pc, #488]	; (404d54 <Gait2+0x274>)
  404b6a:	47a8      	blx	r5
  404b6c:	47b8      	blx	r7
  404b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404b72:	edd9 7a06 	vldr	s15, [r9, #24]
  404b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404b7a:	ee17 0a90 	vmov	r0, s15
  404b7e:	47b8      	blx	r7
  404b80:	4602      	mov	r2, r0
  404b82:	460b      	mov	r3, r1
  404b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404b88:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 404d70 <Gait2+0x290>
  404b8c:	47e0      	blx	ip
  404b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404b92:	edd9 7a06 	vldr	s15, [r9, #24]
  404b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404b9a:	ee17 0a90 	vmov	r0, s15
  404b9e:	47b8      	blx	r7
  404ba0:	4602      	mov	r2, r0
  404ba2:	460b      	mov	r3, r1
  404ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404ba8:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 404d74 <Gait2+0x294>
  404bac:	47e0      	blx	ip
  404bae:	47a8      	blx	r5
  404bb0:	ee08 0a10 	vmov	s16, r0
  404bb4:	f84a 0b04 	str.w	r0, [sl], #4
		//Calculate X and Z locations
		
		if( ofst[i] < (3.00/6.00) ) {
  404bb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
  404bbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
  404bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404bc4:	d53a      	bpl.n	404c3c <Gait2+0x15c>
			xzS[i] = calcRotation((float)hexabot_walk->stance,  ( -(float)(hexabot_walk->stride) + (float)(grad*ofst[i]) )  , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404bc6:	edd9 7a02 	vldr	s15, [r9, #8]
  404bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404bce:	ad0c      	add	r5, sp, #48	; 0x30
  404bd0:	ee2c 8a08 	vmul.f32	s16, s24, s16
  404bd4:	ed99 7a05 	vldr	s14, [r9, #20]
  404bd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  404bdc:	edcd aa00 	vstr	s21, [sp]
  404be0:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404be4:	9301      	str	r3, [sp, #4]
  404be6:	f00b 0301 	and.w	r3, fp, #1
  404bea:	9302      	str	r3, [sp, #8]
  404bec:	f8d9 3000 	ldr.w	r3, [r9]
  404bf0:	9303      	str	r3, [sp, #12]
  404bf2:	4628      	mov	r0, r5
  404bf4:	ee17 1a90 	vmov	r1, s15
  404bf8:	ee38 7a47 	vsub.f32	s14, s16, s14
  404bfc:	ee17 2a10 	vmov	r2, s14
  404c00:	ee17 3a90 	vmov	r3, s15
  404c04:	f8df c170 	ldr.w	ip, [pc, #368]	; 404d78 <Gait2+0x298>
  404c08:	47e0      	blx	ip
  404c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
  404c0e:	e886 0003 	stmia.w	r6, {r0, r1}
			Ang[i] = legAngCalc(xzS[i].X,-hexabot_walk->hgt,xzS[i].Z);
  404c12:	ad08      	add	r5, sp, #32
  404c14:	f8d9 200c 	ldr.w	r2, [r9, #12]
  404c18:	4252      	negs	r2, r2
  404c1a:	4628      	mov	r0, r5
  404c1c:	6831      	ldr	r1, [r6, #0]
  404c1e:	ee07 2a90 	vmov	s15, r2
  404c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  404c26:	ee17 2a90 	vmov	r2, s15
  404c2a:	6873      	ldr	r3, [r6, #4]
  404c2c:	f8df c14c 	ldr.w	ip, [pc, #332]	; 404d7c <Gait2+0x29c>
  404c30:	47e0      	blx	ip
  404c32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  404c36:	e888 0007 	stmia.w	r8, {r0, r1, r2}
  404c3a:	e071      	b.n	404d20 <Gait2+0x240>
		}
		else {
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
  404c3c:	edd9 7a02 	vldr	s15, [r9, #8]
  404c40:	eeb8 aae7 	vcvt.f32.s32	s20, s15
  404c44:	edd9 7a05 	vldr	s15, [r9, #20]
  404c48:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  404c4c:	ee1c 0a10 	vmov	r0, s24
  404c50:	47b8      	blx	r7
  404c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c56:	ee18 0a10 	vmov	r0, s16
  404c5a:	47b8      	blx	r7
  404c5c:	2200      	movs	r2, #0
  404c5e:	4b40      	ldr	r3, [pc, #256]	; (404d60 <Gait2+0x280>)
  404c60:	4d41      	ldr	r5, [pc, #260]	; (404d68 <Gait2+0x288>)
  404c62:	47a8      	blx	r5
  404c64:	4602      	mov	r2, r0
  404c66:	460b      	mov	r3, r1
  404c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404c6c:	4d38      	ldr	r5, [pc, #224]	; (404d50 <Gait2+0x270>)
  404c6e:	47a8      	blx	r5
  404c70:	4b38      	ldr	r3, [pc, #224]	; (404d54 <Gait2+0x274>)
  404c72:	4798      	blx	r3
  404c74:	ee07 0a90 	vmov	s15, r0
  404c78:	ee78 8ae7 	vsub.f32	s17, s17, s15
  404c7c:	edcd aa00 	vstr	s21, [sp]
  404c80:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404c84:	9301      	str	r3, [sp, #4]
  404c86:	f00b 0301 	and.w	r3, fp, #1
  404c8a:	9302      	str	r3, [sp, #8]
  404c8c:	f8d9 3000 	ldr.w	r3, [r9]
  404c90:	9303      	str	r3, [sp, #12]
  404c92:	a808      	add	r0, sp, #32
  404c94:	ee1a 1a10 	vmov	r1, s20
  404c98:	ee18 2a90 	vmov	r2, s17
  404c9c:	ee1a 3a10 	vmov	r3, s20
  404ca0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 404d78 <Gait2+0x298>
  404ca4:	47e0      	blx	ip
  404ca6:	ab08      	add	r3, sp, #32
  404ca8:	e893 0003 	ldmia.w	r3, {r0, r1}
  404cac:	e886 0003 	stmia.w	r6, {r0, r1}
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
  404cb0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
  404cb4:	47b8      	blx	r7
  404cb6:	2200      	movs	r2, #0
  404cb8:	4b29      	ldr	r3, [pc, #164]	; (404d60 <Gait2+0x280>)
  404cba:	4d2b      	ldr	r5, [pc, #172]	; (404d68 <Gait2+0x288>)
  404cbc:	47a8      	blx	r5
  404cbe:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 404d64 <Gait2+0x284>
  404cc2:	4602      	mov	r2, r0
  404cc4:	460b      	mov	r3, r1
  404cc6:	47d8      	blx	fp
  404cc8:	ec53 2b1d 	vmov	r2, r3, d13
  404ccc:	4d20      	ldr	r5, [pc, #128]	; (404d50 <Gait2+0x270>)
  404cce:	47a8      	blx	r5
  404cd0:	4b26      	ldr	r3, [pc, #152]	; (404d6c <Gait2+0x28c>)
  404cd2:	4798      	blx	r3
  404cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404cd8:	edd6 9a00 	vldr	s19, [r6]
  404cdc:	f8d9 000c 	ldr.w	r0, [r9, #12]
  404ce0:	4240      	negs	r0, r0
  404ce2:	4b19      	ldr	r3, [pc, #100]	; (404d48 <Gait2+0x268>)
  404ce4:	4798      	blx	r3
  404ce6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404cea:	f8d9 0010 	ldr.w	r0, [r9, #16]
  404cee:	4b16      	ldr	r3, [pc, #88]	; (404d48 <Gait2+0x268>)
  404cf0:	4798      	blx	r3
  404cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404cf6:	47a8      	blx	r5
  404cf8:	4602      	mov	r2, r0
  404cfa:	460b      	mov	r3, r1
  404cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  404d00:	47d8      	blx	fp
  404d02:	4b14      	ldr	r3, [pc, #80]	; (404d54 <Gait2+0x274>)
  404d04:	4798      	blx	r3
  404d06:	4602      	mov	r2, r0
  404d08:	a808      	add	r0, sp, #32
  404d0a:	ee19 1a90 	vmov	r1, s19
  404d0e:	6873      	ldr	r3, [r6, #4]
  404d10:	f8df c068 	ldr.w	ip, [pc, #104]	; 404d7c <Gait2+0x29c>
  404d14:	47e0      	blx	ip
  404d16:	ab08      	add	r3, sp, #32
  404d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  404d1c:	e888 0007 	stmia.w	r8, {r0, r1, r2}

void Gait2( float* ofst,XZ* xzS,angles* Ang, walk_data* hexabot_walk) {
	float grad = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	float grad2 = (float)(2.00 * 2.00 * (double)((*hexabot_walk).stride));
	
	for(int i = 0; i < 6; i++) {
  404d20:	3401      	adds	r4, #1
  404d22:	3608      	adds	r6, #8
  404d24:	f108 080c 	add.w	r8, r8, #12
  404d28:	2c06      	cmp	r4, #6
  404d2a:	f47f aefe 	bne.w	404b2a <Gait2+0x4a>
			xzS[i] = calcRotation((float)hexabot_walk->stance,( ((float)(hexabot_walk->stride) - (float)(grad2*(ofst[i] - 3.00/6.00))) ) , hexabot_walk->stance, 0, hexabot_walk->movDir,(i%2 == 0)?0:1,hexabot_walk->movTurn);
			Ang[i] = legAngCalc(xzS[i].X,(-hexabot_walk->hgt+hexabot_walk->pup*sin((ofst[i] - 3.00/6.00)*2*M_PI)),xzS[i].Z);
		}
		//Calcuate the required angles for XZ posistions!
	}
}
  404d2e:	b00f      	add	sp, #60	; 0x3c
  404d30:	ecbd 8b0c 	vpop	{d8-d13}
  404d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
  404d40:	54442d18 	.word	0x54442d18
  404d44:	400921fb 	.word	0x400921fb
  404d48:	0040a43d 	.word	0x0040a43d
  404d4c:	40100000 	.word	0x40100000
  404d50:	0040a509 	.word	0x0040a509
  404d54:	0040aa8d 	.word	0x0040aa8d
  404d58:	0040a461 	.word	0x0040a461
  404d5c:	00000000 	.word	0x00000000
  404d60:	3fe00000 	.word	0x3fe00000
  404d64:	0040a1a5 	.word	0x0040a1a5
  404d68:	0040a1a1 	.word	0x0040a1a1
  404d6c:	004079fd 	.word	0x004079fd
  404d70:	00407c3d 	.word	0x00407c3d
  404d74:	0040a75d 	.word	0x0040a75d
  404d78:	004057e1 	.word	0x004057e1
  404d7c:	00405a11 	.word	0x00405a11

00404d80 <SdramCheck>:
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to disable
 */
static inline void isi_disable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IDR = flag;
  404d80:	4b1c      	ldr	r3, [pc, #112]	; (404df4 <SdramCheck+0x74>)
  404d82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  404d86:	631a      	str	r2, [r3, #48]	; 0x30
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  404d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404d8a:	f042 0201 	orr.w	r2, r2, #1
  404d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  404d90:	4a19      	ldr	r2, [pc, #100]	; (404df8 <SdramCheck+0x78>)

//SDRAM CHECK
void SdramCheck() {
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
  404d92:	2300      	movs	r3, #0
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
  404d94:	f822 3f02 	strh.w	r3, [r2, #2]!
		T++;
  404d98:	3301      	adds	r3, #1
	isi_disable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_disable(ISI,1);
	int T=0;
	int cleanTest = 1;
	char buf[20];
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  404d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  404d9e:	d1f9      	bne.n	404d94 <SdramCheck+0x14>
#define REG_AECHM		0xa1	/* Exposure value - bits AEC[15:10] */
#define REG_BD50ST		0xa2	/* Banding filter value for 50Hz */
#define REG_BD60ST		0xa3	/* Banding filter value for 60Hz */

//SDRAM CHECK
void SdramCheck() {
  404da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404da4:	b088      	sub	sp, #32
  404da6:	4d14      	ldr	r5, [pc, #80]	; (404df8 <SdramCheck+0x78>)
  404da8:	2101      	movs	r1, #1
  404daa:	2400      	movs	r4, #0
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  404dac:	f8df 8058 	ldr.w	r8, [pc, #88]	; 404e08 <SdramCheck+0x88>
  404db0:	4f12      	ldr	r7, [pc, #72]	; (404dfc <SdramCheck+0x7c>)
			sendDebugString(buf);
  404db2:	4e13      	ldr	r6, [pc, #76]	; (404e00 <SdramCheck+0x80>)
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
		if(((uint16_t*)BOARD_SDRAM_ADDR)[i] != (T&0xFFFF)){
  404db4:	f835 2f02 	ldrh.w	r2, [r5, #2]!
  404db8:	b2a3      	uxth	r3, r4
  404dba:	429a      	cmp	r2, r3
  404dbc:	d007      	beq.n	404dce <SdramCheck+0x4e>
			sprintf(buf,"MEM ERROR AT 0x%x : EXP:0x%x , RCV: 0x%x \n",i,(T&0xFFFF),((uint16_t*)BOARD_SDRAM_ADDR)[i]);
  404dbe:	9200      	str	r2, [sp, #0]
  404dc0:	a803      	add	r0, sp, #12
  404dc2:	4641      	mov	r1, r8
  404dc4:	4622      	mov	r2, r4
  404dc6:	47b8      	blx	r7
			sendDebugString(buf);
  404dc8:	a803      	add	r0, sp, #12
  404dca:	47b0      	blx	r6
			cleanTest = 0;
  404dcc:	2100      	movs	r1, #0
		}
		T++;
  404dce:	3401      	adds	r4, #1
		((uint16_t*)BOARD_SDRAM_ADDR)[i] = T;
		T++;
	}
	
	T=0;
	for(int i = 0;i<BOARD_SDRAM_ADDR_NUM;i++) {
  404dd0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
  404dd4:	d1ee      	bne.n	404db4 <SdramCheck+0x34>
			sendDebugString(buf);
			cleanTest = 0;
		}
		T++;
	}
	if(cleanTest) sendDebugString("SDRAM FULL CHECK COMPLETE");
  404dd6:	b111      	cbz	r1, 404dde <SdramCheck+0x5e>
  404dd8:	480a      	ldr	r0, [pc, #40]	; (404e04 <SdramCheck+0x84>)
  404dda:	4b09      	ldr	r3, [pc, #36]	; (404e00 <SdramCheck+0x80>)
  404ddc:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  404dde:	4b05      	ldr	r3, [pc, #20]	; (404df4 <SdramCheck+0x74>)
  404de0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  404de4:	62da      	str	r2, [r3, #44]	; 0x2c
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  404de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404de8:	f042 0201 	orr.w	r2, r2, #1
  404dec:	639a      	str	r2, [r3, #56]	; 0x38
	isi_enable_interrupt(ISI,1<<16|1<<17);
	isi_dma_channel_enable(ISI,1);
}
  404dee:	b008      	add	sp, #32
  404df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404df4:	4004c000 	.word	0x4004c000
  404df8:	6ffffffe 	.word	0x6ffffffe
  404dfc:	0040b3d9 	.word	0x0040b3d9
  404e00:	0040019d 	.word	0x0040019d
  404e04:	00412ce0 	.word	0x00412ce0
  404e08:	00412cb4 	.word	0x00412cb4

00404e0c <i2cWriteReg>:

//I2C interfacing
void i2cWriteReg(uint8_t chipin,uint8_t reg,uint8_t val) {
  404e0c:	b500      	push	{lr}
  404e0e:	b089      	sub	sp, #36	; 0x24
  404e10:	f88d 2007 	strb.w	r2, [sp, #7]
	int writeVal = val;
	twihs_packet_t ledApacket = {
  404e14:	2300      	movs	r3, #0
  404e16:	9303      	str	r3, [sp, #12]
  404e18:	9307      	str	r3, [sp, #28]
  404e1a:	f88d 100c 	strb.w	r1, [sp, #12]
  404e1e:	2301      	movs	r3, #1
  404e20:	9304      	str	r3, [sp, #16]
  404e22:	f10d 0207 	add.w	r2, sp, #7
  404e26:	9205      	str	r2, [sp, #20]
  404e28:	9306      	str	r3, [sp, #24]
  404e2a:	f88d 001c 	strb.w	r0, [sp, #28]
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &val,
	.length = 1 };
	
	if(twihs_master_write(TWIHS0,&ledApacket) != TWIHS_SUCCESS) {
  404e2e:	4805      	ldr	r0, [pc, #20]	; (404e44 <i2cWriteReg+0x38>)
  404e30:	a903      	add	r1, sp, #12
  404e32:	4b05      	ldr	r3, [pc, #20]	; (404e48 <i2cWriteReg+0x3c>)
  404e34:	4798      	blx	r3
  404e36:	b110      	cbz	r0, 404e3e <i2cWriteReg+0x32>
		sendDebugString("I2C ERR!\n");
  404e38:	4804      	ldr	r0, [pc, #16]	; (404e4c <i2cWriteReg+0x40>)
  404e3a:	4b05      	ldr	r3, [pc, #20]	; (404e50 <i2cWriteReg+0x44>)
  404e3c:	4798      	blx	r3
	}
}
  404e3e:	b009      	add	sp, #36	; 0x24
  404e40:	f85d fb04 	ldr.w	pc, [sp], #4
  404e44:	40018000 	.word	0x40018000
  404e48:	00402c45 	.word	0x00402c45
  404e4c:	00412cfc 	.word	0x00412cfc
  404e50:	0040019d 	.word	0x0040019d

00404e54 <i2cReadReg>:

int i2cReadReg(uint8_t chipin,uint8_t reg) {
  404e54:	b500      	push	{lr}
  404e56:	b087      	sub	sp, #28
	int retVal = 0;
  404e58:	2300      	movs	r3, #0
  404e5a:	9305      	str	r3, [sp, #20]
	twihs_packet_t ledApacket = {
  404e5c:	9300      	str	r3, [sp, #0]
  404e5e:	9304      	str	r3, [sp, #16]
  404e60:	f88d 1000 	strb.w	r1, [sp]
  404e64:	2301      	movs	r3, #1
  404e66:	9301      	str	r3, [sp, #4]
  404e68:	aa05      	add	r2, sp, #20
  404e6a:	9202      	str	r2, [sp, #8]
  404e6c:	9303      	str	r3, [sp, #12]
  404e6e:	f88d 0010 	strb.w	r0, [sp, #16]
		.addr[0] = reg,
		.addr_length = 1,
		.chip = (chipin),
		.buffer = &retVal,
	.length = 1 };
	twihs_master_read(TWIHS0,&ledApacket);
  404e72:	4804      	ldr	r0, [pc, #16]	; (404e84 <i2cReadReg+0x30>)
  404e74:	4669      	mov	r1, sp
  404e76:	4b04      	ldr	r3, [pc, #16]	; (404e88 <i2cReadReg+0x34>)
  404e78:	4798      	blx	r3
	return retVal;
}
  404e7a:	9805      	ldr	r0, [sp, #20]
  404e7c:	b007      	add	sp, #28
  404e7e:	f85d fb04 	ldr.w	pc, [sp], #4
  404e82:	bf00      	nop
  404e84:	40018000 	.word	0x40018000
  404e88:	00402ae9 	.word	0x00402ae9

00404e8c <ServoDriverInit>:

void ServoDriverInit(int ServoAddr) {
  404e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e90:	b086      	sub	sp, #24
	char buf[20];
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x00));
  404e92:	b2c4      	uxtb	r4, r0
  404e94:	4620      	mov	r0, r4
  404e96:	2100      	movs	r1, #0
  404e98:	4f2a      	ldr	r7, [pc, #168]	; (404f44 <ServoDriverInit+0xb8>)
  404e9a:	47b8      	blx	r7
  404e9c:	4602      	mov	r2, r0
  404e9e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 404f5c <ServoDriverInit+0xd0>
  404ea2:	a801      	add	r0, sp, #4
  404ea4:	4641      	mov	r1, r8
  404ea6:	4d28      	ldr	r5, [pc, #160]	; (404f48 <ServoDriverInit+0xbc>)
  404ea8:	47a8      	blx	r5
	sendDebugString(buf);
  404eaa:	a801      	add	r0, sp, #4
  404eac:	4e27      	ldr	r6, [pc, #156]	; (404f4c <ServoDriverInit+0xc0>)
  404eae:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x01));
  404eb0:	4620      	mov	r0, r4
  404eb2:	2101      	movs	r1, #1
  404eb4:	47b8      	blx	r7
  404eb6:	4602      	mov	r2, r0
  404eb8:	a801      	add	r0, sp, #4
  404eba:	4641      	mov	r1, r8
  404ebc:	47a8      	blx	r5
	sendDebugString(buf);
  404ebe:	a801      	add	r0, sp, #4
  404ec0:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0x1E));
  404ec2:	4620      	mov	r0, r4
  404ec4:	211e      	movs	r1, #30
  404ec6:	47b8      	blx	r7
  404ec8:	4602      	mov	r2, r0
  404eca:	a801      	add	r0, sp, #4
  404ecc:	4641      	mov	r1, r8
  404ece:	47a8      	blx	r5
	sendDebugString(buf);
  404ed0:	a801      	add	r0, sp, #4
  404ed2:	47b0      	blx	r6
	sprintf(buf,"%x, ",i2cReadReg(ServoAddr,0xFE));
  404ed4:	4620      	mov	r0, r4
  404ed6:	21fe      	movs	r1, #254	; 0xfe
  404ed8:	47b8      	blx	r7
  404eda:	4602      	mov	r2, r0
  404edc:	a801      	add	r0, sp, #4
  404ede:	4641      	mov	r1, r8
  404ee0:	47a8      	blx	r5
	sendDebugString(buf);
  404ee2:	a801      	add	r0, sp, #4
  404ee4:	47b0      	blx	r6
	
	delay_ms(1);
  404ee6:	f24c 508e 	movw	r0, #50574	; 0xc58e
  404eea:	4f19      	ldr	r7, [pc, #100]	; (404f50 <ServoDriverInit+0xc4>)
  404eec:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  404eee:	4620      	mov	r0, r4
  404ef0:	2100      	movs	r1, #0
  404ef2:	2210      	movs	r2, #16
  404ef4:	4d17      	ldr	r5, [pc, #92]	; (404f54 <ServoDriverInit+0xc8>)
  404ef6:	47a8      	blx	r5
	delay_ms(2);
  404ef8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 404f60 <ServoDriverInit+0xd4>
  404efc:	4640      	mov	r0, r8
  404efe:	47b8      	blx	r7
	//The following line was changed from a reg value of 0x80 to 0x1E, resulting in a longest pulse of 5ms from 20ms
	i2cWriteReg(ServoAddr,0xFE,0x1E);
  404f00:	4620      	mov	r0, r4
  404f02:	21fe      	movs	r1, #254	; 0xfe
  404f04:	221e      	movs	r2, #30
  404f06:	47a8      	blx	r5
	delay_ms(2);
  404f08:	4640      	mov	r0, r8
  404f0a:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x00);
  404f0c:	4620      	mov	r0, r4
  404f0e:	2100      	movs	r1, #0
  404f10:	460a      	mov	r2, r1
  404f12:	47a8      	blx	r5
	
	i2cWriteReg(ServoAddr,0x00,0x01<<4);
  404f14:	4620      	mov	r0, r4
  404f16:	2100      	movs	r1, #0
  404f18:	2210      	movs	r2, #16
  404f1a:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x01,0x04);
  404f1c:	4620      	mov	r0, r4
  404f1e:	2101      	movs	r1, #1
  404f20:	2204      	movs	r2, #4
  404f22:	47a8      	blx	r5
	i2cWriteReg(ServoAddr,0x00,0x00);
  404f24:	4620      	mov	r0, r4
  404f26:	2100      	movs	r1, #0
  404f28:	460a      	mov	r2, r1
  404f2a:	47a8      	blx	r5
	delay_ms(2);
  404f2c:	4640      	mov	r0, r8
  404f2e:	47b8      	blx	r7
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
  404f30:	4620      	mov	r0, r4
  404f32:	2100      	movs	r1, #0
  404f34:	2280      	movs	r2, #128	; 0x80
  404f36:	47a8      	blx	r5
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
  404f38:	4807      	ldr	r0, [pc, #28]	; (404f58 <ServoDriverInit+0xcc>)
  404f3a:	47b0      	blx	r6
}
  404f3c:	b006      	add	sp, #24
  404f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f42:	bf00      	nop
  404f44:	00404e55 	.word	0x00404e55
  404f48:	0040b3d9 	.word	0x0040b3d9
  404f4c:	0040019d 	.word	0x0040019d
  404f50:	20400001 	.word	0x20400001
  404f54:	00404e0d 	.word	0x00404e0d
  404f58:	00412d10 	.word	0x00412d10
  404f5c:	00412d08 	.word	0x00412d08
  404f60:	00018b1b 	.word	0x00018b1b

00404f64 <legGetI2Caddr>:
	memaddr[0] = Ain;
	memaddr[1] = Bin;
}

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
  404f64:	2805      	cmp	r0, #5
  404f66:	d87b      	bhi.n	405060 <legGetI2Caddr+0xfc>
  404f68:	e8df f000 	tbb	[pc, r0]
  404f6c:	3f2b1703 	.word	0x3f2b1703
  404f70:	6753      	.short	0x6753
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
  404f72:	b921      	cbnz	r1, 404f7e <legGetI2Caddr+0x1a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404f74:	2340      	movs	r3, #64	; 0x40
  404f76:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404f78:	231e      	movs	r3, #30
  404f7a:	6053      	str	r3, [r2, #4]
  404f7c:	4770      	bx	lr

void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
  404f7e:	2901      	cmp	r1, #1
  404f80:	d104      	bne.n	404f8c <legGetI2Caddr+0x28>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404f82:	2340      	movs	r3, #64	; 0x40
  404f84:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404f86:	2322      	movs	r3, #34	; 0x22
  404f88:	6053      	str	r3, [r2, #4]
  404f8a:	4770      	bx	lr
void legGetI2Caddr(int Leg,int Svo,int* addr) {
	switch(Leg) {
		case 0:
		if(Svo == 0)	  cpyIn(L0_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
  404f8c:	2902      	cmp	r1, #2
  404f8e:	d167      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404f90:	2340      	movs	r3, #64	; 0x40
  404f92:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404f94:	2326      	movs	r3, #38	; 0x26
  404f96:	6053      	str	r3, [r2, #4]
  404f98:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L0_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
  404f9a:	b921      	cbnz	r1, 404fa6 <legGetI2Caddr+0x42>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404f9c:	2341      	movs	r3, #65	; 0x41
  404f9e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fa0:	2306      	movs	r3, #6
  404fa2:	6053      	str	r3, [r2, #4]
  404fa4:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L0_S2_ADDR,addr);
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
  404fa6:	2901      	cmp	r1, #1
  404fa8:	d104      	bne.n	404fb4 <legGetI2Caddr+0x50>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404faa:	2341      	movs	r3, #65	; 0x41
  404fac:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fae:	230a      	movs	r3, #10
  404fb0:	6053      	str	r3, [r2, #4]
  404fb2:	4770      	bx	lr
		break;
		
		case 1:
		if(Svo == 0)	  cpyIn(L1_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
  404fb4:	2902      	cmp	r1, #2
  404fb6:	d153      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404fb8:	2341      	movs	r3, #65	; 0x41
  404fba:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fbc:	230e      	movs	r3, #14
  404fbe:	6053      	str	r3, [r2, #4]
  404fc0:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L1_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
  404fc2:	b921      	cbnz	r1, 404fce <legGetI2Caddr+0x6a>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404fc4:	2340      	movs	r3, #64	; 0x40
  404fc6:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fc8:	2312      	movs	r3, #18
  404fca:	6053      	str	r3, [r2, #4]
  404fcc:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L1_S2_ADDR,addr);
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
  404fce:	2901      	cmp	r1, #1
  404fd0:	d104      	bne.n	404fdc <legGetI2Caddr+0x78>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404fd2:	2340      	movs	r3, #64	; 0x40
  404fd4:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fd6:	2316      	movs	r3, #22
  404fd8:	6053      	str	r3, [r2, #4]
  404fda:	4770      	bx	lr
		break;
		
		case 2:
		if(Svo == 0)	  cpyIn(L2_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
  404fdc:	2902      	cmp	r1, #2
  404fde:	d13f      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404fe0:	2340      	movs	r3, #64	; 0x40
  404fe2:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404fe4:	231a      	movs	r3, #26
  404fe6:	6053      	str	r3, [r2, #4]
  404fe8:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L2_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
  404fea:	b921      	cbnz	r1, 404ff6 <legGetI2Caddr+0x92>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404fec:	2341      	movs	r3, #65	; 0x41
  404fee:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404ff0:	2312      	movs	r3, #18
  404ff2:	6053      	str	r3, [r2, #4]
  404ff4:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L2_S2_ADDR,addr);
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
  404ff6:	2901      	cmp	r1, #1
  404ff8:	d104      	bne.n	405004 <legGetI2Caddr+0xa0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  404ffa:	2341      	movs	r3, #65	; 0x41
  404ffc:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  404ffe:	2316      	movs	r3, #22
  405000:	6053      	str	r3, [r2, #4]
  405002:	4770      	bx	lr
		break;
		
		case 3:
		if(Svo == 0)	  cpyIn(L3_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
  405004:	2902      	cmp	r1, #2
  405006:	d12b      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405008:	2341      	movs	r3, #65	; 0x41
  40500a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40500c:	231a      	movs	r3, #26
  40500e:	6053      	str	r3, [r2, #4]
  405010:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L3_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
  405012:	b921      	cbnz	r1, 40501e <legGetI2Caddr+0xba>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405014:	2340      	movs	r3, #64	; 0x40
  405016:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405018:	2306      	movs	r3, #6
  40501a:	6053      	str	r3, [r2, #4]
  40501c:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L3_S2_ADDR,addr);
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
  40501e:	2901      	cmp	r1, #1
  405020:	d104      	bne.n	40502c <legGetI2Caddr+0xc8>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405022:	2340      	movs	r3, #64	; 0x40
  405024:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405026:	230a      	movs	r3, #10
  405028:	6053      	str	r3, [r2, #4]
  40502a:	4770      	bx	lr
		break;
		
		case 4:
		if(Svo == 0)	  cpyIn(L4_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
  40502c:	2902      	cmp	r1, #2
  40502e:	d117      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405030:	2340      	movs	r3, #64	; 0x40
  405032:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405034:	230e      	movs	r3, #14
  405036:	6053      	str	r3, [r2, #4]
  405038:	4770      	bx	lr
		else if(Svo == 1) cpyIn(L4_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
  40503a:	b921      	cbnz	r1, 405046 <legGetI2Caddr+0xe2>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40503c:	2341      	movs	r3, #65	; 0x41
  40503e:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  405040:	231e      	movs	r3, #30
  405042:	6053      	str	r3, [r2, #4]
  405044:	4770      	bx	lr
		else if(Svo == 2) cpyIn(L4_S2_ADDR,addr);
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
  405046:	2901      	cmp	r1, #1
  405048:	d104      	bne.n	405054 <legGetI2Caddr+0xf0>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  40504a:	2341      	movs	r3, #65	; 0x41
  40504c:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40504e:	2322      	movs	r3, #34	; 0x22
  405050:	6053      	str	r3, [r2, #4]
  405052:	4770      	bx	lr
		break;
		
		case 5:
		if(Svo == 0)	  cpyIn(L5_S0_ADDR,addr);
		else if(Svo == 1) cpyIn(L5_S1_ADDR,addr);
		else if(Svo == 2) cpyIn(L5_S2_ADDR,addr);
  405054:	2902      	cmp	r1, #2
  405056:	d103      	bne.n	405060 <legGetI2Caddr+0xfc>
	i2cWriteReg(ServoAddr,0x00,0x01<<7);
	sendDebugString("SERVO DRIVER SETUP COMPLEATE\n");
}

void cpyIn(int Ain,int Bin,int* memaddr) {
	memaddr[0] = Ain;
  405058:	2341      	movs	r3, #65	; 0x41
  40505a:	6013      	str	r3, [r2, #0]
	memaddr[1] = Bin;
  40505c:	2326      	movs	r3, #38	; 0x26
  40505e:	6053      	str	r3, [r2, #4]
  405060:	4770      	bx	lr
  405062:	bf00      	nop

00405064 <relaxServo>:
	}
}

//Servo controller wrapper
void relaxServo(int Leg, int svo)
{
  405064:	b510      	push	{r4, lr}
  405066:	b082      	sub	sp, #8
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  405068:	466a      	mov	r2, sp
  40506a:	4b10      	ldr	r3, [pc, #64]	; (4050ac <relaxServo+0x48>)
  40506c:	4798      	blx	r3
	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  40506e:	f89d 0000 	ldrb.w	r0, [sp]
  405072:	f89d 1004 	ldrb.w	r1, [sp, #4]
  405076:	2200      	movs	r2, #0
  405078:	4c0d      	ldr	r4, [pc, #52]	; (4050b0 <relaxServo+0x4c>)
  40507a:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  40507c:	9901      	ldr	r1, [sp, #4]
  40507e:	3101      	adds	r1, #1
  405080:	f89d 0000 	ldrb.w	r0, [sp]
  405084:	b2c9      	uxtb	r1, r1
  405086:	2200      	movs	r2, #0
  405088:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,0x00);
  40508a:	9901      	ldr	r1, [sp, #4]
  40508c:	3102      	adds	r1, #2
  40508e:	f89d 0000 	ldrb.w	r0, [sp]
  405092:	b2c9      	uxtb	r1, r1
  405094:	2200      	movs	r2, #0
  405096:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,0x00);
  405098:	9901      	ldr	r1, [sp, #4]
  40509a:	3103      	adds	r1, #3
  40509c:	f89d 0000 	ldrb.w	r0, [sp]
  4050a0:	b2c9      	uxtb	r1, r1
  4050a2:	2200      	movs	r2, #0
  4050a4:	47a0      	blx	r4
	
	
}
  4050a6:	b002      	add	sp, #8
  4050a8:	bd10      	pop	{r4, pc}
  4050aa:	bf00      	nop
  4050ac:	00404f65 	.word	0x00404f65
  4050b0:	00404e0d 	.word	0x00404e0d
  4050b4:	00000000 	.word	0x00000000

004050b8 <WriteServo>:

void WriteServo(int Leg,int svo,float angle)
{
  4050b8:	b530      	push	{r4, r5, lr}
  4050ba:	ed2d 8b02 	vpush	{d8}
  4050be:	b083      	sub	sp, #12
  4050c0:	4605      	mov	r5, r0
  4050c2:	460c      	mov	r4, r1
  4050c4:	ee08 2a10 	vmov	s16, r2
	//char buf[100];
	int addrData[2];
	legGetI2Caddr(Leg,svo,addrData);
  4050c8:	466a      	mov	r2, sp
  4050ca:	4b2d      	ldr	r3, [pc, #180]	; (405180 <WriteServo+0xc8>)
  4050cc:	4798      	blx	r3
	extern float SvoCal[];
	
	angle = angle - SvoCal[svo*12+2*Leg];
  4050ce:	eb04 0044 	add.w	r0, r4, r4, lsl #1
  4050d2:	eb05 0040 	add.w	r0, r5, r0, lsl #1
  4050d6:	4b2b      	ldr	r3, [pc, #172]	; (405184 <WriteServo+0xcc>)
  4050d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  4050dc:	edd0 7a00 	vldr	s15, [r0]
  4050e0:	ee78 7a67 	vsub.f32	s15, s16, s15
	
	if(svo == 2) angle = 180-angle;
  4050e4:	2c02      	cmp	r4, #2
  4050e6:	d103      	bne.n	4050f0 <WriteServo+0x38>
  4050e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 405188 <WriteServo+0xd0>
  4050ec:	ee77 7a67 	vsub.f32	s15, s14, s15
	
	uint16_t stop = (uint16_t)lroundf( (4095.00/(5.00))*(0.550 + 1.900*(angle/180.00)) );
  4050f0:	ee17 0a90 	vmov	r0, s15
  4050f4:	4b25      	ldr	r3, [pc, #148]	; (40518c <WriteServo+0xd4>)
  4050f6:	4798      	blx	r3
  4050f8:	2200      	movs	r2, #0
  4050fa:	4b25      	ldr	r3, [pc, #148]	; (405190 <WriteServo+0xd8>)
  4050fc:	4c25      	ldr	r4, [pc, #148]	; (405194 <WriteServo+0xdc>)
  4050fe:	47a0      	blx	r4
  405100:	4c25      	ldr	r4, [pc, #148]	; (405198 <WriteServo+0xe0>)
  405102:	a319      	add	r3, pc, #100	; (adr r3, 405168 <WriteServo+0xb0>)
  405104:	e9d3 2300 	ldrd	r2, r3, [r3]
  405108:	47a0      	blx	r4
  40510a:	a319      	add	r3, pc, #100	; (adr r3, 405170 <WriteServo+0xb8>)
  40510c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405110:	4d22      	ldr	r5, [pc, #136]	; (40519c <WriteServo+0xe4>)
  405112:	47a8      	blx	r5
  405114:	a318      	add	r3, pc, #96	; (adr r3, 405178 <WriteServo+0xc0>)
  405116:	e9d3 2300 	ldrd	r2, r3, [r3]
  40511a:	47a0      	blx	r4
  40511c:	4b20      	ldr	r3, [pc, #128]	; (4051a0 <WriteServo+0xe8>)
  40511e:	4798      	blx	r3
  405120:	4b20      	ldr	r3, [pc, #128]	; (4051a4 <WriteServo+0xec>)
  405122:	4798      	blx	r3
  405124:	4605      	mov	r5, r0
	//sendDebugString(buf);	
	
	i2cWriteReg(addrData[0],addrData[1],0x00);
  405126:	f89d 0000 	ldrb.w	r0, [sp]
  40512a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40512e:	2200      	movs	r2, #0
  405130:	4c1d      	ldr	r4, [pc, #116]	; (4051a8 <WriteServo+0xf0>)
  405132:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+1,0x00);
  405134:	9901      	ldr	r1, [sp, #4]
  405136:	3101      	adds	r1, #1
  405138:	f89d 0000 	ldrb.w	r0, [sp]
  40513c:	b2c9      	uxtb	r1, r1
  40513e:	2200      	movs	r2, #0
  405140:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+2,stop);
  405142:	9901      	ldr	r1, [sp, #4]
  405144:	3102      	adds	r1, #2
  405146:	f89d 0000 	ldrb.w	r0, [sp]
  40514a:	b2c9      	uxtb	r1, r1
  40514c:	b2ea      	uxtb	r2, r5
  40514e:	47a0      	blx	r4
	i2cWriteReg(addrData[0],addrData[1]+3,stop >> 8);
  405150:	9901      	ldr	r1, [sp, #4]
  405152:	3103      	adds	r1, #3
  405154:	f89d 0000 	ldrb.w	r0, [sp]
  405158:	b2c9      	uxtb	r1, r1
  40515a:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40515e:	47a0      	blx	r4
	
}
  405160:	b003      	add	sp, #12
  405162:	ecbd 8b02 	vpop	{d8}
  405166:	bd30      	pop	{r4, r5, pc}
  405168:	66666666 	.word	0x66666666
  40516c:	3ffe6666 	.word	0x3ffe6666
  405170:	9999999a 	.word	0x9999999a
  405174:	3fe19999 	.word	0x3fe19999
  405178:	00000000 	.word	0x00000000
  40517c:	40899800 	.word	0x40899800
  405180:	00404f65 	.word	0x00404f65
  405184:	20400018 	.word	0x20400018
  405188:	43340000 	.word	0x43340000
  40518c:	0040a461 	.word	0x0040a461
  405190:	40668000 	.word	0x40668000
  405194:	0040a75d 	.word	0x0040a75d
  405198:	0040a509 	.word	0x0040a509
  40519c:	0040a1a5 	.word	0x0040a1a5
  4051a0:	0040aa8d 	.word	0x0040aa8d
  4051a4:	00407a91 	.word	0x00407a91
  4051a8:	00404e0d 	.word	0x00404e0d

004051ac <SetupCameraYUVVGA_OV7670>:
	for(int i = 0;  ov_settings[i][0] != 0xff;i++ ) write_SCCB(ov_settings[i][0],ov_settings[i][1]);
	for(int i = 0; ov_format[i] != 0xff;i++ ) write_SCCB(ov_format[i],ov_vga[1]);
	
}

void SetupCameraYUVVGA_OV7670() {
  4051ac:	b510      	push	{r4, lr}
	//Input clock 24Mhz,0x25fps
	write_SCCB_76(0x12,0x80);
  4051ae:	2021      	movs	r0, #33	; 0x21
  4051b0:	2112      	movs	r1, #18
  4051b2:	2280      	movs	r2, #128	; 0x80
  4051b4:	4cca      	ldr	r4, [pc, #808]	; (4054e0 <SetupCameraYUVVGA_OV7670+0x334>)
  4051b6:	47a0      	blx	r4
	write_SCCB_76(0x11,0x00);
  4051b8:	2021      	movs	r0, #33	; 0x21
  4051ba:	2111      	movs	r1, #17
  4051bc:	2200      	movs	r2, #0
  4051be:	47a0      	blx	r4
	write_SCCB_76(0x3a,0x04);
  4051c0:	2021      	movs	r0, #33	; 0x21
  4051c2:	213a      	movs	r1, #58	; 0x3a
  4051c4:	2204      	movs	r2, #4
  4051c6:	47a0      	blx	r4
	write_SCCB_76(0x12,0x00);
  4051c8:	2021      	movs	r0, #33	; 0x21
  4051ca:	2112      	movs	r1, #18
  4051cc:	2200      	movs	r2, #0
  4051ce:	47a0      	blx	r4
	write_SCCB_76(0x17,0x13);
  4051d0:	2021      	movs	r0, #33	; 0x21
  4051d2:	2117      	movs	r1, #23
  4051d4:	2213      	movs	r2, #19
  4051d6:	47a0      	blx	r4
	write_SCCB_76(0x18,0x01);
  4051d8:	2021      	movs	r0, #33	; 0x21
  4051da:	2118      	movs	r1, #24
  4051dc:	2201      	movs	r2, #1
  4051de:	47a0      	blx	r4
	write_SCCB_76(0x32,0xb6);
  4051e0:	2021      	movs	r0, #33	; 0x21
  4051e2:	2132      	movs	r1, #50	; 0x32
  4051e4:	22b6      	movs	r2, #182	; 0xb6
  4051e6:	47a0      	blx	r4
	write_SCCB_76(0x19,0x02);
  4051e8:	2021      	movs	r0, #33	; 0x21
  4051ea:	2119      	movs	r1, #25
  4051ec:	2202      	movs	r2, #2
  4051ee:	47a0      	blx	r4
	write_SCCB_76(0x1a,0x7a);
  4051f0:	2021      	movs	r0, #33	; 0x21
  4051f2:	211a      	movs	r1, #26
  4051f4:	227a      	movs	r2, #122	; 0x7a
  4051f6:	47a0      	blx	r4
	write_SCCB_76(0x03,0x0a);
  4051f8:	2021      	movs	r0, #33	; 0x21
  4051fa:	2103      	movs	r1, #3
  4051fc:	220a      	movs	r2, #10
  4051fe:	47a0      	blx	r4
	write_SCCB_76(0x0c,0x00);
  405200:	2021      	movs	r0, #33	; 0x21
  405202:	210c      	movs	r1, #12
  405204:	2200      	movs	r2, #0
  405206:	47a0      	blx	r4
	write_SCCB_76(0x3e,0x00);
  405208:	2021      	movs	r0, #33	; 0x21
  40520a:	213e      	movs	r1, #62	; 0x3e
  40520c:	2200      	movs	r2, #0
  40520e:	47a0      	blx	r4
	write_SCCB_76(0x70,0x3a);
  405210:	2021      	movs	r0, #33	; 0x21
  405212:	2170      	movs	r1, #112	; 0x70
  405214:	223a      	movs	r2, #58	; 0x3a
  405216:	47a0      	blx	r4
	write_SCCB_76(0x71,0x35);
  405218:	2021      	movs	r0, #33	; 0x21
  40521a:	2171      	movs	r1, #113	; 0x71
  40521c:	2235      	movs	r2, #53	; 0x35
  40521e:	47a0      	blx	r4
	write_SCCB_76(0x72,0x11);
  405220:	2021      	movs	r0, #33	; 0x21
  405222:	2172      	movs	r1, #114	; 0x72
  405224:	2211      	movs	r2, #17
  405226:	47a0      	blx	r4
	write_SCCB_76(0x73,0xf0);
  405228:	2021      	movs	r0, #33	; 0x21
  40522a:	2173      	movs	r1, #115	; 0x73
  40522c:	22f0      	movs	r2, #240	; 0xf0
  40522e:	47a0      	blx	r4
	write_SCCB_76(0xa2,0x02);
  405230:	2021      	movs	r0, #33	; 0x21
  405232:	21a2      	movs	r1, #162	; 0xa2
  405234:	2202      	movs	r2, #2
  405236:	47a0      	blx	r4
	write_SCCB_76(0x7a,0x20);
  405238:	2021      	movs	r0, #33	; 0x21
  40523a:	217a      	movs	r1, #122	; 0x7a
  40523c:	2220      	movs	r2, #32
  40523e:	47a0      	blx	r4
	write_SCCB_76(0x7b,0x10);
  405240:	2021      	movs	r0, #33	; 0x21
  405242:	217b      	movs	r1, #123	; 0x7b
  405244:	2210      	movs	r2, #16
  405246:	47a0      	blx	r4
	write_SCCB_76(0x7c,0x1e);
  405248:	2021      	movs	r0, #33	; 0x21
  40524a:	217c      	movs	r1, #124	; 0x7c
  40524c:	221e      	movs	r2, #30
  40524e:	47a0      	blx	r4
	write_SCCB_76(0x7d,0x35);
  405250:	2021      	movs	r0, #33	; 0x21
  405252:	217d      	movs	r1, #125	; 0x7d
  405254:	2235      	movs	r2, #53	; 0x35
  405256:	47a0      	blx	r4
	write_SCCB_76(0x7e,0x5a);
  405258:	2021      	movs	r0, #33	; 0x21
  40525a:	217e      	movs	r1, #126	; 0x7e
  40525c:	225a      	movs	r2, #90	; 0x5a
  40525e:	47a0      	blx	r4
	write_SCCB_76(0x7f,0x69);
  405260:	2021      	movs	r0, #33	; 0x21
  405262:	217f      	movs	r1, #127	; 0x7f
  405264:	2269      	movs	r2, #105	; 0x69
  405266:	47a0      	blx	r4
	write_SCCB_76(0x80,0x76);
  405268:	2021      	movs	r0, #33	; 0x21
  40526a:	2180      	movs	r1, #128	; 0x80
  40526c:	2276      	movs	r2, #118	; 0x76
  40526e:	47a0      	blx	r4
	write_SCCB_76(0x81,0x80);
  405270:	2021      	movs	r0, #33	; 0x21
  405272:	2181      	movs	r1, #129	; 0x81
  405274:	2280      	movs	r2, #128	; 0x80
  405276:	47a0      	blx	r4
	write_SCCB_76(0x82,0x88);
  405278:	2021      	movs	r0, #33	; 0x21
  40527a:	2182      	movs	r1, #130	; 0x82
  40527c:	2288      	movs	r2, #136	; 0x88
  40527e:	47a0      	blx	r4
	write_SCCB_76(0x83,0x8f);
  405280:	2021      	movs	r0, #33	; 0x21
  405282:	2183      	movs	r1, #131	; 0x83
  405284:	228f      	movs	r2, #143	; 0x8f
  405286:	47a0      	blx	r4
	write_SCCB_76(0x84,0x96);
  405288:	2021      	movs	r0, #33	; 0x21
  40528a:	2184      	movs	r1, #132	; 0x84
  40528c:	2296      	movs	r2, #150	; 0x96
  40528e:	47a0      	blx	r4
	write_SCCB_76(0x85,0xa3);
  405290:	2021      	movs	r0, #33	; 0x21
  405292:	2185      	movs	r1, #133	; 0x85
  405294:	22a3      	movs	r2, #163	; 0xa3
  405296:	47a0      	blx	r4
	write_SCCB_76(0x86,0xaf);
  405298:	2021      	movs	r0, #33	; 0x21
  40529a:	2186      	movs	r1, #134	; 0x86
  40529c:	22af      	movs	r2, #175	; 0xaf
  40529e:	47a0      	blx	r4
	write_SCCB_76(0x87,0xc4);
  4052a0:	2021      	movs	r0, #33	; 0x21
  4052a2:	2187      	movs	r1, #135	; 0x87
  4052a4:	22c4      	movs	r2, #196	; 0xc4
  4052a6:	47a0      	blx	r4
	write_SCCB_76(0x88,0xd7);
  4052a8:	2021      	movs	r0, #33	; 0x21
  4052aa:	2188      	movs	r1, #136	; 0x88
  4052ac:	22d7      	movs	r2, #215	; 0xd7
  4052ae:	47a0      	blx	r4
	write_SCCB_76(0x89,0xe8);
  4052b0:	2021      	movs	r0, #33	; 0x21
  4052b2:	2189      	movs	r1, #137	; 0x89
  4052b4:	22e8      	movs	r2, #232	; 0xe8
  4052b6:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  4052b8:	2021      	movs	r0, #33	; 0x21
  4052ba:	2113      	movs	r1, #19
  4052bc:	22e7      	movs	r2, #231	; 0xe7
  4052be:	47a0      	blx	r4
	write_SCCB_76(0x01,0x28);
  4052c0:	2021      	movs	r0, #33	; 0x21
  4052c2:	2101      	movs	r1, #1
  4052c4:	2228      	movs	r2, #40	; 0x28
  4052c6:	47a0      	blx	r4
	write_SCCB_76(0x02,0x30);
  4052c8:	2021      	movs	r0, #33	; 0x21
  4052ca:	2102      	movs	r1, #2
  4052cc:	2230      	movs	r2, #48	; 0x30
  4052ce:	47a0      	blx	r4
	write_SCCB_76(0x00,0x00);
  4052d0:	2021      	movs	r0, #33	; 0x21
  4052d2:	2100      	movs	r1, #0
  4052d4:	460a      	mov	r2, r1
  4052d6:	47a0      	blx	r4
	write_SCCB_76(0x10,0x00);
  4052d8:	2021      	movs	r0, #33	; 0x21
  4052da:	2110      	movs	r1, #16
  4052dc:	2200      	movs	r2, #0
  4052de:	47a0      	blx	r4
	write_SCCB_76(0x0d,0x40);
  4052e0:	2021      	movs	r0, #33	; 0x21
  4052e2:	210d      	movs	r1, #13
  4052e4:	2240      	movs	r2, #64	; 0x40
  4052e6:	47a0      	blx	r4
	write_SCCB_76(0x14,0x18);
  4052e8:	2021      	movs	r0, #33	; 0x21
  4052ea:	2114      	movs	r1, #20
  4052ec:	2218      	movs	r2, #24
  4052ee:	47a0      	blx	r4
	write_SCCB_76(0xa5,0x07);
  4052f0:	2021      	movs	r0, #33	; 0x21
  4052f2:	21a5      	movs	r1, #165	; 0xa5
  4052f4:	2207      	movs	r2, #7
  4052f6:	47a0      	blx	r4
	write_SCCB_76(0xab,0x08);
  4052f8:	2021      	movs	r0, #33	; 0x21
  4052fa:	21ab      	movs	r1, #171	; 0xab
  4052fc:	2208      	movs	r2, #8
  4052fe:	47a0      	blx	r4
	write_SCCB_76(0x24,0x95);
  405300:	2021      	movs	r0, #33	; 0x21
  405302:	2124      	movs	r1, #36	; 0x24
  405304:	2295      	movs	r2, #149	; 0x95
  405306:	47a0      	blx	r4
	write_SCCB_76(0x25,0x33);
  405308:	2021      	movs	r0, #33	; 0x21
  40530a:	2125      	movs	r1, #37	; 0x25
  40530c:	2233      	movs	r2, #51	; 0x33
  40530e:	47a0      	blx	r4
	write_SCCB_76(0x26,0xe3);
  405310:	2021      	movs	r0, #33	; 0x21
  405312:	2126      	movs	r1, #38	; 0x26
  405314:	22e3      	movs	r2, #227	; 0xe3
  405316:	47a0      	blx	r4
	write_SCCB_76(0x9f,0x78);
  405318:	2021      	movs	r0, #33	; 0x21
  40531a:	219f      	movs	r1, #159	; 0x9f
  40531c:	2278      	movs	r2, #120	; 0x78
  40531e:	47a0      	blx	r4
	write_SCCB_76(0xa0,0x68);
  405320:	2021      	movs	r0, #33	; 0x21
  405322:	21a0      	movs	r1, #160	; 0xa0
  405324:	2268      	movs	r2, #104	; 0x68
  405326:	47a0      	blx	r4
	write_SCCB_76(0xa1,0x03);
  405328:	2021      	movs	r0, #33	; 0x21
  40532a:	21a1      	movs	r1, #161	; 0xa1
  40532c:	2203      	movs	r2, #3
  40532e:	47a0      	blx	r4
	write_SCCB_76(0xa6,0xd8);
  405330:	2021      	movs	r0, #33	; 0x21
  405332:	21a6      	movs	r1, #166	; 0xa6
  405334:	22d8      	movs	r2, #216	; 0xd8
  405336:	47a0      	blx	r4
	write_SCCB_76(0xa7,0xd8);
  405338:	2021      	movs	r0, #33	; 0x21
  40533a:	21a7      	movs	r1, #167	; 0xa7
  40533c:	22d8      	movs	r2, #216	; 0xd8
  40533e:	47a0      	blx	r4
	write_SCCB_76(0xa8,0xf0);
  405340:	2021      	movs	r0, #33	; 0x21
  405342:	21a8      	movs	r1, #168	; 0xa8
  405344:	22f0      	movs	r2, #240	; 0xf0
  405346:	47a0      	blx	r4
	write_SCCB_76(0xa9,0x90);
  405348:	2021      	movs	r0, #33	; 0x21
  40534a:	21a9      	movs	r1, #169	; 0xa9
  40534c:	2290      	movs	r2, #144	; 0x90
  40534e:	47a0      	blx	r4
	write_SCCB_76(0xaa,0x94);
  405350:	2021      	movs	r0, #33	; 0x21
  405352:	21aa      	movs	r1, #170	; 0xaa
  405354:	2294      	movs	r2, #148	; 0x94
  405356:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  405358:	2021      	movs	r0, #33	; 0x21
  40535a:	2113      	movs	r1, #19
  40535c:	22e7      	movs	r2, #231	; 0xe7
  40535e:	47a0      	blx	r4
	write_SCCB_76(0x0e,0x61);
  405360:	2021      	movs	r0, #33	; 0x21
  405362:	210e      	movs	r1, #14
  405364:	2261      	movs	r2, #97	; 0x61
  405366:	47a0      	blx	r4
	write_SCCB_76(0x0f,0x4b);
  405368:	2021      	movs	r0, #33	; 0x21
  40536a:	210f      	movs	r1, #15
  40536c:	224b      	movs	r2, #75	; 0x4b
  40536e:	47a0      	blx	r4
	write_SCCB_76(0x16,0x02);
  405370:	2021      	movs	r0, #33	; 0x21
  405372:	2116      	movs	r1, #22
  405374:	2202      	movs	r2, #2
  405376:	47a0      	blx	r4
	write_SCCB_76(0x1e,0x07);
  405378:	2021      	movs	r0, #33	; 0x21
  40537a:	211e      	movs	r1, #30
  40537c:	2207      	movs	r2, #7
  40537e:	47a0      	blx	r4
	write_SCCB_76(0x21,0x02);
  405380:	2021      	movs	r0, #33	; 0x21
  405382:	4601      	mov	r1, r0
  405384:	2202      	movs	r2, #2
  405386:	47a0      	blx	r4
	write_SCCB_76(0x22,0x91);
  405388:	2021      	movs	r0, #33	; 0x21
  40538a:	2122      	movs	r1, #34	; 0x22
  40538c:	2291      	movs	r2, #145	; 0x91
  40538e:	47a0      	blx	r4
	write_SCCB_76(0x29,0x07);
  405390:	2021      	movs	r0, #33	; 0x21
  405392:	2129      	movs	r1, #41	; 0x29
  405394:	2207      	movs	r2, #7
  405396:	47a0      	blx	r4
	write_SCCB_76(0x33,0x0b);
  405398:	2021      	movs	r0, #33	; 0x21
  40539a:	2133      	movs	r1, #51	; 0x33
  40539c:	220b      	movs	r2, #11
  40539e:	47a0      	blx	r4
	write_SCCB_76(0x35,0x0b);
  4053a0:	2021      	movs	r0, #33	; 0x21
  4053a2:	2135      	movs	r1, #53	; 0x35
  4053a4:	220b      	movs	r2, #11
  4053a6:	47a0      	blx	r4
	write_SCCB_76(0x37,0x1d);
  4053a8:	2021      	movs	r0, #33	; 0x21
  4053aa:	2137      	movs	r1, #55	; 0x37
  4053ac:	221d      	movs	r2, #29
  4053ae:	47a0      	blx	r4
	write_SCCB_76(0x38,0x71);
  4053b0:	2021      	movs	r0, #33	; 0x21
  4053b2:	2138      	movs	r1, #56	; 0x38
  4053b4:	2271      	movs	r2, #113	; 0x71
  4053b6:	47a0      	blx	r4
	write_SCCB_76(0x39,0x2a);
  4053b8:	2021      	movs	r0, #33	; 0x21
  4053ba:	2139      	movs	r1, #57	; 0x39
  4053bc:	222a      	movs	r2, #42	; 0x2a
  4053be:	47a0      	blx	r4
	write_SCCB_76(0x3c,0x78);
  4053c0:	2021      	movs	r0, #33	; 0x21
  4053c2:	213c      	movs	r1, #60	; 0x3c
  4053c4:	2278      	movs	r2, #120	; 0x78
  4053c6:	47a0      	blx	r4
	write_SCCB_76(0x4d,0x40);
  4053c8:	2021      	movs	r0, #33	; 0x21
  4053ca:	214d      	movs	r1, #77	; 0x4d
  4053cc:	2240      	movs	r2, #64	; 0x40
  4053ce:	47a0      	blx	r4
	write_SCCB_76(0x4e,0x20);
  4053d0:	2021      	movs	r0, #33	; 0x21
  4053d2:	214e      	movs	r1, #78	; 0x4e
  4053d4:	2220      	movs	r2, #32
  4053d6:	47a0      	blx	r4
	write_SCCB_76(0x69,0x00);
  4053d8:	2021      	movs	r0, #33	; 0x21
  4053da:	2169      	movs	r1, #105	; 0x69
  4053dc:	2200      	movs	r2, #0
  4053de:	47a0      	blx	r4
	write_SCCB_76(0x6b,0x0a);
  4053e0:	2021      	movs	r0, #33	; 0x21
  4053e2:	216b      	movs	r1, #107	; 0x6b
  4053e4:	220a      	movs	r2, #10
  4053e6:	47a0      	blx	r4
	write_SCCB_76(0x74,0x10);
  4053e8:	2021      	movs	r0, #33	; 0x21
  4053ea:	2174      	movs	r1, #116	; 0x74
  4053ec:	2210      	movs	r2, #16
  4053ee:	47a0      	blx	r4
	write_SCCB_76(0x8d,0x4f);
  4053f0:	2021      	movs	r0, #33	; 0x21
  4053f2:	218d      	movs	r1, #141	; 0x8d
  4053f4:	224f      	movs	r2, #79	; 0x4f
  4053f6:	47a0      	blx	r4
	write_SCCB_76(0x8e,0x00);
  4053f8:	2021      	movs	r0, #33	; 0x21
  4053fa:	218e      	movs	r1, #142	; 0x8e
  4053fc:	2200      	movs	r2, #0
  4053fe:	47a0      	blx	r4
	write_SCCB_76(0x8f,0x00);
  405400:	2021      	movs	r0, #33	; 0x21
  405402:	218f      	movs	r1, #143	; 0x8f
  405404:	2200      	movs	r2, #0
  405406:	47a0      	blx	r4
	write_SCCB_76(0x90,0x00);
  405408:	2021      	movs	r0, #33	; 0x21
  40540a:	2190      	movs	r1, #144	; 0x90
  40540c:	2200      	movs	r2, #0
  40540e:	47a0      	blx	r4
	write_SCCB_76(0x91,0x00);
  405410:	2021      	movs	r0, #33	; 0x21
  405412:	2191      	movs	r1, #145	; 0x91
  405414:	2200      	movs	r2, #0
  405416:	47a0      	blx	r4
	write_SCCB_76(0x92,0x66);
  405418:	2021      	movs	r0, #33	; 0x21
  40541a:	2192      	movs	r1, #146	; 0x92
  40541c:	2266      	movs	r2, #102	; 0x66
  40541e:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  405420:	2021      	movs	r0, #33	; 0x21
  405422:	2196      	movs	r1, #150	; 0x96
  405424:	2200      	movs	r2, #0
  405426:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x80);
  405428:	2021      	movs	r0, #33	; 0x21
  40542a:	219a      	movs	r1, #154	; 0x9a
  40542c:	2280      	movs	r2, #128	; 0x80
  40542e:	47a0      	blx	r4
	write_SCCB_76(0xb0,0x84);
  405430:	2021      	movs	r0, #33	; 0x21
  405432:	21b0      	movs	r1, #176	; 0xb0
  405434:	2284      	movs	r2, #132	; 0x84
  405436:	47a0      	blx	r4
	write_SCCB_76(0xb1,0x0c);
  405438:	2021      	movs	r0, #33	; 0x21
  40543a:	21b1      	movs	r1, #177	; 0xb1
  40543c:	220c      	movs	r2, #12
  40543e:	47a0      	blx	r4
	write_SCCB_76(0xb2,0x0e);
  405440:	2021      	movs	r0, #33	; 0x21
  405442:	21b2      	movs	r1, #178	; 0xb2
  405444:	220e      	movs	r2, #14
  405446:	47a0      	blx	r4
	write_SCCB_76(0xb3,0x82);
  405448:	2021      	movs	r0, #33	; 0x21
  40544a:	21b3      	movs	r1, #179	; 0xb3
  40544c:	2282      	movs	r2, #130	; 0x82
  40544e:	47a0      	blx	r4
	write_SCCB_76(0xb8,0x0a);
  405450:	2021      	movs	r0, #33	; 0x21
  405452:	21b8      	movs	r1, #184	; 0xb8
  405454:	220a      	movs	r2, #10
  405456:	47a0      	blx	r4
	write_SCCB_76(0x43,0x14);
  405458:	2021      	movs	r0, #33	; 0x21
  40545a:	2143      	movs	r1, #67	; 0x43
  40545c:	2214      	movs	r2, #20
  40545e:	47a0      	blx	r4
	write_SCCB_76(0x44,0xf0);
  405460:	2021      	movs	r0, #33	; 0x21
  405462:	2144      	movs	r1, #68	; 0x44
  405464:	22f0      	movs	r2, #240	; 0xf0
  405466:	47a0      	blx	r4
	write_SCCB_76(0x45,0x34);
  405468:	2021      	movs	r0, #33	; 0x21
  40546a:	2145      	movs	r1, #69	; 0x45
  40546c:	2234      	movs	r2, #52	; 0x34
  40546e:	47a0      	blx	r4
	write_SCCB_76(0x46,0x58);
  405470:	2021      	movs	r0, #33	; 0x21
  405472:	2146      	movs	r1, #70	; 0x46
  405474:	2258      	movs	r2, #88	; 0x58
  405476:	47a0      	blx	r4
	write_SCCB_76(0x47,0x28);
  405478:	2021      	movs	r0, #33	; 0x21
  40547a:	2147      	movs	r1, #71	; 0x47
  40547c:	2228      	movs	r2, #40	; 0x28
  40547e:	47a0      	blx	r4
	write_SCCB_76(0x48,0x3a);
  405480:	2021      	movs	r0, #33	; 0x21
  405482:	2148      	movs	r1, #72	; 0x48
  405484:	223a      	movs	r2, #58	; 0x3a
  405486:	47a0      	blx	r4
	write_SCCB_76(0x59,0x88);
  405488:	2021      	movs	r0, #33	; 0x21
  40548a:	2159      	movs	r1, #89	; 0x59
  40548c:	2288      	movs	r2, #136	; 0x88
  40548e:	47a0      	blx	r4
	write_SCCB_76(0x5a,0x88);
  405490:	2021      	movs	r0, #33	; 0x21
  405492:	215a      	movs	r1, #90	; 0x5a
  405494:	2288      	movs	r2, #136	; 0x88
  405496:	47a0      	blx	r4
	write_SCCB_76(0x5b,0x44);
  405498:	2021      	movs	r0, #33	; 0x21
  40549a:	215b      	movs	r1, #91	; 0x5b
  40549c:	2244      	movs	r2, #68	; 0x44
  40549e:	47a0      	blx	r4
	write_SCCB_76(0x5c,0x67);
  4054a0:	2021      	movs	r0, #33	; 0x21
  4054a2:	215c      	movs	r1, #92	; 0x5c
  4054a4:	2267      	movs	r2, #103	; 0x67
  4054a6:	47a0      	blx	r4
	write_SCCB_76(0x5d,0x49);
  4054a8:	2021      	movs	r0, #33	; 0x21
  4054aa:	215d      	movs	r1, #93	; 0x5d
  4054ac:	2249      	movs	r2, #73	; 0x49
  4054ae:	47a0      	blx	r4
	write_SCCB_76(0x5e,0x0e);
  4054b0:	2021      	movs	r0, #33	; 0x21
  4054b2:	215e      	movs	r1, #94	; 0x5e
  4054b4:	220e      	movs	r2, #14
  4054b6:	47a0      	blx	r4
	write_SCCB_76(0x64,0x04);
  4054b8:	2021      	movs	r0, #33	; 0x21
  4054ba:	2164      	movs	r1, #100	; 0x64
  4054bc:	2204      	movs	r2, #4
  4054be:	47a0      	blx	r4
	write_SCCB_76(0x65,0x20);
  4054c0:	2021      	movs	r0, #33	; 0x21
  4054c2:	2165      	movs	r1, #101	; 0x65
  4054c4:	2220      	movs	r2, #32
  4054c6:	47a0      	blx	r4
	write_SCCB_76(0x66,0x05);
  4054c8:	2021      	movs	r0, #33	; 0x21
  4054ca:	2166      	movs	r1, #102	; 0x66
  4054cc:	2205      	movs	r2, #5
  4054ce:	47a0      	blx	r4
	write_SCCB_76(0x94,0x04);
  4054d0:	2021      	movs	r0, #33	; 0x21
  4054d2:	2194      	movs	r1, #148	; 0x94
  4054d4:	2204      	movs	r2, #4
  4054d6:	47a0      	blx	r4
	write_SCCB_76(0x95,0x08);
  4054d8:	2021      	movs	r0, #33	; 0x21
  4054da:	2195      	movs	r1, #149	; 0x95
  4054dc:	2208      	movs	r2, #8
  4054de:	e001      	b.n	4054e4 <SetupCameraYUVVGA_OV7670+0x338>
  4054e0:	00404e0d 	.word	0x00404e0d
  4054e4:	47a0      	blx	r4
	write_SCCB_76(0x6c,0x0a);
  4054e6:	2021      	movs	r0, #33	; 0x21
  4054e8:	216c      	movs	r1, #108	; 0x6c
  4054ea:	220a      	movs	r2, #10
  4054ec:	47a0      	blx	r4
	write_SCCB_76(0x6d,0x55);
  4054ee:	2021      	movs	r0, #33	; 0x21
  4054f0:	216d      	movs	r1, #109	; 0x6d
  4054f2:	2255      	movs	r2, #85	; 0x55
  4054f4:	47a0      	blx	r4
	write_SCCB_76(0x6e,0x11);
  4054f6:	2021      	movs	r0, #33	; 0x21
  4054f8:	216e      	movs	r1, #110	; 0x6e
  4054fa:	2211      	movs	r2, #17
  4054fc:	47a0      	blx	r4
	write_SCCB_76(0x6f,0x9e);
  4054fe:	2021      	movs	r0, #33	; 0x21
  405500:	216f      	movs	r1, #111	; 0x6f
  405502:	229e      	movs	r2, #158	; 0x9e
  405504:	47a0      	blx	r4
	write_SCCB_76(0x6a,0x40);
  405506:	2021      	movs	r0, #33	; 0x21
  405508:	216a      	movs	r1, #106	; 0x6a
  40550a:	2240      	movs	r2, #64	; 0x40
  40550c:	47a0      	blx	r4
	write_SCCB_76(0x01,0x20);
  40550e:	2021      	movs	r0, #33	; 0x21
  405510:	2101      	movs	r1, #1
  405512:	2220      	movs	r2, #32
  405514:	47a0      	blx	r4
	write_SCCB_76(0x02,0x20);
  405516:	2021      	movs	r0, #33	; 0x21
  405518:	2102      	movs	r1, #2
  40551a:	2220      	movs	r2, #32
  40551c:	47a0      	blx	r4
	write_SCCB_76(0x13,0xe7);
  40551e:	2021      	movs	r0, #33	; 0x21
  405520:	2113      	movs	r1, #19
  405522:	22e7      	movs	r2, #231	; 0xe7
  405524:	47a0      	blx	r4
	write_SCCB_76(0x4f,0x80);
  405526:	2021      	movs	r0, #33	; 0x21
  405528:	214f      	movs	r1, #79	; 0x4f
  40552a:	2280      	movs	r2, #128	; 0x80
  40552c:	47a0      	blx	r4
	write_SCCB_76(0x50,0x80);
  40552e:	2021      	movs	r0, #33	; 0x21
  405530:	2150      	movs	r1, #80	; 0x50
  405532:	2280      	movs	r2, #128	; 0x80
  405534:	47a0      	blx	r4
	write_SCCB_76(0x51,0x00);
  405536:	2021      	movs	r0, #33	; 0x21
  405538:	2151      	movs	r1, #81	; 0x51
  40553a:	2200      	movs	r2, #0
  40553c:	47a0      	blx	r4
	write_SCCB_76(0x52,0x22);
  40553e:	2021      	movs	r0, #33	; 0x21
  405540:	2152      	movs	r1, #82	; 0x52
  405542:	2222      	movs	r2, #34	; 0x22
  405544:	47a0      	blx	r4
	write_SCCB_76(0x53,0x5e);
  405546:	2021      	movs	r0, #33	; 0x21
  405548:	2153      	movs	r1, #83	; 0x53
  40554a:	225e      	movs	r2, #94	; 0x5e
  40554c:	47a0      	blx	r4
	write_SCCB_76(0x54,0x80);
  40554e:	2021      	movs	r0, #33	; 0x21
  405550:	2154      	movs	r1, #84	; 0x54
  405552:	2280      	movs	r2, #128	; 0x80
  405554:	47a0      	blx	r4
	write_SCCB_76(0x58,0x9e);
  405556:	2021      	movs	r0, #33	; 0x21
  405558:	2158      	movs	r1, #88	; 0x58
  40555a:	229e      	movs	r2, #158	; 0x9e
  40555c:	47a0      	blx	r4
	write_SCCB_76(0x41,0x08);
  40555e:	2021      	movs	r0, #33	; 0x21
  405560:	2141      	movs	r1, #65	; 0x41
  405562:	2208      	movs	r2, #8
  405564:	47a0      	blx	r4
	write_SCCB_76(0x3f,0x00);
  405566:	2021      	movs	r0, #33	; 0x21
  405568:	213f      	movs	r1, #63	; 0x3f
  40556a:	2200      	movs	r2, #0
  40556c:	47a0      	blx	r4
	write_SCCB_76(0x75,0x03);
  40556e:	2021      	movs	r0, #33	; 0x21
  405570:	2175      	movs	r1, #117	; 0x75
  405572:	2203      	movs	r2, #3
  405574:	47a0      	blx	r4
	write_SCCB_76(0x76,0xe1);
  405576:	2021      	movs	r0, #33	; 0x21
  405578:	2176      	movs	r1, #118	; 0x76
  40557a:	22e1      	movs	r2, #225	; 0xe1
  40557c:	47a0      	blx	r4
	write_SCCB_76(0x4c,0x00);
  40557e:	2021      	movs	r0, #33	; 0x21
  405580:	214c      	movs	r1, #76	; 0x4c
  405582:	2200      	movs	r2, #0
  405584:	47a0      	blx	r4
	write_SCCB_76(0x77,0x00);
  405586:	2021      	movs	r0, #33	; 0x21
  405588:	2177      	movs	r1, #119	; 0x77
  40558a:	2200      	movs	r2, #0
  40558c:	47a0      	blx	r4
	write_SCCB_76(0x3d,0x00);
  40558e:	2021      	movs	r0, #33	; 0x21
  405590:	213d      	movs	r1, #61	; 0x3d
  405592:	2200      	movs	r2, #0
  405594:	47a0      	blx	r4
	write_SCCB_76(0x4b,0x09);
  405596:	2021      	movs	r0, #33	; 0x21
  405598:	214b      	movs	r1, #75	; 0x4b
  40559a:	2209      	movs	r2, #9
  40559c:	47a0      	blx	r4
	write_SCCB_76(0xc9,0x60);
  40559e:	2021      	movs	r0, #33	; 0x21
  4055a0:	21c9      	movs	r1, #201	; 0xc9
  4055a2:	2260      	movs	r2, #96	; 0x60
  4055a4:	47a0      	blx	r4
	write_SCCB_76(0x41,0x38);
  4055a6:	2021      	movs	r0, #33	; 0x21
  4055a8:	2141      	movs	r1, #65	; 0x41
  4055aa:	2238      	movs	r2, #56	; 0x38
  4055ac:	47a0      	blx	r4
	write_SCCB_76(0x56,0x40);
  4055ae:	2021      	movs	r0, #33	; 0x21
  4055b0:	2156      	movs	r1, #86	; 0x56
  4055b2:	2240      	movs	r2, #64	; 0x40
  4055b4:	47a0      	blx	r4
	write_SCCB_76(0x34,0x11);
  4055b6:	2021      	movs	r0, #33	; 0x21
  4055b8:	2134      	movs	r1, #52	; 0x34
  4055ba:	2211      	movs	r2, #17
  4055bc:	47a0      	blx	r4
	write_SCCB_76(0x3b,0x0a);
  4055be:	2021      	movs	r0, #33	; 0x21
  4055c0:	213b      	movs	r1, #59	; 0x3b
  4055c2:	220a      	movs	r2, #10
  4055c4:	47a0      	blx	r4
	write_SCCB_76(0xa4,0x88);
  4055c6:	2021      	movs	r0, #33	; 0x21
  4055c8:	21a4      	movs	r1, #164	; 0xa4
  4055ca:	2288      	movs	r2, #136	; 0x88
  4055cc:	47a0      	blx	r4
	write_SCCB_76(0x96,0x00);
  4055ce:	2021      	movs	r0, #33	; 0x21
  4055d0:	2196      	movs	r1, #150	; 0x96
  4055d2:	2200      	movs	r2, #0
  4055d4:	47a0      	blx	r4
	write_SCCB_76(0x97,0x30);
  4055d6:	2021      	movs	r0, #33	; 0x21
  4055d8:	2197      	movs	r1, #151	; 0x97
  4055da:	2230      	movs	r2, #48	; 0x30
  4055dc:	47a0      	blx	r4
	write_SCCB_76(0x98,0x20);
  4055de:	2021      	movs	r0, #33	; 0x21
  4055e0:	2198      	movs	r1, #152	; 0x98
  4055e2:	2220      	movs	r2, #32
  4055e4:	47a0      	blx	r4
	write_SCCB_76(0x99,0x30);
  4055e6:	2021      	movs	r0, #33	; 0x21
  4055e8:	2199      	movs	r1, #153	; 0x99
  4055ea:	2230      	movs	r2, #48	; 0x30
  4055ec:	47a0      	blx	r4
	write_SCCB_76(0x9a,0x84);
  4055ee:	2021      	movs	r0, #33	; 0x21
  4055f0:	219a      	movs	r1, #154	; 0x9a
  4055f2:	2284      	movs	r2, #132	; 0x84
  4055f4:	47a0      	blx	r4
	write_SCCB_76(0x9b,0x29);
  4055f6:	2021      	movs	r0, #33	; 0x21
  4055f8:	219b      	movs	r1, #155	; 0x9b
  4055fa:	2229      	movs	r2, #41	; 0x29
  4055fc:	47a0      	blx	r4
	write_SCCB_76(0x9c,0x03);
  4055fe:	2021      	movs	r0, #33	; 0x21
  405600:	219c      	movs	r1, #156	; 0x9c
  405602:	2203      	movs	r2, #3
  405604:	47a0      	blx	r4
	write_SCCB_76(0x9d,0x98);
  405606:	2021      	movs	r0, #33	; 0x21
  405608:	219d      	movs	r1, #157	; 0x9d
  40560a:	2298      	movs	r2, #152	; 0x98
  40560c:	47a0      	blx	r4
	write_SCCB_76(0x9e,0x3f);
  40560e:	2021      	movs	r0, #33	; 0x21
  405610:	219e      	movs	r1, #158	; 0x9e
  405612:	223f      	movs	r2, #63	; 0x3f
  405614:	47a0      	blx	r4
	write_SCCB_76(0x78,0x04);
  405616:	2021      	movs	r0, #33	; 0x21
  405618:	2178      	movs	r1, #120	; 0x78
  40561a:	2204      	movs	r2, #4
  40561c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x01);
  40561e:	2021      	movs	r0, #33	; 0x21
  405620:	2179      	movs	r1, #121	; 0x79
  405622:	2201      	movs	r2, #1
  405624:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xf0);
  405626:	2021      	movs	r0, #33	; 0x21
  405628:	21c8      	movs	r1, #200	; 0xc8
  40562a:	22f0      	movs	r2, #240	; 0xf0
  40562c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0f);
  40562e:	2021      	movs	r0, #33	; 0x21
  405630:	2179      	movs	r1, #121	; 0x79
  405632:	220f      	movs	r2, #15
  405634:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x00);
  405636:	2021      	movs	r0, #33	; 0x21
  405638:	21c8      	movs	r1, #200	; 0xc8
  40563a:	2200      	movs	r2, #0
  40563c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x10);
  40563e:	2021      	movs	r0, #33	; 0x21
  405640:	2179      	movs	r1, #121	; 0x79
  405642:	2210      	movs	r2, #16
  405644:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x7e);
  405646:	2021      	movs	r0, #33	; 0x21
  405648:	21c8      	movs	r1, #200	; 0xc8
  40564a:	227e      	movs	r2, #126	; 0x7e
  40564c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0a);
  40564e:	2021      	movs	r0, #33	; 0x21
  405650:	2179      	movs	r1, #121	; 0x79
  405652:	220a      	movs	r2, #10
  405654:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  405656:	2021      	movs	r0, #33	; 0x21
  405658:	21c8      	movs	r1, #200	; 0xc8
  40565a:	2280      	movs	r2, #128	; 0x80
  40565c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0b);
  40565e:	2021      	movs	r0, #33	; 0x21
  405660:	2179      	movs	r1, #121	; 0x79
  405662:	220b      	movs	r2, #11
  405664:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x01);
  405666:	2021      	movs	r0, #33	; 0x21
  405668:	21c8      	movs	r1, #200	; 0xc8
  40566a:	2201      	movs	r2, #1
  40566c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0c);
  40566e:	2021      	movs	r0, #33	; 0x21
  405670:	2179      	movs	r1, #121	; 0x79
  405672:	220c      	movs	r2, #12
  405674:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x0f);
  405676:	2021      	movs	r0, #33	; 0x21
  405678:	21c8      	movs	r1, #200	; 0xc8
  40567a:	220f      	movs	r2, #15
  40567c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x0d);
  40567e:	2021      	movs	r0, #33	; 0x21
  405680:	2179      	movs	r1, #121	; 0x79
  405682:	220d      	movs	r2, #13
  405684:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x20);
  405686:	2021      	movs	r0, #33	; 0x21
  405688:	21c8      	movs	r1, #200	; 0xc8
  40568a:	2220      	movs	r2, #32
  40568c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x09);
  40568e:	2021      	movs	r0, #33	; 0x21
  405690:	2179      	movs	r1, #121	; 0x79
  405692:	2209      	movs	r2, #9
  405694:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x80);
  405696:	2021      	movs	r0, #33	; 0x21
  405698:	21c8      	movs	r1, #200	; 0xc8
  40569a:	2280      	movs	r2, #128	; 0x80
  40569c:	47a0      	blx	r4
	write_SCCB_76(0x79,0x02);
  40569e:	2021      	movs	r0, #33	; 0x21
  4056a0:	2179      	movs	r1, #121	; 0x79
  4056a2:	2202      	movs	r2, #2
  4056a4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0xc0);
  4056a6:	2021      	movs	r0, #33	; 0x21
  4056a8:	21c8      	movs	r1, #200	; 0xc8
  4056aa:	22c0      	movs	r2, #192	; 0xc0
  4056ac:	47a0      	blx	r4
	write_SCCB_76(0x79,0x03);
  4056ae:	2021      	movs	r0, #33	; 0x21
  4056b0:	2179      	movs	r1, #121	; 0x79
  4056b2:	2203      	movs	r2, #3
  4056b4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x40);
  4056b6:	2021      	movs	r0, #33	; 0x21
  4056b8:	21c8      	movs	r1, #200	; 0xc8
  4056ba:	2240      	movs	r2, #64	; 0x40
  4056bc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x05);
  4056be:	2021      	movs	r0, #33	; 0x21
  4056c0:	2179      	movs	r1, #121	; 0x79
  4056c2:	2205      	movs	r2, #5
  4056c4:	47a0      	blx	r4
	write_SCCB_76(0xc8,0x30);
  4056c6:	2021      	movs	r0, #33	; 0x21
  4056c8:	21c8      	movs	r1, #200	; 0xc8
  4056ca:	2230      	movs	r2, #48	; 0x30
  4056cc:	47a0      	blx	r4
	write_SCCB_76(0x79,0x26);
  4056ce:	2021      	movs	r0, #33	; 0x21
  4056d0:	2179      	movs	r1, #121	; 0x79
  4056d2:	2226      	movs	r2, #38	; 0x26
  4056d4:	47a0      	blx	r4
	write_SCCB_76(0x2d,0x00);
  4056d6:	2021      	movs	r0, #33	; 0x21
  4056d8:	212d      	movs	r1, #45	; 0x2d
  4056da:	2200      	movs	r2, #0
  4056dc:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  4056de:	2021      	movs	r0, #33	; 0x21
  4056e0:	212e      	movs	r1, #46	; 0x2e
  4056e2:	2200      	movs	r2, #0
  4056e4:	47a0      	blx	r4
	write_SCCB_76(0x2e,0x00);
  4056e6:	2021      	movs	r0, #33	; 0x21
  4056e8:	212e      	movs	r1, #46	; 0x2e
  4056ea:	2200      	movs	r2, #0
  4056ec:	47a0      	blx	r4
	write_SCCB_76(0x1b,0x00);
  4056ee:	2021      	movs	r0, #33	; 0x21
  4056f0:	211b      	movs	r1, #27
  4056f2:	2200      	movs	r2, #0
  4056f4:	47a0      	blx	r4
	write_SCCB_76(0x15,1<<3|1<<1);
  4056f6:	2021      	movs	r0, #33	; 0x21
  4056f8:	2115      	movs	r1, #21
  4056fa:	220a      	movs	r2, #10
  4056fc:	47a0      	blx	r4
  4056fe:	bd10      	pop	{r4, pc}

00405700 <getBatVoltage>:
	*/
}


//get battery voltage
float getBatVoltage() {
  405700:	b538      	push	{r3, r4, r5, lr}
  405702:	4b19      	ldr	r3, [pc, #100]	; (405768 <getBatVoltage+0x68>)
  405704:	2201      	movs	r2, #1
  405706:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  405708:	2202      	movs	r2, #2
  40570a:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40570c:	461a      	mov	r2, r3
  40570e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	afec_channel_enable(AFEC1,AFEC_CHANNEL_0);
	afec_start_software_conversion(AFEC1);
	
	while(!(afec_get_interrupt_status(AFEC1) & (1<<AFEC_CHANNEL_0)));
  405710:	f013 0f01 	tst.w	r3, #1
  405714:	d0fb      	beq.n	40570e <getBatVoltage+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  405716:	4b14      	ldr	r3, [pc, #80]	; (405768 <getBatVoltage+0x68>)
  405718:	2200      	movs	r2, #0
  40571a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40571c:	6e98      	ldr	r0, [r3, #104]	; 0x68

	uint16_t convRes = afec_channel_get_value(AFEC1,AFEC_CHANNEL_0) - 0x7f0;
  40571e:	f5a0 60fe 	sub.w	r0, r0, #2032	; 0x7f0
	return (3.3*convRes/4095.00)*((140.00+960.00)/105.00);
  405722:	b280      	uxth	r0, r0
  405724:	4b11      	ldr	r3, [pc, #68]	; (40576c <getBatVoltage+0x6c>)
  405726:	4798      	blx	r3
  405728:	4c11      	ldr	r4, [pc, #68]	; (405770 <getBatVoltage+0x70>)
  40572a:	a309      	add	r3, pc, #36	; (adr r3, 405750 <getBatVoltage+0x50>)
  40572c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405730:	47a0      	blx	r4
  405732:	a309      	add	r3, pc, #36	; (adr r3, 405758 <getBatVoltage+0x58>)
  405734:	e9d3 2300 	ldrd	r2, r3, [r3]
  405738:	4d0e      	ldr	r5, [pc, #56]	; (405774 <getBatVoltage+0x74>)
  40573a:	47a8      	blx	r5
  40573c:	a308      	add	r3, pc, #32	; (adr r3, 405760 <getBatVoltage+0x60>)
  40573e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405742:	47a0      	blx	r4
  405744:	4b0c      	ldr	r3, [pc, #48]	; (405778 <getBatVoltage+0x78>)
  405746:	4798      	blx	r3
}
  405748:	bd38      	pop	{r3, r4, r5, pc}
  40574a:	bf00      	nop
  40574c:	f3af 8000 	nop.w
  405750:	66666666 	.word	0x66666666
  405754:	400a6666 	.word	0x400a6666
  405758:	00000000 	.word	0x00000000
  40575c:	40affe00 	.word	0x40affe00
  405760:	3cf3cf3d 	.word	0x3cf3cf3d
  405764:	4024f3cf 	.word	0x4024f3cf
  405768:	40064000 	.word	0x40064000
  40576c:	0040a43d 	.word	0x0040a43d
  405770:	0040a509 	.word	0x0040a509
  405774:	0040a75d 	.word	0x0040a75d
  405778:	0040aa8d 	.word	0x0040aa8d

0040577c <dumpFrame>:
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
  40577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40577e:	4607      	mov	r7, r0
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be disabled
 */
static inline void isi_dma_channel_disable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHDR |= channel;
  405780:	4a10      	ldr	r2, [pc, #64]	; (4057c4 <dumpFrame+0x48>)
  405782:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  405784:	f043 0301 	orr.w	r3, r3, #1
  405788:	63d3      	str	r3, [r2, #60]	; 0x3c
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
  40578a:	480f      	ldr	r0, [pc, #60]	; (4057c8 <dumpFrame+0x4c>)
  40578c:	4b0f      	ldr	r3, [pc, #60]	; (4057cc <dumpFrame+0x50>)
  40578e:	4798      	blx	r3
  405790:	463e      	mov	r6, r7
  405792:	f507 3716 	add.w	r7, r7, #153600	; 0x25800
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
		while(!uart_is_tx_ready(UART4));
  405796:	4d0e      	ldr	r5, [pc, #56]	; (4057d0 <dumpFrame+0x54>)
  405798:	4c0e      	ldr	r4, [pc, #56]	; (4057d4 <dumpFrame+0x58>)
  40579a:	4620      	mov	r0, r4
  40579c:	47a8      	blx	r5
  40579e:	2800      	cmp	r0, #0
  4057a0:	d0fb      	beq.n	40579a <dumpFrame+0x1e>
		uart_write(UART4,imgData[i]);
  4057a2:	f816 1b01 	ldrb.w	r1, [r6], #1
  4057a6:	4620      	mov	r0, r4
  4057a8:	4b0b      	ldr	r3, [pc, #44]	; (4057d8 <dumpFrame+0x5c>)
  4057aa:	4798      	blx	r3
//frame dump (Mem dump)
void dumpFrame(int dumpLoc) {
	isi_dma_channel_disable(ISI,1);
	sendDebugString("IMG:");
	volatile uint8_t* imgData = (uint8_t*)(dumpLoc);
	for(int i=0;i<320*240*2;i++){
  4057ac:	42be      	cmp	r6, r7
  4057ae:	d1f4      	bne.n	40579a <dumpFrame+0x1e>
		while(!uart_is_tx_ready(UART4));
		uart_write(UART4,imgData[i]);
	}
	sendDebugString(":ENDIMG\n");
  4057b0:	480a      	ldr	r0, [pc, #40]	; (4057dc <dumpFrame+0x60>)
  4057b2:	4b06      	ldr	r3, [pc, #24]	; (4057cc <dumpFrame+0x50>)
  4057b4:	4798      	blx	r3
 * \param p_isi  Pointer to a ISI instance.
 * \param  channel to be enabled
 */
static inline void isi_dma_channel_enable(Isi *p_isi, uint32_t channel)
{
	p_isi->ISI_DMA_CHER |= channel;
  4057b6:	4a03      	ldr	r2, [pc, #12]	; (4057c4 <dumpFrame+0x48>)
  4057b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  4057ba:	f043 0301 	orr.w	r3, r3, #1
  4057be:	6393      	str	r3, [r2, #56]	; 0x38
  4057c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057c2:	bf00      	nop
  4057c4:	4004c000 	.word	0x4004c000
  4057c8:	00412d30 	.word	0x00412d30
  4057cc:	0040019d 	.word	0x0040019d
  4057d0:	00402d79 	.word	0x00402d79
  4057d4:	400e1e00 	.word	0x400e1e00
  4057d8:	00402d85 	.word	0x00402d85
  4057dc:	00412d38 	.word	0x00412d38

004057e0 <calcRotation>:
	isi_dma_channel_enable(ISI,1);
	//memset(BOARD_SDRAM_ADDR,0,BOARD_SDRAM_ADDR_NUM);
}

//Inverse Kinamatic functions
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
  4057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057e4:	ed2d 8b06 	vpush	{d8-d10}
  4057e8:	b08b      	sub	sp, #44	; 0x2c
  4057ea:	4605      	mov	r5, r0
  4057ec:	ee09 3a10 	vmov	s18, r3
  4057f0:	eddd 9a1a 	vldr	s19, [sp, #104]	; 0x68
  4057f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  4057f6:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
	inX = inX - cenX;
	inZ = inZ - cenZ;
  4057fa:	ee07 2a90 	vmov	s15, r2
  4057fe:	ee37 8ae9 	vsub.f32	s16, s15, s19
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405802:	ee07 1a90 	vmov	s15, r1
  405806:	ee77 7ac9 	vsub.f32	s15, s15, s18
  40580a:	ee17 0a90 	vmov	r0, s15
  40580e:	4b78      	ldr	r3, [pc, #480]	; (4059f0 <calcRotation+0x210>)
  405810:	4798      	blx	r3
  405812:	e9cd 0100 	strd	r0, r1, [sp]
  405816:	2c01      	cmp	r4, #1
  405818:	f040 8092 	bne.w	405940 <calcRotation+0x160>
  40581c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40581e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
  405822:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 4059f0 <calcRotation+0x210>
  405826:	4658      	mov	r0, fp
  405828:	47c0      	blx	r8
  40582a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40582e:	4e71      	ldr	r6, [pc, #452]	; (4059f4 <calcRotation+0x214>)
  405830:	47b0      	blx	r6
  405832:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405836:	ee18 0a10 	vmov	r0, s16
  40583a:	47c0      	blx	r8
  40583c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405844:	4f6c      	ldr	r7, [pc, #432]	; (4059f8 <calcRotation+0x218>)
  405846:	47b8      	blx	r7
  405848:	e9cd 0104 	strd	r0, r1, [sp, #16]
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  40584c:	4658      	mov	r0, fp
  40584e:	47c0      	blx	r8
  405850:	4680      	mov	r8, r0
  405852:	4689      	mov	r9, r1
  405854:	47b8      	blx	r7
  405856:	4682      	mov	sl, r0
  405858:	468b      	mov	fp, r1
  40585a:	4640      	mov	r0, r8
  40585c:	4649      	mov	r1, r9
  40585e:	47b0      	blx	r6
  405860:	e9cd 0108 	strd	r0, r1, [sp, #32]
  405864:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 405a08 <calcRotation+0x228>
  405868:	e9dd 0100 	ldrd	r0, r1, [sp]
  40586c:	4652      	mov	r2, sl
  40586e:	465b      	mov	r3, fp
  405870:	47c0      	blx	r8
  405872:	4606      	mov	r6, r0
  405874:	460f      	mov	r7, r1
  405876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40587a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40587e:	47c0      	blx	r8
  405880:	4602      	mov	r2, r0
  405882:	460b      	mov	r3, r1
  405884:	4630      	mov	r0, r6
  405886:	4639      	mov	r1, r7
  405888:	4e5c      	ldr	r6, [pc, #368]	; (4059fc <calcRotation+0x21c>)
  40588a:	47b0      	blx	r6
  40588c:	4f5c      	ldr	r7, [pc, #368]	; (405a00 <calcRotation+0x220>)
  40588e:	47b8      	blx	r7
  405890:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405894:	e9dd 0100 	ldrd	r0, r1, [sp]
  405898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  40589c:	47c0      	blx	r8
  40589e:	4682      	mov	sl, r0
  4058a0:	468b      	mov	fp, r1
  4058a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4058a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4058aa:	47c0      	blx	r8
  4058ac:	4602      	mov	r2, r0
  4058ae:	460b      	mov	r3, r1
  4058b0:	4650      	mov	r0, sl
  4058b2:	4659      	mov	r1, fp
  4058b4:	4e53      	ldr	r6, [pc, #332]	; (405a04 <calcRotation+0x224>)
  4058b6:	47b0      	blx	r6
  4058b8:	47b8      	blx	r7
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  4058ba:	ee07 0a90 	vmov	s15, r0
  4058be:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  4058c2:	2c01      	cmp	r4, #1
  4058c4:	bf14      	ite	ne
  4058c6:	2400      	movne	r4, #0
  4058c8:	2401      	moveq	r4, #1
  4058ca:	b3a4      	cbz	r4, 405936 <calcRotation+0x156>
  4058cc:	eeb5 aa40 	vcmp.f32	s20, #0.0
  4058d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4058d4:	d118      	bne.n	405908 <calcRotation+0x128>
  4058d6:	e02e      	b.n	405936 <calcRotation+0x156>
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  4058d8:	eefd 7aca 	vcvt.s32.f32	s15, s20
  4058dc:	ee17 3a90 	vmov	r3, s15
  4058e0:	2b00      	cmp	r3, #0
  4058e2:	bfb8      	it	lt
  4058e4:	425b      	neglt	r3, r3
  4058e6:	f1c3 0301 	rsb	r3, r3, #1
  4058ea:	ee07 3a90 	vmov	s15, r3
  4058ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4058f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
  4058f6:	ee78 7a29 	vadd.f32	s15, s16, s19
  4058fa:	ee27 8a8a 	vmul.f32	s16, s15, s20
  4058fe:	ee38 8a88 	vadd.f32	s16, s17, s16
  405902:	ee78 8a29 	vadd.f32	s17, s16, s19
  405906:	e064      	b.n	4059d2 <calcRotation+0x1f2>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  405908:	eefd 7aca 	vcvt.s32.f32	s15, s20
  40590c:	ee17 3a90 	vmov	r3, s15
  405910:	2b00      	cmp	r3, #0
  405912:	bfb8      	it	lt
  405914:	425b      	neglt	r3, r3
  405916:	f1c3 0301 	rsb	r3, r3, #1
  40591a:	ee07 3a90 	vmov	s15, r3
  40591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  405922:	ee67 8aa8 	vmul.f32	s17, s15, s17
  405926:	ee38 8a29 	vadd.f32	s16, s16, s19
  40592a:	ee28 8a0a 	vmul.f32	s16, s16, s20
  40592e:	ee38 8ac8 	vsub.f32	s16, s17, s16
  405932:	ee78 8a29 	vadd.f32	s17, s16, s19
	if(opside == 1) out.Z = -out.Z;
  405936:	2c00      	cmp	r4, #0
  405938:	d050      	beq.n	4059dc <calcRotation+0x1fc>
  40593a:	eef1 8a68 	vneg.f32	s17, s17
  40593e:	e04d      	b.n	4059dc <calcRotation+0x1fc>
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405940:	4e2b      	ldr	r6, [pc, #172]	; (4059f0 <calcRotation+0x210>)
  405942:	981b      	ldr	r0, [sp, #108]	; 0x6c
  405944:	47b0      	blx	r6
  405946:	4680      	mov	r8, r0
  405948:	4689      	mov	r9, r1
  40594a:	4b2a      	ldr	r3, [pc, #168]	; (4059f4 <calcRotation+0x214>)
  40594c:	4798      	blx	r3
  40594e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405952:	ee18 0a10 	vmov	r0, s16
  405956:	47b0      	blx	r6
  405958:	4682      	mov	sl, r0
  40595a:	468b      	mov	fp, r1
  40595c:	4640      	mov	r0, r8
  40595e:	4649      	mov	r1, r9
  405960:	4b25      	ldr	r3, [pc, #148]	; (4059f8 <calcRotation+0x218>)
  405962:	4798      	blx	r3
  405964:	4602      	mov	r2, r0
  405966:	460b      	mov	r3, r1
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
  405968:	f8df 809c 	ldr.w	r8, [pc, #156]	; 405a08 <calcRotation+0x228>
  40596c:	e9dd 0100 	ldrd	r0, r1, [sp]
  405970:	e9cd 2304 	strd	r2, r3, [sp, #16]
  405974:	47c0      	blx	r8
  405976:	4606      	mov	r6, r0
  405978:	460f      	mov	r7, r1
  40597a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40597e:	4652      	mov	r2, sl
  405980:	465b      	mov	r3, fp
  405982:	47c0      	blx	r8
  405984:	4602      	mov	r2, r0
  405986:	460b      	mov	r3, r1
  405988:	4630      	mov	r0, r6
  40598a:	4639      	mov	r1, r7
  40598c:	4e1b      	ldr	r6, [pc, #108]	; (4059fc <calcRotation+0x21c>)
  40598e:	47b0      	blx	r6
  405990:	4f1b      	ldr	r7, [pc, #108]	; (405a00 <calcRotation+0x220>)
  405992:	47b8      	blx	r7
  405994:	ee08 0a90 	vmov	s17, r0
XZ calcRotation(float inX, float inZ, float cenX,  float cenZ, float rotAng, int opside, float turn) {
	inX = inX - cenX;
	inZ = inZ - cenZ;
	XZ out;
	
	out.X = inX*cos((opside==1)?-rotAng:rotAng) - inZ*sin((opside==1)?-rotAng:rotAng);
  405998:	e9dd 0100 	ldrd	r0, r1, [sp]
  40599c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4059a0:	47c0      	blx	r8
  4059a2:	e9cd 0100 	strd	r0, r1, [sp]
  4059a6:	4650      	mov	r0, sl
  4059a8:	4659      	mov	r1, fp
  4059aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4059ae:	47c0      	blx	r8
  4059b0:	4602      	mov	r2, r0
  4059b2:	460b      	mov	r3, r1
  4059b4:	e9dd 0100 	ldrd	r0, r1, [sp]
  4059b8:	4e12      	ldr	r6, [pc, #72]	; (405a04 <calcRotation+0x224>)
  4059ba:	47b0      	blx	r6
  4059bc:	47b8      	blx	r7
	out.Z = inX*sin((opside==1)?-rotAng:rotAng) + inZ*cos((opside==1)?-rotAng:rotAng);
	
	out.X = out.X + cenX;
  4059be:	ee07 0a90 	vmov	s15, r0
  4059c2:	ee39 9a27 	vadd.f32	s18, s18, s15
	if(opside == 0 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) + (turn)*(inZ+cenZ)  );
  4059c6:	b924      	cbnz	r4, 4059d2 <calcRotation+0x1f2>
  4059c8:	eeb5 aa40 	vcmp.f32	s20, #0.0
  4059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4059d0:	d182      	bne.n	4058d8 <calcRotation+0xf8>
	if(opside == 1 && turn != 0) out.Z = cenZ + (  out.Z*(1-abs(turn)) - (turn)*(inZ+cenZ)  );
  4059d2:	2c01      	cmp	r4, #1
  4059d4:	bf14      	ite	ne
  4059d6:	2400      	movne	r4, #0
  4059d8:	2401      	moveq	r4, #1
  4059da:	e7ac      	b.n	405936 <calcRotation+0x156>
	if(opside == 1) out.Z = -out.Z;
	return out;
  4059dc:	ed85 9a00 	vstr	s18, [r5]
  4059e0:	edc5 8a01 	vstr	s17, [r5, #4]
}
  4059e4:	4628      	mov	r0, r5
  4059e6:	b00b      	add	sp, #44	; 0x2c
  4059e8:	ecbd 8b06 	vpop	{d8-d10}
  4059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f0:	0040a461 	.word	0x0040a461
  4059f4:	00407975 	.word	0x00407975
  4059f8:	004079fd 	.word	0x004079fd
  4059fc:	0040a1a5 	.word	0x0040a1a5
  405a00:	0040aa8d 	.word	0x0040aa8d
  405a04:	0040a1a1 	.word	0x0040a1a1
  405a08:	0040a509 	.word	0x0040a509
  405a0c:	00000000 	.word	0x00000000

00405a10 <legAngCalc>:
int sign(float in) {
	if(in<0) return -1;
	else return 1;
}

angles legAngCalc(float x, float y, float z) {
  405a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a14:	ed2d 8b06 	vpush	{d8-d10}
  405a18:	b085      	sub	sp, #20
  405a1a:	4605      	mov	r5, r0
  405a1c:	ee09 1a10 	vmov	s18, r1
  405a20:	ee0a 2a10 	vmov	s20, r2
  405a24:	ee08 3a90 	vmov	s17, r3
	
	*/
	
	//Begin old code
	
	float G = sqrt(x*x + z*z) - C;
  405a28:	ee69 7a09 	vmul.f32	s15, s18, s18
  405a2c:	ee28 8aa8 	vmul.f32	s16, s17, s17
  405a30:	ee37 8a88 	vadd.f32	s16, s15, s16
  405a34:	4c64      	ldr	r4, [pc, #400]	; (405bc8 <legAngCalc+0x1b8>)
  405a36:	ee18 0a10 	vmov	r0, s16
  405a3a:	47a0      	blx	r4
  405a3c:	4e63      	ldr	r6, [pc, #396]	; (405bcc <legAngCalc+0x1bc>)
  405a3e:	47b0      	blx	r6
  405a40:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 405bf8 <legAngCalc+0x1e8>
  405a44:	2200      	movs	r2, #0
  405a46:	4b62      	ldr	r3, [pc, #392]	; (405bd0 <legAngCalc+0x1c0>)
  405a48:	47c8      	blx	r9
  405a4a:	4f62      	ldr	r7, [pc, #392]	; (405bd4 <legAngCalc+0x1c4>)
  405a4c:	47b8      	blx	r7
  405a4e:	ee09 0a90 	vmov	s19, r0
	float H = sqrt(y*y+G*G);
  405a52:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  405a56:	ee29 8aa9 	vmul.f32	s16, s19, s19
  405a5a:	ee37 8a88 	vadd.f32	s16, s15, s16
  405a5e:	ee18 0a10 	vmov	r0, s16
  405a62:	47a0      	blx	r4
  405a64:	47b0      	blx	r6
  405a66:	47b8      	blx	r7
	float b = acos((A*A + H*H - B*B)/(2*A*H));
  405a68:	ee07 0a90 	vmov	s15, r0
  405a6c:	ee27 8aa7 	vmul.f32	s16, s15, s15
  405a70:	47a0      	blx	r4
  405a72:	e9cd 0100 	strd	r0, r1, [sp]
  405a76:	ee18 0a10 	vmov	r0, s16
  405a7a:	47a0      	blx	r4
  405a7c:	a34c      	add	r3, pc, #304	; (adr r3, 405bb0 <legAngCalc+0x1a0>)
  405a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a82:	4e55      	ldr	r6, [pc, #340]	; (405bd8 <legAngCalc+0x1c8>)
  405a84:	47b0      	blx	r6
  405a86:	a34c      	add	r3, pc, #304	; (adr r3, 405bb8 <legAngCalc+0x1a8>)
  405a88:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a8c:	47c8      	blx	r9
  405a8e:	4680      	mov	r8, r0
  405a90:	4689      	mov	r9, r1
  405a92:	f8df a174 	ldr.w	sl, [pc, #372]	; 405c08 <legAngCalc+0x1f8>
  405a96:	e9dd 0100 	ldrd	r0, r1, [sp]
  405a9a:	2200      	movs	r2, #0
  405a9c:	4b4f      	ldr	r3, [pc, #316]	; (405bdc <legAngCalc+0x1cc>)
  405a9e:	47d0      	blx	sl
  405aa0:	4602      	mov	r2, r0
  405aa2:	460b      	mov	r3, r1
  405aa4:	4e4e      	ldr	r6, [pc, #312]	; (405be0 <legAngCalc+0x1d0>)
  405aa6:	4640      	mov	r0, r8
  405aa8:	4649      	mov	r1, r9
  405aaa:	47b0      	blx	r6
  405aac:	4b4d      	ldr	r3, [pc, #308]	; (405be4 <legAngCalc+0x1d4>)
  405aae:	4798      	blx	r3
  405ab0:	47b8      	blx	r7
	
	float h = asin(H*(sin(b))/B);
  405ab2:	47a0      	blx	r4
  405ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405ab8:	4b4b      	ldr	r3, [pc, #300]	; (405be8 <legAngCalc+0x1d8>)
  405aba:	4798      	blx	r3
  405abc:	4602      	mov	r2, r0
  405abe:	460b      	mov	r3, r1
  405ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
  405ac4:	47d0      	blx	sl
  405ac6:	2200      	movs	r2, #0
  405ac8:	4b48      	ldr	r3, [pc, #288]	; (405bec <legAngCalc+0x1dc>)
  405aca:	47b0      	blx	r6
  405acc:	4b48      	ldr	r3, [pc, #288]	; (405bf0 <legAngCalc+0x1e0>)
  405ace:	4798      	blx	r3
  405ad0:	47b8      	blx	r7
  405ad2:	4680      	mov	r8, r0
	
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
  405ad4:	eddf 7a47 	vldr	s15, [pc, #284]	; 405bf4 <legAngCalc+0x1e4>
  405ad8:	eeb4 8ae7 	vcmpe.f32	s16, s15
  405adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  405ae0:	da09      	bge.n	405af6 <legAngCalc+0xe6>
	else Ang.S3 = (M_PI)-h;
  405ae2:	47a0      	blx	r4
  405ae4:	4602      	mov	r2, r0
  405ae6:	460b      	mov	r3, r1
  405ae8:	a135      	add	r1, pc, #212	; (adr r1, 405bc0 <legAngCalc+0x1b0>)
  405aea:	e9d1 0100 	ldrd	r0, r1, [r1]
  405aee:	4c42      	ldr	r4, [pc, #264]	; (405bf8 <legAngCalc+0x1e8>)
  405af0:	47a0      	blx	r4
  405af2:	47b8      	blx	r7
  405af4:	4680      	mov	r8, r0
	Ang.S2 = (atan2(y,G))+b;
  405af6:	4c34      	ldr	r4, [pc, #208]	; (405bc8 <legAngCalc+0x1b8>)
  405af8:	ee1a 0a10 	vmov	r0, s20
  405afc:	47a0      	blx	r4
  405afe:	4606      	mov	r6, r0
  405b00:	460f      	mov	r7, r1
  405b02:	ee19 0a90 	vmov	r0, s19
  405b06:	47a0      	blx	r4
  405b08:	4602      	mov	r2, r0
  405b0a:	460b      	mov	r3, r1
  405b0c:	4630      	mov	r0, r6
  405b0e:	4639      	mov	r1, r7
  405b10:	4e3a      	ldr	r6, [pc, #232]	; (405bfc <legAngCalc+0x1ec>)
  405b12:	47b0      	blx	r6
  405b14:	4682      	mov	sl, r0
  405b16:	468b      	mov	fp, r1
	Ang.S1 = atan2(x,z);
  405b18:	ee19 0a10 	vmov	r0, s18
  405b1c:	47a0      	blx	r4
  405b1e:	e9cd 0100 	strd	r0, r1, [sp]
  405b22:	ee18 0a90 	vmov	r0, s17
  405b26:	47a0      	blx	r4
  405b28:	4602      	mov	r2, r0
  405b2a:	460b      	mov	r3, r1
  405b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
  405b30:	47b0      	blx	r6
  405b32:	4e28      	ldr	r6, [pc, #160]	; (405bd4 <legAngCalc+0x1c4>)
  405b34:	47b0      	blx	r6
	
	Ang.S1 = Ang.S1*180.00/M_PI;
  405b36:	47a0      	blx	r4
  405b38:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 405c08 <legAngCalc+0x1f8>
  405b3c:	2200      	movs	r2, #0
  405b3e:	4b30      	ldr	r3, [pc, #192]	; (405c00 <legAngCalc+0x1f0>)
  405b40:	47c8      	blx	r9
  405b42:	4f27      	ldr	r7, [pc, #156]	; (405be0 <legAngCalc+0x1d0>)
  405b44:	a31e      	add	r3, pc, #120	; (adr r3, 405bc0 <legAngCalc+0x1b0>)
  405b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b4a:	47b8      	blx	r7
  405b4c:	47b0      	blx	r6
  405b4e:	6028      	str	r0, [r5, #0]
	angles Ang;
	
	
	if(H*H >= (A*A+B*B))Ang.S3 = h;
	else Ang.S3 = (M_PI)-h;
	Ang.S2 = (atan2(y,G))+b;
  405b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b54:	4652      	mov	r2, sl
  405b56:	465b      	mov	r3, fp
  405b58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 405bd8 <legAngCalc+0x1c8>
  405b5c:	47e0      	blx	ip
  405b5e:	47b0      	blx	r6
	Ang.S1 = atan2(x,z);
	
	Ang.S1 = Ang.S1*180.00/M_PI;
	Ang.S2 = 90 - Ang.S2*180.00/M_PI;
  405b60:	47a0      	blx	r4
  405b62:	2200      	movs	r2, #0
  405b64:	4b26      	ldr	r3, [pc, #152]	; (405c00 <legAngCalc+0x1f0>)
  405b66:	47c8      	blx	r9
  405b68:	a315      	add	r3, pc, #84	; (adr r3, 405bc0 <legAngCalc+0x1b0>)
  405b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b6e:	47b8      	blx	r7
  405b70:	4602      	mov	r2, r0
  405b72:	460b      	mov	r3, r1
  405b74:	f8df a080 	ldr.w	sl, [pc, #128]	; 405bf8 <legAngCalc+0x1e8>
  405b78:	2000      	movs	r0, #0
  405b7a:	4922      	ldr	r1, [pc, #136]	; (405c04 <legAngCalc+0x1f4>)
  405b7c:	47d0      	blx	sl
  405b7e:	47b0      	blx	r6
  405b80:	6068      	str	r0, [r5, #4]
	Ang.S3 = 180 - Ang.S3*180.00/M_PI;
  405b82:	4640      	mov	r0, r8
  405b84:	47a0      	blx	r4
  405b86:	2200      	movs	r2, #0
  405b88:	4b1d      	ldr	r3, [pc, #116]	; (405c00 <legAngCalc+0x1f0>)
  405b8a:	47c8      	blx	r9
  405b8c:	a30c      	add	r3, pc, #48	; (adr r3, 405bc0 <legAngCalc+0x1b0>)
  405b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b92:	47b8      	blx	r7
  405b94:	4602      	mov	r2, r0
  405b96:	460b      	mov	r3, r1
  405b98:	2000      	movs	r0, #0
  405b9a:	4919      	ldr	r1, [pc, #100]	; (405c00 <legAngCalc+0x1f0>)
  405b9c:	47d0      	blx	sl
  405b9e:	47b0      	blx	r6
  405ba0:	60a8      	str	r0, [r5, #8]
	
	
	return Ang;
}
  405ba2:	4628      	mov	r0, r5
  405ba4:	b005      	add	sp, #20
  405ba6:	ecbd 8b06 	vpop	{d8-d10}
  405baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bae:	bf00      	nop
  405bb0:	00000000 	.word	0x00000000
  405bb4:	40cc2000 	.word	0x40cc2000
  405bb8:	00000000 	.word	0x00000000
  405bbc:	40b08100 	.word	0x40b08100
  405bc0:	54442d18 	.word	0x54442d18
  405bc4:	400921fb 	.word	0x400921fb
  405bc8:	0040a461 	.word	0x0040a461
  405bcc:	00407cfd 	.word	0x00407cfd
  405bd0:	40518000 	.word	0x40518000
  405bd4:	0040aa8d 	.word	0x0040aa8d
  405bd8:	0040a1a5 	.word	0x0040a1a5
  405bdc:	406e0000 	.word	0x406e0000
  405be0:	0040a75d 	.word	0x0040a75d
  405be4:	00407ae9 	.word	0x00407ae9
  405be8:	004079fd 	.word	0x004079fd
  405bec:	40504000 	.word	0x40504000
  405bf0:	00407b91 	.word	0x00407b91
  405bf4:	46918200 	.word	0x46918200
  405bf8:	0040a1a1 	.word	0x0040a1a1
  405bfc:	00407c39 	.word	0x00407c39
  405c00:	40668000 	.word	0x40668000
  405c04:	40568000 	.word	0x40568000
  405c08:	0040a509 	.word	0x0040a509

00405c0c <writeLegOut>:

//Leg interface
void writeLegOut(int leg, float S0, float S1, float S2) {
  405c0c:	b570      	push	{r4, r5, r6, lr}
  405c0e:	460e      	mov	r6, r1
  405c10:	4615      	mov	r5, r2
  405c12:	461c      	mov	r4, r3
	
	switch (leg) {
  405c14:	2805      	cmp	r0, #5
  405c16:	d857      	bhi.n	405cc8 <writeLegOut+0xbc>
  405c18:	e8df f000 	tbb	[pc, r0]
  405c1c:	2d1f1103 	.word	0x2d1f1103
  405c20:	493b      	.short	0x493b
		
		case 0:
		WriteServo(L0_S0,S0);
  405c22:	2000      	movs	r0, #0
  405c24:	4601      	mov	r1, r0
  405c26:	4632      	mov	r2, r6
  405c28:	4e28      	ldr	r6, [pc, #160]	; (405ccc <writeLegOut+0xc0>)
  405c2a:	47b0      	blx	r6
		WriteServo(L0_S1,S1);
  405c2c:	2000      	movs	r0, #0
  405c2e:	2101      	movs	r1, #1
  405c30:	462a      	mov	r2, r5
  405c32:	47b0      	blx	r6
		WriteServo(L0_S2,S2);
  405c34:	2000      	movs	r0, #0
  405c36:	2102      	movs	r1, #2
  405c38:	4622      	mov	r2, r4
  405c3a:	47b0      	blx	r6
		break;
  405c3c:	bd70      	pop	{r4, r5, r6, pc}
		
		case 1:
		WriteServo(L1_S0,S0);
  405c3e:	2001      	movs	r0, #1
  405c40:	2100      	movs	r1, #0
  405c42:	4632      	mov	r2, r6
  405c44:	4e21      	ldr	r6, [pc, #132]	; (405ccc <writeLegOut+0xc0>)
  405c46:	47b0      	blx	r6
		WriteServo(L1_S1,S1);
  405c48:	2001      	movs	r0, #1
  405c4a:	4601      	mov	r1, r0
  405c4c:	462a      	mov	r2, r5
  405c4e:	47b0      	blx	r6
		WriteServo(L1_S2,S2);
  405c50:	2001      	movs	r0, #1
  405c52:	2102      	movs	r1, #2
  405c54:	4622      	mov	r2, r4
  405c56:	47b0      	blx	r6
		break;
  405c58:	bd70      	pop	{r4, r5, r6, pc}

		case 2:
		WriteServo(L2_S0,S0);
  405c5a:	2002      	movs	r0, #2
  405c5c:	2100      	movs	r1, #0
  405c5e:	4632      	mov	r2, r6
  405c60:	4e1a      	ldr	r6, [pc, #104]	; (405ccc <writeLegOut+0xc0>)
  405c62:	47b0      	blx	r6
		WriteServo(L2_S1,S1);
  405c64:	2002      	movs	r0, #2
  405c66:	2101      	movs	r1, #1
  405c68:	462a      	mov	r2, r5
  405c6a:	47b0      	blx	r6
		WriteServo(L2_S2,S2);
  405c6c:	2002      	movs	r0, #2
  405c6e:	4601      	mov	r1, r0
  405c70:	4622      	mov	r2, r4
  405c72:	47b0      	blx	r6
		break;
  405c74:	bd70      	pop	{r4, r5, r6, pc}

		case 3:
		WriteServo(L3_S0,S0);
  405c76:	2003      	movs	r0, #3
  405c78:	2100      	movs	r1, #0
  405c7a:	4632      	mov	r2, r6
  405c7c:	4e13      	ldr	r6, [pc, #76]	; (405ccc <writeLegOut+0xc0>)
  405c7e:	47b0      	blx	r6
		WriteServo(L3_S1,S1);
  405c80:	2003      	movs	r0, #3
  405c82:	2101      	movs	r1, #1
  405c84:	462a      	mov	r2, r5
  405c86:	47b0      	blx	r6
		WriteServo(L3_S2,S2);
  405c88:	2003      	movs	r0, #3
  405c8a:	2102      	movs	r1, #2
  405c8c:	4622      	mov	r2, r4
  405c8e:	47b0      	blx	r6
		break;
  405c90:	bd70      	pop	{r4, r5, r6, pc}

		case 4:
		WriteServo(L4_S0,S0);
  405c92:	2004      	movs	r0, #4
  405c94:	2100      	movs	r1, #0
  405c96:	4632      	mov	r2, r6
  405c98:	4e0c      	ldr	r6, [pc, #48]	; (405ccc <writeLegOut+0xc0>)
  405c9a:	47b0      	blx	r6
		WriteServo(L4_S1,S1);
  405c9c:	2004      	movs	r0, #4
  405c9e:	2101      	movs	r1, #1
  405ca0:	462a      	mov	r2, r5
  405ca2:	47b0      	blx	r6
		WriteServo(L4_S2,S2);
  405ca4:	2004      	movs	r0, #4
  405ca6:	2102      	movs	r1, #2
  405ca8:	4622      	mov	r2, r4
  405caa:	47b0      	blx	r6
		break;
  405cac:	bd70      	pop	{r4, r5, r6, pc}

		case 5:
		WriteServo(L5_S0,S0);
  405cae:	2005      	movs	r0, #5
  405cb0:	2100      	movs	r1, #0
  405cb2:	4632      	mov	r2, r6
  405cb4:	4e05      	ldr	r6, [pc, #20]	; (405ccc <writeLegOut+0xc0>)
  405cb6:	47b0      	blx	r6
		WriteServo(L5_S1,S1);
  405cb8:	2005      	movs	r0, #5
  405cba:	2101      	movs	r1, #1
  405cbc:	462a      	mov	r2, r5
  405cbe:	47b0      	blx	r6
		WriteServo(L5_S2,S2);
  405cc0:	2005      	movs	r0, #5
  405cc2:	2102      	movs	r1, #2
  405cc4:	4622      	mov	r2, r4
  405cc6:	47b0      	blx	r6
  405cc8:	bd70      	pop	{r4, r5, r6, pc}
  405cca:	bf00      	nop
  405ccc:	004050b9 	.word	0x004050b9

00405cd0 <getS0cal>:
	}

}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
  405cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cd4:	ed2d 8b02 	vpush	{d8}
  405cd8:	b083      	sub	sp, #12
  405cda:	4681      	mov	r9, r0
  405cdc:	468b      	mov	fp, r1
  405cde:	9201      	str	r2, [sp, #4]
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  405ce0:	2006      	movs	r0, #6
  405ce2:	2100      	movs	r1, #0
  405ce4:	225a      	movs	r2, #90	; 0x5a
  405ce6:	4c54      	ldr	r4, [pc, #336]	; (405e38 <getS0cal+0x168>)
  405ce8:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  405cea:	2006      	movs	r0, #6
  405cec:	2101      	movs	r1, #1
  405cee:	2200      	movs	r2, #0
  405cf0:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  405cf2:	2006      	movs	r0, #6
  405cf4:	2102      	movs	r1, #2
  405cf6:	225a      	movs	r2, #90	; 0x5a
  405cf8:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  405cfa:	4850      	ldr	r0, [pc, #320]	; (405e3c <getS0cal+0x16c>)
  405cfc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405d00:	f44f 7200 	mov.w	r2, #512	; 0x200
  405d04:	4b4e      	ldr	r3, [pc, #312]	; (405e40 <getS0cal+0x170>)
  405d06:	4798      	blx	r3
}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  405d08:	4e4e      	ldr	r6, [pc, #312]	; (405e44 <getS0cal+0x174>)

}

//Servo Calibration
void getS0cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  405d0a:	2700      	movs	r7, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  405d0c:	4d4b      	ldr	r5, [pc, #300]	; (405e3c <getS0cal+0x16c>)
  405d0e:	4c4c      	ldr	r4, [pc, #304]	; (405e40 <getS0cal+0x170>)
  405d10:	f8df 8150 	ldr.w	r8, [pc, #336]	; 405e64 <getS0cal+0x194>
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  405d14:	ee08 6a10 	vmov	s16, r6
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  405d18:	f8df a150 	ldr.w	sl, [pc, #336]	; 405e6c <getS0cal+0x19c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  405d1c:	4628      	mov	r0, r5
  405d1e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405d22:	f44f 7200 	mov.w	r2, #512	; 0x200
  405d26:	47a0      	blx	r4
  405d28:	b978      	cbnz	r0, 405d4a <getS0cal+0x7a>
  405d2a:	f8d8 3000 	ldr.w	r3, [r8]
  405d2e:	b963      	cbnz	r3, 405d4a <getS0cal+0x7a>
			if(calState == 0){
  405d30:	b92f      	cbnz	r7, 405d3e <getS0cal+0x6e>
				*angOff = 90 - ang;
  405d32:	ee07 6a90 	vmov	s15, r6
  405d36:	ee78 7a67 	vsub.f32	s15, s16, s15
  405d3a:	edcb 7a00 	vstr	s15, [fp]
			}
			calState++;
  405d3e:	3701      	adds	r7, #1
			ang = 90;
			But_Up = 1;
  405d40:	2301      	movs	r3, #1
  405d42:	f8c8 3000 	str.w	r3, [r8]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  405d46:	ee18 6a10 	vmov	r6, s16
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  405d4a:	4628      	mov	r0, r5
  405d4c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405d50:	f44f 7200 	mov.w	r2, #512	; 0x200
  405d54:	47a0      	blx	r4
  405d56:	b110      	cbz	r0, 405d5e <getS0cal+0x8e>
  405d58:	2300      	movs	r3, #0
  405d5a:	f8c8 3000 	str.w	r3, [r8]
		
		if(!pio_get(SW3)) {
  405d5e:	4628      	mov	r0, r5
  405d60:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405d68:	47a0      	blx	r4
  405d6a:	b950      	cbnz	r0, 405d82 <getS0cal+0xb2>
			ang += 0.01;
  405d6c:	4630      	mov	r0, r6
  405d6e:	4b36      	ldr	r3, [pc, #216]	; (405e48 <getS0cal+0x178>)
  405d70:	4798      	blx	r3
  405d72:	a32f      	add	r3, pc, #188	; (adr r3, 405e30 <getS0cal+0x160>)
  405d74:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d78:	4e34      	ldr	r6, [pc, #208]	; (405e4c <getS0cal+0x17c>)
  405d7a:	47b0      	blx	r6
  405d7c:	4b34      	ldr	r3, [pc, #208]	; (405e50 <getS0cal+0x180>)
  405d7e:	4798      	blx	r3
  405d80:	4606      	mov	r6, r0
		}
		
		if(!pio_get(SW2)) {
  405d82:	4628      	mov	r0, r5
  405d84:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405d8c:	47a0      	blx	r4
  405d8e:	b950      	cbnz	r0, 405da6 <getS0cal+0xd6>
			ang -= 0.01;
  405d90:	4630      	mov	r0, r6
  405d92:	4b2d      	ldr	r3, [pc, #180]	; (405e48 <getS0cal+0x178>)
  405d94:	4798      	blx	r3
  405d96:	a326      	add	r3, pc, #152	; (adr r3, 405e30 <getS0cal+0x160>)
  405d98:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d9c:	4e2d      	ldr	r6, [pc, #180]	; (405e54 <getS0cal+0x184>)
  405d9e:	47b0      	blx	r6
  405da0:	4b2b      	ldr	r3, [pc, #172]	; (405e50 <getS0cal+0x180>)
  405da2:	4798      	blx	r3
  405da4:	4606      	mov	r6, r0
		}
		
		if(calState == 1) pio_set(LED3);
  405da6:	2f01      	cmp	r7, #1
  405da8:	d105      	bne.n	405db6 <getS0cal+0xe6>
  405daa:	4650      	mov	r0, sl
  405dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405db0:	4b29      	ldr	r3, [pc, #164]	; (405e58 <getS0cal+0x188>)
  405db2:	4798      	blx	r3
  405db4:	e004      	b.n	405dc0 <getS0cal+0xf0>
		else pio_clear(LED3);
  405db6:	4650      	mov	r0, sl
  405db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405dbc:	4b27      	ldr	r3, [pc, #156]	; (405e5c <getS0cal+0x18c>)
  405dbe:	4798      	blx	r3
		
		WriteServo(Leg,0,ang);
  405dc0:	4648      	mov	r0, r9
  405dc2:	2100      	movs	r1, #0
  405dc4:	4632      	mov	r2, r6
  405dc6:	4b26      	ldr	r3, [pc, #152]	; (405e60 <getS0cal+0x190>)
  405dc8:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  405dca:	4628      	mov	r0, r5
  405dcc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
  405dd4:	47a0      	blx	r4
  405dd6:	2f00      	cmp	r7, #0
  405dd8:	dda0      	ble.n	405d1c <getS0cal+0x4c>
  405dda:	2800      	cmp	r0, #0
  405ddc:	d19e      	bne.n	405d1c <getS0cal+0x4c>
  405dde:	f8d8 3000 	ldr.w	r3, [r8]
  405de2:	2b00      	cmp	r3, #0
  405de4:	d19a      	bne.n	405d1c <getS0cal+0x4c>
		else pio_clear(LED3);
		
		WriteServo(Leg,0,ang);
		
	}
	But_Up = 1;
  405de6:	2501      	movs	r5, #1
  405de8:	4b1e      	ldr	r3, [pc, #120]	; (405e64 <getS0cal+0x194>)
  405dea:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  405dec:	eddb 7a00 	vldr	s15, [fp]
  405df0:	ee07 6a10 	vmov	s14, r6
  405df4:	ee77 7a27 	vadd.f32	s15, s14, s15
  405df8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 405e68 <getS0cal+0x198>
  405dfc:	eec7 7a87 	vdiv.f32	s15, s15, s14
  405e00:	9b01      	ldr	r3, [sp, #4]
  405e02:	edc3 7a00 	vstr	s15, [r3]
	cmdServoMan(6,0,90.00);
  405e06:	2006      	movs	r0, #6
  405e08:	2100      	movs	r1, #0
  405e0a:	225a      	movs	r2, #90	; 0x5a
  405e0c:	4c0a      	ldr	r4, [pc, #40]	; (405e38 <getS0cal+0x168>)
  405e0e:	47a0      	blx	r4
	cmdServoMan(6,1,90.00);
  405e10:	2006      	movs	r0, #6
  405e12:	4629      	mov	r1, r5
  405e14:	225a      	movs	r2, #90	; 0x5a
  405e16:	47a0      	blx	r4
	cmdServoMan(6,2,180.00);
  405e18:	2006      	movs	r0, #6
  405e1a:	2102      	movs	r1, #2
  405e1c:	22b4      	movs	r2, #180	; 0xb4
  405e1e:	47a0      	blx	r4
}
  405e20:	b003      	add	sp, #12
  405e22:	ecbd 8b02 	vpop	{d8}
  405e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e2a:	bf00      	nop
  405e2c:	f3af 8000 	nop.w
  405e30:	47ae147b 	.word	0x47ae147b
  405e34:	3f847ae1 	.word	0x3f847ae1
  405e38:	00406781 	.word	0x00406781
  405e3c:	400e1200 	.word	0x400e1200
  405e40:	004027d1 	.word	0x004027d1
  405e44:	42b40000 	.word	0x42b40000
  405e48:	0040a461 	.word	0x0040a461
  405e4c:	0040a1a5 	.word	0x0040a1a5
  405e50:	0040aa8d 	.word	0x0040aa8d
  405e54:	0040a1a1 	.word	0x0040a1a1
  405e58:	004027c9 	.word	0x004027c9
  405e5c:	004027cd 	.word	0x004027cd
  405e60:	004050b9 	.word	0x004050b9
  405e64:	2040c4c4 	.word	0x2040c4c4
  405e68:	42340000 	.word	0x42340000
  405e6c:	400e0e00 	.word	0x400e0e00

00405e70 <getS1cal>:


void getS1cal(int Leg, float* angOff, float* Lin) {
  405e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e74:	ed2d 8b02 	vpush	{d8}
  405e78:	b083      	sub	sp, #12
  405e7a:	4681      	mov	r9, r0
  405e7c:	468b      	mov	fp, r1
  405e7e:	9201      	str	r2, [sp, #4]
	int calState = 0;
	float ang = 0;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  405e80:	2006      	movs	r0, #6
  405e82:	2100      	movs	r1, #0
  405e84:	225a      	movs	r2, #90	; 0x5a
  405e86:	4c54      	ldr	r4, [pc, #336]	; (405fd8 <getS1cal+0x168>)
  405e88:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  405e8a:	2006      	movs	r0, #6
  405e8c:	2101      	movs	r1, #1
  405e8e:	2200      	movs	r2, #0
  405e90:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  405e92:	2006      	movs	r0, #6
  405e94:	2102      	movs	r1, #2
  405e96:	225a      	movs	r2, #90	; 0x5a
  405e98:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  405e9a:	4850      	ldr	r0, [pc, #320]	; (405fdc <getS1cal+0x16c>)
  405e9c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
  405ea4:	4b4e      	ldr	r3, [pc, #312]	; (405fe0 <getS1cal+0x170>)
  405ea6:	4798      	blx	r3
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 0;
  405ea8:	2600      	movs	r6, #0
	cmdServoMan(6,2,180.00);
}


void getS1cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  405eaa:	2700      	movs	r7, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  405eac:	4d4b      	ldr	r5, [pc, #300]	; (405fdc <getS1cal+0x16c>)
  405eae:	4c4c      	ldr	r4, [pc, #304]	; (405fe0 <getS1cal+0x170>)
  405eb0:	f8df 814c 	ldr.w	r8, [pc, #332]	; 406000 <getS1cal+0x190>
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  405eb4:	ee08 6a10 	vmov	s16, r6
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  405eb8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 406008 <getS1cal+0x198>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  405ebc:	4628      	mov	r0, r5
  405ebe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
  405ec6:	47a0      	blx	r4
  405ec8:	b978      	cbnz	r0, 405eea <getS1cal+0x7a>
  405eca:	f8d8 3000 	ldr.w	r3, [r8]
  405ece:	b963      	cbnz	r3, 405eea <getS1cal+0x7a>
			if(calState == 0){
  405ed0:	b92f      	cbnz	r7, 405ede <getS1cal+0x6e>
				*angOff = 0 - ang;
  405ed2:	ee07 6a90 	vmov	s15, r6
  405ed6:	ee78 7a67 	vsub.f32	s15, s16, s15
  405eda:	edcb 7a00 	vstr	s15, [fp]
			}
			calState++;
  405ede:	3701      	adds	r7, #1
			ang = 0;
			But_Up = 1;
  405ee0:	2301      	movs	r3, #1
  405ee2:	f8c8 3000 	str.w	r3, [r8]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 0 - ang;
			}
			calState++;
			ang = 0;
  405ee6:	ee18 6a10 	vmov	r6, s16
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  405eea:	4628      	mov	r0, r5
  405eec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
  405ef4:	47a0      	blx	r4
  405ef6:	b110      	cbz	r0, 405efe <getS1cal+0x8e>
  405ef8:	2300      	movs	r3, #0
  405efa:	f8c8 3000 	str.w	r3, [r8]
		
		if(!pio_get(SW3)) {
  405efe:	4628      	mov	r0, r5
  405f00:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405f08:	47a0      	blx	r4
  405f0a:	b950      	cbnz	r0, 405f22 <getS1cal+0xb2>
			ang += 0.01;
  405f0c:	4630      	mov	r0, r6
  405f0e:	4b35      	ldr	r3, [pc, #212]	; (405fe4 <getS1cal+0x174>)
  405f10:	4798      	blx	r3
  405f12:	a32f      	add	r3, pc, #188	; (adr r3, 405fd0 <getS1cal+0x160>)
  405f14:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f18:	4e33      	ldr	r6, [pc, #204]	; (405fe8 <getS1cal+0x178>)
  405f1a:	47b0      	blx	r6
  405f1c:	4b33      	ldr	r3, [pc, #204]	; (405fec <getS1cal+0x17c>)
  405f1e:	4798      	blx	r3
  405f20:	4606      	mov	r6, r0
		}
		
		if(!pio_get(SW2)) {
  405f22:	4628      	mov	r0, r5
  405f24:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405f2c:	47a0      	blx	r4
  405f2e:	b950      	cbnz	r0, 405f46 <getS1cal+0xd6>
			ang -= 0.01;
  405f30:	4630      	mov	r0, r6
  405f32:	4b2c      	ldr	r3, [pc, #176]	; (405fe4 <getS1cal+0x174>)
  405f34:	4798      	blx	r3
  405f36:	a326      	add	r3, pc, #152	; (adr r3, 405fd0 <getS1cal+0x160>)
  405f38:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f3c:	4e2c      	ldr	r6, [pc, #176]	; (405ff0 <getS1cal+0x180>)
  405f3e:	47b0      	blx	r6
  405f40:	4b2a      	ldr	r3, [pc, #168]	; (405fec <getS1cal+0x17c>)
  405f42:	4798      	blx	r3
  405f44:	4606      	mov	r6, r0
		}
		
		if(calState == 1) pio_set(LED3);
  405f46:	2f01      	cmp	r7, #1
  405f48:	d105      	bne.n	405f56 <getS1cal+0xe6>
  405f4a:	4650      	mov	r0, sl
  405f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405f50:	4b28      	ldr	r3, [pc, #160]	; (405ff4 <getS1cal+0x184>)
  405f52:	4798      	blx	r3
  405f54:	e004      	b.n	405f60 <getS1cal+0xf0>
		else pio_clear(LED3);
  405f56:	4650      	mov	r0, sl
  405f58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405f5c:	4b26      	ldr	r3, [pc, #152]	; (405ff8 <getS1cal+0x188>)
  405f5e:	4798      	blx	r3
		
		WriteServo(Leg,1,ang);
  405f60:	4648      	mov	r0, r9
  405f62:	2101      	movs	r1, #1
  405f64:	4632      	mov	r2, r6
  405f66:	4b25      	ldr	r3, [pc, #148]	; (405ffc <getS1cal+0x18c>)
  405f68:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  405f6a:	4628      	mov	r0, r5
  405f6c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405f70:	f44f 7200 	mov.w	r2, #512	; 0x200
  405f74:	47a0      	blx	r4
  405f76:	2f00      	cmp	r7, #0
  405f78:	dda0      	ble.n	405ebc <getS1cal+0x4c>
  405f7a:	2800      	cmp	r0, #0
  405f7c:	d19e      	bne.n	405ebc <getS1cal+0x4c>
  405f7e:	f8d8 3000 	ldr.w	r3, [r8]
  405f82:	2b00      	cmp	r3, #0
  405f84:	d19a      	bne.n	405ebc <getS1cal+0x4c>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,1,ang);
	}
	But_Up = 1;
  405f86:	2501      	movs	r5, #1
  405f88:	4b1d      	ldr	r3, [pc, #116]	; (406000 <getS1cal+0x190>)
  405f8a:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/45.00;
  405f8c:	eddb 7a00 	vldr	s15, [fp]
  405f90:	ee07 6a10 	vmov	s14, r6
  405f94:	ee77 7a27 	vadd.f32	s15, s14, s15
  405f98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 406004 <getS1cal+0x194>
  405f9c:	eec7 7a87 	vdiv.f32	s15, s15, s14
  405fa0:	9b01      	ldr	r3, [sp, #4]
  405fa2:	edc3 7a00 	vstr	s15, [r3]
	cmdServoMan(6,0,90.00);
  405fa6:	2006      	movs	r0, #6
  405fa8:	2100      	movs	r1, #0
  405faa:	225a      	movs	r2, #90	; 0x5a
  405fac:	4c0a      	ldr	r4, [pc, #40]	; (405fd8 <getS1cal+0x168>)
  405fae:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  405fb0:	2006      	movs	r0, #6
  405fb2:	4629      	mov	r1, r5
  405fb4:	2200      	movs	r2, #0
  405fb6:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  405fb8:	2006      	movs	r0, #6
  405fba:	2102      	movs	r1, #2
  405fbc:	225a      	movs	r2, #90	; 0x5a
  405fbe:	47a0      	blx	r4
}
  405fc0:	b003      	add	sp, #12
  405fc2:	ecbd 8b02 	vpop	{d8}
  405fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fca:	bf00      	nop
  405fcc:	f3af 8000 	nop.w
  405fd0:	47ae147b 	.word	0x47ae147b
  405fd4:	3f847ae1 	.word	0x3f847ae1
  405fd8:	00406781 	.word	0x00406781
  405fdc:	400e1200 	.word	0x400e1200
  405fe0:	004027d1 	.word	0x004027d1
  405fe4:	0040a461 	.word	0x0040a461
  405fe8:	0040a1a5 	.word	0x0040a1a5
  405fec:	0040aa8d 	.word	0x0040aa8d
  405ff0:	0040a1a1 	.word	0x0040a1a1
  405ff4:	004027c9 	.word	0x004027c9
  405ff8:	004027cd 	.word	0x004027cd
  405ffc:	004050b9 	.word	0x004050b9
  406000:	2040c4c4 	.word	0x2040c4c4
  406004:	42340000 	.word	0x42340000
  406008:	400e0e00 	.word	0x400e0e00
  40600c:	00000000 	.word	0x00000000

00406010 <getS2cal>:

void getS2cal(int Leg, float* angOff, float* Lin) {
  406010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406014:	ed2d 8b02 	vpush	{d8}
  406018:	b083      	sub	sp, #12
  40601a:	4681      	mov	r9, r0
  40601c:	468b      	mov	fp, r1
  40601e:	9201      	str	r2, [sp, #4]
	int calState = 0;
	float ang = 90;
	extern int But_Up;
	
	cmdServoMan(6,0,90.00);
  406020:	2006      	movs	r0, #6
  406022:	2100      	movs	r1, #0
  406024:	225a      	movs	r2, #90	; 0x5a
  406026:	4c54      	ldr	r4, [pc, #336]	; (406178 <getS2cal+0x168>)
  406028:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  40602a:	2006      	movs	r0, #6
  40602c:	2101      	movs	r1, #1
  40602e:	2200      	movs	r2, #0
  406030:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406032:	2006      	movs	r0, #6
  406034:	2102      	movs	r1, #2
  406036:	225a      	movs	r2, #90	; 0x5a
  406038:	47a0      	blx	r4
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  40603a:	4850      	ldr	r0, [pc, #320]	; (40617c <getS2cal+0x16c>)
  40603c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406040:	f44f 7200 	mov.w	r2, #512	; 0x200
  406044:	4b4e      	ldr	r3, [pc, #312]	; (406180 <getS2cal+0x170>)
  406046:	4798      	blx	r3
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
	float ang = 90;
  406048:	4e4e      	ldr	r6, [pc, #312]	; (406184 <getS2cal+0x174>)
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
}

void getS2cal(int Leg, float* angOff, float* Lin) {
	int calState = 0;
  40604a:	2700      	movs	r7, #0
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40604c:	4d4b      	ldr	r5, [pc, #300]	; (40617c <getS2cal+0x16c>)
  40604e:	4c4c      	ldr	r4, [pc, #304]	; (406180 <getS2cal+0x170>)
  406050:	f8df 8150 	ldr.w	r8, [pc, #336]	; 4061a4 <getS2cal+0x194>
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  406054:	ee08 6a10 	vmov	s16, r6
		if(!pio_get(SW2)) {
			ang -= 0.01;
		}
		
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
  406058:	f8df a150 	ldr.w	sl, [pc, #336]	; 4061ac <getS2cal+0x19c>
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
		
		if(!pio_get(SW4)&& !But_Up) {
  40605c:	4628      	mov	r0, r5
  40605e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406062:	f44f 7200 	mov.w	r2, #512	; 0x200
  406066:	47a0      	blx	r4
  406068:	b978      	cbnz	r0, 40608a <getS2cal+0x7a>
  40606a:	f8d8 3000 	ldr.w	r3, [r8]
  40606e:	b963      	cbnz	r3, 40608a <getS2cal+0x7a>
			if(calState == 0){
  406070:	b92f      	cbnz	r7, 40607e <getS2cal+0x6e>
				*angOff = 90 - ang;
  406072:	ee07 6a90 	vmov	s15, r6
  406076:	ee78 7a67 	vsub.f32	s15, s16, s15
  40607a:	edcb 7a00 	vstr	s15, [fp]
			}
			calState++;
  40607e:	3701      	adds	r7, #1
			ang = 90;
			But_Up = 1;
  406080:	2301      	movs	r3, #1
  406082:	f8c8 3000 	str.w	r3, [r8]
		if(!pio_get(SW4)&& !But_Up) {
			if(calState == 0){
				*angOff = 90 - ang;
			}
			calState++;
			ang = 90;
  406086:	ee18 6a10 	vmov	r6, s16
			But_Up = 1;
		}
		
		if(pio_get(SW4)) But_Up = 0;
  40608a:	4628      	mov	r0, r5
  40608c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406090:	f44f 7200 	mov.w	r2, #512	; 0x200
  406094:	47a0      	blx	r4
  406096:	b110      	cbz	r0, 40609e <getS2cal+0x8e>
  406098:	2300      	movs	r3, #0
  40609a:	f8c8 3000 	str.w	r3, [r8]
		
		if(!pio_get(SW3)) {
  40609e:	4628      	mov	r0, r5
  4060a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4060a8:	47a0      	blx	r4
  4060aa:	b950      	cbnz	r0, 4060c2 <getS2cal+0xb2>
			ang += 0.01;
  4060ac:	4630      	mov	r0, r6
  4060ae:	4b36      	ldr	r3, [pc, #216]	; (406188 <getS2cal+0x178>)
  4060b0:	4798      	blx	r3
  4060b2:	a32f      	add	r3, pc, #188	; (adr r3, 406170 <getS2cal+0x160>)
  4060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060b8:	4e34      	ldr	r6, [pc, #208]	; (40618c <getS2cal+0x17c>)
  4060ba:	47b0      	blx	r6
  4060bc:	4b34      	ldr	r3, [pc, #208]	; (406190 <getS2cal+0x180>)
  4060be:	4798      	blx	r3
  4060c0:	4606      	mov	r6, r0
		}
		
		if(!pio_get(SW2)) {
  4060c2:	4628      	mov	r0, r5
  4060c4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4060c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4060cc:	47a0      	blx	r4
  4060ce:	b950      	cbnz	r0, 4060e6 <getS2cal+0xd6>
			ang -= 0.01;
  4060d0:	4630      	mov	r0, r6
  4060d2:	4b2d      	ldr	r3, [pc, #180]	; (406188 <getS2cal+0x178>)
  4060d4:	4798      	blx	r3
  4060d6:	a326      	add	r3, pc, #152	; (adr r3, 406170 <getS2cal+0x160>)
  4060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4060dc:	4e2d      	ldr	r6, [pc, #180]	; (406194 <getS2cal+0x184>)
  4060de:	47b0      	blx	r6
  4060e0:	4b2b      	ldr	r3, [pc, #172]	; (406190 <getS2cal+0x180>)
  4060e2:	4798      	blx	r3
  4060e4:	4606      	mov	r6, r0
		}
		
		if(calState == 1) pio_set(LED3);
  4060e6:	2f01      	cmp	r7, #1
  4060e8:	d105      	bne.n	4060f6 <getS2cal+0xe6>
  4060ea:	4650      	mov	r0, sl
  4060ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4060f0:	4b29      	ldr	r3, [pc, #164]	; (406198 <getS2cal+0x188>)
  4060f2:	4798      	blx	r3
  4060f4:	e004      	b.n	406100 <getS2cal+0xf0>
		else pio_clear(LED3);
  4060f6:	4650      	mov	r0, sl
  4060f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4060fc:	4b27      	ldr	r3, [pc, #156]	; (40619c <getS2cal+0x18c>)
  4060fe:	4798      	blx	r3
		
		WriteServo(Leg,2,ang);
  406100:	4648      	mov	r0, r9
  406102:	2102      	movs	r1, #2
  406104:	4632      	mov	r2, r6
  406106:	4b26      	ldr	r3, [pc, #152]	; (4061a0 <getS2cal+0x190>)
  406108:	4798      	blx	r3
	
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,0.00);
	cmdServoMan(6,2,90.00);
	
	while(!(!pio_get(SW4) &&  calState >= 1 && !But_Up)) {
  40610a:	4628      	mov	r0, r5
  40610c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  406110:	f44f 7200 	mov.w	r2, #512	; 0x200
  406114:	47a0      	blx	r4
  406116:	2f00      	cmp	r7, #0
  406118:	dda0      	ble.n	40605c <getS2cal+0x4c>
  40611a:	2800      	cmp	r0, #0
  40611c:	d19e      	bne.n	40605c <getS2cal+0x4c>
  40611e:	f8d8 3000 	ldr.w	r3, [r8]
  406122:	2b00      	cmp	r3, #0
  406124:	d19a      	bne.n	40605c <getS2cal+0x4c>
		if(calState == 1) pio_set(LED3);
		else pio_clear(LED3);
		
		WriteServo(Leg,2,ang);
	}
	But_Up = 1;
  406126:	2501      	movs	r5, #1
  406128:	4b1e      	ldr	r3, [pc, #120]	; (4061a4 <getS2cal+0x194>)
  40612a:	601d      	str	r5, [r3, #0]
	*Lin = (*angOff+ang)/90.00;
  40612c:	eddb 7a00 	vldr	s15, [fp]
  406130:	ee07 6a10 	vmov	s14, r6
  406134:	ee77 7a27 	vadd.f32	s15, s14, s15
  406138:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 4061a8 <getS2cal+0x198>
  40613c:	eec7 7a87 	vdiv.f32	s15, s15, s14
  406140:	9b01      	ldr	r3, [sp, #4]
  406142:	edc3 7a00 	vstr	s15, [r3]
	cmdServoMan(6,0,90.00);
  406146:	2006      	movs	r0, #6
  406148:	2100      	movs	r1, #0
  40614a:	225a      	movs	r2, #90	; 0x5a
  40614c:	4c0a      	ldr	r4, [pc, #40]	; (406178 <getS2cal+0x168>)
  40614e:	47a0      	blx	r4
	cmdServoMan(6,1,0.00);
  406150:	2006      	movs	r0, #6
  406152:	4629      	mov	r1, r5
  406154:	2200      	movs	r2, #0
  406156:	47a0      	blx	r4
	cmdServoMan(6,2,90.00);
  406158:	2006      	movs	r0, #6
  40615a:	2102      	movs	r1, #2
  40615c:	225a      	movs	r2, #90	; 0x5a
  40615e:	47a0      	blx	r4
}
  406160:	b003      	add	sp, #12
  406162:	ecbd 8b02 	vpop	{d8}
  406166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40616a:	bf00      	nop
  40616c:	f3af 8000 	nop.w
  406170:	47ae147b 	.word	0x47ae147b
  406174:	3f847ae1 	.word	0x3f847ae1
  406178:	00406781 	.word	0x00406781
  40617c:	400e1200 	.word	0x400e1200
  406180:	004027d1 	.word	0x004027d1
  406184:	42b40000 	.word	0x42b40000
  406188:	0040a461 	.word	0x0040a461
  40618c:	0040a1a5 	.word	0x0040a1a5
  406190:	0040aa8d 	.word	0x0040aa8d
  406194:	0040a1a1 	.word	0x0040a1a1
  406198:	004027c9 	.word	0x004027c9
  40619c:	004027cd 	.word	0x004027cd
  4061a0:	004050b9 	.word	0x004050b9
  4061a4:	2040c4c4 	.word	0x2040c4c4
  4061a8:	42b40000 	.word	0x42b40000
  4061ac:	400e0e00 	.word	0x400e0e00

004061b0 <calibServoSpec>:

void calibServoSpec(float* calData,int Leg,int Svo) {
  4061b0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  4061b4:	b09c      	sub	sp, #112	; 0x70
  4061b6:	4680      	mov	r8, r0

		if(Svo == 0) {
  4061b8:	b962      	cbnz	r2, 4061d4 <calibServoSpec+0x24>
			calData[Leg*2] = 0;
  4061ba:	00cb      	lsls	r3, r1, #3
  4061bc:	18c4      	adds	r4, r0, r3
  4061be:	2000      	movs	r0, #0
  4061c0:	6020      	str	r0, [r4, #0]
			calData[Leg*2+1] = 0;
  4061c2:	3304      	adds	r3, #4
  4061c4:	eb08 0203 	add.w	r2, r8, r3
  4061c8:	6010      	str	r0, [r2, #0]
			getS0cal(Leg,&calData[Leg*2],&calData[Leg*2+1]);
  4061ca:	4608      	mov	r0, r1
  4061cc:	4621      	mov	r1, r4
  4061ce:	4b24      	ldr	r3, [pc, #144]	; (406260 <calibServoSpec+0xb0>)
  4061d0:	4798      	blx	r3
  4061d2:	e020      	b.n	406216 <calibServoSpec+0x66>
		}
		else if(Svo == 1) {
  4061d4:	2a01      	cmp	r2, #1
  4061d6:	d10e      	bne.n	4061f6 <calibServoSpec+0x46>
			calData[Leg*2+12] = 0;
  4061d8:	00cb      	lsls	r3, r1, #3
  4061da:	f103 0430 	add.w	r4, r3, #48	; 0x30
  4061de:	4404      	add	r4, r0
  4061e0:	2000      	movs	r0, #0
  4061e2:	6020      	str	r0, [r4, #0]
			calData[Leg*2+13] = 0;
  4061e4:	3334      	adds	r3, #52	; 0x34
  4061e6:	eb08 0203 	add.w	r2, r8, r3
  4061ea:	6010      	str	r0, [r2, #0]
			getS1cal(Leg,&calData[Leg*2+12],&calData[Leg*2+13]);
  4061ec:	4608      	mov	r0, r1
  4061ee:	4621      	mov	r1, r4
  4061f0:	4b1c      	ldr	r3, [pc, #112]	; (406264 <calibServoSpec+0xb4>)
  4061f2:	4798      	blx	r3
  4061f4:	e00f      	b.n	406216 <calibServoSpec+0x66>
		}
		else if(Svo == 2) {
  4061f6:	2a02      	cmp	r2, #2
  4061f8:	d10d      	bne.n	406216 <calibServoSpec+0x66>
			calData[Leg*2+24] = 0;
  4061fa:	00cb      	lsls	r3, r1, #3
  4061fc:	f103 0460 	add.w	r4, r3, #96	; 0x60
  406200:	4404      	add	r4, r0
  406202:	2000      	movs	r0, #0
  406204:	6020      	str	r0, [r4, #0]
			calData[Leg*2+25] = 0;
  406206:	3364      	adds	r3, #100	; 0x64
  406208:	eb08 0203 	add.w	r2, r8, r3
  40620c:	6010      	str	r0, [r2, #0]
			getS2cal(Leg,&calData[Leg*2+24],&calData[Leg*2+25]);
  40620e:	4608      	mov	r0, r1
  406210:	4621      	mov	r1, r4
  406212:	4b15      	ldr	r3, [pc, #84]	; (406268 <calibServoSpec+0xb8>)
  406214:	4798      	blx	r3
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
  406216:	4815      	ldr	r0, [pc, #84]	; (40626c <calibServoSpec+0xbc>)
  406218:	4c15      	ldr	r4, [pc, #84]	; (406270 <calibServoSpec+0xc0>)
  40621a:	47a0      	blx	r4
		char buf[100];
		sendDebugString("{");
  40621c:	4815      	ldr	r0, [pc, #84]	; (406274 <calibServoSpec+0xc4>)
  40621e:	47a0      	blx	r4
  406220:	4644      	mov	r4, r8
  406222:	f108 0890 	add.w	r8, r8, #144	; 0x90
			for(int i =0; i<18; i++) {
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  406226:	4f14      	ldr	r7, [pc, #80]	; (406278 <calibServoSpec+0xc8>)
  406228:	4d14      	ldr	r5, [pc, #80]	; (40627c <calibServoSpec+0xcc>)
  40622a:	4e15      	ldr	r6, [pc, #84]	; (406280 <calibServoSpec+0xd0>)
  40622c:	6820      	ldr	r0, [r4, #0]
  40622e:	47a8      	blx	r5
  406230:	4682      	mov	sl, r0
  406232:	468b      	mov	fp, r1
  406234:	6860      	ldr	r0, [r4, #4]
  406236:	47a8      	blx	r5
  406238:	e9cd 0100 	strd	r0, r1, [sp]
  40623c:	a803      	add	r0, sp, #12
  40623e:	4639      	mov	r1, r7
  406240:	4652      	mov	r2, sl
  406242:	465b      	mov	r3, fp
  406244:	47b0      	blx	r6
				sendDebugString(buf);
  406246:	a803      	add	r0, sp, #12
  406248:	4b09      	ldr	r3, [pc, #36]	; (406270 <calibServoSpec+0xc0>)
  40624a:	4798      	blx	r3
  40624c:	3408      	adds	r4, #8
		}
		
		sendDebugString("Finished servo cal data Follows:\n");
		char buf[100];
		sendDebugString("{");
			for(int i =0; i<18; i++) {
  40624e:	4544      	cmp	r4, r8
  406250:	d1ec      	bne.n	40622c <calibServoSpec+0x7c>
				sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
				sendDebugString(buf);
			}
		sendDebugString("}\n");
  406252:	480c      	ldr	r0, [pc, #48]	; (406284 <calibServoSpec+0xd4>)
  406254:	4b06      	ldr	r3, [pc, #24]	; (406270 <calibServoSpec+0xc0>)
  406256:	4798      	blx	r3
}
  406258:	b01c      	add	sp, #112	; 0x70
  40625a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  40625e:	bf00      	nop
  406260:	00405cd1 	.word	0x00405cd1
  406264:	00405e71 	.word	0x00405e71
  406268:	00406011 	.word	0x00406011
  40626c:	00412d44 	.word	0x00412d44
  406270:	0040019d 	.word	0x0040019d
  406274:	00412d68 	.word	0x00412d68
  406278:	00412d6c 	.word	0x00412d6c
  40627c:	0040a461 	.word	0x0040a461
  406280:	0040b3d9 	.word	0x0040b3d9
  406284:	00412d74 	.word	0x00412d74

00406288 <byteToLEDs>:
		}
	sendDebugString("}\n");
}

//Misc
void byteToLEDs(uint8_t disp,uint8_t mask) {
  406288:	b538      	push	{r3, r4, r5, lr}
  40628a:	4605      	mov	r5, r0
  40628c:	460c      	mov	r4, r1
	if(mask&(1<<0) && disp&(1<<0)) pio_set(LED0);
  40628e:	f011 0f01 	tst.w	r1, #1
  406292:	d00d      	beq.n	4062b0 <byteToLEDs+0x28>
  406294:	f010 0f01 	tst.w	r0, #1
  406298:	d005      	beq.n	4062a6 <byteToLEDs+0x1e>
  40629a:	483f      	ldr	r0, [pc, #252]	; (406398 <byteToLEDs+0x110>)
  40629c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4062a0:	4b3e      	ldr	r3, [pc, #248]	; (40639c <byteToLEDs+0x114>)
  4062a2:	4798      	blx	r3
  4062a4:	e004      	b.n	4062b0 <byteToLEDs+0x28>
	else if(mask&(1<<0)) pio_clear(LED0);
  4062a6:	483c      	ldr	r0, [pc, #240]	; (406398 <byteToLEDs+0x110>)
  4062a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4062ac:	4b3c      	ldr	r3, [pc, #240]	; (4063a0 <byteToLEDs+0x118>)
  4062ae:	4798      	blx	r3
	
	if(mask&(1<<1) && disp&(1<<1)) pio_set(LED1);
  4062b0:	f014 0f02 	tst.w	r4, #2
  4062b4:	d00d      	beq.n	4062d2 <byteToLEDs+0x4a>
  4062b6:	f015 0f02 	tst.w	r5, #2
  4062ba:	d005      	beq.n	4062c8 <byteToLEDs+0x40>
  4062bc:	4836      	ldr	r0, [pc, #216]	; (406398 <byteToLEDs+0x110>)
  4062be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4062c2:	4b36      	ldr	r3, [pc, #216]	; (40639c <byteToLEDs+0x114>)
  4062c4:	4798      	blx	r3
  4062c6:	e004      	b.n	4062d2 <byteToLEDs+0x4a>
	else if(mask&(1<<1)) pio_clear(LED1);
  4062c8:	4833      	ldr	r0, [pc, #204]	; (406398 <byteToLEDs+0x110>)
  4062ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4062ce:	4b34      	ldr	r3, [pc, #208]	; (4063a0 <byteToLEDs+0x118>)
  4062d0:	4798      	blx	r3
	
	if(mask&(1<<2) && disp&(1<<2)) pio_set(LED2);
  4062d2:	f014 0f04 	tst.w	r4, #4
  4062d6:	d00d      	beq.n	4062f4 <byteToLEDs+0x6c>
  4062d8:	f015 0f04 	tst.w	r5, #4
  4062dc:	d005      	beq.n	4062ea <byteToLEDs+0x62>
  4062de:	482e      	ldr	r0, [pc, #184]	; (406398 <byteToLEDs+0x110>)
  4062e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4062e4:	4b2d      	ldr	r3, [pc, #180]	; (40639c <byteToLEDs+0x114>)
  4062e6:	4798      	blx	r3
  4062e8:	e004      	b.n	4062f4 <byteToLEDs+0x6c>
	else if(mask&(1<<2)) pio_clear(LED2);
  4062ea:	482b      	ldr	r0, [pc, #172]	; (406398 <byteToLEDs+0x110>)
  4062ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4062f0:	4b2b      	ldr	r3, [pc, #172]	; (4063a0 <byteToLEDs+0x118>)
  4062f2:	4798      	blx	r3
	
	if(mask&(1<<3) && disp&(1<<3)) pio_set(LED3);
  4062f4:	f014 0f08 	tst.w	r4, #8
  4062f8:	d00d      	beq.n	406316 <byteToLEDs+0x8e>
  4062fa:	f015 0f08 	tst.w	r5, #8
  4062fe:	d005      	beq.n	40630c <byteToLEDs+0x84>
  406300:	4825      	ldr	r0, [pc, #148]	; (406398 <byteToLEDs+0x110>)
  406302:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406306:	4b25      	ldr	r3, [pc, #148]	; (40639c <byteToLEDs+0x114>)
  406308:	4798      	blx	r3
  40630a:	e004      	b.n	406316 <byteToLEDs+0x8e>
	else if(mask&(1<<3)) pio_clear(LED3);
  40630c:	4822      	ldr	r0, [pc, #136]	; (406398 <byteToLEDs+0x110>)
  40630e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406312:	4b23      	ldr	r3, [pc, #140]	; (4063a0 <byteToLEDs+0x118>)
  406314:	4798      	blx	r3
	
	if(mask&(1<<4) && disp&(1<<4)) pio_set(LED4);
  406316:	f014 0f10 	tst.w	r4, #16
  40631a:	d00d      	beq.n	406338 <byteToLEDs+0xb0>
  40631c:	f015 0f10 	tst.w	r5, #16
  406320:	d005      	beq.n	40632e <byteToLEDs+0xa6>
  406322:	4820      	ldr	r0, [pc, #128]	; (4063a4 <byteToLEDs+0x11c>)
  406324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406328:	4b1c      	ldr	r3, [pc, #112]	; (40639c <byteToLEDs+0x114>)
  40632a:	4798      	blx	r3
  40632c:	e004      	b.n	406338 <byteToLEDs+0xb0>
	else if(mask&(1<<4)) pio_clear(LED4);
  40632e:	481d      	ldr	r0, [pc, #116]	; (4063a4 <byteToLEDs+0x11c>)
  406330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406334:	4b1a      	ldr	r3, [pc, #104]	; (4063a0 <byteToLEDs+0x118>)
  406336:	4798      	blx	r3
	
	if(mask&(1<<5) && disp&(1<<5)) pio_set(LED5);
  406338:	f014 0f20 	tst.w	r4, #32
  40633c:	d00b      	beq.n	406356 <byteToLEDs+0xce>
  40633e:	f015 0f20 	tst.w	r5, #32
  406342:	d004      	beq.n	40634e <byteToLEDs+0xc6>
  406344:	4814      	ldr	r0, [pc, #80]	; (406398 <byteToLEDs+0x110>)
  406346:	2104      	movs	r1, #4
  406348:	4b14      	ldr	r3, [pc, #80]	; (40639c <byteToLEDs+0x114>)
  40634a:	4798      	blx	r3
  40634c:	e003      	b.n	406356 <byteToLEDs+0xce>
	else if(mask&(1<<5)) pio_clear(LED5);
  40634e:	4812      	ldr	r0, [pc, #72]	; (406398 <byteToLEDs+0x110>)
  406350:	2104      	movs	r1, #4
  406352:	4b13      	ldr	r3, [pc, #76]	; (4063a0 <byteToLEDs+0x118>)
  406354:	4798      	blx	r3
	
	if(mask&(1<<6) && disp&(1<<6)) pio_set(LED6);
  406356:	f014 0f40 	tst.w	r4, #64	; 0x40
  40635a:	d00d      	beq.n	406378 <byteToLEDs+0xf0>
  40635c:	f015 0f40 	tst.w	r5, #64	; 0x40
  406360:	d005      	beq.n	40636e <byteToLEDs+0xe6>
  406362:	480d      	ldr	r0, [pc, #52]	; (406398 <byteToLEDs+0x110>)
  406364:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406368:	4b0c      	ldr	r3, [pc, #48]	; (40639c <byteToLEDs+0x114>)
  40636a:	4798      	blx	r3
  40636c:	e004      	b.n	406378 <byteToLEDs+0xf0>
	else if(mask&(1<<6)) pio_clear(LED6);
  40636e:	480a      	ldr	r0, [pc, #40]	; (406398 <byteToLEDs+0x110>)
  406370:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406374:	4b0a      	ldr	r3, [pc, #40]	; (4063a0 <byteToLEDs+0x118>)
  406376:	4798      	blx	r3
	
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
  406378:	09e4      	lsrs	r4, r4, #7
  40637a:	d006      	beq.n	40638a <byteToLEDs+0x102>
  40637c:	09eb      	lsrs	r3, r5, #7
  40637e:	d004      	beq.n	40638a <byteToLEDs+0x102>
  406380:	4805      	ldr	r0, [pc, #20]	; (406398 <byteToLEDs+0x110>)
  406382:	2140      	movs	r1, #64	; 0x40
  406384:	4b05      	ldr	r3, [pc, #20]	; (40639c <byteToLEDs+0x114>)
  406386:	4798      	blx	r3
  406388:	bd38      	pop	{r3, r4, r5, pc}
	else if(mask&(1<<7)) pio_clear(LED7);
  40638a:	b11c      	cbz	r4, 406394 <byteToLEDs+0x10c>
  40638c:	4802      	ldr	r0, [pc, #8]	; (406398 <byteToLEDs+0x110>)
  40638e:	2140      	movs	r1, #64	; 0x40
  406390:	4b03      	ldr	r3, [pc, #12]	; (4063a0 <byteToLEDs+0x118>)
  406392:	4798      	blx	r3
  406394:	bd38      	pop	{r3, r4, r5, pc}
  406396:	bf00      	nop
  406398:	400e0e00 	.word	0x400e0e00
  40639c:	004027c9 	.word	0x004027c9
  4063a0:	004027cd 	.word	0x004027cd
  4063a4:	400e1000 	.word	0x400e1000

004063a8 <calibServos>:
				sendDebugString(buf);
			}
		sendDebugString("}\n");
}

void calibServos(float* calData) {
  4063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063ac:	b09d      	sub	sp, #116	; 0x74
  4063ae:	4606      	mov	r6, r0
	sendDebugString("Started servo cal\n");
  4063b0:	4849      	ldr	r0, [pc, #292]	; (4064d8 <calibServos+0x130>)
  4063b2:	4b4a      	ldr	r3, [pc, #296]	; (4064dc <calibServos+0x134>)
  4063b4:	4798      	blx	r3
  4063b6:	4634      	mov	r4, r6
  4063b8:	f106 0590 	add.w	r5, r6, #144	; 0x90
  4063bc:	4633      	mov	r3, r6
	for(int i = 0;i<36;i++) calData[i] = 0;
  4063be:	2200      	movs	r2, #0
  4063c0:	f843 2b04 	str.w	r2, [r3], #4
  4063c4:	42ab      	cmp	r3, r5
  4063c6:	d1fb      	bne.n	4063c0 <calibServos+0x18>
  4063c8:	46b0      	mov	r8, r6
  4063ca:	2700      	movs	r7, #0
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  4063cc:	f8df b124 	ldr.w	fp, [pc, #292]	; 4064f4 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  4063d0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4064f8 <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  4063d4:	f8df a124 	ldr.w	sl, [pc, #292]	; 4064fc <calibServos+0x154>

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  4063d8:	f3c7 1007 	ubfx	r0, r7, #4, #8
  4063dc:	21f0      	movs	r1, #240	; 0xf0
  4063de:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  4063e0:	2006      	movs	r0, #6
  4063e2:	2100      	movs	r1, #0
  4063e4:	225a      	movs	r2, #90	; 0x5a
  4063e6:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  4063e8:	2006      	movs	r0, #6
  4063ea:	2101      	movs	r1, #1
  4063ec:	225a      	movs	r2, #90	; 0x5a
  4063ee:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  4063f0:	2006      	movs	r0, #6
  4063f2:	2102      	movs	r1, #2
  4063f4:	22b4      	movs	r2, #180	; 0xb4
  4063f6:	47c8      	blx	r9
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
  4063f8:	4638      	mov	r0, r7
  4063fa:	4641      	mov	r1, r8
  4063fc:	f108 0204 	add.w	r2, r8, #4
  406400:	47d0      	blx	sl
}

void calibServos(float* calData) {
	sendDebugString("Started servo cal\n");
	for(int i = 0;i<36;i++) calData[i] = 0;
	for(int i =0; i<6; i++) {
  406402:	3701      	adds	r7, #1
  406404:	f108 0808 	add.w	r8, r8, #8
  406408:	2f06      	cmp	r7, #6
  40640a:	d1e5      	bne.n	4063d8 <calibServos+0x30>
  40640c:	f106 0830 	add.w	r8, r6, #48	; 0x30
  406410:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  406412:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 4064f4 <calibServos+0x14c>
		cmdServoMan(6,0,90.00);
  406416:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4064f8 <calibServos+0x150>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  40641a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 406500 <calibServos+0x158>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
		byteToLEDs(i>>4,0xF0);
  40641e:	f3c7 1007 	ubfx	r0, r7, #4, #8
  406422:	21f0      	movs	r1, #240	; 0xf0
  406424:	47d8      	blx	fp
		cmdServoMan(6,0,90.00);
  406426:	2006      	movs	r0, #6
  406428:	2100      	movs	r1, #0
  40642a:	225a      	movs	r2, #90	; 0x5a
  40642c:	47c8      	blx	r9
		cmdServoMan(6,1,90.00);
  40642e:	2006      	movs	r0, #6
  406430:	2101      	movs	r1, #1
  406432:	225a      	movs	r2, #90	; 0x5a
  406434:	47c8      	blx	r9
		cmdServoMan(6,2,180.00);
  406436:	2006      	movs	r0, #6
  406438:	2102      	movs	r1, #2
  40643a:	22b4      	movs	r2, #180	; 0xb4
  40643c:	47c8      	blx	r9
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
  40643e:	4638      	mov	r0, r7
  406440:	4641      	mov	r1, r8
  406442:	f108 0204 	add.w	r2, r8, #4
  406446:	47d0      	blx	sl
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS0cal(i,&calData[i*2],&calData[i*2+1]);
	}
	for(int i =0; i<6; i++) {
  406448:	3701      	adds	r7, #1
  40644a:	f108 0808 	add.w	r8, r8, #8
  40644e:	2f06      	cmp	r7, #6
  406450:	d1e5      	bne.n	40641e <calibServos+0x76>
  406452:	3660      	adds	r6, #96	; 0x60
  406454:	2700      	movs	r7, #0
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  406456:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4064f4 <calibServos+0x14c>
	cmdServoMan(6,0,90.00);
  40645a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4064f8 <calibServos+0x150>
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  40645e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406504 <calibServos+0x15c>
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
	byteToLEDs(i>>4,0xF0);
  406462:	f3c7 1007 	ubfx	r0, r7, #4, #8
  406466:	21f0      	movs	r1, #240	; 0xf0
  406468:	47d0      	blx	sl
	cmdServoMan(6,0,90.00);
  40646a:	2006      	movs	r0, #6
  40646c:	2100      	movs	r1, #0
  40646e:	225a      	movs	r2, #90	; 0x5a
  406470:	47c0      	blx	r8
	cmdServoMan(6,1,90.00);
  406472:	2006      	movs	r0, #6
  406474:	2101      	movs	r1, #1
  406476:	225a      	movs	r2, #90	; 0x5a
  406478:	47c0      	blx	r8
	cmdServoMan(6,2,180.00);
  40647a:	2006      	movs	r0, #6
  40647c:	2102      	movs	r1, #2
  40647e:	22b4      	movs	r2, #180	; 0xb4
  406480:	47c0      	blx	r8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
  406482:	4638      	mov	r0, r7
  406484:	4631      	mov	r1, r6
  406486:	1d32      	adds	r2, r6, #4
  406488:	47c8      	blx	r9
		cmdServoMan(6,0,90.00);
		cmdServoMan(6,1,90.00);
		cmdServoMan(6,2,180.00);
		getS1cal(i,&calData[i*2+12],&calData[i*2+13]);
	}
	for(int i =0; i<6; i++) {
  40648a:	3701      	adds	r7, #1
  40648c:	3608      	adds	r6, #8
  40648e:	2f06      	cmp	r7, #6
  406490:	d1e7      	bne.n	406462 <calibServos+0xba>
	cmdServoMan(6,0,90.00);
	cmdServoMan(6,1,90.00);
	cmdServoMan(6,2,180.00);
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
  406492:	4813      	ldr	r0, [pc, #76]	; (4064e0 <calibServos+0x138>)
  406494:	4e11      	ldr	r6, [pc, #68]	; (4064dc <calibServos+0x134>)
  406496:	47b0      	blx	r6
	char buf[100];
	sendDebugString("{");
  406498:	4812      	ldr	r0, [pc, #72]	; (4064e4 <calibServos+0x13c>)
  40649a:	47b0      	blx	r6
		for(int i =0; i<18; i++) {
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
  40649c:	f8df a068 	ldr.w	sl, [pc, #104]	; 406508 <calibServos+0x160>
  4064a0:	4f11      	ldr	r7, [pc, #68]	; (4064e8 <calibServos+0x140>)
  4064a2:	4e12      	ldr	r6, [pc, #72]	; (4064ec <calibServos+0x144>)
  4064a4:	6820      	ldr	r0, [r4, #0]
  4064a6:	47b8      	blx	r7
  4064a8:	4680      	mov	r8, r0
  4064aa:	4689      	mov	r9, r1
  4064ac:	6860      	ldr	r0, [r4, #4]
  4064ae:	47b8      	blx	r7
  4064b0:	e9cd 0100 	strd	r0, r1, [sp]
  4064b4:	a803      	add	r0, sp, #12
  4064b6:	4651      	mov	r1, sl
  4064b8:	4642      	mov	r2, r8
  4064ba:	464b      	mov	r3, r9
  4064bc:	47b0      	blx	r6
			sendDebugString(buf);
  4064be:	a803      	add	r0, sp, #12
  4064c0:	4b06      	ldr	r3, [pc, #24]	; (4064dc <calibServos+0x134>)
  4064c2:	4798      	blx	r3
  4064c4:	3408      	adds	r4, #8
	getS2cal(i,&calData[i*2+24],&calData[i*2+25]);
	}
	sendDebugString("Finished servo cal data Follows:\n");
	char buf[100];
	sendDebugString("{");
		for(int i =0; i<18; i++) {
  4064c6:	42a5      	cmp	r5, r4
  4064c8:	d1ec      	bne.n	4064a4 <calibServos+0xfc>
			sprintf(buf,"%f,%f,",calData[i*2],calData[i*2+1]);
			sendDebugString(buf);
		}
	sendDebugString("}\n");
  4064ca:	4809      	ldr	r0, [pc, #36]	; (4064f0 <calibServos+0x148>)
  4064cc:	4b03      	ldr	r3, [pc, #12]	; (4064dc <calibServos+0x134>)
  4064ce:	4798      	blx	r3
}
  4064d0:	b01d      	add	sp, #116	; 0x74
  4064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064d6:	bf00      	nop
  4064d8:	00412d78 	.word	0x00412d78
  4064dc:	0040019d 	.word	0x0040019d
  4064e0:	00412d44 	.word	0x00412d44
  4064e4:	00412d68 	.word	0x00412d68
  4064e8:	0040a461 	.word	0x0040a461
  4064ec:	0040b3d9 	.word	0x0040b3d9
  4064f0:	00412d74 	.word	0x00412d74
  4064f4:	00406289 	.word	0x00406289
  4064f8:	00406781 	.word	0x00406781
  4064fc:	00405cd1 	.word	0x00405cd1
  406500:	00405e71 	.word	0x00405e71
  406504:	00406011 	.word	0x00406011
  406508:	00412d6c 	.word	0x00412d6c

0040650c <surprise>:
	if(mask&(1<<7) && disp&(1<<7)) pio_set(LED7);
	else if(mask&(1<<7)) pio_clear(LED7);
	
}

void surprise() {
  40650c:	b570      	push	{r4, r5, r6, lr}
	WriteServo(2,0,120);
  40650e:	4d12      	ldr	r5, [pc, #72]	; (406558 <surprise+0x4c>)
  406510:	2002      	movs	r0, #2
  406512:	2100      	movs	r1, #0
  406514:	462a      	mov	r2, r5
  406516:	4c11      	ldr	r4, [pc, #68]	; (40655c <surprise+0x50>)
  406518:	47a0      	blx	r4
	WriteServo(3,0,60);
  40651a:	4e11      	ldr	r6, [pc, #68]	; (406560 <surprise+0x54>)
  40651c:	2003      	movs	r0, #3
  40651e:	2100      	movs	r1, #0
  406520:	4632      	mov	r2, r6
  406522:	47a0      	blx	r4
	WriteServo(4,0,60);
  406524:	2004      	movs	r0, #4
  406526:	2100      	movs	r1, #0
  406528:	4632      	mov	r2, r6
  40652a:	47a0      	blx	r4
	WriteServo(5,0,120);
  40652c:	2005      	movs	r0, #5
  40652e:	2100      	movs	r1, #0
  406530:	462a      	mov	r2, r5
  406532:	47a0      	blx	r4
	WriteServo(0,1,30);
  406534:	2000      	movs	r0, #0
  406536:	2101      	movs	r1, #1
  406538:	4a0a      	ldr	r2, [pc, #40]	; (406564 <surprise+0x58>)
  40653a:	47a0      	blx	r4
	WriteServo(1,1,30);
  40653c:	2001      	movs	r0, #1
  40653e:	4601      	mov	r1, r0
  406540:	4a08      	ldr	r2, [pc, #32]	; (406564 <surprise+0x58>)
  406542:	47a0      	blx	r4
	WriteServo(0,0,170);
  406544:	2000      	movs	r0, #0
  406546:	4601      	mov	r1, r0
  406548:	4a07      	ldr	r2, [pc, #28]	; (406568 <surprise+0x5c>)
  40654a:	47a0      	blx	r4
	WriteServo(1,0,10);
  40654c:	2001      	movs	r0, #1
  40654e:	2100      	movs	r1, #0
  406550:	4a06      	ldr	r2, [pc, #24]	; (40656c <surprise+0x60>)
  406552:	47a0      	blx	r4
  406554:	bd70      	pop	{r4, r5, r6, pc}
  406556:	bf00      	nop
  406558:	42f00000 	.word	0x42f00000
  40655c:	004050b9 	.word	0x004050b9
  406560:	42700000 	.word	0x42700000
  406564:	41f00000 	.word	0x41f00000
  406568:	432a0000 	.word	0x432a0000
  40656c:	41200000 	.word	0x41200000

00406570 <cmdInterp>:
		// 14	max_i addition amount byte 1
		// 15	max_i addition amount byte 2
		// 16	max_i addition amount byte 3
		// 17   walk EN
		
		switch(cmd[0]) {
  406570:	7803      	ldrb	r3, [r0, #0]
  406572:	2b02      	cmp	r3, #2
  406574:	d002      	beq.n	40657c <cmdInterp+0xc>
  406576:	2b03      	cmp	r3, #3
  406578:	d01e      	beq.n	4065b8 <cmdInterp+0x48>
  40657a:	4770      	bx	lr
		case 01:
		
		break;
		
		case 02:
				if(cmdLen != 34) break;
  40657c:	2922      	cmp	r1, #34	; 0x22
  40657e:	d12b      	bne.n	4065d8 <cmdInterp+0x68>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  406580:	1c43      	adds	r3, r0, #1
  406582:	681b      	ldr	r3, [r3, #0]
  406584:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  406586:	1d43      	adds	r3, r0, #5
  406588:	681b      	ldr	r3, [r3, #0]
  40658a:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  40658c:	7a43      	ldrb	r3, [r0, #9]
  40658e:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += *(uint32_t*)&cmd[13];
  406590:	6a11      	ldr	r1, [r2, #32]
  406592:	f8d0 300d 	ldr.w	r3, [r0, #13]
  406596:	440b      	add	r3, r1
  406598:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  40659a:	7c43      	ldrb	r3, [r0, #17]
  40659c:	61d3      	str	r3, [r2, #28]
				//stance
				hexabot_walk->stance = *(uint32_t*)&cmd[18];
  40659e:	f8d0 3012 	ldr.w	r3, [r0, #18]
  4065a2:	6093      	str	r3, [r2, #8]
				//height
				hexabot_walk->hgt = *(uint32_t*)&cmd[22];
  4065a4:	f8d0 3016 	ldr.w	r3, [r0, #22]
  4065a8:	60d3      	str	r3, [r2, #12]
				//pull up
				hexabot_walk->pup = *(uint32_t*)&cmd[26];
  4065aa:	f8d0 301a 	ldr.w	r3, [r0, #26]
  4065ae:	6113      	str	r3, [r2, #16]
				//stride
				hexabot_walk->stride = *(uint32_t*)&cmd[30];
  4065b0:	f8d0 301e 	ldr.w	r3, [r0, #30]
  4065b4:	6153      	str	r3, [r2, #20]
				
		break;
  4065b6:	4770      	bx	lr
		
		//Critical walking pattern update
		case 03:
				if(cmdLen != 18) break;
  4065b8:	2912      	cmp	r1, #18
  4065ba:	d10d      	bne.n	4065d8 <cmdInterp+0x68>
				//moveTurn
				hexabot_walk->movTurn = *(float*)(&cmd[1]);
  4065bc:	1c43      	adds	r3, r0, #1
  4065be:	681b      	ldr	r3, [r3, #0]
  4065c0:	6013      	str	r3, [r2, #0]
				//moveDir
				hexabot_walk->movDir = *(float*)(&cmd[5]);
  4065c2:	1d43      	adds	r3, r0, #5
  4065c4:	681b      	ldr	r3, [r3, #0]
  4065c6:	6053      	str	r3, [r2, #4]
				//hexabot cycle time
				hexabot_walk->Hexabot_leg_cycle_t = cmd[9];
  4065c8:	7a43      	ldrb	r3, [r0, #9]
  4065ca:	6193      	str	r3, [r2, #24]
				//max i addition
				hexabot_walk->max_i += cmd[13];
  4065cc:	7b43      	ldrb	r3, [r0, #13]
  4065ce:	6a11      	ldr	r1, [r2, #32]
  4065d0:	440b      	add	r3, r1
  4065d2:	6213      	str	r3, [r2, #32]
				//walk EN
				hexabot_walk->Walk_EN = cmd[17];
  4065d4:	7c43      	ldrb	r3, [r0, #17]
  4065d6:	61d3      	str	r3, [r2, #28]
  4065d8:	4770      	bx	lr
  4065da:	bf00      	nop

004065dc <cmdLED>:
 */ 
#include <Hexabot/Hexabot_Cmd.h>
#include <Hexabot/Hexabot.h>
#include <DW1000.h>

void cmdLED(int L, int onOff) {
  4065dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4065de:	b09b      	sub	sp, #108	; 0x6c
  4065e0:	4604      	mov	r4, r0
  4065e2:	460d      	mov	r5, r1
	extern int VerboseMode;
	char buf[100];
	
	switch(L) {
  4065e4:	2809      	cmp	r0, #9
  4065e6:	f200 80ad 	bhi.w	406744 <cmdLED+0x168>
  4065ea:	e8df f000 	tbb	[pc, r0]
  4065ee:	1205      	.short	0x1205
  4065f0:	46392c1f 	.word	0x46392c1f
  4065f4:	69ab5e51 	.word	0x69ab5e51
		case 0:
			if(onOff) pio_set(LED0);
  4065f8:	b129      	cbz	r1, 406606 <cmdLED+0x2a>
  4065fa:	4859      	ldr	r0, [pc, #356]	; (406760 <cmdLED+0x184>)
  4065fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406600:	4b58      	ldr	r3, [pc, #352]	; (406764 <cmdLED+0x188>)
  406602:	4798      	blx	r3
  406604:	e09e      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED0);
  406606:	4856      	ldr	r0, [pc, #344]	; (406760 <cmdLED+0x184>)
  406608:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40660c:	4b56      	ldr	r3, [pc, #344]	; (406768 <cmdLED+0x18c>)
  40660e:	4798      	blx	r3
  406610:	e098      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 1:
			if(onOff) pio_set(LED1);
  406612:	b129      	cbz	r1, 406620 <cmdLED+0x44>
  406614:	4852      	ldr	r0, [pc, #328]	; (406760 <cmdLED+0x184>)
  406616:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40661a:	4b52      	ldr	r3, [pc, #328]	; (406764 <cmdLED+0x188>)
  40661c:	4798      	blx	r3
  40661e:	e091      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED1);
  406620:	484f      	ldr	r0, [pc, #316]	; (406760 <cmdLED+0x184>)
  406622:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406626:	4b50      	ldr	r3, [pc, #320]	; (406768 <cmdLED+0x18c>)
  406628:	4798      	blx	r3
  40662a:	e08b      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 2:
			if(onOff) pio_set(LED2);
  40662c:	b129      	cbz	r1, 40663a <cmdLED+0x5e>
  40662e:	484c      	ldr	r0, [pc, #304]	; (406760 <cmdLED+0x184>)
  406630:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406634:	4b4b      	ldr	r3, [pc, #300]	; (406764 <cmdLED+0x188>)
  406636:	4798      	blx	r3
  406638:	e084      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED2);
  40663a:	4849      	ldr	r0, [pc, #292]	; (406760 <cmdLED+0x184>)
  40663c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406640:	4b49      	ldr	r3, [pc, #292]	; (406768 <cmdLED+0x18c>)
  406642:	4798      	blx	r3
  406644:	e07e      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 3:
			if(onOff) pio_set(LED3);
  406646:	b129      	cbz	r1, 406654 <cmdLED+0x78>
  406648:	4845      	ldr	r0, [pc, #276]	; (406760 <cmdLED+0x184>)
  40664a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40664e:	4b45      	ldr	r3, [pc, #276]	; (406764 <cmdLED+0x188>)
  406650:	4798      	blx	r3
  406652:	e077      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED3);
  406654:	4842      	ldr	r0, [pc, #264]	; (406760 <cmdLED+0x184>)
  406656:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40665a:	4b43      	ldr	r3, [pc, #268]	; (406768 <cmdLED+0x18c>)
  40665c:	4798      	blx	r3
  40665e:	e071      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 4:
			if(onOff) pio_set(LED4);
  406660:	b129      	cbz	r1, 40666e <cmdLED+0x92>
  406662:	4842      	ldr	r0, [pc, #264]	; (40676c <cmdLED+0x190>)
  406664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406668:	4b3e      	ldr	r3, [pc, #248]	; (406764 <cmdLED+0x188>)
  40666a:	4798      	blx	r3
  40666c:	e06a      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED4);
  40666e:	483f      	ldr	r0, [pc, #252]	; (40676c <cmdLED+0x190>)
  406670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406674:	4b3c      	ldr	r3, [pc, #240]	; (406768 <cmdLED+0x18c>)
  406676:	4798      	blx	r3
  406678:	e064      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 5:
			if(onOff) pio_set(LED5);
  40667a:	b121      	cbz	r1, 406686 <cmdLED+0xaa>
  40667c:	4838      	ldr	r0, [pc, #224]	; (406760 <cmdLED+0x184>)
  40667e:	2104      	movs	r1, #4
  406680:	4b38      	ldr	r3, [pc, #224]	; (406764 <cmdLED+0x188>)
  406682:	4798      	blx	r3
  406684:	e05e      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED5);
  406686:	4836      	ldr	r0, [pc, #216]	; (406760 <cmdLED+0x184>)
  406688:	2104      	movs	r1, #4
  40668a:	4b37      	ldr	r3, [pc, #220]	; (406768 <cmdLED+0x18c>)
  40668c:	4798      	blx	r3
  40668e:	e059      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 6:
			if(onOff) pio_set(LED6);
  406690:	b129      	cbz	r1, 40669e <cmdLED+0xc2>
  406692:	4833      	ldr	r0, [pc, #204]	; (406760 <cmdLED+0x184>)
  406694:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406698:	4b32      	ldr	r3, [pc, #200]	; (406764 <cmdLED+0x188>)
  40669a:	4798      	blx	r3
  40669c:	e052      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED6);
  40669e:	4830      	ldr	r0, [pc, #192]	; (406760 <cmdLED+0x184>)
  4066a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4066a4:	4b30      	ldr	r3, [pc, #192]	; (406768 <cmdLED+0x18c>)
  4066a6:	4798      	blx	r3
  4066a8:	e04c      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 7:
			if(onOff) pio_set(LED7);
  4066aa:	b121      	cbz	r1, 4066b6 <cmdLED+0xda>
  4066ac:	482c      	ldr	r0, [pc, #176]	; (406760 <cmdLED+0x184>)
  4066ae:	2140      	movs	r1, #64	; 0x40
  4066b0:	4b2c      	ldr	r3, [pc, #176]	; (406764 <cmdLED+0x188>)
  4066b2:	4798      	blx	r3
  4066b4:	e046      	b.n	406744 <cmdLED+0x168>
			else pio_clear(LED7);
  4066b6:	482a      	ldr	r0, [pc, #168]	; (406760 <cmdLED+0x184>)
  4066b8:	2140      	movs	r1, #64	; 0x40
  4066ba:	4b2b      	ldr	r3, [pc, #172]	; (406768 <cmdLED+0x18c>)
  4066bc:	4798      	blx	r3
  4066be:	e041      	b.n	406744 <cmdLED+0x168>
		break;
		
		case 9:
			if(onOff) {
  4066c0:	b301      	cbz	r1, 406704 <cmdLED+0x128>
				pio_set(LED0);
  4066c2:	4f27      	ldr	r7, [pc, #156]	; (406760 <cmdLED+0x184>)
  4066c4:	4638      	mov	r0, r7
  4066c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4066ca:	4e26      	ldr	r6, [pc, #152]	; (406764 <cmdLED+0x188>)
  4066cc:	47b0      	blx	r6
				pio_set(LED1);
  4066ce:	4638      	mov	r0, r7
  4066d0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4066d4:	47b0      	blx	r6
				pio_set(LED2);
  4066d6:	4638      	mov	r0, r7
  4066d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4066dc:	47b0      	blx	r6
				pio_set(LED3);
  4066de:	4638      	mov	r0, r7
  4066e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4066e4:	47b0      	blx	r6
				pio_set(LED4);
  4066e6:	4821      	ldr	r0, [pc, #132]	; (40676c <cmdLED+0x190>)
  4066e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4066ec:	47b0      	blx	r6
				pio_set(LED5);
  4066ee:	4638      	mov	r0, r7
  4066f0:	2104      	movs	r1, #4
  4066f2:	47b0      	blx	r6
				pio_set(LED6);
  4066f4:	4638      	mov	r0, r7
  4066f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4066fa:	47b0      	blx	r6
				pio_set(LED7);
  4066fc:	4638      	mov	r0, r7
  4066fe:	2140      	movs	r1, #64	; 0x40
  406700:	47b0      	blx	r6
  406702:	e01f      	b.n	406744 <cmdLED+0x168>
			}
			else
			{
				 pio_clear(LED0);
  406704:	4f16      	ldr	r7, [pc, #88]	; (406760 <cmdLED+0x184>)
  406706:	4638      	mov	r0, r7
  406708:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40670c:	4e16      	ldr	r6, [pc, #88]	; (406768 <cmdLED+0x18c>)
  40670e:	47b0      	blx	r6
				 pio_clear(LED1);
  406710:	4638      	mov	r0, r7
  406712:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406716:	47b0      	blx	r6
				 pio_clear(LED2);
  406718:	4638      	mov	r0, r7
  40671a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40671e:	47b0      	blx	r6
				 pio_clear(LED3);
  406720:	4638      	mov	r0, r7
  406722:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406726:	47b0      	blx	r6
				 pio_clear(LED4);
  406728:	4810      	ldr	r0, [pc, #64]	; (40676c <cmdLED+0x190>)
  40672a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40672e:	47b0      	blx	r6
				 pio_clear(LED5);
  406730:	4638      	mov	r0, r7
  406732:	2104      	movs	r1, #4
  406734:	47b0      	blx	r6
				 pio_clear(LED6);
  406736:	4638      	mov	r0, r7
  406738:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40673c:	47b0      	blx	r6
				 pio_clear(LED7); 
  40673e:	4638      	mov	r0, r7
  406740:	2140      	movs	r1, #64	; 0x40
  406742:	47b0      	blx	r6
			}
		break;
		
	}
		if(VerboseMode) {
  406744:	4b0a      	ldr	r3, [pc, #40]	; (406770 <cmdLED+0x194>)
  406746:	681b      	ldr	r3, [r3, #0]
  406748:	b143      	cbz	r3, 40675c <cmdLED+0x180>
		sprintf(buf,"LED%d SET TO %d\n",L,onOff);
  40674a:	a801      	add	r0, sp, #4
  40674c:	4909      	ldr	r1, [pc, #36]	; (406774 <cmdLED+0x198>)
  40674e:	4622      	mov	r2, r4
  406750:	462b      	mov	r3, r5
  406752:	4c09      	ldr	r4, [pc, #36]	; (406778 <cmdLED+0x19c>)
  406754:	47a0      	blx	r4
		sendDebugString(buf);
  406756:	a801      	add	r0, sp, #4
  406758:	4b08      	ldr	r3, [pc, #32]	; (40677c <cmdLED+0x1a0>)
  40675a:	4798      	blx	r3
	}

}
  40675c:	b01b      	add	sp, #108	; 0x6c
  40675e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406760:	400e0e00 	.word	0x400e0e00
  406764:	004027c9 	.word	0x004027c9
  406768:	004027cd 	.word	0x004027cd
  40676c:	400e1000 	.word	0x400e1000
  406770:	2040c4c8 	.word	0x2040c4c8
  406774:	00412d8c 	.word	0x00412d8c
  406778:	0040b3d9 	.word	0x0040b3d9
  40677c:	0040019d 	.word	0x0040019d

00406780 <cmdServoMan>:

void cmdServoMan(int L,int S ,int angle) {
  406780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406784:	b09c      	sub	sp, #112	; 0x70
  406786:	4604      	mov	r4, r0
  406788:	460d      	mov	r5, r1
  40678a:	4616      	mov	r6, r2
	extern int VerboseMode;
	char buf[100];
	
	switch (L) {
  40678c:	2806      	cmp	r0, #6
  40678e:	d861      	bhi.n	406854 <cmdServoMan+0xd4>
  406790:	e8df f000 	tbb	[pc, r0]
  406794:	22180e04 	.word	0x22180e04
  406798:	362c      	.short	0x362c
  40679a:	40          	.byte	0x40
  40679b:	00          	.byte	0x00
		
	case 0:
	WriteServo(L0_S0+S,angle);
  40679c:	2000      	movs	r0, #0
  40679e:	ee07 2a90 	vmov	s15, r2
  4067a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4067a6:	ee17 2a90 	vmov	r2, s15
  4067aa:	4b32      	ldr	r3, [pc, #200]	; (406874 <cmdServoMan+0xf4>)
  4067ac:	4798      	blx	r3
	break;
  4067ae:	e051      	b.n	406854 <cmdServoMan+0xd4>
	
	case 1:
	WriteServo(L1_S0+S,angle);
  4067b0:	2001      	movs	r0, #1
  4067b2:	ee07 2a90 	vmov	s15, r2
  4067b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4067ba:	ee17 2a90 	vmov	r2, s15
  4067be:	4b2d      	ldr	r3, [pc, #180]	; (406874 <cmdServoMan+0xf4>)
  4067c0:	4798      	blx	r3
	break;
  4067c2:	e047      	b.n	406854 <cmdServoMan+0xd4>
	
	case 2:
	WriteServo(L2_S0+S,angle);
  4067c4:	2002      	movs	r0, #2
  4067c6:	ee07 2a90 	vmov	s15, r2
  4067ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4067ce:	ee17 2a90 	vmov	r2, s15
  4067d2:	4b28      	ldr	r3, [pc, #160]	; (406874 <cmdServoMan+0xf4>)
  4067d4:	4798      	blx	r3
	break;
  4067d6:	e03d      	b.n	406854 <cmdServoMan+0xd4>
	
	case 3:
	WriteServo(L3_S0+S,angle);
  4067d8:	2003      	movs	r0, #3
  4067da:	ee07 2a90 	vmov	s15, r2
  4067de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4067e2:	ee17 2a90 	vmov	r2, s15
  4067e6:	4b23      	ldr	r3, [pc, #140]	; (406874 <cmdServoMan+0xf4>)
  4067e8:	4798      	blx	r3
	break;
  4067ea:	e033      	b.n	406854 <cmdServoMan+0xd4>
	
	case 4:
	WriteServo(L4_S0+S,angle);
  4067ec:	2004      	movs	r0, #4
  4067ee:	ee07 2a90 	vmov	s15, r2
  4067f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4067f6:	ee17 2a90 	vmov	r2, s15
  4067fa:	4b1e      	ldr	r3, [pc, #120]	; (406874 <cmdServoMan+0xf4>)
  4067fc:	4798      	blx	r3
	break;
  4067fe:	e029      	b.n	406854 <cmdServoMan+0xd4>
	
	case 5:
	WriteServo(L5_S0+S,angle);
  406800:	2005      	movs	r0, #5
  406802:	ee07 2a90 	vmov	s15, r2
  406806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40680a:	ee17 2a90 	vmov	r2, s15
  40680e:	4b19      	ldr	r3, [pc, #100]	; (406874 <cmdServoMan+0xf4>)
  406810:	4798      	blx	r3
	break;
  406812:	e01f      	b.n	406854 <cmdServoMan+0xd4>
	
	case 6:
	WriteServo(L0_S0+S,angle);
  406814:	ee07 2a90 	vmov	s15, r2
  406818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40681c:	2000      	movs	r0, #0
  40681e:	ee17 7a90 	vmov	r7, s15
  406822:	ee17 2a90 	vmov	r2, s15
  406826:	f8df 804c 	ldr.w	r8, [pc, #76]	; 406874 <cmdServoMan+0xf4>
  40682a:	47c0      	blx	r8
	WriteServo(L1_S0+S,angle);
  40682c:	2001      	movs	r0, #1
  40682e:	4629      	mov	r1, r5
  406830:	463a      	mov	r2, r7
  406832:	47c0      	blx	r8
	WriteServo(L2_S0+S,angle);
  406834:	2002      	movs	r0, #2
  406836:	4629      	mov	r1, r5
  406838:	463a      	mov	r2, r7
  40683a:	47c0      	blx	r8
	WriteServo(L3_S0+S,angle);
  40683c:	2003      	movs	r0, #3
  40683e:	4629      	mov	r1, r5
  406840:	463a      	mov	r2, r7
  406842:	47c0      	blx	r8
	WriteServo(L4_S0+S,angle);
  406844:	2004      	movs	r0, #4
  406846:	4629      	mov	r1, r5
  406848:	463a      	mov	r2, r7
  40684a:	47c0      	blx	r8
	WriteServo(L5_S0+S,angle);
  40684c:	2005      	movs	r0, #5
  40684e:	4629      	mov	r1, r5
  406850:	463a      	mov	r2, r7
  406852:	47c0      	blx	r8
	break;
	}
	
	if(VerboseMode) {
  406854:	4b08      	ldr	r3, [pc, #32]	; (406878 <cmdServoMan+0xf8>)
  406856:	681b      	ldr	r3, [r3, #0]
  406858:	b14b      	cbz	r3, 40686e <cmdServoMan+0xee>
		sprintf(buf,"SERVO LEG:%d,SERVO:%d MOVED TO %d\n",L,S,angle);
  40685a:	9600      	str	r6, [sp, #0]
  40685c:	a803      	add	r0, sp, #12
  40685e:	4907      	ldr	r1, [pc, #28]	; (40687c <cmdServoMan+0xfc>)
  406860:	4622      	mov	r2, r4
  406862:	462b      	mov	r3, r5
  406864:	4c06      	ldr	r4, [pc, #24]	; (406880 <cmdServoMan+0x100>)
  406866:	47a0      	blx	r4
		sendDebugString(buf);
  406868:	a803      	add	r0, sp, #12
  40686a:	4b06      	ldr	r3, [pc, #24]	; (406884 <cmdServoMan+0x104>)
  40686c:	4798      	blx	r3
	}
	
}
  40686e:	b01c      	add	sp, #112	; 0x70
  406870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406874:	004050b9 	.word	0x004050b9
  406878:	2040c4c8 	.word	0x2040c4c8
  40687c:	00412da0 	.word	0x00412da0
  406880:	0040b3d9 	.word	0x0040b3d9
  406884:	0040019d 	.word	0x0040019d

00406888 <cmdBatVolt>:

void cmdBatVolt() {
  406888:	b510      	push	{r4, lr}
  40688a:	b09a      	sub	sp, #104	; 0x68
	char buf[100];
	sprintf(buf,"Battery Voltage:%f\n",getBatVoltage());
  40688c:	4b07      	ldr	r3, [pc, #28]	; (4068ac <cmdBatVolt+0x24>)
  40688e:	4798      	blx	r3
  406890:	4b07      	ldr	r3, [pc, #28]	; (4068b0 <cmdBatVolt+0x28>)
  406892:	4798      	blx	r3
  406894:	4602      	mov	r2, r0
  406896:	460b      	mov	r3, r1
  406898:	a801      	add	r0, sp, #4
  40689a:	4906      	ldr	r1, [pc, #24]	; (4068b4 <cmdBatVolt+0x2c>)
  40689c:	4c06      	ldr	r4, [pc, #24]	; (4068b8 <cmdBatVolt+0x30>)
  40689e:	47a0      	blx	r4
	sendDebugString(buf);
  4068a0:	a801      	add	r0, sp, #4
  4068a2:	4b06      	ldr	r3, [pc, #24]	; (4068bc <cmdBatVolt+0x34>)
  4068a4:	4798      	blx	r3
}
  4068a6:	b01a      	add	sp, #104	; 0x68
  4068a8:	bd10      	pop	{r4, pc}
  4068aa:	bf00      	nop
  4068ac:	00405701 	.word	0x00405701
  4068b0:	0040a461 	.word	0x0040a461
  4068b4:	00412dc4 	.word	0x00412dc4
  4068b8:	0040b3d9 	.word	0x0040b3d9
  4068bc:	0040019d 	.word	0x0040019d

004068c0 <cmdWalk>:
	dumpFrame(dumploc);
}

void cmdWalk(int maxi) {
	extern walk_data hexabot_walk;
	hexabot_walk.i = 0;
  4068c0:	4b03      	ldr	r3, [pc, #12]	; (4068d0 <cmdWalk+0x10>)
  4068c2:	2200      	movs	r2, #0
  4068c4:	625a      	str	r2, [r3, #36]	; 0x24
	hexabot_walk.max_i = maxi;
  4068c6:	6218      	str	r0, [r3, #32]
	hexabot_walk.Walk_EN = 1;
  4068c8:	2201      	movs	r2, #1
  4068ca:	61da      	str	r2, [r3, #28]
  4068cc:	4770      	bx	lr
  4068ce:	bf00      	nop
  4068d0:	2040c5f8 	.word	0x2040c5f8

004068d4 <cmdTestDW1000>:
}

void cmdTestDW1000() {
  4068d4:	b570      	push	{r4, r5, r6, lr}
  4068d6:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_toggleGPIO_MODE();
  4068d8:	4b15      	ldr	r3, [pc, #84]	; (406930 <cmdTestDW1000+0x5c>)
  4068da:	4798      	blx	r3
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x000FFFFF, PMSC_LEDC_LEN);
  4068dc:	4a15      	ldr	r2, [pc, #84]	; (406934 <cmdTestDW1000+0x60>)
  4068de:	2300      	movs	r3, #0
  4068e0:	e9cd 2300 	strd	r2, r3, [sp]
  4068e4:	2304      	movs	r3, #4
  4068e6:	9302      	str	r3, [sp, #8]
  4068e8:	2036      	movs	r0, #54	; 0x36
  4068ea:	2101      	movs	r1, #1
  4068ec:	2228      	movs	r2, #40	; 0x28
  4068ee:	4b12      	ldr	r3, [pc, #72]	; (406938 <cmdTestDW1000+0x64>)
  4068f0:	4798      	blx	r3

	delay_us(1);
  4068f2:	2033      	movs	r0, #51	; 0x33
  4068f4:	4b11      	ldr	r3, [pc, #68]	; (40693c <cmdTestDW1000+0x68>)
  4068f6:	4798      	blx	r3
	sprintf(buf,"TestDevID: 0x%x\n",DW1000_readDeviceIdentifier());
  4068f8:	4b11      	ldr	r3, [pc, #68]	; (406940 <cmdTestDW1000+0x6c>)
  4068fa:	4798      	blx	r3
  4068fc:	4602      	mov	r2, r0
  4068fe:	460b      	mov	r3, r1
  406900:	a804      	add	r0, sp, #16
  406902:	4910      	ldr	r1, [pc, #64]	; (406944 <cmdTestDW1000+0x70>)
  406904:	4e10      	ldr	r6, [pc, #64]	; (406948 <cmdTestDW1000+0x74>)
  406906:	47b0      	blx	r6
	sendDebugString(buf);
  406908:	a804      	add	r0, sp, #16
  40690a:	4c10      	ldr	r4, [pc, #64]	; (40694c <cmdTestDW1000+0x78>)
  40690c:	47a0      	blx	r4
	sendDebugString("\n");
  40690e:	4d10      	ldr	r5, [pc, #64]	; (406950 <cmdTestDW1000+0x7c>)
  406910:	4628      	mov	r0, r5
  406912:	47a0      	blx	r4
	sprintf(buf,"SysStatus: 0x%x\n", DW1000_readSystemStatus());
  406914:	4b0f      	ldr	r3, [pc, #60]	; (406954 <cmdTestDW1000+0x80>)
  406916:	4798      	blx	r3
  406918:	4602      	mov	r2, r0
  40691a:	460b      	mov	r3, r1
  40691c:	a804      	add	r0, sp, #16
  40691e:	490e      	ldr	r1, [pc, #56]	; (406958 <cmdTestDW1000+0x84>)
  406920:	47b0      	blx	r6
	sendDebugString(buf);
  406922:	a804      	add	r0, sp, #16
  406924:	47a0      	blx	r4
	sendDebugString("\n");
  406926:	4628      	mov	r0, r5
  406928:	47a0      	blx	r4
	
	
}
  40692a:	b00e      	add	sp, #56	; 0x38
  40692c:	bd70      	pop	{r4, r5, r6, pc}
  40692e:	bf00      	nop
  406930:	00403935 	.word	0x00403935
  406934:	000fffff 	.word	0x000fffff
  406938:	00403831 	.word	0x00403831
  40693c:	20400001 	.word	0x20400001
  406940:	004037fd 	.word	0x004037fd
  406944:	00412dd8 	.word	0x00412dd8
  406948:	0040b3d9 	.word	0x0040b3d9
  40694c:	0040019d 	.word	0x0040019d
  406950:	00412d04 	.word	0x00412d04
  406954:	00403811 	.word	0x00403811
  406958:	00412dec 	.word	0x00412dec

0040695c <cmdDWMsend>:

void cmdDWMsend(char* tosend) {
  40695c:	b530      	push	{r4, r5, lr}
  40695e:	b083      	sub	sp, #12
  406960:	4605      	mov	r5, r0
	DW1000_writeTxBuffer(0,tosend,strlen(tosend));
  406962:	4c08      	ldr	r4, [pc, #32]	; (406984 <cmdDWMsend+0x28>)
  406964:	47a0      	blx	r4
  406966:	9000      	str	r0, [sp, #0]
  406968:	2000      	movs	r0, #0
  40696a:	462a      	mov	r2, r5
  40696c:	17eb      	asrs	r3, r5, #31
  40696e:	4906      	ldr	r1, [pc, #24]	; (406988 <cmdDWMsend+0x2c>)
  406970:	4788      	blx	r1
	DW1000_setTxFrameControl(strlen(tosend));
  406972:	4628      	mov	r0, r5
  406974:	47a0      	blx	r4
  406976:	4b05      	ldr	r3, [pc, #20]	; (40698c <cmdDWMsend+0x30>)
  406978:	4798      	blx	r3
	DW1000_startTx();
  40697a:	4b05      	ldr	r3, [pc, #20]	; (406990 <cmdDWMsend+0x34>)
  40697c:	4798      	blx	r3
}
  40697e:	b003      	add	sp, #12
  406980:	bd30      	pop	{r4, r5, pc}
  406982:	bf00      	nop
  406984:	0040b71d 	.word	0x0040b71d
  406988:	00403991 	.word	0x00403991
  40698c:	0040396d 	.word	0x0040396d
  406990:	004039b1 	.word	0x004039b1

00406994 <cmdOverrideLEDDWM1000>:

void cmdOverrideLEDDWM1000() {
  406994:	b530      	push	{r4, r5, lr}
  406996:	b085      	sub	sp, #20
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, 0x00000000, GPIO_MODE_LEN);
  406998:	2200      	movs	r2, #0
  40699a:	2300      	movs	r3, #0
  40699c:	e9cd 2300 	strd	r2, r3, [sp]
  4069a0:	2504      	movs	r5, #4
  4069a2:	9502      	str	r5, [sp, #8]
  4069a4:	2026      	movs	r0, #38	; 0x26
  4069a6:	2101      	movs	r1, #1
  4069a8:	4c0a      	ldr	r4, [pc, #40]	; (4069d4 <cmdOverrideLEDDWM1000+0x40>)
  4069aa:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0x8, 0x000000F0, GPIO_MODE_LEN);
  4069ac:	22f0      	movs	r2, #240	; 0xf0
  4069ae:	2300      	movs	r3, #0
  4069b0:	e9cd 2300 	strd	r2, r3, [sp]
  4069b4:	9502      	str	r5, [sp, #8]
  4069b6:	2026      	movs	r0, #38	; 0x26
  4069b8:	2101      	movs	r1, #1
  4069ba:	2208      	movs	r2, #8
  4069bc:	47a0      	blx	r4
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, 0xC, 0x000000FF, GPIO_MODE_LEN);
  4069be:	22ff      	movs	r2, #255	; 0xff
  4069c0:	2300      	movs	r3, #0
  4069c2:	e9cd 2300 	strd	r2, r3, [sp]
  4069c6:	9502      	str	r5, [sp, #8]
  4069c8:	2026      	movs	r0, #38	; 0x26
  4069ca:	2101      	movs	r1, #1
  4069cc:	220c      	movs	r2, #12
  4069ce:	47a0      	blx	r4
}
  4069d0:	b005      	add	sp, #20
  4069d2:	bd30      	pop	{r4, r5, pc}
  4069d4:	00403831 	.word	0x00403831

004069d8 <cmdWriteTestDW1000>:

void cmdWriteTestDW1000(uint64_t toRW) {
  4069d8:	b510      	push	{r4, lr}
  4069da:	b08e      	sub	sp, #56	; 0x38
	char buf[40];
	DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,toRW,PANADR_LEN);
  4069dc:	e9cd 0100 	strd	r0, r1, [sp]
  4069e0:	2404      	movs	r4, #4
  4069e2:	9402      	str	r4, [sp, #8]
  4069e4:	2003      	movs	r0, #3
  4069e6:	2100      	movs	r1, #0
  4069e8:	460a      	mov	r2, r1
  4069ea:	4b09      	ldr	r3, [pc, #36]	; (406a10 <cmdWriteTestDW1000+0x38>)
  4069ec:	4798      	blx	r3
	sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  4069ee:	2003      	movs	r0, #3
  4069f0:	2100      	movs	r1, #0
  4069f2:	460a      	mov	r2, r1
  4069f4:	4623      	mov	r3, r4
  4069f6:	4c07      	ldr	r4, [pc, #28]	; (406a14 <cmdWriteTestDW1000+0x3c>)
  4069f8:	47a0      	blx	r4
  4069fa:	4602      	mov	r2, r0
  4069fc:	460b      	mov	r3, r1
  4069fe:	a804      	add	r0, sp, #16
  406a00:	4905      	ldr	r1, [pc, #20]	; (406a18 <cmdWriteTestDW1000+0x40>)
  406a02:	4c06      	ldr	r4, [pc, #24]	; (406a1c <cmdWriteTestDW1000+0x44>)
  406a04:	47a0      	blx	r4
	sendDebugString(buf);	
  406a06:	a804      	add	r0, sp, #16
  406a08:	4b05      	ldr	r3, [pc, #20]	; (406a20 <cmdWriteTestDW1000+0x48>)
  406a0a:	4798      	blx	r3
}
  406a0c:	b00e      	add	sp, #56	; 0x38
  406a0e:	bd10      	pop	{r4, pc}
  406a10:	00403831 	.word	0x00403831
  406a14:	00403735 	.word	0x00403735
  406a18:	00412e00 	.word	0x00412e00
  406a1c:	0040b3d9 	.word	0x0040b3d9
  406a20:	0040019d 	.word	0x0040019d

00406a24 <cmdRelaxSvo>:

void cmdRelaxSvo(int Leg,int Svo) {
  406a24:	b570      	push	{r4, r5, r6, lr}
  406a26:	460c      	mov	r4, r1
	if(Leg == 6) {
  406a28:	2806      	cmp	r0, #6
  406a2a:	d122      	bne.n	406a72 <cmdRelaxSvo+0x4e>
		relaxServo(0,Svo);
  406a2c:	2000      	movs	r0, #0
  406a2e:	4d12      	ldr	r5, [pc, #72]	; (406a78 <cmdRelaxSvo+0x54>)
  406a30:	47a8      	blx	r5
		delay_ms(1);
  406a32:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406a36:	4e11      	ldr	r6, [pc, #68]	; (406a7c <cmdRelaxSvo+0x58>)
  406a38:	47b0      	blx	r6
		relaxServo(1,Svo);
  406a3a:	2001      	movs	r0, #1
  406a3c:	4621      	mov	r1, r4
  406a3e:	47a8      	blx	r5
		delay_ms(1);
  406a40:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406a44:	47b0      	blx	r6
		relaxServo(2,Svo);
  406a46:	2002      	movs	r0, #2
  406a48:	4621      	mov	r1, r4
  406a4a:	47a8      	blx	r5
		delay_ms(1);
  406a4c:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406a50:	47b0      	blx	r6
		relaxServo(3,Svo);
  406a52:	2003      	movs	r0, #3
  406a54:	4621      	mov	r1, r4
  406a56:	47a8      	blx	r5
		delay_ms(1);
  406a58:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406a5c:	47b0      	blx	r6
		relaxServo(4,Svo);
  406a5e:	2004      	movs	r0, #4
  406a60:	4621      	mov	r1, r4
  406a62:	47a8      	blx	r5
		delay_ms(1);
  406a64:	f24c 508e 	movw	r0, #50574	; 0xc58e
  406a68:	47b0      	blx	r6
		relaxServo(5,Svo);
  406a6a:	2005      	movs	r0, #5
  406a6c:	4621      	mov	r1, r4
  406a6e:	47a8      	blx	r5
  406a70:	bd70      	pop	{r4, r5, r6, pc}
	}
	else relaxServo(Leg,Svo);
  406a72:	4b01      	ldr	r3, [pc, #4]	; (406a78 <cmdRelaxSvo+0x54>)
  406a74:	4798      	blx	r3
  406a76:	bd70      	pop	{r4, r5, r6, pc}
  406a78:	00405065 	.word	0x00405065
  406a7c:	20400001 	.word	0x20400001

00406a80 <cmdRelaxAll>:
}

void cmdRelaxAll() {
  406a80:	b510      	push	{r4, lr}
			//SvoA
			relaxServo(0,0);
  406a82:	2000      	movs	r0, #0
  406a84:	4601      	mov	r1, r0
  406a86:	4c1b      	ldr	r4, [pc, #108]	; (406af4 <cmdRelaxAll+0x74>)
  406a88:	47a0      	blx	r4
			relaxServo(1,0);
  406a8a:	2001      	movs	r0, #1
  406a8c:	2100      	movs	r1, #0
  406a8e:	47a0      	blx	r4
			relaxServo(2,0);
  406a90:	2002      	movs	r0, #2
  406a92:	2100      	movs	r1, #0
  406a94:	47a0      	blx	r4
			relaxServo(3,0);
  406a96:	2003      	movs	r0, #3
  406a98:	2100      	movs	r1, #0
  406a9a:	47a0      	blx	r4
			relaxServo(4,0);
  406a9c:	2004      	movs	r0, #4
  406a9e:	2100      	movs	r1, #0
  406aa0:	47a0      	blx	r4
			relaxServo(5,0);
  406aa2:	2005      	movs	r0, #5
  406aa4:	2100      	movs	r1, #0
  406aa6:	47a0      	blx	r4
			//SvoB
			relaxServo(0,1);
  406aa8:	2000      	movs	r0, #0
  406aaa:	2101      	movs	r1, #1
  406aac:	47a0      	blx	r4
			relaxServo(1,1);
  406aae:	2001      	movs	r0, #1
  406ab0:	4601      	mov	r1, r0
  406ab2:	47a0      	blx	r4
			relaxServo(2,1);
  406ab4:	2002      	movs	r0, #2
  406ab6:	2101      	movs	r1, #1
  406ab8:	47a0      	blx	r4
			relaxServo(3,1);
  406aba:	2003      	movs	r0, #3
  406abc:	2101      	movs	r1, #1
  406abe:	47a0      	blx	r4
			relaxServo(4,1);
  406ac0:	2004      	movs	r0, #4
  406ac2:	2101      	movs	r1, #1
  406ac4:	47a0      	blx	r4
			relaxServo(5,1);
  406ac6:	2005      	movs	r0, #5
  406ac8:	2101      	movs	r1, #1
  406aca:	47a0      	blx	r4
			//SvoC
			relaxServo(0,2);
  406acc:	2000      	movs	r0, #0
  406ace:	2102      	movs	r1, #2
  406ad0:	47a0      	blx	r4
			relaxServo(1,2);
  406ad2:	2001      	movs	r0, #1
  406ad4:	2102      	movs	r1, #2
  406ad6:	47a0      	blx	r4
			relaxServo(2,2);
  406ad8:	2002      	movs	r0, #2
  406ada:	4601      	mov	r1, r0
  406adc:	47a0      	blx	r4
			relaxServo(3,2);
  406ade:	2003      	movs	r0, #3
  406ae0:	2102      	movs	r1, #2
  406ae2:	47a0      	blx	r4
			relaxServo(4,2);
  406ae4:	2004      	movs	r0, #4
  406ae6:	2102      	movs	r1, #2
  406ae8:	47a0      	blx	r4
			relaxServo(5,2);
  406aea:	2005      	movs	r0, #5
  406aec:	2102      	movs	r1, #2
  406aee:	47a0      	blx	r4
  406af0:	bd10      	pop	{r4, pc}
  406af2:	bf00      	nop
  406af4:	00405065 	.word	0x00405065

00406af8 <vTask1>:
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
	return 0;
	/* Insert application code here, after the board has been initialized. */
}

void vTask1 (void* pvParameters) {
  406af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
  406afc:	484c      	ldr	r0, [pc, #304]	; (406c30 <vTask1+0x138>)
  406afe:	4c4d      	ldr	r4, [pc, #308]	; (406c34 <vTask1+0x13c>)
  406b00:	47a0      	blx	r4
	TickType_t xLastWakeTime = xTaskGetTickCount();
  406b02:	4b4d      	ldr	r3, [pc, #308]	; (406c38 <vTask1+0x140>)
  406b04:	4798      	blx	r3
	uint8_t T = 0;
	int cleanTest = 1;
	int testCountPass = 0;
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
  406b06:	484d      	ldr	r0, [pc, #308]	; (406c3c <vTask1+0x144>)
  406b08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b0c:	4b4c      	ldr	r3, [pc, #304]	; (406c40 <vTask1+0x148>)
  406b0e:	4798      	blx	r3
	int testCountFail = 0;
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  406b10:	484c      	ldr	r0, [pc, #304]	; (406c44 <vTask1+0x14c>)
  406b12:	47a0      	blx	r4
	char Qbuf[20];
	char buf[20];
	pio_set(LED0);
	int testCountFail = 0;
	
	int batLowCount = 0;
  406b14:	f04f 0800 	mov.w	r8, #0
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  406b18:	2501      	movs	r5, #1
						pio_set(LED7);
					}
					tg = !tg;
				}
				else {
					pio_clear(LED0);	
  406b1a:	4c48      	ldr	r4, [pc, #288]	; (406c3c <vTask1+0x144>)
  406b1c:	4f4a      	ldr	r7, [pc, #296]	; (406c48 <vTask1+0x150>)
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25) {
  406b1e:	4e4b      	ldr	r6, [pc, #300]	; (406c4c <vTask1+0x154>)
	
	int batLowCount = 0;
	
	sendDebugString("TASK1 INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	for(;;) {
				if(tg) {
  406b20:	2d00      	cmp	r5, #0
  406b22:	d04d      	beq.n	406bc0 <vTask1+0xc8>
					pio_set(LED0);
  406b24:	4620      	mov	r0, r4
  406b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b2a:	4b45      	ldr	r3, [pc, #276]	; (406c40 <vTask1+0x148>)
  406b2c:	4798      	blx	r3
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25)  batLowCount++;
  406b2e:	69f3      	ldr	r3, [r6, #28]
  406b30:	2b00      	cmp	r3, #0
  406b32:	d179      	bne.n	406c28 <vTask1+0x130>
  406b34:	4b46      	ldr	r3, [pc, #280]	; (406c50 <vTask1+0x158>)
  406b36:	4798      	blx	r3
  406b38:	eef1 7a09 	vmov.f32	s15, #25
  406b3c:	ee07 0a10 	vmov	s14, r0
  406b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
  406b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406b48:	d56e      	bpl.n	406c28 <vTask1+0x130>
  406b4a:	f108 0801 	add.w	r8, r8, #1
					else batLowCount = 0;
					if(batLowCount > 10) {
  406b4e:	f1b8 0f0a 	cmp.w	r8, #10
  406b52:	dd33      	ble.n	406bbc <vTask1+0xc4>
						sendDebugString("********************\n");
  406b54:	f8df 9110 	ldr.w	r9, [pc, #272]	; 406c68 <vTask1+0x170>
  406b58:	4648      	mov	r0, r9
  406b5a:	4d36      	ldr	r5, [pc, #216]	; (406c34 <vTask1+0x13c>)
  406b5c:	47a8      	blx	r5
						sendDebugString("********************\n");
  406b5e:	4648      	mov	r0, r9
  406b60:	47a8      	blx	r5
						sendDebugString("WARNING: BAT VOLT AT CRITICAL LEVELS\n");
  406b62:	483c      	ldr	r0, [pc, #240]	; (406c54 <vTask1+0x15c>)
  406b64:	47a8      	blx	r5
						sendDebugString("DISABLING SERVO WRITE OUT\n");
  406b66:	483c      	ldr	r0, [pc, #240]	; (406c58 <vTask1+0x160>)
  406b68:	47a8      	blx	r5
						sendDebugString("PLEASE DISCONNECT BATTERY NOW!\n");
  406b6a:	483c      	ldr	r0, [pc, #240]	; (406c5c <vTask1+0x164>)
  406b6c:	47a8      	blx	r5
						sendDebugString("********************\n");
  406b6e:	4648      	mov	r0, r9
  406b70:	47a8      	blx	r5
						sendDebugString("********************\n");
  406b72:	4648      	mov	r0, r9
  406b74:	47a8      	blx	r5
						pio_set(PIOA,PIO_PA26);
  406b76:	4620      	mov	r0, r4
  406b78:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  406b7c:	4d30      	ldr	r5, [pc, #192]	; (406c40 <vTask1+0x148>)
  406b7e:	47a8      	blx	r5
						
						pio_set(LED0);
  406b80:	4620      	mov	r0, r4
  406b82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b86:	47a8      	blx	r5
						pio_set(LED1);
  406b88:	4620      	mov	r0, r4
  406b8a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406b8e:	47a8      	blx	r5
						pio_set(LED2);
  406b90:	4620      	mov	r0, r4
  406b92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406b96:	47a8      	blx	r5
						pio_set(LED3);
  406b98:	4620      	mov	r0, r4
  406b9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406b9e:	47a8      	blx	r5
						pio_set(LED4);
  406ba0:	482f      	ldr	r0, [pc, #188]	; (406c60 <vTask1+0x168>)
  406ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406ba6:	47a8      	blx	r5
						pio_set(LED5);
  406ba8:	4620      	mov	r0, r4
  406baa:	2104      	movs	r1, #4
  406bac:	47a8      	blx	r5
						pio_set(LED6);
  406bae:	4620      	mov	r0, r4
  406bb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406bb4:	47a8      	blx	r5
						pio_set(LED7);
  406bb6:	4620      	mov	r0, r4
  406bb8:	2140      	movs	r1, #64	; 0x40
  406bba:	47a8      	blx	r5
					}
					tg = !tg;
  406bbc:	2500      	movs	r5, #0
  406bbe:	e02f      	b.n	406c20 <vTask1+0x128>
				}
				else {
					pio_clear(LED0);	
  406bc0:	4620      	mov	r0, r4
  406bc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406bc6:	47b8      	blx	r7
					if(!hexabot_walk.Walk_EN && getBatVoltage() < 6.25) {
  406bc8:	69f3      	ldr	r3, [r6, #28]
  406bca:	bb43      	cbnz	r3, 406c1e <vTask1+0x126>
  406bcc:	4b20      	ldr	r3, [pc, #128]	; (406c50 <vTask1+0x158>)
  406bce:	4798      	blx	r3
  406bd0:	eef1 7a09 	vmov.f32	s15, #25
  406bd4:	ee07 0a10 	vmov	s14, r0
  406bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  406bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  406be0:	d51d      	bpl.n	406c1e <vTask1+0x126>
						pio_clear(LED0);
  406be2:	4620      	mov	r0, r4
  406be4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406be8:	47b8      	blx	r7
						pio_clear(LED1);
  406bea:	4620      	mov	r0, r4
  406bec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406bf0:	47b8      	blx	r7
						pio_clear(LED2);
  406bf2:	4620      	mov	r0, r4
  406bf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406bf8:	47b8      	blx	r7
						pio_clear(LED3);
  406bfa:	4620      	mov	r0, r4
  406bfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406c00:	47b8      	blx	r7
						pio_clear(LED4);
  406c02:	4817      	ldr	r0, [pc, #92]	; (406c60 <vTask1+0x168>)
  406c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406c08:	47b8      	blx	r7
						pio_clear(LED5);
  406c0a:	4620      	mov	r0, r4
  406c0c:	2104      	movs	r1, #4
  406c0e:	47b8      	blx	r7
						pio_clear(LED6);
  406c10:	4620      	mov	r0, r4
  406c12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  406c16:	47b8      	blx	r7
						pio_clear(LED7);
  406c18:	4620      	mov	r0, r4
  406c1a:	2140      	movs	r1, #64	; 0x40
  406c1c:	47b8      	blx	r7
					}
					tg = !tg;
  406c1e:	2501      	movs	r5, #1
				}	
				vTaskDelay(250);
  406c20:	20fa      	movs	r0, #250	; 0xfa
  406c22:	4b10      	ldr	r3, [pc, #64]	; (406c64 <vTask1+0x16c>)
  406c24:	4798      	blx	r3
	}
  406c26:	e77b      	b.n	406b20 <vTask1+0x28>
}

void vTask1 (void* pvParameters) {
	sendDebugString("TASK1 INITIALIZATION - STARTED\n");
	TickType_t xLastWakeTime = xTaskGetTickCount();
	int tg = 1;
  406c28:	f04f 0800 	mov.w	r8, #0
  406c2c:	e7c6      	b.n	406bbc <vTask1+0xc4>
  406c2e:	bf00      	nop
  406c30:	00412e1c 	.word	0x00412e1c
  406c34:	0040019d 	.word	0x0040019d
  406c38:	00401af1 	.word	0x00401af1
  406c3c:	400e0e00 	.word	0x400e0e00
  406c40:	004027c9 	.word	0x004027c9
  406c44:	00412e3c 	.word	0x00412e3c
  406c48:	004027cd 	.word	0x004027cd
  406c4c:	2040c5f8 	.word	0x2040c5f8
  406c50:	00405701 	.word	0x00405701
  406c54:	00412e90 	.word	0x00412e90
  406c58:	00412eb8 	.word	0x00412eb8
  406c5c:	00412ed4 	.word	0x00412ed4
  406c60:	400e1000 	.word	0x400e1000
  406c64:	00401d49 	.word	0x00401d49
  406c68:	00412e78 	.word	0x00412e78

00406c6c <LegControlTask>:
				}	
				vTaskDelay(250);
	}
}

void LegControlTask (void* pvParameters) {
  406c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c70:	b0b5      	sub	sp, #212	; 0xd4
	sendDebugString("LEG CONTROL TASK INITIALIZATION - STARTED\n");
  406c72:	4846      	ldr	r0, [pc, #280]	; (406d8c <LegControlTask+0x120>)
  406c74:	4e46      	ldr	r6, [pc, #280]	; (406d90 <LegControlTask+0x124>)
  406c76:	47b0      	blx	r6
	
	float	ofst[7];
	XZ		xzS[7];
	angles	Ang[7];
	
	hexabot_walk.movTurn = 0;
  406c78:	4b46      	ldr	r3, [pc, #280]	; (406d94 <LegControlTask+0x128>)
  406c7a:	2200      	movs	r2, #0
  406c7c:	601a      	str	r2, [r3, #0]
	hexabot_walk.movDir = 0;
  406c7e:	605a      	str	r2, [r3, #4]
	hexabot_walk.stance = 185;
  406c80:	22b9      	movs	r2, #185	; 0xb9
  406c82:	609a      	str	r2, [r3, #8]
	hexabot_walk.hgt = 100;
  406c84:	2264      	movs	r2, #100	; 0x64
  406c86:	60da      	str	r2, [r3, #12]
	hexabot_walk.pup = 80;
  406c88:	2250      	movs	r2, #80	; 0x50
  406c8a:	611a      	str	r2, [r3, #16]
	hexabot_walk.stride = 65;
  406c8c:	2241      	movs	r2, #65	; 0x41
  406c8e:	615a      	str	r2, [r3, #20]
	hexabot_walk.Walk_EN = 0;
  406c90:	2400      	movs	r4, #0
  406c92:	61dc      	str	r4, [r3, #28]
	hexabot_walk.Hexabot_leg_cycle_t = 150;
  406c94:	2296      	movs	r2, #150	; 0x96
  406c96:	619a      	str	r2, [r3, #24]
	hexabot_walk.ret = 0;
  406c98:	629c      	str	r4, [r3, #40]	; 0x28
	hexabot_walk.gaitIndex = 2;
  406c9a:	2702      	movs	r7, #2
  406c9c:	62df      	str	r7, [r3, #44]	; 0x2c
	
	cmdServoMan(6,0,90.00);
  406c9e:	2006      	movs	r0, #6
  406ca0:	4621      	mov	r1, r4
  406ca2:	225a      	movs	r2, #90	; 0x5a
  406ca4:	4d3c      	ldr	r5, [pc, #240]	; (406d98 <LegControlTask+0x12c>)
  406ca6:	47a8      	blx	r5
	cmdServoMan(6,1,0.00);
  406ca8:	2006      	movs	r0, #6
  406caa:	2101      	movs	r1, #1
  406cac:	4622      	mov	r2, r4
  406cae:	47a8      	blx	r5
	cmdServoMan(6,2,90.00);
  406cb0:	2006      	movs	r0, #6
  406cb2:	4639      	mov	r1, r7
  406cb4:	225a      	movs	r2, #90	; 0x5a
  406cb6:	47a8      	blx	r5
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  406cb8:	4838      	ldr	r0, [pc, #224]	; (406d9c <LegControlTask+0x130>)
  406cba:	47b0      	blx	r6
	
	for(;;) {
		pio_set(LED7);
  406cbc:	4d38      	ldr	r5, [pc, #224]	; (406da0 <LegControlTask+0x134>)
  406cbe:	4e39      	ldr	r6, [pc, #228]	; (406da4 <LegControlTask+0x138>)
		  
		}
		else {
			if(hexabot_walk.ret){
				if(!resting) {
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  406cc0:	2700      	movs	r7, #0
	cmdServoMan(6,2,90.00);
		
	sendDebugString("LEG CONTROL TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
	
	for(;;) {
		pio_set(LED7);
  406cc2:	4628      	mov	r0, r5
  406cc4:	2140      	movs	r1, #64	; 0x40
  406cc6:	47b0      	blx	r6
		if(hexabot_walk.Walk_EN) {
  406cc8:	4b32      	ldr	r3, [pc, #200]	; (406d94 <LegControlTask+0x128>)
  406cca:	69db      	ldr	r3, [r3, #28]
  406ccc:	2b00      	cmp	r3, #0
  406cce:	d077      	beq.n	406dc0 <LegControlTask+0x154>
			
		switch(hexabot_walk.gaitIndex) {
  406cd0:	4b30      	ldr	r3, [pc, #192]	; (406d94 <LegControlTask+0x128>)
  406cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406cd4:	2b02      	cmp	r3, #2
  406cd6:	d017      	beq.n	406d08 <LegControlTask+0x9c>
  406cd8:	dc03      	bgt.n	406ce2 <LegControlTask+0x76>
  406cda:	b13b      	cbz	r3, 406cec <LegControlTask+0x80>
  406cdc:	2b01      	cmp	r3, #1
  406cde:	d00c      	beq.n	406cfa <LegControlTask+0x8e>
  406ce0:	e026      	b.n	406d30 <LegControlTask+0xc4>
  406ce2:	2b62      	cmp	r3, #98	; 0x62
  406ce4:	d017      	beq.n	406d16 <LegControlTask+0xaa>
  406ce6:	2b63      	cmp	r3, #99	; 0x63
  406ce8:	d01c      	beq.n	406d24 <LegControlTask+0xb8>
  406cea:	e021      	b.n	406d30 <LegControlTask+0xc4>
			
			case 0:	
			Gait0(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  406cec:	a82d      	add	r0, sp, #180	; 0xb4
  406cee:	a91f      	add	r1, sp, #124	; 0x7c
  406cf0:	aa0a      	add	r2, sp, #40	; 0x28
  406cf2:	4b28      	ldr	r3, [pc, #160]	; (406d94 <LegControlTask+0x128>)
  406cf4:	4c2c      	ldr	r4, [pc, #176]	; (406da8 <LegControlTask+0x13c>)
  406cf6:	47a0      	blx	r4
			break;
  406cf8:	e01a      	b.n	406d30 <LegControlTask+0xc4>
			
			case 1:
			Gait1(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  406cfa:	a82d      	add	r0, sp, #180	; 0xb4
  406cfc:	a91f      	add	r1, sp, #124	; 0x7c
  406cfe:	aa0a      	add	r2, sp, #40	; 0x28
  406d00:	4b24      	ldr	r3, [pc, #144]	; (406d94 <LegControlTask+0x128>)
  406d02:	4c2a      	ldr	r4, [pc, #168]	; (406dac <LegControlTask+0x140>)
  406d04:	47a0      	blx	r4
			break;
  406d06:	e013      	b.n	406d30 <LegControlTask+0xc4>
			
			case 2:
			Gait2(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  406d08:	a82d      	add	r0, sp, #180	; 0xb4
  406d0a:	a91f      	add	r1, sp, #124	; 0x7c
  406d0c:	aa0a      	add	r2, sp, #40	; 0x28
  406d0e:	4b21      	ldr	r3, [pc, #132]	; (406d94 <LegControlTask+0x128>)
  406d10:	4c27      	ldr	r4, [pc, #156]	; (406db0 <LegControlTask+0x144>)
  406d12:	47a0      	blx	r4
			break;
  406d14:	e00c      	b.n	406d30 <LegControlTask+0xc4>
			
			case 98:
			sitDown(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  406d16:	a82d      	add	r0, sp, #180	; 0xb4
  406d18:	a91f      	add	r1, sp, #124	; 0x7c
  406d1a:	aa0a      	add	r2, sp, #40	; 0x28
  406d1c:	4b1d      	ldr	r3, [pc, #116]	; (406d94 <LegControlTask+0x128>)
  406d1e:	4c25      	ldr	r4, [pc, #148]	; (406db4 <LegControlTask+0x148>)
  406d20:	47a0      	blx	r4
			break;
  406d22:	e005      	b.n	406d30 <LegControlTask+0xc4>
			
			case 99:
			standUp(ofst,xzS,Ang,(walk_data*) &hexabot_walk);
  406d24:	a82d      	add	r0, sp, #180	; 0xb4
  406d26:	a91f      	add	r1, sp, #124	; 0x7c
  406d28:	aa0a      	add	r2, sp, #40	; 0x28
  406d2a:	4b1a      	ldr	r3, [pc, #104]	; (406d94 <LegControlTask+0x128>)
  406d2c:	4c22      	ldr	r4, [pc, #136]	; (406db8 <LegControlTask+0x14c>)
  406d2e:	47a0      	blx	r4
			break;
		}
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  406d30:	2000      	movs	r0, #0
  406d32:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406d38:	4c20      	ldr	r4, [pc, #128]	; (406dbc <LegControlTask+0x150>)
  406d3a:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  406d3c:	2001      	movs	r0, #1
  406d3e:	990d      	ldr	r1, [sp, #52]	; 0x34
  406d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d44:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  406d46:	2002      	movs	r0, #2
  406d48:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406d4e:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  406d50:	2003      	movs	r0, #3
  406d52:	9913      	ldr	r1, [sp, #76]	; 0x4c
  406d54:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406d58:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  406d5a:	2004      	movs	r0, #4
  406d5c:	9916      	ldr	r1, [sp, #88]	; 0x58
  406d5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  406d60:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406d62:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  406d64:	2005      	movs	r0, #5
  406d66:	9919      	ldr	r1, [sp, #100]	; 0x64
  406d68:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  406d6c:	47a0      	blx	r4
		  hexabot_walk.i++;
  406d6e:	4a09      	ldr	r2, [pc, #36]	; (406d94 <LegControlTask+0x128>)
  406d70:	6a53      	ldr	r3, [r2, #36]	; 0x24
  406d72:	3301      	adds	r3, #1
  406d74:	6253      	str	r3, [r2, #36]	; 0x24
		 hexabot_walk. ret = 1;
  406d76:	2101      	movs	r1, #1
  406d78:	6291      	str	r1, [r2, #40]	; 0x28
		  if(hexabot_walk.i > hexabot_walk.max_i) hexabot_walk.Walk_EN = 0;
  406d7a:	6a12      	ldr	r2, [r2, #32]
  406d7c:	4293      	cmp	r3, r2
  406d7e:	f340 814b 	ble.w	407018 <LegControlTask+0x3ac>
  406d82:	2200      	movs	r2, #0
  406d84:	4b03      	ldr	r3, [pc, #12]	; (406d94 <LegControlTask+0x128>)
  406d86:	61da      	str	r2, [r3, #28]
  406d88:	e146      	b.n	407018 <LegControlTask+0x3ac>
  406d8a:	bf00      	nop
  406d8c:	00412ef4 	.word	0x00412ef4
  406d90:	0040019d 	.word	0x0040019d
  406d94:	2040c5f8 	.word	0x2040c5f8
  406d98:	00406781 	.word	0x00406781
  406d9c:	00412f20 	.word	0x00412f20
  406da0:	400e0e00 	.word	0x400e0e00
  406da4:	004027c9 	.word	0x004027c9
  406da8:	00404199 	.word	0x00404199
  406dac:	00404839 	.word	0x00404839
  406db0:	00404ae1 	.word	0x00404ae1
  406db4:	00403d91 	.word	0x00403d91
  406db8:	004039d9 	.word	0x004039d9
  406dbc:	00405c0d 	.word	0x00405c0d
		  
		}
		else {
			if(hexabot_walk.ret){
  406dc0:	4b99      	ldr	r3, [pc, #612]	; (407028 <LegControlTask+0x3bc>)
  406dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406dc4:	2b00      	cmp	r3, #0
  406dc6:	f000 8124 	beq.w	407012 <LegControlTask+0x3a6>
				if(!resting) {
  406dca:	4b98      	ldr	r3, [pc, #608]	; (40702c <LegControlTask+0x3c0>)
  406dcc:	681b      	ldr	r3, [r3, #0]
  406dce:	2b00      	cmp	r3, #0
  406dd0:	f040 8115 	bne.w	406ffe <LegControlTask+0x392>
		  xzS[0] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  406dd4:	f8df 8250 	ldr.w	r8, [pc, #592]	; 407028 <LegControlTask+0x3bc>
  406dd8:	edd8 7a02 	vldr	s15, [r8, #8]
  406ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406de0:	ac08      	add	r4, sp, #32
  406de2:	9700      	str	r7, [sp, #0]
  406de4:	9701      	str	r7, [sp, #4]
  406de6:	f04f 0901 	mov.w	r9, #1
  406dea:	f8cd 9008 	str.w	r9, [sp, #8]
  406dee:	9703      	str	r7, [sp, #12]
  406df0:	4620      	mov	r0, r4
  406df2:	ee17 1a90 	vmov	r1, s15
  406df6:	463a      	mov	r2, r7
  406df8:	ee17 3a90 	vmov	r3, s15
  406dfc:	f8df b23c 	ldr.w	fp, [pc, #572]	; 40703c <LegControlTask+0x3d0>
  406e00:	47d8      	blx	fp
  406e02:	ab1f      	add	r3, sp, #124	; 0x7c
  406e04:	e894 0003 	ldmia.w	r4, {r0, r1}
  406e08:	e883 0003 	stmia.w	r3, {r0, r1}
		  xzS[1] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  406e0c:	edd8 7a02 	vldr	s15, [r8, #8]
  406e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406e14:	9700      	str	r7, [sp, #0]
  406e16:	9701      	str	r7, [sp, #4]
  406e18:	f04f 0a00 	mov.w	sl, #0
  406e1c:	f8cd a008 	str.w	sl, [sp, #8]
  406e20:	9703      	str	r7, [sp, #12]
  406e22:	4620      	mov	r0, r4
  406e24:	ee17 1a90 	vmov	r1, s15
  406e28:	463a      	mov	r2, r7
  406e2a:	ee17 3a90 	vmov	r3, s15
  406e2e:	47d8      	blx	fp
  406e30:	ab21      	add	r3, sp, #132	; 0x84
  406e32:	e894 0003 	ldmia.w	r4, {r0, r1}
  406e36:	e883 0003 	stmia.w	r3, {r0, r1}
		  xzS[2] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  406e3a:	edd8 7a02 	vldr	s15, [r8, #8]
  406e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406e42:	9700      	str	r7, [sp, #0]
  406e44:	9701      	str	r7, [sp, #4]
  406e46:	f8cd 9008 	str.w	r9, [sp, #8]
  406e4a:	9703      	str	r7, [sp, #12]
  406e4c:	4620      	mov	r0, r4
  406e4e:	ee17 1a90 	vmov	r1, s15
  406e52:	463a      	mov	r2, r7
  406e54:	ee17 3a90 	vmov	r3, s15
  406e58:	47d8      	blx	fp
  406e5a:	ab23      	add	r3, sp, #140	; 0x8c
  406e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
  406e60:	e883 0003 	stmia.w	r3, {r0, r1}
		  xzS[3] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  406e64:	edd8 7a02 	vldr	s15, [r8, #8]
  406e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406e6c:	9700      	str	r7, [sp, #0]
  406e6e:	9701      	str	r7, [sp, #4]
  406e70:	f8cd a008 	str.w	sl, [sp, #8]
  406e74:	9703      	str	r7, [sp, #12]
  406e76:	4620      	mov	r0, r4
  406e78:	ee17 1a90 	vmov	r1, s15
  406e7c:	463a      	mov	r2, r7
  406e7e:	ee17 3a90 	vmov	r3, s15
  406e82:	47d8      	blx	fp
  406e84:	ab25      	add	r3, sp, #148	; 0x94
  406e86:	e894 0003 	ldmia.w	r4, {r0, r1}
  406e8a:	e883 0003 	stmia.w	r3, {r0, r1}
		  xzS[4] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,1,0);
  406e8e:	edd8 7a02 	vldr	s15, [r8, #8]
  406e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406e96:	9700      	str	r7, [sp, #0]
  406e98:	9701      	str	r7, [sp, #4]
  406e9a:	f8cd 9008 	str.w	r9, [sp, #8]
  406e9e:	9703      	str	r7, [sp, #12]
  406ea0:	4620      	mov	r0, r4
  406ea2:	ee17 1a90 	vmov	r1, s15
  406ea6:	463a      	mov	r2, r7
  406ea8:	ee17 3a90 	vmov	r3, s15
  406eac:	47d8      	blx	fp
  406eae:	ab27      	add	r3, sp, #156	; 0x9c
  406eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
  406eb4:	e883 0003 	stmia.w	r3, {r0, r1}
		  xzS[5] = calcRotation(hexabot_walk.stance, 0, hexabot_walk.stance, 0, 0,0,0);
  406eb8:	edd8 7a02 	vldr	s15, [r8, #8]
  406ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406ec0:	9700      	str	r7, [sp, #0]
  406ec2:	9701      	str	r7, [sp, #4]
  406ec4:	f8cd a008 	str.w	sl, [sp, #8]
  406ec8:	9703      	str	r7, [sp, #12]
  406eca:	4620      	mov	r0, r4
  406ecc:	ee17 1a90 	vmov	r1, s15
  406ed0:	463a      	mov	r2, r7
  406ed2:	ee17 3a90 	vmov	r3, s15
  406ed6:	47d8      	blx	fp
  406ed8:	ab29      	add	r3, sp, #164	; 0xa4
  406eda:	e894 0003 	ldmia.w	r4, {r0, r1}
  406ede:	e883 0003 	stmia.w	r3, {r0, r1}

		  Ang[0] = legAngCalc(xzS[0].X,  -hexabot_walk.hgt  ,xzS[0].Z);
  406ee2:	ac04      	add	r4, sp, #16
  406ee4:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406ee8:	4252      	negs	r2, r2
  406eea:	4620      	mov	r0, r4
  406eec:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406eee:	ee07 2a90 	vmov	s15, r2
  406ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406ef6:	ee17 2a90 	vmov	r2, s15
  406efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406efc:	f8df b140 	ldr.w	fp, [pc, #320]	; 407040 <LegControlTask+0x3d4>
  406f00:	47d8      	blx	fp
  406f02:	ab0a      	add	r3, sp, #40	; 0x28
  406f04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  Ang[1] = legAngCalc(xzS[1].X,  -hexabot_walk.hgt  ,xzS[1].Z);
  406f0c:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406f10:	4252      	negs	r2, r2
  406f12:	4620      	mov	r0, r4
  406f14:	9921      	ldr	r1, [sp, #132]	; 0x84
  406f16:	ee07 2a90 	vmov	s15, r2
  406f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406f1e:	ee17 2a90 	vmov	r2, s15
  406f22:	9b22      	ldr	r3, [sp, #136]	; 0x88
  406f24:	47d8      	blx	fp
  406f26:	ab0d      	add	r3, sp, #52	; 0x34
  406f28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406f2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  Ang[2] = legAngCalc(xzS[2].X,  -hexabot_walk.hgt  ,xzS[2].Z);
  406f30:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406f34:	4252      	negs	r2, r2
  406f36:	4620      	mov	r0, r4
  406f38:	9923      	ldr	r1, [sp, #140]	; 0x8c
  406f3a:	ee07 2a90 	vmov	s15, r2
  406f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406f42:	ee17 2a90 	vmov	r2, s15
  406f46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406f48:	47d8      	blx	fp
  406f4a:	ab10      	add	r3, sp, #64	; 0x40
  406f4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406f50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  Ang[3] = legAngCalc(xzS[3].X,  -hexabot_walk.hgt  ,xzS[3].Z);
  406f54:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406f58:	4252      	negs	r2, r2
  406f5a:	4620      	mov	r0, r4
  406f5c:	9925      	ldr	r1, [sp, #148]	; 0x94
  406f5e:	ee07 2a90 	vmov	s15, r2
  406f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406f66:	ee17 2a90 	vmov	r2, s15
  406f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f6c:	47d8      	blx	fp
  406f6e:	ab13      	add	r3, sp, #76	; 0x4c
  406f70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  Ang[4] = legAngCalc(xzS[4].X,  -hexabot_walk.hgt  ,xzS[4].Z);
  406f78:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406f7c:	4252      	negs	r2, r2
  406f7e:	4620      	mov	r0, r4
  406f80:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406f82:	ee07 2a90 	vmov	s15, r2
  406f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406f8a:	ee17 2a90 	vmov	r2, s15
  406f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406f90:	47d8      	blx	fp
  406f92:	ab16      	add	r3, sp, #88	; 0x58
  406f94:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  Ang[5] = legAngCalc(xzS[5].X,  -hexabot_walk.hgt  ,xzS[5].Z);
  406f9c:	f8d8 200c 	ldr.w	r2, [r8, #12]
  406fa0:	4252      	negs	r2, r2
  406fa2:	4620      	mov	r0, r4
  406fa4:	9929      	ldr	r1, [sp, #164]	; 0xa4
  406fa6:	ee07 2a90 	vmov	s15, r2
  406faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  406fae:	ee17 2a90 	vmov	r2, s15
  406fb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  406fb4:	47d8      	blx	fp
  406fb6:	ab19      	add	r3, sp, #100	; 0x64
  406fb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  406fbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  
		  writeLegOut(0,Ang[0].S1,Ang[0].S2,Ang[0].S3);
  406fc0:	4650      	mov	r0, sl
  406fc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  406fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406fc8:	4c19      	ldr	r4, [pc, #100]	; (407030 <LegControlTask+0x3c4>)
  406fca:	47a0      	blx	r4
		  writeLegOut(1,Ang[1].S1,Ang[1].S2,Ang[1].S3);
  406fcc:	4648      	mov	r0, r9
  406fce:	990d      	ldr	r1, [sp, #52]	; 0x34
  406fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406fd4:	47a0      	blx	r4
		  writeLegOut(2,Ang[2].S1,Ang[2].S2,Ang[2].S3);
  406fd6:	2002      	movs	r0, #2
  406fd8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fda:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406fde:	47a0      	blx	r4
		  writeLegOut(3,Ang[3].S1,Ang[3].S2,Ang[3].S3);
  406fe0:	2003      	movs	r0, #3
  406fe2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  406fe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406fe8:	47a0      	blx	r4
		  writeLegOut(4,Ang[4].S1,Ang[4].S2,Ang[4].S3);
  406fea:	2004      	movs	r0, #4
  406fec:	9916      	ldr	r1, [sp, #88]	; 0x58
  406fee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  406ff0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406ff2:	47a0      	blx	r4
		  writeLegOut(5,Ang[5].S1,Ang[5].S2,Ang[5].S3);
  406ff4:	2005      	movs	r0, #5
  406ff6:	9919      	ldr	r1, [sp, #100]	; 0x64
  406ff8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406ffa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  406ffc:	47a0      	blx	r4
				}
		  hexabot_walk.ret = 0;
  406ffe:	4b0a      	ldr	r3, [pc, #40]	; (407028 <LegControlTask+0x3bc>)
  407000:	2200      	movs	r2, #0
  407002:	629a      	str	r2, [r3, #40]	; 0x28
		  if(hexabot_walk.gaitIndex == 99 || hexabot_walk.gaitIndex == 98) hexabot_walk.gaitIndex = 2;
  407004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  407006:	3b62      	subs	r3, #98	; 0x62
  407008:	2b01      	cmp	r3, #1
  40700a:	d802      	bhi.n	407012 <LegControlTask+0x3a6>
  40700c:	2202      	movs	r2, #2
  40700e:	4b06      	ldr	r3, [pc, #24]	; (407028 <LegControlTask+0x3bc>)
  407010:	62da      	str	r2, [r3, #44]	; 0x2c
		}
			hexabot_walk.i = 0;
  407012:	2200      	movs	r2, #0
  407014:	4b04      	ldr	r3, [pc, #16]	; (407028 <LegControlTask+0x3bc>)
  407016:	625a      	str	r2, [r3, #36]	; 0x24
			//return to idle state (legs in middle) 
		}
		pio_clear(LED7);
  407018:	4628      	mov	r0, r5
  40701a:	2140      	movs	r1, #64	; 0x40
  40701c:	4b05      	ldr	r3, [pc, #20]	; (407034 <LegControlTask+0x3c8>)
  40701e:	4798      	blx	r3
		  vTaskDelay(5);
  407020:	2005      	movs	r0, #5
  407022:	4b05      	ldr	r3, [pc, #20]	; (407038 <LegControlTask+0x3cc>)
  407024:	4798      	blx	r3
	}
  407026:	e64c      	b.n	406cc2 <LegControlTask+0x56>
  407028:	2040c5f8 	.word	0x2040c5f8
  40702c:	2040c4b8 	.word	0x2040c4b8
  407030:	00405c0d 	.word	0x00405c0d
  407034:	004027cd 	.word	0x004027cd
  407038:	00401d49 	.word	0x00401d49
  40703c:	004057e1 	.word	0x004057e1
  407040:	00405a11 	.word	0x00405a11

00407044 <CLItask>:
}

void CLItask(void* pvParameters) {
  407044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407048:	b085      	sub	sp, #20
	sendDebugString("CLI TASK INITIALIZATION - STARTED\n");
  40704a:	4884      	ldr	r0, [pc, #528]	; (40725c <CLItask+0x218>)
  40704c:	4c84      	ldr	r4, [pc, #528]	; (407260 <CLItask+0x21c>)
  40704e:	47a0      	blx	r4
	memset(CLIbuf,0,100);
  407050:	4884      	ldr	r0, [pc, #528]	; (407264 <CLItask+0x220>)
  407052:	2100      	movs	r1, #0
  407054:	2264      	movs	r2, #100	; 0x64
  407056:	4b84      	ldr	r3, [pc, #528]	; (407268 <CLItask+0x224>)
  407058:	4798      	blx	r3
	char* BaseCmd;
	sendDebugString("CLI TASK INITIALIZATION - FINISHED | ENTERING INFINITE LOOP\n");
  40705a:	4884      	ldr	r0, [pc, #528]	; (40726c <CLItask+0x228>)
  40705c:	47a0      	blx	r4
	sendDebugString("COMMAND LINE STARTED\n");
  40705e:	4884      	ldr	r0, [pc, #528]	; (407270 <CLItask+0x22c>)
  407060:	47a0      	blx	r4
	sendDebugString("\n");
  407062:	4d84      	ldr	r5, [pc, #528]	; (407274 <CLItask+0x230>)
  407064:	4628      	mov	r0, r5
  407066:	47a0      	blx	r4
	sendDebugString("\n");
  407068:	4628      	mov	r0, r5
  40706a:	47a0      	blx	r4
	UARTsem = xSemaphoreCreateBinary();
  40706c:	2001      	movs	r0, #1
  40706e:	2100      	movs	r1, #0
  407070:	2203      	movs	r2, #3
  407072:	4b81      	ldr	r3, [pc, #516]	; (407278 <CLItask+0x234>)
  407074:	4798      	blx	r3
  407076:	4b81      	ldr	r3, [pc, #516]	; (40727c <CLItask+0x238>)
  407078:	6018      	str	r0, [r3, #0]
	
	sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  40707a:	4881      	ldr	r0, [pc, #516]	; (407280 <CLItask+0x23c>)
  40707c:	47a0      	blx	r4
	for(;;) {
			if(xSemaphoreTake(UARTsem,0xFFFF) == pdTRUE) {
  40707e:	4d7f      	ldr	r5, [pc, #508]	; (40727c <CLItask+0x238>)
  407080:	6828      	ldr	r0, [r5, #0]
  407082:	2100      	movs	r1, #0
  407084:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407088:	460b      	mov	r3, r1
  40708a:	4c7e      	ldr	r4, [pc, #504]	; (407284 <CLItask+0x240>)
  40708c:	47a0      	blx	r4
  40708e:	2801      	cmp	r0, #1
  407090:	d1f6      	bne.n	407080 <CLItask+0x3c>
		if(CLIbuf[CLIbufIndex-1] ==  '\n') {
  407092:	4b7d      	ldr	r3, [pc, #500]	; (407288 <CLItask+0x244>)
  407094:	681b      	ldr	r3, [r3, #0]
  407096:	4a73      	ldr	r2, [pc, #460]	; (407264 <CLItask+0x220>)
  407098:	4413      	add	r3, r2
  40709a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40709e:	2b0a      	cmp	r3, #10
  4070a0:	d1ee      	bne.n	407080 <CLItask+0x3c>
			CLIbufIndex=0;
  4070a2:	2200      	movs	r2, #0
  4070a4:	4b78      	ldr	r3, [pc, #480]	; (407288 <CLItask+0x244>)
  4070a6:	601a      	str	r2, [r3, #0]
			//sendDebugString(CLIbuf);
			BaseCmd = strtok(CLIbuf," ");
  4070a8:	486e      	ldr	r0, [pc, #440]	; (407264 <CLItask+0x220>)
  4070aa:	4978      	ldr	r1, [pc, #480]	; (40728c <CLItask+0x248>)
  4070ac:	4b78      	ldr	r3, [pc, #480]	; (407290 <CLItask+0x24c>)
  4070ae:	4798      	blx	r3
  4070b0:	4604      	mov	r4, r0
			
			if(UART_Ctrl_EN) {
  4070b2:	4b78      	ldr	r3, [pc, #480]	; (407294 <CLItask+0x250>)
  4070b4:	681b      	ldr	r3, [r3, #0]
  4070b6:	b183      	cbz	r3, 4070da <CLItask+0x96>
				UART_Ctrl_EN = 0;
  4070b8:	2300      	movs	r3, #0
  4070ba:	4a76      	ldr	r2, [pc, #472]	; (407294 <CLItask+0x250>)
  4070bc:	6013      	str	r3, [r2, #0]
				UART_Ctrl_Cnt = 0;
  4070be:	4a76      	ldr	r2, [pc, #472]	; (407298 <CLItask+0x254>)
  4070c0:	6013      	str	r3, [r2, #0]
				pio_clear(LED6);
  4070c2:	4876      	ldr	r0, [pc, #472]	; (40729c <CLItask+0x258>)
  4070c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4070c8:	4b75      	ldr	r3, [pc, #468]	; (4072a0 <CLItask+0x25c>)
  4070ca:	4798      	blx	r3
				cmdInterp(CLIbuf,UART_Ctrl_Max,&hexabot_walk);
  4070cc:	4865      	ldr	r0, [pc, #404]	; (407264 <CLItask+0x220>)
  4070ce:	4b75      	ldr	r3, [pc, #468]	; (4072a4 <CLItask+0x260>)
  4070d0:	6819      	ldr	r1, [r3, #0]
  4070d2:	4a75      	ldr	r2, [pc, #468]	; (4072a8 <CLItask+0x264>)
  4070d4:	4b75      	ldr	r3, [pc, #468]	; (4072ac <CLItask+0x268>)
  4070d6:	4798      	blx	r3
  4070d8:	e280      	b.n	4075dc <CLItask+0x598>
			}
			else { 
			if(!strcmp(BaseCmd,"led")) cmdLED( atoi(strtok(NULL," "))  , atoi(strtok(NULL," ")) );
  4070da:	4975      	ldr	r1, [pc, #468]	; (4072b0 <CLItask+0x26c>)
  4070dc:	4b75      	ldr	r3, [pc, #468]	; (4072b4 <CLItask+0x270>)
  4070de:	4798      	blx	r3
  4070e0:	b978      	cbnz	r0, 407102 <CLItask+0xbe>
  4070e2:	4e6a      	ldr	r6, [pc, #424]	; (40728c <CLItask+0x248>)
  4070e4:	4631      	mov	r1, r6
  4070e6:	4f6a      	ldr	r7, [pc, #424]	; (407290 <CLItask+0x24c>)
  4070e8:	47b8      	blx	r7
  4070ea:	4c73      	ldr	r4, [pc, #460]	; (4072b8 <CLItask+0x274>)
  4070ec:	47a0      	blx	r4
  4070ee:	4682      	mov	sl, r0
  4070f0:	2000      	movs	r0, #0
  4070f2:	4631      	mov	r1, r6
  4070f4:	47b8      	blx	r7
  4070f6:	47a0      	blx	r4
  4070f8:	4601      	mov	r1, r0
  4070fa:	4650      	mov	r0, sl
  4070fc:	4b6f      	ldr	r3, [pc, #444]	; (4072bc <CLItask+0x278>)
  4070fe:	4798      	blx	r3
  407100:	e269      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"manusvo"))  cmdServoMan(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  407102:	4620      	mov	r0, r4
  407104:	496e      	ldr	r1, [pc, #440]	; (4072c0 <CLItask+0x27c>)
  407106:	4b6b      	ldr	r3, [pc, #428]	; (4072b4 <CLItask+0x270>)
  407108:	4798      	blx	r3
  40710a:	b9b0      	cbnz	r0, 40713a <CLItask+0xf6>
  40710c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 40728c <CLItask+0x248>
  407110:	4649      	mov	r1, r9
  407112:	4f5f      	ldr	r7, [pc, #380]	; (407290 <CLItask+0x24c>)
  407114:	47b8      	blx	r7
  407116:	4c68      	ldr	r4, [pc, #416]	; (4072b8 <CLItask+0x274>)
  407118:	47a0      	blx	r4
  40711a:	4683      	mov	fp, r0
  40711c:	2000      	movs	r0, #0
  40711e:	4649      	mov	r1, r9
  407120:	47b8      	blx	r7
  407122:	47a0      	blx	r4
  407124:	4682      	mov	sl, r0
  407126:	2000      	movs	r0, #0
  407128:	4649      	mov	r1, r9
  40712a:	47b8      	blx	r7
  40712c:	47a0      	blx	r4
  40712e:	4602      	mov	r2, r0
  407130:	4658      	mov	r0, fp
  407132:	4651      	mov	r1, sl
  407134:	4b63      	ldr	r3, [pc, #396]	; (4072c4 <CLItask+0x280>)
  407136:	4798      	blx	r3
  407138:	e24d      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"batvolt\n")) cmdBatVolt();
  40713a:	4620      	mov	r0, r4
  40713c:	4962      	ldr	r1, [pc, #392]	; (4072c8 <CLItask+0x284>)
  40713e:	4b5d      	ldr	r3, [pc, #372]	; (4072b4 <CLItask+0x270>)
  407140:	4798      	blx	r3
  407142:	b910      	cbnz	r0, 40714a <CLItask+0x106>
  407144:	4b61      	ldr	r3, [pc, #388]	; (4072cc <CLItask+0x288>)
  407146:	4798      	blx	r3
  407148:	e245      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"dumpimg")) dumpFrame( strtol(strtok(NULL," "),NULL,16));
  40714a:	4620      	mov	r0, r4
  40714c:	4960      	ldr	r1, [pc, #384]	; (4072d0 <CLItask+0x28c>)
  40714e:	4b59      	ldr	r3, [pc, #356]	; (4072b4 <CLItask+0x270>)
  407150:	4798      	blx	r3
  407152:	b948      	cbnz	r0, 407168 <CLItask+0x124>
  407154:	494d      	ldr	r1, [pc, #308]	; (40728c <CLItask+0x248>)
  407156:	4b4e      	ldr	r3, [pc, #312]	; (407290 <CLItask+0x24c>)
  407158:	4798      	blx	r3
  40715a:	2100      	movs	r1, #0
  40715c:	2210      	movs	r2, #16
  40715e:	4b5d      	ldr	r3, [pc, #372]	; (4072d4 <CLItask+0x290>)
  407160:	4798      	blx	r3
  407162:	4b5d      	ldr	r3, [pc, #372]	; (4072d8 <CLItask+0x294>)
  407164:	4798      	blx	r3
  407166:	e236      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"walk")) cmdWalk(atoi(strtok(NULL," ")));
  407168:	4620      	mov	r0, r4
  40716a:	495c      	ldr	r1, [pc, #368]	; (4072dc <CLItask+0x298>)
  40716c:	4b51      	ldr	r3, [pc, #324]	; (4072b4 <CLItask+0x270>)
  40716e:	4798      	blx	r3
  407170:	b938      	cbnz	r0, 407182 <CLItask+0x13e>
  407172:	4946      	ldr	r1, [pc, #280]	; (40728c <CLItask+0x248>)
  407174:	4b46      	ldr	r3, [pc, #280]	; (407290 <CLItask+0x24c>)
  407176:	4798      	blx	r3
  407178:	4b4f      	ldr	r3, [pc, #316]	; (4072b8 <CLItask+0x274>)
  40717a:	4798      	blx	r3
  40717c:	4b58      	ldr	r3, [pc, #352]	; (4072e0 <CLItask+0x29c>)
  40717e:	4798      	blx	r3
  407180:	e229      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"walkcytime")) hexabot_walk.Hexabot_leg_cycle_t = atoi(strtok(NULL," "));
  407182:	4620      	mov	r0, r4
  407184:	4957      	ldr	r1, [pc, #348]	; (4072e4 <CLItask+0x2a0>)
  407186:	4b4b      	ldr	r3, [pc, #300]	; (4072b4 <CLItask+0x270>)
  407188:	4798      	blx	r3
  40718a:	b938      	cbnz	r0, 40719c <CLItask+0x158>
  40718c:	493f      	ldr	r1, [pc, #252]	; (40728c <CLItask+0x248>)
  40718e:	4b40      	ldr	r3, [pc, #256]	; (407290 <CLItask+0x24c>)
  407190:	4798      	blx	r3
  407192:	4b49      	ldr	r3, [pc, #292]	; (4072b8 <CLItask+0x274>)
  407194:	4798      	blx	r3
  407196:	4b44      	ldr	r3, [pc, #272]	; (4072a8 <CLItask+0x264>)
  407198:	6198      	str	r0, [r3, #24]
  40719a:	e21c      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"verbose")) VerboseMode = atoi(strtok(NULL," "));
  40719c:	4620      	mov	r0, r4
  40719e:	4952      	ldr	r1, [pc, #328]	; (4072e8 <CLItask+0x2a4>)
  4071a0:	4b44      	ldr	r3, [pc, #272]	; (4072b4 <CLItask+0x270>)
  4071a2:	4798      	blx	r3
  4071a4:	b938      	cbnz	r0, 4071b6 <CLItask+0x172>
  4071a6:	4939      	ldr	r1, [pc, #228]	; (40728c <CLItask+0x248>)
  4071a8:	4b39      	ldr	r3, [pc, #228]	; (407290 <CLItask+0x24c>)
  4071aa:	4798      	blx	r3
  4071ac:	4b42      	ldr	r3, [pc, #264]	; (4072b8 <CLItask+0x274>)
  4071ae:	4798      	blx	r3
  4071b0:	4b4e      	ldr	r3, [pc, #312]	; (4072ec <CLItask+0x2a8>)
  4071b2:	6018      	str	r0, [r3, #0]
  4071b4:	e20f      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"DWM-test\n")) cmdTestDW1000();
  4071b6:	4620      	mov	r0, r4
  4071b8:	494d      	ldr	r1, [pc, #308]	; (4072f0 <CLItask+0x2ac>)
  4071ba:	4b3e      	ldr	r3, [pc, #248]	; (4072b4 <CLItask+0x270>)
  4071bc:	4798      	blx	r3
  4071be:	b910      	cbnz	r0, 4071c6 <CLItask+0x182>
  4071c0:	4b4c      	ldr	r3, [pc, #304]	; (4072f4 <CLItask+0x2b0>)
  4071c2:	4798      	blx	r3
  4071c4:	e207      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"DWM-send")) cmdDWMsend(strtok(NULL," "));
  4071c6:	4620      	mov	r0, r4
  4071c8:	494b      	ldr	r1, [pc, #300]	; (4072f8 <CLItask+0x2b4>)
  4071ca:	4b3a      	ldr	r3, [pc, #232]	; (4072b4 <CLItask+0x270>)
  4071cc:	4798      	blx	r3
  4071ce:	b928      	cbnz	r0, 4071dc <CLItask+0x198>
  4071d0:	492e      	ldr	r1, [pc, #184]	; (40728c <CLItask+0x248>)
  4071d2:	4b2f      	ldr	r3, [pc, #188]	; (407290 <CLItask+0x24c>)
  4071d4:	4798      	blx	r3
  4071d6:	4b49      	ldr	r3, [pc, #292]	; (4072fc <CLItask+0x2b8>)
  4071d8:	4798      	blx	r3
  4071da:	e1fc      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"DWM-orLed\n")) cmdOverrideLEDDWM1000();
  4071dc:	4620      	mov	r0, r4
  4071de:	4948      	ldr	r1, [pc, #288]	; (407300 <CLItask+0x2bc>)
  4071e0:	4b34      	ldr	r3, [pc, #208]	; (4072b4 <CLItask+0x270>)
  4071e2:	4798      	blx	r3
  4071e4:	b910      	cbnz	r0, 4071ec <CLItask+0x1a8>
  4071e6:	4b47      	ldr	r3, [pc, #284]	; (407304 <CLItask+0x2c0>)
  4071e8:	4798      	blx	r3
  4071ea:	e1f4      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"DWM-RWtest")) cmdWriteTestDW1000( strtol(strtok(NULL," "),NULL,16));
  4071ec:	4620      	mov	r0, r4
  4071ee:	4946      	ldr	r1, [pc, #280]	; (407308 <CLItask+0x2c4>)
  4071f0:	4b30      	ldr	r3, [pc, #192]	; (4072b4 <CLItask+0x270>)
  4071f2:	4798      	blx	r3
  4071f4:	b950      	cbnz	r0, 40720c <CLItask+0x1c8>
  4071f6:	4925      	ldr	r1, [pc, #148]	; (40728c <CLItask+0x248>)
  4071f8:	4b25      	ldr	r3, [pc, #148]	; (407290 <CLItask+0x24c>)
  4071fa:	4798      	blx	r3
  4071fc:	2100      	movs	r1, #0
  4071fe:	2210      	movs	r2, #16
  407200:	4b34      	ldr	r3, [pc, #208]	; (4072d4 <CLItask+0x290>)
  407202:	4798      	blx	r3
  407204:	17c1      	asrs	r1, r0, #31
  407206:	4b41      	ldr	r3, [pc, #260]	; (40730c <CLItask+0x2c8>)
  407208:	4798      	blx	r3
  40720a:	e1e4      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"camdtsh")) cam_dif_tsh = atoi(strtok(NULL," "));
  40720c:	4620      	mov	r0, r4
  40720e:	4940      	ldr	r1, [pc, #256]	; (407310 <CLItask+0x2cc>)
  407210:	4b28      	ldr	r3, [pc, #160]	; (4072b4 <CLItask+0x270>)
  407212:	4798      	blx	r3
  407214:	b938      	cbnz	r0, 407226 <CLItask+0x1e2>
  407216:	491d      	ldr	r1, [pc, #116]	; (40728c <CLItask+0x248>)
  407218:	4b1d      	ldr	r3, [pc, #116]	; (407290 <CLItask+0x24c>)
  40721a:	4798      	blx	r3
  40721c:	4b26      	ldr	r3, [pc, #152]	; (4072b8 <CLItask+0x274>)
  40721e:	4798      	blx	r3
  407220:	4b3c      	ldr	r3, [pc, #240]	; (407314 <CLItask+0x2d0>)
  407222:	6018      	str	r0, [r3, #0]
  407224:	e1d7      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"memtest\n")) SdramCheck();
  407226:	4620      	mov	r0, r4
  407228:	493b      	ldr	r1, [pc, #236]	; (407318 <CLItask+0x2d4>)
  40722a:	4b22      	ldr	r3, [pc, #136]	; (4072b4 <CLItask+0x270>)
  40722c:	4798      	blx	r3
  40722e:	b910      	cbnz	r0, 407236 <CLItask+0x1f2>
  407230:	4b3a      	ldr	r3, [pc, #232]	; (40731c <CLItask+0x2d8>)
  407232:	4798      	blx	r3
  407234:	e1cf      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"DWM-clrStatus\n")) DW1000_writeReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0xFFFFFFFF, SYS_STATUS_LEN);
  407236:	4620      	mov	r0, r4
  407238:	4939      	ldr	r1, [pc, #228]	; (407320 <CLItask+0x2dc>)
  40723a:	4b1e      	ldr	r3, [pc, #120]	; (4072b4 <CLItask+0x270>)
  40723c:	4798      	blx	r3
  40723e:	2800      	cmp	r0, #0
  407240:	d172      	bne.n	407328 <CLItask+0x2e4>
  407242:	f04f 32ff 	mov.w	r2, #4294967295
  407246:	2300      	movs	r3, #0
  407248:	e9cd 2300 	strd	r2, r3, [sp]
  40724c:	2305      	movs	r3, #5
  40724e:	9302      	str	r3, [sp, #8]
  407250:	200f      	movs	r0, #15
  407252:	2100      	movs	r1, #0
  407254:	460a      	mov	r2, r1
  407256:	4b33      	ldr	r3, [pc, #204]	; (407324 <CLItask+0x2e0>)
  407258:	4798      	blx	r3
  40725a:	e1bc      	b.n	4075d6 <CLItask+0x592>
  40725c:	00412f68 	.word	0x00412f68
  407260:	0040019d 	.word	0x0040019d
  407264:	2040c628 	.word	0x2040c628
  407268:	0040b30d 	.word	0x0040b30d
  40726c:	00412f8c 	.word	0x00412f8c
  407270:	00412fcc 	.word	0x00412fcc
  407274:	00412d04 	.word	0x00412d04
  407278:	00401125 	.word	0x00401125
  40727c:	2040c4e0 	.word	0x2040c4e0
  407280:	00412fe4 	.word	0x00412fe4
  407284:	0040155d 	.word	0x0040155d
  407288:	2040c4d4 	.word	0x2040c4d4
  40728c:	00413008 	.word	0x00413008
  407290:	0040c705 	.word	0x0040c705
  407294:	2040c4bc 	.word	0x2040c4bc
  407298:	2040c4cc 	.word	0x2040c4cc
  40729c:	400e0e00 	.word	0x400e0e00
  4072a0:	004027cd 	.word	0x004027cd
  4072a4:	2040c4d0 	.word	0x2040c4d0
  4072a8:	2040c5f8 	.word	0x2040c5f8
  4072ac:	00406571 	.word	0x00406571
  4072b0:	0041300c 	.word	0x0041300c
  4072b4:	0040b449 	.word	0x0040b449
  4072b8:	0040abbd 	.word	0x0040abbd
  4072bc:	004065dd 	.word	0x004065dd
  4072c0:	00413010 	.word	0x00413010
  4072c4:	00406781 	.word	0x00406781
  4072c8:	00413018 	.word	0x00413018
  4072cc:	00406889 	.word	0x00406889
  4072d0:	00413024 	.word	0x00413024
  4072d4:	0040c895 	.word	0x0040c895
  4072d8:	0040577d 	.word	0x0040577d
  4072dc:	0041302c 	.word	0x0041302c
  4072e0:	004068c1 	.word	0x004068c1
  4072e4:	00413034 	.word	0x00413034
  4072e8:	00413040 	.word	0x00413040
  4072ec:	2040c4c8 	.word	0x2040c4c8
  4072f0:	00413048 	.word	0x00413048
  4072f4:	004068d5 	.word	0x004068d5
  4072f8:	00413054 	.word	0x00413054
  4072fc:	0040695d 	.word	0x0040695d
  407300:	00413060 	.word	0x00413060
  407304:	00406995 	.word	0x00406995
  407308:	0041306c 	.word	0x0041306c
  40730c:	004069d9 	.word	0x004069d9
  407310:	00413078 	.word	0x00413078
  407314:	204000a8 	.word	0x204000a8
  407318:	00413080 	.word	0x00413080
  40731c:	00404d81 	.word	0x00404d81
  407320:	0041308c 	.word	0x0041308c
  407324:	00403831 	.word	0x00403831
			
			else if(!strcmp(BaseCmd,"svoCal\n")) calibServos(SvoCal);
  407328:	4620      	mov	r0, r4
  40732a:	4984      	ldr	r1, [pc, #528]	; (40753c <CLItask+0x4f8>)
  40732c:	4b84      	ldr	r3, [pc, #528]	; (407540 <CLItask+0x4fc>)
  40732e:	4798      	blx	r3
  407330:	b918      	cbnz	r0, 40733a <CLItask+0x2f6>
  407332:	4884      	ldr	r0, [pc, #528]	; (407544 <CLItask+0x500>)
  407334:	4b84      	ldr	r3, [pc, #528]	; (407548 <CLItask+0x504>)
  407336:	4798      	blx	r3
  407338:	e14d      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"svoCalSpec")) calibServoSpec(SvoCal,atoi(strtok(NULL," ")),atoi(strtok(NULL," ")));
  40733a:	4620      	mov	r0, r4
  40733c:	4983      	ldr	r1, [pc, #524]	; (40754c <CLItask+0x508>)
  40733e:	4b80      	ldr	r3, [pc, #512]	; (407540 <CLItask+0x4fc>)
  407340:	4798      	blx	r3
  407342:	b990      	cbnz	r0, 40736a <CLItask+0x326>
  407344:	f8df 923c 	ldr.w	r9, [pc, #572]	; 407584 <CLItask+0x540>
  407348:	4649      	mov	r1, r9
  40734a:	f8df 823c 	ldr.w	r8, [pc, #572]	; 407588 <CLItask+0x544>
  40734e:	47c0      	blx	r8
  407350:	4c7f      	ldr	r4, [pc, #508]	; (407550 <CLItask+0x50c>)
  407352:	47a0      	blx	r4
  407354:	4682      	mov	sl, r0
  407356:	2000      	movs	r0, #0
  407358:	4649      	mov	r1, r9
  40735a:	47c0      	blx	r8
  40735c:	47a0      	blx	r4
  40735e:	4602      	mov	r2, r0
  407360:	4878      	ldr	r0, [pc, #480]	; (407544 <CLItask+0x500>)
  407362:	4651      	mov	r1, sl
  407364:	4b7b      	ldr	r3, [pc, #492]	; (407554 <CLItask+0x510>)
  407366:	4798      	blx	r3
  407368:	e135      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"surprise\n")) surprise();
  40736a:	4620      	mov	r0, r4
  40736c:	497a      	ldr	r1, [pc, #488]	; (407558 <CLItask+0x514>)
  40736e:	4b74      	ldr	r3, [pc, #464]	; (407540 <CLItask+0x4fc>)
  407370:	4798      	blx	r3
  407372:	b910      	cbnz	r0, 40737a <CLItask+0x336>
  407374:	4b79      	ldr	r3, [pc, #484]	; (40755c <CLItask+0x518>)
  407376:	4798      	blx	r3
  407378:	e12d      	b.n	4075d6 <CLItask+0x592>
			
			//walk patern settings
			else if(!strcmp(BaseCmd,"relaxSvo")) cmdRelaxSvo(atoi(strtok(NULL," ")) , atoi(strtok(NULL," ")));
  40737a:	4620      	mov	r0, r4
  40737c:	4978      	ldr	r1, [pc, #480]	; (407560 <CLItask+0x51c>)
  40737e:	4b70      	ldr	r3, [pc, #448]	; (407540 <CLItask+0x4fc>)
  407380:	4798      	blx	r3
  407382:	b988      	cbnz	r0, 4073a8 <CLItask+0x364>
  407384:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 407584 <CLItask+0x540>
  407388:	4649      	mov	r1, r9
  40738a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 407588 <CLItask+0x544>
  40738e:	47c0      	blx	r8
  407390:	4c6f      	ldr	r4, [pc, #444]	; (407550 <CLItask+0x50c>)
  407392:	47a0      	blx	r4
  407394:	4682      	mov	sl, r0
  407396:	2000      	movs	r0, #0
  407398:	4649      	mov	r1, r9
  40739a:	47c0      	blx	r8
  40739c:	47a0      	blx	r4
  40739e:	4601      	mov	r1, r0
  4073a0:	4650      	mov	r0, sl
  4073a2:	4b70      	ldr	r3, [pc, #448]	; (407564 <CLItask+0x520>)
  4073a4:	4798      	blx	r3
  4073a6:	e116      	b.n	4075d6 <CLItask+0x592>
			
			else if(!strcmp(BaseCmd,"StandUp\n")) {
  4073a8:	4620      	mov	r0, r4
  4073aa:	496f      	ldr	r1, [pc, #444]	; (407568 <CLItask+0x524>)
  4073ac:	4b64      	ldr	r3, [pc, #400]	; (407540 <CLItask+0x4fc>)
  4073ae:	4798      	blx	r3
  4073b0:	b958      	cbnz	r0, 4073ca <CLItask+0x386>
				hexabot_walk.gaitIndex = 99;
  4073b2:	4b6e      	ldr	r3, [pc, #440]	; (40756c <CLItask+0x528>)
  4073b4:	2263      	movs	r2, #99	; 0x63
  4073b6:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  4073b8:	2200      	movs	r2, #0
  4073ba:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  4073bc:	2164      	movs	r1, #100	; 0x64
  4073be:	6219      	str	r1, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  4073c0:	2101      	movs	r1, #1
  4073c2:	61d9      	str	r1, [r3, #28]
				resting = 0;
  4073c4:	4b6a      	ldr	r3, [pc, #424]	; (407570 <CLItask+0x52c>)
  4073c6:	601a      	str	r2, [r3, #0]
  4073c8:	e105      	b.n	4075d6 <CLItask+0x592>
			}
			
			else if(!strcmp(BaseCmd,"SitDown\n")) {
  4073ca:	4620      	mov	r0, r4
  4073cc:	4969      	ldr	r1, [pc, #420]	; (407574 <CLItask+0x530>)
  4073ce:	4b5c      	ldr	r3, [pc, #368]	; (407540 <CLItask+0x4fc>)
  4073d0:	4798      	blx	r3
  4073d2:	b958      	cbnz	r0, 4073ec <CLItask+0x3a8>
				hexabot_walk.gaitIndex = 98;
  4073d4:	4b65      	ldr	r3, [pc, #404]	; (40756c <CLItask+0x528>)
  4073d6:	2262      	movs	r2, #98	; 0x62
  4073d8:	62da      	str	r2, [r3, #44]	; 0x2c
				hexabot_walk.i =0;
  4073da:	2200      	movs	r2, #0
  4073dc:	625a      	str	r2, [r3, #36]	; 0x24
				hexabot_walk.max_i = STAND_UP_TIME;
  4073de:	2264      	movs	r2, #100	; 0x64
  4073e0:	621a      	str	r2, [r3, #32]
				hexabot_walk.Walk_EN = 1;
  4073e2:	2201      	movs	r2, #1
  4073e4:	61da      	str	r2, [r3, #28]
				resting = 1;
  4073e6:	4b62      	ldr	r3, [pc, #392]	; (407570 <CLItask+0x52c>)
  4073e8:	601a      	str	r2, [r3, #0]
  4073ea:	e0f4      	b.n	4075d6 <CLItask+0x592>
				
			}
			
			else if(!strcmp(BaseCmd,"relaxAll\n")) cmdRelaxAll();
  4073ec:	4620      	mov	r0, r4
  4073ee:	4962      	ldr	r1, [pc, #392]	; (407578 <CLItask+0x534>)
  4073f0:	4b53      	ldr	r3, [pc, #332]	; (407540 <CLItask+0x4fc>)
  4073f2:	4798      	blx	r3
  4073f4:	b910      	cbnz	r0, 4073fc <CLItask+0x3b8>
  4073f6:	4b61      	ldr	r3, [pc, #388]	; (40757c <CLItask+0x538>)
  4073f8:	4798      	blx	r3
  4073fa:	e0ec      	b.n	4075d6 <CLItask+0x592>
			//walk patern settings
			
			else if(!strcmp(BaseCmd,"gaitTurn")){
  4073fc:	4620      	mov	r0, r4
  4073fe:	4960      	ldr	r1, [pc, #384]	; (407580 <CLItask+0x53c>)
  407400:	4b4f      	ldr	r3, [pc, #316]	; (407540 <CLItask+0x4fc>)
  407402:	4798      	blx	r3
  407404:	b948      	cbnz	r0, 40741a <CLItask+0x3d6>
				hexabot_walk.movTurn = atoff(strtok(NULL," "));
  407406:	495f      	ldr	r1, [pc, #380]	; (407584 <CLItask+0x540>)
  407408:	4b5f      	ldr	r3, [pc, #380]	; (407588 <CLItask+0x544>)
  40740a:	4798      	blx	r3
  40740c:	4b5f      	ldr	r3, [pc, #380]	; (40758c <CLItask+0x548>)
  40740e:	4798      	blx	r3
  407410:	4b56      	ldr	r3, [pc, #344]	; (40756c <CLItask+0x528>)
  407412:	6018      	str	r0, [r3, #0]
				hexabot_walk.ret = 1;
  407414:	2201      	movs	r2, #1
  407416:	629a      	str	r2, [r3, #40]	; 0x28
  407418:	e0dd      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitDir")){
  40741a:	4620      	mov	r0, r4
  40741c:	495c      	ldr	r1, [pc, #368]	; (407590 <CLItask+0x54c>)
  40741e:	4b48      	ldr	r3, [pc, #288]	; (407540 <CLItask+0x4fc>)
  407420:	4798      	blx	r3
  407422:	b948      	cbnz	r0, 407438 <CLItask+0x3f4>
				hexabot_walk.movDir = atoff(strtok(NULL," "));
  407424:	4957      	ldr	r1, [pc, #348]	; (407584 <CLItask+0x540>)
  407426:	4b58      	ldr	r3, [pc, #352]	; (407588 <CLItask+0x544>)
  407428:	4798      	blx	r3
  40742a:	4b58      	ldr	r3, [pc, #352]	; (40758c <CLItask+0x548>)
  40742c:	4798      	blx	r3
  40742e:	4b4f      	ldr	r3, [pc, #316]	; (40756c <CLItask+0x528>)
  407430:	6058      	str	r0, [r3, #4]
				hexabot_walk.ret = 1;
  407432:	2201      	movs	r2, #1
  407434:	629a      	str	r2, [r3, #40]	; 0x28
  407436:	e0ce      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitStance")){
  407438:	4620      	mov	r0, r4
  40743a:	4956      	ldr	r1, [pc, #344]	; (407594 <CLItask+0x550>)
  40743c:	4b40      	ldr	r3, [pc, #256]	; (407540 <CLItask+0x4fc>)
  40743e:	4798      	blx	r3
  407440:	b948      	cbnz	r0, 407456 <CLItask+0x412>
				hexabot_walk.stance = atoi(strtok(NULL," "));
  407442:	4950      	ldr	r1, [pc, #320]	; (407584 <CLItask+0x540>)
  407444:	4b50      	ldr	r3, [pc, #320]	; (407588 <CLItask+0x544>)
  407446:	4798      	blx	r3
  407448:	4b41      	ldr	r3, [pc, #260]	; (407550 <CLItask+0x50c>)
  40744a:	4798      	blx	r3
  40744c:	4b47      	ldr	r3, [pc, #284]	; (40756c <CLItask+0x528>)
  40744e:	6098      	str	r0, [r3, #8]
				hexabot_walk.ret = 1;
  407450:	2201      	movs	r2, #1
  407452:	629a      	str	r2, [r3, #40]	; 0x28
  407454:	e0bf      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitHgt")){
  407456:	4620      	mov	r0, r4
  407458:	494f      	ldr	r1, [pc, #316]	; (407598 <CLItask+0x554>)
  40745a:	4b39      	ldr	r3, [pc, #228]	; (407540 <CLItask+0x4fc>)
  40745c:	4798      	blx	r3
  40745e:	b948      	cbnz	r0, 407474 <CLItask+0x430>
				hexabot_walk.hgt = atoi(strtok(NULL," "));
  407460:	4948      	ldr	r1, [pc, #288]	; (407584 <CLItask+0x540>)
  407462:	4b49      	ldr	r3, [pc, #292]	; (407588 <CLItask+0x544>)
  407464:	4798      	blx	r3
  407466:	4b3a      	ldr	r3, [pc, #232]	; (407550 <CLItask+0x50c>)
  407468:	4798      	blx	r3
  40746a:	4b40      	ldr	r3, [pc, #256]	; (40756c <CLItask+0x528>)
  40746c:	60d8      	str	r0, [r3, #12]
				hexabot_walk.ret = 1;
  40746e:	2201      	movs	r2, #1
  407470:	629a      	str	r2, [r3, #40]	; 0x28
  407472:	e0b0      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitPup")){
  407474:	4620      	mov	r0, r4
  407476:	4949      	ldr	r1, [pc, #292]	; (40759c <CLItask+0x558>)
  407478:	4b31      	ldr	r3, [pc, #196]	; (407540 <CLItask+0x4fc>)
  40747a:	4798      	blx	r3
  40747c:	b948      	cbnz	r0, 407492 <CLItask+0x44e>
				hexabot_walk.pup = atoi(strtok(NULL," "));
  40747e:	4941      	ldr	r1, [pc, #260]	; (407584 <CLItask+0x540>)
  407480:	4b41      	ldr	r3, [pc, #260]	; (407588 <CLItask+0x544>)
  407482:	4798      	blx	r3
  407484:	4b32      	ldr	r3, [pc, #200]	; (407550 <CLItask+0x50c>)
  407486:	4798      	blx	r3
  407488:	4b38      	ldr	r3, [pc, #224]	; (40756c <CLItask+0x528>)
  40748a:	6118      	str	r0, [r3, #16]
				hexabot_walk.ret = 1;
  40748c:	2201      	movs	r2, #1
  40748e:	629a      	str	r2, [r3, #40]	; 0x28
  407490:	e0a1      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitStride")){
  407492:	4620      	mov	r0, r4
  407494:	4942      	ldr	r1, [pc, #264]	; (4075a0 <CLItask+0x55c>)
  407496:	4b2a      	ldr	r3, [pc, #168]	; (407540 <CLItask+0x4fc>)
  407498:	4798      	blx	r3
  40749a:	b948      	cbnz	r0, 4074b0 <CLItask+0x46c>
				hexabot_walk.stride = atoi(strtok(NULL," "));
  40749c:	4939      	ldr	r1, [pc, #228]	; (407584 <CLItask+0x540>)
  40749e:	4b3a      	ldr	r3, [pc, #232]	; (407588 <CLItask+0x544>)
  4074a0:	4798      	blx	r3
  4074a2:	4b2b      	ldr	r3, [pc, #172]	; (407550 <CLItask+0x50c>)
  4074a4:	4798      	blx	r3
  4074a6:	4b31      	ldr	r3, [pc, #196]	; (40756c <CLItask+0x528>)
  4074a8:	6158      	str	r0, [r3, #20]
				hexabot_walk.ret = 1;
  4074aa:	2201      	movs	r2, #1
  4074ac:	629a      	str	r2, [r3, #40]	; 0x28
  4074ae:	e092      	b.n	4075d6 <CLItask+0x592>
			}
			else if(!strcmp(BaseCmd,"gaitStyle")){
  4074b0:	4620      	mov	r0, r4
  4074b2:	493c      	ldr	r1, [pc, #240]	; (4075a4 <CLItask+0x560>)
  4074b4:	4b22      	ldr	r3, [pc, #136]	; (407540 <CLItask+0x4fc>)
  4074b6:	4798      	blx	r3
  4074b8:	b948      	cbnz	r0, 4074ce <CLItask+0x48a>
				hexabot_walk.gaitIndex = atoi(strtok(NULL," "));
  4074ba:	4932      	ldr	r1, [pc, #200]	; (407584 <CLItask+0x540>)
  4074bc:	4b32      	ldr	r3, [pc, #200]	; (407588 <CLItask+0x544>)
  4074be:	4798      	blx	r3
  4074c0:	4b23      	ldr	r3, [pc, #140]	; (407550 <CLItask+0x50c>)
  4074c2:	4798      	blx	r3
  4074c4:	4b29      	ldr	r3, [pc, #164]	; (40756c <CLItask+0x528>)
  4074c6:	62d8      	str	r0, [r3, #44]	; 0x2c
				hexabot_walk.ret = 1;
  4074c8:	2201      	movs	r2, #1
  4074ca:	629a      	str	r2, [r3, #40]	; 0x28
  4074cc:	e083      	b.n	4075d6 <CLItask+0x592>
			}
			
			else if(!strcmp(BaseCmd,"svoinhib")) {
  4074ce:	4620      	mov	r0, r4
  4074d0:	4935      	ldr	r1, [pc, #212]	; (4075a8 <CLItask+0x564>)
  4074d2:	4b1b      	ldr	r3, [pc, #108]	; (407540 <CLItask+0x4fc>)
  4074d4:	4798      	blx	r3
  4074d6:	b988      	cbnz	r0, 4074fc <CLItask+0x4b8>
				if(atoi(strtok(NULL," "))) pio_set(PIOA,PIO_PA26);
  4074d8:	492a      	ldr	r1, [pc, #168]	; (407584 <CLItask+0x540>)
  4074da:	4b2b      	ldr	r3, [pc, #172]	; (407588 <CLItask+0x544>)
  4074dc:	4798      	blx	r3
  4074de:	4b1c      	ldr	r3, [pc, #112]	; (407550 <CLItask+0x50c>)
  4074e0:	4798      	blx	r3
  4074e2:	b128      	cbz	r0, 4074f0 <CLItask+0x4ac>
  4074e4:	4831      	ldr	r0, [pc, #196]	; (4075ac <CLItask+0x568>)
  4074e6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4074ea:	4b31      	ldr	r3, [pc, #196]	; (4075b0 <CLItask+0x56c>)
  4074ec:	4798      	blx	r3
  4074ee:	e072      	b.n	4075d6 <CLItask+0x592>
				else pio_clear(PIOA,PIO_PA26);
  4074f0:	482e      	ldr	r0, [pc, #184]	; (4075ac <CLItask+0x568>)
  4074f2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4074f6:	4b2f      	ldr	r3, [pc, #188]	; (4075b4 <CLItask+0x570>)
  4074f8:	4798      	blx	r3
  4074fa:	e06c      	b.n	4075d6 <CLItask+0x592>
			}
			
			//controller command
			else if(!strcmp(BaseCmd,"ctrlCmd")) {
  4074fc:	4620      	mov	r0, r4
  4074fe:	492e      	ldr	r1, [pc, #184]	; (4075b8 <CLItask+0x574>)
  407500:	4b0f      	ldr	r3, [pc, #60]	; (407540 <CLItask+0x4fc>)
  407502:	4798      	blx	r3
  407504:	b978      	cbnz	r0, 407526 <CLItask+0x4e2>
				UART_Ctrl_EN = 1;
  407506:	2201      	movs	r2, #1
  407508:	4b2c      	ldr	r3, [pc, #176]	; (4075bc <CLItask+0x578>)
  40750a:	601a      	str	r2, [r3, #0]
				UART_Ctrl_Max = atoi(strtok(NULL," "));
  40750c:	491d      	ldr	r1, [pc, #116]	; (407584 <CLItask+0x540>)
  40750e:	4b1e      	ldr	r3, [pc, #120]	; (407588 <CLItask+0x544>)
  407510:	4798      	blx	r3
  407512:	4b0f      	ldr	r3, [pc, #60]	; (407550 <CLItask+0x50c>)
  407514:	4798      	blx	r3
  407516:	4b2a      	ldr	r3, [pc, #168]	; (4075c0 <CLItask+0x57c>)
  407518:	6018      	str	r0, [r3, #0]
				pio_set(LED6);
  40751a:	4824      	ldr	r0, [pc, #144]	; (4075ac <CLItask+0x568>)
  40751c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407520:	4b23      	ldr	r3, [pc, #140]	; (4075b0 <CLItask+0x56c>)
  407522:	4798      	blx	r3
  407524:	e057      	b.n	4075d6 <CLItask+0x592>
			}
			
			else if(!strcmp(BaseCmd,"RESET\n")) rstc_start_software_reset(RSTC);
  407526:	4620      	mov	r0, r4
  407528:	4926      	ldr	r1, [pc, #152]	; (4075c4 <CLItask+0x580>)
  40752a:	4b05      	ldr	r3, [pc, #20]	; (407540 <CLItask+0x4fc>)
  40752c:	4798      	blx	r3
  40752e:	2800      	cmp	r0, #0
  407530:	d14e      	bne.n	4075d0 <CLItask+0x58c>
  407532:	4825      	ldr	r0, [pc, #148]	; (4075c8 <CLItask+0x584>)
  407534:	4b25      	ldr	r3, [pc, #148]	; (4075cc <CLItask+0x588>)
  407536:	4798      	blx	r3
  407538:	e04d      	b.n	4075d6 <CLItask+0x592>
  40753a:	bf00      	nop
  40753c:	0041309c 	.word	0x0041309c
  407540:	0040b449 	.word	0x0040b449
  407544:	20400018 	.word	0x20400018
  407548:	004063a9 	.word	0x004063a9
  40754c:	004130a4 	.word	0x004130a4
  407550:	0040abbd 	.word	0x0040abbd
  407554:	004061b1 	.word	0x004061b1
  407558:	004130b0 	.word	0x004130b0
  40755c:	0040650d 	.word	0x0040650d
  407560:	004130bc 	.word	0x004130bc
  407564:	00406a25 	.word	0x00406a25
  407568:	004130c8 	.word	0x004130c8
  40756c:	2040c5f8 	.word	0x2040c5f8
  407570:	2040c4b8 	.word	0x2040c4b8
  407574:	004130d4 	.word	0x004130d4
  407578:	004130e0 	.word	0x004130e0
  40757c:	00406a81 	.word	0x00406a81
  407580:	004130ec 	.word	0x004130ec
  407584:	00413008 	.word	0x00413008
  407588:	0040c705 	.word	0x0040c705
  40758c:	0040abb5 	.word	0x0040abb5
  407590:	004130f8 	.word	0x004130f8
  407594:	00413100 	.word	0x00413100
  407598:	0041310c 	.word	0x0041310c
  40759c:	00413114 	.word	0x00413114
  4075a0:	0041311c 	.word	0x0041311c
  4075a4:	00413128 	.word	0x00413128
  4075a8:	00413134 	.word	0x00413134
  4075ac:	400e0e00 	.word	0x400e0e00
  4075b0:	004027c9 	.word	0x004027c9
  4075b4:	004027cd 	.word	0x004027cd
  4075b8:	00413140 	.word	0x00413140
  4075bc:	2040c4bc 	.word	0x2040c4bc
  4075c0:	2040c4d0 	.word	0x2040c4d0
  4075c4:	00413148 	.word	0x00413148
  4075c8:	400e1800 	.word	0x400e1800
  4075cc:	00400929 	.word	0x00400929
			
			else sendDebugString("ERROR: Command not found\n");
  4075d0:	4805      	ldr	r0, [pc, #20]	; (4075e8 <CLItask+0x5a4>)
  4075d2:	4b06      	ldr	r3, [pc, #24]	; (4075ec <CLItask+0x5a8>)
  4075d4:	4798      	blx	r3
			
			sendDebugString("FYP_Hexabot_ATSAMS70_MELLATRON9000>");
  4075d6:	4806      	ldr	r0, [pc, #24]	; (4075f0 <CLItask+0x5ac>)
  4075d8:	4b04      	ldr	r3, [pc, #16]	; (4075ec <CLItask+0x5a8>)
  4075da:	4798      	blx	r3
			}
			memset(CLIbuf,0,100);
  4075dc:	4805      	ldr	r0, [pc, #20]	; (4075f4 <CLItask+0x5b0>)
  4075de:	2100      	movs	r1, #0
  4075e0:	2264      	movs	r2, #100	; 0x64
  4075e2:	4b05      	ldr	r3, [pc, #20]	; (4075f8 <CLItask+0x5b4>)
  4075e4:	4798      	blx	r3
  4075e6:	e54b      	b.n	407080 <CLItask+0x3c>
  4075e8:	00413150 	.word	0x00413150
  4075ec:	0040019d 	.word	0x0040019d
  4075f0:	00412fe4 	.word	0x00412fe4
  4075f4:	2040c628 	.word	0x2040c628
  4075f8:	0040b30d 	.word	0x0040b30d
  4075fc:	00000000 	.word	0x00000000

00407600 <ImageProTask>:
			}
		}
	}
}

void ImageProTask(void* pvParams) {
  407600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407604:	ed2d 8b04 	vpush	{d8-d9}
  407608:	b083      	sub	sp, #12
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - STARTED\n");
  40760a:	485b      	ldr	r0, [pc, #364]	; (407778 <ImageProTask+0x178>)
  40760c:	4c5b      	ldr	r4, [pc, #364]	; (40777c <ImageProTask+0x17c>)
  40760e:	47a0      	blx	r4
	
	ISIsem = xSemaphoreCreateBinary();
  407610:	2001      	movs	r0, #1
  407612:	2100      	movs	r1, #0
  407614:	2203      	movs	r2, #3
  407616:	4b5a      	ldr	r3, [pc, #360]	; (407780 <ImageProTask+0x180>)
  407618:	4798      	blx	r3
  40761a:	4b5a      	ldr	r3, [pc, #360]	; (407784 <ImageProTask+0x184>)
  40761c:	6018      	str	r0, [r3, #0]
 * \param p_isi  Pointer to a ISI instance.
 * \param  flag of interrupt to enable
 */
static inline void isi_enable_interrupt(Isi *p_isi, uint32_t flag)
{
	p_isi->ISI_IER = flag;
  40761e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  407622:	4b59      	ldr	r3, [pc, #356]	; (407788 <ImageProTask+0x188>)
  407624:	62da      	str	r2, [r3, #44]	; 0x2c

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  407626:	4b59      	ldr	r3, [pc, #356]	; (40778c <ImageProTask+0x18c>)
  407628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40762c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  407630:	21e0      	movs	r1, #224	; 0xe0
  407632:	f883 133b 	strb.w	r1, [r3, #827]	; 0x33b
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  407636:	605a      	str	r2, [r3, #4]
	isi_enable_interrupt(ISI,1<<16|1<<17);
	NVIC_ClearPendingIRQ(ISI_IRQn);
	NVIC_SetPriority(ISI_IRQn,7);
	NVIC_EnableIRQ(ISI_IRQn);
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
  407638:	4855      	ldr	r0, [pc, #340]	; (407790 <ImageProTask+0x190>)
  40763a:	47a0      	blx	r4
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
  40763c:	4b55      	ldr	r3, [pc, #340]	; (407794 <ImageProTask+0x194>)
  40763e:	681d      	ldr	r5, [r3, #0]
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  407640:	4f50      	ldr	r7, [pc, #320]	; (407784 <ImageProTask+0x184>)
  407642:	4e55      	ldr	r6, [pc, #340]	; (407798 <ImageProTask+0x198>)
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  407644:	ed9f 9b48 	vldr	d9, [pc, #288]	; 407768 <ImageProTask+0x168>
  407648:	ed9f 8b49 	vldr	d8, [pc, #292]	; 407770 <ImageProTask+0x170>
	sendDebugString("CAMERA PROCESSING TASK INITIALIZATION - FINISHED\n");
	volatile uint16_t * frame0 = (uint16_t*)CAM_FRAME0_ADDR;
	volatile uint16_t * frame1 = intl_frame;
	volatile uint16_t * dif1 = (uint16_t*)0x71000000;
	for(;;) {
		if(xSemaphoreTake(ISIsem,0xFFFF) == pdTRUE) {
  40764c:	2400      	movs	r4, #0
  40764e:	6838      	ldr	r0, [r7, #0]
  407650:	4621      	mov	r1, r4
  407652:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407656:	4623      	mov	r3, r4
  407658:	47b0      	blx	r6
  40765a:	2801      	cmp	r0, #1
  40765c:	d1f7      	bne.n	40764e <ImageProTask+0x4e>
				//do dif here	
				pio_set(LED3);
  40765e:	484f      	ldr	r0, [pc, #316]	; (40779c <ImageProTask+0x19c>)
  407660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  407664:	4b4e      	ldr	r3, [pc, #312]	; (4077a0 <ImageProTask+0x1a0>)
  407666:	4798      	blx	r3
				diffPix=0;
  407668:	2200      	movs	r2, #0
  40766a:	4b4e      	ldr	r3, [pc, #312]	; (4077a4 <ImageProTask+0x1a4>)
  40766c:	601a      	str	r2, [r3, #0]
  40766e:	f04f 40e2 	mov.w	r0, #1895825408	; 0x71000000
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  407672:	f8df 814c 	ldr.w	r8, [pc, #332]	; 4077c0 <ImageProTask+0x1c0>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
						}
						else dif1[i] = 0x0000;
  407676:	4691      	mov	r9, r2
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
							diffPix++;
  407678:	469c      	mov	ip, r3
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  40767a:	f8df e148 	ldr.w	lr, [pc, #328]	; 4077c4 <ImageProTask+0x1c4>
  40767e:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
					tempframe0 = frame0[i];
  407682:	881a      	ldrh	r2, [r3, #0]
  407684:	b292      	uxth	r2, r2
  407686:	f100 410f 	add.w	r1, r0, #2399141888	; 0x8f000000
					tempframe1 = frame1[i];
  40768a:	5a6b      	ldrh	r3, [r5, r1]
  40768c:	b29b      	uxth	r3, r3
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  40768e:	f8d8 a000 	ldr.w	sl, [r8]
  407692:	0adc      	lsrs	r4, r3, #11
  407694:	ebc4 24d2 	rsb	r4, r4, r2, lsr #11
  407698:	4554      	cmp	r4, sl
  40769a:	dc08      	bgt.n	4076ae <ImageProTask+0xae>
  40769c:	f403 64fc 	and.w	r4, r3, #2016	; 0x7e0
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  4076a0:	f3c2 1b45 	ubfx	fp, r2, #5, #6
  4076a4:	ebab 1464 	sub.w	r4, fp, r4, asr #5
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  4076a8:	45a2      	cmp	sl, r4
  4076aa:	db10      	blt.n	4076ce <ImageProTask+0xce>
  4076ac:	e007      	b.n	4076be <ImageProTask+0xbe>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  4076ae:	f3c3 1345 	ubfx	r3, r3, #5, #6
  4076b2:	f3c2 1445 	ubfx	r4, r2, #5, #6
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  4076b6:	1b1b      	subs	r3, r3, r4
  4076b8:	bf18      	it	ne
  4076ba:	2301      	movne	r3, #1
  4076bc:	e015      	b.n	4076ea <ImageProTask+0xea>
  4076be:	f003 0b1f 	and.w	fp, r3, #31
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  4076c2:	2a1e      	cmp	r2, #30
  4076c4:	bf8c      	ite	hi
  4076c6:	2400      	movhi	r4, #0
  4076c8:	f00b 0401 	andls.w	r4, fp, #1
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
  4076cc:	b12c      	cbz	r4, 4076da <ImageProTask+0xda>
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  4076ce:	4053      	eors	r3, r2
  4076d0:	f013 031f 	ands.w	r3, r3, #31
  4076d4:	bf18      	it	ne
  4076d6:	2301      	movne	r3, #1
  4076d8:	e007      	b.n	4076ea <ImageProTask+0xea>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
  4076da:	f002 041f 	and.w	r4, r2, #31
  4076de:	ebcb 0304 	rsb	r3, fp, r4
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
					tempframe0 = frame0[i];
					tempframe1 = frame1[i];
					
					if( (tempframe1&0xF800 > tempframe0&0xF800)?( ((tempframe1&0xF800)>>11) - ((tempframe0&0xF800)>>11) ):( ((tempframe0&0xF800)>>11) - ((tempframe1&0xF800)>>11) ) > CAM_DIF_TSH ||
  4076e2:	459a      	cmp	sl, r3
  4076e4:	bfac      	ite	ge
  4076e6:	2300      	movge	r3, #0
  4076e8:	2301      	movlt	r3, #1
  4076ea:	b133      	cbz	r3, 4076fa <ImageProTask+0xfa>
						(tempframe1&0x07e0 > tempframe0&0x07e0)?( ((tempframe1&0x07e0)>>5) - ((tempframe0&0x07e0)>>5) ):( ((tempframe0&0x07e0)>>5) - ((tempframe1&0x07e0)>>5) ) > CAM_DIF_TSH ||
						(tempframe1&0x001F > tempframe0&0x001F)?( ((tempframe1&0x001F)>>0) - ((tempframe0&0x001F)>>0) ):( ((tempframe0&0x001F)>>0) - ((tempframe1&0x001F)>>0) ) > CAM_DIF_TSH ) {
							dif1[i] = tempframe0;	
  4076ec:	8002      	strh	r2, [r0, #0]
							diffPix++;
  4076ee:	f8dc 3000 	ldr.w	r3, [ip]
  4076f2:	3301      	adds	r3, #1
  4076f4:	f8cc 3000 	str.w	r3, [ip]
  4076f8:	e001      	b.n	4076fe <ImageProTask+0xfe>
						}
						else dif1[i] = 0x0000;
  4076fa:	f8a0 9000 	strh.w	r9, [r0]
						//for(int d =0;d<20;d++) ((volatile uint16_t*)(0x7F000000))[0] = 0x0000; //for(int d =0;d<50;d++)	asm volatile ("nop");
						//((volatile uint8_t*)frame1)[2*i] = (tempframe0&0xFF00)>>8;
						//((volatile uint8_t*)frame1)[2*i+1] = tempframe0&0x00FF;
						frame1[i] = tempframe0;
  4076fe:	526a      	strh	r2, [r5, r1]
  407700:	3002      	adds	r0, #2
				//do dif here	
				pio_set(LED3);
				diffPix=0;
				uint16_t tempframe0 = 0;
				uint16_t tempframe1 = 0;
				for(int i = 0; i<320*240;i++) {
  407702:	4570      	cmp	r0, lr
  407704:	d1bb      	bne.n	40767e <ImageProTask+0x7e>
						frame1[i] = tempframe0;
						
						//for(int d =0;d<20;d++)	asm volatile ("nop");
				}
				//for(int i = 0; i<320*240*2;i++) ((uint8_t*)frame1)[i] = ((uint8_t*)frame0)[i];
				if(VerboseMode){
  407706:	4b28      	ldr	r3, [pc, #160]	; (4077a8 <ImageProTask+0x1a8>)
  407708:	681b      	ldr	r3, [r3, #0]
  40770a:	b323      	cbz	r3, 407756 <ImageProTask+0x156>
					sprintf(buf,"changed pix: %d\nbandwith: %f\%\n",diffPix,( ((float)diffPix*2.0)/(320.00*240.00))*100 );
  40770c:	4b25      	ldr	r3, [pc, #148]	; (4077a4 <ImageProTask+0x1a4>)
  40770e:	f8d3 8000 	ldr.w	r8, [r3]
  407712:	4c26      	ldr	r4, [pc, #152]	; (4077ac <ImageProTask+0x1ac>)
  407714:	ee07 8a90 	vmov	s15, r8
  407718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40771c:	ee17 0a90 	vmov	r0, s15
  407720:	4b23      	ldr	r3, [pc, #140]	; (4077b0 <ImageProTask+0x1b0>)
  407722:	4798      	blx	r3
  407724:	4602      	mov	r2, r0
  407726:	460b      	mov	r3, r1
  407728:	f8df c09c 	ldr.w	ip, [pc, #156]	; 4077c8 <ImageProTask+0x1c8>
  40772c:	47e0      	blx	ip
  40772e:	ec53 2b19 	vmov	r2, r3, d9
  407732:	f8df c098 	ldr.w	ip, [pc, #152]	; 4077cc <ImageProTask+0x1cc>
  407736:	47e0      	blx	ip
  407738:	ec53 2b18 	vmov	r2, r3, d8
  40773c:	f8df c090 	ldr.w	ip, [pc, #144]	; 4077d0 <ImageProTask+0x1d0>
  407740:	47e0      	blx	ip
  407742:	e9cd 0100 	strd	r0, r1, [sp]
  407746:	4620      	mov	r0, r4
  407748:	491a      	ldr	r1, [pc, #104]	; (4077b4 <ImageProTask+0x1b4>)
  40774a:	4642      	mov	r2, r8
  40774c:	4b1a      	ldr	r3, [pc, #104]	; (4077b8 <ImageProTask+0x1b8>)
  40774e:	4798      	blx	r3
					sendDebugString(buf);
  407750:	4620      	mov	r0, r4
  407752:	4b0a      	ldr	r3, [pc, #40]	; (40777c <ImageProTask+0x17c>)
  407754:	4798      	blx	r3
				}		
				pio_clear(LED3);
  407756:	4811      	ldr	r0, [pc, #68]	; (40779c <ImageProTask+0x19c>)
  407758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40775c:	4b17      	ldr	r3, [pc, #92]	; (4077bc <ImageProTask+0x1bc>)
  40775e:	4798      	blx	r3
  407760:	e774      	b.n	40764c <ImageProTask+0x4c>
  407762:	bf00      	nop
  407764:	f3af 8000 	nop.w
  407768:	00000000 	.word	0x00000000
  40776c:	40f2c000 	.word	0x40f2c000
  407770:	00000000 	.word	0x00000000
  407774:	40590000 	.word	0x40590000
  407778:	0041316c 	.word	0x0041316c
  40777c:	0040019d 	.word	0x0040019d
  407780:	00401125 	.word	0x00401125
  407784:	2040c4c0 	.word	0x2040c4c0
  407788:	4004c000 	.word	0x4004c000
  40778c:	e000e100 	.word	0xe000e100
  407790:	004131a0 	.word	0x004131a0
  407794:	2040c6a0 	.word	0x2040c6a0
  407798:	0040155d 	.word	0x0040155d
  40779c:	400e0e00 	.word	0x400e0e00
  4077a0:	004027c9 	.word	0x004027c9
  4077a4:	2040c4d8 	.word	0x2040c4d8
  4077a8:	2040c4c8 	.word	0x2040c4c8
  4077ac:	2040c68c 	.word	0x2040c68c
  4077b0:	0040a461 	.word	0x0040a461
  4077b4:	004131d4 	.word	0x004131d4
  4077b8:	0040b3d9 	.word	0x0040b3d9
  4077bc:	004027cd 	.word	0x004027cd
  4077c0:	204000a8 	.word	0x204000a8
  4077c4:	71025800 	.word	0x71025800
  4077c8:	0040a1a5 	.word	0x0040a1a5
  4077cc:	0040a75d 	.word	0x0040a75d
  4077d0:	0040a509 	.word	0x0040a509

004077d4 <main>:
//semaphores!
SemaphoreHandle_t ISIsem = NULL;
SemaphoreHandle_t UARTsem = NULL;

int main (void)
{
  4077d4:	b570      	push	{r4, r5, r6, lr}
  4077d6:	b084      	sub	sp, #16
		
	
	board_init();
  4077d8:	4b22      	ldr	r3, [pc, #136]	; (407864 <main+0x90>)
  4077da:	4798      	blx	r3
	sendDebugString("BOARD INITIALIZATION - FINISHED\n");
  4077dc:	4822      	ldr	r0, [pc, #136]	; (407868 <main+0x94>)
  4077de:	4d23      	ldr	r5, [pc, #140]	; (40786c <main+0x98>)
  4077e0:	47a8      	blx	r5
	intl_frame = (uint16_t*)malloc(240*320*2); //assign
  4077e2:	f44f 3016 	mov.w	r0, #153600	; 0x25800
  4077e6:	4b22      	ldr	r3, [pc, #136]	; (407870 <main+0x9c>)
  4077e8:	4798      	blx	r3
  4077ea:	4b22      	ldr	r3, [pc, #136]	; (407874 <main+0xa0>)
  4077ec:	6018      	str	r0, [r3, #0]
	//SvoCal = (float*)malloc(sizeof(float)*2*18);
	
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	//for(int i = 0;i<36;i++) SvoCal[i] = 0;
	
	sendDebugString("RTOS TASK INITIALIZATION - STARTED\n");
  4077ee:	4822      	ldr	r0, [pc, #136]	; (407878 <main+0xa4>)
  4077f0:	47a8      	blx	r5
	
	xTaskCreate(vTask1,"TASK1",400,NULL,10,NULL);
  4077f2:	230a      	movs	r3, #10
  4077f4:	9300      	str	r3, [sp, #0]
  4077f6:	2400      	movs	r4, #0
  4077f8:	9401      	str	r4, [sp, #4]
  4077fa:	9402      	str	r4, [sp, #8]
  4077fc:	9403      	str	r4, [sp, #12]
  4077fe:	481f      	ldr	r0, [pc, #124]	; (40787c <main+0xa8>)
  407800:	491f      	ldr	r1, [pc, #124]	; (407880 <main+0xac>)
  407802:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407806:	4623      	mov	r3, r4
  407808:	4e1e      	ldr	r6, [pc, #120]	; (407884 <main+0xb0>)
  40780a:	47b0      	blx	r6
	xTaskCreate(LegControlTask,"LEGCTRLTASK",1600,NULL,4,NULL);
  40780c:	2304      	movs	r3, #4
  40780e:	9300      	str	r3, [sp, #0]
  407810:	9401      	str	r4, [sp, #4]
  407812:	9402      	str	r4, [sp, #8]
  407814:	9403      	str	r4, [sp, #12]
  407816:	481c      	ldr	r0, [pc, #112]	; (407888 <main+0xb4>)
  407818:	491c      	ldr	r1, [pc, #112]	; (40788c <main+0xb8>)
  40781a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  40781e:	4623      	mov	r3, r4
  407820:	47b0      	blx	r6
	xTaskCreate(ImageProTask,"IMGTASK",400,NULL,3,NULL);
  407822:	2303      	movs	r3, #3
  407824:	9300      	str	r3, [sp, #0]
  407826:	9401      	str	r4, [sp, #4]
  407828:	9402      	str	r4, [sp, #8]
  40782a:	9403      	str	r4, [sp, #12]
  40782c:	4818      	ldr	r0, [pc, #96]	; (407890 <main+0xbc>)
  40782e:	4919      	ldr	r1, [pc, #100]	; (407894 <main+0xc0>)
  407830:	f44f 72c8 	mov.w	r2, #400	; 0x190
  407834:	4623      	mov	r3, r4
  407836:	47b0      	blx	r6
	xTaskCreate(CLItask,"CLITASK",1600,NULL,5,NULL);
  407838:	2305      	movs	r3, #5
  40783a:	9300      	str	r3, [sp, #0]
  40783c:	9401      	str	r4, [sp, #4]
  40783e:	9402      	str	r4, [sp, #8]
  407840:	9403      	str	r4, [sp, #12]
  407842:	4815      	ldr	r0, [pc, #84]	; (407898 <main+0xc4>)
  407844:	4915      	ldr	r1, [pc, #84]	; (40789c <main+0xc8>)
  407846:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  40784a:	4623      	mov	r3, r4
  40784c:	47b0      	blx	r6
	
	sendDebugString("RTOS TASK INITIALIZATION - FINISHED\n");
  40784e:	4814      	ldr	r0, [pc, #80]	; (4078a0 <main+0xcc>)
  407850:	47a8      	blx	r5
	
	sendDebugString("STARTING RTOS\n");
  407852:	4814      	ldr	r0, [pc, #80]	; (4078a4 <main+0xd0>)
  407854:	47a8      	blx	r5
	vTaskStartScheduler();
  407856:	4b14      	ldr	r3, [pc, #80]	; (4078a8 <main+0xd4>)
  407858:	4798      	blx	r3
	sendDebugString("RTOS HAS RETURNED. THIS SHOULD EVER HAPPEN. EXTREME ERROR\n");
  40785a:	4814      	ldr	r0, [pc, #80]	; (4078ac <main+0xd8>)
  40785c:	47a8      	blx	r5
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  40785e:	4620      	mov	r0, r4
  407860:	b004      	add	sp, #16
  407862:	bd70      	pop	{r4, r5, r6, pc}
  407864:	00402dad 	.word	0x00402dad
  407868:	004131f4 	.word	0x004131f4
  40786c:	0040019d 	.word	0x0040019d
  407870:	0040ac71 	.word	0x0040ac71
  407874:	2040c6a0 	.word	0x2040c6a0
  407878:	00413218 	.word	0x00413218
  40787c:	00406af9 	.word	0x00406af9
  407880:	0041323c 	.word	0x0041323c
  407884:	00401829 	.word	0x00401829
  407888:	00406c6d 	.word	0x00406c6d
  40788c:	00413244 	.word	0x00413244
  407890:	00407601 	.word	0x00407601
  407894:	00413250 	.word	0x00413250
  407898:	00407045 	.word	0x00407045
  40789c:	00413258 	.word	0x00413258
  4078a0:	00413260 	.word	0x00413260
  4078a4:	00413288 	.word	0x00413288
  4078a8:	00401a51 	.word	0x00401a51
  4078ac:	00413298 	.word	0x00413298

004078b0 <ISI_Handler>:
	   ######################################
			 	INTERUPT HANDLERS
	   ######################################
	   ###################################### */
	
void ISI_Handler(void) {
  4078b0:	b508      	push	{r3, lr}
	uint32_t status,imr;
	status = ISI->ISI_SR;
  4078b2:	4b09      	ldr	r3, [pc, #36]	; (4078d8 <ISI_Handler+0x28>)
  4078b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	imr = ISI->ISI_IMR;
  4078b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	//pio_set(LED3);
	isi_frames_done++;
  4078b8:	4a08      	ldr	r2, [pc, #32]	; (4078dc <ISI_Handler+0x2c>)
  4078ba:	6813      	ldr	r3, [r2, #0]
  4078bc:	3301      	adds	r3, #1
  4078be:	6013      	str	r3, [r2, #0]
	if(isi_frames_done >= 1) {
  4078c0:	2b00      	cmp	r3, #0
  4078c2:	dd07      	ble.n	4078d4 <ISI_Handler+0x24>
		xSemaphoreGiveFromISR(ISIsem,NULL);
  4078c4:	4b06      	ldr	r3, [pc, #24]	; (4078e0 <ISI_Handler+0x30>)
  4078c6:	6818      	ldr	r0, [r3, #0]
  4078c8:	2100      	movs	r1, #0
  4078ca:	4b06      	ldr	r3, [pc, #24]	; (4078e4 <ISI_Handler+0x34>)
  4078cc:	4798      	blx	r3
		isi_frames_done = 0;
  4078ce:	2200      	movs	r2, #0
  4078d0:	4b02      	ldr	r3, [pc, #8]	; (4078dc <ISI_Handler+0x2c>)
  4078d2:	601a      	str	r2, [r3, #0]
  4078d4:	bd08      	pop	{r3, pc}
  4078d6:	bf00      	nop
  4078d8:	4004c000 	.word	0x4004c000
  4078dc:	2040c4dc 	.word	0x2040c4dc
  4078e0:	2040c4c0 	.word	0x2040c4c0
  4078e4:	0040147d 	.word	0x0040147d

004078e8 <UART4_Handler>:
	}
}


void UART4_Handler(void) {
  4078e8:	b500      	push	{lr}
  4078ea:	b083      	sub	sp, #12
	uint32_t imr = ISI->ISI_IMR;
  4078ec:	4b16      	ldr	r3, [pc, #88]	; (407948 <UART4_Handler+0x60>)
  4078ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	char temp;
	uart_read(UART4,&temp);
  4078f0:	4816      	ldr	r0, [pc, #88]	; (40794c <UART4_Handler+0x64>)
  4078f2:	f10d 0107 	add.w	r1, sp, #7
  4078f6:	4b16      	ldr	r3, [pc, #88]	; (407950 <UART4_Handler+0x68>)
  4078f8:	4798      	blx	r3
	CLIbuf[CLIbufIndex] = temp;
  4078fa:	4a16      	ldr	r2, [pc, #88]	; (407954 <UART4_Handler+0x6c>)
  4078fc:	6813      	ldr	r3, [r2, #0]
  4078fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
  407902:	4915      	ldr	r1, [pc, #84]	; (407958 <UART4_Handler+0x70>)
  407904:	54c8      	strb	r0, [r1, r3]
	CLIbufIndex++;
  407906:	3301      	adds	r3, #1
  407908:	6013      	str	r3, [r2, #0]
	
	if(UART_Ctrl_EN) {
  40790a:	4b14      	ldr	r3, [pc, #80]	; (40795c <UART4_Handler+0x74>)
  40790c:	681b      	ldr	r3, [r3, #0]
  40790e:	b16b      	cbz	r3, 40792c <UART4_Handler+0x44>
		UART_Ctrl_Cnt++;
  407910:	4a13      	ldr	r2, [pc, #76]	; (407960 <UART4_Handler+0x78>)
  407912:	6813      	ldr	r3, [r2, #0]
  407914:	3301      	adds	r3, #1
  407916:	6013      	str	r3, [r2, #0]
		if(UART_Ctrl_Max <= UART_Ctrl_Cnt) {
  407918:	4a12      	ldr	r2, [pc, #72]	; (407964 <UART4_Handler+0x7c>)
  40791a:	6812      	ldr	r2, [r2, #0]
  40791c:	4293      	cmp	r3, r2
  40791e:	db0f      	blt.n	407940 <UART4_Handler+0x58>
			xSemaphoreGiveFromISR(UARTsem,NULL);
  407920:	4b11      	ldr	r3, [pc, #68]	; (407968 <UART4_Handler+0x80>)
  407922:	6818      	ldr	r0, [r3, #0]
  407924:	2100      	movs	r1, #0
  407926:	4b11      	ldr	r3, [pc, #68]	; (40796c <UART4_Handler+0x84>)
  407928:	4798      	blx	r3
  40792a:	e009      	b.n	407940 <UART4_Handler+0x58>
		}
	}
	else {
	if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
  40792c:	4b10      	ldr	r3, [pc, #64]	; (407970 <UART4_Handler+0x88>)
  40792e:	b2db      	uxtb	r3, r3
  407930:	f88d 3007 	strb.w	r3, [sp, #7]
  407934:	b123      	cbz	r3, 407940 <UART4_Handler+0x58>
  407936:	4b0c      	ldr	r3, [pc, #48]	; (407968 <UART4_Handler+0x80>)
  407938:	6818      	ldr	r0, [r3, #0]
  40793a:	2100      	movs	r1, #0
  40793c:	4b0b      	ldr	r3, [pc, #44]	; (40796c <UART4_Handler+0x84>)
  40793e:	4798      	blx	r3
	}
}
  407940:	b003      	add	sp, #12
  407942:	f85d fb04 	ldr.w	pc, [sp], #4
  407946:	bf00      	nop
  407948:	4004c000 	.word	0x4004c000
  40794c:	400e1e00 	.word	0x400e1e00
  407950:	00402d99 	.word	0x00402d99
  407954:	2040c4d4 	.word	0x2040c4d4
  407958:	2040c628 	.word	0x2040c628
  40795c:	2040c4bc 	.word	0x2040c4bc
  407960:	2040c4cc 	.word	0x2040c4cc
  407964:	2040c4d0 	.word	0x2040c4d0
  407968:	2040c4e0 	.word	0x2040c4e0
  40796c:	0040147d 	.word	0x0040147d
  407970:	00412d04 	.word	0x00412d04

00407974 <cos>:
  407974:	4a1f      	ldr	r2, [pc, #124]	; (4079f4 <cos+0x80>)
  407976:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40797a:	4293      	cmp	r3, r2
  40797c:	b530      	push	{r4, r5, lr}
  40797e:	b087      	sub	sp, #28
  407980:	dd1b      	ble.n	4079ba <cos+0x46>
  407982:	4a1d      	ldr	r2, [pc, #116]	; (4079f8 <cos+0x84>)
  407984:	4293      	cmp	r3, r2
  407986:	dd05      	ble.n	407994 <cos+0x20>
  407988:	4602      	mov	r2, r0
  40798a:	460b      	mov	r3, r1
  40798c:	f002 fc08 	bl	40a1a0 <__aeabi_dsub>
  407990:	b007      	add	sp, #28
  407992:	bd30      	pop	{r4, r5, pc}
  407994:	aa02      	add	r2, sp, #8
  407996:	f001 f893 	bl	408ac0 <__ieee754_rem_pio2>
  40799a:	f000 0303 	and.w	r3, r0, #3
  40799e:	2b01      	cmp	r3, #1
  4079a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4079a4:	d016      	beq.n	4079d4 <cos+0x60>
  4079a6:	2b02      	cmp	r3, #2
  4079a8:	d00d      	beq.n	4079c6 <cos+0x52>
  4079aa:	b1eb      	cbz	r3, 4079e8 <cos+0x74>
  4079ac:	2401      	movs	r4, #1
  4079ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4079b2:	9400      	str	r4, [sp, #0]
  4079b4:	f002 f874 	bl	409aa0 <__kernel_sin>
  4079b8:	e7ea      	b.n	407990 <cos+0x1c>
  4079ba:	2200      	movs	r2, #0
  4079bc:	2300      	movs	r3, #0
  4079be:	f001 fb4b 	bl	409058 <__kernel_cos>
  4079c2:	b007      	add	sp, #28
  4079c4:	bd30      	pop	{r4, r5, pc}
  4079c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4079ca:	f001 fb45 	bl	409058 <__kernel_cos>
  4079ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4079d2:	e7dd      	b.n	407990 <cos+0x1c>
  4079d4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4079d8:	9300      	str	r3, [sp, #0]
  4079da:	4622      	mov	r2, r4
  4079dc:	462b      	mov	r3, r5
  4079de:	f002 f85f 	bl	409aa0 <__kernel_sin>
  4079e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4079e6:	e7d3      	b.n	407990 <cos+0x1c>
  4079e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4079ec:	f001 fb34 	bl	409058 <__kernel_cos>
  4079f0:	e7ce      	b.n	407990 <cos+0x1c>
  4079f2:	bf00      	nop
  4079f4:	3fe921fb 	.word	0x3fe921fb
  4079f8:	7fefffff 	.word	0x7fefffff

004079fc <sin>:
  4079fc:	4a22      	ldr	r2, [pc, #136]	; (407a88 <sin+0x8c>)
  4079fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407a02:	4293      	cmp	r3, r2
  407a04:	b530      	push	{r4, r5, lr}
  407a06:	b087      	sub	sp, #28
  407a08:	dd1b      	ble.n	407a42 <sin+0x46>
  407a0a:	4a20      	ldr	r2, [pc, #128]	; (407a8c <sin+0x90>)
  407a0c:	4293      	cmp	r3, r2
  407a0e:	dd05      	ble.n	407a1c <sin+0x20>
  407a10:	4602      	mov	r2, r0
  407a12:	460b      	mov	r3, r1
  407a14:	f002 fbc4 	bl	40a1a0 <__aeabi_dsub>
  407a18:	b007      	add	sp, #28
  407a1a:	bd30      	pop	{r4, r5, pc}
  407a1c:	aa02      	add	r2, sp, #8
  407a1e:	f001 f84f 	bl	408ac0 <__ieee754_rem_pio2>
  407a22:	f000 0003 	and.w	r0, r0, #3
  407a26:	2801      	cmp	r0, #1
  407a28:	d01e      	beq.n	407a68 <sin+0x6c>
  407a2a:	2802      	cmp	r0, #2
  407a2c:	d011      	beq.n	407a52 <sin+0x56>
  407a2e:	b310      	cbz	r0, 407a76 <sin+0x7a>
  407a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407a34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407a38:	f001 fb0e 	bl	409058 <__kernel_cos>
  407a3c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407a40:	e7ea      	b.n	407a18 <sin+0x1c>
  407a42:	2400      	movs	r4, #0
  407a44:	2200      	movs	r2, #0
  407a46:	2300      	movs	r3, #0
  407a48:	9400      	str	r4, [sp, #0]
  407a4a:	f002 f829 	bl	409aa0 <__kernel_sin>
  407a4e:	b007      	add	sp, #28
  407a50:	bd30      	pop	{r4, r5, pc}
  407a52:	2401      	movs	r4, #1
  407a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407a5c:	9400      	str	r4, [sp, #0]
  407a5e:	f002 f81f 	bl	409aa0 <__kernel_sin>
  407a62:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  407a66:	e7d7      	b.n	407a18 <sin+0x1c>
  407a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407a70:	f001 faf2 	bl	409058 <__kernel_cos>
  407a74:	e7d0      	b.n	407a18 <sin+0x1c>
  407a76:	2401      	movs	r4, #1
  407a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407a7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  407a80:	9400      	str	r4, [sp, #0]
  407a82:	f002 f80d 	bl	409aa0 <__kernel_sin>
  407a86:	e7c7      	b.n	407a18 <sin+0x1c>
  407a88:	3fe921fb 	.word	0x3fe921fb
  407a8c:	7fefffff 	.word	0x7fefffff

00407a90 <lroundf>:
  407a90:	b510      	push	{r4, lr}
  407a92:	f3c0 54c7 	ubfx	r4, r0, #23, #8
  407a96:	2800      	cmp	r0, #0
  407a98:	f1a4 027f 	sub.w	r2, r4, #127	; 0x7f
  407a9c:	bfb4      	ite	lt
  407a9e:	f04f 31ff 	movlt.w	r1, #4294967295
  407aa2:	2101      	movge	r1, #1
  407aa4:	2a1e      	cmp	r2, #30
  407aa6:	dc0c      	bgt.n	407ac2 <lroundf+0x32>
  407aa8:	2a00      	cmp	r2, #0
  407aaa:	db17      	blt.n	407adc <lroundf+0x4c>
  407aac:	f3c0 0316 	ubfx	r3, r0, #0, #23
  407ab0:	2a16      	cmp	r2, #22
  407ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  407ab6:	dd07      	ble.n	407ac8 <lroundf+0x38>
  407ab8:	3c96      	subs	r4, #150	; 0x96
  407aba:	40a3      	lsls	r3, r4
  407abc:	fb01 f003 	mul.w	r0, r1, r3
  407ac0:	bd10      	pop	{r4, pc}
  407ac2:	f003 f833 	bl	40ab2c <__aeabi_f2iz>
  407ac6:	bd10      	pop	{r4, pc}
  407ac8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  407acc:	f1c2 0417 	rsb	r4, r2, #23
  407ad0:	4110      	asrs	r0, r2
  407ad2:	4403      	add	r3, r0
  407ad4:	40e3      	lsrs	r3, r4
  407ad6:	fb01 f003 	mul.w	r0, r1, r3
  407ada:	bd10      	pop	{r4, pc}
  407adc:	3201      	adds	r2, #1
  407ade:	bf0c      	ite	eq
  407ae0:	4608      	moveq	r0, r1
  407ae2:	2000      	movne	r0, #0
  407ae4:	bd10      	pop	{r4, pc}
  407ae6:	bf00      	nop

00407ae8 <acos>:
  407ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407aec:	f8df 809c 	ldr.w	r8, [pc, #156]	; 407b8c <acos+0xa4>
  407af0:	b08a      	sub	sp, #40	; 0x28
  407af2:	4606      	mov	r6, r0
  407af4:	460f      	mov	r7, r1
  407af6:	f000 f95b 	bl	407db0 <__ieee754_acos>
  407afa:	f998 3000 	ldrsb.w	r3, [r8]
  407afe:	4604      	mov	r4, r0
  407b00:	460d      	mov	r5, r1
  407b02:	3301      	adds	r3, #1
  407b04:	d004      	beq.n	407b10 <acos+0x28>
  407b06:	4630      	mov	r0, r6
  407b08:	4639      	mov	r1, r7
  407b0a:	f002 fa91 	bl	40a030 <__fpclassifyd>
  407b0e:	b920      	cbnz	r0, 407b1a <acos+0x32>
  407b10:	4620      	mov	r0, r4
  407b12:	4629      	mov	r1, r5
  407b14:	b00a      	add	sp, #40	; 0x28
  407b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b1a:	4630      	mov	r0, r6
  407b1c:	4639      	mov	r1, r7
  407b1e:	f002 f9f9 	bl	409f14 <fabs>
  407b22:	2200      	movs	r2, #0
  407b24:	4b16      	ldr	r3, [pc, #88]	; (407b80 <acos+0x98>)
  407b26:	f002 ff7f 	bl	40aa28 <__aeabi_dcmpgt>
  407b2a:	2800      	cmp	r0, #0
  407b2c:	d0f0      	beq.n	407b10 <acos+0x28>
  407b2e:	2300      	movs	r3, #0
  407b30:	2101      	movs	r1, #1
  407b32:	4a14      	ldr	r2, [pc, #80]	; (407b84 <acos+0x9c>)
  407b34:	4814      	ldr	r0, [pc, #80]	; (407b88 <acos+0xa0>)
  407b36:	9308      	str	r3, [sp, #32]
  407b38:	e88d 0006 	stmia.w	sp, {r1, r2}
  407b3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  407b40:	e9cd 6702 	strd	r6, r7, [sp, #8]
  407b44:	f002 fa98 	bl	40a078 <nan>
  407b48:	f998 3000 	ldrsb.w	r3, [r8]
  407b4c:	2b02      	cmp	r3, #2
  407b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407b52:	d00a      	beq.n	407b6a <acos+0x82>
  407b54:	4668      	mov	r0, sp
  407b56:	f002 fa8d 	bl	40a074 <matherr>
  407b5a:	b130      	cbz	r0, 407b6a <acos+0x82>
  407b5c:	9b08      	ldr	r3, [sp, #32]
  407b5e:	b94b      	cbnz	r3, 407b74 <acos+0x8c>
  407b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407b64:	b00a      	add	sp, #40	; 0x28
  407b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b6a:	f003 f82b 	bl	40abc4 <__errno>
  407b6e:	2321      	movs	r3, #33	; 0x21
  407b70:	6003      	str	r3, [r0, #0]
  407b72:	e7f3      	b.n	407b5c <acos+0x74>
  407b74:	f003 f826 	bl	40abc4 <__errno>
  407b78:	9b08      	ldr	r3, [sp, #32]
  407b7a:	6003      	str	r3, [r0, #0]
  407b7c:	e7f0      	b.n	407b60 <acos+0x78>
  407b7e:	bf00      	nop
  407b80:	3ff00000 	.word	0x3ff00000
  407b84:	004132d4 	.word	0x004132d4
  407b88:	00412cb0 	.word	0x00412cb0
  407b8c:	204000ac 	.word	0x204000ac

00407b90 <asin>:
  407b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b94:	f8df 809c 	ldr.w	r8, [pc, #156]	; 407c34 <asin+0xa4>
  407b98:	b08a      	sub	sp, #40	; 0x28
  407b9a:	4606      	mov	r6, r0
  407b9c:	460f      	mov	r7, r1
  407b9e:	f000 fb63 	bl	408268 <__ieee754_asin>
  407ba2:	f998 3000 	ldrsb.w	r3, [r8]
  407ba6:	4604      	mov	r4, r0
  407ba8:	460d      	mov	r5, r1
  407baa:	3301      	adds	r3, #1
  407bac:	d004      	beq.n	407bb8 <asin+0x28>
  407bae:	4630      	mov	r0, r6
  407bb0:	4639      	mov	r1, r7
  407bb2:	f002 fa3d 	bl	40a030 <__fpclassifyd>
  407bb6:	b920      	cbnz	r0, 407bc2 <asin+0x32>
  407bb8:	4620      	mov	r0, r4
  407bba:	4629      	mov	r1, r5
  407bbc:	b00a      	add	sp, #40	; 0x28
  407bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bc2:	4630      	mov	r0, r6
  407bc4:	4639      	mov	r1, r7
  407bc6:	f002 f9a5 	bl	409f14 <fabs>
  407bca:	2200      	movs	r2, #0
  407bcc:	4b16      	ldr	r3, [pc, #88]	; (407c28 <asin+0x98>)
  407bce:	f002 ff2b 	bl	40aa28 <__aeabi_dcmpgt>
  407bd2:	2800      	cmp	r0, #0
  407bd4:	d0f0      	beq.n	407bb8 <asin+0x28>
  407bd6:	2300      	movs	r3, #0
  407bd8:	2101      	movs	r1, #1
  407bda:	4a14      	ldr	r2, [pc, #80]	; (407c2c <asin+0x9c>)
  407bdc:	4814      	ldr	r0, [pc, #80]	; (407c30 <asin+0xa0>)
  407bde:	9308      	str	r3, [sp, #32]
  407be0:	e88d 0006 	stmia.w	sp, {r1, r2}
  407be4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  407be8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  407bec:	f002 fa44 	bl	40a078 <nan>
  407bf0:	f998 3000 	ldrsb.w	r3, [r8]
  407bf4:	2b02      	cmp	r3, #2
  407bf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407bfa:	d00a      	beq.n	407c12 <asin+0x82>
  407bfc:	4668      	mov	r0, sp
  407bfe:	f002 fa39 	bl	40a074 <matherr>
  407c02:	b130      	cbz	r0, 407c12 <asin+0x82>
  407c04:	9b08      	ldr	r3, [sp, #32]
  407c06:	b94b      	cbnz	r3, 407c1c <asin+0x8c>
  407c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407c0c:	b00a      	add	sp, #40	; 0x28
  407c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c12:	f002 ffd7 	bl	40abc4 <__errno>
  407c16:	2321      	movs	r3, #33	; 0x21
  407c18:	6003      	str	r3, [r0, #0]
  407c1a:	e7f3      	b.n	407c04 <asin+0x74>
  407c1c:	f002 ffd2 	bl	40abc4 <__errno>
  407c20:	9b08      	ldr	r3, [sp, #32]
  407c22:	6003      	str	r3, [r0, #0]
  407c24:	e7f0      	b.n	407c08 <asin+0x78>
  407c26:	bf00      	nop
  407c28:	3ff00000 	.word	0x3ff00000
  407c2c:	004132dc 	.word	0x004132dc
  407c30:	00412cb0 	.word	0x00412cb0
  407c34:	204000ac 	.word	0x204000ac

00407c38 <atan2>:
  407c38:	f000 bd46 	b.w	4086c8 <__ieee754_atan2>

00407c3c <fmod>:
  407c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407c40:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 407cf8 <fmod+0xbc>
  407c44:	b08a      	sub	sp, #40	; 0x28
  407c46:	461f      	mov	r7, r3
  407c48:	4680      	mov	r8, r0
  407c4a:	4689      	mov	r9, r1
  407c4c:	4616      	mov	r6, r2
  407c4e:	f000 fe13 	bl	408878 <__ieee754_fmod>
  407c52:	f99a 3000 	ldrsb.w	r3, [sl]
  407c56:	4604      	mov	r4, r0
  407c58:	460d      	mov	r5, r1
  407c5a:	3301      	adds	r3, #1
  407c5c:	d004      	beq.n	407c68 <fmod+0x2c>
  407c5e:	4630      	mov	r0, r6
  407c60:	4639      	mov	r1, r7
  407c62:	f002 f9e5 	bl	40a030 <__fpclassifyd>
  407c66:	b920      	cbnz	r0, 407c72 <fmod+0x36>
  407c68:	4620      	mov	r0, r4
  407c6a:	4629      	mov	r1, r5
  407c6c:	b00a      	add	sp, #40	; 0x28
  407c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c72:	4640      	mov	r0, r8
  407c74:	4649      	mov	r1, r9
  407c76:	f002 f9db 	bl	40a030 <__fpclassifyd>
  407c7a:	2800      	cmp	r0, #0
  407c7c:	d0f4      	beq.n	407c68 <fmod+0x2c>
  407c7e:	2300      	movs	r3, #0
  407c80:	4630      	mov	r0, r6
  407c82:	4639      	mov	r1, r7
  407c84:	2200      	movs	r2, #0
  407c86:	f002 fea7 	bl	40a9d8 <__aeabi_dcmpeq>
  407c8a:	f04f 0301 	mov.w	r3, #1
  407c8e:	b900      	cbnz	r0, 407c92 <fmod+0x56>
  407c90:	4603      	mov	r3, r0
  407c92:	f013 0fff 	tst.w	r3, #255	; 0xff
  407c96:	d0e7      	beq.n	407c68 <fmod+0x2c>
  407c98:	2101      	movs	r1, #1
  407c9a:	4a16      	ldr	r2, [pc, #88]	; (407cf4 <fmod+0xb8>)
  407c9c:	2300      	movs	r3, #0
  407c9e:	f89a 4000 	ldrb.w	r4, [sl]
  407ca2:	e88d 0006 	stmia.w	sp, {r1, r2}
  407ca6:	9308      	str	r3, [sp, #32]
  407ca8:	e9cd 8902 	strd	r8, r9, [sp, #8]
  407cac:	e9cd 6704 	strd	r6, r7, [sp, #16]
  407cb0:	b194      	cbz	r4, 407cd8 <fmod+0x9c>
  407cb2:	2000      	movs	r0, #0
  407cb4:	2100      	movs	r1, #0
  407cb6:	4602      	mov	r2, r0
  407cb8:	460b      	mov	r3, r1
  407cba:	f002 fd4f 	bl	40a75c <__aeabi_ddiv>
  407cbe:	2c02      	cmp	r4, #2
  407cc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407cc4:	d10a      	bne.n	407cdc <fmod+0xa0>
  407cc6:	f002 ff7d 	bl	40abc4 <__errno>
  407cca:	2321      	movs	r3, #33	; 0x21
  407ccc:	6003      	str	r3, [r0, #0]
  407cce:	9b08      	ldr	r3, [sp, #32]
  407cd0:	b953      	cbnz	r3, 407ce8 <fmod+0xac>
  407cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407cd6:	e7c9      	b.n	407c6c <fmod+0x30>
  407cd8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  407cdc:	4668      	mov	r0, sp
  407cde:	f002 f9c9 	bl	40a074 <matherr>
  407ce2:	2800      	cmp	r0, #0
  407ce4:	d1f3      	bne.n	407cce <fmod+0x92>
  407ce6:	e7ee      	b.n	407cc6 <fmod+0x8a>
  407ce8:	f002 ff6c 	bl	40abc4 <__errno>
  407cec:	9b08      	ldr	r3, [sp, #32]
  407cee:	6003      	str	r3, [r0, #0]
  407cf0:	e7ef      	b.n	407cd2 <fmod+0x96>
  407cf2:	bf00      	nop
  407cf4:	004132e4 	.word	0x004132e4
  407cf8:	204000ac 	.word	0x204000ac

00407cfc <sqrt>:
  407cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d00:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 407dac <sqrt+0xb0>
  407d04:	b08a      	sub	sp, #40	; 0x28
  407d06:	4606      	mov	r6, r0
  407d08:	460f      	mov	r7, r1
  407d0a:	f001 f8f7 	bl	408efc <__ieee754_sqrt>
  407d0e:	f998 3000 	ldrsb.w	r3, [r8]
  407d12:	4604      	mov	r4, r0
  407d14:	460d      	mov	r5, r1
  407d16:	3301      	adds	r3, #1
  407d18:	d02d      	beq.n	407d76 <sqrt+0x7a>
  407d1a:	4630      	mov	r0, r6
  407d1c:	4639      	mov	r1, r7
  407d1e:	f002 f987 	bl	40a030 <__fpclassifyd>
  407d22:	b340      	cbz	r0, 407d76 <sqrt+0x7a>
  407d24:	2300      	movs	r3, #0
  407d26:	4630      	mov	r0, r6
  407d28:	4639      	mov	r1, r7
  407d2a:	2200      	movs	r2, #0
  407d2c:	f002 fe5e 	bl	40a9ec <__aeabi_dcmplt>
  407d30:	f04f 0301 	mov.w	r3, #1
  407d34:	b900      	cbnz	r0, 407d38 <sqrt+0x3c>
  407d36:	4603      	mov	r3, r0
  407d38:	f013 0fff 	tst.w	r3, #255	; 0xff
  407d3c:	d01b      	beq.n	407d76 <sqrt+0x7a>
  407d3e:	2101      	movs	r1, #1
  407d40:	4a19      	ldr	r2, [pc, #100]	; (407da8 <sqrt+0xac>)
  407d42:	2300      	movs	r3, #0
  407d44:	f898 4000 	ldrb.w	r4, [r8]
  407d48:	e88d 0006 	stmia.w	sp, {r1, r2}
  407d4c:	9308      	str	r3, [sp, #32]
  407d4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  407d52:	e9cd 6702 	strd	r6, r7, [sp, #8]
  407d56:	b99c      	cbnz	r4, 407d80 <sqrt+0x84>
  407d58:	2200      	movs	r2, #0
  407d5a:	2300      	movs	r3, #0
  407d5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  407d60:	4668      	mov	r0, sp
  407d62:	f002 f987 	bl	40a074 <matherr>
  407d66:	b1a8      	cbz	r0, 407d94 <sqrt+0x98>
  407d68:	9b08      	ldr	r3, [sp, #32]
  407d6a:	b9c3      	cbnz	r3, 407d9e <sqrt+0xa2>
  407d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  407d70:	b00a      	add	sp, #40	; 0x28
  407d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d76:	4620      	mov	r0, r4
  407d78:	4629      	mov	r1, r5
  407d7a:	b00a      	add	sp, #40	; 0x28
  407d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407d80:	2000      	movs	r0, #0
  407d82:	2100      	movs	r1, #0
  407d84:	4602      	mov	r2, r0
  407d86:	460b      	mov	r3, r1
  407d88:	f002 fce8 	bl	40a75c <__aeabi_ddiv>
  407d8c:	2c02      	cmp	r4, #2
  407d8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407d92:	d1e5      	bne.n	407d60 <sqrt+0x64>
  407d94:	f002 ff16 	bl	40abc4 <__errno>
  407d98:	2321      	movs	r3, #33	; 0x21
  407d9a:	6003      	str	r3, [r0, #0]
  407d9c:	e7e4      	b.n	407d68 <sqrt+0x6c>
  407d9e:	f002 ff11 	bl	40abc4 <__errno>
  407da2:	9b08      	ldr	r3, [sp, #32]
  407da4:	6003      	str	r3, [r0, #0]
  407da6:	e7e1      	b.n	407d6c <sqrt+0x70>
  407da8:	004132ec 	.word	0x004132ec
  407dac:	204000ac 	.word	0x204000ac

00407db0 <__ieee754_acos>:
  407db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407db4:	4ec6      	ldr	r6, [pc, #792]	; (4080d0 <__ieee754_acos+0x320>)
  407db6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407dba:	460c      	mov	r4, r1
  407dbc:	4605      	mov	r5, r0
  407dbe:	42b3      	cmp	r3, r6
  407dc0:	dd0c      	ble.n	407ddc <__ieee754_acos+0x2c>
  407dc2:	4fc4      	ldr	r7, [pc, #784]	; (4080d4 <__ieee754_acos+0x324>)
  407dc4:	441f      	add	r7, r3
  407dc6:	4603      	mov	r3, r0
  407dc8:	433b      	orrs	r3, r7
  407dca:	f040 80bb 	bne.w	407f44 <__ieee754_acos+0x194>
  407dce:	2900      	cmp	r1, #0
  407dd0:	f340 8144 	ble.w	40805c <__ieee754_acos+0x2ac>
  407dd4:	2000      	movs	r0, #0
  407dd6:	2100      	movs	r1, #0
  407dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ddc:	4ebe      	ldr	r6, [pc, #760]	; (4080d8 <__ieee754_acos+0x328>)
  407dde:	42b3      	cmp	r3, r6
  407de0:	f340 80a8 	ble.w	407f34 <__ieee754_acos+0x184>
  407de4:	2900      	cmp	r1, #0
  407de6:	f2c0 817f 	blt.w	4080e8 <__ieee754_acos+0x338>
  407dea:	4602      	mov	r2, r0
  407dec:	4623      	mov	r3, r4
  407dee:	2000      	movs	r0, #0
  407df0:	49ba      	ldr	r1, [pc, #744]	; (4080dc <__ieee754_acos+0x32c>)
  407df2:	f002 f9d5 	bl	40a1a0 <__aeabi_dsub>
  407df6:	2200      	movs	r2, #0
  407df8:	4bb9      	ldr	r3, [pc, #740]	; (4080e0 <__ieee754_acos+0x330>)
  407dfa:	2600      	movs	r6, #0
  407dfc:	f002 fb84 	bl	40a508 <__aeabi_dmul>
  407e00:	4604      	mov	r4, r0
  407e02:	460d      	mov	r5, r1
  407e04:	f001 f87a 	bl	408efc <__ieee754_sqrt>
  407e08:	4689      	mov	r9, r1
  407e0a:	4680      	mov	r8, r0
  407e0c:	4629      	mov	r1, r5
  407e0e:	4620      	mov	r0, r4
  407e10:	a395      	add	r3, pc, #596	; (adr r3, 408068 <__ieee754_acos+0x2b8>)
  407e12:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e16:	f002 fb77 	bl	40a508 <__aeabi_dmul>
  407e1a:	a395      	add	r3, pc, #596	; (adr r3, 408070 <__ieee754_acos+0x2c0>)
  407e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e20:	f002 f9c0 	bl	40a1a4 <__adddf3>
  407e24:	4622      	mov	r2, r4
  407e26:	462b      	mov	r3, r5
  407e28:	f002 fb6e 	bl	40a508 <__aeabi_dmul>
  407e2c:	a392      	add	r3, pc, #584	; (adr r3, 408078 <__ieee754_acos+0x2c8>)
  407e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e32:	f002 f9b5 	bl	40a1a0 <__aeabi_dsub>
  407e36:	4622      	mov	r2, r4
  407e38:	462b      	mov	r3, r5
  407e3a:	f002 fb65 	bl	40a508 <__aeabi_dmul>
  407e3e:	a390      	add	r3, pc, #576	; (adr r3, 408080 <__ieee754_acos+0x2d0>)
  407e40:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e44:	f002 f9ae 	bl	40a1a4 <__adddf3>
  407e48:	4622      	mov	r2, r4
  407e4a:	462b      	mov	r3, r5
  407e4c:	f002 fb5c 	bl	40a508 <__aeabi_dmul>
  407e50:	a38d      	add	r3, pc, #564	; (adr r3, 408088 <__ieee754_acos+0x2d8>)
  407e52:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e56:	f002 f9a3 	bl	40a1a0 <__aeabi_dsub>
  407e5a:	4622      	mov	r2, r4
  407e5c:	462b      	mov	r3, r5
  407e5e:	f002 fb53 	bl	40a508 <__aeabi_dmul>
  407e62:	a38b      	add	r3, pc, #556	; (adr r3, 408090 <__ieee754_acos+0x2e0>)
  407e64:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e68:	f002 f99c 	bl	40a1a4 <__adddf3>
  407e6c:	4622      	mov	r2, r4
  407e6e:	462b      	mov	r3, r5
  407e70:	f002 fb4a 	bl	40a508 <__aeabi_dmul>
  407e74:	4682      	mov	sl, r0
  407e76:	468b      	mov	fp, r1
  407e78:	4620      	mov	r0, r4
  407e7a:	4629      	mov	r1, r5
  407e7c:	a386      	add	r3, pc, #536	; (adr r3, 408098 <__ieee754_acos+0x2e8>)
  407e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e82:	f002 fb41 	bl	40a508 <__aeabi_dmul>
  407e86:	a386      	add	r3, pc, #536	; (adr r3, 4080a0 <__ieee754_acos+0x2f0>)
  407e88:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e8c:	f002 f988 	bl	40a1a0 <__aeabi_dsub>
  407e90:	4622      	mov	r2, r4
  407e92:	462b      	mov	r3, r5
  407e94:	f002 fb38 	bl	40a508 <__aeabi_dmul>
  407e98:	a383      	add	r3, pc, #524	; (adr r3, 4080a8 <__ieee754_acos+0x2f8>)
  407e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e9e:	f002 f981 	bl	40a1a4 <__adddf3>
  407ea2:	4622      	mov	r2, r4
  407ea4:	462b      	mov	r3, r5
  407ea6:	f002 fb2f 	bl	40a508 <__aeabi_dmul>
  407eaa:	a381      	add	r3, pc, #516	; (adr r3, 4080b0 <__ieee754_acos+0x300>)
  407eac:	e9d3 2300 	ldrd	r2, r3, [r3]
  407eb0:	f002 f976 	bl	40a1a0 <__aeabi_dsub>
  407eb4:	4622      	mov	r2, r4
  407eb6:	462b      	mov	r3, r5
  407eb8:	f002 fb26 	bl	40a508 <__aeabi_dmul>
  407ebc:	2200      	movs	r2, #0
  407ebe:	4b87      	ldr	r3, [pc, #540]	; (4080dc <__ieee754_acos+0x32c>)
  407ec0:	f002 f970 	bl	40a1a4 <__adddf3>
  407ec4:	4602      	mov	r2, r0
  407ec6:	460b      	mov	r3, r1
  407ec8:	4650      	mov	r0, sl
  407eca:	4659      	mov	r1, fp
  407ecc:	f002 fc46 	bl	40a75c <__aeabi_ddiv>
  407ed0:	4642      	mov	r2, r8
  407ed2:	464b      	mov	r3, r9
  407ed4:	f002 fb18 	bl	40a508 <__aeabi_dmul>
  407ed8:	4632      	mov	r2, r6
  407eda:	4682      	mov	sl, r0
  407edc:	468b      	mov	fp, r1
  407ede:	464b      	mov	r3, r9
  407ee0:	4630      	mov	r0, r6
  407ee2:	4649      	mov	r1, r9
  407ee4:	f002 fb10 	bl	40a508 <__aeabi_dmul>
  407ee8:	4602      	mov	r2, r0
  407eea:	460b      	mov	r3, r1
  407eec:	4620      	mov	r0, r4
  407eee:	4629      	mov	r1, r5
  407ef0:	f002 f956 	bl	40a1a0 <__aeabi_dsub>
  407ef4:	4604      	mov	r4, r0
  407ef6:	460d      	mov	r5, r1
  407ef8:	4632      	mov	r2, r6
  407efa:	464b      	mov	r3, r9
  407efc:	4640      	mov	r0, r8
  407efe:	4649      	mov	r1, r9
  407f00:	f002 f950 	bl	40a1a4 <__adddf3>
  407f04:	4602      	mov	r2, r0
  407f06:	460b      	mov	r3, r1
  407f08:	4620      	mov	r0, r4
  407f0a:	4629      	mov	r1, r5
  407f0c:	f002 fc26 	bl	40a75c <__aeabi_ddiv>
  407f10:	4602      	mov	r2, r0
  407f12:	460b      	mov	r3, r1
  407f14:	4650      	mov	r0, sl
  407f16:	4659      	mov	r1, fp
  407f18:	f002 f944 	bl	40a1a4 <__adddf3>
  407f1c:	4602      	mov	r2, r0
  407f1e:	460b      	mov	r3, r1
  407f20:	4630      	mov	r0, r6
  407f22:	4649      	mov	r1, r9
  407f24:	f002 f93e 	bl	40a1a4 <__adddf3>
  407f28:	4602      	mov	r2, r0
  407f2a:	460b      	mov	r3, r1
  407f2c:	f002 f93a 	bl	40a1a4 <__adddf3>
  407f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f34:	4a6b      	ldr	r2, [pc, #428]	; (4080e4 <__ieee754_acos+0x334>)
  407f36:	4293      	cmp	r3, r2
  407f38:	dc0e      	bgt.n	407f58 <__ieee754_acos+0x1a8>
  407f3a:	a15f      	add	r1, pc, #380	; (adr r1, 4080b8 <__ieee754_acos+0x308>)
  407f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
  407f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f44:	4602      	mov	r2, r0
  407f46:	460b      	mov	r3, r1
  407f48:	f002 f92a 	bl	40a1a0 <__aeabi_dsub>
  407f4c:	4602      	mov	r2, r0
  407f4e:	460b      	mov	r3, r1
  407f50:	f002 fc04 	bl	40a75c <__aeabi_ddiv>
  407f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f58:	4602      	mov	r2, r0
  407f5a:	460b      	mov	r3, r1
  407f5c:	f002 fad4 	bl	40a508 <__aeabi_dmul>
  407f60:	4606      	mov	r6, r0
  407f62:	460f      	mov	r7, r1
  407f64:	a340      	add	r3, pc, #256	; (adr r3, 408068 <__ieee754_acos+0x2b8>)
  407f66:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f6a:	f002 facd 	bl	40a508 <__aeabi_dmul>
  407f6e:	a340      	add	r3, pc, #256	; (adr r3, 408070 <__ieee754_acos+0x2c0>)
  407f70:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f74:	f002 f916 	bl	40a1a4 <__adddf3>
  407f78:	4632      	mov	r2, r6
  407f7a:	463b      	mov	r3, r7
  407f7c:	f002 fac4 	bl	40a508 <__aeabi_dmul>
  407f80:	a33d      	add	r3, pc, #244	; (adr r3, 408078 <__ieee754_acos+0x2c8>)
  407f82:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f86:	f002 f90b 	bl	40a1a0 <__aeabi_dsub>
  407f8a:	4632      	mov	r2, r6
  407f8c:	463b      	mov	r3, r7
  407f8e:	f002 fabb 	bl	40a508 <__aeabi_dmul>
  407f92:	a33b      	add	r3, pc, #236	; (adr r3, 408080 <__ieee754_acos+0x2d0>)
  407f94:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f98:	f002 f904 	bl	40a1a4 <__adddf3>
  407f9c:	4632      	mov	r2, r6
  407f9e:	463b      	mov	r3, r7
  407fa0:	f002 fab2 	bl	40a508 <__aeabi_dmul>
  407fa4:	a338      	add	r3, pc, #224	; (adr r3, 408088 <__ieee754_acos+0x2d8>)
  407fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
  407faa:	f002 f8f9 	bl	40a1a0 <__aeabi_dsub>
  407fae:	4632      	mov	r2, r6
  407fb0:	463b      	mov	r3, r7
  407fb2:	f002 faa9 	bl	40a508 <__aeabi_dmul>
  407fb6:	a336      	add	r3, pc, #216	; (adr r3, 408090 <__ieee754_acos+0x2e0>)
  407fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fbc:	f002 f8f2 	bl	40a1a4 <__adddf3>
  407fc0:	4632      	mov	r2, r6
  407fc2:	463b      	mov	r3, r7
  407fc4:	f002 faa0 	bl	40a508 <__aeabi_dmul>
  407fc8:	4680      	mov	r8, r0
  407fca:	4689      	mov	r9, r1
  407fcc:	4630      	mov	r0, r6
  407fce:	4639      	mov	r1, r7
  407fd0:	a331      	add	r3, pc, #196	; (adr r3, 408098 <__ieee754_acos+0x2e8>)
  407fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fd6:	f002 fa97 	bl	40a508 <__aeabi_dmul>
  407fda:	a331      	add	r3, pc, #196	; (adr r3, 4080a0 <__ieee754_acos+0x2f0>)
  407fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fe0:	f002 f8de 	bl	40a1a0 <__aeabi_dsub>
  407fe4:	4632      	mov	r2, r6
  407fe6:	463b      	mov	r3, r7
  407fe8:	f002 fa8e 	bl	40a508 <__aeabi_dmul>
  407fec:	a32e      	add	r3, pc, #184	; (adr r3, 4080a8 <__ieee754_acos+0x2f8>)
  407fee:	e9d3 2300 	ldrd	r2, r3, [r3]
  407ff2:	f002 f8d7 	bl	40a1a4 <__adddf3>
  407ff6:	4632      	mov	r2, r6
  407ff8:	463b      	mov	r3, r7
  407ffa:	f002 fa85 	bl	40a508 <__aeabi_dmul>
  407ffe:	a32c      	add	r3, pc, #176	; (adr r3, 4080b0 <__ieee754_acos+0x300>)
  408000:	e9d3 2300 	ldrd	r2, r3, [r3]
  408004:	f002 f8cc 	bl	40a1a0 <__aeabi_dsub>
  408008:	4632      	mov	r2, r6
  40800a:	463b      	mov	r3, r7
  40800c:	f002 fa7c 	bl	40a508 <__aeabi_dmul>
  408010:	2200      	movs	r2, #0
  408012:	4b32      	ldr	r3, [pc, #200]	; (4080dc <__ieee754_acos+0x32c>)
  408014:	f002 f8c6 	bl	40a1a4 <__adddf3>
  408018:	4602      	mov	r2, r0
  40801a:	460b      	mov	r3, r1
  40801c:	4640      	mov	r0, r8
  40801e:	4649      	mov	r1, r9
  408020:	f002 fb9c 	bl	40a75c <__aeabi_ddiv>
  408024:	4602      	mov	r2, r0
  408026:	460b      	mov	r3, r1
  408028:	4628      	mov	r0, r5
  40802a:	4621      	mov	r1, r4
  40802c:	f002 fa6c 	bl	40a508 <__aeabi_dmul>
  408030:	4602      	mov	r2, r0
  408032:	460b      	mov	r3, r1
  408034:	a122      	add	r1, pc, #136	; (adr r1, 4080c0 <__ieee754_acos+0x310>)
  408036:	e9d1 0100 	ldrd	r0, r1, [r1]
  40803a:	f002 f8b1 	bl	40a1a0 <__aeabi_dsub>
  40803e:	4602      	mov	r2, r0
  408040:	460b      	mov	r3, r1
  408042:	4628      	mov	r0, r5
  408044:	4621      	mov	r1, r4
  408046:	f002 f8ab 	bl	40a1a0 <__aeabi_dsub>
  40804a:	4602      	mov	r2, r0
  40804c:	460b      	mov	r3, r1
  40804e:	a11a      	add	r1, pc, #104	; (adr r1, 4080b8 <__ieee754_acos+0x308>)
  408050:	e9d1 0100 	ldrd	r0, r1, [r1]
  408054:	f002 f8a4 	bl	40a1a0 <__aeabi_dsub>
  408058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40805c:	a11a      	add	r1, pc, #104	; (adr r1, 4080c8 <__ieee754_acos+0x318>)
  40805e:	e9d1 0100 	ldrd	r0, r1, [r1]
  408062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408066:	bf00      	nop
  408068:	0dfdf709 	.word	0x0dfdf709
  40806c:	3f023de1 	.word	0x3f023de1
  408070:	7501b288 	.word	0x7501b288
  408074:	3f49efe0 	.word	0x3f49efe0
  408078:	b5688f3b 	.word	0xb5688f3b
  40807c:	3fa48228 	.word	0x3fa48228
  408080:	0e884455 	.word	0x0e884455
  408084:	3fc9c155 	.word	0x3fc9c155
  408088:	03eb6f7d 	.word	0x03eb6f7d
  40808c:	3fd4d612 	.word	0x3fd4d612
  408090:	55555555 	.word	0x55555555
  408094:	3fc55555 	.word	0x3fc55555
  408098:	b12e9282 	.word	0xb12e9282
  40809c:	3fb3b8c5 	.word	0x3fb3b8c5
  4080a0:	1b8d0159 	.word	0x1b8d0159
  4080a4:	3fe6066c 	.word	0x3fe6066c
  4080a8:	9c598ac8 	.word	0x9c598ac8
  4080ac:	40002ae5 	.word	0x40002ae5
  4080b0:	1c8a2d4b 	.word	0x1c8a2d4b
  4080b4:	40033a27 	.word	0x40033a27
  4080b8:	54442d18 	.word	0x54442d18
  4080bc:	3ff921fb 	.word	0x3ff921fb
  4080c0:	33145c07 	.word	0x33145c07
  4080c4:	3c91a626 	.word	0x3c91a626
  4080c8:	54442d18 	.word	0x54442d18
  4080cc:	400921fb 	.word	0x400921fb
  4080d0:	3fefffff 	.word	0x3fefffff
  4080d4:	c0100000 	.word	0xc0100000
  4080d8:	3fdfffff 	.word	0x3fdfffff
  4080dc:	3ff00000 	.word	0x3ff00000
  4080e0:	3fe00000 	.word	0x3fe00000
  4080e4:	3c600000 	.word	0x3c600000
  4080e8:	2200      	movs	r2, #0
  4080ea:	4b5d      	ldr	r3, [pc, #372]	; (408260 <__ieee754_acos+0x4b0>)
  4080ec:	f002 f85a 	bl	40a1a4 <__adddf3>
  4080f0:	2200      	movs	r2, #0
  4080f2:	4b5c      	ldr	r3, [pc, #368]	; (408264 <__ieee754_acos+0x4b4>)
  4080f4:	f002 fa08 	bl	40a508 <__aeabi_dmul>
  4080f8:	4604      	mov	r4, r0
  4080fa:	460d      	mov	r5, r1
  4080fc:	a340      	add	r3, pc, #256	; (adr r3, 408200 <__ieee754_acos+0x450>)
  4080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408102:	f002 fa01 	bl	40a508 <__aeabi_dmul>
  408106:	a340      	add	r3, pc, #256	; (adr r3, 408208 <__ieee754_acos+0x458>)
  408108:	e9d3 2300 	ldrd	r2, r3, [r3]
  40810c:	f002 f84a 	bl	40a1a4 <__adddf3>
  408110:	4622      	mov	r2, r4
  408112:	462b      	mov	r3, r5
  408114:	f002 f9f8 	bl	40a508 <__aeabi_dmul>
  408118:	a33d      	add	r3, pc, #244	; (adr r3, 408210 <__ieee754_acos+0x460>)
  40811a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40811e:	f002 f83f 	bl	40a1a0 <__aeabi_dsub>
  408122:	4622      	mov	r2, r4
  408124:	462b      	mov	r3, r5
  408126:	f002 f9ef 	bl	40a508 <__aeabi_dmul>
  40812a:	a33b      	add	r3, pc, #236	; (adr r3, 408218 <__ieee754_acos+0x468>)
  40812c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408130:	f002 f838 	bl	40a1a4 <__adddf3>
  408134:	4622      	mov	r2, r4
  408136:	462b      	mov	r3, r5
  408138:	f002 f9e6 	bl	40a508 <__aeabi_dmul>
  40813c:	a338      	add	r3, pc, #224	; (adr r3, 408220 <__ieee754_acos+0x470>)
  40813e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408142:	f002 f82d 	bl	40a1a0 <__aeabi_dsub>
  408146:	4622      	mov	r2, r4
  408148:	462b      	mov	r3, r5
  40814a:	f002 f9dd 	bl	40a508 <__aeabi_dmul>
  40814e:	a336      	add	r3, pc, #216	; (adr r3, 408228 <__ieee754_acos+0x478>)
  408150:	e9d3 2300 	ldrd	r2, r3, [r3]
  408154:	f002 f826 	bl	40a1a4 <__adddf3>
  408158:	4622      	mov	r2, r4
  40815a:	462b      	mov	r3, r5
  40815c:	f002 f9d4 	bl	40a508 <__aeabi_dmul>
  408160:	4680      	mov	r8, r0
  408162:	4689      	mov	r9, r1
  408164:	4620      	mov	r0, r4
  408166:	4629      	mov	r1, r5
  408168:	f000 fec8 	bl	408efc <__ieee754_sqrt>
  40816c:	4606      	mov	r6, r0
  40816e:	460f      	mov	r7, r1
  408170:	4620      	mov	r0, r4
  408172:	4629      	mov	r1, r5
  408174:	a32e      	add	r3, pc, #184	; (adr r3, 408230 <__ieee754_acos+0x480>)
  408176:	e9d3 2300 	ldrd	r2, r3, [r3]
  40817a:	f002 f9c5 	bl	40a508 <__aeabi_dmul>
  40817e:	a32e      	add	r3, pc, #184	; (adr r3, 408238 <__ieee754_acos+0x488>)
  408180:	e9d3 2300 	ldrd	r2, r3, [r3]
  408184:	f002 f80c 	bl	40a1a0 <__aeabi_dsub>
  408188:	4622      	mov	r2, r4
  40818a:	462b      	mov	r3, r5
  40818c:	f002 f9bc 	bl	40a508 <__aeabi_dmul>
  408190:	a32b      	add	r3, pc, #172	; (adr r3, 408240 <__ieee754_acos+0x490>)
  408192:	e9d3 2300 	ldrd	r2, r3, [r3]
  408196:	f002 f805 	bl	40a1a4 <__adddf3>
  40819a:	4622      	mov	r2, r4
  40819c:	462b      	mov	r3, r5
  40819e:	f002 f9b3 	bl	40a508 <__aeabi_dmul>
  4081a2:	a329      	add	r3, pc, #164	; (adr r3, 408248 <__ieee754_acos+0x498>)
  4081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081a8:	f001 fffa 	bl	40a1a0 <__aeabi_dsub>
  4081ac:	4622      	mov	r2, r4
  4081ae:	462b      	mov	r3, r5
  4081b0:	f002 f9aa 	bl	40a508 <__aeabi_dmul>
  4081b4:	2200      	movs	r2, #0
  4081b6:	4b2a      	ldr	r3, [pc, #168]	; (408260 <__ieee754_acos+0x4b0>)
  4081b8:	f001 fff4 	bl	40a1a4 <__adddf3>
  4081bc:	4602      	mov	r2, r0
  4081be:	460b      	mov	r3, r1
  4081c0:	4640      	mov	r0, r8
  4081c2:	4649      	mov	r1, r9
  4081c4:	f002 faca 	bl	40a75c <__aeabi_ddiv>
  4081c8:	4632      	mov	r2, r6
  4081ca:	463b      	mov	r3, r7
  4081cc:	f002 f99c 	bl	40a508 <__aeabi_dmul>
  4081d0:	a31f      	add	r3, pc, #124	; (adr r3, 408250 <__ieee754_acos+0x4a0>)
  4081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4081d6:	f001 ffe3 	bl	40a1a0 <__aeabi_dsub>
  4081da:	4602      	mov	r2, r0
  4081dc:	460b      	mov	r3, r1
  4081de:	4630      	mov	r0, r6
  4081e0:	4639      	mov	r1, r7
  4081e2:	f001 ffdf 	bl	40a1a4 <__adddf3>
  4081e6:	4602      	mov	r2, r0
  4081e8:	460b      	mov	r3, r1
  4081ea:	f001 ffdb 	bl	40a1a4 <__adddf3>
  4081ee:	4602      	mov	r2, r0
  4081f0:	460b      	mov	r3, r1
  4081f2:	a119      	add	r1, pc, #100	; (adr r1, 408258 <__ieee754_acos+0x4a8>)
  4081f4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4081f8:	f001 ffd2 	bl	40a1a0 <__aeabi_dsub>
  4081fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408200:	0dfdf709 	.word	0x0dfdf709
  408204:	3f023de1 	.word	0x3f023de1
  408208:	7501b288 	.word	0x7501b288
  40820c:	3f49efe0 	.word	0x3f49efe0
  408210:	b5688f3b 	.word	0xb5688f3b
  408214:	3fa48228 	.word	0x3fa48228
  408218:	0e884455 	.word	0x0e884455
  40821c:	3fc9c155 	.word	0x3fc9c155
  408220:	03eb6f7d 	.word	0x03eb6f7d
  408224:	3fd4d612 	.word	0x3fd4d612
  408228:	55555555 	.word	0x55555555
  40822c:	3fc55555 	.word	0x3fc55555
  408230:	b12e9282 	.word	0xb12e9282
  408234:	3fb3b8c5 	.word	0x3fb3b8c5
  408238:	1b8d0159 	.word	0x1b8d0159
  40823c:	3fe6066c 	.word	0x3fe6066c
  408240:	9c598ac8 	.word	0x9c598ac8
  408244:	40002ae5 	.word	0x40002ae5
  408248:	1c8a2d4b 	.word	0x1c8a2d4b
  40824c:	40033a27 	.word	0x40033a27
  408250:	33145c07 	.word	0x33145c07
  408254:	3c91a626 	.word	0x3c91a626
  408258:	54442d18 	.word	0x54442d18
  40825c:	400921fb 	.word	0x400921fb
  408260:	3ff00000 	.word	0x3ff00000
  408264:	3fe00000 	.word	0x3fe00000

00408268 <__ieee754_asin>:
  408268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40826c:	4bbe      	ldr	r3, [pc, #760]	; (408568 <__ieee754_asin+0x300>)
  40826e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  408272:	b086      	sub	sp, #24
  408274:	460d      	mov	r5, r1
  408276:	429e      	cmp	r6, r3
  408278:	4604      	mov	r4, r0
  40827a:	468a      	mov	sl, r1
  40827c:	dd11      	ble.n	4082a2 <__ieee754_asin+0x3a>
  40827e:	4abb      	ldr	r2, [pc, #748]	; (40856c <__ieee754_asin+0x304>)
  408280:	4603      	mov	r3, r0
  408282:	4432      	add	r2, r6
  408284:	4313      	orrs	r3, r2
  408286:	d022      	beq.n	4082ce <__ieee754_asin+0x66>
  408288:	4602      	mov	r2, r0
  40828a:	460b      	mov	r3, r1
  40828c:	f001 ff88 	bl	40a1a0 <__aeabi_dsub>
  408290:	4602      	mov	r2, r0
  408292:	460b      	mov	r3, r1
  408294:	f002 fa62 	bl	40a75c <__aeabi_ddiv>
  408298:	4604      	mov	r4, r0
  40829a:	4620      	mov	r0, r4
  40829c:	b006      	add	sp, #24
  40829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082a2:	4bb3      	ldr	r3, [pc, #716]	; (408570 <__ieee754_asin+0x308>)
  4082a4:	429e      	cmp	r6, r3
  4082a6:	dc2b      	bgt.n	408300 <__ieee754_asin+0x98>
  4082a8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4082ac:	f280 8168 	bge.w	408580 <__ieee754_asin+0x318>
  4082b0:	a391      	add	r3, pc, #580	; (adr r3, 4084f8 <__ieee754_asin+0x290>)
  4082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082b6:	f001 ff75 	bl	40a1a4 <__adddf3>
  4082ba:	2200      	movs	r2, #0
  4082bc:	4bad      	ldr	r3, [pc, #692]	; (408574 <__ieee754_asin+0x30c>)
  4082be:	f002 fbb3 	bl	40aa28 <__aeabi_dcmpgt>
  4082c2:	b1e8      	cbz	r0, 408300 <__ieee754_asin+0x98>
  4082c4:	4629      	mov	r1, r5
  4082c6:	4620      	mov	r0, r4
  4082c8:	b006      	add	sp, #24
  4082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082ce:	a38c      	add	r3, pc, #560	; (adr r3, 408500 <__ieee754_asin+0x298>)
  4082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082d4:	f002 f918 	bl	40a508 <__aeabi_dmul>
  4082d8:	4606      	mov	r6, r0
  4082da:	460f      	mov	r7, r1
  4082dc:	4620      	mov	r0, r4
  4082de:	4629      	mov	r1, r5
  4082e0:	a389      	add	r3, pc, #548	; (adr r3, 408508 <__ieee754_asin+0x2a0>)
  4082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082e6:	f002 f90f 	bl	40a508 <__aeabi_dmul>
  4082ea:	4602      	mov	r2, r0
  4082ec:	460b      	mov	r3, r1
  4082ee:	4630      	mov	r0, r6
  4082f0:	4639      	mov	r1, r7
  4082f2:	f001 ff57 	bl	40a1a4 <__adddf3>
  4082f6:	4604      	mov	r4, r0
  4082f8:	4620      	mov	r0, r4
  4082fa:	b006      	add	sp, #24
  4082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408300:	4620      	mov	r0, r4
  408302:	4629      	mov	r1, r5
  408304:	f001 fe06 	bl	409f14 <fabs>
  408308:	4602      	mov	r2, r0
  40830a:	460b      	mov	r3, r1
  40830c:	2000      	movs	r0, #0
  40830e:	4999      	ldr	r1, [pc, #612]	; (408574 <__ieee754_asin+0x30c>)
  408310:	f001 ff46 	bl	40a1a0 <__aeabi_dsub>
  408314:	2200      	movs	r2, #0
  408316:	4b98      	ldr	r3, [pc, #608]	; (408578 <__ieee754_asin+0x310>)
  408318:	f002 f8f6 	bl	40a508 <__aeabi_dmul>
  40831c:	4604      	mov	r4, r0
  40831e:	460d      	mov	r5, r1
  408320:	a37b      	add	r3, pc, #492	; (adr r3, 408510 <__ieee754_asin+0x2a8>)
  408322:	e9d3 2300 	ldrd	r2, r3, [r3]
  408326:	f002 f8ef 	bl	40a508 <__aeabi_dmul>
  40832a:	a37b      	add	r3, pc, #492	; (adr r3, 408518 <__ieee754_asin+0x2b0>)
  40832c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408330:	f001 ff38 	bl	40a1a4 <__adddf3>
  408334:	4622      	mov	r2, r4
  408336:	462b      	mov	r3, r5
  408338:	f002 f8e6 	bl	40a508 <__aeabi_dmul>
  40833c:	a378      	add	r3, pc, #480	; (adr r3, 408520 <__ieee754_asin+0x2b8>)
  40833e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408342:	f001 ff2d 	bl	40a1a0 <__aeabi_dsub>
  408346:	4622      	mov	r2, r4
  408348:	462b      	mov	r3, r5
  40834a:	f002 f8dd 	bl	40a508 <__aeabi_dmul>
  40834e:	a376      	add	r3, pc, #472	; (adr r3, 408528 <__ieee754_asin+0x2c0>)
  408350:	e9d3 2300 	ldrd	r2, r3, [r3]
  408354:	f001 ff26 	bl	40a1a4 <__adddf3>
  408358:	4622      	mov	r2, r4
  40835a:	462b      	mov	r3, r5
  40835c:	f002 f8d4 	bl	40a508 <__aeabi_dmul>
  408360:	a373      	add	r3, pc, #460	; (adr r3, 408530 <__ieee754_asin+0x2c8>)
  408362:	e9d3 2300 	ldrd	r2, r3, [r3]
  408366:	f001 ff1b 	bl	40a1a0 <__aeabi_dsub>
  40836a:	4622      	mov	r2, r4
  40836c:	462b      	mov	r3, r5
  40836e:	f002 f8cb 	bl	40a508 <__aeabi_dmul>
  408372:	a371      	add	r3, pc, #452	; (adr r3, 408538 <__ieee754_asin+0x2d0>)
  408374:	e9d3 2300 	ldrd	r2, r3, [r3]
  408378:	f001 ff14 	bl	40a1a4 <__adddf3>
  40837c:	4622      	mov	r2, r4
  40837e:	462b      	mov	r3, r5
  408380:	f002 f8c2 	bl	40a508 <__aeabi_dmul>
  408384:	a36e      	add	r3, pc, #440	; (adr r3, 408540 <__ieee754_asin+0x2d8>)
  408386:	e9d3 2300 	ldrd	r2, r3, [r3]
  40838a:	e9cd 0100 	strd	r0, r1, [sp]
  40838e:	4620      	mov	r0, r4
  408390:	4629      	mov	r1, r5
  408392:	f002 f8b9 	bl	40a508 <__aeabi_dmul>
  408396:	a36c      	add	r3, pc, #432	; (adr r3, 408548 <__ieee754_asin+0x2e0>)
  408398:	e9d3 2300 	ldrd	r2, r3, [r3]
  40839c:	f001 ff00 	bl	40a1a0 <__aeabi_dsub>
  4083a0:	4622      	mov	r2, r4
  4083a2:	462b      	mov	r3, r5
  4083a4:	f002 f8b0 	bl	40a508 <__aeabi_dmul>
  4083a8:	a369      	add	r3, pc, #420	; (adr r3, 408550 <__ieee754_asin+0x2e8>)
  4083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083ae:	f001 fef9 	bl	40a1a4 <__adddf3>
  4083b2:	4622      	mov	r2, r4
  4083b4:	462b      	mov	r3, r5
  4083b6:	f002 f8a7 	bl	40a508 <__aeabi_dmul>
  4083ba:	a367      	add	r3, pc, #412	; (adr r3, 408558 <__ieee754_asin+0x2f0>)
  4083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083c0:	f001 feee 	bl	40a1a0 <__aeabi_dsub>
  4083c4:	4622      	mov	r2, r4
  4083c6:	462b      	mov	r3, r5
  4083c8:	f002 f89e 	bl	40a508 <__aeabi_dmul>
  4083cc:	4b69      	ldr	r3, [pc, #420]	; (408574 <__ieee754_asin+0x30c>)
  4083ce:	2200      	movs	r2, #0
  4083d0:	f001 fee8 	bl	40a1a4 <__adddf3>
  4083d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4083d8:	4620      	mov	r0, r4
  4083da:	4629      	mov	r1, r5
  4083dc:	f000 fd8e 	bl	408efc <__ieee754_sqrt>
  4083e0:	4b66      	ldr	r3, [pc, #408]	; (40857c <__ieee754_asin+0x314>)
  4083e2:	4680      	mov	r8, r0
  4083e4:	4689      	mov	r9, r1
  4083e6:	429e      	cmp	r6, r3
  4083e8:	dc64      	bgt.n	4084b4 <__ieee754_asin+0x24c>
  4083ea:	4602      	mov	r2, r0
  4083ec:	460b      	mov	r3, r1
  4083ee:	2600      	movs	r6, #0
  4083f0:	460f      	mov	r7, r1
  4083f2:	f001 fed7 	bl	40a1a4 <__adddf3>
  4083f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4083fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4083fe:	e9dd 0100 	ldrd	r0, r1, [sp]
  408402:	f002 f9ab 	bl	40a75c <__aeabi_ddiv>
  408406:	4602      	mov	r2, r0
  408408:	460b      	mov	r3, r1
  40840a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40840e:	f002 f87b 	bl	40a508 <__aeabi_dmul>
  408412:	4632      	mov	r2, r6
  408414:	464b      	mov	r3, r9
  408416:	e9cd 0100 	strd	r0, r1, [sp]
  40841a:	4630      	mov	r0, r6
  40841c:	4649      	mov	r1, r9
  40841e:	f002 f873 	bl	40a508 <__aeabi_dmul>
  408422:	4602      	mov	r2, r0
  408424:	460b      	mov	r3, r1
  408426:	4620      	mov	r0, r4
  408428:	4629      	mov	r1, r5
  40842a:	f001 feb9 	bl	40a1a0 <__aeabi_dsub>
  40842e:	4604      	mov	r4, r0
  408430:	460d      	mov	r5, r1
  408432:	4632      	mov	r2, r6
  408434:	464b      	mov	r3, r9
  408436:	4640      	mov	r0, r8
  408438:	4649      	mov	r1, r9
  40843a:	f001 feb3 	bl	40a1a4 <__adddf3>
  40843e:	4602      	mov	r2, r0
  408440:	460b      	mov	r3, r1
  408442:	4620      	mov	r0, r4
  408444:	4629      	mov	r1, r5
  408446:	f002 f989 	bl	40a75c <__aeabi_ddiv>
  40844a:	4602      	mov	r2, r0
  40844c:	460b      	mov	r3, r1
  40844e:	f001 fea9 	bl	40a1a4 <__adddf3>
  408452:	4602      	mov	r2, r0
  408454:	460b      	mov	r3, r1
  408456:	a12c      	add	r1, pc, #176	; (adr r1, 408508 <__ieee754_asin+0x2a0>)
  408458:	e9d1 0100 	ldrd	r0, r1, [r1]
  40845c:	f001 fea0 	bl	40a1a0 <__aeabi_dsub>
  408460:	4602      	mov	r2, r0
  408462:	460b      	mov	r3, r1
  408464:	e9dd 0100 	ldrd	r0, r1, [sp]
  408468:	f001 fe9a 	bl	40a1a0 <__aeabi_dsub>
  40846c:	4632      	mov	r2, r6
  40846e:	4604      	mov	r4, r0
  408470:	460d      	mov	r5, r1
  408472:	463b      	mov	r3, r7
  408474:	4630      	mov	r0, r6
  408476:	4649      	mov	r1, r9
  408478:	f001 fe94 	bl	40a1a4 <__adddf3>
  40847c:	4602      	mov	r2, r0
  40847e:	460b      	mov	r3, r1
  408480:	a137      	add	r1, pc, #220	; (adr r1, 408560 <__ieee754_asin+0x2f8>)
  408482:	e9d1 0100 	ldrd	r0, r1, [r1]
  408486:	f001 fe8b 	bl	40a1a0 <__aeabi_dsub>
  40848a:	4602      	mov	r2, r0
  40848c:	460b      	mov	r3, r1
  40848e:	4620      	mov	r0, r4
  408490:	4629      	mov	r1, r5
  408492:	f001 fe85 	bl	40a1a0 <__aeabi_dsub>
  408496:	4602      	mov	r2, r0
  408498:	460b      	mov	r3, r1
  40849a:	a131      	add	r1, pc, #196	; (adr r1, 408560 <__ieee754_asin+0x2f8>)
  40849c:	e9d1 0100 	ldrd	r0, r1, [r1]
  4084a0:	f001 fe7e 	bl	40a1a0 <__aeabi_dsub>
  4084a4:	4604      	mov	r4, r0
  4084a6:	f1ba 0f00 	cmp.w	sl, #0
  4084aa:	f73f aef6 	bgt.w	40829a <__ieee754_asin+0x32>
  4084ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4084b2:	e6f2      	b.n	40829a <__ieee754_asin+0x32>
  4084b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4084b8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4084bc:	f002 f94e 	bl	40a75c <__aeabi_ddiv>
  4084c0:	4602      	mov	r2, r0
  4084c2:	460b      	mov	r3, r1
  4084c4:	4640      	mov	r0, r8
  4084c6:	4649      	mov	r1, r9
  4084c8:	f002 f81e 	bl	40a508 <__aeabi_dmul>
  4084cc:	4642      	mov	r2, r8
  4084ce:	464b      	mov	r3, r9
  4084d0:	f001 fe68 	bl	40a1a4 <__adddf3>
  4084d4:	4602      	mov	r2, r0
  4084d6:	460b      	mov	r3, r1
  4084d8:	f001 fe64 	bl	40a1a4 <__adddf3>
  4084dc:	a30a      	add	r3, pc, #40	; (adr r3, 408508 <__ieee754_asin+0x2a0>)
  4084de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4084e2:	f001 fe5d 	bl	40a1a0 <__aeabi_dsub>
  4084e6:	4602      	mov	r2, r0
  4084e8:	460b      	mov	r3, r1
  4084ea:	a105      	add	r1, pc, #20	; (adr r1, 408500 <__ieee754_asin+0x298>)
  4084ec:	e9d1 0100 	ldrd	r0, r1, [r1]
  4084f0:	f001 fe56 	bl	40a1a0 <__aeabi_dsub>
  4084f4:	4604      	mov	r4, r0
  4084f6:	e7d6      	b.n	4084a6 <__ieee754_asin+0x23e>
  4084f8:	8800759c 	.word	0x8800759c
  4084fc:	7e37e43c 	.word	0x7e37e43c
  408500:	54442d18 	.word	0x54442d18
  408504:	3ff921fb 	.word	0x3ff921fb
  408508:	33145c07 	.word	0x33145c07
  40850c:	3c91a626 	.word	0x3c91a626
  408510:	0dfdf709 	.word	0x0dfdf709
  408514:	3f023de1 	.word	0x3f023de1
  408518:	7501b288 	.word	0x7501b288
  40851c:	3f49efe0 	.word	0x3f49efe0
  408520:	b5688f3b 	.word	0xb5688f3b
  408524:	3fa48228 	.word	0x3fa48228
  408528:	0e884455 	.word	0x0e884455
  40852c:	3fc9c155 	.word	0x3fc9c155
  408530:	03eb6f7d 	.word	0x03eb6f7d
  408534:	3fd4d612 	.word	0x3fd4d612
  408538:	55555555 	.word	0x55555555
  40853c:	3fc55555 	.word	0x3fc55555
  408540:	b12e9282 	.word	0xb12e9282
  408544:	3fb3b8c5 	.word	0x3fb3b8c5
  408548:	1b8d0159 	.word	0x1b8d0159
  40854c:	3fe6066c 	.word	0x3fe6066c
  408550:	9c598ac8 	.word	0x9c598ac8
  408554:	40002ae5 	.word	0x40002ae5
  408558:	1c8a2d4b 	.word	0x1c8a2d4b
  40855c:	40033a27 	.word	0x40033a27
  408560:	54442d18 	.word	0x54442d18
  408564:	3fe921fb 	.word	0x3fe921fb
  408568:	3fefffff 	.word	0x3fefffff
  40856c:	c0100000 	.word	0xc0100000
  408570:	3fdfffff 	.word	0x3fdfffff
  408574:	3ff00000 	.word	0x3ff00000
  408578:	3fe00000 	.word	0x3fe00000
  40857c:	3fef3332 	.word	0x3fef3332
  408580:	4602      	mov	r2, r0
  408582:	460b      	mov	r3, r1
  408584:	f001 ffc0 	bl	40a508 <__aeabi_dmul>
  408588:	4606      	mov	r6, r0
  40858a:	460f      	mov	r7, r1
  40858c:	a338      	add	r3, pc, #224	; (adr r3, 408670 <__ieee754_asin+0x408>)
  40858e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408592:	f001 ffb9 	bl	40a508 <__aeabi_dmul>
  408596:	a338      	add	r3, pc, #224	; (adr r3, 408678 <__ieee754_asin+0x410>)
  408598:	e9d3 2300 	ldrd	r2, r3, [r3]
  40859c:	f001 fe02 	bl	40a1a4 <__adddf3>
  4085a0:	4632      	mov	r2, r6
  4085a2:	463b      	mov	r3, r7
  4085a4:	f001 ffb0 	bl	40a508 <__aeabi_dmul>
  4085a8:	a335      	add	r3, pc, #212	; (adr r3, 408680 <__ieee754_asin+0x418>)
  4085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085ae:	f001 fdf7 	bl	40a1a0 <__aeabi_dsub>
  4085b2:	4632      	mov	r2, r6
  4085b4:	463b      	mov	r3, r7
  4085b6:	f001 ffa7 	bl	40a508 <__aeabi_dmul>
  4085ba:	a333      	add	r3, pc, #204	; (adr r3, 408688 <__ieee754_asin+0x420>)
  4085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085c0:	f001 fdf0 	bl	40a1a4 <__adddf3>
  4085c4:	4632      	mov	r2, r6
  4085c6:	463b      	mov	r3, r7
  4085c8:	f001 ff9e 	bl	40a508 <__aeabi_dmul>
  4085cc:	a330      	add	r3, pc, #192	; (adr r3, 408690 <__ieee754_asin+0x428>)
  4085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085d2:	f001 fde5 	bl	40a1a0 <__aeabi_dsub>
  4085d6:	4632      	mov	r2, r6
  4085d8:	463b      	mov	r3, r7
  4085da:	f001 ff95 	bl	40a508 <__aeabi_dmul>
  4085de:	a32e      	add	r3, pc, #184	; (adr r3, 408698 <__ieee754_asin+0x430>)
  4085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085e4:	f001 fdde 	bl	40a1a4 <__adddf3>
  4085e8:	4632      	mov	r2, r6
  4085ea:	463b      	mov	r3, r7
  4085ec:	f001 ff8c 	bl	40a508 <__aeabi_dmul>
  4085f0:	4680      	mov	r8, r0
  4085f2:	4689      	mov	r9, r1
  4085f4:	4630      	mov	r0, r6
  4085f6:	4639      	mov	r1, r7
  4085f8:	a329      	add	r3, pc, #164	; (adr r3, 4086a0 <__ieee754_asin+0x438>)
  4085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4085fe:	f001 ff83 	bl	40a508 <__aeabi_dmul>
  408602:	a329      	add	r3, pc, #164	; (adr r3, 4086a8 <__ieee754_asin+0x440>)
  408604:	e9d3 2300 	ldrd	r2, r3, [r3]
  408608:	f001 fdca 	bl	40a1a0 <__aeabi_dsub>
  40860c:	4632      	mov	r2, r6
  40860e:	463b      	mov	r3, r7
  408610:	f001 ff7a 	bl	40a508 <__aeabi_dmul>
  408614:	a326      	add	r3, pc, #152	; (adr r3, 4086b0 <__ieee754_asin+0x448>)
  408616:	e9d3 2300 	ldrd	r2, r3, [r3]
  40861a:	f001 fdc3 	bl	40a1a4 <__adddf3>
  40861e:	4632      	mov	r2, r6
  408620:	463b      	mov	r3, r7
  408622:	f001 ff71 	bl	40a508 <__aeabi_dmul>
  408626:	a324      	add	r3, pc, #144	; (adr r3, 4086b8 <__ieee754_asin+0x450>)
  408628:	e9d3 2300 	ldrd	r2, r3, [r3]
  40862c:	f001 fdb8 	bl	40a1a0 <__aeabi_dsub>
  408630:	4632      	mov	r2, r6
  408632:	463b      	mov	r3, r7
  408634:	f001 ff68 	bl	40a508 <__aeabi_dmul>
  408638:	2200      	movs	r2, #0
  40863a:	4b21      	ldr	r3, [pc, #132]	; (4086c0 <__ieee754_asin+0x458>)
  40863c:	f001 fdb2 	bl	40a1a4 <__adddf3>
  408640:	4602      	mov	r2, r0
  408642:	460b      	mov	r3, r1
  408644:	4640      	mov	r0, r8
  408646:	4649      	mov	r1, r9
  408648:	f002 f888 	bl	40a75c <__aeabi_ddiv>
  40864c:	4602      	mov	r2, r0
  40864e:	460b      	mov	r3, r1
  408650:	4620      	mov	r0, r4
  408652:	4629      	mov	r1, r5
  408654:	f001 ff58 	bl	40a508 <__aeabi_dmul>
  408658:	4622      	mov	r2, r4
  40865a:	462b      	mov	r3, r5
  40865c:	f001 fda2 	bl	40a1a4 <__adddf3>
  408660:	4604      	mov	r4, r0
  408662:	4620      	mov	r0, r4
  408664:	b006      	add	sp, #24
  408666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40866a:	bf00      	nop
  40866c:	f3af 8000 	nop.w
  408670:	0dfdf709 	.word	0x0dfdf709
  408674:	3f023de1 	.word	0x3f023de1
  408678:	7501b288 	.word	0x7501b288
  40867c:	3f49efe0 	.word	0x3f49efe0
  408680:	b5688f3b 	.word	0xb5688f3b
  408684:	3fa48228 	.word	0x3fa48228
  408688:	0e884455 	.word	0x0e884455
  40868c:	3fc9c155 	.word	0x3fc9c155
  408690:	03eb6f7d 	.word	0x03eb6f7d
  408694:	3fd4d612 	.word	0x3fd4d612
  408698:	55555555 	.word	0x55555555
  40869c:	3fc55555 	.word	0x3fc55555
  4086a0:	b12e9282 	.word	0xb12e9282
  4086a4:	3fb3b8c5 	.word	0x3fb3b8c5
  4086a8:	1b8d0159 	.word	0x1b8d0159
  4086ac:	3fe6066c 	.word	0x3fe6066c
  4086b0:	9c598ac8 	.word	0x9c598ac8
  4086b4:	40002ae5 	.word	0x40002ae5
  4086b8:	1c8a2d4b 	.word	0x1c8a2d4b
  4086bc:	40033a27 	.word	0x40033a27
  4086c0:	3ff00000 	.word	0x3ff00000
  4086c4:	00000000 	.word	0x00000000

004086c8 <__ieee754_atan2>:
  4086c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086cc:	4254      	negs	r4, r2
  4086ce:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
  4086d2:	f8df a178 	ldr.w	sl, [pc, #376]	; 40884c <__ieee754_atan2+0x184>
  4086d6:	4606      	mov	r6, r0
  4086d8:	4314      	orrs	r4, r2
  4086da:	460d      	mov	r5, r1
  4086dc:	4617      	mov	r7, r2
  4086de:	469e      	mov	lr, r3
  4086e0:	ea48 74d4 	orr.w	r4, r8, r4, lsr #31
  4086e4:	4554      	cmp	r4, sl
  4086e6:	d83c      	bhi.n	408762 <__ieee754_atan2+0x9a>
  4086e8:	4244      	negs	r4, r0
  4086ea:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4086ee:	4689      	mov	r9, r1
  4086f0:	4304      	orrs	r4, r0
  4086f2:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4086f6:	4554      	cmp	r4, sl
  4086f8:	d833      	bhi.n	408762 <__ieee754_atan2+0x9a>
  4086fa:	4c53      	ldr	r4, [pc, #332]	; (408848 <__ieee754_atan2+0x180>)
  4086fc:	441c      	add	r4, r3
  4086fe:	4314      	orrs	r4, r2
  408700:	d046      	beq.n	408790 <__ieee754_atan2+0xc8>
  408702:	179c      	asrs	r4, r3, #30
  408704:	f004 0402 	and.w	r4, r4, #2
  408708:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40870c:	ea5b 0100 	orrs.w	r1, fp, r0
  408710:	d02f      	beq.n	408772 <__ieee754_atan2+0xaa>
  408712:	ea58 0107 	orrs.w	r1, r8, r7
  408716:	d035      	beq.n	408784 <__ieee754_atan2+0xbc>
  408718:	494c      	ldr	r1, [pc, #304]	; (40884c <__ieee754_atan2+0x184>)
  40871a:	4588      	cmp	r8, r1
  40871c:	d045      	beq.n	4087aa <__ieee754_atan2+0xe2>
  40871e:	494b      	ldr	r1, [pc, #300]	; (40884c <__ieee754_atan2+0x184>)
  408720:	458b      	cmp	fp, r1
  408722:	d02f      	beq.n	408784 <__ieee754_atan2+0xbc>
  408724:	ebc8 080b 	rsb	r8, r8, fp
  408728:	ea4f 5828 	mov.w	r8, r8, asr #20
  40872c:	f1b8 0f3c 	cmp.w	r8, #60	; 0x3c
  408730:	dc37      	bgt.n	4087a2 <__ieee754_atan2+0xda>
  408732:	f118 0f3c 	cmn.w	r8, #60	; 0x3c
  408736:	da60      	bge.n	4087fa <__ieee754_atan2+0x132>
  408738:	f1be 0f00 	cmp.w	lr, #0
  40873c:	da5d      	bge.n	4087fa <__ieee754_atan2+0x132>
  40873e:	2000      	movs	r0, #0
  408740:	2100      	movs	r1, #0
  408742:	2c01      	cmp	r4, #1
  408744:	d056      	beq.n	4087f4 <__ieee754_atan2+0x12c>
  408746:	2c02      	cmp	r4, #2
  408748:	d047      	beq.n	4087da <__ieee754_atan2+0x112>
  40874a:	b184      	cbz	r4, 40876e <__ieee754_atan2+0xa6>
  40874c:	a338      	add	r3, pc, #224	; (adr r3, 408830 <__ieee754_atan2+0x168>)
  40874e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408752:	f001 fd25 	bl	40a1a0 <__aeabi_dsub>
  408756:	a338      	add	r3, pc, #224	; (adr r3, 408838 <__ieee754_atan2+0x170>)
  408758:	e9d3 2300 	ldrd	r2, r3, [r3]
  40875c:	f001 fd20 	bl	40a1a0 <__aeabi_dsub>
  408760:	e005      	b.n	40876e <__ieee754_atan2+0xa6>
  408762:	4610      	mov	r0, r2
  408764:	4619      	mov	r1, r3
  408766:	4632      	mov	r2, r6
  408768:	462b      	mov	r3, r5
  40876a:	f001 fd1b 	bl	40a1a4 <__adddf3>
  40876e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408772:	2c03      	cmp	r4, #3
  408774:	d8cd      	bhi.n	408712 <__ieee754_atan2+0x4a>
  408776:	e8df f004 	tbb	[pc, r4]
  40877a:	1212      	.short	0x1212
  40877c:	0f02      	.short	0x0f02
  40877e:	4834      	ldr	r0, [pc, #208]	; (408850 <__ieee754_atan2+0x188>)
  408780:	4934      	ldr	r1, [pc, #208]	; (408854 <__ieee754_atan2+0x18c>)
  408782:	e7f4      	b.n	40876e <__ieee754_atan2+0xa6>
  408784:	f1b9 0f00 	cmp.w	r9, #0
  408788:	4831      	ldr	r0, [pc, #196]	; (408850 <__ieee754_atan2+0x188>)
  40878a:	db24      	blt.n	4087d6 <__ieee754_atan2+0x10e>
  40878c:	4932      	ldr	r1, [pc, #200]	; (408858 <__ieee754_atan2+0x190>)
  40878e:	e7ee      	b.n	40876e <__ieee754_atan2+0xa6>
  408790:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408794:	f001 ba3c 	b.w	409c10 <atan>
  408798:	482d      	ldr	r0, [pc, #180]	; (408850 <__ieee754_atan2+0x188>)
  40879a:	4930      	ldr	r1, [pc, #192]	; (40885c <__ieee754_atan2+0x194>)
  40879c:	e7e7      	b.n	40876e <__ieee754_atan2+0xa6>
  40879e:	4629      	mov	r1, r5
  4087a0:	e7e5      	b.n	40876e <__ieee754_atan2+0xa6>
  4087a2:	a127      	add	r1, pc, #156	; (adr r1, 408840 <__ieee754_atan2+0x178>)
  4087a4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4087a8:	e7cb      	b.n	408742 <__ieee754_atan2+0x7a>
  4087aa:	45c3      	cmp	fp, r8
  4087ac:	d02e      	beq.n	40880c <__ieee754_atan2+0x144>
  4087ae:	2c03      	cmp	r4, #3
  4087b0:	d8b5      	bhi.n	40871e <__ieee754_atan2+0x56>
  4087b2:	a101      	add	r1, pc, #4	; (adr r1, 4087b8 <__ieee754_atan2+0xf0>)
  4087b4:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  4087b8:	004087c9 	.word	0x004087c9
  4087bc:	004087cf 	.word	0x004087cf
  4087c0:	0040877f 	.word	0x0040877f
  4087c4:	00408799 	.word	0x00408799
  4087c8:	2000      	movs	r0, #0
  4087ca:	4601      	mov	r1, r0
  4087cc:	e7cf      	b.n	40876e <__ieee754_atan2+0xa6>
  4087ce:	2000      	movs	r0, #0
  4087d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4087d4:	e7cb      	b.n	40876e <__ieee754_atan2+0xa6>
  4087d6:	4922      	ldr	r1, [pc, #136]	; (408860 <__ieee754_atan2+0x198>)
  4087d8:	e7c9      	b.n	40876e <__ieee754_atan2+0xa6>
  4087da:	a315      	add	r3, pc, #84	; (adr r3, 408830 <__ieee754_atan2+0x168>)
  4087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087e0:	f001 fcde 	bl	40a1a0 <__aeabi_dsub>
  4087e4:	4602      	mov	r2, r0
  4087e6:	460b      	mov	r3, r1
  4087e8:	a113      	add	r1, pc, #76	; (adr r1, 408838 <__ieee754_atan2+0x170>)
  4087ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4087ee:	f001 fcd7 	bl	40a1a0 <__aeabi_dsub>
  4087f2:	e7bc      	b.n	40876e <__ieee754_atan2+0xa6>
  4087f4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4087f8:	e7b9      	b.n	40876e <__ieee754_atan2+0xa6>
  4087fa:	4630      	mov	r0, r6
  4087fc:	4629      	mov	r1, r5
  4087fe:	f001 ffad 	bl	40a75c <__aeabi_ddiv>
  408802:	f001 fb87 	bl	409f14 <fabs>
  408806:	f001 fa03 	bl	409c10 <atan>
  40880a:	e79a      	b.n	408742 <__ieee754_atan2+0x7a>
  40880c:	2c03      	cmp	r4, #3
  40880e:	d8b9      	bhi.n	408784 <__ieee754_atan2+0xbc>
  408810:	e8df f004 	tbb	[pc, r4]
  408814:	05080b02 	.word	0x05080b02
  408818:	480d      	ldr	r0, [pc, #52]	; (408850 <__ieee754_atan2+0x188>)
  40881a:	4912      	ldr	r1, [pc, #72]	; (408864 <__ieee754_atan2+0x19c>)
  40881c:	e7a7      	b.n	40876e <__ieee754_atan2+0xa6>
  40881e:	4812      	ldr	r0, [pc, #72]	; (408868 <__ieee754_atan2+0x1a0>)
  408820:	4912      	ldr	r1, [pc, #72]	; (40886c <__ieee754_atan2+0x1a4>)
  408822:	e7a4      	b.n	40876e <__ieee754_atan2+0xa6>
  408824:	4810      	ldr	r0, [pc, #64]	; (408868 <__ieee754_atan2+0x1a0>)
  408826:	4912      	ldr	r1, [pc, #72]	; (408870 <__ieee754_atan2+0x1a8>)
  408828:	e7a1      	b.n	40876e <__ieee754_atan2+0xa6>
  40882a:	4809      	ldr	r0, [pc, #36]	; (408850 <__ieee754_atan2+0x188>)
  40882c:	4911      	ldr	r1, [pc, #68]	; (408874 <__ieee754_atan2+0x1ac>)
  40882e:	e79e      	b.n	40876e <__ieee754_atan2+0xa6>
  408830:	33145c07 	.word	0x33145c07
  408834:	3ca1a626 	.word	0x3ca1a626
  408838:	54442d18 	.word	0x54442d18
  40883c:	400921fb 	.word	0x400921fb
  408840:	54442d18 	.word	0x54442d18
  408844:	3ff921fb 	.word	0x3ff921fb
  408848:	c0100000 	.word	0xc0100000
  40884c:	7ff00000 	.word	0x7ff00000
  408850:	54442d18 	.word	0x54442d18
  408854:	400921fb 	.word	0x400921fb
  408858:	3ff921fb 	.word	0x3ff921fb
  40885c:	c00921fb 	.word	0xc00921fb
  408860:	bff921fb 	.word	0xbff921fb
  408864:	3fe921fb 	.word	0x3fe921fb
  408868:	7f3321d2 	.word	0x7f3321d2
  40886c:	c002d97c 	.word	0xc002d97c
  408870:	4002d97c 	.word	0x4002d97c
  408874:	bfe921fb 	.word	0xbfe921fb

00408878 <__ieee754_fmod>:
  408878:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
  40887c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408880:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408884:	ea5c 0e02 	orrs.w	lr, ip, r2
  408888:	4698      	mov	r8, r3
  40888a:	4615      	mov	r5, r2
  40888c:	ea86 0a01 	eor.w	sl, r6, r1
  408890:	d028      	beq.n	4088e4 <__ieee754_fmod+0x6c>
  408892:	f8df e220 	ldr.w	lr, [pc, #544]	; 408ab4 <__ieee754_fmod+0x23c>
  408896:	45f2      	cmp	sl, lr
  408898:	dc24      	bgt.n	4088e4 <__ieee754_fmod+0x6c>
  40889a:	f1c2 0e00 	rsb	lr, r2, #0
  40889e:	f8df b218 	ldr.w	fp, [pc, #536]	; 408ab8 <__ieee754_fmod+0x240>
  4088a2:	ea4e 0e02 	orr.w	lr, lr, r2
  4088a6:	ea4c 7ede 	orr.w	lr, ip, lr, lsr #31
  4088aa:	45de      	cmp	lr, fp
  4088ac:	d81a      	bhi.n	4088e4 <__ieee754_fmod+0x6c>
  4088ae:	45e2      	cmp	sl, ip
  4088b0:	4681      	mov	r9, r0
  4088b2:	4604      	mov	r4, r0
  4088b4:	4617      	mov	r7, r2
  4088b6:	dc04      	bgt.n	4088c2 <__ieee754_fmod+0x4a>
  4088b8:	db1a      	blt.n	4088f0 <__ieee754_fmod+0x78>
  4088ba:	4290      	cmp	r0, r2
  4088bc:	d318      	bcc.n	4088f0 <__ieee754_fmod+0x78>
  4088be:	f000 80d5 	beq.w	408a6c <__ieee754_fmod+0x1f4>
  4088c2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
  4088c6:	da15      	bge.n	4088f4 <__ieee754_fmod+0x7c>
  4088c8:	f1ba 0f00 	cmp.w	sl, #0
  4088cc:	f040 80ad 	bne.w	408a2a <__ieee754_fmod+0x1b2>
  4088d0:	f1b9 0f00 	cmp.w	r9, #0
  4088d4:	464b      	mov	r3, r9
  4088d6:	4a72      	ldr	r2, [pc, #456]	; (408aa0 <__ieee754_fmod+0x228>)
  4088d8:	dd10      	ble.n	4088fc <__ieee754_fmod+0x84>
  4088da:	005b      	lsls	r3, r3, #1
  4088dc:	3a01      	subs	r2, #1
  4088de:	2b00      	cmp	r3, #0
  4088e0:	dcfb      	bgt.n	4088da <__ieee754_fmod+0x62>
  4088e2:	e00b      	b.n	4088fc <__ieee754_fmod+0x84>
  4088e4:	f001 fe10 	bl	40a508 <__aeabi_dmul>
  4088e8:	4602      	mov	r2, r0
  4088ea:	460b      	mov	r3, r1
  4088ec:	f001 ff36 	bl	40a75c <__aeabi_ddiv>
  4088f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088f4:	ea4f 522a 	mov.w	r2, sl, asr #20
  4088f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  4088fc:	f5bc 1f80 	cmp.w	ip, #1048576	; 0x100000
  408900:	da0e      	bge.n	408920 <__ieee754_fmod+0xa8>
  408902:	f1bc 0f00 	cmp.w	ip, #0
  408906:	f040 8086 	bne.w	408a16 <__ieee754_fmod+0x19e>
  40890a:	2d00      	cmp	r5, #0
  40890c:	462b      	mov	r3, r5
  40890e:	f8df e190 	ldr.w	lr, [pc, #400]	; 408aa0 <__ieee754_fmod+0x228>
  408912:	dd09      	ble.n	408928 <__ieee754_fmod+0xb0>
  408914:	005b      	lsls	r3, r3, #1
  408916:	f10e 3eff 	add.w	lr, lr, #4294967295
  40891a:	2b00      	cmp	r3, #0
  40891c:	dcfa      	bgt.n	408914 <__ieee754_fmod+0x9c>
  40891e:	e003      	b.n	408928 <__ieee754_fmod+0xb0>
  408920:	ea4f 5e2c 	mov.w	lr, ip, asr #20
  408924:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
  408928:	4b5e      	ldr	r3, [pc, #376]	; (408aa4 <__ieee754_fmod+0x22c>)
  40892a:	429a      	cmp	r2, r3
  40892c:	db62      	blt.n	4089f4 <__ieee754_fmod+0x17c>
  40892e:	f3ca 0013 	ubfx	r0, sl, #0, #20
  408932:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
  408936:	4b5b      	ldr	r3, [pc, #364]	; (408aa4 <__ieee754_fmod+0x22c>)
  408938:	459e      	cmp	lr, r3
  40893a:	db4c      	blt.n	4089d6 <__ieee754_fmod+0x15e>
  40893c:	f3c8 0513 	ubfx	r5, r8, #0, #20
  408940:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
  408944:	ebce 0202 	rsb	r2, lr, r2
  408948:	e005      	b.n	408956 <__ieee754_fmod+0xde>
  40894a:	004c      	lsls	r4, r1, #1
  40894c:	4319      	orrs	r1, r3
  40894e:	eb0c 0043 	add.w	r0, ip, r3, lsl #1
  408952:	d00f      	beq.n	408974 <__ieee754_fmod+0xfc>
  408954:	3a01      	subs	r2, #1
  408956:	1be1      	subs	r1, r4, r7
  408958:	1b43      	subs	r3, r0, r5
  40895a:	b19a      	cbz	r2, 408984 <__ieee754_fmod+0x10c>
  40895c:	42bc      	cmp	r4, r7
  40895e:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
  408962:	d200      	bcs.n	408966 <__ieee754_fmod+0xee>
  408964:	3b01      	subs	r3, #1
  408966:	2b00      	cmp	r3, #0
  408968:	daef      	bge.n	40894a <__ieee754_fmod+0xd2>
  40896a:	0fe3      	lsrs	r3, r4, #31
  40896c:	0064      	lsls	r4, r4, #1
  40896e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  408972:	e7ef      	b.n	408954 <__ieee754_fmod+0xdc>
  408974:	4b4c      	ldr	r3, [pc, #304]	; (408aa8 <__ieee754_fmod+0x230>)
  408976:	0ff6      	lsrs	r6, r6, #31
  408978:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
  40897c:	e896 0003 	ldmia.w	r6, {r0, r1}
  408980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408984:	42a7      	cmp	r7, r4
  408986:	461d      	mov	r5, r3
  408988:	d843      	bhi.n	408a12 <__ieee754_fmod+0x19a>
  40898a:	2d00      	cmp	r5, #0
  40898c:	db75      	blt.n	408a7a <__ieee754_fmod+0x202>
  40898e:	1be4      	subs	r4, r4, r7
  408990:	ea55 0304 	orrs.w	r3, r5, r4
  408994:	d0ee      	beq.n	408974 <__ieee754_fmod+0xfc>
  408996:	4a45      	ldr	r2, [pc, #276]	; (408aac <__ieee754_fmod+0x234>)
  408998:	4295      	cmp	r5, r2
  40899a:	dc07      	bgt.n	4089ac <__ieee754_fmod+0x134>
  40899c:	0fe3      	lsrs	r3, r4, #31
  40899e:	f10e 3eff 	add.w	lr, lr, #4294967295
  4089a2:	0064      	lsls	r4, r4, #1
  4089a4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  4089a8:	4295      	cmp	r5, r2
  4089aa:	ddf7      	ble.n	40899c <__ieee754_fmod+0x124>
  4089ac:	4b3d      	ldr	r3, [pc, #244]	; (408aa4 <__ieee754_fmod+0x22c>)
  4089ae:	459e      	cmp	lr, r3
  4089b0:	da52      	bge.n	408a58 <__ieee754_fmod+0x1e0>
  4089b2:	4b3c      	ldr	r3, [pc, #240]	; (408aa4 <__ieee754_fmod+0x22c>)
  4089b4:	ebce 0303 	rsb	r3, lr, r3
  4089b8:	2b14      	cmp	r3, #20
  4089ba:	dc60      	bgt.n	408a7e <__ieee754_fmod+0x206>
  4089bc:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  4089c0:	40dc      	lsrs	r4, r3
  4089c2:	fa45 f103 	asr.w	r1, r5, r3
  4089c6:	fa05 f50e 	lsl.w	r5, r5, lr
  4089ca:	4325      	orrs	r5, r4
  4089cc:	ea41 0306 	orr.w	r3, r1, r6
  4089d0:	4628      	mov	r0, r5
  4089d2:	4619      	mov	r1, r3
  4089d4:	e78c      	b.n	4088f0 <__ieee754_fmod+0x78>
  4089d6:	4933      	ldr	r1, [pc, #204]	; (408aa4 <__ieee754_fmod+0x22c>)
  4089d8:	ebce 0101 	rsb	r1, lr, r1
  4089dc:	291f      	cmp	r1, #31
  4089de:	dc35      	bgt.n	408a4c <__ieee754_fmod+0x1d4>
  4089e0:	f20e 481e 	addw	r8, lr, #1054	; 0x41e
  4089e4:	fa0c f301 	lsl.w	r3, ip, r1
  4089e8:	fa05 f701 	lsl.w	r7, r5, r1
  4089ec:	4641      	mov	r1, r8
  4089ee:	40cd      	lsrs	r5, r1
  4089f0:	431d      	orrs	r5, r3
  4089f2:	e7a7      	b.n	408944 <__ieee754_fmod+0xcc>
  4089f4:	4b2b      	ldr	r3, [pc, #172]	; (408aa4 <__ieee754_fmod+0x22c>)
  4089f6:	1a9b      	subs	r3, r3, r2
  4089f8:	2b1f      	cmp	r3, #31
  4089fa:	dc21      	bgt.n	408a40 <__ieee754_fmod+0x1c8>
  4089fc:	f202 411e 	addw	r1, r2, #1054	; 0x41e
  408a00:	fa0a fa03 	lsl.w	sl, sl, r3
  408a04:	fa09 f403 	lsl.w	r4, r9, r3
  408a08:	fa29 f001 	lsr.w	r0, r9, r1
  408a0c:	ea4a 0000 	orr.w	r0, sl, r0
  408a10:	e791      	b.n	408936 <__ieee754_fmod+0xbe>
  408a12:	1e5d      	subs	r5, r3, #1
  408a14:	e7b9      	b.n	40898a <__ieee754_fmod+0x112>
  408a16:	ea4f 23cc 	mov.w	r3, ip, lsl #11
  408a1a:	f8df e088 	ldr.w	lr, [pc, #136]	; 408aa4 <__ieee754_fmod+0x22c>
  408a1e:	005b      	lsls	r3, r3, #1
  408a20:	f10e 3eff 	add.w	lr, lr, #4294967295
  408a24:	2b00      	cmp	r3, #0
  408a26:	dcfa      	bgt.n	408a1e <__ieee754_fmod+0x1a6>
  408a28:	e77e      	b.n	408928 <__ieee754_fmod+0xb0>
  408a2a:	ea4f 23ca 	mov.w	r3, sl, lsl #11
  408a2e:	4a1d      	ldr	r2, [pc, #116]	; (408aa4 <__ieee754_fmod+0x22c>)
  408a30:	2b00      	cmp	r3, #0
  408a32:	f77f af63 	ble.w	4088fc <__ieee754_fmod+0x84>
  408a36:	005b      	lsls	r3, r3, #1
  408a38:	3a01      	subs	r2, #1
  408a3a:	2b00      	cmp	r3, #0
  408a3c:	dcfb      	bgt.n	408a36 <__ieee754_fmod+0x1be>
  408a3e:	e75d      	b.n	4088fc <__ieee754_fmod+0x84>
  408a40:	4b1b      	ldr	r3, [pc, #108]	; (408ab0 <__ieee754_fmod+0x238>)
  408a42:	2400      	movs	r4, #0
  408a44:	1a9b      	subs	r3, r3, r2
  408a46:	fa09 f003 	lsl.w	r0, r9, r3
  408a4a:	e774      	b.n	408936 <__ieee754_fmod+0xbe>
  408a4c:	4b18      	ldr	r3, [pc, #96]	; (408ab0 <__ieee754_fmod+0x238>)
  408a4e:	2700      	movs	r7, #0
  408a50:	ebce 0303 	rsb	r3, lr, r3
  408a54:	409d      	lsls	r5, r3
  408a56:	e775      	b.n	408944 <__ieee754_fmod+0xcc>
  408a58:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
  408a5c:	f20e 3eff 	addw	lr, lr, #1023	; 0x3ff
  408a60:	4620      	mov	r0, r4
  408a62:	432e      	orrs	r6, r5
  408a64:	ea46 530e 	orr.w	r3, r6, lr, lsl #20
  408a68:	4619      	mov	r1, r3
  408a6a:	e741      	b.n	4088f0 <__ieee754_fmod+0x78>
  408a6c:	0ff6      	lsrs	r6, r6, #31
  408a6e:	4b0e      	ldr	r3, [pc, #56]	; (408aa8 <__ieee754_fmod+0x230>)
  408a70:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  408a74:	e893 0003 	ldmia.w	r3, {r0, r1}
  408a78:	e73a      	b.n	4088f0 <__ieee754_fmod+0x78>
  408a7a:	4605      	mov	r5, r0
  408a7c:	e788      	b.n	408990 <__ieee754_fmod+0x118>
  408a7e:	2b1f      	cmp	r3, #31
  408a80:	dc07      	bgt.n	408a92 <__ieee754_fmod+0x21a>
  408a82:	f20e 4e1e 	addw	lr, lr, #1054	; 0x41e
  408a86:	40dc      	lsrs	r4, r3
  408a88:	4631      	mov	r1, r6
  408a8a:	fa05 f50e 	lsl.w	r5, r5, lr
  408a8e:	4325      	orrs	r5, r4
  408a90:	e79c      	b.n	4089cc <__ieee754_fmod+0x154>
  408a92:	4b07      	ldr	r3, [pc, #28]	; (408ab0 <__ieee754_fmod+0x238>)
  408a94:	4631      	mov	r1, r6
  408a96:	ebce 0303 	rsb	r3, lr, r3
  408a9a:	411d      	asrs	r5, r3
  408a9c:	e796      	b.n	4089cc <__ieee754_fmod+0x154>
  408a9e:	bf00      	nop
  408aa0:	fffffbed 	.word	0xfffffbed
  408aa4:	fffffc02 	.word	0xfffffc02
  408aa8:	004132f8 	.word	0x004132f8
  408aac:	000fffff 	.word	0x000fffff
  408ab0:	fffffbe2 	.word	0xfffffbe2
  408ab4:	7fefffff 	.word	0x7fefffff
  408ab8:	7ff00000 	.word	0x7ff00000
  408abc:	00000000 	.word	0x00000000

00408ac0 <__ieee754_rem_pio2>:
  408ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ac4:	4c96      	ldr	r4, [pc, #600]	; (408d20 <__ieee754_rem_pio2+0x260>)
  408ac6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  408aca:	b08f      	sub	sp, #60	; 0x3c
  408acc:	460b      	mov	r3, r1
  408ace:	42a7      	cmp	r7, r4
  408ad0:	460e      	mov	r6, r1
  408ad2:	f340 8082 	ble.w	408bda <__ieee754_rem_pio2+0x11a>
  408ad6:	4614      	mov	r4, r2
  408ad8:	4a92      	ldr	r2, [pc, #584]	; (408d24 <__ieee754_rem_pio2+0x264>)
  408ada:	4297      	cmp	r7, r2
  408adc:	dc28      	bgt.n	408b30 <__ieee754_rem_pio2+0x70>
  408ade:	2900      	cmp	r1, #0
  408ae0:	a385      	add	r3, pc, #532	; (adr r3, 408cf8 <__ieee754_rem_pio2+0x238>)
  408ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ae6:	f340 81a3 	ble.w	408e30 <__ieee754_rem_pio2+0x370>
  408aea:	f001 fb59 	bl	40a1a0 <__aeabi_dsub>
  408aee:	4b8e      	ldr	r3, [pc, #568]	; (408d28 <__ieee754_rem_pio2+0x268>)
  408af0:	4680      	mov	r8, r0
  408af2:	4689      	mov	r9, r1
  408af4:	429f      	cmp	r7, r3
  408af6:	f000 8087 	beq.w	408c08 <__ieee754_rem_pio2+0x148>
  408afa:	2501      	movs	r5, #1
  408afc:	a380      	add	r3, pc, #512	; (adr r3, 408d00 <__ieee754_rem_pio2+0x240>)
  408afe:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b02:	f001 fb4d 	bl	40a1a0 <__aeabi_dsub>
  408b06:	4606      	mov	r6, r0
  408b08:	460f      	mov	r7, r1
  408b0a:	4640      	mov	r0, r8
  408b0c:	4632      	mov	r2, r6
  408b0e:	4649      	mov	r1, r9
  408b10:	463b      	mov	r3, r7
  408b12:	e9c4 6700 	strd	r6, r7, [r4]
  408b16:	f001 fb43 	bl	40a1a0 <__aeabi_dsub>
  408b1a:	a379      	add	r3, pc, #484	; (adr r3, 408d00 <__ieee754_rem_pio2+0x240>)
  408b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b20:	f001 fb3e 	bl	40a1a0 <__aeabi_dsub>
  408b24:	e9c4 0102 	strd	r0, r1, [r4, #8]
  408b28:	4628      	mov	r0, r5
  408b2a:	b00f      	add	sp, #60	; 0x3c
  408b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b30:	4a7e      	ldr	r2, [pc, #504]	; (408d2c <__ieee754_rem_pio2+0x26c>)
  408b32:	4297      	cmp	r7, r2
  408b34:	f340 8087 	ble.w	408c46 <__ieee754_rem_pio2+0x186>
  408b38:	4a7d      	ldr	r2, [pc, #500]	; (408d30 <__ieee754_rem_pio2+0x270>)
  408b3a:	4297      	cmp	r7, r2
  408b3c:	dc5a      	bgt.n	408bf4 <__ieee754_rem_pio2+0x134>
  408b3e:	153a      	asrs	r2, r7, #20
  408b40:	4682      	mov	sl, r0
  408b42:	f2a2 4516 	subw	r5, r2, #1046	; 0x416
  408b46:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
  408b4a:	468b      	mov	fp, r1
  408b4c:	f001 ff76 	bl	40aa3c <__aeabi_d2iz>
  408b50:	f001 fc74 	bl	40a43c <__aeabi_i2d>
  408b54:	4680      	mov	r8, r0
  408b56:	4689      	mov	r9, r1
  408b58:	4650      	mov	r0, sl
  408b5a:	4642      	mov	r2, r8
  408b5c:	4659      	mov	r1, fp
  408b5e:	464b      	mov	r3, r9
  408b60:	e9cd 8908 	strd	r8, r9, [sp, #32]
  408b64:	f001 fb1c 	bl	40a1a0 <__aeabi_dsub>
  408b68:	2200      	movs	r2, #0
  408b6a:	4b72      	ldr	r3, [pc, #456]	; (408d34 <__ieee754_rem_pio2+0x274>)
  408b6c:	f001 fccc 	bl	40a508 <__aeabi_dmul>
  408b70:	468b      	mov	fp, r1
  408b72:	4682      	mov	sl, r0
  408b74:	f001 ff62 	bl	40aa3c <__aeabi_d2iz>
  408b78:	f001 fc60 	bl	40a43c <__aeabi_i2d>
  408b7c:	4680      	mov	r8, r0
  408b7e:	4689      	mov	r9, r1
  408b80:	4650      	mov	r0, sl
  408b82:	4642      	mov	r2, r8
  408b84:	4659      	mov	r1, fp
  408b86:	464b      	mov	r3, r9
  408b88:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  408b8c:	f001 fb08 	bl	40a1a0 <__aeabi_dsub>
  408b90:	2200      	movs	r2, #0
  408b92:	4b68      	ldr	r3, [pc, #416]	; (408d34 <__ieee754_rem_pio2+0x274>)
  408b94:	f001 fcb8 	bl	40a508 <__aeabi_dmul>
  408b98:	2200      	movs	r2, #0
  408b9a:	2300      	movs	r3, #0
  408b9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  408ba0:	f001 ff1a 	bl	40a9d8 <__aeabi_dcmpeq>
  408ba4:	2800      	cmp	r0, #0
  408ba6:	f000 816d 	beq.w	408e84 <__ieee754_rem_pio2+0x3c4>
  408baa:	2300      	movs	r3, #0
  408bac:	4640      	mov	r0, r8
  408bae:	4649      	mov	r1, r9
  408bb0:	2200      	movs	r2, #0
  408bb2:	f001 ff11 	bl	40a9d8 <__aeabi_dcmpeq>
  408bb6:	2800      	cmp	r0, #0
  408bb8:	bf14      	ite	ne
  408bba:	2301      	movne	r3, #1
  408bbc:	2302      	moveq	r3, #2
  408bbe:	2002      	movs	r0, #2
  408bc0:	495d      	ldr	r1, [pc, #372]	; (408d38 <__ieee754_rem_pio2+0x278>)
  408bc2:	462a      	mov	r2, r5
  408bc4:	9000      	str	r0, [sp, #0]
  408bc6:	a808      	add	r0, sp, #32
  408bc8:	9101      	str	r1, [sp, #4]
  408bca:	4621      	mov	r1, r4
  408bcc:	f000 fb68 	bl	4092a0 <__kernel_rem_pio2>
  408bd0:	2e00      	cmp	r6, #0
  408bd2:	f2c0 814d 	blt.w	408e70 <__ieee754_rem_pio2+0x3b0>
  408bd6:	4605      	mov	r5, r0
  408bd8:	e008      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408bda:	4606      	mov	r6, r0
  408bdc:	2100      	movs	r1, #0
  408bde:	2000      	movs	r0, #0
  408be0:	461f      	mov	r7, r3
  408be2:	2500      	movs	r5, #0
  408be4:	e9c2 0102 	strd	r0, r1, [r2, #8]
  408be8:	e9c2 6700 	strd	r6, r7, [r2]
  408bec:	4628      	mov	r0, r5
  408bee:	b00f      	add	sp, #60	; 0x3c
  408bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408bf4:	4602      	mov	r2, r0
  408bf6:	460b      	mov	r3, r1
  408bf8:	f001 fad2 	bl	40a1a0 <__aeabi_dsub>
  408bfc:	2500      	movs	r5, #0
  408bfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
  408c02:	e9c4 0100 	strd	r0, r1, [r4]
  408c06:	e7f1      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408c08:	a33f      	add	r3, pc, #252	; (adr r3, 408d08 <__ieee754_rem_pio2+0x248>)
  408c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c0e:	f001 fac7 	bl	40a1a0 <__aeabi_dsub>
  408c12:	4680      	mov	r8, r0
  408c14:	4689      	mov	r9, r1
  408c16:	2501      	movs	r5, #1
  408c18:	a33d      	add	r3, pc, #244	; (adr r3, 408d10 <__ieee754_rem_pio2+0x250>)
  408c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c1e:	f001 fabf 	bl	40a1a0 <__aeabi_dsub>
  408c22:	4606      	mov	r6, r0
  408c24:	460f      	mov	r7, r1
  408c26:	4640      	mov	r0, r8
  408c28:	4632      	mov	r2, r6
  408c2a:	4649      	mov	r1, r9
  408c2c:	463b      	mov	r3, r7
  408c2e:	e9c4 6700 	strd	r6, r7, [r4]
  408c32:	f001 fab5 	bl	40a1a0 <__aeabi_dsub>
  408c36:	a336      	add	r3, pc, #216	; (adr r3, 408d10 <__ieee754_rem_pio2+0x250>)
  408c38:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c3c:	f001 fab0 	bl	40a1a0 <__aeabi_dsub>
  408c40:	e9c4 0102 	strd	r0, r1, [r4, #8]
  408c44:	e7d2      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408c46:	f001 f965 	bl	409f14 <fabs>
  408c4a:	4680      	mov	r8, r0
  408c4c:	4689      	mov	r9, r1
  408c4e:	a332      	add	r3, pc, #200	; (adr r3, 408d18 <__ieee754_rem_pio2+0x258>)
  408c50:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c54:	f001 fc58 	bl	40a508 <__aeabi_dmul>
  408c58:	2200      	movs	r2, #0
  408c5a:	4b38      	ldr	r3, [pc, #224]	; (408d3c <__ieee754_rem_pio2+0x27c>)
  408c5c:	f001 faa2 	bl	40a1a4 <__adddf3>
  408c60:	f001 feec 	bl	40aa3c <__aeabi_d2iz>
  408c64:	4605      	mov	r5, r0
  408c66:	f001 fbe9 	bl	40a43c <__aeabi_i2d>
  408c6a:	a323      	add	r3, pc, #140	; (adr r3, 408cf8 <__ieee754_rem_pio2+0x238>)
  408c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408c74:	f001 fc48 	bl	40a508 <__aeabi_dmul>
  408c78:	4602      	mov	r2, r0
  408c7a:	460b      	mov	r3, r1
  408c7c:	4640      	mov	r0, r8
  408c7e:	4649      	mov	r1, r9
  408c80:	f001 fa8e 	bl	40a1a0 <__aeabi_dsub>
  408c84:	4682      	mov	sl, r0
  408c86:	468b      	mov	fp, r1
  408c88:	a31d      	add	r3, pc, #116	; (adr r3, 408d00 <__ieee754_rem_pio2+0x240>)
  408c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408c92:	f001 fc39 	bl	40a508 <__aeabi_dmul>
  408c96:	2d1f      	cmp	r5, #31
  408c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408c9c:	4650      	mov	r0, sl
  408c9e:	4659      	mov	r1, fp
  408ca0:	dc50      	bgt.n	408d44 <__ieee754_rem_pio2+0x284>
  408ca2:	4b27      	ldr	r3, [pc, #156]	; (408d40 <__ieee754_rem_pio2+0x280>)
  408ca4:	1e6a      	subs	r2, r5, #1
  408ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408caa:	42bb      	cmp	r3, r7
  408cac:	d04a      	beq.n	408d44 <__ieee754_rem_pio2+0x284>
  408cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408cb2:	f001 fa75 	bl	40a1a0 <__aeabi_dsub>
  408cb6:	4602      	mov	r2, r0
  408cb8:	460b      	mov	r3, r1
  408cba:	4681      	mov	r9, r0
  408cbc:	4688      	mov	r8, r1
  408cbe:	e9c4 2300 	strd	r2, r3, [r4]
  408cc2:	464a      	mov	r2, r9
  408cc4:	4643      	mov	r3, r8
  408cc6:	4650      	mov	r0, sl
  408cc8:	4659      	mov	r1, fp
  408cca:	f001 fa69 	bl	40a1a0 <__aeabi_dsub>
  408cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408cd2:	f001 fa65 	bl	40a1a0 <__aeabi_dsub>
  408cd6:	2e00      	cmp	r6, #0
  408cd8:	4602      	mov	r2, r0
  408cda:	460b      	mov	r3, r1
  408cdc:	e9c4 2302 	strd	r2, r3, [r4, #8]
  408ce0:	da84      	bge.n	408bec <__ieee754_rem_pio2+0x12c>
  408ce2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
  408ce6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408cea:	60a0      	str	r0, [r4, #8]
  408cec:	426d      	negs	r5, r5
  408cee:	f8c4 9000 	str.w	r9, [r4]
  408cf2:	6063      	str	r3, [r4, #4]
  408cf4:	60e1      	str	r1, [r4, #12]
  408cf6:	e779      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408cf8:	54400000 	.word	0x54400000
  408cfc:	3ff921fb 	.word	0x3ff921fb
  408d00:	1a626331 	.word	0x1a626331
  408d04:	3dd0b461 	.word	0x3dd0b461
  408d08:	1a600000 	.word	0x1a600000
  408d0c:	3dd0b461 	.word	0x3dd0b461
  408d10:	2e037073 	.word	0x2e037073
  408d14:	3ba3198a 	.word	0x3ba3198a
  408d18:	6dc9c883 	.word	0x6dc9c883
  408d1c:	3fe45f30 	.word	0x3fe45f30
  408d20:	3fe921fb 	.word	0x3fe921fb
  408d24:	4002d97b 	.word	0x4002d97b
  408d28:	3ff921fb 	.word	0x3ff921fb
  408d2c:	413921fb 	.word	0x413921fb
  408d30:	7fefffff 	.word	0x7fefffff
  408d34:	41700000 	.word	0x41700000
  408d38:	00413388 	.word	0x00413388
  408d3c:	3fe00000 	.word	0x3fe00000
  408d40:	00413308 	.word	0x00413308
  408d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408d48:	f001 fa2a 	bl	40a1a0 <__aeabi_dsub>
  408d4c:	4688      	mov	r8, r1
  408d4e:	153f      	asrs	r7, r7, #20
  408d50:	4681      	mov	r9, r0
  408d52:	f3c8 530a 	ubfx	r3, r8, #20, #11
  408d56:	1afb      	subs	r3, r7, r3
  408d58:	2b10      	cmp	r3, #16
  408d5a:	e9c4 0100 	strd	r0, r1, [r4]
  408d5e:	ddb0      	ble.n	408cc2 <__ieee754_rem_pio2+0x202>
  408d60:	a35b      	add	r3, pc, #364	; (adr r3, 408ed0 <__ieee754_rem_pio2+0x410>)
  408d62:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408d6a:	f001 fbcd 	bl	40a508 <__aeabi_dmul>
  408d6e:	4680      	mov	r8, r0
  408d70:	4689      	mov	r9, r1
  408d72:	4650      	mov	r0, sl
  408d74:	4642      	mov	r2, r8
  408d76:	4659      	mov	r1, fp
  408d78:	464b      	mov	r3, r9
  408d7a:	f001 fa11 	bl	40a1a0 <__aeabi_dsub>
  408d7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  408d86:	4650      	mov	r0, sl
  408d88:	4659      	mov	r1, fp
  408d8a:	f001 fa09 	bl	40a1a0 <__aeabi_dsub>
  408d8e:	4642      	mov	r2, r8
  408d90:	464b      	mov	r3, r9
  408d92:	f001 fa05 	bl	40a1a0 <__aeabi_dsub>
  408d96:	4680      	mov	r8, r0
  408d98:	4689      	mov	r9, r1
  408d9a:	a34f      	add	r3, pc, #316	; (adr r3, 408ed8 <__ieee754_rem_pio2+0x418>)
  408d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408da4:	f001 fbb0 	bl	40a508 <__aeabi_dmul>
  408da8:	4642      	mov	r2, r8
  408daa:	464b      	mov	r3, r9
  408dac:	f001 f9f8 	bl	40a1a0 <__aeabi_dsub>
  408db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408dbc:	f001 f9f0 	bl	40a1a0 <__aeabi_dsub>
  408dc0:	4688      	mov	r8, r1
  408dc2:	f3c1 510a 	ubfx	r1, r1, #20, #11
  408dc6:	4602      	mov	r2, r0
  408dc8:	4643      	mov	r3, r8
  408dca:	4681      	mov	r9, r0
  408dcc:	1a7f      	subs	r7, r7, r1
  408dce:	2f31      	cmp	r7, #49	; 0x31
  408dd0:	e9c4 2300 	strd	r2, r3, [r4]
  408dd4:	dd78      	ble.n	408ec8 <__ieee754_rem_pio2+0x408>
  408dd6:	a342      	add	r3, pc, #264	; (adr r3, 408ee0 <__ieee754_rem_pio2+0x420>)
  408dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ddc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408de0:	f001 fb92 	bl	40a508 <__aeabi_dmul>
  408de4:	4680      	mov	r8, r0
  408de6:	4689      	mov	r9, r1
  408de8:	4642      	mov	r2, r8
  408dea:	464b      	mov	r3, r9
  408dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408df0:	f001 f9d6 	bl	40a1a0 <__aeabi_dsub>
  408df4:	4682      	mov	sl, r0
  408df6:	468b      	mov	fp, r1
  408df8:	4652      	mov	r2, sl
  408dfa:	465b      	mov	r3, fp
  408dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  408e00:	f001 f9ce 	bl	40a1a0 <__aeabi_dsub>
  408e04:	4642      	mov	r2, r8
  408e06:	464b      	mov	r3, r9
  408e08:	f001 f9ca 	bl	40a1a0 <__aeabi_dsub>
  408e0c:	4680      	mov	r8, r0
  408e0e:	4689      	mov	r9, r1
  408e10:	a335      	add	r3, pc, #212	; (adr r3, 408ee8 <__ieee754_rem_pio2+0x428>)
  408e12:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408e1a:	f001 fb75 	bl	40a508 <__aeabi_dmul>
  408e1e:	4642      	mov	r2, r8
  408e20:	464b      	mov	r3, r9
  408e22:	f001 f9bd 	bl	40a1a0 <__aeabi_dsub>
  408e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408e2a:	4650      	mov	r0, sl
  408e2c:	4659      	mov	r1, fp
  408e2e:	e73e      	b.n	408cae <__ieee754_rem_pio2+0x1ee>
  408e30:	f001 f9b8 	bl	40a1a4 <__adddf3>
  408e34:	4b30      	ldr	r3, [pc, #192]	; (408ef8 <__ieee754_rem_pio2+0x438>)
  408e36:	4680      	mov	r8, r0
  408e38:	4689      	mov	r9, r1
  408e3a:	429f      	cmp	r7, r3
  408e3c:	d024      	beq.n	408e88 <__ieee754_rem_pio2+0x3c8>
  408e3e:	f04f 35ff 	mov.w	r5, #4294967295
  408e42:	a32b      	add	r3, pc, #172	; (adr r3, 408ef0 <__ieee754_rem_pio2+0x430>)
  408e44:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e48:	f001 f9ac 	bl	40a1a4 <__adddf3>
  408e4c:	4606      	mov	r6, r0
  408e4e:	460f      	mov	r7, r1
  408e50:	4640      	mov	r0, r8
  408e52:	4632      	mov	r2, r6
  408e54:	4649      	mov	r1, r9
  408e56:	463b      	mov	r3, r7
  408e58:	e9c4 6700 	strd	r6, r7, [r4]
  408e5c:	f001 f9a0 	bl	40a1a0 <__aeabi_dsub>
  408e60:	a323      	add	r3, pc, #140	; (adr r3, 408ef0 <__ieee754_rem_pio2+0x430>)
  408e62:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e66:	f001 f99d 	bl	40a1a4 <__adddf3>
  408e6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  408e6e:	e6bd      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408e70:	6862      	ldr	r2, [r4, #4]
  408e72:	4245      	negs	r5, r0
  408e74:	68e3      	ldr	r3, [r4, #12]
  408e76:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  408e7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  408e7e:	6062      	str	r2, [r4, #4]
  408e80:	60e3      	str	r3, [r4, #12]
  408e82:	e6b3      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408e84:	2303      	movs	r3, #3
  408e86:	e69a      	b.n	408bbe <__ieee754_rem_pio2+0xfe>
  408e88:	a311      	add	r3, pc, #68	; (adr r3, 408ed0 <__ieee754_rem_pio2+0x410>)
  408e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408e8e:	f001 f989 	bl	40a1a4 <__adddf3>
  408e92:	4680      	mov	r8, r0
  408e94:	4689      	mov	r9, r1
  408e96:	f04f 35ff 	mov.w	r5, #4294967295
  408e9a:	a30f      	add	r3, pc, #60	; (adr r3, 408ed8 <__ieee754_rem_pio2+0x418>)
  408e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ea0:	f001 f980 	bl	40a1a4 <__adddf3>
  408ea4:	4606      	mov	r6, r0
  408ea6:	460f      	mov	r7, r1
  408ea8:	4640      	mov	r0, r8
  408eaa:	4632      	mov	r2, r6
  408eac:	4649      	mov	r1, r9
  408eae:	463b      	mov	r3, r7
  408eb0:	e9c4 6700 	strd	r6, r7, [r4]
  408eb4:	f001 f974 	bl	40a1a0 <__aeabi_dsub>
  408eb8:	a307      	add	r3, pc, #28	; (adr r3, 408ed8 <__ieee754_rem_pio2+0x418>)
  408eba:	e9d3 2300 	ldrd	r2, r3, [r3]
  408ebe:	f001 f971 	bl	40a1a4 <__adddf3>
  408ec2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  408ec6:	e691      	b.n	408bec <__ieee754_rem_pio2+0x12c>
  408ec8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  408ecc:	e6f9      	b.n	408cc2 <__ieee754_rem_pio2+0x202>
  408ece:	bf00      	nop
  408ed0:	1a600000 	.word	0x1a600000
  408ed4:	3dd0b461 	.word	0x3dd0b461
  408ed8:	2e037073 	.word	0x2e037073
  408edc:	3ba3198a 	.word	0x3ba3198a
  408ee0:	2e000000 	.word	0x2e000000
  408ee4:	3ba3198a 	.word	0x3ba3198a
  408ee8:	252049c1 	.word	0x252049c1
  408eec:	397b839a 	.word	0x397b839a
  408ef0:	1a626331 	.word	0x1a626331
  408ef4:	3dd0b461 	.word	0x3dd0b461
  408ef8:	3ff921fb 	.word	0x3ff921fb

00408efc <__ieee754_sqrt>:
  408efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408f00:	4e53      	ldr	r6, [pc, #332]	; (409050 <__ieee754_sqrt+0x154>)
  408f02:	460c      	mov	r4, r1
  408f04:	4605      	mov	r5, r0
  408f06:	460b      	mov	r3, r1
  408f08:	46b6      	mov	lr, r6
  408f0a:	400e      	ands	r6, r1
  408f0c:	4576      	cmp	r6, lr
  408f0e:	f000 8085 	beq.w	40901c <__ieee754_sqrt+0x120>
  408f12:	2900      	cmp	r1, #0
  408f14:	4602      	mov	r2, r0
  408f16:	dd65      	ble.n	408fe4 <__ieee754_sqrt+0xe8>
  408f18:	150f      	asrs	r7, r1, #20
  408f1a:	d070      	beq.n	408ffe <__ieee754_sqrt+0x102>
  408f1c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  408f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
  408f24:	07f9      	lsls	r1, r7, #31
  408f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408f2a:	d453      	bmi.n	408fd4 <__ieee754_sqrt+0xd8>
  408f2c:	0fd1      	lsrs	r1, r2, #31
  408f2e:	2600      	movs	r6, #0
  408f30:	107f      	asrs	r7, r7, #1
  408f32:	2016      	movs	r0, #22
  408f34:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  408f38:	46b6      	mov	lr, r6
  408f3a:	0052      	lsls	r2, r2, #1
  408f3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  408f40:	eb0e 0401 	add.w	r4, lr, r1
  408f44:	0fd5      	lsrs	r5, r2, #31
  408f46:	0052      	lsls	r2, r2, #1
  408f48:	429c      	cmp	r4, r3
  408f4a:	dc03      	bgt.n	408f54 <__ieee754_sqrt+0x58>
  408f4c:	1b1b      	subs	r3, r3, r4
  408f4e:	eb04 0e01 	add.w	lr, r4, r1
  408f52:	440e      	add	r6, r1
  408f54:	3801      	subs	r0, #1
  408f56:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  408f5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408f5e:	d1ef      	bne.n	408f40 <__ieee754_sqrt+0x44>
  408f60:	2520      	movs	r5, #32
  408f62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408f66:	4684      	mov	ip, r0
  408f68:	4573      	cmp	r3, lr
  408f6a:	eb01 040c 	add.w	r4, r1, ip
  408f6e:	dc03      	bgt.n	408f78 <__ieee754_sqrt+0x7c>
  408f70:	4294      	cmp	r4, r2
  408f72:	d80e      	bhi.n	408f92 <__ieee754_sqrt+0x96>
  408f74:	4573      	cmp	r3, lr
  408f76:	d10c      	bne.n	408f92 <__ieee754_sqrt+0x96>
  408f78:	2c00      	cmp	r4, #0
  408f7a:	eb04 0c01 	add.w	ip, r4, r1
  408f7e:	db23      	blt.n	408fc8 <__ieee754_sqrt+0xcc>
  408f80:	46f0      	mov	r8, lr
  408f82:	4294      	cmp	r4, r2
  408f84:	ebce 0303 	rsb	r3, lr, r3
  408f88:	d900      	bls.n	408f8c <__ieee754_sqrt+0x90>
  408f8a:	3b01      	subs	r3, #1
  408f8c:	1b12      	subs	r2, r2, r4
  408f8e:	4408      	add	r0, r1
  408f90:	46c6      	mov	lr, r8
  408f92:	0fd4      	lsrs	r4, r2, #31
  408f94:	3d01      	subs	r5, #1
  408f96:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408f9a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  408f9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408fa2:	d1e1      	bne.n	408f68 <__ieee754_sqrt+0x6c>
  408fa4:	4313      	orrs	r3, r2
  408fa6:	d004      	beq.n	408fb2 <__ieee754_sqrt+0xb6>
  408fa8:	1c42      	adds	r2, r0, #1
  408faa:	d041      	beq.n	409030 <__ieee754_sqrt+0x134>
  408fac:	f000 0301 	and.w	r3, r0, #1
  408fb0:	4418      	add	r0, r3
  408fb2:	0840      	lsrs	r0, r0, #1
  408fb4:	1073      	asrs	r3, r6, #1
  408fb6:	4927      	ldr	r1, [pc, #156]	; (409054 <__ieee754_sqrt+0x158>)
  408fb8:	4419      	add	r1, r3
  408fba:	07f3      	lsls	r3, r6, #31
  408fbc:	d40f      	bmi.n	408fde <__ieee754_sqrt+0xe2>
  408fbe:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  408fc2:	4619      	mov	r1, r3
  408fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408fc8:	f1bc 0f00 	cmp.w	ip, #0
  408fcc:	dbd8      	blt.n	408f80 <__ieee754_sqrt+0x84>
  408fce:	f10e 0801 	add.w	r8, lr, #1
  408fd2:	e7d6      	b.n	408f82 <__ieee754_sqrt+0x86>
  408fd4:	0fd1      	lsrs	r1, r2, #31
  408fd6:	0052      	lsls	r2, r2, #1
  408fd8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  408fdc:	e7a6      	b.n	408f2c <__ieee754_sqrt+0x30>
  408fde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  408fe2:	e7ec      	b.n	408fbe <__ieee754_sqrt+0xc2>
  408fe4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  408fe8:	4306      	orrs	r6, r0
  408fea:	d0eb      	beq.n	408fc4 <__ieee754_sqrt+0xc8>
  408fec:	bb39      	cbnz	r1, 40903e <__ieee754_sqrt+0x142>
  408fee:	460f      	mov	r7, r1
  408ff0:	0ad3      	lsrs	r3, r2, #11
  408ff2:	3f15      	subs	r7, #21
  408ff4:	0552      	lsls	r2, r2, #21
  408ff6:	2b00      	cmp	r3, #0
  408ff8:	d0fa      	beq.n	408ff0 <__ieee754_sqrt+0xf4>
  408ffa:	02dc      	lsls	r4, r3, #11
  408ffc:	d41b      	bmi.n	409036 <__ieee754_sqrt+0x13a>
  408ffe:	2100      	movs	r1, #0
  409000:	005b      	lsls	r3, r3, #1
  409002:	3101      	adds	r1, #1
  409004:	02d8      	lsls	r0, r3, #11
  409006:	d5fb      	bpl.n	409000 <__ieee754_sqrt+0x104>
  409008:	f1c1 0401 	rsb	r4, r1, #1
  40900c:	f1c1 0020 	rsb	r0, r1, #32
  409010:	fa22 f000 	lsr.w	r0, r2, r0
  409014:	4427      	add	r7, r4
  409016:	408a      	lsls	r2, r1
  409018:	4303      	orrs	r3, r0
  40901a:	e77f      	b.n	408f1c <__ieee754_sqrt+0x20>
  40901c:	4602      	mov	r2, r0
  40901e:	460b      	mov	r3, r1
  409020:	f001 fa72 	bl	40a508 <__aeabi_dmul>
  409024:	462a      	mov	r2, r5
  409026:	4623      	mov	r3, r4
  409028:	f001 f8bc 	bl	40a1a4 <__adddf3>
  40902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409030:	3601      	adds	r6, #1
  409032:	4628      	mov	r0, r5
  409034:	e7be      	b.n	408fb4 <__ieee754_sqrt+0xb8>
  409036:	2020      	movs	r0, #32
  409038:	2401      	movs	r4, #1
  40903a:	2100      	movs	r1, #0
  40903c:	e7e8      	b.n	409010 <__ieee754_sqrt+0x114>
  40903e:	4602      	mov	r2, r0
  409040:	460b      	mov	r3, r1
  409042:	f001 f8ad 	bl	40a1a0 <__aeabi_dsub>
  409046:	4602      	mov	r2, r0
  409048:	460b      	mov	r3, r1
  40904a:	f001 fb87 	bl	40a75c <__aeabi_ddiv>
  40904e:	e7b9      	b.n	408fc4 <__ieee754_sqrt+0xc8>
  409050:	7ff00000 	.word	0x7ff00000
  409054:	3fe00000 	.word	0x3fe00000

00409058 <__kernel_cos>:
  409058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40905c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  409060:	b085      	sub	sp, #20
  409062:	460c      	mov	r4, r1
  409064:	4692      	mov	sl, r2
  409066:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
  40906a:	469b      	mov	fp, r3
  40906c:	4605      	mov	r5, r0
  40906e:	da6b      	bge.n	409148 <__kernel_cos+0xf0>
  409070:	f001 fce4 	bl	40aa3c <__aeabi_d2iz>
  409074:	2800      	cmp	r0, #0
  409076:	f000 80e7 	beq.w	409248 <__kernel_cos+0x1f0>
  40907a:	462a      	mov	r2, r5
  40907c:	4623      	mov	r3, r4
  40907e:	4628      	mov	r0, r5
  409080:	4621      	mov	r1, r4
  409082:	f001 fa41 	bl	40a508 <__aeabi_dmul>
  409086:	4680      	mov	r8, r0
  409088:	4689      	mov	r9, r1
  40908a:	a373      	add	r3, pc, #460	; (adr r3, 409258 <__kernel_cos+0x200>)
  40908c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409090:	f001 fa3a 	bl	40a508 <__aeabi_dmul>
  409094:	a372      	add	r3, pc, #456	; (adr r3, 409260 <__kernel_cos+0x208>)
  409096:	e9d3 2300 	ldrd	r2, r3, [r3]
  40909a:	f001 f883 	bl	40a1a4 <__adddf3>
  40909e:	4642      	mov	r2, r8
  4090a0:	464b      	mov	r3, r9
  4090a2:	f001 fa31 	bl	40a508 <__aeabi_dmul>
  4090a6:	a370      	add	r3, pc, #448	; (adr r3, 409268 <__kernel_cos+0x210>)
  4090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090ac:	f001 f878 	bl	40a1a0 <__aeabi_dsub>
  4090b0:	4642      	mov	r2, r8
  4090b2:	464b      	mov	r3, r9
  4090b4:	f001 fa28 	bl	40a508 <__aeabi_dmul>
  4090b8:	a36d      	add	r3, pc, #436	; (adr r3, 409270 <__kernel_cos+0x218>)
  4090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090be:	f001 f871 	bl	40a1a4 <__adddf3>
  4090c2:	4642      	mov	r2, r8
  4090c4:	464b      	mov	r3, r9
  4090c6:	f001 fa1f 	bl	40a508 <__aeabi_dmul>
  4090ca:	a36b      	add	r3, pc, #428	; (adr r3, 409278 <__kernel_cos+0x220>)
  4090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090d0:	f001 f866 	bl	40a1a0 <__aeabi_dsub>
  4090d4:	4642      	mov	r2, r8
  4090d6:	464b      	mov	r3, r9
  4090d8:	f001 fa16 	bl	40a508 <__aeabi_dmul>
  4090dc:	a368      	add	r3, pc, #416	; (adr r3, 409280 <__kernel_cos+0x228>)
  4090de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090e2:	f001 f85f 	bl	40a1a4 <__adddf3>
  4090e6:	4642      	mov	r2, r8
  4090e8:	464b      	mov	r3, r9
  4090ea:	f001 fa0d 	bl	40a508 <__aeabi_dmul>
  4090ee:	e9cd 0100 	strd	r0, r1, [sp]
  4090f2:	4640      	mov	r0, r8
  4090f4:	4649      	mov	r1, r9
  4090f6:	2200      	movs	r2, #0
  4090f8:	4b63      	ldr	r3, [pc, #396]	; (409288 <__kernel_cos+0x230>)
  4090fa:	f001 fa05 	bl	40a508 <__aeabi_dmul>
  4090fe:	4606      	mov	r6, r0
  409100:	460f      	mov	r7, r1
  409102:	4640      	mov	r0, r8
  409104:	4649      	mov	r1, r9
  409106:	e9dd 2300 	ldrd	r2, r3, [sp]
  40910a:	f001 f9fd 	bl	40a508 <__aeabi_dmul>
  40910e:	4680      	mov	r8, r0
  409110:	4689      	mov	r9, r1
  409112:	4652      	mov	r2, sl
  409114:	465b      	mov	r3, fp
  409116:	4628      	mov	r0, r5
  409118:	4621      	mov	r1, r4
  40911a:	f001 f9f5 	bl	40a508 <__aeabi_dmul>
  40911e:	4602      	mov	r2, r0
  409120:	460b      	mov	r3, r1
  409122:	4640      	mov	r0, r8
  409124:	4649      	mov	r1, r9
  409126:	f001 f83b 	bl	40a1a0 <__aeabi_dsub>
  40912a:	4602      	mov	r2, r0
  40912c:	460b      	mov	r3, r1
  40912e:	4630      	mov	r0, r6
  409130:	4639      	mov	r1, r7
  409132:	f001 f835 	bl	40a1a0 <__aeabi_dsub>
  409136:	4602      	mov	r2, r0
  409138:	460b      	mov	r3, r1
  40913a:	2000      	movs	r0, #0
  40913c:	4953      	ldr	r1, [pc, #332]	; (40928c <__kernel_cos+0x234>)
  40913e:	f001 f82f 	bl	40a1a0 <__aeabi_dsub>
  409142:	b005      	add	sp, #20
  409144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409148:	4602      	mov	r2, r0
  40914a:	460b      	mov	r3, r1
  40914c:	f001 f9dc 	bl	40a508 <__aeabi_dmul>
  409150:	4680      	mov	r8, r0
  409152:	4689      	mov	r9, r1
  409154:	a340      	add	r3, pc, #256	; (adr r3, 409258 <__kernel_cos+0x200>)
  409156:	e9d3 2300 	ldrd	r2, r3, [r3]
  40915a:	f001 f9d5 	bl	40a508 <__aeabi_dmul>
  40915e:	a340      	add	r3, pc, #256	; (adr r3, 409260 <__kernel_cos+0x208>)
  409160:	e9d3 2300 	ldrd	r2, r3, [r3]
  409164:	f001 f81e 	bl	40a1a4 <__adddf3>
  409168:	4642      	mov	r2, r8
  40916a:	464b      	mov	r3, r9
  40916c:	f001 f9cc 	bl	40a508 <__aeabi_dmul>
  409170:	a33d      	add	r3, pc, #244	; (adr r3, 409268 <__kernel_cos+0x210>)
  409172:	e9d3 2300 	ldrd	r2, r3, [r3]
  409176:	f001 f813 	bl	40a1a0 <__aeabi_dsub>
  40917a:	4642      	mov	r2, r8
  40917c:	464b      	mov	r3, r9
  40917e:	f001 f9c3 	bl	40a508 <__aeabi_dmul>
  409182:	a33b      	add	r3, pc, #236	; (adr r3, 409270 <__kernel_cos+0x218>)
  409184:	e9d3 2300 	ldrd	r2, r3, [r3]
  409188:	f001 f80c 	bl	40a1a4 <__adddf3>
  40918c:	4642      	mov	r2, r8
  40918e:	464b      	mov	r3, r9
  409190:	f001 f9ba 	bl	40a508 <__aeabi_dmul>
  409194:	a338      	add	r3, pc, #224	; (adr r3, 409278 <__kernel_cos+0x220>)
  409196:	e9d3 2300 	ldrd	r2, r3, [r3]
  40919a:	f001 f801 	bl	40a1a0 <__aeabi_dsub>
  40919e:	4642      	mov	r2, r8
  4091a0:	464b      	mov	r3, r9
  4091a2:	f001 f9b1 	bl	40a508 <__aeabi_dmul>
  4091a6:	a336      	add	r3, pc, #216	; (adr r3, 409280 <__kernel_cos+0x228>)
  4091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091ac:	f000 fffa 	bl	40a1a4 <__adddf3>
  4091b0:	464b      	mov	r3, r9
  4091b2:	4642      	mov	r2, r8
  4091b4:	f001 f9a8 	bl	40a508 <__aeabi_dmul>
  4091b8:	4b35      	ldr	r3, [pc, #212]	; (409290 <__kernel_cos+0x238>)
  4091ba:	429f      	cmp	r7, r3
  4091bc:	e9cd 0100 	strd	r0, r1, [sp]
  4091c0:	dd97      	ble.n	4090f2 <__kernel_cos+0x9a>
  4091c2:	4b34      	ldr	r3, [pc, #208]	; (409294 <__kernel_cos+0x23c>)
  4091c4:	2200      	movs	r2, #0
  4091c6:	429f      	cmp	r7, r3
  4091c8:	dc38      	bgt.n	40923c <__kernel_cos+0x1e4>
  4091ca:	f5a7 1300 	sub.w	r3, r7, #2097152	; 0x200000
  4091ce:	2000      	movs	r0, #0
  4091d0:	492e      	ldr	r1, [pc, #184]	; (40928c <__kernel_cos+0x234>)
  4091d2:	4616      	mov	r6, r2
  4091d4:	461f      	mov	r7, r3
  4091d6:	f000 ffe3 	bl	40a1a0 <__aeabi_dsub>
  4091da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4091de:	4640      	mov	r0, r8
  4091e0:	4649      	mov	r1, r9
  4091e2:	2200      	movs	r2, #0
  4091e4:	4b28      	ldr	r3, [pc, #160]	; (409288 <__kernel_cos+0x230>)
  4091e6:	f001 f98f 	bl	40a508 <__aeabi_dmul>
  4091ea:	4632      	mov	r2, r6
  4091ec:	463b      	mov	r3, r7
  4091ee:	f000 ffd7 	bl	40a1a0 <__aeabi_dsub>
  4091f2:	4606      	mov	r6, r0
  4091f4:	460f      	mov	r7, r1
  4091f6:	4640      	mov	r0, r8
  4091f8:	4649      	mov	r1, r9
  4091fa:	e9dd 2300 	ldrd	r2, r3, [sp]
  4091fe:	f001 f983 	bl	40a508 <__aeabi_dmul>
  409202:	4680      	mov	r8, r0
  409204:	4689      	mov	r9, r1
  409206:	4652      	mov	r2, sl
  409208:	465b      	mov	r3, fp
  40920a:	4628      	mov	r0, r5
  40920c:	4621      	mov	r1, r4
  40920e:	f001 f97b 	bl	40a508 <__aeabi_dmul>
  409212:	4602      	mov	r2, r0
  409214:	460b      	mov	r3, r1
  409216:	4640      	mov	r0, r8
  409218:	4649      	mov	r1, r9
  40921a:	f000 ffc1 	bl	40a1a0 <__aeabi_dsub>
  40921e:	4602      	mov	r2, r0
  409220:	460b      	mov	r3, r1
  409222:	4630      	mov	r0, r6
  409224:	4639      	mov	r1, r7
  409226:	f000 ffbb 	bl	40a1a0 <__aeabi_dsub>
  40922a:	4602      	mov	r2, r0
  40922c:	460b      	mov	r3, r1
  40922e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409232:	f000 ffb5 	bl	40a1a0 <__aeabi_dsub>
  409236:	b005      	add	sp, #20
  409238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40923c:	4b16      	ldr	r3, [pc, #88]	; (409298 <__kernel_cos+0x240>)
  40923e:	2600      	movs	r6, #0
  409240:	4f16      	ldr	r7, [pc, #88]	; (40929c <__kernel_cos+0x244>)
  409242:	e9cd 2302 	strd	r2, r3, [sp, #8]
  409246:	e7ca      	b.n	4091de <__kernel_cos+0x186>
  409248:	2000      	movs	r0, #0
  40924a:	4910      	ldr	r1, [pc, #64]	; (40928c <__kernel_cos+0x234>)
  40924c:	b005      	add	sp, #20
  40924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409252:	bf00      	nop
  409254:	f3af 8000 	nop.w
  409258:	be8838d4 	.word	0xbe8838d4
  40925c:	bda8fae9 	.word	0xbda8fae9
  409260:	bdb4b1c4 	.word	0xbdb4b1c4
  409264:	3e21ee9e 	.word	0x3e21ee9e
  409268:	809c52ad 	.word	0x809c52ad
  40926c:	3e927e4f 	.word	0x3e927e4f
  409270:	19cb1590 	.word	0x19cb1590
  409274:	3efa01a0 	.word	0x3efa01a0
  409278:	16c15177 	.word	0x16c15177
  40927c:	3f56c16c 	.word	0x3f56c16c
  409280:	5555554c 	.word	0x5555554c
  409284:	3fa55555 	.word	0x3fa55555
  409288:	3fe00000 	.word	0x3fe00000
  40928c:	3ff00000 	.word	0x3ff00000
  409290:	3fd33332 	.word	0x3fd33332
  409294:	3fe90000 	.word	0x3fe90000
  409298:	3fe70000 	.word	0x3fe70000
  40929c:	3fd20000 	.word	0x3fd20000

004092a0 <__kernel_rem_pio2>:
  4092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4092a4:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  4092a8:	461e      	mov	r6, r3
  4092aa:	4c84      	ldr	r4, [pc, #528]	; (4094bc <__kernel_rem_pio2+0x21c>)
  4092ac:	930c      	str	r3, [sp, #48]	; 0x30
  4092ae:	1ed3      	subs	r3, r2, #3
  4092b0:	9004      	str	r0, [sp, #16]
  4092b2:	3e01      	subs	r6, #1
  4092b4:	fb84 0403 	smull	r0, r4, r4, r3
  4092b8:	17db      	asrs	r3, r3, #31
  4092ba:	4d81      	ldr	r5, [pc, #516]	; (4094c0 <__kernel_rem_pio2+0x220>)
  4092bc:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  4092c0:	98a6      	ldr	r0, [sp, #664]	; 0x298
  4092c2:	910a      	str	r1, [sp, #40]	; 0x28
  4092c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4092c8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  4092cc:	9603      	str	r6, [sp, #12]
  4092ce:	4619      	mov	r1, r3
  4092d0:	930d      	str	r3, [sp, #52]	; 0x34
  4092d2:	43db      	mvns	r3, r3
  4092d4:	1834      	adds	r4, r6, r0
  4092d6:	9009      	str	r0, [sp, #36]	; 0x24
  4092d8:	eba1 0506 	sub.w	r5, r1, r6
  4092dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4092e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4092e4:	9308      	str	r3, [sp, #32]
  4092e6:	d416      	bmi.n	409316 <__kernel_rem_pio2+0x76>
  4092e8:	442c      	add	r4, r5
  4092ea:	ae22      	add	r6, sp, #136	; 0x88
  4092ec:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  4092ee:	3401      	adds	r4, #1
  4092f0:	e008      	b.n	409304 <__kernel_rem_pio2+0x64>
  4092f2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  4092f6:	3501      	adds	r5, #1
  4092f8:	f001 f8a0 	bl	40a43c <__aeabi_i2d>
  4092fc:	42a5      	cmp	r5, r4
  4092fe:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  409302:	d008      	beq.n	409316 <__kernel_rem_pio2+0x76>
  409304:	2d00      	cmp	r5, #0
  409306:	daf4      	bge.n	4092f2 <__kernel_rem_pio2+0x52>
  409308:	3501      	adds	r5, #1
  40930a:	2000      	movs	r0, #0
  40930c:	2100      	movs	r1, #0
  40930e:	42a5      	cmp	r5, r4
  409310:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  409314:	d1f6      	bne.n	409304 <__kernel_rem_pio2+0x64>
  409316:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409318:	2b00      	cmp	r3, #0
  40931a:	db31      	blt.n	409380 <__kernel_rem_pio2+0xe0>
  40931c:	a974      	add	r1, sp, #464	; 0x1d0
  40931e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409322:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
  409326:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  40932a:	a924      	add	r1, sp, #144	; 0x90
  40932c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  409330:	9a03      	ldr	r2, [sp, #12]
  409332:	00db      	lsls	r3, r3, #3
  409334:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
  409338:	9300      	str	r3, [sp, #0]
  40933a:	9b03      	ldr	r3, [sp, #12]
  40933c:	2b00      	cmp	r3, #0
  40933e:	f2c0 8195 	blt.w	40966c <__kernel_rem_pio2+0x3cc>
  409342:	9b04      	ldr	r3, [sp, #16]
  409344:	4644      	mov	r4, r8
  409346:	2600      	movs	r6, #0
  409348:	2700      	movs	r7, #0
  40934a:	f1a3 0a08 	sub.w	sl, r3, #8
  40934e:	9b00      	ldr	r3, [sp, #0]
  409350:	eb08 0503 	add.w	r5, r8, r3
  409354:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  409358:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40935c:	f001 f8d4 	bl	40a508 <__aeabi_dmul>
  409360:	4602      	mov	r2, r0
  409362:	460b      	mov	r3, r1
  409364:	4630      	mov	r0, r6
  409366:	4639      	mov	r1, r7
  409368:	f000 ff1c 	bl	40a1a4 <__adddf3>
  40936c:	42ac      	cmp	r4, r5
  40936e:	4606      	mov	r6, r0
  409370:	460f      	mov	r7, r1
  409372:	d1ef      	bne.n	409354 <__kernel_rem_pio2+0xb4>
  409374:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  409378:	45d9      	cmp	r9, fp
  40937a:	f108 0808 	add.w	r8, r8, #8
  40937e:	d1dc      	bne.n	40933a <__kernel_rem_pio2+0x9a>
  409380:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409382:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  409386:	a910      	add	r1, sp, #64	; 0x40
  409388:	4413      	add	r3, r2
  40938a:	4693      	mov	fp, r2
  40938c:	009b      	lsls	r3, r3, #2
  40938e:	1d1a      	adds	r2, r3, #4
  409390:	440b      	add	r3, r1
  409392:	930e      	str	r3, [sp, #56]	; 0x38
  409394:	460b      	mov	r3, r1
  409396:	4413      	add	r3, r2
  409398:	930f      	str	r3, [sp, #60]	; 0x3c
  40939a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  40939e:	a99c      	add	r1, sp, #624	; 0x270
  4093a0:	f1bb 0f00 	cmp.w	fp, #0
  4093a4:	461a      	mov	r2, r3
  4093a6:	9306      	str	r3, [sp, #24]
  4093a8:	440b      	add	r3, r1
  4093aa:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  4093ae:	dd28      	ble.n	409402 <__kernel_rem_pio2+0x162>
  4093b0:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
  4093b4:	af0f      	add	r7, sp, #60	; 0x3c
  4093b6:	eb0a 0602 	add.w	r6, sl, r2
  4093ba:	2200      	movs	r2, #0
  4093bc:	4b41      	ldr	r3, [pc, #260]	; (4094c4 <__kernel_rem_pio2+0x224>)
  4093be:	4620      	mov	r0, r4
  4093c0:	4629      	mov	r1, r5
  4093c2:	f001 f8a1 	bl	40a508 <__aeabi_dmul>
  4093c6:	f001 fb39 	bl	40aa3c <__aeabi_d2iz>
  4093ca:	f001 f837 	bl	40a43c <__aeabi_i2d>
  4093ce:	2200      	movs	r2, #0
  4093d0:	4b3d      	ldr	r3, [pc, #244]	; (4094c8 <__kernel_rem_pio2+0x228>)
  4093d2:	4680      	mov	r8, r0
  4093d4:	4689      	mov	r9, r1
  4093d6:	f001 f897 	bl	40a508 <__aeabi_dmul>
  4093da:	4602      	mov	r2, r0
  4093dc:	460b      	mov	r3, r1
  4093de:	4620      	mov	r0, r4
  4093e0:	4629      	mov	r1, r5
  4093e2:	f000 fedd 	bl	40a1a0 <__aeabi_dsub>
  4093e6:	f001 fb29 	bl	40aa3c <__aeabi_d2iz>
  4093ea:	4649      	mov	r1, r9
  4093ec:	f847 0f04 	str.w	r0, [r7, #4]!
  4093f0:	4640      	mov	r0, r8
  4093f2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
  4093f6:	f000 fed5 	bl	40a1a4 <__adddf3>
  4093fa:	4604      	mov	r4, r0
  4093fc:	4556      	cmp	r6, sl
  4093fe:	460d      	mov	r5, r1
  409400:	d1db      	bne.n	4093ba <__kernel_rem_pio2+0x11a>
  409402:	f8dd 9020 	ldr.w	r9, [sp, #32]
  409406:	4620      	mov	r0, r4
  409408:	4629      	mov	r1, r5
  40940a:	464a      	mov	r2, r9
  40940c:	f000 fe3c 	bl	40a088 <scalbn>
  409410:	2200      	movs	r2, #0
  409412:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  409416:	4604      	mov	r4, r0
  409418:	460d      	mov	r5, r1
  40941a:	f001 f875 	bl	40a508 <__aeabi_dmul>
  40941e:	f000 fd7f 	bl	409f20 <floor>
  409422:	2200      	movs	r2, #0
  409424:	4b29      	ldr	r3, [pc, #164]	; (4094cc <__kernel_rem_pio2+0x22c>)
  409426:	f001 f86f 	bl	40a508 <__aeabi_dmul>
  40942a:	4602      	mov	r2, r0
  40942c:	460b      	mov	r3, r1
  40942e:	4620      	mov	r0, r4
  409430:	4629      	mov	r1, r5
  409432:	f000 feb5 	bl	40a1a0 <__aeabi_dsub>
  409436:	460d      	mov	r5, r1
  409438:	4604      	mov	r4, r0
  40943a:	f001 faff 	bl	40aa3c <__aeabi_d2iz>
  40943e:	4680      	mov	r8, r0
  409440:	f000 fffc 	bl	40a43c <__aeabi_i2d>
  409444:	460b      	mov	r3, r1
  409446:	4602      	mov	r2, r0
  409448:	4629      	mov	r1, r5
  40944a:	4620      	mov	r0, r4
  40944c:	f000 fea8 	bl	40a1a0 <__aeabi_dsub>
  409450:	464b      	mov	r3, r9
  409452:	4606      	mov	r6, r0
  409454:	460f      	mov	r7, r1
  409456:	2b00      	cmp	r3, #0
  409458:	f340 80f4 	ble.w	409644 <__kernel_rem_pio2+0x3a4>
  40945c:	f10b 30ff 	add.w	r0, fp, #4294967295
  409460:	ab10      	add	r3, sp, #64	; 0x40
  409462:	f1c9 0218 	rsb	r2, r9, #24
  409466:	f1c9 0117 	rsb	r1, r9, #23
  40946a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  40946e:	fa43 f402 	asr.w	r4, r3, r2
  409472:	fa04 f502 	lsl.w	r5, r4, r2
  409476:	44a0      	add	r8, r4
  409478:	1b5d      	subs	r5, r3, r5
  40947a:	ab10      	add	r3, sp, #64	; 0x40
  40947c:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  409480:	410d      	asrs	r5, r1
  409482:	2d00      	cmp	r5, #0
  409484:	dd2c      	ble.n	4094e0 <__kernel_rem_pio2+0x240>
  409486:	f1bb 0f00 	cmp.w	fp, #0
  40948a:	f108 0801 	add.w	r8, r8, #1
  40948e:	f340 80ab 	ble.w	4095e8 <__kernel_rem_pio2+0x348>
  409492:	2300      	movs	r3, #0
  409494:	aa0f      	add	r2, sp, #60	; 0x3c
  409496:	461c      	mov	r4, r3
  409498:	e008      	b.n	4094ac <__kernel_rem_pio2+0x20c>
  40949a:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  40949e:	b108      	cbz	r0, 4094a4 <__kernel_rem_pio2+0x204>
  4094a0:	2401      	movs	r4, #1
  4094a2:	6011      	str	r1, [r2, #0]
  4094a4:	3301      	adds	r3, #1
  4094a6:	459b      	cmp	fp, r3
  4094a8:	f340 809f 	ble.w	4095ea <__kernel_rem_pio2+0x34a>
  4094ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4094b0:	f852 0f04 	ldr.w	r0, [r2, #4]!
  4094b4:	2c00      	cmp	r4, #0
  4094b6:	d0f0      	beq.n	40949a <__kernel_rem_pio2+0x1fa>
  4094b8:	1a09      	subs	r1, r1, r0
  4094ba:	e7f1      	b.n	4094a0 <__kernel_rem_pio2+0x200>
  4094bc:	2aaaaaab 	.word	0x2aaaaaab
  4094c0:	00413490 	.word	0x00413490
  4094c4:	3e700000 	.word	0x3e700000
  4094c8:	41700000 	.word	0x41700000
  4094cc:	40200000 	.word	0x40200000
  4094d0:	2200      	movs	r2, #0
  4094d2:	4bb2      	ldr	r3, [pc, #712]	; (40979c <__kernel_rem_pio2+0x4fc>)
  4094d4:	f001 fa9e 	bl	40aa14 <__aeabi_dcmpge>
  4094d8:	2800      	cmp	r0, #0
  4094da:	f040 80d1 	bne.w	409680 <__kernel_rem_pio2+0x3e0>
  4094de:	4605      	mov	r5, r0
  4094e0:	4630      	mov	r0, r6
  4094e2:	4639      	mov	r1, r7
  4094e4:	2200      	movs	r2, #0
  4094e6:	2300      	movs	r3, #0
  4094e8:	f001 fa76 	bl	40a9d8 <__aeabi_dcmpeq>
  4094ec:	2800      	cmp	r0, #0
  4094ee:	f000 80d9 	beq.w	4096a4 <__kernel_rem_pio2+0x404>
  4094f2:	f10b 3aff 	add.w	sl, fp, #4294967295
  4094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4094f8:	4553      	cmp	r3, sl
  4094fa:	dc0d      	bgt.n	409518 <__kernel_rem_pio2+0x278>
  4094fc:	ab10      	add	r3, sp, #64	; 0x40
  4094fe:	2200      	movs	r2, #0
  409500:	980f      	ldr	r0, [sp, #60]	; 0x3c
  409502:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  409506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40950a:	4283      	cmp	r3, r0
  40950c:	ea42 0201 	orr.w	r2, r2, r1
  409510:	d1f9      	bne.n	409506 <__kernel_rem_pio2+0x266>
  409512:	2a00      	cmp	r2, #0
  409514:	f040 8229 	bne.w	40996a <__kernel_rem_pio2+0x6ca>
  409518:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40951a:	aa10      	add	r2, sp, #64	; 0x40
  40951c:	3b01      	subs	r3, #1
  40951e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  409522:	2b00      	cmp	r3, #0
  409524:	f040 8239 	bne.w	40999a <__kernel_rem_pio2+0x6fa>
  409528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40952a:	2301      	movs	r3, #1
  40952c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  409530:	3301      	adds	r3, #1
  409532:	2900      	cmp	r1, #0
  409534:	d0fa      	beq.n	40952c <__kernel_rem_pio2+0x28c>
  409536:	445b      	add	r3, fp
  409538:	461a      	mov	r2, r3
  40953a:	930b      	str	r3, [sp, #44]	; 0x2c
  40953c:	f10b 0301 	add.w	r3, fp, #1
  409540:	4293      	cmp	r3, r2
  409542:	dc4b      	bgt.n	4095dc <__kernel_rem_pio2+0x33c>
  409544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409546:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  40954a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40954c:	f04f 0800 	mov.w	r8, #0
  409550:	4413      	add	r3, r2
  409552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409554:	445a      	add	r2, fp
  409556:	4499      	add	r9, r3
  409558:	ebcb 0b01 	rsb	fp, fp, r1
  40955c:	00d3      	lsls	r3, r2, #3
  40955e:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
  409560:	eb02 0289 	add.w	r2, r2, r9, lsl #2
  409564:	9307      	str	r3, [sp, #28]
  409566:	9200      	str	r2, [sp, #0]
  409568:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  40956c:	9205      	str	r2, [sp, #20]
  40956e:	aa24      	add	r2, sp, #144	; 0x90
  409570:	eb02 0b03 	add.w	fp, r2, r3
  409574:	aa74      	add	r2, sp, #464	; 0x1d0
  409576:	9b06      	ldr	r3, [sp, #24]
  409578:	eb02 0a03 	add.w	sl, r2, r3
  40957c:	9b00      	ldr	r3, [sp, #0]
  40957e:	f853 0f04 	ldr.w	r0, [r3, #4]!
  409582:	9300      	str	r3, [sp, #0]
  409584:	f000 ff5a 	bl	40a43c <__aeabi_i2d>
  409588:	9b03      	ldr	r3, [sp, #12]
  40958a:	2b00      	cmp	r3, #0
  40958c:	e8eb 0102 	strd	r0, r1, [fp], #8
  409590:	db27      	blt.n	4095e2 <__kernel_rem_pio2+0x342>
  409592:	9b07      	ldr	r3, [sp, #28]
  409594:	2600      	movs	r6, #0
  409596:	2700      	movs	r7, #0
  409598:	eb03 0408 	add.w	r4, r3, r8
  40959c:	9b06      	ldr	r3, [sp, #24]
  40959e:	eb08 0503 	add.w	r5, r8, r3
  4095a2:	9b04      	ldr	r3, [sp, #16]
  4095a4:	f1a3 0908 	sub.w	r9, r3, #8
  4095a8:	ab24      	add	r3, sp, #144	; 0x90
  4095aa:	441c      	add	r4, r3
  4095ac:	441d      	add	r5, r3
  4095ae:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  4095b2:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4095b6:	f000 ffa7 	bl	40a508 <__aeabi_dmul>
  4095ba:	4602      	mov	r2, r0
  4095bc:	460b      	mov	r3, r1
  4095be:	4630      	mov	r0, r6
  4095c0:	4639      	mov	r1, r7
  4095c2:	f000 fdef 	bl	40a1a4 <__adddf3>
  4095c6:	42ac      	cmp	r4, r5
  4095c8:	4606      	mov	r6, r0
  4095ca:	460f      	mov	r7, r1
  4095cc:	d1ef      	bne.n	4095ae <__kernel_rem_pio2+0x30e>
  4095ce:	f108 0808 	add.w	r8, r8, #8
  4095d2:	9b05      	ldr	r3, [sp, #20]
  4095d4:	4598      	cmp	r8, r3
  4095d6:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  4095da:	d1cf      	bne.n	40957c <__kernel_rem_pio2+0x2dc>
  4095dc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4095e0:	e6db      	b.n	40939a <__kernel_rem_pio2+0xfa>
  4095e2:	2600      	movs	r6, #0
  4095e4:	2700      	movs	r7, #0
  4095e6:	e7f2      	b.n	4095ce <__kernel_rem_pio2+0x32e>
  4095e8:	2400      	movs	r4, #0
  4095ea:	9b08      	ldr	r3, [sp, #32]
  4095ec:	2b00      	cmp	r3, #0
  4095ee:	dd0d      	ble.n	40960c <__kernel_rem_pio2+0x36c>
  4095f0:	2b01      	cmp	r3, #1
  4095f2:	d030      	beq.n	409656 <__kernel_rem_pio2+0x3b6>
  4095f4:	2b02      	cmp	r3, #2
  4095f6:	d109      	bne.n	40960c <__kernel_rem_pio2+0x36c>
  4095f8:	f10b 32ff 	add.w	r2, fp, #4294967295
  4095fc:	ab10      	add	r3, sp, #64	; 0x40
  4095fe:	a910      	add	r1, sp, #64	; 0x40
  409600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409604:	f3c3 0315 	ubfx	r3, r3, #0, #22
  409608:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40960c:	2d02      	cmp	r5, #2
  40960e:	f47f af67 	bne.w	4094e0 <__kernel_rem_pio2+0x240>
  409612:	4632      	mov	r2, r6
  409614:	463b      	mov	r3, r7
  409616:	2000      	movs	r0, #0
  409618:	4961      	ldr	r1, [pc, #388]	; (4097a0 <__kernel_rem_pio2+0x500>)
  40961a:	f000 fdc1 	bl	40a1a0 <__aeabi_dsub>
  40961e:	4606      	mov	r6, r0
  409620:	460f      	mov	r7, r1
  409622:	2c00      	cmp	r4, #0
  409624:	f43f af5c 	beq.w	4094e0 <__kernel_rem_pio2+0x240>
  409628:	9a08      	ldr	r2, [sp, #32]
  40962a:	2000      	movs	r0, #0
  40962c:	495c      	ldr	r1, [pc, #368]	; (4097a0 <__kernel_rem_pio2+0x500>)
  40962e:	f000 fd2b 	bl	40a088 <scalbn>
  409632:	4602      	mov	r2, r0
  409634:	460b      	mov	r3, r1
  409636:	4630      	mov	r0, r6
  409638:	4639      	mov	r1, r7
  40963a:	f000 fdb1 	bl	40a1a0 <__aeabi_dsub>
  40963e:	4606      	mov	r6, r0
  409640:	460f      	mov	r7, r1
  409642:	e74d      	b.n	4094e0 <__kernel_rem_pio2+0x240>
  409644:	f47f af44 	bne.w	4094d0 <__kernel_rem_pio2+0x230>
  409648:	f10b 33ff 	add.w	r3, fp, #4294967295
  40964c:	aa10      	add	r2, sp, #64	; 0x40
  40964e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  409652:	15ed      	asrs	r5, r5, #23
  409654:	e715      	b.n	409482 <__kernel_rem_pio2+0x1e2>
  409656:	f10b 32ff 	add.w	r2, fp, #4294967295
  40965a:	ab10      	add	r3, sp, #64	; 0x40
  40965c:	a910      	add	r1, sp, #64	; 0x40
  40965e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  409662:	f3c3 0316 	ubfx	r3, r3, #0, #23
  409666:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40966a:	e7cf      	b.n	40960c <__kernel_rem_pio2+0x36c>
  40966c:	2600      	movs	r6, #0
  40966e:	2700      	movs	r7, #0
  409670:	f108 0808 	add.w	r8, r8, #8
  409674:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  409678:	45d9      	cmp	r9, fp
  40967a:	f47f ae5e 	bne.w	40933a <__kernel_rem_pio2+0x9a>
  40967e:	e67f      	b.n	409380 <__kernel_rem_pio2+0xe0>
  409680:	f1bb 0f00 	cmp.w	fp, #0
  409684:	f108 0801 	add.w	r8, r8, #1
  409688:	bfc8      	it	gt
  40968a:	2502      	movgt	r5, #2
  40968c:	f73f af01 	bgt.w	409492 <__kernel_rem_pio2+0x1f2>
  409690:	4632      	mov	r2, r6
  409692:	463b      	mov	r3, r7
  409694:	2000      	movs	r0, #0
  409696:	4942      	ldr	r1, [pc, #264]	; (4097a0 <__kernel_rem_pio2+0x500>)
  409698:	f000 fd82 	bl	40a1a0 <__aeabi_dsub>
  40969c:	2502      	movs	r5, #2
  40969e:	4606      	mov	r6, r0
  4096a0:	460f      	mov	r7, r1
  4096a2:	e71d      	b.n	4094e0 <__kernel_rem_pio2+0x240>
  4096a4:	9b08      	ldr	r3, [sp, #32]
  4096a6:	4630      	mov	r0, r6
  4096a8:	4639      	mov	r1, r7
  4096aa:	9503      	str	r5, [sp, #12]
  4096ac:	425a      	negs	r2, r3
  4096ae:	f8cd 8014 	str.w	r8, [sp, #20]
  4096b2:	f000 fce9 	bl	40a088 <scalbn>
  4096b6:	2200      	movs	r2, #0
  4096b8:	4b3a      	ldr	r3, [pc, #232]	; (4097a4 <__kernel_rem_pio2+0x504>)
  4096ba:	4604      	mov	r4, r0
  4096bc:	460d      	mov	r5, r1
  4096be:	f001 f9a9 	bl	40aa14 <__aeabi_dcmpge>
  4096c2:	2800      	cmp	r0, #0
  4096c4:	f000 81e2 	beq.w	409a8c <__kernel_rem_pio2+0x7ec>
  4096c8:	2200      	movs	r2, #0
  4096ca:	4b37      	ldr	r3, [pc, #220]	; (4097a8 <__kernel_rem_pio2+0x508>)
  4096cc:	4620      	mov	r0, r4
  4096ce:	4629      	mov	r1, r5
  4096d0:	f000 ff1a 	bl	40a508 <__aeabi_dmul>
  4096d4:	9b08      	ldr	r3, [sp, #32]
  4096d6:	f10b 0a01 	add.w	sl, fp, #1
  4096da:	3318      	adds	r3, #24
  4096dc:	9308      	str	r3, [sp, #32]
  4096de:	f001 f9ad 	bl	40aa3c <__aeabi_d2iz>
  4096e2:	4606      	mov	r6, r0
  4096e4:	f000 feaa 	bl	40a43c <__aeabi_i2d>
  4096e8:	2200      	movs	r2, #0
  4096ea:	4b2e      	ldr	r3, [pc, #184]	; (4097a4 <__kernel_rem_pio2+0x504>)
  4096ec:	f000 ff0c 	bl	40a508 <__aeabi_dmul>
  4096f0:	460b      	mov	r3, r1
  4096f2:	4602      	mov	r2, r0
  4096f4:	4629      	mov	r1, r5
  4096f6:	4620      	mov	r0, r4
  4096f8:	f000 fd52 	bl	40a1a0 <__aeabi_dsub>
  4096fc:	f001 f99e 	bl	40aa3c <__aeabi_d2iz>
  409700:	ab10      	add	r3, sp, #64	; 0x40
  409702:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  409706:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
  40970a:	9a08      	ldr	r2, [sp, #32]
  40970c:	2000      	movs	r0, #0
  40970e:	4924      	ldr	r1, [pc, #144]	; (4097a0 <__kernel_rem_pio2+0x500>)
  409710:	f000 fcba 	bl	40a088 <scalbn>
  409714:	f1ba 0f00 	cmp.w	sl, #0
  409718:	4604      	mov	r4, r0
  40971a:	460d      	mov	r5, r1
  40971c:	f2c0 80d8 	blt.w	4098d0 <__kernel_rem_pio2+0x630>
  409720:	f10a 0301 	add.w	r3, sl, #1
  409724:	af74      	add	r7, sp, #464	; 0x1d0
  409726:	aa10      	add	r2, sp, #64	; 0x40
  409728:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40972c:	9300      	str	r3, [sp, #0]
  40972e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  409732:	eb07 0608 	add.w	r6, r7, r8
  409736:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  40973a:	f000 fe7f 	bl	40a43c <__aeabi_i2d>
  40973e:	4622      	mov	r2, r4
  409740:	462b      	mov	r3, r5
  409742:	f000 fee1 	bl	40a508 <__aeabi_dmul>
  409746:	2200      	movs	r2, #0
  409748:	4b17      	ldr	r3, [pc, #92]	; (4097a8 <__kernel_rem_pio2+0x508>)
  40974a:	e966 0102 	strd	r0, r1, [r6, #-8]!
  40974e:	4620      	mov	r0, r4
  409750:	4629      	mov	r1, r5
  409752:	f000 fed9 	bl	40a508 <__aeabi_dmul>
  409756:	42be      	cmp	r6, r7
  409758:	4604      	mov	r4, r0
  40975a:	460d      	mov	r5, r1
  40975c:	d1eb      	bne.n	409736 <__kernel_rem_pio2+0x496>
  40975e:	f1a8 0b08 	sub.w	fp, r8, #8
  409762:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  409766:	f8cd a018 	str.w	sl, [sp, #24]
  40976a:	f04f 0800 	mov.w	r8, #0
  40976e:	eb06 030b 	add.w	r3, r6, fp
  409772:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  409776:	f8cd 9010 	str.w	r9, [sp, #16]
  40977a:	469b      	mov	fp, r3
  40977c:	f1ba 0f00 	cmp.w	sl, #0
  409780:	f2c0 80a3 	blt.w	4098ca <__kernel_rem_pio2+0x62a>
  409784:	f1b8 0f00 	cmp.w	r8, #0
  409788:	f2c0 809f 	blt.w	4098ca <__kernel_rem_pio2+0x62a>
  40978c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4097ac <__kernel_rem_pio2+0x50c>
  409790:	465d      	mov	r5, fp
  409792:	2600      	movs	r6, #0
  409794:	2700      	movs	r7, #0
  409796:	2400      	movs	r4, #0
  409798:	e00c      	b.n	4097b4 <__kernel_rem_pio2+0x514>
  40979a:	bf00      	nop
  40979c:	3fe00000 	.word	0x3fe00000
  4097a0:	3ff00000 	.word	0x3ff00000
  4097a4:	41700000 	.word	0x41700000
  4097a8:	3e700000 	.word	0x3e700000
  4097ac:	00413498 	.word	0x00413498
  4097b0:	4544      	cmp	r4, r8
  4097b2:	dc10      	bgt.n	4097d6 <__kernel_rem_pio2+0x536>
  4097b4:	3401      	adds	r4, #1
  4097b6:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  4097ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  4097be:	f000 fea3 	bl	40a508 <__aeabi_dmul>
  4097c2:	4602      	mov	r2, r0
  4097c4:	460b      	mov	r3, r1
  4097c6:	4630      	mov	r0, r6
  4097c8:	4639      	mov	r1, r7
  4097ca:	f000 fceb 	bl	40a1a4 <__adddf3>
  4097ce:	45a2      	cmp	sl, r4
  4097d0:	4606      	mov	r6, r0
  4097d2:	460f      	mov	r7, r1
  4097d4:	daec      	bge.n	4097b0 <__kernel_rem_pio2+0x510>
  4097d6:	9b04      	ldr	r3, [sp, #16]
  4097d8:	f1ab 0b08 	sub.w	fp, fp, #8
  4097dc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4097e0:	f108 0801 	add.w	r8, r8, #1
  4097e4:	e9c3 6700 	strd	r6, r7, [r3]
  4097e8:	9b00      	ldr	r3, [sp, #0]
  4097ea:	4598      	cmp	r8, r3
  4097ec:	d1c6      	bne.n	40977c <__kernel_rem_pio2+0x4dc>
  4097ee:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4097f0:	f8dd a018 	ldr.w	sl, [sp, #24]
  4097f4:	f8dd 9010 	ldr.w	r9, [sp, #16]
  4097f8:	2b03      	cmp	r3, #3
  4097fa:	d83d      	bhi.n	409878 <__kernel_rem_pio2+0x5d8>
  4097fc:	e8df f013 	tbh	[pc, r3, lsl #1]
  409800:	00040043 	.word	0x00040043
  409804:	00cf0004 	.word	0x00cf0004
  409808:	2400      	movs	r4, #0
  40980a:	9b00      	ldr	r3, [sp, #0]
  40980c:	4626      	mov	r6, r4
  40980e:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
  409812:	4620      	mov	r0, r4
  409814:	4631      	mov	r1, r6
  409816:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  40981a:	f000 fcc3 	bl	40a1a4 <__adddf3>
  40981e:	4604      	mov	r4, r0
  409820:	454d      	cmp	r5, r9
  409822:	460e      	mov	r6, r1
  409824:	d1f5      	bne.n	409812 <__kernel_rem_pio2+0x572>
  409826:	9b03      	ldr	r3, [sp, #12]
  409828:	2b00      	cmp	r3, #0
  40982a:	f000 8084 	beq.w	409936 <__kernel_rem_pio2+0x696>
  40982e:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  409832:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409834:	4622      	mov	r2, r4
  409836:	4633      	mov	r3, r6
  409838:	6069      	str	r1, [r5, #4]
  40983a:	602c      	str	r4, [r5, #0]
  40983c:	e9d9 0100 	ldrd	r0, r1, [r9]
  409840:	f000 fcae 	bl	40a1a0 <__aeabi_dsub>
  409844:	f1ba 0f00 	cmp.w	sl, #0
  409848:	4602      	mov	r2, r0
  40984a:	460b      	mov	r3, r1
  40984c:	dd0d      	ble.n	40986a <__kernel_rem_pio2+0x5ca>
  40984e:	2401      	movs	r4, #1
  409850:	3401      	adds	r4, #1
  409852:	4610      	mov	r0, r2
  409854:	4619      	mov	r1, r3
  409856:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  40985a:	f000 fca3 	bl	40a1a4 <__adddf3>
  40985e:	45a2      	cmp	sl, r4
  409860:	4602      	mov	r2, r0
  409862:	460b      	mov	r3, r1
  409864:	daf4      	bge.n	409850 <__kernel_rem_pio2+0x5b0>
  409866:	9903      	ldr	r1, [sp, #12]
  409868:	b109      	cbz	r1, 40986e <__kernel_rem_pio2+0x5ce>
  40986a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40986e:	4619      	mov	r1, r3
  409870:	4610      	mov	r0, r2
  409872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409874:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409878:	9b05      	ldr	r3, [sp, #20]
  40987a:	f003 0007 	and.w	r0, r3, #7
  40987e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409886:	9b00      	ldr	r3, [sp, #0]
  409888:	2200      	movs	r2, #0
  40988a:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  40988e:	4613      	mov	r3, r2
  409890:	f10a 3aff 	add.w	sl, sl, #4294967295
  409894:	4610      	mov	r0, r2
  409896:	4619      	mov	r1, r3
  409898:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  40989c:	f000 fc82 	bl	40a1a4 <__adddf3>
  4098a0:	f1ba 3fff 	cmp.w	sl, #4294967295
  4098a4:	4602      	mov	r2, r0
  4098a6:	460b      	mov	r3, r1
  4098a8:	d1f2      	bne.n	409890 <__kernel_rem_pio2+0x5f0>
  4098aa:	9903      	ldr	r1, [sp, #12]
  4098ac:	b109      	cbz	r1, 4098b2 <__kernel_rem_pio2+0x612>
  4098ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4098b2:	4610      	mov	r0, r2
  4098b4:	4619      	mov	r1, r3
  4098b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4098b8:	e9c3 0100 	strd	r0, r1, [r3]
  4098bc:	9b05      	ldr	r3, [sp, #20]
  4098be:	f003 0007 	and.w	r0, r3, #7
  4098c2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4098ca:	2600      	movs	r6, #0
  4098cc:	2700      	movs	r7, #0
  4098ce:	e782      	b.n	4097d6 <__kernel_rem_pio2+0x536>
  4098d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  4098d2:	2b03      	cmp	r3, #3
  4098d4:	d8d0      	bhi.n	409878 <__kernel_rem_pio2+0x5d8>
  4098d6:	e8df f003 	tbb	[pc, r3]
  4098da:	2645      	.short	0x2645
  4098dc:	0226      	.short	0x0226
  4098de:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  4098e2:	2300      	movs	r3, #0
  4098e4:	9903      	ldr	r1, [sp, #12]
  4098e6:	461a      	mov	r2, r3
  4098e8:	2900      	cmp	r1, #0
  4098ea:	f000 80b9 	beq.w	409a60 <__kernel_rem_pio2+0x7c0>
  4098ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4098f0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4098f4:	f8d9 0004 	ldr.w	r0, [r9, #4]
  4098f8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  4098fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  409900:	613b      	str	r3, [r7, #16]
  409902:	9b05      	ldr	r3, [sp, #20]
  409904:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409908:	f8d9 4000 	ldr.w	r4, [r9]
  40990c:	f8d9 5008 	ldr.w	r5, [r9, #8]
  409910:	6078      	str	r0, [r7, #4]
  409912:	f003 0007 	and.w	r0, r3, #7
  409916:	617a      	str	r2, [r7, #20]
  409918:	60f9      	str	r1, [r7, #12]
  40991a:	603c      	str	r4, [r7, #0]
  40991c:	60bd      	str	r5, [r7, #8]
  40991e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409926:	2400      	movs	r4, #0
  409928:	9b03      	ldr	r3, [sp, #12]
  40992a:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  40992e:	4626      	mov	r6, r4
  409930:	2b00      	cmp	r3, #0
  409932:	f47f af7c 	bne.w	40982e <__kernel_rem_pio2+0x58e>
  409936:	4620      	mov	r0, r4
  409938:	4622      	mov	r2, r4
  40993a:	4631      	mov	r1, r6
  40993c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40993e:	4633      	mov	r3, r6
  409940:	e9c4 0100 	strd	r0, r1, [r4]
  409944:	e9d9 0100 	ldrd	r0, r1, [r9]
  409948:	f000 fc2a 	bl	40a1a0 <__aeabi_dsub>
  40994c:	f1ba 0f00 	cmp.w	sl, #0
  409950:	4602      	mov	r2, r0
  409952:	460b      	mov	r3, r1
  409954:	f73f af7b 	bgt.w	40984e <__kernel_rem_pio2+0x5ae>
  409958:	4619      	mov	r1, r3
  40995a:	4610      	mov	r0, r2
  40995c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40995e:	e9c3 0102 	strd	r0, r1, [r3, #8]
  409962:	e789      	b.n	409878 <__kernel_rem_pio2+0x5d8>
  409964:	2200      	movs	r2, #0
  409966:	4613      	mov	r3, r2
  409968:	e79f      	b.n	4098aa <__kernel_rem_pio2+0x60a>
  40996a:	9a08      	ldr	r2, [sp, #32]
  40996c:	ab10      	add	r3, sp, #64	; 0x40
  40996e:	9503      	str	r5, [sp, #12]
  409970:	3a18      	subs	r2, #24
  409972:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  409976:	f8cd 8014 	str.w	r8, [sp, #20]
  40997a:	9208      	str	r2, [sp, #32]
  40997c:	2b00      	cmp	r3, #0
  40997e:	f47f aec4 	bne.w	40970a <__kernel_rem_pio2+0x46a>
  409982:	ab10      	add	r3, sp, #64	; 0x40
  409984:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  409988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40998c:	f10a 3aff 	add.w	sl, sl, #4294967295
  409990:	3a18      	subs	r2, #24
  409992:	2900      	cmp	r1, #0
  409994:	d0f8      	beq.n	409988 <__kernel_rem_pio2+0x6e8>
  409996:	9208      	str	r2, [sp, #32]
  409998:	e6b7      	b.n	40970a <__kernel_rem_pio2+0x46a>
  40999a:	2301      	movs	r3, #1
  40999c:	e5cb      	b.n	409536 <__kernel_rem_pio2+0x296>
  40999e:	f1ba 0f00 	cmp.w	sl, #0
  4099a2:	dd9e      	ble.n	4098e2 <__kernel_rem_pio2+0x642>
  4099a4:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  4099a8:	eb09 0b08 	add.w	fp, r9, r8
  4099ac:	e9db 6700 	ldrd	r6, r7, [fp]
  4099b0:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
  4099b4:	4630      	mov	r0, r6
  4099b6:	4639      	mov	r1, r7
  4099b8:	e9cd 2300 	strd	r2, r3, [sp]
  4099bc:	f000 fbf2 	bl	40a1a4 <__adddf3>
  4099c0:	4604      	mov	r4, r0
  4099c2:	460d      	mov	r5, r1
  4099c4:	4622      	mov	r2, r4
  4099c6:	462b      	mov	r3, r5
  4099c8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4099cc:	f000 fbe8 	bl	40a1a0 <__aeabi_dsub>
  4099d0:	4602      	mov	r2, r0
  4099d2:	460b      	mov	r3, r1
  4099d4:	4630      	mov	r0, r6
  4099d6:	4639      	mov	r1, r7
  4099d8:	4626      	mov	r6, r4
  4099da:	f000 fbe3 	bl	40a1a4 <__adddf3>
  4099de:	45cb      	cmp	fp, r9
  4099e0:	462f      	mov	r7, r5
  4099e2:	e9cb 0102 	strd	r0, r1, [fp, #8]
  4099e6:	e9cb 4500 	strd	r4, r5, [fp]
  4099ea:	d1e1      	bne.n	4099b0 <__kernel_rem_pio2+0x710>
  4099ec:	f1ba 0f01 	cmp.w	sl, #1
  4099f0:	f77f af77 	ble.w	4098e2 <__kernel_rem_pio2+0x642>
  4099f4:	eb09 0a08 	add.w	sl, r9, r8
  4099f8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  4099fc:	e9da 6700 	ldrd	r6, r7, [sl]
  409a00:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  409a04:	4632      	mov	r2, r6
  409a06:	463b      	mov	r3, r7
  409a08:	e9cd 0100 	strd	r0, r1, [sp]
  409a0c:	f000 fbca 	bl	40a1a4 <__adddf3>
  409a10:	4604      	mov	r4, r0
  409a12:	460d      	mov	r5, r1
  409a14:	4622      	mov	r2, r4
  409a16:	462b      	mov	r3, r5
  409a18:	e9dd 0100 	ldrd	r0, r1, [sp]
  409a1c:	f000 fbc0 	bl	40a1a0 <__aeabi_dsub>
  409a20:	4632      	mov	r2, r6
  409a22:	463b      	mov	r3, r7
  409a24:	4626      	mov	r6, r4
  409a26:	f000 fbbd 	bl	40a1a4 <__adddf3>
  409a2a:	45da      	cmp	sl, fp
  409a2c:	462f      	mov	r7, r5
  409a2e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  409a32:	e9ca 4500 	strd	r4, r5, [sl]
  409a36:	d1e3      	bne.n	409a00 <__kernel_rem_pio2+0x760>
  409a38:	f108 0408 	add.w	r4, r8, #8
  409a3c:	2300      	movs	r3, #0
  409a3e:	ad50      	add	r5, sp, #320	; 0x140
  409a40:	444c      	add	r4, r9
  409a42:	461a      	mov	r2, r3
  409a44:	4618      	mov	r0, r3
  409a46:	4611      	mov	r1, r2
  409a48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  409a4c:	f000 fbaa 	bl	40a1a4 <__adddf3>
  409a50:	4603      	mov	r3, r0
  409a52:	42ac      	cmp	r4, r5
  409a54:	460a      	mov	r2, r1
  409a56:	d1f5      	bne.n	409a44 <__kernel_rem_pio2+0x7a4>
  409a58:	9903      	ldr	r1, [sp, #12]
  409a5a:	2900      	cmp	r1, #0
  409a5c:	f47f af47 	bne.w	4098ee <__kernel_rem_pio2+0x64e>
  409a60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409a62:	4618      	mov	r0, r3
  409a64:	4611      	mov	r1, r2
  409a66:	4604      	mov	r4, r0
  409a68:	460d      	mov	r5, r1
  409a6a:	e9d9 2300 	ldrd	r2, r3, [r9]
  409a6e:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
  409a72:	e9c7 2300 	strd	r2, r3, [r7]
  409a76:	9b05      	ldr	r3, [sp, #20]
  409a78:	e9c7 0102 	strd	r0, r1, [r7, #8]
  409a7c:	f003 0007 	and.w	r0, r3, #7
  409a80:	e9c7 4504 	strd	r4, r5, [r7, #16]
  409a84:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  409a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409a8c:	4620      	mov	r0, r4
  409a8e:	4629      	mov	r1, r5
  409a90:	f000 ffd4 	bl	40aa3c <__aeabi_d2iz>
  409a94:	ab10      	add	r3, sp, #64	; 0x40
  409a96:	46da      	mov	sl, fp
  409a98:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  409a9c:	e635      	b.n	40970a <__kernel_rem_pio2+0x46a>
  409a9e:	bf00      	nop

00409aa0 <__kernel_sin>:
  409aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409aa4:	4699      	mov	r9, r3
  409aa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  409aaa:	b085      	sub	sp, #20
  409aac:	460c      	mov	r4, r1
  409aae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  409ab2:	4690      	mov	r8, r2
  409ab4:	4605      	mov	r5, r0
  409ab6:	da04      	bge.n	409ac2 <__kernel_sin+0x22>
  409ab8:	f000 ffc0 	bl	40aa3c <__aeabi_d2iz>
  409abc:	2800      	cmp	r0, #0
  409abe:	f000 8083 	beq.w	409bc8 <__kernel_sin+0x128>
  409ac2:	462a      	mov	r2, r5
  409ac4:	4623      	mov	r3, r4
  409ac6:	4628      	mov	r0, r5
  409ac8:	4621      	mov	r1, r4
  409aca:	f000 fd1d 	bl	40a508 <__aeabi_dmul>
  409ace:	4606      	mov	r6, r0
  409ad0:	460f      	mov	r7, r1
  409ad2:	462a      	mov	r2, r5
  409ad4:	4623      	mov	r3, r4
  409ad6:	f000 fd17 	bl	40a508 <__aeabi_dmul>
  409ada:	4682      	mov	sl, r0
  409adc:	468b      	mov	fp, r1
  409ade:	4630      	mov	r0, r6
  409ae0:	4639      	mov	r1, r7
  409ae2:	a33d      	add	r3, pc, #244	; (adr r3, 409bd8 <__kernel_sin+0x138>)
  409ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
  409ae8:	f000 fd0e 	bl	40a508 <__aeabi_dmul>
  409aec:	a33c      	add	r3, pc, #240	; (adr r3, 409be0 <__kernel_sin+0x140>)
  409aee:	e9d3 2300 	ldrd	r2, r3, [r3]
  409af2:	f000 fb55 	bl	40a1a0 <__aeabi_dsub>
  409af6:	4632      	mov	r2, r6
  409af8:	463b      	mov	r3, r7
  409afa:	f000 fd05 	bl	40a508 <__aeabi_dmul>
  409afe:	a33a      	add	r3, pc, #232	; (adr r3, 409be8 <__kernel_sin+0x148>)
  409b00:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b04:	f000 fb4e 	bl	40a1a4 <__adddf3>
  409b08:	4632      	mov	r2, r6
  409b0a:	463b      	mov	r3, r7
  409b0c:	f000 fcfc 	bl	40a508 <__aeabi_dmul>
  409b10:	a337      	add	r3, pc, #220	; (adr r3, 409bf0 <__kernel_sin+0x150>)
  409b12:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b16:	f000 fb43 	bl	40a1a0 <__aeabi_dsub>
  409b1a:	4632      	mov	r2, r6
  409b1c:	463b      	mov	r3, r7
  409b1e:	f000 fcf3 	bl	40a508 <__aeabi_dmul>
  409b22:	a335      	add	r3, pc, #212	; (adr r3, 409bf8 <__kernel_sin+0x158>)
  409b24:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b28:	f000 fb3c 	bl	40a1a4 <__adddf3>
  409b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409b2e:	e9cd 0100 	strd	r0, r1, [sp]
  409b32:	b39b      	cbz	r3, 409b9c <__kernel_sin+0xfc>
  409b34:	4640      	mov	r0, r8
  409b36:	4649      	mov	r1, r9
  409b38:	2200      	movs	r2, #0
  409b3a:	4b33      	ldr	r3, [pc, #204]	; (409c08 <__kernel_sin+0x168>)
  409b3c:	f000 fce4 	bl	40a508 <__aeabi_dmul>
  409b40:	e9dd 2300 	ldrd	r2, r3, [sp]
  409b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409b48:	4650      	mov	r0, sl
  409b4a:	4659      	mov	r1, fp
  409b4c:	f000 fcdc 	bl	40a508 <__aeabi_dmul>
  409b50:	4602      	mov	r2, r0
  409b52:	460b      	mov	r3, r1
  409b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409b58:	f000 fb22 	bl	40a1a0 <__aeabi_dsub>
  409b5c:	4632      	mov	r2, r6
  409b5e:	463b      	mov	r3, r7
  409b60:	f000 fcd2 	bl	40a508 <__aeabi_dmul>
  409b64:	4642      	mov	r2, r8
  409b66:	464b      	mov	r3, r9
  409b68:	f000 fb1a 	bl	40a1a0 <__aeabi_dsub>
  409b6c:	4606      	mov	r6, r0
  409b6e:	460f      	mov	r7, r1
  409b70:	4650      	mov	r0, sl
  409b72:	4659      	mov	r1, fp
  409b74:	a322      	add	r3, pc, #136	; (adr r3, 409c00 <__kernel_sin+0x160>)
  409b76:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b7a:	f000 fcc5 	bl	40a508 <__aeabi_dmul>
  409b7e:	4602      	mov	r2, r0
  409b80:	460b      	mov	r3, r1
  409b82:	4630      	mov	r0, r6
  409b84:	4639      	mov	r1, r7
  409b86:	f000 fb0d 	bl	40a1a4 <__adddf3>
  409b8a:	4602      	mov	r2, r0
  409b8c:	460b      	mov	r3, r1
  409b8e:	4628      	mov	r0, r5
  409b90:	4621      	mov	r1, r4
  409b92:	f000 fb05 	bl	40a1a0 <__aeabi_dsub>
  409b96:	b005      	add	sp, #20
  409b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
  409ba0:	4630      	mov	r0, r6
  409ba2:	4639      	mov	r1, r7
  409ba4:	f000 fcb0 	bl	40a508 <__aeabi_dmul>
  409ba8:	a315      	add	r3, pc, #84	; (adr r3, 409c00 <__kernel_sin+0x160>)
  409baa:	e9d3 2300 	ldrd	r2, r3, [r3]
  409bae:	f000 faf7 	bl	40a1a0 <__aeabi_dsub>
  409bb2:	4652      	mov	r2, sl
  409bb4:	465b      	mov	r3, fp
  409bb6:	f000 fca7 	bl	40a508 <__aeabi_dmul>
  409bba:	462a      	mov	r2, r5
  409bbc:	4623      	mov	r3, r4
  409bbe:	f000 faf1 	bl	40a1a4 <__adddf3>
  409bc2:	b005      	add	sp, #20
  409bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bc8:	4628      	mov	r0, r5
  409bca:	4621      	mov	r1, r4
  409bcc:	b005      	add	sp, #20
  409bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409bd2:	bf00      	nop
  409bd4:	f3af 8000 	nop.w
  409bd8:	5acfd57c 	.word	0x5acfd57c
  409bdc:	3de5d93a 	.word	0x3de5d93a
  409be0:	8a2b9ceb 	.word	0x8a2b9ceb
  409be4:	3e5ae5e6 	.word	0x3e5ae5e6
  409be8:	57b1fe7d 	.word	0x57b1fe7d
  409bec:	3ec71de3 	.word	0x3ec71de3
  409bf0:	19c161d5 	.word	0x19c161d5
  409bf4:	3f2a01a0 	.word	0x3f2a01a0
  409bf8:	1110f8a6 	.word	0x1110f8a6
  409bfc:	3f811111 	.word	0x3f811111
  409c00:	55555549 	.word	0x55555549
  409c04:	3fc55555 	.word	0x3fc55555
  409c08:	3fe00000 	.word	0x3fe00000
  409c0c:	00000000 	.word	0x00000000

00409c10 <atan>:
  409c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c14:	4bb2      	ldr	r3, [pc, #712]	; (409ee0 <atan+0x2d0>)
  409c16:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
  409c1a:	460d      	mov	r5, r1
  409c1c:	4604      	mov	r4, r0
  409c1e:	4598      	cmp	r8, r3
  409c20:	468b      	mov	fp, r1
  409c22:	dd11      	ble.n	409c48 <atan+0x38>
  409c24:	4baf      	ldr	r3, [pc, #700]	; (409ee4 <atan+0x2d4>)
  409c26:	4598      	cmp	r8, r3
  409c28:	dc04      	bgt.n	409c34 <atan+0x24>
  409c2a:	f040 80db 	bne.w	409de4 <atan+0x1d4>
  409c2e:	2800      	cmp	r0, #0
  409c30:	f000 80d8 	beq.w	409de4 <atan+0x1d4>
  409c34:	4620      	mov	r0, r4
  409c36:	4622      	mov	r2, r4
  409c38:	4629      	mov	r1, r5
  409c3a:	462b      	mov	r3, r5
  409c3c:	f000 fab2 	bl	40a1a4 <__adddf3>
  409c40:	4604      	mov	r4, r0
  409c42:	4620      	mov	r0, r4
  409c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409c48:	4ba7      	ldr	r3, [pc, #668]	; (409ee8 <atan+0x2d8>)
  409c4a:	4598      	cmp	r8, r3
  409c4c:	f300 80ad 	bgt.w	409daa <atan+0x19a>
  409c50:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  409c54:	4598      	cmp	r8, r3
  409c56:	f340 8098 	ble.w	409d8a <atan+0x17a>
  409c5a:	f04f 3aff 	mov.w	sl, #4294967295
  409c5e:	4622      	mov	r2, r4
  409c60:	462b      	mov	r3, r5
  409c62:	4620      	mov	r0, r4
  409c64:	4629      	mov	r1, r5
  409c66:	f000 fc4f 	bl	40a508 <__aeabi_dmul>
  409c6a:	4602      	mov	r2, r0
  409c6c:	460b      	mov	r3, r1
  409c6e:	4680      	mov	r8, r0
  409c70:	4689      	mov	r9, r1
  409c72:	f000 fc49 	bl	40a508 <__aeabi_dmul>
  409c76:	4606      	mov	r6, r0
  409c78:	460f      	mov	r7, r1
  409c7a:	a381      	add	r3, pc, #516	; (adr r3, 409e80 <atan+0x270>)
  409c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c80:	f000 fc42 	bl	40a508 <__aeabi_dmul>
  409c84:	a380      	add	r3, pc, #512	; (adr r3, 409e88 <atan+0x278>)
  409c86:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c8a:	f000 fa8b 	bl	40a1a4 <__adddf3>
  409c8e:	4632      	mov	r2, r6
  409c90:	463b      	mov	r3, r7
  409c92:	f000 fc39 	bl	40a508 <__aeabi_dmul>
  409c96:	a37e      	add	r3, pc, #504	; (adr r3, 409e90 <atan+0x280>)
  409c98:	e9d3 2300 	ldrd	r2, r3, [r3]
  409c9c:	f000 fa82 	bl	40a1a4 <__adddf3>
  409ca0:	4632      	mov	r2, r6
  409ca2:	463b      	mov	r3, r7
  409ca4:	f000 fc30 	bl	40a508 <__aeabi_dmul>
  409ca8:	a37b      	add	r3, pc, #492	; (adr r3, 409e98 <atan+0x288>)
  409caa:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cae:	f000 fa79 	bl	40a1a4 <__adddf3>
  409cb2:	4632      	mov	r2, r6
  409cb4:	463b      	mov	r3, r7
  409cb6:	f000 fc27 	bl	40a508 <__aeabi_dmul>
  409cba:	a379      	add	r3, pc, #484	; (adr r3, 409ea0 <atan+0x290>)
  409cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cc0:	f000 fa70 	bl	40a1a4 <__adddf3>
  409cc4:	4632      	mov	r2, r6
  409cc6:	463b      	mov	r3, r7
  409cc8:	f000 fc1e 	bl	40a508 <__aeabi_dmul>
  409ccc:	a376      	add	r3, pc, #472	; (adr r3, 409ea8 <atan+0x298>)
  409cce:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cd2:	f000 fa67 	bl	40a1a4 <__adddf3>
  409cd6:	4642      	mov	r2, r8
  409cd8:	464b      	mov	r3, r9
  409cda:	f000 fc15 	bl	40a508 <__aeabi_dmul>
  409cde:	4680      	mov	r8, r0
  409ce0:	4689      	mov	r9, r1
  409ce2:	4630      	mov	r0, r6
  409ce4:	4639      	mov	r1, r7
  409ce6:	a372      	add	r3, pc, #456	; (adr r3, 409eb0 <atan+0x2a0>)
  409ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cec:	f000 fc0c 	bl	40a508 <__aeabi_dmul>
  409cf0:	a371      	add	r3, pc, #452	; (adr r3, 409eb8 <atan+0x2a8>)
  409cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
  409cf6:	f000 fa53 	bl	40a1a0 <__aeabi_dsub>
  409cfa:	4632      	mov	r2, r6
  409cfc:	463b      	mov	r3, r7
  409cfe:	f000 fc03 	bl	40a508 <__aeabi_dmul>
  409d02:	a36f      	add	r3, pc, #444	; (adr r3, 409ec0 <atan+0x2b0>)
  409d04:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d08:	f000 fa4a 	bl	40a1a0 <__aeabi_dsub>
  409d0c:	4632      	mov	r2, r6
  409d0e:	463b      	mov	r3, r7
  409d10:	f000 fbfa 	bl	40a508 <__aeabi_dmul>
  409d14:	a36c      	add	r3, pc, #432	; (adr r3, 409ec8 <atan+0x2b8>)
  409d16:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d1a:	f000 fa41 	bl	40a1a0 <__aeabi_dsub>
  409d1e:	4632      	mov	r2, r6
  409d20:	463b      	mov	r3, r7
  409d22:	f000 fbf1 	bl	40a508 <__aeabi_dmul>
  409d26:	a36a      	add	r3, pc, #424	; (adr r3, 409ed0 <atan+0x2c0>)
  409d28:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d2c:	f000 fa38 	bl	40a1a0 <__aeabi_dsub>
  409d30:	4632      	mov	r2, r6
  409d32:	463b      	mov	r3, r7
  409d34:	f000 fbe8 	bl	40a508 <__aeabi_dmul>
  409d38:	f1ba 3fff 	cmp.w	sl, #4294967295
  409d3c:	4602      	mov	r2, r0
  409d3e:	460b      	mov	r3, r1
  409d40:	d05a      	beq.n	409df8 <atan+0x1e8>
  409d42:	4640      	mov	r0, r8
  409d44:	4649      	mov	r1, r9
  409d46:	f000 fa2d 	bl	40a1a4 <__adddf3>
  409d4a:	4622      	mov	r2, r4
  409d4c:	462b      	mov	r3, r5
  409d4e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
  409d52:	f000 fbd9 	bl	40a508 <__aeabi_dmul>
  409d56:	4e65      	ldr	r6, [pc, #404]	; (409eec <atan+0x2dc>)
  409d58:	4b65      	ldr	r3, [pc, #404]	; (409ef0 <atan+0x2e0>)
  409d5a:	4456      	add	r6, sl
  409d5c:	449a      	add	sl, r3
  409d5e:	e9da 2300 	ldrd	r2, r3, [sl]
  409d62:	f000 fa1d 	bl	40a1a0 <__aeabi_dsub>
  409d66:	4622      	mov	r2, r4
  409d68:	462b      	mov	r3, r5
  409d6a:	f000 fa19 	bl	40a1a0 <__aeabi_dsub>
  409d6e:	4602      	mov	r2, r0
  409d70:	460b      	mov	r3, r1
  409d72:	e9d6 0100 	ldrd	r0, r1, [r6]
  409d76:	f000 fa13 	bl	40a1a0 <__aeabi_dsub>
  409d7a:	f1bb 0f00 	cmp.w	fp, #0
  409d7e:	4604      	mov	r4, r0
  409d80:	f6bf af5f 	bge.w	409c42 <atan+0x32>
  409d84:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409d88:	e75b      	b.n	409c42 <atan+0x32>
  409d8a:	a353      	add	r3, pc, #332	; (adr r3, 409ed8 <atan+0x2c8>)
  409d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
  409d90:	f000 fa08 	bl	40a1a4 <__adddf3>
  409d94:	2200      	movs	r2, #0
  409d96:	4b57      	ldr	r3, [pc, #348]	; (409ef4 <atan+0x2e4>)
  409d98:	f000 fe46 	bl	40aa28 <__aeabi_dcmpgt>
  409d9c:	2800      	cmp	r0, #0
  409d9e:	f43f af5c 	beq.w	409c5a <atan+0x4a>
  409da2:	4629      	mov	r1, r5
  409da4:	4620      	mov	r0, r4
  409da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409daa:	f000 f8b3 	bl	409f14 <fabs>
  409dae:	4b52      	ldr	r3, [pc, #328]	; (409ef8 <atan+0x2e8>)
  409db0:	4606      	mov	r6, r0
  409db2:	460f      	mov	r7, r1
  409db4:	4598      	cmp	r8, r3
  409db6:	dc2f      	bgt.n	409e18 <atan+0x208>
  409db8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  409dbc:	4598      	cmp	r8, r3
  409dbe:	dc54      	bgt.n	409e6a <atan+0x25a>
  409dc0:	4602      	mov	r2, r0
  409dc2:	460b      	mov	r3, r1
  409dc4:	f000 f9ee 	bl	40a1a4 <__adddf3>
  409dc8:	2200      	movs	r2, #0
  409dca:	4b4a      	ldr	r3, [pc, #296]	; (409ef4 <atan+0x2e4>)
  409dcc:	f04f 0a00 	mov.w	sl, #0
  409dd0:	f000 f9e6 	bl	40a1a0 <__aeabi_dsub>
  409dd4:	2200      	movs	r2, #0
  409dd6:	4604      	mov	r4, r0
  409dd8:	460d      	mov	r5, r1
  409dda:	4630      	mov	r0, r6
  409ddc:	4639      	mov	r1, r7
  409dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  409de2:	e02c      	b.n	409e3e <atan+0x22e>
  409de4:	4b45      	ldr	r3, [pc, #276]	; (409efc <atan+0x2ec>)
  409de6:	4c46      	ldr	r4, [pc, #280]	; (409f00 <atan+0x2f0>)
  409de8:	4946      	ldr	r1, [pc, #280]	; (409f04 <atan+0x2f4>)
  409dea:	4620      	mov	r0, r4
  409dec:	f1bb 0f00 	cmp.w	fp, #0
  409df0:	bfc8      	it	gt
  409df2:	4619      	movgt	r1, r3
  409df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409df8:	4640      	mov	r0, r8
  409dfa:	4649      	mov	r1, r9
  409dfc:	f000 f9d2 	bl	40a1a4 <__adddf3>
  409e00:	4622      	mov	r2, r4
  409e02:	462b      	mov	r3, r5
  409e04:	f000 fb80 	bl	40a508 <__aeabi_dmul>
  409e08:	4602      	mov	r2, r0
  409e0a:	460b      	mov	r3, r1
  409e0c:	4620      	mov	r0, r4
  409e0e:	4629      	mov	r1, r5
  409e10:	f000 f9c6 	bl	40a1a0 <__aeabi_dsub>
  409e14:	4604      	mov	r4, r0
  409e16:	e714      	b.n	409c42 <atan+0x32>
  409e18:	4b3b      	ldr	r3, [pc, #236]	; (409f08 <atan+0x2f8>)
  409e1a:	4598      	cmp	r8, r3
  409e1c:	dc1a      	bgt.n	409e54 <atan+0x244>
  409e1e:	2200      	movs	r2, #0
  409e20:	4b3a      	ldr	r3, [pc, #232]	; (409f0c <atan+0x2fc>)
  409e22:	f000 f9bd 	bl	40a1a0 <__aeabi_dsub>
  409e26:	2200      	movs	r2, #0
  409e28:	4604      	mov	r4, r0
  409e2a:	460d      	mov	r5, r1
  409e2c:	4630      	mov	r0, r6
  409e2e:	4639      	mov	r1, r7
  409e30:	4b36      	ldr	r3, [pc, #216]	; (409f0c <atan+0x2fc>)
  409e32:	f04f 0a02 	mov.w	sl, #2
  409e36:	f000 fb67 	bl	40a508 <__aeabi_dmul>
  409e3a:	2200      	movs	r2, #0
  409e3c:	4b2d      	ldr	r3, [pc, #180]	; (409ef4 <atan+0x2e4>)
  409e3e:	f000 f9b1 	bl	40a1a4 <__adddf3>
  409e42:	4602      	mov	r2, r0
  409e44:	460b      	mov	r3, r1
  409e46:	4620      	mov	r0, r4
  409e48:	4629      	mov	r1, r5
  409e4a:	f000 fc87 	bl	40a75c <__aeabi_ddiv>
  409e4e:	4604      	mov	r4, r0
  409e50:	460d      	mov	r5, r1
  409e52:	e704      	b.n	409c5e <atan+0x4e>
  409e54:	4602      	mov	r2, r0
  409e56:	460b      	mov	r3, r1
  409e58:	2000      	movs	r0, #0
  409e5a:	492d      	ldr	r1, [pc, #180]	; (409f10 <atan+0x300>)
  409e5c:	f000 fc7e 	bl	40a75c <__aeabi_ddiv>
  409e60:	f04f 0a03 	mov.w	sl, #3
  409e64:	4604      	mov	r4, r0
  409e66:	460d      	mov	r5, r1
  409e68:	e6f9      	b.n	409c5e <atan+0x4e>
  409e6a:	2200      	movs	r2, #0
  409e6c:	4b21      	ldr	r3, [pc, #132]	; (409ef4 <atan+0x2e4>)
  409e6e:	f000 f997 	bl	40a1a0 <__aeabi_dsub>
  409e72:	f04f 0a01 	mov.w	sl, #1
  409e76:	4604      	mov	r4, r0
  409e78:	460d      	mov	r5, r1
  409e7a:	4630      	mov	r0, r6
  409e7c:	4639      	mov	r1, r7
  409e7e:	e7dc      	b.n	409e3a <atan+0x22a>
  409e80:	e322da11 	.word	0xe322da11
  409e84:	3f90ad3a 	.word	0x3f90ad3a
  409e88:	24760deb 	.word	0x24760deb
  409e8c:	3fa97b4b 	.word	0x3fa97b4b
  409e90:	a0d03d51 	.word	0xa0d03d51
  409e94:	3fb10d66 	.word	0x3fb10d66
  409e98:	c54c206e 	.word	0xc54c206e
  409e9c:	3fb745cd 	.word	0x3fb745cd
  409ea0:	920083ff 	.word	0x920083ff
  409ea4:	3fc24924 	.word	0x3fc24924
  409ea8:	5555550d 	.word	0x5555550d
  409eac:	3fd55555 	.word	0x3fd55555
  409eb0:	2c6a6c2f 	.word	0x2c6a6c2f
  409eb4:	bfa2b444 	.word	0xbfa2b444
  409eb8:	52defd9a 	.word	0x52defd9a
  409ebc:	3fadde2d 	.word	0x3fadde2d
  409ec0:	af749a6d 	.word	0xaf749a6d
  409ec4:	3fb3b0f2 	.word	0x3fb3b0f2
  409ec8:	fe231671 	.word	0xfe231671
  409ecc:	3fbc71c6 	.word	0x3fbc71c6
  409ed0:	9998ebc4 	.word	0x9998ebc4
  409ed4:	3fc99999 	.word	0x3fc99999
  409ed8:	8800759c 	.word	0x8800759c
  409edc:	7e37e43c 	.word	0x7e37e43c
  409ee0:	440fffff 	.word	0x440fffff
  409ee4:	7ff00000 	.word	0x7ff00000
  409ee8:	3fdbffff 	.word	0x3fdbffff
  409eec:	00413500 	.word	0x00413500
  409ef0:	004134e0 	.word	0x004134e0
  409ef4:	3ff00000 	.word	0x3ff00000
  409ef8:	3ff2ffff 	.word	0x3ff2ffff
  409efc:	3ff921fb 	.word	0x3ff921fb
  409f00:	54442d18 	.word	0x54442d18
  409f04:	bff921fb 	.word	0xbff921fb
  409f08:	40037fff 	.word	0x40037fff
  409f0c:	3ff80000 	.word	0x3ff80000
  409f10:	bff00000 	.word	0xbff00000

00409f14 <fabs>:
  409f14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409f18:	4770      	bx	lr
  409f1a:	bf00      	nop
  409f1c:	0000      	movs	r0, r0
	...

00409f20 <floor>:
  409f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409f24:	f3c1 580a 	ubfx	r8, r1, #20, #11
  409f28:	460b      	mov	r3, r1
  409f2a:	4604      	mov	r4, r0
  409f2c:	460d      	mov	r5, r1
  409f2e:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
  409f32:	4602      	mov	r2, r0
  409f34:	4689      	mov	r9, r1
  409f36:	4607      	mov	r7, r0
  409f38:	2e13      	cmp	r6, #19
  409f3a:	dc1d      	bgt.n	409f78 <floor+0x58>
  409f3c:	2e00      	cmp	r6, #0
  409f3e:	db40      	blt.n	409fc2 <floor+0xa2>
  409f40:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 40a02c <floor+0x10c>
  409f44:	fa48 f806 	asr.w	r8, r8, r6
  409f48:	ea08 0e01 	and.w	lr, r8, r1
  409f4c:	ea5e 0202 	orrs.w	r2, lr, r2
  409f50:	d017      	beq.n	409f82 <floor+0x62>
  409f52:	a333      	add	r3, pc, #204	; (adr r3, 40a020 <floor+0x100>)
  409f54:	e9d3 2300 	ldrd	r2, r3, [r3]
  409f58:	f000 f924 	bl	40a1a4 <__adddf3>
  409f5c:	2200      	movs	r2, #0
  409f5e:	2300      	movs	r3, #0
  409f60:	f000 fd62 	bl	40aa28 <__aeabi_dcmpgt>
  409f64:	b120      	cbz	r0, 409f70 <floor+0x50>
  409f66:	2d00      	cmp	r5, #0
  409f68:	db40      	blt.n	409fec <floor+0xcc>
  409f6a:	ea29 0508 	bic.w	r5, r9, r8
  409f6e:	2700      	movs	r7, #0
  409f70:	4638      	mov	r0, r7
  409f72:	4629      	mov	r1, r5
  409f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409f78:	2e33      	cmp	r6, #51	; 0x33
  409f7a:	dd06      	ble.n	409f8a <floor+0x6a>
  409f7c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  409f80:	d02f      	beq.n	409fe2 <floor+0xc2>
  409f82:	4620      	mov	r0, r4
  409f84:	4619      	mov	r1, r3
  409f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409f8a:	f2a8 4213 	subw	r2, r8, #1043	; 0x413
  409f8e:	f04f 3aff 	mov.w	sl, #4294967295
  409f92:	fa2a fa02 	lsr.w	sl, sl, r2
  409f96:	ea1a 0f00 	tst.w	sl, r0
  409f9a:	d0f2      	beq.n	409f82 <floor+0x62>
  409f9c:	a320      	add	r3, pc, #128	; (adr r3, 40a020 <floor+0x100>)
  409f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409fa2:	f000 f8ff 	bl	40a1a4 <__adddf3>
  409fa6:	2200      	movs	r2, #0
  409fa8:	2300      	movs	r3, #0
  409faa:	f000 fd3d 	bl	40aa28 <__aeabi_dcmpgt>
  409fae:	2800      	cmp	r0, #0
  409fb0:	d0de      	beq.n	409f70 <floor+0x50>
  409fb2:	2d00      	cmp	r5, #0
  409fb4:	db1f      	blt.n	409ff6 <floor+0xd6>
  409fb6:	464d      	mov	r5, r9
  409fb8:	ea27 070a 	bic.w	r7, r7, sl
  409fbc:	4629      	mov	r1, r5
  409fbe:	4638      	mov	r0, r7
  409fc0:	e7d8      	b.n	409f74 <floor+0x54>
  409fc2:	a317      	add	r3, pc, #92	; (adr r3, 40a020 <floor+0x100>)
  409fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  409fc8:	f000 f8ec 	bl	40a1a4 <__adddf3>
  409fcc:	2200      	movs	r2, #0
  409fce:	2300      	movs	r3, #0
  409fd0:	f000 fd2a 	bl	40aa28 <__aeabi_dcmpgt>
  409fd4:	2800      	cmp	r0, #0
  409fd6:	d0cb      	beq.n	409f70 <floor+0x50>
  409fd8:	2d00      	cmp	r5, #0
  409fda:	db19      	blt.n	40a010 <floor+0xf0>
  409fdc:	2700      	movs	r7, #0
  409fde:	463d      	mov	r5, r7
  409fe0:	e7c6      	b.n	409f70 <floor+0x50>
  409fe2:	4602      	mov	r2, r0
  409fe4:	460b      	mov	r3, r1
  409fe6:	f000 f8dd 	bl	40a1a4 <__adddf3>
  409fea:	e7cc      	b.n	409f86 <floor+0x66>
  409fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  409ff0:	4133      	asrs	r3, r6
  409ff2:	4499      	add	r9, r3
  409ff4:	e7b9      	b.n	409f6a <floor+0x4a>
  409ff6:	2e14      	cmp	r6, #20
  409ff8:	d007      	beq.n	40a00a <floor+0xea>
  409ffa:	f240 4233 	movw	r2, #1075	; 0x433
  409ffe:	2301      	movs	r3, #1
  40a000:	ebc8 0202 	rsb	r2, r8, r2
  40a004:	4093      	lsls	r3, r2
  40a006:	191f      	adds	r7, r3, r4
  40a008:	d3d5      	bcc.n	409fb6 <floor+0x96>
  40a00a:	f109 0901 	add.w	r9, r9, #1
  40a00e:	e7d2      	b.n	409fb6 <floor+0x96>
  40a010:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  40a014:	ea53 0704 	orrs.w	r7, r3, r4
  40a018:	d0aa      	beq.n	409f70 <floor+0x50>
  40a01a:	2700      	movs	r7, #0
  40a01c:	4d02      	ldr	r5, [pc, #8]	; (40a028 <floor+0x108>)
  40a01e:	e7a7      	b.n	409f70 <floor+0x50>
  40a020:	8800759c 	.word	0x8800759c
  40a024:	7e37e43c 	.word	0x7e37e43c
  40a028:	bff00000 	.word	0xbff00000
  40a02c:	000fffff 	.word	0x000fffff

0040a030 <__fpclassifyd>:
  40a030:	fab0 f080 	clz	r0, r0
  40a034:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  40a038:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40a03c:	d102      	bne.n	40a044 <__fpclassifyd+0x14>
  40a03e:	b108      	cbz	r0, 40a044 <__fpclassifyd+0x14>
  40a040:	2002      	movs	r0, #2
  40a042:	4770      	bx	lr
  40a044:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  40a048:	4b08      	ldr	r3, [pc, #32]	; (40a06c <__fpclassifyd+0x3c>)
  40a04a:	429a      	cmp	r2, r3
  40a04c:	d801      	bhi.n	40a052 <__fpclassifyd+0x22>
  40a04e:	2004      	movs	r0, #4
  40a050:	4770      	bx	lr
  40a052:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a056:	d201      	bcs.n	40a05c <__fpclassifyd+0x2c>
  40a058:	2003      	movs	r0, #3
  40a05a:	4770      	bx	lr
  40a05c:	4b04      	ldr	r3, [pc, #16]	; (40a070 <__fpclassifyd+0x40>)
  40a05e:	4299      	cmp	r1, r3
  40a060:	bf14      	ite	ne
  40a062:	2000      	movne	r0, #0
  40a064:	f000 0001 	andeq.w	r0, r0, #1
  40a068:	4770      	bx	lr
  40a06a:	bf00      	nop
  40a06c:	7fdfffff 	.word	0x7fdfffff
  40a070:	7ff00000 	.word	0x7ff00000

0040a074 <matherr>:
  40a074:	2000      	movs	r0, #0
  40a076:	4770      	bx	lr

0040a078 <nan>:
  40a078:	2000      	movs	r0, #0
  40a07a:	4901      	ldr	r1, [pc, #4]	; (40a080 <nan+0x8>)
  40a07c:	4770      	bx	lr
  40a07e:	bf00      	nop
  40a080:	7ff80000 	.word	0x7ff80000
  40a084:	00000000 	.word	0x00000000

0040a088 <scalbn>:
  40a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a08a:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40a08e:	4604      	mov	r4, r0
  40a090:	460d      	mov	r5, r1
  40a092:	4617      	mov	r7, r2
  40a094:	460e      	mov	r6, r1
  40a096:	bb1b      	cbnz	r3, 40a0e0 <scalbn+0x58>
  40a098:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40a09c:	ea56 0300 	orrs.w	r3, r6, r0
  40a0a0:	d030      	beq.n	40a104 <scalbn+0x7c>
  40a0a2:	4b35      	ldr	r3, [pc, #212]	; (40a178 <scalbn+0xf0>)
  40a0a4:	2200      	movs	r2, #0
  40a0a6:	f000 fa2f 	bl	40a508 <__aeabi_dmul>
  40a0aa:	4b34      	ldr	r3, [pc, #208]	; (40a17c <scalbn+0xf4>)
  40a0ac:	4604      	mov	r4, r0
  40a0ae:	460d      	mov	r5, r1
  40a0b0:	429f      	cmp	r7, r3
  40a0b2:	460e      	mov	r6, r1
  40a0b4:	db35      	blt.n	40a122 <scalbn+0x9a>
  40a0b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40a0ba:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40a0be:	3b36      	subs	r3, #54	; 0x36
  40a0c0:	443b      	add	r3, r7
  40a0c2:	4293      	cmp	r3, r2
  40a0c4:	dd15      	ble.n	40a0f2 <scalbn+0x6a>
  40a0c6:	4622      	mov	r2, r4
  40a0c8:	462b      	mov	r3, r5
  40a0ca:	a127      	add	r1, pc, #156	; (adr r1, 40a168 <scalbn+0xe0>)
  40a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a0d0:	f000 f85a 	bl	40a188 <copysign>
  40a0d4:	a324      	add	r3, pc, #144	; (adr r3, 40a168 <scalbn+0xe0>)
  40a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a0da:	f000 fa15 	bl	40a508 <__aeabi_dmul>
  40a0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a0e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
  40a0e4:	4293      	cmp	r3, r2
  40a0e6:	d022      	beq.n	40a12e <scalbn+0xa6>
  40a0e8:	443b      	add	r3, r7
  40a0ea:	f240 72fe 	movw	r2, #2046	; 0x7fe
  40a0ee:	4293      	cmp	r3, r2
  40a0f0:	dce9      	bgt.n	40a0c6 <scalbn+0x3e>
  40a0f2:	2b00      	cmp	r3, #0
  40a0f4:	dd07      	ble.n	40a106 <scalbn+0x7e>
  40a0f6:	4a22      	ldr	r2, [pc, #136]	; (40a180 <scalbn+0xf8>)
  40a0f8:	4620      	mov	r0, r4
  40a0fa:	4032      	ands	r2, r6
  40a0fc:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
  40a100:	4629      	mov	r1, r5
  40a102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a106:	f113 0f35 	cmn.w	r3, #53	; 0x35
  40a10a:	da15      	bge.n	40a138 <scalbn+0xb0>
  40a10c:	f24c 3350 	movw	r3, #50000	; 0xc350
  40a110:	4622      	mov	r2, r4
  40a112:	429f      	cmp	r7, r3
  40a114:	462b      	mov	r3, r5
  40a116:	dc1c      	bgt.n	40a152 <scalbn+0xca>
  40a118:	a115      	add	r1, pc, #84	; (adr r1, 40a170 <scalbn+0xe8>)
  40a11a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a11e:	f000 f833 	bl	40a188 <copysign>
  40a122:	a313      	add	r3, pc, #76	; (adr r3, 40a170 <scalbn+0xe8>)
  40a124:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a128:	f000 f9ee 	bl	40a508 <__aeabi_dmul>
  40a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a12e:	4602      	mov	r2, r0
  40a130:	460b      	mov	r3, r1
  40a132:	f000 f837 	bl	40a1a4 <__adddf3>
  40a136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a138:	4811      	ldr	r0, [pc, #68]	; (40a180 <scalbn+0xf8>)
  40a13a:	f103 0136 	add.w	r1, r3, #54	; 0x36
  40a13e:	2200      	movs	r2, #0
  40a140:	4b10      	ldr	r3, [pc, #64]	; (40a184 <scalbn+0xfc>)
  40a142:	4030      	ands	r0, r6
  40a144:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
  40a148:	4620      	mov	r0, r4
  40a14a:	4629      	mov	r1, r5
  40a14c:	f000 f9dc 	bl	40a508 <__aeabi_dmul>
  40a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a152:	a105      	add	r1, pc, #20	; (adr r1, 40a168 <scalbn+0xe0>)
  40a154:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a158:	f000 f816 	bl	40a188 <copysign>
  40a15c:	a302      	add	r3, pc, #8	; (adr r3, 40a168 <scalbn+0xe0>)
  40a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a162:	f000 f9d1 	bl	40a508 <__aeabi_dmul>
  40a166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a168:	8800759c 	.word	0x8800759c
  40a16c:	7e37e43c 	.word	0x7e37e43c
  40a170:	c2f8f359 	.word	0xc2f8f359
  40a174:	01a56e1f 	.word	0x01a56e1f
  40a178:	43500000 	.word	0x43500000
  40a17c:	ffff3cb0 	.word	0xffff3cb0
  40a180:	800fffff 	.word	0x800fffff
  40a184:	3c900000 	.word	0x3c900000

0040a188 <copysign>:
  40a188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  40a18c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40a190:	ea43 0102 	orr.w	r1, r3, r2
  40a194:	4770      	bx	lr
  40a196:	bf00      	nop

0040a198 <__aeabi_drsub>:
  40a198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a19c:	e002      	b.n	40a1a4 <__adddf3>
  40a19e:	bf00      	nop

0040a1a0 <__aeabi_dsub>:
  40a1a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a1a4 <__adddf3>:
  40a1a4:	b530      	push	{r4, r5, lr}
  40a1a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a1aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a1ae:	ea94 0f05 	teq	r4, r5
  40a1b2:	bf08      	it	eq
  40a1b4:	ea90 0f02 	teqeq	r0, r2
  40a1b8:	bf1f      	itttt	ne
  40a1ba:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a1be:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a1c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a1c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a1ca:	f000 80e2 	beq.w	40a392 <__adddf3+0x1ee>
  40a1ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a1d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a1d6:	bfb8      	it	lt
  40a1d8:	426d      	neglt	r5, r5
  40a1da:	dd0c      	ble.n	40a1f6 <__adddf3+0x52>
  40a1dc:	442c      	add	r4, r5
  40a1de:	ea80 0202 	eor.w	r2, r0, r2
  40a1e2:	ea81 0303 	eor.w	r3, r1, r3
  40a1e6:	ea82 0000 	eor.w	r0, r2, r0
  40a1ea:	ea83 0101 	eor.w	r1, r3, r1
  40a1ee:	ea80 0202 	eor.w	r2, r0, r2
  40a1f2:	ea81 0303 	eor.w	r3, r1, r3
  40a1f6:	2d36      	cmp	r5, #54	; 0x36
  40a1f8:	bf88      	it	hi
  40a1fa:	bd30      	pophi	{r4, r5, pc}
  40a1fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a200:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a204:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a20c:	d002      	beq.n	40a214 <__adddf3+0x70>
  40a20e:	4240      	negs	r0, r0
  40a210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a214:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a218:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a21c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a220:	d002      	beq.n	40a228 <__adddf3+0x84>
  40a222:	4252      	negs	r2, r2
  40a224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a228:	ea94 0f05 	teq	r4, r5
  40a22c:	f000 80a7 	beq.w	40a37e <__adddf3+0x1da>
  40a230:	f1a4 0401 	sub.w	r4, r4, #1
  40a234:	f1d5 0e20 	rsbs	lr, r5, #32
  40a238:	db0d      	blt.n	40a256 <__adddf3+0xb2>
  40a23a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a23e:	fa22 f205 	lsr.w	r2, r2, r5
  40a242:	1880      	adds	r0, r0, r2
  40a244:	f141 0100 	adc.w	r1, r1, #0
  40a248:	fa03 f20e 	lsl.w	r2, r3, lr
  40a24c:	1880      	adds	r0, r0, r2
  40a24e:	fa43 f305 	asr.w	r3, r3, r5
  40a252:	4159      	adcs	r1, r3
  40a254:	e00e      	b.n	40a274 <__adddf3+0xd0>
  40a256:	f1a5 0520 	sub.w	r5, r5, #32
  40a25a:	f10e 0e20 	add.w	lr, lr, #32
  40a25e:	2a01      	cmp	r2, #1
  40a260:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a264:	bf28      	it	cs
  40a266:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a26a:	fa43 f305 	asr.w	r3, r3, r5
  40a26e:	18c0      	adds	r0, r0, r3
  40a270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a278:	d507      	bpl.n	40a28a <__adddf3+0xe6>
  40a27a:	f04f 0e00 	mov.w	lr, #0
  40a27e:	f1dc 0c00 	rsbs	ip, ip, #0
  40a282:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a286:	eb6e 0101 	sbc.w	r1, lr, r1
  40a28a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a28e:	d31b      	bcc.n	40a2c8 <__adddf3+0x124>
  40a290:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a294:	d30c      	bcc.n	40a2b0 <__adddf3+0x10c>
  40a296:	0849      	lsrs	r1, r1, #1
  40a298:	ea5f 0030 	movs.w	r0, r0, rrx
  40a29c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a2a0:	f104 0401 	add.w	r4, r4, #1
  40a2a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a2a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a2ac:	f080 809a 	bcs.w	40a3e4 <__adddf3+0x240>
  40a2b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a2b4:	bf08      	it	eq
  40a2b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a2ba:	f150 0000 	adcs.w	r0, r0, #0
  40a2be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a2c2:	ea41 0105 	orr.w	r1, r1, r5
  40a2c6:	bd30      	pop	{r4, r5, pc}
  40a2c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a2cc:	4140      	adcs	r0, r0
  40a2ce:	eb41 0101 	adc.w	r1, r1, r1
  40a2d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a2d6:	f1a4 0401 	sub.w	r4, r4, #1
  40a2da:	d1e9      	bne.n	40a2b0 <__adddf3+0x10c>
  40a2dc:	f091 0f00 	teq	r1, #0
  40a2e0:	bf04      	itt	eq
  40a2e2:	4601      	moveq	r1, r0
  40a2e4:	2000      	moveq	r0, #0
  40a2e6:	fab1 f381 	clz	r3, r1
  40a2ea:	bf08      	it	eq
  40a2ec:	3320      	addeq	r3, #32
  40a2ee:	f1a3 030b 	sub.w	r3, r3, #11
  40a2f2:	f1b3 0220 	subs.w	r2, r3, #32
  40a2f6:	da0c      	bge.n	40a312 <__adddf3+0x16e>
  40a2f8:	320c      	adds	r2, #12
  40a2fa:	dd08      	ble.n	40a30e <__adddf3+0x16a>
  40a2fc:	f102 0c14 	add.w	ip, r2, #20
  40a300:	f1c2 020c 	rsb	r2, r2, #12
  40a304:	fa01 f00c 	lsl.w	r0, r1, ip
  40a308:	fa21 f102 	lsr.w	r1, r1, r2
  40a30c:	e00c      	b.n	40a328 <__adddf3+0x184>
  40a30e:	f102 0214 	add.w	r2, r2, #20
  40a312:	bfd8      	it	le
  40a314:	f1c2 0c20 	rsble	ip, r2, #32
  40a318:	fa01 f102 	lsl.w	r1, r1, r2
  40a31c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a320:	bfdc      	itt	le
  40a322:	ea41 010c 	orrle.w	r1, r1, ip
  40a326:	4090      	lslle	r0, r2
  40a328:	1ae4      	subs	r4, r4, r3
  40a32a:	bfa2      	ittt	ge
  40a32c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a330:	4329      	orrge	r1, r5
  40a332:	bd30      	popge	{r4, r5, pc}
  40a334:	ea6f 0404 	mvn.w	r4, r4
  40a338:	3c1f      	subs	r4, #31
  40a33a:	da1c      	bge.n	40a376 <__adddf3+0x1d2>
  40a33c:	340c      	adds	r4, #12
  40a33e:	dc0e      	bgt.n	40a35e <__adddf3+0x1ba>
  40a340:	f104 0414 	add.w	r4, r4, #20
  40a344:	f1c4 0220 	rsb	r2, r4, #32
  40a348:	fa20 f004 	lsr.w	r0, r0, r4
  40a34c:	fa01 f302 	lsl.w	r3, r1, r2
  40a350:	ea40 0003 	orr.w	r0, r0, r3
  40a354:	fa21 f304 	lsr.w	r3, r1, r4
  40a358:	ea45 0103 	orr.w	r1, r5, r3
  40a35c:	bd30      	pop	{r4, r5, pc}
  40a35e:	f1c4 040c 	rsb	r4, r4, #12
  40a362:	f1c4 0220 	rsb	r2, r4, #32
  40a366:	fa20 f002 	lsr.w	r0, r0, r2
  40a36a:	fa01 f304 	lsl.w	r3, r1, r4
  40a36e:	ea40 0003 	orr.w	r0, r0, r3
  40a372:	4629      	mov	r1, r5
  40a374:	bd30      	pop	{r4, r5, pc}
  40a376:	fa21 f004 	lsr.w	r0, r1, r4
  40a37a:	4629      	mov	r1, r5
  40a37c:	bd30      	pop	{r4, r5, pc}
  40a37e:	f094 0f00 	teq	r4, #0
  40a382:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a386:	bf06      	itte	eq
  40a388:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a38c:	3401      	addeq	r4, #1
  40a38e:	3d01      	subne	r5, #1
  40a390:	e74e      	b.n	40a230 <__adddf3+0x8c>
  40a392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a396:	bf18      	it	ne
  40a398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a39c:	d029      	beq.n	40a3f2 <__adddf3+0x24e>
  40a39e:	ea94 0f05 	teq	r4, r5
  40a3a2:	bf08      	it	eq
  40a3a4:	ea90 0f02 	teqeq	r0, r2
  40a3a8:	d005      	beq.n	40a3b6 <__adddf3+0x212>
  40a3aa:	ea54 0c00 	orrs.w	ip, r4, r0
  40a3ae:	bf04      	itt	eq
  40a3b0:	4619      	moveq	r1, r3
  40a3b2:	4610      	moveq	r0, r2
  40a3b4:	bd30      	pop	{r4, r5, pc}
  40a3b6:	ea91 0f03 	teq	r1, r3
  40a3ba:	bf1e      	ittt	ne
  40a3bc:	2100      	movne	r1, #0
  40a3be:	2000      	movne	r0, #0
  40a3c0:	bd30      	popne	{r4, r5, pc}
  40a3c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a3c6:	d105      	bne.n	40a3d4 <__adddf3+0x230>
  40a3c8:	0040      	lsls	r0, r0, #1
  40a3ca:	4149      	adcs	r1, r1
  40a3cc:	bf28      	it	cs
  40a3ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a3d2:	bd30      	pop	{r4, r5, pc}
  40a3d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a3d8:	bf3c      	itt	cc
  40a3da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a3de:	bd30      	popcc	{r4, r5, pc}
  40a3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a3e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a3e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a3ec:	f04f 0000 	mov.w	r0, #0
  40a3f0:	bd30      	pop	{r4, r5, pc}
  40a3f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a3f6:	bf1a      	itte	ne
  40a3f8:	4619      	movne	r1, r3
  40a3fa:	4610      	movne	r0, r2
  40a3fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a400:	bf1c      	itt	ne
  40a402:	460b      	movne	r3, r1
  40a404:	4602      	movne	r2, r0
  40a406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a40a:	bf06      	itte	eq
  40a40c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a410:	ea91 0f03 	teqeq	r1, r3
  40a414:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a418:	bd30      	pop	{r4, r5, pc}
  40a41a:	bf00      	nop

0040a41c <__aeabi_ui2d>:
  40a41c:	f090 0f00 	teq	r0, #0
  40a420:	bf04      	itt	eq
  40a422:	2100      	moveq	r1, #0
  40a424:	4770      	bxeq	lr
  40a426:	b530      	push	{r4, r5, lr}
  40a428:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a42c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a430:	f04f 0500 	mov.w	r5, #0
  40a434:	f04f 0100 	mov.w	r1, #0
  40a438:	e750      	b.n	40a2dc <__adddf3+0x138>
  40a43a:	bf00      	nop

0040a43c <__aeabi_i2d>:
  40a43c:	f090 0f00 	teq	r0, #0
  40a440:	bf04      	itt	eq
  40a442:	2100      	moveq	r1, #0
  40a444:	4770      	bxeq	lr
  40a446:	b530      	push	{r4, r5, lr}
  40a448:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a44c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a450:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a454:	bf48      	it	mi
  40a456:	4240      	negmi	r0, r0
  40a458:	f04f 0100 	mov.w	r1, #0
  40a45c:	e73e      	b.n	40a2dc <__adddf3+0x138>
  40a45e:	bf00      	nop

0040a460 <__aeabi_f2d>:
  40a460:	0042      	lsls	r2, r0, #1
  40a462:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a466:	ea4f 0131 	mov.w	r1, r1, rrx
  40a46a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a46e:	bf1f      	itttt	ne
  40a470:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a478:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a47c:	4770      	bxne	lr
  40a47e:	f092 0f00 	teq	r2, #0
  40a482:	bf14      	ite	ne
  40a484:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a488:	4770      	bxeq	lr
  40a48a:	b530      	push	{r4, r5, lr}
  40a48c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a498:	e720      	b.n	40a2dc <__adddf3+0x138>
  40a49a:	bf00      	nop

0040a49c <__aeabi_ul2d>:
  40a49c:	ea50 0201 	orrs.w	r2, r0, r1
  40a4a0:	bf08      	it	eq
  40a4a2:	4770      	bxeq	lr
  40a4a4:	b530      	push	{r4, r5, lr}
  40a4a6:	f04f 0500 	mov.w	r5, #0
  40a4aa:	e00a      	b.n	40a4c2 <__aeabi_l2d+0x16>

0040a4ac <__aeabi_l2d>:
  40a4ac:	ea50 0201 	orrs.w	r2, r0, r1
  40a4b0:	bf08      	it	eq
  40a4b2:	4770      	bxeq	lr
  40a4b4:	b530      	push	{r4, r5, lr}
  40a4b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a4ba:	d502      	bpl.n	40a4c2 <__aeabi_l2d+0x16>
  40a4bc:	4240      	negs	r0, r0
  40a4be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a4c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a4c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a4ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a4ce:	f43f aedc 	beq.w	40a28a <__adddf3+0xe6>
  40a4d2:	f04f 0203 	mov.w	r2, #3
  40a4d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a4da:	bf18      	it	ne
  40a4dc:	3203      	addne	r2, #3
  40a4de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a4e2:	bf18      	it	ne
  40a4e4:	3203      	addne	r2, #3
  40a4e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a4ea:	f1c2 0320 	rsb	r3, r2, #32
  40a4ee:	fa00 fc03 	lsl.w	ip, r0, r3
  40a4f2:	fa20 f002 	lsr.w	r0, r0, r2
  40a4f6:	fa01 fe03 	lsl.w	lr, r1, r3
  40a4fa:	ea40 000e 	orr.w	r0, r0, lr
  40a4fe:	fa21 f102 	lsr.w	r1, r1, r2
  40a502:	4414      	add	r4, r2
  40a504:	e6c1      	b.n	40a28a <__adddf3+0xe6>
  40a506:	bf00      	nop

0040a508 <__aeabi_dmul>:
  40a508:	b570      	push	{r4, r5, r6, lr}
  40a50a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a50e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a516:	bf1d      	ittte	ne
  40a518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a51c:	ea94 0f0c 	teqne	r4, ip
  40a520:	ea95 0f0c 	teqne	r5, ip
  40a524:	f000 f8de 	bleq	40a6e4 <__aeabi_dmul+0x1dc>
  40a528:	442c      	add	r4, r5
  40a52a:	ea81 0603 	eor.w	r6, r1, r3
  40a52e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a53a:	bf18      	it	ne
  40a53c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a548:	d038      	beq.n	40a5bc <__aeabi_dmul+0xb4>
  40a54a:	fba0 ce02 	umull	ip, lr, r0, r2
  40a54e:	f04f 0500 	mov.w	r5, #0
  40a552:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a55a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a55e:	f04f 0600 	mov.w	r6, #0
  40a562:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a566:	f09c 0f00 	teq	ip, #0
  40a56a:	bf18      	it	ne
  40a56c:	f04e 0e01 	orrne.w	lr, lr, #1
  40a570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a57c:	d204      	bcs.n	40a588 <__aeabi_dmul+0x80>
  40a57e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a582:	416d      	adcs	r5, r5
  40a584:	eb46 0606 	adc.w	r6, r6, r6
  40a588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a58c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a59c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a5a0:	bf88      	it	hi
  40a5a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a5a6:	d81e      	bhi.n	40a5e6 <__aeabi_dmul+0xde>
  40a5a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a5ac:	bf08      	it	eq
  40a5ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a5b2:	f150 0000 	adcs.w	r0, r0, #0
  40a5b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a5ba:	bd70      	pop	{r4, r5, r6, pc}
  40a5bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a5c0:	ea46 0101 	orr.w	r1, r6, r1
  40a5c4:	ea40 0002 	orr.w	r0, r0, r2
  40a5c8:	ea81 0103 	eor.w	r1, r1, r3
  40a5cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a5d0:	bfc2      	ittt	gt
  40a5d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a5d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a5da:	bd70      	popgt	{r4, r5, r6, pc}
  40a5dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a5e0:	f04f 0e00 	mov.w	lr, #0
  40a5e4:	3c01      	subs	r4, #1
  40a5e6:	f300 80ab 	bgt.w	40a740 <__aeabi_dmul+0x238>
  40a5ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a5ee:	bfde      	ittt	le
  40a5f0:	2000      	movle	r0, #0
  40a5f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a5f6:	bd70      	pople	{r4, r5, r6, pc}
  40a5f8:	f1c4 0400 	rsb	r4, r4, #0
  40a5fc:	3c20      	subs	r4, #32
  40a5fe:	da35      	bge.n	40a66c <__aeabi_dmul+0x164>
  40a600:	340c      	adds	r4, #12
  40a602:	dc1b      	bgt.n	40a63c <__aeabi_dmul+0x134>
  40a604:	f104 0414 	add.w	r4, r4, #20
  40a608:	f1c4 0520 	rsb	r5, r4, #32
  40a60c:	fa00 f305 	lsl.w	r3, r0, r5
  40a610:	fa20 f004 	lsr.w	r0, r0, r4
  40a614:	fa01 f205 	lsl.w	r2, r1, r5
  40a618:	ea40 0002 	orr.w	r0, r0, r2
  40a61c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a628:	fa21 f604 	lsr.w	r6, r1, r4
  40a62c:	eb42 0106 	adc.w	r1, r2, r6
  40a630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a634:	bf08      	it	eq
  40a636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a63a:	bd70      	pop	{r4, r5, r6, pc}
  40a63c:	f1c4 040c 	rsb	r4, r4, #12
  40a640:	f1c4 0520 	rsb	r5, r4, #32
  40a644:	fa00 f304 	lsl.w	r3, r0, r4
  40a648:	fa20 f005 	lsr.w	r0, r0, r5
  40a64c:	fa01 f204 	lsl.w	r2, r1, r4
  40a650:	ea40 0002 	orr.w	r0, r0, r2
  40a654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a65c:	f141 0100 	adc.w	r1, r1, #0
  40a660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a664:	bf08      	it	eq
  40a666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a66a:	bd70      	pop	{r4, r5, r6, pc}
  40a66c:	f1c4 0520 	rsb	r5, r4, #32
  40a670:	fa00 f205 	lsl.w	r2, r0, r5
  40a674:	ea4e 0e02 	orr.w	lr, lr, r2
  40a678:	fa20 f304 	lsr.w	r3, r0, r4
  40a67c:	fa01 f205 	lsl.w	r2, r1, r5
  40a680:	ea43 0302 	orr.w	r3, r3, r2
  40a684:	fa21 f004 	lsr.w	r0, r1, r4
  40a688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a68c:	fa21 f204 	lsr.w	r2, r1, r4
  40a690:	ea20 0002 	bic.w	r0, r0, r2
  40a694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40a698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a69c:	bf08      	it	eq
  40a69e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a6a2:	bd70      	pop	{r4, r5, r6, pc}
  40a6a4:	f094 0f00 	teq	r4, #0
  40a6a8:	d10f      	bne.n	40a6ca <__aeabi_dmul+0x1c2>
  40a6aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40a6ae:	0040      	lsls	r0, r0, #1
  40a6b0:	eb41 0101 	adc.w	r1, r1, r1
  40a6b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a6b8:	bf08      	it	eq
  40a6ba:	3c01      	subeq	r4, #1
  40a6bc:	d0f7      	beq.n	40a6ae <__aeabi_dmul+0x1a6>
  40a6be:	ea41 0106 	orr.w	r1, r1, r6
  40a6c2:	f095 0f00 	teq	r5, #0
  40a6c6:	bf18      	it	ne
  40a6c8:	4770      	bxne	lr
  40a6ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40a6ce:	0052      	lsls	r2, r2, #1
  40a6d0:	eb43 0303 	adc.w	r3, r3, r3
  40a6d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40a6d8:	bf08      	it	eq
  40a6da:	3d01      	subeq	r5, #1
  40a6dc:	d0f7      	beq.n	40a6ce <__aeabi_dmul+0x1c6>
  40a6de:	ea43 0306 	orr.w	r3, r3, r6
  40a6e2:	4770      	bx	lr
  40a6e4:	ea94 0f0c 	teq	r4, ip
  40a6e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a6ec:	bf18      	it	ne
  40a6ee:	ea95 0f0c 	teqne	r5, ip
  40a6f2:	d00c      	beq.n	40a70e <__aeabi_dmul+0x206>
  40a6f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a6f8:	bf18      	it	ne
  40a6fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a6fe:	d1d1      	bne.n	40a6a4 <__aeabi_dmul+0x19c>
  40a700:	ea81 0103 	eor.w	r1, r1, r3
  40a704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a708:	f04f 0000 	mov.w	r0, #0
  40a70c:	bd70      	pop	{r4, r5, r6, pc}
  40a70e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a712:	bf06      	itte	eq
  40a714:	4610      	moveq	r0, r2
  40a716:	4619      	moveq	r1, r3
  40a718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a71c:	d019      	beq.n	40a752 <__aeabi_dmul+0x24a>
  40a71e:	ea94 0f0c 	teq	r4, ip
  40a722:	d102      	bne.n	40a72a <__aeabi_dmul+0x222>
  40a724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40a728:	d113      	bne.n	40a752 <__aeabi_dmul+0x24a>
  40a72a:	ea95 0f0c 	teq	r5, ip
  40a72e:	d105      	bne.n	40a73c <__aeabi_dmul+0x234>
  40a730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40a734:	bf1c      	itt	ne
  40a736:	4610      	movne	r0, r2
  40a738:	4619      	movne	r1, r3
  40a73a:	d10a      	bne.n	40a752 <__aeabi_dmul+0x24a>
  40a73c:	ea81 0103 	eor.w	r1, r1, r3
  40a740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a74c:	f04f 0000 	mov.w	r0, #0
  40a750:	bd70      	pop	{r4, r5, r6, pc}
  40a752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40a756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40a75a:	bd70      	pop	{r4, r5, r6, pc}

0040a75c <__aeabi_ddiv>:
  40a75c:	b570      	push	{r4, r5, r6, lr}
  40a75e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a76a:	bf1d      	ittte	ne
  40a76c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a770:	ea94 0f0c 	teqne	r4, ip
  40a774:	ea95 0f0c 	teqne	r5, ip
  40a778:	f000 f8a7 	bleq	40a8ca <__aeabi_ddiv+0x16e>
  40a77c:	eba4 0405 	sub.w	r4, r4, r5
  40a780:	ea81 0e03 	eor.w	lr, r1, r3
  40a784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a788:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a78c:	f000 8088 	beq.w	40a8a0 <__aeabi_ddiv+0x144>
  40a790:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40a798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40a79c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40a7a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40a7a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40a7a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40a7ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40a7b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40a7b4:	429d      	cmp	r5, r3
  40a7b6:	bf08      	it	eq
  40a7b8:	4296      	cmpeq	r6, r2
  40a7ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40a7be:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40a7c2:	d202      	bcs.n	40a7ca <__aeabi_ddiv+0x6e>
  40a7c4:	085b      	lsrs	r3, r3, #1
  40a7c6:	ea4f 0232 	mov.w	r2, r2, rrx
  40a7ca:	1ab6      	subs	r6, r6, r2
  40a7cc:	eb65 0503 	sbc.w	r5, r5, r3
  40a7d0:	085b      	lsrs	r3, r3, #1
  40a7d2:	ea4f 0232 	mov.w	r2, r2, rrx
  40a7d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40a7da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40a7de:	ebb6 0e02 	subs.w	lr, r6, r2
  40a7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a7e6:	bf22      	ittt	cs
  40a7e8:	1ab6      	subcs	r6, r6, r2
  40a7ea:	4675      	movcs	r5, lr
  40a7ec:	ea40 000c 	orrcs.w	r0, r0, ip
  40a7f0:	085b      	lsrs	r3, r3, #1
  40a7f2:	ea4f 0232 	mov.w	r2, r2, rrx
  40a7f6:	ebb6 0e02 	subs.w	lr, r6, r2
  40a7fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a7fe:	bf22      	ittt	cs
  40a800:	1ab6      	subcs	r6, r6, r2
  40a802:	4675      	movcs	r5, lr
  40a804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40a808:	085b      	lsrs	r3, r3, #1
  40a80a:	ea4f 0232 	mov.w	r2, r2, rrx
  40a80e:	ebb6 0e02 	subs.w	lr, r6, r2
  40a812:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a816:	bf22      	ittt	cs
  40a818:	1ab6      	subcs	r6, r6, r2
  40a81a:	4675      	movcs	r5, lr
  40a81c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40a820:	085b      	lsrs	r3, r3, #1
  40a822:	ea4f 0232 	mov.w	r2, r2, rrx
  40a826:	ebb6 0e02 	subs.w	lr, r6, r2
  40a82a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40a82e:	bf22      	ittt	cs
  40a830:	1ab6      	subcs	r6, r6, r2
  40a832:	4675      	movcs	r5, lr
  40a834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40a838:	ea55 0e06 	orrs.w	lr, r5, r6
  40a83c:	d018      	beq.n	40a870 <__aeabi_ddiv+0x114>
  40a83e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40a842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40a846:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40a84a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40a84e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40a852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40a856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40a85a:	d1c0      	bne.n	40a7de <__aeabi_ddiv+0x82>
  40a85c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a860:	d10b      	bne.n	40a87a <__aeabi_ddiv+0x11e>
  40a862:	ea41 0100 	orr.w	r1, r1, r0
  40a866:	f04f 0000 	mov.w	r0, #0
  40a86a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40a86e:	e7b6      	b.n	40a7de <__aeabi_ddiv+0x82>
  40a870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a874:	bf04      	itt	eq
  40a876:	4301      	orreq	r1, r0
  40a878:	2000      	moveq	r0, #0
  40a87a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a87e:	bf88      	it	hi
  40a880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a884:	f63f aeaf 	bhi.w	40a5e6 <__aeabi_dmul+0xde>
  40a888:	ebb5 0c03 	subs.w	ip, r5, r3
  40a88c:	bf04      	itt	eq
  40a88e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40a892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a896:	f150 0000 	adcs.w	r0, r0, #0
  40a89a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a89e:	bd70      	pop	{r4, r5, r6, pc}
  40a8a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40a8a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40a8a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40a8ac:	bfc2      	ittt	gt
  40a8ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a8b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a8b6:	bd70      	popgt	{r4, r5, r6, pc}
  40a8b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a8bc:	f04f 0e00 	mov.w	lr, #0
  40a8c0:	3c01      	subs	r4, #1
  40a8c2:	e690      	b.n	40a5e6 <__aeabi_dmul+0xde>
  40a8c4:	ea45 0e06 	orr.w	lr, r5, r6
  40a8c8:	e68d      	b.n	40a5e6 <__aeabi_dmul+0xde>
  40a8ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40a8ce:	ea94 0f0c 	teq	r4, ip
  40a8d2:	bf08      	it	eq
  40a8d4:	ea95 0f0c 	teqeq	r5, ip
  40a8d8:	f43f af3b 	beq.w	40a752 <__aeabi_dmul+0x24a>
  40a8dc:	ea94 0f0c 	teq	r4, ip
  40a8e0:	d10a      	bne.n	40a8f8 <__aeabi_ddiv+0x19c>
  40a8e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a8e6:	f47f af34 	bne.w	40a752 <__aeabi_dmul+0x24a>
  40a8ea:	ea95 0f0c 	teq	r5, ip
  40a8ee:	f47f af25 	bne.w	40a73c <__aeabi_dmul+0x234>
  40a8f2:	4610      	mov	r0, r2
  40a8f4:	4619      	mov	r1, r3
  40a8f6:	e72c      	b.n	40a752 <__aeabi_dmul+0x24a>
  40a8f8:	ea95 0f0c 	teq	r5, ip
  40a8fc:	d106      	bne.n	40a90c <__aeabi_ddiv+0x1b0>
  40a8fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40a902:	f43f aefd 	beq.w	40a700 <__aeabi_dmul+0x1f8>
  40a906:	4610      	mov	r0, r2
  40a908:	4619      	mov	r1, r3
  40a90a:	e722      	b.n	40a752 <__aeabi_dmul+0x24a>
  40a90c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40a910:	bf18      	it	ne
  40a912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40a916:	f47f aec5 	bne.w	40a6a4 <__aeabi_dmul+0x19c>
  40a91a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40a91e:	f47f af0d 	bne.w	40a73c <__aeabi_dmul+0x234>
  40a922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40a926:	f47f aeeb 	bne.w	40a700 <__aeabi_dmul+0x1f8>
  40a92a:	e712      	b.n	40a752 <__aeabi_dmul+0x24a>

0040a92c <__gedf2>:
  40a92c:	f04f 3cff 	mov.w	ip, #4294967295
  40a930:	e006      	b.n	40a940 <__cmpdf2+0x4>
  40a932:	bf00      	nop

0040a934 <__ledf2>:
  40a934:	f04f 0c01 	mov.w	ip, #1
  40a938:	e002      	b.n	40a940 <__cmpdf2+0x4>
  40a93a:	bf00      	nop

0040a93c <__cmpdf2>:
  40a93c:	f04f 0c01 	mov.w	ip, #1
  40a940:	f84d cd04 	str.w	ip, [sp, #-4]!
  40a944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a94c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a950:	bf18      	it	ne
  40a952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40a956:	d01b      	beq.n	40a990 <__cmpdf2+0x54>
  40a958:	b001      	add	sp, #4
  40a95a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40a95e:	bf0c      	ite	eq
  40a960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40a964:	ea91 0f03 	teqne	r1, r3
  40a968:	bf02      	ittt	eq
  40a96a:	ea90 0f02 	teqeq	r0, r2
  40a96e:	2000      	moveq	r0, #0
  40a970:	4770      	bxeq	lr
  40a972:	f110 0f00 	cmn.w	r0, #0
  40a976:	ea91 0f03 	teq	r1, r3
  40a97a:	bf58      	it	pl
  40a97c:	4299      	cmppl	r1, r3
  40a97e:	bf08      	it	eq
  40a980:	4290      	cmpeq	r0, r2
  40a982:	bf2c      	ite	cs
  40a984:	17d8      	asrcs	r0, r3, #31
  40a986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40a98a:	f040 0001 	orr.w	r0, r0, #1
  40a98e:	4770      	bx	lr
  40a990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40a994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a998:	d102      	bne.n	40a9a0 <__cmpdf2+0x64>
  40a99a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40a99e:	d107      	bne.n	40a9b0 <__cmpdf2+0x74>
  40a9a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40a9a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40a9a8:	d1d6      	bne.n	40a958 <__cmpdf2+0x1c>
  40a9aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40a9ae:	d0d3      	beq.n	40a958 <__cmpdf2+0x1c>
  40a9b0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40a9b4:	4770      	bx	lr
  40a9b6:	bf00      	nop

0040a9b8 <__aeabi_cdrcmple>:
  40a9b8:	4684      	mov	ip, r0
  40a9ba:	4610      	mov	r0, r2
  40a9bc:	4662      	mov	r2, ip
  40a9be:	468c      	mov	ip, r1
  40a9c0:	4619      	mov	r1, r3
  40a9c2:	4663      	mov	r3, ip
  40a9c4:	e000      	b.n	40a9c8 <__aeabi_cdcmpeq>
  40a9c6:	bf00      	nop

0040a9c8 <__aeabi_cdcmpeq>:
  40a9c8:	b501      	push	{r0, lr}
  40a9ca:	f7ff ffb7 	bl	40a93c <__cmpdf2>
  40a9ce:	2800      	cmp	r0, #0
  40a9d0:	bf48      	it	mi
  40a9d2:	f110 0f00 	cmnmi.w	r0, #0
  40a9d6:	bd01      	pop	{r0, pc}

0040a9d8 <__aeabi_dcmpeq>:
  40a9d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a9dc:	f7ff fff4 	bl	40a9c8 <__aeabi_cdcmpeq>
  40a9e0:	bf0c      	ite	eq
  40a9e2:	2001      	moveq	r0, #1
  40a9e4:	2000      	movne	r0, #0
  40a9e6:	f85d fb08 	ldr.w	pc, [sp], #8
  40a9ea:	bf00      	nop

0040a9ec <__aeabi_dcmplt>:
  40a9ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40a9f0:	f7ff ffea 	bl	40a9c8 <__aeabi_cdcmpeq>
  40a9f4:	bf34      	ite	cc
  40a9f6:	2001      	movcc	r0, #1
  40a9f8:	2000      	movcs	r0, #0
  40a9fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40a9fe:	bf00      	nop

0040aa00 <__aeabi_dcmple>:
  40aa00:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aa04:	f7ff ffe0 	bl	40a9c8 <__aeabi_cdcmpeq>
  40aa08:	bf94      	ite	ls
  40aa0a:	2001      	movls	r0, #1
  40aa0c:	2000      	movhi	r0, #0
  40aa0e:	f85d fb08 	ldr.w	pc, [sp], #8
  40aa12:	bf00      	nop

0040aa14 <__aeabi_dcmpge>:
  40aa14:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aa18:	f7ff ffce 	bl	40a9b8 <__aeabi_cdrcmple>
  40aa1c:	bf94      	ite	ls
  40aa1e:	2001      	movls	r0, #1
  40aa20:	2000      	movhi	r0, #0
  40aa22:	f85d fb08 	ldr.w	pc, [sp], #8
  40aa26:	bf00      	nop

0040aa28 <__aeabi_dcmpgt>:
  40aa28:	f84d ed08 	str.w	lr, [sp, #-8]!
  40aa2c:	f7ff ffc4 	bl	40a9b8 <__aeabi_cdrcmple>
  40aa30:	bf34      	ite	cc
  40aa32:	2001      	movcc	r0, #1
  40aa34:	2000      	movcs	r0, #0
  40aa36:	f85d fb08 	ldr.w	pc, [sp], #8
  40aa3a:	bf00      	nop

0040aa3c <__aeabi_d2iz>:
  40aa3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aa40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40aa44:	d215      	bcs.n	40aa72 <__aeabi_d2iz+0x36>
  40aa46:	d511      	bpl.n	40aa6c <__aeabi_d2iz+0x30>
  40aa48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40aa4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40aa50:	d912      	bls.n	40aa78 <__aeabi_d2iz+0x3c>
  40aa52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40aa56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40aa5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40aa5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40aa62:	fa23 f002 	lsr.w	r0, r3, r2
  40aa66:	bf18      	it	ne
  40aa68:	4240      	negne	r0, r0
  40aa6a:	4770      	bx	lr
  40aa6c:	f04f 0000 	mov.w	r0, #0
  40aa70:	4770      	bx	lr
  40aa72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40aa76:	d105      	bne.n	40aa84 <__aeabi_d2iz+0x48>
  40aa78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40aa7c:	bf08      	it	eq
  40aa7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40aa82:	4770      	bx	lr
  40aa84:	f04f 0000 	mov.w	r0, #0
  40aa88:	4770      	bx	lr
  40aa8a:	bf00      	nop

0040aa8c <__aeabi_d2f>:
  40aa8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aa90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40aa94:	bf24      	itt	cs
  40aa96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40aa9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40aa9e:	d90d      	bls.n	40aabc <__aeabi_d2f+0x30>
  40aaa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40aaa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40aaa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40aaac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40aab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40aab4:	bf08      	it	eq
  40aab6:	f020 0001 	biceq.w	r0, r0, #1
  40aaba:	4770      	bx	lr
  40aabc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40aac0:	d121      	bne.n	40ab06 <__aeabi_d2f+0x7a>
  40aac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40aac6:	bfbc      	itt	lt
  40aac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40aacc:	4770      	bxlt	lr
  40aace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40aad6:	f1c2 0218 	rsb	r2, r2, #24
  40aada:	f1c2 0c20 	rsb	ip, r2, #32
  40aade:	fa10 f30c 	lsls.w	r3, r0, ip
  40aae2:	fa20 f002 	lsr.w	r0, r0, r2
  40aae6:	bf18      	it	ne
  40aae8:	f040 0001 	orrne.w	r0, r0, #1
  40aaec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40aaf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40aaf4:	fa03 fc0c 	lsl.w	ip, r3, ip
  40aaf8:	ea40 000c 	orr.w	r0, r0, ip
  40aafc:	fa23 f302 	lsr.w	r3, r3, r2
  40ab00:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40ab04:	e7cc      	b.n	40aaa0 <__aeabi_d2f+0x14>
  40ab06:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40ab0a:	d107      	bne.n	40ab1c <__aeabi_d2f+0x90>
  40ab0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40ab10:	bf1e      	ittt	ne
  40ab12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40ab16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40ab1a:	4770      	bxne	lr
  40ab1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40ab20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40ab24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ab28:	4770      	bx	lr
  40ab2a:	bf00      	nop

0040ab2c <__aeabi_f2iz>:
  40ab2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40ab30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40ab34:	d30f      	bcc.n	40ab56 <__aeabi_f2iz+0x2a>
  40ab36:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40ab3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40ab3e:	d90d      	bls.n	40ab5c <__aeabi_f2iz+0x30>
  40ab40:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40ab44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ab48:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40ab4c:	fa23 f002 	lsr.w	r0, r3, r2
  40ab50:	bf18      	it	ne
  40ab52:	4240      	negne	r0, r0
  40ab54:	4770      	bx	lr
  40ab56:	f04f 0000 	mov.w	r0, #0
  40ab5a:	4770      	bx	lr
  40ab5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40ab60:	d101      	bne.n	40ab66 <__aeabi_f2iz+0x3a>
  40ab62:	0242      	lsls	r2, r0, #9
  40ab64:	d105      	bne.n	40ab72 <__aeabi_f2iz+0x46>
  40ab66:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40ab6a:	bf08      	it	eq
  40ab6c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ab70:	4770      	bx	lr
  40ab72:	f04f 0000 	mov.w	r0, #0
  40ab76:	4770      	bx	lr

0040ab78 <__assert_func>:
  40ab78:	4c0a      	ldr	r4, [pc, #40]	; (40aba4 <__assert_func+0x2c>)
  40ab7a:	4605      	mov	r5, r0
  40ab7c:	6820      	ldr	r0, [r4, #0]
  40ab7e:	b500      	push	{lr}
  40ab80:	68c0      	ldr	r0, [r0, #12]
  40ab82:	b085      	sub	sp, #20
  40ab84:	b15a      	cbz	r2, 40ab9e <__assert_func+0x26>
  40ab86:	4614      	mov	r4, r2
  40ab88:	4a07      	ldr	r2, [pc, #28]	; (40aba8 <__assert_func+0x30>)
  40ab8a:	9402      	str	r4, [sp, #8]
  40ab8c:	e88d 0006 	stmia.w	sp, {r1, r2}
  40ab90:	461a      	mov	r2, r3
  40ab92:	4906      	ldr	r1, [pc, #24]	; (40abac <__assert_func+0x34>)
  40ab94:	462b      	mov	r3, r5
  40ab96:	f000 f81b 	bl	40abd0 <fiprintf>
  40ab9a:	f003 fff1 	bl	40eb80 <abort>
  40ab9e:	4a04      	ldr	r2, [pc, #16]	; (40abb0 <__assert_func+0x38>)
  40aba0:	4614      	mov	r4, r2
  40aba2:	e7f2      	b.n	40ab8a <__assert_func+0x12>
  40aba4:	204004d8 	.word	0x204004d8
  40aba8:	00413520 	.word	0x00413520
  40abac:	00413530 	.word	0x00413530
  40abb0:	00412cb0 	.word	0x00412cb0

0040abb4 <atoff>:
  40abb4:	2100      	movs	r1, #0
  40abb6:	f001 bd8d 	b.w	40c6d4 <strtof>
  40abba:	bf00      	nop

0040abbc <atoi>:
  40abbc:	2100      	movs	r1, #0
  40abbe:	220a      	movs	r2, #10
  40abc0:	f001 be68 	b.w	40c894 <strtol>

0040abc4 <__errno>:
  40abc4:	4b01      	ldr	r3, [pc, #4]	; (40abcc <__errno+0x8>)
  40abc6:	6818      	ldr	r0, [r3, #0]
  40abc8:	4770      	bx	lr
  40abca:	bf00      	nop
  40abcc:	204004d8 	.word	0x204004d8

0040abd0 <fiprintf>:
  40abd0:	b40e      	push	{r1, r2, r3}
  40abd2:	b510      	push	{r4, lr}
  40abd4:	b083      	sub	sp, #12
  40abd6:	4b07      	ldr	r3, [pc, #28]	; (40abf4 <fiprintf+0x24>)
  40abd8:	4601      	mov	r1, r0
  40abda:	ac05      	add	r4, sp, #20
  40abdc:	6818      	ldr	r0, [r3, #0]
  40abde:	f854 2b04 	ldr.w	r2, [r4], #4
  40abe2:	4623      	mov	r3, r4
  40abe4:	9401      	str	r4, [sp, #4]
  40abe6:	f003 f925 	bl	40de34 <_vfiprintf_r>
  40abea:	b003      	add	sp, #12
  40abec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40abf0:	b003      	add	sp, #12
  40abf2:	4770      	bx	lr
  40abf4:	204004d8 	.word	0x204004d8

0040abf8 <__libc_init_array>:
  40abf8:	b570      	push	{r4, r5, r6, lr}
  40abfa:	4e0f      	ldr	r6, [pc, #60]	; (40ac38 <__libc_init_array+0x40>)
  40abfc:	4d0f      	ldr	r5, [pc, #60]	; (40ac3c <__libc_init_array+0x44>)
  40abfe:	1b76      	subs	r6, r6, r5
  40ac00:	10b6      	asrs	r6, r6, #2
  40ac02:	bf18      	it	ne
  40ac04:	2400      	movne	r4, #0
  40ac06:	d005      	beq.n	40ac14 <__libc_init_array+0x1c>
  40ac08:	3401      	adds	r4, #1
  40ac0a:	f855 3b04 	ldr.w	r3, [r5], #4
  40ac0e:	4798      	blx	r3
  40ac10:	42a6      	cmp	r6, r4
  40ac12:	d1f9      	bne.n	40ac08 <__libc_init_array+0x10>
  40ac14:	4e0a      	ldr	r6, [pc, #40]	; (40ac40 <__libc_init_array+0x48>)
  40ac16:	f008 feab 	bl	413970 <_init>
  40ac1a:	4d0a      	ldr	r5, [pc, #40]	; (40ac44 <__libc_init_array+0x4c>)
  40ac1c:	1b76      	subs	r6, r6, r5
  40ac1e:	10b6      	asrs	r6, r6, #2
  40ac20:	bf18      	it	ne
  40ac22:	2400      	movne	r4, #0
  40ac24:	d006      	beq.n	40ac34 <__libc_init_array+0x3c>
  40ac26:	3401      	adds	r4, #1
  40ac28:	f855 3b04 	ldr.w	r3, [r5], #4
  40ac2c:	4798      	blx	r3
  40ac2e:	42a6      	cmp	r6, r4
  40ac30:	d1f9      	bne.n	40ac26 <__libc_init_array+0x2e>
  40ac32:	bd70      	pop	{r4, r5, r6, pc}
  40ac34:	bd70      	pop	{r4, r5, r6, pc}
  40ac36:	bf00      	nop
  40ac38:	0041397c 	.word	0x0041397c
  40ac3c:	0041397c 	.word	0x0041397c
  40ac40:	00413984 	.word	0x00413984
  40ac44:	0041397c 	.word	0x0041397c

0040ac48 <iprintf>:
  40ac48:	b40f      	push	{r0, r1, r2, r3}
  40ac4a:	b510      	push	{r4, lr}
  40ac4c:	b082      	sub	sp, #8
  40ac4e:	4b07      	ldr	r3, [pc, #28]	; (40ac6c <iprintf+0x24>)
  40ac50:	ac04      	add	r4, sp, #16
  40ac52:	6818      	ldr	r0, [r3, #0]
  40ac54:	f854 2b04 	ldr.w	r2, [r4], #4
  40ac58:	6881      	ldr	r1, [r0, #8]
  40ac5a:	4623      	mov	r3, r4
  40ac5c:	9401      	str	r4, [sp, #4]
  40ac5e:	f003 f8e9 	bl	40de34 <_vfiprintf_r>
  40ac62:	b002      	add	sp, #8
  40ac64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ac68:	b004      	add	sp, #16
  40ac6a:	4770      	bx	lr
  40ac6c:	204004d8 	.word	0x204004d8

0040ac70 <malloc>:
  40ac70:	4b02      	ldr	r3, [pc, #8]	; (40ac7c <malloc+0xc>)
  40ac72:	4601      	mov	r1, r0
  40ac74:	6818      	ldr	r0, [r3, #0]
  40ac76:	f000 b803 	b.w	40ac80 <_malloc_r>
  40ac7a:	bf00      	nop
  40ac7c:	204004d8 	.word	0x204004d8

0040ac80 <_malloc_r>:
  40ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ac84:	f101 040b 	add.w	r4, r1, #11
  40ac88:	b083      	sub	sp, #12
  40ac8a:	4605      	mov	r5, r0
  40ac8c:	2c16      	cmp	r4, #22
  40ac8e:	d927      	bls.n	40ace0 <_malloc_r+0x60>
  40ac90:	f034 0407 	bics.w	r4, r4, #7
  40ac94:	d42a      	bmi.n	40acec <_malloc_r+0x6c>
  40ac96:	42a1      	cmp	r1, r4
  40ac98:	d828      	bhi.n	40acec <_malloc_r+0x6c>
  40ac9a:	f000 fb87 	bl	40b3ac <__malloc_lock>
  40ac9e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  40aca2:	d22b      	bcs.n	40acfc <_malloc_r+0x7c>
  40aca4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  40aca8:	4ec0      	ldr	r6, [pc, #768]	; (40afac <_malloc_r+0x32c>)
  40acaa:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  40acae:	68d3      	ldr	r3, [r2, #12]
  40acb0:	4293      	cmp	r3, r2
  40acb2:	f000 8171 	beq.w	40af98 <_malloc_r+0x318>
  40acb6:	685a      	ldr	r2, [r3, #4]
  40acb8:	f103 0808 	add.w	r8, r3, #8
  40acbc:	68d9      	ldr	r1, [r3, #12]
  40acbe:	4628      	mov	r0, r5
  40acc0:	f022 0203 	bic.w	r2, r2, #3
  40acc4:	689c      	ldr	r4, [r3, #8]
  40acc6:	4413      	add	r3, r2
  40acc8:	60e1      	str	r1, [r4, #12]
  40acca:	608c      	str	r4, [r1, #8]
  40accc:	685a      	ldr	r2, [r3, #4]
  40acce:	f042 0201 	orr.w	r2, r2, #1
  40acd2:	605a      	str	r2, [r3, #4]
  40acd4:	f000 fb6c 	bl	40b3b0 <__malloc_unlock>
  40acd8:	4640      	mov	r0, r8
  40acda:	b003      	add	sp, #12
  40acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ace0:	2910      	cmp	r1, #16
  40ace2:	d803      	bhi.n	40acec <_malloc_r+0x6c>
  40ace4:	f000 fb62 	bl	40b3ac <__malloc_lock>
  40ace8:	2410      	movs	r4, #16
  40acea:	e7db      	b.n	40aca4 <_malloc_r+0x24>
  40acec:	f04f 0800 	mov.w	r8, #0
  40acf0:	230c      	movs	r3, #12
  40acf2:	4640      	mov	r0, r8
  40acf4:	602b      	str	r3, [r5, #0]
  40acf6:	b003      	add	sp, #12
  40acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40acfc:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  40ad00:	f000 8089 	beq.w	40ae16 <_malloc_r+0x196>
  40ad04:	f1bc 0f04 	cmp.w	ip, #4
  40ad08:	f200 80c4 	bhi.w	40ae94 <_malloc_r+0x214>
  40ad0c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  40ad10:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  40ad14:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40ad18:	4ea4      	ldr	r6, [pc, #656]	; (40afac <_malloc_r+0x32c>)
  40ad1a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40ad1e:	68c3      	ldr	r3, [r0, #12]
  40ad20:	4298      	cmp	r0, r3
  40ad22:	d105      	bne.n	40ad30 <_malloc_r+0xb0>
  40ad24:	e00c      	b.n	40ad40 <_malloc_r+0xc0>
  40ad26:	2900      	cmp	r1, #0
  40ad28:	da79      	bge.n	40ae1e <_malloc_r+0x19e>
  40ad2a:	68db      	ldr	r3, [r3, #12]
  40ad2c:	4298      	cmp	r0, r3
  40ad2e:	d007      	beq.n	40ad40 <_malloc_r+0xc0>
  40ad30:	685a      	ldr	r2, [r3, #4]
  40ad32:	f022 0203 	bic.w	r2, r2, #3
  40ad36:	1b11      	subs	r1, r2, r4
  40ad38:	290f      	cmp	r1, #15
  40ad3a:	ddf4      	ble.n	40ad26 <_malloc_r+0xa6>
  40ad3c:	f10c 3cff 	add.w	ip, ip, #4294967295
  40ad40:	f10c 0c01 	add.w	ip, ip, #1
  40ad44:	4f99      	ldr	r7, [pc, #612]	; (40afac <_malloc_r+0x32c>)
  40ad46:	6933      	ldr	r3, [r6, #16]
  40ad48:	f107 0e08 	add.w	lr, r7, #8
  40ad4c:	4573      	cmp	r3, lr
  40ad4e:	f000 8119 	beq.w	40af84 <_malloc_r+0x304>
  40ad52:	685a      	ldr	r2, [r3, #4]
  40ad54:	f022 0203 	bic.w	r2, r2, #3
  40ad58:	1b11      	subs	r1, r2, r4
  40ad5a:	290f      	cmp	r1, #15
  40ad5c:	f300 80ca 	bgt.w	40aef4 <_malloc_r+0x274>
  40ad60:	2900      	cmp	r1, #0
  40ad62:	f8c7 e014 	str.w	lr, [r7, #20]
  40ad66:	f8c7 e010 	str.w	lr, [r7, #16]
  40ad6a:	da6a      	bge.n	40ae42 <_malloc_r+0x1c2>
  40ad6c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40ad70:	f080 809f 	bcs.w	40aeb2 <_malloc_r+0x232>
  40ad74:	08d2      	lsrs	r2, r2, #3
  40ad76:	2001      	movs	r0, #1
  40ad78:	6879      	ldr	r1, [r7, #4]
  40ad7a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40ad7e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  40ad82:	fa00 f008 	lsl.w	r0, r0, r8
  40ad86:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40ad8a:	4308      	orrs	r0, r1
  40ad8c:	60da      	str	r2, [r3, #12]
  40ad8e:	f8c3 8008 	str.w	r8, [r3, #8]
  40ad92:	6078      	str	r0, [r7, #4]
  40ad94:	6093      	str	r3, [r2, #8]
  40ad96:	f8c8 300c 	str.w	r3, [r8, #12]
  40ad9a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40ad9e:	2101      	movs	r1, #1
  40ada0:	4099      	lsls	r1, r3
  40ada2:	4281      	cmp	r1, r0
  40ada4:	d85b      	bhi.n	40ae5e <_malloc_r+0x1de>
  40ada6:	4208      	tst	r0, r1
  40ada8:	d106      	bne.n	40adb8 <_malloc_r+0x138>
  40adaa:	f02c 0c03 	bic.w	ip, ip, #3
  40adae:	0049      	lsls	r1, r1, #1
  40adb0:	f10c 0c04 	add.w	ip, ip, #4
  40adb4:	4208      	tst	r0, r1
  40adb6:	d0fa      	beq.n	40adae <_malloc_r+0x12e>
  40adb8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  40adbc:	46e1      	mov	r9, ip
  40adbe:	4640      	mov	r0, r8
  40adc0:	68c7      	ldr	r7, [r0, #12]
  40adc2:	42b8      	cmp	r0, r7
  40adc4:	d107      	bne.n	40add6 <_malloc_r+0x156>
  40adc6:	e0df      	b.n	40af88 <_malloc_r+0x308>
  40adc8:	2a00      	cmp	r2, #0
  40adca:	f280 80f7 	bge.w	40afbc <_malloc_r+0x33c>
  40adce:	68ff      	ldr	r7, [r7, #12]
  40add0:	42b8      	cmp	r0, r7
  40add2:	f000 80d9 	beq.w	40af88 <_malloc_r+0x308>
  40add6:	687b      	ldr	r3, [r7, #4]
  40add8:	f023 0303 	bic.w	r3, r3, #3
  40addc:	1b1a      	subs	r2, r3, r4
  40adde:	2a0f      	cmp	r2, #15
  40ade0:	ddf2      	ble.n	40adc8 <_malloc_r+0x148>
  40ade2:	46b8      	mov	r8, r7
  40ade4:	68fb      	ldr	r3, [r7, #12]
  40ade6:	f044 0901 	orr.w	r9, r4, #1
  40adea:	f042 0c01 	orr.w	ip, r2, #1
  40adee:	f858 1f08 	ldr.w	r1, [r8, #8]!
  40adf2:	443c      	add	r4, r7
  40adf4:	f8c7 9004 	str.w	r9, [r7, #4]
  40adf8:	4628      	mov	r0, r5
  40adfa:	60cb      	str	r3, [r1, #12]
  40adfc:	6099      	str	r1, [r3, #8]
  40adfe:	6174      	str	r4, [r6, #20]
  40ae00:	6134      	str	r4, [r6, #16]
  40ae02:	f8c4 e00c 	str.w	lr, [r4, #12]
  40ae06:	f8c4 e008 	str.w	lr, [r4, #8]
  40ae0a:	f8c4 c004 	str.w	ip, [r4, #4]
  40ae0e:	50a2      	str	r2, [r4, r2]
  40ae10:	f000 face 	bl	40b3b0 <__malloc_unlock>
  40ae14:	e760      	b.n	40acd8 <_malloc_r+0x58>
  40ae16:	207e      	movs	r0, #126	; 0x7e
  40ae18:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40ae1c:	e77c      	b.n	40ad18 <_malloc_r+0x98>
  40ae1e:	441a      	add	r2, r3
  40ae20:	68dc      	ldr	r4, [r3, #12]
  40ae22:	689e      	ldr	r6, [r3, #8]
  40ae24:	f103 0808 	add.w	r8, r3, #8
  40ae28:	6851      	ldr	r1, [r2, #4]
  40ae2a:	4628      	mov	r0, r5
  40ae2c:	60f4      	str	r4, [r6, #12]
  40ae2e:	f041 0301 	orr.w	r3, r1, #1
  40ae32:	60a6      	str	r6, [r4, #8]
  40ae34:	6053      	str	r3, [r2, #4]
  40ae36:	f000 fabb 	bl	40b3b0 <__malloc_unlock>
  40ae3a:	4640      	mov	r0, r8
  40ae3c:	b003      	add	sp, #12
  40ae3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae42:	441a      	add	r2, r3
  40ae44:	f103 0808 	add.w	r8, r3, #8
  40ae48:	4628      	mov	r0, r5
  40ae4a:	6853      	ldr	r3, [r2, #4]
  40ae4c:	f043 0301 	orr.w	r3, r3, #1
  40ae50:	6053      	str	r3, [r2, #4]
  40ae52:	f000 faad 	bl	40b3b0 <__malloc_unlock>
  40ae56:	4640      	mov	r0, r8
  40ae58:	b003      	add	sp, #12
  40ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae5e:	68b7      	ldr	r7, [r6, #8]
  40ae60:	687a      	ldr	r2, [r7, #4]
  40ae62:	f022 0803 	bic.w	r8, r2, #3
  40ae66:	ebc4 0208 	rsb	r2, r4, r8
  40ae6a:	2a0f      	cmp	r2, #15
  40ae6c:	dd56      	ble.n	40af1c <_malloc_r+0x29c>
  40ae6e:	45a0      	cmp	r8, r4
  40ae70:	d354      	bcc.n	40af1c <_malloc_r+0x29c>
  40ae72:	f044 0301 	orr.w	r3, r4, #1
  40ae76:	f042 0201 	orr.w	r2, r2, #1
  40ae7a:	443c      	add	r4, r7
  40ae7c:	f107 0808 	add.w	r8, r7, #8
  40ae80:	607b      	str	r3, [r7, #4]
  40ae82:	4628      	mov	r0, r5
  40ae84:	60b4      	str	r4, [r6, #8]
  40ae86:	6062      	str	r2, [r4, #4]
  40ae88:	f000 fa92 	bl	40b3b0 <__malloc_unlock>
  40ae8c:	4640      	mov	r0, r8
  40ae8e:	b003      	add	sp, #12
  40ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ae94:	f1bc 0f14 	cmp.w	ip, #20
  40ae98:	f240 809f 	bls.w	40afda <_malloc_r+0x35a>
  40ae9c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40aea0:	f200 8127 	bhi.w	40b0f2 <_malloc_r+0x472>
  40aea4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  40aea8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  40aeac:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40aeb0:	e732      	b.n	40ad18 <_malloc_r+0x98>
  40aeb2:	0a51      	lsrs	r1, r2, #9
  40aeb4:	2904      	cmp	r1, #4
  40aeb6:	f240 8095 	bls.w	40afe4 <_malloc_r+0x364>
  40aeba:	2914      	cmp	r1, #20
  40aebc:	f200 8142 	bhi.w	40b144 <_malloc_r+0x4c4>
  40aec0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  40aec4:	0078      	lsls	r0, r7, #1
  40aec6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40aeca:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 40afac <_malloc_r+0x32c>
  40aece:	6881      	ldr	r1, [r0, #8]
  40aed0:	4281      	cmp	r1, r0
  40aed2:	f000 811b 	beq.w	40b10c <_malloc_r+0x48c>
  40aed6:	684f      	ldr	r7, [r1, #4]
  40aed8:	f027 0703 	bic.w	r7, r7, #3
  40aedc:	42ba      	cmp	r2, r7
  40aede:	d202      	bcs.n	40aee6 <_malloc_r+0x266>
  40aee0:	6889      	ldr	r1, [r1, #8]
  40aee2:	4288      	cmp	r0, r1
  40aee4:	d1f7      	bne.n	40aed6 <_malloc_r+0x256>
  40aee6:	68ca      	ldr	r2, [r1, #12]
  40aee8:	6870      	ldr	r0, [r6, #4]
  40aeea:	60da      	str	r2, [r3, #12]
  40aeec:	6099      	str	r1, [r3, #8]
  40aeee:	6093      	str	r3, [r2, #8]
  40aef0:	60cb      	str	r3, [r1, #12]
  40aef2:	e752      	b.n	40ad9a <_malloc_r+0x11a>
  40aef4:	f044 0601 	orr.w	r6, r4, #1
  40aef8:	f041 0201 	orr.w	r2, r1, #1
  40aefc:	441c      	add	r4, r3
  40aefe:	4628      	mov	r0, r5
  40af00:	605e      	str	r6, [r3, #4]
  40af02:	f103 0808 	add.w	r8, r3, #8
  40af06:	617c      	str	r4, [r7, #20]
  40af08:	613c      	str	r4, [r7, #16]
  40af0a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40af0e:	f8c4 e008 	str.w	lr, [r4, #8]
  40af12:	6062      	str	r2, [r4, #4]
  40af14:	5061      	str	r1, [r4, r1]
  40af16:	f000 fa4b 	bl	40b3b0 <__malloc_unlock>
  40af1a:	e6dd      	b.n	40acd8 <_malloc_r+0x58>
  40af1c:	4a24      	ldr	r2, [pc, #144]	; (40afb0 <_malloc_r+0x330>)
  40af1e:	4b25      	ldr	r3, [pc, #148]	; (40afb4 <_malloc_r+0x334>)
  40af20:	6811      	ldr	r1, [r2, #0]
  40af22:	681b      	ldr	r3, [r3, #0]
  40af24:	3101      	adds	r1, #1
  40af26:	4423      	add	r3, r4
  40af28:	f000 8109 	beq.w	40b13e <_malloc_r+0x4be>
  40af2c:	f241 010f 	movw	r1, #4111	; 0x100f
  40af30:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40afb8 <_malloc_r+0x338>
  40af34:	4419      	add	r1, r3
  40af36:	ea01 0909 	and.w	r9, r1, r9
  40af3a:	4628      	mov	r0, r5
  40af3c:	4649      	mov	r1, r9
  40af3e:	9201      	str	r2, [sp, #4]
  40af40:	f000 fa38 	bl	40b3b4 <_sbrk_r>
  40af44:	f1b0 3fff 	cmp.w	r0, #4294967295
  40af48:	4682      	mov	sl, r0
  40af4a:	9a01      	ldr	r2, [sp, #4]
  40af4c:	f000 8101 	beq.w	40b152 <_malloc_r+0x4d2>
  40af50:	1bbb      	subs	r3, r7, r6
  40af52:	eb07 0108 	add.w	r1, r7, r8
  40af56:	4815      	ldr	r0, [pc, #84]	; (40afac <_malloc_r+0x32c>)
  40af58:	bf18      	it	ne
  40af5a:	2301      	movne	r3, #1
  40af5c:	4551      	cmp	r1, sl
  40af5e:	d967      	bls.n	40b030 <_malloc_r+0x3b0>
  40af60:	2b00      	cmp	r3, #0
  40af62:	d065      	beq.n	40b030 <_malloc_r+0x3b0>
  40af64:	6887      	ldr	r7, [r0, #8]
  40af66:	687b      	ldr	r3, [r7, #4]
  40af68:	f023 0303 	bic.w	r3, r3, #3
  40af6c:	1b1a      	subs	r2, r3, r4
  40af6e:	2a0f      	cmp	r2, #15
  40af70:	dd02      	ble.n	40af78 <_malloc_r+0x2f8>
  40af72:	429c      	cmp	r4, r3
  40af74:	f67f af7d 	bls.w	40ae72 <_malloc_r+0x1f2>
  40af78:	4628      	mov	r0, r5
  40af7a:	f04f 0800 	mov.w	r8, #0
  40af7e:	f000 fa17 	bl	40b3b0 <__malloc_unlock>
  40af82:	e6a9      	b.n	40acd8 <_malloc_r+0x58>
  40af84:	6878      	ldr	r0, [r7, #4]
  40af86:	e708      	b.n	40ad9a <_malloc_r+0x11a>
  40af88:	f109 0901 	add.w	r9, r9, #1
  40af8c:	3008      	adds	r0, #8
  40af8e:	f019 0f03 	tst.w	r9, #3
  40af92:	f47f af15 	bne.w	40adc0 <_malloc_r+0x140>
  40af96:	e02f      	b.n	40aff8 <_malloc_r+0x378>
  40af98:	f103 0208 	add.w	r2, r3, #8
  40af9c:	695b      	ldr	r3, [r3, #20]
  40af9e:	429a      	cmp	r2, r3
  40afa0:	bf08      	it	eq
  40afa2:	f10c 0c02 	addeq.w	ip, ip, #2
  40afa6:	f43f aecd 	beq.w	40ad44 <_malloc_r+0xc4>
  40afaa:	e684      	b.n	40acb6 <_malloc_r+0x36>
  40afac:	204004dc 	.word	0x204004dc
  40afb0:	204008e8 	.word	0x204008e8
  40afb4:	2040c4ec 	.word	0x2040c4ec
  40afb8:	fffff000 	.word	0xfffff000
  40afbc:	18fa      	adds	r2, r7, r3
  40afbe:	46b8      	mov	r8, r7
  40afc0:	68f9      	ldr	r1, [r7, #12]
  40afc2:	4628      	mov	r0, r5
  40afc4:	6853      	ldr	r3, [r2, #4]
  40afc6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  40afca:	f043 0301 	orr.w	r3, r3, #1
  40afce:	6053      	str	r3, [r2, #4]
  40afd0:	60e1      	str	r1, [r4, #12]
  40afd2:	608c      	str	r4, [r1, #8]
  40afd4:	f000 f9ec 	bl	40b3b0 <__malloc_unlock>
  40afd8:	e67e      	b.n	40acd8 <_malloc_r+0x58>
  40afda:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40afde:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40afe2:	e699      	b.n	40ad18 <_malloc_r+0x98>
  40afe4:	0991      	lsrs	r1, r2, #6
  40afe6:	f101 0738 	add.w	r7, r1, #56	; 0x38
  40afea:	0078      	lsls	r0, r7, #1
  40afec:	e76b      	b.n	40aec6 <_malloc_r+0x246>
  40afee:	f8d8 8000 	ldr.w	r8, [r8]
  40aff2:	4598      	cmp	r8, r3
  40aff4:	f040 80e6 	bne.w	40b1c4 <_malloc_r+0x544>
  40aff8:	f01c 0f03 	tst.w	ip, #3
  40affc:	f1a8 0308 	sub.w	r3, r8, #8
  40b000:	f10c 3cff 	add.w	ip, ip, #4294967295
  40b004:	d1f3      	bne.n	40afee <_malloc_r+0x36e>
  40b006:	6873      	ldr	r3, [r6, #4]
  40b008:	ea23 0301 	bic.w	r3, r3, r1
  40b00c:	6073      	str	r3, [r6, #4]
  40b00e:	0049      	lsls	r1, r1, #1
  40b010:	4299      	cmp	r1, r3
  40b012:	f63f af24 	bhi.w	40ae5e <_malloc_r+0x1de>
  40b016:	2900      	cmp	r1, #0
  40b018:	f43f af21 	beq.w	40ae5e <_malloc_r+0x1de>
  40b01c:	420b      	tst	r3, r1
  40b01e:	46cc      	mov	ip, r9
  40b020:	f47f aeca 	bne.w	40adb8 <_malloc_r+0x138>
  40b024:	0049      	lsls	r1, r1, #1
  40b026:	f10c 0c04 	add.w	ip, ip, #4
  40b02a:	420b      	tst	r3, r1
  40b02c:	d0fa      	beq.n	40b024 <_malloc_r+0x3a4>
  40b02e:	e6c3      	b.n	40adb8 <_malloc_r+0x138>
  40b030:	f8df b19c 	ldr.w	fp, [pc, #412]	; 40b1d0 <_malloc_r+0x550>
  40b034:	4551      	cmp	r1, sl
  40b036:	f8db 0000 	ldr.w	r0, [fp]
  40b03a:	4448      	add	r0, r9
  40b03c:	f8cb 0000 	str.w	r0, [fp]
  40b040:	f000 808c 	beq.w	40b15c <_malloc_r+0x4dc>
  40b044:	6812      	ldr	r2, [r2, #0]
  40b046:	f8df e18c 	ldr.w	lr, [pc, #396]	; 40b1d4 <_malloc_r+0x554>
  40b04a:	3201      	adds	r2, #1
  40b04c:	f000 80a3 	beq.w	40b196 <_malloc_r+0x516>
  40b050:	ebc1 010a 	rsb	r1, r1, sl
  40b054:	4408      	add	r0, r1
  40b056:	f8cb 0000 	str.w	r0, [fp]
  40b05a:	f01a 0107 	ands.w	r1, sl, #7
  40b05e:	d052      	beq.n	40b106 <_malloc_r+0x486>
  40b060:	f1c1 0008 	rsb	r0, r1, #8
  40b064:	f241 0208 	movw	r2, #4104	; 0x1008
  40b068:	4482      	add	sl, r0
  40b06a:	1a52      	subs	r2, r2, r1
  40b06c:	eb0a 0109 	add.w	r1, sl, r9
  40b070:	4628      	mov	r0, r5
  40b072:	9301      	str	r3, [sp, #4]
  40b074:	f3c1 010b 	ubfx	r1, r1, #0, #12
  40b078:	ebc1 0902 	rsb	r9, r1, r2
  40b07c:	4649      	mov	r1, r9
  40b07e:	f000 f999 	bl	40b3b4 <_sbrk_r>
  40b082:	1c43      	adds	r3, r0, #1
  40b084:	9b01      	ldr	r3, [sp, #4]
  40b086:	d07a      	beq.n	40b17e <_malloc_r+0x4fe>
  40b088:	ebca 0200 	rsb	r2, sl, r0
  40b08c:	444a      	add	r2, r9
  40b08e:	f042 0201 	orr.w	r2, r2, #1
  40b092:	f8db 0000 	ldr.w	r0, [fp]
  40b096:	f8c6 a008 	str.w	sl, [r6, #8]
  40b09a:	4448      	add	r0, r9
  40b09c:	f8ca 2004 	str.w	r2, [sl, #4]
  40b0a0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40b1d0 <_malloc_r+0x550>
  40b0a4:	f8cb 0000 	str.w	r0, [fp]
  40b0a8:	b1a3      	cbz	r3, 40b0d4 <_malloc_r+0x454>
  40b0aa:	f1b8 0f0f 	cmp.w	r8, #15
  40b0ae:	d937      	bls.n	40b120 <_malloc_r+0x4a0>
  40b0b0:	687b      	ldr	r3, [r7, #4]
  40b0b2:	f1a8 020c 	sub.w	r2, r8, #12
  40b0b6:	f04f 0e05 	mov.w	lr, #5
  40b0ba:	f022 0207 	bic.w	r2, r2, #7
  40b0be:	f003 0301 	and.w	r3, r3, #1
  40b0c2:	18b9      	adds	r1, r7, r2
  40b0c4:	4313      	orrs	r3, r2
  40b0c6:	2a0f      	cmp	r2, #15
  40b0c8:	607b      	str	r3, [r7, #4]
  40b0ca:	f8c1 e004 	str.w	lr, [r1, #4]
  40b0ce:	f8c1 e008 	str.w	lr, [r1, #8]
  40b0d2:	d858      	bhi.n	40b186 <_malloc_r+0x506>
  40b0d4:	4b3c      	ldr	r3, [pc, #240]	; (40b1c8 <_malloc_r+0x548>)
  40b0d6:	681a      	ldr	r2, [r3, #0]
  40b0d8:	4290      	cmp	r0, r2
  40b0da:	d900      	bls.n	40b0de <_malloc_r+0x45e>
  40b0dc:	6018      	str	r0, [r3, #0]
  40b0de:	4b3b      	ldr	r3, [pc, #236]	; (40b1cc <_malloc_r+0x54c>)
  40b0e0:	68b7      	ldr	r7, [r6, #8]
  40b0e2:	681a      	ldr	r2, [r3, #0]
  40b0e4:	4290      	cmp	r0, r2
  40b0e6:	d900      	bls.n	40b0ea <_malloc_r+0x46a>
  40b0e8:	6018      	str	r0, [r3, #0]
  40b0ea:	687b      	ldr	r3, [r7, #4]
  40b0ec:	f023 0303 	bic.w	r3, r3, #3
  40b0f0:	e73c      	b.n	40af6c <_malloc_r+0x2ec>
  40b0f2:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  40b0f6:	d817      	bhi.n	40b128 <_malloc_r+0x4a8>
  40b0f8:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  40b0fc:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40b100:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b104:	e608      	b.n	40ad18 <_malloc_r+0x98>
  40b106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40b10a:	e7af      	b.n	40b06c <_malloc_r+0x3ec>
  40b10c:	10bf      	asrs	r7, r7, #2
  40b10e:	2001      	movs	r0, #1
  40b110:	460a      	mov	r2, r1
  40b112:	40b8      	lsls	r0, r7
  40b114:	f8d9 7004 	ldr.w	r7, [r9, #4]
  40b118:	4338      	orrs	r0, r7
  40b11a:	f8c9 0004 	str.w	r0, [r9, #4]
  40b11e:	e6e4      	b.n	40aeea <_malloc_r+0x26a>
  40b120:	2301      	movs	r3, #1
  40b122:	f8ca 3004 	str.w	r3, [sl, #4]
  40b126:	e727      	b.n	40af78 <_malloc_r+0x2f8>
  40b128:	f240 5354 	movw	r3, #1364	; 0x554
  40b12c:	459c      	cmp	ip, r3
  40b12e:	d822      	bhi.n	40b176 <_malloc_r+0x4f6>
  40b130:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  40b134:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  40b138:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40b13c:	e5ec      	b.n	40ad18 <_malloc_r+0x98>
  40b13e:	f103 0910 	add.w	r9, r3, #16
  40b142:	e6fa      	b.n	40af3a <_malloc_r+0x2ba>
  40b144:	2954      	cmp	r1, #84	; 0x54
  40b146:	d829      	bhi.n	40b19c <_malloc_r+0x51c>
  40b148:	0b11      	lsrs	r1, r2, #12
  40b14a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40b14e:	0078      	lsls	r0, r7, #1
  40b150:	e6b9      	b.n	40aec6 <_malloc_r+0x246>
  40b152:	68b7      	ldr	r7, [r6, #8]
  40b154:	687b      	ldr	r3, [r7, #4]
  40b156:	f023 0303 	bic.w	r3, r3, #3
  40b15a:	e707      	b.n	40af6c <_malloc_r+0x2ec>
  40b15c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  40b160:	f1be 0f00 	cmp.w	lr, #0
  40b164:	f47f af6e 	bne.w	40b044 <_malloc_r+0x3c4>
  40b168:	eb09 0308 	add.w	r3, r9, r8
  40b16c:	68b2      	ldr	r2, [r6, #8]
  40b16e:	f043 0301 	orr.w	r3, r3, #1
  40b172:	6053      	str	r3, [r2, #4]
  40b174:	e7ae      	b.n	40b0d4 <_malloc_r+0x454>
  40b176:	20fc      	movs	r0, #252	; 0xfc
  40b178:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40b17c:	e5cc      	b.n	40ad18 <_malloc_r+0x98>
  40b17e:	2201      	movs	r2, #1
  40b180:	f04f 0900 	mov.w	r9, #0
  40b184:	e785      	b.n	40b092 <_malloc_r+0x412>
  40b186:	4628      	mov	r0, r5
  40b188:	f107 0108 	add.w	r1, r7, #8
  40b18c:	f004 ff32 	bl	40fff4 <_free_r>
  40b190:	f8d9 0000 	ldr.w	r0, [r9]
  40b194:	e79e      	b.n	40b0d4 <_malloc_r+0x454>
  40b196:	f8ce a000 	str.w	sl, [lr]
  40b19a:	e75e      	b.n	40b05a <_malloc_r+0x3da>
  40b19c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  40b1a0:	d804      	bhi.n	40b1ac <_malloc_r+0x52c>
  40b1a2:	0bd1      	lsrs	r1, r2, #15
  40b1a4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  40b1a8:	0078      	lsls	r0, r7, #1
  40b1aa:	e68c      	b.n	40aec6 <_malloc_r+0x246>
  40b1ac:	f240 5054 	movw	r0, #1364	; 0x554
  40b1b0:	4281      	cmp	r1, r0
  40b1b2:	d804      	bhi.n	40b1be <_malloc_r+0x53e>
  40b1b4:	0c91      	lsrs	r1, r2, #18
  40b1b6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  40b1ba:	0078      	lsls	r0, r7, #1
  40b1bc:	e683      	b.n	40aec6 <_malloc_r+0x246>
  40b1be:	20fc      	movs	r0, #252	; 0xfc
  40b1c0:	277e      	movs	r7, #126	; 0x7e
  40b1c2:	e680      	b.n	40aec6 <_malloc_r+0x246>
  40b1c4:	6873      	ldr	r3, [r6, #4]
  40b1c6:	e722      	b.n	40b00e <_malloc_r+0x38e>
  40b1c8:	2040c4e8 	.word	0x2040c4e8
  40b1cc:	2040c4e4 	.word	0x2040c4e4
  40b1d0:	2040c4f0 	.word	0x2040c4f0
  40b1d4:	204008e8 	.word	0x204008e8

0040b1d8 <memcpy>:
  40b1d8:	4684      	mov	ip, r0
  40b1da:	ea41 0300 	orr.w	r3, r1, r0
  40b1de:	f013 0303 	ands.w	r3, r3, #3
  40b1e2:	d16d      	bne.n	40b2c0 <memcpy+0xe8>
  40b1e4:	3a40      	subs	r2, #64	; 0x40
  40b1e6:	d341      	bcc.n	40b26c <memcpy+0x94>
  40b1e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b1ec:	f840 3b04 	str.w	r3, [r0], #4
  40b1f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40b1f4:	f840 3b04 	str.w	r3, [r0], #4
  40b1f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40b1fc:	f840 3b04 	str.w	r3, [r0], #4
  40b200:	f851 3b04 	ldr.w	r3, [r1], #4
  40b204:	f840 3b04 	str.w	r3, [r0], #4
  40b208:	f851 3b04 	ldr.w	r3, [r1], #4
  40b20c:	f840 3b04 	str.w	r3, [r0], #4
  40b210:	f851 3b04 	ldr.w	r3, [r1], #4
  40b214:	f840 3b04 	str.w	r3, [r0], #4
  40b218:	f851 3b04 	ldr.w	r3, [r1], #4
  40b21c:	f840 3b04 	str.w	r3, [r0], #4
  40b220:	f851 3b04 	ldr.w	r3, [r1], #4
  40b224:	f840 3b04 	str.w	r3, [r0], #4
  40b228:	f851 3b04 	ldr.w	r3, [r1], #4
  40b22c:	f840 3b04 	str.w	r3, [r0], #4
  40b230:	f851 3b04 	ldr.w	r3, [r1], #4
  40b234:	f840 3b04 	str.w	r3, [r0], #4
  40b238:	f851 3b04 	ldr.w	r3, [r1], #4
  40b23c:	f840 3b04 	str.w	r3, [r0], #4
  40b240:	f851 3b04 	ldr.w	r3, [r1], #4
  40b244:	f840 3b04 	str.w	r3, [r0], #4
  40b248:	f851 3b04 	ldr.w	r3, [r1], #4
  40b24c:	f840 3b04 	str.w	r3, [r0], #4
  40b250:	f851 3b04 	ldr.w	r3, [r1], #4
  40b254:	f840 3b04 	str.w	r3, [r0], #4
  40b258:	f851 3b04 	ldr.w	r3, [r1], #4
  40b25c:	f840 3b04 	str.w	r3, [r0], #4
  40b260:	f851 3b04 	ldr.w	r3, [r1], #4
  40b264:	f840 3b04 	str.w	r3, [r0], #4
  40b268:	3a40      	subs	r2, #64	; 0x40
  40b26a:	d2bd      	bcs.n	40b1e8 <memcpy+0x10>
  40b26c:	3230      	adds	r2, #48	; 0x30
  40b26e:	d311      	bcc.n	40b294 <memcpy+0xbc>
  40b270:	f851 3b04 	ldr.w	r3, [r1], #4
  40b274:	f840 3b04 	str.w	r3, [r0], #4
  40b278:	f851 3b04 	ldr.w	r3, [r1], #4
  40b27c:	f840 3b04 	str.w	r3, [r0], #4
  40b280:	f851 3b04 	ldr.w	r3, [r1], #4
  40b284:	f840 3b04 	str.w	r3, [r0], #4
  40b288:	f851 3b04 	ldr.w	r3, [r1], #4
  40b28c:	f840 3b04 	str.w	r3, [r0], #4
  40b290:	3a10      	subs	r2, #16
  40b292:	d2ed      	bcs.n	40b270 <memcpy+0x98>
  40b294:	320c      	adds	r2, #12
  40b296:	d305      	bcc.n	40b2a4 <memcpy+0xcc>
  40b298:	f851 3b04 	ldr.w	r3, [r1], #4
  40b29c:	f840 3b04 	str.w	r3, [r0], #4
  40b2a0:	3a04      	subs	r2, #4
  40b2a2:	d2f9      	bcs.n	40b298 <memcpy+0xc0>
  40b2a4:	3204      	adds	r2, #4
  40b2a6:	d008      	beq.n	40b2ba <memcpy+0xe2>
  40b2a8:	07d2      	lsls	r2, r2, #31
  40b2aa:	bf1c      	itt	ne
  40b2ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b2b0:	f800 3b01 	strbne.w	r3, [r0], #1
  40b2b4:	d301      	bcc.n	40b2ba <memcpy+0xe2>
  40b2b6:	880b      	ldrh	r3, [r1, #0]
  40b2b8:	8003      	strh	r3, [r0, #0]
  40b2ba:	4660      	mov	r0, ip
  40b2bc:	4770      	bx	lr
  40b2be:	bf00      	nop
  40b2c0:	2a08      	cmp	r2, #8
  40b2c2:	d313      	bcc.n	40b2ec <memcpy+0x114>
  40b2c4:	078b      	lsls	r3, r1, #30
  40b2c6:	d08d      	beq.n	40b1e4 <memcpy+0xc>
  40b2c8:	f010 0303 	ands.w	r3, r0, #3
  40b2cc:	d08a      	beq.n	40b1e4 <memcpy+0xc>
  40b2ce:	f1c3 0304 	rsb	r3, r3, #4
  40b2d2:	1ad2      	subs	r2, r2, r3
  40b2d4:	07db      	lsls	r3, r3, #31
  40b2d6:	bf1c      	itt	ne
  40b2d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b2dc:	f800 3b01 	strbne.w	r3, [r0], #1
  40b2e0:	d380      	bcc.n	40b1e4 <memcpy+0xc>
  40b2e2:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b2e6:	f820 3b02 	strh.w	r3, [r0], #2
  40b2ea:	e77b      	b.n	40b1e4 <memcpy+0xc>
  40b2ec:	3a04      	subs	r2, #4
  40b2ee:	d3d9      	bcc.n	40b2a4 <memcpy+0xcc>
  40b2f0:	3a01      	subs	r2, #1
  40b2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b2f6:	f800 3b01 	strb.w	r3, [r0], #1
  40b2fa:	d2f9      	bcs.n	40b2f0 <memcpy+0x118>
  40b2fc:	780b      	ldrb	r3, [r1, #0]
  40b2fe:	7003      	strb	r3, [r0, #0]
  40b300:	784b      	ldrb	r3, [r1, #1]
  40b302:	7043      	strb	r3, [r0, #1]
  40b304:	788b      	ldrb	r3, [r1, #2]
  40b306:	7083      	strb	r3, [r0, #2]
  40b308:	4660      	mov	r0, ip
  40b30a:	4770      	bx	lr

0040b30c <memset>:
  40b30c:	0783      	lsls	r3, r0, #30
  40b30e:	b470      	push	{r4, r5, r6}
  40b310:	d049      	beq.n	40b3a6 <memset+0x9a>
  40b312:	1e54      	subs	r4, r2, #1
  40b314:	2a00      	cmp	r2, #0
  40b316:	d044      	beq.n	40b3a2 <memset+0x96>
  40b318:	b2cd      	uxtb	r5, r1
  40b31a:	4603      	mov	r3, r0
  40b31c:	e002      	b.n	40b324 <memset+0x18>
  40b31e:	2c00      	cmp	r4, #0
  40b320:	d03f      	beq.n	40b3a2 <memset+0x96>
  40b322:	4614      	mov	r4, r2
  40b324:	f803 5b01 	strb.w	r5, [r3], #1
  40b328:	f013 0f03 	tst.w	r3, #3
  40b32c:	f104 32ff 	add.w	r2, r4, #4294967295
  40b330:	d1f5      	bne.n	40b31e <memset+0x12>
  40b332:	2c03      	cmp	r4, #3
  40b334:	d92e      	bls.n	40b394 <memset+0x88>
  40b336:	b2cd      	uxtb	r5, r1
  40b338:	2c0f      	cmp	r4, #15
  40b33a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b33e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b342:	d919      	bls.n	40b378 <memset+0x6c>
  40b344:	f103 0210 	add.w	r2, r3, #16
  40b348:	4626      	mov	r6, r4
  40b34a:	3e10      	subs	r6, #16
  40b34c:	f842 5c10 	str.w	r5, [r2, #-16]
  40b350:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b354:	3210      	adds	r2, #16
  40b356:	2e0f      	cmp	r6, #15
  40b358:	f842 5c18 	str.w	r5, [r2, #-24]
  40b35c:	f842 5c14 	str.w	r5, [r2, #-20]
  40b360:	d8f3      	bhi.n	40b34a <memset+0x3e>
  40b362:	f1a4 0210 	sub.w	r2, r4, #16
  40b366:	f004 040f 	and.w	r4, r4, #15
  40b36a:	f022 020f 	bic.w	r2, r2, #15
  40b36e:	2c03      	cmp	r4, #3
  40b370:	f102 0210 	add.w	r2, r2, #16
  40b374:	4413      	add	r3, r2
  40b376:	d90d      	bls.n	40b394 <memset+0x88>
  40b378:	461e      	mov	r6, r3
  40b37a:	4622      	mov	r2, r4
  40b37c:	3a04      	subs	r2, #4
  40b37e:	f846 5b04 	str.w	r5, [r6], #4
  40b382:	2a03      	cmp	r2, #3
  40b384:	d8fa      	bhi.n	40b37c <memset+0x70>
  40b386:	1f22      	subs	r2, r4, #4
  40b388:	f004 0403 	and.w	r4, r4, #3
  40b38c:	f022 0203 	bic.w	r2, r2, #3
  40b390:	3204      	adds	r2, #4
  40b392:	4413      	add	r3, r2
  40b394:	b12c      	cbz	r4, 40b3a2 <memset+0x96>
  40b396:	b2c9      	uxtb	r1, r1
  40b398:	441c      	add	r4, r3
  40b39a:	f803 1b01 	strb.w	r1, [r3], #1
  40b39e:	42a3      	cmp	r3, r4
  40b3a0:	d1fb      	bne.n	40b39a <memset+0x8e>
  40b3a2:	bc70      	pop	{r4, r5, r6}
  40b3a4:	4770      	bx	lr
  40b3a6:	4614      	mov	r4, r2
  40b3a8:	4603      	mov	r3, r0
  40b3aa:	e7c2      	b.n	40b332 <memset+0x26>

0040b3ac <__malloc_lock>:
  40b3ac:	4770      	bx	lr
  40b3ae:	bf00      	nop

0040b3b0 <__malloc_unlock>:
  40b3b0:	4770      	bx	lr
  40b3b2:	bf00      	nop

0040b3b4 <_sbrk_r>:
  40b3b4:	b538      	push	{r3, r4, r5, lr}
  40b3b6:	2300      	movs	r3, #0
  40b3b8:	4c06      	ldr	r4, [pc, #24]	; (40b3d4 <_sbrk_r+0x20>)
  40b3ba:	4605      	mov	r5, r0
  40b3bc:	4608      	mov	r0, r1
  40b3be:	6023      	str	r3, [r4, #0]
  40b3c0:	f7f8 f978 	bl	4036b4 <_sbrk>
  40b3c4:	1c43      	adds	r3, r0, #1
  40b3c6:	d000      	beq.n	40b3ca <_sbrk_r+0x16>
  40b3c8:	bd38      	pop	{r3, r4, r5, pc}
  40b3ca:	6823      	ldr	r3, [r4, #0]
  40b3cc:	2b00      	cmp	r3, #0
  40b3ce:	d0fb      	beq.n	40b3c8 <_sbrk_r+0x14>
  40b3d0:	602b      	str	r3, [r5, #0]
  40b3d2:	bd38      	pop	{r3, r4, r5, pc}
  40b3d4:	2040c6a4 	.word	0x2040c6a4

0040b3d8 <sprintf>:
  40b3d8:	b40e      	push	{r1, r2, r3}
  40b3da:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b3dc:	b09c      	sub	sp, #112	; 0x70
  40b3de:	4b10      	ldr	r3, [pc, #64]	; (40b420 <sprintf+0x48>)
  40b3e0:	4606      	mov	r6, r0
  40b3e2:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40b3e6:	ac21      	add	r4, sp, #132	; 0x84
  40b3e8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  40b3ec:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40b3f0:	6818      	ldr	r0, [r3, #0]
  40b3f2:	f854 2b04 	ldr.w	r2, [r4], #4
  40b3f6:	a902      	add	r1, sp, #8
  40b3f8:	9602      	str	r6, [sp, #8]
  40b3fa:	4623      	mov	r3, r4
  40b3fc:	9606      	str	r6, [sp, #24]
  40b3fe:	9401      	str	r4, [sp, #4]
  40b400:	f8ad e014 	strh.w	lr, [sp, #20]
  40b404:	9504      	str	r5, [sp, #16]
  40b406:	9507      	str	r5, [sp, #28]
  40b408:	f8ad 7016 	strh.w	r7, [sp, #22]
  40b40c:	f001 fa4e 	bl	40c8ac <_svfprintf_r>
  40b410:	9b02      	ldr	r3, [sp, #8]
  40b412:	2200      	movs	r2, #0
  40b414:	701a      	strb	r2, [r3, #0]
  40b416:	b01c      	add	sp, #112	; 0x70
  40b418:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40b41c:	b003      	add	sp, #12
  40b41e:	4770      	bx	lr
  40b420:	204004d8 	.word	0x204004d8
	...
  40b440:	eba2 0003 	sub.w	r0, r2, r3
  40b444:	4770      	bx	lr
  40b446:	bf00      	nop

0040b448 <strcmp>:
  40b448:	7802      	ldrb	r2, [r0, #0]
  40b44a:	780b      	ldrb	r3, [r1, #0]
  40b44c:	2a01      	cmp	r2, #1
  40b44e:	bf28      	it	cs
  40b450:	429a      	cmpcs	r2, r3
  40b452:	d1f5      	bne.n	40b440 <sprintf+0x68>
  40b454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  40b458:	ea40 0401 	orr.w	r4, r0, r1
  40b45c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40b460:	f06f 0c00 	mvn.w	ip, #0
  40b464:	ea4f 7244 	mov.w	r2, r4, lsl #29
  40b468:	b312      	cbz	r2, 40b4b0 <strcmp+0x68>
  40b46a:	ea80 0401 	eor.w	r4, r0, r1
  40b46e:	f014 0f07 	tst.w	r4, #7
  40b472:	d16a      	bne.n	40b54a <strcmp+0x102>
  40b474:	f000 0407 	and.w	r4, r0, #7
  40b478:	f020 0007 	bic.w	r0, r0, #7
  40b47c:	f004 0503 	and.w	r5, r4, #3
  40b480:	f021 0107 	bic.w	r1, r1, #7
  40b484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40b488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40b48c:	f014 0f04 	tst.w	r4, #4
  40b490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40b494:	fa0c f405 	lsl.w	r4, ip, r5
  40b498:	ea62 0204 	orn	r2, r2, r4
  40b49c:	ea66 0604 	orn	r6, r6, r4
  40b4a0:	d00a      	beq.n	40b4b8 <strcmp+0x70>
  40b4a2:	ea63 0304 	orn	r3, r3, r4
  40b4a6:	4662      	mov	r2, ip
  40b4a8:	ea67 0704 	orn	r7, r7, r4
  40b4ac:	4666      	mov	r6, ip
  40b4ae:	e003      	b.n	40b4b8 <strcmp+0x70>
  40b4b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40b4b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  40b4b8:	fa82 f54c 	uadd8	r5, r2, ip
  40b4bc:	ea82 0406 	eor.w	r4, r2, r6
  40b4c0:	faa4 f48c 	sel	r4, r4, ip
  40b4c4:	bb6c      	cbnz	r4, 40b522 <strcmp+0xda>
  40b4c6:	fa83 f54c 	uadd8	r5, r3, ip
  40b4ca:	ea83 0507 	eor.w	r5, r3, r7
  40b4ce:	faa5 f58c 	sel	r5, r5, ip
  40b4d2:	b995      	cbnz	r5, 40b4fa <strcmp+0xb2>
  40b4d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  40b4d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40b4dc:	fa82 f54c 	uadd8	r5, r2, ip
  40b4e0:	ea82 0406 	eor.w	r4, r2, r6
  40b4e4:	faa4 f48c 	sel	r4, r4, ip
  40b4e8:	fa83 f54c 	uadd8	r5, r3, ip
  40b4ec:	ea83 0507 	eor.w	r5, r3, r7
  40b4f0:	faa5 f58c 	sel	r5, r5, ip
  40b4f4:	4325      	orrs	r5, r4
  40b4f6:	d0db      	beq.n	40b4b0 <strcmp+0x68>
  40b4f8:	b99c      	cbnz	r4, 40b522 <strcmp+0xda>
  40b4fa:	ba2d      	rev	r5, r5
  40b4fc:	fab5 f485 	clz	r4, r5
  40b500:	f024 0407 	bic.w	r4, r4, #7
  40b504:	fa27 f104 	lsr.w	r1, r7, r4
  40b508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40b50c:	fa23 f304 	lsr.w	r3, r3, r4
  40b510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  40b514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b51c:	eba0 0001 	sub.w	r0, r0, r1
  40b520:	4770      	bx	lr
  40b522:	ba24      	rev	r4, r4
  40b524:	fab4 f484 	clz	r4, r4
  40b528:	f024 0407 	bic.w	r4, r4, #7
  40b52c:	fa26 f104 	lsr.w	r1, r6, r4
  40b530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  40b534:	fa22 f204 	lsr.w	r2, r2, r4
  40b538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40b53c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b544:	eba0 0001 	sub.w	r0, r0, r1
  40b548:	4770      	bx	lr
  40b54a:	f014 0f03 	tst.w	r4, #3
  40b54e:	d13c      	bne.n	40b5ca <strcmp+0x182>
  40b550:	f010 0403 	ands.w	r4, r0, #3
  40b554:	d128      	bne.n	40b5a8 <strcmp+0x160>
  40b556:	f850 2b08 	ldr.w	r2, [r0], #8
  40b55a:	f851 3b08 	ldr.w	r3, [r1], #8
  40b55e:	fa82 f54c 	uadd8	r5, r2, ip
  40b562:	ea82 0503 	eor.w	r5, r2, r3
  40b566:	faa5 f58c 	sel	r5, r5, ip
  40b56a:	b95d      	cbnz	r5, 40b584 <strcmp+0x13c>
  40b56c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b570:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40b574:	fa82 f54c 	uadd8	r5, r2, ip
  40b578:	ea82 0503 	eor.w	r5, r2, r3
  40b57c:	faa5 f58c 	sel	r5, r5, ip
  40b580:	2d00      	cmp	r5, #0
  40b582:	d0e8      	beq.n	40b556 <strcmp+0x10e>
  40b584:	ba2d      	rev	r5, r5
  40b586:	fab5 f485 	clz	r4, r5
  40b58a:	f024 0407 	bic.w	r4, r4, #7
  40b58e:	fa23 f104 	lsr.w	r1, r3, r4
  40b592:	fa22 f204 	lsr.w	r2, r2, r4
  40b596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40b59a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b59e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b5a2:	eba0 0001 	sub.w	r0, r0, r1
  40b5a6:	4770      	bx	lr
  40b5a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40b5ac:	f020 0003 	bic.w	r0, r0, #3
  40b5b0:	f850 2b08 	ldr.w	r2, [r0], #8
  40b5b4:	f021 0103 	bic.w	r1, r1, #3
  40b5b8:	f851 3b08 	ldr.w	r3, [r1], #8
  40b5bc:	fa0c f404 	lsl.w	r4, ip, r4
  40b5c0:	ea62 0204 	orn	r2, r2, r4
  40b5c4:	ea63 0304 	orn	r3, r3, r4
  40b5c8:	e7c9      	b.n	40b55e <strcmp+0x116>
  40b5ca:	f010 0403 	ands.w	r4, r0, #3
  40b5ce:	d01a      	beq.n	40b606 <strcmp+0x1be>
  40b5d0:	eba1 0104 	sub.w	r1, r1, r4
  40b5d4:	f020 0003 	bic.w	r0, r0, #3
  40b5d8:	07e4      	lsls	r4, r4, #31
  40b5da:	f850 2b04 	ldr.w	r2, [r0], #4
  40b5de:	d006      	beq.n	40b5ee <strcmp+0x1a6>
  40b5e0:	d20f      	bcs.n	40b602 <strcmp+0x1ba>
  40b5e2:	788b      	ldrb	r3, [r1, #2]
  40b5e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  40b5e8:	1ae4      	subs	r4, r4, r3
  40b5ea:	d106      	bne.n	40b5fa <strcmp+0x1b2>
  40b5ec:	b12b      	cbz	r3, 40b5fa <strcmp+0x1b2>
  40b5ee:	78cb      	ldrb	r3, [r1, #3]
  40b5f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  40b5f4:	1ae4      	subs	r4, r4, r3
  40b5f6:	d100      	bne.n	40b5fa <strcmp+0x1b2>
  40b5f8:	b91b      	cbnz	r3, 40b602 <strcmp+0x1ba>
  40b5fa:	4620      	mov	r0, r4
  40b5fc:	f85d 4b10 	ldr.w	r4, [sp], #16
  40b600:	4770      	bx	lr
  40b602:	f101 0104 	add.w	r1, r1, #4
  40b606:	f850 2b04 	ldr.w	r2, [r0], #4
  40b60a:	07cc      	lsls	r4, r1, #31
  40b60c:	f021 0103 	bic.w	r1, r1, #3
  40b610:	f851 3b04 	ldr.w	r3, [r1], #4
  40b614:	d848      	bhi.n	40b6a8 <strcmp+0x260>
  40b616:	d224      	bcs.n	40b662 <strcmp+0x21a>
  40b618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  40b61c:	fa82 f54c 	uadd8	r5, r2, ip
  40b620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  40b624:	faa5 f58c 	sel	r5, r5, ip
  40b628:	d10a      	bne.n	40b640 <strcmp+0x1f8>
  40b62a:	b965      	cbnz	r5, 40b646 <strcmp+0x1fe>
  40b62c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b630:	ea84 0402 	eor.w	r4, r4, r2
  40b634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  40b638:	d10e      	bne.n	40b658 <strcmp+0x210>
  40b63a:	f850 2b04 	ldr.w	r2, [r0], #4
  40b63e:	e7eb      	b.n	40b618 <strcmp+0x1d0>
  40b640:	ea4f 2313 	mov.w	r3, r3, lsr #8
  40b644:	e055      	b.n	40b6f2 <strcmp+0x2aa>
  40b646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40b64a:	d14d      	bne.n	40b6e8 <strcmp+0x2a0>
  40b64c:	7808      	ldrb	r0, [r1, #0]
  40b64e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b652:	f1c0 0000 	rsb	r0, r0, #0
  40b656:	4770      	bx	lr
  40b658:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40b65c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  40b660:	e047      	b.n	40b6f2 <strcmp+0x2aa>
  40b662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  40b666:	fa82 f54c 	uadd8	r5, r2, ip
  40b66a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40b66e:	faa5 f58c 	sel	r5, r5, ip
  40b672:	d10a      	bne.n	40b68a <strcmp+0x242>
  40b674:	b965      	cbnz	r5, 40b690 <strcmp+0x248>
  40b676:	f851 3b04 	ldr.w	r3, [r1], #4
  40b67a:	ea84 0402 	eor.w	r4, r4, r2
  40b67e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  40b682:	d10c      	bne.n	40b69e <strcmp+0x256>
  40b684:	f850 2b04 	ldr.w	r2, [r0], #4
  40b688:	e7eb      	b.n	40b662 <strcmp+0x21a>
  40b68a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40b68e:	e030      	b.n	40b6f2 <strcmp+0x2aa>
  40b690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  40b694:	d128      	bne.n	40b6e8 <strcmp+0x2a0>
  40b696:	880b      	ldrh	r3, [r1, #0]
  40b698:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b69c:	e029      	b.n	40b6f2 <strcmp+0x2aa>
  40b69e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40b6a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  40b6a6:	e024      	b.n	40b6f2 <strcmp+0x2aa>
  40b6a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40b6ac:	fa82 f54c 	uadd8	r5, r2, ip
  40b6b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  40b6b4:	faa5 f58c 	sel	r5, r5, ip
  40b6b8:	d10a      	bne.n	40b6d0 <strcmp+0x288>
  40b6ba:	b965      	cbnz	r5, 40b6d6 <strcmp+0x28e>
  40b6bc:	f851 3b04 	ldr.w	r3, [r1], #4
  40b6c0:	ea84 0402 	eor.w	r4, r4, r2
  40b6c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  40b6c8:	d109      	bne.n	40b6de <strcmp+0x296>
  40b6ca:	f850 2b04 	ldr.w	r2, [r0], #4
  40b6ce:	e7eb      	b.n	40b6a8 <strcmp+0x260>
  40b6d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  40b6d4:	e00d      	b.n	40b6f2 <strcmp+0x2aa>
  40b6d6:	f015 0fff 	tst.w	r5, #255	; 0xff
  40b6da:	d105      	bne.n	40b6e8 <strcmp+0x2a0>
  40b6dc:	680b      	ldr	r3, [r1, #0]
  40b6de:	ea4f 2212 	mov.w	r2, r2, lsr #8
  40b6e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40b6e6:	e004      	b.n	40b6f2 <strcmp+0x2aa>
  40b6e8:	f04f 0000 	mov.w	r0, #0
  40b6ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b6f0:	4770      	bx	lr
  40b6f2:	ba12      	rev	r2, r2
  40b6f4:	ba1b      	rev	r3, r3
  40b6f6:	fa82 f44c 	uadd8	r4, r2, ip
  40b6fa:	ea82 0403 	eor.w	r4, r2, r3
  40b6fe:	faa4 f58c 	sel	r5, r4, ip
  40b702:	fab5 f485 	clz	r4, r5
  40b706:	fa02 f204 	lsl.w	r2, r2, r4
  40b70a:	fa03 f304 	lsl.w	r3, r3, r4
  40b70e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  40b712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  40b716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  40b71a:	4770      	bx	lr

0040b71c <strlen>:
  40b71c:	f020 0103 	bic.w	r1, r0, #3
  40b720:	f010 0003 	ands.w	r0, r0, #3
  40b724:	f1c0 0000 	rsb	r0, r0, #0
  40b728:	f851 3b04 	ldr.w	r3, [r1], #4
  40b72c:	f100 0c04 	add.w	ip, r0, #4
  40b730:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40b734:	f06f 0200 	mvn.w	r2, #0
  40b738:	bf1c      	itt	ne
  40b73a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40b73e:	4313      	orrne	r3, r2
  40b740:	f04f 0c01 	mov.w	ip, #1
  40b744:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40b748:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40b74c:	eba3 020c 	sub.w	r2, r3, ip
  40b750:	ea22 0203 	bic.w	r2, r2, r3
  40b754:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40b758:	bf04      	itt	eq
  40b75a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40b75e:	3004      	addeq	r0, #4
  40b760:	d0f4      	beq.n	40b74c <strlen+0x30>
  40b762:	f1c2 0100 	rsb	r1, r2, #0
  40b766:	ea02 0201 	and.w	r2, r2, r1
  40b76a:	fab2 f282 	clz	r2, r2
  40b76e:	f1c2 021f 	rsb	r2, r2, #31
  40b772:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40b776:	4770      	bx	lr

0040b778 <sulp>:
  40b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b77c:	4690      	mov	r8, r2
  40b77e:	460f      	mov	r7, r1
  40b780:	f005 fe8e 	bl	4114a0 <__ulp>
  40b784:	4604      	mov	r4, r0
  40b786:	460d      	mov	r5, r1
  40b788:	f1b8 0f00 	cmp.w	r8, #0
  40b78c:	d011      	beq.n	40b7b2 <sulp+0x3a>
  40b78e:	f3c7 530a 	ubfx	r3, r7, #20, #11
  40b792:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40b796:	2b00      	cmp	r3, #0
  40b798:	dd0b      	ble.n	40b7b2 <sulp+0x3a>
  40b79a:	051b      	lsls	r3, r3, #20
  40b79c:	2400      	movs	r4, #0
  40b79e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  40b7a2:	4622      	mov	r2, r4
  40b7a4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40b7a8:	462b      	mov	r3, r5
  40b7aa:	f7fe fead 	bl	40a508 <__aeabi_dmul>
  40b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b7b2:	4620      	mov	r0, r4
  40b7b4:	4629      	mov	r1, r5
  40b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b7ba:	bf00      	nop
  40b7bc:	0000      	movs	r0, r0
	...

0040b7c0 <_strtod_r>:
  40b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7c4:	b0a1      	sub	sp, #132	; 0x84
  40b7c6:	460f      	mov	r7, r1
  40b7c8:	4683      	mov	fp, r0
  40b7ca:	460b      	mov	r3, r1
  40b7cc:	9203      	str	r2, [sp, #12]
  40b7ce:	2000      	movs	r0, #0
  40b7d0:	2200      	movs	r2, #0
  40b7d2:	2100      	movs	r1, #0
  40b7d4:	971b      	str	r7, [sp, #108]	; 0x6c
  40b7d6:	921c      	str	r2, [sp, #112]	; 0x70
  40b7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40b7dc:	461c      	mov	r4, r3
  40b7de:	f813 6b01 	ldrb.w	r6, [r3], #1
  40b7e2:	2e2d      	cmp	r6, #45	; 0x2d
  40b7e4:	f200 813c 	bhi.w	40ba60 <_strtod_r+0x2a0>
  40b7e8:	e8df f016 	tbh	[pc, r6, lsl #1]
  40b7ec:	013a0056 	.word	0x013a0056
  40b7f0:	013a013a 	.word	0x013a013a
  40b7f4:	013a013a 	.word	0x013a013a
  40b7f8:	013a013a 	.word	0x013a013a
  40b7fc:	009f013a 	.word	0x009f013a
  40b800:	009f009f 	.word	0x009f009f
  40b804:	009f009f 	.word	0x009f009f
  40b808:	013a013a 	.word	0x013a013a
  40b80c:	013a013a 	.word	0x013a013a
  40b810:	013a013a 	.word	0x013a013a
  40b814:	013a013a 	.word	0x013a013a
  40b818:	013a013a 	.word	0x013a013a
  40b81c:	013a013a 	.word	0x013a013a
  40b820:	013a013a 	.word	0x013a013a
  40b824:	013a013a 	.word	0x013a013a
  40b828:	013a013a 	.word	0x013a013a
  40b82c:	013a009f 	.word	0x013a009f
  40b830:	013a013a 	.word	0x013a013a
  40b834:	013a013a 	.word	0x013a013a
  40b838:	013a013a 	.word	0x013a013a
  40b83c:	013a013a 	.word	0x013a013a
  40b840:	006c013a 	.word	0x006c013a
  40b844:	009b013a 	.word	0x009b013a
  40b848:	4658      	mov	r0, fp
  40b84a:	9307      	str	r3, [sp, #28]
  40b84c:	f005 fa0a 	bl	410c64 <_localeconv_r>
  40b850:	f8d0 8000 	ldr.w	r8, [r0]
  40b854:	4658      	mov	r0, fp
  40b856:	f005 fa05 	bl	410c64 <_localeconv_r>
  40b85a:	6800      	ldr	r0, [r0, #0]
  40b85c:	f7ff ff5e 	bl	40b71c <strlen>
  40b860:	9b07      	ldr	r3, [sp, #28]
  40b862:	4602      	mov	r2, r0
  40b864:	4641      	mov	r1, r8
  40b866:	4618      	mov	r0, r3
  40b868:	f006 fa04 	bl	411c74 <strncmp>
  40b86c:	4680      	mov	r8, r0
  40b86e:	2800      	cmp	r0, #0
  40b870:	f000 815c 	beq.w	40bb2c <_strtod_r+0x36c>
  40b874:	2000      	movs	r0, #0
  40b876:	46a1      	mov	r9, r4
  40b878:	4684      	mov	ip, r0
  40b87a:	4686      	mov	lr, r0
  40b87c:	f026 0320 	bic.w	r3, r6, #32
  40b880:	2b45      	cmp	r3, #69	; 0x45
  40b882:	d154      	bne.n	40b92e <_strtod_r+0x16e>
  40b884:	f1b9 0f00 	cmp.w	r9, #0
  40b888:	bf08      	it	eq
  40b88a:	2800      	cmpeq	r0, #0
  40b88c:	f040 80ff 	bne.w	40ba8e <_strtod_r+0x2ce>
  40b890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b892:	2b00      	cmp	r3, #0
  40b894:	f040 80fb 	bne.w	40ba8e <_strtod_r+0x2ce>
  40b898:	9b03      	ldr	r3, [sp, #12]
  40b89a:	f04f 0800 	mov.w	r8, #0
  40b89e:	f04f 0900 	mov.w	r9, #0
  40b8a2:	b153      	cbz	r3, 40b8ba <_strtod_r+0xfa>
  40b8a4:	2300      	movs	r3, #0
  40b8a6:	9306      	str	r3, [sp, #24]
  40b8a8:	9b03      	ldr	r3, [sp, #12]
  40b8aa:	601f      	str	r7, [r3, #0]
  40b8ac:	9b06      	ldr	r3, [sp, #24]
  40b8ae:	b123      	cbz	r3, 40b8ba <_strtod_r+0xfa>
  40b8b0:	4641      	mov	r1, r8
  40b8b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  40b8b6:	4688      	mov	r8, r1
  40b8b8:	4699      	mov	r9, r3
  40b8ba:	4640      	mov	r0, r8
  40b8bc:	4649      	mov	r1, r9
  40b8be:	b021      	add	sp, #132	; 0x84
  40b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b8c4:	2200      	movs	r2, #0
  40b8c6:	4623      	mov	r3, r4
  40b8c8:	9206      	str	r2, [sp, #24]
  40b8ca:	3401      	adds	r4, #1
  40b8cc:	941b      	str	r4, [sp, #108]	; 0x6c
  40b8ce:	785e      	ldrb	r6, [r3, #1]
  40b8d0:	2e00      	cmp	r6, #0
  40b8d2:	d0e1      	beq.n	40b898 <_strtod_r+0xd8>
  40b8d4:	2e30      	cmp	r6, #48	; 0x30
  40b8d6:	f000 80c8 	beq.w	40ba6a <_strtod_r+0x2aa>
  40b8da:	2300      	movs	r3, #0
  40b8dc:	9408      	str	r4, [sp, #32]
  40b8de:	930a      	str	r3, [sp, #40]	; 0x28
  40b8e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40b8e4:	f04f 0a00 	mov.w	sl, #0
  40b8e8:	2b09      	cmp	r3, #9
  40b8ea:	4655      	mov	r5, sl
  40b8ec:	4623      	mov	r3, r4
  40b8ee:	4654      	mov	r4, sl
  40b8f0:	d90a      	bls.n	40b908 <_strtod_r+0x148>
  40b8f2:	e7a9      	b.n	40b848 <_strtod_r+0x88>
  40b8f4:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
  40b8f8:	3301      	adds	r3, #1
  40b8fa:	3401      	adds	r4, #1
  40b8fc:	931b      	str	r3, [sp, #108]	; 0x6c
  40b8fe:	781e      	ldrb	r6, [r3, #0]
  40b900:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40b904:	2a09      	cmp	r2, #9
  40b906:	d89f      	bhi.n	40b848 <_strtod_r+0x88>
  40b908:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
  40b90c:	2c08      	cmp	r4, #8
  40b90e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40b912:	eb06 0242 	add.w	r2, r6, r2, lsl #1
  40b916:	eb06 0641 	add.w	r6, r6, r1, lsl #1
  40b91a:	ddeb      	ble.n	40b8f4 <_strtod_r+0x134>
  40b91c:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
  40b920:	e7ea      	b.n	40b8f8 <_strtod_r+0x138>
  40b922:	2201      	movs	r2, #1
  40b924:	4623      	mov	r3, r4
  40b926:	9206      	str	r2, [sp, #24]
  40b928:	e7cf      	b.n	40b8ca <_strtod_r+0x10a>
  40b92a:	931b      	str	r3, [sp, #108]	; 0x6c
  40b92c:	e756      	b.n	40b7dc <_strtod_r+0x1c>
  40b92e:	2300      	movs	r3, #0
  40b930:	f1b9 0f00 	cmp.w	r9, #0
  40b934:	d036      	beq.n	40b9a4 <_strtod_r+0x1e4>
  40b936:	f1b9 0f10 	cmp.w	r9, #16
  40b93a:	46c8      	mov	r8, r9
  40b93c:	ebcc 0303 	rsb	r3, ip, r3
  40b940:	4628      	mov	r0, r5
  40b942:	bfa8      	it	ge
  40b944:	f04f 0810 	movge.w	r8, #16
  40b948:	2c00      	cmp	r4, #0
  40b94a:	bf08      	it	eq
  40b94c:	464c      	moveq	r4, r9
  40b94e:	9307      	str	r3, [sp, #28]
  40b950:	f7fe fd64 	bl	40a41c <__aeabi_ui2d>
  40b954:	f1b8 0f09 	cmp.w	r8, #9
  40b958:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40b95c:	dd13      	ble.n	40b986 <_strtod_r+0x1c6>
  40b95e:	4b87      	ldr	r3, [pc, #540]	; (40bb7c <_strtod_r+0x3bc>)
  40b960:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40b964:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  40b968:	f7fe fdce 	bl	40a508 <__aeabi_dmul>
  40b96c:	4606      	mov	r6, r0
  40b96e:	460f      	mov	r7, r1
  40b970:	4650      	mov	r0, sl
  40b972:	f7fe fd53 	bl	40a41c <__aeabi_ui2d>
  40b976:	4602      	mov	r2, r0
  40b978:	460b      	mov	r3, r1
  40b97a:	4630      	mov	r0, r6
  40b97c:	4639      	mov	r1, r7
  40b97e:	f7fe fc11 	bl	40a1a4 <__adddf3>
  40b982:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40b986:	f1b9 0f0f 	cmp.w	r9, #15
  40b98a:	f300 80f9 	bgt.w	40bb80 <_strtod_r+0x3c0>
  40b98e:	9b07      	ldr	r3, [sp, #28]
  40b990:	2b00      	cmp	r3, #0
  40b992:	f040 82c7 	bne.w	40bf24 <_strtod_r+0x764>
  40b996:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40b99a:	9b03      	ldr	r3, [sp, #12]
  40b99c:	2b00      	cmp	r3, #0
  40b99e:	d085      	beq.n	40b8ac <_strtod_r+0xec>
  40b9a0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40b9a2:	e781      	b.n	40b8a8 <_strtod_r+0xe8>
  40b9a4:	2800      	cmp	r0, #0
  40b9a6:	f040 80bc 	bne.w	40bb22 <_strtod_r+0x362>
  40b9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b9ac:	2b00      	cmp	r3, #0
  40b9ae:	f040 80b8 	bne.w	40bb22 <_strtod_r+0x362>
  40b9b2:	f1be 0f00 	cmp.w	lr, #0
  40b9b6:	f47f af6f 	bne.w	40b898 <_strtod_r+0xd8>
  40b9ba:	3e49      	subs	r6, #73	; 0x49
  40b9bc:	2e25      	cmp	r6, #37	; 0x25
  40b9be:	f63f af6b 	bhi.w	40b898 <_strtod_r+0xd8>
  40b9c2:	a301      	add	r3, pc, #4	; (adr r3, 40b9c8 <_strtod_r+0x208>)
  40b9c4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
  40b9c8:	0040c03b 	.word	0x0040c03b
  40b9cc:	0040b899 	.word	0x0040b899
  40b9d0:	0040b899 	.word	0x0040b899
  40b9d4:	0040b899 	.word	0x0040b899
  40b9d8:	0040b899 	.word	0x0040b899
  40b9dc:	0040c003 	.word	0x0040c003
  40b9e0:	0040b899 	.word	0x0040b899
  40b9e4:	0040b899 	.word	0x0040b899
  40b9e8:	0040b899 	.word	0x0040b899
  40b9ec:	0040b899 	.word	0x0040b899
  40b9f0:	0040b899 	.word	0x0040b899
  40b9f4:	0040b899 	.word	0x0040b899
  40b9f8:	0040b899 	.word	0x0040b899
  40b9fc:	0040b899 	.word	0x0040b899
  40ba00:	0040b899 	.word	0x0040b899
  40ba04:	0040b899 	.word	0x0040b899
  40ba08:	0040b899 	.word	0x0040b899
  40ba0c:	0040b899 	.word	0x0040b899
  40ba10:	0040b899 	.word	0x0040b899
  40ba14:	0040b899 	.word	0x0040b899
  40ba18:	0040b899 	.word	0x0040b899
  40ba1c:	0040b899 	.word	0x0040b899
  40ba20:	0040b899 	.word	0x0040b899
  40ba24:	0040b899 	.word	0x0040b899
  40ba28:	0040b899 	.word	0x0040b899
  40ba2c:	0040b899 	.word	0x0040b899
  40ba30:	0040b899 	.word	0x0040b899
  40ba34:	0040b899 	.word	0x0040b899
  40ba38:	0040b899 	.word	0x0040b899
  40ba3c:	0040b899 	.word	0x0040b899
  40ba40:	0040b899 	.word	0x0040b899
  40ba44:	0040b899 	.word	0x0040b899
  40ba48:	0040c03b 	.word	0x0040c03b
  40ba4c:	0040b899 	.word	0x0040b899
  40ba50:	0040b899 	.word	0x0040b899
  40ba54:	0040b899 	.word	0x0040b899
  40ba58:	0040b899 	.word	0x0040b899
  40ba5c:	0040c003 	.word	0x0040c003
  40ba60:	2300      	movs	r3, #0
  40ba62:	2e30      	cmp	r6, #48	; 0x30
  40ba64:	9306      	str	r3, [sp, #24]
  40ba66:	f47f af38 	bne.w	40b8da <_strtod_r+0x11a>
  40ba6a:	7863      	ldrb	r3, [r4, #1]
  40ba6c:	2b58      	cmp	r3, #88	; 0x58
  40ba6e:	f000 8318 	beq.w	40c0a2 <_strtod_r+0x8e2>
  40ba72:	2b78      	cmp	r3, #120	; 0x78
  40ba74:	f000 8315 	beq.w	40c0a2 <_strtod_r+0x8e2>
  40ba78:	3401      	adds	r4, #1
  40ba7a:	941b      	str	r4, [sp, #108]	; 0x6c
  40ba7c:	7826      	ldrb	r6, [r4, #0]
  40ba7e:	2e30      	cmp	r6, #48	; 0x30
  40ba80:	d0fa      	beq.n	40ba78 <_strtod_r+0x2b8>
  40ba82:	2e00      	cmp	r6, #0
  40ba84:	d04d      	beq.n	40bb22 <_strtod_r+0x362>
  40ba86:	2301      	movs	r3, #1
  40ba88:	9408      	str	r4, [sp, #32]
  40ba8a:	930a      	str	r3, [sp, #40]	; 0x28
  40ba8c:	e728      	b.n	40b8e0 <_strtod_r+0x120>
  40ba8e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  40ba90:	1c7b      	adds	r3, r7, #1
  40ba92:	931b      	str	r3, [sp, #108]	; 0x6c
  40ba94:	787e      	ldrb	r6, [r7, #1]
  40ba96:	2e2b      	cmp	r6, #43	; 0x2b
  40ba98:	f000 8300 	beq.w	40c09c <_strtod_r+0x8dc>
  40ba9c:	2e2d      	cmp	r6, #45	; 0x2d
  40ba9e:	f000 8238 	beq.w	40bf12 <_strtod_r+0x752>
  40baa2:	f04f 0800 	mov.w	r8, #0
  40baa6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40baaa:	2b09      	cmp	r3, #9
  40baac:	f200 82ef 	bhi.w	40c08e <_strtod_r+0x8ce>
  40bab0:	2e30      	cmp	r6, #48	; 0x30
  40bab2:	d105      	bne.n	40bac0 <_strtod_r+0x300>
  40bab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bab6:	3301      	adds	r3, #1
  40bab8:	931b      	str	r3, [sp, #108]	; 0x6c
  40baba:	781e      	ldrb	r6, [r3, #0]
  40babc:	2e30      	cmp	r6, #48	; 0x30
  40babe:	d0fa      	beq.n	40bab6 <_strtod_r+0x2f6>
  40bac0:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40bac4:	2b08      	cmp	r3, #8
  40bac6:	f63f af32 	bhi.w	40b92e <_strtod_r+0x16e>
  40baca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bacc:	4619      	mov	r1, r3
  40bace:	9307      	str	r3, [sp, #28]
  40bad0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40bad4:	460a      	mov	r2, r1
  40bad6:	3201      	adds	r2, #1
  40bad8:	921b      	str	r2, [sp, #108]	; 0x6c
  40bada:	784e      	ldrb	r6, [r1, #1]
  40badc:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40bae0:	2909      	cmp	r1, #9
  40bae2:	d80b      	bhi.n	40bafc <_strtod_r+0x33c>
  40bae4:	3201      	adds	r2, #1
  40bae6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40baea:	921b      	str	r2, [sp, #108]	; 0x6c
  40baec:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  40baf0:	7816      	ldrb	r6, [r2, #0]
  40baf2:	3b30      	subs	r3, #48	; 0x30
  40baf4:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
  40baf8:	2909      	cmp	r1, #9
  40bafa:	d9f3      	bls.n	40bae4 <_strtod_r+0x324>
  40bafc:	9907      	ldr	r1, [sp, #28]
  40bafe:	1a52      	subs	r2, r2, r1
  40bb00:	2a08      	cmp	r2, #8
  40bb02:	f300 8403 	bgt.w	40c30c <_strtod_r+0xb4c>
  40bb06:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40bb0a:	4293      	cmp	r3, r2
  40bb0c:	f300 83fe 	bgt.w	40c30c <_strtod_r+0xb4c>
  40bb10:	f1c8 0200 	rsb	r2, r8, #0
  40bb14:	4053      	eors	r3, r2
  40bb16:	4443      	add	r3, r8
  40bb18:	f1b9 0f00 	cmp.w	r9, #0
  40bb1c:	f47f af0b 	bne.w	40b936 <_strtod_r+0x176>
  40bb20:	e740      	b.n	40b9a4 <_strtod_r+0x1e4>
  40bb22:	f04f 0800 	mov.w	r8, #0
  40bb26:	f04f 0900 	mov.w	r9, #0
  40bb2a:	e736      	b.n	40b99a <_strtod_r+0x1da>
  40bb2c:	4658      	mov	r0, fp
  40bb2e:	f005 f899 	bl	410c64 <_localeconv_r>
  40bb32:	6800      	ldr	r0, [r0, #0]
  40bb34:	f7ff fdf2 	bl	40b71c <strlen>
  40bb38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bb3a:	181a      	adds	r2, r3, r0
  40bb3c:	921b      	str	r2, [sp, #108]	; 0x6c
  40bb3e:	5c1e      	ldrb	r6, [r3, r0]
  40bb40:	2c00      	cmp	r4, #0
  40bb42:	f040 81d4 	bne.w	40beee <_strtod_r+0x72e>
  40bb46:	2e30      	cmp	r6, #48	; 0x30
  40bb48:	4620      	mov	r0, r4
  40bb4a:	d105      	bne.n	40bb58 <_strtod_r+0x398>
  40bb4c:	3201      	adds	r2, #1
  40bb4e:	3001      	adds	r0, #1
  40bb50:	921b      	str	r2, [sp, #108]	; 0x6c
  40bb52:	7816      	ldrb	r6, [r2, #0]
  40bb54:	2e30      	cmp	r6, #48	; 0x30
  40bb56:	d0f9      	beq.n	40bb4c <_strtod_r+0x38c>
  40bb58:	f1a6 0331 	sub.w	r3, r6, #49	; 0x31
  40bb5c:	2b08      	cmp	r3, #8
  40bb5e:	f200 8247 	bhi.w	40bff0 <_strtod_r+0x830>
  40bb62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bb64:	3e30      	subs	r6, #48	; 0x30
  40bb66:	f100 0c01 	add.w	ip, r0, #1
  40bb6a:	f04f 0901 	mov.w	r9, #1
  40bb6e:	9308      	str	r3, [sp, #32]
  40bb70:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40bb74:	2000      	movs	r0, #0
  40bb76:	eb06 0545 	add.w	r5, r6, r5, lsl #1
  40bb7a:	e1c6      	b.n	40bf0a <_strtod_r+0x74a>
  40bb7c:	00413870 	.word	0x00413870
  40bb80:	ebc8 0809 	rsb	r8, r8, r9
  40bb84:	9b07      	ldr	r3, [sp, #28]
  40bb86:	4498      	add	r8, r3
  40bb88:	f1b8 0f00 	cmp.w	r8, #0
  40bb8c:	f340 835a 	ble.w	40c244 <_strtod_r+0xa84>
  40bb90:	f018 000f 	ands.w	r0, r8, #15
  40bb94:	d00a      	beq.n	40bbac <_strtod_r+0x3ec>
  40bb96:	49b8      	ldr	r1, [pc, #736]	; (40be78 <_strtod_r+0x6b8>)
  40bb98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40bb9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40bba0:	e9d1 0100 	ldrd	r0, r1, [r1]
  40bba4:	f7fe fcb0 	bl	40a508 <__aeabi_dmul>
  40bba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40bbac:	f038 060f 	bics.w	r6, r8, #15
  40bbb0:	f040 81cb 	bne.w	40bf4a <_strtod_r+0x78a>
  40bbb4:	2300      	movs	r3, #0
  40bbb6:	930a      	str	r3, [sp, #40]	; 0x28
  40bbb8:	9500      	str	r5, [sp, #0]
  40bbba:	4622      	mov	r2, r4
  40bbbc:	9908      	ldr	r1, [sp, #32]
  40bbbe:	464b      	mov	r3, r9
  40bbc0:	4658      	mov	r0, fp
  40bbc2:	f005 f9e3 	bl	410f8c <__s2b>
  40bbc6:	2800      	cmp	r0, #0
  40bbc8:	f000 82b5 	beq.w	40c136 <_strtod_r+0x976>
  40bbcc:	9a07      	ldr	r2, [sp, #28]
  40bbce:	2100      	movs	r1, #0
  40bbd0:	900f      	str	r0, [sp, #60]	; 0x3c
  40bbd2:	2a00      	cmp	r2, #0
  40bbd4:	f1c2 0300 	rsb	r3, r2, #0
  40bbd8:	460f      	mov	r7, r1
  40bbda:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  40bbde:	bfa8      	it	ge
  40bbe0:	460b      	movge	r3, r1
  40bbe2:	9107      	str	r1, [sp, #28]
  40bbe4:	920b      	str	r2, [sp, #44]	; 0x2c
  40bbe6:	930d      	str	r3, [sp, #52]	; 0x34
  40bbe8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40bbea:	4658      	mov	r0, fp
  40bbec:	6861      	ldr	r1, [r4, #4]
  40bbee:	f005 f959 	bl	410ea4 <_Balloc>
  40bbf2:	4682      	mov	sl, r0
  40bbf4:	2800      	cmp	r0, #0
  40bbf6:	f000 82c8 	beq.w	40c18a <_strtod_r+0x9ca>
  40bbfa:	6922      	ldr	r2, [r4, #16]
  40bbfc:	f104 010c 	add.w	r1, r4, #12
  40bc00:	300c      	adds	r0, #12
  40bc02:	3202      	adds	r2, #2
  40bc04:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40bc08:	0092      	lsls	r2, r2, #2
  40bc0a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40bc0e:	f7ff fae3 	bl	40b1d8 <memcpy>
  40bc12:	a81d      	add	r0, sp, #116	; 0x74
  40bc14:	a91e      	add	r1, sp, #120	; 0x78
  40bc16:	4622      	mov	r2, r4
  40bc18:	9000      	str	r0, [sp, #0]
  40bc1a:	462b      	mov	r3, r5
  40bc1c:	4658      	mov	r0, fp
  40bc1e:	9101      	str	r1, [sp, #4]
  40bc20:	f005 fcc6 	bl	4115b0 <__d2b>
  40bc24:	901c      	str	r0, [sp, #112]	; 0x70
  40bc26:	2800      	cmp	r0, #0
  40bc28:	f000 8425 	beq.w	40c476 <_strtod_r+0xcb6>
  40bc2c:	4658      	mov	r0, fp
  40bc2e:	2101      	movs	r1, #1
  40bc30:	f005 fa4a 	bl	4110c8 <__i2b>
  40bc34:	4607      	mov	r7, r0
  40bc36:	2800      	cmp	r0, #0
  40bc38:	f000 82a7 	beq.w	40c18a <_strtod_r+0x9ca>
  40bc3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40bc3e:	2b00      	cmp	r3, #0
  40bc40:	f2c0 8111 	blt.w	40be66 <_strtod_r+0x6a6>
  40bc44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40bc46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40bc48:	18d6      	adds	r6, r2, r3
  40bc4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bc4c:	991e      	ldr	r1, [sp, #120]	; 0x78
  40bc4e:	1a9b      	subs	r3, r3, r2
  40bc50:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
  40bc54:	f1c1 0936 	rsb	r9, r1, #54	; 0x36
  40bc58:	440b      	add	r3, r1
  40bc5a:	4293      	cmp	r3, r2
  40bc5c:	f280 80ec 	bge.w	40be38 <_strtod_r+0x678>
  40bc60:	1ad2      	subs	r2, r2, r3
  40bc62:	2a1f      	cmp	r2, #31
  40bc64:	ebc2 0909 	rsb	r9, r2, r9
  40bc68:	f300 8110 	bgt.w	40be8c <_strtod_r+0x6cc>
  40bc6c:	f04f 0801 	mov.w	r8, #1
  40bc70:	2300      	movs	r3, #0
  40bc72:	fa08 f802 	lsl.w	r8, r8, r2
  40bc76:	930c      	str	r3, [sp, #48]	; 0x30
  40bc78:	444d      	add	r5, r9
  40bc7a:	44b1      	add	r9, r6
  40bc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bc7e:	45b1      	cmp	r9, r6
  40bc80:	441d      	add	r5, r3
  40bc82:	464b      	mov	r3, r9
  40bc84:	bfa8      	it	ge
  40bc86:	4633      	movge	r3, r6
  40bc88:	42ab      	cmp	r3, r5
  40bc8a:	bfa8      	it	ge
  40bc8c:	462b      	movge	r3, r5
  40bc8e:	2b00      	cmp	r3, #0
  40bc90:	dd03      	ble.n	40bc9a <_strtod_r+0x4da>
  40bc92:	ebc3 0909 	rsb	r9, r3, r9
  40bc96:	1aed      	subs	r5, r5, r3
  40bc98:	1af6      	subs	r6, r6, r3
  40bc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bc9c:	b1b3      	cbz	r3, 40bccc <_strtod_r+0x50c>
  40bc9e:	4639      	mov	r1, r7
  40bca0:	4658      	mov	r0, fp
  40bca2:	461a      	mov	r2, r3
  40bca4:	f005 fabc 	bl	411220 <__pow5mult>
  40bca8:	4607      	mov	r7, r0
  40bcaa:	2800      	cmp	r0, #0
  40bcac:	f000 826d 	beq.w	40c18a <_strtod_r+0x9ca>
  40bcb0:	4658      	mov	r0, fp
  40bcb2:	4639      	mov	r1, r7
  40bcb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40bcb6:	f005 fa11 	bl	4110dc <__multiply>
  40bcba:	4604      	mov	r4, r0
  40bcbc:	2800      	cmp	r0, #0
  40bcbe:	f000 8264 	beq.w	40c18a <_strtod_r+0x9ca>
  40bcc2:	4658      	mov	r0, fp
  40bcc4:	991c      	ldr	r1, [sp, #112]	; 0x70
  40bcc6:	f005 f915 	bl	410ef4 <_Bfree>
  40bcca:	941c      	str	r4, [sp, #112]	; 0x70
  40bccc:	f1b9 0f00 	cmp.w	r9, #0
  40bcd0:	dd08      	ble.n	40bce4 <_strtod_r+0x524>
  40bcd2:	464a      	mov	r2, r9
  40bcd4:	4658      	mov	r0, fp
  40bcd6:	991c      	ldr	r1, [sp, #112]	; 0x70
  40bcd8:	f005 faf2 	bl	4112c0 <__lshift>
  40bcdc:	901c      	str	r0, [sp, #112]	; 0x70
  40bcde:	2800      	cmp	r0, #0
  40bce0:	f000 83c9 	beq.w	40c476 <_strtod_r+0xcb6>
  40bce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bce6:	b143      	cbz	r3, 40bcfa <_strtod_r+0x53a>
  40bce8:	4651      	mov	r1, sl
  40bcea:	4658      	mov	r0, fp
  40bcec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bcee:	f005 fa97 	bl	411220 <__pow5mult>
  40bcf2:	4682      	mov	sl, r0
  40bcf4:	2800      	cmp	r0, #0
  40bcf6:	f000 8248 	beq.w	40c18a <_strtod_r+0x9ca>
  40bcfa:	2d00      	cmp	r5, #0
  40bcfc:	dd08      	ble.n	40bd10 <_strtod_r+0x550>
  40bcfe:	4651      	mov	r1, sl
  40bd00:	462a      	mov	r2, r5
  40bd02:	4658      	mov	r0, fp
  40bd04:	f005 fadc 	bl	4112c0 <__lshift>
  40bd08:	4682      	mov	sl, r0
  40bd0a:	2800      	cmp	r0, #0
  40bd0c:	f000 823d 	beq.w	40c18a <_strtod_r+0x9ca>
  40bd10:	2e00      	cmp	r6, #0
  40bd12:	dd08      	ble.n	40bd26 <_strtod_r+0x566>
  40bd14:	4639      	mov	r1, r7
  40bd16:	4632      	mov	r2, r6
  40bd18:	4658      	mov	r0, fp
  40bd1a:	f005 fad1 	bl	4112c0 <__lshift>
  40bd1e:	4607      	mov	r7, r0
  40bd20:	2800      	cmp	r0, #0
  40bd22:	f000 8232 	beq.w	40c18a <_strtod_r+0x9ca>
  40bd26:	4658      	mov	r0, fp
  40bd28:	991c      	ldr	r1, [sp, #112]	; 0x70
  40bd2a:	4652      	mov	r2, sl
  40bd2c:	f005 fb46 	bl	4113bc <__mdiff>
  40bd30:	9007      	str	r0, [sp, #28]
  40bd32:	2800      	cmp	r0, #0
  40bd34:	f000 8229 	beq.w	40c18a <_strtod_r+0x9ca>
  40bd38:	9a07      	ldr	r2, [sp, #28]
  40bd3a:	2600      	movs	r6, #0
  40bd3c:	4639      	mov	r1, r7
  40bd3e:	68d3      	ldr	r3, [r2, #12]
  40bd40:	60d6      	str	r6, [r2, #12]
  40bd42:	930e      	str	r3, [sp, #56]	; 0x38
  40bd44:	f005 fb16 	bl	411374 <__mcmp>
  40bd48:	42b0      	cmp	r0, r6
  40bd4a:	f2c0 839d 	blt.w	40c488 <_strtod_r+0xcc8>
  40bd4e:	f000 83ef 	beq.w	40c530 <_strtod_r+0xd70>
  40bd52:	9807      	ldr	r0, [sp, #28]
  40bd54:	4639      	mov	r1, r7
  40bd56:	f005 fc83 	bl	411660 <__ratio>
  40bd5a:	2200      	movs	r2, #0
  40bd5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40bd60:	4604      	mov	r4, r0
  40bd62:	460d      	mov	r5, r1
  40bd64:	f7fe fe4c 	bl	40aa00 <__aeabi_dcmple>
  40bd68:	2800      	cmp	r0, #0
  40bd6a:	d06a      	beq.n	40be42 <_strtod_r+0x682>
  40bd6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bd6e:	2b00      	cmp	r3, #0
  40bd70:	f000 8099 	beq.w	40bea6 <_strtod_r+0x6e6>
  40bd74:	4635      	mov	r5, r6
  40bd76:	4b41      	ldr	r3, [pc, #260]	; (40be7c <_strtod_r+0x6bc>)
  40bd78:	f04f 0800 	mov.w	r8, #0
  40bd7c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 40be7c <_strtod_r+0x6bc>
  40bd80:	9e05      	ldr	r6, [sp, #20]
  40bd82:	930c      	str	r3, [sp, #48]	; 0x30
  40bd84:	4c3e      	ldr	r4, [pc, #248]	; (40be80 <_strtod_r+0x6c0>)
  40bd86:	4b3f      	ldr	r3, [pc, #252]	; (40be84 <_strtod_r+0x6c4>)
  40bd88:	4034      	ands	r4, r6
  40bd8a:	429c      	cmp	r4, r3
  40bd8c:	f000 81a4 	beq.w	40c0d8 <_strtod_r+0x918>
  40bd90:	f1b4 6fd4 	cmp.w	r4, #111149056	; 0x6a00000
  40bd94:	d824      	bhi.n	40bde0 <_strtod_r+0x620>
  40bd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bd98:	b313      	cbz	r3, 40bde0 <_strtod_r+0x620>
  40bd9a:	4628      	mov	r0, r5
  40bd9c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bd9e:	a334      	add	r3, pc, #208	; (adr r3, 40be70 <_strtod_r+0x6b0>)
  40bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bda4:	f7fe fe2c 	bl	40aa00 <__aeabi_dcmple>
  40bda8:	b1b0      	cbz	r0, 40bdd8 <_strtod_r+0x618>
  40bdaa:	4628      	mov	r0, r5
  40bdac:	990c      	ldr	r1, [sp, #48]	; 0x30
  40bdae:	f006 f9f9 	bl	4121a4 <__aeabi_d2uiz>
  40bdb2:	4605      	mov	r5, r0
  40bdb4:	2800      	cmp	r0, #0
  40bdb6:	f000 8121 	beq.w	40bffc <_strtod_r+0x83c>
  40bdba:	f7fe fb2f 	bl	40a41c <__aeabi_ui2d>
  40bdbe:	4605      	mov	r5, r0
  40bdc0:	910c      	str	r1, [sp, #48]	; 0x30
  40bdc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bdc4:	2b00      	cmp	r3, #0
  40bdc6:	f040 8238 	bne.w	40c23a <_strtod_r+0xa7a>
  40bdca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bdcc:	9512      	str	r5, [sp, #72]	; 0x48
  40bdce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40bdd2:	9313      	str	r3, [sp, #76]	; 0x4c
  40bdd4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
  40bdd8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
  40bddc:	ebc4 0903 	rsb	r9, r4, r3
  40bde0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40bde4:	f005 fb5c 	bl	4114a0 <__ulp>
  40bde8:	4602      	mov	r2, r0
  40bdea:	460b      	mov	r3, r1
  40bdec:	4640      	mov	r0, r8
  40bdee:	4649      	mov	r1, r9
  40bdf0:	f7fe fb8a 	bl	40a508 <__aeabi_dmul>
  40bdf4:	4602      	mov	r2, r0
  40bdf6:	460b      	mov	r3, r1
  40bdf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40bdfc:	f7fe f9d2 	bl	40a1a4 <__adddf3>
  40be00:	460e      	mov	r6, r1
  40be02:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40be06:	4b1e      	ldr	r3, [pc, #120]	; (40be80 <_strtod_r+0x6c0>)
  40be08:	4033      	ands	r3, r6
  40be0a:	429c      	cmp	r4, r3
  40be0c:	d103      	bne.n	40be16 <_strtod_r+0x656>
  40be0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40be10:	2b00      	cmp	r3, #0
  40be12:	f000 81db 	beq.w	40c1cc <_strtod_r+0xa0c>
  40be16:	4658      	mov	r0, fp
  40be18:	991c      	ldr	r1, [sp, #112]	; 0x70
  40be1a:	f005 f86b 	bl	410ef4 <_Bfree>
  40be1e:	4658      	mov	r0, fp
  40be20:	4651      	mov	r1, sl
  40be22:	f005 f867 	bl	410ef4 <_Bfree>
  40be26:	4658      	mov	r0, fp
  40be28:	4639      	mov	r1, r7
  40be2a:	f005 f863 	bl	410ef4 <_Bfree>
  40be2e:	4658      	mov	r0, fp
  40be30:	9907      	ldr	r1, [sp, #28]
  40be32:	f005 f85f 	bl	410ef4 <_Bfree>
  40be36:	e6d7      	b.n	40bbe8 <_strtod_r+0x428>
  40be38:	2300      	movs	r3, #0
  40be3a:	f04f 0801 	mov.w	r8, #1
  40be3e:	930c      	str	r3, [sp, #48]	; 0x30
  40be40:	e71a      	b.n	40bc78 <_strtod_r+0x4b8>
  40be42:	4629      	mov	r1, r5
  40be44:	4b10      	ldr	r3, [pc, #64]	; (40be88 <_strtod_r+0x6c8>)
  40be46:	4620      	mov	r0, r4
  40be48:	2200      	movs	r2, #0
  40be4a:	f7fe fb5d 	bl	40a508 <__aeabi_dmul>
  40be4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40be50:	4605      	mov	r5, r0
  40be52:	910c      	str	r1, [sp, #48]	; 0x30
  40be54:	bb13      	cbnz	r3, 40be9c <_strtod_r+0x6dc>
  40be56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40be5a:	9010      	str	r0, [sp, #64]	; 0x40
  40be5c:	9311      	str	r3, [sp, #68]	; 0x44
  40be5e:	9e05      	ldr	r6, [sp, #20]
  40be60:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
  40be64:	e78e      	b.n	40bd84 <_strtod_r+0x5c4>
  40be66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40be68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40be6a:	1ad5      	subs	r5, r2, r3
  40be6c:	e6ed      	b.n	40bc4a <_strtod_r+0x48a>
  40be6e:	bf00      	nop
  40be70:	ffc00000 	.word	0xffc00000
  40be74:	41dfffff 	.word	0x41dfffff
  40be78:	00413870 	.word	0x00413870
  40be7c:	3ff00000 	.word	0x3ff00000
  40be80:	7ff00000 	.word	0x7ff00000
  40be84:	7fe00000 	.word	0x7fe00000
  40be88:	3fe00000 	.word	0x3fe00000
  40be8c:	4aae      	ldr	r2, [pc, #696]	; (40c148 <_strtod_r+0x988>)
  40be8e:	2401      	movs	r4, #1
  40be90:	1ad2      	subs	r2, r2, r3
  40be92:	46a0      	mov	r8, r4
  40be94:	fa04 f302 	lsl.w	r3, r4, r2
  40be98:	930c      	str	r3, [sp, #48]	; 0x30
  40be9a:	e6ed      	b.n	40bc78 <_strtod_r+0x4b8>
  40be9c:	4602      	mov	r2, r0
  40be9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  40bea4:	e7db      	b.n	40be5e <_strtod_r+0x69e>
  40bea6:	9b04      	ldr	r3, [sp, #16]
  40bea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40beac:	2b00      	cmp	r3, #0
  40beae:	f040 8093 	bne.w	40bfd8 <_strtod_r+0x818>
  40beb2:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40beb6:	460e      	mov	r6, r1
  40beb8:	2b00      	cmp	r3, #0
  40beba:	f040 8091 	bne.w	40bfe0 <_strtod_r+0x820>
  40bebe:	4620      	mov	r0, r4
  40bec0:	4629      	mov	r1, r5
  40bec2:	2200      	movs	r2, #0
  40bec4:	4ba1      	ldr	r3, [pc, #644]	; (40c14c <_strtod_r+0x98c>)
  40bec6:	f7fe fd91 	bl	40a9ec <__aeabi_dcmplt>
  40beca:	2800      	cmp	r0, #0
  40becc:	f040 835b 	bne.w	40c586 <_strtod_r+0xdc6>
  40bed0:	4629      	mov	r1, r5
  40bed2:	4b9f      	ldr	r3, [pc, #636]	; (40c150 <_strtod_r+0x990>)
  40bed4:	4620      	mov	r0, r4
  40bed6:	2200      	movs	r2, #0
  40bed8:	f7fe fb16 	bl	40a508 <__aeabi_dmul>
  40bedc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40bee0:	4605      	mov	r5, r0
  40bee2:	910c      	str	r1, [sp, #48]	; 0x30
  40bee4:	9018      	str	r0, [sp, #96]	; 0x60
  40bee6:	9319      	str	r3, [sp, #100]	; 0x64
  40bee8:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
  40beec:	e74a      	b.n	40bd84 <_strtod_r+0x5c4>
  40beee:	4640      	mov	r0, r8
  40bef0:	46a1      	mov	r9, r4
  40bef2:	46c4      	mov	ip, r8
  40bef4:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
  40bef8:	2a09      	cmp	r2, #9
  40befa:	d810      	bhi.n	40bf1e <_strtod_r+0x75e>
  40befc:	1c43      	adds	r3, r0, #1
  40befe:	4616      	mov	r6, r2
  40bf00:	2a00      	cmp	r2, #0
  40bf02:	f040 8207 	bne.w	40c314 <_strtod_r+0xb54>
  40bf06:	4618      	mov	r0, r3
  40bf08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bf0a:	1c5a      	adds	r2, r3, #1
  40bf0c:	921b      	str	r2, [sp, #108]	; 0x6c
  40bf0e:	785e      	ldrb	r6, [r3, #1]
  40bf10:	e7f0      	b.n	40bef4 <_strtod_r+0x734>
  40bf12:	f04f 0801 	mov.w	r8, #1
  40bf16:	1cbb      	adds	r3, r7, #2
  40bf18:	931b      	str	r3, [sp, #108]	; 0x6c
  40bf1a:	78be      	ldrb	r6, [r7, #2]
  40bf1c:	e5c3      	b.n	40baa6 <_strtod_r+0x2e6>
  40bf1e:	f04f 0e01 	mov.w	lr, #1
  40bf22:	e4ab      	b.n	40b87c <_strtod_r+0xbc>
  40bf24:	9b07      	ldr	r3, [sp, #28]
  40bf26:	f340 8295 	ble.w	40c454 <_strtod_r+0xc94>
  40bf2a:	2b16      	cmp	r3, #22
  40bf2c:	f300 8212 	bgt.w	40c354 <_strtod_r+0xb94>
  40bf30:	9807      	ldr	r0, [sp, #28]
  40bf32:	4988      	ldr	r1, [pc, #544]	; (40c154 <_strtod_r+0x994>)
  40bf34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40bf38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40bf3c:	e9d1 0100 	ldrd	r0, r1, [r1]
  40bf40:	f7fe fae2 	bl	40a508 <__aeabi_dmul>
  40bf44:	4680      	mov	r8, r0
  40bf46:	4689      	mov	r9, r1
  40bf48:	e527      	b.n	40b99a <_strtod_r+0x1da>
  40bf4a:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
  40bf4e:	f300 80f2 	bgt.w	40c136 <_strtod_r+0x976>
  40bf52:	1136      	asrs	r6, r6, #4
  40bf54:	2e01      	cmp	r6, #1
  40bf56:	f340 8338 	ble.w	40c5ca <_strtod_r+0xe0a>
  40bf5a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 40c17c <_strtod_r+0x9bc>
  40bf5e:	f04f 0a00 	mov.w	sl, #0
  40bf62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40bf66:	4647      	mov	r7, r8
  40bf68:	f016 0f01 	tst.w	r6, #1
  40bf6c:	4610      	mov	r0, r2
  40bf6e:	4619      	mov	r1, r3
  40bf70:	ea4f 0666 	mov.w	r6, r6, asr #1
  40bf74:	f10a 0a01 	add.w	sl, sl, #1
  40bf78:	d005      	beq.n	40bf86 <_strtod_r+0x7c6>
  40bf7a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40bf7e:	f7fe fac3 	bl	40a508 <__aeabi_dmul>
  40bf82:	4602      	mov	r2, r0
  40bf84:	460b      	mov	r3, r1
  40bf86:	2e01      	cmp	r6, #1
  40bf88:	f107 0708 	add.w	r7, r7, #8
  40bf8c:	d1ec      	bne.n	40bf68 <_strtod_r+0x7a8>
  40bf8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40bf92:	9b05      	ldr	r3, [sp, #20]
  40bf94:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
  40bf98:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  40bf9c:	9305      	str	r3, [sp, #20]
  40bf9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40bfa2:	e9d8 0100 	ldrd	r0, r1, [r8]
  40bfa6:	f7fe faaf 	bl	40a508 <__aeabi_dmul>
  40bfaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40bfae:	4a6a      	ldr	r2, [pc, #424]	; (40c158 <_strtod_r+0x998>)
  40bfb0:	0d1b      	lsrs	r3, r3, #20
  40bfb2:	051b      	lsls	r3, r3, #20
  40bfb4:	4293      	cmp	r3, r2
  40bfb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40bfba:	f200 80bc 	bhi.w	40c136 <_strtod_r+0x976>
  40bfbe:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  40bfc2:	4293      	cmp	r3, r2
  40bfc4:	f240 82da 	bls.w	40c57c <_strtod_r+0xdbc>
  40bfc8:	4b64      	ldr	r3, [pc, #400]	; (40c15c <_strtod_r+0x99c>)
  40bfca:	9305      	str	r3, [sp, #20]
  40bfcc:	2300      	movs	r3, #0
  40bfce:	930a      	str	r3, [sp, #40]	; 0x28
  40bfd0:	f04f 33ff 	mov.w	r3, #4294967295
  40bfd4:	9304      	str	r3, [sp, #16]
  40bfd6:	e5ef      	b.n	40bbb8 <_strtod_r+0x3f8>
  40bfd8:	2801      	cmp	r0, #1
  40bfda:	f000 8214 	beq.w	40c406 <_strtod_r+0xc46>
  40bfde:	460e      	mov	r6, r1
  40bfe0:	4b5a      	ldr	r3, [pc, #360]	; (40c14c <_strtod_r+0x98c>)
  40bfe2:	f04f 0800 	mov.w	r8, #0
  40bfe6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 40c180 <_strtod_r+0x9c0>
  40bfea:	2500      	movs	r5, #0
  40bfec:	930c      	str	r3, [sp, #48]	; 0x30
  40bfee:	e6c9      	b.n	40bd84 <_strtod_r+0x5c4>
  40bff0:	f04f 0900 	mov.w	r9, #0
  40bff4:	f04f 0e01 	mov.w	lr, #1
  40bff8:	46cc      	mov	ip, r9
  40bffa:	e43f      	b.n	40b87c <_strtod_r+0xbc>
  40bffc:	4b53      	ldr	r3, [pc, #332]	; (40c14c <_strtod_r+0x98c>)
  40bffe:	930c      	str	r3, [sp, #48]	; 0x30
  40c000:	e6df      	b.n	40bdc2 <_strtod_r+0x602>
  40c002:	991b      	ldr	r1, [sp, #108]	; 0x6c
  40c004:	4856      	ldr	r0, [pc, #344]	; (40c160 <_strtod_r+0x9a0>)
  40c006:	e009      	b.n	40c01c <_strtod_r+0x85c>
  40c008:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40c00c:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c010:	2c19      	cmp	r4, #25
  40c012:	d800      	bhi.n	40c016 <_strtod_r+0x856>
  40c014:	3320      	adds	r3, #32
  40c016:	4293      	cmp	r3, r2
  40c018:	f47f ac3e 	bne.w	40b898 <_strtod_r+0xd8>
  40c01c:	f810 2b01 	ldrb.w	r2, [r0], #1
  40c020:	2a00      	cmp	r2, #0
  40c022:	d1f1      	bne.n	40c008 <_strtod_r+0x848>
  40c024:	1c4b      	adds	r3, r1, #1
  40c026:	931b      	str	r3, [sp, #108]	; 0x6c
  40c028:	784b      	ldrb	r3, [r1, #1]
  40c02a:	2b28      	cmp	r3, #40	; 0x28
  40c02c:	f000 82dd 	beq.w	40c5ea <_strtod_r+0xe2a>
  40c030:	4b4c      	ldr	r3, [pc, #304]	; (40c164 <_strtod_r+0x9a4>)
  40c032:	9305      	str	r3, [sp, #20]
  40c034:	2300      	movs	r3, #0
  40c036:	9304      	str	r3, [sp, #16]
  40c038:	e4ad      	b.n	40b996 <_strtod_r+0x1d6>
  40c03a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c03c:	484a      	ldr	r0, [pc, #296]	; (40c168 <_strtod_r+0x9a8>)
  40c03e:	e009      	b.n	40c054 <_strtod_r+0x894>
  40c040:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c044:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c048:	2c19      	cmp	r4, #25
  40c04a:	d800      	bhi.n	40c04e <_strtod_r+0x88e>
  40c04c:	3320      	adds	r3, #32
  40c04e:	428b      	cmp	r3, r1
  40c050:	f47f ac22 	bne.w	40b898 <_strtod_r+0xd8>
  40c054:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c058:	2900      	cmp	r1, #0
  40c05a:	d1f1      	bne.n	40c040 <_strtod_r+0x880>
  40c05c:	921b      	str	r2, [sp, #108]	; 0x6c
  40c05e:	4615      	mov	r5, r2
  40c060:	4842      	ldr	r0, [pc, #264]	; (40c16c <_strtod_r+0x9ac>)
  40c062:	e009      	b.n	40c078 <_strtod_r+0x8b8>
  40c064:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c068:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  40c06c:	2c19      	cmp	r4, #25
  40c06e:	d800      	bhi.n	40c072 <_strtod_r+0x8b2>
  40c070:	3320      	adds	r3, #32
  40c072:	428b      	cmp	r3, r1
  40c074:	f040 8296 	bne.w	40c5a4 <_strtod_r+0xde4>
  40c078:	f810 1b01 	ldrb.w	r1, [r0], #1
  40c07c:	2900      	cmp	r1, #0
  40c07e:	d1f1      	bne.n	40c064 <_strtod_r+0x8a4>
  40c080:	3201      	adds	r2, #1
  40c082:	921b      	str	r2, [sp, #108]	; 0x6c
  40c084:	4b3a      	ldr	r3, [pc, #232]	; (40c170 <_strtod_r+0x9b0>)
  40c086:	9305      	str	r3, [sp, #20]
  40c088:	2300      	movs	r3, #0
  40c08a:	9304      	str	r3, [sp, #16]
  40c08c:	e483      	b.n	40b996 <_strtod_r+0x1d6>
  40c08e:	971b      	str	r7, [sp, #108]	; 0x6c
  40c090:	2300      	movs	r3, #0
  40c092:	f1b9 0f00 	cmp.w	r9, #0
  40c096:	f47f ac4e 	bne.w	40b936 <_strtod_r+0x176>
  40c09a:	e483      	b.n	40b9a4 <_strtod_r+0x1e4>
  40c09c:	f04f 0800 	mov.w	r8, #0
  40c0a0:	e739      	b.n	40bf16 <_strtod_r+0x756>
  40c0a2:	9a06      	ldr	r2, [sp, #24]
  40c0a4:	ab1c      	add	r3, sp, #112	; 0x70
  40c0a6:	4658      	mov	r0, fp
  40c0a8:	a91b      	add	r1, sp, #108	; 0x6c
  40c0aa:	9201      	str	r2, [sp, #4]
  40c0ac:	9300      	str	r3, [sp, #0]
  40c0ae:	ab1d      	add	r3, sp, #116	; 0x74
  40c0b0:	4a30      	ldr	r2, [pc, #192]	; (40c174 <_strtod_r+0x9b4>)
  40c0b2:	f004 fa81 	bl	4105b8 <__gethex>
  40c0b6:	f010 0607 	ands.w	r6, r0, #7
  40c0ba:	4605      	mov	r5, r0
  40c0bc:	f43f ad31 	beq.w	40bb22 <_strtod_r+0x362>
  40c0c0:	2e06      	cmp	r6, #6
  40c0c2:	f040 8165 	bne.w	40c390 <_strtod_r+0xbd0>
  40c0c6:	3401      	adds	r4, #1
  40c0c8:	2300      	movs	r3, #0
  40c0ca:	f04f 0800 	mov.w	r8, #0
  40c0ce:	f04f 0900 	mov.w	r9, #0
  40c0d2:	9306      	str	r3, [sp, #24]
  40c0d4:	941b      	str	r4, [sp, #108]	; 0x6c
  40c0d6:	e460      	b.n	40b99a <_strtod_r+0x1da>
  40c0d8:	f1a6 7354 	sub.w	r3, r6, #55574528	; 0x3500000
  40c0dc:	9305      	str	r3, [sp, #20]
  40c0de:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  40c0e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40c0e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40c0ea:	4640      	mov	r0, r8
  40c0ec:	4649      	mov	r1, r9
  40c0ee:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  40c0f2:	f005 f9d5 	bl	4114a0 <__ulp>
  40c0f6:	4602      	mov	r2, r0
  40c0f8:	460b      	mov	r3, r1
  40c0fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40c0fe:	f7fe fa03 	bl	40a508 <__aeabi_dmul>
  40c102:	4602      	mov	r2, r0
  40c104:	460b      	mov	r3, r1
  40c106:	4640      	mov	r0, r8
  40c108:	4649      	mov	r1, r9
  40c10a:	f7fe f84b 	bl	40a1a4 <__adddf3>
  40c10e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40c112:	4a19      	ldr	r2, [pc, #100]	; (40c178 <_strtod_r+0x9b8>)
  40c114:	0d1b      	lsrs	r3, r3, #20
  40c116:	051b      	lsls	r3, r3, #20
  40c118:	4293      	cmp	r3, r2
  40c11a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40c11e:	f240 80f0 	bls.w	40c302 <_strtod_r+0xb42>
  40c122:	4b0e      	ldr	r3, [pc, #56]	; (40c15c <_strtod_r+0x99c>)
  40c124:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c126:	429a      	cmp	r2, r3
  40c128:	d02c      	beq.n	40c184 <_strtod_r+0x9c4>
  40c12a:	4b0c      	ldr	r3, [pc, #48]	; (40c15c <_strtod_r+0x99c>)
  40c12c:	9305      	str	r3, [sp, #20]
  40c12e:	f04f 33ff 	mov.w	r3, #4294967295
  40c132:	9304      	str	r3, [sp, #16]
  40c134:	e66f      	b.n	40be16 <_strtod_r+0x656>
  40c136:	4b0e      	ldr	r3, [pc, #56]	; (40c170 <_strtod_r+0x9b0>)
  40c138:	2200      	movs	r2, #0
  40c13a:	9305      	str	r3, [sp, #20]
  40c13c:	2322      	movs	r3, #34	; 0x22
  40c13e:	9204      	str	r2, [sp, #16]
  40c140:	f8cb 3000 	str.w	r3, [fp]
  40c144:	e427      	b.n	40b996 <_strtod_r+0x1d6>
  40c146:	bf00      	nop
  40c148:	fffffbe3 	.word	0xfffffbe3
  40c14c:	3ff00000 	.word	0x3ff00000
  40c150:	3fe00000 	.word	0x3fe00000
  40c154:	00413870 	.word	0x00413870
  40c158:	7ca00000 	.word	0x7ca00000
  40c15c:	7fefffff 	.word	0x7fefffff
  40c160:	004135b0 	.word	0x004135b0
  40c164:	fff80000 	.word	0xfff80000
  40c168:	004135a4 	.word	0x004135a4
  40c16c:	004135a8 	.word	0x004135a8
  40c170:	7ff00000 	.word	0x7ff00000
  40c174:	004135b4 	.word	0x004135b4
  40c178:	7c9fffff 	.word	0x7c9fffff
  40c17c:	00413948 	.word	0x00413948
  40c180:	bff00000 	.word	0xbff00000
  40c184:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40c186:	3301      	adds	r3, #1
  40c188:	d1cf      	bne.n	40c12a <_strtod_r+0x96a>
  40c18a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c18c:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c18e:	4bae      	ldr	r3, [pc, #696]	; (40c448 <_strtod_r+0xc88>)
  40c190:	2200      	movs	r2, #0
  40c192:	9305      	str	r3, [sp, #20]
  40c194:	2322      	movs	r3, #34	; 0x22
  40c196:	9204      	str	r2, [sp, #16]
  40c198:	f8cb 3000 	str.w	r3, [fp]
  40c19c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40c1a0:	4601      	mov	r1, r0
  40c1a2:	4658      	mov	r0, fp
  40c1a4:	f004 fea6 	bl	410ef4 <_Bfree>
  40c1a8:	4658      	mov	r0, fp
  40c1aa:	4651      	mov	r1, sl
  40c1ac:	f004 fea2 	bl	410ef4 <_Bfree>
  40c1b0:	4658      	mov	r0, fp
  40c1b2:	4639      	mov	r1, r7
  40c1b4:	f004 fe9e 	bl	410ef4 <_Bfree>
  40c1b8:	4658      	mov	r0, fp
  40c1ba:	4631      	mov	r1, r6
  40c1bc:	f004 fe9a 	bl	410ef4 <_Bfree>
  40c1c0:	4658      	mov	r0, fp
  40c1c2:	9907      	ldr	r1, [sp, #28]
  40c1c4:	f004 fe96 	bl	410ef4 <_Bfree>
  40c1c8:	f7ff bbe7 	b.w	40b99a <_strtod_r+0x1da>
  40c1cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40c1ce:	4628      	mov	r0, r5
  40c1d0:	4621      	mov	r1, r4
  40c1d2:	f7fe fc33 	bl	40aa3c <__aeabi_d2iz>
  40c1d6:	f7fe f931 	bl	40a43c <__aeabi_i2d>
  40c1da:	460b      	mov	r3, r1
  40c1dc:	4602      	mov	r2, r0
  40c1de:	4621      	mov	r1, r4
  40c1e0:	4628      	mov	r0, r5
  40c1e2:	f7fd ffdd 	bl	40a1a0 <__aeabi_dsub>
  40c1e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c1e8:	4604      	mov	r4, r0
  40c1ea:	460d      	mov	r5, r1
  40c1ec:	b98b      	cbnz	r3, 40c212 <_strtod_r+0xa52>
  40c1ee:	9b04      	ldr	r3, [sp, #16]
  40c1f0:	b97b      	cbnz	r3, 40c212 <_strtod_r+0xa52>
  40c1f2:	f3c6 0613 	ubfx	r6, r6, #0, #20
  40c1f6:	b966      	cbnz	r6, 40c212 <_strtod_r+0xa52>
  40c1f8:	a38d      	add	r3, pc, #564	; (adr r3, 40c430 <_strtod_r+0xc70>)
  40c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c1fe:	f7fe fbf5 	bl	40a9ec <__aeabi_dcmplt>
  40c202:	2800      	cmp	r0, #0
  40c204:	f43f ae07 	beq.w	40be16 <_strtod_r+0x656>
  40c208:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c20a:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c20c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40c210:	e7c6      	b.n	40c1a0 <_strtod_r+0x9e0>
  40c212:	4620      	mov	r0, r4
  40c214:	4629      	mov	r1, r5
  40c216:	a388      	add	r3, pc, #544	; (adr r3, 40c438 <_strtod_r+0xc78>)
  40c218:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c21c:	f7fe fbe6 	bl	40a9ec <__aeabi_dcmplt>
  40c220:	2800      	cmp	r0, #0
  40c222:	d1f1      	bne.n	40c208 <_strtod_r+0xa48>
  40c224:	4620      	mov	r0, r4
  40c226:	4629      	mov	r1, r5
  40c228:	a385      	add	r3, pc, #532	; (adr r3, 40c440 <_strtod_r+0xc80>)
  40c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c22e:	f7fe fbfb 	bl	40aa28 <__aeabi_dcmpgt>
  40c232:	2800      	cmp	r0, #0
  40c234:	f43f adef 	beq.w	40be16 <_strtod_r+0x656>
  40c238:	e7e6      	b.n	40c208 <_strtod_r+0xa48>
  40c23a:	462a      	mov	r2, r5
  40c23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c23e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40c242:	e5c7      	b.n	40bdd4 <_strtod_r+0x614>
  40c244:	f43f acb6 	beq.w	40bbb4 <_strtod_r+0x3f4>
  40c248:	f1c8 0600 	rsb	r6, r8, #0
  40c24c:	f016 020f 	ands.w	r2, r6, #15
  40c250:	d00a      	beq.n	40c268 <_strtod_r+0xaa8>
  40c252:	4b7e      	ldr	r3, [pc, #504]	; (40c44c <_strtod_r+0xc8c>)
  40c254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c260:	f7fe fa7c 	bl	40a75c <__aeabi_ddiv>
  40c264:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40c268:	1136      	asrs	r6, r6, #4
  40c26a:	f43f aca3 	beq.w	40bbb4 <_strtod_r+0x3f4>
  40c26e:	2e1f      	cmp	r6, #31
  40c270:	dc3e      	bgt.n	40c2f0 <_strtod_r+0xb30>
  40c272:	f016 0310 	ands.w	r3, r6, #16
  40c276:	f000 81b2 	beq.w	40c5de <_strtod_r+0xe1e>
  40c27a:	236a      	movs	r3, #106	; 0x6a
  40c27c:	2e00      	cmp	r6, #0
  40c27e:	bfd8      	it	le
  40c280:	930a      	strle	r3, [sp, #40]	; 0x28
  40c282:	dd18      	ble.n	40c2b6 <_strtod_r+0xaf6>
  40c284:	930a      	str	r3, [sp, #40]	; 0x28
  40c286:	4f72      	ldr	r7, [pc, #456]	; (40c450 <_strtod_r+0xc90>)
  40c288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40c28c:	f016 0f01 	tst.w	r6, #1
  40c290:	4610      	mov	r0, r2
  40c292:	4619      	mov	r1, r3
  40c294:	ea4f 0666 	mov.w	r6, r6, asr #1
  40c298:	d005      	beq.n	40c2a6 <_strtod_r+0xae6>
  40c29a:	e9d7 2300 	ldrd	r2, r3, [r7]
  40c29e:	f7fe f933 	bl	40a508 <__aeabi_dmul>
  40c2a2:	4602      	mov	r2, r0
  40c2a4:	460b      	mov	r3, r1
  40c2a6:	2e00      	cmp	r6, #0
  40c2a8:	f107 0708 	add.w	r7, r7, #8
  40c2ac:	dcee      	bgt.n	40c28c <_strtod_r+0xacc>
  40c2ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40c2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c2b4:	b19b      	cbz	r3, 40c2de <_strtod_r+0xb1e>
  40c2b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c2ba:	f3c1 530a 	ubfx	r3, r1, #20, #11
  40c2be:	460a      	mov	r2, r1
  40c2c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40c2c4:	2b00      	cmp	r3, #0
  40c2c6:	dd0a      	ble.n	40c2de <_strtod_r+0xb1e>
  40c2c8:	2b1f      	cmp	r3, #31
  40c2ca:	f340 81e1 	ble.w	40c690 <_strtod_r+0xed0>
  40c2ce:	2100      	movs	r1, #0
  40c2d0:	2b34      	cmp	r3, #52	; 0x34
  40c2d2:	9104      	str	r1, [sp, #16]
  40c2d4:	f340 81e4 	ble.w	40c6a0 <_strtod_r+0xee0>
  40c2d8:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
  40c2dc:	9305      	str	r3, [sp, #20]
  40c2de:	2200      	movs	r2, #0
  40c2e0:	2300      	movs	r3, #0
  40c2e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c2e6:	f7fe fb77 	bl	40a9d8 <__aeabi_dcmpeq>
  40c2ea:	2800      	cmp	r0, #0
  40c2ec:	f43f ac64 	beq.w	40bbb8 <_strtod_r+0x3f8>
  40c2f0:	2322      	movs	r3, #34	; 0x22
  40c2f2:	f04f 0800 	mov.w	r8, #0
  40c2f6:	f04f 0900 	mov.w	r9, #0
  40c2fa:	f8cb 3000 	str.w	r3, [fp]
  40c2fe:	f7ff bb4c 	b.w	40b99a <_strtod_r+0x1da>
  40c302:	9b05      	ldr	r3, [sp, #20]
  40c304:	f103 7654 	add.w	r6, r3, #55574528	; 0x3500000
  40c308:	9605      	str	r6, [sp, #20]
  40c30a:	e57c      	b.n	40be06 <_strtod_r+0x646>
  40c30c:	f644 631f 	movw	r3, #19999	; 0x4e1f
  40c310:	f7ff bbfe 	b.w	40bb10 <_strtod_r+0x350>
  40c314:	2b01      	cmp	r3, #1
  40c316:	449c      	add	ip, r3
  40c318:	d014      	beq.n	40c344 <_strtod_r+0xb84>
  40c31a:	4448      	add	r0, r9
  40c31c:	e002      	b.n	40c324 <_strtod_r+0xb64>
  40c31e:	004d      	lsls	r5, r1, #1
  40c320:	4581      	cmp	r9, r0
  40c322:	d010      	beq.n	40c346 <_strtod_r+0xb86>
  40c324:	f109 0901 	add.w	r9, r9, #1
  40c328:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  40c32c:	f109 33ff 	add.w	r3, r9, #4294967295
  40c330:	2b08      	cmp	r3, #8
  40c332:	ddf4      	ble.n	40c31e <_strtod_r+0xb5e>
  40c334:	f1b9 0f10 	cmp.w	r9, #16
  40c338:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
  40c33c:	dcf0      	bgt.n	40c320 <_strtod_r+0xb60>
  40c33e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
  40c342:	e7ed      	b.n	40c320 <_strtod_r+0xb60>
  40c344:	4648      	mov	r0, r9
  40c346:	2808      	cmp	r0, #8
  40c348:	f100 0901 	add.w	r9, r0, #1
  40c34c:	f300 8095 	bgt.w	40c47a <_strtod_r+0xcba>
  40c350:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c352:	e40d      	b.n	40bb70 <_strtod_r+0x3b0>
  40c354:	f1c9 0325 	rsb	r3, r9, #37	; 0x25
  40c358:	9a07      	ldr	r2, [sp, #28]
  40c35a:	429a      	cmp	r2, r3
  40c35c:	f73f ac10 	bgt.w	40bb80 <_strtod_r+0x3c0>
  40c360:	f1c9 090f 	rsb	r9, r9, #15
  40c364:	4c39      	ldr	r4, [pc, #228]	; (40c44c <_strtod_r+0xc8c>)
  40c366:	eb04 01c9 	add.w	r1, r4, r9, lsl #3
  40c36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40c36e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40c372:	f7fe f8c9 	bl	40a508 <__aeabi_dmul>
  40c376:	9b07      	ldr	r3, [sp, #28]
  40c378:	ebc9 0903 	rsb	r9, r9, r3
  40c37c:	eb04 04c9 	add.w	r4, r4, r9, lsl #3
  40c380:	e9d4 2300 	ldrd	r2, r3, [r4]
  40c384:	f7fe f8c0 	bl	40a508 <__aeabi_dmul>
  40c388:	4680      	mov	r8, r0
  40c38a:	4689      	mov	r9, r1
  40c38c:	f7ff bb05 	b.w	40b99a <_strtod_r+0x1da>
  40c390:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40c392:	b13a      	cbz	r2, 40c3a4 <_strtod_r+0xbe4>
  40c394:	a81e      	add	r0, sp, #120	; 0x78
  40c396:	2135      	movs	r1, #53	; 0x35
  40c398:	f005 f990 	bl	4116bc <__copybits>
  40c39c:	4658      	mov	r0, fp
  40c39e:	991c      	ldr	r1, [sp, #112]	; 0x70
  40c3a0:	f004 fda8 	bl	410ef4 <_Bfree>
  40c3a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40c3a6:	2e06      	cmp	r6, #6
  40c3a8:	d80b      	bhi.n	40c3c2 <_strtod_r+0xc02>
  40c3aa:	e8df f006 	tbb	[pc, r6]
  40c3ae:	211d      	.short	0x211d
  40c3b0:	21041318 	.word	0x21041318
  40c3b4:	1d          	.byte	0x1d
  40c3b5:	00          	.byte	0x00
  40c3b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40c3ba:	9305      	str	r3, [sp, #20]
  40c3bc:	f04f 33ff 	mov.w	r3, #4294967295
  40c3c0:	9304      	str	r3, [sp, #16]
  40c3c2:	072b      	lsls	r3, r5, #28
  40c3c4:	f57f aae7 	bpl.w	40b996 <_strtod_r+0x1d6>
  40c3c8:	9b05      	ldr	r3, [sp, #20]
  40c3ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c3ce:	9305      	str	r3, [sp, #20]
  40c3d0:	f7ff bae1 	b.w	40b996 <_strtod_r+0x1d6>
  40c3d4:	4b1c      	ldr	r3, [pc, #112]	; (40c448 <_strtod_r+0xc88>)
  40c3d6:	9305      	str	r3, [sp, #20]
  40c3d8:	2300      	movs	r3, #0
  40c3da:	9304      	str	r3, [sp, #16]
  40c3dc:	e7f1      	b.n	40c3c2 <_strtod_r+0xc02>
  40c3de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40c3e0:	9304      	str	r3, [sp, #16]
  40c3e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c3e4:	9305      	str	r3, [sp, #20]
  40c3e6:	e7ec      	b.n	40c3c2 <_strtod_r+0xc02>
  40c3e8:	2300      	movs	r3, #0
  40c3ea:	9305      	str	r3, [sp, #20]
  40c3ec:	9304      	str	r3, [sp, #16]
  40c3ee:	e7e8      	b.n	40c3c2 <_strtod_r+0xc02>
  40c3f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40c3f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40c3f6:	991e      	ldr	r1, [sp, #120]	; 0x78
  40c3f8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  40c3fc:	9104      	str	r1, [sp, #16]
  40c3fe:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  40c402:	9305      	str	r3, [sp, #20]
  40c404:	e7dd      	b.n	40c3c2 <_strtod_r+0xc02>
  40c406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40c40a:	461e      	mov	r6, r3
  40c40c:	2b00      	cmp	r3, #0
  40c40e:	f47f ade7 	bne.w	40bfe0 <_strtod_r+0x820>
  40c412:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c414:	9c07      	ldr	r4, [sp, #28]
  40c416:	2322      	movs	r3, #34	; 0x22
  40c418:	9407      	str	r4, [sp, #28]
  40c41a:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c41c:	f04f 0800 	mov.w	r8, #0
  40c420:	f04f 0900 	mov.w	r9, #0
  40c424:	f8cb 3000 	str.w	r3, [fp]
  40c428:	e6ba      	b.n	40c1a0 <_strtod_r+0x9e0>
  40c42a:	bf00      	nop
  40c42c:	f3af 8000 	nop.w
  40c430:	94a03595 	.word	0x94a03595
  40c434:	3fcfffff 	.word	0x3fcfffff
  40c438:	94a03595 	.word	0x94a03595
  40c43c:	3fdfffff 	.word	0x3fdfffff
  40c440:	35afe535 	.word	0x35afe535
  40c444:	3fe00000 	.word	0x3fe00000
  40c448:	7ff00000 	.word	0x7ff00000
  40c44c:	00413870 	.word	0x00413870
  40c450:	00413568 	.word	0x00413568
  40c454:	3316      	adds	r3, #22
  40c456:	f6ff ab93 	blt.w	40bb80 <_strtod_r+0x3c0>
  40c45a:	9a07      	ldr	r2, [sp, #28]
  40c45c:	4b94      	ldr	r3, [pc, #592]	; (40c6b0 <_strtod_r+0xef0>)
  40c45e:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
  40c462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c466:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c46a:	f7fe f977 	bl	40a75c <__aeabi_ddiv>
  40c46e:	4680      	mov	r8, r0
  40c470:	4689      	mov	r9, r1
  40c472:	f7ff ba92 	b.w	40b99a <_strtod_r+0x1da>
  40c476:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c478:	e689      	b.n	40c18e <_strtod_r+0x9ce>
  40c47a:	f1b9 0f10 	cmp.w	r9, #16
  40c47e:	f340 808a 	ble.w	40c596 <_strtod_r+0xdd6>
  40c482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c484:	2000      	movs	r0, #0
  40c486:	e540      	b.n	40bf0a <_strtod_r+0x74a>
  40c488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c48a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c48c:	9c07      	ldr	r4, [sp, #28]
  40c48e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40c492:	bb8b      	cbnz	r3, 40c4f8 <_strtod_r+0xd38>
  40c494:	9b04      	ldr	r3, [sp, #16]
  40c496:	bb7b      	cbnz	r3, 40c4f8 <_strtod_r+0xd38>
  40c498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c49c:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40c4a0:	460d      	mov	r5, r1
  40c4a2:	bb4b      	cbnz	r3, 40c4f8 <_strtod_r+0xd38>
  40c4a4:	9b05      	ldr	r3, [sp, #20]
  40c4a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40c4aa:	0d1b      	lsrs	r3, r3, #20
  40c4ac:	051b      	lsls	r3, r3, #20
  40c4ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40c4b2:	d921      	bls.n	40c4f8 <_strtod_r+0xd38>
  40c4b4:	6963      	ldr	r3, [r4, #20]
  40c4b6:	b913      	cbnz	r3, 40c4be <_strtod_r+0xcfe>
  40c4b8:	6923      	ldr	r3, [r4, #16]
  40c4ba:	2b01      	cmp	r3, #1
  40c4bc:	dd1c      	ble.n	40c4f8 <_strtod_r+0xd38>
  40c4be:	9907      	ldr	r1, [sp, #28]
  40c4c0:	2201      	movs	r2, #1
  40c4c2:	4658      	mov	r0, fp
  40c4c4:	f004 fefc 	bl	4112c0 <__lshift>
  40c4c8:	4639      	mov	r1, r7
  40c4ca:	4604      	mov	r4, r0
  40c4cc:	f004 ff52 	bl	411374 <__mcmp>
  40c4d0:	2800      	cmp	r0, #0
  40c4d2:	dd11      	ble.n	40c4f8 <_strtod_r+0xd38>
  40c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c4d6:	2b00      	cmp	r3, #0
  40c4d8:	f040 80cf 	bne.w	40c67a <_strtod_r+0xeba>
  40c4dc:	4b75      	ldr	r3, [pc, #468]	; (40c6b4 <_strtod_r+0xef4>)
  40c4de:	402b      	ands	r3, r5
  40c4e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  40c4e4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  40c4e8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
  40c4ec:	9305      	str	r3, [sp, #20]
  40c4ee:	f04f 33ff 	mov.w	r3, #4294967295
  40c4f2:	9304      	str	r3, [sp, #16]
  40c4f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40c4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c4fa:	b1b3      	cbz	r3, 40c52a <_strtod_r+0xd6a>
  40c4fc:	4b6e      	ldr	r3, [pc, #440]	; (40c6b8 <_strtod_r+0xef8>)
  40c4fe:	4640      	mov	r0, r8
  40c500:	4649      	mov	r1, r9
  40c502:	9317      	str	r3, [sp, #92]	; 0x5c
  40c504:	2300      	movs	r3, #0
  40c506:	9316      	str	r3, [sp, #88]	; 0x58
  40c508:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40c50c:	f7fd fffc 	bl	40a508 <__aeabi_dmul>
  40c510:	4602      	mov	r2, r0
  40c512:	460b      	mov	r3, r1
  40c514:	4680      	mov	r8, r0
  40c516:	4689      	mov	r9, r1
  40c518:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40c51c:	b929      	cbnz	r1, 40c52a <_strtod_r+0xd6a>
  40c51e:	9b04      	ldr	r3, [sp, #16]
  40c520:	9407      	str	r4, [sp, #28]
  40c522:	2b00      	cmp	r3, #0
  40c524:	d056      	beq.n	40c5d4 <_strtod_r+0xe14>
  40c526:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c528:	e63a      	b.n	40c1a0 <_strtod_r+0x9e0>
  40c52a:	9407      	str	r4, [sp, #28]
  40c52c:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c52e:	e637      	b.n	40c1a0 <_strtod_r+0x9e0>
  40c530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c532:	46c6      	mov	lr, r8
  40c534:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40c536:	9c07      	ldr	r4, [sp, #28]
  40c538:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40c53c:	2b00      	cmp	r3, #0
  40c53e:	d034      	beq.n	40c5aa <_strtod_r+0xdea>
  40c540:	9b05      	ldr	r3, [sp, #20]
  40c542:	9a05      	ldr	r2, [sp, #20]
  40c544:	f3c3 0113 	ubfx	r1, r3, #0, #20
  40c548:	4b5c      	ldr	r3, [pc, #368]	; (40c6bc <_strtod_r+0xefc>)
  40c54a:	4299      	cmp	r1, r3
  40c54c:	d05f      	beq.n	40c60e <_strtod_r+0xe4e>
  40c54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c550:	2b00      	cmp	r3, #0
  40c552:	d035      	beq.n	40c5c0 <_strtod_r+0xe00>
  40c554:	9a05      	ldr	r2, [sp, #20]
  40c556:	4213      	tst	r3, r2
  40c558:	d0ce      	beq.n	40c4f8 <_strtod_r+0xd38>
  40c55a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c562:	2b00      	cmp	r3, #0
  40c564:	d077      	beq.n	40c656 <_strtod_r+0xe96>
  40c566:	f7ff f907 	bl	40b778 <sulp>
  40c56a:	4602      	mov	r2, r0
  40c56c:	460b      	mov	r3, r1
  40c56e:	4640      	mov	r0, r8
  40c570:	4649      	mov	r1, r9
  40c572:	f7fd fe17 	bl	40a1a4 <__adddf3>
  40c576:	4680      	mov	r8, r0
  40c578:	4689      	mov	r9, r1
  40c57a:	e7bd      	b.n	40c4f8 <_strtod_r+0xd38>
  40c57c:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
  40c580:	9305      	str	r3, [sp, #20]
  40c582:	f7ff bb17 	b.w	40bbb4 <_strtod_r+0x3f4>
  40c586:	4b4e      	ldr	r3, [pc, #312]	; (40c6c0 <_strtod_r+0xf00>)
  40c588:	2200      	movs	r2, #0
  40c58a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40c58c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  40c590:	4b4c      	ldr	r3, [pc, #304]	; (40c6c4 <_strtod_r+0xf04>)
  40c592:	930c      	str	r3, [sp, #48]	; 0x30
  40c594:	e4a8      	b.n	40bee8 <_strtod_r+0x728>
  40c596:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
  40c59a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c59c:	2000      	movs	r0, #0
  40c59e:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
  40c5a2:	e4b2      	b.n	40bf0a <_strtod_r+0x74a>
  40c5a4:	1c6b      	adds	r3, r5, #1
  40c5a6:	931b      	str	r3, [sp, #108]	; 0x6c
  40c5a8:	e56c      	b.n	40c084 <_strtod_r+0x8c4>
  40c5aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c5ae:	f3c1 0313 	ubfx	r3, r1, #0, #20
  40c5b2:	460d      	mov	r5, r1
  40c5b4:	2b00      	cmp	r3, #0
  40c5b6:	d1ca      	bne.n	40c54e <_strtod_r+0xd8e>
  40c5b8:	9b04      	ldr	r3, [sp, #16]
  40c5ba:	2b00      	cmp	r3, #0
  40c5bc:	d1c7      	bne.n	40c54e <_strtod_r+0xd8e>
  40c5be:	e789      	b.n	40c4d4 <_strtod_r+0xd14>
  40c5c0:	9a04      	ldr	r2, [sp, #16]
  40c5c2:	ea1e 0f02 	tst.w	lr, r2
  40c5c6:	d097      	beq.n	40c4f8 <_strtod_r+0xd38>
  40c5c8:	e7c7      	b.n	40c55a <_strtod_r+0xd9a>
  40c5ca:	f04f 0a00 	mov.w	sl, #0
  40c5ce:	f8df 8100 	ldr.w	r8, [pc, #256]	; 40c6d0 <_strtod_r+0xf10>
  40c5d2:	e4de      	b.n	40bf92 <_strtod_r+0x7d2>
  40c5d4:	2322      	movs	r3, #34	; 0x22
  40c5d6:	981c      	ldr	r0, [sp, #112]	; 0x70
  40c5d8:	f8cb 3000 	str.w	r3, [fp]
  40c5dc:	e5e0      	b.n	40c1a0 <_strtod_r+0x9e0>
  40c5de:	2e00      	cmp	r6, #0
  40c5e0:	bfd8      	it	le
  40c5e2:	930a      	strle	r3, [sp, #40]	; 0x28
  40c5e4:	f73f ae4e 	bgt.w	40c284 <_strtod_r+0xac4>
  40c5e8:	e679      	b.n	40c2de <_strtod_r+0xb1e>
  40c5ea:	a81b      	add	r0, sp, #108	; 0x6c
  40c5ec:	4936      	ldr	r1, [pc, #216]	; (40c6c8 <_strtod_r+0xf08>)
  40c5ee:	aa1e      	add	r2, sp, #120	; 0x78
  40c5f0:	f004 fa6e 	bl	410ad0 <__hexnan>
  40c5f4:	2805      	cmp	r0, #5
  40c5f6:	f47f ad1b 	bne.w	40c030 <_strtod_r+0x870>
  40c5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c5fc:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  40c600:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
  40c604:	9305      	str	r3, [sp, #20]
  40c606:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40c608:	9304      	str	r3, [sp, #16]
  40c60a:	f7ff b9c4 	b.w	40b996 <_strtod_r+0x1d6>
  40c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c610:	9904      	ldr	r1, [sp, #16]
  40c612:	b1eb      	cbz	r3, 40c650 <_strtod_r+0xe90>
  40c614:	4b27      	ldr	r3, [pc, #156]	; (40c6b4 <_strtod_r+0xef4>)
  40c616:	4013      	ands	r3, r2
  40c618:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  40c61c:	d818      	bhi.n	40c650 <_strtod_r+0xe90>
  40c61e:	0d1b      	lsrs	r3, r3, #20
  40c620:	f04f 30ff 	mov.w	r0, #4294967295
  40c624:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40c628:	fa00 f303 	lsl.w	r3, r0, r3
  40c62c:	4299      	cmp	r1, r3
  40c62e:	d18e      	bne.n	40c54e <_strtod_r+0xd8e>
  40c630:	4b26      	ldr	r3, [pc, #152]	; (40c6cc <_strtod_r+0xf0c>)
  40c632:	429a      	cmp	r2, r3
  40c634:	d102      	bne.n	40c63c <_strtod_r+0xe7c>
  40c636:	3101      	adds	r1, #1
  40c638:	f43f ada8 	beq.w	40c18c <_strtod_r+0x9cc>
  40c63c:	4b1d      	ldr	r3, [pc, #116]	; (40c6b4 <_strtod_r+0xef4>)
  40c63e:	4013      	ands	r3, r2
  40c640:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  40c644:	9305      	str	r3, [sp, #20]
  40c646:	2300      	movs	r3, #0
  40c648:	9304      	str	r3, [sp, #16]
  40c64a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
  40c64e:	e753      	b.n	40c4f8 <_strtod_r+0xd38>
  40c650:	f04f 33ff 	mov.w	r3, #4294967295
  40c654:	e7ea      	b.n	40c62c <_strtod_r+0xe6c>
  40c656:	f7ff f88f 	bl	40b778 <sulp>
  40c65a:	4602      	mov	r2, r0
  40c65c:	460b      	mov	r3, r1
  40c65e:	4640      	mov	r0, r8
  40c660:	4649      	mov	r1, r9
  40c662:	f7fd fd9d 	bl	40a1a0 <__aeabi_dsub>
  40c666:	2200      	movs	r2, #0
  40c668:	2300      	movs	r3, #0
  40c66a:	4680      	mov	r8, r0
  40c66c:	4689      	mov	r9, r1
  40c66e:	f7fe f9b3 	bl	40a9d8 <__aeabi_dcmpeq>
  40c672:	2800      	cmp	r0, #0
  40c674:	f47f aecf 	bne.w	40c416 <_strtod_r+0xc56>
  40c678:	e73e      	b.n	40c4f8 <_strtod_r+0xd38>
  40c67a:	4b0e      	ldr	r3, [pc, #56]	; (40c6b4 <_strtod_r+0xef4>)
  40c67c:	402b      	ands	r3, r5
  40c67e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  40c682:	f73f af2d 	bgt.w	40c4e0 <_strtod_r+0xd20>
  40c686:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  40c68a:	f73f af37 	bgt.w	40c4fc <_strtod_r+0xd3c>
  40c68e:	e6c2      	b.n	40c416 <_strtod_r+0xc56>
  40c690:	f04f 32ff 	mov.w	r2, #4294967295
  40c694:	fa02 f303 	lsl.w	r3, r2, r3
  40c698:	9a04      	ldr	r2, [sp, #16]
  40c69a:	401a      	ands	r2, r3
  40c69c:	9204      	str	r2, [sp, #16]
  40c69e:	e61e      	b.n	40c2de <_strtod_r+0xb1e>
  40c6a0:	3b20      	subs	r3, #32
  40c6a2:	f04f 31ff 	mov.w	r1, #4294967295
  40c6a6:	fa01 f303 	lsl.w	r3, r1, r3
  40c6aa:	4013      	ands	r3, r2
  40c6ac:	9305      	str	r3, [sp, #20]
  40c6ae:	e616      	b.n	40c2de <_strtod_r+0xb1e>
  40c6b0:	00413870 	.word	0x00413870
  40c6b4:	7ff00000 	.word	0x7ff00000
  40c6b8:	39500000 	.word	0x39500000
  40c6bc:	000fffff 	.word	0x000fffff
  40c6c0:	bfe00000 	.word	0xbfe00000
  40c6c4:	3fe00000 	.word	0x3fe00000
  40c6c8:	00413590 	.word	0x00413590
  40c6cc:	7fefffff 	.word	0x7fefffff
  40c6d0:	00413948 	.word	0x00413948

0040c6d4 <strtof>:
  40c6d4:	b538      	push	{r3, r4, r5, lr}
  40c6d6:	4b0a      	ldr	r3, [pc, #40]	; (40c700 <strtof+0x2c>)
  40c6d8:	460a      	mov	r2, r1
  40c6da:	4601      	mov	r1, r0
  40c6dc:	6818      	ldr	r0, [r3, #0]
  40c6de:	f7ff f86f 	bl	40b7c0 <_strtod_r>
  40c6e2:	4604      	mov	r4, r0
  40c6e4:	460d      	mov	r5, r1
  40c6e6:	f7fd fca3 	bl	40a030 <__fpclassifyd>
  40c6ea:	b120      	cbz	r0, 40c6f6 <strtof+0x22>
  40c6ec:	4620      	mov	r0, r4
  40c6ee:	4629      	mov	r1, r5
  40c6f0:	f7fe f9cc 	bl	40aa8c <__aeabi_d2f>
  40c6f4:	bd38      	pop	{r3, r4, r5, pc}
  40c6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40c6fa:	f005 ba29 	b.w	411b50 <nanf>
  40c6fe:	bf00      	nop
  40c700:	204004d8 	.word	0x204004d8

0040c704 <strtok>:
  40c704:	4a02      	ldr	r2, [pc, #8]	; (40c710 <strtok+0xc>)
  40c706:	2301      	movs	r3, #1
  40c708:	6812      	ldr	r2, [r2, #0]
  40c70a:	325c      	adds	r2, #92	; 0x5c
  40c70c:	f000 b802 	b.w	40c714 <__strtok_r>
  40c710:	204004d8 	.word	0x204004d8

0040c714 <__strtok_r>:
  40c714:	b4f0      	push	{r4, r5, r6, r7}
  40c716:	b320      	cbz	r0, 40c762 <__strtok_r+0x4e>
  40c718:	4607      	mov	r7, r0
  40c71a:	460d      	mov	r5, r1
  40c71c:	f817 6b01 	ldrb.w	r6, [r7], #1
  40c720:	e001      	b.n	40c726 <__strtok_r+0x12>
  40c722:	42a6      	cmp	r6, r4
  40c724:	d016      	beq.n	40c754 <__strtok_r+0x40>
  40c726:	f815 4b01 	ldrb.w	r4, [r5], #1
  40c72a:	2c00      	cmp	r4, #0
  40c72c:	d1f9      	bne.n	40c722 <__strtok_r+0xe>
  40c72e:	b1ee      	cbz	r6, 40c76c <__strtok_r+0x58>
  40c730:	463e      	mov	r6, r7
  40c732:	460c      	mov	r4, r1
  40c734:	f816 5b01 	ldrb.w	r5, [r6], #1
  40c738:	e000      	b.n	40c73c <__strtok_r+0x28>
  40c73a:	b173      	cbz	r3, 40c75a <__strtok_r+0x46>
  40c73c:	f814 3b01 	ldrb.w	r3, [r4], #1
  40c740:	42ab      	cmp	r3, r5
  40c742:	d1fa      	bne.n	40c73a <__strtok_r+0x26>
  40c744:	b15d      	cbz	r5, 40c75e <__strtok_r+0x4a>
  40c746:	2300      	movs	r3, #0
  40c748:	703b      	strb	r3, [r7, #0]
  40c74a:	6016      	str	r6, [r2, #0]
  40c74c:	4606      	mov	r6, r0
  40c74e:	4630      	mov	r0, r6
  40c750:	bcf0      	pop	{r4, r5, r6, r7}
  40c752:	4770      	bx	lr
  40c754:	b163      	cbz	r3, 40c770 <__strtok_r+0x5c>
  40c756:	4638      	mov	r0, r7
  40c758:	e7de      	b.n	40c718 <__strtok_r+0x4>
  40c75a:	4637      	mov	r7, r6
  40c75c:	e7e8      	b.n	40c730 <__strtok_r+0x1c>
  40c75e:	462e      	mov	r6, r5
  40c760:	e7f3      	b.n	40c74a <__strtok_r+0x36>
  40c762:	6810      	ldr	r0, [r2, #0]
  40c764:	2800      	cmp	r0, #0
  40c766:	d1d7      	bne.n	40c718 <__strtok_r+0x4>
  40c768:	4606      	mov	r6, r0
  40c76a:	e7f0      	b.n	40c74e <__strtok_r+0x3a>
  40c76c:	6016      	str	r6, [r2, #0]
  40c76e:	e7ee      	b.n	40c74e <__strtok_r+0x3a>
  40c770:	6017      	str	r7, [r2, #0]
  40c772:	4606      	mov	r6, r0
  40c774:	7003      	strb	r3, [r0, #0]
  40c776:	e7ea      	b.n	40c74e <__strtok_r+0x3a>

0040c778 <_strtol_r>:
  40c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c77c:	4c44      	ldr	r4, [pc, #272]	; (40c890 <_strtol_r+0x118>)
  40c77e:	4683      	mov	fp, r0
  40c780:	460e      	mov	r6, r1
  40c782:	f8d4 e000 	ldr.w	lr, [r4]
  40c786:	e000      	b.n	40c78a <_strtol_r+0x12>
  40c788:	4626      	mov	r6, r4
  40c78a:	4634      	mov	r4, r6
  40c78c:	f814 5b01 	ldrb.w	r5, [r4], #1
  40c790:	eb0e 0005 	add.w	r0, lr, r5
  40c794:	7840      	ldrb	r0, [r0, #1]
  40c796:	f000 0008 	and.w	r0, r0, #8
  40c79a:	f000 09ff 	and.w	r9, r0, #255	; 0xff
  40c79e:	2800      	cmp	r0, #0
  40c7a0:	d1f2      	bne.n	40c788 <_strtol_r+0x10>
  40c7a2:	2d2d      	cmp	r5, #45	; 0x2d
  40c7a4:	d052      	beq.n	40c84c <_strtol_r+0xd4>
  40c7a6:	2d2b      	cmp	r5, #43	; 0x2b
  40c7a8:	d064      	beq.n	40c874 <_strtol_r+0xfc>
  40c7aa:	f033 0010 	bics.w	r0, r3, #16
  40c7ae:	d10b      	bne.n	40c7c8 <_strtol_r+0x50>
  40c7b0:	fab3 f083 	clz	r0, r3
  40c7b4:	2d30      	cmp	r5, #48	; 0x30
  40c7b6:	ea4f 1050 	mov.w	r0, r0, lsr #5
  40c7ba:	d05e      	beq.n	40c87a <_strtol_r+0x102>
  40c7bc:	b120      	cbz	r0, 40c7c8 <_strtol_r+0x50>
  40c7be:	230a      	movs	r3, #10
  40c7c0:	4618      	mov	r0, r3
  40c7c2:	e002      	b.n	40c7ca <_strtol_r+0x52>
  40c7c4:	b100      	cbz	r0, 40c7c8 <_strtol_r+0x50>
  40c7c6:	2308      	movs	r3, #8
  40c7c8:	4618      	mov	r0, r3
  40c7ca:	f1b9 0f00 	cmp.w	r9, #0
  40c7ce:	f04f 0700 	mov.w	r7, #0
  40c7d2:	bf14      	ite	ne
  40c7d4:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40c7d8:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  40c7dc:	46bc      	mov	ip, r7
  40c7de:	fbba f8f0 	udiv	r8, sl, r0
  40c7e2:	fb00 aa18 	mls	sl, r0, r8, sl
  40c7e6:	e00e      	b.n	40c806 <_strtol_r+0x8e>
  40c7e8:	3d30      	subs	r5, #48	; 0x30
  40c7ea:	42ab      	cmp	r3, r5
  40c7ec:	dd1b      	ble.n	40c826 <_strtol_r+0xae>
  40c7ee:	2f00      	cmp	r7, #0
  40c7f0:	db05      	blt.n	40c7fe <_strtol_r+0x86>
  40c7f2:	45c4      	cmp	ip, r8
  40c7f4:	d803      	bhi.n	40c7fe <_strtol_r+0x86>
  40c7f6:	4555      	cmp	r5, sl
  40c7f8:	dd22      	ble.n	40c840 <_strtol_r+0xc8>
  40c7fa:	45c4      	cmp	ip, r8
  40c7fc:	d120      	bne.n	40c840 <_strtol_r+0xc8>
  40c7fe:	f04f 37ff 	mov.w	r7, #4294967295
  40c802:	f814 5b01 	ldrb.w	r5, [r4], #1
  40c806:	eb0e 0605 	add.w	r6, lr, r5
  40c80a:	7876      	ldrb	r6, [r6, #1]
  40c80c:	f016 0f04 	tst.w	r6, #4
  40c810:	d1ea      	bne.n	40c7e8 <_strtol_r+0x70>
  40c812:	f016 0603 	ands.w	r6, r6, #3
  40c816:	d006      	beq.n	40c826 <_strtol_r+0xae>
  40c818:	2e01      	cmp	r6, #1
  40c81a:	bf0c      	ite	eq
  40c81c:	2637      	moveq	r6, #55	; 0x37
  40c81e:	2657      	movne	r6, #87	; 0x57
  40c820:	1bad      	subs	r5, r5, r6
  40c822:	42ab      	cmp	r3, r5
  40c824:	dce3      	bgt.n	40c7ee <_strtol_r+0x76>
  40c826:	1c7b      	adds	r3, r7, #1
  40c828:	d015      	beq.n	40c856 <_strtol_r+0xde>
  40c82a:	f1c9 0000 	rsb	r0, r9, #0
  40c82e:	ea8c 0000 	eor.w	r0, ip, r0
  40c832:	4448      	add	r0, r9
  40c834:	b142      	cbz	r2, 40c848 <_strtol_r+0xd0>
  40c836:	b107      	cbz	r7, 40c83a <_strtol_r+0xc2>
  40c838:	1e61      	subs	r1, r4, #1
  40c83a:	6011      	str	r1, [r2, #0]
  40c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c840:	fb00 5c0c 	mla	ip, r0, ip, r5
  40c844:	2701      	movs	r7, #1
  40c846:	e7dc      	b.n	40c802 <_strtol_r+0x8a>
  40c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c84c:	1cb4      	adds	r4, r6, #2
  40c84e:	7875      	ldrb	r5, [r6, #1]
  40c850:	f04f 0901 	mov.w	r9, #1
  40c854:	e7a9      	b.n	40c7aa <_strtol_r+0x32>
  40c856:	f1b9 0f00 	cmp.w	r9, #0
  40c85a:	f04f 0322 	mov.w	r3, #34	; 0x22
  40c85e:	bf14      	ite	ne
  40c860:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40c864:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c868:	f8cb 3000 	str.w	r3, [fp]
  40c86c:	2a00      	cmp	r2, #0
  40c86e:	d1e3      	bne.n	40c838 <_strtol_r+0xc0>
  40c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c874:	1cb4      	adds	r4, r6, #2
  40c876:	7875      	ldrb	r5, [r6, #1]
  40c878:	e797      	b.n	40c7aa <_strtol_r+0x32>
  40c87a:	7826      	ldrb	r6, [r4, #0]
  40c87c:	f006 06df 	and.w	r6, r6, #223	; 0xdf
  40c880:	2e58      	cmp	r6, #88	; 0x58
  40c882:	d19f      	bne.n	40c7c4 <_strtol_r+0x4c>
  40c884:	2310      	movs	r3, #16
  40c886:	7865      	ldrb	r5, [r4, #1]
  40c888:	3402      	adds	r4, #2
  40c88a:	4618      	mov	r0, r3
  40c88c:	e79d      	b.n	40c7ca <_strtol_r+0x52>
  40c88e:	bf00      	nop
  40c890:	204008ec 	.word	0x204008ec

0040c894 <strtol>:
  40c894:	b430      	push	{r4, r5}
  40c896:	460d      	mov	r5, r1
  40c898:	4c03      	ldr	r4, [pc, #12]	; (40c8a8 <strtol+0x14>)
  40c89a:	4613      	mov	r3, r2
  40c89c:	4601      	mov	r1, r0
  40c89e:	462a      	mov	r2, r5
  40c8a0:	6820      	ldr	r0, [r4, #0]
  40c8a2:	bc30      	pop	{r4, r5}
  40c8a4:	f7ff bf68 	b.w	40c778 <_strtol_r>
  40c8a8:	204004d8 	.word	0x204004d8

0040c8ac <_svfprintf_r>:
  40c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c8b0:	b0c1      	sub	sp, #260	; 0x104
  40c8b2:	4689      	mov	r9, r1
  40c8b4:	9208      	str	r2, [sp, #32]
  40c8b6:	930c      	str	r3, [sp, #48]	; 0x30
  40c8b8:	9009      	str	r0, [sp, #36]	; 0x24
  40c8ba:	f004 f9d3 	bl	410c64 <_localeconv_r>
  40c8be:	6803      	ldr	r3, [r0, #0]
  40c8c0:	4618      	mov	r0, r3
  40c8c2:	9316      	str	r3, [sp, #88]	; 0x58
  40c8c4:	f7fe ff2a 	bl	40b71c <strlen>
  40c8c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40c8cc:	9017      	str	r0, [sp, #92]	; 0x5c
  40c8ce:	061d      	lsls	r5, r3, #24
  40c8d0:	d504      	bpl.n	40c8dc <_svfprintf_r+0x30>
  40c8d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40c8d6:	2b00      	cmp	r3, #0
  40c8d8:	f001 8080 	beq.w	40d9dc <_svfprintf_r+0x1130>
  40c8dc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40c8e0:	2300      	movs	r3, #0
  40c8e2:	46c3      	mov	fp, r8
  40c8e4:	9313      	str	r3, [sp, #76]	; 0x4c
  40c8e6:	9314      	str	r3, [sp, #80]	; 0x50
  40c8e8:	9312      	str	r3, [sp, #72]	; 0x48
  40c8ea:	9315      	str	r3, [sp, #84]	; 0x54
  40c8ec:	9319      	str	r3, [sp, #100]	; 0x64
  40c8ee:	930a      	str	r3, [sp, #40]	; 0x28
  40c8f0:	9325      	str	r3, [sp, #148]	; 0x94
  40c8f2:	9324      	str	r3, [sp, #144]	; 0x90
  40c8f4:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  40c8f8:	9a08      	ldr	r2, [sp, #32]
  40c8fa:	7813      	ldrb	r3, [r2, #0]
  40c8fc:	2b25      	cmp	r3, #37	; 0x25
  40c8fe:	f000 80a6 	beq.w	40ca4e <_svfprintf_r+0x1a2>
  40c902:	b90b      	cbnz	r3, 40c908 <_svfprintf_r+0x5c>
  40c904:	e0a3      	b.n	40ca4e <_svfprintf_r+0x1a2>
  40c906:	b11b      	cbz	r3, 40c910 <_svfprintf_r+0x64>
  40c908:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40c90c:	2b25      	cmp	r3, #37	; 0x25
  40c90e:	d1fa      	bne.n	40c906 <_svfprintf_r+0x5a>
  40c910:	9908      	ldr	r1, [sp, #32]
  40c912:	4614      	mov	r4, r2
  40c914:	1a55      	subs	r5, r2, r1
  40c916:	d010      	beq.n	40c93a <_svfprintf_r+0x8e>
  40c918:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c91a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c91c:	3301      	adds	r3, #1
  40c91e:	f8cb 1000 	str.w	r1, [fp]
  40c922:	442a      	add	r2, r5
  40c924:	f8cb 5004 	str.w	r5, [fp, #4]
  40c928:	2b07      	cmp	r3, #7
  40c92a:	9324      	str	r3, [sp, #144]	; 0x90
  40c92c:	9225      	str	r2, [sp, #148]	; 0x94
  40c92e:	dc73      	bgt.n	40ca18 <_svfprintf_r+0x16c>
  40c930:	f10b 0b08 	add.w	fp, fp, #8
  40c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c936:	442b      	add	r3, r5
  40c938:	930a      	str	r3, [sp, #40]	; 0x28
  40c93a:	7823      	ldrb	r3, [r4, #0]
  40c93c:	2b00      	cmp	r3, #0
  40c93e:	d073      	beq.n	40ca28 <_svfprintf_r+0x17c>
  40c940:	2300      	movs	r3, #0
  40c942:	f04f 3cff 	mov.w	ip, #4294967295
  40c946:	1c61      	adds	r1, r4, #1
  40c948:	7866      	ldrb	r6, [r4, #1]
  40c94a:	461a      	mov	r2, r3
  40c94c:	4664      	mov	r4, ip
  40c94e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40c952:	930b      	str	r3, [sp, #44]	; 0x2c
  40c954:	9306      	str	r3, [sp, #24]
  40c956:	1c4b      	adds	r3, r1, #1
  40c958:	f1a6 0120 	sub.w	r1, r6, #32
  40c95c:	2958      	cmp	r1, #88	; 0x58
  40c95e:	f200 83b2 	bhi.w	40d0c6 <_svfprintf_r+0x81a>
  40c962:	e8df f011 	tbh	[pc, r1, lsl #1]
  40c966:	0319      	.short	0x0319
  40c968:	03b003b0 	.word	0x03b003b0
  40c96c:	03b00320 	.word	0x03b00320
  40c970:	03b003b0 	.word	0x03b003b0
  40c974:	03b003b0 	.word	0x03b003b0
  40c978:	024003b0 	.word	0x024003b0
  40c97c:	03b001fb 	.word	0x03b001fb
  40c980:	01ff01e2 	.word	0x01ff01e2
  40c984:	032703b0 	.word	0x032703b0
  40c988:	032e032e 	.word	0x032e032e
  40c98c:	032e032e 	.word	0x032e032e
  40c990:	032e032e 	.word	0x032e032e
  40c994:	032e032e 	.word	0x032e032e
  40c998:	03b0032e 	.word	0x03b0032e
  40c99c:	03b003b0 	.word	0x03b003b0
  40c9a0:	03b003b0 	.word	0x03b003b0
  40c9a4:	03b003b0 	.word	0x03b003b0
  40c9a8:	03b003b0 	.word	0x03b003b0
  40c9ac:	033d03b0 	.word	0x033d03b0
  40c9b0:	03b00365 	.word	0x03b00365
  40c9b4:	03b00365 	.word	0x03b00365
  40c9b8:	03b003b0 	.word	0x03b003b0
  40c9bc:	02fe03b0 	.word	0x02fe03b0
  40c9c0:	03b003b0 	.word	0x03b003b0
  40c9c4:	03b00293 	.word	0x03b00293
  40c9c8:	03b003b0 	.word	0x03b003b0
  40c9cc:	03b003b0 	.word	0x03b003b0
  40c9d0:	03b002b0 	.word	0x03b002b0
  40c9d4:	02c603b0 	.word	0x02c603b0
  40c9d8:	03b003b0 	.word	0x03b003b0
  40c9dc:	03b003b0 	.word	0x03b003b0
  40c9e0:	03b003b0 	.word	0x03b003b0
  40c9e4:	03b003b0 	.word	0x03b003b0
  40c9e8:	03b003b0 	.word	0x03b003b0
  40c9ec:	021802eb 	.word	0x021802eb
  40c9f0:	03650365 	.word	0x03650365
  40c9f4:	024e0365 	.word	0x024e0365
  40c9f8:	03b00218 	.word	0x03b00218
  40c9fc:	023603b0 	.word	0x023603b0
  40ca00:	026003b0 	.word	0x026003b0
  40ca04:	039901e9 	.word	0x039901e9
  40ca08:	03b00259 	.word	0x03b00259
  40ca0c:	03b00272 	.word	0x03b00272
  40ca10:	03b00076 	.word	0x03b00076
  40ca14:	030503b0 	.word	0x030503b0
  40ca18:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ca1a:	4649      	mov	r1, r9
  40ca1c:	aa23      	add	r2, sp, #140	; 0x8c
  40ca1e:	f005 f975 	bl	411d0c <__ssprint_r>
  40ca22:	b940      	cbnz	r0, 40ca36 <_svfprintf_r+0x18a>
  40ca24:	46c3      	mov	fp, r8
  40ca26:	e785      	b.n	40c934 <_svfprintf_r+0x88>
  40ca28:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40ca2a:	b123      	cbz	r3, 40ca36 <_svfprintf_r+0x18a>
  40ca2c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ca2e:	4649      	mov	r1, r9
  40ca30:	aa23      	add	r2, sp, #140	; 0x8c
  40ca32:	f005 f96b 	bl	411d0c <__ssprint_r>
  40ca36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  40ca3a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ca40:	bf18      	it	ne
  40ca42:	f04f 33ff 	movne.w	r3, #4294967295
  40ca46:	4618      	mov	r0, r3
  40ca48:	b041      	add	sp, #260	; 0x104
  40ca4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ca4e:	9c08      	ldr	r4, [sp, #32]
  40ca50:	e773      	b.n	40c93a <_svfprintf_r+0x8e>
  40ca52:	9308      	str	r3, [sp, #32]
  40ca54:	46a4      	mov	ip, r4
  40ca56:	9b06      	ldr	r3, [sp, #24]
  40ca58:	0698      	lsls	r0, r3, #26
  40ca5a:	f140 823e 	bpl.w	40ceda <_svfprintf_r+0x62e>
  40ca5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ca60:	2301      	movs	r3, #1
  40ca62:	3707      	adds	r7, #7
  40ca64:	f027 0207 	bic.w	r2, r7, #7
  40ca68:	f102 0108 	add.w	r1, r2, #8
  40ca6c:	e9d2 4500 	ldrd	r4, r5, [r2]
  40ca70:	910c      	str	r1, [sp, #48]	; 0x30
  40ca72:	2200      	movs	r2, #0
  40ca74:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40ca78:	4617      	mov	r7, r2
  40ca7a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40ca7e:	f1bc 0f00 	cmp.w	ip, #0
  40ca82:	db03      	blt.n	40ca8c <_svfprintf_r+0x1e0>
  40ca84:	9a06      	ldr	r2, [sp, #24]
  40ca86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40ca8a:	9206      	str	r2, [sp, #24]
  40ca8c:	f1bc 0f00 	cmp.w	ip, #0
  40ca90:	f040 83ac 	bne.w	40d1ec <_svfprintf_r+0x940>
  40ca94:	ea54 0205 	orrs.w	r2, r4, r5
  40ca98:	bf14      	ite	ne
  40ca9a:	2201      	movne	r2, #1
  40ca9c:	2200      	moveq	r2, #0
  40ca9e:	2a00      	cmp	r2, #0
  40caa0:	f040 83a4 	bne.w	40d1ec <_svfprintf_r+0x940>
  40caa4:	2b00      	cmp	r3, #0
  40caa6:	f040 8460 	bne.w	40d36a <_svfprintf_r+0xabe>
  40caaa:	9a06      	ldr	r2, [sp, #24]
  40caac:	07d2      	lsls	r2, r2, #31
  40caae:	f140 84fd 	bpl.w	40d4ac <_svfprintf_r+0xc00>
  40cab2:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40cab6:	2330      	movs	r3, #48	; 0x30
  40cab8:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  40cabc:	ebca 0408 	rsb	r4, sl, r8
  40cac0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40cac4:	45a4      	cmp	ip, r4
  40cac6:	4663      	mov	r3, ip
  40cac8:	bfb8      	it	lt
  40caca:	4623      	movlt	r3, r4
  40cacc:	9307      	str	r3, [sp, #28]
  40cace:	2300      	movs	r3, #0
  40cad0:	9311      	str	r3, [sp, #68]	; 0x44
  40cad2:	b117      	cbz	r7, 40cada <_svfprintf_r+0x22e>
  40cad4:	9b07      	ldr	r3, [sp, #28]
  40cad6:	3301      	adds	r3, #1
  40cad8:	9307      	str	r3, [sp, #28]
  40cada:	9b06      	ldr	r3, [sp, #24]
  40cadc:	f013 0302 	ands.w	r3, r3, #2
  40cae0:	930d      	str	r3, [sp, #52]	; 0x34
  40cae2:	d002      	beq.n	40caea <_svfprintf_r+0x23e>
  40cae4:	9b07      	ldr	r3, [sp, #28]
  40cae6:	3302      	adds	r3, #2
  40cae8:	9307      	str	r3, [sp, #28]
  40caea:	9b06      	ldr	r3, [sp, #24]
  40caec:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40caf0:	930e      	str	r3, [sp, #56]	; 0x38
  40caf2:	f040 8307 	bne.w	40d104 <_svfprintf_r+0x858>
  40caf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40caf8:	9a07      	ldr	r2, [sp, #28]
  40cafa:	ebc2 0a03 	rsb	sl, r2, r3
  40cafe:	f1ba 0f00 	cmp.w	sl, #0
  40cb02:	f340 82ff 	ble.w	40d104 <_svfprintf_r+0x858>
  40cb06:	f1ba 0f10 	cmp.w	sl, #16
  40cb0a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40cb0c:	f340 87dd 	ble.w	40daca <_svfprintf_r+0x121e>
  40cb10:	4fbf      	ldr	r7, [pc, #764]	; (40ce10 <_svfprintf_r+0x564>)
  40cb12:	2510      	movs	r5, #16
  40cb14:	9618      	str	r6, [sp, #96]	; 0x60
  40cb16:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cb18:	463e      	mov	r6, r7
  40cb1a:	4627      	mov	r7, r4
  40cb1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cb1e:	e004      	b.n	40cb2a <_svfprintf_r+0x27e>
  40cb20:	f1aa 0a10 	sub.w	sl, sl, #16
  40cb24:	f1ba 0f10 	cmp.w	sl, #16
  40cb28:	dd1b      	ble.n	40cb62 <_svfprintf_r+0x2b6>
  40cb2a:	3201      	adds	r2, #1
  40cb2c:	3110      	adds	r1, #16
  40cb2e:	f8cb 6000 	str.w	r6, [fp]
  40cb32:	f10b 0b08 	add.w	fp, fp, #8
  40cb36:	2a07      	cmp	r2, #7
  40cb38:	f84b 5c04 	str.w	r5, [fp, #-4]
  40cb3c:	9125      	str	r1, [sp, #148]	; 0x94
  40cb3e:	9224      	str	r2, [sp, #144]	; 0x90
  40cb40:	ddee      	ble.n	40cb20 <_svfprintf_r+0x274>
  40cb42:	4620      	mov	r0, r4
  40cb44:	4649      	mov	r1, r9
  40cb46:	aa23      	add	r2, sp, #140	; 0x8c
  40cb48:	46c3      	mov	fp, r8
  40cb4a:	f005 f8df 	bl	411d0c <__ssprint_r>
  40cb4e:	2800      	cmp	r0, #0
  40cb50:	f47f af71 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40cb54:	f1aa 0a10 	sub.w	sl, sl, #16
  40cb58:	9925      	ldr	r1, [sp, #148]	; 0x94
  40cb5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40cb5c:	f1ba 0f10 	cmp.w	sl, #16
  40cb60:	dce3      	bgt.n	40cb2a <_svfprintf_r+0x27e>
  40cb62:	463c      	mov	r4, r7
  40cb64:	4637      	mov	r7, r6
  40cb66:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40cb68:	3201      	adds	r2, #1
  40cb6a:	eb0a 0c01 	add.w	ip, sl, r1
  40cb6e:	f8cb 7000 	str.w	r7, [fp]
  40cb72:	2a07      	cmp	r2, #7
  40cb74:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40cb78:	9224      	str	r2, [sp, #144]	; 0x90
  40cb7a:	f8cb a004 	str.w	sl, [fp, #4]
  40cb7e:	f300 82b6 	bgt.w	40d0ee <_svfprintf_r+0x842>
  40cb82:	f10b 0b08 	add.w	fp, fp, #8
  40cb86:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40cb8a:	b197      	cbz	r7, 40cbb2 <_svfprintf_r+0x306>
  40cb8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cb8e:	2201      	movs	r2, #1
  40cb90:	f10c 0c01 	add.w	ip, ip, #1
  40cb94:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40cb98:	4413      	add	r3, r2
  40cb9a:	f8cb 2004 	str.w	r2, [fp, #4]
  40cb9e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40cba2:	2b07      	cmp	r3, #7
  40cba4:	f8cb 1000 	str.w	r1, [fp]
  40cba8:	9324      	str	r3, [sp, #144]	; 0x90
  40cbaa:	f300 83fb 	bgt.w	40d3a4 <_svfprintf_r+0xaf8>
  40cbae:	f10b 0b08 	add.w	fp, fp, #8
  40cbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cbb4:	b18b      	cbz	r3, 40cbda <_svfprintf_r+0x32e>
  40cbb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cbb8:	f10c 0c02 	add.w	ip, ip, #2
  40cbbc:	a91c      	add	r1, sp, #112	; 0x70
  40cbbe:	2202      	movs	r2, #2
  40cbc0:	3301      	adds	r3, #1
  40cbc2:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40cbc6:	f8cb 1000 	str.w	r1, [fp]
  40cbca:	2b07      	cmp	r3, #7
  40cbcc:	9324      	str	r3, [sp, #144]	; 0x90
  40cbce:	f8cb 2004 	str.w	r2, [fp, #4]
  40cbd2:	f300 83db 	bgt.w	40d38c <_svfprintf_r+0xae0>
  40cbd6:	f10b 0b08 	add.w	fp, fp, #8
  40cbda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cbdc:	2b80      	cmp	r3, #128	; 0x80
  40cbde:	f000 8321 	beq.w	40d224 <_svfprintf_r+0x978>
  40cbe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40cbe4:	1b1f      	subs	r7, r3, r4
  40cbe6:	2f00      	cmp	r7, #0
  40cbe8:	dd37      	ble.n	40cc5a <_svfprintf_r+0x3ae>
  40cbea:	2f10      	cmp	r7, #16
  40cbec:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cbee:	f340 85ec 	ble.w	40d7ca <_svfprintf_r+0xf1e>
  40cbf2:	940d      	str	r4, [sp, #52]	; 0x34
  40cbf4:	f04f 0a10 	mov.w	sl, #16
  40cbf8:	4d86      	ldr	r5, [pc, #536]	; (40ce14 <_svfprintf_r+0x568>)
  40cbfa:	4662      	mov	r2, ip
  40cbfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cbfe:	e002      	b.n	40cc06 <_svfprintf_r+0x35a>
  40cc00:	3f10      	subs	r7, #16
  40cc02:	2f10      	cmp	r7, #16
  40cc04:	dd19      	ble.n	40cc3a <_svfprintf_r+0x38e>
  40cc06:	3301      	adds	r3, #1
  40cc08:	3210      	adds	r2, #16
  40cc0a:	f8cb 5000 	str.w	r5, [fp]
  40cc0e:	f10b 0b08 	add.w	fp, fp, #8
  40cc12:	2b07      	cmp	r3, #7
  40cc14:	f84b ac04 	str.w	sl, [fp, #-4]
  40cc18:	9225      	str	r2, [sp, #148]	; 0x94
  40cc1a:	9324      	str	r3, [sp, #144]	; 0x90
  40cc1c:	ddf0      	ble.n	40cc00 <_svfprintf_r+0x354>
  40cc1e:	4620      	mov	r0, r4
  40cc20:	4649      	mov	r1, r9
  40cc22:	aa23      	add	r2, sp, #140	; 0x8c
  40cc24:	46c3      	mov	fp, r8
  40cc26:	f005 f871 	bl	411d0c <__ssprint_r>
  40cc2a:	2800      	cmp	r0, #0
  40cc2c:	f47f af03 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40cc30:	3f10      	subs	r7, #16
  40cc32:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40cc34:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cc36:	2f10      	cmp	r7, #16
  40cc38:	dce5      	bgt.n	40cc06 <_svfprintf_r+0x35a>
  40cc3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40cc3c:	4694      	mov	ip, r2
  40cc3e:	3301      	adds	r3, #1
  40cc40:	44bc      	add	ip, r7
  40cc42:	f8cb 5000 	str.w	r5, [fp]
  40cc46:	2b07      	cmp	r3, #7
  40cc48:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40cc4c:	9324      	str	r3, [sp, #144]	; 0x90
  40cc4e:	f8cb 7004 	str.w	r7, [fp, #4]
  40cc52:	f300 838f 	bgt.w	40d374 <_svfprintf_r+0xac8>
  40cc56:	f10b 0b08 	add.w	fp, fp, #8
  40cc5a:	9b06      	ldr	r3, [sp, #24]
  40cc5c:	05df      	lsls	r7, r3, #23
  40cc5e:	f100 8254 	bmi.w	40d10a <_svfprintf_r+0x85e>
  40cc62:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cc64:	44a4      	add	ip, r4
  40cc66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cc68:	3301      	adds	r3, #1
  40cc6a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40cc6e:	f8cb 2000 	str.w	r2, [fp]
  40cc72:	2b07      	cmp	r3, #7
  40cc74:	f8cb 4004 	str.w	r4, [fp, #4]
  40cc78:	9324      	str	r3, [sp, #144]	; 0x90
  40cc7a:	f300 8360 	bgt.w	40d33e <_svfprintf_r+0xa92>
  40cc7e:	f10b 0b08 	add.w	fp, fp, #8
  40cc82:	9b06      	ldr	r3, [sp, #24]
  40cc84:	075a      	lsls	r2, r3, #29
  40cc86:	d540      	bpl.n	40cd0a <_svfprintf_r+0x45e>
  40cc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cc8a:	9a07      	ldr	r2, [sp, #28]
  40cc8c:	1a9c      	subs	r4, r3, r2
  40cc8e:	2c00      	cmp	r4, #0
  40cc90:	dd3b      	ble.n	40cd0a <_svfprintf_r+0x45e>
  40cc92:	2c10      	cmp	r4, #16
  40cc94:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40cc96:	f340 876b 	ble.w	40db70 <_svfprintf_r+0x12c4>
  40cc9a:	2510      	movs	r5, #16
  40cc9c:	4f5c      	ldr	r7, [pc, #368]	; (40ce10 <_svfprintf_r+0x564>)
  40cc9e:	4662      	mov	r2, ip
  40cca0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40cca2:	e002      	b.n	40ccaa <_svfprintf_r+0x3fe>
  40cca4:	3c10      	subs	r4, #16
  40cca6:	2c10      	cmp	r4, #16
  40cca8:	dd19      	ble.n	40ccde <_svfprintf_r+0x432>
  40ccaa:	3301      	adds	r3, #1
  40ccac:	3210      	adds	r2, #16
  40ccae:	f8cb 7000 	str.w	r7, [fp]
  40ccb2:	f10b 0b08 	add.w	fp, fp, #8
  40ccb6:	2b07      	cmp	r3, #7
  40ccb8:	f84b 5c04 	str.w	r5, [fp, #-4]
  40ccbc:	9225      	str	r2, [sp, #148]	; 0x94
  40ccbe:	9324      	str	r3, [sp, #144]	; 0x90
  40ccc0:	ddf0      	ble.n	40cca4 <_svfprintf_r+0x3f8>
  40ccc2:	4630      	mov	r0, r6
  40ccc4:	4649      	mov	r1, r9
  40ccc6:	aa23      	add	r2, sp, #140	; 0x8c
  40ccc8:	46c3      	mov	fp, r8
  40ccca:	f005 f81f 	bl	411d0c <__ssprint_r>
  40ccce:	2800      	cmp	r0, #0
  40ccd0:	f47f aeb1 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40ccd4:	3c10      	subs	r4, #16
  40ccd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40ccd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ccda:	2c10      	cmp	r4, #16
  40ccdc:	dce5      	bgt.n	40ccaa <_svfprintf_r+0x3fe>
  40ccde:	4694      	mov	ip, r2
  40cce0:	3301      	adds	r3, #1
  40cce2:	44a4      	add	ip, r4
  40cce4:	f8cb 7000 	str.w	r7, [fp]
  40cce8:	2b07      	cmp	r3, #7
  40ccea:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40ccee:	9324      	str	r3, [sp, #144]	; 0x90
  40ccf0:	f8cb 4004 	str.w	r4, [fp, #4]
  40ccf4:	dd09      	ble.n	40cd0a <_svfprintf_r+0x45e>
  40ccf6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ccf8:	4649      	mov	r1, r9
  40ccfa:	aa23      	add	r2, sp, #140	; 0x8c
  40ccfc:	f005 f806 	bl	411d0c <__ssprint_r>
  40cd00:	2800      	cmp	r0, #0
  40cd02:	f47f ae98 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40cd06:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40cd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cd0c:	9a07      	ldr	r2, [sp, #28]
  40cd0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cd10:	428a      	cmp	r2, r1
  40cd12:	bfac      	ite	ge
  40cd14:	189b      	addge	r3, r3, r2
  40cd16:	185b      	addlt	r3, r3, r1
  40cd18:	930a      	str	r3, [sp, #40]	; 0x28
  40cd1a:	f1bc 0f00 	cmp.w	ip, #0
  40cd1e:	f040 831a 	bne.w	40d356 <_svfprintf_r+0xaaa>
  40cd22:	2300      	movs	r3, #0
  40cd24:	46c3      	mov	fp, r8
  40cd26:	9324      	str	r3, [sp, #144]	; 0x90
  40cd28:	e5e6      	b.n	40c8f8 <_svfprintf_r+0x4c>
  40cd2a:	4619      	mov	r1, r3
  40cd2c:	9806      	ldr	r0, [sp, #24]
  40cd2e:	781e      	ldrb	r6, [r3, #0]
  40cd30:	f040 0004 	orr.w	r0, r0, #4
  40cd34:	9006      	str	r0, [sp, #24]
  40cd36:	e60e      	b.n	40c956 <_svfprintf_r+0xaa>
  40cd38:	9308      	str	r3, [sp, #32]
  40cd3a:	46a4      	mov	ip, r4
  40cd3c:	9b06      	ldr	r3, [sp, #24]
  40cd3e:	f013 0320 	ands.w	r3, r3, #32
  40cd42:	f000 80ae 	beq.w	40cea2 <_svfprintf_r+0x5f6>
  40cd46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40cd48:	2300      	movs	r3, #0
  40cd4a:	3707      	adds	r7, #7
  40cd4c:	f027 0207 	bic.w	r2, r7, #7
  40cd50:	f102 0108 	add.w	r1, r2, #8
  40cd54:	e9d2 4500 	ldrd	r4, r5, [r2]
  40cd58:	910c      	str	r1, [sp, #48]	; 0x30
  40cd5a:	e68a      	b.n	40ca72 <_svfprintf_r+0x1c6>
  40cd5c:	781e      	ldrb	r6, [r3, #0]
  40cd5e:	4619      	mov	r1, r3
  40cd60:	222b      	movs	r2, #43	; 0x2b
  40cd62:	e5f8      	b.n	40c956 <_svfprintf_r+0xaa>
  40cd64:	781e      	ldrb	r6, [r3, #0]
  40cd66:	1c59      	adds	r1, r3, #1
  40cd68:	2e2a      	cmp	r6, #42	; 0x2a
  40cd6a:	f001 8006 	beq.w	40dd7a <_svfprintf_r+0x14ce>
  40cd6e:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40cd72:	460b      	mov	r3, r1
  40cd74:	2400      	movs	r4, #0
  40cd76:	2809      	cmp	r0, #9
  40cd78:	f63f adee 	bhi.w	40c958 <_svfprintf_r+0xac>
  40cd7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40cd80:	f813 6b01 	ldrb.w	r6, [r3], #1
  40cd84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40cd88:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40cd8c:	2809      	cmp	r0, #9
  40cd8e:	d9f5      	bls.n	40cd7c <_svfprintf_r+0x4d0>
  40cd90:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40cd94:	e5e0      	b.n	40c958 <_svfprintf_r+0xac>
  40cd96:	9308      	str	r3, [sp, #32]
  40cd98:	46a4      	mov	ip, r4
  40cd9a:	9b06      	ldr	r3, [sp, #24]
  40cd9c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cda0:	069c      	lsls	r4, r3, #26
  40cda2:	f140 8129 	bpl.w	40cff8 <_svfprintf_r+0x74c>
  40cda6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40cda8:	3707      	adds	r7, #7
  40cdaa:	f027 0707 	bic.w	r7, r7, #7
  40cdae:	e9d7 2300 	ldrd	r2, r3, [r7]
  40cdb2:	f107 0108 	add.w	r1, r7, #8
  40cdb6:	4614      	mov	r4, r2
  40cdb8:	461d      	mov	r5, r3
  40cdba:	910c      	str	r1, [sp, #48]	; 0x30
  40cdbc:	2a00      	cmp	r2, #0
  40cdbe:	f173 0300 	sbcs.w	r3, r3, #0
  40cdc2:	f2c0 812a 	blt.w	40d01a <_svfprintf_r+0x76e>
  40cdc6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40cdca:	2301      	movs	r3, #1
  40cdcc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40cdd0:	e655      	b.n	40ca7e <_svfprintf_r+0x1d2>
  40cdd2:	781e      	ldrb	r6, [r3, #0]
  40cdd4:	9906      	ldr	r1, [sp, #24]
  40cdd6:	2e6c      	cmp	r6, #108	; 0x6c
  40cdd8:	f000 8557 	beq.w	40d88a <_svfprintf_r+0xfde>
  40cddc:	f041 0110 	orr.w	r1, r1, #16
  40cde0:	9106      	str	r1, [sp, #24]
  40cde2:	4619      	mov	r1, r3
  40cde4:	e5b7      	b.n	40c956 <_svfprintf_r+0xaa>
  40cde6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40cde8:	6829      	ldr	r1, [r5, #0]
  40cdea:	4608      	mov	r0, r1
  40cdec:	910b      	str	r1, [sp, #44]	; 0x2c
  40cdee:	4629      	mov	r1, r5
  40cdf0:	2800      	cmp	r0, #0
  40cdf2:	f101 0104 	add.w	r1, r1, #4
  40cdf6:	f2c0 854f 	blt.w	40d898 <_svfprintf_r+0xfec>
  40cdfa:	910c      	str	r1, [sp, #48]	; 0x30
  40cdfc:	4619      	mov	r1, r3
  40cdfe:	781e      	ldrb	r6, [r3, #0]
  40ce00:	e5a9      	b.n	40c956 <_svfprintf_r+0xaa>
  40ce02:	9906      	ldr	r1, [sp, #24]
  40ce04:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40ce08:	9106      	str	r1, [sp, #24]
  40ce0a:	4619      	mov	r1, r3
  40ce0c:	781e      	ldrb	r6, [r3, #0]
  40ce0e:	e5a2      	b.n	40c956 <_svfprintf_r+0xaa>
  40ce10:	004135d8 	.word	0x004135d8
  40ce14:	004135c8 	.word	0x004135c8
  40ce18:	9906      	ldr	r1, [sp, #24]
  40ce1a:	f041 0120 	orr.w	r1, r1, #32
  40ce1e:	9106      	str	r1, [sp, #24]
  40ce20:	4619      	mov	r1, r3
  40ce22:	781e      	ldrb	r6, [r3, #0]
  40ce24:	e597      	b.n	40c956 <_svfprintf_r+0xaa>
  40ce26:	9308      	str	r3, [sp, #32]
  40ce28:	9b06      	ldr	r3, [sp, #24]
  40ce2a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40ce2e:	069e      	lsls	r6, r3, #26
  40ce30:	f140 84a4 	bpl.w	40d77c <_svfprintf_r+0xed0>
  40ce34:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ce36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ce38:	17cd      	asrs	r5, r1, #31
  40ce3a:	4608      	mov	r0, r1
  40ce3c:	6813      	ldr	r3, [r2, #0]
  40ce3e:	3204      	adds	r2, #4
  40ce40:	4629      	mov	r1, r5
  40ce42:	920c      	str	r2, [sp, #48]	; 0x30
  40ce44:	e9c3 0100 	strd	r0, r1, [r3]
  40ce48:	e556      	b.n	40c8f8 <_svfprintf_r+0x4c>
  40ce4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ce4c:	2500      	movs	r5, #0
  40ce4e:	9308      	str	r3, [sp, #32]
  40ce50:	6813      	ldr	r3, [r2, #0]
  40ce52:	1d17      	adds	r7, r2, #4
  40ce54:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  40ce58:	930f      	str	r3, [sp, #60]	; 0x3c
  40ce5a:	2b00      	cmp	r3, #0
  40ce5c:	f000 867a 	beq.w	40db54 <_svfprintf_r+0x12a8>
  40ce60:	2c00      	cmp	r4, #0
  40ce62:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40ce64:	f2c0 8624 	blt.w	40dab0 <_svfprintf_r+0x1204>
  40ce68:	4629      	mov	r1, r5
  40ce6a:	4622      	mov	r2, r4
  40ce6c:	f003 ff70 	bl	410d50 <memchr>
  40ce70:	2800      	cmp	r0, #0
  40ce72:	f000 86df 	beq.w	40dc34 <_svfprintf_r+0x1388>
  40ce76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ce78:	970c      	str	r7, [sp, #48]	; 0x30
  40ce7a:	1ac4      	subs	r4, r0, r3
  40ce7c:	9510      	str	r5, [sp, #64]	; 0x40
  40ce7e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40ce82:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40ce86:	9511      	str	r5, [sp, #68]	; 0x44
  40ce88:	9307      	str	r3, [sp, #28]
  40ce8a:	e622      	b.n	40cad2 <_svfprintf_r+0x226>
  40ce8c:	9308      	str	r3, [sp, #32]
  40ce8e:	46a4      	mov	ip, r4
  40ce90:	9b06      	ldr	r3, [sp, #24]
  40ce92:	f043 0310 	orr.w	r3, r3, #16
  40ce96:	9306      	str	r3, [sp, #24]
  40ce98:	9b06      	ldr	r3, [sp, #24]
  40ce9a:	f013 0320 	ands.w	r3, r3, #32
  40ce9e:	f47f af52 	bne.w	40cd46 <_svfprintf_r+0x49a>
  40cea2:	9a06      	ldr	r2, [sp, #24]
  40cea4:	f012 0210 	ands.w	r2, r2, #16
  40cea8:	f040 8352 	bne.w	40d550 <_svfprintf_r+0xca4>
  40ceac:	9b06      	ldr	r3, [sp, #24]
  40ceae:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40ceb2:	f000 834d 	beq.w	40d550 <_svfprintf_r+0xca4>
  40ceb6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40ceb8:	4613      	mov	r3, r2
  40ceba:	2500      	movs	r5, #0
  40cebc:	460a      	mov	r2, r1
  40cebe:	880c      	ldrh	r4, [r1, #0]
  40cec0:	3204      	adds	r2, #4
  40cec2:	920c      	str	r2, [sp, #48]	; 0x30
  40cec4:	e5d5      	b.n	40ca72 <_svfprintf_r+0x1c6>
  40cec6:	9308      	str	r3, [sp, #32]
  40cec8:	46a4      	mov	ip, r4
  40ceca:	9b06      	ldr	r3, [sp, #24]
  40cecc:	f043 0310 	orr.w	r3, r3, #16
  40ced0:	9306      	str	r3, [sp, #24]
  40ced2:	9b06      	ldr	r3, [sp, #24]
  40ced4:	0698      	lsls	r0, r3, #26
  40ced6:	f53f adc2 	bmi.w	40ca5e <_svfprintf_r+0x1b2>
  40ceda:	9b06      	ldr	r3, [sp, #24]
  40cedc:	06d9      	lsls	r1, r3, #27
  40cede:	f140 8432 	bpl.w	40d746 <_svfprintf_r+0xe9a>
  40cee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cee4:	4613      	mov	r3, r2
  40cee6:	3204      	adds	r2, #4
  40cee8:	681c      	ldr	r4, [r3, #0]
  40ceea:	2500      	movs	r5, #0
  40ceec:	2301      	movs	r3, #1
  40ceee:	920c      	str	r2, [sp, #48]	; 0x30
  40cef0:	e5bf      	b.n	40ca72 <_svfprintf_r+0x1c6>
  40cef2:	9308      	str	r3, [sp, #32]
  40cef4:	46a4      	mov	ip, r4
  40cef6:	4bb7      	ldr	r3, [pc, #732]	; (40d1d4 <_svfprintf_r+0x928>)
  40cef8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cefc:	9315      	str	r3, [sp, #84]	; 0x54
  40cefe:	9b06      	ldr	r3, [sp, #24]
  40cf00:	069a      	lsls	r2, r3, #26
  40cf02:	d53e      	bpl.n	40cf82 <_svfprintf_r+0x6d6>
  40cf04:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40cf06:	3707      	adds	r7, #7
  40cf08:	f027 0307 	bic.w	r3, r7, #7
  40cf0c:	f103 0208 	add.w	r2, r3, #8
  40cf10:	e9d3 4500 	ldrd	r4, r5, [r3]
  40cf14:	920c      	str	r2, [sp, #48]	; 0x30
  40cf16:	9b06      	ldr	r3, [sp, #24]
  40cf18:	07df      	lsls	r7, r3, #31
  40cf1a:	f140 8268 	bpl.w	40d3ee <_svfprintf_r+0xb42>
  40cf1e:	ea54 0305 	orrs.w	r3, r4, r5
  40cf22:	f000 8264 	beq.w	40d3ee <_svfprintf_r+0xb42>
  40cf26:	9b06      	ldr	r3, [sp, #24]
  40cf28:	2230      	movs	r2, #48	; 0x30
  40cf2a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40cf2e:	f043 0302 	orr.w	r3, r3, #2
  40cf32:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40cf36:	9306      	str	r3, [sp, #24]
  40cf38:	2302      	movs	r3, #2
  40cf3a:	e59a      	b.n	40ca72 <_svfprintf_r+0x1c6>
  40cf3c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cf3e:	2001      	movs	r0, #1
  40cf40:	9308      	str	r3, [sp, #32]
  40cf42:	2300      	movs	r3, #0
  40cf44:	680a      	ldr	r2, [r1, #0]
  40cf46:	3104      	adds	r1, #4
  40cf48:	461f      	mov	r7, r3
  40cf4a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40cf4e:	9310      	str	r3, [sp, #64]	; 0x40
  40cf50:	4604      	mov	r4, r0
  40cf52:	9311      	str	r3, [sp, #68]	; 0x44
  40cf54:	ab26      	add	r3, sp, #152	; 0x98
  40cf56:	9007      	str	r0, [sp, #28]
  40cf58:	910c      	str	r1, [sp, #48]	; 0x30
  40cf5a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40cf5e:	930f      	str	r3, [sp, #60]	; 0x3c
  40cf60:	e5bb      	b.n	40cada <_svfprintf_r+0x22e>
  40cf62:	9906      	ldr	r1, [sp, #24]
  40cf64:	f041 0108 	orr.w	r1, r1, #8
  40cf68:	9106      	str	r1, [sp, #24]
  40cf6a:	4619      	mov	r1, r3
  40cf6c:	781e      	ldrb	r6, [r3, #0]
  40cf6e:	e4f2      	b.n	40c956 <_svfprintf_r+0xaa>
  40cf70:	9308      	str	r3, [sp, #32]
  40cf72:	46a4      	mov	ip, r4
  40cf74:	4b98      	ldr	r3, [pc, #608]	; (40d1d8 <_svfprintf_r+0x92c>)
  40cf76:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cf7a:	9315      	str	r3, [sp, #84]	; 0x54
  40cf7c:	9b06      	ldr	r3, [sp, #24]
  40cf7e:	069a      	lsls	r2, r3, #26
  40cf80:	d4c0      	bmi.n	40cf04 <_svfprintf_r+0x658>
  40cf82:	9b06      	ldr	r3, [sp, #24]
  40cf84:	06db      	lsls	r3, r3, #27
  40cf86:	f140 83ec 	bpl.w	40d762 <_svfprintf_r+0xeb6>
  40cf8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cf8c:	2500      	movs	r5, #0
  40cf8e:	4613      	mov	r3, r2
  40cf90:	6814      	ldr	r4, [r2, #0]
  40cf92:	3304      	adds	r3, #4
  40cf94:	930c      	str	r3, [sp, #48]	; 0x30
  40cf96:	e7be      	b.n	40cf16 <_svfprintf_r+0x66a>
  40cf98:	781e      	ldrb	r6, [r3, #0]
  40cf9a:	4619      	mov	r1, r3
  40cf9c:	2a00      	cmp	r2, #0
  40cf9e:	f47f acda 	bne.w	40c956 <_svfprintf_r+0xaa>
  40cfa2:	2220      	movs	r2, #32
  40cfa4:	e4d7      	b.n	40c956 <_svfprintf_r+0xaa>
  40cfa6:	9906      	ldr	r1, [sp, #24]
  40cfa8:	f041 0101 	orr.w	r1, r1, #1
  40cfac:	9106      	str	r1, [sp, #24]
  40cfae:	4619      	mov	r1, r3
  40cfb0:	781e      	ldrb	r6, [r3, #0]
  40cfb2:	e4d0      	b.n	40c956 <_svfprintf_r+0xaa>
  40cfb4:	9906      	ldr	r1, [sp, #24]
  40cfb6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40cfba:	9106      	str	r1, [sp, #24]
  40cfbc:	4619      	mov	r1, r3
  40cfbe:	781e      	ldrb	r6, [r3, #0]
  40cfc0:	e4c9      	b.n	40c956 <_svfprintf_r+0xaa>
  40cfc2:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40cfc6:	2100      	movs	r1, #0
  40cfc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40cfcc:	f813 6b01 	ldrb.w	r6, [r3], #1
  40cfd0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40cfd4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  40cfd8:	2809      	cmp	r0, #9
  40cfda:	d9f5      	bls.n	40cfc8 <_svfprintf_r+0x71c>
  40cfdc:	910b      	str	r1, [sp, #44]	; 0x2c
  40cfde:	e4bb      	b.n	40c958 <_svfprintf_r+0xac>
  40cfe0:	9308      	str	r3, [sp, #32]
  40cfe2:	46a4      	mov	ip, r4
  40cfe4:	9b06      	ldr	r3, [sp, #24]
  40cfe6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40cfea:	f043 0310 	orr.w	r3, r3, #16
  40cfee:	9306      	str	r3, [sp, #24]
  40cff0:	9b06      	ldr	r3, [sp, #24]
  40cff2:	069c      	lsls	r4, r3, #26
  40cff4:	f53f aed7 	bmi.w	40cda6 <_svfprintf_r+0x4fa>
  40cff8:	9b06      	ldr	r3, [sp, #24]
  40cffa:	06d8      	lsls	r0, r3, #27
  40cffc:	f140 83d5 	bpl.w	40d7aa <_svfprintf_r+0xefe>
  40d000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d002:	4613      	mov	r3, r2
  40d004:	681c      	ldr	r4, [r3, #0]
  40d006:	3304      	adds	r3, #4
  40d008:	17e5      	asrs	r5, r4, #31
  40d00a:	4622      	mov	r2, r4
  40d00c:	930c      	str	r3, [sp, #48]	; 0x30
  40d00e:	2a00      	cmp	r2, #0
  40d010:	462b      	mov	r3, r5
  40d012:	f173 0300 	sbcs.w	r3, r3, #0
  40d016:	f6bf aed6 	bge.w	40cdc6 <_svfprintf_r+0x51a>
  40d01a:	272d      	movs	r7, #45	; 0x2d
  40d01c:	4264      	negs	r4, r4
  40d01e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40d022:	f04f 0301 	mov.w	r3, #1
  40d026:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40d02a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40d02e:	e526      	b.n	40ca7e <_svfprintf_r+0x1d2>
  40d030:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d032:	9308      	str	r3, [sp, #32]
  40d034:	3707      	adds	r7, #7
  40d036:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40d03a:	f027 0307 	bic.w	r3, r7, #7
  40d03e:	f103 0208 	add.w	r2, r3, #8
  40d042:	920c      	str	r2, [sp, #48]	; 0x30
  40d044:	681a      	ldr	r2, [r3, #0]
  40d046:	9213      	str	r2, [sp, #76]	; 0x4c
  40d048:	685b      	ldr	r3, [r3, #4]
  40d04a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40d04c:	9314      	str	r3, [sp, #80]	; 0x50
  40d04e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d050:	9407      	str	r4, [sp, #28]
  40d052:	f7fc ffed 	bl	40a030 <__fpclassifyd>
  40d056:	2801      	cmp	r0, #1
  40d058:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d05c:	f040 8355 	bne.w	40d70a <_svfprintf_r+0xe5e>
  40d060:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40d062:	2200      	movs	r2, #0
  40d064:	2300      	movs	r3, #0
  40d066:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d068:	f7fd fcc0 	bl	40a9ec <__aeabi_dcmplt>
  40d06c:	2800      	cmp	r0, #0
  40d06e:	f040 8582 	bne.w	40db76 <_svfprintf_r+0x12ca>
  40d072:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d076:	2303      	movs	r3, #3
  40d078:	9806      	ldr	r0, [sp, #24]
  40d07a:	4a58      	ldr	r2, [pc, #352]	; (40d1dc <_svfprintf_r+0x930>)
  40d07c:	2100      	movs	r1, #0
  40d07e:	461c      	mov	r4, r3
  40d080:	9307      	str	r3, [sp, #28]
  40d082:	4b57      	ldr	r3, [pc, #348]	; (40d1e0 <_svfprintf_r+0x934>)
  40d084:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  40d088:	9110      	str	r1, [sp, #64]	; 0x40
  40d08a:	2e47      	cmp	r6, #71	; 0x47
  40d08c:	bfd8      	it	le
  40d08e:	461a      	movle	r2, r3
  40d090:	9006      	str	r0, [sp, #24]
  40d092:	9111      	str	r1, [sp, #68]	; 0x44
  40d094:	920f      	str	r2, [sp, #60]	; 0x3c
  40d096:	e51c      	b.n	40cad2 <_svfprintf_r+0x226>
  40d098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40d09a:	2230      	movs	r2, #48	; 0x30
  40d09c:	9806      	ldr	r0, [sp, #24]
  40d09e:	46a4      	mov	ip, r4
  40d0a0:	4629      	mov	r1, r5
  40d0a2:	9308      	str	r3, [sp, #32]
  40d0a4:	2378      	movs	r3, #120	; 0x78
  40d0a6:	f040 0002 	orr.w	r0, r0, #2
  40d0aa:	3104      	adds	r1, #4
  40d0ac:	682c      	ldr	r4, [r5, #0]
  40d0ae:	461e      	mov	r6, r3
  40d0b0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  40d0b4:	4b48      	ldr	r3, [pc, #288]	; (40d1d8 <_svfprintf_r+0x92c>)
  40d0b6:	2500      	movs	r5, #0
  40d0b8:	9006      	str	r0, [sp, #24]
  40d0ba:	9315      	str	r3, [sp, #84]	; 0x54
  40d0bc:	2302      	movs	r3, #2
  40d0be:	910c      	str	r1, [sp, #48]	; 0x30
  40d0c0:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40d0c4:	e4d5      	b.n	40ca72 <_svfprintf_r+0x1c6>
  40d0c6:	9308      	str	r3, [sp, #32]
  40d0c8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40d0cc:	2e00      	cmp	r6, #0
  40d0ce:	f43f acab 	beq.w	40ca28 <_svfprintf_r+0x17c>
  40d0d2:	2300      	movs	r3, #0
  40d0d4:	2201      	movs	r2, #1
  40d0d6:	a926      	add	r1, sp, #152	; 0x98
  40d0d8:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40d0dc:	9207      	str	r2, [sp, #28]
  40d0de:	461f      	mov	r7, r3
  40d0e0:	910f      	str	r1, [sp, #60]	; 0x3c
  40d0e2:	4614      	mov	r4, r2
  40d0e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40d0e8:	9310      	str	r3, [sp, #64]	; 0x40
  40d0ea:	9311      	str	r3, [sp, #68]	; 0x44
  40d0ec:	e4f5      	b.n	40cada <_svfprintf_r+0x22e>
  40d0ee:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d0f0:	4649      	mov	r1, r9
  40d0f2:	aa23      	add	r2, sp, #140	; 0x8c
  40d0f4:	f004 fe0a 	bl	411d0c <__ssprint_r>
  40d0f8:	2800      	cmp	r0, #0
  40d0fa:	f47f ac9c 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d0fe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d102:	46c3      	mov	fp, r8
  40d104:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d108:	e53f      	b.n	40cb8a <_svfprintf_r+0x2de>
  40d10a:	2e65      	cmp	r6, #101	; 0x65
  40d10c:	f340 80c9 	ble.w	40d2a2 <_svfprintf_r+0x9f6>
  40d110:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40d112:	2200      	movs	r2, #0
  40d114:	2300      	movs	r3, #0
  40d116:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d118:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  40d11c:	f7fd fc5c 	bl	40a9d8 <__aeabi_dcmpeq>
  40d120:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40d124:	2800      	cmp	r0, #0
  40d126:	f000 8165 	beq.w	40d3f4 <_svfprintf_r+0xb48>
  40d12a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d12c:	2201      	movs	r2, #1
  40d12e:	f10c 0c01 	add.w	ip, ip, #1
  40d132:	492c      	ldr	r1, [pc, #176]	; (40d1e4 <_svfprintf_r+0x938>)
  40d134:	4413      	add	r3, r2
  40d136:	f8cb 2004 	str.w	r2, [fp, #4]
  40d13a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d13e:	2b07      	cmp	r3, #7
  40d140:	f8cb 1000 	str.w	r1, [fp]
  40d144:	9324      	str	r3, [sp, #144]	; 0x90
  40d146:	f300 8343 	bgt.w	40d7d0 <_svfprintf_r+0xf24>
  40d14a:	f10b 0b08 	add.w	fp, fp, #8
  40d14e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d150:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d152:	4293      	cmp	r3, r2
  40d154:	db03      	blt.n	40d15e <_svfprintf_r+0x8b2>
  40d156:	9b06      	ldr	r3, [sp, #24]
  40d158:	07de      	lsls	r6, r3, #31
  40d15a:	f57f ad92 	bpl.w	40cc82 <_svfprintf_r+0x3d6>
  40d15e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d160:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d162:	3301      	adds	r3, #1
  40d164:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40d166:	448c      	add	ip, r1
  40d168:	f8cb 1004 	str.w	r1, [fp, #4]
  40d16c:	2b07      	cmp	r3, #7
  40d16e:	f8cb 2000 	str.w	r2, [fp]
  40d172:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d176:	9324      	str	r3, [sp, #144]	; 0x90
  40d178:	f300 841d 	bgt.w	40d9b6 <_svfprintf_r+0x110a>
  40d17c:	f10b 0b08 	add.w	fp, fp, #8
  40d180:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d182:	1e5c      	subs	r4, r3, #1
  40d184:	2c00      	cmp	r4, #0
  40d186:	f77f ad7c 	ble.w	40cc82 <_svfprintf_r+0x3d6>
  40d18a:	2c10      	cmp	r4, #16
  40d18c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d18e:	f340 85bc 	ble.w	40dd0a <_svfprintf_r+0x145e>
  40d192:	2610      	movs	r6, #16
  40d194:	4d14      	ldr	r5, [pc, #80]	; (40d1e8 <_svfprintf_r+0x93c>)
  40d196:	4662      	mov	r2, ip
  40d198:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d19a:	e003      	b.n	40d1a4 <_svfprintf_r+0x8f8>
  40d19c:	3c10      	subs	r4, #16
  40d19e:	2c10      	cmp	r4, #16
  40d1a0:	f340 81c8 	ble.w	40d534 <_svfprintf_r+0xc88>
  40d1a4:	3301      	adds	r3, #1
  40d1a6:	3210      	adds	r2, #16
  40d1a8:	f8cb 5000 	str.w	r5, [fp]
  40d1ac:	f10b 0b08 	add.w	fp, fp, #8
  40d1b0:	2b07      	cmp	r3, #7
  40d1b2:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d1b6:	9225      	str	r2, [sp, #148]	; 0x94
  40d1b8:	9324      	str	r3, [sp, #144]	; 0x90
  40d1ba:	ddef      	ble.n	40d19c <_svfprintf_r+0x8f0>
  40d1bc:	4638      	mov	r0, r7
  40d1be:	4649      	mov	r1, r9
  40d1c0:	aa23      	add	r2, sp, #140	; 0x8c
  40d1c2:	46c3      	mov	fp, r8
  40d1c4:	f004 fda2 	bl	411d0c <__ssprint_r>
  40d1c8:	2800      	cmp	r0, #0
  40d1ca:	f47f ac34 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d1ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d1d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d1d2:	e7e3      	b.n	40d19c <_svfprintf_r+0x8f0>
  40d1d4:	004135f8 	.word	0x004135f8
  40d1d8:	0041360c 	.word	0x0041360c
  40d1dc:	004135ec 	.word	0x004135ec
  40d1e0:	004135e8 	.word	0x004135e8
  40d1e4:	00413628 	.word	0x00413628
  40d1e8:	004135c8 	.word	0x004135c8
  40d1ec:	2b01      	cmp	r3, #1
  40d1ee:	f000 814d 	beq.w	40d48c <_svfprintf_r+0xbe0>
  40d1f2:	2b02      	cmp	r3, #2
  40d1f4:	f040 80e3 	bne.w	40d3be <_svfprintf_r+0xb12>
  40d1f8:	46c2      	mov	sl, r8
  40d1fa:	9815      	ldr	r0, [sp, #84]	; 0x54
  40d1fc:	0923      	lsrs	r3, r4, #4
  40d1fe:	f004 010f 	and.w	r1, r4, #15
  40d202:	092a      	lsrs	r2, r5, #4
  40d204:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40d208:	4615      	mov	r5, r2
  40d20a:	461c      	mov	r4, r3
  40d20c:	5c43      	ldrb	r3, [r0, r1]
  40d20e:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  40d212:	ea54 0305 	orrs.w	r3, r4, r5
  40d216:	d1f1      	bne.n	40d1fc <_svfprintf_r+0x950>
  40d218:	4653      	mov	r3, sl
  40d21a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40d21e:	ebc3 0408 	rsb	r4, r3, r8
  40d222:	e44f      	b.n	40cac4 <_svfprintf_r+0x218>
  40d224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d226:	9a07      	ldr	r2, [sp, #28]
  40d228:	1a9f      	subs	r7, r3, r2
  40d22a:	2f00      	cmp	r7, #0
  40d22c:	f77f acd9 	ble.w	40cbe2 <_svfprintf_r+0x336>
  40d230:	2f10      	cmp	r7, #16
  40d232:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d234:	f340 84f9 	ble.w	40dc2a <_svfprintf_r+0x137e>
  40d238:	940d      	str	r4, [sp, #52]	; 0x34
  40d23a:	f04f 0a10 	mov.w	sl, #16
  40d23e:	4dc8      	ldr	r5, [pc, #800]	; (40d560 <_svfprintf_r+0xcb4>)
  40d240:	4662      	mov	r2, ip
  40d242:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40d244:	e002      	b.n	40d24c <_svfprintf_r+0x9a0>
  40d246:	3f10      	subs	r7, #16
  40d248:	2f10      	cmp	r7, #16
  40d24a:	dd19      	ble.n	40d280 <_svfprintf_r+0x9d4>
  40d24c:	3301      	adds	r3, #1
  40d24e:	3210      	adds	r2, #16
  40d250:	f8cb 5000 	str.w	r5, [fp]
  40d254:	f10b 0b08 	add.w	fp, fp, #8
  40d258:	2b07      	cmp	r3, #7
  40d25a:	f84b ac04 	str.w	sl, [fp, #-4]
  40d25e:	9225      	str	r2, [sp, #148]	; 0x94
  40d260:	9324      	str	r3, [sp, #144]	; 0x90
  40d262:	ddf0      	ble.n	40d246 <_svfprintf_r+0x99a>
  40d264:	4620      	mov	r0, r4
  40d266:	4649      	mov	r1, r9
  40d268:	aa23      	add	r2, sp, #140	; 0x8c
  40d26a:	46c3      	mov	fp, r8
  40d26c:	f004 fd4e 	bl	411d0c <__ssprint_r>
  40d270:	2800      	cmp	r0, #0
  40d272:	f47f abe0 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d276:	3f10      	subs	r7, #16
  40d278:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d27a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d27c:	2f10      	cmp	r7, #16
  40d27e:	dce5      	bgt.n	40d24c <_svfprintf_r+0x9a0>
  40d280:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40d282:	4694      	mov	ip, r2
  40d284:	3301      	adds	r3, #1
  40d286:	44bc      	add	ip, r7
  40d288:	f8cb 5000 	str.w	r5, [fp]
  40d28c:	2b07      	cmp	r3, #7
  40d28e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d292:	9324      	str	r3, [sp, #144]	; 0x90
  40d294:	f8cb 7004 	str.w	r7, [fp, #4]
  40d298:	f300 81fc 	bgt.w	40d694 <_svfprintf_r+0xde8>
  40d29c:	f10b 0b08 	add.w	fp, fp, #8
  40d2a0:	e49f      	b.n	40cbe2 <_svfprintf_r+0x336>
  40d2a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d2a4:	f10c 0601 	add.w	r6, ip, #1
  40d2a8:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40d2aa:	2b01      	cmp	r3, #1
  40d2ac:	f340 81c9 	ble.w	40d642 <_svfprintf_r+0xd96>
  40d2b0:	2301      	movs	r3, #1
  40d2b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d2b4:	9625      	str	r6, [sp, #148]	; 0x94
  40d2b6:	441c      	add	r4, r3
  40d2b8:	f8cb 2000 	str.w	r2, [fp]
  40d2bc:	f8cb 3004 	str.w	r3, [fp, #4]
  40d2c0:	2c07      	cmp	r4, #7
  40d2c2:	9424      	str	r4, [sp, #144]	; 0x90
  40d2c4:	f300 81da 	bgt.w	40d67c <_svfprintf_r+0xdd0>
  40d2c8:	f10b 0b08 	add.w	fp, fp, #8
  40d2cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40d2ce:	3401      	adds	r4, #1
  40d2d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d2d2:	4416      	add	r6, r2
  40d2d4:	2c07      	cmp	r4, #7
  40d2d6:	f8cb 3000 	str.w	r3, [fp]
  40d2da:	9625      	str	r6, [sp, #148]	; 0x94
  40d2dc:	9424      	str	r4, [sp, #144]	; 0x90
  40d2de:	f8cb 2004 	str.w	r2, [fp, #4]
  40d2e2:	f300 81bf 	bgt.w	40d664 <_svfprintf_r+0xdb8>
  40d2e6:	f10b 0b08 	add.w	fp, fp, #8
  40d2ea:	2300      	movs	r3, #0
  40d2ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40d2ee:	2200      	movs	r2, #0
  40d2f0:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d2f2:	f7fd fb71 	bl	40a9d8 <__aeabi_dcmpeq>
  40d2f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d2f8:	2800      	cmp	r0, #0
  40d2fa:	f040 80dc 	bne.w	40d4b6 <_svfprintf_r+0xc0a>
  40d2fe:	3b01      	subs	r3, #1
  40d300:	3401      	adds	r4, #1
  40d302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d304:	441e      	add	r6, r3
  40d306:	2c07      	cmp	r4, #7
  40d308:	f102 0201 	add.w	r2, r2, #1
  40d30c:	9424      	str	r4, [sp, #144]	; 0x90
  40d30e:	9625      	str	r6, [sp, #148]	; 0x94
  40d310:	f8cb 2000 	str.w	r2, [fp]
  40d314:	f8cb 3004 	str.w	r3, [fp, #4]
  40d318:	f300 8100 	bgt.w	40d51c <_svfprintf_r+0xc70>
  40d31c:	f10b 0b08 	add.w	fp, fp, #8
  40d320:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40d322:	3401      	adds	r4, #1
  40d324:	ab1f      	add	r3, sp, #124	; 0x7c
  40d326:	eb06 0c02 	add.w	ip, r6, r2
  40d32a:	2c07      	cmp	r4, #7
  40d32c:	f8cb 2004 	str.w	r2, [fp, #4]
  40d330:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d334:	9424      	str	r4, [sp, #144]	; 0x90
  40d336:	f8cb 3000 	str.w	r3, [fp]
  40d33a:	f77f aca0 	ble.w	40cc7e <_svfprintf_r+0x3d2>
  40d33e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d340:	4649      	mov	r1, r9
  40d342:	aa23      	add	r2, sp, #140	; 0x8c
  40d344:	f004 fce2 	bl	411d0c <__ssprint_r>
  40d348:	2800      	cmp	r0, #0
  40d34a:	f47f ab74 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d34e:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d352:	46c3      	mov	fp, r8
  40d354:	e495      	b.n	40cc82 <_svfprintf_r+0x3d6>
  40d356:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d358:	4649      	mov	r1, r9
  40d35a:	aa23      	add	r2, sp, #140	; 0x8c
  40d35c:	f004 fcd6 	bl	411d0c <__ssprint_r>
  40d360:	2800      	cmp	r0, #0
  40d362:	f43f acde 	beq.w	40cd22 <_svfprintf_r+0x476>
  40d366:	f7ff bb66 	b.w	40ca36 <_svfprintf_r+0x18a>
  40d36a:	4614      	mov	r4, r2
  40d36c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40d370:	f7ff bba8 	b.w	40cac4 <_svfprintf_r+0x218>
  40d374:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d376:	4649      	mov	r1, r9
  40d378:	aa23      	add	r2, sp, #140	; 0x8c
  40d37a:	f004 fcc7 	bl	411d0c <__ssprint_r>
  40d37e:	2800      	cmp	r0, #0
  40d380:	f47f ab59 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d384:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d388:	46c3      	mov	fp, r8
  40d38a:	e466      	b.n	40cc5a <_svfprintf_r+0x3ae>
  40d38c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d38e:	4649      	mov	r1, r9
  40d390:	aa23      	add	r2, sp, #140	; 0x8c
  40d392:	f004 fcbb 	bl	411d0c <__ssprint_r>
  40d396:	2800      	cmp	r0, #0
  40d398:	f47f ab4d 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d39c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d3a0:	46c3      	mov	fp, r8
  40d3a2:	e41a      	b.n	40cbda <_svfprintf_r+0x32e>
  40d3a4:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d3a6:	4649      	mov	r1, r9
  40d3a8:	aa23      	add	r2, sp, #140	; 0x8c
  40d3aa:	f004 fcaf 	bl	411d0c <__ssprint_r>
  40d3ae:	2800      	cmp	r0, #0
  40d3b0:	f47f ab41 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d3b4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d3b8:	46c3      	mov	fp, r8
  40d3ba:	f7ff bbfa 	b.w	40cbb2 <_svfprintf_r+0x306>
  40d3be:	4641      	mov	r1, r8
  40d3c0:	08e2      	lsrs	r2, r4, #3
  40d3c2:	f004 0307 	and.w	r3, r4, #7
  40d3c6:	08e8      	lsrs	r0, r5, #3
  40d3c8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40d3cc:	3330      	adds	r3, #48	; 0x30
  40d3ce:	4605      	mov	r5, r0
  40d3d0:	4614      	mov	r4, r2
  40d3d2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40d3d6:	ea54 0205 	orrs.w	r2, r4, r5
  40d3da:	d1f1      	bne.n	40d3c0 <_svfprintf_r+0xb14>
  40d3dc:	9a06      	ldr	r2, [sp, #24]
  40d3de:	910f      	str	r1, [sp, #60]	; 0x3c
  40d3e0:	07d0      	lsls	r0, r2, #31
  40d3e2:	f100 8164 	bmi.w	40d6ae <_svfprintf_r+0xe02>
  40d3e6:	ebc1 0408 	rsb	r4, r1, r8
  40d3ea:	f7ff bb6b 	b.w	40cac4 <_svfprintf_r+0x218>
  40d3ee:	2302      	movs	r3, #2
  40d3f0:	f7ff bb3f 	b.w	40ca72 <_svfprintf_r+0x1c6>
  40d3f4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40d3f6:	2c00      	cmp	r4, #0
  40d3f8:	f340 81f6 	ble.w	40d7e8 <_svfprintf_r+0xf3c>
  40d3fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d3fe:	9911      	ldr	r1, [sp, #68]	; 0x44
  40d400:	4613      	mov	r3, r2
  40d402:	428a      	cmp	r2, r1
  40d404:	bfa8      	it	ge
  40d406:	460b      	movge	r3, r1
  40d408:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40d40a:	461c      	mov	r4, r3
  40d40c:	188f      	adds	r7, r1, r2
  40d40e:	2c00      	cmp	r4, #0
  40d410:	dd0e      	ble.n	40d430 <_svfprintf_r+0xb84>
  40d412:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d414:	44a4      	add	ip, r4
  40d416:	f8cb 1000 	str.w	r1, [fp]
  40d41a:	3301      	adds	r3, #1
  40d41c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d420:	f8cb 4004 	str.w	r4, [fp, #4]
  40d424:	2b07      	cmp	r3, #7
  40d426:	9324      	str	r3, [sp, #144]	; 0x90
  40d428:	f300 8353 	bgt.w	40dad2 <_svfprintf_r+0x1226>
  40d42c:	f10b 0b08 	add.w	fp, fp, #8
  40d430:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d432:	2c00      	cmp	r4, #0
  40d434:	bfa8      	it	ge
  40d436:	1b1b      	subge	r3, r3, r4
  40d438:	2b00      	cmp	r3, #0
  40d43a:	461c      	mov	r4, r3
  40d43c:	f340 80a1 	ble.w	40d582 <_svfprintf_r+0xcd6>
  40d440:	2c10      	cmp	r4, #16
  40d442:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d444:	f340 846c 	ble.w	40dd20 <_svfprintf_r+0x1474>
  40d448:	2610      	movs	r6, #16
  40d44a:	4d45      	ldr	r5, [pc, #276]	; (40d560 <_svfprintf_r+0xcb4>)
  40d44c:	4662      	mov	r2, ip
  40d44e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  40d452:	e003      	b.n	40d45c <_svfprintf_r+0xbb0>
  40d454:	3c10      	subs	r4, #16
  40d456:	2c10      	cmp	r4, #16
  40d458:	f340 8084 	ble.w	40d564 <_svfprintf_r+0xcb8>
  40d45c:	3301      	adds	r3, #1
  40d45e:	3210      	adds	r2, #16
  40d460:	f8cb 5000 	str.w	r5, [fp]
  40d464:	f10b 0b08 	add.w	fp, fp, #8
  40d468:	2b07      	cmp	r3, #7
  40d46a:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d46e:	9225      	str	r2, [sp, #148]	; 0x94
  40d470:	9324      	str	r3, [sp, #144]	; 0x90
  40d472:	ddef      	ble.n	40d454 <_svfprintf_r+0xba8>
  40d474:	4650      	mov	r0, sl
  40d476:	4649      	mov	r1, r9
  40d478:	aa23      	add	r2, sp, #140	; 0x8c
  40d47a:	46c3      	mov	fp, r8
  40d47c:	f004 fc46 	bl	411d0c <__ssprint_r>
  40d480:	2800      	cmp	r0, #0
  40d482:	f47f aad8 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d486:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d488:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d48a:	e7e3      	b.n	40d454 <_svfprintf_r+0xba8>
  40d48c:	2d00      	cmp	r5, #0
  40d48e:	bf08      	it	eq
  40d490:	2c0a      	cmpeq	r4, #10
  40d492:	f080 811a 	bcs.w	40d6ca <_svfprintf_r+0xe1e>
  40d496:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  40d49a:	3430      	adds	r4, #48	; 0x30
  40d49c:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  40d4a0:	ebca 0408 	rsb	r4, sl, r8
  40d4a4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40d4a8:	f7ff bb0c 	b.w	40cac4 <_svfprintf_r+0x218>
  40d4ac:	461c      	mov	r4, r3
  40d4ae:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40d4b2:	f7ff bb07 	b.w	40cac4 <_svfprintf_r+0x218>
  40d4b6:	1e5f      	subs	r7, r3, #1
  40d4b8:	2f00      	cmp	r7, #0
  40d4ba:	f77f af31 	ble.w	40d320 <_svfprintf_r+0xa74>
  40d4be:	2f10      	cmp	r7, #16
  40d4c0:	4d27      	ldr	r5, [pc, #156]	; (40d560 <_svfprintf_r+0xcb4>)
  40d4c2:	bfc8      	it	gt
  40d4c4:	f04f 0a10 	movgt.w	sl, #16
  40d4c8:	dc03      	bgt.n	40d4d2 <_svfprintf_r+0xc26>
  40d4ca:	e01c      	b.n	40d506 <_svfprintf_r+0xc5a>
  40d4cc:	3f10      	subs	r7, #16
  40d4ce:	2f10      	cmp	r7, #16
  40d4d0:	dd19      	ble.n	40d506 <_svfprintf_r+0xc5a>
  40d4d2:	3401      	adds	r4, #1
  40d4d4:	3610      	adds	r6, #16
  40d4d6:	f8cb 5000 	str.w	r5, [fp]
  40d4da:	f10b 0b08 	add.w	fp, fp, #8
  40d4de:	2c07      	cmp	r4, #7
  40d4e0:	f84b ac04 	str.w	sl, [fp, #-4]
  40d4e4:	9625      	str	r6, [sp, #148]	; 0x94
  40d4e6:	9424      	str	r4, [sp, #144]	; 0x90
  40d4e8:	ddf0      	ble.n	40d4cc <_svfprintf_r+0xc20>
  40d4ea:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d4ec:	4649      	mov	r1, r9
  40d4ee:	aa23      	add	r2, sp, #140	; 0x8c
  40d4f0:	46c3      	mov	fp, r8
  40d4f2:	f004 fc0b 	bl	411d0c <__ssprint_r>
  40d4f6:	2800      	cmp	r0, #0
  40d4f8:	f47f aa9d 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d4fc:	3f10      	subs	r7, #16
  40d4fe:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40d500:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40d502:	2f10      	cmp	r7, #16
  40d504:	dce5      	bgt.n	40d4d2 <_svfprintf_r+0xc26>
  40d506:	3401      	adds	r4, #1
  40d508:	443e      	add	r6, r7
  40d50a:	f8cb 5000 	str.w	r5, [fp]
  40d50e:	2c07      	cmp	r4, #7
  40d510:	9625      	str	r6, [sp, #148]	; 0x94
  40d512:	9424      	str	r4, [sp, #144]	; 0x90
  40d514:	f8cb 7004 	str.w	r7, [fp, #4]
  40d518:	f77f af00 	ble.w	40d31c <_svfprintf_r+0xa70>
  40d51c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d51e:	4649      	mov	r1, r9
  40d520:	aa23      	add	r2, sp, #140	; 0x8c
  40d522:	f004 fbf3 	bl	411d0c <__ssprint_r>
  40d526:	2800      	cmp	r0, #0
  40d528:	f47f aa85 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d52c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40d52e:	46c3      	mov	fp, r8
  40d530:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40d532:	e6f5      	b.n	40d320 <_svfprintf_r+0xa74>
  40d534:	4694      	mov	ip, r2
  40d536:	3301      	adds	r3, #1
  40d538:	44a4      	add	ip, r4
  40d53a:	f8cb 5000 	str.w	r5, [fp]
  40d53e:	2b07      	cmp	r3, #7
  40d540:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d544:	9324      	str	r3, [sp, #144]	; 0x90
  40d546:	f8cb 4004 	str.w	r4, [fp, #4]
  40d54a:	f77f ab98 	ble.w	40cc7e <_svfprintf_r+0x3d2>
  40d54e:	e6f6      	b.n	40d33e <_svfprintf_r+0xa92>
  40d550:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d552:	2500      	movs	r5, #0
  40d554:	460a      	mov	r2, r1
  40d556:	680c      	ldr	r4, [r1, #0]
  40d558:	3204      	adds	r2, #4
  40d55a:	920c      	str	r2, [sp, #48]	; 0x30
  40d55c:	f7ff ba89 	b.w	40ca72 <_svfprintf_r+0x1c6>
  40d560:	004135c8 	.word	0x004135c8
  40d564:	4694      	mov	ip, r2
  40d566:	3301      	adds	r3, #1
  40d568:	44a4      	add	ip, r4
  40d56a:	f8cb 5000 	str.w	r5, [fp]
  40d56e:	2b07      	cmp	r3, #7
  40d570:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d574:	9324      	str	r3, [sp, #144]	; 0x90
  40d576:	f8cb 4004 	str.w	r4, [fp, #4]
  40d57a:	f300 82df 	bgt.w	40db3c <_svfprintf_r+0x1290>
  40d57e:	f10b 0b08 	add.w	fp, fp, #8
  40d582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d584:	9911      	ldr	r1, [sp, #68]	; 0x44
  40d586:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d588:	440a      	add	r2, r1
  40d58a:	4616      	mov	r6, r2
  40d58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d58e:	4293      	cmp	r3, r2
  40d590:	db45      	blt.n	40d61e <_svfprintf_r+0xd72>
  40d592:	9a06      	ldr	r2, [sp, #24]
  40d594:	07d0      	lsls	r0, r2, #31
  40d596:	d442      	bmi.n	40d61e <_svfprintf_r+0xd72>
  40d598:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d59a:	1bbc      	subs	r4, r7, r6
  40d59c:	1ad3      	subs	r3, r2, r3
  40d59e:	429c      	cmp	r4, r3
  40d5a0:	bfa8      	it	ge
  40d5a2:	461c      	movge	r4, r3
  40d5a4:	2c00      	cmp	r4, #0
  40d5a6:	4625      	mov	r5, r4
  40d5a8:	dd0e      	ble.n	40d5c8 <_svfprintf_r+0xd1c>
  40d5aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d5ac:	44a4      	add	ip, r4
  40d5ae:	f8cb 6000 	str.w	r6, [fp]
  40d5b2:	3201      	adds	r2, #1
  40d5b4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d5b8:	f8cb 4004 	str.w	r4, [fp, #4]
  40d5bc:	2a07      	cmp	r2, #7
  40d5be:	9224      	str	r2, [sp, #144]	; 0x90
  40d5c0:	f300 82a0 	bgt.w	40db04 <_svfprintf_r+0x1258>
  40d5c4:	f10b 0b08 	add.w	fp, fp, #8
  40d5c8:	2d00      	cmp	r5, #0
  40d5ca:	bfac      	ite	ge
  40d5cc:	1b5c      	subge	r4, r3, r5
  40d5ce:	461c      	movlt	r4, r3
  40d5d0:	2c00      	cmp	r4, #0
  40d5d2:	f77f ab56 	ble.w	40cc82 <_svfprintf_r+0x3d6>
  40d5d6:	2c10      	cmp	r4, #16
  40d5d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d5da:	f340 8396 	ble.w	40dd0a <_svfprintf_r+0x145e>
  40d5de:	2610      	movs	r6, #16
  40d5e0:	4db1      	ldr	r5, [pc, #708]	; (40d8a8 <_svfprintf_r+0xffc>)
  40d5e2:	4662      	mov	r2, ip
  40d5e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d5e6:	e002      	b.n	40d5ee <_svfprintf_r+0xd42>
  40d5e8:	3c10      	subs	r4, #16
  40d5ea:	2c10      	cmp	r4, #16
  40d5ec:	dda2      	ble.n	40d534 <_svfprintf_r+0xc88>
  40d5ee:	3301      	adds	r3, #1
  40d5f0:	3210      	adds	r2, #16
  40d5f2:	f8cb 5000 	str.w	r5, [fp]
  40d5f6:	f10b 0b08 	add.w	fp, fp, #8
  40d5fa:	2b07      	cmp	r3, #7
  40d5fc:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d600:	9225      	str	r2, [sp, #148]	; 0x94
  40d602:	9324      	str	r3, [sp, #144]	; 0x90
  40d604:	ddf0      	ble.n	40d5e8 <_svfprintf_r+0xd3c>
  40d606:	4638      	mov	r0, r7
  40d608:	4649      	mov	r1, r9
  40d60a:	aa23      	add	r2, sp, #140	; 0x8c
  40d60c:	46c3      	mov	fp, r8
  40d60e:	f004 fb7d 	bl	411d0c <__ssprint_r>
  40d612:	2800      	cmp	r0, #0
  40d614:	f47f aa0f 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d618:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d61a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d61c:	e7e4      	b.n	40d5e8 <_svfprintf_r+0xd3c>
  40d61e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d620:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d622:	3201      	adds	r2, #1
  40d624:	9916      	ldr	r1, [sp, #88]	; 0x58
  40d626:	4484      	add	ip, r0
  40d628:	f8cb 0004 	str.w	r0, [fp, #4]
  40d62c:	2a07      	cmp	r2, #7
  40d62e:	f8cb 1000 	str.w	r1, [fp]
  40d632:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d636:	9224      	str	r2, [sp, #144]	; 0x90
  40d638:	f300 8273 	bgt.w	40db22 <_svfprintf_r+0x1276>
  40d63c:	f10b 0b08 	add.w	fp, fp, #8
  40d640:	e7aa      	b.n	40d598 <_svfprintf_r+0xcec>
  40d642:	9b06      	ldr	r3, [sp, #24]
  40d644:	07d9      	lsls	r1, r3, #31
  40d646:	f53f ae33 	bmi.w	40d2b0 <_svfprintf_r+0xa04>
  40d64a:	2301      	movs	r3, #1
  40d64c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d64e:	9625      	str	r6, [sp, #148]	; 0x94
  40d650:	441c      	add	r4, r3
  40d652:	f8cb 2000 	str.w	r2, [fp]
  40d656:	f8cb 3004 	str.w	r3, [fp, #4]
  40d65a:	2c07      	cmp	r4, #7
  40d65c:	9424      	str	r4, [sp, #144]	; 0x90
  40d65e:	f77f ae5d 	ble.w	40d31c <_svfprintf_r+0xa70>
  40d662:	e75b      	b.n	40d51c <_svfprintf_r+0xc70>
  40d664:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d666:	4649      	mov	r1, r9
  40d668:	aa23      	add	r2, sp, #140	; 0x8c
  40d66a:	f004 fb4f 	bl	411d0c <__ssprint_r>
  40d66e:	2800      	cmp	r0, #0
  40d670:	f47f a9e1 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d674:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40d676:	46c3      	mov	fp, r8
  40d678:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40d67a:	e636      	b.n	40d2ea <_svfprintf_r+0xa3e>
  40d67c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d67e:	4649      	mov	r1, r9
  40d680:	aa23      	add	r2, sp, #140	; 0x8c
  40d682:	f004 fb43 	bl	411d0c <__ssprint_r>
  40d686:	2800      	cmp	r0, #0
  40d688:	f47f a9d5 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d68c:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40d68e:	46c3      	mov	fp, r8
  40d690:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40d692:	e61b      	b.n	40d2cc <_svfprintf_r+0xa20>
  40d694:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d696:	4649      	mov	r1, r9
  40d698:	aa23      	add	r2, sp, #140	; 0x8c
  40d69a:	f004 fb37 	bl	411d0c <__ssprint_r>
  40d69e:	2800      	cmp	r0, #0
  40d6a0:	f47f a9c9 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d6a4:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d6a8:	46c3      	mov	fp, r8
  40d6aa:	f7ff ba9a 	b.w	40cbe2 <_svfprintf_r+0x336>
  40d6ae:	2b30      	cmp	r3, #48	; 0x30
  40d6b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d6b2:	f43f adb4 	beq.w	40d21e <_svfprintf_r+0x972>
  40d6b6:	3b01      	subs	r3, #1
  40d6b8:	461a      	mov	r2, r3
  40d6ba:	930f      	str	r3, [sp, #60]	; 0x3c
  40d6bc:	2330      	movs	r3, #48	; 0x30
  40d6be:	ebc2 0408 	rsb	r4, r2, r8
  40d6c2:	f801 3c01 	strb.w	r3, [r1, #-1]
  40d6c6:	f7ff b9fd 	b.w	40cac4 <_svfprintf_r+0x218>
  40d6ca:	46c2      	mov	sl, r8
  40d6cc:	f8cd c01c 	str.w	ip, [sp, #28]
  40d6d0:	4620      	mov	r0, r4
  40d6d2:	4629      	mov	r1, r5
  40d6d4:	220a      	movs	r2, #10
  40d6d6:	2300      	movs	r3, #0
  40d6d8:	f004 fd84 	bl	4121e4 <__aeabi_uldivmod>
  40d6dc:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40d6e0:	4620      	mov	r0, r4
  40d6e2:	4629      	mov	r1, r5
  40d6e4:	2300      	movs	r3, #0
  40d6e6:	220a      	movs	r2, #10
  40d6e8:	f80a ed01 	strb.w	lr, [sl, #-1]!
  40d6ec:	f004 fd7a 	bl	4121e4 <__aeabi_uldivmod>
  40d6f0:	4604      	mov	r4, r0
  40d6f2:	460d      	mov	r5, r1
  40d6f4:	ea54 0305 	orrs.w	r3, r4, r5
  40d6f8:	d1ea      	bne.n	40d6d0 <_svfprintf_r+0xe24>
  40d6fa:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d6fe:	ebca 0408 	rsb	r4, sl, r8
  40d702:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40d706:	f7ff b9dd 	b.w	40cac4 <_svfprintf_r+0x218>
  40d70a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40d70c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40d70e:	f8cd c01c 	str.w	ip, [sp, #28]
  40d712:	f7fc fc8d 	bl	40a030 <__fpclassifyd>
  40d716:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d71a:	2800      	cmp	r0, #0
  40d71c:	f040 80cc 	bne.w	40d8b8 <_svfprintf_r+0x100c>
  40d720:	9c06      	ldr	r4, [sp, #24]
  40d722:	2103      	movs	r1, #3
  40d724:	4a61      	ldr	r2, [pc, #388]	; (40d8ac <_svfprintf_r+0x1000>)
  40d726:	4b62      	ldr	r3, [pc, #392]	; (40d8b0 <_svfprintf_r+0x1004>)
  40d728:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40d72c:	9010      	str	r0, [sp, #64]	; 0x40
  40d72e:	2e47      	cmp	r6, #71	; 0x47
  40d730:	bfd8      	it	le
  40d732:	461a      	movle	r2, r3
  40d734:	9406      	str	r4, [sp, #24]
  40d736:	9107      	str	r1, [sp, #28]
  40d738:	460c      	mov	r4, r1
  40d73a:	9011      	str	r0, [sp, #68]	; 0x44
  40d73c:	920f      	str	r2, [sp, #60]	; 0x3c
  40d73e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d742:	f7ff b9c6 	b.w	40cad2 <_svfprintf_r+0x226>
  40d746:	9b06      	ldr	r3, [sp, #24]
  40d748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d74a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d74e:	4613      	mov	r3, r2
  40d750:	f43f abc9 	beq.w	40cee6 <_svfprintf_r+0x63a>
  40d754:	8814      	ldrh	r4, [r2, #0]
  40d756:	3204      	adds	r2, #4
  40d758:	2500      	movs	r5, #0
  40d75a:	2301      	movs	r3, #1
  40d75c:	920c      	str	r2, [sp, #48]	; 0x30
  40d75e:	f7ff b988 	b.w	40ca72 <_svfprintf_r+0x1c6>
  40d762:	9b06      	ldr	r3, [sp, #24]
  40d764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d766:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d76a:	4613      	mov	r3, r2
  40d76c:	f000 8130 	beq.w	40d9d0 <_svfprintf_r+0x1124>
  40d770:	3304      	adds	r3, #4
  40d772:	8814      	ldrh	r4, [r2, #0]
  40d774:	2500      	movs	r5, #0
  40d776:	930c      	str	r3, [sp, #48]	; 0x30
  40d778:	f7ff bbcd 	b.w	40cf16 <_svfprintf_r+0x66a>
  40d77c:	9b06      	ldr	r3, [sp, #24]
  40d77e:	06dd      	lsls	r5, r3, #27
  40d780:	d40b      	bmi.n	40d79a <_svfprintf_r+0xeee>
  40d782:	9b06      	ldr	r3, [sp, #24]
  40d784:	065c      	lsls	r4, r3, #25
  40d786:	d508      	bpl.n	40d79a <_svfprintf_r+0xeee>
  40d788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d78a:	6813      	ldr	r3, [r2, #0]
  40d78c:	3204      	adds	r2, #4
  40d78e:	920c      	str	r2, [sp, #48]	; 0x30
  40d790:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  40d794:	801a      	strh	r2, [r3, #0]
  40d796:	f7ff b8af 	b.w	40c8f8 <_svfprintf_r+0x4c>
  40d79a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d79c:	6813      	ldr	r3, [r2, #0]
  40d79e:	3204      	adds	r2, #4
  40d7a0:	920c      	str	r2, [sp, #48]	; 0x30
  40d7a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d7a4:	601a      	str	r2, [r3, #0]
  40d7a6:	f7ff b8a7 	b.w	40c8f8 <_svfprintf_r+0x4c>
  40d7aa:	9b06      	ldr	r3, [sp, #24]
  40d7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d7ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  40d7b2:	4613      	mov	r3, r2
  40d7b4:	f43f ac26 	beq.w	40d004 <_svfprintf_r+0x758>
  40d7b8:	f9b2 4000 	ldrsh.w	r4, [r2]
  40d7bc:	3304      	adds	r3, #4
  40d7be:	17e5      	asrs	r5, r4, #31
  40d7c0:	930c      	str	r3, [sp, #48]	; 0x30
  40d7c2:	4622      	mov	r2, r4
  40d7c4:	462b      	mov	r3, r5
  40d7c6:	f7ff baf9 	b.w	40cdbc <_svfprintf_r+0x510>
  40d7ca:	4d37      	ldr	r5, [pc, #220]	; (40d8a8 <_svfprintf_r+0xffc>)
  40d7cc:	f7ff ba37 	b.w	40cc3e <_svfprintf_r+0x392>
  40d7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d7d2:	4649      	mov	r1, r9
  40d7d4:	aa23      	add	r2, sp, #140	; 0x8c
  40d7d6:	f004 fa99 	bl	411d0c <__ssprint_r>
  40d7da:	2800      	cmp	r0, #0
  40d7dc:	f47f a92b 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d7e0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d7e4:	46c3      	mov	fp, r8
  40d7e6:	e4b2      	b.n	40d14e <_svfprintf_r+0x8a2>
  40d7e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d7ea:	2201      	movs	r2, #1
  40d7ec:	f10c 0c01 	add.w	ip, ip, #1
  40d7f0:	4930      	ldr	r1, [pc, #192]	; (40d8b4 <_svfprintf_r+0x1008>)
  40d7f2:	4413      	add	r3, r2
  40d7f4:	f8cb 2004 	str.w	r2, [fp, #4]
  40d7f8:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40d7fc:	2b07      	cmp	r3, #7
  40d7fe:	f8cb 1000 	str.w	r1, [fp]
  40d802:	9324      	str	r3, [sp, #144]	; 0x90
  40d804:	f300 80fa 	bgt.w	40d9fc <_svfprintf_r+0x1150>
  40d808:	f10b 0b08 	add.w	fp, fp, #8
  40d80c:	b92c      	cbnz	r4, 40d81a <_svfprintf_r+0xf6e>
  40d80e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d810:	b91b      	cbnz	r3, 40d81a <_svfprintf_r+0xf6e>
  40d812:	9b06      	ldr	r3, [sp, #24]
  40d814:	07dd      	lsls	r5, r3, #31
  40d816:	f57f aa34 	bpl.w	40cc82 <_svfprintf_r+0x3d6>
  40d81a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d81c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d81e:	3301      	adds	r3, #1
  40d820:	9816      	ldr	r0, [sp, #88]	; 0x58
  40d822:	eb0c 0201 	add.w	r2, ip, r1
  40d826:	f8cb 1004 	str.w	r1, [fp, #4]
  40d82a:	2b07      	cmp	r3, #7
  40d82c:	f8cb 0000 	str.w	r0, [fp]
  40d830:	9225      	str	r2, [sp, #148]	; 0x94
  40d832:	9324      	str	r3, [sp, #144]	; 0x90
  40d834:	f300 824c 	bgt.w	40dcd0 <_svfprintf_r+0x1424>
  40d838:	f10b 0b08 	add.w	fp, fp, #8
  40d83c:	4264      	negs	r4, r4
  40d83e:	2c00      	cmp	r4, #0
  40d840:	f340 8126 	ble.w	40da90 <_svfprintf_r+0x11e4>
  40d844:	2c10      	cmp	r4, #16
  40d846:	4d18      	ldr	r5, [pc, #96]	; (40d8a8 <_svfprintf_r+0xffc>)
  40d848:	f340 814f 	ble.w	40daea <_svfprintf_r+0x123e>
  40d84c:	2610      	movs	r6, #16
  40d84e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d850:	e003      	b.n	40d85a <_svfprintf_r+0xfae>
  40d852:	3c10      	subs	r4, #16
  40d854:	2c10      	cmp	r4, #16
  40d856:	f340 8148 	ble.w	40daea <_svfprintf_r+0x123e>
  40d85a:	3301      	adds	r3, #1
  40d85c:	3210      	adds	r2, #16
  40d85e:	f8cb 5000 	str.w	r5, [fp]
  40d862:	f10b 0b08 	add.w	fp, fp, #8
  40d866:	2b07      	cmp	r3, #7
  40d868:	f84b 6c04 	str.w	r6, [fp, #-4]
  40d86c:	9225      	str	r2, [sp, #148]	; 0x94
  40d86e:	9324      	str	r3, [sp, #144]	; 0x90
  40d870:	ddef      	ble.n	40d852 <_svfprintf_r+0xfa6>
  40d872:	4638      	mov	r0, r7
  40d874:	4649      	mov	r1, r9
  40d876:	aa23      	add	r2, sp, #140	; 0x8c
  40d878:	46c3      	mov	fp, r8
  40d87a:	f004 fa47 	bl	411d0c <__ssprint_r>
  40d87e:	2800      	cmp	r0, #0
  40d880:	f47f a8d9 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d884:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d886:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d888:	e7e3      	b.n	40d852 <_svfprintf_r+0xfa6>
  40d88a:	f041 0120 	orr.w	r1, r1, #32
  40d88e:	785e      	ldrb	r6, [r3, #1]
  40d890:	9106      	str	r1, [sp, #24]
  40d892:	1c59      	adds	r1, r3, #1
  40d894:	f7ff b85f 	b.w	40c956 <_svfprintf_r+0xaa>
  40d898:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d89a:	910c      	str	r1, [sp, #48]	; 0x30
  40d89c:	4619      	mov	r1, r3
  40d89e:	4240      	negs	r0, r0
  40d8a0:	900b      	str	r0, [sp, #44]	; 0x2c
  40d8a2:	f7ff ba43 	b.w	40cd2c <_svfprintf_r+0x480>
  40d8a6:	bf00      	nop
  40d8a8:	004135c8 	.word	0x004135c8
  40d8ac:	004135f4 	.word	0x004135f4
  40d8b0:	004135f0 	.word	0x004135f0
  40d8b4:	00413628 	.word	0x00413628
  40d8b8:	f1bc 3fff 	cmp.w	ip, #4294967295
  40d8bc:	f026 0a20 	bic.w	sl, r6, #32
  40d8c0:	f000 80a9 	beq.w	40da16 <_svfprintf_r+0x116a>
  40d8c4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40d8c8:	f040 80a7 	bne.w	40da1a <_svfprintf_r+0x116e>
  40d8cc:	f1bc 0f00 	cmp.w	ip, #0
  40d8d0:	f040 80a3 	bne.w	40da1a <_svfprintf_r+0x116e>
  40d8d4:	9b06      	ldr	r3, [sp, #24]
  40d8d6:	f04f 0a47 	mov.w	sl, #71	; 0x47
  40d8da:	f04f 0c01 	mov.w	ip, #1
  40d8de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40d8e2:	930e      	str	r3, [sp, #56]	; 0x38
  40d8e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d8e6:	2b00      	cmp	r3, #0
  40d8e8:	f2c0 81ff 	blt.w	40dcea <_svfprintf_r+0x143e>
  40d8ec:	461d      	mov	r5, r3
  40d8ee:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40d8f0:	2300      	movs	r3, #0
  40d8f2:	930d      	str	r3, [sp, #52]	; 0x34
  40d8f4:	2002      	movs	r0, #2
  40d8f6:	a91d      	add	r1, sp, #116	; 0x74
  40d8f8:	f8cd c004 	str.w	ip, [sp, #4]
  40d8fc:	463a      	mov	r2, r7
  40d8fe:	9000      	str	r0, [sp, #0]
  40d900:	a81e      	add	r0, sp, #120	; 0x78
  40d902:	9102      	str	r1, [sp, #8]
  40d904:	a921      	add	r1, sp, #132	; 0x84
  40d906:	9003      	str	r0, [sp, #12]
  40d908:	462b      	mov	r3, r5
  40d90a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d90c:	9104      	str	r1, [sp, #16]
  40d90e:	f8cd c01c 	str.w	ip, [sp, #28]
  40d912:	f001 f9e5 	bl	40ece0 <_dtoa_r>
  40d916:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40d91a:	900f      	str	r0, [sp, #60]	; 0x3c
  40d91c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d920:	f040 8242 	bne.w	40dda8 <_svfprintf_r+0x14fc>
  40d924:	9b06      	ldr	r3, [sp, #24]
  40d926:	07db      	lsls	r3, r3, #31
  40d928:	f140 81f3 	bpl.w	40dd12 <_svfprintf_r+0x1466>
  40d92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d92e:	eb03 040c 	add.w	r4, r3, ip
  40d932:	4638      	mov	r0, r7
  40d934:	2200      	movs	r2, #0
  40d936:	2300      	movs	r3, #0
  40d938:	4629      	mov	r1, r5
  40d93a:	f8cd c01c 	str.w	ip, [sp, #28]
  40d93e:	f7fd f84b 	bl	40a9d8 <__aeabi_dcmpeq>
  40d942:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40d946:	2800      	cmp	r0, #0
  40d948:	f040 8172 	bne.w	40dc30 <_svfprintf_r+0x1384>
  40d94c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d94e:	429c      	cmp	r4, r3
  40d950:	d906      	bls.n	40d960 <_svfprintf_r+0x10b4>
  40d952:	2130      	movs	r1, #48	; 0x30
  40d954:	1c5a      	adds	r2, r3, #1
  40d956:	9221      	str	r2, [sp, #132]	; 0x84
  40d958:	7019      	strb	r1, [r3, #0]
  40d95a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40d95c:	429c      	cmp	r4, r3
  40d95e:	d8f9      	bhi.n	40d954 <_svfprintf_r+0x10a8>
  40d960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d962:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40d966:	eba3 0302 	sub.w	r3, r3, r2
  40d96a:	9312      	str	r3, [sp, #72]	; 0x48
  40d96c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40d96e:	f040 8113 	bne.w	40db98 <_svfprintf_r+0x12ec>
  40d972:	459c      	cmp	ip, r3
  40d974:	f2c0 8168 	blt.w	40dc48 <_svfprintf_r+0x139c>
  40d978:	1cd9      	adds	r1, r3, #3
  40d97a:	f2c0 8165 	blt.w	40dc48 <_svfprintf_r+0x139c>
  40d97e:	2667      	movs	r6, #103	; 0x67
  40d980:	9311      	str	r3, [sp, #68]	; 0x44
  40d982:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d984:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d986:	4293      	cmp	r3, r2
  40d988:	f300 81b6 	bgt.w	40dcf8 <_svfprintf_r+0x144c>
  40d98c:	9b06      	ldr	r3, [sp, #24]
  40d98e:	07df      	lsls	r7, r3, #31
  40d990:	f100 81c1 	bmi.w	40dd16 <_svfprintf_r+0x146a>
  40d994:	4614      	mov	r4, r2
  40d996:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  40d99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d99c:	2b00      	cmp	r3, #0
  40d99e:	f040 80f0 	bne.w	40db82 <_svfprintf_r+0x12d6>
  40d9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d9a4:	f8cd c01c 	str.w	ip, [sp, #28]
  40d9a8:	9306      	str	r3, [sp, #24]
  40d9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d9ac:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40d9b0:	9310      	str	r3, [sp, #64]	; 0x40
  40d9b2:	f7ff b88e 	b.w	40cad2 <_svfprintf_r+0x226>
  40d9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d9b8:	4649      	mov	r1, r9
  40d9ba:	aa23      	add	r2, sp, #140	; 0x8c
  40d9bc:	f004 f9a6 	bl	411d0c <__ssprint_r>
  40d9c0:	2800      	cmp	r0, #0
  40d9c2:	f47f a838 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40d9c6:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40d9ca:	46c3      	mov	fp, r8
  40d9cc:	f7ff bbd8 	b.w	40d180 <_svfprintf_r+0x8d4>
  40d9d0:	3304      	adds	r3, #4
  40d9d2:	6814      	ldr	r4, [r2, #0]
  40d9d4:	2500      	movs	r5, #0
  40d9d6:	930c      	str	r3, [sp, #48]	; 0x30
  40d9d8:	f7ff ba9d 	b.w	40cf16 <_svfprintf_r+0x66a>
  40d9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d9de:	2140      	movs	r1, #64	; 0x40
  40d9e0:	f7fd f94e 	bl	40ac80 <_malloc_r>
  40d9e4:	f8c9 0000 	str.w	r0, [r9]
  40d9e8:	f8c9 0010 	str.w	r0, [r9, #16]
  40d9ec:	2800      	cmp	r0, #0
  40d9ee:	f000 81d4 	beq.w	40dd9a <_svfprintf_r+0x14ee>
  40d9f2:	2340      	movs	r3, #64	; 0x40
  40d9f4:	f8c9 3014 	str.w	r3, [r9, #20]
  40d9f8:	f7fe bf70 	b.w	40c8dc <_svfprintf_r+0x30>
  40d9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
  40d9fe:	4649      	mov	r1, r9
  40da00:	aa23      	add	r2, sp, #140	; 0x8c
  40da02:	f004 f983 	bl	411d0c <__ssprint_r>
  40da06:	2800      	cmp	r0, #0
  40da08:	f47f a815 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40da0c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40da0e:	46c3      	mov	fp, r8
  40da10:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40da14:	e6fa      	b.n	40d80c <_svfprintf_r+0xf60>
  40da16:	f04f 0c06 	mov.w	ip, #6
  40da1a:	9b06      	ldr	r3, [sp, #24]
  40da1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40da20:	930e      	str	r3, [sp, #56]	; 0x38
  40da22:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40da24:	2b00      	cmp	r3, #0
  40da26:	f2c0 8160 	blt.w	40dcea <_svfprintf_r+0x143e>
  40da2a:	461d      	mov	r5, r3
  40da2c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40da2e:	2300      	movs	r3, #0
  40da30:	930d      	str	r3, [sp, #52]	; 0x34
  40da32:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40da36:	f000 80c4 	beq.w	40dbc2 <_svfprintf_r+0x1316>
  40da3a:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40da3e:	f47f af59 	bne.w	40d8f4 <_svfprintf_r+0x1048>
  40da42:	f10c 0401 	add.w	r4, ip, #1
  40da46:	f8cd c01c 	str.w	ip, [sp, #28]
  40da4a:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  40da4e:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  40da52:	a81e      	add	r0, sp, #120	; 0x78
  40da54:	2102      	movs	r1, #2
  40da56:	f8cd c010 	str.w	ip, [sp, #16]
  40da5a:	463a      	mov	r2, r7
  40da5c:	9003      	str	r0, [sp, #12]
  40da5e:	462b      	mov	r3, r5
  40da60:	9401      	str	r4, [sp, #4]
  40da62:	9100      	str	r1, [sp, #0]
  40da64:	f8cd e008 	str.w	lr, [sp, #8]
  40da68:	9809      	ldr	r0, [sp, #36]	; 0x24
  40da6a:	f001 f939 	bl	40ece0 <_dtoa_r>
  40da6e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40da72:	900f      	str	r0, [sp, #60]	; 0x3c
  40da74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40da76:	441c      	add	r4, r3
  40da78:	e75b      	b.n	40d932 <_svfprintf_r+0x1086>
  40da7a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40da7c:	4649      	mov	r1, r9
  40da7e:	aa23      	add	r2, sp, #140	; 0x8c
  40da80:	f004 f944 	bl	411d0c <__ssprint_r>
  40da84:	2800      	cmp	r0, #0
  40da86:	f47e afd6 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40da8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40da8c:	46c3      	mov	fp, r8
  40da8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40da90:	9812      	ldr	r0, [sp, #72]	; 0x48
  40da92:	3301      	adds	r3, #1
  40da94:	eb02 0c00 	add.w	ip, r2, r0
  40da98:	2b07      	cmp	r3, #7
  40da9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40da9c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40daa0:	f8cb 2000 	str.w	r2, [fp]
  40daa4:	9324      	str	r3, [sp, #144]	; 0x90
  40daa6:	f8cb 0004 	str.w	r0, [fp, #4]
  40daaa:	f77f a8e8 	ble.w	40cc7e <_svfprintf_r+0x3d2>
  40daae:	e446      	b.n	40d33e <_svfprintf_r+0xa92>
  40dab0:	9510      	str	r5, [sp, #64]	; 0x40
  40dab2:	f7fd fe33 	bl	40b71c <strlen>
  40dab6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  40daba:	970c      	str	r7, [sp, #48]	; 0x30
  40dabc:	4604      	mov	r4, r0
  40dabe:	9511      	str	r5, [sp, #68]	; 0x44
  40dac0:	9307      	str	r3, [sp, #28]
  40dac2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40dac6:	f7ff b804 	b.w	40cad2 <_svfprintf_r+0x226>
  40daca:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40dacc:	4fb7      	ldr	r7, [pc, #732]	; (40ddac <_svfprintf_r+0x1500>)
  40dace:	f7ff b84b 	b.w	40cb68 <_svfprintf_r+0x2bc>
  40dad2:	9809      	ldr	r0, [sp, #36]	; 0x24
  40dad4:	4649      	mov	r1, r9
  40dad6:	aa23      	add	r2, sp, #140	; 0x8c
  40dad8:	f004 f918 	bl	411d0c <__ssprint_r>
  40dadc:	2800      	cmp	r0, #0
  40dade:	f47e afaa 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40dae2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40dae6:	46c3      	mov	fp, r8
  40dae8:	e4a2      	b.n	40d430 <_svfprintf_r+0xb84>
  40daea:	3301      	adds	r3, #1
  40daec:	4422      	add	r2, r4
  40daee:	f8cb 5000 	str.w	r5, [fp]
  40daf2:	2b07      	cmp	r3, #7
  40daf4:	9225      	str	r2, [sp, #148]	; 0x94
  40daf6:	9324      	str	r3, [sp, #144]	; 0x90
  40daf8:	f8cb 4004 	str.w	r4, [fp, #4]
  40dafc:	dcbd      	bgt.n	40da7a <_svfprintf_r+0x11ce>
  40dafe:	f10b 0b08 	add.w	fp, fp, #8
  40db02:	e7c5      	b.n	40da90 <_svfprintf_r+0x11e4>
  40db04:	9809      	ldr	r0, [sp, #36]	; 0x24
  40db06:	4649      	mov	r1, r9
  40db08:	aa23      	add	r2, sp, #140	; 0x8c
  40db0a:	f004 f8ff 	bl	411d0c <__ssprint_r>
  40db0e:	2800      	cmp	r0, #0
  40db10:	f47e af91 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40db14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40db16:	46c3      	mov	fp, r8
  40db18:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40db1a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40db1e:	1ad3      	subs	r3, r2, r3
  40db20:	e552      	b.n	40d5c8 <_svfprintf_r+0xd1c>
  40db22:	9809      	ldr	r0, [sp, #36]	; 0x24
  40db24:	4649      	mov	r1, r9
  40db26:	aa23      	add	r2, sp, #140	; 0x8c
  40db28:	f004 f8f0 	bl	411d0c <__ssprint_r>
  40db2c:	2800      	cmp	r0, #0
  40db2e:	f47e af82 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40db32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40db34:	46c3      	mov	fp, r8
  40db36:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40db3a:	e52d      	b.n	40d598 <_svfprintf_r+0xcec>
  40db3c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40db3e:	4649      	mov	r1, r9
  40db40:	aa23      	add	r2, sp, #140	; 0x8c
  40db42:	f004 f8e3 	bl	411d0c <__ssprint_r>
  40db46:	2800      	cmp	r0, #0
  40db48:	f47e af75 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40db4c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40db50:	46c3      	mov	fp, r8
  40db52:	e516      	b.n	40d582 <_svfprintf_r+0xcd6>
  40db54:	2c06      	cmp	r4, #6
  40db56:	970c      	str	r7, [sp, #48]	; 0x30
  40db58:	9310      	str	r3, [sp, #64]	; 0x40
  40db5a:	461f      	mov	r7, r3
  40db5c:	bf28      	it	cs
  40db5e:	2406      	movcs	r4, #6
  40db60:	9711      	str	r7, [sp, #68]	; 0x44
  40db62:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40db66:	9307      	str	r3, [sp, #28]
  40db68:	4b91      	ldr	r3, [pc, #580]	; (40ddb0 <_svfprintf_r+0x1504>)
  40db6a:	930f      	str	r3, [sp, #60]	; 0x3c
  40db6c:	f7fe bfb1 	b.w	40cad2 <_svfprintf_r+0x226>
  40db70:	4f8e      	ldr	r7, [pc, #568]	; (40ddac <_svfprintf_r+0x1500>)
  40db72:	f7ff b8b5 	b.w	40cce0 <_svfprintf_r+0x434>
  40db76:	232d      	movs	r3, #45	; 0x2d
  40db78:	461f      	mov	r7, r3
  40db7a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40db7e:	f7ff ba7a 	b.w	40d076 <_svfprintf_r+0x7ca>
  40db82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40db84:	272d      	movs	r7, #45	; 0x2d
  40db86:	f8cd c01c 	str.w	ip, [sp, #28]
  40db8a:	9306      	str	r3, [sp, #24]
  40db8c:	2300      	movs	r3, #0
  40db8e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40db92:	9310      	str	r3, [sp, #64]	; 0x40
  40db94:	f7fe bf9e 	b.w	40cad4 <_svfprintf_r+0x228>
  40db98:	2e65      	cmp	r6, #101	; 0x65
  40db9a:	dd56      	ble.n	40dc4a <_svfprintf_r+0x139e>
  40db9c:	2e66      	cmp	r6, #102	; 0x66
  40db9e:	9311      	str	r3, [sp, #68]	; 0x44
  40dba0:	f47f aeef 	bne.w	40d982 <_svfprintf_r+0x10d6>
  40dba4:	2b00      	cmp	r3, #0
  40dba6:	f340 80d6 	ble.w	40dd56 <_svfprintf_r+0x14aa>
  40dbaa:	f1bc 0f00 	cmp.w	ip, #0
  40dbae:	f040 80c1 	bne.w	40dd34 <_svfprintf_r+0x1488>
  40dbb2:	9b06      	ldr	r3, [sp, #24]
  40dbb4:	07da      	lsls	r2, r3, #31
  40dbb6:	f100 80bd 	bmi.w	40dd34 <_svfprintf_r+0x1488>
  40dbba:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40dbbc:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dbc0:	e6eb      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dbc2:	2003      	movs	r0, #3
  40dbc4:	a91d      	add	r1, sp, #116	; 0x74
  40dbc6:	463a      	mov	r2, r7
  40dbc8:	f8cd c004 	str.w	ip, [sp, #4]
  40dbcc:	9000      	str	r0, [sp, #0]
  40dbce:	a81e      	add	r0, sp, #120	; 0x78
  40dbd0:	9102      	str	r1, [sp, #8]
  40dbd2:	a921      	add	r1, sp, #132	; 0x84
  40dbd4:	462b      	mov	r3, r5
  40dbd6:	9003      	str	r0, [sp, #12]
  40dbd8:	9104      	str	r1, [sp, #16]
  40dbda:	9809      	ldr	r0, [sp, #36]	; 0x24
  40dbdc:	f8cd c01c 	str.w	ip, [sp, #28]
  40dbe0:	f001 f87e 	bl	40ece0 <_dtoa_r>
  40dbe4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40dbe8:	4602      	mov	r2, r0
  40dbea:	7803      	ldrb	r3, [r0, #0]
  40dbec:	4462      	add	r2, ip
  40dbee:	900f      	str	r0, [sp, #60]	; 0x3c
  40dbf0:	2b30      	cmp	r3, #48	; 0x30
  40dbf2:	9207      	str	r2, [sp, #28]
  40dbf4:	f040 808b 	bne.w	40dd0e <_svfprintf_r+0x1462>
  40dbf8:	4638      	mov	r0, r7
  40dbfa:	2200      	movs	r2, #0
  40dbfc:	2300      	movs	r3, #0
  40dbfe:	4629      	mov	r1, r5
  40dc00:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40dc04:	f04f 0401 	mov.w	r4, #1
  40dc08:	f7fc fee6 	bl	40a9d8 <__aeabi_dcmpeq>
  40dc0c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40dc10:	b108      	cbz	r0, 40dc16 <_svfprintf_r+0x136a>
  40dc12:	f04f 0400 	mov.w	r4, #0
  40dc16:	f014 0fff 	tst.w	r4, #255	; 0xff
  40dc1a:	d078      	beq.n	40dd0e <_svfprintf_r+0x1462>
  40dc1c:	f1cc 0401 	rsb	r4, ip, #1
  40dc20:	941d      	str	r4, [sp, #116]	; 0x74
  40dc22:	9b07      	ldr	r3, [sp, #28]
  40dc24:	4423      	add	r3, r4
  40dc26:	461c      	mov	r4, r3
  40dc28:	e683      	b.n	40d932 <_svfprintf_r+0x1086>
  40dc2a:	4d62      	ldr	r5, [pc, #392]	; (40ddb4 <_svfprintf_r+0x1508>)
  40dc2c:	f7ff bb2a 	b.w	40d284 <_svfprintf_r+0x9d8>
  40dc30:	4623      	mov	r3, r4
  40dc32:	e695      	b.n	40d960 <_svfprintf_r+0x10b4>
  40dc34:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  40dc38:	970c      	str	r7, [sp, #48]	; 0x30
  40dc3a:	9010      	str	r0, [sp, #64]	; 0x40
  40dc3c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40dc40:	9307      	str	r3, [sp, #28]
  40dc42:	9011      	str	r0, [sp, #68]	; 0x44
  40dc44:	f7fe bf45 	b.w	40cad2 <_svfprintf_r+0x226>
  40dc48:	3e02      	subs	r6, #2
  40dc4a:	3b01      	subs	r3, #1
  40dc4c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  40dc50:	2b00      	cmp	r3, #0
  40dc52:	931d      	str	r3, [sp, #116]	; 0x74
  40dc54:	db75      	blt.n	40dd42 <_svfprintf_r+0x1496>
  40dc56:	222b      	movs	r2, #43	; 0x2b
  40dc58:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40dc5c:	2b09      	cmp	r3, #9
  40dc5e:	dd61      	ble.n	40dd24 <_svfprintf_r+0x1478>
  40dc60:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  40dc64:	4601      	mov	r1, r0
  40dc66:	4a54      	ldr	r2, [pc, #336]	; (40ddb8 <_svfprintf_r+0x150c>)
  40dc68:	fb82 2403 	smull	r2, r4, r2, r3
  40dc6c:	17da      	asrs	r2, r3, #31
  40dc6e:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  40dc72:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40dc76:	2c09      	cmp	r4, #9
  40dc78:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40dc7c:	4623      	mov	r3, r4
  40dc7e:	f102 0230 	add.w	r2, r2, #48	; 0x30
  40dc82:	f801 2d01 	strb.w	r2, [r1, #-1]!
  40dc86:	dcee      	bgt.n	40dc66 <_svfprintf_r+0x13ba>
  40dc88:	3330      	adds	r3, #48	; 0x30
  40dc8a:	460a      	mov	r2, r1
  40dc8c:	b2db      	uxtb	r3, r3
  40dc8e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40dc92:	4290      	cmp	r0, r2
  40dc94:	d97e      	bls.n	40dd94 <_svfprintf_r+0x14e8>
  40dc96:	460a      	mov	r2, r1
  40dc98:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  40dc9c:	e001      	b.n	40dca2 <_svfprintf_r+0x13f6>
  40dc9e:	f812 3b01 	ldrb.w	r3, [r2], #1
  40dca2:	4282      	cmp	r2, r0
  40dca4:	f804 3b01 	strb.w	r3, [r4], #1
  40dca8:	d1f9      	bne.n	40dc9e <_svfprintf_r+0x13f2>
  40dcaa:	ab23      	add	r3, sp, #140	; 0x8c
  40dcac:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40dcb0:	1a5b      	subs	r3, r3, r1
  40dcb2:	4413      	add	r3, r2
  40dcb4:	aa1f      	add	r2, sp, #124	; 0x7c
  40dcb6:	1a9b      	subs	r3, r3, r2
  40dcb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40dcba:	2a01      	cmp	r2, #1
  40dcbc:	9319      	str	r3, [sp, #100]	; 0x64
  40dcbe:	eb02 0403 	add.w	r4, r2, r3
  40dcc2:	dd43      	ble.n	40dd4c <_svfprintf_r+0x14a0>
  40dcc4:	3401      	adds	r4, #1
  40dcc6:	2300      	movs	r3, #0
  40dcc8:	9311      	str	r3, [sp, #68]	; 0x44
  40dcca:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dcce:	e664      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dcd0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40dcd2:	4649      	mov	r1, r9
  40dcd4:	aa23      	add	r2, sp, #140	; 0x8c
  40dcd6:	f004 f819 	bl	411d0c <__ssprint_r>
  40dcda:	2800      	cmp	r0, #0
  40dcdc:	f47e aeab 	bne.w	40ca36 <_svfprintf_r+0x18a>
  40dce0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40dce2:	46c3      	mov	fp, r8
  40dce4:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40dce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40dce8:	e5a8      	b.n	40d83c <_svfprintf_r+0xf90>
  40dcea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40dcec:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40dcee:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  40dcf2:	232d      	movs	r3, #45	; 0x2d
  40dcf4:	930d      	str	r3, [sp, #52]	; 0x34
  40dcf6:	e69c      	b.n	40da32 <_svfprintf_r+0x1186>
  40dcf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dcfa:	2b00      	cmp	r3, #0
  40dcfc:	dd35      	ble.n	40dd6a <_svfprintf_r+0x14be>
  40dcfe:	2401      	movs	r4, #1
  40dd00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40dd02:	441c      	add	r4, r3
  40dd04:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dd08:	e647      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dd0a:	4d2a      	ldr	r5, [pc, #168]	; (40ddb4 <_svfprintf_r+0x1508>)
  40dd0c:	e413      	b.n	40d536 <_svfprintf_r+0xc8a>
  40dd0e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40dd10:	e787      	b.n	40dc22 <_svfprintf_r+0x1376>
  40dd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40dd14:	e624      	b.n	40d960 <_svfprintf_r+0x10b4>
  40dd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dd18:	1c5c      	adds	r4, r3, #1
  40dd1a:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dd1e:	e63c      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dd20:	4d24      	ldr	r5, [pc, #144]	; (40ddb4 <_svfprintf_r+0x1508>)
  40dd22:	e420      	b.n	40d566 <_svfprintf_r+0xcba>
  40dd24:	3330      	adds	r3, #48	; 0x30
  40dd26:	2230      	movs	r2, #48	; 0x30
  40dd28:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40dd2c:	ab20      	add	r3, sp, #128	; 0x80
  40dd2e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40dd32:	e7bf      	b.n	40dcb4 <_svfprintf_r+0x1408>
  40dd34:	f10c 0401 	add.w	r4, ip, #1
  40dd38:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40dd3a:	441c      	add	r4, r3
  40dd3c:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dd40:	e62b      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dd42:	222d      	movs	r2, #45	; 0x2d
  40dd44:	425b      	negs	r3, r3
  40dd46:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40dd4a:	e787      	b.n	40dc5c <_svfprintf_r+0x13b0>
  40dd4c:	9b06      	ldr	r3, [sp, #24]
  40dd4e:	f013 0301 	ands.w	r3, r3, #1
  40dd52:	d0b9      	beq.n	40dcc8 <_svfprintf_r+0x141c>
  40dd54:	e7b6      	b.n	40dcc4 <_svfprintf_r+0x1418>
  40dd56:	f1bc 0f00 	cmp.w	ip, #0
  40dd5a:	d109      	bne.n	40dd70 <_svfprintf_r+0x14c4>
  40dd5c:	9b06      	ldr	r3, [sp, #24]
  40dd5e:	07db      	lsls	r3, r3, #31
  40dd60:	d406      	bmi.n	40dd70 <_svfprintf_r+0x14c4>
  40dd62:	f04f 0c01 	mov.w	ip, #1
  40dd66:	4664      	mov	r4, ip
  40dd68:	e617      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dd6a:	f1c3 0402 	rsb	r4, r3, #2
  40dd6e:	e7c7      	b.n	40dd00 <_svfprintf_r+0x1454>
  40dd70:	f10c 0402 	add.w	r4, ip, #2
  40dd74:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  40dd78:	e60f      	b.n	40d99a <_svfprintf_r+0x10ee>
  40dd7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40dd7c:	785e      	ldrb	r6, [r3, #1]
  40dd7e:	4628      	mov	r0, r5
  40dd80:	682c      	ldr	r4, [r5, #0]
  40dd82:	3004      	adds	r0, #4
  40dd84:	2c00      	cmp	r4, #0
  40dd86:	900c      	str	r0, [sp, #48]	; 0x30
  40dd88:	f6be ade5 	bge.w	40c956 <_svfprintf_r+0xaa>
  40dd8c:	f04f 34ff 	mov.w	r4, #4294967295
  40dd90:	f7fe bde1 	b.w	40c956 <_svfprintf_r+0xaa>
  40dd94:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40dd98:	e78c      	b.n	40dcb4 <_svfprintf_r+0x1408>
  40dd9a:	230c      	movs	r3, #12
  40dd9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dd9e:	f04f 30ff 	mov.w	r0, #4294967295
  40dda2:	6013      	str	r3, [r2, #0]
  40dda4:	f7fe be50 	b.w	40ca48 <_svfprintf_r+0x19c>
  40dda8:	4664      	mov	r4, ip
  40ddaa:	e663      	b.n	40da74 <_svfprintf_r+0x11c8>
  40ddac:	004135d8 	.word	0x004135d8
  40ddb0:	00413620 	.word	0x00413620
  40ddb4:	004135c8 	.word	0x004135c8
  40ddb8:	66666667 	.word	0x66666667

0040ddbc <__sprint_r.part.0>:
  40ddbc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40ddbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ddc2:	049c      	lsls	r4, r3, #18
  40ddc4:	460f      	mov	r7, r1
  40ddc6:	4692      	mov	sl, r2
  40ddc8:	d52a      	bpl.n	40de20 <__sprint_r.part.0+0x64>
  40ddca:	6893      	ldr	r3, [r2, #8]
  40ddcc:	6812      	ldr	r2, [r2, #0]
  40ddce:	b32b      	cbz	r3, 40de1c <__sprint_r.part.0+0x60>
  40ddd0:	4680      	mov	r8, r0
  40ddd2:	f102 0908 	add.w	r9, r2, #8
  40ddd6:	e919 0060 	ldmdb	r9, {r5, r6}
  40ddda:	08b6      	lsrs	r6, r6, #2
  40dddc:	d016      	beq.n	40de0c <__sprint_r.part.0+0x50>
  40ddde:	3d04      	subs	r5, #4
  40dde0:	2400      	movs	r4, #0
  40dde2:	e001      	b.n	40dde8 <__sprint_r.part.0+0x2c>
  40dde4:	42a6      	cmp	r6, r4
  40dde6:	d00f      	beq.n	40de08 <__sprint_r.part.0+0x4c>
  40dde8:	4640      	mov	r0, r8
  40ddea:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40ddee:	463a      	mov	r2, r7
  40ddf0:	3401      	adds	r4, #1
  40ddf2:	f002 f89f 	bl	40ff34 <_fputwc_r>
  40ddf6:	1c43      	adds	r3, r0, #1
  40ddf8:	d1f4      	bne.n	40dde4 <__sprint_r.part.0+0x28>
  40ddfa:	2300      	movs	r3, #0
  40ddfc:	f8ca 3008 	str.w	r3, [sl, #8]
  40de00:	f8ca 3004 	str.w	r3, [sl, #4]
  40de04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de08:	f8da 3008 	ldr.w	r3, [sl, #8]
  40de0c:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40de10:	f109 0908 	add.w	r9, r9, #8
  40de14:	f8ca 3008 	str.w	r3, [sl, #8]
  40de18:	2b00      	cmp	r3, #0
  40de1a:	d1dc      	bne.n	40ddd6 <__sprint_r.part.0+0x1a>
  40de1c:	2000      	movs	r0, #0
  40de1e:	e7ec      	b.n	40ddfa <__sprint_r.part.0+0x3e>
  40de20:	f002 f9c0 	bl	4101a4 <__sfvwrite_r>
  40de24:	2300      	movs	r3, #0
  40de26:	f8ca 3008 	str.w	r3, [sl, #8]
  40de2a:	f8ca 3004 	str.w	r3, [sl, #4]
  40de2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40de32:	bf00      	nop

0040de34 <_vfiprintf_r>:
  40de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40de38:	461c      	mov	r4, r3
  40de3a:	b0ad      	sub	sp, #180	; 0xb4
  40de3c:	4692      	mov	sl, r2
  40de3e:	9101      	str	r1, [sp, #4]
  40de40:	9002      	str	r0, [sp, #8]
  40de42:	9406      	str	r4, [sp, #24]
  40de44:	b118      	cbz	r0, 40de4e <_vfiprintf_r+0x1a>
  40de46:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40de48:	2b00      	cmp	r3, #0
  40de4a:	f000 80de 	beq.w	40e00a <_vfiprintf_r+0x1d6>
  40de4e:	9b01      	ldr	r3, [sp, #4]
  40de50:	8999      	ldrh	r1, [r3, #12]
  40de52:	b28a      	uxth	r2, r1
  40de54:	0490      	lsls	r0, r2, #18
  40de56:	d408      	bmi.n	40de6a <_vfiprintf_r+0x36>
  40de58:	461d      	mov	r5, r3
  40de5a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40de5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  40de60:	b28a      	uxth	r2, r1
  40de62:	81a9      	strh	r1, [r5, #12]
  40de64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40de68:	666b      	str	r3, [r5, #100]	; 0x64
  40de6a:	0711      	lsls	r1, r2, #28
  40de6c:	f140 80ad 	bpl.w	40dfca <_vfiprintf_r+0x196>
  40de70:	9b01      	ldr	r3, [sp, #4]
  40de72:	691b      	ldr	r3, [r3, #16]
  40de74:	2b00      	cmp	r3, #0
  40de76:	f000 80a8 	beq.w	40dfca <_vfiprintf_r+0x196>
  40de7a:	f002 021a 	and.w	r2, r2, #26
  40de7e:	2a0a      	cmp	r2, #10
  40de80:	f000 80af 	beq.w	40dfe2 <_vfiprintf_r+0x1ae>
  40de84:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
  40de88:	2300      	movs	r3, #0
  40de8a:	465c      	mov	r4, fp
  40de8c:	930a      	str	r3, [sp, #40]	; 0x28
  40de8e:	9311      	str	r3, [sp, #68]	; 0x44
  40de90:	9303      	str	r3, [sp, #12]
  40de92:	9310      	str	r3, [sp, #64]	; 0x40
  40de94:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40de98:	f89a 3000 	ldrb.w	r3, [sl]
  40de9c:	4655      	mov	r5, sl
  40de9e:	2b25      	cmp	r3, #37	; 0x25
  40dea0:	d01c      	beq.n	40dedc <_vfiprintf_r+0xa8>
  40dea2:	b90b      	cbnz	r3, 40dea8 <_vfiprintf_r+0x74>
  40dea4:	e01a      	b.n	40dedc <_vfiprintf_r+0xa8>
  40dea6:	b11b      	cbz	r3, 40deb0 <_vfiprintf_r+0x7c>
  40dea8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  40deac:	2b25      	cmp	r3, #37	; 0x25
  40deae:	d1fa      	bne.n	40dea6 <_vfiprintf_r+0x72>
  40deb0:	ebb5 060a 	subs.w	r6, r5, sl
  40deb4:	d012      	beq.n	40dedc <_vfiprintf_r+0xa8>
  40deb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40deb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40deba:	3301      	adds	r3, #1
  40debc:	f8c4 a000 	str.w	sl, [r4]
  40dec0:	4432      	add	r2, r6
  40dec2:	6066      	str	r6, [r4, #4]
  40dec4:	2b07      	cmp	r3, #7
  40dec6:	9310      	str	r3, [sp, #64]	; 0x40
  40dec8:	9211      	str	r2, [sp, #68]	; 0x44
  40deca:	dd79      	ble.n	40dfc0 <_vfiprintf_r+0x18c>
  40decc:	2a00      	cmp	r2, #0
  40dece:	f040 84a5 	bne.w	40e81c <_vfiprintf_r+0x9e8>
  40ded2:	9b03      	ldr	r3, [sp, #12]
  40ded4:	465c      	mov	r4, fp
  40ded6:	9210      	str	r2, [sp, #64]	; 0x40
  40ded8:	4433      	add	r3, r6
  40deda:	9303      	str	r3, [sp, #12]
  40dedc:	782b      	ldrb	r3, [r5, #0]
  40dede:	2b00      	cmp	r3, #0
  40dee0:	f000 833a 	beq.w	40e558 <_vfiprintf_r+0x724>
  40dee4:	2100      	movs	r1, #0
  40dee6:	f04f 0300 	mov.w	r3, #0
  40deea:	f04f 38ff 	mov.w	r8, #4294967295
  40deee:	1c68      	adds	r0, r5, #1
  40def0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40def4:	4689      	mov	r9, r1
  40def6:	786b      	ldrb	r3, [r5, #1]
  40def8:	4646      	mov	r6, r8
  40defa:	460d      	mov	r5, r1
  40defc:	f100 0a01 	add.w	sl, r0, #1
  40df00:	f1a3 0220 	sub.w	r2, r3, #32
  40df04:	2a58      	cmp	r2, #88	; 0x58
  40df06:	f200 8301 	bhi.w	40e50c <_vfiprintf_r+0x6d8>
  40df0a:	e8df f012 	tbh	[pc, r2, lsl #1]
  40df0e:	0247      	.short	0x0247
  40df10:	02ff02ff 	.word	0x02ff02ff
  40df14:	02ff0255 	.word	0x02ff0255
  40df18:	02ff02ff 	.word	0x02ff02ff
  40df1c:	02ff02ff 	.word	0x02ff02ff
  40df20:	025b02ff 	.word	0x025b02ff
  40df24:	02ff0268 	.word	0x02ff0268
  40df28:	01ba0181 	.word	0x01ba0181
  40df2c:	028702ff 	.word	0x028702ff
  40df30:	028d028d 	.word	0x028d028d
  40df34:	028d028d 	.word	0x028d028d
  40df38:	028d028d 	.word	0x028d028d
  40df3c:	028d028d 	.word	0x028d028d
  40df40:	02ff028d 	.word	0x02ff028d
  40df44:	02ff02ff 	.word	0x02ff02ff
  40df48:	02ff02ff 	.word	0x02ff02ff
  40df4c:	02ff02ff 	.word	0x02ff02ff
  40df50:	02ff02ff 	.word	0x02ff02ff
  40df54:	029b02ff 	.word	0x029b02ff
  40df58:	02ff02ff 	.word	0x02ff02ff
  40df5c:	02ff02ff 	.word	0x02ff02ff
  40df60:	02ff02ff 	.word	0x02ff02ff
  40df64:	02ff02ff 	.word	0x02ff02ff
  40df68:	02ff02ff 	.word	0x02ff02ff
  40df6c:	02ff02b6 	.word	0x02ff02b6
  40df70:	02ff02ff 	.word	0x02ff02ff
  40df74:	02ff02ff 	.word	0x02ff02ff
  40df78:	02ff02ce 	.word	0x02ff02ce
  40df7c:	02e602ff 	.word	0x02e602ff
  40df80:	02ff02ff 	.word	0x02ff02ff
  40df84:	02ff02ff 	.word	0x02ff02ff
  40df88:	02ff02ff 	.word	0x02ff02ff
  40df8c:	02ff02ff 	.word	0x02ff02ff
  40df90:	02ff02ff 	.word	0x02ff02ff
  40df94:	022b0219 	.word	0x022b0219
  40df98:	02ff02ff 	.word	0x02ff02ff
  40df9c:	021302ff 	.word	0x021302ff
  40dfa0:	02ff022b 	.word	0x02ff022b
  40dfa4:	01f902ff 	.word	0x01f902ff
  40dfa8:	020202ff 	.word	0x020202ff
  40dfac:	026d0187 	.word	0x026d0187
  40dfb0:	02ff0281 	.word	0x02ff0281
  40dfb4:	02ff0198 	.word	0x02ff0198
  40dfb8:	02ff0081 	.word	0x02ff0081
  40dfbc:	01d502ff 	.word	0x01d502ff
  40dfc0:	3408      	adds	r4, #8
  40dfc2:	9b03      	ldr	r3, [sp, #12]
  40dfc4:	4433      	add	r3, r6
  40dfc6:	9303      	str	r3, [sp, #12]
  40dfc8:	e788      	b.n	40dedc <_vfiprintf_r+0xa8>
  40dfca:	9802      	ldr	r0, [sp, #8]
  40dfcc:	9901      	ldr	r1, [sp, #4]
  40dfce:	f000 fd6b 	bl	40eaa8 <__swsetup_r>
  40dfd2:	b9a8      	cbnz	r0, 40e000 <_vfiprintf_r+0x1cc>
  40dfd4:	9b01      	ldr	r3, [sp, #4]
  40dfd6:	899a      	ldrh	r2, [r3, #12]
  40dfd8:	f002 021a 	and.w	r2, r2, #26
  40dfdc:	2a0a      	cmp	r2, #10
  40dfde:	f47f af51 	bne.w	40de84 <_vfiprintf_r+0x50>
  40dfe2:	9b01      	ldr	r3, [sp, #4]
  40dfe4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40dfe8:	2b00      	cmp	r3, #0
  40dfea:	f6ff af4b 	blt.w	40de84 <_vfiprintf_r+0x50>
  40dfee:	9901      	ldr	r1, [sp, #4]
  40dff0:	4652      	mov	r2, sl
  40dff2:	4623      	mov	r3, r4
  40dff4:	9802      	ldr	r0, [sp, #8]
  40dff6:	f000 fd17 	bl	40ea28 <__sbprintf>
  40dffa:	b02d      	add	sp, #180	; 0xb4
  40dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e000:	f04f 30ff 	mov.w	r0, #4294967295
  40e004:	b02d      	add	sp, #180	; 0xb4
  40e006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e00a:	f001 ff1b 	bl	40fe44 <__sinit>
  40e00e:	e71e      	b.n	40de4e <_vfiprintf_r+0x1a>
  40e010:	f019 0f20 	tst.w	r9, #32
  40e014:	9505      	str	r5, [sp, #20]
  40e016:	46b0      	mov	r8, r6
  40e018:	9a06      	ldr	r2, [sp, #24]
  40e01a:	f000 824f 	beq.w	40e4bc <_vfiprintf_r+0x688>
  40e01e:	3207      	adds	r2, #7
  40e020:	2301      	movs	r3, #1
  40e022:	f022 0207 	bic.w	r2, r2, #7
  40e026:	f102 0108 	add.w	r1, r2, #8
  40e02a:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e02e:	9106      	str	r1, [sp, #24]
  40e030:	f04f 0200 	mov.w	r2, #0
  40e034:	2500      	movs	r5, #0
  40e036:	f8cd 8010 	str.w	r8, [sp, #16]
  40e03a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e03e:	f1b8 0f00 	cmp.w	r8, #0
  40e042:	db01      	blt.n	40e048 <_vfiprintf_r+0x214>
  40e044:	f029 0980 	bic.w	r9, r9, #128	; 0x80
  40e048:	f1b8 0f00 	cmp.w	r8, #0
  40e04c:	f040 8294 	bne.w	40e578 <_vfiprintf_r+0x744>
  40e050:	ea56 0207 	orrs.w	r2, r6, r7
  40e054:	bf14      	ite	ne
  40e056:	2201      	movne	r2, #1
  40e058:	2200      	moveq	r2, #0
  40e05a:	2a00      	cmp	r2, #0
  40e05c:	f040 828c 	bne.w	40e578 <_vfiprintf_r+0x744>
  40e060:	2b00      	cmp	r3, #0
  40e062:	f040 8372 	bne.w	40e74a <_vfiprintf_r+0x916>
  40e066:	f019 0f01 	tst.w	r9, #1
  40e06a:	f000 83a3 	beq.w	40e7b4 <_vfiprintf_r+0x980>
  40e06e:	ab2c      	add	r3, sp, #176	; 0xb0
  40e070:	2230      	movs	r2, #48	; 0x30
  40e072:	f803 2d41 	strb.w	r2, [r3, #-65]!
  40e076:	ebc3 080b 	rsb	r8, r3, fp
  40e07a:	9308      	str	r3, [sp, #32]
  40e07c:	9b04      	ldr	r3, [sp, #16]
  40e07e:	4543      	cmp	r3, r8
  40e080:	bfb8      	it	lt
  40e082:	4643      	movlt	r3, r8
  40e084:	461f      	mov	r7, r3
  40e086:	b105      	cbz	r5, 40e08a <_vfiprintf_r+0x256>
  40e088:	3701      	adds	r7, #1
  40e08a:	f019 0c02 	ands.w	ip, r9, #2
  40e08e:	d000      	beq.n	40e092 <_vfiprintf_r+0x25e>
  40e090:	3702      	adds	r7, #2
  40e092:	f019 0384 	ands.w	r3, r9, #132	; 0x84
  40e096:	9307      	str	r3, [sp, #28]
  40e098:	f040 8247 	bne.w	40e52a <_vfiprintf_r+0x6f6>
  40e09c:	9b05      	ldr	r3, [sp, #20]
  40e09e:	1bdd      	subs	r5, r3, r7
  40e0a0:	2d00      	cmp	r5, #0
  40e0a2:	f340 8242 	ble.w	40e52a <_vfiprintf_r+0x6f6>
  40e0a6:	2d10      	cmp	r5, #16
  40e0a8:	f340 848b 	ble.w	40e9c2 <_vfiprintf_r+0xb8e>
  40e0ac:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  40e0b0:	2310      	movs	r3, #16
  40e0b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e0b4:	4ebd      	ldr	r6, [pc, #756]	; (40e3ac <_vfiprintf_r+0x578>)
  40e0b6:	4671      	mov	r1, lr
  40e0b8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40e0bc:	e006      	b.n	40e0cc <_vfiprintf_r+0x298>
  40e0be:	4611      	mov	r1, r2
  40e0c0:	f04f 0e01 	mov.w	lr, #1
  40e0c4:	465c      	mov	r4, fp
  40e0c6:	3d10      	subs	r5, #16
  40e0c8:	2d10      	cmp	r5, #16
  40e0ca:	dd20      	ble.n	40e10e <_vfiprintf_r+0x2da>
  40e0cc:	1c48      	adds	r0, r1, #1
  40e0ce:	3210      	adds	r2, #16
  40e0d0:	6026      	str	r6, [r4, #0]
  40e0d2:	f101 0e02 	add.w	lr, r1, #2
  40e0d6:	2807      	cmp	r0, #7
  40e0d8:	6063      	str	r3, [r4, #4]
  40e0da:	9211      	str	r2, [sp, #68]	; 0x44
  40e0dc:	4601      	mov	r1, r0
  40e0de:	f104 0408 	add.w	r4, r4, #8
  40e0e2:	9010      	str	r0, [sp, #64]	; 0x40
  40e0e4:	ddef      	ble.n	40e0c6 <_vfiprintf_r+0x292>
  40e0e6:	2a00      	cmp	r2, #0
  40e0e8:	d0e9      	beq.n	40e0be <_vfiprintf_r+0x28a>
  40e0ea:	9802      	ldr	r0, [sp, #8]
  40e0ec:	aa0f      	add	r2, sp, #60	; 0x3c
  40e0ee:	9901      	ldr	r1, [sp, #4]
  40e0f0:	465c      	mov	r4, fp
  40e0f2:	9309      	str	r3, [sp, #36]	; 0x24
  40e0f4:	f7ff fe62 	bl	40ddbc <__sprint_r.part.0>
  40e0f8:	2800      	cmp	r0, #0
  40e0fa:	f040 8234 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e0fe:	3d10      	subs	r5, #16
  40e100:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e102:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e104:	2d10      	cmp	r5, #16
  40e106:	f101 0e01 	add.w	lr, r1, #1
  40e10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40e10c:	dcde      	bgt.n	40e0cc <_vfiprintf_r+0x298>
  40e10e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  40e112:	4671      	mov	r1, lr
  40e114:	442a      	add	r2, r5
  40e116:	2907      	cmp	r1, #7
  40e118:	6026      	str	r6, [r4, #0]
  40e11a:	6065      	str	r5, [r4, #4]
  40e11c:	9211      	str	r2, [sp, #68]	; 0x44
  40e11e:	9110      	str	r1, [sp, #64]	; 0x40
  40e120:	f300 8330 	bgt.w	40e784 <_vfiprintf_r+0x950>
  40e124:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40e128:	3408      	adds	r4, #8
  40e12a:	1c48      	adds	r0, r1, #1
  40e12c:	2b00      	cmp	r3, #0
  40e12e:	f040 8204 	bne.w	40e53a <_vfiprintf_r+0x706>
  40e132:	f1bc 0f00 	cmp.w	ip, #0
  40e136:	d00c      	beq.n	40e152 <_vfiprintf_r+0x31e>
  40e138:	3202      	adds	r2, #2
  40e13a:	a90e      	add	r1, sp, #56	; 0x38
  40e13c:	2302      	movs	r3, #2
  40e13e:	2807      	cmp	r0, #7
  40e140:	9010      	str	r0, [sp, #64]	; 0x40
  40e142:	9211      	str	r2, [sp, #68]	; 0x44
  40e144:	e884 000a 	stmia.w	r4, {r1, r3}
  40e148:	f300 82f8 	bgt.w	40e73c <_vfiprintf_r+0x908>
  40e14c:	4601      	mov	r1, r0
  40e14e:	3408      	adds	r4, #8
  40e150:	3001      	adds	r0, #1
  40e152:	9b07      	ldr	r3, [sp, #28]
  40e154:	2b80      	cmp	r3, #128	; 0x80
  40e156:	f000 8298 	beq.w	40e68a <_vfiprintf_r+0x856>
  40e15a:	9b04      	ldr	r3, [sp, #16]
  40e15c:	ebc8 0503 	rsb	r5, r8, r3
  40e160:	2d00      	cmp	r5, #0
  40e162:	dd38      	ble.n	40e1d6 <_vfiprintf_r+0x3a2>
  40e164:	2d10      	cmp	r5, #16
  40e166:	4e92      	ldr	r6, [pc, #584]	; (40e3b0 <_vfiprintf_r+0x57c>)
  40e168:	bfc8      	it	gt
  40e16a:	2310      	movgt	r3, #16
  40e16c:	dc07      	bgt.n	40e17e <_vfiprintf_r+0x34a>
  40e16e:	e028      	b.n	40e1c2 <_vfiprintf_r+0x38e>
  40e170:	f04f 0e01 	mov.w	lr, #1
  40e174:	4611      	mov	r1, r2
  40e176:	465c      	mov	r4, fp
  40e178:	3d10      	subs	r5, #16
  40e17a:	2d10      	cmp	r5, #16
  40e17c:	dd20      	ble.n	40e1c0 <_vfiprintf_r+0x38c>
  40e17e:	1c48      	adds	r0, r1, #1
  40e180:	3210      	adds	r2, #16
  40e182:	6026      	str	r6, [r4, #0]
  40e184:	f101 0e02 	add.w	lr, r1, #2
  40e188:	2807      	cmp	r0, #7
  40e18a:	6063      	str	r3, [r4, #4]
  40e18c:	9211      	str	r2, [sp, #68]	; 0x44
  40e18e:	4601      	mov	r1, r0
  40e190:	f104 0408 	add.w	r4, r4, #8
  40e194:	9010      	str	r0, [sp, #64]	; 0x40
  40e196:	ddef      	ble.n	40e178 <_vfiprintf_r+0x344>
  40e198:	2a00      	cmp	r2, #0
  40e19a:	d0e9      	beq.n	40e170 <_vfiprintf_r+0x33c>
  40e19c:	9802      	ldr	r0, [sp, #8]
  40e19e:	aa0f      	add	r2, sp, #60	; 0x3c
  40e1a0:	9901      	ldr	r1, [sp, #4]
  40e1a2:	465c      	mov	r4, fp
  40e1a4:	9304      	str	r3, [sp, #16]
  40e1a6:	f7ff fe09 	bl	40ddbc <__sprint_r.part.0>
  40e1aa:	2800      	cmp	r0, #0
  40e1ac:	f040 81db 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e1b0:	3d10      	subs	r5, #16
  40e1b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e1b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e1b6:	2d10      	cmp	r5, #16
  40e1b8:	f101 0e01 	add.w	lr, r1, #1
  40e1bc:	9b04      	ldr	r3, [sp, #16]
  40e1be:	dcde      	bgt.n	40e17e <_vfiprintf_r+0x34a>
  40e1c0:	4670      	mov	r0, lr
  40e1c2:	442a      	add	r2, r5
  40e1c4:	2807      	cmp	r0, #7
  40e1c6:	6026      	str	r6, [r4, #0]
  40e1c8:	6065      	str	r5, [r4, #4]
  40e1ca:	9211      	str	r2, [sp, #68]	; 0x44
  40e1cc:	9010      	str	r0, [sp, #64]	; 0x40
  40e1ce:	f300 81ef 	bgt.w	40e5b0 <_vfiprintf_r+0x77c>
  40e1d2:	3408      	adds	r4, #8
  40e1d4:	3001      	adds	r0, #1
  40e1d6:	eb02 0308 	add.w	r3, r2, r8
  40e1da:	2807      	cmp	r0, #7
  40e1dc:	9a08      	ldr	r2, [sp, #32]
  40e1de:	9311      	str	r3, [sp, #68]	; 0x44
  40e1e0:	9010      	str	r0, [sp, #64]	; 0x40
  40e1e2:	e884 0104 	stmia.w	r4, {r2, r8}
  40e1e6:	f340 81f0 	ble.w	40e5ca <_vfiprintf_r+0x796>
  40e1ea:	2b00      	cmp	r3, #0
  40e1ec:	f040 82f2 	bne.w	40e7d4 <_vfiprintf_r+0x9a0>
  40e1f0:	f019 0f04 	tst.w	r9, #4
  40e1f4:	9310      	str	r3, [sp, #64]	; 0x40
  40e1f6:	f040 82d6 	bne.w	40e7a6 <_vfiprintf_r+0x972>
  40e1fa:	9b03      	ldr	r3, [sp, #12]
  40e1fc:	9a05      	ldr	r2, [sp, #20]
  40e1fe:	4297      	cmp	r7, r2
  40e200:	bfac      	ite	ge
  40e202:	19db      	addge	r3, r3, r7
  40e204:	189b      	addlt	r3, r3, r2
  40e206:	9303      	str	r3, [sp, #12]
  40e208:	2300      	movs	r3, #0
  40e20a:	465c      	mov	r4, fp
  40e20c:	9310      	str	r3, [sp, #64]	; 0x40
  40e20e:	e643      	b.n	40de98 <_vfiprintf_r+0x64>
  40e210:	4650      	mov	r0, sl
  40e212:	f049 0904 	orr.w	r9, r9, #4
  40e216:	f89a 3000 	ldrb.w	r3, [sl]
  40e21a:	e66f      	b.n	40defc <_vfiprintf_r+0xc8>
  40e21c:	f019 0320 	ands.w	r3, r9, #32
  40e220:	9505      	str	r5, [sp, #20]
  40e222:	46b0      	mov	r8, r6
  40e224:	f000 8131 	beq.w	40e48a <_vfiprintf_r+0x656>
  40e228:	9a06      	ldr	r2, [sp, #24]
  40e22a:	2300      	movs	r3, #0
  40e22c:	3207      	adds	r2, #7
  40e22e:	f022 0207 	bic.w	r2, r2, #7
  40e232:	f102 0108 	add.w	r1, r2, #8
  40e236:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e23a:	9106      	str	r1, [sp, #24]
  40e23c:	e6f8      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e23e:	9a06      	ldr	r2, [sp, #24]
  40e240:	46b0      	mov	r8, r6
  40e242:	9505      	str	r5, [sp, #20]
  40e244:	6813      	ldr	r3, [r2, #0]
  40e246:	1d16      	adds	r6, r2, #4
  40e248:	f04f 0200 	mov.w	r2, #0
  40e24c:	9308      	str	r3, [sp, #32]
  40e24e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40e252:	2b00      	cmp	r3, #0
  40e254:	f000 83bb 	beq.w	40e9ce <_vfiprintf_r+0xb9a>
  40e258:	f1b8 0f00 	cmp.w	r8, #0
  40e25c:	f2c0 8398 	blt.w	40e990 <_vfiprintf_r+0xb5c>
  40e260:	9d08      	ldr	r5, [sp, #32]
  40e262:	2100      	movs	r1, #0
  40e264:	4642      	mov	r2, r8
  40e266:	4628      	mov	r0, r5
  40e268:	f002 fd72 	bl	410d50 <memchr>
  40e26c:	2800      	cmp	r0, #0
  40e26e:	f000 83be 	beq.w	40e9ee <_vfiprintf_r+0xbba>
  40e272:	2300      	movs	r3, #0
  40e274:	ebc5 0800 	rsb	r8, r5, r0
  40e278:	9606      	str	r6, [sp, #24]
  40e27a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e27e:	9304      	str	r3, [sp, #16]
  40e280:	e6fc      	b.n	40e07c <_vfiprintf_r+0x248>
  40e282:	f89a 3000 	ldrb.w	r3, [sl]
  40e286:	f10a 0001 	add.w	r0, sl, #1
  40e28a:	2b2a      	cmp	r3, #42	; 0x2a
  40e28c:	f000 83b8 	beq.w	40ea00 <_vfiprintf_r+0xbcc>
  40e290:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e294:	4682      	mov	sl, r0
  40e296:	2600      	movs	r6, #0
  40e298:	2a09      	cmp	r2, #9
  40e29a:	f63f ae31 	bhi.w	40df00 <_vfiprintf_r+0xcc>
  40e29e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40e2a2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e2a6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  40e2aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e2ae:	2a09      	cmp	r2, #9
  40e2b0:	d9f5      	bls.n	40e29e <_vfiprintf_r+0x46a>
  40e2b2:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  40e2b6:	e623      	b.n	40df00 <_vfiprintf_r+0xcc>
  40e2b8:	4a3e      	ldr	r2, [pc, #248]	; (40e3b4 <_vfiprintf_r+0x580>)
  40e2ba:	f019 0f20 	tst.w	r9, #32
  40e2be:	9505      	str	r5, [sp, #20]
  40e2c0:	46b0      	mov	r8, r6
  40e2c2:	920a      	str	r2, [sp, #40]	; 0x28
  40e2c4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e2c8:	f000 8111 	beq.w	40e4ee <_vfiprintf_r+0x6ba>
  40e2cc:	9a06      	ldr	r2, [sp, #24]
  40e2ce:	3207      	adds	r2, #7
  40e2d0:	f022 0207 	bic.w	r2, r2, #7
  40e2d4:	f102 0108 	add.w	r1, r2, #8
  40e2d8:	e9d2 6700 	ldrd	r6, r7, [r2]
  40e2dc:	9106      	str	r1, [sp, #24]
  40e2de:	f019 0f01 	tst.w	r9, #1
  40e2e2:	f000 824d 	beq.w	40e780 <_vfiprintf_r+0x94c>
  40e2e6:	ea56 0207 	orrs.w	r2, r6, r7
  40e2ea:	f000 8249 	beq.w	40e780 <_vfiprintf_r+0x94c>
  40e2ee:	2230      	movs	r2, #48	; 0x30
  40e2f0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40e2f4:	f049 0902 	orr.w	r9, r9, #2
  40e2f8:	2302      	movs	r3, #2
  40e2fa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  40e2fe:	e697      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e300:	f89a 3000 	ldrb.w	r3, [sl]
  40e304:	2b6c      	cmp	r3, #108	; 0x6c
  40e306:	f000 8337 	beq.w	40e978 <_vfiprintf_r+0xb44>
  40e30a:	f049 0910 	orr.w	r9, r9, #16
  40e30e:	4650      	mov	r0, sl
  40e310:	e5f4      	b.n	40defc <_vfiprintf_r+0xc8>
  40e312:	f019 0f20 	tst.w	r9, #32
  40e316:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e31a:	f000 8305 	beq.w	40e928 <_vfiprintf_r+0xaf4>
  40e31e:	9903      	ldr	r1, [sp, #12]
  40e320:	9a06      	ldr	r2, [sp, #24]
  40e322:	17cf      	asrs	r7, r1, #31
  40e324:	4608      	mov	r0, r1
  40e326:	6813      	ldr	r3, [r2, #0]
  40e328:	3204      	adds	r2, #4
  40e32a:	4639      	mov	r1, r7
  40e32c:	9206      	str	r2, [sp, #24]
  40e32e:	e9c3 0100 	strd	r0, r1, [r3]
  40e332:	e5b1      	b.n	40de98 <_vfiprintf_r+0x64>
  40e334:	f049 0940 	orr.w	r9, r9, #64	; 0x40
  40e338:	f89a 3000 	ldrb.w	r3, [sl]
  40e33c:	4650      	mov	r0, sl
  40e33e:	e5dd      	b.n	40defc <_vfiprintf_r+0xc8>
  40e340:	9a06      	ldr	r2, [sp, #24]
  40e342:	2701      	movs	r7, #1
  40e344:	f04f 0100 	mov.w	r1, #0
  40e348:	9505      	str	r5, [sp, #20]
  40e34a:	6813      	ldr	r3, [r2, #0]
  40e34c:	3204      	adds	r2, #4
  40e34e:	46b8      	mov	r8, r7
  40e350:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e354:	9206      	str	r2, [sp, #24]
  40e356:	aa12      	add	r2, sp, #72	; 0x48
  40e358:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40e35c:	9208      	str	r2, [sp, #32]
  40e35e:	2300      	movs	r3, #0
  40e360:	9304      	str	r3, [sp, #16]
  40e362:	e692      	b.n	40e08a <_vfiprintf_r+0x256>
  40e364:	f019 0f20 	tst.w	r9, #32
  40e368:	9505      	str	r5, [sp, #20]
  40e36a:	46b0      	mov	r8, r6
  40e36c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e370:	d071      	beq.n	40e456 <_vfiprintf_r+0x622>
  40e372:	9906      	ldr	r1, [sp, #24]
  40e374:	3107      	adds	r1, #7
  40e376:	f021 0107 	bic.w	r1, r1, #7
  40e37a:	e9d1 2300 	ldrd	r2, r3, [r1]
  40e37e:	3108      	adds	r1, #8
  40e380:	4616      	mov	r6, r2
  40e382:	461f      	mov	r7, r3
  40e384:	9106      	str	r1, [sp, #24]
  40e386:	2a00      	cmp	r2, #0
  40e388:	f173 0300 	sbcs.w	r3, r3, #0
  40e38c:	f2c0 82b1 	blt.w	40e8f2 <_vfiprintf_r+0xabe>
  40e390:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e394:	2301      	movs	r3, #1
  40e396:	f8cd 8010 	str.w	r8, [sp, #16]
  40e39a:	e650      	b.n	40e03e <_vfiprintf_r+0x20a>
  40e39c:	f89a 3000 	ldrb.w	r3, [sl]
  40e3a0:	4650      	mov	r0, sl
  40e3a2:	2900      	cmp	r1, #0
  40e3a4:	f47f adaa 	bne.w	40defc <_vfiprintf_r+0xc8>
  40e3a8:	2120      	movs	r1, #32
  40e3aa:	e5a7      	b.n	40defc <_vfiprintf_r+0xc8>
  40e3ac:	0041363c 	.word	0x0041363c
  40e3b0:	0041362c 	.word	0x0041362c
  40e3b4:	0041360c 	.word	0x0041360c
  40e3b8:	f049 0901 	orr.w	r9, r9, #1
  40e3bc:	f89a 3000 	ldrb.w	r3, [sl]
  40e3c0:	4650      	mov	r0, sl
  40e3c2:	e59b      	b.n	40defc <_vfiprintf_r+0xc8>
  40e3c4:	9a06      	ldr	r2, [sp, #24]
  40e3c6:	6815      	ldr	r5, [r2, #0]
  40e3c8:	4613      	mov	r3, r2
  40e3ca:	2d00      	cmp	r5, #0
  40e3cc:	f103 0304 	add.w	r3, r3, #4
  40e3d0:	f2c0 82da 	blt.w	40e988 <_vfiprintf_r+0xb54>
  40e3d4:	9306      	str	r3, [sp, #24]
  40e3d6:	4650      	mov	r0, sl
  40e3d8:	f89a 3000 	ldrb.w	r3, [sl]
  40e3dc:	e58e      	b.n	40defc <_vfiprintf_r+0xc8>
  40e3de:	f89a 3000 	ldrb.w	r3, [sl]
  40e3e2:	4650      	mov	r0, sl
  40e3e4:	212b      	movs	r1, #43	; 0x2b
  40e3e6:	e589      	b.n	40defc <_vfiprintf_r+0xc8>
  40e3e8:	9806      	ldr	r0, [sp, #24]
  40e3ea:	2278      	movs	r2, #120	; 0x78
  40e3ec:	2330      	movs	r3, #48	; 0x30
  40e3ee:	46b0      	mov	r8, r6
  40e3f0:	4601      	mov	r1, r0
  40e3f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40e3f6:	4aaa      	ldr	r2, [pc, #680]	; (40e6a0 <_vfiprintf_r+0x86c>)
  40e3f8:	f049 0902 	orr.w	r9, r9, #2
  40e3fc:	3104      	adds	r1, #4
  40e3fe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  40e402:	9505      	str	r5, [sp, #20]
  40e404:	2302      	movs	r3, #2
  40e406:	6806      	ldr	r6, [r0, #0]
  40e408:	2700      	movs	r7, #0
  40e40a:	9106      	str	r1, [sp, #24]
  40e40c:	920a      	str	r2, [sp, #40]	; 0x28
  40e40e:	e60f      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e410:	f049 0920 	orr.w	r9, r9, #32
  40e414:	f89a 3000 	ldrb.w	r3, [sl]
  40e418:	4650      	mov	r0, sl
  40e41a:	e56f      	b.n	40defc <_vfiprintf_r+0xc8>
  40e41c:	f049 0980 	orr.w	r9, r9, #128	; 0x80
  40e420:	f89a 3000 	ldrb.w	r3, [sl]
  40e424:	4650      	mov	r0, sl
  40e426:	e569      	b.n	40defc <_vfiprintf_r+0xc8>
  40e428:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e42c:	2500      	movs	r5, #0
  40e42e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40e432:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40e436:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  40e43a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40e43e:	2a09      	cmp	r2, #9
  40e440:	d9f5      	bls.n	40e42e <_vfiprintf_r+0x5fa>
  40e442:	e55d      	b.n	40df00 <_vfiprintf_r+0xcc>
  40e444:	f049 0910 	orr.w	r9, r9, #16
  40e448:	9505      	str	r5, [sp, #20]
  40e44a:	46b0      	mov	r8, r6
  40e44c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e450:	f019 0f20 	tst.w	r9, #32
  40e454:	d18d      	bne.n	40e372 <_vfiprintf_r+0x53e>
  40e456:	9a06      	ldr	r2, [sp, #24]
  40e458:	f019 0f10 	tst.w	r9, #16
  40e45c:	4613      	mov	r3, r2
  40e45e:	f040 81c4 	bne.w	40e7ea <_vfiprintf_r+0x9b6>
  40e462:	f019 0f40 	tst.w	r9, #64	; 0x40
  40e466:	f000 81c0 	beq.w	40e7ea <_vfiprintf_r+0x9b6>
  40e46a:	f9b2 6000 	ldrsh.w	r6, [r2]
  40e46e:	3304      	adds	r3, #4
  40e470:	17f7      	asrs	r7, r6, #31
  40e472:	9306      	str	r3, [sp, #24]
  40e474:	4632      	mov	r2, r6
  40e476:	463b      	mov	r3, r7
  40e478:	e785      	b.n	40e386 <_vfiprintf_r+0x552>
  40e47a:	f049 0910 	orr.w	r9, r9, #16
  40e47e:	9505      	str	r5, [sp, #20]
  40e480:	46b0      	mov	r8, r6
  40e482:	f019 0320 	ands.w	r3, r9, #32
  40e486:	f47f aecf 	bne.w	40e228 <_vfiprintf_r+0x3f4>
  40e48a:	f019 0210 	ands.w	r2, r9, #16
  40e48e:	f040 81b3 	bne.w	40e7f8 <_vfiprintf_r+0x9c4>
  40e492:	f019 0340 	ands.w	r3, r9, #64	; 0x40
  40e496:	f000 81af 	beq.w	40e7f8 <_vfiprintf_r+0x9c4>
  40e49a:	9906      	ldr	r1, [sp, #24]
  40e49c:	4613      	mov	r3, r2
  40e49e:	2700      	movs	r7, #0
  40e4a0:	460a      	mov	r2, r1
  40e4a2:	880e      	ldrh	r6, [r1, #0]
  40e4a4:	3204      	adds	r2, #4
  40e4a6:	9206      	str	r2, [sp, #24]
  40e4a8:	e5c2      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e4aa:	f049 0910 	orr.w	r9, r9, #16
  40e4ae:	9505      	str	r5, [sp, #20]
  40e4b0:	46b0      	mov	r8, r6
  40e4b2:	9a06      	ldr	r2, [sp, #24]
  40e4b4:	f019 0f20 	tst.w	r9, #32
  40e4b8:	f47f adb1 	bne.w	40e01e <_vfiprintf_r+0x1ea>
  40e4bc:	f019 0f10 	tst.w	r9, #16
  40e4c0:	4613      	mov	r3, r2
  40e4c2:	f040 81a5 	bne.w	40e810 <_vfiprintf_r+0x9dc>
  40e4c6:	f019 0f40 	tst.w	r9, #64	; 0x40
  40e4ca:	f000 81a1 	beq.w	40e810 <_vfiprintf_r+0x9dc>
  40e4ce:	8816      	ldrh	r6, [r2, #0]
  40e4d0:	3204      	adds	r2, #4
  40e4d2:	2700      	movs	r7, #0
  40e4d4:	2301      	movs	r3, #1
  40e4d6:	9206      	str	r2, [sp, #24]
  40e4d8:	e5aa      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e4da:	4a72      	ldr	r2, [pc, #456]	; (40e6a4 <_vfiprintf_r+0x870>)
  40e4dc:	f019 0f20 	tst.w	r9, #32
  40e4e0:	9505      	str	r5, [sp, #20]
  40e4e2:	46b0      	mov	r8, r6
  40e4e4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e4e8:	920a      	str	r2, [sp, #40]	; 0x28
  40e4ea:	f47f aeef 	bne.w	40e2cc <_vfiprintf_r+0x498>
  40e4ee:	9906      	ldr	r1, [sp, #24]
  40e4f0:	f019 0f10 	tst.w	r9, #16
  40e4f4:	460a      	mov	r2, r1
  40e4f6:	f040 8186 	bne.w	40e806 <_vfiprintf_r+0x9d2>
  40e4fa:	f019 0f40 	tst.w	r9, #64	; 0x40
  40e4fe:	f000 8182 	beq.w	40e806 <_vfiprintf_r+0x9d2>
  40e502:	3204      	adds	r2, #4
  40e504:	880e      	ldrh	r6, [r1, #0]
  40e506:	2700      	movs	r7, #0
  40e508:	9206      	str	r2, [sp, #24]
  40e50a:	e6e8      	b.n	40e2de <_vfiprintf_r+0x4aa>
  40e50c:	9505      	str	r5, [sp, #20]
  40e50e:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40e512:	b30b      	cbz	r3, 40e558 <_vfiprintf_r+0x724>
  40e514:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40e518:	f04f 0300 	mov.w	r3, #0
  40e51c:	2701      	movs	r7, #1
  40e51e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40e522:	ab12      	add	r3, sp, #72	; 0x48
  40e524:	46b8      	mov	r8, r7
  40e526:	9308      	str	r3, [sp, #32]
  40e528:	e719      	b.n	40e35e <_vfiprintf_r+0x52a>
  40e52a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e52c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e52e:	1c48      	adds	r0, r1, #1
  40e530:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40e534:	2b00      	cmp	r3, #0
  40e536:	f43f adfc 	beq.w	40e132 <_vfiprintf_r+0x2fe>
  40e53a:	3201      	adds	r2, #1
  40e53c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40e540:	2301      	movs	r3, #1
  40e542:	2807      	cmp	r0, #7
  40e544:	9010      	str	r0, [sp, #64]	; 0x40
  40e546:	9211      	str	r2, [sp, #68]	; 0x44
  40e548:	e884 000a 	stmia.w	r4, {r1, r3}
  40e54c:	f300 80e7 	bgt.w	40e71e <_vfiprintf_r+0x8ea>
  40e550:	4601      	mov	r1, r0
  40e552:	3408      	adds	r4, #8
  40e554:	3001      	adds	r0, #1
  40e556:	e5ec      	b.n	40e132 <_vfiprintf_r+0x2fe>
  40e558:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e55a:	b123      	cbz	r3, 40e566 <_vfiprintf_r+0x732>
  40e55c:	9802      	ldr	r0, [sp, #8]
  40e55e:	aa0f      	add	r2, sp, #60	; 0x3c
  40e560:	9901      	ldr	r1, [sp, #4]
  40e562:	f7ff fc2b 	bl	40ddbc <__sprint_r.part.0>
  40e566:	9b01      	ldr	r3, [sp, #4]
  40e568:	899b      	ldrh	r3, [r3, #12]
  40e56a:	065b      	lsls	r3, r3, #25
  40e56c:	f53f ad48 	bmi.w	40e000 <_vfiprintf_r+0x1cc>
  40e570:	9803      	ldr	r0, [sp, #12]
  40e572:	b02d      	add	sp, #180	; 0xb4
  40e574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e578:	2b01      	cmp	r3, #1
  40e57a:	f000 811f 	beq.w	40e7bc <_vfiprintf_r+0x988>
  40e57e:	2b02      	cmp	r3, #2
  40e580:	f040 80e7 	bne.w	40e752 <_vfiprintf_r+0x91e>
  40e584:	465a      	mov	r2, fp
  40e586:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
  40e58a:	0933      	lsrs	r3, r6, #4
  40e58c:	f006 000f 	and.w	r0, r6, #15
  40e590:	0939      	lsrs	r1, r7, #4
  40e592:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40e596:	460f      	mov	r7, r1
  40e598:	461e      	mov	r6, r3
  40e59a:	f81e 3000 	ldrb.w	r3, [lr, r0]
  40e59e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  40e5a2:	ea56 0307 	orrs.w	r3, r6, r7
  40e5a6:	d1f0      	bne.n	40e58a <_vfiprintf_r+0x756>
  40e5a8:	9208      	str	r2, [sp, #32]
  40e5aa:	ebc2 080b 	rsb	r8, r2, fp
  40e5ae:	e565      	b.n	40e07c <_vfiprintf_r+0x248>
  40e5b0:	2a00      	cmp	r2, #0
  40e5b2:	f040 8167 	bne.w	40e884 <_vfiprintf_r+0xa50>
  40e5b6:	2201      	movs	r2, #1
  40e5b8:	9908      	ldr	r1, [sp, #32]
  40e5ba:	4643      	mov	r3, r8
  40e5bc:	465c      	mov	r4, fp
  40e5be:	911c      	str	r1, [sp, #112]	; 0x70
  40e5c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  40e5c4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40e5c8:	9210      	str	r2, [sp, #64]	; 0x40
  40e5ca:	f104 0208 	add.w	r2, r4, #8
  40e5ce:	f019 0f04 	tst.w	r9, #4
  40e5d2:	d047      	beq.n	40e664 <_vfiprintf_r+0x830>
  40e5d4:	9905      	ldr	r1, [sp, #20]
  40e5d6:	1bcd      	subs	r5, r1, r7
  40e5d8:	2d00      	cmp	r5, #0
  40e5da:	dd43      	ble.n	40e664 <_vfiprintf_r+0x830>
  40e5dc:	2d10      	cmp	r5, #16
  40e5de:	f340 8201 	ble.w	40e9e4 <_vfiprintf_r+0xbb0>
  40e5e2:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e5e4:	2410      	movs	r4, #16
  40e5e6:	4e30      	ldr	r6, [pc, #192]	; (40e6a8 <_vfiprintf_r+0x874>)
  40e5e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40e5ec:	f8dd 9004 	ldr.w	r9, [sp, #4]
  40e5f0:	e006      	b.n	40e600 <_vfiprintf_r+0x7cc>
  40e5f2:	f04f 0e01 	mov.w	lr, #1
  40e5f6:	4618      	mov	r0, r3
  40e5f8:	465a      	mov	r2, fp
  40e5fa:	3d10      	subs	r5, #16
  40e5fc:	2d10      	cmp	r5, #16
  40e5fe:	dd1d      	ble.n	40e63c <_vfiprintf_r+0x808>
  40e600:	1c41      	adds	r1, r0, #1
  40e602:	3310      	adds	r3, #16
  40e604:	6016      	str	r6, [r2, #0]
  40e606:	f100 0e02 	add.w	lr, r0, #2
  40e60a:	2907      	cmp	r1, #7
  40e60c:	6054      	str	r4, [r2, #4]
  40e60e:	9311      	str	r3, [sp, #68]	; 0x44
  40e610:	4608      	mov	r0, r1
  40e612:	f102 0208 	add.w	r2, r2, #8
  40e616:	9110      	str	r1, [sp, #64]	; 0x40
  40e618:	ddef      	ble.n	40e5fa <_vfiprintf_r+0x7c6>
  40e61a:	2b00      	cmp	r3, #0
  40e61c:	d0e9      	beq.n	40e5f2 <_vfiprintf_r+0x7be>
  40e61e:	aa0f      	add	r2, sp, #60	; 0x3c
  40e620:	4640      	mov	r0, r8
  40e622:	4649      	mov	r1, r9
  40e624:	f7ff fbca 	bl	40ddbc <__sprint_r.part.0>
  40e628:	465a      	mov	r2, fp
  40e62a:	2800      	cmp	r0, #0
  40e62c:	d19b      	bne.n	40e566 <_vfiprintf_r+0x732>
  40e62e:	3d10      	subs	r5, #16
  40e630:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e632:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e634:	2d10      	cmp	r5, #16
  40e636:	f100 0e01 	add.w	lr, r0, #1
  40e63a:	dce1      	bgt.n	40e600 <_vfiprintf_r+0x7cc>
  40e63c:	442b      	add	r3, r5
  40e63e:	f1be 0f07 	cmp.w	lr, #7
  40e642:	6016      	str	r6, [r2, #0]
  40e644:	6055      	str	r5, [r2, #4]
  40e646:	9311      	str	r3, [sp, #68]	; 0x44
  40e648:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40e64c:	dd0a      	ble.n	40e664 <_vfiprintf_r+0x830>
  40e64e:	2b00      	cmp	r3, #0
  40e650:	f43f add3 	beq.w	40e1fa <_vfiprintf_r+0x3c6>
  40e654:	9802      	ldr	r0, [sp, #8]
  40e656:	aa0f      	add	r2, sp, #60	; 0x3c
  40e658:	9901      	ldr	r1, [sp, #4]
  40e65a:	f7ff fbaf 	bl	40ddbc <__sprint_r.part.0>
  40e65e:	2800      	cmp	r0, #0
  40e660:	d181      	bne.n	40e566 <_vfiprintf_r+0x732>
  40e662:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e664:	9a03      	ldr	r2, [sp, #12]
  40e666:	9905      	ldr	r1, [sp, #20]
  40e668:	428f      	cmp	r7, r1
  40e66a:	bfac      	ite	ge
  40e66c:	19d2      	addge	r2, r2, r7
  40e66e:	1852      	addlt	r2, r2, r1
  40e670:	9203      	str	r2, [sp, #12]
  40e672:	2b00      	cmp	r3, #0
  40e674:	f43f adc8 	beq.w	40e208 <_vfiprintf_r+0x3d4>
  40e678:	9802      	ldr	r0, [sp, #8]
  40e67a:	aa0f      	add	r2, sp, #60	; 0x3c
  40e67c:	9901      	ldr	r1, [sp, #4]
  40e67e:	f7ff fb9d 	bl	40ddbc <__sprint_r.part.0>
  40e682:	2800      	cmp	r0, #0
  40e684:	f43f adc0 	beq.w	40e208 <_vfiprintf_r+0x3d4>
  40e688:	e76d      	b.n	40e566 <_vfiprintf_r+0x732>
  40e68a:	9b05      	ldr	r3, [sp, #20]
  40e68c:	1bdd      	subs	r5, r3, r7
  40e68e:	2d00      	cmp	r5, #0
  40e690:	f77f ad63 	ble.w	40e15a <_vfiprintf_r+0x326>
  40e694:	2d10      	cmp	r5, #16
  40e696:	f340 81b0 	ble.w	40e9fa <_vfiprintf_r+0xbc6>
  40e69a:	4e04      	ldr	r6, [pc, #16]	; (40e6ac <_vfiprintf_r+0x878>)
  40e69c:	2310      	movs	r3, #16
  40e69e:	e00e      	b.n	40e6be <_vfiprintf_r+0x88a>
  40e6a0:	0041360c 	.word	0x0041360c
  40e6a4:	004135f8 	.word	0x004135f8
  40e6a8:	0041363c 	.word	0x0041363c
  40e6ac:	0041362c 	.word	0x0041362c
  40e6b0:	f04f 0e01 	mov.w	lr, #1
  40e6b4:	4611      	mov	r1, r2
  40e6b6:	465c      	mov	r4, fp
  40e6b8:	3d10      	subs	r5, #16
  40e6ba:	2d10      	cmp	r5, #16
  40e6bc:	dd20      	ble.n	40e700 <_vfiprintf_r+0x8cc>
  40e6be:	1c48      	adds	r0, r1, #1
  40e6c0:	3210      	adds	r2, #16
  40e6c2:	6026      	str	r6, [r4, #0]
  40e6c4:	f101 0e02 	add.w	lr, r1, #2
  40e6c8:	2807      	cmp	r0, #7
  40e6ca:	6063      	str	r3, [r4, #4]
  40e6cc:	9211      	str	r2, [sp, #68]	; 0x44
  40e6ce:	4601      	mov	r1, r0
  40e6d0:	f104 0408 	add.w	r4, r4, #8
  40e6d4:	9010      	str	r0, [sp, #64]	; 0x40
  40e6d6:	ddef      	ble.n	40e6b8 <_vfiprintf_r+0x884>
  40e6d8:	2a00      	cmp	r2, #0
  40e6da:	d0e9      	beq.n	40e6b0 <_vfiprintf_r+0x87c>
  40e6dc:	9802      	ldr	r0, [sp, #8]
  40e6de:	aa0f      	add	r2, sp, #60	; 0x3c
  40e6e0:	9901      	ldr	r1, [sp, #4]
  40e6e2:	465c      	mov	r4, fp
  40e6e4:	9307      	str	r3, [sp, #28]
  40e6e6:	f7ff fb69 	bl	40ddbc <__sprint_r.part.0>
  40e6ea:	2800      	cmp	r0, #0
  40e6ec:	f47f af3b 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e6f0:	3d10      	subs	r5, #16
  40e6f2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e6f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e6f6:	2d10      	cmp	r5, #16
  40e6f8:	f101 0e01 	add.w	lr, r1, #1
  40e6fc:	9b07      	ldr	r3, [sp, #28]
  40e6fe:	dcde      	bgt.n	40e6be <_vfiprintf_r+0x88a>
  40e700:	442a      	add	r2, r5
  40e702:	f1be 0f07 	cmp.w	lr, #7
  40e706:	6026      	str	r6, [r4, #0]
  40e708:	6065      	str	r5, [r4, #4]
  40e70a:	9211      	str	r2, [sp, #68]	; 0x44
  40e70c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40e710:	f300 80b1 	bgt.w	40e876 <_vfiprintf_r+0xa42>
  40e714:	3408      	adds	r4, #8
  40e716:	f10e 0001 	add.w	r0, lr, #1
  40e71a:	4671      	mov	r1, lr
  40e71c:	e51d      	b.n	40e15a <_vfiprintf_r+0x326>
  40e71e:	2a00      	cmp	r2, #0
  40e720:	f040 808b 	bne.w	40e83a <_vfiprintf_r+0xa06>
  40e724:	f1bc 0f00 	cmp.w	ip, #0
  40e728:	f000 8083 	beq.w	40e832 <_vfiprintf_r+0x9fe>
  40e72c:	aa0e      	add	r2, sp, #56	; 0x38
  40e72e:	2102      	movs	r1, #2
  40e730:	4618      	mov	r0, r3
  40e732:	465c      	mov	r4, fp
  40e734:	921c      	str	r2, [sp, #112]	; 0x70
  40e736:	460a      	mov	r2, r1
  40e738:	911d      	str	r1, [sp, #116]	; 0x74
  40e73a:	e507      	b.n	40e14c <_vfiprintf_r+0x318>
  40e73c:	2a00      	cmp	r2, #0
  40e73e:	f040 808d 	bne.w	40e85c <_vfiprintf_r+0xa28>
  40e742:	2001      	movs	r0, #1
  40e744:	4611      	mov	r1, r2
  40e746:	465c      	mov	r4, fp
  40e748:	e503      	b.n	40e152 <_vfiprintf_r+0x31e>
  40e74a:	4690      	mov	r8, r2
  40e74c:	f8cd b020 	str.w	fp, [sp, #32]
  40e750:	e494      	b.n	40e07c <_vfiprintf_r+0x248>
  40e752:	4659      	mov	r1, fp
  40e754:	08f2      	lsrs	r2, r6, #3
  40e756:	f006 0307 	and.w	r3, r6, #7
  40e75a:	08f8      	lsrs	r0, r7, #3
  40e75c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40e760:	3330      	adds	r3, #48	; 0x30
  40e762:	4607      	mov	r7, r0
  40e764:	4616      	mov	r6, r2
  40e766:	f801 3d01 	strb.w	r3, [r1, #-1]!
  40e76a:	ea56 0207 	orrs.w	r2, r6, r7
  40e76e:	d1f1      	bne.n	40e754 <_vfiprintf_r+0x920>
  40e770:	f019 0f01 	tst.w	r9, #1
  40e774:	9108      	str	r1, [sp, #32]
  40e776:	f040 8092 	bne.w	40e89e <_vfiprintf_r+0xa6a>
  40e77a:	ebc1 080b 	rsb	r8, r1, fp
  40e77e:	e47d      	b.n	40e07c <_vfiprintf_r+0x248>
  40e780:	2302      	movs	r3, #2
  40e782:	e455      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e784:	2a00      	cmp	r2, #0
  40e786:	f040 80e6 	bne.w	40e956 <_vfiprintf_r+0xb22>
  40e78a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  40e78e:	2b00      	cmp	r3, #0
  40e790:	f000 80bb 	beq.w	40e90a <_vfiprintf_r+0xad6>
  40e794:	2301      	movs	r3, #1
  40e796:	f10d 0237 	add.w	r2, sp, #55	; 0x37
  40e79a:	465c      	mov	r4, fp
  40e79c:	921c      	str	r2, [sp, #112]	; 0x70
  40e79e:	4618      	mov	r0, r3
  40e7a0:	931d      	str	r3, [sp, #116]	; 0x74
  40e7a2:	461a      	mov	r2, r3
  40e7a4:	e6d4      	b.n	40e550 <_vfiprintf_r+0x71c>
  40e7a6:	9a05      	ldr	r2, [sp, #20]
  40e7a8:	1bd5      	subs	r5, r2, r7
  40e7aa:	465a      	mov	r2, fp
  40e7ac:	2d00      	cmp	r5, #0
  40e7ae:	f73f af15 	bgt.w	40e5dc <_vfiprintf_r+0x7a8>
  40e7b2:	e522      	b.n	40e1fa <_vfiprintf_r+0x3c6>
  40e7b4:	4698      	mov	r8, r3
  40e7b6:	f8cd b020 	str.w	fp, [sp, #32]
  40e7ba:	e45f      	b.n	40e07c <_vfiprintf_r+0x248>
  40e7bc:	2f00      	cmp	r7, #0
  40e7be:	bf08      	it	eq
  40e7c0:	2e0a      	cmpeq	r6, #10
  40e7c2:	d279      	bcs.n	40e8b8 <_vfiprintf_r+0xa84>
  40e7c4:	ab2c      	add	r3, sp, #176	; 0xb0
  40e7c6:	3630      	adds	r6, #48	; 0x30
  40e7c8:	f803 6d41 	strb.w	r6, [r3, #-65]!
  40e7cc:	ebc3 080b 	rsb	r8, r3, fp
  40e7d0:	9308      	str	r3, [sp, #32]
  40e7d2:	e453      	b.n	40e07c <_vfiprintf_r+0x248>
  40e7d4:	9802      	ldr	r0, [sp, #8]
  40e7d6:	aa0f      	add	r2, sp, #60	; 0x3c
  40e7d8:	9901      	ldr	r1, [sp, #4]
  40e7da:	f7ff faef 	bl	40ddbc <__sprint_r.part.0>
  40e7de:	2800      	cmp	r0, #0
  40e7e0:	f47f aec1 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e7e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40e7e6:	465a      	mov	r2, fp
  40e7e8:	e6f1      	b.n	40e5ce <_vfiprintf_r+0x79a>
  40e7ea:	681e      	ldr	r6, [r3, #0]
  40e7ec:	3304      	adds	r3, #4
  40e7ee:	17f7      	asrs	r7, r6, #31
  40e7f0:	9306      	str	r3, [sp, #24]
  40e7f2:	4632      	mov	r2, r6
  40e7f4:	463b      	mov	r3, r7
  40e7f6:	e5c6      	b.n	40e386 <_vfiprintf_r+0x552>
  40e7f8:	9906      	ldr	r1, [sp, #24]
  40e7fa:	2700      	movs	r7, #0
  40e7fc:	460a      	mov	r2, r1
  40e7fe:	680e      	ldr	r6, [r1, #0]
  40e800:	3204      	adds	r2, #4
  40e802:	9206      	str	r2, [sp, #24]
  40e804:	e414      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e806:	6816      	ldr	r6, [r2, #0]
  40e808:	3204      	adds	r2, #4
  40e80a:	2700      	movs	r7, #0
  40e80c:	9206      	str	r2, [sp, #24]
  40e80e:	e566      	b.n	40e2de <_vfiprintf_r+0x4aa>
  40e810:	3204      	adds	r2, #4
  40e812:	681e      	ldr	r6, [r3, #0]
  40e814:	2700      	movs	r7, #0
  40e816:	2301      	movs	r3, #1
  40e818:	9206      	str	r2, [sp, #24]
  40e81a:	e409      	b.n	40e030 <_vfiprintf_r+0x1fc>
  40e81c:	9802      	ldr	r0, [sp, #8]
  40e81e:	aa0f      	add	r2, sp, #60	; 0x3c
  40e820:	9901      	ldr	r1, [sp, #4]
  40e822:	f7ff facb 	bl	40ddbc <__sprint_r.part.0>
  40e826:	2800      	cmp	r0, #0
  40e828:	f47f ae9d 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e82c:	465c      	mov	r4, fp
  40e82e:	f7ff bbc8 	b.w	40dfc2 <_vfiprintf_r+0x18e>
  40e832:	4618      	mov	r0, r3
  40e834:	4611      	mov	r1, r2
  40e836:	465c      	mov	r4, fp
  40e838:	e48b      	b.n	40e152 <_vfiprintf_r+0x31e>
  40e83a:	9802      	ldr	r0, [sp, #8]
  40e83c:	aa0f      	add	r2, sp, #60	; 0x3c
  40e83e:	9901      	ldr	r1, [sp, #4]
  40e840:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40e844:	f7ff faba 	bl	40ddbc <__sprint_r.part.0>
  40e848:	2800      	cmp	r0, #0
  40e84a:	f47f ae8c 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e84e:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e850:	465c      	mov	r4, fp
  40e852:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e854:	1c48      	adds	r0, r1, #1
  40e856:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e85a:	e46a      	b.n	40e132 <_vfiprintf_r+0x2fe>
  40e85c:	9802      	ldr	r0, [sp, #8]
  40e85e:	aa0f      	add	r2, sp, #60	; 0x3c
  40e860:	9901      	ldr	r1, [sp, #4]
  40e862:	f7ff faab 	bl	40ddbc <__sprint_r.part.0>
  40e866:	2800      	cmp	r0, #0
  40e868:	f47f ae7d 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e86c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e86e:	465c      	mov	r4, fp
  40e870:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e872:	1c48      	adds	r0, r1, #1
  40e874:	e46d      	b.n	40e152 <_vfiprintf_r+0x31e>
  40e876:	2a00      	cmp	r2, #0
  40e878:	f040 8095 	bne.w	40e9a6 <_vfiprintf_r+0xb72>
  40e87c:	2001      	movs	r0, #1
  40e87e:	4611      	mov	r1, r2
  40e880:	465c      	mov	r4, fp
  40e882:	e46a      	b.n	40e15a <_vfiprintf_r+0x326>
  40e884:	9802      	ldr	r0, [sp, #8]
  40e886:	aa0f      	add	r2, sp, #60	; 0x3c
  40e888:	9901      	ldr	r1, [sp, #4]
  40e88a:	f7ff fa97 	bl	40ddbc <__sprint_r.part.0>
  40e88e:	2800      	cmp	r0, #0
  40e890:	f47f ae69 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e894:	9810      	ldr	r0, [sp, #64]	; 0x40
  40e896:	465c      	mov	r4, fp
  40e898:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e89a:	3001      	adds	r0, #1
  40e89c:	e49b      	b.n	40e1d6 <_vfiprintf_r+0x3a2>
  40e89e:	2b30      	cmp	r3, #48	; 0x30
  40e8a0:	9b08      	ldr	r3, [sp, #32]
  40e8a2:	d022      	beq.n	40e8ea <_vfiprintf_r+0xab6>
  40e8a4:	3b01      	subs	r3, #1
  40e8a6:	461a      	mov	r2, r3
  40e8a8:	9308      	str	r3, [sp, #32]
  40e8aa:	2330      	movs	r3, #48	; 0x30
  40e8ac:	ebc2 080b 	rsb	r8, r2, fp
  40e8b0:	f801 3c01 	strb.w	r3, [r1, #-1]
  40e8b4:	f7ff bbe2 	b.w	40e07c <_vfiprintf_r+0x248>
  40e8b8:	46d8      	mov	r8, fp
  40e8ba:	4630      	mov	r0, r6
  40e8bc:	4639      	mov	r1, r7
  40e8be:	220a      	movs	r2, #10
  40e8c0:	2300      	movs	r3, #0
  40e8c2:	f003 fc8f 	bl	4121e4 <__aeabi_uldivmod>
  40e8c6:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  40e8ca:	4630      	mov	r0, r6
  40e8cc:	4639      	mov	r1, r7
  40e8ce:	2300      	movs	r3, #0
  40e8d0:	220a      	movs	r2, #10
  40e8d2:	f808 ed01 	strb.w	lr, [r8, #-1]!
  40e8d6:	f003 fc85 	bl	4121e4 <__aeabi_uldivmod>
  40e8da:	4606      	mov	r6, r0
  40e8dc:	460f      	mov	r7, r1
  40e8de:	ea56 0307 	orrs.w	r3, r6, r7
  40e8e2:	d1ea      	bne.n	40e8ba <_vfiprintf_r+0xa86>
  40e8e4:	4643      	mov	r3, r8
  40e8e6:	f8cd 8020 	str.w	r8, [sp, #32]
  40e8ea:	ebc3 080b 	rsb	r8, r3, fp
  40e8ee:	f7ff bbc5 	b.w	40e07c <_vfiprintf_r+0x248>
  40e8f2:	252d      	movs	r5, #45	; 0x2d
  40e8f4:	4276      	negs	r6, r6
  40e8f6:	f8cd 8010 	str.w	r8, [sp, #16]
  40e8fa:	f04f 0301 	mov.w	r3, #1
  40e8fe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40e902:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40e906:	f7ff bb9a 	b.w	40e03e <_vfiprintf_r+0x20a>
  40e90a:	4611      	mov	r1, r2
  40e90c:	2001      	movs	r0, #1
  40e90e:	465c      	mov	r4, fp
  40e910:	f1bc 0f00 	cmp.w	ip, #0
  40e914:	f43f ac21 	beq.w	40e15a <_vfiprintf_r+0x326>
  40e918:	aa0e      	add	r2, sp, #56	; 0x38
  40e91a:	2302      	movs	r3, #2
  40e91c:	f8cb 2000 	str.w	r2, [fp]
  40e920:	461a      	mov	r2, r3
  40e922:	f8cb 3004 	str.w	r3, [fp, #4]
  40e926:	e411      	b.n	40e14c <_vfiprintf_r+0x318>
  40e928:	f019 0f10 	tst.w	r9, #16
  40e92c:	d10b      	bne.n	40e946 <_vfiprintf_r+0xb12>
  40e92e:	f019 0f40 	tst.w	r9, #64	; 0x40
  40e932:	d008      	beq.n	40e946 <_vfiprintf_r+0xb12>
  40e934:	9a06      	ldr	r2, [sp, #24]
  40e936:	6813      	ldr	r3, [r2, #0]
  40e938:	3204      	adds	r2, #4
  40e93a:	9206      	str	r2, [sp, #24]
  40e93c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40e940:	801a      	strh	r2, [r3, #0]
  40e942:	f7ff baa9 	b.w	40de98 <_vfiprintf_r+0x64>
  40e946:	9a06      	ldr	r2, [sp, #24]
  40e948:	6813      	ldr	r3, [r2, #0]
  40e94a:	3204      	adds	r2, #4
  40e94c:	9206      	str	r2, [sp, #24]
  40e94e:	9a03      	ldr	r2, [sp, #12]
  40e950:	601a      	str	r2, [r3, #0]
  40e952:	f7ff baa1 	b.w	40de98 <_vfiprintf_r+0x64>
  40e956:	9802      	ldr	r0, [sp, #8]
  40e958:	aa0f      	add	r2, sp, #60	; 0x3c
  40e95a:	9901      	ldr	r1, [sp, #4]
  40e95c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40e960:	f7ff fa2c 	bl	40ddbc <__sprint_r.part.0>
  40e964:	2800      	cmp	r0, #0
  40e966:	f47f adfe 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e96a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e96c:	465c      	mov	r4, fp
  40e96e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e970:	1c48      	adds	r0, r1, #1
  40e972:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40e976:	e5db      	b.n	40e530 <_vfiprintf_r+0x6fc>
  40e978:	f049 0920 	orr.w	r9, r9, #32
  40e97c:	f10a 0001 	add.w	r0, sl, #1
  40e980:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40e984:	f7ff baba 	b.w	40defc <_vfiprintf_r+0xc8>
  40e988:	426d      	negs	r5, r5
  40e98a:	9306      	str	r3, [sp, #24]
  40e98c:	4650      	mov	r0, sl
  40e98e:	e440      	b.n	40e212 <_vfiprintf_r+0x3de>
  40e990:	9808      	ldr	r0, [sp, #32]
  40e992:	9606      	str	r6, [sp, #24]
  40e994:	f7fc fec2 	bl	40b71c <strlen>
  40e998:	2300      	movs	r3, #0
  40e99a:	4680      	mov	r8, r0
  40e99c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e9a0:	9304      	str	r3, [sp, #16]
  40e9a2:	f7ff bb6b 	b.w	40e07c <_vfiprintf_r+0x248>
  40e9a6:	9802      	ldr	r0, [sp, #8]
  40e9a8:	aa0f      	add	r2, sp, #60	; 0x3c
  40e9aa:	9901      	ldr	r1, [sp, #4]
  40e9ac:	f7ff fa06 	bl	40ddbc <__sprint_r.part.0>
  40e9b0:	2800      	cmp	r0, #0
  40e9b2:	f47f add8 	bne.w	40e566 <_vfiprintf_r+0x732>
  40e9b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e9b8:	465c      	mov	r4, fp
  40e9ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e9bc:	1c48      	adds	r0, r1, #1
  40e9be:	f7ff bbcc 	b.w	40e15a <_vfiprintf_r+0x326>
  40e9c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e9c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40e9c6:	3101      	adds	r1, #1
  40e9c8:	4e14      	ldr	r6, [pc, #80]	; (40ea1c <_vfiprintf_r+0xbe8>)
  40e9ca:	f7ff bba3 	b.w	40e114 <_vfiprintf_r+0x2e0>
  40e9ce:	f1b8 0f06 	cmp.w	r8, #6
  40e9d2:	4b13      	ldr	r3, [pc, #76]	; (40ea20 <_vfiprintf_r+0xbec>)
  40e9d4:	9606      	str	r6, [sp, #24]
  40e9d6:	bf28      	it	cs
  40e9d8:	f04f 0806 	movcs.w	r8, #6
  40e9dc:	9308      	str	r3, [sp, #32]
  40e9de:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  40e9e2:	e4bc      	b.n	40e35e <_vfiprintf_r+0x52a>
  40e9e4:	9910      	ldr	r1, [sp, #64]	; 0x40
  40e9e6:	4e0d      	ldr	r6, [pc, #52]	; (40ea1c <_vfiprintf_r+0xbe8>)
  40e9e8:	f101 0e01 	add.w	lr, r1, #1
  40e9ec:	e626      	b.n	40e63c <_vfiprintf_r+0x808>
  40e9ee:	9606      	str	r6, [sp, #24]
  40e9f0:	9004      	str	r0, [sp, #16]
  40e9f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40e9f6:	f7ff bb41 	b.w	40e07c <_vfiprintf_r+0x248>
  40e9fa:	4686      	mov	lr, r0
  40e9fc:	4e09      	ldr	r6, [pc, #36]	; (40ea24 <_vfiprintf_r+0xbf0>)
  40e9fe:	e67f      	b.n	40e700 <_vfiprintf_r+0x8cc>
  40ea00:	9a06      	ldr	r2, [sp, #24]
  40ea02:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ea06:	6816      	ldr	r6, [r2, #0]
  40ea08:	3204      	adds	r2, #4
  40ea0a:	2e00      	cmp	r6, #0
  40ea0c:	9206      	str	r2, [sp, #24]
  40ea0e:	f6bf aa75 	bge.w	40defc <_vfiprintf_r+0xc8>
  40ea12:	f04f 36ff 	mov.w	r6, #4294967295
  40ea16:	f7ff ba71 	b.w	40defc <_vfiprintf_r+0xc8>
  40ea1a:	bf00      	nop
  40ea1c:	0041363c 	.word	0x0041363c
  40ea20:	00413620 	.word	0x00413620
  40ea24:	0041362c 	.word	0x0041362c

0040ea28 <__sbprintf>:
  40ea28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ea2c:	898d      	ldrh	r5, [r1, #12]
  40ea2e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
  40ea32:	4688      	mov	r8, r1
  40ea34:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40ea38:	f025 0502 	bic.w	r5, r5, #2
  40ea3c:	ac1c      	add	r4, sp, #112	; 0x70
  40ea3e:	f8b8 a00e 	ldrh.w	sl, [r8, #14]
  40ea42:	2700      	movs	r7, #0
  40ea44:	f8ad 5014 	strh.w	r5, [sp, #20]
  40ea48:	a902      	add	r1, sp, #8
  40ea4a:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
  40ea4e:	4681      	mov	r9, r0
  40ea50:	9402      	str	r4, [sp, #8]
  40ea52:	9501      	str	r5, [sp, #4]
  40ea54:	f8d8 5064 	ldr.w	r5, [r8, #100]	; 0x64
  40ea58:	9406      	str	r4, [sp, #24]
  40ea5a:	951b      	str	r5, [sp, #108]	; 0x6c
  40ea5c:	f8d8 501c 	ldr.w	r5, [r8, #28]
  40ea60:	f8ad a016 	strh.w	sl, [sp, #22]
  40ea64:	9509      	str	r5, [sp, #36]	; 0x24
  40ea66:	9d01      	ldr	r5, [sp, #4]
  40ea68:	9708      	str	r7, [sp, #32]
  40ea6a:	950b      	str	r5, [sp, #44]	; 0x2c
  40ea6c:	9604      	str	r6, [sp, #16]
  40ea6e:	9607      	str	r6, [sp, #28]
  40ea70:	f7ff f9e0 	bl	40de34 <_vfiprintf_r>
  40ea74:	1e04      	subs	r4, r0, #0
  40ea76:	db07      	blt.n	40ea88 <__sbprintf+0x60>
  40ea78:	4648      	mov	r0, r9
  40ea7a:	a902      	add	r1, sp, #8
  40ea7c:	f001 f948 	bl	40fd10 <_fflush_r>
  40ea80:	42b8      	cmp	r0, r7
  40ea82:	bf18      	it	ne
  40ea84:	f04f 34ff 	movne.w	r4, #4294967295
  40ea88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40ea8c:	065b      	lsls	r3, r3, #25
  40ea8e:	d505      	bpl.n	40ea9c <__sbprintf+0x74>
  40ea90:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  40ea94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ea98:	f8a8 300c 	strh.w	r3, [r8, #12]
  40ea9c:	4620      	mov	r0, r4
  40ea9e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
  40eaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40eaa6:	bf00      	nop

0040eaa8 <__swsetup_r>:
  40eaa8:	b538      	push	{r3, r4, r5, lr}
  40eaaa:	4b2f      	ldr	r3, [pc, #188]	; (40eb68 <__swsetup_r+0xc0>)
  40eaac:	4605      	mov	r5, r0
  40eaae:	460c      	mov	r4, r1
  40eab0:	6818      	ldr	r0, [r3, #0]
  40eab2:	b110      	cbz	r0, 40eaba <__swsetup_r+0x12>
  40eab4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40eab6:	2b00      	cmp	r3, #0
  40eab8:	d036      	beq.n	40eb28 <__swsetup_r+0x80>
  40eaba:	89a2      	ldrh	r2, [r4, #12]
  40eabc:	b293      	uxth	r3, r2
  40eabe:	0718      	lsls	r0, r3, #28
  40eac0:	d50b      	bpl.n	40eada <__swsetup_r+0x32>
  40eac2:	6920      	ldr	r0, [r4, #16]
  40eac4:	b1a0      	cbz	r0, 40eaf0 <__swsetup_r+0x48>
  40eac6:	f013 0201 	ands.w	r2, r3, #1
  40eaca:	d11d      	bne.n	40eb08 <__swsetup_r+0x60>
  40eacc:	0799      	lsls	r1, r3, #30
  40eace:	d400      	bmi.n	40ead2 <__swsetup_r+0x2a>
  40ead0:	6962      	ldr	r2, [r4, #20]
  40ead2:	60a2      	str	r2, [r4, #8]
  40ead4:	b1f8      	cbz	r0, 40eb16 <__swsetup_r+0x6e>
  40ead6:	2000      	movs	r0, #0
  40ead8:	bd38      	pop	{r3, r4, r5, pc}
  40eada:	06d9      	lsls	r1, r3, #27
  40eadc:	d53b      	bpl.n	40eb56 <__swsetup_r+0xae>
  40eade:	0758      	lsls	r0, r3, #29
  40eae0:	d425      	bmi.n	40eb2e <__swsetup_r+0x86>
  40eae2:	6920      	ldr	r0, [r4, #16]
  40eae4:	f042 0208 	orr.w	r2, r2, #8
  40eae8:	b293      	uxth	r3, r2
  40eaea:	81a2      	strh	r2, [r4, #12]
  40eaec:	2800      	cmp	r0, #0
  40eaee:	d1ea      	bne.n	40eac6 <__swsetup_r+0x1e>
  40eaf0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40eaf4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40eaf8:	d0e5      	beq.n	40eac6 <__swsetup_r+0x1e>
  40eafa:	4628      	mov	r0, r5
  40eafc:	4621      	mov	r1, r4
  40eafe:	f002 f8b5 	bl	410c6c <__smakebuf_r>
  40eb02:	89a3      	ldrh	r3, [r4, #12]
  40eb04:	6920      	ldr	r0, [r4, #16]
  40eb06:	e7de      	b.n	40eac6 <__swsetup_r+0x1e>
  40eb08:	6963      	ldr	r3, [r4, #20]
  40eb0a:	2200      	movs	r2, #0
  40eb0c:	425b      	negs	r3, r3
  40eb0e:	60a2      	str	r2, [r4, #8]
  40eb10:	61a3      	str	r3, [r4, #24]
  40eb12:	2800      	cmp	r0, #0
  40eb14:	d1df      	bne.n	40ead6 <__swsetup_r+0x2e>
  40eb16:	89a3      	ldrh	r3, [r4, #12]
  40eb18:	061a      	lsls	r2, r3, #24
  40eb1a:	d5dd      	bpl.n	40ead8 <__swsetup_r+0x30>
  40eb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40eb20:	f04f 30ff 	mov.w	r0, #4294967295
  40eb24:	81a3      	strh	r3, [r4, #12]
  40eb26:	bd38      	pop	{r3, r4, r5, pc}
  40eb28:	f001 f98c 	bl	40fe44 <__sinit>
  40eb2c:	e7c5      	b.n	40eaba <__swsetup_r+0x12>
  40eb2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40eb30:	b149      	cbz	r1, 40eb46 <__swsetup_r+0x9e>
  40eb32:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40eb36:	4299      	cmp	r1, r3
  40eb38:	d003      	beq.n	40eb42 <__swsetup_r+0x9a>
  40eb3a:	4628      	mov	r0, r5
  40eb3c:	f001 fa5a 	bl	40fff4 <_free_r>
  40eb40:	89a2      	ldrh	r2, [r4, #12]
  40eb42:	2300      	movs	r3, #0
  40eb44:	6323      	str	r3, [r4, #48]	; 0x30
  40eb46:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40eb4a:	2300      	movs	r3, #0
  40eb4c:	6920      	ldr	r0, [r4, #16]
  40eb4e:	b292      	uxth	r2, r2
  40eb50:	e884 0009 	stmia.w	r4, {r0, r3}
  40eb54:	e7c6      	b.n	40eae4 <__swsetup_r+0x3c>
  40eb56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40eb5a:	2309      	movs	r3, #9
  40eb5c:	f04f 30ff 	mov.w	r0, #4294967295
  40eb60:	602b      	str	r3, [r5, #0]
  40eb62:	81a2      	strh	r2, [r4, #12]
  40eb64:	bd38      	pop	{r3, r4, r5, pc}
  40eb66:	bf00      	nop
  40eb68:	204004d8 	.word	0x204004d8

0040eb6c <register_fini>:
  40eb6c:	4b02      	ldr	r3, [pc, #8]	; (40eb78 <register_fini+0xc>)
  40eb6e:	b113      	cbz	r3, 40eb76 <register_fini+0xa>
  40eb70:	4802      	ldr	r0, [pc, #8]	; (40eb7c <register_fini+0x10>)
  40eb72:	f000 b80d 	b.w	40eb90 <atexit>
  40eb76:	4770      	bx	lr
  40eb78:	00000000 	.word	0x00000000
  40eb7c:	0040fe59 	.word	0x0040fe59

0040eb80 <abort>:
  40eb80:	b508      	push	{r3, lr}
  40eb82:	2006      	movs	r0, #6
  40eb84:	f003 f814 	bl	411bb0 <raise>
  40eb88:	2001      	movs	r0, #1
  40eb8a:	f7f4 fdc3 	bl	403714 <_exit>
  40eb8e:	bf00      	nop

0040eb90 <atexit>:
  40eb90:	4601      	mov	r1, r0
  40eb92:	2000      	movs	r0, #0
  40eb94:	4602      	mov	r2, r0
  40eb96:	4603      	mov	r3, r0
  40eb98:	f003 b9de 	b.w	411f58 <__register_exitproc>

0040eb9c <quorem>:
  40eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eba0:	6903      	ldr	r3, [r0, #16]
  40eba2:	b083      	sub	sp, #12
  40eba4:	690f      	ldr	r7, [r1, #16]
  40eba6:	429f      	cmp	r7, r3
  40eba8:	f300 8093 	bgt.w	40ecd2 <quorem+0x136>
  40ebac:	3f01      	subs	r7, #1
  40ebae:	f101 0614 	add.w	r6, r1, #20
  40ebb2:	f100 0a14 	add.w	sl, r0, #20
  40ebb6:	00bb      	lsls	r3, r7, #2
  40ebb8:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  40ebbc:	461d      	mov	r5, r3
  40ebbe:	9300      	str	r3, [sp, #0]
  40ebc0:	3201      	adds	r2, #1
  40ebc2:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  40ebc6:	eb0a 0405 	add.w	r4, sl, r5
  40ebca:	eb06 0905 	add.w	r9, r6, r5
  40ebce:	fbb3 f8f2 	udiv	r8, r3, r2
  40ebd2:	9401      	str	r4, [sp, #4]
  40ebd4:	f1b8 0f00 	cmp.w	r8, #0
  40ebd8:	d040      	beq.n	40ec5c <quorem+0xc0>
  40ebda:	2500      	movs	r5, #0
  40ebdc:	46b4      	mov	ip, r6
  40ebde:	46d6      	mov	lr, sl
  40ebe0:	462b      	mov	r3, r5
  40ebe2:	f85c bb04 	ldr.w	fp, [ip], #4
  40ebe6:	f8de 2000 	ldr.w	r2, [lr]
  40ebea:	fa1f f48b 	uxth.w	r4, fp
  40ebee:	45e1      	cmp	r9, ip
  40ebf0:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  40ebf4:	fb04 5508 	mla	r5, r4, r8, r5
  40ebf8:	fb0b fb08 	mul.w	fp, fp, r8
  40ebfc:	b2ac      	uxth	r4, r5
  40ebfe:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  40ec02:	eba3 0304 	sub.w	r3, r3, r4
  40ec06:	fa1f fb85 	uxth.w	fp, r5
  40ec0a:	fa13 f482 	uxtah	r4, r3, r2
  40ec0e:	ea4f 4515 	mov.w	r5, r5, lsr #16
  40ec12:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40ec16:	fa1f fb84 	uxth.w	fp, r4
  40ec1a:	eb02 4324 	add.w	r3, r2, r4, asr #16
  40ec1e:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  40ec22:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ec26:	f84e 2b04 	str.w	r2, [lr], #4
  40ec2a:	d2da      	bcs.n	40ebe2 <quorem+0x46>
  40ec2c:	9b00      	ldr	r3, [sp, #0]
  40ec2e:	f85a 3003 	ldr.w	r3, [sl, r3]
  40ec32:	b99b      	cbnz	r3, 40ec5c <quorem+0xc0>
  40ec34:	9c01      	ldr	r4, [sp, #4]
  40ec36:	1f23      	subs	r3, r4, #4
  40ec38:	459a      	cmp	sl, r3
  40ec3a:	d20e      	bcs.n	40ec5a <quorem+0xbe>
  40ec3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40ec40:	b95b      	cbnz	r3, 40ec5a <quorem+0xbe>
  40ec42:	f1a4 0308 	sub.w	r3, r4, #8
  40ec46:	e001      	b.n	40ec4c <quorem+0xb0>
  40ec48:	6812      	ldr	r2, [r2, #0]
  40ec4a:	b932      	cbnz	r2, 40ec5a <quorem+0xbe>
  40ec4c:	459a      	cmp	sl, r3
  40ec4e:	461a      	mov	r2, r3
  40ec50:	f107 37ff 	add.w	r7, r7, #4294967295
  40ec54:	f1a3 0304 	sub.w	r3, r3, #4
  40ec58:	d3f6      	bcc.n	40ec48 <quorem+0xac>
  40ec5a:	6107      	str	r7, [r0, #16]
  40ec5c:	4604      	mov	r4, r0
  40ec5e:	f002 fb89 	bl	411374 <__mcmp>
  40ec62:	2800      	cmp	r0, #0
  40ec64:	db31      	blt.n	40ecca <quorem+0x12e>
  40ec66:	f108 0801 	add.w	r8, r8, #1
  40ec6a:	4655      	mov	r5, sl
  40ec6c:	2000      	movs	r0, #0
  40ec6e:	f856 1b04 	ldr.w	r1, [r6], #4
  40ec72:	682a      	ldr	r2, [r5, #0]
  40ec74:	b28b      	uxth	r3, r1
  40ec76:	45b1      	cmp	r9, r6
  40ec78:	ea4f 4111 	mov.w	r1, r1, lsr #16
  40ec7c:	eba0 0303 	sub.w	r3, r0, r3
  40ec80:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  40ec84:	fa13 f382 	uxtah	r3, r3, r2
  40ec88:	eb01 4223 	add.w	r2, r1, r3, asr #16
  40ec8c:	b29b      	uxth	r3, r3
  40ec8e:	ea4f 4022 	mov.w	r0, r2, asr #16
  40ec92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40ec96:	f845 3b04 	str.w	r3, [r5], #4
  40ec9a:	d2e8      	bcs.n	40ec6e <quorem+0xd2>
  40ec9c:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  40eca0:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  40eca4:	b98a      	cbnz	r2, 40ecca <quorem+0x12e>
  40eca6:	1f1a      	subs	r2, r3, #4
  40eca8:	4592      	cmp	sl, r2
  40ecaa:	d20d      	bcs.n	40ecc8 <quorem+0x12c>
  40ecac:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40ecb0:	b952      	cbnz	r2, 40ecc8 <quorem+0x12c>
  40ecb2:	3b08      	subs	r3, #8
  40ecb4:	e001      	b.n	40ecba <quorem+0x11e>
  40ecb6:	6812      	ldr	r2, [r2, #0]
  40ecb8:	b932      	cbnz	r2, 40ecc8 <quorem+0x12c>
  40ecba:	459a      	cmp	sl, r3
  40ecbc:	461a      	mov	r2, r3
  40ecbe:	f107 37ff 	add.w	r7, r7, #4294967295
  40ecc2:	f1a3 0304 	sub.w	r3, r3, #4
  40ecc6:	d3f6      	bcc.n	40ecb6 <quorem+0x11a>
  40ecc8:	6127      	str	r7, [r4, #16]
  40ecca:	4640      	mov	r0, r8
  40eccc:	b003      	add	sp, #12
  40ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecd2:	2000      	movs	r0, #0
  40ecd4:	b003      	add	sp, #12
  40ecd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ecda:	bf00      	nop
  40ecdc:	0000      	movs	r0, r0
	...

0040ece0 <_dtoa_r>:
  40ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ece4:	469b      	mov	fp, r3
  40ece6:	b099      	sub	sp, #100	; 0x64
  40ece8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  40ecea:	4604      	mov	r4, r0
  40ecec:	4692      	mov	sl, r2
  40ecee:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40ecf0:	b14b      	cbz	r3, 40ed06 <_dtoa_r+0x26>
  40ecf2:	6c46      	ldr	r6, [r0, #68]	; 0x44
  40ecf4:	2201      	movs	r2, #1
  40ecf6:	4619      	mov	r1, r3
  40ecf8:	40b2      	lsls	r2, r6
  40ecfa:	605e      	str	r6, [r3, #4]
  40ecfc:	609a      	str	r2, [r3, #8]
  40ecfe:	f002 f8f9 	bl	410ef4 <_Bfree>
  40ed02:	2300      	movs	r3, #0
  40ed04:	6423      	str	r3, [r4, #64]	; 0x40
  40ed06:	f1bb 0f00 	cmp.w	fp, #0
  40ed0a:	46d9      	mov	r9, fp
  40ed0c:	db33      	blt.n	40ed76 <_dtoa_r+0x96>
  40ed0e:	2300      	movs	r3, #0
  40ed10:	602b      	str	r3, [r5, #0]
  40ed12:	4b99      	ldr	r3, [pc, #612]	; (40ef78 <_dtoa_r+0x298>)
  40ed14:	461a      	mov	r2, r3
  40ed16:	ea09 0303 	and.w	r3, r9, r3
  40ed1a:	4293      	cmp	r3, r2
  40ed1c:	d014      	beq.n	40ed48 <_dtoa_r+0x68>
  40ed1e:	2200      	movs	r2, #0
  40ed20:	2300      	movs	r3, #0
  40ed22:	4650      	mov	r0, sl
  40ed24:	4659      	mov	r1, fp
  40ed26:	f7fb fe57 	bl	40a9d8 <__aeabi_dcmpeq>
  40ed2a:	4680      	mov	r8, r0
  40ed2c:	b348      	cbz	r0, 40ed82 <_dtoa_r+0xa2>
  40ed2e:	2301      	movs	r3, #1
  40ed30:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40ed32:	6013      	str	r3, [r2, #0]
  40ed34:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ed36:	2b00      	cmp	r3, #0
  40ed38:	f000 80cb 	beq.w	40eed2 <_dtoa_r+0x1f2>
  40ed3c:	488f      	ldr	r0, [pc, #572]	; (40ef7c <_dtoa_r+0x29c>)
  40ed3e:	6018      	str	r0, [r3, #0]
  40ed40:	3801      	subs	r0, #1
  40ed42:	b019      	add	sp, #100	; 0x64
  40ed44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed48:	f242 730f 	movw	r3, #9999	; 0x270f
  40ed4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40ed4e:	6013      	str	r3, [r2, #0]
  40ed50:	f1ba 0f00 	cmp.w	sl, #0
  40ed54:	f000 80a6 	beq.w	40eea4 <_dtoa_r+0x1c4>
  40ed58:	4889      	ldr	r0, [pc, #548]	; (40ef80 <_dtoa_r+0x2a0>)
  40ed5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ed5c:	2b00      	cmp	r3, #0
  40ed5e:	d0f0      	beq.n	40ed42 <_dtoa_r+0x62>
  40ed60:	78c3      	ldrb	r3, [r0, #3]
  40ed62:	2b00      	cmp	r3, #0
  40ed64:	f000 80b7 	beq.w	40eed6 <_dtoa_r+0x1f6>
  40ed68:	f100 0308 	add.w	r3, r0, #8
  40ed6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40ed6e:	6013      	str	r3, [r2, #0]
  40ed70:	b019      	add	sp, #100	; 0x64
  40ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ed76:	2301      	movs	r3, #1
  40ed78:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  40ed7c:	602b      	str	r3, [r5, #0]
  40ed7e:	46cb      	mov	fp, r9
  40ed80:	e7c7      	b.n	40ed12 <_dtoa_r+0x32>
  40ed82:	ad17      	add	r5, sp, #92	; 0x5c
  40ed84:	a916      	add	r1, sp, #88	; 0x58
  40ed86:	4620      	mov	r0, r4
  40ed88:	4652      	mov	r2, sl
  40ed8a:	9500      	str	r5, [sp, #0]
  40ed8c:	465b      	mov	r3, fp
  40ed8e:	9101      	str	r1, [sp, #4]
  40ed90:	f002 fc0e 	bl	4115b0 <__d2b>
  40ed94:	9006      	str	r0, [sp, #24]
  40ed96:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40ed9a:	f040 808c 	bne.w	40eeb6 <_dtoa_r+0x1d6>
  40ed9e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40eda2:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  40eda6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40eda8:	4445      	add	r5, r8
  40edaa:	429d      	cmp	r5, r3
  40edac:	f2c0 81cc 	blt.w	40f148 <_dtoa_r+0x468>
  40edb0:	331f      	adds	r3, #31
  40edb2:	f205 4212 	addw	r2, r5, #1042	; 0x412
  40edb6:	1b5b      	subs	r3, r3, r5
  40edb8:	fa2a f002 	lsr.w	r0, sl, r2
  40edbc:	fa09 f903 	lsl.w	r9, r9, r3
  40edc0:	ea49 0000 	orr.w	r0, r9, r0
  40edc4:	f7fb fb2a 	bl	40a41c <__aeabi_ui2d>
  40edc8:	3d01      	subs	r5, #1
  40edca:	2301      	movs	r3, #1
  40edcc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40edd0:	9311      	str	r3, [sp, #68]	; 0x44
  40edd2:	2200      	movs	r2, #0
  40edd4:	4b6b      	ldr	r3, [pc, #428]	; (40ef84 <_dtoa_r+0x2a4>)
  40edd6:	f7fb f9e3 	bl	40a1a0 <__aeabi_dsub>
  40edda:	a361      	add	r3, pc, #388	; (adr r3, 40ef60 <_dtoa_r+0x280>)
  40eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ede0:	f7fb fb92 	bl	40a508 <__aeabi_dmul>
  40ede4:	a360      	add	r3, pc, #384	; (adr r3, 40ef68 <_dtoa_r+0x288>)
  40ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40edea:	f7fb f9db 	bl	40a1a4 <__adddf3>
  40edee:	4606      	mov	r6, r0
  40edf0:	460f      	mov	r7, r1
  40edf2:	4628      	mov	r0, r5
  40edf4:	f7fb fb22 	bl	40a43c <__aeabi_i2d>
  40edf8:	a35d      	add	r3, pc, #372	; (adr r3, 40ef70 <_dtoa_r+0x290>)
  40edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40edfe:	f7fb fb83 	bl	40a508 <__aeabi_dmul>
  40ee02:	4602      	mov	r2, r0
  40ee04:	460b      	mov	r3, r1
  40ee06:	4630      	mov	r0, r6
  40ee08:	4639      	mov	r1, r7
  40ee0a:	f7fb f9cb 	bl	40a1a4 <__adddf3>
  40ee0e:	4606      	mov	r6, r0
  40ee10:	460f      	mov	r7, r1
  40ee12:	f7fb fe13 	bl	40aa3c <__aeabi_d2iz>
  40ee16:	2200      	movs	r2, #0
  40ee18:	9002      	str	r0, [sp, #8]
  40ee1a:	4639      	mov	r1, r7
  40ee1c:	4630      	mov	r0, r6
  40ee1e:	2300      	movs	r3, #0
  40ee20:	f7fb fde4 	bl	40a9ec <__aeabi_dcmplt>
  40ee24:	2800      	cmp	r0, #0
  40ee26:	f040 8171 	bne.w	40f10c <_dtoa_r+0x42c>
  40ee2a:	9b02      	ldr	r3, [sp, #8]
  40ee2c:	2b16      	cmp	r3, #22
  40ee2e:	f200 8091 	bhi.w	40ef54 <_dtoa_r+0x274>
  40ee32:	9802      	ldr	r0, [sp, #8]
  40ee34:	4652      	mov	r2, sl
  40ee36:	4954      	ldr	r1, [pc, #336]	; (40ef88 <_dtoa_r+0x2a8>)
  40ee38:	465b      	mov	r3, fp
  40ee3a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40ee3e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ee42:	f7fb fdf1 	bl	40aa28 <__aeabi_dcmpgt>
  40ee46:	2800      	cmp	r0, #0
  40ee48:	f000 817c 	beq.w	40f144 <_dtoa_r+0x464>
  40ee4c:	9b02      	ldr	r3, [sp, #8]
  40ee4e:	3b01      	subs	r3, #1
  40ee50:	9302      	str	r3, [sp, #8]
  40ee52:	2300      	movs	r3, #0
  40ee54:	930d      	str	r3, [sp, #52]	; 0x34
  40ee56:	ebc5 0508 	rsb	r5, r5, r8
  40ee5a:	1e6b      	subs	r3, r5, #1
  40ee5c:	9303      	str	r3, [sp, #12]
  40ee5e:	f100 816c 	bmi.w	40f13a <_dtoa_r+0x45a>
  40ee62:	2300      	movs	r3, #0
  40ee64:	9307      	str	r3, [sp, #28]
  40ee66:	9b02      	ldr	r3, [sp, #8]
  40ee68:	2b00      	cmp	r3, #0
  40ee6a:	f2c0 815d 	blt.w	40f128 <_dtoa_r+0x448>
  40ee6e:	9a03      	ldr	r2, [sp, #12]
  40ee70:	930c      	str	r3, [sp, #48]	; 0x30
  40ee72:	4611      	mov	r1, r2
  40ee74:	4419      	add	r1, r3
  40ee76:	2300      	movs	r3, #0
  40ee78:	9103      	str	r1, [sp, #12]
  40ee7a:	930a      	str	r3, [sp, #40]	; 0x28
  40ee7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ee7e:	2b09      	cmp	r3, #9
  40ee80:	d82b      	bhi.n	40eeda <_dtoa_r+0x1fa>
  40ee82:	2b05      	cmp	r3, #5
  40ee84:	f340 867e 	ble.w	40fb84 <_dtoa_r+0xea4>
  40ee88:	3b04      	subs	r3, #4
  40ee8a:	2500      	movs	r5, #0
  40ee8c:	9322      	str	r3, [sp, #136]	; 0x88
  40ee8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40ee90:	3b02      	subs	r3, #2
  40ee92:	2b03      	cmp	r3, #3
  40ee94:	f200 8679 	bhi.w	40fb8a <_dtoa_r+0xeaa>
  40ee98:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ee9c:	0289029b 	.word	0x0289029b
  40eea0:	068d0180 	.word	0x068d0180
  40eea4:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40eea8:	4b35      	ldr	r3, [pc, #212]	; (40ef80 <_dtoa_r+0x2a0>)
  40eeaa:	4a38      	ldr	r2, [pc, #224]	; (40ef8c <_dtoa_r+0x2ac>)
  40eeac:	2800      	cmp	r0, #0
  40eeae:	bf14      	ite	ne
  40eeb0:	4618      	movne	r0, r3
  40eeb2:	4610      	moveq	r0, r2
  40eeb4:	e751      	b.n	40ed5a <_dtoa_r+0x7a>
  40eeb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40eeba:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  40eebe:	4650      	mov	r0, sl
  40eec0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40eec4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40eec8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  40eecc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40eed0:	e77f      	b.n	40edd2 <_dtoa_r+0xf2>
  40eed2:	482f      	ldr	r0, [pc, #188]	; (40ef90 <_dtoa_r+0x2b0>)
  40eed4:	e735      	b.n	40ed42 <_dtoa_r+0x62>
  40eed6:	1cc3      	adds	r3, r0, #3
  40eed8:	e748      	b.n	40ed6c <_dtoa_r+0x8c>
  40eeda:	f04f 33ff 	mov.w	r3, #4294967295
  40eede:	2100      	movs	r1, #0
  40eee0:	4620      	mov	r0, r4
  40eee2:	461d      	mov	r5, r3
  40eee4:	9310      	str	r3, [sp, #64]	; 0x40
  40eee6:	2301      	movs	r3, #1
  40eee8:	6461      	str	r1, [r4, #68]	; 0x44
  40eeea:	9123      	str	r1, [sp, #140]	; 0x8c
  40eeec:	930b      	str	r3, [sp, #44]	; 0x2c
  40eeee:	f001 ffd9 	bl	410ea4 <_Balloc>
  40eef2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40eef4:	9005      	str	r0, [sp, #20]
  40eef6:	9322      	str	r3, [sp, #136]	; 0x88
  40eef8:	9504      	str	r5, [sp, #16]
  40eefa:	6420      	str	r0, [r4, #64]	; 0x40
  40eefc:	9a02      	ldr	r2, [sp, #8]
  40eefe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40ef00:	2a0e      	cmp	r2, #14
  40ef02:	dc49      	bgt.n	40ef98 <_dtoa_r+0x2b8>
  40ef04:	2b00      	cmp	r3, #0
  40ef06:	db47      	blt.n	40ef98 <_dtoa_r+0x2b8>
  40ef08:	4b1f      	ldr	r3, [pc, #124]	; (40ef88 <_dtoa_r+0x2a8>)
  40ef0a:	9a02      	ldr	r2, [sp, #8]
  40ef0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ef10:	e9d3 8900 	ldrd	r8, r9, [r3]
  40ef14:	9b04      	ldr	r3, [sp, #16]
  40ef16:	2b00      	cmp	r3, #0
  40ef18:	f300 825e 	bgt.w	40f3d8 <_dtoa_r+0x6f8>
  40ef1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ef1e:	2b00      	cmp	r3, #0
  40ef20:	f280 825a 	bge.w	40f3d8 <_dtoa_r+0x6f8>
  40ef24:	9b04      	ldr	r3, [sp, #16]
  40ef26:	2b00      	cmp	r3, #0
  40ef28:	f040 85bf 	bne.w	40faaa <_dtoa_r+0xdca>
  40ef2c:	2200      	movs	r2, #0
  40ef2e:	4b19      	ldr	r3, [pc, #100]	; (40ef94 <_dtoa_r+0x2b4>)
  40ef30:	4640      	mov	r0, r8
  40ef32:	4649      	mov	r1, r9
  40ef34:	f7fb fae8 	bl	40a508 <__aeabi_dmul>
  40ef38:	4652      	mov	r2, sl
  40ef3a:	465b      	mov	r3, fp
  40ef3c:	f7fb fd6a 	bl	40aa14 <__aeabi_dcmpge>
  40ef40:	9f04      	ldr	r7, [sp, #16]
  40ef42:	9708      	str	r7, [sp, #32]
  40ef44:	2800      	cmp	r0, #0
  40ef46:	f000 80bd 	beq.w	40f0c4 <_dtoa_r+0x3e4>
  40ef4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40ef4c:	9d05      	ldr	r5, [sp, #20]
  40ef4e:	43db      	mvns	r3, r3
  40ef50:	9302      	str	r3, [sp, #8]
  40ef52:	e0be      	b.n	40f0d2 <_dtoa_r+0x3f2>
  40ef54:	2301      	movs	r3, #1
  40ef56:	930d      	str	r3, [sp, #52]	; 0x34
  40ef58:	e77d      	b.n	40ee56 <_dtoa_r+0x176>
  40ef5a:	bf00      	nop
  40ef5c:	f3af 8000 	nop.w
  40ef60:	636f4361 	.word	0x636f4361
  40ef64:	3fd287a7 	.word	0x3fd287a7
  40ef68:	8b60c8b3 	.word	0x8b60c8b3
  40ef6c:	3fc68a28 	.word	0x3fc68a28
  40ef70:	509f79fb 	.word	0x509f79fb
  40ef74:	3fd34413 	.word	0x3fd34413
  40ef78:	7ff00000 	.word	0x7ff00000
  40ef7c:	00413629 	.word	0x00413629
  40ef80:	0041375c 	.word	0x0041375c
  40ef84:	3ff80000 	.word	0x3ff80000
  40ef88:	00413870 	.word	0x00413870
  40ef8c:	00413750 	.word	0x00413750
  40ef90:	00413628 	.word	0x00413628
  40ef94:	40140000 	.word	0x40140000
  40ef98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ef9a:	2a00      	cmp	r2, #0
  40ef9c:	f040 80e1 	bne.w	40f162 <_dtoa_r+0x482>
  40efa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40efa2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40efa4:	9d07      	ldr	r5, [sp, #28]
  40efa6:	9308      	str	r3, [sp, #32]
  40efa8:	9903      	ldr	r1, [sp, #12]
  40efaa:	2900      	cmp	r1, #0
  40efac:	460b      	mov	r3, r1
  40efae:	dd0a      	ble.n	40efc6 <_dtoa_r+0x2e6>
  40efb0:	2d00      	cmp	r5, #0
  40efb2:	dd08      	ble.n	40efc6 <_dtoa_r+0x2e6>
  40efb4:	42a9      	cmp	r1, r5
  40efb6:	9a07      	ldr	r2, [sp, #28]
  40efb8:	bfa8      	it	ge
  40efba:	462b      	movge	r3, r5
  40efbc:	1ad2      	subs	r2, r2, r3
  40efbe:	1aed      	subs	r5, r5, r3
  40efc0:	1acb      	subs	r3, r1, r3
  40efc2:	9207      	str	r2, [sp, #28]
  40efc4:	9303      	str	r3, [sp, #12]
  40efc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40efc8:	2b00      	cmp	r3, #0
  40efca:	dd1b      	ble.n	40f004 <_dtoa_r+0x324>
  40efcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40efce:	2b00      	cmp	r3, #0
  40efd0:	f000 84ce 	beq.w	40f970 <_dtoa_r+0xc90>
  40efd4:	2e00      	cmp	r6, #0
  40efd6:	dd11      	ble.n	40effc <_dtoa_r+0x31c>
  40efd8:	9908      	ldr	r1, [sp, #32]
  40efda:	4632      	mov	r2, r6
  40efdc:	4620      	mov	r0, r4
  40efde:	f002 f91f 	bl	411220 <__pow5mult>
  40efe2:	9f06      	ldr	r7, [sp, #24]
  40efe4:	4601      	mov	r1, r0
  40efe6:	9008      	str	r0, [sp, #32]
  40efe8:	463a      	mov	r2, r7
  40efea:	4620      	mov	r0, r4
  40efec:	f002 f876 	bl	4110dc <__multiply>
  40eff0:	4603      	mov	r3, r0
  40eff2:	4639      	mov	r1, r7
  40eff4:	4620      	mov	r0, r4
  40eff6:	9306      	str	r3, [sp, #24]
  40eff8:	f001 ff7c 	bl	410ef4 <_Bfree>
  40effc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40effe:	1b9a      	subs	r2, r3, r6
  40f000:	f040 84ff 	bne.w	40fa02 <_dtoa_r+0xd22>
  40f004:	4620      	mov	r0, r4
  40f006:	2101      	movs	r1, #1
  40f008:	f002 f85e 	bl	4110c8 <__i2b>
  40f00c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f00e:	4607      	mov	r7, r0
  40f010:	2b00      	cmp	r3, #0
  40f012:	f340 8282 	ble.w	40f51a <_dtoa_r+0x83a>
  40f016:	4601      	mov	r1, r0
  40f018:	461a      	mov	r2, r3
  40f01a:	4620      	mov	r0, r4
  40f01c:	f002 f900 	bl	411220 <__pow5mult>
  40f020:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40f022:	4607      	mov	r7, r0
  40f024:	2b01      	cmp	r3, #1
  40f026:	f340 84f3 	ble.w	40fa10 <_dtoa_r+0xd30>
  40f02a:	f04f 0800 	mov.w	r8, #0
  40f02e:	693b      	ldr	r3, [r7, #16]
  40f030:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40f034:	6918      	ldr	r0, [r3, #16]
  40f036:	f001 fff3 	bl	411020 <__hi0bits>
  40f03a:	f1c0 0020 	rsb	r0, r0, #32
  40f03e:	9b03      	ldr	r3, [sp, #12]
  40f040:	4418      	add	r0, r3
  40f042:	f010 001f 	ands.w	r0, r0, #31
  40f046:	f000 82a0 	beq.w	40f58a <_dtoa_r+0x8aa>
  40f04a:	f1c0 0320 	rsb	r3, r0, #32
  40f04e:	2b04      	cmp	r3, #4
  40f050:	f340 8592 	ble.w	40fb78 <_dtoa_r+0xe98>
  40f054:	f1c0 001c 	rsb	r0, r0, #28
  40f058:	9b07      	ldr	r3, [sp, #28]
  40f05a:	4405      	add	r5, r0
  40f05c:	4403      	add	r3, r0
  40f05e:	9307      	str	r3, [sp, #28]
  40f060:	9b03      	ldr	r3, [sp, #12]
  40f062:	4403      	add	r3, r0
  40f064:	9303      	str	r3, [sp, #12]
  40f066:	9b07      	ldr	r3, [sp, #28]
  40f068:	2b00      	cmp	r3, #0
  40f06a:	dd05      	ble.n	40f078 <_dtoa_r+0x398>
  40f06c:	9906      	ldr	r1, [sp, #24]
  40f06e:	461a      	mov	r2, r3
  40f070:	4620      	mov	r0, r4
  40f072:	f002 f925 	bl	4112c0 <__lshift>
  40f076:	9006      	str	r0, [sp, #24]
  40f078:	9b03      	ldr	r3, [sp, #12]
  40f07a:	2b00      	cmp	r3, #0
  40f07c:	dd05      	ble.n	40f08a <_dtoa_r+0x3aa>
  40f07e:	4639      	mov	r1, r7
  40f080:	461a      	mov	r2, r3
  40f082:	4620      	mov	r0, r4
  40f084:	f002 f91c 	bl	4112c0 <__lshift>
  40f088:	4607      	mov	r7, r0
  40f08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f08c:	2b00      	cmp	r3, #0
  40f08e:	f040 838b 	bne.w	40f7a8 <_dtoa_r+0xac8>
  40f092:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40f094:	2b02      	cmp	r3, #2
  40f096:	f340 827a 	ble.w	40f58e <_dtoa_r+0x8ae>
  40f09a:	9b04      	ldr	r3, [sp, #16]
  40f09c:	2b00      	cmp	r3, #0
  40f09e:	f300 8276 	bgt.w	40f58e <_dtoa_r+0x8ae>
  40f0a2:	9b04      	ldr	r3, [sp, #16]
  40f0a4:	2b00      	cmp	r3, #0
  40f0a6:	f47f af50 	bne.w	40ef4a <_dtoa_r+0x26a>
  40f0aa:	4639      	mov	r1, r7
  40f0ac:	2205      	movs	r2, #5
  40f0ae:	4620      	mov	r0, r4
  40f0b0:	f001 ff2a 	bl	410f08 <__multadd>
  40f0b4:	4607      	mov	r7, r0
  40f0b6:	9806      	ldr	r0, [sp, #24]
  40f0b8:	4639      	mov	r1, r7
  40f0ba:	f002 f95b 	bl	411374 <__mcmp>
  40f0be:	2800      	cmp	r0, #0
  40f0c0:	f77f af43 	ble.w	40ef4a <_dtoa_r+0x26a>
  40f0c4:	9a02      	ldr	r2, [sp, #8]
  40f0c6:	2331      	movs	r3, #49	; 0x31
  40f0c8:	3201      	adds	r2, #1
  40f0ca:	9202      	str	r2, [sp, #8]
  40f0cc:	9a05      	ldr	r2, [sp, #20]
  40f0ce:	1c55      	adds	r5, r2, #1
  40f0d0:	7013      	strb	r3, [r2, #0]
  40f0d2:	4639      	mov	r1, r7
  40f0d4:	4620      	mov	r0, r4
  40f0d6:	f001 ff0d 	bl	410ef4 <_Bfree>
  40f0da:	9b08      	ldr	r3, [sp, #32]
  40f0dc:	b11b      	cbz	r3, 40f0e6 <_dtoa_r+0x406>
  40f0de:	9908      	ldr	r1, [sp, #32]
  40f0e0:	4620      	mov	r0, r4
  40f0e2:	f001 ff07 	bl	410ef4 <_Bfree>
  40f0e6:	4620      	mov	r0, r4
  40f0e8:	9906      	ldr	r1, [sp, #24]
  40f0ea:	f001 ff03 	bl	410ef4 <_Bfree>
  40f0ee:	2200      	movs	r2, #0
  40f0f0:	9b02      	ldr	r3, [sp, #8]
  40f0f2:	702a      	strb	r2, [r5, #0]
  40f0f4:	3301      	adds	r3, #1
  40f0f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40f0f8:	6013      	str	r3, [r2, #0]
  40f0fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40f0fc:	2b00      	cmp	r3, #0
  40f0fe:	f000 82a3 	beq.w	40f648 <_dtoa_r+0x968>
  40f102:	9805      	ldr	r0, [sp, #20]
  40f104:	601d      	str	r5, [r3, #0]
  40f106:	b019      	add	sp, #100	; 0x64
  40f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f10c:	9802      	ldr	r0, [sp, #8]
  40f10e:	f7fb f995 	bl	40a43c <__aeabi_i2d>
  40f112:	4632      	mov	r2, r6
  40f114:	463b      	mov	r3, r7
  40f116:	f7fb fc5f 	bl	40a9d8 <__aeabi_dcmpeq>
  40f11a:	2800      	cmp	r0, #0
  40f11c:	f47f ae85 	bne.w	40ee2a <_dtoa_r+0x14a>
  40f120:	9b02      	ldr	r3, [sp, #8]
  40f122:	3b01      	subs	r3, #1
  40f124:	9302      	str	r3, [sp, #8]
  40f126:	e680      	b.n	40ee2a <_dtoa_r+0x14a>
  40f128:	9a07      	ldr	r2, [sp, #28]
  40f12a:	9b02      	ldr	r3, [sp, #8]
  40f12c:	1ad2      	subs	r2, r2, r3
  40f12e:	425b      	negs	r3, r3
  40f130:	930a      	str	r3, [sp, #40]	; 0x28
  40f132:	2300      	movs	r3, #0
  40f134:	9207      	str	r2, [sp, #28]
  40f136:	930c      	str	r3, [sp, #48]	; 0x30
  40f138:	e6a0      	b.n	40ee7c <_dtoa_r+0x19c>
  40f13a:	425b      	negs	r3, r3
  40f13c:	9307      	str	r3, [sp, #28]
  40f13e:	2300      	movs	r3, #0
  40f140:	9303      	str	r3, [sp, #12]
  40f142:	e690      	b.n	40ee66 <_dtoa_r+0x186>
  40f144:	900d      	str	r0, [sp, #52]	; 0x34
  40f146:	e686      	b.n	40ee56 <_dtoa_r+0x176>
  40f148:	4bbd      	ldr	r3, [pc, #756]	; (40f440 <_dtoa_r+0x760>)
  40f14a:	1b5b      	subs	r3, r3, r5
  40f14c:	fa0a f003 	lsl.w	r0, sl, r3
  40f150:	e638      	b.n	40edc4 <_dtoa_r+0xe4>
  40f152:	2100      	movs	r1, #0
  40f154:	f04f 32ff 	mov.w	r2, #4294967295
  40f158:	9123      	str	r1, [sp, #140]	; 0x8c
  40f15a:	2101      	movs	r1, #1
  40f15c:	9204      	str	r2, [sp, #16]
  40f15e:	910b      	str	r1, [sp, #44]	; 0x2c
  40f160:	9210      	str	r2, [sp, #64]	; 0x40
  40f162:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40f164:	2a01      	cmp	r2, #1
  40f166:	f340 8460 	ble.w	40fa2a <_dtoa_r+0xd4a>
  40f16a:	9b04      	ldr	r3, [sp, #16]
  40f16c:	1e5e      	subs	r6, r3, #1
  40f16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f170:	42b3      	cmp	r3, r6
  40f172:	f2c0 8405 	blt.w	40f980 <_dtoa_r+0xca0>
  40f176:	1b9e      	subs	r6, r3, r6
  40f178:	9b04      	ldr	r3, [sp, #16]
  40f17a:	2b00      	cmp	r3, #0
  40f17c:	f2c0 8461 	blt.w	40fa42 <_dtoa_r+0xd62>
  40f180:	9d07      	ldr	r5, [sp, #28]
  40f182:	9b04      	ldr	r3, [sp, #16]
  40f184:	9a07      	ldr	r2, [sp, #28]
  40f186:	4620      	mov	r0, r4
  40f188:	2101      	movs	r1, #1
  40f18a:	441a      	add	r2, r3
  40f18c:	9207      	str	r2, [sp, #28]
  40f18e:	9a03      	ldr	r2, [sp, #12]
  40f190:	441a      	add	r2, r3
  40f192:	9203      	str	r2, [sp, #12]
  40f194:	f001 ff98 	bl	4110c8 <__i2b>
  40f198:	9008      	str	r0, [sp, #32]
  40f19a:	e705      	b.n	40efa8 <_dtoa_r+0x2c8>
  40f19c:	2301      	movs	r3, #1
  40f19e:	930b      	str	r3, [sp, #44]	; 0x2c
  40f1a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f1a2:	2b00      	cmp	r3, #0
  40f1a4:	f340 83df 	ble.w	40f966 <_dtoa_r+0xc86>
  40f1a8:	2b0e      	cmp	r3, #14
  40f1aa:	bf8c      	ite	hi
  40f1ac:	2500      	movhi	r5, #0
  40f1ae:	f005 0501 	andls.w	r5, r5, #1
  40f1b2:	461e      	mov	r6, r3
  40f1b4:	9310      	str	r3, [sp, #64]	; 0x40
  40f1b6:	9304      	str	r3, [sp, #16]
  40f1b8:	2100      	movs	r1, #0
  40f1ba:	2e17      	cmp	r6, #23
  40f1bc:	6461      	str	r1, [r4, #68]	; 0x44
  40f1be:	d909      	bls.n	40f1d4 <_dtoa_r+0x4f4>
  40f1c0:	2201      	movs	r2, #1
  40f1c2:	2304      	movs	r3, #4
  40f1c4:	005b      	lsls	r3, r3, #1
  40f1c6:	4611      	mov	r1, r2
  40f1c8:	3201      	adds	r2, #1
  40f1ca:	f103 0014 	add.w	r0, r3, #20
  40f1ce:	42b0      	cmp	r0, r6
  40f1d0:	d9f8      	bls.n	40f1c4 <_dtoa_r+0x4e4>
  40f1d2:	6461      	str	r1, [r4, #68]	; 0x44
  40f1d4:	4620      	mov	r0, r4
  40f1d6:	f001 fe65 	bl	410ea4 <_Balloc>
  40f1da:	9005      	str	r0, [sp, #20]
  40f1dc:	6420      	str	r0, [r4, #64]	; 0x40
  40f1de:	2d00      	cmp	r5, #0
  40f1e0:	f43f ae8c 	beq.w	40eefc <_dtoa_r+0x21c>
  40f1e4:	9802      	ldr	r0, [sp, #8]
  40f1e6:	2800      	cmp	r0, #0
  40f1e8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  40f1ec:	f340 8233 	ble.w	40f656 <_dtoa_r+0x976>
  40f1f0:	4a94      	ldr	r2, [pc, #592]	; (40f444 <_dtoa_r+0x764>)
  40f1f2:	f000 030f 	and.w	r3, r0, #15
  40f1f6:	1105      	asrs	r5, r0, #4
  40f1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40f1fc:	06ea      	lsls	r2, r5, #27
  40f1fe:	e9d3 6700 	ldrd	r6, r7, [r3]
  40f202:	f140 821c 	bpl.w	40f63e <_dtoa_r+0x95e>
  40f206:	4b90      	ldr	r3, [pc, #576]	; (40f448 <_dtoa_r+0x768>)
  40f208:	4650      	mov	r0, sl
  40f20a:	4659      	mov	r1, fp
  40f20c:	f005 050f 	and.w	r5, r5, #15
  40f210:	f04f 0803 	mov.w	r8, #3
  40f214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40f218:	f7fb faa0 	bl	40a75c <__aeabi_ddiv>
  40f21c:	4682      	mov	sl, r0
  40f21e:	468b      	mov	fp, r1
  40f220:	b18d      	cbz	r5, 40f246 <_dtoa_r+0x566>
  40f222:	f8df 9224 	ldr.w	r9, [pc, #548]	; 40f448 <_dtoa_r+0x768>
  40f226:	07eb      	lsls	r3, r5, #31
  40f228:	4630      	mov	r0, r6
  40f22a:	4639      	mov	r1, r7
  40f22c:	d507      	bpl.n	40f23e <_dtoa_r+0x55e>
  40f22e:	f108 0801 	add.w	r8, r8, #1
  40f232:	e9d9 2300 	ldrd	r2, r3, [r9]
  40f236:	f7fb f967 	bl	40a508 <__aeabi_dmul>
  40f23a:	4606      	mov	r6, r0
  40f23c:	460f      	mov	r7, r1
  40f23e:	106d      	asrs	r5, r5, #1
  40f240:	f109 0908 	add.w	r9, r9, #8
  40f244:	d1ef      	bne.n	40f226 <_dtoa_r+0x546>
  40f246:	4650      	mov	r0, sl
  40f248:	4659      	mov	r1, fp
  40f24a:	4632      	mov	r2, r6
  40f24c:	463b      	mov	r3, r7
  40f24e:	f7fb fa85 	bl	40a75c <__aeabi_ddiv>
  40f252:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40f256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40f258:	b143      	cbz	r3, 40f26c <_dtoa_r+0x58c>
  40f25a:	2200      	movs	r2, #0
  40f25c:	4b7b      	ldr	r3, [pc, #492]	; (40f44c <_dtoa_r+0x76c>)
  40f25e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f262:	f7fb fbc3 	bl	40a9ec <__aeabi_dcmplt>
  40f266:	2800      	cmp	r0, #0
  40f268:	f040 8393 	bne.w	40f992 <_dtoa_r+0xcb2>
  40f26c:	4640      	mov	r0, r8
  40f26e:	f7fb f8e5 	bl	40a43c <__aeabi_i2d>
  40f272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40f276:	f7fb f947 	bl	40a508 <__aeabi_dmul>
  40f27a:	4b75      	ldr	r3, [pc, #468]	; (40f450 <_dtoa_r+0x770>)
  40f27c:	2200      	movs	r2, #0
  40f27e:	f7fa ff91 	bl	40a1a4 <__adddf3>
  40f282:	9b04      	ldr	r3, [sp, #16]
  40f284:	4606      	mov	r6, r0
  40f286:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40f28a:	2b00      	cmp	r3, #0
  40f28c:	f000 8161 	beq.w	40f552 <_dtoa_r+0x872>
  40f290:	9b02      	ldr	r3, [sp, #8]
  40f292:	f8dd c010 	ldr.w	ip, [sp, #16]
  40f296:	9314      	str	r3, [sp, #80]	; 0x50
  40f298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f29a:	2b00      	cmp	r3, #0
  40f29c:	f000 820b 	beq.w	40f6b6 <_dtoa_r+0x9d6>
  40f2a0:	4b68      	ldr	r3, [pc, #416]	; (40f444 <_dtoa_r+0x764>)
  40f2a2:	2000      	movs	r0, #0
  40f2a4:	9a05      	ldr	r2, [sp, #20]
  40f2a6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  40f2aa:	496a      	ldr	r1, [pc, #424]	; (40f454 <_dtoa_r+0x774>)
  40f2ac:	1c55      	adds	r5, r2, #1
  40f2ae:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  40f2b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40f2b6:	f7fb fa51 	bl	40a75c <__aeabi_ddiv>
  40f2ba:	4632      	mov	r2, r6
  40f2bc:	463b      	mov	r3, r7
  40f2be:	f7fa ff6f 	bl	40a1a0 <__aeabi_dsub>
  40f2c2:	4682      	mov	sl, r0
  40f2c4:	468b      	mov	fp, r1
  40f2c6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40f2ca:	4649      	mov	r1, r9
  40f2cc:	4640      	mov	r0, r8
  40f2ce:	f7fb fbb5 	bl	40aa3c <__aeabi_d2iz>
  40f2d2:	4606      	mov	r6, r0
  40f2d4:	f7fb f8b2 	bl	40a43c <__aeabi_i2d>
  40f2d8:	4602      	mov	r2, r0
  40f2da:	3630      	adds	r6, #48	; 0x30
  40f2dc:	460b      	mov	r3, r1
  40f2de:	4640      	mov	r0, r8
  40f2e0:	4649      	mov	r1, r9
  40f2e2:	f7fa ff5d 	bl	40a1a0 <__aeabi_dsub>
  40f2e6:	9f05      	ldr	r7, [sp, #20]
  40f2e8:	4680      	mov	r8, r0
  40f2ea:	4689      	mov	r9, r1
  40f2ec:	b2f6      	uxtb	r6, r6
  40f2ee:	4650      	mov	r0, sl
  40f2f0:	4659      	mov	r1, fp
  40f2f2:	4642      	mov	r2, r8
  40f2f4:	464b      	mov	r3, r9
  40f2f6:	703e      	strb	r6, [r7, #0]
  40f2f8:	f7fb fb96 	bl	40aa28 <__aeabi_dcmpgt>
  40f2fc:	2800      	cmp	r0, #0
  40f2fe:	f040 8243 	bne.w	40f788 <_dtoa_r+0xaa8>
  40f302:	4642      	mov	r2, r8
  40f304:	464b      	mov	r3, r9
  40f306:	2000      	movs	r0, #0
  40f308:	4950      	ldr	r1, [pc, #320]	; (40f44c <_dtoa_r+0x76c>)
  40f30a:	f7fa ff49 	bl	40a1a0 <__aeabi_dsub>
  40f30e:	4602      	mov	r2, r0
  40f310:	460b      	mov	r3, r1
  40f312:	4650      	mov	r0, sl
  40f314:	4659      	mov	r1, fp
  40f316:	f7fb fb87 	bl	40aa28 <__aeabi_dcmpgt>
  40f31a:	2800      	cmp	r0, #0
  40f31c:	f040 80eb 	bne.w	40f4f6 <_dtoa_r+0x816>
  40f320:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40f324:	f1bc 0f01 	cmp.w	ip, #1
  40f328:	f340 8192 	ble.w	40f650 <_dtoa_r+0x970>
  40f32c:	9f05      	ldr	r7, [sp, #20]
  40f32e:	9412      	str	r4, [sp, #72]	; 0x48
  40f330:	4467      	add	r7, ip
  40f332:	9708      	str	r7, [sp, #32]
  40f334:	e00e      	b.n	40f354 <_dtoa_r+0x674>
  40f336:	2000      	movs	r0, #0
  40f338:	4944      	ldr	r1, [pc, #272]	; (40f44c <_dtoa_r+0x76c>)
  40f33a:	f7fa ff31 	bl	40a1a0 <__aeabi_dsub>
  40f33e:	4652      	mov	r2, sl
  40f340:	465b      	mov	r3, fp
  40f342:	f7fb fb53 	bl	40a9ec <__aeabi_dcmplt>
  40f346:	2800      	cmp	r0, #0
  40f348:	f040 83a1 	bne.w	40fa8e <_dtoa_r+0xdae>
  40f34c:	9b08      	ldr	r3, [sp, #32]
  40f34e:	429d      	cmp	r5, r3
  40f350:	f000 817d 	beq.w	40f64e <_dtoa_r+0x96e>
  40f354:	4650      	mov	r0, sl
  40f356:	4659      	mov	r1, fp
  40f358:	2200      	movs	r2, #0
  40f35a:	4b3f      	ldr	r3, [pc, #252]	; (40f458 <_dtoa_r+0x778>)
  40f35c:	f7fb f8d4 	bl	40a508 <__aeabi_dmul>
  40f360:	2200      	movs	r2, #0
  40f362:	4b3d      	ldr	r3, [pc, #244]	; (40f458 <_dtoa_r+0x778>)
  40f364:	4682      	mov	sl, r0
  40f366:	468b      	mov	fp, r1
  40f368:	4640      	mov	r0, r8
  40f36a:	4649      	mov	r1, r9
  40f36c:	f7fb f8cc 	bl	40a508 <__aeabi_dmul>
  40f370:	4606      	mov	r6, r0
  40f372:	460f      	mov	r7, r1
  40f374:	f7fb fb62 	bl	40aa3c <__aeabi_d2iz>
  40f378:	4604      	mov	r4, r0
  40f37a:	f7fb f85f 	bl	40a43c <__aeabi_i2d>
  40f37e:	4602      	mov	r2, r0
  40f380:	460b      	mov	r3, r1
  40f382:	3430      	adds	r4, #48	; 0x30
  40f384:	4630      	mov	r0, r6
  40f386:	4639      	mov	r1, r7
  40f388:	b2e6      	uxtb	r6, r4
  40f38a:	f7fa ff09 	bl	40a1a0 <__aeabi_dsub>
  40f38e:	4680      	mov	r8, r0
  40f390:	4689      	mov	r9, r1
  40f392:	4652      	mov	r2, sl
  40f394:	465b      	mov	r3, fp
  40f396:	f805 6b01 	strb.w	r6, [r5], #1
  40f39a:	f7fb fb27 	bl	40a9ec <__aeabi_dcmplt>
  40f39e:	4642      	mov	r2, r8
  40f3a0:	464b      	mov	r3, r9
  40f3a2:	2800      	cmp	r0, #0
  40f3a4:	d0c7      	beq.n	40f336 <_dtoa_r+0x656>
  40f3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f3a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40f3aa:	9302      	str	r3, [sp, #8]
  40f3ac:	e69b      	b.n	40f0e6 <_dtoa_r+0x406>
  40f3ae:	2300      	movs	r3, #0
  40f3b0:	930b      	str	r3, [sp, #44]	; 0x2c
  40f3b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40f3b4:	9a02      	ldr	r2, [sp, #8]
  40f3b6:	4413      	add	r3, r2
  40f3b8:	9310      	str	r3, [sp, #64]	; 0x40
  40f3ba:	3301      	adds	r3, #1
  40f3bc:	2b00      	cmp	r3, #0
  40f3be:	9304      	str	r3, [sp, #16]
  40f3c0:	f340 82c9 	ble.w	40f956 <_dtoa_r+0xc76>
  40f3c4:	9e04      	ldr	r6, [sp, #16]
  40f3c6:	2e0e      	cmp	r6, #14
  40f3c8:	bf8c      	ite	hi
  40f3ca:	2500      	movhi	r5, #0
  40f3cc:	f005 0501 	andls.w	r5, r5, #1
  40f3d0:	e6f2      	b.n	40f1b8 <_dtoa_r+0x4d8>
  40f3d2:	2300      	movs	r3, #0
  40f3d4:	930b      	str	r3, [sp, #44]	; 0x2c
  40f3d6:	e6e3      	b.n	40f1a0 <_dtoa_r+0x4c0>
  40f3d8:	9905      	ldr	r1, [sp, #20]
  40f3da:	4642      	mov	r2, r8
  40f3dc:	464b      	mov	r3, r9
  40f3de:	4650      	mov	r0, sl
  40f3e0:	1c4d      	adds	r5, r1, #1
  40f3e2:	4659      	mov	r1, fp
  40f3e4:	f7fb f9ba 	bl	40a75c <__aeabi_ddiv>
  40f3e8:	4656      	mov	r6, sl
  40f3ea:	f7fb fb27 	bl	40aa3c <__aeabi_d2iz>
  40f3ee:	4682      	mov	sl, r0
  40f3f0:	f7fb f824 	bl	40a43c <__aeabi_i2d>
  40f3f4:	4642      	mov	r2, r8
  40f3f6:	464b      	mov	r3, r9
  40f3f8:	f7fb f886 	bl	40a508 <__aeabi_dmul>
  40f3fc:	4602      	mov	r2, r0
  40f3fe:	460b      	mov	r3, r1
  40f400:	4630      	mov	r0, r6
  40f402:	4659      	mov	r1, fp
  40f404:	f7fa fecc 	bl	40a1a0 <__aeabi_dsub>
  40f408:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  40f40c:	9a05      	ldr	r2, [sp, #20]
  40f40e:	4606      	mov	r6, r0
  40f410:	460f      	mov	r7, r1
  40f412:	7013      	strb	r3, [r2, #0]
  40f414:	9b04      	ldr	r3, [sp, #16]
  40f416:	2b01      	cmp	r3, #1
  40f418:	d04d      	beq.n	40f4b6 <_dtoa_r+0x7d6>
  40f41a:	2200      	movs	r2, #0
  40f41c:	4b0e      	ldr	r3, [pc, #56]	; (40f458 <_dtoa_r+0x778>)
  40f41e:	f7fb f873 	bl	40a508 <__aeabi_dmul>
  40f422:	2200      	movs	r2, #0
  40f424:	2300      	movs	r3, #0
  40f426:	4606      	mov	r6, r0
  40f428:	460f      	mov	r7, r1
  40f42a:	f7fb fad5 	bl	40a9d8 <__aeabi_dcmpeq>
  40f42e:	2800      	cmp	r0, #0
  40f430:	f47f ae59 	bne.w	40f0e6 <_dtoa_r+0x406>
  40f434:	9403      	str	r4, [sp, #12]
  40f436:	f8dd b014 	ldr.w	fp, [sp, #20]
  40f43a:	9c04      	ldr	r4, [sp, #16]
  40f43c:	e019      	b.n	40f472 <_dtoa_r+0x792>
  40f43e:	bf00      	nop
  40f440:	fffffbee 	.word	0xfffffbee
  40f444:	00413870 	.word	0x00413870
  40f448:	00413948 	.word	0x00413948
  40f44c:	3ff00000 	.word	0x3ff00000
  40f450:	401c0000 	.word	0x401c0000
  40f454:	3fe00000 	.word	0x3fe00000
  40f458:	40240000 	.word	0x40240000
  40f45c:	f7fb f854 	bl	40a508 <__aeabi_dmul>
  40f460:	2200      	movs	r2, #0
  40f462:	2300      	movs	r3, #0
  40f464:	4606      	mov	r6, r0
  40f466:	460f      	mov	r7, r1
  40f468:	f7fb fab6 	bl	40a9d8 <__aeabi_dcmpeq>
  40f46c:	2800      	cmp	r0, #0
  40f46e:	f040 82e5 	bne.w	40fa3c <_dtoa_r+0xd5c>
  40f472:	4642      	mov	r2, r8
  40f474:	464b      	mov	r3, r9
  40f476:	4630      	mov	r0, r6
  40f478:	4639      	mov	r1, r7
  40f47a:	f7fb f96f 	bl	40a75c <__aeabi_ddiv>
  40f47e:	f7fb fadd 	bl	40aa3c <__aeabi_d2iz>
  40f482:	4682      	mov	sl, r0
  40f484:	f7fa ffda 	bl	40a43c <__aeabi_i2d>
  40f488:	4642      	mov	r2, r8
  40f48a:	464b      	mov	r3, r9
  40f48c:	f7fb f83c 	bl	40a508 <__aeabi_dmul>
  40f490:	4602      	mov	r2, r0
  40f492:	460b      	mov	r3, r1
  40f494:	4630      	mov	r0, r6
  40f496:	4639      	mov	r1, r7
  40f498:	f7fa fe82 	bl	40a1a0 <__aeabi_dsub>
  40f49c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  40f4a0:	4606      	mov	r6, r0
  40f4a2:	460f      	mov	r7, r1
  40f4a4:	f805 eb01 	strb.w	lr, [r5], #1
  40f4a8:	ebcb 0e05 	rsb	lr, fp, r5
  40f4ac:	2200      	movs	r2, #0
  40f4ae:	4bb8      	ldr	r3, [pc, #736]	; (40f790 <_dtoa_r+0xab0>)
  40f4b0:	4574      	cmp	r4, lr
  40f4b2:	d1d3      	bne.n	40f45c <_dtoa_r+0x77c>
  40f4b4:	9c03      	ldr	r4, [sp, #12]
  40f4b6:	4632      	mov	r2, r6
  40f4b8:	463b      	mov	r3, r7
  40f4ba:	4630      	mov	r0, r6
  40f4bc:	4639      	mov	r1, r7
  40f4be:	f7fa fe71 	bl	40a1a4 <__adddf3>
  40f4c2:	4606      	mov	r6, r0
  40f4c4:	460f      	mov	r7, r1
  40f4c6:	4640      	mov	r0, r8
  40f4c8:	4649      	mov	r1, r9
  40f4ca:	4632      	mov	r2, r6
  40f4cc:	463b      	mov	r3, r7
  40f4ce:	f7fb fa8d 	bl	40a9ec <__aeabi_dcmplt>
  40f4d2:	b960      	cbnz	r0, 40f4ee <_dtoa_r+0x80e>
  40f4d4:	4640      	mov	r0, r8
  40f4d6:	4649      	mov	r1, r9
  40f4d8:	4632      	mov	r2, r6
  40f4da:	463b      	mov	r3, r7
  40f4dc:	f7fb fa7c 	bl	40a9d8 <__aeabi_dcmpeq>
  40f4e0:	2800      	cmp	r0, #0
  40f4e2:	f43f ae00 	beq.w	40f0e6 <_dtoa_r+0x406>
  40f4e6:	f01a 0f01 	tst.w	sl, #1
  40f4ea:	f43f adfc 	beq.w	40f0e6 <_dtoa_r+0x406>
  40f4ee:	9b02      	ldr	r3, [sp, #8]
  40f4f0:	9314      	str	r3, [sp, #80]	; 0x50
  40f4f2:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40f4f6:	1e6a      	subs	r2, r5, #1
  40f4f8:	9b05      	ldr	r3, [sp, #20]
  40f4fa:	e004      	b.n	40f506 <_dtoa_r+0x826>
  40f4fc:	429a      	cmp	r2, r3
  40f4fe:	f000 8277 	beq.w	40f9f0 <_dtoa_r+0xd10>
  40f502:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40f506:	2e39      	cmp	r6, #57	; 0x39
  40f508:	f102 0501 	add.w	r5, r2, #1
  40f50c:	d0f6      	beq.n	40f4fc <_dtoa_r+0x81c>
  40f50e:	1c73      	adds	r3, r6, #1
  40f510:	9914      	ldr	r1, [sp, #80]	; 0x50
  40f512:	b2db      	uxtb	r3, r3
  40f514:	9102      	str	r1, [sp, #8]
  40f516:	7013      	strb	r3, [r2, #0]
  40f518:	e5e5      	b.n	40f0e6 <_dtoa_r+0x406>
  40f51a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40f51c:	2b01      	cmp	r3, #1
  40f51e:	f340 8161 	ble.w	40f7e4 <_dtoa_r+0xb04>
  40f522:	f04f 0800 	mov.w	r8, #0
  40f526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f528:	2b00      	cmp	r3, #0
  40f52a:	f47f ad80 	bne.w	40f02e <_dtoa_r+0x34e>
  40f52e:	2001      	movs	r0, #1
  40f530:	e585      	b.n	40f03e <_dtoa_r+0x35e>
  40f532:	4640      	mov	r0, r8
  40f534:	f7fa ff82 	bl	40a43c <__aeabi_i2d>
  40f538:	4602      	mov	r2, r0
  40f53a:	460b      	mov	r3, r1
  40f53c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f540:	f7fa ffe2 	bl	40a508 <__aeabi_dmul>
  40f544:	2200      	movs	r2, #0
  40f546:	4b93      	ldr	r3, [pc, #588]	; (40f794 <_dtoa_r+0xab4>)
  40f548:	f7fa fe2c 	bl	40a1a4 <__adddf3>
  40f54c:	4606      	mov	r6, r0
  40f54e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40f552:	2200      	movs	r2, #0
  40f554:	4b90      	ldr	r3, [pc, #576]	; (40f798 <_dtoa_r+0xab8>)
  40f556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f55a:	f7fa fe21 	bl	40a1a0 <__aeabi_dsub>
  40f55e:	4632      	mov	r2, r6
  40f560:	463b      	mov	r3, r7
  40f562:	4680      	mov	r8, r0
  40f564:	4689      	mov	r9, r1
  40f566:	f7fb fa5f 	bl	40aa28 <__aeabi_dcmpgt>
  40f56a:	4605      	mov	r5, r0
  40f56c:	2800      	cmp	r0, #0
  40f56e:	f040 809f 	bne.w	40f6b0 <_dtoa_r+0x9d0>
  40f572:	4632      	mov	r2, r6
  40f574:	4640      	mov	r0, r8
  40f576:	4649      	mov	r1, r9
  40f578:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40f57c:	f7fb fa36 	bl	40a9ec <__aeabi_dcmplt>
  40f580:	2800      	cmp	r0, #0
  40f582:	d065      	beq.n	40f650 <_dtoa_r+0x970>
  40f584:	462f      	mov	r7, r5
  40f586:	9508      	str	r5, [sp, #32]
  40f588:	e4df      	b.n	40ef4a <_dtoa_r+0x26a>
  40f58a:	201c      	movs	r0, #28
  40f58c:	e564      	b.n	40f058 <_dtoa_r+0x378>
  40f58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f590:	2b00      	cmp	r3, #0
  40f592:	f040 814f 	bne.w	40f834 <_dtoa_r+0xb54>
  40f596:	f8dd a014 	ldr.w	sl, [sp, #20]
  40f59a:	9e06      	ldr	r6, [sp, #24]
  40f59c:	4655      	mov	r5, sl
  40f59e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40f5a2:	e002      	b.n	40f5aa <_dtoa_r+0x8ca>
  40f5a4:	f001 fcb0 	bl	410f08 <__multadd>
  40f5a8:	4606      	mov	r6, r0
  40f5aa:	4639      	mov	r1, r7
  40f5ac:	4630      	mov	r0, r6
  40f5ae:	f7ff faf5 	bl	40eb9c <quorem>
  40f5b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
  40f5b6:	4631      	mov	r1, r6
  40f5b8:	4620      	mov	r0, r4
  40f5ba:	f805 9b01 	strb.w	r9, [r5], #1
  40f5be:	ebca 0e05 	rsb	lr, sl, r5
  40f5c2:	220a      	movs	r2, #10
  40f5c4:	2300      	movs	r3, #0
  40f5c6:	45c6      	cmp	lr, r8
  40f5c8:	dbec      	blt.n	40f5a4 <_dtoa_r+0x8c4>
  40f5ca:	9b05      	ldr	r3, [sp, #20]
  40f5cc:	f04f 0a00 	mov.w	sl, #0
  40f5d0:	9a04      	ldr	r2, [sp, #16]
  40f5d2:	9606      	str	r6, [sp, #24]
  40f5d4:	2a01      	cmp	r2, #1
  40f5d6:	bfac      	ite	ge
  40f5d8:	189b      	addge	r3, r3, r2
  40f5da:	3301      	addlt	r3, #1
  40f5dc:	461d      	mov	r5, r3
  40f5de:	9906      	ldr	r1, [sp, #24]
  40f5e0:	2201      	movs	r2, #1
  40f5e2:	4620      	mov	r0, r4
  40f5e4:	f001 fe6c 	bl	4112c0 <__lshift>
  40f5e8:	4639      	mov	r1, r7
  40f5ea:	9006      	str	r0, [sp, #24]
  40f5ec:	f001 fec2 	bl	411374 <__mcmp>
  40f5f0:	2800      	cmp	r0, #0
  40f5f2:	f340 824e 	ble.w	40fa92 <_dtoa_r+0xdb2>
  40f5f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40f5fa:	1e6b      	subs	r3, r5, #1
  40f5fc:	9905      	ldr	r1, [sp, #20]
  40f5fe:	e004      	b.n	40f60a <_dtoa_r+0x92a>
  40f600:	428b      	cmp	r3, r1
  40f602:	f000 820b 	beq.w	40fa1c <_dtoa_r+0xd3c>
  40f606:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40f60a:	2a39      	cmp	r2, #57	; 0x39
  40f60c:	f103 0501 	add.w	r5, r3, #1
  40f610:	d0f6      	beq.n	40f600 <_dtoa_r+0x920>
  40f612:	3201      	adds	r2, #1
  40f614:	701a      	strb	r2, [r3, #0]
  40f616:	4639      	mov	r1, r7
  40f618:	4620      	mov	r0, r4
  40f61a:	f001 fc6b 	bl	410ef4 <_Bfree>
  40f61e:	9b08      	ldr	r3, [sp, #32]
  40f620:	2b00      	cmp	r3, #0
  40f622:	f43f ad60 	beq.w	40f0e6 <_dtoa_r+0x406>
  40f626:	459a      	cmp	sl, r3
  40f628:	f43f ad59 	beq.w	40f0de <_dtoa_r+0x3fe>
  40f62c:	f1ba 0f00 	cmp.w	sl, #0
  40f630:	f43f ad55 	beq.w	40f0de <_dtoa_r+0x3fe>
  40f634:	4651      	mov	r1, sl
  40f636:	4620      	mov	r0, r4
  40f638:	f001 fc5c 	bl	410ef4 <_Bfree>
  40f63c:	e54f      	b.n	40f0de <_dtoa_r+0x3fe>
  40f63e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40f642:	f04f 0802 	mov.w	r8, #2
  40f646:	e5eb      	b.n	40f220 <_dtoa_r+0x540>
  40f648:	9805      	ldr	r0, [sp, #20]
  40f64a:	f7ff bb7a 	b.w	40ed42 <_dtoa_r+0x62>
  40f64e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40f650:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40f654:	e452      	b.n	40eefc <_dtoa_r+0x21c>
  40f656:	9b02      	ldr	r3, [sp, #8]
  40f658:	425d      	negs	r5, r3
  40f65a:	2d00      	cmp	r5, #0
  40f65c:	f000 81c1 	beq.w	40f9e2 <_dtoa_r+0xd02>
  40f660:	f005 020f 	and.w	r2, r5, #15
  40f664:	4b4d      	ldr	r3, [pc, #308]	; (40f79c <_dtoa_r+0xabc>)
  40f666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40f66a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40f672:	f7fa ff49 	bl	40a508 <__aeabi_dmul>
  40f676:	112d      	asrs	r5, r5, #4
  40f678:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40f67c:	f000 8275 	beq.w	40fb6a <_dtoa_r+0xe8a>
  40f680:	4e47      	ldr	r6, [pc, #284]	; (40f7a0 <_dtoa_r+0xac0>)
  40f682:	f04f 0802 	mov.w	r8, #2
  40f686:	4602      	mov	r2, r0
  40f688:	460b      	mov	r3, r1
  40f68a:	07ef      	lsls	r7, r5, #31
  40f68c:	4610      	mov	r0, r2
  40f68e:	4619      	mov	r1, r3
  40f690:	d507      	bpl.n	40f6a2 <_dtoa_r+0x9c2>
  40f692:	f108 0801 	add.w	r8, r8, #1
  40f696:	e9d6 2300 	ldrd	r2, r3, [r6]
  40f69a:	f7fa ff35 	bl	40a508 <__aeabi_dmul>
  40f69e:	4602      	mov	r2, r0
  40f6a0:	460b      	mov	r3, r1
  40f6a2:	106d      	asrs	r5, r5, #1
  40f6a4:	f106 0608 	add.w	r6, r6, #8
  40f6a8:	d1ef      	bne.n	40f68a <_dtoa_r+0x9aa>
  40f6aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40f6ae:	e5d2      	b.n	40f256 <_dtoa_r+0x576>
  40f6b0:	2700      	movs	r7, #0
  40f6b2:	9708      	str	r7, [sp, #32]
  40f6b4:	e506      	b.n	40f0c4 <_dtoa_r+0x3e4>
  40f6b6:	f10c 3bff 	add.w	fp, ip, #4294967295
  40f6ba:	4938      	ldr	r1, [pc, #224]	; (40f79c <_dtoa_r+0xabc>)
  40f6bc:	4632      	mov	r2, r6
  40f6be:	463b      	mov	r3, r7
  40f6c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40f6c4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  40f6c8:	9f05      	ldr	r7, [sp, #20]
  40f6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  40f6ce:	f7fa ff1b 	bl	40a508 <__aeabi_dmul>
  40f6d2:	1c7d      	adds	r5, r7, #1
  40f6d4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40f6d8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40f6dc:	4649      	mov	r1, r9
  40f6de:	4640      	mov	r0, r8
  40f6e0:	f7fb f9ac 	bl	40aa3c <__aeabi_d2iz>
  40f6e4:	4606      	mov	r6, r0
  40f6e6:	f7fa fea9 	bl	40a43c <__aeabi_i2d>
  40f6ea:	4602      	mov	r2, r0
  40f6ec:	460b      	mov	r3, r1
  40f6ee:	4640      	mov	r0, r8
  40f6f0:	4649      	mov	r1, r9
  40f6f2:	3630      	adds	r6, #48	; 0x30
  40f6f4:	f7fa fd54 	bl	40a1a0 <__aeabi_dsub>
  40f6f8:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  40f6fc:	4680      	mov	r8, r0
  40f6fe:	4689      	mov	r9, r1
  40f700:	f1bc 0f01 	cmp.w	ip, #1
  40f704:	703e      	strb	r6, [r7, #0]
  40f706:	d020      	beq.n	40f74a <_dtoa_r+0xa6a>
  40f708:	9b05      	ldr	r3, [sp, #20]
  40f70a:	4640      	mov	r0, r8
  40f70c:	46aa      	mov	sl, r5
  40f70e:	46a8      	mov	r8, r5
  40f710:	eb03 070c 	add.w	r7, r3, ip
  40f714:	46b9      	mov	r9, r7
  40f716:	2200      	movs	r2, #0
  40f718:	4b1d      	ldr	r3, [pc, #116]	; (40f790 <_dtoa_r+0xab0>)
  40f71a:	f7fa fef5 	bl	40a508 <__aeabi_dmul>
  40f71e:	460f      	mov	r7, r1
  40f720:	4606      	mov	r6, r0
  40f722:	f7fb f98b 	bl	40aa3c <__aeabi_d2iz>
  40f726:	4605      	mov	r5, r0
  40f728:	f7fa fe88 	bl	40a43c <__aeabi_i2d>
  40f72c:	4602      	mov	r2, r0
  40f72e:	460b      	mov	r3, r1
  40f730:	3530      	adds	r5, #48	; 0x30
  40f732:	4630      	mov	r0, r6
  40f734:	4639      	mov	r1, r7
  40f736:	f7fa fd33 	bl	40a1a0 <__aeabi_dsub>
  40f73a:	f80a 5b01 	strb.w	r5, [sl], #1
  40f73e:	45ca      	cmp	sl, r9
  40f740:	d1e9      	bne.n	40f716 <_dtoa_r+0xa36>
  40f742:	4645      	mov	r5, r8
  40f744:	4689      	mov	r9, r1
  40f746:	4680      	mov	r8, r0
  40f748:	445d      	add	r5, fp
  40f74a:	2200      	movs	r2, #0
  40f74c:	4b15      	ldr	r3, [pc, #84]	; (40f7a4 <_dtoa_r+0xac4>)
  40f74e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40f752:	f7fa fd27 	bl	40a1a4 <__adddf3>
  40f756:	4642      	mov	r2, r8
  40f758:	464b      	mov	r3, r9
  40f75a:	f7fb f947 	bl	40a9ec <__aeabi_dcmplt>
  40f75e:	2800      	cmp	r0, #0
  40f760:	f47f aec7 	bne.w	40f4f2 <_dtoa_r+0x812>
  40f764:	2000      	movs	r0, #0
  40f766:	490f      	ldr	r1, [pc, #60]	; (40f7a4 <_dtoa_r+0xac4>)
  40f768:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40f76c:	f7fa fd18 	bl	40a1a0 <__aeabi_dsub>
  40f770:	4642      	mov	r2, r8
  40f772:	464b      	mov	r3, r9
  40f774:	f7fb f958 	bl	40aa28 <__aeabi_dcmpgt>
  40f778:	b908      	cbnz	r0, 40f77e <_dtoa_r+0xa9e>
  40f77a:	e769      	b.n	40f650 <_dtoa_r+0x970>
  40f77c:	4615      	mov	r5, r2
  40f77e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40f782:	1e6a      	subs	r2, r5, #1
  40f784:	2b30      	cmp	r3, #48	; 0x30
  40f786:	d0f9      	beq.n	40f77c <_dtoa_r+0xa9c>
  40f788:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f78a:	9302      	str	r3, [sp, #8]
  40f78c:	e4ab      	b.n	40f0e6 <_dtoa_r+0x406>
  40f78e:	bf00      	nop
  40f790:	40240000 	.word	0x40240000
  40f794:	401c0000 	.word	0x401c0000
  40f798:	40140000 	.word	0x40140000
  40f79c:	00413870 	.word	0x00413870
  40f7a0:	00413948 	.word	0x00413948
  40f7a4:	3fe00000 	.word	0x3fe00000
  40f7a8:	9806      	ldr	r0, [sp, #24]
  40f7aa:	4639      	mov	r1, r7
  40f7ac:	f001 fde2 	bl	411374 <__mcmp>
  40f7b0:	2800      	cmp	r0, #0
  40f7b2:	f6bf ac6e 	bge.w	40f092 <_dtoa_r+0x3b2>
  40f7b6:	9e02      	ldr	r6, [sp, #8]
  40f7b8:	2300      	movs	r3, #0
  40f7ba:	9906      	ldr	r1, [sp, #24]
  40f7bc:	4620      	mov	r0, r4
  40f7be:	3e01      	subs	r6, #1
  40f7c0:	220a      	movs	r2, #10
  40f7c2:	9602      	str	r6, [sp, #8]
  40f7c4:	f001 fba0 	bl	410f08 <__multadd>
  40f7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f7ca:	9006      	str	r0, [sp, #24]
  40f7cc:	bb1b      	cbnz	r3, 40f816 <_dtoa_r+0xb36>
  40f7ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40f7d0:	2b02      	cmp	r3, #2
  40f7d2:	f340 81ce 	ble.w	40fb72 <_dtoa_r+0xe92>
  40f7d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f7d8:	2b00      	cmp	r3, #0
  40f7da:	f300 81ca 	bgt.w	40fb72 <_dtoa_r+0xe92>
  40f7de:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f7e0:	9304      	str	r3, [sp, #16]
  40f7e2:	e45e      	b.n	40f0a2 <_dtoa_r+0x3c2>
  40f7e4:	f1ba 0f00 	cmp.w	sl, #0
  40f7e8:	f47f ae9b 	bne.w	40f522 <_dtoa_r+0x842>
  40f7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40f7f0:	2b00      	cmp	r3, #0
  40f7f2:	f47f ae96 	bne.w	40f522 <_dtoa_r+0x842>
  40f7f6:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  40f7fa:	0d36      	lsrs	r6, r6, #20
  40f7fc:	0536      	lsls	r6, r6, #20
  40f7fe:	2e00      	cmp	r6, #0
  40f800:	f000 818a 	beq.w	40fb18 <_dtoa_r+0xe38>
  40f804:	9b07      	ldr	r3, [sp, #28]
  40f806:	f04f 0801 	mov.w	r8, #1
  40f80a:	3301      	adds	r3, #1
  40f80c:	9307      	str	r3, [sp, #28]
  40f80e:	9b03      	ldr	r3, [sp, #12]
  40f810:	3301      	adds	r3, #1
  40f812:	9303      	str	r3, [sp, #12]
  40f814:	e687      	b.n	40f526 <_dtoa_r+0x846>
  40f816:	2300      	movs	r3, #0
  40f818:	9908      	ldr	r1, [sp, #32]
  40f81a:	4620      	mov	r0, r4
  40f81c:	220a      	movs	r2, #10
  40f81e:	f001 fb73 	bl	410f08 <__multadd>
  40f822:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40f824:	9008      	str	r0, [sp, #32]
  40f826:	2b02      	cmp	r3, #2
  40f828:	dd02      	ble.n	40f830 <_dtoa_r+0xb50>
  40f82a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f82c:	2b00      	cmp	r3, #0
  40f82e:	ddd6      	ble.n	40f7de <_dtoa_r+0xafe>
  40f830:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40f832:	9304      	str	r3, [sp, #16]
  40f834:	2d00      	cmp	r5, #0
  40f836:	dd05      	ble.n	40f844 <_dtoa_r+0xb64>
  40f838:	9908      	ldr	r1, [sp, #32]
  40f83a:	462a      	mov	r2, r5
  40f83c:	4620      	mov	r0, r4
  40f83e:	f001 fd3f 	bl	4112c0 <__lshift>
  40f842:	9008      	str	r0, [sp, #32]
  40f844:	f1b8 0f00 	cmp.w	r8, #0
  40f848:	f040 8133 	bne.w	40fab2 <_dtoa_r+0xdd2>
  40f84c:	9e08      	ldr	r6, [sp, #32]
  40f84e:	f00a 0101 	and.w	r1, sl, #1
  40f852:	9b04      	ldr	r3, [sp, #16]
  40f854:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40f856:	3b01      	subs	r3, #1
  40f858:	910b      	str	r1, [sp, #44]	; 0x2c
  40f85a:	9905      	ldr	r1, [sp, #20]
  40f85c:	fab2 f282 	clz	r2, r2
  40f860:	970a      	str	r7, [sp, #40]	; 0x28
  40f862:	18cb      	adds	r3, r1, r3
  40f864:	4688      	mov	r8, r1
  40f866:	f8dd b020 	ldr.w	fp, [sp, #32]
  40f86a:	930c      	str	r3, [sp, #48]	; 0x30
  40f86c:	0953      	lsrs	r3, r2, #5
  40f86e:	9f06      	ldr	r7, [sp, #24]
  40f870:	9303      	str	r3, [sp, #12]
  40f872:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40f874:	4638      	mov	r0, r7
  40f876:	4629      	mov	r1, r5
  40f878:	f7ff f990 	bl	40eb9c <quorem>
  40f87c:	4659      	mov	r1, fp
  40f87e:	4681      	mov	r9, r0
  40f880:	4638      	mov	r0, r7
  40f882:	f001 fd77 	bl	411374 <__mcmp>
  40f886:	4629      	mov	r1, r5
  40f888:	4632      	mov	r2, r6
  40f88a:	4682      	mov	sl, r0
  40f88c:	4620      	mov	r0, r4
  40f88e:	f001 fd95 	bl	4113bc <__mdiff>
  40f892:	68c2      	ldr	r2, [r0, #12]
  40f894:	4605      	mov	r5, r0
  40f896:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  40f89a:	9207      	str	r2, [sp, #28]
  40f89c:	2a00      	cmp	r2, #0
  40f89e:	d150      	bne.n	40f942 <_dtoa_r+0xc62>
  40f8a0:	4629      	mov	r1, r5
  40f8a2:	4638      	mov	r0, r7
  40f8a4:	f8cd c018 	str.w	ip, [sp, #24]
  40f8a8:	f001 fd64 	bl	411374 <__mcmp>
  40f8ac:	4629      	mov	r1, r5
  40f8ae:	9004      	str	r0, [sp, #16]
  40f8b0:	4620      	mov	r0, r4
  40f8b2:	f001 fb1f 	bl	410ef4 <_Bfree>
  40f8b6:	9a03      	ldr	r2, [sp, #12]
  40f8b8:	9b04      	ldr	r3, [sp, #16]
  40f8ba:	f8dd c018 	ldr.w	ip, [sp, #24]
  40f8be:	b132      	cbz	r2, 40f8ce <_dtoa_r+0xbee>
  40f8c0:	b92b      	cbnz	r3, 40f8ce <_dtoa_r+0xbee>
  40f8c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40f8c4:	9a07      	ldr	r2, [sp, #28]
  40f8c6:	2b00      	cmp	r3, #0
  40f8c8:	f000 8128 	beq.w	40fb1c <_dtoa_r+0xe3c>
  40f8cc:	4613      	mov	r3, r2
  40f8ce:	f1ba 0f00 	cmp.w	sl, #0
  40f8d2:	f2c0 80bc 	blt.w	40fa4e <_dtoa_r+0xd6e>
  40f8d6:	9a03      	ldr	r2, [sp, #12]
  40f8d8:	b132      	cbz	r2, 40f8e8 <_dtoa_r+0xc08>
  40f8da:	f1ba 0f00 	cmp.w	sl, #0
  40f8de:	d103      	bne.n	40f8e8 <_dtoa_r+0xc08>
  40f8e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40f8e2:	2a00      	cmp	r2, #0
  40f8e4:	f000 80b3 	beq.w	40fa4e <_dtoa_r+0xd6e>
  40f8e8:	2b00      	cmp	r3, #0
  40f8ea:	f300 80fe 	bgt.w	40faea <_dtoa_r+0xe0a>
  40f8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40f8f0:	f108 0901 	add.w	r9, r8, #1
  40f8f4:	f888 c000 	strb.w	ip, [r8]
  40f8f8:	4598      	cmp	r8, r3
  40f8fa:	464d      	mov	r5, r9
  40f8fc:	f000 8106 	beq.w	40fb0c <_dtoa_r+0xe2c>
  40f900:	4639      	mov	r1, r7
  40f902:	220a      	movs	r2, #10
  40f904:	2300      	movs	r3, #0
  40f906:	4620      	mov	r0, r4
  40f908:	f001 fafe 	bl	410f08 <__multadd>
  40f90c:	45b3      	cmp	fp, r6
  40f90e:	4607      	mov	r7, r0
  40f910:	4659      	mov	r1, fp
  40f912:	4620      	mov	r0, r4
  40f914:	f04f 020a 	mov.w	r2, #10
  40f918:	f04f 0300 	mov.w	r3, #0
  40f91c:	d00b      	beq.n	40f936 <_dtoa_r+0xc56>
  40f91e:	f001 faf3 	bl	410f08 <__multadd>
  40f922:	4631      	mov	r1, r6
  40f924:	4683      	mov	fp, r0
  40f926:	220a      	movs	r2, #10
  40f928:	4620      	mov	r0, r4
  40f92a:	2300      	movs	r3, #0
  40f92c:	f001 faec 	bl	410f08 <__multadd>
  40f930:	46c8      	mov	r8, r9
  40f932:	4606      	mov	r6, r0
  40f934:	e79d      	b.n	40f872 <_dtoa_r+0xb92>
  40f936:	f001 fae7 	bl	410f08 <__multadd>
  40f93a:	46c8      	mov	r8, r9
  40f93c:	4683      	mov	fp, r0
  40f93e:	4606      	mov	r6, r0
  40f940:	e797      	b.n	40f872 <_dtoa_r+0xb92>
  40f942:	4601      	mov	r1, r0
  40f944:	4620      	mov	r0, r4
  40f946:	f8cd c010 	str.w	ip, [sp, #16]
  40f94a:	f001 fad3 	bl	410ef4 <_Bfree>
  40f94e:	2301      	movs	r3, #1
  40f950:	f8dd c010 	ldr.w	ip, [sp, #16]
  40f954:	e7bb      	b.n	40f8ce <_dtoa_r+0xbee>
  40f956:	2b0e      	cmp	r3, #14
  40f958:	bf8c      	ite	hi
  40f95a:	2300      	movhi	r3, #0
  40f95c:	2301      	movls	r3, #1
  40f95e:	2100      	movs	r1, #0
  40f960:	401d      	ands	r5, r3
  40f962:	6461      	str	r1, [r4, #68]	; 0x44
  40f964:	e436      	b.n	40f1d4 <_dtoa_r+0x4f4>
  40f966:	2301      	movs	r3, #1
  40f968:	9323      	str	r3, [sp, #140]	; 0x8c
  40f96a:	9310      	str	r3, [sp, #64]	; 0x40
  40f96c:	9304      	str	r3, [sp, #16]
  40f96e:	e7f6      	b.n	40f95e <_dtoa_r+0xc7e>
  40f970:	9906      	ldr	r1, [sp, #24]
  40f972:	4620      	mov	r0, r4
  40f974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40f976:	f001 fc53 	bl	411220 <__pow5mult>
  40f97a:	9006      	str	r0, [sp, #24]
  40f97c:	f7ff bb42 	b.w	40f004 <_dtoa_r+0x324>
  40f980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40f982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40f984:	1af3      	subs	r3, r6, r3
  40f986:	960a      	str	r6, [sp, #40]	; 0x28
  40f988:	2600      	movs	r6, #0
  40f98a:	441a      	add	r2, r3
  40f98c:	920c      	str	r2, [sp, #48]	; 0x30
  40f98e:	f7ff bbf3 	b.w	40f178 <_dtoa_r+0x498>
  40f992:	9b04      	ldr	r3, [sp, #16]
  40f994:	2b00      	cmp	r3, #0
  40f996:	f43f adcc 	beq.w	40f532 <_dtoa_r+0x852>
  40f99a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40f99c:	2d00      	cmp	r5, #0
  40f99e:	f77f ae57 	ble.w	40f650 <_dtoa_r+0x970>
  40f9a2:	2200      	movs	r2, #0
  40f9a4:	4b86      	ldr	r3, [pc, #536]	; (40fbc0 <_dtoa_r+0xee0>)
  40f9a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40f9aa:	f7fa fdad 	bl	40a508 <__aeabi_dmul>
  40f9ae:	9b02      	ldr	r3, [sp, #8]
  40f9b0:	4606      	mov	r6, r0
  40f9b2:	460f      	mov	r7, r1
  40f9b4:	3b01      	subs	r3, #1
  40f9b6:	f108 0001 	add.w	r0, r8, #1
  40f9ba:	e9cd 6708 	strd	r6, r7, [sp, #32]
  40f9be:	9314      	str	r3, [sp, #80]	; 0x50
  40f9c0:	f7fa fd3c 	bl	40a43c <__aeabi_i2d>
  40f9c4:	4602      	mov	r2, r0
  40f9c6:	460b      	mov	r3, r1
  40f9c8:	4630      	mov	r0, r6
  40f9ca:	4639      	mov	r1, r7
  40f9cc:	f7fa fd9c 	bl	40a508 <__aeabi_dmul>
  40f9d0:	2200      	movs	r2, #0
  40f9d2:	4b7c      	ldr	r3, [pc, #496]	; (40fbc4 <_dtoa_r+0xee4>)
  40f9d4:	f7fa fbe6 	bl	40a1a4 <__adddf3>
  40f9d8:	46ac      	mov	ip, r5
  40f9da:	4606      	mov	r6, r0
  40f9dc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40f9e0:	e45a      	b.n	40f298 <_dtoa_r+0x5b8>
  40f9e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40f9e6:	f04f 0802 	mov.w	r8, #2
  40f9ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40f9ee:	e432      	b.n	40f256 <_dtoa_r+0x576>
  40f9f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40f9f2:	2130      	movs	r1, #48	; 0x30
  40f9f4:	3301      	adds	r3, #1
  40f9f6:	7011      	strb	r1, [r2, #0]
  40f9f8:	9302      	str	r3, [sp, #8]
  40f9fa:	2331      	movs	r3, #49	; 0x31
  40f9fc:	7013      	strb	r3, [r2, #0]
  40f9fe:	f7ff bb72 	b.w	40f0e6 <_dtoa_r+0x406>
  40fa02:	9906      	ldr	r1, [sp, #24]
  40fa04:	4620      	mov	r0, r4
  40fa06:	f001 fc0b 	bl	411220 <__pow5mult>
  40fa0a:	9006      	str	r0, [sp, #24]
  40fa0c:	f7ff bafa 	b.w	40f004 <_dtoa_r+0x324>
  40fa10:	f1ba 0f00 	cmp.w	sl, #0
  40fa14:	f43f aeea 	beq.w	40f7ec <_dtoa_r+0xb0c>
  40fa18:	f7ff bb07 	b.w	40f02a <_dtoa_r+0x34a>
  40fa1c:	9a02      	ldr	r2, [sp, #8]
  40fa1e:	2331      	movs	r3, #49	; 0x31
  40fa20:	3201      	adds	r2, #1
  40fa22:	9202      	str	r2, [sp, #8]
  40fa24:	9a05      	ldr	r2, [sp, #20]
  40fa26:	7013      	strb	r3, [r2, #0]
  40fa28:	e5f5      	b.n	40f616 <_dtoa_r+0x936>
  40fa2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40fa2c:	2a00      	cmp	r2, #0
  40fa2e:	d055      	beq.n	40fadc <_dtoa_r+0xdfc>
  40fa30:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40fa34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40fa36:	9d07      	ldr	r5, [sp, #28]
  40fa38:	f7ff bba4 	b.w	40f184 <_dtoa_r+0x4a4>
  40fa3c:	9c03      	ldr	r4, [sp, #12]
  40fa3e:	f7ff bb52 	b.w	40f0e6 <_dtoa_r+0x406>
  40fa42:	9b07      	ldr	r3, [sp, #28]
  40fa44:	9a04      	ldr	r2, [sp, #16]
  40fa46:	1a9d      	subs	r5, r3, r2
  40fa48:	2300      	movs	r3, #0
  40fa4a:	f7ff bb9b 	b.w	40f184 <_dtoa_r+0x4a4>
  40fa4e:	2b00      	cmp	r3, #0
  40fa50:	9706      	str	r7, [sp, #24]
  40fa52:	46e1      	mov	r9, ip
  40fa54:	f8cd b020 	str.w	fp, [sp, #32]
  40fa58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40fa5a:	4665      	mov	r5, ip
  40fa5c:	dd0f      	ble.n	40fa7e <_dtoa_r+0xd9e>
  40fa5e:	9906      	ldr	r1, [sp, #24]
  40fa60:	2201      	movs	r2, #1
  40fa62:	4620      	mov	r0, r4
  40fa64:	f001 fc2c 	bl	4112c0 <__lshift>
  40fa68:	4639      	mov	r1, r7
  40fa6a:	9006      	str	r0, [sp, #24]
  40fa6c:	f001 fc82 	bl	411374 <__mcmp>
  40fa70:	2800      	cmp	r0, #0
  40fa72:	dd75      	ble.n	40fb60 <_dtoa_r+0xe80>
  40fa74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  40fa78:	d066      	beq.n	40fb48 <_dtoa_r+0xe68>
  40fa7a:	f109 0501 	add.w	r5, r9, #1
  40fa7e:	f8dd a020 	ldr.w	sl, [sp, #32]
  40fa82:	f888 5000 	strb.w	r5, [r8]
  40fa86:	f108 0501 	add.w	r5, r8, #1
  40fa8a:	9608      	str	r6, [sp, #32]
  40fa8c:	e5c3      	b.n	40f616 <_dtoa_r+0x936>
  40fa8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40fa90:	e531      	b.n	40f4f6 <_dtoa_r+0x816>
  40fa92:	d104      	bne.n	40fa9e <_dtoa_r+0xdbe>
  40fa94:	f019 0f01 	tst.w	r9, #1
  40fa98:	d001      	beq.n	40fa9e <_dtoa_r+0xdbe>
  40fa9a:	e5ac      	b.n	40f5f6 <_dtoa_r+0x916>
  40fa9c:	4615      	mov	r5, r2
  40fa9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40faa2:	1e6a      	subs	r2, r5, #1
  40faa4:	2b30      	cmp	r3, #48	; 0x30
  40faa6:	d0f9      	beq.n	40fa9c <_dtoa_r+0xdbc>
  40faa8:	e5b5      	b.n	40f616 <_dtoa_r+0x936>
  40faaa:	2700      	movs	r7, #0
  40faac:	9708      	str	r7, [sp, #32]
  40faae:	f7ff ba4c 	b.w	40ef4a <_dtoa_r+0x26a>
  40fab2:	9e08      	ldr	r6, [sp, #32]
  40fab4:	4620      	mov	r0, r4
  40fab6:	6871      	ldr	r1, [r6, #4]
  40fab8:	f001 f9f4 	bl	410ea4 <_Balloc>
  40fabc:	6933      	ldr	r3, [r6, #16]
  40fabe:	4605      	mov	r5, r0
  40fac0:	f106 010c 	add.w	r1, r6, #12
  40fac4:	1c9a      	adds	r2, r3, #2
  40fac6:	300c      	adds	r0, #12
  40fac8:	0092      	lsls	r2, r2, #2
  40faca:	f7fb fb85 	bl	40b1d8 <memcpy>
  40face:	4620      	mov	r0, r4
  40fad0:	4629      	mov	r1, r5
  40fad2:	2201      	movs	r2, #1
  40fad4:	f001 fbf4 	bl	4112c0 <__lshift>
  40fad8:	4606      	mov	r6, r0
  40fada:	e6b8      	b.n	40f84e <_dtoa_r+0xb6e>
  40fadc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40fade:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40fae0:	9d07      	ldr	r5, [sp, #28]
  40fae2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40fae6:	f7ff bb4d 	b.w	40f184 <_dtoa_r+0x4a4>
  40faea:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40faee:	9706      	str	r7, [sp, #24]
  40faf0:	f8cd b020 	str.w	fp, [sp, #32]
  40faf4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40faf6:	d030      	beq.n	40fb5a <_dtoa_r+0xe7a>
  40faf8:	f10c 0901 	add.w	r9, ip, #1
  40fafc:	f8dd a020 	ldr.w	sl, [sp, #32]
  40fb00:	f108 0501 	add.w	r5, r8, #1
  40fb04:	9608      	str	r6, [sp, #32]
  40fb06:	f888 9000 	strb.w	r9, [r8]
  40fb0a:	e584      	b.n	40f616 <_dtoa_r+0x936>
  40fb0c:	9706      	str	r7, [sp, #24]
  40fb0e:	46e1      	mov	r9, ip
  40fb10:	46da      	mov	sl, fp
  40fb12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40fb14:	9608      	str	r6, [sp, #32]
  40fb16:	e562      	b.n	40f5de <_dtoa_r+0x8fe>
  40fb18:	46b0      	mov	r8, r6
  40fb1a:	e504      	b.n	40f526 <_dtoa_r+0x846>
  40fb1c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  40fb20:	9706      	str	r7, [sp, #24]
  40fb22:	f8cd b020 	str.w	fp, [sp, #32]
  40fb26:	4655      	mov	r5, sl
  40fb28:	46cb      	mov	fp, r9
  40fb2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40fb2c:	46e1      	mov	r9, ip
  40fb2e:	d00b      	beq.n	40fb48 <_dtoa_r+0xe68>
  40fb30:	2d00      	cmp	r5, #0
  40fb32:	dd01      	ble.n	40fb38 <_dtoa_r+0xe58>
  40fb34:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  40fb38:	f8dd a020 	ldr.w	sl, [sp, #32]
  40fb3c:	f108 0501 	add.w	r5, r8, #1
  40fb40:	f888 9000 	strb.w	r9, [r8]
  40fb44:	9608      	str	r6, [sp, #32]
  40fb46:	e566      	b.n	40f616 <_dtoa_r+0x936>
  40fb48:	f8dd a020 	ldr.w	sl, [sp, #32]
  40fb4c:	9608      	str	r6, [sp, #32]
  40fb4e:	2239      	movs	r2, #57	; 0x39
  40fb50:	f108 0501 	add.w	r5, r8, #1
  40fb54:	f888 2000 	strb.w	r2, [r8]
  40fb58:	e54f      	b.n	40f5fa <_dtoa_r+0x91a>
  40fb5a:	46da      	mov	sl, fp
  40fb5c:	9608      	str	r6, [sp, #32]
  40fb5e:	e7f6      	b.n	40fb4e <_dtoa_r+0xe6e>
  40fb60:	d18d      	bne.n	40fa7e <_dtoa_r+0xd9e>
  40fb62:	f019 0f01 	tst.w	r9, #1
  40fb66:	d08a      	beq.n	40fa7e <_dtoa_r+0xd9e>
  40fb68:	e784      	b.n	40fa74 <_dtoa_r+0xd94>
  40fb6a:	f04f 0802 	mov.w	r8, #2
  40fb6e:	f7ff bb72 	b.w	40f256 <_dtoa_r+0x576>
  40fb72:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40fb74:	9304      	str	r3, [sp, #16]
  40fb76:	e50e      	b.n	40f596 <_dtoa_r+0x8b6>
  40fb78:	f43f aa75 	beq.w	40f066 <_dtoa_r+0x386>
  40fb7c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40fb80:	f7ff ba6a 	b.w	40f058 <_dtoa_r+0x378>
  40fb84:	2501      	movs	r5, #1
  40fb86:	f7ff b982 	b.w	40ee8e <_dtoa_r+0x1ae>
  40fb8a:	2500      	movs	r5, #0
  40fb8c:	4620      	mov	r0, r4
  40fb8e:	6465      	str	r5, [r4, #68]	; 0x44
  40fb90:	4629      	mov	r1, r5
  40fb92:	f001 f987 	bl	410ea4 <_Balloc>
  40fb96:	9a02      	ldr	r2, [sp, #8]
  40fb98:	9005      	str	r0, [sp, #20]
  40fb9a:	2a0e      	cmp	r2, #14
  40fb9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40fb9e:	6420      	str	r0, [r4, #64]	; 0x40
  40fba0:	f73f aad7 	bgt.w	40f152 <_dtoa_r+0x472>
  40fba4:	42ab      	cmp	r3, r5
  40fba6:	f6ff aad4 	blt.w	40f152 <_dtoa_r+0x472>
  40fbaa:	f04f 33ff 	mov.w	r3, #4294967295
  40fbae:	9523      	str	r5, [sp, #140]	; 0x8c
  40fbb0:	9304      	str	r3, [sp, #16]
  40fbb2:	f7ff b9a9 	b.w	40ef08 <_dtoa_r+0x228>
  40fbb6:	2301      	movs	r3, #1
  40fbb8:	930b      	str	r3, [sp, #44]	; 0x2c
  40fbba:	f7ff bbfa 	b.w	40f3b2 <_dtoa_r+0x6d2>
  40fbbe:	bf00      	nop
  40fbc0:	40240000 	.word	0x40240000
  40fbc4:	401c0000 	.word	0x401c0000

0040fbc8 <__sflush_r>:
  40fbc8:	898b      	ldrh	r3, [r1, #12]
  40fbca:	b29a      	uxth	r2, r3
  40fbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fbd0:	460d      	mov	r5, r1
  40fbd2:	0711      	lsls	r1, r2, #28
  40fbd4:	4680      	mov	r8, r0
  40fbd6:	d43c      	bmi.n	40fc52 <__sflush_r+0x8a>
  40fbd8:	686a      	ldr	r2, [r5, #4]
  40fbda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40fbde:	2a00      	cmp	r2, #0
  40fbe0:	81ab      	strh	r3, [r5, #12]
  40fbe2:	dd76      	ble.n	40fcd2 <__sflush_r+0x10a>
  40fbe4:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40fbe6:	2e00      	cmp	r6, #0
  40fbe8:	d04b      	beq.n	40fc82 <__sflush_r+0xba>
  40fbea:	b29b      	uxth	r3, r3
  40fbec:	2100      	movs	r1, #0
  40fbee:	f8d8 4000 	ldr.w	r4, [r8]
  40fbf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40fbf6:	f8c8 1000 	str.w	r1, [r8]
  40fbfa:	b292      	uxth	r2, r2
  40fbfc:	2a00      	cmp	r2, #0
  40fbfe:	d06c      	beq.n	40fcda <__sflush_r+0x112>
  40fc00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40fc02:	075f      	lsls	r7, r3, #29
  40fc04:	d505      	bpl.n	40fc12 <__sflush_r+0x4a>
  40fc06:	6869      	ldr	r1, [r5, #4]
  40fc08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40fc0a:	1a52      	subs	r2, r2, r1
  40fc0c:	b10b      	cbz	r3, 40fc12 <__sflush_r+0x4a>
  40fc0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40fc10:	1ad2      	subs	r2, r2, r3
  40fc12:	4640      	mov	r0, r8
  40fc14:	69e9      	ldr	r1, [r5, #28]
  40fc16:	2300      	movs	r3, #0
  40fc18:	47b0      	blx	r6
  40fc1a:	1c46      	adds	r6, r0, #1
  40fc1c:	d03e      	beq.n	40fc9c <__sflush_r+0xd4>
  40fc1e:	89ab      	ldrh	r3, [r5, #12]
  40fc20:	2100      	movs	r1, #0
  40fc22:	692a      	ldr	r2, [r5, #16]
  40fc24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40fc28:	6069      	str	r1, [r5, #4]
  40fc2a:	602a      	str	r2, [r5, #0]
  40fc2c:	b29b      	uxth	r3, r3
  40fc2e:	04da      	lsls	r2, r3, #19
  40fc30:	81ab      	strh	r3, [r5, #12]
  40fc32:	d44c      	bmi.n	40fcce <__sflush_r+0x106>
  40fc34:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40fc36:	f8c8 4000 	str.w	r4, [r8]
  40fc3a:	b311      	cbz	r1, 40fc82 <__sflush_r+0xba>
  40fc3c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40fc40:	4299      	cmp	r1, r3
  40fc42:	d002      	beq.n	40fc4a <__sflush_r+0x82>
  40fc44:	4640      	mov	r0, r8
  40fc46:	f000 f9d5 	bl	40fff4 <_free_r>
  40fc4a:	2000      	movs	r0, #0
  40fc4c:	6328      	str	r0, [r5, #48]	; 0x30
  40fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fc52:	692e      	ldr	r6, [r5, #16]
  40fc54:	b1ae      	cbz	r6, 40fc82 <__sflush_r+0xba>
  40fc56:	682c      	ldr	r4, [r5, #0]
  40fc58:	0791      	lsls	r1, r2, #30
  40fc5a:	602e      	str	r6, [r5, #0]
  40fc5c:	eba4 0406 	sub.w	r4, r4, r6
  40fc60:	d11a      	bne.n	40fc98 <__sflush_r+0xd0>
  40fc62:	696b      	ldr	r3, [r5, #20]
  40fc64:	60ab      	str	r3, [r5, #8]
  40fc66:	e00a      	b.n	40fc7e <__sflush_r+0xb6>
  40fc68:	4632      	mov	r2, r6
  40fc6a:	4623      	mov	r3, r4
  40fc6c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40fc6e:	4640      	mov	r0, r8
  40fc70:	69e9      	ldr	r1, [r5, #28]
  40fc72:	47b8      	blx	r7
  40fc74:	2800      	cmp	r0, #0
  40fc76:	eba4 0400 	sub.w	r4, r4, r0
  40fc7a:	4406      	add	r6, r0
  40fc7c:	dd04      	ble.n	40fc88 <__sflush_r+0xc0>
  40fc7e:	2c00      	cmp	r4, #0
  40fc80:	dcf2      	bgt.n	40fc68 <__sflush_r+0xa0>
  40fc82:	2000      	movs	r0, #0
  40fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fc88:	89ab      	ldrh	r3, [r5, #12]
  40fc8a:	f04f 30ff 	mov.w	r0, #4294967295
  40fc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40fc92:	81ab      	strh	r3, [r5, #12]
  40fc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40fc98:	2300      	movs	r3, #0
  40fc9a:	e7e3      	b.n	40fc64 <__sflush_r+0x9c>
  40fc9c:	f8d8 3000 	ldr.w	r3, [r8]
  40fca0:	fab3 f283 	clz	r2, r3
  40fca4:	2b00      	cmp	r3, #0
  40fca6:	bf18      	it	ne
  40fca8:	2b1d      	cmpne	r3, #29
  40fcaa:	ea4f 1252 	mov.w	r2, r2, lsr #5
  40fcae:	d001      	beq.n	40fcb4 <__sflush_r+0xec>
  40fcb0:	2b16      	cmp	r3, #22
  40fcb2:	d127      	bne.n	40fd04 <__sflush_r+0x13c>
  40fcb4:	89ab      	ldrh	r3, [r5, #12]
  40fcb6:	2600      	movs	r6, #0
  40fcb8:	6929      	ldr	r1, [r5, #16]
  40fcba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40fcbe:	b29b      	uxth	r3, r3
  40fcc0:	81ab      	strh	r3, [r5, #12]
  40fcc2:	04db      	lsls	r3, r3, #19
  40fcc4:	e885 0042 	stmia.w	r5, {r1, r6}
  40fcc8:	d5b4      	bpl.n	40fc34 <__sflush_r+0x6c>
  40fcca:	2a00      	cmp	r2, #0
  40fccc:	d0b2      	beq.n	40fc34 <__sflush_r+0x6c>
  40fcce:	6528      	str	r0, [r5, #80]	; 0x50
  40fcd0:	e7b0      	b.n	40fc34 <__sflush_r+0x6c>
  40fcd2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40fcd4:	2a00      	cmp	r2, #0
  40fcd6:	dc85      	bgt.n	40fbe4 <__sflush_r+0x1c>
  40fcd8:	e7d3      	b.n	40fc82 <__sflush_r+0xba>
  40fcda:	2301      	movs	r3, #1
  40fcdc:	4640      	mov	r0, r8
  40fcde:	69e9      	ldr	r1, [r5, #28]
  40fce0:	47b0      	blx	r6
  40fce2:	1c43      	adds	r3, r0, #1
  40fce4:	4602      	mov	r2, r0
  40fce6:	d002      	beq.n	40fcee <__sflush_r+0x126>
  40fce8:	89ab      	ldrh	r3, [r5, #12]
  40fcea:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40fcec:	e789      	b.n	40fc02 <__sflush_r+0x3a>
  40fcee:	f8d8 3000 	ldr.w	r3, [r8]
  40fcf2:	2b00      	cmp	r3, #0
  40fcf4:	d0f8      	beq.n	40fce8 <__sflush_r+0x120>
  40fcf6:	2b16      	cmp	r3, #22
  40fcf8:	d001      	beq.n	40fcfe <__sflush_r+0x136>
  40fcfa:	2b1d      	cmp	r3, #29
  40fcfc:	d1c4      	bne.n	40fc88 <__sflush_r+0xc0>
  40fcfe:	f8c8 4000 	str.w	r4, [r8]
  40fd02:	e7be      	b.n	40fc82 <__sflush_r+0xba>
  40fd04:	89ab      	ldrh	r3, [r5, #12]
  40fd06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40fd0a:	81ab      	strh	r3, [r5, #12]
  40fd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040fd10 <_fflush_r>:
  40fd10:	b510      	push	{r4, lr}
  40fd12:	4604      	mov	r4, r0
  40fd14:	b082      	sub	sp, #8
  40fd16:	b108      	cbz	r0, 40fd1c <_fflush_r+0xc>
  40fd18:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40fd1a:	b153      	cbz	r3, 40fd32 <_fflush_r+0x22>
  40fd1c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40fd20:	b908      	cbnz	r0, 40fd26 <_fflush_r+0x16>
  40fd22:	b002      	add	sp, #8
  40fd24:	bd10      	pop	{r4, pc}
  40fd26:	4620      	mov	r0, r4
  40fd28:	b002      	add	sp, #8
  40fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40fd2e:	f7ff bf4b 	b.w	40fbc8 <__sflush_r>
  40fd32:	9101      	str	r1, [sp, #4]
  40fd34:	f000 f886 	bl	40fe44 <__sinit>
  40fd38:	9901      	ldr	r1, [sp, #4]
  40fd3a:	e7ef      	b.n	40fd1c <_fflush_r+0xc>

0040fd3c <_cleanup_r>:
  40fd3c:	4901      	ldr	r1, [pc, #4]	; (40fd44 <_cleanup_r+0x8>)
  40fd3e:	f000 bbc3 	b.w	4104c8 <_fwalk_reent>
  40fd42:	bf00      	nop
  40fd44:	00412085 	.word	0x00412085

0040fd48 <__sinit.part.1>:
  40fd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fd4c:	4682      	mov	sl, r0
  40fd4e:	2400      	movs	r4, #0
  40fd50:	4837      	ldr	r0, [pc, #220]	; (40fe30 <__sinit.part.1+0xe8>)
  40fd52:	2103      	movs	r1, #3
  40fd54:	f8da 5004 	ldr.w	r5, [sl, #4]
  40fd58:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
  40fd5c:	2604      	movs	r6, #4
  40fd5e:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  40fd62:	f8ca 12e4 	str.w	r1, [sl, #740]	; 0x2e4
  40fd66:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40fd6a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
  40fd6e:	4621      	mov	r1, r4
  40fd70:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
  40fd74:	2208      	movs	r2, #8
  40fd76:	81ae      	strh	r6, [r5, #12]
  40fd78:	602c      	str	r4, [r5, #0]
  40fd7a:	606c      	str	r4, [r5, #4]
  40fd7c:	60ac      	str	r4, [r5, #8]
  40fd7e:	666c      	str	r4, [r5, #100]	; 0x64
  40fd80:	81ec      	strh	r4, [r5, #14]
  40fd82:	612c      	str	r4, [r5, #16]
  40fd84:	616c      	str	r4, [r5, #20]
  40fd86:	61ac      	str	r4, [r5, #24]
  40fd88:	f7fb fac0 	bl	40b30c <memset>
  40fd8c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 40fe38 <__sinit.part.1+0xf0>
  40fd90:	f8da 6008 	ldr.w	r6, [sl, #8]
  40fd94:	f04f 0301 	mov.w	r3, #1
  40fd98:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 40fe3c <__sinit.part.1+0xf4>
  40fd9c:	f04f 0e09 	mov.w	lr, #9
  40fda0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 40fe40 <__sinit.part.1+0xf8>
  40fda4:	4621      	mov	r1, r4
  40fda6:	4f23      	ldr	r7, [pc, #140]	; (40fe34 <__sinit.part.1+0xec>)
  40fda8:	2208      	movs	r2, #8
  40fdaa:	61ed      	str	r5, [r5, #28]
  40fdac:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40fdb0:	f8c5 b020 	str.w	fp, [r5, #32]
  40fdb4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40fdb8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40fdbc:	62ef      	str	r7, [r5, #44]	; 0x2c
  40fdbe:	81f3      	strh	r3, [r6, #14]
  40fdc0:	f8a6 e00c 	strh.w	lr, [r6, #12]
  40fdc4:	6034      	str	r4, [r6, #0]
  40fdc6:	6074      	str	r4, [r6, #4]
  40fdc8:	60b4      	str	r4, [r6, #8]
  40fdca:	6674      	str	r4, [r6, #100]	; 0x64
  40fdcc:	6134      	str	r4, [r6, #16]
  40fdce:	6174      	str	r4, [r6, #20]
  40fdd0:	61b4      	str	r4, [r6, #24]
  40fdd2:	f7fb fa9b 	bl	40b30c <memset>
  40fdd6:	f8da 500c 	ldr.w	r5, [sl, #12]
  40fdda:	f04f 0c12 	mov.w	ip, #18
  40fdde:	f04f 0e02 	mov.w	lr, #2
  40fde2:	61f6      	str	r6, [r6, #28]
  40fde4:	4621      	mov	r1, r4
  40fde6:	f8c6 b020 	str.w	fp, [r6, #32]
  40fdea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40fdee:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  40fdf2:	2208      	movs	r2, #8
  40fdf4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  40fdf8:	62f7      	str	r7, [r6, #44]	; 0x2c
  40fdfa:	602c      	str	r4, [r5, #0]
  40fdfc:	606c      	str	r4, [r5, #4]
  40fdfe:	60ac      	str	r4, [r5, #8]
  40fe00:	666c      	str	r4, [r5, #100]	; 0x64
  40fe02:	612c      	str	r4, [r5, #16]
  40fe04:	616c      	str	r4, [r5, #20]
  40fe06:	61ac      	str	r4, [r5, #24]
  40fe08:	f8a5 c00c 	strh.w	ip, [r5, #12]
  40fe0c:	f8a5 e00e 	strh.w	lr, [r5, #14]
  40fe10:	f7fb fa7c 	bl	40b30c <memset>
  40fe14:	2301      	movs	r3, #1
  40fe16:	61ed      	str	r5, [r5, #28]
  40fe18:	f8c5 b020 	str.w	fp, [r5, #32]
  40fe1c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
  40fe20:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  40fe24:	62ef      	str	r7, [r5, #44]	; 0x2c
  40fe26:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  40fe2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fe2e:	bf00      	nop
  40fe30:	0040fd3d 	.word	0x0040fd3d
  40fe34:	00411c6d 	.word	0x00411c6d
  40fe38:	00411bed 	.word	0x00411bed
  40fe3c:	00411c11 	.word	0x00411c11
  40fe40:	00411c49 	.word	0x00411c49

0040fe44 <__sinit>:
  40fe44:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40fe46:	b103      	cbz	r3, 40fe4a <__sinit+0x6>
  40fe48:	4770      	bx	lr
  40fe4a:	f7ff bf7d 	b.w	40fd48 <__sinit.part.1>
  40fe4e:	bf00      	nop

0040fe50 <__sfp_lock_acquire>:
  40fe50:	4770      	bx	lr
  40fe52:	bf00      	nop

0040fe54 <__sfp_lock_release>:
  40fe54:	4770      	bx	lr
  40fe56:	bf00      	nop

0040fe58 <__libc_fini_array>:
  40fe58:	b538      	push	{r3, r4, r5, lr}
  40fe5a:	4b08      	ldr	r3, [pc, #32]	; (40fe7c <__libc_fini_array+0x24>)
  40fe5c:	4d08      	ldr	r5, [pc, #32]	; (40fe80 <__libc_fini_array+0x28>)
  40fe5e:	1aed      	subs	r5, r5, r3
  40fe60:	10ac      	asrs	r4, r5, #2
  40fe62:	bf18      	it	ne
  40fe64:	18ed      	addne	r5, r5, r3
  40fe66:	d005      	beq.n	40fe74 <__libc_fini_array+0x1c>
  40fe68:	3c01      	subs	r4, #1
  40fe6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40fe6e:	4798      	blx	r3
  40fe70:	2c00      	cmp	r4, #0
  40fe72:	d1f9      	bne.n	40fe68 <__libc_fini_array+0x10>
  40fe74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40fe78:	f003 bd84 	b.w	413984 <_fini>
  40fe7c:	00413990 	.word	0x00413990
  40fe80:	00413994 	.word	0x00413994

0040fe84 <__fputwc>:
  40fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fe88:	b082      	sub	sp, #8
  40fe8a:	4607      	mov	r7, r0
  40fe8c:	460e      	mov	r6, r1
  40fe8e:	4614      	mov	r4, r2
  40fe90:	f000 fee2 	bl	410c58 <__locale_mb_cur_max>
  40fe94:	2801      	cmp	r0, #1
  40fe96:	d040      	beq.n	40ff1a <__fputwc+0x96>
  40fe98:	4638      	mov	r0, r7
  40fe9a:	a901      	add	r1, sp, #4
  40fe9c:	4632      	mov	r2, r6
  40fe9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40fea2:	f002 f80f 	bl	411ec4 <_wcrtomb_r>
  40fea6:	f1b0 3fff 	cmp.w	r0, #4294967295
  40feaa:	4680      	mov	r8, r0
  40feac:	d02e      	beq.n	40ff0c <__fputwc+0x88>
  40feae:	2800      	cmp	r0, #0
  40feb0:	d03b      	beq.n	40ff2a <__fputwc+0xa6>
  40feb2:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40feb6:	2500      	movs	r5, #0
  40feb8:	e009      	b.n	40fece <__fputwc+0x4a>
  40feba:	6823      	ldr	r3, [r4, #0]
  40febc:	7019      	strb	r1, [r3, #0]
  40febe:	6823      	ldr	r3, [r4, #0]
  40fec0:	3301      	adds	r3, #1
  40fec2:	6023      	str	r3, [r4, #0]
  40fec4:	3501      	adds	r5, #1
  40fec6:	45a8      	cmp	r8, r5
  40fec8:	d92f      	bls.n	40ff2a <__fputwc+0xa6>
  40feca:	ab01      	add	r3, sp, #4
  40fecc:	5d59      	ldrb	r1, [r3, r5]
  40fece:	68a3      	ldr	r3, [r4, #8]
  40fed0:	3b01      	subs	r3, #1
  40fed2:	2b00      	cmp	r3, #0
  40fed4:	60a3      	str	r3, [r4, #8]
  40fed6:	daf0      	bge.n	40feba <__fputwc+0x36>
  40fed8:	69a2      	ldr	r2, [r4, #24]
  40feda:	4293      	cmp	r3, r2
  40fedc:	db06      	blt.n	40feec <__fputwc+0x68>
  40fede:	6823      	ldr	r3, [r4, #0]
  40fee0:	7019      	strb	r1, [r3, #0]
  40fee2:	6823      	ldr	r3, [r4, #0]
  40fee4:	7819      	ldrb	r1, [r3, #0]
  40fee6:	3301      	adds	r3, #1
  40fee8:	290a      	cmp	r1, #10
  40feea:	d1ea      	bne.n	40fec2 <__fputwc+0x3e>
  40feec:	4638      	mov	r0, r7
  40feee:	4622      	mov	r2, r4
  40fef0:	f001 ff94 	bl	411e1c <__swbuf_r>
  40fef4:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40fef8:	fab0 f080 	clz	r0, r0
  40fefc:	0940      	lsrs	r0, r0, #5
  40fefe:	2800      	cmp	r0, #0
  40ff00:	d0e0      	beq.n	40fec4 <__fputwc+0x40>
  40ff02:	f04f 30ff 	mov.w	r0, #4294967295
  40ff06:	b002      	add	sp, #8
  40ff08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff0c:	89a3      	ldrh	r3, [r4, #12]
  40ff0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ff12:	81a3      	strh	r3, [r4, #12]
  40ff14:	b002      	add	sp, #8
  40ff16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff1a:	1e73      	subs	r3, r6, #1
  40ff1c:	2bfe      	cmp	r3, #254	; 0xfe
  40ff1e:	d8bb      	bhi.n	40fe98 <__fputwc+0x14>
  40ff20:	b2f1      	uxtb	r1, r6
  40ff22:	4680      	mov	r8, r0
  40ff24:	f88d 1004 	strb.w	r1, [sp, #4]
  40ff28:	e7c5      	b.n	40feb6 <__fputwc+0x32>
  40ff2a:	4630      	mov	r0, r6
  40ff2c:	b002      	add	sp, #8
  40ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ff32:	bf00      	nop

0040ff34 <_fputwc_r>:
  40ff34:	8993      	ldrh	r3, [r2, #12]
  40ff36:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40ff3a:	d10b      	bne.n	40ff54 <_fputwc_r+0x20>
  40ff3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ff40:	b410      	push	{r4}
  40ff42:	6e54      	ldr	r4, [r2, #100]	; 0x64
  40ff44:	8193      	strh	r3, [r2, #12]
  40ff46:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40ff4a:	6654      	str	r4, [r2, #100]	; 0x64
  40ff4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ff50:	f7ff bf98 	b.w	40fe84 <__fputwc>
  40ff54:	f7ff bf96 	b.w	40fe84 <__fputwc>

0040ff58 <_malloc_trim_r>:
  40ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ff5a:	4f22      	ldr	r7, [pc, #136]	; (40ffe4 <_malloc_trim_r+0x8c>)
  40ff5c:	460c      	mov	r4, r1
  40ff5e:	4606      	mov	r6, r0
  40ff60:	f7fb fa24 	bl	40b3ac <__malloc_lock>
  40ff64:	68ba      	ldr	r2, [r7, #8]
  40ff66:	4b20      	ldr	r3, [pc, #128]	; (40ffe8 <_malloc_trim_r+0x90>)
  40ff68:	6855      	ldr	r5, [r2, #4]
  40ff6a:	f025 0503 	bic.w	r5, r5, #3
  40ff6e:	1b2c      	subs	r4, r5, r4
  40ff70:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  40ff74:	4023      	ands	r3, r4
  40ff76:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  40ff7a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40ff7e:	db07      	blt.n	40ff90 <_malloc_trim_r+0x38>
  40ff80:	4630      	mov	r0, r6
  40ff82:	2100      	movs	r1, #0
  40ff84:	f7fb fa16 	bl	40b3b4 <_sbrk_r>
  40ff88:	68bb      	ldr	r3, [r7, #8]
  40ff8a:	442b      	add	r3, r5
  40ff8c:	4298      	cmp	r0, r3
  40ff8e:	d004      	beq.n	40ff9a <_malloc_trim_r+0x42>
  40ff90:	4630      	mov	r0, r6
  40ff92:	f7fb fa0d 	bl	40b3b0 <__malloc_unlock>
  40ff96:	2000      	movs	r0, #0
  40ff98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ff9a:	4630      	mov	r0, r6
  40ff9c:	4261      	negs	r1, r4
  40ff9e:	f7fb fa09 	bl	40b3b4 <_sbrk_r>
  40ffa2:	3001      	adds	r0, #1
  40ffa4:	d00d      	beq.n	40ffc2 <_malloc_trim_r+0x6a>
  40ffa6:	4a11      	ldr	r2, [pc, #68]	; (40ffec <_malloc_trim_r+0x94>)
  40ffa8:	1b2d      	subs	r5, r5, r4
  40ffaa:	68b9      	ldr	r1, [r7, #8]
  40ffac:	4630      	mov	r0, r6
  40ffae:	6813      	ldr	r3, [r2, #0]
  40ffb0:	f045 0501 	orr.w	r5, r5, #1
  40ffb4:	1b1b      	subs	r3, r3, r4
  40ffb6:	604d      	str	r5, [r1, #4]
  40ffb8:	6013      	str	r3, [r2, #0]
  40ffba:	f7fb f9f9 	bl	40b3b0 <__malloc_unlock>
  40ffbe:	2001      	movs	r0, #1
  40ffc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ffc2:	4630      	mov	r0, r6
  40ffc4:	2100      	movs	r1, #0
  40ffc6:	f7fb f9f5 	bl	40b3b4 <_sbrk_r>
  40ffca:	68ba      	ldr	r2, [r7, #8]
  40ffcc:	1a83      	subs	r3, r0, r2
  40ffce:	2b0f      	cmp	r3, #15
  40ffd0:	ddde      	ble.n	40ff90 <_malloc_trim_r+0x38>
  40ffd2:	4c07      	ldr	r4, [pc, #28]	; (40fff0 <_malloc_trim_r+0x98>)
  40ffd4:	f043 0301 	orr.w	r3, r3, #1
  40ffd8:	4904      	ldr	r1, [pc, #16]	; (40ffec <_malloc_trim_r+0x94>)
  40ffda:	6824      	ldr	r4, [r4, #0]
  40ffdc:	6053      	str	r3, [r2, #4]
  40ffde:	1b00      	subs	r0, r0, r4
  40ffe0:	6008      	str	r0, [r1, #0]
  40ffe2:	e7d5      	b.n	40ff90 <_malloc_trim_r+0x38>
  40ffe4:	204004dc 	.word	0x204004dc
  40ffe8:	fffff000 	.word	0xfffff000
  40ffec:	2040c4f0 	.word	0x2040c4f0
  40fff0:	204008e8 	.word	0x204008e8

0040fff4 <_free_r>:
  40fff4:	2900      	cmp	r1, #0
  40fff6:	d04d      	beq.n	410094 <_free_r+0xa0>
  40fff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40fffc:	460c      	mov	r4, r1
  40fffe:	4680      	mov	r8, r0
  410000:	f7fb f9d4 	bl	40b3ac <__malloc_lock>
  410004:	4963      	ldr	r1, [pc, #396]	; (410194 <_free_r+0x1a0>)
  410006:	f854 7c04 	ldr.w	r7, [r4, #-4]
  41000a:	f1a4 0508 	sub.w	r5, r4, #8
  41000e:	688e      	ldr	r6, [r1, #8]
  410010:	f027 0301 	bic.w	r3, r7, #1
  410014:	18ea      	adds	r2, r5, r3
  410016:	6850      	ldr	r0, [r2, #4]
  410018:	4296      	cmp	r6, r2
  41001a:	f020 0003 	bic.w	r0, r0, #3
  41001e:	d059      	beq.n	4100d4 <_free_r+0xe0>
  410020:	07fe      	lsls	r6, r7, #31
  410022:	6050      	str	r0, [r2, #4]
  410024:	d40b      	bmi.n	41003e <_free_r+0x4a>
  410026:	f854 4c08 	ldr.w	r4, [r4, #-8]
  41002a:	f101 0708 	add.w	r7, r1, #8
  41002e:	1b2d      	subs	r5, r5, r4
  410030:	4423      	add	r3, r4
  410032:	68ac      	ldr	r4, [r5, #8]
  410034:	42bc      	cmp	r4, r7
  410036:	d066      	beq.n	410106 <_free_r+0x112>
  410038:	68ef      	ldr	r7, [r5, #12]
  41003a:	60e7      	str	r7, [r4, #12]
  41003c:	60bc      	str	r4, [r7, #8]
  41003e:	1814      	adds	r4, r2, r0
  410040:	6864      	ldr	r4, [r4, #4]
  410042:	07e4      	lsls	r4, r4, #31
  410044:	d40c      	bmi.n	410060 <_free_r+0x6c>
  410046:	4c54      	ldr	r4, [pc, #336]	; (410198 <_free_r+0x1a4>)
  410048:	4403      	add	r3, r0
  41004a:	6890      	ldr	r0, [r2, #8]
  41004c:	42a0      	cmp	r0, r4
  41004e:	d07c      	beq.n	41014a <_free_r+0x156>
  410050:	68d4      	ldr	r4, [r2, #12]
  410052:	f043 0201 	orr.w	r2, r3, #1
  410056:	60c4      	str	r4, [r0, #12]
  410058:	60a0      	str	r0, [r4, #8]
  41005a:	606a      	str	r2, [r5, #4]
  41005c:	50eb      	str	r3, [r5, r3]
  41005e:	e003      	b.n	410068 <_free_r+0x74>
  410060:	f043 0201 	orr.w	r2, r3, #1
  410064:	606a      	str	r2, [r5, #4]
  410066:	50eb      	str	r3, [r5, r3]
  410068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41006c:	d213      	bcs.n	410096 <_free_r+0xa2>
  41006e:	08db      	lsrs	r3, r3, #3
  410070:	2001      	movs	r0, #1
  410072:	684a      	ldr	r2, [r1, #4]
  410074:	109c      	asrs	r4, r3, #2
  410076:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  41007a:	40a0      	lsls	r0, r4
  41007c:	689c      	ldr	r4, [r3, #8]
  41007e:	4302      	orrs	r2, r0
  410080:	60eb      	str	r3, [r5, #12]
  410082:	60ac      	str	r4, [r5, #8]
  410084:	604a      	str	r2, [r1, #4]
  410086:	609d      	str	r5, [r3, #8]
  410088:	60e5      	str	r5, [r4, #12]
  41008a:	4640      	mov	r0, r8
  41008c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  410090:	f7fb b98e 	b.w	40b3b0 <__malloc_unlock>
  410094:	4770      	bx	lr
  410096:	0a5a      	lsrs	r2, r3, #9
  410098:	2a04      	cmp	r2, #4
  41009a:	d847      	bhi.n	41012c <_free_r+0x138>
  41009c:	099a      	lsrs	r2, r3, #6
  41009e:	f102 0438 	add.w	r4, r2, #56	; 0x38
  4100a2:	0060      	lsls	r0, r4, #1
  4100a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  4100a8:	493a      	ldr	r1, [pc, #232]	; (410194 <_free_r+0x1a0>)
  4100aa:	6882      	ldr	r2, [r0, #8]
  4100ac:	4282      	cmp	r2, r0
  4100ae:	d043      	beq.n	410138 <_free_r+0x144>
  4100b0:	6851      	ldr	r1, [r2, #4]
  4100b2:	f021 0103 	bic.w	r1, r1, #3
  4100b6:	4299      	cmp	r1, r3
  4100b8:	d902      	bls.n	4100c0 <_free_r+0xcc>
  4100ba:	6892      	ldr	r2, [r2, #8]
  4100bc:	4290      	cmp	r0, r2
  4100be:	d1f7      	bne.n	4100b0 <_free_r+0xbc>
  4100c0:	68d3      	ldr	r3, [r2, #12]
  4100c2:	60eb      	str	r3, [r5, #12]
  4100c4:	4640      	mov	r0, r8
  4100c6:	60aa      	str	r2, [r5, #8]
  4100c8:	609d      	str	r5, [r3, #8]
  4100ca:	60d5      	str	r5, [r2, #12]
  4100cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4100d0:	f7fb b96e 	b.w	40b3b0 <__malloc_unlock>
  4100d4:	07ff      	lsls	r7, r7, #31
  4100d6:	4403      	add	r3, r0
  4100d8:	d407      	bmi.n	4100ea <_free_r+0xf6>
  4100da:	f854 2c08 	ldr.w	r2, [r4, #-8]
  4100de:	1aad      	subs	r5, r5, r2
  4100e0:	4413      	add	r3, r2
  4100e2:	68a8      	ldr	r0, [r5, #8]
  4100e4:	68ea      	ldr	r2, [r5, #12]
  4100e6:	60c2      	str	r2, [r0, #12]
  4100e8:	6090      	str	r0, [r2, #8]
  4100ea:	4a2c      	ldr	r2, [pc, #176]	; (41019c <_free_r+0x1a8>)
  4100ec:	f043 0001 	orr.w	r0, r3, #1
  4100f0:	6812      	ldr	r2, [r2, #0]
  4100f2:	6068      	str	r0, [r5, #4]
  4100f4:	4293      	cmp	r3, r2
  4100f6:	608d      	str	r5, [r1, #8]
  4100f8:	d3c7      	bcc.n	41008a <_free_r+0x96>
  4100fa:	4b29      	ldr	r3, [pc, #164]	; (4101a0 <_free_r+0x1ac>)
  4100fc:	4640      	mov	r0, r8
  4100fe:	6819      	ldr	r1, [r3, #0]
  410100:	f7ff ff2a 	bl	40ff58 <_malloc_trim_r>
  410104:	e7c1      	b.n	41008a <_free_r+0x96>
  410106:	1811      	adds	r1, r2, r0
  410108:	6849      	ldr	r1, [r1, #4]
  41010a:	07c9      	lsls	r1, r1, #31
  41010c:	d409      	bmi.n	410122 <_free_r+0x12e>
  41010e:	4403      	add	r3, r0
  410110:	68d1      	ldr	r1, [r2, #12]
  410112:	6892      	ldr	r2, [r2, #8]
  410114:	f043 0001 	orr.w	r0, r3, #1
  410118:	60d1      	str	r1, [r2, #12]
  41011a:	608a      	str	r2, [r1, #8]
  41011c:	6068      	str	r0, [r5, #4]
  41011e:	50eb      	str	r3, [r5, r3]
  410120:	e7b3      	b.n	41008a <_free_r+0x96>
  410122:	f043 0201 	orr.w	r2, r3, #1
  410126:	606a      	str	r2, [r5, #4]
  410128:	50eb      	str	r3, [r5, r3]
  41012a:	e7ae      	b.n	41008a <_free_r+0x96>
  41012c:	2a14      	cmp	r2, #20
  41012e:	d815      	bhi.n	41015c <_free_r+0x168>
  410130:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  410134:	0060      	lsls	r0, r4, #1
  410136:	e7b5      	b.n	4100a4 <_free_r+0xb0>
  410138:	10a4      	asrs	r4, r4, #2
  41013a:	2701      	movs	r7, #1
  41013c:	6848      	ldr	r0, [r1, #4]
  41013e:	4613      	mov	r3, r2
  410140:	fa07 f404 	lsl.w	r4, r7, r4
  410144:	4320      	orrs	r0, r4
  410146:	6048      	str	r0, [r1, #4]
  410148:	e7bb      	b.n	4100c2 <_free_r+0xce>
  41014a:	f043 0201 	orr.w	r2, r3, #1
  41014e:	614d      	str	r5, [r1, #20]
  410150:	610d      	str	r5, [r1, #16]
  410152:	60e8      	str	r0, [r5, #12]
  410154:	60a8      	str	r0, [r5, #8]
  410156:	606a      	str	r2, [r5, #4]
  410158:	50eb      	str	r3, [r5, r3]
  41015a:	e796      	b.n	41008a <_free_r+0x96>
  41015c:	2a54      	cmp	r2, #84	; 0x54
  41015e:	d804      	bhi.n	41016a <_free_r+0x176>
  410160:	0b1a      	lsrs	r2, r3, #12
  410162:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  410166:	0060      	lsls	r0, r4, #1
  410168:	e79c      	b.n	4100a4 <_free_r+0xb0>
  41016a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41016e:	d804      	bhi.n	41017a <_free_r+0x186>
  410170:	0bda      	lsrs	r2, r3, #15
  410172:	f102 0477 	add.w	r4, r2, #119	; 0x77
  410176:	0060      	lsls	r0, r4, #1
  410178:	e794      	b.n	4100a4 <_free_r+0xb0>
  41017a:	f240 5054 	movw	r0, #1364	; 0x554
  41017e:	4282      	cmp	r2, r0
  410180:	d804      	bhi.n	41018c <_free_r+0x198>
  410182:	0c9a      	lsrs	r2, r3, #18
  410184:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  410188:	0060      	lsls	r0, r4, #1
  41018a:	e78b      	b.n	4100a4 <_free_r+0xb0>
  41018c:	20fc      	movs	r0, #252	; 0xfc
  41018e:	247e      	movs	r4, #126	; 0x7e
  410190:	e788      	b.n	4100a4 <_free_r+0xb0>
  410192:	bf00      	nop
  410194:	204004dc 	.word	0x204004dc
  410198:	204004e4 	.word	0x204004e4
  41019c:	204008e4 	.word	0x204008e4
  4101a0:	2040c4ec 	.word	0x2040c4ec

004101a4 <__sfvwrite_r>:
  4101a4:	6893      	ldr	r3, [r2, #8]
  4101a6:	2b00      	cmp	r3, #0
  4101a8:	d07a      	beq.n	4102a0 <__sfvwrite_r+0xfc>
  4101aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4101ae:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  4101b2:	b083      	sub	sp, #12
  4101b4:	460c      	mov	r4, r1
  4101b6:	4681      	mov	r9, r0
  4101b8:	f01e 0f08 	tst.w	lr, #8
  4101bc:	4616      	mov	r6, r2
  4101be:	d026      	beq.n	41020e <__sfvwrite_r+0x6a>
  4101c0:	690b      	ldr	r3, [r1, #16]
  4101c2:	b323      	cbz	r3, 41020e <__sfvwrite_r+0x6a>
  4101c4:	f00e 0802 	and.w	r8, lr, #2
  4101c8:	6835      	ldr	r5, [r6, #0]
  4101ca:	fa1f f088 	uxth.w	r0, r8
  4101ce:	b370      	cbz	r0, 41022e <__sfvwrite_r+0x8a>
  4101d0:	f04f 0a00 	mov.w	sl, #0
  4101d4:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 4104c4 <__sfvwrite_r+0x320>
  4101d8:	46d0      	mov	r8, sl
  4101da:	45d8      	cmp	r8, fp
  4101dc:	4643      	mov	r3, r8
  4101de:	4652      	mov	r2, sl
  4101e0:	4648      	mov	r0, r9
  4101e2:	bf28      	it	cs
  4101e4:	465b      	movcs	r3, fp
  4101e6:	f1b8 0f00 	cmp.w	r8, #0
  4101ea:	d053      	beq.n	410294 <__sfvwrite_r+0xf0>
  4101ec:	69e1      	ldr	r1, [r4, #28]
  4101ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4101f0:	47b8      	blx	r7
  4101f2:	2800      	cmp	r0, #0
  4101f4:	dd73      	ble.n	4102de <__sfvwrite_r+0x13a>
  4101f6:	68b3      	ldr	r3, [r6, #8]
  4101f8:	4482      	add	sl, r0
  4101fa:	ebc0 0808 	rsb	r8, r0, r8
  4101fe:	1a18      	subs	r0, r3, r0
  410200:	60b0      	str	r0, [r6, #8]
  410202:	2800      	cmp	r0, #0
  410204:	d1e9      	bne.n	4101da <__sfvwrite_r+0x36>
  410206:	2000      	movs	r0, #0
  410208:	b003      	add	sp, #12
  41020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41020e:	4648      	mov	r0, r9
  410210:	4621      	mov	r1, r4
  410212:	f7fe fc49 	bl	40eaa8 <__swsetup_r>
  410216:	2800      	cmp	r0, #0
  410218:	f040 814c 	bne.w	4104b4 <__sfvwrite_r+0x310>
  41021c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  410220:	6835      	ldr	r5, [r6, #0]
  410222:	f00e 0802 	and.w	r8, lr, #2
  410226:	fa1f f088 	uxth.w	r0, r8
  41022a:	2800      	cmp	r0, #0
  41022c:	d1d0      	bne.n	4101d0 <__sfvwrite_r+0x2c>
  41022e:	f01e 0b01 	ands.w	fp, lr, #1
  410232:	d15d      	bne.n	4102f0 <__sfvwrite_r+0x14c>
  410234:	46d8      	mov	r8, fp
  410236:	f1b8 0f00 	cmp.w	r8, #0
  41023a:	d025      	beq.n	410288 <__sfvwrite_r+0xe4>
  41023c:	f41e 7f00 	tst.w	lr, #512	; 0x200
  410240:	68a7      	ldr	r7, [r4, #8]
  410242:	d02f      	beq.n	4102a4 <__sfvwrite_r+0x100>
  410244:	45b8      	cmp	r8, r7
  410246:	46ba      	mov	sl, r7
  410248:	f0c0 80a8 	bcc.w	41039c <__sfvwrite_r+0x1f8>
  41024c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  410250:	f040 80b5 	bne.w	4103be <__sfvwrite_r+0x21a>
  410254:	6820      	ldr	r0, [r4, #0]
  410256:	4659      	mov	r1, fp
  410258:	4652      	mov	r2, sl
  41025a:	f000 fdc1 	bl	410de0 <memmove>
  41025e:	68a2      	ldr	r2, [r4, #8]
  410260:	6821      	ldr	r1, [r4, #0]
  410262:	4640      	mov	r0, r8
  410264:	1bd7      	subs	r7, r2, r7
  410266:	eb01 030a 	add.w	r3, r1, sl
  41026a:	60a7      	str	r7, [r4, #8]
  41026c:	6023      	str	r3, [r4, #0]
  41026e:	68b3      	ldr	r3, [r6, #8]
  410270:	4483      	add	fp, r0
  410272:	ebc0 0808 	rsb	r8, r0, r8
  410276:	1a18      	subs	r0, r3, r0
  410278:	60b0      	str	r0, [r6, #8]
  41027a:	2800      	cmp	r0, #0
  41027c:	d0c3      	beq.n	410206 <__sfvwrite_r+0x62>
  41027e:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  410282:	f1b8 0f00 	cmp.w	r8, #0
  410286:	d1d9      	bne.n	41023c <__sfvwrite_r+0x98>
  410288:	f8d5 b000 	ldr.w	fp, [r5]
  41028c:	3508      	adds	r5, #8
  41028e:	f855 8c04 	ldr.w	r8, [r5, #-4]
  410292:	e7d0      	b.n	410236 <__sfvwrite_r+0x92>
  410294:	f8d5 a000 	ldr.w	sl, [r5]
  410298:	3508      	adds	r5, #8
  41029a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  41029e:	e79c      	b.n	4101da <__sfvwrite_r+0x36>
  4102a0:	2000      	movs	r0, #0
  4102a2:	4770      	bx	lr
  4102a4:	6820      	ldr	r0, [r4, #0]
  4102a6:	6923      	ldr	r3, [r4, #16]
  4102a8:	4298      	cmp	r0, r3
  4102aa:	d803      	bhi.n	4102b4 <__sfvwrite_r+0x110>
  4102ac:	6963      	ldr	r3, [r4, #20]
  4102ae:	4598      	cmp	r8, r3
  4102b0:	f080 80bf 	bcs.w	410432 <__sfvwrite_r+0x28e>
  4102b4:	4547      	cmp	r7, r8
  4102b6:	4659      	mov	r1, fp
  4102b8:	bf28      	it	cs
  4102ba:	4647      	movcs	r7, r8
  4102bc:	463a      	mov	r2, r7
  4102be:	f000 fd8f 	bl	410de0 <memmove>
  4102c2:	68a3      	ldr	r3, [r4, #8]
  4102c4:	6822      	ldr	r2, [r4, #0]
  4102c6:	1bdb      	subs	r3, r3, r7
  4102c8:	443a      	add	r2, r7
  4102ca:	60a3      	str	r3, [r4, #8]
  4102cc:	6022      	str	r2, [r4, #0]
  4102ce:	2b00      	cmp	r3, #0
  4102d0:	d149      	bne.n	410366 <__sfvwrite_r+0x1c2>
  4102d2:	4648      	mov	r0, r9
  4102d4:	4621      	mov	r1, r4
  4102d6:	f7ff fd1b 	bl	40fd10 <_fflush_r>
  4102da:	2800      	cmp	r0, #0
  4102dc:	d043      	beq.n	410366 <__sfvwrite_r+0x1c2>
  4102de:	89a3      	ldrh	r3, [r4, #12]
  4102e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4102e4:	f04f 30ff 	mov.w	r0, #4294967295
  4102e8:	81a3      	strh	r3, [r4, #12]
  4102ea:	b003      	add	sp, #12
  4102ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4102f0:	4680      	mov	r8, r0
  4102f2:	4683      	mov	fp, r0
  4102f4:	4682      	mov	sl, r0
  4102f6:	9000      	str	r0, [sp, #0]
  4102f8:	f1ba 0f00 	cmp.w	sl, #0
  4102fc:	d02b      	beq.n	410356 <__sfvwrite_r+0x1b2>
  4102fe:	9b00      	ldr	r3, [sp, #0]
  410300:	2b00      	cmp	r3, #0
  410302:	d04f      	beq.n	4103a4 <__sfvwrite_r+0x200>
  410304:	45d0      	cmp	r8, sl
  410306:	6962      	ldr	r2, [r4, #20]
  410308:	68a1      	ldr	r1, [r4, #8]
  41030a:	4643      	mov	r3, r8
  41030c:	bf28      	it	cs
  41030e:	4653      	movcs	r3, sl
  410310:	6820      	ldr	r0, [r4, #0]
  410312:	eb02 0c01 	add.w	ip, r2, r1
  410316:	461f      	mov	r7, r3
  410318:	4563      	cmp	r3, ip
  41031a:	dd03      	ble.n	410324 <__sfvwrite_r+0x180>
  41031c:	6921      	ldr	r1, [r4, #16]
  41031e:	4288      	cmp	r0, r1
  410320:	f200 8099 	bhi.w	410456 <__sfvwrite_r+0x2b2>
  410324:	4293      	cmp	r3, r2
  410326:	db20      	blt.n	41036a <__sfvwrite_r+0x1c6>
  410328:	4613      	mov	r3, r2
  41032a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  41032c:	4648      	mov	r0, r9
  41032e:	69e1      	ldr	r1, [r4, #28]
  410330:	465a      	mov	r2, fp
  410332:	47b8      	blx	r7
  410334:	1e07      	subs	r7, r0, #0
  410336:	ddd2      	ble.n	4102de <__sfvwrite_r+0x13a>
  410338:	ebb8 0807 	subs.w	r8, r8, r7
  41033c:	d025      	beq.n	41038a <__sfvwrite_r+0x1e6>
  41033e:	68b3      	ldr	r3, [r6, #8]
  410340:	44bb      	add	fp, r7
  410342:	ebc7 0a0a 	rsb	sl, r7, sl
  410346:	1bdf      	subs	r7, r3, r7
  410348:	60b7      	str	r7, [r6, #8]
  41034a:	2f00      	cmp	r7, #0
  41034c:	f43f af5b 	beq.w	410206 <__sfvwrite_r+0x62>
  410350:	f1ba 0f00 	cmp.w	sl, #0
  410354:	d1d3      	bne.n	4102fe <__sfvwrite_r+0x15a>
  410356:	2300      	movs	r3, #0
  410358:	f8d5 b000 	ldr.w	fp, [r5]
  41035c:	f8d5 a004 	ldr.w	sl, [r5, #4]
  410360:	3508      	adds	r5, #8
  410362:	9300      	str	r3, [sp, #0]
  410364:	e7c8      	b.n	4102f8 <__sfvwrite_r+0x154>
  410366:	4638      	mov	r0, r7
  410368:	e781      	b.n	41026e <__sfvwrite_r+0xca>
  41036a:	461a      	mov	r2, r3
  41036c:	4659      	mov	r1, fp
  41036e:	9301      	str	r3, [sp, #4]
  410370:	f000 fd36 	bl	410de0 <memmove>
  410374:	68a2      	ldr	r2, [r4, #8]
  410376:	ebb8 0807 	subs.w	r8, r8, r7
  41037a:	6821      	ldr	r1, [r4, #0]
  41037c:	9b01      	ldr	r3, [sp, #4]
  41037e:	eba2 0203 	sub.w	r2, r2, r3
  410382:	440b      	add	r3, r1
  410384:	60a2      	str	r2, [r4, #8]
  410386:	6023      	str	r3, [r4, #0]
  410388:	d1d9      	bne.n	41033e <__sfvwrite_r+0x19a>
  41038a:	4648      	mov	r0, r9
  41038c:	4621      	mov	r1, r4
  41038e:	f7ff fcbf 	bl	40fd10 <_fflush_r>
  410392:	2800      	cmp	r0, #0
  410394:	d1a3      	bne.n	4102de <__sfvwrite_r+0x13a>
  410396:	f8cd 8000 	str.w	r8, [sp]
  41039a:	e7d0      	b.n	41033e <__sfvwrite_r+0x19a>
  41039c:	4647      	mov	r7, r8
  41039e:	6820      	ldr	r0, [r4, #0]
  4103a0:	46c2      	mov	sl, r8
  4103a2:	e758      	b.n	410256 <__sfvwrite_r+0xb2>
  4103a4:	4658      	mov	r0, fp
  4103a6:	210a      	movs	r1, #10
  4103a8:	4652      	mov	r2, sl
  4103aa:	f000 fcd1 	bl	410d50 <memchr>
  4103ae:	2800      	cmp	r0, #0
  4103b0:	d07b      	beq.n	4104aa <__sfvwrite_r+0x306>
  4103b2:	3001      	adds	r0, #1
  4103b4:	2301      	movs	r3, #1
  4103b6:	ebcb 0800 	rsb	r8, fp, r0
  4103ba:	9300      	str	r3, [sp, #0]
  4103bc:	e7a2      	b.n	410304 <__sfvwrite_r+0x160>
  4103be:	6963      	ldr	r3, [r4, #20]
  4103c0:	6921      	ldr	r1, [r4, #16]
  4103c2:	6827      	ldr	r7, [r4, #0]
  4103c4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  4103c8:	1a7f      	subs	r7, r7, r1
  4103ca:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
  4103ce:	1c7b      	adds	r3, r7, #1
  4103d0:	ea4f 0c6c 	mov.w	ip, ip, asr #1
  4103d4:	4443      	add	r3, r8
  4103d6:	4662      	mov	r2, ip
  4103d8:	459c      	cmp	ip, r3
  4103da:	d201      	bcs.n	4103e0 <__sfvwrite_r+0x23c>
  4103dc:	469c      	mov	ip, r3
  4103de:	461a      	mov	r2, r3
  4103e0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  4103e4:	f8cd c000 	str.w	ip, [sp]
  4103e8:	d04b      	beq.n	410482 <__sfvwrite_r+0x2de>
  4103ea:	4611      	mov	r1, r2
  4103ec:	4648      	mov	r0, r9
  4103ee:	f7fa fc47 	bl	40ac80 <_malloc_r>
  4103f2:	f8dd c000 	ldr.w	ip, [sp]
  4103f6:	4682      	mov	sl, r0
  4103f8:	2800      	cmp	r0, #0
  4103fa:	d05e      	beq.n	4104ba <__sfvwrite_r+0x316>
  4103fc:	463a      	mov	r2, r7
  4103fe:	6921      	ldr	r1, [r4, #16]
  410400:	f8cd c000 	str.w	ip, [sp]
  410404:	f7fa fee8 	bl	40b1d8 <memcpy>
  410408:	89a2      	ldrh	r2, [r4, #12]
  41040a:	f8dd c000 	ldr.w	ip, [sp]
  41040e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  410412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  410416:	81a2      	strh	r2, [r4, #12]
  410418:	eb0a 0007 	add.w	r0, sl, r7
  41041c:	ebc7 020c 	rsb	r2, r7, ip
  410420:	f8c4 a010 	str.w	sl, [r4, #16]
  410424:	4647      	mov	r7, r8
  410426:	6020      	str	r0, [r4, #0]
  410428:	46c2      	mov	sl, r8
  41042a:	60a2      	str	r2, [r4, #8]
  41042c:	f8c4 c014 	str.w	ip, [r4, #20]
  410430:	e711      	b.n	410256 <__sfvwrite_r+0xb2>
  410432:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
  410436:	6a67      	ldr	r7, [r4, #36]	; 0x24
  410438:	4648      	mov	r0, r9
  41043a:	69e1      	ldr	r1, [r4, #28]
  41043c:	45c6      	cmp	lr, r8
  41043e:	465a      	mov	r2, fp
  410440:	bf28      	it	cs
  410442:	46c6      	movcs	lr, r8
  410444:	fb9e fef3 	sdiv	lr, lr, r3
  410448:	fb0e f303 	mul.w	r3, lr, r3
  41044c:	47b8      	blx	r7
  41044e:	2800      	cmp	r0, #0
  410450:	f73f af0d 	bgt.w	41026e <__sfvwrite_r+0xca>
  410454:	e743      	b.n	4102de <__sfvwrite_r+0x13a>
  410456:	4662      	mov	r2, ip
  410458:	4659      	mov	r1, fp
  41045a:	f8cd c004 	str.w	ip, [sp, #4]
  41045e:	f000 fcbf 	bl	410de0 <memmove>
  410462:	6823      	ldr	r3, [r4, #0]
  410464:	4648      	mov	r0, r9
  410466:	f8dd c004 	ldr.w	ip, [sp, #4]
  41046a:	4621      	mov	r1, r4
  41046c:	4463      	add	r3, ip
  41046e:	6023      	str	r3, [r4, #0]
  410470:	f7ff fc4e 	bl	40fd10 <_fflush_r>
  410474:	f8dd c004 	ldr.w	ip, [sp, #4]
  410478:	2800      	cmp	r0, #0
  41047a:	f47f af30 	bne.w	4102de <__sfvwrite_r+0x13a>
  41047e:	4667      	mov	r7, ip
  410480:	e75a      	b.n	410338 <__sfvwrite_r+0x194>
  410482:	4648      	mov	r0, r9
  410484:	f001 f96c 	bl	411760 <_realloc_r>
  410488:	f8dd c000 	ldr.w	ip, [sp]
  41048c:	4682      	mov	sl, r0
  41048e:	2800      	cmp	r0, #0
  410490:	d1c2      	bne.n	410418 <__sfvwrite_r+0x274>
  410492:	4648      	mov	r0, r9
  410494:	6921      	ldr	r1, [r4, #16]
  410496:	f7ff fdad 	bl	40fff4 <_free_r>
  41049a:	89a3      	ldrh	r3, [r4, #12]
  41049c:	220c      	movs	r2, #12
  41049e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4104a2:	f8c9 2000 	str.w	r2, [r9]
  4104a6:	b29b      	uxth	r3, r3
  4104a8:	e71a      	b.n	4102e0 <__sfvwrite_r+0x13c>
  4104aa:	2301      	movs	r3, #1
  4104ac:	f10a 0801 	add.w	r8, sl, #1
  4104b0:	9300      	str	r3, [sp, #0]
  4104b2:	e727      	b.n	410304 <__sfvwrite_r+0x160>
  4104b4:	f04f 30ff 	mov.w	r0, #4294967295
  4104b8:	e6a6      	b.n	410208 <__sfvwrite_r+0x64>
  4104ba:	220c      	movs	r2, #12
  4104bc:	89a3      	ldrh	r3, [r4, #12]
  4104be:	f8c9 2000 	str.w	r2, [r9]
  4104c2:	e70d      	b.n	4102e0 <__sfvwrite_r+0x13c>
  4104c4:	7ffffc00 	.word	0x7ffffc00

004104c8 <_fwalk_reent>:
  4104c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4104cc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4104d0:	d01e      	beq.n	410510 <_fwalk_reent+0x48>
  4104d2:	4688      	mov	r8, r1
  4104d4:	4606      	mov	r6, r0
  4104d6:	f04f 0900 	mov.w	r9, #0
  4104da:	687d      	ldr	r5, [r7, #4]
  4104dc:	68bc      	ldr	r4, [r7, #8]
  4104de:	3d01      	subs	r5, #1
  4104e0:	d410      	bmi.n	410504 <_fwalk_reent+0x3c>
  4104e2:	89a3      	ldrh	r3, [r4, #12]
  4104e4:	3d01      	subs	r5, #1
  4104e6:	2b01      	cmp	r3, #1
  4104e8:	d908      	bls.n	4104fc <_fwalk_reent+0x34>
  4104ea:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4104ee:	4621      	mov	r1, r4
  4104f0:	4630      	mov	r0, r6
  4104f2:	3301      	adds	r3, #1
  4104f4:	d002      	beq.n	4104fc <_fwalk_reent+0x34>
  4104f6:	47c0      	blx	r8
  4104f8:	ea49 0900 	orr.w	r9, r9, r0
  4104fc:	1c6b      	adds	r3, r5, #1
  4104fe:	f104 0468 	add.w	r4, r4, #104	; 0x68
  410502:	d1ee      	bne.n	4104e2 <_fwalk_reent+0x1a>
  410504:	683f      	ldr	r7, [r7, #0]
  410506:	2f00      	cmp	r7, #0
  410508:	d1e7      	bne.n	4104da <_fwalk_reent+0x12>
  41050a:	4648      	mov	r0, r9
  41050c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  410510:	46b9      	mov	r9, r7
  410512:	4648      	mov	r0, r9
  410514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00410518 <rshift>:
  410518:	6902      	ldr	r2, [r0, #16]
  41051a:	114b      	asrs	r3, r1, #5
  41051c:	4293      	cmp	r3, r2
  41051e:	b5f0      	push	{r4, r5, r6, r7, lr}
  410520:	f100 0614 	add.w	r6, r0, #20
  410524:	da2b      	bge.n	41057e <rshift+0x66>
  410526:	f011 011f 	ands.w	r1, r1, #31
  41052a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  41052e:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
  410532:	d029      	beq.n	410588 <rshift+0x70>
  410534:	f10e 0504 	add.w	r5, lr, #4
  410538:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  41053c:	f1c1 0c20 	rsb	ip, r1, #32
  410540:	42aa      	cmp	r2, r5
  410542:	fa23 f401 	lsr.w	r4, r3, r1
  410546:	d935      	bls.n	4105b4 <rshift+0x9c>
  410548:	f100 0710 	add.w	r7, r0, #16
  41054c:	682b      	ldr	r3, [r5, #0]
  41054e:	fa03 f30c 	lsl.w	r3, r3, ip
  410552:	4323      	orrs	r3, r4
  410554:	f847 3f04 	str.w	r3, [r7, #4]!
  410558:	f855 3b04 	ldr.w	r3, [r5], #4
  41055c:	42aa      	cmp	r2, r5
  41055e:	fa23 f401 	lsr.w	r4, r3, r1
  410562:	d8f3      	bhi.n	41054c <rshift+0x34>
  410564:	ebce 0202 	rsb	r2, lr, r2
  410568:	3a05      	subs	r2, #5
  41056a:	f022 0203 	bic.w	r2, r2, #3
  41056e:	3204      	adds	r2, #4
  410570:	4432      	add	r2, r6
  410572:	6014      	str	r4, [r2, #0]
  410574:	b104      	cbz	r4, 410578 <rshift+0x60>
  410576:	3204      	adds	r2, #4
  410578:	1b93      	subs	r3, r2, r6
  41057a:	109b      	asrs	r3, r3, #2
  41057c:	e016      	b.n	4105ac <rshift+0x94>
  41057e:	2300      	movs	r3, #0
  410580:	6103      	str	r3, [r0, #16]
  410582:	2300      	movs	r3, #0
  410584:	6143      	str	r3, [r0, #20]
  410586:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410588:	4572      	cmp	r2, lr
  41058a:	d9f8      	bls.n	41057e <rshift+0x66>
  41058c:	f100 0410 	add.w	r4, r0, #16
  410590:	4671      	mov	r1, lr
  410592:	f851 5b04 	ldr.w	r5, [r1], #4
  410596:	428a      	cmp	r2, r1
  410598:	f844 5f04 	str.w	r5, [r4, #4]!
  41059c:	d8f9      	bhi.n	410592 <rshift+0x7a>
  41059e:	ea6f 030e 	mvn.w	r3, lr
  4105a2:	4413      	add	r3, r2
  4105a4:	f023 0303 	bic.w	r3, r3, #3
  4105a8:	3304      	adds	r3, #4
  4105aa:	109b      	asrs	r3, r3, #2
  4105ac:	6103      	str	r3, [r0, #16]
  4105ae:	2b00      	cmp	r3, #0
  4105b0:	d0e7      	beq.n	410582 <rshift+0x6a>
  4105b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4105b4:	4632      	mov	r2, r6
  4105b6:	e7dc      	b.n	410572 <rshift+0x5a>

004105b8 <__gethex>:
  4105b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4105bc:	b08b      	sub	sp, #44	; 0x2c
  4105be:	4688      	mov	r8, r1
  4105c0:	9202      	str	r2, [sp, #8]
  4105c2:	9307      	str	r3, [sp, #28]
  4105c4:	9005      	str	r0, [sp, #20]
  4105c6:	f000 fb4d 	bl	410c64 <_localeconv_r>
  4105ca:	6803      	ldr	r3, [r0, #0]
  4105cc:	4618      	mov	r0, r3
  4105ce:	461c      	mov	r4, r3
  4105d0:	9303      	str	r3, [sp, #12]
  4105d2:	f7fb f8a3 	bl	40b71c <strlen>
  4105d6:	f8d8 3000 	ldr.w	r3, [r8]
  4105da:	1821      	adds	r1, r4, r0
  4105dc:	9000      	str	r0, [sp, #0]
  4105de:	789a      	ldrb	r2, [r3, #2]
  4105e0:	f811 bc01 	ldrb.w	fp, [r1, #-1]
  4105e4:	2a30      	cmp	r2, #48	; 0x30
  4105e6:	f040 819f 	bne.w	410928 <__gethex+0x370>
  4105ea:	3303      	adds	r3, #3
  4105ec:	f04f 0900 	mov.w	r9, #0
  4105f0:	461c      	mov	r4, r3
  4105f2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4105f6:	f109 0901 	add.w	r9, r9, #1
  4105fa:	2a30      	cmp	r2, #48	; 0x30
  4105fc:	d0f8      	beq.n	4105f0 <__gethex+0x38>
  4105fe:	4eae      	ldr	r6, [pc, #696]	; (4108b8 <__gethex+0x300>)
  410600:	5cb3      	ldrb	r3, [r6, r2]
  410602:	2b00      	cmp	r3, #0
  410604:	f000 80ec 	beq.w	4107e0 <__gethex+0x228>
  410608:	7823      	ldrb	r3, [r4, #0]
  41060a:	f04f 0a00 	mov.w	sl, #0
  41060e:	5cf3      	ldrb	r3, [r6, r3]
  410610:	4655      	mov	r5, sl
  410612:	4627      	mov	r7, r4
  410614:	b123      	cbz	r3, 410620 <__gethex+0x68>
  410616:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  41061a:	5cf3      	ldrb	r3, [r6, r3]
  41061c:	2b00      	cmp	r3, #0
  41061e:	d1fa      	bne.n	410616 <__gethex+0x5e>
  410620:	4638      	mov	r0, r7
  410622:	9903      	ldr	r1, [sp, #12]
  410624:	9a00      	ldr	r2, [sp, #0]
  410626:	f001 fb25 	bl	411c74 <strncmp>
  41062a:	b1c0      	cbz	r0, 41065e <__gethex+0xa6>
  41062c:	783b      	ldrb	r3, [r7, #0]
  41062e:	2d00      	cmp	r5, #0
  410630:	f000 816a 	beq.w	410908 <__gethex+0x350>
  410634:	1bed      	subs	r5, r5, r7
  410636:	00aa      	lsls	r2, r5, #2
  410638:	9201      	str	r2, [sp, #4]
  41063a:	2b50      	cmp	r3, #80	; 0x50
  41063c:	d018      	beq.n	410670 <__gethex+0xb8>
  41063e:	2b70      	cmp	r3, #112	; 0x70
  410640:	d016      	beq.n	410670 <__gethex+0xb8>
  410642:	463d      	mov	r5, r7
  410644:	f8c8 7000 	str.w	r7, [r8]
  410648:	f1ba 0f00 	cmp.w	sl, #0
  41064c:	d03f      	beq.n	4106ce <__gethex+0x116>
  41064e:	f1b9 0f00 	cmp.w	r9, #0
  410652:	bf14      	ite	ne
  410654:	2000      	movne	r0, #0
  410656:	2006      	moveq	r0, #6
  410658:	b00b      	add	sp, #44	; 0x2c
  41065a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41065e:	2d00      	cmp	r5, #0
  410660:	f000 818a 	beq.w	410978 <__gethex+0x3c0>
  410664:	783b      	ldrb	r3, [r7, #0]
  410666:	e7e5      	b.n	410634 <__gethex+0x7c>
  410668:	2300      	movs	r3, #0
  41066a:	f04f 0a01 	mov.w	sl, #1
  41066e:	9301      	str	r3, [sp, #4]
  410670:	787b      	ldrb	r3, [r7, #1]
  410672:	2b2b      	cmp	r3, #43	; 0x2b
  410674:	f000 811d 	beq.w	4108b2 <__gethex+0x2fa>
  410678:	2b2d      	cmp	r3, #45	; 0x2d
  41067a:	f000 80e4 	beq.w	410846 <__gethex+0x28e>
  41067e:	1c79      	adds	r1, r7, #1
  410680:	f04f 0e00 	mov.w	lr, #0
  410684:	5cf3      	ldrb	r3, [r6, r3]
  410686:	4a8c      	ldr	r2, [pc, #560]	; (4108b8 <__gethex+0x300>)
  410688:	1e58      	subs	r0, r3, #1
  41068a:	2818      	cmp	r0, #24
  41068c:	d8d9      	bhi.n	410642 <__gethex+0x8a>
  41068e:	7848      	ldrb	r0, [r1, #1]
  410690:	3b10      	subs	r3, #16
  410692:	3101      	adds	r1, #1
  410694:	5c12      	ldrb	r2, [r2, r0]
  410696:	1e50      	subs	r0, r2, #1
  410698:	2818      	cmp	r0, #24
  41069a:	d80a      	bhi.n	4106b2 <__gethex+0xfa>
  41069c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4106a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4106a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  4106a8:	5c32      	ldrb	r2, [r6, r0]
  4106aa:	1e50      	subs	r0, r2, #1
  4106ac:	3b10      	subs	r3, #16
  4106ae:	2818      	cmp	r0, #24
  4106b0:	d9f4      	bls.n	41069c <__gethex+0xe4>
  4106b2:	f1ce 0200 	rsb	r2, lr, #0
  4106b6:	463d      	mov	r5, r7
  4106b8:	460f      	mov	r7, r1
  4106ba:	4053      	eors	r3, r2
  4106bc:	f8c8 7000 	str.w	r7, [r8]
  4106c0:	449e      	add	lr, r3
  4106c2:	9b01      	ldr	r3, [sp, #4]
  4106c4:	4473      	add	r3, lr
  4106c6:	9301      	str	r3, [sp, #4]
  4106c8:	f1ba 0f00 	cmp.w	sl, #0
  4106cc:	d1bf      	bne.n	41064e <__gethex+0x96>
  4106ce:	1b2b      	subs	r3, r5, r4
  4106d0:	4651      	mov	r1, sl
  4106d2:	3b01      	subs	r3, #1
  4106d4:	2b07      	cmp	r3, #7
  4106d6:	dd03      	ble.n	4106e0 <__gethex+0x128>
  4106d8:	105b      	asrs	r3, r3, #1
  4106da:	3101      	adds	r1, #1
  4106dc:	2b07      	cmp	r3, #7
  4106de:	dcfb      	bgt.n	4106d8 <__gethex+0x120>
  4106e0:	9805      	ldr	r0, [sp, #20]
  4106e2:	f000 fbdf 	bl	410ea4 <_Balloc>
  4106e6:	4603      	mov	r3, r0
  4106e8:	42a5      	cmp	r5, r4
  4106ea:	9004      	str	r0, [sp, #16]
  4106ec:	f103 0314 	add.w	r3, r3, #20
  4106f0:	9306      	str	r3, [sp, #24]
  4106f2:	f240 8193 	bls.w	410a1c <__gethex+0x464>
  4106f6:	f04f 0800 	mov.w	r8, #0
  4106fa:	469a      	mov	sl, r3
  4106fc:	9b00      	ldr	r3, [sp, #0]
  4106fe:	4647      	mov	r7, r8
  410700:	46a0      	mov	r8, r4
  410702:	f1c3 0c01 	rsb	ip, r3, #1
  410706:	463c      	mov	r4, r7
  410708:	46e1      	mov	r9, ip
  41070a:	e00f      	b.n	41072c <__gethex+0x174>
  41070c:	2f20      	cmp	r7, #32
  41070e:	d05f      	beq.n	4107d0 <__gethex+0x218>
  410710:	463a      	mov	r2, r7
  410712:	3704      	adds	r7, #4
  410714:	f815 1c01 	ldrb.w	r1, [r5, #-1]
  410718:	461d      	mov	r5, r3
  41071a:	5c73      	ldrb	r3, [r6, r1]
  41071c:	4545      	cmp	r5, r8
  41071e:	f003 030f 	and.w	r3, r3, #15
  410722:	fa03 f302 	lsl.w	r3, r3, r2
  410726:	ea44 0403 	orr.w	r4, r4, r3
  41072a:	d918      	bls.n	41075e <__gethex+0x1a6>
  41072c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  410730:	1e6b      	subs	r3, r5, #1
  410732:	455a      	cmp	r2, fp
  410734:	d1ea      	bne.n	41070c <__gethex+0x154>
  410736:	eb03 0c09 	add.w	ip, r3, r9
  41073a:	45c4      	cmp	ip, r8
  41073c:	d3e6      	bcc.n	41070c <__gethex+0x154>
  41073e:	4660      	mov	r0, ip
  410740:	9903      	ldr	r1, [sp, #12]
  410742:	9a00      	ldr	r2, [sp, #0]
  410744:	9309      	str	r3, [sp, #36]	; 0x24
  410746:	f8cd c020 	str.w	ip, [sp, #32]
  41074a:	f001 fa93 	bl	411c74 <strncmp>
  41074e:	f8dd c020 	ldr.w	ip, [sp, #32]
  410752:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410754:	2800      	cmp	r0, #0
  410756:	d1d9      	bne.n	41070c <__gethex+0x154>
  410758:	4665      	mov	r5, ip
  41075a:	4545      	cmp	r5, r8
  41075c:	d8e6      	bhi.n	41072c <__gethex+0x174>
  41075e:	46a0      	mov	r8, r4
  410760:	9b06      	ldr	r3, [sp, #24]
  410762:	4640      	mov	r0, r8
  410764:	f84a 8b04 	str.w	r8, [sl], #4
  410768:	ebc3 0a0a 	rsb	sl, r3, sl
  41076c:	9a04      	ldr	r2, [sp, #16]
  41076e:	ea4f 03aa 	mov.w	r3, sl, asr #2
  410772:	6113      	str	r3, [r2, #16]
  410774:	015c      	lsls	r4, r3, #5
  410776:	f000 fc53 	bl	411020 <__hi0bits>
  41077a:	9b02      	ldr	r3, [sp, #8]
  41077c:	1a20      	subs	r0, r4, r0
  41077e:	681e      	ldr	r6, [r3, #0]
  410780:	42b0      	cmp	r0, r6
  410782:	f300 809b 	bgt.w	4108bc <__gethex+0x304>
  410786:	f2c0 80c1 	blt.w	41090c <__gethex+0x354>
  41078a:	2700      	movs	r7, #0
  41078c:	9b02      	ldr	r3, [sp, #8]
  41078e:	9a01      	ldr	r2, [sp, #4]
  410790:	689b      	ldr	r3, [r3, #8]
  410792:	429a      	cmp	r2, r3
  410794:	dc4c      	bgt.n	410830 <__gethex+0x278>
  410796:	9b02      	ldr	r3, [sp, #8]
  410798:	9a01      	ldr	r2, [sp, #4]
  41079a:	685b      	ldr	r3, [r3, #4]
  41079c:	429a      	cmp	r2, r3
  41079e:	da6d      	bge.n	41087c <__gethex+0x2c4>
  4107a0:	1a9d      	subs	r5, r3, r2
  4107a2:	42ae      	cmp	r6, r5
  4107a4:	f300 80c8 	bgt.w	410938 <__gethex+0x380>
  4107a8:	9a02      	ldr	r2, [sp, #8]
  4107aa:	68d2      	ldr	r2, [r2, #12]
  4107ac:	2a02      	cmp	r2, #2
  4107ae:	f000 814b 	beq.w	410a48 <__gethex+0x490>
  4107b2:	2a03      	cmp	r2, #3
  4107b4:	f000 8119 	beq.w	4109ea <__gethex+0x432>
  4107b8:	2a01      	cmp	r2, #1
  4107ba:	f000 8136 	beq.w	410a2a <__gethex+0x472>
  4107be:	9805      	ldr	r0, [sp, #20]
  4107c0:	9904      	ldr	r1, [sp, #16]
  4107c2:	f000 fb97 	bl	410ef4 <_Bfree>
  4107c6:	2300      	movs	r3, #0
  4107c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4107ca:	2050      	movs	r0, #80	; 0x50
  4107cc:	6013      	str	r3, [r2, #0]
  4107ce:	e743      	b.n	410658 <__gethex+0xa0>
  4107d0:	f8ca 4000 	str.w	r4, [sl]
  4107d4:	2400      	movs	r4, #0
  4107d6:	f10a 0a04 	add.w	sl, sl, #4
  4107da:	2704      	movs	r7, #4
  4107dc:	4622      	mov	r2, r4
  4107de:	e799      	b.n	410714 <__gethex+0x15c>
  4107e0:	4620      	mov	r0, r4
  4107e2:	9903      	ldr	r1, [sp, #12]
  4107e4:	9a00      	ldr	r2, [sp, #0]
  4107e6:	f001 fa45 	bl	411c74 <strncmp>
  4107ea:	b388      	cbz	r0, 410850 <__gethex+0x298>
  4107ec:	7823      	ldrb	r3, [r4, #0]
  4107ee:	4627      	mov	r7, r4
  4107f0:	2b50      	cmp	r3, #80	; 0x50
  4107f2:	f43f af39 	beq.w	410668 <__gethex+0xb0>
  4107f6:	2b70      	cmp	r3, #112	; 0x70
  4107f8:	f43f af36 	beq.w	410668 <__gethex+0xb0>
  4107fc:	f8c8 7000 	str.w	r7, [r8]
  410800:	e725      	b.n	41064e <__gethex+0x96>
  410802:	4445      	add	r5, r8
  410804:	f1c6 0620 	rsb	r6, r6, #32
  410808:	f855 0c04 	ldr.w	r0, [r5, #-4]
  41080c:	f000 fc08 	bl	411020 <__hi0bits>
  410810:	42b0      	cmp	r0, r6
  410812:	f280 80e6 	bge.w	4109e2 <__gethex+0x42a>
  410816:	9b01      	ldr	r3, [sp, #4]
  410818:	2101      	movs	r1, #1
  41081a:	9804      	ldr	r0, [sp, #16]
  41081c:	440b      	add	r3, r1
  41081e:	461c      	mov	r4, r3
  410820:	9301      	str	r3, [sp, #4]
  410822:	f7ff fe79 	bl	410518 <rshift>
  410826:	9b02      	ldr	r3, [sp, #8]
  410828:	689b      	ldr	r3, [r3, #8]
  41082a:	429c      	cmp	r4, r3
  41082c:	f340 80d9 	ble.w	4109e2 <__gethex+0x42a>
  410830:	9805      	ldr	r0, [sp, #20]
  410832:	9904      	ldr	r1, [sp, #16]
  410834:	f000 fb5e 	bl	410ef4 <_Bfree>
  410838:	2300      	movs	r3, #0
  41083a:	20a3      	movs	r0, #163	; 0xa3
  41083c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  41083e:	6013      	str	r3, [r2, #0]
  410840:	b00b      	add	sp, #44	; 0x2c
  410842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410846:	f04f 0e01 	mov.w	lr, #1
  41084a:	1cb9      	adds	r1, r7, #2
  41084c:	78bb      	ldrb	r3, [r7, #2]
  41084e:	e719      	b.n	410684 <__gethex+0xcc>
  410850:	9900      	ldr	r1, [sp, #0]
  410852:	5c62      	ldrb	r2, [r4, r1]
  410854:	1867      	adds	r7, r4, r1
  410856:	5cb3      	ldrb	r3, [r6, r2]
  410858:	2b00      	cmp	r3, #0
  41085a:	d069      	beq.n	410930 <__gethex+0x378>
  41085c:	2a30      	cmp	r2, #48	; 0x30
  41085e:	463c      	mov	r4, r7
  410860:	d104      	bne.n	41086c <__gethex+0x2b4>
  410862:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  410866:	2b30      	cmp	r3, #48	; 0x30
  410868:	d0fb      	beq.n	410862 <__gethex+0x2aa>
  41086a:	5cf3      	ldrb	r3, [r6, r3]
  41086c:	fab3 fa83 	clz	sl, r3
  410870:	463d      	mov	r5, r7
  410872:	f04f 0901 	mov.w	r9, #1
  410876:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  41087a:	e6ca      	b.n	410612 <__gethex+0x5a>
  41087c:	2401      	movs	r4, #1
  41087e:	b167      	cbz	r7, 41089a <__gethex+0x2e2>
  410880:	9b02      	ldr	r3, [sp, #8]
  410882:	68db      	ldr	r3, [r3, #12]
  410884:	2b02      	cmp	r3, #2
  410886:	f000 8085 	beq.w	410994 <__gethex+0x3dc>
  41088a:	2b03      	cmp	r3, #3
  41088c:	f000 8086 	beq.w	41099c <__gethex+0x3e4>
  410890:	2b01      	cmp	r3, #1
  410892:	f000 80ba 	beq.w	410a0a <__gethex+0x452>
  410896:	f044 0410 	orr.w	r4, r4, #16
  41089a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41089c:	4620      	mov	r0, r4
  41089e:	461a      	mov	r2, r3
  4108a0:	9b04      	ldr	r3, [sp, #16]
  4108a2:	6013      	str	r3, [r2, #0]
  4108a4:	9b07      	ldr	r3, [sp, #28]
  4108a6:	461a      	mov	r2, r3
  4108a8:	9b01      	ldr	r3, [sp, #4]
  4108aa:	6013      	str	r3, [r2, #0]
  4108ac:	b00b      	add	sp, #44	; 0x2c
  4108ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4108b2:	f04f 0e00 	mov.w	lr, #0
  4108b6:	e7c8      	b.n	41084a <__gethex+0x292>
  4108b8:	00413760 	.word	0x00413760
  4108bc:	1b84      	subs	r4, r0, r6
  4108be:	9804      	ldr	r0, [sp, #16]
  4108c0:	4621      	mov	r1, r4
  4108c2:	f000 ff1f 	bl	411704 <__any_on>
  4108c6:	2800      	cmp	r0, #0
  4108c8:	d034      	beq.n	410934 <__gethex+0x37c>
  4108ca:	1e63      	subs	r3, r4, #1
  4108cc:	2701      	movs	r7, #1
  4108ce:	9806      	ldr	r0, [sp, #24]
  4108d0:	115a      	asrs	r2, r3, #5
  4108d2:	f003 011f 	and.w	r1, r3, #31
  4108d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4108da:	fa07 f101 	lsl.w	r1, r7, r1
  4108de:	4211      	tst	r1, r2
  4108e0:	d00a      	beq.n	4108f8 <__gethex+0x340>
  4108e2:	42bb      	cmp	r3, r7
  4108e4:	f340 809f 	ble.w	410a26 <__gethex+0x46e>
  4108e8:	9804      	ldr	r0, [sp, #16]
  4108ea:	1ea1      	subs	r1, r4, #2
  4108ec:	f000 ff0a 	bl	411704 <__any_on>
  4108f0:	2800      	cmp	r0, #0
  4108f2:	f000 8098 	beq.w	410a26 <__gethex+0x46e>
  4108f6:	2703      	movs	r7, #3
  4108f8:	9b01      	ldr	r3, [sp, #4]
  4108fa:	4621      	mov	r1, r4
  4108fc:	9804      	ldr	r0, [sp, #16]
  4108fe:	4423      	add	r3, r4
  410900:	9301      	str	r3, [sp, #4]
  410902:	f7ff fe09 	bl	410518 <rshift>
  410906:	e741      	b.n	41078c <__gethex+0x1d4>
  410908:	9501      	str	r5, [sp, #4]
  41090a:	e696      	b.n	41063a <__gethex+0x82>
  41090c:	1a32      	subs	r2, r6, r0
  41090e:	9b01      	ldr	r3, [sp, #4]
  410910:	9904      	ldr	r1, [sp, #16]
  410912:	2700      	movs	r7, #0
  410914:	1a9b      	subs	r3, r3, r2
  410916:	9805      	ldr	r0, [sp, #20]
  410918:	9301      	str	r3, [sp, #4]
  41091a:	f000 fcd1 	bl	4112c0 <__lshift>
  41091e:	4603      	mov	r3, r0
  410920:	9004      	str	r0, [sp, #16]
  410922:	3314      	adds	r3, #20
  410924:	9306      	str	r3, [sp, #24]
  410926:	e731      	b.n	41078c <__gethex+0x1d4>
  410928:	1c9c      	adds	r4, r3, #2
  41092a:	f04f 0900 	mov.w	r9, #0
  41092e:	e666      	b.n	4105fe <__gethex+0x46>
  410930:	4613      	mov	r3, r2
  410932:	e75d      	b.n	4107f0 <__gethex+0x238>
  410934:	4607      	mov	r7, r0
  410936:	e7df      	b.n	4108f8 <__gethex+0x340>
  410938:	1e6c      	subs	r4, r5, #1
  41093a:	2f00      	cmp	r7, #0
  41093c:	d153      	bne.n	4109e6 <__gethex+0x42e>
  41093e:	2c00      	cmp	r4, #0
  410940:	dd04      	ble.n	41094c <__gethex+0x394>
  410942:	9804      	ldr	r0, [sp, #16]
  410944:	4621      	mov	r1, r4
  410946:	f000 fedd 	bl	411704 <__any_on>
  41094a:	4607      	mov	r7, r0
  41094c:	1162      	asrs	r2, r4, #5
  41094e:	2301      	movs	r3, #1
  410950:	f004 041f 	and.w	r4, r4, #31
  410954:	9906      	ldr	r1, [sp, #24]
  410956:	40a3      	lsls	r3, r4
  410958:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  41095c:	4213      	tst	r3, r2
  41095e:	d001      	beq.n	410964 <__gethex+0x3ac>
  410960:	f047 0702 	orr.w	r7, r7, #2
  410964:	4629      	mov	r1, r5
  410966:	9804      	ldr	r0, [sp, #16]
  410968:	f7ff fdd6 	bl	410518 <rshift>
  41096c:	9b02      	ldr	r3, [sp, #8]
  41096e:	1b76      	subs	r6, r6, r5
  410970:	2402      	movs	r4, #2
  410972:	685b      	ldr	r3, [r3, #4]
  410974:	9301      	str	r3, [sp, #4]
  410976:	e782      	b.n	41087e <__gethex+0x2c6>
  410978:	9a00      	ldr	r2, [sp, #0]
  41097a:	5cbb      	ldrb	r3, [r7, r2]
  41097c:	18bd      	adds	r5, r7, r2
  41097e:	5cf2      	ldrb	r2, [r6, r3]
  410980:	462f      	mov	r7, r5
  410982:	2a00      	cmp	r2, #0
  410984:	f43f ae56 	beq.w	410634 <__gethex+0x7c>
  410988:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  41098c:	5cf2      	ldrb	r2, [r6, r3]
  41098e:	2a00      	cmp	r2, #0
  410990:	d1fa      	bne.n	410988 <__gethex+0x3d0>
  410992:	e64f      	b.n	410634 <__gethex+0x7c>
  410994:	9b15      	ldr	r3, [sp, #84]	; 0x54
  410996:	f1c3 0301 	rsb	r3, r3, #1
  41099a:	9315      	str	r3, [sp, #84]	; 0x54
  41099c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  41099e:	2b00      	cmp	r3, #0
  4109a0:	f43f af79 	beq.w	410896 <__gethex+0x2de>
  4109a4:	9b04      	ldr	r3, [sp, #16]
  4109a6:	2000      	movs	r0, #0
  4109a8:	9a06      	ldr	r2, [sp, #24]
  4109aa:	691f      	ldr	r7, [r3, #16]
  4109ac:	4613      	mov	r3, r2
  4109ae:	00bd      	lsls	r5, r7, #2
  4109b0:	1951      	adds	r1, r2, r5
  4109b2:	e003      	b.n	4109bc <__gethex+0x404>
  4109b4:	f843 0b04 	str.w	r0, [r3], #4
  4109b8:	4299      	cmp	r1, r3
  4109ba:	d949      	bls.n	410a50 <__gethex+0x498>
  4109bc:	681a      	ldr	r2, [r3, #0]
  4109be:	f1b2 3fff 	cmp.w	r2, #4294967295
  4109c2:	d0f7      	beq.n	4109b4 <__gethex+0x3fc>
  4109c4:	3201      	adds	r2, #1
  4109c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  4109ca:	601a      	str	r2, [r3, #0]
  4109cc:	2c02      	cmp	r4, #2
  4109ce:	d04e      	beq.n	410a6e <__gethex+0x4b6>
  4109d0:	9b04      	ldr	r3, [sp, #16]
  4109d2:	691b      	ldr	r3, [r3, #16]
  4109d4:	429f      	cmp	r7, r3
  4109d6:	f6ff af1e 	blt.w	410816 <__gethex+0x25e>
  4109da:	f016 061f 	ands.w	r6, r6, #31
  4109de:	f47f af10 	bne.w	410802 <__gethex+0x24a>
  4109e2:	2421      	movs	r4, #33	; 0x21
  4109e4:	e759      	b.n	41089a <__gethex+0x2e2>
  4109e6:	2701      	movs	r7, #1
  4109e8:	e7b0      	b.n	41094c <__gethex+0x394>
  4109ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4109ec:	2a00      	cmp	r2, #0
  4109ee:	f43f aee6 	beq.w	4107be <__gethex+0x206>
  4109f2:	9907      	ldr	r1, [sp, #28]
  4109f4:	2201      	movs	r2, #1
  4109f6:	2062      	movs	r0, #98	; 0x62
  4109f8:	600b      	str	r3, [r1, #0]
  4109fa:	9b06      	ldr	r3, [sp, #24]
  4109fc:	9904      	ldr	r1, [sp, #16]
  4109fe:	610a      	str	r2, [r1, #16]
  410a00:	601a      	str	r2, [r3, #0]
  410a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410a04:	461a      	mov	r2, r3
  410a06:	6011      	str	r1, [r2, #0]
  410a08:	e626      	b.n	410658 <__gethex+0xa0>
  410a0a:	07ba      	lsls	r2, r7, #30
  410a0c:	f57f af43 	bpl.w	410896 <__gethex+0x2de>
  410a10:	9b06      	ldr	r3, [sp, #24]
  410a12:	681b      	ldr	r3, [r3, #0]
  410a14:	433b      	orrs	r3, r7
  410a16:	07db      	lsls	r3, r3, #31
  410a18:	d4c4      	bmi.n	4109a4 <__gethex+0x3ec>
  410a1a:	e73c      	b.n	410896 <__gethex+0x2de>
  410a1c:	f8dd a018 	ldr.w	sl, [sp, #24]
  410a20:	f04f 0800 	mov.w	r8, #0
  410a24:	e69c      	b.n	410760 <__gethex+0x1a8>
  410a26:	2702      	movs	r7, #2
  410a28:	e766      	b.n	4108f8 <__gethex+0x340>
  410a2a:	42b5      	cmp	r5, r6
  410a2c:	f47f aec7 	bne.w	4107be <__gethex+0x206>
  410a30:	2e01      	cmp	r6, #1
  410a32:	ddde      	ble.n	4109f2 <__gethex+0x43a>
  410a34:	1e71      	subs	r1, r6, #1
  410a36:	9804      	ldr	r0, [sp, #16]
  410a38:	f000 fe64 	bl	411704 <__any_on>
  410a3c:	2800      	cmp	r0, #0
  410a3e:	f43f aebe 	beq.w	4107be <__gethex+0x206>
  410a42:	9b02      	ldr	r3, [sp, #8]
  410a44:	685b      	ldr	r3, [r3, #4]
  410a46:	e7d4      	b.n	4109f2 <__gethex+0x43a>
  410a48:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410a4a:	2a00      	cmp	r2, #0
  410a4c:	d0d1      	beq.n	4109f2 <__gethex+0x43a>
  410a4e:	e6b6      	b.n	4107be <__gethex+0x206>
  410a50:	9b04      	ldr	r3, [sp, #16]
  410a52:	689b      	ldr	r3, [r3, #8]
  410a54:	429f      	cmp	r7, r3
  410a56:	da11      	bge.n	410a7c <__gethex+0x4c4>
  410a58:	f8dd 8018 	ldr.w	r8, [sp, #24]
  410a5c:	463b      	mov	r3, r7
  410a5e:	9804      	ldr	r0, [sp, #16]
  410a60:	1c59      	adds	r1, r3, #1
  410a62:	2201      	movs	r2, #1
  410a64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  410a68:	6101      	str	r1, [r0, #16]
  410a6a:	615a      	str	r2, [r3, #20]
  410a6c:	e7ae      	b.n	4109cc <__gethex+0x414>
  410a6e:	9b02      	ldr	r3, [sp, #8]
  410a70:	681b      	ldr	r3, [r3, #0]
  410a72:	3b01      	subs	r3, #1
  410a74:	42b3      	cmp	r3, r6
  410a76:	d01e      	beq.n	410ab6 <__gethex+0x4fe>
  410a78:	2422      	movs	r4, #34	; 0x22
  410a7a:	e70e      	b.n	41089a <__gethex+0x2e2>
  410a7c:	9b04      	ldr	r3, [sp, #16]
  410a7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410a82:	6859      	ldr	r1, [r3, #4]
  410a84:	4648      	mov	r0, r9
  410a86:	3101      	adds	r1, #1
  410a88:	f000 fa0c 	bl	410ea4 <_Balloc>
  410a8c:	9a04      	ldr	r2, [sp, #16]
  410a8e:	4680      	mov	r8, r0
  410a90:	300c      	adds	r0, #12
  410a92:	6913      	ldr	r3, [r2, #16]
  410a94:	f102 010c 	add.w	r1, r2, #12
  410a98:	1c9a      	adds	r2, r3, #2
  410a9a:	0092      	lsls	r2, r2, #2
  410a9c:	f7fa fb9c 	bl	40b1d8 <memcpy>
  410aa0:	9904      	ldr	r1, [sp, #16]
  410aa2:	4648      	mov	r0, r9
  410aa4:	f8cd 8010 	str.w	r8, [sp, #16]
  410aa8:	f000 fa24 	bl	410ef4 <_Bfree>
  410aac:	f108 0814 	add.w	r8, r8, #20
  410ab0:	f858 3c04 	ldr.w	r3, [r8, #-4]
  410ab4:	e7d3      	b.n	410a5e <__gethex+0x4a6>
  410ab6:	1172      	asrs	r2, r6, #5
  410ab8:	2301      	movs	r3, #1
  410aba:	f006 061f 	and.w	r6, r6, #31
  410abe:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  410ac2:	40b3      	lsls	r3, r6
  410ac4:	4213      	tst	r3, r2
  410ac6:	bf0c      	ite	eq
  410ac8:	2422      	moveq	r4, #34	; 0x22
  410aca:	2421      	movne	r4, #33	; 0x21
  410acc:	e6e5      	b.n	41089a <__gethex+0x2e2>
  410ace:	bf00      	nop

00410ad0 <__hexnan>:
  410ad0:	680b      	ldr	r3, [r1, #0]
  410ad2:	1159      	asrs	r1, r3, #5
  410ad4:	f013 031f 	ands.w	r3, r3, #31
  410ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410adc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  410ae0:	b085      	sub	sp, #20
  410ae2:	9002      	str	r0, [sp, #8]
  410ae4:	9101      	str	r1, [sp, #4]
  410ae6:	9303      	str	r3, [sp, #12]
  410ae8:	d002      	beq.n	410af0 <__hexnan+0x20>
  410aea:	460b      	mov	r3, r1
  410aec:	3304      	adds	r3, #4
  410aee:	9301      	str	r3, [sp, #4]
  410af0:	9c01      	ldr	r4, [sp, #4]
  410af2:	2300      	movs	r3, #0
  410af4:	9902      	ldr	r1, [sp, #8]
  410af6:	f1a4 0804 	sub.w	r8, r4, #4
  410afa:	4618      	mov	r0, r3
  410afc:	469a      	mov	sl, r3
  410afe:	469c      	mov	ip, r3
  410b00:	46c6      	mov	lr, r8
  410b02:	4646      	mov	r6, r8
  410b04:	f8df 9144 	ldr.w	r9, [pc, #324]	; 410c4c <__hexnan+0x17c>
  410b08:	680f      	ldr	r7, [r1, #0]
  410b0a:	f844 3c04 	str.w	r3, [r4, #-4]
  410b0e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  410b12:	b323      	cbz	r3, 410b5e <__hexnan+0x8e>
  410b14:	f819 1003 	ldrb.w	r1, [r9, r3]
  410b18:	2900      	cmp	r1, #0
  410b1a:	d155      	bne.n	410bc8 <__hexnan+0xf8>
  410b1c:	2b20      	cmp	r3, #32
  410b1e:	d86f      	bhi.n	410c00 <__hexnan+0x130>
  410b20:	45d4      	cmp	ip, sl
  410b22:	ddf4      	ble.n	410b0e <__hexnan+0x3e>
  410b24:	2807      	cmp	r0, #7
  410b26:	dc13      	bgt.n	410b50 <__hexnan+0x80>
  410b28:	4576      	cmp	r6, lr
  410b2a:	d211      	bcs.n	410b50 <__hexnan+0x80>
  410b2c:	f1c0 0008 	rsb	r0, r0, #8
  410b30:	6834      	ldr	r4, [r6, #0]
  410b32:	4633      	mov	r3, r6
  410b34:	0080      	lsls	r0, r0, #2
  410b36:	f1c0 0b20 	rsb	fp, r0, #32
  410b3a:	685d      	ldr	r5, [r3, #4]
  410b3c:	fa05 f10b 	lsl.w	r1, r5, fp
  410b40:	4321      	orrs	r1, r4
  410b42:	fa25 f400 	lsr.w	r4, r5, r0
  410b46:	6019      	str	r1, [r3, #0]
  410b48:	f843 4f04 	str.w	r4, [r3, #4]!
  410b4c:	459e      	cmp	lr, r3
  410b4e:	d8f4      	bhi.n	410b3a <__hexnan+0x6a>
  410b50:	4296      	cmp	r6, r2
  410b52:	d84c      	bhi.n	410bee <__hexnan+0x11e>
  410b54:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  410b58:	2008      	movs	r0, #8
  410b5a:	2b00      	cmp	r3, #0
  410b5c:	d1da      	bne.n	410b14 <__hexnan+0x44>
  410b5e:	f1bc 0f00 	cmp.w	ip, #0
  410b62:	d04f      	beq.n	410c04 <__hexnan+0x134>
  410b64:	2807      	cmp	r0, #7
  410b66:	dc13      	bgt.n	410b90 <__hexnan+0xc0>
  410b68:	4576      	cmp	r6, lr
  410b6a:	d211      	bcs.n	410b90 <__hexnan+0xc0>
  410b6c:	f1c0 0308 	rsb	r3, r0, #8
  410b70:	6834      	ldr	r4, [r6, #0]
  410b72:	4631      	mov	r1, r6
  410b74:	009b      	lsls	r3, r3, #2
  410b76:	f1c3 0720 	rsb	r7, r3, #32
  410b7a:	684d      	ldr	r5, [r1, #4]
  410b7c:	fa05 f007 	lsl.w	r0, r5, r7
  410b80:	4320      	orrs	r0, r4
  410b82:	fa25 f403 	lsr.w	r4, r5, r3
  410b86:	6008      	str	r0, [r1, #0]
  410b88:	f841 4f04 	str.w	r4, [r1, #4]!
  410b8c:	4571      	cmp	r1, lr
  410b8e:	d3f4      	bcc.n	410b7a <__hexnan+0xaa>
  410b90:	42b2      	cmp	r2, r6
  410b92:	d23b      	bcs.n	410c0c <__hexnan+0x13c>
  410b94:	4613      	mov	r3, r2
  410b96:	f856 1b04 	ldr.w	r1, [r6], #4
  410b9a:	45b0      	cmp	r8, r6
  410b9c:	f843 1b04 	str.w	r1, [r3], #4
  410ba0:	d2f9      	bcs.n	410b96 <__hexnan+0xc6>
  410ba2:	2100      	movs	r1, #0
  410ba4:	f843 1b04 	str.w	r1, [r3], #4
  410ba8:	4598      	cmp	r8, r3
  410baa:	d2fb      	bcs.n	410ba4 <__hexnan+0xd4>
  410bac:	9b01      	ldr	r3, [sp, #4]
  410bae:	f853 3c04 	ldr.w	r3, [r3, #-4]
  410bb2:	b92b      	cbnz	r3, 410bc0 <__hexnan+0xf0>
  410bb4:	4542      	cmp	r2, r8
  410bb6:	d03a      	beq.n	410c2e <__hexnan+0x15e>
  410bb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  410bbc:	2b00      	cmp	r3, #0
  410bbe:	d0f9      	beq.n	410bb4 <__hexnan+0xe4>
  410bc0:	2005      	movs	r0, #5
  410bc2:	b005      	add	sp, #20
  410bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410bc8:	3001      	adds	r0, #1
  410bca:	f10c 0c01 	add.w	ip, ip, #1
  410bce:	2808      	cmp	r0, #8
  410bd0:	dc06      	bgt.n	410be0 <__hexnan+0x110>
  410bd2:	6833      	ldr	r3, [r6, #0]
  410bd4:	011b      	lsls	r3, r3, #4
  410bd6:	f001 010f 	and.w	r1, r1, #15
  410bda:	4319      	orrs	r1, r3
  410bdc:	6031      	str	r1, [r6, #0]
  410bde:	e796      	b.n	410b0e <__hexnan+0x3e>
  410be0:	4296      	cmp	r6, r2
  410be2:	d994      	bls.n	410b0e <__hexnan+0x3e>
  410be4:	2300      	movs	r3, #0
  410be6:	3e04      	subs	r6, #4
  410be8:	2001      	movs	r0, #1
  410bea:	6033      	str	r3, [r6, #0]
  410bec:	e7f3      	b.n	410bd6 <__hexnan+0x106>
  410bee:	2300      	movs	r3, #0
  410bf0:	f1a6 0e04 	sub.w	lr, r6, #4
  410bf4:	46e2      	mov	sl, ip
  410bf6:	f846 3c04 	str.w	r3, [r6, #-4]
  410bfa:	4618      	mov	r0, r3
  410bfc:	4676      	mov	r6, lr
  410bfe:	e786      	b.n	410b0e <__hexnan+0x3e>
  410c00:	2b29      	cmp	r3, #41	; 0x29
  410c02:	d01b      	beq.n	410c3c <__hexnan+0x16c>
  410c04:	2004      	movs	r0, #4
  410c06:	b005      	add	sp, #20
  410c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c0c:	9b03      	ldr	r3, [sp, #12]
  410c0e:	2b00      	cmp	r3, #0
  410c10:	d0cc      	beq.n	410bac <__hexnan+0xdc>
  410c12:	9b03      	ldr	r3, [sp, #12]
  410c14:	f04f 30ff 	mov.w	r0, #4294967295
  410c18:	9c01      	ldr	r4, [sp, #4]
  410c1a:	f1c3 0320 	rsb	r3, r3, #32
  410c1e:	f854 1c04 	ldr.w	r1, [r4, #-4]
  410c22:	fa20 f303 	lsr.w	r3, r0, r3
  410c26:	400b      	ands	r3, r1
  410c28:	f844 3c04 	str.w	r3, [r4, #-4]
  410c2c:	e7c1      	b.n	410bb2 <__hexnan+0xe2>
  410c2e:	2301      	movs	r3, #1
  410c30:	2005      	movs	r0, #5
  410c32:	f8c8 3000 	str.w	r3, [r8]
  410c36:	b005      	add	sp, #20
  410c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  410c3c:	3701      	adds	r7, #1
  410c3e:	9b02      	ldr	r3, [sp, #8]
  410c40:	601f      	str	r7, [r3, #0]
  410c42:	f1bc 0f00 	cmp.w	ip, #0
  410c46:	d18d      	bne.n	410b64 <__hexnan+0x94>
  410c48:	e7dc      	b.n	410c04 <__hexnan+0x134>
  410c4a:	bf00      	nop
  410c4c:	00413760 	.word	0x00413760

00410c50 <__locale_charset>:
  410c50:	4800      	ldr	r0, [pc, #0]	; (410c54 <__locale_charset+0x4>)
  410c52:	4770      	bx	lr
  410c54:	20400928 	.word	0x20400928

00410c58 <__locale_mb_cur_max>:
  410c58:	4b01      	ldr	r3, [pc, #4]	; (410c60 <__locale_mb_cur_max+0x8>)
  410c5a:	6818      	ldr	r0, [r3, #0]
  410c5c:	4770      	bx	lr
  410c5e:	bf00      	nop
  410c60:	20400948 	.word	0x20400948

00410c64 <_localeconv_r>:
  410c64:	4800      	ldr	r0, [pc, #0]	; (410c68 <_localeconv_r+0x4>)
  410c66:	4770      	bx	lr
  410c68:	204008f0 	.word	0x204008f0

00410c6c <__smakebuf_r>:
  410c6c:	898b      	ldrh	r3, [r1, #12]
  410c6e:	b29a      	uxth	r2, r3
  410c70:	f012 0f02 	tst.w	r2, #2
  410c74:	d13d      	bne.n	410cf2 <__smakebuf_r+0x86>
  410c76:	b5f0      	push	{r4, r5, r6, r7, lr}
  410c78:	460c      	mov	r4, r1
  410c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  410c7e:	b091      	sub	sp, #68	; 0x44
  410c80:	4605      	mov	r5, r0
  410c82:	2900      	cmp	r1, #0
  410c84:	db19      	blt.n	410cba <__smakebuf_r+0x4e>
  410c86:	aa01      	add	r2, sp, #4
  410c88:	f001 fa3e 	bl	412108 <_fstat_r>
  410c8c:	2800      	cmp	r0, #0
  410c8e:	db12      	blt.n	410cb6 <__smakebuf_r+0x4a>
  410c90:	9b02      	ldr	r3, [sp, #8]
  410c92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  410c96:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  410c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  410c9e:	fab7 f787 	clz	r7, r7
  410ca2:	ea4f 1757 	mov.w	r7, r7, lsr #5
  410ca6:	d02b      	beq.n	410d00 <__smakebuf_r+0x94>
  410ca8:	89a3      	ldrh	r3, [r4, #12]
  410caa:	f44f 6680 	mov.w	r6, #1024	; 0x400
  410cae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  410cb2:	81a3      	strh	r3, [r4, #12]
  410cb4:	e00c      	b.n	410cd0 <__smakebuf_r+0x64>
  410cb6:	89a3      	ldrh	r3, [r4, #12]
  410cb8:	b29a      	uxth	r2, r3
  410cba:	f012 0f80 	tst.w	r2, #128	; 0x80
  410cbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  410cc2:	f04f 0700 	mov.w	r7, #0
  410cc6:	bf0c      	ite	eq
  410cc8:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  410ccc:	2640      	movne	r6, #64	; 0x40
  410cce:	81a3      	strh	r3, [r4, #12]
  410cd0:	4628      	mov	r0, r5
  410cd2:	4631      	mov	r1, r6
  410cd4:	f7f9 ffd4 	bl	40ac80 <_malloc_r>
  410cd8:	89a3      	ldrh	r3, [r4, #12]
  410cda:	b340      	cbz	r0, 410d2e <__smakebuf_r+0xc2>
  410cdc:	4a1a      	ldr	r2, [pc, #104]	; (410d48 <__smakebuf_r+0xdc>)
  410cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  410ce2:	63ea      	str	r2, [r5, #60]	; 0x3c
  410ce4:	81a3      	strh	r3, [r4, #12]
  410ce6:	6020      	str	r0, [r4, #0]
  410ce8:	6120      	str	r0, [r4, #16]
  410cea:	6166      	str	r6, [r4, #20]
  410cec:	b99f      	cbnz	r7, 410d16 <__smakebuf_r+0xaa>
  410cee:	b011      	add	sp, #68	; 0x44
  410cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410cf2:	f101 0343 	add.w	r3, r1, #67	; 0x43
  410cf6:	2201      	movs	r2, #1
  410cf8:	600b      	str	r3, [r1, #0]
  410cfa:	610b      	str	r3, [r1, #16]
  410cfc:	614a      	str	r2, [r1, #20]
  410cfe:	4770      	bx	lr
  410d00:	4b12      	ldr	r3, [pc, #72]	; (410d4c <__smakebuf_r+0xe0>)
  410d02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  410d04:	429a      	cmp	r2, r3
  410d06:	d1cf      	bne.n	410ca8 <__smakebuf_r+0x3c>
  410d08:	89a3      	ldrh	r3, [r4, #12]
  410d0a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  410d0e:	4333      	orrs	r3, r6
  410d10:	64e6      	str	r6, [r4, #76]	; 0x4c
  410d12:	81a3      	strh	r3, [r4, #12]
  410d14:	e7dc      	b.n	410cd0 <__smakebuf_r+0x64>
  410d16:	4628      	mov	r0, r5
  410d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  410d1c:	f001 fa08 	bl	412130 <_isatty_r>
  410d20:	2800      	cmp	r0, #0
  410d22:	d0e4      	beq.n	410cee <__smakebuf_r+0x82>
  410d24:	89a3      	ldrh	r3, [r4, #12]
  410d26:	f043 0301 	orr.w	r3, r3, #1
  410d2a:	81a3      	strh	r3, [r4, #12]
  410d2c:	e7df      	b.n	410cee <__smakebuf_r+0x82>
  410d2e:	059a      	lsls	r2, r3, #22
  410d30:	d4dd      	bmi.n	410cee <__smakebuf_r+0x82>
  410d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
  410d36:	f043 0302 	orr.w	r3, r3, #2
  410d3a:	2101      	movs	r1, #1
  410d3c:	81a3      	strh	r3, [r4, #12]
  410d3e:	6022      	str	r2, [r4, #0]
  410d40:	6122      	str	r2, [r4, #16]
  410d42:	6161      	str	r1, [r4, #20]
  410d44:	e7d3      	b.n	410cee <__smakebuf_r+0x82>
  410d46:	bf00      	nop
  410d48:	0040fd3d 	.word	0x0040fd3d
  410d4c:	00411c49 	.word	0x00411c49

00410d50 <memchr>:
  410d50:	0783      	lsls	r3, r0, #30
  410d52:	b2c9      	uxtb	r1, r1
  410d54:	b470      	push	{r4, r5, r6}
  410d56:	d03f      	beq.n	410dd8 <memchr+0x88>
  410d58:	1e54      	subs	r4, r2, #1
  410d5a:	2a00      	cmp	r2, #0
  410d5c:	d03e      	beq.n	410ddc <memchr+0x8c>
  410d5e:	7803      	ldrb	r3, [r0, #0]
  410d60:	428b      	cmp	r3, r1
  410d62:	bf18      	it	ne
  410d64:	1c43      	addne	r3, r0, #1
  410d66:	d105      	bne.n	410d74 <memchr+0x24>
  410d68:	e01c      	b.n	410da4 <memchr+0x54>
  410d6a:	b1ec      	cbz	r4, 410da8 <memchr+0x58>
  410d6c:	7802      	ldrb	r2, [r0, #0]
  410d6e:	3c01      	subs	r4, #1
  410d70:	428a      	cmp	r2, r1
  410d72:	d017      	beq.n	410da4 <memchr+0x54>
  410d74:	f013 0f03 	tst.w	r3, #3
  410d78:	4618      	mov	r0, r3
  410d7a:	f103 0301 	add.w	r3, r3, #1
  410d7e:	d1f4      	bne.n	410d6a <memchr+0x1a>
  410d80:	2c03      	cmp	r4, #3
  410d82:	d814      	bhi.n	410dae <memchr+0x5e>
  410d84:	b184      	cbz	r4, 410da8 <memchr+0x58>
  410d86:	7803      	ldrb	r3, [r0, #0]
  410d88:	428b      	cmp	r3, r1
  410d8a:	d00b      	beq.n	410da4 <memchr+0x54>
  410d8c:	1905      	adds	r5, r0, r4
  410d8e:	1c43      	adds	r3, r0, #1
  410d90:	e002      	b.n	410d98 <memchr+0x48>
  410d92:	7802      	ldrb	r2, [r0, #0]
  410d94:	428a      	cmp	r2, r1
  410d96:	d005      	beq.n	410da4 <memchr+0x54>
  410d98:	42ab      	cmp	r3, r5
  410d9a:	4618      	mov	r0, r3
  410d9c:	f103 0301 	add.w	r3, r3, #1
  410da0:	d1f7      	bne.n	410d92 <memchr+0x42>
  410da2:	2000      	movs	r0, #0
  410da4:	bc70      	pop	{r4, r5, r6}
  410da6:	4770      	bx	lr
  410da8:	4620      	mov	r0, r4
  410daa:	bc70      	pop	{r4, r5, r6}
  410dac:	4770      	bx	lr
  410dae:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  410db2:	4602      	mov	r2, r0
  410db4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  410db8:	4610      	mov	r0, r2
  410dba:	3204      	adds	r2, #4
  410dbc:	6803      	ldr	r3, [r0, #0]
  410dbe:	4073      	eors	r3, r6
  410dc0:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  410dc4:	ea25 0303 	bic.w	r3, r5, r3
  410dc8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  410dcc:	d1da      	bne.n	410d84 <memchr+0x34>
  410dce:	3c04      	subs	r4, #4
  410dd0:	4610      	mov	r0, r2
  410dd2:	2c03      	cmp	r4, #3
  410dd4:	d8f0      	bhi.n	410db8 <memchr+0x68>
  410dd6:	e7d5      	b.n	410d84 <memchr+0x34>
  410dd8:	4614      	mov	r4, r2
  410dda:	e7d1      	b.n	410d80 <memchr+0x30>
  410ddc:	4610      	mov	r0, r2
  410dde:	e7e1      	b.n	410da4 <memchr+0x54>

00410de0 <memmove>:
  410de0:	4288      	cmp	r0, r1
  410de2:	b5f0      	push	{r4, r5, r6, r7, lr}
  410de4:	d90d      	bls.n	410e02 <memmove+0x22>
  410de6:	188b      	adds	r3, r1, r2
  410de8:	4298      	cmp	r0, r3
  410dea:	d20a      	bcs.n	410e02 <memmove+0x22>
  410dec:	1881      	adds	r1, r0, r2
  410dee:	2a00      	cmp	r2, #0
  410df0:	d053      	beq.n	410e9a <memmove+0xba>
  410df2:	1a9a      	subs	r2, r3, r2
  410df4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  410df8:	4293      	cmp	r3, r2
  410dfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
  410dfe:	d1f9      	bne.n	410df4 <memmove+0x14>
  410e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410e02:	2a0f      	cmp	r2, #15
  410e04:	d947      	bls.n	410e96 <memmove+0xb6>
  410e06:	ea40 0301 	orr.w	r3, r0, r1
  410e0a:	079b      	lsls	r3, r3, #30
  410e0c:	d146      	bne.n	410e9c <memmove+0xbc>
  410e0e:	f100 0410 	add.w	r4, r0, #16
  410e12:	f101 0310 	add.w	r3, r1, #16
  410e16:	4615      	mov	r5, r2
  410e18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  410e1c:	3d10      	subs	r5, #16
  410e1e:	3310      	adds	r3, #16
  410e20:	3410      	adds	r4, #16
  410e22:	f844 6c20 	str.w	r6, [r4, #-32]
  410e26:	2d0f      	cmp	r5, #15
  410e28:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  410e2c:	f844 6c1c 	str.w	r6, [r4, #-28]
  410e30:	f853 6c18 	ldr.w	r6, [r3, #-24]
  410e34:	f844 6c18 	str.w	r6, [r4, #-24]
  410e38:	f853 6c14 	ldr.w	r6, [r3, #-20]
  410e3c:	f844 6c14 	str.w	r6, [r4, #-20]
  410e40:	d8ea      	bhi.n	410e18 <memmove+0x38>
  410e42:	f1a2 0310 	sub.w	r3, r2, #16
  410e46:	f002 0e0f 	and.w	lr, r2, #15
  410e4a:	f023 030f 	bic.w	r3, r3, #15
  410e4e:	f1be 0f03 	cmp.w	lr, #3
  410e52:	f103 0310 	add.w	r3, r3, #16
  410e56:	4419      	add	r1, r3
  410e58:	4403      	add	r3, r0
  410e5a:	d921      	bls.n	410ea0 <memmove+0xc0>
  410e5c:	1f1e      	subs	r6, r3, #4
  410e5e:	460d      	mov	r5, r1
  410e60:	4674      	mov	r4, lr
  410e62:	3c04      	subs	r4, #4
  410e64:	f855 7b04 	ldr.w	r7, [r5], #4
  410e68:	2c03      	cmp	r4, #3
  410e6a:	f846 7f04 	str.w	r7, [r6, #4]!
  410e6e:	d8f8      	bhi.n	410e62 <memmove+0x82>
  410e70:	f1ae 0404 	sub.w	r4, lr, #4
  410e74:	f002 0203 	and.w	r2, r2, #3
  410e78:	f024 0403 	bic.w	r4, r4, #3
  410e7c:	3404      	adds	r4, #4
  410e7e:	4423      	add	r3, r4
  410e80:	4421      	add	r1, r4
  410e82:	b152      	cbz	r2, 410e9a <memmove+0xba>
  410e84:	3b01      	subs	r3, #1
  410e86:	440a      	add	r2, r1
  410e88:	f811 4b01 	ldrb.w	r4, [r1], #1
  410e8c:	4291      	cmp	r1, r2
  410e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  410e92:	d1f9      	bne.n	410e88 <memmove+0xa8>
  410e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410e96:	4603      	mov	r3, r0
  410e98:	e7f3      	b.n	410e82 <memmove+0xa2>
  410e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410e9c:	4603      	mov	r3, r0
  410e9e:	e7f1      	b.n	410e84 <memmove+0xa4>
  410ea0:	4672      	mov	r2, lr
  410ea2:	e7ee      	b.n	410e82 <memmove+0xa2>

00410ea4 <_Balloc>:
  410ea4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  410ea6:	b538      	push	{r3, r4, r5, lr}
  410ea8:	4605      	mov	r5, r0
  410eaa:	460c      	mov	r4, r1
  410eac:	b152      	cbz	r2, 410ec4 <_Balloc+0x20>
  410eae:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  410eb2:	b18b      	cbz	r3, 410ed8 <_Balloc+0x34>
  410eb4:	6819      	ldr	r1, [r3, #0]
  410eb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  410eba:	2200      	movs	r2, #0
  410ebc:	4618      	mov	r0, r3
  410ebe:	611a      	str	r2, [r3, #16]
  410ec0:	60da      	str	r2, [r3, #12]
  410ec2:	bd38      	pop	{r3, r4, r5, pc}
  410ec4:	2221      	movs	r2, #33	; 0x21
  410ec6:	2104      	movs	r1, #4
  410ec8:	f001 f89a 	bl	412000 <_calloc_r>
  410ecc:	64e8      	str	r0, [r5, #76]	; 0x4c
  410ece:	4602      	mov	r2, r0
  410ed0:	2800      	cmp	r0, #0
  410ed2:	d1ec      	bne.n	410eae <_Balloc+0xa>
  410ed4:	2000      	movs	r0, #0
  410ed6:	bd38      	pop	{r3, r4, r5, pc}
  410ed8:	2101      	movs	r1, #1
  410eda:	4628      	mov	r0, r5
  410edc:	fa01 f504 	lsl.w	r5, r1, r4
  410ee0:	1d6a      	adds	r2, r5, #5
  410ee2:	0092      	lsls	r2, r2, #2
  410ee4:	f001 f88c 	bl	412000 <_calloc_r>
  410ee8:	4603      	mov	r3, r0
  410eea:	2800      	cmp	r0, #0
  410eec:	d0f2      	beq.n	410ed4 <_Balloc+0x30>
  410eee:	6044      	str	r4, [r0, #4]
  410ef0:	6085      	str	r5, [r0, #8]
  410ef2:	e7e2      	b.n	410eba <_Balloc+0x16>

00410ef4 <_Bfree>:
  410ef4:	b131      	cbz	r1, 410f04 <_Bfree+0x10>
  410ef6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  410ef8:	684a      	ldr	r2, [r1, #4]
  410efa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  410efe:	6008      	str	r0, [r1, #0]
  410f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  410f04:	4770      	bx	lr
  410f06:	bf00      	nop

00410f08 <__multadd>:
  410f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  410f0a:	460c      	mov	r4, r1
  410f0c:	b083      	sub	sp, #12
  410f0e:	4605      	mov	r5, r0
  410f10:	690e      	ldr	r6, [r1, #16]
  410f12:	f101 0e14 	add.w	lr, r1, #20
  410f16:	2700      	movs	r7, #0
  410f18:	f8de 1000 	ldr.w	r1, [lr]
  410f1c:	3701      	adds	r7, #1
  410f1e:	b288      	uxth	r0, r1
  410f20:	42be      	cmp	r6, r7
  410f22:	ea4f 4111 	mov.w	r1, r1, lsr #16
  410f26:	fb02 3300 	mla	r3, r2, r0, r3
  410f2a:	fb02 f101 	mul.w	r1, r2, r1
  410f2e:	b298      	uxth	r0, r3
  410f30:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  410f34:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  410f38:	ea4f 4313 	mov.w	r3, r3, lsr #16
  410f3c:	f84e 1b04 	str.w	r1, [lr], #4
  410f40:	dcea      	bgt.n	410f18 <__multadd+0x10>
  410f42:	b13b      	cbz	r3, 410f54 <__multadd+0x4c>
  410f44:	68a2      	ldr	r2, [r4, #8]
  410f46:	4296      	cmp	r6, r2
  410f48:	da07      	bge.n	410f5a <__multadd+0x52>
  410f4a:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  410f4e:	3601      	adds	r6, #1
  410f50:	6153      	str	r3, [r2, #20]
  410f52:	6126      	str	r6, [r4, #16]
  410f54:	4620      	mov	r0, r4
  410f56:	b003      	add	sp, #12
  410f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  410f5a:	6861      	ldr	r1, [r4, #4]
  410f5c:	4628      	mov	r0, r5
  410f5e:	9301      	str	r3, [sp, #4]
  410f60:	3101      	adds	r1, #1
  410f62:	f7ff ff9f 	bl	410ea4 <_Balloc>
  410f66:	6922      	ldr	r2, [r4, #16]
  410f68:	f104 010c 	add.w	r1, r4, #12
  410f6c:	4607      	mov	r7, r0
  410f6e:	3202      	adds	r2, #2
  410f70:	300c      	adds	r0, #12
  410f72:	0092      	lsls	r2, r2, #2
  410f74:	f7fa f930 	bl	40b1d8 <memcpy>
  410f78:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  410f7a:	6861      	ldr	r1, [r4, #4]
  410f7c:	9b01      	ldr	r3, [sp, #4]
  410f7e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  410f82:	6020      	str	r0, [r4, #0]
  410f84:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  410f88:	463c      	mov	r4, r7
  410f8a:	e7de      	b.n	410f4a <__multadd+0x42>

00410f8c <__s2b>:
  410f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  410f90:	461f      	mov	r7, r3
  410f92:	4d22      	ldr	r5, [pc, #136]	; (41101c <__s2b+0x90>)
  410f94:	3308      	adds	r3, #8
  410f96:	460c      	mov	r4, r1
  410f98:	4690      	mov	r8, r2
  410f9a:	4606      	mov	r6, r0
  410f9c:	fb85 1203 	smull	r1, r2, r5, r3
  410fa0:	17db      	asrs	r3, r3, #31
  410fa2:	ebc3 0262 	rsb	r2, r3, r2, asr #1
  410fa6:	2a01      	cmp	r2, #1
  410fa8:	dd35      	ble.n	411016 <__s2b+0x8a>
  410faa:	2301      	movs	r3, #1
  410fac:	2100      	movs	r1, #0
  410fae:	005b      	lsls	r3, r3, #1
  410fb0:	3101      	adds	r1, #1
  410fb2:	429a      	cmp	r2, r3
  410fb4:	dcfb      	bgt.n	410fae <__s2b+0x22>
  410fb6:	4630      	mov	r0, r6
  410fb8:	f7ff ff74 	bl	410ea4 <_Balloc>
  410fbc:	2301      	movs	r3, #1
  410fbe:	9a08      	ldr	r2, [sp, #32]
  410fc0:	f1b8 0f09 	cmp.w	r8, #9
  410fc4:	6103      	str	r3, [r0, #16]
  410fc6:	6142      	str	r2, [r0, #20]
  410fc8:	dd21      	ble.n	41100e <__s2b+0x82>
  410fca:	f104 0909 	add.w	r9, r4, #9
  410fce:	4444      	add	r4, r8
  410fd0:	464d      	mov	r5, r9
  410fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
  410fd6:	4601      	mov	r1, r0
  410fd8:	220a      	movs	r2, #10
  410fda:	4630      	mov	r0, r6
  410fdc:	3b30      	subs	r3, #48	; 0x30
  410fde:	f7ff ff93 	bl	410f08 <__multadd>
  410fe2:	42a5      	cmp	r5, r4
  410fe4:	d1f5      	bne.n	410fd2 <__s2b+0x46>
  410fe6:	eb09 0408 	add.w	r4, r9, r8
  410fea:	3c08      	subs	r4, #8
  410fec:	4547      	cmp	r7, r8
  410fee:	dd0c      	ble.n	41100a <__s2b+0x7e>
  410ff0:	ebc8 0707 	rsb	r7, r8, r7
  410ff4:	4427      	add	r7, r4
  410ff6:	f814 3b01 	ldrb.w	r3, [r4], #1
  410ffa:	4601      	mov	r1, r0
  410ffc:	220a      	movs	r2, #10
  410ffe:	4630      	mov	r0, r6
  411000:	3b30      	subs	r3, #48	; 0x30
  411002:	f7ff ff81 	bl	410f08 <__multadd>
  411006:	42bc      	cmp	r4, r7
  411008:	d1f5      	bne.n	410ff6 <__s2b+0x6a>
  41100a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41100e:	340a      	adds	r4, #10
  411010:	f04f 0809 	mov.w	r8, #9
  411014:	e7ea      	b.n	410fec <__s2b+0x60>
  411016:	2100      	movs	r1, #0
  411018:	e7cd      	b.n	410fb6 <__s2b+0x2a>
  41101a:	bf00      	nop
  41101c:	38e38e39 	.word	0x38e38e39

00411020 <__hi0bits>:
  411020:	4b0f      	ldr	r3, [pc, #60]	; (411060 <__hi0bits+0x40>)
  411022:	4003      	ands	r3, r0
  411024:	b9b3      	cbnz	r3, 411054 <__hi0bits+0x34>
  411026:	0400      	lsls	r0, r0, #16
  411028:	2310      	movs	r3, #16
  41102a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  41102e:	d101      	bne.n	411034 <__hi0bits+0x14>
  411030:	3308      	adds	r3, #8
  411032:	0200      	lsls	r0, r0, #8
  411034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  411038:	d101      	bne.n	41103e <__hi0bits+0x1e>
  41103a:	3304      	adds	r3, #4
  41103c:	0100      	lsls	r0, r0, #4
  41103e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  411042:	d101      	bne.n	411048 <__hi0bits+0x28>
  411044:	3302      	adds	r3, #2
  411046:	0080      	lsls	r0, r0, #2
  411048:	2800      	cmp	r0, #0
  41104a:	db07      	blt.n	41105c <__hi0bits+0x3c>
  41104c:	0042      	lsls	r2, r0, #1
  41104e:	d403      	bmi.n	411058 <__hi0bits+0x38>
  411050:	2020      	movs	r0, #32
  411052:	4770      	bx	lr
  411054:	2300      	movs	r3, #0
  411056:	e7e8      	b.n	41102a <__hi0bits+0xa>
  411058:	1c58      	adds	r0, r3, #1
  41105a:	4770      	bx	lr
  41105c:	4618      	mov	r0, r3
  41105e:	4770      	bx	lr
  411060:	ffff0000 	.word	0xffff0000

00411064 <__lo0bits>:
  411064:	6803      	ldr	r3, [r0, #0]
  411066:	f013 0207 	ands.w	r2, r3, #7
  41106a:	d008      	beq.n	41107e <__lo0bits+0x1a>
  41106c:	07d9      	lsls	r1, r3, #31
  41106e:	d422      	bmi.n	4110b6 <__lo0bits+0x52>
  411070:	079a      	lsls	r2, r3, #30
  411072:	d423      	bmi.n	4110bc <__lo0bits+0x58>
  411074:	089b      	lsrs	r3, r3, #2
  411076:	2202      	movs	r2, #2
  411078:	6003      	str	r3, [r0, #0]
  41107a:	4610      	mov	r0, r2
  41107c:	4770      	bx	lr
  41107e:	b299      	uxth	r1, r3
  411080:	b909      	cbnz	r1, 411086 <__lo0bits+0x22>
  411082:	0c1b      	lsrs	r3, r3, #16
  411084:	2210      	movs	r2, #16
  411086:	f013 0fff 	tst.w	r3, #255	; 0xff
  41108a:	d101      	bne.n	411090 <__lo0bits+0x2c>
  41108c:	3208      	adds	r2, #8
  41108e:	0a1b      	lsrs	r3, r3, #8
  411090:	0719      	lsls	r1, r3, #28
  411092:	d101      	bne.n	411098 <__lo0bits+0x34>
  411094:	3204      	adds	r2, #4
  411096:	091b      	lsrs	r3, r3, #4
  411098:	0799      	lsls	r1, r3, #30
  41109a:	d101      	bne.n	4110a0 <__lo0bits+0x3c>
  41109c:	3202      	adds	r2, #2
  41109e:	089b      	lsrs	r3, r3, #2
  4110a0:	07d9      	lsls	r1, r3, #31
  4110a2:	d405      	bmi.n	4110b0 <__lo0bits+0x4c>
  4110a4:	085b      	lsrs	r3, r3, #1
  4110a6:	d102      	bne.n	4110ae <__lo0bits+0x4a>
  4110a8:	2220      	movs	r2, #32
  4110aa:	4610      	mov	r0, r2
  4110ac:	4770      	bx	lr
  4110ae:	3201      	adds	r2, #1
  4110b0:	6003      	str	r3, [r0, #0]
  4110b2:	4610      	mov	r0, r2
  4110b4:	4770      	bx	lr
  4110b6:	2200      	movs	r2, #0
  4110b8:	4610      	mov	r0, r2
  4110ba:	4770      	bx	lr
  4110bc:	085b      	lsrs	r3, r3, #1
  4110be:	2201      	movs	r2, #1
  4110c0:	6003      	str	r3, [r0, #0]
  4110c2:	4610      	mov	r0, r2
  4110c4:	4770      	bx	lr
  4110c6:	bf00      	nop

004110c8 <__i2b>:
  4110c8:	b510      	push	{r4, lr}
  4110ca:	460c      	mov	r4, r1
  4110cc:	2101      	movs	r1, #1
  4110ce:	f7ff fee9 	bl	410ea4 <_Balloc>
  4110d2:	2201      	movs	r2, #1
  4110d4:	6144      	str	r4, [r0, #20]
  4110d6:	6102      	str	r2, [r0, #16]
  4110d8:	bd10      	pop	{r4, pc}
  4110da:	bf00      	nop

004110dc <__multiply>:
  4110dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4110e0:	690e      	ldr	r6, [r1, #16]
  4110e2:	b085      	sub	sp, #20
  4110e4:	6915      	ldr	r5, [r2, #16]
  4110e6:	460c      	mov	r4, r1
  4110e8:	4691      	mov	r9, r2
  4110ea:	42ae      	cmp	r6, r5
  4110ec:	f2c0 8094 	blt.w	411218 <__multiply+0x13c>
  4110f0:	462b      	mov	r3, r5
  4110f2:	4635      	mov	r5, r6
  4110f4:	461e      	mov	r6, r3
  4110f6:	eb05 0806 	add.w	r8, r5, r6
  4110fa:	68a3      	ldr	r3, [r4, #8]
  4110fc:	6861      	ldr	r1, [r4, #4]
  4110fe:	4598      	cmp	r8, r3
  411100:	dd00      	ble.n	411104 <__multiply+0x28>
  411102:	3101      	adds	r1, #1
  411104:	f7ff fece 	bl	410ea4 <_Balloc>
  411108:	f100 0a14 	add.w	sl, r0, #20
  41110c:	9001      	str	r0, [sp, #4]
  41110e:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  411112:	45da      	cmp	sl, fp
  411114:	d205      	bcs.n	411122 <__multiply+0x46>
  411116:	4653      	mov	r3, sl
  411118:	2100      	movs	r1, #0
  41111a:	f843 1b04 	str.w	r1, [r3], #4
  41111e:	459b      	cmp	fp, r3
  411120:	d8fb      	bhi.n	41111a <__multiply+0x3e>
  411122:	f109 0914 	add.w	r9, r9, #20
  411126:	f104 0314 	add.w	r3, r4, #20
  41112a:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  41112e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  411132:	4591      	cmp	r9, r2
  411134:	d25b      	bcs.n	4111ee <__multiply+0x112>
  411136:	f8cd b008 	str.w	fp, [sp, #8]
  41113a:	4693      	mov	fp, r2
  41113c:	f8cd 800c 	str.w	r8, [sp, #12]
  411140:	4698      	mov	r8, r3
  411142:	f859 6b04 	ldr.w	r6, [r9], #4
  411146:	fa1f fe86 	uxth.w	lr, r6
  41114a:	f1be 0f00 	cmp.w	lr, #0
  41114e:	d021      	beq.n	411194 <__multiply+0xb8>
  411150:	4647      	mov	r7, r8
  411152:	4656      	mov	r6, sl
  411154:	2100      	movs	r1, #0
  411156:	e000      	b.n	41115a <__multiply+0x7e>
  411158:	4626      	mov	r6, r4
  41115a:	f857 2b04 	ldr.w	r2, [r7], #4
  41115e:	4634      	mov	r4, r6
  411160:	6835      	ldr	r5, [r6, #0]
  411162:	b290      	uxth	r0, r2
  411164:	45bc      	cmp	ip, r7
  411166:	b2ab      	uxth	r3, r5
  411168:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41116c:	fb0e 3000 	mla	r0, lr, r0, r3
  411170:	ea4f 4315 	mov.w	r3, r5, lsr #16
  411174:	4401      	add	r1, r0
  411176:	fb0e 3302 	mla	r3, lr, r2, r3
  41117a:	b28a      	uxth	r2, r1
  41117c:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  411180:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  411184:	ea4f 4111 	mov.w	r1, r1, lsr #16
  411188:	f844 3b04 	str.w	r3, [r4], #4
  41118c:	d8e4      	bhi.n	411158 <__multiply+0x7c>
  41118e:	6071      	str	r1, [r6, #4]
  411190:	f859 6c04 	ldr.w	r6, [r9, #-4]
  411194:	0c36      	lsrs	r6, r6, #16
  411196:	d022      	beq.n	4111de <__multiply+0x102>
  411198:	f8da 3000 	ldr.w	r3, [sl]
  41119c:	2700      	movs	r7, #0
  41119e:	4655      	mov	r5, sl
  4111a0:	4640      	mov	r0, r8
  4111a2:	461a      	mov	r2, r3
  4111a4:	46be      	mov	lr, r7
  4111a6:	e000      	b.n	4111aa <__multiply+0xce>
  4111a8:	4625      	mov	r5, r4
  4111aa:	8807      	ldrh	r7, [r0, #0]
  4111ac:	0c12      	lsrs	r2, r2, #16
  4111ae:	b299      	uxth	r1, r3
  4111b0:	462c      	mov	r4, r5
  4111b2:	fb06 2207 	mla	r2, r6, r7, r2
  4111b6:	eb02 070e 	add.w	r7, r2, lr
  4111ba:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4111be:	f844 3b04 	str.w	r3, [r4], #4
  4111c2:	f850 1b04 	ldr.w	r1, [r0], #4
  4111c6:	686a      	ldr	r2, [r5, #4]
  4111c8:	0c09      	lsrs	r1, r1, #16
  4111ca:	4584      	cmp	ip, r0
  4111cc:	b293      	uxth	r3, r2
  4111ce:	fb06 3101 	mla	r1, r6, r1, r3
  4111d2:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  4111d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4111da:	d8e5      	bhi.n	4111a8 <__multiply+0xcc>
  4111dc:	606b      	str	r3, [r5, #4]
  4111de:	45cb      	cmp	fp, r9
  4111e0:	f10a 0a04 	add.w	sl, sl, #4
  4111e4:	d8ad      	bhi.n	411142 <__multiply+0x66>
  4111e6:	f8dd b008 	ldr.w	fp, [sp, #8]
  4111ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4111ee:	f1b8 0f00 	cmp.w	r8, #0
  4111f2:	dd0b      	ble.n	41120c <__multiply+0x130>
  4111f4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  4111f8:	f1ab 0b04 	sub.w	fp, fp, #4
  4111fc:	b11b      	cbz	r3, 411206 <__multiply+0x12a>
  4111fe:	e005      	b.n	41120c <__multiply+0x130>
  411200:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  411204:	b913      	cbnz	r3, 41120c <__multiply+0x130>
  411206:	f1b8 0801 	subs.w	r8, r8, #1
  41120a:	d1f9      	bne.n	411200 <__multiply+0x124>
  41120c:	9801      	ldr	r0, [sp, #4]
  41120e:	f8c0 8010 	str.w	r8, [r0, #16]
  411212:	b005      	add	sp, #20
  411214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411218:	4614      	mov	r4, r2
  41121a:	4689      	mov	r9, r1
  41121c:	e76b      	b.n	4110f6 <__multiply+0x1a>
  41121e:	bf00      	nop

00411220 <__pow5mult>:
  411220:	f012 0303 	ands.w	r3, r2, #3
  411224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411228:	4614      	mov	r4, r2
  41122a:	4607      	mov	r7, r0
  41122c:	460e      	mov	r6, r1
  41122e:	d12d      	bne.n	41128c <__pow5mult+0x6c>
  411230:	10a4      	asrs	r4, r4, #2
  411232:	d01c      	beq.n	41126e <__pow5mult+0x4e>
  411234:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  411236:	b395      	cbz	r5, 41129e <__pow5mult+0x7e>
  411238:	07e3      	lsls	r3, r4, #31
  41123a:	f04f 0800 	mov.w	r8, #0
  41123e:	d406      	bmi.n	41124e <__pow5mult+0x2e>
  411240:	1064      	asrs	r4, r4, #1
  411242:	d014      	beq.n	41126e <__pow5mult+0x4e>
  411244:	6828      	ldr	r0, [r5, #0]
  411246:	b1a8      	cbz	r0, 411274 <__pow5mult+0x54>
  411248:	4605      	mov	r5, r0
  41124a:	07e3      	lsls	r3, r4, #31
  41124c:	d5f8      	bpl.n	411240 <__pow5mult+0x20>
  41124e:	4638      	mov	r0, r7
  411250:	4631      	mov	r1, r6
  411252:	462a      	mov	r2, r5
  411254:	f7ff ff42 	bl	4110dc <__multiply>
  411258:	b1b6      	cbz	r6, 411288 <__pow5mult+0x68>
  41125a:	6872      	ldr	r2, [r6, #4]
  41125c:	1064      	asrs	r4, r4, #1
  41125e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  411260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  411264:	6031      	str	r1, [r6, #0]
  411266:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  41126a:	4606      	mov	r6, r0
  41126c:	d1ea      	bne.n	411244 <__pow5mult+0x24>
  41126e:	4630      	mov	r0, r6
  411270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411274:	4629      	mov	r1, r5
  411276:	462a      	mov	r2, r5
  411278:	4638      	mov	r0, r7
  41127a:	f7ff ff2f 	bl	4110dc <__multiply>
  41127e:	6028      	str	r0, [r5, #0]
  411280:	f8c0 8000 	str.w	r8, [r0]
  411284:	4605      	mov	r5, r0
  411286:	e7e0      	b.n	41124a <__pow5mult+0x2a>
  411288:	4606      	mov	r6, r0
  41128a:	e7d9      	b.n	411240 <__pow5mult+0x20>
  41128c:	1e5a      	subs	r2, r3, #1
  41128e:	4d0b      	ldr	r5, [pc, #44]	; (4112bc <__pow5mult+0x9c>)
  411290:	2300      	movs	r3, #0
  411292:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  411296:	f7ff fe37 	bl	410f08 <__multadd>
  41129a:	4606      	mov	r6, r0
  41129c:	e7c8      	b.n	411230 <__pow5mult+0x10>
  41129e:	2101      	movs	r1, #1
  4112a0:	4638      	mov	r0, r7
  4112a2:	f7ff fdff 	bl	410ea4 <_Balloc>
  4112a6:	f240 2171 	movw	r1, #625	; 0x271
  4112aa:	2201      	movs	r2, #1
  4112ac:	2300      	movs	r3, #0
  4112ae:	6141      	str	r1, [r0, #20]
  4112b0:	4605      	mov	r5, r0
  4112b2:	6102      	str	r2, [r0, #16]
  4112b4:	64b8      	str	r0, [r7, #72]	; 0x48
  4112b6:	6003      	str	r3, [r0, #0]
  4112b8:	e7be      	b.n	411238 <__pow5mult+0x18>
  4112ba:	bf00      	nop
  4112bc:	00413938 	.word	0x00413938

004112c0 <__lshift>:
  4112c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4112c4:	690e      	ldr	r6, [r1, #16]
  4112c6:	ea4f 1962 	mov.w	r9, r2, asr #5
  4112ca:	688b      	ldr	r3, [r1, #8]
  4112cc:	460d      	mov	r5, r1
  4112ce:	444e      	add	r6, r9
  4112d0:	4690      	mov	r8, r2
  4112d2:	4607      	mov	r7, r0
  4112d4:	6849      	ldr	r1, [r1, #4]
  4112d6:	1c74      	adds	r4, r6, #1
  4112d8:	429c      	cmp	r4, r3
  4112da:	dd03      	ble.n	4112e4 <__lshift+0x24>
  4112dc:	005b      	lsls	r3, r3, #1
  4112de:	3101      	adds	r1, #1
  4112e0:	429c      	cmp	r4, r3
  4112e2:	dcfb      	bgt.n	4112dc <__lshift+0x1c>
  4112e4:	4638      	mov	r0, r7
  4112e6:	f7ff fddd 	bl	410ea4 <_Balloc>
  4112ea:	f1b9 0f00 	cmp.w	r9, #0
  4112ee:	4684      	mov	ip, r0
  4112f0:	f100 0114 	add.w	r1, r0, #20
  4112f4:	dd09      	ble.n	41130a <__lshift+0x4a>
  4112f6:	2300      	movs	r3, #0
  4112f8:	460a      	mov	r2, r1
  4112fa:	4618      	mov	r0, r3
  4112fc:	3301      	adds	r3, #1
  4112fe:	f842 0b04 	str.w	r0, [r2], #4
  411302:	454b      	cmp	r3, r9
  411304:	d1fa      	bne.n	4112fc <__lshift+0x3c>
  411306:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  41130a:	692a      	ldr	r2, [r5, #16]
  41130c:	f105 0314 	add.w	r3, r5, #20
  411310:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  411314:	f018 021f 	ands.w	r2, r8, #31
  411318:	d023      	beq.n	411362 <__lshift+0xa2>
  41131a:	f1c2 0920 	rsb	r9, r2, #32
  41131e:	f04f 0a00 	mov.w	sl, #0
  411322:	6818      	ldr	r0, [r3, #0]
  411324:	4688      	mov	r8, r1
  411326:	4090      	lsls	r0, r2
  411328:	ea4a 0000 	orr.w	r0, sl, r0
  41132c:	f841 0b04 	str.w	r0, [r1], #4
  411330:	f853 0b04 	ldr.w	r0, [r3], #4
  411334:	459e      	cmp	lr, r3
  411336:	fa20 fa09 	lsr.w	sl, r0, r9
  41133a:	d8f2      	bhi.n	411322 <__lshift+0x62>
  41133c:	f8c8 a004 	str.w	sl, [r8, #4]
  411340:	f1ba 0f00 	cmp.w	sl, #0
  411344:	d000      	beq.n	411348 <__lshift+0x88>
  411346:	1cb4      	adds	r4, r6, #2
  411348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  41134a:	3c01      	subs	r4, #1
  41134c:	686a      	ldr	r2, [r5, #4]
  41134e:	4660      	mov	r0, ip
  411350:	f8cc 4010 	str.w	r4, [ip, #16]
  411354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  411358:	6029      	str	r1, [r5, #0]
  41135a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  41135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411362:	3904      	subs	r1, #4
  411364:	f853 2b04 	ldr.w	r2, [r3], #4
  411368:	459e      	cmp	lr, r3
  41136a:	f841 2f04 	str.w	r2, [r1, #4]!
  41136e:	d8f9      	bhi.n	411364 <__lshift+0xa4>
  411370:	e7ea      	b.n	411348 <__lshift+0x88>
  411372:	bf00      	nop

00411374 <__mcmp>:
  411374:	6902      	ldr	r2, [r0, #16]
  411376:	690b      	ldr	r3, [r1, #16]
  411378:	1ad2      	subs	r2, r2, r3
  41137a:	d113      	bne.n	4113a4 <__mcmp+0x30>
  41137c:	009a      	lsls	r2, r3, #2
  41137e:	3014      	adds	r0, #20
  411380:	3114      	adds	r1, #20
  411382:	1883      	adds	r3, r0, r2
  411384:	4411      	add	r1, r2
  411386:	b410      	push	{r4}
  411388:	e001      	b.n	41138e <__mcmp+0x1a>
  41138a:	4298      	cmp	r0, r3
  41138c:	d20c      	bcs.n	4113a8 <__mcmp+0x34>
  41138e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  411392:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  411396:	4294      	cmp	r4, r2
  411398:	d0f7      	beq.n	41138a <__mcmp+0x16>
  41139a:	d309      	bcc.n	4113b0 <__mcmp+0x3c>
  41139c:	2001      	movs	r0, #1
  41139e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4113a2:	4770      	bx	lr
  4113a4:	4610      	mov	r0, r2
  4113a6:	4770      	bx	lr
  4113a8:	2000      	movs	r0, #0
  4113aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4113ae:	4770      	bx	lr
  4113b0:	f04f 30ff 	mov.w	r0, #4294967295
  4113b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4113b8:	4770      	bx	lr
  4113ba:	bf00      	nop

004113bc <__mdiff>:
  4113bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4113c0:	460c      	mov	r4, r1
  4113c2:	4605      	mov	r5, r0
  4113c4:	4611      	mov	r1, r2
  4113c6:	4617      	mov	r7, r2
  4113c8:	4620      	mov	r0, r4
  4113ca:	f7ff ffd3 	bl	411374 <__mcmp>
  4113ce:	1e06      	subs	r6, r0, #0
  4113d0:	d05c      	beq.n	41148c <__mdiff+0xd0>
  4113d2:	db55      	blt.n	411480 <__mdiff+0xc4>
  4113d4:	f04f 0800 	mov.w	r8, #0
  4113d8:	6861      	ldr	r1, [r4, #4]
  4113da:	4628      	mov	r0, r5
  4113dc:	f7ff fd62 	bl	410ea4 <_Balloc>
  4113e0:	f107 0514 	add.w	r5, r7, #20
  4113e4:	693b      	ldr	r3, [r7, #16]
  4113e6:	f104 0114 	add.w	r1, r4, #20
  4113ea:	6926      	ldr	r6, [r4, #16]
  4113ec:	4684      	mov	ip, r0
  4113ee:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  4113f2:	f100 0414 	add.w	r4, r0, #20
  4113f6:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  4113fa:	2300      	movs	r3, #0
  4113fc:	f8c0 800c 	str.w	r8, [r0, #12]
  411400:	f851 9b04 	ldr.w	r9, [r1], #4
  411404:	f855 2b04 	ldr.w	r2, [r5], #4
  411408:	fa13 f889 	uxtah	r8, r3, r9
  41140c:	4608      	mov	r0, r1
  41140e:	b293      	uxth	r3, r2
  411410:	45ae      	cmp	lr, r5
  411412:	ea4f 4212 	mov.w	r2, r2, lsr #16
  411416:	ebc3 0308 	rsb	r3, r3, r8
  41141a:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  41141e:	fa1f f883 	uxth.w	r8, r3
  411422:	eb02 4323 	add.w	r3, r2, r3, asr #16
  411426:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  41142a:	ea4f 4323 	mov.w	r3, r3, asr #16
  41142e:	f844 2b04 	str.w	r2, [r4], #4
  411432:	d8e5      	bhi.n	411400 <__mdiff+0x44>
  411434:	428f      	cmp	r7, r1
  411436:	4625      	mov	r5, r4
  411438:	d916      	bls.n	411468 <__mdiff+0xac>
  41143a:	f850 2b04 	ldr.w	r2, [r0], #4
  41143e:	fa13 f382 	uxtah	r3, r3, r2
  411442:	0c12      	lsrs	r2, r2, #16
  411444:	4287      	cmp	r7, r0
  411446:	fa1f fe83 	uxth.w	lr, r3
  41144a:	eb02 4323 	add.w	r3, r2, r3, asr #16
  41144e:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  411452:	ea4f 4323 	mov.w	r3, r3, asr #16
  411456:	f844 2b04 	str.w	r2, [r4], #4
  41145a:	d8ee      	bhi.n	41143a <__mdiff+0x7e>
  41145c:	43c9      	mvns	r1, r1
  41145e:	4439      	add	r1, r7
  411460:	f021 0403 	bic.w	r4, r1, #3
  411464:	3404      	adds	r4, #4
  411466:	442c      	add	r4, r5
  411468:	3c04      	subs	r4, #4
  41146a:	b922      	cbnz	r2, 411476 <__mdiff+0xba>
  41146c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  411470:	3e01      	subs	r6, #1
  411472:	2b00      	cmp	r3, #0
  411474:	d0fa      	beq.n	41146c <__mdiff+0xb0>
  411476:	4660      	mov	r0, ip
  411478:	f8cc 6010 	str.w	r6, [ip, #16]
  41147c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  411480:	4623      	mov	r3, r4
  411482:	f04f 0801 	mov.w	r8, #1
  411486:	463c      	mov	r4, r7
  411488:	461f      	mov	r7, r3
  41148a:	e7a5      	b.n	4113d8 <__mdiff+0x1c>
  41148c:	4628      	mov	r0, r5
  41148e:	4631      	mov	r1, r6
  411490:	f7ff fd08 	bl	410ea4 <_Balloc>
  411494:	2201      	movs	r2, #1
  411496:	4603      	mov	r3, r0
  411498:	6146      	str	r6, [r0, #20]
  41149a:	611a      	str	r2, [r3, #16]
  41149c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004114a0 <__ulp>:
  4114a0:	4b10      	ldr	r3, [pc, #64]	; (4114e4 <__ulp+0x44>)
  4114a2:	400b      	ands	r3, r1
  4114a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4114a8:	2b00      	cmp	r3, #0
  4114aa:	dd02      	ble.n	4114b2 <__ulp+0x12>
  4114ac:	2000      	movs	r0, #0
  4114ae:	4619      	mov	r1, r3
  4114b0:	4770      	bx	lr
  4114b2:	425b      	negs	r3, r3
  4114b4:	151b      	asrs	r3, r3, #20
  4114b6:	2b13      	cmp	r3, #19
  4114b8:	dd0d      	ble.n	4114d6 <__ulp+0x36>
  4114ba:	2b32      	cmp	r3, #50	; 0x32
  4114bc:	f04f 0100 	mov.w	r1, #0
  4114c0:	dd02      	ble.n	4114c8 <__ulp+0x28>
  4114c2:	2301      	movs	r3, #1
  4114c4:	4618      	mov	r0, r3
  4114c6:	4770      	bx	lr
  4114c8:	2201      	movs	r2, #1
  4114ca:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
  4114ce:	fa02 f303 	lsl.w	r3, r2, r3
  4114d2:	4618      	mov	r0, r3
  4114d4:	4770      	bx	lr
  4114d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4114da:	2000      	movs	r0, #0
  4114dc:	fa42 f103 	asr.w	r1, r2, r3
  4114e0:	4770      	bx	lr
  4114e2:	bf00      	nop
  4114e4:	7ff00000 	.word	0x7ff00000

004114e8 <__b2d>:
  4114e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4114ec:	6904      	ldr	r4, [r0, #16]
  4114ee:	f100 0814 	add.w	r8, r0, #20
  4114f2:	460e      	mov	r6, r1
  4114f4:	eb08 0484 	add.w	r4, r8, r4, lsl #2
  4114f8:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4114fc:	1f25      	subs	r5, r4, #4
  4114fe:	4638      	mov	r0, r7
  411500:	f7ff fd8e 	bl	411020 <__hi0bits>
  411504:	f1c0 0320 	rsb	r3, r0, #32
  411508:	280a      	cmp	r0, #10
  41150a:	6033      	str	r3, [r6, #0]
  41150c:	dc14      	bgt.n	411538 <__b2d+0x50>
  41150e:	f1c0 060b 	rsb	r6, r0, #11
  411512:	45a8      	cmp	r8, r5
  411514:	fa27 f106 	lsr.w	r1, r7, r6
  411518:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  41151c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411520:	d242      	bcs.n	4115a8 <__b2d+0xc0>
  411522:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411526:	40f1      	lsrs	r1, r6
  411528:	3015      	adds	r0, #21
  41152a:	4087      	lsls	r7, r0
  41152c:	ea41 0207 	orr.w	r2, r1, r7
  411530:	4619      	mov	r1, r3
  411532:	4610      	mov	r0, r2
  411534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411538:	45a8      	cmp	r8, r5
  41153a:	d21f      	bcs.n	41157c <__b2d+0x94>
  41153c:	f1b0 0e0b 	subs.w	lr, r0, #11
  411540:	f1a4 0c08 	sub.w	ip, r4, #8
  411544:	f854 1c08 	ldr.w	r1, [r4, #-8]
  411548:	d025      	beq.n	411596 <__b2d+0xae>
  41154a:	f1c0 062b 	rsb	r6, r0, #43	; 0x2b
  41154e:	fa07 f70e 	lsl.w	r7, r7, lr
  411552:	45e0      	cmp	r8, ip
  411554:	fa21 f506 	lsr.w	r5, r1, r6
  411558:	ea47 0705 	orr.w	r7, r7, r5
  41155c:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  411560:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411564:	d222      	bcs.n	4115ac <__b2d+0xc4>
  411566:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  41156a:	40f0      	lsrs	r0, r6
  41156c:	fa01 f10e 	lsl.w	r1, r1, lr
  411570:	ea41 0200 	orr.w	r2, r1, r0
  411574:	4619      	mov	r1, r3
  411576:	4610      	mov	r0, r2
  411578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41157c:	f1b0 0e0b 	subs.w	lr, r0, #11
  411580:	d008      	beq.n	411594 <__b2d+0xac>
  411582:	fa07 f70e 	lsl.w	r7, r7, lr
  411586:	2000      	movs	r0, #0
  411588:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  41158c:	4601      	mov	r1, r0
  41158e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  411592:	e7eb      	b.n	41156c <__b2d+0x84>
  411594:	4671      	mov	r1, lr
  411596:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
  41159a:	460a      	mov	r2, r1
  41159c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4115a0:	4610      	mov	r0, r2
  4115a2:	4619      	mov	r1, r3
  4115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4115a8:	2100      	movs	r1, #0
  4115aa:	e7bd      	b.n	411528 <__b2d+0x40>
  4115ac:	2000      	movs	r0, #0
  4115ae:	e7dd      	b.n	41156c <__b2d+0x84>

004115b0 <__d2b>:
  4115b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4115b4:	461c      	mov	r4, r3
  4115b6:	b082      	sub	sp, #8
  4115b8:	2101      	movs	r1, #1
  4115ba:	4616      	mov	r6, r2
  4115bc:	f3c4 550a 	ubfx	r5, r4, #20, #11
  4115c0:	f7ff fc70 	bl	410ea4 <_Balloc>
  4115c4:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4115c8:	4607      	mov	r7, r0
  4115ca:	b10d      	cbz	r5, 4115d0 <__d2b+0x20>
  4115cc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4115d0:	9401      	str	r4, [sp, #4]
  4115d2:	b30e      	cbz	r6, 411618 <__d2b+0x68>
  4115d4:	a802      	add	r0, sp, #8
  4115d6:	f840 6d08 	str.w	r6, [r0, #-8]!
  4115da:	f7ff fd43 	bl	411064 <__lo0bits>
  4115de:	2800      	cmp	r0, #0
  4115e0:	d132      	bne.n	411648 <__d2b+0x98>
  4115e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4115e6:	617a      	str	r2, [r7, #20]
  4115e8:	2b00      	cmp	r3, #0
  4115ea:	61bb      	str	r3, [r7, #24]
  4115ec:	bf14      	ite	ne
  4115ee:	2402      	movne	r4, #2
  4115f0:	2401      	moveq	r4, #1
  4115f2:	613c      	str	r4, [r7, #16]
  4115f4:	b9dd      	cbnz	r5, 41162e <__d2b+0x7e>
  4115f6:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  4115fa:	9a08      	ldr	r2, [sp, #32]
  4115fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  411600:	6010      	str	r0, [r2, #0]
  411602:	6918      	ldr	r0, [r3, #16]
  411604:	f7ff fd0c 	bl	411020 <__hi0bits>
  411608:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41160a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  41160e:	6018      	str	r0, [r3, #0]
  411610:	4638      	mov	r0, r7
  411612:	b002      	add	sp, #8
  411614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411618:	a801      	add	r0, sp, #4
  41161a:	f7ff fd23 	bl	411064 <__lo0bits>
  41161e:	2301      	movs	r3, #1
  411620:	9a01      	ldr	r2, [sp, #4]
  411622:	3020      	adds	r0, #32
  411624:	461c      	mov	r4, r3
  411626:	613b      	str	r3, [r7, #16]
  411628:	617a      	str	r2, [r7, #20]
  41162a:	2d00      	cmp	r5, #0
  41162c:	d0e3      	beq.n	4115f6 <__d2b+0x46>
  41162e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  411632:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  411636:	9a08      	ldr	r2, [sp, #32]
  411638:	4440      	add	r0, r8
  41163a:	6010      	str	r0, [r2, #0]
  41163c:	4638      	mov	r0, r7
  41163e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411640:	6013      	str	r3, [r2, #0]
  411642:	b002      	add	sp, #8
  411644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411648:	9b01      	ldr	r3, [sp, #4]
  41164a:	f1c0 0120 	rsb	r1, r0, #32
  41164e:	9a00      	ldr	r2, [sp, #0]
  411650:	fa03 f101 	lsl.w	r1, r3, r1
  411654:	40c3      	lsrs	r3, r0
  411656:	430a      	orrs	r2, r1
  411658:	9301      	str	r3, [sp, #4]
  41165a:	617a      	str	r2, [r7, #20]
  41165c:	e7c4      	b.n	4115e8 <__d2b+0x38>
  41165e:	bf00      	nop

00411660 <__ratio>:
  411660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411664:	b083      	sub	sp, #12
  411666:	4688      	mov	r8, r1
  411668:	4681      	mov	r9, r0
  41166a:	4669      	mov	r1, sp
  41166c:	f7ff ff3c 	bl	4114e8 <__b2d>
  411670:	4604      	mov	r4, r0
  411672:	460d      	mov	r5, r1
  411674:	4640      	mov	r0, r8
  411676:	a901      	add	r1, sp, #4
  411678:	f7ff ff36 	bl	4114e8 <__b2d>
  41167c:	f8d9 2010 	ldr.w	r2, [r9, #16]
  411680:	f8d8 3010 	ldr.w	r3, [r8, #16]
  411684:	4606      	mov	r6, r0
  411686:	460f      	mov	r7, r1
  411688:	ebc3 0e02 	rsb	lr, r3, r2
  41168c:	9b00      	ldr	r3, [sp, #0]
  41168e:	9a01      	ldr	r2, [sp, #4]
  411690:	1a9b      	subs	r3, r3, r2
  411692:	eb03 134e 	add.w	r3, r3, lr, lsl #5
  411696:	2b00      	cmp	r3, #0
  411698:	dd0b      	ble.n	4116b2 <__ratio+0x52>
  41169a:	eb05 5103 	add.w	r1, r5, r3, lsl #20
  41169e:	460d      	mov	r5, r1
  4116a0:	4632      	mov	r2, r6
  4116a2:	463b      	mov	r3, r7
  4116a4:	4620      	mov	r0, r4
  4116a6:	4629      	mov	r1, r5
  4116a8:	f7f9 f858 	bl	40a75c <__aeabi_ddiv>
  4116ac:	b003      	add	sp, #12
  4116ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4116b2:	eba1 5903 	sub.w	r9, r1, r3, lsl #20
  4116b6:	4606      	mov	r6, r0
  4116b8:	464f      	mov	r7, r9
  4116ba:	e7f1      	b.n	4116a0 <__ratio+0x40>

004116bc <__copybits>:
  4116bc:	b470      	push	{r4, r5, r6}
  4116be:	f102 0314 	add.w	r3, r2, #20
  4116c2:	3901      	subs	r1, #1
  4116c4:	6914      	ldr	r4, [r2, #16]
  4116c6:	114e      	asrs	r6, r1, #5
  4116c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  4116cc:	3601      	adds	r6, #1
  4116ce:	42a3      	cmp	r3, r4
  4116d0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  4116d4:	d20c      	bcs.n	4116f0 <__copybits+0x34>
  4116d6:	1f01      	subs	r1, r0, #4
  4116d8:	f853 5b04 	ldr.w	r5, [r3], #4
  4116dc:	429c      	cmp	r4, r3
  4116de:	f841 5f04 	str.w	r5, [r1, #4]!
  4116e2:	d8f9      	bhi.n	4116d8 <__copybits+0x1c>
  4116e4:	1aa3      	subs	r3, r4, r2
  4116e6:	3b15      	subs	r3, #21
  4116e8:	f023 0303 	bic.w	r3, r3, #3
  4116ec:	3304      	adds	r3, #4
  4116ee:	4418      	add	r0, r3
  4116f0:	4286      	cmp	r6, r0
  4116f2:	d904      	bls.n	4116fe <__copybits+0x42>
  4116f4:	2300      	movs	r3, #0
  4116f6:	f840 3b04 	str.w	r3, [r0], #4
  4116fa:	4286      	cmp	r6, r0
  4116fc:	d8fb      	bhi.n	4116f6 <__copybits+0x3a>
  4116fe:	bc70      	pop	{r4, r5, r6}
  411700:	4770      	bx	lr
  411702:	bf00      	nop

00411704 <__any_on>:
  411704:	6903      	ldr	r3, [r0, #16]
  411706:	114a      	asrs	r2, r1, #5
  411708:	4293      	cmp	r3, r2
  41170a:	b410      	push	{r4}
  41170c:	f100 0414 	add.w	r4, r0, #20
  411710:	da10      	bge.n	411734 <__any_on+0x30>
  411712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  411716:	429c      	cmp	r4, r3
  411718:	d220      	bcs.n	41175c <__any_on+0x58>
  41171a:	f853 0c04 	ldr.w	r0, [r3, #-4]
  41171e:	3b04      	subs	r3, #4
  411720:	b118      	cbz	r0, 41172a <__any_on+0x26>
  411722:	e014      	b.n	41174e <__any_on+0x4a>
  411724:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  411728:	b98a      	cbnz	r2, 41174e <__any_on+0x4a>
  41172a:	429c      	cmp	r4, r3
  41172c:	d3fa      	bcc.n	411724 <__any_on+0x20>
  41172e:	f85d 4b04 	ldr.w	r4, [sp], #4
  411732:	4770      	bx	lr
  411734:	dd0f      	ble.n	411756 <__any_on+0x52>
  411736:	f011 011f 	ands.w	r1, r1, #31
  41173a:	d00c      	beq.n	411756 <__any_on+0x52>
  41173c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  411740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  411744:	fa20 f201 	lsr.w	r2, r0, r1
  411748:	408a      	lsls	r2, r1
  41174a:	4282      	cmp	r2, r0
  41174c:	d0e3      	beq.n	411716 <__any_on+0x12>
  41174e:	2001      	movs	r0, #1
  411750:	f85d 4b04 	ldr.w	r4, [sp], #4
  411754:	4770      	bx	lr
  411756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  41175a:	e7dc      	b.n	411716 <__any_on+0x12>
  41175c:	2000      	movs	r0, #0
  41175e:	e7e6      	b.n	41172e <__any_on+0x2a>

00411760 <_realloc_r>:
  411760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411764:	4617      	mov	r7, r2
  411766:	b083      	sub	sp, #12
  411768:	460e      	mov	r6, r1
  41176a:	2900      	cmp	r1, #0
  41176c:	f000 80e2 	beq.w	411934 <_realloc_r+0x1d4>
  411770:	f107 040b 	add.w	r4, r7, #11
  411774:	4681      	mov	r9, r0
  411776:	f7f9 fe19 	bl	40b3ac <__malloc_lock>
  41177a:	f856 3c04 	ldr.w	r3, [r6, #-4]
  41177e:	2c16      	cmp	r4, #22
  411780:	f1a6 0808 	sub.w	r8, r6, #8
  411784:	f023 0503 	bic.w	r5, r3, #3
  411788:	d850      	bhi.n	41182c <_realloc_r+0xcc>
  41178a:	2210      	movs	r2, #16
  41178c:	2100      	movs	r1, #0
  41178e:	4614      	mov	r4, r2
  411790:	42bc      	cmp	r4, r7
  411792:	f0c0 80dc 	bcc.w	41194e <_realloc_r+0x1ee>
  411796:	2900      	cmp	r1, #0
  411798:	f040 80d9 	bne.w	41194e <_realloc_r+0x1ee>
  41179c:	4295      	cmp	r5, r2
  41179e:	da4a      	bge.n	411836 <_realloc_r+0xd6>
  4117a0:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 411b4c <_realloc_r+0x3ec>
  4117a4:	eb08 0105 	add.w	r1, r8, r5
  4117a8:	f8db 0008 	ldr.w	r0, [fp, #8]
  4117ac:	4288      	cmp	r0, r1
  4117ae:	f000 80d3 	beq.w	411958 <_realloc_r+0x1f8>
  4117b2:	6848      	ldr	r0, [r1, #4]
  4117b4:	f020 0e01 	bic.w	lr, r0, #1
  4117b8:	448e      	add	lr, r1
  4117ba:	f8de e004 	ldr.w	lr, [lr, #4]
  4117be:	f01e 0f01 	tst.w	lr, #1
  4117c2:	d14e      	bne.n	411862 <_realloc_r+0x102>
  4117c4:	f020 0003 	bic.w	r0, r0, #3
  4117c8:	4428      	add	r0, r5
  4117ca:	4290      	cmp	r0, r2
  4117cc:	f280 80b8 	bge.w	411940 <_realloc_r+0x1e0>
  4117d0:	07db      	lsls	r3, r3, #31
  4117d2:	f100 808b 	bmi.w	4118ec <_realloc_r+0x18c>
  4117d6:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4117da:	ebc3 0a08 	rsb	sl, r3, r8
  4117de:	f8da 3004 	ldr.w	r3, [sl, #4]
  4117e2:	f023 0303 	bic.w	r3, r3, #3
  4117e6:	eb00 0e03 	add.w	lr, r0, r3
  4117ea:	4596      	cmp	lr, r2
  4117ec:	db43      	blt.n	411876 <_realloc_r+0x116>
  4117ee:	68cb      	ldr	r3, [r1, #12]
  4117f0:	4657      	mov	r7, sl
  4117f2:	6889      	ldr	r1, [r1, #8]
  4117f4:	1f2a      	subs	r2, r5, #4
  4117f6:	60cb      	str	r3, [r1, #12]
  4117f8:	2a24      	cmp	r2, #36	; 0x24
  4117fa:	6099      	str	r1, [r3, #8]
  4117fc:	f857 1f08 	ldr.w	r1, [r7, #8]!
  411800:	f8da 300c 	ldr.w	r3, [sl, #12]
  411804:	60cb      	str	r3, [r1, #12]
  411806:	6099      	str	r1, [r3, #8]
  411808:	f200 813c 	bhi.w	411a84 <_realloc_r+0x324>
  41180c:	2a13      	cmp	r2, #19
  41180e:	f240 80fa 	bls.w	411a06 <_realloc_r+0x2a6>
  411812:	6833      	ldr	r3, [r6, #0]
  411814:	2a1b      	cmp	r2, #27
  411816:	f8ca 3008 	str.w	r3, [sl, #8]
  41181a:	6873      	ldr	r3, [r6, #4]
  41181c:	f8ca 300c 	str.w	r3, [sl, #12]
  411820:	f200 813b 	bhi.w	411a9a <_realloc_r+0x33a>
  411824:	3608      	adds	r6, #8
  411826:	f10a 0310 	add.w	r3, sl, #16
  41182a:	e0ed      	b.n	411a08 <_realloc_r+0x2a8>
  41182c:	f024 0407 	bic.w	r4, r4, #7
  411830:	4622      	mov	r2, r4
  411832:	0fe1      	lsrs	r1, r4, #31
  411834:	e7ac      	b.n	411790 <_realloc_r+0x30>
  411836:	4637      	mov	r7, r6
  411838:	1b2a      	subs	r2, r5, r4
  41183a:	f003 0301 	and.w	r3, r3, #1
  41183e:	2a0f      	cmp	r2, #15
  411840:	d841      	bhi.n	4118c6 <_realloc_r+0x166>
  411842:	eb08 0205 	add.w	r2, r8, r5
  411846:	431d      	orrs	r5, r3
  411848:	f8c8 5004 	str.w	r5, [r8, #4]
  41184c:	6853      	ldr	r3, [r2, #4]
  41184e:	f043 0301 	orr.w	r3, r3, #1
  411852:	6053      	str	r3, [r2, #4]
  411854:	4648      	mov	r0, r9
  411856:	f7f9 fdab 	bl	40b3b0 <__malloc_unlock>
  41185a:	4638      	mov	r0, r7
  41185c:	b003      	add	sp, #12
  41185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411862:	07d9      	lsls	r1, r3, #31
  411864:	d442      	bmi.n	4118ec <_realloc_r+0x18c>
  411866:	f856 3c08 	ldr.w	r3, [r6, #-8]
  41186a:	ebc3 0a08 	rsb	sl, r3, r8
  41186e:	f8da 3004 	ldr.w	r3, [sl, #4]
  411872:	f023 0303 	bic.w	r3, r3, #3
  411876:	442b      	add	r3, r5
  411878:	4293      	cmp	r3, r2
  41187a:	db37      	blt.n	4118ec <_realloc_r+0x18c>
  41187c:	4657      	mov	r7, sl
  41187e:	1f2a      	subs	r2, r5, #4
  411880:	f8da 100c 	ldr.w	r1, [sl, #12]
  411884:	f857 0f08 	ldr.w	r0, [r7, #8]!
  411888:	2a24      	cmp	r2, #36	; 0x24
  41188a:	60c1      	str	r1, [r0, #12]
  41188c:	6088      	str	r0, [r1, #8]
  41188e:	f200 80c6 	bhi.w	411a1e <_realloc_r+0x2be>
  411892:	2a13      	cmp	r2, #19
  411894:	f240 80ff 	bls.w	411a96 <_realloc_r+0x336>
  411898:	6831      	ldr	r1, [r6, #0]
  41189a:	2a1b      	cmp	r2, #27
  41189c:	f8ca 1008 	str.w	r1, [sl, #8]
  4118a0:	6871      	ldr	r1, [r6, #4]
  4118a2:	f8ca 100c 	str.w	r1, [sl, #12]
  4118a6:	f200 810d 	bhi.w	411ac4 <_realloc_r+0x364>
  4118aa:	3608      	adds	r6, #8
  4118ac:	f10a 0210 	add.w	r2, sl, #16
  4118b0:	6831      	ldr	r1, [r6, #0]
  4118b2:	461d      	mov	r5, r3
  4118b4:	46d0      	mov	r8, sl
  4118b6:	6011      	str	r1, [r2, #0]
  4118b8:	6873      	ldr	r3, [r6, #4]
  4118ba:	6053      	str	r3, [r2, #4]
  4118bc:	68b3      	ldr	r3, [r6, #8]
  4118be:	6093      	str	r3, [r2, #8]
  4118c0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4118c4:	e7b8      	b.n	411838 <_realloc_r+0xd8>
  4118c6:	eb08 0504 	add.w	r5, r8, r4
  4118ca:	f042 0601 	orr.w	r6, r2, #1
  4118ce:	431c      	orrs	r4, r3
  4118d0:	4648      	mov	r0, r9
  4118d2:	442a      	add	r2, r5
  4118d4:	f105 0108 	add.w	r1, r5, #8
  4118d8:	f8c8 4004 	str.w	r4, [r8, #4]
  4118dc:	606e      	str	r6, [r5, #4]
  4118de:	6853      	ldr	r3, [r2, #4]
  4118e0:	f043 0301 	orr.w	r3, r3, #1
  4118e4:	6053      	str	r3, [r2, #4]
  4118e6:	f7fe fb85 	bl	40fff4 <_free_r>
  4118ea:	e7b3      	b.n	411854 <_realloc_r+0xf4>
  4118ec:	4639      	mov	r1, r7
  4118ee:	4648      	mov	r0, r9
  4118f0:	f7f9 f9c6 	bl	40ac80 <_malloc_r>
  4118f4:	4607      	mov	r7, r0
  4118f6:	2800      	cmp	r0, #0
  4118f8:	d0ac      	beq.n	411854 <_realloc_r+0xf4>
  4118fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4118fe:	f1a0 0108 	sub.w	r1, r0, #8
  411902:	f023 0201 	bic.w	r2, r3, #1
  411906:	4442      	add	r2, r8
  411908:	4291      	cmp	r1, r2
  41190a:	f000 80b4 	beq.w	411a76 <_realloc_r+0x316>
  41190e:	1f2a      	subs	r2, r5, #4
  411910:	2a24      	cmp	r2, #36	; 0x24
  411912:	f200 80a1 	bhi.w	411a58 <_realloc_r+0x2f8>
  411916:	2a13      	cmp	r2, #19
  411918:	d86a      	bhi.n	4119f0 <_realloc_r+0x290>
  41191a:	4603      	mov	r3, r0
  41191c:	4632      	mov	r2, r6
  41191e:	6811      	ldr	r1, [r2, #0]
  411920:	6019      	str	r1, [r3, #0]
  411922:	6851      	ldr	r1, [r2, #4]
  411924:	6059      	str	r1, [r3, #4]
  411926:	6892      	ldr	r2, [r2, #8]
  411928:	609a      	str	r2, [r3, #8]
  41192a:	4631      	mov	r1, r6
  41192c:	4648      	mov	r0, r9
  41192e:	f7fe fb61 	bl	40fff4 <_free_r>
  411932:	e78f      	b.n	411854 <_realloc_r+0xf4>
  411934:	4611      	mov	r1, r2
  411936:	b003      	add	sp, #12
  411938:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41193c:	f7f9 b9a0 	b.w	40ac80 <_malloc_r>
  411940:	68ca      	ldr	r2, [r1, #12]
  411942:	4637      	mov	r7, r6
  411944:	6889      	ldr	r1, [r1, #8]
  411946:	4605      	mov	r5, r0
  411948:	60ca      	str	r2, [r1, #12]
  41194a:	6091      	str	r1, [r2, #8]
  41194c:	e774      	b.n	411838 <_realloc_r+0xd8>
  41194e:	230c      	movs	r3, #12
  411950:	2000      	movs	r0, #0
  411952:	f8c9 3000 	str.w	r3, [r9]
  411956:	e781      	b.n	41185c <_realloc_r+0xfc>
  411958:	6841      	ldr	r1, [r0, #4]
  41195a:	f104 0010 	add.w	r0, r4, #16
  41195e:	f021 0103 	bic.w	r1, r1, #3
  411962:	4429      	add	r1, r5
  411964:	4281      	cmp	r1, r0
  411966:	da63      	bge.n	411a30 <_realloc_r+0x2d0>
  411968:	07db      	lsls	r3, r3, #31
  41196a:	d4bf      	bmi.n	4118ec <_realloc_r+0x18c>
  41196c:	f856 3c08 	ldr.w	r3, [r6, #-8]
  411970:	ebc3 0a08 	rsb	sl, r3, r8
  411974:	f8da 3004 	ldr.w	r3, [sl, #4]
  411978:	f023 0303 	bic.w	r3, r3, #3
  41197c:	eb01 0c03 	add.w	ip, r1, r3
  411980:	4560      	cmp	r0, ip
  411982:	f73f af78 	bgt.w	411876 <_realloc_r+0x116>
  411986:	4657      	mov	r7, sl
  411988:	1f2a      	subs	r2, r5, #4
  41198a:	f8da 300c 	ldr.w	r3, [sl, #12]
  41198e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  411992:	2a24      	cmp	r2, #36	; 0x24
  411994:	60cb      	str	r3, [r1, #12]
  411996:	6099      	str	r1, [r3, #8]
  411998:	f200 80b8 	bhi.w	411b0c <_realloc_r+0x3ac>
  41199c:	2a13      	cmp	r2, #19
  41199e:	f240 80a8 	bls.w	411af2 <_realloc_r+0x392>
  4119a2:	6833      	ldr	r3, [r6, #0]
  4119a4:	2a1b      	cmp	r2, #27
  4119a6:	f8ca 3008 	str.w	r3, [sl, #8]
  4119aa:	6873      	ldr	r3, [r6, #4]
  4119ac:	f8ca 300c 	str.w	r3, [sl, #12]
  4119b0:	f200 80b5 	bhi.w	411b1e <_realloc_r+0x3be>
  4119b4:	3608      	adds	r6, #8
  4119b6:	f10a 0310 	add.w	r3, sl, #16
  4119ba:	6832      	ldr	r2, [r6, #0]
  4119bc:	601a      	str	r2, [r3, #0]
  4119be:	6872      	ldr	r2, [r6, #4]
  4119c0:	605a      	str	r2, [r3, #4]
  4119c2:	68b2      	ldr	r2, [r6, #8]
  4119c4:	609a      	str	r2, [r3, #8]
  4119c6:	ebc4 030c 	rsb	r3, r4, ip
  4119ca:	eb0a 0204 	add.w	r2, sl, r4
  4119ce:	4648      	mov	r0, r9
  4119d0:	f043 0301 	orr.w	r3, r3, #1
  4119d4:	f8cb 2008 	str.w	r2, [fp, #8]
  4119d8:	6053      	str	r3, [r2, #4]
  4119da:	f8da 3004 	ldr.w	r3, [sl, #4]
  4119de:	f003 0301 	and.w	r3, r3, #1
  4119e2:	431c      	orrs	r4, r3
  4119e4:	f8ca 4004 	str.w	r4, [sl, #4]
  4119e8:	f7f9 fce2 	bl	40b3b0 <__malloc_unlock>
  4119ec:	4638      	mov	r0, r7
  4119ee:	e735      	b.n	41185c <_realloc_r+0xfc>
  4119f0:	6833      	ldr	r3, [r6, #0]
  4119f2:	2a1b      	cmp	r2, #27
  4119f4:	6003      	str	r3, [r0, #0]
  4119f6:	6873      	ldr	r3, [r6, #4]
  4119f8:	6043      	str	r3, [r0, #4]
  4119fa:	d831      	bhi.n	411a60 <_realloc_r+0x300>
  4119fc:	f100 0308 	add.w	r3, r0, #8
  411a00:	f106 0208 	add.w	r2, r6, #8
  411a04:	e78b      	b.n	41191e <_realloc_r+0x1be>
  411a06:	463b      	mov	r3, r7
  411a08:	6832      	ldr	r2, [r6, #0]
  411a0a:	4675      	mov	r5, lr
  411a0c:	46d0      	mov	r8, sl
  411a0e:	601a      	str	r2, [r3, #0]
  411a10:	6872      	ldr	r2, [r6, #4]
  411a12:	605a      	str	r2, [r3, #4]
  411a14:	68b2      	ldr	r2, [r6, #8]
  411a16:	609a      	str	r2, [r3, #8]
  411a18:	f8da 3004 	ldr.w	r3, [sl, #4]
  411a1c:	e70c      	b.n	411838 <_realloc_r+0xd8>
  411a1e:	4631      	mov	r1, r6
  411a20:	4638      	mov	r0, r7
  411a22:	461d      	mov	r5, r3
  411a24:	46d0      	mov	r8, sl
  411a26:	f7ff f9db 	bl	410de0 <memmove>
  411a2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  411a2e:	e703      	b.n	411838 <_realloc_r+0xd8>
  411a30:	1b0b      	subs	r3, r1, r4
  411a32:	eb08 0204 	add.w	r2, r8, r4
  411a36:	4648      	mov	r0, r9
  411a38:	f043 0301 	orr.w	r3, r3, #1
  411a3c:	f8cb 2008 	str.w	r2, [fp, #8]
  411a40:	6053      	str	r3, [r2, #4]
  411a42:	f856 3c04 	ldr.w	r3, [r6, #-4]
  411a46:	f003 0301 	and.w	r3, r3, #1
  411a4a:	431c      	orrs	r4, r3
  411a4c:	f846 4c04 	str.w	r4, [r6, #-4]
  411a50:	f7f9 fcae 	bl	40b3b0 <__malloc_unlock>
  411a54:	4630      	mov	r0, r6
  411a56:	e701      	b.n	41185c <_realloc_r+0xfc>
  411a58:	4631      	mov	r1, r6
  411a5a:	f7ff f9c1 	bl	410de0 <memmove>
  411a5e:	e764      	b.n	41192a <_realloc_r+0x1ca>
  411a60:	68b3      	ldr	r3, [r6, #8]
  411a62:	2a24      	cmp	r2, #36	; 0x24
  411a64:	6083      	str	r3, [r0, #8]
  411a66:	68f3      	ldr	r3, [r6, #12]
  411a68:	60c3      	str	r3, [r0, #12]
  411a6a:	d022      	beq.n	411ab2 <_realloc_r+0x352>
  411a6c:	f100 0310 	add.w	r3, r0, #16
  411a70:	f106 0210 	add.w	r2, r6, #16
  411a74:	e753      	b.n	41191e <_realloc_r+0x1be>
  411a76:	f850 2c04 	ldr.w	r2, [r0, #-4]
  411a7a:	4637      	mov	r7, r6
  411a7c:	f022 0203 	bic.w	r2, r2, #3
  411a80:	4415      	add	r5, r2
  411a82:	e6d9      	b.n	411838 <_realloc_r+0xd8>
  411a84:	4631      	mov	r1, r6
  411a86:	4638      	mov	r0, r7
  411a88:	4675      	mov	r5, lr
  411a8a:	46d0      	mov	r8, sl
  411a8c:	f7ff f9a8 	bl	410de0 <memmove>
  411a90:	f8da 3004 	ldr.w	r3, [sl, #4]
  411a94:	e6d0      	b.n	411838 <_realloc_r+0xd8>
  411a96:	463a      	mov	r2, r7
  411a98:	e70a      	b.n	4118b0 <_realloc_r+0x150>
  411a9a:	68b3      	ldr	r3, [r6, #8]
  411a9c:	2a24      	cmp	r2, #36	; 0x24
  411a9e:	f8ca 3010 	str.w	r3, [sl, #16]
  411aa2:	68f3      	ldr	r3, [r6, #12]
  411aa4:	f8ca 3014 	str.w	r3, [sl, #20]
  411aa8:	d018      	beq.n	411adc <_realloc_r+0x37c>
  411aaa:	3610      	adds	r6, #16
  411aac:	f10a 0318 	add.w	r3, sl, #24
  411ab0:	e7aa      	b.n	411a08 <_realloc_r+0x2a8>
  411ab2:	6931      	ldr	r1, [r6, #16]
  411ab4:	f100 0318 	add.w	r3, r0, #24
  411ab8:	f106 0218 	add.w	r2, r6, #24
  411abc:	6101      	str	r1, [r0, #16]
  411abe:	6971      	ldr	r1, [r6, #20]
  411ac0:	6141      	str	r1, [r0, #20]
  411ac2:	e72c      	b.n	41191e <_realloc_r+0x1be>
  411ac4:	68b1      	ldr	r1, [r6, #8]
  411ac6:	2a24      	cmp	r2, #36	; 0x24
  411ac8:	f8ca 1010 	str.w	r1, [sl, #16]
  411acc:	68f1      	ldr	r1, [r6, #12]
  411ace:	f8ca 1014 	str.w	r1, [sl, #20]
  411ad2:	d010      	beq.n	411af6 <_realloc_r+0x396>
  411ad4:	3610      	adds	r6, #16
  411ad6:	f10a 0218 	add.w	r2, sl, #24
  411ada:	e6e9      	b.n	4118b0 <_realloc_r+0x150>
  411adc:	6932      	ldr	r2, [r6, #16]
  411ade:	f10a 0320 	add.w	r3, sl, #32
  411ae2:	3618      	adds	r6, #24
  411ae4:	f8ca 2018 	str.w	r2, [sl, #24]
  411ae8:	f856 2c04 	ldr.w	r2, [r6, #-4]
  411aec:	f8ca 201c 	str.w	r2, [sl, #28]
  411af0:	e78a      	b.n	411a08 <_realloc_r+0x2a8>
  411af2:	463b      	mov	r3, r7
  411af4:	e761      	b.n	4119ba <_realloc_r+0x25a>
  411af6:	6931      	ldr	r1, [r6, #16]
  411af8:	f10a 0220 	add.w	r2, sl, #32
  411afc:	3618      	adds	r6, #24
  411afe:	f8ca 1018 	str.w	r1, [sl, #24]
  411b02:	f856 1c04 	ldr.w	r1, [r6, #-4]
  411b06:	f8ca 101c 	str.w	r1, [sl, #28]
  411b0a:	e6d1      	b.n	4118b0 <_realloc_r+0x150>
  411b0c:	4631      	mov	r1, r6
  411b0e:	4638      	mov	r0, r7
  411b10:	f8cd c004 	str.w	ip, [sp, #4]
  411b14:	f7ff f964 	bl	410de0 <memmove>
  411b18:	f8dd c004 	ldr.w	ip, [sp, #4]
  411b1c:	e753      	b.n	4119c6 <_realloc_r+0x266>
  411b1e:	68b3      	ldr	r3, [r6, #8]
  411b20:	2a24      	cmp	r2, #36	; 0x24
  411b22:	f8ca 3010 	str.w	r3, [sl, #16]
  411b26:	68f3      	ldr	r3, [r6, #12]
  411b28:	f8ca 3014 	str.w	r3, [sl, #20]
  411b2c:	d003      	beq.n	411b36 <_realloc_r+0x3d6>
  411b2e:	3610      	adds	r6, #16
  411b30:	f10a 0318 	add.w	r3, sl, #24
  411b34:	e741      	b.n	4119ba <_realloc_r+0x25a>
  411b36:	6932      	ldr	r2, [r6, #16]
  411b38:	f10a 0320 	add.w	r3, sl, #32
  411b3c:	3618      	adds	r6, #24
  411b3e:	f8ca 2018 	str.w	r2, [sl, #24]
  411b42:	f856 2c04 	ldr.w	r2, [r6, #-4]
  411b46:	f8ca 201c 	str.w	r2, [sl, #28]
  411b4a:	e736      	b.n	4119ba <_realloc_r+0x25a>
  411b4c:	204004dc 	.word	0x204004dc

00411b50 <nanf>:
  411b50:	4800      	ldr	r0, [pc, #0]	; (411b54 <nanf+0x4>)
  411b52:	4770      	bx	lr
  411b54:	7fc00000 	.word	0x7fc00000

00411b58 <_raise_r>:
  411b58:	291f      	cmp	r1, #31
  411b5a:	b538      	push	{r3, r4, r5, lr}
  411b5c:	4605      	mov	r5, r0
  411b5e:	d821      	bhi.n	411ba4 <_raise_r+0x4c>
  411b60:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
  411b64:	460c      	mov	r4, r1
  411b66:	b19a      	cbz	r2, 411b90 <_raise_r+0x38>
  411b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  411b6c:	b183      	cbz	r3, 411b90 <_raise_r+0x38>
  411b6e:	2b01      	cmp	r3, #1
  411b70:	d00c      	beq.n	411b8c <_raise_r+0x34>
  411b72:	1c59      	adds	r1, r3, #1
  411b74:	d006      	beq.n	411b84 <_raise_r+0x2c>
  411b76:	2500      	movs	r5, #0
  411b78:	4620      	mov	r0, r4
  411b7a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  411b7e:	4798      	blx	r3
  411b80:	4628      	mov	r0, r5
  411b82:	bd38      	pop	{r3, r4, r5, pc}
  411b84:	2316      	movs	r3, #22
  411b86:	2001      	movs	r0, #1
  411b88:	602b      	str	r3, [r5, #0]
  411b8a:	bd38      	pop	{r3, r4, r5, pc}
  411b8c:	2000      	movs	r0, #0
  411b8e:	bd38      	pop	{r3, r4, r5, pc}
  411b90:	4628      	mov	r0, r5
  411b92:	f000 f829 	bl	411be8 <_getpid_r>
  411b96:	4622      	mov	r2, r4
  411b98:	4601      	mov	r1, r0
  411b9a:	4628      	mov	r0, r5
  411b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  411ba0:	f000 b80e 	b.w	411bc0 <_kill_r>
  411ba4:	2316      	movs	r3, #22
  411ba6:	f04f 30ff 	mov.w	r0, #4294967295
  411baa:	602b      	str	r3, [r5, #0]
  411bac:	bd38      	pop	{r3, r4, r5, pc}
  411bae:	bf00      	nop

00411bb0 <raise>:
  411bb0:	4b02      	ldr	r3, [pc, #8]	; (411bbc <raise+0xc>)
  411bb2:	4601      	mov	r1, r0
  411bb4:	6818      	ldr	r0, [r3, #0]
  411bb6:	f7ff bfcf 	b.w	411b58 <_raise_r>
  411bba:	bf00      	nop
  411bbc:	204004d8 	.word	0x204004d8

00411bc0 <_kill_r>:
  411bc0:	b538      	push	{r3, r4, r5, lr}
  411bc2:	2300      	movs	r3, #0
  411bc4:	4c07      	ldr	r4, [pc, #28]	; (411be4 <_kill_r+0x24>)
  411bc6:	4605      	mov	r5, r0
  411bc8:	4608      	mov	r0, r1
  411bca:	4611      	mov	r1, r2
  411bcc:	6023      	str	r3, [r4, #0]
  411bce:	f7f1 fdab 	bl	403728 <_kill>
  411bd2:	1c43      	adds	r3, r0, #1
  411bd4:	d000      	beq.n	411bd8 <_kill_r+0x18>
  411bd6:	bd38      	pop	{r3, r4, r5, pc}
  411bd8:	6823      	ldr	r3, [r4, #0]
  411bda:	2b00      	cmp	r3, #0
  411bdc:	d0fb      	beq.n	411bd6 <_kill_r+0x16>
  411bde:	602b      	str	r3, [r5, #0]
  411be0:	bd38      	pop	{r3, r4, r5, pc}
  411be2:	bf00      	nop
  411be4:	2040c6a4 	.word	0x2040c6a4

00411be8 <_getpid_r>:
  411be8:	f7f1 bda0 	b.w	40372c <_getpid>

00411bec <__sread>:
  411bec:	b510      	push	{r4, lr}
  411bee:	460c      	mov	r4, r1
  411bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411bf4:	f000 fac2 	bl	41217c <_read_r>
  411bf8:	2800      	cmp	r0, #0
  411bfa:	db03      	blt.n	411c04 <__sread+0x18>
  411bfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  411bfe:	4403      	add	r3, r0
  411c00:	6523      	str	r3, [r4, #80]	; 0x50
  411c02:	bd10      	pop	{r4, pc}
  411c04:	89a3      	ldrh	r3, [r4, #12]
  411c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  411c0a:	81a3      	strh	r3, [r4, #12]
  411c0c:	bd10      	pop	{r4, pc}
  411c0e:	bf00      	nop

00411c10 <__swrite>:
  411c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411c14:	461d      	mov	r5, r3
  411c16:	898b      	ldrh	r3, [r1, #12]
  411c18:	4616      	mov	r6, r2
  411c1a:	460c      	mov	r4, r1
  411c1c:	05da      	lsls	r2, r3, #23
  411c1e:	4607      	mov	r7, r0
  411c20:	d506      	bpl.n	411c30 <__swrite+0x20>
  411c22:	2302      	movs	r3, #2
  411c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411c28:	2200      	movs	r2, #0
  411c2a:	f000 fa93 	bl	412154 <_lseek_r>
  411c2e:	89a3      	ldrh	r3, [r4, #12]
  411c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  411c34:	4638      	mov	r0, r7
  411c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  411c3a:	4632      	mov	r2, r6
  411c3c:	81a3      	strh	r3, [r4, #12]
  411c3e:	462b      	mov	r3, r5
  411c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  411c44:	f000 b974 	b.w	411f30 <_write_r>

00411c48 <__sseek>:
  411c48:	b510      	push	{r4, lr}
  411c4a:	460c      	mov	r4, r1
  411c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411c50:	f000 fa80 	bl	412154 <_lseek_r>
  411c54:	1c42      	adds	r2, r0, #1
  411c56:	89a3      	ldrh	r3, [r4, #12]
  411c58:	d004      	beq.n	411c64 <__sseek+0x1c>
  411c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  411c5e:	6520      	str	r0, [r4, #80]	; 0x50
  411c60:	81a3      	strh	r3, [r4, #12]
  411c62:	bd10      	pop	{r4, pc}
  411c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  411c68:	81a3      	strh	r3, [r4, #12]
  411c6a:	bd10      	pop	{r4, pc}

00411c6c <__sclose>:
  411c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  411c70:	f000 b9f6 	b.w	412060 <_close_r>

00411c74 <strncmp>:
  411c74:	2a00      	cmp	r2, #0
  411c76:	d03f      	beq.n	411cf8 <strncmp+0x84>
  411c78:	ea40 0301 	orr.w	r3, r0, r1
  411c7c:	f013 0303 	ands.w	r3, r3, #3
  411c80:	b4f0      	push	{r4, r5, r6, r7}
  411c82:	d125      	bne.n	411cd0 <strncmp+0x5c>
  411c84:	2a03      	cmp	r2, #3
  411c86:	d923      	bls.n	411cd0 <strncmp+0x5c>
  411c88:	6804      	ldr	r4, [r0, #0]
  411c8a:	680d      	ldr	r5, [r1, #0]
  411c8c:	42ac      	cmp	r4, r5
  411c8e:	d11f      	bne.n	411cd0 <strncmp+0x5c>
  411c90:	3a04      	subs	r2, #4
  411c92:	d036      	beq.n	411d02 <strncmp+0x8e>
  411c94:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  411c98:	ea25 0404 	bic.w	r4, r5, r4
  411c9c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  411ca0:	d131      	bne.n	411d06 <strncmp+0x92>
  411ca2:	1d06      	adds	r6, r0, #4
  411ca4:	1d0d      	adds	r5, r1, #4
  411ca6:	e00d      	b.n	411cc4 <strncmp+0x50>
  411ca8:	f856 3b04 	ldr.w	r3, [r6], #4
  411cac:	680f      	ldr	r7, [r1, #0]
  411cae:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
  411cb2:	42bb      	cmp	r3, r7
  411cb4:	ea24 0303 	bic.w	r3, r4, r3
  411cb8:	d10a      	bne.n	411cd0 <strncmp+0x5c>
  411cba:	3a04      	subs	r2, #4
  411cbc:	d021      	beq.n	411d02 <strncmp+0x8e>
  411cbe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  411cc2:	d11b      	bne.n	411cfc <strncmp+0x88>
  411cc4:	2a03      	cmp	r2, #3
  411cc6:	4629      	mov	r1, r5
  411cc8:	4630      	mov	r0, r6
  411cca:	f105 0504 	add.w	r5, r5, #4
  411cce:	d8eb      	bhi.n	411ca8 <strncmp+0x34>
  411cd0:	7803      	ldrb	r3, [r0, #0]
  411cd2:	3a01      	subs	r2, #1
  411cd4:	780c      	ldrb	r4, [r1, #0]
  411cd6:	42a3      	cmp	r3, r4
  411cd8:	d10b      	bne.n	411cf2 <strncmp+0x7e>
  411cda:	b17a      	cbz	r2, 411cfc <strncmp+0x88>
  411cdc:	b913      	cbnz	r3, 411ce4 <strncmp+0x70>
  411cde:	e00d      	b.n	411cfc <strncmp+0x88>
  411ce0:	b163      	cbz	r3, 411cfc <strncmp+0x88>
  411ce2:	b15a      	cbz	r2, 411cfc <strncmp+0x88>
  411ce4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  411ce8:	3a01      	subs	r2, #1
  411cea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  411cee:	42a3      	cmp	r3, r4
  411cf0:	d0f6      	beq.n	411ce0 <strncmp+0x6c>
  411cf2:	1b18      	subs	r0, r3, r4
  411cf4:	bcf0      	pop	{r4, r5, r6, r7}
  411cf6:	4770      	bx	lr
  411cf8:	4610      	mov	r0, r2
  411cfa:	4770      	bx	lr
  411cfc:	2000      	movs	r0, #0
  411cfe:	bcf0      	pop	{r4, r5, r6, r7}
  411d00:	4770      	bx	lr
  411d02:	4610      	mov	r0, r2
  411d04:	e7f6      	b.n	411cf4 <strncmp+0x80>
  411d06:	4618      	mov	r0, r3
  411d08:	e7f4      	b.n	411cf4 <strncmp+0x80>
  411d0a:	bf00      	nop

00411d0c <__ssprint_r>:
  411d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411d10:	6893      	ldr	r3, [r2, #8]
  411d12:	b083      	sub	sp, #12
  411d14:	4691      	mov	r9, r2
  411d16:	f8d2 8000 	ldr.w	r8, [r2]
  411d1a:	9001      	str	r0, [sp, #4]
  411d1c:	2b00      	cmp	r3, #0
  411d1e:	d073      	beq.n	411e08 <__ssprint_r+0xfc>
  411d20:	f04f 0b00 	mov.w	fp, #0
  411d24:	460d      	mov	r5, r1
  411d26:	6808      	ldr	r0, [r1, #0]
  411d28:	688b      	ldr	r3, [r1, #8]
  411d2a:	465c      	mov	r4, fp
  411d2c:	2c00      	cmp	r4, #0
  411d2e:	d046      	beq.n	411dbe <__ssprint_r+0xb2>
  411d30:	429c      	cmp	r4, r3
  411d32:	461e      	mov	r6, r3
  411d34:	469a      	mov	sl, r3
  411d36:	d349      	bcc.n	411dcc <__ssprint_r+0xc0>
  411d38:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  411d3c:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  411d40:	d02d      	beq.n	411d9e <__ssprint_r+0x92>
  411d42:	696b      	ldr	r3, [r5, #20]
  411d44:	1c62      	adds	r2, r4, #1
  411d46:	6929      	ldr	r1, [r5, #16]
  411d48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  411d4c:	1a46      	subs	r6, r0, r1
  411d4e:	4610      	mov	r0, r2
  411d50:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  411d54:	4430      	add	r0, r6
  411d56:	105f      	asrs	r7, r3, #1
  411d58:	4287      	cmp	r7, r0
  411d5a:	463a      	mov	r2, r7
  411d5c:	d201      	bcs.n	411d62 <__ssprint_r+0x56>
  411d5e:	4607      	mov	r7, r0
  411d60:	4602      	mov	r2, r0
  411d62:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  411d66:	d034      	beq.n	411dd2 <__ssprint_r+0xc6>
  411d68:	4611      	mov	r1, r2
  411d6a:	9801      	ldr	r0, [sp, #4]
  411d6c:	f7f8 ff88 	bl	40ac80 <_malloc_r>
  411d70:	4682      	mov	sl, r0
  411d72:	2800      	cmp	r0, #0
  411d74:	d04e      	beq.n	411e14 <__ssprint_r+0x108>
  411d76:	4632      	mov	r2, r6
  411d78:	6929      	ldr	r1, [r5, #16]
  411d7a:	f7f9 fa2d 	bl	40b1d8 <memcpy>
  411d7e:	89aa      	ldrh	r2, [r5, #12]
  411d80:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  411d84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  411d88:	81aa      	strh	r2, [r5, #12]
  411d8a:	eb0a 0006 	add.w	r0, sl, r6
  411d8e:	1bba      	subs	r2, r7, r6
  411d90:	f8c5 a010 	str.w	sl, [r5, #16]
  411d94:	4626      	mov	r6, r4
  411d96:	46a2      	mov	sl, r4
  411d98:	6028      	str	r0, [r5, #0]
  411d9a:	60aa      	str	r2, [r5, #8]
  411d9c:	616f      	str	r7, [r5, #20]
  411d9e:	4652      	mov	r2, sl
  411da0:	4659      	mov	r1, fp
  411da2:	f7ff f81d 	bl	410de0 <memmove>
  411da6:	f8d9 2008 	ldr.w	r2, [r9, #8]
  411daa:	68ab      	ldr	r3, [r5, #8]
  411dac:	6828      	ldr	r0, [r5, #0]
  411dae:	1b14      	subs	r4, r2, r4
  411db0:	1b9b      	subs	r3, r3, r6
  411db2:	4450      	add	r0, sl
  411db4:	60ab      	str	r3, [r5, #8]
  411db6:	6028      	str	r0, [r5, #0]
  411db8:	f8c9 4008 	str.w	r4, [r9, #8]
  411dbc:	b324      	cbz	r4, 411e08 <__ssprint_r+0xfc>
  411dbe:	f8d8 b000 	ldr.w	fp, [r8]
  411dc2:	f108 0808 	add.w	r8, r8, #8
  411dc6:	f858 4c04 	ldr.w	r4, [r8, #-4]
  411dca:	e7af      	b.n	411d2c <__ssprint_r+0x20>
  411dcc:	4626      	mov	r6, r4
  411dce:	46a2      	mov	sl, r4
  411dd0:	e7e5      	b.n	411d9e <__ssprint_r+0x92>
  411dd2:	9801      	ldr	r0, [sp, #4]
  411dd4:	f7ff fcc4 	bl	411760 <_realloc_r>
  411dd8:	4682      	mov	sl, r0
  411dda:	2800      	cmp	r0, #0
  411ddc:	d1d5      	bne.n	411d8a <__ssprint_r+0x7e>
  411dde:	9c01      	ldr	r4, [sp, #4]
  411de0:	6929      	ldr	r1, [r5, #16]
  411de2:	4620      	mov	r0, r4
  411de4:	f7fe f906 	bl	40fff4 <_free_r>
  411de8:	230c      	movs	r3, #12
  411dea:	6023      	str	r3, [r4, #0]
  411dec:	89ab      	ldrh	r3, [r5, #12]
  411dee:	2200      	movs	r2, #0
  411df0:	f04f 30ff 	mov.w	r0, #4294967295
  411df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  411df8:	81ab      	strh	r3, [r5, #12]
  411dfa:	f8c9 2008 	str.w	r2, [r9, #8]
  411dfe:	f8c9 2004 	str.w	r2, [r9, #4]
  411e02:	b003      	add	sp, #12
  411e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411e08:	2000      	movs	r0, #0
  411e0a:	f8c9 0004 	str.w	r0, [r9, #4]
  411e0e:	b003      	add	sp, #12
  411e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411e14:	230c      	movs	r3, #12
  411e16:	9a01      	ldr	r2, [sp, #4]
  411e18:	6013      	str	r3, [r2, #0]
  411e1a:	e7e7      	b.n	411dec <__ssprint_r+0xe0>

00411e1c <__swbuf_r>:
  411e1c:	b570      	push	{r4, r5, r6, lr}
  411e1e:	460d      	mov	r5, r1
  411e20:	4614      	mov	r4, r2
  411e22:	4606      	mov	r6, r0
  411e24:	b110      	cbz	r0, 411e2c <__swbuf_r+0x10>
  411e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  411e28:	2b00      	cmp	r3, #0
  411e2a:	d048      	beq.n	411ebe <__swbuf_r+0xa2>
  411e2c:	89a2      	ldrh	r2, [r4, #12]
  411e2e:	69a3      	ldr	r3, [r4, #24]
  411e30:	b291      	uxth	r1, r2
  411e32:	60a3      	str	r3, [r4, #8]
  411e34:	0708      	lsls	r0, r1, #28
  411e36:	d538      	bpl.n	411eaa <__swbuf_r+0x8e>
  411e38:	6923      	ldr	r3, [r4, #16]
  411e3a:	2b00      	cmp	r3, #0
  411e3c:	d035      	beq.n	411eaa <__swbuf_r+0x8e>
  411e3e:	0489      	lsls	r1, r1, #18
  411e40:	b2ed      	uxtb	r5, r5
  411e42:	d515      	bpl.n	411e70 <__swbuf_r+0x54>
  411e44:	6822      	ldr	r2, [r4, #0]
  411e46:	6961      	ldr	r1, [r4, #20]
  411e48:	1ad3      	subs	r3, r2, r3
  411e4a:	428b      	cmp	r3, r1
  411e4c:	da1c      	bge.n	411e88 <__swbuf_r+0x6c>
  411e4e:	3301      	adds	r3, #1
  411e50:	68a1      	ldr	r1, [r4, #8]
  411e52:	1c50      	adds	r0, r2, #1
  411e54:	3901      	subs	r1, #1
  411e56:	6020      	str	r0, [r4, #0]
  411e58:	60a1      	str	r1, [r4, #8]
  411e5a:	7015      	strb	r5, [r2, #0]
  411e5c:	6962      	ldr	r2, [r4, #20]
  411e5e:	429a      	cmp	r2, r3
  411e60:	d01a      	beq.n	411e98 <__swbuf_r+0x7c>
  411e62:	2d0a      	cmp	r5, #10
  411e64:	d102      	bne.n	411e6c <__swbuf_r+0x50>
  411e66:	7b23      	ldrb	r3, [r4, #12]
  411e68:	07db      	lsls	r3, r3, #31
  411e6a:	d415      	bmi.n	411e98 <__swbuf_r+0x7c>
  411e6c:	4628      	mov	r0, r5
  411e6e:	bd70      	pop	{r4, r5, r6, pc}
  411e70:	6e61      	ldr	r1, [r4, #100]	; 0x64
  411e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  411e76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  411e7a:	81a2      	strh	r2, [r4, #12]
  411e7c:	6822      	ldr	r2, [r4, #0]
  411e7e:	6661      	str	r1, [r4, #100]	; 0x64
  411e80:	1ad3      	subs	r3, r2, r3
  411e82:	6961      	ldr	r1, [r4, #20]
  411e84:	428b      	cmp	r3, r1
  411e86:	dbe2      	blt.n	411e4e <__swbuf_r+0x32>
  411e88:	4630      	mov	r0, r6
  411e8a:	4621      	mov	r1, r4
  411e8c:	f7fd ff40 	bl	40fd10 <_fflush_r>
  411e90:	b940      	cbnz	r0, 411ea4 <__swbuf_r+0x88>
  411e92:	6822      	ldr	r2, [r4, #0]
  411e94:	2301      	movs	r3, #1
  411e96:	e7db      	b.n	411e50 <__swbuf_r+0x34>
  411e98:	4630      	mov	r0, r6
  411e9a:	4621      	mov	r1, r4
  411e9c:	f7fd ff38 	bl	40fd10 <_fflush_r>
  411ea0:	2800      	cmp	r0, #0
  411ea2:	d0e3      	beq.n	411e6c <__swbuf_r+0x50>
  411ea4:	f04f 30ff 	mov.w	r0, #4294967295
  411ea8:	bd70      	pop	{r4, r5, r6, pc}
  411eaa:	4630      	mov	r0, r6
  411eac:	4621      	mov	r1, r4
  411eae:	f7fc fdfb 	bl	40eaa8 <__swsetup_r>
  411eb2:	2800      	cmp	r0, #0
  411eb4:	d1f6      	bne.n	411ea4 <__swbuf_r+0x88>
  411eb6:	89a2      	ldrh	r2, [r4, #12]
  411eb8:	6923      	ldr	r3, [r4, #16]
  411eba:	b291      	uxth	r1, r2
  411ebc:	e7bf      	b.n	411e3e <__swbuf_r+0x22>
  411ebe:	f7fd ffc1 	bl	40fe44 <__sinit>
  411ec2:	e7b3      	b.n	411e2c <__swbuf_r+0x10>

00411ec4 <_wcrtomb_r>:
  411ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  411ec8:	4605      	mov	r5, r0
  411eca:	b086      	sub	sp, #24
  411ecc:	461e      	mov	r6, r3
  411ece:	460c      	mov	r4, r1
  411ed0:	b1a1      	cbz	r1, 411efc <_wcrtomb_r+0x38>
  411ed2:	4b10      	ldr	r3, [pc, #64]	; (411f14 <_wcrtomb_r+0x50>)
  411ed4:	4617      	mov	r7, r2
  411ed6:	f8d3 8000 	ldr.w	r8, [r3]
  411eda:	f7fe feb9 	bl	410c50 <__locale_charset>
  411ede:	9600      	str	r6, [sp, #0]
  411ee0:	4603      	mov	r3, r0
  411ee2:	4621      	mov	r1, r4
  411ee4:	4628      	mov	r0, r5
  411ee6:	463a      	mov	r2, r7
  411ee8:	47c0      	blx	r8
  411eea:	1c43      	adds	r3, r0, #1
  411eec:	d103      	bne.n	411ef6 <_wcrtomb_r+0x32>
  411eee:	2200      	movs	r2, #0
  411ef0:	238a      	movs	r3, #138	; 0x8a
  411ef2:	6032      	str	r2, [r6, #0]
  411ef4:	602b      	str	r3, [r5, #0]
  411ef6:	b006      	add	sp, #24
  411ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  411efc:	4b05      	ldr	r3, [pc, #20]	; (411f14 <_wcrtomb_r+0x50>)
  411efe:	681f      	ldr	r7, [r3, #0]
  411f00:	f7fe fea6 	bl	410c50 <__locale_charset>
  411f04:	9600      	str	r6, [sp, #0]
  411f06:	4603      	mov	r3, r0
  411f08:	4622      	mov	r2, r4
  411f0a:	4628      	mov	r0, r5
  411f0c:	a903      	add	r1, sp, #12
  411f0e:	47b8      	blx	r7
  411f10:	e7eb      	b.n	411eea <_wcrtomb_r+0x26>
  411f12:	bf00      	nop
  411f14:	2040094c 	.word	0x2040094c

00411f18 <__ascii_wctomb>:
  411f18:	b119      	cbz	r1, 411f22 <__ascii_wctomb+0xa>
  411f1a:	2aff      	cmp	r2, #255	; 0xff
  411f1c:	d803      	bhi.n	411f26 <__ascii_wctomb+0xe>
  411f1e:	700a      	strb	r2, [r1, #0]
  411f20:	2101      	movs	r1, #1
  411f22:	4608      	mov	r0, r1
  411f24:	4770      	bx	lr
  411f26:	238a      	movs	r3, #138	; 0x8a
  411f28:	f04f 31ff 	mov.w	r1, #4294967295
  411f2c:	6003      	str	r3, [r0, #0]
  411f2e:	e7f8      	b.n	411f22 <__ascii_wctomb+0xa>

00411f30 <_write_r>:
  411f30:	b570      	push	{r4, r5, r6, lr}
  411f32:	4c08      	ldr	r4, [pc, #32]	; (411f54 <_write_r+0x24>)
  411f34:	2500      	movs	r5, #0
  411f36:	4606      	mov	r6, r0
  411f38:	4608      	mov	r0, r1
  411f3a:	4611      	mov	r1, r2
  411f3c:	461a      	mov	r2, r3
  411f3e:	6025      	str	r5, [r4, #0]
  411f40:	f7f1 fbd6 	bl	4036f0 <_write>
  411f44:	1c43      	adds	r3, r0, #1
  411f46:	d000      	beq.n	411f4a <_write_r+0x1a>
  411f48:	bd70      	pop	{r4, r5, r6, pc}
  411f4a:	6823      	ldr	r3, [r4, #0]
  411f4c:	2b00      	cmp	r3, #0
  411f4e:	d0fb      	beq.n	411f48 <_write_r+0x18>
  411f50:	6033      	str	r3, [r6, #0]
  411f52:	bd70      	pop	{r4, r5, r6, pc}
  411f54:	2040c6a4 	.word	0x2040c6a4

00411f58 <__register_exitproc>:
  411f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  411f5c:	4c26      	ldr	r4, [pc, #152]	; (411ff8 <__register_exitproc+0xa0>)
  411f5e:	4606      	mov	r6, r0
  411f60:	4688      	mov	r8, r1
  411f62:	4691      	mov	r9, r2
  411f64:	6825      	ldr	r5, [r4, #0]
  411f66:	469a      	mov	sl, r3
  411f68:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  411f6c:	2c00      	cmp	r4, #0
  411f6e:	d03a      	beq.n	411fe6 <__register_exitproc+0x8e>
  411f70:	6860      	ldr	r0, [r4, #4]
  411f72:	281f      	cmp	r0, #31
  411f74:	dc19      	bgt.n	411faa <__register_exitproc+0x52>
  411f76:	1c41      	adds	r1, r0, #1
  411f78:	b186      	cbz	r6, 411f9c <__register_exitproc+0x44>
  411f7a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  411f7e:	2201      	movs	r2, #1
  411f80:	2e02      	cmp	r6, #2
  411f82:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  411f86:	fa02 f200 	lsl.w	r2, r2, r0
  411f8a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  411f8e:	ea43 0302 	orr.w	r3, r3, r2
  411f92:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  411f96:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  411f9a:	d01e      	beq.n	411fda <__register_exitproc+0x82>
  411f9c:	1c83      	adds	r3, r0, #2
  411f9e:	6061      	str	r1, [r4, #4]
  411fa0:	2000      	movs	r0, #0
  411fa2:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  411fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411faa:	4b14      	ldr	r3, [pc, #80]	; (411ffc <__register_exitproc+0xa4>)
  411fac:	b303      	cbz	r3, 411ff0 <__register_exitproc+0x98>
  411fae:	f44f 70c8 	mov.w	r0, #400	; 0x190
  411fb2:	f7f8 fe5d 	bl	40ac70 <malloc>
  411fb6:	4604      	mov	r4, r0
  411fb8:	b1d0      	cbz	r0, 411ff0 <__register_exitproc+0x98>
  411fba:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  411fbe:	2700      	movs	r7, #0
  411fc0:	2101      	movs	r1, #1
  411fc2:	6003      	str	r3, [r0, #0]
  411fc4:	4638      	mov	r0, r7
  411fc6:	6067      	str	r7, [r4, #4]
  411fc8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  411fcc:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  411fd0:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  411fd4:	2e00      	cmp	r6, #0
  411fd6:	d0e1      	beq.n	411f9c <__register_exitproc+0x44>
  411fd8:	e7cf      	b.n	411f7a <__register_exitproc+0x22>
  411fda:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  411fde:	431a      	orrs	r2, r3
  411fe0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  411fe4:	e7da      	b.n	411f9c <__register_exitproc+0x44>
  411fe6:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  411fea:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  411fee:	e7bf      	b.n	411f70 <__register_exitproc+0x18>
  411ff0:	f04f 30ff 	mov.w	r0, #4294967295
  411ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  411ff8:	00413564 	.word	0x00413564
  411ffc:	0040ac71 	.word	0x0040ac71

00412000 <_calloc_r>:
  412000:	b510      	push	{r4, lr}
  412002:	fb02 f101 	mul.w	r1, r2, r1
  412006:	f7f8 fe3b 	bl	40ac80 <_malloc_r>
  41200a:	4604      	mov	r4, r0
  41200c:	b168      	cbz	r0, 41202a <_calloc_r+0x2a>
  41200e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412012:	f022 0203 	bic.w	r2, r2, #3
  412016:	3a04      	subs	r2, #4
  412018:	2a24      	cmp	r2, #36	; 0x24
  41201a:	d814      	bhi.n	412046 <_calloc_r+0x46>
  41201c:	2a13      	cmp	r2, #19
  41201e:	d806      	bhi.n	41202e <_calloc_r+0x2e>
  412020:	4603      	mov	r3, r0
  412022:	2200      	movs	r2, #0
  412024:	601a      	str	r2, [r3, #0]
  412026:	605a      	str	r2, [r3, #4]
  412028:	609a      	str	r2, [r3, #8]
  41202a:	4620      	mov	r0, r4
  41202c:	bd10      	pop	{r4, pc}
  41202e:	2100      	movs	r1, #0
  412030:	2a1b      	cmp	r2, #27
  412032:	6001      	str	r1, [r0, #0]
  412034:	6041      	str	r1, [r0, #4]
  412036:	d90b      	bls.n	412050 <_calloc_r+0x50>
  412038:	2a24      	cmp	r2, #36	; 0x24
  41203a:	6081      	str	r1, [r0, #8]
  41203c:	60c1      	str	r1, [r0, #12]
  41203e:	d00a      	beq.n	412056 <_calloc_r+0x56>
  412040:	f100 0310 	add.w	r3, r0, #16
  412044:	e7ed      	b.n	412022 <_calloc_r+0x22>
  412046:	2100      	movs	r1, #0
  412048:	f7f9 f960 	bl	40b30c <memset>
  41204c:	4620      	mov	r0, r4
  41204e:	bd10      	pop	{r4, pc}
  412050:	f100 0308 	add.w	r3, r0, #8
  412054:	e7e5      	b.n	412022 <_calloc_r+0x22>
  412056:	6101      	str	r1, [r0, #16]
  412058:	f100 0318 	add.w	r3, r0, #24
  41205c:	6141      	str	r1, [r0, #20]
  41205e:	e7e0      	b.n	412022 <_calloc_r+0x22>

00412060 <_close_r>:
  412060:	b538      	push	{r3, r4, r5, lr}
  412062:	2300      	movs	r3, #0
  412064:	4c06      	ldr	r4, [pc, #24]	; (412080 <_close_r+0x20>)
  412066:	4605      	mov	r5, r0
  412068:	4608      	mov	r0, r1
  41206a:	6023      	str	r3, [r4, #0]
  41206c:	f7f1 fb3c 	bl	4036e8 <_close>
  412070:	1c43      	adds	r3, r0, #1
  412072:	d000      	beq.n	412076 <_close_r+0x16>
  412074:	bd38      	pop	{r3, r4, r5, pc}
  412076:	6823      	ldr	r3, [r4, #0]
  412078:	2b00      	cmp	r3, #0
  41207a:	d0fb      	beq.n	412074 <_close_r+0x14>
  41207c:	602b      	str	r3, [r5, #0]
  41207e:	bd38      	pop	{r3, r4, r5, pc}
  412080:	2040c6a4 	.word	0x2040c6a4

00412084 <_fclose_r>:
  412084:	2900      	cmp	r1, #0
  412086:	d03d      	beq.n	412104 <_fclose_r+0x80>
  412088:	b570      	push	{r4, r5, r6, lr}
  41208a:	4605      	mov	r5, r0
  41208c:	460c      	mov	r4, r1
  41208e:	b108      	cbz	r0, 412094 <_fclose_r+0x10>
  412090:	6b83      	ldr	r3, [r0, #56]	; 0x38
  412092:	b37b      	cbz	r3, 4120f4 <_fclose_r+0x70>
  412094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  412098:	b90b      	cbnz	r3, 41209e <_fclose_r+0x1a>
  41209a:	2000      	movs	r0, #0
  41209c:	bd70      	pop	{r4, r5, r6, pc}
  41209e:	4628      	mov	r0, r5
  4120a0:	4621      	mov	r1, r4
  4120a2:	f7fd fd91 	bl	40fbc8 <__sflush_r>
  4120a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4120a8:	4606      	mov	r6, r0
  4120aa:	b133      	cbz	r3, 4120ba <_fclose_r+0x36>
  4120ac:	4628      	mov	r0, r5
  4120ae:	69e1      	ldr	r1, [r4, #28]
  4120b0:	4798      	blx	r3
  4120b2:	2800      	cmp	r0, #0
  4120b4:	bfb8      	it	lt
  4120b6:	f04f 36ff 	movlt.w	r6, #4294967295
  4120ba:	89a3      	ldrh	r3, [r4, #12]
  4120bc:	061b      	lsls	r3, r3, #24
  4120be:	d41c      	bmi.n	4120fa <_fclose_r+0x76>
  4120c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4120c2:	b141      	cbz	r1, 4120d6 <_fclose_r+0x52>
  4120c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4120c8:	4299      	cmp	r1, r3
  4120ca:	d002      	beq.n	4120d2 <_fclose_r+0x4e>
  4120cc:	4628      	mov	r0, r5
  4120ce:	f7fd ff91 	bl	40fff4 <_free_r>
  4120d2:	2300      	movs	r3, #0
  4120d4:	6323      	str	r3, [r4, #48]	; 0x30
  4120d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4120d8:	b121      	cbz	r1, 4120e4 <_fclose_r+0x60>
  4120da:	4628      	mov	r0, r5
  4120dc:	f7fd ff8a 	bl	40fff4 <_free_r>
  4120e0:	2300      	movs	r3, #0
  4120e2:	6463      	str	r3, [r4, #68]	; 0x44
  4120e4:	f7fd feb4 	bl	40fe50 <__sfp_lock_acquire>
  4120e8:	2300      	movs	r3, #0
  4120ea:	81a3      	strh	r3, [r4, #12]
  4120ec:	f7fd feb2 	bl	40fe54 <__sfp_lock_release>
  4120f0:	4630      	mov	r0, r6
  4120f2:	bd70      	pop	{r4, r5, r6, pc}
  4120f4:	f7fd fea6 	bl	40fe44 <__sinit>
  4120f8:	e7cc      	b.n	412094 <_fclose_r+0x10>
  4120fa:	4628      	mov	r0, r5
  4120fc:	6921      	ldr	r1, [r4, #16]
  4120fe:	f7fd ff79 	bl	40fff4 <_free_r>
  412102:	e7dd      	b.n	4120c0 <_fclose_r+0x3c>
  412104:	2000      	movs	r0, #0
  412106:	4770      	bx	lr

00412108 <_fstat_r>:
  412108:	b538      	push	{r3, r4, r5, lr}
  41210a:	2300      	movs	r3, #0
  41210c:	4c07      	ldr	r4, [pc, #28]	; (41212c <_fstat_r+0x24>)
  41210e:	4605      	mov	r5, r0
  412110:	4608      	mov	r0, r1
  412112:	4611      	mov	r1, r2
  412114:	6023      	str	r3, [r4, #0]
  412116:	f7f1 faf3 	bl	403700 <_fstat>
  41211a:	1c43      	adds	r3, r0, #1
  41211c:	d000      	beq.n	412120 <_fstat_r+0x18>
  41211e:	bd38      	pop	{r3, r4, r5, pc}
  412120:	6823      	ldr	r3, [r4, #0]
  412122:	2b00      	cmp	r3, #0
  412124:	d0fb      	beq.n	41211e <_fstat_r+0x16>
  412126:	602b      	str	r3, [r5, #0]
  412128:	bd38      	pop	{r3, r4, r5, pc}
  41212a:	bf00      	nop
  41212c:	2040c6a4 	.word	0x2040c6a4

00412130 <_isatty_r>:
  412130:	b538      	push	{r3, r4, r5, lr}
  412132:	2300      	movs	r3, #0
  412134:	4c06      	ldr	r4, [pc, #24]	; (412150 <_isatty_r+0x20>)
  412136:	4605      	mov	r5, r0
  412138:	4608      	mov	r0, r1
  41213a:	6023      	str	r3, [r4, #0]
  41213c:	f7f1 fae6 	bl	40370c <_isatty>
  412140:	1c43      	adds	r3, r0, #1
  412142:	d000      	beq.n	412146 <_isatty_r+0x16>
  412144:	bd38      	pop	{r3, r4, r5, pc}
  412146:	6823      	ldr	r3, [r4, #0]
  412148:	2b00      	cmp	r3, #0
  41214a:	d0fb      	beq.n	412144 <_isatty_r+0x14>
  41214c:	602b      	str	r3, [r5, #0]
  41214e:	bd38      	pop	{r3, r4, r5, pc}
  412150:	2040c6a4 	.word	0x2040c6a4

00412154 <_lseek_r>:
  412154:	b570      	push	{r4, r5, r6, lr}
  412156:	4c08      	ldr	r4, [pc, #32]	; (412178 <_lseek_r+0x24>)
  412158:	2500      	movs	r5, #0
  41215a:	4606      	mov	r6, r0
  41215c:	4608      	mov	r0, r1
  41215e:	4611      	mov	r1, r2
  412160:	461a      	mov	r2, r3
  412162:	6025      	str	r5, [r4, #0]
  412164:	f7f1 fad4 	bl	403710 <_lseek>
  412168:	1c43      	adds	r3, r0, #1
  41216a:	d000      	beq.n	41216e <_lseek_r+0x1a>
  41216c:	bd70      	pop	{r4, r5, r6, pc}
  41216e:	6823      	ldr	r3, [r4, #0]
  412170:	2b00      	cmp	r3, #0
  412172:	d0fb      	beq.n	41216c <_lseek_r+0x18>
  412174:	6033      	str	r3, [r6, #0]
  412176:	bd70      	pop	{r4, r5, r6, pc}
  412178:	2040c6a4 	.word	0x2040c6a4

0041217c <_read_r>:
  41217c:	b570      	push	{r4, r5, r6, lr}
  41217e:	4c08      	ldr	r4, [pc, #32]	; (4121a0 <_read_r+0x24>)
  412180:	2500      	movs	r5, #0
  412182:	4606      	mov	r6, r0
  412184:	4608      	mov	r0, r1
  412186:	4611      	mov	r1, r2
  412188:	461a      	mov	r2, r3
  41218a:	6025      	str	r5, [r4, #0]
  41218c:	f7f1 fab4 	bl	4036f8 <_read>
  412190:	1c43      	adds	r3, r0, #1
  412192:	d000      	beq.n	412196 <_read_r+0x1a>
  412194:	bd70      	pop	{r4, r5, r6, pc}
  412196:	6823      	ldr	r3, [r4, #0]
  412198:	2b00      	cmp	r3, #0
  41219a:	d0fb      	beq.n	412194 <_read_r+0x18>
  41219c:	6033      	str	r3, [r6, #0]
  41219e:	bd70      	pop	{r4, r5, r6, pc}
  4121a0:	2040c6a4 	.word	0x2040c6a4

004121a4 <__aeabi_d2uiz>:
  4121a4:	004a      	lsls	r2, r1, #1
  4121a6:	d211      	bcs.n	4121cc <__aeabi_d2uiz+0x28>
  4121a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4121ac:	d211      	bcs.n	4121d2 <__aeabi_d2uiz+0x2e>
  4121ae:	d50d      	bpl.n	4121cc <__aeabi_d2uiz+0x28>
  4121b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4121b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4121b8:	d40e      	bmi.n	4121d8 <__aeabi_d2uiz+0x34>
  4121ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4121be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4121c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4121c6:	fa23 f002 	lsr.w	r0, r3, r2
  4121ca:	4770      	bx	lr
  4121cc:	f04f 0000 	mov.w	r0, #0
  4121d0:	4770      	bx	lr
  4121d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4121d6:	d102      	bne.n	4121de <__aeabi_d2uiz+0x3a>
  4121d8:	f04f 30ff 	mov.w	r0, #4294967295
  4121dc:	4770      	bx	lr
  4121de:	f04f 0000 	mov.w	r0, #0
  4121e2:	4770      	bx	lr

004121e4 <__aeabi_uldivmod>:
  4121e4:	b953      	cbnz	r3, 4121fc <__aeabi_uldivmod+0x18>
  4121e6:	b94a      	cbnz	r2, 4121fc <__aeabi_uldivmod+0x18>
  4121e8:	2900      	cmp	r1, #0
  4121ea:	bf08      	it	eq
  4121ec:	2800      	cmpeq	r0, #0
  4121ee:	bf1c      	itt	ne
  4121f0:	f04f 31ff 	movne.w	r1, #4294967295
  4121f4:	f04f 30ff 	movne.w	r0, #4294967295
  4121f8:	f000 b83c 	b.w	412274 <__aeabi_idiv0>
  4121fc:	b082      	sub	sp, #8
  4121fe:	46ec      	mov	ip, sp
  412200:	e92d 5000 	stmdb	sp!, {ip, lr}
  412204:	f000 f81e 	bl	412244 <__gnu_uldivmod_helper>
  412208:	f8dd e004 	ldr.w	lr, [sp, #4]
  41220c:	b002      	add	sp, #8
  41220e:	bc0c      	pop	{r2, r3}
  412210:	4770      	bx	lr
  412212:	bf00      	nop

00412214 <__gnu_ldivmod_helper>:
  412214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412218:	4690      	mov	r8, r2
  41221a:	4606      	mov	r6, r0
  41221c:	460f      	mov	r7, r1
  41221e:	461d      	mov	r5, r3
  412220:	9c06      	ldr	r4, [sp, #24]
  412222:	f000 f829 	bl	412278 <__divdi3>
  412226:	fb08 fc01 	mul.w	ip, r8, r1
  41222a:	4686      	mov	lr, r0
  41222c:	fba8 2300 	umull	r2, r3, r8, r0
  412230:	fb00 c505 	mla	r5, r0, r5, ip
  412234:	1ab2      	subs	r2, r6, r2
  412236:	442b      	add	r3, r5
  412238:	eb67 0303 	sbc.w	r3, r7, r3
  41223c:	e9c4 2300 	strd	r2, r3, [r4]
  412240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00412244 <__gnu_uldivmod_helper>:
  412244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412248:	461d      	mov	r5, r3
  41224a:	4617      	mov	r7, r2
  41224c:	4680      	mov	r8, r0
  41224e:	4689      	mov	r9, r1
  412250:	9e08      	ldr	r6, [sp, #32]
  412252:	f000 f953 	bl	4124fc <__udivdi3>
  412256:	fb00 f305 	mul.w	r3, r0, r5
  41225a:	fba0 4507 	umull	r4, r5, r0, r7
  41225e:	fb07 3701 	mla	r7, r7, r1, r3
  412262:	ebb8 0404 	subs.w	r4, r8, r4
  412266:	443d      	add	r5, r7
  412268:	eb69 0505 	sbc.w	r5, r9, r5
  41226c:	e9c6 4500 	strd	r4, r5, [r6]
  412270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00412274 <__aeabi_idiv0>:
  412274:	4770      	bx	lr
  412276:	bf00      	nop

00412278 <__divdi3>:
  412278:	2900      	cmp	r1, #0
  41227a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41227e:	f2c0 80a2 	blt.w	4123c6 <__divdi3+0x14e>
  412282:	2600      	movs	r6, #0
  412284:	2b00      	cmp	r3, #0
  412286:	f2c0 8098 	blt.w	4123ba <__divdi3+0x142>
  41228a:	468c      	mov	ip, r1
  41228c:	4690      	mov	r8, r2
  41228e:	469e      	mov	lr, r3
  412290:	4615      	mov	r5, r2
  412292:	4604      	mov	r4, r0
  412294:	460f      	mov	r7, r1
  412296:	bbcb      	cbnz	r3, 41230c <__divdi3+0x94>
  412298:	428a      	cmp	r2, r1
  41229a:	d956      	bls.n	41234a <__divdi3+0xd2>
  41229c:	fab2 f382 	clz	r3, r2
  4122a0:	b13b      	cbz	r3, 4122b2 <__divdi3+0x3a>
  4122a2:	f1c3 0220 	rsb	r2, r3, #32
  4122a6:	409f      	lsls	r7, r3
  4122a8:	409d      	lsls	r5, r3
  4122aa:	409c      	lsls	r4, r3
  4122ac:	fa20 f202 	lsr.w	r2, r0, r2
  4122b0:	4317      	orrs	r7, r2
  4122b2:	0c28      	lsrs	r0, r5, #16
  4122b4:	0c22      	lsrs	r2, r4, #16
  4122b6:	fa1f fe85 	uxth.w	lr, r5
  4122ba:	fbb7 f1f0 	udiv	r1, r7, r0
  4122be:	fb00 7711 	mls	r7, r0, r1, r7
  4122c2:	fb0e f301 	mul.w	r3, lr, r1
  4122c6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  4122ca:	42bb      	cmp	r3, r7
  4122cc:	d907      	bls.n	4122de <__divdi3+0x66>
  4122ce:	197f      	adds	r7, r7, r5
  4122d0:	f080 8101 	bcs.w	4124d6 <__divdi3+0x25e>
  4122d4:	42bb      	cmp	r3, r7
  4122d6:	f240 80fe 	bls.w	4124d6 <__divdi3+0x25e>
  4122da:	3902      	subs	r1, #2
  4122dc:	442f      	add	r7, r5
  4122de:	1aff      	subs	r7, r7, r3
  4122e0:	b2a4      	uxth	r4, r4
  4122e2:	fbb7 f3f0 	udiv	r3, r7, r0
  4122e6:	fb00 7713 	mls	r7, r0, r3, r7
  4122ea:	fb0e fe03 	mul.w	lr, lr, r3
  4122ee:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4122f2:	45be      	cmp	lr, r7
  4122f4:	d906      	bls.n	412304 <__divdi3+0x8c>
  4122f6:	197f      	adds	r7, r7, r5
  4122f8:	f080 80eb 	bcs.w	4124d2 <__divdi3+0x25a>
  4122fc:	45be      	cmp	lr, r7
  4122fe:	f240 80e8 	bls.w	4124d2 <__divdi3+0x25a>
  412302:	3b02      	subs	r3, #2
  412304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  412308:	2200      	movs	r2, #0
  41230a:	e003      	b.n	412314 <__divdi3+0x9c>
  41230c:	428b      	cmp	r3, r1
  41230e:	d90f      	bls.n	412330 <__divdi3+0xb8>
  412310:	2200      	movs	r2, #0
  412312:	4613      	mov	r3, r2
  412314:	1c34      	adds	r4, r6, #0
  412316:	f04f 0500 	mov.w	r5, #0
  41231a:	bf18      	it	ne
  41231c:	2401      	movne	r4, #1
  41231e:	4260      	negs	r0, r4
  412320:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  412324:	4058      	eors	r0, r3
  412326:	4051      	eors	r1, r2
  412328:	1900      	adds	r0, r0, r4
  41232a:	4169      	adcs	r1, r5
  41232c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  412330:	fab3 f283 	clz	r2, r3
  412334:	2a00      	cmp	r2, #0
  412336:	f040 8083 	bne.w	412440 <__divdi3+0x1c8>
  41233a:	4580      	cmp	r8, r0
  41233c:	f240 80cd 	bls.w	4124da <__divdi3+0x262>
  412340:	428b      	cmp	r3, r1
  412342:	f0c0 80ca 	bcc.w	4124da <__divdi3+0x262>
  412346:	4613      	mov	r3, r2
  412348:	e7e4      	b.n	412314 <__divdi3+0x9c>
  41234a:	b912      	cbnz	r2, 412352 <__divdi3+0xda>
  41234c:	2301      	movs	r3, #1
  41234e:	fbb3 f5f2 	udiv	r5, r3, r2
  412352:	fab5 f285 	clz	r2, r5
  412356:	2a00      	cmp	r2, #0
  412358:	d13b      	bne.n	4123d2 <__divdi3+0x15a>
  41235a:	1b78      	subs	r0, r7, r5
  41235c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412360:	fa1f fc85 	uxth.w	ip, r5
  412364:	2201      	movs	r2, #1
  412366:	0c21      	lsrs	r1, r4, #16
  412368:	fbb0 f8fe 	udiv	r8, r0, lr
  41236c:	fb0e 0018 	mls	r0, lr, r8, r0
  412370:	fb0c f308 	mul.w	r3, ip, r8
  412374:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  412378:	42bb      	cmp	r3, r7
  41237a:	d908      	bls.n	41238e <__divdi3+0x116>
  41237c:	197f      	adds	r7, r7, r5
  41237e:	f080 80b0 	bcs.w	4124e2 <__divdi3+0x26a>
  412382:	42bb      	cmp	r3, r7
  412384:	f240 80ad 	bls.w	4124e2 <__divdi3+0x26a>
  412388:	f1a8 0802 	sub.w	r8, r8, #2
  41238c:	442f      	add	r7, r5
  41238e:	1aff      	subs	r7, r7, r3
  412390:	b2a4      	uxth	r4, r4
  412392:	fbb7 f3fe 	udiv	r3, r7, lr
  412396:	fb0e 7713 	mls	r7, lr, r3, r7
  41239a:	fb0c fc03 	mul.w	ip, ip, r3
  41239e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  4123a2:	45bc      	cmp	ip, r7
  4123a4:	d906      	bls.n	4123b4 <__divdi3+0x13c>
  4123a6:	197f      	adds	r7, r7, r5
  4123a8:	f080 8099 	bcs.w	4124de <__divdi3+0x266>
  4123ac:	45bc      	cmp	ip, r7
  4123ae:	f240 8096 	bls.w	4124de <__divdi3+0x266>
  4123b2:	3b02      	subs	r3, #2
  4123b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4123b8:	e7ac      	b.n	412314 <__divdi3+0x9c>
  4123ba:	4252      	negs	r2, r2
  4123bc:	ea6f 0606 	mvn.w	r6, r6
  4123c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4123c4:	e761      	b.n	41228a <__divdi3+0x12>
  4123c6:	4240      	negs	r0, r0
  4123c8:	f04f 36ff 	mov.w	r6, #4294967295
  4123cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4123d0:	e758      	b.n	412284 <__divdi3+0xc>
  4123d2:	4095      	lsls	r5, r2
  4123d4:	f1c2 0120 	rsb	r1, r2, #32
  4123d8:	fa07 f302 	lsl.w	r3, r7, r2
  4123dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  4123e0:	40cf      	lsrs	r7, r1
  4123e2:	fa24 f101 	lsr.w	r1, r4, r1
  4123e6:	4094      	lsls	r4, r2
  4123e8:	fa1f fc85 	uxth.w	ip, r5
  4123ec:	4319      	orrs	r1, r3
  4123ee:	fbb7 f2fe 	udiv	r2, r7, lr
  4123f2:	ea4f 4811 	mov.w	r8, r1, lsr #16
  4123f6:	fb0e 7712 	mls	r7, lr, r2, r7
  4123fa:	fb0c f302 	mul.w	r3, ip, r2
  4123fe:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  412402:	42bb      	cmp	r3, r7
  412404:	d905      	bls.n	412412 <__divdi3+0x19a>
  412406:	197f      	adds	r7, r7, r5
  412408:	d271      	bcs.n	4124ee <__divdi3+0x276>
  41240a:	42bb      	cmp	r3, r7
  41240c:	d96f      	bls.n	4124ee <__divdi3+0x276>
  41240e:	3a02      	subs	r2, #2
  412410:	442f      	add	r7, r5
  412412:	1aff      	subs	r7, r7, r3
  412414:	b289      	uxth	r1, r1
  412416:	fbb7 f8fe 	udiv	r8, r7, lr
  41241a:	fb0e 7718 	mls	r7, lr, r8, r7
  41241e:	fb0c f008 	mul.w	r0, ip, r8
  412422:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  412426:	4298      	cmp	r0, r3
  412428:	d906      	bls.n	412438 <__divdi3+0x1c0>
  41242a:	195b      	adds	r3, r3, r5
  41242c:	d261      	bcs.n	4124f2 <__divdi3+0x27a>
  41242e:	4298      	cmp	r0, r3
  412430:	d95f      	bls.n	4124f2 <__divdi3+0x27a>
  412432:	f1a8 0802 	sub.w	r8, r8, #2
  412436:	442b      	add	r3, r5
  412438:	1a18      	subs	r0, r3, r0
  41243a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  41243e:	e792      	b.n	412366 <__divdi3+0xee>
  412440:	f1c2 0720 	rsb	r7, r2, #32
  412444:	fa03 fe02 	lsl.w	lr, r3, r2
  412448:	fa08 f502 	lsl.w	r5, r8, r2
  41244c:	4091      	lsls	r1, r2
  41244e:	fa28 f307 	lsr.w	r3, r8, r7
  412452:	fa2c fc07 	lsr.w	ip, ip, r7
  412456:	40f8      	lsrs	r0, r7
  412458:	ea43 0e0e 	orr.w	lr, r3, lr
  41245c:	4308      	orrs	r0, r1
  41245e:	ea4f 481e 	mov.w	r8, lr, lsr #16
  412462:	0c07      	lsrs	r7, r0, #16
  412464:	fa1f fa8e 	uxth.w	sl, lr
  412468:	fbbc f9f8 	udiv	r9, ip, r8
  41246c:	fb08 cc19 	mls	ip, r8, r9, ip
  412470:	fb0a f109 	mul.w	r1, sl, r9
  412474:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  412478:	4561      	cmp	r1, ip
  41247a:	d907      	bls.n	41248c <__divdi3+0x214>
  41247c:	eb1c 0c0e 	adds.w	ip, ip, lr
  412480:	d232      	bcs.n	4124e8 <__divdi3+0x270>
  412482:	4561      	cmp	r1, ip
  412484:	d930      	bls.n	4124e8 <__divdi3+0x270>
  412486:	f1a9 0902 	sub.w	r9, r9, #2
  41248a:	44f4      	add	ip, lr
  41248c:	ebc1 0c0c 	rsb	ip, r1, ip
  412490:	b280      	uxth	r0, r0
  412492:	fbbc f3f8 	udiv	r3, ip, r8
  412496:	fb08 cc13 	mls	ip, r8, r3, ip
  41249a:	fb0a fa03 	mul.w	sl, sl, r3
  41249e:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  4124a2:	458a      	cmp	sl, r1
  4124a4:	d906      	bls.n	4124b4 <__divdi3+0x23c>
  4124a6:	eb11 010e 	adds.w	r1, r1, lr
  4124aa:	d225      	bcs.n	4124f8 <__divdi3+0x280>
  4124ac:	458a      	cmp	sl, r1
  4124ae:	d923      	bls.n	4124f8 <__divdi3+0x280>
  4124b0:	3b02      	subs	r3, #2
  4124b2:	4471      	add	r1, lr
  4124b4:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  4124b8:	ebca 0101 	rsb	r1, sl, r1
  4124bc:	fba3 8905 	umull	r8, r9, r3, r5
  4124c0:	4549      	cmp	r1, r9
  4124c2:	d303      	bcc.n	4124cc <__divdi3+0x254>
  4124c4:	d103      	bne.n	4124ce <__divdi3+0x256>
  4124c6:	4094      	lsls	r4, r2
  4124c8:	4544      	cmp	r4, r8
  4124ca:	d200      	bcs.n	4124ce <__divdi3+0x256>
  4124cc:	3b01      	subs	r3, #1
  4124ce:	2200      	movs	r2, #0
  4124d0:	e720      	b.n	412314 <__divdi3+0x9c>
  4124d2:	3b01      	subs	r3, #1
  4124d4:	e716      	b.n	412304 <__divdi3+0x8c>
  4124d6:	3901      	subs	r1, #1
  4124d8:	e701      	b.n	4122de <__divdi3+0x66>
  4124da:	2301      	movs	r3, #1
  4124dc:	e71a      	b.n	412314 <__divdi3+0x9c>
  4124de:	3b01      	subs	r3, #1
  4124e0:	e768      	b.n	4123b4 <__divdi3+0x13c>
  4124e2:	f108 38ff 	add.w	r8, r8, #4294967295
  4124e6:	e752      	b.n	41238e <__divdi3+0x116>
  4124e8:	f109 39ff 	add.w	r9, r9, #4294967295
  4124ec:	e7ce      	b.n	41248c <__divdi3+0x214>
  4124ee:	3a01      	subs	r2, #1
  4124f0:	e78f      	b.n	412412 <__divdi3+0x19a>
  4124f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4124f6:	e79f      	b.n	412438 <__divdi3+0x1c0>
  4124f8:	3b01      	subs	r3, #1
  4124fa:	e7db      	b.n	4124b4 <__divdi3+0x23c>

004124fc <__udivdi3>:
  4124fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412500:	2b00      	cmp	r3, #0
  412502:	d140      	bne.n	412586 <__udivdi3+0x8a>
  412504:	428a      	cmp	r2, r1
  412506:	4604      	mov	r4, r0
  412508:	4615      	mov	r5, r2
  41250a:	d94a      	bls.n	4125a2 <__udivdi3+0xa6>
  41250c:	fab2 f382 	clz	r3, r2
  412510:	460f      	mov	r7, r1
  412512:	b14b      	cbz	r3, 412528 <__udivdi3+0x2c>
  412514:	f1c3 0620 	rsb	r6, r3, #32
  412518:	4099      	lsls	r1, r3
  41251a:	fa00 f403 	lsl.w	r4, r0, r3
  41251e:	fa02 f503 	lsl.w	r5, r2, r3
  412522:	40f0      	lsrs	r0, r6
  412524:	ea40 0701 	orr.w	r7, r0, r1
  412528:	0c29      	lsrs	r1, r5, #16
  41252a:	0c26      	lsrs	r6, r4, #16
  41252c:	fa1f fe85 	uxth.w	lr, r5
  412530:	fbb7 f0f1 	udiv	r0, r7, r1
  412534:	fb01 7710 	mls	r7, r1, r0, r7
  412538:	fb0e f200 	mul.w	r2, lr, r0
  41253c:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  412540:	429a      	cmp	r2, r3
  412542:	d907      	bls.n	412554 <__udivdi3+0x58>
  412544:	195b      	adds	r3, r3, r5
  412546:	f080 80ea 	bcs.w	41271e <__udivdi3+0x222>
  41254a:	429a      	cmp	r2, r3
  41254c:	f240 80e7 	bls.w	41271e <__udivdi3+0x222>
  412550:	3802      	subs	r0, #2
  412552:	442b      	add	r3, r5
  412554:	1a9a      	subs	r2, r3, r2
  412556:	b2a4      	uxth	r4, r4
  412558:	fbb2 f3f1 	udiv	r3, r2, r1
  41255c:	fb01 2213 	mls	r2, r1, r3, r2
  412560:	fb0e fe03 	mul.w	lr, lr, r3
  412564:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  412568:	4596      	cmp	lr, r2
  41256a:	d906      	bls.n	41257a <__udivdi3+0x7e>
  41256c:	1952      	adds	r2, r2, r5
  41256e:	f080 80da 	bcs.w	412726 <__udivdi3+0x22a>
  412572:	4596      	cmp	lr, r2
  412574:	f240 80d7 	bls.w	412726 <__udivdi3+0x22a>
  412578:	3b02      	subs	r3, #2
  41257a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  41257e:	2600      	movs	r6, #0
  412580:	4631      	mov	r1, r6
  412582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412586:	428b      	cmp	r3, r1
  412588:	d844      	bhi.n	412614 <__udivdi3+0x118>
  41258a:	fab3 f683 	clz	r6, r3
  41258e:	2e00      	cmp	r6, #0
  412590:	d145      	bne.n	41261e <__udivdi3+0x122>
  412592:	4282      	cmp	r2, r0
  412594:	f240 80bf 	bls.w	412716 <__udivdi3+0x21a>
  412598:	428b      	cmp	r3, r1
  41259a:	f0c0 80bc 	bcc.w	412716 <__udivdi3+0x21a>
  41259e:	4630      	mov	r0, r6
  4125a0:	e7ee      	b.n	412580 <__udivdi3+0x84>
  4125a2:	b912      	cbnz	r2, 4125aa <__udivdi3+0xae>
  4125a4:	2501      	movs	r5, #1
  4125a6:	fbb5 f5f2 	udiv	r5, r5, r2
  4125aa:	fab5 f285 	clz	r2, r5
  4125ae:	2a00      	cmp	r2, #0
  4125b0:	d17b      	bne.n	4126aa <__udivdi3+0x1ae>
  4125b2:	1b4a      	subs	r2, r1, r5
  4125b4:	0c2f      	lsrs	r7, r5, #16
  4125b6:	fa1f fe85 	uxth.w	lr, r5
  4125ba:	2601      	movs	r6, #1
  4125bc:	0c23      	lsrs	r3, r4, #16
  4125be:	fbb2 f0f7 	udiv	r0, r2, r7
  4125c2:	fb07 2210 	mls	r2, r7, r0, r2
  4125c6:	fb0e fc00 	mul.w	ip, lr, r0
  4125ca:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  4125ce:	458c      	cmp	ip, r1
  4125d0:	d907      	bls.n	4125e2 <__udivdi3+0xe6>
  4125d2:	1949      	adds	r1, r1, r5
  4125d4:	f080 80a1 	bcs.w	41271a <__udivdi3+0x21e>
  4125d8:	458c      	cmp	ip, r1
  4125da:	f240 809e 	bls.w	41271a <__udivdi3+0x21e>
  4125de:	3802      	subs	r0, #2
  4125e0:	4429      	add	r1, r5
  4125e2:	ebcc 0101 	rsb	r1, ip, r1
  4125e6:	b2a4      	uxth	r4, r4
  4125e8:	fbb1 f3f7 	udiv	r3, r1, r7
  4125ec:	fb07 1113 	mls	r1, r7, r3, r1
  4125f0:	fb0e fe03 	mul.w	lr, lr, r3
  4125f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4125f8:	45a6      	cmp	lr, r4
  4125fa:	d906      	bls.n	41260a <__udivdi3+0x10e>
  4125fc:	1964      	adds	r4, r4, r5
  4125fe:	f080 8090 	bcs.w	412722 <__udivdi3+0x226>
  412602:	45a6      	cmp	lr, r4
  412604:	f240 808d 	bls.w	412722 <__udivdi3+0x226>
  412608:	3b02      	subs	r3, #2
  41260a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  41260e:	4631      	mov	r1, r6
  412610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412614:	2600      	movs	r6, #0
  412616:	4630      	mov	r0, r6
  412618:	4631      	mov	r1, r6
  41261a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41261e:	f1c6 0520 	rsb	r5, r6, #32
  412622:	40b3      	lsls	r3, r6
  412624:	fa02 f706 	lsl.w	r7, r2, r6
  412628:	fa01 f406 	lsl.w	r4, r1, r6
  41262c:	40ea      	lsrs	r2, r5
  41262e:	40e9      	lsrs	r1, r5
  412630:	fa20 f505 	lsr.w	r5, r0, r5
  412634:	431a      	orrs	r2, r3
  412636:	4325      	orrs	r5, r4
  412638:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  41263c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  412640:	b293      	uxth	r3, r2
  412642:	fbb1 f8fc 	udiv	r8, r1, ip
  412646:	fb0c 1118 	mls	r1, ip, r8, r1
  41264a:	fb03 f408 	mul.w	r4, r3, r8
  41264e:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  412652:	428c      	cmp	r4, r1
  412654:	d906      	bls.n	412664 <__udivdi3+0x168>
  412656:	1889      	adds	r1, r1, r2
  412658:	d269      	bcs.n	41272e <__udivdi3+0x232>
  41265a:	428c      	cmp	r4, r1
  41265c:	d967      	bls.n	41272e <__udivdi3+0x232>
  41265e:	f1a8 0802 	sub.w	r8, r8, #2
  412662:	4411      	add	r1, r2
  412664:	1b09      	subs	r1, r1, r4
  412666:	b2ad      	uxth	r5, r5
  412668:	fbb1 f4fc 	udiv	r4, r1, ip
  41266c:	fb0c 1114 	mls	r1, ip, r4, r1
  412670:	fb03 fe04 	mul.w	lr, r3, r4
  412674:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  412678:	459e      	cmp	lr, r3
  41267a:	d905      	bls.n	412688 <__udivdi3+0x18c>
  41267c:	189b      	adds	r3, r3, r2
  41267e:	d254      	bcs.n	41272a <__udivdi3+0x22e>
  412680:	459e      	cmp	lr, r3
  412682:	d952      	bls.n	41272a <__udivdi3+0x22e>
  412684:	3c02      	subs	r4, #2
  412686:	4413      	add	r3, r2
  412688:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  41268c:	ebce 0303 	rsb	r3, lr, r3
  412690:	fba4 8907 	umull	r8, r9, r4, r7
  412694:	454b      	cmp	r3, r9
  412696:	d303      	bcc.n	4126a0 <__udivdi3+0x1a4>
  412698:	d151      	bne.n	41273e <__udivdi3+0x242>
  41269a:	40b0      	lsls	r0, r6
  41269c:	4540      	cmp	r0, r8
  41269e:	d24e      	bcs.n	41273e <__udivdi3+0x242>
  4126a0:	2600      	movs	r6, #0
  4126a2:	1e60      	subs	r0, r4, #1
  4126a4:	4631      	mov	r1, r6
  4126a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4126aa:	f1c2 0620 	rsb	r6, r2, #32
  4126ae:	4095      	lsls	r5, r2
  4126b0:	fa01 f302 	lsl.w	r3, r1, r2
  4126b4:	fa00 f402 	lsl.w	r4, r0, r2
  4126b8:	0c2f      	lsrs	r7, r5, #16
  4126ba:	40f1      	lsrs	r1, r6
  4126bc:	40f0      	lsrs	r0, r6
  4126be:	fa1f fe85 	uxth.w	lr, r5
  4126c2:	fbb1 f6f7 	udiv	r6, r1, r7
  4126c6:	4318      	orrs	r0, r3
  4126c8:	fb07 1116 	mls	r1, r7, r6, r1
  4126cc:	fb0e f206 	mul.w	r2, lr, r6
  4126d0:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  4126d4:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  4126d8:	429a      	cmp	r2, r3
  4126da:	d905      	bls.n	4126e8 <__udivdi3+0x1ec>
  4126dc:	195b      	adds	r3, r3, r5
  4126de:	d229      	bcs.n	412734 <__udivdi3+0x238>
  4126e0:	429a      	cmp	r2, r3
  4126e2:	d927      	bls.n	412734 <__udivdi3+0x238>
  4126e4:	3e02      	subs	r6, #2
  4126e6:	442b      	add	r3, r5
  4126e8:	1a9b      	subs	r3, r3, r2
  4126ea:	b280      	uxth	r0, r0
  4126ec:	fbb3 fcf7 	udiv	ip, r3, r7
  4126f0:	fb07 331c 	mls	r3, r7, ip, r3
  4126f4:	fb0e f10c 	mul.w	r1, lr, ip
  4126f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  4126fc:	4299      	cmp	r1, r3
  4126fe:	d906      	bls.n	41270e <__udivdi3+0x212>
  412700:	195b      	adds	r3, r3, r5
  412702:	d219      	bcs.n	412738 <__udivdi3+0x23c>
  412704:	4299      	cmp	r1, r3
  412706:	d917      	bls.n	412738 <__udivdi3+0x23c>
  412708:	f1ac 0c02 	sub.w	ip, ip, #2
  41270c:	442b      	add	r3, r5
  41270e:	1a5a      	subs	r2, r3, r1
  412710:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  412714:	e752      	b.n	4125bc <__udivdi3+0xc0>
  412716:	2001      	movs	r0, #1
  412718:	e732      	b.n	412580 <__udivdi3+0x84>
  41271a:	3801      	subs	r0, #1
  41271c:	e761      	b.n	4125e2 <__udivdi3+0xe6>
  41271e:	3801      	subs	r0, #1
  412720:	e718      	b.n	412554 <__udivdi3+0x58>
  412722:	3b01      	subs	r3, #1
  412724:	e771      	b.n	41260a <__udivdi3+0x10e>
  412726:	3b01      	subs	r3, #1
  412728:	e727      	b.n	41257a <__udivdi3+0x7e>
  41272a:	3c01      	subs	r4, #1
  41272c:	e7ac      	b.n	412688 <__udivdi3+0x18c>
  41272e:	f108 38ff 	add.w	r8, r8, #4294967295
  412732:	e797      	b.n	412664 <__udivdi3+0x168>
  412734:	3e01      	subs	r6, #1
  412736:	e7d7      	b.n	4126e8 <__udivdi3+0x1ec>
  412738:	f10c 3cff 	add.w	ip, ip, #4294967295
  41273c:	e7e7      	b.n	41270e <__udivdi3+0x212>
  41273e:	4620      	mov	r0, r4
  412740:	2600      	movs	r6, #0
  412742:	e71d      	b.n	412580 <__udivdi3+0x84>

00412744 <__func__.8182>:
  412744:	7371 6970 645f 7369 6261 656c 0000 0000     qspi_disable....
  412754:	2e2e 732f 6372 412f 4653 732f 6d61 642f     ../src/ASF/sam/d
  412764:	6972 6576 7372 712f 7073 2f69 7371 6970     rivers/qspi/qspi
  412774:	682e 0000 7371 6970 0000 0000 2e2e 732f     .h..qspi....../s
  412784:	6372 412f 4653 732f 6d61 642f 6972 6576     rc/ASF/sam/drive
  412794:	7372 712f 7073 2f69 7371 6970 632e 0000     rs/qspi/qspi.c..
  4127a4:	7562 6666 7265 722e 5f78 6164 6174 735f     buffer.rx_data_s
  4127b4:	7a69 0065 7562 6666 7265 742e 5f78 6164     ize.buffer.tx_da
  4127c4:	6174 735f 7a69 0065 2828 6572 6461 775f     ta_size.((read_w
  4127d4:	6972 6574 3e20 5120 5053 5f49 4d43 5f44     rite > QSPI_CMD_
  4127e4:	4341 4543 5353 2029 2626 2820 6572 6461     ACCESS) && (read
  4127f4:	775f 6972 6574 3c20 203d 5351 4950 575f     _write <= QSPI_W
  412804:	4952 4554 415f 4343 5345 2953 2029 203f     RITE_ACCESS)) ? 
  412814:	7274 6575 203a 6166 736c 0065               true: false.

00412820 <__func__.8348>:
  412820:	7371 6970 725f 6165 0064 0000               qspi_read...

0041282c <__func__.8364>:
  41282c:	7371 6970 775f 6972 6574 0000 4449 454c     qspi_write..IDLE
  41283c:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
  41284c:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
  41285c:	7653 0063 5754 4849 2053 4552 492d 494e     Svc.TWIHS RE-INI
  41286c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  41287c:	5241 4554 0a44 0000 5754 4849 2053 4552     ARTED...TWIHS RE
  41288c:	492d 494e 4954 4c41 5a49 5441 4f49 204e     -INITIALIZATION 
  41289c:	202d 4946 494e 4853 4445 000a 2580 0000     - FINISHED...%..
  4128ac:	00c0 0000 0800 0000 0019 0000 8040 0000     ............@...
  4128bc:	c5d9 c855 454d 4c4c 5441 4f52 394e 3030     ..U.MELLATRON900
  4128cc:	2030 4f42 544f 5320 5145 4555 434e 0a45     0 BOOT SEQUENCE.
  4128dc:	4155 5452 4320 4e4f 4f53 454c 5320 4154     UART CONSOLE STA
  4128ec:	5452 4445 4f20 204e 4155 5452 0a34 6142     RTED ON UART4.Ba
  4128fc:	6475 6152 6574 203a 3639 3030 420a 7469     udRate: 9600.Bit
  41290c:	3a73 3820 4e0a 206f 7473 706f 6220 7469     s: 8.No stop bit
  41291c:	2073 000a 454c 2044 4e49 5449 4149 494c     s ..LED INITIALI
  41292c:	415a 4954 4e4f 2d20 5320 4154 5452 4445     ZATION - STARTED
  41293c:	000a 0000 454c 2044 4e49 5449 4149 494c     ....LED INITIALI
  41294c:	415a 4954 4e4f 2d20 4620 4e49 5349 4548     ZATION - FINISHE
  41295c:	0a44 0000 4157 4354 4448 474f 4920 494e     D...WATCHDOG INI
  41296c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  41297c:	5241 4554 0a44 0000 4157 4354 4448 474f     ARTED...WATCHDOG
  41298c:	4920 494e 4954 4c41 5a49 5441 4f49 204e      INITIALIZATION 
  41299c:	202d 4946 494e 4853 4445 000a 4c47 424f     - FINISHED..GLOB
  4129ac:	4c41 4920 5152 4920 494e 4954 4c41 5a49     AL IRQ INITIALIZ
  4129bc:	5441 4f49 204e 202d 5453 5241 4554 0a44     ATION - STARTED.
  4129cc:	0000 0000 4c47 424f 4c41 4920 5152 4920     ....GLOBAL IRQ I
  4129dc:	494e 4954 4c41 5a49 5441 4f49 204e 202d     NITIALIZATION - 
  4129ec:	4946 494e 4853 4445 000a 0000 4453 4152     FINISHED....SDRA
  4129fc:	204d 4e49 5449 4149 494c 415a 4954 4e4f     M INITIALIZATION
  412a0c:	2d20 5320 4154 5452 4445 000a 4453 4152      - STARTED..SDRA
  412a1c:	204d 4f43 544e 4f52 4c4c 5245 5320 4154     M CONTROLLER STA
  412a2c:	5452 4445 000a 0000 4453 4152 204d 4e49     RTED....SDRAM IN
  412a3c:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  412a4c:	4e49 5349 4548 0a44 0000 0000 5754 4849     INISHED.....TWIH
  412a5c:	2053 4e49 5449 4149 494c 415a 4954 4e4f     S INITIALIZATION
  412a6c:	2d20 5320 4154 5452 4445 000a 5754 4849      - STARTED..TWIH
  412a7c:	2053 4e49 5449 4149 494c 415a 4954 4e4f     S INITIALIZATION
  412a8c:	2d20 4620 4e49 5349 4548 0a44 0000 0000      - FINISHED.....
  412a9c:	4553 5652 204f 5244 5649 5245 4920 494e     SERVO DRIVER INI
  412aac:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  412abc:	5241 4554 0a44 0000 4553 5652 204f 5244     ARTED...SERVO DR
  412acc:	5649 5245 4920 494e 4954 4c41 5a49 5441     IVER INITIALIZAT
  412adc:	4f49 204e 202d 4946 494e 4853 4445 000a     ION - FINISHED..
  412aec:	4143 454d 4152 4920 494e 4954 4c41 5a49     CAMERA INITIALIZ
  412afc:	5441 4f49 204e 202d 5453 5241 4554 0a44     ATION - STARTED.
  412b0c:	0000 0000 4143 454d 4152 4920 494e 4954     ....CAMERA INITI
  412b1c:	4c41 5a49 5441 4f49 204e 202d 4946 494e     ALIZATION - FINI
  412b2c:	4853 4445 000a 0000 5351 4950 4920 494e     SHED....QSPI INI
  412b3c:	4954 4c41 5a49 5441 4f49 204e 202d 5453     TIALIZATION - ST
  412b4c:	5241 4554 0a44 0000 5351 4950 4920 494e     ARTED...QSPI INI
  412b5c:	4954 4c41 5a49 5441 4f49 204e 202d 4946     TIALIZATION - FI
  412b6c:	494e 4853 4445 000a 5744 314d 3030 2030     NISHED..DWM1000 
  412b7c:	4e49 5449 4149 494c 415a 4954 4e4f 2d20     INITIALIZATION -
  412b8c:	5320 4154 5452 4445 000a 0000 5744 314d      STARTED....DWM1
  412b9c:	3030 2030 4e49 5449 4149 494c 415a 4954     000 INITIALIZATI
  412bac:	4e4f 2d20 4620 4e49 5349 4548 0a44 0000     ON - FINISHED...
  412bbc:	4441 2043 4e49 5449 4149 494c 415a 4954     ADC INITIALIZATI
  412bcc:	4e4f 2d20 5320 4154 5452 4445 000a 0000     ON - STARTED....
  412bdc:	4441 2043 4e49 5449 4149 494c 415a 4954     ADC INITIALIZATI
  412bec:	4e4f 2d20 4620 4e49 5349 4548 0a44 0000     ON - FINISHED...
  412bfc:	5753 5449 4843 4920 494e 4954 4c41 5a49     SWITCH INITIALIZ
  412c0c:	5441 4f49 204e 202d 5453 5241 4554 0a44     ATION - STARTED.
  412c1c:	0000 0000 5753 5449 4843 4920 494e 4954     ....SWITCH INITI
  412c2c:	4c41 5a49 5441 4f49 204e 202d 4946 494e     ALIZATION - FINI
  412c3c:	4853 4445 000a 0000 4550 4952 4546 4152     SHED....PERIFERA
  412c4c:	204c 5249 2051 4e49 5449 4149 494c 415a     L IRQ INITIALIZA
  412c5c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  412c6c:	4550 4952 4546 4152 204c 5249 2051 4e49     PERIFERAL IRQ IN
  412c7c:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  412c8c:	4e49 5349 4548 0a44 0000 0000 7845 7469     INISHED.....Exit
  412c9c:	6e69 2067 6977 6874 7320 6174 7574 2073     ing with status 
  412cac:	6425 0a2e 0000 0000 454d 204d 5245 4f52     %d......MEM ERRO
  412cbc:	2052 5441 3020 2578 2078 203a 5845 3a50     R AT 0x%x : EXP:
  412ccc:	7830 7825 2c20 5220 5643 203a 7830 7825     0x%x , RCV: 0x%x
  412cdc:	0a20 0000 4453 4152 204d 5546 4c4c 4320      ...SDRAM FULL C
  412cec:	4548 4b43 4320 4d4f 4c50 5445 0045 0000     HECK COMPLETE...
  412cfc:	3249 2043 5245 2152 000a 0000 7825 202c     I2C ERR!....%x, 
  412d0c:	0000 0000 4553 5652 204f 5244 5649 5245     ....SERVO DRIVER
  412d1c:	5320 5445 5055 4320 4d4f 4c50 4145 4554      SETUP COMPLEATE
  412d2c:	000a 0000 4d49 3a47 0000 0000 453a 444e     ....IMG:....:END
  412d3c:	4d49 0a47 0000 0000 6946 696e 6873 6465     IMG.....Finished
  412d4c:	7320 7265 6f76 6320 6c61 6420 7461 2061      servo cal data 
  412d5c:	6f46 6c6c 776f 3a73 000a 0000 007b 0000     Follows:....{...
  412d6c:	6625 252c 2c66 0000 0a7d 0000 7453 7261     %f,%f,..}...Star
  412d7c:	6574 2064 6573 7672 206f 6163 0a6c 0000     ted servo cal...
  412d8c:	454c 2544 2064 4553 2054 4f54 2520 0a64     LED%d SET TO %d.
  412d9c:	0000 0000 4553 5652 204f 454c 3a47 6425     ....SERVO LEG:%d
  412dac:	532c 5245 4f56 253a 2064 4f4d 4556 2044     ,SERVO:%d MOVED 
  412dbc:	4f54 2520 0a64 0000 6142 7474 7265 2079     TO %d...Battery 
  412dcc:	6f56 746c 6761 3a65 6625 000a 6554 7473     Voltage:%f..Test
  412ddc:	6544 4976 3a44 3020 2578 0a78 0000 0000     DevID: 0x%x.....
  412dec:	7953 5373 6174 7574 3a73 3020 2578 0a78     SysStatus: 0x%x.
  412dfc:	0000 0000 4449 5720 4952 5454 4e45 520a     ....ID WRITTEN.R
  412e0c:	4145 2044 4142 4b43 203a 7830 7825 000a     EAD BACK: 0x%x..
  412e1c:	4154 4b53 2031 4e49 5449 4149 494c 415a     TASK1 INITIALIZA
  412e2c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  412e3c:	4154 4b53 2031 4e49 5449 4149 494c 415a     TASK1 INITIALIZA
  412e4c:	4954 4e4f 2d20 4620 4e49 5349 4548 2044     TION - FINISHED 
  412e5c:	207c 4e45 4554 4952 474e 4920 464e 4e49     | ENTERING INFIN
  412e6c:	5449 2045 4f4c 504f 000a 0000 2a2a 2a2a     ITE LOOP....****
  412e7c:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
  412e8c:	000a 0000 4157 4e52 4e49 3a47 4220 5441     ....WARNING: BAT
  412e9c:	5620 4c4f 2054 5441 4320 4952 4954 4143      VOLT AT CRITICA
  412eac:	204c 454c 4556 534c 000a 0000 4944 4153     L LEVELS....DISA
  412ebc:	4c42 4e49 2047 4553 5652 204f 5257 5449     BLING SERVO WRIT
  412ecc:	2045 554f 0a54 0000 4c50 4145 4553 4420     E OUT...PLEASE D
  412edc:	5349 4f43 4e4e 4345 2054 4142 5454 5245     ISCONNECT BATTER
  412eec:	2059 4f4e 2157 000a 454c 2047 4f43 544e     Y NOW!..LEG CONT
  412efc:	4f52 204c 4154 4b53 4920 494e 4954 4c41     ROL TASK INITIAL
  412f0c:	5a49 5441 4f49 204e 202d 5453 5241 4554     IZATION - STARTE
  412f1c:	0a44 0000 454c 2047 4f43 544e 4f52 204c     D...LEG CONTROL 
  412f2c:	4154 4b53 4920 494e 4954 4c41 5a49 5441     TASK INITIALIZAT
  412f3c:	4f49 204e 202d 4946 494e 4853 4445 7c20     ION - FINISHED |
  412f4c:	4520 544e 5245 4e49 2047 4e49 4946 494e      ENTERING INFINI
  412f5c:	4554 4c20 4f4f 0a50 0000 0000 4c43 2049     TE LOOP.....CLI 
  412f6c:	4154 4b53 4920 494e 4954 4c41 5a49 5441     TASK INITIALIZAT
  412f7c:	4f49 204e 202d 5453 5241 4554 0a44 0000     ION - STARTED...
  412f8c:	4c43 2049 4154 4b53 4920 494e 4954 4c41     CLI TASK INITIAL
  412f9c:	5a49 5441 4f49 204e 202d 4946 494e 4853     IZATION - FINISH
  412fac:	4445 7c20 4520 544e 5245 4e49 2047 4e49     ED | ENTERING IN
  412fbc:	4946 494e 4554 4c20 4f4f 0a50 0000 0000     FINITE LOOP.....
  412fcc:	4f43 4d4d 4e41 2044 494c 454e 5320 4154     COMMAND LINE STA
  412fdc:	5452 4445 000a 0000 5946 5f50 6548 6178     RTED....FYP_Hexa
  412fec:	6f62 5f74 5441 4153 534d 3037 4d5f 4c45     bot_ATSAMS70_MEL
  412ffc:	414c 5254 4e4f 3039 3030 003e 0020 0000     LATRON9000>. ...
  41300c:	656c 0064 616d 756e 7673 006f 6162 7674     led.manusvo.batv
  41301c:	6c6f 0a74 0000 0000 7564 706d 6d69 0067     olt.....dumpimg.
  41302c:	6177 6b6c 0000 0000 6177 6b6c 7963 6974     walk....walkcyti
  41303c:	656d 0000 6576 6272 736f 0065 5744 2d4d     me..verbose.DWM-
  41304c:	6574 7473 000a 0000 5744 2d4d 6573 646e     test....DWM-send
  41305c:	0000 0000 5744 2d4d 726f 654c 0a64 0000     ....DWM-orLed...
  41306c:	5744 2d4d 5752 6574 7473 0000 6163 646d     DWM-RWtest..camd
  41307c:	7374 0068 656d 746d 7365 0a74 0000 0000     tsh.memtest.....
  41308c:	5744 2d4d 6c63 5372 6174 7574 0a73 0000     DWM-clrStatus...
  41309c:	7673 436f 6c61 000a 7673 436f 6c61 7053     svoCal..svoCalSp
  4130ac:	6365 0000 7573 7072 6972 6573 000a 0000     ec..surprise....
  4130bc:	6572 616c 5378 6f76 0000 0000 7453 6e61     relaxSvo....Stan
  4130cc:	5564 0a70 0000 0000 6953 4474 776f 0a6e     dUp.....SitDown.
  4130dc:	0000 0000 6572 616c 4178 6c6c 000a 0000     ....relaxAll....
  4130ec:	6167 7469 7554 6e72 0000 0000 6167 7469     gaitTurn....gait
  4130fc:	6944 0072 6167 7469 7453 6e61 6563 0000     Dir.gaitStance..
  41310c:	6167 7469 6748 0074 6167 7469 7550 0070     gaitHgt.gaitPup.
  41311c:	6167 7469 7453 6972 6564 0000 6167 7469     gaitStride..gait
  41312c:	7453 6c79 0065 0000 7673 696f 686e 6269     Style...svoinhib
  41313c:	0000 0000 7463 6c72 6d43 0064 4552 4553     ....ctrlCmd.RESE
  41314c:	0a54 0000 5245 4f52 3a52 4320 6d6f 616d     T...ERROR: Comma
  41315c:	646e 6e20 746f 6620 756f 646e 000a 0000     nd not found....
  41316c:	4143 454d 4152 5020 4f52 4543 5353 4e49     CAMERA PROCESSIN
  41317c:	2047 4154 4b53 4920 494e 4954 4c41 5a49     G TASK INITIALIZ
  41318c:	5441 4f49 204e 202d 5453 5241 4554 0a44     ATION - STARTED.
  41319c:	0000 0000 4143 454d 4152 5020 4f52 4543     ....CAMERA PROCE
  4131ac:	5353 4e49 2047 4154 4b53 4920 494e 4954     SSING TASK INITI
  4131bc:	4c41 5a49 5441 4f49 204e 202d 4946 494e     ALIZATION - FINI
  4131cc:	4853 4445 000a 0000 6863 6e61 6567 2064     SHED....changed 
  4131dc:	6970 3a78 2520 0a64 6162 646e 6977 6874     pix: %d.bandwith
  4131ec:	203a 6625 0a25 0000 4f42 5241 2044 4e49     : %f%...BOARD IN
  4131fc:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  41320c:	4e49 5349 4548 0a44 0000 0000 5452 534f     INISHED.....RTOS
  41321c:	5420 5341 204b 4e49 5449 4149 494c 415a      TASK INITIALIZA
  41322c:	4954 4e4f 2d20 5320 4154 5452 4445 000a     TION - STARTED..
  41323c:	4154 4b53 0031 0000 454c 4347 5254 544c     TASK1...LEGCTRLT
  41324c:	5341 004b 4d49 5447 5341 004b 4c43 5449     ASK.IMGTASK.CLIT
  41325c:	5341 004b 5452 534f 5420 5341 204b 4e49     ASK.RTOS TASK IN
  41326c:	5449 4149 494c 415a 4954 4e4f 2d20 4620     ITIALIZATION - F
  41327c:	4e49 5349 4548 0a44 0000 0000 5453 5241     INISHED.....STAR
  41328c:	4954 474e 5220 4f54 0a53 0000 5452 534f     TING RTOS...RTOS
  41329c:	4820 5341 5220 5445 5255 454e 2e44 5420      HAS RETURNED. T
  4132ac:	4948 2053 4853 554f 444c 4520 4556 2052     HIS SHOULD EVER 
  4132bc:	4148 5050 4e45 202e 5845 5254 4d45 2045     HAPPEN. EXTREME 
  4132cc:	5245 4f52 0a52 0000 6361 736f 0000 0000     ERROR...acos....
  4132dc:	7361 6e69 0000 0000 6d66 646f 0000 0000     asin....fmod....
  4132ec:	7173 7472 0000 0000 0000 0000               sqrt........

004132f8 <Zero>:
	...
  413304:	0000 8000                                   ....

00413308 <npio2_hw>:
  413308:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
  413318:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
  413328:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
  413338:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
  413348:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
  413358:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
  413368:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
  413378:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

00413388 <two_over_pi>:
  413388:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
  413398:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
  4133a8:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
  4133b8:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
  4133c8:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
  4133d8:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
  4133e8:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
  4133f8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
  413408:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
  413418:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
  413428:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
  413438:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
  413448:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
  413458:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
  413468:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
  413478:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
  413488:	e27b 0060 8c6b 00c0                         {.`.k...

00413490 <init_jk>:
  413490:	0002 0000 0003 0000 0004 0000 0006 0000     ................

004134a0 <PIo2>:
  4134a0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
  4134b0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
  4134c0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
  4134d0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

004134e0 <atanlo>:
  4134e0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
  4134f0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

00413500 <atanhi>:
  413500:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
  413510:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?
  413520:	202c 7566 636e 6974 6e6f 203a 0000 0000     , function: ....
  413530:	7361 6573 7472 6f69 206e 2522 2273 6620     assertion "%s" f
  413540:	6961 656c 3a64 6620 6c69 2065 2522 2273     ailed: file "%s"
  413550:	202c 696c 656e 2520 2564 2573 0a73 0000     , line %d%s%s...
  413560:	0043 0000                                   C...

00413564 <_global_impure_ptr>:
  413564:	00b0 2040                                   ..@ 

00413568 <tinytens>:
  413568:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
  413578:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
  413588:	6f43 64ac 0628 1168                         Co.d(.h.

00413590 <fpinan.5307>:
  413590:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
  4135a0:	0000 0000 666e 0000 6e69 7469 0079 0000     ....nf..inity...
  4135b0:	6e61 0000                                   an..

004135b4 <fpi.5271>:
  4135b4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
  4135c4:	0000 0000                                   ....

004135c8 <zeroes.6911>:
  4135c8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

004135d8 <blanks.6910>:
  4135d8:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4135e8:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
  4135f8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  413608:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
  413618:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
  413628:	0030 0000                                   0...

0041362c <zeroes.6869>:
  41362c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0041363c <blanks.6868>:
  41363c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0041364c <_ctype_>:
  41364c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  41365c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  41366c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  41367c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  41368c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  41369c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4136ac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4136bc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4136cc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
  413750:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00413760 <__hexdig>:
	...
  413790:	1110 1312 1514 1716 1918 0000 0000 0000     ................
  4137a0:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  4137c0:	1a00 1c1b 1e1d 001f 0000 0000 0000 0000     ................
	...
  413860:	4f50 4953 0058 0000 002e 0000 0000 0000     POSIX...........

00413870 <__mprec_tens>:
  413870:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  413880:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  413890:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4138a0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4138b0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4138c0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4138d0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4138e0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4138f0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  413900:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  413910:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  413920:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  413930:	9db4 79d9 7843 44ea                         ...yCx.D

00413938 <p05.5302>:
  413938:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

00413948 <__mprec_bigtens>:
  413948:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  413958:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  413968:	bf3c 7f73 4fdd 7515                         <.s..O.u

00413970 <_init>:
  413970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413972:	bf00      	nop
  413974:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413976:	bc08      	pop	{r3}
  413978:	469e      	mov	lr, r3
  41397a:	4770      	bx	lr

0041397c <__init_array_start>:
  41397c:	0040eb6d 	.word	0x0040eb6d

00413980 <__frame_dummy_init_array_entry>:
  413980:	00400165                                e.@.

00413984 <_fini>:
  413984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413986:	bf00      	nop
  413988:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41398a:	bc08      	pop	{r3}
  41398c:	469e      	mov	lr, r3
  41398e:	4770      	bx	lr

00413990 <__fini_array_start>:
  413990:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <SvoCal>:
20400018:	4a08 c166 0f49 3fd7 3bb0 c09b 3394 3ff2     .Jf.I..?.;...3.?
20400028:	cbf0 c15c bf4d 3fd8 65a8 c13e 26d5 3fde     ..\.M..?.e>..&.?
20400038:	9903 bf19 4b1b 3ffe 65e0 4086 f927 4005     .....K.?.e.@'..@
20400048:	cccd 3ecc a32b 3c11 fffc c08f cccd bdcc     ...>+..<........
20400058:	ccc9 c06c 6402 bda8 665e c0c6 15ad be0d     ..l..d..^f......
20400068:	0000 bfc0 882f bd08 0000 bf00 0ae9 bc36     ..../.........6.
20400078:	ff40 413f 10fd 3f91 4884 bfca 8141 3f7b     @.?A...?.H..A.{?
20400088:	fefc bfff 4fa9 3f7a 3505 bf5c 8d9b 3f7d     .....Oz?.5\...}?
20400098:	e3ef c0eb 0835 3f6b cbcf c0fc 8783 3f69     ....5.k?......i?

204000a8 <cam_dif_tsh>:
204000a8:	0019 0000                                   ....

204000ac <__fdlib_version>:
204000ac:	0001 0000                                   ....

204000b0 <impure_data>:
204000b0:	0000 0000 039c 2040 0404 2040 046c 2040     ......@ ..@ l.@ 
	...
204000e4:	3560 0041 0000 0000 0000 0000 0000 0000     `5A.............
	...
20400158:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400168:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004d8 <_impure_ptr>:
204004d8:	00b0 2040                                   ..@ 

204004dc <__malloc_av_>:
	...
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 
20400884:	087c 2040 087c 2040 0884 2040 0884 2040     |.@ |.@ ..@ ..@ 
20400894:	088c 2040 088c 2040 0894 2040 0894 2040     ..@ ..@ ..@ ..@ 
204008a4:	089c 2040 089c 2040 08a4 2040 08a4 2040     ..@ ..@ ..@ ..@ 
204008b4:	08ac 2040 08ac 2040 08b4 2040 08b4 2040     ..@ ..@ ..@ ..@ 
204008c4:	08bc 2040 08bc 2040 08c4 2040 08c4 2040     ..@ ..@ ..@ ..@ 
204008d4:	08cc 2040 08cc 2040 08d4 2040 08d4 2040     ..@ ..@ ..@ ..@ 

204008e4 <__malloc_trim_threshold>:
204008e4:	0000 0002                                   ....

204008e8 <__malloc_sbrk_base>:
204008e8:	ffff ffff                                   ....

204008ec <__ctype_ptr__>:
204008ec:	364c 0041                                   L6A.

204008f0 <lconv>:
204008f0:	3868 0041 2cb0 0041 2cb0 0041 2cb0 0041     h8A..,A..,A..,A.
20400900:	2cb0 0041 2cb0 0041 2cb0 0041 2cb0 0041     .,A..,A..,A..,A.
20400910:	2cb0 0041 2cb0 0041 ffff ffff ffff ffff     .,A..,A.........
20400920:	ffff ffff ffff 0000                         ........

20400928 <lc_ctype_charset>:
20400928:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20400948 <__mb_cur_max>:
20400948:	0001 0000                                   ....

2040094c <__wctomb>:
2040094c:	1f19 0041                                   ..A.
